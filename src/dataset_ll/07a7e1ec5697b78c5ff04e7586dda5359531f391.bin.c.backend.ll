source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_d750.14 = constant i32 -382906384
@global_var_1e6f8.19 = global i32 0
@global_var_82dc.20 = constant i32 -352321547
@global_var_125f0.21 = constant i32 -382909968
@global_var_a048.27 = constant i32 -382906384
@global_var_a480.29 = constant i32 -382906384
@global_var_896c.31 = constant i32 -382906384
@global_var_c19c.33 = constant i32 -382906384
@global_var_baa4.35 = constant i32 -382906384
@global_var_b2f0.37 = constant i32 -382906384
@global_var_9a2c.40 = constant i32 -382906384
@global_var_9398.42 = constant i32 -382906384
@global_var_20780.45 = global i32 0
@global_var_ab34.49 = constant i32 132992
@global_var_15ecc.57 = constant i32 47
@global_var_20788.59 = global i32 0
@global_var_1e6fc.61 = global i32 0
@global_var_20784.63 = global i32 0
@global_var_10930.65 = constant i32 -382910336
@global_var_d30c.66 = constant i32 -509607932
@global_var_d618.68 = constant i32 -382910448
@global_var_15ed0.74 = constant [12 x i8] c"89.46.77.14\00"
@global_var_20790.77 = local_unnamed_addr global i32 0
@global_var_2078e.78 = local_unnamed_addr global i32 0
@global_var_1e700.80 = global i32 0
@global_var_15edc.88 = constant i32 10
@global_var_10b64.94 = constant i32 -382910336
@global_var_15ee0.97 = constant i32 16777216
@global_var_1e708.99 = global i32 0
@global_var_1e714.101 = global i32 0
@global_var_1e70c.103 = global i32 0
@global_var_1e710.105 = global i32 0
@global_var_1e74c.119 = global i32 0
@global_var_1e718.121 = global i32 0
@global_var_1e744.123 = global i32 0
@global_var_207a4.127 = global i32 0
@global_var_2079c.131 = global i32 0
@global_var_207a0.133 = global i32 0
@global_var_1e71e.136 = local_unnamed_addr global i32 0
@global_var_1e720.140 = local_unnamed_addr global i32 0
@global_var_1e724.141 = local_unnamed_addr global i32 0
@global_var_1e725.142 = local_unnamed_addr global i32 0
@global_var_1e73e.145 = local_unnamed_addr global i32 0
@global_var_15eec.147 = constant i32 0
@global_var_15ee8.149 = constant [5 x i8] c"&;; \00"
@global_var_15ef0.151 = constant [5 x i8] c"5:?;\00"
@global_var_15ef8.153 = constant [9 x i8] c"<!: acam\00"
@global_var_15f04.155 = constant [7 x i8] c" 18:1 \00"
@global_var_15f0c.157 = constant [8 x i8] c"0125!8 \00"
@global_var_15f14.159 = constant [9 x i8] c"$5''#;&0\00"
@global_var_15f20.161 = constant [6 x i8] c"509=:\00"
@global_var_15f28.163 = constant [6 x i8] c"\22=.,\22\00"
@global_var_15f30.165 = constant [8 x i8] c"'!$$;& \00"
@global_var_15f38.167 = constant i32 423502179
@global_var_15f48.169 = constant [6 x i8] c"efg`a\00"
@global_var_15f50.171 = constant [5 x i8] c"!'1&\00"
@global_var_15f58.173 = constant i32 943467547
@global_var_15f64.175 = constant i32 322070023
@global_var_1e728.176 = local_unnamed_addr global i32 0
@global_var_1e726.177 = local_unnamed_addr global i32 0
@global_var_1e72c.178 = local_unnamed_addr global i32 0
@global_var_1e734.180 = local_unnamed_addr global i32 0
@global_var_1e740.181 = local_unnamed_addr global i32 0
@global_var_e128.183 = constant i32 -382910352
@global_var_15f70.185 = constant [3 x i8] c"\0D\0A\00"
@global_var_15f7c.187 = constant i32 2096127
@global_var_15f73.189 = constant i32 2095871
@global_var_207ac.195 = global i32 0
@global_var_15f80.202 = constant [3 x i8] c"Qm\00"
@global_var_207b4.203 = local_unnamed_addr global i32 0
@global_var_207b8.204 = local_unnamed_addr global i32 0
@global_var_15f84.206 = constant i32 59987
@global_var_207bc.207 = local_unnamed_addr global i32 0
@global_var_207c0.208 = local_unnamed_addr global i32 0
@global_var_160ec.210 = constant i32 808465680
@global_var_207c8.211 = local_unnamed_addr global i32 0
@global_var_207c4.212 = local_unnamed_addr global i32 0
@global_var_15f88.214 = constant [7 x i8] c"'<188T\00"
@global_var_207cc.215 = local_unnamed_addr global i32 0
@global_var_207d0.216 = local_unnamed_addr global i32 0
@global_var_15f90.218 = constant [8 x i8] c"1:5681T\00"
@global_var_207d4.219 = local_unnamed_addr global i32 0
@global_var_207d8.220 = local_unnamed_addr global i32 0
@global_var_15f98.222 = constant [8 x i8] c"'-' 19T\00"
@global_var_207dc.223 = local_unnamed_addr global i32 0
@global_var_207e0.224 = local_unnamed_addr global i32 0
@global_var_15fa0.226 = constant [4 x i8] c"'<T\00"
@global_var_207e8.227 = local_unnamed_addr global i32 0
@global_var_207e4.228 = local_unnamed_addr global i32 0
@global_var_15fa4.230 = constant i32 977090171
@global_var_207f0.231 = local_unnamed_addr global i32 0
@global_var_207ec.232 = local_unnamed_addr global i32 0
@global_var_15fb8.234 = constant i32 470227742
@global_var_207f8.235 = local_unnamed_addr global i32 0
@global_var_207f4.236 = local_unnamed_addr global i32 0
@global_var_15fd4.238 = constant [10 x i8] c":7;&&17 T\00"
@global_var_20800.239 = local_unnamed_addr global i32 0
@global_var_207fc.240 = local_unnamed_addr global i32 0
@global_var_15fe0.242 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_20804.243 = local_unnamed_addr global i32 0
@global_var_20808.244 = local_unnamed_addr global i32 0
@global_var_15ff4.246 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_20810.247 = local_unnamed_addr global i32 0
@global_var_2080c.248 = local_unnamed_addr global i32 0
@global_var_1600c.250 = constant [8 x i8] c"{$&;7{T\00"
@global_var_20814.251 = local_unnamed_addr global i32 0
@global_var_20818.252 = local_unnamed_addr global i32 0
@global_var_16014.254 = constant [6 x i8] c"{1,1T\00"
@global_var_2081c.255 = local_unnamed_addr global i32 0
@global_var_20820.256 = local_unnamed_addr global i32 0
@global_var_1601c.258 = constant [5 x i8] c"{20T\00"
@global_var_20828.259 = local_unnamed_addr global i32 0
@global_var_20824.260 = local_unnamed_addr global i32 0
@global_var_16024.262 = constant [7 x i8] c"{95$'T\00"
@global_var_2082c.263 = local_unnamed_addr global i32 0
@global_var_20830.264 = local_unnamed_addr global i32 0
@global_var_1602c.266 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_20834.267 = local_unnamed_addr global i32 0
@global_var_20838.268 = local_unnamed_addr global i32 0
@global_var_1603c.270 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_20894.271 = local_unnamed_addr global i32 0
@global_var_20898.272 = local_unnamed_addr global i32 0
@global_var_16048.274 = constant [8 x i8] c"z5:=91T\00"
@global_var_2089c.275 = local_unnamed_addr global i32 0
@global_var_208a0.276 = local_unnamed_addr global i32 0
@global_var_16050.278 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_2083c.279 = local_unnamed_addr global i32 0
@global_var_20840.280 = local_unnamed_addr global i32 0
@global_var_16064.282 = constant [9 x i8] c"5''#;&0T\00"
@global_var_20844.283 = local_unnamed_addr global i32 0
@global_var_20848.284 = local_unnamed_addr global i32 0
@global_var_1610c.286 = constant i32 557516544
@global_var_20850.287 = local_unnamed_addr global i32 0
@global_var_2084c.288 = local_unnamed_addr global i32 0
@global_var_16070.290 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_20858.291 = local_unnamed_addr global i32 0
@global_var_20854.292 = local_unnamed_addr global i32 0
@global_var_16084.294 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_20860.295 = local_unnamed_addr global i32 0
@global_var_2085c.296 = local_unnamed_addr global i32 0
@global_var_16094.298 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_20864.299 = local_unnamed_addr global i32 0
@global_var_20868.300 = local_unnamed_addr global i32 0
@global_var_160a4.302 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_20870.303 = local_unnamed_addr global i32 0
@global_var_2086c.304 = local_unnamed_addr global i32 0
@global_var_160b8.306 = constant [9 x i8] c"$662*7!E\00"
@global_var_20874.307 = local_unnamed_addr global i32 0
@global_var_20878.308 = local_unnamed_addr global i32 0
@global_var_160c4.310 = constant [6 x i8] c";3=:T\00"
@global_var_2087c.311 = local_unnamed_addr global i32 0
@global_var_20880.312 = local_unnamed_addr global i32 0
@global_var_160cc.314 = constant [7 x i8] c"1: 1&T\00"
@global_var_20884.315 = local_unnamed_addr global i32 0
@global_var_20888.316 = local_unnamed_addr global i32 0
@global_var_160d4.318 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_2088c.319 = local_unnamed_addr global i32 0
@global_var_20890.320 = local_unnamed_addr global i32 0
@global_var_10c28.326 = constant i32 -443088884
@global_var_d800.328 = constant i32 167772235
@global_var_f000.337 = constant i32 -481099739
@global_var_1e76c.345 = global i32 0
@global_var_1105c.347 = constant i32 -456978431
@global_var_208a4.359 = global i32 0
@global_var_115e0.365 = constant i32 -478871519
@global_var_12060.379 = constant i32 -478805983
@global_var_1243c.388 = constant i32 -382906384
@global_var_1e750.396 = local_unnamed_addr global i32 0
@global_var_13ec4.398 = constant i32 -509591552
@global_var_1e754.407 = local_unnamed_addr global i32 0
@global_var_148f8.410 = constant i32 -382909968
@global_var_12c9c.411 = constant i32 -494075872
@global_var_10b2c.412 = constant i32 -382910336
@global_var_1613c.416 = constant [11 x i8] c"/proc/stat\00"
@global_var_16148.419 = constant i32 32
@global_var_1614c.422 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_1615c.424 = constant [10 x i8] c"processor\00"
@global_var_16180.426 = constant i32 604672
@global_var_12e5c.429 = constant i32 -369098421
@global_var_1e764.442 = local_unnamed_addr global i32 0
@global_var_1e768.444 = local_unnamed_addr global i32 0
@global_var_16184.447 = constant [10 x i8] c"/dev/null\00"
@global_var_1286c.448 = constant i32 -442543860
@global_var_1485c.453 = constant i32 -382910352
@global_var_11090.458 = constant i32 -369094630
@global_var_13828.471 = constant i32 -335545128
@global_var_13cf0.477 = constant i32 -382909456
@global_var_2077c.480 = local_unnamed_addr global i32 0
@global_var_16164.488 = constant i32 114
@global_var_14d1c.493 = constant i32 -382906384
@global_var_20003.502 = global i32 0
@global_var_20000.503 = global i32 0
@global_var_147fc.513 = constant i32 -509607926
@global_var_16490.518 = constant i32 0
@global_var_15cb8.519 = constant i32 -382909968
@global_var_14b40.529 = constant i32 -509607928
@global_var_1e6d8.2 = external global i8*
@global_var_1e6f4.17 = external global i8*
@global_var_1e6f5.25 = global i8 0
@1 = internal constant [4 x i8] c"8\E5\01\00"
@global_var_2078c.76 = global i16* null
@global_var_1e704.92 = external global i8*
@global_var_1e748.125 = global i16* null
@global_var_1e71c.135 = external global i8*
@global_var_1e730.138 = global i16 0
@global_var_1e73c.139 = local_unnamed_addr global i8 0
@global_var_1e732.143 = local_unnamed_addr global i16 0
@global_var_1e73d.144 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1e6d8.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e6d8.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v2_80e0.pre, %dec_label_pc_80c4 ], [ %v3_80b0, %entry ]
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_1e6d8.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 124084 to i32*), align 4
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 124084

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_13598(i32 ptrtoint (i32* @global_var_d750.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89788, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_1286c()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_81ec:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_81ec = load i32, i32* @r4, align 4
  store i32 %v3_81ec, i32* %stack_var_-32, align 4
  %v6_81ec = load i32, i32* @r5, align 4
  %v9_81ec = load i32, i32* @r6, align 4
  %v12_81ec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_8204 = call i32 @function_10854()
  store i32 %v0_8204, i32* @r0, align 4
  %v7_8208 = icmp eq i32 %v0_8204, -1
  %tmp23 = icmp slt i32 %v0_8204, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_81ec
  br label %dec_label_pc_8228

bb24:                                             ; preds = %dec_label_pc_81ec
  %. = zext i1 %v7_8208 to i32
  store i32 %., i32* @r5, align 4
  %v2_8220 = icmp eq i1 %v7_8208, false
  br i1 %v2_8220, label %dec_label_pc_8230, label %dec_label_pc_8228

dec_label_pc_8228:                                ; preds = %.thread2, %bb24
  %v2_8228 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8228, i32* @r4, align 4
  store i32 %v6_81ec, i32* @r5, align 4
  store i32 %v9_81ec, i32* @r6, align 4
  store i32 %v12_81ec, i32* @r7, align 4
  ret i32 %v0_8204

dec_label_pc_8230:                                ; preds = %bb24
  %v0_8230 = call i32 @function_10854()
  %v7_8234 = icmp eq i32 %v0_8230, -1
  store i32 %v0_8230, i32* @r4, align 4
  br i1 %v7_8234, label %dec_label_pc_8264, label %dec_label_pc_8240

dec_label_pc_8240:                                ; preds = %dec_label_pc_8230
  %v2_8240 = icmp eq i32 %v0_8230, 0
  br i1 %v2_8240, label %dec_label_pc_8248, label %dec_label_pc_826c

dec_label_pc_8248:                                ; preds = %dec_label_pc_8240
  %v0_8248 = load i32, i32* @r6, align 4
  %v1_824c = call i32 @function_12c48(i32 %v0_8248)
  store i32 %v1_824c, i32* @r0, align 4
  %v0_8250 = call i32 @function_10728()
  %v2_8258 = call i32 @function_10930(i32 %v0_8250, i32 9)
  %v0_825c = load i32, i32* @r4, align 4
  %v1_8260 = call i32 @function_12b90(i32 %v0_825c)
  br label %dec_label_pc_8264

dec_label_pc_8264:                                ; preds = %dec_label_pc_8230, %dec_label_pc_8248
  %v0_8264 = load i32, i32* @r5, align 4
  %v1_8268 = call i32 @function_12b90(i32 %v0_8264)
  br label %dec_label_pc_826c

dec_label_pc_826c:                                ; preds = %dec_label_pc_8240, %dec_label_pc_8264
  %v2_8270 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8270 = zext i8 %v2_8270 to i32
  %v2_8274 = icmp eq i8 %v2_8270, 0
  br i1 %v2_8274, label %dec_label_pc_82b8, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %dec_label_pc_826c
  %v2_8280 = load i32, i32* @global_var_1e6f8.19, align 4
  %v1_8284 = inttoptr i32 %v2_8280 to i32*
  %v2_8284 = load i32, i32* %v1_8284, align 4
  store i32 %v2_8284, i32* @ip, align 4
  %v1_8288 = add i32 %v2_8284, 4
  %v2_8288 = inttoptr i32 %v1_8288 to i8*
  %v3_8288 = load i8, i8* %v2_8288, align 1
  %v4_8288 = zext i8 %v3_8288 to i32
  %v1_828c = load i32, i32* @r7, align 4
  %v9_828c = icmp eq i32 %v4_8288, %v1_828c
  br i1 %v9_828c, label %dec_label_pc_82c0, label %dec_label_pc_82ac.preheader

dec_label_pc_82ac.preheader:                      ; preds = %dec_label_pc_827c
  %v1_8290 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ac

dec_label_pc_829c:                                ; preds = %dec_label_pc_82ac
  %v4_829c = mul i32 %v1_82ac, 4
  %v5_829c = add i32 %v4_829c, %v2_8280
  %v6_829c = inttoptr i32 %v5_829c to i32*
  %v7_829c = load i32, i32* %v6_829c, align 4
  store i32 %v7_829c, i32* @ip, align 4
  %v1_82a0 = add i32 %v7_829c, 4
  %v2_82a0 = inttoptr i32 %v1_82a0 to i8*
  %v3_82a0 = load i8, i8* %v2_82a0, align 1
  %v4_82a0 = zext i8 %v3_82a0 to i32
  %v9_82a4 = icmp eq i32 %v4_82a0, %v1_828c
  br i1 %v9_82a4, label %dec_label_pc_82c0, label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_82ac.preheader, %dec_label_pc_829c
  %v0_82ac = phi i32 [ %v1_8290, %dec_label_pc_82ac.preheader ], [ %v1_82ac, %dec_label_pc_829c ]
  %v1_82ac = add i32 %v0_82ac, 1
  %v9_82b0 = icmp eq i32 %v1_82ac, %v3_8270
  br i1 %v9_82b0, label %dec_label_pc_82b8, label %dec_label_pc_829c

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac, %dec_label_pc_826c, %dec_label_pc_82c0
  %v1_82bc = call i32 @function_12b90(i32 0)
  %v0_82d0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82c0

dec_label_pc_82c0:                                ; preds = %dec_label_pc_829c, %dec_label_pc_827c, %dec_label_pc_82b8
  %v0_82d0 = phi i32 [ %v2_8284, %dec_label_pc_827c ], [ %v0_82d0.pre, %dec_label_pc_82b8 ], [ %v7_829c, %dec_label_pc_829c ]
  %v1_82d0 = inttoptr i32 %v0_82d0 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  store i32 %v2_82d0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_82d0)
  br label %dec_label_pc_82b8

; uselistorder directives
  uselistorder i32 %v1_82ac, { 2, 0, 1 }
  uselistorder i32 %v0_8230, { 1, 2, 0 }
  uselistorder i1 %v7_8208, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_82c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_826c, { 1, 0 }
  uselistorder label %dec_label_pc_8264, { 1, 0 }
  uselistorder label %dec_label_pc_8228, { 1, 0 }
}

define i32 @function_82e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82e8 = load i32, i32* @r5, align 4
  %v9_82e8 = load i32, i32* @r6, align 4
  %v12_82e8 = load i32, i32* @r7, align 4
  %v18_82e8 = load i32, i32* @sb, align 4
  %v21_82e8 = load i32, i32* @sl, align 4
  %v24_82e8 = load i32, i32* @fp, align 4
  %v2_82ec = icmp ugt i32 %arg2, 2
  %v7_82ec = icmp eq i32 %arg2, 3
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82f8, i32* @r5, align 4
  %v2_82fc = xor i1 %v7_82ec, true
  %v3_82fc = and i1 %v2_82ec, %v2_82fc
  br i1 %v3_82fc, label %dec_label_pc_830c, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_834c, %.dec_label_pc_8300_crit_edge, %dec_label_pc_8340, %dec_label_pc_8330, %dec_label_pc_830c, %dec_label_pc_82e8, %dec_label_pc_84f8
  %v1_8308 = phi i32 [ %v1_8308.pre, %.dec_label_pc_8300_crit_edge ], [ %v1_8310, %dec_label_pc_834c ], [ %v1_8310, %dec_label_pc_8340 ], [ %v1_8310, %dec_label_pc_8330 ], [ %v1_8310, %dec_label_pc_830c ], [ %v0_82f8, %dec_label_pc_82e8 ], [ %v0_84fc, %dec_label_pc_84f8 ]
  store i32 %v6_82e8, i32* @r5, align 4
  store i32 %v9_82e8, i32* @r6, align 4
  store i32 %v12_82e8, i32* @r7, align 4
  store i32 %v18_82e8, i32* @sb, align 4
  store i32 %v21_82e8, i32* @sl, align 4
  store i32 %v24_82e8, i32* @fp, align 4
  ret i32 %v1_8308

dec_label_pc_830c:                                ; preds = %dec_label_pc_82e8
  %v1_830c = inttoptr i32 %v0_82f8 to i32*
  %v2_830c = load i32, i32* %v1_830c, align 4
  store i32 %v2_830c, i32* %r1.global-to-local, align 4
  %v1_8310 = and i32 %v2_830c, 16711680
  store i32 %v1_8310, i32* %r0.global-to-local, align 4
  %v3_8314 = udiv i32 %v2_830c, 16777216
  %v4_8318 = udiv i32 %v1_8310, 256
  %v5_8318 = or i32 %v4_8318, %v3_8314
  %v1_831c = and i32 %v2_830c, 65280
  store i32 %v1_831c, i32* %r2.global-to-local, align 4
  %v4_8320 = mul nuw nsw i32 %v1_831c, 256
  %v5_8320 = or i32 %v5_8318, %v4_8320
  store i32 %v5_8320, i32* %r3.global-to-local, align 4
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v5_8328 = call i32 @llvm.bswap.i32(i32 %v2_830c)
  store i32 %v5_8328, i32* @fp, align 4
  br i1 %v7_8324, label %dec_label_pc_8300, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_830c
  %v1_8330 = add i32 %v0_82f8, 4
  %v2_8330 = inttoptr i32 %v1_8330 to i8*
  %v3_8330 = load i8, i8* %v2_8330, align 1
  %v4_8330 = zext i8 %v3_8330 to i32
  store i32 %v4_8330, i32* %r2.global-to-local, align 4
  %v7_8334 = icmp eq i32 %arg2, 5
  store i1 %v7_8334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8334, label %dec_label_pc_8300, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_8330
  %v1_8340 = add i32 %v0_82f8, 5
  %v2_8340 = inttoptr i32 %v1_8340 to i8*
  %v3_8340 = load i8, i8* %v2_8340, align 1
  %v4_8340 = zext i8 %v3_8340 to i32
  store i32 %v4_8340, i32* @sb, align 4
  %v2_8344 = icmp eq i8 %v3_8340, 0
  store i1 %v2_8344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8344, label %dec_label_pc_8300, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_8340
  %v2_8350 = mul nuw nsw i32 %v4_8340, 5
  store i32 %v2_8350, i32* @r7, align 4
  %v1_8354 = add i32 %arg2, -6
  store i32 %v1_8354, i32* %r3.global-to-local, align 4
  %v3_8358 = icmp ult i32 %v1_8354, %v2_8350
  %v9_8358 = icmp eq i32 %v1_8354, %v2_8350
  store i1 %v9_8358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8358, label %dec_label_pc_8300, label %dec_label_pc_8360

dec_label_pc_8360:                                ; preds = %dec_label_pc_834c
  store i32 %v4_8340, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8354, i32* @r6, align 4
  %v2_836c = call i32 @function_11ea4(i32 %v4_8340, i32 24)
  store i32 %v2_836c, i32* @ip, align 4
  %v0_8378 = load i32, i32* @r7, align 4
  %v1_8378 = load i32, i32* @r4, align 4
  %v2_8378 = sub i32 %v1_8378, %v0_8378
  store i32 %v2_8378, i32* @r7, align 4
  %v0_837c = load i32, i32* @r5, align 4
  %v1_837c = add i32 %v0_837c, 11
  store i32 %v1_837c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8360
  %v1_8384 = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v2_836c, %dec_label_pc_8360 ]
  %v0_8380 = phi i32 [ %v1_83ac, %dec_label_pc_8380 ], [ %v1_837c, %dec_label_pc_8360 ]
  %v1_8380 = add i32 %v0_8380, -5
  %v2_8380 = inttoptr i32 %v1_8380 to i32*
  %v3_8380 = load i32, i32* %v2_8380, align 4
  store i32 %v3_8380, i32* %r1.global-to-local, align 4
  %v2_8384 = add i32 %v1_8384, 16
  %v3_8384 = inttoptr i32 %v2_8384 to i32*
  store i32 %v3_8380, i32* %v3_8384, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v1_8388 = add i32 %v0_8388, -6
  store i32 %v1_8388, i32* %r3.global-to-local, align 4
  %v0_838c = load i32, i32* %r0.global-to-local, align 4
  %v1_838c = add i32 %v0_838c, -1
  %v2_838c = inttoptr i32 %v1_838c to i8*
  %v3_838c = load i8, i8* %v2_838c, align 1
  %v4_838c = zext i8 %v3_838c to i32
  store i32 %v4_838c, i32* %r2.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v1_8390 = add i32 %v0_8390, -5
  store i32 %v1_8390, i32* @r6, align 4
  %v9_8394 = icmp eq i32 %v1_8390, %v1_8388
  store i1 %v9_8394, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_838c, i32* @r4, align 4
  %v2_83a0 = load i32, i32* @ip, align 4
  %v3_83a0 = add i32 %v2_83a0, 20
  %v4_83a0 = inttoptr i32 %v3_83a0 to i8*
  store i8 %v3_838c, i8* %v4_83a0, align 1
  %v0_83a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83a4 = load i32, i32* @ip, align 4
  %v2_83a4 = add i32 %v1_83a4, 4
  %v3_83a4 = inttoptr i32 %v2_83a4 to i32*
  store i32 %v0_83a4, i32* %v3_83a4, align 4
  %v0_83a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83a8 = trunc i32 %v0_83a8 to i16
  %v2_83a8 = load i32, i32* @ip, align 4
  %v3_83a8 = inttoptr i32 %v2_83a8 to i16*
  store i16 %v1_83a8, i16* %v3_83a8, align 2
  %v0_83ac = load i32, i32* %r0.global-to-local, align 4
  %v1_83ac = add i32 %v0_83ac, 5
  store i32 %v1_83ac, i32* %r0.global-to-local, align 4
  %v0_83b0 = load i32, i32* @ip, align 4
  %v1_83b0 = add i32 %v0_83b0, 24
  store i32 %v1_83b0, i32* @ip, align 4
  %v0_83b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83b4, label %dec_label_pc_83b8, label %dec_label_pc_8380

dec_label_pc_83b8:                                ; preds = %dec_label_pc_8380
  %v0_83b8 = load i32, i32* @r6, align 4
  %v2_83b8 = icmp eq i32 %v0_83b8, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83b8, label %dec_label_pc_84bc, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b8
  %v0_83c0 = load i32, i32* @r4, align 4
  %v1_83c0 = inttoptr i32 %v0_83c0 to i8*
  %v2_83c0 = load i8, i8* %v1_83c0, align 1
  %v3_83c0 = zext i8 %v2_83c0 to i32
  store i32 %v3_83c0, i32* @r5, align 4
  %v2_83c4 = icmp eq i8 %v2_83c0, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -7
  store i32 %v1_83c8, i32* @r8, align 4
  br i1 %v2_83c4, label %bb, label %dec_label_pc_83d4

bb:                                               ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* @r6, align 4
  br label %dec_label_pc_8498

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83dc = call i32 @function_11ea4(i32 %v3_83c0, i32 8)
  store i32 %v2_83dc, i32* %r0.global-to-local, align 4
  %v0_83e0 = load i32, i32* @r8, align 4
  %v2_83e0 = icmp eq i32 %v0_83e0, 0
  store i1 %v2_83e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83dc, i32* @r6, align 4
  br i1 %v2_83e0, label %dec_label_pc_84bc, label %dec_label_pc_83ec

dec_label_pc_83ec:                                ; preds = %dec_label_pc_83d4
  %v0_83ec = load i32, i32* @r4, align 4
  %v1_83ec = add i32 %v0_83ec, 1
  %v2_83ec = inttoptr i32 %v1_83ec to i8*
  %v3_83ec = load i8, i8* %v2_83ec, align 1
  %v0_83f0 = load i32, i32* @r7, align 4
  %v7_83f0 = icmp eq i32 %v0_83f0, 8
  store i1 %v7_83f0, i1* %cpsr_z.global-to-local, align 1
  %v3_83f4 = add i32 %v2_83dc, 4
  %v4_83f4 = inttoptr i32 %v3_83f4 to i8*
  store i8 %v3_83ec, i8* %v4_83f4, align 1
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  store i32 %v1_83f8, i32* %r3.global-to-local, align 4
  %v0_83fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83fc, label %dec_label_pc_84bc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83ec
  %v1_8400 = add i32 %v0_83f8, 2
  %v2_8400 = inttoptr i32 %v1_8400 to i8*
  %v3_8400 = load i8, i8* %v2_8400, align 1
  %v4_8400 = zext i8 %v3_8400 to i32
  store i32 %v4_8400, i32* @r4, align 4
  %v0_8404 = load i32, i32* @r7, align 4
  %v1_8404 = add i32 %v0_8404, -9
  store i32 %v1_8404, i32* @r8, align 4
  %v9_8408 = icmp eq i32 %v1_8404, %v4_8400
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8400, i32* %r1.global-to-local, align 4
  %v5_8410 = icmp slt i32 %v1_8404, %v4_8400
  br i1 %v5_8410, label %dec_label_pc_84bc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8400
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84147 = add i32 %v0_83f8, 3
  store i32 %v7_84147, i32* @r7, align 4
  %v6_8418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8418, i32* @sl, align 4
  br label %dec_label_pc_845c

dec_label_pc_8428:                                ; preds = %dec_label_pc_845c
  %v0_8428 = load i32, i32* @r8, align 4
  %v1_8428 = load i32, i32* @r4, align 4
  %v2_8428 = sub i32 %v0_8428, %v1_8428
  store i32 %v2_8428, i32* %r2.global-to-local, align 4
  %v9_8428 = icmp eq i32 %v0_8428, %v1_8428
  store i1 %v9_8428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8428, label %dec_label_pc_84bc, label %dec_label_pc_8430

dec_label_pc_8430:                                ; preds = %dec_label_pc_8428
  %v1_8430 = load i32, i32* @r7, align 4
  %v2_8430 = add i32 %v1_8430, %v1_8428
  %v3_8430 = inttoptr i32 %v2_8430 to i8*
  %v4_8430 = load i8, i8* %v3_8430, align 1
  store i32 %v2_8430, i32* %r0.global-to-local, align 4
  %v1_8438 = add i32 %v2_8428, -1
  store i32 %v1_8438, i32* %r2.global-to-local, align 4
  %v7_8438 = icmp eq i32 %v2_8428, 1
  store i1 %v7_8438, i1* %cpsr_z.global-to-local, align 1
  %v3_843c = add i32 %v2_8490, 4
  %v4_843c = inttoptr i32 %v3_843c to i8*
  store i8 %v4_8430, i8* %v4_843c, align 1
  %v0_8440 = load i32, i32* %r0.global-to-local, align 4
  %v1_8440 = add i32 %v0_8440, 1
  store i32 %v1_8440, i32* %r3.global-to-local, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v1_8448 = add i32 %v0_8440, 2
  store i32 %v1_8448, i32* @r7, align 4
  %v0_844c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_844c, label %dec_label_pc_84bc, label %dec_label_pc_8450

dec_label_pc_8450:                                ; preds = %dec_label_pc_8430
  %v2_8450 = inttoptr i32 %v1_8440 to i8*
  %v3_8450 = load i8, i8* %v2_8450, align 1
  %v4_8450 = zext i8 %v3_8450 to i32
  store i32 %v4_8450, i32* @r4, align 4
  %v2_8454 = sub i32 %v1_8444, %v4_8450
  %tmp36 = sub i32 0, %v2_8454
  %v6_8454 = and i32 %v1_8444, %tmp36
  %v7_8454 = icmp slt i32 %v6_8454, 0
  %v8_8454 = icmp slt i32 %v2_8454, 0
  %v9_8454 = icmp eq i32 %v1_8444, %v4_8450
  store i1 %v9_8454, i1* %cpsr_z.global-to-local, align 1
  %v2_8458 = xor i1 %v8_8454, %v7_8454
  br i1 %v2_8458, label %dec_label_pc_84bc, label %dec_label_pc_845c

dec_label_pc_845c:                                ; preds = %bb35, %dec_label_pc_8450
  %v0_8460 = phi i32 [ %v4_8400, %bb35 ], [ %v4_8450, %dec_label_pc_8450 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_8470, %dec_label_pc_8450 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_8460 = add nuw nsw i32 %v0_8460, 1
  store i32 %v1_8460, i32* %r0.global-to-local, align 4
  %v2_8464 = call i32 @function_11ea4(i32 %v1_8460, i32 1)
  store i32 %v2_8464, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_846c = load i32, i32* @sl, align 4
  %v2_846c = inttoptr i32 %v1_846c to i32*
  store i32 %v2_8464, i32* %v2_846c, align 4
  %v0_8470 = load i32, i32* %r3.global-to-local, align 4
  %v1_8470 = add i32 %v0_8470, 1
  store i32 %v1_8470, i32* %r3.global-to-local, align 4
  %v0_8474 = load i32, i32* @r4, align 4
  store i32 %v0_8474, i32* %r2.global-to-local, align 4
  %v0_8478 = load i32, i32* @r7, align 4
  store i32 %v0_8478, i32* %r1.global-to-local, align 4
  %v3_8480 = call i32 @function_10114(i32 %v2_8464, i32 %v0_8478, i32 %v0_8474)
  store i32 %v3_8480, i32* %r0.global-to-local, align 4
  store i32 %v1_8470, i32* %r2.global-to-local, align 4
  %v3_8488 = mul i32 %v1_8470, 8
  store i32 %v3_8488, i32* %r3.global-to-local, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v1_8470, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  %v0_8490 = load i32, i32* @r6, align 4
  %v2_8490 = add i32 %v0_8490, %v3_8488
  store i32 %v2_8490, i32* @sl, align 4
  br i1 %v9_848c, label %dec_label_pc_8498, label %dec_label_pc_8428

dec_label_pc_8498:                                ; preds = %dec_label_pc_845c, %bb
  %v0_8498 = call i32 @function_10f8c()
  %v2_84a0 = inttoptr i32 %v0_8498 to i32*
  store i32 0, i32* %v2_84a0, align 4
  store i32 %v4_8330, i32* %r1.global-to-local, align 4
  %v0_84a8 = load i32, i32* @fp, align 4
  store i32 %v0_84a8, i32* %r0.global-to-local, align 4
  %v0_84ac = load i32, i32* @sb, align 4
  store i32 %v0_84ac, i32* %r2.global-to-local, align 4
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84b4 = load i32, i32* @r5, align 4
  %v5_84b4 = load i32, i32* @r6, align 4
  %v6_84b8 = trunc i32 %v2_84b4 to i8
  %v7_84b8 = call i32 @function_81ec(i32 %v0_84a8, i32 %v4_8330, i32 %v0_84ac, i32 %v2_836c, i8 %v6_84b8, i32 %v5_84b4)
  store i32 %v7_84b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8450, %dec_label_pc_8430, %dec_label_pc_8428, %dec_label_pc_8400, %dec_label_pc_83ec, %dec_label_pc_83d4, %dec_label_pc_83b8, %dec_label_pc_8498
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84c0 = icmp eq i32 %v2_836c, 0
  store i1 %v2_84c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c0, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84bc
  store i32 %v2_836c, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84bc, %bb37
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c0, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_125f0.21 to i32))
  %v0_84cc = load i32, i32* @r6, align 4
  %v2_84cc = icmp eq i32 %v0_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84cc, label %.dec_label_pc_8300_crit_edge, label %dec_label_pc_84d4

.dec_label_pc_8300_crit_edge:                     ; preds = %bb38
  %v1_8308.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

dec_label_pc_84d4:                                ; preds = %bb38
  %v0_84d4 = load i32, i32* @r5, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %dec_label_pc_84f8, label %dec_label_pc_84dc

dec_label_pc_84dc:                                ; preds = %dec_label_pc_84d4
  br label %dec_label_pc_84e0

dec_label_pc_84e0:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84dc
  %v0_84e8 = phi i32 [ 0, %dec_label_pc_84dc ], [ %v1_84f0, %dec_label_pc_84e0 ]
  %v0_84e0 = phi i32 [ %v0_84cc, %dec_label_pc_84dc ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  %v4_84e0 = mul i32 %v0_84e8, 8
  %v5_84e0 = add i32 %v4_84e0, %v0_84e0
  %v6_84e0 = inttoptr i32 %v5_84e0 to i32*
  %v7_84e0 = load i32, i32* %v6_84e0, align 4
  store i32 %v7_84e0, i32* %r0.global-to-local, align 4
  %v2_84e4 = icmp eq i32 %v7_84e0, 0
  store i1 %v2_84e4, i1* %cpsr_z.global-to-local, align 1
  %v1_84e8 = add i32 %v0_84e8, 1
  store i32 %v1_84e8, i32* @r4, align 4
  store i32 34032, i32* @lr, align 4
  %v1_84ec = xor i1 %v2_84e4, true
  call void @__pseudo_cond_branch(i1 %v1_84ec, i32 ptrtoint (i32* @global_var_125f0.21 to i32))
  %v0_84f0 = load i32, i32* @r5, align 4
  %v1_84f0 = load i32, i32* @r4, align 4
  %v9_84f0 = icmp eq i32 %v0_84f0, %v1_84f0
  store i1 %v9_84f0, i1* %cpsr_z.global-to-local, align 1
  %v0_84f8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f0, label %dec_label_pc_84f8, label %dec_label_pc_84e0

dec_label_pc_84f8:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84d4
  %v0_84f8 = phi i32 [ %v0_84cc, %dec_label_pc_84d4 ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  store i32 %v0_84f8, i32* @r0, align 4
  %v0_84fc = call i32 @function_125f0()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

; uselistorder directives
  uselistorder i32 %v0_84fc, { 1, 0 }
  uselistorder i32 %v1_84f0, { 1, 0 }
  uselistorder i1 %v2_84c0, { 0, 2, 1 }
  uselistorder i32 %v2_8490, { 1, 0 }
  uselistorder i32 %v3_8488, { 1, 0 }
  uselistorder i32 %v1_8470, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8454, { 1, 0 }
  uselistorder i32 %v4_8450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8444, { 2, 0, 1, 3 }
  uselistorder i32 %v3_83c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83b0, { 1, 0 }
  uselistorder i32 %v1_83ac, { 1, 0 }
  uselistorder i32 %v2_836c, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8310, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_830c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_82f8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 20, 3, 21, 5, 8, 10, 9, 6, 7, 16, 17, 11, 12, 13, 14, 15, 18, 19, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84bc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_845c, { 1, 0 }
  uselistorder label %dec_label_pc_8300, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8504(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8504:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8504 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8504, label %dec_label_pc_854c, label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8504
  %v0_8514 = load i32, i32* %r1.global-to-local, align 4
  %v1_8514 = add i32 %v0_8514, 4
  %v2_8514 = inttoptr i32 %v1_8514 to i8*
  %v3_8514 = load i8, i8* %v2_8514, align 1
  %v4_8514 = zext i8 %v3_8514 to i32
  %v9_8518 = icmp eq i32 %v4_8514, %arg3
  br i1 %v9_8518, label %dec_label_pc_8558, label %dec_label_pc_853c.preheader

dec_label_pc_853c.preheader:                      ; preds = %dec_label_pc_8514
  br label %dec_label_pc_853c

dec_label_pc_852c:                                ; preds = %dec_label_pc_853c
  %v1_852c = add i32 %v0_8534.in, 12
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  %v9_8530 = icmp eq i32 %v4_852c, %arg3
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_853c

dec_label_pc_853c:                                ; preds = %dec_label_pc_853c.preheader, %dec_label_pc_852c
  %v0_8534.in = phi i32 [ %v0_8514, %dec_label_pc_853c.preheader ], [ %v0_8534, %dec_label_pc_852c ]
  %v0_853c = phi i32 [ 0, %dec_label_pc_853c.preheader ], [ %v1_853c, %dec_label_pc_852c ]
  %v0_8534 = add i32 %v0_8534.in, 8
  %v1_853c = add i32 %v0_853c, 1
  %v9_8540 = icmp eq i32 %v1_853c, %arg1
  store i32 %v0_8534, i32* %r1.global-to-local, align 4
  br i1 %v9_8540, label %dec_label_pc_854c, label %dec_label_pc_852c

dec_label_pc_854c:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8558, %dec_label_pc_8504, %dec_label_pc_8564
  %v0_854c = phi i32 [ %arg4, %dec_label_pc_8558 ], [ %arg4, %dec_label_pc_8504 ], [ %v1_8564, %dec_label_pc_8564 ], [ %arg4, %dec_label_pc_853c ]
  ret i32 %v0_854c

dec_label_pc_8558:                                ; preds = %dec_label_pc_852c, %dec_label_pc_8514
  %v0_8558 = phi i32 [ %v0_8514, %dec_label_pc_8514 ], [ %v0_8534, %dec_label_pc_852c ]
  %v1_8558 = inttoptr i32 %v0_8558 to i32*
  %v2_8558 = load i32, i32* %v1_8558, align 4
  store i32 %v2_8558, i32* @r0, align 4
  %v2_855c = icmp eq i32 %v2_8558, 0
  br i1 %v2_855c, label %dec_label_pc_854c, label %dec_label_pc_8564

dec_label_pc_8564:                                ; preds = %dec_label_pc_8558
  %v1_8564 = call i32 @function_110c4(i32 %v2_8558)
  br label %dec_label_pc_854c

; uselistorder directives
  uselistorder i32 %v1_853c, { 1, 0 }
  uselistorder i32 %v0_8534, { 1, 0, 2 }
  uselistorder i32 %v0_8534.in, { 1, 0 }
  uselistorder i32 %v0_8514, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_854c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_853c, { 1, 0 }
}

define i32 @function_8570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8570:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8570 = icmp eq i32 %arg1, 0
  %v3_8574 = load i32, i32* @r4, align 4
  store i32 %v3_8574, i32* %stack_var_-8, align 4
  %v6_8574 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8570, label %dec_label_pc_85b8, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8570
  %v0_8580 = load i32, i32* %r1.global-to-local, align 4
  %v1_8580 = add i32 %v0_8580, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v4_8580 = zext i8 %v3_8580 to i32
  %v9_8584 = icmp eq i32 %v4_8580, %arg3
  br i1 %v9_8584, label %dec_label_pc_85c4, label %dec_label_pc_85a8.preheader

dec_label_pc_85a8.preheader:                      ; preds = %dec_label_pc_8580
  br label %dec_label_pc_85a8

dec_label_pc_8598:                                ; preds = %dec_label_pc_85a8
  %v1_8598 = add i32 %v0_85a0.in, 12
  %v2_8598 = inttoptr i32 %v1_8598 to i8*
  %v3_8598 = load i8, i8* %v2_8598, align 1
  %v4_8598 = zext i8 %v3_8598 to i32
  %v9_859c = icmp eq i32 %v4_8598, %arg3
  br i1 %v9_859c, label %dec_label_pc_85c4, label %dec_label_pc_85a8

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85a8.preheader, %dec_label_pc_8598
  %v0_85a0.in = phi i32 [ %v0_8580, %dec_label_pc_85a8.preheader ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v0_85a8 = phi i32 [ 0, %dec_label_pc_85a8.preheader ], [ %v1_85a8, %dec_label_pc_8598 ]
  %v0_85a0 = add i32 %v0_85a0.in, 8
  %v1_85a8 = add i32 %v0_85a8, 1
  store i32 %v1_85a8, i32* @lr, align 4
  %v9_85ac = icmp eq i32 %v1_85a8, %arg1
  store i32 %v0_85a0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ac, label %dec_label_pc_85b8, label %dec_label_pc_8598

dec_label_pc_85b8:                                ; preds = %dec_label_pc_85a8, %dec_label_pc_85c4, %dec_label_pc_8570, %dec_label_pc_85d0
  %v2_85bc = phi i32 [ %v3_8574, %dec_label_pc_85c4 ], [ %v3_8574, %dec_label_pc_8570 ], [ %v2_85bc.pre, %dec_label_pc_85d0 ], [ %v3_8574, %dec_label_pc_85a8 ]
  %v0_85b8 = phi i32 [ %arg4, %dec_label_pc_85c4 ], [ %arg4, %dec_label_pc_8570 ], [ %v3_85d4, %dec_label_pc_85d0 ], [ %arg4, %dec_label_pc_85a8 ]
  store i32 %v2_85bc, i32* @r4, align 4
  store i32 %v6_8574, i32* @lr, align 4
  ret i32 %v0_85b8

dec_label_pc_85c4:                                ; preds = %dec_label_pc_8598, %dec_label_pc_8580
  %v0_85c4 = phi i32 [ %v0_8580, %dec_label_pc_8580 ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v1_85c4 = inttoptr i32 %v0_85c4 to i32*
  %v2_85c4 = load i32, i32* %v1_85c4, align 4
  %v2_85c8 = icmp eq i32 %v2_85c4, 0
  br i1 %v2_85c8, label %dec_label_pc_85b8, label %dec_label_pc_85d0

dec_label_pc_85d0:                                ; preds = %dec_label_pc_85c4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_85d4 = inttoptr i32 %v2_85c4 to i8*
  %v3_85d4 = call i32 @function_101c8(i8* %v2_85d4, i32 10)
  %v2_85bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85b8

; uselistorder directives
  uselistorder i32 %v1_85a8, { 1, 2, 0 }
  uselistorder i32 %v0_85a0, { 1, 0, 2 }
  uselistorder i32 %v0_85a0.in, { 1, 0 }
  uselistorder i32 %v0_8580, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85a8, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e0 = load i32, i32* @r4, align 4
  store i32 %v3_85e0, i32* %stack_var_-24, align 4
  %v6_85e0 = load i32, i32* @r5, align 4
  %v9_85e0 = load i32, i32* @r6, align 4
  %v12_85e0 = load i32, i32* @r7, align 4
  %v15_85e0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85ec = call i32 @function_11ea4(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e6f4.17 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e6f8.19 to i32), i32* @r6, align 4
  store i32 36524, i32* %r2.global-to-local, align 4
  store i32 %v2_85ec, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), i32* %r1.global-to-local, align 4
  %v2_860c = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8610 = inttoptr i32 %v2_85ec to i32*
  store i32 36524, i32* %v2_8610, align 4
  %v3_8614 = load i32, i32* @r5, align 4
  %v4_8614 = add i32 %v3_8614, 4
  %v5_8614 = inttoptr i32 %v4_8614 to i8*
  store i8 0, i8* %v5_8614, align 1
  %v0_8618 = load i32, i32* %r1.global-to-local, align 4
  %v3_8618 = mul i32 %v0_8618, 4
  store i32 %v3_8618, i32* %r1.global-to-local, align 4
  %v5_861c = inttoptr i32 %v2_860c to i32*
  %v6_861c = call i32 @function_11fd8(i32* %v5_861c, i32 %v3_8618, i32 36524, i32 0)
  %v2_8620 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8620 = zext i8 %v2_8620 to i32
  store i32 %v6_861c, i32* %r2.global-to-local, align 4
  %v0_8628 = load i32, i32* @r5, align 4
  %v5_8628 = mul nuw nsw i32 %v3_8620, 4
  %v6_8628 = add i32 %v5_8628, %v6_861c
  %v7_8628 = inttoptr i32 %v6_8628 to i32*
  store i32 %v0_8628, i32* %v7_8628, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), i32* %r3.global-to-local, align 4
  %v1_8638 = load i32, i32* @r6, align 4
  %v2_8638 = inttoptr i32 %v1_8638 to i32*
  store i32 %v6_861c, i32* %v2_8638, align 4
  %v0_863c = load i32, i32* %r3.global-to-local, align 4
  %v1_863c = trunc i32 %v0_863c to i8
  %v2_863c = load i32, i32* @r4, align 4
  %v3_863c = inttoptr i32 %v2_863c to i8*
  store i8 %v1_863c, i8* %v3_863c, align 1
  %v2_8640 = call i32 @function_11ea4(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a048.27 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8640, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), i32* %r1.global-to-local, align 4
  %v2_8658 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_865c = inttoptr i32 %v2_8640 to i32*
  store i32 ptrtoint (i32* @global_var_a048.27 to i32), i32* %v2_865c, align 4
  %v0_8660 = load i32, i32* @r8, align 4
  %v1_8660 = trunc i32 %v0_8660 to i8
  %v2_8660 = load i32, i32* @r5, align 4
  %v3_8660 = add i32 %v2_8660, 4
  %v4_8660 = inttoptr i32 %v3_8660 to i8*
  store i8 %v1_8660, i8* %v4_8660, align 1
  %v0_8664 = load i32, i32* %r1.global-to-local, align 4
  %v3_8664 = mul i32 %v0_8664, 4
  store i32 %v3_8664, i32* %r1.global-to-local, align 4
  %v4_8668 = inttoptr i32 %v2_8658 to i32*
  %v5_8668 = call i32 @function_11fd8(i32* %v4_8668, i32 %v3_8664, i32 %v6_861c, i32 ptrtoint (i32* @global_var_a048.27 to i32))
  %v2_866c = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_866c = zext i8 %v2_866c to i32
  store i32 %v3_866c, i32* %r3.global-to-local, align 4
  store i32 %v5_8668, i32* %r2.global-to-local, align 4
  %v0_8674 = load i32, i32* @r5, align 4
  %v5_8674 = mul nuw nsw i32 %v3_866c, 4
  %v6_8674 = add i32 %v5_8674, %v5_8668
  %v7_8674 = inttoptr i32 %v6_8674 to i32*
  store i32 %v0_8674, i32* %v7_8674, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = load i32, i32* @r8, align 4
  %v2_867c = add i32 %v1_867c, %v0_867c
  store i32 %v2_867c, i32* %r3.global-to-local, align 4
  %v1_8684 = trunc i32 %v2_867c to i8
  %v2_8684 = load i32, i32* @r4, align 4
  %v3_8684 = inttoptr i32 %v2_8684 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v0_8688 = load i32, i32* %r2.global-to-local, align 4
  %v1_8688 = load i32, i32* @r6, align 4
  %v2_8688 = inttoptr i32 %v1_8688 to i32*
  store i32 %v0_8688, i32* %v2_8688, align 4
  %v2_868c = call i32 @function_11ea4(i32 %v1_867c, i32 8)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 ptrtoint (i32* @global_var_a480.29 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_868c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r8, align 4
  %v2_86a0 = add i32 %v1_86a0, %v3_8690
  store i32 %v2_86a0, i32* %r1.global-to-local, align 4
  %v2_86a4 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_86a8 = inttoptr i32 %v2_868c to i32*
  store i32 ptrtoint (i32* @global_var_a480.29 to i32), i32* %v2_86a8, align 4
  %v3_86ac = load i32, i32* @r5, align 4
  %v4_86ac = add i32 %v3_86ac, 4
  %v5_86ac = inttoptr i32 %v4_86ac to i8*
  store i8 2, i8* %v5_86ac, align 1
  %v0_86b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86b0 = mul i32 %v0_86b0, 4
  store i32 %v3_86b0, i32* %r1.global-to-local, align 4
  %v5_86b4 = inttoptr i32 %v2_86a4 to i32*
  %v6_86b4 = call i32 @function_11fd8(i32* %v5_86b4, i32 %v3_86b0, i32 ptrtoint (i32* @global_var_a480.29 to i32), i32 2)
  %v2_86b8 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_86b8 = zext i8 %v2_86b8 to i32
  store i32 %v3_86b8, i32* %r3.global-to-local, align 4
  store i32 %v6_86b4, i32* %r2.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r5, align 4
  %v5_86c0 = mul nuw nsw i32 %v3_86b8, 4
  %v6_86c0 = add i32 %v5_86c0, %v6_86b4
  %v7_86c0 = inttoptr i32 %v6_86c0 to i32*
  store i32 %v0_86c0, i32* %v7_86c0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v0_86c8
  store i32 %v2_86c8, i32* %r3.global-to-local, align 4
  %v1_86d0 = load i32, i32* @r6, align 4
  %v2_86d0 = inttoptr i32 %v1_86d0 to i32*
  store i32 %v6_86b4, i32* %v2_86d0, align 4
  %v0_86d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_86d4 = trunc i32 %v0_86d4 to i8
  %v2_86d4 = load i32, i32* @r4, align 4
  %v3_86d4 = inttoptr i32 %v2_86d4 to i8*
  store i8 %v1_86d4, i8* %v3_86d4, align 1
  %v2_86d8 = call i32 @function_11ea4(i32 %v1_86c8, i32 8)
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 ptrtoint (i32* @global_var_896c.31 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86d8, i32* @r5, align 4
  %v1_86ec = load i32, i32* @r8, align 4
  %v2_86ec = add i32 %v1_86ec, %v3_86dc
  store i32 %v2_86ec, i32* %r1.global-to-local, align 4
  %v2_86f0 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_86f4 = inttoptr i32 %v2_86d8 to i32*
  store i32 ptrtoint (i32* @global_var_896c.31 to i32), i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* @r7, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r5, align 4
  %v3_86f8 = add i32 %v2_86f8, 4
  %v4_86f8 = inttoptr i32 %v3_86f8 to i8*
  store i8 %v1_86f8, i8* %v4_86f8, align 1
  %v0_86fc = load i32, i32* %r1.global-to-local, align 4
  %v3_86fc = mul i32 %v0_86fc, 4
  store i32 %v3_86fc, i32* %r1.global-to-local, align 4
  %v4_8700 = inttoptr i32 %v2_86f0 to i32*
  %v5_8700 = call i32 @function_11fd8(i32* %v4_8700, i32 %v3_86fc, i32 %v6_86b4, i32 ptrtoint (i32* @global_var_896c.31 to i32))
  %v2_8704 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8704 = zext i8 %v2_8704 to i32
  store i32 %v3_8704, i32* %r3.global-to-local, align 4
  store i32 %v5_8700, i32* %r2.global-to-local, align 4
  %v0_870c = load i32, i32* @r5, align 4
  %v5_870c = mul nuw nsw i32 %v3_8704, 4
  %v6_870c = add i32 %v5_870c, %v5_8700
  %v7_870c = inttoptr i32 %v6_870c to i32*
  store i32 %v0_870c, i32* %v7_870c, align 4
  %v0_8710 = load i32, i32* @r7, align 4
  store i32 %v0_8710, i32* %r1.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = load i32, i32* @r8, align 4
  %v2_8714 = add i32 %v1_8714, %v0_8714
  store i32 %v2_8714, i32* %r3.global-to-local, align 4
  %v1_871c = trunc i32 %v2_8714 to i8
  %v2_871c = load i32, i32* @r4, align 4
  %v3_871c = inttoptr i32 %v2_871c to i8*
  store i8 %v1_871c, i8* %v3_871c, align 1
  %v0_8720 = load i32, i32* %r2.global-to-local, align 4
  %v1_8720 = load i32, i32* @r6, align 4
  %v2_8720 = inttoptr i32 %v1_8720 to i32*
  store i32 %v0_8720, i32* %v2_8720, align 4
  %v2_8724 = call i32 @function_11ea4(i32 %v1_8714, i32 %v0_8710)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8724, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8738 = load i32, i32* @r8, align 4
  %v2_8738 = add i32 %v1_8738, %v3_8728
  store i32 %v2_8738, i32* %r1.global-to-local, align 4
  %v2_873c = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8740 = inttoptr i32 %v2_8724 to i32*
  store i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32* %v2_8740, align 4
  %v3_8744 = load i32, i32* @r5, align 4
  %v4_8744 = add i32 %v3_8744, 4
  %v5_8744 = inttoptr i32 %v4_8744 to i8*
  store i8 3, i8* %v5_8744, align 1
  %v0_8748 = load i32, i32* %r1.global-to-local, align 4
  %v3_8748 = mul i32 %v0_8748, 4
  store i32 %v3_8748, i32* %r1.global-to-local, align 4
  %v5_874c = inttoptr i32 %v2_873c to i32*
  %v6_874c = call i32 @function_11fd8(i32* %v5_874c, i32 %v3_8748, i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32 3)
  %v2_8750 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8750 = zext i8 %v2_8750 to i32
  store i32 %v3_8750, i32* %r3.global-to-local, align 4
  store i32 %v6_874c, i32* %r2.global-to-local, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  %v5_8758 = mul nuw nsw i32 %v3_8750, 4
  %v6_8758 = add i32 %v5_8758, %v6_874c
  %v7_8758 = inttoptr i32 %v6_8758 to i32*
  store i32 %v0_8758, i32* %v7_8758, align 4
  %v0_875c = load i32, i32* @r7, align 4
  store i32 %v0_875c, i32* %r1.global-to-local, align 4
  %v0_8760 = load i32, i32* %r3.global-to-local, align 4
  %v1_8760 = load i32, i32* @r8, align 4
  %v2_8760 = add i32 %v1_8760, %v0_8760
  store i32 %v2_8760, i32* %r3.global-to-local, align 4
  %v1_8768 = trunc i32 %v2_8760 to i8
  %v2_8768 = load i32, i32* @r4, align 4
  %v3_8768 = inttoptr i32 %v2_8768 to i8*
  store i8 %v1_8768, i8* %v3_8768, align 1
  %v0_876c = load i32, i32* %r2.global-to-local, align 4
  %v1_876c = load i32, i32* @r6, align 4
  %v2_876c = inttoptr i32 %v1_876c to i32*
  store i32 %v0_876c, i32* %v2_876c, align 4
  %v2_8770 = call i32 @function_11ea4(i32 %v1_8760, i32 %v0_875c)
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8770, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8784 = load i32, i32* @r8, align 4
  %v2_8784 = add i32 %v1_8784, %v3_8774
  store i32 %v2_8784, i32* %r1.global-to-local, align 4
  %v2_8788 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_878c = inttoptr i32 %v2_8770 to i32*
  store i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32* %v2_878c, align 4
  %v3_8790 = load i32, i32* @r5, align 4
  %v4_8790 = add i32 %v3_8790, 4
  %v5_8790 = inttoptr i32 %v4_8790 to i8*
  store i8 4, i8* %v5_8790, align 1
  %v0_8794 = load i32, i32* %r1.global-to-local, align 4
  %v3_8794 = mul i32 %v0_8794, 4
  store i32 %v3_8794, i32* %r1.global-to-local, align 4
  %v5_8798 = inttoptr i32 %v2_8788 to i32*
  %v6_8798 = call i32 @function_11fd8(i32* %v5_8798, i32 %v3_8794, i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32 4)
  %v2_879c = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_879c = zext i8 %v2_879c to i32
  store i32 %v3_879c, i32* %r3.global-to-local, align 4
  store i32 %v6_8798, i32* %r2.global-to-local, align 4
  %v0_87a4 = load i32, i32* @r5, align 4
  %v5_87a4 = mul nuw nsw i32 %v3_879c, 4
  %v6_87a4 = add i32 %v5_87a4, %v6_8798
  %v7_87a4 = inttoptr i32 %v6_87a4 to i32*
  store i32 %v0_87a4, i32* %v7_87a4, align 4
  %v0_87a8 = load i32, i32* @r7, align 4
  store i32 %v0_87a8, i32* %r1.global-to-local, align 4
  %v0_87ac = load i32, i32* %r3.global-to-local, align 4
  %v1_87ac = load i32, i32* @r8, align 4
  %v2_87ac = add i32 %v1_87ac, %v0_87ac
  store i32 %v2_87ac, i32* %r3.global-to-local, align 4
  %v1_87b4 = trunc i32 %v2_87ac to i8
  %v2_87b4 = load i32, i32* @r4, align 4
  %v3_87b4 = inttoptr i32 %v2_87b4 to i8*
  store i8 %v1_87b4, i8* %v3_87b4, align 1
  %v0_87b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87b8 = load i32, i32* @r6, align 4
  %v2_87b8 = inttoptr i32 %v1_87b8 to i32*
  store i32 %v0_87b8, i32* %v2_87b8, align 4
  %v2_87bc = call i32 @function_11ea4(i32 %v1_87ac, i32 %v0_87a8)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87bc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r8, align 4
  %v2_87d0 = add i32 %v1_87d0, %v3_87c0
  store i32 %v2_87d0, i32* %r1.global-to-local, align 4
  %v2_87d4 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_87d8 = inttoptr i32 %v2_87bc to i32*
  store i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32* %v2_87d8, align 4
  %v3_87dc = load i32, i32* @r5, align 4
  %v4_87dc = add i32 %v3_87dc, 4
  %v5_87dc = inttoptr i32 %v4_87dc to i8*
  store i8 5, i8* %v5_87dc, align 1
  %v0_87e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_87e0 = mul i32 %v0_87e0, 4
  store i32 %v3_87e0, i32* %r1.global-to-local, align 4
  %v5_87e4 = inttoptr i32 %v2_87d4 to i32*
  %v6_87e4 = call i32 @function_11fd8(i32* %v5_87e4, i32 %v3_87e0, i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32 5)
  %v2_87e8 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_87e8 = zext i8 %v2_87e8 to i32
  store i32 %v3_87e8, i32* %r3.global-to-local, align 4
  store i32 %v6_87e4, i32* %r2.global-to-local, align 4
  %v0_87f0 = load i32, i32* @r5, align 4
  %v5_87f0 = mul nuw nsw i32 %v3_87e8, 4
  %v6_87f0 = add i32 %v5_87f0, %v6_87e4
  %v7_87f0 = inttoptr i32 %v6_87f0 to i32*
  store i32 %v0_87f0, i32* %v7_87f0, align 4
  %v0_87f4 = load i32, i32* @r7, align 4
  store i32 %v0_87f4, i32* %r1.global-to-local, align 4
  %v0_87f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r8, align 4
  %v2_87f8 = add i32 %v1_87f8, %v0_87f8
  store i32 %v2_87f8, i32* %r3.global-to-local, align 4
  %v1_8800 = trunc i32 %v2_87f8 to i8
  %v2_8800 = load i32, i32* @r4, align 4
  %v3_8800 = inttoptr i32 %v2_8800 to i8*
  store i8 %v1_8800, i8* %v3_8800, align 1
  %v0_8804 = load i32, i32* %r2.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v0_8804, i32* %v2_8804, align 4
  %v2_8808 = call i32 @function_11ea4(i32 %v1_87f8, i32 %v0_87f4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 43836, i32* %r2.global-to-local, align 4
  store i32 %v2_8808, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_881c = load i32, i32* @r8, align 4
  %v2_881c = add i32 %v1_881c, %v3_880c
  store i32 %v2_881c, i32* %r1.global-to-local, align 4
  %v2_8820 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8824 = inttoptr i32 %v2_8808 to i32*
  store i32 43836, i32* %v2_8824, align 4
  %v3_8828 = load i32, i32* @r5, align 4
  %v4_8828 = add i32 %v3_8828, 4
  %v5_8828 = inttoptr i32 %v4_8828 to i8*
  store i8 10, i8* %v5_8828, align 1
  %v0_882c = load i32, i32* %r1.global-to-local, align 4
  %v3_882c = mul i32 %v0_882c, 4
  store i32 %v3_882c, i32* %r1.global-to-local, align 4
  %v5_8830 = inttoptr i32 %v2_8820 to i32*
  %v6_8830 = call i32 @function_11fd8(i32* %v5_8830, i32 %v3_882c, i32 43836, i32 10)
  %v2_8834 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8834 = zext i8 %v2_8834 to i32
  store i32 %v3_8834, i32* %r3.global-to-local, align 4
  store i32 %v6_8830, i32* %r2.global-to-local, align 4
  %v0_883c = load i32, i32* @r5, align 4
  %v5_883c = mul nuw nsw i32 %v3_8834, 4
  %v6_883c = add i32 %v5_883c, %v6_8830
  %v7_883c = inttoptr i32 %v6_883c to i32*
  store i32 %v0_883c, i32* %v7_883c, align 4
  %v0_8840 = load i32, i32* @r7, align 4
  store i32 %v0_8840, i32* %r1.global-to-local, align 4
  %v0_8844 = load i32, i32* %r3.global-to-local, align 4
  %v1_8844 = load i32, i32* @r8, align 4
  %v2_8844 = add i32 %v1_8844, %v0_8844
  store i32 %v2_8844, i32* %r3.global-to-local, align 4
  %v1_884c = trunc i32 %v2_8844 to i8
  %v2_884c = load i32, i32* @r4, align 4
  %v3_884c = inttoptr i32 %v2_884c to i8*
  store i8 %v1_884c, i8* %v3_884c, align 1
  %v0_8850 = load i32, i32* %r2.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v0_8850, i32* %v2_8850, align 4
  %v2_8854 = call i32 @function_11ea4(i32 %v1_8844, i32 %v0_8840)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8854, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_8868 = load i32, i32* @r8, align 4
  %v2_8868 = add i32 %v1_8868, %v3_8858
  store i32 %v2_8868, i32* %r1.global-to-local, align 4
  %v2_886c = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8870 = inttoptr i32 %v2_8854 to i32*
  store i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32* %v2_8870, align 4
  %v3_8874 = load i32, i32* @r5, align 4
  %v4_8874 = add i32 %v3_8874, 4
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 6, i8* %v5_8874, align 1
  %v0_8878 = load i32, i32* %r1.global-to-local, align 4
  %v3_8878 = mul i32 %v0_8878, 4
  store i32 %v3_8878, i32* %r1.global-to-local, align 4
  %v5_887c = inttoptr i32 %v2_886c to i32*
  %v6_887c = call i32 @function_11fd8(i32* %v5_887c, i32 %v3_8878, i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32 6)
  %v2_8880 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8880 = zext i8 %v2_8880 to i32
  store i32 %v3_8880, i32* %r3.global-to-local, align 4
  store i32 %v6_887c, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @r5, align 4
  %v5_8888 = mul nuw nsw i32 %v3_8880, 4
  %v6_8888 = add i32 %v5_8888, %v6_887c
  %v7_8888 = inttoptr i32 %v6_8888 to i32*
  store i32 %v0_8888, i32* %v7_8888, align 4
  %v0_888c = load i32, i32* @r7, align 4
  store i32 %v0_888c, i32* %r1.global-to-local, align 4
  %v0_8890 = load i32, i32* %r3.global-to-local, align 4
  %v1_8890 = load i32, i32* @r8, align 4
  %v2_8890 = add i32 %v1_8890, %v0_8890
  store i32 %v2_8890, i32* %r3.global-to-local, align 4
  %v1_8898 = trunc i32 %v2_8890 to i8
  %v2_8898 = load i32, i32* @r4, align 4
  %v3_8898 = inttoptr i32 %v2_8898 to i8*
  store i8 %v1_8898, i8* %v3_8898, align 1
  %v0_889c = load i32, i32* %r2.global-to-local, align 4
  %v1_889c = load i32, i32* @r6, align 4
  %v2_889c = inttoptr i32 %v1_889c to i32*
  store i32 %v0_889c, i32* %v2_889c, align 4
  %v2_88a0 = call i32 @function_11ea4(i32 %v1_8890, i32 %v0_888c)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 ptrtoint (i32* @global_var_9398.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88b4 = load i32, i32* @r8, align 4
  %v2_88b4 = add i32 %v1_88b4, %v3_88a4
  store i32 %v2_88b4, i32* %r1.global-to-local, align 4
  %v2_88b8 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_88bc = inttoptr i32 %v2_88a0 to i32*
  store i32 ptrtoint (i32* @global_var_9398.42 to i32), i32* %v2_88bc, align 4
  %v3_88c0 = load i32, i32* @r5, align 4
  %v4_88c0 = add i32 %v3_88c0, 4
  %v5_88c0 = inttoptr i32 %v4_88c0 to i8*
  store i8 7, i8* %v5_88c0, align 1
  %v0_88c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_88c4 = mul i32 %v0_88c4, 4
  store i32 %v3_88c4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %v2_88b8 to i32*
  %v6_88c8 = call i32 @function_11fd8(i32* %v5_88c8, i32 %v3_88c4, i32 ptrtoint (i32* @global_var_9398.42 to i32), i32 7)
  %v2_88cc = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_88cc = zext i8 %v2_88cc to i32
  store i32 %v3_88cc, i32* %r3.global-to-local, align 4
  store i32 %v6_88c8, i32* %r2.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  %v5_88d4 = mul nuw nsw i32 %v3_88cc, 4
  %v6_88d4 = add i32 %v5_88d4, %v6_88c8
  %v7_88d4 = inttoptr i32 %v6_88d4 to i32*
  store i32 %v0_88d4, i32* %v7_88d4, align 4
  %v0_88d8 = load i32, i32* @r7, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  %v0_88dc = load i32, i32* %r3.global-to-local, align 4
  %v1_88dc = load i32, i32* @r8, align 4
  %v2_88dc = add i32 %v1_88dc, %v0_88dc
  store i32 %v2_88dc, i32* %r3.global-to-local, align 4
  %v1_88e4 = trunc i32 %v2_88dc to i8
  %v2_88e4 = load i32, i32* @r4, align 4
  %v3_88e4 = inttoptr i32 %v2_88e4 to i8*
  store i8 %v1_88e4, i8* %v3_88e4, align 1
  %v0_88e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r6, align 4
  %v2_88e8 = inttoptr i32 %v1_88e8 to i32*
  store i32 %v0_88e8, i32* %v2_88e8, align 4
  %v2_88ec = call i32 @function_11ea4(i32 %v1_88dc, i32 %v0_88d8)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 35852, i32* %r2.global-to-local, align 4
  store i32 %v2_88ec, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8900 = load i32, i32* @r8, align 4
  %v2_8900 = add i32 %v1_8900, %v3_88f0
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v2_8904 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8908 = inttoptr i32 %v2_88ec to i32*
  store i32 35852, i32* %v2_8908, align 4
  %v3_890c = load i32, i32* @r5, align 4
  %v4_890c = add i32 %v3_890c, 4
  %v5_890c = inttoptr i32 %v4_890c to i8*
  store i8 9, i8* %v5_890c, align 1
  %v0_8910 = load i32, i32* %r1.global-to-local, align 4
  %v3_8910 = mul i32 %v0_8910, 4
  store i32 %v3_8910, i32* %r1.global-to-local, align 4
  %v5_8914 = inttoptr i32 %v2_8904 to i32*
  %v6_8914 = call i32 @function_11fd8(i32* %v5_8914, i32 %v3_8910, i32 35852, i32 9)
  %v2_8918 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8918 = zext i8 %v2_8918 to i32
  store i32 %v3_8918, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r6, align 4
  %v2_891c = inttoptr i32 %v1_891c to i32*
  store i32 %v6_8914, i32* %v2_891c, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v2_8920 = load i32, i32* %r3.global-to-local, align 4
  %v5_8920 = mul i32 %v2_8920, 4
  %v6_8920 = add i32 %v5_8920, %v6_8914
  %v7_8920 = inttoptr i32 %v6_8920 to i32*
  store i32 %v0_8920, i32* %v7_8920, align 4
  %v0_8924 = load i32, i32* %r3.global-to-local, align 4
  %v1_8924 = load i32, i32* @r8, align 4
  %v2_8924 = add i32 %v1_8924, %v0_8924
  store i32 %v2_8924, i32* %r2.global-to-local, align 4
  %v1_892c = trunc i32 %v2_8924 to i8
  %v2_892c = load i32, i32* @r4, align 4
  %v3_892c = inttoptr i32 %v2_892c to i8*
  store i8 %v1_892c, i8* %v3_892c, align 1
  %v2_8930 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8930, i32* @r4, align 4
  store i32 %v6_85e0, i32* @r5, align 4
  store i32 %v9_85e0, i32* @r6, align 4
  store i32 %v12_85e0, i32* @r7, align 4
  store i32 %v15_85e0, i32* @r8, align 4
  ret i32 %v1_8924

; uselistorder directives
  uselistorder i32 %v1_8924, { 1, 0 }
  uselistorder i32 %v3_8910, { 1, 0 }
  uselistorder i32 %v1_88dc, { 1, 0 }
  uselistorder i32 %v3_88c4, { 1, 0 }
  uselistorder i32 %v1_8890, { 1, 0 }
  uselistorder i32 %v3_8878, { 1, 0 }
  uselistorder i32 %v1_8844, { 1, 0 }
  uselistorder i32 %v3_882c, { 1, 0 }
  uselistorder i32 %v1_87f8, { 1, 0 }
  uselistorder i32 %v3_87e0, { 1, 0 }
  uselistorder i32 %v1_87ac, { 1, 0 }
  uselistorder i32 %v3_8794, { 1, 0 }
  uselistorder i32 %v1_8760, { 1, 0 }
  uselistorder i32 %v3_8748, { 1, 0 }
  uselistorder i32 %v1_8714, { 1, 0 }
  uselistorder i32 %v3_86fc, { 1, 0 }
  uselistorder i32 %v1_86c8, { 1, 0 }
  uselistorder i32 %v6_86b4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86b0, { 1, 0 }
  uselistorder i32 %v1_867c, { 1, 0 }
  uselistorder i32 %v3_8664, { 1, 0 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v6_861c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8618, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 16, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e6f4.17 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e6f8.19, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
}

define i32 @function_896c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_896c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v3_896c = load i32, i32* @r4, align 4
  %v18_896c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8988 = call i32 @function_11ea4(i32 %arg1, i32 4)
  store i32 %v2_8988, i32* @sl, align 4
  %v0_8994 = load i32, i32* @r7, align 4
  %v2_8998 = call i32 @function_11ea4(i32 %v0_8994, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89a4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8998, i32* @r8, align 4
  %v0_89b4 = load i32, i32* @r5, align 4
  %v4_89b8 = inttoptr i32 %v0_89a4 to i32*
  %v5_89b8 = call i32 @function_8570(i32 %v0_89b4, i32* %v4_89b8, i32 7, i32 65535)
  %v3_89c0 = urem i32 %v5_89b8, 65536
  %v0_89c4 = load i32, i32* @r6, align 4
  %v0_89cc = load i32, i32* @r4, align 4
  store i32 %v0_89cc, i32* %r3.global-to-local, align 4
  %v0_89d0 = load i32, i32* @r5, align 4
  %v5_89d8 = inttoptr i32 %v0_89c4 to i32*
  %v6_89d8 = call i32 @function_8570(i32 %v0_89d0, i32* %v5_89d8, i32 6, i32 %v0_89cc)
  %v0_89dc = load i32, i32* @r6, align 4
  %v3_89e0 = mul i32 %v6_89d8, 65536
  store i32 %v3_89e0, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_89ec = load i32, i32* @r5, align 4
  %v4_89f0 = inttoptr i32 %v0_89dc to i32*
  %v5_89f0 = call i32 @function_8570(i32 %v0_89ec, i32* %v4_89f0, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r6, align 4
  %v0_8a04 = load i32, i32* @r5, align 4
  %v3_8a08 = urem i32 %v5_89f0, 65536
  store i32 %v3_8a08, i32* @r5, align 4
  %v4_8a0c = inttoptr i32 %v0_8a00 to i32*
  %v5_8a0c = call i32 @function_8570(i32 %v0_8a04, i32* %v4_8a0c, i32 1, i32 1)
  %v0_8a10 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a10 = udiv i32 %v0_8a10, 65536
  store i32 %v3_8a10, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a18 = load i32, i32* @r4, align 4
  %v9_8a18 = icmp eq i32 %v3_8a10, %v1_8a18
  br i1 %v9_8a18, label %dec_label_pc_8a48, label %bb

bb:                                               ; preds = %dec_label_pc_896c
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8a30 = udiv i32 %v0_8a10, 16777216
  store i32 %v4_8a30, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8a58

dec_label_pc_8a48:                                ; preds = %dec_label_pc_896c
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8a48 = call i32 @function_deb8()
  br label %dec_label_pc_8a58

dec_label_pc_8a58:                                ; preds = %bb, %dec_label_pc_8a48
  %v0_8a3c12 = urem i32 %v5_8a0c, 256
  %v0_8a58 = load i32, i32* @r7, align 4
  %v2_8a58 = icmp eq i32 %v0_8a58, 0
  br i1 %v2_8a58, label %dec_label_pc_8b98, label %dec_label_pc_8a60

dec_label_pc_8a60:                                ; preds = %dec_label_pc_8a58
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b0c = udiv i32 %v3_89c0, 256
  %v1_8b08 = mul i32 %v5_89b8, 256
  %v4_8b10 = and i32 %v1_8b08, 65280
  %v5_8b10 = or i32 %v4_8b10, %v3_8b0c
  %v2_8a90 = ptrtoint i16* %stack_var_-56 to i32
  br label %dec_label_pc_8af0

dec_label_pc_8a70:                                ; preds = %bb53, %dec_label_pc_8b30
  %v3_8a7c = call i32 @function_1133c(i32 2, i32 2, i32 17)
  %v7_8a84 = icmp eq i32 %v3_8a7c, -1
  %v0_8a88 = load i32, i32* @sb, align 4
  %v1_8a88 = add i32 %v0_8a88, 1
  store i32 %v1_8a88, i32* @sb, align 4
  %v0_8a8c = load i32, i32* @fp, align 4
  %v1_8a8c = add i32 %v0_8a8c, 24
  store i32 %v1_8a8c, i32* @fp, align 4
  %v2_8a98 = load i32, i32* @r8, align 4
  %v3_8a98 = add i32 %v2_8a98, %stack_var_-60.0
  %v4_8a98 = inttoptr i32 %v3_8a98 to i32*
  store i32 %v3_8a7c, i32* %v4_8a98, align 4
  br i1 %v7_8a84, label %dec_label_pc_8b8c, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a70
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v7_8ab8 = call i32 @function_110ec(i32 %v3_8a7c, i32 %v2_8a90, i32 16, i32 2, i32 2)
  %v0_8abc = load i32, i32* @r6, align 4
  %v1_8abc = add i32 %v0_8abc, 20
  %v2_8abc = inttoptr i32 %v1_8abc to i8*
  %v3_8abc = load i8, i8* %v2_8abc, align 1
  %v4_8abc = zext i8 %v3_8abc to i32
  store i32 %v4_8abc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8abc, 32
  br i1 %tmp, label %dec_label_pc_8b44, label %dec_label_pc_8ac8

dec_label_pc_8ac8:                                ; preds = %dec_label_pc_8aa0, %dec_label_pc_8b44
  %v0_8acc = phi i32 [ %v0_8abc, %dec_label_pc_8aa0 ], [ %v0_8acc.pre, %dec_label_pc_8b44 ]
  %v1_8ad0 = load i32, i32* @r8, align 4
  %v2_8ad0 = add i32 %v1_8ad0, %stack_var_-60.0
  %v3_8ad0 = inttoptr i32 %v2_8ad0 to i32*
  %v4_8ad0 = load i32, i32* %v3_8ad0, align 4
  %v3_8ad8 = call i32 @function_11124(i32 %v4_8ad0, i32 %v0_8acc, i32 16)
  %v0_8ae0 = load i32, i32* @sb, align 4
  %v1_8ae0 = load i32, i32* @r7, align 4
  %v9_8ae0 = icmp eq i32 %v0_8ae0, %v1_8ae0
  %v1_8ae4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8ae4, i32* %r3.global-to-local, align 4
  br i1 %v9_8ae0, label %dec_label_pc_8b98, label %dec_label_pc_8af0

dec_label_pc_8af0:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a60
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8a60 ], [ %v1_8ae4, %dec_label_pc_8ac8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b00 = call i32 @function_11ea4(i32 65535, i32 1)
  store i32 %v5_8b10, i32* %r3.global-to-local, align 4
  %v1_8b1c = load i32, i32* @r4, align 4
  %v9_8b1c = icmp eq i32 %v3_89c0, %v1_8b1c
  %v1_8b20 = load i32, i32* @fp, align 4
  %v2_8b20 = add i32 %v1_8b20, %arg2
  store i32 %v2_8b20, i32* @r6, align 4
  %v2_8b24 = load i32, i32* @sl, align 4
  %v3_8b24 = add i32 %v2_8b24, %stack_var_-60.0
  %v4_8b24 = inttoptr i32 %v3_8b24 to i32*
  store i32 %v2_8b00, i32* %v4_8b24, align 4
  br i1 %v9_8b1c, label %dec_label_pc_8b30, label %bb53

bb53:                                             ; preds = %dec_label_pc_8af0
  %v1_8b28 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b28 = trunc i32 %v1_8b28 to i16
  %v3_8b28 = load i32, i32* @r6, align 4
  %v4_8b28 = add i32 %v3_8b28, 2
  %v5_8b28 = inttoptr i32 %v4_8b28 to i16*
  store i16 %v2_8b28, i16* %v5_8b28, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8af0
  %v0_8b30 = call i32 @function_deb8()
  %v1_8b30 = trunc i32 %v0_8b30 to i16
  %v0_8b38 = load i32, i32* @fp, align 4
  %v2_8b38 = add i32 %v0_8b38, %arg2
  store i32 %v2_8b38, i32* @r6, align 4
  %v4_8b3c = add i32 %v2_8b38, 2
  %v5_8b3c = inttoptr i32 %v4_8b3c to i16*
  store i16 %v1_8b30, i16* %v5_8b3c, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b44:                                ; preds = %dec_label_pc_8aa0
  %v1_8b44 = add i32 %v0_8abc, 16
  %v2_8b44 = inttoptr i32 %v1_8b44 to i32*
  %v3_8b44 = load i32, i32* %v2_8b44, align 4
  store i32 %v3_8b44, i32* %r4.global-to-local, align 4
  %v0_8b48 = call i32 @function_deb8()
  %v1_8b58 = and i32 %v3_8b44, 65280
  store i32 %v1_8b58, i32* %r3.global-to-local, align 4
  %v0_8b60 = load i32, i32* @r6, align 4
  %v1_8b60 = add i32 %v0_8b60, 20
  %v2_8b60 = inttoptr i32 %v1_8b60 to i8*
  %v3_8b60 = load i8, i8* %v2_8b60, align 1
  %v4_8b60 = zext i8 %v3_8b60 to i32
  %v5_8b64 = call i32 @llvm.bswap.i32(i32 %v3_8b44)
  %v7_8b68 = lshr i32 %v0_8b48, %v4_8b60
  %v8_8b68 = add i32 %v7_8b68, %v5_8b64
  %v5_8b80 = call i32 @llvm.bswap.i32(i32 %v8_8b68)
  store i32 %v5_8b80, i32* %r3.global-to-local, align 4
  %v2_8b84 = add i32 %v0_8b60, 4
  %v3_8b84 = inttoptr i32 %v2_8b84 to i32*
  store i32 %v5_8b80, i32* %v3_8b84, align 4
  %v0_8acc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8ac8

dec_label_pc_8b8c:                                ; preds = %dec_label_pc_8a70
  store i32 %v3_896c, i32* %r4.global-to-local, align 4
  store i32 %v18_896c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8a7c

dec_label_pc_8b98:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a58
  %v1_8bd824 = phi i32 [ 0, %dec_label_pc_8a58 ], [ %v0_8ae0, %dec_label_pc_8ac8 ]
  %v2_8b9c = icmp eq i32 %v0_8a3c12, 0
  br i1 %v2_8b9c, label %dec_label_pc_8bbc.outer, label %dec_label_pc_8bd4

dec_label_pc_8bac:                                ; preds = %dec_label_pc_8bbc
  store i32 %v1_8bb0, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bac = load i32, i32* @r8, align 4
  %v4_8bac = mul i32 %v1_8bb0, 4
  %v5_8bac = add i32 %v0_8bac, %v4_8bac
  %v6_8bac = inttoptr i32 %v5_8bac to i32*
  %v7_8bac = load i32, i32* %v6_8bac, align 4
  %v0_8bb0 = load i32, i32* @sl, align 4
  %v5_8bb0 = add i32 %v0_8bb0, %v4_8bac
  %v6_8bb0 = inttoptr i32 %v5_8bb0 to i32*
  %v7_8bb0 = load i32, i32* %v6_8bb0, align 4
  %v4_8bb4 = call i32 @function_11280(i32 %v7_8bac, i32 %v7_8bb0, i32 %v0_8bc0, i32 16384)
  %v0_8bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bb8 = add i32 %v0_8bb8, 1
  %v0_8bbc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bbc.outer

dec_label_pc_8bbc.outer:                          ; preds = %dec_label_pc_8b98, %dec_label_pc_8bac
  %v0_8bbc.ph = phi i32 [ %v0_8bbc.pre.pre, %dec_label_pc_8bac ], [ %v1_8bd824, %dec_label_pc_8b98 ]
  %v1_8bb0.ph = phi i32 [ %v1_8bb8, %dec_label_pc_8bac ], [ 0, %dec_label_pc_8b98 ]
  %v0_8bc0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bbc

dec_label_pc_8bbc:                                ; preds = %dec_label_pc_8bbc.outer, %dec_label_pc_8bbc
  %v1_8bb0 = phi i32 [ 0, %dec_label_pc_8bbc ], [ %v1_8bb0.ph, %dec_label_pc_8bbc.outer ]
  %v8_8bc8 = icmp sgt i32 %v0_8bbc.ph, %v1_8bb0
  br i1 %v8_8bc8, label %dec_label_pc_8bac, label %dec_label_pc_8bbc

dec_label_pc_8bd4:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8b98
  %v1_8bd823 = phi i32 [ %v1_8bd824, %dec_label_pc_8b98 ], [ %v1_8bd8, %dec_label_pc_8bd8 ]
  br label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8be4, %dec_label_pc_8bd4
  %v1_8bd8 = phi i32 [ %v1_8bd823, %dec_label_pc_8bd4 ], [ %v1_8bd8.pre, %dec_label_pc_8be4 ]
  %v1_8be4 = phi i32 [ 0, %dec_label_pc_8bd4 ], [ %v1_8c04, %dec_label_pc_8be4 ]
  store i32 %v1_8be4, i32* @r6, align 4
  %v6_8be0 = icmp slt i32 %v1_8be4, %v1_8bd8
  br i1 %v6_8be0, label %dec_label_pc_8be4, label %dec_label_pc_8bd4

dec_label_pc_8be4:                                ; preds = %dec_label_pc_8bd8
  %v0_8bdc = load i32, i32* @r5, align 4
  %v0_8be4 = load i32, i32* @sl, align 4
  %v4_8be4 = mul i32 %v1_8be4, 4
  %v5_8be4 = add i32 %v0_8be4, %v4_8be4
  %v6_8be4 = inttoptr i32 %v5_8be4 to i32*
  %v7_8be4 = load i32, i32* %v6_8be4, align 4
  store i32 %v7_8be4, i32* @r4, align 4
  %v2_8bec = inttoptr i32 %v7_8be4 to i16*
  %v3_8bec = call i32 @function_e04c(i16* %v2_8bec, i32 %v0_8bdc)
  %v0_8bf0 = load i32, i32* @r8, align 4
  %v1_8bf0 = load i32, i32* @r6, align 4
  %v4_8bf0 = mul i32 %v1_8bf0, 4
  %v5_8bf0 = add i32 %v4_8bf0, %v0_8bf0
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v0_8bf4 = load i32, i32* @r4, align 4
  %v0_8bf8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c00 = call i32 @function_11280(i32 %v7_8bf0, i32 %v0_8bf4, i32 %v0_8bf8, i32 16384)
  %v0_8c04 = load i32, i32* @r6, align 4
  %v1_8c04 = add i32 %v0_8c04, 1
  %v1_8bd8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bd8

; uselistorder directives
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bb0, { 2, 1, 0 }
  uselistorder i32 %v5_8b80, { 1, 0 }
  uselistorder i32 %v3_8b44, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8abc, { 1, 0, 2 }
  uselistorder i32 %v3_8a7c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8a10, { 1, 0 }
  uselistorder i32 %v3_89c0, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8ac8, { 1, 0 }
  uselistorder label %dec_label_pc_8a70, { 1, 0 }
  uselistorder label %dec_label_pc_8a58, { 1, 0 }
}

define i32 @function_8c0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8c0c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v3_8c0c = load i32, i32* @r4, align 4
  %v18_8c0c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c28 = call i32 @function_11ea4(i32 %arg1, i32 4)
  store i32 %v2_8c28, i32* @sl, align 4
  %v0_8c34 = load i32, i32* @r7, align 4
  %v2_8c38 = call i32 @function_11ea4(i32 %v0_8c34, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c44 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c38, i32* @r8, align 4
  %v0_8c54 = load i32, i32* @r5, align 4
  %v4_8c58 = inttoptr i32 %v0_8c44 to i32*
  %v5_8c58 = call i32 @function_8570(i32 %v0_8c54, i32* %v4_8c58, i32 7, i32 65535)
  %v3_8c60 = urem i32 %v5_8c58, 65536
  %v0_8c64 = load i32, i32* @r6, align 4
  %v0_8c6c = load i32, i32* @r4, align 4
  store i32 %v0_8c6c, i32* %r3.global-to-local, align 4
  %v0_8c70 = load i32, i32* @r5, align 4
  %v5_8c78 = inttoptr i32 %v0_8c64 to i32*
  %v6_8c78 = call i32 @function_8570(i32 %v0_8c70, i32* %v5_8c78, i32 6, i32 %v0_8c6c)
  %v0_8c7c = load i32, i32* @r6, align 4
  %v3_8c80 = mul i32 %v6_8c78, 65536
  store i32 %v3_8c80, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* @r5, align 4
  %v4_8c90 = inttoptr i32 %v0_8c7c to i32*
  %v5_8c90 = call i32 @function_8570(i32 %v0_8c8c, i32* %v4_8c90, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ca0 = load i32, i32* @r6, align 4
  %v0_8ca4 = load i32, i32* @r5, align 4
  %v3_8ca8 = urem i32 %v5_8c90, 65536
  store i32 %v3_8ca8, i32* @r5, align 4
  %v4_8cac = inttoptr i32 %v0_8ca0 to i32*
  %v5_8cac = call i32 @function_8570(i32 %v0_8ca4, i32* %v4_8cac, i32 1, i32 1)
  %v0_8cb0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cb0 = udiv i32 %v0_8cb0, 65536
  store i32 %v3_8cb0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cb8 = load i32, i32* @r4, align 4
  %v9_8cb8 = icmp eq i32 %v3_8cb0, %v1_8cb8
  br i1 %v9_8cb8, label %dec_label_pc_8ce8, label %bb

bb:                                               ; preds = %dec_label_pc_8c0c
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8cd0 = udiv i32 %v0_8cb0, 16777216
  store i32 %v4_8cd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8cf8

dec_label_pc_8ce8:                                ; preds = %dec_label_pc_8c0c
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8ce8 = call i32 @function_deb8()
  br label %dec_label_pc_8cf8

dec_label_pc_8cf8:                                ; preds = %bb, %dec_label_pc_8ce8
  %v0_8cdc12 = urem i32 %v5_8cac, 256
  %v0_8cf8 = load i32, i32* @r7, align 4
  %v2_8cf8 = icmp eq i32 %v0_8cf8, 0
  br i1 %v2_8cf8, label %dec_label_pc_8e38, label %dec_label_pc_8d00

dec_label_pc_8d00:                                ; preds = %dec_label_pc_8cf8
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dac = udiv i32 %v3_8c60, 256
  %v1_8da8 = mul i32 %v5_8c58, 256
  %v4_8db0 = and i32 %v1_8da8, 65280
  %v5_8db0 = or i32 %v4_8db0, %v3_8dac
  %v2_8d30 = ptrtoint i16* %stack_var_-56 to i32
  br label %dec_label_pc_8d90

dec_label_pc_8d10:                                ; preds = %bb53, %dec_label_pc_8dd0
  %v3_8d1c = call i32 @function_1133c(i32 2, i32 2, i32 0)
  %v7_8d24 = icmp eq i32 %v3_8d1c, -1
  %v0_8d28 = load i32, i32* @sb, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sb, align 4
  %v0_8d2c = load i32, i32* @fp, align 4
  %v1_8d2c = add i32 %v0_8d2c, 24
  store i32 %v1_8d2c, i32* @fp, align 4
  %v2_8d38 = load i32, i32* @r8, align 4
  %v3_8d38 = add i32 %v2_8d38, %stack_var_-60.0
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v3_8d1c, i32* %v4_8d38, align 4
  br i1 %v7_8d24, label %dec_label_pc_8e2c, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d10
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v7_8d58 = call i32 @function_110ec(i32 %v3_8d1c, i32 %v2_8d30, i32 16, i32 2, i32 2)
  %v0_8d5c = load i32, i32* @r6, align 4
  %v1_8d5c = add i32 %v0_8d5c, 20
  %v2_8d5c = inttoptr i32 %v1_8d5c to i8*
  %v3_8d5c = load i8, i8* %v2_8d5c, align 1
  %v4_8d5c = zext i8 %v3_8d5c to i32
  store i32 %v4_8d5c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d5c, 32
  br i1 %tmp, label %dec_label_pc_8de4, label %dec_label_pc_8d68

dec_label_pc_8d68:                                ; preds = %dec_label_pc_8d40, %dec_label_pc_8de4
  %v0_8d6c = phi i32 [ %v0_8d5c, %dec_label_pc_8d40 ], [ %v0_8d6c.pre, %dec_label_pc_8de4 ]
  %v1_8d70 = load i32, i32* @r8, align 4
  %v2_8d70 = add i32 %v1_8d70, %stack_var_-60.0
  %v3_8d70 = inttoptr i32 %v2_8d70 to i32*
  %v4_8d70 = load i32, i32* %v3_8d70, align 4
  %v3_8d78 = call i32 @function_11124(i32 %v4_8d70, i32 %v0_8d6c, i32 16)
  %v0_8d80 = load i32, i32* @sb, align 4
  %v1_8d80 = load i32, i32* @r7, align 4
  %v9_8d80 = icmp eq i32 %v0_8d80, %v1_8d80
  %v1_8d84 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8d84, i32* %r3.global-to-local, align 4
  br i1 %v9_8d80, label %dec_label_pc_8e38, label %dec_label_pc_8d90

dec_label_pc_8d90:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8d00
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d00 ], [ %v1_8d84, %dec_label_pc_8d68 ]
  store i32 65535, i32* @r4, align 4
  %v2_8da0 = call i32 @function_11ea4(i32 65535, i32 1)
  store i32 %v5_8db0, i32* %r3.global-to-local, align 4
  %v1_8dbc = load i32, i32* @r4, align 4
  %v9_8dbc = icmp eq i32 %v3_8c60, %v1_8dbc
  %v1_8dc0 = load i32, i32* @fp, align 4
  %v2_8dc0 = add i32 %v1_8dc0, %arg2
  store i32 %v2_8dc0, i32* @r6, align 4
  %v2_8dc4 = load i32, i32* @sl, align 4
  %v3_8dc4 = add i32 %v2_8dc4, %stack_var_-60.0
  %v4_8dc4 = inttoptr i32 %v3_8dc4 to i32*
  store i32 %v2_8da0, i32* %v4_8dc4, align 4
  br i1 %v9_8dbc, label %dec_label_pc_8dd0, label %bb53

bb53:                                             ; preds = %dec_label_pc_8d90
  %v1_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8dc8 = trunc i32 %v1_8dc8 to i16
  %v3_8dc8 = load i32, i32* @r6, align 4
  %v4_8dc8 = add i32 %v3_8dc8, 2
  %v5_8dc8 = inttoptr i32 %v4_8dc8 to i16*
  store i16 %v2_8dc8, i16* %v5_8dc8, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8d90
  %v0_8dd0 = call i32 @function_deb8()
  %v1_8dd0 = trunc i32 %v0_8dd0 to i16
  %v0_8dd8 = load i32, i32* @fp, align 4
  %v2_8dd8 = add i32 %v0_8dd8, %arg2
  store i32 %v2_8dd8, i32* @r6, align 4
  %v4_8ddc = add i32 %v2_8dd8, 2
  %v5_8ddc = inttoptr i32 %v4_8ddc to i16*
  store i16 %v1_8dd0, i16* %v5_8ddc, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8d40
  %v1_8de4 = add i32 %v0_8d5c, 16
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r4.global-to-local, align 4
  %v0_8de8 = call i32 @function_deb8()
  %v1_8df8 = and i32 %v3_8de4, 65280
  store i32 %v1_8df8, i32* %r3.global-to-local, align 4
  %v0_8e00 = load i32, i32* @r6, align 4
  %v1_8e00 = add i32 %v0_8e00, 20
  %v2_8e00 = inttoptr i32 %v1_8e00 to i8*
  %v3_8e00 = load i8, i8* %v2_8e00, align 1
  %v4_8e00 = zext i8 %v3_8e00 to i32
  %v5_8e04 = call i32 @llvm.bswap.i32(i32 %v3_8de4)
  %v7_8e08 = lshr i32 %v0_8de8, %v4_8e00
  %v8_8e08 = add i32 %v7_8e08, %v5_8e04
  %v5_8e20 = call i32 @llvm.bswap.i32(i32 %v8_8e08)
  store i32 %v5_8e20, i32* %r3.global-to-local, align 4
  %v2_8e24 = add i32 %v0_8e00, 4
  %v3_8e24 = inttoptr i32 %v2_8e24 to i32*
  store i32 %v5_8e20, i32* %v3_8e24, align 4
  %v0_8d6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8d68

dec_label_pc_8e2c:                                ; preds = %dec_label_pc_8d10
  store i32 %v3_8c0c, i32* %r4.global-to-local, align 4
  store i32 %v18_8c0c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d1c

dec_label_pc_8e38:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8cf8
  %v1_8e7824 = phi i32 [ 0, %dec_label_pc_8cf8 ], [ %v0_8d80, %dec_label_pc_8d68 ]
  %v2_8e3c = icmp eq i32 %v0_8cdc12, 0
  br i1 %v2_8e3c, label %dec_label_pc_8e5c.outer, label %dec_label_pc_8e74

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e5c
  store i32 %v1_8e50, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e4c = load i32, i32* @r8, align 4
  %v4_8e4c = mul i32 %v1_8e50, 4
  %v5_8e4c = add i32 %v0_8e4c, %v4_8e4c
  %v6_8e4c = inttoptr i32 %v5_8e4c to i32*
  %v7_8e4c = load i32, i32* %v6_8e4c, align 4
  %v0_8e50 = load i32, i32* @sl, align 4
  %v5_8e50 = add i32 %v0_8e50, %v4_8e4c
  %v6_8e50 = inttoptr i32 %v5_8e50 to i32*
  %v7_8e50 = load i32, i32* %v6_8e50, align 4
  %v4_8e54 = call i32 @function_11280(i32 %v7_8e4c, i32 %v7_8e50, i32 %v0_8e60, i32 16384)
  %v0_8e58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8e58 = add i32 %v0_8e58, 1
  %v0_8e5c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e5c.outer

dec_label_pc_8e5c.outer:                          ; preds = %dec_label_pc_8e38, %dec_label_pc_8e4c
  %v0_8e5c.ph = phi i32 [ %v0_8e5c.pre.pre, %dec_label_pc_8e4c ], [ %v1_8e7824, %dec_label_pc_8e38 ]
  %v1_8e50.ph = phi i32 [ %v1_8e58, %dec_label_pc_8e4c ], [ 0, %dec_label_pc_8e38 ]
  %v0_8e60 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8e5c.outer, %dec_label_pc_8e5c
  %v1_8e50 = phi i32 [ 0, %dec_label_pc_8e5c ], [ %v1_8e50.ph, %dec_label_pc_8e5c.outer ]
  %v8_8e68 = icmp sgt i32 %v0_8e5c.ph, %v1_8e50
  br i1 %v8_8e68, label %dec_label_pc_8e4c, label %dec_label_pc_8e5c

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e78, %dec_label_pc_8e38
  %v1_8e7823 = phi i32 [ %v1_8e7824, %dec_label_pc_8e38 ], [ %v1_8e78, %dec_label_pc_8e78 ]
  br label %dec_label_pc_8e78

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8e84, %dec_label_pc_8e74
  %v1_8e78 = phi i32 [ %v1_8e7823, %dec_label_pc_8e74 ], [ %v1_8e78.pre, %dec_label_pc_8e84 ]
  %v1_8e84 = phi i32 [ 0, %dec_label_pc_8e74 ], [ %v1_8ea4, %dec_label_pc_8e84 ]
  store i32 %v1_8e84, i32* @r6, align 4
  %v6_8e80 = icmp slt i32 %v1_8e84, %v1_8e78
  br i1 %v6_8e80, label %dec_label_pc_8e84, label %dec_label_pc_8e74

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8e78
  %v0_8e7c = load i32, i32* @r5, align 4
  %v0_8e84 = load i32, i32* @sl, align 4
  %v4_8e84 = mul i32 %v1_8e84, 4
  %v5_8e84 = add i32 %v0_8e84, %v4_8e84
  %v6_8e84 = inttoptr i32 %v5_8e84 to i32*
  %v7_8e84 = load i32, i32* %v6_8e84, align 4
  store i32 %v7_8e84, i32* @r4, align 4
  %v2_8e8c = inttoptr i32 %v7_8e84 to i16*
  %v3_8e8c = call i32 @function_e04c(i16* %v2_8e8c, i32 %v0_8e7c)
  %v0_8e90 = load i32, i32* @r8, align 4
  %v1_8e90 = load i32, i32* @r6, align 4
  %v4_8e90 = mul i32 %v1_8e90, 4
  %v5_8e90 = add i32 %v4_8e90, %v0_8e90
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v0_8e94 = load i32, i32* @r4, align 4
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ea0 = call i32 @function_11280(i32 %v7_8e90, i32 %v0_8e94, i32 %v0_8e98, i32 16384)
  %v0_8ea4 = load i32, i32* @r6, align 4
  %v1_8ea4 = add i32 %v0_8ea4, 1
  %v1_8e78.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e78

; uselistorder directives
  uselistorder i32 %v1_8e78, { 1, 0 }
  uselistorder i32 %v1_8e50, { 2, 1, 0 }
  uselistorder i32 %v5_8e20, { 1, 0 }
  uselistorder i32 %v3_8de4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d5c, { 1, 0, 2 }
  uselistorder i32 %v3_8d1c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_8cb0, { 1, 0 }
  uselistorder i32 %v3_8c60, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 13, 1, 14, 15, 5, 6, 2, 3, 4, 7, 8, 9, 10, 11, 12, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8d68, { 1, 0 }
  uselistorder label %dec_label_pc_8d10, { 1, 0 }
  uselistorder label %dec_label_pc_8cf8, { 1, 0 }
}

define i32 @function_8eac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8eac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eac = load i32, i32* @sb, align 4
  %v27_8eac = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8ec8 = call i32 @function_11ea4(i32 %arg1, i32 4)
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8edc = load i32, i32* @r4, align 4
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  %v5_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v6_8ee0 = call i32 @function_8570(i32 %v0_8edc, i32* %v5_8ee0, i32 2, i32 0)
  %v1_8eec = urem i32 %v6_8ee0, 256
  store i32 %v1_8eec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8ef8 = load i32, i32* @r5, align 4
  store i32 %v0_8ef8, i32* %r1.global-to-local, align 4
  %v0_8efc = load i32, i32* @r4, align 4
  store i32 %v0_8efc, i32* %r0.global-to-local, align 4
  %v5_8f00 = trunc i32 %v6_8ee0 to i8
  %v6_8f04 = inttoptr i32 %v0_8ef8 to i32*
  %v7_8f04 = call i32 @function_8570(i32 %v0_8efc, i32* %v6_8f04, i32 3, i32 65535)
  %v0_8f08 = load i32, i32* @r5, align 4
  store i32 %v0_8f08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f18 = load i32, i32* @r4, align 4
  store i32 %v0_8f18, i32* %r0.global-to-local, align 4
  %v5_8f1c = inttoptr i32 %v0_8f08 to i32*
  %v6_8f1c = call i32 @function_8570(i32 %v0_8f18, i32* %v5_8f1c, i32 4, i32 64)
  %v1_8f24 = urem i32 %v6_8f1c, 256
  store i32 %v1_8f24, i32* %ip.global-to-local, align 4
  %v0_8f28 = load i32, i32* @r5, align 4
  store i32 %v0_8f28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f34 = load i32, i32* @r4, align 4
  store i32 %v0_8f34, i32* %r0.global-to-local, align 4
  %v6_8f3c = inttoptr i32 %v0_8f28 to i32*
  %v7_8f3c = call i32 @function_8570(i32 %v0_8f34, i32* %v6_8f3c, i32 5, i32 0)
  %v1_8f48 = urem i32 %v7_8f3c, 256
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f54 = load i32, i32* @r5, align 4
  store i32 %v0_8f54, i32* %r1.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f60 = inttoptr i32 %v0_8f54 to i32*
  %v6_8f60 = call i32 @function_8570(i32 %v0_8f58, i32* %v5_8f60, i32 6, i32 65535)
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8f60, i32* %sb.global-to-local, align 4
  %v0_8f78 = load i32, i32* @r4, align 4
  store i32 %v0_8f78, i32* %r0.global-to-local, align 4
  %v4_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v5_8f7c = call i32 @function_8570(i32 %v0_8f78, i32* %v4_8f7c, i32 7, i32 65535)
  %v0_8f80 = load i32, i32* @r5, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8f7c, i32* @sl, align 4
  %v0_8f90 = load i32, i32* @r4, align 4
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  %v4_8f94 = inttoptr i32 %v0_8f80 to i32*
  %v5_8f94 = call i32 @function_8570(i32 %v0_8f90, i32* %v4_8f94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fa0 = load i32, i32* @r5, align 4
  store i32 %v0_8fa0, i32* %r1.global-to-local, align 4
  store i32 %v5_8f94, i32* @r6, align 4
  %v0_8fa8 = load i32, i32* @r4, align 4
  store i32 %v0_8fa8, i32* %r0.global-to-local, align 4
  %v4_8fac = inttoptr i32 %v0_8fa0 to i32*
  %v5_8fac = call i32 @function_8570(i32 %v0_8fa8, i32* %v4_8fac, i32 1, i32 1)
  %v2_8fb8 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_8fb8, i32* %r3.global-to-local, align 4
  %v1_8fbc = urem i32 %v5_8fac, 256
  store i32 %v1_8fbc, i32* %ip.global-to-local, align 4
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8fc8 = load i32, i32* @r4, align 4
  store i32 %v0_8fc8, i32* %r0.global-to-local, align 4
  %v5_8fd0 = inttoptr i32 %v0_8fc0 to i32*
  %v6_8fd0 = call i32 @function_8570(i32 %v0_8fc8, i32* %v5_8fd0, i32 25, i32 %v2_8fb8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8fe4 = call i32 @function_1133c(i32 2, i32 3, i32 17)
  store i32 %v3_8fe4, i32* %r0.global-to-local, align 4
  %v7_8fe8 = icmp eq i32 %v3_8fe4, -1
  store i1 %v7_8fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8fe4, i32* @fp, align 4
  br i1 %v7_8fe8, label %dec_label_pc_9388, label %dec_label_pc_8ff4

dec_label_pc_8ff4:                                ; preds = %dec_label_pc_8eac
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8ffc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8ffc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9010 = call i32 @function_112f8(i32 %v3_8fe4, i32 0, i32 3, i32 %v6_8ffc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9010, i32* %r0.global-to-local, align 4
  %v7_9014 = icmp eq i32 %v5_9010, -1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9014, label %dec_label_pc_9380, label %dec_label_pc_901c

dec_label_pc_901c:                                ; preds = %dec_label_pc_8ff4
  %v0_901c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9028 = urem i32 %v0_901c, 65536
  store i32 %v3_9028, i32* %r2.global-to-local, align 4
  %v3_902c = icmp ugt i32 %v3_9028, 1459
  %v9_902c = icmp eq i32 %v3_9028, 1460
  store i1 %v9_902c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_902c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_901c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_901c, %bb
  %v0_9088 = phi i32 [ %v3_9028, %dec_label_pc_901c ], [ 1460, %bb ]
  store i32 %v7_8f04, i32* %r0.global-to-local, align 4
  %v0_9038 = load i32, i32* %sb.global-to-local, align 4
  %v3_9040 = urem i32 %v0_9038, 65536
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v0_9044 = load i32, i32* @r7, align 4
  %v2_9044 = icmp eq i32 %v0_9044, 0
  store i1 %v2_9044, i1* %cpsr_z.global-to-local, align 1
  %v0_9048 = load i32, i32* @sl, align 4
  %v3_9048 = mul i32 %v0_9048, 65536
  br i1 %v2_9044, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_9088, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_9078 = phi i32 [ %v3_9040, %bb48 ], [ %v0_9088, %bb49 ]
  %v3_9058 = urem i32 %v0_9048, 65536
  store i32 %v3_9058, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9060 = urem i32 %v7_8f04, 65536
  store i32 %v3_9060, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9044, label %.thread, label %dec_label_pc_9080

.thread:                                          ; preds = %bb50
  %v2_9074 = add nsw i32 %v1_9078, 28
  store i32 %v2_9074, i32* @sb, align 4
  %v2_9078 = add nsw i32 %v1_9078, 8
  store i32 %v2_9078, i32* @sl, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_9080:                                ; preds = %bb50
  %v1_9088 = add nuw nsw i32 %v0_9088, 28
  store i32 %v1_9088, i32* @sb, align 4
  %v1_908c = add nuw nsw i32 %v0_9088, 8
  store i32 %v1_908c, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9038, 256
  %v3_90a0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9038, 256
  %v4_90b0 = urem i32 %tmp52, 256
  %v5_90b0 = or i32 %v4_90b0, %v3_90a0
  store i32 %v5_90b0, i32* @r6, align 4
  store i32 %v3_9048, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_9088, 256
  %v3_90bc = and i32 %tmp53, 65280
  store i32 %v3_90bc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9048, 256
  %v3_90c0 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_908c, 256
  %v3_90c4 = and i32 %tmp55, 65280
  store i32 %v3_90c4, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_9088, 256
  %v4_90c8 = urem i32 %tmp56, 256
  %v5_90c8 = or i32 %v4_90c8, %v3_90bc
  store i32 %v5_90c8, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9048, 256
  %v4_90cc = urem i32 %tmp57, 256
  %v5_90cc = or i32 %v4_90cc, %v3_90c0
  store i32 %v5_90cc, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_908c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f04, 256
  %v3_90d4 = and i32 %tmp58, 65280
  store i32 %v3_90d4, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f04, 256
  %v4_90e4 = urem i32 %tmp59, 256
  %v5_90e4 = or i32 %v4_90e4, %v3_90d4
  store i32 %v5_90e4, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_913c = sext i8 %v5_8f00 to i32
  %sext6 = mul nuw i32 %v5_90c8, 65536
  %v4_9158 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_90cc, 65536
  %v7_918c = sdiv i32 %sext7, 65536
  %v1_914c = trunc i32 %v6_8f1c to i8
  %v3_918c = sext i16 %rev to i32
  br label %dec_label_pc_90ec

dec_label_pc_90ec:                                ; preds = %.thread9, %dec_label_pc_9080
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_90f8 = call i32 @function_11ea4(i32 1510, i32 1)
  store i32 %v2_90f8, i32* %r0.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r3.global-to-local, align 4
  %v3_9100 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9100, i32* %r1.global-to-local, align 4
  %v2_9104 = load i32, i32* @r4, align 4
  %v5_9104 = mul i32 %v2_9104, 4
  %v6_9104 = add i32 %v5_9104, %v2_8ec8
  %v7_9104 = inttoptr i32 %v6_9104 to i32*
  store i32 %v2_90f8, i32* %v7_9104, align 4
  %v0_9108 = load i32, i32* %r3.global-to-local, align 4
  %v1_9108 = load i32, i32* %r1.global-to-local, align 4
  %v4_9108 = mul i32 %v1_9108, 4
  %v5_9108 = add i32 %v4_9108, %v0_9108
  %v6_9108 = inttoptr i32 %v5_9108 to i32*
  %v7_9108 = load i32, i32* %v6_9108, align 4
  store i32 %v7_9108, i32* %r0.global-to-local, align 4
  %v1_910c = inttoptr i32 %v7_9108 to i8*
  %v2_910c = load i8, i8* %v1_910c, align 1
  %tmp = urem i8 %v2_910c, 16
  %v1_9110 = zext i8 %tmp to i32
  %v1_9114 = or i32 %v1_9110, 64
  store i32 %v1_9114, i32* %r3.global-to-local, align 4
  %v1_9118 = trunc i32 %v1_9114 to i8
  store i8 %v1_9118, i8* %v1_910c, align 1
  %v0_911c = load i32, i32* %r0.global-to-local, align 4
  %v1_911c = inttoptr i32 %v0_911c to i8*
  %v2_911c = load i8, i8* %v1_911c, align 1
  %v1_9120 = and i8 %v2_911c, -16
  %v1_9124 = or i8 %v1_9120, 5
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  %v0_912c = load i32, i32* %r1.global-to-local, align 4
  %v3_912c = mul i32 %v0_912c, 32
  store i32 %v3_912c, i32* %r2.global-to-local, align 4
  store i8 %v1_9124, i8* %v1_911c, align 1
  %v0_9134 = load i32, i32* %r1.global-to-local, align 4
  %v1_9134 = add i32 %v0_9134, 1
  store i32 %v1_9134, i32* @r4, align 4
  %v0_9138 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9134, -8
  %v5_9138 = add i32 %v0_9138, %tmp61
  store i32 %v5_9138, i32* %r2.global-to-local, align 4
  store i32 %v4_913c, i32* %r1.global-to-local, align 4
  %v2_9140 = load i32, i32* %r0.global-to-local, align 4
  %v3_9140 = add i32 %v2_9140, 1
  %v4_9140 = inttoptr i32 %v3_9140 to i8*
  store i8 %v5_8f00, i8* %v4_9140, align 1
  store i32 %v1_8f24, i32* %r3.global-to-local, align 4
  %v0_9148 = load i32, i32* %ip.global-to-local, align 4
  %v2_9148 = icmp eq i32 %v0_9148, 0
  store i1 %v2_9148, i1* %cpsr_z.global-to-local, align 1
  %v2_914c = load i32, i32* %r0.global-to-local, align 4
  %v3_914c = add i32 %v2_914c, 8
  %v4_914c = inttoptr i32 %v3_914c to i8*
  store i8 %v1_914c, i8* %v4_914c, align 1
  %v0_9150 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9150, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_90ec
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9154 = load i32, i32* %r0.global-to-local, align 4
  %v4_9154 = add i32 %v3_9154, 6
  %v5_9154 = inttoptr i32 %v4_9154 to i16*
  store i16 64, i16* %v5_9154, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_90ec, %bb60
  store i32 %v4_9158, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_9160 = load i32, i32* %r0.global-to-local, align 4
  %v3_9160 = add i32 %v2_9160, 9
  %v4_9160 = inttoptr i32 %v3_9160 to i8*
  store i8 17, i8* %v4_9160, align 1
  %v0_9164 = load i32, i32* %ip.global-to-local, align 4
  %v1_9164 = trunc i32 %v0_9164 to i16
  %v2_9164 = load i32, i32* %r0.global-to-local, align 4
  %v3_9164 = add i32 %v2_9164, 2
  %v4_9164 = inttoptr i32 %v3_9164 to i16*
  store i16 %v1_9164, i16* %v4_9164, align 2
  store i32 %v6_8fd0, i32* %ip.global-to-local, align 4
  %v1_916c = load i32, i32* %r0.global-to-local, align 4
  %v2_916c = add i32 %v1_916c, 12
  %v3_916c = inttoptr i32 %v2_916c to i32*
  store i32 %v6_8fd0, i32* %v3_916c, align 4
  %v0_9170 = load i32, i32* %r2.global-to-local, align 4
  %v1_9170 = load i32, i32* @r8, align 4
  %v2_9170 = add i32 %v1_9170, %v0_9170
  store i32 %v2_9170, i32* %r2.global-to-local, align 4
  %v1_9174 = add i32 %v2_9170, 16
  %v2_9174 = inttoptr i32 %v1_9174 to i32*
  %v3_9174 = load i32, i32* %v2_9174, align 4
  store i32 %v3_9174, i32* %r3.global-to-local, align 4
  %v0_9178 = load i32, i32* @r5, align 4
  %v1_9178 = trunc i32 %v0_9178 to i16
  %v2_9178 = load i32, i32* %r0.global-to-local, align 4
  %v3_9178 = add i32 %v2_9178, 4
  %v4_9178 = inttoptr i32 %v3_9178 to i16*
  store i16 %v1_9178, i16* %v4_9178, align 2
  %v0_917c = load i32, i32* %r0.global-to-local, align 4
  %v1_917c = add i32 %v0_917c, 20
  store i32 %v1_917c, i32* %r1.global-to-local, align 4
  %v0_9180 = load i32, i32* %r3.global-to-local, align 4
  %v2_9180 = add i32 %v0_917c, 16
  %v3_9180 = inttoptr i32 %v2_9180 to i32*
  store i32 %v0_9180, i32* %v3_9180, align 4
  %v0_9184 = load i32, i32* @r6, align 4
  %v1_9184 = trunc i32 %v0_9184 to i16
  %v2_9184 = load i32, i32* %r0.global-to-local, align 4
  %v3_9184 = add i32 %v2_9184, 20
  %v4_9184 = inttoptr i32 %v3_9184 to i16*
  store i16 %v1_9184, i16* %v4_9184, align 2
  store i32 %v3_918c, i32* %r0.global-to-local, align 4
  store i32 %v7_918c, i32* %r3.global-to-local, align 4
  %v0_9190 = load i32, i32* @r4, align 4
  %v1_9190 = load i32, i32* @r7, align 4
  %v9_9190 = icmp eq i32 %v0_9190, %v1_9190
  store i1 %v9_9190, i1* %cpsr_z.global-to-local, align 1
  %v2_9194 = load i32, i32* %r1.global-to-local, align 4
  %v3_9194 = add i32 %v2_9194, 4
  %v4_9194 = inttoptr i32 %v3_9194 to i16*
  store i16 %rev, i16* %v4_9194, align 2
  %v0_9198 = load i32, i32* %r3.global-to-local, align 4
  %v1_9198 = trunc i32 %v0_9198 to i16
  %v2_9198 = load i32, i32* %r1.global-to-local, align 4
  %v3_9198 = add i32 %v2_9198, 2
  %v4_9198 = inttoptr i32 %v3_9198 to i16*
  store i16 %v1_9198, i16* %v4_9198, align 2
  %v0_919c = load i32, i32* @r4, align 4
  store i32 %v0_919c, i32* %stack_var_-44, align 4
  %v5_91a0 = icmp slt i32 %v0_9190, %v1_9190
  br i1 %v5_91a0, label %dec_label_pc_90ec, label %dec_label_pc_91a4.preheader.loopexit

dec_label_pc_91a4.preheader.loopexit:             ; preds = %.thread9
  %v0_91a8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_91a4.preheader:                      ; preds = %.thread, %dec_label_pc_91a4.preheader.loopexit
  %v0_91a8.pre = phi i32 [ %v0_91a8.pre.pre, %dec_label_pc_91a4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9310 = icmp eq i32 %v6_8fd0, -1
  %v8_9310 = icmp eq i32 %v6_8fd0, -1
  %v3_9328 = icmp eq i32 %v3_9060, 65535
  %v2_9364 = icmp eq i32 %v1_8fbc, 0
  br label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4, %dec_label_pc_91a4.preheader
  %v0_91a8 = phi i32 [ %v0_91a8.pre, %dec_label_pc_91a4.preheader ], [ 0, %dec_label_pc_92a4 ], [ 0, %dec_label_pc_91a4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91a8 = icmp eq i32 %v0_91a8, 0
  store i1 %v2_91a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_91b4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91b8

dec_label_pc_91b8:                                ; preds = %dec_label_pc_9220, %dec_label_pc_91b4
  %v1_91cc = phi i32 [ %v1_9294, %dec_label_pc_9220 ], [ 0, %dec_label_pc_91b4 ]
  %v5_91bc = mul i32 %v1_91cc, 24
  %v1_91c0 = load i32, i32* @r8, align 4
  %v2_91c0 = add i32 %v1_91c0, %v5_91bc
  store i32 %v2_91c0, i32* %r3.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r1.global-to-local, align 4
  %v1_91c8 = add i32 %v2_91c0, 20
  %v2_91c8 = inttoptr i32 %v1_91c8 to i8*
  %v3_91c8 = load i8, i8* %v2_91c8, align 1
  %v4_91c8 = zext i8 %v3_91c8 to i32
  store i32 %v4_91c8, i32* %r2.global-to-local, align 4
  %v4_91cc = mul i32 %v1_91cc, 4
  %v5_91cc = add i32 %v4_91cc, %v2_8ec8
  %v6_91cc = inttoptr i32 %v5_91cc to i32*
  %v7_91cc = load i32, i32* %v6_91cc, align 4
  store i32 %v7_91cc, i32* @r5, align 4
  %v7_91d0 = icmp eq i8 %v3_91c8, 31
  store i1 %v7_91d0, i1* %cpsr_z.global-to-local, align 1
  %v1_91d4 = add i32 %v7_91cc, 20
  store i32 %v1_91d4, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_91c8, 32
  br i1 %tmp62, label %dec_label_pc_92b8, label %dec_label_pc_91dc

dec_label_pc_91dc:                                ; preds = %dec_label_pc_91b8
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_91e8:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9318.dec_label_pc_91fc_crit_edge, %dec_label_pc_91e8
  %v1_9200 = phi i32 [ %v1_9200.pre, %dec_label_pc_9318.dec_label_pc_91fc_crit_edge ], [ 65535, %dec_label_pc_91e8 ]
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v9_9200 = icmp eq i32 %v3_9040, %v1_9200
  store i1 %v9_9200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9200, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9208:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v1_920c = phi i32 [ %v1_9340, %dec_label_pc_9334 ], [ %v1_9200, %dec_label_pc_91fc ]
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v9_920c = icmp eq i32 %v3_9058, %v1_920c
  store i1 %v9_920c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_920c, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9220:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c, %dec_label_pc_9370
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9224 = load i32, i32* @r5, align 4
  %v3_9224 = add i32 %v2_9224, 10
  %v4_9224 = inttoptr i32 %v3_9224 to i16*
  store i16 0, i16* %v4_9224, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* @r0, align 4
  %v2_9230 = call i32 @function_c848(i32 %v0_922c, i32 20)
  %v3_9230 = trunc i32 %v2_9230 to i16
  %v3_9234 = load i32, i32* @r5, align 4
  %v4_9234 = add i32 %v3_9234, 10
  %v5_9234 = inttoptr i32 %v4_9234 to i16*
  store i16 %v3_9230, i16* %v5_9234, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_923c = load i32, i32* @r6, align 4
  %v3_923c = add i32 %v2_923c, 6
  %v4_923c = inttoptr i32 %v3_923c to i16*
  store i16 0, i16* %v4_923c, align 2
  %v0_9240 = load i32, i32* @r6, align 4
  store i32 %v0_9240, i32* @r1, align 4
  %v1_9244 = add i32 %v0_9240, 4
  %v2_9244 = inttoptr i32 %v1_9244 to i16*
  %v3_9244 = load i16, i16* %v2_9244, align 2
  %v4_9244 = zext i16 %v3_9244 to i32
  store i32 %v4_9244, i32* %r2.global-to-local, align 4
  %v0_9248 = load i32, i32* @sl, align 4
  store i32 %v0_9248, i32* %r3.global-to-local, align 4
  %v0_924c = load i32, i32* @r5, align 4
  store i32 %v0_924c, i32* %r0.global-to-local, align 4
  %v4_9250 = call i32 @function_c898(i32 %v0_924c, i32 %v0_9240, i32 %v4_9244, i32 %v0_9248)
  %v5_9250 = trunc i32 %v4_9250 to i16
  store i32 %v4_9250, i32* %r0.global-to-local, align 4
  %v3_9254 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9254, i32* %r3.global-to-local, align 4
  %v3_9258 = mul i32 %v3_9254, 32
  store i32 %v3_9258, i32* %lr.global-to-local, align 4
  %v3_925c = load i32, i32* @r6, align 4
  %v4_925c = add i32 %v3_925c, 6
  %v5_925c = inttoptr i32 %v4_925c to i16*
  store i16 %v5_9250, i16* %v5_925c, align 2
  %v0_9260 = load i32, i32* %lr.global-to-local, align 4
  %v1_9260 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_9260, -8
  %v5_9260 = add i32 %v0_9260, %tmp63
  store i32 %v5_9260, i32* %lr.global-to-local, align 4
  %v0_9264 = load i32, i32* @r6, align 4
  %v1_9264 = add i32 %v0_9264, 2
  %v2_9264 = inttoptr i32 %v1_9264 to i16*
  %v3_9264 = load i16, i16* %v2_9264, align 2
  %v1_9268 = load i32, i32* @r8, align 4
  %v2_9268 = add i32 %v1_9268, %v5_9260
  store i32 %v2_9268, i32* @lr, align 4
  %v3_926c = add i32 %v2_9268, 2
  %v4_926c = inttoptr i32 %v3_926c to i16*
  store i16 %v3_9264, i16* %v4_926c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9278 = load i32, i32* @r5, align 4
  store i32 %v0_9278, i32* %r1.global-to-local, align 4
  %v0_927c = load i32, i32* @fp, align 4
  store i32 %v0_927c, i32* %r0.global-to-local, align 4
  %v0_9280 = load i32, i32* @sb, align 4
  store i32 %v0_9280, i32* %r2.global-to-local, align 4
  %v0_9284 = load i32, i32* @lr, align 4
  %v6_928c = call i32 @function_112b8(i32 %v0_927c, i32 %v0_9278, i32 %v0_9280, i32 16384, i32 %v0_9284, i32 16)
  %v3_9290 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9290, i32* %r3.global-to-local, align 4
  %v1_9294 = add i32 %v3_9290, 1
  store i32 %v1_9294, i32* %r0.global-to-local, align 4
  %v1_9298 = load i32, i32* @r7, align 4
  %v9_9298 = icmp eq i32 %v1_9294, %v1_9298
  store i1 %v9_9298, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9294, i32* %stack_var_-44, align 4
  %v5_92a0 = icmp slt i32 %v1_9294, %v1_9298
  br i1 %v5_92a0, label %dec_label_pc_91b8, label %dec_label_pc_92a4

dec_label_pc_92a4:                                ; preds = %dec_label_pc_9220
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92a8 = icmp eq i32 %v1_9298, 0
  store i1 %v2_92a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_92b8:                                ; preds = %dec_label_pc_91b8
  %v1_92b8 = add i32 %v2_91c0, 16
  %v2_92b8 = inttoptr i32 %v1_92b8 to i32*
  %v3_92b8 = load i32, i32* %v2_92b8, align 4
  %v0_92bc = call i32 @function_deb8()
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v3_92c0 = load i32, i32* %stack_var_-44, align 4
  %v5_92c8 = mul i32 %v3_92c0, 24
  %v1_92cc = and i32 %v3_92b8, 16711680
  store i32 %v1_92cc, i32* %ip.global-to-local, align 4
  %v3_92d0 = udiv i32 %v3_92b8, 16777216
  %v4_92d4 = udiv i32 %v1_92cc, 256
  %v5_92d4 = or i32 %v4_92d4, %v3_92d0
  store i32 %v5_92d4, i32* %r2.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r8, align 4
  %v2_92d8 = add i32 %v1_92d8, %v5_92c8
  store i32 %v2_92d8, i32* %r1.global-to-local, align 4
  %v1_92dc = and i32 %v3_92b8, 65280
  store i32 %v1_92dc, i32* %r3.global-to-local, align 4
  %v1_92e0 = add i32 %v2_92d8, 20
  %v2_92e0 = inttoptr i32 %v1_92e0 to i8*
  %v3_92e0 = load i8, i8* %v2_92e0, align 1
  %v4_92e0 = zext i8 %v3_92e0 to i32
  store i32 %v4_92e0, i32* %ip.global-to-local, align 4
  %v5_92e8 = call i32 @llvm.bswap.i32(i32 %v3_92b8)
  %v7_92ec = lshr i32 %v0_92bc, %v4_92e0
  %v8_92ec = add i32 %v7_92ec, %v5_92e8
  store i32 %v8_92ec, i32* %r2.global-to-local, align 4
  %v1_92f0 = and i32 %v8_92ec, 16711680
  store i32 %v1_92f0, i32* %r0.global-to-local, align 4
  %v1_92fc = and i32 %v8_92ec, 65280
  store i32 %v1_92fc, i32* %r1.global-to-local, align 4
  %v5_9304 = call i32 @llvm.bswap.i32(i32 %v8_92ec)
  %v1_9308 = load i32, i32* @r5, align 4
  %v2_9308 = add i32 %v1_9308, 16
  %v3_9308 = inttoptr i32 %v2_9308 to i32*
  store i32 %v5_9304, i32* %v3_9308, align 4
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_9318:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  %v0_9318 = call i32 @function_deb8()
  store i32 %v0_9318, i32* %r0.global-to-local, align 4
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  %v1_932c = load i32, i32* @r5, align 4
  %v2_932c = add i32 %v1_932c, 12
  %v3_932c = inttoptr i32 %v2_932c to i32*
  store i32 %v0_9318, i32* %v3_932c, align 4
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_9318.dec_label_pc_91fc_crit_edge

dec_label_pc_9318.dec_label_pc_91fc_crit_edge:    ; preds = %dec_label_pc_9318
  %v1_9200.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_91fc

dec_label_pc_9334:                                ; preds = %dec_label_pc_9318, %dec_label_pc_91e8
  %v0_9334 = call i32 @function_deb8()
  %v1_9334 = trunc i32 %v0_9334 to i16
  %v3_9338 = load i32, i32* @r5, align 4
  %v4_9338 = add i32 %v3_9338, 4
  %v5_9338 = inttoptr i32 %v4_9338 to i16*
  store i16 %v1_9334, i16* %v5_9338, align 2
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v1_9340 = load i32, i32* @r4, align 4
  %v9_9340 = icmp eq i32 %v3_9040, %v1_9340
  store i1 %v9_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9340, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9348:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v0_9348 = call i32 @function_deb8()
  %v1_9348 = trunc i32 %v0_9348 to i16
  store i32 %v0_9348, i32* %r0.global-to-local, align 4
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v1_9350 = load i32, i32* @r4, align 4
  %v9_9350 = icmp eq i32 %v3_9058, %v1_9350
  store i1 %v9_9350, i1* %cpsr_z.global-to-local, align 1
  %v3_9354 = load i32, i32* @r5, align 4
  %v4_9354 = add i32 %v3_9354, 20
  %v5_9354 = inttoptr i32 %v4_9354 to i16*
  store i16 %v1_9348, i16* %v5_9354, align 2
  br i1 %v9_9350, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_935c:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  %v0_935c = call i32 @function_deb8()
  %v1_935c = trunc i32 %v0_935c to i16
  store i32 %v0_935c, i32* %r0.global-to-local, align 4
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  %v3_9368 = load i32, i32* @r6, align 4
  %v4_9368 = add i32 %v3_9368, 2
  %v5_9368 = inttoptr i32 %v4_9368 to i16*
  store i16 %v1_935c, i16* %v5_9368, align 2
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9370:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c
  %v0_9370 = load i32, i32* @r5, align 4
  %v1_9370 = add i32 %v0_9370, 28
  store i32 %v1_9370, i32* %r0.global-to-local, align 4
  store i32 %v0_9088, i32* %r1.global-to-local, align 4
  %v2_9378 = inttoptr i32 %v1_9370 to i16*
  %v3_9378 = call i32 @function_e04c(i16* %v2_9378, i32 %v0_9088)
  store i32 %v3_9378, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9220

dec_label_pc_9380:                                ; preds = %dec_label_pc_8ff4
  %v0_9380 = load i32, i32* @fp, align 4
  store i32 %v0_9380, i32* %r0.global-to-local, align 4
  %v1_9384 = call i32 @function_10b64(i32 %v0_9380)
  store i32 %v1_9384, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9388

dec_label_pc_9388:                                ; preds = %dec_label_pc_8eac, %dec_label_pc_9380
  %v1_9390 = phi i32 [ %v3_8fe4, %dec_label_pc_8eac ], [ %v1_9384, %dec_label_pc_9380 ]
  store i32 %v18_8eac, i32* %sb.global-to-local, align 4
  store i32 %v27_8eac, i32* %lr.global-to-local, align 4
  ret i32 %v1_9390

; uselistorder directives
  uselistorder i32 %v0_935c, { 1, 0 }
  uselistorder i32 %v0_9348, { 1, 0 }
  uselistorder i32 %v1_9340, { 1, 0 }
  uselistorder i32 %v3_92b8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_9294, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_9260, { 1, 0 }
  uselistorder i32 %v4_9250, { 1, 0 }
  uselistorder i1 %v2_9364, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9328, { 3, 2, 0, 1 }
  uselistorder i32 %v3_90d4, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90bc, { 1, 0 }
  uselistorder i32 %v1_908c, { 1, 0, 2 }
  uselistorder i32 %v1_9088, { 1, 0, 2 }
  uselistorder i32 %v3_9060, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9048, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9040, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9038, { 1, 0, 2 }
  uselistorder i32 %v0_9088, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9028, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9014, { 1, 0 }
  uselistorder i1 %v7_8fe8, { 1, 0 }
  uselistorder i32 %v3_8fe4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_8fd0, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8fbc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f48, { 1, 0 }
  uselistorder i32 %v1_8f24, { 1, 0 }
  uselistorder i32 %v6_8f1c, { 1, 0 }
  uselistorder i32 %v7_8f04, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f00, { 1, 0 }
  uselistorder i32 %v6_8ee0, { 1, 0 }
  uselistorder i32 %v2_8ec8, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 31, 30, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 5, 4, 7, 8, 6, 10, 9, 12, 11, 13, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9388, { 1, 0 }
  uselistorder label %dec_label_pc_9370, { 1, 0 }
  uselistorder label %dec_label_pc_9220, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91b4, { 1, 0 }
  uselistorder label %dec_label_pc_91a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91a4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @function_9398(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9398:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9398 = load i32, i32* @r4, align 4
  %v6_9398 = load i32, i32* @r5, align 4
  %v24_9398 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93b4 = call i32 @function_11ea4(i32 %arg1, i32 4)
  %v0_93b8 = load i32, i32* @r5, align 4
  store i32 %v0_93b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_93c8 = load i32, i32* @r4, align 4
  store i32 %v0_93c8, i32* %r0.global-to-local, align 4
  %v5_93cc = inttoptr i32 %v0_93b8 to i32*
  %v6_93cc = call i32 @function_8570(i32 %v0_93c8, i32* %v5_93cc, i32 2, i32 0)
  %v1_93d8 = urem i32 %v6_93cc, 256
  store i32 %v1_93d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_93e4 = load i32, i32* @r5, align 4
  store i32 %v0_93e4, i32* %r1.global-to-local, align 4
  %v0_93e8 = load i32, i32* @r4, align 4
  store i32 %v0_93e8, i32* %r0.global-to-local, align 4
  %v5_93ec = trunc i32 %v6_93cc to i8
  %v6_93f0 = inttoptr i32 %v0_93e4 to i32*
  %v7_93f0 = call i32 @function_8570(i32 %v0_93e8, i32* %v6_93f0, i32 3, i32 65535)
  %v0_93f4 = load i32, i32* @r5, align 4
  store i32 %v0_93f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_93f0, i32* %fp.global-to-local, align 4
  %v0_9404 = load i32, i32* @r4, align 4
  store i32 %v0_9404, i32* %r0.global-to-local, align 4
  %v4_9408 = inttoptr i32 %v0_93f4 to i32*
  %v5_9408 = call i32 @function_8570(i32 %v0_9404, i32* %v4_9408, i32 4, i32 64)
  %v1_9410 = urem i32 %v5_9408, 256
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v0_9414 = load i32, i32* @r5, align 4
  store i32 %v0_9414, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9420 = load i32, i32* @r4, align 4
  store i32 %v0_9420, i32* %r0.global-to-local, align 4
  %v6_9428 = inttoptr i32 %v0_9414 to i32*
  %v7_9428 = call i32 @function_8570(i32 %v0_9420, i32* %v6_9428, i32 5, i32 1)
  %v1_9434 = urem i32 %v7_9428, 256
  store i32 %v1_9434, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9440 = load i32, i32* @r5, align 4
  store i32 %v0_9440, i32* %r1.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v5_944c = inttoptr i32 %v0_9440 to i32*
  %v6_944c = call i32 @function_8570(i32 %v0_9444, i32* %v5_944c, i32 6, i32 65535)
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_944c, i32* @r8, align 4
  %v0_9464 = load i32, i32* @r4, align 4
  store i32 %v0_9464, i32* %r0.global-to-local, align 4
  %v4_9468 = inttoptr i32 %v0_9454 to i32*
  %v5_9468 = call i32 @function_8570(i32 %v0_9464, i32* %v4_9468, i32 7, i32 65535)
  %v0_946c = load i32, i32* @r5, align 4
  store i32 %v0_946c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9468, i32* @r7, align 4
  %v0_947c = load i32, i32* @r4, align 4
  store i32 %v0_947c, i32* %r0.global-to-local, align 4
  %v4_9480 = inttoptr i32 %v0_946c to i32*
  %v5_9480 = call i32 @function_8570(i32 %v0_947c, i32* %v4_9480, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9490 = load i32, i32* @r5, align 4
  store i32 %v0_9490, i32* %r1.global-to-local, align 4
  %v0_9494 = load i32, i32* @r4, align 4
  store i32 %v0_9494, i32* %r0.global-to-local, align 4
  %v4_9498 = inttoptr i32 %v0_9490 to i32*
  %v5_9498 = call i32 @function_8570(i32 %v0_9494, i32* %v4_9498, i32 1, i32 1)
  %v1_94a0 = urem i32 %v5_9498, 256
  store i32 %v1_94a0, i32* %ip.global-to-local, align 4
  %v0_94a4 = load i32, i32* @r5, align 4
  store i32 %v0_94a4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94b0 = load i32, i32* @r4, align 4
  store i32 %v0_94b0, i32* %r0.global-to-local, align 4
  %v5_94b8 = inttoptr i32 %v0_94a4 to i32*
  %v6_94b8 = call i32 @function_8570(i32 %v0_94b0, i32* %v5_94b8, i32 19, i32 0)
  %v0_94c0 = load i32, i32* @r5, align 4
  store i32 %v0_94c0, i32* %r1.global-to-local, align 4
  %v2_94c4 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_94c4, i32* %r3.global-to-local, align 4
  store i32 %v6_94b8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %r0.global-to-local, align 4
  %v4_94d4 = inttoptr i32 %v0_94c0 to i32*
  %v5_94d4 = call i32 @function_8570(i32 %v0_94d0, i32* %v4_94d4, i32 25, i32 %v2_94c4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_94e8 = call i32 @function_1133c(i32 2, i32 3, i32 6)
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v7_94ec = icmp eq i32 %v3_94e8, -1
  store i1 %v7_94ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94ec, label %dec_label_pc_9a00, label %dec_label_pc_94f8

dec_label_pc_94f8:                                ; preds = %dec_label_pc_9398
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9500 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9500, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9514 = call i32 @function_112f8(i32 %v3_94e8, i32 0, i32 3, i32 %v6_9500, i32 4)
  store i32 %v5_9514, i32* %r0.global-to-local, align 4
  %v7_9518 = icmp eq i32 %v5_9514, -1
  store i1 %v7_9518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9518, label %dec_label_pc_99f8, label %dec_label_pc_9520

dec_label_pc_9520:                                ; preds = %dec_label_pc_94f8
  %v0_9520 = load i32, i32* @r8, align 4
  %v0_9524 = load i32, i32* @r7, align 4
  %v0_9528 = load i32, i32* %fp.global-to-local, align 4
  %v0_952c = load i32, i32* @r6, align 4
  %v1_952c = urem i32 %v0_952c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9534 = urem i32 %v0_9520, 65536
  store i32 %v3_9534, i32* %r3.global-to-local, align 4
  %v3_9538 = urem i32 %v0_9524, 65536
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = load i32, i32* @sl, align 4
  %v2_953c = icmp eq i32 %v0_953c, 0
  store i1 %v2_953c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9554 = urem i32 %v0_9528, 65536
  store i32 %v3_9554, i32* @fp, align 4
  br i1 %v2_953c, label %dec_label_pc_9a0c, label %dec_label_pc_9564

dec_label_pc_9564:                                ; preds = %dec_label_pc_9520
  %v3_9524 = mul i32 %v0_9524, 65536
  %v3_9520 = mul i32 %v0_9520, 65536
  %v0_9528.not = or i32 %v0_9528, -65536
  %v1_9568 = xor i32 %v0_9528.not, 65535
  %v3_956c = mul i32 %v5_9480, 65536
  %v1_9570 = add i32 %v3_956c, 4325376
  %tmp73 = udiv i32 %v1_9570, 256
  %v3_9584 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_9568, 256
  %v3_9588 = and i32 %tmp74, 65280
  store i32 %v3_9588, i32* %ip.global-to-local, align 4
  %v1_958c = add i32 %v3_956c, 524288
  %v1_9594 = add i32 %v3_956c, 1835008
  %tmp75 = udiv i32 %v1_9568, 256
  %v4_9598 = urem i32 %tmp75, 256
  %v5_9598 = or i32 %v4_9598, %v3_9588
  %v4_95a0 = udiv i32 %v1_9570, 16777216
  %v5_95a0 = or i32 %v3_9584, %v4_95a0
  store i32 %v5_95a0, i32* @r8, align 4
  %v3_95ac = udiv i32 %v1_9594, 256
  %tmp76 = mul i32 %v0_9528, 256
  %v3_95b0 = and i32 %tmp76, 65280
  store i32 %v3_9520, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9528, 256
  %v4_95c0 = urem i32 %tmp77, 256
  %v5_95c0 = or i32 %v4_95c0, %v3_95b0
  store i32 %v5_95c0, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9520, 256
  %v3_95c4 = and i32 %tmp78, 65280
  %v1_95c8 = and i32 %v3_95ac, 65280
  store i32 %v1_95c8, i32* @r6, align 4
  store i32 %v3_9524, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9524, 256
  %v3_95d4 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9520, 256
  %v4_95d8 = urem i32 %tmp80, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c4
  store i32 %v5_95d8, i32* @lr, align 4
  %v4_95dc = udiv i32 %v1_9594, 16777216
  %v5_95dc = or i32 %v1_95c8, %v4_95dc
  store i32 %v5_95dc, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9524, 256
  %v4_95e0 = urem i32 %tmp81, 256
  %v5_95e0 = or i32 %v4_95e0, %v3_95d4
  %tmp82 = udiv i32 %v1_958c, 256
  %v3_95e4 = and i32 %tmp82, 65280
  store i32 %v3_95e4, i32* @r5, align 4
  %v5_95e8 = trunc i32 %v5_95c0 to i16
  %v5_95f0 = trunc i32 %v5_95dc to i16
  %v4_95f8 = udiv i32 %v1_958c, 16777216
  %v5_95f8 = or i32 %v3_95e4, %v4_95f8
  store i32 %v5_95f8, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9654 = sext i8 %v5_93ec to i32
  %v1_9660 = trunc i32 %v5_9408 to i8
  %sext = mul nuw i32 %v5_9598, 65536
  %v4_96ec = sdiv i32 %sext, 65536
  %v2_9718 = icmp eq i32 %v1_952c, 0
  %sext8 = mul nuw i32 %v5_95d8, 65536
  %v4_9738 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_95e0, 65536
  %v4_9740 = sdiv i32 %sext9, 65536
  %v1_96f827 = trunc i32 %v4_96ec to i16
  br label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %bb85, %dec_label_pc_9564
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_960c = call i32 @function_11ea4(i32 1510, i32 4)
  store i32 %v2_960c, i32* %r0.global-to-local, align 4
  %v2_9614 = load i32, i32* @r4, align 4
  %v5_9614 = mul i32 %v2_9614, 4
  %v6_9614 = add i32 %v5_9614, %v2_93b4
  %v7_9614 = inttoptr i32 %v6_9614 to i32*
  store i32 %v2_960c, i32* %v7_9614, align 4
  %v3_9618 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9618, i32* %r2.global-to-local, align 4
  %v5_9620 = mul i32 %v3_9618, 24
  %v1_9624 = load i32, i32* @sb, align 4
  %v2_9624 = add i32 %v1_9624, %v5_9620
  store i32 %v2_9624, i32* @lr, align 4
  store i32 %v2_93b4, i32* %r3.global-to-local, align 4
  %v4_962c = mul i32 %v3_9618, 4
  %v5_962c = add i32 %v4_962c, %v2_93b4
  %v6_962c = inttoptr i32 %v5_962c to i32*
  %v7_962c = load i32, i32* %v6_962c, align 4
  store i32 %v7_962c, i32* %r4.global-to-local, align 4
  %v1_9630 = inttoptr i32 %v7_962c to i8*
  %v2_9630 = load i8, i8* %v1_9630, align 1
  %tmp = urem i8 %v2_9630, 16
  %v1_9634 = zext i8 %tmp to i32
  %v1_9638 = or i32 %v1_9634, 64
  store i32 %v1_9638, i32* %r3.global-to-local, align 4
  %v1_963c = trunc i32 %v1_9638 to i8
  store i8 %v1_963c, i8* %v1_9630, align 1
  %v0_9640 = load i32, i32* %r4.global-to-local, align 4
  %v1_9640 = inttoptr i32 %v0_9640 to i8*
  %v2_9640 = load i8, i8* %v1_9640, align 1
  %v1_9644 = and i8 %v2_9640, -16
  %v1_9648 = or i8 %v1_9644, 5
  store i32 %v1_9434, i32* %r5.global-to-local, align 4
  store i8 %v1_9648, i8* %v1_9640, align 1
  store i32 %v4_9654, i32* %r1.global-to-local, align 4
  %v2_9658 = load i32, i32* %r4.global-to-local, align 4
  %v3_9658 = add i32 %v2_9658, 1
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v5_93ec, i8* %v4_9658, align 1
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v2_9660 = load i32, i32* %r4.global-to-local, align 4
  %v3_9660 = add i32 %v2_9660, 8
  %v4_9660 = inttoptr i32 %v3_9660 to i8*
  store i8 %v1_9660, i8* %v4_9660, align 1
  %v2_9668 = load i32, i32* %r4.global-to-local, align 4
  %v3_9668 = add i32 %v2_9668, 4
  %v4_9668 = inttoptr i32 %v3_9668 to i16*
  store i16 %v5_95e8, i16* %v4_9668, align 2
  %v2_9670 = load i32, i32* %r4.global-to-local, align 4
  %v3_9670 = add i32 %v2_9670, 9
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 47, i8* %v4_9670, align 1
  store i32 %v5_94d4, i32* %r3.global-to-local, align 4
  %v0_9678 = load i32, i32* %r5.global-to-local, align 4
  %v2_9678 = icmp eq i32 %v0_9678, 0
  store i1 %v2_9678, i1* %cpsr_z.global-to-local, align 1
  %v1_967c = load i32, i32* %r4.global-to-local, align 4
  %v2_967c = add i32 %v1_967c, 12
  %v3_967c = inttoptr i32 %v2_967c to i32*
  store i32 %v5_94d4, i32* %v3_967c, align 4
  br i1 %v2_9678, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9600
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_9684 = load i32, i32* %r4.global-to-local, align 4
  %v4_9684 = add i32 %v3_9684, 6
  %v5_9684 = inttoptr i32 %v4_9684 to i16*
  store i16 64, i16* %v5_9684, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9600, %bb
  %v0_9688 = load i32, i32* @lr, align 4
  %v1_9688 = add i32 %v0_9688, 16
  %v2_9688 = inttoptr i32 %v1_9688 to i32*
  %v3_9688 = load i32, i32* %v2_9688, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_9690 = load i32, i32* %r4.global-to-local, align 4
  %v2_9690 = add i32 %v1_9690, 16
  %v3_9690 = inttoptr i32 %v2_9690 to i32*
  store i32 %v3_9688, i32* %v3_9690, align 4
  %v0_9694 = load i32, i32* %r4.global-to-local, align 4
  %v1_9694 = add i32 %v0_9694, 24
  store i32 %v1_9694, i32* %r1.global-to-local, align 4
  %v1_9698 = add i32 %v0_9694, 20
  store i32 %v1_9698, i32* %r0.global-to-local, align 4
  %v0_969c = load i32, i32* %ip.global-to-local, align 4
  %v1_969c = add i32 %v0_969c, 101
  store i32 %v1_969c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i16
  %v3_96a8 = add i32 %v0_9694, 2
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v1_96a8, i16* %v4_96a8, align 2
  %v0_96ac = load i32, i32* %ip.global-to-local, align 4
  %v1_96ac = trunc i32 %v0_96ac to i16
  %v2_96ac = load i32, i32* %r0.global-to-local, align 4
  %v3_96ac = add i32 %v2_96ac, 2
  %v4_96ac = inttoptr i32 %v3_96ac to i16*
  store i16 %v1_96ac, i16* %v4_96ac, align 2
  %v0_96b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96b0 = trunc i32 %v0_96b0 to i8
  %v2_96b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 13
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 %v1_96b0, i8* %v4_96b0, align 1
  %v0_96b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96b4 = trunc i32 %v0_96b4 to i8
  %v2_96b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b4 = add i32 %v2_96b4, 12
  %v4_96b4 = inttoptr i32 %v3_96b4 to i8*
  store i8 %v1_96b4, i8* %v4_96b4, align 1
  %v0_96b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96b8 = add i32 %v0_96b8, 38
  %v2_96b8 = inttoptr i32 %v1_96b8 to i8*
  %v3_96b8 = load i8, i8* %v2_96b8, align 1
  %tmp89 = urem i8 %v3_96b8, 16
  %v1_96bc = zext i8 %tmp89 to i32
  %v1_96c0 = or i32 %v1_96bc, 64
  store i32 %v1_96c0, i32* %r3.global-to-local, align 4
  %v1_96c4 = trunc i32 %v1_96c0 to i8
  store i8 %v1_96c4, i8* %v2_96b8, align 1
  %v0_96c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96c8 = add i32 %v0_96c8, 38
  %v2_96c8 = inttoptr i32 %v1_96c8 to i8*
  %v3_96c8 = load i8, i8* %v2_96c8, align 1
  %v1_96cc = and i8 %v3_96c8, -16
  %v1_96d0 = or i8 %v1_96cc, 5
  store i8 %v1_96d0, i8* %v2_96c8, align 1
  %v0_96dc = load i32, i32* %r4.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 38
  store i32 %v1_96dc, i32* @r5, align 4
  %v3_96e0 = add i32 %v0_96dc, 39
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v5_93ec, i8* %v4_96e0, align 1
  store i32 %v5_95dc, i32* %r2.global-to-local, align 4
  %v2_96e8 = load i32, i32* @r5, align 4
  %v3_96e8 = add i32 %v2_96e8, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v5_95f0, i16* %v4_96e8, align 2
  store i32 %v4_96ec, i32* %r3.global-to-local, align 4
  store i32 %v1_9410, i32* %r1.global-to-local, align 4
  %v0_96f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_96f4, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_96f828 = load i32, i32* @r5, align 4
  %v3_96f829 = add i32 %v2_96f828, 4
  %v4_96f830 = inttoptr i32 %v3_96f829 to i16*
  store i16 %v1_96f827, i16* %v4_96f830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 4
  %v4_96f8 = inttoptr i32 %v3_96f8 to i16*
  store i16 %v1_96f827, i16* %v4_96f8, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9700 = load i32, i32* %r2.global-to-local, align 4
  %v2_9700 = trunc i32 %v1_9700 to i16
  %v3_9700 = load i32, i32* @r5, align 4
  %v4_9700 = add i32 %v3_9700, 6
  %v5_9700 = inttoptr i32 %v4_9700 to i16*
  store i16 %v2_9700, i16* %v5_9700, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9704 = load i32, i32* %r1.global-to-local, align 4
  %v1_9704 = trunc i32 %v0_9704 to i8
  %v2_9704 = load i32, i32* @r5, align 4
  %v3_9704 = add i32 %v2_9704, 8
  %v4_9704 = inttoptr i32 %v3_9704 to i8*
  store i8 %v1_9704, i8* %v4_9704, align 1
  %v0_9708 = load i32, i32* %r3.global-to-local, align 4
  %v1_9708 = trunc i32 %v0_9708 to i8
  %v2_9708 = load i32, i32* @r5, align 4
  %v3_9708 = add i32 %v2_9708, 9
  %v4_9708 = inttoptr i32 %v3_9708 to i8*
  store i8 %v1_9708, i8* %v4_9708, align 1
  %v0_970c = call i32 @function_deb8()
  store i32 %v0_970c, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* %r1.global-to-local, align 4
  store i1 %v2_9718, i1* %cpsr_z.global-to-local, align 1
  %v1_971c = sub i32 1023, %v0_970c
  store i32 %v1_971c, i32* %r3.global-to-local, align 4
  br i1 %v2_9718, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9724 = load i32, i32* @r5, align 4
  %v3_9724 = add i32 %v2_9724, 16
  %v4_9724 = inttoptr i32 %v3_9724 to i32*
  store i32 %v1_971c, i32* %v4_9724, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9720 = load i32, i32* %r4.global-to-local, align 4
  %v2_9720 = add i32 %v1_9720, 16
  %v3_9720 = inttoptr i32 %v2_9720 to i32*
  %v4_9720 = load i32, i32* %v3_9720, align 4
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 16
  %v4_9728 = inttoptr i32 %v3_9728 to i32*
  store i32 %v4_9720, i32* %v4_9728, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_972c = load i32, i32* @r5, align 4
  %v2_972c = add i32 %v1_972c, 12
  %v3_972c = inttoptr i32 %v2_972c to i32*
  store i32 %v0_970c, i32* %v3_972c, align 4
  %v3_9730 = load i32, i32* %stack_var_-44, align 4
  %v0_9734 = load i32, i32* %r4.global-to-local, align 4
  %v1_9734 = add i32 %v0_9734, 58
  store i32 %v1_9734, i32* @r6, align 4
  store i32 %v4_9738, i32* %r2.global-to-local, align 4
  %v1_973c = add i32 %v3_9730, 1
  store i32 %v1_973c, i32* @r4, align 4
  store i32 %v4_9740, i32* %r3.global-to-local, align 4
  %v1_9744 = load i32, i32* @sl, align 4
  %v9_9744 = icmp eq i32 %v1_973c, %v1_9744
  store i1 %v9_9744, i1* %cpsr_z.global-to-local, align 1
  %v0_9748 = load i32, i32* @r7, align 4
  %v1_9748 = trunc i32 %v0_9748 to i16
  %v3_9748 = add i32 %v0_9734, 62
  %v4_9748 = inttoptr i32 %v3_9748 to i16*
  store i16 %v1_9748, i16* %v4_9748, align 2
  %v0_974c = load i32, i32* %r2.global-to-local, align 4
  %v1_974c = trunc i32 %v0_974c to i16
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = inttoptr i32 %v2_974c to i16*
  store i16 %v1_974c, i16* %v3_974c, align 2
  %v0_9750 = load i32, i32* %r3.global-to-local, align 4
  %v1_9750 = trunc i32 %v0_9750 to i16
  %v2_9750 = load i32, i32* @r6, align 4
  %v3_9750 = add i32 %v2_9750, 2
  %v4_9750 = inttoptr i32 %v3_9750 to i16*
  store i16 %v1_9750, i16* %v4_9750, align 2
  %v0_9754 = load i32, i32* @r4, align 4
  store i32 %v0_9754, i32* %stack_var_-44, align 4
  %v5_9758 = icmp slt i32 %v1_973c, %v1_9744
  br i1 %v5_9758, label %dec_label_pc_9600, label %dec_label_pc_975c

dec_label_pc_975c:                                ; preds = %bb85
  %v1_9764 = add i32 %v5_9480, 8
  store i32 %v1_9764, i32* %r4.global-to-local, align 4
  %v1_9768 = add i32 %v5_9480, 66
  store i32 %v1_9768, i32* %r5.global-to-local, align 4
  %v0_9778.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9774.preheader

dec_label_pc_9774.preheader:                      ; preds = %dec_label_pc_975c, %dec_label_pc_9a0c
  %v0_9778.pre = phi i32 [ %v0_9778.pre.pre, %dec_label_pc_975c ], [ 0, %dec_label_pc_9a0c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_9768, %dec_label_pc_975c ], [ %v1_9a18, %dec_label_pc_9a0c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_9764, %dec_label_pc_975c ], [ %v1_9a14, %dec_label_pc_9a0c ]
  %v2_99c8 = icmp eq i32 %v1_952c, 0
  %v2_9810 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9828 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9838 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9844 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9858 = icmp eq i32 %v1_94a0, 0
  %v2_97b8 = icmp eq i32 %v5_94d4, -1
  %v7_97b8 = icmp eq i32 %v5_94d4, -1
  br label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9774, %dec_label_pc_9860, %dec_label_pc_9774.preheader
  %v0_9778 = phi i32 [ %v0_9778.pre, %dec_label_pc_9774.preheader ], [ 0, %dec_label_pc_9774 ], [ %v1_98fc, %dec_label_pc_9860 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9778 = icmp eq i32 %v0_9778, 0
  store i1 %v2_9778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9778, label %dec_label_pc_9774, label %dec_label_pc_9784

dec_label_pc_9784:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9788

dec_label_pc_9788:                                ; preds = %dec_label_pc_9860, %dec_label_pc_9784
  %v1_979c = phi i32 [ %v1_98f8, %dec_label_pc_9860 ], [ 0, %dec_label_pc_9784 ]
  %v5_978c = mul i32 %v1_979c, 24
  %v1_9790 = load i32, i32* @sb, align 4
  %v2_9790 = add i32 %v1_9790, %v5_978c
  store i32 %v2_9790, i32* %r3.global-to-local, align 4
  store i32 %v2_93b4, i32* %r4.global-to-local, align 4
  %v1_9798 = add i32 %v2_9790, 20
  %v2_9798 = inttoptr i32 %v1_9798 to i8*
  %v3_9798 = load i8, i8* %v2_9798, align 1
  %v4_9798 = zext i8 %v3_9798 to i32
  store i32 %v4_9798, i32* %r2.global-to-local, align 4
  %v4_979c = mul i32 %v1_979c, 4
  %v5_979c = add i32 %v4_979c, %v2_93b4
  %v6_979c = inttoptr i32 %v5_979c to i32*
  %v7_979c = load i32, i32* %v6_979c, align 4
  store i32 %v7_979c, i32* @r5, align 4
  %v7_97a0 = icmp eq i8 %v3_9798, 31
  store i1 %v7_97a0, i1* %cpsr_z.global-to-local, align 1
  %v1_97a4 = add i32 %v7_979c, 24
  store i32 %v1_97a4, i32* @r7, align 4
  %v1_97a8 = add i32 %v7_979c, 38
  store i32 %v1_97a8, i32* @r6, align 4
  %v1_97ac = add i32 %v7_979c, 58
  store i32 %v1_97ac, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_9798, 32
  br i1 %tmp90, label %dec_label_pc_990c, label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_9788
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_97c0:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_97c8 = load i32, i32* @fp, align 4
  %v9_97c8 = icmp eq i32 %v0_97c8, 65535
  store i1 %v9_97c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97c8, label %dec_label_pc_9984, label %dec_label_pc_97d0

dec_label_pc_97d0:                                ; preds = %dec_label_pc_996c.dec_label_pc_97d0_crit_edge, %dec_label_pc_97c0
  %v1_97d4 = phi i32 [ %v1_97d4.pre, %dec_label_pc_996c.dec_label_pc_97d0_crit_edge ], [ 65535, %dec_label_pc_97c0 ]
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v9_97d4 = icmp eq i32 %v3_9534, %v1_97d4
  store i1 %v9_97d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97d4, label %dec_label_pc_99ac, label %dec_label_pc_97dc

dec_label_pc_97dc:                                ; preds = %dec_label_pc_9984.dec_label_pc_97dc_crit_edge, %dec_label_pc_97d0
  %v1_97e0 = phi i32 [ %v1_97e0.pre, %dec_label_pc_9984.dec_label_pc_97dc_crit_edge ], [ %v1_97d4, %dec_label_pc_97d0 ]
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v9_97e0 = icmp eq i32 %v3_9538, %v1_97e0
  store i1 %v9_97e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97e0, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_97e8:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %dec_label_pc_99dc, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_97e8
  %v1_97f0 = load i32, i32* @r5, align 4
  %v2_97f0 = add i32 %v1_97f0, 16
  %v3_97f0 = inttoptr i32 %v2_97f0 to i32*
  %v4_97f0 = load i32, i32* %v3_97f0, align 4
  store i32 %v4_97f0, i32* %r3.global-to-local, align 4
  %v2_97f4 = load i32, i32* @r6, align 4
  %v3_97f4 = add i32 %v2_97f4, 16
  %v4_97f4 = inttoptr i32 %v3_97f4 to i32*
  store i32 %v4_97f0, i32* %v4_97f4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_97fc:                                ; preds = %bb88, %.thread11, %dec_label_pc_99dc
  %v0_97fc = call i32 @function_deb8()
  store i32 %v0_97fc, i32* %r0.global-to-local, align 4
  store i32 %v0_97fc, i32* %stack_var_-48, align 4
  %v0_9804 = call i32 @function_deb8()
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  store i32 %v0_9804, i32* %stack_var_-52, align 4
  %v0_980c = call i32 @function_deb8()
  store i32 %v2_9810, i32* %r1.global-to-local, align 4
  store i32 %v0_980c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_981c = load i32, i32* @r7, align 4
  store i32 %v0_981c, i32* %r0.global-to-local, align 4
  %v3_9820 = call i32 @function_10114(i32 %v0_981c, i32 %v2_9810, i32 4)
  %v0_9824 = load i32, i32* @r7, align 4
  %v1_9824 = add i32 %v0_9824, 6
  store i32 %v1_9824, i32* %r0.global-to-local, align 4
  store i32 %v2_9828, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9830 = call i32 @function_10114(i32 %v1_9824, i32 %v2_9828, i32 4)
  %v0_9834 = load i32, i32* @r7, align 4
  %v1_9834 = add i32 %v0_9834, 4
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  store i32 %v2_9838, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9840 = call i32 @function_10114(i32 %v1_9834, i32 %v2_9838, i32 2)
  store i32 %v2_9844, i32* %r1.global-to-local, align 4
  %v0_9848 = load i32, i32* @r7, align 4
  %v1_9848 = add i32 %v0_9848, 10
  store i32 %v1_9848, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9850 = call i32 @function_10114(i32 %v1_9848, i32 %v2_9844, i32 2)
  store i32 %v3_9850, i32* %r0.global-to-local, align 4
  store i32 %v1_94a0, i32* %r1.global-to-local, align 4
  store i1 %v2_9858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9858, label %dec_label_pc_9860, label %dec_label_pc_99e8

dec_label_pc_9860:                                ; preds = %dec_label_pc_97fc, %dec_label_pc_99e8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9864 = load i32, i32* @r5, align 4
  %v3_9864 = add i32 %v2_9864, 10
  %v4_9864 = inttoptr i32 %v3_9864 to i16*
  store i16 0, i16* %v4_9864, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_986c = load i32, i32* @r5, align 4
  store i32 %v0_986c, i32* @r0, align 4
  %v2_9870 = call i32 @function_c848(i32 %v0_986c, i32 20)
  %v3_9870 = trunc i32 %v2_9870 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9878 = load i32, i32* @r5, align 4
  %v4_9878 = add i32 %v3_9878, 10
  %v5_9878 = inttoptr i32 %v4_9878 to i16*
  store i16 %v3_9870, i16* %v5_9878, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9880 = load i32, i32* %r3.global-to-local, align 4
  %v1_9880 = trunc i32 %v0_9880 to i16
  %v2_9880 = load i32, i32* @r6, align 4
  %v3_9880 = add i32 %v2_9880, 10
  %v4_9880 = inttoptr i32 %v3_9880 to i16*
  store i16 %v1_9880, i16* %v4_9880, align 2
  %v0_9884 = load i32, i32* @r6, align 4
  store i32 %v0_9884, i32* @r0, align 4
  %v2_9888 = call i32 @function_c848(i32 %v0_9884, i32 20)
  %v3_9888 = trunc i32 %v2_9888 to i16
  store i32 %v2_9888, i32* %r0.global-to-local, align 4
  %v3_988c = load i32, i32* @r6, align 4
  %v4_988c = add i32 %v3_988c, 10
  %v5_988c = inttoptr i32 %v4_988c to i16*
  store i16 %v3_9888, i16* %v5_988c, align 2
  store i32 0, i32* @r4, align 4
  %v0_9894 = load i32, i32* @r8, align 4
  store i32 %v0_9894, i32* @r1, align 4
  %v1_9898 = add i32 %v0_9894, 4
  %v2_9898 = inttoptr i32 %v1_9898 to i16*
  %v3_9898 = load i16, i16* %v2_9898, align 2
  %v4_9898 = zext i16 %v3_9898 to i32
  store i32 %v4_9898, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98a0 = add i32 %v0_9894, 6
  %v4_98a0 = inttoptr i32 %v3_98a0 to i16*
  store i16 0, i16* %v4_98a0, align 2
  %v0_98a4 = load i32, i32* @r6, align 4
  store i32 %v0_98a4, i32* %r0.global-to-local, align 4
  %v4_98a8 = call i32 @function_c898(i32 %v0_98a4, i32 %v0_9894, i32 %v4_9898, i32 %stack_var_-136.0.ph)
  %v5_98a8 = trunc i32 %v4_98a8 to i16
  store i32 %v4_98a8, i32* %r0.global-to-local, align 4
  %v3_98ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ac, i32* %r2.global-to-local, align 4
  %v3_98b0 = mul i32 %v3_98ac, 32
  store i32 %v3_98b0, i32* %r3.global-to-local, align 4
  %v0_98b4 = load i32, i32* @r5, align 4
  %v1_98b4 = add i32 %v0_98b4, 16
  %v2_98b4 = inttoptr i32 %v1_98b4 to i32*
  %v3_98b4 = load i32, i32* %v2_98b4, align 4
  %v5_98b8 = mul i32 %v3_98ac, 24
  store i32 %v5_98b8, i32* %r3.global-to-local, align 4
  %v1_98bc = load i32, i32* @sb, align 4
  %v2_98bc = add i32 %v1_98bc, %v5_98b8
  store i32 %v2_98bc, i32* @lr, align 4
  %v2_98c0 = add i32 %v2_98bc, 4
  %v3_98c0 = inttoptr i32 %v2_98c0 to i32*
  store i32 %v3_98b4, i32* %v3_98c0, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_98c8 = load i32, i32* @r8, align 4
  %v4_98c8 = add i32 %v3_98c8, 6
  %v5_98c8 = inttoptr i32 %v4_98c8 to i16*
  store i16 %v5_98a8, i16* %v5_98c8, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_98d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_98d0 = trunc i32 %v0_98d0 to i16
  %v2_98d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_98d0 = load i32, i32* @sb, align 4
  %v4_98d0 = add i32 %v3_98d0, %v2_98d0
  %v5_98d0 = inttoptr i32 %v4_98d0 to i16*
  store i16 %v1_98d0, i16* %v5_98d0, align 2
  %v0_98d4 = load i32, i32* @r4, align 4
  %v1_98d4 = trunc i32 %v0_98d4 to i16
  %v2_98d4 = load i32, i32* @lr, align 4
  %v3_98d4 = add i32 %v2_98d4, 2
  %v4_98d4 = inttoptr i32 %v3_98d4 to i16*
  store i16 %v1_98d4, i16* %v4_98d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_98dc = load i32, i32* @r5, align 4
  store i32 %v0_98dc, i32* %r1.global-to-local, align 4
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_98e8 = load i32, i32* @lr, align 4
  %v0_98ec = load i32, i32* %ip.global-to-local, align 4
  %v6_98f0 = call i32 @function_112b8(i32 %v3_94e8, i32 %v0_98dc, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_98e8, i32 %v0_98ec)
  %v3_98f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98f4, i32* %r3.global-to-local, align 4
  %v1_98f8 = add i32 %v3_98f4, 1
  store i32 %v1_98f8, i32* %r0.global-to-local, align 4
  %v1_98fc = load i32, i32* @sl, align 4
  %v9_98fc = icmp eq i32 %v1_98f8, %v1_98fc
  store i1 %v9_98fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_98f8, i32* %stack_var_-44, align 4
  %v6_9904 = icmp slt i32 %v1_98f8, %v1_98fc
  br i1 %v6_9904, label %dec_label_pc_9788, label %dec_label_pc_9774

dec_label_pc_990c:                                ; preds = %dec_label_pc_9788
  %v1_990c = add i32 %v2_9790, 16
  %v2_990c = inttoptr i32 %v1_990c to i32*
  %v3_990c = load i32, i32* %v2_990c, align 4
  store i32 %v3_990c, i32* %r4.global-to-local, align 4
  %v0_9910 = call i32 @function_deb8()
  store i32 %v0_9910, i32* %r0.global-to-local, align 4
  %v3_9914 = load i32, i32* %stack_var_-44, align 4
  %v5_991c = mul i32 %v3_9914, 24
  %v0_9920 = load i32, i32* %r4.global-to-local, align 4
  %v1_9920 = and i32 %v0_9920, 16711680
  store i32 %v1_9920, i32* %ip.global-to-local, align 4
  %v3_9924 = udiv i32 %v0_9920, 16777216
  %v4_9928 = udiv i32 %v1_9920, 256
  %v5_9928 = or i32 %v4_9928, %v3_9924
  store i32 %v5_9928, i32* %r2.global-to-local, align 4
  %v1_992c = load i32, i32* @sb, align 4
  %v2_992c = add i32 %v1_992c, %v5_991c
  store i32 %v2_992c, i32* %r1.global-to-local, align 4
  %v1_9930 = and i32 %v0_9920, 65280
  store i32 %v1_9930, i32* %r3.global-to-local, align 4
  %v1_9934 = add i32 %v2_992c, 20
  %v2_9934 = inttoptr i32 %v1_9934 to i8*
  %v3_9934 = load i8, i8* %v2_9934, align 1
  %v4_9934 = zext i8 %v3_9934 to i32
  store i32 %v4_9934, i32* %ip.global-to-local, align 4
  %v5_993c = call i32 @llvm.bswap.i32(i32 %v0_9920)
  %v7_9940 = lshr i32 %v0_9910, %v4_9934
  %v8_9940 = add i32 %v7_9940, %v5_993c
  store i32 %v8_9940, i32* %r2.global-to-local, align 4
  %v1_9944 = and i32 %v8_9940, 16711680
  store i32 %v1_9944, i32* %r0.global-to-local, align 4
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  %v5_995c = call i32 @llvm.bswap.i32(i32 %v8_9940)
  store i32 %v5_995c, i32* %r3.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  %v1_9964 = load i32, i32* @r5, align 4
  %v2_9964 = add i32 %v1_9964, 16
  %v3_9964 = inttoptr i32 %v2_9964 to i32*
  store i32 %v5_995c, i32* %v3_9964, align 4
  br i1 %v2_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_996c:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  %v0_996c = call i32 @function_deb8()
  store i32 %v0_996c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9978 = load i32, i32* @fp, align 4
  %v9_9978 = icmp eq i32 %v0_9978, 65535
  store i1 %v9_9978, i1* %cpsr_z.global-to-local, align 1
  %v1_997c = load i32, i32* @r5, align 4
  %v2_997c = add i32 %v1_997c, 12
  %v3_997c = inttoptr i32 %v2_997c to i32*
  store i32 %v0_996c, i32* %v3_997c, align 4
  br i1 %v9_9978, label %dec_label_pc_9984, label %dec_label_pc_996c.dec_label_pc_97d0_crit_edge

dec_label_pc_996c.dec_label_pc_97d0_crit_edge:    ; preds = %dec_label_pc_996c
  %v1_97d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97d0

dec_label_pc_9984:                                ; preds = %dec_label_pc_996c, %dec_label_pc_97c0
  %v0_9984 = call i32 @function_deb8()
  %v3_998c = urem i32 %v0_9984, 65536
  store i32 %v3_998c, i32* %r0.global-to-local, align 4
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v1_9998 = sub nsw i32 999, %v3_998c
  store i32 %v1_9998, i32* %r3.global-to-local, align 4
  %v1_999c = load i32, i32* %r4.global-to-local, align 4
  %v9_999c = icmp eq i32 %v3_9534, %v1_999c
  store i1 %v9_999c, i1* %cpsr_z.global-to-local, align 1
  %v1_99a0 = trunc i32 %v0_9984 to i16
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 4
  %v4_99a0 = inttoptr i32 %v3_99a0 to i16*
  store i16 %v1_99a0, i16* %v4_99a0, align 2
  %v0_99a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i16
  %v2_99a4 = load i32, i32* @r6, align 4
  %v3_99a4 = add i32 %v2_99a4, 4
  %v4_99a4 = inttoptr i32 %v3_99a4 to i16*
  store i16 %v1_99a4, i16* %v4_99a4, align 2
  br i1 %v9_999c, label %dec_label_pc_99ac, label %dec_label_pc_9984.dec_label_pc_97dc_crit_edge

dec_label_pc_9984.dec_label_pc_97dc_crit_edge:    ; preds = %dec_label_pc_9984
  %v1_97e0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97dc

dec_label_pc_99ac:                                ; preds = %dec_label_pc_9984, %dec_label_pc_97d0
  %v0_99ac = call i32 @function_deb8()
  %v1_99ac = trunc i32 %v0_99ac to i16
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_99b4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99b4 = icmp eq i32 %v3_9538, %v1_99b4
  store i1 %v9_99b4, i1* %cpsr_z.global-to-local, align 1
  %v3_99b8 = load i32, i32* @r5, align 4
  %v4_99b8 = add i32 %v3_99b8, 58
  %v5_99b8 = inttoptr i32 %v4_99b8 to i16*
  store i16 %v1_99ac, i16* %v5_99b8, align 2
  br i1 %v9_99b4, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  %v0_99c0 = call i32 @function_deb8()
  %v1_99c0 = trunc i32 %v0_99c0 to i16
  store i32 %v0_99c0, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_99c0
  %v3_99d032 = load i32, i32* @r8, align 4
  %v4_99d033 = add i32 %v3_99d032, 2
  %v5_99d034 = inttoptr i32 %v4_99d033 to i16*
  store i16 %v1_99c0, i16* %v5_99d034, align 2
  br label %dec_label_pc_99dc

bb88:                                             ; preds = %dec_label_pc_99c0
  %v1_99cc = load i32, i32* @r5, align 4
  %v2_99cc = add i32 %v1_99cc, 16
  %v3_99cc = inttoptr i32 %v2_99cc to i32*
  %v4_99cc = load i32, i32* %v3_99cc, align 4
  store i32 %v4_99cc, i32* %r3.global-to-local, align 4
  %v3_99d0 = load i32, i32* @r8, align 4
  %v4_99d0 = add i32 %v3_99d0, 2
  %v5_99d0 = inttoptr i32 %v4_99d0 to i16*
  store i16 %v1_99c0, i16* %v5_99d0, align 2
  %v1_99d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_99d4 = load i32, i32* @r6, align 4
  %v3_99d4 = add i32 %v2_99d4, 16
  %v4_99d4 = inttoptr i32 %v3_99d4 to i32*
  store i32 %v1_99d4, i32* %v4_99d4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99dc:                                ; preds = %.thread31, %dec_label_pc_97e8
  %v0_99dc = call i32 @function_deb8()
  store i32 %v0_99dc, i32* %r0.global-to-local, align 4
  %v1_99e0 = load i32, i32* @r6, align 4
  %v2_99e0 = add i32 %v1_99e0, 16
  %v3_99e0 = inttoptr i32 %v2_99e0 to i32*
  store i32 %v0_99dc, i32* %v3_99e0, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99e8:                                ; preds = %dec_label_pc_97fc
  %v0_99e8 = load i32, i32* @r8, align 4
  %v1_99e8 = add i32 %v0_99e8, 8
  store i32 %v1_99e8, i32* %r0.global-to-local, align 4
  store i32 %v5_9480, i32* %r1.global-to-local, align 4
  %v2_99f0 = inttoptr i32 %v1_99e8 to i16*
  %v3_99f0 = call i32 @function_e04c(i16* %v2_99f0, i32 %v5_9480)
  store i32 %v3_99f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9860

dec_label_pc_99f8:                                ; preds = %dec_label_pc_94f8
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v1_99fc = call i32 @function_10b64(i32 %v3_94e8)
  store i32 %v1_99fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a00

dec_label_pc_9a00:                                ; preds = %dec_label_pc_9398, %dec_label_pc_99f8
  %v1_9a08 = phi i32 [ %v3_94e8, %dec_label_pc_9398 ], [ %v1_99fc, %dec_label_pc_99f8 ]
  store i32 %v3_9398, i32* %r4.global-to-local, align 4
  store i32 %v6_9398, i32* %r5.global-to-local, align 4
  store i32 %v24_9398, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a08

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_9520
  %v1_9a14 = add i32 %v5_9480, 8
  store i32 %v1_9a14, i32* %r1.global-to-local, align 4
  %v1_9a18 = add i32 %v5_9480, 66
  store i32 %v1_9a18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9774.preheader

; uselistorder directives
  uselistorder i32 %v1_9a18, { 1, 0 }
  uselistorder i32 %v1_9a14, { 1, 0 }
  uselistorder i16 %v1_99c0, { 1, 0 }
  uselistorder i32 %v0_99c0, { 1, 0 }
  uselistorder i32 %v0_99ac, { 1, 0 }
  uselistorder i32 %v3_998c, { 1, 0 }
  uselistorder i32 %v0_9984, { 1, 0 }
  uselistorder i32 %v5_995c, { 1, 0 }
  uselistorder i32 %v0_9920, { 1, 2, 0, 3 }
  uselistorder i32 %v1_98fc, { 1, 2, 0 }
  uselistorder i32 %v1_98f8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ac, { 1, 0, 2 }
  uselistorder i32 %v4_98a8, { 1, 0 }
  uselistorder i32 %v0_9894, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9888, { 1, 0 }
  uselistorder i32 %v7_979c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97b8, { 2, 1, 0 }
  uselistorder i1 %v2_99c8, { 2, 3, 1, 0 }
  uselistorder i32 %v0_970c, { 1, 0, 2 }
  uselistorder i32 %v3_9588, { 1, 0 }
  uselistorder i32 %v3_956c, { 1, 2, 0 }
  uselistorder i32 %v1_9568, { 1, 0 }
  uselistorder i32 %v1_952c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9528, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9524, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9520, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9518, { 1, 0 }
  uselistorder i1 %v7_94ec, { 1, 0 }
  uselistorder i32 %v3_94e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_94d4, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94a0, { 1, 2, 0 }
  uselistorder i32 %v5_9480, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9434, { 1, 0 }
  uselistorder i32 %v1_9410, { 2, 1, 0 }
  uselistorder i32 %v5_9408, { 1, 0 }
  uselistorder i8 %v5_93ec, { 0, 2, 1 }
  uselistorder i32 %v6_93cc, { 1, 0 }
  uselistorder i32 %v2_93b4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a00, { 1, 0 }
  uselistorder label %dec_label_pc_9860, { 1, 0 }
  uselistorder label %dec_label_pc_97fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9774, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9774.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_9a2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9a2c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a2c = load i32, i32* @r4, align 4
  %v6_9a2c = load i32, i32* @r5, align 4
  %v24_9a2c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a48 = call i32 @function_11ea4(i32 %arg1, i32 4)
  %v0_9a4c = load i32, i32* @r5, align 4
  store i32 %v0_9a4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a5c = load i32, i32* @r4, align 4
  %v5_9a60 = inttoptr i32 %v0_9a4c to i32*
  %v6_9a60 = call i32 @function_8570(i32 %v0_9a5c, i32* %v5_9a60, i32 2, i32 0)
  %v1_9a6c = urem i32 %v6_9a60, 256
  store i32 %v1_9a6c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9a78 = load i32, i32* @r5, align 4
  store i32 %v0_9a78, i32* %r1.global-to-local, align 4
  %v0_9a7c = load i32, i32* @r4, align 4
  %v5_9a80 = trunc i32 %v6_9a60 to i8
  %v6_9a84 = inttoptr i32 %v0_9a78 to i32*
  %v7_9a84 = call i32 @function_8570(i32 %v0_9a7c, i32* %v6_9a84, i32 3, i32 65535)
  %v0_9a88 = load i32, i32* @r5, align 4
  store i32 %v0_9a88, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9a84, i32* %fp.global-to-local, align 4
  %v0_9a98 = load i32, i32* @r4, align 4
  %v4_9a9c = inttoptr i32 %v0_9a88 to i32*
  %v5_9a9c = call i32 @function_8570(i32 %v0_9a98, i32* %v4_9a9c, i32 4, i32 64)
  %v1_9aa4 = urem i32 %v5_9a9c, 256
  store i32 %v1_9aa4, i32* %ip.global-to-local, align 4
  %v0_9aa8 = load i32, i32* @r5, align 4
  store i32 %v0_9aa8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ab4 = load i32, i32* @r4, align 4
  %v6_9abc = inttoptr i32 %v0_9aa8 to i32*
  %v7_9abc = call i32 @function_8570(i32 %v0_9ab4, i32* %v6_9abc, i32 5, i32 1)
  %v1_9ac8 = urem i32 %v7_9abc, 256
  store i32 %v1_9ac8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9ad4 = load i32, i32* @r5, align 4
  store i32 %v0_9ad4, i32* %r1.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v5_9ae0 = inttoptr i32 %v0_9ad4 to i32*
  %v6_9ae0 = call i32 @function_8570(i32 %v0_9ad8, i32* %v5_9ae0, i32 6, i32 65535)
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9ae0, i32* @r8, align 4
  %v0_9af8 = load i32, i32* @r4, align 4
  %v4_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v5_9afc = call i32 @function_8570(i32 %v0_9af8, i32* %v4_9afc, i32 7, i32 65535)
  %v0_9b00 = load i32, i32* @r5, align 4
  store i32 %v0_9b00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9afc, i32* @r7, align 4
  %v0_9b10 = load i32, i32* @r4, align 4
  %v4_9b14 = inttoptr i32 %v0_9b00 to i32*
  %v5_9b14 = call i32 @function_8570(i32 %v0_9b10, i32* %v4_9b14, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @r5, align 4
  store i32 %v0_9b24, i32* %r1.global-to-local, align 4
  %v0_9b28 = load i32, i32* @r4, align 4
  %v4_9b2c = inttoptr i32 %v0_9b24 to i32*
  %v5_9b2c = call i32 @function_8570(i32 %v0_9b28, i32* %v4_9b2c, i32 1, i32 1)
  %v1_9b34 = urem i32 %v5_9b2c, 256
  store i32 %v1_9b34, i32* %ip.global-to-local, align 4
  %v0_9b38 = load i32, i32* @r5, align 4
  store i32 %v0_9b38, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b44 = load i32, i32* @r4, align 4
  %v5_9b4c = inttoptr i32 %v0_9b38 to i32*
  %v6_9b4c = call i32 @function_8570(i32 %v0_9b44, i32* %v5_9b4c, i32 19, i32 0)
  %v0_9b54 = load i32, i32* @r5, align 4
  store i32 %v0_9b54, i32* %r1.global-to-local, align 4
  %v2_9b58 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_9b58, i32* %r3.global-to-local, align 4
  store i32 %v6_9b4c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r4, align 4
  %v4_9b68 = inttoptr i32 %v0_9b54 to i32*
  %v5_9b68 = call i32 @function_8570(i32 %v0_9b64, i32* %v4_9b68, i32 25, i32 %v2_9b58)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9b7c = call i32 @function_1133c(i32 2, i32 3, i32 6)
  %v7_9b80 = icmp eq i32 %v3_9b7c, -1
  store i1 %v7_9b80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b80, label %dec_label_pc_a020, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9a2c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9b94 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9b94, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9ba8 = call i32 @function_112f8(i32 %v3_9b7c, i32 0, i32 3, i32 %v6_9b94, i32 4)
  %v7_9bac = icmp eq i32 %v5_9ba8, -1
  store i1 %v7_9bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bac, label %dec_label_pc_a018, label %dec_label_pc_9bb4

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9b8c
  %v0_9bb4 = load i32, i32* @r8, align 4
  %v0_9bb8 = load i32, i32* @r7, align 4
  %v0_9bbc = load i32, i32* %fp.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @r6, align 4
  %v1_9bc0 = urem i32 %v0_9bc0, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9bc8 = urem i32 %v0_9bb4, 65536
  store i32 %v3_9bc8, i32* %r3.global-to-local, align 4
  %v3_9bcc = urem i32 %v0_9bb8, 65536
  store i32 %v3_9bcc, i32* %r4.global-to-local, align 4
  %v0_9bd0 = load i32, i32* @sl, align 4
  %v2_9bd0 = icmp eq i32 %v0_9bd0, 0
  store i1 %v2_9bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9be8 = urem i32 %v0_9bbc, 65536
  store i32 %v3_9be8, i32* @fp, align 4
  br i1 %v2_9bd0, label %dec_label_pc_a02c, label %dec_label_pc_9bf8

dec_label_pc_9bf8:                                ; preds = %dec_label_pc_9bb4
  %v3_9bb8 = mul i32 %v0_9bb8, 65536
  %v3_9bb4 = mul i32 %v0_9bb4, 65536
  %v0_9bbc.not = or i32 %v0_9bbc, -65536
  %v1_9bfc = xor i32 %v0_9bbc.not, 65535
  %v3_9c00 = mul i32 %v5_9b14, 65536
  %v1_9c04 = add i32 %v3_9c00, 3407872
  %tmp67 = udiv i32 %v1_9c04, 256
  %v3_9c18 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9bfc, 256
  %v3_9c1c = and i32 %tmp68, 65280
  store i32 %v3_9c1c, i32* %ip.global-to-local, align 4
  %v1_9c20 = add i32 %v3_9c00, 524288
  %v1_9c28 = add i32 %v3_9c00, 1835008
  %tmp69 = udiv i32 %v1_9bfc, 256
  %v4_9c2c = urem i32 %tmp69, 256
  %v5_9c2c = or i32 %v4_9c2c, %v3_9c1c
  %v4_9c34 = udiv i32 %v1_9c04, 16777216
  %v5_9c34 = or i32 %v3_9c18, %v4_9c34
  store i32 %v5_9c34, i32* @r8, align 4
  %v3_9c40 = udiv i32 %v1_9c28, 256
  %tmp70 = mul i32 %v0_9bbc, 256
  %v3_9c44 = and i32 %tmp70, 65280
  store i32 %v3_9bb4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bbc, 256
  %v4_9c54 = urem i32 %tmp71, 256
  %v5_9c54 = or i32 %v4_9c54, %v3_9c44
  %tmp72 = mul i32 %v0_9bb4, 256
  %v3_9c58 = and i32 %tmp72, 65280
  %v1_9c5c = and i32 %v3_9c40, 65280
  store i32 %v1_9c5c, i32* @r6, align 4
  store i32 %v3_9bb8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bb8, 256
  %v3_9c68 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bb4, 256
  %v4_9c6c = urem i32 %tmp74, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c58
  store i32 %v5_9c6c, i32* @lr, align 4
  %v4_9c70 = udiv i32 %v1_9c28, 16777216
  %v5_9c70 = or i32 %v1_9c5c, %v4_9c70
  store i32 %v5_9c70, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bb8, 256
  %v4_9c74 = urem i32 %tmp75, 256
  %v5_9c74 = or i32 %v4_9c74, %v3_9c68
  %tmp76 = udiv i32 %v1_9c20, 256
  %v3_9c78 = and i32 %tmp76, 65280
  store i32 %v3_9c78, i32* @r5, align 4
  %v4_9c8c = udiv i32 %v1_9c20, 16777216
  %v5_9c8c = or i32 %v3_9c78, %v4_9c8c
  store i32 %v5_9c8c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9ce0 = sext i8 %v5_9a80 to i32
  %sext12 = mul nuw i32 %v5_9c54, 65536
  %v4_9cf813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9c70, 65536
  %v4_9d5c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c2c, 65536
  %v4_9d60 = sdiv i32 %sext9, 65536
  %v1_9d68 = trunc i32 %v4_9d5c to i16
  %v2_9d90 = icmp eq i32 %v1_9bc0, 0
  %sext10 = mul nuw i32 %v5_9c6c, 65536
  %v4_9db0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9c74, 65536
  %v4_9db8 = sdiv i32 %sext11, 65536
  %v1_9cf0 = trunc i32 %v5_9a9c to i8
  br label %dec_label_pc_9c94

dec_label_pc_9c94:                                ; preds = %bb82, %dec_label_pc_9bf8
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ca0 = call i32 @function_11ea4(i32 1510, i32 4)
  store i32 %v2_9a48, i32* %r2.global-to-local, align 4
  %v3_9ca8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ca8, i32* %r3.global-to-local, align 4
  %v2_9cac = load i32, i32* @r4, align 4
  %v5_9cac = mul i32 %v2_9cac, 4
  %v6_9cac = add i32 %v5_9cac, %v2_9a48
  %v7_9cac = inttoptr i32 %v6_9cac to i32*
  store i32 %v2_9ca0, i32* %v7_9cac, align 4
  %v0_9cb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cb0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cb0 = mul i32 %v1_9cb0, 4
  %v5_9cb0 = add i32 %v4_9cb0, %v0_9cb0
  %v6_9cb0 = inttoptr i32 %v5_9cb0 to i32*
  %v7_9cb0 = load i32, i32* %v6_9cb0, align 4
  store i32 %v7_9cb0, i32* %r4.global-to-local, align 4
  %v1_9cb4 = inttoptr i32 %v7_9cb0 to i8*
  %v2_9cb4 = load i8, i8* %v1_9cb4, align 1
  %tmp = urem i8 %v2_9cb4, 16
  %v1_9cb8 = zext i8 %tmp to i32
  %v1_9cbc = or i32 %v1_9cb8, 64
  store i32 %v1_9cbc, i32* %r2.global-to-local, align 4
  %v1_9cc0 = trunc i32 %v1_9cbc to i8
  store i8 %v1_9cc0, i8* %v1_9cb4, align 1
  %v0_9cc4 = load i32, i32* %r3.global-to-local, align 4
  %v5_9cc8 = mul i32 %v0_9cc4, 24
  store i32 %v5_9cc8, i32* %r1.global-to-local, align 4
  %v0_9ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_9ccc = inttoptr i32 %v0_9ccc to i8*
  %v2_9ccc = load i8, i8* %v1_9ccc, align 1
  %v1_9cd0 = and i8 %v2_9ccc, -16
  %v1_9cd4 = or i8 %v1_9cd0, 5
  store i32 %v1_9ac8, i32* %r5.global-to-local, align 4
  store i8 %v1_9cd4, i8* %v1_9ccc, align 1
  store i32 %v4_9ce0, i32* %r2.global-to-local, align 4
  %v2_9ce4 = load i32, i32* %r4.global-to-local, align 4
  %v3_9ce4 = add i32 %v2_9ce4, 1
  %v4_9ce4 = inttoptr i32 %v3_9ce4 to i8*
  store i8 %v5_9a80, i8* %v4_9ce4, align 1
  store i32 %v1_9aa4, i32* %r3.global-to-local, align 4
  %v0_9cec = load i32, i32* %r5.global-to-local, align 4
  %v2_9cec = icmp eq i32 %v0_9cec, 0
  store i1 %v2_9cec, i1* %cpsr_z.global-to-local, align 1
  %v2_9cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_9cf0 = add i32 %v2_9cf0, 8
  %v4_9cf0 = inttoptr i32 %v3_9cf0 to i8*
  store i8 %v1_9cf0, i8* %v4_9cf0, align 1
  %v0_9cf4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9cf4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9c94
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9c94
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  %v3_9cfc = load i32, i32* %r4.global-to-local, align 4
  %v4_9cfc = add i32 %v3_9cfc, 6
  %v5_9cfc = inttoptr i32 %v4_9cfc to i16*
  store i16 64, i16* %v5_9cfc, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d04 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d04 = add i32 %v2_9d04, 9
  %v4_9d04 = inttoptr i32 %v3_9d04 to i8*
  store i8 47, i8* %v4_9d04, align 1
  %v0_9d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d08 = add i32 %v0_9d08, 20
  store i32 %v1_9d08, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d10 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d10 = trunc i32 %v0_9d10 to i16
  %v3_9d10 = add i32 %v0_9d08, 4
  %v4_9d10 = inttoptr i32 %v3_9d10 to i16*
  store i16 %v1_9d10, i16* %v4_9d10, align 2
  %v0_9d14 = load i32, i32* @r8, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i16
  %v2_9d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d14 = add i32 %v2_9d14, 2
  %v4_9d14 = inttoptr i32 %v3_9d14 to i16*
  store i16 %v1_9d14, i16* %v4_9d14, align 2
  %v0_9d18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d18 = trunc i32 %v0_9d18 to i16
  %v2_9d18 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d18 = add i32 %v2_9d18, 2
  %v4_9d18 = inttoptr i32 %v3_9d18 to i16*
  store i16 %v1_9d18, i16* %v4_9d18, align 2
  store i32 %v5_9b68, i32* %r3.global-to-local, align 4
  %v0_9d20 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d20 = add i32 %v0_9d20, 24
  %v2_9d20 = inttoptr i32 %v1_9d20 to i8*
  %v3_9d20 = load i8, i8* %v2_9d20, align 1
  %v4_9d20 = zext i8 %v3_9d20 to i32
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = add i32 %v0_9d20, 12
  %v3_9d24 = inttoptr i32 %v2_9d24 to i32*
  store i32 %v5_9b68, i32* %v3_9d24, align 4
  %v0_9d28 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d28 = and i32 %v0_9d28, -241
  %v1_9d2c = or i32 %v1_9d28, 64
  store i32 %v1_9d2c, i32* %r2.global-to-local, align 4
  %v0_9d30 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d30 = load i32, i32* @sb, align 4
  %v2_9d30 = add i32 %v1_9d30, %v0_9d30
  store i32 %v2_9d30, i32* %r1.global-to-local, align 4
  %v1_9d34 = add i32 %v2_9d30, 16
  %v2_9d34 = inttoptr i32 %v1_9d34 to i32*
  %v3_9d34 = load i32, i32* %v2_9d34, align 4
  store i32 %v3_9d34, i32* %r1.global-to-local, align 4
  %v1_9d38 = trunc i32 %v1_9d2c to i8
  %v2_9d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d38 = add i32 %v2_9d38, 24
  %v4_9d38 = inttoptr i32 %v3_9d38 to i8*
  store i8 %v1_9d38, i8* %v4_9d38, align 1
  %v0_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d3c, 24
  %v2_9d3c = inttoptr i32 %v1_9d3c to i8*
  %v3_9d3c = load i8, i8* %v2_9d3c, align 1
  %v1_9d40 = and i8 %v3_9d3c, -16
  %v1_9d44 = or i8 %v1_9d40, 5
  store i8 %v1_9d44, i8* %v2_9d3c, align 1
  %v0_9d4c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d4c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d4c = add i32 %v1_9d4c, 16
  %v3_9d4c = inttoptr i32 %v2_9d4c to i32*
  store i32 %v0_9d4c, i32* %v3_9d4c, align 4
  %v0_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d54 = add i32 %v0_9d54, 24
  store i32 %v1_9d54, i32* @r5, align 4
  %v3_9d58 = add i32 %v0_9d54, 25
  %v4_9d58 = inttoptr i32 %v3_9d58 to i8*
  store i8 %v5_9a80, i8* %v4_9d58, align 1
  store i32 %v4_9d5c, i32* %r2.global-to-local, align 4
  store i32 %v4_9d60, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r1.global-to-local, align 4
  %v2_9d68 = load i32, i32* @r5, align 4
  %v3_9d68 = add i32 %v2_9d68, 2
  %v4_9d68 = inttoptr i32 %v3_9d68 to i16*
  store i16 %v1_9d68, i16* %v4_9d68, align 2
  %v0_9d6c = load i32, i32* %r3.global-to-local, align 4
  %v1_9d6c = trunc i32 %v0_9d6c to i16
  %v2_9d6c = load i32, i32* @r5, align 4
  %v3_9d6c = add i32 %v2_9d6c, 4
  %v4_9d6c = inttoptr i32 %v3_9d6c to i16*
  store i16 %v1_9d6c, i16* %v4_9d6c, align 2
  %v0_9d70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d70, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9d78 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v0_9d78 to i8
  %v2_9d78 = load i32, i32* @r5, align 4
  %v3_9d78 = add i32 %v2_9d78, 8
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d7c, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9d7c = load i32, i32* %r2.global-to-local, align 4
  %v2_9d7c = trunc i32 %v1_9d7c to i16
  %v3_9d7c = load i32, i32* @r5, align 4
  %v4_9d7c = add i32 %v3_9d7c, 6
  %v5_9d7c = inttoptr i32 %v4_9d7c to i16*
  store i16 %v2_9d7c, i16* %v5_9d7c, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9d80 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d80 = trunc i32 %v0_9d80 to i8
  %v2_9d80 = load i32, i32* @r5, align 4
  %v3_9d80 = add i32 %v2_9d80, 9
  %v4_9d80 = inttoptr i32 %v3_9d80 to i8*
  store i8 %v1_9d80, i8* %v4_9d80, align 1
  %v0_9d84 = call i32 @function_deb8()
  store i32 %v1_9bc0, i32* %r1.global-to-local, align 4
  store i1 %v2_9d90, i1* %cpsr_z.global-to-local, align 1
  %v1_9d94 = sub i32 1023, %v0_9d84
  store i32 %v1_9d94, i32* %r3.global-to-local, align 4
  br i1 %v2_9d90, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9d9c = load i32, i32* @r5, align 4
  %v3_9d9c = add i32 %v2_9d9c, 16
  %v4_9d9c = inttoptr i32 %v3_9d9c to i32*
  store i32 %v1_9d94, i32* %v4_9d9c, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9d98 = load i32, i32* %r4.global-to-local, align 4
  %v2_9d98 = add i32 %v1_9d98, 16
  %v3_9d98 = inttoptr i32 %v2_9d98 to i32*
  %v4_9d98 = load i32, i32* %v3_9d98, align 4
  store i32 %v4_9d98, i32* %r3.global-to-local, align 4
  %v2_9da0 = load i32, i32* @r5, align 4
  %v3_9da0 = add i32 %v2_9da0, 16
  %v4_9da0 = inttoptr i32 %v3_9da0 to i32*
  store i32 %v4_9d98, i32* %v4_9da0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9da4 = load i32, i32* @r5, align 4
  %v2_9da4 = add i32 %v1_9da4, 12
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9d84, i32* %v3_9da4, align 4
  %v3_9da8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dac = load i32, i32* %r4.global-to-local, align 4
  %v1_9dac = add i32 %v0_9dac, 44
  store i32 %v1_9dac, i32* @r6, align 4
  store i32 %v4_9db0, i32* %r2.global-to-local, align 4
  %v1_9db4 = add i32 %v3_9da8, 1
  store i32 %v1_9db4, i32* @r4, align 4
  store i32 %v4_9db8, i32* %r3.global-to-local, align 4
  %v1_9dbc = load i32, i32* @sl, align 4
  %v9_9dbc = icmp eq i32 %v1_9db4, %v1_9dbc
  store i1 %v9_9dbc, i1* %cpsr_z.global-to-local, align 1
  %v0_9dc0 = load i32, i32* @r7, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i16
  %v3_9dc0 = add i32 %v0_9dac, 48
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i16*
  store i16 %v1_9dc0, i16* %v4_9dc0, align 2
  %v0_9dc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9dc4 = trunc i32 %v0_9dc4 to i16
  %v2_9dc4 = load i32, i32* @r6, align 4
  %v3_9dc4 = inttoptr i32 %v2_9dc4 to i16*
  store i16 %v1_9dc4, i16* %v3_9dc4, align 2
  %v0_9dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc8 = trunc i32 %v0_9dc8 to i16
  %v2_9dc8 = load i32, i32* @r6, align 4
  %v3_9dc8 = add i32 %v2_9dc8, 2
  %v4_9dc8 = inttoptr i32 %v3_9dc8 to i16*
  store i16 %v1_9dc8, i16* %v4_9dc8, align 2
  %v0_9dcc = load i32, i32* @r4, align 4
  store i32 %v0_9dcc, i32* %stack_var_-44, align 4
  %v5_9dd0 = icmp slt i32 %v1_9db4, %v1_9dbc
  br i1 %v5_9dd0, label %dec_label_pc_9c94, label %dec_label_pc_9dd4

dec_label_pc_9dd4:                                ; preds = %bb82
  store i32 %v5_9b14, i32* %r5.global-to-local, align 4
  %v1_9ddc = add i32 %v5_9b14, 8
  store i32 %v1_9ddc, i32* %r4.global-to-local, align 4
  %v0_9dec.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9de8.preheader

dec_label_pc_9de8.preheader:                      ; preds = %dec_label_pc_9dd4, %dec_label_pc_a02c
  %v0_9dec.pre = phi i32 [ %v0_9dec.pre.pre, %dec_label_pc_9dd4 ], [ 0, %dec_label_pc_a02c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9ddc, %dec_label_pc_9dd4 ], [ %v1_a034, %dec_label_pc_a02c ]
  %storemerge = add i32 %v5_9b14, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_9fe0 = icmp eq i32 %v1_9bc0, 0
  %v2_9ffc = icmp eq i32 %v1_9b34, 0
  %v2_9e28 = icmp eq i32 %v5_9b68, -1
  %v7_9e28 = icmp eq i32 %v5_9b68, -1
  br label %dec_label_pc_9de8

dec_label_pc_9de8:                                ; preds = %dec_label_pc_9de8, %dec_label_pc_9e78, %dec_label_pc_9de8.preheader
  %v0_9dec = phi i32 [ %v0_9dec.pre, %dec_label_pc_9de8.preheader ], [ 0, %dec_label_pc_9de8 ], [ %v1_9f14, %dec_label_pc_9e78 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9dec = icmp eq i32 %v0_9dec, 0
  store i1 %v2_9dec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9dec, label %dec_label_pc_9de8, label %dec_label_pc_9df8

dec_label_pc_9df8:                                ; preds = %dec_label_pc_9de8
  br label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9e78, %dec_label_pc_9df8
  %v1_9e10 = phi i32 [ %v1_9f10, %dec_label_pc_9e78 ], [ 0, %dec_label_pc_9df8 ]
  %v5_9e00 = mul i32 %v1_9e10, 24
  %v1_9e04 = load i32, i32* @sb, align 4
  %v2_9e04 = add i32 %v1_9e04, %v5_9e00
  store i32 %v2_9e04, i32* %r3.global-to-local, align 4
  store i32 %v2_9a48, i32* %r4.global-to-local, align 4
  %v1_9e0c = add i32 %v2_9e04, 20
  %v2_9e0c = inttoptr i32 %v1_9e0c to i8*
  %v3_9e0c = load i8, i8* %v2_9e0c, align 1
  %v4_9e0c = zext i8 %v3_9e0c to i32
  store i32 %v4_9e0c, i32* %r2.global-to-local, align 4
  %v4_9e10 = mul i32 %v1_9e10, 4
  %v5_9e10 = add i32 %v4_9e10, %v2_9a48
  %v6_9e10 = inttoptr i32 %v5_9e10 to i32*
  %v7_9e10 = load i32, i32* %v6_9e10, align 4
  store i32 %v7_9e10, i32* @r5, align 4
  %v7_9e14 = icmp eq i8 %v3_9e0c, 31
  store i1 %v7_9e14, i1* %cpsr_z.global-to-local, align 1
  %v1_9e18 = add i32 %v7_9e10, 24
  store i32 %v1_9e18, i32* @r6, align 4
  %v1_9e1c = add i32 %v7_9e10, 44
  store i32 %v1_9e1c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e0c, 32
  br i1 %tmp86, label %dec_label_pc_9f24, label %dec_label_pc_9e24

dec_label_pc_9e24:                                ; preds = %dec_label_pc_9dfc
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9e30:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e38 = load i32, i32* @fp, align 4
  %v9_9e38 = icmp eq i32 %v0_9e38, 65535
  store i1 %v9_9e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e38, label %dec_label_pc_9f9c, label %dec_label_pc_9e40

dec_label_pc_9e40:                                ; preds = %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge, %dec_label_pc_9e30
  %v1_9e44 = phi i32 [ %v1_9e44.pre, %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge ], [ 65535, %dec_label_pc_9e30 ]
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v9_9e44 = icmp eq i32 %v3_9bc8, %v1_9e44
  store i1 %v9_9e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e44, label %dec_label_pc_9fc4, label %dec_label_pc_9e4c

dec_label_pc_9e4c:                                ; preds = %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge, %dec_label_pc_9e40
  %v1_9e50 = phi i32 [ %v1_9e50.pre, %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge ], [ %v1_9e44, %dec_label_pc_9e40 ]
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v9_9e50 = icmp eq i32 %v3_9bcc, %v1_9e50
  store i1 %v9_9e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e50, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9e58:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %dec_label_pc_9ff4, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e58
  %v1_9e60 = load i32, i32* @r5, align 4
  %v2_9e60 = add i32 %v1_9e60, 16
  %v3_9e60 = inttoptr i32 %v2_9e60 to i32*
  %v4_9e60 = load i32, i32* %v3_9e60, align 4
  store i32 %v4_9e60, i32* %r3.global-to-local, align 4
  %v2_9e64 = load i32, i32* @r6, align 4
  %v3_9e64 = add i32 %v2_9e64, 16
  %v4_9e64 = inttoptr i32 %v3_9e64 to i32*
  store i32 %v4_9e60, i32* %v4_9e64, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9e6c:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_9e78:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4, %dec_label_pc_a008
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9e7c = load i32, i32* @r5, align 4
  %v3_9e7c = add i32 %v2_9e7c, 10
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 0, i16* %v4_9e7c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  store i32 %v0_9e84, i32* @r0, align 4
  %v2_9e88 = call i32 @function_c848(i32 %v0_9e84, i32 20)
  %v3_9e88 = trunc i32 %v2_9e88 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9e90 = load i32, i32* @r5, align 4
  %v4_9e90 = add i32 %v3_9e90, 10
  %v5_9e90 = inttoptr i32 %v4_9e90 to i16*
  store i16 %v3_9e88, i16* %v5_9e90, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i16
  %v2_9e98 = load i32, i32* @r6, align 4
  %v3_9e98 = add i32 %v2_9e98, 10
  %v4_9e98 = inttoptr i32 %v3_9e98 to i16*
  store i16 %v1_9e98, i16* %v4_9e98, align 2
  %v0_9e9c = load i32, i32* @r6, align 4
  store i32 %v0_9e9c, i32* @r0, align 4
  %v2_9ea0 = call i32 @function_c848(i32 %v0_9e9c, i32 20)
  %v3_9ea0 = trunc i32 %v2_9ea0 to i16
  %v3_9ea4 = load i32, i32* @r6, align 4
  %v4_9ea4 = add i32 %v3_9ea4, 10
  %v5_9ea4 = inttoptr i32 %v4_9ea4 to i16*
  store i16 %v3_9ea0, i16* %v5_9ea4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eac = load i32, i32* @r7, align 4
  store i32 %v0_9eac, i32* @r1, align 4
  %v1_9eb0 = add i32 %v0_9eac, 4
  %v2_9eb0 = inttoptr i32 %v1_9eb0 to i16*
  %v3_9eb0 = load i16, i16* %v2_9eb0, align 2
  %v4_9eb0 = zext i16 %v3_9eb0 to i32
  store i32 %v4_9eb0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9eb8 = add i32 %v0_9eac, 6
  %v4_9eb8 = inttoptr i32 %v3_9eb8 to i16*
  store i16 0, i16* %v4_9eb8, align 2
  %v0_9ebc = load i32, i32* @r6, align 4
  %v4_9ec0 = call i32 @function_c898(i32 %v0_9ebc, i32 %v0_9eac, i32 %v4_9eb0, i32 %stack_var_-124.0.ph)
  %v5_9ec0 = trunc i32 %v4_9ec0 to i16
  %v3_9ec4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ec4, i32* %r2.global-to-local, align 4
  %v3_9ec8 = mul i32 %v3_9ec4, 32
  store i32 %v3_9ec8, i32* %r3.global-to-local, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  %v1_9ecc = add i32 %v0_9ecc, 16
  %v2_9ecc = inttoptr i32 %v1_9ecc to i32*
  %v3_9ecc = load i32, i32* %v2_9ecc, align 4
  %v5_9ed0 = mul i32 %v3_9ec4, 24
  store i32 %v5_9ed0, i32* %r3.global-to-local, align 4
  %v1_9ed4 = load i32, i32* @sb, align 4
  %v2_9ed4 = add i32 %v1_9ed4, %v5_9ed0
  store i32 %v2_9ed4, i32* @lr, align 4
  %v2_9ed8 = add i32 %v2_9ed4, 4
  %v3_9ed8 = inttoptr i32 %v2_9ed8 to i32*
  store i32 %v3_9ecc, i32* %v3_9ed8, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9ee0 = load i32, i32* @r7, align 4
  %v4_9ee0 = add i32 %v3_9ee0, 6
  %v5_9ee0 = inttoptr i32 %v4_9ee0 to i16*
  store i16 %v5_9ec0, i16* %v5_9ee0, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9ee8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v0_9ee8 to i16
  %v2_9ee8 = load i32, i32* %r3.global-to-local, align 4
  %v3_9ee8 = load i32, i32* @sb, align 4
  %v4_9ee8 = add i32 %v3_9ee8, %v2_9ee8
  %v5_9ee8 = inttoptr i32 %v4_9ee8 to i16*
  store i16 %v1_9ee8, i16* %v5_9ee8, align 2
  %v0_9eec = load i32, i32* @r4, align 4
  %v1_9eec = trunc i32 %v0_9eec to i16
  %v2_9eec = load i32, i32* @lr, align 4
  %v3_9eec = add i32 %v2_9eec, 2
  %v4_9eec = inttoptr i32 %v3_9eec to i16*
  store i16 %v1_9eec, i16* %v4_9eec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ef4 = load i32, i32* @r5, align 4
  store i32 %v0_9ef4, i32* %r1.global-to-local, align 4
  %v0_9efc = load i32, i32* @r8, align 4
  store i32 %v0_9efc, i32* %r2.global-to-local, align 4
  %v0_9f00 = load i32, i32* @lr, align 4
  %v0_9f04 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f08 = call i32 @function_112b8(i32 %v3_9b7c, i32 %v0_9ef4, i32 %v0_9efc, i32 16384, i32 %v0_9f00, i32 %v0_9f04)
  %v3_9f0c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f0c, i32* %r3.global-to-local, align 4
  %v1_9f10 = add i32 %v3_9f0c, 1
  %v1_9f14 = load i32, i32* @sl, align 4
  %v9_9f14 = icmp eq i32 %v1_9f10, %v1_9f14
  store i1 %v9_9f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f10, i32* %stack_var_-44, align 4
  %v6_9f1c = icmp slt i32 %v1_9f10, %v1_9f14
  br i1 %v6_9f1c, label %dec_label_pc_9dfc, label %dec_label_pc_9de8

dec_label_pc_9f24:                                ; preds = %dec_label_pc_9dfc
  %v1_9f24 = add i32 %v2_9e04, 16
  %v2_9f24 = inttoptr i32 %v1_9f24 to i32*
  %v3_9f24 = load i32, i32* %v2_9f24, align 4
  store i32 %v3_9f24, i32* %r4.global-to-local, align 4
  %v0_9f28 = call i32 @function_deb8()
  %v3_9f2c = load i32, i32* %stack_var_-44, align 4
  %v5_9f34 = mul i32 %v3_9f2c, 24
  %v0_9f38 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f38 = and i32 %v0_9f38, 16711680
  store i32 %v1_9f38, i32* %ip.global-to-local, align 4
  %v3_9f3c = udiv i32 %v0_9f38, 16777216
  %v4_9f40 = udiv i32 %v1_9f38, 256
  %v5_9f40 = or i32 %v4_9f40, %v3_9f3c
  store i32 %v5_9f40, i32* %r2.global-to-local, align 4
  %v1_9f44 = load i32, i32* @sb, align 4
  %v2_9f44 = add i32 %v1_9f44, %v5_9f34
  store i32 %v2_9f44, i32* %r1.global-to-local, align 4
  %v1_9f48 = and i32 %v0_9f38, 65280
  store i32 %v1_9f48, i32* %r3.global-to-local, align 4
  %v1_9f4c = add i32 %v2_9f44, 20
  %v2_9f4c = inttoptr i32 %v1_9f4c to i8*
  %v3_9f4c = load i8, i8* %v2_9f4c, align 1
  %v4_9f4c = zext i8 %v3_9f4c to i32
  store i32 %v4_9f4c, i32* %ip.global-to-local, align 4
  %v5_9f54 = call i32 @llvm.bswap.i32(i32 %v0_9f38)
  %v7_9f58 = lshr i32 %v0_9f28, %v4_9f4c
  %v8_9f58 = add i32 %v7_9f58, %v5_9f54
  store i32 %v8_9f58, i32* %r2.global-to-local, align 4
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  %v5_9f74 = call i32 @llvm.bswap.i32(i32 %v8_9f58)
  store i32 %v5_9f74, i32* %r3.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  %v1_9f7c = load i32, i32* @r5, align 4
  %v2_9f7c = add i32 %v1_9f7c, 16
  %v3_9f7c = inttoptr i32 %v2_9f7c to i32*
  store i32 %v5_9f74, i32* %v3_9f7c, align 4
  br i1 %v2_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9f84:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  %v0_9f84 = call i32 @function_deb8()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9f90 = load i32, i32* @fp, align 4
  %v9_9f90 = icmp eq i32 %v0_9f90, 65535
  store i1 %v9_9f90, i1* %cpsr_z.global-to-local, align 1
  %v1_9f94 = load i32, i32* @r5, align 4
  %v2_9f94 = add i32 %v1_9f94, 12
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v0_9f84, i32* %v3_9f94, align 4
  br i1 %v9_9f90, label %dec_label_pc_9f9c, label %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge

dec_label_pc_9f84.dec_label_pc_9e40_crit_edge:    ; preds = %dec_label_pc_9f84
  %v1_9e44.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e40

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84, %dec_label_pc_9e30
  %v0_9f9c = call i32 @function_deb8()
  %v3_9fa4 = urem i32 %v0_9f9c, 65536
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v1_9fb0 = sub nsw i32 999, %v3_9fa4
  store i32 %v1_9fb0, i32* %r3.global-to-local, align 4
  %v1_9fb4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9fb4 = icmp eq i32 %v3_9bc8, %v1_9fb4
  store i1 %v9_9fb4, i1* %cpsr_z.global-to-local, align 1
  %v1_9fb8 = trunc i32 %v0_9f9c to i16
  %v2_9fb8 = load i32, i32* @r5, align 4
  %v3_9fb8 = add i32 %v2_9fb8, 4
  %v4_9fb8 = inttoptr i32 %v3_9fb8 to i16*
  store i16 %v1_9fb8, i16* %v4_9fb8, align 2
  %v0_9fbc = load i32, i32* %r3.global-to-local, align 4
  %v1_9fbc = trunc i32 %v0_9fbc to i16
  %v2_9fbc = load i32, i32* @r6, align 4
  %v3_9fbc = add i32 %v2_9fbc, 4
  %v4_9fbc = inttoptr i32 %v3_9fbc to i16*
  store i16 %v1_9fbc, i16* %v4_9fbc, align 2
  br i1 %v9_9fb4, label %dec_label_pc_9fc4, label %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge

dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge:    ; preds = %dec_label_pc_9f9c
  %v1_9e50.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e4c

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f9c, %dec_label_pc_9e40
  %v0_9fc4 = call i32 @function_deb8()
  %v1_9fc4 = trunc i32 %v0_9fc4 to i16
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v1_9fcc = load i32, i32* %r4.global-to-local, align 4
  %v9_9fcc = icmp eq i32 %v3_9bcc, %v1_9fcc
  store i1 %v9_9fcc, i1* %cpsr_z.global-to-local, align 1
  %v3_9fd0 = load i32, i32* @r5, align 4
  %v4_9fd0 = add i32 %v3_9fd0, 44
  %v5_9fd0 = inttoptr i32 %v4_9fd0 to i16*
  store i16 %v1_9fc4, i16* %v5_9fd0, align 2
  br i1 %v9_9fcc, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  %v0_9fd8 = call i32 @function_deb8()
  %v1_9fd8 = trunc i32 %v0_9fd8 to i16
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_9fd8
  %v3_9fe831 = load i32, i32* @r7, align 4
  %v4_9fe832 = add i32 %v3_9fe831, 2
  %v5_9fe833 = inttoptr i32 %v4_9fe832 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe833, align 2
  br label %dec_label_pc_9ff4

bb85:                                             ; preds = %dec_label_pc_9fd8
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 16
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  %v4_9fe4 = load i32, i32* %v3_9fe4, align 4
  store i32 %v4_9fe4, i32* %r3.global-to-local, align 4
  %v3_9fe8 = load i32, i32* @r7, align 4
  %v4_9fe8 = add i32 %v3_9fe8, 2
  %v5_9fe8 = inttoptr i32 %v4_9fe8 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe8, align 2
  %v1_9fec = load i32, i32* %r3.global-to-local, align 4
  %v2_9fec = load i32, i32* @r6, align 4
  %v3_9fec = add i32 %v2_9fec, 16
  %v4_9fec = inttoptr i32 %v3_9fec to i32*
  store i32 %v1_9fec, i32* %v4_9fec, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9ff4:                                ; preds = %.thread30, %dec_label_pc_9e58
  %v0_9ff4 = call i32 @function_deb8()
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  %v1_a000 = load i32, i32* @r6, align 4
  %v2_a000 = add i32 %v1_a000, 16
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v0_9ff4, i32* %v3_a000, align 4
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_a008:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4
  %v0_a008 = load i32, i32* @r7, align 4
  %v1_a008 = add i32 %v0_a008, 8
  store i32 %v5_9b14, i32* %r1.global-to-local, align 4
  %v2_a010 = inttoptr i32 %v1_a008 to i16*
  %v3_a010 = call i32 @function_e04c(i16* %v2_a010, i32 %v5_9b14)
  br label %dec_label_pc_9e78

dec_label_pc_a018:                                ; preds = %dec_label_pc_9b8c
  %v1_a01c = call i32 @function_10b64(i32 %v3_9b7c)
  br label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_9a2c, %dec_label_pc_a018
  %v1_a028 = phi i32 [ %v3_9b7c, %dec_label_pc_9a2c ], [ %v1_a01c, %dec_label_pc_a018 ]
  store i32 %v3_9a2c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a2c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a2c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a028

dec_label_pc_a02c:                                ; preds = %dec_label_pc_9bb4
  store i32 %v5_9b14, i32* %r2.global-to-local, align 4
  %v1_a034 = add i32 %v5_9b14, 8
  store i32 %v1_a034, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9de8.preheader

; uselistorder directives
  uselistorder i32 %v1_a034, { 1, 0 }
  uselistorder i16 %v1_9fd8, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0 }
  uselistorder i32 %v5_9f74, { 1, 0 }
  uselistorder i32 %v0_9f38, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9f14, { 1, 2, 0 }
  uselistorder i32 %v1_9f10, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9ec4, { 1, 0, 2 }
  uselistorder i32 %v0_9eac, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e10, { 1, 0, 2 }
  uselistorder i1 %v7_9e28, { 2, 1, 0 }
  uselistorder i1 %v2_9ffc, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9fe0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9d84, { 1, 0 }
  uselistorder i32 %v4_9cf813, { 1, 0 }
  uselistorder i32 %v3_9c1c, { 1, 0 }
  uselistorder i32 %v3_9c00, { 1, 2, 0 }
  uselistorder i32 %v1_9bfc, { 1, 0 }
  uselistorder i32 %v1_9bc0, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bbc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bb8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bb4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bac, { 1, 0 }
  uselistorder i1 %v7_9b80, { 1, 0 }
  uselistorder i32 %v3_9b7c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9b68, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b34, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b14, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9ac8, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 2, 1, 0 }
  uselistorder i32 %v5_9a9c, { 1, 0 }
  uselistorder i8 %v5_9a80, { 0, 2, 1 }
  uselistorder i32 %v6_9a60, { 1, 0 }
  uselistorder i32 %v2_9a48, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a020, { 1, 0 }
  uselistorder label %dec_label_pc_a008, { 1, 0 }
  uselistorder label %dec_label_pc_9e78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9de8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9de8.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_a048(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a048:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a048 = load i32, i32* @r4, align 4
  %v27_a048 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a064 = call i32 @function_11ea4(i32 %arg1, i32 4)
  %v0_a068 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a064, i32* @fp, align 4
  %v0_a078 = load i32, i32* @r4, align 4
  %v4_a07c = inttoptr i32 %v0_a068 to i32*
  %v5_a07c = call i32 @function_8570(i32 %v0_a078, i32* %v4_a07c, i32 2, i32 0)
  %v1_a088 = urem i32 %v5_a07c, 256
  store i32 %v1_a088, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a094 = load i32, i32* @r4, align 4
  %v0_a098 = load i32, i32* @r5, align 4
  %v5_a09c = trunc i32 %v5_a07c to i8
  %v6_a0a0 = inttoptr i32 %v0_a098 to i32*
  %v7_a0a0 = call i32 @function_8570(i32 %v0_a094, i32* %v6_a0a0, i32 3, i32 65535)
  %v0_a0a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0a0, i32* @r7, align 4
  %v0_a0b4 = load i32, i32* @r4, align 4
  %v4_a0b8 = inttoptr i32 %v0_a0a4 to i32*
  %v5_a0b8 = call i32 @function_8570(i32 %v0_a0b4, i32* %v4_a0b8, i32 4, i32 64)
  %v1_a0c0 = urem i32 %v5_a0b8, 256
  store i32 %v1_a0c0, i32* %ip.global-to-local, align 4
  %v0_a0c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r4, align 4
  %v6_a0d8 = inttoptr i32 %v0_a0c4 to i32*
  %v7_a0d8 = call i32 @function_8570(i32 %v0_a0d0, i32* %v6_a0d8, i32 5, i32 0)
  %v1_a0e4 = urem i32 %v7_a0d8, 256
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  %v0_a0f4 = load i32, i32* @r5, align 4
  %v5_a0fc = inttoptr i32 %v0_a0f4 to i32*
  %v6_a0fc = call i32 @function_8570(i32 %v0_a0f0, i32* %v5_a0fc, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v6_a0fc, i32* @r6, align 4
  %v0_a114 = load i32, i32* @r4, align 4
  %v4_a118 = inttoptr i32 %v0_a10c to i32*
  %v5_a118 = call i32 @function_8570(i32 %v0_a114, i32* %v4_a118, i32 7, i32 27015)
  store i32 %v5_a118, i32* @r4, align 4
  %v1_a124 = call i32 @function_fb64(i32 20)
  %v3_a130 = call i32 @function_faa0(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a144 = call i32 @function_1133c(i32 2, i32 3, i32 17)
  %v7_a148 = icmp eq i32 %v3_a144, -1
  store i1 %v7_a148, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a144, i32* @sb, align 4
  br i1 %v7_a148, label %dec_label_pc_a470, label %dec_label_pc_a154

dec_label_pc_a154:                                ; preds = %dec_label_pc_a048
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a15c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a15c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a170 = call i32 @function_112f8(i32 %v3_a144, i32 0, i32 3, i32 %v6_a15c, i32 ptrtoint (i32* @0 to i32))
  %v7_a174 = icmp eq i32 %v5_a170, -1
  store i1 %v7_a174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a174, label %dec_label_pc_a468, label %dec_label_pc_a17c

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a154
  %v0_a17c = load i32, i32* @r4, align 4
  %v3_a17c = mul i32 %v0_a17c, 65536
  store i32 %v3_a17c, i32* @lr, align 4
  %v0_a180 = load i32, i32* @r7, align 4
  %v0_a184 = load i32, i32* @r6, align 4
  %v3_a184 = mul i32 %v0_a184, 65536
  store i32 %v3_a184, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a18c = urem i32 %v0_a180, 65536
  %v3_a190 = urem i32 %v0_a184, 65536
  store i32 %v3_a190, i32* %r2.global-to-local, align 4
  %v3_a194 = urem i32 %v0_a17c, 65536
  store i32 %v3_a194, i32* %r3.global-to-local, align 4
  %v0_a198 = load i32, i32* @r8, align 4
  %v2_a198 = icmp eq i32 %v0_a198, 0
  store i1 %v2_a198, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a198, label %dec_label_pc_a2d4.preheader, label %dec_label_pc_a1b0

dec_label_pc_a1b0:                                ; preds = %dec_label_pc_a17c
  %tmp34 = mul i32 %v0_a180, 256
  %v3_a1c0 = and i32 %tmp34, 65280
  store i32 %v3_a1c0, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a184, 256
  %v3_a1c4 = and i32 %tmp35, 65280
  store i32 %v3_a1c4, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a17c, 256
  %v3_a1c8 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a180, 256
  %v4_a1cc = urem i32 %tmp37, 256
  %v5_a1cc = or i32 %v4_a1cc, %v3_a1c0
  store i32 %v5_a1cc, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a184, 256
  %v4_a1d0 = urem i32 %tmp38, 256
  %v5_a1d0 = or i32 %v4_a1d0, %v3_a1c4
  store i32 %v5_a1d0, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a17c, 256
  %v4_a1d4 = urem i32 %tmp39, 256
  %v5_a1d4 = or i32 %v4_a1d4, %v3_a1c8
  store i32 %v5_a1d4, i32* @r7, align 4
  %v1_a25c = trunc i32 %v5_a0b8 to i8
  br label %dec_label_pc_a1d8

dec_label_pc_a1d8:                                ; preds = %.thread, %dec_label_pc_a1b0
  %v2_a1e0 = call i32 @function_11ea4(i32 128, i32 1)
  %v3_a1e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a1e4, i32* %r2.global-to-local, align 4
  %v5_a1ec = mul i32 %v3_a1e4, 24
  store i32 %v5_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = load i32, i32* @fp, align 4
  %v2_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f0 = mul i32 %v2_a1f0, 4
  %v6_a1f0 = add i32 %v5_a1f0, %v1_a1f0
  %v7_a1f0 = inttoptr i32 %v6_a1f0 to i32*
  store i32 %v2_a1e0, i32* %v7_a1f0, align 4
  %v0_a1f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f4 = load i32, i32* @sl, align 4
  %v2_a1f4 = add i32 %v1_a1f4, %v0_a1f4
  store i32 %v2_a1f4, i32* %r3.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @fp, align 4
  %v1_a1f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_a1f8 = mul i32 %v1_a1f8, 4
  %v5_a1f8 = add i32 %v4_a1f8, %v0_a1f8
  %v6_a1f8 = inttoptr i32 %v5_a1f8 to i32*
  %v7_a1f8 = load i32, i32* %v6_a1f8, align 4
  store i32 %v7_a1f8, i32* @lr, align 4
  %v1_a200 = inttoptr i32 %v7_a1f8 to i8*
  %v2_a200 = load i8, i8* %v1_a200, align 1
  %tmp = urem i8 %v2_a200, 16
  %v1_a204 = zext i8 %tmp to i32
  %v1_a208 = or i32 %v1_a204, 64
  store i32 %v1_a208, i32* %r3.global-to-local, align 4
  %v1_a210 = trunc i32 %v1_a208 to i8
  store i8 %v1_a210, i8* %v1_a200, align 1
  %v0_a214 = load i32, i32* @lr, align 4
  %v1_a214 = inttoptr i32 %v0_a214 to i8*
  %v2_a214 = load i8, i8* %v1_a214, align 1
  %v1_a218 = and i8 %v2_a214, -16
  %v1_a21c = or i8 %v1_a218, 5
  store i8 %v1_a21c, i8* %v1_a214, align 1
  %v2_a228 = load i32, i32* @lr, align 4
  %v3_a228 = add i32 %v2_a228, 1
  %v4_a228 = inttoptr i32 %v3_a228 to i8*
  store i8 %v5_a09c, i8* %v4_a228, align 1
  %v3_a22c = load i32, i32* %stack_var_-48, align 4
  %v3_a230 = mul i32 %v3_a22c, 65536
  %v1_a234 = add i32 %v3_a230, 2097152
  %v3_a238 = udiv i32 %v1_a234, 256
  %v4_a240 = udiv i32 %v1_a234, 16777216
  %v5_a240 = or i32 %v3_a238, %v4_a240
  %v3_a244 = urem i32 %v3_a22c, 65536
  store i32 %v3_a244, i32* %r2.global-to-local, align 4
  %v1_a248 = trunc i32 %v5_a240 to i16
  %v2_a248 = load i32, i32* @lr, align 4
  %v3_a248 = add i32 %v2_a248, 2
  %v4_a248 = inttoptr i32 %v3_a248 to i16*
  store i16 %v1_a248, i16* %v4_a248, align 2
  %v0_a24c = load i32, i32* %r2.global-to-local, align 4
  %v1_a24c = mul i32 %v0_a24c, 65536
  %v3_a254 = add i32 %v1_a24c, 786432
  store i32 %v3_a254, i32* %r2.global-to-local, align 4
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  %v2_a25c = load i32, i32* @lr, align 4
  %v3_a25c = add i32 %v2_a25c, 8
  %v4_a25c = inttoptr i32 %v3_a25c to i8*
  store i8 %v1_a25c, i8* %v4_a25c, align 1
  %v0_a260 = load i32, i32* %r2.global-to-local, align 4
  %v3_a260 = udiv i32 %v0_a260, 256
  %v1_a264 = and i32 %v3_a260, 65280
  %v0_a268 = load i32, i32* %ip.global-to-local, align 4
  %v2_a268 = icmp eq i32 %v0_a268, 0
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v4_a26c = udiv i32 %v0_a260, 16777216
  %v5_a26c = or i32 %v1_a264, %v4_a26c
  store i32 %v5_a26c, i32* %ip.global-to-local, align 4
  %v2_a274 = load i32, i32* @lr, align 4
  %v3_a274 = add i32 %v2_a274, 9
  %v4_a274 = inttoptr i32 %v3_a274 to i8*
  store i8 17, i8* %v4_a274, align 1
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r3.global-to-local, align 4
  %v0_a27c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a27c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a1d8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a280 = load i32, i32* @lr, align 4
  %v4_a280 = add i32 %v3_a280, 6
  %v5_a280 = inttoptr i32 %v4_a280 to i16*
  store i16 64, i16* %v5_a280, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a1d8, %bb
  %v2_a284 = load i32, i32* @global_var_20780.45, align 4
  %v1_a288 = load i32, i32* @lr, align 4
  %v2_a288 = add i32 %v1_a288, 12
  %v3_a288 = inttoptr i32 %v2_a288 to i32*
  store i32 %v2_a284, i32* %v3_a288, align 4
  store i32 %v2_a1f4, i32* %r2.global-to-local, align 4
  %v1_a290 = add i32 %v2_a1f4, 16
  %v2_a290 = inttoptr i32 %v1_a290 to i32*
  %v3_a290 = load i32, i32* %v2_a290, align 4
  %v1_a294 = load i32, i32* @lr, align 4
  %v2_a294 = add i32 %v1_a294, 16
  %v3_a294 = inttoptr i32 %v2_a294 to i32*
  store i32 %v3_a290, i32* %v3_a294, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a29c = load i32, i32* @lr, align 4
  %v1_a29c = add i32 %v0_a29c, 20
  store i32 %v1_a29c, i32* %r4.global-to-local, align 4
  %v2_a2a0 = add i32 %v0_a29c, 28
  %v3_a2a0 = inttoptr i32 %v2_a2a0 to i32*
  store i32 -1, i32* %v3_a2a0, align 4
  %v0_a2a4 = load i32, i32* @r5, align 4
  %v1_a2a4 = trunc i32 %v0_a2a4 to i16
  %v2_a2a4 = load i32, i32* @lr, align 4
  %v3_a2a4 = add i32 %v2_a2a4, 4
  %v4_a2a4 = inttoptr i32 %v3_a2a4 to i16*
  store i16 %v1_a2a4, i16* %v4_a2a4, align 2
  %v0_a2a8 = load i32, i32* @lr, align 4
  %v1_a2a8 = add i32 %v0_a2a8, 32
  %v0_a2ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i16
  %v2_a2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ac = add i32 %v2_a2ac, 4
  %v4_a2ac = inttoptr i32 %v3_a2ac to i16*
  store i16 %v1_a2ac, i16* %v4_a2ac, align 2
  %v0_a2b0 = load i32, i32* @r7, align 4
  %v1_a2b0 = trunc i32 %v0_a2b0 to i16
  %v2_a2b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2b0 = add i32 %v2_a2b0, 2
  %v4_a2b0 = inttoptr i32 %v3_a2b0 to i16*
  store i16 %v1_a2b0, i16* %v4_a2b0, align 2
  %v0_a2b4 = load i32, i32* @r6, align 4
  %v1_a2b4 = trunc i32 %v0_a2b4 to i16
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 20
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i16*
  store i16 %v1_a2b4, i16* %v4_a2b4, align 2
  %v3_a2b8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2b8, i32* %r2.global-to-local, align 4
  %v3_a2bc = call i32 @function_10114(i32 %v1_a2a8, i32 %v3_a130, i32 %v3_a2b8)
  %v3_a2c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a2c0, i32* %r3.global-to-local, align 4
  %v1_a2c4 = add i32 %v3_a2c0, 1
  store i32 %v1_a2c4, i32* @r4, align 4
  %v1_a2c8 = load i32, i32* @r8, align 4
  %v9_a2c8 = icmp eq i32 %v1_a2c4, %v1_a2c8
  store i1 %v9_a2c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a2c4, i32* %stack_var_-44, align 4
  %v5_a2d0 = icmp slt i32 %v1_a2c4, %v1_a2c8
  br i1 %v5_a2d0, label %dec_label_pc_a1d8, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %.thread, %dec_label_pc_a17c
  %v0_a2d8.ph = phi i32 [ 0, %dec_label_pc_a17c ], [ %v1_a2c8, %.thread ]
  %v3_a314 = icmp eq i32 %v3_a18c, 65535
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0, %dec_label_pc_a2d4.preheader
  %v0_a2d8 = phi i32 [ %v0_a2d8.ph, %dec_label_pc_a2d4.preheader ], [ 0, %dec_label_pc_a3c0 ], [ 0, %dec_label_pc_a2d4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a2d8 = icmp eq i32 %v0_a2d8, 0
  store i1 %v2_a2d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a2d8, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a2e4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0
  br label %dec_label_pc_a2e8

dec_label_pc_a2e8:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a2e4
  %v1_a2f8 = phi i32 [ %v1_a3b0, %dec_label_pc_a334 ], [ 0, %dec_label_pc_a2e4 ]
  %v5_a2ec = mul i32 %v1_a2f8, 24
  %v1_a2f0 = load i32, i32* @sl, align 4
  %v2_a2f0 = add i32 %v1_a2f0, %v5_a2ec
  store i32 %v2_a2f0, i32* %r3.global-to-local, align 4
  %v1_a2f4 = add i32 %v2_a2f0, 20
  %v2_a2f4 = inttoptr i32 %v1_a2f4 to i8*
  %v3_a2f4 = load i8, i8* %v2_a2f4, align 1
  %v4_a2f4 = zext i8 %v3_a2f4 to i32
  store i32 %v4_a2f4, i32* %r2.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @fp, align 4
  %v4_a2f8 = mul i32 %v1_a2f8, 4
  %v5_a2f8 = add i32 %v0_a2f8, %v4_a2f8
  %v6_a2f8 = inttoptr i32 %v5_a2f8 to i32*
  %v7_a2f8 = load i32, i32* %v6_a2f8, align 4
  store i32 %v7_a2f8, i32* @r5, align 4
  %v7_a300 = icmp eq i8 %v3_a2f4, 31
  store i1 %v7_a300, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a308 = add i32 %v7_a2f8, 20
  store i32 %v1_a308, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a2f4, 32
  br i1 %tmp40, label %dec_label_pc_a3d4, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a2e8
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  store i1 %v3_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a314, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v1_a320 = phi i32 [ %v1_a42c, %dec_label_pc_a3d4 ], [ 65535, %dec_label_pc_a310 ]
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v9_a320 = icmp eq i32 %v3_a190, %v1_a320
  store i1 %v9_a320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a320, label %dec_label_pc_a448, label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a434.dec_label_pc_a328_crit_edge, %dec_label_pc_a31c
  %v1_a32c = phi i32 [ %v1_a32c.pre, %dec_label_pc_a434.dec_label_pc_a328_crit_edge ], [ %v1_a320, %dec_label_pc_a31c ]
  %v9_a32c = icmp eq i32 %v3_a194, %v1_a32c
  store i1 %v9_a32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a32c, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328, %dec_label_pc_a45c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a338 = load i32, i32* @r5, align 4
  %v3_a338 = add i32 %v2_a338, 10
  %v4_a338 = inttoptr i32 %v3_a338 to i16*
  store i16 0, i16* %v4_a338, align 2
  %v0_a340 = load i32, i32* @r5, align 4
  store i32 %v0_a340, i32* @r0, align 4
  %v2_a344 = call i32 @function_c848(i32 %v0_a340, i32 20)
  %v3_a344 = trunc i32 %v2_a344 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a34c = load i32, i32* @r5, align 4
  %v4_a34c = add i32 %v3_a34c, 10
  %v5_a34c = inttoptr i32 %v4_a34c to i16*
  store i16 %v3_a344, i16* %v5_a34c, align 2
  %v0_a350 = load i32, i32* %r3.global-to-local, align 4
  %v1_a350 = trunc i32 %v0_a350 to i16
  %v2_a350 = load i32, i32* @r6, align 4
  %v3_a350 = add i32 %v2_a350, 6
  %v4_a350 = inttoptr i32 %v3_a350 to i16*
  store i16 %v1_a350, i16* %v4_a350, align 2
  %v3_a354 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a354, i32* %r3.global-to-local, align 4
  %v0_a358 = load i32, i32* @r6, align 4
  store i32 %v0_a358, i32* @r1, align 4
  %v1_a35c = add i32 %v0_a358, 4
  %v2_a35c = inttoptr i32 %v1_a35c to i16*
  %v3_a35c = load i16, i16* %v2_a35c, align 2
  %v4_a35c = zext i16 %v3_a35c to i32
  store i32 %v4_a35c, i32* %r2.global-to-local, align 4
  %v1_a360 = add i32 %v3_a354, 12
  store i32 %v1_a360, i32* %r3.global-to-local, align 4
  %v0_a364 = load i32, i32* @r5, align 4
  %v4_a368 = call i32 @function_c898(i32 %v0_a364, i32 %v0_a358, i32 %v4_a35c, i32 %v1_a360)
  %v5_a368 = trunc i32 %v4_a368 to i16
  %v3_a36c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a36c, i32* %r3.global-to-local, align 4
  %v3_a370 = mul i32 %v3_a36c, 32
  store i32 %v3_a370, i32* %lr.global-to-local, align 4
  %v3_a374 = load i32, i32* @r6, align 4
  %v4_a374 = add i32 %v3_a374, 6
  %v5_a374 = inttoptr i32 %v4_a374 to i16*
  store i16 %v5_a368, i16* %v5_a374, align 2
  %v0_a378 = load i32, i32* %lr.global-to-local, align 4
  %v1_a378 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a378, -8
  %v5_a378 = add i32 %v0_a378, %tmp41
  store i32 %v5_a378, i32* %lr.global-to-local, align 4
  %v0_a37c = load i32, i32* @r6, align 4
  %v1_a37c = add i32 %v0_a37c, 2
  %v2_a37c = inttoptr i32 %v1_a37c to i16*
  %v3_a37c = load i16, i16* %v2_a37c, align 2
  %v3_a380 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a380, i32* %r2.global-to-local, align 4
  %v1_a384 = load i32, i32* @sl, align 4
  %v2_a384 = add i32 %v1_a384, %v5_a378
  store i32 %v2_a384, i32* @lr, align 4
  %v3_a388 = add i32 %v2_a384, 2
  %v4_a388 = inttoptr i32 %v3_a388 to i16*
  store i16 %v3_a37c, i16* %v4_a388, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a394 = load i32, i32* @r5, align 4
  %v0_a398 = load i32, i32* %r2.global-to-local, align 4
  %v1_a398 = add i32 %v0_a398, 32
  store i32 %v1_a398, i32* %r2.global-to-local, align 4
  %v0_a39c = load i32, i32* @sb, align 4
  %v0_a3a0 = load i32, i32* @lr, align 4
  %v6_a3a8 = call i32 @function_112b8(i32 %v0_a39c, i32 %v0_a394, i32 %v1_a398, i32 16384, i32 %v0_a3a0, i32 16)
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v1_a3b0 = add i32 %v3_a3ac, 1
  %v1_a3b4 = load i32, i32* @r8, align 4
  %v9_a3b4 = icmp eq i32 %v1_a3b0, %v1_a3b4
  store i1 %v9_a3b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3b0, i32* %stack_var_-44, align 4
  %v5_a3bc = icmp slt i32 %v1_a3b0, %v1_a3b4
  br i1 %v5_a3bc, label %dec_label_pc_a2e8, label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a334
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a3c4 = icmp eq i32 %v1_a3b4, 0
  store i1 %v2_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a3c4, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a3d4:                                ; preds = %dec_label_pc_a2e8
  %v1_a3d4 = add i32 %v2_a2f0, 16
  %v2_a3d4 = inttoptr i32 %v1_a3d4 to i32*
  %v3_a3d4 = load i32, i32* %v2_a3d4, align 4
  store i32 %v3_a3d4, i32* @r4, align 4
  %v0_a3d8 = call i32 @function_deb8()
  %v3_a3dc = load i32, i32* %stack_var_-44, align 4
  %v5_a3e4 = mul i32 %v3_a3dc, 24
  %v0_a3e8 = load i32, i32* @r4, align 4
  %v1_a3e8 = and i32 %v0_a3e8, 16711680
  store i32 %v1_a3e8, i32* %ip.global-to-local, align 4
  %v3_a3ec = udiv i32 %v0_a3e8, 16777216
  %v4_a3f0 = udiv i32 %v1_a3e8, 256
  %v5_a3f0 = or i32 %v4_a3f0, %v3_a3ec
  store i32 %v5_a3f0, i32* %r2.global-to-local, align 4
  %v1_a3f4 = load i32, i32* @sl, align 4
  %v2_a3f4 = add i32 %v1_a3f4, %v5_a3e4
  %v1_a3f8 = and i32 %v0_a3e8, 65280
  store i32 %v1_a3f8, i32* %r3.global-to-local, align 4
  %v1_a3fc = add i32 %v2_a3f4, 20
  %v2_a3fc = inttoptr i32 %v1_a3fc to i8*
  %v3_a3fc = load i8, i8* %v2_a3fc, align 1
  %v4_a3fc = zext i8 %v3_a3fc to i32
  store i32 %v4_a3fc, i32* %ip.global-to-local, align 4
  %v5_a404 = call i32 @llvm.bswap.i32(i32 %v0_a3e8)
  %v7_a408 = lshr i32 %v0_a3d8, %v4_a3fc
  %v8_a408 = add i32 %v7_a408, %v5_a404
  store i32 %v8_a408, i32* %r2.global-to-local, align 4
  %v5_a420 = call i32 @llvm.bswap.i32(i32 %v8_a408)
  %v1_a424 = load i32, i32* @r5, align 4
  %v2_a424 = add i32 %v1_a424, 16
  %v3_a424 = inttoptr i32 %v2_a424 to i32*
  store i32 %v5_a420, i32* %v3_a424, align 4
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  %v1_a42c = load i32, i32* @r7, align 4
  %v9_a42c = icmp eq i32 %v3_a18c, %v1_a42c
  store i1 %v9_a42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a42c, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a434:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v0_a434 = call i32 @function_deb8()
  %v1_a434 = trunc i32 %v0_a434 to i16
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v1_a43c = load i32, i32* @r7, align 4
  %v9_a43c = icmp eq i32 %v3_a190, %v1_a43c
  store i1 %v9_a43c, i1* %cpsr_z.global-to-local, align 1
  %v3_a440 = load i32, i32* @r5, align 4
  %v4_a440 = add i32 %v3_a440, 4
  %v5_a440 = inttoptr i32 %v4_a440 to i16*
  store i16 %v1_a434, i16* %v5_a440, align 2
  br i1 %v9_a43c, label %dec_label_pc_a448, label %dec_label_pc_a434.dec_label_pc_a328_crit_edge

dec_label_pc_a434.dec_label_pc_a328_crit_edge:    ; preds = %dec_label_pc_a434
  %v1_a32c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a328

dec_label_pc_a448:                                ; preds = %dec_label_pc_a434, %dec_label_pc_a31c
  %v0_a448 = call i32 @function_deb8()
  %v1_a448 = trunc i32 %v0_a448 to i16
  %v1_a450 = load i32, i32* @r7, align 4
  %v9_a450 = icmp eq i32 %v3_a194, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  %v3_a454 = load i32, i32* @r5, align 4
  %v4_a454 = add i32 %v3_a454, 20
  %v5_a454 = inttoptr i32 %v4_a454 to i16*
  store i16 %v1_a448, i16* %v5_a454, align 2
  br i1 %v9_a450, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328
  %v0_a45c = call i32 @function_deb8()
  %v1_a45c = trunc i32 %v0_a45c to i16
  %v3_a460 = load i32, i32* @r6, align 4
  %v4_a460 = add i32 %v3_a460, 2
  %v5_a460 = inttoptr i32 %v4_a460 to i16*
  store i16 %v1_a45c, i16* %v5_a460, align 2
  br label %dec_label_pc_a334

dec_label_pc_a468:                                ; preds = %dec_label_pc_a154
  %v0_a468 = load i32, i32* @sb, align 4
  %v1_a46c = call i32 @function_10b64(i32 %v0_a468)
  br label %dec_label_pc_a470

dec_label_pc_a470:                                ; preds = %dec_label_pc_a048, %dec_label_pc_a468
  %v1_a478 = phi i32 [ %v3_a144, %dec_label_pc_a048 ], [ %v1_a46c, %dec_label_pc_a468 ]
  store i32 %v3_a048, i32* %r4.global-to-local, align 4
  store i32 %v27_a048, i32* %lr.global-to-local, align 4
  ret i32 %v1_a478

; uselistorder directives
  uselistorder i32 %v1_a42c, { 1, 0 }
  uselistorder i32 %v0_a3e8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a3b0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a378, { 1, 0 }
  uselistorder i1 %v3_a314, { 1, 0 }
  uselistorder i32 %v1_a2c4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a22c, { 1, 0 }
  uselistorder i32 %v3_a1c4, { 1, 0 }
  uselistorder i32 %v3_a1c0, { 1, 0 }
  uselistorder i32 %v0_a184, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a180, { 1, 0, 2 }
  uselistorder i32 %v0_a17c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a174, { 1, 0 }
  uselistorder i1 %v7_a148, { 1, 0 }
  uselistorder i32 %v3_a144, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a0e4, { 1, 0 }
  uselistorder i32 %v5_a0b8, { 1, 0 }
  uselistorder i32 %v5_a07c, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a470, { 1, 0 }
  uselistorder label %dec_label_pc_a334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a2e4, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a480:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a480 = load i32, i32* @sb, align 4
  %v27_a480 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4a0 = call i32 @function_11ea4(i32 %arg1, i32 4)
  %v0_a4a4 = load i32, i32* @r5, align 4
  store i32 %v0_a4a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4b0 = load i32, i32* @r4, align 4
  store i32 %v0_a4b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4b8 = inttoptr i32 %v0_a4a4 to i32*
  %v6_a4b8 = call i32 @function_8570(i32 %v0_a4b0, i32* %v5_a4b8, i32 2, i32 0)
  %v1_a4c4 = urem i32 %v6_a4b8, 256
  store i32 %v1_a4c4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a4d0 = load i32, i32* @r4, align 4
  store i32 %v0_a4d0, i32* %r0.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r5, align 4
  store i32 %v0_a4d4, i32* %r1.global-to-local, align 4
  %v6_a4dc = inttoptr i32 %v0_a4d4 to i32*
  %v7_a4dc = call i32 @function_8570(i32 %v0_a4d0, i32* %v6_a4dc, i32 3, i32 65535)
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_8570(i32 %v0_a4ec, i32* %v5_a4f4, i32 4, i32 64)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v6_a514 = inttoptr i32 %v0_a500 to i32*
  %v7_a514 = call i32 @function_8570(i32 %v0_a50c, i32* %v6_a514, i32 5, i32 0)
  %v1_a520 = urem i32 %v7_a514, 256
  store i32 %v1_a520, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v0_a530 = load i32, i32* @r5, align 4
  store i32 %v0_a530, i32* %r1.global-to-local, align 4
  %v5_a538 = inttoptr i32 %v0_a530 to i32*
  %v6_a538 = call i32 @function_8570(i32 %v0_a52c, i32* %v5_a538, i32 6, i32 65535)
  %v0_a53c = load i32, i32* @r5, align 4
  store i32 %v0_a53c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a550 = inttoptr i32 %v0_a53c to i32*
  %v6_a550 = call i32 @function_8570(i32 %v0_a548, i32* %v5_a550, i32 7, i32 53)
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  %v0_a560 = load i32, i32* @r4, align 4
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a56c = inttoptr i32 %v0_a55c to i32*
  %v6_a56c = call i32 @function_8570(i32 %v0_a560, i32* %v5_a56c, i32 9, i32 65535)
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a57c = load i32, i32* @r4, align 4
  store i32 %v0_a57c, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a584 = inttoptr i32 %v0_a570 to i32*
  %v6_a584 = call i32 @function_8570(i32 %v0_a57c, i32* %v5_a584, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a590 = load i32, i32* @r5, align 4
  store i32 %v0_a590, i32* %r1.global-to-local, align 4
  store i32 %v6_a584, i32* %sb.global-to-local, align 4
  %v0_a598 = load i32, i32* @r4, align 4
  store i32 %v0_a598, i32* %r0.global-to-local, align 4
  %v4_a59c = inttoptr i32 %v0_a590 to i32*
  %v5_a59c = call i32 @function_8190(i32 %v0_a598, i32* %v4_a59c, i32 8, i32 0)
  store i32 %v5_a59c, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5a8 = call i32 @function_fb64(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5b4 = call i32 @function_faa0(i32 21, i32* null)
  store i32 %v3_a5b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5bc = call i32 @function_10770(i32 %v3_a5b4, i32 0)
  store i32 %v2_a5bc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5c8 = call i32 @function_fac4(i32 21)
  store i32 %v1_a5c8, i32* %r0.global-to-local, align 4
  %v0_a5cc = load i32, i32* @r4, align 4
  %v1_a5cc = icmp slt i32 %v0_a5cc, 0
  %v2_a5cc = icmp eq i32 %v0_a5cc, 0
  store i1 %v2_a5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a5cc, label %dec_label_pc_aac4, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_a480
  %v2_a5d8 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a5d8, i32* @sl, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r1.global-to-local, align 4
  store i32 %v0_a5cc, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @function_108fc(i32 %v0_a5cc)
  store i32 %v1_a5e8, i32* @r5, align 4
  %v0_a5f0 = load i32, i32* @r4, align 4
  store i32 %v0_a5f0, i32* %r0.global-to-local, align 4
  %v1_a5f4 = call i32 @function_10b64(i32 %v0_a5f0)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a5fc = call i32 @function_fb64(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a608 = call i32 @function_faa0(i32 22, i32* null)
  %v0_a60c = load i32, i32* @r5, align 4
  store i32 %v0_a60c, i32* @r1, align 4
  store i32 %v3_a608, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r0.global-to-local, align 4
  %v3_a618 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a618 = call i32 @function_103f4(i8* %v3_a618, i32 %v0_a60c, i32 %v3_a608)
  store i32 %v4_a618, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a624 = call i32 @function_fac4(i32 22)
  store i32 %v1_a624, i32* %r0.global-to-local, align 4
  %v0_a628 = load i32, i32* @r6, align 4
  %v7_a628 = icmp eq i32 %v0_a628, -1
  store i1 %v7_a628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a628, label %dec_label_pc_aac4, label %dec_label_pc_a630

dec_label_pc_a630:                                ; preds = %dec_label_pc_a5d4
  %v0_a630 = load i32, i32* @r5, align 4
  %v9_a630 = icmp eq i32 %v0_a630, %v0_a628
  store i1 %v9_a630, i1* %cpsr_z.global-to-local, align 1
  %v7_a634 = icmp sgt i32 %v0_a630, %v0_a628
  br i1 %v7_a634, label %dec_label_pc_a638, label %dec_label_pc_aac4

dec_label_pc_a638:                                ; preds = %dec_label_pc_a630
  %v0_a638 = load i32, i32* @sl, align 4
  %v2_a638 = add i32 %v0_a638, %v0_a628
  store i32 %v2_a638, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a664 = add i32 %v0_a630, -1
  br label %dec_label_pc_a65c

dec_label_pc_a648:                                ; preds = %dec_label_pc_a684, %bb103
  %v9_a648 = icmp eq i32 %v1_a664, %v0_a650
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a690, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a648, %bb
  %v0_a68029 = phi i32 [ %v0_a680, %dec_label_pc_a674 ], [ %v0_a68030, %dec_label_pc_a648 ], [ %v0_a680, %bb ]
  %v0_a66025 = phi i32 [ 0, %dec_label_pc_a674 ], [ %v0_a66026, %dec_label_pc_a648 ], [ 0, %bb ]
  %v1_a650 = add i32 %v0_a650, 1
  %v9_a654 = icmp eq i32 %v1_a650, %v0_a630
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_aac4, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a638
  %v0_a650 = phi i32 [ %v1_a650, %dec_label_pc_a650 ], [ %v0_a628, %dec_label_pc_a638 ]
  %v0_a680 = phi i32 [ %v0_a68029, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a660 = phi i32 [ %v0_a66025, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a668 = phi i32 [ %v1_a668, %dec_label_pc_a650 ], [ %v2_a638, %dec_label_pc_a638 ]
  %v1_a65c = inttoptr i32 %v0_a668 to i8*
  %v2_a65c = load i8, i8* %v1_a65c, align 1
  %v3_a65c = zext i8 %v2_a65c to i32
  store i32 %v3_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp eq i32 %v0_a660, 0
  store i1 %v2_a660, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v1_a668 = add i32 %v0_a668, 1
  store i32 %v1_a668, i32* %r2.global-to-local, align 4
  %v1_a66c = add nsw i32 %v3_a65c, -48
  store i32 %v1_a66c, i32* %r1.global-to-local, align 4
  br i1 %v2_a660, label %dec_label_pc_a674, label %dec_label_pc_a684

dec_label_pc_a674:                                ; preds = %dec_label_pc_a65c
  %v7_a674 = icmp eq i8 %v2_a65c, 9
  store i1 %v7_a674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a674, label %dec_label_pc_a650, label %bb

bb:                                               ; preds = %dec_label_pc_a674
  %v8_a678 = icmp eq i8 %v2_a65c, 32
  store i1 %v8_a678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a678, label %dec_label_pc_a650, label %dec_label_pc_a680

dec_label_pc_a680:                                ; preds = %bb
  %v1_a680 = add i32 %v0_a680, 1
  store i32 %v1_a680, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a684

dec_label_pc_a684:                                ; preds = %dec_label_pc_a65c, %dec_label_pc_a680
  %v0_a68030 = phi i32 [ %v0_a680, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v0_a66026 = phi i32 [ %v0_a660, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v7_a684 = icmp eq i8 %v2_a65c, 46
  store i1 %v7_a684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a684, label %dec_label_pc_a648, label %bb103

bb103:                                            ; preds = %dec_label_pc_a684
  %v8_a688 = icmp eq i32 %v1_a66c, 9
  store i1 %v8_a688, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a66c, 10
  br i1 %tmp, label %dec_label_pc_a648, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a648, %bb103
  %v0_a650.lcssa = phi i32 [ %v1_a664, %dec_label_pc_a648 ], [ %v0_a650, %bb103 ]
  %v2_a694 = sub i32 %v0_a650.lcssa, %v0_a628
  store i32 %v2_a694, i32* @r4, align 4
  %v2_a698 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a638, i32* %r1.global-to-local, align 4
  store i32 %v2_a698, i32* %r0.global-to-local, align 4
  store i32 %v2_a694, i32* %r2.global-to-local, align 4
  %v3_a6a8 = call i32 @function_10114(i32 %v2_a698, i32 %v2_a638, i32 %v2_a694)
  %v2_a6ac = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6b0 = load i32, i32* @r4, align 4
  %v2_a6b0 = add i32 %v1_a6b0, %v2_a6ac
  store i32 %v2_a6b0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a698, i32* @r0, align 4
  %v3_a6bc = add i32 %v2_a6b0, -36
  %v4_a6bc = inttoptr i32 %v3_a6bc to i8*
  store i8 0, i8* %v4_a6bc, align 1
  %v1_a6c0 = call i32 @function_110c4(i32 %v2_a698)
  store i32 %v1_a6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6c0, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_a6c811:                              ; preds = %dec_label_pc_aac4
  unreachable

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_ab2c, %dec_label_pc_ab20, %dec_label_pc_ab10, %dec_label_pc_ab00, %dec_label_pc_a690
  %v1_aafc49 = phi i32 [ %v1_aac8, %dec_label_pc_ab2c ], [ %v1_aac8, %dec_label_pc_ab20 ], [ %v1_aac8, %dec_label_pc_ab10 ], [ %v1_aac8, %dec_label_pc_ab00 ], [ %v1_a6c0, %dec_label_pc_a690 ]
  %v0_a6c8 = load i32, i32* @r7, align 4
  %v2_a6c8 = icmp eq i32 %v0_a6c8, 0
  store i1 %v2_a6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a6c8, label %dec_label_pc_aaf0, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a6c8
  store i32 %v0_a6c8, i32* %r0.global-to-local, align 4
  %v1_a6d4 = inttoptr i32 %v0_a6c8 to i8*
  %v2_a6d4 = call i32 @function_100a4(i8* %v1_a6d4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d4, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a6e8 = call i32 @function_1133c(i32 2, i32 3, i32 17)
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v7_a6ec = icmp eq i32 %v3_a6e8, -1
  store i1 %v7_a6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6ec, label %dec_label_pc_aaf0, label %dec_label_pc_a6f8

dec_label_pc_a6f8:                                ; preds = %dec_label_pc_a6d0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a700 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a700, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a714 = call i32 @function_112f8(i32 %v3_a6e8, i32 0, i32 3, i32 %v6_a700, i32 4)
  store i32 %v5_a714, i32* %r0.global-to-local, align 4
  %v7_a718 = icmp eq i32 %v5_a714, -1
  store i1 %v7_a718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a718, label %dec_label_pc_aae8, label %dec_label_pc_a720

dec_label_pc_a720:                                ; preds = %dec_label_pc_a6f8
  %v0_a728 = load i32, i32* %sb.global-to-local, align 4
  %v1_a728 = urem i32 %v0_a728, 256
  store i32 %v1_a728, i32* %sb.global-to-local, align 4
  %v3_a730 = mul i32 %v6_a538, 65536
  store i32 %v3_a730, i32* %r3.global-to-local, align 4
  %v5_a73c = trunc i32 %v0_a728 to i8
  %v0_a740 = load i32, i32* @r8, align 4
  %v2_a740 = icmp eq i32 %v0_a740, 0
  store i1 %v2_a740, i1* %cpsr_z.global-to-local, align 1
  %v3_a744 = urem i32 %v7_a4dc, 65536
  store i32 %v3_a744, i32* %r0.global-to-local, align 4
  %v3_a74c = urem i32 %v6_a538, 65536
  store i32 %v3_a74c, i32* %r2.global-to-local, align 4
  %v3_a750 = mul i32 %v6_a550, 65536
  %v3_a754 = mul i32 %v6_a56c, 65536
  store i32 %v3_a754, i32* %ip.global-to-local, align 4
  br i1 %v2_a740, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a720
  %v5_a75c = sext i8 %v5_a73c to i32
  store i32 %v5_a75c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a720, %bb104
  %v2_a788 = phi i32 [ %v3_a74c, %dec_label_pc_a720 ], [ %v5_a75c, %bb104 ]
  %v3_a768 = urem i32 %v6_a550, 65536
  store i32 %v3_a768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a770 = urem i32 %v6_a56c, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a788 = load i32, i32* @r6, align 4
  br i1 %v2_a740, label %.dec_label_pc_a970.preheader_crit_edge, label %dec_label_pc_a790

.dec_label_pc_a970.preheader_crit_edge:           ; preds = %bb105
  %v3_a788 = add i32 %v1_a788, %v2_a788
  store i32 %v3_a788, i32* @r7, align 4
  %.pre = sext i8 %v5_a73c to i32
  br label %dec_label_pc_a970.preheader

dec_label_pc_a790:                                ; preds = %bb105
  %v2_a790 = add i32 %v1_a788, %v1_a728
  %v3_a794 = mul i32 %v2_a790, 65536
  %v1_a79c = add i32 %v3_a794, 1769472
  %v1_a7a0 = add i32 %v3_a794, 3080192
  %tmp106 = udiv i32 %v1_a7a0, 256
  %v3_a7b4 = and i32 %tmp106, 65280
  %v4_a7c4 = udiv i32 %v1_a7a0, 16777216
  %v5_a7c4 = or i32 %v3_a7b4, %v4_a7c4
  store i32 %v5_a7c4, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a538 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a4dc, 256
  %v3_a7d8 = and i32 %tmp107, 65280
  store i32 %v3_a7d8, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a4dc, 256
  %v4_a7dc = urem i32 %tmp108, 256
  %v5_a7dc = or i32 %v4_a7dc, %v3_a7d8
  store i32 %v5_a7dc, i32* @sb, align 4
  store i32 %v3_a754, i32* %r2.global-to-local, align 4
  store i32 %v3_a750, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a550, 256
  %v3_a7f0 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a56c, 256
  %v3_a7f4 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a79c, 256
  %v3_a7f8 = and i32 %tmp111, 65280
  store i32 %v3_a7f8, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a550, 256
  %v4_a7fc = urem i32 %tmp112, 256
  %v5_a7fc = or i32 %v4_a7fc, %v3_a7f0
  store i32 %v5_a7fc, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a56c, 256
  %v4_a800 = urem i32 %tmp113, 256
  %v5_a800 = or i32 %v4_a800, %v3_a7f4
  store i32 %v5_a800, i32* @r4, align 4
  %v1_a804 = add i32 %v1_a788, 1
  store i32 %v1_a804, i32* %r3.global-to-local, align 4
  %v4_a808 = udiv i32 %v1_a79c, 16777216
  %v5_a808 = or i32 %v4_a808, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4b8, 16777216
  %v4_a860 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a4f4, 16777216
  %v4_a86c = sdiv i32 %sext8, 16777216
  %v4_a88c = sext i8 %v5_a73c to i32
  %sext9 = mul nuw i32 %v5_a7fc, 65536
  %v7_a8a0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a800, 65536
  %v4_a8c8 = sdiv i32 %sext10, 65536
  %v1_a868 = trunc i32 %v4_a860 to i8
  %extract.t = trunc i32 %v4_a86c to i8
  %v1_a890 = add nsw i32 %v4_a88c, 41
  %sext120 = mul i32 %v5_a808, 65536
  %v3_a8a0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a820

dec_label_pc_a820:                                ; preds = %dec_label_pc_a940, %dec_label_pc_a790
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a828 = call i32 @function_11ea4(i32 600, i32 1)
  store i32 %v2_a828, i32* %r0.global-to-local, align 4
  store i32 %v2_a4a0, i32* %ip.global-to-local, align 4
  %v3_a830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a830, i32* %r3.global-to-local, align 4
  %v2_a834 = load i32, i32* @r5, align 4
  %v5_a834 = mul i32 %v2_a834, 4
  %v6_a834 = add i32 %v5_a834, %v2_a4a0
  %v7_a834 = inttoptr i32 %v6_a834 to i32*
  store i32 %v2_a828, i32* %v7_a834, align 4
  %v0_a838 = load i32, i32* %ip.global-to-local, align 4
  %v1_a838 = load i32, i32* %r3.global-to-local, align 4
  %v4_a838 = mul i32 %v1_a838, 4
  %v5_a838 = add i32 %v4_a838, %v0_a838
  %v6_a838 = inttoptr i32 %v5_a838 to i32*
  %v7_a838 = load i32, i32* %v6_a838, align 4
  store i32 %v7_a838, i32* %r1.global-to-local, align 4
  %v1_a83c = inttoptr i32 %v7_a838 to i8*
  %v2_a83c = load i8, i8* %v1_a83c, align 1
  %tmp127 = urem i8 %v2_a83c, 16
  %v1_a840 = zext i8 %tmp127 to i32
  %v1_a844 = or i32 %v1_a840, 64
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v1_a848 = trunc i32 %v1_a844 to i8
  store i8 %v1_a848, i8* %v1_a83c, align 1
  %v0_a84c = load i32, i32* %r1.global-to-local, align 4
  %v1_a84c = inttoptr i32 %v0_a84c to i8*
  %v2_a84c = load i8, i8* %v1_a84c, align 1
  %v3_a84c = zext i8 %v2_a84c to i32
  %v1_a850 = and i32 %v3_a84c, 240
  %v1_a854 = or i32 %v1_a850, 5
  store i32 %v1_a854, i32* %r3.global-to-local, align 4
  store i32 %v1_a520, i32* %lr.global-to-local, align 4
  %v1_a85c = trunc i32 %v1_a854 to i8
  store i8 %v1_a85c, i8* %v1_a84c, align 1
  store i32 %v4_a860, i32* %r0.global-to-local, align 4
  %v0_a864 = load i32, i32* %lr.global-to-local, align 4
  %v2_a864 = icmp eq i32 %v0_a864, 0
  store i1 %v2_a864, i1* %cpsr_z.global-to-local, align 1
  %v2_a868 = load i32, i32* %r1.global-to-local, align 4
  %v3_a868 = add i32 %v2_a868, 1
  %v4_a868 = inttoptr i32 %v3_a868 to i8*
  store i8 %v1_a868, i8* %v4_a868, align 1
  store i32 %v4_a86c, i32* %r2.global-to-local, align 4
  %v0_a870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a870, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a820
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a874 = load i32, i32* %r1.global-to-local, align 4
  %v4_a874 = add i32 %v3_a874, 6
  %v5_a874 = inttoptr i32 %v4_a874 to i16*
  store i16 64, i16* %v5_a874, align 2
  %v0_a87c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a87c.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a820, %bb114
  %v0_a87c.off0 = phi i8 [ %extract.t, %dec_label_pc_a820 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a87c = load i32, i32* %r1.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 8
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v0_a87c.off0, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* %r3.global-to-local, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %r1.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 9
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v2_a888 = load i32, i32* @global_var_20780.45, align 4
  %v0_a890 = load i32, i32* %r1.global-to-local, align 4
  %v2_a894 = add i32 %v1_a890, %v0_a890
  store i32 %v2_a894, i32* @r4, align 4
  %v2_a898 = add i32 %v0_a890, 12
  %v3_a898 = inttoptr i32 %v2_a898 to i32*
  store i32 %v2_a888, i32* %v3_a898, align 4
  store i32 %v3_a8a0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8a0, i32* %r3.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8a4 = add i32 %v0_a8a4, 20
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  %v0_a8a8 = load i32, i32* @sl, align 4
  %v1_a8a8 = trunc i32 %v0_a8a8 to i16
  %v3_a8a8 = add i32 %v0_a8a4, 2
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i16*
  store i16 %v1_a8a8, i16* %v4_a8a8, align 2
  %v0_a8ac = load i32, i32* @sb, align 4
  %v1_a8ac = trunc i32 %v0_a8ac to i16
  %v2_a8ac = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ac = add i32 %v2_a8ac, 4
  %v4_a8ac = inttoptr i32 %v3_a8ac to i16*
  store i16 %v1_a8ac, i16* %v4_a8ac, align 2
  %v0_a8b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8b0 = trunc i32 %v0_a8b0 to i16
  %v2_a8b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b0 = add i32 %v2_a8b0, 4
  %v4_a8b0 = inttoptr i32 %v3_a8b0 to i16*
  store i16 %v1_a8b0, i16* %v4_a8b0, align 2
  %v0_a8b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8b4 = trunc i32 %v0_a8b4 to i16
  %v2_a8b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b4 = add i32 %v2_a8b4, 2
  %v4_a8b4 = inttoptr i32 %v3_a8b4 to i16*
  store i16 %v1_a8b4, i16* %v4_a8b4, align 2
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 20
  %v4_a8bc = inttoptr i32 %v3_a8bc to i16*
  store i16 %rev, i16* %v4_a8bc, align 2
  store i32 %v4_a88c, i32* %ip.global-to-local, align 4
  %v0_a8c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8c4 = add i32 %v0_a8c4, 28
  store i32 %v1_a8c4, i32* %r0.global-to-local, align 4
  store i32 %v4_a8c8, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a8d4 = add i32 %v0_a8c4, 30
  %v4_a8d4 = inttoptr i32 %v3_a8d4 to i16*
  store i16 1, i16* %v4_a8d4, align 2
  %v0_a8d8 = load i32, i32* @lr, align 4
  %v1_a8d8 = trunc i32 %v0_a8d8 to i16
  %v2_a8d8 = load i32, i32* %r0.global-to-local, align 4
  %v3_a8d8 = add i32 %v2_a8d8, 4
  %v4_a8d8 = inttoptr i32 %v3_a8d8 to i16*
  store i16 %v1_a8d8, i16* %v4_a8d8, align 2
  %v0_a8dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a8dc = trunc i32 %v0_a8dc to i8
  %v2_a8dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8dc = add i32 %v2_a8dc, 40
  %v4_a8dc = inttoptr i32 %v3_a8dc to i8*
  store i8 %v1_a8dc, i8* %v4_a8dc, align 1
  %v0_a8e0 = load i32, i32* @fp, align 4
  %v1_a8e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8e0 = add i32 %v1_a8e0, 16
  %v3_a8e0 = inttoptr i32 %v2_a8e0 to i32*
  store i32 %v0_a8e0, i32* %v3_a8e0, align 4
  %v0_a8e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8e4 = trunc i32 %v0_a8e4 to i16
  %v2_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 28
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i16*
  store i16 %v1_a8e4, i16* %v4_a8e4, align 2
  %v0_a8e8 = load i32, i32* @r4, align 4
  %v1_a8e8 = add i32 %v0_a8e8, 1
  store i32 %v1_a8e8, i32* %r0.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r7, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 %v1_a804, i32* %r2.global-to-local, align 4
  %v3_a8f4 = call i32 @function_10114(i32 %v1_a8e8, i32 %v0_a8ec, i32 %v1_a804)
  store i32 %v3_a8f4, i32* %r0.global-to-local, align 4
  %v0_a8f8 = load i32, i32* @r6, align 4
  %v2_a8f8 = icmp eq i32 %v0_a8f8, 0
  store i1 %v2_a8f8, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a8f8, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a908

bb116:                                            ; preds = %.thread13
  %v5_a8fc = load i32, i32* @r4, align 4
  store i32 %v5_a8fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a940

dec_label_pc_a908:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r4, align 4
  store i32 %v0_a90c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a914

dec_label_pc_a914:                                ; preds = %.thread20, %dec_label_pc_a908
  %v0_a920 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v0_a924 = phi i32 [ %v0_a938, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v1_a914 = load i32, i32* @r7, align 4
  %v2_a914 = add i32 %v1_a914, %v0_a924
  %v3_a914 = inttoptr i32 %v2_a914 to i8*
  %v4_a914 = load i8, i8* %v3_a914, align 1
  %v6_a914 = zext i8 %v4_a914 to i32
  store i32 %v6_a914, i32* %r3.global-to-local, align 4
  %v7_a918 = icmp eq i8 %v4_a914, 46
  store i1 %v7_a918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a918, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a914
  %v1_a92016 = add nsw i32 %v0_a920, 1
  store i32 %v1_a92016, i32* %r2.global-to-local, align 4
  %v1_a92418 = add i32 %v0_a924, 1
  store i32 %v1_a92418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a914
  %v2_a91c = load i32, i32* @r4, align 4
  %v3_a91c = add i32 %v2_a91c, %v0_a924
  store i32 %v3_a91c, i32* %r3.global-to-local, align 4
  %v1_a920 = add nsw i32 %v0_a920, 1
  store i32 %v1_a920, i32* %r2.global-to-local, align 4
  %v1_a924 = add i32 %v0_a924, 1
  store i32 %v1_a924, i32* %r1.global-to-local, align 4
  %v2_a928 = trunc i32 %v0_a920 to i8
  %v3_a928 = load i32, i32* %r0.global-to-local, align 4
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v2_a928, i8* %v4_a928, align 1
  %v0_a92c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a92c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a92c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a92c = phi i32 [ %v1_a92c.pre, %bb117.bb118_crit_edge ], [ %v1_a92016, %.thread59 ]
  %v2_a92c = urem i32 %v1_a92c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a930 = load i32, i32* %r3.global-to-local, align 4
  %v2_a930 = add i32 %v1_a930, 1
  store i32 %v2_a930, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a92c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a938 = load i32, i32* %r1.global-to-local, align 4
  %v1_a938 = load i32, i32* @r6, align 4
  %v9_a938 = icmp eq i32 %v0_a938, %v1_a938
  store i1 %v9_a938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a938, label %dec_label_pc_a940.loopexit, label %dec_label_pc_a914

dec_label_pc_a940.loopexit:                       ; preds = %.thread20
  %v2_a940.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a940

dec_label_pc_a940:                                ; preds = %bb116, %dec_label_pc_a940.loopexit
  %v0_a940.off0 = phi i8 [ %extract.t126, %dec_label_pc_a940.loopexit ], [ 0, %bb116 ]
  %v2_a940 = phi i32 [ %v2_a940.pre, %dec_label_pc_a940.loopexit ], [ %v5_a8fc, %bb116 ]
  %v3_a940 = inttoptr i32 %v2_a940 to i8*
  store i8 %v0_a940.off0, i8* %v3_a940, align 1
  %v3_a944 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a944, i32* %r3.global-to-local, align 4
  %v1_a948 = add i32 %v3_a944, 1
  store i32 %v1_a948, i32* @r5, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  %v1_a94c = load i32, i32* @r6, align 4
  %v2_a94c = add i32 %v1_a94c, %v0_a94c
  store i32 %v2_a94c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a954 = load i32, i32* @r8, align 4
  %v9_a954 = icmp eq i32 %v0_a954, %v1_a948
  store i1 %v9_a954, i1* %cpsr_z.global-to-local, align 1
  %v3_a958 = add i32 %v2_a94c, 4
  %v4_a958 = inttoptr i32 %v3_a958 to i16*
  store i16 256, i16* %v4_a958, align 2
  %v0_a95c = load i32, i32* @lr, align 4
  %v1_a95c = trunc i32 %v0_a95c to i16
  %v2_a95c = load i32, i32* %r2.global-to-local, align 4
  %v3_a95c = add i32 %v2_a95c, 2
  %v4_a95c = inttoptr i32 %v3_a95c to i16*
  store i16 %v1_a95c, i16* %v4_a95c, align 2
  %v0_a960 = load i32, i32* @r5, align 4
  store i32 %v0_a960, i32* %stack_var_-44, align 4
  %v8_a964 = icmp sgt i32 %v0_a954, %v1_a948
  br i1 %v8_a964, label %dec_label_pc_a820, label %dec_label_pc_a968

dec_label_pc_a968:                                ; preds = %dec_label_pc_a940
  store i32 %v4_a88c, i32* %r0.global-to-local, align 4
  %v0_a96c = load i32, i32* @r6, align 4
  %v2_a96c = add i32 %v0_a96c, %v4_a88c
  store i32 %v2_a96c, i32* @r7, align 4
  %v0_a974.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a970.preheader

dec_label_pc_a970.preheader:                      ; preds = %.dec_label_pc_a970.preheader_crit_edge, %dec_label_pc_a968
  %v4_a9d4.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a970.preheader_crit_edge ], [ %v4_a88c, %dec_label_pc_a968 ]
  %v0_a974.pre = phi i32 [ 0, %.dec_label_pc_a970.preheader_crit_edge ], [ %v0_a974.pre.pre, %dec_label_pc_a968 ]
  %v3_a9a0 = icmp eq i32 %v3_a744, 65535
  %v3_a9b0 = icmp eq i32 %v3_a74c, 65535
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68, %dec_label_pc_a970.preheader
  %v0_a974 = phi i32 [ %v0_a974.pre, %dec_label_pc_a970.preheader ], [ 0, %dec_label_pc_aa68 ], [ 0, %dec_label_pc_a970 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a974 = icmp eq i32 %v0_a974, 0
  store i1 %v2_a974, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a974, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a984 = load i32, i32* @r7, align 4
  %v1_a984 = add i32 %v0_a984, 27
  store i32 %v1_a984, i32* @sb, align 4
  %v1_a988 = add i32 %v0_a984, 47
  store i32 %v1_a988, i32* @sl, align 4
  br label %dec_label_pc_a98c

dec_label_pc_a98c:                                ; preds = %dec_label_pc_a9d0, %dec_label_pc_a980
  %v1_a998 = phi i32 [ %v1_aa58, %dec_label_pc_a9d0 ], [ 0, %dec_label_pc_a980 ]
  store i32 %v2_a4a0, i32* %r3.global-to-local, align 4
  store i32 %v3_a744, i32* %ip.global-to-local, align 4
  %v4_a998 = mul i32 %v1_a998, 4
  %v5_a998 = add i32 %v4_a998, %v2_a4a0
  %v6_a998 = inttoptr i32 %v5_a998 to i32*
  %v7_a998 = load i32, i32* %v6_a998, align 4
  store i32 %v7_a998, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9a0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9a4 = add i32 %v7_a998, 20
  store i32 %v1_a9a4, i32* @r6, align 4
  br i1 %v3_a9a0, label %dec_label_pc_aa7c, label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %dec_label_pc_a98c
  store i32 %v3_a74c, i32* @lr, align 4
  store i1 %v3_a9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9b0, label %dec_label_pc_aa90, label %dec_label_pc_a9b8

dec_label_pc_a9b8:                                ; preds = %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge, %dec_label_pc_a9ac
  %v1_a9bc = phi i32 [ %v1_a9bc.pre, %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge ], [ 65535, %dec_label_pc_a9ac ]
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v9_a9bc = icmp eq i32 %v3_a768, %v1_a9bc
  store i1 %v9_a9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9bc, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_a9c4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v1_a9c8 = phi i32 [ %v1_aa9c, %dec_label_pc_aa90 ], [ %v1_a9bc, %dec_label_pc_a9b8 ]
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v9_a9c8 = icmp eq i32 %v3_a770, %v1_a9c8
  store i1 %v9_a9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9c8, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_a9d0:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4, %dec_label_pc_aab8
  %v0_a9d0 = load i32, i32* @r4, align 4
  %v1_a9d0 = add i32 %v0_a9d0, 41
  store i32 %v1_a9d0, i32* %r0.global-to-local, align 4
  store i32 %v4_a9d4.pre-phi, i32* %r1.global-to-local, align 4
  %v2_a9d8 = call i32 @function_df7c(i32 %v1_a9d0, i32 %v4_a9d4.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9e0 = load i32, i32* @r4, align 4
  %v3_a9e0 = add i32 %v2_a9e0, 10
  %v4_a9e0 = inttoptr i32 %v3_a9e0 to i16*
  store i16 0, i16* %v4_a9e0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a9e8 = load i32, i32* @r4, align 4
  store i32 %v0_a9e8, i32* @r0, align 4
  %v2_a9ec = call i32 @function_c848(i32 %v0_a9e8, i32 20)
  %v3_a9ec = trunc i32 %v2_a9ec to i16
  store i32 %v2_a9ec, i32* %r0.global-to-local, align 4
  %v3_a9f0 = load i32, i32* @r4, align 4
  %v4_a9f0 = add i32 %v3_a9f0, 10
  %v5_a9f0 = inttoptr i32 %v4_a9f0 to i16*
  store i16 %v3_a9ec, i16* %v5_a9f0, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a9f8 = load i32, i32* @r6, align 4
  %v3_a9f8 = add i32 %v2_a9f8, 6
  %v4_a9f8 = inttoptr i32 %v3_a9f8 to i16*
  store i16 0, i16* %v4_a9f8, align 2
  %v0_a9fc = load i32, i32* @r6, align 4
  store i32 %v0_a9fc, i32* @r1, align 4
  %v1_aa00 = add i32 %v0_a9fc, 4
  %v2_aa00 = inttoptr i32 %v1_aa00 to i16*
  %v3_aa00 = load i16, i16* %v2_aa00, align 2
  %v4_aa00 = zext i16 %v3_aa00 to i32
  store i32 %v4_aa00, i32* %r2.global-to-local, align 4
  %v0_aa04 = load i32, i32* @sb, align 4
  store i32 %v0_aa04, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v4_aa0c = call i32 @function_c898(i32 %v0_aa08, i32 %v0_a9fc, i32 %v4_aa00, i32 %v0_aa04)
  %v5_aa0c = trunc i32 %v4_aa0c to i16
  store i32 %v4_aa0c, i32* %r0.global-to-local, align 4
  %v3_aa10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa10, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa18 = mul i32 %v3_aa10, 32
  store i32 %v3_aa18, i32* %ip.global-to-local, align 4
  %v3_aa1c = load i32, i32* @r6, align 4
  %v4_aa1c = add i32 %v3_aa1c, 6
  %v5_aa1c = inttoptr i32 %v4_aa1c to i16*
  store i16 %v5_aa0c, i16* %v5_aa1c, align 2
  %v0_aa20 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa20 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa20, -8
  %v5_aa20 = add i32 %v0_aa20, %tmp128
  store i32 %v5_aa20, i32* %ip.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r6, align 4
  %v1_aa24 = add i32 %v0_aa24, 2
  %v2_aa24 = inttoptr i32 %v1_aa24 to i16*
  %v3_aa24 = load i16, i16* %v2_aa24, align 2
  %v1_aa28 = load i32, i32* @lr, align 4
  %v2_aa28 = add i32 %v1_aa28, %v5_aa20
  store i32 %v2_aa28, i32* %ip.global-to-local, align 4
  %v3_aa2c = add i32 %v2_aa28, 2
  %v4_aa2c = inttoptr i32 %v3_aa2c to i16*
  store i16 %v3_aa24, i16* %v4_aa2c, align 2
  %v0_aa30 = load i32, i32* @fp, align 4
  %v1_aa30 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa30 = add i32 %v1_aa30, 4
  %v3_aa30 = inttoptr i32 %v2_aa30 to i32*
  store i32 %v0_aa30, i32* %v3_aa30, align 4
  %v0_aa34 = load i32, i32* @r4, align 4
  store i32 %v0_aa34, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v0_aa40 = load i32, i32* @sl, align 4
  store i32 %v0_aa40, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa48 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa50 = call i32 @function_112b8(i32 %v3_a6e8, i32 %v0_aa34, i32 %v0_aa40, i32 16384, i32 %v0_aa48, i32 16)
  %v3_aa54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa54, i32* %r3.global-to-local, align 4
  %v1_aa58 = add i32 %v3_aa54, 1
  store i32 %v1_aa58, i32* %r0.global-to-local, align 4
  %v0_aa5c = load i32, i32* @r8, align 4
  %v9_aa5c = icmp eq i32 %v0_aa5c, %v1_aa58
  store i1 %v9_aa5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa58, i32* %stack_var_-44, align 4
  %v8_aa64 = icmp sgt i32 %v0_aa5c, %v1_aa58
  br i1 %v8_aa64, label %dec_label_pc_a98c, label %dec_label_pc_aa68

dec_label_pc_aa68:                                ; preds = %dec_label_pc_a9d0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa6c = icmp eq i32 %v0_aa5c, 0
  store i1 %v2_aa6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aa6c, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_a98c
  %v0_aa7c = call i32 @function_deb8()
  %v1_aa7c = trunc i32 %v0_aa7c to i16
  store i32 %v0_aa7c, i32* %r0.global-to-local, align 4
  store i32 %v3_a74c, i32* @lr, align 4
  %v1_aa84 = load i32, i32* @r5, align 4
  %v9_aa84 = icmp eq i32 %v3_a74c, %v1_aa84
  store i1 %v9_aa84, i1* %cpsr_z.global-to-local, align 1
  %v3_aa88 = load i32, i32* @r4, align 4
  %v4_aa88 = add i32 %v3_aa88, 4
  %v5_aa88 = inttoptr i32 %v4_aa88 to i16*
  store i16 %v1_aa7c, i16* %v5_aa88, align 2
  br i1 %v9_aa84, label %dec_label_pc_aa90, label %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge

dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge:    ; preds = %dec_label_pc_aa7c
  %v1_a9bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9b8

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa7c, %dec_label_pc_a9ac
  %v0_aa90 = call i32 @function_deb8()
  %v1_aa90 = trunc i32 %v0_aa90 to i16
  %v3_aa94 = load i32, i32* @r4, align 4
  %v4_aa94 = add i32 %v3_aa94, 20
  %v5_aa94 = inttoptr i32 %v4_aa94 to i16*
  store i16 %v1_aa90, i16* %v5_aa94, align 2
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v1_aa9c = load i32, i32* @r5, align 4
  %v9_aa9c = icmp eq i32 %v3_a768, %v1_aa9c
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa9c, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_aaa4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v0_aaa4 = call i32 @function_deb8()
  %v1_aaa4 = trunc i32 %v0_aaa4 to i16
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v1_aaac = load i32, i32* @r5, align 4
  %v9_aaac = icmp eq i32 %v3_a770, %v1_aaac
  store i1 %v9_aaac, i1* %cpsr_z.global-to-local, align 1
  %v3_aab0 = load i32, i32* @r6, align 4
  %v4_aab0 = add i32 %v3_aab0, 2
  %v5_aab0 = inttoptr i32 %v4_aab0 to i16*
  store i16 %v1_aaa4, i16* %v5_aab0, align 2
  br i1 %v9_aaac, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_aab8:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4
  %v0_aab8 = call i32 @function_deb8()
  %v1_aab8 = trunc i32 %v0_aab8 to i16
  store i32 %v0_aab8, i32* %r0.global-to-local, align 4
  %v3_aabc = load i32, i32* @r4, align 4
  %v4_aabc = add i32 %v3_aabc, 28
  %v5_aabc = inttoptr i32 %v4_aabc to i16*
  store i16 %v1_aab8, i16* %v5_aabc, align 2
  br label %dec_label_pc_a9d0

dec_label_pc_aac4:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a630, %dec_label_pc_a5d4, %dec_label_pc_a480
  %v0_aac4 = call i32 @function_deb8()
  %v1_aac8 = urem i32 %v0_aac4, 4
  store i32 %v1_aac8, i32* %r0.global-to-local, align 4
  %v2_aacc = icmp eq i32 %v1_aac8, 3
  store i1 %v2_aacc, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_aac4 to i2
  switch i2 %trunc, label %dec_label_pc_a6c811 [
    i2 0, label %dec_label_pc_ab00
    i2 1, label %dec_label_pc_ab2c
    i2 -2, label %dec_label_pc_ab20
    i2 -1, label %dec_label_pc_ab10
  ]

dec_label_pc_aae8:                                ; preds = %dec_label_pc_a6f8
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v1_aaec = call i32 @function_10b64(i32 %v3_a6e8)
  store i32 %v1_aaec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aaf0

dec_label_pc_aaf0:                                ; preds = %dec_label_pc_a6d0, %dec_label_pc_a6c8, %dec_label_pc_aae8
  %v1_aafc = phi i32 [ %v3_a6e8, %dec_label_pc_a6d0 ], [ %v1_aafc49, %dec_label_pc_a6c8 ], [ %v1_aaec, %dec_label_pc_aae8 ]
  store i32 %v18_a480, i32* %sb.global-to-local, align 4
  store i32 %v27_a480, i32* %lr.global-to-local, align 4
  ret i32 %v1_aafc

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aac4
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab10:                                ; preds = %dec_label_pc_aac4
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab20:                                ; preds = %dec_label_pc_aac4
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab2c:                                ; preds = %dec_label_pc_aac4
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a6c8

; uselistorder directives
  uselistorder i32 %v1_aac8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_aac4, { 1, 0 }
  uselistorder i32 %v0_aab8, { 1, 0 }
  uselistorder i32 %v0_aaa4, { 1, 0 }
  uselistorder i32 %v1_aa9c, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i32 %v1_aa58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa20, { 1, 0 }
  uselistorder i32 %v4_aa0c, { 1, 0 }
  uselistorder i32 %v2_a9ec, { 1, 0 }
  uselistorder i1 %v3_a9b0, { 1, 0 }
  uselistorder i1 %v3_a9a0, { 1, 0 }
  uselistorder i32 %v4_a9d4.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a948, { 1, 0, 2 }
  uselistorder i32 %v0_a938, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a924, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a920, { 1, 0, 2 }
  uselistorder i32 %v0_a890, { 1, 0 }
  uselistorder i32 %v4_a88c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a7d8, { 1, 0 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v1_a788, { 2, 0, 1 }
  uselistorder i32 %v3_a754, { 1, 0 }
  uselistorder i32 %v3_a74c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a744, { 0, 2, 1 }
  uselistorder i8 %v5_a73c, { 1, 0, 2 }
  uselistorder i32 %v1_a728, { 1, 0 }
  uselistorder i32 %v0_a728, { 1, 0 }
  uselistorder i1 %v7_a718, { 1, 0 }
  uselistorder i1 %v7_a6ec, { 1, 0 }
  uselistorder i32 %v3_a6e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a6c8, { 1, 0, 2 }
  uselistorder i32 %v2_a698, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a694, { 1, 0, 2 }
  uselistorder i1 %v7_a684, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0, 2 }
  uselistorder i1 %v8_a678, { 1, 0 }
  uselistorder i1 %v7_a674, { 1, 0 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i8 %v2_a65c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a660, { 1, 0 }
  uselistorder i32 %v0_a680, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a650, { 0, 2, 1 }
  uselistorder i32 %v1_a664, { 0, 2, 1 }
  uselistorder i32 %v2_a638, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a630, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a628, { 1, 0 }
  uselistorder i32 %v0_a628, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a5cc, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a56c, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a550, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a538, { 2, 1, 0 }
  uselistorder i32 %v1_a520, { 1, 0 }
  uselistorder i32 %v7_a4dc, { 1, 0, 2 }
  uselistorder i32 %v2_a4a0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 4, 6, 8, 7, 10, 9, 11, 13, 12, 14, 15, 16, 18, 17, 20, 19, 21, 22, 23, 28, 24, 25, 26, 27, 32, 29, 30, 31, 33, 35, 34, 36, 2, 37, 38, 40, 39, 41, 42, 44, 43, 45, 1, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aaf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %dec_label_pc_a970, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a970.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a940, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 1, 0 }
  uselistorder label %dec_label_pc_a684, { 1, 0 }
  uselistorder label %dec_label_pc_a650, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a648, { 1, 0 }
}

define i32 @function_ab3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ab3c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab3c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab58 = call i32 @function_11ea4(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_ab64 = load i32, i32* @r6, align 4
  store i32 %v0_ab64, i32* %r0.global-to-local, align 4
  %v2_ab68 = call i32 @function_11ea4(i32 %v0_ab64, i32 4)
  %v0_ab6c = load i32, i32* @r5, align 4
  store i32 %v0_ab6c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ab7c = load i32, i32* @r4, align 4
  store i32 %v0_ab7c, i32* %r0.global-to-local, align 4
  %v5_ab80 = inttoptr i32 %v0_ab6c to i32*
  %v6_ab80 = call i32 @function_8570(i32 %v0_ab7c, i32* %v5_ab80, i32 2, i32 0)
  %v1_ab8c = urem i32 %v6_ab80, 256
  store i32 %v1_ab8c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ab98 = load i32, i32* @r5, align 4
  store i32 %v0_ab98, i32* %r1.global-to-local, align 4
  %v0_ab9c = load i32, i32* @r4, align 4
  store i32 %v0_ab9c, i32* %r0.global-to-local, align 4
  %v5_aba0 = trunc i32 %v6_ab80 to i8
  %v6_aba4 = inttoptr i32 %v0_ab98 to i32*
  %v7_aba4 = call i32 @function_8570(i32 %v0_ab9c, i32* %v6_aba4, i32 3, i32 65535)
  %v0_aba8 = load i32, i32* @r5, align 4
  store i32 %v0_aba8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aba4, i32* @r7, align 4
  %v0_abb8 = load i32, i32* @r4, align 4
  store i32 %v0_abb8, i32* %r0.global-to-local, align 4
  %v4_abbc = inttoptr i32 %v0_aba8 to i32*
  %v5_abbc = call i32 @function_8570(i32 %v0_abb8, i32* %v4_abbc, i32 4, i32 64)
  %v1_abc4 = urem i32 %v5_abbc, 256
  store i32 %v1_abc4, i32* %ip.global-to-local, align 4
  %v0_abc8 = load i32, i32* @r5, align 4
  store i32 %v0_abc8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_abd4 = load i32, i32* @r4, align 4
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  %v6_abdc = inttoptr i32 %v0_abc8 to i32*
  %v7_abdc = call i32 @function_8570(i32 %v0_abd4, i32* %v6_abdc, i32 5, i32 1)
  %v1_abe8 = urem i32 %v7_abdc, 256
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_abf0 = load i32, i32* @r5, align 4
  store i32 %v0_abf0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v5_ac00 = inttoptr i32 %v0_abf0 to i32*
  %v6_ac00 = call i32 @function_8570(i32 %v0_abf8, i32* %v5_ac00, i32 7, i32 65535)
  %v0_ac04 = load i32, i32* @r5, align 4
  store i32 %v0_ac04, i32* %r1.global-to-local, align 4
  %v3_ac08 = mul i32 %v6_ac00, 65536
  store i32 %v3_ac08, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v3_ac18 = urem i32 %v6_ac00, 65536
  store i32 %v3_ac18, i32* @sl, align 4
  %v4_ac1c = inttoptr i32 %v0_ac04 to i32*
  %v5_ac1c = call i32 @function_8570(i32 %v0_ac14, i32* %v4_ac1c, i32 11, i32 1)
  %v1_ac24 = urem i32 %v5_ac1c, 256
  store i32 %v1_ac24, i32* %ip.global-to-local, align 4
  %v0_ac28 = load i32, i32* @r5, align 4
  store i32 %v0_ac28, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac34 = load i32, i32* @r4, align 4
  store i32 %v0_ac34, i32* %r0.global-to-local, align 4
  %v5_ac3c = inttoptr i32 %v0_ac28 to i32*
  %v6_ac3c = call i32 @function_8570(i32 %v0_ac34, i32* %v5_ac3c, i32 12, i32 1)
  %v1_ac44 = urem i32 %v6_ac3c, 256
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r5, align 4
  store i32 %v0_ac48, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v5_ac5c = inttoptr i32 %v0_ac48 to i32*
  %v6_ac5c = call i32 @function_8570(i32 %v0_ac54, i32* %v5_ac5c, i32 13, i32 1)
  %v1_ac64 = urem i32 %v6_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @function_8570(i32 %v0_ac74, i32* %v5_ac7c, i32 14, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @function_8570(i32 %v0_ac94, i32* %v5_ac9c, i32 15, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @function_8570(i32 %v0_acb4, i32* %v5_acbc, i32 16, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_acd0 = load i32, i32* @r5, align 4
  store i32 %v0_acd0, i32* %r1.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acd0 to i32*
  %v6_acdc = call i32 @function_8570(i32 %v0_acd4, i32* %v5_acdc, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acec = load i32, i32* @r5, align 4
  store i32 %v0_acec, i32* %r1.global-to-local, align 4
  %v0_acf0 = load i32, i32* @r4, align 4
  store i32 %v0_acf0, i32* %r0.global-to-local, align 4
  %v4_acf4 = inttoptr i32 %v0_acec to i32*
  %v5_acf4 = call i32 @function_8570(i32 %v0_acf0, i32* %v4_acf4, i32 1, i32 1)
  %v1_acfc = urem i32 %v5_acf4, 256
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad10 = call i32 @function_1133c(i32 2, i32 3, i32 6)
  store i32 %v3_ad10, i32* %r0.global-to-local, align 4
  %v7_ad14 = icmp eq i32 %v3_ad10, -1
  store i1 %v7_ad14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad10, i32* @sb, align 4
  br i1 %v7_ad14, label %dec_label_pc_af04, label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ab3c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad28 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad28, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad3c = call i32 @function_112f8(i32 %v3_ad10, i32 0, i32 3, i32 %v6_ad28, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad3c, i32* %r0.global-to-local, align 4
  %v7_ad40 = icmp eq i32 %v5_ad3c, -1
  store i1 %v7_ad40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad40, label %dec_label_pc_aefc, label %dec_label_pc_ad48

dec_label_pc_ad48:                                ; preds = %dec_label_pc_ad20
  %v0_ad48 = load i32, i32* @r7, align 4
  %v3_ad48 = mul i32 %v0_ad48, 65536
  store i32 %v3_ad48, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad50 = load i32, i32* @r6, align 4
  %v2_ad50 = icmp eq i32 %v0_ad50, 0
  store i1 %v2_ad50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad58 = urem i32 %v0_ad48, 65536
  store i32 %v3_ad58, i32* @fp, align 4
  br i1 %v2_ad50, label %dec_label_pc_b188, label %dec_label_pc_ad60.preheader

dec_label_pc_ad60.preheader:                      ; preds = %dec_label_pc_ad48
  %v2_adac = ptrtoint i32* %stack_var_-144 to i32
  %v2_adf0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae28 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae34 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae38 = ptrtoint i32* %stack_var_-48 to i32
  %v4_ae98 = zext i8 %tmp to i32
  %v1_ae9c = and i32 %v4_ae98, 18
  %v2_aea0 = icmp eq i32 %v1_ae9c, 18
  %v4_b044 = sext i8 %v5_aba0 to i32
  %sext = mul i32 %v5_abbc, 16777216
  %v4_b054 = sdiv i32 %sext, 16777216
  %v3_ae84 = sext i16 %tmp61 to i32
  %v1_aea8 = and i32 %v4_ae98, 5
  %v2_aea8 = icmp eq i32 %v1_aea8, 0
  %v4_ade8 = add i32 %v2_adac, 82
  %v5_ade8 = inttoptr i32 %v4_ade8 to i16*
  %v1_afd8 = add i32 %v6_acdc, 40
  %v1_b0ec = urem i32 %v5_ac1c, 2
  %tmp97 = sub nsw i32 0, %v1_b0ec
  %v4_b0f4 = and i32 %tmp97, 32
  %v1_b104 = urem i32 %v6_ac3c, 2
  %tmp98 = sub nsw i32 0, %v1_b104
  %v4_b10c = and i32 %tmp98, 16
  %v1_b11c = urem i32 %v6_ac5c, 2
  %tmp99 = sub nsw i32 0, %v1_b11c
  %v4_b124 = and i32 %tmp99, 8
  %v1_b134 = urem i32 %v6_ac7c, 2
  %tmp100 = sub nsw i32 0, %v1_b134
  %v4_b13c = and i32 %tmp100, 4
  %v1_b14c = urem i32 %v6_ac9c, 2
  %tmp101 = sub nsw i32 0, %v1_b14c
  %v3_b154 = and i32 %tmp101, 2
  %v1_b164 = urem i32 %v6_acbc, 2
  br label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad60.preheader, %dec_label_pc_aed4
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_aed4 ], [ %tmp34, %dec_label_pc_ad60.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_aed4 ], [ %tmp37, %dec_label_pc_ad60.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ad6c = call i32 @function_1133c(i32 2, i32 1, i32 0)
  store i32 %v3_ad6c, i32* %r0.global-to-local, align 4
  %v7_ad70 = icmp eq i32 %v3_ad6c, -1
  store i1 %v7_ad70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad6c, i32* @r5, align 4
  br i1 %v7_ad70, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_ad60, %dec_label_pc_aeb0
  %v0_ad84 = phi i32 [ %v3_aec4, %dec_label_pc_aeb0 ], [ %v3_ad6c, %dec_label_pc_ad60 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aeb0 ], [ %stack_var_-62.0, %dec_label_pc_ad60 ]
  %stack_var_-60.1 = phi i32 [ %v0_af84, %dec_label_pc_aeb0 ], [ %stack_var_-60.0, %dec_label_pc_ad60 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ad84 = call i32 @function_10998(i32 %v0_ad84, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ad8c = or i32 %v2_ad84, 2048
  store i32 %v1_ad8c, i32* %r2.global-to-local, align 4
  %v0_ad90 = load i32, i32* @r5, align 4
  store i32 %v0_ad90, i32* %r0.global-to-local, align 4
  %v2_ad94 = call i32 @function_10998(i32 %v0_ad90, i32 4)
  %v3_ad98 = load i32, i32* %stack_var_-44, align 4
  %v5_ada0 = mul i32 %v3_ad98, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adb4 = add i32 %v5_ada0, %arg2
  store i32 %v2_adb4, i32* %r3.global-to-local, align 4
  %v1_adb8 = add i32 %v2_adb4, 20
  %v2_adb8 = inttoptr i32 %v1_adb8 to i8*
  %v3_adb8 = load i8, i8* %v2_adb8, align 1
  %v4_adb8 = zext i8 %v3_adb8 to i32
  store i32 %v4_adb8, i32* %r2.global-to-local, align 4
  %v2_adbc = icmp ugt i8 %v3_adb8, 30
  %v7_adbc = icmp eq i8 %v3_adb8, 31
  store i1 %v7_adbc, i1* %cpsr_z.global-to-local, align 1
  %v2_adc0 = xor i1 %v7_adbc, true
  %v3_adc0 = and i1 %v2_adbc, %v2_adc0
  br i1 %v3_adc0, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_ad7c
  %v5_adc0 = add i32 %v2_adb4, 16
  %v6_adc0 = inttoptr i32 %v5_adc0 to i32*
  %v7_adc0 = load i32, i32* %v6_adc0, align 4
  store i32 %v7_adc0, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_ad7c, %bb
  %v4_adc4 = phi i32 [ %v2_adb4, %dec_label_pc_ad7c ], [ %v7_adc0, %bb ]
  %v4_adc4.stack_var_-60.1 = select i1 %v3_adc0, i32 %v4_adc4, i32 %stack_var_-60.1
  %v2_adc8 = xor i1 %v2_adbc, true
  %v3_adc8 = or i1 %v7_adbc, %v2_adc8
  br i1 %v3_adc8, label %dec_label_pc_af10, label %dec_label_pc_adcc

dec_label_pc_adcc:                                ; preds = %bb71, %dec_label_pc_af10
  %v0_af84 = phi i32 [ %v5_af60, %dec_label_pc_af10 ], [ %v4_adc4.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_add4 = load i32, i32* @sl, align 4
  %v9_add4 = icmp eq i32 %v0_add4, 65535
  store i1 %v9_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add4, label %dec_label_pc_af6c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_adcc
  %v4_add8 = udiv i32 %v0_add4, 256
  %v2_addc = urem i32 %v0_add4, 256
  store i32 %v2_addc, i32* %r2.global-to-local, align 4
  %v5_ade0 = mul nuw nsw i32 %v2_addc, 256
  %v6_ade0 = or i32 %v5_ade0, %v4_add8
  store i32 %v6_ade0, i32* %r3.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  %v2_ade8 = trunc i32 %v6_ade0 to i16
  store i16 %v2_ade8, i16* %v5_ade8, align 2
  br label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %.thread9, %dec_label_pc_af6c
  %stack_var_-62.2 = phi i16 [ %v1_af6c, %dec_label_pc_af6c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_adf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r0.global-to-local, align 4
  %v3_adfc = call i32 @function_11124(i32 %v0_adf8, i32 %v2_adf0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae04 = call i32 @function_107e4(i32* null)
  store i32 %v2_ae04, i32* %r0.global-to-local, align 4
  store i32 %v2_ae04, i32* @r4, align 4
  %v9_ae64 = icmp eq i32 %tmp35, %v0_af84
  %v4_ae8c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_ae64 to i32
  %v9_ae78 = icmp eq i1 %v9_ae64, false
  %v9_ae90 = icmp eq i32 %v3_ae84, %v4_ae8c
  br label %dec_label_pc_ae20

dec_label_pc_ae10:                                ; preds = %.thread, %dec_label_pc_ae80, %dec_label_pc_aea8, %bb75
  %v2_ae10 = call i32 @function_107e4(i32* null)
  %v0_ae14 = load i32, i32* @r4, align 4
  %v2_ae14 = sub i32 %v2_ae10, %v0_ae14
  store i32 %v2_ae14, i32* %r0.global-to-local, align 4
  %v7_ae18 = icmp eq i32 %v2_ae14, 10
  store i1 %v7_ae18, i1* %cpsr_z.global-to-local, align 1
  %v8_ae1c = icmp sgt i32 %v2_ae14, 10
  br i1 %v8_ae1c, label %dec_label_pc_aeb0, label %dec_label_pc_ae20

dec_label_pc_ae20:                                ; preds = %dec_label_pc_ae10, %dec_label_pc_adf0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae34, i32* %r1.global-to-local, align 4
  store i32 %v2_ae38, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sb, align 4
  store i32 %v0_ae40, i32* %r0.global-to-local, align 4
  %v6_ae48 = call i32 @function_11244(i32 %v0_ae40, i32 %v2_ae34, i32 256, i32 16384, i32 %v2_ae28, i32 %v2_ae38)
  store i32 %v6_ae48, i32* %r2.global-to-local, align 4
  %v7_ae50 = icmp eq i32 %v6_ae48, -1
  store i1 %v7_ae50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae50, label %dec_label_pc_af04, label %dec_label_pc_ae5c

dec_label_pc_ae5c:                                ; preds = %dec_label_pc_ae20
  store i32 %v0_af84, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_ae70 = icmp eq i32 %v6_ae48, 40
  store i1 %v7_ae70, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae48, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae5c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae10

bb75:                                             ; preds = %dec_label_pc_ae5c
  store i1 %v9_ae78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae78, label %dec_label_pc_ae10, label %dec_label_pc_ae80

dec_label_pc_ae80:                                ; preds = %bb75
  store i32 %v3_ae84, i32* @lr, align 4
  store i32 %v2_adac, i32* @r3, align 4
  store i32 %v4_ae8c, i32* %r2.global-to-local, align 4
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae90, label %dec_label_pc_ae98, label %dec_label_pc_ae10

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae80
  store i32 %v4_ae98, i32* %r2.global-to-local, align 4
  store i32 %v1_ae9c, i32* @r3, align 4
  store i1 %v2_aea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea0, label %dec_label_pc_af7c, label %dec_label_pc_aea8

dec_label_pc_aea8:                                ; preds = %dec_label_pc_ae98
  store i1 %v2_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea8, label %dec_label_pc_ae10, label %dec_label_pc_aeb0

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_aea8, %dec_label_pc_ae10
  %v0_aeb0 = load i32, i32* @r5, align 4
  store i32 %v0_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = call i32 @function_10b64(i32 %v0_aeb0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_aec4 = call i32 @function_1133c(i32 2, i32 1, i32 0)
  store i32 %v3_aec4, i32* %r0.global-to-local, align 4
  %v3_aec8 = icmp eq i32 %v3_aec4, -1
  %v8_aec8 = icmp eq i32 %v3_aec4, -1
  store i1 %v8_aec8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aec4, i32* @r5, align 4
  br i1 %v3_aec8, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_aed4:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad60, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ad60 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aeb0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ad60 ], [ %v0_af84, %bb82 ], [ %v0_af84, %dec_label_pc_aeb0 ]
  %v3_aed4 = load i32, i32* %stack_var_-44, align 4
  %v1_aed8 = add i32 %v3_aed4, 1
  store i32 %v1_aed8, i32* @r3, align 4
  %v1_aedc = load i32, i32* @r6, align 4
  %v9_aedc = icmp eq i32 %v1_aed8, %v1_aedc
  store i1 %v9_aedc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aed8, i32* %stack_var_-44, align 4
  %v5_aee4 = icmp slt i32 %v1_aed8, %v1_aedc
  br i1 %v5_aee4, label %dec_label_pc_ad60, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed4
  store i32 %v6_acdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b198

dec_label_pc_aefc:                                ; preds = %dec_label_pc_ad20
  %v0_aefc = load i32, i32* @sb, align 4
  store i32 %v0_aefc, i32* %r0.global-to-local, align 4
  %v1_af00 = call i32 @function_10b64(i32 %v0_aefc)
  store i32 %v1_af00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af04

dec_label_pc_af04:                                ; preds = %dec_label_pc_ae20, %dec_label_pc_ab3c, %dec_label_pc_aefc
  %v1_af0c = phi i32 [ %v3_ad10, %dec_label_pc_ab3c ], [ %v1_af00, %dec_label_pc_aefc ], [ 0, %dec_label_pc_ae20 ]
  store i32 %v27_ab3c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af0c

dec_label_pc_af10:                                ; preds = %bb71
  %v1_af10 = add i32 %v4_adc4, 16
  %v2_af10 = inttoptr i32 %v1_af10 to i32*
  %v3_af10 = load i32, i32* %v2_af10, align 4
  store i32 %v3_af10, i32* @r4, align 4
  %v0_af14 = call i32 @function_deb8()
  store i32 %v0_af14, i32* %r0.global-to-local, align 4
  %v3_af18 = load i32, i32* %stack_var_-44, align 4
  %v5_af20 = mul i32 %v3_af18, 24
  %v0_af28 = load i32, i32* @r4, align 4
  %v1_af28 = and i32 %v0_af28, 16711680
  store i32 %v1_af28, i32* %ip.global-to-local, align 4
  %v3_af2c = udiv i32 %v0_af28, 16777216
  %v2_af30 = add i32 %v5_af20, %arg2
  store i32 %v2_af30, i32* %r1.global-to-local, align 4
  %v4_af34 = udiv i32 %v1_af28, 256
  %v5_af34 = or i32 %v4_af34, %v3_af2c
  store i32 %v5_af34, i32* %r2.global-to-local, align 4
  %v1_af38 = and i32 %v0_af28, 65280
  store i32 %v1_af38, i32* %r3.global-to-local, align 4
  %v1_af3c = add i32 %v2_af30, 20
  %v2_af3c = inttoptr i32 %v1_af3c to i8*
  %v3_af3c = load i8, i8* %v2_af3c, align 1
  %v4_af3c = zext i8 %v3_af3c to i32
  store i32 %v4_af3c, i32* %ip.global-to-local, align 4
  %v5_af44 = call i32 @llvm.bswap.i32(i32 %v0_af28)
  %v7_af48 = lshr i32 %v0_af14, %v4_af3c
  %v8_af48 = add i32 %v7_af48, %v5_af44
  store i32 %v8_af48, i32* %r2.global-to-local, align 4
  %v1_af4c = and i32 %v8_af48, 16711680
  store i32 %v1_af4c, i32* %r0.global-to-local, align 4
  %v1_af58 = and i32 %v8_af48, 65280
  store i32 %v1_af58, i32* %r1.global-to-local, align 4
  %v5_af60 = call i32 @llvm.bswap.i32(i32 %v8_af48)
  store i32 %v5_af60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_adcc

dec_label_pc_af6c:                                ; preds = %dec_label_pc_adcc
  %v0_af6c = call i32 @function_deb8()
  %v1_af6c = trunc i32 %v0_af6c to i16
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  store i32 %v2_adac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_af7c:                                ; preds = %dec_label_pc_ae98
  %v3_af7c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af7c, i32* @r4, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v5_af84 = mul i32 %v3_af7c, 16
  %v6_af84 = add i32 %v5_af84, %v2_ab58
  %v7_af84 = inttoptr i32 %v6_af84 to i32*
  store i32 %v0_af84, i32* %v7_af84, align 4
  %v0_af88 = load i32, i32* @r8, align 4
  %v1_af88 = add i32 %v0_af88, 4
  %v2_af88 = inttoptr i32 %v1_af88 to i32*
  %v3_af88 = load i32, i32* %v2_af88, align 4
  store i32 %v3_af88, i32* %r1.global-to-local, align 4
  %v1_af94 = and i32 %v3_af88, 65280
  store i32 %v1_af94, i32* %r2.global-to-local, align 4
  store i32 %v2_ab58, i32* %r0.global-to-local, align 4
  %v0_afa4 = load i32, i32* @r4, align 4
  %v3_afa4 = mul i32 %v0_afa4, 16
  %v2_afa8 = add i32 %v3_afa4, %v2_ab58
  store i32 %v2_afa8, i32* %ip.global-to-local, align 4
  %v5_afac = call i32 @llvm.bswap.i32(i32 %v3_af88)
  store i32 %v5_afac, i32* %r3.global-to-local, align 4
  %v2_afb0 = add i32 %v2_afa8, 4
  %v3_afb0 = inttoptr i32 %v2_afb0 to i32*
  store i32 %v5_afac, i32* %v3_afb0, align 4
  %v0_afb4 = load i32, i32* @r8, align 4
  %v1_afb4 = add i32 %v0_afb4, 8
  %v2_afb4 = inttoptr i32 %v1_afb4 to i32*
  %v3_afb4 = load i32, i32* %v2_afb4, align 4
  store i32 %v3_afb4, i32* %r1.global-to-local, align 4
  %v1_afb8 = and i32 %v3_afb4, 16711680
  store i32 %v1_afb8, i32* %r0.global-to-local, align 4
  store i32 %v6_acdc, i32* %r2.global-to-local, align 4
  %v5_afd0 = call i32 @llvm.bswap.i32(i32 %v3_afb4)
  store i32 %v5_afd0, i32* %r3.global-to-local, align 4
  %v1_afd4 = add i32 %v0_afb4, 2
  %v2_afd4 = inttoptr i32 %v1_afd4 to i16*
  %v3_afd4 = load i16, i16* %v2_afd4, align 2
  %v4_afd4 = zext i16 %v3_afd4 to i32
  store i32 %v4_afd4, i32* %r1.global-to-local, align 4
  store i32 %v1_afd8, i32* @r7, align 4
  %v0_afdc = load i32, i32* @lr, align 4
  %v1_afdc = trunc i32 %v0_afdc to i16
  %v2_afdc = load i32, i32* %ip.global-to-local, align 4
  %v3_afdc = add i32 %v2_afdc, 14
  %v4_afdc = inttoptr i32 %v3_afdc to i16*
  store i16 %v1_afdc, i16* %v4_afdc, align 2
  %v0_afe0 = load i32, i32* %r1.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i16
  %v2_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v3_afe0 = add i32 %v2_afe0, 12
  %v4_afe0 = inttoptr i32 %v3_afe0 to i16*
  store i16 %v1_afe0, i16* %v4_afe0, align 2
  %v0_afe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afe4 = load i32, i32* %ip.global-to-local, align 4
  %v2_afe4 = add i32 %v1_afe4, 8
  %v3_afe4 = inttoptr i32 %v2_afe4 to i32*
  store i32 %v0_afe4, i32* %v3_afe4, align 4
  %v0_afe8 = load i32, i32* @r7, align 4
  store i32 %v0_afe8, i32* @r0, align 4
  %v0_afec = call i32 @function_11584()
  store i32 %v0_afec, i32* %r0.global-to-local, align 4
  store i32 %v2_ab68, i32* %r3.global-to-local, align 4
  %v2_aff8 = load i32, i32* @r4, align 4
  %v5_aff8 = mul i32 %v2_aff8, 4
  %v6_aff8 = add i32 %v5_aff8, %v2_ab68
  %v7_aff8 = inttoptr i32 %v6_aff8 to i32*
  store i32 %v0_afec, i32* %v7_aff8, align 4
  %v3_affc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_affc, i32* %r2.global-to-local, align 4
  %v0_b000 = load i32, i32* %r3.global-to-local, align 4
  %v4_b000 = mul i32 %v3_affc, 4
  %v5_b000 = add i32 %v0_b000, %v4_b000
  %v6_b000 = inttoptr i32 %v5_b000 to i32*
  %v7_b000 = load i32, i32* %v6_b000, align 4
  store i32 %v7_b000, i32* @r4, align 4
  %v1_b004 = inttoptr i32 %v7_b000 to i8*
  %v2_b004 = load i8, i8* %v1_b004, align 1
  %tmp103 = urem i8 %v2_b004, 16
  %v1_b008 = zext i8 %tmp103 to i32
  %v1_b00c = or i32 %v1_b008, 64
  store i32 %v1_b00c, i32* %r3.global-to-local, align 4
  %v1_b010 = trunc i32 %v1_b00c to i8
  store i8 %v1_b010, i8* %v1_b004, align 1
  %v0_b014 = load i32, i32* @r4, align 4
  %v1_b014 = inttoptr i32 %v0_b014 to i8*
  %v2_b014 = load i8, i8* %v1_b014, align 1
  %v0_b018 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b018, 256
  %v1_b020 = and i8 %v2_b014, -16
  %v1_b024 = or i8 %v1_b020, 5
  %v1_b028 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b018, 256
  %v4_b02c = urem i32 %tmp78, 256
  %v5_b02c = or i32 %v4_b02c, %v1_b028
  store i32 %v5_b02c, i32* %r2.global-to-local, align 4
  %v0_b030 = load i32, i32* @fp, align 4
  %v1_b030 = urem i32 %v0_b030, 256
  store i32 %v1_b030, i32* %r0.global-to-local, align 4
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  %v3_b038 = udiv i32 %v0_b030, 256
  store i32 %v3_b038, i32* %r1.global-to-local, align 4
  store i8 %v1_b024, i8* %v1_b014, align 1
  %v0_b040 = load i32, i32* %r1.global-to-local, align 4
  %v1_b040 = load i32, i32* %r0.global-to-local, align 4
  %v4_b040 = mul i32 %v1_b040, 256
  %v5_b040 = or i32 %v4_b040, %v0_b040
  store i32 %v5_b040, i32* %r1.global-to-local, align 4
  store i32 %v4_b044, i32* %r0.global-to-local, align 4
  %v2_b048 = load i32, i32* @r4, align 4
  %v3_b048 = add i32 %v2_b048, 1
  %v4_b048 = inttoptr i32 %v3_b048 to i8*
  store i8 %v5_aba0, i8* %v4_b048, align 1
  %v0_b04c = load i32, i32* %r1.global-to-local, align 4
  %v1_b04c = trunc i32 %v0_b04c to i16
  %v2_b04c = load i32, i32* @r4, align 4
  %v3_b04c = add i32 %v2_b04c, 4
  %v4_b04c = inttoptr i32 %v3_b04c to i16*
  store i16 %v1_b04c, i16* %v4_b04c, align 2
  %v0_b050 = load i32, i32* %ip.global-to-local, align 4
  %v2_b050 = icmp eq i32 %v0_b050, 0
  store i1 %v2_b050, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b054, i32* %r1.global-to-local, align 4
  %v0_b058 = load i32, i32* %r2.global-to-local, align 4
  %v1_b058 = trunc i32 %v0_b058 to i16
  %v2_b058 = load i32, i32* @r4, align 4
  %v3_b058 = add i32 %v2_b058, 2
  %v4_b058 = inttoptr i32 %v3_b058 to i16*
  store i16 %v1_b058, i16* %v4_b058, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b050, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_af7c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_af7c, %bb79
  %v0_b064 = load i32, i32* %r1.global-to-local, align 4
  %v1_b064 = trunc i32 %v0_b064 to i8
  %v2_b064 = load i32, i32* @r4, align 4
  %v3_b064 = add i32 %v2_b064, 8
  %v4_b064 = inttoptr i32 %v3_b064 to i8*
  store i8 %v1_b064, i8* %v4_b064, align 1
  %v0_b068 = load i32, i32* %r3.global-to-local, align 4
  %v1_b068 = trunc i32 %v0_b068 to i8
  %v2_b068 = load i32, i32* @r4, align 4
  %v3_b068 = add i32 %v2_b068, 9
  %v4_b068 = inttoptr i32 %v3_b068 to i8*
  store i8 %v1_b068, i8* %v4_b068, align 1
  %v0_b06c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b06c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b06c = load i32, i32* %r2.global-to-local, align 4
  %v2_b06c = trunc i32 %v1_b06c to i16
  %v3_b06c = load i32, i32* @r4, align 4
  %v4_b06c = add i32 %v3_b06c, 6
  %v5_b06c = inttoptr i32 %v4_b06c to i16*
  store i16 %v2_b06c, i16* %v5_b06c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r2.global-to-local, align 4
  %v2_b074 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_b074, i32* %r1.global-to-local, align 4
  %v1_b078 = load i32, i32* @r4, align 4
  %v2_b078 = add i32 %v1_b078, 12
  %v3_b078 = inttoptr i32 %v2_b078 to i32*
  store i32 %v2_b074, i32* %v3_b078, align 4
  %v3_b07c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b07c, i32* %r3.global-to-local, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v4_b084 = mul i32 %v3_b07c, 16
  %v5_b084 = add i32 %v4_b084, %v2_ab58
  %v6_b084 = inttoptr i32 %v5_b084 to i32*
  %v7_b084 = load i32, i32* %v6_b084, align 4
  store i32 %v7_b084, i32* %r2.global-to-local, align 4
  store i32 %v5_b084, i32* %r3.global-to-local, align 4
  %v1_b090 = load i32, i32* @r4, align 4
  %v2_b090 = add i32 %v1_b090, 16
  %v3_b090 = inttoptr i32 %v2_b090 to i32*
  store i32 %v7_b084, i32* %v3_b090, align 4
  %v0_b094 = load i32, i32* %r3.global-to-local, align 4
  %v1_b094 = add i32 %v0_b094, 12
  %v2_b094 = inttoptr i32 %v1_b094 to i16*
  %v3_b094 = load i16, i16* %v2_b094, align 2
  %v4_b094 = zext i16 %v3_b094 to i32
  store i32 %v4_b094, i32* %r0.global-to-local, align 4
  %v1_b098 = add i32 %v0_b094, 8
  %v2_b098 = inttoptr i32 %v1_b098 to i32*
  %v3_b098 = load i32, i32* %v2_b098, align 4
  store i32 %v3_b098, i32* %r1.global-to-local, align 4
  %v2_b09c = load i32, i32* @r4, align 4
  %v3_b09c = add i32 %v2_b09c, 20
  %v4_b09c = inttoptr i32 %v3_b09c to i16*
  store i16 %v3_b094, i16* %v4_b09c, align 2
  %v0_b0a0 = load i32, i32* @r4, align 4
  %v1_b0a0 = add i32 %v0_b0a0, 20
  store i32 %v1_b0a0, i32* @r8, align 4
  %v1_b0a4 = add i32 %v0_b0a0, 33
  %v2_b0a4 = inttoptr i32 %v1_b0a4 to i8*
  %v3_b0a4 = load i8, i8* %v2_b0a4, align 1
  %v4_b0a4 = zext i8 %v3_b0a4 to i32
  store i32 %v4_b0a4, i32* %r2.global-to-local, align 4
  %v0_b0a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0a8 = add i32 %v0_b0a0, 24
  %v3_b0a8 = inttoptr i32 %v2_b0a8 to i32*
  store i32 %v0_b0a8, i32* %v3_b0a8, align 4
  %v0_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ac = or i32 %v0_b0ac, 1
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  %v0_b0b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0b0 = add i32 %v0_b0b0, 4
  %v2_b0b0 = inttoptr i32 %v1_b0b0 to i32*
  %v3_b0b0 = load i32, i32* %v2_b0b0, align 4
  store i32 %v3_b0b0, i32* %r1.global-to-local, align 4
  %v1_b0b4 = add i32 %v0_b0b0, 14
  %v2_b0b4 = inttoptr i32 %v1_b0b4 to i16*
  %v3_b0b4 = load i16, i16* %v2_b0b4, align 2
  %v4_b0b4 = zext i16 %v3_b0b4 to i32
  store i32 %v4_b0b4, i32* %r3.global-to-local, align 4
  %v1_b0b8 = trunc i32 %v1_b0ac to i8
  %v2_b0b8 = load i32, i32* @r8, align 4
  %v3_b0b8 = add i32 %v2_b0b8, 13
  %v4_b0b8 = inttoptr i32 %v3_b0b8 to i8*
  store i8 %v1_b0b8, i8* %v4_b0b8, align 1
  %v0_b0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0bc = trunc i32 %v0_b0bc to i16
  %v2_b0bc = load i32, i32* @r8, align 4
  %v3_b0bc = add i32 %v2_b0bc, 2
  %v4_b0bc = inttoptr i32 %v3_b0bc to i16*
  store i16 %v1_b0bc, i16* %v4_b0bc, align 2
  %v0_b0c0 = load i32, i32* @r8, align 4
  %v1_b0c0 = add i32 %v0_b0c0, 12
  %v2_b0c0 = inttoptr i32 %v1_b0c0 to i8*
  %v3_b0c0 = load i8, i8* %v2_b0c0, align 1
  %v4_b0c0 = zext i8 %v3_b0c0 to i32
  store i32 %v4_b0c0, i32* %r3.global-to-local, align 4
  %v1_b0c4 = add i32 %v0_b0c0, 13
  %v2_b0c4 = inttoptr i32 %v1_b0c4 to i8*
  %v3_b0c4 = load i8, i8* %v2_b0c4, align 1
  %v4_b0c4 = zext i8 %v3_b0c4 to i32
  %tmp104 = urem i8 %v3_b0c0, 16
  %v1_b0c8 = zext i8 %tmp104 to i32
  %v1_b0cc = or i32 %v1_b0c8, 128
  store i32 %v1_b0cc, i32* %r3.global-to-local, align 4
  %v1_b0d0 = or i32 %v4_b0c4, 16
  store i32 %v1_b0d0, i32* %r2.global-to-local, align 4
  %v0_b0d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0d4 = add i32 %v0_b0c0, 8
  %v3_b0d4 = inttoptr i32 %v2_b0d4 to i32*
  store i32 %v0_b0d4, i32* %v3_b0d4, align 4
  %v0_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d8 = trunc i32 %v0_b0d8 to i8
  %v2_b0d8 = load i32, i32* @r8, align 4
  %v3_b0d8 = add i32 %v2_b0d8, 12
  %v4_b0d8 = inttoptr i32 %v3_b0d8 to i8*
  store i8 %v1_b0d8, i8* %v4_b0d8, align 1
  %v0_b0dc = load i32, i32* %r2.global-to-local, align 4
  %v1_b0dc = trunc i32 %v0_b0dc to i8
  %v2_b0dc = load i32, i32* @r8, align 4
  %v3_b0dc = add i32 %v2_b0dc, 13
  %v4_b0dc = inttoptr i32 %v3_b0dc to i8*
  store i8 %v1_b0dc, i8* %v4_b0dc, align 1
  %v0_b0e0 = call i32 @function_deb8()
  %v1_b0e0 = trunc i32 %v0_b0e0 to i16
  store i32 %v0_b0e0, i32* %r0.global-to-local, align 4
  store i32 %v1_ac24, i32* %r1.global-to-local, align 4
  %v0_b0e8 = load i32, i32* @r8, align 4
  %v1_b0e8 = add i32 %v0_b0e8, 13
  %v2_b0e8 = inttoptr i32 %v1_b0e8 to i8*
  %v3_b0e8 = load i8, i8* %v2_b0e8, align 1
  %v4_b0e8 = zext i8 %v3_b0e8 to i32
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v1_b0f0 = and i32 %v4_b0e8, 223
  %v5_b0f4 = or i32 %v1_b0f0, %v4_b0f4
  store i32 %v5_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v5_b0f4 to i8
  store i8 %v1_b0f8, i8* %v2_b0e8, align 1
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 13
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v1_b104, i32* %r3.global-to-local, align 4
  %v1_b108 = and i32 %v4_b100, 239
  %v5_b10c = or i32 %v1_b108, %v4_b10c
  store i32 %v5_b10c, i32* %r2.global-to-local, align 4
  %v1_b110 = trunc i32 %v5_b10c to i8
  store i8 %v1_b110, i8* %v2_b100, align 1
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b118 = load i32, i32* @r8, align 4
  %v1_b118 = add i32 %v0_b118, 13
  %v2_b118 = inttoptr i32 %v1_b118 to i8*
  %v3_b118 = load i8, i8* %v2_b118, align 1
  %v4_b118 = zext i8 %v3_b118 to i32
  store i32 %v1_b11c, i32* %r2.global-to-local, align 4
  %v1_b120 = and i32 %v4_b118, 247
  %v5_b124 = or i32 %v1_b120, %v4_b124
  store i32 %v5_b124, i32* %r3.global-to-local, align 4
  %v1_b128 = trunc i32 %v5_b124 to i8
  store i8 %v1_b128, i8* %v2_b118, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b130 = load i32, i32* @r8, align 4
  %v1_b130 = add i32 %v0_b130, 13
  %v2_b130 = inttoptr i32 %v1_b130 to i8*
  %v3_b130 = load i8, i8* %v2_b130, align 1
  %v4_b130 = zext i8 %v3_b130 to i32
  store i32 %v1_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = and i32 %v4_b130, 251
  %v5_b13c = or i32 %v1_b138, %v4_b13c
  store i32 %v5_b13c, i32* %r2.global-to-local, align 4
  %v1_b140 = trunc i32 %v5_b13c to i8
  store i8 %v1_b140, i8* %v2_b130, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b148 = load i32, i32* @r8, align 4
  %v1_b148 = add i32 %v0_b148, 13
  %v2_b148 = inttoptr i32 %v1_b148 to i8*
  %v3_b148 = load i8, i8* %v2_b148, align 1
  %v4_b148 = zext i8 %v3_b148 to i32
  store i32 %v1_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = and i32 %v4_b148, 253
  %v4_b154 = or i32 %v1_b150, %v3_b154
  store i32 %v4_b154, i32* %r3.global-to-local, align 4
  %v1_b158 = trunc i32 %v4_b154 to i8
  store i8 %v1_b158, i8* %v2_b148, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b160 = load i32, i32* @r8, align 4
  %v1_b160 = add i32 %v0_b160, 13
  %v2_b160 = inttoptr i32 %v1_b160 to i8*
  %v3_b160 = load i8, i8* %v2_b160, align 1
  %v4_b160 = zext i8 %v3_b160 to i32
  %v1_b168 = and i32 %v4_b160, 254
  store i32 %v1_b168, i32* %r2.global-to-local, align 4
  %v2_b16c = or i32 %v1_b168, %v1_b164
  store i32 %v2_b16c, i32* %r3.global-to-local, align 4
  %v1_b170 = trunc i32 %v2_b16c to i8
  store i8 %v1_b170, i8* %v2_b160, align 1
  %v3_b174 = load i32, i32* @r8, align 4
  %v4_b174 = add i32 %v3_b174, 14
  %v5_b174 = inttoptr i32 %v4_b174 to i16*
  store i16 %v1_b0e0, i16* %v5_b174, align 2
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  %v1_b17c = add i32 %v0_b17c, 40
  store i32 %v1_b17c, i32* %r0.global-to-local, align 4
  %v2_b180 = inttoptr i32 %v1_b17c to i16*
  %v3_b180 = call i32 @function_e04c(i16* %v2_b180, i32 %v6_acdc)
  store i32 %v3_b180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aed4

dec_label_pc_b188:                                ; preds = %dec_label_pc_ad48
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_acdc, 40
  br label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_b188
  %storemerge6.pre-phi = phi i32 [ %v1_afd8, %dec_label_pc_aee8 ], [ %.pre, %dec_label_pc_b188 ]
  %v0_b1ac26 = phi i32 [ %v1_aedc, %dec_label_pc_aee8 ], [ 0, %dec_label_pc_b188 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_acdc, 65536
  %storemerge = add i32 %v6_acdc, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b198 = add i32 %storemerge4, 1310720
  store i32 %v1_b198, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b198, 256
  %v3_b1a0 = and i32 %tmp83, 65280
  store i32 %v3_b1a0, i32* %r3.global-to-local, align 4
  %v4_b1a4 = udiv i32 %v1_b198, 16777216
  %v5_b1a4 = or i32 %v3_b1a0, %v4_b1a4
  store i32 %v5_b1a4, i32* @r8, align 4
  %v2_b2d0 = icmp eq i32 %v1_acfc, 0
  br label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4, %dec_label_pc_b198
  %v0_b1ac = phi i32 [ %v0_b1ac26, %dec_label_pc_b198 ], [ 0, %dec_label_pc_b2b4 ], [ 0, %dec_label_pc_b1a8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ac = icmp eq i32 %v0_b1ac, 0
  store i1 %v2_b1ac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ac, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b1b8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1bc

dec_label_pc_b1bc:                                ; preds = %dec_label_pc_b1e4, %dec_label_pc_b1b8
  %v1_b1c4 = phi i32 [ %v1_b2a4, %dec_label_pc_b1e4 ], [ 0, %dec_label_pc_b1b8 ]
  store i32 %v2_ab68, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b1c4 = mul i32 %v1_b1c4, 4
  %v5_b1c4 = add i32 %v4_b1c4, %v2_ab68
  %v6_b1c4 = inttoptr i32 %v5_b1c4 to i32*
  %v7_b1c4 = load i32, i32* %v6_b1c4, align 4
  store i32 %v7_b1c4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* @fp, align 4
  %v9_b1cc = icmp eq i32 %v0_b1cc, 65535
  store i1 %v9_b1cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b1d0 = add i32 %v7_b1c4, 20
  store i32 %v1_b1d0, i32* @r5, align 4
  br i1 %v9_b1cc, label %dec_label_pc_b2c8, label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_b1bc
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2dc

dec_label_pc_b1e4:                                ; preds = %dec_label_pc_b1d8, %dec_label_pc_b2c8, %dec_label_pc_b2dc
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b1e8 = load i32, i32* @r4, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 10
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i16*
  store i16 0, i16* %v4_b1e8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1f0 = load i32, i32* @r4, align 4
  store i32 %v0_b1f0, i32* @r0, align 4
  %v2_b1f4 = call i32 @function_c848(i32 %v0_b1f0, i32 20)
  %v3_b1f4 = trunc i32 %v2_b1f4 to i16
  store i32 %v2_b1f4, i32* %r0.global-to-local, align 4
  %v3_b1f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab58, i32* %r2.global-to-local, align 4
  %v3_b200 = mul i32 %v3_b1f8, 16
  %v2_b204 = add i32 %v3_b200, %v2_ab58
  store i32 %v2_b204, i32* %r1.global-to-local, align 4
  %v1_b208 = add i32 %v2_b204, 4
  %v2_b208 = inttoptr i32 %v1_b208 to i32*
  %v3_b208 = load i32, i32* %v2_b208, align 4
  %v3_b20c = mul i32 %v3_b208, 65536
  store i32 %v3_b20c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b208, 256
  %v1_b214 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b208, 256
  %v4_b218 = urem i32 %tmp86, 256
  %v5_b218 = or i32 %v4_b218, %v1_b214
  store i32 %v5_b218, i32* %r3.global-to-local, align 4
  %v1_b21c = add i32 %v3_b208, 1
  store i32 %v1_b21c, i32* %r2.global-to-local, align 4
  store i32 %v1_b21c, i32* %v2_b208, align 4
  %v0_b224 = load i32, i32* %r3.global-to-local, align 4
  %v1_b224 = load i32, i32* @r5, align 4
  %v2_b224 = add i32 %v1_b224, 4
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r1.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 8
  %v2_b228 = inttoptr i32 %v1_b228 to i32*
  %v3_b228 = load i32, i32* %v2_b228, align 4
  %tmp87 = mul i32 %v3_b228, 256
  %v1_b234 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b228, 256
  %v4_b238 = urem i32 %tmp88, 256
  %v5_b238 = or i32 %v4_b238, %v1_b234
  %v1_b23c = load i32, i32* @r5, align 4
  %v2_b23c = add i32 %v1_b23c, 8
  %v3_b23c = inttoptr i32 %v2_b23c to i32*
  store i32 %v5_b238, i32* %v3_b23c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b244 = load i32, i32* @r4, align 4
  %v4_b244 = add i32 %v3_b244, 10
  %v5_b244 = inttoptr i32 %v4_b244 to i16*
  store i16 %v3_b1f4, i16* %v5_b244, align 2
  %v0_b248 = load i32, i32* @r5, align 4
  store i32 %v0_b248, i32* @r1, align 4
  %v0_b24c = load i32, i32* %r3.global-to-local, align 4
  %v1_b24c = trunc i32 %v0_b24c to i16
  %v3_b24c = add i32 %v0_b248, 16
  %v4_b24c = inttoptr i32 %v3_b24c to i16*
  store i16 %v1_b24c, i16* %v4_b24c, align 2
  %v0_b250 = load i32, i32* @r8, align 4
  store i32 %v0_b250, i32* %r2.global-to-local, align 4
  %v0_b254 = load i32, i32* @sl, align 4
  store i32 %v0_b254, i32* %r3.global-to-local, align 4
  %v0_b258 = load i32, i32* @r4, align 4
  store i32 %v0_b258, i32* %r0.global-to-local, align 4
  %v4_b25c = call i32 @function_c898(i32 %v0_b258, i32 %v0_b248, i32 %v0_b250, i32 %v0_b254)
  %v5_b25c = trunc i32 %v4_b25c to i16
  store i32 %v4_b25c, i32* %r0.global-to-local, align 4
  %v3_b260 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b260, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b268 = mul i32 %v3_b260, 32
  store i32 %v3_b268, i32* %lr.global-to-local, align 4
  %v3_b26c = load i32, i32* @r5, align 4
  %v4_b26c = add i32 %v3_b26c, 16
  %v5_b26c = inttoptr i32 %v4_b26c to i16*
  store i16 %v5_b25c, i16* %v5_b26c, align 2
  %v0_b270 = load i32, i32* %lr.global-to-local, align 4
  %v1_b270 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b270, -8
  %v5_b270 = add i32 %v0_b270, %tmp105
  store i32 %v5_b270, i32* %lr.global-to-local, align 4
  %v0_b274 = load i32, i32* @r5, align 4
  %v1_b274 = add i32 %v0_b274, 2
  %v2_b274 = inttoptr i32 %v1_b274 to i16*
  %v3_b274 = load i16, i16* %v2_b274, align 2
  %v1_b278 = load i32, i32* %ip.global-to-local, align 4
  %v2_b278 = add i32 %v1_b278, %v5_b270
  store i32 %v2_b278, i32* @lr, align 4
  %v3_b27c = add i32 %v2_b278, 2
  %v4_b27c = inttoptr i32 %v3_b27c to i16*
  store i16 %v3_b274, i16* %v4_b27c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b288 = load i32, i32* @r4, align 4
  store i32 %v0_b288, i32* %r1.global-to-local, align 4
  %v0_b28c = load i32, i32* @sb, align 4
  store i32 %v0_b28c, i32* %r0.global-to-local, align 4
  %v0_b290 = load i32, i32* @r7, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @lr, align 4
  %v6_b29c = call i32 @function_112b8(i32 %v0_b28c, i32 %v0_b288, i32 %v0_b290, i32 16384, i32 %v0_b294, i32 16)
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  %v1_b2a4 = add i32 %v3_b2a0, 1
  store i32 %v1_b2a4, i32* %r0.global-to-local, align 4
  %v0_b2a8 = load i32, i32* @r6, align 4
  %v9_b2a8 = icmp eq i32 %v0_b2a8, %v1_b2a4
  store i1 %v9_b2a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2a4, i32* %stack_var_-44, align 4
  %v8_b2b0 = icmp sgt i32 %v0_b2a8, %v1_b2a4
  br i1 %v8_b2b0, label %dec_label_pc_b1bc, label %dec_label_pc_b2b4

dec_label_pc_b2b4:                                ; preds = %dec_label_pc_b1e4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2b8 = icmp eq i32 %v0_b2a8, 0
  store i1 %v2_b2b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2b8, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b2c8:                                ; preds = %dec_label_pc_b1bc
  %v0_b2c8 = call i32 @function_deb8()
  %v1_b2c8 = trunc i32 %v0_b2c8 to i16
  store i32 %v0_b2c8, i32* %r0.global-to-local, align 4
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2d4 = load i32, i32* @r4, align 4
  %v4_b2d4 = add i32 %v3_b2d4, 4
  %v5_b2d4 = inttoptr i32 %v4_b2d4 to i16*
  store i16 %v1_b2c8, i16* %v5_b2d4, align 2
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge

dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge:    ; preds = %dec_label_pc_b2c8
  %v0_b2dc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b2dc

dec_label_pc_b2dc:                                ; preds = %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge, %dec_label_pc_b1d8
  %v0_b2dc = phi i32 [ %v0_b2dc.pre, %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge ], [ %v7_b1c4, %dec_label_pc_b1d8 ]
  %v1_b2dc = add i32 %v0_b2dc, 40
  store i32 %v1_b2dc, i32* %r0.global-to-local, align 4
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v2_b2e4 = inttoptr i32 %v1_b2dc to i16*
  %v3_b2e4 = call i32 @function_e04c(i16* %v2_b2e4, i32 %v6_acdc)
  store i32 %v3_b2e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1e4

; uselistorder directives
  uselistorder i32 %v0_b2c8, { 1, 0 }
  uselistorder i32 %v1_b2a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b270, { 1, 0 }
  uselistorder i32 %v4_b25c, { 1, 0 }
  uselistorder i32 %v3_b228, { 1, 0 }
  uselistorder i32 %v3_b208, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b1f4, { 1, 0 }
  uselistorder i1 %v2_b2d0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b0e0, { 1, 0 }
  uselistorder i32 %v0_b018, { 1, 0 }
  uselistorder i32 %v5_afac, { 1, 0 }
  uselistorder i32 %v0_af6c, { 1, 0 }
  uselistorder i32 %v0_af28, { 1, 2, 0, 3 }
  uselistorder i32 %v1_aed8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_aec4, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae50, { 1, 0 }
  uselistorder i32 %v6_ae48, { 0, 2, 1, 3 }
  uselistorder i1 %v9_ae78, { 1, 0 }
  uselistorder i32 %v4_ae8c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_add4, { 1, 0, 2 }
  uselistorder i32 %v0_af84, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_adc4, { 1, 0 }
  uselistorder i1 %v7_adbc, { 1, 0, 2 }
  uselistorder i1 %v7_ad70, { 1, 0 }
  uselistorder i32 %v3_ad6c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b14c, { 1, 0 }
  uselistorder i32 %v1_b134, { 1, 0 }
  uselistorder i32 %v1_b11c, { 1, 0 }
  uselistorder i32 %v1_b104, { 1, 0 }
  uselistorder i32 %v1_b0ec, { 1, 0 }
  uselistorder i32 %v3_ae84, { 1, 0 }
  uselistorder i1 %v2_aea0, { 1, 0 }
  uselistorder i32 %v1_ae9c, { 1, 0 }
  uselistorder i32 %v4_ae98, { 2, 0, 1 }
  uselistorder i32 %v2_adac, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad48, { 1, 0 }
  uselistorder i1 %v7_ad40, { 1, 0 }
  uselistorder i1 %v7_ad14, { 1, 0 }
  uselistorder i32 %v3_ad10, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_acfc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_acdc, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v1_ac44, { 1, 0 }
  uselistorder i32 %v1_ac24, { 1, 0 }
  uselistorder i32 %v6_ac00, { 1, 0 }
  uselistorder i32 %v1_abe8, { 1, 0 }
  uselistorder i8 %v5_aba0, { 1, 0 }
  uselistorder i32 %v6_ab80, { 1, 0 }
  uselistorder i32 %v2_ab68, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab58, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1b8, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b198, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae10, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_adcc, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_ad7c, { 1, 0 }
  uselistorder label %dec_label_pc_ad60, { 1, 0 }
}

define i32 @function_b2f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b2f0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b2f0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b30c = call i32 @function_11ea4(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b318 = load i32, i32* @r6, align 4
  store i32 %v0_b318, i32* %r0.global-to-local, align 4
  %v2_b31c = call i32 @function_11ea4(i32 %v0_b318, i32 4)
  %v0_b320 = load i32, i32* @r5, align 4
  store i32 %v0_b320, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b330 = load i32, i32* @r4, align 4
  store i32 %v0_b330, i32* %r0.global-to-local, align 4
  %v5_b334 = inttoptr i32 %v0_b320 to i32*
  %v6_b334 = call i32 @function_8570(i32 %v0_b330, i32* %v5_b334, i32 2, i32 0)
  %v1_b340 = urem i32 %v6_b334, 256
  store i32 %v1_b340, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b34c = load i32, i32* @r5, align 4
  store i32 %v0_b34c, i32* %r1.global-to-local, align 4
  %v0_b350 = load i32, i32* @r4, align 4
  store i32 %v0_b350, i32* %r0.global-to-local, align 4
  %v5_b354 = trunc i32 %v6_b334 to i8
  %v6_b358 = inttoptr i32 %v0_b34c to i32*
  %v7_b358 = call i32 @function_8570(i32 %v0_b350, i32* %v6_b358, i32 3, i32 65535)
  %v0_b35c = load i32, i32* @r5, align 4
  store i32 %v0_b35c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b358, i32* @r7, align 4
  %v0_b36c = load i32, i32* @r4, align 4
  store i32 %v0_b36c, i32* %r0.global-to-local, align 4
  %v4_b370 = inttoptr i32 %v0_b35c to i32*
  %v5_b370 = call i32 @function_8570(i32 %v0_b36c, i32* %v4_b370, i32 4, i32 64)
  %v1_b378 = urem i32 %v5_b370, 256
  store i32 %v1_b378, i32* %ip.global-to-local, align 4
  %v0_b37c = load i32, i32* @r5, align 4
  store i32 %v0_b37c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b388 = load i32, i32* @r4, align 4
  store i32 %v0_b388, i32* %r0.global-to-local, align 4
  %v6_b390 = inttoptr i32 %v0_b37c to i32*
  %v7_b390 = call i32 @function_8570(i32 %v0_b388, i32* %v6_b390, i32 5, i32 1)
  %v1_b39c = urem i32 %v7_b390, 256
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3a4 = load i32, i32* @r5, align 4
  store i32 %v0_b3a4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v5_b3b4 = inttoptr i32 %v0_b3a4 to i32*
  %v6_b3b4 = call i32 @function_8570(i32 %v0_b3ac, i32* %v5_b3b4, i32 7, i32 65535)
  %v0_b3b8 = load i32, i32* @r5, align 4
  store i32 %v0_b3b8, i32* %r1.global-to-local, align 4
  %v3_b3bc = mul i32 %v6_b3b4, 65536
  store i32 %v3_b3bc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v3_b3cc = urem i32 %v6_b3b4, 65536
  store i32 %v3_b3cc, i32* @sl, align 4
  %v4_b3d0 = inttoptr i32 %v0_b3b8 to i32*
  %v5_b3d0 = call i32 @function_8570(i32 %v0_b3c8, i32* %v4_b3d0, i32 11, i32 0)
  %v1_b3d8 = urem i32 %v5_b3d0, 256
  store i32 %v1_b3d8, i32* %ip.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r5, align 4
  store i32 %v0_b3dc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* @r4, align 4
  store i32 %v0_b3e8, i32* %r0.global-to-local, align 4
  %v5_b3f0 = inttoptr i32 %v0_b3dc to i32*
  %v6_b3f0 = call i32 @function_8570(i32 %v0_b3e8, i32* %v5_b3f0, i32 12, i32 1)
  %v1_b3f8 = urem i32 %v6_b3f0, 256
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r5, align 4
  store i32 %v0_b3fc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v5_b410 = inttoptr i32 %v0_b3fc to i32*
  %v6_b410 = call i32 @function_8570(i32 %v0_b408, i32* %v5_b410, i32 13, i32 1)
  %v1_b418 = urem i32 %v6_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @function_8570(i32 %v0_b428, i32* %v5_b430, i32 14, i32 0)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @function_8570(i32 %v0_b448, i32* %v5_b450, i32 15, i32 0)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @function_8570(i32 %v0_b468, i32* %v5_b470, i32 16, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b484 = load i32, i32* @r5, align 4
  store i32 %v0_b484, i32* %r1.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b484 to i32*
  %v6_b490 = call i32 @function_8570(i32 %v0_b488, i32* %v5_b490, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4a0 = load i32, i32* @r5, align 4
  store i32 %v0_b4a0, i32* %r1.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v4_b4a8 = inttoptr i32 %v0_b4a0 to i32*
  %v5_b4a8 = call i32 @function_8570(i32 %v0_b4a4, i32* %v4_b4a8, i32 1, i32 1)
  %v1_b4b0 = urem i32 %v5_b4a8, 256
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b4c4 = call i32 @function_1133c(i32 2, i32 3, i32 6)
  store i32 %v3_b4c4, i32* %r0.global-to-local, align 4
  %v7_b4c8 = icmp eq i32 %v3_b4c4, -1
  store i1 %v7_b4c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b4c4, i32* @sb, align 4
  br i1 %v7_b4c8, label %dec_label_pc_b6b8, label %dec_label_pc_b4d4

dec_label_pc_b4d4:                                ; preds = %dec_label_pc_b2f0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b4dc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b4dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b4f0 = call i32 @function_112f8(i32 %v3_b4c4, i32 0, i32 3, i32 %v6_b4dc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b4f0, i32* %r0.global-to-local, align 4
  %v7_b4f4 = icmp eq i32 %v5_b4f0, -1
  store i1 %v7_b4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4f4, label %dec_label_pc_b6b0, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %dec_label_pc_b4d4
  %v0_b4fc = load i32, i32* @r7, align 4
  %v3_b4fc = mul i32 %v0_b4fc, 65536
  store i32 %v3_b4fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b504 = load i32, i32* @r6, align 4
  %v2_b504 = icmp eq i32 %v0_b504, 0
  store i1 %v2_b504, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b50c = urem i32 %v0_b4fc, 65536
  store i32 %v3_b50c, i32* @fp, align 4
  br i1 %v2_b504, label %dec_label_pc_b93c, label %dec_label_pc_b514.preheader

dec_label_pc_b514.preheader:                      ; preds = %dec_label_pc_b4fc
  %v2_b560 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5a4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b5dc = ptrtoint i32* %stack_var_-80 to i32
  %v2_b5e8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b5ec = ptrtoint i32* %stack_var_-48 to i32
  %v4_b64c = zext i8 %tmp to i32
  %v1_b650 = and i32 %v4_b64c, 18
  %v2_b654 = icmp eq i32 %v1_b650, 18
  %v4_b7f8 = sext i8 %v5_b354 to i32
  %sext = mul i32 %v5_b370, 16777216
  %v4_b808 = sdiv i32 %sext, 16777216
  %v3_b638 = sext i16 %tmp61 to i32
  %v1_b65c = and i32 %v4_b64c, 5
  %v2_b65c = icmp eq i32 %v1_b65c, 0
  %v4_b59c = add i32 %v2_b560, 82
  %v5_b59c = inttoptr i32 %v4_b59c to i16*
  %v1_b78c = add i32 %v6_b490, 40
  %v1_b8a0 = urem i32 %v5_b3d0, 2
  %tmp97 = sub nsw i32 0, %v1_b8a0
  %v4_b8a8 = and i32 %tmp97, 32
  %v1_b8b8 = urem i32 %v6_b3f0, 2
  %tmp98 = sub nsw i32 0, %v1_b8b8
  %v4_b8c0 = and i32 %tmp98, 16
  %v1_b8d0 = urem i32 %v6_b410, 2
  %tmp99 = sub nsw i32 0, %v1_b8d0
  %v4_b8d8 = and i32 %tmp99, 8
  %v1_b8e8 = urem i32 %v6_b430, 2
  %tmp100 = sub nsw i32 0, %v1_b8e8
  %v4_b8f0 = and i32 %tmp100, 4
  %v1_b900 = urem i32 %v6_b450, 2
  %tmp101 = sub nsw i32 0, %v1_b900
  %v3_b908 = and i32 %tmp101, 2
  %v1_b918 = urem i32 %v6_b470, 2
  br label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %dec_label_pc_b514.preheader, %dec_label_pc_b688
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b688 ], [ %tmp34, %dec_label_pc_b514.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b688 ], [ %tmp37, %dec_label_pc_b514.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b520 = call i32 @function_1133c(i32 2, i32 1, i32 0)
  store i32 %v3_b520, i32* %r0.global-to-local, align 4
  %v7_b524 = icmp eq i32 %v3_b520, -1
  store i1 %v7_b524, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b520, i32* @r5, align 4
  br i1 %v7_b524, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b530:                                ; preds = %dec_label_pc_b514, %dec_label_pc_b664
  %v0_b538 = phi i32 [ %v3_b678, %dec_label_pc_b664 ], [ %v3_b520, %dec_label_pc_b514 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b664 ], [ %stack_var_-62.0, %dec_label_pc_b514 ]
  %stack_var_-60.1 = phi i32 [ %v0_b738, %dec_label_pc_b664 ], [ %stack_var_-60.0, %dec_label_pc_b514 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b538 = call i32 @function_10998(i32 %v0_b538, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b540 = or i32 %v2_b538, 2048
  store i32 %v1_b540, i32* %r2.global-to-local, align 4
  %v0_b544 = load i32, i32* @r5, align 4
  store i32 %v0_b544, i32* %r0.global-to-local, align 4
  %v2_b548 = call i32 @function_10998(i32 %v0_b544, i32 4)
  %v3_b54c = load i32, i32* %stack_var_-44, align 4
  %v5_b554 = mul i32 %v3_b54c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b568 = add i32 %v5_b554, %arg2
  store i32 %v2_b568, i32* %r3.global-to-local, align 4
  %v1_b56c = add i32 %v2_b568, 20
  %v2_b56c = inttoptr i32 %v1_b56c to i8*
  %v3_b56c = load i8, i8* %v2_b56c, align 1
  %v4_b56c = zext i8 %v3_b56c to i32
  store i32 %v4_b56c, i32* %r2.global-to-local, align 4
  %v2_b570 = icmp ugt i8 %v3_b56c, 30
  %v7_b570 = icmp eq i8 %v3_b56c, 31
  store i1 %v7_b570, i1* %cpsr_z.global-to-local, align 1
  %v2_b574 = xor i1 %v7_b570, true
  %v3_b574 = and i1 %v2_b570, %v2_b574
  br i1 %v3_b574, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b530
  %v5_b574 = add i32 %v2_b568, 16
  %v6_b574 = inttoptr i32 %v5_b574 to i32*
  %v7_b574 = load i32, i32* %v6_b574, align 4
  store i32 %v7_b574, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b530, %bb
  %v4_b578 = phi i32 [ %v2_b568, %dec_label_pc_b530 ], [ %v7_b574, %bb ]
  %v4_b578.stack_var_-60.1 = select i1 %v3_b574, i32 %v4_b578, i32 %stack_var_-60.1
  %v2_b57c = xor i1 %v2_b570, true
  %v3_b57c = or i1 %v7_b570, %v2_b57c
  br i1 %v3_b57c, label %dec_label_pc_b6c4, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %bb71, %dec_label_pc_b6c4
  %v0_b738 = phi i32 [ %v5_b714, %dec_label_pc_b6c4 ], [ %v4_b578.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b588 = load i32, i32* @sl, align 4
  %v9_b588 = icmp eq i32 %v0_b588, 65535
  store i1 %v9_b588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b588, label %dec_label_pc_b720, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b580
  %v4_b58c = udiv i32 %v0_b588, 256
  %v2_b590 = urem i32 %v0_b588, 256
  store i32 %v2_b590, i32* %r2.global-to-local, align 4
  %v5_b594 = mul nuw nsw i32 %v2_b590, 256
  %v6_b594 = or i32 %v5_b594, %v4_b58c
  store i32 %v6_b594, i32* %r3.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  %v2_b59c = trunc i32 %v6_b594 to i16
  store i16 %v2_b59c, i16* %v5_b59c, align 2
  br label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %.thread9, %dec_label_pc_b720
  %stack_var_-62.2 = phi i16 [ %v1_b720, %dec_label_pc_b720 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  %v3_b5b0 = call i32 @function_11124(i32 %v0_b5ac, i32 %v2_b5a4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5b8 = call i32 @function_107e4(i32* null)
  store i32 %v2_b5b8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5b8, i32* @r4, align 4
  %v9_b618 = icmp eq i32 %tmp35, %v0_b738
  %v4_b640 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b618 to i32
  %v9_b62c = icmp eq i1 %v9_b618, false
  %v9_b644 = icmp eq i32 %v3_b638, %v4_b640
  br label %dec_label_pc_b5d4

dec_label_pc_b5c4:                                ; preds = %.thread, %dec_label_pc_b634, %dec_label_pc_b65c, %bb75
  %v2_b5c4 = call i32 @function_107e4(i32* null)
  %v0_b5c8 = load i32, i32* @r4, align 4
  %v2_b5c8 = sub i32 %v2_b5c4, %v0_b5c8
  store i32 %v2_b5c8, i32* %r0.global-to-local, align 4
  %v7_b5cc = icmp eq i32 %v2_b5c8, 10
  store i1 %v7_b5cc, i1* %cpsr_z.global-to-local, align 1
  %v8_b5d0 = icmp sgt i32 %v2_b5c8, 10
  br i1 %v8_b5d0, label %dec_label_pc_b664, label %dec_label_pc_b5d4

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c4, %dec_label_pc_b5a4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %r1.global-to-local, align 4
  store i32 %v2_b5ec, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5f4 = load i32, i32* @sb, align 4
  store i32 %v0_b5f4, i32* %r0.global-to-local, align 4
  %v6_b5fc = call i32 @function_11244(i32 %v0_b5f4, i32 %v2_b5e8, i32 256, i32 16384, i32 %v2_b5dc, i32 %v2_b5ec)
  store i32 %v6_b5fc, i32* %r2.global-to-local, align 4
  %v7_b604 = icmp eq i32 %v6_b5fc, -1
  store i1 %v7_b604, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b604, label %dec_label_pc_b6b8, label %dec_label_pc_b610

dec_label_pc_b610:                                ; preds = %dec_label_pc_b5d4
  store i32 %v0_b738, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b624 = icmp eq i32 %v6_b5fc, 40
  store i1 %v7_b624, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b5fc, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b610
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b5c4

bb75:                                             ; preds = %dec_label_pc_b610
  store i1 %v9_b62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b62c, label %dec_label_pc_b5c4, label %dec_label_pc_b634

dec_label_pc_b634:                                ; preds = %bb75
  store i32 %v3_b638, i32* @lr, align 4
  store i32 %v2_b560, i32* @r3, align 4
  store i32 %v4_b640, i32* %r2.global-to-local, align 4
  store i1 %v9_b644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b644, label %dec_label_pc_b64c, label %dec_label_pc_b5c4

dec_label_pc_b64c:                                ; preds = %dec_label_pc_b634
  store i32 %v4_b64c, i32* %r2.global-to-local, align 4
  store i32 %v1_b650, i32* @r3, align 4
  store i1 %v2_b654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b654, label %dec_label_pc_b730, label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %dec_label_pc_b64c
  store i1 %v2_b65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b65c, label %dec_label_pc_b5c4, label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b65c, %dec_label_pc_b5c4
  %v0_b664 = load i32, i32* @r5, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v1_b668 = call i32 @function_10b64(i32 %v0_b664)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b678 = call i32 @function_1133c(i32 2, i32 1, i32 0)
  store i32 %v3_b678, i32* %r0.global-to-local, align 4
  %v3_b67c = icmp eq i32 %v3_b678, -1
  %v8_b67c = icmp eq i32 %v3_b678, -1
  store i1 %v8_b67c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b678, i32* @r5, align 4
  br i1 %v3_b67c, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b688:                                ; preds = %dec_label_pc_b664, %dec_label_pc_b514, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b514 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b664 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b514 ], [ %v0_b738, %bb82 ], [ %v0_b738, %dec_label_pc_b664 ]
  %v3_b688 = load i32, i32* %stack_var_-44, align 4
  %v1_b68c = add i32 %v3_b688, 1
  store i32 %v1_b68c, i32* @r3, align 4
  %v1_b690 = load i32, i32* @r6, align 4
  %v9_b690 = icmp eq i32 %v1_b68c, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b68c, i32* %stack_var_-44, align 4
  %v5_b698 = icmp slt i32 %v1_b68c, %v1_b690
  br i1 %v5_b698, label %dec_label_pc_b514, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b688
  store i32 %v6_b490, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b94c

dec_label_pc_b6b0:                                ; preds = %dec_label_pc_b4d4
  %v0_b6b0 = load i32, i32* @sb, align 4
  store i32 %v0_b6b0, i32* %r0.global-to-local, align 4
  %v1_b6b4 = call i32 @function_10b64(i32 %v0_b6b0)
  store i32 %v1_b6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6b8

dec_label_pc_b6b8:                                ; preds = %dec_label_pc_b5d4, %dec_label_pc_b2f0, %dec_label_pc_b6b0
  %v1_b6c0 = phi i32 [ %v3_b4c4, %dec_label_pc_b2f0 ], [ %v1_b6b4, %dec_label_pc_b6b0 ], [ 0, %dec_label_pc_b5d4 ]
  store i32 %v27_b2f0, i32* %lr.global-to-local, align 4
  ret i32 %v1_b6c0

dec_label_pc_b6c4:                                ; preds = %bb71
  %v1_b6c4 = add i32 %v4_b578, 16
  %v2_b6c4 = inttoptr i32 %v1_b6c4 to i32*
  %v3_b6c4 = load i32, i32* %v2_b6c4, align 4
  store i32 %v3_b6c4, i32* @r4, align 4
  %v0_b6c8 = call i32 @function_deb8()
  store i32 %v0_b6c8, i32* %r0.global-to-local, align 4
  %v3_b6cc = load i32, i32* %stack_var_-44, align 4
  %v5_b6d4 = mul i32 %v3_b6cc, 24
  %v0_b6dc = load i32, i32* @r4, align 4
  %v1_b6dc = and i32 %v0_b6dc, 16711680
  store i32 %v1_b6dc, i32* %ip.global-to-local, align 4
  %v3_b6e0 = udiv i32 %v0_b6dc, 16777216
  %v2_b6e4 = add i32 %v5_b6d4, %arg2
  store i32 %v2_b6e4, i32* %r1.global-to-local, align 4
  %v4_b6e8 = udiv i32 %v1_b6dc, 256
  %v5_b6e8 = or i32 %v4_b6e8, %v3_b6e0
  store i32 %v5_b6e8, i32* %r2.global-to-local, align 4
  %v1_b6ec = and i32 %v0_b6dc, 65280
  store i32 %v1_b6ec, i32* %r3.global-to-local, align 4
  %v1_b6f0 = add i32 %v2_b6e4, 20
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i8*
  %v3_b6f0 = load i8, i8* %v2_b6f0, align 1
  %v4_b6f0 = zext i8 %v3_b6f0 to i32
  store i32 %v4_b6f0, i32* %ip.global-to-local, align 4
  %v5_b6f8 = call i32 @llvm.bswap.i32(i32 %v0_b6dc)
  %v7_b6fc = lshr i32 %v0_b6c8, %v4_b6f0
  %v8_b6fc = add i32 %v7_b6fc, %v5_b6f8
  store i32 %v8_b6fc, i32* %r2.global-to-local, align 4
  %v1_b700 = and i32 %v8_b6fc, 16711680
  store i32 %v1_b700, i32* %r0.global-to-local, align 4
  %v1_b70c = and i32 %v8_b6fc, 65280
  store i32 %v1_b70c, i32* %r1.global-to-local, align 4
  %v5_b714 = call i32 @llvm.bswap.i32(i32 %v8_b6fc)
  store i32 %v5_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b580

dec_label_pc_b720:                                ; preds = %dec_label_pc_b580
  %v0_b720 = call i32 @function_deb8()
  %v1_b720 = trunc i32 %v0_b720 to i16
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  store i32 %v2_b560, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5a4

dec_label_pc_b730:                                ; preds = %dec_label_pc_b64c
  %v3_b730 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b730, i32* @r4, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v5_b738 = mul i32 %v3_b730, 16
  %v6_b738 = add i32 %v5_b738, %v2_b30c
  %v7_b738 = inttoptr i32 %v6_b738 to i32*
  store i32 %v0_b738, i32* %v7_b738, align 4
  %v0_b73c = load i32, i32* @r8, align 4
  %v1_b73c = add i32 %v0_b73c, 4
  %v2_b73c = inttoptr i32 %v1_b73c to i32*
  %v3_b73c = load i32, i32* %v2_b73c, align 4
  store i32 %v3_b73c, i32* %r1.global-to-local, align 4
  %v1_b748 = and i32 %v3_b73c, 65280
  store i32 %v1_b748, i32* %r2.global-to-local, align 4
  store i32 %v2_b30c, i32* %r0.global-to-local, align 4
  %v0_b758 = load i32, i32* @r4, align 4
  %v3_b758 = mul i32 %v0_b758, 16
  %v2_b75c = add i32 %v3_b758, %v2_b30c
  store i32 %v2_b75c, i32* %ip.global-to-local, align 4
  %v5_b760 = call i32 @llvm.bswap.i32(i32 %v3_b73c)
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v2_b764 = add i32 %v2_b75c, 4
  %v3_b764 = inttoptr i32 %v2_b764 to i32*
  store i32 %v5_b760, i32* %v3_b764, align 4
  %v0_b768 = load i32, i32* @r8, align 4
  %v1_b768 = add i32 %v0_b768, 8
  %v2_b768 = inttoptr i32 %v1_b768 to i32*
  %v3_b768 = load i32, i32* %v2_b768, align 4
  store i32 %v3_b768, i32* %r1.global-to-local, align 4
  %v1_b76c = and i32 %v3_b768, 16711680
  store i32 %v1_b76c, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v5_b784 = call i32 @llvm.bswap.i32(i32 %v3_b768)
  store i32 %v5_b784, i32* %r3.global-to-local, align 4
  %v1_b788 = add i32 %v0_b768, 2
  %v2_b788 = inttoptr i32 %v1_b788 to i16*
  %v3_b788 = load i16, i16* %v2_b788, align 2
  %v4_b788 = zext i16 %v3_b788 to i32
  store i32 %v4_b788, i32* %r1.global-to-local, align 4
  store i32 %v1_b78c, i32* @r7, align 4
  %v0_b790 = load i32, i32* @lr, align 4
  %v1_b790 = trunc i32 %v0_b790 to i16
  %v2_b790 = load i32, i32* %ip.global-to-local, align 4
  %v3_b790 = add i32 %v2_b790, 14
  %v4_b790 = inttoptr i32 %v3_b790 to i16*
  store i16 %v1_b790, i16* %v4_b790, align 2
  %v0_b794 = load i32, i32* %r1.global-to-local, align 4
  %v1_b794 = trunc i32 %v0_b794 to i16
  %v2_b794 = load i32, i32* %ip.global-to-local, align 4
  %v3_b794 = add i32 %v2_b794, 12
  %v4_b794 = inttoptr i32 %v3_b794 to i16*
  store i16 %v1_b794, i16* %v4_b794, align 2
  %v0_b798 = load i32, i32* %r3.global-to-local, align 4
  %v1_b798 = load i32, i32* %ip.global-to-local, align 4
  %v2_b798 = add i32 %v1_b798, 8
  %v3_b798 = inttoptr i32 %v2_b798 to i32*
  store i32 %v0_b798, i32* %v3_b798, align 4
  %v0_b79c = load i32, i32* @r7, align 4
  store i32 %v0_b79c, i32* @r0, align 4
  %v0_b7a0 = call i32 @function_11584()
  store i32 %v0_b7a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b31c, i32* %r3.global-to-local, align 4
  %v2_b7ac = load i32, i32* @r4, align 4
  %v5_b7ac = mul i32 %v2_b7ac, 4
  %v6_b7ac = add i32 %v5_b7ac, %v2_b31c
  %v7_b7ac = inttoptr i32 %v6_b7ac to i32*
  store i32 %v0_b7a0, i32* %v7_b7ac, align 4
  %v3_b7b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7b0, i32* %r2.global-to-local, align 4
  %v0_b7b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7b4 = mul i32 %v3_b7b0, 4
  %v5_b7b4 = add i32 %v0_b7b4, %v4_b7b4
  %v6_b7b4 = inttoptr i32 %v5_b7b4 to i32*
  %v7_b7b4 = load i32, i32* %v6_b7b4, align 4
  store i32 %v7_b7b4, i32* @r4, align 4
  %v1_b7b8 = inttoptr i32 %v7_b7b4 to i8*
  %v2_b7b8 = load i8, i8* %v1_b7b8, align 1
  %tmp103 = urem i8 %v2_b7b8, 16
  %v1_b7bc = zext i8 %tmp103 to i32
  %v1_b7c0 = or i32 %v1_b7bc, 64
  store i32 %v1_b7c0, i32* %r3.global-to-local, align 4
  %v1_b7c4 = trunc i32 %v1_b7c0 to i8
  store i8 %v1_b7c4, i8* %v1_b7b8, align 1
  %v0_b7c8 = load i32, i32* @r4, align 4
  %v1_b7c8 = inttoptr i32 %v0_b7c8 to i8*
  %v2_b7c8 = load i8, i8* %v1_b7c8, align 1
  %v0_b7cc = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b7cc, 256
  %v1_b7d4 = and i8 %v2_b7c8, -16
  %v1_b7d8 = or i8 %v1_b7d4, 5
  %v1_b7dc = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b7cc, 256
  %v4_b7e0 = urem i32 %tmp78, 256
  %v5_b7e0 = or i32 %v4_b7e0, %v1_b7dc
  store i32 %v5_b7e0, i32* %r2.global-to-local, align 4
  %v0_b7e4 = load i32, i32* @fp, align 4
  %v1_b7e4 = urem i32 %v0_b7e4, 256
  store i32 %v1_b7e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  %v3_b7ec = udiv i32 %v0_b7e4, 256
  store i32 %v3_b7ec, i32* %r1.global-to-local, align 4
  store i8 %v1_b7d8, i8* %v1_b7c8, align 1
  %v0_b7f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7f4 = load i32, i32* %r0.global-to-local, align 4
  %v4_b7f4 = mul i32 %v1_b7f4, 256
  %v5_b7f4 = or i32 %v4_b7f4, %v0_b7f4
  store i32 %v5_b7f4, i32* %r1.global-to-local, align 4
  store i32 %v4_b7f8, i32* %r0.global-to-local, align 4
  %v2_b7fc = load i32, i32* @r4, align 4
  %v3_b7fc = add i32 %v2_b7fc, 1
  %v4_b7fc = inttoptr i32 %v3_b7fc to i8*
  store i8 %v5_b354, i8* %v4_b7fc, align 1
  %v0_b800 = load i32, i32* %r1.global-to-local, align 4
  %v1_b800 = trunc i32 %v0_b800 to i16
  %v2_b800 = load i32, i32* @r4, align 4
  %v3_b800 = add i32 %v2_b800, 4
  %v4_b800 = inttoptr i32 %v3_b800 to i16*
  store i16 %v1_b800, i16* %v4_b800, align 2
  %v0_b804 = load i32, i32* %ip.global-to-local, align 4
  %v2_b804 = icmp eq i32 %v0_b804, 0
  store i1 %v2_b804, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b808, i32* %r1.global-to-local, align 4
  %v0_b80c = load i32, i32* %r2.global-to-local, align 4
  %v1_b80c = trunc i32 %v0_b80c to i16
  %v2_b80c = load i32, i32* @r4, align 4
  %v3_b80c = add i32 %v2_b80c, 2
  %v4_b80c = inttoptr i32 %v3_b80c to i16*
  store i16 %v1_b80c, i16* %v4_b80c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b804, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b730
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b730, %bb79
  %v0_b818 = load i32, i32* %r1.global-to-local, align 4
  %v1_b818 = trunc i32 %v0_b818 to i8
  %v2_b818 = load i32, i32* @r4, align 4
  %v3_b818 = add i32 %v2_b818, 8
  %v4_b818 = inttoptr i32 %v3_b818 to i8*
  store i8 %v1_b818, i8* %v4_b818, align 1
  %v0_b81c = load i32, i32* %r3.global-to-local, align 4
  %v1_b81c = trunc i32 %v0_b81c to i8
  %v2_b81c = load i32, i32* @r4, align 4
  %v3_b81c = add i32 %v2_b81c, 9
  %v4_b81c = inttoptr i32 %v3_b81c to i8*
  store i8 %v1_b81c, i8* %v4_b81c, align 1
  %v0_b820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b820, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b820 = load i32, i32* %r2.global-to-local, align 4
  %v2_b820 = trunc i32 %v1_b820 to i16
  %v3_b820 = load i32, i32* @r4, align 4
  %v4_b820 = add i32 %v3_b820, 6
  %v5_b820 = inttoptr i32 %v4_b820 to i16*
  store i16 %v2_b820, i16* %v5_b820, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r2.global-to-local, align 4
  %v2_b828 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_b828, i32* %r1.global-to-local, align 4
  %v1_b82c = load i32, i32* @r4, align 4
  %v2_b82c = add i32 %v1_b82c, 12
  %v3_b82c = inttoptr i32 %v2_b82c to i32*
  store i32 %v2_b828, i32* %v3_b82c, align 4
  %v3_b830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b830, i32* %r3.global-to-local, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v4_b838 = mul i32 %v3_b830, 16
  %v5_b838 = add i32 %v4_b838, %v2_b30c
  %v6_b838 = inttoptr i32 %v5_b838 to i32*
  %v7_b838 = load i32, i32* %v6_b838, align 4
  store i32 %v7_b838, i32* %r2.global-to-local, align 4
  store i32 %v5_b838, i32* %r3.global-to-local, align 4
  %v1_b844 = load i32, i32* @r4, align 4
  %v2_b844 = add i32 %v1_b844, 16
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v7_b838, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r3.global-to-local, align 4
  %v1_b848 = add i32 %v0_b848, 12
  %v2_b848 = inttoptr i32 %v1_b848 to i16*
  %v3_b848 = load i16, i16* %v2_b848, align 2
  %v4_b848 = zext i16 %v3_b848 to i32
  store i32 %v4_b848, i32* %r0.global-to-local, align 4
  %v1_b84c = add i32 %v0_b848, 8
  %v2_b84c = inttoptr i32 %v1_b84c to i32*
  %v3_b84c = load i32, i32* %v2_b84c, align 4
  store i32 %v3_b84c, i32* %r1.global-to-local, align 4
  %v2_b850 = load i32, i32* @r4, align 4
  %v3_b850 = add i32 %v2_b850, 20
  %v4_b850 = inttoptr i32 %v3_b850 to i16*
  store i16 %v3_b848, i16* %v4_b850, align 2
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 20
  store i32 %v1_b854, i32* @r8, align 4
  %v1_b858 = add i32 %v0_b854, 33
  %v2_b858 = inttoptr i32 %v1_b858 to i8*
  %v3_b858 = load i8, i8* %v2_b858, align 1
  %v4_b858 = zext i8 %v3_b858 to i32
  store i32 %v4_b858, i32* %r2.global-to-local, align 4
  %v0_b85c = load i32, i32* %r1.global-to-local, align 4
  %v2_b85c = add i32 %v0_b854, 24
  %v3_b85c = inttoptr i32 %v2_b85c to i32*
  store i32 %v0_b85c, i32* %v3_b85c, align 4
  %v0_b860 = load i32, i32* %r2.global-to-local, align 4
  %v1_b860 = or i32 %v0_b860, 1
  store i32 %v1_b860, i32* %r2.global-to-local, align 4
  %v0_b864 = load i32, i32* %r3.global-to-local, align 4
  %v1_b864 = add i32 %v0_b864, 4
  %v2_b864 = inttoptr i32 %v1_b864 to i32*
  %v3_b864 = load i32, i32* %v2_b864, align 4
  store i32 %v3_b864, i32* %r1.global-to-local, align 4
  %v1_b868 = add i32 %v0_b864, 14
  %v2_b868 = inttoptr i32 %v1_b868 to i16*
  %v3_b868 = load i16, i16* %v2_b868, align 2
  %v4_b868 = zext i16 %v3_b868 to i32
  store i32 %v4_b868, i32* %r3.global-to-local, align 4
  %v1_b86c = trunc i32 %v1_b860 to i8
  %v2_b86c = load i32, i32* @r8, align 4
  %v3_b86c = add i32 %v2_b86c, 13
  %v4_b86c = inttoptr i32 %v3_b86c to i8*
  store i8 %v1_b86c, i8* %v4_b86c, align 1
  %v0_b870 = load i32, i32* %r3.global-to-local, align 4
  %v1_b870 = trunc i32 %v0_b870 to i16
  %v2_b870 = load i32, i32* @r8, align 4
  %v3_b870 = add i32 %v2_b870, 2
  %v4_b870 = inttoptr i32 %v3_b870 to i16*
  store i16 %v1_b870, i16* %v4_b870, align 2
  %v0_b874 = load i32, i32* @r8, align 4
  %v1_b874 = add i32 %v0_b874, 12
  %v2_b874 = inttoptr i32 %v1_b874 to i8*
  %v3_b874 = load i8, i8* %v2_b874, align 1
  %v4_b874 = zext i8 %v3_b874 to i32
  store i32 %v4_b874, i32* %r3.global-to-local, align 4
  %v1_b878 = add i32 %v0_b874, 13
  %v2_b878 = inttoptr i32 %v1_b878 to i8*
  %v3_b878 = load i8, i8* %v2_b878, align 1
  %v4_b878 = zext i8 %v3_b878 to i32
  %tmp104 = urem i8 %v3_b874, 16
  %v1_b87c = zext i8 %tmp104 to i32
  %v1_b880 = or i32 %v1_b87c, 128
  store i32 %v1_b880, i32* %r3.global-to-local, align 4
  %v1_b884 = or i32 %v4_b878, 16
  store i32 %v1_b884, i32* %r2.global-to-local, align 4
  %v0_b888 = load i32, i32* %r1.global-to-local, align 4
  %v2_b888 = add i32 %v0_b874, 8
  %v3_b888 = inttoptr i32 %v2_b888 to i32*
  store i32 %v0_b888, i32* %v3_b888, align 4
  %v0_b88c = load i32, i32* %r3.global-to-local, align 4
  %v1_b88c = trunc i32 %v0_b88c to i8
  %v2_b88c = load i32, i32* @r8, align 4
  %v3_b88c = add i32 %v2_b88c, 12
  %v4_b88c = inttoptr i32 %v3_b88c to i8*
  store i8 %v1_b88c, i8* %v4_b88c, align 1
  %v0_b890 = load i32, i32* %r2.global-to-local, align 4
  %v1_b890 = trunc i32 %v0_b890 to i8
  %v2_b890 = load i32, i32* @r8, align 4
  %v3_b890 = add i32 %v2_b890, 13
  %v4_b890 = inttoptr i32 %v3_b890 to i8*
  store i8 %v1_b890, i8* %v4_b890, align 1
  %v0_b894 = call i32 @function_deb8()
  %v1_b894 = trunc i32 %v0_b894 to i16
  store i32 %v0_b894, i32* %r0.global-to-local, align 4
  store i32 %v1_b3d8, i32* %r1.global-to-local, align 4
  %v0_b89c = load i32, i32* @r8, align 4
  %v1_b89c = add i32 %v0_b89c, 13
  %v2_b89c = inttoptr i32 %v1_b89c to i8*
  %v3_b89c = load i8, i8* %v2_b89c, align 1
  %v4_b89c = zext i8 %v3_b89c to i32
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v1_b8a4 = and i32 %v4_b89c, 223
  %v5_b8a8 = or i32 %v1_b8a4, %v4_b8a8
  store i32 %v5_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v5_b8a8 to i8
  store i8 %v1_b8ac, i8* %v2_b89c, align 1
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 13
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v1_b8b8, i32* %r3.global-to-local, align 4
  %v1_b8bc = and i32 %v4_b8b4, 239
  %v5_b8c0 = or i32 %v1_b8bc, %v4_b8c0
  store i32 %v5_b8c0, i32* %r2.global-to-local, align 4
  %v1_b8c4 = trunc i32 %v5_b8c0 to i8
  store i8 %v1_b8c4, i8* %v2_b8b4, align 1
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8cc = load i32, i32* @r8, align 4
  %v1_b8cc = add i32 %v0_b8cc, 13
  %v2_b8cc = inttoptr i32 %v1_b8cc to i8*
  %v3_b8cc = load i8, i8* %v2_b8cc, align 1
  %v4_b8cc = zext i8 %v3_b8cc to i32
  store i32 %v1_b8d0, i32* %r2.global-to-local, align 4
  %v1_b8d4 = and i32 %v4_b8cc, 247
  %v5_b8d8 = or i32 %v1_b8d4, %v4_b8d8
  store i32 %v5_b8d8, i32* %r3.global-to-local, align 4
  %v1_b8dc = trunc i32 %v5_b8d8 to i8
  store i8 %v1_b8dc, i8* %v2_b8cc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8e4 = load i32, i32* @r8, align 4
  %v1_b8e4 = add i32 %v0_b8e4, 13
  %v2_b8e4 = inttoptr i32 %v1_b8e4 to i8*
  %v3_b8e4 = load i8, i8* %v2_b8e4, align 1
  %v4_b8e4 = zext i8 %v3_b8e4 to i32
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = and i32 %v4_b8e4, 251
  %v5_b8f0 = or i32 %v1_b8ec, %v4_b8f0
  store i32 %v5_b8f0, i32* %r2.global-to-local, align 4
  %v1_b8f4 = trunc i32 %v5_b8f0 to i8
  store i8 %v1_b8f4, i8* %v2_b8e4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r8, align 4
  %v1_b8fc = add i32 %v0_b8fc, 13
  %v2_b8fc = inttoptr i32 %v1_b8fc to i8*
  %v3_b8fc = load i8, i8* %v2_b8fc, align 1
  %v4_b8fc = zext i8 %v3_b8fc to i32
  store i32 %v1_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = and i32 %v4_b8fc, 253
  %v4_b908 = or i32 %v1_b904, %v3_b908
  store i32 %v4_b908, i32* %r3.global-to-local, align 4
  %v1_b90c = trunc i32 %v4_b908 to i8
  store i8 %v1_b90c, i8* %v2_b8fc, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b914 = load i32, i32* @r8, align 4
  %v1_b914 = add i32 %v0_b914, 13
  %v2_b914 = inttoptr i32 %v1_b914 to i8*
  %v3_b914 = load i8, i8* %v2_b914, align 1
  %v4_b914 = zext i8 %v3_b914 to i32
  %v1_b91c = and i32 %v4_b914, 254
  store i32 %v1_b91c, i32* %r2.global-to-local, align 4
  %v2_b920 = or i32 %v1_b91c, %v1_b918
  store i32 %v2_b920, i32* %r3.global-to-local, align 4
  %v1_b924 = trunc i32 %v2_b920 to i8
  store i8 %v1_b924, i8* %v2_b914, align 1
  %v3_b928 = load i32, i32* @r8, align 4
  %v4_b928 = add i32 %v3_b928, 14
  %v5_b928 = inttoptr i32 %v4_b928 to i16*
  store i16 %v1_b894, i16* %v5_b928, align 2
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  %v1_b930 = add i32 %v0_b930, 40
  store i32 %v1_b930, i32* %r0.global-to-local, align 4
  %v2_b934 = inttoptr i32 %v1_b930 to i16*
  %v3_b934 = call i32 @function_e04c(i16* %v2_b934, i32 %v6_b490)
  store i32 %v3_b934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b688

dec_label_pc_b93c:                                ; preds = %dec_label_pc_b4fc
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b490, 40
  br label %dec_label_pc_b94c

dec_label_pc_b94c:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b93c
  %storemerge6.pre-phi = phi i32 [ %v1_b78c, %dec_label_pc_b69c ], [ %.pre, %dec_label_pc_b93c ]
  %v0_b96026 = phi i32 [ %v1_b690, %dec_label_pc_b69c ], [ 0, %dec_label_pc_b93c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b490, 65536
  %storemerge = add i32 %v6_b490, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b94c = add i32 %storemerge4, 1310720
  store i32 %v1_b94c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b94c, 256
  %v3_b954 = and i32 %tmp83, 65280
  store i32 %v3_b954, i32* %r3.global-to-local, align 4
  %v4_b958 = udiv i32 %v1_b94c, 16777216
  %v5_b958 = or i32 %v3_b954, %v4_b958
  store i32 %v5_b958, i32* @r8, align 4
  %v2_ba84 = icmp eq i32 %v1_b4b0, 0
  br label %dec_label_pc_b95c

dec_label_pc_b95c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68, %dec_label_pc_b94c
  %v0_b960 = phi i32 [ %v0_b96026, %dec_label_pc_b94c ], [ 0, %dec_label_pc_ba68 ], [ 0, %dec_label_pc_b95c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b960 = icmp eq i32 %v0_b960, 0
  store i1 %v2_b960, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b960, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_b96c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b970

dec_label_pc_b970:                                ; preds = %dec_label_pc_b998, %dec_label_pc_b96c
  %v1_b978 = phi i32 [ %v1_ba58, %dec_label_pc_b998 ], [ 0, %dec_label_pc_b96c ]
  store i32 %v2_b31c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b978 = mul i32 %v1_b978, 4
  %v5_b978 = add i32 %v4_b978, %v2_b31c
  %v6_b978 = inttoptr i32 %v5_b978 to i32*
  %v7_b978 = load i32, i32* %v6_b978, align 4
  store i32 %v7_b978, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b980 = load i32, i32* @fp, align 4
  %v9_b980 = icmp eq i32 %v0_b980, 65535
  store i1 %v9_b980, i1* %cpsr_z.global-to-local, align 1
  %v1_b984 = add i32 %v7_b978, 20
  store i32 %v1_b984, i32* @r5, align 4
  br i1 %v9_b980, label %dec_label_pc_ba7c, label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b970
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba90

dec_label_pc_b998:                                ; preds = %dec_label_pc_b98c, %dec_label_pc_ba7c, %dec_label_pc_ba90
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b99c = load i32, i32* @r4, align 4
  %v3_b99c = add i32 %v2_b99c, 10
  %v4_b99c = inttoptr i32 %v3_b99c to i16*
  store i16 0, i16* %v4_b99c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* @r0, align 4
  %v2_b9a8 = call i32 @function_c848(i32 %v0_b9a4, i32 20)
  %v3_b9a8 = trunc i32 %v2_b9a8 to i16
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b30c, i32* %r2.global-to-local, align 4
  %v3_b9b4 = mul i32 %v3_b9ac, 16
  %v2_b9b8 = add i32 %v3_b9b4, %v2_b30c
  store i32 %v2_b9b8, i32* %r1.global-to-local, align 4
  %v1_b9bc = add i32 %v2_b9b8, 4
  %v2_b9bc = inttoptr i32 %v1_b9bc to i32*
  %v3_b9bc = load i32, i32* %v2_b9bc, align 4
  %v3_b9c0 = mul i32 %v3_b9bc, 65536
  store i32 %v3_b9c0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9bc, 256
  %v1_b9c8 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b9bc, 256
  %v4_b9cc = urem i32 %tmp86, 256
  %v5_b9cc = or i32 %v4_b9cc, %v1_b9c8
  store i32 %v5_b9cc, i32* %r3.global-to-local, align 4
  %v1_b9d0 = add i32 %v3_b9bc, 1
  store i32 %v1_b9d0, i32* %r2.global-to-local, align 4
  store i32 %v1_b9d0, i32* %v2_b9bc, align 4
  %v0_b9d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b9d8 = load i32, i32* @r5, align 4
  %v2_b9d8 = add i32 %v1_b9d8, 4
  %v3_b9d8 = inttoptr i32 %v2_b9d8 to i32*
  store i32 %v0_b9d8, i32* %v3_b9d8, align 4
  %v0_b9dc = load i32, i32* %r1.global-to-local, align 4
  %v1_b9dc = add i32 %v0_b9dc, 8
  %v2_b9dc = inttoptr i32 %v1_b9dc to i32*
  %v3_b9dc = load i32, i32* %v2_b9dc, align 4
  %tmp87 = mul i32 %v3_b9dc, 256
  %v1_b9e8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b9dc, 256
  %v4_b9ec = urem i32 %tmp88, 256
  %v5_b9ec = or i32 %v4_b9ec, %v1_b9e8
  %v1_b9f0 = load i32, i32* @r5, align 4
  %v2_b9f0 = add i32 %v1_b9f0, 8
  %v3_b9f0 = inttoptr i32 %v2_b9f0 to i32*
  store i32 %v5_b9ec, i32* %v3_b9f0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b9f8 = load i32, i32* @r4, align 4
  %v4_b9f8 = add i32 %v3_b9f8, 10
  %v5_b9f8 = inttoptr i32 %v4_b9f8 to i16*
  store i16 %v3_b9a8, i16* %v5_b9f8, align 2
  %v0_b9fc = load i32, i32* @r5, align 4
  store i32 %v0_b9fc, i32* @r1, align 4
  %v0_ba00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba00 = trunc i32 %v0_ba00 to i16
  %v3_ba00 = add i32 %v0_b9fc, 16
  %v4_ba00 = inttoptr i32 %v3_ba00 to i16*
  store i16 %v1_ba00, i16* %v4_ba00, align 2
  %v0_ba04 = load i32, i32* @r8, align 4
  store i32 %v0_ba04, i32* %r2.global-to-local, align 4
  %v0_ba08 = load i32, i32* @sl, align 4
  store i32 %v0_ba08, i32* %r3.global-to-local, align 4
  %v0_ba0c = load i32, i32* @r4, align 4
  store i32 %v0_ba0c, i32* %r0.global-to-local, align 4
  %v4_ba10 = call i32 @function_c898(i32 %v0_ba0c, i32 %v0_b9fc, i32 %v0_ba04, i32 %v0_ba08)
  %v5_ba10 = trunc i32 %v4_ba10 to i16
  store i32 %v4_ba10, i32* %r0.global-to-local, align 4
  %v3_ba14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba14, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba1c = mul i32 %v3_ba14, 32
  store i32 %v3_ba1c, i32* %lr.global-to-local, align 4
  %v3_ba20 = load i32, i32* @r5, align 4
  %v4_ba20 = add i32 %v3_ba20, 16
  %v5_ba20 = inttoptr i32 %v4_ba20 to i16*
  store i16 %v5_ba10, i16* %v5_ba20, align 2
  %v0_ba24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba24 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba24, -8
  %v5_ba24 = add i32 %v0_ba24, %tmp105
  store i32 %v5_ba24, i32* %lr.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  %v1_ba28 = add i32 %v0_ba28, 2
  %v2_ba28 = inttoptr i32 %v1_ba28 to i16*
  %v3_ba28 = load i16, i16* %v2_ba28, align 2
  %v1_ba2c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba2c = add i32 %v1_ba2c, %v5_ba24
  store i32 %v2_ba2c, i32* @lr, align 4
  %v3_ba30 = add i32 %v2_ba2c, 2
  %v4_ba30 = inttoptr i32 %v3_ba30 to i16*
  store i16 %v3_ba28, i16* %v4_ba30, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba3c = load i32, i32* @r4, align 4
  store i32 %v0_ba3c, i32* %r1.global-to-local, align 4
  %v0_ba40 = load i32, i32* @sb, align 4
  store i32 %v0_ba40, i32* %r0.global-to-local, align 4
  %v0_ba44 = load i32, i32* @r7, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @lr, align 4
  %v6_ba50 = call i32 @function_112b8(i32 %v0_ba40, i32 %v0_ba3c, i32 %v0_ba44, i32 16384, i32 %v0_ba48, i32 16)
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = add i32 %v3_ba54, 1
  store i32 %v1_ba58, i32* %r0.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r6, align 4
  %v9_ba5c = icmp eq i32 %v0_ba5c, %v1_ba58
  store i1 %v9_ba5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba58, i32* %stack_var_-44, align 4
  %v8_ba64 = icmp sgt i32 %v0_ba5c, %v1_ba58
  br i1 %v8_ba64, label %dec_label_pc_b970, label %dec_label_pc_ba68

dec_label_pc_ba68:                                ; preds = %dec_label_pc_b998
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ba6c = icmp eq i32 %v0_ba5c, 0
  store i1 %v2_ba6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba6c, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_ba7c:                                ; preds = %dec_label_pc_b970
  %v0_ba7c = call i32 @function_deb8()
  %v1_ba7c = trunc i32 %v0_ba7c to i16
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  %v3_ba88 = load i32, i32* @r4, align 4
  %v4_ba88 = add i32 %v3_ba88, 4
  %v5_ba88 = inttoptr i32 %v4_ba88 to i16*
  store i16 %v1_ba7c, i16* %v5_ba88, align 2
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge

dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge:    ; preds = %dec_label_pc_ba7c
  %v0_ba90.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ba90

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge, %dec_label_pc_b98c
  %v0_ba90 = phi i32 [ %v0_ba90.pre, %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge ], [ %v7_b978, %dec_label_pc_b98c ]
  %v1_ba90 = add i32 %v0_ba90, 40
  store i32 %v1_ba90, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v2_ba98 = inttoptr i32 %v1_ba90 to i16*
  %v3_ba98 = call i32 @function_e04c(i16* %v2_ba98, i32 %v6_b490)
  store i32 %v3_ba98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b998

; uselistorder directives
  uselistorder i32 %v0_ba7c, { 1, 0 }
  uselistorder i32 %v1_ba58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba24, { 1, 0 }
  uselistorder i32 %v4_ba10, { 1, 0 }
  uselistorder i32 %v3_b9dc, { 1, 0 }
  uselistorder i32 %v3_b9bc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9a8, { 1, 0 }
  uselistorder i1 %v2_ba84, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b894, { 1, 0 }
  uselistorder i32 %v0_b7cc, { 1, 0 }
  uselistorder i32 %v5_b760, { 1, 0 }
  uselistorder i32 %v0_b720, { 1, 0 }
  uselistorder i32 %v0_b6dc, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b68c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b678, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b604, { 1, 0 }
  uselistorder i32 %v6_b5fc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b62c, { 1, 0 }
  uselistorder i32 %v4_b640, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b588, { 1, 0, 2 }
  uselistorder i32 %v0_b738, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b578, { 1, 0 }
  uselistorder i1 %v7_b570, { 1, 0, 2 }
  uselistorder i1 %v7_b524, { 1, 0 }
  uselistorder i32 %v3_b520, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b900, { 1, 0 }
  uselistorder i32 %v1_b8e8, { 1, 0 }
  uselistorder i32 %v1_b8d0, { 1, 0 }
  uselistorder i32 %v1_b8b8, { 1, 0 }
  uselistorder i32 %v1_b8a0, { 1, 0 }
  uselistorder i32 %v3_b638, { 1, 0 }
  uselistorder i1 %v2_b654, { 1, 0 }
  uselistorder i32 %v1_b650, { 1, 0 }
  uselistorder i32 %v4_b64c, { 2, 0, 1 }
  uselistorder i32 %v2_b560, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b4fc, { 1, 0 }
  uselistorder i1 %v7_b4f4, { 1, 0 }
  uselistorder i1 %v7_b4c8, { 1, 0 }
  uselistorder i32 %v3_b4c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4b0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b490, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v1_b3f8, { 1, 0 }
  uselistorder i32 %v1_b3d8, { 1, 0 }
  uselistorder i32 %v6_b3b4, { 1, 0 }
  uselistorder i32 %v1_b39c, { 1, 0 }
  uselistorder i8 %v5_b354, { 1, 0 }
  uselistorder i32 %v6_b334, { 1, 0 }
  uselistorder i32 %v2_b31c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b30c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 31, 32, 29, 56, 34, 33, 35, 36, 37, 39, 38, 30, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b998, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b96c, { 1, 0 }
  uselistorder label %dec_label_pc_b95c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b94c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b5c4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5a4, { 1, 0 }
  uselistorder label %dec_label_pc_b580, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b530, { 1, 0 }
  uselistorder label %dec_label_pc_b514, { 1, 0 }
}

define i32 @function_baa4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_baa4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_baa4 = load i32, i32* @sb, align 4
  %v24_baa4 = load i32, i32* @fp, align 4
  %v27_baa4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bac0 = call i32 @function_11ea4(i32 %arg1, i32 4)
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bad4 = load i32, i32* @r4, align 4
  store i32 %v0_bad4, i32* %r0.global-to-local, align 4
  %v5_bad8 = inttoptr i32 %v0_bac4 to i32*
  %v6_bad8 = call i32 @function_8570(i32 %v0_bad4, i32* %v5_bad8, i32 2, i32 0)
  %v1_bae4 = urem i32 %v6_bad8, 256
  store i32 %v1_bae4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_baf0 = load i32, i32* @r5, align 4
  store i32 %v0_baf0, i32* %r1.global-to-local, align 4
  %v0_baf4 = load i32, i32* @r4, align 4
  store i32 %v0_baf4, i32* %r0.global-to-local, align 4
  %v6_bafc = inttoptr i32 %v0_baf0 to i32*
  %v7_bafc = call i32 @function_8570(i32 %v0_baf4, i32* %v6_bafc, i32 3, i32 65535)
  %v0_bb00 = load i32, i32* @r5, align 4
  store i32 %v0_bb00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bafc, i32* %sb.global-to-local, align 4
  %v0_bb10 = load i32, i32* @r4, align 4
  store i32 %v0_bb10, i32* %r0.global-to-local, align 4
  %v4_bb14 = inttoptr i32 %v0_bb00 to i32*
  %v5_bb14 = call i32 @function_8570(i32 %v0_bb10, i32* %v4_bb14, i32 4, i32 64)
  %v1_bb1c = urem i32 %v5_bb14, 256
  store i32 %v1_bb1c, i32* %ip.global-to-local, align 4
  %v0_bb20 = load i32, i32* @r5, align 4
  store i32 %v0_bb20, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  store i32 %v0_bb2c, i32* %r0.global-to-local, align 4
  %v6_bb34 = inttoptr i32 %v0_bb20 to i32*
  %v7_bb34 = call i32 @function_8570(i32 %v0_bb2c, i32* %v6_bb34, i32 5, i32 0)
  %v1_bb40 = urem i32 %v7_bb34, 256
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r5, align 4
  store i32 %v0_bb4c, i32* %r1.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v5_bb58 = inttoptr i32 %v0_bb4c to i32*
  %v6_bb58 = call i32 @function_8570(i32 %v0_bb50, i32* %v5_bb58, i32 6, i32 65535)
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb58, i32* @r6, align 4
  %v0_bb70 = load i32, i32* @r4, align 4
  store i32 %v0_bb70, i32* %r0.global-to-local, align 4
  %v4_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v5_bb74 = call i32 @function_8570(i32 %v0_bb70, i32* %v4_bb74, i32 7, i32 65535)
  %v0_bb7c = load i32, i32* @r5, align 4
  store i32 %v0_bb7c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bb74, i32* @sl, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  store i32 %v0_bb8c, i32* %r0.global-to-local, align 4
  %v4_bb90 = inttoptr i32 %v0_bb7c to i32*
  %v5_bb90 = call i32 @function_8570(i32 %v0_bb8c, i32* %v4_bb90, i32 17, i32 65535)
  %v0_bb9c = load i32, i32* @r5, align 4
  store i32 %v0_bb9c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bba8 = load i32, i32* @r4, align 4
  store i32 %v0_bba8, i32* %r0.global-to-local, align 4
  %v5_bbac = inttoptr i32 %v0_bb9c to i32*
  %v6_bbac = call i32 @function_8570(i32 %v0_bba8, i32* %v5_bbac, i32 18, i32 65535)
  %v0_bbb0 = load i32, i32* @r5, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbc0 = load i32, i32* @r4, align 4
  store i32 %v0_bbc0, i32* %r0.global-to-local, align 4
  %v5_bbc4 = inttoptr i32 %v0_bbb0 to i32*
  %v6_bbc4 = call i32 @function_8570(i32 %v0_bbc0, i32* %v5_bbc4, i32 11, i32 0)
  %v0_bbc8 = load i32, i32* @r5, align 4
  store i32 %v0_bbc8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bbd8 = load i32, i32* @r4, align 4
  store i32 %v0_bbd8, i32* %r0.global-to-local, align 4
  %v5_bbdc = inttoptr i32 %v0_bbc8 to i32*
  %v6_bbdc = call i32 @function_8570(i32 %v0_bbd8, i32* %v5_bbdc, i32 12, i32 1)
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbf0 = load i32, i32* @r4, align 4
  store i32 %v0_bbf0, i32* %r0.global-to-local, align 4
  %v5_bbf4 = inttoptr i32 %v0_bbe0 to i32*
  %v6_bbf4 = call i32 @function_8570(i32 %v0_bbf0, i32* %v5_bbf4, i32 13, i32 0)
  %v0_bbf8 = load i32, i32* @r5, align 4
  store i32 %v0_bbf8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc08 = load i32, i32* @r4, align 4
  store i32 %v0_bc08, i32* %r0.global-to-local, align 4
  %v5_bc0c = inttoptr i32 %v0_bbf8 to i32*
  %v6_bc0c = call i32 @function_8570(i32 %v0_bc08, i32* %v5_bc0c, i32 14, i32 0)
  %v0_bc10 = load i32, i32* @r5, align 4
  store i32 %v0_bc10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc20 = load i32, i32* @r4, align 4
  store i32 %v0_bc20, i32* %r0.global-to-local, align 4
  %v5_bc24 = inttoptr i32 %v0_bc10 to i32*
  %v6_bc24 = call i32 @function_8570(i32 %v0_bc20, i32* %v5_bc24, i32 15, i32 0)
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc38 = load i32, i32* @r4, align 4
  store i32 %v0_bc38, i32* %r0.global-to-local, align 4
  %v5_bc3c = inttoptr i32 %v0_bc28 to i32*
  %v6_bc3c = call i32 @function_8570(i32 %v0_bc38, i32* %v5_bc3c, i32 16, i32 0)
  %v0_bc40 = load i32, i32* @r5, align 4
  store i32 %v0_bc40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc50 = load i32, i32* @r4, align 4
  store i32 %v0_bc50, i32* %r0.global-to-local, align 4
  %v5_bc54 = inttoptr i32 %v0_bc40 to i32*
  %v6_bc54 = call i32 @function_8570(i32 %v0_bc50, i32* %v5_bc54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc64 = load i32, i32* @r5, align 4
  store i32 %v0_bc64, i32* %r1.global-to-local, align 4
  %v0_bc68 = load i32, i32* @r4, align 4
  store i32 %v0_bc68, i32* %r0.global-to-local, align 4
  %v4_bc6c = inttoptr i32 %v0_bc64 to i32*
  %v5_bc6c = call i32 @function_8570(i32 %v0_bc68, i32* %v4_bc6c, i32 1, i32 1)
  %v2_bc78 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_bc78, i32* %r3.global-to-local, align 4
  %v1_bc7c = urem i32 %v5_bc6c, 256
  store i32 %v1_bc7c, i32* %ip.global-to-local, align 4
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bc88 = load i32, i32* @r4, align 4
  store i32 %v0_bc88, i32* %r0.global-to-local, align 4
  %v5_bc90 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc90 = call i32 @function_8504(i32 %v0_bc88, i32* %v5_bc90, i32 25, i32 %v2_bc78, i32 %v1_bc7c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bca4 = call i32 @function_1133c(i32 2, i32 3, i32 6)
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v7_bca8 = icmp eq i32 %v3_bca4, -1
  store i1 %v7_bca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bca8, label %dec_label_pc_c170, label %dec_label_pc_bcb4

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_baa4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcbc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcbc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bcd0 = call i32 @function_112f8(i32 %v3_bca4, i32 0, i32 3, i32 %v6_bcbc, i32 4)
  store i32 %v5_bcd0, i32* %r0.global-to-local, align 4
  %v7_bcd4 = icmp eq i32 %v5_bcd0, -1
  store i1 %v7_bcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcd4, label %dec_label_pc_c168, label %dec_label_pc_bcdc

dec_label_pc_bcdc:                                ; preds = %dec_label_pc_bcb4
  %v0_bcdc = load i32, i32* %sb.global-to-local, align 4
  %v3_bcdc = mul i32 %v0_bcdc, 65536
  store i32 %v3_bcdc, i32* @r5, align 4
  %v0_bce0 = load i32, i32* @r6, align 4
  %v0_bce4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bcec = urem i32 %v0_bcdc, 65536
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  %v3_bcf0 = urem i32 %v0_bce0, 65536
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v3_bcf4 = urem i32 %v0_bce4, 65536
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v0_bcf8 = load i32, i32* @r7, align 4
  %v2_bcf8 = icmp eq i32 %v0_bcf8, 0
  store i1 %v2_bcf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bcf8, label %dec_label_pc_c17c, label %dec_label_pc_bd10

dec_label_pc_bd10:                                ; preds = %dec_label_pc_bcdc
  %v3_bd14 = mul i32 %v6_bc54, 65536
  %v1_bd18 = add i32 %v3_bd14, 2621440
  store i32 %v1_bd18, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bce0, 256
  %v3_bd3c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bce4, 256
  %v3_bd40 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bce0, 256
  %v4_bd44 = urem i32 %tmp61, 256
  %v5_bd44 = or i32 %v4_bd44, %v3_bd3c
  store i32 %v5_bd44, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bce4, 256
  %v4_bd48 = urem i32 %tmp62, 256
  %v5_bd48 = or i32 %v4_bd48, %v3_bd40
  store i32 %v5_bd48, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd18, 256
  %v3_bd5c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bcdc, 256
  %v3_bd60 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bb90, 256
  %v3_bd64 = and i32 %tmp65, 65280
  %v1_bd68 = urem i32 %v6_bbc4, 2
  %v1_bd6c = urem i32 %v6_bbdc, 2
  %tmp66 = udiv i32 %v5_bb90, 256
  %v4_bd70 = urem i32 %tmp66, 256
  %v5_bd70 = or i32 %v4_bd70, %v3_bd64
  %v4_bd74 = udiv i32 %v1_bd18, 16777216
  %v5_bd74 = or i32 %v3_bd5c, %v4_bd74
  store i32 %v5_bd74, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bcdc, 256
  %v4_bd78 = urem i32 %tmp67, 256
  %v5_bd78 = or i32 %v4_bd78, %v3_bd60
  store i32 %v5_bd78, i32* @fp, align 4
  %v1_bd94 = urem i32 %v6_bbf4, 2
  store i32 %v1_bd94, i32* %r2.global-to-local, align 4
  %v1_bd98 = urem i32 %v6_bc0c, 2
  store i32 %v1_bd98, i32* %r3.global-to-local, align 4
  %v1_bd9c = urem i32 %v6_bc24, 2
  store i32 %v1_bd9c, i32* %ip.global-to-local, align 4
  %v1_bda0 = urem i32 %v6_bc3c, 2
  store i32 %v1_bda0, i32* %r0.global-to-local, align 4
  %v1_bda4 = urem i32 %v6_bbf4, 256
  store i32 %v1_bda4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bad8, 16777216
  %v4_be18 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb14, 16777216
  %v4_be24 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bd6c
  %v4_be90 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bd94
  %v4_beac = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bd98
  %v4_bec0 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bd9c
  %v3_bed4 = and i32 %tmp74, 2
  %v2_bef8 = icmp eq i32 %v1_bda4, 0
  %v1_be20 = trunc i32 %v4_be18 to i8
  %extract.t = trunc i32 %v4_be24 to i8
  br label %dec_label_pc_bdc4

dec_label_pc_bdc4:                                ; preds = %bb70, %dec_label_pc_bd10
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bdd0 = call i32 @function_11ea4(i32 1510, i32 1)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  %v2_bdd8 = load i32, i32* @r4, align 4
  %v5_bdd8 = mul i32 %v2_bdd8, 4
  %v6_bdd8 = add i32 %v5_bdd8, %v2_bac0
  %v7_bdd8 = inttoptr i32 %v6_bdd8 to i32*
  store i32 %v2_bdd0, i32* %v7_bdd8, align 4
  %v3_bddc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bddc, i32* %r2.global-to-local, align 4
  %v5_bde4 = mul i32 %v3_bddc, 24
  %v1_bde8 = load i32, i32* @r8, align 4
  %v2_bde8 = add i32 %v1_bde8, %v5_bde4
  store i32 %v2_bde8, i32* %r1.global-to-local, align 4
  store i32 %v2_bac0, i32* %r3.global-to-local, align 4
  %v4_bdf0 = mul i32 %v3_bddc, 4
  %v5_bdf0 = add i32 %v4_bdf0, %v2_bac0
  %v6_bdf0 = inttoptr i32 %v5_bdf0 to i32*
  %v7_bdf0 = load i32, i32* %v6_bdf0, align 4
  store i32 %v7_bdf0, i32* @r5, align 4
  %v1_bdf4 = inttoptr i32 %v7_bdf0 to i8*
  %v2_bdf4 = load i8, i8* %v1_bdf4, align 1
  %tmp75 = urem i8 %v2_bdf4, 16
  %v1_bdf8 = zext i8 %tmp75 to i32
  %v1_bdfc = or i32 %v1_bdf8, 64
  store i32 %v1_bdfc, i32* %r3.global-to-local, align 4
  %v1_be00 = trunc i32 %v1_bdfc to i8
  store i8 %v1_be00, i8* %v1_bdf4, align 1
  %v0_be04 = load i32, i32* @r5, align 4
  %v1_be04 = inttoptr i32 %v0_be04 to i8*
  %v2_be04 = load i8, i8* %v1_be04, align 1
  %v1_be08 = and i8 %v2_be04, -16
  %v1_be0c = or i8 %v1_be08, 5
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i8 %v1_be0c, i8* %v1_be04, align 1
  store i32 %v4_be18, i32* %r0.global-to-local, align 4
  %v0_be1c = load i32, i32* %ip.global-to-local, align 4
  %v2_be1c = icmp eq i32 %v0_be1c, 0
  store i1 %v2_be1c, i1* %cpsr_z.global-to-local, align 1
  %v2_be20 = load i32, i32* @r5, align 4
  %v3_be20 = add i32 %v2_be20, 1
  %v4_be20 = inttoptr i32 %v3_be20 to i8*
  store i8 %v1_be20, i8* %v4_be20, align 1
  store i32 %v4_be24, i32* %r2.global-to-local, align 4
  %v0_be28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bdc4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be2c = load i32, i32* @r5, align 4
  %v4_be2c = add i32 %v3_be2c, 6
  %v5_be2c = inttoptr i32 %v4_be2c to i16*
  store i16 64, i16* %v5_be2c, align 2
  %v0_be34.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be34.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bdc4, %bb
  %v0_be34.off0 = phi i8 [ %extract.t, %dec_label_pc_bdc4 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be34 = load i32, i32* @r5, align 4
  %v3_be34 = add i32 %v2_be34, 8
  %v4_be34 = inttoptr i32 %v3_be34 to i8*
  store i8 %v0_be34.off0, i8* %v4_be34, align 1
  %v0_be38 = load i32, i32* %r3.global-to-local, align 4
  %v1_be38 = trunc i32 %v0_be38 to i8
  %v2_be38 = load i32, i32* @r5, align 4
  %v3_be38 = add i32 %v2_be38, 9
  %v4_be38 = inttoptr i32 %v3_be38 to i8*
  store i8 %v1_be38, i8* %v4_be38, align 1
  store i32 %v6_bc90, i32* %ip.global-to-local, align 4
  %v1_be40 = load i32, i32* @r5, align 4
  %v2_be40 = add i32 %v1_be40, 12
  %v3_be40 = inttoptr i32 %v2_be40 to i32*
  store i32 %v6_bc90, i32* %v3_be40, align 4
  %v0_be44 = load i32, i32* %r1.global-to-local, align 4
  %v1_be44 = add i32 %v0_be44, 16
  %v2_be44 = inttoptr i32 %v1_be44 to i32*
  %v3_be44 = load i32, i32* %v2_be44, align 4
  store i32 %v3_be44, i32* %r3.global-to-local, align 4
  %v0_be48 = load i32, i32* @sb, align 4
  %v1_be48 = trunc i32 %v0_be48 to i16
  %v2_be48 = load i32, i32* @r5, align 4
  %v3_be48 = add i32 %v2_be48, 2
  %v4_be48 = inttoptr i32 %v3_be48 to i16*
  store i16 %v1_be48, i16* %v4_be48, align 2
  %v0_be4c = load i32, i32* @fp, align 4
  %v1_be4c = trunc i32 %v0_be4c to i16
  %v2_be4c = load i32, i32* @r5, align 4
  %v3_be4c = add i32 %v2_be4c, 4
  %v4_be4c = inttoptr i32 %v3_be4c to i16*
  store i16 %v1_be4c, i16* %v4_be4c, align 2
  %v0_be50 = load i32, i32* %r3.global-to-local, align 4
  %v1_be50 = load i32, i32* @r5, align 4
  %v2_be50 = add i32 %v1_be50, 16
  %v3_be50 = inttoptr i32 %v2_be50 to i32*
  store i32 %v0_be50, i32* %v3_be50, align 4
  %v0_be54 = load i32, i32* @r6, align 4
  %v1_be54 = trunc i32 %v0_be54 to i16
  %v2_be54 = load i32, i32* @r5, align 4
  %v3_be54 = add i32 %v2_be54, 20
  %v4_be54 = inttoptr i32 %v3_be54 to i16*
  store i16 %v1_be54, i16* %v4_be54, align 2
  %v0_be58 = load i32, i32* @r5, align 4
  %v1_be58 = add i32 %v0_be58, 20
  store i32 %v1_be58, i32* @r4, align 4
  %v1_be5c = add i32 %v0_be58, 32
  %v2_be5c = inttoptr i32 %v1_be5c to i8*
  %v3_be5c = load i8, i8* %v2_be5c, align 1
  %v4_be5c = zext i8 %v3_be5c to i32
  store i32 %v4_be5c, i32* %r3.global-to-local, align 4
  %v1_be60 = add i32 %v0_be58, 33
  %v2_be60 = inttoptr i32 %v1_be60 to i8*
  %v3_be60 = load i8, i8* %v2_be60, align 1
  %v4_be60 = zext i8 %v3_be60 to i32
  store i32 %v1_bd68, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be5c, 16
  %v1_be68 = zext i8 %tmp76 to i32
  %v1_be6c = or i32 %v1_be68, 80
  store i32 %v1_be6c, i32* %r3.global-to-local, align 4
  %v1_be70 = and i32 %v4_be60, 223
  store i32 %v1_be70, i32* %r2.global-to-local, align 4
  %v1_be74 = trunc i32 %v1_be6c to i8
  store i8 %v1_be74, i8* %v2_be5c, align 1
  %v0_be78 = load i32, i32* %r2.global-to-local, align 4
  %v1_be78 = load i32, i32* %r0.global-to-local, align 4
  %v4_be78 = mul i32 %v1_be78, 32
  %v5_be78 = or i32 %v4_be78, %v0_be78
  store i32 %v5_be78, i32* %r2.global-to-local, align 4
  store i32 %v5_bd70, i32* %r1.global-to-local, align 4
  %v1_be80 = trunc i32 %v5_be78 to i8
  %v2_be80 = load i32, i32* @r4, align 4
  %v3_be80 = add i32 %v2_be80, 13
  %v4_be80 = inttoptr i32 %v3_be80 to i8*
  store i8 %v1_be80, i8* %v4_be80, align 1
  %v0_be84 = load i32, i32* @r4, align 4
  %v1_be84 = add i32 %v0_be84, 13
  %v2_be84 = inttoptr i32 %v1_be84 to i8*
  %v3_be84 = load i8, i8* %v2_be84, align 1
  %v4_be84 = zext i8 %v3_be84 to i32
  store i32 %v1_bd6c, i32* %r2.global-to-local, align 4
  %v1_be8c = and i32 %v4_be84, 239
  %v5_be90 = or i32 %v1_be8c, %v4_be90
  store i32 %v5_be90, i32* %r3.global-to-local, align 4
  %v0_be94 = load i32, i32* %r1.global-to-local, align 4
  %v2_be94 = add i32 %v0_be84, 4
  %v3_be94 = inttoptr i32 %v2_be94 to i32*
  store i32 %v0_be94, i32* %v3_be94, align 4
  %v0_be98 = load i32, i32* @sl, align 4
  %v1_be98 = trunc i32 %v0_be98 to i16
  %v2_be98 = load i32, i32* @r4, align 4
  %v3_be98 = add i32 %v2_be98, 2
  %v4_be98 = inttoptr i32 %v3_be98 to i16*
  store i16 %v1_be98, i16* %v4_be98, align 2
  %v0_be9c = load i32, i32* %r3.global-to-local, align 4
  %v1_be9c = trunc i32 %v0_be9c to i8
  %v2_be9c = load i32, i32* @r4, align 4
  %v3_be9c = add i32 %v2_be9c, 13
  %v4_be9c = inttoptr i32 %v3_be9c to i8*
  store i8 %v1_be9c, i8* %v4_be9c, align 1
  %v0_bea0 = load i32, i32* @r4, align 4
  %v1_bea0 = add i32 %v0_bea0, 13
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bd94, i32* %r3.global-to-local, align 4
  %v1_bea8 = and i32 %v4_bea0, 247
  %v5_beac = or i32 %v1_bea8, %v4_beac
  store i32 %v5_beac, i32* %r2.global-to-local, align 4
  %v1_beb0 = trunc i32 %v5_beac to i8
  store i8 %v1_beb0, i8* %v2_bea0, align 1
  %v0_beb4 = load i32, i32* @r4, align 4
  %v1_beb4 = add i32 %v0_beb4, 13
  %v2_beb4 = inttoptr i32 %v1_beb4 to i8*
  %v3_beb4 = load i8, i8* %v2_beb4, align 1
  %v4_beb4 = zext i8 %v3_beb4 to i32
  store i32 %v1_bd98, i32* %ip.global-to-local, align 4
  %v1_bebc = and i32 %v4_beb4, 251
  %v5_bec0 = or i32 %v1_bebc, %v4_bec0
  store i32 %v5_bec0, i32* %r3.global-to-local, align 4
  %v1_bec4 = trunc i32 %v5_bec0 to i8
  store i8 %v1_bec4, i8* %v2_beb4, align 1
  %v0_bec8 = load i32, i32* @r4, align 4
  %v1_bec8 = add i32 %v0_bec8, 13
  %v2_bec8 = inttoptr i32 %v1_bec8 to i8*
  %v3_bec8 = load i8, i8* %v2_bec8, align 1
  %v4_bec8 = zext i8 %v3_bec8 to i32
  store i32 %v1_bd9c, i32* %r0.global-to-local, align 4
  %v1_bed0 = and i32 %v4_bec8, 253
  %v4_bed4 = or i32 %v1_bed0, %v3_bed4
  store i32 %v4_bed4, i32* %r2.global-to-local, align 4
  %v1_bed8 = trunc i32 %v4_bed4 to i8
  store i8 %v1_bed8, i8* %v2_bec8, align 1
  %v0_bedc = load i32, i32* @r4, align 4
  %v1_bedc = add i32 %v0_bedc, 13
  %v2_bedc = inttoptr i32 %v1_bedc to i8*
  %v3_bedc = load i8, i8* %v2_bedc, align 1
  %v4_bedc = zext i8 %v3_bedc to i32
  store i32 %v1_bda0, i32* %r1.global-to-local, align 4
  %v1_bee4 = and i32 %v4_bedc, 254
  %v2_bee8 = or i32 %v1_bee4, %v1_bda0
  store i32 %v2_bee8, i32* %r3.global-to-local, align 4
  %v1_beec = trunc i32 %v2_bee8 to i8
  store i8 %v1_beec, i8* %v2_bedc, align 1
  %v0_bef0 = call i32 @function_deb8()
  %v1_bef0 = trunc i32 %v0_bef0 to i16
  store i32 %v0_bef0, i32* %r0.global-to-local, align 4
  store i32 %v1_bda4, i32* %r2.global-to-local, align 4
  store i1 %v2_bef8, i1* %cpsr_z.global-to-local, align 1
  %v3_bf04.pre = load i32, i32* @r4, align 4
  br i1 %v2_bef8, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_befc = add i32 %v3_bf04.pre, 13
  %v3_befc = inttoptr i32 %v2_befc to i8*
  %v4_befc = load i8, i8* %v3_befc, align 1
  %v5_befc = zext i8 %v4_befc to i32
  %v2_bf00 = or i32 %v5_befc, 8
  store i32 %v2_bf00, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf04 = add i32 %v3_bf04.pre, 14
  %v5_bf04 = inttoptr i32 %v4_bf04 to i16*
  store i16 %v1_bef0, i16* %v5_bf04, align 2
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v0_bf0c = load i32, i32* @r5, align 4
  %v1_bf0c = add i32 %v0_bf0c, 40
  store i32 %v1_bf0c, i32* %r0.global-to-local, align 4
  br i1 %v2_bef8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf10 = load i32, i32* @r3, align 4
  %v2_bf10 = trunc i32 %v1_bf10 to i8
  %v3_bf10 = load i32, i32* @r4, align 4
  %v4_bf10 = add i32 %v3_bf10, 13
  %v5_bf10 = inttoptr i32 %v4_bf10 to i8*
  store i8 %v2_bf10, i8* %v5_bf10, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf14 = inttoptr i32 %v1_bf0c to i16*
  %v3_bf14 = call i32 @function_e04c(i16* %v2_bf14, i32 %v6_bc54)
  store i32 %v3_bf14, i32* %r0.global-to-local, align 4
  %v3_bf18 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf18, i32* %r3.global-to-local, align 4
  %v1_bf1c = add i32 %v3_bf18, 1
  store i32 %v1_bf1c, i32* @r4, align 4
  %v1_bf20 = load i32, i32* @r7, align 4
  %v9_bf20 = icmp eq i32 %v1_bf1c, %v1_bf20
  store i1 %v9_bf20, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf1c, i32* %stack_var_-44, align 4
  %v5_bf28 = icmp slt i32 %v1_bf1c, %v1_bf20
  br i1 %v5_bf28, label %dec_label_pc_bdc4, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %bb70
  store i32 %v6_bc54, i32* %r3.global-to-local, align 4
  %v1_bf30 = add i32 %v6_bc54, 20
  store i32 %v1_bf30, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf38

dec_label_pc_bf38:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_bf2c
  %v0_bf508 = phi i32 [ %v1_bf20, %dec_label_pc_bf2c ], [ 0, %dec_label_pc_c17c ]
  %stack_var_-140.0 = phi i32 [ %v3_bd14, %dec_label_pc_bf2c ], [ %v3_c188, %dec_label_pc_c17c ]
  %storemerge = add i32 %v6_bc54, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf3c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf3c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf3c, 256
  %v3_bf44 = and i32 %tmp71, 65280
  store i32 %v3_bf44, i32* %r3.global-to-local, align 4
  %v4_bf48 = udiv i32 %v1_bf3c, 16777216
  %v5_bf48 = or i32 %v3_bf44, %v4_bf48
  store i32 %v5_bf48, i32* @sl, align 4
  %v3_c0e8 = icmp eq i32 %v3_bcec, 65535
  %v2_c14c = icmp eq i32 %v1_bc7c, 0
  %v2_bf88 = icmp eq i32 %v6_bc90, -1
  %v7_bf88 = icmp eq i32 %v6_bc90, -1
  br label %dec_label_pc_bf4c

dec_label_pc_bf4c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064, %dec_label_pc_bf38
  %v0_bf50 = phi i32 [ %v0_bf508, %dec_label_pc_bf38 ], [ 0, %dec_label_pc_c064 ], [ 0, %dec_label_pc_bf4c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf50, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_bf5c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf60

dec_label_pc_bf60:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_bf5c
  %v1_bf74 = phi i32 [ %v1_c054, %dec_label_pc_bfe0 ], [ 0, %dec_label_pc_bf5c ]
  %v5_bf64 = mul i32 %v1_bf74, 24
  %v1_bf68 = load i32, i32* @r8, align 4
  %v2_bf68 = add i32 %v1_bf68, %v5_bf64
  store i32 %v2_bf68, i32* %r3.global-to-local, align 4
  store i32 %v2_bac0, i32* %ip.global-to-local, align 4
  %v1_bf70 = add i32 %v2_bf68, 20
  %v2_bf70 = inttoptr i32 %v1_bf70 to i8*
  %v3_bf70 = load i8, i8* %v2_bf70, align 1
  %v4_bf70 = zext i8 %v3_bf70 to i32
  store i32 %v4_bf70, i32* %r2.global-to-local, align 4
  %v4_bf74 = mul i32 %v1_bf74, 4
  %v5_bf74 = add i32 %v4_bf74, %v2_bac0
  %v6_bf74 = inttoptr i32 %v5_bf74 to i32*
  %v7_bf74 = load i32, i32* %v6_bf74, align 4
  store i32 %v7_bf74, i32* @r5, align 4
  %v7_bf78 = icmp eq i8 %v3_bf70, 31
  store i1 %v7_bf78, i1* %cpsr_z.global-to-local, align 1
  %v1_bf7c = add i32 %v7_bf74, 20
  store i32 %v1_bf7c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bf70, 32
  br i1 %tmp77, label %dec_label_pc_c078, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf60
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_bf90:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_bfa4

dec_label_pc_bfa4:                                ; preds = %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge, %dec_label_pc_bf90
  %v1_bfa8 = phi i32 [ %v1_bfa8.pre, %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge ], [ 65535, %dec_label_pc_bf90 ]
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v9_bfa8 = icmp eq i32 %v3_bcf0, %v1_bfa8
  store i1 %v9_bfa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfa8, label %dec_label_pc_c108, label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge, %dec_label_pc_bfa4
  %v1_bfb4 = phi i32 [ %v1_bfb4.pre, %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge ], [ %v1_bfa8, %dec_label_pc_bfa4 ]
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v9_bfb4 = icmp eq i32 %v3_bcf4, %v1_bfb4
  store i1 %v9_bfb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfb4, label %dec_label_pc_c11c, label %dec_label_pc_bfbc

dec_label_pc_bfbc:                                ; preds = %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge, %dec_label_pc_bfb0
  %v1_bfc0 = phi i32 [ %v1_bfc0.pre, %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge ], [ %v1_bfb4, %dec_label_pc_bfb0 ]
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v9_bfc0 = icmp eq i32 %v5_bb90, %v1_bfc0
  store i1 %v9_bfc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfc0, label %dec_label_pc_c130, label %dec_label_pc_bfc8

dec_label_pc_bfc8:                                ; preds = %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge, %dec_label_pc_bfbc
  %v1_bfcc = phi i32 [ %v1_bfcc.pre, %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge ], [ %v1_bfc0, %dec_label_pc_bfbc ]
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v9_bfcc = icmp eq i32 %v6_bbac, %v1_bfcc
  store i1 %v9_bfcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfcc, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_bfd4:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144, %dec_label_pc_c158
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bfe4 = load i32, i32* @r5, align 4
  %v3_bfe4 = add i32 %v2_bfe4, 10
  %v4_bfe4 = inttoptr i32 %v3_bfe4 to i16*
  store i16 0, i16* %v4_bfe4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r5, align 4
  store i32 %v0_bfec, i32* @r0, align 4
  %v2_bff0 = call i32 @function_c848(i32 %v0_bfec, i32 20)
  %v3_bff0 = trunc i32 %v2_bff0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_bff8 = load i32, i32* @r5, align 4
  %v4_bff8 = add i32 %v3_bff8, 10
  %v5_bff8 = inttoptr i32 %v4_bff8 to i16*
  store i16 %v3_bff0, i16* %v5_bff8, align 2
  %v0_bffc = load i32, i32* @r6, align 4
  store i32 %v0_bffc, i32* @r1, align 4
  %v0_c000 = load i32, i32* %r3.global-to-local, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v3_c000 = add i32 %v0_bffc, 16
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v0_c004 = load i32, i32* @sl, align 4
  store i32 %v0_c004, i32* %r2.global-to-local, align 4
  %v0_c008 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c008, i32* %r3.global-to-local, align 4
  %v0_c00c = load i32, i32* @r5, align 4
  store i32 %v0_c00c, i32* %r0.global-to-local, align 4
  %v4_c010 = call i32 @function_c898(i32 %v0_c00c, i32 %v0_bffc, i32 %v0_c004, i32 %v0_c008)
  %v5_c010 = trunc i32 %v4_c010 to i16
  store i32 %v4_c010, i32* %r0.global-to-local, align 4
  %v3_c014 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c014, i32* %r3.global-to-local, align 4
  %v3_c018 = mul i32 %v3_c014, 32
  store i32 %v3_c018, i32* %lr.global-to-local, align 4
  %v3_c01c = load i32, i32* @r6, align 4
  %v4_c01c = add i32 %v3_c01c, 16
  %v5_c01c = inttoptr i32 %v4_c01c to i16*
  store i16 %v5_c010, i16* %v5_c01c, align 2
  %v0_c020 = load i32, i32* %lr.global-to-local, align 4
  %v1_c020 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c020, -8
  %v5_c020 = add i32 %v0_c020, %tmp78
  store i32 %v5_c020, i32* %lr.global-to-local, align 4
  %v0_c024 = load i32, i32* @r6, align 4
  %v1_c024 = add i32 %v0_c024, 2
  %v2_c024 = inttoptr i32 %v1_c024 to i16*
  %v3_c024 = load i16, i16* %v2_c024, align 2
  %v1_c028 = load i32, i32* @r8, align 4
  %v2_c028 = add i32 %v1_c028, %v5_c020
  store i32 %v2_c028, i32* @lr, align 4
  %v3_c02c = add i32 %v2_c028, 2
  %v4_c02c = inttoptr i32 %v3_c02c to i16*
  store i16 %v3_c024, i16* %v4_c02c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c038 = load i32, i32* @r5, align 4
  store i32 %v0_c038, i32* %r1.global-to-local, align 4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v0_c040 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @lr, align 4
  %v6_c04c = call i32 @function_112b8(i32 %v3_bca4, i32 %v0_c038, i32 %v0_c040, i32 16384, i32 %v0_c044, i32 16)
  %v3_c050 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c050, i32* %r3.global-to-local, align 4
  %v1_c054 = add i32 %v3_c050, 1
  store i32 %v1_c054, i32* %r0.global-to-local, align 4
  %v1_c058 = load i32, i32* @r7, align 4
  %v9_c058 = icmp eq i32 %v1_c054, %v1_c058
  store i1 %v9_c058, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c054, i32* %stack_var_-44, align 4
  %v5_c060 = icmp slt i32 %v1_c054, %v1_c058
  br i1 %v5_c060, label %dec_label_pc_bf60, label %dec_label_pc_c064

dec_label_pc_c064:                                ; preds = %dec_label_pc_bfe0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c068 = icmp eq i32 %v1_c058, 0
  store i1 %v2_c068, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c068, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_c078:                                ; preds = %dec_label_pc_bf60
  %v1_c078 = add i32 %v2_bf68, 16
  %v2_c078 = inttoptr i32 %v1_c078 to i32*
  %v3_c078 = load i32, i32* %v2_c078, align 4
  %v0_c07c = call i32 @function_deb8()
  store i32 %v0_c07c, i32* %r0.global-to-local, align 4
  %v3_c080 = load i32, i32* %stack_var_-44, align 4
  %v5_c088 = mul i32 %v3_c080, 24
  %v1_c08c = and i32 %v3_c078, 16711680
  store i32 %v1_c08c, i32* %ip.global-to-local, align 4
  %v3_c090 = udiv i32 %v3_c078, 16777216
  %v4_c094 = udiv i32 %v1_c08c, 256
  %v5_c094 = or i32 %v4_c094, %v3_c090
  store i32 %v5_c094, i32* %r2.global-to-local, align 4
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v1_c098, %v5_c088
  store i32 %v2_c098, i32* %r1.global-to-local, align 4
  %v1_c09c = and i32 %v3_c078, 65280
  store i32 %v1_c09c, i32* %r3.global-to-local, align 4
  %v1_c0a0 = add i32 %v2_c098, 20
  %v2_c0a0 = inttoptr i32 %v1_c0a0 to i8*
  %v3_c0a0 = load i8, i8* %v2_c0a0, align 1
  %v4_c0a0 = zext i8 %v3_c0a0 to i32
  store i32 %v4_c0a0, i32* %ip.global-to-local, align 4
  %v5_c0a8 = call i32 @llvm.bswap.i32(i32 %v3_c078)
  %v7_c0ac = lshr i32 %v0_c07c, %v4_c0a0
  %v8_c0ac = add i32 %v7_c0ac, %v5_c0a8
  store i32 %v8_c0ac, i32* %r2.global-to-local, align 4
  %v1_c0bc = and i32 %v8_c0ac, 65280
  store i32 %v1_c0bc, i32* %r1.global-to-local, align 4
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  %v5_c0c8 = call i32 @llvm.bswap.i32(i32 %v8_c0ac)
  store i32 %v5_c0c8, i32* %r3.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  %v1_c0d0 = load i32, i32* @r5, align 4
  %v2_c0d0 = add i32 %v1_c0d0, 16
  %v3_c0d0 = inttoptr i32 %v2_c0d0 to i32*
  store i32 %v5_c0c8, i32* %v3_c0d0, align 4
  br i1 %v2_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_c0d8:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  %v0_c0d8 = call i32 @function_deb8()
  store i32 %v0_c0d8, i32* %r0.global-to-local, align 4
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  %v1_c0ec = load i32, i32* @r5, align 4
  %v2_c0ec = add i32 %v1_c0ec, 12
  %v3_c0ec = inttoptr i32 %v2_c0ec to i32*
  store i32 %v0_c0d8, i32* %v3_c0ec, align 4
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge

dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge:    ; preds = %dec_label_pc_c0d8
  %v1_bfa8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfa4

dec_label_pc_c0f4:                                ; preds = %dec_label_pc_c0d8, %dec_label_pc_bf90
  %v0_c0f4 = call i32 @function_deb8()
  %v1_c0f4 = trunc i32 %v0_c0f4 to i16
  store i32 %v0_c0f4, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r4, align 4
  %v9_c0fc = icmp eq i32 %v3_bcf0, %v1_c0fc
  store i1 %v9_c0fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c100 = load i32, i32* @r5, align 4
  %v4_c100 = add i32 %v3_c100, 4
  %v5_c100 = inttoptr i32 %v4_c100 to i16*
  store i16 %v1_c0f4, i16* %v5_c100, align 2
  br i1 %v9_c0fc, label %dec_label_pc_c108, label %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge

dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge:    ; preds = %dec_label_pc_c0f4
  %v1_bfb4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfb0

dec_label_pc_c108:                                ; preds = %dec_label_pc_c0f4, %dec_label_pc_bfa4
  %v0_c108 = call i32 @function_deb8()
  %v1_c108 = trunc i32 %v0_c108 to i16
  store i32 %v0_c108, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v1_c110 = load i32, i32* @r4, align 4
  %v9_c110 = icmp eq i32 %v3_bcf4, %v1_c110
  store i1 %v9_c110, i1* %cpsr_z.global-to-local, align 1
  %v3_c114 = load i32, i32* @r5, align 4
  %v4_c114 = add i32 %v3_c114, 20
  %v5_c114 = inttoptr i32 %v4_c114 to i16*
  store i16 %v1_c108, i16* %v5_c114, align 2
  br i1 %v9_c110, label %dec_label_pc_c11c, label %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge

dec_label_pc_c108.dec_label_pc_bfbc_crit_edge:    ; preds = %dec_label_pc_c108
  %v1_bfc0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfbc

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c108, %dec_label_pc_bfb0
  %v0_c11c = call i32 @function_deb8()
  %v1_c11c = trunc i32 %v0_c11c to i16
  store i32 %v0_c11c, i32* %r0.global-to-local, align 4
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v1_c124 = load i32, i32* @r4, align 4
  %v9_c124 = icmp eq i32 %v5_bb90, %v1_c124
  store i1 %v9_c124, i1* %cpsr_z.global-to-local, align 1
  %v3_c128 = load i32, i32* @r6, align 4
  %v4_c128 = add i32 %v3_c128, 2
  %v5_c128 = inttoptr i32 %v4_c128 to i16*
  store i16 %v1_c11c, i16* %v5_c128, align 2
  br i1 %v9_c124, label %dec_label_pc_c130, label %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge

dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge:    ; preds = %dec_label_pc_c11c
  %v1_bfcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfc8

dec_label_pc_c130:                                ; preds = %dec_label_pc_c11c, %dec_label_pc_bfbc
  %v0_c130 = call i32 @function_deb8()
  %v1_c134 = load i32, i32* @r6, align 4
  %v2_c134 = add i32 %v1_c134, 4
  %v3_c134 = inttoptr i32 %v2_c134 to i32*
  store i32 %v0_c130, i32* %v3_c134, align 4
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v6_bbac, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c13c, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_c144:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  %v0_c144 = call i32 @function_deb8()
  store i32 %v0_c144, i32* %r0.global-to-local, align 4
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  %v1_c150 = load i32, i32* @r6, align 4
  %v2_c150 = add i32 %v1_c150, 8
  %v3_c150 = inttoptr i32 %v2_c150 to i32*
  store i32 %v0_c144, i32* %v3_c150, align 4
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144
  %v0_c158 = load i32, i32* @r5, align 4
  %v1_c158 = add i32 %v0_c158, 40
  store i32 %v1_c158, i32* %r0.global-to-local, align 4
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v2_c160 = inttoptr i32 %v1_c158 to i16*
  %v3_c160 = call i32 @function_e04c(i16* %v2_c160, i32 %v6_bc54)
  store i32 %v3_c160, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfe0

dec_label_pc_c168:                                ; preds = %dec_label_pc_bcb4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v1_c16c = call i32 @function_10b64(i32 %v3_bca4)
  store i32 %v1_c16c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_c168
  %v1_c178 = phi i32 [ %v3_bca4, %dec_label_pc_baa4 ], [ %v1_c16c, %dec_label_pc_c168 ]
  store i32 %v18_baa4, i32* %sb.global-to-local, align 4
  store i32 %v24_baa4, i32* %fp.global-to-local, align 4
  store i32 %v27_baa4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c178

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bcdc
  store i32 %v6_bc54, i32* %r0.global-to-local, align 4
  %v1_c184 = add i32 %v6_bc54, 20
  store i32 %v1_c184, i32* %sb.global-to-local, align 4
  %v3_c188 = mul i32 %v6_bc54, 65536
  store i32 %v3_c188, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf38

; uselistorder directives
  uselistorder i32 %v0_c11c, { 1, 0 }
  uselistorder i32 %v0_c108, { 1, 0 }
  uselistorder i32 %v0_c0f4, { 1, 0 }
  uselistorder i32 %v5_c0c8, { 1, 0 }
  uselistorder i32 %v3_c078, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c054, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c020, { 1, 0 }
  uselistorder i32 %v4_c010, { 1, 0 }
  uselistorder i1 %v7_bf88, { 2, 1, 0 }
  uselistorder i1 %v2_c14c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c0e8, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bef0, { 1, 0 }
  uselistorder i32 %v1_bda4, { 1, 2, 0 }
  uselistorder i32 %v1_bda0, { 2, 1, 0 }
  uselistorder i32 %v1_bd9c, { 2, 0, 1 }
  uselistorder i32 %v1_bd98, { 2, 0, 1 }
  uselistorder i32 %v1_bd94, { 2, 0, 1 }
  uselistorder i32 %v1_bd6c, { 1, 0 }
  uselistorder i32 %v3_bd14, { 1, 0 }
  uselistorder i32 %v3_bcec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bce4, { 1, 0, 2 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v0_bcdc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bcd4, { 1, 0 }
  uselistorder i1 %v7_bca8, { 1, 0 }
  uselistorder i32 %v3_bca4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bc90, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bc7c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc54, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbac, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bb90, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb40, { 1, 0 }
  uselistorder i32 %v2_bac0, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c170, { 1, 0 }
  uselistorder label %dec_label_pc_c158, { 1, 0 }
  uselistorder label %dec_label_pc_bfe0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf5c, { 1, 0 }
  uselistorder label %dec_label_pc_bf4c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c19c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c19c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c19c = load i32, i32* @r4, align 4
  %v24_c19c = load i32, i32* @fp, align 4
  %v27_c19c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1b8 = call i32 @function_11ea4(i32 %arg1, i32 4)
  %v0_c1bc = load i32, i32* @r5, align 4
  store i32 %v0_c1bc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1b8, i32* @sb, align 4
  %v0_c1cc = load i32, i32* @r4, align 4
  store i32 %v0_c1cc, i32* %r0.global-to-local, align 4
  %v4_c1d0 = inttoptr i32 %v0_c1bc to i32*
  %v5_c1d0 = call i32 @function_8570(i32 %v0_c1cc, i32* %v4_c1d0, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1e8 = load i32, i32* @r5, align 4
  store i32 %v0_c1e8, i32* %r1.global-to-local, align 4
  %v0_c1ec = load i32, i32* @r4, align 4
  store i32 %v0_c1ec, i32* %r0.global-to-local, align 4
  %v5_c1f0 = trunc i32 %v5_c1d0 to i8
  %v6_c1f4 = inttoptr i32 %v0_c1e8 to i32*
  %v7_c1f4 = call i32 @function_8570(i32 %v0_c1ec, i32* %v6_c1f4, i32 3, i32 65535)
  %v0_c1f8 = load i32, i32* @r5, align 4
  store i32 %v0_c1f8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c208 = load i32, i32* @r4, align 4
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  %v5_c20c = inttoptr i32 %v0_c1f8 to i32*
  %v6_c20c = call i32 @function_8570(i32 %v0_c208, i32* %v5_c20c, i32 4, i32 64)
  %v1_c214 = urem i32 %v6_c20c, 256
  %v0_c218 = load i32, i32* @r5, align 4
  store i32 %v0_c218, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c224 = load i32, i32* @r4, align 4
  store i32 %v0_c224, i32* %r0.global-to-local, align 4
  %v6_c22c = inttoptr i32 %v0_c218 to i32*
  %v7_c22c = call i32 @function_8570(i32 %v0_c224, i32* %v6_c22c, i32 5, i32 1)
  %v1_c238 = urem i32 %v7_c22c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c244 = load i32, i32* @r5, align 4
  store i32 %v0_c244, i32* %r1.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c250 = inttoptr i32 %v0_c244 to i32*
  %v6_c250 = call i32 @function_8570(i32 %v0_c248, i32* %v5_c250, i32 6, i32 65535)
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c250, i32* %fp.global-to-local, align 4
  %v0_c268 = load i32, i32* @r4, align 4
  store i32 %v0_c268, i32* %r0.global-to-local, align 4
  %v4_c26c = inttoptr i32 %v0_c258 to i32*
  %v5_c26c = call i32 @function_8570(i32 %v0_c268, i32* %v4_c26c, i32 7, i32 65535)
  %v0_c274 = load i32, i32* @r5, align 4
  store i32 %v0_c274, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c26c, i32* @r6, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  store i32 %v0_c284, i32* %r0.global-to-local, align 4
  %v4_c288 = inttoptr i32 %v0_c274 to i32*
  %v5_c288 = call i32 @function_8570(i32 %v0_c284, i32* %v4_c288, i32 17, i32 65535)
  %v0_c28c = load i32, i32* @r5, align 4
  store i32 %v0_c28c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c29c = load i32, i32* @r4, align 4
  store i32 %v0_c29c, i32* %r0.global-to-local, align 4
  %v5_c2a0 = inttoptr i32 %v0_c28c to i32*
  %v6_c2a0 = call i32 @function_8570(i32 %v0_c29c, i32* %v5_c2a0, i32 18, i32 0)
  %v0_c2a4 = load i32, i32* @r5, align 4
  store i32 %v0_c2a4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2b4 = load i32, i32* @r4, align 4
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  %v5_c2b8 = inttoptr i32 %v0_c2a4 to i32*
  %v6_c2b8 = call i32 @function_8570(i32 %v0_c2b4, i32* %v5_c2b8, i32 11, i32 0)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2cc = load i32, i32* @r4, align 4
  store i32 %v0_c2cc, i32* %r0.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @function_8570(i32 %v0_c2cc, i32* %v5_c2d0, i32 12, i32 0)
  %v0_c2d4 = load i32, i32* @r5, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v5_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v6_c2e8 = call i32 @function_8570(i32 %v0_c2e4, i32* %v5_c2e8, i32 13, i32 0)
  %v0_c2ec = load i32, i32* @r5, align 4
  store i32 %v0_c2ec, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v5_c300 = inttoptr i32 %v0_c2ec to i32*
  %v6_c300 = call i32 @function_8570(i32 %v0_c2fc, i32* %v5_c300, i32 14, i32 0)
  %v0_c304 = load i32, i32* @r5, align 4
  store i32 %v0_c304, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c314 = load i32, i32* @r4, align 4
  store i32 %v0_c314, i32* %r0.global-to-local, align 4
  %v5_c318 = inttoptr i32 %v0_c304 to i32*
  %v6_c318 = call i32 @function_8570(i32 %v0_c314, i32* %v5_c318, i32 15, i32 1)
  %v0_c31c = load i32, i32* @r5, align 4
  store i32 %v0_c31c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c32c = load i32, i32* @r4, align 4
  store i32 %v0_c32c, i32* %r0.global-to-local, align 4
  %v5_c330 = inttoptr i32 %v0_c31c to i32*
  %v6_c330 = call i32 @function_8570(i32 %v0_c32c, i32* %v5_c330, i32 16, i32 0)
  %v2_c33c = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_c33c, i32* %r3.global-to-local, align 4
  %v0_c340 = load i32, i32* @r5, align 4
  store i32 %v0_c340, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c348 = load i32, i32* @r4, align 4
  store i32 %v0_c348, i32* %r0.global-to-local, align 4
  %v5_c34c = inttoptr i32 %v0_c340 to i32*
  %v6_c34c = call i32 @function_8504(i32 %v0_c348, i32* %v5_c34c, i32 25, i32 %v2_c33c, i32 %v6_c330)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c360 = call i32 @function_1133c(i32 2, i32 3, i32 6)
  store i32 %v3_c360, i32* %r0.global-to-local, align 4
  %v7_c364 = icmp eq i32 %v3_c360, -1
  store i1 %v7_c364, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c360, i32* @sl, align 4
  br i1 %v7_c364, label %dec_label_pc_c838, label %dec_label_pc_c370

dec_label_pc_c370:                                ; preds = %dec_label_pc_c19c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c378 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c378, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c38c = call i32 @function_112f8(i32 %v3_c360, i32 0, i32 3, i32 %v6_c378, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c38c, i32* %r0.global-to-local, align 4
  %v7_c390 = icmp eq i32 %v5_c38c, -1
  store i1 %v7_c390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c390, label %dec_label_pc_c830, label %dec_label_pc_c398

dec_label_pc_c398:                                ; preds = %dec_label_pc_c370
  %v3_c3a0 = mul i32 %v7_c1f4, 65536
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v0_c3a4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3a4 = mul i32 %v0_c3a4, 65536
  store i32 %v3_c3a4, i32* %r4.global-to-local, align 4
  %v0_c3a8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2b8, i32* %r2.global-to-local, align 4
  %v3_c3b4 = urem i32 %v7_c1f4, 65536
  store i32 %v3_c3b4, i32* %r3.global-to-local, align 4
  %v3_c3b8 = urem i32 %v0_c3a4, 65536
  %v3_c3bc = urem i32 %v0_c3a8, 65536
  store i32 %v3_c3bc, i32* %r1.global-to-local, align 4
  %v0_c3c0 = load i32, i32* @r7, align 4
  %v2_c3c0 = icmp eq i32 %v0_c3c0, 0
  store i1 %v2_c3c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c3d0 = urem i32 %v6_c2b8, 256
  store i32 %v1_c3d0, i32* @fp, align 4
  br i1 %v2_c3c0, label %dec_label_pc_c624.preheader, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c398
  %tmp52 = mul i32 %v5_c288, 256
  %v3_c3f0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c1f4, 256
  %v3_c3f4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c288, 256
  %v4_c3fc = urem i32 %tmp54, 256
  %v5_c3fc = or i32 %v4_c3fc, %v3_c3f0
  store i32 %v5_c3fc, i32* @lr, align 4
  %v1_c3f8 = mul i32 %v7_c1f4, 256
  %v4_c400 = and i32 %v1_c3f8, 65280
  %v5_c400 = or i32 %v4_c400, %v3_c3f4
  %tmp55 = mul i32 %v0_c3a4, 256
  %v3_c40c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3a8, 256
  %v3_c410 = and i32 %tmp56, 65280
  %v1_c414 = urem i32 %v6_c2b8, 2
  %v1_c418 = urem i32 %v6_c2d0, 2
  %tmp57 = udiv i32 %v0_c3a4, 256
  %v4_c41c = urem i32 %tmp57, 256
  %v5_c41c = or i32 %v4_c41c, %v3_c40c
  store i32 %v5_c41c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3a8, 256
  %v4_c420 = urem i32 %tmp58, 256
  %v5_c420 = or i32 %v4_c420, %v3_c410
  store i32 %v5_c420, i32* @r5, align 4
  %v1_c43c = urem i32 %v6_c2e8, 2
  store i32 %v1_c43c, i32* %r2.global-to-local, align 4
  %v1_c440 = urem i32 %v6_c300, 2
  store i32 %v1_c440, i32* %r3.global-to-local, align 4
  %v1_c444 = urem i32 %v6_c318, 2
  store i32 %v1_c444, i32* %r0.global-to-local, align 4
  %v1_c448 = urem i32 %v6_c330, 2
  store i32 %v1_c448, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c400, 65536
  %v4_c4d0 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c418
  %v4_c534 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c43c
  %v4_c548 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c440
  %v4_c560 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c444
  %v3_c574 = and i32 %tmp64, 2
  %v1_c4c4 = trunc i32 %v6_c20c to i8
  br label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %bb61, %dec_label_pc_c3d8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c470 = call i32 @function_11ea4(i32 128, i32 1)
  store i32 %v2_c470, i32* %r0.global-to-local, align 4
  %v3_c474 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c474, i32* %r2.global-to-local, align 4
  %v1_c478 = load i32, i32* @sb, align 4
  %v2_c478 = load i32, i32* @r4, align 4
  %v5_c478 = mul i32 %v2_c478, 4
  %v6_c478 = add i32 %v5_c478, %v1_c478
  %v7_c478 = inttoptr i32 %v6_c478 to i32*
  store i32 %v2_c470, i32* %v7_c478, align 4
  %v0_c47c = load i32, i32* %r2.global-to-local, align 4
  %v3_c47c = mul i32 %v0_c47c, 32
  store i32 %v3_c47c, i32* %r3.global-to-local, align 4
  %v0_c480 = load i32, i32* @sb, align 4
  %v4_c480 = mul i32 %v0_c47c, 4
  %v5_c480 = add i32 %v0_c480, %v4_c480
  %v6_c480 = inttoptr i32 %v5_c480 to i32*
  %v7_c480 = load i32, i32* %v6_c480, align 4
  store i32 %v7_c480, i32* %r4.global-to-local, align 4
  %v5_c484 = mul i32 %v0_c47c, 24
  store i32 %v5_c484, i32* %r3.global-to-local, align 4
  %v1_c488 = load i32, i32* @r8, align 4
  %v2_c488 = add i32 %v1_c488, %v5_c484
  store i32 %v2_c488, i32* %r0.global-to-local, align 4
  %v1_c48c = inttoptr i32 %v7_c480 to i8*
  %v2_c48c = load i8, i8* %v1_c48c, align 1
  %tmp65 = urem i8 %v2_c48c, 16
  %v1_c490 = zext i8 %tmp65 to i32
  %v1_c494 = or i32 %v1_c490, 64
  store i32 %v1_c494, i32* %r3.global-to-local, align 4
  %v1_c498 = trunc i32 %v1_c494 to i8
  store i8 %v1_c498, i8* %v1_c48c, align 1
  %v0_c49c = load i32, i32* %r4.global-to-local, align 4
  %v1_c49c = inttoptr i32 %v0_c49c to i8*
  %v2_c49c = load i8, i8* %v1_c49c, align 1
  %v1_c4a0 = and i8 %v2_c49c, -16
  %v1_c4a4 = or i8 %v1_c4a0, 5
  store i32 %v1_c238, i32* %r3.global-to-local, align 4
  store i8 %v1_c4a4, i8* %v1_c49c, align 1
  %v2_c4b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4b4 = add i32 %v2_c4b4, 1
  %v4_c4b4 = inttoptr i32 %v3_c4b4 to i8*
  store i8 %v5_c1f0, i8* %v4_c4b4, align 1
  store i32 %v1_c214, i32* %r2.global-to-local, align 4
  %v0_c4bc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4bc = icmp eq i32 %v0_c4bc, 0
  store i1 %v2_c4bc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c4c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 8
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4c8 = trunc i32 %v0_c4c8 to i16
  %v2_c4c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c8 = add i32 %v2_c4c8, 2
  %v4_c4c8 = inttoptr i32 %v3_c4c8 to i16*
  store i16 %v1_c4c8, i16* %v4_c4c8, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c4d0, i32* %r1.global-to-local, align 4
  %v0_c4d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4d4, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c468
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c468, %bb
  %v2_c4d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4d8 = add i32 %v2_c4d8, 9
  %v4_c4d8 = inttoptr i32 %v3_c4d8 to i8*
  store i8 6, i8* %v4_c4d8, align 1
  %v0_c4dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4dc, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c4dc = load i32, i32* %r2.global-to-local, align 4
  %v2_c4dc = trunc i32 %v1_c4dc to i16
  %v3_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v4_c4dc = add i32 %v3_c4dc, 6
  %v5_c4dc = inttoptr i32 %v4_c4dc to i16*
  store i16 %v2_c4dc, i16* %v5_c4dc, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c34c, i32* %r2.global-to-local, align 4
  %v1_c4e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4e4 = add i32 %v1_c4e4, 12
  %v3_c4e4 = inttoptr i32 %v2_c4e4 to i32*
  store i32 %v6_c34c, i32* %v3_c4e4, align 4
  %v0_c4e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c4e8 = add i32 %v0_c4e8, 16
  %v2_c4e8 = inttoptr i32 %v1_c4e8 to i32*
  %v3_c4e8 = load i32, i32* %v2_c4e8, align 4
  store i32 %v3_c4e8, i32* %r3.global-to-local, align 4
  %v0_c4ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c4ec = trunc i32 %v0_c4ec to i16
  %v2_c4ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c4ec = add i32 %v2_c4ec, 4
  %v4_c4ec = inttoptr i32 %v3_c4ec to i16*
  store i16 %v1_c4ec, i16* %v4_c4ec, align 2
  %v0_c4f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4f0 = add i32 %v1_c4f0, 16
  %v3_c4f0 = inttoptr i32 %v2_c4f0 to i32*
  store i32 %v0_c4f0, i32* %v3_c4f0, align 4
  %v0_c4f4 = load i32, i32* @r6, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i16
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 20
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i16*
  store i16 %v1_c4f4, i16* %v4_c4f4, align 2
  %v0_c4f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 20
  store i32 %v1_c4f8, i32* %r1.global-to-local, align 4
  %v1_c4fc = add i32 %v0_c4f8, 32
  %v2_c4fc = inttoptr i32 %v1_c4fc to i8*
  %v3_c4fc = load i8, i8* %v2_c4fc, align 1
  %v4_c4fc = zext i8 %v3_c4fc to i32
  store i32 %v4_c4fc, i32* %r3.global-to-local, align 4
  %v1_c500 = add i32 %v0_c4f8, 33
  %v2_c500 = inttoptr i32 %v1_c500 to i8*
  %v3_c500 = load i8, i8* %v2_c500, align 1
  %v4_c500 = zext i8 %v3_c500 to i32
  store i32 %v1_c414, i32* %r0.global-to-local, align 4
  %v1_c508 = urem i8 %v3_c4fc, 16
  %v1_c50c = or i8 %v1_c508, -96
  %v1_c510 = and i32 %v4_c500, 223
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  store i8 %v1_c50c, i8* %v2_c4fc, align 1
  %v0_c518 = load i32, i32* %r2.global-to-local, align 4
  %v1_c518 = load i32, i32* %r0.global-to-local, align 4
  %v4_c518 = mul i32 %v1_c518, 32
  %v5_c518 = or i32 %v4_c518, %v0_c518
  store i32 %v5_c518, i32* %r2.global-to-local, align 4
  store i32 %v5_c3fc, i32* %r3.global-to-local, align 4
  %v1_c520 = trunc i32 %v5_c518 to i8
  %v2_c520 = load i32, i32* %r1.global-to-local, align 4
  %v3_c520 = add i32 %v2_c520, 13
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v1_c524 = load i32, i32* %r1.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 4
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v0_c524, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r1.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 13
  %v2_c528 = inttoptr i32 %v1_c528 to i8*
  %v3_c528 = load i8, i8* %v2_c528, align 1
  %v4_c528 = zext i8 %v3_c528 to i32
  store i32 %v1_c418, i32* %r0.global-to-local, align 4
  %v1_c530 = and i32 %v4_c528, 239
  %v5_c534 = or i32 %v1_c530, %v4_c534
  store i32 %v5_c534, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v5_c534 to i8
  store i8 %v1_c538, i8* %v2_c528, align 1
  %v0_c53c = load i32, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c53c, 13
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v1_c43c, i32* %r3.global-to-local, align 4
  %v1_c544 = and i32 %v4_c53c, 247
  %v5_c548 = or i32 %v1_c544, %v4_c548
  store i32 %v5_c548, i32* %r2.global-to-local, align 4
  %v0_c54c = load i32, i32* @r5, align 4
  %v1_c54c = trunc i32 %v0_c54c to i16
  %v3_c54c = add i32 %v0_c53c, 2
  %v4_c54c = inttoptr i32 %v3_c54c to i16*
  store i16 %v1_c54c, i16* %v4_c54c, align 2
  %v0_c550 = load i32, i32* %r2.global-to-local, align 4
  %v1_c550 = trunc i32 %v0_c550 to i8
  %v2_c550 = load i32, i32* %r1.global-to-local, align 4
  %v3_c550 = add i32 %v2_c550, 13
  %v4_c550 = inttoptr i32 %v3_c550 to i8*
  store i8 %v1_c550, i8* %v4_c550, align 1
  %v0_c554 = load i32, i32* %r1.global-to-local, align 4
  %v1_c554 = add i32 %v0_c554, 13
  %v2_c554 = inttoptr i32 %v1_c554 to i8*
  %v3_c554 = load i8, i8* %v2_c554, align 1
  %v4_c554 = zext i8 %v3_c554 to i32
  store i32 %v1_c440, i32* %r0.global-to-local, align 4
  %v1_c55c = and i32 %v4_c554, 251
  %v5_c560 = or i32 %v1_c55c, %v4_c560
  store i32 %v5_c560, i32* %r3.global-to-local, align 4
  %v1_c564 = trunc i32 %v5_c560 to i8
  store i8 %v1_c564, i8* %v2_c554, align 1
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c444, i32* %r3.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 253
  %v4_c574 = or i32 %v1_c570, %v3_c574
  store i32 %v4_c574, i32* %r2.global-to-local, align 4
  %v1_c578 = trunc i32 %v4_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c448, i32* %r0.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 254
  %v2_c588 = or i32 %v1_c584, %v1_c448
  store i32 %v2_c588, i32* %r3.global-to-local, align 4
  %v1_c58c = trunc i32 %v2_c588 to i8
  store i8 %v1_c58c, i8* %v2_c57c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c598 = load i32, i32* %r4.global-to-local, align 4
  %v3_c598 = add i32 %v2_c598, 40
  %v4_c598 = inttoptr i32 %v3_c598 to i8*
  store i8 2, i8* %v4_c598, align 1
  %v0_c59c = load i32, i32* %r2.global-to-local, align 4
  %v1_c59c = trunc i32 %v0_c59c to i8
  %v2_c59c = load i32, i32* %r4.global-to-local, align 4
  %v3_c59c = add i32 %v2_c59c, 41
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  %v0_c5a0 = call i32 @function_deb8()
  %v1_c5a4 = urem i32 %v0_c5a0, 16
  %v1_c5a8 = or i32 %v1_c5a4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5a8, 256
  %v3_c5b4 = add nuw nsw i32 %tmp66, 2048
  %v5_c5bc = or i32 %v3_c5b4, 5
  %v1_c5c0 = trunc i32 %v5_c5bc to i16
  %v2_c5c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 42
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i16*
  store i16 %v1_c5c0, i16* %v4_c5c0, align 2
  %v2_c5c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 44
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i8*
  store i8 4, i8* %v4_c5c8, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 46
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 8, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 47
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 45
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v0_c5e4 = call i32 @function_deb8()
  store i32 %v0_c5e4, i32* %r0.global-to-local, align 4
  %v2_c5ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c5ec = add i32 %v2_c5ec, 59
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 6, i8* %v4_c5ec, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c5fc = load i32, i32* %r4.global-to-local, align 4
  %v2_c5fc = add i32 %v1_c5fc, 48
  %v3_c5fc = inttoptr i32 %v2_c5fc to i32*
  store i32 %v0_c5e4, i32* %v3_c5fc, align 4
  %v0_c600 = load i32, i32* %r3.global-to-local, align 4
  %v1_c600 = load i32, i32* %r4.global-to-local, align 4
  %v2_c600 = add i32 %v1_c600, 52
  %v3_c600 = inttoptr i32 %v2_c600 to i32*
  store i32 %v0_c600, i32* %v3_c600, align 4
  %v0_c604 = load i32, i32* %r2.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i8
  %v2_c604 = load i32, i32* %r4.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 56
  %v4_c604 = inttoptr i32 %v3_c604 to i8*
  store i8 %v1_c604, i8* %v4_c604, align 1
  %v0_c608 = load i32, i32* %r1.global-to-local, align 4
  %v1_c608 = trunc i32 %v0_c608 to i8
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 58
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 %v1_c608, i8* %v4_c608, align 1
  %v0_c60c = load i32, i32* %r1.global-to-local, align 4
  %v1_c60c = trunc i32 %v0_c60c to i8
  %v2_c60c = load i32, i32* %r4.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 57
  %v4_c60c = inttoptr i32 %v3_c60c to i8*
  store i8 %v1_c60c, i8* %v4_c60c, align 1
  %v3_c610 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c610, i32* %r3.global-to-local, align 4
  %v1_c614 = load i32, i32* %r2.global-to-local, align 4
  %v2_c614 = add i32 %v1_c614, %v3_c610
  store i32 %v2_c614, i32* @r4, align 4
  %v1_c618 = load i32, i32* @r7, align 4
  %v9_c618 = icmp eq i32 %v2_c614, %v1_c618
  store i1 %v9_c618, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c614, i32* %stack_var_-44, align 4
  %v5_c620 = icmp slt i32 %v2_c614, %v1_c618
  br i1 %v5_c620, label %dec_label_pc_c468, label %dec_label_pc_c624.preheader

dec_label_pc_c624.preheader:                      ; preds = %bb61, %dec_label_pc_c398
  %v0_c6286 = phi i32 [ 0, %dec_label_pc_c398 ], [ %v1_c618, %bb61 ]
  %v3_c7a0 = icmp eq i32 %v6_c34c, -1
  %v8_c7a0 = icmp eq i32 %v6_c34c, -1
  %v3_c670 = icmp eq i32 %v3_c3b4, 65535
  br label %dec_label_pc_c624

dec_label_pc_c624:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734, %dec_label_pc_c624.preheader
  %v0_c628 = phi i32 [ %v0_c6286, %dec_label_pc_c624.preheader ], [ 0, %dec_label_pc_c734 ], [ 0, %dec_label_pc_c624 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c628 = icmp eq i32 %v0_c628, 0
  store i1 %v2_c628, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c628, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c634:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c638

dec_label_pc_c638:                                ; preds = %dec_label_pc_c6b0, %dec_label_pc_c634
  %v1_c648 = phi i32 [ %v1_c724, %dec_label_pc_c6b0 ], [ 0, %dec_label_pc_c634 ]
  %v5_c63c = mul i32 %v1_c648, 24
  %v1_c640 = load i32, i32* @r8, align 4
  %v2_c640 = add i32 %v1_c640, %v5_c63c
  store i32 %v2_c640, i32* %r3.global-to-local, align 4
  %v1_c644 = add i32 %v2_c640, 20
  %v2_c644 = inttoptr i32 %v1_c644 to i8*
  %v3_c644 = load i8, i8* %v2_c644, align 1
  %v4_c644 = zext i8 %v3_c644 to i32
  store i32 %v4_c644, i32* %r2.global-to-local, align 4
  %v0_c648 = load i32, i32* @sb, align 4
  %v4_c648 = mul i32 %v1_c648, 4
  %v5_c648 = add i32 %v0_c648, %v4_c648
  %v6_c648 = inttoptr i32 %v5_c648 to i32*
  %v7_c648 = load i32, i32* %v6_c648, align 4
  store i32 %v7_c648, i32* @r5, align 4
  %v7_c64c = icmp eq i8 %v3_c644, 31
  store i1 %v7_c64c, i1* %cpsr_z.global-to-local, align 1
  %v1_c650 = add i32 %v7_c648, 20
  store i32 %v1_c650, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c644, 32
  br i1 %tmp67, label %dec_label_pc_c748, label %dec_label_pc_c658

dec_label_pc_c658:                                ; preds = %dec_label_pc_c638
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c670, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v1_c67c = phi i32 [ %v1_c7b8, %dec_label_pc_c7a8 ], [ 65535, %dec_label_pc_c664 ]
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v9_c67c = icmp eq i32 %v3_c3b8, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c67c, label %dec_label_pc_c7d8, label %dec_label_pc_c684

dec_label_pc_c684:                                ; preds = %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge, %dec_label_pc_c678
  %v1_c688 = phi i32 [ %v1_c688.pre, %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge ], [ %v1_c67c, %dec_label_pc_c678 ]
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v9_c688 = icmp eq i32 %v3_c3bc, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c7ec, label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge, %dec_label_pc_c684
  %v1_c694 = phi i32 [ %v1_c694.pre, %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge ], [ %v1_c688, %dec_label_pc_c684 ]
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v9_c694 = icmp eq i32 %v5_c288, %v1_c694
  store i1 %v9_c694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c694, label %dec_label_pc_c800, label %dec_label_pc_c69c

dec_label_pc_c69c:                                ; preds = %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge, %dec_label_pc_c690
  %v1_c6a0 = phi i32 [ %v1_c6a0.pre, %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge ], [ %v1_c694, %dec_label_pc_c690 ]
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v9_c6a0 = icmp eq i32 %v6_c2a0, %v1_c6a0
  store i1 %v9_c6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6a0, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c6a8 = load i32, i32* @fp, align 4
  %v2_c6a8 = icmp eq i32 %v0_c6a8, 0
  store i1 %v2_c6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6a8, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c6b0:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814, %dec_label_pc_c824
  %v2_c6b4 = load i32, i32* @r5, align 4
  %v3_c6b4 = add i32 %v2_c6b4, 10
  %v4_c6b4 = inttoptr i32 %v3_c6b4 to i16*
  store i16 0, i16* %v4_c6b4, align 2
  %v0_c6b8 = load i32, i32* @r5, align 4
  store i32 %v0_c6b8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c6c0 = call i32 @function_c848(i32 %v0_c6b8, i32 20)
  %v3_c6c0 = trunc i32 %v2_c6c0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c6c8 = load i32, i32* @r5, align 4
  %v4_c6c8 = add i32 %v3_c6c8, 10
  %v5_c6c8 = inttoptr i32 %v4_c6c8 to i16*
  store i16 %v3_c6c0, i16* %v5_c6c8, align 2
  %v0_c6cc = load i32, i32* @r6, align 4
  store i32 %v0_c6cc, i32* @r1, align 4
  %v0_c6d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6d0 = trunc i32 %v0_c6d0 to i16
  %v3_c6d0 = add i32 %v0_c6cc, 16
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i16*
  store i16 %v1_c6d0, i16* %v4_c6d0, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c6dc = load i32, i32* @r5, align 4
  store i32 %v0_c6dc, i32* %r0.global-to-local, align 4
  %v4_c6e0 = call i32 @function_c898(i32 %v0_c6dc, i32 %v0_c6cc, i32 10240, i32 40)
  %v5_c6e0 = trunc i32 %v4_c6e0 to i16
  store i32 %v4_c6e0, i32* %r0.global-to-local, align 4
  %v3_c6e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c6e4, i32* %r3.global-to-local, align 4
  %v3_c6e8 = mul i32 %v3_c6e4, 32
  store i32 %v3_c6e8, i32* %lr.global-to-local, align 4
  %v3_c6ec = load i32, i32* @r6, align 4
  %v4_c6ec = add i32 %v3_c6ec, 16
  %v5_c6ec = inttoptr i32 %v4_c6ec to i16*
  store i16 %v5_c6e0, i16* %v5_c6ec, align 2
  %v0_c6f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_c6f0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c6f0, -8
  %v5_c6f0 = add i32 %v0_c6f0, %tmp68
  store i32 %v5_c6f0, i32* %lr.global-to-local, align 4
  %v0_c6f4 = load i32, i32* @r6, align 4
  %v1_c6f4 = add i32 %v0_c6f4, 2
  %v2_c6f4 = inttoptr i32 %v1_c6f4 to i16*
  %v3_c6f4 = load i16, i16* %v2_c6f4, align 2
  %v1_c6f8 = load i32, i32* @r8, align 4
  %v2_c6f8 = add i32 %v1_c6f8, %v5_c6f0
  store i32 %v2_c6f8, i32* @lr, align 4
  %v3_c6fc = add i32 %v2_c6f8, 2
  %v4_c6fc = inttoptr i32 %v3_c6fc to i16*
  store i16 %v3_c6f4, i16* %v4_c6fc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c708 = load i32, i32* @r5, align 4
  store i32 %v0_c708, i32* %r1.global-to-local, align 4
  %v0_c70c = load i32, i32* @sl, align 4
  store i32 %v0_c70c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c714 = load i32, i32* @lr, align 4
  %v6_c71c = call i32 @function_112b8(i32 %v0_c70c, i32 %v0_c708, i32 60, i32 16384, i32 %v0_c714, i32 16)
  %v3_c720 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c720, i32* %r3.global-to-local, align 4
  %v1_c724 = add i32 %v3_c720, 1
  store i32 %v1_c724, i32* %r0.global-to-local, align 4
  %v1_c728 = load i32, i32* @r7, align 4
  %v9_c728 = icmp eq i32 %v1_c724, %v1_c728
  store i1 %v9_c728, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c724, i32* %stack_var_-44, align 4
  %v5_c730 = icmp slt i32 %v1_c724, %v1_c728
  br i1 %v5_c730, label %dec_label_pc_c638, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c6b0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c738 = icmp eq i32 %v1_c728, 0
  store i1 %v2_c738, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c738, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c748:                                ; preds = %dec_label_pc_c638
  %v1_c748 = add i32 %v2_c640, 16
  %v2_c748 = inttoptr i32 %v1_c748 to i32*
  %v3_c748 = load i32, i32* %v2_c748, align 4
  store i32 %v3_c748, i32* %r4.global-to-local, align 4
  %v0_c74c = call i32 @function_deb8()
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  %v3_c750 = load i32, i32* %stack_var_-44, align 4
  %v5_c758 = mul i32 %v3_c750, 24
  %v0_c75c = load i32, i32* %r4.global-to-local, align 4
  %v1_c75c = and i32 %v0_c75c, 16711680
  %v3_c760 = udiv i32 %v0_c75c, 16777216
  %v4_c764 = udiv i32 %v1_c75c, 256
  %v5_c764 = or i32 %v4_c764, %v3_c760
  store i32 %v5_c764, i32* %r2.global-to-local, align 4
  %v1_c768 = load i32, i32* @r8, align 4
  %v2_c768 = add i32 %v1_c768, %v5_c758
  store i32 %v2_c768, i32* %r1.global-to-local, align 4
  %v1_c76c = and i32 %v0_c75c, 65280
  store i32 %v1_c76c, i32* %r3.global-to-local, align 4
  %v1_c770 = add i32 %v2_c768, 20
  %v2_c770 = inttoptr i32 %v1_c770 to i8*
  %v3_c770 = load i8, i8* %v2_c770, align 1
  %v4_c770 = zext i8 %v3_c770 to i32
  %v5_c778 = call i32 @llvm.bswap.i32(i32 %v0_c75c)
  %v7_c77c = lshr i32 %v0_c74c, %v4_c770
  %v8_c77c = add i32 %v7_c77c, %v5_c778
  store i32 %v8_c77c, i32* %r2.global-to-local, align 4
  %v1_c780 = and i32 %v8_c77c, 16711680
  store i32 %v1_c780, i32* %r0.global-to-local, align 4
  %v1_c78c = and i32 %v8_c77c, 65280
  store i32 %v1_c78c, i32* %r1.global-to-local, align 4
  %v5_c794 = call i32 @llvm.bswap.i32(i32 %v8_c77c)
  %v1_c798 = load i32, i32* @r5, align 4
  %v2_c798 = add i32 %v1_c798, 16
  %v3_c798 = inttoptr i32 %v2_c798 to i32*
  store i32 %v5_c794, i32* %v3_c798, align 4
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c7a8:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  %v0_c7a8 = call i32 @function_deb8()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7b0 = load i32, i32* @r5, align 4
  %v2_c7b0 = add i32 %v1_c7b0, 12
  %v3_c7b0 = inttoptr i32 %v2_c7b0 to i32*
  store i32 %v0_c7a8, i32* %v3_c7b0, align 4
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  %v0_c7b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7b8 = add i32 %v0_c7b8, -1
  store i32 %v1_c7b8, i32* @r4, align 4
  %v9_c7bc = icmp eq i32 %v3_c3b4, %v1_c7b8
  store i1 %v9_c7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7bc, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v0_c7c4 = call i32 @function_deb8()
  %v1_c7c4 = trunc i32 %v0_c7c4 to i16
  store i32 %v0_c7c4, i32* %r0.global-to-local, align 4
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v1_c7cc = load i32, i32* @r4, align 4
  %v9_c7cc = icmp eq i32 %v3_c3b8, %v1_c7cc
  store i1 %v9_c7cc, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d0 = load i32, i32* @r5, align 4
  %v4_c7d0 = add i32 %v3_c7d0, 4
  %v5_c7d0 = inttoptr i32 %v4_c7d0 to i16*
  store i16 %v1_c7c4, i16* %v5_c7d0, align 2
  br i1 %v9_c7cc, label %dec_label_pc_c7d8, label %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge

dec_label_pc_c7c4.dec_label_pc_c684_crit_edge:    ; preds = %dec_label_pc_c7c4
  %v1_c688.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c684

dec_label_pc_c7d8:                                ; preds = %dec_label_pc_c7c4, %dec_label_pc_c678
  %v0_c7d8 = call i32 @function_deb8()
  %v1_c7d8 = trunc i32 %v0_c7d8 to i16
  store i32 %v0_c7d8, i32* %r0.global-to-local, align 4
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v1_c7e0 = load i32, i32* @r4, align 4
  %v9_c7e0 = icmp eq i32 %v3_c3bc, %v1_c7e0
  store i1 %v9_c7e0, i1* %cpsr_z.global-to-local, align 1
  %v3_c7e4 = load i32, i32* @r5, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7d8, i16* %v5_c7e4, align 2
  br i1 %v9_c7e0, label %dec_label_pc_c7ec, label %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge

dec_label_pc_c7d8.dec_label_pc_c690_crit_edge:    ; preds = %dec_label_pc_c7d8
  %v1_c694.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c690

dec_label_pc_c7ec:                                ; preds = %dec_label_pc_c7d8, %dec_label_pc_c684
  %v0_c7ec = call i32 @function_deb8()
  %v1_c7ec = trunc i32 %v0_c7ec to i16
  store i32 %v0_c7ec, i32* %r0.global-to-local, align 4
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v1_c7f4 = load i32, i32* @r4, align 4
  %v9_c7f4 = icmp eq i32 %v5_c288, %v1_c7f4
  store i1 %v9_c7f4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7f8 = load i32, i32* @r6, align 4
  %v4_c7f8 = add i32 %v3_c7f8, 2
  %v5_c7f8 = inttoptr i32 %v4_c7f8 to i16*
  store i16 %v1_c7ec, i16* %v5_c7f8, align 2
  br i1 %v9_c7f4, label %dec_label_pc_c800, label %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge

dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge:    ; preds = %dec_label_pc_c7ec
  %v1_c6a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c69c

dec_label_pc_c800:                                ; preds = %dec_label_pc_c7ec, %dec_label_pc_c690
  %v0_c800 = call i32 @function_deb8()
  %v1_c804 = load i32, i32* @r6, align 4
  %v2_c804 = add i32 %v1_c804, 4
  %v3_c804 = inttoptr i32 %v2_c804 to i32*
  store i32 %v0_c800, i32* %v3_c804, align 4
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v6_c2a0, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c80c, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c814:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c814 = call i32 @function_deb8()
  store i32 %v0_c814, i32* %r0.global-to-local, align 4
  %v0_c818 = load i32, i32* @fp, align 4
  %v2_c818 = icmp eq i32 %v0_c818, 0
  store i1 %v2_c818, i1* %cpsr_z.global-to-local, align 1
  %v1_c81c = load i32, i32* @r6, align 4
  %v2_c81c = add i32 %v1_c81c, 8
  %v3_c81c = inttoptr i32 %v2_c81c to i32*
  store i32 %v0_c814, i32* %v3_c81c, align 4
  br i1 %v2_c818, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814
  %v0_c824 = call i32 @function_deb8()
  %v1_c824 = trunc i32 %v0_c824 to i16
  store i32 %v0_c824, i32* %r0.global-to-local, align 4
  %v3_c828 = load i32, i32* @r6, align 4
  %v4_c828 = add i32 %v3_c828, 18
  %v5_c828 = inttoptr i32 %v4_c828 to i16*
  store i16 %v1_c824, i16* %v5_c828, align 2
  br label %dec_label_pc_c6b0

dec_label_pc_c830:                                ; preds = %dec_label_pc_c370
  %v0_c830 = load i32, i32* @sl, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v1_c834 = call i32 @function_10b64(i32 %v0_c830)
  store i32 %v1_c834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c19c, %dec_label_pc_c830
  %v1_c840 = phi i32 [ %v3_c360, %dec_label_pc_c19c ], [ %v1_c834, %dec_label_pc_c830 ]
  store i32 %v3_c19c, i32* %r4.global-to-local, align 4
  store i32 %v24_c19c, i32* %fp.global-to-local, align 4
  store i32 %v27_c19c, i32* %lr.global-to-local, align 4
  ret i32 %v1_c840

; uselistorder directives
  uselistorder i32 %v0_c824, { 1, 0 }
  uselistorder i32 %v0_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7d8, { 1, 0 }
  uselistorder i32 %v0_c7c4, { 1, 0 }
  uselistorder i32 %v1_c7b8, { 1, 2, 0 }
  uselistorder i32 %v0_c75c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c724, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c6f0, { 1, 0 }
  uselistorder i32 %v4_c6e0, { 1, 0 }
  uselistorder i1 %v3_c670, { 1, 0 }
  uselistorder i32 %v2_c614, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 2, 1, 0 }
  uselistorder i32 %v1_c444, { 2, 0, 1 }
  uselistorder i32 %v1_c440, { 2, 0, 1 }
  uselistorder i32 %v1_c43c, { 2, 0, 1 }
  uselistorder i32 %v1_c418, { 1, 0 }
  uselistorder i32 %v3_c3b4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3a8, { 1, 0, 2 }
  uselistorder i32 %v0_c3a4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c390, { 1, 0 }
  uselistorder i1 %v7_c364, { 1, 0 }
  uselistorder i32 %v3_c360, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c34c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2a0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c288, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c20c, { 1, 0 }
  uselistorder i32 %v7_c1f4, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_8570, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 95, 96, 97, 98, 99, 100, 101, 102, 91, 92, 93, 94, 103, 104, 105, 106 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c838, { 1, 0 }
  uselistorder label %dec_label_pc_c824, { 1, 0 }
  uselistorder label %dec_label_pc_c6b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c634, { 1, 0 }
  uselistorder label %dec_label_pc_c624, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_c848(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c848:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c86c, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c848
  %v0_c85c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c854
  %v0_c864 = phi i32 [ %v2_c864, %dec_label_pc_c858 ], [ 0, %dec_label_pc_c854 ]
  %v0_c85c = phi i32 [ %v5_c85c, %dec_label_pc_c858 ], [ %v0_c85c.pre, %dec_label_pc_c854 ]
  %v0_c858 = phi i32 [ %v1_c858, %dec_label_pc_c858 ], [ %arg1, %dec_label_pc_c854 ]
  %v1_c858 = add i32 %v0_c858, -2
  %v1_c85c = inttoptr i32 %v0_c85c to i16*
  %v2_c85c = load i16, i16* %v1_c85c, align 2
  %v3_c85c = zext i16 %v2_c85c to i32
  %v5_c85c = add i32 %v0_c85c, -2
  store i32 %v5_c85c, i32* @r0, align 4
  %v2_c864 = add i32 %v3_c85c, %v0_c864
  %v1_c858.cmp = icmp ugt i32 %v1_c858, 1
  br i1 %v1_c858.cmp, label %dec_label_pc_c858, label %dec_label_pc_c86c.loopexit

dec_label_pc_c86c.loopexit:                       ; preds = %dec_label_pc_c858
  br label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c848, %dec_label_pc_c86c.loopexit
  %v1_c874 = phi i32 [ %v2_c864, %dec_label_pc_c86c.loopexit ], [ 0, %dec_label_pc_c848 ]
  %v0_c86c = phi i32 [ %v1_c858, %dec_label_pc_c86c.loopexit ], [ %arg1, %dec_label_pc_c848 ]
  %v7_c86c = icmp eq i32 %v0_c86c, 1
  br i1 %v7_c86c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c86c
  %v1_c870 = load i32, i32* @r0, align 4
  %v2_c870 = inttoptr i32 %v1_c870 to i8*
  %v3_c870 = load i8, i8* %v2_c870, align 1
  %v4_c870 = zext i8 %v3_c870 to i32
  %v3_c874 = add i32 %v1_c874, %v4_c870
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c86c, %bb
  %v0_c878 = phi i32 [ %v1_c874, %dec_label_pc_c86c ], [ %v3_c874, %bb ]
  %v3_c87c = urem i32 %v0_c878, 65536
  %v4_c880 = udiv i32 %v0_c878, 65536
  %v5_c880 = add nuw nsw i32 %v4_c880, %v3_c87c
  %v4_c884 = udiv i32 %v5_c880, 65536
  %v5_c884 = add nuw nsw i32 %v4_c884, %v5_c880
  %v1_c888 = urem i32 %v5_c884, 65536
  %v3_c890 = xor i32 %v1_c888, 65535
  ret i32 %v3_c890

; uselistorder directives
  uselistorder i32 %v5_c880, { 1, 0 }
  uselistorder i32 %v5_c85c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0, 2 }
  uselistorder i32 %v0_c85c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c86c, { 1, 0 }
}

define i32 @function_c898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c898:
  %v1_c8a8 = add i32 %arg1, 12
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i32*
  %v3_c8a8 = load i32, i32* %v2_c8a8, align 4
  %v1_c8ac = add i32 %arg1, 16
  %v2_c8ac = inttoptr i32 %v1_c8ac to i32*
  %v3_c8ac = load i32, i32* %v2_c8ac, align 4
  %v7_c8b0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8b0, label %dec_label_pc_c8bc.preheader, label %dec_label_pc_c8d0

dec_label_pc_c8bc.preheader:                      ; preds = %dec_label_pc_c898
  %v0_c8c0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8bc.preheader, %dec_label_pc_c8bc
  %v0_c8c8 = phi i32 [ 0, %dec_label_pc_c8bc.preheader ], [ %v2_c8c8, %dec_label_pc_c8bc ]
  %v0_c8c0 = phi i32 [ %v0_c8c0.pre, %dec_label_pc_c8bc.preheader ], [ %v5_c8c0, %dec_label_pc_c8bc ]
  %v0_c8bc = phi i32 [ %arg3, %dec_label_pc_c8bc.preheader ], [ %v1_c8bc, %dec_label_pc_c8bc ]
  %v1_c8bc = add nsw i32 %v0_c8bc, -2
  %v1_c8c0 = inttoptr i32 %v0_c8c0 to i16*
  %v2_c8c0 = load i16, i16* %v1_c8c0, align 2
  %v3_c8c0 = zext i16 %v2_c8c0 to i32
  %v5_c8c0 = add i32 %v0_c8c0, -2
  store i32 %v5_c8c0, i32* @r1, align 4
  %v2_c8c8 = add i32 %v3_c8c0, %v0_c8c8
  %v8_c8cc = icmp sgt i32 %v1_c8bc, 1
  br i1 %v8_c8cc, label %dec_label_pc_c8bc, label %dec_label_pc_c8d0.loopexit

dec_label_pc_c8d0.loopexit:                       ; preds = %dec_label_pc_c8bc
  br label %dec_label_pc_c8d0

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8d0.loopexit, %dec_label_pc_c898
  %v1_c8dc = phi i32 [ %v2_c8c8, %dec_label_pc_c8d0.loopexit ], [ 0, %dec_label_pc_c898 ]
  %v0_c8d0 = phi i32 [ %v1_c8bc, %dec_label_pc_c8d0.loopexit ], [ %arg3, %dec_label_pc_c898 ]
  %v7_c8d0 = icmp eq i32 %v0_c8d0, 1
  br i1 %v7_c8d0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c8d0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c8d0
  %v1_c8d4 = load i32, i32* @r1, align 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i8*
  %v3_c8d4 = load i8, i8* %v2_c8d4, align 1
  %v4_c8d4 = zext i8 %v3_c8d4 to i32
  %v3_c8dc = add i32 %v4_c8d4, %v1_c8dc
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c904 = phi i32 [ %v1_c8dc, %.thread ], [ %v3_c8dc, %bb ]
  %v0_c8e4 = mul i32 %v3_c8a8, 65536
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  %v3_c8e8 = urem i32 %v3_c8ac, 65536
  %v4_c8f0 = udiv i32 %v3_c8a8, 65536
  %v2_c8ec = add nuw nsw i32 %v3_c8e8, %v4_c8f0
  %v5_c8f0 = add nuw nsw i32 %v2_c8ec, %v3_c8e4
  %v1_c8f4 = add i32 %arg1, 9
  %v2_c8f4 = inttoptr i32 %v1_c8f4 to i8*
  %v3_c8f4 = load i8, i8* %v2_c8f4, align 1
  %v4_c8f4 = zext i8 %v3_c8f4 to i32
  %v4_c8f8 = udiv i32 %v3_c8ac, 65536
  %v3_c900 = mul nuw nsw i32 %v4_c8f4, 256
  %v5_c8f8 = add i32 %v4_c8f8, %arg2
  %v2_c8fc = add i32 %v5_c8f8, %v1_c904
  %v2_c904 = add i32 %v2_c8fc, %v5_c8f0
  %v2_c908 = add i32 %v2_c904, %v3_c900
  %tmp = icmp ult i32 %v2_c908, 65536
  br i1 %tmp, label %dec_label_pc_c928, label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb19, %dec_label_pc_c914
  %v2_c91c5 = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206.in = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206 = udiv i32 %v3_c9206.in, 65536
  %v3_c918 = urem i32 %v2_c91c5, 65536
  %v2_c91c = add nuw nsw i32 %v3_c918, %v3_c9206
  %tmp20 = icmp ult i32 %v2_c91c, 65536
  br i1 %tmp20, label %dec_label_pc_c928.loopexit, label %dec_label_pc_c914

dec_label_pc_c928.loopexit:                       ; preds = %dec_label_pc_c914
  br label %dec_label_pc_c928

dec_label_pc_c928:                                ; preds = %dec_label_pc_c928.loopexit, %bb19
  %v0_c928 = phi i32 [ %v2_c91c, %dec_label_pc_c928.loopexit ], [ %v2_c908, %bb19 ]
  %v1_c928 = urem i32 %v0_c928, 65536
  %v3_c930 = xor i32 %v1_c928, 65535
  ret i32 %v3_c930

; uselistorder directives
  uselistorder i32 %v2_c91c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c908, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c8dc, { 1, 0 }
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v0_c8c0, { 1, 0 }
  uselistorder i32 %v3_c8a8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
}

define i32 @function_c93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c93c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c93c = load i32, i32* @r4, align 4
  %v6_c93c = load i32, i32* @r5, align 4
  %v9_c93c = load i32, i32* @r6, align 4
  %v12_c93c = load i32, i32* @r7, align 4
  %v15_c93c = load i32, i32* @r8, align 4
  %v18_c93c = load i32, i32* @sb, align 4
  %v21_c93c = load i32, i32* @sl, align 4
  %v24_c93c = load i32, i32* @fp, align 4
  %v27_c93c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c958 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c958, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c984 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c984, i32* @fp, align 4
  %v3_c990 = call i32 @function_10fe0(i8* nonnull %stack_var_-585, i32 0)
  %v2_c994 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c994, i32* @sl, align 4
  %v0_c998 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9a4 = bitcast i32* %stack_var_-8777 to i8*
  %v3_c9a4 = call i32 @function_10fe0(i8* %v2_c9a4, i32 %v0_c998)
  %v0_c9ac = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9b8 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c9b8 = call i32 @function_10fe0(i8* %v2_c9b8, i32 %v0_c9ac)
  %v2_c9bc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9bc, i32* @sb, align 4
  %v0_c9c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9c0 = udiv i32 %v0_c9c0, 256
  %v1_c9c4 = urem i32 %v0_c9c0, 256
  store i32 %v1_c9c4, i32* @r4, align 4
  %v3_c9d4 = trunc i32 %v3_c9c0 to i8
  %v4_c9d4 = call i32 @function_10504(i8 %v3_c9d4, i32 16, i32 %v2_c9bc)
  %v2_c9dc = call i32 @function_100a4(i8* nonnull %stack_var_-72)
  %v7_c9e0 = icmp eq i32 %v2_c9dc, 2
  br i1 %v7_c9e0, label %dec_label_pc_cea4, label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %dec_label_pc_c93c, %dec_label_pc_cea4
  %v1_c9ec = call i32 @function_fb64(i32 13)
  %v1_c9f4 = call i32 @function_fb64(i32 14)
  %v1_c9fc = call i32 @function_fb64(i32 15)
  %v1_ca04 = call i32 @function_fb64(i32 17)
  %v0_ca08 = load i32, i32* @r5, align 4
  %v2_ca10 = inttoptr i32 %v0_ca08 to i32*
  %v3_ca10 = call i32 @function_faa0(i32 17, i32* %v2_ca10)
  %v0_ca14 = load i32, i32* @r5, align 4
  %v2_ca18 = call i32 @function_10770(i32 %v3_ca10, i32 %v0_ca14)
  %v7_ca1c = icmp eq i32 %v2_ca18, -1
  store i32 %v2_ca18, i32* @r8, align 4
  br i1 %v7_ca1c, label %bb, label %dec_label_pc_ca2c.preheader

bb:                                               ; preds = %dec_label_pc_c9e8
  %v1_ca24 = load i32, i32* @r5, align 4
  store i32 %v1_ca24, i32* @r4, align 4
  br label %dec_label_pc_ce40

dec_label_pc_ca2c.preheader:                      ; preds = %dec_label_pc_c9e8
  %v4_ca3856 = call i32 @function_10304(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca18)
  %v2_ca3c58 = icmp eq i32 %v4_ca3856, 0
  br i1 %v2_ca3c58, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44.lr.ph

dec_label_pc_ca44.lr.ph:                          ; preds = %dec_label_pc_ca2c.preheader
  %v2_ca8c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca44

dec_label_pc_ca44:                                ; preds = %dec_label_pc_ca44.lr.ph, %dec_label_pc_ca2c.backedge
  %v3_ca48 = load i8, i8* %stack_var_-585, align 1
  %v4_ca48 = sext i8 %v3_ca48 to i32
  %v2_ca4c = icmp eq i8 %v3_ca48, 0
  br i1 %v2_ca4c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca44
  %v8_ca50 = icmp eq i8 %v3_ca48, 58
  br i1 %v8_ca50, label %.thread8, label %dec_label_pc_ca64

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_ca7c

bb126:                                            ; preds = %dec_label_pc_ca44
  br label %dec_label_pc_ca7c

dec_label_pc_ca64:                                ; preds = %bb125
  %v1_ca6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ca68

dec_label_pc_ca68:                                ; preds = %bb127, %dec_label_pc_ca64
  %v0_ca68 = phi i32 [ %v1_ca68, %bb127 ], [ 0, %dec_label_pc_ca64 ]
  %v1_ca68 = add i32 %v0_ca68, 1
  %v2_ca6c = add i32 %v1_ca68, %v1_ca6c.pre
  %v3_ca6c = inttoptr i32 %v2_ca6c to i8*
  %v4_ca6c = load i8, i8* %v3_ca6c, align 1
  %v6_ca6c = zext i8 %v4_ca6c to i32
  %v2_ca70 = icmp eq i8 %v4_ca6c, 0
  br i1 %v2_ca70, label %dec_label_pc_ca7c, label %bb127

bb127:                                            ; preds = %dec_label_pc_ca68
  %v8_ca74 = icmp eq i8 %v4_ca6c, 58
  br i1 %v8_ca74, label %dec_label_pc_ca7c, label %dec_label_pc_ca68

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca68, %bb127, %bb126, %.thread8
  %v1_caa8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_ca68, %bb127 ], [ %v1_ca68, %dec_label_pc_ca68 ]
  %v0_ca7c = phi i32 [ %v4_ca48, %.thread8 ], [ %v4_ca48, %bb126 ], [ %v6_ca6c, %bb127 ], [ %v6_ca6c, %dec_label_pc_ca68 ]
  %v2_ca7c = icmp eq i32 %v0_ca7c, 0
  br i1 %v2_ca7c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_ca84

dec_label_pc_ca2c.backedge:                       ; preds = %dec_label_pc_ca7c, %dec_label_pc_cb4c, %dec_label_pc_cb98, %dec_label_pc_cac8
  %v0_ca34 = load i32, i32* @r8, align 4
  %v4_ca38 = call i32 @function_10304(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca34)
  %v2_ca3c = icmp eq i32 %v4_ca38, 0
  br i1 %v2_ca3c, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca7c
  %v1_ca88 = add i32 %v1_caa8, 2
  %v2_ca90 = add i32 %v1_ca88, %v2_ca8c
  %v1_ca94 = add i32 %v2_ca90, -545
  %v2_ca94 = inttoptr i32 %v1_ca94 to i8*
  %v3_ca94 = load i8, i8* %v2_ca94, align 1
  %v2_ca98 = icmp eq i8 %v3_ca94, 0
  br i1 %v2_ca98, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_ca84
  %v8_ca9c = icmp eq i8 %v3_ca94, 32
  br i1 %v8_ca9c, label %.thread13, label %dec_label_pc_caa8

.thread13:                                        ; preds = %bb128
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb129:                                            ; preds = %dec_label_pc_ca84
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

dec_label_pc_caa8:                                ; preds = %bb128
  %v0_caa8 = load i32, i32* @r6, align 4
  %v2_caa8 = add i32 %v0_caa8, %v1_caa8
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %bb130, %dec_label_pc_caa8
  %v0_cabc16 = phi i32 [ %v1_cabc, %bb130 ], [ %v1_ca88, %dec_label_pc_caa8 ]
  %v0_cac018 = phi i32 [ %v1_cac0, %bb130 ], [ %v2_caa8, %dec_label_pc_caa8 ]
  %v1_cab0 = add i32 %v0_cac018, 3
  %v2_cab0 = inttoptr i32 %v1_cab0 to i8*
  %v3_cab0 = load i8, i8* %v2_cab0, align 1
  %v2_cab4 = icmp eq i8 %v3_cab0, 0
  br i1 %v2_cab4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cab0
  %v1_cabc17 = add i32 %v0_cabc16, 1
  store i32 %v1_cabc17, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb130:                                            ; preds = %dec_label_pc_cab0
  %v8_cab8 = icmp eq i8 %v3_cab0, 32
  %v1_cabc = add i32 %v0_cabc16, 1
  store i32 %v1_cabc, i32* @r5, align 4
  %v1_cac0 = add i32 %v0_cac018, 1
  br i1 %v8_cab8, label %dec_label_pc_cac8, label %dec_label_pc_cab0

dec_label_pc_cac8:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cad4 = phi i32 [ %v1_cabc17, %.thread15 ], [ %v1_ca88, %.thread13 ], [ %v1_ca88, %bb129 ], [ %v1_cabc, %bb130 ]
  %v0_cac8 = load i32, i32* @r6, align 4
  %v2_cac8 = add i32 %v0_cac8, %v1_ca88
  store i32 %v2_cac8, i32* @r4, align 4
  %v2_cad4 = add i32 %v1_cad4, %v2_ca8c
  store i32 0, i32* @r7, align 4
  %v3_cadc = add i32 %v2_cad4, -545
  %v4_cadc = inttoptr i32 %v3_cadc to i8*
  store i8 0, i8* %v4_cadc, align 1
  %v0_cae0 = load i32, i32* @r4, align 4
  %v1_cae4 = inttoptr i32 %v0_cae0 to i8*
  %v2_cae4 = call i32 @function_100a4(i8* %v1_cae4)
  store i32 %v2_cae4, i32* @r1, align 4
  %v0_caf0 = load i32, i32* @r4, align 4
  %v3_caf4 = inttoptr i32 %v0_caf0 to i8*
  %v4_caf4 = call i32 @function_103f4(i8* %v3_caf4, i32 %v2_cae4, i32 %v2_c9bc)
  %v7_caf8 = icmp eq i32 %v4_caf4, -1
  br i1 %v7_caf8, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb14.preheader

dec_label_pc_cb14.preheader:                      ; preds = %dec_label_pc_cac8
  %v1_cafc = load i32, i32* @r7, align 4
  %v1_cb00 = load i32, i32* @r6, align 4
  %v2_cb00 = load i32, i32* @r5, align 4
  %v3_cb00 = add i32 %v2_cb00, %v1_cb00
  store i32 %v1_cafc, i32* @lr, align 4
  %v1_cb1448 = add i32 %v3_cb00, 2
  %v2_cb1449 = inttoptr i32 %v1_cb1448 to i8*
  %v3_cb1450 = load i8, i8* %v2_cb1449, align 1
  %v2_cb1852 = icmp eq i8 %v3_cb1450, 0
  %v1_cb1c54 = add i32 %v2_cb00, 2
  br i1 %v2_cb1852, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_cb24:                                ; preds = %dec_label_pc_cb14.preheader, %dec_label_pc_cb14.backedge
  %v0_cb4c83 = phi i32 [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb34.pr = phi i32 [ %v0_cb34.pr70, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_ce54 = phi i32 [ %v0_ce5473, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb1c78 = phi i32 [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v1_cb1c54, %dec_label_pc_cb14.preheader ]
  %v0_cb44 = phi i32 [ %v0_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb00, %dec_label_pc_cb14.preheader ]
  %v1_cb28.in = phi i8 [ %v3_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb1450, %dec_label_pc_cb14.preheader ]
  %v7_cb24 = icmp eq i8 %v1_cb28.in, 9
  br i1 %v7_cb24, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb24
  %v8_cb28 = icmp eq i8 %v1_cb28.in, 32
  br i1 %v8_cb28, label %.thread27, label %dec_label_pc_cb34

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb40

bb132:                                            ; preds = %dec_label_pc_cb24
  br label %dec_label_pc_cb40

dec_label_pc_cb34:                                ; preds = %bb131
  %v7_cb34 = icmp eq i32 %v0_cb34.pr, 1
  br i1 %v7_cb34, label %dec_label_pc_ce54, label %dec_label_pc_cb3c

dec_label_pc_cb3c:                                ; preds = %dec_label_pc_ce54, %dec_label_pc_cb34
  %v0_cb4075 = phi i32 [ %v1_ce54, %dec_label_pc_ce54 ], [ %v0_ce54, %dec_label_pc_cb34 ]
  br label %dec_label_pc_cb40

dec_label_pc_cb40:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb3c
  %v0_cb40 = phi i32 [ %v0_ce54, %.thread27 ], [ %v0_ce54, %bb132 ], [ %v0_cb4075, %dec_label_pc_cb3c ]
  %v0_cb34.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb3c ]
  %v7_cb48 = icmp sgt i32 %v0_cb40, 6
  br i1 %v7_cb48, label %dec_label_pc_cb4c, label %dec_label_pc_cb14.backedge

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb14.backedge, %dec_label_pc_cb40, %dec_label_pc_cb14.preheader
  %v1_cb9c = phi i32 [ %v1_cb1c54, %dec_label_pc_cb14.preheader ], [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v0_cb1c78, %dec_label_pc_cb40 ]
  %v0_cb4c = phi i32 [ %v1_cafc, %dec_label_pc_cb14.preheader ], [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v2_cb4c = icmp eq i32 %v0_cb4c, 0
  br i1 %v2_cb4c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb58

dec_label_pc_cb58:                                ; preds = %dec_label_pc_cb4c
  %v2_cb60 = add i32 %v1_cb9c, %v2_ca8c
  %v1_cb64 = add i32 %v2_cb60, -545
  %v2_cb64 = inttoptr i32 %v1_cb64 to i8*
  %v3_cb64 = load i8, i8* %v2_cb64, align 1
  %v2_cb68 = icmp eq i8 %v3_cb64, 0
  br i1 %v2_cb68, label %dec_label_pc_cb98, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb58
  %v8_cb6c = icmp eq i8 %v3_cb64, 32
  br i1 %v8_cb6c, label %dec_label_pc_cb98, label %dec_label_pc_cb74

dec_label_pc_cb74:                                ; preds = %bb133
  %v2_cb74 = add i32 %v1_cb9c, %v1_cb00
  br label %dec_label_pc_cb78

dec_label_pc_cb78:                                ; preds = %bb134, %dec_label_pc_cb74
  %v0_cb8430 = phi i32 [ %v1_cb84, %bb134 ], [ %v1_cb9c, %dec_label_pc_cb74 ]
  %v0_cb78 = phi i32 [ %v1_cb78, %bb134 ], [ %v2_cb74, %dec_label_pc_cb74 ]
  %v1_cb78 = add i32 %v0_cb78, 1
  %v2_cb78 = inttoptr i32 %v1_cb78 to i8*
  %v3_cb78 = load i8, i8* %v2_cb78, align 1
  %v2_cb7c = icmp eq i8 %v3_cb78, 0
  br i1 %v2_cb7c, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cb78
  %v1_cb8431 = add i32 %v0_cb8430, 1
  br label %dec_label_pc_cb8c

bb134:                                            ; preds = %dec_label_pc_cb78
  %v8_cb80 = icmp eq i8 %v3_cb78, 32
  %v1_cb84 = add i32 %v0_cb8430, 1
  br i1 %v8_cb80, label %dec_label_pc_cb8c, label %dec_label_pc_cb78

dec_label_pc_cb8c:                                ; preds = %bb134, %.thread29
  %v1_cb94 = phi i32 [ %v1_cb8431, %.thread29 ], [ %v1_cb84, %bb134 ]
  %v2_cb94 = add i32 %v1_cb94, %v2_ca8c
  br label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb58, %bb133, %dec_label_pc_cb8c
  %v2_cba4 = phi i32 [ %v2_cb60, %dec_label_pc_cb58 ], [ %v2_cb60, %bb133 ], [ %v2_cb94, %dec_label_pc_cb8c ]
  %v2_cb9c = add i32 %v1_cb9c, %v1_cb00
  store i32 %v2_cb9c, i32* @r4, align 4
  %v3_cba4 = add i32 %v2_cba4, -545
  %v4_cba4 = inttoptr i32 %v3_cba4 to i8*
  store i8 0, i8* %v4_cba4, align 1
  %v1_cba8 = inttoptr i32 %v2_cb9c to i8*
  %v2_cba8 = call i32 @function_100a4(i8* %v1_cba8)
  %v8_cbb0 = icmp sgt i32 %v2_cba8, 15
  br i1 %v8_cbb0, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_cb98
  %v0_cbb8 = load i32, i32* @r4, align 4
  %v2_cbbc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbbc, i32* @r0, align 4
  %v2_cbc0 = bitcast i32* %stack_var_-56 to i8*
  %v3_cbc0 = call i32 @function_100cc(i8* %v2_cbc0, i32 %v0_cbb8)
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4.loopexit:                       ; preds = %dec_label_pc_ca2c.backedge, %dec_label_pc_ca2c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbc4.loopexit, %dec_label_pc_cbb4
  %v1_cbd4.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cbc4.loopexit ], [ %v2_cbc0, %dec_label_pc_cbb4 ]
  %v2_cbd0.pre-phi = phi i32 [ %.pre, %dec_label_pc_cbc4.loopexit ], [ %v2_cbbc, %dec_label_pc_cbb4 ]
  %v0_cbc4 = load i32, i32* @r8, align 4
  %v1_cbc8 = call i32 @function_10b64(i32 %v0_cbc4)
  %v2_cbd4 = call i32 @function_100a4(i8* %v1_cbd4.pre-phi)
  store i32 %v2_cbd4, i32* @r4, align 4
  %v2_cbd8 = icmp eq i32 %v2_cbd4, 0
  br i1 %v2_cbd8, label %dec_label_pc_ce80, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbc4
  %v3_cbe8 = call i32 @function_faa0(i32 13, i32* null)
  %v1_cbec = call i32 @function_10d60(i32 %v3_cbe8)
  store i32 %v1_cbec, i32* @sb, align 4
  %v2_cbf0 = icmp eq i32 %v1_cbec, 0
  br i1 %v2_cbf0, label %dec_label_pc_ce20, label %dec_label_pc_cc00.preheader

dec_label_pc_cc00.preheader:                      ; preds = %dec_label_pc_cbe0
  store i32 0, i32* @r5, align 4
  %v1_cc0443 = inttoptr i32 %v1_cbec to i32*
  %v2_cc0444 = call i32 @function_10ea4(i32* %v1_cc0443)
  %v2_cc0846 = icmp eq i32 %v2_cc0444, 0
  br i1 %v2_cc0846, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc00.loopexit:                       ; preds = %dec_label_pc_cc18, %dec_label_pc_cc28, %dec_label_pc_cc94
  %v0_cc00 = load i32, i32* @sb, align 4
  %v1_cc04 = inttoptr i32 %v0_cc00 to i32*
  %v2_cc04 = call i32 @function_10ea4(i32* %v1_cc04)
  %v2_cc08 = icmp eq i32 %v2_cc04, 0
  br i1 %v2_cc08, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc10.preheader:                      ; preds = %dec_label_pc_cc00.preheader, %dec_label_pc_cc00.loopexit
  %v0_cc1891 = phi i32 [ %v2_cc04, %dec_label_pc_cc00.loopexit ], [ %v2_cc0444, %dec_label_pc_cc00.preheader ]
  br label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cc10.preheader, %dec_label_pc_cdfc
  %v0_cc30 = phi i32 [ %v0_cc1891, %dec_label_pc_cc10.preheader ], [ %v2_ce08, %dec_label_pc_cdfc ]
  %v0_cc10 = load i32, i32* @r5, align 4
  %v2_cc10 = icmp eq i32 %v0_cc10, 0
  br i1 %v2_cc10, label %dec_label_pc_cc18, label %dec_label_pc_ce14

dec_label_pc_cc18:                                ; preds = %dec_label_pc_cc10
  %v1_cc18 = add i32 %v0_cc30, 11
  %v2_cc18 = inttoptr i32 %v1_cc18 to i8*
  %v3_cc18 = load i8, i8* %v2_cc18, align 1
  %v4_cc18 = zext i8 %v3_cc18 to i32
  %v1_cc1c = add nsw i32 %v4_cc18, -48
  %tmp = icmp ugt i32 %v1_cc1c, 9
  br i1 %tmp, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc28

dec_label_pc_cc28:                                ; preds = %dec_label_pc_cc18
  store i32 %v1_cc18, i32* @r7, align 4
  %v3_cc34 = call i32 @function_faa0(i32 13, i32* null)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cc40 = call i32 @function_100cc(i8* %v2_c9b8, i32 %v3_cc34)
  %v2_cc48 = call i32 @function_100a4(i8* %v2_c9b8)
  %v0_cc4c = load i32, i32* @r7, align 4
  %v1_cc50 = load i32, i32* @sl, align 4
  %v2_cc50 = add i32 %v1_cc50, %v2_cc48
  store i32 %v2_cc50, i32* @r0, align 4
  %v2_cc54 = inttoptr i32 %v2_cc50 to i8*
  %v3_cc54 = call i32 @function_100cc(i8* %v2_cc54, i32 %v0_cc4c)
  %v2_cc5c = call i32 @function_100a4(i8* %v2_c9b8)
  %v0_cc60 = load i32, i32* @r5, align 4
  store i32 %v2_cc5c, i32* @r4, align 4
  %v2_cc6c = inttoptr i32 %v0_cc60 to i32*
  %v3_cc6c = call i32 @function_faa0(i32 14, i32* %v2_cc6c)
  %v0_cc74 = load i32, i32* @r4, align 4
  %v1_cc74 = load i32, i32* @sl, align 4
  %v2_cc74 = add i32 %v1_cc74, %v0_cc74
  store i32 %v2_cc74, i32* @r0, align 4
  %v2_cc78 = inttoptr i32 %v2_cc74 to i8*
  %v3_cc78 = call i32 @function_100cc(i8* %v2_cc78, i32 %v3_cc6c)
  %v3_cc88 = call i32 @function_108c8(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cc8c = icmp eq i32 %v3_cc88, -1
  br i1 %v7_cc8c, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc28
  %v0_cc94 = load i32, i32* @r5, align 4
  %v2_cc9c = inttoptr i32 %v0_cc94 to i32*
  %v3_cc9c = call i32 @function_faa0(i32 13, i32* %v2_cc9c)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cca8 = call i32 @function_100cc(i8* %v2_c9b8, i32 %v3_cc9c)
  %v2_ccb0 = call i32 @function_100a4(i8* %v2_c9b8)
  %v0_ccb4 = load i32, i32* @r7, align 4
  %v1_ccb8 = load i32, i32* @sl, align 4
  %v2_ccb8 = add i32 %v1_ccb8, %v2_ccb0
  store i32 %v2_ccb8, i32* @r0, align 4
  %v2_ccbc = inttoptr i32 %v2_ccb8 to i8*
  %v3_ccbc = call i32 @function_100cc(i8* %v2_ccbc, i32 %v0_ccb4)
  %v2_ccc4 = call i32 @function_100a4(i8* %v2_c9b8)
  %v0_ccc8 = load i32, i32* @r5, align 4
  store i32 %v2_ccc4, i32* @r4, align 4
  %v2_ccd4 = inttoptr i32 %v0_ccc8 to i32*
  %v3_ccd4 = call i32 @function_faa0(i32 15, i32* %v2_ccd4)
  %v0_ccdc = load i32, i32* @r4, align 4
  %v1_ccdc = load i32, i32* @sl, align 4
  %v2_ccdc = add i32 %v1_ccdc, %v0_ccdc
  store i32 %v2_ccdc, i32* @r0, align 4
  %v2_cce0 = inttoptr i32 %v2_ccdc to i8*
  %v3_cce0 = call i32 @function_100cc(i8* %v2_cce0, i32 %v3_ccd4)
  %v1_cce8 = call i32 @function_10d60(i32 %v2_c994)
  store i32 %v1_cce8, i32* @r8, align 4
  %v2_ccec = icmp eq i32 %v1_cce8, 0
  br i1 %v2_ccec, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_ccf4.preheader

dec_label_pc_ccf4.preheader:                      ; preds = %dec_label_pc_cc94
  %v1_ccf838 = inttoptr i32 %v1_cce8 to i32*
  %v2_ccf839 = call i32 @function_10ea4(i32* %v1_ccf838)
  store i32 %v2_ccf839, i32* @r6, align 4
  %v2_ccfc41 = icmp eq i32 %v2_ccf839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc41, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_ccf4.loopexit:                       ; preds = %dec_label_pc_cd14, %dec_label_pc_cdac
  %v0_ccf4 = load i32, i32* @r8, align 4
  %v1_ccf8 = inttoptr i32 %v0_ccf4 to i32*
  %v2_ccf8 = call i32 @function_10ea4(i32* %v1_ccf8)
  store i32 %v2_ccf8, i32* @r6, align 4
  %v2_ccfc = icmp eq i32 %v2_ccf8, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_cd0cthread-pre-split:                ; preds = %dec_label_pc_ccf4.preheader, %dec_label_pc_ccf4.loopexit
  %v0_cd0c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cd0cthread-pre-split, %dec_label_pc_cdd4
  %v0_cd0c = phi i32 [ %v0_cd0c.pr, %dec_label_pc_cd0cthread-pre-split ], [ 1, %dec_label_pc_cdd4 ]
  %v2_cd0c = icmp eq i32 %v0_cd0c, 0
  br i1 %v2_cd0c, label %dec_label_pc_cd14, label %dec_label_pc_cdfc

dec_label_pc_cd14:                                ; preds = %dec_label_pc_cd0c
  %v0_cd14 = call i32 @function_10138()
  %v0_cd18 = load i32, i32* @r5, align 4
  %v2_cd20 = inttoptr i32 %v0_cd18 to i32*
  %v3_cd20 = call i32 @function_faa0(i32 13, i32* %v2_cd20)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cd2c = call i32 @function_100cc(i8* %v2_c9b8, i32 %v3_cd20)
  %v2_cd34 = call i32 @function_100a4(i8* %v2_c9b8)
  %v0_cd38 = load i32, i32* @r7, align 4
  %v1_cd3c = load i32, i32* @sl, align 4
  %v2_cd3c = add i32 %v1_cd3c, %v2_cd34
  store i32 %v2_cd3c, i32* @r0, align 4
  %v2_cd40 = inttoptr i32 %v2_cd3c to i8*
  %v3_cd40 = call i32 @function_100cc(i8* %v2_cd40, i32 %v0_cd38)
  %v2_cd48 = call i32 @function_100a4(i8* %v2_c9b8)
  %v0_cd4c = load i32, i32* @r5, align 4
  store i32 %v2_cd48, i32* @r4, align 4
  %v2_cd58 = inttoptr i32 %v0_cd4c to i32*
  %v3_cd58 = call i32 @function_faa0(i32 15, i32* %v2_cd58)
  %v0_cd60 = load i32, i32* @r4, align 4
  %v1_cd60 = load i32, i32* @sl, align 4
  %v2_cd60 = add i32 %v1_cd60, %v0_cd60
  store i32 %v2_cd60, i32* @r0, align 4
  %v2_cd64 = inttoptr i32 %v2_cd60 to i8*
  %v3_cd64 = call i32 @function_100cc(i8* %v2_cd64, i32 %v3_cd58)
  %v2_cd6c = call i32 @function_100a4(i8* %v2_c9b8)
  %v1_cd74 = load i32, i32* @sl, align 4
  %v2_cd74 = add i32 %v1_cd74, %v2_cd6c
  store i32 %v2_cd74, i32* @r0, align 4
  %v2_cd78 = inttoptr i32 %v2_cd74 to i8*
  %v3_cd78 = call i32 @function_100cc(i8* %v2_cd78, i32 ptrtoint (i32* @global_var_15ecc.57 to i32))
  %v2_cd80 = call i32 @function_100a4(i8* %v2_c9b8)
  %v0_cd84 = load i32, i32* @r6, align 4
  %v1_cd84 = add i32 %v0_cd84, 11
  %v1_cd88 = load i32, i32* @sl, align 4
  %v2_cd88 = add i32 %v1_cd88, %v2_cd80
  store i32 %v2_cd88, i32* @r0, align 4
  %v2_cd8c = inttoptr i32 %v2_cd88 to i8*
  %v3_cd8c = call i32 @function_100cc(i8* %v2_cd8c, i32 %v1_cd84)
  %v3_cd9c = call i32 @function_108c8(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cda0 = icmp eq i32 %v3_cd9c, -1
  br i1 %v7_cda0, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdac

dec_label_pc_cdac:                                ; preds = %dec_label_pc_cd14
  %v2_cdac = call i32 @function_100a4(i8* %v2_c9a4)
  store i32 %v2_cdac, i32* @r1, align 4
  %v4_cdc0 = call i32 @function_103f4(i8* %v2_c9a4, i32 %v2_cdac, i32 %v2_cbd0.pre-phi)
  %v7_cdc4 = icmp eq i32 %v4_cdc0, -1
  br i1 %v7_cdc4, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdac
  %v0_cdcc = load i32, i32* @r7, align 4
  %v2_cdd4 = inttoptr i32 %v0_cdcc to i8*
  %v3_cdd4 = call i32 @function_101c8(i8* %v2_cdd4, i32 10)
  %v2_cddc = call i32 @function_10930(i32 %v3_cdd4, i32 9)
  %v0_cde0 = load i32, i32* @r8, align 4
  %v1_cde4 = inttoptr i32 %v0_cde0 to i32*
  %v2_cde4 = call i32 @function_10ea4(i32* %v1_cde4)
  store i32 %v2_cde4, i32* @r6, align 4
  %v2_cde8 = icmp eq i32 %v2_cde4, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_cde8, label %dec_label_pc_cdfc, label %dec_label_pc_cd0c

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_ccf4.loopexit, %dec_label_pc_cdd4, %dec_label_pc_cd0c, %dec_label_pc_ccf4.preheader
  %v0_cdfc = load i32, i32* @r8, align 4
  %v1_ce00 = inttoptr i32 %v0_cdfc to i32*
  %v2_ce00 = call i32 @function_10b98(i32* %v1_ce00)
  %v0_ce04 = load i32, i32* @sb, align 4
  %v1_ce08 = inttoptr i32 %v0_ce04 to i32*
  %v2_ce08 = call i32 @function_10ea4(i32* %v1_ce08)
  %v2_ce0c = icmp eq i32 %v2_ce08, 0
  br i1 %v2_ce0c, label %dec_label_pc_ce14, label %dec_label_pc_cc10

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cc00.loopexit, %dec_label_pc_cdfc, %dec_label_pc_cc10, %dec_label_pc_cc00.preheader
  %v0_ce14 = load i32, i32* @sb, align 4
  %v1_ce18 = inttoptr i32 %v0_ce14 to i32*
  %v2_ce18 = call i32 @function_10b98(i32* %v1_ce18)
  %v0_ce1c = load i32, i32* @r5, align 4
  %v1_ce1c = urem i32 %v0_ce1c, 256
  br label %dec_label_pc_ce20

dec_label_pc_ce20:                                ; preds = %dec_label_pc_cbe0, %dec_label_pc_ce14
  %storemerge = phi i32 [ %v1_ce1c, %dec_label_pc_ce14 ], [ 0, %dec_label_pc_cbe0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce24 = call i32 @function_12c48(i32 1)
  %v1_ce2c = call i32 @function_fac4(i32 13)
  %v1_ce34 = call i32 @function_fac4(i32 14)
  %v1_ce3c = call i32 @function_fac4(i32 15)
  br label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %bb, %dec_label_pc_ce80, %dec_label_pc_ce20
  %v0_ce40 = load i32, i32* @r4, align 4
  store i32 %v3_c93c, i32* @r4, align 4
  store i32 %v6_c93c, i32* @r5, align 4
  store i32 %v9_c93c, i32* @r6, align 4
  store i32 %v12_c93c, i32* @r7, align 4
  store i32 %v15_c93c, i32* @r8, align 4
  store i32 %v18_c93c, i32* @sb, align 4
  store i32 %v21_c93c, i32* @sl, align 4
  store i32 %v24_c93c, i32* @fp, align 4
  store i32 %v27_c93c, i32* @lr, align 4
  ret i32 %v0_ce40

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cb34
  %v1_ce54 = add i32 %v0_ce54, 1
  %v7_ce58 = icmp eq i32 %v0_ce54, 0
  br i1 %v7_ce58, label %dec_label_pc_ce60, label %dec_label_pc_cb3c

dec_label_pc_ce60:                                ; preds = %dec_label_pc_ce54
  %v1_ce60 = add i32 %v0_cb44, 3
  %v2_ce60 = inttoptr i32 %v1_ce60 to i8*
  %v3_ce60 = load i8, i8* %v2_ce60, align 1
  %v7_ce64 = icmp eq i8 %v3_ce60, 65
  br i1 %v7_ce64, label %dec_label_pc_ce78, label %dec_label_pc_ce6c

dec_label_pc_ce6c:                                ; preds = %dec_label_pc_ce60, %dec_label_pc_ce78
  %v0_cb4c82 = phi i32 [ %v0_cb4c83, %dec_label_pc_ce60 ], [ 1, %dec_label_pc_ce78 ]
  br label %dec_label_pc_cb14.backedge

dec_label_pc_cb14.backedge:                       ; preds = %dec_label_pc_ce6c, %dec_label_pc_cb40
  %v0_cb4c81 = phi i32 [ %v0_cb4c82, %dec_label_pc_ce6c ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v0_ce5473 = phi i32 [ %v1_ce54, %dec_label_pc_ce6c ], [ %v0_cb40, %dec_label_pc_cb40 ]
  %v0_cb34.pr70 = phi i32 [ 0, %dec_label_pc_ce6c ], [ %v0_cb34.pr71, %dec_label_pc_cb40 ]
  %v0_cb14 = add i32 %v0_cb44, 1
  %v1_cb14 = add i32 %v0_cb44, 3
  %v2_cb14 = inttoptr i32 %v1_cb14 to i8*
  %v3_cb14 = load i8, i8* %v2_cb14, align 1
  %v2_cb18 = icmp eq i8 %v3_cb14, 0
  %v1_cb1c = add i32 %v0_cb1c78, 1
  br i1 %v2_cb18, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_ce78:                                ; preds = %dec_label_pc_ce60
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ce6c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cbc4
  %v1_ce84 = call i32 @function_fac4(i32 13)
  %v1_ce8c = call i32 @function_fac4(i32 14)
  %v1_ce94 = call i32 @function_fac4(i32 15)
  %v1_ce9c = call i32 @function_fac4(i32 17)
  br label %dec_label_pc_ce40

dec_label_pc_cea4:                                ; preds = %dec_label_pc_c93c
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_c9e8

; uselistorder directives
  uselistorder i32 %v1_cb1c, { 1, 0 }
  uselistorder i8 %v3_cb14, { 1, 0 }
  uselistorder i32 %v0_cb4c81, { 1, 0 }
  uselistorder i32 %v1_ce54, { 1, 0 }
  uselistorder i32 %v2_ce08, { 1, 0 }
  uselistorder i32 %v1_cb78, { 1, 0 }
  uselistorder i32 %v0_cb8430, { 1, 0 }
  uselistorder i32 %v1_cb9c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb40, { 1, 0 }
  uselistorder i32 %v0_cb1c78, { 1, 0 }
  uselistorder i32 %v0_ce54, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb4c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb1c54, { 1, 0 }
  uselistorder i32 %v2_cb00, { 1, 0 }
  uselistorder i32 %v1_cafc, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cabc, { 0, 2, 1 }
  uselistorder i32 %v0_cabc16, { 1, 0 }
  uselistorder i32 %v1_ca88, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca18, { 1, 2, 0 }
  uselistorder i32 %v0_c9c0, { 1, 0 }
  uselistorder i32 %v2_c9bc, { 1, 0, 2 }
  uselistorder i8* %v2_c9a4, { 1, 0, 2 }
  uselistorder i32 %v2_c984, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10304, { 1, 0 }
  uselistorder label %dec_label_pc_ce6c, { 1, 0 }
  uselistorder label %dec_label_pc_ce40, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce20, { 1, 0 }
  uselistorder label %dec_label_pc_ce14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cdfc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd0c, { 1, 0 }
  uselistorder label %dec_label_pc_cd0cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_ccf4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc10, { 1, 0 }
  uselistorder label %dec_label_pc_cc10.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc00.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb98, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb24, { 1, 0 }
  uselistorder label %dec_label_pc_cac8, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca2c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ca7c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca44, { 1, 0 }
  uselistorder label %dec_label_pc_c9e8, { 1, 0 }
}

define i32 @function_ced0(i32 %arg1) local_unnamed_addr {
dec_label_pc_ced0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8384 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %v3_ced0 = load i32, i32* @r4, align 4
  %v6_ced0 = load i32, i32* @r5, align 4
  %v9_ced0 = load i32, i32* @r6, align 4
  %v12_ced0 = load i32, i32* @r7, align 4
  %v15_ced0 = load i32, i32* @r8, align 4
  %v18_ced0 = load i32, i32* @sb, align 4
  %v21_ced0 = load i32, i32* @sl, align 4
  %v24_ced0 = load i32, i32* @fp, align 4
  %v27_ced0 = load i32, i32* @lr, align 4
  %v2_cee0 = call i32 @function_107e4(i32* null)
  store i32 %v2_cee0, i32* @r0, align 4
  store i32 %v2_cee0, i32* @r7, align 4
  %v0_cee8 = call i32 @function_10854()
  %v7_ceec = icmp eq i32 %v0_cee8, -1
  %. = zext i1 %v7_ceec to i32
  %tmp125 = icmp slt i32 %v0_cee8, 1
  %storemerge96 = select i1 %tmp125, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_20788.59 to i32), i32* %r3.global-to-local, align 4
  %v2_cf08 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cee8, i32* @global_var_20788.59, align 4
  br i1 %v2_cf08, label %dec_label_pc_cf24, label %dec_label_pc_cf14

dec_label_pc_cf14:                                ; preds = %dec_label_pc_d044, %dec_label_pc_cf24, %dec_label_pc_ced0
  %v1_cf20 = phi i32 [ %v2_cfdc, %dec_label_pc_cf24 ], [ %v0_cee8, %dec_label_pc_ced0 ], [ 0, %dec_label_pc_d044 ]
  store i32 %v3_ced0, i32* @r4, align 4
  store i32 %v6_ced0, i32* @r5, align 4
  store i32 %v9_ced0, i32* @r6, align 4
  store i32 %v12_ced0, i32* @r7, align 4
  store i32 %v15_ced0, i32* @r8, align 4
  store i32 %v18_ced0, i32* @sb, align 4
  store i32 %v21_ced0, i32* @sl, align 4
  store i32 %v24_ced0, i32* @fp, align 4
  store i32 %v27_ced0, i32* @lr, align 4
  ret i32 %v1_cf20

dec_label_pc_cf24:                                ; preds = %dec_label_pc_ced0
  %v1_cf28 = call i32 @function_12c48(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_cf30 = call i32 @function_11584()
  store i32 ptrtoint (i32* @global_var_1e6fc.61 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_cf30, i32* %r2.global-to-local, align 4
  %v0_cf40 = load i32, i32* @r5, align 4
  %v1_cf40 = trunc i32 %v0_cf40 to i8
  %v3_cf40 = inttoptr i32 %v0_cf30 to i8*
  store i8 %v1_cf40, i8* %v3_cf40, align 1
  %v0_cf48 = load i32, i32* @r5, align 4
  %v1_cf48 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf48 = inttoptr i32 %v1_cf48 to i32*
  store i32 %v0_cf48, i32* %v2_cf48, align 4
  %v0_cf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf4c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf4c = inttoptr i32 %v1_cf4c to i32*
  store i32 %v0_cf4c, i32* %v2_cf4c, align 4
  %v1_cf50 = call i32 @function_fb64(i32 13)
  %v1_cf58 = call i32 @function_fb64(i32 14)
  %v2_cf60 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v0_cf64 = load i32, i32* @r5, align 4
  store i32 %v0_cf64, i32* %r1.global-to-local, align 4
  %v2_cf70 = inttoptr i32 %v0_cf64 to i32*
  %v3_cf70 = call i32 @function_faa0(i32 13, i32* %v2_cf70)
  %v1_cf78 = add i32 %v2_cf60, -24
  store i32 %v1_cf78, i32* %r3.global-to-local, align 4
  store i32 %v3_cf70, i32* %r1.global-to-local, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v2_cf88 = inttoptr i32 %v1_cf78 to i8*
  %v3_cf88 = call i32 @function_100cc(i8* %v2_cf88, i32 %v3_cf70)
  store i32 %v3_cf88, i32* @r0, align 4
  store i32 %v1_cf78, i32* %r1.global-to-local, align 4
  %v2_cf90 = add i32 %v3_cf88, %v1_cf78
  store i32 %v2_cf90, i32* @r4, align 4
  %v0_cf94 = call i32 @function_107d0()
  %v2_cf9c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cf9c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfa4 = trunc i32 %v0_cf94 to i8
  %v4_cfa4 = call i32 @function_10504(i8 %v3_cfa4, i32 10, i32 %v2_cf9c)
  store i32 %v4_cfa4, i32* %r1.global-to-local, align 4
  %v0_cfac = load i32, i32* @r4, align 4
  store i32 %v0_cfac, i32* @r0, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfac to i8*
  %v3_cfb0 = call i32 @function_100cc(i8* %v2_cfb0, i32 %v4_cfa4)
  %v0_cfb4 = load i32, i32* @r5, align 4
  store i32 %v0_cfb4, i32* %r1.global-to-local, align 4
  %v1_cfb8 = load i32, i32* @r4, align 4
  %v2_cfb8 = add i32 %v1_cfb8, %v3_cfb0
  store i32 %v2_cfb8, i32* @r4, align 4
  %v2_cfc0 = inttoptr i32 %v0_cfb4 to i32*
  %v3_cfc0 = call i32 @function_faa0(i32 14, i32* %v2_cfc0)
  store i32 %v3_cfc0, i32* %r1.global-to-local, align 4
  %v0_cfc8 = load i32, i32* @r4, align 4
  store i32 %v0_cfc8, i32* @r0, align 4
  %v2_cfcc = inttoptr i32 %v0_cfc8 to i8*
  %v3_cfcc = call i32 @function_100cc(i8* %v2_cfcc, i32 %v3_cfc0)
  %v0_cfd0 = load i32, i32* @r5, align 4
  store i32 %v0_cfd0, i32* %r1.global-to-local, align 4
  store i32 %v3_cfcc, i32* @r6, align 4
  %v2_cfdc = call i32 @function_10770(i32 %v1_cf78, i32 %v0_cfd0)
  %v7_cfe0 = icmp eq i32 %v2_cfdc, -1
  br i1 %v7_cfe0, label %dec_label_pc_cf14, label %dec_label_pc_cfe8

dec_label_pc_cfe8:                                ; preds = %dec_label_pc_cf24
  %v1_cfe8 = call i32 @function_10b64(i32 %v2_cfdc)
  %v1_cff0 = call i32 @function_fac4(i32 13)
  %v1_cff8 = call i32 @function_fac4(i32 14)
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* %r3.global-to-local, align 4
  %v2_d004 = load i32, i32* @global_var_20784.63, align 4
  store i32 %v2_d004, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d010 = call i32 @function_108c8(i32 %v1_cf78, i32 %v2_d004, i32 4095)
  %v7_d014 = icmp eq i32 %v3_d010, -1
  br i1 %v7_d014, label %.thread9, label %bb128

bb128:                                            ; preds = %dec_label_pc_cfe8
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* %r1.global-to-local, align 4
  %v3_d01c = load i32, i32* @global_var_20784.63, align 4
  store i32 %v3_d01c, i32* %r3.global-to-local, align 4
  %v1_d020 = load i32, i32* @r5, align 4
  %v2_d020 = trunc i32 %v1_d020 to i8
  %v5_d020 = add i32 %v3_d01c, %v3_d010
  %v6_d020 = inttoptr i32 %v5_d020 to i8*
  store i8 %v2_d020, i8* %v6_d020, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_cfe8, %bb128
  store i32 %v1_cf78, i32* %r2.global-to-local, align 4
  %v0_d028 = load i32, i32* @r6, align 4
  %v1_d028 = load i32, i32* @r4, align 4
  %v1_cf78.neg = sub i32 24, %v2_cf60
  %v2_d028 = add i32 %v1_cf78.neg, %v0_d028
  %v2_d02c = add i32 %v2_d028, %v1_d028
  store i32 %v2_d02c, i32* @r1, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v0_d034 = call i32 @function_10138()
  %v0_d038 = load i32, i32* @r7, align 4
  store i32 %v0_d038, i32* @r4, align 4
  %v0_d03c = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d1a0 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d1ac = bitcast i32* %stack_var_-128 to i8*
  %v2_d1f0 = ptrtoint i32* %stack_var_-192 to i32
  %v2_d1f4 = bitcast i32* %stack_var_-192 to i8*
  %v2_d340 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d354 = ptrtoint i32* %stack_var_-48 to i32
  %v2_d368 = ptrtoint i32* %stack_var_-8384 to i32
  %v2_d384 = ptrtoint i32* %stack_var_-208 to i32
  br label %dec_label_pc_d044

dec_label_pc_d044:                                ; preds = %dec_label_pc_d168, %.thread9
  %stack_var_-8388.0 = phi i32 [ %v0_d03c, %.thread9 ], [ %stack_var_-8388.3, %dec_label_pc_d168 ]
  %v1_d048 = call i32 @function_fb64(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d054 = call i32 @function_faa0(i32 13, i32* null)
  %v1_d058 = call i32 @function_10d60(i32 %v3_d054)
  store i32 %v1_d058, i32* @sb, align 4
  %v2_d05c = icmp eq i32 %v1_d058, 0
  br i1 %v2_d05c, label %dec_label_pc_cf14, label %dec_label_pc_d064

dec_label_pc_d064:                                ; preds = %dec_label_pc_d044
  %v1_d068 = call i32 @function_fac4(i32 13)
  %v1_d074 = call i32 @function_c93c(i32 58811)
  %v1_d080 = call i32 @function_c93c(i32 50951)
  %v1_d08c = call i32 @function_c93c(i32 14853)
  %v1_d094 = call i32 @function_c93c(i32 20480)
  %v1_d0a0 = call i32 @function_c93c(i32 47873)
  %v1_d0ac = call i32 @function_c93c(i32 57616)
  %v1_d0b8 = call i32 @function_c93c(i32 2842)
  %v1_d0c4 = call i32 @function_c93c(i32 10522)
  %v0_d0c860 = load i32, i32* @sb, align 4
  %v1_d0cc61 = inttoptr i32 %v0_d0c860 to i32*
  %v2_d0cc62 = call i32 @function_10ea4(i32* %v1_d0cc61)
  %v2_d0d064 = icmp eq i32 %v2_d0cc62, 0
  br i1 %v2_d0d064, label %dec_label_pc_d168, label %dec_label_pc_d0d8.preheader

dec_label_pc_d0d8.preheader:                      ; preds = %dec_label_pc_d064, %dec_label_pc_d0c8.backedge
  %v0_d0d872 = phi i32 [ %v2_d0cc, %dec_label_pc_d0c8.backedge ], [ %v2_d0cc62, %dec_label_pc_d064 ]
  %stack_var_-8388.165 = phi i32 [ %stack_var_-8388.1.be, %dec_label_pc_d0c8.backedge ], [ %stack_var_-8388.0, %dec_label_pc_d064 ]
  br label %dec_label_pc_d0d8

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_d0d8.preheader, %dec_label_pc_d150
  %v0_d0e8 = phi i32 [ %v2_d15c, %dec_label_pc_d150 ], [ %v0_d0d872, %dec_label_pc_d0d8.preheader ]
  %stack_var_-8388.2 = phi i32 [ %v1_d0fc, %dec_label_pc_d150 ], [ %stack_var_-8388.165, %dec_label_pc_d0d8.preheader ]
  %v1_d0d8 = add i32 %v0_d0e8, 11
  %v2_d0d8 = inttoptr i32 %v1_d0d8 to i8*
  %v3_d0d8 = load i8, i8* %v2_d0d8, align 1
  %v4_d0d8 = zext i8 %v3_d0d8 to i32
  %v1_d0dc = add nsw i32 %v4_d0d8, -48
  store i32 %v1_d0dc, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d0dc, 9
  br i1 %tmp, label %dec_label_pc_d0c8.backedge, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0d8
  store i32 %v1_d0d8, i32* @r6, align 4
  store i32 %v1_d0d8, i32* @r0, align 4
  %v1_d0f0 = call i32 @function_12994(i32 %v1_d0d8)
  %v0_d0f8 = load i32, i32* @r5, align 4
  %v1_d0fc = add i32 %stack_var_-8388.2, 1
  store i32 %v1_d0fc, i32* %r3.global-to-local, align 4
  store i32 %v1_d0f0, i32* @r8, align 4
  %v5_d108 = icmp slt i32 %v0_d0f8, %v1_d0f0
  %v2_d178 = call i32 @function_107e4(i32* null)
  br i1 %v5_d108, label %dec_label_pc_d174, label %dec_label_pc_d10c

dec_label_pc_d10c:                                ; preds = %dec_label_pc_d0e8
  %v0_d114 = load i32, i32* @r4, align 4
  %v2_d114 = sub i32 %v2_d178, %v0_d114
  %v7_d11c = icmp slt i32 %v2_d114, 601
  br i1 %v7_d11c, label %dec_label_pc_d124, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d10c
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d0c8.backedge

dec_label_pc_d124:                                ; preds = %dec_label_pc_d10c
  %v0_d124 = load i32, i32* @r8, align 4
  %v7_d128 = icmp slt i32 %v0_d124, 401
  br i1 %v7_d128, label %dec_label_pc_d0c8.backedge, label %dec_label_pc_d12c

dec_label_pc_d12c:                                ; preds = %dec_label_pc_d124
  %v3_d134 = zext i32 %v1_d0fc to i64
  %v4_d134 = mul nuw i64 %v3_d134, 3435973837
  %v7_d134 = trunc i64 %v4_d134 to i32
  store i32 %v7_d134, i32* %r1.global-to-local, align 4
  %v3_d1381 = udiv i64 %v4_d134, 34359738368
  %v3_d13c3 = mul nuw nsw i64 %v3_d1381, 8
  %v3_d13c = trunc i64 %v3_d13c3 to i32
  store i32 %v3_d13c, i32* %r3.global-to-local, align 4
  %v2_d1405 = mul nuw nsw i64 %v3_d1381, 2
  %v2_d140 = trunc i64 %v2_d1405 to i32
  %v2_d144 = add i32 %v3_d13c, %v2_d140
  store i32 %v2_d144, i32* %r2.global-to-local, align 4
  %v9_d148 = icmp eq i32 %v1_d0fc, %v2_d144
  br i1 %v9_d148, label %dec_label_pc_d150, label %dec_label_pc_d0c8.backedge

dec_label_pc_d150:                                ; preds = %dec_label_pc_d12c
  %v1_d154 = call i32 @function_12c48(i32 1)
  %v0_d158 = load i32, i32* @sb, align 4
  %v1_d15c = inttoptr i32 %v0_d158 to i32*
  %v2_d15c = call i32 @function_10ea4(i32* %v1_d15c)
  %v2_d160 = icmp eq i32 %v2_d15c, 0
  br i1 %v2_d160, label %dec_label_pc_d168, label %dec_label_pc_d0d8

dec_label_pc_d168:                                ; preds = %dec_label_pc_d0c8.backedge, %dec_label_pc_d150, %dec_label_pc_d064
  %stack_var_-8388.3 = phi i32 [ %stack_var_-8388.0, %dec_label_pc_d064 ], [ %v1_d0fc, %dec_label_pc_d150 ], [ %stack_var_-8388.1.be, %dec_label_pc_d0c8.backedge ]
  %v0_d168 = load i32, i32* @sb, align 4
  %v1_d16c = inttoptr i32 %v0_d168 to i32*
  %v2_d16c = call i32 @function_10b98(i32* %v1_d16c)
  br label %dec_label_pc_d044

dec_label_pc_d174:                                ; preds = %dec_label_pc_d0e8
  %v1_d184 = call i32 @function_fb64(i32 13)
  %v1_d18c = call i32 @function_fb64(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d198 = call i32 @function_faa0(i32 13, i32* null)
  store i32 %v2_d1a0, i32* @fp, align 4
  store i32 %v3_d198, i32* %r1.global-to-local, align 4
  store i32 %v2_d1a0, i32* @r0, align 4
  %v3_d1ac = call i32 @function_100cc(i8* %v2_d1ac, i32 %v3_d198)
  %v1_d1b0 = load i32, i32* @fp, align 4
  %v2_d1b0 = add i32 %v1_d1b0, %v3_d1ac
  store i32 %v2_d1b0, i32* %r5.global-to-local, align 4
  %v0_d1b4 = load i32, i32* @r6, align 4
  store i32 %v0_d1b4, i32* %r1.global-to-local, align 4
  store i32 %v2_d1b0, i32* @r0, align 4
  %v2_d1bc = inttoptr i32 %v2_d1b0 to i8*
  %v3_d1bc = call i32 @function_100cc(i8* %v2_d1bc, i32 %v0_d1b4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1cc = call i32 @function_faa0(i32 14, i32* null)
  store i32 %v3_d1cc, i32* %r1.global-to-local, align 4
  %v1_d1d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_d1d4 = add i32 %v1_d1d4, %v3_d1bc
  store i32 %v2_d1d4, i32* @r0, align 4
  %v2_d1d8 = inttoptr i32 %v2_d1d4 to i8*
  %v3_d1d8 = call i32 @function_100cc(i8* %v2_d1d8, i32 %v3_d1cc)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1e4 = call i32 @function_faa0(i32 13, i32* null)
  store i32 %v3_d1e4, i32* %r1.global-to-local, align 4
  store i32 %v2_d1f0, i32* @r0, align 4
  %v3_d1f4 = call i32 @function_100cc(i8* %v2_d1f4, i32 %v3_d1e4)
  store i32 %v2_d1f0, i32* %r2.global-to-local, align 4
  %v2_d200 = add i32 %v3_d1f4, %v2_d1f0
  store i32 %v2_d200, i32* @r5, align 4
  %v0_d204 = load i32, i32* @r6, align 4
  store i32 %v0_d204, i32* %r1.global-to-local, align 4
  store i32 %v2_d200, i32* @r0, align 4
  %v2_d20c = inttoptr i32 %v2_d200 to i8*
  %v3_d20c = call i32 @function_100cc(i8* %v2_d20c, i32 %v0_d204)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d20c, i32* @r4, align 4
  %v3_d21c = call i32 @function_faa0(i32 29, i32* null)
  store i32 %v3_d21c, i32* %r1.global-to-local, align 4
  %v0_d224 = load i32, i32* @r4, align 4
  %v1_d224 = load i32, i32* @r5, align 4
  %v2_d224 = add i32 %v1_d224, %v0_d224
  store i32 %v2_d224, i32* @r0, align 4
  %v2_d228 = inttoptr i32 %v2_d224 to i8*
  %v3_d228 = call i32 @function_100cc(i8* %v2_d228, i32 %v3_d21c)
  %v1_d230 = call i32 @function_fac4(i32 13)
  %v1_d238 = call i32 @function_fac4(i32 14)
  store i32 %v1_cf78, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d24c = call i32 @function_108c8(i32 %v2_d1a0, i32 %v1_cf78, i32 4095)
  %v7_d250 = icmp eq i32 %v3_d24c, -1
  store i32 %v3_d24c, i32* @r5, align 4
  br i1 %v7_d250, label %dec_label_pc_d314, label %dec_label_pc_d25c

dec_label_pc_d25c:                                ; preds = %dec_label_pc_d174
  store i32 %v1_cf78, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d264 = add i32 %v3_d24c, %v1_cf78
  %v5_d264 = inttoptr i32 %v4_d264 to i8*
  store i8 0, i8* %v5_d264, align 1
  %v1_d26c = call i32 @function_fb64(i32 30)
  %v0_d270 = load i32, i32* @r4, align 4
  store i32 %v0_d270, i32* %r1.global-to-local, align 4
  %v2_d278 = inttoptr i32 %v0_d270 to i32*
  %v3_d278 = call i32 @function_faa0(i32 30, i32* %v2_d278)
  %v0_d27c = load i32, i32* @r5, align 4
  %v1_d27c = add i32 %v0_d27c, -1
  store i32 %v1_d27c, i32* @r1, align 4
  store i32 %v3_d278, i32* %r2.global-to-local, align 4
  %v4_d288 = call i32 @function_103f4(i8* %v2_cf88, i32 %v1_d27c, i32 %v3_d278)
  %v7_d28c = icmp eq i32 %v4_d288, -1
  br i1 %v7_d28c, label %dec_label_pc_d2a8, label %dec_label_pc_d294

dec_label_pc_d294:                                ; preds = %dec_label_pc_d25c
  %v1_d298 = call i32 @function_1073c(i32 %v1_cf78)
  %v0_d29c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d2a4 = call i32 @function_10930(i32 %v0_d29c, i32 9)
  br label %dec_label_pc_d2a8

dec_label_pc_d2a8:                                ; preds = %dec_label_pc_d25c, %dec_label_pc_d294
  %v1_d2ac = call i32 @function_fac4(i32 30)
  store i32 %v1_d2ac, i32* @r0, align 4
  %v0_d2b0 = call i32 @function_107d0()
  store i32 %v0_d2b0, i32* @r0, align 4
  %v1_d2b4 = load i32, i32* @r8, align 4
  %v9_d2b4 = icmp eq i32 %v0_d2b0, %v1_d2b4
  br i1 %v9_d2b4, label %dec_label_pc_d2e0, label %dec_label_pc_d2bc

dec_label_pc_d2bc:                                ; preds = %dec_label_pc_d2a8
  %v0_d2bc = call i32 @function_10728()
  %v1_d2c0 = load i32, i32* @r8, align 4
  %v9_d2c0 = icmp eq i32 %v0_d2bc, %v1_d2c0
  br i1 %v9_d2c0, label %dec_label_pc_d2e0, label %dec_label_pc_d2c8

dec_label_pc_d2c8:                                ; preds = %dec_label_pc_d2bc
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* %r2.global-to-local, align 4
  %v2_d2d0 = load i32, i32* @global_var_20784.63, align 4
  store i32 %v2_d2d0, i32* %r1.global-to-local, align 4
  %v4_d2d4 = call i32 @function_10484(i8* %v2_cf88, i32 %v2_d2d0, i32 ptrtoint (i32* @global_var_20784.63 to i32))
  %v2_d2d8 = icmp eq i32 %v4_d2d4, 0
  br i1 %v2_d2d8, label %dec_label_pc_d2ec, label %dec_label_pc_d2c8.dec_label_pc_d2e0_crit_edge

dec_label_pc_d2c8.dec_label_pc_d2e0_crit_edge:    ; preds = %dec_label_pc_d2c8
  %v0_d2e4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d2e0

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d2c8.dec_label_pc_d2e0_crit_edge, %dec_label_pc_d2bc, %dec_label_pc_d2a8
  %v0_d2e4 = phi i32 [ %v0_d2e4.pre, %dec_label_pc_d2c8.dec_label_pc_d2e0_crit_edge ], [ %v0_d2bc, %dec_label_pc_d2bc ], [ %v0_d2b0, %dec_label_pc_d2a8 ]
  store i32 %v2_d178, i32* @r4, align 4
  store i32 %v0_d2e4, i32* @r5, align 4
  br label %dec_label_pc_d0c8.backedge

dec_label_pc_d0c8.backedge:                       ; preds = %dec_label_pc_d12c, %dec_label_pc_d124, %dec_label_pc_d0d8, %dec_label_pc_d2e0, %dec_label_pc_d440, %.thread10
  %stack_var_-8388.1.be = phi i32 [ %v1_d0fc, %dec_label_pc_d440 ], [ %v1_d0fc, %dec_label_pc_d2e0 ], [ %v1_d0fc, %.thread10 ], [ %stack_var_-8388.2, %dec_label_pc_d0d8 ], [ %v1_d0fc, %dec_label_pc_d124 ], [ %v1_d0fc, %dec_label_pc_d12c ]
  %v0_d0c8 = load i32, i32* @sb, align 4
  %v1_d0cc = inttoptr i32 %v0_d0c8 to i32*
  %v2_d0cc = call i32 @function_10ea4(i32* %v1_d0cc)
  %v2_d0d0 = icmp eq i32 %v2_d0cc, 0
  br i1 %v2_d0d0, label %dec_label_pc_d168, label %dec_label_pc_d0d8.preheader

dec_label_pc_d2ec:                                ; preds = %dec_label_pc_d2c8
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d2f4 = call i32 @function_10770(i32 %v1_cf78, i32 0)
  %v7_d2f8 = icmp eq i32 %v2_d2f4, -1
  store i32 %v2_d2f4, i32* @r4, align 4
  br i1 %v7_d2f8, label %bb129, label %.thread12

bb129:                                            ; preds = %dec_label_pc_d2ec
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d2ec, %bb129
  store i32 ptrtoint (i32* @global_var_d30c.66 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d2f8, i32 ptrtoint (i32* @global_var_10930.65 to i32))
  %v0_d30c = load i32, i32* @r4, align 4
  %v1_d310 = call i32 @function_10b64(i32 %v0_d30c)
  br label %dec_label_pc_d314

dec_label_pc_d314:                                ; preds = %dec_label_pc_d174, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d31c = call i32 @function_10770(i32 %v2_d1a0, i32 0)
  %v7_d320 = icmp eq i32 %v2_d31c, -1
  store i32 %v2_d31c, i32* @sl, align 4
  br i1 %v7_d320, label %dec_label_pc_d440, label %dec_label_pc_d32c

dec_label_pc_d32c:                                ; preds = %dec_label_pc_d314
  %v1_d330 = call i32 @function_fb64(i32 18)
  %v1_d338 = call i32 @function_fb64(i32 19)
  store i32 %v2_d340, i32* %r1.global-to-local, align 4
  %v3_d348 = call i32 @function_faa0(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v3_d348, i32* @r6, align 4
  store i32 %v2_d354, i32* %r1.global-to-local, align 4
  %v3_d35c = call i32 @function_faa0(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d35c, i32* @r7, align 4
  store i32 %v2_d368, i32* @r4, align 4
  %v0_d36c56 = load i32, i32* @sl, align 4
  store i32 %v2_d368, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d37857 = call i32 @function_108fc(i32 %v0_d36c56)
  %tmp130 = icmp slt i32 %v1_d37857, 1
  br i1 %tmp130, label %dec_label_pc_d470, label %dec_label_pc_d384

dec_label_pc_d384:                                ; preds = %dec_label_pc_d32c, %dec_label_pc_d36c.backedge
  %v0_d3b847 = phi i32 [ %v1_d378, %dec_label_pc_d36c.backedge ], [ %v1_d37857, %dec_label_pc_d32c ]
  store i32 %v2_d384, i32* %r3.global-to-local, align 4
  %v3_d388 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d388, i32* @r5, align 4
  %v5_d390 = icmp slt i32 %v0_d3b847, %v3_d388
  br i1 %v5_d390, label %dec_label_pc_d3a0, label %dec_label_pc_d3f4.lr.ph

dec_label_pc_d3f4.lr.ph:                          ; preds = %dec_label_pc_d384
  %v1_d3ec39 = add i32 %v0_d3b847, -1
  store i32 %v1_d3ec39, i32* %r1.global-to-local, align 4
  %v0_d3f4.pre = load i32, i32* @r6, align 4
  %v1_d3f8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d3f4

dec_label_pc_d3a0:                                ; preds = %dec_label_pc_d3ec.backedge, %dec_label_pc_d384
  store i32 %v2_d384, i32* %r1.global-to-local, align 4
  %v3_d3a4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d3a4, i32* @lr, align 4
  %v5_d3ac = icmp slt i32 %v0_d3b847, %v3_d3a4
  br i1 %v5_d3ac, label %dec_label_pc_d36c.backedge, label %.thread25

dec_label_pc_d36c.backedge:                       ; preds = %dec_label_pc_d3d4, %.thread25, %dec_label_pc_d3a0
  %v0_d36c = load i32, i32* @sl, align 4
  store i32 %v2_d368, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d378 = call i32 @function_108fc(i32 %v0_d36c)
  %tmp131 = icmp slt i32 %v1_d378, 1
  br i1 %tmp131, label %dec_label_pc_d470, label %dec_label_pc_d384

.thread25:                                        ; preds = %dec_label_pc_d3a0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d3b849 = icmp eq i32 %v0_d3b847, 0
  br i1 %v2_d3b849, label %dec_label_pc_d36c.backedge, label %dec_label_pc_d3c0.lr.ph

dec_label_pc_d3c0.lr.ph:                          ; preds = %.thread25
  %v0_d3c0.pre = load i32, i32* @r7, align 4
  %v1_d3c4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d3d4, %dec_label_pc_d3c0.lr.ph
  %v0_d3b8.in = phi i32 [ %v0_d3b847, %dec_label_pc_d3c0.lr.ph ], [ %v0_d3b8, %dec_label_pc_d3d4 ]
  %v0_d3d4 = phi i32 [ 0, %dec_label_pc_d3c0.lr.ph ], [ %v1_d3d4, %dec_label_pc_d3d4 ]
  %v1_d3c0 = phi i32 [ 0, %dec_label_pc_d3c0.lr.ph ], [ %v1_d3c086, %dec_label_pc_d3d4 ]
  %v0_d3b8 = add i32 %v0_d3b8.in, -1
  %v2_d3c0 = add i32 %v1_d3c0, %v0_d3c0.pre
  %v3_d3c0 = inttoptr i32 %v2_d3c0 to i8*
  %v4_d3c0 = load i8, i8* %v3_d3c0, align 1
  %v6_d3c0 = zext i8 %v4_d3c0 to i32
  store i32 %v6_d3c0, i32* %r2.global-to-local, align 4
  %v2_d3c4 = add i32 %v0_d3d4, %v1_d3c4.pre
  %v3_d3c4 = inttoptr i32 %v2_d3c4 to i8*
  %v4_d3c4 = load i8, i8* %v3_d3c4, align 1
  %v6_d3c4 = zext i8 %v4_d3c4 to i32
  store i32 %v6_d3c4, i32* %r3.global-to-local, align 4
  %v9_d3c8 = icmp eq i8 %v4_d3c4, %v4_d3c0
  br i1 %v9_d3c8, label %dec_label_pc_d410, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3c0
  br label %dec_label_pc_d3d4

dec_label_pc_d3d4:                                ; preds = %bb132, %dec_label_pc_d410
  %v1_d3c086 = phi i32 [ %v1_d410, %dec_label_pc_d410 ], [ 0, %bb132 ]
  %v1_d3d4 = add i32 %v0_d3d4, 1
  store i32 %v1_d3d4, i32* %r1.global-to-local, align 4
  %v2_d3b8 = icmp eq i32 %v0_d3b8, 0
  br i1 %v2_d3b8, label %dec_label_pc_d36c.backedge, label %dec_label_pc_d3c0

dec_label_pc_d3dc:                                ; preds = %dec_label_pc_d3f4
  %v1_d3dc = add i32 %v1_d3f4, 1
  store i32 %v1_d3dc, i32* @lr, align 4
  %v9_d3e0 = icmp eq i32 %v3_d388, %v1_d3dc
  br i1 %v9_d3e0, label %dec_label_pc_d41c, label %dec_label_pc_d3ec.backedge

dec_label_pc_d3ec.backedge:                       ; preds = %dec_label_pc_d3dc, %dec_label_pc_d408
  %v1_d3f477 = phi i32 [ 0, %dec_label_pc_d408 ], [ %v1_d3dc, %dec_label_pc_d3dc ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d3ec = add i32 %v0_d3ec, -1
  store i32 %v1_d3ec, i32* %r1.global-to-local, align 4
  %v2_d3ec = icmp eq i32 %v0_d3ec, 0
  br i1 %v2_d3ec, label %dec_label_pc_d3a0, label %dec_label_pc_d3f4

dec_label_pc_d3f4:                                ; preds = %dec_label_pc_d3ec.backedge, %dec_label_pc_d3f4.lr.ph
  %v0_d3ec = phi i32 [ %v1_d3ec39, %dec_label_pc_d3f4.lr.ph ], [ %v1_d3ec, %dec_label_pc_d3ec.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d3f4.lr.ph ], [ %storemerge, %dec_label_pc_d3ec.backedge ]
  %v1_d3f4 = phi i32 [ 0, %dec_label_pc_d3f4.lr.ph ], [ %v1_d3f477, %dec_label_pc_d3ec.backedge ]
  %v2_d3f4 = add i32 %v1_d3f4, %v0_d3f4.pre
  %v3_d3f4 = inttoptr i32 %v2_d3f4 to i8*
  %v4_d3f4 = load i8, i8* %v3_d3f4, align 1
  %v6_d3f4 = zext i8 %v4_d3f4 to i32
  store i32 %v6_d3f4, i32* %r2.global-to-local, align 4
  %v2_d3f8 = add i32 %storemerge.in, %v1_d3f8.pre
  %v3_d3f8 = inttoptr i32 %v2_d3f8 to i8*
  %v4_d3f8 = load i8, i8* %v3_d3f8, align 1
  %v6_d3f8 = zext i8 %v4_d3f8 to i32
  store i32 %v6_d3f8, i32* %r3.global-to-local, align 4
  %v9_d3fc = icmp eq i8 %v4_d3f8, %v4_d3f4
  br i1 %v9_d3fc, label %dec_label_pc_d3dc, label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %dec_label_pc_d3f4
  br label %dec_label_pc_d3ec.backedge

dec_label_pc_d410:                                ; preds = %dec_label_pc_d3c0
  %v1_d410 = add i32 %v1_d3c0, 1
  %v9_d414 = icmp eq i32 %v3_d3a4, %v1_d410
  br i1 %v9_d414, label %dec_label_pc_d41c, label %dec_label_pc_d3d4

dec_label_pc_d41c:                                ; preds = %dec_label_pc_d3dc, %dec_label_pc_d410
  %v1_d420 = call i32 @function_fac4(i32 18)
  %v1_d428 = call i32 @function_fac4(i32 19)
  %v0_d42c = load i32, i32* @sl, align 4
  %v1_d430 = call i32 @function_10b64(i32 %v0_d42c)
  %v0_d434 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d43c = call i32 @function_10930(i32 %v0_d434, i32 9)
  br label %dec_label_pc_d440

dec_label_pc_d440:                                ; preds = %dec_label_pc_d314, %dec_label_pc_d470, %dec_label_pc_d41c
  store i32 %v2_d1a0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d448 = call i32 @function_10138()
  store i32 %v2_d1f0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d458 = call i32 @function_10138()
  %v1_d460 = call i32 @function_12c48(i32 1)
  store i32 %v2_d178, i32* @r4, align 4
  %v0_d468 = load i32, i32* @r8, align 4
  store i32 %v0_d468, i32* @r5, align 4
  br label %dec_label_pc_d0c8.backedge

dec_label_pc_d470:                                ; preds = %dec_label_pc_d36c.backedge, %dec_label_pc_d32c
  %v1_d474 = call i32 @function_fac4(i32 18)
  %v1_d47c = call i32 @function_fac4(i32 19)
  %v0_d480 = load i32, i32* @sl, align 4
  %v1_d484 = call i32 @function_10b64(i32 %v0_d480)
  br label %dec_label_pc_d440

; uselistorder directives
  uselistorder i32 %v1_d410, { 1, 0 }
  uselistorder i32 %v1_d3d4, { 1, 0 }
  uselistorder i32 %v1_d3c0, { 1, 0 }
  uselistorder i32 %v0_d3d4, { 1, 0 }
  uselistorder i32 %v1_d378, { 1, 0 }
  uselistorder i32 %v2_d31c, { 1, 0 }
  uselistorder i1 %v7_d2f8, { 1, 0 }
  uselistorder i32 %v2_d2f4, { 1, 0 }
  uselistorder i32 %v2_d0cc, { 1, 0 }
  uselistorder i32 %stack_var_-8388.1.be, { 1, 0 }
  uselistorder i32 %v3_d24c, { 1, 2, 0 }
  uselistorder i32 %v2_d15c, { 1, 0 }
  uselistorder i32 %v1_d0fc, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d0d8, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8388.0, { 1, 0 }
  uselistorder i32 %v2_d368, { 1, 0, 2 }
  uselistorder i32 %v2_d1f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d010, { 1, 0 }
  uselistorder i32 %v2_cfdc, { 2, 0, 1 }
  uselistorder i32 %v1_cf78, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13, 14 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cee8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 0, 7, 6, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40 }
  uselistorder i32 (i32*)* @function_10ea4, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_10d60, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_108c8, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_20784.63, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d440, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d41c, { 1, 0 }
  uselistorder label %dec_label_pc_d3ec.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d3d4, { 1, 0 }
  uselistorder label %dec_label_pc_d384, { 1, 0 }
  uselistorder label %dec_label_pc_d314, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d0c8.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d2a8, { 1, 0 }
  uselistorder label %dec_label_pc_d0d8, { 1, 0 }
  uselistorder label %dec_label_pc_d0d8.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_d49c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d49c:
  store i32 ptrtoint (i32* @global_var_d618.68 to i32), i32* inttoptr (i32 124212 to i32*), align 4
  ret i32 %arg1
}

define i32 @function_d4b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d4b4:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i16, align 2
  %stack_var_-28 = alloca i32, align 4
  %v9_d4b4 = load i32, i32* @r6, align 4
  %v12_d4b4 = load i32, i32* @r7, align 4
  %v15_d4b4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d4d0 = call i32 @function_1133c(i32 2, i32 1, i32 0)
  store i32 %v3_d4d0, i32* %r0.global-to-local, align 4
  store i32 124204, i32* @r6, align 4
  %v7_d4d8 = icmp eq i32 %v3_d4d0, -1
  store i32 %v3_d4d0, i32* inttoptr (i32 124204 to i32*), align 4
  br i1 %v7_d4d8, label %dec_label_pc_d4b4.dec_label_pc_d590_crit_edge, label %dec_label_pc_d4e4

dec_label_pc_d4b4.dec_label_pc_d590_crit_edge:    ; preds = %dec_label_pc_d4b4
  %v1_d598.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d590

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d4b4
  %v2_d4e4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d4e4, i32* @r3, align 4
  %v0_d4e8 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_d4f8 = load i32, i32* %r0.global-to-local, align 4
  %v5_d4f8 = call i32 @function_112f8(i32 %v0_d4f8, i32 %v0_d4e8, i32 2, i32 %v2_d4e4, i32 4)
  store i32 %v5_d4f8, i32* %r0.global-to-local, align 4
  %v0_d4fc = load i32, i32* @r6, align 4
  %v1_d4fc = inttoptr i32 %v0_d4fc to i32*
  %v2_d4fc = load i32, i32* %v1_d4fc, align 4
  store i32 %v2_d4fc, i32* %r0.global-to-local, align 4
  %v2_d50c = call i32 @function_10998(i32 %v2_d4fc, i32 3)
  %v0_d510 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_d4fc, i32* %r0.global-to-local, align 4
  %v2_d51c = call i32 @function_10998(i32 %v2_d4fc, i32 %v0_d510)
  store i32 %v2_d51c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_d54c = call i32 @function_10f8c()
  store i32 %v0_d54c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_d554 = inttoptr i32 %v0_d54c to i32*
  store i32 0, i32* %v2_d554, align 4
  %v2_d558 = ptrtoint i16* %stack_var_-44 to i32
  store i32 %v2_d558, i32* @r5, align 4
  store i32 %v0_d54c, i32* @r4, align 4
  %v0_d568 = load i32, i32* @r6, align 4
  %v1_d568 = inttoptr i32 %v0_d568 to i32*
  %v2_d568 = load i32, i32* %v1_d568, align 4
  store i32 %v2_d568, i32* %r0.global-to-local, align 4
  store i16 2, i16* %stack_var_-44, align 2
  %v7_d574 = call i32 @function_110ec(i32 %v2_d568, i32 %v2_d558, i32 16, i32 2, i32 2)
  store i32 %v7_d574, i32* %r0.global-to-local, align 4
  %v7_d578 = icmp eq i32 %v7_d574, -1
  br i1 %v7_d578, label %dec_label_pc_d59c, label %dec_label_pc_d580

dec_label_pc_d580:                                ; preds = %dec_label_pc_d4e4
  %v2_d588 = load i32, i32* inttoptr (i32 124204 to i32*), align 4
  store i32 %v2_d588, i32* %r0.global-to-local, align 4
  %v2_d58c = call i32 @function_111d8(i32 %v2_d588, i32 1)
  store i32 %v2_d58c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d4b4.dec_label_pc_d590_crit_edge, %dec_label_pc_d5a8, %dec_label_pc_d580
  %v1_d598 = phi i32 [ %v1_d598.pre, %dec_label_pc_d4b4.dec_label_pc_d590_crit_edge ], [ %v1_d5f0, %dec_label_pc_d5a8 ], [ %v2_d58c, %dec_label_pc_d580 ]
  store i32 %v9_d4b4, i32* @r6, align 4
  store i32 %v12_d4b4, i32* @r7, align 4
  store i32 %v15_d4b4, i32* @r8, align 4
  ret i32 %v1_d598

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d4e4
  %v0_d59c = load i32, i32* @r4, align 4
  %v1_d59c = inttoptr i32 %v0_d59c to i32*
  %v2_d59c = load i32, i32* %v1_d59c, align 4
  %v7_d5a0 = icmp eq i32 %v2_d59c, 99
  br i1 %v7_d5a0, label %dec_label_pc_d5f8, label %dec_label_pc_d5a8

dec_label_pc_d5a8:                                ; preds = %dec_label_pc_d5f8, %bb, %dec_label_pc_d59c
  %v0_d5c0 = load i32, i32* @r6, align 4
  %v1_d5c0 = inttoptr i32 %v0_d5c0 to i32*
  %v2_d5c0 = load i32, i32* %v1_d5c0, align 4
  store i32 %v2_d5c0, i32* %r0.global-to-local, align 4
  store i16 2, i16* %stack_var_-44, align 2
  %v3_d5d0 = call i32 @function_11124(i32 %v2_d5c0, i32 %v2_d558, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_d5d8 = call i32 @function_12c48(i32 5)
  store i32 %v1_d5d8, i32* %r0.global-to-local, align 4
  %v0_d5dc = load i32, i32* @r6, align 4
  %v1_d5dc = inttoptr i32 %v0_d5dc to i32*
  %v2_d5dc = load i32, i32* %v1_d5dc, align 4
  store i32 %v2_d5dc, i32* %r0.global-to-local, align 4
  %v1_d5e0 = call i32 @function_10b64(i32 %v2_d5dc)
  store i32 34311, i32* %r0.global-to-local, align 4
  %v1_d5ec = call i32 @function_c93c(i32 34311)
  store i32 %v1_d5ec, i32* %r0.global-to-local, align 4
  %v1_d5f0 = call i32 @function_d4b4(i32 %v1_d5ec)
  store i32 %v1_d5f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d590

dec_label_pc_d5f8:                                ; preds = %dec_label_pc_d59c
  %v0_d5f8 = load i32, i32* @r8, align 4
  %v1_d5f8 = inttoptr i32 %v0_d5f8 to i8*
  %v2_d5f8 = load i8, i8* %v1_d5f8, align 1
  %v3_d5f8 = zext i8 %v2_d5f8 to i32
  %v1_d5fc = load i32, i32* @r7, align 4
  %v9_d5fc = icmp eq i32 %v3_d5f8, %v1_d5fc
  br i1 %v9_d5fc, label %dec_label_pc_d5a8, label %bb

bb:                                               ; preds = %dec_label_pc_d5f8
  %v2_d604 = trunc i32 %v1_d5fc to i8
  store i8 %v2_d604, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_d5a8

; uselistorder directives
  uselistorder i32 %v1_d5f0, { 1, 0 }
  uselistorder i32 %v2_d558, { 1, 0, 2 }
  uselistorder i32 %v2_d4fc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d4d0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i16* %stack_var_-44, { 2, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 1, 0, 2, 3, 5, 4, 18, 6, 8, 7, 9, 11, 10, 12, 13, 15, 16, 17, 14 }
  uselistorder i32 (i32)* @function_c93c, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_110ec, { 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder i32* inttoptr (i32 124204 to i32*), { 1, 0 }
  uselistorder label %dec_label_pc_d5a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d590, { 1, 2, 0 }
}

define i32 @function_d60c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d60c:
  %v0_d60c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d60c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d60c
  %v5_d614 = mul i32 %arg1, 32768
  %v6_d614 = and i32 %v5_d614, %arg3
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d60c, %bb
  %v7_d614 = phi i32 [ %arg1, %dec_label_pc_d60c ], [ %v6_d614, %bb ]
  ret i32 %v7_d614

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_d618(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d618:
  %v1_d620 = call i32 @function_fb64(i32 1)
  store i32 ptrtoint ([12 x i8]* @global_var_15ed0.74 to i32), i32* @r0, align 4
  %v2_d628 = call i32 @function_110c4(i32 ptrtoint ([12 x i8]* @global_var_15ed0.74 to i32))
  store i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32* @r4, align 4
  store i32 %v2_d628, i32* @global_var_20790.77, align 4
  %v3_d63c = call i32 @function_faa0(i32 1, i32* null)
  %v4_d63c = inttoptr i32 %v3_d63c to i16*
  %v3_d640 = load i16, i16* %v4_d63c, align 2
  store i16 %v3_d640, i16* bitcast (i32* @global_var_2078e.78 to i16*), align 4
  %v1_d64c = call i32 @function_fac4(i32 1)
  ret i32 %v1_d64c
}

define i32 @function_d660(i32 %arg1) local_unnamed_addr {
dec_label_pc_d660:
  %stack_var_-20 = alloca i32, align 4
  %v3_d660 = load i32, i32* @r4, align 4
  %v6_d660 = load i32, i32* @r5, align 4
  %v9_d660 = load i32, i32* @lr, align 4
  %v0_d668 = call i32 @function_10854()
  %v7_d66c = icmp eq i32 %v0_d668, -1
  %. = zext i1 %v7_d66c to i32
  %tmp11 = icmp slt i32 %v0_d668, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d688 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d668, i32* @global_var_1e700.80, align 4
  br i1 %v2_d688, label %dec_label_pc_d6a0, label %dec_label_pc_d694

dec_label_pc_d694:                                ; preds = %dec_label_pc_d660
  store i32 %v3_d660, i32* @r4, align 4
  store i32 %v6_d660, i32* @r5, align 4
  store i32 %v9_d660, i32* @lr, align 4
  ret i32 %v0_d668

dec_label_pc_d6a0:                                ; preds = %dec_label_pc_d660
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d6ac = call i32 @function_fb64(i32 23)
  %v1_d6b4 = call i32 @function_fb64(i32 24)
  %v0_d6b8 = load i32, i32* @r5, align 4
  %v2_d6c0 = inttoptr i32 %v0_d6b8 to i32*
  %v3_d6c0 = call i32 @function_faa0(i32 23, i32* %v2_d6c0)
  %v2_d6c8 = call i32 @function_10770(i32 %v3_d6c0, i32 2)
  %v7_d6cc = icmp eq i32 %v2_d6c8, -1
  store i32 %v2_d6c8, i32* @r4, align 4
  br i1 %v7_d6cc, label %dec_label_pc_d714, label %dec_label_pc_d6d8

dec_label_pc_d6d8:                                ; preds = %dec_label_pc_d714, %dec_label_pc_d6a0
  %v0_d6e4 = phi i32 [ %v2_d724, %dec_label_pc_d714 ], [ %v2_d6c8, %dec_label_pc_d6a0 ]
  %v2_d6e8 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d6ec = call i32 @function_10ad8(i32 %v0_d6e4, i32 -2147199228, i32 %v2_d6e8)
  br label %dec_label_pc_d6f0

dec_label_pc_d6f0:                                ; preds = %dec_label_pc_d6f0, %dec_label_pc_d6d8
  %v0_d6fc = load i32, i32* @r4, align 4
  %v3_d704 = call i32 @function_10ad8(i32 %v0_d6fc, i32 -2147199227, i32 0)
  %v1_d70c = call i32 @function_12c48(i32 10)
  br label %dec_label_pc_d6f0

dec_label_pc_d714:                                ; preds = %dec_label_pc_d6a0
  %v0_d714 = load i32, i32* @r5, align 4
  %v2_d71c = inttoptr i32 %v0_d714 to i32*
  %v3_d71c = call i32 @function_faa0(i32 24, i32* %v2_d71c)
  %v2_d724 = call i32 @function_10770(i32 %v3_d71c, i32 2)
  %v3_d728 = icmp eq i32 %v2_d724, -1
  store i32 %v2_d724, i32* @r4, align 4
  br i1 %v3_d728, label %dec_label_pc_d734, label %dec_label_pc_d6d8

dec_label_pc_d734:                                ; preds = %dec_label_pc_d714
  %v1_d738 = call i32 @function_fac4(i32 23)
  %v1_d740 = call i32 @function_fac4(i32 24)
  %v0_d744 = load i32, i32* @r5, align 4
  %v1_d748 = call i32 @function_12b90(i32 %v0_d744)
  %v0_d74c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d74c, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d734
  store i32 0, i32* @lr, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d734, %bb14
  ret i32 %v1_d748

; uselistorder directives
  uselistorder i32 %v2_d724, { 1, 2, 0 }
  uselistorder i32 %v2_d6c8, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d668, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_d750(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d750:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v15_d750 = load i32, i32* @r8, align 4
  %v2_d75c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d75c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d774 = call i32 @function_113d4(i32* nonnull %stack_var_-64)
  store i32 %v2_d75c, i32* @r0, align 4
  %v2_d780 = call i32 @function_11390(i32 %v2_d75c, i32 2)
  %v0_d784 = load i32, i32* @r5, align 4
  store i32 %v0_d784, i32* %r2.global-to-local, align 4
  %v3_d790 = call i32 @function_10b2c(i32 %v0_d784, i32 %v2_d75c, i32 %v0_d784)
  %v2_d79c = call i32 @function_113e8(i32 17, i32 1)
  %v2_d7a8 = call i32 @function_113e8(i32 5, i32 54428)
  %v0_d7ac = call i32 @function_10360()
  store i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_20790.77, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d7ac, i32* @global_var_20780.45, align 4
  store i16 5888, i16* bitcast (i32* @global_var_2078e.78 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_2078c.76 to i16*), align 4
  %v6_d7d4 = call i32 @function_fc04(i32 %v0_d7ac, i32 ptrtoint (i32* @global_var_20780.45 to i32), i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d618.68 to i32), i32* %r3.global-to-local, align 4
  store i32 124212, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_d618.68 to i32), i32* inttoptr (i32 124212 to i32*), align 4
  %v1_d7e4 = call i32 @function_d4b4(i32 %v6_d7d4)
  %v1_d7e8 = call i32 @function_df14(i32 %v1_d7e4)
  %v2_d7f0 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_d7f0, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d7f8 = call i32 @function_10138()
  %v0_d7fc = load i32, i32* @r6, align 4
  %v7_d7fc = icmp eq i32 %v0_d7fc, 2
  br i1 %v7_d7fc, label %dec_label_pc_d934, label %dec_label_pc_d804

dec_label_pc_d804:                                ; preds = %dec_label_pc_d934, %dec_label_pc_d750, %dec_label_pc_d944
  %v0_d804 = call i32 @function_deb8()
  store i32 %v0_d804, i32* @r6, align 4
  %v0_d80c = load i32, i32* @r8, align 4
  %v1_d80c = inttoptr i32 %v0_d80c to i32*
  %v2_d80c = load i32, i32* %v1_d80c, align 4
  %v1_d810 = inttoptr i32 %v2_d80c to i8*
  %v2_d810 = call i32 @function_100a4(i8* %v1_d810)
  %v0_d818 = load i32, i32* @r8, align 4
  %v1_d818 = inttoptr i32 %v0_d818 to i32*
  %v2_d818 = load i32, i32* %v1_d818, align 4
  %v1_d81c = inttoptr i32 %v2_d818 to i8*
  %v2_d81c = call i32 @function_100a4(i8* %v1_d81c)
  %v1_d820 = sub i32 20, %v2_d810
  store i32 %v2_d81c, i32* @r4, align 4
  %v0_d828 = load i32, i32* @r6, align 4
  %v2_d82c = call i32 @function_106fc(i32 %v0_d828, i32 %v1_d820)
  %v2_d834 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_d834, i32* @r5, align 4
  %v0_d838 = load i32, i32* @r4, align 4
  %v2_d838 = add i32 %v0_d838, %v1_d820
  store i32 %v2_d838, i32* @r4, align 4
  %v2_d844 = call i32 @function_df7c(i32 %v2_d834, i32 %v2_d838)
  %v2_d84c = ptrtoint i32* %stack_var_-40 to i32
  %v1_d850 = load i32, i32* @r4, align 4
  %v2_d850 = add i32 %v1_d850, %v2_d84c
  store i32 %v2_d850, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_d85c = load i32, i32* @r8, align 4
  %v1_d85c = inttoptr i32 %v0_d85c to i32*
  %v2_d85c = load i32, i32* %v1_d85c, align 4
  store i32 %v2_d85c, i32* @r0, align 4
  %v3_d860 = add i32 %v2_d850, -64
  %v4_d860 = inttoptr i32 %v3_d860 to i8*
  store i8 0, i8* %v4_d860, align 1
  %v2_d864 = inttoptr i32 %v2_d85c to i8*
  %v3_d864 = call i32 @function_100cc(i8* %v2_d864, i32 %v2_d834)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d834, i32* @r0, align 4
  %v0_d870 = call i32 @function_10138()
  %v0_d874 = call i32 @function_deb8()
  store i32 %v0_d874, i32* @r7, align 4
  %v0_d87c = load i32, i32* @r8, align 4
  %v1_d87c = inttoptr i32 %v0_d87c to i32*
  %v2_d87c = load i32, i32* %v1_d87c, align 4
  %v1_d880 = inttoptr i32 %v2_d87c to i8*
  %v2_d880 = call i32 @function_100a4(i8* %v1_d880)
  store i32 %v2_d880, i32* @r6, align 4
  %v0_d888 = load i32, i32* @r8, align 4
  %v1_d888 = inttoptr i32 %v0_d888 to i32*
  %v2_d888 = load i32, i32* %v1_d888, align 4
  %v1_d88c = inttoptr i32 %v2_d888 to i8*
  %v2_d88c = call i32 @function_100a4(i8* %v1_d88c)
  %v0_d890 = load i32, i32* @r6, align 4
  %v1_d890 = sub i32 20, %v0_d890
  store i32 %v2_d88c, i32* @r4, align 4
  %v0_d898 = load i32, i32* @r7, align 4
  %v2_d89c = call i32 @function_106fc(i32 %v0_d898, i32 %v1_d890)
  %v0_d8a0 = load i32, i32* @r4, align 4
  %v2_d8a0 = add i32 %v0_d8a0, %v1_d890
  store i32 %v2_d8a0, i32* @r4, align 4
  %v2_d8ac = call i32 @function_df7c(i32 %v2_d834, i32 %v2_d8a0)
  store i32 %v2_d84c, i32* %r2.global-to-local, align 4
  %v1_d8b8 = load i32, i32* @r4, align 4
  %v2_d8b8 = add i32 %v1_d8b8, %v2_d84c
  store i32 %v2_d8b8, i32* %r3.global-to-local, align 4
  %v0_d8bc = load i32, i32* @sb, align 4
  %v1_d8bc = trunc i32 %v0_d8bc to i8
  %v3_d8bc = add i32 %v2_d8b8, -64
  %v4_d8bc = inttoptr i32 %v3_d8bc to i8*
  store i8 %v1_d8bc, i8* %v4_d8bc, align 1
  %v4_d8c8 = call i32 @function_10814(i32 15, i32 %v2_d834, i32 %v2_d84c, i32 %v2_d8b8)
  %v1_d8d0 = call i32 @function_fb64(i32 3)
  %v3_d8dc = call i32 @function_faa0(i32 3, i32* nonnull %stack_var_-48)
  %v3_d8e0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d8e0, i32* %r2.global-to-local, align 4
  %v2_d8ec = call i32 @function_10a70(i32 1, i32 %v3_d8dc)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_d8fc = call i32 @function_10a70(i32 1, i32 ptrtoint (i32* @global_var_15edc.88 to i32))
  %v1_d904 = call i32 @function_fac4(i32 3)
  %v1_d908 = call i32 @function_85e0(i32 %v1_d904)
  %v1_d90c = call i32 @function_ced0(i32 %v1_d908)
  store i32 %v1_d90c, i32* @r0, align 4
  %v1_d910 = call i32 @function_d660(i32 %v1_d90c)
  store i32 %v1_d910, i32* @r0, align 4
  %v0_d914 = call i32 @function_10854()
  %v1_d918 = load i32, i32* @sb, align 4
  %v7_d91c = icmp sgt i32 %v0_d914, %v1_d918
  br i1 %v7_d91c, label %dec_label_pc_d920, label %dec_label_pc_d970

dec_label_pc_d920:                                ; preds = %dec_label_pc_d804
  store i32 %v15_d750, i32* %r8.global-to-local, align 4
  ret i32 %v1_d918

dec_label_pc_d934:                                ; preds = %dec_label_pc_d750
  %v0_d934 = load i32, i32* @r8, align 4
  %v1_d934 = add i32 %v0_d934, 4
  %v2_d934 = inttoptr i32 %v1_d934 to i32*
  %v3_d934 = load i32, i32* %v2_d934, align 4
  %v1_d938 = inttoptr i32 %v3_d934 to i8*
  %v2_d938 = call i32 @function_100a4(i8* %v1_d938)
  %v8_d940 = icmp sgt i32 %v2_d938, 31
  br i1 %v8_d940, label %dec_label_pc_d804, label %dec_label_pc_d944

dec_label_pc_d944:                                ; preds = %dec_label_pc_d934
  %v0_d948 = load i32, i32* @r8, align 4
  %v1_d948 = add i32 %v0_d948, 4
  %v2_d948 = inttoptr i32 %v1_d948 to i32*
  %v3_d948 = load i32, i32* %v2_d948, align 4
  store i32 %v2_d7f0, i32* @r0, align 4
  %v2_d950 = bitcast i32* %stack_var_-136 to i8*
  %v3_d950 = call i32 @function_100cc(i8* %v2_d950, i32 %v3_d948)
  %v0_d954 = load i32, i32* @r8, align 4
  %v1_d954 = add i32 %v0_d954, 4
  %v2_d954 = inttoptr i32 %v1_d954 to i32*
  %v3_d954 = load i32, i32* %v2_d954, align 4
  %v1_d95c = inttoptr i32 %v3_d954 to i8*
  %v2_d95c = call i32 @function_100a4(i8* %v1_d95c)
  store i32 %v2_d95c, i32* @r1, align 4
  store i32 %v3_d954, i32* @r0, align 4
  %v0_d968 = call i32 @function_10138()
  br label %dec_label_pc_d804

dec_label_pc_d970:                                ; preds = %dec_label_pc_d804
  %v1_d970 = call i32 @function_10aa4(i32 %v0_d914)
  %v0_d974 = load i32, i32* @sb, align 4
  %v1_d978 = call i32 @function_10b64(i32 %v0_d974)
  %v1_d980 = call i32 @function_10b64(i32 1)
  %v1_d988 = call i32 @function_10b64(i32 2)
  %v1_d98c = call i32 @function_85e0(i32 %v1_d988)
  %v1_d990 = call i32 @function_ced0(i32 %v1_d98c)
  store i32 %v1_d990, i32* @r0, align 4
  %v1_d994 = call i32 @function_d660(i32 %v1_d990)
  store i32 %v1_d994, i32* @r0, align 4
  %v1_d998 = call i32 @function_e350(i32 %v1_d994)
  store i32 124204, i32* @fp, align 4
  store i32 124208, i32* @sl, align 4
  %v2_d9ac = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_d9ac, i32* @r6, align 4
  %v2_d9b0 = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_d9b0, i32* @r7, align 4
  %v2_da90 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dad8 = ptrtoint i32* %stack_var_-144 to i32
  %v2_dda0 = ptrtoint i8** %stack_var_-42 to i32
  %v2_dc38 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_dd30 = ptrtoint i32* %stack_var_-52 to i32
  %v2_dd34 = ptrtoint i32* %stack_var_-56 to i32
  %v1_ddf0 = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_d9b4

dec_label_pc_d9b4:                                ; preds = %dec_label_pc_ddb4, %dec_label_pc_dde8, %bb44, %dec_label_pc_dc50, %dec_label_pc_db94, %dec_label_pc_db84, %bb41, %dec_label_pc_de70, %dec_label_pc_de54, %dec_label_pc_de3c, %dec_label_pc_ddc4, %dec_label_pc_dd5c, %dec_label_pc_dca8, %dec_label_pc_db38, %dec_label_pc_d970
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d9c0

dec_label_pc_d9c0:                                ; preds = %dec_label_pc_d9c0, %dec_label_pc_d9b4
  %v1_d9c4 = phi i32 [ %v1_d9c8, %dec_label_pc_d9c0 ], [ 4, %dec_label_pc_d9b4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_d9c4 = load i32, i32* @r6, align 4
  %v3_d9c4 = add i32 %v2_d9c4, %v1_d9c4
  %v4_d9c4 = inttoptr i32 %v3_d9c4 to i32*
  store i32 0, i32* %v4_d9c4, align 4
  %v0_d9c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d9c8 = add i32 %v0_d9c8, 4
  store i32 %v1_d9c8, i32* %r3.global-to-local, align 4
  %v7_d9cc = icmp eq i32 %v1_d9c8, 128
  br i1 %v7_d9cc, label %dec_label_pc_d9d4, label %dec_label_pc_d9c0

dec_label_pc_d9d4:                                ; preds = %dec_label_pc_d9c0
  %v0_d9d4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_d9d4, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d9dc

dec_label_pc_d9dc:                                ; preds = %dec_label_pc_d9dc, %dec_label_pc_d9d4
  %v1_d9e0 = phi i32 [ %v1_d9e4, %dec_label_pc_d9dc ], [ 4, %dec_label_pc_d9d4 ]
  store i32 0, i32* @r4, align 4
  %v2_d9e0 = load i32, i32* @r7, align 4
  %v3_d9e0 = add i32 %v2_d9e0, %v1_d9e0
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i32*
  store i32 0, i32* %v4_d9e0, align 4
  %v0_d9e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_d9e4 = add i32 %v0_d9e4, 4
  store i32 %v1_d9e4, i32* %r3.global-to-local, align 4
  %v7_d9e8 = icmp eq i32 %v1_d9e4, 128
  br i1 %v7_d9e8, label %dec_label_pc_d9f0, label %dec_label_pc_d9dc

dec_label_pc_d9f0:                                ; preds = %dec_label_pc_d9dc
  %v0_d9f0 = load i32, i32* @fp, align 4
  %v1_d9f0 = inttoptr i32 %v0_d9f0 to i32*
  %v2_d9f0 = load i32, i32* %v1_d9f0, align 4
  %v7_d9f4 = icmp eq i32 %v2_d9f0, -1
  br i1 %v7_d9f4, label %dec_label_pc_da24, label %dec_label_pc_d9fc

dec_label_pc_d9fc:                                ; preds = %dec_label_pc_d9f0
  %v3_d9fc = udiv i32 %v2_d9f0, 32
  %v3_da04 = mul nuw nsw i32 %v3_d9fc, 4
  store i32 %v2_d84c, i32* %ip.global-to-local, align 4
  %v2_da0c = add i32 %v3_da04, %v2_d84c
  store i32 %v2_da0c, i32* %r3.global-to-local, align 4
  %v1_da10 = add i32 %v2_da0c, -224
  %v2_da10 = inttoptr i32 %v1_da10 to i32*
  %v3_da10 = load i32, i32* %v2_da10, align 4
  %v1_da14 = urem i32 %v2_d9f0, 32
  %v7_da1c = shl i32 1, %v1_da14
  %v8_da1c = or i32 %v3_da10, %v7_da1c
  store i32 %v8_da1c, i32* %r2.global-to-local, align 4
  store i32 %v8_da1c, i32* %v2_da10, align 4
  br label %dec_label_pc_da24

dec_label_pc_da24:                                ; preds = %dec_label_pc_d9f0, %dec_label_pc_d9fc
  %v0_da24 = load i32, i32* @sl, align 4
  %v1_da24 = inttoptr i32 %v0_da24 to i32*
  %v2_da24 = load i32, i32* %v1_da24, align 4
  store i32 %v2_da24, i32* @r3, align 4
  %v7_da28 = icmp eq i32 %v2_da24, -1
  store i32 124208, i32* %r8.global-to-local, align 4
  br i1 %v7_da28, label %dec_label_pc_dcb4, label %dec_label_pc_da34

dec_label_pc_da34:                                ; preds = %dec_label_pc_dcb4, %dec_label_pc_da24, %bb43
  %v2_da38 = load i8, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  %v3_da38 = zext i8 %v2_da38 to i32
  store i32 %v3_da38, i32* %r3.global-to-local, align 4
  %v2_da3c = icmp eq i8 %v2_da38, 0
  %v0_db54 = load i32, i32* @sl, align 4
  %v1_db54 = inttoptr i32 %v0_db54 to i32*
  %v2_db54 = load i32, i32* %v1_db54, align 4
  store i32 %v2_db54, i32* %ip.global-to-local, align 4
  %v3_db5c = udiv i32 %v2_db54, 32
  br i1 %v2_da3c, label %dec_label_pc_db54, label %dec_label_pc_da44

dec_label_pc_da44:                                ; preds = %dec_label_pc_da34
  %v3_da54 = mul nuw nsw i32 %v3_db5c, 4
  %v2_da58 = add i32 %v3_da54, %v2_d84c
  store i32 %v2_da58, i32* %r3.global-to-local, align 4
  %v1_da5c = add i32 %v2_da58, -352
  %v2_da5c = inttoptr i32 %v1_da5c to i32*
  %v3_da5c = load i32, i32* %v2_da5c, align 4
  %v1_da60 = urem i32 %v2_db54, 32
  %v7_da68 = shl i32 1, %v1_da60
  %v8_da68 = or i32 %v3_da5c, %v7_da68
  store i32 %v8_da68, i32* %r2.global-to-local, align 4
  store i32 %v8_da68, i32* %v2_da5c, align 4
  br label %dec_label_pc_da70

dec_label_pc_da70:                                ; preds = %dec_label_pc_db54, %dec_label_pc_da44
  %v0_da70 = load i32, i32* @fp, align 4
  %v1_da70 = inttoptr i32 %v0_da70 to i32*
  %v2_da70 = load i32, i32* %v1_da70, align 4
  %v0_da74 = load i32, i32* %ip.global-to-local, align 4
  %v5_da78 = icmp slt i32 %v0_da74, %v2_da70
  br i1 %v5_da78, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_da70
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_da70, %bb
  %v0_da94 = phi i32 [ %v2_da70, %dec_label_pc_da70 ], [ %v0_da74, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_da90, i32* %ip.global-to-local, align 4
  %v1_da94 = add i32 %v0_da94, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_d9b0, i32* %r2.global-to-local, align 4
  %v5_daac = call i32 @function_10888(i32 %v1_da94, i32 %v2_d9ac, i32 %v2_d9b0, i32 0, i32 %v2_da90)
  %v8_dab0 = icmp eq i32 %v5_daac, -1
  br i1 %v8_dab0, label %dec_label_pc_d9b4, label %dec_label_pc_dab8

dec_label_pc_dab8:                                ; preds = %bb41
  %v6_daac = trunc i32 %v5_daac to i16
  %v3_dab8 = icmp eq i16 %v6_daac, 0
  br i1 %v3_dab8, label %dec_label_pc_dac0, label %dec_label_pc_daec

dec_label_pc_dac0:                                ; preds = %dec_label_pc_dab8
  %v2_dac4 = load i32, i32* @sb, align 4
  %v5_dac8 = srem i32 %v2_dac4, 6
  %v4_dad0 = sub i32 %v2_dac4, %v5_dac8
  store i32 %v4_dad0, i32* %r3.global-to-local, align 4
  store i32 %v5_dac8, i32* %r2.global-to-local, align 4
  %v2_dadc = icmp eq i32 %v5_dac8, 0
  %v7_dae0 = inttoptr i32 %v5_daac to i8*
  store i8* %v7_dae0, i8** %stack_var_-42, align 4
  %v1_dae4 = add i32 %v2_dac4, 1
  store i32 %v1_dae4, i32* @sb, align 4
  br i1 %v2_dadc, label %dec_label_pc_dd98, label %dec_label_pc_daec

dec_label_pc_daec:                                ; preds = %dec_label_pc_dab8, %dec_label_pc_dac0, %dec_label_pc_dd98
  store i32 ptrtoint (i8** @global_var_1e704.92 to i32), i32* %r2.global-to-local, align 4
  %v2_daf0 = load i8, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  %v3_daf0 = zext i8 %v2_daf0 to i32
  store i32 %v3_daf0, i32* @r4, align 4
  %v2_daf4 = icmp eq i8 %v2_daf0, 0
  %v0_db84 = load i32, i32* @sl, align 4
  %v1_db84 = inttoptr i32 %v0_db84 to i32*
  %v2_db84 = load i32, i32* %v1_db84, align 4
  br i1 %v2_daf4, label %dec_label_pc_db84, label %dec_label_pc_dafc

dec_label_pc_dafc:                                ; preds = %dec_label_pc_daec
  %v3_db04 = udiv i32 %v2_db84, 32
  store i32 %v2_d84c, i32* %ip.global-to-local, align 4
  %v3_db0c = mul nuw nsw i32 %v3_db04, 4
  %v2_db10 = add i32 %v3_db0c, %v2_d84c
  store i32 %v2_db10, i32* %r3.global-to-local, align 4
  %v1_db14 = add i32 %v2_db10, -352
  %v2_db14 = inttoptr i32 %v1_db14 to i32*
  %v3_db14 = load i32, i32* %v2_db14, align 4
  %v1_db18 = urem i32 %v2_db84, 32
  %v6_db1c = lshr i32 %v3_db14, %v1_db18
  store i32 %v6_db1c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e704.92 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_db28 = urem i32 %v6_db1c, 2
  %v2_db28 = icmp eq i32 %v1_db28, 0
  store i8 0, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  store i32 124208, i32* @r4, align 4
  br i1 %v2_db28, label %dec_label_pc_db38, label %dec_label_pc_dd24

dec_label_pc_db38:                                ; preds = %dec_label_pc_dafc
  store i32 56128, i32* @lr, align 4
  %v1_db3c = icmp ne i32 %v2_db84, -1
  call void @__pseudo_cond_branch(i1 %v1_db3c, i32 ptrtoint (i32* @global_var_10b64.94 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_db44 = load i32, i32* @r4, align 4
  %v2_db44 = inttoptr i32 %v1_db44 to i32*
  store i32 -1, i32* %v2_db44, align 4
  %v1_db4c = call i32 @function_12c48(i32 1)
  br label %dec_label_pc_d9b4

dec_label_pc_db54:                                ; preds = %dec_label_pc_da34
  store i32 %v2_d84c, i32* %r2.global-to-local, align 4
  %v3_db64 = mul nuw nsw i32 %v3_db5c, 4
  %v2_db68 = add i32 %v3_db64, %v2_d84c
  store i32 %v2_db68, i32* %r3.global-to-local, align 4
  %v1_db6c = add i32 %v2_db68, -224
  %v2_db6c = inttoptr i32 %v1_db6c to i32*
  %v3_db6c = load i32, i32* %v2_db6c, align 4
  %v1_db70 = urem i32 %v2_db54, 32
  %v7_db78 = shl i32 1, %v1_db70
  %v8_db78 = or i32 %v3_db6c, %v7_db78
  store i32 %v8_db78, i32* %r2.global-to-local, align 4
  store i32 %v8_db78, i32* %v2_db6c, align 4
  br label %dec_label_pc_da70

dec_label_pc_db84:                                ; preds = %dec_label_pc_daec
  %v7_db88 = icmp eq i32 %v2_db84, -1
  store i32 124208, i32* @r8, align 4
  br i1 %v7_db88, label %dec_label_pc_d9b4, label %dec_label_pc_db94

dec_label_pc_db94:                                ; preds = %dec_label_pc_db84
  %v3_db94 = udiv i32 %v2_db84, 32
  %v3_db9c = mul nuw nsw i32 %v3_db94, 4
  store i32 %v2_d84c, i32* %ip.global-to-local, align 4
  %v2_dba4 = add i32 %v3_db9c, %v2_d84c
  store i32 %v2_dba4, i32* %r3.global-to-local, align 4
  %v1_dba8 = add i32 %v2_dba4, -224
  %v2_dba8 = inttoptr i32 %v1_dba8 to i32*
  %v3_dba8 = load i32, i32* %v2_dba8, align 4
  %v1_dbac = urem i32 %v2_db84, 32
  %v6_dbb0 = lshr i32 %v3_dba8, %v1_dbac
  store i32 %v6_dbb0, i32* %r2.global-to-local, align 4
  %v1_dbb4 = urem i32 %v6_dbb0, 2
  %v2_dbb4 = icmp eq i32 %v1_dbb4, 0
  br i1 %v2_dbb4, label %dec_label_pc_d9b4, label %dec_label_pc_dbbc

dec_label_pc_dbbc:                                ; preds = %dec_label_pc_db94
  %v6_dbc0 = inttoptr i32 %v3_daf0 to i8*
  store i8* %v6_dbc0, i8** %stack_var_-42, align 4
  %v0_dbc4 = call i32 @function_10f8c()
  %v0_dbc8 = load i32, i32* @r4, align 4
  %v2_dbc8 = inttoptr i32 %v0_dbc4 to i32*
  store i32 %v0_dbc8, i32* %v2_dbc8, align 4
  store i32 %v0_dbc4, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_dbdc = load i32, i32* @r8, align 4
  %v1_dbdc = inttoptr i32 %v0_dbdc to i32*
  %v2_dbdc = load i32, i32* %v1_dbdc, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dbe8 = call i32 @function_1120c(i32 %v2_dbdc, i32 %v2_dda0, i32 2, i32 16386)
  %v7_dbec = icmp eq i32 %v4_dbe8, -1
  br i1 %v7_dbec, label %dec_label_pc_ddb4, label %dec_label_pc_dbf4

dec_label_pc_dbf4:                                ; preds = %dec_label_pc_dbbc
  %v2_dbf4 = icmp eq i32 %v4_dbe8, 0
  br i1 %v2_dbf4, label %dec_label_pc_ddc4, label %dec_label_pc_dbfc

dec_label_pc_dbfc:                                ; preds = %dec_label_pc_dbf4
  %v3_dc00 = load i8*, i8** %stack_var_-42, align 4
  %v4_dc00 = ptrtoint i8* %v3_dc00 to i32
  store i32 %v4_dc00, i32* %r3.global-to-local, align 4
  %v2_dc04 = icmp eq i8* %v3_dc00, null
  br i1 %v2_dc04, label %dec_label_pc_de54, label %dec_label_pc_dc0c

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_dbfc
  %v3_dc0c = udiv i32 %v4_dc00, 256
  %v1_dc10 = mul i32 %v4_dc00, 256
  %v4_dc14 = and i32 %v1_dc10, 65280
  %v5_dc14 = or i32 %v4_dc14, %v3_dc0c
  %v6_dc14 = trunc i32 %v5_dc14 to i16
  store i32 %v5_dc14, i32* %r2.global-to-local, align 4
  store i32 %v2_dad8, i32* %r3.global-to-local, align 4
  %v7_dc20 = inttoptr i32 %v5_dc14 to i8*
  store i8* %v7_dc20, i8** %stack_var_-42, align 4
  %tmp45 = icmp ugt i16 %v6_dc14, 1024
  br i1 %tmp45, label %dec_label_pc_de70, label %dec_label_pc_dc28

dec_label_pc_dc28:                                ; preds = %dec_label_pc_dc0c
  %v0_dc28 = load i32, i32* @r4, align 4
  %v1_dc28 = load i32, i32* @r5, align 4
  %v2_dc28 = inttoptr i32 %v1_dc28 to i32*
  store i32 %v0_dc28, i32* %v2_dc28, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_dc34 = load i32, i32* @r8, align 4
  %v1_dc34 = inttoptr i32 %v0_dc34 to i32*
  %v2_dc34 = load i32, i32* %v1_dc34, align 4
  %v7_dc3c = call i32 @function_1120c(i32 %v2_dc34, i32 %v2_dc38, i32 %v5_dc14, i32 16386)
  %v7_dc40 = icmp eq i32 %v7_dc3c, -1
  br i1 %v7_dc40, label %dec_label_pc_ddb4, label %dec_label_pc_dc48

dec_label_pc_dc48:                                ; preds = %dec_label_pc_dc28
  %v2_dc48 = icmp eq i32 %v7_dc3c, 0
  br i1 %v2_dc48, label %dec_label_pc_ddc4, label %dec_label_pc_dc50

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dc48
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dc60 = load i32, i32* @r8, align 4
  %v1_dc60 = inttoptr i32 %v0_dc60 to i32*
  %v2_dc60 = load i32, i32* %v1_dc60, align 4
  %v4_dc64 = call i32 @function_1120c(i32 %v2_dc60, i32 %v2_dda0, i32 2, i32 16384)
  %v3_dc6c = load i8*, i8** %stack_var_-42, align 4
  %v4_dc6c = ptrtoint i8* %v3_dc6c to i32
  %v3_dc70 = udiv i32 %v4_dc6c, 256
  %v1_dc74 = urem i32 %v4_dc6c, 256
  store i32 %v1_dc74, i32* %r3.global-to-local, align 4
  %v4_dc78 = mul nuw nsw i32 %v1_dc74, 256
  %v5_dc78 = or i32 %v4_dc78, %v3_dc70
  store i32 %v5_dc78, i32* %ip.global-to-local, align 4
  store i32 %v2_dad8, i32* @lr, align 4
  store i32 %v5_dc78, i32* %r2.global-to-local, align 4
  %v0_dc88 = load i32, i32* @r8, align 4
  %v1_dc88 = inttoptr i32 %v0_dc88 to i32*
  %v2_dc88 = load i32, i32* %v1_dc88, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dc90 = inttoptr i32 %v5_dc78 to i8*
  store i8* %v6_dc90, i8** %stack_var_-42, align 4
  %v6_dc94 = call i32 @function_1120c(i32 %v2_dc88, i32 %v2_dc38, i32 %v5_dc78, i32 16384)
  store i32 %v2_dad8, i32* %r2.global-to-local, align 4
  %v3_dc9c = load i8*, i8** %stack_var_-42, align 4
  %v3_dca0 = icmp eq i8* %v3_dc9c, null
  br i1 %v3_dca0, label %dec_label_pc_d9b4, label %dec_label_pc_dca8

dec_label_pc_dca8:                                ; preds = %dec_label_pc_dc50
  %v4_dc9c = ptrtoint i8* %v3_dc9c to i32
  %v5_dcac = call i32 @function_82e8(i32* nonnull %stack_var_-1416, i32 %v4_dc9c, i32 %v2_dad8)
  br label %dec_label_pc_d9b4

dec_label_pc_dcb4:                                ; preds = %dec_label_pc_da24
  %v0_dcbc = load i32, i32* @r4, align 4
  store i32 %v0_dcbc, i32* %r2.global-to-local, align 4
  %v3_dcc0 = call i32 @function_1133c(i32 2, i32 1, i32 %v0_dcbc)
  %v7_dcc4 = icmp eq i32 %v3_dcc0, -1
  store i32 %v3_dcc0, i32* @r5, align 4
  %v1_dccc = load i32, i32* %r8.global-to-local, align 4
  %v2_dccc = inttoptr i32 %v1_dccc to i32*
  store i32 %v3_dcc0, i32* %v2_dccc, align 4
  br i1 %v7_dcc4, label %dec_label_pc_da34, label %dec_label_pc_dcd4

dec_label_pc_dcd4:                                ; preds = %dec_label_pc_dcb4
  %v0_dcd4 = load i32, i32* @r4, align 4
  store i32 %v0_dcd4, i32* %r2.global-to-local, align 4
  %v2_dcdc = call i32 @function_10998(i32 %v3_dcc0, i32 3)
  %v1_dce4 = or i32 %v2_dcdc, 2048
  store i32 %v1_dce4, i32* %r2.global-to-local, align 4
  %v0_dce8 = load i32, i32* @r5, align 4
  %v2_dcec = call i32 @function_10998(i32 %v0_dce8, i32 4)
  %v2_dcf4 = load i32, i32* inttoptr (i32 124212 to i32*), align 4
  store i32 %v2_dcf4, i32* %r3.global-to-local, align 4
  %v2_dcf8 = icmp eq i32 %v2_dcf4, 0
  br i1 %v2_dcf8, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_dcd4
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_dcd4, %bb42
  %v2_dd00 = xor i1 %v2_dcf8, true
  call void @__pseudo_cond_branch(i1 %v2_dd00, i32 %v2_dcf4)
  store i32 ptrtoint (i8** @global_var_1e704.92 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_dd0c = load i32, i32* %r8.global-to-local, align 4
  %v1_dd0c = inttoptr i32 %v0_dd0c to i32*
  %v2_dd0c = load i32, i32* %v1_dd0c, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  %v4_dd1c = call i32 @function_11124(i32 %v2_dd0c, i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32 16)
  br label %dec_label_pc_da34

dec_label_pc_dd24:                                ; preds = %dec_label_pc_dafc
  store i32 4, i32* @r5, align 4
  store i32 %v2_dd30, i32* %r3.global-to-local, align 4
  store i32 %v2_dd34, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_dd4c = call i32 @function_11194(i32 %v2_db84, i32 1, i32 4, i32 %v2_dd30, i32 %v2_dd34)
  %v3_dd50 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_dd50, i32* %r3.global-to-local, align 4
  %v2_dd54 = icmp eq i32 %v3_dd50, 0
  br i1 %v2_dd54, label %dec_label_pc_dde8, label %dec_label_pc_dd5c

dec_label_pc_dd5c:                                ; preds = %dec_label_pc_dd24
  %v0_dd5c = load i32, i32* @r4, align 4
  %v1_dd5c = inttoptr i32 %v0_dd5c to i32*
  %v2_dd5c = load i32, i32* %v1_dd5c, align 4
  %v1_dd60 = call i32 @function_10b64(i32 %v2_dd5c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd68 = load i32, i32* @r4, align 4
  %v2_dd68 = inttoptr i32 %v1_dd68 to i32*
  store i32 -1, i32* %v2_dd68, align 4
  %v0_dd6c = call i32 @function_deb8()
  %v3_dd74 = zext i32 %v0_dd6c to i64
  %v4_dd74 = mul nuw i64 %v3_dd74, 3435973837
  %v3_dd781 = udiv i64 %v4_dd74, 34359738368
  %v3_dd7c3 = mul nuw nsw i64 %v3_dd781, 8
  %v3_dd7c = trunc i64 %v3_dd7c3 to i32
  store i32 %v3_dd7c, i32* %r2.global-to-local, align 4
  %v2_dd805 = mul nuw nsw i64 %v3_dd781, 2
  %v2_dd80 = trunc i64 %v2_dd805 to i32
  %v2_dd84 = add i32 %v3_dd7c, %v2_dd80
  store i32 %v2_dd84, i32* %r3.global-to-local, align 4
  %v2_dd88 = sub i32 %v0_dd6c, %v2_dd84
  %v1_dd8c = add i32 %v2_dd88, 1
  %v1_dd90 = call i32 @function_12c48(i32 %v1_dd8c)
  br label %dec_label_pc_d9b4

dec_label_pc_dd98:                                ; preds = %dec_label_pc_dac0
  %v0_dd9c = load i32, i32* @sl, align 4
  %v1_dd9c = inttoptr i32 %v0_dd9c to i32*
  %v2_dd9c = load i32, i32* %v1_dd9c, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ddac = call i32 @function_11280(i32 %v2_dd9c, i32 %v2_dda0, i32 2, i32 16384)
  br label %dec_label_pc_daec

dec_label_pc_ddb4:                                ; preds = %dec_label_pc_dc28, %dec_label_pc_dbbc
  %v0_ddb4 = load i32, i32* @r5, align 4
  %v1_ddb4 = inttoptr i32 %v0_ddb4 to i32*
  %v2_ddb4 = load i32, i32* %v1_ddb4, align 4
  store i32 %v2_ddb4, i32* %r3.global-to-local, align 4
  %v7_ddb8 = icmp eq i32 %v2_ddb4, 4
  br i1 %v7_ddb8, label %dec_label_pc_d9b4, label %bb44

bb44:                                             ; preds = %dec_label_pc_ddb4
  %v8_ddbc = icmp eq i32 %v2_ddb4, 11
  br i1 %v8_ddbc, label %dec_label_pc_d9b4, label %dec_label_pc_ddc4

dec_label_pc_ddc4:                                ; preds = %bb44, %dec_label_pc_dc48, %dec_label_pc_dbf4
  %v0_ddc4 = load i32, i32* @sl, align 4
  %v1_ddc4 = inttoptr i32 %v0_ddc4 to i32*
  %v2_ddc4 = load i32, i32* %v1_ddc4, align 4
  store i32 56784, i32* @lr, align 4
  %v1_ddcc = icmp ne i32 %v2_ddc4, -1
  call void @__pseudo_cond_branch(i1 %v1_ddcc, i32 ptrtoint (i32* @global_var_10b64.94 to i32))
  store i32 124208, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 124208 to i32*), align 16
  %v1_dde0 = call i32 @function_12c48(i32 1)
  br label %dec_label_pc_d9b4

dec_label_pc_dde8:                                ; preds = %dec_label_pc_dd24
  %v2_ddf0 = call i32 @function_100a4(i8* %v1_ddf0)
  %sext = mul i32 %v2_ddf0, 16777216
  %v1_ddf4 = sdiv i32 %sext, 16777216
  %v7_ddf4 = inttoptr i32 %v1_ddf4 to i8*
  store i8* %v7_ddf4, i8** %stack_var_-42, align 4
  %v0_ddf8 = call i32 @function_10360()
  store i32 %v0_ddf8, i32* @global_var_20780.45, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_de0c = load i32, i32* @r5, align 4
  store i32 %v0_de0c, i32* %r2.global-to-local, align 4
  %v0_de10 = load i32, i32* @r4, align 4
  %v1_de10 = inttoptr i32 %v0_de10 to i32*
  %v2_de10 = load i32, i32* %v1_de10, align 4
  %v4_de14 = call i32 @function_11280(i32 %v2_de10, i32 ptrtoint (i32* @global_var_15ee0.97 to i32), i32 %v0_de0c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_de20 = load i32, i32* @r4, align 4
  %v1_de20 = inttoptr i32 %v0_de20 to i32*
  %v2_de20 = load i32, i32* %v1_de20, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_de2c = call i32 @function_11280(i32 %v2_de20, i32 %v2_dda0, i32 1, i32 16384)
  %v3_de30 = load i8*, i8** %stack_var_-42, align 4
  %v4_de30 = ptrtoint i8* %v3_de30 to i32
  store i32 %v4_de30, i32* %r2.global-to-local, align 4
  %v3_de34 = icmp eq i8* %v3_de30, null
  br i1 %v3_de34, label %dec_label_pc_d9b4, label %dec_label_pc_de3c

dec_label_pc_de3c:                                ; preds = %dec_label_pc_dde8
  %v0_de40 = load i32, i32* @r4, align 4
  %v1_de40 = inttoptr i32 %v0_de40 to i32*
  %v2_de40 = load i32, i32* %v1_de40, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_de4c = call i32 @function_11280(i32 %v2_de40, i32 %v2_d7f0, i32 %v4_de30, i32 16384)
  br label %dec_label_pc_d9b4

dec_label_pc_de54:                                ; preds = %dec_label_pc_dbfc
  %v0_de58 = load i32, i32* @r8, align 4
  %v1_de58 = inttoptr i32 %v0_de58 to i32*
  %v2_de58 = load i32, i32* %v1_de58, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_de64 = add i32 %v4_dc00, 16384
  store i32 %v1_de64, i32* %r3.global-to-local, align 4
  %v4_de68 = call i32 @function_1120c(i32 %v2_de58, i32 %v2_dda0, i32 2, i32 %v1_de64)
  br label %dec_label_pc_d9b4

dec_label_pc_de70:                                ; preds = %dec_label_pc_dc0c
  %v0_de70 = load i32, i32* @r8, align 4
  %v1_de70 = inttoptr i32 %v0_de70 to i32*
  %v2_de70 = load i32, i32* %v1_de70, align 4
  %v1_de74 = call i32 @function_10b64(i32 %v2_de70)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_de7c = load i32, i32* @r8, align 4
  %v2_de7c = inttoptr i32 %v1_de7c to i32*
  store i32 -1, i32* %v2_de7c, align 4
  br label %dec_label_pc_d9b4

; uselistorder directives
  uselistorder i32 %v3_dcc0, { 3, 2, 1, 0 }
  uselistorder i8* %v3_dc9c, { 1, 0 }
  uselistorder i32 %v5_dc78, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dc6c, { 1, 0 }
  uselistorder i32 %v7_dc3c, { 1, 0 }
  uselistorder i32 %v5_dc14, { 1, 0, 3, 2 }
  uselistorder i32 %v4_dc00, { 2, 0, 1, 3 }
  uselistorder i32 %v4_dbe8, { 1, 0 }
  uselistorder i32 %v2_db84, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_dac8, { 1, 0, 2 }
  uselistorder i32 %v2_dac4, { 2, 0, 1 }
  uselistorder i32 %v5_daac, { 1, 2, 0 }
  uselistorder i32 %v2_d9f0, { 2, 1, 0 }
  uselistorder i32 %v1_d9e4, { 1, 2, 0 }
  uselistorder i32 %v1_d9c8, { 1, 2, 0 }
  uselistorder i32 %v2_dda0, { 2, 0, 4, 3, 1 }
  uselistorder i32 %v2_dad8, { 3, 2, 1, 0 }
  uselistorder i32 %v2_d9b0, { 1, 0, 2 }
  uselistorder i32 %v2_d84c, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_d834, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d75c, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 9 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @function_12c48, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e704.92 to i32), { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e704.92 to i8*), { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @function_d660, { 1, 0 }
  uselistorder i32 (i32)* @function_ced0, { 1, 0 }
  uselistorder i32 (i32)* @function_85e0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_df7c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_d4b4, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_d618.68 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_2078c.76 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_113e8, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_daec, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_da34, { 2, 0, 1 }
  uselistorder label %dec_label_pc_da24, { 1, 0 }
  uselistorder label %dec_label_pc_d9b4, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d804, { 2, 0, 1 }
}

define i32 @function_dea0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dea0:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_dea0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dea0, label %bb, label %dec_label_pc_dea0..thread1_crit_edge

dec_label_pc_dea0..thread1_crit_edge:             ; preds = %dec_label_pc_dea0
  %v0_deac.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_dea0
  %v2_dea8 = load i32, i32* @r4, align 4
  %v3_dea8 = and i32 %v2_dea8, 262144
  %v4_dea8 = icmp ne i32 %v3_dea8, 0
  store i1 %v4_dea8, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_dea0..thread1_crit_edge, %bb
  %v0_deac = phi i1 [ %v0_deac.pre, %dec_label_pc_dea0..thread1_crit_edge ], [ %v4_dea8, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_deac, i32 -22312608)
  %v0_deb4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_deb4, label %bb3, label %bb4

bb3:                                              ; preds = %.thread1
  %v6_deb4 = and i32 %arg1, 268435456
  %v7_deb4 = icmp ne i32 %v6_deb4, 0
  store i1 %v7_deb4, i1* %cpsr_c.global-to-local, align 1
  br label %bb4

bb4:                                              ; preds = %.thread1, %bb3
  ret i32 %arg1

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %bb4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_deb8() local_unnamed_addr {
dec_label_pc_deb8:
  %v2_dec4 = load i32, i32* @global_var_1e708.99, align 4
  %v2_dec8 = load i32, i32* @global_var_1e714.101, align 4
  %v4_ded4 = mul i32 %v2_dec4, 2048
  %v5_ded4 = xor i32 %v4_ded4, %v2_dec4
  store i32 %v5_ded4, i32* @r3, align 4
  %v4_ded8 = udiv i32 %v2_dec8, 524288
  %v5_ded8 = xor i32 %v4_ded8, %v2_dec8
  %v2_dedc = load i32, i32* @global_var_1e70c.103, align 4
  %v2_dee0 = load i32, i32* @global_var_1e710.105, align 4
  %v2_dee4 = xor i32 %v5_ded8, %v5_ded4
  %v4_dee8 = udiv i32 %v5_ded4, 256
  %v5_dee8 = xor i32 %v2_dee4, %v4_dee8
  store i32 %v2_dedc, i32* @global_var_1e708.99, align 4
  store i32 %v2_dee0, i32* @global_var_1e70c.103, align 4
  store i32 %v2_dec8, i32* @global_var_1e710.105, align 4
  store i32 %v5_dee8, i32* @global_var_1e714.101, align 4
  ret i32 %v5_dee8

; uselistorder directives
  uselistorder i32 %v2_dec8, { 2, 1, 0 }
  uselistorder i32 %v2_dec4, { 1, 0 }
}

define i32 @function_df14(i32 %arg1) local_unnamed_addr {
dec_label_pc_df14:
  %v2_df20 = call i32 @function_107e4(i32* null)
  store i32 %v2_df20, i32* @r0, align 4
  store i32 %v2_df20, i32* @global_var_1e708.99, align 4
  %v0_df2c = call i32 @function_107d0()
  store i32 %v0_df2c, i32* @r0, align 4
  %v0_df34 = call i32 @function_10728()
  %v2_df3c = xor i32 %v0_df2c, %v0_df34
  store i32 %v2_df3c, i32* @global_var_1e70c.103, align 4
  %v1_df44 = call i32 @function_10fa8(i32 %v2_df3c)
  %v2_df48 = load i32, i32* @global_var_1e70c.103, align 4
  %v2_df54 = xor i32 %v2_df48, %v1_df44
  store i32 %v2_df54, i32* @global_var_1e714.101, align 4
  store i32 %v1_df44, i32* @global_var_1e710.105, align 4
  ret i32 %v1_df44

; uselistorder directives
  uselistorder i32 %v1_df44, { 1, 2, 0 }
  uselistorder i32 ()* @function_10728, { 2, 1, 0 }
}

define i32 @function_df7c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_df7c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_df7c = load i32, i32* @r4, align 4
  %v6_df7c = load i32, i32* @r5, align 4
  %v9_df7c = load i32, i32* @r6, align 4
  %v12_df7c = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_df90 = call i32 @function_fb64(i32 28)
  %v3_df9c = call i32 @function_faa0(i32 28, i32* null)
  store i32 %v3_df9c, i32* @r1, align 4
  %v2_dfa8 = bitcast i32* %stack_var_-72 to i8*
  %v3_dfa8 = call i32 @function_110a0(i8* %v2_dfa8, i32 %v3_df9c)
  %v2_dfac = icmp eq i32 %arg2, 0
  br i1 %v2_dfac, label %dec_label_pc_e028, label %dec_label_pc_dfb4

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_df7c
  store i32 ptrtoint (i32* @global_var_1e708.99 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e70c.103 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e710.105 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1e714.101 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e00c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_dfc8

dec_label_pc_dfc8:                                ; preds = %dec_label_pc_dfc8.dec_label_pc_dfc8_crit_edge, %dec_label_pc_dfb4
  %v1_dfec = phi i32 [ %v1_dfec.pre, %dec_label_pc_dfc8.dec_label_pc_dfc8_crit_edge ], [ ptrtoint (i32* @global_var_1e708.99 to i32), %dec_label_pc_dfb4 ]
  %v2_dfc8 = load i32, i32* @global_var_1e714.101, align 4
  store i32 %v2_dfc8, i32* %r2.global-to-local, align 4
  %v2_dfcc = load i32, i32* @global_var_1e708.99, align 4
  %v4_dfd0 = udiv i32 %v2_dfc8, 524288
  %v5_dfd0 = xor i32 %v4_dfd0, %v2_dfc8
  %v4_dfd4 = mul i32 %v2_dfcc, 2048
  %v5_dfd4 = xor i32 %v4_dfd4, %v2_dfcc
  %v2_dfd8 = xor i32 %v5_dfd0, %v5_dfd4
  %v2_dfdc = load i32, i32* @global_var_1e70c.103, align 4
  %v2_dfe0 = load i32, i32* @global_var_1e710.105, align 4
  store i32 %v2_dfe0, i32* %ip.global-to-local, align 4
  %v4_dfe4 = udiv i32 %v5_dfd4, 256
  %v5_dfe4 = xor i32 %v2_dfd8, %v4_dfe4
  store i32 %v5_dfe4, i32* @r4, align 4
  %v2_dfec = inttoptr i32 %v1_dfec to i32*
  store i32 %v2_dfdc, i32* %v2_dfec, align 4
  %v0_dff0 = load i32, i32* %ip.global-to-local, align 4
  %v1_dff0 = load i32, i32* %r8.global-to-local, align 4
  %v2_dff0 = inttoptr i32 %v1_dff0 to i32*
  store i32 %v0_dff0, i32* %v2_dff0, align 4
  %v0_dff4 = load i32, i32* %r2.global-to-local, align 4
  %v1_dff4 = load i32, i32* @r7, align 4
  %v2_dff4 = inttoptr i32 %v1_dff4 to i32*
  store i32 %v0_dff4, i32* %v2_dff4, align 4
  %v0_dff8 = load i32, i32* @r4, align 4
  %v1_dff8 = load i32, i32* @r6, align 4
  %v2_dff8 = inttoptr i32 %v1_dff8 to i32*
  store i32 %v0_dff8, i32* %v2_dff8, align 4
  %v2_dffc = call i32 @function_100a4(i8* %v2_dfa8)
  %v0_e004 = load i32, i32* @r4, align 4
  %v2_e008 = call i32 @function_106fc(i32 %v0_e004, i32 %v2_dffc)
  %v2_e010 = add i32 %v2_dffc, %v2_e00c
  %v1_e014 = add i32 %v2_e010, -32
  %v2_e014 = inttoptr i32 %v1_e014 to i8*
  %v3_e014 = load i8, i8* %v2_e014, align 1
  %v2_e018 = load i32, i32* @r5, align 4
  %v3_e018 = load i32, i32* %fp.global-to-local, align 4
  %v4_e018 = add i32 %v3_e018, %v2_e018
  %v5_e018 = inttoptr i32 %v4_e018 to i8*
  store i8 %v3_e014, i8* %v5_e018, align 1
  %v0_e01c = load i32, i32* @r5, align 4
  %v1_e01c = add i32 %v0_e01c, 1
  store i32 %v1_e01c, i32* @r5, align 4
  %v1_e020 = load i32, i32* %sb.global-to-local, align 4
  %v9_e020 = icmp eq i32 %v1_e01c, %v1_e020
  br i1 %v9_e020, label %dec_label_pc_e028, label %dec_label_pc_dfc8.dec_label_pc_dfc8_crit_edge

dec_label_pc_dfc8.dec_label_pc_dfc8_crit_edge:    ; preds = %dec_label_pc_dfc8
  %v1_dfec.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_dfc8

dec_label_pc_e028:                                ; preds = %dec_label_pc_dfc8, %dec_label_pc_df7c
  %v1_e02c = call i32 @function_fac4(i32 28)
  store i32 %v3_df7c, i32* @r4, align 4
  store i32 %v6_df7c, i32* @r5, align 4
  store i32 %v9_df7c, i32* @r6, align 4
  store i32 %v12_df7c, i32* @r7, align 4
  ret i32 %v1_e02c

; uselistorder directives
  uselistorder i32 %v2_dfcc, { 1, 0 }
  uselistorder i32 %v2_dfc8, { 1, 0, 2 }
}

define i32 @function_e04c(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e04c:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e04c = load i32, i32* %r1.global-to-local, align 4
  %v3_e050 = load i32, i32* @r4, align 4
  store i32 %v3_e050, i32* %stack_var_-28, align 4
  %v0_e054 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e054, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e04c, 1
  br i1 %tmp16, label %dec_label_pc_e0fc, label %dec_label_pc_e05c

dec_label_pc_e05c:                                ; preds = %dec_label_pc_e04c
  store i32 ptrtoint (i32* @global_var_1e714.101 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e710.105 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e70c.103 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e708.99 to i32), i32* %r6.global-to-local, align 4
  %v2_e06c = load i32, i32* @global_var_1e714.101, align 4
  store i32 %v2_e06c, i32* %lr.global-to-local, align 4
  %v2_e070 = load i32, i32* @global_var_1e710.105, align 4
  store i32 %v2_e070, i32* %r4.global-to-local, align 4
  %v2_e074 = load i32, i32* @global_var_1e70c.103, align 4
  store i32 %v2_e074, i32* %r0.global-to-local, align 4
  %v2_e078 = load i32, i32* @global_var_1e708.99, align 4
  br label %dec_label_pc_e09c

dec_label_pc_e080:                                ; preds = %dec_label_pc_e0bc
  %v1_e080 = trunc i32 %v5_e0ac to i16
  %v3_e080 = inttoptr i32 %v9_e0b0 to i16*
  store i16 %v1_e080, i16* %v3_e080, align 2
  %v4_e080 = load i32, i32* %r5.global-to-local, align 4
  %v5_e080 = add i32 %v4_e080, -2
  store i32 %v5_e080, i32* %r5.global-to-local, align 4
  %v0_e084.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e084

dec_label_pc_e084:                                ; preds = %.thread, %dec_label_pc_e080
  %v0_e084 = phi i32 [ %v9_e0b4, %.thread ], [ %v0_e084.pre, %dec_label_pc_e080 ]
  %v2_e0805 = phi i32 [ %v12_e0b0, %.thread ], [ %v5_e080, %dec_label_pc_e080 ]
  %tmp17 = icmp slt i32 %v0_e084, 1
  br i1 %tmp17, label %dec_label_pc_e104, label %dec_label_pc_e090

dec_label_pc_e090:                                ; preds = %dec_label_pc_e084
  %v0_e088 = load i32, i32* %r0.global-to-local, align 4
  %v0_e090 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e090, i32* %r0.global-to-local, align 4
  %v0_e094 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e094, i32* %r4.global-to-local, align 4
  %v0_e098 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e098, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e09c

dec_label_pc_e09c:                                ; preds = %dec_label_pc_e05c, %dec_label_pc_e090
  %v0_e0e8 = phi i32 [ %v2_e074, %dec_label_pc_e05c ], [ %v0_e090, %dec_label_pc_e090 ]
  %v9_e0b0 = phi i32 [ %v0_e054, %dec_label_pc_e05c ], [ %v2_e0805, %dec_label_pc_e090 ]
  %v0_e0c8 = phi i32 [ %v0_e04c, %dec_label_pc_e05c ], [ %v0_e084, %dec_label_pc_e090 ]
  %v0_e0dc = phi i32 [ %v2_e06c, %dec_label_pc_e05c ], [ %v0_e098, %dec_label_pc_e090 ]
  %v0_e0d8 = phi i32 [ %v2_e078, %dec_label_pc_e05c ], [ %v0_e088, %dec_label_pc_e090 ]
  %v4_e09c = mul i32 %v0_e0d8, 2048
  %v5_e09c = xor i32 %v4_e09c, %v0_e0d8
  %v4_e0a0 = udiv i32 %v0_e0dc, 524288
  %v5_e0a0 = xor i32 %v4_e0a0, %v0_e0dc
  %v2_e0a4 = xor i32 %v5_e0a0, %v5_e09c
  %v4_e0ac = udiv i32 %v5_e09c, 256
  %v5_e0ac = xor i32 %v2_e0a4, %v4_e0ac
  store i32 %v5_e0ac, i32* %r3.global-to-local, align 4
  %v7_e0b0 = icmp sgt i32 %v0_e0c8, 3
  br i1 %v7_e0b0, label %.thread, label %dec_label_pc_e0bc

.thread:                                          ; preds = %dec_label_pc_e09c
  %v10_e0b0 = inttoptr i32 %v9_e0b0 to i32*
  store i32 %v5_e0ac, i32* %v10_e0b0, align 4
  %v11_e0b0 = load i32, i32* %r5.global-to-local, align 4
  %v12_e0b0 = add i32 %v11_e0b0, 4
  store i32 %v12_e0b0, i32* %r5.global-to-local, align 4
  %v8_e0b4 = load i32, i32* %r1.global-to-local, align 4
  %v9_e0b4 = add i32 %v8_e0b4, -4
  store i32 %v9_e0b4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e084

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e09c
  %v7_e0c8 = icmp eq i32 %v0_e0c8, 1
  store i32 %v5_e0ac, i32* %r3.global-to-local, align 4
  %v1_e0d0 = add i32 %v0_e0c8, -2
  store i32 %v1_e0d0, i32* %r1.global-to-local, align 4
  br i1 %v7_e0c8, label %dec_label_pc_e0d8, label %dec_label_pc_e080

dec_label_pc_e0d8:                                ; preds = %dec_label_pc_e0bc
  store i32 %v5_e0ac, i32* %r3.global-to-local, align 4
  %v1_e0e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_e0e8 = inttoptr i32 %v1_e0e8 to i32*
  store i32 %v0_e0e8, i32* %v2_e0e8, align 4
  %v0_e0ec = load i32, i32* %r4.global-to-local, align 4
  %v1_e0ec = load i32, i32* %r7.global-to-local, align 4
  %v2_e0ec = inttoptr i32 %v1_e0ec to i32*
  store i32 %v0_e0ec, i32* %v2_e0ec, align 4
  %v0_e0f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e0f0 = load i32, i32* %r8.global-to-local, align 4
  %v2_e0f0 = inttoptr i32 %v1_e0f0 to i32*
  store i32 %v0_e0f0, i32* %v2_e0f0, align 4
  %v0_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f4 = load i32, i32* %sl.global-to-local, align 4
  %v2_e0f4 = inttoptr i32 %v1_e0f4 to i32*
  store i32 %v0_e0f4, i32* %v2_e0f4, align 4
  %v0_e0f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f8 = trunc i32 %v0_e0f8 to i8
  %v2_e0f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_e0f8 = inttoptr i32 %v2_e0f8 to i8*
  store i8 %v1_e0f8, i8* %v3_e0f8, align 1
  br label %dec_label_pc_e0fc

dec_label_pc_e0fc:                                ; preds = %dec_label_pc_e04c, %dec_label_pc_e104, %dec_label_pc_e0d8
  %v2_e0fc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e0fc, i32* @r4, align 4
  %v1_e100 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e100

dec_label_pc_e104:                                ; preds = %dec_label_pc_e084
  %v0_e104 = load i32, i32* %r3.global-to-local, align 4
  %v1_e104 = load i32, i32* %sl.global-to-local, align 4
  %v2_e104 = inttoptr i32 %v1_e104 to i32*
  store i32 %v0_e104, i32* %v2_e104, align 4
  %v0_e108 = load i32, i32* %lr.global-to-local, align 4
  %v1_e108 = load i32, i32* %r8.global-to-local, align 4
  %v2_e108 = inttoptr i32 %v1_e108 to i32*
  store i32 %v0_e108, i32* %v2_e108, align 4
  %v0_e10c = load i32, i32* %r4.global-to-local, align 4
  %v1_e10c = load i32, i32* %r7.global-to-local, align 4
  %v2_e10c = inttoptr i32 %v1_e10c to i32*
  store i32 %v0_e10c, i32* %v2_e10c, align 4
  %v0_e110 = load i32, i32* %r0.global-to-local, align 4
  %v1_e110 = load i32, i32* %r6.global-to-local, align 4
  %v2_e110 = inttoptr i32 %v1_e110 to i32*
  store i32 %v0_e110, i32* %v2_e110, align 4
  br label %dec_label_pc_e0fc

; uselistorder directives
  uselistorder i32 %v9_e0b4, { 1, 0 }
  uselistorder i32 %v12_e0b0, { 1, 0 }
  uselistorder i32 %v5_e0ac, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e0d8, { 1, 0 }
  uselistorder i32 %v0_e0dc, { 1, 0 }
  uselistorder i32 %v0_e0c8, { 1, 0, 2 }
  uselistorder i32 %v0_e084, { 1, 0 }
  uselistorder i32 %v0_e04c, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1e708.99, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1e708.99 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1e70c.103, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1e710.105, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e714.101, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e0fc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e09c, { 1, 0 }
}

define i32 @function_e128() local_unnamed_addr {
dec_label_pc_e128:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e128 = load i32, i32* @r4, align 4
  store i32 %v3_e128, i32* %stack_var_-16, align 4
  %v12_e128 = load i32, i32* @lr, align 4
  %v0_e12c = load i32, i32* @r0, align 4
  store i32 %v0_e12c, i32* %r5.global-to-local, align 4
  %v1_e130 = add i32 %v0_e12c, 4
  %v2_e130 = inttoptr i32 %v1_e130 to i32*
  %v3_e130 = load i32, i32* %v2_e130, align 4
  store i32 %v3_e130, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 57684, i32* @lr, align 4
  %v1_e150 = icmp ne i32 %v3_e130, -1
  call void @__pseudo_cond_branch(i1 %v1_e150, i32 ptrtoint (i32* @global_var_10b64.94 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e160 = call i32 @function_1133c(i32 2, i32 1, i32 0)
  store i32 %v3_e160, i32* %r0.global-to-local, align 4
  %v7_e164 = icmp eq i32 %v3_e160, -1
  %v1_e168 = load i32, i32* %r5.global-to-local, align 4
  %v2_e168 = add i32 %v1_e168, 4
  %v3_e168 = inttoptr i32 %v2_e168 to i32*
  store i32 %v3_e160, i32* %v3_e168, align 4
  br i1 %v7_e164, label %dec_label_pc_e128.dec_label_pc_e1e0_crit_edge, label %dec_label_pc_e170

dec_label_pc_e128.dec_label_pc_e1e0_crit_edge:    ; preds = %dec_label_pc_e128
  %v1_e1e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e170:                                ; preds = %dec_label_pc_e128
  %v2_e134 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e170 = load i32, i32* %r5.global-to-local, align 4
  %v1_e170 = add i32 %v0_e170, 28
  store i32 %v1_e170, i32* @r0, align 4
  %v0_e174 = load i32, i32* %r6.global-to-local, align 4
  %v2_e174 = add i32 %v0_e170, 24
  %v3_e174 = inttoptr i32 %v2_e174 to i32*
  store i32 %v0_e174, i32* %v3_e174, align 4
  store i32 256, i32* @r1, align 4
  %v0_e17c = call i32 @function_10138()
  store i32 %v0_e17c, i32* %r0.global-to-local, align 4
  %v0_e180 = load i32, i32* %r5.global-to-local, align 4
  %v1_e180 = add i32 %v0_e180, 4
  %v2_e180 = inttoptr i32 %v1_e180 to i32*
  %v3_e180 = load i32, i32* %v2_e180, align 4
  store i32 %v3_e180, i32* %r4.global-to-local, align 4
  %v0_e184 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e184, i32* %r2.global-to-local, align 4
  store i32 %v3_e180, i32* %r0.global-to-local, align 4
  %v2_e190 = call i32 @function_10998(i32 %v3_e180, i32 3)
  %v1_e198 = or i32 %v2_e190, 2048
  store i32 %v1_e198, i32* %r2.global-to-local, align 4
  %v0_e19c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e19c, i32* %r0.global-to-local, align 4
  %v2_e1a0 = call i32 @function_10998(i32 %v0_e19c, i32 4)
  store i32 %v2_e1a0, i32* %r0.global-to-local, align 4
  %v2_e1a8 = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_e1a8, i32* %r2.global-to-local, align 4
  %v1_e1b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_e1b0 = add i32 %v1_e1b0, 12
  %v3_e1b0 = inttoptr i32 %v2_e1b0 to i32*
  store i32 1, i32* %v3_e1b0, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e1bc = load i32, i32* %r2.global-to-local, align 4
  %v1_e1bc = load i32, i32* %r5.global-to-local, align 4
  %v2_e1bc = add i32 %v1_e1bc, 8
  %v3_e1bc = inttoptr i32 %v2_e1bc to i32*
  store i32 %v0_e1bc, i32* %v3_e1bc, align 4
  %v0_e1c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_e1c0 = add i32 %v0_e1c0, 16
  %v2_e1c0 = inttoptr i32 %v1_e1c0 to i32*
  %v3_e1c0 = load i32, i32* %v2_e1c0, align 4
  store i32 %v3_e1c0, i32* @ip, align 4
  %v1_e1c4 = add i32 %v0_e1c0, 4
  %v2_e1c4 = inttoptr i32 %v1_e1c4 to i32*
  %v3_e1c4 = load i32, i32* %v2_e1c4, align 4
  store i32 %v3_e1c4, i32* %r0.global-to-local, align 4
  %v1_e1c8 = add i32 %v0_e1c0, 20
  %v2_e1c8 = inttoptr i32 %v1_e1c8 to i16*
  %v3_e1c8 = load i16, i16* %v2_e1c8, align 2
  %v4_e1c8 = zext i16 %v3_e1c8 to i32
  store i32 %v4_e1c8, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e1dc = call i32 @function_11124(i32 %v3_e1c4, i32 %v2_e134, i32 16)
  store i32 %v3_e1dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e1e0:                                ; preds = %dec_label_pc_e128.dec_label_pc_e1e0_crit_edge, %dec_label_pc_e170
  %v1_e1e8 = phi i32 [ %v1_e1e8.pre, %dec_label_pc_e128.dec_label_pc_e1e0_crit_edge ], [ %v3_e1dc, %dec_label_pc_e170 ]
  %v2_e1e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e1e4, i32* @r4, align 4
  store i32 %v12_e128, i32* @lr, align 4
  ret i32 %v1_e1e8

; uselistorder directives
  uselistorder i32 %v3_e160, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_10138, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e1e0, { 1, 0 }
}

define i32 @function_e1f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e1f0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e1f0 = load i32, i32* @r4, align 4
  %v6_e1f0 = load i32, i32* @r5, align 4
  %v9_e1f0 = load i32, i32* @r6, align 4
  %v12_e1f0 = load i32, i32* @r7, align 4
  %v15_e1f0 = load i32, i32* @r8, align 4
  %v18_e1f0 = load i32, i32* @sb, align 4
  %v21_e1f0 = load i32, i32* @sl, align 4
  %v24_e1f0 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1e718.121 to i32), i32* @fp, align 4
  %v2_e1f8 = load i32, i32* @global_var_1e718.121, align 4
  store i32 ptrtoint (i32* @global_var_1e744.123 to i32), i32* @sl, align 4
  %v1_e204 = add i32 %v2_e1f8, 1
  store i32 %v1_e204, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e210 = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_e210, i32* %r0.global-to-local, align 4
  %v3_e214 = mul i32 %v1_e204, 16
  store i32 %v3_e214, i32* %r1.global-to-local, align 4
  %v4_e21c = inttoptr i32 %v2_e210 to i32*
  %v5_e21c = call i32 @function_11fd8(i32* %v4_e21c, i32 %v3_e214, i32 %arg3, i32 %v1_e204)
  %v2_e220 = load i32, i32* @global_var_1e718.121, align 4
  store i32 %v2_e220, i32* %r2.global-to-local, align 4
  store i32 %v5_e21c, i32* @r8, align 4
  %v0_e228 = load i32, i32* @r5, align 4
  store i32 %v0_e228, i32* %r0.global-to-local, align 4
  %v1_e230 = load i32, i32* @sl, align 4
  %v2_e230 = inttoptr i32 %v1_e230 to i32*
  store i32 %v5_e21c, i32* %v2_e230, align 4
  %v1_e234 = inttoptr i32 %v0_e228 to i8*
  %v2_e234 = call i32 @function_100a4(i8* %v1_e234)
  %sext = mul i32 %v2_e234, 16777216
  %v1_e238 = sdiv i32 %sext, 16777216
  %v2_e238 = add nsw i32 %v1_e238, 1
  store i32 %v2_e238, i32* @r4, align 4
  store i32 %v1_e238, i32* @r7, align 4
  store i32 %v2_e238, i32* @r0, align 4
  %v0_e244 = call i32 @function_11584()
  store i32 %v0_e244, i32* %r0.global-to-local, align 4
  %v0_e248 = load i32, i32* @r5, align 4
  store i32 %v0_e248, i32* %r1.global-to-local, align 4
  %v0_e24c = load i32, i32* @r4, align 4
  store i32 %v0_e24c, i32* %r2.global-to-local, align 4
  store i32 %v0_e244, i32* %r6.global-to-local, align 4
  %v3_e254 = call i32 @function_10114(i32 %v0_e244, i32 %v0_e248, i32 %v0_e24c)
  store i32 %v3_e254, i32* %r0.global-to-local, align 4
  %v0_e258 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e258, 1
  %extract.t6 = trunc i32 %v0_e258 to i8
  br i1 %tmp22, label %dec_label_pc_e27c, label %dec_label_pc_e260

dec_label_pc_e260:                                ; preds = %dec_label_pc_e1f0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e264

dec_label_pc_e264:                                ; preds = %dec_label_pc_e264, %dec_label_pc_e260
  %v2_e26c = phi i32 [ %v1_e270, %dec_label_pc_e264 ], [ 0, %dec_label_pc_e260 ]
  %v1_e264 = load i32, i32* %r6.global-to-local, align 4
  %v2_e264 = add i32 %v1_e264, %v2_e26c
  %v3_e264 = inttoptr i32 %v2_e264 to i8*
  %v4_e264 = load i8, i8* %v3_e264, align 1
  %v6_e264 = zext i8 %v4_e264 to i32
  %v1_e268 = xor i32 %v6_e264, 84
  store i32 %v1_e268, i32* %r3.global-to-local, align 4
  %v1_e26c = trunc i32 %v1_e268 to i8
  store i8 %v1_e26c, i8* %v3_e264, align 1
  %v0_e270 = load i32, i32* %r2.global-to-local, align 4
  %v1_e270 = add i32 %v0_e270, 1
  store i32 %v1_e270, i32* %r2.global-to-local, align 4
  %v1_e274 = load i32, i32* @r7, align 4
  %v9_e274 = icmp eq i32 %v1_e270, %v1_e274
  br i1 %v9_e274, label %dec_label_pc_e27c.loopexit, label %dec_label_pc_e264

dec_label_pc_e27c.loopexit:                       ; preds = %dec_label_pc_e264
  %extract.t = trunc i32 %v1_e270 to i8
  br label %dec_label_pc_e27c

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e27c.loopexit, %dec_label_pc_e1f0
  %v0_e28c.off0 = phi i8 [ %extract.t, %dec_label_pc_e27c.loopexit ], [ %extract.t6, %dec_label_pc_e1f0 ]
  %v2_e27c = load i32, i32* @global_var_1e718.121, align 4
  %v2_e280 = load i32, i32* @global_var_1e744.123, align 4
  %v3_e284 = mul i32 %v2_e27c, 16
  store i32 %v3_e284, i32* @sb, align 4
  %v2_e288 = add i32 %v2_e280, %v3_e284
  store i32 %v2_e288, i32* %r2.global-to-local, align 4
  %v3_e28c = add i32 %v2_e288, 12
  %v4_e28c = inttoptr i32 %v3_e28c to i8*
  store i8 %v0_e28c.off0, i8* %v4_e28c, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e220, i32* %r3.global-to-local, align 4
  %v0_e298 = load i32, i32* %r6.global-to-local, align 4
  %v1_e298 = load i32, i32* @r8, align 4
  %v5_e298 = mul i32 %v2_e220, 16
  %v6_e298 = add i32 %v1_e298, %v5_e298
  %v7_e298 = inttoptr i32 %v6_e298 to i32*
  store i32 %v0_e298, i32* %v7_e298, align 4
  %v2_e29c = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_e29c, i32* @r7, align 4
  %v1_e2a0 = inttoptr i32 %arg2 to i8*
  %v2_e2a0 = call i32 @function_100a4(i8* %v1_e2a0)
  %sext1 = mul i32 %v2_e2a0, 16777216
  %v1_e2a4 = sdiv i32 %sext1, 16777216
  %v2_e2a4 = add nsw i32 %v1_e2a4, 1
  store i32 %v2_e2a4, i32* @r4, align 4
  store i32 %v1_e2a4, i32* @r6, align 4
  store i32 %v2_e2a4, i32* @r0, align 4
  %v0_e2b0 = call i32 @function_11584()
  store i32 %v0_e2b0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e2b8 = load i32, i32* @r4, align 4
  store i32 %v0_e2b8, i32* %r2.global-to-local, align 4
  store i32 %v0_e2b0, i32* %r5.global-to-local, align 4
  %v3_e2c0 = call i32 @function_10114(i32 %v0_e2b0, i32 %arg2, i32 %v0_e2b8)
  store i32 %v3_e2c0, i32* %r0.global-to-local, align 4
  %v0_e2c4 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e2c4, 1
  %extract.t8 = trunc i32 %v0_e2c4 to i8
  br i1 %tmp23, label %dec_label_pc_e2e8, label %dec_label_pc_e2cc

dec_label_pc_e2cc:                                ; preds = %dec_label_pc_e27c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e2d0

dec_label_pc_e2d0:                                ; preds = %dec_label_pc_e2d0, %dec_label_pc_e2cc
  %v2_e2d8 = phi i32 [ %v1_e2dc, %dec_label_pc_e2d0 ], [ 0, %dec_label_pc_e2cc ]
  %v1_e2d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_e2d0 = add i32 %v1_e2d0, %v2_e2d8
  %v3_e2d0 = inttoptr i32 %v2_e2d0 to i8*
  %v4_e2d0 = load i8, i8* %v3_e2d0, align 1
  %v6_e2d0 = zext i8 %v4_e2d0 to i32
  %v1_e2d4 = xor i32 %v6_e2d0, 84
  store i32 %v1_e2d4, i32* %r3.global-to-local, align 4
  %v1_e2d8 = trunc i32 %v1_e2d4 to i8
  store i8 %v1_e2d8, i8* %v3_e2d0, align 1
  %v0_e2dc = load i32, i32* %r2.global-to-local, align 4
  %v1_e2dc = add i32 %v0_e2dc, 1
  store i32 %v1_e2dc, i32* %r2.global-to-local, align 4
  %v1_e2e0 = load i32, i32* @r6, align 4
  %v9_e2e0 = icmp eq i32 %v1_e2dc, %v1_e2e0
  br i1 %v9_e2e0, label %dec_label_pc_e2e8.loopexit, label %dec_label_pc_e2d0

dec_label_pc_e2e8.loopexit:                       ; preds = %dec_label_pc_e2d0
  %extract.t7 = trunc i32 %v1_e2dc to i8
  br label %dec_label_pc_e2e8

dec_label_pc_e2e8:                                ; preds = %dec_label_pc_e2e8.loopexit, %dec_label_pc_e27c
  %v0_e2f8.off0 = phi i8 [ %extract.t7, %dec_label_pc_e2e8.loopexit ], [ %extract.t8, %dec_label_pc_e27c ]
  %v2_e2e8 = load i32, i32* @global_var_1e718.121, align 4
  store i32 %v2_e2e8, i32* %r0.global-to-local, align 4
  %v2_e2ec = load i32, i32* @global_var_1e744.123, align 4
  %v3_e2f0 = mul i32 %v2_e2e8, 16
  store i32 %v3_e2f0, i32* %r1.global-to-local, align 4
  %v2_e2f4 = or i32 %v3_e2f0, 13
  %v3_e2f8 = add i32 %v2_e2f4, %v2_e2ec
  %v4_e2f8 = inttoptr i32 %v3_e2f8 to i8*
  store i8 %v0_e2f8.off0, i8* %v4_e2f8, align 1
  store i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32* %r4.global-to-local, align 4
  %v2_e304 = load i16, i16* bitcast (i16** @global_var_1e748.125 to i16*), align 4
  %v3_e304 = zext i16 %v2_e304 to i32
  store i32 %v3_e304, i32* %lr.global-to-local, align 4
  %v2_e30c = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_e30c, i32* %r2.global-to-local, align 4
  %v0_e314 = load i32, i32* %r1.global-to-local, align 4
  %v2_e314 = add i32 %v0_e314, %v2_e30c
  store i32 %v2_e314, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e31c = load i32, i32* @sb, align 4
  %v1_e31c = load i32, i32* @r7, align 4
  %v2_e31c = add i32 %v1_e31c, %v0_e31c
  store i32 %v2_e31c, i32* %ip.global-to-local, align 4
  %v0_e320 = load i32, i32* %r0.global-to-local, align 4
  %v1_e320 = add i32 %v0_e320, 1
  store i32 %v1_e320, i32* %r0.global-to-local, align 4
  %v3_e324 = add i32 %v2_e314, 10
  %v4_e324 = inttoptr i32 %v3_e324 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32 16), i32 16) to i16), i16* %v4_e324, align 2
  %v0_e328 = load i32, i32* %lr.global-to-local, align 4
  %v1_e328 = trunc i32 %v0_e328 to i16
  %v2_e328 = load i32, i32* %r1.global-to-local, align 4
  %v3_e328 = add i32 %v2_e328, 8
  %v4_e328 = inttoptr i32 %v3_e328 to i16*
  store i16 %v1_e328, i16* %v4_e328, align 2
  %v0_e32c = load i32, i32* %r5.global-to-local, align 4
  %v1_e32c = load i32, i32* %ip.global-to-local, align 4
  %v2_e32c = add i32 %v1_e32c, 4
  %v3_e32c = inttoptr i32 %v2_e32c to i32*
  store i32 %v0_e32c, i32* %v3_e32c, align 4
  %v1_e330 = load i32, i32* @fp, align 4
  %v2_e330 = inttoptr i32 %v1_e330 to i32*
  store i32 %v1_e320, i32* %v2_e330, align 4
  %v0_e334 = load i32, i32* %r3.global-to-local, align 4
  %v1_e334 = trunc i32 %v0_e334 to i16
  %v2_e334 = load i32, i32* %r4.global-to-local, align 4
  %v3_e334 = inttoptr i32 %v2_e334 to i16*
  store i16 %v1_e334, i16* %v3_e334, align 2
  store i32 %v3_e1f0, i32* @r4, align 4
  store i32 %v6_e1f0, i32* @r5, align 4
  store i32 %v9_e1f0, i32* @r6, align 4
  store i32 %v12_e1f0, i32* @r7, align 4
  store i32 %v15_e1f0, i32* @r8, align 4
  store i32 %v18_e1f0, i32* @sb, align 4
  store i32 %v21_e1f0, i32* @sl, align 4
  store i32 %v24_e1f0, i32* @fp, align 4
  ret i32 %v1_e320

; uselistorder directives
  uselistorder i32 %v3_e2f0, { 1, 0 }
  uselistorder i32 %v1_e2dc, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e2b0, { 1, 0, 2 }
  uselistorder i32 %v3_e284, { 1, 0 }
  uselistorder i32 %v1_e270, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e244, { 1, 0, 2 }
  uselistorder i32 %v2_e220, { 1, 0, 2 }
  uselistorder i32 %v3_e214, { 1, 0 }
  uselistorder i32 %v1_e204, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_100a4, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_e350(i32 %arg1) local_unnamed_addr {
dec_label_pc_e350:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e350 = load i32, i32* @r5, align 4
  %v0_e35c = call i32 @function_10854()
  store i32 %v0_e35c, i32* %r0.global-to-local, align 4
  %v7_e360 = icmp eq i32 %v0_e35c, -1
  %. = zext i1 %v7_e360 to i32
  %tmp369 = icmp slt i32 %v0_e35c, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_207a4.127 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e37c = icmp eq i32 %storemerge329, 0
  store i1 %v2_e37c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e35c, i32* @global_var_207a4.127, align 4
  br i1 %v2_e37c, label %dec_label_pc_e398, label %dec_label_pc_e388

dec_label_pc_e388:                                ; preds = %dec_label_pc_e350
  store i32 %v6_e350, i32* @r5, align 4
  ret i32 %v0_e35c

dec_label_pc_e398:                                ; preds = %dec_label_pc_e350
  %v0_e398 = call i32 @function_10360()
  store i32 %v0_e398, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e398, i32* @global_var_20780.45, align 4
  %v1_e3a4 = call i32 @function_df14(i32 %v0_e398)
  %v0_e3a8 = load i32, i32* @r4, align 4
  store i32 %v0_e3a8, i32* %r0.global-to-local, align 4
  %v1_e3ac = inttoptr i32 %v0_e3a8 to i32*
  %v2_e3ac = call i32 @function_107e4(i32* %v1_e3ac)
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e3ac, i32* @global_var_1e74c.119, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e3c0 = call i32 @function_11ea4(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_2079c.131 to i32), i32* %r3.global-to-local, align 4
  %v0_e3c8 = load i32, i32* @r4, align 4
  store i32 %v0_e3c8, i32* %stack_var_-52, align 4
  store i32 %v2_e3c0, i32* @global_var_2079c.131, align 4
  store i32 %v0_e3c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3d4

dec_label_pc_e3d4:                                ; preds = %dec_label_pc_e3d4.dec_label_pc_e3d4_crit_edge, %dec_label_pc_e398
  %v2_e3e0 = phi i32 [ %v2_e3e0.pre, %dec_label_pc_e3d4.dec_label_pc_e3d4_crit_edge ], [ %v2_e3c0, %dec_label_pc_e398 ]
  %v0_e3e8 = phi i32 [ %v0_e418, %dec_label_pc_e3d4.dec_label_pc_e3d4_crit_edge ], [ %v0_e3c8, %dec_label_pc_e398 ]
  %v3_e3dc = mul i32 %v0_e3e8, 256
  store i32 %v3_e3dc, i32* %ip.global-to-local, align 4
  %v2_e3f0 = mul i32 %v0_e3e8, 288
  %v1_e3f8 = add i32 %v0_e3e8, 1
  store i32 %v1_e3f8, i32* %r0.global-to-local, align 4
  %v2_e3fc = add i32 %v2_e3f0, %v2_e3e0
  store i32 %v2_e3fc, i32* %r2.global-to-local, align 4
  store i32 %v2_e3fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e410 = add i32 %v2_e3fc, 4
  %v3_e410 = inttoptr i32 %v2_e410 to i32*
  store i32 -1, i32* %v3_e410, align 4
  %v0_e414 = load i32, i32* @r5, align 4
  %v1_e414 = load i32, i32* %r1.global-to-local, align 4
  %v2_e414 = add i32 %v1_e414, 12
  %v3_e414 = inttoptr i32 %v2_e414 to i32*
  store i32 %v0_e414, i32* %v3_e414, align 4
  %v0_e418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e418, i32* %stack_var_-52, align 4
  %v7_e41c = icmp sgt i32 %v1_e3f8, 255
  br i1 %v7_e41c, label %dec_label_pc_e420, label %dec_label_pc_e3d4.dec_label_pc_e3d4_crit_edge

dec_label_pc_e3d4.dec_label_pc_e3d4_crit_edge:    ; preds = %dec_label_pc_e3d4
  %v2_e3e0.pre = load i32, i32* @global_var_2079c.131, align 4
  br label %dec_label_pc_e3d4

dec_label_pc_e420:                                ; preds = %dec_label_pc_e3d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e42c = call i32 @function_1133c(i32 2, i32 3, i32 6)
  store i32 %v3_e42c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_207a0.133 to i32), i32* %r2.global-to-local, align 4
  %v2_e434 = icmp eq i32 %v3_e42c, -1
  store i1 %v2_e434, i1* %cpsr_c.global-to-local, align 1
  %v7_e434 = icmp eq i32 %v3_e42c, -1
  store i1 %v7_e434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e42c, i32* @r4, align 4
  store i32 %v3_e42c, i32* @global_var_207a0.133, align 4
  br i1 %v7_e434, label %dec_label_pc_e420.dec_label_pc_f9f4_crit_edge, label %dec_label_pc_e444

dec_label_pc_e420.dec_label_pc_f9f4_crit_edge:    ; preds = %dec_label_pc_e420
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_f9f4

dec_label_pc_e444:                                ; preds = %dec_label_pc_e420
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e448 = load i32, i32* @r5, align 4
  store i32 %v0_e448, i32* %r2.global-to-local, align 4
  %v2_e44c = call i32 @function_10998(i32 %v3_e42c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e454 = or i32 %v2_e44c, 2048
  store i32 %v1_e454, i32* %r2.global-to-local, align 4
  %v0_e458 = load i32, i32* @r4, align 4
  store i32 %v0_e458, i32* %r0.global-to-local, align 4
  %v2_e45c = call i32 @function_10998(i32 %v0_e458, i32 4)
  %v2_e464 = load i32, i32* @global_var_207a0.133, align 4
  store i32 %v2_e464, i32* %r0.global-to-local, align 4
  %v2_e468 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e470 = load i32, i32* @r5, align 4
  store i32 %v0_e470, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e478 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e478, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e488 = call i32 @function_112f8(i32 %v2_e464, i32 %v0_e470, i32 3, i32 %v2_e478, i32 4)
  store i32 %v5_e488, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e48c = icmp eq i32 %v5_e488, 0
  store i1 %v2_e48c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e48c, label %dec_label_pc_e494, label %dec_label_pc_f9e8

dec_label_pc_e494:                                ; preds = %dec_label_pc_e444, %dec_label_pc_e494
  %v0_e494 = call i32 @function_deb8()
  %v3_e498 = mul i32 %v0_e494, 65536
  store i32 %v3_e498, i32* %r0.global-to-local, align 4
  %v1_e4a0 = mul i32 %v0_e494, 256
  %v3_e4a4 = and i32 %v1_e4a0, 65280
  %tmp372 = udiv i32 %v0_e494, 256
  %v4_e4a8 = urem i32 %tmp372, 256
  %v5_e4a8 = or i32 %v4_e4a8, %v3_e4a4
  store i32 %v5_e4a8, i32* %r3.global-to-local, align 4
  %v2_e4ac = icmp ugt i32 %v5_e4a8, 1023
  store i1 %v2_e4ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e4ac = icmp eq i32 %v5_e4a8, 1024
  store i1 %v7_e4ac, i1* %cpsr_z.global-to-local, align 1
  %v3_e4b4 = icmp ult i32 %v5_e4a8, 1022
  br i1 %v3_e4b4, label %dec_label_pc_e494, label %dec_label_pc_e4b8

dec_label_pc_e4b8:                                ; preds = %dec_label_pc_e494
  %v5_e4b0.le = trunc i32 %v0_e494 to i16
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r0.global-to-local, align 4
  %v2_e4bc = load i8, i8* bitcast (i8** @global_var_1e71c.135 to i8*), align 4
  %v3_e4bc = zext i8 %v2_e4bc to i32
  %v1_e4c0 = and i32 %v3_e4bc, 240
  %v1_e4c4 = or i32 %v1_e4c0, 5
  store i32 %v1_e4c4, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e71c.135 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1e71e.136 to i16*), align 4
  %v0_e4e4 = call i32 @function_deb8()
  %v1_e4e4 = trunc i32 %v0_e4e4 to i16
  %v3_e4ec = load i8, i8* @global_var_1e73c.139, align 1
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %ip.global-to-local, align 4
  %v1_e4fc = urem i8 %v3_e4ec, 16
  store i16 %v1_e4e4, i16* bitcast (i32* @global_var_1e720.140 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e50c = or i8 %v1_e4fc, 80
  store i8 64, i8* bitcast (i32* @global_var_1e724.141 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1e725.142 to i8*), align 4
  store i8 %v1_e50c, i8* @global_var_1e73c.139, align 1
  %v4_e51c = sext i16 %v5_e4b0.le to i32
  store i32 %v4_e51c, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1e732.143, align 2
  store i16 %v5_e4b0.le, i16* @global_var_1e730.138, align 2
  %v0_e52c = call i32 @function_deb8()
  %v1_e52c = trunc i32 %v0_e52c to i16
  %v3_e534 = load i8, i8* @global_var_1e73d.144, align 1
  %v4_e534 = zext i8 %v3_e534 to i32
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* %ip.global-to-local, align 4
  %v1_e53c = or i32 %v4_e534, 2
  store i32 %v1_e53c, i32* %r3.global-to-local, align 4
  store i16 %v1_e52c, i16* bitcast (i32* @global_var_1e73e.145 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_15eec.147 to i32), i32* %r1.global-to-local, align 4
  %v1_e548 = trunc i32 %v1_e53c to i8
  store i8 %v1_e548, i8* @global_var_1e73d.144, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e554 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint (i32* @global_var_15eec.147 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15ef0.151 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e564 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_15ef0.151 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15ef8.153 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e574 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_15ef8.153 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_15f04.155 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f04.155 to i32), i32* %r1.global-to-local, align 4
  %v5_e584 = call i32 @function_e1f0(i32 ptrtoint ([7 x i8]* @global_var_15f04.155 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f04.155 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15eec.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e594 = call i32 @function_e1f0(i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32 ptrtoint (i32* @global_var_15eec.147 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f14.159 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e5a4 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f14.159 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_15f20.161 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f20.161 to i32), i32* %r1.global-to-local, align 4
  %v5_e5b4 = call i32 @function_e1f0(i32 ptrtoint ([6 x i8]* @global_var_15f20.161 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f20.161 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f28.163 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e5c4 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f28.163 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_15f30.165 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f30.165 to i32), i32* %r1.global-to-local, align 4
  %v5_e5d4 = call i32 @function_e1f0(i32 ptrtoint ([8 x i8]* @global_var_15f30.165 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f30.165 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e5e4 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f38.167 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e5f4 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint (i32* @global_var_15f38.167 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f48.169 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e604 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f48.169 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15f50.171 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f50.171 to i32), i32* %r1.global-to-local, align 4
  %v5_e614 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15f50.171 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f50.171 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15f50.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f48.169 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e624 = call i32 @function_e1f0(i32 ptrtoint ([5 x i8]* @global_var_15f50.171 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f48.169 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f58.173 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e634 = call i32 @function_e1f0(i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32 ptrtoint (i32* @global_var_15f58.173 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f64.175 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e644 = call i32 @function_e1f0(i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), i32 ptrtoint (i32* @global_var_15f64.175 to i32), i32 15)
  store i32 %v4_e644, i32* %r0.global-to-local, align 4
  %v2_e64c = ptrtoint i32* %stack_var_-1866 to i32
  %v1_e978 = add i32 %v2_e64c, 20
  %v1_e9cc = add i32 %v2_e64c, 16
  %v2_e9cc = inttoptr i32 %v1_e9cc to i32*
  %v1_e9e0 = add i32 %v2_e64c, 9
  %v2_e9e0 = inttoptr i32 %v1_e9e0 to i8*
  %v1_ea74 = add i32 %v2_e64c, 12
  %v2_ea74 = inttoptr i32 %v1_ea74 to i32*
  %v2_ec58 = ptrtoint i32* %stack_var_-40 to i32
  %v2_eca0 = ptrtoint i32* %stack_var_-68 to i32
  %v2_eca4 = ptrtoint i32* %stack_var_-224 to i32
  %v2_eca8 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f67c = ptrtoint i32* %stack_var_-45 to i32
  %v2_f690 = ptrtoint i32* %stack_var_-77 to i32
  %v2_f5e8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f7a4 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e674 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e654

dec_label_pc_e654:                                ; preds = %dec_label_pc_ee3c, %dec_label_pc_e4b8
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e4b8 ], [ %stack_var_-1876.1, %dec_label_pc_ee3c ]
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e65c = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_e65c, i32* @r4, align 4
  %v3_e660 = icmp uge i32 %stack_var_-1876.0, %v2_e65c
  store i1 %v3_e660, i1* %cpsr_c.global-to-local, align 1
  %v9_e660 = icmp eq i32 %stack_var_-1876.0, %v2_e65c
  store i1 %v9_e660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e660, label %dec_label_pc_e968, label %dec_label_pc_e668

dec_label_pc_e668:                                ; preds = %dec_label_pc_e654
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %bb407, %dec_label_pc_e668
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e68c = call i32 @function_deb8()
  %v1_e68c = trunc i32 %v0_e68c to i16
  store i32 %v0_e68c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %ip.global-to-local, align 4
  %v2_e698 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_e698, i32* %r3.global-to-local, align 4
  store i16 %v1_e68c, i16* bitcast (i32* @global_var_1e720.140 to i16*), align 4
  store i32 %v2_e698, i32* @global_var_1e728.176, align 4
  br label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %dec_label_pc_e7fc, %dec_label_pc_e6d4, %dec_label_pc_e830, %dec_label_pc_e824, %dec_label_pc_e818, %dec_label_pc_e80c, %.thread48, %.thread32, %.thread28, %.thread24, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e770, %dec_label_pc_e768, %bb383, %dec_label_pc_e738, %dec_label_pc_e714, %bb376, %dec_label_pc_e6e4, %bb375, %dec_label_pc_e6cc, %bb374, %bb400, %dec_label_pc_e678
  %v0_e6a4 = call i32 @function_deb8()
  store i32 %v0_e6a4, i32* %r0.global-to-local, align 4
  %v1_e6a8 = urem i32 %v0_e6a4, 256
  store i32 %v1_e6a8, i32* %r1.global-to-local, align 4
  %v3_e6ac = udiv i32 %v0_e6a4, 256
  store i32 %v3_e6ac, i32* %r3.global-to-local, align 4
  %v3_e6b0 = udiv i32 %v0_e6a4, 65536
  store i32 %v3_e6b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e6b4 = icmp eq i32 %v1_e6a8, 0
  store i1 %v2_e6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6b4, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e6a4
  %v3_e6b8 = icmp ugt i32 %v1_e6a8, 126
  store i1 %v3_e6b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e6b8 = icmp eq i32 %v1_e6a8, 127
  store i1 %v8_e6b8, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e6a4, %bb373
  %v0_e6c8 = phi i1 [ true, %dec_label_pc_e6a4 ], [ %v8_e6b8, %bb373 ]
  %v1_e6bc = urem i32 %v3_e6ac, 256
  store i32 %v1_e6bc, i32* %ip.global-to-local, align 4
  %v1_e6c0 = urem i32 %v3_e6b0, 256
  store i32 %v1_e6c0, i32* %r2.global-to-local, align 4
  %v1_e6c4 = and i32 %v0_e6a4, 8388608
  %v2_e6c4 = icmp ne i32 %v1_e6c4, 0
  store i1 %v2_e6c4, i1* %cpsr_c.global-to-local, align 1
  %v3_e6c4 = udiv i32 %v0_e6a4, 16777216
  store i32 %v3_e6c4, i32* %r0.global-to-local, align 4
  br i1 %v0_e6c8, label %dec_label_pc_e6a4, label %dec_label_pc_e6cc

dec_label_pc_e6cc:                                ; preds = %bb374
  %v2_e6cc = icmp ugt i32 %v1_e6a8, 2
  store i1 %v2_e6cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e6cc = icmp eq i32 %v1_e6a8, 3
  store i1 %v7_e6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6cc, label %dec_label_pc_e6a4, label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e6cc
  %v1_e6d4 = add nsw i32 %v1_e6a8, -15
  store i32 %v1_e6d4, i32* %r3.global-to-local, align 4
  %v2_e6d8 = icmp ugt i32 %v1_e6a8, 55
  store i1 %v2_e6d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6d8 = icmp eq i32 %v1_e6a8, 56
  store i1 %v7_e6d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6d8, label %dec_label_pc_e6a4, label %bb375

bb375:                                            ; preds = %dec_label_pc_e6d4
  %v3_e6dc = icmp ne i32 %v1_e6d4, 0
  store i1 %v3_e6dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e6dc = icmp eq i32 %v1_e6d4, 1
  store i1 %v8_e6dc, i1* %cpsr_z.global-to-local, align 1
  %v2_e6e0 = xor i1 %v3_e6dc, true
  %v3_e6e0 = or i1 %v8_e6dc, %v2_e6e0
  br i1 %v3_e6e0, label %dec_label_pc_e6a4, label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %bb375
  %v2_e6e4 = icmp ugt i32 %v1_e6a8, 9
  store i1 %v2_e6e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e6e4 = icmp eq i32 %v1_e6a8, 10
  store i1 %v7_e6e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6e4, label %dec_label_pc_e6a4, label %dec_label_pc_e6ec

dec_label_pc_e6ec:                                ; preds = %dec_label_pc_e6e4
  %v2_e6ec = icmp ugt i32 %v1_e6a8, 191
  store i1 %v2_e6ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e6ec = icmp eq i32 %v1_e6a8, 192
  store i1 %v7_e6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6ec, label %bb376, label %dec_label_pc_e6f8

bb376:                                            ; preds = %dec_label_pc_e6ec
  %v3_e6f0 = icmp ugt i32 %v1_e6bc, 167
  store i1 %v3_e6f0, i1* %cpsr_c.global-to-local, align 1
  %v8_e6f0 = icmp eq i32 %v1_e6bc, 168
  store i1 %v8_e6f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e6f0, label %dec_label_pc_e6a4, label %dec_label_pc_e6f8

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e6ec, %bb376
  %v7_e6f8 = icmp eq i32 %v1_e6a8, 172
  %.461 = zext i1 %v7_e6f8 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e704 = icmp ugt i32 %v1_e6bc, 14
  store i1 %v2_e704, i1* %cpsr_c.global-to-local, align 1
  %v7_e704 = icmp eq i32 %v1_e6bc, 15
  store i1 %v7_e704, i1* %cpsr_z.global-to-local, align 1
  %v2_e708 = xor i1 %v2_e704, true
  %v3_e708 = or i1 %v7_e704, %v2_e708
  br i1 %v3_e708, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e6f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e71c

bb379:                                            ; preds = %dec_label_pc_e6f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e70c = icmp eq i1 %v7_e6f8, false
  store i1 %v2_e70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e70c, label %dec_label_pc_e71c, label %dec_label_pc_e714

dec_label_pc_e714:                                ; preds = %bb379
  %v2_e714 = icmp ugt i32 %v1_e6bc, 30
  store i1 %v2_e714, i1* %cpsr_c.global-to-local, align 1
  %v7_e714 = icmp eq i32 %v1_e6bc, 31
  store i1 %v7_e714, i1* %cpsr_z.global-to-local, align 1
  %v2_e718 = xor i1 %v2_e714, true
  %v3_e718 = or i1 %v7_e714, %v2_e718
  br i1 %v3_e718, label %dec_label_pc_e6a4, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %.thread8, %dec_label_pc_e714, %bb379
  %v7_e71c = icmp eq i32 %v1_e6a8, 100
  %.462 = zext i1 %v7_e71c to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e728 = icmp ugt i32 %v1_e6bc, 62
  store i1 %v2_e728, i1* %cpsr_c.global-to-local, align 1
  %v7_e728 = icmp eq i32 %v1_e6bc, 63
  store i1 %v7_e728, i1* %cpsr_z.global-to-local, align 1
  %v2_e72c = xor i1 %v2_e728, true
  %v3_e72c = or i1 %v7_e728, %v2_e72c
  br i1 %v3_e72c, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e71c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e740

bb382:                                            ; preds = %dec_label_pc_e71c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e730 = icmp eq i1 %v7_e71c, false
  store i1 %v2_e730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e730, label %dec_label_pc_e740, label %dec_label_pc_e738

dec_label_pc_e738:                                ; preds = %bb382
  %v2_e738 = icmp ugt i32 %v1_e6bc, 125
  store i1 %v2_e738, i1* %cpsr_c.global-to-local, align 1
  %v7_e738 = icmp eq i32 %v1_e6bc, 126
  store i1 %v7_e738, i1* %cpsr_z.global-to-local, align 1
  %v2_e73c = xor i1 %v2_e738, true
  %v3_e73c = or i1 %v7_e738, %v2_e73c
  br i1 %v3_e73c, label %dec_label_pc_e6a4, label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %.thread13, %dec_label_pc_e738, %bb382
  %v2_e740 = icmp ugt i32 %v1_e6a8, 168
  store i1 %v2_e740, i1* %cpsr_c.global-to-local, align 1
  %v7_e740 = icmp eq i32 %v1_e6a8, 169
  store i1 %v7_e740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e740, label %bb383, label %dec_label_pc_e74c

bb383:                                            ; preds = %dec_label_pc_e740
  %v3_e744 = icmp eq i32 %v1_e6bc, 255
  store i1 %v3_e744, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e744, label %dec_label_pc_e6a4, label %dec_label_pc_e74c

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e740, %bb383
  %v7_e74c = icmp eq i32 %v1_e6a8, 198
  %.463 = zext i1 %v7_e74c to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e758 = icmp ugt i32 %v1_e6bc, 16
  store i1 %v2_e758, i1* %cpsr_c.global-to-local, align 1
  %v7_e758 = icmp eq i32 %v1_e6bc, 17
  store i1 %v7_e758, i1* %cpsr_z.global-to-local, align 1
  %v2_e75c = xor i1 %v2_e758, true
  %v3_e75c = or i1 %v7_e758, %v2_e75c
  br i1 %v3_e75c, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e74c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e770

bb386:                                            ; preds = %dec_label_pc_e74c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e760 = icmp eq i1 %v7_e74c, false
  store i1 %v2_e760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e760, label %dec_label_pc_e770, label %dec_label_pc_e768

dec_label_pc_e768:                                ; preds = %bb386
  %v2_e768 = icmp ugt i32 %v1_e6bc, 18
  store i1 %v2_e768, i1* %cpsr_c.global-to-local, align 1
  %v7_e768 = icmp eq i32 %v1_e6bc, 19
  store i1 %v7_e768, i1* %cpsr_z.global-to-local, align 1
  %v2_e76c = xor i1 %v2_e768, true
  %v3_e76c = or i1 %v7_e768, %v2_e76c
  br i1 %v3_e76c, label %dec_label_pc_e6a4, label %dec_label_pc_e770

dec_label_pc_e770:                                ; preds = %.thread19, %dec_label_pc_e768, %bb386
  %v2_e770 = icmp ugt i32 %v1_e6a8, 222
  store i1 %v2_e770, i1* %cpsr_c.global-to-local, align 1
  %v7_e770 = icmp eq i32 %v1_e6a8, 223
  store i1 %v7_e770, i1* %cpsr_z.global-to-local, align 1
  %v2_e774 = xor i1 %v7_e770, true
  %v3_e774 = and i1 %v2_e770, %v2_e774
  br i1 %v3_e774, label %dec_label_pc_e6a4, label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %dec_label_pc_e770
  %v7_e778 = icmp eq i32 %v1_e6a8, 106
  %.464 = zext i1 %v7_e778 to i32
  %v2_e784 = icmp ugt i32 %v1_e6bc, 185
  store i1 %v2_e784, i1* %cpsr_c.global-to-local, align 1
  %v7_e784 = icmp eq i32 %v1_e6bc, 186
  store i1 %v7_e784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e784, label %bb389, label %dec_label_pc_e790

bb389:                                            ; preds = %dec_label_pc_e778
  %v2_e778 = icmp ugt i32 %v1_e6a8, 105
  store i1 %v2_e778, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e778, label %dec_label_pc_e6a4, label %dec_label_pc_e790

dec_label_pc_e790:                                ; preds = %dec_label_pc_e778, %bb389
  %v2_e790 = icmp ugt i32 %v1_e6bc, 186
  store i1 %v2_e790, i1* %cpsr_c.global-to-local, align 1
  %v7_e790 = icmp eq i32 %v1_e6bc, 187
  store i1 %v7_e790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e790, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e790
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e7a4

.thread24:                                        ; preds = %dec_label_pc_e790
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e79c = icmp eq i1 %v7_e778, false
  store i1 %v2_e79c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e79c, label %dec_label_pc_e7a4, label %dec_label_pc_e6a4

dec_label_pc_e7a4:                                ; preds = %.thread25, %.thread24
  %v2_e7a4 = icmp ugt i32 %v1_e6bc, 184
  store i1 %v2_e7a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7a4 = icmp eq i32 %v1_e6bc, 185
  store i1 %v7_e7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7a4, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e7a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e7b8

.thread28:                                        ; preds = %dec_label_pc_e7a4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7b0 = icmp eq i1 %v7_e778, false
  store i1 %v2_e7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7b0, label %dec_label_pc_e7b8, label %dec_label_pc_e6a4

dec_label_pc_e7b8:                                ; preds = %.thread29, %.thread28
  %v2_e7b8 = icmp ugt i32 %v1_e6bc, 183
  store i1 %v2_e7b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7b8 = icmp eq i32 %v1_e6bc, 184
  store i1 %v7_e7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b8, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e7b8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e7cc

.thread32:                                        ; preds = %dec_label_pc_e7b8
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7c4 = icmp eq i1 %v7_e778, false
  store i1 %v2_e7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7c4, label %dec_label_pc_e7cc, label %dec_label_pc_e6a4

dec_label_pc_e7cc:                                ; preds = %.thread33, %.thread32
  %v2_e7cc = icmp ugt i32 %v1_e6a8, 149
  store i1 %v2_e7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e7cc = icmp eq i32 %v1_e6a8, 150
  store i1 %v7_e7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7cc, label %bb390, label %dec_label_pc_e7d8

bb390:                                            ; preds = %dec_label_pc_e7cc
  %v3_e7d0 = icmp ugt i32 %v1_e6bc, 30
  store i1 %v3_e7d0, i1* %cpsr_c.global-to-local, align 1
  %v8_e7d0 = icmp eq i32 %v1_e6bc, 31
  store i1 %v8_e7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7d0, label %dec_label_pc_e6a4, label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e7cc, %bb390
  %v2_e7d8 = icmp ugt i32 %v1_e6a8, 48
  store i1 %v2_e7d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d8 = icmp eq i32 %v1_e6a8, 49
  store i1 %v7_e7d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7d8, label %bb391, label %dec_label_pc_e7e4

bb391:                                            ; preds = %dec_label_pc_e7d8
  %v3_e7dc = icmp ugt i32 %v1_e6bc, 50
  store i1 %v3_e7dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e7dc = icmp eq i32 %v1_e6bc, 51
  store i1 %v8_e7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7dc, label %dec_label_pc_e6a4, label %dec_label_pc_e7e4

dec_label_pc_e7e4:                                ; preds = %dec_label_pc_e7d8, %bb391
  %v2_e7e4 = icmp ugt i32 %v1_e6a8, 177
  store i1 %v2_e7e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7e4 = icmp eq i32 %v1_e6a8, 178
  store i1 %v7_e7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7e4, label %bb392, label %dec_label_pc_e7f0

bb392:                                            ; preds = %dec_label_pc_e7e4
  %v3_e7e8 = icmp ugt i32 %v1_e6bc, 61
  store i1 %v3_e7e8, i1* %cpsr_c.global-to-local, align 1
  %v8_e7e8 = icmp eq i32 %v1_e6bc, 62
  store i1 %v8_e7e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7e8, label %dec_label_pc_e6a4, label %dec_label_pc_e7f0

dec_label_pc_e7f0:                                ; preds = %dec_label_pc_e7e4, %bb392
  %v2_e7f0 = icmp ugt i32 %v1_e6a8, 159
  store i1 %v2_e7f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7f0 = icmp eq i32 %v1_e6a8, 160
  store i1 %v7_e7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7f0, label %bb393, label %dec_label_pc_e7fc

bb393:                                            ; preds = %dec_label_pc_e7f0
  %v3_e7f4 = icmp ugt i32 %v1_e6bc, 12
  store i1 %v3_e7f4, i1* %cpsr_c.global-to-local, align 1
  %v8_e7f4 = icmp eq i32 %v1_e6bc, 13
  store i1 %v8_e7f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7f4, label %dec_label_pc_e6a4, label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e7f0, %bb393
  %v1_e7fc = add nsw i32 %v1_e6a8, -6
  store i32 %v1_e7fc, i32* %r3.global-to-local, align 4
  %v2_e800 = icmp ugt i32 %v1_e6a8, 10
  store i1 %v2_e800, i1* %cpsr_c.global-to-local, align 1
  %v7_e800 = icmp eq i32 %v1_e6a8, 11
  store i1 %v7_e800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e800, label %dec_label_pc_e6a4, label %bb394

bb394:                                            ; preds = %dec_label_pc_e7fc
  %v3_e804 = icmp ne i32 %v1_e7fc, 0
  store i1 %v3_e804, i1* %cpsr_c.global-to-local, align 1
  %v8_e804 = icmp eq i32 %v1_e7fc, 1
  store i1 %v8_e804, i1* %cpsr_z.global-to-local, align 1
  %v2_e808 = xor i1 %v3_e804, true
  %v3_e808 = or i1 %v8_e804, %v2_e808
  br i1 %v3_e808, label %dec_label_pc_e6a4, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %bb394
  %v2_e80c = icmp ugt i32 %v1_e6a8, 21
  store i1 %v2_e80c, i1* %cpsr_c.global-to-local, align 1
  %v7_e80c = icmp eq i32 %v1_e6a8, 22
  store i1 %v7_e80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e80c, label %dec_label_pc_e6a4, label %bb395

bb395:                                            ; preds = %dec_label_pc_e80c
  %v3_e810 = icmp ugt i32 %v1_e6a8, 20
  store i1 %v3_e810, i1* %cpsr_c.global-to-local, align 1
  %v8_e810 = icmp eq i32 %v1_e6a8, 21
  store i1 %v8_e810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e810, label %dec_label_pc_e6a4, label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %bb395
  %v2_e818 = icmp ugt i32 %v1_e6a8, 27
  store i1 %v2_e818, i1* %cpsr_c.global-to-local, align 1
  %v7_e818 = icmp eq i32 %v1_e6a8, 28
  store i1 %v7_e818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e818, label %dec_label_pc_e6a4, label %bb396

bb396:                                            ; preds = %dec_label_pc_e818
  %v3_e81c = icmp ugt i32 %v1_e6a8, 25
  store i1 %v3_e81c, i1* %cpsr_c.global-to-local, align 1
  %v8_e81c = icmp eq i32 %v1_e6a8, 26
  store i1 %v8_e81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e81c, label %dec_label_pc_e6a4, label %dec_label_pc_e824

dec_label_pc_e824:                                ; preds = %bb396
  %v2_e824 = icmp ugt i32 %v1_e6a8, 29
  store i1 %v2_e824, i1* %cpsr_c.global-to-local, align 1
  %v7_e824 = icmp eq i32 %v1_e6a8, 30
  store i1 %v7_e824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e824, label %dec_label_pc_e6a4, label %bb397

bb397:                                            ; preds = %dec_label_pc_e824
  %v3_e828 = icmp ugt i32 %v1_e6a8, 28
  store i1 %v3_e828, i1* %cpsr_c.global-to-local, align 1
  %v8_e828 = icmp eq i32 %v1_e6a8, 29
  store i1 %v8_e828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e828, label %dec_label_pc_e6a4, label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %bb397
  %v2_e830 = icmp ugt i32 %v1_e6a8, 54
  store i1 %v2_e830, i1* %cpsr_c.global-to-local, align 1
  %v7_e830 = icmp eq i32 %v1_e6a8, 55
  store i1 %v7_e830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e830, label %dec_label_pc_e6a4, label %bb398

bb398:                                            ; preds = %dec_label_pc_e830
  %v3_e834 = icmp ugt i32 %v1_e6a8, 32
  store i1 %v3_e834, i1* %cpsr_c.global-to-local, align 1
  %v8_e834 = icmp eq i32 %v1_e6a8, 33
  store i1 %v8_e834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e834, label %dec_label_pc_e6a4, label %dec_label_pc_e83c

dec_label_pc_e83c:                                ; preds = %bb398
  %v2_e83c = icmp ugt i32 %v1_e6a8, 214
  store i1 %v2_e83c, i1* %cpsr_c.global-to-local, align 1
  %v7_e83c = icmp eq i32 %v1_e6a8, 215
  store i1 %v7_e83c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e83c, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_e83c
  %v3_e840 = icmp ugt i32 %v1_e6a8, 213
  store i1 %v3_e840, i1* %cpsr_c.global-to-local, align 1
  %v8_e840 = icmp eq i32 %v1_e6a8, 214
  store i1 %v8_e840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e840, label %bb400, label %dec_label_pc_e850

.thread48:                                        ; preds = %dec_label_pc_e83c
  br label %dec_label_pc_e6a4

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e6a4

dec_label_pc_e850:                                ; preds = %bb399
  %v5_e85c = call i32 @llvm.bswap.i32(i32 %v0_e6a4)
  store i32 %v5_e85c, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e6a4, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_e864 = udiv i32 %v5_e85c, 16777216
  %tmp403 = and i32 %v0_e6a4, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_e86c = udiv i32 %tmp402, 256
  %v4_e870 = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e6a4, 65536
  %v3_e878 = icmp ne i32 %tmp405, 0
  store i1 %v3_e878, i1* %cpsr_c.global-to-local, align 1
  %v4_e878 = mul i32 %v5_e85c, 16777216
  %v5_e86c = or i32 %v4_e878, %v3_e864
  %v5_e870 = or i32 %v5_e86c, %v4_e86c
  %v5_e878 = or i32 %v5_e870, %v4_e870
  store i32 %v5_e878, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1e726.177 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_e878, i32* @global_var_1e72c.178, align 4
  %v3_e888 = call i32 @function_c848(i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32 20)
  %v4_e888 = trunc i32 %v3_e888 to i16
  store i32 %v3_e888, i32* %r0.global-to-local, align 4
  %v3_e88c = load i32, i32* %stack_var_-52, align 4
  %v5_e89c = sdiv i32 %v3_e88c, 10
  %v3_e8a0 = mul i32 %v5_e89c, 8
  store i32 %v3_e8a0, i32* %r2.global-to-local, align 4
  %v2_e8a8 = mul i32 %v5_e89c, 10
  store i32 %v2_e8a8, i32* %r3.global-to-local, align 4
  %v3_e8ac = icmp uge i32 %v3_e88c, %v2_e8a8
  store i1 %v3_e8ac, i1* %cpsr_c.global-to-local, align 1
  %v9_e8ac = icmp eq i32 %v3_e88c, %v2_e8a8
  store i1 %v9_e8ac, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_e8ac, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_e850
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_e888, i16* bitcast (i32* @global_var_1e726.177 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32 2) to i16*), align 2
  %v4_e8cc = load i32, i32* @global_var_1e72c.178, align 4
  store i32 %v4_e8cc, i32* @global_var_1e734.180, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_e850
  store i16 %v4_e888, i16* bitcast (i32* @global_var_1e726.177 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r0.global-to-local, align 4
  %v4_e8cc54 = load i32, i32* @global_var_1e72c.178, align 4
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_e8cc54, i32* @global_var_1e734.180, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_1e740.181 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_e8f8 = call i32 @function_c898(i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1e730.138 to i16) to i32), i32 5120, i32 20)
  %v7_e8f8 = trunc i32 %v6_e8f8 to i16
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r1.global-to-local, align 4
  %v2_e904 = load i32, i32* @global_var_207a0.133, align 4
  store i16 %v7_e8f8, i16* bitcast (i32* @global_var_1e740.181 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f7a4, i32* %ip.global-to-local, align 4
  store i32 %v2_e904, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_e94c = call i32 @function_112b8(i32 %v2_e904, i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32 40, i32 16384, i32 %v2_e674, i32 16)
  store i32 %v7_e94c, i32* %r0.global-to-local, align 4
  %v3_e950 = load i32, i32* %stack_var_-52, align 4
  %v1_e954 = add i32 %v3_e950, 1
  store i32 %v1_e954, i32* %r3.global-to-local, align 4
  %v3_e958 = icmp ugt i32 %v1_e954, 383
  store i1 %v3_e958, i1* %cpsr_c.global-to-local, align 1
  %v8_e958 = icmp eq i32 %v1_e954, 384
  store i1 %v8_e958, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e954, i32* %stack_var_-52, align 4
  %v5_e960 = icmp slt i32 %v1_e954, 384
  br i1 %v5_e960, label %dec_label_pc_e678, label %dec_label_pc_e964

dec_label_pc_e964:                                ; preds = %bb407
  %v0_e964 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e968

dec_label_pc_e968:                                ; preds = %dec_label_pc_e654, %dec_label_pc_e964
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e654 ], [ %v0_e964, %dec_label_pc_e964 ]
  %v0_e968 = call i32 @function_10f8c()
  store i32 %v0_e968, i32* %fp.global-to-local, align 4
  store i32 %v2_e64c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_e978, i32* @r4, align 4
  br label %dec_label_pc_e97c

dec_label_pc_e97c:                                ; preds = %dec_label_pc_ea3c, %dec_label_pc_ea34, %dec_label_pc_ea2c, %dec_label_pc_ea08, %dec_label_pc_e9f8, %dec_label_pc_e9dc, %dec_label_pc_e9c4, %dec_label_pc_ea24, %dec_label_pc_ea18, %dec_label_pc_e9bc, %dec_label_pc_eaf4, %dec_label_pc_e968
  %v1_e980 = phi i32 [ %v0_e968, %dec_label_pc_e968 ], [ %v1_e980.pre.pre, %dec_label_pc_eaf4 ], [ %v0_e9b0, %dec_label_pc_e9bc ], [ %v0_e9b0, %dec_label_pc_ea18 ], [ %v0_e9b0, %dec_label_pc_ea24 ], [ %v0_e9b0, %dec_label_pc_e9c4 ], [ %v0_e9b0, %dec_label_pc_e9dc ], [ %v0_e9b0, %dec_label_pc_e9f8 ], [ %v0_e9b0, %dec_label_pc_ea08 ], [ %v0_e9b0, %dec_label_pc_ea2c ], [ %v0_e9b0, %dec_label_pc_ea34 ], [ %v0_e9b0, %dec_label_pc_ea3c ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_e980 = inttoptr i32 %v1_e980 to i32*
  store i32 0, i32* %v2_e980, align 4
  %v2_e98c = load i32, i32* @global_var_207a0.133, align 4
  store i32 %v2_e98c, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e64c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e99c = load i32, i32* %ip.global-to-local, align 4
  %v6_e9a4 = call i32 @function_11244(i32 %v2_e98c, i32 %v2_e64c, i32 1514, i32 16384, i32 %v0_e99c, i32 %v0_e99c)
  store i32 %v6_e9a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9a8 = icmp eq i32 %v6_e9a4, 0
  store i1 %v2_e9a8, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_e9a4, 1
  br i1 %tmp408, label %dec_label_pc_eb04, label %dec_label_pc_e9b0

dec_label_pc_e9b0:                                ; preds = %dec_label_pc_e97c
  %v0_e9b0 = load i32, i32* %fp.global-to-local, align 4
  %v1_e9b0 = inttoptr i32 %v0_e9b0 to i32*
  %v2_e9b0 = load i32, i32* %v1_e9b0, align 4
  store i32 %v2_e9b0, i32* %r3.global-to-local, align 4
  %v2_e9b4 = icmp ugt i32 %v2_e9b0, 10
  store i1 %v2_e9b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b4 = icmp eq i32 %v2_e9b0, 11
  store i1 %v7_e9b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b4, label %dec_label_pc_eb04, label %dec_label_pc_e9bc

dec_label_pc_e9bc:                                ; preds = %dec_label_pc_e9b0
  %v2_e9bc = icmp ugt i32 %v6_e9a4, 38
  store i1 %v2_e9bc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9bc = icmp eq i32 %v6_e9a4, 39
  store i1 %v7_e9bc, i1* %cpsr_z.global-to-local, align 1
  %v2_e9c0 = xor i1 %v2_e9bc, true
  %v3_e9c0 = or i1 %v7_e9bc, %v2_e9c0
  br i1 %v3_e9c0, label %dec_label_pc_e97c, label %dec_label_pc_e9c4

dec_label_pc_e9c4:                                ; preds = %dec_label_pc_e9bc
  store i32 %v2_e64c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %ip.global-to-local, align 4
  %v3_e9cc = load i32, i32* %v2_e9cc, align 4
  store i32 %v3_e9cc, i32* %r2.global-to-local, align 4
  %v2_e9d0 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_e9d0, i32* %r3.global-to-local, align 4
  %v3_e9d4 = icmp uge i32 %v3_e9cc, %v2_e9d0
  store i1 %v3_e9d4, i1* %cpsr_c.global-to-local, align 1
  %v9_e9d4 = icmp eq i32 %v3_e9cc, %v2_e9d0
  store i1 %v9_e9d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e9d4, label %dec_label_pc_e9dc, label %dec_label_pc_e97c

dec_label_pc_e9dc:                                ; preds = %dec_label_pc_e9c4
  %v3_e9e0 = load i8, i8* %v2_e9e0, align 1
  %v4_e9e0 = zext i8 %v3_e9e0 to i32
  store i32 %v4_e9e0, i32* %r3.global-to-local, align 4
  %v2_e9e4 = icmp ugt i8 %v3_e9e0, 5
  store i1 %v2_e9e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e4 = icmp eq i8 %v3_e9e0, 6
  store i1 %v7_e9e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e4, label %dec_label_pc_e9ec, label %dec_label_pc_e97c

dec_label_pc_e9ec:                                ; preds = %dec_label_pc_e9dc
  %v0_e9ec = load i32, i32* @r4, align 4
  %v1_e9ec = inttoptr i32 %v0_e9ec to i16*
  %v2_e9ec = load i16, i16* %v1_e9ec, align 2
  %v3_e9ec = zext i16 %v2_e9ec to i32
  store i32 %v3_e9ec, i32* %ip.global-to-local, align 4
  %v2_e9f0 = icmp ugt i16 %v2_e9ec, 5887
  store i1 %v2_e9f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9f0 = icmp eq i16 %v2_e9ec, 5888
  store i1 %v7_e9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9f0, label %dec_label_pc_ea08, label %dec_label_pc_e9f8

dec_label_pc_e9f8:                                ; preds = %dec_label_pc_e9ec
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ea00 = icmp ugt i16 %v2_e9ec, 4872
  store i1 %v3_ea00, i1* %cpsr_c.global-to-local, align 1
  %v9_ea00 = icmp eq i16 %v2_e9ec, 4873
  store i1 %v9_ea00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea00, label %dec_label_pc_ea08, label %dec_label_pc_e97c

dec_label_pc_ea08:                                ; preds = %dec_label_pc_e9f8, %dec_label_pc_e9ec
  %v1_ea08 = add i32 %v0_e9ec, 2
  %v2_ea08 = inttoptr i32 %v1_ea08 to i16*
  %v3_ea08 = load i16, i16* %v2_ea08, align 2
  %v4_ea08 = zext i16 %v3_ea08 to i32
  store i32 %v4_ea08, i32* %r3.global-to-local, align 4
  store i32 %v4_e51c, i32* %r0.global-to-local, align 4
  %v3_ea10 = icmp uge i32 %v4_ea08, %v4_e51c
  store i1 %v3_ea10, i1* %cpsr_c.global-to-local, align 1
  %v9_ea10 = icmp eq i32 %v4_ea08, %v4_e51c
  store i1 %v9_ea10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea10, label %dec_label_pc_ea18, label %dec_label_pc_e97c

dec_label_pc_ea18:                                ; preds = %dec_label_pc_ea08
  %v1_ea18 = add i32 %v0_e9ec, 13
  %v2_ea18 = inttoptr i32 %v1_ea18 to i8*
  %v3_ea18 = load i8, i8* %v2_ea18, align 1
  %v4_ea18 = zext i8 %v3_ea18 to i32
  store i32 %v4_ea18, i32* %r3.global-to-local, align 4
  %v1_ea1c = and i32 %v4_ea18, 2
  %v2_ea1c = icmp eq i32 %v1_ea1c, 0
  store i1 %v2_ea1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea1c, label %dec_label_pc_e97c, label %dec_label_pc_ea24

dec_label_pc_ea24:                                ; preds = %dec_label_pc_ea18
  %v1_ea24 = and i32 %v4_ea18, 16
  %v2_ea24 = icmp eq i32 %v1_ea24, 0
  store i1 %v2_ea24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea24, label %dec_label_pc_e97c, label %dec_label_pc_ea2c

dec_label_pc_ea2c:                                ; preds = %dec_label_pc_ea24
  %v1_ea2c = and i32 %v4_ea18, 4
  %v2_ea2c = icmp eq i32 %v1_ea2c, 0
  store i1 %v2_ea2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea2c, label %dec_label_pc_ea34, label %dec_label_pc_e97c

dec_label_pc_ea34:                                ; preds = %dec_label_pc_ea2c
  %tmp = urem i8 %v3_ea18, 2
  %v2_ea34 = icmp eq i8 %tmp, 0
  store i1 %v2_ea34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea34, label %dec_label_pc_ea3c, label %dec_label_pc_e97c

dec_label_pc_ea3c:                                ; preds = %dec_label_pc_ea34
  %v1_ea3c = add i32 %v0_e9ec, 8
  %v2_ea3c = inttoptr i32 %v1_ea3c to i32*
  %v3_ea3c = load i32, i32* %v2_ea3c, align 4
  %v5_ea54 = call i32 @llvm.bswap.i32(i32 %v3_ea3c)
  %v1_ea58 = add i32 %v5_ea54, -1
  store i32 %v1_ea58, i32* %r2.global-to-local, align 4
  %v1_ea5c = and i32 %v1_ea58, 16711680
  store i32 %v1_ea5c, i32* %r0.global-to-local, align 4
  %v3_ea60 = udiv i32 %v1_ea58, 16777216
  %v4_ea68 = udiv i32 %v1_ea5c, 256
  %v5_ea68 = or i32 %v4_ea68, %v3_ea60
  %v1_ea64 = mul i32 %v1_ea58, 256
  %v4_ea6c = and i32 %v1_ea64, 16711680
  %v5_ea6c = or i32 %v5_ea68, %v4_ea6c
  store i32 %v5_ea6c, i32* %r3.global-to-local, align 4
  store i32 %v2_e64c, i32* %r1.global-to-local, align 4
  %v3_ea74 = load i32, i32* %v2_ea74, align 4
  store i32 %v3_ea74, i32* @lr, align 4
  %v5_ea78 = call i32 @llvm.bswap.i32(i32 %v1_ea58)
  store i32 %v5_ea78, i32* %r3.global-to-local, align 4
  %v3_ea7c = icmp uge i32 %v5_ea78, %v3_ea74
  store i1 %v3_ea7c, i1* %cpsr_c.global-to-local, align 1
  %v9_ea7c = icmp eq i32 %v5_ea78, %v3_ea74
  store i1 %v9_ea7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea7c, label %dec_label_pc_ea84, label %dec_label_pc_e97c

dec_label_pc_ea84:                                ; preds = %dec_label_pc_ea3c
  %v0_ea84 = load i32, i32* @r5, align 4
  %v2_ea84 = icmp ugt i32 %v0_ea84, 254
  store i1 %v2_ea84, i1* %cpsr_c.global-to-local, align 1
  %v7_ea84 = icmp eq i32 %v0_ea84, 255
  store i1 %v7_ea84, i1* %cpsr_z.global-to-local, align 1
  %v8_ea88 = icmp sgt i32 %v0_ea84, 255
  br i1 %v8_ea88, label %dec_label_pc_eb04, label %dec_label_pc_ea8c

dec_label_pc_ea8c:                                ; preds = %dec_label_pc_ea84
  %v2_ea94 = load i32, i32* @global_var_2079c.131, align 4
  store i32 %v2_ea94, i32* %r1.global-to-local, align 4
  %v3_ea98 = mul i32 %v0_ea84, 256
  store i32 %v3_ea98, i32* %r2.global-to-local, align 4
  %v2_ea9c = mul i32 %v0_ea84, 288
  store i32 %v2_ea9c, i32* %r3.global-to-local, align 4
  %v2_eaa0 = add i32 %v2_ea94, %v2_ea9c
  store i32 %v2_eaa0, i32* @r0, align 4
  %v1_eaa4 = add i32 %v2_eaa0, 12
  %v2_eaa4 = inttoptr i32 %v1_eaa4 to i32*
  %v3_eaa4 = load i32, i32* %v2_eaa4, align 4
  store i32 %v3_eaa4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eaa8 = icmp eq i32 %v3_eaa4, 0
  store i1 %v2_eaa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eaa8, label %dec_label_pc_eaec, label %dec_label_pc_eac8.preheader

dec_label_pc_eac8.preheader:                      ; preds = %dec_label_pc_ea8c
  %v2_eaac = add i32 %v0_ea84, 1
  %v2_eab4 = and i32 %v2_eaac, 134217728
  %v3_eab4 = icmp ne i32 %v2_eab4, 0
  store i1 %v3_eab4, i1* %cpsr_c.global-to-local, align 1
  %v3_eab8 = mul i32 %v2_eaac, 288
  %v3_eabc = add i32 %v2_ea94, %v3_eab8
  store i32 %v3_eabc, i32* %r3.global-to-local, align 4
  store i32 %v0_ea84, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eac8

dec_label_pc_eac8:                                ; preds = %dec_label_pc_eac8.preheader, %dec_label_pc_ead4
  %v0_ead4 = phi i32 [ %v3_eabc, %dec_label_pc_eac8.preheader ], [ %v1_eae0, %dec_label_pc_ead4 ]
  %v0_eac8 = phi i32 [ %v0_ea84, %dec_label_pc_eac8.preheader ], [ %v1_eac8, %dec_label_pc_ead4 ]
  %v1_eac8 = add i32 %v0_eac8, 1
  store i32 %v1_eac8, i32* %r2.global-to-local, align 4
  %v7_eacc = icmp eq i32 %v1_eac8, 256
  br i1 %v7_eacc, label %dec_label_pc_eb04.loopexit, label %dec_label_pc_ead4

dec_label_pc_ead4:                                ; preds = %dec_label_pc_eac8
  store i32 %v0_ead4, i32* @r0, align 4
  %v1_ead8 = add i32 %v0_ead4, 12
  %v2_ead8 = inttoptr i32 %v1_ead8 to i32*
  %v3_ead8 = load i32, i32* %v2_ead8, align 4
  %v2_eadc = icmp eq i32 %v3_ead8, 0
  %v1_eae0 = add i32 %v0_ead4, 288
  store i32 %v1_eae0, i32* %r3.global-to-local, align 4
  br i1 %v2_eadc, label %dec_label_pc_eae8, label %dec_label_pc_eac8

dec_label_pc_eae8:                                ; preds = %dec_label_pc_ead4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eac8, i32* @r5, align 4
  br label %dec_label_pc_eaec

dec_label_pc_eaec:                                ; preds = %dec_label_pc_ea8c, %dec_label_pc_eae8
  %v1_eaf4 = phi i32 [ %v2_eaa0, %dec_label_pc_ea8c ], [ %v0_ead4, %dec_label_pc_eae8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eaec = icmp eq i32 %v1_eaf4, 0
  store i1 %v2_eaec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eaec, label %dec_label_pc_eb04, label %dec_label_pc_eaf4

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_eaec
  %v2_eaf4 = add i32 %v1_eaf4, 16
  %v3_eaf4 = inttoptr i32 %v2_eaf4 to i32*
  store i32 %v3_ea74, i32* %v3_eaf4, align 4
  %v0_eaf8 = load i32, i32* %ip.global-to-local, align 4
  %v1_eaf8 = trunc i32 %v0_eaf8 to i16
  %v2_eaf8 = load i32, i32* @r0, align 4
  %v3_eaf8 = add i32 %v2_eaf8, 20
  %v4_eaf8 = inttoptr i32 %v3_eaf8 to i16*
  store i16 %v1_eaf8, i16* %v4_eaf8, align 2
  %v0_eafc = call i32 @function_e128()
  store i32 %v0_eafc, i32* %r0.global-to-local, align 4
  %v1_e980.pre.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_e97c

dec_label_pc_eb04.loopexit:                       ; preds = %dec_label_pc_eac8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb04

dec_label_pc_eb04:                                ; preds = %dec_label_pc_eaec, %dec_label_pc_ea84, %dec_label_pc_e9b0, %dec_label_pc_e97c, %dec_label_pc_eb04.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_eb24513 = load i32, i32* @sp, align 4
  %v3_eb24514 = add i32 %v2_eb24513, 1676
  %v4_eb24515 = inttoptr i32 %v3_eb24514 to i32*
  store i32 0, i32* %v4_eb24515, align 4
  br label %dec_label_pc_eb10.dec_label_pc_eb10_crit_edge

dec_label_pc_eb10.dec_label_pc_eb10_crit_edge:    ; preds = %dec_label_pc_eb04, %dec_label_pc_eb10.dec_label_pc_eb10_crit_edge
  %v0_eb10.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_eb14 = add i32 %v0_eb10.pre, 4
  store i32 %v1_eb14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eb1c = add i32 %v0_eb10.pre, 1672
  store i32 %v1_eb1c, i32* %ip.global-to-local, align 4
  %v7_eb20 = icmp eq i32 %v1_eb14, 128
  %v2_eb24 = load i32, i32* @sp, align 4
  %v3_eb24 = add i32 %v2_eb24, %v1_eb1c
  %v4_eb24 = inttoptr i32 %v3_eb24 to i32*
  store i32 0, i32* %v4_eb24, align 4
  br i1 %v7_eb20, label %dec_label_pc_eb2c, label %dec_label_pc_eb10.dec_label_pc_eb10_crit_edge

dec_label_pc_eb2c:                                ; preds = %dec_label_pc_eb10.dec_label_pc_eb10_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_eb2c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_eb2c, i32* %stack_var_-352, align 4
  %v1_eb38516 = add i32 %v0_eb2c, 8
  store i32 %v1_eb38516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_eb40517 = add i32 %v0_eb2c, 1548
  store i32 %v1_eb40517, i32* @lr, align 4
  %v7_eb44518 = icmp eq i32 %v1_eb38516, 128
  %v2_eb48519 = load i32, i32* @sp, align 4
  %v3_eb48520 = add i32 %v2_eb48519, %v1_eb40517
  %v4_eb48521 = inttoptr i32 %v3_eb48520 to i32*
  store i32 0, i32* %v4_eb48521, align 4
  br i1 %v7_eb44518, label %dec_label_pc_eb50, label %dec_label_pc_eb34.dec_label_pc_eb34_crit_edge

dec_label_pc_eb34.dec_label_pc_eb34_crit_edge:    ; preds = %dec_label_pc_eb2c, %dec_label_pc_eb34.dec_label_pc_eb34_crit_edge
  %v0_eb34.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_eb38 = add i32 %v0_eb34.pre, 4
  store i32 %v1_eb38, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_eb40 = add i32 %v0_eb34.pre, 1544
  store i32 %v1_eb40, i32* @lr, align 4
  %v7_eb44 = icmp eq i32 %v1_eb38, 128
  %v2_eb48 = load i32, i32* @sp, align 4
  %v3_eb48 = add i32 %v2_eb48, %v1_eb40
  %v4_eb48 = inttoptr i32 %v3_eb48 to i32*
  store i32 0, i32* %v4_eb48, align 4
  br i1 %v7_eb44, label %dec_label_pc_eb50, label %dec_label_pc_eb34.dec_label_pc_eb34_crit_edge

dec_label_pc_eb50:                                ; preds = %dec_label_pc_eb34.dec_label_pc_eb34_crit_edge, %dec_label_pc_eb2c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_eb50 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_eb50, i32* @r6, align 4
  store i32 %v0_eb50, i32* @r5, align 4
  store i32 %v0_eb50, i32* %stack_var_-52, align 4
  br label %dec_label_pc_ebac

dec_label_pc_eb60:                                ; preds = %dec_label_pc_ebdc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ebc8, i1* %cpsr_z.global-to-local, align 1
  %v1_ec4c = add i32 %v2_ebc0, 4
  %v2_ec4c = inttoptr i32 %v1_ec4c to i32*
  %v3_ec4c = load i32, i32* %v2_ec4c, align 4
  br i1 %v7_ebc8, label %dec_label_pc_ec4c, label %dec_label_pc_eb68

dec_label_pc_eb68:                                ; preds = %dec_label_pc_eb60
  store i32 %v3_ec4c, i32* %ip.global-to-local, align 4
  %v3_eb6c = udiv i32 %v3_ec4c, 32
  store i32 %v2_ec58, i32* %r0.global-to-local, align 4
  %v3_eb74 = mul nuw nsw i32 %v3_eb6c, 4
  %v2_eb78 = add i32 %v3_eb74, %v2_ec58
  store i32 %v2_eb78, i32* %r3.global-to-local, align 4
  %v1_eb7c = add i32 %v2_eb78, -184
  %v2_eb7c = inttoptr i32 %v1_eb7c to i32*
  %v3_eb7c = load i32, i32* %v2_eb7c, align 4
  %v1_eb80 = urem i32 %v3_ec4c, 32
  store i32 %v1_eb80, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_eb88 = shl i32 1, %v1_eb80
  %v8_eb88 = or i32 %v3_eb7c, %v7_eb88
  store i32 %v8_eb88, i32* %r2.global-to-local, align 4
  store i32 %v8_eb88, i32* %v2_eb7c, align 4
  %v0_eb90 = load i32, i32* @r6, align 4
  %v1_eb90 = load i32, i32* %ip.global-to-local, align 4
  %v3_eb90 = icmp uge i32 %v0_eb90, %v1_eb90
  store i1 %v3_eb90, i1* %cpsr_c.global-to-local, align 1
  %v9_eb90 = icmp eq i32 %v0_eb90, %v1_eb90
  store i1 %v9_eb90, i1* %cpsr_z.global-to-local, align 1
  %v5_eb94 = icmp slt i32 %v0_eb90, %v1_eb90
  br i1 %v5_eb94, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_eb68
  store i32 %v1_eb90, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ec40, %dec_label_pc_eb68, %bb409
  %v3_eb98 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_eb98, i32* %r3.global-to-local, align 4
  %v1_eb9c = add i32 %v3_eb98, 1
  store i32 %v1_eb9c, i32* %r2.global-to-local, align 4
  %v2_eba0 = icmp ugt i32 %v1_eb9c, 254
  store i1 %v2_eba0, i1* %cpsr_c.global-to-local, align 1
  %v7_eba0 = icmp eq i32 %v1_eb9c, 255
  store i1 %v7_eba0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb9c, i32* %stack_var_-52, align 4
  %v8_eba8 = icmp sgt i32 %v1_eb9c, 255
  br i1 %v8_eba8, label %dec_label_pc_ec7c, label %dec_label_pc_ebac

dec_label_pc_ebac:                                ; preds = %bb410, %dec_label_pc_eb50
  %v0_ebb8 = phi i32 [ %v1_eb9c, %bb410 ], [ %v0_eb50, %dec_label_pc_eb50 ]
  store i32 ptrtoint (i32* @global_var_2079c.131 to i32), i32* %r0.global-to-local, align 4
  %v3_ebb0 = mul i32 %v0_ebb8, 256
  store i32 %v3_ebb0, i32* %r3.global-to-local, align 4
  %v2_ebb4 = load i32, i32* @global_var_2079c.131, align 4
  store i32 %v2_ebb4, i32* %r1.global-to-local, align 4
  %v2_ebbc = mul i32 %v0_ebb8, 288
  store i32 %v2_ebbc, i32* %r2.global-to-local, align 4
  %v2_ebc0 = add i32 %v2_ebb4, %v2_ebbc
  store i32 %v2_ebc0, i32* @r4, align 4
  %v1_ebc4 = add i32 %v2_ebc0, 12
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  %v3_ebc4 = load i32, i32* %v2_ebc4, align 4
  store i32 %v3_ebc4, i32* %ip.global-to-local, align 4
  %v2_ebc8 = icmp ne i32 %v3_ebc4, 0
  store i1 %v2_ebc8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebc8 = icmp eq i32 %v3_ebc4, 1
  store i1 %v7_ebc8, i1* %cpsr_z.global-to-local, align 1
  %v2_ebcc = xor i1 %v2_ebc8, true
  %v3_ebcc = or i1 %v7_ebc8, %v2_ebcc
  br i1 %v3_ebcc, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_ebac
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_ebac, %bb411
  %v1_ebec215 = phi i32 [ %v2_ebb4, %dec_label_pc_ebac ], [ 5, %bb411 ]
  %v2_ebd0 = xor i1 %v7_ebc8, true
  %v3_ebd0 = and i1 %v2_ebc8, %v2_ebd0
  br i1 %v3_ebd0, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_ebec = phi i32 [ %v1_ebec215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebd4 = icmp eq i32 %v3_ebc4, 0
  store i1 %v2_ebd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebd4, label %bb410, label %dec_label_pc_ebdc

dec_label_pc_ebdc:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r2.global-to-local, align 4
  %v2_ebe0 = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_ebe0, i32* %r3.global-to-local, align 4
  %v1_ebe4 = add i32 %v2_ebc0, 8
  %v2_ebe4 = inttoptr i32 %v1_ebe4 to i32*
  %v3_ebe4 = load i32, i32* %v2_ebe4, align 4
  store i32 %v3_ebe4, i32* %r2.global-to-local, align 4
  %v2_ebe8 = sub i32 %v2_ebe0, %v3_ebe4
  store i32 %v2_ebe8, i32* %r3.global-to-local, align 4
  %v3_ebec = icmp uge i32 %v2_ebe8, %v1_ebec
  store i1 %v3_ebec, i1* %cpsr_c.global-to-local, align 1
  %v9_ebec = icmp eq i32 %v2_ebe8, %v1_ebec
  store i1 %v9_ebec, i1* %cpsr_z.global-to-local, align 1
  %v2_ebf0 = xor i1 %v3_ebec, true
  %v3_ebf0 = or i1 %v9_ebec, %v2_ebf0
  br i1 %v3_ebf0, label %dec_label_pc_eb60, label %dec_label_pc_ebf4

dec_label_pc_ebf4:                                ; preds = %dec_label_pc_ebdc
  %v1_ebf4 = add i32 %v2_ebc0, 4
  %v2_ebf4 = inttoptr i32 %v1_ebf4 to i32*
  %v3_ebf4 = load i32, i32* %v2_ebf4, align 4
  store i32 %v3_ebf4, i32* %r0.global-to-local, align 4
  %v1_ebf8 = call i32 @function_10b64(i32 %v3_ebf4)
  store i32 %v1_ebf8, i32* %r0.global-to-local, align 4
  %v0_ebfc = load i32, i32* @r4, align 4
  %v1_ebfc = add i32 %v0_ebfc, 12
  %v2_ebfc = inttoptr i32 %v1_ebfc to i32*
  %v3_ebfc = load i32, i32* %v2_ebfc, align 4
  store i32 %v3_ebfc, i32* %r3.global-to-local, align 4
  %v2_ec00 = icmp ugt i32 %v3_ebfc, 1
  store i1 %v2_ec00, i1* %cpsr_c.global-to-local, align 1
  %v7_ec00 = icmp eq i32 %v3_ebfc, 2
  store i1 %v7_ec00, i1* %cpsr_z.global-to-local, align 1
  %v2_ec04 = xor i1 %v2_ec00, true
  %v3_ec04 = or i1 %v7_ec00, %v2_ec04
  br i1 %v3_ec04, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_ebf4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ec0c298302 = add i32 %v0_ebfc, 4
  %v3_ec0c299303 = inttoptr i32 %v2_ec0c298302 to i32*
  store i32 -1, i32* %v3_ec0c299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_ebf4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ec0c295 = add i32 %v0_ebfc, 4
  %v3_ec0c296 = inttoptr i32 %v2_ec0c295 to i32*
  store i32 -1, i32* %v3_ec0c296, align 4
  %v4_ec10 = load i32, i32* %r3.global-to-local, align 4
  %v5_ec10 = load i32, i32* @r4, align 4
  %v6_ec10 = add i32 %v5_ec10, 12
  %v7_ec10 = inttoptr i32 %v6_ec10 to i32*
  store i32 %v4_ec10, i32* %v7_ec10, align 4
  %v4_ec14 = load i32, i32* %r3.global-to-local, align 4
  %v5_ec14 = trunc i32 %v4_ec14 to i8
  %v6_ec14 = load i32, i32* @r4, align 4
  %v7_ec14 = add i32 %v6_ec14, 284
  %v8_ec14 = inttoptr i32 %v7_ec14 to i8*
  store i8 %v5_ec14, i8* %v8_ec14, align 1
  %v0_ec18.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ec18.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_ec18 = phi i1 [ %v1_ec18.pre, %bb415 ], [ %v2_ec00, %.thread301 ]
  %v0_ec18 = phi i1 [ %v0_ec18.pre, %bb415 ], [ false, %.thread301 ]
  %v2_ec18 = xor i1 %v1_ec18, true
  %v3_ec18 = or i1 %v0_ec18, %v2_ec18
  br i1 %v3_ec18, label %bb410, label %dec_label_pc_ec1c

dec_label_pc_ec1c:                                ; preds = %bb416
  %v0_ec1c = load i32, i32* @r4, align 4
  %v1_ec1c = add i32 %v0_ec1c, 284
  %v2_ec1c = inttoptr i32 %v1_ec1c to i8*
  %v3_ec1c = load i8, i8* %v2_ec1c, align 1
  %v4_ec1c = zext i8 %v3_ec1c to i32
  %v1_ec20 = add nuw nsw i32 %v4_ec1c, 1
  %v1_ec24 = urem i32 %v1_ec20, 256
  store i32 %v1_ec24, i32* %r3.global-to-local, align 4
  %v2_ec28 = icmp ugt i32 %v1_ec24, 9
  store i1 %v2_ec28, i1* %cpsr_c.global-to-local, align 1
  %v7_ec28 = icmp eq i32 %v1_ec24, 10
  store i1 %v7_ec28, i1* %cpsr_z.global-to-local, align 1
  %v1_ec2c = trunc i32 %v1_ec20 to i8
  store i8 %v1_ec2c, i8* %v2_ec1c, align 1
  %v0_ec30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec30, label %.thread75, label %dec_label_pc_ec40

.thread75:                                        ; preds = %dec_label_pc_ec1c
  %v1_ec30 = load i32, i32* %r3.global-to-local, align 4
  %v2_ec30 = add i32 %v1_ec30, -10
  store i32 %v2_ec30, i32* %r3.global-to-local, align 4
  %v2_ec34 = load i32, i32* @r4, align 4
  %v3_ec34 = add i32 %v2_ec34, 12
  %v4_ec34 = inttoptr i32 %v3_ec34 to i32*
  store i32 %v2_ec30, i32* %v4_ec34, align 4
  %v1_ec38 = load i32, i32* %r3.global-to-local, align 4
  %v2_ec38 = trunc i32 %v1_ec38 to i8
  %v3_ec38 = load i32, i32* @r4, align 4
  %v4_ec38 = add i32 %v3_ec38, 284
  %v5_ec38 = inttoptr i32 %v4_ec38 to i8*
  store i8 %v2_ec38, i8* %v5_ec38, align 1
  %v0_ec3c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec3c.pr.pr, label %bb410, label %dec_label_pc_ec40

dec_label_pc_ec40:                                ; preds = %dec_label_pc_ec1c, %.thread75
  %v0_ec40 = load i32, i32* @r4, align 4
  store i32 %v0_ec40, i32* @r0, align 4
  %v0_ec44 = call i32 @function_e128()
  store i32 %v0_ec44, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ec4c:                                ; preds = %dec_label_pc_eb60
  store i32 %v3_ec4c, i32* %r0.global-to-local, align 4
  %v3_ec50 = udiv i32 %v3_ec4c, 32
  %v3_ec54 = mul nuw nsw i32 %v3_ec50, 4
  store i32 %v2_ec58, i32* @lr, align 4
  %v2_ec5c = add i32 %v3_ec54, %v2_ec58
  store i32 %v2_ec5c, i32* %r3.global-to-local, align 4
  %v1_ec60 = add i32 %v2_ec5c, -312
  %v2_ec60 = inttoptr i32 %v1_ec60 to i32*
  %v3_ec60 = load i32, i32* %v2_ec60, align 4
  %v1_ec64 = urem i32 %v3_ec4c, 32
  store i32 %v1_ec64, i32* %r1.global-to-local, align 4
  %v7_ec68 = shl i32 1, %v1_ec64
  %v8_ec68 = or i32 %v3_ec60, %v7_ec68
  store i32 %v8_ec68, i32* %r2.global-to-local, align 4
  %v0_ec6c = load i32, i32* @r5, align 4
  %v3_ec6c = icmp uge i32 %v0_ec6c, %v3_ec4c
  store i1 %v3_ec6c, i1* %cpsr_c.global-to-local, align 1
  %v9_ec6c = icmp eq i32 %v0_ec6c, %v3_ec4c
  store i1 %v9_ec6c, i1* %cpsr_z.global-to-local, align 1
  %v5_ec70 = icmp slt i32 %v0_ec6c, %v3_ec4c
  br i1 %v5_ec70, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ec4c
  store i32 %v3_ec4c, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ec4c, %bb417
  store i32 %v8_ec68, i32* %v2_ec60, align 4
  br label %bb410

dec_label_pc_ec7c:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_ec88 = load i32, i32* @r5, align 4
  %v1_ec88 = load i32, i32* @r6, align 4
  %v3_ec88 = icmp uge i32 %v0_ec88, %v1_ec88
  store i1 %v3_ec88, i1* %cpsr_c.global-to-local, align 1
  %v9_ec88 = icmp eq i32 %v0_ec88, %v1_ec88
  store i1 %v9_ec88, i1* %cpsr_z.global-to-local, align 1
  %v5_ec8c = icmp slt i32 %v0_ec88, %v1_ec88
  %storemerge155 = select i1 %v5_ec8c, i32 %v1_ec88, i32 %v0_ec88
  store i32 %v2_eca0, i32* %ip.global-to-local, align 4
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  store i32 %v2_eca8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ecb0 = add i32 %storemerge155, 1
  store i32 %v1_ecb0, i32* %r0.global-to-local, align 4
  %v5_ecbc = call i32 @function_10888(i32 %v1_ecb0, i32 %v2_eca4, i32 %v2_eca8, i32 0, i32 %v2_eca0)
  %v0_ecc0 = load i32, i32* @r4, align 4
  store i32 %v0_ecc0, i32* %r0.global-to-local, align 4
  %v1_ecc4 = inttoptr i32 %v0_ecc0 to i32*
  %v2_ecc4 = call i32 @function_107e4(i32* %v1_ecc4)
  store i32 %v2_ecc4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* @lr, align 4
  %v0_eccc = load i32, i32* @r4, align 4
  store i32 %v0_eccc, i32* %stack_var_-52, align 4
  store i32 %v2_ecc4, i32* @global_var_1e74c.119, align 4
  br label %dec_label_pc_ecd4

dec_label_pc_ecd4:                                ; preds = %dec_label_pc_ee3c, %dec_label_pc_ec7c
  %v0_ece0 = phi i32 [ %v1_ee40, %dec_label_pc_ee3c ], [ %v0_eccc, %dec_label_pc_ec7c ]
  store i32 ptrtoint (i32* @global_var_2079c.131 to i32), i32* %r0.global-to-local, align 4
  %v3_ecd8 = mul i32 %v0_ece0, 256
  store i32 %v3_ecd8, i32* %r3.global-to-local, align 4
  %v2_ecdc = load i32, i32* @global_var_2079c.131, align 4
  store i32 %v2_ecdc, i32* %r1.global-to-local, align 4
  %v2_ece4 = mul i32 %v0_ece0, 288
  store i32 %v2_ece4, i32* %r2.global-to-local, align 4
  %v2_ece8 = add i32 %v2_ecdc, %v2_ece4
  store i32 %v2_ece8, i32* @r6, align 4
  %v1_ecec = add i32 %v2_ece8, 4
  %v2_ecec = inttoptr i32 %v1_ecec to i32*
  %v3_ecec = load i32, i32* %v2_ecec, align 4
  store i32 %v3_ecec, i32* %r0.global-to-local, align 4
  %v2_ecf0 = icmp eq i32 %v3_ecec, -1
  store i1 %v2_ecf0, i1* %cpsr_c.global-to-local, align 1
  %v7_ecf0 = icmp eq i32 %v3_ecec, -1
  store i1 %v7_ecf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ecf0, label %dec_label_pc_ee3c, label %dec_label_pc_ecf8

dec_label_pc_ecf8:                                ; preds = %dec_label_pc_ecd4
  %v3_ecf8 = udiv i32 %v3_ecec, 32
  store i32 %v2_ec58, i32* %r1.global-to-local, align 4
  %v3_ed00 = mul nuw nsw i32 %v3_ecf8, 4
  store i32 %v3_ed00, i32* @ip, align 4
  %v2_ed04 = add i32 %v3_ed00, %v2_ec58
  store i32 %v2_ed04, i32* %r2.global-to-local, align 4
  %v1_ed08 = add i32 %v2_ed04, -312
  %v2_ed08 = inttoptr i32 %v1_ed08 to i32*
  %v3_ed08 = load i32, i32* %v2_ed08, align 4
  %v1_ed0c = urem i32 %v3_ecec, 32
  store i32 %v1_ed0c, i32* %r1.global-to-local, align 4
  %v2_ed10 = add nsw i32 %v1_ed0c, -1
  %v3_ed10 = shl i32 1, %v2_ed10
  %v4_ed10 = and i32 %v3_ed08, %v3_ed10
  %v5_ed10 = icmp ne i32 %v4_ed10, 0
  store i1 %v5_ed10, i1* %cpsr_c.global-to-local, align 1
  %v6_ed10 = lshr i32 %v3_ed08, %v1_ed0c
  store i32 %v6_ed10, i32* %r3.global-to-local, align 4
  %v1_ed14 = urem i32 %v6_ed10, 2
  %v2_ed14 = icmp eq i32 %v1_ed14, 0
  store i1 %v2_ed14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed14, label %dec_label_pc_ed1c, label %dec_label_pc_f844

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_ecf8, %dec_label_pc_f8f0
  %v1_ed28 = phi i32 [ %v1_ed0c, %dec_label_pc_ecf8 ], [ %v1_ed28.pre, %dec_label_pc_f8f0 ]
  %v0_ed20 = phi i32 [ %v3_ed00, %dec_label_pc_ecf8 ], [ %v0_ed20.pre, %dec_label_pc_f8f0 ]
  store i32 %v2_ec58, i32* @lr, align 4
  %v2_ed20 = add i32 %v0_ed20, %v2_ec58
  store i32 %v2_ed20, i32* %r2.global-to-local, align 4
  %v1_ed24 = add i32 %v2_ed20, -184
  %v2_ed24 = inttoptr i32 %v1_ed24 to i32*
  %v3_ed24 = load i32, i32* %v2_ed24, align 4
  %v2_ed28 = add i32 %v1_ed28, -1
  %v3_ed28 = shl i32 1, %v2_ed28
  %v4_ed28 = and i32 %v3_ed24, %v3_ed28
  %v5_ed28 = icmp ne i32 %v4_ed28, 0
  store i1 %v5_ed28, i1* %cpsr_c.global-to-local, align 1
  %v6_ed28 = lshr i32 %v3_ed24, %v1_ed28
  store i32 %v6_ed28, i32* %r3.global-to-local, align 4
  %v1_ed2c = urem i32 %v6_ed28, 2
  %v2_ed2c = icmp eq i32 %v1_ed2c, 0
  store i1 %v2_ed2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed2c, label %dec_label_pc_ee3c, label %dec_label_pc_ed34.preheader

dec_label_pc_ed34.preheader:                      ; preds = %dec_label_pc_ed1c
  %v0_ed34176 = load i32, i32* @r6, align 4
  %v1_ed34177 = add i32 %v0_ed34176, 12
  %v2_ed34178 = inttoptr i32 %v1_ed34177 to i32*
  %v3_ed34179 = load i32, i32* %v2_ed34178, align 4
  store i32 %v3_ed34179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed38175181 = icmp eq i32 %v3_ed34179, 0
  store i1 %v2_ed38175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed38175181, label %dec_label_pc_ee3c, label %dec_label_pc_ed40.lr.ph

dec_label_pc_ed34.loopexit:                       ; preds = %dec_label_pc_f748, %dec_label_pc_f54c
  %v0_ed34 = load i32, i32* @r6, align 4
  %v1_ed34 = add i32 %v0_ed34, 12
  %v2_ed34 = inttoptr i32 %v1_ed34 to i32*
  %v3_ed34 = load i32, i32* %v2_ed34, align 4
  store i32 %v3_ed34, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed38175 = icmp eq i32 %v3_ed34, 0
  store i1 %v2_ed38175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed38175, label %dec_label_pc_ee3c, label %dec_label_pc_ed40.lr.ph

dec_label_pc_ed40.lr.ph:                          ; preds = %dec_label_pc_ed34.preheader, %dec_label_pc_ed34.loopexit
  %v0_ed40231 = phi i32 [ %v0_ed34, %dec_label_pc_ed34.loopexit ], [ %v0_ed34176, %dec_label_pc_ed34.preheader ]
  br label %dec_label_pc_ed40

dec_label_pc_ed40:                                ; preds = %dec_label_pc_ed38.backedge.thread, %dec_label_pc_ed38.backedge, %dec_label_pc_ed38.backedge.thread561, %dec_label_pc_ed40.lr.ph
  %v0_f814 = phi i32 [ %v0_ed40231, %dec_label_pc_ed40.lr.ph ], [ %v0_ed40228, %dec_label_pc_ed38.backedge ], [ %v0_edb4, %dec_label_pc_ed38.backedge.thread ], [ %v0_edb4, %dec_label_pc_ed38.backedge.thread561 ]
  %v1_ed40 = add i32 %v0_f814, 24
  %v2_ed40 = inttoptr i32 %v1_ed40 to i32*
  %v3_ed40 = load i32, i32* %v2_ed40, align 4
  store i32 %v3_ed40, i32* @r3, align 4
  %v2_ed44 = icmp ugt i32 %v3_ed40, 255
  store i1 %v2_ed44, i1* %cpsr_c.global-to-local, align 1
  %v7_ed44 = icmp eq i32 %v3_ed40, 256
  store i1 %v7_ed44, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_f814, 28
  store i32 %.pre282, i32* %sb.global-to-local, align 4
  br i1 %v7_ed44, label %dec_label_pc_f814, label %dec_label_pc_ed50

dec_label_pc_ed50:                                ; preds = %dec_label_pc_ed40, %dec_label_pc_f814
  store i32 0, i32* @r5, align 4
  %v1_ed54 = load i32, i32* %fp.global-to-local, align 4
  %v2_ed54 = inttoptr i32 %v1_ed54 to i32*
  store i32 0, i32* %v2_ed54, align 4
  %v0_ed58 = load i32, i32* @r6, align 4
  %v1_ed58 = add i32 %v0_ed58, 24
  %v2_ed58 = inttoptr i32 %v1_ed58 to i32*
  %v3_ed58 = load i32, i32* %v2_ed58, align 4
  store i32 %v3_ed58, i32* %r2.global-to-local, align 4
  %v0_ed5c = load i32, i32* %sb.global-to-local, align 4
  %v2_ed5c = add i32 %v0_ed5c, %v3_ed58
  store i32 %v2_ed5c, i32* @r4, align 4
  %v1_ed60 = add i32 %v0_ed58, 4
  %v2_ed60 = inttoptr i32 %v1_ed60 to i32*
  %v3_ed60 = load i32, i32* %v2_ed60, align 4
  store i32 %v3_ed60, i32* %r0.global-to-local, align 4
  %v1_ed64 = sub i32 256, %v3_ed58
  store i32 %v1_ed64, i32* %r2.global-to-local, align 4
  store i32 %v2_ed5c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ed70 = call i32 @function_1120c(i32 %v3_ed60, i32 %v2_ed5c, i32 %v1_ed64, i32 16384)
  store i32 %v4_ed70, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed74 = icmp eq i32 %v4_ed70, 0
  store i1 %v2_ed74, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_ed70, 1
  br i1 %tmp419, label %dec_label_pc_edec, label %dec_label_pc_ed7c

dec_label_pc_ed7c:                                ; preds = %dec_label_pc_ed50
  %v0_ed7c = load i32, i32* @r5, align 4
  store i32 %v0_ed7c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %.thread82, %dec_label_pc_ed7c
  %v3_ed8c = phi i32 [ %v1_ed90, %.thread82 ], [ %v0_ed7c, %dec_label_pc_ed7c ]
  %v1_ed80 = load i32, i32* @r4, align 4
  %v2_ed80 = add i32 %v1_ed80, %v3_ed8c
  %v3_ed80 = inttoptr i32 %v2_ed80 to i8*
  %v4_ed80 = load i8, i8* %v3_ed80, align 1
  %v6_ed80 = zext i8 %v4_ed80 to i32
  store i32 %v6_ed80, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed84 = icmp eq i8 %v4_ed80, 0
  store i1 %v2_ed84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed84, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_ed80
  %v2_ed88 = add nuw nsw i32 %v6_ed80, 65
  store i32 %v2_ed88, i32* %r3.global-to-local, align 4
  %v2_ed8c = trunc i32 %v2_ed88 to i8
  store i8 %v2_ed8c, i8* %v3_ed80, align 1
  %v0_ed90.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_ed80, %bb420
  %v0_ed90 = phi i32 [ %v3_ed8c, %dec_label_pc_ed80 ], [ %v0_ed90.pre, %bb420 ]
  %v1_ed90 = add i32 %v0_ed90, 1
  store i32 %v1_ed90, i32* %r2.global-to-local, align 4
  %v3_ed94 = icmp uge i32 %v1_ed90, %v4_ed70
  store i1 %v3_ed94, i1* %cpsr_c.global-to-local, align 1
  %v9_ed94 = icmp eq i32 %v1_ed90, %v4_ed70
  store i1 %v9_ed94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed94, label %dec_label_pc_ed9c, label %dec_label_pc_ed80

dec_label_pc_ed9c:                                ; preds = %.thread82, %dec_label_pc_edf0
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r1.global-to-local, align 4
  %v0_eda0 = load i32, i32* @r6, align 4
  %v1_eda0 = add i32 %v0_eda0, 24
  %v2_eda0 = inttoptr i32 %v1_eda0 to i32*
  %v3_eda0 = load i32, i32* %v2_eda0, align 4
  %v2_eda4 = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_eda4, i32* %r2.global-to-local, align 4
  %v2_eda8 = add i32 %v3_eda0, %v4_ed70
  store i32 %v2_eda8, i32* %r3.global-to-local, align 4
  store i32 %v2_eda8, i32* %v2_eda0, align 4
  %v0_edb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_edb0 = load i32, i32* @r6, align 4
  %v2_edb0 = add i32 %v1_edb0, 8
  %v3_edb0 = inttoptr i32 %v2_edb0 to i32*
  store i32 %v0_edb0, i32* %v3_edb0, align 4
  br label %dec_label_pc_edb4

dec_label_pc_edb4:                                ; preds = %dec_label_pc_eed0, %dec_label_pc_ed9c
  %v0_edb4 = load i32, i32* @r6, align 4
  %v1_edb4 = add i32 %v0_edb4, 12
  %v2_edb4 = inttoptr i32 %v1_edb4 to i32*
  %v3_edb4 = load i32, i32* %v2_edb4, align 4
  store i32 %v3_edb4, i32* %r0.global-to-local, align 4
  %v1_edb8 = add i32 %v3_edb4, -2
  store i32 %v1_edb8, i32* @r3, align 4
  %v7_edbc = icmp eq i32 %v1_edb8, 8
  store i1 %v7_edbc, i1* %cpsr_z.global-to-local, align 1
  %v5_edc0 = and i32 %v1_edb8, 1073741824
  %v6_edc0 = icmp ne i32 %v5_edc0, 0
  store i1 %v6_edc0, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_edb4, label %dec_label_pc_ed38.backedge [
    i32 2, label %dec_label_pc_f0a0
    i32 3, label %dec_label_pc_f558
    i32 4, label %dec_label_pc_f464
    i32 5, label %dec_label_pc_f244
    i32 6, label %dec_label_pc_f170
    i32 7, label %dec_label_pc_f390
    i32 8, label %dec_label_pc_efcc
    i32 9, label %dec_label_pc_eef8
    i32 10, label %dec_label_pc_ee54
  ]

dec_label_pc_edec:                                ; preds = %dec_label_pc_ed50
  br i1 %v2_ed74, label %dec_label_pc_f944, label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %dec_label_pc_edec
  %v3_edf0 = icmp eq i32 %v4_ed70, -1
  store i1 %v3_edf0, i1* %cpsr_c.global-to-local, align 1
  %v8_edf0 = icmp eq i32 %v4_ed70, -1
  store i1 %v8_edf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_edf0, label %dec_label_pc_edf8, label %dec_label_pc_ed9c

dec_label_pc_edf8:                                ; preds = %dec_label_pc_edf0
  %v0_edf8 = load i32, i32* %fp.global-to-local, align 4
  %v1_edf8 = inttoptr i32 %v0_edf8 to i32*
  %v2_edf8 = load i32, i32* %v1_edf8, align 4
  store i32 %v2_edf8, i32* %r3.global-to-local, align 4
  %v2_edfc = icmp ugt i32 %v2_edf8, 10
  store i1 %v2_edfc, i1* %cpsr_c.global-to-local, align 1
  %v7_edfc = icmp eq i32 %v2_edf8, 11
  store i1 %v7_edfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edfc, label %dec_label_pc_ee3c, label %dec_label_pc_ee04

dec_label_pc_ee04:                                ; preds = %dec_label_pc_edf8, %dec_label_pc_f944
  %v0_ee04 = load i32, i32* @r6, align 4
  %v1_ee04 = add i32 %v0_ee04, 4
  %v2_ee04 = inttoptr i32 %v1_ee04 to i32*
  %v3_ee04 = load i32, i32* %v2_ee04, align 4
  store i32 %v3_ee04, i32* %r0.global-to-local, align 4
  %v1_ee08 = call i32 @function_10b64(i32 %v3_ee04)
  store i32 %v1_ee08, i32* %r0.global-to-local, align 4
  %v0_ee0c = load i32, i32* @r6, align 4
  %v1_ee0c = add i32 %v0_ee0c, 284
  %v2_ee0c = inttoptr i32 %v1_ee0c to i8*
  %v3_ee0c = load i8, i8* %v2_ee0c, align 1
  %v4_ee0c = zext i8 %v3_ee0c to i32
  %v1_ee10 = add nuw nsw i32 %v4_ee0c, 1
  %v1_ee14 = urem i32 %v1_ee10, 256
  store i32 %v1_ee14, i32* %r3.global-to-local, align 4
  %v2_ee18 = icmp ugt i32 %v1_ee14, 8
  store i1 %v2_ee18, i1* %cpsr_c.global-to-local, align 1
  %v7_ee18 = icmp eq i32 %v1_ee14, 9
  store i1 %v7_ee18, i1* %cpsr_z.global-to-local, align 1
  %v1_ee1c = trunc i32 %v1_ee10 to i8
  store i8 %v1_ee1c, i8* %v2_ee0c, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_ee24 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_ee24 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_ee24 = xor i1 %v1_ee24, true
  %v3_ee24 = and i1 %v0_ee24, %v2_ee24
  br i1 %v3_ee24, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_ee04
  %v1_ee28309314 = load i32, i32* @r6, align 4
  %v2_ee28310315 = add i32 %v1_ee28309314, 4
  %v3_ee28311316 = inttoptr i32 %v2_ee28310315 to i32*
  store i32 -1, i32* %v3_ee28311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_ee04
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ee28305 = load i32, i32* @r6, align 4
  %v2_ee28306 = add i32 %v1_ee28305, 4
  %v3_ee28307 = inttoptr i32 %v2_ee28306 to i32*
  store i32 -1, i32* %v3_ee28307, align 4
  %v4_ee2c = load i32, i32* %r3.global-to-local, align 4
  %v5_ee2c = load i32, i32* @r6, align 4
  %v6_ee2c = add i32 %v5_ee2c, 12
  %v7_ee2c = inttoptr i32 %v6_ee2c to i32*
  store i32 %v4_ee2c, i32* %v7_ee2c, align 4
  %v4_ee30 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee30 = trunc i32 %v4_ee30 to i8
  %v6_ee30 = load i32, i32* @r6, align 4
  %v7_ee30 = add i32 %v6_ee30, 284
  %v8_ee30 = inttoptr i32 %v7_ee30 to i8*
  store i8 %v5_ee30, i8* %v8_ee30, align 1
  %v0_ee34.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee34.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_ee38 = phi i1 [ %v1_ee34.pre, %bb421 ], [ %v0_ee24, %.thread313 ]
  %v0_ee38 = phi i1 [ %v0_ee34.pre, %bb421 ], [ %v1_ee24, %.thread313 ]
  %v2_ee34 = xor i1 %v1_ee38, true
  %v3_ee34 = or i1 %v0_ee38, %v2_ee34
  br i1 %v3_ee34, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_ee34 = load i32, i32* @r6, align 4
  store i32 %v4_ee34, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 60988, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_ee34, i32 ptrtoint (i32* @global_var_e128.183 to i32))
  br label %dec_label_pc_ee3c

dec_label_pc_ee3c:                                ; preds = %dec_label_pc_ed34.loopexit, %dec_label_pc_ed38.backedge, %dec_label_pc_ed34.preheader, %dec_label_pc_edf8, %dec_label_pc_ed1c, %dec_label_pc_ecd4, %dec_label_pc_f928, %bb424
  %v3_ee3c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ee3c, i32* %r3.global-to-local, align 4
  %v1_ee40 = add i32 %v3_ee3c, 1
  store i32 %v1_ee40, i32* @r4, align 4
  %v2_ee44 = icmp ugt i32 %v1_ee40, 254
  store i1 %v2_ee44, i1* %cpsr_c.global-to-local, align 1
  %v7_ee44 = icmp eq i32 %v1_ee40, 255
  store i1 %v7_ee44, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ee40, i32* %stack_var_-52, align 4
  %v7_ee4c = icmp slt i32 %v1_ee40, 256
  br i1 %v7_ee4c, label %dec_label_pc_ecd4, label %dec_label_pc_e654

dec_label_pc_ee54:                                ; preds = %dec_label_pc_edb4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_ee58 = call i32 @function_fb64(i32 10)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_ee68 = call i32 @function_faa0(i32 10, i32* nonnull %stack_var_-60)
  %v3_ee6c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ee68, i32* %r2.global-to-local, align 4
  %v1_ee74 = add i32 %v3_ee6c, -1
  store i32 %v1_ee74, i32* %r3.global-to-local, align 4
  %v0_ee78 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ee78, i32* %r0.global-to-local, align 4
  %v0_ee7c = load i32, i32* @r6, align 4
  %v1_ee7c = add i32 %v0_ee7c, 24
  %v2_ee7c = inttoptr i32 %v1_ee7c to i32*
  %v3_ee7c = load i32, i32* %v2_ee7c, align 4
  store i32 %v3_ee7c, i32* %r1.global-to-local, align 4
  %v4_ee80 = call i32 @function_1015c(i32 %v0_ee78, i32 %v3_ee7c, i32 %v3_ee68, i32 %v1_ee74)
  %v2_ee84 = icmp eq i32 %v4_ee80, -1
  store i1 %v2_ee84, i1* %cpsr_c.global-to-local, align 1
  %v7_ee84 = icmp eq i32 %v4_ee80, -1
  store i1 %v7_ee84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ee80, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f74c = call i32 @function_fac4(i32 10)
  br i1 %v7_ee84, label %dec_label_pc_f748, label %dec_label_pc_ee90

dec_label_pc_ee90:                                ; preds = %dec_label_pc_ee54
  store i32 %v1_f74c, i32* %r0.global-to-local, align 4
  %v0_ee98 = load i32, i32* @r6, align 4
  %v1_ee98 = add i32 %v0_ee98, 4
  %v2_ee98 = inttoptr i32 %v1_ee98 to i32*
  %v3_ee98 = load i32, i32* %v2_ee98, align 4
  store i32 %v3_ee98, i32* %r0.global-to-local, align 4
  %v1_ee9c = call i32 @function_10b64(i32 %v3_ee98)
  store i32 %v1_ee9c, i32* %r0.global-to-local, align 4
  %v0_eea0 = load i32, i32* @r6, align 4
  %v1_eea0 = add i32 %v0_eea0, 284
  %v2_eea0 = inttoptr i32 %v1_eea0 to i8*
  %v3_eea0 = load i8, i8* %v2_eea0, align 1
  %v4_eea0 = zext i8 %v3_eea0 to i32
  %v1_eea4 = add nuw nsw i32 %v4_eea0, 1
  %v1_eea8 = urem i32 %v1_eea4, 256
  store i32 %v1_eea8, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_eeb0 = icmp ugt i32 %v1_eea8, 9
  store i1 %v2_eeb0, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb0 = icmp eq i32 %v1_eea8, 10
  store i1 %v7_eeb0, i1* %cpsr_z.global-to-local, align 1
  %v2_eeb4 = add i32 %v0_eea0, 4
  %v3_eeb4 = inttoptr i32 %v2_eeb4 to i32*
  store i32 -1, i32* %v3_eeb4, align 4
  %v0_eeb8 = load i32, i32* @r3, align 4
  %v1_eeb8 = trunc i32 %v0_eeb8 to i8
  %v2_eeb8 = load i32, i32* @r6, align 4
  %v3_eeb8 = add i32 %v2_eeb8, 284
  %v4_eeb8 = inttoptr i32 %v3_eeb8 to i8*
  store i8 %v1_eeb8, i8* %v4_eeb8, align 1
  %v0_eebc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eebc, label %dec_label_pc_eec0, label %dec_label_pc_f838

dec_label_pc_eec0:                                ; preds = %dec_label_pc_ee90
  store i32 0, i32* @r3, align 4
  %v1_eec4 = load i32, i32* @r6, align 4
  %v2_eec4 = add i32 %v1_eec4, 12
  %v3_eec4 = inttoptr i32 %v2_eec4 to i32*
  store i32 0, i32* %v3_eec4, align 4
  %v0_eec8 = load i32, i32* @r3, align 4
  %v1_eec8 = trunc i32 %v0_eec8 to i8
  %v2_eec8 = load i32, i32* @r6, align 4
  %v3_eec8 = add i32 %v2_eec8, 284
  %v4_eec8 = inttoptr i32 %v3_eec8 to i8*
  store i8 %v1_eec8, i8* %v4_eec8, align 1
  br label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_f838, %dec_label_pc_eec0
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_eed0

dec_label_pc_eed0:                                ; preds = %dec_label_pc_f54c, %dec_label_pc_f40c, %dec_label_pc_f2c0, %dec_label_pc_f1ec, %dec_label_pc_f048, %dec_label_pc_ef74, %dec_label_pc_eecc
  %v0_eed0 = load i32, i32* @r6, align 4
  %v1_eed0 = add i32 %v0_eed0, 24
  %v2_eed0 = inttoptr i32 %v1_eed0 to i32*
  %v3_eed0 = load i32, i32* %v2_eed0, align 4
  %v0_eed4 = load i32, i32* @r7, align 4
  %v2_eed4 = sub i32 %v0_eed4, %v3_eed0
  %v3_eed4 = icmp uge i32 %v0_eed4, %v3_eed0
  store i1 %v3_eed4, i1* %cpsr_c.global-to-local, align 1
  %v4_eed4 = xor i32 %v0_eed4, %v3_eed0
  %v5_eed4 = xor i32 %v2_eed4, %v0_eed4
  %v6_eed4 = and i32 %v5_eed4, %v4_eed4
  %v7_eed4 = icmp slt i32 %v6_eed4, 0
  %v8_eed4 = icmp slt i32 %v2_eed4, 0
  %v9_eed4 = icmp eq i32 %v0_eed4, %v3_eed0
  store i1 %v9_eed4, i1* %cpsr_z.global-to-local, align 1
  %v2_eed8 = xor i1 %v8_eed4, %v7_eed4
  %v0_eed4.v3_eed0 = select i1 %v2_eed8, i32 %v0_eed4, i32 %v3_eed0
  store i32 %v0_eed4.v3_eed0, i32* %r1.global-to-local, align 4
  %v2_eee0 = sub i32 %v3_eed0, %v0_eed4.v3_eed0
  store i32 %v2_eee0, i32* @r2, align 4
  store i32 %v2_eee0, i32* %v2_eed0, align 4
  %v0_eee8 = load i32, i32* %sb.global-to-local, align 4
  %v1_eee8 = load i32, i32* %r1.global-to-local, align 4
  %v2_eee8 = add i32 %v1_eee8, %v0_eee8
  store i32 %v2_eee8, i32* @r1, align 4
  store i32 %v0_eee8, i32* @r0, align 4
  %v3_eef0 = call i32 @function_11080(i32 %v0_eee8, i32 %v2_eee8, i32 %v2_eee0)
  store i32 %v3_eef0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_edb4

dec_label_pc_eef8:                                ; preds = %dec_label_pc_edb4
  %v1_eef8 = add i32 %v0_edb4, 24
  %v2_eef8 = inttoptr i32 %v1_eef8 to i32*
  %v3_eef8 = load i32, i32* %v2_eef8, align 4
  store i32 %v3_eef8, i32* %r2.global-to-local, align 4
  %v1_eefc = add i32 %v3_eef8, -1
  store i32 %v1_eefc, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef00 = icmp eq i32 %v1_eefc, 0
  store i1 %v2_ef00, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_eefc, 1
  br i1 %tmp427, label %dec_label_pc_ed38.backedge.thread, label %dec_label_pc_ef08

dec_label_pc_ef08:                                ; preds = %dec_label_pc_eef8
  %v2_ef08 = add i32 %v1_eefc, %v0_edb4
  store i32 %v2_ef08, i32* %r3.global-to-local, align 4
  %v1_ef0c = add i32 %v2_ef08, 28
  %v2_ef0c = inttoptr i32 %v1_ef0c to i8*
  %v3_ef0c = load i8, i8* %v2_ef0c, align 1
  %v4_ef0c = zext i8 %v3_ef0c to i32
  store i32 %v4_ef0c, i32* %r3.global-to-local, align 4
  %v2_ef10 = icmp ugt i8 %v3_ef0c, 61
  store i1 %v2_ef10, i1* %cpsr_c.global-to-local, align 1
  %v7_ef10 = icmp eq i8 %v3_ef0c, 62
  store i1 %v7_ef10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef10, label %dec_label_pc_ef74, label %bb428

bb428:                                            ; preds = %dec_label_pc_ef08
  %v3_ef14 = icmp ugt i8 %v3_ef0c, 57
  store i1 %v3_ef14, i1* %cpsr_c.global-to-local, align 1
  %v8_ef14 = icmp eq i8 %v3_ef0c, 58
  store i1 %v8_ef14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef14, label %dec_label_pc_ef74, label %dec_label_pc_ef1c

dec_label_pc_ef1c:                                ; preds = %bb428
  %v2_ef1c = icmp ugt i8 %v3_ef0c, 35
  store i1 %v2_ef1c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef1c = icmp eq i8 %v3_ef0c, 36
  store i1 %v7_ef1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef1c, label %dec_label_pc_ef74, label %dec_label_pc_ef24

dec_label_pc_ef24:                                ; preds = %dec_label_pc_ef1c
  %v2_ef24 = icmp ugt i8 %v3_ef0c, 34
  store i1 %v2_ef24, i1* %cpsr_c.global-to-local, align 1
  %v7_ef24 = icmp eq i8 %v3_ef0c, 35
  store i1 %v7_ef24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef24, label %dec_label_pc_ef74, label %dec_label_pc_ef2c

dec_label_pc_ef2c:                                ; preds = %dec_label_pc_ef24
  %v2_ef2c = icmp ugt i8 %v3_ef0c, 36
  store i1 %v2_ef2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef2c = icmp eq i8 %v3_ef0c, 37
  store i1 %v7_ef2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef2c, label %dec_label_pc_ef74, label %dec_label_pc_ef5c.preheader

dec_label_pc_ef5c.preheader:                      ; preds = %dec_label_pc_ef2c
  %v3_ef30 = add i32 %v0_edb4, 28
  %v2_ef34 = add i32 %v3_ef30, %v3_eef8
  store i32 %v2_ef34, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ef5c

dec_label_pc_ef40:                                ; preds = %bb429
  %v2_ef40 = icmp ugt i8 %v3_ef64, 35
  store i1 %v2_ef40, i1* %cpsr_c.global-to-local, align 1
  %v7_ef40 = icmp eq i8 %v3_ef64, 36
  store i1 %v7_ef40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef40, label %dec_label_pc_ef74, label %dec_label_pc_ef48

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef40
  %v2_ef48 = icmp ugt i8 %v3_ef64, 34
  store i1 %v2_ef48, i1* %cpsr_c.global-to-local, align 1
  %v7_ef48 = icmp eq i8 %v3_ef64, 35
  store i1 %v7_ef48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef48, label %dec_label_pc_ef74, label %dec_label_pc_ef50

dec_label_pc_ef50:                                ; preds = %dec_label_pc_ef48
  %v2_ef50 = icmp ugt i8 %v3_ef64, 36
  store i1 %v2_ef50, i1* %cpsr_c.global-to-local, align 1
  %v7_ef50 = icmp eq i8 %v3_ef64, 37
  store i1 %v7_ef50, i1* %cpsr_z.global-to-local, align 1
  %v1_ef54 = add i32 %v0_ef54, -1
  store i32 %v1_ef54, i32* %r3.global-to-local, align 4
  br i1 %v7_ef50, label %dec_label_pc_ef74, label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef5c.preheader, %dec_label_pc_ef50
  %v0_ef54 = phi i32 [ %v2_ef34, %dec_label_pc_ef5c.preheader ], [ %v1_ef54, %dec_label_pc_ef50 ]
  %v0_ef5c = phi i32 [ %v1_eefc, %dec_label_pc_ef5c.preheader ], [ %v1_ef5c, %dec_label_pc_ef50 ]
  %v1_ef5c = add i32 %v0_ef5c, -1
  store i32 %v1_ef5c, i32* %r1.global-to-local, align 4
  %v2_ef5c = icmp ne i32 %v0_ef5c, 0
  store i1 %v2_ef5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef5c = icmp eq i32 %v0_ef5c, 1
  store i1 %v7_ef5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef5c, label %dec_label_pc_ed38.backedge.thread561, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef5c
  %v1_ef64 = add i32 %v0_ef54, -2
  %v2_ef64 = inttoptr i32 %v1_ef64 to i8*
  %v3_ef64 = load i8, i8* %v2_ef64, align 1
  %v4_ef64 = zext i8 %v3_ef64 to i32
  store i32 %v4_ef64, i32* %r2.global-to-local, align 4
  %v2_ef68 = icmp ugt i8 %v3_ef64, 61
  store i1 %v2_ef68, i1* %cpsr_c.global-to-local, align 1
  %v7_ef68 = icmp eq i8 %v3_ef64, 62
  store i1 %v7_ef68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef68, label %dec_label_pc_ef74, label %bb429

bb429:                                            ; preds = %dec_label_pc_ef64
  %v3_ef6c = icmp ugt i8 %v3_ef64, 57
  store i1 %v3_ef6c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef6c = icmp eq i8 %v3_ef64, 58
  store i1 %v8_ef6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef6c, label %dec_label_pc_ef74, label %dec_label_pc_ef40

dec_label_pc_ef74:                                ; preds = %dec_label_pc_ef64, %bb429, %dec_label_pc_ef50, %dec_label_pc_ef48, %dec_label_pc_ef40, %dec_label_pc_ef2c, %dec_label_pc_ef08, %dec_label_pc_ef24, %dec_label_pc_ef1c, %bb428
  %v0_ef78 = phi i32 [ %v1_eefc, %dec_label_pc_ef2c ], [ %v1_eefc, %dec_label_pc_ef08 ], [ %v1_eefc, %dec_label_pc_ef24 ], [ %v1_eefc, %dec_label_pc_ef1c ], [ %v1_eefc, %bb428 ], [ %v1_ef5c, %dec_label_pc_ef40 ], [ %v1_ef5c, %dec_label_pc_ef48 ], [ %v1_ef5c, %dec_label_pc_ef50 ], [ %v1_ef5c, %bb429 ], [ %v1_ef5c, %dec_label_pc_ef64 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_ef78 = add i32 %v0_ef78, 1
  store i32 %v1_ef78, i32* @r7, align 4
  %v1_ef7c = call i32 @function_fb64(i32 8)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_ef8c = call i32 @function_faa0(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_ef8c, i32* %r0.global-to-local, align 4
  %v3_ef90 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ef90, i32* %r2.global-to-local, align 4
  store i32 %v3_ef8c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ef9c = load i32, i32* @r6, align 4
  %v1_ef9c = add i32 %v0_ef9c, 4
  %v2_ef9c = inttoptr i32 %v1_ef9c to i32*
  %v3_ef9c = load i32, i32* %v2_ef9c, align 4
  store i32 %v3_ef9c, i32* %r0.global-to-local, align 4
  %v4_efa0 = call i32 @function_11280(i32 %v3_ef9c, i32 %v3_ef8c, i32 %v3_ef90, i32 16384)
  store i32 %v4_efa0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_efb0 = load i32, i32* @r6, align 4
  %v1_efb0 = add i32 %v0_efb0, 4
  %v2_efb0 = inttoptr i32 %v1_efb0 to i32*
  %v3_efb0 = load i32, i32* %v2_efb0, align 4
  store i32 %v3_efb0, i32* %r0.global-to-local, align 4
  %v4_efb4 = call i32 @function_11280(i32 %v3_efb0, i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_efbc = call i32 @function_fac4(i32 8)
  store i32 %v1_efbc, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_efc4 = load i32, i32* @r6, align 4
  %v2_efc4 = add i32 %v1_efc4, 12
  %v3_efc4 = inttoptr i32 %v2_efc4 to i32*
  store i32 10, i32* %v3_efc4, align 4
  br label %dec_label_pc_eed0

dec_label_pc_efcc:                                ; preds = %dec_label_pc_edb4
  %v1_efcc = add i32 %v0_edb4, 24
  %v2_efcc = inttoptr i32 %v1_efcc to i32*
  %v3_efcc = load i32, i32* %v2_efcc, align 4
  store i32 %v3_efcc, i32* %r2.global-to-local, align 4
  %v1_efd0 = add i32 %v3_efcc, -1
  store i32 %v1_efd0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efd4 = icmp eq i32 %v1_efd0, 0
  store i1 %v2_efd4, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_efd0, 1
  br i1 %tmp430, label %dec_label_pc_ed38.backedge.thread, label %dec_label_pc_efdc

dec_label_pc_efdc:                                ; preds = %dec_label_pc_efcc
  %v2_efdc = add i32 %v1_efd0, %v0_edb4
  store i32 %v2_efdc, i32* %r3.global-to-local, align 4
  %v1_efe0 = add i32 %v2_efdc, 28
  %v2_efe0 = inttoptr i32 %v1_efe0 to i8*
  %v3_efe0 = load i8, i8* %v2_efe0, align 1
  %v4_efe0 = zext i8 %v3_efe0 to i32
  store i32 %v4_efe0, i32* %r3.global-to-local, align 4
  %v2_efe4 = icmp ugt i8 %v3_efe0, 61
  store i1 %v2_efe4, i1* %cpsr_c.global-to-local, align 1
  %v7_efe4 = icmp eq i8 %v3_efe0, 62
  store i1 %v7_efe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efe4, label %dec_label_pc_f048, label %bb431

bb431:                                            ; preds = %dec_label_pc_efdc
  %v3_efe8 = icmp ugt i8 %v3_efe0, 57
  store i1 %v3_efe8, i1* %cpsr_c.global-to-local, align 1
  %v8_efe8 = icmp eq i8 %v3_efe0, 58
  store i1 %v8_efe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efe8, label %dec_label_pc_f048, label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %bb431
  %v2_eff0 = icmp ugt i8 %v3_efe0, 35
  store i1 %v2_eff0, i1* %cpsr_c.global-to-local, align 1
  %v7_eff0 = icmp eq i8 %v3_efe0, 36
  store i1 %v7_eff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eff0, label %dec_label_pc_f048, label %dec_label_pc_eff8

dec_label_pc_eff8:                                ; preds = %dec_label_pc_eff0
  %v2_eff8 = icmp ugt i8 %v3_efe0, 34
  store i1 %v2_eff8, i1* %cpsr_c.global-to-local, align 1
  %v7_eff8 = icmp eq i8 %v3_efe0, 35
  store i1 %v7_eff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eff8, label %dec_label_pc_f048, label %dec_label_pc_f000

dec_label_pc_f000:                                ; preds = %dec_label_pc_eff8
  %v2_f000 = icmp ugt i8 %v3_efe0, 36
  store i1 %v2_f000, i1* %cpsr_c.global-to-local, align 1
  %v7_f000 = icmp eq i8 %v3_efe0, 37
  store i1 %v7_f000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f000, label %dec_label_pc_f048, label %dec_label_pc_f030.preheader

dec_label_pc_f030.preheader:                      ; preds = %dec_label_pc_f000
  %v3_f004 = add i32 %v0_edb4, 28
  %v2_f008 = add i32 %v3_f004, %v3_efcc
  store i32 %v2_f008, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f030

dec_label_pc_f014:                                ; preds = %bb432
  %v2_f014 = icmp ugt i8 %v3_f038, 35
  store i1 %v2_f014, i1* %cpsr_c.global-to-local, align 1
  %v7_f014 = icmp eq i8 %v3_f038, 36
  store i1 %v7_f014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f014, label %dec_label_pc_f048, label %dec_label_pc_f01c

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f014
  %v2_f01c = icmp ugt i8 %v3_f038, 34
  store i1 %v2_f01c, i1* %cpsr_c.global-to-local, align 1
  %v7_f01c = icmp eq i8 %v3_f038, 35
  store i1 %v7_f01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f01c, label %dec_label_pc_f048, label %dec_label_pc_f024

dec_label_pc_f024:                                ; preds = %dec_label_pc_f01c
  %v2_f024 = icmp ugt i8 %v3_f038, 36
  store i1 %v2_f024, i1* %cpsr_c.global-to-local, align 1
  %v7_f024 = icmp eq i8 %v3_f038, 37
  store i1 %v7_f024, i1* %cpsr_z.global-to-local, align 1
  %v1_f028 = add i32 %v0_f028, -1
  store i32 %v1_f028, i32* %r3.global-to-local, align 4
  br i1 %v7_f024, label %dec_label_pc_f048, label %dec_label_pc_f030

dec_label_pc_f030:                                ; preds = %dec_label_pc_f030.preheader, %dec_label_pc_f024
  %v0_f028 = phi i32 [ %v2_f008, %dec_label_pc_f030.preheader ], [ %v1_f028, %dec_label_pc_f024 ]
  %v0_f030 = phi i32 [ %v1_efd0, %dec_label_pc_f030.preheader ], [ %v1_f030, %dec_label_pc_f024 ]
  %v1_f030 = add i32 %v0_f030, -1
  store i32 %v1_f030, i32* %r1.global-to-local, align 4
  %v2_f030 = icmp ne i32 %v0_f030, 0
  store i1 %v2_f030, i1* %cpsr_c.global-to-local, align 1
  %v7_f030 = icmp eq i32 %v0_f030, 1
  store i1 %v7_f030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f030, label %dec_label_pc_ed38.backedge.thread561, label %dec_label_pc_f038

dec_label_pc_f038:                                ; preds = %dec_label_pc_f030
  %v1_f038 = add i32 %v0_f028, -2
  %v2_f038 = inttoptr i32 %v1_f038 to i8*
  %v3_f038 = load i8, i8* %v2_f038, align 1
  %v4_f038 = zext i8 %v3_f038 to i32
  store i32 %v4_f038, i32* %r2.global-to-local, align 4
  %v2_f03c = icmp ugt i8 %v3_f038, 61
  store i1 %v2_f03c, i1* %cpsr_c.global-to-local, align 1
  %v7_f03c = icmp eq i8 %v3_f038, 62
  store i1 %v7_f03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f03c, label %dec_label_pc_f048, label %bb432

bb432:                                            ; preds = %dec_label_pc_f038
  %v3_f040 = icmp ugt i8 %v3_f038, 57
  store i1 %v3_f040, i1* %cpsr_c.global-to-local, align 1
  %v8_f040 = icmp eq i8 %v3_f038, 58
  store i1 %v8_f040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f040, label %dec_label_pc_f048, label %dec_label_pc_f014

dec_label_pc_f048:                                ; preds = %dec_label_pc_f038, %bb432, %dec_label_pc_f024, %dec_label_pc_f01c, %dec_label_pc_f014, %dec_label_pc_f000, %dec_label_pc_efdc, %dec_label_pc_eff8, %dec_label_pc_eff0, %bb431
  %v0_f04c = phi i32 [ %v1_efd0, %dec_label_pc_f000 ], [ %v1_efd0, %dec_label_pc_efdc ], [ %v1_efd0, %dec_label_pc_eff8 ], [ %v1_efd0, %dec_label_pc_eff0 ], [ %v1_efd0, %bb431 ], [ %v1_f030, %dec_label_pc_f014 ], [ %v1_f030, %dec_label_pc_f01c ], [ %v1_f030, %dec_label_pc_f024 ], [ %v1_f030, %bb432 ], [ %v1_f030, %dec_label_pc_f038 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f04c = add i32 %v0_f04c, 1
  store i32 %v1_f04c, i32* @r7, align 4
  %v1_f050 = call i32 @function_fb64(i32 7)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f060 = call i32 @function_faa0(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f060, i32* %r0.global-to-local, align 4
  %v3_f064 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f064, i32* %r2.global-to-local, align 4
  store i32 %v3_f060, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f070 = load i32, i32* @r6, align 4
  %v1_f070 = add i32 %v0_f070, 4
  %v2_f070 = inttoptr i32 %v1_f070 to i32*
  %v3_f070 = load i32, i32* %v2_f070, align 4
  store i32 %v3_f070, i32* %r0.global-to-local, align 4
  %v4_f074 = call i32 @function_11280(i32 %v3_f070, i32 %v3_f060, i32 %v3_f064, i32 16384)
  store i32 %v4_f074, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f084 = load i32, i32* @r6, align 4
  %v1_f084 = add i32 %v0_f084, 4
  %v2_f084 = inttoptr i32 %v1_f084 to i32*
  %v3_f084 = load i32, i32* %v2_f084, align 4
  store i32 %v3_f084, i32* %r0.global-to-local, align 4
  %v4_f088 = call i32 @function_11280(i32 %v3_f084, i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f090 = call i32 @function_fac4(i32 7)
  store i32 %v1_f090, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f098 = load i32, i32* @r6, align 4
  %v2_f098 = add i32 %v1_f098, 12
  %v3_f098 = inttoptr i32 %v2_f098 to i32*
  store i32 9, i32* %v3_f098, align 4
  br label %dec_label_pc_eed0

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_edb4
  %v1_f0a0 = add i32 %v0_edb4, 24
  %v2_f0a0 = inttoptr i32 %v1_f0a0 to i32*
  %v3_f0a0 = load i32, i32* %v2_f0a0, align 4
  store i32 %v3_f0a0, i32* %r1.global-to-local, align 4
  %v0_f0a4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f0a4, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f0ac166 = icmp eq i32 %v3_f0a0, 0
  store i1 %v3_f0ac166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f0ac166, i1* %cpsr_z.global-to-local, align 1
  %v6_f0b0173 = icmp sgt i32 %v3_f0a0, 0
  br i1 %v6_f0b0173, label %dec_label_pc_f0b4.preheader, label %dec_label_pc_f160

dec_label_pc_f0ac.loopexit:                       ; preds = %dec_label_pc_f0d0
  %v2_f0d8 = add i32 %v1_f0d8, 2
  store i32 %v2_f0d8, i32* @r4, align 4
  %v2_f0dc = add i32 %v1_f0dc, 2
  store i32 %v2_f0dc, i32* @r7, align 4
  %v3_f0ac = icmp uge i32 %v2_f0dc, %v1_f0ac
  store i1 %v3_f0ac, i1* %cpsr_c.global-to-local, align 1
  %v9_f0ac = icmp eq i32 %v2_f0dc, %v1_f0ac
  store i1 %v9_f0ac, i1* %cpsr_z.global-to-local, align 1
  %v6_f0b0 = icmp slt i32 %v2_f0dc, %v1_f0ac
  br i1 %v6_f0b0, label %dec_label_pc_f0b4.preheader, label %dec_label_pc_f160

dec_label_pc_f0b4.preheader:                      ; preds = %dec_label_pc_f0a0, %dec_label_pc_f0ac.loopexit
  %v6_f168273 = phi i32 [ %v6_f168274, %dec_label_pc_f0ac.loopexit ], [ %v0_edb4, %dec_label_pc_f0a0 ]
  %v1_f0dc262 = phi i32 [ %v2_f0dc, %dec_label_pc_f0ac.loopexit ], [ 0, %dec_label_pc_f0a0 ]
  %v1_f0c0260 = phi i32 [ %v1_f0ac, %dec_label_pc_f0ac.loopexit ], [ %v3_f0a0, %dec_label_pc_f0a0 ]
  %v0_f0b4258 = phi i32 [ %v2_f0d8, %dec_label_pc_f0ac.loopexit ], [ %v0_f0a4, %dec_label_pc_f0a0 ]
  br label %dec_label_pc_f0b4

dec_label_pc_f0b4:                                ; preds = %dec_label_pc_f0b4.preheader, %dec_label_pc_f144
  %v6_f168274 = phi i32 [ %v6_f168273, %dec_label_pc_f0b4.preheader ], [ %v0_f14c, %dec_label_pc_f144 ]
  %v1_f0dc = phi i32 [ %v1_f0dc262, %dec_label_pc_f0b4.preheader ], [ %v1_f150, %dec_label_pc_f144 ]
  %v1_f0ac = phi i32 [ %v1_f0c0260, %dec_label_pc_f0b4.preheader ], [ %v3_f14c, %dec_label_pc_f144 ]
  %v1_f0d8 = phi i32 [ %v0_f0b4258, %dec_label_pc_f0b4.preheader ], [ %v1_f158, %dec_label_pc_f144 ]
  %v1_f0b4 = inttoptr i32 %v1_f0d8 to i8*
  %v2_f0b4 = load i8, i8* %v1_f0b4, align 1
  %v3_f0b4 = zext i8 %v2_f0b4 to i32
  store i32 %v3_f0b4, i32* @r3, align 4
  %v2_f0b8 = icmp eq i8 %v2_f0b4, -1
  store i1 %v2_f0b8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0b8, label %dec_label_pc_f0c0, label %dec_label_pc_f160

dec_label_pc_f0c0:                                ; preds = %dec_label_pc_f0b4
  %v0_f0c0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f0c0 = add i32 %v0_f0c0, %v1_f0ac
  store i32 %v2_f0c0, i32* %r2.global-to-local, align 4
  %v1_f0c4 = add i32 %v1_f0d8, 1
  store i32 %v1_f0c4, i32* @r5, align 4
  %v3_f0c8 = icmp uge i32 %v2_f0c0, %v1_f0c4
  store i1 %v3_f0c8, i1* %cpsr_c.global-to-local, align 1
  %v9_f0c8 = icmp eq i32 %v2_f0c0, %v1_f0c4
  store i1 %v9_f0c8, i1* %cpsr_z.global-to-local, align 1
  %v2_f0cc = xor i1 %v3_f0c8, true
  %v3_f0cc = or i1 %v9_f0c8, %v2_f0cc
  br i1 %v3_f0cc, label %dec_label_pc_f160, label %dec_label_pc_f0d0

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f0c0
  %v2_f0d0 = inttoptr i32 %v1_f0c4 to i8*
  %v3_f0d0 = load i8, i8* %v2_f0d0, align 1
  %v4_f0d0 = zext i8 %v3_f0d0 to i32
  store i32 %v4_f0d0, i32* @r3, align 4
  %v2_f0d4 = icmp eq i8 %v3_f0d0, -1
  store i1 %v2_f0d4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0d4, label %dec_label_pc_f0ac.loopexit, label %dec_label_pc_f0e4

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0d0
  %v2_f0e4 = icmp ugt i8 %v3_f0d0, -4
  store i1 %v2_f0e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0e4 = icmp eq i8 %v3_f0d0, -3
  store i1 %v7_f0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0e4, label %dec_label_pc_f678, label %dec_label_pc_f0ec

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f0e4
  %v1_f0ec = add i32 %v1_f0d8, 2
  store i32 %v1_f0ec, i32* @r3, align 4
  %v3_f0f0 = icmp uge i32 %v2_f0c0, %v1_f0ec
  store i1 %v3_f0f0, i1* %cpsr_c.global-to-local, align 1
  %v9_f0f0 = icmp eq i32 %v2_f0c0, %v1_f0ec
  store i1 %v9_f0f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0f4 = xor i1 %v3_f0f0, true
  %v3_f0f4 = or i1 %v9_f0f0, %v2_f0f4
  br i1 %v3_f0f4, label %dec_label_pc_f160, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f6dc, %bb454, %.thread138, %dec_label_pc_f0ec
  %v0_f0f8 = load i32, i32* @r5, align 4
  %v1_f0f8 = inttoptr i32 %v0_f0f8 to i8*
  %v2_f0f8 = load i8, i8* %v1_f0f8, align 1
  %v3_f0f8 = zext i8 %v2_f0f8 to i32
  store i32 %v3_f0f8, i32* %r3.global-to-local, align 4
  %v2_f0fc = icmp ugt i8 %v2_f0f8, -4
  store i1 %v2_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0fc = icmp eq i8 %v2_f0f8, -3
  store i1 %v7_f0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0fc, label %.thread96, label %dec_label_pc_f10c

.thread96:                                        ; preds = %dec_label_pc_f0f8
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f0f8, align 1
  %v0_f108.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f108.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f10cthread-pre-split_crit_edge

.thread96.dec_label_pc_f10cthread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f10c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f0f8, %.thread96.dec_label_pc_f10cthread-pre-split_crit_edge
  %v0_f10c.pr = phi i32 [ %v0_f10c.pr.pre, %.thread96.dec_label_pc_f10cthread-pre-split_crit_edge ], [ %v3_f0f8, %dec_label_pc_f0f8 ]
  %v2_f10c = icmp ugt i32 %v0_f10c.pr, 250
  store i1 %v2_f10c, i1* %cpsr_c.global-to-local, align 1
  %v7_f10c = icmp eq i32 %v0_f10c.pr, 251
  store i1 %v7_f10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f10c, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f10c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f114 = load i32, i32* @r5, align 4
  %v4_f114 = inttoptr i32 %v3_f114 to i8*
  store i8 -3, i8* %v4_f114, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f10c, %.thread96, %bb433
  %v0_f118 = load i32, i32* @r4, align 4
  %v1_f118 = add i32 %v0_f118, 2
  %v2_f118 = inttoptr i32 %v1_f118 to i8*
  %v3_f118 = load i8, i8* %v2_f118, align 1
  %v4_f118 = zext i8 %v3_f118 to i32
  store i32 %v4_f118, i32* %r3.global-to-local, align 4
  %v2_f11c = icmp ugt i8 %v3_f118, -4
  store i1 %v2_f11c, i1* %cpsr_c.global-to-local, align 1
  %v7_f11c = icmp eq i8 %v3_f118, -3
  store i1 %v7_f11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f11c, label %.thread100, label %dec_label_pc_f12c

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f118, align 1
  %v0_f128.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f128.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f12cthread-pre-split_crit_edge

.thread100.dec_label_pc_f12cthread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f12c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %.thread99, %.thread100.dec_label_pc_f12cthread-pre-split_crit_edge
  %v0_f12c.pr = phi i32 [ %v0_f12c.pr.pre, %.thread100.dec_label_pc_f12cthread-pre-split_crit_edge ], [ %v4_f118, %.thread99 ]
  %v2_f12c = icmp ugt i32 %v0_f12c.pr, 250
  store i1 %v2_f12c, i1* %cpsr_c.global-to-local, align 1
  %v7_f12c = icmp eq i32 %v0_f12c.pr, 251
  store i1 %v7_f12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f12c, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f12c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f134 = load i32, i32* @r4, align 4
  %v4_f134 = add i32 %v3_f134, 2
  %v5_f134 = inttoptr i32 %v4_f134 to i8*
  store i8 -3, i8* %v5_f134, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f12c, %.thread100, %bb434
  %v0_f138 = load i32, i32* @r6, align 4
  %v1_f138 = add i32 %v0_f138, 4
  %v2_f138 = inttoptr i32 %v1_f138 to i32*
  %v3_f138 = load i32, i32* %v2_f138, align 4
  store i32 %v3_f138, i32* %r0.global-to-local, align 4
  %v0_f13c = load i32, i32* @r4, align 4
  br label %dec_label_pc_f144

dec_label_pc_f144:                                ; preds = %dec_label_pc_f7f0, %.thread103
  %v0_f148 = phi i32 [ %v3_f804, %dec_label_pc_f7f0 ], [ %v3_f138, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f690, %dec_label_pc_f7f0 ], [ %v0_f13c, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_f7f0 ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_f148 = call i32 @function_11280(i32 %v0_f148, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f148, i32* %r0.global-to-local, align 4
  %v0_f14c = load i32, i32* @r6, align 4
  %v1_f14c = add i32 %v0_f14c, 24
  %v2_f14c = inttoptr i32 %v1_f14c to i32*
  %v3_f14c = load i32, i32* %v2_f14c, align 4
  store i32 %v3_f14c, i32* %r1.global-to-local, align 4
  %v0_f150 = load i32, i32* @r7, align 4
  %v1_f150 = add i32 %v0_f150, 3
  store i32 %v1_f150, i32* @r7, align 4
  %v3_f154 = icmp uge i32 %v1_f150, %v3_f14c
  store i1 %v3_f154, i1* %cpsr_c.global-to-local, align 1
  %v9_f154 = icmp eq i32 %v1_f150, %v3_f14c
  store i1 %v9_f154, i1* %cpsr_z.global-to-local, align 1
  %v0_f158 = load i32, i32* @r4, align 4
  %v1_f158 = add i32 %v0_f158, 3
  store i32 %v1_f158, i32* @r4, align 4
  %v5_f15c = icmp slt i32 %v1_f150, %v3_f14c
  br i1 %v5_f15c, label %dec_label_pc_f0b4, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %dec_label_pc_f0ac.loopexit, %dec_label_pc_f0b4, %dec_label_pc_f144, %dec_label_pc_f0ec, %dec_label_pc_f0c0, %dec_label_pc_f0a0, %dec_label_pc_f678.dec_label_pc_f160.loopexit_crit_edge
  %v6_f168 = phi i32 [ %v0_f6a8, %dec_label_pc_f678.dec_label_pc_f160.loopexit_crit_edge ], [ %v0_edb4, %dec_label_pc_f0a0 ], [ %v6_f168274, %dec_label_pc_f0b4 ], [ %v0_f14c, %dec_label_pc_f144 ], [ %v6_f168274, %dec_label_pc_f0ec ], [ %v6_f168274, %dec_label_pc_f0c0 ], [ %v6_f168274, %dec_label_pc_f0ac.loopexit ]
  %v0_f160 = phi i32 [ %v0_f160.pre.pre, %dec_label_pc_f678.dec_label_pc_f160.loopexit_crit_edge ], [ 0, %dec_label_pc_f0a0 ], [ %v1_f0dc, %dec_label_pc_f0b4 ], [ %v1_f150, %dec_label_pc_f144 ], [ %v1_f0dc, %dec_label_pc_f0ec ], [ %v1_f0dc, %dec_label_pc_f0c0 ], [ %v2_f0dc, %dec_label_pc_f0ac.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f160 = icmp eq i32 %v0_f160, 0
  store i1 %v2_f160, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f160, 1
  br i1 %tmp435, label %dec_label_pc_f54c, label %bb436

bb436:                                            ; preds = %dec_label_pc_f160
  store i32 3, i32* @r3, align 4
  %v7_f168 = add i32 %v6_f168, 12
  %v8_f168 = inttoptr i32 %v7_f168 to i32*
  store i32 3, i32* %v8_f168, align 4
  br label %dec_label_pc_f54c

dec_label_pc_f170:                                ; preds = %dec_label_pc_edb4
  %v1_f170 = add i32 %v0_edb4, 24
  %v2_f170 = inttoptr i32 %v1_f170 to i32*
  %v3_f170 = load i32, i32* %v2_f170, align 4
  store i32 %v3_f170, i32* %r2.global-to-local, align 4
  %v1_f174 = add i32 %v3_f170, -1
  store i32 %v1_f174, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f178 = icmp eq i32 %v1_f174, 0
  store i1 %v2_f178, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f174, 1
  br i1 %tmp437, label %dec_label_pc_ed38.backedge.thread, label %dec_label_pc_f180

dec_label_pc_f180:                                ; preds = %dec_label_pc_f170
  %v2_f180 = add i32 %v1_f174, %v0_edb4
  store i32 %v2_f180, i32* %r3.global-to-local, align 4
  %v1_f184 = add i32 %v2_f180, 28
  %v2_f184 = inttoptr i32 %v1_f184 to i8*
  %v3_f184 = load i8, i8* %v2_f184, align 1
  %v4_f184 = zext i8 %v3_f184 to i32
  store i32 %v4_f184, i32* %r3.global-to-local, align 4
  %v2_f188 = icmp ugt i8 %v3_f184, 61
  store i1 %v2_f188, i1* %cpsr_c.global-to-local, align 1
  %v7_f188 = icmp eq i8 %v3_f184, 62
  store i1 %v7_f188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f188, label %dec_label_pc_f1ec, label %bb438

bb438:                                            ; preds = %dec_label_pc_f180
  %v3_f18c = icmp ugt i8 %v3_f184, 57
  store i1 %v3_f18c, i1* %cpsr_c.global-to-local, align 1
  %v8_f18c = icmp eq i8 %v3_f184, 58
  store i1 %v8_f18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f18c, label %dec_label_pc_f1ec, label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %bb438
  %v2_f194 = icmp ugt i8 %v3_f184, 35
  store i1 %v2_f194, i1* %cpsr_c.global-to-local, align 1
  %v7_f194 = icmp eq i8 %v3_f184, 36
  store i1 %v7_f194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f194, label %dec_label_pc_f1ec, label %dec_label_pc_f19c

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f194
  %v2_f19c = icmp ugt i8 %v3_f184, 34
  store i1 %v2_f19c, i1* %cpsr_c.global-to-local, align 1
  %v7_f19c = icmp eq i8 %v3_f184, 35
  store i1 %v7_f19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f19c, label %dec_label_pc_f1ec, label %dec_label_pc_f1a4

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f19c
  %v2_f1a4 = icmp ugt i8 %v3_f184, 36
  store i1 %v2_f1a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1a4 = icmp eq i8 %v3_f184, 37
  store i1 %v7_f1a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1a4, label %dec_label_pc_f1ec, label %dec_label_pc_f1d4.preheader

dec_label_pc_f1d4.preheader:                      ; preds = %dec_label_pc_f1a4
  %v3_f1a8 = add i32 %v0_edb4, 28
  %v2_f1ac = add i32 %v3_f1a8, %v3_f170
  store i32 %v2_f1ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f1d4

dec_label_pc_f1b8:                                ; preds = %bb439
  %v2_f1b8 = icmp ugt i8 %v3_f1dc, 35
  store i1 %v2_f1b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1b8 = icmp eq i8 %v3_f1dc, 36
  store i1 %v7_f1b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1b8, label %dec_label_pc_f1ec, label %dec_label_pc_f1c0

dec_label_pc_f1c0:                                ; preds = %dec_label_pc_f1b8
  %v2_f1c0 = icmp ugt i8 %v3_f1dc, 34
  store i1 %v2_f1c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1c0 = icmp eq i8 %v3_f1dc, 35
  store i1 %v7_f1c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1c0, label %dec_label_pc_f1ec, label %dec_label_pc_f1c8

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_f1c0
  %v2_f1c8 = icmp ugt i8 %v3_f1dc, 36
  store i1 %v2_f1c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1c8 = icmp eq i8 %v3_f1dc, 37
  store i1 %v7_f1c8, i1* %cpsr_z.global-to-local, align 1
  %v1_f1cc = add i32 %v0_f1cc, -1
  store i32 %v1_f1cc, i32* %r3.global-to-local, align 4
  br i1 %v7_f1c8, label %dec_label_pc_f1ec, label %dec_label_pc_f1d4

dec_label_pc_f1d4:                                ; preds = %dec_label_pc_f1d4.preheader, %dec_label_pc_f1c8
  %v0_f1cc = phi i32 [ %v2_f1ac, %dec_label_pc_f1d4.preheader ], [ %v1_f1cc, %dec_label_pc_f1c8 ]
  %v0_f1d4 = phi i32 [ %v1_f174, %dec_label_pc_f1d4.preheader ], [ %v1_f1d4, %dec_label_pc_f1c8 ]
  %v1_f1d4 = add i32 %v0_f1d4, -1
  store i32 %v1_f1d4, i32* %r1.global-to-local, align 4
  %v2_f1d4 = icmp ne i32 %v0_f1d4, 0
  store i1 %v2_f1d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1d4 = icmp eq i32 %v0_f1d4, 1
  store i1 %v7_f1d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1d4, label %dec_label_pc_ed38.backedge.thread561, label %dec_label_pc_f1dc

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1d4
  %v1_f1dc = add i32 %v0_f1cc, -2
  %v2_f1dc = inttoptr i32 %v1_f1dc to i8*
  %v3_f1dc = load i8, i8* %v2_f1dc, align 1
  %v4_f1dc = zext i8 %v3_f1dc to i32
  store i32 %v4_f1dc, i32* %r2.global-to-local, align 4
  %v2_f1e0 = icmp ugt i8 %v3_f1dc, 61
  store i1 %v2_f1e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1e0 = icmp eq i8 %v3_f1dc, 62
  store i1 %v7_f1e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e0, label %dec_label_pc_f1ec, label %bb439

bb439:                                            ; preds = %dec_label_pc_f1dc
  %v3_f1e4 = icmp ugt i8 %v3_f1dc, 57
  store i1 %v3_f1e4, i1* %cpsr_c.global-to-local, align 1
  %v8_f1e4 = icmp eq i8 %v3_f1dc, 58
  store i1 %v8_f1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1e4, label %dec_label_pc_f1ec, label %dec_label_pc_f1b8

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_f1dc, %bb439, %dec_label_pc_f1c8, %dec_label_pc_f1c0, %dec_label_pc_f1b8, %dec_label_pc_f1a4, %dec_label_pc_f180, %dec_label_pc_f19c, %dec_label_pc_f194, %bb438
  %v0_f1f0 = phi i32 [ %v1_f174, %dec_label_pc_f1a4 ], [ %v1_f174, %dec_label_pc_f180 ], [ %v1_f174, %dec_label_pc_f19c ], [ %v1_f174, %dec_label_pc_f194 ], [ %v1_f174, %bb438 ], [ %v1_f1d4, %dec_label_pc_f1b8 ], [ %v1_f1d4, %dec_label_pc_f1c0 ], [ %v1_f1d4, %dec_label_pc_f1c8 ], [ %v1_f1d4, %bb439 ], [ %v1_f1d4, %dec_label_pc_f1dc ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f1f0 = add i32 %v0_f1f0, 1
  store i32 %v1_f1f0, i32* @r7, align 4
  %v1_f1f4 = call i32 @function_fb64(i32 6)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f204 = call i32 @function_faa0(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f204, i32* %r0.global-to-local, align 4
  %v3_f208 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f208, i32* %r2.global-to-local, align 4
  store i32 %v3_f204, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f214 = load i32, i32* @r6, align 4
  %v1_f214 = add i32 %v0_f214, 4
  %v2_f214 = inttoptr i32 %v1_f214 to i32*
  %v3_f214 = load i32, i32* %v2_f214, align 4
  store i32 %v3_f214, i32* %r0.global-to-local, align 4
  %v4_f218 = call i32 @function_11280(i32 %v3_f214, i32 %v3_f204, i32 %v3_f208, i32 16384)
  store i32 %v4_f218, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f228 = load i32, i32* @r6, align 4
  %v1_f228 = add i32 %v0_f228, 4
  %v2_f228 = inttoptr i32 %v1_f228 to i32*
  %v3_f228 = load i32, i32* %v2_f228, align 4
  store i32 %v3_f228, i32* %r0.global-to-local, align 4
  %v4_f22c = call i32 @function_11280(i32 %v3_f228, i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f234 = call i32 @function_fac4(i32 6)
  store i32 %v1_f234, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f23c = load i32, i32* @r6, align 4
  %v2_f23c = add i32 %v1_f23c, 12
  %v3_f23c = inttoptr i32 %v2_f23c to i32*
  store i32 7, i32* %v3_f23c, align 4
  br label %dec_label_pc_eed0

dec_label_pc_f244:                                ; preds = %dec_label_pc_edb4
  %v1_f244 = add i32 %v0_edb4, 24
  %v2_f244 = inttoptr i32 %v1_f244 to i32*
  %v3_f244 = load i32, i32* %v2_f244, align 4
  store i32 %v3_f244, i32* %r2.global-to-local, align 4
  %v1_f248 = add i32 %v3_f244, -1
  store i32 %v1_f248, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f24c = icmp eq i32 %v1_f248, 0
  store i1 %v2_f24c, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f248, 1
  br i1 %tmp440, label %dec_label_pc_ed38.backedge.thread, label %dec_label_pc_f254

dec_label_pc_f254:                                ; preds = %dec_label_pc_f244
  %v2_f254 = add i32 %v1_f248, %v0_edb4
  store i32 %v2_f254, i32* %r3.global-to-local, align 4
  %v1_f258 = add i32 %v2_f254, 28
  %v2_f258 = inttoptr i32 %v1_f258 to i8*
  %v3_f258 = load i8, i8* %v2_f258, align 1
  %v4_f258 = zext i8 %v3_f258 to i32
  store i32 %v4_f258, i32* %r3.global-to-local, align 4
  %v2_f25c = icmp ugt i8 %v3_f258, 61
  store i1 %v2_f25c, i1* %cpsr_c.global-to-local, align 1
  %v7_f25c = icmp eq i8 %v3_f258, 62
  store i1 %v7_f25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f25c, label %dec_label_pc_f2c0, label %bb441

bb441:                                            ; preds = %dec_label_pc_f254
  %v3_f260 = icmp ugt i8 %v3_f258, 57
  store i1 %v3_f260, i1* %cpsr_c.global-to-local, align 1
  %v8_f260 = icmp eq i8 %v3_f258, 58
  store i1 %v8_f260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f260, label %dec_label_pc_f2c0, label %dec_label_pc_f268

dec_label_pc_f268:                                ; preds = %bb441
  %v2_f268 = icmp ugt i8 %v3_f258, 35
  store i1 %v2_f268, i1* %cpsr_c.global-to-local, align 1
  %v7_f268 = icmp eq i8 %v3_f258, 36
  store i1 %v7_f268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f268, label %dec_label_pc_f2c0, label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %dec_label_pc_f268
  %v2_f270 = icmp ugt i8 %v3_f258, 34
  store i1 %v2_f270, i1* %cpsr_c.global-to-local, align 1
  %v7_f270 = icmp eq i8 %v3_f258, 35
  store i1 %v7_f270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f270, label %dec_label_pc_f2c0, label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f270
  %v2_f278 = icmp ugt i8 %v3_f258, 36
  store i1 %v2_f278, i1* %cpsr_c.global-to-local, align 1
  %v7_f278 = icmp eq i8 %v3_f258, 37
  store i1 %v7_f278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f278, label %dec_label_pc_f2c0, label %dec_label_pc_f2a8.preheader

dec_label_pc_f2a8.preheader:                      ; preds = %dec_label_pc_f278
  %v3_f27c = add i32 %v0_edb4, 28
  %v2_f280 = add i32 %v3_f27c, %v3_f244
  store i32 %v2_f280, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f2a8

dec_label_pc_f28c:                                ; preds = %bb442
  %v2_f28c = icmp ugt i8 %v3_f2b0, 35
  store i1 %v2_f28c, i1* %cpsr_c.global-to-local, align 1
  %v7_f28c = icmp eq i8 %v3_f2b0, 36
  store i1 %v7_f28c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f28c, label %dec_label_pc_f2c0, label %dec_label_pc_f294

dec_label_pc_f294:                                ; preds = %dec_label_pc_f28c
  %v2_f294 = icmp ugt i8 %v3_f2b0, 34
  store i1 %v2_f294, i1* %cpsr_c.global-to-local, align 1
  %v7_f294 = icmp eq i8 %v3_f2b0, 35
  store i1 %v7_f294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f294, label %dec_label_pc_f2c0, label %dec_label_pc_f29c

dec_label_pc_f29c:                                ; preds = %dec_label_pc_f294
  %v2_f29c = icmp ugt i8 %v3_f2b0, 36
  store i1 %v2_f29c, i1* %cpsr_c.global-to-local, align 1
  %v7_f29c = icmp eq i8 %v3_f2b0, 37
  store i1 %v7_f29c, i1* %cpsr_z.global-to-local, align 1
  %v1_f2a0 = add i32 %v0_f2a0, -1
  store i32 %v1_f2a0, i32* %r3.global-to-local, align 4
  br i1 %v7_f29c, label %dec_label_pc_f2c0, label %dec_label_pc_f2a8

dec_label_pc_f2a8:                                ; preds = %dec_label_pc_f2a8.preheader, %dec_label_pc_f29c
  %v0_f2a0 = phi i32 [ %v2_f280, %dec_label_pc_f2a8.preheader ], [ %v1_f2a0, %dec_label_pc_f29c ]
  %v0_f2a8 = phi i32 [ %v1_f248, %dec_label_pc_f2a8.preheader ], [ %v1_f2a8, %dec_label_pc_f29c ]
  %v1_f2a8 = add i32 %v0_f2a8, -1
  store i32 %v1_f2a8, i32* %r1.global-to-local, align 4
  %v2_f2a8 = icmp ne i32 %v0_f2a8, 0
  store i1 %v2_f2a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2a8 = icmp eq i32 %v0_f2a8, 1
  store i1 %v7_f2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2a8, label %dec_label_pc_ed38.backedge.thread561, label %dec_label_pc_f2b0

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f2a8
  %v1_f2b0 = add i32 %v0_f2a0, -2
  %v2_f2b0 = inttoptr i32 %v1_f2b0 to i8*
  %v3_f2b0 = load i8, i8* %v2_f2b0, align 1
  %v4_f2b0 = zext i8 %v3_f2b0 to i32
  store i32 %v4_f2b0, i32* %r2.global-to-local, align 4
  %v2_f2b4 = icmp ugt i8 %v3_f2b0, 61
  store i1 %v2_f2b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b4 = icmp eq i8 %v3_f2b0, 62
  store i1 %v7_f2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2b4, label %dec_label_pc_f2c0, label %bb442

bb442:                                            ; preds = %dec_label_pc_f2b0
  %v3_f2b8 = icmp ugt i8 %v3_f2b0, 57
  store i1 %v3_f2b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f2b8 = icmp eq i8 %v3_f2b0, 58
  store i1 %v8_f2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2b8, label %dec_label_pc_f2c0, label %dec_label_pc_f28c

dec_label_pc_f2c0:                                ; preds = %dec_label_pc_f2b0, %bb442, %dec_label_pc_f29c, %dec_label_pc_f294, %dec_label_pc_f28c, %dec_label_pc_f278, %dec_label_pc_f254, %dec_label_pc_f270, %dec_label_pc_f268, %bb441
  %v0_f2c4 = phi i32 [ %v1_f248, %dec_label_pc_f278 ], [ %v1_f248, %dec_label_pc_f254 ], [ %v1_f248, %dec_label_pc_f270 ], [ %v1_f248, %dec_label_pc_f268 ], [ %v1_f248, %bb441 ], [ %v1_f2a8, %dec_label_pc_f28c ], [ %v1_f2a8, %dec_label_pc_f294 ], [ %v1_f2a8, %dec_label_pc_f29c ], [ %v1_f2a8, %bb442 ], [ %v1_f2a8, %dec_label_pc_f2b0 ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f2c4 = add i32 %v0_f2c4, 1
  store i32 %v1_f2c4, i32* @r7, align 4
  %v1_f2c8 = call i32 @function_fb64(i32 5)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f2d8 = call i32 @function_faa0(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_f2d8, i32* %r0.global-to-local, align 4
  %v3_f2dc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f2dc, i32* %r2.global-to-local, align 4
  store i32 %v3_f2d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2e8 = load i32, i32* @r6, align 4
  %v1_f2e8 = add i32 %v0_f2e8, 4
  %v2_f2e8 = inttoptr i32 %v1_f2e8 to i32*
  %v3_f2e8 = load i32, i32* %v2_f2e8, align 4
  store i32 %v3_f2e8, i32* %r0.global-to-local, align 4
  %v4_f2ec = call i32 @function_11280(i32 %v3_f2e8, i32 %v3_f2d8, i32 %v3_f2dc, i32 16384)
  store i32 %v4_f2ec, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f2fc = load i32, i32* @r6, align 4
  %v1_f2fc = add i32 %v0_f2fc, 4
  %v2_f2fc = inttoptr i32 %v1_f2fc to i32*
  %v3_f2fc = load i32, i32* %v2_f2fc, align 4
  store i32 %v3_f2fc, i32* %r0.global-to-local, align 4
  %v4_f300 = call i32 @function_11280(i32 %v3_f2fc, i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f308 = call i32 @function_fac4(i32 5)
  store i32 %v1_f308, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f310 = load i32, i32* @r6, align 4
  %v2_f310 = add i32 %v1_f310, 12
  %v3_f310 = inttoptr i32 %v2_f310 to i32*
  store i32 6, i32* %v3_f310, align 4
  br label %dec_label_pc_eed0

dec_label_pc_f390:                                ; preds = %dec_label_pc_edb4
  %v1_f390 = add i32 %v0_edb4, 24
  %v2_f390 = inttoptr i32 %v1_f390 to i32*
  %v3_f390 = load i32, i32* %v2_f390, align 4
  store i32 %v3_f390, i32* %r2.global-to-local, align 4
  %v1_f394 = add i32 %v3_f390, -1
  store i32 %v1_f394, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f398 = icmp eq i32 %v1_f394, 0
  store i1 %v2_f398, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f394, 1
  br i1 %tmp443, label %dec_label_pc_ed38.backedge.thread, label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %dec_label_pc_f390
  %v2_f3a0 = add i32 %v1_f394, %v0_edb4
  store i32 %v2_f3a0, i32* %r3.global-to-local, align 4
  %v1_f3a4 = add i32 %v2_f3a0, 28
  %v2_f3a4 = inttoptr i32 %v1_f3a4 to i8*
  %v3_f3a4 = load i8, i8* %v2_f3a4, align 1
  %v4_f3a4 = zext i8 %v3_f3a4 to i32
  store i32 %v4_f3a4, i32* %r3.global-to-local, align 4
  %v2_f3a8 = icmp ugt i8 %v3_f3a4, 61
  store i1 %v2_f3a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a8 = icmp eq i8 %v3_f3a4, 62
  store i1 %v7_f3a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a8, label %dec_label_pc_f40c, label %bb444

bb444:                                            ; preds = %dec_label_pc_f3a0
  %v3_f3ac = icmp ugt i8 %v3_f3a4, 57
  store i1 %v3_f3ac, i1* %cpsr_c.global-to-local, align 1
  %v8_f3ac = icmp eq i8 %v3_f3a4, 58
  store i1 %v8_f3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3ac, label %dec_label_pc_f40c, label %dec_label_pc_f3b4

dec_label_pc_f3b4:                                ; preds = %bb444
  %v2_f3b4 = icmp ugt i8 %v3_f3a4, 35
  store i1 %v2_f3b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b4 = icmp eq i8 %v3_f3a4, 36
  store i1 %v7_f3b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b4, label %dec_label_pc_f40c, label %dec_label_pc_f3bc

dec_label_pc_f3bc:                                ; preds = %dec_label_pc_f3b4
  %v2_f3bc = icmp ugt i8 %v3_f3a4, 34
  store i1 %v2_f3bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3bc = icmp eq i8 %v3_f3a4, 35
  store i1 %v7_f3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3bc, label %dec_label_pc_f40c, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3bc
  %v2_f3c4 = icmp ugt i8 %v3_f3a4, 36
  store i1 %v2_f3c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3c4 = icmp eq i8 %v3_f3a4, 37
  store i1 %v7_f3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3c4, label %dec_label_pc_f40c, label %dec_label_pc_f3f4.preheader

dec_label_pc_f3f4.preheader:                      ; preds = %dec_label_pc_f3c4
  %v3_f3c8 = add i32 %v0_edb4, 28
  %v2_f3cc = add i32 %v3_f3c8, %v3_f390
  store i32 %v2_f3cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3f4

dec_label_pc_f3d8:                                ; preds = %bb445
  %v2_f3d8 = icmp ugt i8 %v3_f3fc, 35
  store i1 %v2_f3d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d8 = icmp eq i8 %v3_f3fc, 36
  store i1 %v7_f3d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3d8, label %dec_label_pc_f40c, label %dec_label_pc_f3e0

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f3d8
  %v2_f3e0 = icmp ugt i8 %v3_f3fc, 34
  store i1 %v2_f3e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e0 = icmp eq i8 %v3_f3fc, 35
  store i1 %v7_f3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e0, label %dec_label_pc_f40c, label %dec_label_pc_f3e8

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3e0
  %v2_f3e8 = icmp ugt i8 %v3_f3fc, 36
  store i1 %v2_f3e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e8 = icmp eq i8 %v3_f3fc, 37
  store i1 %v7_f3e8, i1* %cpsr_z.global-to-local, align 1
  %v1_f3ec = add i32 %v0_f3ec, -1
  store i32 %v1_f3ec, i32* %r3.global-to-local, align 4
  br i1 %v7_f3e8, label %dec_label_pc_f40c, label %dec_label_pc_f3f4

dec_label_pc_f3f4:                                ; preds = %dec_label_pc_f3f4.preheader, %dec_label_pc_f3e8
  %v0_f3ec = phi i32 [ %v2_f3cc, %dec_label_pc_f3f4.preheader ], [ %v1_f3ec, %dec_label_pc_f3e8 ]
  %v0_f3f4 = phi i32 [ %v1_f394, %dec_label_pc_f3f4.preheader ], [ %v1_f3f4, %dec_label_pc_f3e8 ]
  %v1_f3f4 = add i32 %v0_f3f4, -1
  store i32 %v1_f3f4, i32* %r1.global-to-local, align 4
  %v2_f3f4 = icmp ne i32 %v0_f3f4, 0
  store i1 %v2_f3f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3f4 = icmp eq i32 %v0_f3f4, 1
  store i1 %v7_f3f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3f4, label %dec_label_pc_ed38.backedge.thread561, label %dec_label_pc_f3fc

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f3f4
  %v1_f3fc = add i32 %v0_f3ec, -2
  %v2_f3fc = inttoptr i32 %v1_f3fc to i8*
  %v3_f3fc = load i8, i8* %v2_f3fc, align 1
  %v4_f3fc = zext i8 %v3_f3fc to i32
  store i32 %v4_f3fc, i32* %r2.global-to-local, align 4
  %v2_f400 = icmp ugt i8 %v3_f3fc, 61
  store i1 %v2_f400, i1* %cpsr_c.global-to-local, align 1
  %v7_f400 = icmp eq i8 %v3_f3fc, 62
  store i1 %v7_f400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f400, label %dec_label_pc_f40c, label %bb445

bb445:                                            ; preds = %dec_label_pc_f3fc
  %v3_f404 = icmp ugt i8 %v3_f3fc, 57
  store i1 %v3_f404, i1* %cpsr_c.global-to-local, align 1
  %v8_f404 = icmp eq i8 %v3_f3fc, 58
  store i1 %v8_f404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f404, label %dec_label_pc_f40c, label %dec_label_pc_f3d8

dec_label_pc_f40c:                                ; preds = %dec_label_pc_f3fc, %bb445, %dec_label_pc_f3e8, %dec_label_pc_f3e0, %dec_label_pc_f3d8, %dec_label_pc_f3c4, %dec_label_pc_f3a0, %dec_label_pc_f3bc, %dec_label_pc_f3b4, %bb444
  %v0_f410 = phi i32 [ %v1_f394, %dec_label_pc_f3c4 ], [ %v1_f394, %dec_label_pc_f3a0 ], [ %v1_f394, %dec_label_pc_f3bc ], [ %v1_f394, %dec_label_pc_f3b4 ], [ %v1_f394, %bb444 ], [ %v1_f3f4, %dec_label_pc_f3d8 ], [ %v1_f3f4, %dec_label_pc_f3e0 ], [ %v1_f3f4, %dec_label_pc_f3e8 ], [ %v1_f3f4, %bb445 ], [ %v1_f3f4, %dec_label_pc_f3fc ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f410 = add i32 %v0_f410, 1
  store i32 %v1_f410, i32* @r7, align 4
  %v1_f414 = call i32 @function_fb64(i32 4)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f424 = call i32 @function_faa0(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_f424, i32* %r0.global-to-local, align 4
  %v3_f428 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f428, i32* %r2.global-to-local, align 4
  store i32 %v3_f424, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f434 = load i32, i32* @r6, align 4
  %v1_f434 = add i32 %v0_f434, 4
  %v2_f434 = inttoptr i32 %v1_f434 to i32*
  %v3_f434 = load i32, i32* %v2_f434, align 4
  store i32 %v3_f434, i32* %r0.global-to-local, align 4
  %v4_f438 = call i32 @function_11280(i32 %v3_f434, i32 %v3_f424, i32 %v3_f428, i32 16384)
  store i32 %v4_f438, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f448 = load i32, i32* @r6, align 4
  %v1_f448 = add i32 %v0_f448, 4
  %v2_f448 = inttoptr i32 %v1_f448 to i32*
  %v3_f448 = load i32, i32* %v2_f448, align 4
  store i32 %v3_f448, i32* %r0.global-to-local, align 4
  %v4_f44c = call i32 @function_11280(i32 %v3_f448, i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f454 = call i32 @function_fac4(i32 4)
  store i32 %v1_f454, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f45c = load i32, i32* @r6, align 4
  %v2_f45c = add i32 %v1_f45c, 12
  %v3_f45c = inttoptr i32 %v2_f45c to i32*
  store i32 8, i32* %v3_f45c, align 4
  br label %dec_label_pc_eed0

dec_label_pc_f464:                                ; preds = %dec_label_pc_edb4
  %v1_f464 = add i32 %v0_edb4, 24
  %v2_f464 = inttoptr i32 %v1_f464 to i32*
  %v3_f464 = load i32, i32* %v2_f464, align 4
  store i32 %v3_f464, i32* %r2.global-to-local, align 4
  %v1_f468 = add i32 %v3_f464, -1
  store i32 %v1_f468, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f46c = icmp eq i32 %v1_f468, 0
  store i1 %v2_f46c, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f468, 1
  br i1 %tmp446, label %dec_label_pc_f4d0, label %dec_label_pc_f474

dec_label_pc_f474:                                ; preds = %dec_label_pc_f464
  %v2_f474 = add i32 %v1_f468, %v0_edb4
  store i32 %v2_f474, i32* %r3.global-to-local, align 4
  %v1_f478 = add i32 %v2_f474, 28
  %v2_f478 = inttoptr i32 %v1_f478 to i8*
  %v3_f478 = load i8, i8* %v2_f478, align 1
  %v4_f478 = zext i8 %v3_f478 to i32
  store i32 %v4_f478, i32* %r3.global-to-local, align 4
  %v2_f47c = icmp ugt i8 %v3_f478, 61
  store i1 %v2_f47c, i1* %cpsr_c.global-to-local, align 1
  %v7_f47c = icmp eq i8 %v3_f478, 62
  store i1 %v7_f47c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f47c, label %dec_label_pc_f738, label %bb447

bb447:                                            ; preds = %dec_label_pc_f474
  %v3_f480 = icmp ugt i8 %v3_f478, 57
  store i1 %v3_f480, i1* %cpsr_c.global-to-local, align 1
  %v8_f480 = icmp eq i8 %v3_f478, 58
  store i1 %v8_f480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f480, label %dec_label_pc_f738, label %dec_label_pc_f488

dec_label_pc_f488:                                ; preds = %bb447
  %v2_f488 = icmp ugt i8 %v3_f478, 35
  store i1 %v2_f488, i1* %cpsr_c.global-to-local, align 1
  %v7_f488 = icmp eq i8 %v3_f478, 36
  store i1 %v7_f488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f488, label %dec_label_pc_f738, label %dec_label_pc_f490

dec_label_pc_f490:                                ; preds = %dec_label_pc_f488
  %v2_f490 = icmp ugt i8 %v3_f478, 34
  store i1 %v2_f490, i1* %cpsr_c.global-to-local, align 1
  %v7_f490 = icmp eq i8 %v3_f478, 35
  store i1 %v7_f490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f490, label %dec_label_pc_f738, label %dec_label_pc_f4c8.preheader

dec_label_pc_f4c8.preheader:                      ; preds = %dec_label_pc_f490
  %v3_f494 = add i32 %v0_edb4, 28
  %v2_f498 = add i32 %v3_f494, %v3_f464
  store i32 %v2_f498, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f4c8

dec_label_pc_f4a4:                                ; preds = %dec_label_pc_f4c8
  %v1_f4a4 = add i32 %v0_f4c0, -2
  %v2_f4a4 = inttoptr i32 %v1_f4a4 to i8*
  %v3_f4a4 = load i8, i8* %v2_f4a4, align 1
  %v4_f4a4 = zext i8 %v3_f4a4 to i32
  store i32 %v4_f4a4, i32* %r2.global-to-local, align 4
  %v2_f4a8 = icmp ugt i8 %v3_f4a4, 61
  store i1 %v2_f4a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4a8 = icmp eq i8 %v3_f4a4, 62
  store i1 %v7_f4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4a8, label %dec_label_pc_f738, label %bb448

bb448:                                            ; preds = %dec_label_pc_f4a4
  %v3_f4ac = icmp ugt i8 %v3_f4a4, 57
  store i1 %v3_f4ac, i1* %cpsr_c.global-to-local, align 1
  %v8_f4ac = icmp eq i8 %v3_f4a4, 58
  store i1 %v8_f4ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4ac, label %dec_label_pc_f738, label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %bb448
  %v2_f4b4 = icmp ugt i8 %v3_f4a4, 35
  store i1 %v2_f4b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4b4 = icmp eq i8 %v3_f4a4, 36
  store i1 %v7_f4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4b4, label %dec_label_pc_f738, label %dec_label_pc_f4bc

dec_label_pc_f4bc:                                ; preds = %dec_label_pc_f4b4
  %v2_f4bc = icmp ugt i8 %v3_f4a4, 34
  store i1 %v2_f4bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4bc = icmp eq i8 %v3_f4a4, 35
  store i1 %v7_f4bc, i1* %cpsr_z.global-to-local, align 1
  %v1_f4c0 = add i32 %v0_f4c0, -1
  store i32 %v1_f4c0, i32* %r3.global-to-local, align 4
  br i1 %v7_f4bc, label %dec_label_pc_f738, label %dec_label_pc_f4c8

dec_label_pc_f4c8:                                ; preds = %dec_label_pc_f4c8.preheader, %dec_label_pc_f4bc
  %v0_f4c0 = phi i32 [ %v2_f498, %dec_label_pc_f4c8.preheader ], [ %v1_f4c0, %dec_label_pc_f4bc ]
  %v0_f4c8 = phi i32 [ %v1_f468, %dec_label_pc_f4c8.preheader ], [ %v1_f4c8, %dec_label_pc_f4bc ]
  %v1_f4c8 = add i32 %v0_f4c8, -1
  store i32 %v1_f4c8, i32* %r1.global-to-local, align 4
  %v2_f4c8 = icmp ne i32 %v0_f4c8, 0
  store i1 %v2_f4c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4c8 = icmp eq i32 %v0_f4c8, 1
  store i1 %v7_f4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4c8, label %dec_label_pc_f4d0, label %dec_label_pc_f4a4

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f4c8, %dec_label_pc_f464
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f4d4 = call i32 @function_fb64(i32 25)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_f4e4 = call i32 @function_faa0(i32 25, i32* nonnull %stack_var_-60)
  %v3_f4e8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f4e4, i32* %r2.global-to-local, align 4
  %v1_f4f0 = add i32 %v3_f4e8, -1
  store i32 %v1_f4f0, i32* %r3.global-to-local, align 4
  %v0_f4f4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f4f4, i32* %r0.global-to-local, align 4
  %v0_f4f8 = load i32, i32* @r6, align 4
  %v1_f4f8 = add i32 %v0_f4f8, 24
  %v2_f4f8 = inttoptr i32 %v1_f4f8 to i32*
  %v3_f4f8 = load i32, i32* %v2_f4f8, align 4
  store i32 %v3_f4f8, i32* %r1.global-to-local, align 4
  %v4_f4fc = call i32 @function_1015c(i32 %v0_f4f4, i32 %v3_f4f8, i32 %v3_f4e4, i32 %v1_f4f0)
  store i32 %v4_f4fc, i32* %r0.global-to-local, align 4
  %v1_f500 = add i32 %v4_f4fc, 1
  store i32 %v1_f500, i32* @r7, align 4
  %v2_f500 = icmp eq i32 %v4_f4fc, -1
  store i1 %v2_f500, i1* %cpsr_c.global-to-local, align 1
  %v7_f500 = icmp eq i32 %v1_f500, 0
  store i1 %v7_f500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f500, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f4d0
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f4d0, %bb449
  %v0_f508 = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f4d0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f508, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f954 = call i32 @function_fac4(i32 25)
  br i1 %v0_f508, label %dec_label_pc_f950, label %dec_label_pc_f518

dec_label_pc_f518:                                ; preds = %thread-pre-split124, %dec_label_pc_f738
  %storemerge = phi i32 [ %v1_f740, %dec_label_pc_f738 ], [ %v1_f954, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f518 = load i32, i32* @r6, align 4
  %v1_f518 = inttoptr i32 %v0_f518 to i32*
  %v2_f518 = load i32, i32* %v1_f518, align 4
  store i32 %v2_f518, i32* %r3.global-to-local, align 4
  %v1_f51c = add i32 %v0_f518, 4
  %v2_f51c = inttoptr i32 %v1_f51c to i32*
  %v3_f51c = load i32, i32* %v2_f51c, align 4
  store i32 %v3_f51c, i32* %r0.global-to-local, align 4
  %v1_f520 = add i32 %v2_f518, 13
  %v2_f520 = inttoptr i32 %v1_f520 to i8*
  %v3_f520 = load i8, i8* %v2_f520, align 1
  %v4_f520 = zext i8 %v3_f520 to i32
  store i32 %v4_f520, i32* %r2.global-to-local, align 4
  %v1_f524 = add i32 %v2_f518, 4
  %v2_f524 = inttoptr i32 %v1_f524 to i32*
  %v3_f524 = load i32, i32* %v2_f524, align 4
  store i32 %v3_f524, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f52c = call i32 @function_11280(i32 %v3_f51c, i32 %v3_f524, i32 %v4_f520, i32 16384)
  store i32 %v4_f52c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f534 = load i32, i32* @r6, align 4
  %v1_f534 = add i32 %v0_f534, 4
  %v2_f534 = inttoptr i32 %v1_f534 to i32*
  %v3_f534 = load i32, i32* %v2_f534, align 4
  store i32 %v3_f534, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f540 = call i32 @function_11280(i32 %v3_f534, i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32 2, i32 16384)
  store i32 %v4_f540, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f548 = load i32, i32* @r6, align 4
  %v2_f548 = add i32 %v1_f548, 12
  %v3_f548 = inttoptr i32 %v2_f548 to i32*
  store i32 5, i32* %v3_f548, align 4
  br label %dec_label_pc_f54c

dec_label_pc_f54c:                                ; preds = %dec_label_pc_f160, %bb436, %dec_label_pc_f65c, %dec_label_pc_f794, %dec_label_pc_f700, %dec_label_pc_f7d8, %dec_label_pc_f518
  %v0_f54c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f54c = icmp eq i32 %v0_f54c, 0
  store i1 %v2_f54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f54c, label %dec_label_pc_ed34.loopexit, label %dec_label_pc_eed0

dec_label_pc_f558:                                ; preds = %dec_label_pc_edb4
  %v1_f558 = add i32 %v0_edb4, 24
  %v2_f558 = inttoptr i32 %v1_f558 to i32*
  %v3_f558 = load i32, i32* %v2_f558, align 4
  store i32 %v3_f558, i32* %r2.global-to-local, align 4
  %v1_f55c = add i32 %v3_f558, -1
  store i32 %v1_f55c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f560 = icmp eq i32 %v1_f55c, 0
  store i1 %v2_f560, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f55c, 1
  br i1 %tmp450, label %dec_label_pc_f5d4, label %dec_label_pc_f568

dec_label_pc_f568:                                ; preds = %dec_label_pc_f558
  %v2_f568 = add i32 %v1_f55c, %v0_edb4
  store i32 %v2_f568, i32* %r3.global-to-local, align 4
  %v1_f56c = add i32 %v2_f568, 28
  %v2_f56c = inttoptr i32 %v1_f56c to i8*
  %v3_f56c = load i8, i8* %v2_f56c, align 1
  %v4_f56c = zext i8 %v3_f56c to i32
  store i32 %v4_f56c, i32* %r3.global-to-local, align 4
  %v2_f570 = icmp ugt i8 %v3_f56c, 61
  store i1 %v2_f570, i1* %cpsr_c.global-to-local, align 1
  %v7_f570 = icmp eq i8 %v3_f56c, 62
  store i1 %v7_f570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f570, label %dec_label_pc_f6ec, label %bb451

bb451:                                            ; preds = %dec_label_pc_f568
  %v3_f574 = icmp ugt i8 %v3_f56c, 57
  store i1 %v3_f574, i1* %cpsr_c.global-to-local, align 1
  %v8_f574 = icmp eq i8 %v3_f56c, 58
  store i1 %v8_f574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f574, label %dec_label_pc_f6ec, label %dec_label_pc_f57c

dec_label_pc_f57c:                                ; preds = %bb451
  %v2_f57c = icmp ugt i8 %v3_f56c, 35
  store i1 %v2_f57c, i1* %cpsr_c.global-to-local, align 1
  %v7_f57c = icmp eq i8 %v3_f56c, 36
  store i1 %v7_f57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f57c, label %dec_label_pc_f6ec, label %dec_label_pc_f584

dec_label_pc_f584:                                ; preds = %dec_label_pc_f57c
  %v2_f584 = icmp ugt i8 %v3_f56c, 34
  store i1 %v2_f584, i1* %cpsr_c.global-to-local, align 1
  %v7_f584 = icmp eq i8 %v3_f56c, 35
  store i1 %v7_f584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f584, label %dec_label_pc_f6ec, label %dec_label_pc_f58c

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f584
  %v2_f58c = icmp ugt i8 %v3_f56c, 36
  store i1 %v2_f58c, i1* %cpsr_c.global-to-local, align 1
  %v7_f58c = icmp eq i8 %v3_f56c, 37
  store i1 %v7_f58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f58c, label %dec_label_pc_f6ec, label %dec_label_pc_f5cc.preheader

dec_label_pc_f5cc.preheader:                      ; preds = %dec_label_pc_f58c
  %v3_f590 = add i32 %v0_edb4, 28
  %v2_f594 = add i32 %v3_f590, %v3_f558
  store i32 %v2_f594, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f5cc

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f5cc
  %v1_f5a0 = add i32 %v0_f5c4, -2
  %v2_f5a0 = inttoptr i32 %v1_f5a0 to i8*
  %v3_f5a0 = load i8, i8* %v2_f5a0, align 1
  %v4_f5a0 = zext i8 %v3_f5a0 to i32
  store i32 %v4_f5a0, i32* %r2.global-to-local, align 4
  %v2_f5a4 = icmp ugt i8 %v3_f5a0, 61
  store i1 %v2_f5a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a4 = icmp eq i8 %v3_f5a0, 62
  store i1 %v7_f5a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5a4, label %dec_label_pc_f6ec, label %bb452

bb452:                                            ; preds = %dec_label_pc_f5a0
  %v3_f5a8 = icmp ugt i8 %v3_f5a0, 57
  store i1 %v3_f5a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f5a8 = icmp eq i8 %v3_f5a0, 58
  store i1 %v8_f5a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5a8, label %dec_label_pc_f6ec, label %dec_label_pc_f5b0

dec_label_pc_f5b0:                                ; preds = %bb452
  %v2_f5b0 = icmp ugt i8 %v3_f5a0, 35
  store i1 %v2_f5b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b0 = icmp eq i8 %v3_f5a0, 36
  store i1 %v7_f5b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b0, label %dec_label_pc_f6ec, label %dec_label_pc_f5b8

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f5b0
  %v2_f5b8 = icmp ugt i8 %v3_f5a0, 34
  store i1 %v2_f5b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b8 = icmp eq i8 %v3_f5a0, 35
  store i1 %v7_f5b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b8, label %dec_label_pc_f6ec, label %dec_label_pc_f5c0

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f5b8
  %v2_f5c0 = icmp ugt i8 %v3_f5a0, 36
  store i1 %v2_f5c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c0 = icmp eq i8 %v3_f5a0, 37
  store i1 %v7_f5c0, i1* %cpsr_z.global-to-local, align 1
  %v1_f5c4 = add i32 %v0_f5c4, -1
  store i32 %v1_f5c4, i32* %r3.global-to-local, align 4
  br i1 %v7_f5c0, label %dec_label_pc_f6ec, label %dec_label_pc_f5cc

dec_label_pc_f5cc:                                ; preds = %dec_label_pc_f5cc.preheader, %dec_label_pc_f5c0
  %v0_f5c4 = phi i32 [ %v2_f594, %dec_label_pc_f5cc.preheader ], [ %v1_f5c4, %dec_label_pc_f5c0 ]
  %v0_f5cc = phi i32 [ %v1_f55c, %dec_label_pc_f5cc.preheader ], [ %v1_f5cc, %dec_label_pc_f5c0 ]
  %v1_f5cc = add i32 %v0_f5cc, -1
  store i32 %v1_f5cc, i32* %r1.global-to-local, align 4
  %v2_f5cc = icmp ne i32 %v0_f5cc, 0
  store i1 %v2_f5cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5cc = icmp eq i32 %v0_f5cc, 1
  store i1 %v7_f5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5cc, label %dec_label_pc_f5d4, label %dec_label_pc_f5a0

dec_label_pc_f5d4:                                ; preds = %dec_label_pc_f5cc, %dec_label_pc_f558
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f5d8 = call i32 @function_fb64(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f5e0 = call i32 @function_fb64(i32 27)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f5f0 = call i32 @function_faa0(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_f5f0, i32* @r4, align 4
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f604 = call i32 @function_faa0(i32 27, i32* nonnull %stack_var_-60)
  %v3_f608 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f604, 16777216
  %v1_f60c = sdiv i32 %sext, 16777216
  store i32 %v1_f60c, i32* @r5, align 4
  %v0_f610 = load i32, i32* @r4, align 4
  store i32 %v0_f610, i32* %r2.global-to-local, align 4
  %v1_f614 = add i32 %v3_f608, -1
  store i32 %v1_f614, i32* %r3.global-to-local, align 4
  %v0_f618 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f618, i32* %r0.global-to-local, align 4
  %v0_f61c = load i32, i32* @r6, align 4
  %v1_f61c = add i32 %v0_f61c, 24
  %v2_f61c = inttoptr i32 %v1_f61c to i32*
  %v3_f61c = load i32, i32* %v2_f61c, align 4
  store i32 %v3_f61c, i32* %r1.global-to-local, align 4
  %v4_f620 = call i32 @function_1015c(i32 %v0_f618, i32 %v3_f61c, i32 %v0_f610, i32 %v1_f614)
  store i32 %v4_f620, i32* %r0.global-to-local, align 4
  %v2_f624 = icmp eq i32 %v4_f620, -1
  store i1 %v2_f624, i1* %cpsr_c.global-to-local, align 1
  %v7_f624 = icmp eq i32 %v4_f620, -1
  store i1 %v7_f624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f624, label %dec_label_pc_f634, label %dec_label_pc_f65c

dec_label_pc_f634:                                ; preds = %dec_label_pc_f5d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f634 = load i32, i32* %stack_var_-60, align 4
  %v0_f638 = load i32, i32* @r5, align 4
  store i32 %v0_f638, i32* %r2.global-to-local, align 4
  %v1_f63c = add i32 %v3_f634, -1
  store i32 %v1_f63c, i32* %r3.global-to-local, align 4
  %v0_f640 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f640, i32* %r0.global-to-local, align 4
  %v0_f644 = load i32, i32* @r6, align 4
  %v1_f644 = add i32 %v0_f644, 24
  %v2_f644 = inttoptr i32 %v1_f644 to i32*
  %v3_f644 = load i32, i32* %v2_f644, align 4
  store i32 %v3_f644, i32* %r1.global-to-local, align 4
  %v4_f648 = call i32 @function_1015c(i32 %v0_f640, i32 %v3_f644, i32 %v0_f638, i32 %v1_f63c)
  store i32 %v4_f648, i32* %r0.global-to-local, align 4
  %v1_f64c = add i32 %v4_f648, 1
  store i32 %v1_f64c, i32* @r7, align 4
  %v2_f64c = icmp eq i32 %v4_f648, -1
  store i1 %v2_f64c, i1* %cpsr_c.global-to-local, align 1
  %v7_f64c = icmp eq i32 %v1_f64c, 0
  store i1 %v7_f64c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f64c, label %dec_label_pc_f910, label %dec_label_pc_f65c

dec_label_pc_f65c:                                ; preds = %dec_label_pc_f634, %dec_label_pc_f5d4
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f660 = call i32 @function_fac4(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f668 = call i32 @function_fac4(i32 27)
  store i32 %v1_f668, i32* %r0.global-to-local, align 4
  %v0_f66c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f66c = icmp eq i32 %v0_f66c, 0
  store i1 %v2_f66c, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f66c, 1
  br i1 %tmp453, label %dec_label_pc_f54c, label %dec_label_pc_f700

dec_label_pc_f678:                                ; preds = %dec_label_pc_f0e4
  store i32 ptrtoint (i32* @global_var_15f7c.187 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f67c, i32* @r0, align 4
  %v0_f694 = call i32 @function_11090()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f690, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_15f73.189 to i32), i32* @r1, align 4
  %v0_f6a4 = call i32 @function_11090()
  store i32 %v0_f6a4, i32* %r0.global-to-local, align 4
  %v0_f6a8 = load i32, i32* @r6, align 4
  %v1_f6a8 = add i32 %v0_f6a8, 24
  %v2_f6a8 = inttoptr i32 %v1_f6a8 to i32*
  %v3_f6a8 = load i32, i32* %v2_f6a8, align 4
  %v0_f6ac = load i32, i32* @r4, align 4
  %v1_f6ac = add i32 %v0_f6ac, 2
  store i32 %v1_f6ac, i32* %r2.global-to-local, align 4
  %v0_f6b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f6b0 = add i32 %v0_f6b0, %v3_f6a8
  store i32 %v2_f6b0, i32* @r3, align 4
  %v3_f6b4 = icmp uge i32 %v2_f6b0, %v1_f6ac
  store i1 %v3_f6b4, i1* %cpsr_c.global-to-local, align 1
  %v9_f6b4 = icmp eq i32 %v2_f6b0, %v1_f6ac
  store i1 %v9_f6b4, i1* %cpsr_z.global-to-local, align 1
  %v2_f6b8 = xor i1 %v3_f6b4, true
  %v3_f6b8 = or i1 %v9_f6b4, %v2_f6b8
  br i1 %v3_f6b8, label %dec_label_pc_f678.dec_label_pc_f160.loopexit_crit_edge, label %dec_label_pc_f6bc

dec_label_pc_f678.dec_label_pc_f160.loopexit_crit_edge: ; preds = %dec_label_pc_f678
  %v0_f160.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f160

dec_label_pc_f6bc:                                ; preds = %dec_label_pc_f678
  %v2_f6bc = inttoptr i32 %v1_f6ac to i8*
  %v3_f6bc = load i8, i8* %v2_f6bc, align 1
  %v4_f6bc = zext i8 %v3_f6bc to i32
  store i32 %v4_f6bc, i32* %r3.global-to-local, align 4
  %v2_f6c0 = icmp ugt i8 %v3_f6bc, 30
  store i1 %v2_f6c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c0 = icmp eq i8 %v3_f6bc, 31
  store i1 %v7_f6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c0, label %dec_label_pc_f7f0, label %dec_label_pc_f6c8

dec_label_pc_f6c8:                                ; preds = %dec_label_pc_f6bc
  %v1_f6c8 = inttoptr i32 %v0_f6ac to i8*
  %v2_f6c8 = load i8, i8* %v1_f6c8, align 1
  %v3_f6c8 = zext i8 %v2_f6c8 to i32
  store i32 %v3_f6c8, i32* %r3.global-to-local, align 4
  %v2_f6cc = icmp ugt i8 %v2_f6c8, -4
  store i1 %v2_f6cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6cc = icmp eq i8 %v2_f6c8, -3
  store i1 %v7_f6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6cc, label %.thread138, label %dec_label_pc_f6dc

.thread138:                                       ; preds = %dec_label_pc_f6c8
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f6c8, align 1
  %v0_f6d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f6d8.pr.pr, label %dec_label_pc_f0f8, label %.thread138.dec_label_pc_f6dcthread-pre-split_crit_edge

.thread138.dec_label_pc_f6dcthread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f6dc.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f6dc

dec_label_pc_f6dc:                                ; preds = %dec_label_pc_f6c8, %.thread138.dec_label_pc_f6dcthread-pre-split_crit_edge
  %v0_f6dc.pr = phi i32 [ %v0_f6dc.pr.pre, %.thread138.dec_label_pc_f6dcthread-pre-split_crit_edge ], [ %v3_f6c8, %dec_label_pc_f6c8 ]
  %v2_f6dc = icmp ugt i32 %v0_f6dc.pr, 250
  store i1 %v2_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6dc = icmp eq i32 %v0_f6dc.pr, 251
  store i1 %v7_f6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6dc, label %bb454, label %dec_label_pc_f0f8

bb454:                                            ; preds = %dec_label_pc_f6dc
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f6e4 = load i32, i32* @r4, align 4
  %v4_f6e4 = inttoptr i32 %v3_f6e4 to i8*
  store i8 -3, i8* %v4_f6e4, align 1
  br label %dec_label_pc_f0f8

dec_label_pc_f6ec:                                ; preds = %dec_label_pc_f5a0, %dec_label_pc_f5c0, %dec_label_pc_f5b8, %dec_label_pc_f5b0, %bb452, %dec_label_pc_f58c, %dec_label_pc_f568, %dec_label_pc_f584, %dec_label_pc_f57c, %bb451
  %v0_f6f0 = phi i32 [ %v1_f55c, %dec_label_pc_f58c ], [ %v1_f55c, %dec_label_pc_f568 ], [ %v1_f55c, %dec_label_pc_f584 ], [ %v1_f55c, %dec_label_pc_f57c ], [ %v1_f55c, %bb451 ], [ %v1_f5cc, %bb452 ], [ %v1_f5cc, %dec_label_pc_f5b0 ], [ %v1_f5cc, %dec_label_pc_f5b8 ], [ %v1_f5cc, %dec_label_pc_f5c0 ], [ %v1_f5cc, %dec_label_pc_f5a0 ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f6f0 = add i32 %v0_f6f0, 1
  store i32 %v1_f6f0, i32* @r7, align 4
  %v1_f6f4 = call i32 @function_fac4(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f6fc = call i32 @function_fac4(i32 27)
  store i32 %v1_f6fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f700

dec_label_pc_f700:                                ; preds = %dec_label_pc_f65c, %dec_label_pc_f6ec
  %v0_f700 = load i32, i32* @r6, align 4
  %v1_f700 = inttoptr i32 %v0_f700 to i32*
  %v2_f700 = load i32, i32* %v1_f700, align 4
  store i32 %v2_f700, i32* %r3.global-to-local, align 4
  %v1_f704 = add i32 %v0_f700, 4
  %v2_f704 = inttoptr i32 %v1_f704 to i32*
  %v3_f704 = load i32, i32* %v2_f704, align 4
  store i32 %v3_f704, i32* %r0.global-to-local, align 4
  %v1_f708 = add i32 %v2_f700, 12
  %v2_f708 = inttoptr i32 %v1_f708 to i8*
  %v3_f708 = load i8, i8* %v2_f708, align 1
  %v4_f708 = zext i8 %v3_f708 to i32
  store i32 %v4_f708, i32* %r2.global-to-local, align 4
  %v1_f70c = inttoptr i32 %v2_f700 to i32*
  %v2_f70c = load i32, i32* %v1_f70c, align 4
  store i32 %v2_f70c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f714 = call i32 @function_11280(i32 %v3_f704, i32 %v2_f70c, i32 %v4_f708, i32 16384)
  store i32 %v4_f714, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f71c = load i32, i32* @r6, align 4
  %v1_f71c = add i32 %v0_f71c, 4
  %v2_f71c = inttoptr i32 %v1_f71c to i32*
  %v3_f71c = load i32, i32* %v2_f71c, align 4
  store i32 %v3_f71c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f728 = call i32 @function_11280(i32 %v3_f71c, i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), i32 2, i32 16384)
  store i32 %v4_f728, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f730 = load i32, i32* @r6, align 4
  %v2_f730 = add i32 %v1_f730, 12
  %v3_f730 = inttoptr i32 %v2_f730 to i32*
  store i32 4, i32* %v3_f730, align 4
  br label %dec_label_pc_f54c

dec_label_pc_f738:                                ; preds = %dec_label_pc_f4a4, %dec_label_pc_f4bc, %dec_label_pc_f4b4, %bb448, %dec_label_pc_f490, %dec_label_pc_f474, %dec_label_pc_f488, %bb447
  %v0_f73c = phi i32 [ %v1_f468, %dec_label_pc_f490 ], [ %v1_f468, %dec_label_pc_f474 ], [ %v1_f468, %dec_label_pc_f488 ], [ %v1_f468, %bb447 ], [ %v1_f4c8, %bb448 ], [ %v1_f4c8, %dec_label_pc_f4b4 ], [ %v1_f4c8, %dec_label_pc_f4bc ], [ %v1_f4c8, %dec_label_pc_f4a4 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f73c = add i32 %v0_f73c, 1
  store i32 %v1_f73c, i32* @r7, align 4
  %v1_f740 = call i32 @function_fac4(i32 25)
  br label %dec_label_pc_f518

dec_label_pc_f748:                                ; preds = %dec_label_pc_ee54
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f754 = call i32 @function_fb64(i32 9)
  store i32 %v2_f5e8, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f764 = call i32 @function_faa0(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f764, i32* %r0.global-to-local, align 4
  %v3_f768 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f764, i32* %r2.global-to-local, align 4
  %v1_f770 = add i32 %v3_f768, -1
  store i32 %v1_f770, i32* %r3.global-to-local, align 4
  %v0_f774 = load i32, i32* @r6, align 4
  %v1_f774 = add i32 %v0_f774, 24
  %v2_f774 = inttoptr i32 %v1_f774 to i32*
  %v3_f774 = load i32, i32* %v2_f774, align 4
  store i32 %v3_f774, i32* %r1.global-to-local, align 4
  %v0_f778 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f778, i32* %r0.global-to-local, align 4
  %v4_f77c = call i32 @function_1015c(i32 %v0_f778, i32 %v3_f774, i32 %v3_f764, i32 %v1_f770)
  store i32 %v4_f77c, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f788 = call i32 @function_fac4(i32 9)
  store i32 %v1_f788, i32* @r0, align 4
  %v0_f78c = load i32, i32* @r7, align 4
  %v2_f78c = icmp eq i32 %v0_f78c, -1
  store i1 %v2_f78c, i1* %cpsr_c.global-to-local, align 1
  %v7_f78c = icmp eq i32 %v0_f78c, -1
  store i1 %v7_f78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f78c, label %dec_label_pc_ed34.loopexit, label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %dec_label_pc_f748
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f794 = icmp eq i32 %v0_f78c, 0
  store i1 %v2_f794, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f78c, 1
  br i1 %tmp455, label %dec_label_pc_f54c, label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f794
  %v0_f79c = load i32, i32* @r6, align 4
  %v1_f79c = add i32 %v0_f79c, 20
  %v2_f79c = inttoptr i32 %v1_f79c to i16*
  %v3_f79c = load i16, i16* %v2_f79c, align 2
  %v4_f79c = zext i16 %v3_f79c to i32
  store i32 %v4_f79c, i32* %r3.global-to-local, align 4
  %v1_f7a0 = add i32 %v0_f79c, 16
  %v2_f7a0 = inttoptr i32 %v1_f7a0 to i32*
  %v3_f7a0 = load i32, i32* %v2_f7a0, align 4
  store i32 %v3_f7a0, i32* %r2.global-to-local, align 4
  store i32 %v2_f7a4, i32* @ip, align 4
  store i32 %v4_f79c, i32* %stack_var_-42, align 4
  store i32 %v3_f7a0, i32* %stack_var_-60, align 4
  %v1_f7b0 = inttoptr i32 %v0_f79c to i32*
  %v2_f7b0 = load i32, i32* %v1_f7b0, align 4
  store i32 %v2_f7b0, i32* @r8, align 4
  %v0_f7b4 = call i32 @function_10854()
  store i32 %v0_f7b4, i32* %r0.global-to-local, align 4
  %v7_f7b8 = icmp eq i32 %v0_f7b4, -1
  %.465 = zext i1 %v7_f7b8 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7c4 = icmp eq i32 %v0_f7b4, 0
  store i1 %v2_f7c4, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f7b4, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f79c
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f7d8

bb459:                                            ; preds = %dec_label_pc_f79c
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7d0 = icmp eq i1 %v7_f7b8, false
  store i1 %v2_f7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7d0, label %dec_label_pc_f960, label %dec_label_pc_f7d8

dec_label_pc_f7d8:                                ; preds = %.thread144, %bb459
  %v0_f7d8 = load i32, i32* @r6, align 4
  %v1_f7d8 = add i32 %v0_f7d8, 4
  %v2_f7d8 = inttoptr i32 %v1_f7d8 to i32*
  %v3_f7d8 = load i32, i32* %v2_f7d8, align 4
  store i32 %v3_f7d8, i32* %r0.global-to-local, align 4
  %v1_f7dc = call i32 @function_10b64(i32 %v3_f7d8)
  store i32 %v1_f7dc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_f7e4 = load i32, i32* @r4, align 4
  %v1_f7e4 = load i32, i32* @r6, align 4
  %v2_f7e4 = add i32 %v1_f7e4, 4
  %v3_f7e4 = inttoptr i32 %v2_f7e4 to i32*
  store i32 %v0_f7e4, i32* %v3_f7e4, align 4
  %v0_f7e8 = load i32, i32* @r3, align 4
  %v1_f7e8 = load i32, i32* @r6, align 4
  %v2_f7e8 = add i32 %v1_f7e8, 12
  %v3_f7e8 = inttoptr i32 %v2_f7e8 to i32*
  store i32 %v0_f7e8, i32* %v3_f7e8, align 4
  br label %dec_label_pc_f54c

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f6bc
  store i32 %v2_f67c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f7fc = add i32 %v0_f6a8, 4
  %v2_f7fc = inttoptr i32 %v1_f7fc to i32*
  %v3_f7fc = load i32, i32* %v2_f7fc, align 4
  store i32 %v3_f7fc, i32* %r0.global-to-local, align 4
  %v4_f800 = call i32 @function_11280(i32 %v3_f7fc, i32 %v2_f67c, i32 3, i32 16384)
  store i32 %v4_f800, i32* %r0.global-to-local, align 4
  %v0_f804 = load i32, i32* @r6, align 4
  %v1_f804 = add i32 %v0_f804, 4
  %v2_f804 = inttoptr i32 %v1_f804 to i32*
  %v3_f804 = load i32, i32* %v2_f804, align 4
  store i32 %v3_f804, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f144

dec_label_pc_f814:                                ; preds = %dec_label_pc_ed40
  store i32 %.pre282, i32* @r0, align 4
  %v1_f81c = add i32 %v0_f814, 92
  store i32 %v1_f81c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f824 = call i32 @function_11080(i32 %.pre282, i32 %v1_f81c, i32 192)
  store i32 %v3_f824, i32* %r0.global-to-local, align 4
  %v0_f828 = load i32, i32* @r6, align 4
  %v1_f828 = add i32 %v0_f828, 24
  %v2_f828 = inttoptr i32 %v1_f828 to i32*
  %v3_f828 = load i32, i32* %v2_f828, align 4
  %v1_f82c = add i32 %v3_f828, -64
  store i32 %v1_f82c, i32* %r3.global-to-local, align 4
  store i32 %v1_f82c, i32* %v2_f828, align 4
  br label %dec_label_pc_ed50

dec_label_pc_f838:                                ; preds = %dec_label_pc_ee90
  %v0_f838 = load i32, i32* @r6, align 4
  store i32 %v0_f838, i32* @r0, align 4
  %v0_f83c = call i32 @function_e128()
  store i32 %v0_f83c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eecc

dec_label_pc_f844:                                ; preds = %dec_label_pc_ecf8
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e468, i32* %r3.global-to-local, align 4
  store i32 %v2_f5e8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_f86c = call i32 @function_11194(i32 %v3_ecec, i32 1, i32 4, i32 %v2_e468, i32 %v2_f5e8)
  %v3_f870 = load i8, i8* %stack_var_-56, align 1
  %v4_f870 = sext i8 %v3_f870 to i32
  store i32 %v4_f870, i32* %r3.global-to-local, align 4
  %v2_f874 = or i32 %v4_f870, %v5_f86c
  store i32 %v2_f874, i32* %r0.global-to-local, align 4
  %v4_f874 = icmp eq i32 %v2_f874, 0
  store i1 %v4_f874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f874, label %dec_label_pc_f87c, label %dec_label_pc_f928

dec_label_pc_f87c:                                ; preds = %dec_label_pc_f844
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_f880 = load i32, i32* @r6, align 4
  %v2_f880 = add i32 %v1_f880, 12
  %v3_f880 = inttoptr i32 %v2_f880 to i32*
  store i32 2, i32* %v3_f880, align 4
  %v0_f884 = call i32 @function_deb8()
  store i32 %v0_f884, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32* %r3.global-to-local, align 4
  %v2_f88c = load i16, i16* bitcast (i16** @global_var_1e748.125 to i16*), align 4
  %v3_f88c = zext i16 %v2_f88c to i32
  store i32 %v3_f88c, i32* %r1.global-to-local, align 4
  %v3_f890 = call i32 @function_106fc(i32 %v0_f884, i32 %v3_f88c)
  store i32 %v3_f890, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e718.121 to i32), i32* %r3.global-to-local, align 4
  %v2_f898 = load i32, i32* @global_var_1e718.121, align 4
  store i32 %v2_f898, i32* %ip.global-to-local, align 4
  %v1_f8a0 = load i32, i32* @r4, align 4
  %v9_f8a0 = icmp eq i32 %v2_f898, %v1_f8a0
  store i1 %v9_f8a0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_f88c, i32* %r1.global-to-local, align 4
  %v7_f8a8 = icmp sgt i32 %v2_f898, %v1_f8a0
  br i1 %v7_f8a8, label %dec_label_pc_f8ac, label %dec_label_pc_f8ec

dec_label_pc_f8ac:                                ; preds = %dec_label_pc_f87c
  %v2_f8b0 = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_f8b0, i32* %r3.global-to-local, align 4
  store i32 %v1_f8a0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_f8bc:                                ; preds = %dec_label_pc_f8dc, %dec_label_pc_f8cc
  %v1_f8bc = add i32 %v0_f8bc, 1
  store i32 %v1_f8bc, i32* %r2.global-to-local, align 4
  %v9_f8c0 = icmp eq i32 %v1_f8bc, %v2_f898
  %v1_f8c4 = add i32 %v0_f8c4, 16
  store i32 %v1_f8c4, i32* %r3.global-to-local, align 4
  br i1 %v9_f8c0, label %dec_label_pc_f8ec.loopexit, label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f8bc, %dec_label_pc_f8ac
  %v0_f8bc = phi i32 [ %v1_f8bc, %dec_label_pc_f8bc ], [ %v1_f8a0, %dec_label_pc_f8ac ]
  %v0_f8c4 = phi i32 [ %v1_f8c4, %dec_label_pc_f8bc ], [ %v2_f8b0, %dec_label_pc_f8ac ]
  store i32 %v0_f8c4, i32* %r0.global-to-local, align 4
  %v1_f8d0 = add i32 %v0_f8c4, 8
  %v2_f8d0 = inttoptr i32 %v1_f8d0 to i16*
  %v3_f8d0 = load i16, i16* %v2_f8d0, align 2
  %v4_f8d0 = zext i16 %v3_f8d0 to i32
  store i32 %v4_f8d0, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i16 %v3_f8d0, %v2_f88c
  br i1 %tmp460, label %dec_label_pc_f8bc, label %dec_label_pc_f8dc

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f8cc
  %v1_f8dc = add i32 %v0_f8c4, 10
  %v2_f8dc = inttoptr i32 %v1_f8dc to i16*
  %v3_f8dc = load i16, i16* %v2_f8dc, align 2
  %v4_f8dc = zext i16 %v3_f8dc to i32
  store i32 %v4_f8dc, i32* %r3.global-to-local, align 4
  %v3_f8e0 = icmp uge i16 %v3_f8dc, %v2_f88c
  %v9_f8e0 = icmp eq i16 %v3_f8dc, %v2_f88c
  %v2_f8e4 = xor i1 %v3_f8e0, true
  %v3_f8e4 = or i1 %v9_f8e0, %v2_f8e4
  br i1 %v3_f8e4, label %dec_label_pc_f8bc, label %dec_label_pc_f8f0.loopexit

dec_label_pc_f8ec.loopexit:                       ; preds = %dec_label_pc_f8bc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f8ec

dec_label_pc_f8ec:                                ; preds = %dec_label_pc_f8ec.loopexit, %dec_label_pc_f87c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f8f0

dec_label_pc_f8f0.loopexit:                       ; preds = %dec_label_pc_f8dc
  store i1 %v3_f8e0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f8f0

dec_label_pc_f8f0:                                ; preds = %dec_label_pc_f8f0.loopexit, %dec_label_pc_f8ec
  %v0_f904 = phi i32 [ %v0_f8c4, %dec_label_pc_f8f0.loopexit ], [ 0, %dec_label_pc_f8ec ]
  %v0_f8f0 = load i32, i32* @r6, align 4
  %v1_f8f0 = add i32 %v0_f8f0, 4
  %v2_f8f0 = inttoptr i32 %v1_f8f0 to i32*
  %v3_f8f0 = load i32, i32* %v2_f8f0, align 4
  %v3_f8f4 = udiv i32 %v3_f8f0, 32
  store i32 %v3_f8f4, i32* %r2.global-to-local, align 4
  %v1_f8f8 = urem i32 %v3_f8f0, 32
  store i32 %v1_f8f8, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f8fc = mul nuw nsw i32 %v3_f8f4, 4
  store i32 %v3_f8fc, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f904 = inttoptr i32 %v0_f8f0 to i32*
  store i32 %v0_f904, i32* %v2_f904, align 4
  %v0_f908 = load i32, i32* %r3.global-to-local, align 4
  %v1_f908 = load i32, i32* @r6, align 4
  %v2_f908 = add i32 %v1_f908, 24
  %v3_f908 = inttoptr i32 %v2_f908 to i32*
  store i32 %v0_f908, i32* %v3_f908, align 4
  %v0_ed20.pre = load i32, i32* @ip, align 4
  %v1_ed28.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ed1c

dec_label_pc_f910:                                ; preds = %dec_label_pc_f634
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f914 = call i32 @function_fac4(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f91c = call i32 @function_fac4(i32 27)
  store i32 %v1_f91c, i32* %r0.global-to-local, align 4
  %v0_f920 = load i32, i32* @r6, align 4
  %v1_f920 = add i32 %v0_f920, 12
  %v2_f920 = inttoptr i32 %v1_f920 to i32*
  %v3_f920 = load i32, i32* %v2_f920, align 4
  store i32 %v3_f920, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed38.backedge

dec_label_pc_f928:                                ; preds = %dec_label_pc_f844
  %v0_f928 = load i32, i32* @r6, align 4
  %v1_f928 = add i32 %v0_f928, 4
  %v2_f928 = inttoptr i32 %v1_f928 to i32*
  %v3_f928 = load i32, i32* %v2_f928, align 4
  store i32 %v3_f928, i32* %r0.global-to-local, align 4
  %v1_f92c = call i32 @function_10b64(i32 %v3_f928)
  store i32 %v1_f92c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f934 = load i32, i32* @r4, align 4
  %v1_f934 = load i32, i32* @r6, align 4
  %v2_f934 = add i32 %v1_f934, 12
  %v3_f934 = inttoptr i32 %v2_f934 to i32*
  store i32 %v0_f934, i32* %v3_f934, align 4
  %v0_f938 = load i32, i32* %r3.global-to-local, align 4
  %v1_f938 = load i32, i32* @r6, align 4
  %v2_f938 = add i32 %v1_f938, 4
  %v3_f938 = inttoptr i32 %v2_f938 to i32*
  store i32 %v0_f938, i32* %v3_f938, align 4
  %v0_f93c = load i32, i32* @r4, align 4
  %v1_f93c = trunc i32 %v0_f93c to i8
  %v2_f93c = load i32, i32* @r6, align 4
  %v3_f93c = add i32 %v2_f93c, 284
  %v4_f93c = inttoptr i32 %v3_f93c to i8*
  store i8 %v1_f93c, i8* %v4_f93c, align 1
  br label %dec_label_pc_ee3c

dec_label_pc_f944:                                ; preds = %dec_label_pc_edec
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_f948 = load i32, i32* %fp.global-to-local, align 4
  %v2_f948 = inttoptr i32 %v1_f948 to i32*
  store i32 104, i32* %v2_f948, align 4
  br label %dec_label_pc_ee04

dec_label_pc_f950:                                ; preds = %thread-pre-split124
  store i32 %v1_f954, i32* %r0.global-to-local, align 4
  %v0_f958 = load i32, i32* @r6, align 4
  %v1_f958 = add i32 %v0_f958, 12
  %v2_f958 = inttoptr i32 %v1_f958 to i32*
  %v3_f958 = load i32, i32* %v2_f958, align 4
  store i32 %v3_f958, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed38.backedge

dec_label_pc_ed38.backedge.thread:                ; preds = %dec_label_pc_eef8, %dec_label_pc_efcc, %dec_label_pc_f170, %dec_label_pc_f244, %dec_label_pc_f390
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed40

dec_label_pc_ed38.backedge.thread561:             ; preds = %dec_label_pc_f2a8, %dec_label_pc_f1d4, %dec_label_pc_f3f4, %dec_label_pc_f030, %dec_label_pc_ef5c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed40

dec_label_pc_ed38.backedge:                       ; preds = %dec_label_pc_edb4, %dec_label_pc_f950, %dec_label_pc_f910
  %v0_ed40228 = phi i32 [ %v0_f920, %dec_label_pc_f910 ], [ %v0_f958, %dec_label_pc_f950 ], [ %v0_edb4, %dec_label_pc_edb4 ]
  %v0_ed38.be = phi i32 [ %v3_f920, %dec_label_pc_f910 ], [ %v3_f958, %dec_label_pc_f950 ], [ %v3_edb4, %dec_label_pc_edb4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed38 = icmp eq i32 %v0_ed38.be, 0
  store i1 %v2_ed38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed38, label %dec_label_pc_ee3c, label %dec_label_pc_ed40

dec_label_pc_f960:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f96c = call i32 @function_1133c(i32 2, i32 1, i32 0)
  store i32 %v3_f96c, i32* %r0.global-to-local, align 4
  %v2_f970 = icmp eq i32 %v3_f96c, -1
  store i1 %v2_f970, i1* %cpsr_c.global-to-local, align 1
  %v7_f970 = icmp eq i32 %v3_f96c, -1
  store i1 %v7_f970, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f96c, i32* @r4, align 4
  br i1 %v7_f970, label %dec_label_pc_f9f4, label %dec_label_pc_f97c

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f960
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f980 = call i32 @function_fb64(i32 2)
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([12 x i8]* @global_var_15ed0.74 to i32), i32* @r0, align 4
  %v2_f994 = call i32 @function_110c4(i32 ptrtoint ([12 x i8]* @global_var_15ed0.74 to i32))
  %v0_f998 = load i32, i32* @r5, align 4
  store i32 %v0_f998, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f9a4 = inttoptr i32 %v0_f998 to i32*
  %v3_f9a4 = call i32 @function_faa0(i32 2, i32* %v2_f9a4)
  store i32 %v2_f7a4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f9b8 = call i32 @function_fac4(i32 2)
  %v0_f9c0 = load i32, i32* @r4, align 4
  store i32 %v0_f9c0, i32* %r0.global-to-local, align 4
  store i32 %v2_e674, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f9cc = call i32 @function_11124(i32 %v0_f9c0, i32 %v2_e674, i32 16)
  store i32 %v3_f9cc, i32* %r0.global-to-local, align 4
  %v3_f9d0 = icmp eq i32 %v3_f9cc, -1
  store i1 %v3_f9d0, i1* %cpsr_c.global-to-local, align 1
  %v8_f9d0 = icmp eq i32 %v3_f9cc, -1
  store i1 %v8_f9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f9d0, label %dec_label_pc_f9d8, label %dec_label_pc_f9fc

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_f97c
  %v0_f9d8 = load i32, i32* @r4, align 4
  store i32 %v0_f9d8, i32* %r0.global-to-local, align 4
  %v1_f9dc = call i32 @function_10b64(i32 %v0_f9d8)
  %v0_f9e0 = load i32, i32* @r5, align 4
  store i32 %v0_f9e0, i32* %r0.global-to-local, align 4
  %v1_f9e4 = call i32 @function_12b90(i32 %v0_f9e0)
  store i32 %v1_f9e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_e444, %dec_label_pc_f9d8
  store i32 ptrtoint (i32* @global_var_207a0.133 to i32), i32* %ip.global-to-local, align 4
  %v2_f9ec = load i32, i32* @global_var_207a0.133, align 4
  store i32 %v2_f9ec, i32* %r0.global-to-local, align 4
  %v1_f9f0 = call i32 @function_10b64(i32 %v2_f9ec)
  store i32 %v1_f9f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9f4

dec_label_pc_f9f4:                                ; preds = %dec_label_pc_e420.dec_label_pc_f9f4_crit_edge, %dec_label_pc_f960, %dec_label_pc_f9fc, %dec_label_pc_f9e8
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e420.dec_label_pc_f9f4_crit_edge ], [ %v2_e468, %dec_label_pc_f960 ], [ %v2_f9fc.pre-phi, %dec_label_pc_f9fc ], [ %v2_e468, %dec_label_pc_f9e8 ]
  %v0_f9f4 = load i32, i32* @r5, align 4
  store i32 %v0_f9f4, i32* %r0.global-to-local, align 4
  %v1_f9f8 = call i32 @function_12b90(i32 %v0_f9f4)
  store i32 %v1_f9f8, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_f9fc

dec_label_pc_f9fc:                                ; preds = %dec_label_pc_f97c, %dec_label_pc_f9f4
  %v2_fa1c.pre-phi = phi i32 [ %v2_f5e8, %dec_label_pc_f97c ], [ %.pre281, %dec_label_pc_f9f4 ]
  %v2_f9fc.pre-phi = phi i32 [ %v2_e468, %dec_label_pc_f97c ], [ %.pre.pre-phi, %dec_label_pc_f9f4 ]
  store i32 %v2_f9fc.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa08 = load i32, i32* @r4, align 4
  store i32 %v0_fa08, i32* %r0.global-to-local, align 4
  %v0_fa0c = load i32, i32* @r5, align 4
  %v6_fa0c = trunc i32 %v0_fa0c to i8
  store i8 %v6_fa0c, i8* %stack_var_-56, align 1
  %v6_fa10 = call i32 @function_11280(i32 %v0_fa08, i32 %v2_f9fc.pre-phi, i32 1, i32 16384)
  %v0_fa18 = load i32, i32* @r4, align 4
  store i32 %v0_fa18, i32* %r0.global-to-local, align 4
  store i32 %v2_fa1c.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa28 = call i32 @function_11280(i32 %v0_fa18, i32 %v2_fa1c.pre-phi, i32 4, i32 16384)
  %v0_fa30 = load i32, i32* @r4, align 4
  store i32 %v0_fa30, i32* %r0.global-to-local, align 4
  %v2_fa34 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fa34, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa40 = call i32 @function_11280(i32 %v0_fa30, i32 %v2_fa34, i32 2, i32 16384)
  %v0_fa44 = load i32, i32* @r8, align 4
  %v1_fa44 = add i32 %v0_fa44, 12
  store i32 %v1_fa44, i32* %r1.global-to-local, align 4
  %v0_fa48 = load i32, i32* @r4, align 4
  store i32 %v0_fa48, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa54 = call i32 @function_11280(i32 %v0_fa48, i32 %v1_fa44, i32 1, i32 16384)
  store i32 %v4_fa54, i32* %r0.global-to-local, align 4
  %v0_fa58 = load i32, i32* @r8, align 4
  %v1_fa58 = inttoptr i32 %v0_fa58 to i32*
  %v2_fa58 = load i32, i32* %v1_fa58, align 4
  store i32 %v2_fa58, i32* %r1.global-to-local, align 4
  %v1_fa5c = add i32 %v0_fa58, 12
  %v2_fa5c = inttoptr i32 %v1_fa5c to i8*
  %v3_fa5c = load i8, i8* %v2_fa5c, align 1
  %v4_fa5c = zext i8 %v3_fa5c to i32
  store i32 %v4_fa5c, i32* %r2.global-to-local, align 4
  %v0_fa60 = load i32, i32* @r4, align 4
  store i32 %v0_fa60, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa68 = call i32 @function_11280(i32 %v0_fa60, i32 %v2_fa58, i32 %v4_fa5c, i32 16384)
  %v0_fa6c = load i32, i32* @r8, align 4
  %v1_fa6c = add i32 %v0_fa6c, 13
  store i32 %v1_fa6c, i32* %r1.global-to-local, align 4
  %v0_fa70 = load i32, i32* @r4, align 4
  store i32 %v0_fa70, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa7c = call i32 @function_11280(i32 %v0_fa70, i32 %v1_fa6c, i32 1, i32 16384)
  %v0_fa80 = load i32, i32* @r4, align 4
  store i32 %v0_fa80, i32* %r0.global-to-local, align 4
  %v0_fa84 = load i32, i32* @r8, align 4
  %v1_fa84 = add i32 %v0_fa84, 13
  %v2_fa84 = inttoptr i32 %v1_fa84 to i8*
  %v3_fa84 = load i8, i8* %v2_fa84, align 1
  %v4_fa84 = zext i8 %v3_fa84 to i32
  store i32 %v4_fa84, i32* %r2.global-to-local, align 4
  %v1_fa88 = add i32 %v0_fa84, 4
  %v2_fa88 = inttoptr i32 %v1_fa88 to i32*
  %v3_fa88 = load i32, i32* %v2_fa88, align 4
  store i32 %v3_fa88, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa90 = call i32 @function_11280(i32 %v0_fa80, i32 %v3_fa88, i32 %v4_fa84, i32 16384)
  %v0_fa94 = load i32, i32* @r4, align 4
  store i32 %v0_fa94, i32* %r0.global-to-local, align 4
  %v1_fa98 = call i32 @function_10b64(i32 %v0_fa94)
  store i32 %v1_fa98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9f4

; uselistorder directives
  uselistorder i32 %v2_f9fc.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fa1c.pre-phi, { 1, 0 }
  uselistorder i1 %v7_f970, { 1, 0 }
  uselistorder i32 %v3_f96c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f8f0, { 1, 0 }
  uselistorder i1 %v3_f8e0, { 1, 0 }
  uselistorder i32 %v0_f8c4, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_f898, { 0, 2, 1, 3 }
  uselistorder i32 %v3_f804, { 1, 0 }
  uselistorder i1 %v2_f7d0, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f7b8, { 1, 0 }
  uselistorder i32 %v0_f7b4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f78c, { 1, 0 }
  uselistorder i32 %v0_f78c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f6dc.pr, { 1, 0 }
  uselistorder i32 %v0_f6a8, { 1, 2, 0 }
  uselistorder i32 %v4_f648, { 1, 0, 2 }
  uselistorder i1 %v7_f624, { 1, 0 }
  uselistorder i32 %v1_f5cc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f5cc, { 0, 2, 1 }
  uselistorder i32 %v0_f5c4, { 1, 0 }
  uselistorder i1 %v7_f5c0, { 1, 0 }
  uselistorder i1 %v7_f5b8, { 1, 0 }
  uselistorder i1 %v7_f5b0, { 1, 0 }
  uselistorder i1 %v8_f5a8, { 1, 0 }
  uselistorder i1 %v7_f58c, { 1, 0 }
  uselistorder i1 %v7_f584, { 1, 0 }
  uselistorder i1 %v7_f57c, { 1, 0 }
  uselistorder i1 %v8_f574, { 1, 0 }
  uselistorder i32 %v1_f55c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f508, { 1, 0 }
  uselistorder i32 %v4_f4fc, { 1, 0, 2 }
  uselistorder i32 %v1_f4c8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f4c8, { 0, 2, 1 }
  uselistorder i32 %v0_f4c0, { 1, 0 }
  uselistorder i1 %v7_f4bc, { 1, 0 }
  uselistorder i1 %v7_f4b4, { 1, 0 }
  uselistorder i1 %v8_f4ac, { 1, 0 }
  uselistorder i1 %v7_f490, { 1, 0 }
  uselistorder i1 %v7_f488, { 1, 0 }
  uselistorder i1 %v8_f480, { 1, 0 }
  uselistorder i32 %v1_f468, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f404, { 1, 0 }
  uselistorder i8 %v3_f3fc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f3f4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f3f4, { 0, 2, 1 }
  uselistorder i32 %v0_f3ec, { 1, 0 }
  uselistorder i1 %v7_f3e8, { 1, 0 }
  uselistorder i1 %v7_f3e0, { 1, 0 }
  uselistorder i1 %v7_f3d8, { 1, 0 }
  uselistorder i1 %v7_f3c4, { 1, 0 }
  uselistorder i1 %v7_f3bc, { 1, 0 }
  uselistorder i1 %v7_f3b4, { 1, 0 }
  uselistorder i1 %v8_f3ac, { 1, 0 }
  uselistorder i32 %v1_f394, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f2b8, { 1, 0 }
  uselistorder i8 %v3_f2b0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f2a8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f2a8, { 0, 2, 1 }
  uselistorder i32 %v0_f2a0, { 1, 0 }
  uselistorder i1 %v7_f29c, { 1, 0 }
  uselistorder i1 %v7_f294, { 1, 0 }
  uselistorder i1 %v7_f28c, { 1, 0 }
  uselistorder i1 %v7_f278, { 1, 0 }
  uselistorder i1 %v7_f270, { 1, 0 }
  uselistorder i1 %v7_f268, { 1, 0 }
  uselistorder i1 %v8_f260, { 1, 0 }
  uselistorder i32 %v1_f248, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f1e4, { 1, 0 }
  uselistorder i8 %v3_f1dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f1d4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f1d4, { 0, 2, 1 }
  uselistorder i32 %v0_f1cc, { 1, 0 }
  uselistorder i1 %v7_f1c8, { 1, 0 }
  uselistorder i1 %v7_f1c0, { 1, 0 }
  uselistorder i1 %v7_f1b8, { 1, 0 }
  uselistorder i1 %v7_f1a4, { 1, 0 }
  uselistorder i1 %v7_f19c, { 1, 0 }
  uselistorder i1 %v7_f194, { 1, 0 }
  uselistorder i1 %v8_f18c, { 1, 0 }
  uselistorder i32 %v1_f174, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f160, { 1, 0 }
  uselistorder i32 %v1_f158, { 1, 0 }
  uselistorder i32 %v1_f150, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f14c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f14c, { 0, 2, 1 }
  uselistorder i32 %v0_f12c.pr, { 1, 0 }
  uselistorder i32 %v0_f10c.pr, { 1, 0 }
  uselistorder i1 %v7_f0e4, { 1, 0 }
  uselistorder i1 %v2_f0d4, { 1, 0, 2 }
  uselistorder i1 %v2_f0b8, { 1, 0, 2 }
  uselistorder i32 %v1_f0d8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f0ac, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f0dc, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f040, { 1, 0 }
  uselistorder i8 %v3_f038, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f030, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f030, { 0, 2, 1 }
  uselistorder i32 %v0_f028, { 1, 0 }
  uselistorder i1 %v7_f024, { 1, 0 }
  uselistorder i1 %v7_f01c, { 1, 0 }
  uselistorder i1 %v7_f014, { 1, 0 }
  uselistorder i1 %v7_f000, { 1, 0 }
  uselistorder i1 %v7_eff8, { 1, 0 }
  uselistorder i1 %v7_eff0, { 1, 0 }
  uselistorder i1 %v8_efe8, { 1, 0 }
  uselistorder i32 %v1_efd0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ef6c, { 1, 0 }
  uselistorder i8 %v3_ef64, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ef5c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ef5c, { 0, 2, 1 }
  uselistorder i32 %v0_ef54, { 1, 0 }
  uselistorder i1 %v7_ef50, { 1, 0 }
  uselistorder i1 %v7_ef48, { 1, 0 }
  uselistorder i1 %v7_ef40, { 1, 0 }
  uselistorder i1 %v7_ef2c, { 1, 0 }
  uselistorder i1 %v7_ef24, { 1, 0 }
  uselistorder i1 %v7_ef1c, { 1, 0 }
  uselistorder i1 %v8_ef14, { 1, 0 }
  uselistorder i32 %v1_eefc, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_eee8, { 1, 2, 0 }
  uselistorder i32 %v2_eed4, { 1, 0 }
  uselistorder i32 %v0_eed4, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_eed0, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_eea8, { 2, 1, 0 }
  uselistorder i1 %v7_ee84, { 1, 0 }
  uselistorder i32 %v4_ee80, { 1, 0, 2 }
  uselistorder i32 %v1_ee40, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_ee24, { 1, 0 }
  uselistorder i32 %v1_ee14, { 2, 1, 0 }
  uselistorder i32 %v1_ee10, { 1, 0 }
  uselistorder i32 %v0_edb4, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_ed90, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ed8c, { 1, 0 }
  uselistorder i32 %v4_ed70, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_ed5c, { 1, 0, 2 }
  uselistorder i32 %v3_ed58, { 1, 0, 2 }
  uselistorder i32 %v0_f814, { 1, 0, 2 }
  uselistorder i32 %v3_ed24, { 1, 0 }
  uselistorder i32 %v1_ed0c, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ed08, { 1, 0 }
  uselistorder i32 %v3_ed00, { 1, 2, 0 }
  uselistorder i1 %v7_ecf0, { 1, 0 }
  uselistorder i32 %v3_ecec, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_ece0, { 1, 0 }
  uselistorder i32 %v1_ec88, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ec88, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ec6c, { 0, 2, 1 }
  uselistorder i32 %v1_ec64, { 1, 0 }
  uselistorder i32 %v1_ec24, { 2, 1, 0 }
  uselistorder i32 %v1_ec20, { 1, 0 }
  uselistorder i1 %v2_ec00, { 1, 0, 2 }
  uselistorder i32 %v0_ebfc, { 1, 0, 2 }
  uselistorder i1 %v7_ebc8, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_ebc8, { 1, 0, 2 }
  uselistorder i32 %v2_ebc0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_ebb4, { 1, 0, 2 }
  uselistorder i32 %v0_ebb8, { 1, 0 }
  uselistorder i32 %v1_eb9c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_eb90, { 0, 1, 3, 2 }
  uselistorder i32 %v0_eb90, { 0, 2, 1 }
  uselistorder i32 %v1_eb80, { 1, 0 }
  uselistorder i32 %v3_ec4c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_eae0, { 1, 0 }
  uselistorder i32 %v1_eac8, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ead4, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ea84, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_ea78, { 2, 1, 0 }
  uselistorder i32 %v1_ea58, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ea34, { 1, 0 }
  uselistorder i1 %v9_ea00, { 1, 0 }
  uselistorder i32 %v0_e9b0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e954, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_e904, { 1, 0 }
  uselistorder i32 %v5_e89c, { 1, 0 }
  uselistorder i32 %v3_e88c, { 1, 2, 0 }
  uselistorder i16 %v4_e888, { 1, 0 }
  uselistorder i32 %v3_e888, { 1, 0 }
  uselistorder i1 %v2_e7c4, { 1, 0 }
  uselistorder i1 %v2_e7b0, { 1, 0 }
  uselistorder i1 %v2_e79c, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e778, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e760, { 1, 0 }
  uselistorder i1 %v3_e744, { 1, 0, 2 }
  uselistorder i1 %v2_e730, { 1, 0 }
  uselistorder i1 %v2_e70c, { 1, 0 }
  uselistorder i32 %v1_e6bc, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e6a8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e6a4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e68c, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e674, { 1, 0, 2 }
  uselistorder i32 %v2_f7a4, { 1, 2, 0 }
  uselistorder i32 %v2_f5e8, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f690, { 1, 0 }
  uselistorder i32 %v2_ec58, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e64c, { 0, 3, 6, 5, 7, 1, 2, 4, 8 }
  uselistorder i32 %v4_e51c, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e4b0.le, { 1, 0 }
  uselistorder i32 %v0_e494, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e468, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e434, { 1, 0 }
  uselistorder i32 %v3_e42c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_e418, { 1, 0 }
  uselistorder i32 %v2_e3fc, { 1, 0, 2 }
  uselistorder i32 %v0_e3e8, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e35c, { 3, 1, 2, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 6, 3, 0, 1, 2, 5, 4, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 77, 79, 80, 81, 83, 82, 84, 85, 35, 122, 61, 62, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 63, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 112, 109, 114, 163, 164, 115, 116, 165, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 162, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 145, 148, 147, 156, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161 }
  uselistorder i32* %r2.global-to-local, { 42, 43, 44, 45, 46, 47, 48, 35, 36, 37, 49, 50, 51, 52, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 113, 114, 68, 69, 71, 70, 67, 115, 72, 116, 73, 117, 118, 74, 75, 76, 77, 78, 79, 80, 81, 82, 65, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 56, 57, 43, 45, 44, 46, 58, 59, 60, 61, 62, 30, 47, 48, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 108, 109, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107 }
  uselistorder i32* %r0.global-to-local, { 109, 108, 110, 111, 112, 114, 113, 115, 116, 117, 118, 120, 121, 119, 83, 82, 84, 86, 85, 87, 88, 89, 91, 90, 23, 25, 125, 122, 1, 3, 2, 4, 123, 124, 126, 128, 127, 92, 130, 59, 61, 60, 94, 93, 95, 96, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 0, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 74, 76, 75, 78, 77, 80, 79, 81, 102, 104, 103, 105, 101, 106, 107, 143, 129, 133, 131, 132, 138, 134, 135, 188, 136, 137, 139, 141, 140, 142, 144, 149, 145, 148, 146, 147, 196, 150, 151, 154, 152, 153, 156, 155, 73, 195, 158, 157, 159, 161, 160, 163, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 182, 184, 190, 185, 186, 187, 189, 191, 192, 193, 194 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 22, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 115, 116, 140, 239, 235, 1, 236, 237, 127, 128, 117, 103, 119, 121, 122, 65, 66, 67, 68, 69, 0, 118, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 120, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 227, 92, 93, 94, 87, 88, 90, 96, 97, 98, 99, 100, 101, 106, 107, 108, 102, 104, 105, 109, 110, 111, 112, 113, 114, 123, 124, 125, 126, 129, 131, 130, 132, 133, 134, 135, 136, 137, 138, 139, 228, 229, 141, 142, 143, 144, 145, 147, 146, 148, 149, 150, 153, 155, 156, 154, 151, 152, 234, 233, 231, 157, 232, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 95, 196, 197, 89, 198, 199, 91, 200, 201, 202, 203, 204, 205, 86, 206, 207, 208, 209, 210, 85, 211, 212, 213, 81, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 238, 230 }
  uselistorder i1* %cpsr_c.global-to-local, { 113, 114, 136, 232, 229, 1, 123, 227, 228, 124, 115, 105, 116, 118, 119, 65, 66, 67, 68, 0, 99, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 117, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 219, 89, 91, 92, 85, 87, 88, 93, 94, 95, 96, 97, 98, 103, 104, 106, 100, 101, 102, 107, 108, 109, 110, 111, 112, 120, 121, 122, 125, 127, 126, 128, 129, 130, 131, 132, 133, 134, 135, 221, 222, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 148, 145, 146, 226, 225, 230, 151, 224, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 86, 188, 189, 90, 190, 191, 84, 192, 193, 194, 195, 196, 197, 83, 198, 199, 200, 201, 202, 80, 203, 204, 205, 76, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 231, 223 }
  uselistorder i32 (i32)* @function_110c4, { 3, 2, 0, 1 }
  uselistorder i32 ptrtoint ([12 x i8]* @global_var_15ed0.74 to i32), { 0, 2, 1, 3 }
  uselistorder i16* bitcast (i16** @global_var_1e748.125 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1e748.125, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1e748.125 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11194, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15f70.185 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11280, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @function_fac4, { 26, 39, 38, 25, 32, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 24, 2, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1015c, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @function_faa0, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 33, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36 }
  uselistorder i32 (i32)* @function_fb64, { 22, 21, 30, 29, 28, 27, 26, 25, 24, 23, 20, 3, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1120c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10888, { 1, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_e128, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11244, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_112b8, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c898, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1e734.180, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c848, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1e726.177 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10, 15, 16, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f50.171 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15f48.169 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15f0c.157 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_e1f0, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15ee8.149 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_15eec.147 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_1e73d.144, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 1, 0, 2 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_1e730.138, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1e730.138 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1e73c.139, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1e71c.135, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e71c.135 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_deb8, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_112f8, { 10, 9, 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 2048, { 5, 4, 1, 2, 3, 6, 0, 7, 8, 9 }
  uselistorder i32* @global_var_207a0.133, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_2079c.131, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_1e74c.119, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_107e4, { 0, 1, 2, 3, 4, 5, 8, 6, 7 }
  uselistorder i32 (i32)* @function_df14, { 1, 0 }
  uselistorder i32* @global_var_20780.45, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_20780.45 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_10360, { 2, 1, 0 }
  uselistorder i32 ()* @function_10854, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f9fc, { 1, 0 }
  uselistorder label %dec_label_pc_f9f4, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_f9e8, { 1, 0 }
  uselistorder label %dec_label_pc_ed38.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ed38.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ed38.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f7d8, { 1, 0 }
  uselistorder label %dec_label_pc_f738, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f700, { 1, 0 }
  uselistorder label %dec_label_pc_f6ec, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f6dc, { 1, 0 }
  uselistorder label %dec_label_pc_f5cc, { 1, 0 }
  uselistorder label %dec_label_pc_f54c, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f518, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f4c8, { 1, 0 }
  uselistorder label %dec_label_pc_f40c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f3f4, { 1, 0 }
  uselistorder label %dec_label_pc_f2c0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f2a8, { 1, 0 }
  uselistorder label %dec_label_pc_f1ec, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f1d4, { 1, 0 }
  uselistorder label %dec_label_pc_f160, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f12c, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f10c, { 1, 0 }
  uselistorder label %dec_label_pc_f0f8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f0b4, { 1, 0 }
  uselistorder label %dec_label_pc_f0b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f048, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f030, { 1, 0 }
  uselistorder label %dec_label_pc_ef74, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ef5c, { 1, 0 }
  uselistorder label %dec_label_pc_ee3c, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_ee04, { 1, 0 }
  uselistorder label %dec_label_pc_ed9c, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ed50, { 1, 0 }
  uselistorder label %dec_label_pc_ed40, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ed40.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ed1c, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ec40, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_eb34.dec_label_pc_eb34_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_eb10.dec_label_pc_eb10_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_eb04, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_eaec, { 1, 0 }
  uselistorder label %dec_label_pc_eac8, { 1, 0 }
  uselistorder label %dec_label_pc_e97c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e968, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_e7fc, { 1, 0 }
  uselistorder label %dec_label_pc_e7f0, { 1, 0 }
  uselistorder label %dec_label_pc_e7e4, { 1, 0 }
  uselistorder label %dec_label_pc_e7d8, { 1, 0 }
  uselistorder label %dec_label_pc_e7cc, { 1, 0 }
  uselistorder label %dec_label_pc_e7b8, { 1, 0 }
  uselistorder label %dec_label_pc_e7a4, { 1, 0 }
  uselistorder label %dec_label_pc_e790, { 1, 0 }
  uselistorder label %dec_label_pc_e770, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e74c, { 1, 0 }
  uselistorder label %dec_label_pc_e740, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e71c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e6f8, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e6a4, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_e494, { 1, 0 }
}

define i32 @function_faa0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_faa0:
  store i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32* @r2, align 4
  %v3_faa4 = mul i32 %arg1, 8
  %v2_faa8 = add i32 %v3_faa4, ptrtoint (i32* @global_var_207ac.195 to i32)
  store i32 %v2_faa8, i32* @r3, align 4
  %v2_faac = icmp eq i32* %arg2, null
  br i1 %v2_faac, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_faa0
  %v3_fab44 = inttoptr i32 %v2_faa8 to i32*
  %v4_fab45 = load i32, i32* %v3_fab44, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_faa0
  %v2_fab0 = add i32 %v3_faa4, add (i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32 4)
  %v3_fab0 = inttoptr i32 %v2_fab0 to i16*
  %v4_fab0 = load i16, i16* %v3_fab0, align 4
  %v5_fab0 = zext i16 %v4_fab0 to i32
  store i32 %v5_fab0, i32* @r3, align 4
  %v3_fab4 = inttoptr i32 %v2_faa8 to i32*
  %v4_fab4 = load i32, i32* %v3_fab4, align 4
  store i32 %v5_fab0, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_fab46 = phi i32 [ %v4_fab45, %.thread ], [ %v4_fab4, %bb ]
  ret i32 %v4_fab46

; uselistorder directives
  uselistorder i32 %v2_faa8, { 1, 0, 2 }
  uselistorder i32 %v3_faa4, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_fac4(i32 %arg1) local_unnamed_addr {
dec_label_pc_fac4:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_facc = mul i32 %arg1, 8
  %v2_fad0 = add i32 %v3_facc, ptrtoint (i32* @global_var_207ac.195 to i32)
  %v2_fad4 = load i32, i32* inttoptr (i32 124220 to i32*), align 4
  %v1_fad8 = add i32 %v3_facc, add (i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32 4)
  %v2_fad8 = inttoptr i32 %v1_fad8 to i16*
  %v3_fad8 = load i16, i16* %v2_fad8, align 4
  %v3_fadc = udiv i32 %v2_fad4, 256
  %v2_fae0 = icmp eq i16 %v3_fad8, 0
  store i1 %v2_fae0, i1* @cpsr_z, align 1
  %v3_fae4 = udiv i32 %v2_fad4, 65536
  store i32 %v3_fae4, i32* @r3, align 4
  %v3_fae8 = load i32, i32* @r4, align 4
  store i32 %v3_fae8, i32* %stack_var_-16, align 4
  %v1_faec = urem i32 %v3_fadc, 256
  store i32 %v1_faec, i32* %r6.global-to-local, align 4
  %v1_faf0 = urem i32 %v3_fae4, 256
  store i32 %v1_faf0, i32* %r5.global-to-local, align 4
  %v3_faf4 = udiv i32 %v2_fad4, 16777216
  store i32 %v3_faf4, i32* %r4.global-to-local, align 4
  %v1_faf8 = urem i32 %v2_fad4, 256
  store i32 %v1_faf8, i32* %lr.global-to-local, align 4
  br i1 %v2_fae0, label %dec_label_pc_fb54, label %dec_label_pc_fb00

dec_label_pc_fb00:                                ; preds = %dec_label_pc_fac4
  store i32 0, i32* @ip, align 4
  %v1_fb04 = inttoptr i32 %v2_fad0 to i32*
  br label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fb04.dec_label_pc_fb04_crit_edge, %dec_label_pc_fb00
  %v0_fb0c = phi i32 [ %v0_fb0c.pre, %dec_label_pc_fb04.dec_label_pc_fb04_crit_edge ], [ %v1_faf8, %dec_label_pc_fb00 ]
  %v2_fb10 = phi i32 [ %v1_fb48, %dec_label_pc_fb04.dec_label_pc_fb04_crit_edge ], [ 0, %dec_label_pc_fb00 ]
  %v2_fb04 = load i32, i32* %v1_fb04, align 4
  %v2_fb08 = add i32 %v2_fb04, %v2_fb10
  %v3_fb08 = inttoptr i32 %v2_fb08 to i8*
  %v4_fb08 = load i8, i8* %v3_fb08, align 1
  %v6_fb08 = zext i8 %v4_fb08 to i32
  %v2_fb0c = xor i32 %v6_fb08, %v0_fb0c
  %v1_fb10 = trunc i32 %v2_fb0c to i8
  store i8 %v1_fb10, i8* %v3_fb08, align 1
  %v2_fb14 = load i32, i32* %v1_fb04, align 4
  %v0_fb18 = load i32, i32* @ip, align 4
  %v2_fb18 = add i32 %v0_fb18, %v2_fb14
  %v3_fb18 = inttoptr i32 %v2_fb18 to i8*
  %v4_fb18 = load i8, i8* %v3_fb18, align 1
  %v6_fb18 = zext i8 %v4_fb18 to i32
  %v0_fb1c = load i32, i32* %r6.global-to-local, align 4
  %v2_fb1c = xor i32 %v0_fb1c, %v6_fb18
  %v1_fb20 = trunc i32 %v2_fb1c to i8
  store i8 %v1_fb20, i8* %v3_fb18, align 1
  %v2_fb24 = load i32, i32* %v1_fb04, align 4
  %v0_fb28 = load i32, i32* @ip, align 4
  %v2_fb28 = add i32 %v0_fb28, %v2_fb24
  %v3_fb28 = inttoptr i32 %v2_fb28 to i8*
  %v4_fb28 = load i8, i8* %v3_fb28, align 1
  %v6_fb28 = zext i8 %v4_fb28 to i32
  %v0_fb2c = load i32, i32* %r5.global-to-local, align 4
  %v2_fb2c = xor i32 %v0_fb2c, %v6_fb28
  %v1_fb30 = trunc i32 %v2_fb2c to i8
  store i8 %v1_fb30, i8* %v3_fb28, align 1
  %v2_fb34 = load i32, i32* %v1_fb04, align 4
  %v0_fb38 = load i32, i32* @ip, align 4
  %v2_fb38 = add i32 %v0_fb38, %v2_fb34
  %v3_fb38 = inttoptr i32 %v2_fb38 to i8*
  %v4_fb38 = load i8, i8* %v3_fb38, align 1
  %v6_fb38 = zext i8 %v4_fb38 to i32
  %v0_fb3c = load i32, i32* %r4.global-to-local, align 4
  %v2_fb3c = xor i32 %v0_fb3c, %v6_fb38
  store i32 %v2_fb3c, i32* @r3, align 4
  %v1_fb40 = trunc i32 %v2_fb3c to i8
  store i8 %v1_fb40, i8* %v3_fb38, align 1
  %v3_fb44 = load i16, i16* %v2_fad8, align 4
  %v4_fb44 = zext i16 %v3_fb44 to i32
  %v0_fb48 = load i32, i32* @ip, align 4
  %v1_fb48 = add i32 %v0_fb48, 1
  store i32 %v1_fb48, i32* @ip, align 4
  %v9_fb4c = icmp eq i32 %v4_fb44, %v1_fb48
  store i1 %v9_fb4c, i1* @cpsr_z, align 1
  %v8_fb50 = icmp sgt i32 %v4_fb44, %v1_fb48
  br i1 %v8_fb50, label %dec_label_pc_fb04.dec_label_pc_fb04_crit_edge, label %dec_label_pc_fb54.loopexit

dec_label_pc_fb04.dec_label_pc_fb04_crit_edge:    ; preds = %dec_label_pc_fb04
  %v0_fb0c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fb04

dec_label_pc_fb54.loopexit:                       ; preds = %dec_label_pc_fb04
  %v2_fb54.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fb54

dec_label_pc_fb54:                                ; preds = %dec_label_pc_fb54.loopexit, %dec_label_pc_fac4
  %v2_fb54 = phi i32 [ %v2_fb54.pre, %dec_label_pc_fb54.loopexit ], [ %v3_fae8, %dec_label_pc_fac4 ]
  store i32 %v2_fb54, i32* @r4, align 4
  ret i32 %v2_fad0

; uselistorder directives
  uselistorder i32 %v1_fb48, { 1, 2, 3, 0 }
  uselistorder i32 %v1_faf8, { 1, 0 }
  uselistorder i32 %v3_fae4, { 1, 0 }
  uselistorder i32 %v2_fad4, { 3, 0, 1, 2 }
  uselistorder i32 %v2_fad0, { 1, 0 }
  uselistorder i32 %v3_facc, { 1, 0 }
}

define i32 @function_fb64(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb64:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fb6c = mul i32 %arg1, 8
  %v2_fb70 = add i32 %v3_fb6c, ptrtoint (i32* @global_var_207ac.195 to i32)
  %v2_fb74 = load i32, i32* inttoptr (i32 124220 to i32*), align 4
  %v1_fb78 = add i32 %v3_fb6c, add (i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32 4)
  %v2_fb78 = inttoptr i32 %v1_fb78 to i16*
  %v3_fb78 = load i16, i16* %v2_fb78, align 4
  %v3_fb7c = udiv i32 %v2_fb74, 256
  %v2_fb80 = icmp eq i16 %v3_fb78, 0
  %v3_fb84 = udiv i32 %v2_fb74, 65536
  %v3_fb88 = load i32, i32* @r4, align 4
  store i32 %v3_fb88, i32* %stack_var_-16, align 4
  %v1_fb8c = urem i32 %v3_fb7c, 256
  store i32 %v1_fb8c, i32* %r6.global-to-local, align 4
  %v1_fb90 = urem i32 %v3_fb84, 256
  store i32 %v1_fb90, i32* %r5.global-to-local, align 4
  %v3_fb94 = udiv i32 %v2_fb74, 16777216
  store i32 %v3_fb94, i32* %r4.global-to-local, align 4
  %v1_fb98 = urem i32 %v2_fb74, 256
  store i32 %v1_fb98, i32* %lr.global-to-local, align 4
  br i1 %v2_fb80, label %dec_label_pc_fbf4, label %dec_label_pc_fba0

dec_label_pc_fba0:                                ; preds = %dec_label_pc_fb64
  store i32 0, i32* @ip, align 4
  %v1_fba4 = inttoptr i32 %v2_fb70 to i32*
  br label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge, %dec_label_pc_fba0
  %v0_fbac = phi i32 [ %v0_fbac.pre, %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge ], [ %v1_fb98, %dec_label_pc_fba0 ]
  %v2_fbb0 = phi i32 [ %v1_fbe8, %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge ], [ 0, %dec_label_pc_fba0 ]
  %v2_fba4 = load i32, i32* %v1_fba4, align 4
  %v2_fba8 = add i32 %v2_fba4, %v2_fbb0
  %v3_fba8 = inttoptr i32 %v2_fba8 to i8*
  %v4_fba8 = load i8, i8* %v3_fba8, align 1
  %v6_fba8 = zext i8 %v4_fba8 to i32
  %v2_fbac = xor i32 %v6_fba8, %v0_fbac
  %v1_fbb0 = trunc i32 %v2_fbac to i8
  store i8 %v1_fbb0, i8* %v3_fba8, align 1
  %v2_fbb4 = load i32, i32* %v1_fba4, align 4
  %v0_fbb8 = load i32, i32* @ip, align 4
  %v2_fbb8 = add i32 %v0_fbb8, %v2_fbb4
  %v3_fbb8 = inttoptr i32 %v2_fbb8 to i8*
  %v4_fbb8 = load i8, i8* %v3_fbb8, align 1
  %v6_fbb8 = zext i8 %v4_fbb8 to i32
  %v0_fbbc = load i32, i32* %r6.global-to-local, align 4
  %v2_fbbc = xor i32 %v0_fbbc, %v6_fbb8
  %v1_fbc0 = trunc i32 %v2_fbbc to i8
  store i8 %v1_fbc0, i8* %v3_fbb8, align 1
  %v2_fbc4 = load i32, i32* %v1_fba4, align 4
  %v0_fbc8 = load i32, i32* @ip, align 4
  %v2_fbc8 = add i32 %v0_fbc8, %v2_fbc4
  %v3_fbc8 = inttoptr i32 %v2_fbc8 to i8*
  %v4_fbc8 = load i8, i8* %v3_fbc8, align 1
  %v6_fbc8 = zext i8 %v4_fbc8 to i32
  %v0_fbcc = load i32, i32* %r5.global-to-local, align 4
  %v2_fbcc = xor i32 %v0_fbcc, %v6_fbc8
  %v1_fbd0 = trunc i32 %v2_fbcc to i8
  store i8 %v1_fbd0, i8* %v3_fbc8, align 1
  %v2_fbd4 = load i32, i32* %v1_fba4, align 4
  %v0_fbd8 = load i32, i32* @ip, align 4
  %v2_fbd8 = add i32 %v0_fbd8, %v2_fbd4
  %v3_fbd8 = inttoptr i32 %v2_fbd8 to i8*
  %v4_fbd8 = load i8, i8* %v3_fbd8, align 1
  %v6_fbd8 = zext i8 %v4_fbd8 to i32
  %v0_fbdc = load i32, i32* %r4.global-to-local, align 4
  %v2_fbdc = xor i32 %v0_fbdc, %v6_fbd8
  %v1_fbe0 = trunc i32 %v2_fbdc to i8
  store i8 %v1_fbe0, i8* %v3_fbd8, align 1
  %v3_fbe4 = load i16, i16* %v2_fb78, align 4
  %v4_fbe4 = zext i16 %v3_fbe4 to i32
  %v0_fbe8 = load i32, i32* @ip, align 4
  %v1_fbe8 = add i32 %v0_fbe8, 1
  store i32 %v1_fbe8, i32* @ip, align 4
  %v8_fbf0 = icmp sgt i32 %v4_fbe4, %v1_fbe8
  br i1 %v8_fbf0, label %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge, label %dec_label_pc_fbf4.loopexit

dec_label_pc_fba4.dec_label_pc_fba4_crit_edge:    ; preds = %dec_label_pc_fba4
  %v0_fbac.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fba4

dec_label_pc_fbf4.loopexit:                       ; preds = %dec_label_pc_fba4
  %v2_fbf4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fbf4

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_fbf4.loopexit, %dec_label_pc_fb64
  %v2_fbf4 = phi i32 [ %v2_fbf4.pre, %dec_label_pc_fbf4.loopexit ], [ %v3_fb88, %dec_label_pc_fb64 ]
  store i32 %v2_fbf4, i32* @r4, align 4
  ret i32 %v2_fb70

; uselistorder directives
  uselistorder i32 %v1_fbe8, { 1, 2, 0 }
  uselistorder i32 %v1_fb98, { 1, 0 }
  uselistorder i32 %v2_fb74, { 3, 0, 1, 2 }
  uselistorder i32 %v2_fb70, { 1, 0 }
  uselistorder i32 %v3_fb6c, { 1, 0 }
}

define i32 @function_fc04(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fc04:
  %v3_fc04 = load i32, i32* @r4, align 4
  %v6_fc04 = load i32, i32* @r5, align 4
  %v9_fc04 = load i32, i32* @r6, align 4
  %v12_fc04 = load i32, i32* @r7, align 4
  %v15_fc04 = load i32, i32* @r8, align 4
  %v18_fc04 = load i32, i32* @sb, align 4
  %v21_fc04 = load i32, i32* @sl, align 4
  %v24_fc04 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_fc10 = call i32 @function_11584()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32* @r4, align 4
  store i32 %v0_fc10, i32* @r6, align 4
  %v4_fc28 = call i32 @function_10114(i32 %v0_fc10, i32 ptrtoint ([3 x i8]* @global_var_15f80.202 to i32), i32 2)
  %v0_fc2c = load i32, i32* @r5, align 4
  store i32 %v0_fc2c, i32* @r0, align 4
  %v0_fc30 = load i32, i32* @r6, align 4
  store i32 %v0_fc30, i32* @global_var_207b4.203, align 4
  %v1_fc34 = trunc i32 %v0_fc2c to i16
  store i16 %v1_fc34, i16* bitcast (i32* @global_var_207b8.204 to i16*), align 4
  %v0_fc38 = call i32 @function_11584()
  %v0_fc3c = load i32, i32* @r5, align 4
  store i32 %v0_fc38, i32* @r6, align 4
  %v3_fc48 = call i32 @function_10114(i32 %v0_fc38, i32 ptrtoint (i32* @global_var_15f84.206 to i32), i32 %v0_fc3c)
  store i32 29, i32* @r0, align 4
  %v0_fc50 = load i32, i32* @r6, align 4
  store i32 %v0_fc50, i32* @global_var_207bc.207, align 4
  %v0_fc54 = load i32, i32* @r5, align 4
  %v1_fc54 = trunc i32 %v0_fc54 to i16
  store i16 %v1_fc54, i16* bitcast (i32* @global_var_207c0.208 to i16*), align 4
  %v0_fc58 = call i32 @function_11584()
  store i32 %v0_fc58, i32* @r5, align 4
  %v3_fc68 = call i32 @function_10114(i32 %v0_fc58, i32 ptrtoint (i32* @global_var_160ec.210 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_207c8.211 to i16*), align 4
  %v0_fc78 = load i32, i32* @r5, align 4
  store i32 %v0_fc78, i32* @global_var_207c4.212, align 4
  %v0_fc7c = call i32 @function_11584()
  store i32 6, i32* @sb, align 4
  store i32 %v0_fc7c, i32* @r5, align 4
  %v4_fc90 = call i32 @function_10114(i32 %v0_fc7c, i32 ptrtoint ([7 x i8]* @global_var_15f88.214 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_fc9c = load i32, i32* @r5, align 4
  store i32 %v0_fc9c, i32* @global_var_207cc.215, align 4
  %v0_fca0 = load i32, i32* @sb, align 4
  %v1_fca0 = trunc i32 %v0_fca0 to i16
  store i16 %v1_fca0, i16* bitcast (i32* @global_var_207d0.216 to i16*), align 4
  %v0_fca4 = call i32 @function_11584()
  %v0_fcac = load i32, i32* @r7, align 4
  store i32 %v0_fca4, i32* @r5, align 4
  %v4_fcb4 = call i32 @function_10114(i32 %v0_fca4, i32 ptrtoint ([8 x i8]* @global_var_15f90.218 to i32), i32 %v0_fcac)
  %v0_fcb8 = load i32, i32* @r7, align 4
  store i32 %v0_fcb8, i32* @r0, align 4
  %v0_fcbc = load i32, i32* @r5, align 4
  store i32 %v0_fcbc, i32* @global_var_207d4.219, align 4
  %v1_fcc0 = trunc i32 %v0_fcb8 to i16
  store i16 %v1_fcc0, i16* bitcast (i32* @global_var_207d8.220 to i16*), align 4
  %v0_fcc4 = call i32 @function_11584()
  %v0_fccc = load i32, i32* @r7, align 4
  store i32 %v0_fcc4, i32* @r5, align 4
  %v4_fcd4 = call i32 @function_10114(i32 %v0_fcc4, i32 ptrtoint ([8 x i8]* @global_var_15f98.222 to i32), i32 %v0_fccc)
  store i32 3, i32* @r0, align 4
  %v0_fcdc = load i32, i32* @r5, align 4
  store i32 %v0_fcdc, i32* @global_var_207dc.223, align 4
  %v0_fce0 = load i32, i32* @r7, align 4
  %v1_fce0 = trunc i32 %v0_fce0 to i16
  store i16 %v1_fce0, i16* bitcast (i32* @global_var_207e0.224 to i16*), align 4
  %v0_fce4 = call i32 @function_11584()
  store i32 %v0_fce4, i32* @r5, align 4
  %v4_fcf4 = call i32 @function_10114(i32 %v0_fce4, i32 ptrtoint ([4 x i8]* @global_var_15fa0.226 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_207e8.227 to i16*), align 4
  %v0_fd04 = load i32, i32* @r5, align 4
  store i32 %v0_fd04, i32* @global_var_207e4.228, align 4
  %v0_fd08 = call i32 @function_11584()
  store i32 %v0_fd08, i32* @r5, align 4
  %v3_fd18 = call i32 @function_10114(i32 %v0_fd08, i32 ptrtoint (i32* @global_var_15fa4.230 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_207f0.231 to i16*), align 4
  %v0_fd28 = load i32, i32* @r5, align 4
  store i32 %v0_fd28, i32* @global_var_207ec.232, align 4
  %v0_fd2c = call i32 @function_11584()
  store i32 %v0_fd2c, i32* @r5, align 4
  %v3_fd3c = call i32 @function_10114(i32 %v0_fd2c, i32 ptrtoint (i32* @global_var_15fb8.234 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_207f8.235 to i16*), align 4
  %v0_fd4c = load i32, i32* @r5, align 4
  store i32 %v0_fd4c, i32* @global_var_207f4.236, align 4
  %v0_fd50 = call i32 @function_11584()
  store i32 %v0_fd50, i32* @r5, align 4
  %v4_fd60 = call i32 @function_10114(i32 %v0_fd50, i32 ptrtoint ([10 x i8]* @global_var_15fd4.238 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_20800.239 to i16*), align 4
  %v0_fd70 = load i32, i32* @r5, align 4
  store i32 %v0_fd70, i32* @global_var_207fc.240, align 4
  %v0_fd74 = call i32 @function_11584()
  store i32 %v0_fd74, i32* @r5, align 4
  store i32 16, i32* @sl, align 4
  %v4_fd88 = call i32 @function_10114(i32 %v0_fd74, i32 ptrtoint ([17 x i8]* @global_var_15fe0.242 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_fd90 = load i32, i32* @r5, align 4
  store i32 %v0_fd90, i32* @global_var_20804.243, align 4
  %v0_fd94 = load i32, i32* @sl, align 4
  %v1_fd94 = trunc i32 %v0_fd94 to i16
  store i16 %v1_fd94, i16* bitcast (i32* @global_var_20808.244 to i16*), align 4
  %v0_fd98 = call i32 @function_11584()
  store i32 %v0_fd98, i32* @r5, align 4
  %v4_fda8 = call i32 @function_10114(i32 %v0_fd98, i32 ptrtoint ([23 x i8]* @global_var_15ff4.246 to i32), i32 22)
  %v0_fdb0 = load i32, i32* @r7, align 4
  store i32 %v0_fdb0, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_20810.247 to i16*), align 4
  %v0_fdb8 = load i32, i32* @r5, align 4
  store i32 %v0_fdb8, i32* @global_var_2080c.248, align 4
  %v0_fdbc = call i32 @function_11584()
  %v0_fdc4 = load i32, i32* @r7, align 4
  store i32 %v0_fdbc, i32* @r5, align 4
  %v4_fdcc = call i32 @function_10114(i32 %v0_fdbc, i32 ptrtoint ([8 x i8]* @global_var_1600c.250 to i32), i32 %v0_fdc4)
  store i32 5, i32* @r0, align 4
  %v0_fdd4 = load i32, i32* @r5, align 4
  store i32 %v0_fdd4, i32* @global_var_20814.251, align 4
  %v0_fdd8 = load i32, i32* @r7, align 4
  %v1_fdd8 = trunc i32 %v0_fdd8 to i16
  store i16 %v1_fdd8, i16* bitcast (i32* @global_var_20818.252 to i16*), align 4
  %v0_fddc = call i32 @function_11584()
  store i32 %v0_fddc, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_fdf0 = call i32 @function_10114(i32 %v0_fddc, i32 ptrtoint ([6 x i8]* @global_var_16014.254 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_fdf8 = load i32, i32* @r5, align 4
  store i32 %v0_fdf8, i32* @global_var_2081c.255, align 4
  %v0_fdfc = load i32, i32* @fp, align 4
  %v1_fdfc = trunc i32 %v0_fdfc to i16
  store i16 %v1_fdfc, i16* bitcast (i32* @global_var_20820.256 to i16*), align 4
  %v0_fe00 = call i32 @function_11584()
  store i32 %v0_fe00, i32* @r5, align 4
  %v4_fe10 = call i32 @function_10114(i32 %v0_fe00, i32 ptrtoint ([5 x i8]* @global_var_1601c.258 to i32), i32 4)
  %v0_fe18 = load i32, i32* @sb, align 4
  store i32 %v0_fe18, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_20828.259 to i16*), align 4
  %v0_fe20 = load i32, i32* @r5, align 4
  store i32 %v0_fe20, i32* @global_var_20824.260, align 4
  %v0_fe24 = call i32 @function_11584()
  %v0_fe2c = load i32, i32* @sb, align 4
  store i32 %v0_fe24, i32* @r5, align 4
  %v4_fe34 = call i32 @function_10114(i32 %v0_fe24, i32 ptrtoint ([7 x i8]* @global_var_16024.262 to i32), i32 %v0_fe2c)
  store i32 14, i32* @r0, align 4
  %v0_fe3c = load i32, i32* @r5, align 4
  store i32 %v0_fe3c, i32* @global_var_2082c.263, align 4
  %v0_fe40 = load i32, i32* @sb, align 4
  %v1_fe40 = trunc i32 %v0_fe40 to i16
  store i16 %v1_fe40, i16* bitcast (i32* @global_var_20830.264 to i16*), align 4
  %v0_fe44 = call i32 @function_11584()
  store i32 %v0_fe44, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_fe58 = call i32 @function_10114(i32 %v0_fe44, i32 ptrtoint ([15 x i8]* @global_var_1602c.266 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_fe60 = load i32, i32* @r5, align 4
  store i32 %v0_fe60, i32* @global_var_20834.267, align 4
  %v0_fe64 = load i32, i32* @r8, align 4
  %v1_fe64 = trunc i32 %v0_fe64 to i16
  store i16 %v1_fe64, i16* bitcast (i32* @global_var_20838.268 to i16*), align 4
  %v0_fe68 = call i32 @function_11584()
  store i32 8, i32* @r6, align 4
  store i32 %v0_fe68, i32* @r5, align 4
  %v4_fe7c = call i32 @function_10114(i32 %v0_fe68, i32 ptrtoint ([9 x i8]* @global_var_1603c.270 to i32), i32 8)
  %v0_fe80 = load i32, i32* @r7, align 4
  store i32 %v0_fe80, i32* @r0, align 4
  %v0_fe84 = load i32, i32* @r5, align 4
  store i32 %v0_fe84, i32* @global_var_20894.271, align 4
  %v0_fe88 = load i32, i32* @r6, align 4
  %v1_fe88 = trunc i32 %v0_fe88 to i16
  store i16 %v1_fe88, i16* bitcast (i32* @global_var_20898.272 to i16*), align 4
  %v0_fe8c = call i32 @function_11584()
  %v0_fe94 = load i32, i32* @r7, align 4
  store i32 %v0_fe8c, i32* @r5, align 4
  %v4_fe9c = call i32 @function_10114(i32 %v0_fe8c, i32 ptrtoint ([8 x i8]* @global_var_16048.274 to i32), i32 %v0_fe94)
  %v0_fea0 = load i32, i32* @sl, align 4
  store i32 %v0_fea0, i32* @r0, align 4
  %v0_fea4 = load i32, i32* @r5, align 4
  store i32 %v0_fea4, i32* @global_var_2089c.275, align 4
  %v0_fea8 = load i32, i32* @r7, align 4
  %v1_fea8 = trunc i32 %v0_fea8 to i16
  store i16 %v1_fea8, i16* bitcast (i32* @global_var_208a0.276 to i16*), align 4
  %v0_feac = call i32 @function_11584()
  %v0_feb4 = load i32, i32* @sl, align 4
  store i32 %v0_feac, i32* @r5, align 4
  %v4_febc = call i32 @function_10114(i32 %v0_feac, i32 ptrtoint ([17 x i8]* @global_var_16050.278 to i32), i32 %v0_feb4)
  %v0_fec0 = load i32, i32* @r6, align 4
  store i32 %v0_fec0, i32* @r0, align 4
  %v0_fec4 = load i32, i32* @r5, align 4
  store i32 %v0_fec4, i32* @global_var_2083c.279, align 4
  %v0_fec8 = load i32, i32* @sl, align 4
  %v1_fec8 = trunc i32 %v0_fec8 to i16
  store i16 %v1_fec8, i16* bitcast (i32* @global_var_20840.280 to i16*), align 4
  %v0_fecc = call i32 @function_11584()
  %v0_fed4 = load i32, i32* @r6, align 4
  store i32 %v0_fecc, i32* @r5, align 4
  %v4_fedc = call i32 @function_10114(i32 %v0_fecc, i32 ptrtoint ([9 x i8]* @global_var_16064.282 to i32), i32 %v0_fed4)
  store i32 21, i32* @r0, align 4
  %v0_fee4 = load i32, i32* @r5, align 4
  store i32 %v0_fee4, i32* @global_var_20844.283, align 4
  %v0_fee8 = load i32, i32* @r6, align 4
  %v1_fee8 = trunc i32 %v0_fee8 to i16
  store i16 %v1_fee8, i16* bitcast (i32* @global_var_20848.284 to i16*), align 4
  %v0_feec = call i32 @function_11584()
  store i32 %v0_feec, i32* @r5, align 4
  %v3_fefc = call i32 @function_10114(i32 %v0_feec, i32 ptrtoint (i32* @global_var_1610c.286 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_20850.287 to i16*), align 4
  %v0_ff0c = load i32, i32* @r5, align 4
  store i32 %v0_ff0c, i32* @global_var_2084c.288, align 4
  %v0_ff10 = call i32 @function_11584()
  store i32 %v0_ff10, i32* @r5, align 4
  %v4_ff20 = call i32 @function_10114(i32 %v0_ff10, i32 ptrtoint ([18 x i8]* @global_var_16070.290 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_20858.291 to i16*), align 4
  %v0_ff30 = load i32, i32* @r5, align 4
  store i32 %v0_ff30, i32* @global_var_20854.292, align 4
  %v0_ff34 = call i32 @function_11584()
  store i32 %v0_ff34, i32* @r5, align 4
  %v4_ff44 = call i32 @function_10114(i32 %v0_ff34, i32 ptrtoint ([13 x i8]* @global_var_16084.294 to i32), i32 12)
  %v0_ff4c = load i32, i32* @r8, align 4
  store i32 %v0_ff4c, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_20860.295 to i16*), align 4
  %v0_ff54 = load i32, i32* @r5, align 4
  store i32 %v0_ff54, i32* @global_var_2085c.296, align 4
  %v0_ff58 = call i32 @function_11584()
  %v0_ff60 = load i32, i32* @r8, align 4
  store i32 %v0_ff58, i32* @r5, align 4
  %v4_ff68 = call i32 @function_10114(i32 %v0_ff58, i32 ptrtoint ([15 x i8]* @global_var_16094.298 to i32), i32 %v0_ff60)
  store i32 19, i32* @r0, align 4
  %v0_ff70 = load i32, i32* @r5, align 4
  store i32 %v0_ff70, i32* @global_var_20864.299, align 4
  %v0_ff74 = load i32, i32* @r8, align 4
  %v1_ff74 = trunc i32 %v0_ff74 to i16
  store i16 %v1_ff74, i16* bitcast (i32* @global_var_20868.300 to i16*), align 4
  %v0_ff78 = call i32 @function_11584()
  store i32 %v0_ff78, i32* @r5, align 4
  %v4_ff88 = call i32 @function_10114(i32 %v0_ff78, i32 ptrtoint ([20 x i8]* @global_var_160a4.302 to i32), i32 19)
  %v0_ff90 = load i32, i32* @r6, align 4
  store i32 %v0_ff90, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_20870.303 to i16*), align 4
  %v0_ff98 = load i32, i32* @r5, align 4
  store i32 %v0_ff98, i32* @global_var_2086c.304, align 4
  %v0_ff9c = call i32 @function_11584()
  %v0_ffa4 = load i32, i32* @r6, align 4
  store i32 %v0_ff9c, i32* @r5, align 4
  %v4_ffac = call i32 @function_10114(i32 %v0_ff9c, i32 ptrtoint ([9 x i8]* @global_var_160b8.306 to i32), i32 %v0_ffa4)
  %v0_ffb0 = load i32, i32* @fp, align 4
  store i32 %v0_ffb0, i32* @r0, align 4
  %v0_ffb4 = load i32, i32* @r5, align 4
  store i32 %v0_ffb4, i32* @global_var_20874.307, align 4
  %v0_ffb8 = load i32, i32* @r6, align 4
  %v1_ffb8 = trunc i32 %v0_ffb8 to i16
  store i16 %v1_ffb8, i16* bitcast (i32* @global_var_20878.308 to i16*), align 4
  %v0_ffbc = call i32 @function_11584()
  %v0_ffc4 = load i32, i32* @fp, align 4
  store i32 %v0_ffbc, i32* @r5, align 4
  %v4_ffcc = call i32 @function_10114(i32 %v0_ffbc, i32 ptrtoint ([6 x i8]* @global_var_160c4.310 to i32), i32 %v0_ffc4)
  %v0_ffd0 = load i32, i32* @sb, align 4
  store i32 %v0_ffd0, i32* @r0, align 4
  %v0_ffd4 = load i32, i32* @r5, align 4
  store i32 %v0_ffd4, i32* @global_var_2087c.311, align 4
  %v0_ffd8 = load i32, i32* @fp, align 4
  %v1_ffd8 = trunc i32 %v0_ffd8 to i16
  store i16 %v1_ffd8, i16* bitcast (i32* @global_var_20880.312 to i16*), align 4
  %v0_ffdc = call i32 @function_11584()
  %v0_ffe4 = load i32, i32* @sb, align 4
  store i32 %v0_ffdc, i32* @r5, align 4
  %v4_ffec = call i32 @function_10114(i32 %v0_ffdc, i32 ptrtoint ([7 x i8]* @global_var_160cc.314 to i32), i32 %v0_ffe4)
  store i32 23, i32* @r0, align 4
  %v0_fff4 = load i32, i32* @r5, align 4
  store i32 %v0_fff4, i32* @global_var_20884.315, align 4
  %v0_fff8 = load i32, i32* @sb, align 4
  %v1_fff8 = trunc i32 %v0_fff8 to i16
  store i16 %v1_fff8, i16* bitcast (i32* @global_var_20888.316 to i16*), align 4
  %v0_fffc = call i32 @function_11584()
  %v4_1000c = call i32 @function_10114(i32 %v0_fffc, i32 ptrtoint ([24 x i8]* @global_var_160d4.318 to i32), i32 23)
  store i32 %v0_fffc, i32* @global_var_2088c.319, align 4
  store i16 23, i16* bitcast (i32* @global_var_20890.320 to i16*), align 4
  store i32 %v3_fc04, i32* @r4, align 4
  store i32 %v6_fc04, i32* @r5, align 4
  store i32 %v9_fc04, i32* @r6, align 4
  store i32 %v12_fc04, i32* @r7, align 4
  store i32 %v15_fc04, i32* @r8, align 4
  store i32 %v18_fc04, i32* @sb, align 4
  store i32 %v21_fc04, i32* @sl, align 4
  store i32 %v24_fc04, i32* @fp, align 4
  ret i32 %v4_1000c

; uselistorder directives
  uselistorder i32 %v0_ffdc, { 1, 0 }
  uselistorder i32 %v0_ffbc, { 1, 0 }
  uselistorder i32 %v0_ff9c, { 1, 0 }
  uselistorder i32 %v0_ff58, { 1, 0 }
  uselistorder i32 %v0_fecc, { 1, 0 }
  uselistorder i32 %v0_feac, { 1, 0 }
  uselistorder i32 %v0_fe8c, { 1, 0 }
  uselistorder i32 %v0_fe68, { 1, 0 }
  uselistorder i32 %v0_fe24, { 1, 0 }
  uselistorder i32 %v0_fdbc, { 1, 0 }
  uselistorder i32 %v0_fcc4, { 1, 0 }
  uselistorder i32 %v0_fca4, { 1, 0 }
  uselistorder i32 %v0_fc7c, { 1, 0 }
  uselistorder i32 %v0_fc38, { 1, 0 }
  uselistorder i32 %v0_fc10, { 1, 0 }
  uselistorder i32 23, { 0, 4, 1, 2, 3 }
  uselistorder i32 21, { 0, 5, 6, 4, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 29, { 0, 3, 4, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_10114, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_207ac.195 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_100a4(i8* %arg1) local_unnamed_addr {
dec_label_pc_100a4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_100a8 = load i8, i8* %arg1, align 1
  %v2_100ac = icmp eq i8 %v3_100a8, 0
  %v0_100b0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_100ac, i32 %v0_100b0)
  br label %dec_label_pc_100b8

dec_label_pc_100b8:                               ; preds = %dec_label_pc_100b8, %dec_label_pc_100a4
  %v0_100b8 = phi i32 [ %v1_100b8, %dec_label_pc_100b8 ], [ 0, %dec_label_pc_100a4 ]
  %v1_100b8 = add i32 %v0_100b8, 1
  %v2_100bc = add i32 %v1_100b8, %tmp
  %v3_100bc = inttoptr i32 %v2_100bc to i8*
  %v4_100bc = load i8, i8* %v3_100bc, align 1
  %v2_100c0 = icmp eq i8 %v4_100bc, 0
  br i1 %v2_100c0, label %dec_label_pc_100c8, label %dec_label_pc_100b8

dec_label_pc_100c8:                               ; preds = %dec_label_pc_100b8
  ret i32 %v1_100b8
}

define i32 @function_100cc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100cc:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_100cc = load i8, i8* %arg1, align 1
  %v3_100cc = zext i8 %v2_100cc to i32
  store i32 %v3_100cc, i32* @r2, align 4
  %v2_100d0 = icmp eq i8 %v2_100cc, 0
  br i1 %v2_100d0, label %bb, label %dec_label_pc_100dc

bb:                                               ; preds = %dec_label_pc_100cc
  store i32 %v3_100cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_100f0

dec_label_pc_100dc:                               ; preds = %dec_label_pc_100cc
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_100e0

dec_label_pc_100e0:                               ; preds = %dec_label_pc_100e0, %dec_label_pc_100dc
  %v0_100e0 = phi i32 [ %v1_100e0, %dec_label_pc_100e0 ], [ 0, %dec_label_pc_100dc ]
  %v1_100e0 = add i32 %v0_100e0, 1
  store i32 %v1_100e0, i32* %ip.global-to-local, align 4
  %v2_100e4 = add i32 %v1_100e0, %tmp
  %v3_100e4 = inttoptr i32 %v2_100e4 to i8*
  %v4_100e4 = load i8, i8* %v3_100e4, align 1
  %v2_100e8 = icmp eq i8 %v4_100e4, 0
  br i1 %v2_100e8, label %dec_label_pc_100f0, label %dec_label_pc_100e0

dec_label_pc_100f0:                               ; preds = %dec_label_pc_100e0, %bb
  %v0_100f0 = phi i32 [ %v3_100cc, %bb ], [ %v1_100e0, %dec_label_pc_100e0 ]
  br label %dec_label_pc_100fc

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100fc
  %v0_100f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_100f8 = add i32 %v0_100f8, 1
  %v2_100f8 = inttoptr i32 %v1_100f8 to i8*
  %v3_100f8 = load i8, i8* %v2_100f8, align 1
  %v4_100f8 = zext i8 %v3_100f8 to i32
  store i32 %v4_100f8, i32* @r2, align 4
  store i32 %v1_100f8, i32* %r1.global-to-local, align 4
  %v0_100fc.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_100fc

dec_label_pc_100fc:                               ; preds = %dec_label_pc_100f0, %dec_label_pc_100f8
  %v0_10104.off0 = phi i8 [ %v2_100cc, %dec_label_pc_100f0 ], [ %v3_100f8, %dec_label_pc_100f8 ]
  %v0_100fc = phi i32 [ %v0_100f0, %dec_label_pc_100f0 ], [ %v0_100fc.pr, %dec_label_pc_100f8 ]
  %v1_100fc = add i32 %v0_100fc, -1
  store i32 %v1_100fc, i32* @r3, align 4
  %v3_10100 = icmp eq i32 %v0_100fc, 0
  %v2_10104 = load i32, i32* @r0, align 4
  %v3_10104 = inttoptr i32 %v2_10104 to i8*
  store i8 %v0_10104.off0, i8* %v3_10104, align 1
  %v4_10104 = load i32, i32* @r0, align 4
  %v5_10104 = add i32 %v4_10104, 1
  store i32 %v5_10104, i32* @r0, align 4
  br i1 %v3_10100, label %dec_label_pc_1010c, label %dec_label_pc_100f8

dec_label_pc_1010c:                               ; preds = %dec_label_pc_100fc
  %v0_1010c = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_1010c

; uselistorder directives
  uselistorder i32 %v0_100fc, { 1, 0 }
  uselistorder i32 %v1_100e0, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_100fc, { 1, 0 }
}

define i32 @function_10114(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10114:
  %v2_10114 = icmp eq i32 %arg3, 0
  %v0_10118 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10114, i32 %v0_10118)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10120

dec_label_pc_10120:                               ; preds = %dec_label_pc_10120, %dec_label_pc_10114
  %v0_10120 = phi i32 [ %v1_10128, %dec_label_pc_10120 ], [ 0, %dec_label_pc_10114 ]
  %v2_10120 = add i32 %v0_10120, %arg2
  %v3_10120 = inttoptr i32 %v2_10120 to i8*
  %v4_10120 = load i8, i8* %v3_10120, align 1
  %v4_10124 = add i32 %v0_10120, %arg1
  %v5_10124 = inttoptr i32 %v4_10124 to i8*
  store i8 %v4_10120, i8* %v5_10124, align 1
  %v0_10128 = load i32, i32* @ip, align 4
  %v1_10128 = add i32 %v0_10128, 1
  store i32 %v1_10128, i32* @ip, align 4
  %v9_1012c = icmp eq i32 %v1_10128, %arg3
  br i1 %v9_1012c, label %dec_label_pc_10134, label %dec_label_pc_10120

dec_label_pc_10134:                               ; preds = %dec_label_pc_10120
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_10128, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_10138() local_unnamed_addr {
dec_label_pc_10138:
  %r2.global-to-local = alloca i32, align 4
  %v0_10138 = load i32, i32* @r1, align 4
  %v2_10138 = icmp eq i32 %v0_10138, 0
  %v0_1013c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10138, i32 %v0_1013c)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10144

dec_label_pc_10144:                               ; preds = %dec_label_pc_10144, %dec_label_pc_10138
  %v2_10148 = phi i32 [ %v1_1014c, %dec_label_pc_10144 ], [ 0, %dec_label_pc_10138 ]
  store i32 0, i32* @r3, align 4
  %v3_10148 = load i32, i32* @r0, align 4
  %v4_10148 = add i32 %v3_10148, %v2_10148
  %v5_10148 = inttoptr i32 %v4_10148 to i8*
  store i8 0, i8* %v5_10148, align 1
  %v0_1014c = load i32, i32* %r2.global-to-local, align 4
  %v1_1014c = add i32 %v0_1014c, 1
  store i32 %v1_1014c, i32* %r2.global-to-local, align 4
  %v1_10150 = load i32, i32* @r1, align 4
  %v9_10150 = icmp eq i32 %v1_1014c, %v1_10150
  br i1 %v9_10150, label %dec_label_pc_10158, label %dec_label_pc_10144

dec_label_pc_10158:                               ; preds = %dec_label_pc_10144
  %v1_10158 = load i32, i32* @r0, align 4
  ret i32 %v1_10158

; uselistorder directives
  uselistorder i32 %v1_1014c, { 1, 2, 0 }
}

define i32 @function_1015c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1015c:
  %v7_10170 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10170, label %dec_label_pc_10178, label %dec_label_pc_10180

dec_label_pc_10178:                               ; preds = %dec_label_pc_10194, %dec_label_pc_10180, %dec_label_pc_1015c, %dec_label_pc_101c0
  %storemerge = phi i32 [ %v1_101c0, %dec_label_pc_101c0 ], [ -1, %dec_label_pc_1015c ], [ -1, %dec_label_pc_10180 ], [ -1, %dec_label_pc_10194 ]
  ret i32 %storemerge

dec_label_pc_10180:                               ; preds = %dec_label_pc_1015c
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10178, label %dec_label_pc_10188

dec_label_pc_10188:                               ; preds = %dec_label_pc_10180
  br label %dec_label_pc_101a0

dec_label_pc_10194:                               ; preds = %bb, %dec_label_pc_101b4
  %v1_101a03 = phi i32 [ %v1_101b4, %dec_label_pc_101b4 ], [ 0, %bb ]
  %v1_10194 = add i32 %v0_101c0, 1
  %v9_10198 = icmp eq i32 %v1_10194, %arg2
  br i1 %v9_10198, label %dec_label_pc_10178, label %dec_label_pc_101a0

dec_label_pc_101a0:                               ; preds = %dec_label_pc_10194, %dec_label_pc_10188
  %v0_101c0 = phi i32 [ %v1_10194, %dec_label_pc_10194 ], [ 0, %dec_label_pc_10188 ]
  %v1_101a0 = phi i32 [ %v1_101a03, %dec_label_pc_10194 ], [ 0, %dec_label_pc_10188 ]
  %v2_101a0 = add i32 %v1_101a0, %arg3
  %v3_101a0 = inttoptr i32 %v2_101a0 to i8*
  %v4_101a0 = load i8, i8* %v3_101a0, align 1
  %v2_101a4 = add i32 %v0_101c0, %arg1
  %v3_101a4 = inttoptr i32 %v2_101a4 to i8*
  %v4_101a4 = load i8, i8* %v3_101a4, align 1
  %v9_101a8 = icmp eq i8 %v4_101a4, %v4_101a0
  br i1 %v9_101a8, label %dec_label_pc_101b4, label %bb

bb:                                               ; preds = %dec_label_pc_101a0
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10194

dec_label_pc_101b4:                               ; preds = %dec_label_pc_101a0
  %v1_101b4 = add i32 %v1_101a0, 1
  store i32 %v1_101b4, i32* @ip, align 4
  %v9_101b8 = icmp eq i32 %v1_101b4, %arg4
  br i1 %v9_101b8, label %dec_label_pc_101c0, label %dec_label_pc_10194

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101b4
  %v1_101c0 = add i32 %v0_101c0, 1
  br label %dec_label_pc_10178

; uselistorder directives
  uselistorder i32 %v1_101b4, { 1, 2, 0 }
  uselistorder i32 %v1_101a0, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10194, { 1, 0 }
  uselistorder label %dec_label_pc_10178, { 3, 0, 1, 2 }
}

define i32 @function_101c8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_101c8:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_101c8 = load i32, i32* @r4, align 4
  %v12_101c8 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_101d8

dec_label_pc_101d8:                               ; preds = %.thread, %dec_label_pc_101ec, %bb, %dec_label_pc_101c8
  %v0_101d8 = phi i32 [ %tmp, %dec_label_pc_101c8 ], [ %v5_101d8, %bb ], [ %v5_101d8, %dec_label_pc_101ec ], [ %v5_101d8, %.thread ]
  %v1_101d8 = inttoptr i32 %v0_101d8 to i8*
  %v2_101d8 = load i8, i8* %v1_101d8, align 1
  %v5_101d8 = add i32 %v0_101d8, 1
  store i32 %v5_101d8, i32* %r5.global-to-local, align 4
  %v7_101dc = icmp eq i8 %v2_101d8, 9
  br i1 %v7_101dc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_101d8
  br label %dec_label_pc_101d8

bb:                                               ; preds = %dec_label_pc_101d8
  %v3_101d8 = zext i8 %v2_101d8 to i32
  %v8_101e0 = icmp eq i8 %v2_101d8, 32
  store i32 %v3_101d8, i32* @r4, align 4
  br i1 %v8_101e0, label %dec_label_pc_101d8, label %dec_label_pc_101ec

dec_label_pc_101ec:                               ; preds = %bb
  %v7_101ec = icmp eq i8 %v2_101d8, 10
  br i1 %v7_101ec, label %dec_label_pc_101d8, label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101ec
  %v7_101f4 = icmp eq i8 %v2_101d8, 45
  br i1 %v7_101f4, label %dec_label_pc_102e4, label %dec_label_pc_101fc

dec_label_pc_101fc:                               ; preds = %dec_label_pc_101f4
  %v7_101fc = icmp eq i8 %v2_101d8, 43
  br i1 %v7_101fc, label %bb44, label %dec_label_pc_1020c

bb44:                                             ; preds = %dec_label_pc_101fc
  %v2_10200 = inttoptr i32 %v5_101d8 to i8*
  %v3_10200 = load i8, i8* %v2_10200, align 1
  %v4_10200 = zext i8 %v3_10200 to i32
  store i32 %v4_10200, i32* @r4, align 4
  %v6_10200 = add i32 %v0_101d8, 2
  store i32 %v6_10200, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1020c

dec_label_pc_1020c:                               ; preds = %bb44, %dec_label_pc_101fc, %dec_label_pc_102e4
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_102e4 ], [ 2147483647, %dec_label_pc_101fc ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_102e4 ], [ 0, %dec_label_pc_101fc ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10214 = call i32 @function_106fc(i32 %storemerge1, i32 %arg2)
  %v0_10218 = load i32, i32* @r7, align 4
  store i32 %v0_10218, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_10220 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10220, i32* @r1, align 4
  %v0_10224 = call i32 @function_10600()
  %v0_10234.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10234.outer

dec_label_pc_10234.outer:                         ; preds = %.thread5, %dec_label_pc_1020c
  %v2_102b0.ph = phi i32 [ %v5_102b0, %.thread5 ], [ 0, %dec_label_pc_1020c ]
  %v1_10274.ph = phi i32 [ %v4_102b4, %.thread5 ], [ %v0_10234.pre, %dec_label_pc_1020c ]
  %v1_1028c.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_1020c ]
  %v3_10280 = icmp uge i32 %v2_102b0.ph, %v0_10224
  %v9_10280 = icmp eq i32 %v2_102b0.ph, %v0_10224
  %v2_10284 = xor i1 %v3_10280, true
  %v3_10284 = or i1 %v9_10280, %v2_10284
  %v2_10288 = xor i1 %v9_10280, true
  %v3_10288 = and i1 %v3_10280, %v2_10288
  %v2_102a8 = icmp eq i1 %v9_10280, false
  br label %dec_label_pc_10234

dec_label_pc_10234:                               ; preds = %dec_label_pc_10234.outer, %dec_label_pc_102bc
  %v1_1028c = phi i32 [ -1, %dec_label_pc_102bc ], [ %v1_1028c.ph, %dec_label_pc_10234.outer ]
  %v1_10274 = phi i32 [ %v3_102bc, %dec_label_pc_102bc ], [ %v1_10274.ph, %dec_label_pc_10234.outer ]
  %v1_10234 = urem i32 %v1_10274, 256
  %v1_10238 = add nsw i32 %v1_10234, -48
  %v1_10240 = add nsw i32 %v1_10234, -97
  %v1_10244 = add i32 %v1_10274, -48
  %v1_10248 = add nsw i32 %v1_10234, -65
  %tmp75 = icmp ult i32 %v1_10238, 10
  br i1 %tmp75, label %dec_label_pc_10278, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_10234
  %v2_10250 = icmp ugt i32 %v1_10248, 24
  %v7_10250 = icmp eq i32 %v1_10248, 25
  %v2_10254 = xor i1 %v7_10250, true
  %v3_10254 = and i1 %v2_10250, %v2_10254
  br i1 %v3_10254, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_10250
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_10250, %bb45
  %v0_1026814 = phi i32 [ %v1_10244, %dec_label_pc_10250 ], [ 0, %bb45 ]
  %v2_10258 = xor i1 %v2_10250, true
  %v3_10258 = or i1 %v7_10250, %v2_10258
  br i1 %v3_10258, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_10268 = phi i32 [ %v0_1026814, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_10254, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_10260 = icmp ugt i32 %v1_10240, 24
  %v11_10260 = icmp eq i32 %v1_10240, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_10264 = phi i1 [ %v7_10250, %bb48 ], [ %v11_10260, %bb49 ]
  %v0_10264 = phi i1 [ %v2_10250, %bb48 ], [ %v6_10260, %bb49 ]
  %v2_10264 = xor i1 %v1_10264, true
  %v3_10264 = and i1 %v0_10264, %v2_10264
  br i1 %v3_10264, label %dec_label_pc_102c8, label %dec_label_pc_10268

dec_label_pc_10268:                               ; preds = %bb50
  %v2_10268 = icmp eq i32 %v0_10268, 0
  %. = select i1 %v2_10268, i32 87, i32 55
  %v2_10274 = sub i32 %v1_10274, %.
  br label %dec_label_pc_10278

dec_label_pc_10278:                               ; preds = %dec_label_pc_10234, %dec_label_pc_10268
  %v0_1028c29 = phi i32 [ %v1_10248, %dec_label_pc_10234 ], [ %., %dec_label_pc_10268 ]
  %v3_102b0 = phi i32 [ %v1_10244, %dec_label_pc_10234 ], [ %v2_10274, %dec_label_pc_10268 ]
  %v1_10278 = load i32, i32* %r6.global-to-local, align 4
  %v2_10278 = sub i32 %v3_102b0, %v1_10278
  %v4_10278 = xor i32 %v1_10278, %v3_102b0
  %v5_10278 = xor i32 %v2_10278, %v3_102b0
  %v6_10278 = and i32 %v5_10278, %v4_10278
  %v7_10278 = icmp slt i32 %v6_10278, 0
  %v8_10278 = icmp slt i32 %v2_10278, 0
  %v2_1027c = xor i1 %v8_10278, %v7_10278
  br i1 %v2_1027c, label %dec_label_pc_10280, label %dec_label_pc_102c8

dec_label_pc_10280:                               ; preds = %dec_label_pc_10278
  br i1 %v3_10284, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_10280
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_10280, %bb53
  %v0_1028c28 = phi i32 [ %v0_1028c29, %dec_label_pc_10280 ], [ 0, %bb53 ]
  br i1 %v3_10288, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_1028c = phi i32 [ %v0_1028c28, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_1028c, 0
  %v4_1028c = zext i1 %tmp76 to i32
  %v5_1028c = or i32 %v0_1028c, %v4_1028c
  %v7_1028c = icmp eq i32 %v5_1028c, 0
  br i1 %v7_1028c, label %dec_label_pc_10294, label %dec_label_pc_102bc

dec_label_pc_10294:                               ; preds = %bb56
  %v1_102a0 = load i32, i32* %r8.global-to-local, align 4
  %v2_102a0 = sub i32 %v3_102b0, %v1_102a0
  %v4_102a0 = xor i32 %v1_102a0, %v3_102b0
  %v5_102a0 = xor i32 %v2_102a0, %v3_102b0
  %v6_102a0 = and i32 %v5_102a0, %v4_102a0
  %v7_102a0 = icmp slt i32 %v6_102a0, 0
  %v8_102a0 = icmp slt i32 %v2_102a0, 0
  %v9_102a0 = icmp eq i32 %v3_102b0, %v1_102a0
  %v3_102a4 = xor i1 %v8_102a0, %v7_102a0
  %v4_102a4 = or i1 %v9_102a0, %v3_102a4
  br i1 %v4_102a4, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10294
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10294
  br i1 %v2_102a8, label %.thread5, label %dec_label_pc_102bc

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_102b0 = mul i32 %v1_10278, %v2_102b0.ph
  %v5_102b0 = add i32 %v4_102b0, %v3_102b0
  %v1_102b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_102b4 = inttoptr i32 %v1_102b4 to i8*
  %v3_102b4 = load i8, i8* %v2_102b4, align 1
  %v4_102b4 = zext i8 %v3_102b4 to i32
  %v6_102b4 = add i32 %v1_102b4, 1
  store i32 %v6_102b4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10234.outer

dec_label_pc_102bc:                               ; preds = %thread-pre-split, %bb56
  %v0_102bc = load i32, i32* %r5.global-to-local, align 4
  %v1_102bc = inttoptr i32 %v0_102bc to i8*
  %v2_102bc = load i8, i8* %v1_102bc, align 1
  %v3_102bc = zext i8 %v2_102bc to i32
  %v5_102bc = add i32 %v0_102bc, 1
  store i32 %v5_102bc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10234

dec_label_pc_102c8:                               ; preds = %dec_label_pc_10278, %bb50
  %v1_102c8 = icmp slt i32 %v1_1028c, 0
  %v0_102f4 = load i32, i32* %sl.global-to-local, align 4
  %v2_102f4 = icmp eq i32 %v0_102f4, 0
  br i1 %v1_102c8, label %dec_label_pc_102f4, label %dec_label_pc_102d0

dec_label_pc_102d0:                               ; preds = %dec_label_pc_102c8
  br i1 %v2_102f4, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_102d0
  %v2_102d4 = sub i32 0, %v2_102b0.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_102d0, %bb59
  %v1_102e0 = phi i32 [ -2147483648, %bb61 ], [ %v2_102b0.ph, %dec_label_pc_102d0 ], [ %v2_102d4, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_101c8, i32* @r4, align 4
  store i32 %v12_101c8, i32* @r7, align 4
  ret i32 %v1_102e0

dec_label_pc_102e4:                               ; preds = %dec_label_pc_101f4
  %v1_102e4 = inttoptr i32 %v5_101d8 to i8*
  %v2_102e4 = load i8, i8* %v1_102e4, align 1
  %v3_102e4 = zext i8 %v2_102e4 to i32
  store i32 %v3_102e4, i32* @r4, align 4
  %v5_102e4 = add i32 %v0_101d8, 2
  store i32 %v5_102e4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1020c

dec_label_pc_102f4:                               ; preds = %dec_label_pc_102c8
  br i1 %v2_102f4, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_102f4
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_102f4
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_102f4, { 1, 0 }
  uselistorder i32 %v2_102a0, { 1, 0 }
  uselistorder i32 %v1_102a0, { 1, 0, 2 }
  uselistorder i32 %v2_10278, { 1, 0 }
  uselistorder i32 %v3_102b0, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10250, { 1, 2, 0 }
  uselistorder i1 %v2_10250, { 1, 0, 2 }
  uselistorder i32 %v1_10234, { 1, 2, 0 }
  uselistorder i32 %v1_10274, { 1, 2, 0 }
  uselistorder i32 %v1_1028c, { 1, 0 }
  uselistorder i1 %v9_10280, { 1, 0, 2 }
  uselistorder i1 %v3_10280, { 1, 0 }
  uselistorder i32 %v2_102b0.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_10224, { 1, 0 }
  uselistorder i32 %v5_101d8, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_101d8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_101d8, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 20, 21, 5, 12, 2, 11, 3, 13, 4, 14, 10, 6, 15, 0, 16, 7, 8, 17, 9, 18, 1, 19 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 1, 2, 14, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_10278, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_10234, { 1, 0 }
  uselistorder label %dec_label_pc_1020c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_101d8, { 1, 2, 0, 3 }
}

define i32 @function_10304(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10304:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10304 = load i32, i32* @r4, align 4
  store i32 %v3_10304, i32* %stack_var_-24, align 4
  %v12_10304 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1031c

dec_label_pc_1031c:                               ; preds = %dec_label_pc_10340.dec_label_pc_1031c_crit_edge, %dec_label_pc_10304
  %v0_10320 = phi i32 [ %v0_10320.pre, %dec_label_pc_10340.dec_label_pc_1031c_crit_edge ], [ %arg3, %dec_label_pc_10304 ]
  %v1_10328 = call i32 @function_108fc(i32 %v0_10320)
  %v7_1032c = icmp eq i32 %v1_10328, 1
  %v0_10334 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_1032c, label %dec_label_pc_10334, label %dec_label_pc_1034c

dec_label_pc_10334:                               ; preds = %dec_label_pc_1031c
  %v1_10334 = add i32 %v0_10334, 1
  store i32 %v1_10334, i32* %r5.global-to-local, align 4
  %v1_10338 = load i32, i32* %r8.global-to-local, align 4
  %v6_1033c = icmp slt i32 %v1_10334, %v1_10338
  br i1 %v6_1033c, label %dec_label_pc_10340, label %.loopexit

dec_label_pc_10340:                               ; preds = %dec_label_pc_10334
  %v0_10340 = load i32, i32* %r4.global-to-local, align 4
  %v1_10340 = inttoptr i32 %v0_10340 to i8*
  %v2_10340 = load i8, i8* %v1_10340, align 1
  %v5_10340 = add i32 %v0_10340, 1
  store i32 %v5_10340, i32* %r4.global-to-local, align 4
  %v7_10344 = icmp eq i8 %v2_10340, 10
  br i1 %v7_10344, label %dec_label_pc_1034c, label %dec_label_pc_10340.dec_label_pc_1031c_crit_edge

dec_label_pc_10340.dec_label_pc_1031c_crit_edge:  ; preds = %dec_label_pc_10340
  %v0_10320.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1031c

dec_label_pc_1034c:                               ; preds = %dec_label_pc_1031c, %dec_label_pc_10340
  %v0_1034c = phi i32 [ %v1_10334, %dec_label_pc_10340 ], [ %v0_10334, %dec_label_pc_1031c ]
  %v2_1034c = icmp eq i32 %v0_1034c, 0
  br i1 %v2_1034c, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_1034c
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10334, %dec_label_pc_1034c, %bb
  %v0_10354 = load i32, i32* @r7, align 4
  %v2_10358 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10358, i32* @r4, align 4
  store i32 %v12_10304, i32* @r7, align 4
  ret i32 %v0_10354

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1034c, { 1, 0 }
}

define i32 @function_10360() local_unnamed_addr {
dec_label_pc_10360:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_10370 = call i32 @function_10f8c()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10378 = inttoptr i32 %v0_10370 to i32*
  store i32 0, i32* %v2_10378, align 4
  %v0_10384 = load i32, i32* %r4.global-to-local, align 4
  %v3_10388 = call i32 @function_1133c(i32 2, i32 2, i32 %v0_10384)
  %v7_1038c = icmp eq i32 %v3_10388, -1
  store i32 %v3_10388, i32* %r5.global-to-local, align 4
  br i1 %v7_1038c, label %bb, label %dec_label_pc_1039c

bb:                                               ; preds = %dec_label_pc_10360
  %v1_10394 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_103e8

dec_label_pc_1039c:                               ; preds = %dec_label_pc_10360
  %v2_103a8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_103a8, i32* %r4.global-to-local, align 4
  %v0_103b4 = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_103c8 = call i32 @function_11124(i32 %v3_10388, i32 %v2_103a8, i32 %v0_103b4)
  %v2_103d0 = ptrtoint i32* %stack_var_-20 to i32
  %v0_103d4 = load i32, i32* %r5.global-to-local, align 4
  %v3_103d8 = call i32 @function_1115c(i32 %v0_103d4, i32 %v2_103a8, i32 %v2_103d0)
  %v1_103e0 = call i32 @function_10b64(i32 %v0_103d4)
  br label %dec_label_pc_103e8

dec_label_pc_103e8:                               ; preds = %bb, %dec_label_pc_1039c
  %storemerge = phi i32 [ 134744072, %dec_label_pc_1039c ], [ %v1_10394, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_10388, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11124, { 7, 8, 6, 5, 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1133c, { 19, 20, 17, 18, 16, 15, 14, 13, 12, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_103e8, { 1, 0 }
}

define i32 @function_103f4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_103f4:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_103f8 = load i8, i8* %tmp, align 1
  %v2_103fc = icmp eq i8 %v3_103f8, 0
  br i1 %v2_103fc, label %bb, label %dec_label_pc_10410

bb:                                               ; preds = %dec_label_pc_103f4
  %v4_103f8 = zext i8 %v3_103f8 to i32
  br label %dec_label_pc_10424

dec_label_pc_10410:                               ; preds = %dec_label_pc_103f4
  br label %dec_label_pc_10414

dec_label_pc_10414:                               ; preds = %dec_label_pc_10414, %dec_label_pc_10410
  %v0_10414 = phi i32 [ %v1_10414, %dec_label_pc_10414 ], [ 0, %dec_label_pc_10410 ]
  %v1_10414 = add i32 %v0_10414, 1
  %v2_10418 = add i32 %v1_10414, %arg2
  %v3_10418 = inttoptr i32 %v2_10418 to i8*
  %v4_10418 = load i8, i8* %v3_10418, align 1
  %v2_1041c = icmp eq i8 %v4_10418, 0
  br i1 %v2_1041c, label %dec_label_pc_10424, label %dec_label_pc_10414

dec_label_pc_10424:                               ; preds = %dec_label_pc_10414, %bb
  %v0_1046821 = phi i32 [ %v4_103f8, %bb ], [ %v1_10414, %dec_label_pc_10414 ]
  %v0_1042c2 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_1042c2, 1
  br i1 %tmp29, label %dec_label_pc_1047c, label %dec_label_pc_10438

dec_label_pc_10438:                               ; preds = %dec_label_pc_10424, %dec_label_pc_1042c.backedge
  %v0_10430.in = phi i32 [ %v0_10430, %dec_label_pc_1042c.backedge ], [ %v0_1042c2, %dec_label_pc_10424 ]
  %v1_10444 = phi i32 [ %v1_1044415, %dec_label_pc_1042c.backedge ], [ 0, %dec_label_pc_10424 ]
  %v0_10438 = phi i32 [ %v5_10438, %dec_label_pc_1042c.backedge ], [ %tmp23, %dec_label_pc_10424 ]
  %v0_10430 = add i32 %v0_10430.in, -1
  %v1_10438 = inttoptr i32 %v0_10438 to i8*
  %v2_10438 = load i8, i8* %v1_10438, align 1
  %v3_10438 = zext i8 %v2_10438 to i32
  %v5_10438 = add i32 %v0_10438, 1
  %v1_1043c = add nsw i32 %v3_10438, -65
  %v2_10444 = add i32 %v1_10444, %arg2
  %v3_10444 = inttoptr i32 %v2_10444 to i8*
  %v4_10444 = load i8, i8* %v3_10444, align 1
  %v6_10444 = zext i8 %v4_10444 to i32
  %v1_10448 = add nsw i32 %v6_10444, -65
  %tmp38 = icmp ult i32 %v1_1043c, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10438
  %v5_1044c = or i32 %v3_10438, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10438, %bb30
  %v0_10458 = phi i32 [ %v3_10438, %dec_label_pc_10438 ], [ %v5_1044c, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10448, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10454 = or i32 %v6_10444, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10458 = phi i32 [ %v6_10444, %bb31 ], [ %v5_10454, %bb32 ]
  %v9_10458 = icmp eq i32 %v0_10458, %v1_10458
  br i1 %v9_10458, label %dec_label_pc_10464, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_1042c.backedge

dec_label_pc_1042c.backedge:                      ; preds = %bb34, %dec_label_pc_10464
  %v1_1044415 = phi i32 [ 0, %bb34 ], [ %v1_10464, %dec_label_pc_10464 ]
  %tmp35 = icmp slt i32 %v0_10430, 1
  br i1 %tmp35, label %dec_label_pc_1047c, label %dec_label_pc_10438

dec_label_pc_10464:                               ; preds = %bb33
  %v1_10464 = add i32 %v1_10444, 1
  %v9_10468 = icmp eq i32 %v0_1046821, %v1_10464
  br i1 %v9_10468, label %dec_label_pc_10470, label %dec_label_pc_1042c.backedge

dec_label_pc_10470:                               ; preds = %dec_label_pc_10464
  %v2_10470 = sub i32 %v5_10438, %tmp23
  br label %dec_label_pc_1047c

dec_label_pc_1047c:                               ; preds = %dec_label_pc_1042c.backedge, %dec_label_pc_10424, %dec_label_pc_10470
  %storemerge = phi i32 [ %v2_10470, %dec_label_pc_10470 ], [ -1, %dec_label_pc_10424 ], [ -1, %dec_label_pc_1042c.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10464, { 1, 0 }
  uselistorder i32 %v0_10438, { 1, 0 }
  uselistorder i32 %v1_10444, { 1, 0 }
  uselistorder i8 %v3_103f8, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_1047c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1042c.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10438, { 1, 0 }
}

define i32 @function_10484(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10484:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10484 = load i8, i8* %arg1, align 1
  %v2_10488 = icmp eq i8 %v2_10484, 0
  br i1 %v2_10488, label %bb, label %dec_label_pc_10494

bb:                                               ; preds = %dec_label_pc_10484
  %v3_10484 = zext i8 %v2_10484 to i32
  br label %dec_label_pc_104a8

dec_label_pc_10494:                               ; preds = %dec_label_pc_10484
  br label %dec_label_pc_10498

dec_label_pc_10498:                               ; preds = %dec_label_pc_10498, %dec_label_pc_10494
  %v0_10498 = phi i32 [ %v1_10498, %dec_label_pc_10498 ], [ 0, %dec_label_pc_10494 ]
  %v1_10498 = add i32 %v0_10498, 1
  %v2_1049c = add i32 %v1_10498, %tmp
  %v3_1049c = inttoptr i32 %v2_1049c to i8*
  %v4_1049c = load i8, i8* %v3_1049c, align 1
  %v2_104a0 = icmp eq i8 %v4_1049c, 0
  br i1 %v2_104a0, label %dec_label_pc_104a8, label %dec_label_pc_10498

dec_label_pc_104a8:                               ; preds = %dec_label_pc_10498, %bb
  %v0_104f43 = phi i32 [ %v3_10484, %bb ], [ %v1_10498, %dec_label_pc_10498 ]
  %v1_104a8 = inttoptr i32 %arg2 to i8*
  %v2_104a8 = load i8, i8* %v1_104a8, align 1
  %v3_104a8 = zext i8 %v2_104a8 to i32
  store i32 %v3_104a8, i32* @r3, align 4
  %v2_104ac = icmp eq i8 %v2_104a8, 0
  br i1 %v2_104ac, label %bb21, label %dec_label_pc_104b8

bb21:                                             ; preds = %dec_label_pc_104a8
  store i32 %v3_104a8, i32* @r2, align 4
  br label %dec_label_pc_104cc

dec_label_pc_104b8:                               ; preds = %dec_label_pc_104a8
  br label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %dec_label_pc_104bc, %dec_label_pc_104b8
  %v0_104bc = phi i32 [ %v1_104bc, %dec_label_pc_104bc ], [ 0, %dec_label_pc_104b8 ]
  %v1_104bc = add i32 %v0_104bc, 1
  store i32 %v1_104bc, i32* @r2, align 4
  %v2_104c0 = add i32 %v1_104bc, %arg2
  %v3_104c0 = inttoptr i32 %v2_104c0 to i8*
  %v4_104c0 = load i8, i8* %v3_104c0, align 1
  %v6_104c0 = zext i8 %v4_104c0 to i32
  store i32 %v6_104c0, i32* @r3, align 4
  %v2_104c4 = icmp eq i8 %v4_104c0, 0
  br i1 %v2_104c4, label %dec_label_pc_104cc, label %dec_label_pc_104bc

dec_label_pc_104cc:                               ; preds = %dec_label_pc_104bc, %bb21
  %v0_104cc = phi i32 [ %v3_104a8, %bb21 ], [ %v1_104bc, %dec_label_pc_104bc ]
  %v9_104cc = icmp eq i32 %v0_104cc, %v0_104f43
  br i1 %v9_104cc, label %dec_label_pc_104f4.preheader, label %dec_label_pc_104d4

dec_label_pc_104f4.preheader:                     ; preds = %dec_label_pc_104cc
  %v2_104f45 = icmp eq i32 %v0_104f43, 0
  br i1 %v2_104f45, label %dec_label_pc_104fc, label %dec_label_pc_104dc

dec_label_pc_104d4:                               ; preds = %dec_label_pc_104dc, %dec_label_pc_104cc
  ret i32 0

dec_label_pc_104dc:                               ; preds = %dec_label_pc_104ec, %dec_label_pc_104f4.preheader
  %v0_104f4.in = phi i32 [ %v0_104f4, %dec_label_pc_104ec ], [ %v0_104f43, %dec_label_pc_104f4.preheader ]
  %v0_104f0 = phi i32 [ %v1_104f0, %dec_label_pc_104ec ], [ %arg2, %dec_label_pc_104f4.preheader ]
  %v0_104ec = phi i32 [ %v1_104ec, %dec_label_pc_104ec ], [ %tmp, %dec_label_pc_104f4.preheader ]
  %v0_104f4 = add i32 %v0_104f4.in, -1
  %v1_104dc = inttoptr i32 %v0_104ec to i8*
  %v2_104dc = load i8, i8* %v1_104dc, align 1
  %v3_104dc = zext i8 %v2_104dc to i32
  store i32 %v3_104dc, i32* @r2, align 4
  %v1_104e0 = inttoptr i32 %v0_104f0 to i8*
  %v2_104e0 = load i8, i8* %v1_104e0, align 1
  %v3_104e0 = zext i8 %v2_104e0 to i32
  store i32 %v3_104e0, i32* @r3, align 4
  %v9_104e4 = icmp eq i8 %v2_104dc, %v2_104e0
  br i1 %v9_104e4, label %dec_label_pc_104ec, label %dec_label_pc_104d4

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104dc
  %v1_104ec = add i32 %v0_104ec, 1
  %v1_104f0 = add i32 %v0_104f0, 1
  %v2_104f4 = icmp eq i32 %v0_104f4, 0
  br i1 %v2_104f4, label %dec_label_pc_104fc, label %dec_label_pc_104dc

dec_label_pc_104fc:                               ; preds = %dec_label_pc_104ec, %dec_label_pc_104f4.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_104bc, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10484, { 1, 0 }
}

define i32 @function_10504(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10504:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_10504 = load i32, i32* @r4, align 4
  %v12_10504 = load i32, i32* @r7, align 4
  %v0_10508 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10508, i32* %r8.global-to-local, align 4
  %v2_10508 = icmp eq i32 %v0_10508, 0
  store i1 %v2_10508, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10508, label %dec_label_pc_105e8, label %dec_label_pc_10518

dec_label_pc_10518:                               ; preds = %dec_label_pc_10504
  %v3_10518 = icmp eq i8 %arg1, 0
  store i1 %v3_10518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10518, label %.thread, label %dec_label_pc_1052c

.thread:                                          ; preds = %dec_label_pc_10518
  %v4_10520 = inttoptr i32 %v0_10508 to i8*
  store i8 48, i8* %v4_10520, align 1
  %v0_10524.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10524.pr.pr, label %.thread1, label %dec_label_pc_1052c

.thread1:                                         ; preds = %.thread
  %v4_10524 = load i32, i32* %r8.global-to-local, align 4
  %v5_10524 = add i32 %v4_10524, 1
  %v6_10524 = inttoptr i32 %v5_10524 to i8*
  store i8 0, i8* %v6_10524, align 1
  %v0_10528.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10528.pr.pr, label %dec_label_pc_105e8, label %dec_label_pc_1052c

dec_label_pc_1052c:                               ; preds = %dec_label_pc_10518, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_10530 = icmp eq i32 %arg2, 10
  store i1 %v7_10530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10530, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_1052c
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_1052c
  %v4_1052c = zext i1 %tmp47 to i32
  store i32 %v4_1052c, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_105508 = sub nsw i32 0, %tmp
  %tmp.v3_105508 = select i1 %phitmp, i32 %tmp, i32 %v3_105508
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_105508, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_1055c = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_1055c, i32* @r7, align 4
  br label %dec_label_pc_10560

dec_label_pc_10560:                               ; preds = %bb45, %.thread6
  %v0_10560 = phi i32 [ %v0_10584, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_10560, i32* %r0.global-to-local, align 4
  %v0_10564 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10564, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10560, 16777216
  %v1_10568 = sdiv i32 %sext, 16777216
  %v3_10568 = call i32 @function_106fc(i32 %v1_10568, i32 %v0_10564)
  %v7_1056c = icmp eq i32 %v0_10564, 9
  store i1 %v7_1056c, i1* %cpsr_z.global-to-local, align 1
  %v1_10570 = add i32 %v0_10564, 48
  %v0_10574 = load i32, i32* @r4, align 4
  store i32 %v0_10574, i32* @r0, align 4
  %v7_10578 = icmp sgt i32 %v0_10564, 9
  %extract.t = trunc i32 %v1_10570 to i8
  br i1 %v7_10578, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_10560
  %v9_10578 = add i32 %v0_10564, 55
  %extract.t27 = trunc i32 %v9_10578 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_10560, %bb44
  %v0_10580.off0 = phi i8 [ %extract.t, %dec_label_pc_10560 ], [ %extract.t27, %bb44 ]
  %v0_1057c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1057c, i32* @r1, align 4
  %v2_10580 = load i32, i32* %r5.global-to-local, align 4
  %v3_10580 = load i32, i32* @r7, align 4
  %v4_10580 = add i32 %v3_10580, %v2_10580
  %v5_10580 = inttoptr i32 %v4_10580 to i8*
  store i8 %v0_10580.off0, i8* %v5_10580, align 1
  %v0_10584 = call i32 @function_10600()
  store i32 %v0_10584, i32* %r0.global-to-local, align 4
  store i32 %v0_10584, i32* @r4, align 4
  %v2_10588 = icmp eq i32 %v0_10584, 0
  store i1 %v2_10588, i1* %cpsr_z.global-to-local, align 1
  %v0_1058c = load i32, i32* %r5.global-to-local, align 4
  %v1_1058c = add i32 %v0_1058c, -1
  store i32 %v1_1058c, i32* %r5.global-to-local, align 4
  br i1 %v2_10588, label %dec_label_pc_10594, label %dec_label_pc_10560

dec_label_pc_10594:                               ; preds = %bb45
  %v0_10594 = load i32, i32* %sl.global-to-local, align 4
  %v2_10594 = icmp eq i32 %v0_10594, 0
  store i1 %v2_10594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10594, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10594
  %v3_10598 = ptrtoint i32* %stack_var_-32 to i32
  %v3_1059c = add i32 %v1_1058c, %v3_10598
  store i32 %v3_1059c, i32* %r2.global-to-local, align 4
  %v4_105a4 = add i32 %v3_1059c, -34
  %v5_105a4 = inttoptr i32 %v4_105a4 to i8*
  store i8 45, i8* %v5_105a4, align 1
  %v0_105a8.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_105a8.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_105a8.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10594
  %v1_105a8 = phi i32 [ %v1_1058c, %dec_label_pc_10594 ], [ %v1_105a8.pre, %.thread11 ]
  %v2_105a8 = add i32 %v1_105a8, 1
  store i32 %v2_105a8, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_105b4 = phi i32 [ %v2_105a8, %.thread12 ], [ %v1_105a8.pre, %.thread11 ]
  %v0_105ac = load i32, i32* @r7, align 4
  %v2_105ac = add i32 %v0_105ac, %v1_105b4
  %v3_105ac = inttoptr i32 %v2_105ac to i8*
  %v4_105ac = load i8, i8* %v3_105ac, align 1
  %v6_105ac = zext i8 %v4_105ac to i32
  %v2_105b0 = icmp eq i8 %v4_105ac, 0
  store i1 %v2_105b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_105ac, i32* %r2.global-to-local, align 4
  br i1 %v2_105b0, label %dec_label_pc_105f8, label %dec_label_pc_105c0.preheader

dec_label_pc_105c0.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_105c0

dec_label_pc_105c0:                               ; preds = %dec_label_pc_105c0.preheader, %dec_label_pc_105c0
  %v0_105c0 = phi i32 [ 0, %dec_label_pc_105c0.preheader ], [ %v1_105c0, %dec_label_pc_105c0 ]
  %v1_105c0 = add i32 %v0_105c0, 1
  store i32 %v1_105c0, i32* %r1.global-to-local, align 4
  %v2_105c4 = add i32 %v1_105c0, %v2_105ac
  %v3_105c4 = inttoptr i32 %v2_105c4 to i8*
  %v4_105c4 = load i8, i8* %v3_105c4, align 1
  %v2_105c8 = icmp eq i8 %v4_105c4, 0
  store i1 %v2_105c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105c8, label %dec_label_pc_105d0, label %dec_label_pc_105c0

dec_label_pc_105d0:                               ; preds = %dec_label_pc_105c0, %dec_label_pc_105f8
  %v0_105d424 = phi i32 [ %v6_105ac, %dec_label_pc_105f8 ], [ %v1_105c0, %dec_label_pc_105c0 ]
  %v0_105d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_105d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_105d4

dec_label_pc_105d4:                               ; preds = %dec_label_pc_105d4.dec_label_pc_105d4_crit_edge, %dec_label_pc_105d0
  %v2_105e0 = phi i32 [ %v5_105e0, %dec_label_pc_105d4.dec_label_pc_105d4_crit_edge ], [ %v0_105d0, %dec_label_pc_105d0 ]
  %v0_105d8 = phi i32 [ %v0_105d8.pre, %dec_label_pc_105d4.dec_label_pc_105d4_crit_edge ], [ %v2_105ac, %dec_label_pc_105d0 ]
  %v0_105d4 = phi i32 [ %v0_105d4.pre, %dec_label_pc_105d4.dec_label_pc_105d4_crit_edge ], [ %v0_105d424, %dec_label_pc_105d0 ]
  %v1_105d4 = add i32 %v0_105d4, -1
  store i32 %v1_105d4, i32* %r1.global-to-local, align 4
  %v1_105d8 = inttoptr i32 %v0_105d8 to i8*
  %v2_105d8 = load i8, i8* %v1_105d8, align 1
  %v5_105d8 = add i32 %v0_105d8, 1
  store i32 %v5_105d8, i32* %r2.global-to-local, align 4
  %v3_105dc = icmp eq i32 %v0_105d4, 0
  store i1 %v3_105dc, i1* %cpsr_z.global-to-local, align 1
  %v3_105e0 = inttoptr i32 %v2_105e0 to i8*
  store i8 %v2_105d8, i8* %v3_105e0, align 1
  %v4_105e0 = load i32, i32* %r0.global-to-local, align 4
  %v5_105e0 = add i32 %v4_105e0, 1
  store i32 %v5_105e0, i32* %r0.global-to-local, align 4
  br i1 %v3_105dc, label %dec_label_pc_105e8, label %dec_label_pc_105d4.dec_label_pc_105d4_crit_edge

dec_label_pc_105d4.dec_label_pc_105d4_crit_edge:  ; preds = %dec_label_pc_105d4
  %v0_105d4.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_105d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105d4

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105d4, %.thread1, %dec_label_pc_10504
  %v0_105e8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_105e8, i32* %r0.global-to-local, align 4
  store i32 %v3_10504, i32* @r4, align 4
  store i32 %v12_10504, i32* @r7, align 4
  ret i32 %v0_105e8

dec_label_pc_105f8:                               ; preds = %.thread11._crit_edge
  store i32 %v6_105ac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_105d0

; uselistorder directives
  uselistorder i32 %v5_105e0, { 1, 0 }
  uselistorder i1 %v3_105dc, { 1, 0 }
  uselistorder i32 %v0_105d8, { 1, 0 }
  uselistorder i32 %v1_105c0, { 0, 1, 3, 2 }
  uselistorder i32 %v6_105ac, { 1, 0 }
  uselistorder i32 %v2_105ac, { 1, 0, 2, 3 }
  uselistorder i32 %v1_105a8.pre, { 1, 0 }
  uselistorder i32 %v1_1058c, { 1, 0, 2 }
  uselistorder i32 %v0_10584, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10564, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10508, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 10, 9, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_105d0, { 1, 0 }
  uselistorder label %dec_label_pc_105c0, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_1052c, { 2, 1, 0 }
}

define i32 @function_10600() local_unnamed_addr {
dec_label_pc_10600:
  %r2.global-to-local = alloca i32, align 4
  %v0_10600 = load i32, i32* @r1, align 4
  %v1_10600 = add i32 %v0_10600, -1
  store i32 %v1_10600, i32* %r2.global-to-local, align 4
  %v2_10600 = icmp eq i32 %v0_10600, 0
  %v7_10600 = icmp eq i32 %v0_10600, 1
  %v0_10604 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10600, i32 %v0_10604)
  br i1 %v2_10600, label %dec_label_pc_106e8, label %dec_label_pc_1060c

dec_label_pc_1060c:                               ; preds = %dec_label_pc_10600
  %v0_1060c = load i32, i32* @r0, align 4
  %v1_1060c = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_1060c, %v1_1060c
  br i1 %tmp, label %dec_label_pc_10614, label %dec_label_pc_106a0

dec_label_pc_10614:                               ; preds = %dec_label_pc_1060c
  %v1_10614 = load i32, i32* %r2.global-to-local, align 4
  %v2_10614 = and i32 %v1_10614, %v1_1060c
  %v4_10614 = icmp eq i32 %v2_10614, 0
  br i1 %v4_10614, label %dec_label_pc_106ac, label %dec_label_pc_1061c

dec_label_pc_1061c:                               ; preds = %dec_label_pc_10614
  %v3_1061c = icmp ult i32 %v1_1060c, 536870912
  br i1 %v3_1061c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1061c
  %v4_10620 = mul i32 %v1_1060c, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1061c, %.thread
  %v0_10640.pr36.ph = phi i32 [ %v4_10620, %.thread ], [ %v1_1060c, %dec_label_pc_1061c ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1061c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_10640.pr36 = phi i32 [ %v4_10634, %bb81 ], [ %v0_10640.pr36.ph, %.preheader.preheader ]
  %v1_10638 = phi i32 [ %v4_10638, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_1062c = icmp ugt i32 %v0_10640.pr36, 268435455
  br i1 %v2_1062c, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10640thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_10630 = icmp ult i32 %v0_10640.pr36, %v0_1060c
  br i1 %v4_10630, label %bb80, label %dec_label_pc_10640thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_10634 = and i32 %v0_10640.pr36, 268435456
  %v3_10634 = icmp eq i32 %v2_10634, 0
  %v4_10634 = mul i32 %v0_10640.pr36, 16
  br i1 %v3_10634, label %bb81, label %dec_label_pc_10640.loopexit

bb81:                                             ; preds = %bb80
  %v2_10638 = and i32 %v1_10638, 268435456
  %v3_10638 = icmp eq i32 %v2_10638, 0
  %v4_10638 = mul i32 %v1_10638, 16
  br i1 %v3_10638, label %.preheader, label %dec_label_pc_10640thread-pre-split.loopexit.loopexit

dec_label_pc_10640thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_1064c48.ph = phi i32 [ %v1_10638, %bb ], [ %v4_10638, %bb81 ]
  %v0_10640.pr38.ph = phi i32 [ %v0_10640.pr36, %bb ], [ %v4_10634, %bb81 ]
  br label %dec_label_pc_10640thread-pre-split.loopexit

dec_label_pc_10640thread-pre-split.loopexit:      ; preds = %dec_label_pc_10640thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1064c48 = phi i32 [ %v1_10638, %.thread2 ], [ %v1_1064c48.ph, %dec_label_pc_10640thread-pre-split.loopexit.loopexit ]
  %v0_10640.pr38 = phi i32 [ %v0_10640.pr36, %.thread2 ], [ %v0_10640.pr38.ph, %dec_label_pc_10640thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10640thread-pre-split

dec_label_pc_10640thread-pre-split:               ; preds = %dec_label_pc_10640thread-pre-split.loopexit, %bb83
  %v1_1064c46 = phi i32 [ %v1_1064c48, %dec_label_pc_10640thread-pre-split.loopexit ], [ %v3_1064c, %bb83 ]
  %v0_10640.pr = phi i32 [ %v0_10640.pr38, %dec_label_pc_10640thread-pre-split.loopexit ], [ %v3_10648, %bb83 ]
  br label %dec_label_pc_10640

dec_label_pc_10640.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_10640

dec_label_pc_10640:                               ; preds = %dec_label_pc_10640.loopexit, %dec_label_pc_10640thread-pre-split
  %v1_1064c = phi i32 [ %v1_1064c46, %dec_label_pc_10640thread-pre-split ], [ %v1_10638, %dec_label_pc_10640.loopexit ]
  %v1_10648 = phi i32 [ %v0_10640.pr, %dec_label_pc_10640thread-pre-split ], [ %v4_10634, %dec_label_pc_10640.loopexit ]
  %v2_10640 = icmp slt i32 %v1_10648, 0
  br i1 %v2_10640, label %dec_label_pc_10654, label %bb82

bb82:                                             ; preds = %dec_label_pc_10640
  %v4_10644 = icmp ult i32 %v1_10648, %v0_1060c
  br i1 %v4_10644, label %bb83, label %dec_label_pc_10654

bb83:                                             ; preds = %bb82
  %v3_10648 = mul i32 %v1_10648, 2
  %v2_1064c = icmp slt i32 %v1_1064c, 0
  %v3_1064c = mul i32 %v1_1064c, 2
  br i1 %v2_1064c, label %dec_label_pc_10654, label %dec_label_pc_10640thread-pre-split

dec_label_pc_10654:                               ; preds = %bb82, %dec_label_pc_10640, %bb83
  %v2_1066059 = phi i32 [ %v3_1064c, %bb83 ], [ %v1_1064c, %bb82 ], [ %v1_1064c, %dec_label_pc_10640 ]
  %v1_1065851 = phi i32 [ %v3_10648, %bb83 ], [ %v1_10648, %bb82 ], [ %v1_10648, %dec_label_pc_10640 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10658

dec_label_pc_10658:                               ; preds = %.thread11, %dec_label_pc_10654
  %v1_1068c = phi i32 [ %v4_1068c, %.thread11 ], [ %v2_1066059, %dec_label_pc_10654 ]
  %v1_10660 = phi i32 [ %v0_10698, %.thread11 ], [ 0, %dec_label_pc_10654 ]
  %v1_10690 = phi i32 [ %v4_10690, %.thread11 ], [ %v1_1065851, %dec_label_pc_10654 ]
  %v1_1065c = phi i32 [ %v0_10688, %.thread11 ], [ %v0_1060c, %dec_label_pc_10654 ]
  %v3_10658 = icmp ult i32 %v1_1065c, %v1_10690
  br i1 %v3_10658, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10658
  %v3_1065c = sub i32 %v1_1065c, %v1_10690
  %v3_10660 = or i32 %v1_10660, %v1_1068c
  store i32 %v3_10660, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10658, %bb84
  %v1_10668 = phi i32 [ %v1_1065c, %dec_label_pc_10658 ], [ %v3_1065c, %bb84 ]
  %v1_1066c = phi i32 [ %v1_10660, %dec_label_pc_10658 ], [ %v3_10660, %bb84 ]
  %v4_10664 = udiv i32 %v1_10690, 2
  %v6_10664 = icmp ult i32 %v1_10668, %v4_10664
  br i1 %v6_10664, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10668 = urem i32 %v1_10690, 2
  %v4_10668 = icmp eq i32 %v3_10668, 0
  %v6_10668 = sub i32 %v1_10668, %v4_10664
  br i1 %v4_10668, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_1066c = udiv i32 %v1_1068c, 2
  %v6_1066c = or i32 %v1_1066c, %v5_1066c
  store i32 %v6_1066c, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10674 = phi i32 [ %v6_10668, %bb85 ], [ %v1_10668, %.thread7 ], [ %v6_10668, %bb86 ]
  %v1_10678 = phi i32 [ %v1_1066c, %bb85 ], [ %v1_1066c, %.thread7 ], [ %v6_1066c, %bb86 ]
  %v4_10670 = udiv i32 %v1_10690, 4
  %v6_10670 = icmp ult i32 %v1_10674, %v4_10670
  br i1 %v6_10670, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10674 = and i32 %v1_10690, 2
  %v4_10674 = icmp eq i32 %v3_10674, 0
  %v6_10674 = sub i32 %v1_10674, %v4_10670
  br i1 %v4_10674, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10678 = udiv i32 %v1_1068c, 4
  %v6_10678 = or i32 %v1_10678, %v5_10678
  store i32 %v6_10678, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_10680 = phi i32 [ %v6_10674, %bb87 ], [ %v1_10674, %.thread8 ], [ %v6_10674, %bb88 ]
  %v1_10684 = phi i32 [ %v1_10678, %bb87 ], [ %v1_10678, %.thread8 ], [ %v6_10678, %bb88 ]
  %v4_1067c = udiv i32 %v1_10690, 8
  %v6_1067c = icmp ult i32 %v1_10680, %v4_1067c
  br i1 %v6_1067c, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_10680 = and i32 %v1_10690, 4
  %v4_10680 = icmp eq i32 %v3_10680, 0
  %v6_10680 = sub i32 %v1_10680, %v4_1067c
  br i1 %v4_10680, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10684 = udiv i32 %v1_1068c, 8
  %v6_10684 = or i32 %v1_10684, %v5_10684
  store i32 %v6_10684, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10698 = phi i32 [ %v1_10684, %bb89 ], [ %v1_10684, %.thread9 ], [ %v6_10684, %bb90 ]
  %v0_10688 = phi i32 [ %v6_10680, %bb89 ], [ %v1_10680, %.thread9 ], [ %v6_10680, %bb90 ]
  %v2_10688 = icmp eq i32 %v0_10688, 0
  br i1 %v2_10688, label %dec_label_pc_10698, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_1068c, 16
  br i1 %tmp138, label %dec_label_pc_10698, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_1068c = udiv i32 %v1_1068c, 16
  %v4_10690 = udiv i32 %v1_10690, 16
  br label %dec_label_pc_10658

dec_label_pc_10698:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_10698

dec_label_pc_106a0:                               ; preds = %dec_label_pc_1060c
  %v9_1060c = icmp eq i32 %v0_1060c, %v1_1060c
  %. = zext i1 %v9_1060c to i32
  ret i32 %.

dec_label_pc_106ac:                               ; preds = %dec_label_pc_10614
  %v2_106ac = icmp ugt i32 %v1_1060c, 65535
  br i1 %v2_106ac, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_106ac
  %v2_106b0 = and i32 %v1_1060c, 32768
  %v3_106b0 = icmp eq i32 %v2_106b0, 0
  %v4_106b0 = udiv i32 %v1_1060c, 65536
  br i1 %v3_106b0, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_106ac
  %v0_106bc65 = phi i32 [ %v1_1060c, %dec_label_pc_106ac ], [ %v4_106b0, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_106c0 = phi i32 [ %v0_106bc65, %.thread16 ], [ %v4_106b0, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_106bc = icmp ugt i32 %v1_106c0, 255
  br i1 %v2_106bc, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_106c0 = and i32 %v1_106c0, 128
  %v3_106c0 = icmp eq i32 %v2_106c0, 0
  %v4_106c0 = udiv i32 %v1_106c0, 256
  br i1 %v3_106c0, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_106c4 = or i32 %storemerge, 8
  store i32 %v2_106c4, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_106d0 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_106c4, %bb98 ]
  %v1_106cc = phi i32 [ %v1_106c0, %bb96 ], [ %v4_106c0, %bb97 ], [ %v4_106c0, %bb98 ]
  %v2_106c8 = icmp ugt i32 %v1_106cc, 15
  br i1 %v2_106c8, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_106cc = and i32 %v1_106cc, 8
  %v3_106cc = icmp eq i32 %v2_106cc, 0
  %v4_106cc = udiv i32 %v1_106cc, 16
  br i1 %v3_106cc, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_106d0 = add nsw i32 %v1_106d0, 4
  store i32 %v2_106d0, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_106d8 = phi i32 [ %v1_106d0, %.thread17 ], [ %v1_106d0, %bb99 ], [ %v2_106d0, %bb100 ]
  %v5_106dc = phi i32 [ %v1_106cc, %.thread17 ], [ %v4_106cc, %bb99 ], [ %v4_106cc, %bb100 ]
  %v2_106d4 = icmp ugt i32 %v5_106dc, 3
  %v7_106d4 = icmp eq i32 %v5_106dc, 4
  %v2_106d8 = xor i1 %v7_106d4, true
  %v3_106d8 = and i1 %v2_106d4, %v2_106d8
  br i1 %v3_106d8, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_106d8 = add nsw i32 %v4_106d8, 3
  store i32 %v5_106d8, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_106dc = phi i32 [ %v4_106d8, %.thread18 ], [ %v5_106d8, %bb101 ]
  %v2_106dc = xor i1 %v2_106d4, true
  %v3_106dc = or i1 %v7_106d4, %v2_106dc
  br i1 %v3_106dc, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_106dc = udiv i32 %v5_106dc, 2
  %v9_106dc = add i32 %v4_106dc, %v8_106dc
  store i32 %v9_106dc, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_106e0 = phi i32 [ %v4_106dc, %bb102 ], [ %v9_106dc, %bb103 ]
  %v6_106e0 = lshr i32 %v0_1060c, %v1_106e0
  ret i32 %v6_106e0

dec_label_pc_106e8:                               ; preds = %dec_label_pc_10600
  %v0_106e8 = load i32, i32* @lr, align 4
  %v0_106ec = call i32 @function_10714()
  store i32 %v0_106e8, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_106dc, { 1, 0 }
  uselistorder i1 %v7_106d4, { 1, 0 }
  uselistorder i32 %v4_106cc, { 1, 0 }
  uselistorder i32 %v1_106cc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_106c4, { 1, 0 }
  uselistorder i32 %v4_106c0, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_106c0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_106b0, { 1, 0 }
  uselistorder i32 %v0_10688, { 1, 0 }
  uselistorder i32 %v4_1067c, { 1, 0 }
  uselistorder i32 %v1_10684, { 1, 2, 0 }
  uselistorder i32 %v4_10670, { 1, 0 }
  uselistorder i32 %v1_10678, { 1, 2, 0 }
  uselistorder i32 %v4_10664, { 1, 0 }
  uselistorder i32 %v1_1066c, { 1, 2, 0 }
  uselistorder i32 %v1_10690, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10660, { 1, 0 }
  uselistorder i32 %v1_1068c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_1064c, { 1, 0 }
  uselistorder i32 %v3_10648, { 1, 0 }
  uselistorder i32 %v1_10648, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_1064c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10638, { 1, 0 }
  uselistorder i32 %v4_10634, { 2, 1, 0 }
  uselistorder i32 %v1_10638, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10640.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_1060c, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_1060c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10600, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10698, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10654, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10640thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_106fc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_106fc:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_10700 = call i32 @function_10600()
  ret i32 %v0_10700
}

define i32 @function_10714() local_unnamed_addr {
dec_label_pc_10714:
  %v1_1071c = call i32 @function_11374(i32 8)
  ret i32 %v1_1071c
}

define i32 @function_10728() local_unnamed_addr {
dec_label_pc_10728:
  %v1_10738 = load i32, i32* @r0, align 4
  ret i32 %v1_10738
}

define i32 @function_1073c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1073c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1073c = load i32, i32* @r7, align 4
  store i32 %v3_1073c, i32* %stack_var_-8, align 4
  %v0_10748 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10748, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10748, -4095
  br i1 %tmp, label %dec_label_pc_10768, label %dec_label_pc_10758

dec_label_pc_10758:                               ; preds = %dec_label_pc_1073c
  %v0_10758 = call i32 @function_10f8c()
  %v0_1075c = load i32, i32* %r7.global-to-local, align 4
  %v1_1075c = sub i32 0, %v0_1075c
  %v2_10760 = inttoptr i32 %v0_10758 to i32*
  store i32 %v1_1075c, i32* %v2_10760, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10768.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10768

dec_label_pc_10768:                               ; preds = %dec_label_pc_1073c, %dec_label_pc_10758
  %v1_1076c = phi i32 [ %v0_10748, %dec_label_pc_1073c ], [ -1, %dec_label_pc_10758 ]
  %v2_10768 = phi i32 [ %v3_1073c, %dec_label_pc_1073c ], [ %v2_10768.pre, %dec_label_pc_10758 ]
  store i32 %v2_10768, i32* @r7, align 4
  ret i32 %v1_1076c

; uselistorder directives
  uselistorder i32 %v0_10748, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10768, { 1, 0 }
}

define i32 @function_10770(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10770:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_10770 = load i32, i32* @r2, align 4
  %v9_10770 = load i32, i32* @r3, align 4
  store i32 %v9_10770, i32* %stack_var_-4, align 4
  %v1_10780 = and i32 %arg2, 64
  %v2_10780 = icmp eq i32 %v1_10780, 0
  br i1 %v2_10780, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_10770
  %v3_10788 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_10788, i32* @r3, align 4
  %phitmp = urem i32 %v6_10770, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10770, %bb
  %v0_1078c = phi i32 [ 0, %dec_label_pc_10770 ], [ %phitmp, %bb ]
  store i32 %v0_1078c, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_107bc, label %dec_label_pc_107ac

dec_label_pc_107ac:                               ; preds = %.thread
  %v0_107ac = call i32 @function_10f8c()
  %v0_107b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_107b0 = sub i32 0, %v0_107b0
  store i32 %v1_107b0, i32* @r3, align 4
  %v2_107b4 = inttoptr i32 %v0_107ac to i32*
  store i32 %v1_107b0, i32* %v2_107b4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_107bc

dec_label_pc_107bc:                               ; preds = %.thread, %dec_label_pc_107ac
  %v0_107bc = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_107ac ]
  ret i32 %v0_107bc

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_107bc, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_107d0() local_unnamed_addr {
dec_label_pc_107d0:
  %v1_107e0 = load i32, i32* @r0, align 4
  ret i32 %v1_107e0
}

define i32 @function_107e4(i32* %arg1) local_unnamed_addr {
dec_label_pc_107e4:
  %stack_var_-16 = alloca i32, align 4
  %v2_107e8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_107f8 = call i32 @function_10964(i32 %v2_107e8, i32 0)
  %v2_107fc = load i32, i32* %stack_var_-16, align 4
  %v2_10800 = icmp eq i32* %arg1, null
  br i1 %v2_10800, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_107e4
  store i32 %v2_107fc, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_107e4, %bb
  ret i32 %v2_107fc

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_10814(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10814:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10848, label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %dec_label_pc_10814
  %v0_10838 = call i32 @function_10f8c()
  %v0_1083c = load i32, i32* %r4.global-to-local, align 4
  %v1_1083c = sub i32 0, %v0_1083c
  %v2_10840 = inttoptr i32 %v0_10838 to i32*
  store i32 %v1_1083c, i32* %v2_10840, align 4
  br label %dec_label_pc_10848

dec_label_pc_10848:                               ; preds = %dec_label_pc_10814, %dec_label_pc_10838
  %v1_10850 = phi i32 [ %arg1, %dec_label_pc_10814 ], [ -1, %dec_label_pc_10838 ]
  ret i32 %v1_10850

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10848, { 1, 0 }
}

define i32 @function_10854() local_unnamed_addr {
dec_label_pc_10854:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10854 = load i32, i32* @r7, align 4
  store i32 %v3_10854, i32* %stack_var_-8, align 4
  %v0_10860 = load i32, i32* @r0, align 4
  store i32 %v0_10860, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10860, -4095
  br i1 %tmp, label %dec_label_pc_10880, label %dec_label_pc_10870

dec_label_pc_10870:                               ; preds = %dec_label_pc_10854
  %v0_10870 = call i32 @function_10f8c()
  %v0_10874 = load i32, i32* %r7.global-to-local, align 4
  %v1_10874 = sub i32 0, %v0_10874
  %v2_10878 = inttoptr i32 %v0_10870 to i32*
  store i32 %v1_10874, i32* %v2_10878, align 4
  %v2_10880.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10880

dec_label_pc_10880:                               ; preds = %dec_label_pc_10854, %dec_label_pc_10870
  %v1_10884 = phi i32 [ %v0_10860, %dec_label_pc_10854 ], [ -1, %dec_label_pc_10870 ]
  %v2_10880 = phi i32 [ %v3_10854, %dec_label_pc_10854 ], [ %v2_10880.pre, %dec_label_pc_10870 ]
  store i32 %v2_10880, i32* @r7, align 4
  ret i32 %v1_10884

; uselistorder directives
  uselistorder i32 %v0_10860, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10880, { 1, 0 }
}

define i32 @function_10888(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10888:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_108b8, label %dec_label_pc_108a8

dec_label_pc_108a8:                               ; preds = %dec_label_pc_10888
  %v0_108a8 = call i32 @function_10f8c()
  %v0_108ac = load i32, i32* %r4.global-to-local, align 4
  %v1_108ac = sub i32 0, %v0_108ac
  %v2_108b0 = inttoptr i32 %v0_108a8 to i32*
  store i32 %v1_108ac, i32* %v2_108b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_10888, %dec_label_pc_108a8
  %v0_108b8 = phi i32 [ %arg1, %dec_label_pc_10888 ], [ -1, %dec_label_pc_108a8 ]
  ret i32 %v0_108b8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108b8, { 1, 0 }
}

define i32 @function_108c8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_108c8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108c8 = load i32, i32* @r7, align 4
  store i32 %v3_108c8, i32* %stack_var_-8, align 4
  %v0_108d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_108d4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_108d4, -4095
  br i1 %tmp, label %dec_label_pc_108f4, label %dec_label_pc_108e4

dec_label_pc_108e4:                               ; preds = %dec_label_pc_108c8
  %v0_108e4 = call i32 @function_10f8c()
  %v0_108e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_108e8 = sub i32 0, %v0_108e8
  store i32 %v1_108e8, i32* @r3, align 4
  %v2_108ec = inttoptr i32 %v0_108e4 to i32*
  store i32 %v1_108e8, i32* %v2_108ec, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_108f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_108f4

dec_label_pc_108f4:                               ; preds = %dec_label_pc_108c8, %dec_label_pc_108e4
  %v1_108f8 = phi i32 [ %v0_108d4, %dec_label_pc_108c8 ], [ -1, %dec_label_pc_108e4 ]
  %v2_108f4 = phi i32 [ %v3_108c8, %dec_label_pc_108c8 ], [ %v2_108f4.pre, %dec_label_pc_108e4 ]
  store i32 %v2_108f4, i32* @r7, align 4
  ret i32 %v1_108f8

; uselistorder directives
  uselistorder i32 %v0_108d4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108f4, { 1, 0 }
}

define i32 @function_108fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_108fc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108fc = load i32, i32* @r7, align 4
  store i32 %v3_108fc, i32* %stack_var_-8, align 4
  %v0_10908 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10908, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10908, -4095
  br i1 %tmp, label %dec_label_pc_10928, label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_108fc
  %v0_10918 = call i32 @function_10f8c()
  %v0_1091c = load i32, i32* %r7.global-to-local, align 4
  %v1_1091c = sub i32 0, %v0_1091c
  %v2_10920 = inttoptr i32 %v0_10918 to i32*
  store i32 %v1_1091c, i32* %v2_10920, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10928.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10928

dec_label_pc_10928:                               ; preds = %dec_label_pc_108fc, %dec_label_pc_10918
  %v1_1092c = phi i32 [ %v0_10908, %dec_label_pc_108fc ], [ -1, %dec_label_pc_10918 ]
  %v2_10928 = phi i32 [ %v3_108fc, %dec_label_pc_108fc ], [ %v2_10928.pre, %dec_label_pc_10918 ]
  store i32 %v2_10928, i32* @r7, align 4
  ret i32 %v1_1092c

; uselistorder directives
  uselistorder i32 %v0_10908, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10928, { 1, 0 }
}

define i32 @function_10930(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10930:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10930 = load i32, i32* @r7, align 4
  store i32 %v3_10930, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10958, label %dec_label_pc_10948

dec_label_pc_10948:                               ; preds = %dec_label_pc_10930
  %v0_10948 = call i32 @function_10f8c()
  %v0_1094c = load i32, i32* %r7.global-to-local, align 4
  %v1_1094c = sub i32 0, %v0_1094c
  %v2_10950 = inttoptr i32 %v0_10948 to i32*
  store i32 %v1_1094c, i32* %v2_10950, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1095c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10958

dec_label_pc_10958:                               ; preds = %dec_label_pc_10930, %dec_label_pc_10948
  %v2_1095c = phi i32 [ %v3_10930, %dec_label_pc_10930 ], [ %v2_1095c.pre, %dec_label_pc_10948 ]
  %v0_10958 = phi i32 [ %arg1, %dec_label_pc_10930 ], [ -1, %dec_label_pc_10948 ]
  store i32 %v2_1095c, i32* @r7, align 4
  ret i32 %v0_10958

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10958, { 1, 0 }
}

define i32 @function_10964(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10964:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10964 = load i32, i32* @r7, align 4
  store i32 %v3_10964, i32* %stack_var_-8, align 4
  %v0_10970 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10970, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10970, -4095
  br i1 %tmp, label %dec_label_pc_10990, label %dec_label_pc_10980

dec_label_pc_10980:                               ; preds = %dec_label_pc_10964
  %v0_10980 = call i32 @function_10f8c()
  %v0_10984 = load i32, i32* %r7.global-to-local, align 4
  %v1_10984 = sub i32 0, %v0_10984
  store i32 %v1_10984, i32* @r3, align 4
  %v2_10988 = inttoptr i32 %v0_10980 to i32*
  store i32 %v1_10984, i32* %v2_10988, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10990.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10990

dec_label_pc_10990:                               ; preds = %dec_label_pc_10964, %dec_label_pc_10980
  %v1_10994 = phi i32 [ %v0_10970, %dec_label_pc_10964 ], [ -1, %dec_label_pc_10980 ]
  %v2_10990 = phi i32 [ %v3_10964, %dec_label_pc_10964 ], [ %v2_10990.pre, %dec_label_pc_10980 ]
  store i32 %v2_10990, i32* @r7, align 4
  ret i32 %v1_10994

; uselistorder directives
  uselistorder i32 %v0_10970, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10990, { 1, 0 }
}

define i32 @function_10998(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10998:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10998 = load i32, i32* @r3, align 4
  store i32 %v9_10998, i32* %stack_var_-4, align 4
  %v2_109b0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_109b0, i32* @r3, align 4
  %v0_109d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109d4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109d4, -4095
  br i1 %tmp, label %dec_label_pc_109f4, label %dec_label_pc_109e4

dec_label_pc_109e4:                               ; preds = %dec_label_pc_10998
  %v0_109e4 = call i32 @function_10f8c()
  %v0_109e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_109e8 = sub i32 0, %v0_109e8
  store i32 %v1_109e8, i32* @r3, align 4
  %v2_109ec = inttoptr i32 %v0_109e4 to i32*
  store i32 %v1_109e8, i32* %v2_109ec, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_109f4

dec_label_pc_109f4:                               ; preds = %dec_label_pc_10998, %dec_label_pc_109e4
  %v1_10a00 = phi i32 [ %v0_109d4, %dec_label_pc_10998 ], [ -1, %dec_label_pc_109e4 ]
  ret i32 %v1_10a00

; uselistorder directives
  uselistorder i32 %v0_109d4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109f4, { 1, 0 }
}

define i32 @function_10a04(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a04:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10a40 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10a40, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10a40, -4095
  br i1 %tmp, label %dec_label_pc_10a60, label %dec_label_pc_10a50

dec_label_pc_10a50:                               ; preds = %dec_label_pc_10a04
  %v0_10a50 = call i32 @function_10f8c()
  %v0_10a54 = load i32, i32* %r7.global-to-local, align 4
  %v1_10a54 = sub i32 0, %v0_10a54
  %v2_10a58 = inttoptr i32 %v0_10a50 to i32*
  store i32 %v1_10a54, i32* %v2_10a58, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10a60

dec_label_pc_10a60:                               ; preds = %dec_label_pc_10a04, %dec_label_pc_10a50
  %v1_10a6c = phi i32 [ %v0_10a40, %dec_label_pc_10a04 ], [ -1, %dec_label_pc_10a50 ]
  ret i32 %v1_10a6c

; uselistorder directives
  uselistorder i32 %v0_10a40, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a60, { 1, 0 }
}

define i32 @function_10a70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10a70:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a70 = load i32, i32* @r7, align 4
  store i32 %v3_10a70, i32* %stack_var_-8, align 4
  %v0_10a7c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10a7c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10a7c, -4095
  br i1 %tmp, label %dec_label_pc_10a9c, label %dec_label_pc_10a8c

dec_label_pc_10a8c:                               ; preds = %dec_label_pc_10a70
  %v0_10a8c = call i32 @function_10f8c()
  %v0_10a90 = load i32, i32* %r7.global-to-local, align 4
  %v1_10a90 = sub i32 0, %v0_10a90
  %v2_10a94 = inttoptr i32 %v0_10a8c to i32*
  store i32 %v1_10a90, i32* %v2_10a94, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10a9c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10a9c

dec_label_pc_10a9c:                               ; preds = %dec_label_pc_10a70, %dec_label_pc_10a8c
  %v1_10aa0 = phi i32 [ %v0_10a7c, %dec_label_pc_10a70 ], [ -1, %dec_label_pc_10a8c ]
  %v2_10a9c = phi i32 [ %v3_10a70, %dec_label_pc_10a70 ], [ %v2_10a9c.pre, %dec_label_pc_10a8c ]
  store i32 %v2_10a9c, i32* @r7, align 4
  ret i32 %v1_10aa0

; uselistorder directives
  uselistorder i32 %v0_10a7c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a9c, { 1, 0 }
}

define i32 @function_10aa4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10aa4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10aa4 = load i32, i32* @r7, align 4
  store i32 %v3_10aa4, i32* %stack_var_-8, align 4
  %v0_10ab0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ab0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ab0, -4095
  br i1 %tmp, label %dec_label_pc_10ad0, label %dec_label_pc_10ac0

dec_label_pc_10ac0:                               ; preds = %dec_label_pc_10aa4
  %v0_10ac0 = call i32 @function_10f8c()
  %v0_10ac4 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ac4 = sub i32 0, %v0_10ac4
  %v2_10ac8 = inttoptr i32 %v0_10ac0 to i32*
  store i32 %v1_10ac4, i32* %v2_10ac8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10ad0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10ad0

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10aa4, %dec_label_pc_10ac0
  %v1_10ad4 = phi i32 [ %v0_10ab0, %dec_label_pc_10aa4 ], [ -1, %dec_label_pc_10ac0 ]
  %v2_10ad0 = phi i32 [ %v3_10aa4, %dec_label_pc_10aa4 ], [ %v2_10ad0.pre, %dec_label_pc_10ac0 ]
  store i32 %v2_10ad0, i32* @r7, align 4
  ret i32 %v1_10ad4

; uselistorder directives
  uselistorder i32 %v0_10ab0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ad0, { 1, 0 }
}

define i32 @function_10ad8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ad8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10ad8 = load i32, i32* @r3, align 4
  store i32 %v9_10ad8, i32* %stack_var_-4, align 4
  %v2_10ae4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10ae4, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10b18, label %dec_label_pc_10b08

dec_label_pc_10b08:                               ; preds = %dec_label_pc_10ad8
  %v0_10b08 = call i32 @function_10f8c()
  %v0_10b0c = load i32, i32* %r7.global-to-local, align 4
  %v1_10b0c = sub i32 0, %v0_10b0c
  store i32 %v1_10b0c, i32* @r3, align 4
  %v2_10b10 = inttoptr i32 %v0_10b08 to i32*
  store i32 %v1_10b0c, i32* %v2_10b10, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10b18

dec_label_pc_10b18:                               ; preds = %dec_label_pc_10ad8, %dec_label_pc_10b08
  %v0_10b18 = phi i32 [ %arg1, %dec_label_pc_10ad8 ], [ -1, %dec_label_pc_10b08 ]
  ret i32 %v0_10b18

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b18, { 1, 0 }
}

define i32 @function_10b2c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b2c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b2c = load i32, i32* @r7, align 4
  store i32 %v3_10b2c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10b58, label %dec_label_pc_10b48

dec_label_pc_10b48:                               ; preds = %dec_label_pc_10b2c
  %v0_10b48 = call i32 @function_10f8c()
  %v0_10b4c = load i32, i32* %r7.global-to-local, align 4
  %v1_10b4c = sub i32 0, %v0_10b4c
  %v2_10b50 = inttoptr i32 %v0_10b48 to i32*
  store i32 %v1_10b4c, i32* %v2_10b50, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10b5c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b58

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b2c, %dec_label_pc_10b48
  %v2_10b5c = phi i32 [ %v3_10b2c, %dec_label_pc_10b2c ], [ %v2_10b5c.pre, %dec_label_pc_10b48 ]
  %v0_10b58 = phi i32 [ %arg1, %dec_label_pc_10b2c ], [ -1, %dec_label_pc_10b48 ]
  store i32 %v2_10b5c, i32* @r7, align 4
  ret i32 %v0_10b58

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b58, { 1, 0 }
}

define i32 @function_10b64(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b64:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b64 = load i32, i32* @r7, align 4
  store i32 %v3_10b64, i32* %stack_var_-8, align 4
  %v0_10b70 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b70, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b70, -4095
  br i1 %tmp, label %dec_label_pc_10b90, label %dec_label_pc_10b80

dec_label_pc_10b80:                               ; preds = %dec_label_pc_10b64
  %v0_10b80 = call i32 @function_10f8c()
  %v0_10b84 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b84 = sub i32 0, %v0_10b84
  store i32 %v1_10b84, i32* @r3, align 4
  %v2_10b88 = inttoptr i32 %v0_10b80 to i32*
  store i32 %v1_10b84, i32* %v2_10b88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10b90.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b64, %dec_label_pc_10b80
  %v1_10b94 = phi i32 [ %v0_10b70, %dec_label_pc_10b64 ], [ -1, %dec_label_pc_10b80 ]
  %v2_10b90 = phi i32 [ %v3_10b64, %dec_label_pc_10b64 ], [ %v2_10b90.pre, %dec_label_pc_10b80 ]
  store i32 %v2_10b90, i32* @r7, align 4
  ret i32 %v1_10b94

; uselistorder directives
  uselistorder i32 %v0_10b70, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b90, { 1, 0 }
}

define i32 @function_10b98(i32* %arg1) local_unnamed_addr {
dec_label_pc_10b98:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10b98 = load i32, i32* @r4, align 4
  store i32 %v3_10b98, i32* %stack_var_-24, align 4
  %v9_10b98 = load i32, i32* @r6, align 4
  %v12_10b98 = load i32, i32* @r7, align 4
  %v15_10b98 = load i32, i32* @r8, align 4
  %v18_10b98 = load i32, i32* @lr, align 4
  %v2_10b9c = load i32, i32* %arg1, align 4
  store i32 %v2_10b9c, i32* %r4.global-to-local, align 4
  %v3_10ba4 = icmp eq i32 %v2_10b9c, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 124088, i32* @r6, align 4
  br i1 %v3_10ba4, label %dec_label_pc_10bb8, label %dec_label_pc_10bcc

dec_label_pc_10bb8:                               ; preds = %dec_label_pc_10b98
  %v0_10bb8 = call i32 @function_10f8c()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_10bc0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10bc0, i32* %r2.global-to-local, align 4
  %v2_10bc4 = inttoptr i32 %v0_10bb8 to i32*
  store i32 9, i32* %v2_10bc4, align 4
  %v0_10c6c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10c6c

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10b98
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_10bd0 = add i32 %tmp, 24
  store i32 %v1_10bd0, i32* %r4.global-to-local, align 4
  store i32 %v1_10bd0, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_10be4 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_10be4)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10bfc = load i32, i32* @r6, align 4
  %v2_10bfc = add i32 %v0_10bfc, 16
  %v3_10bfc = inttoptr i32 %v2_10bfc to i32*
  %v4_10bfc = load i32, i32* %v3_10bfc, align 4
  call void @__pseudo_branch(i32 %v4_10bfc)
  %v0_10c08 = load i32, i32* @r7, align 4
  %v1_10c08 = inttoptr i32 %v0_10c08 to i32*
  %v2_10c08 = load i32, i32* %v1_10c08, align 4
  store i32 %v2_10c08, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_10c18 = load i32, i32* @r8, align 4
  store i32 %v0_10c18, i32* %v1_10c08, align 4
  %v0_10c1c = load i32, i32* @r6, align 4
  %v1_10c1c = load i32, i32* %r3.global-to-local, align 4
  %v2_10c1c = add i32 %v1_10c1c, %v0_10c1c
  %v3_10c1c = inttoptr i32 %v2_10c1c to i32*
  %v4_10c1c = load i32, i32* %v3_10c1c, align 4
  store i32 ptrtoint (i32* @global_var_10c28.326 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10c1c)
  %v0_10c28 = load i32, i32* @r7, align 4
  %v1_10c28 = add i32 %v0_10c28, 12
  %v2_10c28 = inttoptr i32 %v1_10c28 to i32*
  %v3_10c28 = load i32, i32* %v2_10c28, align 4
  store i32 %v3_10c28, i32* @r0, align 4
  %v0_10c2c = call i32 @function_125f0()
  %v0_10c30 = load i32, i32* @r7, align 4
  store i32 %v0_10c30, i32* @r0, align 4
  %v0_10c34 = call i32 @function_125f0()
  %v0_10c3c = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_10c3c, -4095
  br i1 %tmp11, label %dec_label_pc_10c68, label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10bcc
  %v0_10c58 = call i32 @function_10f8c()
  %v0_10c5c = load i32, i32* @r4, align 4
  %v1_10c5c = sub i32 0, %v0_10c5c
  store i32 %v1_10c5c, i32* %r3.global-to-local, align 4
  %v2_10c60 = inttoptr i32 %v0_10c58 to i32*
  store i32 %v1_10c5c, i32* %v2_10c60, align 4
  %v0_10c64 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10c68

dec_label_pc_10c68:                               ; preds = %dec_label_pc_10bcc, %dec_label_pc_10c58
  %v0_10c68 = phi i32 [ %v0_10c3c, %dec_label_pc_10bcc ], [ %v0_10c64, %dec_label_pc_10c58 ]
  store i32 %v0_10c68, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10bb8, %dec_label_pc_10c68
  %v0_10c6c = phi i32 [ %v0_10c6c.pre, %dec_label_pc_10bb8 ], [ %v0_10c68, %dec_label_pc_10c68 ]
  %v2_10c74 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10c74, i32* @r4, align 4
  store i32 %v9_10b98, i32* @r6, align 4
  store i32 %v12_10b98, i32* @r7, align 4
  store i32 %v15_10b98, i32* @r8, align 4
  store i32 %v18_10b98, i32* @lr, align 4
  ret i32 %v0_10c6c

; uselistorder directives
  uselistorder i32 %v0_10c3c, { 1, 0 }
  uselistorder label %dec_label_pc_10c6c, { 1, 0 }
  uselistorder label %dec_label_pc_10c68, { 1, 0 }
}

define i32 @function_10c80(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c80:
  %v0_10c80 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10c80, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10c80
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10c80, %bb
  %v10_10c8c = phi i32 [ %arg1, %dec_label_pc_10c80 ], [ 0, %bb ]
  ret i32 %v10_10c8c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10c90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c90:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10c90 = load i32, i32* @r5, align 4
  %v9_10c90 = load i32, i32* @r6, align 4
  %v12_10c90 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10ca4 = call i32 @function_11584()
  %v2_10cac = icmp eq i32 %v0_10ca4, 0
  store i32 add (i32 ptrtoint (i32* @global_var_d800.328 to i32), i32 68792), i32* @r6, align 4
  br i1 %v2_10cac, label %bb, label %dec_label_pc_10cbc

bb:                                               ; preds = %dec_label_pc_10c90
  br label %dec_label_pc_10d48

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10c90
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10cc0 = load i32, i32* @r4, align 4
  %v2_10cc0 = icmp ugt i32 %v0_10cc0, 511
  %v2_10cc4 = add i32 %v0_10ca4, 4
  %v3_10cc4 = inttoptr i32 %v2_10cc4 to i32*
  store i32 0, i32* %v3_10cc4, align 4
  %v0_10cc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_10cc8 = add i32 %v0_10ca4, 16
  %v3_10cc8 = inttoptr i32 %v2_10cc8 to i32*
  store i32 %v0_10cc8, i32* %v3_10cc8, align 4
  %v0_10ccc = load i32, i32* %r3.global-to-local, align 4
  %v2_10ccc = add i32 %v0_10ca4, 8
  %v3_10ccc = inttoptr i32 %v2_10ccc to i32*
  store i32 %v0_10ccc, i32* %v3_10ccc, align 4
  br i1 %v2_10cc0, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10cbc
  %v0_10cd42 = load i32, i32* @r4, align 4
  %v2_10cd43 = add i32 %v0_10ca4, 20
  %v3_10cd44 = inttoptr i32 %v2_10cd43 to i32*
  store i32 %v0_10cd42, i32* %v3_10cd44, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10cbc
  %v1_10cd0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10cd0 = add i32 %v1_10cd0, 512
  store i32 %v2_10cd0, i32* %r3.global-to-local, align 4
  %v0_10cd4 = load i32, i32* @r4, align 4
  %v2_10cd4 = add i32 %v0_10ca4, 20
  %v3_10cd4 = inttoptr i32 %v2_10cd4 to i32*
  store i32 %v0_10cd4, i32* %v3_10cd4, align 4
  %v1_10cd8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10cd8, i32* %v3_10cd4, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10ca4, i32* @r5, align 4
  %v0_10ce0 = load i32, i32* @r7, align 4
  %v2_10ce0 = inttoptr i32 %v0_10ca4 to i32*
  store i32 %v0_10ce0, i32* %v2_10ce0, align 4
  %v0_10ce4 = load i32, i32* @r5, align 4
  %v1_10ce4 = add i32 %v0_10ce4, 20
  %v2_10ce4 = inttoptr i32 %v1_10ce4 to i32*
  %v3_10ce4 = load i32, i32* %v2_10ce4, align 4
  store i32 %v3_10ce4, i32* %r1.global-to-local, align 4
  %v2_10cec = call i32 @function_11ea4(i32 1, i32 %v3_10ce4)
  %v2_10cf0 = icmp eq i32 %v2_10cec, 0
  store i32 %v2_10cec, i32* @r4, align 4
  %v1_10cf8 = load i32, i32* @r5, align 4
  %v2_10cf8 = add i32 %v1_10cf8, 12
  %v3_10cf8 = inttoptr i32 %v2_10cf8 to i32*
  store i32 %v2_10cec, i32* %v3_10cf8, align 4
  br i1 %v2_10cf0, label %dec_label_pc_10d00, label %dec_label_pc_10d10

dec_label_pc_10d00:                               ; preds = %bb17
  %v0_10d00 = load i32, i32* @r5, align 4
  store i32 %v0_10d00, i32* @r0, align 4
  %v0_10d04 = call i32 @function_125f0()
  %v0_10d08 = load i32, i32* @r4, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10d10:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_10d38 = load i32, i32* @r5, align 4
  %v1_10d38 = add i32 %v0_10d38, 24
  %v1_10d3c = inttoptr i32 %v1_10d38 to i32*
  store i32 0, i32* %v1_10d3c, align 4
  %v3_10d3c = add i32 %v0_10d38, 28
  %v4_10d3c = inttoptr i32 %v3_10d3c to i32*
  %v5_10d3c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10d3c, i32* %v4_10d3c, align 4
  %v6_10d3c = add i32 %v0_10d38, 32
  %v7_10d3c = inttoptr i32 %v6_10d3c to i32*
  %v8_10d3c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10d3c, i32* %v7_10d3c, align 4
  %v9_10d3c = add i32 %v0_10d38, 36
  %v10_10d3c = inttoptr i32 %v9_10d3c to i32*
  %v11_10d3c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10d3c, i32* %v10_10d3c, align 4
  %v12_10d3c = add i32 %v0_10d38, 40
  %v2_10d40 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_10d44 = inttoptr i32 %v12_10d3c to i32*
  store i32 %v2_10d40, i32* %v1_10d44, align 4
  %v3_10d44 = add i32 %v0_10d38, 44
  %v4_10d44 = inttoptr i32 %v3_10d44 to i32*
  %v5_10d44 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10d44, i32* %v4_10d44, align 4
  %v0_10d48.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10d48:                               ; preds = %bb, %dec_label_pc_10d00, %dec_label_pc_10d10
  %v0_10d48 = phi i32 [ 0, %bb ], [ %v0_10d08, %dec_label_pc_10d00 ], [ %v0_10d48.pre, %dec_label_pc_10d10 ]
  store i32 %v6_10c90, i32* @r5, align 4
  store i32 %v9_10c90, i32* @r6, align 4
  store i32 %v12_10c90, i32* @r7, align 4
  ret i32 %v0_10d48

; uselistorder directives
  uselistorder i32 %v2_10cec, { 1, 0, 2 }
  uselistorder i32 %v0_10ca4, { 2, 1, 6, 0, 5, 3, 4, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 7, 4, 0, 5, 8, 1, 9, 2, 10, 3, 11, 6, 12 }
  uselistorder label %dec_label_pc_10d48, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10d60(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d60:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_10d60 = load i32, i32* @r7, align 4
  %v2_10d68 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_10d90, label %dec_label_pc_10d80

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10d60
  %v0_10d80 = call i32 @function_10f8c()
  %v0_10d84 = load i32, i32* @r7, align 4
  %v1_10d84 = sub i32 0, %v0_10d84
  %v2_10d88 = inttoptr i32 %v0_10d80 to i32*
  store i32 %v1_10d84, i32* %v2_10d88, align 4
  br label %dec_label_pc_10db4

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d60
  %v1_10d90 = icmp slt i32 %arg1, 0
  br i1 %v1_10d90, label %dec_label_pc_10db4, label %dec_label_pc_10d98

dec_label_pc_10d98:                               ; preds = %dec_label_pc_10d90
  store i32 %v2_10d68, i32* @r1, align 4
  %v0_10d9c = call i32 @function_13aa0()
  %v1_10da0 = icmp slt i32 %v0_10d9c, 0
  br i1 %v1_10da0, label %dec_label_pc_10da8, label %dec_label_pc_10dbc

dec_label_pc_10da8:                               ; preds = %dec_label_pc_10d98
  br label %dec_label_pc_10db4

dec_label_pc_10db4:                               ; preds = %dec_label_pc_10da8, %dec_label_pc_10d90, %dec_label_pc_10d80
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10df8

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10d98
  %v0_10dc4 = load i32, i32* @r7, align 4
  %v3_10dc8 = call i32 @function_10a04(i32 %v0_10dc4, i32 2, i32 1)
  %v0_10dcc = load i32, i32* @r7, align 4
  %v2_10dd4 = call i32 @function_10c90(i32 %v0_10dcc, i32 %tmp)
  store i32 %v2_10dd4, i32* %r4.global-to-local, align 4
  %v2_10dd8 = icmp eq i32 %v2_10dd4, 0
  br i1 %v2_10dd8, label %dec_label_pc_10de0, label %dec_label_pc_10df8

dec_label_pc_10de0:                               ; preds = %dec_label_pc_10dbc
  %v0_10dec = call i32 @function_10f8c()
  %v2_10df4 = inttoptr i32 %v0_10dec to i32*
  store i32 12, i32* %v2_10df4, align 4
  %v0_10df8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10df8

dec_label_pc_10df8:                               ; preds = %dec_label_pc_10dbc, %dec_label_pc_10db4, %dec_label_pc_10de0
  %v0_10df8 = phi i32 [ %v2_10dd4, %dec_label_pc_10dbc ], [ 0, %dec_label_pc_10db4 ], [ %v0_10df8.pre, %dec_label_pc_10de0 ]
  store i32 %v6_10d60, i32* @r7, align 4
  ret i32 %v0_10df8

; uselistorder directives
  uselistorder i32* %r4.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10df8, { 2, 0, 1 }
}

define i32 @function_10e08(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e08:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_10e08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10e08, label %bb, label %dec_label_pc_10e08._crit_edge

dec_label_pc_10e08._crit_edge:                    ; preds = %dec_label_pc_10e08
  br label %bb11

bb:                                               ; preds = %dec_label_pc_10e08
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_10e08._crit_edge, %bb
  %v2_10e10 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_10e10, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10e1c = call i32 @function_13aa0()
  store i32 %v0_10e1c, i32* @r5, align 4
  %v2_10e20 = icmp eq i32 %v0_10e1c, 0
  br i1 %v2_10e20, label %dec_label_pc_10e28, label %dec_label_pc_10e90

dec_label_pc_10e28:                               ; preds = %bb11
  %v1_10e2c = and i32 %tmp5, ptrtoint (i32* @global_var_f000.337 to i32)
  store i32 %v1_10e2c, i32* @r3, align 4
  %v7_10e30 = icmp eq i32 %v1_10e2c, 16384
  br i1 %v7_10e30, label %dec_label_pc_10e48, label %dec_label_pc_10e38

dec_label_pc_10e38:                               ; preds = %dec_label_pc_10e28
  %v0_10e38 = call i32 @function_10f8c()
  br label %dec_label_pc_10e74

dec_label_pc_10e48:                               ; preds = %dec_label_pc_10e28
  %v0_10e48 = load i32, i32* @r4, align 4
  %v2_10e50 = call i32 @function_10998(i32 %v0_10e48, i32 3)
  %v7_10e54 = icmp eq i32 %v2_10e50, -1
  br i1 %v7_10e54, label %dec_label_pc_10e90, label %dec_label_pc_10e5c

dec_label_pc_10e5c:                               ; preds = %dec_label_pc_10e48
  %v1_10e5c = urem i32 %v2_10e50, 4
  %v7_10e60 = icmp eq i32 %v1_10e5c, 1
  br i1 %v7_10e60, label %dec_label_pc_10e68, label %dec_label_pc_10e7c

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10e5c
  %v0_10e68 = call i32 @function_10f8c()
  br label %dec_label_pc_10e74

dec_label_pc_10e74:                               ; preds = %dec_label_pc_10e38, %dec_label_pc_10e68
  %storemerge2 = phi i32 [ %v0_10e38, %dec_label_pc_10e38 ], [ %v0_10e68, %dec_label_pc_10e68 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_10e38 ], [ 22, %dec_label_pc_10e68 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_10e74 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_10e74, align 4
  %v0_10e94.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e94

dec_label_pc_10e7c:                               ; preds = %dec_label_pc_10e5c
  %v0_10e7c = load i32, i32* @r4, align 4
  %v2_10e84 = call i32 @function_10c90(i32 %v0_10e7c, i32 %tmp)
  store i32 %v2_10e84, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e94

dec_label_pc_10e90:                               ; preds = %bb11, %dec_label_pc_10e48
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e94

dec_label_pc_10e94:                               ; preds = %dec_label_pc_10e7c, %dec_label_pc_10e74, %dec_label_pc_10e90
  %v0_10e94 = phi i32 [ %v2_10e84, %dec_label_pc_10e7c ], [ %v0_10e94.pre, %dec_label_pc_10e74 ], [ 0, %dec_label_pc_10e90 ]
  ret i32 %v0_10e94

; uselistorder directives
  uselistorder i32 %v2_10e50, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10c90, { 1, 0 }
  uselistorder i32 ()* @function_13aa0, { 1, 0 }
  uselistorder label %dec_label_pc_10e94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e90, { 1, 0 }
  uselistorder label %dec_label_pc_10e74, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_10ea4(i32* %arg1) local_unnamed_addr {
dec_label_pc_10ea4:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10ea4 = load i32, i32* @r4, align 4
  %v6_10ea4 = load i32, i32* @r5, align 4
  %v9_10ea4 = load i32, i32* @r6, align 4
  %v12_10ea4 = load i32, i32* @r7, align 4
  %v15_10ea4 = load i32, i32* @lr, align 4
  store i32 124088, i32* @r6, align 4
  %v1_10eb8 = add i32 %tmp, 24
  store i32 %v1_10eb8, i32* @r4, align 4
  %v4_10ebc = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_10ebc, i32* %r1.global-to-local, align 4
  store i32 %v1_10eb8, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_10ed0 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_10ed0)
  %v0_10ee4 = load i32, i32* @r6, align 4
  %v2_10ee4 = add i32 %v0_10ee4, 16
  %v3_10ee4 = inttoptr i32 %v2_10ee4 to i32*
  %v4_10ee4 = load i32, i32* %v3_10ee4, align 4
  store i32 %v4_10ee4, i32* @ip, align 4
  store i32 69360, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10ee4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_10ef4

dec_label_pc_10ef4:                               ; preds = %dec_label_pc_10f24, %dec_label_pc_10ea4
  %v0_10ef4 = load i32, i32* @r5, align 4
  %v1_10ef4 = add i32 %v0_10ef4, 4
  %v2_10ef4 = inttoptr i32 %v1_10ef4 to i32*
  %v3_10ef4 = load i32, i32* %v2_10ef4, align 4
  store i32 %v3_10ef4, i32* %r2.global-to-local, align 4
  %v4_10ef4 = add i32 %v0_10ef4, 8
  %v5_10ef4 = inttoptr i32 %v4_10ef4 to i32*
  %v6_10ef4 = load i32, i32* %v5_10ef4, align 4
  %tmp10 = icmp ugt i32 %v6_10ef4, %v3_10ef4
  br i1 %tmp10, label %dec_label_pc_10f24, label %dec_label_pc_10f00

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ef4
  %v1_10f00 = inttoptr i32 %v0_10ef4 to i32*
  %v2_10f00 = load i32, i32* %v1_10f00, align 4
  %v1_10f04 = add i32 %v0_10ef4, 12
  %v2_10f04 = inttoptr i32 %v1_10f04 to i32*
  %v3_10f04 = load i32, i32* %v2_10f04, align 4
  store i32 %v3_10f04, i32* %r1.global-to-local, align 4
  %v1_10f08 = add i32 %v0_10ef4, 20
  %v2_10f08 = inttoptr i32 %v1_10f08 to i32*
  %v3_10f08 = load i32, i32* %v2_10f08, align 4
  store i32 %v3_10f08, i32* %r2.global-to-local, align 4
  %v4_10f0c = call i32 @function_13a0c(i32 %v2_10f00, i32 %v3_10f04, i32 %v3_10f08, i32 %v6_10ef4)
  %tmp9 = icmp slt i32 %v4_10f0c, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_10f1c

.thread:                                          ; preds = %dec_label_pc_10f00
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_10f50

dec_label_pc_10f1c:                               ; preds = %dec_label_pc_10f00
  %v1_10f1c = load i32, i32* @r5, align 4
  %v2_10f1c = add i32 %v1_10f1c, 8
  %v3_10f1c = inttoptr i32 %v2_10f1c to i32*
  store i32 %v4_10f0c, i32* %v3_10f1c, align 4
  %v0_10f20 = load i32, i32* @r7, align 4
  %v1_10f20 = load i32, i32* @r5, align 4
  %v2_10f20 = add i32 %v1_10f20, 4
  %v3_10f20 = inttoptr i32 %v2_10f20 to i32*
  store i32 %v0_10f20, i32* %v3_10f20, align 4
  %v0_10f24.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10f24

dec_label_pc_10f24:                               ; preds = %dec_label_pc_10ef4, %dec_label_pc_10f1c
  %v1_10f34 = phi i32 [ %v0_10ef4, %dec_label_pc_10ef4 ], [ %v0_10f24.pre, %dec_label_pc_10f1c ]
  %v1_10f24 = add i32 %v1_10f34, 4
  %v2_10f24 = inttoptr i32 %v1_10f24 to i32*
  %v3_10f24 = load i32, i32* %v2_10f24, align 4
  store i32 %v3_10f24, i32* %r2.global-to-local, align 4
  %v1_10f28 = add i32 %v1_10f34, 12
  %v2_10f28 = inttoptr i32 %v1_10f28 to i32*
  %v3_10f28 = load i32, i32* %v2_10f28, align 4
  store i32 %v3_10f28, i32* %r1.global-to-local, align 4
  %v2_10f2c = add i32 %v3_10f28, %v3_10f24
  store i32 %v2_10f2c, i32* @r4, align 4
  %v1_10f30 = add i32 %v2_10f2c, 4
  %v2_10f30 = inttoptr i32 %v1_10f30 to i32*
  %v3_10f30 = load i32, i32* %v2_10f30, align 4
  %v2_10f34 = add i32 %v1_10f34, 16
  %v3_10f34 = inttoptr i32 %v2_10f34 to i32*
  store i32 %v3_10f30, i32* %v3_10f34, align 4
  %v0_10f38 = load i32, i32* @r4, align 4
  %v1_10f38 = add i32 %v0_10f38, 8
  %v2_10f38 = inttoptr i32 %v1_10f38 to i16*
  %v3_10f38 = load i16, i16* %v2_10f38, align 2
  %v4_10f38 = zext i16 %v3_10f38 to i32
  %v0_10f3c = load i32, i32* %r2.global-to-local, align 4
  %v1_10f3c = load i32, i32* %r1.global-to-local, align 4
  %v2_10f3c = add i32 %v1_10f3c, %v0_10f3c
  %v3_10f3c = inttoptr i32 %v2_10f3c to i32*
  %v4_10f3c = load i32, i32* %v3_10f3c, align 4
  store i32 %v4_10f3c, i32* %r1.global-to-local, align 4
  %v2_10f40 = add i32 %v0_10f3c, %v4_10f38
  %v2_10f44 = icmp eq i32 %v4_10f3c, 0
  %v1_10f48 = load i32, i32* @r5, align 4
  %v2_10f48 = add i32 %v1_10f48, 4
  %v3_10f48 = inttoptr i32 %v2_10f48 to i32*
  store i32 %v2_10f40, i32* %v3_10f48, align 4
  br i1 %v2_10f44, label %dec_label_pc_10ef4, label %dec_label_pc_10f50

dec_label_pc_10f50:                               ; preds = %dec_label_pc_10f24, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_10f5c = load i32, i32* @r6, align 4
  %v2_10f5c = add i32 %v0_10f5c, 24
  %v3_10f5c = inttoptr i32 %v2_10f5c to i32*
  %v4_10f5c = load i32, i32* %v3_10f5c, align 4
  call void @__pseudo_branch(i32 %v4_10f5c)
  %v0_10f68 = load i32, i32* @r4, align 4
  store i32 %v3_10ea4, i32* @r4, align 4
  store i32 %v6_10ea4, i32* @r5, align 4
  store i32 %v9_10ea4, i32* @r6, align 4
  store i32 %v12_10ea4, i32* @r7, align 4
  store i32 %v15_10ea4, i32* @lr, align 4
  ret i32 %v0_10f68

; uselistorder directives
  uselistorder i32 %v1_10f34, { 0, 2, 1 }
  uselistorder i32 %v6_10ef4, { 1, 0 }
  uselistorder i32 %v0_10ef4, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_10f24, { 1, 0 }
}

define i32 @function_10f7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10f7c:
  %v0_10f7c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10f7c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10f7c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10f7c, %bb
  %v10_10f88 = phi i32 [ %arg1, %dec_label_pc_10f7c ], [ 0, %bb ]
  ret i32 %v10_10f88

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10f8c() local_unnamed_addr {
dec_label_pc_10f8c:
  store i32 124088, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1e76c.345 to i32)
}

define i32 @function_10fa8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10fa8:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_10fac = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10fac, i32* @r0, align 4
  %v1_10fb4 = call i32 @function_13e7c(i32 %v2_10fac)
  %v2_10fb8 = load i32, i32* %stack_var_-24, align 4
  %v2_10fbc = add i32 %v2_10fb8, %tmp
  %v2_10fc4 = mul i32 %v2_10fbc, 10000
  %v1_10fc8 = and i32 %v2_10fc4, 2147483632
  ret i32 %v1_10fc8

; uselistorder directives
  uselistorder i32 %v2_10fac, { 1, 0 }
}

define i32 @function_10fd8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10fd8:
  %v0_10fd8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10fd8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10fd8
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10fd8, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10fe0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10fe0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_10fe4 = load i32, i32* @r2, align 4
  %v8_10fe4 = icmp eq i32 %v0_10fe4, 8
  store i1 %v8_10fe4, i1* %cpsr_z.global-to-local, align 1
  %v5_10fe8 = icmp slt i32 %v0_10fe4, 8
  br i1 %v5_10fe8, label %dec_label_pc_11048, label %dec_label_pc_10fec

dec_label_pc_10fec:                               ; preds = %dec_label_pc_10fe0
  %v4_10fec = mul i32 %arg2, 256
  %v5_10fec = or i32 %v4_10fec, %arg2
  %v4_10ff0 = mul i32 %v5_10fec, 65536
  %v5_10ff0 = or i32 %v4_10ff0, %v5_10fec
  store i32 %v5_10ff0, i32* %r1.global-to-local, align 4
  %v1_10ff457 = urem i32 %tmp, 4
  %v2_10ff458 = icmp eq i32 %v1_10ff457, 0
  store i1 %v2_10ff458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_10ff458, label %dec_label_pc_11004, label %bb

bb:                                               ; preds = %dec_label_pc_10fec, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_10fec ]
  %v3_10ff859 = phi i32 [ %v6_10ff8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_10fec ]
  %v4_10ff8 = inttoptr i32 %v3_10ff859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10ff8, align 1
  %v5_10ff8 = load i32, i32* @r3, align 4
  %v6_10ff8 = add i32 %v5_10ff8, 1
  store i32 %v6_10ff8, i32* @r3, align 4
  %v0_10ffc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11008.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_10ffc.pr, label %dec_label_pc_11004, label %.thread

.thread:                                          ; preds = %bb
  %v2_10ffc = add i32 %v0_11008.pr.pre, -1
  store i32 %v2_10ffc, i32* @r2, align 4
  %v1_10ff4 = urem i32 %v6_10ff8, 4
  %v2_10ff4 = icmp eq i32 %v1_10ff4, 0
  store i1 %v2_10ff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ff4, label %dec_label_pc_11004, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10ff8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_10ff8.pre to i8
  br label %bb

dec_label_pc_11004:                               ; preds = %.thread, %bb, %dec_label_pc_10fec
  %v0_1101028 = phi i32 [ %tmp, %dec_label_pc_10fec ], [ %v6_10ff8, %bb ], [ %v6_10ff8, %.thread ]
  %v0_11008.pr = phi i32 [ %v0_10fe4, %dec_label_pc_10fec ], [ %v0_11008.pr.pre, %bb ], [ %v2_10ffc, %.thread ]
  %v0_11004 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11004, i32* @ip, align 4
  %v8_1100810 = icmp eq i32 %v0_11008.pr, 8
  store i1 %v8_1100810, i1* %cpsr_z.global-to-local, align 1
  %v5_1100c11 = icmp slt i32 %v0_11008.pr, 8
  br i1 %v5_1100c11, label %dec_label_pc_11048, label %dec_label_pc_11010.preheader

dec_label_pc_11010.preheader:                     ; preds = %dec_label_pc_11004
  %v1_1101046 = inttoptr i32 %v0_1101028 to i32*
  store i32 %v0_11004, i32* %v1_1101046, align 4
  %v3_1101047 = add i32 %v0_1101028, 4
  %v4_1101048 = inttoptr i32 %v3_1101047 to i32*
  %v5_1101049 = load i32, i32* @ip, align 4
  store i32 %v5_1101049, i32* %v4_1101048, align 4
  %v6_1101050 = add i32 %v0_1101028, 8
  store i32 %v6_1101050, i32* @r3, align 4
  %v0_1101451 = load i32, i32* @r2, align 4
  %v1_1101452 = add i32 %v0_1101451, -8
  store i32 %v1_1101452, i32* %r2.global-to-local, align 4
  %v5_1101c53 = icmp slt i32 %v1_1101452, 8
  br i1 %v5_1101c53, label %dec_label_pc_11010.dec_label_pc_11048.loopexit_crit_edge, label %dec_label_pc_11020

dec_label_pc_11020:                               ; preds = %dec_label_pc_11010.preheader, %dec_label_pc_11008.dec_label_pc_11010_crit_edge
  %v6_1101055 = phi i32 [ %v6_11010, %dec_label_pc_11008.dec_label_pc_11010_crit_edge ], [ %v6_1101050, %dec_label_pc_11010.preheader ]
  %v0_1101054 = phi i32 [ %v12_1103c, %dec_label_pc_11008.dec_label_pc_11010_crit_edge ], [ %v0_1101028, %dec_label_pc_11010.preheader ]
  %v1_11020 = inttoptr i32 %v6_1101055 to i32*
  %v2_11020 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11020, i32* %v1_11020, align 4
  %v3_11020 = add i32 %v0_1101054, 12
  %v4_11020 = inttoptr i32 %v3_11020 to i32*
  %v5_11020 = load i32, i32* @ip, align 4
  store i32 %v5_11020, i32* %v4_11020, align 4
  %v6_11020 = add i32 %v0_1101054, 16
  store i32 %v6_11020, i32* @r3, align 4
  %v0_11024 = load i32, i32* %r2.global-to-local, align 4
  %v1_11024 = add i32 %v0_11024, -8
  store i32 %v1_11024, i32* %r2.global-to-local, align 4
  %v5_1102c = icmp slt i32 %v1_11024, 8
  br i1 %v5_1102c, label %dec_label_pc_11020.dec_label_pc_11048.loopexit_crit_edge, label %dec_label_pc_11030

dec_label_pc_11030:                               ; preds = %dec_label_pc_11020
  %v1_11030 = inttoptr i32 %v6_11020 to i32*
  %v2_11030 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11030, i32* %v1_11030, align 4
  %v3_11030 = add i32 %v0_1101054, 20
  %v4_11030 = inttoptr i32 %v3_11030 to i32*
  %v5_11030 = load i32, i32* @ip, align 4
  store i32 %v5_11030, i32* %v4_11030, align 4
  %v6_11030 = add i32 %v0_1101054, 24
  store i32 %v6_11030, i32* @r3, align 4
  %v0_11034 = load i32, i32* %r2.global-to-local, align 4
  %v1_11034 = add i32 %v0_11034, -8
  store i32 %v1_11034, i32* %r2.global-to-local, align 4
  %v5_1103c = icmp slt i32 %v1_11034, 8
  br i1 %v5_1103c, label %dec_label_pc_11030.dec_label_pc_11048.loopexit_crit_edge, label %dec_label_pc_11008

dec_label_pc_11008:                               ; preds = %dec_label_pc_11030
  %v7_1103c = inttoptr i32 %v6_11030 to i32*
  %v8_1103c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1103c, i32* %v7_1103c, align 4
  %v9_1103c = add i32 %v0_1101054, 28
  %v10_1103c = inttoptr i32 %v9_1103c to i32*
  %v11_1103c = load i32, i32* @ip, align 4
  store i32 %v11_1103c, i32* %v10_1103c, align 4
  %v12_1103c = add i32 %v0_1101054, 32
  store i32 %v12_1103c, i32* @r3, align 4
  %v6_11040 = load i32, i32* %r2.global-to-local, align 4
  %v7_11040 = add i32 %v6_11040, -8
  store i32 %v7_11040, i32* %r2.global-to-local, align 4
  %v5_1100c = icmp slt i32 %v7_11040, 8
  br i1 %v5_1100c, label %dec_label_pc_11008.dec_label_pc_11048.loopexit_crit_edge, label %dec_label_pc_11008.dec_label_pc_11010_crit_edge

dec_label_pc_11008.dec_label_pc_11010_crit_edge:  ; preds = %dec_label_pc_11008
  %v2_11010.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11010 = inttoptr i32 %v12_1103c to i32*
  store i32 %v2_11010.pre, i32* %v1_11010, align 4
  %v3_11010 = add i32 %v0_1101054, 36
  %v4_11010 = inttoptr i32 %v3_11010 to i32*
  %v5_11010 = load i32, i32* @ip, align 4
  store i32 %v5_11010, i32* %v4_11010, align 4
  %v6_11010 = add i32 %v0_1101054, 40
  store i32 %v6_11010, i32* @r3, align 4
  %v0_11014 = load i32, i32* %r2.global-to-local, align 4
  %v1_11014 = add i32 %v0_11014, -8
  store i32 %v1_11014, i32* %r2.global-to-local, align 4
  %v5_1101c = icmp slt i32 %v1_11014, 8
  br i1 %v5_1101c, label %dec_label_pc_11010.dec_label_pc_11048.loopexit_crit_edge, label %dec_label_pc_11020

dec_label_pc_11008.dec_label_pc_11048.loopexit_crit_edge: ; preds = %dec_label_pc_11008
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11048

dec_label_pc_11010.dec_label_pc_11048.loopexit_crit_edge: ; preds = %dec_label_pc_11008.dec_label_pc_11010_crit_edge, %dec_label_pc_11010.preheader
  %v1_11014.lcssa = phi i32 [ %v1_1101452, %dec_label_pc_11010.preheader ], [ %v1_11014, %dec_label_pc_11008.dec_label_pc_11010_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11048

dec_label_pc_11020.dec_label_pc_11048.loopexit_crit_edge: ; preds = %dec_label_pc_11020
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11048

dec_label_pc_11030.dec_label_pc_11048.loopexit_crit_edge: ; preds = %dec_label_pc_11030
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11048

dec_label_pc_11048:                               ; preds = %dec_label_pc_11004, %dec_label_pc_11008.dec_label_pc_11048.loopexit_crit_edge, %dec_label_pc_11010.dec_label_pc_11048.loopexit_crit_edge, %dec_label_pc_11020.dec_label_pc_11048.loopexit_crit_edge, %dec_label_pc_11030.dec_label_pc_11048.loopexit_crit_edge, %dec_label_pc_10fe0
  %v0_11050 = phi i32 [ %v0_10fe4, %dec_label_pc_10fe0 ], [ %v1_11034, %dec_label_pc_11030.dec_label_pc_11048.loopexit_crit_edge ], [ %v1_11024, %dec_label_pc_11020.dec_label_pc_11048.loopexit_crit_edge ], [ %v1_11014.lcssa, %dec_label_pc_11010.dec_label_pc_11048.loopexit_crit_edge ], [ %v7_11040, %dec_label_pc_11008.dec_label_pc_11048.loopexit_crit_edge ], [ %v0_11008.pr, %dec_label_pc_11004 ]
  %v2_11048 = icmp eq i32 %v0_11050, 0
  store i1 %v2_11048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11048, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11048
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11048
  %v1_11050 = sub i32 7, %v0_11050
  store i32 %v1_11050, i32* %r2.global-to-local, align 4
  %v3_11054 = mul i32 %v1_11050, 4
  %v4_11054 = add i32 %v3_11054, ptrtoint (i32* @global_var_1105c.347 to i32)
  call void @__pseudo_branch(i32 %v4_11054)
  %v0_1105c = load i32, i32* %r1.global-to-local, align 4
  %v1_1105c = trunc i32 %v0_1105c to i8
  %v2_1105c = load i32, i32* @r3, align 4
  %v3_1105c = inttoptr i32 %v2_1105c to i8*
  store i8 %v1_1105c, i8* %v3_1105c, align 1
  %v4_1105c = load i32, i32* @r3, align 4
  %v5_1105c = add i32 %v4_1105c, 1
  store i32 %v5_1105c, i32* %r3.global-to-local, align 4
  %v0_11060 = load i32, i32* %r1.global-to-local, align 4
  %v1_11060 = trunc i32 %v0_11060 to i8
  %v3_11060 = inttoptr i32 %v5_1105c to i8*
  store i8 %v1_11060, i8* %v3_11060, align 1
  %v4_11060 = load i32, i32* %r3.global-to-local, align 4
  %v5_11060 = add i32 %v4_11060, 1
  store i32 %v5_11060, i32* %r3.global-to-local, align 4
  %v0_11064 = load i32, i32* %r1.global-to-local, align 4
  %v1_11064 = trunc i32 %v0_11064 to i8
  %v3_11064 = inttoptr i32 %v5_11060 to i8*
  store i8 %v1_11064, i8* %v3_11064, align 1
  %v4_11064 = load i32, i32* %r3.global-to-local, align 4
  %v5_11064 = add i32 %v4_11064, 1
  store i32 %v5_11064, i32* %r3.global-to-local, align 4
  %v0_11068 = load i32, i32* %r1.global-to-local, align 4
  %v1_11068 = trunc i32 %v0_11068 to i8
  %v3_11068 = inttoptr i32 %v5_11064 to i8*
  store i8 %v1_11068, i8* %v3_11068, align 1
  %v4_11068 = load i32, i32* %r3.global-to-local, align 4
  %v5_11068 = add i32 %v4_11068, 1
  store i32 %v5_11068, i32* %r3.global-to-local, align 4
  %v0_1106c = load i32, i32* %r1.global-to-local, align 4
  %v1_1106c = trunc i32 %v0_1106c to i8
  %v3_1106c = inttoptr i32 %v5_11068 to i8*
  store i8 %v1_1106c, i8* %v3_1106c, align 1
  %v4_1106c = load i32, i32* %r3.global-to-local, align 4
  %v5_1106c = add i32 %v4_1106c, 1
  store i32 %v5_1106c, i32* %r3.global-to-local, align 4
  %v0_11070 = load i32, i32* %r1.global-to-local, align 4
  %v1_11070 = trunc i32 %v0_11070 to i8
  %v3_11070 = inttoptr i32 %v5_1106c to i8*
  store i8 %v1_11070, i8* %v3_11070, align 1
  %v4_11070 = load i32, i32* %r3.global-to-local, align 4
  %v5_11070 = add i32 %v4_11070, 1
  store i32 %v5_11070, i32* %r3.global-to-local, align 4
  %v0_11074 = load i32, i32* %r1.global-to-local, align 4
  %v1_11074 = trunc i32 %v0_11074 to i8
  %v3_11074 = inttoptr i32 %v5_11070 to i8*
  store i8 %v1_11074, i8* %v3_11074, align 1
  %v4_11074 = load i32, i32* %r3.global-to-local, align 4
  %v5_11074 = add i32 %v4_11074, 1
  store i32 %v5_11074, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11010, { 1, 0 }
  uselistorder i32 %v12_1103c, { 1, 2, 0 }
  uselistorder i32 %v0_1101054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11008.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10ff8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_10fec, { 1, 0 }
  uselistorder i32 %v0_10fe4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 11, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11048, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11020, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11080(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11080:
  %v0_11080 = call i32 @function_15100()
  ret i32 %v0_11080
}

define i32 @function_11090() local_unnamed_addr {
dec_label_pc_11090:
  %v0_11090 = call i32 @function_15100()
  ret i32 %v0_11090
}

define i32 @function_110a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_110a0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_110b01 = load i32, i32* @r1, align 4
  %v1_110b02 = inttoptr i32 %v0_110b01 to i8*
  %v2_110b03 = load i8, i8* %v1_110b02, align 1
  %v2_110b45 = icmp eq i8 %v2_110b03, 0
  store i1 %v2_110b45, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_110b03, i8* %arg1, align 1
  br i1 %v2_110b45, label %dec_label_pc_110c0, label %dec_label_pc_110a8

dec_label_pc_110a8:                               ; preds = %dec_label_pc_110a0, %dec_label_pc_110a8
  %v0_110a8 = load i32, i32* @r1, align 4
  %v1_110a8 = add i32 %v0_110a8, 1
  store i32 %v1_110a8, i32* @r1, align 4
  %v0_110ac = load i32, i32* %r2.global-to-local, align 4
  %v1_110ac = add i32 %v0_110ac, 1
  store i32 %v1_110ac, i32* %r2.global-to-local, align 4
  %v1_110b0 = inttoptr i32 %v1_110a8 to i8*
  %v2_110b0 = load i8, i8* %v1_110b0, align 1
  %v2_110b4 = icmp eq i8 %v2_110b0, 0
  store i1 %v2_110b4, i1* %cpsr_z.global-to-local, align 1
  %v3_110b8 = inttoptr i32 %v1_110ac to i8*
  store i8 %v2_110b0, i8* %v3_110b8, align 1
  %v0_110bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_110bc, label %dec_label_pc_110c0, label %dec_label_pc_110a8

dec_label_pc_110c0:                               ; preds = %dec_label_pc_110a8, %dec_label_pc_110a0
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_110a8, { 1, 0 }
}

define i32 @function_110c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_110c4:
  %stack_var_-12 = alloca i32, align 4
  %v2_110cc = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_110cc, i32* @r1, align 4
  %v0_110d0 = call i32 @function_1596c()
  %v2_110d4 = icmp eq i32 %v0_110d0, 0
  %v4_110d8 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_110d4, i32 -1, i32 %v4_110d8
  ret i32 %storemerge
}

define i32 @function_110ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_110ec:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110ec = load i32, i32* @r7, align 4
  store i32 %v3_110ec, i32* %stack_var_-8, align 4
  %v0_110f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_110f8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_110f8, -4095
  br i1 %tmp, label %dec_label_pc_11118, label %dec_label_pc_11108

dec_label_pc_11108:                               ; preds = %dec_label_pc_110ec
  %v0_11108 = call i32 @function_10f8c()
  %v0_1110c = load i32, i32* %r7.global-to-local, align 4
  %v1_1110c = sub i32 0, %v0_1110c
  %v2_11110 = inttoptr i32 %v0_11108 to i32*
  store i32 %v1_1110c, i32* %v2_11110, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11118.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %dec_label_pc_110ec, %dec_label_pc_11108
  %v1_1111c = phi i32 [ %v0_110f8, %dec_label_pc_110ec ], [ -1, %dec_label_pc_11108 ]
  %v2_11118 = phi i32 [ %v3_110ec, %dec_label_pc_110ec ], [ %v2_11118.pre, %dec_label_pc_11108 ]
  store i32 %v2_11118, i32* @r7, align 4
  ret i32 %v1_1111c

; uselistorder directives
  uselistorder i32 %v0_110f8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11118, { 1, 0 }
}

define i32 @function_11124(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11124:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11124 = load i32, i32* @r7, align 4
  store i32 %v3_11124, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1114c, label %dec_label_pc_1113c

dec_label_pc_1113c:                               ; preds = %dec_label_pc_11124
  %v0_1113c = call i32 @function_10f8c()
  %v0_11140 = load i32, i32* %r7.global-to-local, align 4
  %v1_11140 = sub i32 0, %v0_11140
  store i32 %v1_11140, i32* @r3, align 4
  %v2_11144 = inttoptr i32 %v0_1113c to i32*
  store i32 %v1_11140, i32* %v2_11144, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11150.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1114c

dec_label_pc_1114c:                               ; preds = %dec_label_pc_11124, %dec_label_pc_1113c
  %v2_11150 = phi i32 [ %v3_11124, %dec_label_pc_11124 ], [ %v2_11150.pre, %dec_label_pc_1113c ]
  %v0_1114c = phi i32 [ %arg1, %dec_label_pc_11124 ], [ -1, %dec_label_pc_1113c ]
  store i32 %v2_11150, i32* @r7, align 4
  ret i32 %v0_1114c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1114c, { 1, 0 }
}

define i32 @function_1115c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1115c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1115c = load i32, i32* @r7, align 4
  store i32 %v3_1115c, i32* %stack_var_-8, align 4
  %v0_11168 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11168, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11168, -4095
  br i1 %tmp, label %dec_label_pc_11188, label %dec_label_pc_11178

dec_label_pc_11178:                               ; preds = %dec_label_pc_1115c
  %v0_11178 = call i32 @function_10f8c()
  %v0_1117c = load i32, i32* %r7.global-to-local, align 4
  %v1_1117c = sub i32 0, %v0_1117c
  %v2_11180 = inttoptr i32 %v0_11178 to i32*
  store i32 %v1_1117c, i32* %v2_11180, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11188.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11188

dec_label_pc_11188:                               ; preds = %dec_label_pc_1115c, %dec_label_pc_11178
  %v1_1118c = phi i32 [ %v0_11168, %dec_label_pc_1115c ], [ -1, %dec_label_pc_11178 ]
  %v2_11188 = phi i32 [ %v3_1115c, %dec_label_pc_1115c ], [ %v2_11188.pre, %dec_label_pc_11178 ]
  store i32 %v2_11188, i32* @r7, align 4
  ret i32 %v1_1118c

; uselistorder directives
  uselistorder i32 %v0_11168, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11188, { 1, 0 }
}

define i32 @function_11194(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11194:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_111c8, label %dec_label_pc_111b8

dec_label_pc_111b8:                               ; preds = %dec_label_pc_11194
  %v0_111b8 = call i32 @function_10f8c()
  %v0_111bc = load i32, i32* %r4.global-to-local, align 4
  %v1_111bc = sub i32 0, %v0_111bc
  %v2_111c0 = inttoptr i32 %v0_111b8 to i32*
  store i32 %v1_111bc, i32* %v2_111c0, align 4
  br label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_11194, %dec_label_pc_111b8
  %v1_111d0 = phi i32 [ %arg1, %dec_label_pc_11194 ], [ -1, %dec_label_pc_111b8 ]
  ret i32 %v1_111d0

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_111c8, { 1, 0 }
}

define i32 @function_111d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_111d8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111d8 = load i32, i32* @r7, align 4
  store i32 %v3_111d8, i32* %stack_var_-8, align 4
  %v0_111e4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111e4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111e4, -4095
  br i1 %tmp, label %dec_label_pc_11204, label %dec_label_pc_111f4

dec_label_pc_111f4:                               ; preds = %dec_label_pc_111d8
  %v0_111f4 = call i32 @function_10f8c()
  %v0_111f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_111f8 = sub i32 0, %v0_111f8
  %v2_111fc = inttoptr i32 %v0_111f4 to i32*
  store i32 %v1_111f8, i32* %v2_111fc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11204.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11204

dec_label_pc_11204:                               ; preds = %dec_label_pc_111d8, %dec_label_pc_111f4
  %v1_11208 = phi i32 [ %v0_111e4, %dec_label_pc_111d8 ], [ -1, %dec_label_pc_111f4 ]
  %v2_11204 = phi i32 [ %v3_111d8, %dec_label_pc_111d8 ], [ %v2_11204.pre, %dec_label_pc_111f4 ]
  store i32 %v2_11204, i32* %r7.global-to-local, align 4
  ret i32 %v1_11208

; uselistorder directives
  uselistorder i32 %v0_111e4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11204, { 1, 0 }
}

define i32 @function_1120c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1120c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1120c = load i32, i32* @r7, align 4
  store i32 %v3_1120c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11234, label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %dec_label_pc_1120c
  %v0_11224 = call i32 @function_10f8c()
  %v0_11228 = load i32, i32* %r7.global-to-local, align 4
  %v1_11228 = sub i32 0, %v0_11228
  %v2_1122c = inttoptr i32 %v0_11224 to i32*
  store i32 %v1_11228, i32* %v2_1122c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11238.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_1120c, %dec_label_pc_11224
  %v2_11238 = phi i32 [ %v3_1120c, %dec_label_pc_1120c ], [ %v2_11238.pre, %dec_label_pc_11224 ]
  %v0_11234 = phi i32 [ %arg1, %dec_label_pc_1120c ], [ -1, %dec_label_pc_11224 ]
  store i32 %v2_11238, i32* @r7, align 4
  ret i32 %v0_11234

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11234, { 1, 0 }
}

define i32 @function_11244(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11244:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11244 = load i32, i32* @r4, align 4
  store i32 %v3_11244, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11274, label %dec_label_pc_11264

dec_label_pc_11264:                               ; preds = %dec_label_pc_11244
  %v0_11264 = call i32 @function_10f8c()
  %v0_11268 = load i32, i32* %r4.global-to-local, align 4
  %v1_11268 = sub i32 0, %v0_11268
  %v2_1126c = inttoptr i32 %v0_11264 to i32*
  store i32 %v1_11268, i32* %v2_1126c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11278.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11274

dec_label_pc_11274:                               ; preds = %dec_label_pc_11244, %dec_label_pc_11264
  %v2_11278 = phi i32 [ %v3_11244, %dec_label_pc_11244 ], [ %v2_11278.pre, %dec_label_pc_11264 ]
  %v0_11274 = phi i32 [ %arg1, %dec_label_pc_11244 ], [ -1, %dec_label_pc_11264 ]
  store i32 %v2_11278, i32* @r4, align 4
  ret i32 %v0_11274

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11274, { 1, 0 }
}

define i32 @function_11280(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11280:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11280 = load i32, i32* @r7, align 4
  store i32 %v3_11280, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_112a8, label %dec_label_pc_11298

dec_label_pc_11298:                               ; preds = %dec_label_pc_11280
  %v0_11298 = call i32 @function_10f8c()
  %v0_1129c = load i32, i32* %r7.global-to-local, align 4
  %v1_1129c = sub i32 0, %v0_1129c
  store i32 %v1_1129c, i32* @r3, align 4
  %v2_112a0 = inttoptr i32 %v0_11298 to i32*
  store i32 %v1_1129c, i32* %v2_112a0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_112ac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_112a8

dec_label_pc_112a8:                               ; preds = %dec_label_pc_11280, %dec_label_pc_11298
  %v2_112ac = phi i32 [ %v3_11280, %dec_label_pc_11280 ], [ %v2_112ac.pre, %dec_label_pc_11298 ]
  %v0_112a8 = phi i32 [ %arg1, %dec_label_pc_11280 ], [ -1, %dec_label_pc_11298 ]
  store i32 %v2_112ac, i32* @r7, align 4
  ret i32 %v0_112a8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112a8, { 1, 0 }
}

define i32 @function_112b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_112b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_112b8 = load i32, i32* @r4, align 4
  store i32 %v3_112b8, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_112e8, label %dec_label_pc_112d8

dec_label_pc_112d8:                               ; preds = %dec_label_pc_112b8
  %v0_112d8 = call i32 @function_10f8c()
  %v0_112dc = load i32, i32* %r4.global-to-local, align 4
  %v1_112dc = sub i32 0, %v0_112dc
  %v2_112e0 = inttoptr i32 %v0_112d8 to i32*
  store i32 %v1_112dc, i32* %v2_112e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_112ec.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_112e8

dec_label_pc_112e8:                               ; preds = %dec_label_pc_112b8, %dec_label_pc_112d8
  %v2_112ec = phi i32 [ %v3_112b8, %dec_label_pc_112b8 ], [ %v2_112ec.pre, %dec_label_pc_112d8 ]
  %v0_112e8 = phi i32 [ %arg1, %dec_label_pc_112b8 ], [ -1, %dec_label_pc_112d8 ]
  store i32 %v2_112ec, i32* @r4, align 4
  ret i32 %v0_112e8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112e8, { 1, 0 }
}

define i32 @function_112f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_112f8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1132c, label %dec_label_pc_1131c

dec_label_pc_1131c:                               ; preds = %dec_label_pc_112f8
  %v0_1131c = call i32 @function_10f8c()
  %v0_11320 = load i32, i32* %r4.global-to-local, align 4
  %v1_11320 = sub i32 0, %v0_11320
  store i32 %v1_11320, i32* @r3, align 4
  %v2_11324 = inttoptr i32 %v0_1131c to i32*
  store i32 %v1_11320, i32* %v2_11324, align 4
  br label %dec_label_pc_1132c

dec_label_pc_1132c:                               ; preds = %dec_label_pc_112f8, %dec_label_pc_1131c
  %v1_11334 = phi i32 [ %arg1, %dec_label_pc_112f8 ], [ -1, %dec_label_pc_1131c ]
  ret i32 %v1_11334

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1132c, { 1, 0 }
}

define i32 @function_1133c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1133c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1133c = load i32, i32* @r7, align 4
  store i32 %v3_1133c, i32* %stack_var_-8, align 4
  %v0_11348 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11348, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11348, -4095
  br i1 %tmp, label %dec_label_pc_11368, label %dec_label_pc_11358

dec_label_pc_11358:                               ; preds = %dec_label_pc_1133c
  %v0_11358 = call i32 @function_10f8c()
  %v0_1135c = load i32, i32* %r7.global-to-local, align 4
  %v1_1135c = sub i32 0, %v0_1135c
  store i32 %v1_1135c, i32* @r3, align 4
  %v2_11360 = inttoptr i32 %v0_11358 to i32*
  store i32 %v1_1135c, i32* %v2_11360, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11368.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11368

dec_label_pc_11368:                               ; preds = %dec_label_pc_1133c, %dec_label_pc_11358
  %v1_1136c = phi i32 [ %v0_11348, %dec_label_pc_1133c ], [ -1, %dec_label_pc_11358 ]
  %v2_11368 = phi i32 [ %v3_1133c, %dec_label_pc_1133c ], [ %v2_11368.pre, %dec_label_pc_11358 ]
  store i32 %v2_11368, i32* @r7, align 4
  ret i32 %v1_1136c

; uselistorder directives
  uselistorder i32 %v0_11348, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11368, { 1, 0 }
}

define i32 @function_11374(i32 %arg1) local_unnamed_addr {
dec_label_pc_11374:
  store i32 %arg1, i32* @r0, align 4
  %v3_11374 = load i32, i32* @r4, align 4
  %v0_1137c = call i32 @function_107d0()
  %v2_11384 = call i32 @function_10930(i32 %v0_1137c, i32 %arg1)
  store i32 %v3_11374, i32* @r4, align 4
  ret i32 %v2_11384

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10930, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_107d0, { 0, 3, 2, 1 }
}

define i32 @function_11390(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11390:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_113a8, label %dec_label_pc_113a0

dec_label_pc_113a0:                               ; preds = %dec_label_pc_11390
  %v7_113a4 = icmp slt i32 %arg1, 65
  br i1 %v7_113a4, label %dec_label_pc_113bc, label %dec_label_pc_113a8

dec_label_pc_113a8:                               ; preds = %dec_label_pc_113a0, %dec_label_pc_11390
  %v0_113a8 = call i32 @function_10f8c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_113b4 = inttoptr i32 %v0_113a8 to i32*
  store i32 22, i32* %v2_113b4, align 4
  %v0_113c4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113c4

dec_label_pc_113bc:                               ; preds = %dec_label_pc_113a0
  %v0_113bc = call i32 @function_114c4()
  store i32 %v0_113bc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113c4

dec_label_pc_113c4:                               ; preds = %dec_label_pc_113a8, %dec_label_pc_113bc
  %v0_113c4 = phi i32 [ %v0_113c4.pre, %dec_label_pc_113a8 ], [ %v0_113bc, %dec_label_pc_113bc ]
  ret i32 %v0_113c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113c4, { 1, 0 }
}

define i32 @function_113d4(i32* %arg1) local_unnamed_addr {
dec_label_pc_113d4:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_113dc = add i32 %tmp, 4
  %v3_113dc = inttoptr i32 %v2_113dc to i32*
  store i32 0, i32* %v3_113dc, align 4
  %v1_113e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_113e0 = inttoptr i32 %v1_113e0 to i32*
  store i32 0, i32* %v2_113e0, align 4
  ret i32 0
}

define i32 @function_113e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113e8:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_113e8 = load i32, i32* @r4, align 4
  store i32 %v3_113e8, i32* %stack_var_-16, align 4
  %v6_113e8 = load i32, i32* @r5, align 4
  %v9_113e8 = load i32, i32* @r6, align 4
  %v7_113f0 = icmp eq i32 %arg2, -1
  br i1 %v7_113f0, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_113e8
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_113e8
  %v2_113f8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11414

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1141c

dec_label_pc_11414:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_11418 = icmp slt i32 %arg1, 65
  br i1 %v7_11418, label %dec_label_pc_11430, label %dec_label_pc_1141c

dec_label_pc_1141c:                               ; preds = %.thread16, %dec_label_pc_11414
  %v0_1141c = call i32 @function_10f8c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11428 = inttoptr i32 %v0_1141c to i32*
  store i32 22, i32* %v2_11428, align 4
  %v0_11488.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_11430:                               ; preds = %dec_label_pc_11414
  %v2_11430 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11430, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11438 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11438, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11448 = call i32 @function_114c4()
  %v0_11450 = load i32, i32* @r5, align 4
  %v2_11458 = call i32 @function_114a0(i32 ptrtoint (i32* @global_var_208a4.359 to i32), i32 %v0_11450)
  store i32 %v2_113f8, i32* %r2.global-to-local, align 4
  %v0_11470 = load i32, i32* @r5, align 4
  %v3_11478 = call i32 @function_138d4(i32 %v0_11470, i32 %v2_11430, i32 %v2_113f8)
  %v1_1147c = icmp slt i32 %v3_11478, 0
  br i1 %v1_1147c, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11430
  %v5_11480 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11480, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11430
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_1141c, %bb32
  %v0_11488 = phi i32 [ %v5_11480, %bb31 ], [ %v0_11488.pre, %dec_label_pc_1141c ], [ -1, %bb32 ]
  %v2_11490 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11490, i32* @r4, align 4
  store i32 %v6_113e8, i32* @r5, align 4
  store i32 %v9_113e8, i32* @r6, align 4
  ret i32 %v0_11488

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_114c4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1141c, { 1, 0 }
}

define i32 @function_114a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_114a0:
  %v1_114a0 = add i32 %arg2, -1
  %v3_114a4 = udiv i32 %v1_114a0, 32
  %v4_114a8 = mul nuw nsw i32 %v3_114a4, 4
  %v5_114a8 = add i32 %v4_114a8, %arg1
  %v6_114a8 = inttoptr i32 %v5_114a8 to i32*
  %v7_114a8 = load i32, i32* %v6_114a8, align 4
  %v1_114ac = urem i32 %v1_114a0, 32
  %v7_114b4 = shl i32 1, %v1_114ac
  %v8_114b4 = and i32 %v7_114a8, %v7_114b4
  %v10_114b4 = icmp ne i32 %v8_114b4, 0
  %. = zext i1 %v10_114b4 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_114a0, { 1, 0 }
}

define i32 @function_114c4() local_unnamed_addr {
dec_label_pc_114c4:
  %v0_114c4 = load i32, i32* @r1, align 4
  %v1_114c4 = add i32 %v0_114c4, -1
  %v3_114c8 = udiv i32 %v1_114c4, 32
  %v0_114cc = load i32, i32* @r0, align 4
  %v4_114cc = mul nuw nsw i32 %v3_114c8, 4
  %v5_114cc = add i32 %v0_114cc, %v4_114cc
  %v6_114cc = inttoptr i32 %v5_114cc to i32*
  %v7_114cc = load i32, i32* %v6_114cc, align 4
  %v1_114d0 = urem i32 %v1_114c4, 32
  %v7_114d8 = shl i32 1, %v1_114d0
  %v8_114d8 = or i32 %v7_114cc, %v7_114d8
  store i32 %v8_114d8, i32* %v6_114cc, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_114c4, { 1, 0 }
}

define i32 @function_114e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_114e8:
  %v1_114e8 = add i32 %arg2, -1
  %v3_114ec = udiv i32 %v1_114e8, 32
  %v4_114f0 = mul nuw nsw i32 %v3_114ec, 4
  %v5_114f0 = add i32 %v4_114f0, %arg1
  %v6_114f0 = inttoptr i32 %v5_114f0 to i32*
  %v7_114f0 = load i32, i32* %v6_114f0, align 4
  %v1_114f4 = urem i32 %v1_114e8, 32
  %tmp = shl i32 -1, %v1_114f4
  %v8_114fc = add i32 %tmp, -1
  %v9_114fc = and i32 %v7_114f0, %v8_114fc
  store i32 %v9_114fc, i32* %v6_114f0, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_114e8, { 1, 0 }
}

define i32 @function_1150c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1150c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_1150c = udiv i32 %arg1, 256
  store i32 %v3_1150c, i32* %r1.global-to-local, align 4
  %v2_11510 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11510, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_1150c
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_1150c, %bb
  %v0_1151c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11510, i32 %v0_1151c)
  %v0_11520 = load i32, i32* %r1.global-to-local, align 4
  %v1_11520 = add i32 %v0_11520, 1048320
  %v3_11524 = udiv i32 %v1_11520, 65536
  %v1_11528 = and i32 %v3_11524, 8
  %v6_1152c = shl i32 %v0_11520, %v1_11528
  %v1_11530 = add i32 %v6_1152c, 520192
  %v3_11534 = udiv i32 %v1_11530, 65536
  %v1_11538 = and i32 %v3_11534, 4
  %v6_1153c = shl i32 %v6_1152c, %v1_11538
  %v1_11540 = add i32 %v6_1153c, 245760
  %v3_11544 = udiv i32 %v1_11540, 65536
  %v1_11548 = and i32 %v3_11544, 2
  %v6_1154c = shl i32 %v6_1153c, %v1_11548
  store i32 %v6_1154c, i32* %r1.global-to-local, align 4
  %v1_11550 = sub nsw i32 13, %v1_11528
  %v2_11554 = sub nsw i32 %v1_11550, %v1_11538
  %v3_11558 = udiv i32 %v6_1154c, 32768
  %v4_11558 = sub nuw nsw i32 -1, %v3_11558
  %v4_1155c = udiv i32 %v6_1154c, 16384
  %v5_1155c = and i32 %v4_1155c, %v4_11558
  %v2_11560 = sub nsw i32 %v2_11554, %v1_11548
  %v2_11564 = add nsw i32 %v2_11560, %v5_1155c
  %v1_11568 = add nsw i32 %v2_11564, 6
  %v0_1156c = load i32, i32* %ip.global-to-local, align 4
  %v6_1156c = lshr i32 %v0_1156c, %v1_11568
  %v3_11570 = mul nsw i32 %v2_11564, 4
  %v1_11574 = add nsw i32 %v3_11570, 32
  %v1_11578 = urem i32 %v6_1156c, 4
  %v2_1157c = or i32 %v1_11578, %v1_11574
  ret i32 %v2_1157c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11584() local_unnamed_addr {
dec_label_pc_11584:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11584 = load i32, i32* @r4, align 4
  %v6_11584 = load i32, i32* @r5, align 4
  %v9_11584 = load i32, i32* @r6, align 4
  %v12_11584 = load i32, i32* @r7, align 4
  %v15_11584 = load i32, i32* @r8, align 4
  %v18_11584 = load i32, i32* @sb, align 4
  %v21_11584 = load i32, i32* @sl, align 4
  %v24_11584 = load i32, i32* @fp, align 4
  %v27_11584 = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11598 = load i32, i32* inttoptr (i32 124156 to i32*), align 4
  store i32 %v4_11598, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_115a4 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_115a4, i32* %r1.global-to-local, align 4
  %v0_115a8 = load i32, i32* @r0, align 4
  store i32 %v0_115a8, i32* @r5, align 4
  store i32 %v4_11598, i32* %r2.global-to-local, align 4
  %v2_115b0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_115b0, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_115bc = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_115bc, i32* %ip.global-to-local, align 4
  store i32 71112, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_115bc)
  %v0_115c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_115c8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_115d4 = load i32, i32* inttoptr (i32 124104 to i32*), align 8
  store i32 %v4_115d4, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_115e0.365 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_115d4)
  %v0_115e0 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_115e0, -32
  br i1 %tmp, label %dec_label_pc_115fc, label %dec_label_pc_115e8

dec_label_pc_115e8:                               ; preds = %dec_label_pc_11584
  %v0_115e8 = call i32 @function_10f8c()
  store i32 %v0_115e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_115f4 = inttoptr i32 %v0_115e8 to i32*
  store i32 12, i32* %v2_115f4, align 4
  br label %dec_label_pc_11e78

dec_label_pc_115fc:                               ; preds = %dec_label_pc_11584
  %v1_115fc = add i32 %v0_115e0, 11
  store i32 %v1_115fc, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v2_11608 = icmp ugt i32 %v1_115fc, 14
  %v7_11608 = icmp eq i32 %v1_115fc, 15
  %v2_1160c = xor i1 %v7_11608, true
  %v3_1160c = and i1 %v2_11608, %v2_1160c
  br i1 %v3_1160c, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_115fc
  %v5_1160c = and i32 %v1_115fc, -8
  store i32 %v5_1160c, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_115fc, %bb
  %v4_11610 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11610, i32* @r0, align 4
  %v1_11614 = inttoptr i32 %v4_11610 to i32*
  %v2_11614 = load i32, i32* %v1_11614, align 4
  store i32 %v2_11614, i32* @r4, align 4
  %v2_11618 = xor i1 %v2_11608, true
  %v3_11618 = or i1 %v7_11608, %v2_11618
  br i1 %v3_11618, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_1161c = urem i32 %v2_11614, 2
  %v2_1161c = icmp eq i32 %v1_1161c, 0
  br i1 %v2_1161c, label %dec_label_pc_11624, label %dec_label_pc_11634

dec_label_pc_11624:                               ; preds = %bb140
  %v2_11624 = icmp eq i32 %v2_11614, 0
  br i1 %v2_11624, label %dec_label_pc_1162c, label %dec_label_pc_11a10

dec_label_pc_1162c:                               ; preds = %dec_label_pc_11624
  %v0_1162c = call i32 @function_1243c()
  store i32 %v0_1162c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a10

dec_label_pc_11634:                               ; preds = %bb140
  %v0_11634 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_11634, %v2_11614
  br i1 %tmp201, label %dec_label_pc_1165c, label %dec_label_pc_1163c

dec_label_pc_1163c:                               ; preds = %dec_label_pc_11634
  %v1_1163c = add i32 %v4_11610, -4
  store i32 %v1_1163c, i32* %r1.global-to-local, align 4
  %v3_11640 = udiv i32 %v0_11634, 8
  store i32 %v3_11640, i32* %r2.global-to-local, align 4
  %v4_11644 = mul nuw i32 %v3_11640, 4
  %v5_11644 = add i32 %v4_11644, %v1_1163c
  %v6_11644 = inttoptr i32 %v5_11644 to i32*
  %v7_11644 = load i32, i32* %v6_11644, align 4
  store i32 %v7_11644, i32* %r0.global-to-local, align 4
  %v2_11648 = icmp eq i32 %v7_11644, 0
  br i1 %v2_11648, label %dec_label_pc_1165c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1163c
  %v2_1164c = add i32 %v7_11644, 8
  %v3_1164c = inttoptr i32 %v2_1164c to i32*
  %v4_1164c = load i32, i32* %v3_1164c, align 4
  store i32 %v4_1164c, i32* %r3.global-to-local, align 4
  store i32 %v2_1164c, i32* %r0.global-to-local, align 4
  store i32 %v2_1164c, i32* %r4.global-to-local, align 4
  store i32 %v4_1164c, i32* %v6_11644, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_1165c:                               ; preds = %dec_label_pc_1163c, %dec_label_pc_11634
  %tmp202 = icmp ugt i32 %v0_11634, 255
  br i1 %tmp202, label %dec_label_pc_116ac, label %dec_label_pc_11664

dec_label_pc_11664:                               ; preds = %dec_label_pc_1165c
  store i32 124088, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_1166c = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  %v3_11670 = udiv i32 %v0_11634, 8
  store i32 %v3_11670, i32* @r7, align 4
  %v4_11674 = mul nuw i32 %v3_11670, 8
  %v5_11674 = add i32 %v4_1166c, %v4_11674
  store i32 %v5_11674, i32* %r3.global-to-local, align 4
  %v1_11678 = add i32 %v5_11674, 44
  store i32 %v1_11678, i32* %ip.global-to-local, align 4
  %v1_1167c = add i32 %v5_11674, 56
  %v2_1167c = inttoptr i32 %v1_1167c to i32*
  %v3_1167c = load i32, i32* %v2_1167c, align 4
  store i32 %v3_1167c, i32* %r0.global-to-local, align 4
  %v9_11680 = icmp eq i32 %v3_1167c, %v1_11678
  br i1 %v9_11680, label %dec_label_pc_1180c, label %dec_label_pc_11688

dec_label_pc_11688:                               ; preds = %dec_label_pc_11664
  %v2_11688 = add i32 %v3_1167c, %v0_11634
  store i32 %v2_11688, i32* %r3.global-to-local, align 4
  %v1_1168c = add i32 %v2_11688, 4
  %v2_1168c = inttoptr i32 %v1_1168c to i32*
  %v3_1168c = load i32, i32* %v2_1168c, align 4
  store i32 %v3_1168c, i32* %r2.global-to-local, align 4
  %v1_11690 = add i32 %v3_1167c, 12
  %v2_11690 = inttoptr i32 %v1_11690 to i32*
  %v3_11690 = load i32, i32* %v2_11690, align 4
  store i32 %v3_11690, i32* %r1.global-to-local, align 4
  %v1_11694 = or i32 %v3_1168c, 1
  store i32 %v1_11694, i32* %r2.global-to-local, align 4
  %v1_11698 = add i32 %v3_1167c, 8
  store i32 %v1_11698, i32* %r4.global-to-local, align 4
  store i32 %v1_11694, i32* %v2_1168c, align 4
  %v0_116a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_116a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_116a0 = add i32 %v1_116a0, 8
  %v3_116a0 = inttoptr i32 %v2_116a0 to i32*
  store i32 %v0_116a0, i32* %v3_116a0, align 4
  %v0_116a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_116a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_116a4 = add i32 %v1_116a4, 12
  %v3_116a4 = inttoptr i32 %v2_116a4 to i32*
  store i32 %v0_116a4, i32* %v3_116a4, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_116ac:                               ; preds = %dec_label_pc_1165c
  store i32 %v0_11634, i32* %r0.global-to-local, align 4
  %v1_116b0 = call i32 @function_1150c(i32 %v0_11634)
  store i32 %v1_116b0, i32* %r0.global-to-local, align 4
  %v0_116b4 = load i32, i32* @r4, align 4
  %v1_116b4 = and i32 %v0_116b4, 2
  %v2_116b4 = icmp eq i32 %v1_116b4, 0
  store i32 %v1_116b0, i32* @r7, align 4
  br i1 %v2_116b4, label %dec_label_pc_1180c, label %dec_label_pc_116c0

dec_label_pc_116c0:                               ; preds = %dec_label_pc_116ac
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_116c8 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_116c8, i32* @r0, align 4
  %v0_116cc = call i32 @function_1243c()
  store i32 %v0_116cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1180c

dec_label_pc_116d4:                               ; preds = %dec_label_pc_11820
  %v1_116d4 = add i32 %v3_11820, 4
  %v2_116d4 = inttoptr i32 %v1_116d4 to i32*
  %v3_116d4 = load i32, i32* %v2_116d4, align 4
  store i32 %v3_116d4, i32* %r3.global-to-local, align 4
  %v0_116d8 = load i32, i32* @sl, align 4
  %v1_116dc = and i32 %v3_116d4, -4
  store i32 %v1_116dc, i32* %r4.global-to-local, align 4
  %v1_116e0 = add i32 %v3_11820, 12
  %v2_116e0 = inttoptr i32 %v1_116e0 to i32*
  %v3_116e0 = load i32, i32* %v2_116e0, align 4
  store i32 %v3_116e0, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_116d8, 255
  br i1 %tmp203, label %dec_label_pc_1173c, label %dec_label_pc_116e8

dec_label_pc_116e8:                               ; preds = %dec_label_pc_116d4
  %v9_116e8 = icmp eq i32 %v3_116e0, %v0_11740
  br i1 %v9_116e8, label %dec_label_pc_116f0, label %dec_label_pc_1173c

dec_label_pc_116f0:                               ; preds = %dec_label_pc_116e8
  %v0_116f0 = load i32, i32* @sb, align 4
  %v1_116f0 = add i32 %v0_116f0, 48
  %v2_116f0 = inttoptr i32 %v1_116f0 to i32*
  %v3_116f0 = load i32, i32* %v2_116f0, align 4
  store i32 %v3_116f0, i32* %r3.global-to-local, align 4
  %v9_116f4 = icmp eq i32 %v3_11820, %v3_116f0
  br i1 %v9_116f4, label %dec_label_pc_116fc, label %dec_label_pc_1173c

dec_label_pc_116fc:                               ; preds = %dec_label_pc_116f0
  %v1_116fc = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_116dc, %v1_116fc
  br i1 %tmp204, label %dec_label_pc_11704, label %dec_label_pc_1173c

dec_label_pc_11704:                               ; preds = %dec_label_pc_116fc
  %v2_11704 = sub i32 %v1_116dc, %v0_116d8
  store i32 %v2_11704, i32* %r2.global-to-local, align 4
  %v2_11708 = add i32 %v0_116d8, %v3_11820
  store i32 %v2_11708, i32* %r3.global-to-local, align 4
  %v1_1170c = or i32 %v0_116d8, 1
  store i32 %v1_1170c, i32* %r0.global-to-local, align 4
  %v1_11710 = or i32 %v2_11704, 1
  store i32 %v1_11710, i32* %r1.global-to-local, align 4
  %v1_11714 = add i32 %v3_11820, 8
  store i32 %v1_11714, i32* %r4.global-to-local, align 4
  %v2_11718 = add i32 %v0_11740, 8
  %v3_11718 = inttoptr i32 %v2_11718 to i32*
  store i32 %v2_11708, i32* %v3_11718, align 4
  %v0_1171c = load i32, i32* %r3.global-to-local, align 4
  %v1_1171c = load i32, i32* %ip.global-to-local, align 4
  %v2_1171c = add i32 %v1_1171c, 12
  %v3_1171c = inttoptr i32 %v2_1171c to i32*
  store i32 %v0_1171c, i32* %v3_1171c, align 4
  %v0_11720 = load i32, i32* %r0.global-to-local, align 4
  %v1_11720 = load i32, i32* @r6, align 4
  %v2_11720 = add i32 %v1_11720, 4
  %v3_11720 = inttoptr i32 %v2_11720 to i32*
  store i32 %v0_11720, i32* %v3_11720, align 4
  %v0_11724 = load i32, i32* %r3.global-to-local, align 4
  %v1_11724 = load i32, i32* @sb, align 4
  %v2_11724 = add i32 %v1_11724, 48
  %v3_11724 = inttoptr i32 %v2_11724 to i32*
  store i32 %v0_11724, i32* %v3_11724, align 4
  %v0_11728 = load i32, i32* %r2.global-to-local, align 4
  %v1_11728 = load i32, i32* %r3.global-to-local, align 4
  %v3_11728 = add i32 %v1_11728, %v0_11728
  %v4_11728 = inttoptr i32 %v3_11728 to i32*
  store i32 %v0_11728, i32* %v4_11728, align 4
  %v0_1172c = load i32, i32* %r1.global-to-local, align 4
  %v1_1172c = load i32, i32* %r3.global-to-local, align 4
  %v2_1172c = add i32 %v1_1172c, 4
  %v3_1172c = inttoptr i32 %v2_1172c to i32*
  store i32 %v0_1172c, i32* %v3_1172c, align 4
  %v0_11730 = load i32, i32* %ip.global-to-local, align 4
  %v1_11730 = load i32, i32* %r3.global-to-local, align 4
  %v2_11730 = add i32 %v1_11730, 12
  %v3_11730 = inttoptr i32 %v2_11730 to i32*
  store i32 %v0_11730, i32* %v3_11730, align 4
  %v0_11734 = load i32, i32* %ip.global-to-local, align 4
  %v1_11734 = load i32, i32* %r3.global-to-local, align 4
  %v2_11734 = add i32 %v1_11734, 8
  %v3_11734 = inttoptr i32 %v2_11734 to i32*
  store i32 %v0_11734, i32* %v3_11734, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_1173c:                               ; preds = %dec_label_pc_116fc, %dec_label_pc_116f0, %dec_label_pc_116e8, %dec_label_pc_116d4
  %v9_1173c = icmp eq i32 %v1_116dc, %v0_116d8
  %v2_11740 = add i32 %v3_116e0, 8
  %v3_11740 = inttoptr i32 %v2_11740 to i32*
  store i32 %v0_11740, i32* %v3_11740, align 4
  %v0_11744 = load i32, i32* %ip.global-to-local, align 4
  %v1_11744 = load i32, i32* %r5.global-to-local, align 4
  %v2_11744 = add i32 %v1_11744, 12
  %v3_11744 = inttoptr i32 %v2_11744 to i32*
  store i32 %v0_11744, i32* %v3_11744, align 4
  br i1 %v9_1173c, label %dec_label_pc_1189c.loopexit, label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %dec_label_pc_1173c
  %v0_11758 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_11758, 255
  br i1 %tmp205, label %dec_label_pc_1177c, label %dec_label_pc_11760

dec_label_pc_11760:                               ; preds = %dec_label_pc_11758
  store i32 124088, i32* %r2.global-to-local, align 4
  %v1_11764 = load i32, i32* %r8.global-to-local, align 4
  %v2_11764 = add i32 %v1_11764, 124088
  %v3_11764 = inttoptr i32 %v2_11764 to i32*
  %v4_11764 = load i32, i32* %v3_11764, align 4
  %v3_11768 = udiv i32 %v0_11758, 8
  store i32 %v3_11768, i32* %r0.global-to-local, align 4
  %v4_1176c = mul nuw i32 %v3_11768, 8
  %v5_1176c = add i32 %v4_11764, %v4_1176c
  store i32 %v5_1176c, i32* %r3.global-to-local, align 4
  %v1_11770 = add i32 %v5_1176c, 44
  store i32 %v1_11770, i32* %ip.global-to-local, align 4
  %v1_11774 = add i32 %v5_1176c, 52
  %v2_11774 = inttoptr i32 %v1_11774 to i32*
  %v3_11774 = load i32, i32* %v2_11774, align 4
  store i32 %v3_11774, i32* @lr, align 4
  br label %dec_label_pc_117d4

dec_label_pc_1177c:                               ; preds = %dec_label_pc_11758
  store i32 %v0_11758, i32* %r0.global-to-local, align 4
  %v1_11780 = call i32 @function_1150c(i32 %v0_11758)
  store i32 %v1_11780, i32* %r0.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v1_11788 = load i32, i32* %r8.global-to-local, align 4
  %v2_11788 = add i32 %v1_11788, 124088
  %v3_11788 = inttoptr i32 %v2_11788 to i32*
  %v4_11788 = load i32, i32* %v3_11788, align 4
  %v4_1178c = mul i32 %v1_11780, 8
  %v5_1178c = add i32 %v4_11788, %v4_1178c
  store i32 %v5_1178c, i32* %r3.global-to-local, align 4
  %v1_11790 = add i32 %v5_1178c, 44
  store i32 %v1_11790, i32* %ip.global-to-local, align 4
  %v1_11794 = add i32 %v5_1178c, 52
  %v2_11794 = inttoptr i32 %v1_11794 to i32*
  %v3_11794 = load i32, i32* %v2_11794, align 4
  store i32 %v3_11794, i32* @lr, align 4
  %v9_11798 = icmp eq i32 %v3_11794, %v1_11790
  br i1 %v9_11798, label %dec_label_pc_117d4, label %dec_label_pc_117a0

dec_label_pc_117a0:                               ; preds = %dec_label_pc_1177c
  %v1_117a0 = add i32 %v5_1178c, 56
  %v2_117a0 = inttoptr i32 %v1_117a0 to i32*
  %v3_117a0 = load i32, i32* %v2_117a0, align 4
  store i32 %v3_117a0, i32* %r1.global-to-local, align 4
  %v1_117a4 = add i32 %v3_117a0, 4
  %v2_117a4 = inttoptr i32 %v1_117a4 to i32*
  %v3_117a4 = load i32, i32* %v2_117a4, align 4
  store i32 %v3_117a4, i32* %r3.global-to-local, align 4
  %v0_117a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_117a8 = icmp ult i32 %v0_117a8, %v3_117a4
  br i1 %v3_117a8, label %.thread, label %dec_label_pc_117c4.preheader

.thread:                                          ; preds = %dec_label_pc_117a0
  store i32 %v1_11790, i32* @lr, align 4
  store i32 %v3_117a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_117d4

dec_label_pc_117c4.preheader:                     ; preds = %dec_label_pc_117a0
  %v2_117b0 = or i32 %v0_117a8, 1
  store i32 %v2_117b0, i32* %r2.global-to-local, align 4
  %v1_117c4179 = add i32 %v3_11794, 4
  %v2_117c4180 = inttoptr i32 %v1_117c4179 to i32*
  %v3_117c4181 = load i32, i32* %v2_117c4180, align 4
  store i32 %v3_117c4181, i32* %r3.global-to-local, align 4
  %v3_117c8183 = icmp ult i32 %v2_117b0, %v3_117c4181
  br i1 %v3_117c8183, label %dec_label_pc_117c0, label %dec_label_pc_117d0

dec_label_pc_117c0:                               ; preds = %dec_label_pc_117c4.preheader, %dec_label_pc_117c0
  %v0_117d0184 = phi i32 [ %v3_117c0, %dec_label_pc_117c0 ], [ %v3_11794, %dec_label_pc_117c4.preheader ]
  %v1_117c0 = add i32 %v0_117d0184, 8
  %v2_117c0 = inttoptr i32 %v1_117c0 to i32*
  %v3_117c0 = load i32, i32* %v2_117c0, align 4
  store i32 %v3_117c0, i32* @lr, align 4
  %v1_117c4 = add i32 %v3_117c0, 4
  %v2_117c4 = inttoptr i32 %v1_117c4 to i32*
  %v3_117c4 = load i32, i32* %v2_117c4, align 4
  store i32 %v3_117c4, i32* %r3.global-to-local, align 4
  %v3_117c8 = icmp ult i32 %v2_117b0, %v3_117c4
  br i1 %v3_117c8, label %dec_label_pc_117c0, label %dec_label_pc_117d0

dec_label_pc_117d0:                               ; preds = %dec_label_pc_117c0, %dec_label_pc_117c4.preheader
  %v0_117d0.lcssa = phi i32 [ %v3_11794, %dec_label_pc_117c4.preheader ], [ %v3_117c0, %dec_label_pc_117c0 ]
  %v1_117d0 = add i32 %v0_117d0.lcssa, 12
  %v2_117d0 = inttoptr i32 %v1_117d0 to i32*
  %v3_117d0 = load i32, i32* %v2_117d0, align 4
  store i32 %v3_117d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_117d4

dec_label_pc_117d4:                               ; preds = %.thread, %dec_label_pc_1177c, %dec_label_pc_11760, %dec_label_pc_117d0
  %v0_117f4 = phi i32 [ %v1_11790, %dec_label_pc_1177c ], [ %v1_11770, %dec_label_pc_11760 ], [ %v3_117d0, %dec_label_pc_117d0 ], [ %v3_117a0, %.thread ]
  %v0_117e8 = phi i32 [ %v1_11780, %dec_label_pc_1177c ], [ %v3_11768, %dec_label_pc_11760 ], [ %v1_11780, %dec_label_pc_117d0 ], [ %v1_11780, %.thread ]
  %v1_117d8 = phi i32 [ %v1_11788, %dec_label_pc_1177c ], [ %v1_11764, %dec_label_pc_11760 ], [ %v1_11788, %dec_label_pc_117d0 ], [ %v1_11788, %.thread ]
  store i32 124088, i32* %r2.global-to-local, align 4
  %v2_117d8 = add i32 %v1_117d8, 124088
  %v3_117d8 = inttoptr i32 %v2_117d8 to i32*
  %v4_117d8 = load i32, i32* %v3_117d8, align 4
  %v3_117dc = sdiv i32 %v0_117e8, 32
  store i32 %v3_117dc, i32* %r3.global-to-local, align 4
  %v4_117e0 = mul nsw i32 %v3_117dc, 4
  %v5_117e0 = add i32 %v4_117d8, %v4_117e0
  store i32 %v5_117e0, i32* %r1.global-to-local, align 4
  %v1_117e4 = add i32 %v5_117e0, 820
  %v2_117e4 = inttoptr i32 %v1_117e4 to i32*
  %v3_117e4 = load i32, i32* %v2_117e4, align 4
  %v1_117e8 = urem i32 %v0_117e8, 32
  store i32 %v1_117e8, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_117f0 = shl i32 1, %v1_117e8
  %v8_117f0 = or i32 %v3_117e4, %v7_117f0
  store i32 %v8_117f0, i32* %r3.global-to-local, align 4
  %v1_117f4 = load i32, i32* @r6, align 4
  %v2_117f4 = add i32 %v1_117f4, 12
  %v3_117f4 = inttoptr i32 %v2_117f4 to i32*
  store i32 %v0_117f4, i32* %v3_117f4, align 4
  %v0_117f8 = load i32, i32* @lr, align 4
  %v1_117f8 = load i32, i32* @r6, align 4
  %v2_117f8 = add i32 %v1_117f8, 8
  %v3_117f8 = inttoptr i32 %v2_117f8 to i32*
  store i32 %v0_117f8, i32* %v3_117f8, align 4
  %v0_117fc = load i32, i32* %r3.global-to-local, align 4
  %v1_117fc = load i32, i32* %r1.global-to-local, align 4
  %v2_117fc = add i32 %v1_117fc, 820
  %v3_117fc = inttoptr i32 %v2_117fc to i32*
  store i32 %v0_117fc, i32* %v3_117fc, align 4
  %v0_11800 = load i32, i32* @r6, align 4
  %v1_11800 = load i32, i32* @lr, align 4
  %v2_11800 = add i32 %v1_11800, 12
  %v3_11800 = inttoptr i32 %v2_11800 to i32*
  store i32 %v0_11800, i32* %v3_11800, align 4
  %v0_11804 = load i32, i32* @r6, align 4
  %v1_11804 = load i32, i32* %ip.global-to-local, align 4
  %v2_11804 = add i32 %v1_11804, 8
  %v3_11804 = inttoptr i32 %v2_11804 to i32*
  store i32 %v0_11804, i32* %v3_11804, align 4
  %v0_11820.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11820

dec_label_pc_1180c:                               ; preds = %dec_label_pc_11664, %dec_label_pc_116ac, %dec_label_pc_116c0
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11814 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11814, i32* @sb, align 4
  %v0_11818 = load i32, i32* @sl, align 4
  %v1_11818 = add i32 %v0_11818, 16
  store i32 %v1_11818, i32* @fp, align 4
  %v1_1181c = add i32 %v4_11814, 52
  store i32 %v1_1181c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11820

dec_label_pc_11820:                               ; preds = %dec_label_pc_117d4, %dec_label_pc_1180c
  %v0_11740 = phi i32 [ %v0_11820.pre, %dec_label_pc_117d4 ], [ %v1_1181c, %dec_label_pc_1180c ]
  %v1_11820 = add i32 %v0_11740, 12
  %v2_11820 = inttoptr i32 %v1_11820 to i32*
  %v3_11820 = load i32, i32* %v2_11820, align 4
  store i32 %v3_11820, i32* @r6, align 4
  %v9_11824 = icmp eq i32 %v3_11820, %v0_11740
  br i1 %v9_11824, label %dec_label_pc_1182c, label %dec_label_pc_116d4

dec_label_pc_1182c:                               ; preds = %dec_label_pc_11820
  %v0_1182c = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_1182c, 256
  %v0_118e4.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_1182c.dec_label_pc_118e4_crit_edge, label %dec_label_pc_11834

dec_label_pc_1182c.dec_label_pc_118e4_crit_edge:  ; preds = %dec_label_pc_1182c
  %.pre200 = mul i32 %v0_118e4.pre, 8
  br label %dec_label_pc_118e4

dec_label_pc_11834:                               ; preds = %dec_label_pc_1182c
  %v4_11834 = mul i32 %v0_118e4.pre, 8
  %v5_11834 = add i32 %v4_11834, %v0_11740
  store i32 %v5_11834, i32* %r3.global-to-local, align 4
  %v1_11838 = add i32 %v5_11834, -8
  store i32 %v1_11838, i32* %r1.global-to-local, align 4
  %v1_1183c = add i32 %v5_11834, 4
  %v2_1183c = inttoptr i32 %v1_1183c to i32*
  %storemerge.pre = load i32, i32* %v2_1183c, align 4
  br label %dec_label_pc_118dc

dec_label_pc_11844:                               ; preds = %dec_label_pc_118dc
  %v1_11844 = add i32 %v1_1186c, 4
  %v2_11844 = inttoptr i32 %v1_11844 to i32*
  %v3_11844 = load i32, i32* %v2_11844, align 4
  store i32 %v3_11844, i32* %r3.global-to-local, align 4
  %v1_11848 = and i32 %v3_11844, -4
  store i32 %v1_11848, i32* %r2.global-to-local, align 4
  %v3_1184c = icmp ult i32 %v1_11848, %v0_1182c
  %v1_11850 = add i32 %v1_1186c, 12
  %v2_11850 = inttoptr i32 %v1_11850 to i32*
  %v3_11850 = load i32, i32* %v2_11850, align 4
  store i32 %v3_11850, i32* %r0.global-to-local, align 4
  br i1 %v3_1184c, label %dec_label_pc_118dc, label %dec_label_pc_11858

dec_label_pc_11858:                               ; preds = %dec_label_pc_11844
  %v1_11858 = add i32 %v1_1186c, 8
  %v2_11858 = inttoptr i32 %v1_11858 to i32*
  %v3_11858 = load i32, i32* %v2_11858, align 4
  store i32 %v3_11858, i32* %r1.global-to-local, align 4
  %v1_1185c = add i32 %v3_11858, 12
  %v2_1185c = inttoptr i32 %v1_1185c to i32*
  %v3_1185c = load i32, i32* %v2_1185c, align 4
  store i32 %v3_1185c, i32* %r3.global-to-local, align 4
  %v9_11860 = icmp eq i32 %v3_1185c, %v1_1186c
  br i1 %v9_11860, label %dec_label_pc_11868, label %dec_label_pc_11874

dec_label_pc_11868:                               ; preds = %dec_label_pc_11858
  %v1_11868 = add i32 %v3_11850, 8
  %v2_11868 = inttoptr i32 %v1_11868 to i32*
  %v3_11868 = load i32, i32* %v2_11868, align 4
  store i32 %v3_11868, i32* %r3.global-to-local, align 4
  %v9_1186c = icmp eq i32 %v3_11868, %v1_1186c
  br i1 %v9_1186c, label %dec_label_pc_11878, label %dec_label_pc_11874

dec_label_pc_11874:                               ; preds = %dec_label_pc_11858, %dec_label_pc_11868
  %v0_11874 = call i32 @function_1286c()
  store i32 %v0_11874, i32* %r0.global-to-local, align 4
  %v0_11878.pre = load i32, i32* @sl, align 4
  %v1_11878.pre = load i32, i32* @r2, align 4
  %v0_11880.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11878

dec_label_pc_11878:                               ; preds = %dec_label_pc_11868, %dec_label_pc_11874
  %v1_11880 = phi i32 [ %v3_11850, %dec_label_pc_11868 ], [ %v0_11874, %dec_label_pc_11874 ]
  %v0_11880 = phi i32 [ %v3_11858, %dec_label_pc_11868 ], [ %v0_11880.pre, %dec_label_pc_11874 ]
  %v1_11878 = phi i32 [ %v1_11848, %dec_label_pc_11868 ], [ %v1_11878.pre, %dec_label_pc_11874 ]
  %v0_11878 = phi i32 [ %v0_1182c, %dec_label_pc_11868 ], [ %v0_11878.pre, %dec_label_pc_11874 ]
  %v2_11878 = sub i32 %v1_11878, %v0_11878
  store i32 %v2_11878, i32* %lr.global-to-local, align 4
  %v2_11880 = add i32 %v1_11880, 8
  %v3_11880 = inttoptr i32 %v2_11880 to i32*
  store i32 %v0_11880, i32* %v3_11880, align 4
  %v0_11884 = load i32, i32* %r0.global-to-local, align 4
  %v1_11884 = load i32, i32* %r1.global-to-local, align 4
  %v2_11884 = add i32 %v1_11884, 12
  %v3_11884 = inttoptr i32 %v2_11884 to i32*
  store i32 %v0_11884, i32* %v3_11884, align 4
  %v0_11888 = load i32, i32* %ip.global-to-local, align 4
  %v1_11888 = add i32 %v0_11888, 8
  store i32 %v1_11888, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_11878, 15
  br i1 %tmp207, label %dec_label_pc_118a8, label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_11878
  %v1_11890 = load i32, i32* %r2.global-to-local, align 4
  %v2_11890 = add i32 %v1_11890, %v0_11888
  store i32 %v2_11890, i32* %r2.global-to-local, align 4
  %v1_11894 = add i32 %v2_11890, 4
  %v2_11894 = inttoptr i32 %v1_11894 to i32*
  %v3_11894 = load i32, i32* %v2_11894, align 4
  store i32 %v3_11894, i32* %r3.global-to-local, align 4
  store i32 %v1_11888, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1189c

dec_label_pc_1189c.loopexit:                      ; preds = %dec_label_pc_1173c
  %v1_11748 = load i32, i32* @r6, align 4
  %v2_11748 = load i32, i32* @sl, align 4
  %v3_11748 = add i32 %v2_11748, %v1_11748
  store i32 %v3_11748, i32* %r2.global-to-local, align 4
  %v2_1174c = add i32 %v3_11748, 4
  %v3_1174c = inttoptr i32 %v2_1174c to i32*
  %v4_1174c = load i32, i32* %v3_1174c, align 4
  store i32 %v4_1174c, i32* %r3.global-to-local, align 4
  %v2_11750 = add i32 %v1_11748, 8
  store i32 %v2_11750, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1189c

dec_label_pc_1189c:                               ; preds = %.dec_label_pc_1189c_crit_edge, %dec_label_pc_1189c.loopexit, %dec_label_pc_11890
  %v1_118a0 = phi i32 [ %v4_119c4, %.dec_label_pc_1189c_crit_edge ], [ %v3_11748, %dec_label_pc_1189c.loopexit ], [ %v2_11890, %dec_label_pc_11890 ]
  %v0_1189c = phi i32 [ %v7_119c4, %.dec_label_pc_1189c_crit_edge ], [ %v4_1174c, %dec_label_pc_1189c.loopexit ], [ %v3_11894, %dec_label_pc_11890 ]
  %v1_1189c = or i32 %v0_1189c, 1
  store i32 %v1_1189c, i32* %r3.global-to-local, align 4
  %v2_118a0 = add i32 %v1_118a0, 4
  %v3_118a0 = inttoptr i32 %v2_118a0 to i32*
  store i32 %v1_1189c, i32* %v3_118a0, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_118a8:                               ; preds = %dec_label_pc_11878
  %v1_118a8 = load i32, i32* @sl, align 4
  %v2_118a8 = add i32 %v1_118a8, %v0_11888
  store i32 %v2_118a8, i32* %r2.global-to-local, align 4
  %v1_118ac = or i32 %v1_118a8, 1
  store i32 %v1_118ac, i32* %r3.global-to-local, align 4
  %v0_118b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_118b0 = or i32 %v0_118b0, 1
  store i32 %v1_118b0, i32* %r1.global-to-local, align 4
  store i32 %v1_11888, i32* %r4.global-to-local, align 4
  %v2_118b8 = add i32 %v0_11888, 4
  %v3_118b8 = inttoptr i32 %v2_118b8 to i32*
  store i32 %v1_118ac, i32* %v3_118b8, align 4
  %v0_118bc = load i32, i32* %r2.global-to-local, align 4
  %v1_118bc = load i32, i32* @r6, align 4
  %v2_118bc = add i32 %v1_118bc, 8
  %v3_118bc = inttoptr i32 %v2_118bc to i32*
  store i32 %v0_118bc, i32* %v3_118bc, align 4
  %v0_118c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_118c0 = load i32, i32* @r6, align 4
  %v2_118c0 = add i32 %v1_118c0, 12
  %v3_118c0 = inttoptr i32 %v2_118c0 to i32*
  store i32 %v0_118c0, i32* %v3_118c0, align 4
  %v0_118c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_118c4 = load i32, i32* %r2.global-to-local, align 4
  %v3_118c4 = add i32 %v1_118c4, %v0_118c4
  %v4_118c4 = inttoptr i32 %v3_118c4 to i32*
  store i32 %v0_118c4, i32* %v4_118c4, align 4
  %v0_118c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_118c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_118c8 = add i32 %v1_118c8, 4
  %v3_118c8 = inttoptr i32 %v2_118c8 to i32*
  store i32 %v0_118c8, i32* %v3_118c8, align 4
  %v0_118cc = load i32, i32* @r6, align 4
  %v1_118cc = load i32, i32* %r2.global-to-local, align 4
  %v2_118cc = add i32 %v1_118cc, 12
  %v3_118cc = inttoptr i32 %v2_118cc to i32*
  store i32 %v0_118cc, i32* %v3_118cc, align 4
  %v0_118d0 = load i32, i32* @r6, align 4
  %v1_118d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_118d0 = add i32 %v1_118d0, 8
  %v3_118d0 = inttoptr i32 %v2_118d0 to i32*
  store i32 %v0_118d0, i32* %v3_118d0, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_118dc:                               ; preds = %dec_label_pc_11844, %dec_label_pc_11834
  %v1_1186c = phi i32 [ %storemerge.pre, %dec_label_pc_11834 ], [ %v3_11850, %dec_label_pc_11844 ]
  store i32 %v1_1186c, i32* %ip.global-to-local, align 4
  %v9_118dc = icmp eq i32 %v1_1186c, %v1_11838
  br i1 %v9_118dc, label %dec_label_pc_118e4.loopexit, label %dec_label_pc_11844

dec_label_pc_118e4.loopexit:                      ; preds = %dec_label_pc_118dc
  br label %dec_label_pc_118e4

dec_label_pc_118e4:                               ; preds = %dec_label_pc_1182c.dec_label_pc_118e4_crit_edge, %dec_label_pc_118e4.loopexit
  %v4_11914.pre-phi = phi i32 [ %.pre200, %dec_label_pc_1182c.dec_label_pc_118e4_crit_edge ], [ %v4_11834, %dec_label_pc_118e4.loopexit ]
  %v1_118e4 = add i32 %v0_118e4.pre, 1
  store i32 %v1_118e4, i32* %r2.global-to-local, align 4
  %v1_118e8 = urem i32 %v1_118e4, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 124088, i32* %r0.global-to-local, align 4
  %v6_118f4 = shl i32 1, %v1_118e8
  store i32 %v6_118f4, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_118fc = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_118fc, i32* %r3.global-to-local, align 4
  %v3_11900 = udiv i32 %v1_118e4, 32
  store i32 %v3_11900, i32* @r5, align 4
  %v4_11904 = mul nuw nsw i32 %v3_11900, 4
  %v5_11904 = add i32 %v4_118fc, %v4_11904
  store i32 %v5_11904, i32* %r2.global-to-local, align 4
  %v1_11908 = add i32 %v5_11904, 820
  %v2_11908 = inttoptr i32 %v1_11908 to i32*
  %v3_11908 = load i32, i32* %v2_11908, align 4
  store i32 %v3_11908, i32* @r4, align 4
  %v1_1190c = add i32 %v4_118fc, 52
  store i32 %v1_1190c, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_11914 = add i32 %v1_1190c, %v4_11914.pre-phi
  store i32 %v5_11914, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %dec_label_pc_11980, %dec_label_pc_118e4
  %v1_11920 = phi i32 [ %v1_11920.pre, %dec_label_pc_11980 ], [ %v3_11908, %dec_label_pc_118e4 ]
  %v0_11920 = phi i32 [ %v0_11918.pre, %dec_label_pc_11980 ], [ %v6_118f4, %dec_label_pc_118e4 ]
  %v1_11918 = sub i32 1, %v0_11920
  %v2_11918 = icmp ult i32 %v0_11920, 2
  %v1_11918. = select i1 %v2_11918, i32 %v1_11918, i32 0
  store i32 %v1_11918., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_11920, %v1_11920
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_11918
  %v5_11924 = or i32 %v1_11918., 1
  store i32 %v5_11924, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11930.preheader

bb142:                                            ; preds = %dec_label_pc_11918
  %v2_11928 = icmp eq i32 %v1_11918., 0
  br i1 %v2_11928, label %.dec_label_pc_1196c.preheader_crit_edge, label %dec_label_pc_11930.preheader

.dec_label_pc_1196c.preheader_crit_edge:          ; preds = %bb142
  %v0_1196454.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1196c.preheader

dec_label_pc_11930.preheader:                     ; preds = %bb142, %.thread12
  %v0_11930.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11930

dec_label_pc_11930:                               ; preds = %dec_label_pc_11930.preheader, %dec_label_pc_1193c
  %v0_11930 = phi i32 [ %v0_11930.pre, %dec_label_pc_11930.preheader ], [ %v1_11930, %dec_label_pc_1193c ]
  %v1_11930 = add i32 %v0_11930, 1
  store i32 %v1_11930, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_11930, 2
  br i1 %tmp208, label %dec_label_pc_11a10.loopexit, label %dec_label_pc_1193c

dec_label_pc_1193c:                               ; preds = %dec_label_pc_11930
  store i32 124088, i32* %r3.global-to-local, align 4
  %v1_11940 = load i32, i32* @r8, align 4
  %v2_11940 = add i32 %v1_11940, 124088
  %v3_11940 = inttoptr i32 %v2_11940 to i32*
  %v4_11940 = load i32, i32* %v3_11940, align 4
  store i32 %v4_11940, i32* %r2.global-to-local, align 4
  %v4_11944 = mul i32 %v1_11930, 4
  %v5_11944 = add i32 %v4_11940, %v4_11944
  store i32 %v5_11944, i32* %r3.global-to-local, align 4
  %v1_11948 = add i32 %v5_11944, 820
  %v2_11948 = inttoptr i32 %v1_11948 to i32*
  %v3_11948 = load i32, i32* %v2_11948, align 4
  store i32 %v3_11948, i32* @r4, align 4
  %v2_1194c = icmp eq i32 %v3_11948, 0
  br i1 %v2_1194c, label %dec_label_pc_11930, label %dec_label_pc_11954

dec_label_pc_11954:                               ; preds = %dec_label_pc_1193c
  %v4_11954 = mul i32 %v1_11930, 256
  %v5_11954 = add i32 %v4_11940, %v4_11954
  store i32 %v5_11954, i32* %r3.global-to-local, align 4
  %v1_11958 = add i32 %v5_11954, 44
  store i32 %v1_11958, i32* %r0.global-to-local, align 4
  %v0_1195c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1195c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1196c.preheader

dec_label_pc_1196c.preheader:                     ; preds = %.dec_label_pc_1196c.preheader_crit_edge, %dec_label_pc_11954
  %v0_1196454 = phi i32 [ %v1_11958, %dec_label_pc_11954 ], [ %v0_1196454.pre, %.dec_label_pc_1196c.preheader_crit_edge ]
  %v0_11988 = phi i32 [ %v3_11948, %dec_label_pc_11954 ], [ %v1_11920, %.dec_label_pc_1196c.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_1195c, %dec_label_pc_11954 ], [ %v0_11920, %.dec_label_pc_1196c.preheader_crit_edge ]
  %v2_1196c51 = and i32 %ip.promoted, %v0_11988
  %v4_1196c53 = icmp eq i32 %v2_1196c51, 0
  br i1 %v4_1196c53, label %dec_label_pc_11964, label %dec_label_pc_11974

dec_label_pc_11964:                               ; preds = %dec_label_pc_1196c.preheader, %dec_label_pc_11964
  %v2_1196856 = phi i32 [ %v2_11968, %dec_label_pc_11964 ], [ %ip.promoted, %dec_label_pc_1196c.preheader ]
  %v0_1196455 = phi i32 [ %v1_11964, %dec_label_pc_11964 ], [ %v0_1196454, %dec_label_pc_1196c.preheader ]
  %v1_11964 = add i32 %v0_1196455, 8
  %v2_11968 = mul i32 %v2_1196856, 2
  %v2_1196c = and i32 %v2_11968, %v0_11988
  %v4_1196c = icmp eq i32 %v2_1196c, 0
  br i1 %v4_1196c, label %dec_label_pc_11964, label %dec_label_pc_1196c.dec_label_pc_11974_crit_edge

dec_label_pc_1196c.dec_label_pc_11974_crit_edge:  ; preds = %dec_label_pc_11964
  store i32 %v1_11964, i32* %r0.global-to-local, align 4
  store i32 %v2_11968, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11974

dec_label_pc_11974:                               ; preds = %dec_label_pc_1196c.dec_label_pc_11974_crit_edge, %dec_label_pc_1196c.preheader
  %v0_11994 = phi i32 [ %v2_11968, %dec_label_pc_1196c.dec_label_pc_11974_crit_edge ], [ %ip.promoted, %dec_label_pc_1196c.preheader ]
  %v0_119b8 = phi i32 [ %v1_11964, %dec_label_pc_1196c.dec_label_pc_11974_crit_edge ], [ %v0_1196454, %dec_label_pc_1196c.preheader ]
  %v1_11974 = add i32 %v0_119b8, 12
  %v2_11974 = inttoptr i32 %v1_11974 to i32*
  %v3_11974 = load i32, i32* %v2_11974, align 4
  store i32 %v3_11974, i32* @lr, align 4
  %v9_11978 = icmp eq i32 %v3_11974, %v0_119b8
  br i1 %v9_11978, label %dec_label_pc_11980, label %dec_label_pc_119a0

dec_label_pc_11980:                               ; preds = %dec_label_pc_11974
  store i32 124088, i32* %r0.global-to-local, align 4
  %v1_11984 = load i32, i32* @r8, align 4
  %v2_11984 = add i32 %v1_11984, 124088
  %v3_11984 = inttoptr i32 %v2_11984 to i32*
  %v4_11984 = load i32, i32* %v3_11984, align 4
  %v2_11988 = sub i32 -1, %v0_11994
  %v3_11988 = and i32 %v0_11988, %v2_11988
  store i32 %v3_11988, i32* @r4, align 4
  %v1_1198c = load i32, i32* @r5, align 4
  %v4_1198c = mul i32 %v1_1198c, 4
  %v5_1198c = add i32 %v4_1198c, %v4_11984
  store i32 %v5_1198c, i32* %r3.global-to-local, align 4
  %v1_11990 = add i32 %v0_119b8, 8
  store i32 %v1_11990, i32* %r0.global-to-local, align 4
  %v2_11994 = mul i32 %v0_11994, 2
  store i32 %v2_11994, i32* %ip.global-to-local, align 4
  %v2_11998 = add i32 %v5_1198c, 820
  %v3_11998 = inttoptr i32 %v2_11998 to i32*
  store i32 %v3_11988, i32* %v3_11998, align 4
  %v0_11918.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_11920.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11918

dec_label_pc_119a0:                               ; preds = %dec_label_pc_11974
  %v1_119a0 = add i32 %v3_11974, 4
  %v2_119a0 = inttoptr i32 %v1_119a0 to i32*
  %v3_119a0 = load i32, i32* %v2_119a0, align 4
  store i32 %v3_119a0, i32* %r3.global-to-local, align 4
  %v1_119a4 = and i32 %v3_119a0, -4
  store i32 %v1_119a4, i32* %r2.global-to-local, align 4
  %v0_119a8 = load i32, i32* @sl, align 4
  %v2_119a8 = sub i32 %v1_119a4, %v0_119a8
  store i32 %v2_119a8, i32* %ip.global-to-local, align 4
  %v1_119ac = add i32 %v3_11974, 12
  %v2_119ac = inttoptr i32 %v1_119ac to i32*
  %v3_119ac = load i32, i32* %v2_119ac, align 4
  store i32 %v3_119ac, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_119a8, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_119a0
  %v6_119b4 = add i32 %v1_119a4, %v3_11974
  store i32 %v6_119b4, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_119a0, %bb143
  %v2_119b8 = add i32 %v3_119ac, 8
  %v3_119b8 = inttoptr i32 %v2_119b8 to i32*
  store i32 %v0_119b8, i32* %v3_119b8, align 4
  %v0_119bc = load i32, i32* %r3.global-to-local, align 4
  %v1_119bc = load i32, i32* %r0.global-to-local, align 4
  %v2_119bc = add i32 %v1_119bc, 12
  %v3_119bc = inttoptr i32 %v2_119bc to i32*
  store i32 %v0_119bc, i32* %v3_119bc, align 4
  %v4_119c0 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_1189c_crit_edge, label %dec_label_pc_119cc

.dec_label_pc_1189c_crit_edge:                    ; preds = %bb144
  %v5_119c0 = add i32 %v4_119c0, 8
  store i32 %v5_119c0, i32* %r4.global-to-local, align 4
  %v4_119c4 = load i32, i32* %r2.global-to-local, align 4
  %v5_119c4 = add i32 %v4_119c4, 4
  %v6_119c4 = inttoptr i32 %v5_119c4 to i32*
  %v7_119c4 = load i32, i32* %v6_119c4, align 4
  store i32 %v7_119c4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1189c

dec_label_pc_119cc:                               ; preds = %bb144
  %v1_119cc = load i32, i32* @sl, align 4
  %v2_119cc = add i32 %v1_119cc, %v4_119c0
  store i32 %v2_119cc, i32* %r1.global-to-local, align 4
  %v1_119d4 = load i32, i32* @r6, align 4
  %v2_119d4 = add i32 %v1_119d4, 8
  %v3_119d4 = inttoptr i32 %v2_119d4 to i32*
  store i32 %v2_119cc, i32* %v3_119d4, align 4
  %v0_119d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_119d8 = load i32, i32* @r6, align 4
  %v2_119d8 = add i32 %v1_119d8, 12
  %v3_119d8 = inttoptr i32 %v2_119d8 to i32*
  store i32 %v0_119d8, i32* %v3_119d8, align 4
  %v0_119dc = load i32, i32* @r6, align 4
  %v1_119dc = load i32, i32* %r1.global-to-local, align 4
  %v2_119dc = add i32 %v1_119dc, 8
  %v3_119dc = inttoptr i32 %v2_119dc to i32*
  store i32 %v0_119dc, i32* %v3_119dc, align 4
  %v0_119e0 = load i32, i32* @r6, align 4
  %v1_119e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_119e0 = add i32 %v1_119e0, 12
  %v3_119e0 = inttoptr i32 %v2_119e0 to i32*
  store i32 %v0_119e0, i32* %v3_119e0, align 4
  %tmp210 = icmp ult i32 %v1_119cc, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_119cc
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v8_119ec = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v8_119ec, i32* %r3.global-to-local, align 4
  %v4_119f0 = load i32, i32* %r1.global-to-local, align 4
  %v6_119f0 = add i32 %v8_119ec, 48
  %v7_119f0 = inttoptr i32 %v6_119f0 to i32*
  store i32 %v4_119f0, i32* %v7_119f0, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_119cc, %bb145
  %v0_119f4 = load i32, i32* @sl, align 4
  %v1_119f4 = or i32 %v0_119f4, 1
  store i32 %v1_119f4, i32* %r2.global-to-local, align 4
  %v0_119f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_119f8 = or i32 %v0_119f8, 1
  store i32 %v1_119f8, i32* %r3.global-to-local, align 4
  %v0_119fc = load i32, i32* @lr, align 4
  %v1_119fc = add i32 %v0_119fc, 8
  store i32 %v1_119fc, i32* %r4.global-to-local, align 4
  %v2_11a00 = add i32 %v0_119fc, 4
  %v3_11a00 = inttoptr i32 %v2_11a00 to i32*
  store i32 %v1_119f4, i32* %v3_11a00, align 4
  %v0_11a04 = load i32, i32* %ip.global-to-local, align 4
  %v1_11a04 = load i32, i32* %r1.global-to-local, align 4
  %v3_11a04 = add i32 %v1_11a04, %v0_11a04
  %v4_11a04 = inttoptr i32 %v3_11a04 to i32*
  store i32 %v0_11a04, i32* %v4_11a04, align 4
  %v0_11a08 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a08 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a08 = add i32 %v1_11a08, 4
  %v3_11a08 = inttoptr i32 %v2_11a08 to i32*
  store i32 %v0_11a08, i32* %v3_11a08, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_11a10.loopexit:                      ; preds = %dec_label_pc_11930
  br label %dec_label_pc_11a10

dec_label_pc_11a10:                               ; preds = %dec_label_pc_11a10.loopexit, %dec_label_pc_11624, %dec_label_pc_1162c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_11a18 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11a18, i32* @r0, align 4
  %v1_11a1c = add i32 %v4_11a18, 44
  %v2_11a1c = inttoptr i32 %v1_11a1c to i32*
  %v3_11a1c = load i32, i32* %v2_11a1c, align 4
  store i32 %v3_11a1c, i32* %ip.global-to-local, align 4
  %v1_11a20 = add i32 %v3_11a1c, 4
  %v2_11a20 = inttoptr i32 %v1_11a20 to i32*
  %v3_11a20 = load i32, i32* %v2_11a20, align 4
  %v0_11a24 = load i32, i32* @sl, align 4
  %v1_11a24 = add i32 %v0_11a24, 16
  store i32 %v1_11a24, i32* %r1.global-to-local, align 4
  %v1_11a28 = and i32 %v3_11a20, -4
  store i32 %v1_11a28, i32* %r3.global-to-local, align 4
  %v3_11a2c = icmp ult i32 %v1_11a28, %v1_11a24
  br i1 %v3_11a2c, label %dec_label_pc_11a5c, label %dec_label_pc_11a38

dec_label_pc_11a38:                               ; preds = %dec_label_pc_11a10
  %v2_11a38 = sub i32 %v1_11a28, %v0_11a24
  %v2_11a3c = add i32 %v0_11a24, %v3_11a1c
  store i32 %v2_11a3c, i32* %r1.global-to-local, align 4
  %v1_11a40 = or i32 %v2_11a38, 1
  store i32 %v1_11a40, i32* %r3.global-to-local, align 4
  %v1_11a44 = or i32 %v0_11a24, 1
  store i32 %v1_11a44, i32* %r2.global-to-local, align 4
  %v1_11a48 = add i32 %v3_11a1c, 8
  store i32 %v1_11a48, i32* %r4.global-to-local, align 4
  store i32 %v1_11a44, i32* %v2_11a20, align 4
  %v0_11a50 = load i32, i32* %r1.global-to-local, align 4
  %v1_11a50 = load i32, i32* @r0, align 4
  %v2_11a50 = add i32 %v1_11a50, 44
  %v3_11a50 = inttoptr i32 %v2_11a50 to i32*
  store i32 %v0_11a50, i32* %v3_11a50, align 4
  %v0_11a54 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a54 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a54 = add i32 %v1_11a54, 4
  %v3_11a54 = inttoptr i32 %v2_11a54 to i32*
  store i32 %v0_11a54, i32* %v3_11a54, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a10
  %v1_11a5c = inttoptr i32 %v4_11a18 to i32*
  %v2_11a5c = load i32, i32* %v1_11a5c, align 4
  store i32 %v2_11a5c, i32* %r3.global-to-local, align 4
  %v1_11a60 = and i32 %v2_11a5c, 2
  store i32 %v1_11a60, i32* %ip.global-to-local, align 4
  %v2_11a60 = icmp eq i32 %v1_11a60, 0
  %v1_11a64 = add i32 %v4_11a18, 860
  %v2_11a64 = inttoptr i32 %v1_11a64 to i32*
  %v3_11a64 = load i32, i32* %v2_11a64, align 4
  store i32 %v3_11a64, i32* %r1.global-to-local, align 4
  br i1 %v2_11a60, label %dec_label_pc_11a7c, label %dec_label_pc_11a6c

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a5c
  %v0_11a6c = call i32 @function_1243c()
  %v0_11a70 = load i32, i32* @sl, align 4
  %v1_11a70 = add i32 %v0_11a70, -7
  store i32 %v1_11a70, i32* @r0, align 4
  %v0_11a74 = call i32 @function_11584()
  store i32 %v0_11a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e58

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a5c
  %v1_11a7c = add i32 %v4_11a18, 844
  %v2_11a7c = inttoptr i32 %v1_11a7c to i32*
  %v3_11a7c = load i32, i32* %v2_11a7c, align 4
  store i32 %v3_11a7c, i32* %r3.global-to-local, align 4
  %v3_11a80 = icmp ult i32 %v0_11a24, %v3_11a7c
  %v1_11a84 = add i32 %v3_11a64, -1
  store i32 %v1_11a84, i32* %sb.global-to-local, align 4
  br i1 %v3_11a80, label %dec_label_pc_11b58, label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a7c
  %v1_11a8c = add i32 %v4_11a18, 852
  %v2_11a8c = inttoptr i32 %v1_11a8c to i32*
  %v3_11a8c = load i32, i32* %v2_11a8c, align 4
  store i32 %v3_11a8c, i32* %r2.global-to-local, align 4
  %v1_11a90 = add i32 %v4_11a18, 848
  %v2_11a90 = inttoptr i32 %v1_11a90 to i32*
  %v3_11a90 = load i32, i32* %v2_11a90, align 4
  store i32 %v3_11a90, i32* %r3.global-to-local, align 4
  %v6_11a98 = icmp slt i32 %v3_11a90, %v3_11a8c
  br i1 %v6_11a98, label %dec_label_pc_11a9c, label %dec_label_pc_11b58

dec_label_pc_11a9c:                               ; preds = %dec_label_pc_11a8c
  %v1_11a9c = add i32 %v0_11a24, 10
  %v2_11aa0 = add i32 %v1_11a9c, %v3_11a64
  store i32 %v2_11aa0, i32* %r3.global-to-local, align 4
  %v2_11aa4 = sub i32 0, %v3_11a64
  %v3_11aa4 = and i32 %v2_11aa0, %v2_11aa4
  store i32 %v3_11aa4, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11aa4, %v0_11a24
  br i1 %tmp211, label %dec_label_pc_11ab0, label %dec_label_pc_11b58

dec_label_pc_11ab0:                               ; preds = %dec_label_pc_11a9c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11aa4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11ac8 = call i32 @function_1386c(i32 0, i32 %v3_11aa4, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11ac8, i32* %r0.global-to-local, align 4
  %v7_11acc = icmp eq i32 %v6_11ac8, -1
  br i1 %v7_11acc, label %dec_label_pc_11ab0.dec_label_pc_11b58_crit_edge, label %dec_label_pc_11ad4

dec_label_pc_11ab0.dec_label_pc_11b58_crit_edge:  ; preds = %dec_label_pc_11ab0
  %v1_11b7c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11b58

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11ab0
  %v1_11ad4 = urem i32 %v6_11ac8, 8
  store i32 %v1_11ad4, i32* %r2.global-to-local, align 4
  %v2_11ad4 = icmp eq i32 %v1_11ad4, 0
  br i1 %v2_11ad4, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11ad4
  %v2_11ad8 = sub nsw i32 8, %v1_11ad4
  store i32 %v2_11ad8, i32* %r3.global-to-local, align 4
  %v2_11adc = load i32, i32* @r4, align 4
  %v3_11adc = sub i32 %v2_11adc, %v2_11ad8
  %v3_11ae0 = add i32 %v2_11ad8, %v6_11ac8
  store i32 %v3_11ae0, i32* %lr.global-to-local, align 4
  %v2_11ae8 = or i32 %v3_11adc, 2
  store i32 %v2_11ae8, i32* %r2.global-to-local, align 4
  %v5_11af0 = inttoptr i32 %v3_11ae0 to i32*
  store i32 %v2_11ad8, i32* %v5_11af0, align 4
  %v1_11af4 = load i32, i32* %r2.global-to-local, align 4
  %v2_11af4 = load i32, i32* %lr.global-to-local, align 4
  %v3_11af4 = add i32 %v2_11af4, 4
  %v4_11af4 = inttoptr i32 %v3_11af4 to i32*
  store i32 %v1_11af4, i32* %v4_11af4, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11ad4
  store i32 %v6_11ac8, i32* %lr.global-to-local, align 4
  %v1_11aec47 = load i32, i32* @r4, align 4
  %v2_11aec48 = or i32 %v1_11aec47, 2
  store i32 %v2_11aec48, i32* %r3.global-to-local, align 4
  %v3_11af8 = inttoptr i32 %v6_11ac8 to i32*
  store i32 0, i32* %v3_11af8, align 4
  %v1_11afc = load i32, i32* %r3.global-to-local, align 4
  %v2_11afc = load i32, i32* %lr.global-to-local, align 4
  %v3_11afc = add i32 %v2_11afc, 4
  %v4_11afc = inttoptr i32 %v3_11afc to i32*
  store i32 %v1_11afc, i32* %v4_11afc, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 124088, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11b08 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11b08, i32* %ip.global-to-local, align 4
  %v1_11b0c = add i32 %v4_11b08, 848
  %v2_11b0c = inttoptr i32 %v1_11b0c to i32*
  %v3_11b0c = load i32, i32* %v2_11b0c, align 4
  store i32 %v3_11b0c, i32* %r3.global-to-local, align 4
  %v1_11b10 = add i32 %v4_11b08, 856
  %v2_11b10 = inttoptr i32 %v1_11b10 to i32*
  %v3_11b10 = load i32, i32* %v2_11b10, align 4
  store i32 %v3_11b10, i32* %r2.global-to-local, align 4
  %v1_11b14 = add i32 %v3_11b0c, 1
  store i32 %v1_11b14, i32* %r3.global-to-local, align 4
  %v7_11b1c = icmp sgt i32 %v1_11b14, %v3_11b10
  br i1 %v7_11b1c, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11b14, i32* %v2_11b10, align 4
  %v0_11b20.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11b20.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_11b20 = phi i32 [ %v4_11b08, %.thread27 ], [ %v1_11b20.pre, %bb147 ]
  %v0_11b20 = phi i32 [ %v1_11b14, %.thread27 ], [ %v0_11b20.pre, %bb147 ]
  %v2_11b20 = add i32 %v1_11b20, 848
  %v3_11b20 = inttoptr i32 %v2_11b20 to i32*
  store i32 %v0_11b20, i32* %v3_11b20, align 4
  %v0_11b24 = load i32, i32* %ip.global-to-local, align 4
  %v1_11b24 = add i32 %v0_11b24, 868
  %v2_11b24 = inttoptr i32 %v1_11b24 to i32*
  %v3_11b24 = load i32, i32* %v2_11b24, align 4
  store i32 %v3_11b24, i32* %r3.global-to-local, align 4
  %v1_11b28 = add i32 %v0_11b24, 880
  %v2_11b28 = inttoptr i32 %v1_11b28 to i32*
  %v3_11b28 = load i32, i32* %v2_11b28, align 4
  store i32 %v3_11b28, i32* %r2.global-to-local, align 4
  %v0_11b2c = load i32, i32* @r4, align 4
  %v2_11b2c = add i32 %v0_11b2c, %v3_11b24
  store i32 %v2_11b2c, i32* %r1.global-to-local, align 4
  %v1_11b30 = add i32 %v0_11b24, 872
  %v2_11b30 = inttoptr i32 %v1_11b30 to i32*
  %v3_11b30 = load i32, i32* %v2_11b30, align 4
  store i32 %v3_11b30, i32* %r3.global-to-local, align 4
  %v1_11b38 = add i32 %v0_11b24, 884
  %v2_11b38 = inttoptr i32 %v1_11b38 to i32*
  %v3_11b38 = load i32, i32* %v2_11b38, align 4
  store i32 %v3_11b38, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_11b2c, %v3_11b28
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_11b2c, i32* %v2_11b28, align 4
  %v0_11b40.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11b40.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_11b40 = phi i32 [ %v0_11b24, %bb148 ], [ %v1_11b40.pre, %bb149 ]
  %v0_11b40 = phi i32 [ %v2_11b2c, %bb148 ], [ %v0_11b40.pre, %bb149 ]
  %v2_11b40 = add i32 %v1_11b40, 868
  %v3_11b40 = inttoptr i32 %v2_11b40 to i32*
  store i32 %v0_11b40, i32* %v3_11b40, align 4
  %v0_11b44 = load i32, i32* %r1.global-to-local, align 4
  %v1_11b44 = load i32, i32* %r3.global-to-local, align 4
  %v2_11b44 = add i32 %v1_11b44, %v0_11b44
  store i32 %v2_11b44, i32* %r1.global-to-local, align 4
  %v1_11b48 = load i32, i32* %r2.global-to-local, align 4
  %v0_11b4c = load i32, i32* %lr.global-to-local, align 4
  %v1_11b4c = add i32 %v0_11b4c, 8
  store i32 %v1_11b4c, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_11b44, %v1_11b48
  br i1 %tmp213, label %bb151, label %dec_label_pc_11e58

bb151:                                            ; preds = %bb150
  %v5_11b50 = load i32, i32* %ip.global-to-local, align 4
  %v6_11b50 = add i32 %v5_11b50, 884
  %v7_11b50 = inttoptr i32 %v6_11b50 to i32*
  store i32 %v2_11b44, i32* %v7_11b50, align 4
  br label %dec_label_pc_11e58

dec_label_pc_11b58:                               ; preds = %dec_label_pc_11a9c, %dec_label_pc_11a7c, %dec_label_pc_11ab0.dec_label_pc_11b58_crit_edge, %dec_label_pc_11a8c
  %v1_11b7c = phi i32 [ %v1_11b7c.pre, %dec_label_pc_11ab0.dec_label_pc_11b58_crit_edge ], [ %v0_11a24, %dec_label_pc_11a8c ], [ %v0_11a24, %dec_label_pc_11a7c ], [ %v0_11a24, %dec_label_pc_11a9c ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_11b60 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11b60, i32* %r3.global-to-local, align 4
  %v1_11b64 = add i32 %v4_11b60, 44
  %v2_11b64 = inttoptr i32 %v1_11b64 to i32*
  %v3_11b64 = load i32, i32* %v2_11b64, align 4
  store i32 %v3_11b64, i32* %r0.global-to-local, align 4
  %v1_11b68 = add i32 %v4_11b60, 864
  %v2_11b68 = inttoptr i32 %v1_11b68 to i32*
  %v3_11b68 = load i32, i32* %v2_11b68, align 4
  store i32 %v3_11b68, i32* %r2.global-to-local, align 4
  %v1_11b6c = add i32 %v4_11b60, 840
  %v2_11b6c = inttoptr i32 %v1_11b6c to i32*
  %v3_11b6c = load i32, i32* %v2_11b6c, align 4
  store i32 %v3_11b6c, i32* %r3.global-to-local, align 4
  %v1_11b70 = add i32 %v3_11b64, 4
  %v2_11b70 = inttoptr i32 %v1_11b70 to i32*
  %v3_11b70 = load i32, i32* %v2_11b70, align 4
  store i32 %v3_11b70, i32* %r1.global-to-local, align 4
  %v1_11b78 = urem i32 %v3_11b68, 2
  %v2_11b78 = icmp eq i32 %v1_11b78, 0
  %v1_11b74 = add i32 %v1_11b7c, 16
  %v2_11b7c = add i32 %v1_11b74, %v3_11b6c
  store i32 %v2_11b7c, i32* %r3.global-to-local, align 4
  %v1_11b80 = and i32 %v3_11b70, -4
  store i32 %v1_11b80, i32* @r8, align 4
  br i1 %v2_11b78, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_11b58
  %v3_11b84 = sub i32 %v2_11b7c, %v1_11b80
  store i32 %v3_11b84, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_11b58, %bb152
  %v0_11b88 = phi i32 [ %v2_11b7c, %dec_label_pc_11b58 ], [ %v3_11b84, %bb152 ]
  %v1_11b88 = load i32, i32* %sb.global-to-local, align 4
  %v2_11b88 = add i32 %v1_11b88, %v0_11b88
  store i32 %v2_11b88, i32* %r3.global-to-local, align 4
  %v1_11b8c = sub i32 -1, %v1_11b88
  store i32 %v1_11b8c, i32* %fp.global-to-local, align 4
  %v2_11b90 = and i32 %v2_11b88, %v1_11b8c
  store i32 %v2_11b90, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_11b90, 1
  br i1 %tmp154, label %dec_label_pc_11bb4, label %dec_label_pc_11ba0

dec_label_pc_11ba0:                               ; preds = %bb153
  store i32 %v2_11b90, i32* %r0.global-to-local, align 4
  %v1_11ba4 = call i32 @function_13af8(i32 %v2_11b90)
  store i32 %v1_11ba4, i32* %r0.global-to-local, align 4
  %v3_11ba8 = icmp eq i32 %v1_11ba4, -1
  store i32 %v1_11ba4, i32* @r4, align 4
  br i1 %v3_11ba8, label %dec_label_pc_11bb4, label %dec_label_pc_11c20

dec_label_pc_11bb4:                               ; preds = %dec_label_pc_11ba0, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11bbc = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11bbc, i32* %r6.global-to-local, align 4
  %v1_11bc0 = add i32 %v4_11bbc, 864
  %v2_11bc0 = inttoptr i32 %v1_11bc0 to i32*
  %v3_11bc0 = load i32, i32* %v2_11bc0, align 4
  store i32 %v3_11bc0, i32* %r3.global-to-local, align 4
  %v1_11bc4 = urem i32 %v3_11bc0, 2
  %v2_11bc4 = icmp eq i32 %v1_11bc4, 0
  br i1 %v2_11bc4, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_11bb4
  %v1_11bc8 = load i32, i32* @r8, align 4
  %v2_11bc8 = load i32, i32* %sb.global-to-local, align 4
  %v3_11bc8 = add i32 %v2_11bc8, %v1_11bc8
  %v2_11bcc = load i32, i32* @r5, align 4
  %v3_11bcc = add i32 %v3_11bc8, %v2_11bcc
  store i32 %v3_11bcc, i32* %r3.global-to-local, align 4
  %v2_11bd0 = load i32, i32* %fp.global-to-local, align 4
  %v3_11bd0 = and i32 %v2_11bd0, %v3_11bcc
  store i32 %v3_11bd0, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_11bb4
  %v0_11bd4.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_11bd4 = phi i32 [ %v0_11bd4.pr, %.thread29thread-pre-split ], [ %v3_11bd0, %bb155 ]
  %v2_11bd4 = icmp ugt i32 %v0_11bd4, 1048575
  br i1 %v2_11bd4, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_11bec = phi i32 [ %v0_11bd4, %.thread29 ], [ 1048576, %bb156 ]
  %v1_11bdc = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_11bec, %v1_11bdc
  br i1 %tmp214, label %dec_label_pc_11be4, label %dec_label_pc_11e48

dec_label_pc_11be4:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_11bec, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11c00 = call i32 @function_1386c(i32 0, i32 %v0_11bec, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11c00, i32* %r0.global-to-local, align 4
  %v3_11c04 = icmp eq i32 %v6_11c00, -1
  %v8_11c04 = icmp eq i32 %v6_11c00, -1
  store i32 %v6_11c00, i32* @r4, align 4
  br i1 %v8_11c04, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_11be4
  %v1_11c0c = load i32, i32* %r6.global-to-local, align 4
  %v2_11c0c = add i32 %v1_11c0c, 864
  %v3_11c0c = inttoptr i32 %v2_11c0c to i32*
  %v4_11c0c = load i32, i32* %v3_11c0c, align 4
  %v2_11c10 = load i32, i32* @r5, align 4
  %v3_11c10 = add i32 %v2_11c10, %v6_11c00
  store i32 %v3_11c10, i32* %r0.global-to-local, align 4
  %v2_11c14 = and i32 %v4_11c0c, -2
  store i32 %v2_11c14, i32* %r3.global-to-local, align 4
  store i32 %v2_11c14, i32* %v3_11c0c, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_11be4, %bb158
  br i1 %v3_11c04, label %dec_label_pc_11c20, label %dec_label_pc_11c24

dec_label_pc_11c20:                               ; preds = %.thread32, %dec_label_pc_11ba0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %.thread32, %dec_label_pc_11c20
  %v0_11c24 = load i32, i32* @r4, align 4
  %v7_11c24 = icmp eq i32 %v0_11c24, -1
  br i1 %v7_11c24, label %dec_label_pc_11e48, label %dec_label_pc_11c2c

dec_label_pc_11c2c:                               ; preds = %dec_label_pc_11c24
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_11c34 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11c34, i32* %ip.global-to-local, align 4
  store i32 %v3_11b64, i32* %r2.global-to-local, align 4
  %v1_11c3c = add i32 %v4_11c34, 872
  %v2_11c3c = inttoptr i32 %v1_11c3c to i32*
  %v3_11c3c = load i32, i32* %v2_11c3c, align 4
  %v1_11c40 = load i32, i32* @r8, align 4
  %v2_11c40 = add i32 %v1_11c40, %v3_11b64
  store i32 %v2_11c40, i32* %r1.global-to-local, align 4
  %v0_11c44 = load i32, i32* @r5, align 4
  %v2_11c44 = add i32 %v0_11c44, %v3_11c3c
  store i32 %v2_11c44, i32* %r3.global-to-local, align 4
  %v9_11c48 = icmp eq i32 %v0_11c24, %v2_11c40
  br i1 %v9_11c48, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_11c2c
  store i32 %v2_11c44, i32* %v2_11c3c, align 4
  br label %dec_label_pc_11c64

bb159:                                            ; preds = %dec_label_pc_11c2c
  %v1_11c4c = load i32, i32* %r0.global-to-local, align 4
  %v8_11c4c = icmp eq i32 %v1_11c4c, -1
  store i32 %v2_11c44, i32* %v2_11c3c, align 4
  br i1 %v8_11c4c, label %.thread34, label %dec_label_pc_11c64

.thread34:                                        ; preds = %bb159
  %v1_11c54 = load i32, i32* @r5, align 4
  %v2_11c54 = load i32, i32* @r8, align 4
  %v3_11c54 = add i32 %v2_11c54, %v1_11c54
  %v2_11c58 = or i32 %v3_11c54, 1
  store i32 %v2_11c58, i32* %r3.global-to-local, align 4
  %v2_11c5c = load i32, i32* %r2.global-to-local, align 4
  %v3_11c5c = add i32 %v2_11c5c, 4
  %v4_11c5c = inttoptr i32 %v3_11c5c to i32*
  store i32 %v2_11c58, i32* %v4_11c5c, align 4
  br label %dec_label_pc_11ddc

dec_label_pc_11c64:                               ; preds = %bb159, %.thread122
  %v0_11c68.pr = load i32, i32* @r8, align 4
  %v0_11c64 = load i32, i32* %ip.global-to-local, align 4
  %v1_11c64 = add i32 %v0_11c64, 864
  %v2_11c64 = inttoptr i32 %v1_11c64 to i32*
  %v3_11c64 = load i32, i32* %v2_11c64, align 4
  store i32 %v3_11c64, i32* %r2.global-to-local, align 4
  %v2_11c68 = icmp eq i32 %v0_11c68.pr, 0
  br i1 %v2_11c68, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_11c64
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_11c64
  %v2_11c70 = urem i32 %v3_11c64, 2
  store i32 %v2_11c70, i32* %r3.global-to-local, align 4
  %v2_11c74 = icmp eq i32 %v2_11c70, 0
  br i1 %v2_11c74, label %.thread40, label %dec_label_pc_11c7c

dec_label_pc_11c7c:                               ; preds = %.thread36
  %v0_11c7c = load i32, i32* @r4, align 4
  %v1_11c7c = load i32, i32* %r1.global-to-local, align 4
  %v3_11c7c = icmp ult i32 %v0_11c7c, %v1_11c7c
  br i1 %v3_11c7c, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11c7c
  %v2_11c80 = and i32 %v3_11c64, -2
  store i32 %v2_11c80, i32* %r3.global-to-local, align 4
  store i32 %v2_11c80, i32* %v2_11c64, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11c7c, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_11c90 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11c90, i32* @r7, align 4
  %v1_11c94 = add i32 %v4_11c90, 864
  %v2_11c94 = inttoptr i32 %v1_11c94 to i32*
  %v3_11c94 = load i32, i32* %v2_11c94, align 4
  store i32 %v3_11c94, i32* %r3.global-to-local, align 4
  %v1_11c98 = urem i32 %v3_11c94, 2
  store i32 %v1_11c98, i32* @r6, align 4
  %v2_11c98 = icmp eq i32 %v1_11c98, 0
  br i1 %v2_11c98, label %dec_label_pc_11d2c, label %dec_label_pc_11ca0

dec_label_pc_11ca0:                               ; preds = %.thread40
  %v0_11ca0 = load i32, i32* @r8, align 4
  %v2_11ca0 = icmp eq i32 %v0_11ca0, 0
  br i1 %v2_11ca0, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11ca0
  %v2_11ca4 = add i32 %v4_11c90, 872
  %v3_11ca4 = inttoptr i32 %v2_11ca4 to i32*
  %v4_11ca4 = load i32, i32* %v3_11ca4, align 4
  store i32 %v4_11ca4, i32* %r2.global-to-local, align 4
  %v1_11ca8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ca8 = load i32, i32* @r4, align 4
  %v3_11ca8 = sub i32 %v2_11ca8, %v1_11ca8
  %v3_11cac = add i32 %v3_11ca8, %v4_11ca4
  store i32 %v3_11cac, i32* %r3.global-to-local, align 4
  store i32 %v3_11cac, i32* %v3_11ca4, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11ca0, %bb161
  %v0_11cb4 = load i32, i32* @r4, align 4
  %v1_11cb4 = urem i32 %v0_11cb4, 8
  store i32 %v1_11cb4, i32* %r3.global-to-local, align 4
  %v2_11cb4 = icmp eq i32 %v1_11cb4, 0
  br i1 %v2_11cb4, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_11cb8 = sub nsw i32 8, %v1_11cb4
  store i32 %v2_11cb8, i32* %r3.global-to-local, align 4
  %v3_11cbc = add i32 %v2_11cb8, %v0_11cb4
  store i32 %v3_11cbc, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_11cc4 = phi i32 [ 0, %.thread43 ], [ %v2_11cb8, %bb162 ]
  %v1_11cc0 = load i32, i32* @r5, align 4
  %v2_11cc0 = add i32 %v1_11cc0, %v0_11cb4
  store i32 %v2_11cc0, i32* @r6, align 4
  %v1_11cc4 = load i32, i32* @r8, align 4
  %v2_11cc4 = add i32 %v2_11cc0, %v0_11cc4
  %v2_11cc8 = add i32 %v2_11cc4, %v1_11cc4
  store i32 %v2_11cc8, i32* %r1.global-to-local, align 4
  %v1_11ccc = load i32, i32* %sb.global-to-local, align 4
  %v2_11ccc = add i32 %v1_11ccc, %v2_11cc8
  %v1_11cd0 = load i32, i32* %fp.global-to-local, align 4
  %v2_11cd0 = and i32 %v1_11cd0, %v2_11ccc
  store i32 %v2_11cd0, i32* %r2.global-to-local, align 4
  %v2_11cd4 = sub i32 0, %v2_11cc0
  store i32 %v2_11cd4, i32* %r3.global-to-local, align 4
  %v2_11cd8 = sub i32 %v2_11cd0, %v2_11cc0
  store i32 %v2_11cd8, i32* @r5, align 4
  store i32 %v2_11cd8, i32* %r0.global-to-local, align 4
  br i1 %v2_11cb4, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_11cb4, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_11ce4 = call i32 @function_13af8(i32 %v2_11cd8)
  store i32 %v1_11ce4, i32* %r0.global-to-local, align 4
  %v3_11ce8 = icmp eq i32 %v1_11ce4, -1
  br i1 %v3_11ce8, label %dec_label_pc_11cf0, label %dec_label_pc_11d00

dec_label_pc_11cf0:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11cf4 = call i32 @function_13af8(i32 0)
  store i32 %v1_11cf4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_11d58

dec_label_pc_11d00:                               ; preds = %bb164
  %v1_11d00 = load i32, i32* @r4, align 4
  %v3_11d00 = icmp ult i32 %v1_11ce4, %v1_11d00
  br i1 %v3_11d00, label %dec_label_pc_11d08, label %dec_label_pc_11d58

dec_label_pc_11d08:                               ; preds = %dec_label_pc_11d00
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r0.global-to-local, align 4
  %v4_11d10 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11d10, i32* %r2.global-to-local, align 4
  %v1_11d14 = add i32 %v4_11d10, 864
  %v2_11d14 = inttoptr i32 %v1_11d14 to i32*
  %v3_11d14 = load i32, i32* %v2_11d14, align 4
  %v0_11d18 = load i32, i32* @r6, align 4
  store i32 %v0_11d18, i32* %r0.global-to-local, align 4
  %v1_11d1c = and i32 %v3_11d14, -2
  store i32 %v1_11d1c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_11d1c, i32* %v2_11d14, align 4
  br label %dec_label_pc_11d58

dec_label_pc_11d2c:                               ; preds = %.thread40
  %v0_11d2c = load i32, i32* %r0.global-to-local, align 4
  %v3_11d2c = icmp eq i32 %v0_11d2c, -1
  br i1 %v3_11d2c, label %dec_label_pc_11d34, label %dec_label_pc_11d50

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d2c
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11d38 = call i32 @function_13af8(i32 0)
  store i32 %v1_11d38, i32* %r0.global-to-local, align 4
  %v0_11d3c = load i32, i32* @r7, align 4
  %v1_11d3c = add i32 %v0_11d3c, 872
  %v2_11d3c = inttoptr i32 %v1_11d3c to i32*
  %v3_11d3c = load i32, i32* %v2_11d3c, align 4
  store i32 %v3_11d3c, i32* %r2.global-to-local, align 4
  %v0_11d40 = load i32, i32* @r4, align 4
  %v0_11d44 = load i32, i32* @r5, align 4
  %v2_11d40 = add i32 %v3_11d3c, %v1_11d38
  %v2_11d44 = sub i32 %v2_11d40, %v0_11d40
  %v2_11d48 = sub i32 %v2_11d44, %v0_11d44
  store i32 %v2_11d48, i32* %r3.global-to-local, align 4
  store i32 %v2_11d48, i32* %v2_11d3c, align 4
  %v0_11d54.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d2c, %dec_label_pc_11d34
  %v0_11d54 = phi i32 [ 0, %dec_label_pc_11d2c ], [ %v0_11d54.pre, %dec_label_pc_11d34 ]
  %v0_11d50 = load i32, i32* @r4, align 4
  store i32 %v0_11d50, i32* @r7, align 4
  store i32 %v0_11d54, i32* @r5, align 4
  br label %dec_label_pc_11d58

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d00, %dec_label_pc_11d08, %dec_label_pc_11cf0, %dec_label_pc_11d50
  %v0_11d58 = load i32, i32* %r0.global-to-local, align 4
  %v7_11d58 = icmp eq i32 %v0_11d58, -1
  br i1 %v7_11d58, label %dec_label_pc_11ddc, label %dec_label_pc_11d60

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d58
  %v1_11d60 = load i32, i32* @r5, align 4
  %v2_11d60 = add i32 %v1_11d60, %v0_11d58
  %v0_11d64 = load i32, i32* @r7, align 4
  %v2_11d64 = sub i32 %v2_11d60, %v0_11d64
  %v1_11d68 = or i32 %v2_11d64, 1
  %v2_11d6c = add i32 %v0_11d64, 4
  %v3_11d6c = inttoptr i32 %v2_11d6c to i32*
  store i32 %v1_11d68, i32* %v3_11d6c, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11d78 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11d78, i32* @r6, align 4
  %v1_11d7c = add i32 %v4_11d78, 872
  %v2_11d7c = inttoptr i32 %v1_11d7c to i32*
  %v3_11d7c = load i32, i32* %v2_11d7c, align 4
  %v0_11d80 = load i32, i32* @r8, align 4
  %v2_11d80 = icmp eq i32 %v0_11d80, 0
  %v0_11d84 = load i32, i32* @r5, align 4
  %v2_11d84 = add i32 %v0_11d84, %v3_11d7c
  store i32 %v2_11d84, i32* %r3.global-to-local, align 4
  store i32 %v2_11d84, i32* %v2_11d7c, align 4
  %v0_11d8c = load i32, i32* @r7, align 4
  %v1_11d8c = load i32, i32* @r6, align 4
  %v2_11d8c = add i32 %v1_11d8c, 44
  %v3_11d8c = inttoptr i32 %v2_11d8c to i32*
  store i32 %v0_11d8c, i32* %v3_11d8c, align 4
  br i1 %v2_11d80, label %dec_label_pc_11ddc, label %dec_label_pc_11d94

dec_label_pc_11d94:                               ; preds = %dec_label_pc_11d60
  %v0_11d98 = load i32, i32* @r8, align 4
  %v1_11d98 = add i32 %v0_11d98, -12
  %v1_11d9c = and i32 %v1_11d98, -8
  store i32 %v3_11b64, i32* %ip.global-to-local, align 4
  %v2_11da4 = add i32 %v1_11d9c, %v3_11b64
  store i32 %v2_11da4, i32* %r1.global-to-local, align 4
  %v2_11da8 = icmp ugt i32 %v1_11d9c, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_11db0 = or i32 %v1_11d9c, 1
  store i32 %v1_11db0, i32* %r3.global-to-local, align 4
  store i32 %v1_11db0, i32* %v2_11b70, align 4
  %v0_11db8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11db8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11db8 = add i32 %v1_11db8, 8
  %v3_11db8 = inttoptr i32 %v2_11db8 to i32*
  store i32 %v0_11db8, i32* %v3_11db8, align 4
  %v0_11dbc = load i32, i32* %r2.global-to-local, align 4
  %v1_11dbc = load i32, i32* %r1.global-to-local, align 4
  %v2_11dbc = add i32 %v1_11dbc, 4
  %v3_11dbc = inttoptr i32 %v2_11dbc to i32*
  store i32 %v0_11dbc, i32* %v3_11dbc, align 4
  br i1 %v2_11da8, label %dec_label_pc_11dc4, label %dec_label_pc_11ddc

dec_label_pc_11dc4:                               ; preds = %dec_label_pc_11d94
  %v0_11dc4 = load i32, i32* @r6, align 4
  %v1_11dc4 = add i32 %v0_11dc4, 836
  %v2_11dc4 = inttoptr i32 %v1_11dc4 to i32*
  %v3_11dc4 = load i32, i32* %v2_11dc4, align 4
  store i32 %v3_11dc4, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_11dcc = load i32, i32* %ip.global-to-local, align 4
  %v1_11dcc = add i32 %v0_11dcc, 8
  store i32 %v1_11dcc, i32* @r0, align 4
  store i32 -1, i32* %v2_11dc4, align 4
  %v0_11dd4 = call i32 @function_125f0()
  store i32 %v0_11dd4, i32* %r0.global-to-local, align 4
  %v0_11dd8 = load i32, i32* @r4, align 4
  %v1_11dd8 = load i32, i32* @r6, align 4
  %v2_11dd8 = add i32 %v1_11dd8, 836
  %v3_11dd8 = inttoptr i32 %v2_11dd8 to i32*
  store i32 %v0_11dd8, i32* %v3_11dd8, align 4
  br label %dec_label_pc_11ddc

dec_label_pc_11ddc:                               ; preds = %.thread34, %dec_label_pc_11d94, %dec_label_pc_11d60, %dec_label_pc_11d58, %dec_label_pc_11dc4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r0.global-to-local, align 4
  %v4_11de4 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11de4, i32* %lr.global-to-local, align 4
  %v1_11de8 = add i32 %v4_11de4, 872
  store i32 %v1_11de8, i32* %r1.global-to-local, align 4
  %v1_11dec = inttoptr i32 %v1_11de8 to i32*
  %v2_11dec = load i32, i32* %v1_11dec, align 4
  store i32 %v2_11dec, i32* %r1.global-to-local, align 4
  %v3_11dec = add i32 %v4_11de4, 876
  %v4_11dec = inttoptr i32 %v3_11dec to i32*
  %v5_11dec = load i32, i32* %v4_11dec, align 4
  store i32 %v5_11dec, i32* %r3.global-to-local, align 4
  %v1_11df4 = add i32 %v4_11de4, 868
  %v2_11df4 = inttoptr i32 %v1_11df4 to i32*
  %v3_11df4 = load i32, i32* %v2_11df4, align 4
  store i32 %v3_11df4, i32* %r3.global-to-local, align 4
  %v1_11df8 = add i32 %v4_11de4, 884
  %v2_11df8 = inttoptr i32 %v1_11df8 to i32*
  %v3_11df8 = load i32, i32* %v2_11df8, align 4
  store i32 %v3_11df8, i32* %r2.global-to-local, align 4
  %v2_11dfc = add i32 %v3_11df4, %v2_11dec
  store i32 %v2_11dfc, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_11dec, %v5_11dec
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_11ddc
  store i32 %v2_11dec, i32* %v4_11dec, align 4
  %v0_11e04.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11e04.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_11ddc, %bb165
  %v1_11e04 = phi i32 [ %v3_11df8, %dec_label_pc_11ddc ], [ %v1_11e04.pre, %bb165 ]
  %v4_11e08 = phi i32 [ %v2_11dfc, %dec_label_pc_11ddc ], [ %v0_11e04.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_11e08, %v1_11e04
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_11e08 = load i32, i32* %lr.global-to-local, align 4
  %v6_11e08 = add i32 %v5_11e08, 884
  %v7_11e08 = inttoptr i32 %v6_11e08 to i32*
  store i32 %v4_11e08, i32* %v7_11e08, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_11e0c = load i32, i32* %lr.global-to-local, align 4
  %v1_11e0c = add i32 %v0_11e0c, 44
  %v2_11e0c = inttoptr i32 %v1_11e0c to i32*
  %v3_11e0c = load i32, i32* %v2_11e0c, align 4
  store i32 %v3_11e0c, i32* %ip.global-to-local, align 4
  %v1_11e10 = add i32 %v3_11e0c, 4
  %v2_11e10 = inttoptr i32 %v1_11e10 to i32*
  %v3_11e10 = load i32, i32* %v2_11e10, align 4
  store i32 %v1_11a24, i32* %r1.global-to-local, align 4
  %v1_11e18 = and i32 %v3_11e10, -4
  store i32 %v1_11e18, i32* %r3.global-to-local, align 4
  %v3_11e1c = icmp ult i32 %v1_11e18, %v1_11a24
  br i1 %v3_11e1c, label %dec_label_pc_11e48, label %dec_label_pc_11e24

dec_label_pc_11e24:                               ; preds = %bb168
  %v0_11e24 = load i32, i32* @sl, align 4
  %v2_11e24 = sub i32 %v1_11e18, %v0_11e24
  %v2_11e28 = add i32 %v0_11e24, %v3_11e0c
  store i32 %v2_11e28, i32* %r1.global-to-local, align 4
  %v1_11e2c = or i32 %v2_11e24, 1
  store i32 %v1_11e2c, i32* %r3.global-to-local, align 4
  %v1_11e30 = or i32 %v0_11e24, 1
  store i32 %v1_11e30, i32* %r2.global-to-local, align 4
  %v1_11e34 = add i32 %v3_11e0c, 8
  store i32 %v1_11e34, i32* %r0.global-to-local, align 4
  store i32 %v1_11e30, i32* %v2_11e10, align 4
  %v0_11e3c = load i32, i32* %r1.global-to-local, align 4
  %v1_11e3c = load i32, i32* %lr.global-to-local, align 4
  %v2_11e3c = add i32 %v1_11e3c, 44
  %v3_11e3c = inttoptr i32 %v2_11e3c to i32*
  store i32 %v0_11e3c, i32* %v3_11e3c, align 4
  %v0_11e40 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e40 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e40 = add i32 %v1_11e40, 4
  %v3_11e40 = inttoptr i32 %v2_11e40 to i32*
  store i32 %v0_11e40, i32* %v3_11e40, align 4
  br label %dec_label_pc_11e58

dec_label_pc_11e48:                               ; preds = %bb157, %bb168, %dec_label_pc_11c24
  %v0_11e48 = call i32 @function_10f8c()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11e50 = inttoptr i32 %v0_11e48 to i32*
  store i32 12, i32* %v2_11e50, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %bb151, %bb150, %dec_label_pc_11e24, %dec_label_pc_11a6c, %dec_label_pc_11e48
  %v0_11e58 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11e58, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %.thread1, %dec_label_pc_11a38, %.thread121, %dec_label_pc_118a8, %dec_label_pc_1189c, %dec_label_pc_11704, %dec_label_pc_11688, %dec_label_pc_11e58
  store i32 %v2_115b0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_11e6c = load i32, i32* inttoptr (i32 124112 to i32*), align 16
  store i32 %v4_11e6c, i32* @ip, align 4
  store i32 73336, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11e6c)
  br label %dec_label_pc_11e78

dec_label_pc_11e78:                               ; preds = %dec_label_pc_115e8, %dec_label_pc_11e5c
  %v0_11e78 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11e78, i32* %r0.global-to-local, align 4
  store i32 %v3_11584, i32* @r4, align 4
  store i32 %v6_11584, i32* @r5, align 4
  store i32 %v9_11584, i32* @r6, align 4
  store i32 %v12_11584, i32* @r7, align 4
  store i32 %v15_11584, i32* @r8, align 4
  store i32 %v18_11584, i32* @sb, align 4
  store i32 %v21_11584, i32* @sl, align 4
  store i32 %v24_11584, i32* @fp, align 4
  store i32 %v27_11584, i32* @lr, align 4
  ret i32 %v0_11e78

; uselistorder directives
  uselistorder i32 %v0_11e24, { 1, 0, 2 }
  uselistorder i32 %v3_11e0c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11e08, { 1, 0 }
  uselistorder i32 %v2_11dec, { 2, 0, 1, 3 }
  uselistorder i32 %v4_11de4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_11d9c, { 1, 2, 0 }
  uselistorder i32 %v0_11d64, { 1, 0 }
  uselistorder i32 %v0_11d58, { 1, 0 }
  uselistorder i32 %v2_11d48, { 1, 0 }
  uselistorder i32 %v2_11cd8, { 2, 1, 0 }
  uselistorder i32 %v2_11cc0, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11cb8, { 1, 0, 2 }
  uselistorder i32 %v1_11cb4, { 2, 1, 0 }
  uselistorder i32 %v0_11cb4, { 3, 1, 2, 0 }
  uselistorder i32 %v1_11c98, { 1, 0 }
  uselistorder i32 %v2_11c70, { 1, 0 }
  uselistorder i32 %v3_11c64, { 1, 0, 2 }
  uselistorder i32 %v2_11c44, { 1, 0, 2 }
  uselistorder i32* %v2_11c3c, { 1, 0, 2 }
  uselistorder i32 %v0_11c24, { 1, 0 }
  uselistorder i32 %v6_11c00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11bec, { 2, 1, 0 }
  uselistorder i32 %v0_11bd4, { 1, 0 }
  uselistorder i32 %v2_11b90, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11b8c, { 1, 0 }
  uselistorder i32 %v3_11b64, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11b44, { 1, 0, 2 }
  uselistorder i32 %v2_11b2c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11ad4, { 2, 1, 0 }
  uselistorder i32 %v6_11ac8, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11aa4, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11a64, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11a24, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11a1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11a18, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11a04, { 1, 0 }
  uselistorder i32 %v7_119c4, { 1, 0 }
  uselistorder i32 %v4_119c4, { 1, 0 }
  uselistorder i32 %v0_11994, { 1, 0 }
  uselistorder i32 %v2_11968, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1196454, { 1, 0 }
  uselistorder i32 %v1_11930, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11918., { 1, 2, 0 }
  uselistorder i32 %v0_11920, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11920, { 1, 0 }
  uselistorder i32 %v3_11900, { 1, 0 }
  uselistorder i32 %v4_118fc, { 1, 0, 2 }
  uselistorder i32 %v1_1186c, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_118c4, { 1, 0 }
  uselistorder i32 %v1_118a8, { 1, 0 }
  uselistorder i32 %v1_11748, { 1, 0 }
  uselistorder i32 %v0_11888, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11850, { 2, 0, 1, 3 }
  uselistorder i32 %v0_118e4.pre, { 1, 2, 0 }
  uselistorder i32 %v0_1182c, { 2, 1, 0 }
  uselistorder i32 %v3_11820, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_11740, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_117e8, { 1, 0 }
  uselistorder i32 %v3_117dc, { 1, 0 }
  uselistorder i32 %v0_117e8, { 1, 0 }
  uselistorder i32 %v3_117c0, { 0, 2, 3, 1 }
  uselistorder i32 %v2_117b0, { 1, 0, 2 }
  uselistorder i32 %v3_11768, { 2, 1, 0 }
  uselistorder i32 %v0_11758, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11728, { 1, 0 }
  uselistorder i32 %v1_116dc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_116d8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_1167c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11670, { 1, 0 }
  uselistorder i32 %v3_11640, { 1, 0 }
  uselistorder i32 %v0_11634, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11614, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11608, { 1, 0 }
  uselistorder i32 %v0_115e0, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 10, 0, 1, 2, 3, 4, 6, 5, 14, 15, 7, 16, 8, 9, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 0, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 90, 77, 78, 79, 80, 81, 83, 84, 85, 86, 2, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 107, 108, 109, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 54, 42, 43, 44, 45, 46, 55, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 8, 6, 30, 7, 9, 10, 1, 22, 14, 11, 23, 12, 13, 16, 15, 20, 17, 24, 19, 18, 25, 21, 0, 27, 26, 28, 2, 29, 31, 36, 32, 33, 5, 34, 35, 37, 38, 39, 42, 43, 40, 41, 48, 45, 44, 46, 47, 4, 3, 49, 50, 51, 52, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 42, 41, 28, 25, 1, 26, 27, 29, 36, 37, 38, 39, 40, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_1386c, { 1, 0 }
  uselistorder i32 (i32)* @function_1150c, { 1, 0 }
  uselistorder label %dec_label_pc_11e78, { 1, 0 }
  uselistorder label %dec_label_pc_11e5c, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_11e58, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_11e48, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_11ddc, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_11d58, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11d50, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11c24, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_11b58, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_11a10, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_11964, { 1, 0 }
  uselistorder label %dec_label_pc_1196c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11930, { 1, 0 }
  uselistorder label %dec_label_pc_118e4, { 1, 0 }
  uselistorder label %dec_label_pc_11878, { 1, 0 }
  uselistorder label %dec_label_pc_11874, { 1, 0 }
  uselistorder label %dec_label_pc_11820, { 1, 0 }
  uselistorder label %dec_label_pc_1180c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_117d4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_117c0, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_11e8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e8c:
  %v0_11e8c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11e8c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11e8c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11e8c, %bb
  %v10_11ea0 = phi i32 [ %arg1, %dec_label_pc_11e8c ], [ 0, %bb ]
  ret i32 %v10_11ea0

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11ea4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11ea4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_11ea4 = load i32, i32* @r4, align 4
  %v6_11ea4 = load i32, i32* @r5, align 4
  %v9_11ea4 = load i32, i32* @r6, align 4
  %v12_11ea4 = load i32, i32* @lr, align 4
  %v2_11eac = icmp eq i32 %arg1, 0
  store i32 124088, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11ebc = mul i32 %arg2, %arg1
  store i32 %v2_11ebc, i32* @r6, align 4
  br i1 %v2_11eac, label %dec_label_pc_11eec, label %dec_label_pc_11ec4

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_11ea4
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_11ebc, i32* @r0, align 4
  %v0_11ecc = call i32 @function_10600()
  %v0_11ed0 = load i32, i32* @r4, align 4
  %v9_11ed0 = icmp eq i32 %v0_11ed0, %v0_11ecc
  br i1 %v9_11ed0, label %dec_label_pc_11ec4.dec_label_pc_11eec_crit_edge, label %dec_label_pc_11ed8

dec_label_pc_11ec4.dec_label_pc_11eec_crit_edge:  ; preds = %dec_label_pc_11ec4
  %v0_11ef0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11eec

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11ec4
  %v0_11ed8 = call i32 @function_10f8c()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_11ee4 = inttoptr i32 %v0_11ed8 to i32*
  store i32 12, i32* %v2_11ee4, align 4
  br label %dec_label_pc_11fb0

dec_label_pc_11eec:                               ; preds = %dec_label_pc_11ec4.dec_label_pc_11eec_crit_edge, %dec_label_pc_11ea4
  %v0_11f08 = phi i32 [ %v0_11ef0.pre, %dec_label_pc_11ec4.dec_label_pc_11eec_crit_edge ], [ 124088, %dec_label_pc_11ea4 ]
  %v2_11ef0 = add i32 %v0_11f08, 68
  %v3_11ef0 = inttoptr i32 %v2_11ef0 to i32*
  %v4_11ef0 = load i32, i32* %v3_11ef0, align 4
  store i32 %v4_11ef0, i32* @r4, align 4
  %v2_11f08 = add i32 %v0_11f08, 72
  %v3_11f08 = inttoptr i32 %v2_11f08 to i32*
  %v4_11f08 = load i32, i32* %v3_11f08, align 4
  store i32 %v4_11f08, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11f08)
  %v0_11f1c = load i32, i32* @r5, align 4
  %v2_11f1c = add i32 %v0_11f1c, 16
  %v3_11f1c = inttoptr i32 %v2_11f1c to i32*
  %v4_11f1c = load i32, i32* %v3_11f1c, align 4
  store i32 %v4_11f1c, i32* %ip.global-to-local, align 4
  store i32 73512, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11f1c)
  %v0_11f28 = load i32, i32* @r6, align 4
  store i32 %v0_11f28, i32* @r0, align 4
  %v0_11f2c = call i32 @function_11584()
  store i32 %v0_11f2c, i32* %r4.global-to-local, align 4
  %v2_11f30 = icmp eq i32 %v0_11f2c, 0
  br i1 %v2_11f30, label %.thread, label %dec_label_pc_11f38

dec_label_pc_11f38:                               ; preds = %dec_label_pc_11eec
  %v1_11f38 = add i32 %v0_11f2c, -4
  %v2_11f38 = inttoptr i32 %v1_11f38 to i32*
  %v3_11f38 = load i32, i32* %v2_11f38, align 4
  %v1_11f3c = and i32 %v3_11f38, 2
  %v2_11f3c = icmp eq i32 %v1_11f3c, 0
  br i1 %v2_11f3c, label %dec_label_pc_11f44, label %.thread

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11f38
  %v1_11f447 = add i32 %v3_11f38, -4
  %v1_11f48 = and i32 %v1_11f447, -4
  store i32 %v1_11f48, i32* @r2, align 4
  %v3_11f4c = udiv i32 %v1_11f48, 4
  store i32 %v3_11f4c, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_11f48, 36
  %v2_11f54 = icmp ult i32 %v1_11f48, 33
  %v3_11f54 = or i1 %tmp, %v2_11f54
  br i1 %v3_11f54, label %dec_label_pc_11f60, label %dec_label_pc_11f58

dec_label_pc_11f58:                               ; preds = %dec_label_pc_11f44
  %v2_11f58 = inttoptr i32 %v0_11f2c to i8*
  %v3_11f58 = call i32 @function_10fe0(i8* %v2_11f58, i32 0)
  br label %.thread

dec_label_pc_11f60:                               ; preds = %dec_label_pc_11f44
  %tmp8 = icmp eq i32 %v1_11f48, 16
  %v2_11f64 = inttoptr i32 %v0_11f2c to i32*
  store i32 0, i32* %v2_11f64, align 4
  %v1_11f68 = load i32, i32* %r4.global-to-local, align 4
  %v2_11f68 = add i32 %v1_11f68, 4
  %v3_11f68 = inttoptr i32 %v2_11f68 to i32*
  store i32 0, i32* %v3_11f68, align 4
  %v1_11f6c = load i32, i32* %r4.global-to-local, align 4
  %v2_11f6c = add i32 %v1_11f6c, 8
  %v3_11f6c = inttoptr i32 %v2_11f6c to i32*
  store i32 0, i32* %v3_11f6c, align 4
  %v2_11f70 = icmp ult i32 %v1_11f48, 13
  %v3_11f70 = or i1 %tmp8, %v2_11f70
  br i1 %v3_11f70, label %.thread, label %dec_label_pc_11f74

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f60
  %v0_11f74 = load i32, i32* %ip.global-to-local, align 4
  %v1_11f78 = load i32, i32* %r4.global-to-local, align 4
  %v2_11f78 = add i32 %v1_11f78, 12
  %v3_11f78 = inttoptr i32 %v2_11f78 to i32*
  store i32 0, i32* %v3_11f78, align 4
  %v1_11f7c = load i32, i32* %r4.global-to-local, align 4
  %v2_11f7c = add i32 %v1_11f7c, 16
  %v3_11f7c = inttoptr i32 %v2_11f7c to i32*
  store i32 0, i32* %v3_11f7c, align 4
  %tmp9 = icmp ult i32 %v0_11f74, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_11f84

dec_label_pc_11f84:                               ; preds = %dec_label_pc_11f74
  %v0_11f84 = load i32, i32* %ip.global-to-local, align 4
  %v7_11f84 = icmp eq i32 %v0_11f84, 9
  %v1_11f88 = load i32, i32* %r4.global-to-local, align 4
  %v2_11f88 = add i32 %v1_11f88, 20
  %v3_11f88 = inttoptr i32 %v2_11f88 to i32*
  store i32 0, i32* %v3_11f88, align 4
  %v1_11f8c = load i32, i32* %r4.global-to-local, align 4
  %v2_11f8c = add i32 %v1_11f8c, 24
  %v3_11f8c = inttoptr i32 %v2_11f8c to i32*
  store i32 0, i32* %v3_11f8c, align 4
  br i1 %v7_11f84, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11f84
  %v2_11f90 = load i32, i32* %r4.global-to-local, align 4
  %v3_11f90 = add i32 %v2_11f90, 32
  %v4_11f90 = inttoptr i32 %v3_11f90 to i32*
  store i32 0, i32* %v4_11f90, align 4
  %v2_11f94 = load i32, i32* %r4.global-to-local, align 4
  %v3_11f94 = add i32 %v2_11f94, 28
  %v4_11f94 = inttoptr i32 %v3_11f94 to i32*
  store i32 0, i32* %v4_11f94, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11f84, %dec_label_pc_11f38, %dec_label_pc_11f74, %dec_label_pc_11f60, %dec_label_pc_11eec, %dec_label_pc_11f58, %bb
  %v0_11fa4 = load i32, i32* @r5, align 4
  %v2_11fa4 = add i32 %v0_11fa4, 24
  %v3_11fa4 = inttoptr i32 %v2_11fa4 to i32*
  %v4_11fa4 = load i32, i32* %v3_11fa4, align 4
  store i32 %v4_11fa4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_11fa4)
  br label %dec_label_pc_11fb0

dec_label_pc_11fb0:                               ; preds = %dec_label_pc_11ed8, %.thread
  %v0_11fb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_11ea4, i32* @r4, align 4
  store i32 %v6_11ea4, i32* @r5, align 4
  store i32 %v9_11ea4, i32* @r6, align 4
  store i32 %v12_11ea4, i32* @lr, align 4
  ret i32 %v0_11fb0

; uselistorder directives
  uselistorder i32 %v1_11f48, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_11f2c, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11fb0, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_11fc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_11fc4:
  %v0_11fc4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11fc4, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11fc4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11fc4, %bb
  %v10_11fd4 = phi i32 [ %arg1, %dec_label_pc_11fc4 ], [ 0, %bb ]
  ret i32 %v10_11fd4

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_11fd8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11fd8:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11fd8 = load i32, i32* @r4, align 4
  %v6_11fd8 = load i32, i32* @r5, align 4
  %v9_11fd8 = load i32, i32* @r6, align 4
  %v12_11fd8 = load i32, i32* @r7, align 4
  %v15_11fd8 = load i32, i32* @r8, align 4
  %v18_11fd8 = load i32, i32* @sb, align 4
  %v21_11fd8 = load i32, i32* @sl, align 4
  %v24_11fd8 = load i32, i32* @fp, align 4
  %v27_11fd8 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11fe4 = icmp eq i32* %arg1, null
  store i32 124088, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_11fe4, label %dec_label_pc_11ff8, label %dec_label_pc_12008

dec_label_pc_11ff8:                               ; preds = %dec_label_pc_11fd8
  store i32 %arg2, i32* @r0, align 4
  %v0_11ffc = call i32 @function_11584()
  store i32 %v0_11ffc, i32* %r0.global-to-local, align 4
  store i32 %v0_11ffc, i32* @r4, align 4
  br label %dec_label_pc_12360

dec_label_pc_12008:                               ; preds = %dec_label_pc_11fd8
  %v2_12008 = icmp eq i32 %arg2, 0
  br i1 %v2_12008, label %dec_label_pc_12010, label %dec_label_pc_1201c

dec_label_pc_12010:                               ; preds = %dec_label_pc_12008
  %v0_12010 = call i32 @function_125f0()
  store i32 %v0_12010, i32* %r0.global-to-local, align 4
  %v0_12014 = load i32, i32* @r6, align 4
  store i32 %v0_12014, i32* @r4, align 4
  br label %dec_label_pc_12360

dec_label_pc_1201c:                               ; preds = %dec_label_pc_12008
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12024 = load i32, i32* inttoptr (i32 124156 to i32*), align 4
  store i32 %v4_12024, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_12024, i32* %r2.global-to-local, align 4
  %v4_12030 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_12030, i32* %r1.global-to-local, align 4
  %v2_12034 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12034, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_1203c = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_1203c)
  %v0_12048 = load i32, i32* @r4, align 4
  store i32 %v0_12048, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_12054 = load i32, i32* inttoptr (i32 124104 to i32*), align 8
  store i32 %v4_12054, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12060.379 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12054)
  %v0_12060 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12060, -32
  br i1 %tmp36, label %dec_label_pc_1207c, label %dec_label_pc_12068

dec_label_pc_12068:                               ; preds = %dec_label_pc_1201c
  %v0_12068 = call i32 @function_10f8c()
  store i32 %v0_12068, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_12074 = inttoptr i32 %v0_12068 to i32*
  store i32 12, i32* %v2_12074, align 4
  br label %dec_label_pc_12360

dec_label_pc_1207c:                               ; preds = %dec_label_pc_1201c
  %v1_1207c = add i32 %v0_12060, 11
  store i32 %v1_1207c, i32* %r0.global-to-local, align 4
  %v0_12080 = load i32, i32* @r5, align 4
  %v1_12080 = add i32 %v0_12080, -4
  %v2_12080 = inttoptr i32 %v1_12080 to i32*
  %v3_12080 = load i32, i32* %v2_12080, align 4
  store i32 %v3_12080, i32* %r2.global-to-local, align 4
  %v2_12084 = icmp ugt i32 %v1_1207c, 14
  %v7_12084 = icmp eq i32 %v1_1207c, 15
  %v2_12088 = xor i1 %v2_12084, true
  %v3_12088 = or i1 %v7_12084, %v2_12088
  br i1 %v3_12088, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_1207c
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_1207c, %bb
  %v2_1208c = xor i1 %v7_12084, true
  %v3_1208c = and i1 %v2_12084, %v2_1208c
  br i1 %v3_1208c, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_1208c = and i32 %v1_1207c, -8
  store i32 %v5_1208c, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12090 = and i32 %v3_12080, 2
  %v2_12090 = icmp eq i32 %v1_12090, 0
  %v1_12094 = add i32 %v0_12080, -8
  store i32 %v1_12094, i32* @sl, align 4
  %v1_12098 = and i32 %v3_12080, -4
  store i32 %v1_12098, i32* @r6, align 4
  br i1 %v2_12090, label %dec_label_pc_120a0, label %dec_label_pc_12278

dec_label_pc_120a0:                               ; preds = %bb29
  %v1_120a0 = load i32, i32* @sb, align 4
  %v3_120a0 = icmp ult i32 %v1_12098, %v1_120a0
  br i1 %v3_120a0, label %dec_label_pc_120ac, label %bb30

bb30:                                             ; preds = %dec_label_pc_120a0
  store i32 %v1_12098, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12210

dec_label_pc_120ac:                               ; preds = %dec_label_pc_120a0
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_120b4 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_120b4, i32* %r0.global-to-local, align 4
  %v1_120b8 = add i32 %v4_120b4, 44
  %v2_120b8 = inttoptr i32 %v1_120b8 to i32*
  %v3_120b8 = load i32, i32* %v2_120b8, align 4
  store i32 %v3_120b8, i32* %r3.global-to-local, align 4
  %v2_120bc = add i32 %v1_12098, %v1_12094
  store i32 %v2_120bc, i32* @r4, align 4
  %v9_120c0 = icmp eq i32 %v2_120bc, %v3_120b8
  %v1_120c4 = add i32 %v2_120bc, 4
  %v2_120c4 = inttoptr i32 %v1_120c4 to i32*
  %v3_120c4 = load i32, i32* %v2_120c4, align 4
  store i32 %v3_120c4, i32* %r1.global-to-local, align 4
  br i1 %v9_120c0, label %dec_label_pc_120cc, label %dec_label_pc_12108

dec_label_pc_120cc:                               ; preds = %dec_label_pc_120ac
  %v1_120cc = and i32 %v3_120c4, -4
  %v2_120d0 = add i32 %v1_120cc, %v1_12098
  store i32 %v2_120d0, i32* %r1.global-to-local, align 4
  %v1_120d4 = add i32 %v1_120a0, 16
  store i32 %v1_120d4, i32* %r3.global-to-local, align 4
  %v3_120d8 = icmp ult i32 %v2_120d0, %v1_120d4
  br i1 %v3_120d8, label %dec_label_pc_1215c, label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120cc
  %v2_120e0 = sub i32 %v2_120d0, %v1_120a0
  %v1_120e4 = urem i32 %v3_12080, 2
  %v2_120e8 = add i32 %v1_120a0, %v1_12094
  store i32 %v2_120e8, i32* %r1.global-to-local, align 4
  %v2_120ec = or i32 %v1_120a0, %v1_120e4
  store i32 %v2_120ec, i32* %r2.global-to-local, align 4
  %v1_120f0 = or i32 %v2_120e0, 1
  store i32 %v1_120f0, i32* %r3.global-to-local, align 4
  store i32 %v0_12080, i32* @r4, align 4
  store i32 %v2_120ec, i32* %v2_12080, align 4
  %v0_120fc = load i32, i32* %r1.global-to-local, align 4
  %v1_120fc = load i32, i32* %r0.global-to-local, align 4
  %v2_120fc = add i32 %v1_120fc, 44
  %v3_120fc = inttoptr i32 %v2_120fc to i32*
  store i32 %v0_120fc, i32* %v3_120fc, align 4
  %v0_12100 = load i32, i32* %r3.global-to-local, align 4
  %v1_12100 = load i32, i32* %r1.global-to-local, align 4
  %v2_12100 = add i32 %v1_12100, 4
  %v3_12100 = inttoptr i32 %v2_12100 to i32*
  store i32 %v0_12100, i32* %v3_12100, align 4
  br label %dec_label_pc_12344

dec_label_pc_12108:                               ; preds = %dec_label_pc_120ac
  %v1_12108 = and i32 %v3_120c4, -2
  %v2_1210c = add i32 %v1_12108, %v2_120bc
  store i32 %v2_1210c, i32* %r3.global-to-local, align 4
  %v1_12110 = add i32 %v2_1210c, 4
  %v2_12110 = inttoptr i32 %v1_12110 to i32*
  %v3_12110 = load i32, i32* %v2_12110, align 4
  store i32 %v3_12110, i32* %r3.global-to-local, align 4
  %v1_12114 = urem i32 %v3_12110, 2
  %v2_12114 = icmp eq i32 %v1_12114, 0
  br i1 %v2_12114, label %dec_label_pc_1211c, label %dec_label_pc_1215c

dec_label_pc_1211c:                               ; preds = %dec_label_pc_12108
  %v1_1211c = and i32 %v3_120c4, -4
  store i32 %v1_1211c, i32* %r3.global-to-local, align 4
  %v2_12120 = add i32 %v1_1211c, %v1_12098
  store i32 %v2_12120, i32* %r0.global-to-local, align 4
  %v3_12124 = icmp ult i32 %v2_12120, %v1_120a0
  br i1 %v3_12124, label %dec_label_pc_1215c, label %dec_label_pc_1212c

dec_label_pc_1212c:                               ; preds = %dec_label_pc_1211c
  %v1_1212c = add i32 %v1_12098, %v0_12080
  %v2_1212c = inttoptr i32 %v1_1212c to i32*
  %v3_1212c = load i32, i32* %v2_1212c, align 4
  store i32 %v3_1212c, i32* %r1.global-to-local, align 4
  %v1_12130 = add i32 %v3_1212c, 12
  %v2_12130 = inttoptr i32 %v1_12130 to i32*
  %v3_12130 = load i32, i32* %v2_12130, align 4
  store i32 %v3_12130, i32* %r3.global-to-local, align 4
  %v9_12134 = icmp eq i32 %v3_12130, %v2_120bc
  %v1_12138 = add i32 %v2_120bc, 12
  %v2_12138 = inttoptr i32 %v1_12138 to i32*
  %v3_12138 = load i32, i32* %v2_12138, align 4
  store i32 %v3_12138, i32* %r2.global-to-local, align 4
  br i1 %v9_12134, label %dec_label_pc_12140, label %dec_label_pc_1214c

dec_label_pc_12140:                               ; preds = %dec_label_pc_1212c
  %v1_12140 = add i32 %v3_12138, 8
  %v2_12140 = inttoptr i32 %v1_12140 to i32*
  %v3_12140 = load i32, i32* %v2_12140, align 4
  store i32 %v3_12140, i32* %r3.global-to-local, align 4
  %v9_12144 = icmp eq i32 %v3_12140, %v2_120bc
  br i1 %v9_12144, label %dec_label_pc_12150, label %dec_label_pc_1214c

dec_label_pc_1214c:                               ; preds = %dec_label_pc_1212c, %dec_label_pc_12140
  %v0_1214c = call i32 @function_1286c()
  store i32 %v0_1214c, i32* %r0.global-to-local, align 4
  %v0_12150.pre = load i32, i32* @r1, align 4
  %v1_12150.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12150

dec_label_pc_12150:                               ; preds = %dec_label_pc_12140, %dec_label_pc_1214c
  %v1_12150 = phi i32 [ %v3_12138, %dec_label_pc_12140 ], [ %v1_12150.pre, %dec_label_pc_1214c ]
  %v0_12150 = phi i32 [ %v3_1212c, %dec_label_pc_12140 ], [ %v0_12150.pre, %dec_label_pc_1214c ]
  %v2_12150 = add i32 %v1_12150, 8
  %v3_12150 = inttoptr i32 %v2_12150 to i32*
  store i32 %v0_12150, i32* %v3_12150, align 4
  %v0_12154 = load i32, i32* %r2.global-to-local, align 4
  %v1_12154 = load i32, i32* %r1.global-to-local, align 4
  %v2_12154 = add i32 %v1_12154, 12
  %v3_12154 = inttoptr i32 %v2_12154 to i32*
  store i32 %v0_12154, i32* %v3_12154, align 4
  %v1_12210.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12210

dec_label_pc_1215c:                               ; preds = %dec_label_pc_120cc, %dec_label_pc_1211c, %dec_label_pc_12108
  %v1_1215c = add i32 %v1_120a0, -7
  store i32 %v1_1215c, i32* @r0, align 4
  %v0_12160 = call i32 @function_11584()
  store i32 %v0_12160, i32* @r0, align 4
  store i32 %v0_12160, i32* %r1.global-to-local, align 4
  %v2_12164 = icmp eq i32 %v0_12160, 0
  br i1 %v2_12164, label %bb31, label %dec_label_pc_12170

bb31:                                             ; preds = %dec_label_pc_1215c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12344

dec_label_pc_12170:                               ; preds = %dec_label_pc_1215c
  %v1_12178.pre = load i32, i32* @r4, align 4
  %v1_12170 = add i32 %v0_12160, -4
  %v2_12170 = inttoptr i32 %v1_12170 to i32*
  %v3_12170 = load i32, i32* %v2_12170, align 4
  store i32 %v3_12170, i32* @r3, align 4
  %v1_12174 = add i32 %v0_12160, -8
  store i32 %v1_12174, i32* @r7, align 4
  %v9_12178 = icmp eq i32 %v1_12174, %v1_12178.pre
  br i1 %v9_12178, label %.thread2, label %dec_label_pc_12188

.thread2:                                         ; preds = %dec_label_pc_12170
  %v2_1217c = and i32 %v3_12170, -4
  store i32 %v2_1217c, i32* %r3.global-to-local, align 4
  %v2_12180 = load i32, i32* @r6, align 4
  %v3_12180 = add i32 %v2_12180, %v2_1217c
  store i32 %v3_12180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12210

dec_label_pc_12188:                               ; preds = %dec_label_pc_12170
  %v0_12188 = load i32, i32* @r6, align 4
  %v1_12188 = add i32 %v0_12188, -4
  store i32 %v1_12188, i32* @r2, align 4
  %v3_1218c = udiv i32 %v1_12188, 4
  store i32 %v3_1218c, i32* @ip, align 4
  %tmp37 = and i32 %v1_12188, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12194 = icmp ult i32 %v1_12188, 36
  %v3_12194 = or i1 %tmp38, %v2_12194
  %v0_121a4 = load i32, i32* @r5, align 4
  br i1 %v3_12194, label %dec_label_pc_121a4, label %dec_label_pc_12198

dec_label_pc_12198:                               ; preds = %dec_label_pc_12188
  store i32 %v0_121a4, i32* @r1, align 4
  %v0_1219c = call i32 @function_11090()
  store i32 %v0_1219c, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_121a4:                               ; preds = %dec_label_pc_12188
  %v1_121a4 = inttoptr i32 %v0_121a4 to i32*
  %v2_121a4 = load i32, i32* %v1_121a4, align 4
  store i32 %v2_121a4, i32* %r3.global-to-local, align 4
  %v2_121a8 = inttoptr i32 %v0_12160 to i32*
  store i32 %v2_121a4, i32* %v2_121a8, align 4
  %v0_121ac = load i32, i32* @r5, align 4
  %v1_121ac = add i32 %v0_121ac, 4
  %v2_121ac = inttoptr i32 %v1_121ac to i32*
  %v3_121ac = load i32, i32* %v2_121ac, align 4
  store i32 %v3_121ac, i32* %r3.global-to-local, align 4
  %v1_121b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_121b0 = add i32 %v1_121b0, 4
  %v3_121b0 = inttoptr i32 %v2_121b0 to i32*
  store i32 %v3_121ac, i32* %v3_121b0, align 4
  %v0_121b4 = load i32, i32* @r5, align 4
  %v1_121b4 = add i32 %v0_121b4, 8
  %v2_121b4 = inttoptr i32 %v1_121b4 to i32*
  %v3_121b4 = load i32, i32* %v2_121b4, align 4
  store i32 %v3_121b4, i32* %r3.global-to-local, align 4
  %v0_121b8 = load i32, i32* @ip, align 4
  %v1_121bc = load i32, i32* %r1.global-to-local, align 4
  %v2_121bc = add i32 %v1_121bc, 8
  %v3_121bc = inttoptr i32 %v2_121bc to i32*
  store i32 %v3_121b4, i32* %v3_121bc, align 4
  %tmp39 = icmp ult i32 %v0_121b8, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_121c4

dec_label_pc_121c4:                               ; preds = %dec_label_pc_121a4
  %v0_121c4 = load i32, i32* @r5, align 4
  %v1_121c4 = add i32 %v0_121c4, 12
  %v2_121c4 = inttoptr i32 %v1_121c4 to i32*
  %v3_121c4 = load i32, i32* %v2_121c4, align 4
  store i32 %v3_121c4, i32* %r3.global-to-local, align 4
  %v1_121c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_121c8 = add i32 %v1_121c8, 12
  %v3_121c8 = inttoptr i32 %v2_121c8 to i32*
  store i32 %v3_121c4, i32* %v3_121c8, align 4
  %v0_121cc = load i32, i32* @r5, align 4
  %v1_121cc = add i32 %v0_121cc, 16
  %v2_121cc = inttoptr i32 %v1_121cc to i32*
  %v3_121cc = load i32, i32* %v2_121cc, align 4
  store i32 %v3_121cc, i32* %r3.global-to-local, align 4
  %v0_121d0 = load i32, i32* @ip, align 4
  %v1_121d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_121d4 = add i32 %v1_121d4, 16
  %v3_121d4 = inttoptr i32 %v2_121d4 to i32*
  store i32 %v3_121cc, i32* %v3_121d4, align 4
  %tmp40 = icmp ult i32 %v0_121d0, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_121dc

dec_label_pc_121dc:                               ; preds = %dec_label_pc_121c4
  %v0_121dc = load i32, i32* @r5, align 4
  %v1_121dc = add i32 %v0_121dc, 20
  %v2_121dc = inttoptr i32 %v1_121dc to i32*
  %v3_121dc = load i32, i32* %v2_121dc, align 4
  store i32 %v3_121dc, i32* %r3.global-to-local, align 4
  %v1_121e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_121e0 = add i32 %v1_121e0, 20
  %v3_121e0 = inttoptr i32 %v2_121e0 to i32*
  store i32 %v3_121dc, i32* %v3_121e0, align 4
  %v0_121e4 = load i32, i32* @r5, align 4
  %v1_121e4 = add i32 %v0_121e4, 24
  %v2_121e4 = inttoptr i32 %v1_121e4 to i32*
  %v3_121e4 = load i32, i32* %v2_121e4, align 4
  store i32 %v3_121e4, i32* %r3.global-to-local, align 4
  %v1_121e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_121e8 = add i32 %v1_121e8, 24
  %v3_121e8 = inttoptr i32 %v2_121e8 to i32*
  store i32 %v3_121e4, i32* %v3_121e8, align 4
  %v0_121ec = load i32, i32* @ip, align 4
  %v7_121ec = icmp eq i32 %v0_121ec, 9
  br i1 %v7_121ec, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_121dc
  %v1_121f0 = load i32, i32* @r5, align 4
  %v2_121f0 = add i32 %v1_121f0, 28
  %v3_121f0 = inttoptr i32 %v2_121f0 to i32*
  %v4_121f0 = load i32, i32* %v3_121f0, align 4
  store i32 %v4_121f0, i32* %r3.global-to-local, align 4
  %v2_121f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_121f4 = add i32 %v2_121f4, 28
  %v4_121f4 = inttoptr i32 %v3_121f4 to i32*
  store i32 %v4_121f0, i32* %v4_121f4, align 4
  %v1_121f8 = load i32, i32* @r5, align 4
  %v2_121f8 = add i32 %v1_121f8, 32
  %v3_121f8 = inttoptr i32 %v2_121f8 to i32*
  %v4_121f8 = load i32, i32* %v3_121f8, align 4
  store i32 %v4_121f8, i32* %r3.global-to-local, align 4
  %v2_121fc = load i32, i32* %r1.global-to-local, align 4
  %v3_121fc = add i32 %v2_121fc, 32
  %v4_121fc = inttoptr i32 %v3_121fc to i32*
  store i32 %v4_121f8, i32* %v4_121fc, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_121dc, %dec_label_pc_121c4, %dec_label_pc_121a4, %dec_label_pc_12198, %bb32
  %v0_12200 = load i32, i32* @r5, align 4
  store i32 %v0_12200, i32* @r0, align 4
  %v0_12204 = call i32 @function_125f0()
  store i32 %v0_12204, i32* %r0.global-to-local, align 4
  %v0_12208 = load i32, i32* @r7, align 4
  %v1_12208 = add i32 %v0_12208, 8
  store i32 %v1_12208, i32* @r4, align 4
  br label %dec_label_pc_12344

dec_label_pc_12210:                               ; preds = %bb30, %.thread2, %dec_label_pc_12150
  %v0_12224 = phi i32 [ %v3_12180, %.thread2 ], [ %v1_12098, %bb30 ], [ %v1_12210.pre, %dec_label_pc_12150 ]
  %v0_12210 = load i32, i32* @sb, align 4
  %v2_12210 = sub i32 %v0_12224, %v0_12210
  store i32 %v2_12210, i32* %r1.global-to-local, align 4
  %v0_12218 = load i32, i32* @sl, align 4
  %v1_12218 = add i32 %v0_12218, 4
  %v2_12218 = inttoptr i32 %v1_12218 to i32*
  %v3_12218 = load i32, i32* %v2_12218, align 4
  %tmp41 = icmp ugt i32 %v2_12210, 15
  %v1_12240 = urem i32 %v3_12218, 2
  store i32 %v1_12240, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_12240, label %dec_label_pc_12220

dec_label_pc_12220:                               ; preds = %dec_label_pc_12210
  %v2_12224 = or i32 %v1_12240, %v0_12224
  store i32 %v2_12224, i32* %r3.global-to-local, align 4
  store i32 %v2_12224, i32* %v2_12218, align 4
  %v0_1222c = load i32, i32* @sl, align 4
  %v1_1222c = load i32, i32* %r0.global-to-local, align 4
  %v2_1222c = add i32 %v1_1222c, %v0_1222c
  store i32 %v2_1222c, i32* %r2.global-to-local, align 4
  %v1_12230 = add i32 %v2_1222c, 4
  %v2_12230 = inttoptr i32 %v1_12230 to i32*
  %v3_12230 = load i32, i32* %v2_12230, align 4
  %v1_12234 = or i32 %v3_12230, 1
  store i32 %v1_12234, i32* %r3.global-to-local, align 4
  store i32 %v1_12234, i32* %v2_12230, align 4
  br label %dec_label_pc_12270

dec_label_pc_12240:                               ; preds = %dec_label_pc_12210
  %v2_12244 = add i32 %v0_12218, %v0_12210
  store i32 %v2_12244, i32* %r0.global-to-local, align 4
  %v2_12248 = or i32 %v1_12240, %v0_12210
  store i32 %v2_12248, i32* %r3.global-to-local, align 4
  %v1_1224c = or i32 %v2_12210, 1
  store i32 %v1_1224c, i32* %r2.global-to-local, align 4
  store i32 %v2_12248, i32* %v2_12218, align 4
  %v0_12254 = load i32, i32* %r2.global-to-local, align 4
  %v1_12254 = load i32, i32* %r0.global-to-local, align 4
  %v2_12254 = add i32 %v1_12254, 4
  %v3_12254 = inttoptr i32 %v2_12254 to i32*
  store i32 %v0_12254, i32* %v3_12254, align 4
  %v0_12258 = load i32, i32* %r0.global-to-local, align 4
  %v1_12258 = load i32, i32* %r1.global-to-local, align 4
  %v2_12258 = add i32 %v1_12258, %v0_12258
  store i32 %v2_12258, i32* %r2.global-to-local, align 4
  %v1_1225c = add i32 %v2_12258, 4
  %v2_1225c = inttoptr i32 %v1_1225c to i32*
  %v3_1225c = load i32, i32* %v2_1225c, align 4
  %v1_12260 = or i32 %v3_1225c, 1
  store i32 %v1_12260, i32* %r3.global-to-local, align 4
  store i32 %v1_12260, i32* %v2_1225c, align 4
  %v0_12268 = load i32, i32* %r0.global-to-local, align 4
  %v1_12268 = add i32 %v0_12268, 8
  store i32 %v1_12268, i32* @r0, align 4
  %v0_1226c = call i32 @function_125f0()
  store i32 %v0_1226c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %dec_label_pc_12220, %dec_label_pc_12240
  %v0_12270 = load i32, i32* @sl, align 4
  %v1_12270 = add i32 %v0_12270, 8
  store i32 %v1_12270, i32* @r4, align 4
  br label %dec_label_pc_12344

dec_label_pc_12278:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_12280 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_12280, i32* @r8, align 4
  %v2_12284 = inttoptr i32 %v1_12094 to i32*
  %v3_12284 = load i32, i32* %v2_12284, align 4
  store i32 %v3_12284, i32* @r4, align 4
  %v1_12288 = add i32 %v4_12280, 860
  %v2_12288 = inttoptr i32 %v1_12288 to i32*
  %v3_12288 = load i32, i32* %v2_12288, align 4
  %v1_1228c = add i32 %v3_12284, 4
  %v1_12290 = add i32 %v3_12288, -1
  store i32 %v1_12290, i32* %r2.global-to-local, align 4
  %v2_12294 = add i32 %v1_1228c, %v1_12290
  %v1_12298 = load i32, i32* @sb, align 4
  %v2_12298 = add i32 %v2_12294, %v1_12298
  store i32 %v2_12298, i32* %r3.global-to-local, align 4
  %v2_1229c = sub i32 0, %v3_12288
  %v3_1229c = and i32 %v2_12298, %v2_1229c
  store i32 %v3_1229c, i32* @r7, align 4
  %v2_122a0 = sub i32 %v3_1229c, %v3_12284
  store i32 %v2_122a0, i32* @fp, align 4
  %v9_122a4 = icmp eq i32 %v1_12098, %v2_122a0
  br i1 %v9_122a4, label %dec_label_pc_12318, label %dec_label_pc_122ac

dec_label_pc_122ac:                               ; preds = %dec_label_pc_12278
  %v2_122ac = sub i32 %v1_12094, %v3_12284
  store i32 %v2_122ac, i32* %r0.global-to-local, align 4
  %v2_122b0 = add i32 %v3_12284, %v1_12098
  store i32 %v2_122b0, i32* %r1.global-to-local, align 4
  store i32 %v3_1229c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_122bc = call i32 @function_13e3c(i32 %v2_122ac, i32 %v2_122b0, i32 %v3_1229c, i32 1)
  store i32 %v4_122bc, i32* %r0.global-to-local, align 4
  %v7_122c0 = icmp eq i32 %v4_122bc, -1
  br i1 %v7_122c0, label %dec_label_pc_1230c, label %dec_label_pc_122c8

dec_label_pc_122c8:                               ; preds = %dec_label_pc_122ac
  %v1_122c8 = load i32, i32* @r4, align 4
  %v2_122c8 = add i32 %v1_122c8, %v4_122bc
  store i32 %v2_122c8, i32* %r0.global-to-local, align 4
  %v0_122cc = load i32, i32* @fp, align 4
  %v1_122cc = or i32 %v0_122cc, 2
  store i32 %v1_122cc, i32* %r3.global-to-local, align 4
  %v2_122d0 = add i32 %v2_122c8, 4
  %v3_122d0 = inttoptr i32 %v2_122d0 to i32*
  store i32 %v1_122cc, i32* %v3_122d0, align 4
  %v0_122d4 = load i32, i32* @r8, align 4
  %v1_122d4 = add i32 %v0_122d4, 868
  %v2_122d4 = inttoptr i32 %v1_122d4 to i32*
  %v3_122d4 = load i32, i32* %v2_122d4, align 4
  store i32 %v3_122d4, i32* %r3.global-to-local, align 4
  %v1_122d8 = add i32 %v0_122d4, 880
  %v2_122d8 = inttoptr i32 %v1_122d8 to i32*
  %v3_122d8 = load i32, i32* %v2_122d8, align 4
  store i32 %v3_122d8, i32* %r2.global-to-local, align 4
  %v0_122dc = load i32, i32* @r6, align 4
  %v2_122dc = sub i32 %v3_122d4, %v0_122dc
  store i32 %v2_122dc, i32* %r3.global-to-local, align 4
  %v1_122e0 = load i32, i32* @r7, align 4
  %v2_122e0 = add i32 %v1_122e0, %v2_122dc
  store i32 %v2_122e0, i32* %r1.global-to-local, align 4
  %v1_122e4 = add i32 %v0_122d4, 872
  %v2_122e4 = inttoptr i32 %v1_122e4 to i32*
  %v3_122e4 = load i32, i32* %v2_122e4, align 4
  store i32 %v3_122e4, i32* %r3.global-to-local, align 4
  %v1_122ec = add i32 %v0_122d4, 884
  %v2_122ec = inttoptr i32 %v1_122ec to i32*
  %v3_122ec = load i32, i32* %v2_122ec, align 4
  store i32 %v3_122ec, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_122e0, %v3_122d8
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_122c8
  store i32 %v2_122e0, i32* %v2_122d8, align 4
  %v0_122f4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_122f4.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_122c8, %bb33
  %v1_122f4 = phi i32 [ %v0_122d4, %dec_label_pc_122c8 ], [ %v1_122f4.pre, %bb33 ]
  %v0_122f4 = phi i32 [ %v2_122e0, %dec_label_pc_122c8 ], [ %v0_122f4.pre, %bb33 ]
  %v2_122f4 = add i32 %v1_122f4, 868
  %v3_122f4 = inttoptr i32 %v2_122f4 to i32*
  store i32 %v0_122f4, i32* %v3_122f4, align 4
  %v0_122f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_122f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_122f8 = add i32 %v1_122f8, %v0_122f8
  store i32 %v2_122f8, i32* %r1.global-to-local, align 4
  %v1_122fc = load i32, i32* %r2.global-to-local, align 4
  %v0_12300 = load i32, i32* %r0.global-to-local, align 4
  %v1_12300 = add i32 %v0_12300, 8
  store i32 %v1_12300, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_122f8, %v1_122fc
  br i1 %tmp43, label %bb35, label %dec_label_pc_12344

bb35:                                             ; preds = %bb34
  %v5_12304 = load i32, i32* @r8, align 4
  %v6_12304 = add i32 %v5_12304, 884
  %v7_12304 = inttoptr i32 %v6_12304 to i32*
  store i32 %v2_122f8, i32* %v7_12304, align 4
  br label %dec_label_pc_12344

dec_label_pc_1230c:                               ; preds = %dec_label_pc_122ac
  %v0_1230c = load i32, i32* @sb, align 4
  %v1_1230c = add i32 %v0_1230c, 4
  store i32 %v1_1230c, i32* %r3.global-to-local, align 4
  %v0_12310 = load i32, i32* @r6, align 4
  %v3_12310 = icmp ult i32 %v0_12310, %v1_1230c
  br i1 %v3_12310, label %dec_label_pc_12320, label %dec_label_pc_1230c.dec_label_pc_12318_crit_edge

dec_label_pc_1230c.dec_label_pc_12318_crit_edge:  ; preds = %dec_label_pc_1230c
  %v0_12318.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12318

dec_label_pc_12318:                               ; preds = %dec_label_pc_1230c.dec_label_pc_12318_crit_edge, %dec_label_pc_12278
  %v0_12318 = phi i32 [ %v0_12318.pre, %dec_label_pc_1230c.dec_label_pc_12318_crit_edge ], [ %v0_12080, %dec_label_pc_12278 ]
  store i32 %v0_12318, i32* @r4, align 4
  br label %dec_label_pc_12344

dec_label_pc_12320:                               ; preds = %dec_label_pc_1230c
  %v1_12320 = add i32 %v0_1230c, -7
  store i32 %v1_12320, i32* @r0, align 4
  %v0_12324 = call i32 @function_11584()
  store i32 %v0_12324, i32* @r0, align 4
  store i32 %v0_12324, i32* @r4, align 4
  %v2_12328 = icmp eq i32 %v0_12324, 0
  br i1 %v2_12328, label %dec_label_pc_12344, label %dec_label_pc_12330

dec_label_pc_12330:                               ; preds = %dec_label_pc_12320
  %v0_12330 = load i32, i32* @r6, align 4
  %v1_12330 = add i32 %v0_12330, -8
  store i32 %v1_12330, i32* @r2, align 4
  %v0_12334 = load i32, i32* @r5, align 4
  store i32 %v0_12334, i32* @r1, align 4
  %v0_12338 = call i32 @function_11090()
  %v0_1233c = load i32, i32* @r5, align 4
  store i32 %v0_1233c, i32* @r0, align 4
  %v0_12340 = call i32 @function_125f0()
  store i32 %v0_12340, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12344

dec_label_pc_12344:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12320, %dec_label_pc_12318, %dec_label_pc_12270, %.thread6, %dec_label_pc_120e0, %dec_label_pc_12330
  store i32 %v2_12034, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_12354 = load i32, i32* inttoptr (i32 124112 to i32*), align 16
  store i32 %v4_12354, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_12354)
  br label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_12068, %dec_label_pc_12010, %dec_label_pc_11ff8, %dec_label_pc_12344
  %v0_12360 = load i32, i32* @r4, align 4
  store i32 %v0_12360, i32* %r0.global-to-local, align 4
  store i32 %v3_11fd8, i32* @r4, align 4
  store i32 %v6_11fd8, i32* @r5, align 4
  store i32 %v9_11fd8, i32* @r6, align 4
  store i32 %v12_11fd8, i32* @r7, align 4
  store i32 %v15_11fd8, i32* @r8, align 4
  store i32 %v18_11fd8, i32* @sb, align 4
  store i32 %v21_11fd8, i32* @sl, align 4
  store i32 %v24_11fd8, i32* @fp, align 4
  store i32 %v27_11fd8, i32* @lr, align 4
  ret i32 %v0_12360

; uselistorder directives
  uselistorder i32 %v2_122f8, { 1, 0, 2 }
  uselistorder i32 %v2_122e0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_122bc, { 1, 0, 2 }
  uselistorder i32 %v3_1229c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12240, { 2, 1, 0 }
  uselistorder i32 %v2_12210, { 1, 0, 2 }
  uselistorder i32 %v0_121a4, { 1, 0 }
  uselistorder i32 %v0_12160, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_120c4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_120bc, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_120a0, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12098, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12094, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12084, { 1, 0 }
  uselistorder i32 %v0_12080, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12060, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 11, 7, 8, 9, 10, 20, 12, 14, 13, 21, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12360, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12344, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12270, { 1, 0 }
  uselistorder label %dec_label_pc_12210, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1215c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12150, { 1, 0 }
  uselistorder label %dec_label_pc_1214c, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12374(i32 %arg1) local_unnamed_addr {
dec_label_pc_12374:
  %v0_12374 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12374, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12374
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12374, %bb
  %v10_12388 = phi i32 [ %arg1, %dec_label_pc_12374 ], [ 0, %bb ]
  ret i32 %v10_12388

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1238c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1238c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_1238c = add i32 %arg2, 44
  %v2_1238c = inttoptr i32 %v1_1238c to i32*
  %v3_1238c = load i32, i32* %v2_1238c, align 4
  %v1_12394 = add i32 %v3_1238c, 4
  %v2_12394 = inttoptr i32 %v1_12394 to i32*
  %v3_12394 = load i32, i32* %v2_12394, align 4
  %v1_12398 = add i32 %arg2, 860
  %v2_12398 = inttoptr i32 %v1_12398 to i32*
  %v3_12398 = load i32, i32* %v2_12398, align 4
  store i32 %v3_12398, i32* @r4, align 4
  %v1_1239c = and i32 %v3_12394, -4
  store i32 %v1_1239c, i32* @r6, align 4
  %v1_123a0 = add i32 %v1_1239c, -17
  %v2_123a4 = add i32 %v1_123a0, %v3_12398
  store i32 %arg2, i32* @r5, align 4
  %v2_123b0 = sub i32 %v2_123a4, %arg1
  store i32 %v2_123b0, i32* @r0, align 4
  store i32 %v3_12398, i32* @r1, align 4
  %v0_123b8 = call i32 @function_10600()
  %v1_123bc = add i32 %v0_123b8, -1
  store i32 %v1_123bc, i32* %r0.global-to-local, align 4
  %v0_123c0 = load i32, i32* @r4, align 4
  %v2_123c0 = mul i32 %v0_123c0, %v1_123bc
  store i32 %v2_123c0, i32* %r7.global-to-local, align 4
  %v2_123c4 = icmp eq i32 %v2_123c0, 0
  store i1 %v2_123c4, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_123c0, 1
  br i1 %tmp8, label %dec_label_pc_1242c, label %dec_label_pc_123cc

dec_label_pc_123cc:                               ; preds = %dec_label_pc_1238c
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_123d0 = call i32 @function_13af8(i32 0)
  store i32 %v1_123d0, i32* %r0.global-to-local, align 4
  %v0_123d4 = load i32, i32* @r5, align 4
  %v1_123d4 = add i32 %v0_123d4, 44
  %v2_123d4 = inttoptr i32 %v1_123d4 to i32*
  %v3_123d4 = load i32, i32* %v2_123d4, align 4
  %v0_123d8 = load i32, i32* @r6, align 4
  %v2_123d8 = add i32 %v0_123d8, %v3_123d4
  %v9_123dc = icmp eq i32 %v1_123d0, %v2_123d8
  store i1 %v9_123dc, i1* @cpsr_z, align 1
  store i32 %v1_123d0, i32* @r4, align 4
  br i1 %v9_123dc, label %dec_label_pc_123e8, label %dec_label_pc_1242c

dec_label_pc_123e8:                               ; preds = %dec_label_pc_123cc
  %v0_123e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_123e8 = sub i32 0, %v0_123e8
  store i32 %v1_123e8, i32* %r0.global-to-local, align 4
  %v1_123ec = call i32 @function_13af8(i32 %v1_123e8)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_123f4 = call i32 @function_13af8(i32 0)
  store i32 %v1_123f4, i32* %r0.global-to-local, align 4
  %v7_123f8 = icmp eq i32 %v1_123f4, -1
  store i1 %v7_123f8, i1* @cpsr_z, align 1
  br i1 %v7_123f8, label %dec_label_pc_1242c, label %dec_label_pc_12400

dec_label_pc_12400:                               ; preds = %dec_label_pc_123e8
  %v0_12400 = load i32, i32* @r4, align 4
  %v2_12400 = sub i32 %v0_12400, %v1_123f4
  store i32 %v2_12400, i32* %r0.global-to-local, align 4
  %v9_12400 = icmp eq i32 %v0_12400, %v1_123f4
  store i1 %v9_12400, i1* @cpsr_z, align 1
  br i1 %v9_12400, label %dec_label_pc_1242c, label %dec_label_pc_12408

dec_label_pc_12408:                               ; preds = %dec_label_pc_12400
  %v0_12408 = load i32, i32* @r5, align 4
  %v1_12408 = add i32 %v0_12408, 872
  %v2_12408 = inttoptr i32 %v1_12408 to i32*
  %v3_12408 = load i32, i32* %v2_12408, align 4
  %v1_1240c = load i32, i32* @r6, align 4
  %v2_1240c = sub i32 %v1_1240c, %v2_12400
  store i32 %v2_1240c, i32* %r2.global-to-local, align 4
  %v1_12410 = add i32 %v0_12408, 44
  %v2_12410 = inttoptr i32 %v1_12410 to i32*
  %v3_12410 = load i32, i32* %v2_12410, align 4
  store i32 %v3_12410, i32* %r1.global-to-local, align 4
  %v2_12414 = sub i32 %v3_12408, %v2_12400
  %v1_12418 = or i32 %v2_1240c, 1
  store i32 %v1_12418, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12414, i32* %v2_12408, align 4
  %v0_12424 = load i32, i32* %r2.global-to-local, align 4
  %v1_12424 = load i32, i32* %r1.global-to-local, align 4
  %v2_12424 = add i32 %v1_12424, 4
  %v3_12424 = inttoptr i32 %v2_12424 to i32*
  store i32 %v0_12424, i32* %v3_12424, align 4
  %v1_12438.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12430

dec_label_pc_1242c:                               ; preds = %dec_label_pc_123cc, %dec_label_pc_12400, %dec_label_pc_123e8, %dec_label_pc_1238c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12430

dec_label_pc_12430:                               ; preds = %dec_label_pc_12408, %dec_label_pc_1242c
  %v1_12438 = phi i32 [ %v1_12438.pre, %dec_label_pc_12408 ], [ 0, %dec_label_pc_1242c ]
  ret i32 %v1_12438

; uselistorder directives
  uselistorder i1 %v7_123f8, { 1, 0 }
  uselistorder i32 %v1_123f4, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_13af8, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12430, { 1, 0 }
  uselistorder label %dec_label_pc_1242c, { 1, 2, 0, 3 }
}

define i32 @function_1243c() local_unnamed_addr {
dec_label_pc_1243c:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1243c = load i32, i32* @r4, align 4
  store i32 %v3_1243c, i32* %stack_var_-36, align 4
  %v0_12440 = load i32, i32* @r0, align 4
  %v1_12440 = inttoptr i32 %v0_12440 to i32*
  %v2_12440 = load i32, i32* %v1_12440, align 4
  store i32 %v2_12440, i32* %r3.global-to-local, align 4
  %v2_12444 = icmp eq i32 %v2_12440, 0
  store i32 %v0_12440, i32* @r4, align 4
  br i1 %v2_12444, label %dec_label_pc_1257c.preheader, label %dec_label_pc_12458

dec_label_pc_1257c.preheader:                     ; preds = %dec_label_pc_1243c
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1258425 = add i32 %v0_12440, 52
  store i32 %v1_1258425, i32* %r3.global-to-local, align 4
  %v2_1258c26 = add i32 %v0_12440, 60
  %v3_1258c27 = inttoptr i32 %v2_1258c26 to i32*
  store i32 %v1_1258425, i32* %v3_1258c27, align 4
  %v0_1259028 = load i32, i32* %r3.global-to-local, align 4
  %v2_1259029 = add i32 %v0_1259028, 12
  %v3_1259030 = inttoptr i32 %v2_1259029 to i32*
  store i32 %v0_1259028, i32* %v3_1259030, align 4
  br label %dec_label_pc_1257c.dec_label_pc_1257c_crit_edge

dec_label_pc_12458:                               ; preds = %dec_label_pc_1243c
  %v1_12458 = and i32 %v2_12440, -3
  %v3_1245c = udiv i32 %v2_12440, 8
  store i32 %v3_1245c, i32* %r2.global-to-local, align 4
  store i32 %v1_12458, i32* %v1_12440, align 4
  %v0_12464 = load i32, i32* @r0, align 4
  %v1_12464 = add i32 %v0_12464, -4
  store i32 %v1_12464, i32* %r3.global-to-local, align 4
  %v1_12468 = load i32, i32* %r2.global-to-local, align 4
  %v4_12468 = mul i32 %v1_12468, 4
  %v5_12468 = add i32 %v4_12468, %v1_12464
  store i32 %v5_12468, i32* %sb.global-to-local, align 4
  %v1_1246c = add i32 %v0_12464, 52
  store i32 %v1_1246c, i32* %r7.global-to-local, align 4
  %v1_12470 = add i32 %v0_12464, 4
  store i32 %v1_12470, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_12478:                               ; preds = %dec_label_pc_12574, %dec_label_pc_12458
  %v1_1256c10 = phi i32 [ %v1_1256c, %dec_label_pc_12574 ], [ %v5_12468, %dec_label_pc_12458 ]
  %v1_12484 = phi i32 [ %v1_12574, %dec_label_pc_12574 ], [ %v1_12470, %dec_label_pc_12458 ]
  %v1_12478 = inttoptr i32 %v1_12484 to i32*
  %v2_12478 = load i32, i32* %v1_12478, align 4
  store i32 %v2_12478, i32* %r1.global-to-local, align 4
  %v2_1247c = icmp eq i32 %v2_12478, 0
  br i1 %v2_1247c, label %dec_label_pc_1256c, label %dec_label_pc_12484

dec_label_pc_12484:                               ; preds = %dec_label_pc_12478
  %v0_12484 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12484, i32* %v1_12478, align 4
  %v0_12488.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12488

dec_label_pc_12488:                               ; preds = %dec_label_pc_12560, %dec_label_pc_12484
  %v0_124a4 = phi i32 [ %v0_12560, %dec_label_pc_12560 ], [ %v0_12488.pre, %dec_label_pc_12484 ]
  %v1_12488 = add i32 %v0_124a4, 4
  %v2_12488 = inttoptr i32 %v1_12488 to i32*
  %v3_12488 = load i32, i32* %v2_12488, align 4
  store i32 %v3_12488, i32* %r3.global-to-local, align 4
  %v1_1248c = and i32 %v3_12488, -2
  store i32 %v1_1248c, i32* %lr.global-to-local, align 4
  %v2_12490 = add i32 %v1_1248c, %v0_124a4
  store i32 %v2_12490, i32* @r0, align 4
  %v1_12494 = urem i32 %v3_12488, 2
  %v2_12494 = icmp eq i32 %v1_12494, 0
  %v1_12498 = add i32 %v0_124a4, 8
  %v2_12498 = inttoptr i32 %v1_12498 to i32*
  %v3_12498 = load i32, i32* %v2_12498, align 4
  store i32 %v3_12498, i32* %sl.global-to-local, align 4
  %v1_1249c = add i32 %v2_12490, 4
  %v2_1249c = inttoptr i32 %v1_1249c to i32*
  %v3_1249c = load i32, i32* %v2_1249c, align 4
  store i32 %v3_1249c, i32* %r8.global-to-local, align 4
  br i1 %v2_12494, label %dec_label_pc_124a4, label %dec_label_pc_124d8

dec_label_pc_124a4:                               ; preds = %dec_label_pc_12488
  %v1_124a4 = inttoptr i32 %v0_124a4 to i32*
  %v2_124a4 = load i32, i32* %v1_124a4, align 4
  store i32 %v2_124a4, i32* %r5.global-to-local, align 4
  %v2_124a8 = sub i32 %v0_124a4, %v2_124a4
  store i32 %v2_124a8, i32* %r3.global-to-local, align 4
  %v1_124ac = add i32 %v2_124a8, 8
  %v2_124ac = inttoptr i32 %v1_124ac to i32*
  %v3_124ac = load i32, i32* %v2_124ac, align 4
  store i32 %v3_124ac, i32* @ip, align 4
  %v1_124b0 = add i32 %v3_124ac, 12
  %v2_124b0 = inttoptr i32 %v1_124b0 to i32*
  %v3_124b0 = load i32, i32* %v2_124b0, align 4
  store i32 %v3_124b0, i32* %r1.global-to-local, align 4
  %v9_124b4 = icmp eq i32 %v3_124b0, %v2_124a8
  %v1_124b8 = add i32 %v2_124a8, 12
  %v2_124b8 = inttoptr i32 %v1_124b8 to i32*
  %v3_124b8 = load i32, i32* %v2_124b8, align 4
  store i32 %v3_124b8, i32* %r2.global-to-local, align 4
  br i1 %v9_124b4, label %dec_label_pc_124c0, label %dec_label_pc_1251c

dec_label_pc_124c0:                               ; preds = %dec_label_pc_124a4
  %v1_124c0 = add i32 %v3_124b8, 8
  %v2_124c0 = inttoptr i32 %v1_124c0 to i32*
  %v3_124c0 = load i32, i32* %v2_124c0, align 4
  store i32 %v3_124c0, i32* %r3.global-to-local, align 4
  %v9_124c4 = icmp eq i32 %v3_124c0, %v2_124a8
  br i1 %v9_124c4, label %dec_label_pc_124cc, label %dec_label_pc_1251c

dec_label_pc_124cc:                               ; preds = %dec_label_pc_124c0
  store i32 %v3_124ac, i32* %v2_124c0, align 4
  %v0_124d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_124d0 = load i32, i32* @ip, align 4
  %v2_124d0 = add i32 %v1_124d0, 12
  %v3_124d0 = inttoptr i32 %v2_124d0 to i32*
  store i32 %v0_124d0, i32* %v3_124d0, align 4
  %v0_124d4 = load i32, i32* %lr.global-to-local, align 4
  %v1_124d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_124d4 = add i32 %v1_124d4, %v0_124d4
  store i32 %v2_124d4, i32* %lr.global-to-local, align 4
  %v0_124dc.pre = load i32, i32* @r0, align 4
  %v0_124e0.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_124d8

dec_label_pc_124d8:                               ; preds = %dec_label_pc_12488, %dec_label_pc_124cc
  %v0_12550 = phi i32 [ %v1_1248c, %dec_label_pc_12488 ], [ %v2_124d4, %dec_label_pc_124cc ]
  %v0_124e0 = phi i32 [ %v3_1249c, %dec_label_pc_12488 ], [ %v0_124e0.pre, %dec_label_pc_124cc ]
  %v1_124f4 = phi i32 [ %v2_12490, %dec_label_pc_12488 ], [ %v0_124dc.pre, %dec_label_pc_124cc ]
  %v0_124d8 = load i32, i32* @r4, align 4
  %v1_124d8 = add i32 %v0_124d8, 44
  %v2_124d8 = inttoptr i32 %v1_124d8 to i32*
  %v3_124d8 = load i32, i32* %v2_124d8, align 4
  store i32 %v3_124d8, i32* %r3.global-to-local, align 4
  %v9_124dc = icmp eq i32 %v1_124f4, %v3_124d8
  %v1_124e0 = and i32 %v0_124e0, -4
  store i32 %v1_124e0, i32* %r5.global-to-local, align 4
  br i1 %v9_124dc, label %dec_label_pc_12550, label %dec_label_pc_124e8

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124d8
  %v2_124e8 = add i32 %v1_124f4, %v1_124e0
  store i32 %v2_124e8, i32* %r3.global-to-local, align 4
  %v1_124ec = add i32 %v2_124e8, 4
  %v2_124ec = inttoptr i32 %v1_124ec to i32*
  %v3_124ec = load i32, i32* %v2_124ec, align 4
  store i32 %v3_124ec, i32* %r3.global-to-local, align 4
  %v1_124f0 = urem i32 %v3_124ec, 2
  %v2_124f0 = icmp eq i32 %v1_124f0, 0
  %v2_124f4 = add i32 %v1_124f4, 4
  %v3_124f4 = inttoptr i32 %v2_124f4 to i32*
  store i32 %v1_124e0, i32* %v3_124f4, align 4
  br i1 %v2_124f0, label %dec_label_pc_124fc, label %dec_label_pc_124e8.dec_label_pc_1252c_crit_edge

dec_label_pc_124e8.dec_label_pc_1252c_crit_edge:  ; preds = %dec_label_pc_124e8
  %v0_12530.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1252c

dec_label_pc_124fc:                               ; preds = %dec_label_pc_124e8
  %v0_124fc = load i32, i32* @r0, align 4
  %v1_124fc = add i32 %v0_124fc, 8
  %v2_124fc = inttoptr i32 %v1_124fc to i32*
  %v3_124fc = load i32, i32* %v2_124fc, align 4
  store i32 %v3_124fc, i32* @ip, align 4
  %v1_12500 = add i32 %v3_124fc, 12
  %v2_12500 = inttoptr i32 %v1_12500 to i32*
  %v3_12500 = load i32, i32* %v2_12500, align 4
  store i32 %v3_12500, i32* %r3.global-to-local, align 4
  %v9_12504 = icmp eq i32 %v3_12500, %v0_124fc
  %v1_12508 = add i32 %v0_124fc, 12
  %v2_12508 = inttoptr i32 %v1_12508 to i32*
  %v3_12508 = load i32, i32* %v2_12508, align 4
  store i32 %v3_12508, i32* %r2.global-to-local, align 4
  br i1 %v9_12504, label %dec_label_pc_12510, label %dec_label_pc_1251c

dec_label_pc_12510:                               ; preds = %dec_label_pc_124fc
  %v1_12510 = add i32 %v3_12508, 8
  %v2_12510 = inttoptr i32 %v1_12510 to i32*
  %v3_12510 = load i32, i32* %v2_12510, align 4
  store i32 %v3_12510, i32* %r3.global-to-local, align 4
  %v9_12514 = icmp eq i32 %v3_12510, %v0_124fc
  br i1 %v9_12514, label %dec_label_pc_12520, label %dec_label_pc_1251c

dec_label_pc_1251c:                               ; preds = %dec_label_pc_124fc, %dec_label_pc_124c0, %dec_label_pc_124a4, %dec_label_pc_12510
  %v0_1251c = call i32 @function_1286c()
  store i32 %v0_1251c, i32* @r0, align 4
  %v0_12520.pre = load i32, i32* @ip, align 4
  %v1_12520.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12520

dec_label_pc_12520:                               ; preds = %dec_label_pc_12510, %dec_label_pc_1251c
  %v1_12520 = phi i32 [ %v3_12508, %dec_label_pc_12510 ], [ %v1_12520.pre, %dec_label_pc_1251c ]
  %v0_12520 = phi i32 [ %v3_124fc, %dec_label_pc_12510 ], [ %v0_12520.pre, %dec_label_pc_1251c ]
  %v2_12520 = add i32 %v1_12520, 8
  %v3_12520 = inttoptr i32 %v2_12520 to i32*
  store i32 %v0_12520, i32* %v3_12520, align 4
  %v0_12524 = load i32, i32* %r2.global-to-local, align 4
  %v1_12524 = load i32, i32* @ip, align 4
  %v2_12524 = add i32 %v1_12524, 12
  %v3_12524 = inttoptr i32 %v2_12524 to i32*
  store i32 %v0_12524, i32* %v3_12524, align 4
  %v0_12528 = load i32, i32* %lr.global-to-local, align 4
  %v1_12528 = load i32, i32* %r5.global-to-local, align 4
  %v2_12528 = add i32 %v1_12528, %v0_12528
  store i32 %v2_12528, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1252c

dec_label_pc_1252c:                               ; preds = %dec_label_pc_124e8.dec_label_pc_1252c_crit_edge, %dec_label_pc_12520
  %v0_12530 = phi i32 [ %v0_12530.pre, %dec_label_pc_124e8.dec_label_pc_1252c_crit_edge ], [ %v2_12528, %dec_label_pc_12520 ]
  %v0_1252c = load i32, i32* %r7.global-to-local, align 4
  %v1_1252c = add i32 %v0_1252c, 8
  %v2_1252c = inttoptr i32 %v1_1252c to i32*
  %v3_1252c = load i32, i32* %v2_1252c, align 4
  store i32 %v3_1252c, i32* %r2.global-to-local, align 4
  %v1_12530 = or i32 %v0_12530, 1
  store i32 %v1_12530, i32* %r3.global-to-local, align 4
  %v0_12534 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12534, i32* %v2_1252c, align 4
  %v0_12538 = load i32, i32* %r1.global-to-local, align 4
  %v1_12538 = load i32, i32* %r2.global-to-local, align 4
  %v2_12538 = add i32 %v1_12538, 12
  %v3_12538 = inttoptr i32 %v2_12538 to i32*
  store i32 %v0_12538, i32* %v3_12538, align 4
  %v0_1253c = load i32, i32* %lr.global-to-local, align 4
  %v1_1253c = load i32, i32* %r1.global-to-local, align 4
  %v3_1253c = add i32 %v1_1253c, %v0_1253c
  %v4_1253c = inttoptr i32 %v3_1253c to i32*
  store i32 %v0_1253c, i32* %v4_1253c, align 4
  %v0_12540 = load i32, i32* %r3.global-to-local, align 4
  %v1_12540 = load i32, i32* %r1.global-to-local, align 4
  %v2_12540 = add i32 %v1_12540, 4
  %v3_12540 = inttoptr i32 %v2_12540 to i32*
  store i32 %v0_12540, i32* %v3_12540, align 4
  %v0_12544 = load i32, i32* %r2.global-to-local, align 4
  %v1_12544 = load i32, i32* %r1.global-to-local, align 4
  %v2_12544 = add i32 %v1_12544, 8
  %v3_12544 = inttoptr i32 %v2_12544 to i32*
  store i32 %v0_12544, i32* %v3_12544, align 4
  %v0_12548 = load i32, i32* %r7.global-to-local, align 4
  %v1_12548 = load i32, i32* %r1.global-to-local, align 4
  %v2_12548 = add i32 %v1_12548, 12
  %v3_12548 = inttoptr i32 %v2_12548 to i32*
  store i32 %v0_12548, i32* %v3_12548, align 4
  br label %dec_label_pc_12560

dec_label_pc_12550:                               ; preds = %dec_label_pc_124d8
  %v2_12550 = add i32 %v1_124e0, %v0_12550
  %v1_12554 = or i32 %v2_12550, 1
  store i32 %v1_12554, i32* %r3.global-to-local, align 4
  %v1_12558 = load i32, i32* %r1.global-to-local, align 4
  %v2_12558 = add i32 %v1_12558, 4
  %v3_12558 = inttoptr i32 %v2_12558 to i32*
  store i32 %v1_12554, i32* %v3_12558, align 4
  %v0_1255c = load i32, i32* %r1.global-to-local, align 4
  %v1_1255c = load i32, i32* @r4, align 4
  %v2_1255c = add i32 %v1_1255c, 44
  %v3_1255c = inttoptr i32 %v2_1255c to i32*
  store i32 %v0_1255c, i32* %v3_1255c, align 4
  br label %dec_label_pc_12560

dec_label_pc_12560:                               ; preds = %dec_label_pc_1252c, %dec_label_pc_12550
  %v0_12560 = load i32, i32* %sl.global-to-local, align 4
  %v2_12560 = icmp eq i32 %v0_12560, 0
  store i32 %v0_12560, i32* %r1.global-to-local, align 4
  br i1 %v2_12560, label %dec_label_pc_1256c.loopexit, label %dec_label_pc_12488

dec_label_pc_1256c.loopexit:                      ; preds = %dec_label_pc_12560
  %v0_1256c.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_1256c.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_1256c

dec_label_pc_1256c:                               ; preds = %dec_label_pc_1256c.loopexit, %dec_label_pc_12478
  %v1_1256c = phi i32 [ %v1_1256c.pre, %dec_label_pc_1256c.loopexit ], [ %v1_1256c10, %dec_label_pc_12478 ]
  %v0_12574 = phi i32 [ %v0_1256c.pre, %dec_label_pc_1256c.loopexit ], [ %v1_12484, %dec_label_pc_12478 ]
  %v9_1256c = icmp eq i32 %v0_12574, %v1_1256c
  br i1 %v9_1256c, label %dec_label_pc_125e4, label %dec_label_pc_12574

dec_label_pc_12574:                               ; preds = %dec_label_pc_1256c
  %v1_12574 = add i32 %v0_12574, 4
  store i32 %v1_12574, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_1257c.dec_label_pc_1257c_crit_edge:  ; preds = %dec_label_pc_1257c.preheader, %dec_label_pc_1257c.dec_label_pc_1257c_crit_edge
  %v0_1257c.pre = load i32, i32* @r4, align 4
  %v1_1257c.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_1257c = mul i32 %v1_1257c.pre, 8
  %v5_1257c = add i32 %v4_1257c, %v0_1257c.pre
  %v1_12580 = add i32 %v1_1257c.pre, 1
  store i32 %v1_12580, i32* %r2.global-to-local, align 4
  %v1_12584 = add i32 %v5_1257c, 44
  store i32 %v1_12584, i32* %r3.global-to-local, align 4
  %v2_1258c = add i32 %v5_1257c, 52
  %v3_1258c = inttoptr i32 %v2_1258c to i32*
  store i32 %v1_12584, i32* %v3_1258c, align 4
  %v0_12590 = load i32, i32* %r3.global-to-local, align 4
  %v2_12590 = add i32 %v0_12590, 12
  %v3_12590 = inttoptr i32 %v2_12590 to i32*
  store i32 %v0_12590, i32* %v3_12590, align 4
  %v7_12594 = icmp sgt i32 %v1_12580, 95
  br i1 %v7_12594, label %dec_label_pc_12598, label %dec_label_pc_1257c.dec_label_pc_1257c_crit_edge

dec_label_pc_12598:                               ; preds = %dec_label_pc_1257c.dec_label_pc_1257c_crit_edge
  %v0_12598 = load i32, i32* @r4, align 4
  %v1_12598 = inttoptr i32 %v0_12598 to i32*
  %v2_12598 = load i32, i32* %v1_12598, align 4
  store i32 %v2_12598, i32* %r2.global-to-local, align 4
  %v1_1259c = add i32 %v0_12598, 864
  %v2_1259c = inttoptr i32 %v1_1259c to i32*
  %v3_1259c = load i32, i32* %v2_1259c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_125a4 = urem i32 %v2_12598, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_125ac = or i32 %v3_1259c, 1
  store i32 %v1_125ac, i32* %r1.global-to-local, align 4
  %v1_125b0 = or i32 %v1_125a4, 72
  store i32 %v1_125b0, i32* %r2.global-to-local, align 4
  %v1_125b4 = add i32 %v0_12598, 52
  store i32 %v1_125b4, i32* @ip, align 4
  %v2_125b8 = add i32 %v0_12598, 840
  %v3_125b8 = inttoptr i32 %v2_125b8 to i32*
  store i32 0, i32* %v3_125b8, align 4
  %v0_125bc = load i32, i32* %r3.global-to-local, align 4
  %v1_125bc = add i32 %v0_125bc, 65536
  store i32 %v1_125bc, i32* %r3.global-to-local, align 4
  %v0_125c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_125c0 = load i32, i32* @r4, align 4
  %v2_125c0 = add i32 %v1_125c0, 836
  %v3_125c0 = inttoptr i32 %v2_125c0 to i32*
  store i32 %v0_125c0, i32* %v3_125c0, align 4
  %v0_125c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_125c4 = load i32, i32* @r4, align 4
  %v2_125c4 = add i32 %v1_125c4, 844
  %v3_125c4 = inttoptr i32 %v2_125c4 to i32*
  store i32 %v0_125c4, i32* %v3_125c4, align 4
  %v1_125c8 = load i32, i32* @r4, align 4
  %v2_125c8 = add i32 %v1_125c8, 852
  %v3_125c8 = inttoptr i32 %v2_125c8 to i32*
  store i32 %v1_125bc, i32* %v3_125c8, align 4
  %v1_125cc = load i32, i32* @r4, align 4
  %v2_125cc = add i32 %v1_125cc, 864
  %v3_125cc = inttoptr i32 %v2_125cc to i32*
  store i32 %v1_125ac, i32* %v3_125cc, align 4
  %v1_125d0 = load i32, i32* @r4, align 4
  %v2_125d0 = inttoptr i32 %v1_125d0 to i32*
  store i32 %v1_125b0, i32* %v2_125d0, align 4
  %v0_125d4 = load i32, i32* @ip, align 4
  %v1_125d4 = load i32, i32* @r4, align 4
  %v2_125d4 = add i32 %v1_125d4, 44
  %v3_125d4 = inttoptr i32 %v2_125d4 to i32*
  store i32 %v0_125d4, i32* %v3_125d4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_125dc = call i32 @function_12e40(i32 30, i32 %v1_125ac, i32 %v1_125b0, i32 %v1_125bc)
  store i32 %v4_125dc, i32* @r0, align 4
  %v1_125e0 = load i32, i32* @r4, align 4
  %v2_125e0 = add i32 %v1_125e0, 860
  %v3_125e0 = inttoptr i32 %v2_125e0 to i32*
  store i32 %v4_125dc, i32* %v3_125e0, align 4
  br label %dec_label_pc_125e4

dec_label_pc_125e4:                               ; preds = %dec_label_pc_1256c, %dec_label_pc_12598
  %v2_125e8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_125e8, i32* @r4, align 4
  %v1_125ec = load i32, i32* @r0, align 4
  ret i32 %v1_125ec

; uselistorder directives
  uselistorder i32 %v0_12598, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12590, { 1, 0 }
  uselistorder i32 %v1_12574, { 1, 0 }
  uselistorder i32 %v0_12560, { 0, 2, 1 }
  uselistorder i32 %v0_1253c, { 1, 0 }
  uselistorder i32 %v1_1248c, { 1, 0, 2 }
  uselistorder i32 %v0_124a4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12464, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 2, 0, 3, 5, 1, 4, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_125e4, { 1, 0 }
  uselistorder label %dec_label_pc_1257c.dec_label_pc_1257c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12560, { 1, 0 }
  uselistorder label %dec_label_pc_1252c, { 1, 0 }
  uselistorder label %dec_label_pc_12520, { 1, 0 }
  uselistorder label %dec_label_pc_1251c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_124d8, { 1, 0 }
}

define i32 @function_125f0() local_unnamed_addr {
dec_label_pc_125f0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_125f0 = load i32, i32* @r4, align 4
  %v6_125f0 = load i32, i32* @r5, align 4
  %v9_125f0 = load i32, i32* @r6, align 4
  %v12_125f0 = load i32, i32* @r7, align 4
  %v18_125f0 = load i32, i32* @lr, align 4
  %v0_125f8 = load i32, i32* @r0, align 4
  store i32 %v0_125f8, i32* @r6, align 4
  %v2_125f8 = icmp eq i32 %v0_125f8, 0
  %v2_125fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 124088, i32* @r7, align 4
  br i1 %v2_125f8, label %dec_label_pc_12804, label %dec_label_pc_12608

dec_label_pc_12608:                               ; preds = %dec_label_pc_125f0
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_1260c = load i32, i32* inttoptr (i32 124156 to i32*), align 4
  store i32 %v4_1260c, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_1260c, i32* %r2.global-to-local, align 4
  %v4_12618 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_12618, i32* %r1.global-to-local, align 4
  store i32 %v2_125fc, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12624 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_12624, i32* %ip.global-to-local, align 4
  store i32 75312, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12624)
  %v0_12630 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12630, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12638 = load i32, i32* @r7, align 4
  %v2_12638 = add i32 %v0_12638, 16
  %v3_12638 = inttoptr i32 %v2_12638 to i32*
  %v4_12638 = load i32, i32* %v3_12638, align 4
  store i32 %v4_12638, i32* %ip.global-to-local, align 4
  store i32 75332, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12638)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12648 = load i32, i32* @r7, align 4
  %v2_12648 = add i32 %v0_12648, 32
  %v3_12648 = inttoptr i32 %v2_12648 to i32*
  %v4_12648 = load i32, i32* %v3_12648, align 4
  store i32 %v4_12648, i32* @lr, align 4
  %v0_1264c = load i32, i32* @r6, align 4
  %v1_1264c = add i32 %v0_1264c, -4
  %v2_1264c = inttoptr i32 %v1_1264c to i32*
  %v3_1264c = load i32, i32* %v2_1264c, align 4
  store i32 %v3_1264c, i32* %r2.global-to-local, align 4
  %v1_12650 = inttoptr i32 %v4_12648 to i32*
  %v2_12650 = load i32, i32* %v1_12650, align 4
  store i32 %v2_12650, i32* %r3.global-to-local, align 4
  %v1_12654 = and i32 %v3_1264c, -4
  store i32 %v1_12654, i32* %ip.global-to-local, align 4
  %v1_12658 = add i32 %v0_1264c, -8
  store i32 %v1_12658, i32* @r5, align 4
  store i32 %v1_12658, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12654, %v2_12650
  br i1 %tmp, label %dec_label_pc_12688, label %dec_label_pc_12668

dec_label_pc_12668:                               ; preds = %dec_label_pc_12608
  %v1_12668 = or i32 %v2_12650, 3
  store i32 %v1_12668, i32* %r3.global-to-local, align 4
  store i32 %v1_12668, i32* %v1_12650, align 4
  %v3_1266c = load i32, i32* @lr, align 4
  %v4_1266c = add i32 %v3_1266c, -8
  store i32 %v4_1266c, i32* %lr.global-to-local, align 4
  %v0_12670 = load i32, i32* %ip.global-to-local, align 4
  %v3_12670 = udiv i32 %v0_12670, 8
  store i32 %v3_12670, i32* %r1.global-to-local, align 4
  %v1_12674 = add i32 %v3_1266c, -4
  store i32 %v1_12674, i32* %r2.global-to-local, align 4
  %v4_12678 = mul nuw i32 %v3_12670, 4
  %v5_12678 = add i32 %v4_12678, %v1_12674
  %v6_12678 = inttoptr i32 %v5_12678 to i32*
  %v7_12678 = load i32, i32* %v6_12678, align 4
  store i32 %v7_12678, i32* %r3.global-to-local, align 4
  %v1_1267c = load i32, i32* @r5, align 4
  %v2_1267c = add i32 %v1_1267c, 8
  %v3_1267c = inttoptr i32 %v2_1267c to i32*
  store i32 %v7_12678, i32* %v3_1267c, align 4
  %v0_12680 = load i32, i32* @r5, align 4
  %v1_12680 = load i32, i32* %r2.global-to-local, align 4
  %v2_12680 = load i32, i32* %r1.global-to-local, align 4
  %v5_12680 = mul i32 %v2_12680, 4
  %v6_12680 = add i32 %v5_12680, %v1_12680
  %v7_12680 = inttoptr i32 %v6_12680 to i32*
  store i32 %v0_12680, i32* %v7_12680, align 4
  br label %dec_label_pc_127ec

dec_label_pc_12688:                               ; preds = %dec_label_pc_12608
  %v1_12688 = and i32 %v3_1264c, 2
  %v2_12688 = icmp eq i32 %v1_12688, 0
  br i1 %v2_12688, label %dec_label_pc_12690, label %dec_label_pc_127c4

dec_label_pc_12690:                               ; preds = %dec_label_pc_12688
  %v1_12690 = or i32 %v2_12650, 1
  store i32 %v1_12690, i32* %r3.global-to-local, align 4
  store i32 %v1_12690, i32* %v1_12650, align 4
  %v0_12698 = load i32, i32* @r6, align 4
  %v1_12698 = add i32 %v0_12698, -4
  %v2_12698 = inttoptr i32 %v1_12698 to i32*
  %v3_12698 = load i32, i32* %v2_12698, align 4
  store i32 %v3_12698, i32* %r3.global-to-local, align 4
  %v0_1269c = load i32, i32* @r5, align 4
  %v1_1269c = load i32, i32* %ip.global-to-local, align 4
  %v2_1269c = add i32 %v1_1269c, %v0_1269c
  store i32 %v2_1269c, i32* %lr.global-to-local, align 4
  %v1_126a0 = urem i32 %v3_12698, 2
  %v2_126a0 = icmp eq i32 %v1_126a0, 0
  %v1_126a4 = add i32 %v2_1269c, 4
  %v2_126a4 = inttoptr i32 %v1_126a4 to i32*
  %v3_126a4 = load i32, i32* %v2_126a4, align 4
  store i32 %v3_126a4, i32* %r8.global-to-local, align 4
  br i1 %v2_126a0, label %dec_label_pc_126ac, label %dec_label_pc_126e0

dec_label_pc_126ac:                               ; preds = %dec_label_pc_12690
  %v1_126ac = add i32 %v0_12698, -8
  %v2_126ac = inttoptr i32 %v1_126ac to i32*
  %v3_126ac = load i32, i32* %v2_126ac, align 4
  store i32 %v3_126ac, i32* %r1.global-to-local, align 4
  %v2_126b0 = sub i32 %v0_1269c, %v3_126ac
  store i32 %v2_126b0, i32* %r3.global-to-local, align 4
  %v1_126b4 = add i32 %v2_126b0, 8
  %v2_126b4 = inttoptr i32 %v1_126b4 to i32*
  %v3_126b4 = load i32, i32* %v2_126b4, align 4
  store i32 %v3_126b4, i32* %r2.global-to-local, align 4
  %v1_126b8 = add i32 %v3_126b4, 12
  %v2_126b8 = inttoptr i32 %v1_126b8 to i32*
  %v3_126b8 = load i32, i32* %v2_126b8, align 4
  store i32 %v3_126b8, i32* %r4.global-to-local, align 4
  %v9_126bc = icmp eq i32 %v3_126b8, %v2_126b0
  %v1_126c0 = add i32 %v2_126b0, 12
  %v2_126c0 = inttoptr i32 %v1_126c0 to i32*
  %v3_126c0 = load i32, i32* %v2_126c0, align 4
  store i32 %v3_126c0, i32* %r0.global-to-local, align 4
  br i1 %v9_126bc, label %dec_label_pc_126c8, label %dec_label_pc_1272c

dec_label_pc_126c8:                               ; preds = %dec_label_pc_126ac
  %v1_126c8 = add i32 %v3_126c0, 8
  %v2_126c8 = inttoptr i32 %v1_126c8 to i32*
  %v3_126c8 = load i32, i32* %v2_126c8, align 4
  store i32 %v3_126c8, i32* %r3.global-to-local, align 4
  %v9_126cc = icmp eq i32 %v3_126c8, %v2_126b0
  br i1 %v9_126cc, label %dec_label_pc_126d4, label %dec_label_pc_1272c

dec_label_pc_126d4:                               ; preds = %dec_label_pc_126c8
  store i32 %v3_126b4, i32* %v2_126c8, align 4
  %v0_126d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_126d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_126d8 = add i32 %v1_126d8, 12
  %v3_126d8 = inttoptr i32 %v2_126d8 to i32*
  store i32 %v0_126d8, i32* %v3_126d8, align 4
  %v0_126dc = load i32, i32* %ip.global-to-local, align 4
  %v1_126dc = load i32, i32* %r1.global-to-local, align 4
  %v2_126dc = add i32 %v1_126dc, %v0_126dc
  store i32 %v2_126dc, i32* %ip.global-to-local, align 4
  %v0_126ec.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_126f0.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_126e0

dec_label_pc_126e0:                               ; preds = %dec_label_pc_12690, %dec_label_pc_126d4
  %v0_1276c = phi i32 [ %v1_1269c, %dec_label_pc_12690 ], [ %v2_126dc, %dec_label_pc_126d4 ]
  %v0_126f0 = phi i32 [ %v3_126a4, %dec_label_pc_12690 ], [ %v0_126f0.pre, %dec_label_pc_126d4 ]
  %v1_12704 = phi i32 [ %v2_1269c, %dec_label_pc_12690 ], [ %v0_126ec.pre, %dec_label_pc_126d4 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_126e4 = load i32, i32* @r7, align 4
  %v2_126e4 = add i32 %v0_126e4, 32
  %v3_126e4 = inttoptr i32 %v2_126e4 to i32*
  %v4_126e4 = load i32, i32* %v3_126e4, align 4
  store i32 %v4_126e4, i32* %r2.global-to-local, align 4
  %v1_126e8 = add i32 %v4_126e4, 44
  %v2_126e8 = inttoptr i32 %v1_126e8 to i32*
  %v3_126e8 = load i32, i32* %v2_126e8, align 4
  store i32 %v3_126e8, i32* %r3.global-to-local, align 4
  %v9_126ec = icmp eq i32 %v1_12704, %v3_126e8
  %v1_126f0 = and i32 %v0_126f0, -4
  store i32 %v1_126f0, i32* %r0.global-to-local, align 4
  br i1 %v9_126ec, label %dec_label_pc_1276c, label %dec_label_pc_126f8

dec_label_pc_126f8:                               ; preds = %dec_label_pc_126e0
  %v2_126f8 = add i32 %v1_12704, %v1_126f0
  store i32 %v2_126f8, i32* %r3.global-to-local, align 4
  %v1_126fc = add i32 %v2_126f8, 4
  %v2_126fc = inttoptr i32 %v1_126fc to i32*
  %v3_126fc = load i32, i32* %v2_126fc, align 4
  store i32 %v3_126fc, i32* %r3.global-to-local, align 4
  %v1_12700 = urem i32 %v3_126fc, 2
  %v2_12700 = icmp eq i32 %v1_12700, 0
  %v2_12704 = add i32 %v1_12704, 4
  %v3_12704 = inttoptr i32 %v2_12704 to i32*
  store i32 %v1_126f0, i32* %v3_12704, align 4
  br i1 %v2_12700, label %dec_label_pc_1270c, label %dec_label_pc_126f8.dec_label_pc_1273c_crit_edge

dec_label_pc_126f8.dec_label_pc_1273c_crit_edge:  ; preds = %dec_label_pc_126f8
  %v0_1274c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1273c

dec_label_pc_1270c:                               ; preds = %dec_label_pc_126f8
  %v0_1270c = load i32, i32* %lr.global-to-local, align 4
  %v1_1270c = add i32 %v0_1270c, 8
  %v2_1270c = inttoptr i32 %v1_1270c to i32*
  %v3_1270c = load i32, i32* %v2_1270c, align 4
  store i32 %v3_1270c, i32* %r1.global-to-local, align 4
  %v1_12710 = add i32 %v3_1270c, 12
  %v2_12710 = inttoptr i32 %v1_12710 to i32*
  %v3_12710 = load i32, i32* %v2_12710, align 4
  store i32 %v3_12710, i32* %r3.global-to-local, align 4
  %v9_12714 = icmp eq i32 %v3_12710, %v0_1270c
  %v1_12718 = add i32 %v0_1270c, 12
  %v2_12718 = inttoptr i32 %v1_12718 to i32*
  %v3_12718 = load i32, i32* %v2_12718, align 4
  store i32 %v3_12718, i32* %r2.global-to-local, align 4
  br i1 %v9_12714, label %dec_label_pc_12720, label %dec_label_pc_1272c

dec_label_pc_12720:                               ; preds = %dec_label_pc_1270c
  %v1_12720 = add i32 %v3_12718, 8
  %v2_12720 = inttoptr i32 %v1_12720 to i32*
  %v3_12720 = load i32, i32* %v2_12720, align 4
  store i32 %v3_12720, i32* %r3.global-to-local, align 4
  %v9_12724 = icmp eq i32 %v3_12720, %v0_1270c
  br i1 %v9_12724, label %dec_label_pc_12730, label %dec_label_pc_1272c

dec_label_pc_1272c:                               ; preds = %dec_label_pc_1270c, %dec_label_pc_126c8, %dec_label_pc_126ac, %dec_label_pc_12720
  %v0_1272c = call i32 @function_1286c()
  store i32 %v0_1272c, i32* %r0.global-to-local, align 4
  %v0_12730.pre = load i32, i32* @r1, align 4
  %v1_12730.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12730

dec_label_pc_12730:                               ; preds = %dec_label_pc_12720, %dec_label_pc_1272c
  %v1_12730 = phi i32 [ %v3_12718, %dec_label_pc_12720 ], [ %v1_12730.pre, %dec_label_pc_1272c ]
  %v0_12730 = phi i32 [ %v3_1270c, %dec_label_pc_12720 ], [ %v0_12730.pre, %dec_label_pc_1272c ]
  %v2_12730 = add i32 %v1_12730, 8
  %v3_12730 = inttoptr i32 %v2_12730 to i32*
  store i32 %v0_12730, i32* %v3_12730, align 4
  %v0_12734 = load i32, i32* %r2.global-to-local, align 4
  %v1_12734 = load i32, i32* %r1.global-to-local, align 4
  %v2_12734 = add i32 %v1_12734, 12
  %v3_12734 = inttoptr i32 %v2_12734 to i32*
  store i32 %v0_12734, i32* %v3_12734, align 4
  %v0_12738 = load i32, i32* %ip.global-to-local, align 4
  %v1_12738 = load i32, i32* %r0.global-to-local, align 4
  %v2_12738 = add i32 %v1_12738, %v0_12738
  store i32 %v2_12738, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1273c

dec_label_pc_1273c:                               ; preds = %dec_label_pc_126f8.dec_label_pc_1273c_crit_edge, %dec_label_pc_12730
  %v0_1274c = phi i32 [ %v0_1274c.pre, %dec_label_pc_126f8.dec_label_pc_1273c_crit_edge ], [ %v2_12738, %dec_label_pc_12730 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12740 = load i32, i32* @r7, align 4
  %v2_12740 = add i32 %v0_12740, 32
  %v3_12740 = inttoptr i32 %v2_12740 to i32*
  %v4_12740 = load i32, i32* %v3_12740, align 4
  %v1_12744 = add i32 %v4_12740, 52
  store i32 %v1_12744, i32* %r3.global-to-local, align 4
  %v1_12748 = add i32 %v4_12740, 60
  %v2_12748 = inttoptr i32 %v1_12748 to i32*
  %v3_12748 = load i32, i32* %v2_12748, align 4
  store i32 %v3_12748, i32* %r1.global-to-local, align 4
  %v1_1274c = or i32 %v0_1274c, 1
  store i32 %v1_1274c, i32* %r2.global-to-local, align 4
  %v1_12750 = load i32, i32* %r4.global-to-local, align 4
  %v2_12750 = add i32 %v1_12750, 12
  %v3_12750 = inttoptr i32 %v2_12750 to i32*
  store i32 %v1_12744, i32* %v3_12750, align 4
  %v0_12754 = load i32, i32* %r1.global-to-local, align 4
  %v1_12754 = load i32, i32* %r4.global-to-local, align 4
  %v2_12754 = add i32 %v1_12754, 8
  %v3_12754 = inttoptr i32 %v2_12754 to i32*
  store i32 %v0_12754, i32* %v3_12754, align 4
  %v0_12758 = load i32, i32* %r2.global-to-local, align 4
  %v1_12758 = load i32, i32* %r4.global-to-local, align 4
  %v2_12758 = add i32 %v1_12758, 4
  %v3_12758 = inttoptr i32 %v2_12758 to i32*
  store i32 %v0_12758, i32* %v3_12758, align 4
  %v0_1275c = load i32, i32* %ip.global-to-local, align 4
  %v1_1275c = load i32, i32* %r4.global-to-local, align 4
  %v3_1275c = add i32 %v1_1275c, %v0_1275c
  %v4_1275c = inttoptr i32 %v3_1275c to i32*
  store i32 %v0_1275c, i32* %v4_1275c, align 4
  %v0_12760 = load i32, i32* %r4.global-to-local, align 4
  %v1_12760 = load i32, i32* %r1.global-to-local, align 4
  %v2_12760 = add i32 %v1_12760, 12
  %v3_12760 = inttoptr i32 %v2_12760 to i32*
  store i32 %v0_12760, i32* %v3_12760, align 4
  %v0_12764 = load i32, i32* %r4.global-to-local, align 4
  %v1_12764 = load i32, i32* %r3.global-to-local, align 4
  %v2_12764 = add i32 %v1_12764, 8
  %v3_12764 = inttoptr i32 %v2_12764 to i32*
  store i32 %v0_12764, i32* %v3_12764, align 4
  br label %dec_label_pc_1277c

dec_label_pc_1276c:                               ; preds = %dec_label_pc_126e0
  %v2_1276c = add i32 %v1_126f0, %v0_1276c
  store i32 %v2_1276c, i32* %ip.global-to-local, align 4
  %v1_12770 = or i32 %v2_1276c, 1
  store i32 %v1_12770, i32* %r3.global-to-local, align 4
  %v0_12774 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12774, i32* %v2_126e8, align 4
  %v0_12778 = load i32, i32* %r3.global-to-local, align 4
  %v1_12778 = load i32, i32* %r4.global-to-local, align 4
  %v2_12778 = add i32 %v1_12778, 4
  %v3_12778 = inttoptr i32 %v2_12778 to i32*
  store i32 %v0_12778, i32* %v3_12778, align 4
  br label %dec_label_pc_1277c

dec_label_pc_1277c:                               ; preds = %dec_label_pc_1273c, %dec_label_pc_1276c
  %v0_1277c = load i32, i32* %ip.global-to-local, align 4
  %v3_12780 = icmp ult i32 %v0_1277c, 131070
  br i1 %v3_12780, label %dec_label_pc_127ec, label %dec_label_pc_12784

dec_label_pc_12784:                               ; preds = %dec_label_pc_1277c
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12788 = load i32, i32* @r7, align 4
  %v2_12788 = add i32 %v0_12788, 32
  %v3_12788 = inttoptr i32 %v2_12788 to i32*
  %v4_12788 = load i32, i32* %v3_12788, align 4
  store i32 %v4_12788, i32* @r4, align 4
  %v1_1278c = inttoptr i32 %v4_12788 to i32*
  %v2_1278c = load i32, i32* %v1_1278c, align 4
  store i32 %v2_1278c, i32* %r3.global-to-local, align 4
  %v1_12790 = and i32 %v2_1278c, 2
  %v2_12790 = icmp eq i32 %v1_12790, 0
  br i1 %v2_12790, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_12784
  store i32 %v4_12788, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_12784, %bb
  store i32 75676, i32* @lr, align 4
  %v1_12798 = xor i1 %v2_12790, true
  call void @__pseudo_cond_branch(i1 %v1_12798, i32 ptrtoint (i32* @global_var_1243c.388 to i32))
  %v0_1279c = load i32, i32* @r4, align 4
  %v1_1279c = add i32 %v0_1279c, 44
  %v2_1279c = inttoptr i32 %v1_1279c to i32*
  %v3_1279c = load i32, i32* %v2_1279c, align 4
  store i32 %v3_1279c, i32* %r3.global-to-local, align 4
  %v1_127a0 = add i32 %v3_1279c, 4
  %v2_127a0 = inttoptr i32 %v1_127a0 to i32*
  %v3_127a0 = load i32, i32* %v2_127a0, align 4
  store i32 %v3_127a0, i32* %r3.global-to-local, align 4
  %v1_127a4 = add i32 %v0_1279c, 836
  %v2_127a4 = inttoptr i32 %v1_127a4 to i32*
  %v3_127a4 = load i32, i32* %v2_127a4, align 4
  store i32 %v3_127a4, i32* %r2.global-to-local, align 4
  %v1_127a8 = and i32 %v3_127a0, -4
  store i32 %v1_127a8, i32* %r3.global-to-local, align 4
  %v3_127ac = icmp ult i32 %v1_127a8, %v3_127a4
  br i1 %v3_127ac, label %dec_label_pc_127ec, label %dec_label_pc_127b4

dec_label_pc_127b4:                               ; preds = %bb15
  store i32 %v0_1279c, i32* %r1.global-to-local, align 4
  %v1_127b8 = add i32 %v0_1279c, 840
  %v2_127b8 = inttoptr i32 %v1_127b8 to i32*
  %v3_127b8 = load i32, i32* %v2_127b8, align 4
  store i32 %v3_127b8, i32* %r0.global-to-local, align 4
  %v2_127bc = call i32 @function_1238c(i32 %v3_127b8, i32 %v0_1279c)
  store i32 %v2_127bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_127ec

dec_label_pc_127c4:                               ; preds = %dec_label_pc_12688
  %v2_127c4 = inttoptr i32 %v1_12658 to i32*
  %v3_127c4 = load i32, i32* %v2_127c4, align 4
  store i32 %v3_127c4, i32* %r0.global-to-local, align 4
  %v1_127c8 = add i32 %v4_12648, 848
  %v2_127c8 = inttoptr i32 %v1_127c8 to i32*
  %v3_127c8 = load i32, i32* %v2_127c8, align 4
  store i32 %v3_127c8, i32* %r2.global-to-local, align 4
  %v1_127cc = add i32 %v4_12648, 868
  %v2_127cc = inttoptr i32 %v1_127cc to i32*
  %v3_127cc = load i32, i32* %v2_127cc, align 4
  %v2_127d0 = add i32 %v3_127c4, %v1_12654
  store i32 %v2_127d0, i32* %r1.global-to-local, align 4
  %v1_127d4 = add i32 %v3_127c8, -1
  store i32 %v1_127d4, i32* %r2.global-to-local, align 4
  %v2_127d8 = sub i32 %v3_127cc, %v2_127d0
  store i32 %v2_127d8, i32* %r3.global-to-local, align 4
  store i32 %v2_127d8, i32* %v2_127cc, align 4
  %v1_127e0 = load i32, i32* @lr, align 4
  %v2_127e0 = add i32 %v1_127e0, 848
  %v3_127e0 = inttoptr i32 %v2_127e0 to i32*
  store i32 %v1_127d4, i32* %v3_127e0, align 4
  %v0_127e4 = load i32, i32* %r0.global-to-local, align 4
  %v1_127e4 = load i32, i32* @r5, align 4
  %v2_127e4 = sub i32 %v1_127e4, %v0_127e4
  store i32 %v2_127e4, i32* %r0.global-to-local, align 4
  %v4_127e8 = call i32 @function_13dd4(i32 %v2_127e4, i32 %v2_127d0, i32 %v1_127d4, i32 %v2_127d8)
  store i32 %v4_127e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_127ec

dec_label_pc_127ec:                               ; preds = %bb15, %dec_label_pc_1277c, %dec_label_pc_127b4, %dec_label_pc_12668, %dec_label_pc_127c4
  store i32 %v2_125fc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_127f8 = load i32, i32* @r7, align 4
  %v2_127f8 = add i32 %v0_127f8, 24
  %v3_127f8 = inttoptr i32 %v2_127f8 to i32*
  %v4_127f8 = load i32, i32* %v3_127f8, align 4
  store i32 %v4_127f8, i32* @ip, align 4
  store i32 75780, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_127f8)
  br label %dec_label_pc_12804

dec_label_pc_12804:                               ; preds = %dec_label_pc_125f0, %dec_label_pc_127ec
  store i32 %v3_125f0, i32* @r4, align 4
  store i32 %v6_125f0, i32* @r5, align 4
  store i32 %v9_125f0, i32* @r6, align 4
  store i32 %v12_125f0, i32* @r7, align 4
  store i32 %v18_125f0, i32* @lr, align 4
  ret i32 %v2_125fc

; uselistorder directives
  uselistorder i32 %v0_1279c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_1275c, { 1, 0 }
  uselistorder i32 %v1_1269c, { 1, 0 }
  uselistorder i32 %v0_1269c, { 1, 0 }
  uselistorder i32 %v3_12670, { 1, 0 }
  uselistorder i32 %v1_12654, { 1, 0, 2 }
  uselistorder i32 %v2_12650, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12648, { 1, 0, 2, 3 }
  uselistorder i32 %v0_125f8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 3, 14, 0, 1, 2, 13, 4, 5, 11, 12, 6, 7, 8, 10, 9 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_12804, { 1, 0 }
  uselistorder label %dec_label_pc_127ec, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_1277c, { 1, 0 }
  uselistorder label %dec_label_pc_1273c, { 1, 0 }
  uselistorder label %dec_label_pc_12730, { 1, 0 }
  uselistorder label %dec_label_pc_1272c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_126e0, { 1, 0 }
}

define i32 @function_12814(i32 %arg1) local_unnamed_addr {
dec_label_pc_12814:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_12814 = load i1, i1* @cpsr_z, align 1
  %v2_12814 = load i32, i32* @r4, align 4
  br i1 %v0_12814, label %bb, label %dec_label_pc_12814..thread4_crit_edge

dec_label_pc_12814..thread4_crit_edge:            ; preds = %dec_label_pc_12814
  %v0_12840.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12814
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12814..thread4_crit_edge, %bb
  %v0_12840 = phi i32 [ %v0_12840.pre, %dec_label_pc_12814..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_12814, i32* %stack_var_-12, align 4
  %v6_1282c = load i32, i32* @r5, align 4
  %v9_1282c = load i32, i32* @lr, align 4
  %v4_1283c = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_1283c, i32* @r5, align 4
  store i32 %v0_12840, i32* @r4, align 4
  store i32 %v4_1283c, i32* @r0, align 4
  %v0_1284c = call i32 @function_1243c()
  %v0_12850 = load i32, i32* @r4, align 4
  store i32 %v0_12850, i32* %r0.global-to-local, align 4
  %v0_12854 = load i32, i32* @r5, align 4
  %v2_1285c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1285c, i32* @r4, align 4
  store i32 %v6_1282c, i32* @r5, align 4
  store i32 %v9_1282c, i32* @lr, align 4
  %v2_12860 = call i32 @function_1238c(i32 %v0_12850, i32 %v0_12854)
  store i32 %v2_12860, i32* %r0.global-to-local, align 4
  %v0_12864 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12864, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_12868 = phi i32 [ %v2_12860, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_12868

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_1238c, { 1, 0 }
  uselistorder i32 ()* @function_1243c, { 3, 2, 0, 1 }
  uselistorder i32* inttoptr (i32 124120 to i32*), { 17, 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1286c() local_unnamed_addr {
dec_label_pc_1286c:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 124088, i32* @r5, align 4
  %v4_12884 = load i32, i32* inttoptr (i32 124104 to i32*), align 8
  store i32 75920, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12884)
  %v2_128a0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_128ac = call i32 @function_10b2c(i32 1, i32 %v2_128a0, i32 0)
  %v4_128b4 = load i32, i32* @global_var_1e750.396, align 4
  %v2_128b8 = icmp eq i32 %v4_128b4, 0
  br i1 %v2_128b8, label %dec_label_pc_128c0, label %dec_label_pc_12900

dec_label_pc_128c0:                               ; preds = %dec_label_pc_1286c
  store i32 1, i32* @global_var_1e750.396, align 4
  br label %dec_label_pc_128c8

dec_label_pc_128c8:                               ; preds = %dec_label_pc_12910, %dec_label_pc_128c0
  %v0_128cc = load i32, i32* @r5, align 4
  %v2_128cc = add i32 %v0_128cc, 160
  store i32 %v2_128cc, i32* @r4, align 4
  %v2_128d8 = add i32 %v0_128cc, 36
  %v3_128d8 = inttoptr i32 %v2_128d8 to i32*
  %v4_128d8 = load i32, i32* %v3_128d8, align 4
  call void @__pseudo_branch(i32 %v4_128d8)
  %v1_128e8 = call i32 @function_11374(i32 6)
  %v0_128f4 = load i32, i32* @r5, align 4
  %v2_128f4 = add i32 %v0_128f4, 16
  %v3_128f4 = inttoptr i32 %v2_128f4 to i32*
  %v4_128f4 = load i32, i32* %v3_128f4, align 4
  store i32 76032, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_128f4)
  %v4_12904.pre = load i32, i32* @global_var_1e750.396, align 4
  br label %dec_label_pc_12900

dec_label_pc_12900:                               ; preds = %dec_label_pc_1286c, %dec_label_pc_128c8
  %v0_12914 = phi i32 [ %v4_128b4, %dec_label_pc_1286c ], [ %v4_12904.pre, %dec_label_pc_128c8 ]
  %v7_12908 = icmp eq i32 %v0_12914, 1
  br i1 %v7_12908, label %dec_label_pc_12910, label %dec_label_pc_1294c

dec_label_pc_12910:                               ; preds = %dec_label_pc_12900
  %v2_12910 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12910, i32* @r4, align 4
  store i32 2, i32* @global_var_1e750.396, align 4
  store i32 20, i32* @r2, align 4
  %v2_12928 = bitcast i32* %stack_var_-28 to i8*
  %v3_12928 = call i32 @function_10fe0(i8* %v2_12928, i32 0)
  %v3_12944 = call i32 @function_138d4(i32 6, i32 %v2_12910, i32 0)
  br label %dec_label_pc_128c8

dec_label_pc_1294c:                               ; preds = %dec_label_pc_12900
  %v7_1294c = icmp eq i32 %v0_12914, 2
  br i1 %v7_1294c, label %dec_label_pc_12954, label %dec_label_pc_12960

dec_label_pc_12954:                               ; preds = %dec_label_pc_1294c
  store i32 3, i32* @global_var_1e750.396, align 4
  %v0_1295c = call i32 @function_1286c()
  %v4_12960.pre = load i32, i32* @global_var_1e750.396, align 4
  br label %dec_label_pc_12960

dec_label_pc_12960:                               ; preds = %dec_label_pc_1294c, %dec_label_pc_12954
  %v1_12968 = phi i32 [ %v0_12914, %dec_label_pc_1294c ], [ %v4_12960.pre, %dec_label_pc_12954 ]
  %v7_12964 = icmp eq i32 %v1_12968, 3
  br i1 %v7_12964, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12960
  store i32 4, i32* @global_var_1e750.396, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12960, %bb
  call void @__pseudo_cond_branch(i1 %v7_12964, i32 ptrtoint (i32* @global_var_13ec4.398 to i32))
  br label %dec_label_pc_12978

dec_label_pc_12978:                               ; preds = %dec_label_pc_12978, %.thread1
  %v0_12978 = call i32 @function_1286c()
  br label %dec_label_pc_12978

; uselistorder directives
  uselistorder i32 ()* @function_1286c, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 14, 15, 75, 3, 31, 32, 16, 27, 17, 28, 18, 29, 19, 30, 1, 33, 20, 34, 0, 4, 35, 36, 21, 37, 5, 38, 39, 40, 22, 41, 6, 42, 43, 44, 23, 45, 46, 47, 24, 48, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 25, 61, 9, 62, 63, 64, 65, 66, 67, 26, 68, 10, 69, 70, 71, 72, 11, 73, 12, 13, 2, 74 }
  uselistorder i32* @global_var_1e750.396, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 124104 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12960, { 1, 0 }
  uselistorder label %dec_label_pc_12900, { 1, 0 }
}

define i32 @function_12984(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12984:
  %v0_12984 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12984, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12984
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12984, %bb
  %v4_12990 = phi i32 [ %arg1, %dec_label_pc_12984 ], [ 0, %bb ]
  ret i32 %v4_12990

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12994(i32 %arg1) local_unnamed_addr {
dec_label_pc_12994:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_129a4 = call i32 @function_129b4()
  ret i32 %v0_129a4
}

define i32 @function_129b4() local_unnamed_addr {
dec_label_pc_129b4:
  store i32 1, i32* @r3, align 4
  %v0_129c0 = call i32 @function_129d0()
  ret i32 %v0_129c0
}

define i32 @function_129d0() local_unnamed_addr {
dec_label_pc_129d0:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_129d0 = load i32, i32* @r4, align 4
  %v12_129d0 = load i32, i32* @r7, align 4
  store i32 224, i32* @lr, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v0_129e4 = load i32, i32* @r1, align 4
  store i32 %v0_129e4, i32* %fp.global-to-local, align 4
  %v0_129e8 = load i32, i32* @r2, align 4
  store i32 %v0_129e8, i32* %r5.global-to-local, align 4
  %v0_129ec = load i32, i32* @r0, align 4
  store i32 %v0_129ec, i32* @r4, align 4
  %v0_129f0 = load i32, i32* @r3, align 4
  br label %dec_label_pc_129fc

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129fc
  %v1_129f8 = add i32 %v0_12a34, 1
  store i32 %v1_129f8, i32* @r4, align 4
  br label %dec_label_pc_129fc

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129d0, %dec_label_pc_129f8
  %v0_12a34 = phi i32 [ %v0_129ec, %dec_label_pc_129d0 ], [ %v1_129f8, %dec_label_pc_129f8 ]
  %v1_129fc = inttoptr i32 %v0_12a34 to i8*
  %v2_129fc = load i8, i8* %v1_129fc, align 1
  %v3_129fc = zext i8 %v2_129fc to i32
  %v4_12a00 = load i32, i32* inttoptr (i32 124312 to i32*), align 8
  %v2_12a04 = mul nuw nsw i32 %v3_129fc, 2
  %v2_12a08 = add i32 %v2_12a04, %v4_12a00
  %v3_12a08 = inttoptr i32 %v2_12a08 to i16*
  %v4_12a08 = load i16, i16* %v3_12a08, align 2
  %v1_12a0c = and i16 %v4_12a08, 32
  %v2_12a0c = icmp eq i16 %v1_12a0c, 0
  br i1 %v2_12a0c, label %dec_label_pc_12a14, label %dec_label_pc_129f8

dec_label_pc_12a14:                               ; preds = %dec_label_pc_129fc
  %v7_12a14 = icmp eq i8 %v2_129fc, 43
  br i1 %v7_12a14, label %dec_label_pc_12a34, label %dec_label_pc_12a1c

dec_label_pc_12a1c:                               ; preds = %dec_label_pc_12a14
  %v7_12a1c = icmp eq i8 %v2_129fc, 45
  br i1 %v7_12a1c, label %dec_label_pc_12a34, label %bb

bb:                                               ; preds = %dec_label_pc_12a1c
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12a38

dec_label_pc_12a34:                               ; preds = %dec_label_pc_12a14, %dec_label_pc_12a1c
  %storemerge39 = phi i32 [ 1, %dec_label_pc_12a1c ], [ 0, %dec_label_pc_12a14 ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_12a34 = add i32 %v0_12a34, 1
  store i32 %v1_12a34, i32* @r4, align 4
  br label %dec_label_pc_12a38

dec_label_pc_12a38:                               ; preds = %bb, %dec_label_pc_12a34
  %v0_12a58 = phi i32 [ %v0_12a34, %bb ], [ %v1_12a34, %dec_label_pc_12a34 ]
  %v1_12a38 = and i32 %v0_129e8, -17
  %v3_12a38 = icmp eq i32 %v1_12a38, 0
  br i1 %v3_12a38, label %dec_label_pc_12a44, label %bb52

bb52:                                             ; preds = %dec_label_pc_12a38
  store i32 %v0_129ec, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_12a44:                               ; preds = %dec_label_pc_12a38
  %v1_12a44 = inttoptr i32 %v0_12a58 to i8*
  %v2_12a44 = load i8, i8* %v1_12a44, align 1
  %v7_12a48 = icmp eq i8 %v2_12a44, 48
  %v1_12a4c = add i32 %v0_129e8, 10
  store i32 %v1_12a4c, i32* %r5.global-to-local, align 4
  br i1 %v7_12a48, label %dec_label_pc_12a58, label %bb53

bb53:                                             ; preds = %dec_label_pc_12a44
  store i32 %v0_129ec, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_12a58:                               ; preds = %dec_label_pc_12a44
  %v1_12a58 = add i32 %v0_12a58, 1
  %v2_12a58 = inttoptr i32 %v1_12a58 to i8*
  %v3_12a58 = load i8, i8* %v2_12a58, align 1
  %v4_12a58 = zext i8 %v3_12a58 to i32
  store i32 %v1_12a58, i32* @r4, align 4
  %v1_12a5c = or i32 %v4_12a58, 32
  %v7_12a60 = icmp eq i32 %v1_12a5c, 120
  %v1_12a64 = add i32 %v0_129e8, 8
  store i32 %v1_12a64, i32* %r5.global-to-local, align 4
  store i32 %v1_12a58, i32* %r6.global-to-local, align 4
  br i1 %v7_12a60, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_12a58
  %v3_12a70 = mul i32 %v1_12a64, 2
  store i32 %v3_12a70, i32* %r5.global-to-local, align 4
  %v2_12a74 = add i32 %v0_12a58, 2
  store i32 %v2_12a74, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12a58, %bb53, %bb54
  %v0_12a78 = phi i32 [ %v1_12a4c, %bb53 ], [ %v3_12a70, %bb54 ], [ %v1_12a64, %dec_label_pc_12a58 ]
  %v5_12a7c = icmp slt i32 %v0_12a78, 16
  br i1 %v5_12a7c, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_12a94 = phi i32 [ %v0_129e8, %bb52 ], [ %v0_12a78, %.thread8 ], [ 16, %bb55 ]
  %v1_12a80 = add i32 %v0_12a94, -2
  %tmp = icmp ugt i32 %v1_12a80, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12a90

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b3c

dec_label_pc_12a90:                               ; preds = %bb56
  %v2_12a98 = call i32 @function_106fc(i32 -1, i32 %v0_12a94)
  store i32 -1, i32* @r0, align 4
  %v0_12aa4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12aa4, i32* @r1, align 4
  %v1_12aa8 = urem i32 %v0_12a94, 256
  store i32 %v1_12aa8, i32* %sl.global-to-local, align 4
  %v0_12aac = call i32 @function_10600()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_12aac, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_12ac4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12ac4

dec_label_pc_12ac0:                               ; preds = %bb63, %dec_label_pc_12b20
  %v0_12ac0 = phi i32 [ %v1_12b0036, %bb63 ], [ %v0_12ac0.pre, %dec_label_pc_12b20 ]
  store i32 %v0_12ac0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12ac4

dec_label_pc_12ac4:                               ; preds = %dec_label_pc_12a90, %dec_label_pc_12ac0
  %v0_12b00 = phi i32 [ %v0_12ac4.pre, %dec_label_pc_12a90 ], [ %v0_12ac0, %dec_label_pc_12ac0 ]
  %v1_12ac4 = inttoptr i32 %v0_12b00 to i8*
  %v2_12ac4 = load i8, i8* %v1_12ac4, align 1
  %v3_12ac4 = zext i8 %v2_12ac4 to i32
  %v1_12ac8 = add nsw i32 %v3_12ac4, -48
  %v1_12acc = urem i32 %v1_12ac8, 256
  %v1_12ad4 = or i32 %v3_12ac4, 32
  %tmp71 = icmp ult i32 %v1_12acc, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_12adc

dec_label_pc_12adc:                               ; preds = %dec_label_pc_12ac4
  %tmp72 = icmp ugt i32 %v1_12ad4, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12adc
  %v1_12ae0 = add nsw i32 %v1_12ad4, -87
  %v5_12ae8 = urem i32 %v1_12ae0, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12ac4, %dec_label_pc_12adc, %bb57
  %v3_12b18 = phi i32 [ %v1_12acc, %dec_label_pc_12ac4 ], [ 40, %dec_label_pc_12adc ], [ %v5_12ae8, %bb57 ]
  %v1_12aec = load i32, i32* %r5.global-to-local, align 4
  %v6_12af0 = icmp slt i32 %v3_12b18, %v1_12aec
  br i1 %v6_12af0, label %dec_label_pc_12af4, label %dec_label_pc_12b3c.loopexit

dec_label_pc_12af4:                               ; preds = %bb58
  %v0_12af4 = load i32, i32* %ip.global-to-local, align 4
  %v1_12af4 = load i32, i32* %r8.global-to-local, align 4
  %v9_12af4 = icmp eq i32 %v0_12af4, %v1_12af4
  br i1 %v9_12af4, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_12af4
  %v1_12b0032 = add i32 %v0_12b00, 1
  store i32 %v1_12b0032, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b08

bb59:                                             ; preds = %dec_label_pc_12af4
  %v3_12af4 = icmp ult i32 %v0_12af4, %v1_12af4
  %v1_12b00 = add i32 %v0_12b00, 1
  store i32 %v1_12b00, i32* %r4.global-to-local, align 4
  br i1 %v3_12af4, label %dec_label_pc_12b08, label %dec_label_pc_12b20

dec_label_pc_12b08:                               ; preds = %bb59, %.thread31
  %v1_12b0036 = phi i32 [ %v1_12b0032, %.thread31 ], [ %v1_12b00, %bb59 ]
  %v4_12b102235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_12b08 = load i32, i32* %sl.global-to-local, align 4
  %v3_12b08 = icmp uge i32 %v3_12b18, %v1_12b08
  %v9_12b08 = icmp eq i32 %v3_12b18, %v1_12b08
  %v2_12b0c = xor i1 %v3_12b08, true
  %v3_12b0c = or i1 %v9_12b08, %v2_12b0c
  br i1 %v3_12b0c, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_12b08
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_12b08, %bb60
  %v4_12b10 = phi i32 [ %v4_12b102235, %dec_label_pc_12b08 ], [ 0, %bb60 ]
  %v2_12b10 = xor i1 %v9_12b08, true
  %v3_12b10 = and i1 %v3_12b08, %v2_12b10
  br i1 %v3_12b10, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_12b10 = urem i32 %v4_12b10, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_12b14 = phi i32 [ %v5_12b10, %bb62 ], [ %v4_12b10, %bb61 ]
  %v2_12b14 = icmp eq i32 %v0_12b14, 0
  br i1 %v2_12b14, label %bb63, label %dec_label_pc_12b20

bb63:                                             ; preds = %thread-pre-split
  %v4_12b18 = mul i32 %v0_12af4, %v1_12aec
  %v5_12b18 = add i32 %v4_12b18, %v3_12b18
  store i32 %v5_12b18, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ac0

dec_label_pc_12b20:                               ; preds = %bb59, %thread-pre-split
  %v0_12b20 = call i32 @function_10f8c()
  %v0_12b28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12b28, i32* %ip.global-to-local, align 4
  %v0_12b2c = load i32, i32* @r7, align 4
  %v2_12b2c = and i32 %v0_12b2c, %v0_129f0
  store i32 %v2_12b2c, i32* @r7, align 4
  %v2_12b34 = inttoptr i32 %v0_12b20 to i32*
  store i32 34, i32* %v2_12b34, align 4
  %v0_12ac0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ac0

dec_label_pc_12b3c.loopexit:                      ; preds = %bb58
  %v0_12b3c.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12b3c

dec_label_pc_12b3c:                               ; preds = %.thread, %dec_label_pc_12b3c.loopexit
  %v2_12b40 = phi i32 [ %v0_12b3c.pre, %dec_label_pc_12b3c.loopexit ], [ %v0_129e4, %.thread ]
  %v2_12b3c = icmp eq i32 %v2_12b40, 0
  br i1 %v2_12b3c, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_12b3c
  %v1_12b40 = load i32, i32* %r6.global-to-local, align 4
  %v3_12b40 = inttoptr i32 %v2_12b40 to i32*
  store i32 %v1_12b40, i32* %v3_12b40, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_12b3c, %bb64
  %v0_12b48 = load i32, i32* @r7, align 4
  %v2_12b48 = icmp eq i32 %v0_12b48, 0
  %. = select i1 %v2_12b48, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_12b54 = icmp eq i32 %v0_129f0, 0
  %v0_12b78.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12b54, label %dec_label_pc_12b70, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_12b78.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_12b60, label %dec_label_pc_12b70

dec_label_pc_12b60:                               ; preds = %bb68
  %v0_12b60 = call i32 @function_10f8c()
  %v2_12b68 = inttoptr i32 %v0_12b60 to i32*
  store i32 34, i32* %v2_12b68, align 4
  %v0_12b6c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12b6c, i32* %ip.global-to-local, align 4
  %v0_12b70.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12b70

dec_label_pc_12b70:                               ; preds = %bb68, %bb65, %dec_label_pc_12b60
  %v0_12b78.pre = phi i32 [ %v0_12b78.pre.pre, %bb68 ], [ %v0_12b6c, %dec_label_pc_12b60 ], [ %v0_12b78.pre.pre, %bb65 ]
  %v0_12b70 = phi i32 [ %v0_12b48, %bb68 ], [ %v0_12b70.pre, %dec_label_pc_12b60 ], [ %v0_12b48, %bb65 ]
  %v2_12b70 = icmp eq i32 %v0_12b70, 0
  br i1 %v2_12b70, label %dec_label_pc_12b70._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_12b70
  %v2_12b74 = sub i32 0, %v0_12b78.pre
  store i32 %v2_12b74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b70._crit_edge

dec_label_pc_12b70._crit_edge:                    ; preds = %dec_label_pc_12b70, %bb69
  %v0_12b78 = phi i32 [ %v2_12b74, %bb69 ], [ %v0_12b78.pre, %dec_label_pc_12b70 ]
  store i32 %v3_129d0, i32* @r4, align 4
  store i32 %v12_129d0, i32* @r7, align 4
  ret i32 %v0_12b78

; uselistorder directives
  uselistorder i32 %v0_12b78.pre, { 1, 0 }
  uselistorder i32 %v0_12b78.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_12b10, { 1, 0 }
  uselistorder i1 %v3_12b08, { 1, 0 }
  uselistorder i32 %v1_12b08, { 1, 0 }
  uselistorder i32 %v1_12ad4, { 1, 0 }
  uselistorder i32 %v1_12acc, { 1, 0 }
  uselistorder i32 %v0_12b00, { 1, 0, 2 }
  uselistorder i32 %v0_12ac0, { 1, 0 }
  uselistorder i32 %v3_12a70, { 1, 0 }
  uselistorder i32 %v1_12a64, { 1, 0, 2 }
  uselistorder i32 %v0_12a34, { 0, 1, 3, 2 }
  uselistorder i32 %v0_129f0, { 1, 0 }
  uselistorder i32 %v0_129e8, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_10600, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 (i32, i32)* @function_106fc, { 3, 2, 0, 6, 1, 5, 4 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12b70._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12b70, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_12b3c, { 1, 0 }
  uselistorder label %dec_label_pc_12b20, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12ac4, { 1, 0 }
  uselistorder label %dec_label_pc_12ac0, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12a38, { 1, 0 }
  uselistorder label %dec_label_pc_12a34, { 1, 0 }
  uselistorder label %dec_label_pc_129fc, { 1, 0 }
}

define i32 @function_12b90(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b90:
  %stack_var_-16 = alloca i32, align 4
  store i32 124088, i32* @r5, align 4
  %v4_12b9c = load i32, i32* inttoptr (i32 124176 to i32*), align 16
  store i32 %v4_12b9c, i32* @r4, align 4
  %v2_12ba4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_12bbc = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_12bbc)
  %v0_12bd0 = load i32, i32* @r5, align 4
  %v2_12bd0 = add i32 %v0_12bd0, 16
  %v3_12bd0 = inttoptr i32 %v2_12bd0 to i32*
  %v4_12bd0 = load i32, i32* %v3_12bd0, align 4
  call void @__pseudo_branch(i32 %v4_12bd0)
  %v4_12be0 = load i32, i32* @global_var_1e754.407, align 4
  %v2_12be4 = icmp eq i32 %v4_12be0, 0
  br i1 %v2_12be4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12b90
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12b90, %bb
  %v2_12bf0 = xor i1 %v2_12be4, true
  call void @__pseudo_cond_branch(i1 %v2_12bf0, i32 %v4_12be0)
  store i32 %v2_12ba4, i32* @r0, align 4
  %v0_12c00 = load i32, i32* @r5, align 4
  %v2_12c00 = add i32 %v0_12c00, 24
  %v3_12c00 = inttoptr i32 %v2_12c00 to i32*
  %v4_12c00 = load i32, i32* %v3_12c00, align 4
  call void @__pseudo_branch(i32 %v4_12c00)
  %v0_12c0c = call i32 @function_1345c()
  %v0_12c14 = load i32, i32* @r5, align 4
  %v9_12c14 = icmp eq i32 %v0_12c14, 39872
  br i1 %v9_12c14, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_12c1c = xor i1 %v9_12c14, true
  call void @__pseudo_cond_branch(i1 %v2_12c1c, i32 ptrtoint (i32* @global_var_148f8.410 to i32))
  %v0_12c20 = load i32, i32* @r6, align 4
  %v1_12c24 = call i32 @function_13ec4(i32 %v0_12c20)
  %v0_12c28 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12c28, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v2_12c28 = load i32, i32* @r8, align 4
  %v3_12c28 = load i32, i32* @sb, align 4
  %v8_12c28 = shl i32 %v2_12c28, %v3_12c28
  %v9_12c28 = and i32 %v8_12c28, %v1_12c24
  store i32 %v9_12c28, i32* @fp, align 4
  %v2_12c3c = load i32, i32* @r2, align 4
  %v3_12c3c = mul i32 %v2_12c3c, %v4_12c00
  %v8_12c40 = shl i32 %v2_12c28, %v3_12c3c
  %v9_12c40 = and i32 %v8_12c40, %v3_12c3c
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_12c40 = phi i32 [ %v1_12c24, %bb9 ], [ %v9_12c40, %bb10 ]
  ret i32 %v10_12c40

; uselistorder directives
  uselistorder i32 %v1_12c24, { 1, 0 }
  uselistorder i1 %v9_12c14, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12c48(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c48:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_12c48 = load i32, i32* @r4, align 4
  %v6_12c48 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_12c4c = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_12c4c, label %dec_label_pc_12ce0, label %dec_label_pc_12c5c

dec_label_pc_12c5c:                               ; preds = %dec_label_pc_12c48
  %v2_12c6c = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12c80 = call i32 @function_138d4(i32 17, i32 0, i32 %v2_12c6c)
  %v3_12c84 = load i32, i32* %stack_var_-44, align 4
  %v7_12c88 = icmp eq i32 %v3_12c84, 1
  br i1 %v7_12c88, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12c5c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12c5c, %bb
  call void @__pseudo_cond_branch(i1 %v7_12c88, i32 ptrtoint (i32* @global_var_10b2c.412 to i32))
  %v2_12c9c = ptrtoint i32* %stack_var_-16 to i32
  %v2_12ca4 = call i32 @function_13e08(i32 %v2_12c9c, i32 %v2_12c9c)
  %v2_12ca8 = icmp eq i32 %v2_12ca4, 0
  br i1 %v2_12ca8, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_12cbc = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_12cbc, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_12ccc = load i32, i32* %stack_var_-24, align 4
  %v1_12cd0 = and i32 %v3_12ccc, 65536
  %v2_12cd0 = icmp eq i32 %v1_12cd0, 0
  br i1 %v2_12cd0, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_12cd0, i32 ptrtoint (i32* @global_var_10b2c.412 to i32))
  %v0_12ce0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ce0

dec_label_pc_12ce0:                               ; preds = %dec_label_pc_12c48, %.thread6
  %v0_12ce0 = phi i32 [ %v0_12ce0.pre, %.thread6 ], [ 0, %dec_label_pc_12c48 ]
  store i32 %v3_12c48, i32* @r4, align 4
  store i32 %v6_12c48, i32* @lr, align 4
  ret i32 %v0_12ce0

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_138d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ce0, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12cf4() local_unnamed_addr {
dec_label_pc_12cf4:
  %stack_var_-36 = alloca i32, align 4
  store i32 124088, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_1613c.416 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_12d14 = call i32 @function_14338(i32 ptrtoint ([11 x i8]* @global_var_1613c.416 to i32))
  store i32 %v2_12d14, i32* @r6, align 4
  %v2_12d18 = icmp eq i32 %v2_12d14, 0
  br i1 %v2_12d18, label %dec_label_pc_12d98, label %dec_label_pc_12d20

dec_label_pc_12d20:                               ; preds = %dec_label_pc_12cf4
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_16148.419 to i32), i32* @r8, align 4
  %v2_12d2c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12d2c, i32* @r7, align 4
  br label %bb18

dec_label_pc_12d34:                               ; preds = %bb18
  %v3_12d34 = load i32, i32* %stack_var_-36, align 4
  %v1_12d38 = inttoptr i32 %v3_12d34 to i32*
  %v2_12d38 = load i32, i32* %v1_12d38, align 4
  %v1_12d3c = inttoptr i32 %v2_12d38 to i8*
  %v2_12d3c = load i8, i8* %v1_12d3c, align 1
  %v7_12d40 = icmp eq i8 %v2_12d3c, 99
  br i1 %v7_12d40, label %dec_label_pc_12d48, label %.backedge3

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d34
  %v1_12d48 = add i32 %v2_12d38, 1
  %v2_12d48 = inttoptr i32 %v1_12d48 to i8*
  %v3_12d48 = load i8, i8* %v2_12d48, align 1
  %v7_12d4c = icmp eq i8 %v3_12d48, 112
  br i1 %v7_12d4c, label %dec_label_pc_12d54, label %.backedge3

dec_label_pc_12d54:                               ; preds = %dec_label_pc_12d48
  %v1_12d54 = add i32 %v2_12d38, 2
  %v2_12d54 = inttoptr i32 %v1_12d54 to i8*
  %v3_12d54 = load i8, i8* %v2_12d54, align 1
  %v7_12d58 = icmp eq i8 %v3_12d54, 117
  br i1 %v7_12d58, label %dec_label_pc_12d60, label %.backedge3

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d54
  %v1_12d60 = add i32 %v2_12d38, 3
  %v2_12d60 = inttoptr i32 %v1_12d60 to i8*
  %v3_12d60 = load i8, i8* %v2_12d60, align 1
  %v4_12d60 = zext i8 %v3_12d60 to i32
  %v0_12d64 = load i32, i32* @r4, align 4
  %v1_12d64 = load i32, i32* @sl, align 4
  %v2_12d64 = add i32 %v1_12d64, %v0_12d64
  %v3_12d64 = inttoptr i32 %v2_12d64 to i32*
  %v4_12d64 = load i32, i32* %v3_12d64, align 4
  %v2_12d68 = mul nuw nsw i32 %v4_12d60, 2
  %v2_12d6c = add i32 %v4_12d64, %v2_12d68
  %v3_12d6c = inttoptr i32 %v2_12d6c to i16*
  %v4_12d6c = load i16, i16* %v3_12d6c, align 2
  %v1_12d70 = and i16 %v4_12d6c, 8
  %v2_12d70 = icmp eq i16 %v1_12d70, 0
  br i1 %v2_12d70, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_12d60
  %v1_12d74 = load i32, i32* @r5, align 4
  %v2_12d74 = add i32 %v1_12d74, 1
  store i32 %v2_12d74, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_12d60, %dec_label_pc_12d34, %dec_label_pc_12d48, %dec_label_pc_12d54
  %v0_12d78.pre = load i32, i32* @r6, align 4
  %v0_12d84.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_12d20
  %v0_12d84 = phi i32 [ %v0_12d84.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_16148.419 to i32), %dec_label_pc_12d20 ]
  %v0_12d78 = phi i32 [ %v0_12d78.pre, %.backedge3 ], [ %v2_12d14, %dec_label_pc_12d20 ]
  %v4_12d88 = inttoptr i32 %v0_12d78 to i32*
  %v5_12d88 = call i32 @function_13fdc(i32* %v4_12d88, i32 %v2_12d2c, i32 258, i32 %v0_12d84)
  %v2_12d8c = icmp eq i32 %v5_12d88, 0
  br i1 %v2_12d8c, label %dec_label_pc_12dfc, label %dec_label_pc_12d34

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12cf4
  store i32 ptrtoint ([14 x i8]* @global_var_1614c.422 to i32), i32* @r0, align 4
  %v2_12da0 = call i32 @function_14338(i32 ptrtoint ([14 x i8]* @global_var_1614c.422 to i32))
  store i32 %v2_12da0, i32* @r6, align 4
  %v2_12da4 = icmp eq i32 %v2_12da0, 0
  br i1 %v2_12da4, label %bb19, label %dec_label_pc_12db0

bb19:                                             ; preds = %dec_label_pc_12d98
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12db0:                               ; preds = %dec_label_pc_12d98
  store i32 ptrtoint ([10 x i8]* @global_var_1615c.424 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_16180.426 to i32), i32* @r7, align 4
  %v2_12dc0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12dc0, i32* @r4, align 4
  br label %bb21

dec_label_pc_12dc8:                               ; preds = %bb21
  %v0_12df4 = load i32, i32* @r8, align 4
  %v1_12df4 = inttoptr i32 %v0_12df4 to i8*
  %v3_12dc8 = load i32, i32* %stack_var_-36, align 4
  %v1_12dcc = inttoptr i32 %v3_12dc8 to i32*
  %v2_12dcc = load i32, i32* %v1_12dcc, align 4
  store i32 %v2_12dcc, i32* @r1, align 4
  %v4_12dd0 = call i32 @function_155f0(i8* %v1_12df4, i32 %v2_12dcc)
  %v2_12dd4 = icmp eq i32 %v4_12dd0, 0
  br i1 %v2_12dd4, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_12dc8
  %v1_12dd8 = load i32, i32* @r5, align 4
  %v2_12dd8 = add i32 %v1_12dd8, 1
  store i32 %v2_12dd8, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_12dc8
  %v0_12de4.pre = load i32, i32* @r7, align 4
  %v0_12de8.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_12db0
  %v0_12de8 = phi i32 [ %v0_12de8.pre, %.backedge ], [ %v2_12da0, %dec_label_pc_12db0 ]
  %v0_12de4 = phi i32 [ %v0_12de4.pre, %.backedge ], [ ptrtoint (i32* @global_var_16180.426 to i32), %dec_label_pc_12db0 ]
  %v4_12dec = inttoptr i32 %v0_12de8 to i32*
  %v5_12dec = call i32 @function_13fdc(i32* %v4_12dec, i32 %v2_12dc0, i32 459266, i32 %v0_12de4)
  %v2_12df0 = icmp eq i32 %v5_12dec, 0
  br i1 %v2_12df0, label %dec_label_pc_12dfc, label %dec_label_pc_12dc8

dec_label_pc_12dfc:                               ; preds = %bb18, %bb21, %bb19
  %v0_12dfc = load i32, i32* @r6, align 4
  %v1_12e00 = inttoptr i32 %v0_12dfc to i32*
  %v2_12e00 = call i32 @function_14304(i32* %v1_12e00)
  %v0_12e04 = load i32, i32* @r5, align 4
  %v2_12e04 = icmp eq i32 %v0_12e04, 0
  %.v0_12e04 = select i1 %v2_12e04, i32 1, i32 %v0_12e04
  ret i32 %.v0_12e04

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_14338, { 1, 0 }
  uselistorder label %dec_label_pc_12dfc, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_12e40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12e40:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_13228

bb:                                               ; preds = %dec_label_pc_12e40
  %v7_12e54 = mul i32 %arg1, 4
  %v8_12e54 = add i32 %v7_12e54, ptrtoint (i32* @global_var_12e5c.429 to i32)
  call void @__pseudo_branch(i32 %v8_12e54)
  br label %dec_label_pc_13228

dec_label_pc_13228:                               ; preds = %bb, %dec_label_pc_12e40
  %v0_13228 = call i32 @function_10f8c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13234 = inttoptr i32 %v0_13228 to i32*
  store i32 22, i32* %v2_13234, align 4
  %v0_133e4 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_133e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_1345c() local_unnamed_addr {
dec_label_pc_13480.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1345c = load i32, i32* @r4, align 4
  store i32 %v3_1345c, i32* %stack_var_-16, align 4
  store i32 124080, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13480

dec_label_pc_13480:                               ; preds = %dec_label_pc_13480.dec_label_pc_13480_crit_edge, %dec_label_pc_13480.lr.ph
  %v1_13480 = phi i32 [ %v1_1348c, %dec_label_pc_13480.dec_label_pc_13480_crit_edge ], [ 0, %dec_label_pc_13480.lr.ph ]
  %v0_13480 = phi i32 [ %v0_13480.pre, %dec_label_pc_13480.dec_label_pc_13480_crit_edge ], [ 124080, %dec_label_pc_13480.lr.ph ]
  %v4_13480 = mul i32 %v1_13480, 4
  %v5_13480 = add i32 %v4_13480, %v0_13480
  %v6_13480 = inttoptr i32 %v5_13480 to i32*
  %v7_13480 = load i32, i32* %v6_13480, align 4
  call void @__pseudo_branch(i32 %v7_13480)
  %v0_1348c = load i32, i32* %r4.global-to-local, align 4
  %v1_1348c = add i32 %v0_1348c, -1
  store i32 %v1_1348c, i32* %r4.global-to-local, align 4
  %v2_1348c = icmp eq i32 %v0_1348c, 0
  br i1 %v2_1348c, label %dec_label_pc_13494, label %dec_label_pc_13480.dec_label_pc_13480_crit_edge

dec_label_pc_13480.dec_label_pc_13480_crit_edge:  ; preds = %dec_label_pc_13480
  %v0_13480.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13480

dec_label_pc_13494:                               ; preds = %dec_label_pc_13480
  %v4_13498 = load i32, i32* @global_var_1e764.442, align 4
  %v2_1349c = icmp eq i32 %v4_13498, 0
  br i1 %v2_1349c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13494
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13494, %bb
  %v2_134a4 = xor i1 %v2_1349c, true
  call void @__pseudo_cond_branch(i1 %v2_134a4, i32 %v4_13498)
  %v4_134ac = load i32, i32* @global_var_1e768.444, align 4
  %v2_134b0 = icmp eq i32 %v4_134ac, 0
  br i1 %v2_134b0, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_134b8 = xor i1 %v2_134b0, true
  call void @__pseudo_cond_branch(i1 %v2_134b8, i32 %v4_134ac)
  %v2_134bc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_134bc, i32* %r4.global-to-local, align 4
  %v1_134c0 = load i32, i32* @r0, align 4
  ret i32 %v1_134c0

; uselistorder directives
  uselistorder i32 %v1_1348c, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_134d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_134d8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_134ec = call i32 @function_10998(i32 %arg1, i32 1)
  %v3_134f4 = icmp eq i32 %v2_134ec, -1
  store i32 124088, i32* @r3, align 4
  br i1 %v3_134f4, label %dec_label_pc_13500, label %dec_label_pc_13518

dec_label_pc_13500:                               ; preds = %dec_label_pc_134d8
  %v0_13504 = load i32, i32* %r5.global-to-local, align 4
  %v3_1350c = call i32 @function_10770(i32 ptrtoint ([10 x i8]* @global_var_16184.447 to i32), i32 %v0_13504)
  %v1_13510 = load i32, i32* %r4.global-to-local, align 4
  %v1_13514 = icmp ne i32 %v3_1350c, %v1_13510
  call void @__pseudo_cond_branch(i1 %v1_13514, i32 ptrtoint (i32* @global_var_1286c.448 to i32))
  br label %dec_label_pc_13518

dec_label_pc_13518:                               ; preds = %dec_label_pc_134d8, %dec_label_pc_13500
  %v1_13520 = phi i32 [ %v2_134ec, %dec_label_pc_134d8 ], [ %v3_1350c, %dec_label_pc_13500 ]
  ret i32 %v1_13520

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13518, { 1, 0 }
}

define i32 @function_1352c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1352c:
  %r4.global-to-local = alloca i32, align 4
  store i32 124088, i32* %r4.global-to-local, align 4
  %v4_1353c = load i32, i32* inttoptr (i32 124180 to i32*), align 4
  %v1_13540 = inttoptr i32 %v4_1353c to i32*
  %v2_13540 = load i32, i32* %v1_13540, align 4
  %v2_13544 = icmp eq i32 %v2_13540, 0
  br i1 %v2_13544, label %dec_label_pc_1354c, label %dec_label_pc_13580

dec_label_pc_1354c:                               ; preds = %dec_label_pc_1352c
  %v4_13550 = load i32, i32* inttoptr (i32 124140 to i32*), align 4
  %v2_13558 = icmp eq i32 %v4_13550, 0
  store i32 4096, i32* %v1_13540, align 4
  br i1 %v2_13558, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_1354c
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_1354c, %bb
  %v2_13564 = xor i1 %v2_13558, true
  call void @__pseudo_cond_branch(i1 %v2_13564, i32 %v4_13550)
  %v0_1356c = load i32, i32* %r4.global-to-local, align 4
  %v2_13574 = icmp eq i32 %v0_1356c, 40028
  br i1 %v2_13574, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_1357c = xor i1 %v2_13574, true
  call void @__pseudo_cond_branch(i1 %v2_1357c, i32 ptrtoint (i32* @global_var_1485c.453 to i32))
  br label %dec_label_pc_13580

dec_label_pc_13580:                               ; preds = %dec_label_pc_1352c, %bb6
  %v1_13584 = load i32, i32* @r0, align 4
  ret i32 %v1_13584

; uselistorder directives
  uselistorder i1 %v2_13574, { 1, 0 }
  uselistorder label %dec_label_pc_13580, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13598(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13598:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_135a0 = add i32 %tmp, 4
  store i32 %v1_135a0, i32* %ip.global-to-local, align 4
  %v2_135a4 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 124088, i32* @r6, align 4
  %v3_135b0 = mul i32 %arg2, 4
  store i32 %v3_135b0, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_135b8 = load i32, i32* inttoptr (i32 124108 to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_135c0 = ptrtoint i32* %stack_var_-120 to i32
  %v4_135c4 = load i32, i32* inttoptr (i32 124116 to i32*), align 4
  store i32 %v4_135c4, i32* %r4.global-to-local, align 4
  %v2_135cc = add i32 %v1_135a0, %v3_135b0
  store i32 %v2_135cc, i32* %ip.global-to-local, align 4
  %v9_135d0 = icmp eq i32 %v2_135cc, %v2_135a4
  store i1 %v9_135d0, i1* %cpsr_z.global-to-local, align 1
  %v2_135d4 = inttoptr i32 %v4_135b8 to i32*
  store i32 %arg7, i32* %v2_135d4, align 4
  store i32 688, i32* %r2.global-to-local, align 4
  %v0_135e0 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_135d0, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_13598
  %v1_135e4 = load i32, i32* @r7, align 4
  %v2_135e4 = load i32, i32* %r5.global-to-local, align 4
  %v3_135e4 = add i32 %v2_135e4, %v1_135e4
  store i32 %v3_135e4, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1e768.444, align 4
  %v0_135ec = load i32, i32* %ip.global-to-local, align 4
  %v1_135ec = load i32, i32* %r4.global-to-local, align 4
  %v2_135ec = inttoptr i32 %v1_135ec to i32*
  store i32 %v0_135ec, i32* %v2_135ec, align 4
  store i32 120, i32* @r2, align 4
  %v1_135f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_135f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_135f8 = inttoptr i32 %v2_135f8 to i32*
  store i32 %v1_135f8, i32* %v3_135f8, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_13598
  store i32 %arg6, i32* @global_var_1e768.444, align 4
  %v0_135ec.c = load i32, i32* %ip.global-to-local, align 4
  %v1_135ec.c = load i32, i32* %r4.global-to-local, align 4
  %v2_135ec.c = inttoptr i32 %v1_135ec.c to i32*
  store i32 %v0_135ec.c, i32* %v2_135ec.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_13604 = bitcast i32* %stack_var_-120 to i8*
  %v3_13604 = call i32 @function_10fe0(i8* %v2_13604, i32 0)
  %v0_13608 = load i32, i32* %r4.global-to-local, align 4
  %v1_13608 = inttoptr i32 %v0_13608 to i32*
  %storemerge.pre = load i32, i32* %v1_13608, align 4
  br label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %dec_label_pc_13614, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_13614, %dec_label_pc_13614 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_13614 = inttoptr i32 %storemerge to i32*
  %v2_13614 = load i32, i32* %v1_13614, align 4
  store i32 %v2_13614, i32* %r3.global-to-local, align 4
  %v4_13614 = add i32 %storemerge, 4
  store i32 %v4_13614, i32* %r2.global-to-local, align 4
  %v2_13618 = icmp eq i32 %v2_13614, 0
  br i1 %v2_13618, label %dec_label_pc_13624, label %dec_label_pc_13614

dec_label_pc_13624:                               ; preds = %dec_label_pc_13614
  store i32 %v4_13614, i32* @r4, align 4
  store i32 %v2_135c0, i32* @r5, align 4
  %v1_1364829 = inttoptr i32 %v4_13614 to i32*
  %v2_1364830 = load i32, i32* %v1_1364829, align 4
  store i32 %v2_1364830, i32* %r3.global-to-local, align 4
  %v2_1364c32 = icmp eq i32 %v2_1364830, 0
  store i1 %v2_1364c32, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1364c32, label %dec_label_pc_13654, label %dec_label_pc_13630

dec_label_pc_13630:                               ; preds = %dec_label_pc_13624, %dec_label_pc_13648
  %v5_13634 = phi i32 [ %v2_13648, %dec_label_pc_13648 ], [ %v2_1364830, %dec_label_pc_13624 ]
  %v2_13630 = icmp ugt i32 %v5_13634, 13
  %v7_13630 = icmp eq i32 %v5_13634, 14
  store i1 %v7_13630, i1* %cpsr_z.global-to-local, align 1
  %v2_13634 = xor i1 %v2_13630, true
  %v3_13634 = or i1 %v7_13630, %v2_13634
  br i1 %v3_13634, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_13630
  %v6_13634 = and i32 %v5_13634, 536870912
  %v7_13634 = icmp ne i32 %v6_13634, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_13630, %bb58
  %v1_13640 = phi i1 [ %v2_13630, %dec_label_pc_13630 ], [ %v7_13634, %bb58 ]
  %v2_13638 = xor i1 %v1_13640, true
  %v3_13638 = or i1 %v7_13630, %v2_13638
  br i1 %v3_13638, label %bb60, label %dec_label_pc_13648

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13648

dec_label_pc_13648:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_13638, i32 ptrtoint (i32* @global_var_11090.458 to i32))
  %v0_13644 = load i32, i32* @r4, align 4
  %v1_13644 = add i32 %v0_13644, 8
  store i32 %v1_13644, i32* @r4, align 4
  %v1_13648 = inttoptr i32 %v1_13644 to i32*
  %v2_13648 = load i32, i32* %v1_13648, align 4
  store i32 %v2_13648, i32* %r3.global-to-local, align 4
  %v2_1364c = icmp eq i32 %v2_13648, 0
  store i1 %v2_1364c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1364c, label %dec_label_pc_13654, label %dec_label_pc_13630

dec_label_pc_13654:                               ; preds = %dec_label_pc_13648, %dec_label_pc_13624
  %v1_13658 = call i32 @function_15a64(i32 %v2_135c0)
  store i32 %v1_13658, i32* @r0, align 4
  %v1_1365c = call i32 @function_1352c(i32 %v1_13658)
  store i32 %v1_1365c, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_13668 = load i32, i32* @r6, align 4
  %v2_13668 = add i32 %v0_13668, 92
  %v3_13668 = inttoptr i32 %v2_13668 to i32*
  %v4_13668 = load i32, i32* %v3_13668, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_13670 = icmp eq i32 %tmp53, 0
  store i1 %v2_13670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13670, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_13654
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_13654, %bb61
  %v0_1367c = phi i32 [ %tmp53, %dec_label_pc_13654 ], [ 4096, %bb61 ]
  %v3_13678 = icmp eq i32 %tmp52, -1
  %v8_13678 = icmp eq i32 %tmp52, -1
  store i1 %v8_13678, i1* %cpsr_z.global-to-local, align 1
  %v2_1367c = inttoptr i32 %v4_13668 to i32*
  store i32 %v0_1367c, i32* %v2_1367c, align 4
  br i1 %v3_13678, label %dec_label_pc_13684, label %dec_label_pc_136ac

dec_label_pc_13684:                               ; preds = %bb62
  %v0_13684 = call i32 @function_1399c()
  store i32 %v0_13684, i32* @r0, align 4
  store i32 %v0_13684, i32* @r4, align 4
  %v0_1368c = call i32 @function_139f8()
  store i32 %v0_1368c, i32* @r0, align 4
  %v0_13690 = load i32, i32* @r4, align 4
  %v9_13690 = icmp eq i32 %v0_13690, %v0_1368c
  store i1 %v9_13690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13690, label %dec_label_pc_13698, label %dec_label_pc_136d4

dec_label_pc_13698:                               ; preds = %dec_label_pc_13684
  %v1_13698 = call i32 @function_13b64(i32 %v0_1368c)
  store i32 %v1_13698, i32* @r0, align 4
  store i32 %v1_13698, i32* @r4, align 4
  %v0_136a0 = call i32 @function_139e4()
  store i32 %v0_136a0, i32* @r0, align 4
  %v0_136a4 = load i32, i32* @r4, align 4
  %v9_136a4 = icmp eq i32 %v0_136a4, %v0_136a0
  store i1 %v9_136a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_136a4, label %dec_label_pc_136ac, label %dec_label_pc_136d4

dec_label_pc_136ac:                               ; preds = %dec_label_pc_13698, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_13678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13678, label %dec_label_pc_136f8, label %dec_label_pc_136b8

dec_label_pc_136b8:                               ; preds = %dec_label_pc_136ac
  store i32 %tmp51, i32* @r3, align 4
  %v9_136bc = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_136bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_136bc, label %dec_label_pc_136c4, label %dec_label_pc_136d4

dec_label_pc_136c4:                               ; preds = %dec_label_pc_136b8
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_136cc = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_136cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_136cc, label %dec_label_pc_136f8, label %dec_label_pc_136d4

dec_label_pc_136d4:                               ; preds = %dec_label_pc_136b8, %dec_label_pc_13698, %dec_label_pc_13684, %dec_label_pc_136c4
  %v2_136dc = call i32 @function_134d8(i32 0, i32 32768)
  %v2_136e8 = call i32 @function_134d8(i32 1, i32 32770)
  %v2_136f4 = call i32 @function_134d8(i32 2, i32 32770)
  store i32 %v2_136f4, i32* @r0, align 4
  br label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136c4, %dec_label_pc_136ac, %dec_label_pc_136d4
  %v0_136f8 = load i32, i32* @r7, align 4
  %v1_136f8 = inttoptr i32 %v0_136f8 to i32*
  %v2_136f8 = load i32, i32* %v1_136f8, align 4
  store i32 %v2_136f8, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_13700 = load i32, i32* @r6, align 4
  %v3_13700 = add i32 %v1_13700, 208
  %v4_13700 = inttoptr i32 %v3_13700 to i32*
  store i32 %v2_136f8, i32* %v4_13700, align 4
  %v0_13704 = load i32, i32* @r7, align 4
  %v1_13704 = inttoptr i32 %v0_13704 to i32*
  %v2_13704 = load i32, i32* %v1_13704, align 4
  store i32 %v2_13704, i32* @r4, align 4
  %v2_13708 = icmp eq i32 %v2_13704, 0
  store i1 %v2_13708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13708, label %dec_label_pc_137ac.lr.ph, label %dec_label_pc_13710

dec_label_pc_13710:                               ; preds = %dec_label_pc_136f8
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_13714 = load i32, i32* @r6, align 4
  %v2_13714 = add i32 %v0_13714, 112
  %v3_13714 = inttoptr i32 %v2_13714 to i32*
  %v4_13714 = load i32, i32* %v3_13714, align 4
  store i32 %v4_13714, i32* %r3.global-to-local, align 4
  %v2_13718 = inttoptr i32 %v4_13714 to i32*
  store i32 %v2_13704, i32* %v2_13718, align 4
  %v0_13720 = load i32, i32* @r7, align 4
  %v1_13720 = inttoptr i32 %v0_13720 to i32*
  %v2_13720 = load i32, i32* %v1_13720, align 4
  %v4_13724 = call i32 @function_156a0(i32 %v2_13720, i32 47, i32 %v2_136f8, i32 %v4_13714)
  store i32 %v4_13724, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_1372c = icmp eq i32 %v4_13724, 0
  store i1 %v2_1372c, i1* %cpsr_z.global-to-local, align 1
  %v0_13730 = load i32, i32* @r6, align 4
  %v2_13730 = add i32 %v0_13730, 60
  %v3_13730 = inttoptr i32 %v2_13730 to i32*
  %v4_13730 = load i32, i32* %v3_13730, align 4
  store i32 %v4_13730, i32* %r2.global-to-local, align 4
  br i1 %v2_1372c, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_13710
  %v2_1373847 = inttoptr i32 %v4_13730 to i32*
  store i32 0, i32* %v2_1373847, align 4
  br label %dec_label_pc_137ac.lr.ph

bb63:                                             ; preds = %dec_label_pc_13710
  %v2_13734 = add i32 %v4_13724, 1
  store i32 %v2_13734, i32* %r3.global-to-local, align 4
  %v2_13738 = inttoptr i32 %v4_13730 to i32*
  store i32 %v4_13724, i32* %v2_13738, align 4
  %v1_1373c = load i32, i32* %r3.global-to-local, align 4
  %v2_1373c = load i32, i32* %r2.global-to-local, align 4
  %v3_1373c = inttoptr i32 %v2_1373c to i32*
  store i32 %v1_1373c, i32* %v3_1373c, align 4
  br label %dec_label_pc_137ac.lr.ph

dec_label_pc_137ac.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_136f8
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_13754 = load i32, i32* @r6, align 4
  %v2_13754 = add i32 %v0_13754, -12
  store i32 %v2_13754, i32* %r8.global-to-local, align 4
  store i32 684, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1e764.442, align 4
  %v2_13784 = icmp eq i32 %v0_135e0, 0
  store i1 %v2_13784, i1* %cpsr_z.global-to-local, align 1
  %v2_1378c = xor i1 %v2_13784, true
  call void @__pseudo_cond_branch(i1 %v2_1378c, i32 %v0_135e0)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_137a0 = load i32, i32* @r6, align 4
  %v2_137a0 = add i32 %v0_137a0, -12
  store i32 %v2_137a0, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_137ac

dec_label_pc_137ac:                               ; preds = %dec_label_pc_137ac.dec_label_pc_137ac_crit_edge, %dec_label_pc_137ac.lr.ph
  %v1_137ac = phi i32 [ %v1_137b8, %dec_label_pc_137ac.dec_label_pc_137ac_crit_edge ], [ 0, %dec_label_pc_137ac.lr.ph ]
  %v0_137ac = phi i32 [ %v0_137ac.pre, %dec_label_pc_137ac.dec_label_pc_137ac_crit_edge ], [ %v2_137a0, %dec_label_pc_137ac.lr.ph ]
  %v4_137ac = mul i32 %v1_137ac, 4
  %v5_137ac = add i32 %v4_137ac, %v0_137ac
  %v6_137ac = inttoptr i32 %v5_137ac to i32*
  %v7_137ac = load i32, i32* %v6_137ac, align 4
  store i32 %v7_137ac, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_137ac)
  %v0_137b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_137b8 = add i32 %v0_137b8, 1
  store i32 %v1_137b8, i32* %r4.global-to-local, align 4
  %v1_137bc = load i32, i32* %r5.global-to-local, align 4
  %v3_137bc = icmp ult i32 %v1_137b8, %v1_137bc
  %v9_137bc = icmp eq i32 %v1_137b8, %v1_137bc
  store i1 %v9_137bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_137bc, label %dec_label_pc_137ac.dec_label_pc_137ac_crit_edge, label %dec_label_pc_137c4

dec_label_pc_137ac.dec_label_pc_137ac_crit_edge:  ; preds = %dec_label_pc_137ac
  %v0_137ac.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_137ac

dec_label_pc_137c4:                               ; preds = %dec_label_pc_137ac
  %v0_137c8.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_137c8 = add i32 %v0_137c8.pre, 104
  %v3_137c8 = inttoptr i32 %v2_137c8 to i32*
  %v4_137c8 = load i32, i32* %v3_137c8, align 4
  store i32 %v4_137c8, i32* %r2.global-to-local, align 4
  store i32 %v4_137c8, i32* %r3.global-to-local, align 4
  %v2_137d0 = icmp eq i32 %v4_137c8, 0
  store i1 %v2_137d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_137d0, label %dec_label_pc_137e8, label %dec_label_pc_137d8

dec_label_pc_137d8:                               ; preds = %dec_label_pc_137c4
  call void @__pseudo_branch(i32 %v4_137c8)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_137e4 = load i32, i32* @r0, align 4
  %v2_137e4 = inttoptr i32 %v1_137e4 to i32*
  store i32 0, i32* %v2_137e4, align 4
  %v0_137ec.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_137e8

dec_label_pc_137e8:                               ; preds = %dec_label_pc_137c4, %dec_label_pc_137d8
  %v0_137ec = phi i32 [ %v0_137c8.pre, %dec_label_pc_137c4 ], [ %v0_137ec.pre, %dec_label_pc_137d8 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_137ec = add i32 %v0_137ec, 80
  %v3_137ec = inttoptr i32 %v2_137ec to i32*
  %v4_137ec = load i32, i32* %v3_137ec, align 4
  store i32 %v4_137ec, i32* %r2.global-to-local, align 4
  store i32 %v4_137ec, i32* %r3.global-to-local, align 4
  %v2_137f4 = icmp eq i32 %v4_137ec, 0
  store i1 %v2_137f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_137f4, label %dec_label_pc_1380c, label %dec_label_pc_137fc

dec_label_pc_137fc:                               ; preds = %dec_label_pc_137e8
  call void @__pseudo_branch(i32 %v4_137ec)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13808 = load i32, i32* @r0, align 4
  %v2_13808 = inttoptr i32 %v1_13808 to i32*
  store i32 0, i32* %v2_13808, align 4
  %v0_13810.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1380c

dec_label_pc_1380c:                               ; preds = %dec_label_pc_137e8, %dec_label_pc_137fc
  %v0_13810 = phi i32 [ %v0_137ec, %dec_label_pc_137e8 ], [ %v0_13810.pre, %dec_label_pc_137fc ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_13810 = add i32 %v0_13810, 28
  %v3_13810 = inttoptr i32 %v2_13810 to i32*
  %v4_13810 = load i32, i32* %v3_13810, align 4
  store i32 %v4_13810, i32* %r3.global-to-local, align 4
  %v1_13818 = inttoptr i32 %v4_13810 to i32*
  %v2_13818 = load i32, i32* %v1_13818, align 4
  store i32 %v2_13818, i32* %r2.global-to-local, align 4
  %v0_1381c = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_13828 = call i32 @function_12b90(i32 %v0_1381c)
  %v0_1382c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1382c, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_1380c
  %v2_1382c = load i32, i32* %r4.global-to-local, align 4
  %v8_13830 = shl i32 %v2_1382c, %v1_13828
  %v9_13830 = and i32 %v8_13830, %v1_13828
  %v2_13834 = load i32, i32* %ip.global-to-local, align 4
  %v8_13834 = shl i32 %v2_13834, %v9_13830
  %v9_13834 = and i32 %v8_13834, %v9_13830
  %v2_13838 = trunc i32 %v9_13834 to i16
  %v4_13838 = inttoptr i32 %v9_13834 to i16*
  store i16 %v2_13838, i16* %v4_13838, align 2
  store i32 0, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1380c, %bb64
  %v10_1384c = phi i32 [ %v1_13828, %dec_label_pc_1380c ], [ 0, %bb64 ]
  ret i32 %v10_1384c

; uselistorder directives
  uselistorder i32 %v9_13834, { 1, 0 }
  uselistorder i32 %v1_13828, { 1, 0, 2 }
  uselistorder i32 %v0_137c8.pre, { 1, 0 }
  uselistorder i32 %v1_137bc, { 1, 0 }
  uselistorder i32 %v1_137b8, { 3, 2, 1, 0 }
  uselistorder i32 %v4_13730, { 1, 0, 2 }
  uselistorder i1 %v8_13678, { 1, 2, 0 }
  uselistorder i32 %v2_13648, { 1, 2, 0 }
  uselistorder i1 %v2_13630, { 1, 0 }
  uselistorder i32 %v4_13614, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_135e0, { 1, 0 }
  uselistorder i32 %v3_135b0, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 1, 12, 13, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 1, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 0, 18 }
  uselistorder i32 (i32)* @function_12b90, { 0, 5, 6, 4, 3, 2, 1 }
  uselistorder i32 47, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @function_134d8, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_1380c, { 1, 0 }
  uselistorder label %dec_label_pc_137e8, { 1, 0 }
  uselistorder label %dec_label_pc_137ac.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_136d4, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_13648, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_13630, { 1, 0 }
}

define i32 @function_1386c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1386c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1386c = load i32, i32* @r4, align 4
  store i32 %v3_1386c, i32* %stack_var_-16, align 4
  %v3_13878 = urem i32 %arg3, 4096
  %v2_1387c = icmp eq i32 %v3_13878, 0
  br i1 %v2_1387c, label %dec_label_pc_13898, label %dec_label_pc_13884

dec_label_pc_13884:                               ; preds = %dec_label_pc_1386c
  %v0_13884 = call i32 @function_10f8c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13890 = inttoptr i32 %v0_13884 to i32*
  store i32 22, i32* %v2_13890, align 4
  %v0_138c8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_138c8

dec_label_pc_13898:                               ; preds = %dec_label_pc_1386c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_138c4, label %dec_label_pc_138b4

dec_label_pc_138b4:                               ; preds = %dec_label_pc_13898
  %v0_138b4 = call i32 @function_10f8c()
  %v0_138b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_138b8 = sub i32 0, %v0_138b8
  %v2_138bc = inttoptr i32 %v0_138b4 to i32*
  store i32 %v1_138b8, i32* %v2_138bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138c4

dec_label_pc_138c4:                               ; preds = %dec_label_pc_13898, %dec_label_pc_138b4
  %v0_138c4 = phi i32 [ %arg1, %dec_label_pc_13898 ], [ -1, %dec_label_pc_138b4 ]
  store i32 %v0_138c4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_138c8

dec_label_pc_138c8:                               ; preds = %dec_label_pc_13884, %dec_label_pc_138c4
  %v0_138c8 = phi i32 [ %v0_138c8.pre, %dec_label_pc_13884 ], [ %v0_138c4, %dec_label_pc_138c4 ]
  %v2_138cc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_138cc, i32* @r4, align 4
  ret i32 %v0_138c8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138c8, { 1, 0 }
  uselistorder label %dec_label_pc_138c4, { 1, 0 }
}

define i32 @function_138d4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_138d4:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_138d4 = load i32, i32* @r4, align 4
  %v6_138d4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_138dc = icmp eq i32 %arg2, 0
  store i32 124088, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_138dc, label %dec_label_pc_13930, label %dec_label_pc_138f4

dec_label_pc_138f4:                               ; preds = %dec_label_pc_138d4
  %v1_138f4 = add i32 %arg2, 4
  %v2_138f4 = inttoptr i32 %v1_138f4 to i32*
  %v3_138f4 = load i32, i32* %v2_138f4, align 4
  store i32 %v3_138f4, i32* @r3, align 4
  %v1_138f8 = and i32 %v3_138f4, 67108864
  %v2_138f8 = icmp eq i32 %v1_138f8, 0
  br i1 %v2_138f8, label %dec_label_pc_13900, label %dec_label_pc_13930

dec_label_pc_13900:                               ; preds = %dec_label_pc_138f4
  store i32 20, i32* @r2, align 4
  %v2_13904 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13904, i32* @r0, align 4
  %v0_13908 = call i32 @function_11090()
  store i32 %v2_13904, i32* @ip, align 4
  %v0_13930.pre = load i32, i32* @r5, align 4
  %v0_13938.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13930

dec_label_pc_13930:                               ; preds = %dec_label_pc_138f4, %dec_label_pc_138d4, %dec_label_pc_13900
  %v0_13938 = phi i32 [ %arg3, %dec_label_pc_138f4 ], [ %arg3, %dec_label_pc_138d4 ], [ %v0_13938.pre, %dec_label_pc_13900 ]
  %v0_13934 = phi i32 [ %arg2, %dec_label_pc_138f4 ], [ 0, %dec_label_pc_138d4 ], [ %v2_13904, %dec_label_pc_13900 ]
  %v0_13930 = phi i32 [ %arg1, %dec_label_pc_138f4 ], [ %arg1, %dec_label_pc_138d4 ], [ %v0_13930.pre, %dec_label_pc_13900 ]
  %v4_13940 = call i32 @function_13e90(i32 %v0_13930, i32 %v0_13934, i32 %v0_13938, i32 8)
  store i32 %v3_138d4, i32* @r4, align 4
  store i32 %v6_138d4, i32* @r5, align 4
  ret i32 %v4_13940

; uselistorder directives
  uselistorder label %dec_label_pc_13930, { 2, 0, 1 }
}

define i32 @function_13954(i32 %arg1) local_unnamed_addr {
dec_label_pc_13954:
  %v0_13954 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13954, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13954
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13954, %bb
  %v0_13968 = phi i32 [ %arg1, %dec_label_pc_13954 ], [ 0, %bb ]
  ret i32 %v0_13968

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13974() local_unnamed_addr {
dec_label_pc_13974:
  %v4_13980 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_ab34.49 to i32), i32 80352) to i32*), align 4
  %v1_13984 = inttoptr i32 %v4_13980 to i32*
  %v2_13984 = load i32, i32* %v1_13984, align 4
  %v2_13988 = icmp eq i32 %v2_13984, 0
  br i1 %v2_13988, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13974
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13974, %bb
  %v1_13990 = phi i32 [ %v2_13984, %dec_label_pc_13974 ], [ 4096, %bb ]
  ret i32 %v1_13990

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1399c() local_unnamed_addr {
dec_label_pc_1399c:
  %v1_139ac = load i32, i32* @r0, align 4
  ret i32 %v1_139ac
}

define i32 @function_139b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_139b0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_139b0 = load i32, i32* @r7, align 4
  store i32 %v3_139b0, i32* %stack_var_-8, align 4
  %v0_139bc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_139bc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_139bc, -4095
  br i1 %tmp, label %dec_label_pc_139dc, label %dec_label_pc_139cc

dec_label_pc_139cc:                               ; preds = %dec_label_pc_139b0
  %v0_139cc = call i32 @function_10f8c()
  %v0_139d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_139d0 = sub i32 0, %v0_139d0
  %v2_139d4 = inttoptr i32 %v0_139cc to i32*
  store i32 %v1_139d0, i32* %v2_139d4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_139dc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_139dc

dec_label_pc_139dc:                               ; preds = %dec_label_pc_139b0, %dec_label_pc_139cc
  %v1_139e0 = phi i32 [ %v0_139bc, %dec_label_pc_139b0 ], [ -1, %dec_label_pc_139cc ]
  %v2_139dc = phi i32 [ %v3_139b0, %dec_label_pc_139b0 ], [ %v2_139dc.pre, %dec_label_pc_139cc ]
  store i32 %v2_139dc, i32* %r7.global-to-local, align 4
  ret i32 %v1_139e0

; uselistorder directives
  uselistorder i32 %v0_139bc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_139dc, { 1, 0 }
}

define i32 @function_139e4() local_unnamed_addr {
dec_label_pc_139e4:
  %v1_139f4 = load i32, i32* @r0, align 4
  ret i32 %v1_139f4
}

define i32 @function_139f8() local_unnamed_addr {
dec_label_pc_139f8:
  %v1_13a08 = load i32, i32* @r0, align 4
  ret i32 %v1_13a08
}

define i32 @function_13a0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13a0c:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_13a0c = load i32, i32* @r5, align 4
  %v18_13a0c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13a3c, label %dec_label_pc_13a28

dec_label_pc_13a28:                               ; preds = %dec_label_pc_13a0c
  %v0_13a28 = call i32 @function_10f8c()
  %v0_13a2c = load i32, i32* @r5, align 4
  %v1_13a2c = sub i32 0, %v0_13a2c
  store i32 %v1_13a2c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_13a34 = inttoptr i32 %v0_13a28 to i32*
  store i32 %v1_13a2c, i32* %v2_13a34, align 4
  br label %dec_label_pc_13a90

dec_label_pc_13a3c:                               ; preds = %dec_label_pc_13a0c
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13a3c
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_13a44 = add i32 %arg2, %arg1
  store i32 %v3_13a44, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13a3c, %bb
  %v1_13a804 = phi i32 [ %v18_13a0c, %dec_label_pc_13a3c ], [ %v3_13a44, %bb ]
  %v0_13a7c2 = phi i32 [ 141, %dec_label_pc_13a3c ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_13a90, label %dec_label_pc_13a7c

dec_label_pc_13a50:                               ; preds = %dec_label_pc_13a7c
  %v1_13a50 = add i32 %v0_13a50, 8
  %v2_13a50 = inttoptr i32 %v1_13a50 to i16*
  %v3_13a50 = load i16, i16* %v2_13a50, align 2
  %v4_13a50 = zext i16 %v3_13a50 to i32
  %v2_13a54 = add i32 %v4_13a50, %v0_13a50
  store i32 %v2_13a54, i32* %r3.global-to-local, align 4
  %v1_13a58 = add i32 %v2_13a54, -1
  %v2_13a58 = inttoptr i32 %v1_13a58 to i8*
  %v3_13a58 = load i8, i8* %v2_13a58, align 1
  %v4_13a58 = zext i8 %v3_13a58 to i32
  store i32 %v4_13a58, i32* @r4, align 4
  %v1_13a5c = call i32 @function_15590(i32 %v1_13a7c)
  %v0_13a60 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13a60, i32* @r1, align 4
  %v1_13a64 = add i32 %v1_13a5c, 1
  store i32 %v1_13a64, i32* @r2, align 4
  %v0_13a68 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13a68, i32* @r0, align 4
  %v3_13a6c = call i32 @function_11080(i32 %v0_13a68, i32 %v0_13a60, i32 %v1_13a64)
  %v0_13a70 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a70 = add i32 %v0_13a70, 8
  %v2_13a70 = inttoptr i32 %v1_13a70 to i16*
  %v3_13a70 = load i16, i16* %v2_13a70, align 2
  %v4_13a70 = zext i16 %v3_13a70 to i32
  store i32 %v4_13a70, i32* %r3.global-to-local, align 4
  %v0_13a74 = load i32, i32* @r4, align 4
  %v1_13a74 = trunc i32 %v0_13a74 to i8
  %v3_13a74 = add i32 %v0_13a70, 10
  %v4_13a74 = inttoptr i32 %v3_13a74 to i8*
  store i8 %v1_13a74, i8* %v4_13a74, align 1
  %v0_13a78 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a78 = load i32, i32* %r3.global-to-local, align 4
  %v2_13a78 = add i32 %v1_13a78, %v0_13a78
  store i32 %v2_13a78, i32* %r7.global-to-local, align 4
  %v1_13a80.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_13a7c

dec_label_pc_13a7c:                               ; preds = %.thread, %dec_label_pc_13a50
  %v1_13a80 = phi i32 [ %v1_13a80.pre, %dec_label_pc_13a50 ], [ %v1_13a804, %.thread ]
  %v0_13a50 = phi i32 [ %v2_13a78, %dec_label_pc_13a50 ], [ %v0_13a7c2, %.thread ]
  %v1_13a7c = add i32 %v0_13a50, 10
  store i32 %v1_13a7c, i32* %r6.global-to-local, align 4
  %v3_13a80 = icmp ult i32 %v0_13a50, %v1_13a80
  %v1_13a88 = add i32 %v0_13a50, 11
  store i32 %v1_13a88, i32* %r8.global-to-local, align 4
  br i1 %v3_13a80, label %dec_label_pc_13a50, label %dec_label_pc_13a90

dec_label_pc_13a90:                               ; preds = %dec_label_pc_13a7c, %.thread, %dec_label_pc_13a28
  %v0_13a90 = load i32, i32* @r5, align 4
  store i32 %v6_13a0c, i32* @r5, align 4
  store i32 %v18_13a0c, i32* @sl, align 4
  ret i32 %v0_13a90

; uselistorder directives
  uselistorder i32 %v1_13a7c, { 1, 0 }
  uselistorder i32 %v0_13a50, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_13a0c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13a7c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13aa0() local_unnamed_addr {
dec_label_pc_13aa0:
  %r7.global-to-local = alloca i32, align 4
  %v0_13aa8 = load i32, i32* @r1, align 4
  store i32 %v0_13aa8, i32* @r3, align 4
  %v0_13ab8 = load i32, i32* @r0, align 4
  store i32 %v0_13ab8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13ab8, -4095
  br i1 %tmp, label %dec_label_pc_13ad8, label %dec_label_pc_13ac4

dec_label_pc_13ac4:                               ; preds = %dec_label_pc_13aa0
  %v0_13ac4 = call i32 @function_10f8c()
  %v0_13ac8 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ac8 = sub i32 0, %v0_13ac8
  store i32 %v1_13ac8, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13ad0 = inttoptr i32 %v0_13ac4 to i32*
  store i32 %v1_13ac8, i32* %v2_13ad0, align 4
  br label %dec_label_pc_13ae8

dec_label_pc_13ad8:                               ; preds = %dec_label_pc_13aa0
  %v2_13ad8 = icmp eq i32 %v0_13ab8, 0
  br i1 %v2_13ad8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13ad8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13ad8, %bb
  call void @__pseudo_cond_branch(i1 %v2_13ad8, i32 ptrtoint (i32* @global_var_13cf0.477 to i32))
  br label %dec_label_pc_13ae8

dec_label_pc_13ae8:                               ; preds = %dec_label_pc_13ac4, %.thread
  %v0_13ae8 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_13ae8

; uselistorder directives
  uselistorder i32 %v0_13ab8, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13ae8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13af8(i32 %arg1) local_unnamed_addr {
dec_label_pc_13af8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13af8 = load i32, i32* @r4, align 4
  store i32 %v3_13af8, i32* %stack_var_-16, align 4
  store i32 124088, i32* %r4.global-to-local, align 4
  %v4_13b08 = load i32, i32* @global_var_2077c.480, align 4
  %v2_13b0c = icmp eq i32 %v4_13b08, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13b0c, label %dec_label_pc_13b18, label %dec_label_pc_13b28

dec_label_pc_13b18:                               ; preds = %dec_label_pc_13af8
  %v1_13b1c = call i32 @function_15a9c(i32 0)
  %v1_13b20 = icmp slt i32 %v1_13b1c, 0
  br i1 %v1_13b20, label %dec_label_pc_13b4c, label %dec_label_pc_13b28thread-pre-split

dec_label_pc_13b28thread-pre-split:               ; preds = %dec_label_pc_13b18
  %v0_13b2c.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_13b28.pre = load i32, i32* @global_var_2077c.480, align 4
  br label %dec_label_pc_13b28

dec_label_pc_13b28:                               ; preds = %dec_label_pc_13b28thread-pre-split, %dec_label_pc_13af8
  %v0_13b38 = phi i32 [ %v4_13b28.pre, %dec_label_pc_13b28thread-pre-split ], [ %v4_13b08, %dec_label_pc_13af8 ]
  %v1_13b3c = phi i32 [ %v0_13b2c.pr, %dec_label_pc_13b28thread-pre-split ], [ %arg1, %dec_label_pc_13af8 ]
  %v2_13b2c = icmp eq i32 %v1_13b3c, 0
  store i32 %v0_13b38, i32* %r4.global-to-local, align 4
  br i1 %v2_13b2c, label %dec_label_pc_13b50, label %dec_label_pc_13b38

dec_label_pc_13b38:                               ; preds = %dec_label_pc_13b28
  %v2_13b3c = add i32 %v1_13b3c, %v0_13b38
  %v1_13b40 = call i32 @function_15a9c(i32 %v2_13b3c)
  %v1_13b44 = icmp slt i32 %v1_13b40, 0
  br i1 %v1_13b44, label %dec_label_pc_13b4c, label %dec_label_pc_13b38.dec_label_pc_13b50_crit_edge

dec_label_pc_13b38.dec_label_pc_13b50_crit_edge:  ; preds = %dec_label_pc_13b38
  %v0_13b50.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13b50

dec_label_pc_13b4c:                               ; preds = %dec_label_pc_13b38, %dec_label_pc_13b18
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13b50

dec_label_pc_13b50:                               ; preds = %dec_label_pc_13b28, %dec_label_pc_13b38.dec_label_pc_13b50_crit_edge, %dec_label_pc_13b4c
  %v0_13b50 = phi i32 [ %v0_13b50.pre, %dec_label_pc_13b38.dec_label_pc_13b50_crit_edge ], [ -1, %dec_label_pc_13b4c ], [ %v0_13b38, %dec_label_pc_13b28 ]
  %v2_13b54 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13b54, i32* @r4, align 4
  ret i32 %v0_13b50

; uselistorder directives
  uselistorder i32 %v0_13b38, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15a9c, { 1, 0 }
  uselistorder label %dec_label_pc_13b50, { 2, 1, 0 }
}

define i32 @function_13b64(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b64:
  %v1_13b74 = load i32, i32* @r0, align 4
  ret i32 %v1_13b74
}

define i32 @function_13b78(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13b78:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13b78 = load i32, i32* @r4, align 4
  store i32 %v3_13b78, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_13b90 = inttoptr i32 %arg2 to i8*
  %v3_13b90 = call i32 @function_10fe0(i8* %v2_13b90, i32 0)
  %v2_13b94 = load i32, i32* %arg1, align 4
  store i32 %v2_13b94, i32* %r3.global-to-local, align 4
  %v3_13b94 = add i32 %tmp, 4
  %v4_13b94 = inttoptr i32 %v3_13b94 to i32*
  %v5_13b94 = load i32, i32* %v4_13b94, align 4
  store i32 %v5_13b94, i32* %r4.global-to-local, align 4
  %v0_13b98 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b98 = inttoptr i32 %v0_13b98 to i32*
  store i32 %v2_13b94, i32* %v1_13b98, align 4
  %v3_13b98 = add i32 %v0_13b98, 4
  %v4_13b98 = inttoptr i32 %v3_13b98 to i32*
  %v5_13b98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13b98, i32* %v4_13b98, align 4
  %v0_13b9c = load i32, i32* %r6.global-to-local, align 4
  %v1_13b9c = add i32 %v0_13b9c, 12
  %v2_13b9c = inttoptr i32 %v1_13b9c to i32*
  %v3_13b9c = load i32, i32* %v2_13b9c, align 4
  %v1_13ba0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ba0 = add i32 %v1_13ba0, 12
  %v3_13ba0 = inttoptr i32 %v2_13ba0 to i32*
  store i32 %v3_13b9c, i32* %v3_13ba0, align 4
  %v0_13ba4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ba4 = add i32 %v0_13ba4, 96
  store i32 %v1_13ba4, i32* %r3.global-to-local, align 4
  %v1_13ba8 = inttoptr i32 %v1_13ba4 to i32*
  %v2_13ba8 = load i32, i32* %v1_13ba8, align 4
  store i32 %v2_13ba8, i32* %r3.global-to-local, align 4
  %v3_13ba8 = add i32 %v0_13ba4, 100
  %v4_13ba8 = inttoptr i32 %v3_13ba8 to i32*
  %v5_13ba8 = load i32, i32* %v4_13ba8, align 4
  store i32 %v5_13ba8, i32* %r4.global-to-local, align 4
  %v1_13bac = add i32 %v0_13ba4, 56
  %v2_13bac = inttoptr i32 %v1_13bac to i32*
  %v3_13bac = load i32, i32* %v2_13bac, align 4
  store i32 %v3_13bac, i32* %r2.global-to-local, align 4
  %v1_13bb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bb0 = add i32 %v1_13bb0, 96
  %v3_13bb0 = inttoptr i32 %v2_13bb0 to i32*
  store i32 %v2_13ba8, i32* %v3_13bb0, align 4
  %v0_13bb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13bb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bb4 = add i32 %v1_13bb4, 100
  %v3_13bb4 = inttoptr i32 %v2_13bb4 to i32*
  store i32 %v0_13bb4, i32* %v3_13bb4, align 4
  %v0_13bb8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13bb8 = add i32 %v0_13bb8, 24
  store i32 %v1_13bb8, i32* %ip.global-to-local, align 4
  %v1_13bbc = inttoptr i32 %v1_13bb8 to i32*
  %v2_13bbc = load i32, i32* %v1_13bbc, align 4
  store i32 %v2_13bbc, i32* %ip.global-to-local, align 4
  %v3_13bbc = add i32 %v0_13bb8, 28
  %v4_13bbc = inttoptr i32 %v3_13bbc to i32*
  %v5_13bbc = load i32, i32* %v4_13bbc, align 4
  store i32 %v5_13bbc, i32* %lr.global-to-local, align 4
  %v0_13bc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_13bc0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13bc0 = add i32 %v1_13bc0, 56
  %v3_13bc0 = inttoptr i32 %v2_13bc0 to i32*
  store i32 %v0_13bc0, i32* %v3_13bc0, align 4
  %v0_13bc4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13bc4 = add i32 %v0_13bc4, 72
  store i32 %v1_13bc4, i32* %r3.global-to-local, align 4
  %v1_13bc8 = add i32 %v0_13bc4, 32
  store i32 %v1_13bc8, i32* %r7.global-to-local, align 4
  %v1_13bcc = inttoptr i32 %v1_13bc8 to i32*
  %v2_13bcc = load i32, i32* %v1_13bcc, align 4
  store i32 %v2_13bcc, i32* %r7.global-to-local, align 4
  %v3_13bcc = add i32 %v0_13bc4, 36
  %v4_13bcc = inttoptr i32 %v3_13bcc to i32*
  %v5_13bcc = load i32, i32* %v4_13bcc, align 4
  store i32 %v5_13bcc, i32* %r8.global-to-local, align 4
  %v1_13bd0 = inttoptr i32 %v1_13bc4 to i32*
  %v2_13bd0 = load i32, i32* %v1_13bd0, align 4
  %v3_13bd0 = add i32 %v0_13bc4, 76
  %v4_13bd0 = inttoptr i32 %v3_13bd0 to i32*
  %v5_13bd0 = load i32, i32* %v4_13bd0, align 4
  store i32 %v5_13bd0, i32* %r1.global-to-local, align 4
  %v0_13bd4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13bd4 = add i32 %v0_13bd4, 72
  %v1_13bd8 = inttoptr i32 %v1_13bd4 to i32*
  store i32 %v2_13bd0, i32* %v1_13bd8, align 4
  %v3_13bd8 = add i32 %v0_13bd4, 76
  %v4_13bd8 = inttoptr i32 %v3_13bd8 to i32*
  %v5_13bd8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13bd8, i32* %v4_13bd8, align 4
  %v0_13bdc = load i32, i32* %r7.global-to-local, align 4
  %v1_13bdc = load i32, i32* %r5.global-to-local, align 4
  %v2_13bdc = add i32 %v1_13bdc, 32
  %v3_13bdc = inttoptr i32 %v2_13bdc to i32*
  store i32 %v0_13bdc, i32* %v3_13bdc, align 4
  %v0_13be0 = load i32, i32* %r8.global-to-local, align 4
  %v1_13be0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13be0 = add i32 %v1_13be0, 36
  %v3_13be0 = inttoptr i32 %v2_13be0 to i32*
  store i32 %v0_13be0, i32* %v3_13be0, align 4
  %v0_13be4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13be4 = add i32 %v0_13be4, 80
  store i32 %v1_13be4, i32* %r3.global-to-local, align 4
  %v1_13be8 = add i32 %v0_13be4, 48
  store i32 %v1_13be8, i32* %r7.global-to-local, align 4
  %v1_13bec = inttoptr i32 %v1_13be8 to i32*
  %v2_13bec = load i32, i32* %v1_13bec, align 4
  store i32 %v2_13bec, i32* %r7.global-to-local, align 4
  %v3_13bec = add i32 %v0_13be4, 52
  %v4_13bec = inttoptr i32 %v3_13bec to i32*
  %v5_13bec = load i32, i32* %v4_13bec, align 4
  store i32 %v5_13bec, i32* %r8.global-to-local, align 4
  %v1_13bf0 = inttoptr i32 %v1_13be4 to i32*
  %v2_13bf0 = load i32, i32* %v1_13bf0, align 4
  %v3_13bf0 = add i32 %v0_13be4, 84
  %v4_13bf0 = inttoptr i32 %v3_13bf0 to i32*
  %v5_13bf0 = load i32, i32* %v4_13bf0, align 4
  store i32 %v5_13bf0, i32* %r1.global-to-local, align 4
  %v1_13bf4 = add i32 %v0_13be4, 16
  %v2_13bf4 = inttoptr i32 %v1_13bf4 to i32*
  %v3_13bf4 = load i32, i32* %v2_13bf4, align 4
  store i32 %v3_13bf4, i32* %r2.global-to-local, align 4
  %v0_13bf8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13bf8 = add i32 %v0_13bf8, 80
  %v1_13bfc = inttoptr i32 %v1_13bf8 to i32*
  store i32 %v2_13bf0, i32* %v1_13bfc, align 4
  %v3_13bfc = add i32 %v0_13bf8, 84
  %v4_13bfc = inttoptr i32 %v3_13bfc to i32*
  %v5_13bfc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13bfc, i32* %v4_13bfc, align 4
  %v0_13c00 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c00 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c00 = add i32 %v1_13c00, 48
  %v3_13c00 = inttoptr i32 %v2_13c00 to i32*
  store i32 %v0_13c00, i32* %v3_13c00, align 4
  %v0_13c04 = load i32, i32* %r8.global-to-local, align 4
  %v1_13c04 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c04 = add i32 %v1_13c04, 52
  %v3_13c04 = inttoptr i32 %v2_13c04 to i32*
  store i32 %v0_13c04, i32* %v3_13c04, align 4
  %v0_13c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c08 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c08 = add i32 %v1_13c08, 16
  %v3_13c08 = inttoptr i32 %v2_13c08 to i32*
  store i32 %v0_13c08, i32* %v3_13c08, align 4
  %v0_13c0c = load i32, i32* %r6.global-to-local, align 4
  %v1_13c0c = add i32 %v0_13c0c, 88
  store i32 %v1_13c0c, i32* %r3.global-to-local, align 4
  %v1_13c10 = add i32 %v0_13c0c, 20
  %v2_13c10 = inttoptr i32 %v1_13c10 to i32*
  %v3_13c10 = load i32, i32* %v2_13c10, align 4
  store i32 %v3_13c10, i32* %r2.global-to-local, align 4
  %v1_13c14 = inttoptr i32 %v1_13c0c to i32*
  %v2_13c14 = load i32, i32* %v1_13c14, align 4
  %v3_13c14 = add i32 %v0_13c0c, 92
  %v4_13c14 = inttoptr i32 %v3_13c14 to i32*
  %v5_13c14 = load i32, i32* %v4_13c14, align 4
  store i32 %v5_13c14, i32* %r1.global-to-local, align 4
  %v1_13c18 = add i32 %v0_13c0c, 64
  store i32 %v1_13c18, i32* %r6.global-to-local, align 4
  %v1_13c1c = inttoptr i32 %v1_13c18 to i32*
  %v2_13c1c = load i32, i32* %v1_13c1c, align 4
  store i32 %v2_13c1c, i32* %r6.global-to-local, align 4
  %v3_13c1c = add i32 %v0_13c0c, 68
  %v4_13c1c = inttoptr i32 %v3_13c1c to i32*
  %v5_13c1c = load i32, i32* %v4_13c1c, align 4
  store i32 %v5_13c1c, i32* %r7.global-to-local, align 4
  %v0_13c20 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c20 = add i32 %v0_13c20, 88
  store i32 %v1_13c20, i32* %r3.global-to-local, align 4
  %v2_13c24 = add i32 %v0_13c20, 20
  %v3_13c24 = inttoptr i32 %v2_13c24 to i32*
  store i32 %v3_13c10, i32* %v3_13c24, align 4
  %v0_13c28 = load i32, i32* %ip.global-to-local, align 4
  %v1_13c28 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c28 = add i32 %v1_13c28, 24
  %v3_13c28 = inttoptr i32 %v2_13c28 to i32*
  store i32 %v0_13c28, i32* %v3_13c28, align 4
  %v0_13c2c = load i32, i32* %lr.global-to-local, align 4
  %v1_13c2c = load i32, i32* %r5.global-to-local, align 4
  %v2_13c2c = add i32 %v1_13c2c, 28
  %v3_13c2c = inttoptr i32 %v2_13c2c to i32*
  store i32 %v0_13c2c, i32* %v3_13c2c, align 4
  %v0_13c30 = load i32, i32* %r6.global-to-local, align 4
  %v1_13c30 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c30 = add i32 %v1_13c30, 64
  %v3_13c30 = inttoptr i32 %v2_13c30 to i32*
  store i32 %v0_13c30, i32* %v3_13c30, align 4
  %v0_13c34 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c34 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c34 = add i32 %v1_13c34, 68
  %v3_13c34 = inttoptr i32 %v2_13c34 to i32*
  store i32 %v0_13c34, i32* %v3_13c34, align 4
  %v0_13c38 = load i32, i32* %r3.global-to-local, align 4
  %v1_13c38 = inttoptr i32 %v0_13c38 to i32*
  store i32 %v2_13c14, i32* %v1_13c38, align 4
  %v3_13c38 = add i32 %v0_13c38, 4
  %v4_13c38 = inttoptr i32 %v3_13c38 to i32*
  %v5_13c38 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13c38, i32* %v4_13c38, align 4
  %v2_13c3c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13c3c, i32* %r4.global-to-local, align 4
  ret i32 %v2_13c14

; uselistorder directives
  uselistorder i32 %v0_13c0c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_13be4, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13c44(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c44:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_13c44 = load i32, i32* @r4, align 4
  store i32 %v3_13c44, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13c5c = inttoptr i32 %arg2 to i8*
  %v3_13c5c = call i32 @function_10fe0(i8* %v2_13c5c, i32 0)
  %v2_13c60 = load i32, i32* %arg1, align 4
  %v3_13c60 = add i32 %tmp, 4
  %v4_13c60 = inttoptr i32 %v3_13c60 to i32*
  %v5_13c60 = load i32, i32* %v4_13c60, align 4
  store i32 %v5_13c60, i32* %r4.global-to-local, align 4
  %v0_13c64 = load i32, i32* %r6.global-to-local, align 4
  %v1_13c64 = inttoptr i32 %v0_13c64 to i32*
  store i32 %v2_13c60, i32* %v1_13c64, align 4
  %v3_13c64 = add i32 %v0_13c64, 4
  %v4_13c64 = inttoptr i32 %v3_13c64 to i32*
  %v5_13c64 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13c64, i32* %v4_13c64, align 4
  %v0_13c68 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c68 = add i32 %v0_13c68, 32
  %v1_13c6c = inttoptr i32 %v1_13c68 to i32*
  %v2_13c6c = load i32, i32* %v1_13c6c, align 4
  %v3_13c6c = add i32 %v0_13c68, 36
  %v4_13c6c = inttoptr i32 %v3_13c6c to i32*
  %v5_13c6c = load i32, i32* %v4_13c6c, align 4
  store i32 %v5_13c6c, i32* %r4.global-to-local, align 4
  %v1_13c70 = add i32 %v0_13c68, 96
  %v2_13c70 = inttoptr i32 %v1_13c70 to i32*
  %v3_13c70 = load i32, i32* %v2_13c70, align 4
  store i32 %v3_13c70, i32* %r2.global-to-local, align 4
  %v1_13c74 = load i32, i32* %r6.global-to-local, align 4
  %v2_13c74 = add i32 %v1_13c74, 32
  %v3_13c74 = inttoptr i32 %v2_13c74 to i32*
  store i32 %v2_13c6c, i32* %v3_13c74, align 4
  %v0_13c78 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c78 = load i32, i32* %r6.global-to-local, align 4
  %v2_13c78 = add i32 %v1_13c78, 36
  %v3_13c78 = inttoptr i32 %v2_13c78 to i32*
  store i32 %v0_13c78, i32* %v3_13c78, align 4
  %v0_13c7c = load i32, i32* %r2.global-to-local, align 4
  %v1_13c7c = load i32, i32* %r6.global-to-local, align 4
  %v2_13c7c = add i32 %v1_13c7c, 12
  %v3_13c7c = inttoptr i32 %v2_13c7c to i32*
  store i32 %v0_13c7c, i32* %v3_13c7c, align 4
  %v0_13c80 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c80 = add i32 %v0_13c80, 48
  %v2_13c80 = inttoptr i32 %v1_13c80 to i32*
  %v3_13c80 = load i32, i32* %v2_13c80, align 4
  %v1_13c84 = add i32 %v0_13c80, 24
  store i32 %v1_13c84, i32* %ip.global-to-local, align 4
  %v1_13c88 = inttoptr i32 %v1_13c84 to i32*
  %v2_13c88 = load i32, i32* %v1_13c88, align 4
  store i32 %v2_13c88, i32* %ip.global-to-local, align 4
  %v3_13c88 = add i32 %v0_13c80, 28
  %v4_13c88 = inttoptr i32 %v3_13c88 to i32*
  %v5_13c88 = load i32, i32* %v4_13c88, align 4
  store i32 %v5_13c88, i32* %lr.global-to-local, align 4
  %v1_13c8c = load i32, i32* %r6.global-to-local, align 4
  %v2_13c8c = add i32 %v1_13c8c, 44
  %v3_13c8c = inttoptr i32 %v2_13c8c to i32*
  store i32 %v3_13c80, i32* %v3_13c8c, align 4
  %v0_13c90 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c90 = add i32 %v0_13c90, 64
  %v2_13c90 = inttoptr i32 %v1_13c90 to i32*
  %v3_13c90 = load i32, i32* %v2_13c90, align 4
  %v1_13c94 = add i32 %v0_13c90, 56
  %v2_13c94 = inttoptr i32 %v1_13c94 to i32*
  %v3_13c94 = load i32, i32* %v2_13c94, align 4
  store i32 %v3_13c94, i32* %r2.global-to-local, align 4
  %v1_13c98 = load i32, i32* %r6.global-to-local, align 4
  %v2_13c98 = add i32 %v1_13c98, 52
  %v3_13c98 = inttoptr i32 %v2_13c98 to i32*
  store i32 %v3_13c90, i32* %v3_13c98, align 4
  %v0_13c9c = load i32, i32* %r2.global-to-local, align 4
  %v1_13c9c = load i32, i32* %r6.global-to-local, align 4
  %v2_13c9c = add i32 %v1_13c9c, 48
  %v3_13c9c = inttoptr i32 %v2_13c9c to i32*
  store i32 %v0_13c9c, i32* %v3_13c9c, align 4
  %v0_13ca0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ca0 = add i32 %v0_13ca0, 72
  %v1_13ca4 = inttoptr i32 %v1_13ca0 to i32*
  %v2_13ca4 = load i32, i32* %v1_13ca4, align 4
  %v3_13ca4 = add i32 %v0_13ca0, 76
  %v4_13ca4 = inttoptr i32 %v3_13ca4 to i32*
  %v5_13ca4 = load i32, i32* %v4_13ca4, align 4
  store i32 %v5_13ca4, i32* %r1.global-to-local, align 4
  %v0_13ca8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ca8 = add i32 %v0_13ca8, 56
  %v1_13cac = inttoptr i32 %v1_13ca8 to i32*
  store i32 %v2_13ca4, i32* %v1_13cac, align 4
  %v3_13cac = add i32 %v0_13ca8, 60
  %v4_13cac = inttoptr i32 %v3_13cac to i32*
  %v5_13cac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13cac, i32* %v4_13cac, align 4
  %v0_13cb0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cb0 = add i32 %v0_13cb0, 80
  %v1_13cb4 = inttoptr i32 %v1_13cb0 to i32*
  %v2_13cb4 = load i32, i32* %v1_13cb4, align 4
  %v3_13cb4 = add i32 %v0_13cb0, 84
  %v4_13cb4 = inttoptr i32 %v3_13cb4 to i32*
  %v5_13cb4 = load i32, i32* %v4_13cb4, align 4
  store i32 %v5_13cb4, i32* %r1.global-to-local, align 4
  %v0_13cb8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13cb8 = add i32 %v0_13cb8, 64
  %v1_13cbc = inttoptr i32 %v1_13cb8 to i32*
  store i32 %v2_13cb4, i32* %v1_13cbc, align 4
  %v3_13cbc = add i32 %v0_13cb8, 68
  %v4_13cbc = inttoptr i32 %v3_13cbc to i32*
  %v5_13cbc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13cbc, i32* %v4_13cbc, align 4
  %v0_13cc0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cc0 = add i32 %v0_13cc0, 16
  %v2_13cc0 = inttoptr i32 %v1_13cc0 to i32*
  %v3_13cc0 = load i32, i32* %v2_13cc0, align 4
  %v1_13cc4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13cc4 = add i32 %v1_13cc4, 16
  %v3_13cc4 = inttoptr i32 %v2_13cc4 to i32*
  store i32 %v3_13cc0, i32* %v3_13cc4, align 4
  %v0_13cc8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cc8 = add i32 %v0_13cc8, 88
  %v1_13ccc = add i32 %v0_13cc8, 20
  %v2_13ccc = inttoptr i32 %v1_13ccc to i32*
  %v3_13ccc = load i32, i32* %v2_13ccc, align 4
  store i32 %v3_13ccc, i32* %r2.global-to-local, align 4
  %v1_13cd0 = inttoptr i32 %v1_13cc8 to i32*
  %v2_13cd0 = load i32, i32* %v1_13cd0, align 4
  %v3_13cd0 = add i32 %v0_13cc8, 92
  %v4_13cd0 = inttoptr i32 %v3_13cd0 to i32*
  %v5_13cd0 = load i32, i32* %v4_13cd0, align 4
  store i32 %v5_13cd0, i32* %r1.global-to-local, align 4
  %v0_13cd4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13cd4 = add i32 %v0_13cd4, 72
  %v1_13cd8 = inttoptr i32 %v1_13cd4 to i32*
  store i32 %v2_13cd0, i32* %v1_13cd8, align 4
  %v3_13cd8 = add i32 %v0_13cd4, 76
  %v4_13cd8 = inttoptr i32 %v3_13cd8 to i32*
  %v5_13cd8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13cd8, i32* %v4_13cd8, align 4
  %v0_13cdc = load i32, i32* %r2.global-to-local, align 4
  %v1_13cdc = load i32, i32* %r6.global-to-local, align 4
  %v2_13cdc = add i32 %v1_13cdc, 20
  %v3_13cdc = inttoptr i32 %v2_13cdc to i32*
  store i32 %v0_13cdc, i32* %v3_13cdc, align 4
  %v0_13ce0 = load i32, i32* %ip.global-to-local, align 4
  %v1_13ce0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ce0 = add i32 %v1_13ce0, 24
  %v3_13ce0 = inttoptr i32 %v2_13ce0 to i32*
  store i32 %v0_13ce0, i32* %v3_13ce0, align 4
  %v0_13ce4 = load i32, i32* %lr.global-to-local, align 4
  %v1_13ce4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ce4 = add i32 %v1_13ce4, 28
  %v3_13ce4 = inttoptr i32 %v2_13ce4 to i32*
  store i32 %v0_13ce4, i32* %v3_13ce4, align 4
  %v2_13ce8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13ce8, i32* %r4.global-to-local, align 4
  ret i32 %v2_13cd0

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13cf0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13cf0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13d0c = inttoptr i32 %arg2 to i8*
  %v3_13d0c = call i32 @function_10fe0(i8* %v2_13d0c, i32 0)
  %v1_13d10 = add i32 %tmp, 4
  %v2_13d10 = inttoptr i32 %v1_13d10 to i32*
  %v3_13d10 = load i32, i32* %v2_13d10, align 4
  %v2_13d14 = load i32, i32* %arg1, align 4
  store i32 %v2_13d14, i32* %r8.global-to-local, align 4
  %v1_13d18 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d18 = add i32 %v1_13d18, 12
  %v3_13d18 = inttoptr i32 %v2_13d18 to i32*
  store i32 %v3_13d10, i32* %v3_13d18, align 4
  %v0_13d1c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d1c = add i32 %v0_13d1c, 20
  %v2_13d1c = inttoptr i32 %v1_13d1c to i32*
  %v3_13d1c = load i32, i32* %v2_13d1c, align 4
  %v1_13d20 = add i32 %v0_13d1c, 16
  %v2_13d20 = inttoptr i32 %v1_13d20 to i32*
  %v3_13d20 = load i32, i32* %v2_13d20, align 4
  store i32 %v3_13d20, i32* %r6.global-to-local, align 4
  %v1_13d24 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d24 = add i32 %v1_13d24, 44
  %v3_13d24 = inttoptr i32 %v2_13d24 to i32*
  store i32 %v3_13d1c, i32* %v3_13d24, align 4
  %v0_13d28 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d28 = add i32 %v0_13d28, 24
  %v2_13d28 = inttoptr i32 %v1_13d28 to i32*
  %v3_13d28 = load i32, i32* %v2_13d28, align 4
  %v1_13d2c = load i32, i32* %r5.global-to-local, align 4
  %v2_13d2c = add i32 %v1_13d2c, 48
  %v3_13d2c = inttoptr i32 %v2_13d2c to i32*
  store i32 %v3_13d28, i32* %v3_13d2c, align 4
  %v0_13d30 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d30 = add i32 %v0_13d30, 28
  %v2_13d30 = inttoptr i32 %v1_13d30 to i32*
  %v3_13d30 = load i32, i32* %v2_13d30, align 4
  %v1_13d34 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d34 = add i32 %v1_13d34, 52
  %v3_13d34 = inttoptr i32 %v2_13d34 to i32*
  store i32 %v3_13d30, i32* %v3_13d34, align 4
  %v0_13d38 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d38 = add i32 %v0_13d38, 32
  %v1_13d3c = inttoptr i32 %v1_13d38 to i32*
  %v2_13d3c = load i32, i32* %v1_13d3c, align 4
  %v3_13d3c = add i32 %v0_13d38, 36
  %v4_13d3c = inttoptr i32 %v3_13d3c to i32*
  %v5_13d3c = load i32, i32* %v4_13d3c, align 4
  store i32 %v5_13d3c, i32* %r1.global-to-local, align 4
  %v0_13d40 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d40 = add i32 %v0_13d40, 56
  %v1_13d44 = inttoptr i32 %v1_13d40 to i32*
  store i32 %v2_13d3c, i32* %v1_13d44, align 4
  %v3_13d44 = add i32 %v0_13d40, 60
  %v4_13d44 = inttoptr i32 %v3_13d44 to i32*
  %v5_13d44 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13d44, i32* %v4_13d44, align 4
  %v0_13d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d48 = add i32 %v0_13d48, 40
  %v1_13d4c = inttoptr i32 %v1_13d48 to i32*
  %v2_13d4c = load i32, i32* %v1_13d4c, align 4
  %v3_13d4c = add i32 %v0_13d48, 44
  %v4_13d4c = inttoptr i32 %v3_13d4c to i32*
  %v5_13d4c = load i32, i32* %v4_13d4c, align 4
  store i32 %v5_13d4c, i32* %r1.global-to-local, align 4
  %v0_13d50 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d50 = add i32 %v0_13d50, 64
  %v1_13d54 = inttoptr i32 %v1_13d50 to i32*
  store i32 %v2_13d4c, i32* %v1_13d54, align 4
  %v3_13d54 = add i32 %v0_13d50, 68
  %v4_13d54 = inttoptr i32 %v3_13d54 to i32*
  %v5_13d54 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13d54, i32* %v4_13d54, align 4
  %v0_13d58 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d58 = add i32 %v0_13d58, 48
  %v1_13d5c = inttoptr i32 %v1_13d58 to i32*
  %v2_13d5c = load i32, i32* %v1_13d5c, align 4
  %v3_13d5c = add i32 %v0_13d58, 52
  %v4_13d5c = inttoptr i32 %v3_13d5c to i32*
  %v5_13d5c = load i32, i32* %v4_13d5c, align 4
  store i32 %v5_13d5c, i32* %r1.global-to-local, align 4
  %v1_13d60 = add i32 %v0_13d58, 8
  %v2_13d60 = inttoptr i32 %v1_13d60 to i16*
  %v3_13d60 = load i16, i16* %v2_13d60, align 2
  %v4_13d60 = zext i16 %v3_13d60 to i32
  store i32 %v4_13d60, i32* %r2.global-to-local, align 4
  %v1_13d64 = add i32 %v0_13d58, 10
  %v2_13d64 = inttoptr i32 %v1_13d64 to i16*
  %v3_13d64 = load i16, i16* %v2_13d64, align 2
  %v4_13d64 = zext i16 %v3_13d64 to i32
  store i32 %v4_13d64, i32* %ip.global-to-local, align 4
  %v1_13d68 = add i32 %v0_13d58, 12
  %v2_13d68 = inttoptr i32 %v1_13d68 to i16*
  %v3_13d68 = load i16, i16* %v2_13d68, align 2
  %v4_13d68 = zext i16 %v3_13d68 to i32
  store i32 %v4_13d68, i32* %lr.global-to-local, align 4
  %v1_13d6c = add i32 %v0_13d58, 14
  %v2_13d6c = inttoptr i32 %v1_13d6c to i16*
  %v3_13d6c = load i16, i16* %v2_13d6c, align 2
  %v4_13d6c = zext i16 %v3_13d6c to i32
  store i32 %v4_13d6c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_13d78 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d78 = add i32 %v0_13d78, 72
  %v1_13d7c = inttoptr i32 %v1_13d78 to i32*
  store i32 %v2_13d5c, i32* %v1_13d7c, align 4
  %v3_13d7c = add i32 %v0_13d78, 76
  %v4_13d7c = inttoptr i32 %v3_13d7c to i32*
  %v5_13d7c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13d7c, i32* %v4_13d7c, align 4
  %v0_13d80 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d80 = inttoptr i32 %v0_13d80 to i32*
  %v2_13d80 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_13d80, i32* %v1_13d80, align 4
  %v3_13d80 = add i32 %v0_13d80, 4
  %v4_13d80 = inttoptr i32 %v3_13d80 to i32*
  %v5_13d80 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_13d80, i32* %v4_13d80, align 4
  %v0_13d84 = load i32, i32* %r6.global-to-local, align 4
  %v1_13d84 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d84 = add i32 %v1_13d84, 32
  %v3_13d84 = inttoptr i32 %v2_13d84 to i32*
  store i32 %v0_13d84, i32* %v3_13d84, align 4
  %v0_13d88 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d88 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d88 = add i32 %v1_13d88, 36
  %v3_13d88 = inttoptr i32 %v2_13d88 to i32*
  store i32 %v0_13d88, i32* %v3_13d88, align 4
  %v0_13d8c = load i32, i32* %r2.global-to-local, align 4
  %v1_13d8c = load i32, i32* %r5.global-to-local, align 4
  %v2_13d8c = add i32 %v1_13d8c, 16
  %v3_13d8c = inttoptr i32 %v2_13d8c to i32*
  store i32 %v0_13d8c, i32* %v3_13d8c, align 4
  %v0_13d90 = load i32, i32* %ip.global-to-local, align 4
  %v1_13d90 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d90 = add i32 %v1_13d90, 20
  %v3_13d90 = inttoptr i32 %v2_13d90 to i32*
  store i32 %v0_13d90, i32* %v3_13d90, align 4
  %v0_13d94 = load i32, i32* %lr.global-to-local, align 4
  %v1_13d94 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d94 = add i32 %v1_13d94, 24
  %v3_13d94 = inttoptr i32 %v2_13d94 to i32*
  store i32 %v0_13d94, i32* %v3_13d94, align 4
  %v0_13d98 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d98 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d98 = add i32 %v1_13d98, 28
  %v3_13d98 = inttoptr i32 %v2_13d98 to i32*
  store i32 %v0_13d98, i32* %v3_13d98, align 4
  ret i32 %v2_13d5c

; uselistorder directives
  uselistorder i32 %v0_13d58, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_13da8() local_unnamed_addr {
dec_label_pc_13da8:
  %stack_var_-16 = alloca i32, align 4
  %v2_13dac = ptrtoint i32* %stack_var_-16 to i32
  %v2_13db8 = call i32 @function_15ae8(i32 7, i32 %v2_13dac)
  %v1_13dbc = icmp slt i32 %v2_13db8, 0
  %v5_13dc0 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_13dbc, i32 256, i32 %v5_13dc0
  ret i32 %storemerge
}

define i32 @function_13dd4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13dd4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dd4 = load i32, i32* @r7, align 4
  store i32 %v3_13dd4, i32* %stack_var_-8, align 4
  %v0_13de0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13de0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13de0, -4095
  br i1 %tmp, label %dec_label_pc_13e00, label %dec_label_pc_13df0

dec_label_pc_13df0:                               ; preds = %dec_label_pc_13dd4
  %v0_13df0 = call i32 @function_10f8c()
  %v0_13df4 = load i32, i32* %r7.global-to-local, align 4
  %v1_13df4 = sub i32 0, %v0_13df4
  %v2_13df8 = inttoptr i32 %v0_13df0 to i32*
  store i32 %v1_13df4, i32* %v2_13df8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13e00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13e00

dec_label_pc_13e00:                               ; preds = %dec_label_pc_13dd4, %dec_label_pc_13df0
  %v1_13e04 = phi i32 [ %v0_13de0, %dec_label_pc_13dd4 ], [ -1, %dec_label_pc_13df0 ]
  %v2_13e00 = phi i32 [ %v3_13dd4, %dec_label_pc_13dd4 ], [ %v2_13e00.pre, %dec_label_pc_13df0 ]
  store i32 %v2_13e00, i32* @r7, align 4
  ret i32 %v1_13e04

; uselistorder directives
  uselistorder i32 %v0_13de0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e00, { 1, 0 }
}

define i32 @function_13e08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e08:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e08 = load i32, i32* @r7, align 4
  store i32 %v3_13e08, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13e30, label %dec_label_pc_13e20

dec_label_pc_13e20:                               ; preds = %dec_label_pc_13e08
  %v0_13e20 = call i32 @function_10f8c()
  %v0_13e24 = load i32, i32* %r7.global-to-local, align 4
  %v1_13e24 = sub i32 0, %v0_13e24
  %v2_13e28 = inttoptr i32 %v0_13e20 to i32*
  store i32 %v1_13e24, i32* %v2_13e28, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13e34.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13e30

dec_label_pc_13e30:                               ; preds = %dec_label_pc_13e08, %dec_label_pc_13e20
  %v2_13e34 = phi i32 [ %v3_13e08, %dec_label_pc_13e08 ], [ %v2_13e34.pre, %dec_label_pc_13e20 ]
  %v0_13e30 = phi i32 [ %arg1, %dec_label_pc_13e08 ], [ -1, %dec_label_pc_13e20 ]
  store i32 %v2_13e34, i32* @r7, align 4
  ret i32 %v0_13e30

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e30, { 1, 0 }
}

define i32 @function_13e3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e3c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13e70, label %dec_label_pc_13e60

dec_label_pc_13e60:                               ; preds = %dec_label_pc_13e3c
  %v0_13e60 = call i32 @function_10f8c()
  %v0_13e64 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e64 = sub i32 0, %v0_13e64
  %v2_13e68 = inttoptr i32 %v0_13e60 to i32*
  store i32 %v1_13e64, i32* %v2_13e68, align 4
  br label %dec_label_pc_13e70

dec_label_pc_13e70:                               ; preds = %dec_label_pc_13e3c, %dec_label_pc_13e60
  %v1_13e78 = phi i32 [ %arg1, %dec_label_pc_13e3c ], [ -1, %dec_label_pc_13e60 ]
  ret i32 %v1_13e78

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e70, { 1, 0 }
}

define i32 @function_13e7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e7c:
  %v1_13e8c = load i32, i32* @r0, align 4
  ret i32 %v1_13e8c
}

define i32 @function_13e90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e90:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e90 = load i32, i32* @r7, align 4
  store i32 %v3_13e90, i32* %stack_var_-8, align 4
  %v0_13e9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13e9c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13e9c, -4095
  br i1 %tmp, label %dec_label_pc_13ebc, label %dec_label_pc_13eac

dec_label_pc_13eac:                               ; preds = %dec_label_pc_13e90
  %v0_13eac = call i32 @function_10f8c()
  %v0_13eb0 = load i32, i32* %r7.global-to-local, align 4
  %v1_13eb0 = sub i32 0, %v0_13eb0
  %v2_13eb4 = inttoptr i32 %v0_13eac to i32*
  store i32 %v1_13eb0, i32* %v2_13eb4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13ebc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13ebc

dec_label_pc_13ebc:                               ; preds = %dec_label_pc_13e90, %dec_label_pc_13eac
  %v1_13ec0 = phi i32 [ %v0_13e9c, %dec_label_pc_13e90 ], [ -1, %dec_label_pc_13eac ]
  %v2_13ebc = phi i32 [ %v3_13e90, %dec_label_pc_13e90 ], [ %v2_13ebc.pre, %dec_label_pc_13eac ]
  store i32 %v2_13ebc, i32* @r7, align 4
  ret i32 %v1_13ec0

; uselistorder directives
  uselistorder i32 %v0_13e9c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ebc, { 1, 0 }
}

define i32 @function_13ec4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ec4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ec8.outer

dec_label_pc_13ec8.outer:                         ; preds = %dec_label_pc_13ee0, %dec_label_pc_13ec4
  %v0_13ec8.ph = phi i32 [ %v0_13ec8.pre.pre, %dec_label_pc_13ee0 ], [ %arg1, %dec_label_pc_13ec4 ]
  %tmp = icmp ult i32 %v0_13ec8.ph, -4095
  br label %dec_label_pc_13ec8

dec_label_pc_13ec8:                               ; preds = %dec_label_pc_13ec8.outer, %dec_label_pc_13ec8
  br i1 %tmp, label %dec_label_pc_13ec8, label %dec_label_pc_13ee0

dec_label_pc_13ee0:                               ; preds = %dec_label_pc_13ec8
  %v0_13ee0 = call i32 @function_10f8c()
  %v1_13ee4 = sub i32 0, %v0_13ec8.ph
  %v2_13ee8 = inttoptr i32 %v0_13ee0 to i32*
  store i32 %v1_13ee4, i32* %v2_13ee8, align 4
  %v0_13ec8.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ec8.outer

; uselistorder directives
  uselistorder i32 %v0_13ec8.ph, { 1, 0 }
  uselistorder label %dec_label_pc_13ec8, { 1, 0 }
}

define i32 @function_13ef0(i32* %arg1) local_unnamed_addr {
dec_label_pc_13ef0:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 124088, i32* @r6, align 4
  %v1_13f04 = add i32 %tmp, 24
  store i32 %v1_13f04, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_13f1c = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_13f1c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13f1c)
  %v0_13f30 = load i32, i32* @r6, align 4
  %v2_13f30 = add i32 %v0_13f30, 16
  %v3_13f30 = inttoptr i32 %v2_13f30 to i32*
  %v4_13f30 = load i32, i32* %v3_13f30, align 4
  store i32 %v4_13f30, i32* %ip.global-to-local, align 4
  store i32 81724, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13f30)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_13f40

dec_label_pc_13f40:                               ; preds = %dec_label_pc_13f70, %dec_label_pc_13ef0
  %v0_13f40 = load i32, i32* @r5, align 4
  %v1_13f40 = add i32 %v0_13f40, 4
  %v2_13f40 = inttoptr i32 %v1_13f40 to i32*
  %v3_13f40 = load i32, i32* %v2_13f40, align 4
  %v4_13f40 = add i32 %v0_13f40, 8
  %v5_13f40 = inttoptr i32 %v4_13f40 to i32*
  %v6_13f40 = load i32, i32* %v5_13f40, align 4
  %tmp10 = icmp ugt i32 %v6_13f40, %v3_13f40
  br i1 %tmp10, label %dec_label_pc_13f70, label %dec_label_pc_13f4c

dec_label_pc_13f4c:                               ; preds = %dec_label_pc_13f40
  %v1_13f4c = inttoptr i32 %v0_13f40 to i32*
  %v2_13f4c = load i32, i32* %v1_13f4c, align 4
  %v1_13f50 = add i32 %v0_13f40, 12
  %v2_13f50 = inttoptr i32 %v1_13f50 to i32*
  %v3_13f50 = load i32, i32* %v2_13f50, align 4
  %v1_13f54 = add i32 %v0_13f40, 20
  %v2_13f54 = inttoptr i32 %v1_13f54 to i32*
  %v3_13f54 = load i32, i32* %v2_13f54, align 4
  %v4_13f58 = inttoptr i32 %v3_13f50 to i32*
  %v5_13f58 = call i32 @function_15b1c(i32 %v2_13f4c, i32* %v4_13f58, i32 %v3_13f54, i32 %v6_13f40)
  %tmp9 = icmp slt i32 %v5_13f58, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_13f68

.thread:                                          ; preds = %dec_label_pc_13f4c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13fa0

dec_label_pc_13f68:                               ; preds = %dec_label_pc_13f4c
  %v1_13f68 = load i32, i32* @r5, align 4
  %v2_13f68 = add i32 %v1_13f68, 8
  %v3_13f68 = inttoptr i32 %v2_13f68 to i32*
  store i32 %v5_13f58, i32* %v3_13f68, align 4
  %v0_13f6c = load i32, i32* @r7, align 4
  %v1_13f6c = load i32, i32* @r5, align 4
  %v2_13f6c = add i32 %v1_13f6c, 4
  %v3_13f6c = inttoptr i32 %v2_13f6c to i32*
  store i32 %v0_13f6c, i32* %v3_13f6c, align 4
  %v0_13f70.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13f70

dec_label_pc_13f70:                               ; preds = %dec_label_pc_13f40, %dec_label_pc_13f68
  %v1_13f94 = phi i32 [ %v0_13f40, %dec_label_pc_13f40 ], [ %v0_13f70.pre, %dec_label_pc_13f68 ]
  %v1_13f70 = add i32 %v1_13f94, 4
  %v2_13f70 = inttoptr i32 %v1_13f70 to i32*
  %v3_13f70 = load i32, i32* %v2_13f70, align 4
  %v1_13f74 = add i32 %v1_13f94, 12
  %v2_13f74 = inttoptr i32 %v1_13f74 to i32*
  %v3_13f74 = load i32, i32* %v2_13f74, align 4
  %v2_13f78 = add i32 %v3_13f74, %v3_13f70
  store i32 %v2_13f78, i32* @r4, align 4
  %v3_13f7c = inttoptr i32 %v2_13f78 to i32*
  %v4_13f7c = load i32, i32* %v3_13f7c, align 4
  %v1_13f80 = add i32 %v2_13f78, 4
  %v2_13f80 = inttoptr i32 %v1_13f80 to i32*
  %v3_13f80 = load i32, i32* %v2_13f80, align 4
  %v1_13f84 = add i32 %v2_13f78, 16
  %v2_13f84 = inttoptr i32 %v1_13f84 to i16*
  %v3_13f84 = load i16, i16* %v2_13f84, align 2
  %v4_13f84 = zext i16 %v3_13f84 to i32
  %v1_13f88 = add i32 %v2_13f78, 8
  %v2_13f88 = inttoptr i32 %v1_13f88 to i32*
  %v3_13f88 = load i32, i32* %v2_13f88, align 4
  store i32 %v3_13f88, i32* %ip.global-to-local, align 4
  %v2_13f8c = add i32 %v4_13f84, %v3_13f70
  %v2_13f90 = or i32 %v3_13f80, %v4_13f7c
  %v4_13f90 = icmp eq i32 %v2_13f90, 0
  store i32 %v2_13f8c, i32* %v2_13f70, align 4
  %v0_13f98 = load i32, i32* %ip.global-to-local, align 4
  %v1_13f98 = load i32, i32* @r5, align 4
  %v2_13f98 = add i32 %v1_13f98, 16
  %v3_13f98 = inttoptr i32 %v2_13f98 to i32*
  store i32 %v0_13f98, i32* %v3_13f98, align 4
  br i1 %v4_13f90, label %dec_label_pc_13f40, label %dec_label_pc_13fa0

dec_label_pc_13fa0:                               ; preds = %dec_label_pc_13f70, %.thread
  %v0_13fac = load i32, i32* @r6, align 4
  %v2_13fac = add i32 %v0_13fac, 24
  %v3_13fac = inttoptr i32 %v2_13fac to i32*
  %v4_13fac = load i32, i32* %v3_13fac, align 4
  store i32 %v4_13fac, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13fac)
  %v0_13fb8 = load i32, i32* @r4, align 4
  ret i32 %v0_13fb8

; uselistorder directives
  uselistorder i32 %v2_13f78, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_13f94, { 1, 0 }
  uselistorder i32 %v6_13f40, { 1, 0 }
  uselistorder i32 %v0_13f40, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_13f70, { 1, 0 }
}

define i32 @function_13fcc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13fcc:
  %v0_13fcc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13fcc, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13fcc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13fcc, %bb
  %v10_13fd8 = phi i32 [ %arg1, %dec_label_pc_13fcc ], [ 0, %bb ]
  ret i32 %v10_13fd8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_13fdc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13fdc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_13fdc = load i32, i32* @r4, align 4
  %v6_13fdc = load i32, i32* @r5, align 4
  %v9_13fdc = load i32, i32* @r6, align 4
  %v12_13fdc = load i32, i32* @r7, align 4
  %v15_13fdc = load i32, i32* @r8, align 4
  %v18_13fdc = load i32, i32* @sb, align 4
  %v21_13fdc = load i32, i32* @sl, align 4
  %v24_13fdc = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_13fe0 = icmp eq i32* %arg1, null
  store i1 %v2_13fe0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_13fe0, label %dec_label_pc_142f0, label %dec_label_pc_13ff8

dec_label_pc_13ff8:                               ; preds = %dec_label_pc_13fdc
  %v1_13ff8 = urem i32 %arg3, 256
  store i32 %v1_13ff8, i32* @sb, align 4
  %v1_13ffc = udiv i32 %arg3, 256
  %v3_14000 = urem i32 %v1_13ffc, 256
  %v3_14004 = mul nuw nsw i32 %v1_13ff8, 4
  %v1_1400c = or i32 %v3_14004, 1
  %v1_14018 = and i32 %arg3, 131072
  %v1_1401c = add nsw i32 %v1_13ff8, -1
  %v1_14028 = and i32 %arg3, 262144
  store i32 %v1_14028, i32* %r2.global-to-local, align 4
  %v1_1402c = and i32 %arg3, 65536
  store i32 %v1_1402c, i32* %r3.global-to-local, align 4
  store i32 %v1_1402c, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_1403c = add i32 %arg4, 1
  store i32 %v1_1403c, i32* @sl, align 4
  %v2_141bc = inttoptr i32 %arg2 to i32*
  %v2_141cc = icmp eq i32 %v1_14018, 0
  %v2_14224 = icmp eq i32 %v1_14028, 0
  br label %dec_label_pc_14040

dec_label_pc_14040:                               ; preds = %dec_label_pc_14040.backedge, %dec_label_pc_13ff8
  %v2_1405c = phi i32 [ %v0_14040.pre, %dec_label_pc_14040.backedge ], [ %tmp, %dec_label_pc_13ff8 ]
  %v1_14040 = add i32 %v2_1405c, 4
  %v2_14040 = inttoptr i32 %v1_14040 to i32*
  %v3_14040 = load i32, i32* %v2_14040, align 4
  store i32 %v3_14040, i32* %r3.global-to-local, align 4
  %v2_14044 = icmp eq i32 %v3_14040, 0
  store i1 %v2_14044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14044, label %dec_label_pc_1404c, label %dec_label_pc_14094

dec_label_pc_1404c:                               ; preds = %dec_label_pc_14040
  %v1_1404c = add i32 %v2_1405c, 16
  %v2_1404c = inttoptr i32 %v1_1404c to i32*
  %v3_1404c = load i32, i32* %v2_1404c, align 4
  store i32 %v3_1404c, i32* %r3.global-to-local, align 4
  %v2_14050 = icmp eq i32 %v3_1404c, 0
  store i1 %v2_14050, i1* %cpsr_z.global-to-local, align 1
  %v1_14054 = add i32 %v2_1405c, 8
  %v2_14054 = inttoptr i32 %v1_14054 to i32*
  %v3_14054 = load i32, i32* %v2_14054, align 4
  store i32 %v3_14054, i32* %r3.global-to-local, align 4
  br i1 %v2_14050, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_1404c
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_1404c, align 4
  %v0_14060.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_1404c, %bb
  %v0_14060 = phi i32 [ %v0_14060.pre, %bb ], [ %v3_14054, %dec_label_pc_1404c ]
  %v2_14060 = icmp eq i32 %v0_14060, 0
  store i1 %v2_14060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14060, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_1400c, i32* %r3.global-to-local, align 4
  %v2_14068 = load i32, i32* @r5, align 4
  %v3_14068 = add i32 %v2_14068, 8
  %v4_14068 = inttoptr i32 %v3_14068 to i32*
  store i32 %v1_1400c, i32* %v4_14068, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_1406c = load i32, i32* @r5, align 4
  %v1_1406c = add i32 %v0_1406c, 16
  %v2_1406c = inttoptr i32 %v1_1406c to i32*
  %v3_1406c = load i32, i32* %v2_1406c, align 4
  store i32 %v3_1406c, i32* %r0.global-to-local, align 4
  %v1_14070 = add i32 %v0_1406c, 8
  %v2_14070 = inttoptr i32 %v1_14070 to i32*
  %v3_14070 = load i32, i32* %v2_14070, align 4
  store i32 %v3_14070, i32* %r3.global-to-local, align 4
  %v2_14074 = add i32 %v3_14070, %v3_1406c
  store i32 %v2_14074, i32* @r0, align 4
  %v0_14078 = call i32 @function_11584()
  store i32 %v0_14078, i32* %r0.global-to-local, align 4
  %v2_1407c = icmp eq i32 %v0_14078, 0
  store i1 %v2_1407c, i1* %cpsr_z.global-to-local, align 1
  %v1_14080 = load i32, i32* @r5, align 4
  %v2_14080 = add i32 %v1_14080, 4
  %v3_14080 = inttoptr i32 %v2_14080 to i32*
  store i32 %v0_14078, i32* %v3_14080, align 4
  br i1 %v2_1407c, label %dec_label_pc_142f0, label %dec_label_pc_14088

dec_label_pc_14088:                               ; preds = %.thread
  %v0_14088 = load i32, i32* @r5, align 4
  %v1_14088 = add i32 %v0_14088, 20
  %v2_14088 = inttoptr i32 %v1_14088 to i32*
  %v3_14088 = load i32, i32* %v2_14088, align 4
  %v1_1408c = or i32 %v3_14088, 1
  store i32 %v1_1408c, i32* %r3.global-to-local, align 4
  store i32 %v1_1408c, i32* %v2_14088, align 4
  %v0_14094.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14094

dec_label_pc_14094:                               ; preds = %dec_label_pc_14040, %dec_label_pc_14088
  %v1_1409c = phi i32 [ %v2_1405c, %dec_label_pc_14040 ], [ %v0_14094.pre, %dec_label_pc_14088 ]
  %v1_14094 = add i32 %v1_1409c, 4
  %v2_14094 = inttoptr i32 %v1_14094 to i32*
  %v3_14094 = load i32, i32* %v2_14094, align 4
  store i32 %v3_14094, i32* %r2.global-to-local, align 4
  %v4_14094 = add i32 %v1_1409c, 8
  %v5_14094 = inttoptr i32 %v4_14094 to i32*
  %v6_14094 = load i32, i32* %v5_14094, align 4
  %v2_14098 = add i32 %v6_14094, %v3_14094
  store i32 %v2_14098, i32* %r3.global-to-local, align 4
  %v2_1409c = add i32 %v1_1409c, 12
  %v3_1409c = inttoptr i32 %v2_1409c to i32*
  store i32 %v2_14098, i32* %v3_1409c, align 4
  %v0_140a0 = load i32, i32* @fp, align 4
  store i32 %v0_140a0, i32* @r6, align 4
  br label %dec_label_pc_140a4

dec_label_pc_140a4:                               ; preds = %dec_label_pc_14130, %dec_label_pc_1411c, %dec_label_pc_14094
  %v0_140ac = phi i32 [ %v0_140a0, %dec_label_pc_14094 ], [ %v1_1411c, %dec_label_pc_1411c ], [ %v0_140ac.pre.pre, %dec_label_pc_14130 ]
  %v0_140a4 = load i32, i32* @r5, align 4
  %v1_140a4 = add i32 %v0_140a4, 12
  store i32 %v1_140a4, i32* %r0.global-to-local, align 4
  %v1_140a8 = inttoptr i32 %v1_140a4 to i32*
  %v2_140a8 = load i32, i32* %v1_140a8, align 4
  store i32 %v2_140a8, i32* %r0.global-to-local, align 4
  %v3_140a8 = add i32 %v0_140a4, 16
  %v4_140a8 = inttoptr i32 %v3_140a8 to i32*
  %v5_140a8 = load i32, i32* %v4_140a8, align 4
  %v2_140ac = add i32 %v2_140a8, %v0_140ac
  store i32 %v2_140ac, i32* %r0.global-to-local, align 4
  %v2_140b0 = sub i32 %v5_140a8, %v0_140ac
  %v1_140b4 = inttoptr i32 %v0_140a4 to i32*
  %v2_140b4 = load i32, i32* %v1_140b4, align 4
  store i32 %v2_140b4, i32* %r2.global-to-local, align 4
  %v3_140b8 = call i32 @function_14ad8(i32 %v2_140ac, i32 %v2_140b0, i32 %v2_140b4)
  store i32 %v3_140b8, i32* %r0.global-to-local, align 4
  store i32 %v3_140b8, i32* %r4.global-to-local, align 4
  %v2_140bc = icmp eq i32 %v3_140b8, 0
  store i1 %v2_140bc, i1* %cpsr_z.global-to-local, align 1
  %v0_140c4 = load i32, i32* @r5, align 4
  %v1_140c4 = add i32 %v0_140c4, 12
  br i1 %v2_140bc, label %dec_label_pc_140c4, label %dec_label_pc_140dc

dec_label_pc_140c4:                               ; preds = %dec_label_pc_140a4
  store i32 %v1_140c4, i32* %r0.global-to-local, align 4
  %v1_140c8 = inttoptr i32 %v1_140c4 to i32*
  %v2_140c8 = load i32, i32* %v1_140c8, align 4
  store i32 %v2_140c8, i32* %r0.global-to-local, align 4
  %v3_140c8 = add i32 %v0_140c4, 16
  %v4_140c8 = inttoptr i32 %v3_140c8 to i32*
  %v5_140c8 = load i32, i32* %v4_140c8, align 4
  store i32 %v5_140c8, i32* @r2, align 4
  %v2_140d0 = inttoptr i32 %v2_140c8 to i8*
  %v3_140d0 = call i32 @function_10fe0(i8* %v2_140d0, i32 0)
  store i32 %v3_140d0, i32* %r0.global-to-local, align 4
  %v0_140d4 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_142f4

dec_label_pc_140dc:                               ; preds = %dec_label_pc_140a4
  %v2_140dc = inttoptr i32 %v1_140c4 to i32*
  %v3_140dc = load i32, i32* %v2_140dc, align 4
  store i32 %v3_140dc, i32* @r4, align 4
  %v1_140e0 = load i32, i32* @r6, align 4
  %v2_140e0 = add i32 %v1_140e0, %v3_140dc
  store i32 %v2_140e0, i32* %r0.global-to-local, align 4
  %v1_140e4 = call i32 @function_15590(i32 %v2_140e0)
  %v0_140ec = load i32, i32* @r6, align 4
  %v2_140ec = add i32 %v0_140ec, %v1_140e4
  store i32 %v2_140ec, i32* @r6, align 4
  %v0_140f0 = load i32, i32* @r4, align 4
  store i32 %v0_140f0, i32* @r0, align 4
  %v2_140f4 = call i32 @function_157dc(i32 %v0_140f0, i32 10)
  store i32 %v2_140f4, i32* %r0.global-to-local, align 4
  %v2_140f8 = icmp eq i32 %v2_140f4, 0
  store i1 %v2_140f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140f8, label %dec_label_pc_14124, label %dec_label_pc_14100

dec_label_pc_14100:                               ; preds = %dec_label_pc_140dc
  %v1_14100 = inttoptr i32 %v2_140f4 to i8*
  %v2_14100 = load i8, i8* %v1_14100, align 1
  %v3_14100 = zext i8 %v2_14100 to i32
  %v1_14104 = add nuw nsw i32 %v3_14100, 255
  %v1_14108 = urem i32 %v1_14104, 256
  store i32 %v1_14108, i32* %r3.global-to-local, align 4
  %v7_1410c = icmp eq i32 %v1_14108, 92
  store i1 %v7_1410c, i1* %cpsr_z.global-to-local, align 1
  %v1_14110 = trunc i32 %v1_14104 to i8
  store i8 %v1_14110, i8* %v1_14100, align 1
  %v0_14114 = load i32, i32* @r6, align 4
  %v1_14114 = add i32 %v0_14114, -1
  store i32 %v1_14114, i32* @r6, align 4
  %v0_14118 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14118, label %dec_label_pc_1411c, label %dec_label_pc_141a8

dec_label_pc_1411c:                               ; preds = %dec_label_pc_14100
  %v1_1411c = add i32 %v0_14114, -2
  store i32 %v1_1411c, i32* @r6, align 4
  br label %dec_label_pc_140a4

dec_label_pc_14124:                               ; preds = %dec_label_pc_140dc
  %v0_14124 = load i32, i32* @r5, align 4
  %v1_14124 = add i32 %v0_14124, 20
  %v2_14124 = inttoptr i32 %v1_14124 to i32*
  %v3_14124 = load i32, i32* %v2_14124, align 4
  store i32 %v3_14124, i32* %r3.global-to-local, align 4
  %v2_14128 = icmp eq i32 %v3_14124, 0
  store i1 %v2_14128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14128, label %dec_label_pc_14160, label %dec_label_pc_14130

dec_label_pc_14130:                               ; preds = %dec_label_pc_14124
  %v1_14130 = add i32 %v0_14124, 16
  %v2_14130 = inttoptr i32 %v1_14130 to i32*
  %v3_14130 = load i32, i32* %v2_14130, align 4
  store i32 %v3_14130, i32* %r3.global-to-local, align 4
  %v1_14134 = add i32 %v0_14124, 8
  %v2_14134 = inttoptr i32 %v1_14134 to i32*
  %v3_14134 = load i32, i32* %v2_14134, align 4
  %v1_14138 = add i32 %v3_14130, 4096
  store i32 %v1_14138, i32* %r3.global-to-local, align 4
  %v2_1413c = add i32 %v3_14134, %v1_14138
  store i32 %v1_14138, i32* %v2_14130, align 4
  %v0_14144 = load i32, i32* @r5, align 4
  %v1_14144 = add i32 %v0_14144, 4
  %v2_14144 = inttoptr i32 %v1_14144 to i32*
  %v3_14144 = load i32, i32* %v2_14144, align 4
  store i32 %v3_14144, i32* %r0.global-to-local, align 4
  %v4_14148 = inttoptr i32 %v3_14144 to i32*
  %v5_14148 = call i32 @function_11fd8(i32* %v4_14148, i32 %v2_1413c, i32 %v2_140b4, i32 %v1_14138)
  store i32 %v5_14148, i32* %r0.global-to-local, align 4
  %v0_1414c = load i32, i32* @r5, align 4
  %v1_1414c = add i32 %v0_1414c, 8
  %v2_1414c = inttoptr i32 %v1_1414c to i32*
  %v3_1414c = load i32, i32* %v2_1414c, align 4
  %v2_14150 = add i32 %v3_1414c, %v5_14148
  store i32 %v2_14150, i32* %r3.global-to-local, align 4
  %v2_14154 = add i32 %v0_1414c, 12
  %v3_14154 = inttoptr i32 %v2_14154 to i32*
  store i32 %v2_14150, i32* %v3_14154, align 4
  %v1_14158 = load i32, i32* @r5, align 4
  %v2_14158 = add i32 %v1_14158, 4
  %v3_14158 = inttoptr i32 %v2_14158 to i32*
  store i32 %v5_14148, i32* %v3_14158, align 4
  %v0_140ac.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_140a4

dec_label_pc_14160:                               ; preds = %dec_label_pc_14124, %.dec_label_pc_14160_crit_edge
  %v0_14160 = phi i32 [ %v0_14160.pre, %.dec_label_pc_14160_crit_edge ], [ %v0_14124, %dec_label_pc_14124 ]
  %v1_14160 = inttoptr i32 %v0_14160 to i32*
  %v2_14160 = load i32, i32* %v1_14160, align 4
  %v1_14164 = add i32 %v2_14160, 52
  %v2_14164 = inttoptr i32 %v1_14164 to i32*
  %v3_14164 = load i32, i32* %v2_14164, align 4
  store i32 %v3_14164, i32* %r3.global-to-local, align 4
  %v2_14168 = icmp eq i32 %v3_14164, 0
  store i1 %v2_14168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14168, label %dec_label_pc_14194, label %dec_label_pc_14170

dec_label_pc_14170:                               ; preds = %dec_label_pc_14160
  %v1_14170 = add i32 %v2_14160, 16
  %v2_14170 = inttoptr i32 %v1_14170 to i32*
  %v3_14170 = load i32, i32* %v2_14170, align 4
  store i32 %v3_14170, i32* %r2.global-to-local, align 4
  %v1_14174 = add i32 %v2_14160, 24
  %v2_14174 = inttoptr i32 %v1_14174 to i32*
  %v3_14174 = load i32, i32* %v2_14174, align 4
  store i32 %v3_14174, i32* %r3.global-to-local, align 4
  %v3_14178 = icmp ult i32 %v3_14170, %v3_14174
  %v9_14178 = icmp eq i32 %v3_14170, %v3_14174
  store i1 %v9_14178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14178, label %dec_label_pc_1419cthread-pre-split, label %dec_label_pc_14188

dec_label_pc_14188:                               ; preds = %dec_label_pc_14170
  store i32 %v2_14160, i32* %r0.global-to-local, align 4
  %v1_1418c = inttoptr i32 %v2_14160 to i16*
  %v2_1418c = call i32 @function_14f28(i16* %v1_1418c)
  store i32 %v2_1418c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_14194:                               ; preds = %dec_label_pc_14160
  store i32 %v2_14160, i32* %r0.global-to-local, align 4
  %v1_14198 = call i32 @function_149fc(i32 %v2_14160)
  store i32 %v1_14198, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_1419cthread-pre-split:               ; preds = %dec_label_pc_14170
  %v2_1417c = inttoptr i32 %v3_14170 to i8*
  %v3_1417c = load i8, i8* %v2_1417c, align 1
  %v4_1417c = zext i8 %v3_1417c to i32
  store i32 %v4_1417c, i32* %r0.global-to-local, align 4
  %v6_1417c = add i32 %v3_14170, 1
  store i32 %v6_1417c, i32* %r2.global-to-local, align 4
  store i32 %v6_1417c, i32* %v2_14170, align 4
  %v0_1419c.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %dec_label_pc_1419cthread-pre-split, %dec_label_pc_14188, %dec_label_pc_14194
  %v1_141a0 = phi i32 [ %v0_1419c.pr, %dec_label_pc_1419cthread-pre-split ], [ %v2_1418c, %dec_label_pc_14188 ], [ %v1_14198, %dec_label_pc_14194 ]
  %v7_1419c = icmp eq i32 %v1_141a0, 10
  store i1 %v7_1419c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1419c, label %dec_label_pc_141a8.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_1419c
  %v8_141a0 = icmp eq i32 %v1_141a0, -1
  store i1 %v8_141a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_141a0, label %dec_label_pc_141a8.loopexit, label %.dec_label_pc_14160_crit_edge

.dec_label_pc_14160_crit_edge:                    ; preds = %bb68
  %v0_14160.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14160

dec_label_pc_141a8.loopexit:                      ; preds = %bb68, %dec_label_pc_1419c
  %v0_141a8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_141a8

dec_label_pc_141a8:                               ; preds = %dec_label_pc_14100, %dec_label_pc_141a8.loopexit
  %v0_141a8 = phi i32 [ %v0_141a8.pre, %dec_label_pc_141a8.loopexit ], [ %v1_14114, %dec_label_pc_14100 ]
  %v7_141a8 = icmp eq i32 %v0_141a8, -1
  store i1 %v7_141a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_141a8, label %dec_label_pc_142f0, label %dec_label_pc_141b0

dec_label_pc_141b0:                               ; preds = %dec_label_pc_141a8
  %v0_141b0 = load i32, i32* @r5, align 4
  %v1_141b0 = add i32 %v0_141b0, 4
  %v2_141b0 = inttoptr i32 %v1_141b0 to i32*
  %v3_141b0 = load i32, i32* %v2_141b0, align 4
  store i32 %v3_141b0, i32* %r0.global-to-local, align 4
  store i32 %v3_14004, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_141b0, i32* %v2_141bc, align 4
  %v0_141c0 = load i32, i32* @fp, align 4
  %v2_141c4 = inttoptr i32 %v3_141b0 to i8*
  %v3_141c4 = call i32 @function_10fe0(i8* %v2_141c4, i32 %v0_141c0)
  store i32 %v3_141c4, i32* %r0.global-to-local, align 4
  store i32 %v1_14018, i32* %r2.global-to-local, align 4
  store i1 %v2_141cc, i1* %cpsr_z.global-to-local, align 1
  %v0_141d0 = load i32, i32* @r5, align 4
  %v1_141d0 = add i32 %v0_141d0, 12
  %v2_141d0 = inttoptr i32 %v1_141d0 to i32*
  %v3_141d0 = load i32, i32* %v2_141d0, align 4
  store i32 %v3_141d0, i32* @r4, align 4
  br i1 %v2_141cc, label %dec_label_pc_141e8, label %dec_label_pc_141d8

dec_label_pc_141d8:                               ; preds = %dec_label_pc_141b0
  store i32 %v3_141d0, i32* @r0, align 4
  %v0_141dc = load i32, i32* @sl, align 4
  %v2_141e0 = inttoptr i32 %v3_141d0 to i8*
  %v3_141e0 = call i32 @function_15654(i8* %v2_141e0, i32 %v0_141dc)
  store i32 %v3_141e0, i32* %r0.global-to-local, align 4
  %v0_141e4 = load i32, i32* @r4, align 4
  %v2_141e4 = add i32 %v0_141e4, %v3_141e0
  store i32 %v2_141e4, i32* @r4, align 4
  br label %dec_label_pc_141e8

dec_label_pc_141e8:                               ; preds = %dec_label_pc_141b0, %dec_label_pc_141d8
  %v0_142c013 = phi i32 [ %v3_141d0, %dec_label_pc_141b0 ], [ %v2_141e4, %dec_label_pc_141d8 ]
  %v1_141e8 = inttoptr i32 %v0_142c013 to i8*
  %v2_141e8 = load i8, i8* %v1_141e8, align 1
  %v3_141e8 = zext i8 %v2_141e8 to i32
  store i32 %v3_141e8, i32* %r2.global-to-local, align 4
  %v2_141ec = icmp eq i8 %v2_141e8, 0
  store i1 %v2_141ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_141ec, label %dec_label_pc_14040.backedge, label %dec_label_pc_141f4

dec_label_pc_14040.backedge:                      ; preds = %dec_label_pc_141e8, %dec_label_pc_142e8, %dec_label_pc_141f4
  %v0_14040.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14040

dec_label_pc_141f4:                               ; preds = %dec_label_pc_141e8
  %v0_141f4 = load i32, i32* @r7, align 4
  %v1_141f4 = inttoptr i32 %v0_141f4 to i8*
  %v2_141f4 = load i8, i8* %v1_141f4, align 1
  %v3_141f4 = zext i8 %v2_141f4 to i32
  store i32 %v3_141f4, i32* %r3.global-to-local, align 4
  %v9_141f8 = icmp eq i8 %v2_141f4, %v2_141e8
  store i1 %v9_141f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_141f8, label %dec_label_pc_14040.backedge, label %dec_label_pc_142c0.preheader

dec_label_pc_142c0.preheader:                     ; preds = %dec_label_pc_141f4
  %v1_141fc = load i32, i32* @fp, align 4
  store i32 %v1_141fc, i32* @r6, align 4
  %v2_142c015 = load i8, i8* %v1_141e8, align 1
  %v3_142c016 = zext i8 %v2_142c015 to i32
  store i32 %v3_142c016, i32* %r2.global-to-local, align 4
  %v2_142c417 = icmp eq i8 %v2_142c015, 0
  store i1 %v2_142c417, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142c417, label %dec_label_pc_142dc, label %dec_label_pc_142cc.preheader

dec_label_pc_142cc.preheader:                     ; preds = %dec_label_pc_142c0.preheader
  %v2_142cc82 = load i8, i8* %v1_141f4, align 1
  %v3_142cc83 = zext i8 %v2_142cc82 to i32
  store i32 %v3_142cc83, i32* %r3.global-to-local, align 4
  %v9_142d086 = icmp eq i8 %v2_142cc82, %v2_142c015
  store i1 %v9_142d086, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_142d086, label %dec_label_pc_142dc, label %bb74

dec_label_pc_14208:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_1420c = load i32, i32* %v2_141bc, align 4
  store i32 %v2_1420c, i32* %r3.global-to-local, align 4
  store i32 %v1_1401c, i32* %r2.global-to-local, align 4
  %v9_14214 = icmp eq i32 %v2_1421888, %v1_1401c
  store i1 %v9_14214, i1* %cpsr_z.global-to-local, align 1
  %v5_14218 = mul i32 %v2_1421888, 4
  %v6_14218 = add i32 %v2_1420c, %v5_14218
  %v7_14218 = inttoptr i32 %v6_14218 to i32*
  store i32 %v0_1421887, i32* %v7_14218, align 4
  br i1 %v9_14214, label %dec_label_pc_14220, label %dec_label_pc_1422c

dec_label_pc_14220:                               ; preds = %dec_label_pc_14208
  store i32 %v1_14028, i32* %r3.global-to-local, align 4
  store i1 %v2_14224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14224, label %dec_label_pc_1422c, label %dec_label_pc_1424c

dec_label_pc_1422c:                               ; preds = %dec_label_pc_14220, %dec_label_pc_14208
  %v0_1422c = load i32, i32* @r7, align 4
  %v1_1422c = inttoptr i32 %v0_1422c to i8*
  %v2_1422c = load i8, i8* %v1_1422c, align 1
  %v3_1422c = zext i8 %v2_1422c to i32
  store i32 %v3_1422c, i32* %r3.global-to-local, align 4
  %v2_14230 = icmp eq i8 %v2_1422c, 0
  store i1 %v2_14230, i1* %cpsr_z.global-to-local, align 1
  %v0_14234 = load i32, i32* @r4, align 4
  store i32 %v0_14234, i32* @r0, align 4
  %v1_14238 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_14230, i32 %v1_14238, i32 %v0_1422c
  store i32 %storemerge, i32* @r1, align 4
  %v0_14240 = call i32 @function_15610()
  store i32 %v0_14240, i32* %r0.global-to-local, align 4
  %v0_14244 = load i32, i32* @r4, align 4
  %v2_14244 = add i32 %v0_14244, %v0_14240
  store i32 %v2_14244, i32* @r4, align 4
  br label %dec_label_pc_14284

dec_label_pc_1424c:                               ; preds = %dec_label_pc_14220
  %v0_1424c = load i32, i32* @r4, align 4
  store i32 %v0_1424c, i32* @r0, align 4
  %v0_14250 = load i32, i32* @r7, align 4
  %v1_14250 = inttoptr i32 %v0_14250 to i8*
  %v2_14250 = load i8, i8* %v1_14250, align 1
  %v3_14250 = zext i8 %v2_14250 to i32
  %v5_14254 = call i32 @function_156f0(i32 %v0_1424c, i32 %v3_14250, i32 %v1_1401c, i32 %v1_14028)
  store i32 %v5_14254, i32* %r0.global-to-local, align 4
  store i32 %v1_14018, i32* %r2.global-to-local, align 4
  store i1 %v2_141cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_14254, i32* @r4, align 4
  br i1 %v2_141cc, label %dec_label_pc_14284, label %dec_label_pc_14270

dec_label_pc_1426c:                               ; preds = %dec_label_pc_14270
  %v1_1426c = add i32 %v0_14284.pre, -1
  store i32 %v1_1426c, i32* @r4, align 4
  br label %dec_label_pc_14270

dec_label_pc_14270:                               ; preds = %dec_label_pc_1424c, %dec_label_pc_1426c
  %v0_14270 = phi i32 [ %v1_1426c, %dec_label_pc_1426c ], [ %v5_14254, %dec_label_pc_1424c ]
  %v1_14270 = add i32 %v0_14270, -1
  %v2_14270 = inttoptr i32 %v1_14270 to i8*
  %v3_14270 = load i8, i8* %v2_14270, align 1
  %v4_14270 = zext i8 %v3_14270 to i32
  %v0_14274 = load i32, i32* @sl, align 4
  store i32 %v0_14274, i32* @r0, align 4
  %v2_14278 = call i32 @function_157dc(i32 %v0_14274, i32 %v4_14270)
  store i32 %v2_14278, i32* %r0.global-to-local, align 4
  %v2_1427c = icmp eq i32 %v2_14278, 0
  store i1 %v2_1427c, i1* %cpsr_z.global-to-local, align 1
  %v0_14284.pre = load i32, i32* @r4, align 4
  br i1 %v2_1427c, label %dec_label_pc_14284, label %dec_label_pc_1426c

dec_label_pc_14284:                               ; preds = %dec_label_pc_14270, %dec_label_pc_1424c, %dec_label_pc_1422c
  %v3_14290 = phi i32 [ %v5_14254, %dec_label_pc_1424c ], [ %v2_14244, %dec_label_pc_1422c ], [ %v0_14284.pre, %dec_label_pc_14270 ]
  %v1_14284 = inttoptr i32 %v3_14290 to i8*
  %v2_14284 = load i8, i8* %v1_14284, align 1
  %v3_14284 = zext i8 %v2_14284 to i32
  store i32 %v3_14284, i32* %r2.global-to-local, align 4
  %v0_14288 = load i32, i32* @r7, align 4
  %v1_14288 = inttoptr i32 %v0_14288 to i8*
  %v2_14288 = load i8, i8* %v1_14288, align 1
  %v3_14288 = zext i8 %v2_14288 to i32
  store i32 %v3_14288, i32* %r3.global-to-local, align 4
  %v9_1428c = icmp eq i8 %v2_14288, %v2_14284
  store i1 %v9_1428c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1428c, label %bb71, label %dec_label_pc_14298

bb71:                                             ; preds = %dec_label_pc_14284
  %v1_14290 = load i32, i32* @fp, align 4
  %v2_14290 = trunc i32 %v1_14290 to i8
  store i8 %v2_14290, i8* %v1_14284, align 1
  %v0_14294.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14294.pr, label %bb73, label %.dec_label_pc_14298_crit_edge

.dec_label_pc_14298_crit_edge:                    ; preds = %bb71
  %v0_14298.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14298

dec_label_pc_14298:                               ; preds = %.dec_label_pc_14298_crit_edge, %dec_label_pc_14284
  %v0_14298 = phi i32 [ %v0_14298.pre, %.dec_label_pc_14298_crit_edge ], [ %v3_14284, %dec_label_pc_14284 ]
  %v2_14298 = icmp eq i32 %v0_14298, 0
  store i1 %v2_14298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14298, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_14298
  %v1_1429c = load i32, i32* @fp, align 4
  %v2_1429c = trunc i32 %v1_1429c to i8
  %v3_1429c = load i32, i32* @r4, align 4
  %v4_1429c = inttoptr i32 %v3_1429c to i8*
  store i8 %v2_1429c, i8* %v4_1429c, align 1
  %v5_1429c = load i32, i32* @r4, align 4
  %v6_1429c = add i32 %v5_1429c, 1
  store i32 %v6_1429c, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_14298, %bb72
  %v2_142a0 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_142a0, i32* %r3.global-to-local, align 4
  %v2_142a4 = icmp eq i32 %v2_142a0, 0
  store i1 %v2_142a4, i1* %cpsr_z.global-to-local, align 1
  %v0_142c0.pre = load i32, i32* @r4, align 4
  br i1 %v2_142a4, label %dec_label_pc_142bc, label %dec_label_pc_142ac

dec_label_pc_142ac:                               ; preds = %bb73
  store i32 %v0_142c0.pre, i32* @r0, align 4
  %v0_142b0 = load i32, i32* @sl, align 4
  %v2_142b4 = inttoptr i32 %v0_142c0.pre to i8*
  %v3_142b4 = call i32 @function_15654(i8* %v2_142b4, i32 %v0_142b0)
  store i32 %v3_142b4, i32* %r0.global-to-local, align 4
  %v0_142b8 = load i32, i32* @r4, align 4
  %v2_142b8 = add i32 %v0_142b8, %v3_142b4
  store i32 %v2_142b8, i32* @r4, align 4
  br label %dec_label_pc_142bc

dec_label_pc_142bc:                               ; preds = %bb73, %dec_label_pc_142ac
  %v0_142c0 = phi i32 [ %v2_142b8, %dec_label_pc_142ac ], [ %v0_142c0.pre, %bb73 ]
  %v0_142bc = load i32, i32* @r6, align 4
  %v1_142bc = add i32 %v0_142bc, 1
  store i32 %v1_142bc, i32* @r6, align 4
  %v1_142c0 = inttoptr i32 %v0_142c0 to i8*
  %v2_142c0 = load i8, i8* %v1_142c0, align 1
  %v3_142c0 = zext i8 %v2_142c0 to i32
  store i32 %v3_142c0, i32* %r2.global-to-local, align 4
  %v2_142c4 = icmp eq i8 %v2_142c0, 0
  store i1 %v2_142c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142c4, label %dec_label_pc_142dc, label %dec_label_pc_142bc.dec_label_pc_142cc_crit_edge

dec_label_pc_142bc.dec_label_pc_142cc_crit_edge:  ; preds = %dec_label_pc_142bc
  %v0_142cc.pre = load i32, i32* @r7, align 4
  %v1_142cc = inttoptr i32 %v0_142cc.pre to i8*
  %v2_142cc = load i8, i8* %v1_142cc, align 1
  %v3_142cc = zext i8 %v2_142cc to i32
  store i32 %v3_142cc, i32* %r3.global-to-local, align 4
  %v9_142d0 = icmp eq i8 %v2_142cc, %v2_142c0
  store i1 %v9_142d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_142d0, label %dec_label_pc_142dc, label %bb74

bb74:                                             ; preds = %dec_label_pc_142cc.preheader, %dec_label_pc_142bc.dec_label_pc_142cc_crit_edge
  %v2_1421888 = phi i32 [ %v1_142bc, %dec_label_pc_142bc.dec_label_pc_142cc_crit_edge ], [ %v1_141fc, %dec_label_pc_142cc.preheader ]
  %v0_1421887 = phi i32 [ %v0_142c0, %dec_label_pc_142bc.dec_label_pc_142cc_crit_edge ], [ %v0_142c013, %dec_label_pc_142cc.preheader ]
  %v2_142d4 = load i32, i32* @sb, align 4
  %v3_142d4 = sub i32 %v2_1421888, %v2_142d4
  %v5_142d4 = xor i32 %v2_142d4, %v2_1421888
  %v6_142d4 = xor i32 %v3_142d4, %v2_1421888
  %v7_142d4 = and i32 %v6_142d4, %v5_142d4
  %v8_142d4 = icmp slt i32 %v7_142d4, 0
  %v9_142d4 = icmp slt i32 %v3_142d4, 0
  %v10_142d4 = icmp eq i32 %v2_1421888, %v2_142d4
  store i1 %v10_142d4, i1* %cpsr_z.global-to-local, align 1
  %v2_142d8 = xor i1 %v9_142d4, %v8_142d4
  br i1 %v2_142d8, label %dec_label_pc_14208, label %dec_label_pc_142dc

dec_label_pc_142dc:                               ; preds = %dec_label_pc_142cc.preheader, %bb74, %dec_label_pc_142bc, %dec_label_pc_142bc.dec_label_pc_142cc_crit_edge, %dec_label_pc_142c0.preheader
  %v0_142e0 = phi i32 [ %v1_141fc, %dec_label_pc_142c0.preheader ], [ %v1_141fc, %dec_label_pc_142cc.preheader ], [ %v2_1421888, %bb74 ], [ %v1_142bc, %dec_label_pc_142bc ], [ %v1_142bc, %dec_label_pc_142bc.dec_label_pc_142cc_crit_edge ]
  store i32 %v3_14000, i32* %r2.global-to-local, align 4
  %v9_142e0 = icmp eq i32 %v0_142e0, %v3_14000
  store i1 %v9_142e0, i1* %cpsr_z.global-to-local, align 1
  %v6_142e4 = icmp slt i32 %v0_142e0, %v3_14000
  br i1 %v6_142e4, label %dec_label_pc_142e8, label %dec_label_pc_142f4

dec_label_pc_142e8:                               ; preds = %dec_label_pc_142dc
  %v0_142e8 = load i32, i32* @r8, align 4
  %v1_142e8 = and i32 %v0_142e8, 1048576
  %v2_142e8 = icmp eq i32 %v1_142e8, 0
  store i1 %v2_142e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142e8, label %dec_label_pc_14040.backedge, label %dec_label_pc_142f0

dec_label_pc_142f0:                               ; preds = %dec_label_pc_142e8, %dec_label_pc_141a8, %.thread, %dec_label_pc_13fdc
  br label %dec_label_pc_142f4

dec_label_pc_142f4:                               ; preds = %dec_label_pc_142dc, %dec_label_pc_140c4, %dec_label_pc_142f0
  %v0_142f4 = phi i32 [ %v0_140d4, %dec_label_pc_140c4 ], [ 0, %dec_label_pc_142f0 ], [ %v0_142e0, %dec_label_pc_142dc ]
  store i32 %v0_142f4, i32* %r0.global-to-local, align 4
  store i32 %v3_13fdc, i32* @r4, align 4
  store i32 %v6_13fdc, i32* @r5, align 4
  store i32 %v9_13fdc, i32* @r6, align 4
  store i32 %v12_13fdc, i32* @r7, align 4
  store i32 %v15_13fdc, i32* @r8, align 4
  store i32 %v18_13fdc, i32* @sb, align 4
  store i32 %v21_13fdc, i32* @sl, align 4
  store i32 %v24_13fdc, i32* @fp, align 4
  ret i32 %v0_142f4

; uselistorder directives
  uselistorder i32 %v0_142f4, { 1, 0 }
  uselistorder i32 %v0_142e0, { 0, 2, 1 }
  uselistorder i32 %v3_142d4, { 1, 0 }
  uselistorder i32 %v2_142d4, { 1, 0, 2 }
  uselistorder i32 %v2_1421888, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_142d0, { 1, 0 }
  uselistorder i32 %v0_142c0.pre, { 0, 2, 1 }
  uselistorder i32 %v5_14254, { 1, 0, 2, 3 }
  uselistorder i1 %v9_142d086, { 1, 0 }
  uselistorder i1 %v9_141f8, { 1, 0 }
  uselistorder i32 %v3_141d0, { 0, 2, 1, 3 }
  uselistorder i1 %v7_141a8, { 1, 0 }
  uselistorder i1 %v8_141a0, { 1, 0 }
  uselistorder i32 %v3_14170, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_14160, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_14148, { 1, 0, 2 }
  uselistorder i32 %v1_14138, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14124, { 0, 2, 1, 3 }
  uselistorder i32 %v1_1411c, { 1, 0 }
  uselistorder i32 %v1_14108, { 1, 0 }
  uselistorder i32 %v1_14104, { 1, 0 }
  uselistorder i32 %v1_140c4, { 2, 0, 1 }
  uselistorder i32 %v0_140ac, { 1, 0 }
  uselistorder i32 %v1_1409c, { 0, 2, 1 }
  uselistorder i1 %v2_141cc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_14028, { 2, 0, 1, 3 }
  uselistorder i32 %v1_1401c, { 2, 1, 0 }
  uselistorder i32 %v3_14004, { 1, 0 }
  uselistorder i32 %v3_14000, { 2, 1, 0 }
  uselistorder i32 %v1_13ff8, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 12, 13, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 33, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_15590, { 1, 0 }
  uselistorder i32 262144, { 1, 2, 0 }
  uselistorder i32* @sl, { 8, 9, 10, 11, 12, 13, 14, 40, 0, 41, 42, 15, 16, 102, 103, 104, 105, 106, 107, 108, 109, 110, 1, 111, 112, 113, 114, 115, 116, 118, 2, 117, 120, 119, 121, 122, 123, 124, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 5, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 6, 64, 65, 66, 7, 67, 68, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 3, 86, 87, 88, 89, 4, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 125, 126, 127, 128, 69, 70, 71, 72, 73 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_142f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_142dc, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_142bc, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14270, { 1, 0 }
  uselistorder label %dec_label_pc_14040.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_141e8, { 1, 0 }
  uselistorder label %dec_label_pc_141a8, { 1, 0 }
  uselistorder label %dec_label_pc_1419c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14160, { 1, 0 }
  uselistorder label %dec_label_pc_14094, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_14304(i32* %arg1) local_unnamed_addr {
dec_label_pc_14304:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_14308 = icmp eq i32* %arg1, null
  br i1 %v2_14308, label %dec_label_pc_14330, label %dec_label_pc_14310

dec_label_pc_14310:                               ; preds = %dec_label_pc_14304
  %v2_14310 = load i32, i32* %arg1, align 4
  %v1_14314 = inttoptr i32 %v2_14310 to i16*
  %v2_14314 = call i32 @function_14380(i16* %v1_14314)
  %v0_14318 = load i32, i32* @r4, align 4
  %v1_14318 = add i32 %v0_14318, 20
  %v2_14318 = inttoptr i32 %v1_14318 to i32*
  %v3_14318 = load i32, i32* %v2_14318, align 4
  %v2_1431c = icmp eq i32 %v3_14318, 0
  br i1 %v2_1431c, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_14310
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_14310, %bb
  store i32 82728, i32* @lr, align 4
  %v1_14324 = xor i1 %v2_1431c, true
  call void @__pseudo_cond_branch(i1 %v1_14324, i32 ptrtoint (i32* @global_var_125f0.21 to i32))
  %v0_14328 = load i32, i32* @r4, align 4
  store i32 %v0_14328, i32* @r0, align 4
  %v0_1432c = call i32 @function_125f0()
  br label %dec_label_pc_14330

dec_label_pc_14330:                               ; preds = %dec_label_pc_14304, %bb6
  %v1_14334 = phi i32 [ 0, %dec_label_pc_14304 ], [ %v0_1432c, %bb6 ]
  ret i32 %v1_14334

; uselistorder directives
  uselistorder i32* null, { 0, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 3, 19, 4, 20, 21, 22 }
  uselistorder label %dec_label_pc_14330, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_14338(i32 %arg1) local_unnamed_addr {
dec_label_pc_14338:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14344 = load i32, i32* @r4, align 4
  store i32 %v3_14344, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_16164.488 to i32), i32* @r1, align 4
  %v0_1434c = call i32 @function_14534()
  store i32 %v0_1434c, i32* %r0.global-to-local, align 4
  store i32 %v0_1434c, i32* @r4, align 4
  %v2_14350 = icmp eq i32 %v0_1434c, 0
  br i1 %v2_14350, label %bb, label %dec_label_pc_1435c

bb:                                               ; preds = %dec_label_pc_14338
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_1435c:                               ; preds = %dec_label_pc_14338
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_14364 = call i32 @function_11ea4(i32 1, i32 24)
  store i32 %v2_14364, i32* %r0.global-to-local, align 4
  %v2_14368 = icmp eq i32 %v2_14364, 0
  br i1 %v2_14368, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_1435c
  %v1_1436c = load i32, i32* @r4, align 4
  %v3_1436c = inttoptr i32 %v2_14364 to i32*
  store i32 %v1_1436c, i32* %v3_1436c, align 4
  %v1_14374.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_1435c, %bb4
  %v1_14374 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_1435c ], [ %v1_14374.pre, %bb4 ]
  %v2_14370 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14370, i32* @r4, align 4
  ret i32 %v1_14374

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_11ea4, { 40, 11, 39, 38, 37, 36, 35, 20, 19, 34, 33, 29, 28, 27, 26, 25, 24, 23, 22, 21, 9, 18, 17, 16, 8, 7, 6, 15, 14, 13, 12, 5, 4, 3, 2, 1, 0, 10, 32, 31, 30 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_14380(i16* %arg1) local_unnamed_addr {
dec_label_pc_14380:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14380 = load i32, i32* @r4, align 4
  store i32 %v3_14380, i32* %stack_var_-36, align 4
  %v6_14380 = load i32, i32* @r5, align 4
  %v9_14380 = load i32, i32* @r6, align 4
  %v12_14380 = load i32, i32* @r7, align 4
  %v2_14384 = add i32 %tmp, 52
  %v3_14384 = inttoptr i32 %v2_14384 to i32*
  %v4_14384 = load i32, i32* %v3_14384, align 4
  %v1_1438c = sub i32 1, %v4_14384
  %v2_1438c = icmp ult i32 %v4_14384, 2
  br i1 %v2_1438c, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_14380
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_14380, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_1438c, %dec_label_pc_14380 ]
  %v0_14394 = phi i32 [ 0, %bb ], [ %v1_1438c, %dec_label_pc_14380 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_14394 = icmp eq i32 %v0_14394, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 124088, i32* @r6, align 4
  br i1 %v2_14394, label %dec_label_pc_143e0, label %dec_label_pc_143a8

dec_label_pc_143a8:                               ; preds = %bb18
  %v4_143c0 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_143c0)
  %v0_143d4 = load i32, i32* @r6, align 4
  %v2_143d4 = add i32 %v0_143d4, 16
  %v3_143d4 = inttoptr i32 %v2_143d4 to i32*
  %v4_143d4 = load i32, i32* %v3_143d4, align 4
  call void @__pseudo_branch(i32 %v4_143d4)
  %v0_143e0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_143e0

dec_label_pc_143e0:                               ; preds = %bb18, %dec_label_pc_143a8
  %v1_143e8 = phi i32 [ %tmp, %bb18 ], [ %v0_143e0.pre, %dec_label_pc_143a8 ]
  %v1_143e0 = inttoptr i32 %v1_143e8 to i16*
  %v2_143e0 = load i16, i16* %v1_143e0, align 2
  %v3_143e0 = zext i16 %v2_143e0 to i32
  %v1_143e4 = and i32 %v3_143e0, 64
  %v2_143e4 = icmp eq i32 %v1_143e4, 0
  br i1 %v2_143e4, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_143e0
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_143e0, %bb19
  %storemerge26 = phi i32 [ %v1_143e8, %bb19 ], [ %v1_143e4, %dec_label_pc_143e0 ]
  %v1_143ec = xor i1 %v2_143e4, true
  call void @__pseudo_cond_branch(i1 %v1_143ec, i32 ptrtoint (i32* @global_var_14d1c.493 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_143f4 = load i32, i32* @r5, align 4
  %v1_143f4 = add i32 %v0_143f4, 4
  %v2_143f4 = inttoptr i32 %v1_143f4 to i32*
  %v3_143f4 = load i32, i32* %v2_143f4, align 4
  %v1_143f8 = call i32 @function_10b64(i32 %v3_143f4)
  %v0_14400 = load i32, i32* @r6, align 4
  %v2_1440c = add i32 %v0_14400, 108
  %v3_1440c = inttoptr i32 %v2_1440c to i32*
  %v4_1440c = load i32, i32* %v3_1440c, align 4
  store i32 %v4_1440c, i32* @r7, align 4
  %v1_14414 = load i32, i32* @r5, align 4
  %v2_14414 = add i32 %v1_14414, 4
  %v3_14414 = inttoptr i32 %v2_14414 to i32*
  store i32 -1, i32* %v3_14414, align 4
  %v0_1441c = load i32, i32* @r6, align 4
  %v2_1441c = add i32 %v0_1441c, 72
  %v3_1441c = inttoptr i32 %v2_1441c to i32*
  %v4_1441c = load i32, i32* %v3_1441c, align 4
  %v1_14424 = icmp slt i32 %v1_143f8, 0
  store i32 %v4_1441c, i32* %stack_var_-80, align 4
  br i1 %v1_14424, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_1441c)
  %v0_1444c = load i32, i32* @r6, align 4
  %v2_1444c = add i32 %v0_1444c, 16
  %v3_1444c = inttoptr i32 %v2_1444c to i32*
  %v4_1444c = load i32, i32* %v3_1444c, align 4
  call void @__pseudo_branch(i32 %v4_1444c)
  %v0_1445c = load i32, i32* @r6, align 4
  %v2_1445c = add i32 %v0_1445c, 12
  %v3_1445c = inttoptr i32 %v2_1445c to i32*
  %v4_1445c = load i32, i32* %v3_1445c, align 4
  %v1_14460 = inttoptr i32 %v4_1445c to i32*
  %v2_14460 = load i32, i32* %v1_14460, align 4
  %v1_14468 = add i32 %v2_14460, 1
  %v2_1446c = add i32 %v0_1445c, 24
  %v3_1446c = inttoptr i32 %v2_1446c to i32*
  %v4_1446c = load i32, i32* %v3_1446c, align 4
  store i32 %v4_1446c, i32* @r4, align 4
  store i32 %v1_14468, i32* %v1_14460, align 4
  call void @__pseudo_branch(i32 %v4_1446c)
  %v0_14484 = load i32, i32* @r5, align 4
  %v1_14484 = inttoptr i32 %v0_14484 to i16*
  %v2_14484 = load i16, i16* %v1_14484, align 2
  %v1_14488 = and i16 %v2_14484, 24576
  %v1_1448c = or i16 %v1_14488, 48
  %v0_14490 = load i32, i32* %sb.global-to-local, align 4
  %v2_14490 = icmp eq i32 %v0_14490, 0
  store i16 %v1_1448c, i16* %v1_14484, align 2
  br i1 %v2_14490, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_144a4 = xor i1 %v2_14490, true
  call void @__pseudo_cond_branch(i1 %v2_144a4, i32 %v4_1446c)
  %v0_144a8 = load i32, i32* @r5, align 4
  %v1_144a8 = inttoptr i32 %v0_144a8 to i16*
  %v2_144a8 = load i16, i16* %v1_144a8, align 2
  %v1_144ac = and i16 %v2_144a8, 16384
  %v2_144ac = icmp eq i16 %v1_144ac, 0
  br i1 %v2_144ac, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_144b4 = xor i1 %v2_144ac, true
  call void @__pseudo_cond_branch(i1 %v1_144b4, i32 ptrtoint (i32* @global_var_125f0.21 to i32))
  %v2_144c0 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_144c0)
  call void @__pseudo_branch(i32 %v4_1444c)
  %v0_144e0 = load i32, i32* @r6, align 4
  %v2_144e0 = add i32 %v0_144e0, 48
  %v3_144e0 = inttoptr i32 %v2_144e0 to i32*
  %v4_144e0 = load i32, i32* %v3_144e0, align 4
  %v1_144e4 = inttoptr i32 %v4_144e0 to i32*
  %v2_144e4 = load i32, i32* %v1_144e4, align 4
  %v1_144e8 = add i32 %v2_144e4, 1
  store i32 %v1_144e8, i32* %v1_144e4, align 4
  call void @__pseudo_branch(i32 %v4_1446c)
  %v0_14500 = call i32 @function_14b94()
  %v0_14504 = load i32, i32* %sl.global-to-local, align 4
  %v2_1450c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1450c, i32* @r4, align 4
  store i32 %v6_14380, i32* @r5, align 4
  store i32 %v9_14380, i32* @r6, align 4
  store i32 %v12_14380, i32* @r7, align 4
  ret i32 %v0_14504

; uselistorder directives
  uselistorder i1 %v2_144ac, { 1, 0 }
  uselistorder i32 %v4_1446c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_14384, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_10b64, { 32, 28, 27, 26, 31, 25, 30, 29, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_143e0, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_14518(i32 %arg1) local_unnamed_addr {
dec_label_pc_14518:
  %v0_14518 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14518, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_14518
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14518, %bb
  %v10_14530 = phi i32 [ %arg1, %dec_label_pc_14518 ], [ 0, %bb ]
  ret i32 %v10_14530

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_14534() local_unnamed_addr {
dec_label_pc_14534:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_14544 = call i32 @function_14554()
  ret i32 %v0_14544
}

define i32 @function_14554() local_unnamed_addr {
dec_label_pc_14554:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14554 = load i32, i32* @r4, align 4
  store i32 %v3_14554, i32* %stack_var_-36, align 4
  %v6_14554 = load i32, i32* @r5, align 4
  %v9_14554 = load i32, i32* @r6, align 4
  %v18_14554 = load i32, i32* @sb, align 4
  %v24_14554 = load i32, i32* @fp, align 4
  %v0_14558 = load i32, i32* @r1, align 4
  %v1_14558 = inttoptr i32 %v0_14558 to i8*
  %v2_14558 = load i8, i8* %v1_14558, align 1
  %v3_14558 = zext i8 %v2_14558 to i32
  store i32 %v3_14558, i32* @ip, align 4
  %v7_14560 = icmp eq i8 %v2_14558, 114
  store i32 124088, i32* @fp, align 4
  %v2_14568 = ptrtoint i32* %stack_var_-72 to i32
  %v0_1456c = load i32, i32* @r0, align 4
  store i32 %v0_1456c, i32* @r6, align 4
  %v0_14570 = load i32, i32* @r2, align 4
  store i32 %v0_14570, i32* @sb, align 4
  %v0_14574 = load i32, i32* @r3, align 4
  store i32 %v0_14574, i32* @r5, align 4
  br i1 %v7_14560, label %dec_label_pc_145c0, label %dec_label_pc_1457c

dec_label_pc_1457c:                               ; preds = %dec_label_pc_14554
  %v7_1457c = icmp eq i8 %v2_14558, 119
  br i1 %v7_1457c, label %bb, label %dec_label_pc_14588

bb:                                               ; preds = %dec_label_pc_1457c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_145c4

dec_label_pc_14588:                               ; preds = %dec_label_pc_1457c
  %v7_14588 = icmp eq i8 %v2_14558, 97
  br i1 %v7_14588, label %bb32, label %dec_label_pc_14594

bb32:                                             ; preds = %dec_label_pc_14588
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_145c4

dec_label_pc_14594:                               ; preds = %dec_label_pc_14588, %dec_label_pc_14648, %dec_label_pc_1461c
  %v0_14594 = call i32 @function_10f8c()
  store i32 %v0_14594, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_1459c = load i32, i32* @sb, align 4
  %v2_1459c = icmp eq i32 %v0_1459c, 0
  %v2_145a0 = inttoptr i32 %v0_14594 to i32*
  store i32 22, i32* %v2_145a0, align 4
  br i1 %v2_1459c, label %dec_label_pc_14814, label %dec_label_pc_145a8

dec_label_pc_145a8:                               ; preds = %dec_label_pc_1466c._crit_edge, %dec_label_pc_14594
  %v0_145a8 = load i32, i32* @sb, align 4
  %v1_145a8 = inttoptr i32 %v0_145a8 to i16*
  %v2_145a8 = load i16, i16* %v1_145a8, align 2
  %v3_145a8 = zext i16 %v2_145a8 to i32
  store i32 %v3_145a8, i32* %r3.global-to-local, align 4
  %v1_145ac = and i32 %v3_145a8, 8192
  %v2_145ac = icmp eq i32 %v1_145ac, 0
  br i1 %v2_145ac, label %dec_label_pc_14814, label %dec_label_pc_145b4

dec_label_pc_145b4:                               ; preds = %dec_label_pc_145a8
  store i32 %v0_145a8, i32* @r0, align 4
  %v0_145b8 = call i32 @function_125f0()
  store i32 %v0_145b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14814

dec_label_pc_145c0:                               ; preds = %dec_label_pc_14554
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_145c4

dec_label_pc_145c4:                               ; preds = %bb, %bb32, %dec_label_pc_145c0
  %v1_145dc = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_145c0 ]
  %v1_145c4 = add i32 %v0_14558, 1
  %v2_145c4 = inttoptr i32 %v1_145c4 to i8*
  %v3_145c4 = load i8, i8* %v2_145c4, align 1
  %v7_145c8 = icmp eq i8 %v3_145c4, 98
  %v1_145c4.v0_14558 = select i1 %v7_145c8, i32 %v1_145c4, i32 %v0_14558
  store i32 %v1_145c4.v0_14558, i32* %r3.global-to-local, align 4
  %v1_145d4 = add i32 %v1_145c4.v0_14558, 1
  %v2_145d4 = inttoptr i32 %v1_145d4 to i8*
  %v3_145d4 = load i8, i8* %v2_145d4, align 1
  %v4_145d4 = zext i8 %v3_145d4 to i32
  store i32 %v4_145d4, i32* @r3, align 4
  %v7_145d8 = icmp eq i8 %v3_145d4, 43
  br i1 %v7_145d8, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_145c4
  store i32 %v1_145dc, i32* @r3, align 4
  %v2_145e0 = add nuw nsw i32 %v1_145dc, 1
  store i32 %v2_145e0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_145c4, %bb35
  %v2_145e4 = icmp eq i32 %v0_14570, 0
  br i1 %v2_145e4, label %dec_label_pc_145ec, label %dec_label_pc_14614

dec_label_pc_145ec:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_145f0 = call i32 @function_11584()
  store i32 %v0_145f0, i32* %r0.global-to-local, align 4
  store i32 %v0_145f0, i32* @sb, align 4
  %v3_145f4 = icmp eq i32 %v0_145f0, 0
  br i1 %v3_145f4, label %dec_label_pc_14818, label %dec_label_pc_145fc

dec_label_pc_145fc:                               ; preds = %dec_label_pc_145ec
  %v2_14600 = add i32 %v0_145f0, 8
  %v3_14600 = inttoptr i32 %v2_14600 to i32*
  store i32 0, i32* %v3_14600, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_14608 = load i32, i32* @sb, align 4
  %v3_14608 = inttoptr i32 %v2_14608 to i16*
  store i16 8192, i16* %v3_14608, align 2
  %v0_1460c = load i32, i32* @sb, align 4
  %v1_1460c = add i32 %v0_1460c, 56
  store i32 %v1_1460c, i32* @r0, align 4
  %v1_14610 = call i32 @function_148c4(i32 %v1_1460c)
  store i32 %v1_14610, i32* %r0.global-to-local, align 4
  %v0_14614.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14614

dec_label_pc_14614:                               ; preds = %.thread3, %dec_label_pc_145fc
  %v0_1466c = phi i32 [ %v0_14574, %.thread3 ], [ %v0_14614.pre, %dec_label_pc_145fc ]
  %v1_14614 = icmp slt i32 %v0_1466c, 0
  br i1 %v1_14614, label %dec_label_pc_1466c, label %dec_label_pc_1461c

dec_label_pc_1461c:                               ; preds = %dec_label_pc_14614
  %v0_14620 = load i32, i32* @r4, align 4
  %v2_14620 = and i32 %v0_14620, ptrtoint (i32* @global_var_20003.502 to i32)
  %v1_14624 = or i32 %v2_14620, 1
  store i32 %v1_14624, i32* %r2.global-to-local, align 4
  %v0_14628 = load i32, i32* @r6, align 4
  %v1_14628 = add i32 %v0_14628, 1
  %v2_1462c = and i32 %v1_14628, %v1_14624
  store i32 %v2_1462c, i32* %r3.global-to-local, align 4
  %v9_14630 = icmp eq i32 %v2_1462c, %v1_14624
  %v1_14634 = load i32, i32* @sb, align 4
  %v2_14634 = add i32 %v1_14634, 4
  %v3_14634 = inttoptr i32 %v2_14634 to i32*
  store i32 %v0_1466c, i32* %v3_14634, align 4
  br i1 %v9_14630, label %dec_label_pc_1463c, label %dec_label_pc_14594

dec_label_pc_1463c:                               ; preds = %dec_label_pc_1461c
  %v0_1463c = load i32, i32* @r4, align 4
  %v1_1463c = load i32, i32* @r6, align 4
  %v2_1463c = sub i32 -1, %v1_1463c
  %v3_1463c = and i32 %v0_1463c, %v2_1463c
  store i32 %v3_1463c, i32* @r3, align 4
  %v1_14640 = and i32 %v3_1463c, 1024
  %v2_14640 = icmp eq i32 %v1_14640, 0
  br i1 %v2_14640, label %dec_label_pc_14660, label %dec_label_pc_14648

dec_label_pc_14648:                               ; preds = %dec_label_pc_1463c
  %v0_14648 = load i32, i32* @r5, align 4
  store i32 %v0_14648, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_14654 = call i32 @function_10998(i32 %v0_14648, i32 4)
  store i32 %v2_14654, i32* %r0.global-to-local, align 4
  %v2_14658 = icmp eq i32 %v2_14654, 0
  br i1 %v2_14658, label %dec_label_pc_14648.dec_label_pc_14660_crit_edge, label %dec_label_pc_14594

dec_label_pc_14648.dec_label_pc_14660_crit_edge:  ; preds = %dec_label_pc_14648
  %v0_14660.pre = load i32, i32* @r6, align 4
  %v0_14664.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14660

dec_label_pc_14660:                               ; preds = %dec_label_pc_14648.dec_label_pc_14660_crit_edge, %dec_label_pc_1463c
  %v0_14664 = phi i32 [ %v0_14664.pre, %dec_label_pc_14648.dec_label_pc_14660_crit_edge ], [ %v0_1463c, %dec_label_pc_1463c ]
  %v0_14660 = phi i32 [ %v0_14660.pre, %dec_label_pc_14648.dec_label_pc_14660_crit_edge ], [ %v1_1463c, %dec_label_pc_1463c ]
  %v1_14660 = and i32 %v0_14660, 131072
  store i32 %v1_14660, i32* %r3.global-to-local, align 4
  %v2_14664 = or i32 %v1_14660, %v0_14664
  store i32 %v2_14664, i32* @r4, align 4
  br label %dec_label_pc_14690

dec_label_pc_1466c:                               ; preds = %dec_label_pc_14614
  %v7_1466c = icmp eq i32 %v0_1466c, -1
  %v0_14678.pre = load i32, i32* @r4, align 4
  br i1 %v7_1466c, label %dec_label_pc_1466c._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_1466c
  %v2_14670 = or i32 %v0_14678.pre, ptrtoint (i32* @global_var_20000.503 to i32)
  store i32 %v2_14670, i32* @r4, align 4
  br label %dec_label_pc_1466c._crit_edge

dec_label_pc_1466c._crit_edge:                    ; preds = %dec_label_pc_1466c, %bb36
  %v0_14678 = phi i32 [ %v2_14670, %bb36 ], [ %v0_14678.pre, %dec_label_pc_1466c ]
  %v0_14674 = load i32, i32* @r6, align 4
  store i32 %v0_14674, i32* %r0.global-to-local, align 4
  store i32 %v0_14678, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_14680 = call i32 @function_10770(i32 %v0_14674, i32 %v0_14678)
  store i32 %v2_14680, i32* %r0.global-to-local, align 4
  %v1_14684 = icmp slt i32 %v2_14680, 0
  %v1_14688 = load i32, i32* @sb, align 4
  %v2_14688 = add i32 %v1_14688, 4
  %v3_14688 = inttoptr i32 %v2_14688 to i32*
  store i32 %v2_14680, i32* %v3_14688, align 4
  br i1 %v1_14684, label %dec_label_pc_145a8, label %.dec_label_pc_14690_crit_edge

.dec_label_pc_14690_crit_edge:                    ; preds = %dec_label_pc_1466c._crit_edge
  %v0_14694.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14690

dec_label_pc_14690:                               ; preds = %.dec_label_pc_14690_crit_edge, %dec_label_pc_14660
  %v0_146ac = phi i32 [ %v0_14694.pre, %.dec_label_pc_14690_crit_edge ], [ %v2_14664, %dec_label_pc_14660 ]
  %v0_14690 = load i32, i32* @sb, align 4
  %v1_14690 = inttoptr i32 %v0_14690 to i16*
  %v2_14690 = load i16, i16* %v1_14690, align 2
  %v3_14690 = zext i16 %v2_14690 to i32
  %v1_14694 = urem i32 %v0_146ac, 4
  %v1_14698 = and i32 %v0_146ac, 1024
  %v1_1469c = and i32 %v3_14690, 8192
  %v1_146a0 = add nuw nsw i32 %v1_14694, 1
  %v2_146a4 = or i32 %v1_1469c, %v1_14698
  store i32 %v2_146a4, i32* %r3.global-to-local, align 4
  %v1_146a8 = xor i32 %v1_146a0, 3
  store i32 %v1_146a8, i32* %r1.global-to-local, align 4
  %v1_146ac = and i32 %v0_146ac, ptrtoint (i32* @global_var_20000.503 to i32)
  store i32 %v1_146ac, i32* %r2.global-to-local, align 4
  %v2_146ac = icmp eq i32 %v1_146ac, 0
  %v1_146b0 = add i32 %v0_14690, 4
  %v2_146b0 = inttoptr i32 %v1_146b0 to i32*
  %v3_146b0 = load i32, i32* %v2_146b0, align 4
  store i32 %v3_146b0, i32* @r5, align 4
  br i1 %v2_146ac, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_14690
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_14690, %bb37
  %v0_146bc = phi i32 [ 0, %dec_label_pc_14690 ], [ 32768, %bb37 ]
  %v4_146b8 = mul nuw nsw i32 %v1_146a8, 16
  %v5_146b8 = or i32 %v2_146a4, %v4_146b8
  store i32 %v5_146b8, i32* %r3.global-to-local, align 4
  %v2_146bc = or i32 %v0_146bc, %v5_146b8
  store i32 %v2_146bc, i32* %r2.global-to-local, align 4
  %v8_146c0 = icmp eq i32 %v3_146b0, 2147483647
  %v1_146c4 = trunc i32 %v2_146bc to i16
  store i16 %v1_146c4, i16* %v1_14690, align 2
  br i1 %v8_146c0, label %dec_label_pc_146f4, label %dec_label_pc_146cc

dec_label_pc_146cc:                               ; preds = %bb38
  %v0_146cc = call i32 @function_10f8c()
  store i32 %v0_146cc, i32* @r4, align 4
  %v0_146d4 = load i32, i32* @r5, align 4
  store i32 %v0_146d4, i32* @r0, align 4
  %v1_146d8 = inttoptr i32 %v0_146cc to i32*
  %v2_146d8 = load i32, i32* %v1_146d8, align 4
  store i32 %v2_146d8, i32* @r5, align 4
  %v1_146dc = call i32 @function_158cc(i32 %v0_146d4)
  store i32 %v1_146dc, i32* %r0.global-to-local, align 4
  %v2_146e0 = icmp eq i32 %v1_146dc, 0
  br i1 %v2_146e0, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_146cc
  %v1_146e4 = load i32, i32* @sb, align 4
  %v2_146e4 = inttoptr i32 %v1_146e4 to i16*
  %v3_146e4 = load i16, i16* %v2_146e4, align 2
  %v4_146e4 = zext i16 %v3_146e4 to i32
  %v2_146e8 = or i32 %v4_146e4, 256
  store i32 %v2_146e8, i32* %r3.global-to-local, align 4
  %v2_146ec = trunc i32 %v2_146e8 to i16
  store i16 %v2_146ec, i16* %v2_146e4, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_146cc, %bb39
  %v0_146f0 = load i32, i32* @r5, align 4
  %v1_146f0 = load i32, i32* @r4, align 4
  %v2_146f0 = inttoptr i32 %v1_146f0 to i32*
  store i32 %v0_146f0, i32* %v2_146f0, align 4
  br label %dec_label_pc_146f4

dec_label_pc_146f4:                               ; preds = %bb38, %.thread5
  %v0_146f4 = load i32, i32* @sb, align 4
  %v1_146f4 = add i32 %v0_146f4, 8
  %v2_146f4 = inttoptr i32 %v1_146f4 to i32*
  %v3_146f4 = load i32, i32* %v2_146f4, align 4
  store i32 %v3_146f4, i32* %r3.global-to-local, align 4
  %v2_146f8 = icmp eq i32 %v3_146f4, 0
  br i1 %v2_146f8, label %dec_label_pc_14700, label %bb40

dec_label_pc_14700:                               ; preds = %dec_label_pc_146f4
  store i32 4096, i32* @r0, align 4
  %v0_14704 = call i32 @function_11584()
  store i32 %v0_14704, i32* %r0.global-to-local, align 4
  %v2_14708 = icmp eq i32 %v0_14704, 0
  %v1_14718.pre = load i32, i32* @sb, align 4
  br i1 %v2_14708, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14700
  %v2_1470c = inttoptr i32 %v1_14718.pre to i16*
  %v3_1470c = load i16, i16* %v2_1470c, align 2
  %v4_1470c = zext i16 %v3_1470c to i32
  %v2_14710 = add i32 %v0_14704, 4096
  store i32 %v2_14710, i32* %r2.global-to-local, align 4
  %v2_14714 = or i32 %v4_1470c, 16384
  store i32 %v2_14714, i32* %r3.global-to-local, align 4
  %v2_14718 = add i32 %v1_14718.pre, 8
  %v3_14718 = inttoptr i32 %v2_14718 to i32*
  store i32 %v0_14704, i32* %v3_14718, align 4
  %v1_1471c = load i32, i32* %r2.global-to-local, align 4
  %v2_1471c = load i32, i32* @sb, align 4
  %v3_1471c = add i32 %v2_1471c, 12
  %v4_1471c = inttoptr i32 %v3_1471c to i32*
  store i32 %v1_1471c, i32* %v4_1471c, align 4
  %v1_14720 = load i32, i32* %r3.global-to-local, align 4
  %v2_14720 = trunc i32 %v1_14720 to i16
  %v3_14720 = load i32, i32* @sb, align 4
  %v4_14720 = inttoptr i32 %v3_14720 to i16*
  store i16 %v2_14720, i16* %v4_14720, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_14700
  %v2_1471819 = add i32 %v1_14718.pre, 8
  %v3_1471820 = inttoptr i32 %v2_1471819 to i32*
  store i32 0, i32* %v3_1471820, align 4
  %v2_14724 = load i32, i32* @sb, align 4
  %v3_14724 = add i32 %v2_14724, 12
  %v4_14724 = inttoptr i32 %v3_14724 to i32*
  store i32 0, i32* %v4_14724, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_146f4, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_14730 = load i32, i32* @fp, align 4
  %v2_14730 = add i32 %v0_14730, 56
  %v3_14730 = inttoptr i32 %v2_14730 to i32*
  %v4_14730 = load i32, i32* %v3_14730, align 4
  store i32 %v4_14730, i32* %r3.global-to-local, align 4
  %v2_14734 = load i32, i32* @sb, align 4
  %v3_14734 = add i32 %v2_14734, 2
  %v4_14734 = inttoptr i32 %v3_14734 to i8*
  store i8 0, i8* %v4_14734, align 1
  %v0_14738 = load i32, i32* @sb, align 4
  %v1_14738 = inttoptr i32 %v0_14738 to i16*
  %v2_14738 = load i16, i16* %v1_14738, align 2
  %v3_14738 = zext i16 %v2_14738 to i32
  store i32 %v3_14738, i32* %r2.global-to-local, align 4
  %v0_1473c = load i32, i32* %r3.global-to-local, align 4
  %v1_1473c = inttoptr i32 %v0_1473c to i32*
  %v2_1473c = load i32, i32* %v1_1473c, align 4
  store i32 %v2_1473c, i32* %r1.global-to-local, align 4
  %v1_14740 = add i32 %v0_14738, 8
  %v2_14740 = inttoptr i32 %v1_14740 to i32*
  %v3_14740 = load i32, i32* %v2_14740, align 4
  store i32 %v3_14740, i32* %r3.global-to-local, align 4
  %v1_14744 = and i32 %v3_14738, 8192
  %v2_14744 = icmp eq i32 %v1_14744, 0
  %v2_14748 = add i32 %v0_14738, 20
  %v3_14748 = inttoptr i32 %v2_14748 to i32*
  store i32 %v3_14740, i32* %v3_14748, align 4
  %v0_1474c = load i32, i32* %r0.global-to-local, align 4
  %v1_1474c = load i32, i32* @sb, align 4
  %v2_1474c = add i32 %v1_1474c, 44
  %v3_1474c = inttoptr i32 %v2_1474c to i32*
  store i32 %v0_1474c, i32* %v3_1474c, align 4
  %v0_14750 = load i32, i32* %r1.global-to-local, align 4
  %v1_14750 = load i32, i32* @sb, align 4
  %v2_14750 = add i32 %v1_14750, 52
  %v3_14750 = inttoptr i32 %v2_14750 to i32*
  store i32 %v0_14750, i32* %v3_14750, align 4
  %v0_14754 = load i32, i32* %r3.global-to-local, align 4
  %v1_14754 = load i32, i32* @sb, align 4
  %v2_14754 = add i32 %v1_14754, 24
  %v3_14754 = inttoptr i32 %v2_14754 to i32*
  store i32 %v0_14754, i32* %v3_14754, align 4
  %v0_14758 = load i32, i32* %r3.global-to-local, align 4
  %v1_14758 = load i32, i32* @sb, align 4
  %v2_14758 = add i32 %v1_14758, 28
  %v3_14758 = inttoptr i32 %v2_14758 to i32*
  store i32 %v0_14758, i32* %v3_14758, align 4
  %v0_1475c = load i32, i32* %r3.global-to-local, align 4
  %v1_1475c = load i32, i32* @sb, align 4
  %v2_1475c = add i32 %v1_1475c, 16
  %v3_1475c = inttoptr i32 %v2_1475c to i32*
  store i32 %v0_1475c, i32* %v3_1475c, align 4
  br i1 %v2_14744, label %dec_label_pc_14818, label %dec_label_pc_14764

dec_label_pc_14764:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_14768 = load i32, i32* @fp, align 4
  %v2_14768 = add i32 %v0_14768, 36
  %v3_14768 = inttoptr i32 %v2_14768 to i32*
  %v4_14768 = load i32, i32* %v3_14768, align 4
  store i32 %v4_14768, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_14770 = add i32 %v0_14768, 108
  %v3_14770 = inttoptr i32 %v2_14770 to i32*
  %v4_14770 = load i32, i32* %v3_14770, align 4
  store i32 %v4_14770, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14778 = ptrtoint i32* %stack_var_-56 to i32
  %v2_1477c = add i32 %v0_14768, 72
  %v3_1477c = inttoptr i32 %v2_1477c to i32*
  %v4_1477c = load i32, i32* %v3_1477c, align 4
  store i32 %v4_14768, i32* %r1.global-to-local, align 4
  store i32 %v4_14770, i32* %r2.global-to-local, align 4
  store i32 %v2_14778, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1477c)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14798 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14798, i32* %r0.global-to-local, align 4
  %v0_1479c = load i32, i32* @fp, align 4
  %v2_1479c = add i32 %v0_1479c, 16
  %v3_1479c = inttoptr i32 %v2_1479c to i32*
  %v4_1479c = load i32, i32* %v3_1479c, align 4
  call void @__pseudo_branch(i32 %v4_1479c)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_147ac = load i32, i32* @fp, align 4
  %v2_147ac = add i32 %v0_147ac, 96
  %v3_147ac = inttoptr i32 %v2_147ac to i32*
  %v4_147ac = load i32, i32* %v3_147ac, align 4
  store i32 %v4_147ac, i32* %r4.global-to-local, align 4
  %v0_147b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_147b0, i32* %r1.global-to-local, align 4
  store i32 %v4_147ac, i32* %r2.global-to-local, align 4
  store i32 %v2_14568, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1477c)
  store i32 %v4_147ac, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1479c)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_147d4 = load i32, i32* @fp, align 4
  %v2_147d4 = add i32 %v0_147d4, 44
  %v3_147d4 = inttoptr i32 %v2_147d4 to i32*
  %v4_147d4 = load i32, i32* %v3_147d4, align 4
  store i32 %v4_147d4, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_147dc = inttoptr i32 %v4_147d4 to i32*
  %v2_147dc = load i32, i32* %v1_147dc, align 4
  store i32 %v2_147dc, i32* %r2.global-to-local, align 4
  store i32 %v2_14568, i32* %r0.global-to-local, align 4
  %v1_147e4 = load i32, i32* @sb, align 4
  %v2_147e4 = add i32 %v1_147e4, 32
  %v3_147e4 = inttoptr i32 %v2_147e4 to i32*
  store i32 %v2_147dc, i32* %v3_147e4, align 4
  %v0_147e8 = load i32, i32* @fp, align 4
  %v1_147e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_147e8 = add i32 %v1_147e8, %v0_147e8
  %v3_147e8 = inttoptr i32 %v2_147e8 to i32*
  %v4_147e8 = load i32, i32* %v3_147e8, align 4
  store i32 %v4_147e8, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_147f0 = load i32, i32* @sb, align 4
  %v1_147f0 = load i32, i32* @ip, align 4
  %v2_147f0 = inttoptr i32 %v1_147f0 to i32*
  store i32 %v0_147f0, i32* %v2_147f0, align 4
  call void @__pseudo_branch(i32 %v4_147e8)
  store i32 %v2_14778, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_147e8)
  br label %dec_label_pc_14818

dec_label_pc_14814:                               ; preds = %dec_label_pc_145a8, %dec_label_pc_14594, %dec_label_pc_145b4
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_14818

dec_label_pc_14818:                               ; preds = %bb40, %dec_label_pc_145ec, %dec_label_pc_14764, %dec_label_pc_14814
  %v0_14818 = load i32, i32* @sb, align 4
  store i32 %v0_14818, i32* %r0.global-to-local, align 4
  %v2_14820 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14820, i32* %r4.global-to-local, align 4
  store i32 %v6_14554, i32* @r5, align 4
  store i32 %v9_14554, i32* @r6, align 4
  store i32 %v18_14554, i32* @sb, align 4
  store i32 %v24_14554, i32* @fp, align 4
  ret i32 %v0_14818

; uselistorder directives
  uselistorder i32 %v1_14718.pre, { 2, 1, 0 }
  uselistorder i32 %v0_146ac, { 1, 2, 0 }
  uselistorder i32 %v0_14678, { 1, 0 }
  uselistorder i32 %v1_1463c, { 1, 0 }
  uselistorder i32 %v0_1463c, { 1, 0 }
  uselistorder i32 %v1_14624, { 1, 0, 2 }
  uselistorder i32 %v1_145dc, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 6, 5, 7, 8, 9, 10, 11, 1, 13, 12, 15, 14, 0, 16, 17, 18 }
  uselistorder i32 16384, { 50, 0, 51, 38, 68, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 18, 74, 17, 62, 3, 52, 36, 53, 4, 54, 37, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 35, 63, 11, 64, 12, 65, 13, 66, 14, 67, 44, 75, 15, 76, 16, 77, 78, 46, 79, 47, 80, 21, 81, 45, 82, 19, 83, 20, 84, 22, 85, 23, 86, 25, 87, 24, 88, 27, 89, 26, 90, 28, 91, 29, 92, 30, 93, 31, 94, 32, 95, 48, 96, 33, 1, 49, 97, 34, 2 }
  uselistorder i32 4096, { 8, 9, 10, 1, 0, 2, 17, 3, 11, 4, 12, 13, 6, 14, 5, 7, 15, 16 }
  uselistorder i32 32768, { 2, 5, 3, 0, 4, 1 }
  uselistorder i32 (i32, i32)* @function_10770, { 2, 0, 8, 7, 6, 5, 4, 3, 1 }
  uselistorder i32 (i32, i32)* @function_10998, { 5, 0, 14, 11, 10, 13, 12, 9, 8, 7, 6, 2, 1, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @function_11584, { 8, 7, 43, 5, 4, 3, 0, 1, 2, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_125f0, { 7, 10, 5, 4, 3, 2, 0, 1, 9, 8, 6 }
  uselistorder i32* @fp, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 95, 82, 83, 84, 85, 86, 88, 87, 89, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 78, 79, 81, 90, 93, 91, 92, 94, 55, 56, 57, 58 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 132, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 123, 124, 126, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 53, 54, 1, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 127, 128, 129, 130, 131, 81, 82, 83, 84 }
  uselistorder label %dec_label_pc_14818, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_14814, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_146f4, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_1466c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_14614, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_145c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14594, { 1, 2, 0 }
}

define i32 @function_1482c(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1482c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_1482c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1482c, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_1482c
  %v1_14834 = load i32, i32* %r2.global-to-local, align 4
  %v2_14834 = load i32, i32* %r3.global-to-local, align 4
  %v3_14834 = and i32 %v2_14834, %v1_14834
  %v2_14838 = trunc i32 %v3_14834 to i16
  %v4_14838 = inttoptr i32 %v3_14834 to i16*
  store i16 %v2_14838, i16* %v4_14838, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_1482c, %bb
  %v0_14860 = call i32 @function_10f8c()
  store i32 %v0_14860, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_1486c = inttoptr i32 %v0_14860 to i32*
  %v2_1486c = load i32, i32* %v1_1486c, align 4
  store i32 %v2_1486c, i32* @r6, align 4
  %v1_14870 = call i32 @function_158cc(i32 0)
  %v2_14878 = icmp eq i32 %v1_14870, 0
  store i32 124088, i32* @r4, align 4
  br i1 %v2_14878, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_14884 = load i16, i16* inttoptr (i32 124392 to i16*), align 8
  %v7_14884 = zext i16 %v5_14884 to i32
  %v2_14888 = xor i32 %v7_14884, 256
  store i32 %v2_14888, i32* @r3, align 4
  %v2_1488c = trunc i32 %v2_14888 to i16
  store i16 %v2_1488c, i16* inttoptr (i32 124392 to i16*), align 8
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_14894 = call i32 @function_158cc(i32 1)
  %v2_14898 = icmp eq i32 %v1_14894, 0
  br i1 %v2_14898, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_148a0 = load i32, i32* @r4, align 4
  %v3_148a0 = add i32 %v1_148a0, 304
  store i32 %v3_148a0, i32* %r2.global-to-local, align 4
  %v2_148a4 = add i32 %v1_148a0, 384
  %v3_148a4 = inttoptr i32 %v2_148a4 to i16*
  %v4_148a4 = load i16, i16* %v3_148a4, align 2
  %v5_148a4 = zext i16 %v4_148a4 to i32
  %v2_148a8 = xor i32 %v5_148a4, 256
  store i32 %v2_148a8, i32* %r3.global-to-local, align 4
  %v2_148ac = trunc i32 %v2_148a8 to i16
  store i16 %v2_148ac, i16* %v3_148a4, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_148b0 = load i32, i32* @r6, align 4
  %v1_148b0 = load i32, i32* @r5, align 4
  %v2_148b0 = inttoptr i32 %v1_148b0 to i32*
  store i32 %v0_148b0, i32* %v2_148b0, align 4
  ret i32 %v1_14894

; uselistorder directives
  uselistorder i32 %v3_14834, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_158cc, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_148c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_148c4:
  store i32 124088, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_16490.518 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_148e0 = call i32 @function_11090()
  ret i32 %v0_148e0
}

define i32 @function_149cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_149cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_149cc = load i32, i32* @r4, align 4
  store i32 %v3_149cc, i32* %stack_var_-8, align 4
  %v1_149d0 = add i32 %arg1, 8
  %v2_149d0 = inttoptr i32 %v1_149d0 to i32*
  %v3_149d0 = load i32, i32* %v2_149d0, align 4
  %v1_149d4 = add i32 %arg1, 16
  %v2_149d4 = inttoptr i32 %v1_149d4 to i32*
  %v3_149d4 = load i32, i32* %v2_149d4, align 4
  %v9_149d8 = icmp eq i32 %v3_149d4, %v3_149d0
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_149d8, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_149cc
  store i32 %v3_149d0, i32* %v2_149d4, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_149cc, %bb
  %v1_149e4 = xor i1 %v9_149d8, true
  call void @__pseudo_cond_branch(i1 %v1_149e4, i32 ptrtoint (i32* @global_var_15cb8.519 to i32))
  %v0_149e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_149e8 = add i32 %v0_149e8, 8
  %v2_149e8 = inttoptr i32 %v1_149e8 to i32*
  %v3_149e8 = load i32, i32* %v2_149e8, align 4
  %v1_149ec = add i32 %v0_149e8, 16
  %v2_149ec = inttoptr i32 %v1_149ec to i32*
  %v3_149ec = load i32, i32* %v2_149ec, align 4
  %v2_149f0 = sub i32 %v3_149ec, %v3_149e8
  %v2_149f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_149f4, i32* @r4, align 4
  ret i32 %v2_149f0

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_149fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_149fc:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_149fc = load i32, i32* @r4, align 4
  store i32 %v3_149fc, i32* %stack_var_-16, align 4
  %v6_149fc = load i32, i32* @r5, align 4
  %v12_149fc = load i32, i32* @lr, align 4
  %v1_14a00 = add i32 %arg1, 52
  %v2_14a00 = inttoptr i32 %v1_14a00 to i32*
  %v3_14a00 = load i32, i32* %v2_14a00, align 4
  %v2_14a08 = icmp eq i32 %v3_14a00, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 124088, i32* %r6.global-to-local, align 4
  br i1 %v2_14a08, label %dec_label_pc_14a40, label %dec_label_pc_14a1c

dec_label_pc_14a1c:                               ; preds = %dec_label_pc_149fc
  %v1_14a1c = add i32 %arg1, 16
  %v2_14a1c = inttoptr i32 %v1_14a1c to i32*
  %v3_14a1c = load i32, i32* %v2_14a1c, align 4
  %v1_14a20 = add i32 %arg1, 24
  %v2_14a20 = inttoptr i32 %v1_14a20 to i32*
  %v3_14a20 = load i32, i32* %v2_14a20, align 4
  %v3_14a24 = icmp ult i32 %v3_14a1c, %v3_14a20
  br i1 %v3_14a24, label %.thread, label %dec_label_pc_14a34

.thread:                                          ; preds = %dec_label_pc_14a1c
  %v2_14a28 = inttoptr i32 %v3_14a1c to i8*
  %v3_14a28 = load i8, i8* %v2_14a28, align 1
  %v4_14a28 = zext i8 %v3_14a28 to i32
  store i32 %v4_14a28, i32* %r4.global-to-local, align 4
  %v6_14a28 = add i32 %v3_14a1c, 1
  store i32 %v6_14a28, i32* %v2_14a1c, align 4
  br label %dec_label_pc_14ab4

dec_label_pc_14a34:                               ; preds = %dec_label_pc_14a1c
  %v1_14a34 = inttoptr i32 %arg1 to i16*
  %v2_14a34 = call i32 @function_14f28(i16* %v1_14a34)
  store i32 %v2_14a34, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ab4

dec_label_pc_14a40:                               ; preds = %dec_label_pc_149fc
  %v1_14a44 = add i32 %arg1, 56
  store i32 %v1_14a44, i32* @r4, align 4
  %v4_14a58 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_14a58)
  %v0_14a6c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a6c = add i32 %v0_14a6c, 16
  %v3_14a6c = inttoptr i32 %v2_14a6c to i32*
  %v4_14a6c = load i32, i32* %v3_14a6c, align 4
  store i32 84600, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14a6c)
  %v0_14a78 = load i32, i32* @r5, align 4
  %v1_14a78 = add i32 %v0_14a78, 16
  %v2_14a78 = inttoptr i32 %v1_14a78 to i32*
  %v3_14a78 = load i32, i32* %v2_14a78, align 4
  %v1_14a7c = add i32 %v0_14a78, 24
  %v2_14a7c = inttoptr i32 %v1_14a7c to i32*
  %v3_14a7c = load i32, i32* %v2_14a7c, align 4
  %v3_14a80 = icmp ult i32 %v3_14a78, %v3_14a7c
  br i1 %v3_14a80, label %.thread2, label %dec_label_pc_14a90

.thread2:                                         ; preds = %dec_label_pc_14a40
  %v2_14a84 = inttoptr i32 %v3_14a78 to i8*
  %v3_14a84 = load i8, i8* %v2_14a84, align 1
  %v4_14a84 = zext i8 %v3_14a84 to i32
  store i32 %v4_14a84, i32* %r4.global-to-local, align 4
  %v6_14a84 = add i32 %v3_14a78, 1
  store i32 %v6_14a84, i32* %v2_14a78, align 4
  br label %dec_label_pc_14a9c

dec_label_pc_14a90:                               ; preds = %dec_label_pc_14a40
  %v1_14a94 = inttoptr i32 %v0_14a78 to i16*
  %v2_14a94 = call i32 @function_14f28(i16* %v1_14a94)
  store i32 %v2_14a94, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a9c

dec_label_pc_14a9c:                               ; preds = %.thread2, %dec_label_pc_14a90
  %v0_14aa8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14aa8 = add i32 %v0_14aa8, 24
  %v3_14aa8 = inttoptr i32 %v2_14aa8 to i32*
  %v4_14aa8 = load i32, i32* %v3_14aa8, align 4
  store i32 %v4_14aa8, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14aa8)
  br label %dec_label_pc_14ab4

dec_label_pc_14ab4:                               ; preds = %.thread, %dec_label_pc_14a34, %dec_label_pc_14a9c
  %v0_14ab4 = load i32, i32* %r4.global-to-local, align 4
  %v2_14abc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14abc, i32* @r4, align 4
  store i32 %v6_149fc, i32* @r5, align 4
  store i32 %v12_149fc, i32* @lr, align 4
  ret i32 %v0_14ab4

; uselistorder directives
  uselistorder i32 %v3_14a78, { 1, 0, 2 }
  uselistorder i32 %v3_14a1c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 5, 0, 4, 3, 1, 2 }
  uselistorder label %dec_label_pc_14ab4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14a9c, { 1, 0 }
}

define i32 @function_14ac8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ac8:
  %v0_14ac8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14ac8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14ac8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14ac8, %bb
  %v10_14ad4 = phi i32 [ %arg1, %dec_label_pc_14ac8 ], [ 0, %bb ]
  ret i32 %v10_14ad4

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14ad8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14ad8:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_14ad8 = load i32, i32* @r4, align 4
  store i32 %v3_14ad8, i32* %stack_var_-28, align 4
  %v6_14ad8 = load i32, i32* @r5, align 4
  %v9_14ad8 = load i32, i32* @r6, align 4
  %v12_14ad8 = load i32, i32* @r7, align 4
  %v21_14ad8 = load i32, i32* @lr, align 4
  %v1_14adc = add i32 %arg3, 52
  %v2_14adc = inttoptr i32 %v1_14adc to i32*
  %v3_14adc = load i32, i32* %v2_14adc, align 4
  %v1_14ae4 = sub i32 1, %v3_14adc
  %v2_14ae4 = icmp ult i32 %v3_14adc, 2
  br i1 %v2_14ae4, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_14ad8
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14ad8, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14ae4, %dec_label_pc_14ad8 ]
  %v0_14aec = phi i32 [ 0, %bb ], [ %v1_14ae4, %dec_label_pc_14ad8 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_14aec = icmp eq i32 %v0_14aec, 0
  store i32 124088, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_14aec, label %dec_label_pc_14b40, label %dec_label_pc_14b08

dec_label_pc_14b08:                               ; preds = %bb16
  %v1_14b0c = add i32 %arg3, 56
  store i32 %v1_14b0c, i32* @r4, align 4
  %v4_14b20 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_14b20)
  %v0_14b34 = load i32, i32* @r5, align 4
  %v2_14b34 = add i32 %v0_14b34, 16
  %v3_14b34 = inttoptr i32 %v2_14b34 to i32*
  %v4_14b34 = load i32, i32* %v3_14b34, align 4
  store i32 %v4_14b34, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_14b40.529 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14b34)
  %v0_14b40.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_14b44.pre = load i32, i32* @r7, align 4
  %v0_14b48.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14b40

dec_label_pc_14b40:                               ; preds = %bb16, %dec_label_pc_14b08
  %v0_14b48 = phi i32 [ %arg3, %bb16 ], [ %v0_14b48.pre, %dec_label_pc_14b08 ]
  %v0_14b44 = phi i32 [ %arg2, %bb16 ], [ %v0_14b44.pre, %dec_label_pc_14b08 ]
  %v0_14b40 = phi i32 [ %arg1, %bb16 ], [ %v0_14b40.pre, %dec_label_pc_14b08 ]
  %v3_14b4c = inttoptr i32 %v0_14b40 to i8*
  %v4_14b4c = call i32 @function_15054(i8* %v3_14b4c, i32 %v0_14b44, i32 %v0_14b48)
  %v0_14b50 = load i32, i32* %sl.global-to-local, align 4
  %v2_14b50 = icmp eq i32 %v0_14b50, 0
  store i32 %v4_14b4c, i32* %r4.global-to-local, align 4
  br i1 %v2_14b50, label %dec_label_pc_14b40..thread3_crit_edge, label %bb17

dec_label_pc_14b40..thread3_crit_edge:            ; preds = %dec_label_pc_14b40
  %v0_14b6c.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_14b40
  %v1_14b64 = load i32, i32* @r5, align 4
  %v3_14b64 = add i32 %v1_14b64, 24
  %v4_14b64 = inttoptr i32 %v3_14b64 to i32*
  %v5_14b64 = load i32, i32* %v4_14b64, align 4
  store i32 %v5_14b64, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14b40..thread3_crit_edge, %bb17
  %v0_14b6c = phi i32 [ %v0_14b6c.pre, %dec_label_pc_14b40..thread3_crit_edge ], [ %v5_14b64, %bb17 ]
  %v2_14b6c = xor i1 %v2_14b50, true
  call void @__pseudo_cond_branch(i1 %v2_14b6c, i32 %v0_14b6c)
  %v0_14b70 = load i32, i32* %r4.global-to-local, align 4
  %v2_14b78 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_14b78, i32* %r4.global-to-local, align 4
  store i32 %v6_14ad8, i32* @r5, align 4
  store i32 %v9_14ad8, i32* @r6, align 4
  store i32 %v12_14ad8, i32* @r7, align 4
  store i32 %v21_14ad8, i32* @lr, align 4
  ret i32 %v0_14b70

; uselistorder directives
  uselistorder i32 %v3_14adc, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 9, 10, 11, 12, 13, 3, 14, 7, 8, 4, 16, 17, 1, 18, 0, 19, 20, 5, 6, 15, 2 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14b40, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_14b84(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b84:
  %v0_14b84 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14b84, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14b84
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14b84, %bb
  %v10_14b90 = phi i32 [ %arg1, %dec_label_pc_14b84 ], [ 0, %bb ]
  ret i32 %v10_14b90

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14b94() local_unnamed_addr {
dec_label_pc_14b94:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14b94 = load i32, i32* @r4, align 4
  store i32 %v3_14b94, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r6.global-to-local, align 4
  %v4_14ba4 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_14ba4, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_14bac = load i32, i32* inttoptr (i32 124196 to i32*), align 4
  store i32 %v4_14bac, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_14bb8 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_14bb8, i32* %r7.global-to-local, align 4
  %v2_14bc4 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_14bb8)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14bd8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14bd8 = add i32 %v0_14bd8, 16
  %v3_14bd8 = inttoptr i32 %v2_14bd8 to i32*
  %v4_14bd8 = load i32, i32* %v3_14bd8, align 4
  store i32 %v4_14bd8, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14bd8)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_14be8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14be8 = add i32 %v0_14be8, 12
  %v3_14be8 = inttoptr i32 %v2_14be8 to i32*
  %v4_14be8 = load i32, i32* %v3_14be8, align 4
  store i32 %v4_14be8, i32* %r3.global-to-local, align 4
  %v1_14bec = inttoptr i32 %v4_14be8 to i32*
  %v2_14bec = load i32, i32* %v1_14bec, align 4
  store i32 %v2_14bec, i32* %r3.global-to-local, align 4
  %v7_14bf0 = icmp eq i32 %v2_14bec, 1
  br i1 %v7_14bf0, label %dec_label_pc_14bf8, label %dec_label_pc_14cb8

dec_label_pc_14bf8:                               ; preds = %dec_label_pc_14b94
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_14bfc = add i32 %v0_14be8, 48
  %v3_14bfc = inttoptr i32 %v2_14bfc to i32*
  %v4_14bfc = load i32, i32* %v3_14bfc, align 4
  store i32 %v4_14bfc, i32* %r3.global-to-local, align 4
  %v1_14c00 = inttoptr i32 %v4_14bfc to i32*
  %v2_14c00 = load i32, i32* %v1_14c00, align 4
  store i32 %v2_14c00, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_14c00, 1
  br i1 %tmp30, label %dec_label_pc_14cb8, label %dec_label_pc_14c0c

dec_label_pc_14c0c:                               ; preds = %dec_label_pc_14bf8
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14c10 = add i32 %v0_14be8, 96
  %v3_14c10 = inttoptr i32 %v2_14c10 to i32*
  %v4_14c10 = load i32, i32* %v3_14c10, align 4
  store i32 %v4_14c10, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14bb8)
  call void @__pseudo_branch(i32 %v4_14bd8)
  %v0_14c38 = load i32, i32* %r6.global-to-local, align 4
  %v2_14c38 = add i32 %v0_14c38, 44
  %v3_14c38 = inttoptr i32 %v2_14c38 to i32*
  %v4_14c38 = load i32, i32* %v3_14c38, align 4
  store i32 %v4_14c38, i32* %r3.global-to-local, align 4
  %v1_14c3c = inttoptr i32 %v4_14c38 to i32*
  %v2_14c3c = load i32, i32* %v1_14c3c, align 4
  store i32 %v2_14c3c, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_14c8811 = icmp eq i32 %v2_14c3c, 0
  br i1 %v2_14c8811, label %dec_label_pc_14c94, label %dec_label_pc_14c4c

dec_label_pc_14c4c:                               ; preds = %dec_label_pc_14c0c, %dec_label_pc_14c84
  %v0_14c702 = phi i32 [ %v0_14c84, %dec_label_pc_14c84 ], [ %v2_14c3c, %dec_label_pc_14c0c ]
  %v1_14c4c = inttoptr i32 %v0_14c702 to i16*
  %v2_14c4c = load i16, i16* %v1_14c4c, align 2
  %v3_14c4c = zext i16 %v2_14c4c to i32
  store i32 %v3_14c4c, i32* %r3.global-to-local, align 4
  %v2_14c50 = and i32 %v3_14c4c, 32816
  %v7_14c54 = icmp eq i32 %v2_14c50, 48
  %v1_14c58 = add i32 %v0_14c702, 32
  %v2_14c58 = inttoptr i32 %v1_14c58 to i32*
  %v3_14c58 = load i32, i32* %v2_14c58, align 4
  store i32 %v3_14c58, i32* %r5.global-to-local, align 4
  br i1 %v7_14c54, label %dec_label_pc_14c64, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_14c4c
  store i32 %v0_14c702, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14c84

dec_label_pc_14c64:                               ; preds = %dec_label_pc_14c4c
  %v0_14c64 = load i32, i32* %r7.global-to-local, align 4
  %v2_14c64 = icmp eq i32 %v0_14c64, 0
  br i1 %v2_14c64, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14c64
  %v1_14c68 = load i32, i32* %r6.global-to-local, align 4
  %v2_14c68 = load i32, i32* %r8.global-to-local, align 4
  %v3_14c68 = add i32 %v2_14c68, %v1_14c68
  %v4_14c68 = inttoptr i32 %v3_14c68 to i32*
  %v5_14c68 = load i32, i32* %v4_14c68, align 4
  store i32 %v5_14c68, i32* %r3.global-to-local, align 4
  %v3_14c6c = inttoptr i32 %v5_14c68 to i32*
  store i32 %v3_14c58, i32* %v3_14c6c, align 4
  %v0_14c70 = load i32, i32* %r4.global-to-local, align 4
  %v1_14c70 = inttoptr i32 %v0_14c70 to i16*
  %v2_14c70 = load i16, i16* %v1_14c70, align 2
  %v3_14c70 = zext i16 %v2_14c70 to i32
  store i32 %v3_14c70, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_14c64
  %v2_14c708 = load i16, i16* %v1_14c4c, align 2
  %v3_14c709 = zext i16 %v2_14c708 to i32
  store i32 %v3_14c709, i32* %r3.global-to-local, align 4
  %v3_14c74 = add i32 %v0_14c64, 32
  %v4_14c74 = inttoptr i32 %v3_14c74 to i32*
  store i32 %v3_14c58, i32* %v4_14c74, align 4
  %v0_14c78.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_14c78 = phi i32 [ %v3_14c70, %.thread ], [ %v0_14c78.pre, %bb ]
  %v1_14c78 = and i32 %v0_14c78, 8192
  %v2_14c78 = icmp eq i32 %v1_14c78, 0
  br i1 %v2_14c78, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14c80 = xor i1 %v2_14c78, true
  call void @__pseudo_cond_branch(i1 %v1_14c80, i32 ptrtoint (i32* @global_var_125f0.21 to i32))
  %v0_14c84.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14c84

dec_label_pc_14c84:                               ; preds = %.thread21, %bb33
  %v0_14c84 = phi i32 [ %v0_14c84.pre, %bb33 ], [ %v3_14c58, %.thread21 ]
  store i32 %v0_14c84, i32* %r4.global-to-local, align 4
  %v2_14c88 = icmp eq i32 %v0_14c84, 0
  br i1 %v2_14c88, label %dec_label_pc_14c88.dec_label_pc_14c94_crit_edge, label %dec_label_pc_14c4c

dec_label_pc_14c88.dec_label_pc_14c94_crit_edge:  ; preds = %dec_label_pc_14c84
  %v0_14ca0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14c94

dec_label_pc_14c94:                               ; preds = %dec_label_pc_14c88.dec_label_pc_14c94_crit_edge, %dec_label_pc_14c0c
  %v0_14ca0 = phi i32 [ %v0_14ca0.pre, %dec_label_pc_14c88.dec_label_pc_14c94_crit_edge ], [ %v0_14c38, %dec_label_pc_14c0c ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14ca0 = add i32 %v0_14ca0, 24
  %v3_14ca0 = inttoptr i32 %v2_14ca0 to i32*
  %v4_14ca0 = load i32, i32* %v3_14ca0, align 4
  call void @__pseudo_branch(i32 %v4_14ca0)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_14cb0 = load i32, i32* %r6.global-to-local, align 4
  %v2_14cb0 = add i32 %v0_14cb0, 48
  %v3_14cb0 = inttoptr i32 %v2_14cb0 to i32*
  %v4_14cb0 = load i32, i32* %v3_14cb0, align 4
  store i32 %v4_14cb0, i32* %r3.global-to-local, align 4
  %v0_14cb4 = load i32, i32* %r4.global-to-local, align 4
  %v2_14cb4 = inttoptr i32 %v4_14cb0 to i32*
  store i32 %v0_14cb4, i32* %v2_14cb4, align 4
  %v0_14cbc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14cb8

dec_label_pc_14cb8:                               ; preds = %dec_label_pc_14b94, %dec_label_pc_14bf8, %dec_label_pc_14c94
  %v0_14cbc = phi i32 [ %v0_14be8, %dec_label_pc_14b94 ], [ %v0_14be8, %dec_label_pc_14bf8 ], [ %v0_14cbc.pre, %dec_label_pc_14c94 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14cbc = add i32 %v0_14cbc, 12
  %v3_14cbc = inttoptr i32 %v2_14cbc to i32*
  %v4_14cbc = load i32, i32* %v3_14cbc, align 4
  %v1_14cc0 = inttoptr i32 %v4_14cbc to i32*
  %v2_14cc0 = load i32, i32* %v1_14cc0, align 4
  %v1_14cc4 = add i32 %v2_14cc0, -1
  store i32 %v1_14cc4, i32* %v1_14cc0, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_14cd8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14cd8 = add i32 %v0_14cd8, 24
  %v3_14cd8 = inttoptr i32 %v2_14cd8 to i32*
  %v4_14cd8 = load i32, i32* %v3_14cd8, align 4
  call void @__pseudo_branch(i32 %v4_14cd8)
  %v2_14ce8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14ce8, i32* %r4.global-to-local, align 4
  ret i32 %v2_14bc4

; uselistorder directives
  uselistorder i32 %v0_14c84, { 2, 1, 0 }
  uselistorder i32 %v4_14bb8, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* inttoptr (i32 124124 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_14cb8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14c84, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_14c4c, { 1, 0 }
}

define i32 @function_14cf4(i16* %arg1) local_unnamed_addr {
dec_label_pc_14cf4:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_14cf4 = load i1, i1* @cpsr_z, align 1
  %v2_14cf4 = load i32, i32* @r4, align 4
  br i1 %v0_14cf4, label %bb, label %dec_label_pc_14cf4..thread9_crit_edge

dec_label_pc_14cf4..thread9_crit_edge:            ; preds = %dec_label_pc_14cf4
  %v0_14d30.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread9

bb:                                               ; preds = %dec_label_pc_14cf4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14cf4..thread9_crit_edge, %bb
  %v0_14ed0 = phi i32 [ %v0_14d30.pre, %dec_label_pc_14cf4..thread9_crit_edge ], [ 0, %bb ]
  store i32 %v2_14cf4, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %sb.global-to-local, align 4
  %v4_14d2c = load i32, i32* inttoptr (i32 124132 to i32*), align 4
  store i32 %v4_14d2c, i32* %r3.global-to-local, align 4
  %v9_14d30 = icmp eq i32 %v0_14ed0, %v4_14d2c
  store i32 %v0_14ed0, i32* %fp.global-to-local, align 4
  br i1 %v9_14d30, label %bb50, label %dec_label_pc_14d48

bb50:                                             ; preds = %.thread9
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_14d58

dec_label_pc_14d48:                               ; preds = %.thread9
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_14d4c = icmp eq i32 %v0_14ed0, 0
  br i1 %v2_14d4c, label %dec_label_pc_14d58, label %dec_label_pc_14ec0

dec_label_pc_14d58:                               ; preds = %bb50, %dec_label_pc_14d48
  %stack_var_-60.1.in = phi i32 [ 0, %bb50 ], [ 256, %dec_label_pc_14d48 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_14d6c = load i32, i32* inttoptr (i32 124196 to i32*), align 4
  store i32 %v4_14d6c, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14d74 = ptrtoint i32* %stack_var_-56 to i32
  %v4_14d78 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_14d74, i32* %r0.global-to-local, align 4
  store i32 %v4_14d6c, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14d78)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14d98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14d98, i32* %r0.global-to-local, align 4
  %v0_14d9c = load i32, i32* %sb.global-to-local, align 4
  %v2_14d9c = add i32 %v0_14d9c, 16
  %v3_14d9c = inttoptr i32 %v2_14d9c to i32*
  %v4_14d9c = load i32, i32* %v3_14d9c, align 4
  call void @__pseudo_branch(i32 %v4_14d9c)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14dac = add i32 %v0_14d9c, 12
  %v3_14dac = inttoptr i32 %v2_14dac to i32*
  %v4_14dac = load i32, i32* %v3_14dac, align 4
  store i32 %v4_14dac, i32* %r2.global-to-local, align 4
  %v1_14db0 = inttoptr i32 %v4_14dac to i32*
  %v2_14db0 = load i32, i32* %v1_14db0, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_14db8 = add i32 %v2_14db0, 1
  store i32 %v1_14db8, i32* %r3.global-to-local, align 4
  %v2_14dbc = add i32 %v0_14d9c, 24
  %v3_14dbc = inttoptr i32 %v2_14dbc to i32*
  %v4_14dbc = load i32, i32* %v3_14dbc, align 4
  store i32 %v1_14db8, i32* %v1_14db0, align 4
  store i32 %v2_14d74, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14dbc)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14dd8 = load i32, i32* %sb.global-to-local, align 4
  %v2_14dd8 = add i32 %v0_14dd8, 96
  %v3_14dd8 = inttoptr i32 %v2_14dd8 to i32*
  %v4_14dd8 = load i32, i32* %v3_14dd8, align 4
  store i32 %v4_14dd8, i32* @r4, align 4
  store i32 %v4_14dd8, i32* %r2.global-to-local, align 4
  store i32 %v2_14d74, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14d78)
  %v0_14df0 = load i32, i32* @r4, align 4
  store i32 %v0_14df0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14d9c)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14e00 = load i32, i32* %sb.global-to-local, align 4
  %v2_14e00 = add i32 %v0_14e00, 44
  %v3_14e00 = inttoptr i32 %v2_14e00 to i32*
  %v4_14e00 = load i32, i32* %v3_14e00, align 4
  store i32 %v4_14e00, i32* %r3.global-to-local, align 4
  store i32 %v2_14d74, i32* %r0.global-to-local, align 4
  %v1_14e0c = inttoptr i32 %v4_14e00 to i32*
  %v2_14e0c = load i32, i32* %v1_14e0c, align 4
  store i32 %v2_14e0c, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_14dbc)
  %v0_14e18 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_14e18, i32* @r6, align 4
  %v2_14e1c = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14e1c, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_14eb0.pr = load i32, i32* @r7, align 4
  %v2_14eb029 = icmp eq i32 %v0_14eb0.pr, 0
  br i1 %v2_14eb029, label %dec_label_pc_14eb8, label %dec_label_pc_14e24

dec_label_pc_14e24:                               ; preds = %dec_label_pc_14d58, %dec_label_pc_14eac
  %v0_14e30 = phi i32 [ %v3_14eac, %dec_label_pc_14eac ], [ %v0_14eb0.pr, %dec_label_pc_14d58 ]
  %v1_14e24 = inttoptr i32 %v0_14e30 to i16*
  %v2_14e24 = load i16, i16* %v1_14e24, align 2
  %v3_14e24 = zext i16 %v2_14e24 to i32
  store i32 %v3_14e24, i32* %r3.global-to-local, align 4
  %v1_14e28 = and i32 %v3_14e24, 64
  %v2_14e28 = icmp eq i32 %v1_14e28, 0
  br i1 %v2_14e28, label %dec_label_pc_14eac, label %dec_label_pc_14e30

dec_label_pc_14e30:                               ; preds = %dec_label_pc_14e24
  %v1_14e30 = add i32 %v0_14e30, 56
  store i32 %v1_14e30, i32* @r4, align 4
  store i32 %v1_14e30, i32* %r2.global-to-local, align 4
  store i32 %v2_14d74, i32* %r0.global-to-local, align 4
  %v0_14e40 = load i32, i32* %sb.global-to-local, align 4
  %v1_14e40 = load i32, i32* %fp.global-to-local, align 4
  %v2_14e40 = add i32 %v1_14e40, %v0_14e40
  %v3_14e40 = inttoptr i32 %v2_14e40 to i32*
  %v4_14e40 = load i32, i32* %v3_14e40, align 4
  call void @__pseudo_branch(i32 %v4_14e40)
  %v0_14e4c = load i32, i32* @r4, align 4
  store i32 %v0_14e4c, i32* %r0.global-to-local, align 4
  %v0_14e50 = load i32, i32* %sb.global-to-local, align 4
  %v1_14e50 = load i32, i32* @r8, align 4
  %v2_14e50 = add i32 %v1_14e50, %v0_14e50
  %v3_14e50 = inttoptr i32 %v2_14e50 to i32*
  %v4_14e50 = load i32, i32* %v3_14e50, align 4
  call void @__pseudo_branch(i32 %v4_14e50)
  %v0_14e5c = load i32, i32* @r7, align 4
  %v1_14e5c = inttoptr i32 %v0_14e5c to i16*
  %v2_14e5c = load i16, i16* %v1_14e5c, align 2
  %v3_14e5c = zext i16 %v2_14e5c to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_14e64 = or i32 %v3_14e5c, %stack_var_-60.1.in
  %v1_14e68 = xor i32 %v2_14e64, 320
  store i32 %v1_14e68, i32* %r3.global-to-local, align 4
  %v1_14e6c = and i32 %v1_14e68, 832
  %v2_14e6c = icmp eq i32 %v1_14e6c, 0
  br i1 %v2_14e6c, label %dec_label_pc_14e74, label %bb51

dec_label_pc_14e74:                               ; preds = %dec_label_pc_14e30
  store i32 %v0_14e5c, i32* %r0.global-to-local, align 4
  %v1_14e78 = call i32 @function_149cc(i32 %v0_14e5c)
  store i32 %v1_14e78, i32* %r0.global-to-local, align 4
  %v2_14e7c = icmp eq i32 %v1_14e78, 0
  br i1 %v2_14e7c, label %.thread17, label %.thread18

.thread17:                                        ; preds = %dec_label_pc_14e74
  %v1_14e80 = load i32, i32* @r7, align 4
  %v2_14e80 = inttoptr i32 %v1_14e80 to i16*
  %v3_14e80 = load i16, i16* %v2_14e80, align 2
  %v4_14e80 = zext i16 %v3_14e80 to i32
  store i32 %v4_14e80, i32* %r3.global-to-local, align 4
  %v2_14e84 = add i32 %v1_14e80, 8
  %v3_14e84 = inttoptr i32 %v2_14e84 to i32*
  %v4_14e84 = load i32, i32* %v3_14e84, align 4
  store i32 %v4_14e84, i32* %r2.global-to-local, align 4
  %v2_14e88 = and i32 %v4_14e80, 65471
  store i32 %v2_14e88, i32* %r3.global-to-local, align 4
  %v3_14e8c = add i32 %v1_14e80, 28
  %v4_14e8c = inttoptr i32 %v3_14e8c to i32*
  store i32 %v4_14e84, i32* %v4_14e8c, align 4
  %v1_14e90 = load i32, i32* %r3.global-to-local, align 4
  %v2_14e90 = trunc i32 %v1_14e90 to i16
  %v3_14e90 = load i32, i32* @r7, align 4
  %v4_14e90 = inttoptr i32 %v3_14e90 to i16*
  store i16 %v2_14e90, i16* %v4_14e90, align 2
  br label %bb51

.thread18:                                        ; preds = %dec_label_pc_14e74
  store i32 -1, i32* @r6, align 4
  br label %bb51

bb51:                                             ; preds = %.thread17, %dec_label_pc_14e30, %.thread18
  store i32 %v2_14d74, i32* %r0.global-to-local, align 4
  %v0_14ea0 = load i32, i32* %sb.global-to-local, align 4
  %v1_14ea0 = load i32, i32* %sl.global-to-local, align 4
  %v2_14ea0 = add i32 %v1_14ea0, %v0_14ea0
  %v3_14ea0 = inttoptr i32 %v2_14ea0 to i32*
  %v4_14ea0 = load i32, i32* %v3_14ea0, align 4
  call void @__pseudo_branch(i32 %v4_14ea0)
  %v0_14eac.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14eac

dec_label_pc_14eac:                               ; preds = %dec_label_pc_14e24, %bb51
  %v0_14eac = phi i32 [ %v0_14e30, %dec_label_pc_14e24 ], [ %v0_14eac.pre, %bb51 ]
  %v1_14eac = add i32 %v0_14eac, 32
  %v2_14eac = inttoptr i32 %v1_14eac to i32*
  %v3_14eac = load i32, i32* %v2_14eac, align 4
  store i32 %v3_14eac, i32* @r7, align 4
  %v2_14eb0 = icmp eq i32 %v3_14eac, 0
  br i1 %v2_14eb0, label %dec_label_pc_14eb8, label %dec_label_pc_14e24

dec_label_pc_14eb8:                               ; preds = %dec_label_pc_14eac, %dec_label_pc_14d58
  %v0_14eb8 = call i32 @function_14b94()
  store i32 %v0_14eb8, i32* %r0.global-to-local, align 4
  %v0_14ef4.pre = load i32, i32* @r6, align 4
  br label %bb53

dec_label_pc_14ec0:                               ; preds = %dec_label_pc_14d48
  %v1_14ec0 = inttoptr i32 %v0_14ed0 to i16*
  %v2_14ec0 = load i16, i16* %v1_14ec0, align 2
  %v3_14ec0 = zext i16 %v2_14ec0 to i32
  %v1_14ec4 = and i32 %v3_14ec0, 64
  store i32 %v1_14ec4, i32* %r3.global-to-local, align 4
  %v2_14ec4 = icmp eq i32 %v1_14ec4, 0
  br i1 %v2_14ec4, label %bb52, label %dec_label_pc_14ed0

bb52:                                             ; preds = %dec_label_pc_14ec0
  br label %bb53

dec_label_pc_14ed0:                               ; preds = %dec_label_pc_14ec0
  %v1_14ed0 = call i32 @function_149cc(i32 %v0_14ed0)
  store i32 %v1_14ed0, i32* %r0.global-to-local, align 4
  %v2_14ed4 = icmp eq i32 %v1_14ed0, 0
  br i1 %v2_14ed4, label %.thread25, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_14ed0
  br label %bb53

.thread25:                                        ; preds = %dec_label_pc_14ed0
  %v1_14ed8 = load i32, i32* %fp.global-to-local, align 4
  %v2_14ed8 = inttoptr i32 %v1_14ed8 to i16*
  %v3_14ed8 = load i16, i16* %v2_14ed8, align 2
  %v4_14ed8 = zext i16 %v3_14ed8 to i32
  store i32 %v4_14ed8, i32* %r3.global-to-local, align 4
  %v2_14edc = add i32 %v1_14ed8, 8
  %v3_14edc = inttoptr i32 %v2_14edc to i32*
  %v4_14edc = load i32, i32* %v3_14edc, align 4
  store i32 %v4_14edc, i32* %r2.global-to-local, align 4
  %v2_14ee0 = and i32 %v4_14ed8, 65471
  store i32 %v2_14ee0, i32* %r3.global-to-local, align 4
  %v2_14ee4 = trunc i32 %v2_14ee0 to i16
  store i16 %v2_14ee4, i16* %v2_14ed8, align 2
  %v1_14ee8 = load i32, i32* %r2.global-to-local, align 4
  %v2_14ee8 = load i32, i32* %fp.global-to-local, align 4
  %v3_14ee8 = add i32 %v2_14ee8, 28
  %v4_14ee8 = inttoptr i32 %v3_14ee8 to i32*
  store i32 %v1_14ee8, i32* %v4_14ee8, align 4
  br label %bb53

bb53:                                             ; preds = %bb52, %.thread27, %dec_label_pc_14eb8, %.thread25
  %v0_14ef4 = phi i32 [ -1, %.thread27 ], [ 0, %bb52 ], [ %v0_14ef4.pre, %dec_label_pc_14eb8 ], [ 0, %.thread25 ]
  store i32 %v0_14ef4, i32* %r0.global-to-local, align 4
  %v2_14efc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14efc, i32* %r4.global-to-local, align 4
  ret i32 %v0_14ef4

; uselistorder directives
  uselistorder i32 %v0_14ef4, { 1, 0 }
  uselistorder i32 %v3_14eac, { 1, 2, 0 }
  uselistorder i32 %v0_14e5c, { 1, 0, 2 }
  uselistorder i32 %v0_14d9c, { 1, 0, 2 }
  uselistorder i32 %v0_14ed0, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 10, 7, 9, 8, 11, 13, 12, 14, 15, 16, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_14b94, { 1, 0 }
  uselistorder i32 56, { 8, 9, 10, 1, 2, 11, 13, 4, 5, 6, 7, 0, 3, 12, 14 }
  uselistorder i32* @r8, { 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 204, 158, 159, 2, 160, 161, 162, 186, 187, 188, 189, 190, 6, 191, 192, 193, 194, 195, 196, 197, 198, 63, 64, 65, 66, 67, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3, 56, 57, 58, 59, 60, 61, 62, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 4, 127, 128, 129, 130, 131, 132, 133, 134, 5, 135, 136, 137, 138, 139, 140, 0, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 199, 200, 201, 202, 203, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 121, 122, 123, 124, 125 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 124160 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb53, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14eac, { 1, 0 }
  uselistorder label %bb51, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14e24, { 1, 0 }
  uselistorder label %dec_label_pc_14d58, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_14f08(i32 %arg1) local_unnamed_addr {
dec_label_pc_14f08:
  %v0_14f08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14f08, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_14f08
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_14f08, %bb
  %v5_14f24 = phi i32 [ %arg1, %dec_label_pc_14f08 ], [ 0, %bb ]
  ret i32 %v5_14f24

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_14f28(i16* %arg1) local_unnamed_addr {
dec_label_pc_14f28:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_14f28 = load i32, i32* @r4, align 4
  store i32 %v3_14f28, i32* %stack_var_-12, align 4
  %v6_14f28 = load i32, i32* @r5, align 4
  %v9_14f28 = load i32, i32* @lr, align 4
  %v0_14f2c = load i32, i32* @r0, align 4
  %v1_14f2c = add i32 %v0_14f2c, 16
  %v2_14f2c = inttoptr i32 %v1_14f2c to i32*
  %v3_14f2c = load i32, i32* %v2_14f2c, align 4
  store i32 %v3_14f2c, i32* %r2.global-to-local, align 4
  %v1_14f30 = add i32 %v0_14f2c, 24
  %v2_14f30 = inttoptr i32 %v1_14f30 to i32*
  %v3_14f30 = load i32, i32* %v2_14f30, align 4
  %v3_14f34 = icmp ult i32 %v3_14f2c, %v3_14f30
  store i32 %v0_14f2c, i32* @r4, align 4
  br i1 %v3_14f34, label %bb, label %dec_label_pc_14f54

bb:                                               ; preds = %dec_label_pc_14f28
  %v2_14f40 = inttoptr i32 %v3_14f2c to i8*
  %v3_14f40 = load i8, i8* %v2_14f40, align 1
  %v4_14f40 = zext i8 %v3_14f40 to i32
  store i32 %v4_14f40, i32* %r0.global-to-local, align 4
  %v6_14f40 = add i32 %v3_14f2c, 1
  store i32 %v6_14f40, i32* %r2.global-to-local, align 4
  store i32 %v6_14f40, i32* %v2_14f2c, align 4
  br label %dec_label_pc_15040

dec_label_pc_14f54:                               ; preds = %dec_label_pc_14f28
  store i32 124088, i32* @r5, align 4
  %v1_14f54 = inttoptr i32 %v0_14f2c to i16*
  %v2_14f54 = load i16, i16* %v1_14f54, align 2
  %v3_14f54 = zext i16 %v2_14f54 to i32
  %v1_14f58 = and i32 %v3_14f54, 131
  %tmp24 = icmp ugt i32 %v1_14f58, 128
  br i1 %tmp24, label %dec_label_pc_14f74, label %dec_label_pc_14f64

dec_label_pc_14f64:                               ; preds = %dec_label_pc_14f54
  store i32 128, i32* @r1, align 4
  %v0_14f68 = call i32 @function_15d9c()
  store i32 %v0_14f68, i32* %r0.global-to-local, align 4
  %v2_14f6c = icmp eq i32 %v0_14f68, 0
  br i1 %v2_14f6c, label %dec_label_pc_14f64.dec_label_pc_14f74_crit_edge, label %dec_label_pc_1503c

dec_label_pc_14f64.dec_label_pc_14f74_crit_edge:  ; preds = %dec_label_pc_14f64
  %v0_14f74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14f74

dec_label_pc_14f74:                               ; preds = %dec_label_pc_14f64.dec_label_pc_14f74_crit_edge, %dec_label_pc_14f54
  %v2_14fb4 = phi i32 [ %v0_14f74.pre, %dec_label_pc_14f64.dec_label_pc_14f74_crit_edge ], [ %v0_14f2c, %dec_label_pc_14f54 ]
  %v1_14f74 = inttoptr i32 %v2_14fb4 to i16*
  %v2_14f74 = load i16, i16* %v1_14f74, align 2
  %v3_14f74 = zext i16 %v2_14f74 to i32
  store i32 %v3_14f74, i32* %r2.global-to-local, align 4
  %v1_14f78 = and i32 %v3_14f74, 2
  %v2_14f78 = icmp eq i32 %v1_14f78, 0
  br i1 %v2_14f78, label %dec_label_pc_14fa4, label %dec_label_pc_14f80

dec_label_pc_14f80:                               ; preds = %dec_label_pc_14f74
  %tmp25 = urem i16 %v2_14f74, 2
  %v1_14f80 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_14f80
  %v4_14f84 = and i32 %tmp21, 4
  %v5_14f84 = add i32 %v4_14f84, %v2_14fb4
  %v1_14f88 = add i32 %v5_14f84, 36
  %v2_14f88 = inttoptr i32 %v1_14f88 to i8*
  %v3_14f88 = load i8, i8* %v2_14f88, align 1
  %v4_14f88 = zext i8 %v3_14f88 to i32
  %v1_14f8c = add nsw i32 %v3_14f74, -1
  store i32 %v1_14f8c, i32* %r2.global-to-local, align 4
  store i32 %v4_14f88, i32* %r0.global-to-local, align 4
  %v2_14f98 = add i32 %v2_14fb4, 40
  %v3_14f98 = inttoptr i32 %v2_14f98 to i32*
  store i32 0, i32* %v3_14f98, align 4
  %v0_14f9c = load i32, i32* %r2.global-to-local, align 4
  %v1_14f9c = trunc i32 %v0_14f9c to i16
  %v2_14f9c = load i32, i32* @r4, align 4
  %v3_14f9c = inttoptr i32 %v2_14f9c to i16*
  store i16 %v1_14f9c, i16* %v3_14f9c, align 2
  br label %dec_label_pc_15040

dec_label_pc_14fa4:                               ; preds = %dec_label_pc_14f74
  %v1_14fa4 = add i32 %v2_14fb4, 16
  %v1_14fa8 = inttoptr i32 %v1_14fa4 to i32*
  %v2_14fa8 = load i32, i32* %v1_14fa8, align 4
  %v3_14fa8 = add i32 %v2_14fb4, 20
  %v4_14fa8 = inttoptr i32 %v3_14fa8 to i32*
  %v5_14fa8 = load i32, i32* %v4_14fa8, align 4
  %v9_14fac = icmp eq i32 %v5_14fa8, %v2_14fa8
  br i1 %v9_14fac, label %dec_label_pc_14fbc, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14fa4
  %v2_14fb0 = inttoptr i32 %v2_14fa8 to i8*
  %v3_14fb0 = load i8, i8* %v2_14fb0, align 1
  %v4_14fb0 = zext i8 %v3_14fb0 to i32
  store i32 %v4_14fb0, i32* %r0.global-to-local, align 4
  %v6_14fb0 = add i32 %v2_14fa8, 1
  store i32 %v6_14fb0, i32* %v1_14fa8, align 4
  br label %dec_label_pc_15040

dec_label_pc_14fbc:                               ; preds = %dec_label_pc_14fa4
  %v1_14fbc = add i32 %v2_14fb4, 4
  %v2_14fbc = inttoptr i32 %v1_14fbc to i32*
  %v3_14fbc = load i32, i32* %v2_14fbc, align 4
  %v7_14fc0 = icmp eq i32 %v3_14fbc, -2
  br i1 %v7_14fc0, label %.thread8, label %dec_label_pc_14fd4

.thread8:                                         ; preds = %dec_label_pc_14fbc
  %v2_14fc4 = or i16 %v2_14f74, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_14fc4, i16* %v1_14f74, align 2
  br label %dec_label_pc_15040

dec_label_pc_14fd4:                               ; preds = %dec_label_pc_14fbc
  %v1_14fd4 = and i32 %v3_14f74, 768
  %v2_14fd4 = icmp eq i32 %v1_14fd4, 0
  br i1 %v2_14fd4, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_14fd4
  %v1_14fdc = load i32, i32* @r5, align 4
  %v3_14fdc = add i32 %v1_14fdc, 44
  %v4_14fdc = inttoptr i32 %v3_14fdc to i32*
  %v5_14fdc = load i32, i32* %v4_14fdc, align 4
  store i32 %v5_14fdc, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14fd4, %bb22
  %v1_14fe0 = xor i1 %v2_14fd4, true
  call void @__pseudo_cond_branch(i1 %v1_14fe0, i32 ptrtoint (i32* @global_var_14d1c.493 to i32))
  %v0_14fe4 = load i32, i32* @r4, align 4
  %v1_14fe4 = add i32 %v0_14fe4, 8
  store i32 %v1_14fe4, i32* %r2.global-to-local, align 4
  %v1_14fe8 = inttoptr i32 %v1_14fe4 to i32*
  %v2_14fe8 = load i32, i32* %v1_14fe8, align 4
  store i32 %v2_14fe8, i32* %r2.global-to-local, align 4
  %v3_14fe8 = add i32 %v0_14fe4, 12
  %v4_14fe8 = inttoptr i32 %v3_14fe8 to i32*
  %v5_14fe8 = load i32, i32* %v4_14fe8, align 4
  %v9_14fec = icmp eq i32 %v5_14fe8, %v2_14fe8
  br i1 %v9_14fec, label %dec_label_pc_15020, label %dec_label_pc_14ff4

dec_label_pc_14ff4:                               ; preds = %.thread10
  %v2_14ff4 = add i32 %v0_14fe4, 24
  %v3_14ff4 = inttoptr i32 %v2_14ff4 to i32*
  store i32 %v2_14fe8, i32* %v3_14ff4, align 4
  %v0_14ff8 = load i32, i32* @r4, align 4
  store i32 %v0_14ff8, i32* %r0.global-to-local, align 4
  %v2_14ffc = call i32 @function_15d6c(i32 %v0_14ff8)
  store i32 %v2_14ffc, i32* %r0.global-to-local, align 4
  %v2_15000 = icmp eq i32 %v2_14ffc, 0
  br i1 %v2_15000, label %dec_label_pc_1503c, label %dec_label_pc_15008

dec_label_pc_15008:                               ; preds = %dec_label_pc_14ff4
  %v0_15008 = load i32, i32* @r4, align 4
  %v1_15008 = add i32 %v0_15008, 20
  %v2_15008 = inttoptr i32 %v1_15008 to i32*
  %v3_15008 = load i32, i32* %v2_15008, align 4
  %v2_1500c = add i32 %v0_15008, 24
  %v3_1500c = inttoptr i32 %v2_1500c to i32*
  store i32 %v3_15008, i32* %v3_1500c, align 4
  %v0_15010 = load i32, i32* @r4, align 4
  %v1_15010 = add i32 %v0_15010, 16
  %v2_15010 = inttoptr i32 %v1_15010 to i32*
  %v3_15010 = load i32, i32* %v2_15010, align 4
  %v1_15014 = inttoptr i32 %v3_15010 to i8*
  %v2_15014 = load i8, i8* %v1_15014, align 1
  %v3_15014 = zext i8 %v2_15014 to i32
  store i32 %v3_15014, i32* %r0.global-to-local, align 4
  %v5_15014 = add i32 %v3_15010, 1
  store i32 %v5_15014, i32* %v2_15010, align 4
  br label %dec_label_pc_15040

dec_label_pc_15020:                               ; preds = %.thread10
  %v1_15020 = inttoptr i32 %v0_14fe4 to i16*
  store i32 %v0_14fe4, i32* %r0.global-to-local, align 4
  %v2_15024 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1502c = call i32 @function_15c60(i16* %v1_15020, i32 %v2_15024, i32 1)
  store i32 %v5_1502c, i32* %r0.global-to-local, align 4
  %v2_15030 = icmp eq i32 %v5_1502c, 0
  br i1 %v2_15030, label %dec_label_pc_1503c, label %bb23

bb23:                                             ; preds = %dec_label_pc_15020
  %v4_15034 = load i8, i8* %stack_var_-17, align 1
  %v5_15034 = sext i8 %v4_15034 to i32
  store i32 %v5_15034, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15040

dec_label_pc_1503c:                               ; preds = %dec_label_pc_15020, %dec_label_pc_14f64, %dec_label_pc_14ff4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15040

dec_label_pc_15040:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_15008, %dec_label_pc_14f80, %dec_label_pc_1503c
  %v2_15044 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15044, i32* @r4, align 4
  store i32 %v6_14f28, i32* @r5, align 4
  store i32 %v9_14f28, i32* @lr, align 4
  %v1_15048 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_15048

; uselistorder directives
  uselistorder i32 %v2_14fa8, { 1, 0, 2 }
  uselistorder i32 %v2_14fb4, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_14f2c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14f2c, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i16 2, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 8, 9, 2, 10, 11, 12, 3 }
  uselistorder label %dec_label_pc_15040, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_1503c, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_15054(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15054:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_15054 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15058 = icmp eq i32 %arg2, 0
  store i1 %v2_15058, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_150e0, label %dec_label_pc_150c8.preheader

dec_label_pc_150c8.preheader:                     ; preds = %dec_label_pc_15054
  store i32 %tmp, i32* @r5, align 4
  %v1_150c82 = add i32 %arg2, -1
  store i32 %v1_150c82, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_150c88 = icmp eq i32 %arg2, 1
  store i1 %v7_150c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_150c88, label %dec_label_pc_150d0, label %dec_label_pc_15074

dec_label_pc_15074:                               ; preds = %dec_label_pc_150c8.preheader, %dec_label_pc_150c8.backedge.dec_label_pc_15074_crit_edge
  %v0_15098 = phi i32 [ %v0_15074.pre, %dec_label_pc_150c8.backedge.dec_label_pc_15074_crit_edge ], [ %arg3, %dec_label_pc_150c8.preheader ]
  %v1_15074 = add i32 %v0_15098, 16
  %v2_15074 = inttoptr i32 %v1_15074 to i32*
  %v3_15074 = load i32, i32* %v2_15074, align 4
  store i32 %v3_15074, i32* %r2.global-to-local, align 4
  %v1_15078 = add i32 %v0_15098, 24
  %v2_15078 = inttoptr i32 %v1_15078 to i32*
  %v3_15078 = load i32, i32* %v2_15078, align 4
  store i32 %v3_15078, i32* %r3.global-to-local, align 4
  %v3_1507c = icmp uge i32 %v3_15074, %v3_15078
  store i1 %v3_1507c, i1* %cpsr_c.global-to-local, align 1
  %v9_1507c = icmp eq i32 %v3_15074, %v3_15078
  store i1 %v9_1507c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1507c, label %dec_label_pc_15098, label %dec_label_pc_15084

dec_label_pc_15084:                               ; preds = %dec_label_pc_15074
  %v1_15084 = inttoptr i32 %v3_15074 to i8*
  %v2_15084 = load i8, i8* %v1_15084, align 1
  %v3_15084 = zext i8 %v2_15084 to i32
  store i32 %v3_15084, i32* %r3.global-to-local, align 4
  %v5_15084 = add i32 %v3_15074, 1
  store i32 %v5_15084, i32* %r2.global-to-local, align 4
  %v2_15088 = load i32, i32* @r5, align 4
  %v3_15088 = inttoptr i32 %v2_15088 to i8*
  store i8 %v2_15084, i8* %v3_15088, align 1
  %v4_15088 = load i32, i32* @r5, align 4
  %v5_15088 = add i32 %v4_15088, 1
  store i32 %v5_15088, i32* @r5, align 4
  %v0_1508c = load i32, i32* %r3.global-to-local, align 4
  %v2_1508c = icmp ugt i32 %v0_1508c, 9
  store i1 %v2_1508c, i1* %cpsr_c.global-to-local, align 1
  %v7_1508c = icmp eq i32 %v0_1508c, 10
  store i1 %v7_1508c, i1* %cpsr_z.global-to-local, align 1
  %v0_15090 = load i32, i32* %r2.global-to-local, align 4
  %v1_15090 = load i32, i32* @r4, align 4
  %v2_15090 = add i32 %v1_15090, 16
  %v3_15090 = inttoptr i32 %v2_15090 to i32*
  store i32 %v0_15090, i32* %v3_15090, align 4
  br i1 %v7_1508c, label %dec_label_pc_150d0, label %dec_label_pc_150c8.backedge

dec_label_pc_15098:                               ; preds = %dec_label_pc_15074
  %v1_15098 = inttoptr i32 %v0_15098 to i16*
  %v3_1509c = call i32 @function_14f28(i16* %v1_15098)
  %v3_150a0 = icmp eq i32 %v3_1509c, -1
  store i1 %v3_150a0, i1* %cpsr_c.global-to-local, align 1
  %v8_150a0 = icmp eq i32 %v3_1509c, -1
  store i1 %v8_150a0, i1* %cpsr_z.global-to-local, align 1
  %v1_150a4 = urem i32 %v3_1509c, 256
  store i32 %v1_150a4, i32* %r3.global-to-local, align 4
  br i1 %v3_150a0, label %dec_label_pc_150ac, label %dec_label_pc_150c4

dec_label_pc_150ac:                               ; preds = %dec_label_pc_15098
  %v0_150ac = load i32, i32* @r4, align 4
  %v1_150ac = inttoptr i32 %v0_150ac to i16*
  %v2_150ac = load i16, i16* %v1_150ac, align 2
  %v3_150ac = zext i16 %v2_150ac to i32
  store i32 %v3_150ac, i32* %r3.global-to-local, align 4
  %v1_150b0 = and i32 %v3_150ac, 8
  %v2_150b0 = icmp eq i32 %v1_150b0, 0
  store i1 %v2_150b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_150b0, label %dec_label_pc_150d0, label %dec_label_pc_150e0

dec_label_pc_150c4:                               ; preds = %dec_label_pc_15098
  %v1_150bc = trunc i32 %v3_1509c to i8
  %v2_150bc = load i32, i32* @r5, align 4
  %v3_150bc = inttoptr i32 %v2_150bc to i8*
  store i8 %v1_150bc, i8* %v3_150bc, align 1
  %v4_150bc = load i32, i32* @r5, align 4
  %v5_150bc = add i32 %v4_150bc, 1
  store i32 %v5_150bc, i32* @r5, align 4
  %v0_150c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_150c0 = icmp ugt i32 %v0_150c0, 9
  store i1 %v2_150c0, i1* %cpsr_c.global-to-local, align 1
  %v7_150c0 = icmp eq i32 %v0_150c0, 10
  store i1 %v7_150c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_150c0, label %dec_label_pc_150d0, label %dec_label_pc_150c8.backedge

dec_label_pc_150c8.backedge:                      ; preds = %dec_label_pc_150c4, %dec_label_pc_15084
  %v0_150c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_150c8 = add i32 %v0_150c8, -1
  store i32 %v1_150c8, i32* %r6.global-to-local, align 4
  %v2_150c8 = icmp ne i32 %v0_150c8, 0
  store i1 %v2_150c8, i1* %cpsr_c.global-to-local, align 1
  %v7_150c8 = icmp eq i32 %v0_150c8, 1
  store i1 %v7_150c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_150c8, label %dec_label_pc_150d0, label %dec_label_pc_150c8.backedge.dec_label_pc_15074_crit_edge

dec_label_pc_150c8.backedge.dec_label_pc_15074_crit_edge: ; preds = %dec_label_pc_150c8.backedge
  %v0_15074.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15074

dec_label_pc_150d0:                               ; preds = %dec_label_pc_150c4, %dec_label_pc_150c8.backedge, %dec_label_pc_15084, %dec_label_pc_150c8.preheader, %dec_label_pc_150ac
  %v0_150d0 = load i32, i32* @r5, align 4
  %v1_150d0 = load i32, i32* @r7, align 4
  %v3_150d0 = icmp uge i32 %v0_150d0, %v1_150d0
  store i1 %v3_150d0, i1* %cpsr_c.global-to-local, align 1
  %v9_150d0 = icmp eq i32 %v0_150d0, %v1_150d0
  store i1 %v9_150d0, i1* %cpsr_z.global-to-local, align 1
  %v2_150d4 = xor i1 %v9_150d0, true
  %v3_150d4 = and i1 %v3_150d0, %v2_150d4
  br i1 %v3_150d4, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_150d0
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_150d8 = inttoptr i32 %v0_150d0 to i8*
  store i8 0, i8* %v7_150d8, align 1
  %v0_150dc.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_150dc.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_150d0, %bb
  %v1_150dc = phi i1 [ %v1_150dc.pre, %bb ], [ %v9_150d0, %dec_label_pc_150d0 ]
  %v0_150dc = phi i1 [ %v0_150dc.pre, %bb ], [ %v3_150d0, %dec_label_pc_150d0 ]
  %v2_150dc = xor i1 %v1_150dc, true
  %v3_150dc = and i1 %v0_150dc, %v2_150dc
  br i1 %v3_150dc, label %.dec_label_pc_150e4_crit_edge, label %dec_label_pc_150e0

.dec_label_pc_150e4_crit_edge:                    ; preds = %.thread14
  %v0_150e4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_150e4

dec_label_pc_150e0:                               ; preds = %dec_label_pc_15054, %dec_label_pc_150ac, %.thread14
  br label %dec_label_pc_150e4

dec_label_pc_150e4:                               ; preds = %.dec_label_pc_150e4_crit_edge, %dec_label_pc_150e0
  %v0_150e4 = phi i32 [ %v0_150e4.pre, %.dec_label_pc_150e4_crit_edge ], [ 0, %dec_label_pc_150e0 ]
  store i32 %v6_15054, i32* @r5, align 4
  ret i32 %v0_150e4

; uselistorder directives
  uselistorder i1 %v9_150d0, { 1, 0, 2 }
  uselistorder i32 %v1_150d0, { 1, 0 }
  uselistorder i32 %v0_150d0, { 0, 2, 1 }
  uselistorder i32 %v0_150c8, { 2, 0, 1 }
  uselistorder i32 %v0_150c0, { 1, 0 }
  uselistorder i32 %v3_1509c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1508c, { 1, 0 }
  uselistorder i32 %v3_15074, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15098, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 (i16*)* @function_14f28, { 0, 2, 3, 1 }
  uselistorder i1 true, { 0, 1, 69, 101, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 64, 28, 29, 30, 31, 32, 120, 62, 65, 71, 106, 74, 73, 33, 102, 87, 103, 104, 36, 105, 63, 72, 107, 108, 109, 110, 66, 111, 112, 113, 114, 115, 37, 38, 116, 117, 34, 35, 118, 119, 86, 85, 39, 40, 41, 121, 42, 43, 75, 76, 81, 77, 82, 78, 80, 122, 79, 84, 123, 44, 124, 45, 125, 88, 89, 126, 90, 91, 127, 92, 93, 46, 47, 128, 94, 95, 48, 49, 129, 96, 97, 50, 51, 130, 98, 99, 52, 53, 70, 131, 132, 83, 133, 54, 67, 55, 56, 68, 57, 58, 59, 60, 61, 100 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_150e4, { 1, 0 }
  uselistorder label %dec_label_pc_150e0, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_150d0, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_15074, { 1, 0 }
}

define i32 @function_15100() local_unnamed_addr {
dec_label_pc_15100:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_15100 = load i32, i32* @r1, align 4
  %v1_15100 = load i32, i32* @r0, align 4
  %v2_15100 = sub i32 %v0_15100, %v1_15100
  %v3_15100 = icmp ult i32 %v0_15100, %v1_15100
  %v4_15100 = xor i32 %v1_15100, %v0_15100
  %v5_15100 = xor i32 %v2_15100, %v0_15100
  %v6_15100 = and i32 %v5_15100, %v4_15100
  %v7_15100 = icmp slt i32 %v6_15100, 0
  store i1 %v7_15100, i1* %cpsr_v.global-to-local, align 1
  %v8_15100 = icmp slt i32 %v2_15100, 0
  store i1 %v8_15100, i1* %cpsr_n.global-to-local, align 1
  %v9_15100 = icmp eq i32 %v0_15100, %v1_15100
  store i1 %v9_15100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15100, label %dec_label_pc_15354, label %dec_label_pc_15108

dec_label_pc_15108:                               ; preds = %dec_label_pc_15100
  br i1 %v9_15100, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_15108
  %merge = phi i32 [ %v0_15100, %dec_label_pc_15108 ], [ %v2_153e8, %bb150 ], [ %v11_15404, %bb153 ], [ %v7_15404, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_15108
  %v5_1510c = inttoptr i32 %v1_15100 to i8*
  store i8* %v5_1510c, i8** %stack_var_-8, align 4
  %v8_1510c = load i32, i32* @lr, align 4
  %v0_15110 = load i32, i32* @r2, align 4
  %v2_15110 = add i32 %v0_15110, -4
  store i32 %v2_15110, i32* %r2.global-to-local, align 4
  %v4_15110 = sub i32 3, %v0_15110
  %v5_15110 = and i32 %v4_15110, %v0_15110
  %v6_15110 = icmp slt i32 %v5_15110, 0
  store i1 %v6_15110, i1* %cpsr_v.global-to-local, align 1
  %v7_15110 = icmp slt i32 %v2_15110, 0
  store i1 %v7_15110, i1* %cpsr_n.global-to-local, align 1
  %v8_15110 = icmp eq i32 %v0_15110, 4
  store i1 %v8_15110, i1* %cpsr_z.global-to-local, align 1
  %v5_15114 = icmp slt i32 %v0_15110, 4
  br i1 %v5_15114, label %bb140, label %dec_label_pc_15118

dec_label_pc_15118:                               ; preds = %bb
  %v1_15118 = urem i32 %v1_15100, 4
  store i32 %v1_15118, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15118 = icmp eq i32 %v1_15118, 0
  store i1 %v2_15118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15118, label %dec_label_pc_15120, label %dec_label_pc_151cc

dec_label_pc_15120:                               ; preds = %dec_label_pc_15118
  %v1_15120 = urem i32 %v0_15100, 4
  store i32 %v1_15120, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15120 = icmp eq i32 %v1_15120, 0
  store i1 %v2_15120, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_15100 to i2
  br i1 %v2_15120, label %dec_label_pc_15128, label %dec_label_pc_151fc

dec_label_pc_15128:                               ; preds = %dec_label_pc_15120, %dec_label_pc_151f4
  %v0_1514094 = phi i32 [ %v1_15100, %dec_label_pc_15120 ], [ %v0_1531c77, %dec_label_pc_151f4 ]
  %v0_1513c93 = phi i32 [ %v0_15100, %dec_label_pc_15120 ], [ %v0_151f4, %dec_label_pc_151f4 ]
  %v0_15128 = phi i32 [ %v2_15110, %dec_label_pc_15120 ], [ %v2_151ec, %dec_label_pc_151f4 ]
  %v1_15128 = add i32 %v0_15128, -8
  store i32 %v1_15128, i32* %r2.global-to-local, align 4
  %v3_15128 = sub i32 7, %v0_15128
  %v4_15128 = and i32 %v3_15128, %v0_15128
  %v5_15128 = icmp slt i32 %v4_15128, 0
  store i1 %v5_15128, i1* %cpsr_v.global-to-local, align 1
  %v6_15128 = icmp slt i32 %v1_15128, 0
  store i1 %v6_15128, i1* %cpsr_n.global-to-local, align 1
  %v7_15128 = icmp eq i32 %v0_15128, 8
  store i1 %v7_15128, i1* %cpsr_z.global-to-local, align 1
  %v2_1512c = xor i1 %v6_15128, %v5_15128
  br i1 %v2_1512c, label %dec_label_pc_1517c, label %dec_label_pc_15130

dec_label_pc_15130:                               ; preds = %dec_label_pc_15128
  %v1_15130 = add i32 %v0_15128, -28
  store i32 %v1_15130, i32* %r2.global-to-local, align 4
  %v3_15130 = sub i32 27, %v0_15128
  %v4_15130 = and i32 %v3_15130, %v1_15128
  %v5_15130 = icmp slt i32 %v4_15130, 0
  store i1 %v5_15130, i1* %cpsr_v.global-to-local, align 1
  %v6_15130 = icmp slt i32 %v1_15130, 0
  store i1 %v6_15130, i1* %cpsr_n.global-to-local, align 1
  %v7_15130 = icmp eq i32 %v1_15128, 20
  store i1 %v7_15130, i1* %cpsr_z.global-to-local, align 1
  %v2_15134 = xor i1 %v6_15130, %v5_15130
  br i1 %v2_15134, label %dec_label_pc_15168, label %dec_label_pc_15138

dec_label_pc_15138:                               ; preds = %dec_label_pc_15130
  %v0_15138 = load i32, i32* @r4, align 4
  store i32 %v0_15138, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1513c

dec_label_pc_1513c:                               ; preds = %dec_label_pc_1513c.dec_label_pc_1513c_crit_edge, %dec_label_pc_15138
  %v0_15140 = phi i32 [ %v12_15148, %dec_label_pc_1513c.dec_label_pc_1513c_crit_edge ], [ %v0_1514094, %dec_label_pc_15138 ]
  %v0_1513c = phi i32 [ %v0_1513c.pre, %dec_label_pc_1513c.dec_label_pc_1513c_crit_edge ], [ %v0_1513c93, %dec_label_pc_15138 ]
  %v1_1513c = inttoptr i32 %v0_1513c to i32*
  %v2_1513c = load i32, i32* %v1_1513c, align 4
  %v3_1513c = add i32 %v0_1513c, 4
  %v4_1513c = inttoptr i32 %v3_1513c to i32*
  %v5_1513c = load i32, i32* %v4_1513c, align 4
  store i32 %v5_1513c, i32* %r4.global-to-local, align 4
  %v6_1513c = add i32 %v0_1513c, 8
  %v7_1513c = inttoptr i32 %v6_1513c to i32*
  %v8_1513c = load i32, i32* %v7_1513c, align 4
  store i32 %v8_1513c, i32* %ip.global-to-local, align 4
  %v9_1513c = add i32 %v0_1513c, 12
  %v10_1513c = inttoptr i32 %v9_1513c to i32*
  %v11_1513c = load i32, i32* %v10_1513c, align 4
  store i32 %v11_1513c, i32* %lr.global-to-local, align 4
  %v12_1513c = add i32 %v0_1513c, 16
  store i32 %v12_1513c, i32* %r1.global-to-local, align 4
  %v1_15140 = inttoptr i32 %v0_15140 to i32*
  store i32 %v2_1513c, i32* %v1_15140, align 4
  %v3_15140 = add i32 %v0_15140, 4
  %v4_15140 = inttoptr i32 %v3_15140 to i32*
  %v5_15140 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15140, i32* %v4_15140, align 4
  %v6_15140 = add i32 %v0_15140, 8
  %v7_15140 = inttoptr i32 %v6_15140 to i32*
  %v8_15140 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15140, i32* %v7_15140, align 4
  %v9_15140 = add i32 %v0_15140, 12
  %v10_15140 = inttoptr i32 %v9_15140 to i32*
  %v11_15140 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15140, i32* %v10_15140, align 4
  %v12_15140 = add i32 %v0_15140, 16
  store i32 %v12_15140, i32* %r0.global-to-local, align 4
  %v0_15144 = load i32, i32* %r1.global-to-local, align 4
  %v1_15144 = inttoptr i32 %v0_15144 to i32*
  %v2_15144 = load i32, i32* %v1_15144, align 4
  store i32 %v2_15144, i32* @r3, align 4
  %v3_15144 = add i32 %v0_15144, 4
  %v4_15144 = inttoptr i32 %v3_15144 to i32*
  %v5_15144 = load i32, i32* %v4_15144, align 4
  store i32 %v5_15144, i32* %r4.global-to-local, align 4
  %v6_15144 = add i32 %v0_15144, 8
  %v7_15144 = inttoptr i32 %v6_15144 to i32*
  %v8_15144 = load i32, i32* %v7_15144, align 4
  store i32 %v8_15144, i32* @ip, align 4
  %v9_15144 = add i32 %v0_15144, 12
  %v10_15144 = inttoptr i32 %v9_15144 to i32*
  %v11_15144 = load i32, i32* %v10_15144, align 4
  store i32 %v11_15144, i32* %lr.global-to-local, align 4
  %v12_15144 = add i32 %v0_15144, 16
  store i32 %v12_15144, i32* @r1, align 4
  %v1_15148 = inttoptr i32 %v12_15140 to i32*
  store i32 %v2_15144, i32* %v1_15148, align 4
  %v3_15148 = add i32 %v0_15140, 20
  %v4_15148 = inttoptr i32 %v3_15148 to i32*
  %v5_15148 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15148, i32* %v4_15148, align 4
  %v6_15148 = add i32 %v0_15140, 24
  %v7_15148 = inttoptr i32 %v6_15148 to i32*
  %v8_15148 = load i32, i32* @ip, align 4
  store i32 %v8_15148, i32* %v7_15148, align 4
  %v9_15148 = add i32 %v0_15140, 28
  %v10_15148 = inttoptr i32 %v9_15148 to i32*
  %v11_15148 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15148, i32* %v10_15148, align 4
  %v12_15148 = add i32 %v0_15140, 32
  store i32 %v12_15148, i32* @r0, align 4
  %v0_1514c = load i32, i32* %r2.global-to-local, align 4
  %v1_1514c = add i32 %v0_1514c, -32
  store i32 %v1_1514c, i32* %r2.global-to-local, align 4
  %v3_1514c = sub i32 31, %v0_1514c
  %v4_1514c = and i32 %v3_1514c, %v0_1514c
  %v5_1514c = icmp slt i32 %v4_1514c, 0
  %v6_1514c = icmp slt i32 %v1_1514c, 0
  %v2_15150 = xor i1 %v6_1514c, %v5_1514c
  br i1 %v2_15150, label %dec_label_pc_15154, label %dec_label_pc_1513c.dec_label_pc_1513c_crit_edge

dec_label_pc_1513c.dec_label_pc_1513c_crit_edge:  ; preds = %dec_label_pc_1513c
  %v0_1513c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1513c

dec_label_pc_15154:                               ; preds = %dec_label_pc_1513c
  %v1_15154 = add i32 %v0_1514c, -16
  %v3_15154 = add i32 %v0_1514c, 2147483616
  %v4_15154 = and i32 %v1_15154, %v3_15154
  %v5_15154 = icmp slt i32 %v4_15154, 0
  store i1 %v5_15154, i1* %cpsr_v.global-to-local, align 1
  %v6_15154 = icmp slt i32 %v1_15154, 0
  store i1 %v6_15154, i1* %cpsr_n.global-to-local, align 1
  %v7_15154 = icmp eq i32 %v1_15154, 0
  store i1 %v7_15154, i1* %cpsr_z.global-to-local, align 1
  %v2_15158 = xor i1 %v6_15154, %v5_15154
  br i1 %v2_15158, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_15154
  %v3_15158 = load i32, i32* @r1, align 4
  %v4_15158 = inttoptr i32 %v3_15158 to i32*
  %v5_15158 = load i32, i32* %v4_15158, align 4
  store i32 %v5_15158, i32* @r3, align 4
  %v6_15158 = add i32 %v3_15158, 4
  %v7_15158 = inttoptr i32 %v6_15158 to i32*
  %v8_15158 = load i32, i32* %v7_15158, align 4
  store i32 %v8_15158, i32* %r4.global-to-local, align 4
  %v9_15158 = add i32 %v3_15158, 8
  %v10_15158 = inttoptr i32 %v9_15158 to i32*
  %v11_15158 = load i32, i32* %v10_15158, align 4
  store i32 %v11_15158, i32* @ip, align 4
  %v12_15158 = add i32 %v3_15158, 12
  %v13_15158 = inttoptr i32 %v12_15158 to i32*
  %v14_15158 = load i32, i32* %v13_15158, align 4
  store i32 %v14_15158, i32* %lr.global-to-local, align 4
  %v15_15158 = add i32 %v3_15158, 16
  store i32 %v15_15158, i32* @r1, align 4
  %v4_1515c = inttoptr i32 %v12_15148 to i32*
  store i32 %v5_15158, i32* %v4_1515c, align 4
  %v6_1515c = add i32 %v0_15140, 36
  %v7_1515c = inttoptr i32 %v6_1515c to i32*
  %v8_1515c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_1515c, i32* %v7_1515c, align 4
  %v9_1515c = add i32 %v0_15140, 40
  %v10_1515c = inttoptr i32 %v9_1515c to i32*
  %v11_1515c = load i32, i32* @ip, align 4
  store i32 %v11_1515c, i32* %v10_1515c, align 4
  %v12_1515c = add i32 %v0_15140, 44
  %v13_1515c = inttoptr i32 %v12_1515c to i32*
  %v14_1515c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_1515c, i32* %v13_1515c, align 4
  %v15_1515c = add i32 %v0_15140, 48
  store i32 %v15_1515c, i32* @r0, align 4
  %v3_15160 = load i32, i32* %r2.global-to-local, align 4
  %v4_15160 = add i32 %v3_15160, -16
  store i32 %v4_15160, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_15154, %bb136
  %v3_15170102111 = phi i32 [ %v15_1515c, %bb136 ], [ %v12_15148, %dec_label_pc_15154 ]
  %v0_15168.pre = phi i32 [ %v4_15160, %bb136 ], [ %v1_1514c, %dec_label_pc_15154 ]
  %v2_15164 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15164, i32* @r4, align 4
  br label %dec_label_pc_15168

dec_label_pc_15168:                               ; preds = %dec_label_pc_15130, %bb137
  %v3_15170101 = phi i32 [ %v0_1514094, %dec_label_pc_15130 ], [ %v3_15170102111, %bb137 ]
  %v0_15168 = phi i32 [ %v1_15130, %dec_label_pc_15130 ], [ %v0_15168.pre, %bb137 ]
  %v1_15168 = add i32 %v0_15168, 20
  store i32 %v1_15168, i32* %r2.global-to-local, align 4
  %v3_15168 = sub i32 0, %v0_15168
  %v4_15168 = and i32 %v1_15168, %v3_15168
  %v5_15168 = icmp slt i32 %v4_15168, 0
  store i1 %v5_15168, i1* %cpsr_v.global-to-local, align 1
  %v6_15168 = icmp slt i32 %v1_15168, 0
  store i1 %v6_15168, i1* %cpsr_n.global-to-local, align 1
  %v7_15168 = icmp eq i32 %v1_15168, 0
  store i1 %v7_15168, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1516c

dec_label_pc_1516c:                               ; preds = %.thread115, %dec_label_pc_15168
  %v0_1517c.pre157 = phi i32 [ %v0_1517c.pre, %.thread115 ], [ %v1_15168, %dec_label_pc_15168 ]
  %v3_15170 = phi i32 [ %v3_1517099116, %.thread115 ], [ %v3_15170101, %dec_label_pc_15168 ]
  %v1_15174 = phi i1 [ %v1_15178, %.thread115 ], [ %v5_15168, %dec_label_pc_15168 ]
  %v0_15174 = phi i1 [ %v0_15178, %.thread115 ], [ %v6_15168, %dec_label_pc_15168 ]
  %v2_1516c = xor i1 %v1_15174, %v0_15174
  br i1 %v2_1516c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1516c
  %v3_1516c = load i32, i32* @r1, align 4
  %v4_1516c = inttoptr i32 %v3_1516c to i32*
  %v5_1516c = load i32, i32* %v4_1516c, align 4
  store i32 %v5_1516c, i32* @r3, align 4
  %v6_1516c = add i32 %v3_1516c, 4
  %v7_1516c = inttoptr i32 %v6_1516c to i32*
  %v8_1516c = load i32, i32* %v7_1516c, align 4
  store i32 %v8_1516c, i32* @ip, align 4
  %v9_1516c = add i32 %v3_1516c, 8
  %v10_1516c = inttoptr i32 %v9_1516c to i32*
  %v11_1516c = load i32, i32* %v10_1516c, align 4
  store i32 %v11_1516c, i32* %lr.global-to-local, align 4
  %v12_1516c = add i32 %v3_1516c, 12
  store i32 %v12_1516c, i32* @r1, align 4
  %v4_15170 = inttoptr i32 %v3_15170 to i32*
  store i32 %v5_1516c, i32* %v4_15170, align 4
  %v6_15170 = add i32 %v3_15170, 4
  %v7_15170 = inttoptr i32 %v6_15170 to i32*
  %v8_15170 = load i32, i32* @ip, align 4
  store i32 %v8_15170, i32* %v7_15170, align 4
  %v9_15170 = add i32 %v3_15170, 8
  %v10_15170 = inttoptr i32 %v9_15170 to i32*
  %v11_15170 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15170, i32* %v10_15170, align 4
  %v12_15170 = add i32 %v3_15170, 12
  store i32 %v12_15170, i32* @r0, align 4
  %v3_15174 = load i32, i32* %r2.global-to-local, align 4
  %v4_15174 = add i32 %v3_15174, -12
  store i32 %v4_15174, i32* %r2.global-to-local, align 4
  %v6_15174 = sub i32 11, %v3_15174
  %v7_15174 = and i32 %v6_15174, %v3_15174
  %v8_15174 = icmp slt i32 %v7_15174, 0
  store i1 %v8_15174, i1* %cpsr_v.global-to-local, align 1
  %v9_15174 = icmp slt i32 %v4_15174, 0
  store i1 %v9_15174, i1* %cpsr_n.global-to-local, align 1
  %v10_15174 = icmp eq i32 %v3_15174, 12
  store i1 %v10_15174, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1516c, %bb138
  %v0_1517c.pre = phi i32 [ %v4_15174, %bb138 ], [ %v0_1517c.pre157, %dec_label_pc_1516c ]
  %v3_1517099116 = phi i32 [ %v12_15170, %bb138 ], [ %v3_15170, %dec_label_pc_1516c ]
  %v1_15178 = phi i1 [ %v8_15174, %bb138 ], [ %v1_15174, %dec_label_pc_1516c ]
  %v0_15178 = phi i1 [ %v9_15174, %bb138 ], [ %v0_15174, %dec_label_pc_1516c ]
  %v2_15178 = xor i1 %v1_15178, %v0_15178
  br i1 %v2_15178, label %dec_label_pc_1517c, label %dec_label_pc_1516c

dec_label_pc_1517c:                               ; preds = %.thread115, %dec_label_pc_15128
  %v4_1518c = phi i32 [ %v0_1514094, %dec_label_pc_15128 ], [ %v3_1517099116, %.thread115 ]
  %v0_1517c = phi i32 [ %v1_15128, %dec_label_pc_15128 ], [ %v0_1517c.pre, %.thread115 ]
  %v1_1517c = add i32 %v0_1517c, 8
  store i32 %v1_1517c, i32* %r2.global-to-local, align 4
  %v3_1517c = sub i32 0, %v0_1517c
  %v4_1517c = and i32 %v1_1517c, %v3_1517c
  %v5_1517c = icmp slt i32 %v4_1517c, 0
  store i1 %v5_1517c, i1* %cpsr_v.global-to-local, align 1
  %v6_1517c = icmp slt i32 %v1_1517c, 0
  store i1 %v6_1517c, i1* %cpsr_n.global-to-local, align 1
  %v7_1517c = icmp eq i32 %v1_1517c, 0
  store i1 %v7_1517c, i1* %cpsr_z.global-to-local, align 1
  %v2_15180 = xor i1 %v6_1517c, %v5_1517c
  br i1 %v2_15180, label %bb140, label %dec_label_pc_15184

dec_label_pc_15184:                               ; preds = %dec_label_pc_1517c
  %v1_15184 = add i32 %v0_1517c, 4
  store i32 %v1_15184, i32* %r2.global-to-local, align 4
  %v3_15184 = sub i32 -5, %v0_1517c
  %v4_15184 = and i32 %v3_15184, %v1_1517c
  %v5_15184 = icmp slt i32 %v4_15184, 0
  store i1 %v5_15184, i1* %cpsr_v.global-to-local, align 1
  %v6_15184 = icmp slt i32 %v1_15184, 0
  store i1 %v6_15184, i1* %cpsr_n.global-to-local, align 1
  %v7_15184 = icmp eq i32 %v1_1517c, 4
  store i1 %v7_15184, i1* %cpsr_z.global-to-local, align 1
  %v2_15188 = xor i1 %v6_15184, %v5_15184
  %v3_15188 = load i32, i32* @r1, align 4
  %v4_15188 = inttoptr i32 %v3_15188 to i32*
  %v5_15188 = load i32, i32* %v4_15188, align 4
  store i32 %v5_15188, i32* @r3, align 4
  %v7_15188 = add i32 %v3_15188, 4
  br i1 %v2_15188, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_15184
  store i32 %v7_15188, i32* @r1, align 4
  %v5_1518c = inttoptr i32 %v4_1518c to i32*
  store i32 %v5_15188, i32* %v5_1518c, align 4
  %v6_1518c = load i32, i32* @r0, align 4
  %v7_1518c = add i32 %v6_1518c, 4
  store i32 %v7_1518c, i32* @r0, align 4
  %v0_1519c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_15184
  %v7_15190 = inttoptr i32 %v7_15188 to i32*
  %v8_15190 = load i32, i32* %v7_15190, align 4
  store i32 %v8_15190, i32* @ip, align 4
  %v9_15190 = add i32 %v3_15188, 8
  store i32 %v9_15190, i32* @r1, align 4
  %v4_15194 = inttoptr i32 %v4_1518c to i32*
  store i32 %v5_15188, i32* %v4_15194, align 4
  %v6_15194 = add i32 %v4_1518c, 4
  %v7_15194 = inttoptr i32 %v6_15194 to i32*
  %v8_15194 = load i32, i32* @ip, align 4
  store i32 %v8_15194, i32* %v7_15194, align 4
  %v9_15194 = add i32 %v4_1518c, 8
  store i32 %v9_15194, i32* @r0, align 4
  %v3_15198 = load i32, i32* %r2.global-to-local, align 4
  %v4_15198 = add i32 %v3_15198, -4
  store i32 %v4_15198, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1517c, %bb, %dec_label_pc_1534c, %dec_label_pc_152e0, %dec_label_pc_15274, %bb139
  %v0_1519c = phi i32 [ %v0_1519c.pre, %.thread122 ], [ %v2_151ec, %.thread128 ], [ %v1_1517c, %dec_label_pc_1517c ], [ %v2_15110, %bb ], [ %v0_1519c61, %dec_label_pc_1534c ], [ %v0_1519c60, %dec_label_pc_152e0 ], [ %v0_1519c59, %dec_label_pc_15274 ], [ %v4_15198, %bb139 ]
  %v1_1519c = add i32 %v0_1519c, 4
  store i32 %v1_1519c, i32* %r2.global-to-local, align 4
  %v3_1519c = sub i32 0, %v0_1519c
  %v4_1519c = and i32 %v1_1519c, %v3_1519c
  %v5_1519c = icmp slt i32 %v4_1519c, 0
  store i1 %v5_1519c, i1* %cpsr_v.global-to-local, align 1
  %v6_1519c = icmp slt i32 %v1_1519c, 0
  store i1 %v6_1519c, i1* %cpsr_n.global-to-local, align 1
  %v7_1519c = icmp eq i32 %v1_1519c, 0
  store i1 %v7_1519c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1519c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_151a4.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_151a0 = load i8*, i8** %stack_var_-8, align 4
  %v4_151a0 = ptrtoint i8* %v3_151a0 to i32
  store i32 %v4_151a0, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_151a4 = phi i32 [ %v0_151a4.pre, %bb140.bb142_crit_edge ], [ %v8_1510c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1519c, i32 %v0_151a4)
  %v0_151a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_151a8 = add i32 %v0_151a8, -2
  %v3_151a8 = sub i32 1, %v0_151a8
  %v4_151a8 = and i32 %v3_151a8, %v0_151a8
  %v5_151a8 = icmp slt i32 %v4_151a8, 0
  store i1 %v5_151a8, i1* %cpsr_v.global-to-local, align 1
  %v6_151a8 = icmp slt i32 %v1_151a8, 0
  store i1 %v6_151a8, i1* %cpsr_n.global-to-local, align 1
  %v7_151a8 = icmp eq i32 %v0_151a8, 2
  store i1 %v7_151a8, i1* %cpsr_z.global-to-local, align 1
  %v0_151ac = load i32, i32* @r1, align 4
  %v1_151ac = inttoptr i32 %v0_151ac to i8*
  %v2_151ac = load i8, i8* %v1_151ac, align 1
  %v5_151ac = add i32 %v0_151ac, 1
  store i32 %v5_151ac, i32* %r1.global-to-local, align 4
  %v2_151b0 = load i32, i32* @r0, align 4
  %v3_151b0 = inttoptr i32 %v2_151b0 to i8*
  store i8 %v2_151ac, i8* %v3_151b0, align 1
  %v4_151b0 = load i32, i32* @r0, align 4
  %v5_151b0 = add i32 %v4_151b0, 1
  store i32 %v5_151b0, i32* %r0.global-to-local, align 4
  %v0_151b4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_151b4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_151b4 = xor i1 %v0_151b4, %v1_151b4
  br i1 %v2_151b4, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_151b4 = load i32, i32* %r1.global-to-local, align 4
  %v4_151b4 = inttoptr i32 %v3_151b4 to i8*
  %v5_151b4 = load i8, i8* %v4_151b4, align 1
  %v8_151b4 = add i32 %v3_151b4, 1
  store i32 %v8_151b4, i32* %r1.global-to-local, align 4
  %v6_151b8 = inttoptr i32 %v5_151b0 to i8*
  store i8 %v5_151b4, i8* %v6_151b8, align 1
  %v7_151b8 = load i32, i32* %r0.global-to-local, align 4
  %v8_151b8 = add i32 %v7_151b8, 1
  store i32 %v8_151b8, i32* %r0.global-to-local, align 4
  %v1_151bc.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_151bc.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_151c0 = phi i32 [ %v8_151b8, %bb143 ], [ %v5_151b0, %bb142 ]
  %v2_151c0 = phi i1 [ %v2_151bc.pre, %bb143 ], [ %v1_151b4, %bb142 ]
  %v1_151c0 = phi i1 [ %v1_151bc.pre, %bb143 ], [ %v0_151b4, %bb142 ]
  %v0_151bc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_151bc = xor i1 %v2_151c0, %v1_151c0
  %v4_151bc = or i1 %v0_151bc, %v3_151bc
  br i1 %v4_151bc, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_151bc = load i32, i32* %r1.global-to-local, align 4
  %v6_151bc = inttoptr i32 %v5_151bc to i8*
  %v7_151bc = load i8, i8* %v6_151bc, align 1
  %v10_151bc = add i32 %v5_151bc, 1
  store i32 %v10_151bc, i32* %r1.global-to-local, align 4
  %v8_151c0 = inttoptr i32 %v7_151c0 to i8*
  store i8 %v7_151bc, i8* %v8_151c0, align 1
  %v9_151c0 = load i32, i32* %r0.global-to-local, align 4
  %v10_151c0 = add i32 %v9_151c0, 1
  store i32 %v10_151c0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_151c4 = load i8*, i8** %stack_var_-8, align 4
  %v3_151c4 = ptrtoint i8* %v2_151c4 to i32
  store i32 %v3_151c4, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_1510c)
  %v0_151cc.pre = load i32, i32* @ip, align 4
  %v0_151d4.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_151d8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_151cc

dec_label_pc_151cc:                               ; preds = %dec_label_pc_15118, %.thread126
  %v2_151d8 = phi i32 [ %v1_15100, %dec_label_pc_15118 ], [ %v2_151d8.pre, %.thread126 ]
  %v0_151d4 = phi i32 [ %v0_15100, %dec_label_pc_15118 ], [ %v0_151d4.pre, %.thread126 ]
  %v0_151cc = phi i32 [ %v1_15118, %dec_label_pc_15118 ], [ %v0_151cc.pre, %.thread126 ]
  %v1_151cc = sub i32 4, %v0_151cc
  store i32 %v1_151cc, i32* @ip, align 4
  %v1_151d0 = add i32 %v1_151cc, -2
  %v3_151d0 = sub i32 1, %v1_151cc
  %v4_151d0 = and i32 %v3_151d0, %v1_151cc
  %v5_151d0 = icmp slt i32 %v4_151d0, 0
  store i1 %v5_151d0, i1* %cpsr_v.global-to-local, align 1
  %v6_151d0 = icmp slt i32 %v1_151d0, 0
  store i1 %v6_151d0, i1* %cpsr_n.global-to-local, align 1
  %v7_151d0 = icmp eq i32 %v1_151cc, 2
  store i1 %v7_151d0, i1* %cpsr_z.global-to-local, align 1
  %v1_151d4 = inttoptr i32 %v0_151d4 to i8*
  %v2_151d4 = load i8, i8* %v1_151d4, align 1
  %v3_151d4 = zext i8 %v2_151d4 to i32
  store i32 %v3_151d4, i32* @r3, align 4
  %v5_151d4 = add i32 %v0_151d4, 1
  store i32 %v5_151d4, i32* @r1, align 4
  %v3_151d8 = inttoptr i32 %v2_151d8 to i8*
  store i8 %v2_151d4, i8* %v3_151d8, align 1
  %v4_151d8 = load i32, i32* @r0, align 4
  %v5_151d8 = add i32 %v4_151d8, 1
  store i32 %v5_151d8, i32* @r0, align 4
  %v0_151dc = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_151dc = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_151dc = xor i1 %v0_151dc, %v1_151dc
  br i1 %v2_151dc, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_151cc
  %v3_151dc = load i32, i32* @r1, align 4
  %v4_151dc = inttoptr i32 %v3_151dc to i8*
  %v5_151dc = load i8, i8* %v4_151dc, align 1
  %v6_151dc = zext i8 %v5_151dc to i32
  store i32 %v6_151dc, i32* @r3, align 4
  %v8_151dc = add i32 %v3_151dc, 1
  store i32 %v8_151dc, i32* @r1, align 4
  %v6_151e0 = inttoptr i32 %v5_151d8 to i8*
  store i8 %v5_151dc, i8* %v6_151e0, align 1
  %v7_151e0 = load i32, i32* @r0, align 4
  %v8_151e0 = add i32 %v7_151e0, 1
  store i32 %v8_151e0, i32* @r0, align 4
  %v1_151e4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_151e4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_151cc, %bb145
  %v7_151e8 = phi i32 [ %v8_151e0, %bb145 ], [ %v5_151d8, %dec_label_pc_151cc ]
  %v2_151e8 = phi i1 [ %v2_151e4.pre, %bb145 ], [ %v1_151dc, %dec_label_pc_151cc ]
  %v1_151e8 = phi i1 [ %v1_151e4.pre, %bb145 ], [ %v0_151dc, %dec_label_pc_151cc ]
  %v0_151e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_151e4 = xor i1 %v2_151e8, %v1_151e8
  %v4_151e4 = or i1 %v0_151e4, %v3_151e4
  br i1 %v4_151e4, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_151e4 = load i32, i32* @r1, align 4
  %v6_151e4 = inttoptr i32 %v5_151e4 to i8*
  %v7_151e4 = load i8, i8* %v6_151e4, align 1
  %v8_151e4 = zext i8 %v7_151e4 to i32
  store i32 %v8_151e4, i32* @r3, align 4
  %v10_151e4 = add i32 %v5_151e4, 1
  store i32 %v10_151e4, i32* @r1, align 4
  %v8_151e8 = inttoptr i32 %v7_151e8 to i8*
  store i8 %v7_151e4, i8* %v8_151e8, align 1
  %v9_151e8 = load i32, i32* @r0, align 4
  %v10_151e8 = add i32 %v9_151e8, 1
  store i32 %v10_151e8, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_1531c77 = phi i32 [ %v10_151e8, %bb146 ], [ %v7_151e8, %.thread127 ]
  %v0_151ec = load i32, i32* %r2.global-to-local, align 4
  %v1_151ec = load i32, i32* @ip, align 4
  %v2_151ec = sub i32 %v0_151ec, %v1_151ec
  store i32 %v2_151ec, i32* %r2.global-to-local, align 4
  %v4_151ec = xor i32 %v1_151ec, %v0_151ec
  %v5_151ec = xor i32 %v2_151ec, %v0_151ec
  %v6_151ec = and i32 %v5_151ec, %v4_151ec
  %v7_151ec = icmp slt i32 %v6_151ec, 0
  store i1 %v7_151ec, i1* %cpsr_v.global-to-local, align 1
  %v8_151ec = icmp slt i32 %v2_151ec, 0
  store i1 %v8_151ec, i1* %cpsr_n.global-to-local, align 1
  %v9_151ec = icmp eq i32 %v0_151ec, %v1_151ec
  store i1 %v9_151ec, i1* %cpsr_z.global-to-local, align 1
  %v2_151f0 = xor i1 %v8_151ec, %v7_151ec
  br i1 %v2_151f0, label %bb140, label %dec_label_pc_151f4

dec_label_pc_151f4:                               ; preds = %.thread128
  %v0_151f4 = load i32, i32* @r1, align 4
  %v1_151f4 = urem i32 %v0_151f4, 4
  store i32 %v1_151f4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_151f4 = icmp eq i32 %v1_151f4, 0
  store i1 %v2_151f4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_151f4 to i2
  br i1 %v2_151f4, label %dec_label_pc_15128, label %dec_label_pc_151fc

dec_label_pc_151fc:                               ; preds = %dec_label_pc_15120, %dec_label_pc_151f4
  %v0_1531c76 = phi i32 [ %v1_15100, %dec_label_pc_15120 ], [ %v0_1531c77, %dec_label_pc_151f4 ]
  %v0_15284 = phi i32 [ %v2_15110, %dec_label_pc_15120 ], [ %v2_151ec, %dec_label_pc_151f4 ]
  %v0_15204.off0 = phi i2 [ %extract.t, %dec_label_pc_15120 ], [ %extract.t131, %dec_label_pc_151f4 ]
  %v0_151fc = phi i32 [ %v0_15100, %dec_label_pc_15120 ], [ %v0_151f4, %dec_label_pc_151f4 ]
  %v1_151fc = and i32 %v0_151fc, -4
  store i32 %v1_151fc, i32* %r1.global-to-local, align 4
  %v1_15200 = inttoptr i32 %v1_151fc to i32*
  %v2_15200 = load i32, i32* %v1_15200, align 4
  store i32 %v2_15200, i32* %lr.global-to-local, align 4
  %v4_15200 = add i32 %v1_151fc, 4
  store i32 %v4_15200, i32* %r1.global-to-local, align 4
  %v1_1527c = add i32 %v0_15284, -12
  %v3_1527c = sub i32 11, %v0_15284
  %v4_1527c = and i32 %v3_1527c, %v0_15284
  %v5_1527c = icmp slt i32 %v4_1527c, 0
  store i1 %v5_1527c, i1* %cpsr_v.global-to-local, align 1
  %v6_1527c = icmp slt i32 %v1_1527c, 0
  store i1 %v6_1527c, i1* %cpsr_n.global-to-local, align 1
  %v7_1527c = icmp eq i32 %v0_15284, 12
  store i1 %v7_1527c, i1* %cpsr_z.global-to-local, align 1
  %v2_15280 = xor i1 %v6_1527c, %v5_1527c
  switch i2 %v0_15204.off0, label %dec_label_pc_15210 [
    i2 -1, label %dec_label_pc_152e8
    i2 -2, label %dec_label_pc_1527c
  ]

dec_label_pc_15210:                               ; preds = %dec_label_pc_151fc
  br i1 %v2_15280, label %dec_label_pc_1525c, label %dec_label_pc_15218

dec_label_pc_15218:                               ; preds = %dec_label_pc_15210
  store i32 %v1_1527c, i32* %r2.global-to-local, align 4
  %v3_1521c = load i32, i32* @r4, align 4
  store i32 %v3_1521c, i32* %stack_var_-16, align 4
  %v6_1521c = load i32, i32* @r5, align 4
  store i32 %v6_1521c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15220

dec_label_pc_15220:                               ; preds = %dec_label_pc_15220.dec_label_pc_15220_crit_edge, %dec_label_pc_15218
  %v0_15244 = phi i32 [ %v12_15244, %dec_label_pc_15220.dec_label_pc_15220_crit_edge ], [ %v0_1531c76, %dec_label_pc_15218 ]
  %v0_15224 = phi i32 [ %v0_15224.pre, %dec_label_pc_15220.dec_label_pc_15220_crit_edge ], [ %v4_15200, %dec_label_pc_15218 ]
  %v0_15220 = phi i32 [ %v0_15220.pre, %dec_label_pc_15220.dec_label_pc_15220_crit_edge ], [ %v2_15200, %dec_label_pc_15218 ]
  %v3_15220 = udiv i32 %v0_15220, 256
  %v1_15224 = inttoptr i32 %v0_15224 to i32*
  %v2_15224 = load i32, i32* %v1_15224, align 4
  store i32 %v2_15224, i32* %r4.global-to-local, align 4
  %v3_15224 = add i32 %v0_15224, 4
  %v4_15224 = inttoptr i32 %v3_15224 to i32*
  %v5_15224 = load i32, i32* %v4_15224, align 4
  store i32 %v5_15224, i32* %r5.global-to-local, align 4
  %v6_15224 = add i32 %v0_15224, 8
  %v7_15224 = inttoptr i32 %v6_15224 to i32*
  %v8_15224 = load i32, i32* %v7_15224, align 4
  store i32 %v8_15224, i32* %ip.global-to-local, align 4
  %v9_15224 = add i32 %v0_15224, 12
  %v10_15224 = inttoptr i32 %v9_15224 to i32*
  %v11_15224 = load i32, i32* %v10_15224, align 4
  store i32 %v11_15224, i32* %lr.global-to-local, align 4
  %v12_15224 = add i32 %v0_15224, 16
  store i32 %v12_15224, i32* %r1.global-to-local, align 4
  %v4_15228 = mul i32 %v2_15224, 16777216
  %v5_15228 = or i32 %v4_15228, %v3_15220
  store i32 %v5_15228, i32* @r3, align 4
  %v3_1522c = udiv i32 %v2_15224, 256
  %v4_15230 = mul i32 %v5_15224, 16777216
  %v5_15230 = or i32 %v4_15230, %v3_1522c
  store i32 %v5_15230, i32* %r4.global-to-local, align 4
  %v3_15234 = udiv i32 %v5_15224, 256
  %v4_15238 = mul i32 %v8_15224, 16777216
  %v5_15238 = or i32 %v4_15238, %v3_15234
  store i32 %v5_15238, i32* %r5.global-to-local, align 4
  %v3_1523c = udiv i32 %v8_15224, 256
  %v4_15240 = mul i32 %v11_15224, 16777216
  %v5_15240 = or i32 %v4_15240, %v3_1523c
  store i32 %v5_15240, i32* @ip, align 4
  %v1_15244 = inttoptr i32 %v0_15244 to i32*
  store i32 %v5_15228, i32* %v1_15244, align 4
  %v3_15244 = add i32 %v0_15244, 4
  %v4_15244 = inttoptr i32 %v3_15244 to i32*
  %v5_15244 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15244, i32* %v4_15244, align 4
  %v6_15244 = add i32 %v0_15244, 8
  %v7_15244 = inttoptr i32 %v6_15244 to i32*
  %v8_15244 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15244, i32* %v7_15244, align 4
  %v9_15244 = add i32 %v0_15244, 12
  %v10_15244 = inttoptr i32 %v9_15244 to i32*
  %v11_15244 = load i32, i32* @ip, align 4
  store i32 %v11_15244, i32* %v10_15244, align 4
  %v12_15244 = add i32 %v0_15244, 16
  store i32 %v12_15244, i32* @r0, align 4
  %v0_15248 = load i32, i32* %r2.global-to-local, align 4
  %v1_15248 = add i32 %v0_15248, -16
  store i32 %v1_15248, i32* %r2.global-to-local, align 4
  %v3_15248 = sub i32 15, %v0_15248
  %v4_15248 = and i32 %v3_15248, %v0_15248
  %v5_15248 = icmp slt i32 %v4_15248, 0
  %v6_15248 = icmp slt i32 %v1_15248, 0
  %v2_1524c = xor i1 %v6_15248, %v5_15248
  br i1 %v2_1524c, label %dec_label_pc_15250, label %dec_label_pc_15220.dec_label_pc_15220_crit_edge

dec_label_pc_15220.dec_label_pc_15220_crit_edge:  ; preds = %dec_label_pc_15220
  %v0_15220.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15224.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15220

dec_label_pc_15250:                               ; preds = %dec_label_pc_15220
  %v2_15250 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15250, i32* @r4, align 4
  %v5_15250 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15250, i32* @r5, align 4
  %v1_15254 = add i32 %v0_15248, -4
  store i32 %v1_15254, i32* %r2.global-to-local, align 4
  %v3_15254 = add i32 %v0_15248, 2147483632
  %v4_15254 = and i32 %v1_15254, %v3_15254
  %v5_15254 = icmp slt i32 %v4_15254, 0
  store i1 %v5_15254, i1* %cpsr_v.global-to-local, align 1
  %v6_15254 = icmp slt i32 %v1_15254, 0
  store i1 %v6_15254, i1* %cpsr_n.global-to-local, align 1
  %v7_15254 = icmp eq i32 %v1_15254, 0
  store i1 %v7_15254, i1* %cpsr_z.global-to-local, align 1
  %v2_15258 = xor i1 %v6_15254, %v5_15254
  br i1 %v2_15258, label %dec_label_pc_15274, label %dec_label_pc_1525c

dec_label_pc_1525c:                               ; preds = %dec_label_pc_15250, %dec_label_pc_15210, %dec_label_pc_1525c
  %v1_15268 = phi i32 [ %v4_15268, %dec_label_pc_1525c ], [ %v12_15244, %dec_label_pc_15250 ], [ %v0_1531c76, %dec_label_pc_15210 ]
  %v0_1525c = load i32, i32* %lr.global-to-local, align 4
  %v3_1525c = udiv i32 %v0_1525c, 256
  store i32 %v3_1525c, i32* %ip.global-to-local, align 4
  %v0_15260 = load i32, i32* %r1.global-to-local, align 4
  %v1_15260 = inttoptr i32 %v0_15260 to i32*
  %v2_15260 = load i32, i32* %v1_15260, align 4
  store i32 %v2_15260, i32* %lr.global-to-local, align 4
  %v4_15260 = add i32 %v0_15260, 4
  store i32 %v4_15260, i32* %r1.global-to-local, align 4
  %v4_15264 = mul i32 %v2_15260, 16777216
  %v5_15264 = or i32 %v4_15264, %v3_1525c
  store i32 %v5_15264, i32* @ip, align 4
  %v2_15268 = inttoptr i32 %v1_15268 to i32*
  store i32 %v5_15264, i32* %v2_15268, align 4
  %v3_15268 = load i32, i32* @r0, align 4
  %v4_15268 = add i32 %v3_15268, 4
  store i32 %v4_15268, i32* @r0, align 4
  %v0_1526c = load i32, i32* %r2.global-to-local, align 4
  %v1_1526c = add i32 %v0_1526c, -4
  store i32 %v1_1526c, i32* %r2.global-to-local, align 4
  %v3_1526c = sub i32 3, %v0_1526c
  %v4_1526c = and i32 %v3_1526c, %v0_1526c
  %v5_1526c = icmp slt i32 %v4_1526c, 0
  %v6_1526c = icmp slt i32 %v1_1526c, 0
  %v2_15270 = xor i1 %v6_1526c, %v5_1526c
  br i1 %v2_15270, label %dec_label_pc_15274.loopexit, label %dec_label_pc_1525c

dec_label_pc_15274.loopexit:                      ; preds = %dec_label_pc_1525c
  %v7_1526c = icmp eq i32 %v0_1526c, 4
  store i1 %v5_1526c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1526c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1526c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15274

dec_label_pc_15274:                               ; preds = %dec_label_pc_15274.loopexit, %dec_label_pc_15250
  %v0_1519c59 = phi i32 [ %v1_1526c, %dec_label_pc_15274.loopexit ], [ %v1_15254, %dec_label_pc_15250 ]
  %v0_15274 = load i32, i32* %r1.global-to-local, align 4
  %v1_15274 = add i32 %v0_15274, -3
  store i32 %v1_15274, i32* @r1, align 4
  br label %bb140

dec_label_pc_1527c:                               ; preds = %dec_label_pc_151fc
  br i1 %v2_15280, label %dec_label_pc_152c8, label %dec_label_pc_15284

dec_label_pc_15284:                               ; preds = %dec_label_pc_1527c
  store i32 %v1_1527c, i32* %r2.global-to-local, align 4
  %v3_15288 = load i32, i32* @r4, align 4
  store i32 %v3_15288, i32* %stack_var_-16, align 4
  %v6_15288 = load i32, i32* @r5, align 4
  store i32 %v6_15288, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1528c

dec_label_pc_1528c:                               ; preds = %dec_label_pc_1528c.dec_label_pc_1528c_crit_edge, %dec_label_pc_15284
  %v0_152b0 = phi i32 [ %v12_152b0, %dec_label_pc_1528c.dec_label_pc_1528c_crit_edge ], [ %v0_1531c76, %dec_label_pc_15284 ]
  %v0_15290 = phi i32 [ %v0_15290.pre, %dec_label_pc_1528c.dec_label_pc_1528c_crit_edge ], [ %v4_15200, %dec_label_pc_15284 ]
  %v0_1528c = phi i32 [ %v0_1528c.pre, %dec_label_pc_1528c.dec_label_pc_1528c_crit_edge ], [ %v2_15200, %dec_label_pc_15284 ]
  %v3_1528c = udiv i32 %v0_1528c, 65536
  %v1_15290 = inttoptr i32 %v0_15290 to i32*
  %v2_15290 = load i32, i32* %v1_15290, align 4
  store i32 %v2_15290, i32* %r4.global-to-local, align 4
  %v3_15290 = add i32 %v0_15290, 4
  %v4_15290 = inttoptr i32 %v3_15290 to i32*
  %v5_15290 = load i32, i32* %v4_15290, align 4
  store i32 %v5_15290, i32* %r5.global-to-local, align 4
  %v6_15290 = add i32 %v0_15290, 8
  %v7_15290 = inttoptr i32 %v6_15290 to i32*
  %v8_15290 = load i32, i32* %v7_15290, align 4
  store i32 %v8_15290, i32* %ip.global-to-local, align 4
  %v9_15290 = add i32 %v0_15290, 12
  %v10_15290 = inttoptr i32 %v9_15290 to i32*
  %v11_15290 = load i32, i32* %v10_15290, align 4
  store i32 %v11_15290, i32* %lr.global-to-local, align 4
  %v12_15290 = add i32 %v0_15290, 16
  store i32 %v12_15290, i32* %r1.global-to-local, align 4
  %v4_15294 = mul i32 %v2_15290, 65536
  %v5_15294 = or i32 %v4_15294, %v3_1528c
  store i32 %v5_15294, i32* @r3, align 4
  %v3_15298 = udiv i32 %v2_15290, 65536
  %v4_1529c = mul i32 %v5_15290, 65536
  %v5_1529c = or i32 %v4_1529c, %v3_15298
  store i32 %v5_1529c, i32* %r4.global-to-local, align 4
  %v3_152a0 = udiv i32 %v5_15290, 65536
  %v4_152a4 = mul i32 %v8_15290, 65536
  %v5_152a4 = or i32 %v4_152a4, %v3_152a0
  store i32 %v5_152a4, i32* %r5.global-to-local, align 4
  %v3_152a8 = udiv i32 %v8_15290, 65536
  %v4_152ac = mul i32 %v11_15290, 65536
  %v5_152ac = or i32 %v4_152ac, %v3_152a8
  store i32 %v5_152ac, i32* @ip, align 4
  %v1_152b0 = inttoptr i32 %v0_152b0 to i32*
  store i32 %v5_15294, i32* %v1_152b0, align 4
  %v3_152b0 = add i32 %v0_152b0, 4
  %v4_152b0 = inttoptr i32 %v3_152b0 to i32*
  %v5_152b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_152b0, i32* %v4_152b0, align 4
  %v6_152b0 = add i32 %v0_152b0, 8
  %v7_152b0 = inttoptr i32 %v6_152b0 to i32*
  %v8_152b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_152b0, i32* %v7_152b0, align 4
  %v9_152b0 = add i32 %v0_152b0, 12
  %v10_152b0 = inttoptr i32 %v9_152b0 to i32*
  %v11_152b0 = load i32, i32* @ip, align 4
  store i32 %v11_152b0, i32* %v10_152b0, align 4
  %v12_152b0 = add i32 %v0_152b0, 16
  store i32 %v12_152b0, i32* @r0, align 4
  %v0_152b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_152b4 = add i32 %v0_152b4, -16
  store i32 %v1_152b4, i32* %r2.global-to-local, align 4
  %v3_152b4 = sub i32 15, %v0_152b4
  %v4_152b4 = and i32 %v3_152b4, %v0_152b4
  %v5_152b4 = icmp slt i32 %v4_152b4, 0
  %v6_152b4 = icmp slt i32 %v1_152b4, 0
  %v2_152b8 = xor i1 %v6_152b4, %v5_152b4
  br i1 %v2_152b8, label %dec_label_pc_152bc, label %dec_label_pc_1528c.dec_label_pc_1528c_crit_edge

dec_label_pc_1528c.dec_label_pc_1528c_crit_edge:  ; preds = %dec_label_pc_1528c
  %v0_1528c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15290.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1528c

dec_label_pc_152bc:                               ; preds = %dec_label_pc_1528c
  %v2_152bc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_152bc, i32* @r4, align 4
  %v5_152bc = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_152bc, i32* @r5, align 4
  %v1_152c0 = add i32 %v0_152b4, -4
  store i32 %v1_152c0, i32* %r2.global-to-local, align 4
  %v3_152c0 = add i32 %v0_152b4, 2147483632
  %v4_152c0 = and i32 %v1_152c0, %v3_152c0
  %v5_152c0 = icmp slt i32 %v4_152c0, 0
  store i1 %v5_152c0, i1* %cpsr_v.global-to-local, align 1
  %v6_152c0 = icmp slt i32 %v1_152c0, 0
  store i1 %v6_152c0, i1* %cpsr_n.global-to-local, align 1
  %v7_152c0 = icmp eq i32 %v1_152c0, 0
  store i1 %v7_152c0, i1* %cpsr_z.global-to-local, align 1
  %v2_152c4 = xor i1 %v6_152c0, %v5_152c0
  br i1 %v2_152c4, label %dec_label_pc_152e0, label %dec_label_pc_152c8

dec_label_pc_152c8:                               ; preds = %dec_label_pc_152bc, %dec_label_pc_1527c, %dec_label_pc_152c8
  %v1_152d4 = phi i32 [ %v4_152d4, %dec_label_pc_152c8 ], [ %v12_152b0, %dec_label_pc_152bc ], [ %v0_1531c76, %dec_label_pc_1527c ]
  %v0_152c8 = load i32, i32* %lr.global-to-local, align 4
  %v3_152c8 = udiv i32 %v0_152c8, 65536
  store i32 %v3_152c8, i32* %ip.global-to-local, align 4
  %v0_152cc = load i32, i32* %r1.global-to-local, align 4
  %v1_152cc = inttoptr i32 %v0_152cc to i32*
  %v2_152cc = load i32, i32* %v1_152cc, align 4
  store i32 %v2_152cc, i32* %lr.global-to-local, align 4
  %v4_152cc = add i32 %v0_152cc, 4
  store i32 %v4_152cc, i32* %r1.global-to-local, align 4
  %v4_152d0 = mul i32 %v2_152cc, 65536
  %v5_152d0 = or i32 %v4_152d0, %v3_152c8
  store i32 %v5_152d0, i32* @ip, align 4
  %v2_152d4 = inttoptr i32 %v1_152d4 to i32*
  store i32 %v5_152d0, i32* %v2_152d4, align 4
  %v3_152d4 = load i32, i32* @r0, align 4
  %v4_152d4 = add i32 %v3_152d4, 4
  store i32 %v4_152d4, i32* @r0, align 4
  %v0_152d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_152d8 = add i32 %v0_152d8, -4
  store i32 %v1_152d8, i32* %r2.global-to-local, align 4
  %v3_152d8 = sub i32 3, %v0_152d8
  %v4_152d8 = and i32 %v3_152d8, %v0_152d8
  %v5_152d8 = icmp slt i32 %v4_152d8, 0
  %v6_152d8 = icmp slt i32 %v1_152d8, 0
  %v2_152dc = xor i1 %v6_152d8, %v5_152d8
  br i1 %v2_152dc, label %dec_label_pc_152e0.loopexit, label %dec_label_pc_152c8

dec_label_pc_152e0.loopexit:                      ; preds = %dec_label_pc_152c8
  %v7_152d8 = icmp eq i32 %v0_152d8, 4
  store i1 %v5_152d8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_152d8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_152d8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_152e0

dec_label_pc_152e0:                               ; preds = %dec_label_pc_152e0.loopexit, %dec_label_pc_152bc
  %v0_1519c60 = phi i32 [ %v1_152d8, %dec_label_pc_152e0.loopexit ], [ %v1_152c0, %dec_label_pc_152bc ]
  %v0_152e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_152e0 = add i32 %v0_152e0, -2
  store i32 %v1_152e0, i32* @r1, align 4
  br label %bb140

dec_label_pc_152e8:                               ; preds = %dec_label_pc_151fc
  br i1 %v2_15280, label %dec_label_pc_15334, label %dec_label_pc_152f0

dec_label_pc_152f0:                               ; preds = %dec_label_pc_152e8
  store i32 %v1_1527c, i32* %r2.global-to-local, align 4
  %v3_152f4 = load i32, i32* @r4, align 4
  store i32 %v3_152f4, i32* %stack_var_-16, align 4
  %v6_152f4 = load i32, i32* @r5, align 4
  store i32 %v6_152f4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_152f8

dec_label_pc_152f8:                               ; preds = %dec_label_pc_152f8.dec_label_pc_152f8_crit_edge, %dec_label_pc_152f0
  %v0_1531c = phi i32 [ %v12_1531c, %dec_label_pc_152f8.dec_label_pc_152f8_crit_edge ], [ %v0_1531c76, %dec_label_pc_152f0 ]
  %v0_152fc = phi i32 [ %v0_152fc.pre, %dec_label_pc_152f8.dec_label_pc_152f8_crit_edge ], [ %v4_15200, %dec_label_pc_152f0 ]
  %v0_152f8 = phi i32 [ %v0_152f8.pre, %dec_label_pc_152f8.dec_label_pc_152f8_crit_edge ], [ %v2_15200, %dec_label_pc_152f0 ]
  %v3_152f8 = udiv i32 %v0_152f8, 16777216
  %v1_152fc = inttoptr i32 %v0_152fc to i32*
  %v2_152fc = load i32, i32* %v1_152fc, align 4
  store i32 %v2_152fc, i32* %r4.global-to-local, align 4
  %v3_152fc = add i32 %v0_152fc, 4
  %v4_152fc = inttoptr i32 %v3_152fc to i32*
  %v5_152fc = load i32, i32* %v4_152fc, align 4
  store i32 %v5_152fc, i32* %r5.global-to-local, align 4
  %v6_152fc = add i32 %v0_152fc, 8
  %v7_152fc = inttoptr i32 %v6_152fc to i32*
  %v8_152fc = load i32, i32* %v7_152fc, align 4
  store i32 %v8_152fc, i32* %ip.global-to-local, align 4
  %v9_152fc = add i32 %v0_152fc, 12
  %v10_152fc = inttoptr i32 %v9_152fc to i32*
  %v11_152fc = load i32, i32* %v10_152fc, align 4
  store i32 %v11_152fc, i32* %lr.global-to-local, align 4
  %v12_152fc = add i32 %v0_152fc, 16
  store i32 %v12_152fc, i32* %r1.global-to-local, align 4
  %v4_15300 = mul i32 %v2_152fc, 256
  %v5_15300 = or i32 %v4_15300, %v3_152f8
  store i32 %v5_15300, i32* @r3, align 4
  %v3_15304 = udiv i32 %v2_152fc, 16777216
  %v4_15308 = mul i32 %v5_152fc, 256
  %v5_15308 = or i32 %v4_15308, %v3_15304
  store i32 %v5_15308, i32* %r4.global-to-local, align 4
  %v3_1530c = udiv i32 %v5_152fc, 16777216
  %v4_15310 = mul i32 %v8_152fc, 256
  %v5_15310 = or i32 %v4_15310, %v3_1530c
  store i32 %v5_15310, i32* %r5.global-to-local, align 4
  %v3_15314 = udiv i32 %v8_152fc, 16777216
  %v4_15318 = mul i32 %v11_152fc, 256
  %v5_15318 = or i32 %v4_15318, %v3_15314
  store i32 %v5_15318, i32* @ip, align 4
  %v1_1531c = inttoptr i32 %v0_1531c to i32*
  store i32 %v5_15300, i32* %v1_1531c, align 4
  %v3_1531c = add i32 %v0_1531c, 4
  %v4_1531c = inttoptr i32 %v3_1531c to i32*
  %v5_1531c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1531c, i32* %v4_1531c, align 4
  %v6_1531c = add i32 %v0_1531c, 8
  %v7_1531c = inttoptr i32 %v6_1531c to i32*
  %v8_1531c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1531c, i32* %v7_1531c, align 4
  %v9_1531c = add i32 %v0_1531c, 12
  %v10_1531c = inttoptr i32 %v9_1531c to i32*
  %v11_1531c = load i32, i32* @ip, align 4
  store i32 %v11_1531c, i32* %v10_1531c, align 4
  %v12_1531c = add i32 %v0_1531c, 16
  store i32 %v12_1531c, i32* @r0, align 4
  %v0_15320 = load i32, i32* %r2.global-to-local, align 4
  %v1_15320 = add i32 %v0_15320, -16
  store i32 %v1_15320, i32* %r2.global-to-local, align 4
  %v3_15320 = sub i32 15, %v0_15320
  %v4_15320 = and i32 %v3_15320, %v0_15320
  %v5_15320 = icmp slt i32 %v4_15320, 0
  %v6_15320 = icmp slt i32 %v1_15320, 0
  %v2_15324 = xor i1 %v6_15320, %v5_15320
  br i1 %v2_15324, label %dec_label_pc_15328, label %dec_label_pc_152f8.dec_label_pc_152f8_crit_edge

dec_label_pc_152f8.dec_label_pc_152f8_crit_edge:  ; preds = %dec_label_pc_152f8
  %v0_152f8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_152fc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_152f8

dec_label_pc_15328:                               ; preds = %dec_label_pc_152f8
  %v2_15328 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15328, i32* @r4, align 4
  %v5_15328 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15328, i32* @r5, align 4
  %v1_1532c = add i32 %v0_15320, -4
  store i32 %v1_1532c, i32* %r2.global-to-local, align 4
  %v3_1532c = add i32 %v0_15320, 2147483632
  %v4_1532c = and i32 %v1_1532c, %v3_1532c
  %v5_1532c = icmp slt i32 %v4_1532c, 0
  store i1 %v5_1532c, i1* %cpsr_v.global-to-local, align 1
  %v6_1532c = icmp slt i32 %v1_1532c, 0
  store i1 %v6_1532c, i1* %cpsr_n.global-to-local, align 1
  %v7_1532c = icmp eq i32 %v1_1532c, 0
  store i1 %v7_1532c, i1* %cpsr_z.global-to-local, align 1
  %v2_15330 = xor i1 %v6_1532c, %v5_1532c
  br i1 %v2_15330, label %dec_label_pc_1534c, label %dec_label_pc_15334

dec_label_pc_15334:                               ; preds = %dec_label_pc_15328, %dec_label_pc_152e8, %dec_label_pc_15334
  %v1_15340 = phi i32 [ %v4_15340, %dec_label_pc_15334 ], [ %v12_1531c, %dec_label_pc_15328 ], [ %v0_1531c76, %dec_label_pc_152e8 ]
  %v0_15334 = load i32, i32* %lr.global-to-local, align 4
  %v3_15334 = udiv i32 %v0_15334, 16777216
  store i32 %v3_15334, i32* %ip.global-to-local, align 4
  %v0_15338 = load i32, i32* %r1.global-to-local, align 4
  %v1_15338 = inttoptr i32 %v0_15338 to i32*
  %v2_15338 = load i32, i32* %v1_15338, align 4
  store i32 %v2_15338, i32* %lr.global-to-local, align 4
  %v4_15338 = add i32 %v0_15338, 4
  store i32 %v4_15338, i32* %r1.global-to-local, align 4
  %v4_1533c = mul i32 %v2_15338, 256
  %v5_1533c = or i32 %v4_1533c, %v3_15334
  store i32 %v5_1533c, i32* @ip, align 4
  %v2_15340 = inttoptr i32 %v1_15340 to i32*
  store i32 %v5_1533c, i32* %v2_15340, align 4
  %v3_15340 = load i32, i32* @r0, align 4
  %v4_15340 = add i32 %v3_15340, 4
  store i32 %v4_15340, i32* @r0, align 4
  %v0_15344 = load i32, i32* %r2.global-to-local, align 4
  %v1_15344 = add i32 %v0_15344, -4
  store i32 %v1_15344, i32* %r2.global-to-local, align 4
  %v3_15344 = sub i32 3, %v0_15344
  %v4_15344 = and i32 %v3_15344, %v0_15344
  %v5_15344 = icmp slt i32 %v4_15344, 0
  %v6_15344 = icmp slt i32 %v1_15344, 0
  %v2_15348 = xor i1 %v6_15344, %v5_15344
  br i1 %v2_15348, label %dec_label_pc_1534c.loopexit, label %dec_label_pc_15334

dec_label_pc_1534c.loopexit:                      ; preds = %dec_label_pc_15334
  %v7_15344 = icmp eq i32 %v0_15344, 4
  store i1 %v5_15344, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15344, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15344, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1534c

dec_label_pc_1534c:                               ; preds = %dec_label_pc_1534c.loopexit, %dec_label_pc_15328
  %v0_1519c61 = phi i32 [ %v1_15344, %dec_label_pc_1534c.loopexit ], [ %v1_1532c, %dec_label_pc_15328 ]
  %v0_1534c = load i32, i32* %r1.global-to-local, align 4
  %v1_1534c = add i32 %v0_1534c, -1
  store i32 %v1_1534c, i32* @r1, align 4
  br label %bb140

dec_label_pc_15354:                               ; preds = %dec_label_pc_15100
  %v1_15354 = load i32, i32* @r2, align 4
  %v2_15354 = add i32 %v1_15354, %v0_15100
  store i32 %v2_15354, i32* %r1.global-to-local, align 4
  %v2_15358 = add i32 %v1_15354, %v1_15100
  store i32 %v2_15358, i32* %r0.global-to-local, align 4
  %v2_1535c = add i32 %v1_15354, -4
  store i32 %v2_1535c, i32* %r2.global-to-local, align 4
  %v4_1535c = sub i32 3, %v1_15354
  %v5_1535c = and i32 %v4_1535c, %v1_15354
  %v6_1535c = icmp slt i32 %v5_1535c, 0
  store i1 %v6_1535c, i1* %cpsr_v.global-to-local, align 1
  %v7_1535c = icmp slt i32 %v2_1535c, 0
  store i1 %v7_1535c, i1* %cpsr_n.global-to-local, align 1
  %v8_1535c = icmp eq i32 %v1_15354, 4
  store i1 %v8_1535c, i1* %cpsr_z.global-to-local, align 1
  %v5_15360 = icmp slt i32 %v1_15354, 4
  br i1 %v5_15360, label %bb150, label %dec_label_pc_15364

dec_label_pc_15364:                               ; preds = %dec_label_pc_15354
  %v1_15364 = urem i32 %v2_15358, 4
  store i32 %v1_15364, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15364 = icmp eq i32 %v1_15364, 0
  store i1 %v2_15364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15364, label %dec_label_pc_1536c, label %dec_label_pc_1540c

dec_label_pc_1536c:                               ; preds = %dec_label_pc_15364
  %v1_1536c = urem i32 %v2_15354, 4
  store i32 %v1_1536c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1536c = icmp eq i32 %v1_1536c, 0
  store i1 %v2_1536c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1536c, label %dec_label_pc_15374, label %dec_label_pc_15438

dec_label_pc_15374:                               ; preds = %dec_label_pc_1536c, %dec_label_pc_15430
  %v0_1538c37 = phi i32 [ %v2_15358, %dec_label_pc_1536c ], [ %v0_1548020, %dec_label_pc_15430 ]
  %v0_1538836 = phi i32 [ %v2_15354, %dec_label_pc_1536c ], [ %v0_15430, %dec_label_pc_15430 ]
  %v0_15374 = phi i32 [ %v2_1535c, %dec_label_pc_1536c ], [ %v2_15428, %dec_label_pc_15430 ]
  %v2_15374 = add i32 %v0_15374, -8
  store i32 %v2_15374, i32* %r2.global-to-local, align 4
  %v4_15374 = sub i32 7, %v0_15374
  %v5_15374 = and i32 %v4_15374, %v0_15374
  %v6_15374 = icmp slt i32 %v5_15374, 0
  store i1 %v6_15374, i1* %cpsr_v.global-to-local, align 1
  %v7_15374 = icmp slt i32 %v2_15374, 0
  store i1 %v7_15374, i1* %cpsr_n.global-to-local, align 1
  %v8_15374 = icmp eq i32 %v0_15374, 8
  store i1 %v8_15374, i1* %cpsr_z.global-to-local, align 1
  %v5_15378 = icmp slt i32 %v0_15374, 8
  br i1 %v5_15378, label %dec_label_pc_153c4, label %dec_label_pc_1537c

dec_label_pc_1537c:                               ; preds = %dec_label_pc_15374
  %v3_1537c = load i32, i32* @r4, align 4
  %v5_1537c = inttoptr i32 %v3_1537c to i8*
  store i8* %v5_1537c, i8** %stack_var_-8, align 4
  %v8_1537c = load i32, i32* @lr, align 4
  %v2_15380 = add i32 %v0_15374, -28
  store i32 %v2_15380, i32* %r2.global-to-local, align 4
  %v4_15380 = sub i32 27, %v0_15374
  %v5_15380 = and i32 %v4_15380, %v2_15374
  %v6_15380 = icmp slt i32 %v5_15380, 0
  store i1 %v6_15380, i1* %cpsr_v.global-to-local, align 1
  %v7_15380 = icmp slt i32 %v2_15380, 0
  store i1 %v7_15380, i1* %cpsr_n.global-to-local, align 1
  %v8_15380 = icmp eq i32 %v2_15374, 20
  store i1 %v8_15380, i1* %cpsr_z.global-to-local, align 1
  %v5_15384 = icmp slt i32 %v2_15374, 20
  br i1 %v5_15384, label %dec_label_pc_153a0, label %dec_label_pc_15388

dec_label_pc_15388:                               ; preds = %dec_label_pc_1537c, %dec_label_pc_15388.dec_label_pc_15388_crit_edge
  %v0_1538c = phi i32 [ %v1_15394, %dec_label_pc_15388.dec_label_pc_15388_crit_edge ], [ %v0_1538c37, %dec_label_pc_1537c ]
  %v0_15388 = phi i32 [ %v0_15388.pre, %dec_label_pc_15388.dec_label_pc_15388_crit_edge ], [ %v0_1538836, %dec_label_pc_1537c ]
  %v1_15388 = add i32 %v0_15388, -4
  %v2_15388 = inttoptr i32 %v1_15388 to i32*
  %v3_15388 = load i32, i32* %v2_15388, align 4
  %v4_15388 = add i32 %v0_15388, -8
  %v5_15388 = inttoptr i32 %v4_15388 to i32*
  %v6_15388 = load i32, i32* %v5_15388, align 4
  store i32 %v6_15388, i32* %r4.global-to-local, align 4
  %v7_15388 = add i32 %v0_15388, -12
  %v8_15388 = inttoptr i32 %v7_15388 to i32*
  %v9_15388 = load i32, i32* %v8_15388, align 4
  store i32 %v9_15388, i32* %ip.global-to-local, align 4
  %v10_15388 = add i32 %v0_15388, -16
  %v11_15388 = inttoptr i32 %v10_15388 to i32*
  %v12_15388 = load i32, i32* %v11_15388, align 4
  store i32 %v12_15388, i32* %lr.global-to-local, align 4
  store i32 %v10_15388, i32* %r1.global-to-local, align 4
  %v1_1538c = add i32 %v0_1538c, -16
  %v2_1538c = inttoptr i32 %v1_1538c to i32*
  store i32 %v3_15388, i32* %v2_1538c, align 4
  %v4_1538c = add i32 %v0_1538c, -12
  %v5_1538c = inttoptr i32 %v4_1538c to i32*
  %v6_1538c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1538c, i32* %v5_1538c, align 4
  %v7_1538c = add i32 %v0_1538c, -8
  %v8_1538c = inttoptr i32 %v7_1538c to i32*
  %v9_1538c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1538c, i32* %v8_1538c, align 4
  %v10_1538c = add i32 %v0_1538c, -4
  %v11_1538c = inttoptr i32 %v10_1538c to i32*
  %v12_1538c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1538c, i32* %v11_1538c, align 4
  store i32 %v1_1538c, i32* %r0.global-to-local, align 4
  %v0_15390 = load i32, i32* %r1.global-to-local, align 4
  %v1_15390 = add i32 %v0_15390, -4
  %v2_15390 = inttoptr i32 %v1_15390 to i32*
  %v3_15390 = load i32, i32* %v2_15390, align 4
  store i32 %v3_15390, i32* @r3, align 4
  %v4_15390 = add i32 %v0_15390, -8
  %v5_15390 = inttoptr i32 %v4_15390 to i32*
  %v6_15390 = load i32, i32* %v5_15390, align 4
  store i32 %v6_15390, i32* %r4.global-to-local, align 4
  %v7_15390 = add i32 %v0_15390, -12
  %v8_15390 = inttoptr i32 %v7_15390 to i32*
  %v9_15390 = load i32, i32* %v8_15390, align 4
  store i32 %v9_15390, i32* @ip, align 4
  %v10_15390 = add i32 %v0_15390, -16
  %v11_15390 = inttoptr i32 %v10_15390 to i32*
  %v12_15390 = load i32, i32* %v11_15390, align 4
  store i32 %v12_15390, i32* %lr.global-to-local, align 4
  store i32 %v10_15390, i32* %r1.global-to-local, align 4
  %v1_15394 = add i32 %v0_1538c, -32
  %v2_15394 = inttoptr i32 %v1_15394 to i32*
  store i32 %v3_15390, i32* %v2_15394, align 4
  %v4_15394 = add i32 %v0_1538c, -28
  %v5_15394 = inttoptr i32 %v4_15394 to i32*
  %v6_15394 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15394, i32* %v5_15394, align 4
  %v7_15394 = add i32 %v0_1538c, -24
  %v8_15394 = inttoptr i32 %v7_15394 to i32*
  %v9_15394 = load i32, i32* @ip, align 4
  store i32 %v9_15394, i32* %v8_15394, align 4
  %v10_15394 = add i32 %v0_1538c, -20
  %v11_15394 = inttoptr i32 %v10_15394 to i32*
  %v12_15394 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15394, i32* %v11_15394, align 4
  store i32 %v1_15394, i32* %r0.global-to-local, align 4
  %v0_15398 = load i32, i32* %r2.global-to-local, align 4
  %v2_15398 = add i32 %v0_15398, -32
  store i32 %v2_15398, i32* %r2.global-to-local, align 4
  %v6_1539c = icmp slt i32 %v0_15398, 32
  br i1 %v6_1539c, label %dec_label_pc_153a0.loopexit, label %dec_label_pc_15388.dec_label_pc_15388_crit_edge

dec_label_pc_15388.dec_label_pc_15388_crit_edge:  ; preds = %dec_label_pc_15388
  %v0_15388.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15388

dec_label_pc_153a0.loopexit:                      ; preds = %dec_label_pc_15388
  %v4_15398 = sub i32 31, %v0_15398
  %v5_15398 = and i32 %v4_15398, %v0_15398
  %v6_15398 = icmp slt i32 %v5_15398, 0
  %v7_15398 = icmp slt i32 %v2_15398, 0
  store i1 %v6_15398, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15398, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_153a0

dec_label_pc_153a0:                               ; preds = %dec_label_pc_153a0.loopexit, %dec_label_pc_1537c
  %v6_153a8 = phi i32 [ %v1_15394, %dec_label_pc_153a0.loopexit ], [ %v0_1538c37, %dec_label_pc_1537c ]
  %v0_153b0.pr = phi i32 [ %v2_15398, %dec_label_pc_153a0.loopexit ], [ %v2_15380, %dec_label_pc_1537c ]
  %v4_153a0 = add i32 %v0_153b0.pr, 16
  %v6_153a0 = sub i32 0, %v0_153b0.pr
  %v7_153a0 = and i32 %v4_153a0, %v6_153a0
  %v8_153a0 = icmp slt i32 %v7_153a0, 0
  store i1 %v8_153a0, i1* %cpsr_v.global-to-local, align 1
  %v9_153a0 = icmp slt i32 %v4_153a0, 0
  store i1 %v9_153a0, i1* %cpsr_n.global-to-local, align 1
  %v10_153a0 = icmp eq i32 %v4_153a0, 0
  store i1 %v10_153a0, i1* %cpsr_z.global-to-local, align 1
  %v5_153a4 = icmp slt i32 %v0_153b0.pr, -16
  br i1 %v5_153a4, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_153a0
  %v6_153a4 = load i32, i32* %r1.global-to-local, align 4
  %v7_153a4 = add i32 %v6_153a4, -4
  %v8_153a4 = inttoptr i32 %v7_153a4 to i32*
  %v9_153a4 = load i32, i32* %v8_153a4, align 4
  store i32 %v9_153a4, i32* @r3, align 4
  %v10_153a4 = add i32 %v6_153a4, -8
  %v11_153a4 = inttoptr i32 %v10_153a4 to i32*
  %v12_153a4 = load i32, i32* %v11_153a4, align 4
  store i32 %v12_153a4, i32* %r4.global-to-local, align 4
  %v13_153a4 = add i32 %v6_153a4, -12
  %v14_153a4 = inttoptr i32 %v13_153a4 to i32*
  %v15_153a4 = load i32, i32* %v14_153a4, align 4
  store i32 %v15_153a4, i32* @ip, align 4
  %v16_153a4 = add i32 %v6_153a4, -16
  %v17_153a4 = inttoptr i32 %v16_153a4 to i32*
  %v18_153a4 = load i32, i32* %v17_153a4, align 4
  store i32 %v18_153a4, i32* %lr.global-to-local, align 4
  store i32 %v16_153a4, i32* %r1.global-to-local, align 4
  %v7_153a8 = add i32 %v6_153a8, -16
  %v8_153a8 = inttoptr i32 %v7_153a8 to i32*
  store i32 %v9_153a4, i32* %v8_153a8, align 4
  %v10_153a8 = add i32 %v6_153a8, -12
  %v11_153a8 = inttoptr i32 %v10_153a8 to i32*
  %v12_153a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_153a8, i32* %v11_153a8, align 4
  %v13_153a8 = add i32 %v6_153a8, -8
  %v14_153a8 = inttoptr i32 %v13_153a8 to i32*
  %v15_153a8 = load i32, i32* @ip, align 4
  store i32 %v15_153a8, i32* %v14_153a8, align 4
  %v16_153a8 = add i32 %v6_153a8, -4
  %v17_153a8 = inttoptr i32 %v16_153a8 to i32*
  %v18_153a8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_153a8, i32* %v17_153a8, align 4
  store i32 %v7_153a8, i32* %r0.global-to-local, align 4
  %v6_153ac = load i32, i32* %r2.global-to-local, align 4
  %v7_153ac = add i32 %v6_153ac, -16
  store i32 %v7_153ac, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_153a0, %bb147
  %v6_153b8 = phi i32 [ %v7_153a8, %bb147 ], [ %v6_153a8, %dec_label_pc_153a0 ]
  %v0_153b0 = phi i32 [ %v7_153ac, %bb147 ], [ %v0_153b0.pr, %dec_label_pc_153a0 ]
  %v4_153b0 = add i32 %v0_153b0, 20
  store i32 %v4_153b0, i32* %r2.global-to-local, align 4
  %v6_153b0 = sub i32 0, %v0_153b0
  %v7_153b0 = and i32 %v4_153b0, %v6_153b0
  %v8_153b0 = icmp slt i32 %v7_153b0, 0
  store i1 %v8_153b0, i1* %cpsr_v.global-to-local, align 1
  %v9_153b0 = icmp slt i32 %v4_153b0, 0
  store i1 %v9_153b0, i1* %cpsr_n.global-to-local, align 1
  %v10_153b0 = icmp eq i32 %v4_153b0, 0
  store i1 %v10_153b0, i1* %cpsr_z.global-to-local, align 1
  %v5_153b4 = icmp slt i32 %v0_153b0, -20
  br i1 %v5_153b4, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_153b4 = load i32, i32* %r1.global-to-local, align 4
  %v7_153b4 = add i32 %v6_153b4, -4
  %v8_153b4 = inttoptr i32 %v7_153b4 to i32*
  %v9_153b4 = load i32, i32* %v8_153b4, align 4
  store i32 %v9_153b4, i32* @r3, align 4
  %v10_153b4 = add i32 %v6_153b4, -8
  %v11_153b4 = inttoptr i32 %v10_153b4 to i32*
  %v12_153b4 = load i32, i32* %v11_153b4, align 4
  store i32 %v12_153b4, i32* @ip, align 4
  %v13_153b4 = add i32 %v6_153b4, -12
  %v14_153b4 = inttoptr i32 %v13_153b4 to i32*
  %v15_153b4 = load i32, i32* %v14_153b4, align 4
  store i32 %v15_153b4, i32* %lr.global-to-local, align 4
  store i32 %v13_153b4, i32* %r1.global-to-local, align 4
  %v7_153b8 = add i32 %v6_153b8, -12
  %v8_153b8 = inttoptr i32 %v7_153b8 to i32*
  store i32 %v9_153b4, i32* %v8_153b8, align 4
  %v10_153b8 = add i32 %v6_153b8, -8
  %v11_153b8 = inttoptr i32 %v10_153b8 to i32*
  %v12_153b8 = load i32, i32* @ip, align 4
  store i32 %v12_153b8, i32* %v11_153b8, align 4
  %v13_153b8 = add i32 %v6_153b8, -4
  %v14_153b8 = inttoptr i32 %v13_153b8 to i32*
  %v15_153b8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_153b8, i32* %v14_153b8, align 4
  store i32 %v7_153b8, i32* %r0.global-to-local, align 4
  %v6_153bc = load i32, i32* %r2.global-to-local, align 4
  %v7_153bc = add i32 %v6_153bc, -12
  store i32 %v7_153bc, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_153dc45 = phi i32 [ %v6_153b8, %.thread2 ], [ %v7_153b8, %bb148 ]
  %v0_153c443 = phi i32 [ %v4_153b0, %.thread2 ], [ %v7_153bc, %bb148 ]
  %v2_153c0 = load i8*, i8** %stack_var_-8, align 4
  %v3_153c0 = ptrtoint i8* %v2_153c0 to i32
  store i32 %v3_153c0, i32* @r4, align 4
  store i32 %v8_1537c, i32* @lr, align 4
  br label %dec_label_pc_153c4

dec_label_pc_153c4:                               ; preds = %dec_label_pc_15374, %.thread4
  %v7_153d4 = phi i32 [ %v0_1538c37, %dec_label_pc_15374 ], [ %v6_153dc45, %.thread4 ]
  %v0_153c4 = phi i32 [ %v2_15374, %dec_label_pc_15374 ], [ %v0_153c443, %.thread4 ]
  %v2_153c4 = add i32 %v0_153c4, 8
  store i32 %v2_153c4, i32* %r2.global-to-local, align 4
  %v4_153c4 = sub i32 0, %v0_153c4
  %v5_153c4 = and i32 %v2_153c4, %v4_153c4
  %v6_153c4 = icmp slt i32 %v5_153c4, 0
  store i1 %v6_153c4, i1* %cpsr_v.global-to-local, align 1
  %v7_153c4 = icmp slt i32 %v2_153c4, 0
  store i1 %v7_153c4, i1* %cpsr_n.global-to-local, align 1
  %v8_153c4 = icmp eq i32 %v2_153c4, 0
  store i1 %v8_153c4, i1* %cpsr_z.global-to-local, align 1
  %v5_153c8 = icmp slt i32 %v0_153c4, -8
  br i1 %v5_153c8, label %bb150, label %dec_label_pc_153cc

dec_label_pc_153cc:                               ; preds = %dec_label_pc_153c4
  %v6_153cc = add i32 %v0_153c4, 4
  store i32 %v6_153cc, i32* %r2.global-to-local, align 4
  %v8_153cc = sub i32 -5, %v0_153c4
  %v9_153cc = and i32 %v8_153cc, %v2_153c4
  %v10_153cc = icmp slt i32 %v9_153cc, 0
  store i1 %v10_153cc, i1* %cpsr_v.global-to-local, align 1
  %v11_153cc = icmp slt i32 %v6_153cc, 0
  store i1 %v11_153cc, i1* %cpsr_n.global-to-local, align 1
  %v12_153cc = icmp eq i32 %v2_153c4, 4
  store i1 %v12_153cc, i1* %cpsr_z.global-to-local, align 1
  %v5_153d0 = icmp slt i32 %v2_153c4, 4
  %v6_153d0 = load i32, i32* %r1.global-to-local, align 4
  %v7_153d0 = add i32 %v6_153d0, -4
  %v8_153d0 = inttoptr i32 %v7_153d0 to i32*
  %v9_153d0 = load i32, i32* %v8_153d0, align 4
  store i32 %v9_153d0, i32* @r3, align 4
  br i1 %v5_153d0, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_153cc
  store i32 %v7_153d0, i32* %r1.global-to-local, align 4
  %v8_153d4 = add i32 %v7_153d4, -4
  %v9_153d4 = inttoptr i32 %v8_153d4 to i32*
  store i32 %v9_153d0, i32* %v9_153d4, align 4
  %v10_153d4 = load i32, i32* %r0.global-to-local, align 4
  %v11_153d4 = add i32 %v10_153d4, -4
  store i32 %v11_153d4, i32* %r0.global-to-local, align 4
  %v0_153e4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_153cc
  %v10_153d8 = add i32 %v6_153d0, -8
  %v11_153d8 = inttoptr i32 %v10_153d8 to i32*
  %v12_153d8 = load i32, i32* %v11_153d8, align 4
  store i32 %v12_153d8, i32* @ip, align 4
  store i32 %v10_153d8, i32* %r1.global-to-local, align 4
  %v7_153dc = add i32 %v7_153d4, -8
  %v8_153dc = inttoptr i32 %v7_153dc to i32*
  store i32 %v9_153d0, i32* %v8_153dc, align 4
  %v10_153dc = add i32 %v7_153d4, -4
  %v11_153dc = inttoptr i32 %v10_153dc to i32*
  %v12_153dc = load i32, i32* @ip, align 4
  store i32 %v12_153dc, i32* %v11_153dc, align 4
  store i32 %v7_153dc, i32* %r0.global-to-local, align 4
  %v6_153e0 = load i32, i32* %r2.global-to-local, align 4
  %v7_153e0 = add i32 %v6_153e0, -4
  store i32 %v7_153e0, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_153c4, %dec_label_pc_15354, %.thread14, %dec_label_pc_15588, %dec_label_pc_1551c, %dec_label_pc_154b0, %bb149
  %v2_153e8 = phi i32 [ %v11_153d4, %.thread8 ], [ %v7_153d4, %dec_label_pc_153c4 ], [ %v2_15358, %dec_label_pc_15354 ], [ %v0_1548020, %.thread14 ], [ %v2_153f453, %dec_label_pc_15588 ], [ %v2_153f452, %dec_label_pc_1551c ], [ %v2_153f451, %dec_label_pc_154b0 ], [ %v7_153dc, %bb149 ]
  %v0_153e4 = phi i32 [ %v0_153e4.pre, %.thread8 ], [ %v2_153c4, %dec_label_pc_153c4 ], [ %v2_1535c, %dec_label_pc_15354 ], [ %v2_15428, %.thread14 ], [ %v0_153e449, %dec_label_pc_15588 ], [ %v0_153e448, %dec_label_pc_1551c ], [ %v0_153e447, %dec_label_pc_154b0 ], [ %v7_153e0, %bb149 ]
  %v1_153e4 = add i32 %v0_153e4, 4
  store i32 %v1_153e4, i32* %r2.global-to-local, align 4
  %v3_153e4 = sub i32 0, %v0_153e4
  %v4_153e4 = and i32 %v1_153e4, %v3_153e4
  %v5_153e4 = icmp slt i32 %v4_153e4, 0
  store i1 %v5_153e4, i1* %cpsr_v.global-to-local, align 1
  %v6_153e4 = icmp slt i32 %v1_153e4, 0
  store i1 %v6_153e4, i1* %cpsr_n.global-to-local, align 1
  %v7_153e4 = icmp eq i32 %v1_153e4, 0
  store i1 %v7_153e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_153e4, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_153ec = add i32 %v0_153e4, 2
  %v3_153ec = sub i32 -3, %v0_153e4
  %v4_153ec = and i32 %v3_153ec, %v1_153e4
  %v5_153ec = icmp slt i32 %v4_153ec, 0
  store i1 %v5_153ec, i1* %cpsr_v.global-to-local, align 1
  %v6_153ec = icmp slt i32 %v1_153ec, 0
  store i1 %v6_153ec, i1* %cpsr_n.global-to-local, align 1
  %v7_153ec = icmp eq i32 %v1_153e4, 2
  store i1 %v7_153ec, i1* %cpsr_z.global-to-local, align 1
  %v0_153f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_153f0 = add i32 %v0_153f0, -1
  %v2_153f0 = inttoptr i32 %v1_153f0 to i8*
  %v3_153f0 = load i8, i8* %v2_153f0, align 1
  %v4_153f0 = zext i8 %v3_153f0 to i32
  store i32 %v4_153f0, i32* @r3, align 4
  store i32 %v1_153f0, i32* %r1.global-to-local, align 4
  %v3_153f4 = add i32 %v2_153e8, -1
  %v4_153f4 = inttoptr i32 %v3_153f4 to i8*
  store i8 %v3_153f0, i8* %v4_153f4, align 1
  %v5_153f4 = load i32, i32* %r0.global-to-local, align 4
  %v6_153f4 = add i32 %v5_153f4, -1
  store i32 %v6_153f4, i32* %r0.global-to-local, align 4
  %v0_153f8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_153f8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_153f8 = xor i1 %v0_153f8, %v1_153f8
  br i1 %v2_153f8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_153f8 = load i32, i32* %r1.global-to-local, align 4
  %v4_153f8 = add i32 %v3_153f8, -1
  %v5_153f8 = inttoptr i32 %v4_153f8 to i8*
  %v6_153f8 = load i8, i8* %v5_153f8, align 1
  %v7_153f8 = zext i8 %v6_153f8 to i32
  store i32 %v7_153f8, i32* @r3, align 4
  store i32 %v4_153f8, i32* %r1.global-to-local, align 4
  %v6_153fc = add i32 %v5_153f4, -2
  %v7_153fc = inttoptr i32 %v6_153fc to i8*
  store i8 %v6_153f8, i8* %v7_153fc, align 1
  %v8_153fc = load i32, i32* %r0.global-to-local, align 4
  %v9_153fc = add i32 %v8_153fc, -1
  store i32 %v9_153fc, i32* %r0.global-to-local, align 4
  %v1_15400.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15400.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_15404 = phi i32 [ %v9_153fc, %bb152 ], [ %v6_153f4, %bb151 ]
  %v2_15404 = phi i1 [ %v2_15400.pre, %bb152 ], [ %v1_153f8, %bb151 ]
  %v1_15404 = phi i1 [ %v1_15400.pre, %bb152 ], [ %v0_153f8, %bb151 ]
  %v0_15400 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15400 = xor i1 %v2_15404, %v1_15404
  %v4_15400 = or i1 %v0_15400, %v3_15400
  br i1 %v4_15400, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_15400 = load i32, i32* %r1.global-to-local, align 4
  %v6_15400 = add i32 %v5_15400, -1
  %v7_15400 = inttoptr i32 %v6_15400 to i8*
  %v8_15400 = load i8, i8* %v7_15400, align 1
  %v9_15400 = zext i8 %v8_15400 to i32
  store i32 %v9_15400, i32* @r3, align 4
  store i32 %v6_15400, i32* %r1.global-to-local, align 4
  %v8_15404 = add i32 %v7_15404, -1
  %v9_15404 = inttoptr i32 %v8_15404 to i8*
  store i8 %v8_15400, i8* %v9_15404, align 1
  %v10_15404 = load i32, i32* %r0.global-to-local, align 4
  %v11_15404 = add i32 %v10_15404, -1
  store i32 %v11_15404, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_1540c:                               ; preds = %dec_label_pc_15364
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1540c = icmp eq i32 %v1_15364, 1
  store i1 %v8_1540c, i1* %cpsr_n.global-to-local, align 1
  %v9_1540c = icmp eq i32 %v1_15364, 2
  store i1 %v9_1540c, i1* %cpsr_z.global-to-local, align 1
  %v1_15410 = add i32 %v2_15354, -1
  %v2_15410 = inttoptr i32 %v1_15410 to i8*
  %v3_15410 = load i8, i8* %v2_15410, align 1
  %v4_15410 = zext i8 %v3_15410 to i32
  store i32 %v4_15410, i32* @r3, align 4
  store i32 %v1_15410, i32* %r1.global-to-local, align 4
  %v3_15414 = add i32 %v2_15358, -1
  %v4_15414 = inttoptr i32 %v3_15414 to i8*
  store i8 %v3_15410, i8* %v4_15414, align 1
  %v5_15414 = load i32, i32* %r0.global-to-local, align 4
  %v6_15414 = add i32 %v5_15414, -1
  store i32 %v6_15414, i32* %r0.global-to-local, align 4
  br i1 %v8_1540c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_1540c
  %v6_15418 = load i32, i32* %r1.global-to-local, align 4
  %v7_15418 = add i32 %v6_15418, -1
  %v8_15418 = inttoptr i32 %v7_15418 to i8*
  %v9_15418 = load i8, i8* %v8_15418, align 1
  %v10_15418 = zext i8 %v9_15418 to i32
  store i32 %v10_15418, i32* @r3, align 4
  store i32 %v7_15418, i32* %r1.global-to-local, align 4
  %v9_1541c = add i32 %v5_15414, -2
  %v10_1541c = inttoptr i32 %v9_1541c to i8*
  store i8 %v9_15418, i8* %v10_1541c, align 1
  %v11_1541c = load i32, i32* %r0.global-to-local, align 4
  %v12_1541c = add i32 %v11_1541c, -1
  store i32 %v12_1541c, i32* %r0.global-to-local, align 4
  br i1 %v9_1540c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_15420 = load i32, i32* %r1.global-to-local, align 4
  %v9_15420 = add i32 %v8_15420, -1
  %v10_15420 = inttoptr i32 %v9_15420 to i8*
  %v11_15420 = load i8, i8* %v10_15420, align 1
  %v12_15420 = zext i8 %v11_15420 to i32
  store i32 %v12_15420, i32* @r3, align 4
  store i32 %v9_15420, i32* %r1.global-to-local, align 4
  %v11_15424 = add i32 %v11_1541c, -2
  %v12_15424 = inttoptr i32 %v11_15424 to i8*
  store i8 %v11_15420, i8* %v12_15424, align 1
  %v13_15424 = load i32, i32* %r0.global-to-local, align 4
  %v14_15424 = add i32 %v13_15424, -1
  store i32 %v14_15424, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_1540c, %bb155
  %v0_1548020 = phi i32 [ %v12_1541c, %bb154 ], [ %v6_15414, %dec_label_pc_1540c ], [ %v14_15424, %bb155 ]
  %v0_15428 = load i32, i32* %r2.global-to-local, align 4
  %v1_15428 = load i32, i32* @ip, align 4
  %v2_15428 = sub i32 %v0_15428, %v1_15428
  store i32 %v2_15428, i32* %r2.global-to-local, align 4
  %v4_15428 = xor i32 %v1_15428, %v0_15428
  %v5_15428 = xor i32 %v2_15428, %v0_15428
  %v6_15428 = and i32 %v5_15428, %v4_15428
  %v7_15428 = icmp slt i32 %v6_15428, 0
  store i1 %v7_15428, i1* %cpsr_v.global-to-local, align 1
  %v8_15428 = icmp slt i32 %v2_15428, 0
  store i1 %v8_15428, i1* %cpsr_n.global-to-local, align 1
  %v9_15428 = icmp eq i32 %v0_15428, %v1_15428
  store i1 %v9_15428, i1* %cpsr_z.global-to-local, align 1
  %v5_1542c = icmp slt i32 %v0_15428, %v1_15428
  br i1 %v5_1542c, label %bb150, label %dec_label_pc_15430

dec_label_pc_15430:                               ; preds = %.thread14
  %v0_15430 = load i32, i32* %r1.global-to-local, align 4
  %v1_15430 = urem i32 %v0_15430, 4
  store i32 %v1_15430, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15430 = icmp eq i32 %v1_15430, 0
  store i1 %v2_15430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15430, label %dec_label_pc_15374, label %dec_label_pc_15438

dec_label_pc_15438:                               ; preds = %dec_label_pc_1536c, %dec_label_pc_15430
  %v0_1548019 = phi i32 [ %v2_15358, %dec_label_pc_1536c ], [ %v0_1548020, %dec_label_pc_15430 ]
  %v0_1552c = phi i32 [ %v2_1535c, %dec_label_pc_1536c ], [ %v2_15428, %dec_label_pc_15430 ]
  %v0_15438 = phi i32 [ %v2_15354, %dec_label_pc_1536c ], [ %v0_15430, %dec_label_pc_15430 ]
  %v0_15440 = phi i32 [ %v1_1536c, %dec_label_pc_1536c ], [ %v1_15430, %dec_label_pc_15430 ]
  %v1_15438 = and i32 %v0_15438, -4
  store i32 %v1_15438, i32* %r1.global-to-local, align 4
  %v1_1543c = inttoptr i32 %v1_15438 to i32*
  %v2_1543c = load i32, i32* %v1_1543c, align 4
  store i32 %v2_1543c, i32* @r3, align 4
  %v7_15440 = icmp ult i32 %v0_15440, 2
  %v2_15524 = add i32 %v0_1552c, -12
  %v4_15524 = sub i32 11, %v0_1552c
  %v5_15524 = and i32 %v4_15524, %v0_1552c
  %v6_15524 = icmp slt i32 %v5_15524, 0
  store i1 %v6_15524, i1* %cpsr_v.global-to-local, align 1
  %v7_15524 = icmp slt i32 %v2_15524, 0
  store i1 %v7_15524, i1* %cpsr_n.global-to-local, align 1
  %v8_15524 = icmp eq i32 %v0_1552c, 12
  store i1 %v8_15524, i1* %cpsr_z.global-to-local, align 1
  %v5_15528 = icmp slt i32 %v0_1552c, 12
  br i1 %v7_15440, label %dec_label_pc_15524, label %dec_label_pc_15448

dec_label_pc_15448:                               ; preds = %dec_label_pc_15438
  %v8_15440 = icmp eq i32 %v0_15440, 2
  br i1 %v8_15440, label %dec_label_pc_154b8, label %dec_label_pc_1544c

dec_label_pc_1544c:                               ; preds = %dec_label_pc_15448
  br i1 %v5_15528, label %dec_label_pc_15498, label %dec_label_pc_15454

dec_label_pc_15454:                               ; preds = %dec_label_pc_1544c
  store i32 %v2_15524, i32* %r2.global-to-local, align 4
  %v3_15458 = load i32, i32* @r4, align 4
  store i32 %v3_15458, i32* %stack_var_-12, align 4
  %v6_15458 = load i32, i32* @r5, align 4
  %v8_15458 = inttoptr i32 %v6_15458 to i8*
  store i8* %v8_15458, i8** %stack_var_-8, align 4
  %v11_15458 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1545c

dec_label_pc_1545c:                               ; preds = %dec_label_pc_1545c.dec_label_pc_1545c_crit_edge, %dec_label_pc_15454
  %v0_15480 = phi i32 [ %v1_15480, %dec_label_pc_1545c.dec_label_pc_1545c_crit_edge ], [ %v0_1548019, %dec_label_pc_15454 ]
  %v0_15460 = phi i32 [ %v0_15460.pre, %dec_label_pc_1545c.dec_label_pc_1545c_crit_edge ], [ %v1_15438, %dec_label_pc_15454 ]
  %v0_1545c = phi i32 [ %v0_1545c.pre, %dec_label_pc_1545c.dec_label_pc_1545c_crit_edge ], [ %v2_1543c, %dec_label_pc_15454 ]
  %v3_1545c = mul i32 %v0_1545c, 256
  store i32 %v3_1545c, i32* %lr.global-to-local, align 4
  %v1_15460 = add i32 %v0_15460, -4
  %v2_15460 = inttoptr i32 %v1_15460 to i32*
  %v3_15460 = load i32, i32* %v2_15460, align 4
  store i32 %v3_15460, i32* @r3, align 4
  %v4_15460 = add i32 %v0_15460, -8
  %v5_15460 = inttoptr i32 %v4_15460 to i32*
  %v6_15460 = load i32, i32* %v5_15460, align 4
  store i32 %v6_15460, i32* %r4.global-to-local, align 4
  %v7_15460 = add i32 %v0_15460, -12
  %v8_15460 = inttoptr i32 %v7_15460 to i32*
  %v9_15460 = load i32, i32* %v8_15460, align 4
  store i32 %v9_15460, i32* %r5.global-to-local, align 4
  %v10_15460 = add i32 %v0_15460, -16
  %v11_15460 = inttoptr i32 %v10_15460 to i32*
  %v12_15460 = load i32, i32* %v11_15460, align 4
  store i32 %v10_15460, i32* %r1.global-to-local, align 4
  %v4_15464 = udiv i32 %v12_15460, 16777216
  %v5_15464 = or i32 %v4_15464, %v3_1545c
  store i32 %v5_15464, i32* %lr.global-to-local, align 4
  %v3_15468 = mul i32 %v12_15460, 256
  %v4_1546c = udiv i32 %v9_15460, 16777216
  %v5_1546c = or i32 %v3_15468, %v4_1546c
  store i32 %v5_1546c, i32* @ip, align 4
  %v3_15470 = mul i32 %v9_15460, 256
  %v4_15474 = udiv i32 %v6_15460, 16777216
  %v5_15474 = or i32 %v3_15470, %v4_15474
  store i32 %v5_15474, i32* %r5.global-to-local, align 4
  %v3_15478 = mul i32 %v6_15460, 256
  %v4_1547c = udiv i32 %v3_15460, 16777216
  %v5_1547c = or i32 %v3_15478, %v4_1547c
  store i32 %v5_1547c, i32* %r4.global-to-local, align 4
  %v1_15480 = add i32 %v0_15480, -16
  %v2_15480 = inttoptr i32 %v1_15480 to i32*
  store i32 %v5_1547c, i32* %v2_15480, align 4
  %v4_15480 = add i32 %v0_15480, -12
  %v5_15480 = inttoptr i32 %v4_15480 to i32*
  %v6_15480 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15480, i32* %v5_15480, align 4
  %v7_15480 = add i32 %v0_15480, -8
  %v8_15480 = inttoptr i32 %v7_15480 to i32*
  %v9_15480 = load i32, i32* @ip, align 4
  store i32 %v9_15480, i32* %v8_15480, align 4
  %v10_15480 = add i32 %v0_15480, -4
  %v11_15480 = inttoptr i32 %v10_15480 to i32*
  %v12_15480 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15480, i32* %v11_15480, align 4
  store i32 %v1_15480, i32* %r0.global-to-local, align 4
  %v0_15484 = load i32, i32* %r2.global-to-local, align 4
  %v2_15484 = add i32 %v0_15484, -16
  store i32 %v2_15484, i32* %r2.global-to-local, align 4
  %v6_15488 = icmp slt i32 %v0_15484, 16
  br i1 %v6_15488, label %dec_label_pc_1548c, label %dec_label_pc_1545c.dec_label_pc_1545c_crit_edge

dec_label_pc_1545c.dec_label_pc_1545c_crit_edge:  ; preds = %dec_label_pc_1545c
  %v0_1545c.pre = load i32, i32* @r3, align 4
  %v0_15460.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1545c

dec_label_pc_1548c:                               ; preds = %dec_label_pc_1545c
  %v2_1548c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1548c, i32* @r4, align 4
  %v5_1548c = load i8*, i8** %stack_var_-8, align 4
  %v6_1548c = ptrtoint i8* %v5_1548c to i32
  store i32 %v6_1548c, i32* @r5, align 4
  store i32 %v11_15458, i32* @lr, align 4
  %v2_15490 = add i32 %v0_15484, -4
  store i32 %v2_15490, i32* %r2.global-to-local, align 4
  %v4_15490 = add i32 %v0_15484, 2147483632
  %v5_15490 = and i32 %v2_15490, %v4_15490
  %v6_15490 = icmp slt i32 %v5_15490, 0
  store i1 %v6_15490, i1* %cpsr_v.global-to-local, align 1
  %v7_15490 = icmp slt i32 %v2_15490, 0
  store i1 %v7_15490, i1* %cpsr_n.global-to-local, align 1
  %v8_15490 = icmp eq i32 %v2_15490, 0
  store i1 %v8_15490, i1* %cpsr_z.global-to-local, align 1
  %v5_15494 = icmp slt i32 %v2_15484, -12
  br i1 %v5_15494, label %dec_label_pc_154b0, label %dec_label_pc_15498

dec_label_pc_15498:                               ; preds = %dec_label_pc_1548c, %dec_label_pc_1544c, %dec_label_pc_15498
  %v1_154a4 = phi i32 [ %v5_154a4, %dec_label_pc_15498 ], [ %v1_15480, %dec_label_pc_1548c ], [ %v0_1548019, %dec_label_pc_1544c ]
  %v0_15498 = load i32, i32* @r3, align 4
  %v3_15498 = mul i32 %v0_15498, 256
  store i32 %v3_15498, i32* %ip.global-to-local, align 4
  %v0_1549c = load i32, i32* %r1.global-to-local, align 4
  %v1_1549c = add i32 %v0_1549c, -4
  %v2_1549c = inttoptr i32 %v1_1549c to i32*
  %v3_1549c = load i32, i32* %v2_1549c, align 4
  store i32 %v3_1549c, i32* @r3, align 4
  store i32 %v1_1549c, i32* %r1.global-to-local, align 4
  %v4_154a0 = udiv i32 %v3_1549c, 16777216
  %v5_154a0 = or i32 %v4_154a0, %v3_15498
  store i32 %v5_154a0, i32* @ip, align 4
  %v2_154a4 = add i32 %v1_154a4, -4
  %v3_154a4 = inttoptr i32 %v2_154a4 to i32*
  store i32 %v5_154a0, i32* %v3_154a4, align 4
  %v4_154a4 = load i32, i32* %r0.global-to-local, align 4
  %v5_154a4 = add i32 %v4_154a4, -4
  store i32 %v5_154a4, i32* %r0.global-to-local, align 4
  %v0_154a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_154a8 = add i32 %v0_154a8, -4
  store i32 %v2_154a8, i32* %r2.global-to-local, align 4
  %v6_154ac = icmp slt i32 %v0_154a8, 4
  br i1 %v6_154ac, label %dec_label_pc_154b0.loopexit, label %dec_label_pc_15498

dec_label_pc_154b0.loopexit:                      ; preds = %dec_label_pc_15498
  %v4_154a8 = sub i32 3, %v0_154a8
  %v5_154a8 = and i32 %v4_154a8, %v0_154a8
  %v6_154a8 = icmp slt i32 %v5_154a8, 0
  %v7_154a8 = icmp slt i32 %v2_154a8, 0
  store i1 %v6_154a8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_154a8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_154b0

dec_label_pc_154b0:                               ; preds = %dec_label_pc_154b0.loopexit, %dec_label_pc_1548c
  %v2_153f451 = phi i32 [ %v5_154a4, %dec_label_pc_154b0.loopexit ], [ %v1_15480, %dec_label_pc_1548c ]
  %v0_153e447 = phi i32 [ %v2_154a8, %dec_label_pc_154b0.loopexit ], [ %v2_15490, %dec_label_pc_1548c ]
  %v0_154b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_154b0 = add i32 %v0_154b0, 3
  store i32 %v1_154b0, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_154b8:                               ; preds = %dec_label_pc_15448
  br i1 %v5_15528, label %dec_label_pc_15504, label %dec_label_pc_154c0

dec_label_pc_154c0:                               ; preds = %dec_label_pc_154b8
  store i32 %v2_15524, i32* %r2.global-to-local, align 4
  %v3_154c4 = load i32, i32* @r4, align 4
  store i32 %v3_154c4, i32* %stack_var_-12, align 4
  %v6_154c4 = load i32, i32* @r5, align 4
  %v8_154c4 = inttoptr i32 %v6_154c4 to i8*
  store i8* %v8_154c4, i8** %stack_var_-8, align 4
  %v11_154c4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_154c8

dec_label_pc_154c8:                               ; preds = %dec_label_pc_154c8.dec_label_pc_154c8_crit_edge, %dec_label_pc_154c0
  %v0_154ec = phi i32 [ %v1_154ec, %dec_label_pc_154c8.dec_label_pc_154c8_crit_edge ], [ %v0_1548019, %dec_label_pc_154c0 ]
  %v0_154cc = phi i32 [ %v0_154cc.pre, %dec_label_pc_154c8.dec_label_pc_154c8_crit_edge ], [ %v1_15438, %dec_label_pc_154c0 ]
  %v0_154c8 = phi i32 [ %v0_154c8.pre, %dec_label_pc_154c8.dec_label_pc_154c8_crit_edge ], [ %v2_1543c, %dec_label_pc_154c0 ]
  %v3_154c8 = mul i32 %v0_154c8, 65536
  store i32 %v3_154c8, i32* %lr.global-to-local, align 4
  %v1_154cc = add i32 %v0_154cc, -4
  %v2_154cc = inttoptr i32 %v1_154cc to i32*
  %v3_154cc = load i32, i32* %v2_154cc, align 4
  store i32 %v3_154cc, i32* @r3, align 4
  %v4_154cc = add i32 %v0_154cc, -8
  %v5_154cc = inttoptr i32 %v4_154cc to i32*
  %v6_154cc = load i32, i32* %v5_154cc, align 4
  store i32 %v6_154cc, i32* %r4.global-to-local, align 4
  %v7_154cc = add i32 %v0_154cc, -12
  %v8_154cc = inttoptr i32 %v7_154cc to i32*
  %v9_154cc = load i32, i32* %v8_154cc, align 4
  store i32 %v9_154cc, i32* %r5.global-to-local, align 4
  %v10_154cc = add i32 %v0_154cc, -16
  %v11_154cc = inttoptr i32 %v10_154cc to i32*
  %v12_154cc = load i32, i32* %v11_154cc, align 4
  store i32 %v10_154cc, i32* %r1.global-to-local, align 4
  %v4_154d0 = udiv i32 %v12_154cc, 65536
  %v5_154d0 = or i32 %v4_154d0, %v3_154c8
  store i32 %v5_154d0, i32* %lr.global-to-local, align 4
  %v3_154d4 = mul i32 %v12_154cc, 65536
  %v4_154d8 = udiv i32 %v9_154cc, 65536
  %v5_154d8 = or i32 %v3_154d4, %v4_154d8
  store i32 %v5_154d8, i32* @ip, align 4
  %v3_154dc = mul i32 %v9_154cc, 65536
  %v4_154e0 = udiv i32 %v6_154cc, 65536
  %v5_154e0 = or i32 %v3_154dc, %v4_154e0
  store i32 %v5_154e0, i32* %r5.global-to-local, align 4
  %v3_154e4 = mul i32 %v6_154cc, 65536
  %v4_154e8 = udiv i32 %v3_154cc, 65536
  %v5_154e8 = or i32 %v3_154e4, %v4_154e8
  store i32 %v5_154e8, i32* %r4.global-to-local, align 4
  %v1_154ec = add i32 %v0_154ec, -16
  %v2_154ec = inttoptr i32 %v1_154ec to i32*
  store i32 %v5_154e8, i32* %v2_154ec, align 4
  %v4_154ec = add i32 %v0_154ec, -12
  %v5_154ec = inttoptr i32 %v4_154ec to i32*
  %v6_154ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_154ec, i32* %v5_154ec, align 4
  %v7_154ec = add i32 %v0_154ec, -8
  %v8_154ec = inttoptr i32 %v7_154ec to i32*
  %v9_154ec = load i32, i32* @ip, align 4
  store i32 %v9_154ec, i32* %v8_154ec, align 4
  %v10_154ec = add i32 %v0_154ec, -4
  %v11_154ec = inttoptr i32 %v10_154ec to i32*
  %v12_154ec = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_154ec, i32* %v11_154ec, align 4
  store i32 %v1_154ec, i32* %r0.global-to-local, align 4
  %v0_154f0 = load i32, i32* %r2.global-to-local, align 4
  %v2_154f0 = add i32 %v0_154f0, -16
  store i32 %v2_154f0, i32* %r2.global-to-local, align 4
  %v6_154f4 = icmp slt i32 %v0_154f0, 16
  br i1 %v6_154f4, label %dec_label_pc_154f8, label %dec_label_pc_154c8.dec_label_pc_154c8_crit_edge

dec_label_pc_154c8.dec_label_pc_154c8_crit_edge:  ; preds = %dec_label_pc_154c8
  %v0_154c8.pre = load i32, i32* @r3, align 4
  %v0_154cc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_154c8

dec_label_pc_154f8:                               ; preds = %dec_label_pc_154c8
  %v2_154f8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_154f8, i32* @r4, align 4
  %v5_154f8 = load i8*, i8** %stack_var_-8, align 4
  %v6_154f8 = ptrtoint i8* %v5_154f8 to i32
  store i32 %v6_154f8, i32* @r5, align 4
  store i32 %v11_154c4, i32* @lr, align 4
  %v2_154fc = add i32 %v0_154f0, -4
  store i32 %v2_154fc, i32* %r2.global-to-local, align 4
  %v4_154fc = add i32 %v0_154f0, 2147483632
  %v5_154fc = and i32 %v2_154fc, %v4_154fc
  %v6_154fc = icmp slt i32 %v5_154fc, 0
  store i1 %v6_154fc, i1* %cpsr_v.global-to-local, align 1
  %v7_154fc = icmp slt i32 %v2_154fc, 0
  store i1 %v7_154fc, i1* %cpsr_n.global-to-local, align 1
  %v8_154fc = icmp eq i32 %v2_154fc, 0
  store i1 %v8_154fc, i1* %cpsr_z.global-to-local, align 1
  %v5_15500 = icmp slt i32 %v2_154f0, -12
  br i1 %v5_15500, label %dec_label_pc_1551c, label %dec_label_pc_15504

dec_label_pc_15504:                               ; preds = %dec_label_pc_154f8, %dec_label_pc_154b8, %dec_label_pc_15504
  %v1_15510 = phi i32 [ %v5_15510, %dec_label_pc_15504 ], [ %v1_154ec, %dec_label_pc_154f8 ], [ %v0_1548019, %dec_label_pc_154b8 ]
  %v0_15504 = load i32, i32* @r3, align 4
  %v3_15504 = mul i32 %v0_15504, 65536
  store i32 %v3_15504, i32* %ip.global-to-local, align 4
  %v0_15508 = load i32, i32* %r1.global-to-local, align 4
  %v1_15508 = add i32 %v0_15508, -4
  %v2_15508 = inttoptr i32 %v1_15508 to i32*
  %v3_15508 = load i32, i32* %v2_15508, align 4
  store i32 %v3_15508, i32* @r3, align 4
  store i32 %v1_15508, i32* %r1.global-to-local, align 4
  %v4_1550c = udiv i32 %v3_15508, 65536
  %v5_1550c = or i32 %v4_1550c, %v3_15504
  store i32 %v5_1550c, i32* @ip, align 4
  %v2_15510 = add i32 %v1_15510, -4
  %v3_15510 = inttoptr i32 %v2_15510 to i32*
  store i32 %v5_1550c, i32* %v3_15510, align 4
  %v4_15510 = load i32, i32* %r0.global-to-local, align 4
  %v5_15510 = add i32 %v4_15510, -4
  store i32 %v5_15510, i32* %r0.global-to-local, align 4
  %v0_15514 = load i32, i32* %r2.global-to-local, align 4
  %v2_15514 = add i32 %v0_15514, -4
  store i32 %v2_15514, i32* %r2.global-to-local, align 4
  %v6_15518 = icmp slt i32 %v0_15514, 4
  br i1 %v6_15518, label %dec_label_pc_1551c.loopexit, label %dec_label_pc_15504

dec_label_pc_1551c.loopexit:                      ; preds = %dec_label_pc_15504
  %v4_15514 = sub i32 3, %v0_15514
  %v5_15514 = and i32 %v4_15514, %v0_15514
  %v6_15514 = icmp slt i32 %v5_15514, 0
  %v7_15514 = icmp slt i32 %v2_15514, 0
  store i1 %v6_15514, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15514, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1551c

dec_label_pc_1551c:                               ; preds = %dec_label_pc_1551c.loopexit, %dec_label_pc_154f8
  %v2_153f452 = phi i32 [ %v5_15510, %dec_label_pc_1551c.loopexit ], [ %v1_154ec, %dec_label_pc_154f8 ]
  %v0_153e448 = phi i32 [ %v2_15514, %dec_label_pc_1551c.loopexit ], [ %v2_154fc, %dec_label_pc_154f8 ]
  %v0_1551c = load i32, i32* %r1.global-to-local, align 4
  %v1_1551c = add i32 %v0_1551c, 2
  store i32 %v1_1551c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15524:                               ; preds = %dec_label_pc_15438
  br i1 %v5_15528, label %dec_label_pc_15570, label %dec_label_pc_1552c

dec_label_pc_1552c:                               ; preds = %dec_label_pc_15524
  store i32 %v2_15524, i32* %r2.global-to-local, align 4
  %v3_15530 = load i32, i32* @r4, align 4
  store i32 %v3_15530, i32* %stack_var_-12, align 4
  %v6_15530 = load i32, i32* @r5, align 4
  %v8_15530 = inttoptr i32 %v6_15530 to i8*
  store i8* %v8_15530, i8** %stack_var_-8, align 4
  %v11_15530 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15534

dec_label_pc_15534:                               ; preds = %dec_label_pc_15534.dec_label_pc_15534_crit_edge, %dec_label_pc_1552c
  %v0_15558 = phi i32 [ %v1_15558, %dec_label_pc_15534.dec_label_pc_15534_crit_edge ], [ %v0_1548019, %dec_label_pc_1552c ]
  %v0_15538 = phi i32 [ %v0_15538.pre, %dec_label_pc_15534.dec_label_pc_15534_crit_edge ], [ %v1_15438, %dec_label_pc_1552c ]
  %v0_15534 = phi i32 [ %v0_15534.pre, %dec_label_pc_15534.dec_label_pc_15534_crit_edge ], [ %v2_1543c, %dec_label_pc_1552c ]
  %v3_15534 = mul i32 %v0_15534, 16777216
  store i32 %v3_15534, i32* %lr.global-to-local, align 4
  %v1_15538 = add i32 %v0_15538, -4
  %v2_15538 = inttoptr i32 %v1_15538 to i32*
  %v3_15538 = load i32, i32* %v2_15538, align 4
  store i32 %v3_15538, i32* @r3, align 4
  %v4_15538 = add i32 %v0_15538, -8
  %v5_15538 = inttoptr i32 %v4_15538 to i32*
  %v6_15538 = load i32, i32* %v5_15538, align 4
  store i32 %v6_15538, i32* %r4.global-to-local, align 4
  %v7_15538 = add i32 %v0_15538, -12
  %v8_15538 = inttoptr i32 %v7_15538 to i32*
  %v9_15538 = load i32, i32* %v8_15538, align 4
  store i32 %v9_15538, i32* %r5.global-to-local, align 4
  %v10_15538 = add i32 %v0_15538, -16
  %v11_15538 = inttoptr i32 %v10_15538 to i32*
  %v12_15538 = load i32, i32* %v11_15538, align 4
  store i32 %v10_15538, i32* %r1.global-to-local, align 4
  %v4_1553c = udiv i32 %v12_15538, 256
  %v5_1553c = or i32 %v4_1553c, %v3_15534
  store i32 %v5_1553c, i32* %lr.global-to-local, align 4
  %v3_15540 = mul i32 %v12_15538, 16777216
  %v4_15544 = udiv i32 %v9_15538, 256
  %v5_15544 = or i32 %v3_15540, %v4_15544
  store i32 %v5_15544, i32* @ip, align 4
  %v3_15548 = mul i32 %v9_15538, 16777216
  %v4_1554c = udiv i32 %v6_15538, 256
  %v5_1554c = or i32 %v3_15548, %v4_1554c
  store i32 %v5_1554c, i32* %r5.global-to-local, align 4
  %v3_15550 = mul i32 %v6_15538, 16777216
  %v4_15554 = udiv i32 %v3_15538, 256
  %v5_15554 = or i32 %v3_15550, %v4_15554
  store i32 %v5_15554, i32* %r4.global-to-local, align 4
  %v1_15558 = add i32 %v0_15558, -16
  %v2_15558 = inttoptr i32 %v1_15558 to i32*
  store i32 %v5_15554, i32* %v2_15558, align 4
  %v4_15558 = add i32 %v0_15558, -12
  %v5_15558 = inttoptr i32 %v4_15558 to i32*
  %v6_15558 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15558, i32* %v5_15558, align 4
  %v7_15558 = add i32 %v0_15558, -8
  %v8_15558 = inttoptr i32 %v7_15558 to i32*
  %v9_15558 = load i32, i32* @ip, align 4
  store i32 %v9_15558, i32* %v8_15558, align 4
  %v10_15558 = add i32 %v0_15558, -4
  %v11_15558 = inttoptr i32 %v10_15558 to i32*
  %v12_15558 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15558, i32* %v11_15558, align 4
  store i32 %v1_15558, i32* %r0.global-to-local, align 4
  %v0_1555c = load i32, i32* %r2.global-to-local, align 4
  %v2_1555c = add i32 %v0_1555c, -16
  store i32 %v2_1555c, i32* %r2.global-to-local, align 4
  %v6_15560 = icmp slt i32 %v0_1555c, 16
  br i1 %v6_15560, label %dec_label_pc_15564, label %dec_label_pc_15534.dec_label_pc_15534_crit_edge

dec_label_pc_15534.dec_label_pc_15534_crit_edge:  ; preds = %dec_label_pc_15534
  %v0_15534.pre = load i32, i32* @r3, align 4
  %v0_15538.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15534

dec_label_pc_15564:                               ; preds = %dec_label_pc_15534
  %v2_15564 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15564, i32* @r4, align 4
  %v5_15564 = load i8*, i8** %stack_var_-8, align 4
  %v6_15564 = ptrtoint i8* %v5_15564 to i32
  store i32 %v6_15564, i32* @r5, align 4
  store i32 %v11_15530, i32* @lr, align 4
  %v2_15568 = add i32 %v0_1555c, -4
  store i32 %v2_15568, i32* %r2.global-to-local, align 4
  %v4_15568 = add i32 %v0_1555c, 2147483632
  %v5_15568 = and i32 %v2_15568, %v4_15568
  %v6_15568 = icmp slt i32 %v5_15568, 0
  store i1 %v6_15568, i1* %cpsr_v.global-to-local, align 1
  %v7_15568 = icmp slt i32 %v2_15568, 0
  store i1 %v7_15568, i1* %cpsr_n.global-to-local, align 1
  %v8_15568 = icmp eq i32 %v2_15568, 0
  store i1 %v8_15568, i1* %cpsr_z.global-to-local, align 1
  %v5_1556c = icmp slt i32 %v2_1555c, -12
  br i1 %v5_1556c, label %dec_label_pc_15588, label %dec_label_pc_15570

dec_label_pc_15570:                               ; preds = %dec_label_pc_15564, %dec_label_pc_15524, %dec_label_pc_15570
  %v1_1557c = phi i32 [ %v5_1557c, %dec_label_pc_15570 ], [ %v1_15558, %dec_label_pc_15564 ], [ %v0_1548019, %dec_label_pc_15524 ]
  %v0_15570 = load i32, i32* @r3, align 4
  %v3_15570 = mul i32 %v0_15570, 16777216
  store i32 %v3_15570, i32* %ip.global-to-local, align 4
  %v0_15574 = load i32, i32* %r1.global-to-local, align 4
  %v1_15574 = add i32 %v0_15574, -4
  %v2_15574 = inttoptr i32 %v1_15574 to i32*
  %v3_15574 = load i32, i32* %v2_15574, align 4
  store i32 %v3_15574, i32* @r3, align 4
  store i32 %v1_15574, i32* %r1.global-to-local, align 4
  %v4_15578 = udiv i32 %v3_15574, 256
  %v5_15578 = or i32 %v4_15578, %v3_15570
  store i32 %v5_15578, i32* @ip, align 4
  %v2_1557c = add i32 %v1_1557c, -4
  %v3_1557c = inttoptr i32 %v2_1557c to i32*
  store i32 %v5_15578, i32* %v3_1557c, align 4
  %v4_1557c = load i32, i32* %r0.global-to-local, align 4
  %v5_1557c = add i32 %v4_1557c, -4
  store i32 %v5_1557c, i32* %r0.global-to-local, align 4
  %v0_15580 = load i32, i32* %r2.global-to-local, align 4
  %v2_15580 = add i32 %v0_15580, -4
  store i32 %v2_15580, i32* %r2.global-to-local, align 4
  %v6_15584 = icmp slt i32 %v0_15580, 4
  br i1 %v6_15584, label %dec_label_pc_15588.loopexit, label %dec_label_pc_15570

dec_label_pc_15588.loopexit:                      ; preds = %dec_label_pc_15570
  %v4_15580 = sub i32 3, %v0_15580
  %v5_15580 = and i32 %v4_15580, %v0_15580
  %v6_15580 = icmp slt i32 %v5_15580, 0
  %v7_15580 = icmp slt i32 %v2_15580, 0
  store i1 %v6_15580, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15580, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15588

dec_label_pc_15588:                               ; preds = %dec_label_pc_15588.loopexit, %dec_label_pc_15564
  %v2_153f453 = phi i32 [ %v5_1557c, %dec_label_pc_15588.loopexit ], [ %v1_15558, %dec_label_pc_15564 ]
  %v0_153e449 = phi i32 [ %v2_15580, %dec_label_pc_15588.loopexit ], [ %v2_15568, %dec_label_pc_15564 ]
  %v0_15588 = load i32, i32* %r1.global-to-local, align 4
  %v1_15588 = add i32 %v0_15588, 1
  store i32 %v1_15588, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1557c, { 0, 2, 1 }
  uselistorder i32 %v3_15570, { 1, 0 }
  uselistorder i32 %v2_15568, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15558, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15538, { 1, 0 }
  uselistorder i32 %v3_15534, { 1, 0 }
  uselistorder i32 %v0_15538, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15558, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15510, { 0, 2, 1 }
  uselistorder i32 %v3_15504, { 1, 0 }
  uselistorder i32 %v2_154fc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_154ec, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_154cc, { 1, 0 }
  uselistorder i32 %v3_154c8, { 1, 0 }
  uselistorder i32 %v0_154cc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_154ec, { 3, 2, 1, 0 }
  uselistorder i32 %v5_154a4, { 0, 2, 1 }
  uselistorder i32 %v3_15498, { 1, 0 }
  uselistorder i32 %v2_15490, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15480, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15460, { 1, 0 }
  uselistorder i32 %v3_1545c, { 1, 0 }
  uselistorder i32 %v0_15460, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15480, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15528, { 2, 0, 1 }
  uselistorder i32 %v0_15440, { 1, 0 }
  uselistorder i32 %v0_1552c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1548019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15430, { 2, 1, 0 }
  uselistorder i32 %v0_15430, { 2, 0, 1 }
  uselistorder i32 %v2_15428, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15428, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15428, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1548020, { 2, 1, 0 }
  uselistorder i32 %v11_15404, { 1, 0 }
  uselistorder i32 %v7_15404, { 1, 0 }
  uselistorder i32 %v1_153e4, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_153e4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_153e8, { 1, 0 }
  uselistorder i32 %v7_153dc, { 0, 2, 1 }
  uselistorder i32 %v10_153d8, { 1, 0 }
  uselistorder i32 %v9_153d0, { 1, 0, 2 }
  uselistorder i32 %v6_153cc, { 1, 0 }
  uselistorder i32 %v2_153c4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_153c4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_153d4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_153b8, { 0, 2, 1 }
  uselistorder i32 %v13_153b4, { 1, 0 }
  uselistorder i32 %v4_153b0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_153b0, { 2, 0, 1 }
  uselistorder i32 %v6_153b8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_153a8, { 0, 2, 1 }
  uselistorder i32 %v16_153a4, { 1, 0 }
  uselistorder i32 %v4_153a0, { 1, 2, 0 }
  uselistorder i32 %v0_153b0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_153a8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15394, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15390, { 1, 0 }
  uselistorder i32 %v1_1538c, { 1, 0 }
  uselistorder i32 %v10_15388, { 1, 0 }
  uselistorder i32 %v0_15388, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1538c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15380, { 0, 2, 1 }
  uselistorder i32 %v2_15374, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15374, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1538c37, { 1, 2, 0 }
  uselistorder i32 %v1_1536c, { 2, 1, 0 }
  uselistorder i32 %v1_15364, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1535c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15358, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_15354, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_15354, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_15344, { 0, 2, 1 }
  uselistorder i32 %v4_15340, { 1, 0 }
  uselistorder i32 %v3_15334, { 1, 0 }
  uselistorder i32 %v1_1532c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15320, { 1, 0 }
  uselistorder i32 %v12_1531c, { 0, 2, 1 }
  uselistorder i32 %v8_152fc, { 1, 0, 2 }
  uselistorder i32 %v5_152fc, { 1, 0, 2 }
  uselistorder i32 %v2_152fc, { 1, 0, 2 }
  uselistorder i32 %v0_152fc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1531c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_152d8, { 0, 2, 1 }
  uselistorder i32 %v4_152d4, { 1, 0 }
  uselistorder i32 %v3_152c8, { 1, 0 }
  uselistorder i32 %v1_152c0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_152b4, { 1, 0 }
  uselistorder i32 %v12_152b0, { 0, 2, 1 }
  uselistorder i32 %v8_15290, { 1, 0, 2 }
  uselistorder i32 %v5_15290, { 1, 0, 2 }
  uselistorder i32 %v2_15290, { 1, 0, 2 }
  uselistorder i32 %v0_15290, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_152b0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1526c, { 0, 2, 1 }
  uselistorder i32 %v4_15268, { 1, 0 }
  uselistorder i32 %v3_1525c, { 1, 0 }
  uselistorder i32 %v1_15254, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15248, { 1, 0 }
  uselistorder i32 %v12_15244, { 0, 2, 1 }
  uselistorder i32 %v8_15224, { 1, 0, 2 }
  uselistorder i32 %v5_15224, { 1, 0, 2 }
  uselistorder i32 %v2_15224, { 1, 0, 2 }
  uselistorder i32 %v0_15224, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15244, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_15280, { 0, 2, 1 }
  uselistorder i32 %v1_1527c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_15200, { 2, 0, 1, 3 }
  uselistorder i32 %v2_15200, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15284, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1531c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_151f4, { 1, 0 }
  uselistorder i32 %v0_151f4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_151ec, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_151ec, { 1, 0, 2 }
  uselistorder i32 %v0_151ec, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1531c77, { 1, 0 }
  uselistorder i32 %v1_151cc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_151d4, { 1, 0 }
  uselistorder i32 %v0_151a8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1519c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_15188, { 1, 0, 2 }
  uselistorder i32 %v1_15184, { 1, 0 }
  uselistorder i32 %v1_1517c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1517c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_15174, { 0, 2, 1 }
  uselistorder i32 %v3_15174, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15174, { 1, 0 }
  uselistorder i1 %v1_15174, { 1, 0 }
  uselistorder i32 %v3_15170, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15168, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15154, { 1, 2, 0 }
  uselistorder i32 %v1_1514c, { 0, 2, 1 }
  uselistorder i32 %v12_15148, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1513c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15140, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_15130, { 0, 2, 1 }
  uselistorder i32 %v1_15128, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_15128, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_15120, { 1, 0 }
  uselistorder i32 %v1_15118, { 2, 1, 0 }
  uselistorder i32 %v2_15110, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_15110, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_1510c, { 1, 0 }
  uselistorder i32 %v2_15100, { 1, 0 }
  uselistorder i32 %v1_15100, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_15100, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 29, 28, 40, 30, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 49, 45, 47, 46, 48, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 13, 12, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 15, 16, 17, 0, 26, 1, 27, 18, 19, 4, 20, 5, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 14, 23, 2, 24, 3, 25 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 28, 2, 4, 5, 3, 6, 7, 8, 9, 17, 33, 38, 36, 37, 35, 29, 30, 21, 22, 31, 32, 34, 25, 26, 27, 18, 24, 23, 11, 12, 10, 13, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 5, 6, 7, 14, 22, 23, 8, 9, 10, 2, 11, 12, 13, 15, 16, 3, 17, 4, 18, 0, 19, 1, 20, 21 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 12, 3, 5, 6, 13, 14, 8, 9, 10, 11, 18, 19, 20, 15, 16, 7, 17, 1 }
  uselistorder i32 40, { 3, 9, 11, 4, 2, 7, 6, 10, 8, 12, 13, 14, 5, 15, 16, 0, 17, 19, 18, 20, 1, 21, 23, 22, 24 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 4, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 1, 60, 61, 62, 63, 9, 10, 11, 13, 12, 14, 2, 15, 64, 65, 66, 16, 67, 17, 18, 68, 19, 59, 92, 93, 55, 56, 57, 58, 20, 21, 22, 23, 107, 108, 24, 109, 25, 3, 26, 94, 95, 27, 96, 53, 54, 28, 85, 86, 87, 82, 77, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 88, 89, 90, 91, 29, 30, 31, 0, 32, 33, 4, 34, 35, 36, 5, 37, 38, 6, 39, 40, 41, 42, 43, 44, 7, 99, 45, 100, 101, 102, 103, 46, 47, 8, 104, 48, 105, 49, 50, 51, 106, 110, 97, 52, 98 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 144, 145, 146, 147, 148, 149, 150, 151, 152, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 69, 70, 32, 153, 154, 12, 13, 117, 118, 119, 120, 121, 122, 114, 115, 116, 123, 136, 137, 124, 125, 126, 127, 128, 129, 130, 1, 131, 132, 134, 135, 133, 38, 39, 40, 41, 42, 43, 138, 139, 140, 44, 103, 71, 14, 15, 16, 17, 18, 0, 22, 23, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 141, 142, 143, 67, 68 }
  uselistorder label %dec_label_pc_15570, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15504, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15438, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_153c4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_15388, { 1, 0 }
  uselistorder label %dec_label_pc_15374, { 1, 0 }
  uselistorder label %dec_label_pc_15334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_152c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1525c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_151fc, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_151cc, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_15168, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_15128, { 1, 0 }
}

define i32 @function_15590(i32 %arg1) local_unnamed_addr {
dec_label_pc_15590:
  %v1_15590 = and i32 %arg1, -4
  %v1_15594 = inttoptr i32 %v1_15590 to i32*
  %v2_15594 = load i32, i32* %v1_15594, align 4
  %v1_15598 = urem i32 %arg1, 4
  store i32 %v1_15598, i32* @r3, align 4
  %v2_15598 = icmp eq i32 %v1_15598, 0
  %v1_1559c = sub nsw i32 0, %v1_15598
  br i1 %v2_15598, label %.preheader.preheader, label %dec_label_pc_155a4

dec_label_pc_155a4:                               ; preds = %dec_label_pc_15590
  %v1_155a4 = or i32 %v2_15594, 255
  %v7_155a8 = icmp eq i32 %v1_15598, 1
  br i1 %v7_155a8, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_155a4
  %v9_155ac = or i32 %v2_15594, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_155a4, %bb
  %v8_155b4 = phi i32 [ %v1_155a4, %dec_label_pc_155a4 ], [ %v9_155ac, %bb ]
  %v1_155b0 = add nsw i32 %v1_15598, -2
  store i32 %v1_155b0, i32* @r3, align 4
  %v7_155b4 = icmp eq i32 %v1_15598, 3
  br i1 %v7_155b4, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_155b4 = or i32 %v8_155b4, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_15590
  %v1_155c4.ph = phi i32 [ %v2_15594, %dec_label_pc_15590 ], [ %v9_155b4, %bb34 ], [ %v8_155b4, %bb33 ]
  %v1_155b838 = urem i32 %v1_155c4.ph, 256
  %v2_155b839 = icmp eq i32 %v1_155b838, 0
  %v2_155bc40 = and i32 %v1_155c4.ph, 65280
  %v3_155bc41 = icmp eq i32 %v2_155bc40, 0
  %or.cond42 = or i1 %v2_155b839, %v3_155bc41
  %v2_155c043 = and i32 %v1_155c4.ph, 16711680
  %v3_155c044 = icmp eq i32 %v2_155c043, 0
  %or.cond3145 = or i1 %v3_155c044, %or.cond42
  %v4_155c446 = icmp ult i32 %v1_155c4.ph, 16777216
  %or.cond3247 = or i1 %v4_155c446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_155d4, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_155c81349 = phi i32 [ %v2_155c814, %.thread4 ], [ %v1_1559c, %.preheader.preheader ]
  %v1_155cc48.in = phi i32 [ %v1_155cc48, %.thread4 ], [ %v1_15590, %.preheader.preheader ]
  %v1_155cc48 = add i32 %v1_155cc48.in, 4
  %v2_155c814 = add i32 %v1_155c81349, 4
  %v2_155cc = inttoptr i32 %v1_155cc48 to i32*
  %v3_155cc = load i32, i32* %v2_155cc, align 4
  %v1_155b8 = urem i32 %v3_155cc, 256
  %v2_155b8 = icmp eq i32 %v1_155b8, 0
  %v2_155bc = and i32 %v3_155cc, 65280
  %v3_155bc = icmp eq i32 %v2_155bc, 0
  %or.cond = or i1 %v2_155b8, %v3_155bc
  %v2_155c0 = and i32 %v3_155cc, 16711680
  %v3_155c0 = icmp eq i32 %v2_155c0, 0
  %or.cond31 = or i1 %v3_155c0, %or.cond
  %v4_155c4 = icmp ult i32 %v3_155cc, 16777216
  %or.cond32 = or i1 %v4_155c4, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_155d4, label %.thread4

dec_label_pc_155d4:                               ; preds = %.thread4, %.preheader.preheader
  %v1_155c813.lcssa = phi i32 [ %v1_1559c, %.preheader.preheader ], [ %v2_155c814, %.thread4 ]
  %v2_155b8.lcssa = phi i1 [ %v2_155b839, %.preheader.preheader ], [ %v2_155b8, %.thread4 ]
  %v3_155bc.lcssa = phi i1 [ %v3_155bc41, %.preheader.preheader ], [ %v3_155bc, %.thread4 ]
  %v3_155c0.lcssa = phi i1 [ %v3_155c044, %.preheader.preheader ], [ %v3_155c0, %.thread4 ]
  br i1 %v2_155b8.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_155d4
  %v2_155d8 = add i32 %v1_155c813.lcssa, 1
  br i1 %v3_155bc.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_155e017 = add i32 %v1_155c813.lcssa, 2
  br i1 %v3_155c0.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_155e8 = add i32 %v1_155c813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_155d4, %bb35, %bb36, %bb37
  %v1_155ec = phi i32 [ %v2_155d8, %bb35 ], [ %v2_155e017, %bb36 ], [ %v2_155e8, %bb37 ], [ %v1_155c813.lcssa, %dec_label_pc_155d4 ]
  ret i32 %v1_155ec

; uselistorder directives
  uselistorder i32 %v1_155c813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_155cc, { 3, 2, 1, 0 }
  uselistorder i32 %v1_155c4.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15598, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 5, 1, 4, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 15 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 9, 25, 24, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 65535, { 2, 105, 0, 1, 10, 53, 3, 29, 54, 28, 55, 26, 56, 27, 57, 58, 11, 59, 4, 60, 61, 33, 62, 32, 63, 30, 64, 31, 65, 13, 12, 66, 67, 34, 68, 35, 69, 15, 14, 70, 71, 36, 72, 37, 73, 16, 17, 5, 6, 24, 23, 39, 74, 38, 75, 18, 19, 7, 40, 76, 41, 77, 78, 79, 20, 80, 81, 8, 42, 82, 43, 83, 44, 84, 85, 86, 21, 87, 88, 9, 47, 89, 45, 90, 46, 91, 92, 22, 93, 25, 48, 94, 49, 95, 50, 96, 97, 98, 51, 99, 100, 101, 102, 52, 103, 104 }
  uselistorder i32 -4, { 41, 18, 62, 63, 64, 6, 19, 20, 21, 65, 66, 67, 7, 22, 23, 24, 68, 69, 70, 8, 25, 26, 71, 17, 16, 72, 73, 74, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 75, 11, 34, 49, 50, 51, 9, 52, 53, 54, 35, 48, 2, 36, 42, 43, 44, 45, 46, 47, 0, 1, 55, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 10 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_155f0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_155f4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_155f0

dec_label_pc_155f0:                               ; preds = %bb3, %bb
  %v0_155f4 = phi i32 [ %v0_155f4.pre, %bb ], [ %v5_155f4, %bb3 ]
  %v0_155f0 = phi i32 [ %tmp, %bb ], [ %v5_155f0, %bb3 ]
  %v1_155f0 = inttoptr i32 %v0_155f0 to i8*
  %v2_155f0 = load i8, i8* %v1_155f0, align 1
  %v1_155f4 = inttoptr i32 %v0_155f4 to i8*
  %v2_155f4 = load i8, i8* %v1_155f4, align 1
  %v3_155f4 = zext i8 %v2_155f4 to i32
  %v2_155f8 = icmp eq i8 %v2_155f0, 0
  br i1 %v2_155f8, label %.dec_label_pc_15604_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_155f0
  %v5_155f4 = add i32 %v0_155f4, 1
  %v5_155f0 = add i32 %v0_155f0, 1
  %v3_155f0 = zext i8 %v2_155f0 to i32
  %v10_155fc = icmp eq i8 %v2_155f0, %v2_155f4
  br i1 %v10_155fc, label %dec_label_pc_155f0, label %dec_label_pc_15604

.dec_label_pc_15604_crit_edge:                    ; preds = %dec_label_pc_155f0
  br label %dec_label_pc_15604

dec_label_pc_15604:                               ; preds = %bb3, %.dec_label_pc_15604_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_15604_crit_edge ], [ %v3_155f0, %bb3 ]
  %v2_15604.pre-phi = sub nsw i32 %.pn, %v3_155f4
  ret i32 %v2_15604.pre-phi

; uselistorder directives
  uselistorder i8 %v2_155f0, { 0, 2, 1 }
  uselistorder i32 %v0_155f0, { 1, 0 }
  uselistorder i32 %v0_155f4, { 1, 0 }
  uselistorder label %dec_label_pc_15604, { 1, 0 }
}

define i32 @function_15610() local_unnamed_addr {
dec_label_pc_15610:
  %stack_var_-16 = alloca i32, align 4
  %v3_15610 = load i32, i32* @r4, align 4
  store i32 %v3_15610, i32* %stack_var_-16, align 4
  %v6_15610 = load i32, i32* @r5, align 4
  %v9_15610 = load i32, i32* @r6, align 4
  %v0_15614 = load i32, i32* @r0, align 4
  %v0_15618 = load i32, i32* @r1, align 4
  store i32 %v0_15618, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_156348 = inttoptr i32 %v0_15614 to i8*
  %v2_156349 = load i8, i8* %v1_156348, align 1
  %v2_1563811 = icmp eq i8 %v2_156349, 0
  store i32 %v0_15618, i32* @r0, align 4
  %v1_1564012 = add i32 %v0_15614, 1
  store i32 %v1_1564012, i32* @r4, align 4
  br i1 %v2_1563811, label %dec_label_pc_15648, label %dec_label_pc_15624

dec_label_pc_15624:                               ; preds = %dec_label_pc_15610, %dec_label_pc_15630
  %v3_1563414.in = phi i8 [ %v2_15634, %dec_label_pc_15630 ], [ %v2_156349, %dec_label_pc_15610 ]
  %v0_1563c13 = phi i32 [ %v0_1563c.pre, %dec_label_pc_15630 ], [ %v0_15618, %dec_label_pc_15610 ]
  %v3_1563414 = zext i8 %v3_1563414.in to i32
  %v2_15624 = call i32 @function_157dc(i32 %v0_1563c13, i32 %v3_1563414)
  %v2_15628 = icmp eq i32 %v2_15624, 0
  %v0_15630 = load i32, i32* @r5, align 4
  br i1 %v2_15628, label %dec_label_pc_15630, label %dec_label_pc_15648

dec_label_pc_15630:                               ; preds = %dec_label_pc_15624
  %v1_15630 = add i32 %v0_15630, 1
  %v0_15634.pre = load i32, i32* @r4, align 4
  %v0_1563c.pre = load i32, i32* @r6, align 4
  store i32 %v1_15630, i32* @r5, align 4
  %v1_15634 = inttoptr i32 %v0_15634.pre to i8*
  %v2_15634 = load i8, i8* %v1_15634, align 1
  %v2_15638 = icmp eq i8 %v2_15634, 0
  store i32 %v0_1563c.pre, i32* @r0, align 4
  %v1_15640 = add i32 %v0_15634.pre, 1
  store i32 %v1_15640, i32* @r4, align 4
  br i1 %v2_15638, label %dec_label_pc_15648, label %dec_label_pc_15624

dec_label_pc_15648:                               ; preds = %dec_label_pc_15630, %dec_label_pc_15624, %dec_label_pc_15610
  %v0_15648 = phi i32 [ 0, %dec_label_pc_15610 ], [ %v0_15630, %dec_label_pc_15624 ], [ %v1_15630, %dec_label_pc_15630 ]
  %v2_1564c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1564c, i32* @r4, align 4
  store i32 %v6_15610, i32* @r5, align 4
  store i32 %v9_15610, i32* @r6, align 4
  ret i32 %v0_15648

; uselistorder directives
  uselistorder i8 %v2_15634, { 1, 0 }
  uselistorder i32 %v0_1563c.pre, { 1, 0 }
  uselistorder i32 %v0_15634.pre, { 1, 0 }
  uselistorder i32* @r6, {}
  uselistorder label %dec_label_pc_15624, { 1, 0 }
}

define i32 @function_15654(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15654:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_156842 = load i32, i32* @r0, align 4
  %v1_156843 = inttoptr i32 %v0_156842 to i8*
  %v2_156844 = load i8, i8* %v1_156843, align 1
  %v3_156845 = zext i8 %v2_156844 to i32
  store i32 %v3_156845, i32* @ip, align 4
  %v2_156886 = icmp eq i8 %v2_156844, 0
  br i1 %v2_156886, label %dec_label_pc_15694, label %dec_label_pc_15668.preheader

dec_label_pc_15660:                               ; preds = %dec_label_pc_15668
  %v3_15668 = zext i8 %v2_15668 to i32
  %v1_15670 = add i32 %v0_15670, 1
  %v9_15660 = icmp eq i32 %v0_1566010, %v3_15668
  br i1 %v9_15660, label %dec_label_pc_1567c, label %dec_label_pc_15668

dec_label_pc_15668:                               ; preds = %dec_label_pc_15668.preheader, %dec_label_pc_15660
  %v0_15670 = phi i32 [ %tmp, %dec_label_pc_15668.preheader ], [ %v1_15670, %dec_label_pc_15660 ]
  %v1_15668 = inttoptr i32 %v0_15670 to i8*
  %v2_15668 = load i8, i8* %v1_15668, align 1
  %v2_1566c = icmp eq i8 %v2_15668, 0
  br i1 %v2_1566c, label %dec_label_pc_15694, label %dec_label_pc_15660

dec_label_pc_1567c:                               ; preds = %dec_label_pc_15660
  %v1_1567c = add i32 %v0_1567c, 1
  %v1_15680 = add i32 %v0_15680, 1
  %v1_15684 = inttoptr i32 %v1_15680 to i8*
  %v2_15684 = load i8, i8* %v1_15684, align 1
  %v3_15684 = zext i8 %v2_15684 to i32
  store i32 %v3_15684, i32* @ip, align 4
  %v2_15688 = icmp eq i8 %v2_15684, 0
  br i1 %v2_15688, label %dec_label_pc_15694, label %dec_label_pc_15668.preheader

dec_label_pc_15668.preheader:                     ; preds = %dec_label_pc_15654, %dec_label_pc_1567c
  %v0_15680 = phi i32 [ %v1_15680, %dec_label_pc_1567c ], [ %v0_156842, %dec_label_pc_15654 ]
  %v0_1567c = phi i32 [ %v1_1567c, %dec_label_pc_1567c ], [ 0, %dec_label_pc_15654 ]
  %v0_1566010 = phi i32 [ %v3_15684, %dec_label_pc_1567c ], [ %v3_156845, %dec_label_pc_15654 ]
  br label %dec_label_pc_15668

dec_label_pc_15694:                               ; preds = %dec_label_pc_1567c, %dec_label_pc_15668, %dec_label_pc_15654
  %v0_15694 = phi i32 [ 0, %dec_label_pc_15654 ], [ %v0_1567c, %dec_label_pc_15668 ], [ %v1_1567c, %dec_label_pc_1567c ]
  ret i32 %v0_15694

; uselistorder directives
  uselistorder i32 %v0_15670, { 1, 0 }
  uselistorder label %dec_label_pc_15668.preheader, { 1, 0 }
}

define i32 @function_156a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_156a0:
  store i32 %arg1, i32* @r0, align 4
  %v1_156a4 = urem i32 %arg2, 256
  store i32 %v1_156a4, i32* @r4, align 4
  %v2_156a4 = icmp eq i32 %v1_156a4, 0
  br i1 %v2_156a4, label %dec_label_pc_156b8, label %dec_label_pc_156cc.preheader

dec_label_pc_156cc.preheader:                     ; preds = %dec_label_pc_156a0
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_156d43 = call i32 @function_157dc(i32 %arg1, i32 %v1_156a4)
  %v2_156d85 = icmp eq i32 %v2_156d43, 0
  br i1 %v2_156d85, label %dec_label_pc_156e0, label %dec_label_pc_156c4

dec_label_pc_156b8:                               ; preds = %dec_label_pc_156a0
  %v2_156bc = call i32 @function_157dc(i32 %arg1, i32 0)
  br label %dec_label_pc_156e4

dec_label_pc_156c4:                               ; preds = %dec_label_pc_156cc.preheader, %dec_label_pc_156c4
  %v2_156d46 = phi i32 [ %v2_156d4, %dec_label_pc_156c4 ], [ %v2_156d43, %dec_label_pc_156cc.preheader ]
  store i32 %v2_156d46, i32* @r5, align 4
  %v1_156c8 = add i32 %v2_156d46, 1
  store i32 %v1_156c8, i32* @r0, align 4
  %v0_156d0 = load i32, i32* @r4, align 4
  %v2_156d4 = call i32 @function_157dc(i32 %v1_156c8, i32 %v0_156d0)
  %v2_156d8 = icmp eq i32 %v2_156d4, 0
  br i1 %v2_156d8, label %dec_label_pc_156e0, label %dec_label_pc_156c4

dec_label_pc_156e0:                               ; preds = %dec_label_pc_156c4, %dec_label_pc_156cc.preheader
  %v0_156e0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_156e4

dec_label_pc_156e4:                               ; preds = %dec_label_pc_156b8, %dec_label_pc_156e0
  %storemerge = phi i32 [ %v2_156bc, %dec_label_pc_156b8 ], [ %v0_156e0, %dec_label_pc_156e0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_156d4, { 1, 0 }
  uselistorder i32 %v1_156c8, { 1, 0 }
  uselistorder i32 %v1_156a4, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_157dc, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_156e4, { 1, 0 }
  uselistorder label %dec_label_pc_156c4, { 1, 0 }
}

define i32 @function_156f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_156f0:
  %v1_156f4 = urem i32 %arg1, 256
  %v0_157142 = load i32, i32* @r0, align 4
  %v1_157143 = urem i32 %v0_157142, 4
  %v2_157144 = icmp eq i32 %v1_157143, 0
  br i1 %v2_157144, label %dec_label_pc_1571c, label %dec_label_pc_156fc

dec_label_pc_156fc:                               ; preds = %dec_label_pc_156f0, %dec_label_pc_15710
  %v0_15710 = phi i32 [ %v1_15710, %dec_label_pc_15710 ], [ %v0_157142, %dec_label_pc_156f0 ]
  %v1_156fc = inttoptr i32 %v0_15710 to i8*
  %v2_156fc = load i8, i8* %v1_156fc, align 1
  %v3_156fc = zext i8 %v2_156fc to i32
  %v9_15700 = icmp eq i32 %v3_156fc, %v1_156f4
  br i1 %v9_15700, label %dec_label_pc_157cc, label %dec_label_pc_15708

dec_label_pc_15708:                               ; preds = %dec_label_pc_156fc
  %v2_15708 = icmp eq i8 %v2_156fc, 0
  br i1 %v2_15708, label %dec_label_pc_157cc, label %dec_label_pc_15710

dec_label_pc_15710:                               ; preds = %dec_label_pc_15708
  %v1_15710 = add i32 %v0_15710, 1
  %v1_15714 = urem i32 %v1_15710, 4
  %v2_15714 = icmp eq i32 %v1_15714, 0
  br i1 %v2_15714, label %dec_label_pc_1571c, label %dec_label_pc_156fc

dec_label_pc_1571c:                               ; preds = %dec_label_pc_15710, %dec_label_pc_156f0
  %v0_15720 = phi i32 [ %v0_157142, %dec_label_pc_156f0 ], [ %v1_15710, %dec_label_pc_15710 ]
  %v4_1571c = mul nuw nsw i32 %v1_156f4, 256
  %v5_1571c = or i32 %v4_1571c, %v1_156f4
  %v4_15724 = mul i32 %v5_1571c, 65536
  %v5_15724 = or i32 %v4_15724, %v5_1571c
  br label %dec_label_pc_15728

dec_label_pc_15728:                               ; preds = %dec_label_pc_157c4, %dec_label_pc_15764, %dec_label_pc_1571c
  %v0_1578c = phi i32 [ %v0_15720, %dec_label_pc_1571c ], [ %v4_15728, %dec_label_pc_15764 ], [ %v4_15728, %dec_label_pc_157c4 ]
  %v1_15728 = inttoptr i32 %v0_1578c to i32*
  %v2_15728 = load i32, i32* %v1_15728, align 4
  %v4_15728 = add i32 %v0_1578c, 4
  %v2_15730 = xor i32 %v2_15728, %v5_15724
  %v2_15734 = add i32 %v2_15730, 2130640639
  store i32 %v2_15734, i32* @ip, align 4
  %v2_1573c = add i32 %v2_15728, 2130640639
  %v1_15740 = sub i32 -1, %v2_15728
  %v2_15744 = xor i32 %v2_1573c, %v1_15740
  %v2_15750 = and i32 %v2_15744, -2130640640
  %v2_15758 = icmp eq i32 %v2_15750, 0
  br i1 %v2_15758, label %dec_label_pc_15764, label %dec_label_pc_1576c

dec_label_pc_15764:                               ; preds = %dec_label_pc_15728
  %v1_1574c = sub i32 -1, %v2_15730
  %v2_15754 = xor i32 %v2_15734, %v1_1574c
  %v2_1575c = and i32 %v2_15754, -2130640640
  %v2_15764 = icmp eq i32 %v2_1575c, 0
  br i1 %v2_15764, label %dec_label_pc_15728, label %dec_label_pc_1576c

dec_label_pc_1576c:                               ; preds = %dec_label_pc_15728, %dec_label_pc_15764
  %v2_1576c = inttoptr i32 %v0_1578c to i8*
  %v3_1576c = load i8, i8* %v2_1576c, align 1
  %v4_1576c = zext i8 %v3_1576c to i32
  %v9_15770 = icmp eq i32 %v4_1576c, %v1_156f4
  br i1 %v9_15770, label %dec_label_pc_157cc, label %dec_label_pc_1577c

dec_label_pc_1577c:                               ; preds = %dec_label_pc_1576c
  %v2_1577c = icmp eq i8 %v3_1576c, 0
  br i1 %v2_1577c, label %dec_label_pc_157cc, label %dec_label_pc_15784

dec_label_pc_15784:                               ; preds = %dec_label_pc_1577c
  %v1_15784 = add i32 %v0_1578c, 1
  %v2_15784 = inttoptr i32 %v1_15784 to i8*
  %v3_15784 = load i8, i8* %v2_15784, align 1
  %v4_15784 = zext i8 %v3_15784 to i32
  %v9_15788 = icmp eq i32 %v4_15784, %v1_156f4
  br i1 %v9_15788, label %dec_label_pc_157cc, label %dec_label_pc_15794

dec_label_pc_15794:                               ; preds = %dec_label_pc_15784
  %v2_15794 = icmp eq i8 %v3_15784, 0
  br i1 %v2_15794, label %dec_label_pc_157cc, label %dec_label_pc_1579c

dec_label_pc_1579c:                               ; preds = %dec_label_pc_15794
  %v1_1579c = add i32 %v0_1578c, 2
  %v2_1579c = inttoptr i32 %v1_1579c to i8*
  %v3_1579c = load i8, i8* %v2_1579c, align 1
  %v4_1579c = zext i8 %v3_1579c to i32
  %v9_157a0 = icmp eq i32 %v4_1579c, %v1_156f4
  br i1 %v9_157a0, label %dec_label_pc_157cc, label %dec_label_pc_157ac

dec_label_pc_157ac:                               ; preds = %dec_label_pc_1579c
  %v2_157ac = icmp eq i8 %v3_1579c, 0
  br i1 %v2_157ac, label %dec_label_pc_157cc, label %dec_label_pc_157b4

dec_label_pc_157b4:                               ; preds = %dec_label_pc_157ac
  %v1_157b4 = add i32 %v0_1578c, 3
  %v2_157b4 = inttoptr i32 %v1_157b4 to i8*
  %v3_157b4 = load i8, i8* %v2_157b4, align 1
  %v4_157b4 = zext i8 %v3_157b4 to i32
  %v9_157b8 = icmp eq i32 %v4_157b4, %v1_156f4
  br i1 %v9_157b8, label %dec_label_pc_157cc, label %dec_label_pc_157c4

dec_label_pc_157c4:                               ; preds = %dec_label_pc_157b4
  %v2_157c4 = icmp eq i8 %v3_157b4, 0
  br i1 %v2_157c4, label %dec_label_pc_157cc, label %dec_label_pc_15728

dec_label_pc_157cc:                               ; preds = %dec_label_pc_15708, %dec_label_pc_156fc, %dec_label_pc_157c4, %dec_label_pc_157b4, %dec_label_pc_157ac, %dec_label_pc_1579c, %dec_label_pc_15794, %dec_label_pc_15784, %dec_label_pc_1577c, %dec_label_pc_1576c
  %v1_157d0 = phi i32 [ %v1_157b4, %dec_label_pc_157c4 ], [ %v1_157b4, %dec_label_pc_157b4 ], [ %v1_1579c, %dec_label_pc_157ac ], [ %v1_1579c, %dec_label_pc_1579c ], [ %v1_15784, %dec_label_pc_15794 ], [ %v1_15784, %dec_label_pc_15784 ], [ %v0_1578c, %dec_label_pc_1577c ], [ %v0_1578c, %dec_label_pc_1576c ], [ %v0_15710, %dec_label_pc_156fc ], [ %v0_15710, %dec_label_pc_15708 ]
  ret i32 %v1_157d0

; uselistorder directives
  uselistorder i32 %v4_15728, { 1, 0 }
  uselistorder i32 %v2_15728, { 0, 2, 1 }
  uselistorder i32 %v0_1578c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1571c, { 1, 0 }
  uselistorder i32 %v1_15710, { 1, 0, 2 }
  uselistorder i32 %v0_157142, { 2, 1, 0 }
  uselistorder i32 %v1_156f4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_157cc, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1576c, { 1, 0 }
  uselistorder label %dec_label_pc_156fc, { 1, 0 }
}

define i32 @function_157dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_157dc:
  %v1_157e0 = urem i32 %arg1, 256
  %v0_158003 = load i32, i32* @r0, align 4
  %v1_158004 = urem i32 %v0_158003, 4
  %v2_158005 = icmp eq i32 %v1_158004, 0
  br i1 %v2_158005, label %dec_label_pc_15808, label %dec_label_pc_157e8

dec_label_pc_157e8:                               ; preds = %dec_label_pc_157dc, %dec_label_pc_157fc
  %v0_157fc = phi i32 [ %v1_157fc, %dec_label_pc_157fc ], [ %v0_158003, %dec_label_pc_157dc ]
  %v1_157e8 = inttoptr i32 %v0_157fc to i8*
  %v2_157e8 = load i8, i8* %v1_157e8, align 1
  %v3_157e8 = zext i8 %v2_157e8 to i32
  %v9_157ec = icmp eq i32 %v3_157e8, %v1_157e0
  br i1 %v9_157ec, label %dec_label_pc_158bc, label %dec_label_pc_157f4

dec_label_pc_157f4:                               ; preds = %dec_label_pc_157e8
  %v2_157f4 = icmp eq i8 %v2_157e8, 0
  br i1 %v2_157f4, label %dec_label_pc_158b8, label %dec_label_pc_157fc

dec_label_pc_157fc:                               ; preds = %dec_label_pc_157f4
  %v1_157fc = add i32 %v0_157fc, 1
  %v1_15800 = urem i32 %v1_157fc, 4
  %v2_15800 = icmp eq i32 %v1_15800, 0
  br i1 %v2_15800, label %dec_label_pc_15808, label %dec_label_pc_157e8

dec_label_pc_15808:                               ; preds = %dec_label_pc_157fc, %dec_label_pc_157dc
  %v0_1580c = phi i32 [ %v0_158003, %dec_label_pc_157dc ], [ %v1_157fc, %dec_label_pc_157fc ]
  %v4_15808 = mul nuw nsw i32 %v1_157e0, 256
  %v5_15808 = or i32 %v4_15808, %v1_157e0
  %v4_15810 = mul i32 %v5_15808, 65536
  %v5_15810 = or i32 %v4_15810, %v5_15808
  br label %dec_label_pc_15814

dec_label_pc_15814:                               ; preds = %dec_label_pc_158b0, %dec_label_pc_15850, %dec_label_pc_15808
  %v0_15878 = phi i32 [ %v0_1580c, %dec_label_pc_15808 ], [ %v4_15814, %dec_label_pc_15850 ], [ %v4_15814, %dec_label_pc_158b0 ]
  %v1_15814 = inttoptr i32 %v0_15878 to i32*
  %v2_15814 = load i32, i32* %v1_15814, align 4
  %v4_15814 = add i32 %v0_15878, 4
  %v2_1581c = xor i32 %v2_15814, %v5_15810
  %v2_15820 = add i32 %v2_1581c, 2130640639
  store i32 %v2_15820, i32* @ip, align 4
  %v2_15828 = add i32 %v2_15814, 2130640639
  %v1_1582c = sub i32 -1, %v2_15814
  %v2_15830 = xor i32 %v2_15828, %v1_1582c
  %v2_1583c = and i32 %v2_15830, -2130640640
  %v2_15844 = icmp eq i32 %v2_1583c, 0
  br i1 %v2_15844, label %dec_label_pc_15850, label %dec_label_pc_15858

dec_label_pc_15850:                               ; preds = %dec_label_pc_15814
  %v1_15838 = sub i32 -1, %v2_1581c
  %v2_15840 = xor i32 %v2_15820, %v1_15838
  %v2_15848 = and i32 %v2_15840, -2130640640
  %v2_15850 = icmp eq i32 %v2_15848, 0
  br i1 %v2_15850, label %dec_label_pc_15814, label %dec_label_pc_15858

dec_label_pc_15858:                               ; preds = %dec_label_pc_15814, %dec_label_pc_15850
  %v2_15858 = inttoptr i32 %v0_15878 to i8*
  %v3_15858 = load i8, i8* %v2_15858, align 1
  %v4_15858 = zext i8 %v3_15858 to i32
  %v9_1585c = icmp eq i32 %v4_15858, %v1_157e0
  br i1 %v9_1585c, label %dec_label_pc_158bc, label %dec_label_pc_15868

dec_label_pc_15868:                               ; preds = %dec_label_pc_15858
  %v2_15868 = icmp eq i8 %v3_15858, 0
  br i1 %v2_15868, label %dec_label_pc_158b8, label %dec_label_pc_15870

dec_label_pc_15870:                               ; preds = %dec_label_pc_15868
  %v1_15870 = add i32 %v0_15878, 1
  %v2_15870 = inttoptr i32 %v1_15870 to i8*
  %v3_15870 = load i8, i8* %v2_15870, align 1
  %v4_15870 = zext i8 %v3_15870 to i32
  %v9_15874 = icmp eq i32 %v4_15870, %v1_157e0
  br i1 %v9_15874, label %dec_label_pc_158bc, label %dec_label_pc_15880

dec_label_pc_15880:                               ; preds = %dec_label_pc_15870
  %v2_15880 = icmp eq i8 %v3_15870, 0
  br i1 %v2_15880, label %dec_label_pc_158b8, label %dec_label_pc_15888

dec_label_pc_15888:                               ; preds = %dec_label_pc_15880
  %v1_15888 = add i32 %v0_15878, 2
  %v2_15888 = inttoptr i32 %v1_15888 to i8*
  %v3_15888 = load i8, i8* %v2_15888, align 1
  %v4_15888 = zext i8 %v3_15888 to i32
  %v9_1588c = icmp eq i32 %v4_15888, %v1_157e0
  br i1 %v9_1588c, label %dec_label_pc_158bc, label %dec_label_pc_15898

dec_label_pc_15898:                               ; preds = %dec_label_pc_15888
  %v2_15898 = icmp eq i8 %v3_15888, 0
  br i1 %v2_15898, label %dec_label_pc_158b8, label %dec_label_pc_158a0

dec_label_pc_158a0:                               ; preds = %dec_label_pc_15898
  %v1_158a0 = add i32 %v0_15878, 3
  %v2_158a0 = inttoptr i32 %v1_158a0 to i8*
  %v3_158a0 = load i8, i8* %v2_158a0, align 1
  %v4_158a0 = zext i8 %v3_158a0 to i32
  %v9_158a4 = icmp eq i32 %v4_158a0, %v1_157e0
  br i1 %v9_158a4, label %dec_label_pc_158bc, label %dec_label_pc_158b0

dec_label_pc_158b0:                               ; preds = %dec_label_pc_158a0
  %v2_158b0 = icmp eq i8 %v3_158a0, 0
  br i1 %v2_158b0, label %dec_label_pc_158b8, label %dec_label_pc_15814

dec_label_pc_158b8:                               ; preds = %dec_label_pc_157f4, %dec_label_pc_158b0, %dec_label_pc_15898, %dec_label_pc_15880, %dec_label_pc_15868
  br label %dec_label_pc_158bc

dec_label_pc_158bc:                               ; preds = %dec_label_pc_157e8, %dec_label_pc_158a0, %dec_label_pc_15888, %dec_label_pc_15870, %dec_label_pc_15858, %dec_label_pc_158b8
  %v1_158c0 = phi i32 [ 0, %dec_label_pc_158b8 ], [ %v1_158a0, %dec_label_pc_158a0 ], [ %v1_15888, %dec_label_pc_15888 ], [ %v1_15870, %dec_label_pc_15870 ], [ %v0_15878, %dec_label_pc_15858 ], [ %v0_157fc, %dec_label_pc_157e8 ]
  ret i32 %v1_158c0

; uselistorder directives
  uselistorder i32 %v4_15814, { 1, 0 }
  uselistorder i32 %v2_15814, { 0, 2, 1 }
  uselistorder i32 %v0_15878, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_15808, { 1, 0 }
  uselistorder i32 %v1_157fc, { 1, 0, 2 }
  uselistorder i32 %v0_158003, { 2, 1, 0 }
  uselistorder i32 %v1_157e0, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 65, 66, 114, 67, 68, 69, 70, 71, 72, 74, 75, 115, 7, 110, 29, 111, 28, 112, 42, 113, 73, 43, 81, 30, 76, 77, 2, 78, 79, 80, 44, 8, 82, 31, 83, 45, 84, 46, 85, 47, 32, 48, 49, 50, 51, 52, 0, 86, 87, 88, 10, 9, 53, 89, 33, 90, 12, 11, 54, 91, 34, 92, 56, 93, 14, 13, 55, 94, 35, 95, 58, 96, 16, 15, 57, 97, 36, 98, 59, 18, 17, 60, 100, 37, 101, 20, 19, 61, 38, 102, 22, 21, 62, 103, 39, 104, 24, 23, 63, 105, 40, 106, 26, 25, 64, 107, 41, 108, 27, 109, 6, 99 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 142, 146, 141, 147, 26, 27, 28, 29, 30, 31, 32, 33, 140, 34, 35, 36, 2, 37, 0, 3, 38, 39, 41, 40, 1, 44, 42, 43, 45, 143, 47, 46, 50, 51, 52, 48, 49, 53, 54, 56, 57, 58, 55, 59, 144, 60, 62, 61, 64, 63, 65, 145, 66, 68, 67, 70, 69, 75, 71, 76, 72, 77, 73, 74, 78, 79, 80, 81, 83, 84, 82, 139, 86, 85, 89, 90, 91, 87, 88, 92, 99, 93, 100, 94, 101, 95, 102, 96, 103, 97, 98, 105, 104, 106, 107, 108, 109, 114, 110, 115, 111, 116, 112, 113, 118, 117, 119, 120, 121, 124, 122, 125, 123, 126, 127, 128, 129, 130, 132, 133, 131, 134, 136, 137, 135, 138 }
  uselistorder label %dec_label_pc_158bc, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_158b8, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15858, { 1, 0 }
  uselistorder label %dec_label_pc_157e8, { 1, 0 }
}

define i32 @function_158cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_158cc:
  %stack_var_-68 = alloca i32, align 4
  %v2_158d4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_158d4, i32* @r1, align 4
  %v0_158d8 = call i32 @function_158f0()
  %v1_158dc = sub i32 1, %v0_158d8
  %v2_158dc = icmp ult i32 %v0_158d8, 2
  br i1 %v2_158dc, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_158cc
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_158cc, %bb
  %v1_158ec = phi i32 [ %v1_158dc, %dec_label_pc_158cc ], [ 0, %bb ]
  ret i32 %v1_158ec

; uselistorder directives
  uselistorder i32 %v0_158d8, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_158f0() local_unnamed_addr {
dec_label_pc_158f0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_158f0 = load i32, i32* @r4, align 4
  %v6_158f0 = load i32, i32* @r5, align 4
  %v2_158f8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_158fc = load i32, i32* @r1, align 4
  store i32 %v0_158fc, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_15908 = load i32, i32* @r0, align 4
  %v3_15908 = call i32 @function_10ad8(i32 %v0_15908, i32 21505, i32 %v2_158f8)
  store i32 %v3_15908, i32* %r0.global-to-local, align 4
  store i32 %v3_15908, i32* @r5, align 4
  %v2_1590c = icmp eq i32 %v3_15908, 0
  br i1 %v2_1590c, label %dec_label_pc_15914, label %dec_label_pc_15958

dec_label_pc_15914:                               ; preds = %dec_label_pc_158f0
  %v4_15920 = zext i8 %tmp to i32
  store i32 %v4_15920, i32* @ip, align 4
  %v3_15924 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_15924, i32* @r3, align 4
  %v1_15928 = load i32, i32* @r4, align 4
  %v2_15928 = add i32 %v1_15928, 4
  %v3_15928 = inttoptr i32 %v2_15928 to i32*
  %v0_1592c = load i32, i32* %r1.global-to-local, align 4
  %v1_1592c = load i32, i32* @r4, align 4
  %v2_1592c = add i32 %v1_1592c, 8
  %v3_1592c = inttoptr i32 %v2_1592c to i32*
  store i32 %v0_1592c, i32* %v3_1592c, align 4
  %v0_15930 = load i32, i32* %r0.global-to-local, align 4
  %v1_15930 = load i32, i32* @r4, align 4
  %v2_15930 = add i32 %v1_15930, 12
  %v3_15930 = inttoptr i32 %v2_15930 to i32*
  store i32 %v0_15930, i32* %v3_15930, align 4
  %v2_15934 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_15934, i32* @r1, align 4
  %v1_1593c = load i32, i32* @r4, align 4
  %v2_1593c = inttoptr i32 %v1_1593c to i32*
  store i32 %v3_15924, i32* %v2_1593c, align 4
  %v0_15940 = load i32, i32* @ip, align 4
  %v1_15940 = trunc i32 %v0_15940 to i8
  %v2_15940 = load i32, i32* @r4, align 4
  %v3_15940 = add i32 %v2_15940, 16
  %v4_15940 = inttoptr i32 %v3_15940 to i8*
  store i8 %v1_15940, i8* %v4_15940, align 1
  %v0_15944 = load i32, i32* @r4, align 4
  %v1_15944 = add i32 %v0_15944, 17
  store i32 %v1_15944, i32* %r0.global-to-local, align 4
  %v4_15948 = call i32 @function_15e34(i32 %v1_15944, i32 %v2_15934, i32 19, i32 %v3_15924)
  store i32 %v4_15948, i32* %r0.global-to-local, align 4
  %v0_1594c = load i32, i32* @r5, align 4
  store i32 %v0_1594c, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_15954 = inttoptr i32 %v4_15948 to i8*
  %v3_15954 = call i32 @function_10fe0(i8* %v2_15954, i32 %v0_1594c)
  store i32 %v3_15954, i32* %r0.global-to-local, align 4
  %v0_15958.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15958

dec_label_pc_15958:                               ; preds = %dec_label_pc_158f0, %dec_label_pc_15914
  %v0_15958 = phi i32 [ %v3_15908, %dec_label_pc_158f0 ], [ %v0_15958.pre, %dec_label_pc_15914 ]
  store i32 %v0_15958, i32* %r0.global-to-local, align 4
  store i32 %v3_158f0, i32* @r4, align 4
  store i32 %v6_158f0, i32* @r5, align 4
  ret i32 %v0_15958

; uselistorder directives
  uselistorder i32 %v0_15958, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_10fe0, { 2, 3, 4, 8, 0, 1, 11, 10, 9, 5, 6, 7 }
  uselistorder i32 13, { 25, 24, 0, 1, 27, 28, 26, 29, 30, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 3, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 35, 36, 37, 22, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 23, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 5, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 6, 68, 69 }
  uselistorder i32 17, { 14, 1, 4, 15, 16, 5, 17, 6, 7, 8, 9, 2, 18, 3, 19, 20, 10, 21, 11, 22, 23, 24, 0, 25, 12, 26, 13 }
  uselistorder i32 (i32, i32, i32)* @function_10ad8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15958, { 1, 0 }
}

define i32 @function_1596c() local_unnamed_addr {
dec_label_pc_1596c:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1596c = load i32, i32* @r4, align 4
  store i32 %v3_1596c, i32* %stack_var_-28, align 4
  %v0_15974 = load i32, i32* @r0, align 4
  %v2_15974 = icmp eq i32 %v0_15974, 0
  %v0_1597c = load i32, i32* @r1, align 4
  br i1 %v2_15974, label %dec_label_pc_15a50, label %dec_label_pc_15984

dec_label_pc_15984:                               ; preds = %dec_label_pc_1596c
  br label %dec_label_pc_1599c

dec_label_pc_1599c:                               ; preds = %dec_label_pc_15984, %dec_label_pc_15a14
  %v1_15a14 = phi i32 [ 0, %dec_label_pc_15984 ], [ %v5_15a14, %dec_label_pc_15a14 ]
  %v0_15a18 = phi i32 [ 1, %dec_label_pc_15984 ], [ %v1_15a18, %dec_label_pc_15a14 ]
  %v0_1599c = phi i32 [ %v0_15974, %dec_label_pc_15984 ], [ %v0_1599c12, %dec_label_pc_15a14 ]
  %v1_1599c = inttoptr i32 %v0_1599c to i8*
  %v2_1599c = load i8, i8* %v1_1599c, align 1
  %v3_1599c = zext i8 %v2_1599c to i32
  %v4_159a0 = load i32, i32* inttoptr (i32 124312 to i32*), align 8
  %v2_159a4 = mul nuw nsw i32 %v3_1599c, 2
  %v2_159a8 = add i32 %v2_159a4, %v4_159a0
  %v3_159a8 = inttoptr i32 %v2_159a8 to i16*
  %v4_159a8 = load i16, i16* %v3_159a8, align 2
  %v1_159ac = and i16 %v4_159a8, 8
  %v2_159ac = icmp eq i16 %v1_159ac, 0
  br i1 %v2_159ac, label %dec_label_pc_15a50, label %dec_label_pc_159b4

dec_label_pc_159b4:                               ; preds = %dec_label_pc_1599c
  br label %dec_label_pc_159d4

dec_label_pc_159bc:                               ; preds = %dec_label_pc_159d4
  %v2_159bc = mul i32 %v0_15a14, 10
  %v1_159c0 = add i32 %v2_159bc, -48
  %v2_159c4 = add i32 %v3_159d4, %v1_159c0
  %v8_159cc = icmp sgt i32 %v2_159c4, 255
  br i1 %v8_159cc, label %dec_label_pc_15a50, label %dec_label_pc_159d0

dec_label_pc_159d0:                               ; preds = %dec_label_pc_159bc
  %v1_159d0 = add i32 %v0_15a04, 1
  store i32 %v1_159d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_159d4

dec_label_pc_159d4:                               ; preds = %dec_label_pc_159b4, %dec_label_pc_159d0
  %v0_15a14 = phi i32 [ 0, %dec_label_pc_159b4 ], [ %v2_159c4, %dec_label_pc_159d0 ]
  %v0_15a04 = phi i32 [ %v0_1599c, %dec_label_pc_159b4 ], [ %v1_159d0, %dec_label_pc_159d0 ]
  %v1_159d4 = inttoptr i32 %v0_15a04 to i8*
  %v2_159d4 = load i8, i8* %v1_159d4, align 1
  %v3_159d4 = zext i8 %v2_159d4 to i32
  %v2_159d8 = mul nuw nsw i32 %v3_159d4, 2
  %v2_159dc = add i32 %v2_159d8, %v4_159a0
  %v3_159dc = inttoptr i32 %v2_159dc to i16*
  %v4_159dc = load i16, i16* %v3_159dc, align 2
  %v6_159dc = zext i16 %v4_159dc to i32
  %v1_159e0 = and i32 %v6_159dc, 8
  %v2_159e0 = icmp eq i32 %v1_159e0, 0
  br i1 %v2_159e0, label %dec_label_pc_159e8, label %dec_label_pc_159bc

dec_label_pc_159e8:                               ; preds = %dec_label_pc_159d4
  %v7_159e8 = icmp eq i32 %v0_15a18, 4
  br i1 %v7_159e8, label %dec_label_pc_15a00, label %dec_label_pc_159f0

dec_label_pc_159f0:                               ; preds = %dec_label_pc_159e8
  %v7_159f0 = icmp eq i8 %v2_159d4, 46
  br i1 %v7_159f0, label %dec_label_pc_159f8, label %dec_label_pc_15a50

dec_label_pc_159f8:                               ; preds = %dec_label_pc_159f0
  %v1_159f8 = add i32 %v0_15a04, 1
  store i32 %v1_159f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15a14

dec_label_pc_15a00:                               ; preds = %dec_label_pc_159e8
  %v2_15a00 = icmp eq i8 %v2_159d4, 0
  %v1_15a04 = add i32 %v0_15a04, 1
  store i32 %v1_15a04, i32* %r0.global-to-local, align 4
  br i1 %v2_15a00, label %dec_label_pc_15a14, label %dec_label_pc_15a0c

dec_label_pc_15a0c:                               ; preds = %dec_label_pc_15a00
  %v1_15a0c = and i32 %v6_159dc, 32
  %v2_15a0c = icmp eq i32 %v1_15a0c, 0
  br i1 %v2_15a0c, label %dec_label_pc_15a50, label %dec_label_pc_15a14

dec_label_pc_15a14:                               ; preds = %dec_label_pc_15a0c, %dec_label_pc_15a00, %dec_label_pc_159f8
  %v0_1599c12 = phi i32 [ %v1_15a04, %dec_label_pc_15a0c ], [ %v1_15a04, %dec_label_pc_15a00 ], [ %v1_159f8, %dec_label_pc_159f8 ]
  %v4_15a14 = mul i32 %v1_15a14, 256
  %v5_15a14 = or i32 %v0_15a14, %v4_15a14
  %v1_15a18 = add nuw nsw i32 %v0_15a18, 1
  %v7_15a20 = icmp slt i32 %v1_15a18, 5
  br i1 %v7_15a20, label %dec_label_pc_1599c, label %dec_label_pc_15a24

dec_label_pc_15a24:                               ; preds = %dec_label_pc_15a14
  %v2_15a24 = icmp eq i32 %v0_1597c, 0
  br i1 %v2_15a24, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_15a24
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15a54

bb:                                               ; preds = %dec_label_pc_15a24
  %v4_15a28 = udiv i32 %v5_15a14, 16777216
  %v2_15a2c = udiv i32 %v5_15a14, 256
  %v5_15a30 = and i32 %v2_15a2c, 65280
  %v2_15a34 = and i32 %v5_15a14, 65280
  %v5_15a38 = mul nuw nsw i32 %v2_15a34, 256
  %v5_15a3c = mul i32 %v0_15a14, 16777216
  %v6_15a30 = or i32 %v4_15a28, %v5_15a3c
  %v6_15a38 = or i32 %v6_15a30, %v5_15a30
  %v6_15a3c = or i32 %v6_15a38, %v5_15a38
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15a48 = inttoptr i32 %v0_1597c to i32*
  store i32 %v6_15a3c, i32* %v3_15a48, align 4
  %v2_15a54.pre = load i32, i32* %stack_var_-28, align 4
  %v1_15a58.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15a54

dec_label_pc_15a50:                               ; preds = %dec_label_pc_159f0, %dec_label_pc_15a0c, %dec_label_pc_1599c, %dec_label_pc_159bc, %dec_label_pc_1596c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15a54

dec_label_pc_15a54:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_15a50
  %v1_15a58 = phi i32 [ %v1_15a58.pre, %bb ], [ 0, %dec_label_pc_15a50 ], [ 1, %.thread7.thread ]
  %v2_15a54 = phi i32 [ %v2_15a54.pre, %bb ], [ %v3_1596c, %dec_label_pc_15a50 ], [ %v3_1596c, %.thread7.thread ]
  store i32 %v2_15a54, i32* @r4, align 4
  ret i32 %v1_15a58

; uselistorder directives
  uselistorder i32 %v1_15a18, { 1, 0 }
  uselistorder i32 %v5_15a14, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15a04, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 62, 1, 7, 0, 8, 2, 3, 51, 52, 9, 10, 4, 11, 53, 54, 42, 12, 13, 14, 15, 16, 45, 46, 43, 44, 55, 56, 57, 49, 50, 47, 48, 58, 59, 60, 17, 18, 19, 20, 21, 63, 64, 22, 23, 24, 65, 25, 26, 66, 27, 28, 29, 30, 67, 31, 32, 68, 33, 34, 35, 36, 69, 70, 37, 38, 39, 40, 41, 71, 5, 72, 6, 61 }
  uselistorder i32 16777216, { 0, 1, 76, 75, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 28, 29, 30, 31, 33, 32, 35, 34, 37, 36, 38, 39, 40, 44, 41, 45, 42, 43, 46, 47, 49, 48, 50, 51, 53, 52, 58, 54, 59, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77 }
  uselistorder i32 5, { 14, 0, 49, 4, 28, 29, 15, 24, 16, 25, 17, 26, 18, 27, 2, 1, 30, 31, 19, 20, 32, 21, 22, 5, 33, 6, 34, 35, 7, 36, 37, 8, 38, 42, 9, 43, 10, 44, 11, 45, 12, 46, 13, 47, 3, 48, 39, 23, 40, 41 }
  uselistorder i32 32, { 92, 44, 42, 81, 82, 83, 84, 89, 90, 77, 78, 79, 80, 87, 88, 45, 46, 50, 47, 51, 48, 52, 49, 53, 54, 95, 96, 55, 97, 63, 64, 62, 65, 66, 67, 68, 69, 70, 57, 58, 2, 59, 3, 60, 5, 4, 56, 61, 71, 98, 7, 6, 9, 8, 11, 10, 43, 72, 91, 13, 12, 15, 14, 17, 16, 19, 18, 76, 21, 20, 22, 24, 23, 25, 26, 28, 27, 85, 86, 29, 30, 73, 31, 32, 33, 74, 34, 0, 35, 1, 36, 93, 37, 94, 38, 39, 40, 41, 75 }
  uselistorder i8 0, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 25, 18, 27, 3, 16, 4, 28, 30, 29, 19, 31, 32, 20, 33, 34, 0, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 1, 49, 50, 51, 22, 52, 55, 23, 53, 54, 21, 56, 57, 58, 59, 60, 2, 61, 24, 62, 63, 64, 65, 66, 67, 68 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 14, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i32 10, { 4, 25, 26, 27, 7, 41, 43, 42, 0, 38, 39, 72, 44, 1, 33, 9, 28, 30, 10, 29, 11, 31, 12, 32, 22, 5, 34, 23, 13, 3, 24, 35, 14, 36, 37, 15, 16, 17, 40, 8, 45, 46, 47, 48, 49, 50, 51, 18, 52, 53, 54, 19, 55, 56, 57, 2, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 6, 71, 20, 73, 21 }
  uselistorder i16 0, { 0, 1, 2, 3, 12, 13, 4, 5, 14, 15, 16, 17, 18, 19, 20, 21, 6, 22, 7, 23, 24, 25, 8, 9, 10, 11, 26, 27 }
  uselistorder i32 2, { 5, 6, 152, 63, 64, 60, 291, 292, 75, 293, 294, 65, 295, 296, 158, 153, 159, 154, 91, 7, 160, 8, 66, 9, 10, 297, 70, 281, 11, 12, 282, 13, 14, 59, 278, 15, 16, 17, 279, 283, 18, 19, 20, 21, 76, 284, 285, 22, 23, 0, 155, 286, 24, 287, 92, 25, 151, 26, 27, 28, 29, 30, 93, 95, 94, 67, 68, 96, 179, 180, 101, 181, 102, 174, 103, 175, 104, 176, 105, 177, 97, 178, 98, 182, 99, 161, 166, 100, 162, 82, 163, 83, 164, 84, 165, 167, 168, 169, 170, 171, 85, 172, 86, 173, 77, 31, 32, 183, 186, 187, 106, 71, 156, 188, 107, 189, 109, 184, 108, 185, 88, 190, 73, 72, 110, 87, 191, 111, 192, 33, 34, 112, 193, 194, 113, 114, 115, 79, 78, 117, 116, 195, 69, 74, 196, 197, 198, 199, 200, 201, 202, 203, 204, 1, 35, 36, 37, 38, 39, 40, 118, 205, 89, 206, 207, 208, 209, 210, 211, 2, 41, 42, 43, 44, 45, 46, 120, 212, 119, 213, 214, 215, 216, 217, 218, 122, 219, 123, 220, 124, 221, 47, 3, 48, 49, 50, 51, 52, 125, 222, 121, 223, 224, 225, 226, 227, 228, 127, 229, 128, 230, 129, 231, 53, 4, 54, 55, 56, 57, 58, 130, 232, 126, 233, 235, 236, 237, 238, 239, 240, 132, 241, 131, 242, 243, 244, 245, 246, 247, 133, 90, 248, 249, 61, 250, 251, 252, 253, 254, 255, 135, 134, 256, 257, 62, 258, 259, 137, 260, 138, 261, 262, 263, 264, 265, 139, 266, 136, 267, 268, 269, 270, 271, 272, 141, 273, 140, 274, 275, 277, 142, 143, 276, 144, 145, 288, 290, 146, 147, 289, 148, 149, 80, 280, 150, 81, 234, 157 }
  uselistorder label %dec_label_pc_15a54, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a50, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_159d4, { 1, 0 }
  uselistorder label %dec_label_pc_1599c, { 1, 0 }
}

define i32 @function_15a64(i32 %arg1) local_unnamed_addr {
dec_label_pc_15a64:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_15a70 = load i32, i32* inttoptr (i32 124188 to i32*), align 4
  %v4_15a78 = load i32, i32* inttoptr (i32 124152 to i32*), align 8
  store i32 %v4_15a78, i32* %r1.global-to-local, align 4
  %v1_15a7c = add i32 %arg1, 44
  %v2_15a7c = inttoptr i32 %v1_15a7c to i32*
  %v3_15a7c = load i32, i32* %v2_15a7c, align 4
  %v1_15a80 = add i32 %arg1, 28
  %v2_15a80 = inttoptr i32 %v1_15a80 to i32*
  %v3_15a80 = load i32, i32* %v2_15a80, align 4
  store i32 %v3_15a80, i32* %r2.global-to-local, align 4
  %v2_15a84 = inttoptr i32 %v4_15a70 to i32*
  store i32 %v3_15a7c, i32* %v2_15a84, align 4
  %v0_15a88 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a88 = load i32, i32* %r1.global-to-local, align 4
  %v2_15a88 = inttoptr i32 %v1_15a88 to i32*
  store i32 %v0_15a88, i32* %v2_15a88, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 39, 0, 1, 3, 4, 5, 2, 6, 7, 8, 12, 9, 13, 11, 23, 24, 25, 26, 27, 28, 20, 21, 22, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 10, 14, 15, 16, 17 }
  uselistorder i32 124088, { 45, 0, 46, 47, 1, 2, 48, 3, 4, 5, 49, 50, 6, 7, 51, 8, 52, 53, 54, 55, 9, 12, 13, 11, 10, 14, 15, 40, 36, 34, 33, 35, 37, 38, 39, 32, 41, 27, 29, 28, 26, 25, 30, 31, 22, 21, 24, 23, 20, 19, 18, 17, 42, 43, 44, 56, 57, 58, 16 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_15a94(i32 %arg1) local_unnamed_addr {
dec_label_pc_15a94:
  %v0_15a94 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15a94, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15a94
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15a94, %bb
  %v4_15a98 = phi i32 [ %arg1, %dec_label_pc_15a94 ], [ 0, %bb ]
  ret i32 %v4_15a98

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 11, 12, 13, 27, 28, 29, 30, 14, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15a9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ad8:
  store i32 %arg1, i32* @global_var_2077c.480, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_2077c.480, { 1, 0, 2 }
}

define i32 @function_15ae8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15ae8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15ae8 = load i32, i32* @r7, align 4
  store i32 %v3_15ae8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15b10, label %dec_label_pc_15b00

dec_label_pc_15b00:                               ; preds = %dec_label_pc_15ae8
  %v0_15b00 = call i32 @function_10f8c()
  %v0_15b04 = load i32, i32* %r7.global-to-local, align 4
  %v1_15b04 = sub i32 0, %v0_15b04
  %v2_15b08 = inttoptr i32 %v0_15b00 to i32*
  store i32 %v1_15b04, i32* %v2_15b08, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_15b14.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15b10

dec_label_pc_15b10:                               ; preds = %dec_label_pc_15ae8, %dec_label_pc_15b00
  %v2_15b14 = phi i32 [ %v3_15ae8, %dec_label_pc_15ae8 ], [ %v2_15b14.pre, %dec_label_pc_15b00 ]
  %v0_15b10 = phi i32 [ %arg1, %dec_label_pc_15ae8 ], [ -1, %dec_label_pc_15b00 ]
  store i32 %v2_15b14, i32* %r7.global-to-local, align 4
  ret i32 %v0_15b10

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15b10, { 1, 0 }
}

define i32 @function_15b1c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15b1c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15b20 = load i32, i32* @r4, align 4
  %v6_15b20 = load i32, i32* @r5, align 4
  %v12_15b20 = load i32, i32* @r7, align 4
  %v1_15b24 = add i32 %arg3, 14
  %v2_15b2c = ptrtoint i32* %stack_var_-72 to i32
  %v1_15b30 = and i32 %v1_15b24, -8
  %v2_15b34 = sub i32 %v2_15b2c, %v1_15b30
  %v1_15b38 = add i32 %v2_15b34, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_15b38, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_15b74, label %dec_label_pc_15b60

dec_label_pc_15b60:                               ; preds = %dec_label_pc_15b1c
  %v0_15b60 = call i32 @function_10f8c()
  %v0_15b64 = load i32, i32* %r4.global-to-local, align 4
  %v1_15b64 = sub i32 0, %v0_15b64
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15b6c = inttoptr i32 %v0_15b60 to i32*
  store i32 %v1_15b64, i32* %v2_15b6c, align 4
  %v0_15b7c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15b7c

dec_label_pc_15b74:                               ; preds = %dec_label_pc_15b1c
  br i1 false, label %dec_label_pc_15b7c, label %dec_label_pc_15b84

dec_label_pc_15b7c:                               ; preds = %dec_label_pc_15b74, %dec_label_pc_15b60
  %v0_15b7c = phi i32 [ -1, %dec_label_pc_15b74 ], [ %v0_15b7c.pre, %dec_label_pc_15b60 ]
  store i32 %v0_15b7c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c50

dec_label_pc_15b84:                               ; preds = %dec_label_pc_15b74
  %v2_15b84 = add i32 %v1_15b38, %arg1
  %v2_15b88 = add i32 %tmp, %arg3
  store i32 %v2_15b88, i32* @ip, align 4
  store i32 %v1_15b38, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_15c38

dec_label_pc_15ba4:                               ; preds = %dec_label_pc_15c38
  %v1_15ba4 = add i32 %v0_15bf8, 16
  %v2_15ba4 = inttoptr i32 %v1_15ba4 to i16*
  %v3_15ba4 = load i16, i16* %v2_15ba4, align 2
  %v4_15ba4 = zext i16 %v3_15ba4 to i32
  %v1_15ba8 = add nuw nsw i32 %v4_15ba4, 7
  %v1_15bac = and i32 %v1_15ba8, 131064
  store i32 %v1_15bac, i32* %r2.global-to-local, align 4
  %v2_15bb4 = add i32 %v1_15bac, %v0_15c00
  store i32 %v2_15bb4, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_15bb4, %v2_15b88
  br i1 %tmp26, label %dec_label_pc_15bc0, label %dec_label_pc_15bf4

dec_label_pc_15bc0:                               ; preds = %dec_label_pc_15ba4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_15bc8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15bc8, i32* %r2.global-to-local, align 4
  %v0_15bcc = load i32, i32* %sl.global-to-local, align 4
  %v1_15bd0 = load i32, i32* @sp, align 4
  %v2_15bd0 = inttoptr i32 %v1_15bd0 to i32*
  store i32 0, i32* %v2_15bd0, align 4
  %v4_15bd4 = call i32 @function_15e58(i32 %arg1, i32 0, i32 %v0_15bc8, i32 %v0_15bcc)
  %v0_15bd8 = load i32, i32* @r5, align 4
  %v1_15bd8 = load i32, i32* %r6.global-to-local, align 4
  %v9_15bd8 = icmp eq i32 %v0_15bd8, %v1_15bd8
  br i1 %v9_15bd8, label %dec_label_pc_15be0, label %dec_label_pc_15c4c

dec_label_pc_15be0:                               ; preds = %dec_label_pc_15bc0
  %v0_15be0 = call i32 @function_10f8c()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15bec = inttoptr i32 %v0_15be0 to i32*
  store i32 22, i32* %v2_15bec, align 4
  %v0_15c50.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c50

dec_label_pc_15bf4:                               ; preds = %dec_label_pc_15ba4
  %v1_15bf4 = inttoptr i32 %v0_15bf8 to i32*
  %v2_15bf4 = load i32, i32* %v1_15bf4, align 4
  %v3_15bf4 = add i32 %v0_15bf8, 4
  %v4_15bf4 = inttoptr i32 %v3_15bf4 to i32*
  %v5_15bf4 = load i32, i32* %v4_15bf4, align 4
  store i32 %v5_15bf4, i32* %r4.global-to-local, align 4
  %v1_15bf8 = add i32 %v0_15bf8, 8
  store i32 %v1_15bf8, i32* %sb.global-to-local, align 4
  %v1_15bfc = inttoptr i32 %v1_15bf8 to i32*
  %v2_15bfc = load i32, i32* %v1_15bfc, align 4
  store i32 %v2_15bfc, i32* %sb.global-to-local, align 4
  %v3_15bfc = add i32 %v0_15bf8, 12
  %v4_15bfc = inttoptr i32 %v3_15bfc to i32*
  %v5_15bfc = load i32, i32* %v4_15bfc, align 4
  store i32 %v5_15bfc, i32* %sl.global-to-local, align 4
  %v1_15c00 = inttoptr i32 %v0_15c00 to i32*
  store i32 %v2_15bf4, i32* %v1_15c00, align 4
  %v3_15c00 = add i32 %v0_15c00, 4
  %v4_15c00 = inttoptr i32 %v3_15c00 to i32*
  %v5_15c00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15c00, i32* %v4_15c00, align 4
  %v0_15c04 = load i32, i32* @r7, align 4
  %v1_15c04 = add i32 %v0_15c04, 8
  %v1_15c08 = inttoptr i32 %v1_15c04 to i32*
  %v2_15c08 = load i32, i32* %v1_15c08, align 4
  %v3_15c08 = add i32 %v0_15c04, 12
  %v4_15c08 = inttoptr i32 %v3_15c08 to i32*
  %v5_15c08 = load i32, i32* %v4_15c08, align 4
  store i32 %v5_15c08, i32* @r4, align 4
  %v1_15c0c = load i32, i32* @r5, align 4
  %v2_15c0c = add i32 %v1_15c0c, 8
  %v3_15c0c = inttoptr i32 %v2_15c0c to i32*
  store i32 %v2_15c08, i32* %v3_15c0c, align 4
  %v0_15c10 = load i32, i32* @r4, align 4
  %v1_15c10 = load i32, i32* @r5, align 4
  %v2_15c10 = add i32 %v1_15c10, 12
  %v3_15c10 = inttoptr i32 %v2_15c10 to i32*
  store i32 %v0_15c10, i32* %v3_15c10, align 4
  %v0_15c14 = load i32, i32* %r2.global-to-local, align 4
  %v1_15c14 = trunc i32 %v0_15c14 to i16
  %v2_15c14 = load i32, i32* @r5, align 4
  %v3_15c14 = add i32 %v2_15c14, 16
  %v4_15c14 = inttoptr i32 %v3_15c14 to i16*
  store i16 %v1_15c14, i16* %v4_15c14, align 2
  %v0_15c18 = load i32, i32* @r7, align 4
  %v1_15c18 = add i32 %v0_15c18, 18
  %v2_15c18 = inttoptr i32 %v1_15c18 to i8*
  %v3_15c18 = load i8, i8* %v2_15c18, align 1
  %v4_15c18 = zext i8 %v3_15c18 to i32
  store i32 %v4_15c18, i32* @r3, align 4
  %v2_15c1c = load i32, i32* @r5, align 4
  %v3_15c1c = add i32 %v2_15c1c, 18
  %v4_15c1c = inttoptr i32 %v3_15c1c to i8*
  store i8 %v3_15c18, i8* %v4_15c1c, align 1
  %v0_15c20 = load i32, i32* @r7, align 4
  %v1_15c20 = add i32 %v0_15c20, 16
  %v2_15c20 = inttoptr i32 %v1_15c20 to i16*
  %v3_15c20 = load i16, i16* %v2_15c20, align 2
  %v4_15c20 = zext i16 %v3_15c20 to i32
  %v1_15c24 = add nsw i32 %v4_15c20, -19
  store i32 %v1_15c24, i32* @r2, align 4
  %v0_15c28 = call i32 @function_11090()
  %v0_15c2c = load i32, i32* @r7, align 4
  %v1_15c2c = add i32 %v0_15c2c, 16
  %v2_15c2c = inttoptr i32 %v1_15c2c to i16*
  %v3_15c2c = load i16, i16* %v2_15c2c, align 2
  %v4_15c2c = zext i16 %v3_15c2c to i32
  %v0_15c30 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15c30, i32* @r5, align 4
  %v2_15c34 = add i32 %v4_15c2c, %v0_15c2c
  store i32 %v2_15c34, i32* @r7, align 4
  br label %dec_label_pc_15c38

dec_label_pc_15c38:                               ; preds = %dec_label_pc_15b84, %dec_label_pc_15bf4
  %v0_15c00 = phi i32 [ %tmp, %dec_label_pc_15b84 ], [ %v0_15c30, %dec_label_pc_15bf4 ]
  %v0_15bf8 = phi i32 [ %v1_15b38, %dec_label_pc_15b84 ], [ %v2_15c34, %dec_label_pc_15bf4 ]
  %v3_15c3c = icmp ult i32 %v0_15bf8, %v2_15b84
  %v1_15c40 = add i32 %v0_15c00, 19
  store i32 %v1_15c40, i32* @r0, align 4
  %v1_15c44 = add i32 %v0_15bf8, 19
  store i32 %v1_15c44, i32* @r1, align 4
  br i1 %v3_15c3c, label %dec_label_pc_15ba4, label %dec_label_pc_15c4c.loopexit

dec_label_pc_15c4c.loopexit:                      ; preds = %dec_label_pc_15c38
  %v0_15c4c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15c4c

dec_label_pc_15c4c:                               ; preds = %dec_label_pc_15c4c.loopexit, %dec_label_pc_15bc0
  %v1_15c4c = phi i32 [ %v0_15c00, %dec_label_pc_15c4c.loopexit ], [ %v0_15bd8, %dec_label_pc_15bc0 ]
  %v0_15c4c = phi i32 [ %v0_15c4c.pre, %dec_label_pc_15c4c.loopexit ], [ %v1_15bd8, %dec_label_pc_15bc0 ]
  %v2_15c4c = sub i32 %v1_15c4c, %v0_15c4c
  store i32 %v2_15c4c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c50

dec_label_pc_15c50:                               ; preds = %dec_label_pc_15be0, %dec_label_pc_15b7c, %dec_label_pc_15c4c
  %v0_15c50 = phi i32 [ %v0_15c50.pre, %dec_label_pc_15be0 ], [ %v0_15b7c, %dec_label_pc_15b7c ], [ %v2_15c4c, %dec_label_pc_15c4c ]
  store i32 %v3_15b20, i32* %r4.global-to-local, align 4
  store i32 %v6_15b20, i32* @r5, align 4
  store i32 %v12_15b20, i32* @r7, align 4
  ret i32 %v0_15c50

; uselistorder directives
  uselistorder i32 %v0_15bf8, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_15c00, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_15b38, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 9, 10, 0, 3, 11, 4, 12, 13, 5, 6, 7, 8, 1, 14, 2, 15 }
  uselistorder i32* @r3, { 7, 8, 52, 53, 85, 86, 2, 87, 88, 89, 3, 90, 91, 92, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 9, 6, 10, 11, 12, 13, 14, 54, 55, 115, 124, 125, 126, 119, 47, 48, 78, 79, 80, 81, 76, 82, 83, 15, 16, 17, 130, 127, 128, 129, 1, 131, 132, 133, 120, 18, 77, 38, 39, 40, 121, 122, 123, 66, 56, 116, 117, 118, 49, 50, 51, 57, 58, 5, 72, 73, 74, 75, 32, 33, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 41, 42, 44, 43, 84, 45, 46, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 7, 12, 13, 8, 14, 9, 15, 10, 16 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 24, 22, 23, 14, 0, 1, 41, 15, 29, 16, 25, 17, 26, 18, 27, 19, 28, 2, 20, 30, 4, 31, 5, 32, 6, 33, 7, 34, 21, 35, 8, 36, 9, 37, 10, 38, 11, 39, 12, 13, 3, 40 }
  uselistorder i32* @ip, { 7, 8, 9, 66, 10, 11, 6, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 2, 100, 101, 102, 103, 104, 105, 106, 107, 108, 12, 0, 13, 14, 15, 16, 17, 109, 110, 31, 56, 57, 58, 59, 3, 60, 61, 62, 50, 51, 52, 53, 54, 55, 63, 64, 65, 114, 111, 112, 113, 1, 115, 24, 18, 19, 47, 48, 49, 41, 42, 43, 44, 45, 46, 35, 36, 37, 38, 39, 40, 4, 21, 20, 22, 23, 25, 26, 27, 28, 29, 30, 32, 5, 33, 34 }
  uselistorder i1 false, { 0, 25, 26, 27, 38, 21, 24, 39, 40, 41, 42, 43, 2, 1, 28, 31, 30, 29, 32, 4, 6, 5, 18, 37, 22, 23, 10, 35, 17, 19, 20, 9, 8, 7, 11, 12, 13, 33, 3, 14, 15, 16, 36, 34, 44 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 14, { 20, 24, 36, 16, 17, 18, 0, 21, 22, 19, 3, 23, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26, 15, 27, 28, 29, 30, 1, 31, 32, 33, 34, 2, 35 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15c50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15c38, { 1, 0 }
}

define i32 @function_15c60(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15c60:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15c60 = load i32, i32* @r4, align 4
  store i32 %v3_15c60, i32* %stack_var_-12, align 4
  %v0_15c64 = load i32, i32* %r0.global-to-local, align 4
  %v1_15c64 = inttoptr i32 %v0_15c64 to i16*
  %v2_15c64 = load i16, i16* %v1_15c64, align 2
  %v3_15c64 = zext i16 %v2_15c64 to i32
  %v1_15c68 = and i32 %v3_15c64, 4
  store i32 %v1_15c68, i32* %r5.global-to-local, align 4
  %v2_15c68 = icmp eq i32 %v1_15c68, 0
  store i32 %v0_15c64, i32* %r4.global-to-local, align 4
  br i1 %v2_15c68, label %dec_label_pc_15c7c, label %bb

bb:                                               ; preds = %dec_label_pc_15c60
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_15c7c:                               ; preds = %dec_label_pc_15c60
  %v1_15c7c = icmp slt i32 %arg2, 0
  br i1 %v1_15c7c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_15c7c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_15c7c, %bb18
  %v1_15c84 = add i32 %v0_15c64, 4
  %v2_15c84 = inttoptr i32 %v1_15c84 to i32*
  %v3_15c84 = load i32, i32* %v2_15c84, align 4
  store i32 %v3_15c84, i32* %r0.global-to-local, align 4
  %v1_15c88 = call i32 @function_108fc(i32 %v3_15c84)
  store i32 %v1_15c88, i32* %r0.global-to-local, align 4
  %v5_15c90 = icmp sgt i32 %v1_15c88, 0
  br i1 %v5_15c90, label %.thread7, label %dec_label_pc_15c94

dec_label_pc_15c94:                               ; preds = %bb19
  %v2_15c8c = icmp eq i32 %v1_15c88, 0
  %v0_15c94 = load i32, i32* %r4.global-to-local, align 4
  %v1_15c94 = inttoptr i32 %v0_15c94 to i16*
  %v2_15c94 = load i16, i16* %v1_15c94, align 2
  br i1 %v2_15c8c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15c94
  %v2_15c98 = or i16 %v2_15c94, 4
  store i16 %v2_15c98, i16* %v1_15c94, align 2
  %v1_15cb4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15c94
  %v2_15c9c = or i16 %v2_15c94, 8
  store i16 %v2_15c9c, i16* %v1_15c94, align 2
  %v1_15ca8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15ca8, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_15cb4 = phi i32 [ %v1_15cb4.pre, %bb20 ], [ 0, %bb ], [ %v1_15c88, %bb19 ], [ %v1_15ca8, %bb21 ]
  %v2_15cb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15cb0, i32* @r4, align 4
  ret i32 %v1_15cb4

; uselistorder directives
  uselistorder i16 %v2_15c94, { 1, 0 }
  uselistorder i32 %v1_15c88, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_108fc, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_15cb8(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15cb8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15cb8 = load i32, i32* @r4, align 4
  store i32 %v3_15cb8, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_15cd02 = icmp eq i32 %arg3, 0
  store i1 %v2_15cd02, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15cd02, label %dec_label_pc_15d60, label %dec_label_pc_15cd8

dec_label_pc_15cd0thread-pre-split:               ; preds = %dec_label_pc_15cd8
  %v3_15cf0 = load i32, i32* %r6.global-to-local, align 4
  %v5_15cf0 = add i32 %v3_15cf0, %v3_15ce8
  store i32 %v5_15cf0, i32* %r6.global-to-local, align 4
  %v4_15cf4 = load i32, i32* %r5.global-to-local, align 4
  %v5_15cf4 = sub i32 %v4_15cf4, %v3_15ce8
  store i32 %v5_15cf4, i32* %r5.global-to-local, align 4
  %v2_15cd0 = icmp eq i32 %v5_15cf4, 0
  store i1 %v2_15cd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15cd0, label %dec_label_pc_15cd0.dec_label_pc_15d60.loopexit_crit_edge, label %dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge

dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge: ; preds = %dec_label_pc_15cd0thread-pre-split
  %v3_15cd8.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_15ce4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15cd8

dec_label_pc_15cd8:                               ; preds = %dec_label_pc_15cb8, %dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge
  %v0_15ce4 = phi i32 [ %v0_15ce4.pre, %dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge ], [ %tmp, %dec_label_pc_15cb8 ]
  %v0_15ce0 = phi i32 [ %v5_15cf0, %dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge ], [ %arg2, %dec_label_pc_15cb8 ]
  %v3_15cd8 = phi i32 [ %v3_15cd8.pre, %dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge ], [ 2147483647, %dec_label_pc_15cb8 ]
  %v0_15cdc.in = phi i32 [ %v5_15cf4, %dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge ], [ %arg3, %dec_label_pc_15cb8 ]
  %v3_15cdc = phi i32 [ %v5_15cf4, %dec_label_pc_15cd0thread-pre-split.dec_label_pc_15cd8_crit_edge ], [ %arg3, %dec_label_pc_15cb8 ]
  %v0_15cdc = icmp slt i32 %v0_15cdc.in, 0
  %storemerge = select i1 %v0_15cdc, i32 %v3_15cd8, i32 %v3_15cdc
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_15ce0, i32* %r1.global-to-local, align 4
  %v1_15ce4 = add i32 %v0_15ce4, 4
  %v2_15ce4 = inttoptr i32 %v1_15ce4 to i32*
  %v3_15ce4 = load i32, i32* %v2_15ce4, align 4
  %v3_15ce8 = call i32 @function_10a70(i32 %v3_15ce4, i32 %v0_15ce0)
  %v1_15cec = icmp slt i32 %v3_15ce8, 0
  %v2_15cec = icmp eq i32 %v3_15ce8, 0
  store i1 %v2_15cec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_15cec, label %dec_label_pc_15cfc, label %dec_label_pc_15cd0thread-pre-split

dec_label_pc_15cfc:                               ; preds = %dec_label_pc_15cd8
  %v0_15cfc = load i32, i32* %r4.global-to-local, align 4
  %v1_15cfc = inttoptr i32 %v0_15cfc to i16*
  %v2_15cfc = load i16, i16* %v1_15cfc, align 2
  %v3_15cfc = zext i16 %v2_15cfc to i32
  store i32 %v3_15cfc, i32* %r3.global-to-local, align 4
  %v1_15d00 = add i32 %v0_15cfc, 8
  store i32 %v1_15d00, i32* %r1.global-to-local, align 4
  %v1_15d04 = inttoptr i32 %v1_15d00 to i32*
  %v2_15d04 = load i32, i32* %v1_15d04, align 4
  store i32 %v2_15d04, i32* %r1.global-to-local, align 4
  %v3_15d04 = add i32 %v0_15cfc, 12
  %v4_15d04 = inttoptr i32 %v3_15d04 to i32*
  %v5_15d04 = load i32, i32* %v4_15d04, align 4
  %v1_15d08 = or i32 %v3_15cfc, 8
  store i32 %v1_15d08, i32* %r3.global-to-local, align 4
  %v2_15d0c = sub i32 %v5_15d04, %v2_15d04
  store i32 %v2_15d0c, i32* %r2.global-to-local, align 4
  %v9_15d0c = icmp eq i32 %v5_15d04, %v2_15d04
  store i1 %v9_15d0c, i1* %cpsr_z.global-to-local, align 1
  %v1_15d10 = trunc i32 %v1_15d08 to i16
  store i16 %v1_15d10, i16* %v1_15cfc, align 2
  br i1 %v9_15d0c, label %dec_label_pc_15cfc.dec_label_pc_15d5c_crit_edge, label %dec_label_pc_15d18

dec_label_pc_15cfc.dec_label_pc_15d5c_crit_edge:  ; preds = %dec_label_pc_15cfc
  %v0_15d5c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15d5c

dec_label_pc_15d18:                               ; preds = %dec_label_pc_15cfc
  %v0_15d18 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d18 = load i32, i32* %r5.global-to-local, align 4
  %v3_15d18 = icmp ult i32 %v0_15d18, %v1_15d18
  %v9_15d18 = icmp eq i32 %v0_15d18, %v1_15d18
  store i1 %v9_15d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15d18, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_15d18
  store i32 %v1_15d18, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_15d18, %bb23
  %v2_15d2c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_15d40
  %v2_15d2c = phi i32 [ %v2_15d2c.pre, %.preheader ], [ %v1_15d44, %dec_label_pc_15d40 ]
  %v0_15d20 = load i32, i32* %r6.global-to-local, align 4
  %v1_15d20 = inttoptr i32 %v0_15d20 to i8*
  %v2_15d20 = load i8, i8* %v1_15d20, align 1
  %v3_15d20 = zext i8 %v2_15d20 to i32
  store i32 %v3_15d20, i32* %r3.global-to-local, align 4
  %v7_15d24 = icmp eq i8 %v2_15d20, 10
  store i1 %v7_15d24, i1* %cpsr_z.global-to-local, align 1
  %v1_15d28 = add i32 %v0_15d20, 1
  store i32 %v1_15d28, i32* %r6.global-to-local, align 4
  %v3_15d2c = inttoptr i32 %v2_15d2c to i8*
  store i8 %v2_15d20, i8* %v3_15d2c, align 1
  %v0_15d30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15d30, label %dec_label_pc_15d34, label %dec_label_pc_15d40

dec_label_pc_15d34:                               ; preds = %bb24
  %v0_15d34 = load i32, i32* %r4.global-to-local, align 4
  %v1_15d34 = inttoptr i32 %v0_15d34 to i16*
  %v2_15d34 = load i16, i16* %v1_15d34, align 2
  %v3_15d34 = zext i16 %v2_15d34 to i32
  store i32 %v3_15d34, i32* %r3.global-to-local, align 4
  %v1_15d38 = and i32 %v3_15d34, 256
  %v2_15d38 = icmp eq i32 %v1_15d38, 0
  store i1 %v2_15d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15d38, label %dec_label_pc_15d40, label %dec_label_pc_15d34.dec_label_pc_15d4c_crit_edge

dec_label_pc_15d34.dec_label_pc_15d4c_crit_edge:  ; preds = %dec_label_pc_15d34
  %v0_15d50.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15d4c

dec_label_pc_15d40:                               ; preds = %dec_label_pc_15d34, %bb24
  %v0_15d40 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d40 = add i32 %v0_15d40, -1
  store i32 %v1_15d40, i32* %r2.global-to-local, align 4
  %v7_15d40 = icmp eq i32 %v0_15d40, 1
  store i1 %v7_15d40, i1* %cpsr_z.global-to-local, align 1
  %v0_15d44 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d44 = add i32 %v0_15d44, 1
  store i32 %v1_15d44, i32* %r1.global-to-local, align 4
  br i1 %v7_15d40, label %dec_label_pc_15d40.dec_label_pc_15d4c_crit_edge, label %bb24

dec_label_pc_15d40.dec_label_pc_15d4c_crit_edge:  ; preds = %dec_label_pc_15d40
  %v0_15d4c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15d4c

dec_label_pc_15d4c:                               ; preds = %dec_label_pc_15d34.dec_label_pc_15d4c_crit_edge, %dec_label_pc_15d40.dec_label_pc_15d4c_crit_edge
  %v0_15d50 = phi i32 [ %v1_15d44, %dec_label_pc_15d40.dec_label_pc_15d4c_crit_edge ], [ %v0_15d50.pre, %dec_label_pc_15d34.dec_label_pc_15d4c_crit_edge ]
  %v0_15d4c = phi i32 [ %v0_15d4c.pre, %dec_label_pc_15d40.dec_label_pc_15d4c_crit_edge ], [ %v0_15d34, %dec_label_pc_15d34.dec_label_pc_15d4c_crit_edge ]
  %v1_15d4c = add i32 %v0_15d4c, 8
  %v2_15d4c = inttoptr i32 %v1_15d4c to i32*
  %v3_15d4c = load i32, i32* %v2_15d4c, align 4
  store i32 %v3_15d4c, i32* %r3.global-to-local, align 4
  %v2_15d50 = add i32 %v0_15d4c, 16
  %v3_15d50 = inttoptr i32 %v2_15d50 to i32*
  store i32 %v0_15d50, i32* %v3_15d50, align 4
  %v0_15d54 = load i32, i32* %r3.global-to-local, align 4
  %v1_15d54 = load i32, i32* %r1.global-to-local, align 4
  %v2_15d54 = sub i32 %v1_15d54, %v0_15d54
  store i32 %v2_15d54, i32* %r3.global-to-local, align 4
  %v1_15d58 = load i32, i32* %r5.global-to-local, align 4
  %v2_15d58 = sub i32 %v1_15d58, %v2_15d54
  store i32 %v2_15d58, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15d5c

dec_label_pc_15d5c:                               ; preds = %dec_label_pc_15cfc.dec_label_pc_15d5c_crit_edge, %dec_label_pc_15d4c
  %v0_15d5c = phi i32 [ %v0_15d5c.pre, %dec_label_pc_15cfc.dec_label_pc_15d5c_crit_edge ], [ %v2_15d58, %dec_label_pc_15d4c ]
  %v1_15d5c = load i32, i32* @r7, align 4
  %v2_15d5c = sub i32 %v1_15d5c, %v0_15d5c
  br label %dec_label_pc_15d60

dec_label_pc_15cd0.dec_label_pc_15d60.loopexit_crit_edge: ; preds = %dec_label_pc_15cd0thread-pre-split
  %v0_15d60.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15d60

dec_label_pc_15d60:                               ; preds = %dec_label_pc_15cb8, %dec_label_pc_15cd0.dec_label_pc_15d60.loopexit_crit_edge, %dec_label_pc_15d5c
  %v0_15d60 = phi i32 [ %v2_15d5c, %dec_label_pc_15d5c ], [ %v0_15d60.pre.pre, %dec_label_pc_15cd0.dec_label_pc_15d60.loopexit_crit_edge ], [ 0, %dec_label_pc_15cb8 ]
  %v2_15d64 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15d64, i32* %r4.global-to-local, align 4
  ret i32 %v0_15d60

; uselistorder directives
  uselistorder i32 %v0_15d4c, { 1, 0 }
  uselistorder i32 %v1_15d44, { 0, 2, 1 }
  uselistorder i32 %v0_15d40, { 1, 0 }
  uselistorder i32 %v1_15d18, { 0, 2, 1 }
  uselistorder i32 %v0_15d18, { 1, 0 }
  uselistorder i32 %v5_15d04, { 1, 0 }
  uselistorder i32 %v2_15d04, { 1, 0, 2 }
  uselistorder i32 %v3_15ce8, { 2, 3, 0, 1 }
  uselistorder i32 %v0_15ce0, { 1, 0 }
  uselistorder i32 %v5_15cf4, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 5, 4, 6, 7, 8, 0 }
  uselistorder i32 256, { 281, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 273, 282, 279, 280, 283, 36, 38, 37, 39, 272, 40, 41, 42, 0, 278, 1, 43, 44, 45, 46, 48, 49, 50, 47, 52, 53, 54, 51, 55, 276, 56, 284, 285, 57, 58, 59, 287, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 70, 69, 72, 277, 288, 286, 73, 74, 75, 76, 78, 77, 79, 80, 81, 83, 82, 84, 85, 2, 94, 90, 95, 91, 86, 87, 88, 96, 92, 97, 93, 89, 98, 99, 100, 101, 102, 112, 113, 107, 114, 108, 103, 104, 109, 115, 110, 116, 111, 105, 106, 117, 118, 119, 120, 125, 123, 121, 126, 124, 122, 127, 128, 130, 132, 133, 131, 129, 134, 274, 289, 135, 137, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 150, 148, 153, 151, 149, 154, 155, 157, 159, 160, 158, 156, 161, 275, 290, 162, 164, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 291, 175, 292, 184, 179, 185, 180, 181, 176, 177, 186, 182, 178, 183, 187, 188, 189, 190, 191, 192, 193, 200, 197, 201, 198, 202, 199, 194, 195, 196, 203, 204, 205, 206, 211, 218, 212, 219, 213, 207, 208, 220, 214, 209, 215, 221, 216, 210, 217, 222, 223, 224, 225, 226, 227, 232, 239, 233, 240, 234, 228, 229, 241, 235, 230, 236, 242, 237, 231, 238, 243, 244, 245, 246, 247, 248, 258, 254, 249, 259, 255, 260, 256, 250, 251, 252, 261, 257, 253, 262, 263, 264, 265, 266, 267, 3, 268, 269, 4, 270, 271 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10a70, { 2, 1, 0 }
  uselistorder i32 4, { 201, 202, 203, 195, 196, 329, 204, 453, 5, 6, 205, 7, 8, 67, 0, 9, 75, 70, 71, 10, 454, 72, 455, 58, 11, 12, 73, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 13, 473, 474, 475, 476, 477, 478, 57, 479, 480, 481, 482, 483, 484, 14, 15, 74, 485, 206, 92, 207, 16, 208, 93, 209, 210, 211, 212, 128, 213, 214, 215, 216, 217, 218, 17, 197, 198, 199, 200, 277, 278, 190, 191, 192, 193, 194, 486, 129, 94, 487, 18, 488, 130, 131, 59, 405, 406, 407, 408, 409, 410, 132, 133, 19, 411, 412, 413, 414, 415, 416, 417, 418, 134, 403, 404, 379, 380, 381, 382, 383, 384, 385, 386, 387, 20, 388, 389, 390, 419, 21, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 135, 136, 137, 434, 435, 438, 441, 436, 437, 95, 138, 439, 50, 440, 442, 443, 444, 446, 139, 23, 22, 445, 140, 141, 142, 245, 143, 51, 24, 25, 279, 280, 281, 282, 283, 26, 284, 447, 448, 189, 27, 28, 96, 246, 60, 247, 103, 248, 249, 250, 29, 251, 76, 97, 98, 234, 235, 241, 242, 99, 219, 220, 221, 222, 223, 224, 100, 225, 226, 227, 101, 228, 102, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 243, 244, 53, 52, 252, 68, 253, 30, 254, 31, 55, 54, 256, 32, 255, 257, 258, 263, 104, 265, 105, 266, 106, 267, 268, 264, 259, 107, 260, 261, 262, 449, 269, 66, 65, 64, 270, 108, 33, 34, 35, 36, 37, 271, 62, 61, 272, 63, 109, 273, 274, 275, 110, 276, 285, 286, 144, 287, 288, 289, 145, 146, 1, 111, 290, 77, 291, 292, 293, 147, 294, 295, 148, 149, 2, 112, 296, 78, 297, 79, 298, 299, 300, 301, 150, 302, 303, 151, 152, 304, 305, 113, 306, 3, 307, 80, 308, 114, 309, 310, 311, 312, 153, 313, 314, 154, 155, 315, 316, 115, 317, 4, 318, 81, 319, 116, 320, 38, 330, 331, 332, 156, 333, 334, 335, 336, 157, 158, 117, 337, 118, 339, 82, 340, 341, 342, 159, 343, 344, 160, 161, 345, 83, 346, 84, 347, 348, 349, 350, 162, 351, 352, 163, 164, 120, 353, 119, 354, 85, 355, 86, 356, 357, 358, 359, 360, 361, 122, 362, 123, 363, 165, 364, 56, 365, 166, 167, 124, 366, 121, 367, 87, 368, 88, 369, 370, 371, 168, 372, 373, 169, 170, 374, 125, 375, 89, 376, 171, 172, 173, 377, 378, 126, 90, 174, 175, 176, 450, 451, 127, 91, 177, 39, 391, 178, 40, 392, 179, 41, 393, 180, 42, 394, 181, 43, 395, 182, 69, 44, 396, 397, 183, 45, 398, 184, 46, 399, 185, 47, 400, 186, 48, 401, 187, 49, 402, 452, 321, 322, 323, 324, 325, 326, 327, 188, 328, 338 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 3, 36, 37, 25, 26, 27, 28, 29, 30, 31, 32, 35, 4, 38, 39, 40, 5, 41, 42, 43, 19, 44, 45, 6, 46, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 57, 33, 34, 316, 317, 205, 206, 279, 280, 24, 318, 319, 320, 325, 326, 8, 58, 59, 117, 9, 118, 119, 120, 0, 121, 122, 281, 282, 283, 284, 285, 286, 287, 288, 289, 262, 263, 264, 265, 266, 267, 290, 291, 292, 293, 294, 295, 296, 297, 10, 298, 299, 300, 301, 302, 303, 304, 80, 81, 112, 82, 83, 305, 306, 307, 308, 130, 131, 132, 133, 134, 139, 140, 141, 142, 143, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 252, 253, 323, 324, 84, 85, 86, 87, 185, 186, 321, 322, 213, 214, 150, 151, 207, 208, 123, 124, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 309, 310, 21, 311, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 76, 77, 63, 60, 11, 61, 1, 62, 75, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 101, 102, 103, 104, 105, 106, 107, 215, 216, 217, 218, 108, 109, 110, 111, 113, 114, 115, 116, 12, 125, 126, 127, 128, 129, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 22, 180, 181, 182, 183, 184, 187, 23, 188, 189, 190, 191, 192, 219, 220, 221, 222, 223, 224, 225, 226, 13, 227, 228, 229, 230, 231, 232, 233, 234, 235, 2, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 14, 255, 256, 257, 16, 15, 258, 259, 260, 261, 18, 17, 312, 313, 314, 315, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 195, 193, 194, 20, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_15d60, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15d5c, { 1, 0 }
  uselistorder label %dec_label_pc_15d4c, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_15cd8, { 1, 0 }
}

define i32 @function_15d6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d6c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15d6c = load i32, i32* @r4, align 4
  store i32 %v3_15d6c, i32* %stack_var_-8, align 4
  %v1_15d70 = add i32 %arg1, 8
  %v1_15d74 = inttoptr i32 %v1_15d70 to i32*
  %v2_15d74 = load i32, i32* %v1_15d74, align 4
  %v3_15d74 = add i32 %arg1, 12
  %v4_15d74 = inttoptr i32 %v3_15d74 to i32*
  %v5_15d74 = load i32, i32* %v4_15d74, align 4
  %v2_15d78 = sub i32 %v5_15d74, %v2_15d74
  store i32 %v2_15d78, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_15d80 = inttoptr i32 %arg1 to i16*
  %v4_15d80 = call i32 @function_15c60(i16* %v3_15d80, i32 %v2_15d74, i32 %v2_15d78)
  %v0_15d84 = load i32, i32* @r4, align 4
  %v1_15d84 = add i32 %v0_15d84, 8
  %v2_15d84 = inttoptr i32 %v1_15d84 to i32*
  %v3_15d84 = load i32, i32* %v2_15d84, align 4
  store i32 %v3_15d84, i32* %r2.global-to-local, align 4
  %v2_15d88 = add i32 %v3_15d84, %v4_15d80
  %v2_15d8c = add i32 %v0_15d84, 20
  %v3_15d8c = inttoptr i32 %v2_15d8c to i32*
  store i32 %v2_15d88, i32* %v3_15d8c, align 4
  %v0_15d90 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d90 = load i32, i32* @r4, align 4
  %v2_15d90 = add i32 %v1_15d90, 16
  %v3_15d90 = inttoptr i32 %v2_15d90 to i32*
  store i32 %v0_15d90, i32* %v3_15d90, align 4
  %v2_15d94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15d94, i32* @r4, align 4
  ret i32 %v4_15d80

; uselistorder directives
  uselistorder i32 %v4_15d80, { 1, 0 }
  uselistorder i32 20, { 30, 113, 3, 114, 115, 1, 116, 31, 7, 32, 33, 34, 35, 29, 44, 45, 25, 26, 27, 28, 117, 8, 118, 108, 109, 110, 2, 46, 9, 47, 48, 0, 36, 38, 4, 40, 10, 41, 24, 39, 37, 42, 43, 49, 50, 11, 51, 52, 53, 54, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 13, 65, 66, 14, 67, 68, 69, 70, 15, 71, 72, 16, 73, 74, 75, 76, 78, 17, 79, 80, 81, 82, 83, 84, 18, 85, 86, 87, 88, 19, 20, 89, 5, 90, 21, 91, 92, 93, 94, 6, 95, 22, 96, 97, 98, 99, 100, 23, 101, 102, 103, 104, 105, 106, 107, 111, 112, 77 }
  uselistorder i32 12, { 9, 10, 37, 11, 12, 40, 6, 166, 167, 168, 169, 170, 172, 173, 171, 174, 175, 176, 177, 178, 179, 180, 13, 14, 15, 16, 18, 17, 19, 41, 42, 20, 43, 44, 45, 46, 47, 38, 39, 82, 83, 34, 35, 36, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 3, 120, 121, 122, 123, 124, 21, 125, 143, 22, 23, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 155, 156, 157, 158, 159, 160, 161, 163, 164, 24, 165, 4, 84, 85, 25, 86, 87, 26, 61, 62, 63, 51, 64, 48, 65, 59, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 66, 67, 68, 5, 69, 70, 71, 72, 74, 75, 33, 76, 27, 77, 28, 78, 29, 79, 81, 80, 73, 117, 88, 89, 30, 90, 91, 92, 31, 93, 94, 95, 96, 97, 98, 7, 99, 100, 101, 102, 103, 104, 8, 105, 106, 32, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_15d9c() local_unnamed_addr {
dec_label_pc_15d9c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15d9c = load i32, i32* @r4, align 4
  store i32 %v3_15d9c, i32* %stack_var_-12, align 4
  %v0_15da0 = load i32, i32* @r0, align 4
  %v1_15da0 = inttoptr i32 %v0_15da0 to i16*
  %v2_15da0 = load i16, i16* %v1_15da0, align 2
  %v3_15da0 = zext i16 %v2_15da0 to i32
  store i32 %v3_15da0, i32* %r3.global-to-local, align 4
  %v0_15da4 = load i32, i32* @r1, align 4
  %v2_15da4 = and i32 %v0_15da4, %v3_15da0
  %v4_15da4 = icmp eq i32 %v2_15da4, 0
  store i32 %v0_15da0, i32* @r4, align 4
  br i1 %v4_15da4, label %dec_label_pc_15db4, label %dec_label_pc_15dc4

dec_label_pc_15db4:                               ; preds = %dec_label_pc_15d9c
  %v1_15db4 = and i32 %v3_15da0, 2176
  %v2_15db4 = icmp eq i32 %v1_15db4, 0
  br i1 %v2_15db4, label %dec_label_pc_15dbc, label %dec_label_pc_15dd0

dec_label_pc_15dbc:                               ; preds = %dec_label_pc_15db4
  %v2_15dbc = or i32 %v0_15da4, %v3_15da0
  store i32 %v2_15dbc, i32* %r3.global-to-local, align 4
  %v1_15dc0 = trunc i32 %v2_15dbc to i16
  store i16 %v1_15dc0, i16* %v1_15da0, align 2
  %v0_15dc4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15dc4

dec_label_pc_15dc4:                               ; preds = %dec_label_pc_15d9c, %dec_label_pc_15dbc
  %v0_15dc4 = phi i32 [ %v0_15da0, %dec_label_pc_15d9c ], [ %v0_15dc4.pre, %dec_label_pc_15dbc ]
  %v1_15dc4 = inttoptr i32 %v0_15dc4 to i16*
  %v2_15dc4 = load i16, i16* %v1_15dc4, align 2
  %v3_15dc4 = zext i16 %v2_15dc4 to i32
  store i32 %v3_15dc4, i32* %r3.global-to-local, align 4
  %v1_15dc8 = and i32 %v3_15dc4, 16
  store i32 %v1_15dc8, i32* %r5.global-to-local, align 4
  %v2_15dc8 = icmp eq i32 %v1_15dc8, 0
  br i1 %v2_15dc8, label %dec_label_pc_15df0, label %dec_label_pc_15dd0

dec_label_pc_15dd0:                               ; preds = %dec_label_pc_15db4, %dec_label_pc_15dc4
  %v0_15dd0 = call i32 @function_10f8c()
  store i32 %v0_15dd0, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_15dd8 = inttoptr i32 %v0_15dd0 to i32*
  store i32 9, i32* %v2_15dd8, align 4
  br label %dec_label_pc_15ddc

dec_label_pc_15ddc:                               ; preds = %dec_label_pc_15df8, %dec_label_pc_15dd0
  %v0_15ddc = load i32, i32* @r4, align 4
  %v1_15ddc = inttoptr i32 %v0_15ddc to i16*
  %v2_15ddc = load i16, i16* %v1_15ddc, align 2
  %v3_15ddc = zext i16 %v2_15ddc to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_15de4 = or i32 %v3_15ddc, 8
  store i32 %v1_15de4, i32* %r3.global-to-local, align 4
  %v1_15de8 = trunc i32 %v1_15de4 to i16
  store i16 %v1_15de8, i16* %v1_15ddc, align 2
  %v1_15e30.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15e28

dec_label_pc_15df0:                               ; preds = %dec_label_pc_15dc4
  %v1_15df0 = and i32 %v3_15dc4, 64
  %v2_15df0 = icmp eq i32 %v1_15df0, 0
  br i1 %v2_15df0, label %dec_label_pc_15e18, label %dec_label_pc_15df8

dec_label_pc_15df8:                               ; preds = %dec_label_pc_15df0
  %v0_15df8 = load i32, i32* @r0, align 4
  %v1_15df8 = call i32 @function_149cc(i32 %v0_15df8)
  store i32 %v1_15df8, i32* %r0.global-to-local, align 4
  %v2_15dfc = icmp eq i32 %v1_15df8, 0
  br i1 %v2_15dfc, label %dec_label_pc_15e04, label %dec_label_pc_15ddc

dec_label_pc_15e04:                               ; preds = %dec_label_pc_15df8
  %v0_15e04 = load i32, i32* @r4, align 4
  %v1_15e04 = inttoptr i32 %v0_15e04 to i16*
  %v2_15e04 = load i16, i16* %v1_15e04, align 2
  %v3_15e04 = zext i16 %v2_15e04 to i32
  store i32 %v3_15e04, i32* %r3.global-to-local, align 4
  %v1_15e08 = add i32 %v0_15e04, 8
  %v2_15e08 = inttoptr i32 %v1_15e08 to i32*
  %v3_15e08 = load i32, i32* %v2_15e08, align 4
  %v1_15e0c = and i32 %v3_15e04, 65471
  store i32 %v1_15e0c, i32* %r3.global-to-local, align 4
  %v2_15e10 = add i32 %v0_15e04, 28
  %v3_15e10 = inttoptr i32 %v2_15e10 to i32*
  store i32 %v3_15e08, i32* %v3_15e10, align 4
  %v0_15e14 = load i32, i32* %r3.global-to-local, align 4
  %v1_15e14 = trunc i32 %v0_15e14 to i16
  %v2_15e14 = load i32, i32* @r4, align 4
  %v3_15e14 = inttoptr i32 %v2_15e14 to i16*
  store i16 %v1_15e14, i16* %v3_15e14, align 2
  %v0_15e18.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15e18

dec_label_pc_15e18:                               ; preds = %dec_label_pc_15df0, %dec_label_pc_15e04
  %v2_15e20 = phi i32 [ %v0_15dc4, %dec_label_pc_15df0 ], [ %v0_15e18.pre, %dec_label_pc_15e04 ]
  %v1_15e18 = inttoptr i32 %v2_15e20 to i16*
  %v2_15e18 = load i16, i16* %v1_15e18, align 2
  %v3_15e18 = zext i16 %v2_15e18 to i32
  %v1_15e1c = or i32 %v3_15e18, 1
  store i32 %v1_15e1c, i32* %r3.global-to-local, align 4
  %v1_15e20 = trunc i32 %v1_15e1c to i16
  store i16 %v1_15e20, i16* %v1_15e18, align 2
  %v0_15e24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_15e24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15e28

dec_label_pc_15e28:                               ; preds = %dec_label_pc_15ddc, %dec_label_pc_15e18
  %v1_15e30 = phi i32 [ %v1_15e30.pre, %dec_label_pc_15ddc ], [ %v0_15e24, %dec_label_pc_15e18 ]
  %v2_15e2c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15e2c, i32* @r4, align 4
  ret i32 %v1_15e30

; uselistorder directives
  uselistorder i32 %v3_15da0, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 22, 47, 7, 23, 24, 25, 35, 36, 20, 10, 21, 11, 12, 13, 14, 44, 45, 46, 8, 15, 0, 26, 1, 27, 2, 28, 3, 29, 4, 30, 5, 31, 6, 32, 9, 19, 34, 33, 16, 17, 18, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_149cc, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 20, 9, 10, 11, 12, 52, 17, 18, 19, 21, 22, 6, 23, 24, 25, 0, 26, 27, 28, 1, 29, 30, 31, 2, 32, 33, 34, 7, 35, 36, 37, 3, 38, 39, 40, 41, 42, 4, 43, 44, 45, 46, 47, 5, 48, 49, 50, 8, 51 }
  uselistorder i32 8, { 70, 71, 72, 73, 74, 75, 76, 63, 64, 65, 66, 138, 77, 219, 34, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 78, 79, 80, 81, 82, 83, 84, 28, 85, 86, 87, 88, 89, 90, 91, 92, 93, 67, 68, 69, 109, 110, 111, 45, 237, 238, 29, 170, 171, 172, 173, 174, 175, 176, 177, 7, 55, 178, 179, 180, 181, 182, 183, 184, 185, 8, 157, 158, 159, 160, 161, 162, 163, 164, 186, 187, 188, 189, 190, 9, 191, 192, 10, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 203, 204, 205, 206, 56, 23, 207, 208, 209, 57, 58, 11, 211, 212, 213, 214, 216, 217, 59, 12, 218, 13, 215, 37, 38, 35, 36, 25, 26, 31, 32, 39, 239, 112, 113, 114, 115, 46, 61, 30, 14, 15, 22, 16, 40, 98, 99, 17, 18, 19, 100, 47, 94, 48, 95, 49, 96, 50, 97, 62, 33, 101, 102, 103, 24, 27, 105, 20, 51, 106, 52, 107, 108, 104, 116, 117, 118, 3, 119, 120, 121, 4, 122, 123, 124, 125, 126, 127, 128, 5, 129, 130, 131, 132, 133, 134, 135, 6, 139, 41, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 165, 42, 166, 43, 167, 44, 168, 53, 169, 0, 1, 60, 21, 136, 54, 137, 2 }
  uselistorder i32 9, { 5, 26, 21, 22, 57, 59, 6, 41, 4, 42, 7, 32, 10, 29, 11, 30, 12, 31, 27, 8, 9, 28, 23, 33, 2, 24, 25, 34, 13, 35, 14, 36, 15, 37, 16, 38, 39, 17, 40, 0, 18, 1, 55, 43, 44, 45, 46, 47, 48, 19, 49, 50, 51, 52, 53, 54, 56, 3, 58, 20 }
  uselistorder i32 16, { 101, 102, 103, 95, 96, 97, 98, 104, 33, 34, 35, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 105, 106, 107, 108, 109, 2, 1, 25, 48, 49, 50, 51, 112, 52, 113, 110, 111, 53, 54, 114, 9, 55, 56, 115, 116, 57, 58, 117, 118, 99, 100, 59, 132, 133, 91, 92, 93, 94, 60, 26, 131, 36, 61, 62, 63, 214, 215, 216, 217, 64, 218, 3, 65, 219, 220, 0, 221, 222, 66, 24, 134, 67, 135, 68, 69, 10, 23, 11, 12, 4, 13, 14, 70, 121, 37, 122, 123, 71, 119, 124, 120, 127, 128, 38, 90, 129, 72, 73, 15, 85, 16, 17, 74, 125, 126, 39, 130, 40, 75, 41, 207, 136, 137, 27, 138, 139, 18, 140, 141, 5, 76, 142, 143, 144, 28, 145, 146, 147, 148, 149, 6, 77, 150, 29, 151, 152, 153, 19, 154, 155, 86, 20, 87, 156, 78, 79, 157, 158, 7, 43, 159, 42, 160, 30, 161, 162, 163, 21, 164, 165, 88, 22, 89, 166, 80, 81, 167, 168, 8, 45, 169, 44, 170, 82, 172, 173, 174, 175, 31, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 203, 205, 206, 208, 209, 32, 210, 211, 212, 213, 83, 46, 223, 84, 47, 171 }
  uselistorder i32* @r1, { 15, 14, 58, 16, 17, 18, 19, 1, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 2, 95, 96, 20, 21, 22, 23, 0, 44, 45, 10, 24, 37, 38, 39, 3, 73, 71, 72, 4, 74, 5, 29, 30, 12, 59, 60, 61, 7, 25, 46, 11, 75, 76, 47, 8, 77, 48, 49, 31, 26, 27, 28, 33, 32, 62, 34, 35, 36, 40, 41, 42, 43, 50, 51, 52, 9, 53, 68, 69, 6, 54, 55, 56, 57, 63, 64, 65, 66, 67, 70, 13 }
  uselistorder label %dec_label_pc_15e28, { 1, 0 }
  uselistorder label %dec_label_pc_15e18, { 1, 0 }
  uselistorder label %dec_label_pc_15dd0, { 1, 0 }
  uselistorder label %dec_label_pc_15dc4, { 1, 0 }
}

define i32 @function_15e34(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15e34:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_15e34 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_15e44 = call i32 @function_11090()
  %v0_15e48 = load i32, i32* @r5, align 4
  %v1_15e48 = load i32, i32* @r4, align 4
  %v2_15e48 = add i32 %v1_15e48, %v0_15e48
  store i32 %v6_15e34, i32* @r5, align 4
  ret i32 %v2_15e48

; uselistorder directives
  uselistorder i32 ()* @function_11090, { 6, 7, 3, 0, 2, 1, 5, 4 }
  uselistorder i32* @r5, { 41, 42, 43, 44, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 5, 46, 47, 48, 664, 665, 666, 49, 23, 50, 0, 51, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 25, 26, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 10, 90, 91, 8, 92, 93, 94, 95, 96, 97, 9, 98, 99, 100, 101, 102, 103, 36, 11, 37, 38, 39, 40, 247, 248, 249, 250, 251, 252, 679, 12, 680, 681, 689, 104, 105, 106, 107, 108, 109, 110, 682, 683, 684, 685, 686, 687, 688, 111, 112, 113, 114, 618, 619, 623, 624, 625, 626, 627, 620, 621, 622, 567, 568, 569, 13, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 628, 629, 652, 14, 653, 654, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 3, 643, 644, 645, 646, 647, 15, 648, 649, 650, 651, 125, 126, 127, 128, 129, 253, 254, 16, 255, 256, 257, 258, 259, 24, 115, 260, 17, 261, 262, 263, 264, 265, 266, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 121, 122, 124, 123, 116, 117, 118, 119, 120, 192, 193, 194, 195, 196, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 201, 202, 203, 204, 205, 422, 423, 424, 425, 426, 427, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 1, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 2, 246, 267, 268, 269, 270, 271, 20, 272, 273, 274, 275, 276, 277, 278, 21, 279, 22, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 428, 429, 18, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 4, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 655, 656, 657, 658, 659, 660, 661, 662, 663, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421 }
  uselistorder i32* @r2, { 7, 10, 11, 39, 40, 12, 13, 14, 15, 16, 17, 28, 8, 9, 29, 41, 46, 47, 48, 49, 1, 52, 42, 22, 23, 43, 2, 3, 36, 37, 4, 38, 5, 0, 50, 6, 51, 44, 45, 24, 25, 26, 30, 31, 35, 21, 18, 19, 20, 27, 32, 33, 34 }
}

define i32 @function_15e58(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15e58:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15e98, label %dec_label_pc_15e84

dec_label_pc_15e84:                               ; preds = %dec_label_pc_15e58
  %v0_15e84 = call i32 @function_10f8c()
  %v0_15e88 = load i32, i32* %r4.global-to-local, align 4
  %v1_15e88 = sub i32 0, %v0_15e88
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_15e90 = inttoptr i32 %v0_15e84 to i32*
  store i32 %v1_15e88, i32* %v2_15e90, align 4
  %v0_15ea0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15ea0

dec_label_pc_15e98:                               ; preds = %dec_label_pc_15e58
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_15e98 = icmp eq i32 %arg1, 0
  br i1 %v2_15e98, label %dec_label_pc_15eac, label %dec_label_pc_15ea0

dec_label_pc_15ea0:                               ; preds = %dec_label_pc_15e98, %dec_label_pc_15e84
  %v0_15ea0 = phi i32 [ %arg1, %dec_label_pc_15e98 ], [ %v0_15ea0.pre, %dec_label_pc_15e84 ]
  br label %dec_label_pc_15eb0

dec_label_pc_15eac:                               ; preds = %dec_label_pc_15e98
  br label %dec_label_pc_15eb0

dec_label_pc_15eb0:                               ; preds = %dec_label_pc_15ea0, %dec_label_pc_15eac
  %v1_15eb8 = phi i32 [ %v0_15ea0, %dec_label_pc_15ea0 ], [ %tmp8, %dec_label_pc_15eac ]
  ret i32 %v1_15eb8

; uselistorder directives
  uselistorder i32 -1, { 245, 251, 163, 246, 247, 248, 112, 249, 113, 250, 84, 85, 86, 87, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 164, 165, 0, 166, 150, 252, 253, 167, 114, 254, 168, 1, 88, 255, 256, 154, 257, 169, 3, 2, 170, 171, 115, 320, 116, 117, 289, 118, 294, 105, 295, 280, 281, 282, 119, 244, 120, 296, 297, 4, 172, 173, 174, 298, 277, 278, 155, 175, 5, 176, 6, 177, 156, 299, 10, 178, 179, 9, 11, 300, 8, 180, 181, 89, 7, 182, 90, 91, 92, 93, 183, 184, 185, 101, 260, 261, 12, 262, 121, 301, 122, 123, 292, 124, 302, 125, 286, 126, 263, 127, 276, 128, 129, 264, 130, 303, 131, 304, 104, 162, 13, 284, 186, 132, 293, 133, 322, 134, 265, 135, 266, 136, 267, 137, 283, 138, 324, 139, 287, 140, 321, 141, 290, 142, 285, 143, 268, 144, 145, 146, 323, 147, 279, 187, 188, 189, 14, 99, 102, 15, 16, 103, 100, 152, 153, 190, 19, 191, 20, 192, 269, 94, 21, 193, 194, 195, 196, 18, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 258, 148, 259, 22, 222, 223, 107, 106, 270, 17, 224, 225, 226, 23, 227, 110, 111, 108, 109, 228, 24, 229, 149, 271, 95, 25, 26, 157, 272, 158, 273, 28, 159, 274, 27, 29, 30, 31, 160, 275, 32, 33, 34, 35, 230, 36, 96, 37, 38, 231, 39, 151, 40, 41, 42, 232, 43, 44, 45, 97, 46, 47, 48, 49, 50, 233, 51, 234, 52, 53, 54, 235, 55, 56, 57, 236, 58, 59, 60, 61, 62, 237, 63, 64, 65, 66, 67, 68, 238, 69, 161, 291, 70, 71, 72, 239, 73, 74, 75, 240, 76, 77, 78, 241, 79, 80, 81, 82, 242, 243, 288, 83, 98 }
  uselistorder i32 ()* @function_10f8c, { 62, 58, 61, 60, 59, 64, 32, 31, 5, 4, 21, 29, 16, 19, 18, 63, 15, 14, 13, 40, 39, 20, 10, 12, 11, 55, 54, 9, 26, 25, 8, 23, 53, 42, 52, 51, 7, 6, 57, 56, 17, 36, 35, 34, 24, 2, 50, 49, 48, 37, 0, 22, 3, 27, 33, 47, 28, 46, 1, 38, 45, 44, 43, 41, 30 }
  uselistorder i32 1, { 252, 251, 797, 625, 369, 370, 371, 626, 286, 798, 799, 800, 627, 56, 58, 57, 59, 54, 60, 55, 61, 628, 324, 323, 325, 629, 64, 65, 62, 68, 66, 63, 67, 630, 118, 284, 283, 444, 472, 445, 996, 997, 998, 999, 457, 631, 372, 633, 632, 431, 432, 801, 634, 448, 1096, 449, 802, 1097, 803, 804, 805, 807, 806, 434, 635, 809, 808, 921, 922, 1098, 450, 1099, 1100, 1101, 1102, 1103, 1104, 793, 1105, 1106, 1107, 1108, 1109, 1110, 794, 616, 637, 636, 352, 353, 358, 360, 359, 354, 351, 355, 357, 356, 813, 810, 811, 812, 470, 451, 332, 330, 331, 334, 333, 513, 814, 815, 816, 817, 638, 617, 73, 74, 818, 641, 640, 639, 271, 275, 273, 276, 277, 272, 274, 514, 819, 643, 642, 428, 426, 429, 425, 427, 430, 820, 644, 214, 213, 212, 821, 822, 645, 327, 326, 646, 222, 515, 796, 10, 11, 823, 824, 825, 826, 516, 827, 828, 829, 452, 649, 648, 647, 418, 417, 421, 420, 419, 422, 830, 831, 832, 651, 650, 342, 343, 517, 833, 652, 83, 834, 835, 836, 837, 838, 518, 653, 240, 244, 242, 241, 243, 519, 43, 265, 654, 151, 150, 223, 655, 23, 656, 174, 173, 657, 45, 50, 44, 49, 53, 52, 48, 51, 46, 47, 658, 301, 300, 298, 297, 299, 295, 296, 659, 229, 230, 237, 238, 234, 235, 233, 236, 231, 232, 660, 321, 322, 411, 923, 215, 218, 216, 217, 661, 137, 136, 662, 337, 663, 19, 20, 1111, 520, 1112, 521, 664, 39, 35, 40, 38, 36, 41, 42, 37, 350, 522, 133, 132, 665, 423, 424, 22, 437, 839, 840, 841, 666, 994, 669, 668, 667, 239, 670, 446, 908, 447, 909, 910, 438, 911, 362, 363, 361, 364, 365, 368, 367, 366, 912, 1113, 458, 523, 672, 671, 673, 279, 1053, 1056, 1057, 1058, 674, 386, 391, 392, 390, 389, 393, 387, 388, 1059, 1060, 1061, 1062, 675, 377, 383, 376, 382, 381, 375, 385, 384, 379, 374, 378, 380, 1054, 1055, 524, 102, 101, 100, 103, 1046, 525, 1047, 1048, 1049, 1050, 1051, 676, 105, 106, 104, 107, 33, 32, 1063, 1064, 1065, 1066, 1067, 1068, 477, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 527, 1077, 1078, 1079, 1080, 1081, 526, 1082, 1083, 1084, 1085, 1086, 677, 397, 404, 395, 402, 401, 406, 399, 405, 400, 398, 403, 396, 269, 268, 528, 529, 873, 442, 681, 680, 679, 678, 287, 108, 453, 200, 682, 18, 17, 119, 683, 195, 684, 121, 685, 224, 686, 149, 687, 267, 266, 120, 688, 347, 346, 689, 34, 690, 345, 344, 691, 1000, 1001, 310, 311, 842, 843, 844, 845, 846, 847, 848, 1114, 338, 339, 340, 341, 692, 924, 530, 335, 336, 849, 693, 294, 531, 694, 282, 478, 532, 695, 221, 219, 220, 696, 9, 8, 7, 697, 194, 193, 698, 290, 699, 291, 700, 199, 198, 701, 135, 134, 281, 280, 702, 329, 328, 703, 163, 162, 704, 21, 705, 293, 292, 706, 289, 288, 349, 707, 373, 348, 708, 709, 285, 710, 197, 196, 433, 1087, 394, 925, 926, 927, 928, 436, 929, 712, 711, 82, 80, 79, 77, 78, 75, 76, 81, 0, 913, 914, 915, 916, 1002, 454, 1003, 455, 1004, 714, 713, 409, 408, 410, 930, 931, 932, 715, 72, 71, 69, 70, 1088, 1089, 459, 1, 435, 512, 1090, 254, 253, 255, 256, 868, 869, 870, 533, 933, 407, 1030, 935, 934, 936, 226, 227, 1005, 1021, 716, 31, 30, 29, 28, 1006, 717, 27, 26, 25, 24, 545, 874, 546, 875, 479, 876, 547, 871, 877, 535, 878, 461, 548, 549, 853, 850, 537, 443, 851, 852, 538, 854, 855, 856, 539, 857, 858, 542, 859, 860, 540, 861, 862, 541, 536, 863, 864, 865, 543, 866, 867, 544, 872, 879, 880, 881, 550, 882, 883, 884, 551, 460, 885, 795, 888, 887, 534, 886, 889, 890, 552, 891, 892, 893, 462, 900, 901, 439, 553, 618, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 109, 113, 112, 111, 117, 114, 110, 116, 115, 894, 895, 554, 896, 897, 555, 898, 899, 188, 187, 186, 192, 189, 190, 191, 185, 184, 556, 557, 731, 730, 414, 415, 412, 413, 416, 1091, 468, 456, 732, 130, 129, 128, 127, 131, 125, 123, 122, 124, 126, 1007, 734, 733, 95, 96, 94, 93, 92, 97, 270, 481, 902, 560, 903, 480, 904, 558, 559, 561, 905, 906, 562, 563, 564, 565, 566, 567, 568, 746, 745, 744, 743, 742, 741, 740, 739, 738, 624, 737, 736, 735, 12, 13, 15, 14, 569, 440, 570, 747, 571, 572, 573, 576, 575, 574, 907, 748, 619, 98, 99, 577, 917, 469, 918, 919, 578, 471, 579, 920, 441, 580, 756, 755, 754, 753, 752, 751, 750, 749, 145, 148, 146, 147, 937, 943, 3, 463, 938, 581, 939, 2, 940, 473, 941, 464, 465, 942, 944, 945, 474, 946, 620, 760, 759, 621, 758, 757, 225, 1036, 482, 483, 1037, 4, 5, 6, 947, 948, 949, 582, 950, 583, 584, 951, 484, 952, 761, 313, 317, 318, 319, 316, 312, 315, 314, 953, 954, 955, 585, 956, 586, 486, 485, 587, 957, 588, 958, 762, 178, 181, 182, 183, 180, 175, 179, 176, 177, 959, 960, 961, 962, 963, 589, 964, 590, 965, 591, 491, 490, 592, 966, 487, 967, 488, 968, 489, 969, 768, 767, 766, 765, 764, 763, 141, 142, 143, 144, 138, 140, 139, 970, 971, 972, 973, 974, 593, 975, 594, 976, 595, 500, 499, 596, 977, 498, 978, 497, 979, 492, 980, 493, 981, 494, 982, 495, 983, 496, 984, 774, 773, 772, 771, 770, 769, 158, 159, 161, 160, 155, 157, 156, 1008, 1009, 1010, 1011, 1012, 475, 476, 597, 1013, 1014, 598, 1015, 1016, 599, 1017, 1019, 1018, 778, 777, 776, 775, 86, 88, 90, 91, 89, 84, 87, 85, 1022, 1023, 1024, 600, 601, 780, 779, 246, 249, 250, 245, 248, 247, 1025, 1026, 1027, 602, 503, 502, 603, 1028, 501, 1029, 781, 204, 205, 209, 210, 211, 208, 207, 206, 1031, 1032, 1033, 604, 506, 505, 605, 1034, 504, 1035, 786, 785, 784, 783, 782, 164, 165, 170, 171, 172, 169, 168, 167, 166, 1038, 1039, 1040, 606, 1041, 607, 508, 507, 608, 1042, 787, 259, 262, 263, 264, 261, 257, 260, 258, 1043, 1044, 609, 1045, 509, 466, 610, 622, 201, 202, 203, 1092, 1093, 611, 1094, 510, 467, 612, 623, 308, 307, 309, 1052, 511, 613, 788, 153, 154, 152, 1095, 789, 16, 985, 278, 986, 989, 614, 990, 991, 987, 988, 992, 993, 302, 303, 304, 306, 305, 995, 615, 790, 1020, 320, 791, 792, 228 }
  uselistorder i32 %arg1, { 1, 3, 4, 0, 2 }
  uselistorder label %dec_label_pc_15eb0, { 1, 0 }
}

define i32 @function_15ebc() local_unnamed_addr {
entry:
  %v3_15ec0 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15ec0)
  %v31_15ec8 = load i32, i32* @r0, align 4
  ret i32 %v31_15ec8

; uselistorder directives
  uselistorder i32* @r0, { 31, 17, 29, 61, 60, 187, 11, 4, 5, 221, 6, 14, 7, 62, 0, 63, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 1, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 64, 24, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 30, 27, 153, 154, 22, 28, 12, 248, 250, 251, 50, 51, 52, 53, 54, 55, 56, 57, 10, 25, 79, 80, 249, 137, 138, 81, 205, 16, 48, 49, 206, 2, 207, 208, 209, 204, 198, 46, 199, 200, 201, 47, 202, 203, 15, 217, 218, 210, 211, 212, 213, 214, 215, 216, 87, 88, 20, 89, 9, 23, 155, 156, 157, 158, 186, 13, 21, 18, 219, 159, 220, 19, 160, 161, 162, 163, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 84, 85, 120, 33, 82, 83, 86, 121, 124, 125, 126, 127, 128, 129, 122, 123, 34, 35, 36, 37, 130, 131, 38, 39, 132, 133, 134, 135, 136, 139, 140, 40, 41, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 42, 151, 152, 43, 164, 165, 166, 167, 168, 169, 170, 8, 171, 172, 173, 174, 175, 176, 177, 195, 196, 3, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 192, 193, 194, 197, 184, 185, 44, 45, 26, 32 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 64, 65, 66, 67, 60, 48, 61, 62, 63, 68, 69, 70, 49, 50, 51, 45, 46, 47, 52, 56, 57, 53, 54, 55, 71, 38, 39, 40, 41, 42, 43, 44, 58 }
  uselistorder i32 0, { 571, 572, 581, 582, 583, 584, 585, 103, 586, 587, 588, 0, 589, 292, 66, 590, 362, 591, 592, 593, 323, 324, 573, 574, 579, 1, 104, 105, 935, 936, 937, 938, 139, 140, 939, 594, 141, 106, 1129, 1130, 1131, 293, 595, 596, 597, 294, 1132, 67, 295, 1133, 1134, 84, 41, 42, 598, 75, 2, 98, 99, 784, 76, 77, 78, 785, 786, 1135, 1136, 1137, 1138, 1139, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1140, 1141, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 32, 1160, 1161, 1162, 1163, 1164, 33, 1165, 1166, 1167, 34, 1168, 1169, 1170, 35, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1195, 1196, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 36, 1214, 1215, 1216, 1217, 1218, 37, 1219, 1220, 1221, 1222, 1223, 38, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 142, 599, 549, 600, 601, 602, 603, 604, 363, 364, 605, 606, 107, 108, 109, 607, 608, 612, 609, 610, 611, 296, 309, 613, 614, 110, 143, 617, 615, 616, 297, 618, 111, 619, 620, 3, 4, 112, 621, 565, 566, 365, 567, 622, 623, 624, 68, 69, 625, 626, 627, 144, 628, 629, 630, 631, 632, 366, 633, 634, 635, 636, 637, 638, 113, 639, 640, 641, 642, 5, 6, 145, 147, 643, 146, 644, 148, 645, 114, 646, 651, 652, 647, 648, 649, 654, 655, 656, 149, 657, 658, 659, 660, 661, 650, 653, 662, 115, 575, 576, 577, 1239, 1240, 1042, 929, 1050, 580, 787, 788, 325, 789, 367, 568, 368, 569, 1051, 1052, 1053, 150, 1054, 790, 791, 792, 570, 578, 116, 151, 1241, 1242, 1055, 1056, 117, 152, 369, 1246, 1247, 370, 1248, 1249, 153, 299, 1250, 1251, 371, 70, 1252, 1253, 372, 1260, 1263, 540, 298, 1264, 373, 1261, 1262, 1243, 1244, 550, 154, 285, 663, 665, 664, 155, 666, 667, 668, 374, 669, 100, 930, 91, 931, 157, 156, 932, 1245, 761, 762, 763, 764, 765, 766, 159, 118, 767, 768, 769, 92, 158, 770, 119, 376, 377, 1255, 375, 120, 548, 121, 160, 1062, 1063, 1064, 1065, 1066, 161, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 162, 1057, 378, 1058, 1059, 379, 1060, 1061, 122, 1043, 380, 163, 1044, 1045, 1046, 1047, 1048, 123, 164, 165, 172, 167, 168, 170, 171, 166, 173, 169, 1074, 1075, 1099, 1100, 124, 1076, 1077, 177, 175, 176, 1078, 1079, 183, 182, 135, 174, 1080, 1081, 1082, 1083, 1084, 1085, 316, 315, 326, 381, 1086, 1087, 1088, 71, 1089, 179, 178, 180, 181, 134, 1090, 1091, 300, 1092, 1093, 101, 1094, 1095, 1096, 1097, 1098, 7, 8, 692, 693, 72, 125, 9, 327, 382, 1101, 1020, 1021, 1102, 898, 694, 759, 695, 696, 1103, 1104, 940, 1265, 1266, 79, 126, 793, 794, 795, 184, 670, 671, 185, 796, 801, 802, 803, 804, 186, 328, 187, 317, 318, 383, 797, 188, 798, 799, 127, 805, 1022, 1256, 697, 698, 699, 800, 1259, 899, 1254, 941, 806, 700, 933, 701, 384, 1257, 95, 1258, 771, 10, 1105, 1106, 96, 1107, 1108, 1109, 1110, 1111, 189, 1112, 541, 551, 542, 543, 1113, 552, 136, 190, 807, 808, 809, 93, 311, 810, 811, 553, 11, 301, 191, 192, 193, 43, 194, 385, 702, 812, 813, 814, 1115, 1114, 1116, 1117, 1118, 1119, 39, 195, 1120, 1121, 1122, 196, 85, 86, 360, 361, 684, 198, 197, 199, 815, 200, 816, 817, 201, 1001, 1002, 386, 202, 818, 203, 204, 973, 205, 942, 206, 207, 710, 703, 208, 704, 705, 706, 685, 686, 688, 672, 673, 554, 674, 687, 675, 555, 676, 556, 677, 557, 678, 558, 679, 680, 87, 44, 288, 289, 681, 559, 682, 560, 683, 689, 690, 387, 691, 707, 539, 708, 388, 709, 303, 302, 711, 712, 713, 714, 210, 209, 715, 716, 717, 561, 286, 718, 80, 81, 287, 719, 82, 83, 389, 721, 722, 544, 723, 724, 725, 726, 727, 390, 728, 729, 730, 312, 137, 547, 731, 732, 733, 734, 735, 736, 546, 737, 738, 391, 739, 392, 740, 743, 744, 745, 211, 741, 212, 742, 13, 12, 213, 720, 943, 944, 545, 538, 746, 214, 747, 748, 749, 750, 751, 752, 753, 291, 290, 393, 754, 394, 755, 395, 756, 319, 757, 320, 396, 758, 436, 437, 397, 760, 398, 219, 218, 562, 128, 563, 217, 216, 215, 305, 313, 399, 772, 220, 221, 780, 773, 774, 775, 776, 777, 778, 779, 304, 781, 782, 45, 783, 222, 400, 94, 819, 820, 821, 822, 308, 823, 824, 825, 307, 826, 827, 828, 829, 223, 830, 832, 831, 129, 130, 224, 306, 226, 225, 833, 227, 228, 73, 229, 834, 232, 835, 836, 837, 838, 231, 230, 233, 839, 840, 46, 47, 131, 841, 842, 14, 15, 16, 17, 843, 844, 234, 330, 845, 401, 846, 402, 847, 403, 848, 404, 849, 405, 850, 406, 851, 329, 852, 238, 854, 855, 856, 857, 236, 235, 239, 858, 859, 48, 49, 853, 237, 861, 860, 18, 19, 20, 21, 862, 240, 863, 864, 332, 865, 407, 866, 408, 867, 409, 868, 410, 869, 411, 870, 412, 871, 331, 872, 413, 873, 244, 875, 876, 877, 878, 242, 241, 245, 879, 880, 50, 51, 874, 243, 881, 52, 414, 882, 884, 885, 886, 887, 415, 888, 22, 23, 24, 25, 26, 883, 246, 889, 890, 338, 891, 337, 892, 336, 893, 335, 894, 333, 895, 334, 896, 416, 897, 250, 901, 902, 903, 904, 248, 247, 251, 905, 906, 53, 54, 900, 249, 907, 55, 417, 908, 910, 911, 912, 913, 418, 914, 27, 28, 29, 30, 31, 909, 252, 915, 916, 340, 917, 339, 918, 419, 919, 255, 945, 946, 947, 948, 254, 253, 256, 949, 950, 56, 57, 138, 97, 257, 74, 421, 951, 952, 953, 954, 955, 258, 956, 957, 343, 958, 959, 960, 961, 262, 259, 260, 261, 962, 963, 964, 965, 422, 966, 967, 342, 969, 420, 970, 341, 971, 423, 972, 264, 974, 975, 976, 977, 263, 265, 978, 979, 58, 59, 88, 980, 266, 981, 982, 346, 344, 983, 345, 984, 987, 988, 989, 268, 269, 990, 991, 60, 985, 986, 267, 993, 992, 994, 270, 995, 996, 349, 997, 348, 998, 347, 999, 424, 1000, 1004, 1005, 1006, 272, 273, 274, 1008, 1009, 61, 1007, 1003, 271, 1011, 1012, 1010, 1013, 275, 1014, 1015, 352, 1016, 351, 1017, 350, 1018, 425, 1019, 279, 1024, 1025, 1026, 1027, 278, 277, 280, 1028, 1029, 62, 63, 1023, 276, 1030, 1031, 281, 1032, 1033, 355, 1034, 354, 1035, 353, 1036, 426, 1037, 428, 89, 64, 1038, 132, 356, 429, 430, 1039, 1040, 1041, 427, 432, 90, 65, 1123, 133, 357, 433, 1124, 1125, 1126, 431, 321, 1049, 1127, 282, 1128, 920, 283, 921, 922, 102, 923, 924, 322, 434, 310, 925, 926, 40, 314, 927, 928, 435, 934, 284, 968, 358, 564, 359, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281 }
  uselistorder i32* @r4, { 35, 48, 49, 50, 6, 51, 52, 53, 7, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 41, 42, 43, 481, 482, 64, 65, 66, 67, 68, 69, 70, 71, 72, 711, 712, 73, 74, 8, 1, 75, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 9, 76, 77, 78, 79, 80, 81, 82, 83, 84, 10, 85, 86, 89, 90, 91, 92, 36, 93, 94, 95, 96, 97, 98, 87, 88, 37, 38, 99, 100, 11, 101, 12, 102, 13, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 14, 123, 124, 125, 15, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 44, 45, 46, 47, 39, 40, 641, 642, 272, 273, 729, 730, 731, 643, 644, 734, 739, 740, 741, 742, 743, 744, 745, 732, 138, 139, 140, 474, 475, 476, 733, 246, 16, 247, 248, 249, 250, 251, 252, 735, 738, 141, 142, 143, 144, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 17, 662, 663, 664, 665, 646, 647, 648, 649, 609, 610, 611, 612, 613, 614, 615, 616, 617, 18, 618, 619, 620, 621, 622, 623, 624, 625, 626, 666, 688, 689, 690, 691, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 33, 680, 681, 0, 682, 683, 684, 685, 686, 687, 165, 166, 167, 736, 737, 580, 581, 418, 419, 274, 275, 276, 277, 278, 279, 280, 145, 146, 147, 281, 282, 283, 5, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 2, 294, 295, 296, 692, 693, 19, 694, 695, 696, 168, 169, 170, 523, 524, 483, 484, 171, 172, 173, 174, 175, 176, 177, 178, 159, 160, 161, 179, 180, 181, 182, 162, 150, 151, 148, 149, 152, 153, 154, 155, 156, 157, 158, 163, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 209, 210, 211, 212, 213, 3, 203, 204, 205, 206, 207, 208, 197, 198, 697, 698, 485, 486, 487, 488, 489, 164, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 20, 21, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 297, 298, 4, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 22, 315, 23, 316, 24, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 25, 341, 26, 342, 27, 343, 28, 344, 345, 346, 347, 29, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 30, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 31, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 32, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 699, 700, 701, 702, 703, 704, 708, 709, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 705, 706, 707, 461, 462, 463, 466, 464, 465, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 34, 710 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
