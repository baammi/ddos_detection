source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%_TYPEDEF_fd_set = type { [1 x i32] }
%timeval = type { i32, i32 }
%dirent = type { i32, i32, i16, i8, [256 x i8] }
%__dirstream = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1168c.2 = constant i32 73384
@global_var_e69c.10 = constant i32 -382906384
@global_var_1a1d8.14 = global i32 0
@global_var_8ea8.15 = constant i32 -352321547
@global_var_8ca4.16 = constant i32 -493894144
@global_var_c920.22 = constant i32 -382906384
@global_var_cd58.24 = constant i32 -382906384
@global_var_c194.26 = constant i32 -382906384
@global_var_bae8.28 = constant i32 -382906384
@global_var_b3f0.30 = constant i32 -382906384
@global_var_ac3c.32 = constant i32 -382906384
@global_var_9bcc.35 = constant i32 -382906384
@global_var_9538.37 = constant i32 -382906384
@global_var_a1e8.39 = constant i32 -382906384
@global_var_1a230.41 = global i32 0
@global_var_1a238.53 = global i32 0
@global_var_11d80.55 = constant i32 47
@global_var_1a1dc.58 = global i32 0
@global_var_8b60.62 = constant i32 -493894144
@global_var_e028.63 = constant i32 -509607932
@global_var_e528.65 = constant i32 -382910352
@global_var_1a240.72 = local_unnamed_addr global i32 0
@global_var_1a23e.73 = local_unnamed_addr global i32 0
@global_var_1a1e0.75 = global i32 0
@global_var_11d84.83 = constant i32 10
@global_var_8c8c.89 = constant i32 -493894144
@global_var_11d88.93 = constant i32 16777216
@global_var_1a1e8.95 = global i32 0
@global_var_1a1f4.97 = global i32 0
@global_var_1a1ec.99 = global i32 0
@global_var_1a1f0.101 = global i32 0
@global_var_f520.114 = constant i32 -509607925
@global_var_1a254.116 = global i32 0
@global_var_1a22c.118 = global i32 0
@global_var_1a1f8.120 = global i32 0
@global_var_1a224.122 = global i32 0
@global_var_1a24c.129 = global i32 0
@global_var_1a250.131 = global i32 0
@global_var_1a1fc.133 = global i32 0
@global_var_1a1fe.134 = local_unnamed_addr global i32 0
@global_var_1a210.136 = global i32 0
@global_var_1a200.138 = local_unnamed_addr global i32 0
@global_var_1a204.139 = local_unnamed_addr global i32 0
@global_var_1a205.140 = local_unnamed_addr global i32 0
@global_var_1a21e.143 = local_unnamed_addr global i32 0
@global_var_11d90.145 = constant [5 x i8] c"&;; \00"
@global_var_11d94.147 = constant i32 0
@global_var_11d98.149 = constant [5 x i8] c"5:?;\00"
@global_var_11da0.151 = constant [9 x i8] c"<!: acam\00"
@global_var_11dac.153 = constant [8 x i8] c"0125!8 \00"
@global_var_11db4.155 = constant [9 x i8] c"$5''#;&0\00"
@global_var_11dc0.157 = constant [6 x i8] c"509=:\00"
@global_var_11dc8.159 = constant [6 x i8] c"\22=.,\22\00"
@global_var_11dd0.161 = constant [8 x i8] c"'!$$;& \00"
@global_var_11dd8.163 = constant i32 423502179
@global_var_11de8.165 = constant [6 x i8] c"efg`a\00"
@global_var_11df0.167 = constant [5 x i8] c"!'1&\00"
@global_var_11df8.169 = constant i32 943467547
@global_var_11e04.171 = constant i32 322070023
@global_var_11e10.173 = constant [5 x i8] c"efg`\00"
@global_var_1a208.174 = local_unnamed_addr global i32 0
@global_var_1a206.175 = local_unnamed_addr global i32 0
@global_var_1a20c.176 = local_unnamed_addr global i32 0
@global_var_1a214.178 = local_unnamed_addr global i32 0
@global_var_1a220.179 = local_unnamed_addr global i32 0
@global_var_f630.181 = constant i32 -382910352
@global_var_11e18.183 = constant [3 x i8] c"\0D\0A\00"
@global_var_11e24.185 = constant i32 2096127
@global_var_11e1b.187 = constant i32 2095871
@global_var_1a25c.192 = global i32 0
@global_var_11e28.199 = constant i32 58965
@global_var_1a264.200 = local_unnamed_addr global i32 0
@global_var_1a268.201 = local_unnamed_addr global i32 0
@global_var_11e2c.203 = constant [13 x i8] c"&;; 91z78!6T\00"
@global_var_1a26c.204 = local_unnamed_addr global i32 0
@global_var_1a270.205 = local_unnamed_addr global i32 0
@global_var_11e3c.207 = constant [13 x i8] c"'1:$5=z'= 1T\00"
@global_var_1a274.208 = local_unnamed_addr global i32 0
@global_var_1a278.209 = local_unnamed_addr global i32 0
@global_var_11e4c.211 = constant i32 28654
@global_var_1a27c.212 = local_unnamed_addr global i32 0
@global_var_1a280.213 = local_unnamed_addr global i32 0
@global_var_11e50.215 = constant [37 x i8] c"&;; t'1:$5=t>!' t=:217 10t-;!&t'<= T\00"
@global_var_1a284.216 = local_unnamed_addr global i32 0
@global_var_1a288.217 = local_unnamed_addr global i32 0
@global_var_11e78.219 = constant [7 x i8] c"'<188T\00"
@global_var_1a290.220 = local_unnamed_addr global i32 0
@global_var_1a28c.221 = local_unnamed_addr global i32 0
@global_var_11e80.223 = constant [8 x i8] c"1:5681T\00"
@global_var_1a294.224 = local_unnamed_addr global i32 0
@global_var_1a298.225 = local_unnamed_addr global i32 0
@global_var_11e88.227 = constant [8 x i8] c"'-' 19T\00"
@global_var_1a29c.228 = local_unnamed_addr global i32 0
@global_var_1a2a0.229 = local_unnamed_addr global i32 0
@global_var_11e90.231 = constant [4 x i8] c"'<T\00"
@global_var_1a2a4.232 = local_unnamed_addr global i32 0
@global_var_1a2a8.233 = local_unnamed_addr global i32 0
@global_var_11e94.235 = constant i32 977090171
@global_var_1a2ac.236 = local_unnamed_addr global i32 0
@global_var_1a2b0.237 = local_unnamed_addr global i32 0
@global_var_11ea8.238 = constant i32 102440217
@global_var_1a2b8.239 = local_unnamed_addr global i32 0
@global_var_1a2b4.240 = local_unnamed_addr global i32 0
@global_var_11ec4.242 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1a2bc.243 = local_unnamed_addr global i32 0
@global_var_1a2c0.244 = local_unnamed_addr global i32 0
@global_var_11ed0.246 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1a2c4.247 = local_unnamed_addr global i32 0
@global_var_1a2c8.248 = local_unnamed_addr global i32 0
@global_var_11ee4.250 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1a2d0.251 = local_unnamed_addr global i32 0
@global_var_1a2cc.252 = local_unnamed_addr global i32 0
@global_var_11efc.254 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1a2d4.255 = local_unnamed_addr global i32 0
@global_var_1a2d8.256 = local_unnamed_addr global i32 0
@global_var_11f04.258 = constant [6 x i8] c"{1,1T\00"
@global_var_1a2dc.259 = local_unnamed_addr global i32 0
@global_var_1a2e0.260 = local_unnamed_addr global i32 0
@global_var_11f0c.262 = constant [5 x i8] c"{20T\00"
@global_var_1a2e8.263 = local_unnamed_addr global i32 0
@global_var_1a2e4.264 = local_unnamed_addr global i32 0
@global_var_11f14.266 = constant [7 x i8] c"{95$'T\00"
@global_var_1a2ec.267 = local_unnamed_addr global i32 0
@global_var_1a2f0.268 = local_unnamed_addr global i32 0
@global_var_11f1c.270 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1a2f4.271 = local_unnamed_addr global i32 0
@global_var_1a2f8.272 = local_unnamed_addr global i32 0
@global_var_11f2c.274 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1a36c.275 = local_unnamed_addr global i32 0
@global_var_11f38.277 = constant [8 x i8] c"z5:=91T\00"
@global_var_1a374.278 = local_unnamed_addr global i32 0
@global_var_11f40.280 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1a2fc.281 = local_unnamed_addr global i32 0
@global_var_1a300.282 = local_unnamed_addr global i32 0
@global_var_11f54.284 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_1a304.285 = local_unnamed_addr global i32 0
@global_var_1a308.286 = local_unnamed_addr global i32 0
@global_var_11f6c.288 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1a30c.289 = local_unnamed_addr global i32 0
@global_var_1a310.290 = local_unnamed_addr global i32 0
@global_var_11f78.292 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1a314.293 = local_unnamed_addr global i32 0
@global_var_1a318.294 = local_unnamed_addr global i32 0
@global_var_11f88.296 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1a31c.297 = local_unnamed_addr global i32 0
@global_var_1a320.298 = local_unnamed_addr global i32 0
@global_var_11f9c.300 = constant [11 x i8] c"0\22&<18$1&T\00"
@global_var_1a37c.301 = local_unnamed_addr global i32 0
@global_var_12000.303 = constant i32 557516544
@global_var_1a328.304 = local_unnamed_addr global i32 0
@global_var_1a324.305 = local_unnamed_addr global i32 0
@global_var_11fa8.307 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1a32c.308 = local_unnamed_addr global i32 0
@global_var_1a330.309 = local_unnamed_addr global i32 0
@global_var_11fbc.311 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1a334.312 = local_unnamed_addr global i32 0
@global_var_1a338.313 = local_unnamed_addr global i32 0
@global_var_1a33c.314 = local_unnamed_addr global i32 0
@global_var_1a340.315 = local_unnamed_addr global i32 0
@global_var_1a344.316 = local_unnamed_addr global i32 0
@global_var_1a348.317 = local_unnamed_addr global i32 0
@global_var_11fcc.319 = constant [9 x i8] c"$662*7!E\00"
@global_var_1a34c.320 = local_unnamed_addr global i32 0
@global_var_1a350.321 = local_unnamed_addr global i32 0
@global_var_11fd8.323 = constant [6 x i8] c";3=:T\00"
@global_var_1a358.324 = local_unnamed_addr global i32 0
@global_var_1a354.325 = local_unnamed_addr global i32 0
@global_var_11fe0.327 = constant [7 x i8] c"1: 1&T\00"
@global_var_1a35c.328 = local_unnamed_addr global i32 0
@global_var_11fe8.330 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1a364.331 = local_unnamed_addr global i32 0
@global_var_1a1d4.4 = external global i8*
@global_var_1a1d5.5 = external global i8*
@global_var_1a1d6.20 = global i8 0
@global_var_1a234.60 = external global i8*
@1 = internal constant [4 x i8] c"\CC\A1\01\00"
@global_var_1a23c.71 = global %sockaddr* null
@global_var_1a1e4.87 = external global i8*
@global_var_1a228.124 = global i16* null
@global_var_1a21c.137 = local_unnamed_addr global i8 0
@global_var_1a212.141 = local_unnamed_addr global i16 0
@global_var_1a21d.142 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8a34() local_unnamed_addr {
entry:
  %v3_8a38 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8a38)
  %v31_8a40 = load i32, i32* @r0, align 4
  ret i32 %v31_8a40
}

define i32 @function_8a44(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8a50 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1168c.2 to i32), i32 35420) to i32*), align 4
  call void @__pseudo_branch(i32 %v3_8a50)
  %v0_8a54 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8a54, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v7_8a54 = load i32, i32* @r0, align 4
  ret i32 %v7_8a54

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i8* @_strcpy(i8* %dest, i8* %src) local_unnamed_addr {
entry:
  %v8_8a60 = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v8_8a60
}

define i32 @_ioctl(i32 %fd, i32 %request, ...) local_unnamed_addr {
entry:
  %v6_8a6c = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v6_8a6c
}

define i32 @_recv(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8a78 = call i32 @recv(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8a78
}

define i32 @_connect(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8a84 = call i32 @connect(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8a84
}

define i32 @_sigemptyset(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
entry:
  %v6_8a90 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v6_8a90
}

define i32* @_memmove(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8a9c = call i32* @memmove(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8a9c
}

define i32 @_getpid() local_unnamed_addr {
entry:
  %v4_8aa8 = call i32 @getpid()
  ret i32 %v4_8aa8
}

define i32 @_prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v9_8ab4 = call i32 @prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  ret i32 %v9_8ab4
}

define i32* @_memcpy(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8ac0 = call i32* @memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8ac0
}

define i32 @_readlink(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
entry:
  %v9_8acc = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v9_8acc
}

define i32* @_malloc(i32 %size) local_unnamed_addr {
entry:
  %v5_8ad8 = call i32* @malloc(i32 %size)
  ret i32* %v5_8ad8
}

define i32 @_sleep(i32 %seconds) local_unnamed_addr {
entry:
  %v5_8ae4 = call i32 @sleep(i32 %seconds)
  ret i32 %v5_8ae4
}

define i32 @_recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v10_8af0 = call i32 @recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v10_8af0
}

define i32 @_socket(i32 %domain, i32 %type, i32 %protocol) local_unnamed_addr {
entry:
  %v7_8afc = call i32 @socket(i32 %domain, i32 %type, i32 %protocol)
  ret i32 %v7_8afc
}

define i32 @_select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout) local_unnamed_addr {
entry:
  %v12_8b08 = call i32 @select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout)
  ret i32 %v12_8b08
}

define %dirent* @_readdir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8b14 = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v6_8b14
}

define i32 @_sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
entry:
  %v7_8b20 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v7_8b20
}

define i32 @_send(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8b2c = call i32 @send(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8b2c
}

; Function Attrs: noreturn
define void @_abort() local_unnamed_addr #0 {
entry:
  call void @abort()
  unreachable
}

define i32 @_accept(i32 %fd, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v9_8b44 = call i32 @accept(i32 %fd, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v9_8b44
}

define i32* @_calloc(i32 %nmemb, i32 %size) local_unnamed_addr {
entry:
  %v6_8b50 = call i32* @calloc(i32 %nmemb, i32 %size)
  ret i32* %v6_8b50
}

define i32 @_write(i32 %fd, i32* %buf, i32 %n) local_unnamed_addr {
entry:
  %v8_8b5c = call i32 @write(i32 %fd, i32* %buf, i32 %n)
  ret i32 %v8_8b5c
}

define i32 @_kill(i32 %pid, i32 %sig) local_unnamed_addr {
entry:
  %v6_8b68 = call i32 @kill(i32 %pid, i32 %sig)
  ret i32 %v6_8b68
}

define i32 @_bind(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8b74 = call i32 @bind(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8b74
}

define i32 @_inet_addr(i8* %cp) local_unnamed_addr {
entry:
  %v6_8b80 = call i32 @inet_addr(i8* %cp)
  ret i32 %v6_8b80
}

define i32 @_setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen) local_unnamed_addr {
entry:
  %v10_8b8c = call i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen)
  ret i32 %v10_8b8c
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8b98 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8b98
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8ba4 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8ba4
}

define i32 @_unlink(i8* %name) local_unnamed_addr {
entry:
  %v6_8bb0 = call i32 @unlink(i8* %name)
  ret i32 %v6_8bb0
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8bbc = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8bbc
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8bc8 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8bc8
}

define i32 @_listen(i32 %fd, i32 %n) local_unnamed_addr {
entry:
  %v6_8bd4 = call i32 @listen(i32 %fd, i32 %n)
  ret i32 %v6_8bd4
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8be0 = call i32 @fork()
  ret i32 %v4_8be0
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8bec = call i32 @__uClibc_main()
  ret i32 %v4_8bec
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8bf8 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8bf8
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8c04 = call i32 @getppid()
  ret i32 %v4_8c04
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8c10 = call i32 @time(i32* %timer)
  ret i32 %v6_8c10
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8c1c = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8c1c
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8c28 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8c28
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8c34 = call i32* @__errno_location()
  ret i32* %v4_8c34
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_atoi(i8* %nptr) local_unnamed_addr {
entry:
  %v6_8c4c = call i32 @atoi(i8* %nptr)
  ret i32 %v6_8c4c
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8c58 = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8c58
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8c64 = call i32 @clock()
  ret i32 %v4_8c64
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8c70 = call i32 @setsid()
  ret i32 %v4_8c70
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8c7c = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8c7c
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8c88 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8c88
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8c94 = call i32 @close(i32 %fd)
  ret i32 %v5_8c94
}

define i32 @_raise(i32 %sig) local_unnamed_addr {
entry:
  %v5_8ca0 = call i32 @raise(i32 %sig)
  ret i32 %v5_8ca0
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8cb8 = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8cb8
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8cc4 = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8cc4
}

define i32 @function_8cc8(i32 %arg1) local_unnamed_addr {
entry:
  %v2_8ccc = load i8, i8* bitcast (i8** @global_var_1a1d4.4 to i8*), align 4
  %v2_8cd0 = icmp eq i8 %v2_8ccc, 0
  br i1 %v2_8cd0, label %bb, label %.thread

bb:                                               ; preds = %entry
  store i8 ptrtoint (i8** @global_var_1a1d5.5 to i8), i8* bitcast (i8** @global_var_1a1d4.4 to i8*), align 4
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v1_8cdc = load i32, i32* @r0, align 4
  ret i32 %v1_8cdc

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_8ce4() local_unnamed_addr {
dec_label_pc_8ce4:
  %v2_8cec = load i32, i32* inttoptr (i32 106532 to i32*), align 4
  %v2_8cf0 = icmp eq i32 %v2_8cec, 0
  br i1 %v2_8cf0, label %dec_label_pc_8d0c, label %dec_label_pc_8cfc

dec_label_pc_8cfc:                                ; preds = %dec_label_pc_8ce4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8d0c

dec_label_pc_8d0c:                                ; preds = %dec_label_pc_8ce4, %dec_label_pc_8cfc
  ret i32 106532

; uselistorder directives
  uselistorder label %dec_label_pc_8d0c, { 1, 0 }
}

define i32 @function_8d18(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8d18:
  %v0_8d18 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8d18, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_8d18
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_8d18, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8d28 = ptrtoint i32* %stack_var_4 to i32
  %v7_8d48 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_e69c.10 to i32), i32 %arg2, i32 %v4_8d28, i32 35380, i32 73072, i32 %arg1, i32 %v4_8d28)
  call void @abort()
  unreachable
}

define i32 @function_8d5c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8d5c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8d5c = icmp eq i32 %arg1, 0
  br i1 %v2_8d5c, label %dec_label_pc_8da4, label %dec_label_pc_8d6c

dec_label_pc_8d6c:                                ; preds = %dec_label_pc_8d5c
  %v0_8d6c = load i32, i32* %r1.global-to-local, align 4
  %v1_8d6c = add i32 %v0_8d6c, 4
  %v2_8d6c = inttoptr i32 %v1_8d6c to i8*
  %v3_8d6c = load i8, i8* %v2_8d6c, align 1
  %v4_8d6c = zext i8 %v3_8d6c to i32
  %v9_8d70 = icmp eq i32 %v4_8d6c, %arg3
  br i1 %v9_8d70, label %dec_label_pc_8db0, label %dec_label_pc_8d94.preheader

dec_label_pc_8d94.preheader:                      ; preds = %dec_label_pc_8d6c
  br label %dec_label_pc_8d94

dec_label_pc_8d84:                                ; preds = %dec_label_pc_8d94
  %v1_8d84 = add i32 %v0_8d8c.in, 12
  %v2_8d84 = inttoptr i32 %v1_8d84 to i8*
  %v3_8d84 = load i8, i8* %v2_8d84, align 1
  %v4_8d84 = zext i8 %v3_8d84 to i32
  %v9_8d88 = icmp eq i32 %v4_8d84, %arg3
  br i1 %v9_8d88, label %dec_label_pc_8db0, label %dec_label_pc_8d94

dec_label_pc_8d94:                                ; preds = %dec_label_pc_8d94.preheader, %dec_label_pc_8d84
  %v0_8d8c.in = phi i32 [ %v0_8d6c, %dec_label_pc_8d94.preheader ], [ %v0_8d8c, %dec_label_pc_8d84 ]
  %v0_8d94 = phi i32 [ 0, %dec_label_pc_8d94.preheader ], [ %v1_8d94, %dec_label_pc_8d84 ]
  %v0_8d8c = add i32 %v0_8d8c.in, 8
  %v1_8d94 = add i32 %v0_8d94, 1
  %v9_8d98 = icmp eq i32 %v1_8d94, %arg1
  store i32 %v0_8d8c, i32* %r1.global-to-local, align 4
  br i1 %v9_8d98, label %dec_label_pc_8da4, label %dec_label_pc_8d84

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8d94, %dec_label_pc_8d5c, %dec_label_pc_8db0
  %v0_8da4 = phi i32 [ %arg4, %dec_label_pc_8d5c ], [ %v2_8db0, %dec_label_pc_8db0 ], [ %arg4, %dec_label_pc_8d94 ]
  ret i32 %v0_8da4

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8d84, %dec_label_pc_8d6c
  %v0_8db0 = phi i32 [ %v0_8d6c, %dec_label_pc_8d6c ], [ %v0_8d8c, %dec_label_pc_8d84 ]
  %v1_8db0 = inttoptr i32 %v0_8db0 to i32*
  %v2_8db0 = load i32, i32* %v1_8db0, align 4
  br label %dec_label_pc_8da4

; uselistorder directives
  uselistorder i32 %v1_8d94, { 1, 0 }
  uselistorder i32 %v0_8d8c, { 1, 0, 2 }
  uselistorder i32 %v0_8d8c.in, { 1, 0 }
  uselistorder i32 %v0_8d6c, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8da4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d94, { 1, 0 }
}

define i32 @function_8db8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8db8:
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_8db8 = load i32, i32* @r4, align 4
  store i32 %v3_8db8, i32* %stack_var_-32, align 4
  %v6_8db8 = load i32, i32* @r5, align 4
  %v9_8db8 = load i32, i32* @r6, align 4
  %v12_8db8 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v0_8dd0 = call i32 @fork()
  %v2_8dd4 = icmp eq i32 %v0_8dd0, -1
  %tmp23 = icmp slt i32 %v0_8dd0, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8db8
  br label %dec_label_pc_8df4

bb24:                                             ; preds = %dec_label_pc_8db8
  %. = zext i1 %v2_8dd4 to i32
  store i32 %., i32* @r5, align 4
  %v2_8dec = icmp eq i1 %v2_8dd4, false
  br i1 %v2_8dec, label %dec_label_pc_8dfc, label %dec_label_pc_8df4

dec_label_pc_8df4:                                ; preds = %.thread2, %bb24
  %v2_8df4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8df4, i32* %r4.global-to-local, align 4
  store i32 %v6_8db8, i32* @r5, align 4
  store i32 %v9_8db8, i32* @r6, align 4
  store i32 %v12_8db8, i32* %r7.global-to-local, align 4
  ret i32 %v0_8dd0

dec_label_pc_8dfc:                                ; preds = %bb24
  %v0_8dfc = call i32 @fork()
  %v2_8e00 = icmp eq i32 %v0_8dfc, -1
  store i32 %v0_8dfc, i32* %r4.global-to-local, align 4
  br i1 %v2_8e00, label %dec_label_pc_8e30, label %dec_label_pc_8e0c

dec_label_pc_8e0c:                                ; preds = %dec_label_pc_8dfc
  %v2_8e0c = icmp eq i32 %v0_8dfc, 0
  br i1 %v2_8e0c, label %dec_label_pc_8e14, label %dec_label_pc_8e38

dec_label_pc_8e14:                                ; preds = %dec_label_pc_8e0c
  %v0_8e14 = load i32, i32* @r6, align 4
  %v1_8e18 = call i32 @sleep(i32 %v0_8e14)
  %v0_8e1c = call i32 @getppid()
  %v2_8e24 = call i32 @kill(i32 %v0_8e1c, i32 9)
  %v0_8e28 = load i32, i32* %r4.global-to-local, align 4
  call void @exit(i32 %v0_8e28)
  unreachable

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8dfc
  %v0_8e30 = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_8e30)
  unreachable

dec_label_pc_8e38:                                ; preds = %dec_label_pc_8e0c
  %v2_8e3c = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_8e3c = zext i8 %v2_8e3c to i32
  %v2_8e40 = icmp eq i8 %v2_8e3c, 0
  br i1 %v2_8e40, label %dec_label_pc_8e84, label %dec_label_pc_8e48

dec_label_pc_8e48:                                ; preds = %dec_label_pc_8e38
  %v2_8e4c = load i32, i32* @global_var_1a1d8.14, align 4
  %v1_8e50 = inttoptr i32 %v2_8e4c to i32*
  %v2_8e50 = load i32, i32* %v1_8e50, align 4
  %v1_8e54 = add i32 %v2_8e50, 4
  %v2_8e54 = inttoptr i32 %v1_8e54 to i8*
  %v3_8e54 = load i8, i8* %v2_8e54, align 1
  %v4_8e54 = zext i8 %v3_8e54 to i32
  %v1_8e58 = load i32, i32* %r7.global-to-local, align 4
  %v9_8e58 = icmp eq i32 %v4_8e54, %v1_8e58
  br i1 %v9_8e58, label %dec_label_pc_8e8c, label %dec_label_pc_8e78.preheader

dec_label_pc_8e78.preheader:                      ; preds = %dec_label_pc_8e48
  %v1_8e5c = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e78

dec_label_pc_8e68:                                ; preds = %dec_label_pc_8e78
  %v4_8e68 = mul i32 %v1_8e78, 4
  %v5_8e68 = add i32 %v4_8e68, %v2_8e4c
  %v6_8e68 = inttoptr i32 %v5_8e68 to i32*
  %v7_8e68 = load i32, i32* %v6_8e68, align 4
  %v1_8e6c = add i32 %v7_8e68, 4
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  %v9_8e70 = icmp eq i32 %v4_8e6c, %v1_8e58
  br i1 %v9_8e70, label %dec_label_pc_8e8c, label %dec_label_pc_8e78

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8e78.preheader, %dec_label_pc_8e68
  %v0_8e78 = phi i32 [ %v1_8e5c, %dec_label_pc_8e78.preheader ], [ %v1_8e78, %dec_label_pc_8e68 ]
  %v1_8e78 = add i32 %v0_8e78, 1
  %v9_8e7c = icmp eq i32 %v1_8e78, %v3_8e3c
  br i1 %v9_8e7c, label %dec_label_pc_8e84, label %dec_label_pc_8e68

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8e78, %dec_label_pc_8e38, %dec_label_pc_8e8c
  call void @exit(i32 0)
  unreachable

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e68, %dec_label_pc_8e48
  %v0_8e9c = phi i32 [ %v2_8e50, %dec_label_pc_8e48 ], [ %v7_8e68, %dec_label_pc_8e68 ]
  %v1_8e9c = inttoptr i32 %v0_8e9c to i32*
  %v2_8e9c = load i32, i32* %v1_8e9c, align 4
  call void @__pseudo_branch(i32 %v2_8e9c)
  br label %dec_label_pc_8e84

; uselistorder directives
  uselistorder i32 %v1_8e78, { 2, 0, 1 }
  uselistorder i1 %v2_8dd4, { 1, 0 }
  uselistorder i32 %v0_8dd0, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8e84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8e78, { 1, 0 }
  uselistorder label %dec_label_pc_8df4, { 1, 0 }
}

define i32 @function_8eb4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8eb4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8eb4 = load i32, i32* @r4, align 4
  %v9_8eb4 = load i32, i32* @r6, align 4
  %v12_8eb4 = load i32, i32* @r7, align 4
  %v18_8eb4 = load i32, i32* @sb, align 4
  %v2_8eb8 = icmp ugt i32 %arg2, 2
  %v7_8eb8 = icmp eq i32 %arg2, 3
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v0_8ec4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8ec4, i32* @r5, align 4
  %v2_8ec8 = xor i1 %v7_8eb8, true
  %v3_8ec8 = and i1 %v2_8eb8, %v2_8ec8
  br i1 %v3_8ec8, label %dec_label_pc_8ed8, label %dec_label_pc_8ecc

dec_label_pc_8ecc:                                ; preds = %dec_label_pc_8f18, %.dec_label_pc_8ecc_crit_edge, %dec_label_pc_8f0c, %dec_label_pc_8efc, %dec_label_pc_8ed8, %dec_label_pc_8eb4, %dec_label_pc_90c4
  %v1_8ed4 = phi i32 [ %v1_8ed4.pre, %.dec_label_pc_8ecc_crit_edge ], [ %v1_8edc, %dec_label_pc_8f18 ], [ %v1_8edc, %dec_label_pc_8f0c ], [ %v1_8edc, %dec_label_pc_8efc ], [ %v1_8edc, %dec_label_pc_8ed8 ], [ %v0_8ec4, %dec_label_pc_8eb4 ], [ ptrtoint (i32* @0 to i32), %dec_label_pc_90c4 ]
  store i32 %v3_8eb4, i32* %r4.global-to-local, align 4
  store i32 %v9_8eb4, i32* @r6, align 4
  store i32 %v12_8eb4, i32* @r7, align 4
  store i32 %v18_8eb4, i32* @sb, align 4
  ret i32 %v1_8ed4

dec_label_pc_8ed8:                                ; preds = %dec_label_pc_8eb4
  %v1_8ed8 = inttoptr i32 %v0_8ec4 to i32*
  %v2_8ed8 = load i32, i32* %v1_8ed8, align 4
  store i32 %v2_8ed8, i32* %r1.global-to-local, align 4
  %v1_8edc = and i32 %v2_8ed8, 16711680
  store i32 %v1_8edc, i32* %r0.global-to-local, align 4
  %v3_8ee0 = udiv i32 %v2_8ed8, 16777216
  %v4_8ee4 = udiv i32 %v1_8edc, 256
  %v5_8ee4 = or i32 %v4_8ee4, %v3_8ee0
  %v1_8ee8 = and i32 %v2_8ed8, 65280
  store i32 %v1_8ee8, i32* %r2.global-to-local, align 4
  %v4_8eec = mul nuw nsw i32 %v1_8ee8, 256
  %v5_8eec = or i32 %v5_8ee4, %v4_8eec
  store i32 %v5_8eec, i32* %r3.global-to-local, align 4
  %v7_8ef0 = icmp eq i32 %arg2, 4
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v5_8ef4 = call i32 @llvm.bswap.i32(i32 %v2_8ed8)
  store i32 %v5_8ef4, i32* %fp.global-to-local, align 4
  br i1 %v7_8ef0, label %dec_label_pc_8ecc, label %dec_label_pc_8efc

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8ed8
  %v1_8efc = add i32 %v0_8ec4, 4
  %v2_8efc = inttoptr i32 %v1_8efc to i8*
  %v3_8efc = load i8, i8* %v2_8efc, align 1
  %v4_8efc = zext i8 %v3_8efc to i32
  store i32 %v4_8efc, i32* %r2.global-to-local, align 4
  %v7_8f00 = icmp eq i32 %arg2, 5
  store i1 %v7_8f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8f00, label %dec_label_pc_8ecc, label %dec_label_pc_8f0c

dec_label_pc_8f0c:                                ; preds = %dec_label_pc_8efc
  %v1_8f0c = add i32 %v0_8ec4, 5
  %v2_8f0c = inttoptr i32 %v1_8f0c to i8*
  %v3_8f0c = load i8, i8* %v2_8f0c, align 1
  %v4_8f0c = zext i8 %v3_8f0c to i32
  store i32 %v4_8f0c, i32* @sb, align 4
  %v2_8f10 = icmp eq i8 %v3_8f0c, 0
  store i1 %v2_8f10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f10, label %dec_label_pc_8ecc, label %dec_label_pc_8f18

dec_label_pc_8f18:                                ; preds = %dec_label_pc_8f0c
  %v2_8f1c = mul nuw nsw i32 %v4_8f0c, 5
  store i32 %v2_8f1c, i32* %r7.global-to-local, align 4
  %v1_8f20 = add i32 %arg2, -6
  store i32 %v1_8f20, i32* %r3.global-to-local, align 4
  %v3_8f24 = icmp ult i32 %v1_8f20, %v2_8f1c
  %v9_8f24 = icmp eq i32 %v1_8f20, %v2_8f1c
  store i1 %v9_8f24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8f24, label %dec_label_pc_8ecc, label %dec_label_pc_8f2c

dec_label_pc_8f2c:                                ; preds = %dec_label_pc_8f18
  store i32 %v4_8f0c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8f20, i32* @r6, align 4
  %v2_8f38 = call i32* @calloc(i32 %v4_8f0c, i32 24)
  %v4_8f38 = ptrtoint i32* %v2_8f38 to i32
  store i32 %v4_8f38, i32* %ip.global-to-local, align 4
  %v0_8f44 = load i32, i32* %r7.global-to-local, align 4
  %v1_8f44 = load i32, i32* %r4.global-to-local, align 4
  %v2_8f44 = sub i32 %v1_8f44, %v0_8f44
  store i32 %v2_8f44, i32* @r7, align 4
  %v0_8f48 = load i32, i32* @r5, align 4
  %v1_8f48 = add i32 %v0_8f48, 11
  store i32 %v1_8f48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f4c

dec_label_pc_8f4c:                                ; preds = %dec_label_pc_8f4c, %dec_label_pc_8f2c
  %v1_8f50 = phi i32 [ %v1_8f7c, %dec_label_pc_8f4c ], [ %v4_8f38, %dec_label_pc_8f2c ]
  %v0_8f4c = phi i32 [ %v1_8f78, %dec_label_pc_8f4c ], [ %v1_8f48, %dec_label_pc_8f2c ]
  %v1_8f4c = add i32 %v0_8f4c, -5
  %v2_8f4c = inttoptr i32 %v1_8f4c to i32*
  %v3_8f4c = load i32, i32* %v2_8f4c, align 4
  store i32 %v3_8f4c, i32* %r1.global-to-local, align 4
  %v2_8f50 = add i32 %v1_8f50, 16
  %v3_8f50 = inttoptr i32 %v2_8f50 to i32*
  store i32 %v3_8f4c, i32* %v3_8f50, align 4
  %v0_8f54 = load i32, i32* @r7, align 4
  %v1_8f54 = add i32 %v0_8f54, -6
  store i32 %v1_8f54, i32* %r3.global-to-local, align 4
  %v0_8f58 = load i32, i32* %r0.global-to-local, align 4
  %v1_8f58 = add i32 %v0_8f58, -1
  %v2_8f58 = inttoptr i32 %v1_8f58 to i8*
  %v3_8f58 = load i8, i8* %v2_8f58, align 1
  %v4_8f58 = zext i8 %v3_8f58 to i32
  store i32 %v4_8f58, i32* %r2.global-to-local, align 4
  %v0_8f5c = load i32, i32* @r6, align 4
  %v1_8f5c = add i32 %v0_8f5c, -5
  store i32 %v1_8f5c, i32* @r6, align 4
  %v9_8f60 = icmp eq i32 %v1_8f5c, %v1_8f54
  store i1 %v9_8f60, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_8f58, i32* @r4, align 4
  %v2_8f6c = load i32, i32* %ip.global-to-local, align 4
  %v3_8f6c = add i32 %v2_8f6c, 20
  %v4_8f6c = inttoptr i32 %v3_8f6c to i8*
  store i8 %v3_8f58, i8* %v4_8f6c, align 1
  %v0_8f70 = load i32, i32* %r1.global-to-local, align 4
  %v1_8f70 = load i32, i32* %ip.global-to-local, align 4
  %v2_8f70 = add i32 %v1_8f70, 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 %v0_8f70, i32* %v3_8f70, align 4
  %v0_8f74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f74 = trunc i32 %v0_8f74 to i16
  %v2_8f74 = load i32, i32* %ip.global-to-local, align 4
  %v3_8f74 = inttoptr i32 %v2_8f74 to i16*
  store i16 %v1_8f74, i16* %v3_8f74, align 2
  %v0_8f78 = load i32, i32* %r0.global-to-local, align 4
  %v1_8f78 = add i32 %v0_8f78, 5
  store i32 %v1_8f78, i32* %r0.global-to-local, align 4
  %v0_8f7c = load i32, i32* %ip.global-to-local, align 4
  %v1_8f7c = add i32 %v0_8f7c, 24
  store i32 %v1_8f7c, i32* %ip.global-to-local, align 4
  %v0_8f80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8f80, label %dec_label_pc_8f84, label %dec_label_pc_8f4c

dec_label_pc_8f84:                                ; preds = %dec_label_pc_8f4c
  %v0_8f84 = load i32, i32* @r6, align 4
  %v2_8f84 = icmp eq i32 %v0_8f84, 0
  store i1 %v2_8f84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f84, label %dec_label_pc_9088, label %dec_label_pc_8f8c

dec_label_pc_8f8c:                                ; preds = %dec_label_pc_8f84
  %v0_8f8c = load i32, i32* @r4, align 4
  %v1_8f8c = inttoptr i32 %v0_8f8c to i8*
  %v2_8f8c = load i8, i8* %v1_8f8c, align 1
  %v3_8f8c = zext i8 %v2_8f8c to i32
  store i32 %v3_8f8c, i32* @r5, align 4
  %v2_8f90 = icmp eq i8 %v2_8f8c, 0
  store i1 %v2_8f90, i1* %cpsr_z.global-to-local, align 1
  %v0_8f94 = load i32, i32* @r7, align 4
  %v1_8f94 = add i32 %v0_8f94, -7
  store i32 %v1_8f94, i32* @r8, align 4
  br i1 %v2_8f90, label %bb, label %dec_label_pc_8fa0

bb:                                               ; preds = %dec_label_pc_8f8c
  store i32 %v3_8f8c, i32* @r6, align 4
  br label %dec_label_pc_9064

dec_label_pc_8fa0:                                ; preds = %dec_label_pc_8f8c
  store i32 %v3_8f8c, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8fa8 = call i32* @calloc(i32 %v3_8f8c, i32 8)
  %v4_8fa8 = ptrtoint i32* %v2_8fa8 to i32
  store i32 %v4_8fa8, i32* %r0.global-to-local, align 4
  %v0_8fac = load i32, i32* @r8, align 4
  %v2_8fac = icmp eq i32 %v0_8fac, 0
  store i1 %v2_8fac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_8fa8, i32* @r6, align 4
  br i1 %v2_8fac, label %dec_label_pc_9088, label %dec_label_pc_8fb8

dec_label_pc_8fb8:                                ; preds = %dec_label_pc_8fa0
  %v0_8fb8 = load i32, i32* @r4, align 4
  %v1_8fb8 = add i32 %v0_8fb8, 1
  %v2_8fb8 = inttoptr i32 %v1_8fb8 to i8*
  %v3_8fb8 = load i8, i8* %v2_8fb8, align 1
  %v0_8fbc = load i32, i32* @r7, align 4
  %v7_8fbc = icmp eq i32 %v0_8fbc, 8
  store i1 %v7_8fbc, i1* %cpsr_z.global-to-local, align 1
  %v3_8fc0 = add i32 %v4_8fa8, 4
  %v4_8fc0 = inttoptr i32 %v3_8fc0 to i8*
  store i8 %v3_8fb8, i8* %v4_8fc0, align 1
  %v0_8fc4 = load i32, i32* @r4, align 4
  %v1_8fc4 = add i32 %v0_8fc4, 1
  store i32 %v1_8fc4, i32* %r3.global-to-local, align 4
  %v0_8fc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8fc8, label %dec_label_pc_9088, label %dec_label_pc_8fcc

dec_label_pc_8fcc:                                ; preds = %dec_label_pc_8fb8
  %v1_8fcc = add i32 %v0_8fc4, 2
  %v2_8fcc = inttoptr i32 %v1_8fcc to i8*
  %v3_8fcc = load i8, i8* %v2_8fcc, align 1
  %v4_8fcc = zext i8 %v3_8fcc to i32
  store i32 %v4_8fcc, i32* @r4, align 4
  %v0_8fd0 = load i32, i32* @r7, align 4
  %v1_8fd0 = add i32 %v0_8fd0, -9
  store i32 %v1_8fd0, i32* @r8, align 4
  %v9_8fd4 = icmp eq i32 %v1_8fd0, %v4_8fcc
  store i1 %v9_8fd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8fcc, i32* %r1.global-to-local, align 4
  %v5_8fdc = icmp slt i32 %v1_8fd0, %v4_8fcc
  br i1 %v5_8fdc, label %dec_label_pc_9088, label %bb35

bb35:                                             ; preds = %dec_label_pc_8fcc
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_8fe07 = add i32 %v0_8fc4, 3
  store i32 %v7_8fe07, i32* @r7, align 4
  %v6_8fe4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8fe4, i32* @sl, align 4
  br label %dec_label_pc_9028

dec_label_pc_8ff4:                                ; preds = %dec_label_pc_9028
  %v0_8ff4 = load i32, i32* @r8, align 4
  %v1_8ff4 = load i32, i32* @r4, align 4
  %v2_8ff4 = sub i32 %v0_8ff4, %v1_8ff4
  store i32 %v2_8ff4, i32* %r2.global-to-local, align 4
  %v9_8ff4 = icmp eq i32 %v0_8ff4, %v1_8ff4
  store i1 %v9_8ff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8ff4, label %dec_label_pc_9088, label %dec_label_pc_8ffc

dec_label_pc_8ffc:                                ; preds = %dec_label_pc_8ff4
  %v1_8ffc = load i32, i32* @r7, align 4
  %v2_8ffc = add i32 %v1_8ffc, %v1_8ff4
  %v3_8ffc = inttoptr i32 %v2_8ffc to i8*
  %v4_8ffc = load i8, i8* %v3_8ffc, align 1
  store i32 %v2_8ffc, i32* %r0.global-to-local, align 4
  %v1_9004 = add i32 %v2_8ff4, -1
  store i32 %v1_9004, i32* %r2.global-to-local, align 4
  %v7_9004 = icmp eq i32 %v2_8ff4, 1
  store i1 %v7_9004, i1* %cpsr_z.global-to-local, align 1
  %v3_9008 = add i32 %v2_905c, 4
  %v4_9008 = inttoptr i32 %v3_9008 to i8*
  store i8 %v4_8ffc, i8* %v4_9008, align 1
  %v0_900c = load i32, i32* %r0.global-to-local, align 4
  %v1_900c = add i32 %v0_900c, 1
  store i32 %v1_900c, i32* %r3.global-to-local, align 4
  %v0_9010 = load i32, i32* %r2.global-to-local, align 4
  %v1_9010 = add i32 %v0_9010, -1
  store i32 %v1_9010, i32* @r8, align 4
  %v1_9014 = add i32 %v0_900c, 2
  store i32 %v1_9014, i32* @r7, align 4
  %v0_9018 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9018, label %dec_label_pc_9088, label %dec_label_pc_901c

dec_label_pc_901c:                                ; preds = %dec_label_pc_8ffc
  %v2_901c = inttoptr i32 %v1_900c to i8*
  %v3_901c = load i8, i8* %v2_901c, align 1
  %v4_901c = zext i8 %v3_901c to i32
  store i32 %v4_901c, i32* @r4, align 4
  %v2_9020 = sub i32 %v1_9010, %v4_901c
  %tmp36 = sub i32 0, %v2_9020
  %v6_9020 = and i32 %v1_9010, %tmp36
  %v7_9020 = icmp slt i32 %v6_9020, 0
  %v8_9020 = icmp slt i32 %v2_9020, 0
  %v9_9020 = icmp eq i32 %v1_9010, %v4_901c
  store i1 %v9_9020, i1* %cpsr_z.global-to-local, align 1
  %v2_9024 = xor i1 %v8_9020, %v7_9020
  br i1 %v2_9024, label %dec_label_pc_9088, label %dec_label_pc_9028

dec_label_pc_9028:                                ; preds = %bb35, %dec_label_pc_901c
  %v0_902c = phi i32 [ %v4_8fcc, %bb35 ], [ %v4_901c, %dec_label_pc_901c ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_903c, %dec_label_pc_901c ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_902c = add nuw nsw i32 %v0_902c, 1
  store i32 %v1_902c, i32* %r0.global-to-local, align 4
  %v2_9030 = call i32* @calloc(i32 %v1_902c, i32 1)
  %v3_9030 = ptrtoint i32* %v2_9030 to i32
  store i32 %v3_9030, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_9038 = load i32, i32* @sl, align 4
  %v2_9038 = inttoptr i32 %v1_9038 to i32*
  store i32 %v3_9030, i32* %v2_9038, align 4
  %v0_903c = load i32, i32* %r3.global-to-local, align 4
  %v1_903c = add i32 %v0_903c, 1
  store i32 %v1_903c, i32* %r3.global-to-local, align 4
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* %r2.global-to-local, align 4
  %v0_9044 = load i32, i32* @r7, align 4
  store i32 %v0_9044, i32* %r1.global-to-local, align 4
  %v3_904c = call i32 @function_1175c(i32 %v3_9030, i32 %v0_9044, i32 %v0_9040)
  store i32 %v3_904c, i32* %r0.global-to-local, align 4
  store i32 %v1_903c, i32* %r2.global-to-local, align 4
  %v3_9054 = mul i32 %v1_903c, 8
  store i32 %v3_9054, i32* %r3.global-to-local, align 4
  %v1_9058 = load i32, i32* @r5, align 4
  %v9_9058 = icmp eq i32 %v1_903c, %v1_9058
  store i1 %v9_9058, i1* %cpsr_z.global-to-local, align 1
  %v0_905c = load i32, i32* @r6, align 4
  %v2_905c = add i32 %v0_905c, %v3_9054
  store i32 %v2_905c, i32* @sl, align 4
  br i1 %v9_9058, label %dec_label_pc_9064, label %dec_label_pc_8ff4

dec_label_pc_9064:                                ; preds = %dec_label_pc_9028, %bb
  %v0_9064 = call i32* @__errno_location()
  store i32 0, i32* %v0_9064, align 4
  store i32 %v4_8efc, i32* %r1.global-to-local, align 4
  %v0_9074 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9074, i32* %r0.global-to-local, align 4
  %v0_9078 = load i32, i32* @sb, align 4
  store i32 %v0_9078, i32* %r2.global-to-local, align 4
  store i32 %v4_8f38, i32* %r3.global-to-local, align 4
  %v2_9080 = load i32, i32* @r5, align 4
  %v5_9080 = load i32, i32* @r6, align 4
  %v6_9084 = trunc i32 %v2_9080 to i8
  %v7_9084 = call i32 @function_8db8(i32 %v0_9074, i32 %v4_8efc, i32 %v0_9078, i32 %v4_8f38, i8 %v6_9084, i32 %v5_9080)
  store i32 %v7_9084, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9088

dec_label_pc_9088:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8ffc, %dec_label_pc_8ff4, %dec_label_pc_8fcc, %dec_label_pc_8fb8, %dec_label_pc_8fa0, %dec_label_pc_8f84, %dec_label_pc_9064
  store i32 %v4_8f38, i32* %r3.global-to-local, align 4
  %v2_908c = icmp eq i32* %v2_8f38, null
  store i1 %v2_908c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_908c, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_9088
  store i32 %v4_8f38, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_9088, %bb37
  %v1_9094 = xor i1 %v2_908c, true
  call void @__pseudo_cond_branch(i1 %v1_9094, i32 ptrtoint (i32* @global_var_8ca4.16 to i32))
  %v0_9098 = load i32, i32* @r6, align 4
  %v2_9098 = icmp eq i32 %v0_9098, 0
  store i1 %v2_9098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9098, label %.dec_label_pc_8ecc_crit_edge, label %dec_label_pc_90a0

.dec_label_pc_8ecc_crit_edge:                     ; preds = %bb38
  %v1_8ed4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ecc

dec_label_pc_90a0:                                ; preds = %bb38
  %v0_90a0 = load i32, i32* @r5, align 4
  %v2_90a0 = icmp eq i32 %v0_90a0, 0
  store i1 %v2_90a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90a0, label %dec_label_pc_90c4, label %dec_label_pc_90a8

dec_label_pc_90a8:                                ; preds = %dec_label_pc_90a0
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_90ac

dec_label_pc_90ac:                                ; preds = %dec_label_pc_90ac, %dec_label_pc_90a8
  %v0_90b4 = phi i32 [ 0, %dec_label_pc_90a8 ], [ %v1_90b4, %dec_label_pc_90ac ]
  %v0_90ac = phi i32 [ %v0_9098, %dec_label_pc_90a8 ], [ %v0_90c4.pre, %dec_label_pc_90ac ]
  %v4_90ac = mul i32 %v0_90b4, 8
  %v5_90ac = add i32 %v4_90ac, %v0_90ac
  %v6_90ac = inttoptr i32 %v5_90ac to i32*
  %v7_90ac = load i32, i32* %v6_90ac, align 4
  store i32 %v7_90ac, i32* %r0.global-to-local, align 4
  %v2_90b0 = icmp eq i32 %v7_90ac, 0
  store i1 %v2_90b0, i1* %cpsr_z.global-to-local, align 1
  %v1_90b4 = add i32 %v0_90b4, 1
  store i32 %v1_90b4, i32* %r4.global-to-local, align 4
  %v1_90b8 = xor i1 %v2_90b0, true
  call void @__pseudo_cond_branch(i1 %v1_90b8, i32 ptrtoint (i32* @global_var_8ca4.16 to i32))
  %v0_90bc = load i32, i32* @r5, align 4
  %v9_90bc = icmp eq i32 %v0_90bc, %v1_90b4
  store i1 %v9_90bc, i1* %cpsr_z.global-to-local, align 1
  %v0_90c4.pre = load i32, i32* @r6, align 4
  br i1 %v9_90bc, label %dec_label_pc_90c4, label %dec_label_pc_90ac

dec_label_pc_90c4:                                ; preds = %dec_label_pc_90ac, %dec_label_pc_90a0
  %v0_90c4 = phi i32 [ %v0_9098, %dec_label_pc_90a0 ], [ %v0_90c4.pre, %dec_label_pc_90ac ]
  store i32 %v0_90c4, i32* %r0.global-to-local, align 4
  %v1_90c8 = inttoptr i32 %v0_90c4 to i32*
  call void @free(i32* %v1_90c8)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ecc

; uselistorder directives
  uselistorder i32 %v0_90c4, { 1, 0 }
  uselistorder i32 %v1_90b4, { 0, 2, 1 }
  uselistorder i1 %v2_908c, { 0, 2, 1 }
  uselistorder i32 %v2_905c, { 1, 0 }
  uselistorder i32 %v3_9054, { 1, 0 }
  uselistorder i32 %v1_903c, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v3_9030, { 0, 2, 1 }
  uselistorder i32 %v2_9020, { 1, 0 }
  uselistorder i32 %v4_901c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9010, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8f8c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8f7c, { 1, 0 }
  uselistorder i32 %v1_8f78, { 1, 0 }
  uselistorder i32 %v4_8f38, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32 %v4_8f0c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8edc, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_8ed8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8ec4, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 21, 4, 22, 6, 9, 11, 10, 7, 8, 17, 18, 12, 13, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_9088, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_9028, { 1, 0 }
  uselistorder label %dec_label_pc_8ecc, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_90d0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_90d0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_90d0 = icmp eq i32 %arg1, 0
  br i1 %v2_90d0, label %dec_label_pc_9118, label %dec_label_pc_90e0

dec_label_pc_90e0:                                ; preds = %dec_label_pc_90d0
  %v0_90e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_90e0 = add i32 %v0_90e0, 4
  %v2_90e0 = inttoptr i32 %v1_90e0 to i8*
  %v3_90e0 = load i8, i8* %v2_90e0, align 1
  %v4_90e0 = zext i8 %v3_90e0 to i32
  %v9_90e4 = icmp eq i32 %v4_90e0, %arg3
  br i1 %v9_90e4, label %dec_label_pc_9124, label %dec_label_pc_9108.preheader

dec_label_pc_9108.preheader:                      ; preds = %dec_label_pc_90e0
  br label %dec_label_pc_9108

dec_label_pc_90f8:                                ; preds = %dec_label_pc_9108
  %v1_90f8 = add i32 %v0_9100.in, 12
  %v2_90f8 = inttoptr i32 %v1_90f8 to i8*
  %v3_90f8 = load i8, i8* %v2_90f8, align 1
  %v4_90f8 = zext i8 %v3_90f8 to i32
  %v9_90fc = icmp eq i32 %v4_90f8, %arg3
  br i1 %v9_90fc, label %dec_label_pc_9124, label %dec_label_pc_9108

dec_label_pc_9108:                                ; preds = %dec_label_pc_9108.preheader, %dec_label_pc_90f8
  %v0_9100.in = phi i32 [ %v0_90e0, %dec_label_pc_9108.preheader ], [ %v0_9100, %dec_label_pc_90f8 ]
  %v0_9108 = phi i32 [ 0, %dec_label_pc_9108.preheader ], [ %v1_9108, %dec_label_pc_90f8 ]
  %v0_9100 = add i32 %v0_9100.in, 8
  %v1_9108 = add i32 %v0_9108, 1
  %v9_910c = icmp eq i32 %v1_9108, %arg1
  store i32 %v0_9100, i32* %r1.global-to-local, align 4
  br i1 %v9_910c, label %dec_label_pc_9118, label %dec_label_pc_90f8

dec_label_pc_9118:                                ; preds = %dec_label_pc_9108, %dec_label_pc_9124, %dec_label_pc_90d0, %dec_label_pc_9130
  %v0_9118 = phi i32 [ %arg4, %dec_label_pc_9124 ], [ %arg4, %dec_label_pc_90d0 ], [ %v3_9130, %dec_label_pc_9130 ], [ %arg4, %dec_label_pc_9108 ]
  ret i32 %v0_9118

dec_label_pc_9124:                                ; preds = %dec_label_pc_90f8, %dec_label_pc_90e0
  %v0_9124 = phi i32 [ %v0_90e0, %dec_label_pc_90e0 ], [ %v0_9100, %dec_label_pc_90f8 ]
  %v1_9124 = inttoptr i32 %v0_9124 to i32*
  %v2_9124 = load i32, i32* %v1_9124, align 4
  %v3_9128 = icmp eq i32 %v2_9124, 0
  br i1 %v3_9128, label %dec_label_pc_9118, label %dec_label_pc_9130

dec_label_pc_9130:                                ; preds = %dec_label_pc_9124
  %v3_9124 = inttoptr i32 %v2_9124 to i8*
  %v3_9130 = call i32 @inet_addr(i8* %v3_9124)
  br label %dec_label_pc_9118

; uselistorder directives
  uselistorder i32 %v2_9124, { 1, 0 }
  uselistorder i32 %v1_9108, { 1, 0 }
  uselistorder i32 %v0_9100, { 1, 0, 2 }
  uselistorder i32 %v0_9100.in, { 1, 0 }
  uselistorder i32 %v0_90e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_9118, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_9108, { 1, 0 }
}

define i32 @function_913c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_913c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_913c = icmp eq i32 %arg1, 0
  %v3_9140 = load i32, i32* @r4, align 4
  store i32 %v3_9140, i32* %stack_var_-8, align 4
  %v6_9140 = load i32, i32* @lr, align 4
  br i1 %v2_913c, label %dec_label_pc_9184, label %dec_label_pc_914c

dec_label_pc_914c:                                ; preds = %dec_label_pc_913c
  %v0_914c = load i32, i32* %r1.global-to-local, align 4
  %v1_914c = add i32 %v0_914c, 4
  %v2_914c = inttoptr i32 %v1_914c to i8*
  %v3_914c = load i8, i8* %v2_914c, align 1
  %v4_914c = zext i8 %v3_914c to i32
  %v9_9150 = icmp eq i32 %v4_914c, %arg3
  br i1 %v9_9150, label %dec_label_pc_9190, label %dec_label_pc_9174.preheader

dec_label_pc_9174.preheader:                      ; preds = %dec_label_pc_914c
  br label %dec_label_pc_9174

dec_label_pc_9164:                                ; preds = %dec_label_pc_9174
  %v1_9164 = add i32 %v0_916c.in, 12
  %v2_9164 = inttoptr i32 %v1_9164 to i8*
  %v3_9164 = load i8, i8* %v2_9164, align 1
  %v4_9164 = zext i8 %v3_9164 to i32
  %v9_9168 = icmp eq i32 %v4_9164, %arg3
  br i1 %v9_9168, label %dec_label_pc_9190, label %dec_label_pc_9174

dec_label_pc_9174:                                ; preds = %dec_label_pc_9174.preheader, %dec_label_pc_9164
  %v0_916c.in = phi i32 [ %v0_914c, %dec_label_pc_9174.preheader ], [ %v0_916c, %dec_label_pc_9164 ]
  %v0_9174 = phi i32 [ 0, %dec_label_pc_9174.preheader ], [ %v1_9174, %dec_label_pc_9164 ]
  %v0_916c = add i32 %v0_916c.in, 8
  %v1_9174 = add i32 %v0_9174, 1
  store i32 %v1_9174, i32* @lr, align 4
  %v9_9178 = icmp eq i32 %v1_9174, %arg1
  store i32 %v0_916c, i32* %r1.global-to-local, align 4
  br i1 %v9_9178, label %dec_label_pc_9184, label %dec_label_pc_9164

dec_label_pc_9184:                                ; preds = %dec_label_pc_9174, %dec_label_pc_9190, %dec_label_pc_913c, %dec_label_pc_919c
  %v2_9188 = phi i32 [ %v3_9140, %dec_label_pc_9190 ], [ %v3_9140, %dec_label_pc_913c ], [ %v2_9188.pre, %dec_label_pc_919c ], [ %v3_9140, %dec_label_pc_9174 ]
  %v0_9184 = phi i32 [ %arg4, %dec_label_pc_9190 ], [ %arg4, %dec_label_pc_913c ], [ %v3_91a0, %dec_label_pc_919c ], [ %arg4, %dec_label_pc_9174 ]
  store i32 %v2_9188, i32* @r4, align 4
  store i32 %v6_9140, i32* @lr, align 4
  ret i32 %v0_9184

dec_label_pc_9190:                                ; preds = %dec_label_pc_9164, %dec_label_pc_914c
  %v0_9190 = phi i32 [ %v0_914c, %dec_label_pc_914c ], [ %v0_916c, %dec_label_pc_9164 ]
  %v1_9190 = inttoptr i32 %v0_9190 to i32*
  %v2_9190 = load i32, i32* %v1_9190, align 4
  %v2_9194 = icmp eq i32 %v2_9190, 0
  br i1 %v2_9194, label %dec_label_pc_9184, label %dec_label_pc_919c

dec_label_pc_919c:                                ; preds = %dec_label_pc_9190
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_91a0 = inttoptr i32 %v2_9190 to i8*
  %v3_91a0 = call i32 @function_11810(i8* %v2_91a0, i32 10)
  %v2_9188.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_9184

; uselistorder directives
  uselistorder i32 %v1_9174, { 1, 2, 0 }
  uselistorder i32 %v0_916c, { 1, 0, 2 }
  uselistorder i32 %v0_916c.in, { 1, 0 }
  uselistorder i32 %v0_914c, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_9184, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_9174, { 1, 0 }
}

define i32 @function_91ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_91ac:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_91ac = load i32, i32* @r4, align 4
  store i32 %v3_91ac, i32* %stack_var_-24, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_91b8 = call i32* @calloc(i32 1, i32 8)
  %v3_91b8 = ptrtoint i32* %v2_91b8 to i32
  store i32 ptrtoint (i8** @global_var_1a1d5.5 to i32), i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1d8.14 to i32), i32* %r6.global-to-local, align 4
  store i32 50228, i32* %r2.global-to-local, align 4
  store i32 %v3_91b8, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1a1d6.20 to i32), i32* %r1.global-to-local, align 4
  %v2_91d8 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 50228, i32* %v2_91b8, align 4
  %v0_91e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_91e0 = trunc i32 %v0_91e0 to i8
  %v2_91e0 = load i32, i32* %r5.global-to-local, align 4
  %v3_91e0 = add i32 %v2_91e0, 4
  %v4_91e0 = inttoptr i32 %v3_91e0 to i8*
  store i8 %v1_91e0, i8* %v4_91e0, align 1
  %v0_91e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_91e4 = mul i32 %v0_91e4, 4
  store i32 %v3_91e4, i32* %r1.global-to-local, align 4
  %v4_91e8 = inttoptr i32 %v2_91d8 to i32*
  %v5_91e8 = call i32* @realloc(i32* %v4_91e8, i32 %v3_91e4)
  %v6_91e8 = ptrtoint i32* %v5_91e8 to i32
  %v2_91ec = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_91ec = zext i8 %v2_91ec to i32
  store i32 %v6_91e8, i32* %r2.global-to-local, align 4
  %v0_91f4 = load i32, i32* %r5.global-to-local, align 4
  %v5_91f4 = mul nuw nsw i32 %v3_91ec, 4
  %v6_91f4 = add i32 %v5_91f4, %v6_91e8
  %v7_91f4 = inttoptr i32 %v6_91f4 to i32*
  store i32 %v0_91f4, i32* %v7_91f4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1a1d6.20 to i32), i32* %r3.global-to-local, align 4
  %v0_9204 = load i32, i32* %r2.global-to-local, align 4
  %v1_9204 = load i32, i32* %r6.global-to-local, align 4
  %v2_9204 = inttoptr i32 %v1_9204 to i32*
  store i32 %v0_9204, i32* %v2_9204, align 4
  %v0_9208 = load i32, i32* %r3.global-to-local, align 4
  %v1_9208 = trunc i32 %v0_9208 to i8
  %v2_9208 = load i32, i32* %r4.global-to-local, align 4
  %v3_9208 = inttoptr i32 %v2_9208 to i8*
  store i8 %v1_9208, i8* %v3_9208, align 1
  %v2_920c = call i32* @calloc(i32 1, i32 8)
  %v3_920c = ptrtoint i32* %v2_920c to i32
  store i32 ptrtoint (i32* @global_var_c920.22 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  store i32 %v3_920c, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1a1d6.20 to i32), i32* %r1.global-to-local, align 4
  %v2_9224 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_c920.22 to i32), i32* %v2_920c, align 4
  %v0_922c = load i32, i32* %r8.global-to-local, align 4
  %v1_922c = trunc i32 %v0_922c to i8
  %v2_922c = load i32, i32* %r5.global-to-local, align 4
  %v3_922c = add i32 %v2_922c, 4
  %v4_922c = inttoptr i32 %v3_922c to i8*
  store i8 %v1_922c, i8* %v4_922c, align 1
  %v0_9230 = load i32, i32* %r1.global-to-local, align 4
  %v3_9230 = mul i32 %v0_9230, 4
  store i32 %v3_9230, i32* %r1.global-to-local, align 4
  %v3_9234 = inttoptr i32 %v2_9224 to i32*
  %v4_9234 = call i32* @realloc(i32* %v3_9234, i32 %v3_9230)
  %v5_9234 = ptrtoint i32* %v4_9234 to i32
  %v2_9238 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9238 = zext i8 %v2_9238 to i32
  store i32 %v3_9238, i32* %r3.global-to-local, align 4
  store i32 %v5_9234, i32* %r2.global-to-local, align 4
  %v0_9240 = load i32, i32* %r5.global-to-local, align 4
  %v5_9240 = mul nuw nsw i32 %v3_9238, 4
  %v6_9240 = add i32 %v5_9240, %v5_9234
  %v7_9240 = inttoptr i32 %v6_9240 to i32*
  store i32 %v0_9240, i32* %v7_9240, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_9248 = load i32, i32* %r3.global-to-local, align 4
  %v1_9248 = load i32, i32* %r8.global-to-local, align 4
  %v2_9248 = add i32 %v1_9248, %v0_9248
  store i32 %v2_9248, i32* %r3.global-to-local, align 4
  %v1_9250 = trunc i32 %v2_9248 to i8
  %v2_9250 = load i32, i32* %r4.global-to-local, align 4
  %v3_9250 = inttoptr i32 %v2_9250 to i8*
  store i8 %v1_9250, i8* %v3_9250, align 1
  %v0_9254 = load i32, i32* %r2.global-to-local, align 4
  %v1_9254 = load i32, i32* %r6.global-to-local, align 4
  %v2_9254 = inttoptr i32 %v1_9254 to i32*
  store i32 %v0_9254, i32* %v2_9254, align 4
  %v2_9258 = call i32* @calloc(i32 %v1_9248, i32 8)
  %v4_9258 = ptrtoint i32* %v2_9258 to i32
  %v2_925c = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_925c = zext i8 %v2_925c to i32
  store i32 ptrtoint (i32* @global_var_cd58.24 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9258, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_926c = load i32, i32* %r8.global-to-local, align 4
  %v2_926c = add i32 %v1_926c, %v3_925c
  store i32 %v2_926c, i32* %r1.global-to-local, align 4
  %v2_9270 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_cd58.24 to i32), i32* %v2_9258, align 4
  %v0_9278 = load i32, i32* %r3.global-to-local, align 4
  %v1_9278 = trunc i32 %v0_9278 to i8
  %v2_9278 = load i32, i32* %r5.global-to-local, align 4
  %v3_9278 = add i32 %v2_9278, 4
  %v4_9278 = inttoptr i32 %v3_9278 to i8*
  store i8 %v1_9278, i8* %v4_9278, align 1
  %v0_927c = load i32, i32* %r1.global-to-local, align 4
  %v3_927c = mul i32 %v0_927c, 4
  store i32 %v3_927c, i32* %r1.global-to-local, align 4
  %v4_9280 = inttoptr i32 %v2_9270 to i32*
  %v5_9280 = call i32* @realloc(i32* %v4_9280, i32 %v3_927c)
  %v6_9280 = ptrtoint i32* %v5_9280 to i32
  %v2_9284 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9284 = zext i8 %v2_9284 to i32
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 %v6_9280, i32* %r2.global-to-local, align 4
  %v0_928c = load i32, i32* %r5.global-to-local, align 4
  %v5_928c = mul nuw nsw i32 %v3_9284, 4
  %v6_928c = add i32 %v5_928c, %v6_9280
  %v7_928c = inttoptr i32 %v6_928c to i32*
  store i32 %v0_928c, i32* %v7_928c, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_9294 = load i32, i32* %r3.global-to-local, align 4
  %v1_9294 = load i32, i32* %r8.global-to-local, align 4
  %v2_9294 = add i32 %v1_9294, %v0_9294
  store i32 %v2_9294, i32* %r3.global-to-local, align 4
  %v0_929c = load i32, i32* %r2.global-to-local, align 4
  %v1_929c = load i32, i32* %r6.global-to-local, align 4
  %v2_929c = inttoptr i32 %v1_929c to i32*
  store i32 %v0_929c, i32* %v2_929c, align 4
  %v0_92a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_92a0 = trunc i32 %v0_92a0 to i8
  %v2_92a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_92a0 = inttoptr i32 %v2_92a0 to i8*
  store i8 %v1_92a0, i8* %v3_92a0, align 1
  %v2_92a4 = call i32* @calloc(i32 %v1_9294, i32 8)
  %v3_92a4 = ptrtoint i32* %v2_92a4 to i32
  %v2_92a8 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_92a8 = zext i8 %v2_92a8 to i32
  store i32 ptrtoint (i32* @global_var_c194.26 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v3_92a4, i32* %r5.global-to-local, align 4
  %v1_92b8 = load i32, i32* %r8.global-to-local, align 4
  %v2_92b8 = add i32 %v1_92b8, %v3_92a8
  store i32 %v2_92b8, i32* %r1.global-to-local, align 4
  %v2_92bc = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_c194.26 to i32), i32* %v2_92a4, align 4
  %v0_92c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_92c4 = trunc i32 %v0_92c4 to i8
  %v2_92c4 = load i32, i32* %r5.global-to-local, align 4
  %v3_92c4 = add i32 %v2_92c4, 4
  %v4_92c4 = inttoptr i32 %v3_92c4 to i8*
  store i8 %v1_92c4, i8* %v4_92c4, align 1
  %v0_92c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_92c8 = mul i32 %v0_92c8, 4
  store i32 %v3_92c8, i32* %r1.global-to-local, align 4
  %v3_92cc = inttoptr i32 %v2_92bc to i32*
  %v4_92cc = call i32* @realloc(i32* %v3_92cc, i32 %v3_92c8)
  %v5_92cc = ptrtoint i32* %v4_92cc to i32
  %v2_92d0 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_92d0 = zext i8 %v2_92d0 to i32
  store i32 %v3_92d0, i32* %r3.global-to-local, align 4
  store i32 %v5_92cc, i32* %r2.global-to-local, align 4
  %v0_92d8 = load i32, i32* %r5.global-to-local, align 4
  %v5_92d8 = mul nuw nsw i32 %v3_92d0, 4
  %v6_92d8 = add i32 %v5_92d8, %v5_92cc
  %v7_92d8 = inttoptr i32 %v6_92d8 to i32*
  store i32 %v0_92d8, i32* %v7_92d8, align 4
  %v0_92dc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_92dc, i32* %r1.global-to-local, align 4
  %v0_92e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_92e0 = load i32, i32* %r8.global-to-local, align 4
  %v2_92e0 = add i32 %v1_92e0, %v0_92e0
  store i32 %v2_92e0, i32* %r3.global-to-local, align 4
  %v1_92e8 = trunc i32 %v2_92e0 to i8
  %v2_92e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92e8 = inttoptr i32 %v2_92e8 to i8*
  store i8 %v1_92e8, i8* %v3_92e8, align 1
  %v0_92ec = load i32, i32* %r2.global-to-local, align 4
  %v1_92ec = load i32, i32* %r6.global-to-local, align 4
  %v2_92ec = inttoptr i32 %v1_92ec to i32*
  store i32 %v0_92ec, i32* %v2_92ec, align 4
  %v2_92f0 = call i32* @calloc(i32 %v1_92e0, i32 %v0_92dc)
  %v4_92f0 = ptrtoint i32* %v2_92f0 to i32
  %v2_92f4 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_92f4 = zext i8 %v2_92f4 to i32
  store i32 ptrtoint (i32* @global_var_bae8.28 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_92f0, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_9304 = load i32, i32* %r8.global-to-local, align 4
  %v2_9304 = add i32 %v1_9304, %v3_92f4
  store i32 %v2_9304, i32* %r1.global-to-local, align 4
  %v2_9308 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_bae8.28 to i32), i32* %v2_92f0, align 4
  %v0_9310 = load i32, i32* %r3.global-to-local, align 4
  %v1_9310 = trunc i32 %v0_9310 to i8
  %v2_9310 = load i32, i32* %r5.global-to-local, align 4
  %v3_9310 = add i32 %v2_9310, 4
  %v4_9310 = inttoptr i32 %v3_9310 to i8*
  store i8 %v1_9310, i8* %v4_9310, align 1
  %v0_9314 = load i32, i32* %r1.global-to-local, align 4
  %v3_9314 = mul i32 %v0_9314, 4
  store i32 %v3_9314, i32* %r1.global-to-local, align 4
  %v4_9318 = inttoptr i32 %v2_9308 to i32*
  %v5_9318 = call i32* @realloc(i32* %v4_9318, i32 %v3_9314)
  %v6_9318 = ptrtoint i32* %v5_9318 to i32
  %v2_931c = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_931c = zext i8 %v2_931c to i32
  store i32 %v3_931c, i32* %r3.global-to-local, align 4
  store i32 %v6_9318, i32* %r2.global-to-local, align 4
  %v0_9324 = load i32, i32* %r5.global-to-local, align 4
  %v5_9324 = mul nuw nsw i32 %v3_931c, 4
  %v6_9324 = add i32 %v5_9324, %v6_9318
  %v7_9324 = inttoptr i32 %v6_9324 to i32*
  store i32 %v0_9324, i32* %v7_9324, align 4
  %v0_9328 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9328, i32* %r1.global-to-local, align 4
  %v0_932c = load i32, i32* %r3.global-to-local, align 4
  %v1_932c = load i32, i32* %r8.global-to-local, align 4
  %v2_932c = add i32 %v1_932c, %v0_932c
  store i32 %v2_932c, i32* %r3.global-to-local, align 4
  %v1_9334 = trunc i32 %v2_932c to i8
  %v2_9334 = load i32, i32* %r4.global-to-local, align 4
  %v3_9334 = inttoptr i32 %v2_9334 to i8*
  store i8 %v1_9334, i8* %v3_9334, align 1
  %v0_9338 = load i32, i32* %r2.global-to-local, align 4
  %v1_9338 = load i32, i32* %r6.global-to-local, align 4
  %v2_9338 = inttoptr i32 %v1_9338 to i32*
  store i32 %v0_9338, i32* %v2_9338, align 4
  %v2_933c = call i32* @calloc(i32 %v1_932c, i32 %v0_9328)
  %v4_933c = ptrtoint i32* %v2_933c to i32
  %v2_9340 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9340 = zext i8 %v2_9340 to i32
  store i32 ptrtoint (i32* @global_var_b3f0.30 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_933c, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_9350 = load i32, i32* %r8.global-to-local, align 4
  %v2_9350 = add i32 %v1_9350, %v3_9340
  store i32 %v2_9350, i32* %r1.global-to-local, align 4
  %v2_9354 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_b3f0.30 to i32), i32* %v2_933c, align 4
  %v0_935c = load i32, i32* %r3.global-to-local, align 4
  %v1_935c = trunc i32 %v0_935c to i8
  %v2_935c = load i32, i32* %r5.global-to-local, align 4
  %v3_935c = add i32 %v2_935c, 4
  %v4_935c = inttoptr i32 %v3_935c to i8*
  store i8 %v1_935c, i8* %v4_935c, align 1
  %v0_9360 = load i32, i32* %r1.global-to-local, align 4
  %v3_9360 = mul i32 %v0_9360, 4
  store i32 %v3_9360, i32* %r1.global-to-local, align 4
  %v4_9364 = inttoptr i32 %v2_9354 to i32*
  %v5_9364 = call i32* @realloc(i32* %v4_9364, i32 %v3_9360)
  %v6_9364 = ptrtoint i32* %v5_9364 to i32
  %v2_9368 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9368 = zext i8 %v2_9368 to i32
  store i32 %v3_9368, i32* %r3.global-to-local, align 4
  store i32 %v6_9364, i32* %r2.global-to-local, align 4
  %v0_9370 = load i32, i32* %r5.global-to-local, align 4
  %v5_9370 = mul nuw nsw i32 %v3_9368, 4
  %v6_9370 = add i32 %v5_9370, %v6_9364
  %v7_9370 = inttoptr i32 %v6_9370 to i32*
  store i32 %v0_9370, i32* %v7_9370, align 4
  %v0_9374 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9374, i32* %r1.global-to-local, align 4
  %v0_9378 = load i32, i32* %r3.global-to-local, align 4
  %v1_9378 = load i32, i32* %r8.global-to-local, align 4
  %v2_9378 = add i32 %v1_9378, %v0_9378
  store i32 %v2_9378, i32* %r3.global-to-local, align 4
  %v1_9380 = trunc i32 %v2_9378 to i8
  %v2_9380 = load i32, i32* %r4.global-to-local, align 4
  %v3_9380 = inttoptr i32 %v2_9380 to i8*
  store i8 %v1_9380, i8* %v3_9380, align 1
  %v0_9384 = load i32, i32* %r2.global-to-local, align 4
  %v1_9384 = load i32, i32* %r6.global-to-local, align 4
  %v2_9384 = inttoptr i32 %v1_9384 to i32*
  store i32 %v0_9384, i32* %v2_9384, align 4
  %v2_9388 = call i32* @calloc(i32 %v1_9378, i32 %v0_9374)
  %v4_9388 = ptrtoint i32* %v2_9388 to i32
  %v2_938c = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_938c = zext i8 %v2_938c to i32
  store i32 ptrtoint (i32* @global_var_ac3c.32 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9388, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_939c = load i32, i32* %r8.global-to-local, align 4
  %v2_939c = add i32 %v1_939c, %v3_938c
  store i32 %v2_939c, i32* %r1.global-to-local, align 4
  %v2_93a0 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_ac3c.32 to i32), i32* %v2_9388, align 4
  %v0_93a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93a8 = trunc i32 %v0_93a8 to i8
  %v2_93a8 = load i32, i32* %r5.global-to-local, align 4
  %v3_93a8 = add i32 %v2_93a8, 4
  %v4_93a8 = inttoptr i32 %v3_93a8 to i8*
  store i8 %v1_93a8, i8* %v4_93a8, align 1
  %v0_93ac = load i32, i32* %r1.global-to-local, align 4
  %v3_93ac = mul i32 %v0_93ac, 4
  store i32 %v3_93ac, i32* %r1.global-to-local, align 4
  %v4_93b0 = inttoptr i32 %v2_93a0 to i32*
  %v5_93b0 = call i32* @realloc(i32* %v4_93b0, i32 %v3_93ac)
  %v6_93b0 = ptrtoint i32* %v5_93b0 to i32
  %v2_93b4 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_93b4 = zext i8 %v2_93b4 to i32
  store i32 %v3_93b4, i32* %r3.global-to-local, align 4
  store i32 %v6_93b0, i32* %r2.global-to-local, align 4
  %v0_93bc = load i32, i32* %r5.global-to-local, align 4
  %v5_93bc = mul nuw nsw i32 %v3_93b4, 4
  %v6_93bc = add i32 %v5_93bc, %v6_93b0
  %v7_93bc = inttoptr i32 %v6_93bc to i32*
  store i32 %v0_93bc, i32* %v7_93bc, align 4
  %v0_93c0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_93c0, i32* %r1.global-to-local, align 4
  %v0_93c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93c4 = load i32, i32* %r8.global-to-local, align 4
  %v2_93c4 = add i32 %v1_93c4, %v0_93c4
  store i32 %v2_93c4, i32* %r3.global-to-local, align 4
  %v1_93cc = trunc i32 %v2_93c4 to i8
  %v2_93cc = load i32, i32* %r4.global-to-local, align 4
  %v3_93cc = inttoptr i32 %v2_93cc to i8*
  store i8 %v1_93cc, i8* %v3_93cc, align 1
  %v0_93d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_93d0 = inttoptr i32 %v1_93d0 to i32*
  store i32 %v0_93d0, i32* %v2_93d0, align 4
  %v2_93d4 = call i32* @calloc(i32 %v1_93c4, i32 %v0_93c0)
  %v4_93d4 = ptrtoint i32* %v2_93d4 to i32
  %v2_93d8 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_93d8 = zext i8 %v2_93d8 to i32
  store i32 42120, i32* %r2.global-to-local, align 4
  store i32 %v4_93d4, i32* %r5.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_93e8 = load i32, i32* %r8.global-to-local, align 4
  %v2_93e8 = add i32 %v1_93e8, %v3_93d8
  store i32 %v2_93e8, i32* %r1.global-to-local, align 4
  %v2_93ec = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 42120, i32* %v2_93d4, align 4
  %v0_93f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_93f4 = add i32 %v2_93f4, 4
  %v4_93f4 = inttoptr i32 %v3_93f4 to i8*
  store i8 %v1_93f4, i8* %v4_93f4, align 1
  %v0_93f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_93f8 = mul i32 %v0_93f8, 4
  store i32 %v3_93f8, i32* %r1.global-to-local, align 4
  %v4_93fc = inttoptr i32 %v2_93ec to i32*
  %v5_93fc = call i32* @realloc(i32* %v4_93fc, i32 %v3_93f8)
  %v6_93fc = ptrtoint i32* %v5_93fc to i32
  %v2_9400 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9400 = zext i8 %v2_9400 to i32
  store i32 %v3_9400, i32* %r3.global-to-local, align 4
  store i32 %v6_93fc, i32* %r2.global-to-local, align 4
  %v0_9408 = load i32, i32* %r5.global-to-local, align 4
  %v5_9408 = mul nuw nsw i32 %v3_9400, 4
  %v6_9408 = add i32 %v5_9408, %v6_93fc
  %v7_9408 = inttoptr i32 %v6_9408 to i32*
  store i32 %v0_9408, i32* %v7_9408, align 4
  %v0_940c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_940c, i32* %r1.global-to-local, align 4
  %v0_9410 = load i32, i32* %r3.global-to-local, align 4
  %v1_9410 = load i32, i32* %r8.global-to-local, align 4
  %v2_9410 = add i32 %v1_9410, %v0_9410
  store i32 %v2_9410, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v2_9410 to i8
  %v2_9418 = load i32, i32* %r4.global-to-local, align 4
  %v3_9418 = inttoptr i32 %v2_9418 to i8*
  store i8 %v1_9418, i8* %v3_9418, align 1
  %v0_941c = load i32, i32* %r2.global-to-local, align 4
  %v1_941c = load i32, i32* %r6.global-to-local, align 4
  %v2_941c = inttoptr i32 %v1_941c to i32*
  store i32 %v0_941c, i32* %v2_941c, align 4
  %v2_9420 = call i32* @calloc(i32 %v1_9410, i32 %v0_940c)
  %v4_9420 = ptrtoint i32* %v2_9420 to i32
  %v2_9424 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9424 = zext i8 %v2_9424 to i32
  store i32 ptrtoint (i32* @global_var_9bcc.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9420, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_9434 = load i32, i32* %r8.global-to-local, align 4
  %v2_9434 = add i32 %v1_9434, %v3_9424
  store i32 %v2_9434, i32* %r1.global-to-local, align 4
  %v2_9438 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_9bcc.35 to i32), i32* %v2_9420, align 4
  %v0_9440 = load i32, i32* %r3.global-to-local, align 4
  %v1_9440 = trunc i32 %v0_9440 to i8
  %v2_9440 = load i32, i32* %r5.global-to-local, align 4
  %v3_9440 = add i32 %v2_9440, 4
  %v4_9440 = inttoptr i32 %v3_9440 to i8*
  store i8 %v1_9440, i8* %v4_9440, align 1
  %v0_9444 = load i32, i32* %r1.global-to-local, align 4
  %v3_9444 = mul i32 %v0_9444, 4
  store i32 %v3_9444, i32* %r1.global-to-local, align 4
  %v4_9448 = inttoptr i32 %v2_9438 to i32*
  %v5_9448 = call i32* @realloc(i32* %v4_9448, i32 %v3_9444)
  %v6_9448 = ptrtoint i32* %v5_9448 to i32
  %v2_944c = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_944c = zext i8 %v2_944c to i32
  store i32 %v3_944c, i32* %r3.global-to-local, align 4
  store i32 %v6_9448, i32* %r2.global-to-local, align 4
  %v0_9454 = load i32, i32* %r5.global-to-local, align 4
  %v5_9454 = mul nuw nsw i32 %v3_944c, 4
  %v6_9454 = add i32 %v5_9454, %v6_9448
  %v7_9454 = inttoptr i32 %v6_9454 to i32*
  store i32 %v0_9454, i32* %v7_9454, align 4
  %v0_9458 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9458, i32* %r1.global-to-local, align 4
  %v0_945c = load i32, i32* %r3.global-to-local, align 4
  %v1_945c = load i32, i32* %r8.global-to-local, align 4
  %v2_945c = add i32 %v1_945c, %v0_945c
  store i32 %v2_945c, i32* %r3.global-to-local, align 4
  %v1_9464 = trunc i32 %v2_945c to i8
  %v2_9464 = load i32, i32* %r4.global-to-local, align 4
  %v3_9464 = inttoptr i32 %v2_9464 to i8*
  store i8 %v1_9464, i8* %v3_9464, align 1
  %v0_9468 = load i32, i32* %r2.global-to-local, align 4
  %v1_9468 = load i32, i32* %r6.global-to-local, align 4
  %v2_9468 = inttoptr i32 %v1_9468 to i32*
  store i32 %v0_9468, i32* %v2_9468, align 4
  %v2_946c = call i32* @calloc(i32 %v1_945c, i32 %v0_9458)
  %v4_946c = ptrtoint i32* %v2_946c to i32
  %v2_9470 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9470 = zext i8 %v2_9470 to i32
  store i32 ptrtoint (i32* @global_var_9538.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_946c, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_9480 = load i32, i32* %r8.global-to-local, align 4
  %v2_9480 = add i32 %v1_9480, %v3_9470
  store i32 %v2_9480, i32* %r1.global-to-local, align 4
  %v2_9484 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_9538.37 to i32), i32* %v2_946c, align 4
  %v0_948c = load i32, i32* %r3.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r5.global-to-local, align 4
  %v3_948c = add i32 %v2_948c, 4
  %v4_948c = inttoptr i32 %v3_948c to i8*
  store i8 %v1_948c, i8* %v4_948c, align 1
  %v0_9490 = load i32, i32* %r1.global-to-local, align 4
  %v3_9490 = mul i32 %v0_9490, 4
  store i32 %v3_9490, i32* %r1.global-to-local, align 4
  %v4_9494 = inttoptr i32 %v2_9484 to i32*
  %v5_9494 = call i32* @realloc(i32* %v4_9494, i32 %v3_9490)
  %v6_9494 = ptrtoint i32* %v5_9494 to i32
  %v2_9498 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_9498 = zext i8 %v2_9498 to i32
  store i32 %v3_9498, i32* %r3.global-to-local, align 4
  store i32 %v6_9494, i32* %r2.global-to-local, align 4
  %v0_94a0 = load i32, i32* %r5.global-to-local, align 4
  %v5_94a0 = mul nuw nsw i32 %v3_9498, 4
  %v6_94a0 = add i32 %v5_94a0, %v6_9494
  %v7_94a0 = inttoptr i32 %v6_94a0 to i32*
  store i32 %v0_94a0, i32* %v7_94a0, align 4
  %v0_94a4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_94a4, i32* %r1.global-to-local, align 4
  %v0_94a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94a8 = load i32, i32* %r8.global-to-local, align 4
  %v2_94a8 = add i32 %v1_94a8, %v0_94a8
  store i32 %v2_94a8, i32* %r3.global-to-local, align 4
  %v1_94b0 = trunc i32 %v2_94a8 to i8
  %v2_94b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_94b0 = inttoptr i32 %v2_94b0 to i8*
  store i8 %v1_94b0, i8* %v3_94b0, align 1
  %v0_94b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_94b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_94b4 = inttoptr i32 %v1_94b4 to i32*
  store i32 %v0_94b4, i32* %v2_94b4, align 4
  %v2_94b8 = call i32* @calloc(i32 %v1_94a8, i32 %v0_94a4)
  %v4_94b8 = ptrtoint i32* %v2_94b8 to i32
  %v2_94bc = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_94bc = zext i8 %v2_94bc to i32
  store i32 ptrtoint (i32* @global_var_a1e8.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_94b8, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_94cc = load i32, i32* %r8.global-to-local, align 4
  %v2_94cc = add i32 %v1_94cc, %v3_94bc
  store i32 %v2_94cc, i32* %r1.global-to-local, align 4
  %v2_94d0 = load i32, i32* @global_var_1a1d8.14, align 4
  store i32 ptrtoint (i32* @global_var_a1e8.39 to i32), i32* %v2_94b8, align 4
  %v0_94d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d8 = trunc i32 %v0_94d8 to i8
  %v2_94d8 = load i32, i32* %r5.global-to-local, align 4
  %v3_94d8 = add i32 %v2_94d8, 4
  %v4_94d8 = inttoptr i32 %v3_94d8 to i8*
  store i8 %v1_94d8, i8* %v4_94d8, align 1
  %v0_94dc = load i32, i32* %r1.global-to-local, align 4
  %v3_94dc = mul i32 %v0_94dc, 4
  store i32 %v3_94dc, i32* %r1.global-to-local, align 4
  %v4_94e0 = inttoptr i32 %v2_94d0 to i32*
  %v5_94e0 = call i32* @realloc(i32* %v4_94e0, i32 %v3_94dc)
  %v6_94e0 = ptrtoint i32* %v5_94e0 to i32
  %v2_94e4 = load i8, i8* bitcast (i8** @global_var_1a1d5.5 to i8*), align 4
  %v3_94e4 = zext i8 %v2_94e4 to i32
  store i32 %v3_94e4, i32* %r3.global-to-local, align 4
  %v1_94e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_94e8 = inttoptr i32 %v1_94e8 to i32*
  store i32 %v6_94e0, i32* %v2_94e8, align 4
  %v0_94ec = load i32, i32* %r5.global-to-local, align 4
  %v2_94ec = load i32, i32* %r3.global-to-local, align 4
  %v5_94ec = mul i32 %v2_94ec, 4
  %v6_94ec = add i32 %v5_94ec, %v6_94e0
  %v7_94ec = inttoptr i32 %v6_94ec to i32*
  store i32 %v0_94ec, i32* %v7_94ec, align 4
  %v0_94f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94f0 = load i32, i32* %r8.global-to-local, align 4
  %v2_94f0 = add i32 %v1_94f0, %v0_94f0
  store i32 %v2_94f0, i32* %r2.global-to-local, align 4
  %v1_94f8 = trunc i32 %v2_94f0 to i8
  %v2_94f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_94f8 = inttoptr i32 %v2_94f8 to i8*
  store i8 %v1_94f8, i8* %v3_94f8, align 1
  %v2_94fc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_94fc, i32* @r4, align 4
  ret i32 %v1_94f0

; uselistorder directives
  uselistorder i32 %v1_94f0, { 1, 0 }
  uselistorder i32 %v3_94dc, { 1, 0 }
  uselistorder i32 %v1_94a8, { 1, 0 }
  uselistorder i32 %v3_9490, { 1, 0 }
  uselistorder i32 %v1_945c, { 1, 0 }
  uselistorder i32 %v3_9444, { 1, 0 }
  uselistorder i32 %v1_9410, { 1, 0 }
  uselistorder i32 %v3_93f8, { 1, 0 }
  uselistorder i32 %v1_93c4, { 1, 0 }
  uselistorder i32 %v3_93ac, { 1, 0 }
  uselistorder i32 %v1_9378, { 1, 0 }
  uselistorder i32 %v3_9360, { 1, 0 }
  uselistorder i32 %v1_932c, { 1, 0 }
  uselistorder i32 %v3_9314, { 1, 0 }
  uselistorder i32 %v1_92e0, { 1, 0 }
  uselistorder i32 %v3_92c8, { 1, 0 }
  uselistorder i32 %v1_9294, { 1, 0 }
  uselistorder i32 %v3_927c, { 1, 0 }
  uselistorder i32 %v1_9248, { 1, 0 }
  uselistorder i32 %v3_9230, { 1, 0 }
  uselistorder i32 %v3_91e4, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i8* bitcast (i8** @global_var_1a1d5.5 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1a1d6.20 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1a1d8.14, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8** @global_var_1a1d5.5, { 1, 2, 0 }
}

define i32 @function_9538(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9538:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9538 = load i32, i32* @r4, align 4
  %v6_9538 = load i32, i32* @r5, align 4
  %v9_9538 = load i32, i32* @r6, align 4
  %v12_9538 = load i32, i32* @r7, align 4
  %v15_9538 = load i32, i32* @r8, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9554 = call i32* @calloc(i32 4, i32 4)
  %v4_9554 = ptrtoint i32* %v2_9554 to i32
  %v0_9558 = load i32, i32* @r5, align 4
  store i32 %v0_9558, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9568 = load i32, i32* @r4, align 4
  store i32 %v0_9568, i32* %r0.global-to-local, align 4
  %v5_956c = inttoptr i32 %v0_9558 to i32*
  %v6_956c = call i32 @function_913c(i32 %v0_9568, i32* %v5_956c, i32 2, i32 0, i32 %v4_9554)
  %v1_9578 = urem i32 %v6_956c, 256
  store i32 %v1_9578, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9584 = load i32, i32* @r5, align 4
  store i32 %v0_9584, i32* %r1.global-to-local, align 4
  %v0_9588 = load i32, i32* @r4, align 4
  store i32 %v0_9588, i32* %r0.global-to-local, align 4
  %v5_958c = trunc i32 %v6_956c to i8
  %v6_9590 = inttoptr i32 %v0_9584 to i32*
  %v7_9590 = call i32 @function_913c(i32 %v0_9588, i32* %v6_9590, i32 3, i32 65535, i32 %v6_956c)
  %v0_9594 = load i32, i32* @r5, align 4
  store i32 %v0_9594, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9590, i32* %fp.global-to-local, align 4
  %v0_95a4 = load i32, i32* @r4, align 4
  store i32 %v0_95a4, i32* %r0.global-to-local, align 4
  %v5_95a8 = inttoptr i32 %v0_9594 to i32*
  %v6_95a8 = call i32 @function_913c(i32 %v0_95a4, i32* %v5_95a8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_95b0 = urem i32 %v6_95a8, 256
  store i32 %v1_95b0, i32* %ip.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r5, align 4
  store i32 %v0_95b4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r4, align 4
  store i32 %v0_95c0, i32* %r0.global-to-local, align 4
  %v6_95c8 = inttoptr i32 %v0_95b4 to i32*
  %v7_95c8 = call i32 @function_913c(i32 %v0_95c0, i32* %v6_95c8, i32 5, i32 1, i32 %v1_95b0)
  %v1_95d4 = urem i32 %v7_95c8, 256
  store i32 %v1_95d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_95e0 = load i32, i32* @r5, align 4
  store i32 %v0_95e0, i32* %r1.global-to-local, align 4
  %v0_95e4 = load i32, i32* @r4, align 4
  store i32 %v0_95e4, i32* %r0.global-to-local, align 4
  %v5_95ec = inttoptr i32 %v0_95e0 to i32*
  %v6_95ec = call i32 @function_913c(i32 %v0_95e4, i32* %v5_95ec, i32 6, i32 65535, i32 %v1_95d4)
  %v0_95f4 = load i32, i32* @r5, align 4
  store i32 %v0_95f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_95ec, i32* @r8, align 4
  %v0_9604 = load i32, i32* @r4, align 4
  store i32 %v0_9604, i32* %r0.global-to-local, align 4
  %v5_9608 = inttoptr i32 %v0_95f4 to i32*
  %v6_9608 = call i32 @function_913c(i32 %v0_9604, i32* %v5_9608, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_960c = load i32, i32* @r5, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9608, i32* @r7, align 4
  %v0_961c = load i32, i32* @r4, align 4
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  %v5_9620 = inttoptr i32 %v0_960c to i32*
  %v6_9620 = call i32 @function_913c(i32 %v0_961c, i32* %v5_9620, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9630 = load i32, i32* @r5, align 4
  store i32 %v0_9630, i32* %r1.global-to-local, align 4
  %v0_9634 = load i32, i32* @r4, align 4
  store i32 %v0_9634, i32* %r0.global-to-local, align 4
  %v5_9638 = inttoptr i32 %v0_9630 to i32*
  %v6_9638 = call i32 @function_913c(i32 %v0_9634, i32* %v5_9638, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9640 = urem i32 %v6_9638, 256
  store i32 %v1_9640, i32* %ip.global-to-local, align 4
  %v0_9644 = load i32, i32* @r5, align 4
  store i32 %v0_9644, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9650 = load i32, i32* @r4, align 4
  store i32 %v0_9650, i32* %r0.global-to-local, align 4
  %v5_9658 = inttoptr i32 %v0_9644 to i32*
  %v6_9658 = call i32 @function_913c(i32 %v0_9650, i32* %v5_9658, i32 19, i32 0, i32 %v1_9640)
  %v0_9660 = load i32, i32* @r5, align 4
  store i32 %v0_9660, i32* %r1.global-to-local, align 4
  %v2_9664 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_9664, i32* %r3.global-to-local, align 4
  store i32 %v6_9658, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9670 = load i32, i32* @r4, align 4
  store i32 %v0_9670, i32* %r0.global-to-local, align 4
  %v5_9674 = inttoptr i32 %v0_9660 to i32*
  %v6_9674 = call i32 @function_913c(i32 %v0_9670, i32* %v5_9674, i32 25, i32 %v2_9664, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9688 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9688, i32* %r0.global-to-local, align 4
  %v2_968c = icmp eq i32 %v3_9688, -1
  store i1 %v2_968c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_968c, label %dec_label_pc_9ba0, label %dec_label_pc_9698

dec_label_pc_9698:                                ; preds = %dec_label_pc_9538
  store i32 1, i32* %stack_var_-44, align 4
  %v6_96a0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_96a0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_96b4 = call i32 @setsockopt(i32 %v3_9688, i32 0, i32 3, i32* nonnull %stack_var_-44, i32 4)
  store i32 %v7_96b4, i32* %r0.global-to-local, align 4
  %v2_96b8 = icmp eq i32 %v7_96b4, -1
  store i1 %v2_96b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_96b8, label %dec_label_pc_9b98, label %dec_label_pc_96c0

dec_label_pc_96c0:                                ; preds = %dec_label_pc_9698
  %v0_96c0 = load i32, i32* @r8, align 4
  %v3_96c0 = mul i32 %v0_96c0, 65536
  store i32 %v3_96c0, i32* %r8.global-to-local, align 4
  %v0_96c4 = load i32, i32* @r7, align 4
  %v3_96c4 = mul i32 %v0_96c4, 65536
  store i32 %v3_96c4, i32* %r7.global-to-local, align 4
  %v0_96c8 = load i32, i32* %fp.global-to-local, align 4
  %v0_96cc = load i32, i32* @r6, align 4
  %v1_96cc = urem i32 %v0_96cc, 256
  store i32 %v1_96cc, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_96d4 = urem i32 %v0_96c0, 65536
  store i32 %v3_96d4, i32* %r3.global-to-local, align 4
  %v3_96d8 = urem i32 %v0_96c4, 65536
  store i32 %v3_96d8, i32* %r4.global-to-local, align 4
  %v0_96dc = load i32, i32* @sl, align 4
  %v2_96dc = icmp eq i32 %v0_96dc, 0
  store i1 %v2_96dc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_96f4 = urem i32 %v0_96c8, 65536
  store i32 %v3_96f4, i32* %fp.global-to-local, align 4
  br i1 %v2_96dc, label %dec_label_pc_9bac, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96c0
  %v0_96c8.not = or i32 %v0_96c8, -65536
  %v1_9708 = xor i32 %v0_96c8.not, 65535
  %v3_970c = mul i32 %v6_9620, 65536
  %v1_9710 = add i32 %v3_970c, 4325376
  %tmp74 = udiv i32 %v1_9710, 256
  %v3_9724 = and i32 %tmp74, 65280
  %tmp75 = mul nsw i32 %v1_9708, 256
  %v3_9728 = and i32 %tmp75, 65280
  store i32 %v3_9728, i32* %ip.global-to-local, align 4
  %v1_972c = add i32 %v3_970c, 524288
  %v1_9734 = add i32 %v3_970c, 1835008
  %tmp76 = udiv i32 %v1_9708, 256
  %v4_9738 = urem i32 %tmp76, 256
  %v5_9738 = or i32 %v4_9738, %v3_9728
  %v4_9740 = udiv i32 %v1_9710, 16777216
  %v5_9740 = or i32 %v3_9724, %v4_9740
  store i32 %v5_9740, i32* %r8.global-to-local, align 4
  %v3_974c = udiv i32 %v1_9734, 256
  %tmp77 = mul i32 %v0_96c8, 256
  %v3_9750 = and i32 %tmp77, 65280
  store i32 %v3_96c0, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_96c8, 256
  %v4_9760 = urem i32 %tmp78, 256
  %v5_9760 = or i32 %v4_9760, %v3_9750
  store i32 %v5_9760, i32* %r0.global-to-local, align 4
  %tmp79 = mul i32 %v0_96c0, 256
  %v3_9764 = and i32 %tmp79, 65280
  %v1_9768 = and i32 %v3_974c, 65280
  store i32 %v1_9768, i32* %r6.global-to-local, align 4
  store i32 %v3_96c4, i32* %r1.global-to-local, align 4
  %tmp80 = mul i32 %v0_96c4, 256
  %v3_9774 = and i32 %tmp80, 65280
  %tmp81 = udiv i32 %v0_96c0, 256
  %v4_9778 = urem i32 %tmp81, 256
  %v5_9778 = or i32 %v4_9778, %v3_9764
  %v4_977c = udiv i32 %v1_9734, 16777216
  %v5_977c = or i32 %v1_9768, %v4_977c
  store i32 %v5_977c, i32* %r3.global-to-local, align 4
  %tmp82 = udiv i32 %v0_96c4, 256
  %v4_9780 = urem i32 %tmp82, 256
  %v5_9780 = or i32 %v4_9780, %v3_9774
  %tmp83 = udiv i32 %v1_972c, 256
  %v3_9784 = and i32 %tmp83, 65280
  store i32 %v3_9784, i32* %r5.global-to-local, align 4
  %v5_9788 = trunc i32 %v5_9760 to i16
  %v5_9790 = trunc i32 %v5_977c to i16
  %v4_9798 = udiv i32 %v1_972c, 16777216
  %v5_9798 = or i32 %v3_9784, %v4_9798
  store i32 %v5_9798, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_9800 = trunc i32 %v6_95a8 to i8
  %sext = mul nuw i32 %v5_9738, 65536
  %v4_988c = sdiv i32 %sext, 65536
  %v2_98b8 = icmp eq i32 %v1_96cc, 0
  %sext9 = mul nuw i32 %v5_9778, 65536
  %v4_98d8 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_9780, 65536
  %v4_98e0 = sdiv i32 %sext10, 65536
  %v1_989828 = trunc i32 %v4_988c to i16
  br label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %bb86, %dec_label_pc_9704
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_97ac = call i32* @calloc(i32 1510, i32 4)
  %v4_97ac = ptrtoint i32* %v2_97ac to i32
  store i32 %v4_97ac, i32* %r0.global-to-local, align 4
  %v2_97b4 = load i32, i32* %r4.global-to-local, align 4
  %v5_97b4 = mul i32 %v2_97b4, 4
  %v6_97b4 = add i32 %v5_97b4, %v4_9554
  %v7_97b4 = inttoptr i32 %v6_97b4 to i32*
  store i32 %v4_97ac, i32* %v7_97b4, align 4
  %v3_97b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_97b8, i32* %r2.global-to-local, align 4
  %v5_97c0 = mul i32 %v3_97b8, 24
  %v1_97c4 = load i32, i32* %sb.global-to-local, align 4
  %v2_97c4 = add i32 %v1_97c4, %v5_97c0
  store i32 %v2_97c4, i32* @lr, align 4
  store i32 %v4_9554, i32* %r3.global-to-local, align 4
  %v4_97cc = mul i32 %v3_97b8, 4
  %v5_97cc = add i32 %v4_97cc, %v4_9554
  %v6_97cc = inttoptr i32 %v5_97cc to i32*
  %v7_97cc = load i32, i32* %v6_97cc, align 4
  store i32 %v7_97cc, i32* %r4.global-to-local, align 4
  %v1_97d0 = inttoptr i32 %v7_97cc to i8*
  %v2_97d0 = load i8, i8* %v1_97d0, align 1
  %tmp = urem i8 %v2_97d0, 16
  %v1_97d4 = zext i8 %tmp to i32
  %v1_97d8 = or i32 %v1_97d4, 64
  store i32 %v1_97d8, i32* %r3.global-to-local, align 4
  %v1_97dc = trunc i32 %v1_97d8 to i8
  store i8 %v1_97dc, i8* %v1_97d0, align 1
  %v0_97e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v0_97e0 to i8*
  %v2_97e0 = load i8, i8* %v1_97e0, align 1
  %v1_97e4 = and i8 %v2_97e0, -16
  %v1_97e8 = or i8 %v1_97e4, 5
  store i32 %v1_95d4, i32* %r5.global-to-local, align 4
  store i8 %v1_97e8, i8* %v1_97e0, align 1
  store i32 %v6_956c, i32* %r1.global-to-local, align 4
  %v2_97f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_97f8 = add i32 %v2_97f8, 1
  %v4_97f8 = inttoptr i32 %v3_97f8 to i8*
  store i8 %v5_958c, i8* %v4_97f8, align 1
  store i32 %v1_95b0, i32* %r2.global-to-local, align 4
  %v2_9800 = load i32, i32* %r4.global-to-local, align 4
  %v3_9800 = add i32 %v2_9800, 8
  %v4_9800 = inttoptr i32 %v3_9800 to i8*
  store i8 %v1_9800, i8* %v4_9800, align 1
  %v2_9808 = load i32, i32* %r4.global-to-local, align 4
  %v3_9808 = add i32 %v2_9808, 4
  %v4_9808 = inttoptr i32 %v3_9808 to i16*
  store i16 %v5_9788, i16* %v4_9808, align 2
  %v2_9810 = load i32, i32* %r4.global-to-local, align 4
  %v3_9810 = add i32 %v2_9810, 9
  %v4_9810 = inttoptr i32 %v3_9810 to i8*
  store i8 47, i8* %v4_9810, align 1
  store i32 %v6_9674, i32* %r3.global-to-local, align 4
  %v0_9818 = load i32, i32* %r5.global-to-local, align 4
  %v2_9818 = icmp eq i32 %v0_9818, 0
  store i1 %v2_9818, i1* %cpsr_z.global-to-local, align 1
  %v1_981c = load i32, i32* %r4.global-to-local, align 4
  %v2_981c = add i32 %v1_981c, 12
  %v3_981c = inttoptr i32 %v2_981c to i32*
  store i32 %v6_9674, i32* %v3_981c, align 4
  br i1 %v2_9818, label %.thread26, label %bb

bb:                                               ; preds = %dec_label_pc_97a0
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_9824 = load i32, i32* %r4.global-to-local, align 4
  %v4_9824 = add i32 %v3_9824, 6
  %v5_9824 = inttoptr i32 %v4_9824 to i16*
  store i16 64, i16* %v5_9824, align 2
  br label %.thread26

.thread26:                                        ; preds = %dec_label_pc_97a0, %bb
  %v0_9828 = load i32, i32* @lr, align 4
  %v1_9828 = add i32 %v0_9828, 16
  %v2_9828 = inttoptr i32 %v1_9828 to i32*
  %v3_9828 = load i32, i32* %v2_9828, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_9830 = load i32, i32* %r4.global-to-local, align 4
  %v2_9830 = add i32 %v1_9830, 16
  %v3_9830 = inttoptr i32 %v2_9830 to i32*
  store i32 %v3_9828, i32* %v3_9830, align 4
  %v0_9834 = load i32, i32* %r4.global-to-local, align 4
  %v1_9834 = add i32 %v0_9834, 24
  store i32 %v1_9834, i32* %r1.global-to-local, align 4
  %v1_9838 = add i32 %v0_9834, 20
  store i32 %v1_9838, i32* %r0.global-to-local, align 4
  %v0_983c = load i32, i32* %ip.global-to-local, align 4
  %v1_983c = add i32 %v0_983c, 101
  store i32 %v1_983c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_9848 = load i32, i32* %r8.global-to-local, align 4
  %v1_9848 = trunc i32 %v0_9848 to i16
  %v3_9848 = add i32 %v0_9834, 2
  %v4_9848 = inttoptr i32 %v3_9848 to i16*
  store i16 %v1_9848, i16* %v4_9848, align 2
  %v0_984c = load i32, i32* %ip.global-to-local, align 4
  %v1_984c = trunc i32 %v0_984c to i16
  %v2_984c = load i32, i32* %r0.global-to-local, align 4
  %v3_984c = add i32 %v2_984c, 2
  %v4_984c = inttoptr i32 %v3_984c to i16*
  store i16 %v1_984c, i16* %v4_984c, align 2
  %v0_9850 = load i32, i32* %r3.global-to-local, align 4
  %v1_9850 = trunc i32 %v0_9850 to i8
  %v2_9850 = load i32, i32* %r1.global-to-local, align 4
  %v3_9850 = add i32 %v2_9850, 13
  %v4_9850 = inttoptr i32 %v3_9850 to i8*
  store i8 %v1_9850, i8* %v4_9850, align 1
  %v0_9854 = load i32, i32* %r2.global-to-local, align 4
  %v1_9854 = trunc i32 %v0_9854 to i8
  %v2_9854 = load i32, i32* %r1.global-to-local, align 4
  %v3_9854 = add i32 %v2_9854, 12
  %v4_9854 = inttoptr i32 %v3_9854 to i8*
  store i8 %v1_9854, i8* %v4_9854, align 1
  %v0_9858 = load i32, i32* %r4.global-to-local, align 4
  %v1_9858 = add i32 %v0_9858, 38
  %v2_9858 = inttoptr i32 %v1_9858 to i8*
  %v3_9858 = load i8, i8* %v2_9858, align 1
  %tmp90 = urem i8 %v3_9858, 16
  %v1_985c = zext i8 %tmp90 to i32
  %v1_9860 = or i32 %v1_985c, 64
  store i32 %v1_9860, i32* %r3.global-to-local, align 4
  %v1_9864 = trunc i32 %v1_9860 to i8
  store i8 %v1_9864, i8* %v2_9858, align 1
  %v0_9868 = load i32, i32* %r4.global-to-local, align 4
  %v1_9868 = add i32 %v0_9868, 38
  %v2_9868 = inttoptr i32 %v1_9868 to i8*
  %v3_9868 = load i8, i8* %v2_9868, align 1
  %v1_986c = and i8 %v3_9868, -16
  %v1_9870 = or i8 %v1_986c, 5
  store i8 %v1_9870, i8* %v2_9868, align 1
  %v0_987c = load i32, i32* %r4.global-to-local, align 4
  %v1_987c = add i32 %v0_987c, 38
  store i32 %v1_987c, i32* %r5.global-to-local, align 4
  %v3_9880 = add i32 %v0_987c, 39
  %v4_9880 = inttoptr i32 %v3_9880 to i8*
  store i8 %v5_958c, i8* %v4_9880, align 1
  store i32 %v5_977c, i32* %r2.global-to-local, align 4
  %v2_9888 = load i32, i32* %r5.global-to-local, align 4
  %v3_9888 = add i32 %v2_9888, 2
  %v4_9888 = inttoptr i32 %v3_9888 to i16*
  store i16 %v5_9790, i16* %v4_9888, align 2
  store i32 %v4_988c, i32* %r3.global-to-local, align 4
  store i32 %v1_95b0, i32* %r1.global-to-local, align 4
  %v0_9894 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9894, label %.thread27, label %bb84

.thread27:                                        ; preds = %.thread26
  %v2_989829 = load i32, i32* %r5.global-to-local, align 4
  %v3_989830 = add i32 %v2_989829, 4
  %v4_989831 = inttoptr i32 %v3_989830 to i16*
  store i16 %v1_989828, i16* %v4_989831, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb85

bb84:                                             ; preds = %.thread26
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_9898 = load i32, i32* %r5.global-to-local, align 4
  %v3_9898 = add i32 %v2_9898, 4
  %v4_9898 = inttoptr i32 %v3_9898 to i16*
  store i16 %v1_989828, i16* %v4_9898, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_98a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_98a0 = trunc i32 %v1_98a0 to i16
  %v3_98a0 = load i32, i32* %r5.global-to-local, align 4
  %v4_98a0 = add i32 %v3_98a0, 6
  %v5_98a0 = inttoptr i32 %v4_98a0 to i16*
  store i16 %v2_98a0, i16* %v5_98a0, align 2
  br label %bb85

bb85:                                             ; preds = %.thread27, %bb84
  %v0_98a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_98a4 = trunc i32 %v0_98a4 to i8
  %v2_98a4 = load i32, i32* %r5.global-to-local, align 4
  %v3_98a4 = add i32 %v2_98a4, 8
  %v4_98a4 = inttoptr i32 %v3_98a4 to i8*
  store i8 %v1_98a4, i8* %v4_98a4, align 1
  %v0_98a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v0_98a8 to i8
  %v2_98a8 = load i32, i32* %r5.global-to-local, align 4
  %v3_98a8 = add i32 %v2_98a8, 9
  %v4_98a8 = inttoptr i32 %v3_98a8 to i8*
  store i8 %v1_98a8, i8* %v4_98a8, align 1
  %v0_98ac = call i32 @function_ee68()
  store i32 %v0_98ac, i32* %r0.global-to-local, align 4
  store i32 %v1_96cc, i32* %r1.global-to-local, align 4
  store i1 %v2_98b8, i1* %cpsr_z.global-to-local, align 1
  %v1_98bc = sub i32 1023, %v0_98ac
  store i32 %v1_98bc, i32* %r3.global-to-local, align 4
  br i1 %v2_98b8, label %.thread, label %.thread11

.thread:                                          ; preds = %bb85
  %v2_98c4 = load i32, i32* %r5.global-to-local, align 4
  %v3_98c4 = add i32 %v2_98c4, 16
  %v4_98c4 = inttoptr i32 %v3_98c4 to i32*
  store i32 %v1_98bc, i32* %v4_98c4, align 4
  br label %bb86

.thread11:                                        ; preds = %bb85
  %v1_98c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_98c0 = add i32 %v1_98c0, 16
  %v3_98c0 = inttoptr i32 %v2_98c0 to i32*
  %v4_98c0 = load i32, i32* %v3_98c0, align 4
  store i32 %v4_98c0, i32* %r3.global-to-local, align 4
  %v2_98c8 = load i32, i32* %r5.global-to-local, align 4
  %v3_98c8 = add i32 %v2_98c8, 16
  %v4_98c8 = inttoptr i32 %v3_98c8 to i32*
  store i32 %v4_98c0, i32* %v4_98c8, align 4
  br label %bb86

bb86:                                             ; preds = %.thread, %.thread11
  %v1_98cc = load i32, i32* %r5.global-to-local, align 4
  %v2_98cc = add i32 %v1_98cc, 12
  %v3_98cc = inttoptr i32 %v2_98cc to i32*
  store i32 %v0_98ac, i32* %v3_98cc, align 4
  %v3_98d0 = load i32, i32* %stack_var_-44, align 4
  %v0_98d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_98d4 = add i32 %v0_98d4, 58
  store i32 %v1_98d4, i32* %r6.global-to-local, align 4
  store i32 %v4_98d8, i32* %r2.global-to-local, align 4
  %v1_98dc = add i32 %v3_98d0, 1
  store i32 %v1_98dc, i32* %r4.global-to-local, align 4
  store i32 %v4_98e0, i32* %r3.global-to-local, align 4
  %v1_98e4 = load i32, i32* @sl, align 4
  %v9_98e4 = icmp eq i32 %v1_98dc, %v1_98e4
  store i1 %v9_98e4, i1* %cpsr_z.global-to-local, align 1
  %v0_98e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_98e8 = trunc i32 %v0_98e8 to i16
  %v3_98e8 = add i32 %v0_98d4, 62
  %v4_98e8 = inttoptr i32 %v3_98e8 to i16*
  store i16 %v1_98e8, i16* %v4_98e8, align 2
  %v0_98ec = load i32, i32* %r2.global-to-local, align 4
  %v1_98ec = trunc i32 %v0_98ec to i16
  %v2_98ec = load i32, i32* %r6.global-to-local, align 4
  %v3_98ec = inttoptr i32 %v2_98ec to i16*
  store i16 %v1_98ec, i16* %v3_98ec, align 2
  %v0_98f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_98f0 = trunc i32 %v0_98f0 to i16
  %v2_98f0 = load i32, i32* %r6.global-to-local, align 4
  %v3_98f0 = add i32 %v2_98f0, 2
  %v4_98f0 = inttoptr i32 %v3_98f0 to i16*
  store i16 %v1_98f0, i16* %v4_98f0, align 2
  %v0_98f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_98f4, i32* %stack_var_-44, align 4
  %v5_98f8 = icmp slt i32 %v1_98dc, %v1_98e4
  br i1 %v5_98f8, label %dec_label_pc_97a0, label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb86
  %v1_9904 = add i32 %v6_9620, 8
  store i32 %v1_9904, i32* %r4.global-to-local, align 4
  %v1_9908 = add i32 %v6_9620, 66
  store i32 %v1_9908, i32* %r5.global-to-local, align 4
  %v0_9918.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9914.preheader

dec_label_pc_9914.preheader:                      ; preds = %dec_label_pc_98fc, %dec_label_pc_9bac
  %v0_9918.pre = phi i32 [ %v0_9918.pre.pre, %dec_label_pc_98fc ], [ 0, %dec_label_pc_9bac ]
  %stack_var_-132.0.ph = phi i32 [ %v1_9908, %dec_label_pc_98fc ], [ %v1_9bb8, %dec_label_pc_9bac ]
  %stack_var_-136.0.ph = phi i32 [ %v1_9904, %dec_label_pc_98fc ], [ %v1_9bb4, %dec_label_pc_9bac ]
  %v2_9b68 = icmp eq i32 %v1_96cc, 0
  %v2_99b0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_99c8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_99d8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_99e4 = ptrtoint i32* %stack_var_-54 to i32
  %v2_99f8 = icmp eq i32 %v1_9640, 0
  %v2_9958 = icmp eq i32 %v6_9674, -1
  br label %dec_label_pc_9914

dec_label_pc_9914:                                ; preds = %dec_label_pc_9914, %dec_label_pc_9a00, %dec_label_pc_9914.preheader
  %v0_9918 = phi i32 [ %v0_9918.pre, %dec_label_pc_9914.preheader ], [ 0, %dec_label_pc_9914 ], [ %v1_9a9c, %dec_label_pc_9a00 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9918 = icmp eq i32 %v0_9918, 0
  store i1 %v2_9918, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9918, label %dec_label_pc_9914, label %dec_label_pc_9924

dec_label_pc_9924:                                ; preds = %dec_label_pc_9914
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9928

dec_label_pc_9928:                                ; preds = %dec_label_pc_9a00, %dec_label_pc_9924
  %v1_993c = phi i32 [ %v1_9a98, %dec_label_pc_9a00 ], [ 0, %dec_label_pc_9924 ]
  %v5_992c = mul i32 %v1_993c, 24
  %v1_9930 = load i32, i32* %sb.global-to-local, align 4
  %v2_9930 = add i32 %v1_9930, %v5_992c
  store i32 %v2_9930, i32* %r3.global-to-local, align 4
  store i32 %v4_9554, i32* %r4.global-to-local, align 4
  %v1_9938 = add i32 %v2_9930, 20
  %v2_9938 = inttoptr i32 %v1_9938 to i8*
  %v3_9938 = load i8, i8* %v2_9938, align 1
  %v4_9938 = zext i8 %v3_9938 to i32
  store i32 %v4_9938, i32* %r2.global-to-local, align 4
  %v4_993c = mul i32 %v1_993c, 4
  %v5_993c = add i32 %v4_993c, %v4_9554
  %v6_993c = inttoptr i32 %v5_993c to i32*
  %v7_993c = load i32, i32* %v6_993c, align 4
  store i32 %v7_993c, i32* @r5, align 4
  %v7_9940 = icmp eq i8 %v3_9938, 31
  store i1 %v7_9940, i1* %cpsr_z.global-to-local, align 1
  %v1_9944 = add i32 %v7_993c, 24
  store i32 %v1_9944, i32* @r7, align 4
  %v1_9948 = add i32 %v7_993c, 38
  store i32 %v1_9948, i32* @r6, align 4
  %v1_994c = add i32 %v7_993c, 58
  store i32 %v1_994c, i32* @r8, align 4
  %tmp91 = icmp ult i8 %v3_9938, 32
  br i1 %tmp91, label %dec_label_pc_9aac, label %dec_label_pc_9954

dec_label_pc_9954:                                ; preds = %dec_label_pc_9928
  store i32 %v6_9674, i32* %r1.global-to-local, align 4
  store i1 %v2_9958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9958, label %dec_label_pc_9b0c, label %dec_label_pc_9960

dec_label_pc_9960:                                ; preds = %dec_label_pc_9aac, %dec_label_pc_9954
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9968 = load i32, i32* %fp.global-to-local, align 4
  %v9_9968 = icmp eq i32 %v0_9968, 65535
  store i1 %v9_9968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9968, label %dec_label_pc_9b24, label %dec_label_pc_9970

dec_label_pc_9970:                                ; preds = %dec_label_pc_9b0c.dec_label_pc_9970_crit_edge, %dec_label_pc_9960
  %v1_9974 = phi i32 [ %v1_9974.pre, %dec_label_pc_9b0c.dec_label_pc_9970_crit_edge ], [ 65535, %dec_label_pc_9960 ]
  store i32 %v3_96d4, i32* %r2.global-to-local, align 4
  %v9_9974 = icmp eq i32 %v3_96d4, %v1_9974
  store i1 %v9_9974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9974, label %dec_label_pc_9b4c, label %dec_label_pc_997c

dec_label_pc_997c:                                ; preds = %dec_label_pc_9b24.dec_label_pc_997c_crit_edge, %dec_label_pc_9970
  %v1_9980 = phi i32 [ %v1_9980.pre, %dec_label_pc_9b24.dec_label_pc_997c_crit_edge ], [ %v1_9974, %dec_label_pc_9970 ]
  store i32 %v3_96d8, i32* %r3.global-to-local, align 4
  %v9_9980 = icmp eq i32 %v3_96d8, %v1_9980
  store i1 %v9_9980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9980, label %dec_label_pc_9b60, label %dec_label_pc_9988

dec_label_pc_9988:                                ; preds = %dec_label_pc_9b4c, %dec_label_pc_997c
  store i32 %v1_96cc, i32* @r4, align 4
  store i1 %v2_9b68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b68, label %dec_label_pc_9b7c, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_9988
  %v1_9990 = load i32, i32* @r5, align 4
  %v2_9990 = add i32 %v1_9990, 16
  %v3_9990 = inttoptr i32 %v2_9990 to i32*
  %v4_9990 = load i32, i32* %v3_9990, align 4
  store i32 %v4_9990, i32* %r3.global-to-local, align 4
  %v2_9994 = load i32, i32* @r6, align 4
  %v3_9994 = add i32 %v2_9994, 16
  %v4_9994 = inttoptr i32 %v3_9994 to i32*
  store i32 %v4_9990, i32* %v4_9994, align 4
  br label %dec_label_pc_999c

dec_label_pc_999c:                                ; preds = %bb89, %.thread12, %dec_label_pc_9b7c
  %v0_999c = call i32 @function_ee68()
  store i32 %v0_999c, i32* %r0.global-to-local, align 4
  store i32 %v0_999c, i32* %stack_var_-48, align 4
  %v0_99a4 = call i32 @function_ee68()
  store i32 %v0_99a4, i32* %r0.global-to-local, align 4
  store i32 %v0_99a4, i32* %stack_var_-52, align 4
  %v0_99ac = call i32 @function_ee68()
  store i32 %v2_99b0, i32* %r1.global-to-local, align 4
  store i32 %v0_99ac, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_99bc = load i32, i32* @r7, align 4
  store i32 %v0_99bc, i32* %r0.global-to-local, align 4
  %v3_99c0 = call i32 @function_1175c(i32 %v0_99bc, i32 %v2_99b0, i32 4)
  %v0_99c4 = load i32, i32* @r7, align 4
  %v1_99c4 = add i32 %v0_99c4, 6
  store i32 %v1_99c4, i32* %r0.global-to-local, align 4
  store i32 %v2_99c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_99d0 = call i32 @function_1175c(i32 %v1_99c4, i32 %v2_99c8, i32 4)
  %v0_99d4 = load i32, i32* @r7, align 4
  %v1_99d4 = add i32 %v0_99d4, 4
  store i32 %v1_99d4, i32* %r0.global-to-local, align 4
  store i32 %v2_99d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_99e0 = call i32 @function_1175c(i32 %v1_99d4, i32 %v2_99d8, i32 2)
  store i32 %v2_99e4, i32* %r1.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r7, align 4
  %v1_99e8 = add i32 %v0_99e8, 10
  store i32 %v1_99e8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_99f0 = call i32 @function_1175c(i32 %v1_99e8, i32 %v2_99e4, i32 2)
  store i32 %v3_99f0, i32* %r0.global-to-local, align 4
  store i32 %v1_9640, i32* %r1.global-to-local, align 4
  store i1 %v2_99f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99f8, label %dec_label_pc_9a00, label %dec_label_pc_9b88

dec_label_pc_9a00:                                ; preds = %dec_label_pc_999c, %dec_label_pc_9b88
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9a04 = load i32, i32* @r5, align 4
  %v3_9a04 = add i32 %v2_9a04, 10
  %v4_9a04 = inttoptr i32 %v3_9a04 to i16*
  store i16 0, i16* %v4_9a04, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9a0c = load i32, i32* @r5, align 4
  store i32 %v0_9a0c, i32* @r0, align 4
  %v2_9a10 = call i32 @function_d414(i32 %v0_9a0c, i32 20)
  %v3_9a10 = trunc i32 %v2_9a10 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9a18 = load i32, i32* @r5, align 4
  %v4_9a18 = add i32 %v3_9a18, 10
  %v5_9a18 = inttoptr i32 %v4_9a18 to i16*
  store i16 %v3_9a10, i16* %v5_9a18, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9a20 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a20 = trunc i32 %v0_9a20 to i16
  %v2_9a20 = load i32, i32* @r6, align 4
  %v3_9a20 = add i32 %v2_9a20, 10
  %v4_9a20 = inttoptr i32 %v3_9a20 to i16*
  store i16 %v1_9a20, i16* %v4_9a20, align 2
  %v0_9a24 = load i32, i32* @r6, align 4
  store i32 %v0_9a24, i32* @r0, align 4
  %v2_9a28 = call i32 @function_d414(i32 %v0_9a24, i32 20)
  %v3_9a28 = trunc i32 %v2_9a28 to i16
  store i32 %v2_9a28, i32* %r0.global-to-local, align 4
  %v3_9a2c = load i32, i32* @r6, align 4
  %v4_9a2c = add i32 %v3_9a2c, 10
  %v5_9a2c = inttoptr i32 %v4_9a2c to i16*
  store i16 %v3_9a28, i16* %v5_9a2c, align 2
  store i32 0, i32* @r4, align 4
  %v0_9a34 = load i32, i32* @r8, align 4
  store i32 %v0_9a34, i32* @r1, align 4
  %v1_9a38 = add i32 %v0_9a34, 4
  %v2_9a38 = inttoptr i32 %v1_9a38 to i16*
  %v3_9a38 = load i16, i16* %v2_9a38, align 2
  %v4_9a38 = zext i16 %v3_9a38 to i32
  store i32 %v4_9a38, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_9a40 = add i32 %v0_9a34, 6
  %v4_9a40 = inttoptr i32 %v3_9a40 to i16*
  store i16 0, i16* %v4_9a40, align 2
  %v0_9a44 = load i32, i32* @r6, align 4
  store i32 %v0_9a44, i32* %r0.global-to-local, align 4
  %v4_9a48 = call i32 @function_d464(i32 %v0_9a44, i32 %v0_9a34, i32 %v4_9a38, i32 %stack_var_-136.0.ph)
  %v5_9a48 = trunc i32 %v4_9a48 to i16
  store i32 %v4_9a48, i32* %r0.global-to-local, align 4
  %v3_9a4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a4c, i32* %r2.global-to-local, align 4
  %v3_9a50 = mul i32 %v3_9a4c, 32
  store i32 %v3_9a50, i32* %r3.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r5, align 4
  %v1_9a54 = add i32 %v0_9a54, 16
  %v2_9a54 = inttoptr i32 %v1_9a54 to i32*
  %v3_9a54 = load i32, i32* %v2_9a54, align 4
  %v5_9a58 = mul i32 %v3_9a4c, 24
  store i32 %v5_9a58, i32* %r3.global-to-local, align 4
  %v1_9a5c = load i32, i32* %sb.global-to-local, align 4
  %v2_9a5c = add i32 %v1_9a5c, %v5_9a58
  store i32 %v2_9a5c, i32* @lr, align 4
  %v2_9a60 = add i32 %v2_9a5c, 4
  %v3_9a60 = inttoptr i32 %v2_9a60 to i32*
  store i32 %v3_9a54, i32* %v3_9a60, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9a68 = load i32, i32* @r8, align 4
  %v4_9a68 = add i32 %v3_9a68, 6
  %v5_9a68 = inttoptr i32 %v4_9a68 to i16*
  store i16 %v5_9a48, i16* %v5_9a68, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a70 = trunc i32 %v0_9a70 to i16
  %v2_9a70 = load i32, i32* %r3.global-to-local, align 4
  %v3_9a70 = load i32, i32* %sb.global-to-local, align 4
  %v4_9a70 = add i32 %v3_9a70, %v2_9a70
  %v5_9a70 = inttoptr i32 %v4_9a70 to i16*
  store i16 %v1_9a70, i16* %v5_9a70, align 2
  %v0_9a74 = load i32, i32* @r4, align 4
  %v1_9a74 = trunc i32 %v0_9a74 to i16
  %v2_9a74 = load i32, i32* @lr, align 4
  %v3_9a74 = add i32 %v2_9a74, 2
  %v4_9a74 = inttoptr i32 %v3_9a74 to i16*
  store i16 %v1_9a74, i16* %v4_9a74, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9a7c = load i32, i32* @r5, align 4
  store i32 %v0_9a7c, i32* %r1.global-to-local, align 4
  store i32 %v3_9688, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_9a88 = load i32, i32* @lr, align 4
  %v4_9a88 = inttoptr i32 %v0_9a88 to %sockaddr*
  %v0_9a8c = load i32, i32* %ip.global-to-local, align 4
  %v7_9a90 = inttoptr i32 %v0_9a7c to i32*
  %v9_9a90 = call i32 @sendto(i32 %v3_9688, i32* %v7_9a90, i32 %stack_var_-132.0.ph, i32 16384, %sockaddr* %v4_9a88, i32 %v0_9a8c)
  %v3_9a94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a94, i32* %r3.global-to-local, align 4
  %v1_9a98 = add i32 %v3_9a94, 1
  store i32 %v1_9a98, i32* %r0.global-to-local, align 4
  %v1_9a9c = load i32, i32* @sl, align 4
  %v9_9a9c = icmp eq i32 %v1_9a98, %v1_9a9c
  store i1 %v9_9a9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9a98, i32* %stack_var_-44, align 4
  %v6_9aa4 = icmp slt i32 %v1_9a98, %v1_9a9c
  br i1 %v6_9aa4, label %dec_label_pc_9928, label %dec_label_pc_9914

dec_label_pc_9aac:                                ; preds = %dec_label_pc_9928
  %v1_9aac = add i32 %v2_9930, 16
  %v2_9aac = inttoptr i32 %v1_9aac to i32*
  %v3_9aac = load i32, i32* %v2_9aac, align 4
  store i32 %v3_9aac, i32* %r4.global-to-local, align 4
  %v0_9ab0 = call i32 @function_ee68()
  store i32 %v0_9ab0, i32* %r0.global-to-local, align 4
  %v3_9ab4 = load i32, i32* %stack_var_-44, align 4
  %v5_9abc = mul i32 %v3_9ab4, 24
  %v0_9ac0 = load i32, i32* %r4.global-to-local, align 4
  %v1_9ac0 = and i32 %v0_9ac0, 16711680
  store i32 %v1_9ac0, i32* %ip.global-to-local, align 4
  %v3_9ac4 = udiv i32 %v0_9ac0, 16777216
  %v4_9ac8 = udiv i32 %v1_9ac0, 256
  %v5_9ac8 = or i32 %v4_9ac8, %v3_9ac4
  store i32 %v5_9ac8, i32* %r2.global-to-local, align 4
  %v1_9acc = load i32, i32* %sb.global-to-local, align 4
  %v2_9acc = add i32 %v1_9acc, %v5_9abc
  store i32 %v2_9acc, i32* %r1.global-to-local, align 4
  %v1_9ad0 = and i32 %v0_9ac0, 65280
  store i32 %v1_9ad0, i32* %r3.global-to-local, align 4
  %v1_9ad4 = add i32 %v2_9acc, 20
  %v2_9ad4 = inttoptr i32 %v1_9ad4 to i8*
  %v3_9ad4 = load i8, i8* %v2_9ad4, align 1
  %v4_9ad4 = zext i8 %v3_9ad4 to i32
  store i32 %v4_9ad4, i32* %ip.global-to-local, align 4
  %v5_9adc = call i32 @llvm.bswap.i32(i32 %v0_9ac0)
  %v7_9ae0 = lshr i32 %v0_9ab0, %v4_9ad4
  %v8_9ae0 = add i32 %v7_9ae0, %v5_9adc
  store i32 %v8_9ae0, i32* %r2.global-to-local, align 4
  %v1_9ae4 = and i32 %v8_9ae0, 16711680
  store i32 %v1_9ae4, i32* %r0.global-to-local, align 4
  store i32 %v6_9674, i32* %r1.global-to-local, align 4
  %v5_9afc = call i32 @llvm.bswap.i32(i32 %v8_9ae0)
  store i32 %v5_9afc, i32* %r3.global-to-local, align 4
  store i1 %v2_9958, i1* %cpsr_z.global-to-local, align 1
  %v1_9b04 = load i32, i32* @r5, align 4
  %v2_9b04 = add i32 %v1_9b04, 16
  %v3_9b04 = inttoptr i32 %v2_9b04 to i32*
  store i32 %v5_9afc, i32* %v3_9b04, align 4
  br i1 %v2_9958, label %dec_label_pc_9b0c, label %dec_label_pc_9960

dec_label_pc_9b0c:                                ; preds = %dec_label_pc_9aac, %dec_label_pc_9954
  %v0_9b0c = call i32 @function_ee68()
  store i32 %v0_9b0c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9b18 = load i32, i32* %fp.global-to-local, align 4
  %v9_9b18 = icmp eq i32 %v0_9b18, 65535
  store i1 %v9_9b18, i1* %cpsr_z.global-to-local, align 1
  %v1_9b1c = load i32, i32* @r5, align 4
  %v2_9b1c = add i32 %v1_9b1c, 12
  %v3_9b1c = inttoptr i32 %v2_9b1c to i32*
  store i32 %v0_9b0c, i32* %v3_9b1c, align 4
  br i1 %v9_9b18, label %dec_label_pc_9b24, label %dec_label_pc_9b0c.dec_label_pc_9970_crit_edge

dec_label_pc_9b0c.dec_label_pc_9970_crit_edge:    ; preds = %dec_label_pc_9b0c
  %v1_9974.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9970

dec_label_pc_9b24:                                ; preds = %dec_label_pc_9b0c, %dec_label_pc_9960
  %v0_9b24 = call i32 @function_ee68()
  %v3_9b2c = urem i32 %v0_9b24, 65536
  store i32 %v3_9b2c, i32* %r0.global-to-local, align 4
  store i32 %v3_96d4, i32* %r2.global-to-local, align 4
  %v1_9b38 = sub nsw i32 999, %v3_9b2c
  store i32 %v1_9b38, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* %r4.global-to-local, align 4
  %v9_9b3c = icmp eq i32 %v3_96d4, %v1_9b3c
  store i1 %v9_9b3c, i1* %cpsr_z.global-to-local, align 1
  %v1_9b40 = trunc i32 %v0_9b24 to i16
  %v2_9b40 = load i32, i32* @r5, align 4
  %v3_9b40 = add i32 %v2_9b40, 4
  %v4_9b40 = inttoptr i32 %v3_9b40 to i16*
  store i16 %v1_9b40, i16* %v4_9b40, align 2
  %v0_9b44 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b44 = trunc i32 %v0_9b44 to i16
  %v2_9b44 = load i32, i32* @r6, align 4
  %v3_9b44 = add i32 %v2_9b44, 4
  %v4_9b44 = inttoptr i32 %v3_9b44 to i16*
  store i16 %v1_9b44, i16* %v4_9b44, align 2
  br i1 %v9_9b3c, label %dec_label_pc_9b4c, label %dec_label_pc_9b24.dec_label_pc_997c_crit_edge

dec_label_pc_9b24.dec_label_pc_997c_crit_edge:    ; preds = %dec_label_pc_9b24
  %v1_9980.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_997c

dec_label_pc_9b4c:                                ; preds = %dec_label_pc_9b24, %dec_label_pc_9970
  %v0_9b4c = call i32 @function_ee68()
  %v1_9b4c = trunc i32 %v0_9b4c to i16
  store i32 %v0_9b4c, i32* %r0.global-to-local, align 4
  store i32 %v3_96d8, i32* %r3.global-to-local, align 4
  %v1_9b54 = load i32, i32* %r4.global-to-local, align 4
  %v9_9b54 = icmp eq i32 %v3_96d8, %v1_9b54
  store i1 %v9_9b54, i1* %cpsr_z.global-to-local, align 1
  %v3_9b58 = load i32, i32* @r5, align 4
  %v4_9b58 = add i32 %v3_9b58, 58
  %v5_9b58 = inttoptr i32 %v4_9b58 to i16*
  store i16 %v1_9b4c, i16* %v5_9b58, align 2
  br i1 %v9_9b54, label %dec_label_pc_9b60, label %dec_label_pc_9988

dec_label_pc_9b60:                                ; preds = %dec_label_pc_9b4c, %dec_label_pc_997c
  %v0_9b60 = call i32 @function_ee68()
  %v1_9b60 = trunc i32 %v0_9b60 to i16
  store i32 %v0_9b60, i32* %r0.global-to-local, align 4
  store i32 %v1_96cc, i32* @r4, align 4
  store i1 %v2_9b68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b68, label %.thread32, label %bb89

.thread32:                                        ; preds = %dec_label_pc_9b60
  %v3_9b7033 = load i32, i32* @r8, align 4
  %v4_9b7034 = add i32 %v3_9b7033, 2
  %v5_9b7035 = inttoptr i32 %v4_9b7034 to i16*
  store i16 %v1_9b60, i16* %v5_9b7035, align 2
  br label %dec_label_pc_9b7c

bb89:                                             ; preds = %dec_label_pc_9b60
  %v1_9b6c = load i32, i32* @r5, align 4
  %v2_9b6c = add i32 %v1_9b6c, 16
  %v3_9b6c = inttoptr i32 %v2_9b6c to i32*
  %v4_9b6c = load i32, i32* %v3_9b6c, align 4
  store i32 %v4_9b6c, i32* %r3.global-to-local, align 4
  %v3_9b70 = load i32, i32* @r8, align 4
  %v4_9b70 = add i32 %v3_9b70, 2
  %v5_9b70 = inttoptr i32 %v4_9b70 to i16*
  store i16 %v1_9b60, i16* %v5_9b70, align 2
  %v1_9b74 = load i32, i32* %r3.global-to-local, align 4
  %v2_9b74 = load i32, i32* @r6, align 4
  %v3_9b74 = add i32 %v2_9b74, 16
  %v4_9b74 = inttoptr i32 %v3_9b74 to i32*
  store i32 %v1_9b74, i32* %v4_9b74, align 4
  br label %dec_label_pc_999c

dec_label_pc_9b7c:                                ; preds = %.thread32, %dec_label_pc_9988
  %v0_9b7c = call i32 @function_ee68()
  store i32 %v0_9b7c, i32* %r0.global-to-local, align 4
  %v1_9b80 = load i32, i32* @r6, align 4
  %v2_9b80 = add i32 %v1_9b80, 16
  %v3_9b80 = inttoptr i32 %v2_9b80 to i32*
  store i32 %v0_9b7c, i32* %v3_9b80, align 4
  br label %dec_label_pc_999c

dec_label_pc_9b88:                                ; preds = %dec_label_pc_999c
  %v0_9b88 = load i32, i32* @r8, align 4
  %v1_9b88 = add i32 %v0_9b88, 8
  store i32 %v1_9b88, i32* %r0.global-to-local, align 4
  store i32 %v6_9620, i32* %r1.global-to-local, align 4
  %v2_9b90 = inttoptr i32 %v1_9b88 to i16*
  %v3_9b90 = call i32 @function_effc(i16* %v2_9b90, i32 %v6_9620)
  store i32 %v3_9b90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a00

dec_label_pc_9b98:                                ; preds = %dec_label_pc_9698
  store i32 %v3_9688, i32* %r0.global-to-local, align 4
  %v1_9b9c = call i32 @close(i32 %v3_9688)
  store i32 %v1_9b9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9538, %dec_label_pc_9b98
  %v1_9ba8 = phi i32 [ -1, %dec_label_pc_9538 ], [ %v1_9b9c, %dec_label_pc_9b98 ]
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  store i32 %v6_9538, i32* %r5.global-to-local, align 4
  store i32 %v9_9538, i32* %r6.global-to-local, align 4
  store i32 %v12_9538, i32* %r7.global-to-local, align 4
  store i32 %v15_9538, i32* %r8.global-to-local, align 4
  ret i32 %v1_9ba8

dec_label_pc_9bac:                                ; preds = %dec_label_pc_96c0
  %v1_9bb4 = add i32 %v6_9620, 8
  store i32 %v1_9bb4, i32* %r1.global-to-local, align 4
  %v1_9bb8 = add i32 %v6_9620, 66
  store i32 %v1_9bb8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9914.preheader

; uselistorder directives
  uselistorder i32 %v1_9bb8, { 1, 0 }
  uselistorder i32 %v1_9bb4, { 1, 0 }
  uselistorder i16 %v1_9b60, { 1, 0 }
  uselistorder i32 %v0_9b60, { 1, 0 }
  uselistorder i32 %v0_9b4c, { 1, 0 }
  uselistorder i32 %v3_9b2c, { 1, 0 }
  uselistorder i32 %v0_9b24, { 1, 0 }
  uselistorder i32 %v5_9afc, { 1, 0 }
  uselistorder i32 %v0_9ac0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9a9c, { 1, 2, 0 }
  uselistorder i32 %v1_9a98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_9a4c, { 1, 0, 2 }
  uselistorder i32 %v4_9a48, { 1, 0 }
  uselistorder i32 %v0_9a34, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9a28, { 1, 0 }
  uselistorder i32 %v7_993c, { 2, 1, 0, 3 }
  uselistorder i1 %v2_9958, { 3, 0, 1, 2 }
  uselistorder i1 %v2_9b68, { 2, 3, 1, 0 }
  uselistorder i32 %v0_98ac, { 1, 0, 2 }
  uselistorder i32 %v3_9728, { 1, 0 }
  uselistorder i32 %v3_970c, { 1, 2, 0 }
  uselistorder i32 %v1_9708, { 1, 0 }
  uselistorder i32 %v1_96cc, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v0_96c8, { 1, 0, 3, 2 }
  uselistorder i32 %v3_96c4, { 1, 0 }
  uselistorder i32 %v0_96c4, { 1, 0, 3, 2 }
  uselistorder i32 %v3_96c0, { 1, 0 }
  uselistorder i32 %v0_96c0, { 1, 0, 3, 2 }
  uselistorder i32 %v3_9688, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_9674, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v1_9640, { 1, 2, 3, 0 }
  uselistorder i32 %v6_9620, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_95d4, { 1, 2, 0 }
  uselistorder i32 %v1_95b0, { 3, 2, 1, 0 }
  uselistorder i32 %v6_95a8, { 1, 0 }
  uselistorder i32 %v6_956c, { 2, 1, 3, 0 }
  uselistorder i32 %v4_9554, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 10 }
  uselistorder i32* %sb.global-to-local, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 45, 46, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 37, 38, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20, 22, 21, 23, 24, 26, 25, 28, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 11, 4, 5, 7, 8, 6, 10, 9, 12, 33, 35, 1, 36, 37, 39, 38, 40, 41, 42, 43, 14, 13, 18, 15, 16, 34, 32, 17, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 19, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_9ba0, { 1, 0 }
  uselistorder label %dec_label_pc_9a00, { 1, 0 }
  uselistorder label %dec_label_pc_999c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9914, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9914.preheader, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread26, { 1, 0 }
}

define i32 @function_9bcc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9bcc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9bcc = load i32, i32* @r4, align 4
  %v6_9bcc = load i32, i32* @r5, align 4
  %v9_9bcc = load i32, i32* @r6, align 4
  %v12_9bcc = load i32, i32* @r7, align 4
  %v15_9bcc = load i32, i32* @r8, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9be8 = call i32* @calloc(i32 4, i32 4)
  %v4_9be8 = ptrtoint i32* %v2_9be8 to i32
  %v0_9bec = load i32, i32* @r5, align 4
  store i32 %v0_9bec, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9bfc = load i32, i32* @r4, align 4
  %v5_9c00 = inttoptr i32 %v0_9bec to i32*
  %v6_9c00 = call i32 @function_913c(i32 %v0_9bfc, i32* %v5_9c00, i32 2, i32 0, i32 %v4_9be8)
  %v1_9c0c = urem i32 %v6_9c00, 256
  store i32 %v1_9c0c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9c18 = load i32, i32* @r5, align 4
  store i32 %v0_9c18, i32* %r1.global-to-local, align 4
  %v0_9c1c = load i32, i32* @r4, align 4
  %v5_9c20 = trunc i32 %v6_9c00 to i8
  %v6_9c24 = inttoptr i32 %v0_9c18 to i32*
  %v7_9c24 = call i32 @function_913c(i32 %v0_9c1c, i32* %v6_9c24, i32 3, i32 65535, i32 %v6_9c00)
  %v0_9c28 = load i32, i32* @r5, align 4
  store i32 %v0_9c28, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9c24, i32* %fp.global-to-local, align 4
  %v0_9c38 = load i32, i32* @r4, align 4
  %v5_9c3c = inttoptr i32 %v0_9c28 to i32*
  %v6_9c3c = call i32 @function_913c(i32 %v0_9c38, i32* %v5_9c3c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9c44 = urem i32 %v6_9c3c, 256
  store i32 %v1_9c44, i32* %ip.global-to-local, align 4
  %v0_9c48 = load i32, i32* @r5, align 4
  store i32 %v0_9c48, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c54 = load i32, i32* @r4, align 4
  %v6_9c5c = inttoptr i32 %v0_9c48 to i32*
  %v7_9c5c = call i32 @function_913c(i32 %v0_9c54, i32* %v6_9c5c, i32 5, i32 1, i32 %v1_9c44)
  %v1_9c68 = urem i32 %v7_9c5c, 256
  store i32 %v1_9c68, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  store i32 %v0_9c74, i32* %r1.global-to-local, align 4
  %v0_9c78 = load i32, i32* @r4, align 4
  %v5_9c80 = inttoptr i32 %v0_9c74 to i32*
  %v6_9c80 = call i32 @function_913c(i32 %v0_9c78, i32* %v5_9c80, i32 6, i32 65535, i32 %v1_9c68)
  %v0_9c88 = load i32, i32* @r5, align 4
  store i32 %v0_9c88, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9c80, i32* @r8, align 4
  %v0_9c98 = load i32, i32* @r4, align 4
  %v5_9c9c = inttoptr i32 %v0_9c88 to i32*
  %v6_9c9c = call i32 @function_913c(i32 %v0_9c98, i32* %v5_9c9c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9c9c, i32* @r7, align 4
  %v0_9cb0 = load i32, i32* @r4, align 4
  %v5_9cb4 = inttoptr i32 %v0_9ca0 to i32*
  %v6_9cb4 = call i32 @function_913c(i32 %v0_9cb0, i32* %v5_9cb4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cc4 = load i32, i32* @r5, align 4
  store i32 %v0_9cc4, i32* %r1.global-to-local, align 4
  %v0_9cc8 = load i32, i32* @r4, align 4
  %v5_9ccc = inttoptr i32 %v0_9cc4 to i32*
  %v6_9ccc = call i32 @function_913c(i32 %v0_9cc8, i32* %v5_9ccc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9cd4 = urem i32 %v6_9ccc, 256
  store i32 %v1_9cd4, i32* %ip.global-to-local, align 4
  %v0_9cd8 = load i32, i32* @r5, align 4
  store i32 %v0_9cd8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r4, align 4
  %v5_9cec = inttoptr i32 %v0_9cd8 to i32*
  %v6_9cec = call i32 @function_913c(i32 %v0_9ce4, i32* %v5_9cec, i32 19, i32 0, i32 %v1_9cd4)
  %v0_9cf4 = load i32, i32* @r5, align 4
  store i32 %v0_9cf4, i32* %r1.global-to-local, align 4
  %v2_9cf8 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_9cf8, i32* %r3.global-to-local, align 4
  store i32 %v6_9cec, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9d04 = load i32, i32* @r4, align 4
  %v5_9d08 = inttoptr i32 %v0_9cf4 to i32*
  %v6_9d08 = call i32 @function_913c(i32 %v0_9d04, i32* %v5_9d08, i32 25, i32 %v2_9cf8, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9d1c = call i32 @socket(i32 2, i32 3, i32 6)
  %v2_9d20 = icmp eq i32 %v3_9d1c, -1
  store i1 %v2_9d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d20, label %dec_label_pc_a1c0, label %dec_label_pc_9d2c

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9bcc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9d34 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9d34, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_9d48 = call i32 @setsockopt(i32 %v3_9d1c, i32 0, i32 3, i32* nonnull %stack_var_-44, i32 4)
  %v2_9d4c = icmp eq i32 %v7_9d48, -1
  store i1 %v2_9d4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d4c, label %dec_label_pc_a1b8, label %dec_label_pc_9d54

dec_label_pc_9d54:                                ; preds = %dec_label_pc_9d2c
  %v0_9d54 = load i32, i32* @r8, align 4
  %v3_9d54 = mul i32 %v0_9d54, 65536
  store i32 %v3_9d54, i32* %r8.global-to-local, align 4
  %v0_9d58 = load i32, i32* @r7, align 4
  %v3_9d58 = mul i32 %v0_9d58, 65536
  store i32 %v3_9d58, i32* %r7.global-to-local, align 4
  %v0_9d5c = load i32, i32* %fp.global-to-local, align 4
  %v0_9d60 = load i32, i32* @r6, align 4
  %v1_9d60 = urem i32 %v0_9d60, 256
  store i32 %v1_9d60, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9d68 = urem i32 %v0_9d54, 65536
  store i32 %v3_9d68, i32* %r3.global-to-local, align 4
  %v3_9d6c = urem i32 %v0_9d58, 65536
  store i32 %v3_9d6c, i32* %r4.global-to-local, align 4
  %v0_9d70 = load i32, i32* @sl, align 4
  %v2_9d70 = icmp eq i32 %v0_9d70, 0
  store i1 %v2_9d70, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9d88 = urem i32 %v0_9d5c, 65536
  store i32 %v3_9d88, i32* %fp.global-to-local, align 4
  br i1 %v2_9d70, label %dec_label_pc_a1cc, label %dec_label_pc_9d98

dec_label_pc_9d98:                                ; preds = %dec_label_pc_9d54
  %v0_9d5c.not = or i32 %v0_9d5c, -65536
  %v1_9d9c = xor i32 %v0_9d5c.not, 65535
  %v3_9da0 = mul i32 %v6_9cb4, 65536
  %v1_9da4 = add i32 %v3_9da0, 3407872
  %tmp68 = udiv i32 %v1_9da4, 256
  %v3_9db8 = and i32 %tmp68, 65280
  %tmp69 = mul nsw i32 %v1_9d9c, 256
  %v3_9dbc = and i32 %tmp69, 65280
  store i32 %v3_9dbc, i32* %ip.global-to-local, align 4
  %v1_9dc0 = add i32 %v3_9da0, 524288
  %v1_9dc8 = add i32 %v3_9da0, 1835008
  %tmp70 = udiv i32 %v1_9d9c, 256
  %v4_9dcc = urem i32 %tmp70, 256
  %v5_9dcc = or i32 %v4_9dcc, %v3_9dbc
  %v4_9dd4 = udiv i32 %v1_9da4, 16777216
  %v5_9dd4 = or i32 %v3_9db8, %v4_9dd4
  store i32 %v5_9dd4, i32* %r8.global-to-local, align 4
  %v3_9de0 = udiv i32 %v1_9dc8, 256
  %tmp71 = mul i32 %v0_9d5c, 256
  %v3_9de4 = and i32 %tmp71, 65280
  store i32 %v3_9d54, i32* %r2.global-to-local, align 4
  %tmp72 = udiv i32 %v0_9d5c, 256
  %v4_9df4 = urem i32 %tmp72, 256
  %v5_9df4 = or i32 %v4_9df4, %v3_9de4
  %tmp73 = mul i32 %v0_9d54, 256
  %v3_9df8 = and i32 %tmp73, 65280
  %v1_9dfc = and i32 %v3_9de0, 65280
  store i32 %v1_9dfc, i32* %r6.global-to-local, align 4
  store i32 %v3_9d58, i32* %r1.global-to-local, align 4
  %tmp74 = mul i32 %v0_9d58, 256
  %v3_9e08 = and i32 %tmp74, 65280
  %tmp75 = udiv i32 %v0_9d54, 256
  %v4_9e0c = urem i32 %tmp75, 256
  %v5_9e0c = or i32 %v4_9e0c, %v3_9df8
  %v4_9e10 = udiv i32 %v1_9dc8, 16777216
  %v5_9e10 = or i32 %v1_9dfc, %v4_9e10
  store i32 %v5_9e10, i32* %r3.global-to-local, align 4
  %tmp76 = udiv i32 %v0_9d58, 256
  %v4_9e14 = urem i32 %tmp76, 256
  %v5_9e14 = or i32 %v4_9e14, %v3_9e08
  %tmp77 = udiv i32 %v1_9dc0, 256
  %v3_9e18 = and i32 %tmp77, 65280
  store i32 %v3_9e18, i32* %r5.global-to-local, align 4
  %v4_9e2c = udiv i32 %v1_9dc0, 16777216
  %v5_9e2c = or i32 %v3_9e18, %v4_9e2c
  store i32 %v5_9e2c, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %sext13 = mul nuw i32 %v5_9df4, 65536
  %v4_9e9814 = sdiv i32 %sext13, 65536
  %sext9 = mul nuw i32 %v5_9e10, 65536
  %v4_9efc = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_9dcc, 65536
  %v4_9f00 = sdiv i32 %sext10, 65536
  %v1_9f08 = trunc i32 %v4_9efc to i16
  %v2_9f30 = icmp eq i32 %v1_9d60, 0
  %sext11 = mul nuw i32 %v5_9e0c, 65536
  %v4_9f50 = sdiv i32 %sext11, 65536
  %sext12 = mul nuw i32 %v5_9e14, 65536
  %v4_9f58 = sdiv i32 %sext12, 65536
  %v1_9e90 = trunc i32 %v6_9c3c to i8
  br label %dec_label_pc_9e34

dec_label_pc_9e34:                                ; preds = %bb83, %dec_label_pc_9d98
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9e40 = call i32* @calloc(i32 1510, i32 4)
  %v4_9e40 = ptrtoint i32* %v2_9e40 to i32
  store i32 %v4_9be8, i32* %r2.global-to-local, align 4
  %v3_9e48 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9e48, i32* %r3.global-to-local, align 4
  %v2_9e4c = load i32, i32* %r4.global-to-local, align 4
  %v5_9e4c = mul i32 %v2_9e4c, 4
  %v6_9e4c = add i32 %v5_9e4c, %v4_9be8
  %v7_9e4c = inttoptr i32 %v6_9e4c to i32*
  store i32 %v4_9e40, i32* %v7_9e4c, align 4
  %v0_9e50 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e50 = load i32, i32* %r3.global-to-local, align 4
  %v4_9e50 = mul i32 %v1_9e50, 4
  %v5_9e50 = add i32 %v4_9e50, %v0_9e50
  %v6_9e50 = inttoptr i32 %v5_9e50 to i32*
  %v7_9e50 = load i32, i32* %v6_9e50, align 4
  store i32 %v7_9e50, i32* %r4.global-to-local, align 4
  %v1_9e54 = inttoptr i32 %v7_9e50 to i8*
  %v2_9e54 = load i8, i8* %v1_9e54, align 1
  %tmp = urem i8 %v2_9e54, 16
  %v1_9e58 = zext i8 %tmp to i32
  %v1_9e5c = or i32 %v1_9e58, 64
  store i32 %v1_9e5c, i32* %r2.global-to-local, align 4
  %v1_9e60 = trunc i32 %v1_9e5c to i8
  store i8 %v1_9e60, i8* %v1_9e54, align 1
  %v0_9e64 = load i32, i32* %r3.global-to-local, align 4
  %v5_9e68 = mul i32 %v0_9e64, 24
  store i32 %v5_9e68, i32* %r1.global-to-local, align 4
  %v0_9e6c = load i32, i32* %r4.global-to-local, align 4
  %v1_9e6c = inttoptr i32 %v0_9e6c to i8*
  %v2_9e6c = load i8, i8* %v1_9e6c, align 1
  %v1_9e70 = and i8 %v2_9e6c, -16
  %v1_9e74 = or i8 %v1_9e70, 5
  store i32 %v1_9c68, i32* %r5.global-to-local, align 4
  store i8 %v1_9e74, i8* %v1_9e6c, align 1
  store i32 %v6_9c00, i32* %r2.global-to-local, align 4
  %v2_9e84 = load i32, i32* %r4.global-to-local, align 4
  %v3_9e84 = add i32 %v2_9e84, 1
  %v4_9e84 = inttoptr i32 %v3_9e84 to i8*
  store i8 %v5_9c20, i8* %v4_9e84, align 1
  store i32 %v1_9c44, i32* %r3.global-to-local, align 4
  %v0_9e8c = load i32, i32* %r5.global-to-local, align 4
  %v2_9e8c = icmp eq i32 %v0_9e8c, 0
  store i1 %v2_9e8c, i1* %cpsr_z.global-to-local, align 1
  %v2_9e90 = load i32, i32* %r4.global-to-local, align 4
  %v3_9e90 = add i32 %v2_9e90, 8
  %v4_9e90 = inttoptr i32 %v3_9e90 to i8*
  store i8 %v1_9e90, i8* %v4_9e90, align 1
  %v0_9e94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9e94, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9e34
  store i32 %v4_9e9814, i32* %r5.global-to-local, align 4
  br label %bb78

bb:                                               ; preds = %dec_label_pc_9e34
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9e9814, i32* %r5.global-to-local, align 4
  %v3_9e9c = load i32, i32* %r4.global-to-local, align 4
  %v4_9e9c = add i32 %v3_9e9c, 6
  %v5_9e9c = inttoptr i32 %v4_9e9c to i16*
  store i16 64, i16* %v5_9e9c, align 2
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v2_9ea4 = load i32, i32* %r4.global-to-local, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 9
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i8*
  store i8 47, i8* %v4_9ea4, align 1
  %v0_9ea8 = load i32, i32* %r4.global-to-local, align 4
  %v1_9ea8 = add i32 %v0_9ea8, 20
  store i32 %v1_9ea8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9eb0 = load i32, i32* %r5.global-to-local, align 4
  %v1_9eb0 = trunc i32 %v0_9eb0 to i16
  %v3_9eb0 = add i32 %v0_9ea8, 4
  %v4_9eb0 = inttoptr i32 %v3_9eb0 to i16*
  store i16 %v1_9eb0, i16* %v4_9eb0, align 2
  %v0_9eb4 = load i32, i32* %r8.global-to-local, align 4
  %v1_9eb4 = trunc i32 %v0_9eb4 to i16
  %v2_9eb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_9eb4 = add i32 %v2_9eb4, 2
  %v4_9eb4 = inttoptr i32 %v3_9eb4 to i16*
  store i16 %v1_9eb4, i16* %v4_9eb4, align 2
  %v0_9eb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9eb8 = trunc i32 %v0_9eb8 to i16
  %v2_9eb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_9eb8 = add i32 %v2_9eb8, 2
  %v4_9eb8 = inttoptr i32 %v3_9eb8 to i16*
  store i16 %v1_9eb8, i16* %v4_9eb8, align 2
  store i32 %v6_9d08, i32* %r3.global-to-local, align 4
  %v0_9ec0 = load i32, i32* %r4.global-to-local, align 4
  %v1_9ec0 = add i32 %v0_9ec0, 24
  %v2_9ec0 = inttoptr i32 %v1_9ec0 to i8*
  %v3_9ec0 = load i8, i8* %v2_9ec0, align 1
  %v4_9ec0 = zext i8 %v3_9ec0 to i32
  store i32 %v4_9ec0, i32* %r2.global-to-local, align 4
  %v2_9ec4 = add i32 %v0_9ec0, 12
  %v3_9ec4 = inttoptr i32 %v2_9ec4 to i32*
  store i32 %v6_9d08, i32* %v3_9ec4, align 4
  %v0_9ec8 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ec8 = and i32 %v0_9ec8, -241
  %v1_9ecc = or i32 %v1_9ec8, 64
  store i32 %v1_9ecc, i32* %r2.global-to-local, align 4
  %v0_9ed0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ed0 = load i32, i32* %sb.global-to-local, align 4
  %v2_9ed0 = add i32 %v1_9ed0, %v0_9ed0
  store i32 %v2_9ed0, i32* %r1.global-to-local, align 4
  %v1_9ed4 = add i32 %v2_9ed0, 16
  %v2_9ed4 = inttoptr i32 %v1_9ed4 to i32*
  %v3_9ed4 = load i32, i32* %v2_9ed4, align 4
  store i32 %v3_9ed4, i32* %r1.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v1_9ecc to i8
  %v2_9ed8 = load i32, i32* %r4.global-to-local, align 4
  %v3_9ed8 = add i32 %v2_9ed8, 24
  %v4_9ed8 = inttoptr i32 %v3_9ed8 to i8*
  store i8 %v1_9ed8, i8* %v4_9ed8, align 1
  %v0_9edc = load i32, i32* %r4.global-to-local, align 4
  %v1_9edc = add i32 %v0_9edc, 24
  %v2_9edc = inttoptr i32 %v1_9edc to i8*
  %v3_9edc = load i8, i8* %v2_9edc, align 1
  %v1_9ee0 = and i8 %v3_9edc, -16
  %v1_9ee4 = or i8 %v1_9ee0, 5
  store i8 %v1_9ee4, i8* %v2_9edc, align 1
  %v0_9eec = load i32, i32* %r1.global-to-local, align 4
  %v1_9eec = load i32, i32* %r4.global-to-local, align 4
  %v2_9eec = add i32 %v1_9eec, 16
  %v3_9eec = inttoptr i32 %v2_9eec to i32*
  store i32 %v0_9eec, i32* %v3_9eec, align 4
  %v0_9ef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_9ef4 = add i32 %v0_9ef4, 24
  store i32 %v1_9ef4, i32* %r5.global-to-local, align 4
  %v3_9ef8 = add i32 %v0_9ef4, 25
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i8*
  store i8 %v5_9c20, i8* %v4_9ef8, align 1
  store i32 %v4_9efc, i32* %r2.global-to-local, align 4
  store i32 %v4_9f00, i32* %r3.global-to-local, align 4
  store i32 %v1_9c44, i32* %r1.global-to-local, align 4
  %v2_9f08 = load i32, i32* %r5.global-to-local, align 4
  %v3_9f08 = add i32 %v2_9f08, 2
  %v4_9f08 = inttoptr i32 %v3_9f08 to i16*
  store i16 %v1_9f08, i16* %v4_9f08, align 2
  %v0_9f0c = load i32, i32* %r3.global-to-local, align 4
  %v1_9f0c = trunc i32 %v0_9f0c to i16
  %v2_9f0c = load i32, i32* %r5.global-to-local, align 4
  %v3_9f0c = add i32 %v2_9f0c, 4
  %v4_9f0c = inttoptr i32 %v3_9f0c to i16*
  store i16 %v1_9f0c, i16* %v4_9f0c, align 2
  %v0_9f10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f10, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9f18 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f18 = trunc i32 %v0_9f18 to i8
  %v2_9f18 = load i32, i32* %r5.global-to-local, align 4
  %v3_9f18 = add i32 %v2_9f18, 8
  %v4_9f18 = inttoptr i32 %v3_9f18 to i8*
  store i8 %v1_9f18, i8* %v4_9f18, align 1
  %v0_9f1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f1c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_9f1c = load i32, i32* %r2.global-to-local, align 4
  %v2_9f1c = trunc i32 %v1_9f1c to i16
  %v3_9f1c = load i32, i32* %r5.global-to-local, align 4
  %v4_9f1c = add i32 %v3_9f1c, 6
  %v5_9f1c = inttoptr i32 %v4_9f1c to i16*
  store i16 %v2_9f1c, i16* %v5_9f1c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v0_9f20 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f20 = trunc i32 %v0_9f20 to i8
  %v2_9f20 = load i32, i32* %r5.global-to-local, align 4
  %v3_9f20 = add i32 %v2_9f20, 9
  %v4_9f20 = inttoptr i32 %v3_9f20 to i8*
  store i8 %v1_9f20, i8* %v4_9f20, align 1
  %v0_9f24 = call i32 @function_ee68()
  store i32 %v1_9d60, i32* %r1.global-to-local, align 4
  store i1 %v2_9f30, i1* %cpsr_z.global-to-local, align 1
  %v1_9f34 = sub i32 1023, %v0_9f24
  store i32 %v1_9f34, i32* %r3.global-to-local, align 4
  br i1 %v2_9f30, label %.thread15, label %.thread16

.thread15:                                        ; preds = %bb82
  %v2_9f3c = load i32, i32* %r5.global-to-local, align 4
  %v3_9f3c = add i32 %v2_9f3c, 16
  %v4_9f3c = inttoptr i32 %v3_9f3c to i32*
  store i32 %v1_9f34, i32* %v4_9f3c, align 4
  br label %bb83

.thread16:                                        ; preds = %bb82
  %v1_9f38 = load i32, i32* %r4.global-to-local, align 4
  %v2_9f38 = add i32 %v1_9f38, 16
  %v3_9f38 = inttoptr i32 %v2_9f38 to i32*
  %v4_9f38 = load i32, i32* %v3_9f38, align 4
  store i32 %v4_9f38, i32* %r3.global-to-local, align 4
  %v2_9f40 = load i32, i32* %r5.global-to-local, align 4
  %v3_9f40 = add i32 %v2_9f40, 16
  %v4_9f40 = inttoptr i32 %v3_9f40 to i32*
  store i32 %v4_9f38, i32* %v4_9f40, align 4
  br label %bb83

bb83:                                             ; preds = %.thread15, %.thread16
  %v1_9f44 = load i32, i32* %r5.global-to-local, align 4
  %v2_9f44 = add i32 %v1_9f44, 12
  %v3_9f44 = inttoptr i32 %v2_9f44 to i32*
  store i32 %v0_9f24, i32* %v3_9f44, align 4
  %v3_9f48 = load i32, i32* %stack_var_-44, align 4
  %v0_9f4c = load i32, i32* %r4.global-to-local, align 4
  %v1_9f4c = add i32 %v0_9f4c, 44
  store i32 %v1_9f4c, i32* %r6.global-to-local, align 4
  store i32 %v4_9f50, i32* %r2.global-to-local, align 4
  %v1_9f54 = add i32 %v3_9f48, 1
  store i32 %v1_9f54, i32* %r4.global-to-local, align 4
  store i32 %v4_9f58, i32* %r3.global-to-local, align 4
  %v1_9f5c = load i32, i32* @sl, align 4
  %v9_9f5c = icmp eq i32 %v1_9f54, %v1_9f5c
  store i1 %v9_9f5c, i1* %cpsr_z.global-to-local, align 1
  %v0_9f60 = load i32, i32* %r7.global-to-local, align 4
  %v1_9f60 = trunc i32 %v0_9f60 to i16
  %v3_9f60 = add i32 %v0_9f4c, 48
  %v4_9f60 = inttoptr i32 %v3_9f60 to i16*
  store i16 %v1_9f60, i16* %v4_9f60, align 2
  %v0_9f64 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f64 = trunc i32 %v0_9f64 to i16
  %v2_9f64 = load i32, i32* %r6.global-to-local, align 4
  %v3_9f64 = inttoptr i32 %v2_9f64 to i16*
  store i16 %v1_9f64, i16* %v3_9f64, align 2
  %v0_9f68 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f68 = trunc i32 %v0_9f68 to i16
  %v2_9f68 = load i32, i32* %r6.global-to-local, align 4
  %v3_9f68 = add i32 %v2_9f68, 2
  %v4_9f68 = inttoptr i32 %v3_9f68 to i16*
  store i16 %v1_9f68, i16* %v4_9f68, align 2
  %v0_9f6c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_9f6c, i32* %stack_var_-44, align 4
  %v5_9f70 = icmp slt i32 %v1_9f54, %v1_9f5c
  br i1 %v5_9f70, label %dec_label_pc_9e34, label %dec_label_pc_9f74

dec_label_pc_9f74:                                ; preds = %bb83
  store i32 %v6_9cb4, i32* %r5.global-to-local, align 4
  %v1_9f7c = add i32 %v6_9cb4, 8
  store i32 %v1_9f7c, i32* %r4.global-to-local, align 4
  %v0_9f8c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9f88.preheader

dec_label_pc_9f88.preheader:                      ; preds = %dec_label_pc_9f74, %dec_label_pc_a1cc
  %v0_9f8c.pre = phi i32 [ %v0_9f8c.pre.pre, %dec_label_pc_9f74 ], [ 0, %dec_label_pc_a1cc ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9f7c, %dec_label_pc_9f74 ], [ %v1_a1d4, %dec_label_pc_a1cc ]
  %storemerge = add i32 %v6_9cb4, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_a180 = icmp eq i32 %v1_9d60, 0
  %v2_a19c = icmp eq i32 %v1_9cd4, 0
  %v2_9fc8 = icmp eq i32 %v6_9d08, -1
  br label %dec_label_pc_9f88

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9f88, %dec_label_pc_a018, %dec_label_pc_9f88.preheader
  %v0_9f8c = phi i32 [ %v0_9f8c.pre, %dec_label_pc_9f88.preheader ], [ 0, %dec_label_pc_9f88 ], [ %v1_a0b4, %dec_label_pc_a018 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f8c = icmp eq i32 %v0_9f8c, 0
  store i1 %v2_9f8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f8c, label %dec_label_pc_9f88, label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9f88
  br label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_a018, %dec_label_pc_9f98
  %v1_9fb0 = phi i32 [ %v1_a0b0, %dec_label_pc_a018 ], [ 0, %dec_label_pc_9f98 ]
  %v5_9fa0 = mul i32 %v1_9fb0, 24
  %v1_9fa4 = load i32, i32* %sb.global-to-local, align 4
  %v2_9fa4 = add i32 %v1_9fa4, %v5_9fa0
  store i32 %v2_9fa4, i32* %r3.global-to-local, align 4
  store i32 %v4_9be8, i32* %r4.global-to-local, align 4
  %v1_9fac = add i32 %v2_9fa4, 20
  %v2_9fac = inttoptr i32 %v1_9fac to i8*
  %v3_9fac = load i8, i8* %v2_9fac, align 1
  %v4_9fac = zext i8 %v3_9fac to i32
  store i32 %v4_9fac, i32* %r2.global-to-local, align 4
  %v4_9fb0 = mul i32 %v1_9fb0, 4
  %v5_9fb0 = add i32 %v4_9fb0, %v4_9be8
  %v6_9fb0 = inttoptr i32 %v5_9fb0 to i32*
  %v7_9fb0 = load i32, i32* %v6_9fb0, align 4
  store i32 %v7_9fb0, i32* @r5, align 4
  %v7_9fb4 = icmp eq i8 %v3_9fac, 31
  store i1 %v7_9fb4, i1* %cpsr_z.global-to-local, align 1
  %v1_9fb8 = add i32 %v7_9fb0, 24
  store i32 %v1_9fb8, i32* @r6, align 4
  %v1_9fbc = add i32 %v7_9fb0, 44
  store i32 %v1_9fbc, i32* @r7, align 4
  %tmp87 = icmp ult i8 %v3_9fac, 32
  br i1 %tmp87, label %dec_label_pc_a0c4, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f9c
  store i32 %v6_9d08, i32* %r1.global-to-local, align 4
  store i1 %v2_9fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fc8, label %dec_label_pc_a124, label %dec_label_pc_9fd0

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_a0c4, %dec_label_pc_9fc4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9fd8 = load i32, i32* %fp.global-to-local, align 4
  %v9_9fd8 = icmp eq i32 %v0_9fd8, 65535
  store i1 %v9_9fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9fd8, label %dec_label_pc_a13c, label %dec_label_pc_9fe0

dec_label_pc_9fe0:                                ; preds = %dec_label_pc_a124.dec_label_pc_9fe0_crit_edge, %dec_label_pc_9fd0
  %v1_9fe4 = phi i32 [ %v1_9fe4.pre, %dec_label_pc_a124.dec_label_pc_9fe0_crit_edge ], [ 65535, %dec_label_pc_9fd0 ]
  store i32 %v3_9d68, i32* %r2.global-to-local, align 4
  %v9_9fe4 = icmp eq i32 %v3_9d68, %v1_9fe4
  store i1 %v9_9fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9fe4, label %dec_label_pc_a164, label %dec_label_pc_9fec

dec_label_pc_9fec:                                ; preds = %dec_label_pc_a13c.dec_label_pc_9fec_crit_edge, %dec_label_pc_9fe0
  %v1_9ff0 = phi i32 [ %v1_9ff0.pre, %dec_label_pc_a13c.dec_label_pc_9fec_crit_edge ], [ %v1_9fe4, %dec_label_pc_9fe0 ]
  store i32 %v3_9d6c, i32* %r3.global-to-local, align 4
  %v9_9ff0 = icmp eq i32 %v3_9d6c, %v1_9ff0
  store i1 %v9_9ff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9ff0, label %dec_label_pc_a178, label %dec_label_pc_9ff8

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_a164, %dec_label_pc_9fec
  store i32 %v1_9d60, i32* @r4, align 4
  store i1 %v2_a180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a180, label %dec_label_pc_a194, label %.thread17

.thread17:                                        ; preds = %dec_label_pc_9ff8
  %v1_a000 = load i32, i32* @r5, align 4
  %v2_a000 = add i32 %v1_a000, 16
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  %v4_a000 = load i32, i32* %v3_a000, align 4
  store i32 %v4_a000, i32* %r3.global-to-local, align 4
  %v2_a004 = load i32, i32* @r6, align 4
  %v3_a004 = add i32 %v2_a004, 16
  %v4_a004 = inttoptr i32 %v3_a004 to i32*
  store i32 %v4_a000, i32* %v4_a004, align 4
  br label %dec_label_pc_a00c

dec_label_pc_a00c:                                ; preds = %bb86, %.thread17
  store i32 %v1_9cd4, i32* %r1.global-to-local, align 4
  store i1 %v2_a19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a19c, label %dec_label_pc_a018, label %dec_label_pc_a1a8

dec_label_pc_a018:                                ; preds = %dec_label_pc_a00c, %dec_label_pc_a194, %dec_label_pc_a1a8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a01c = load i32, i32* @r5, align 4
  %v3_a01c = add i32 %v2_a01c, 10
  %v4_a01c = inttoptr i32 %v3_a01c to i16*
  store i16 0, i16* %v4_a01c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a024 = load i32, i32* @r5, align 4
  store i32 %v0_a024, i32* @r0, align 4
  %v2_a028 = call i32 @function_d414(i32 %v0_a024, i32 20)
  %v3_a028 = trunc i32 %v2_a028 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a030 = load i32, i32* @r5, align 4
  %v4_a030 = add i32 %v3_a030, 10
  %v5_a030 = inttoptr i32 %v4_a030 to i16*
  store i16 %v3_a028, i16* %v5_a030, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a038 = load i32, i32* %r3.global-to-local, align 4
  %v1_a038 = trunc i32 %v0_a038 to i16
  %v2_a038 = load i32, i32* @r6, align 4
  %v3_a038 = add i32 %v2_a038, 10
  %v4_a038 = inttoptr i32 %v3_a038 to i16*
  store i16 %v1_a038, i16* %v4_a038, align 2
  %v0_a03c = load i32, i32* @r6, align 4
  store i32 %v0_a03c, i32* @r0, align 4
  %v2_a040 = call i32 @function_d414(i32 %v0_a03c, i32 20)
  %v3_a040 = trunc i32 %v2_a040 to i16
  %v3_a044 = load i32, i32* @r6, align 4
  %v4_a044 = add i32 %v3_a044, 10
  %v5_a044 = inttoptr i32 %v4_a044 to i16*
  store i16 %v3_a040, i16* %v5_a044, align 2
  store i32 0, i32* @r4, align 4
  %v0_a04c = load i32, i32* @r7, align 4
  store i32 %v0_a04c, i32* @r1, align 4
  %v1_a050 = add i32 %v0_a04c, 4
  %v2_a050 = inttoptr i32 %v1_a050 to i16*
  %v3_a050 = load i16, i16* %v2_a050, align 2
  %v4_a050 = zext i16 %v3_a050 to i32
  store i32 %v4_a050, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_a058 = add i32 %v0_a04c, 6
  %v4_a058 = inttoptr i32 %v3_a058 to i16*
  store i16 0, i16* %v4_a058, align 2
  %v0_a05c = load i32, i32* @r6, align 4
  %v4_a060 = call i32 @function_d464(i32 %v0_a05c, i32 %v0_a04c, i32 %v4_a050, i32 %stack_var_-124.0.ph)
  %v5_a060 = trunc i32 %v4_a060 to i16
  %v3_a064 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a064, i32* %r2.global-to-local, align 4
  %v3_a068 = mul i32 %v3_a064, 32
  store i32 %v3_a068, i32* %r3.global-to-local, align 4
  %v0_a06c = load i32, i32* @r5, align 4
  %v1_a06c = add i32 %v0_a06c, 16
  %v2_a06c = inttoptr i32 %v1_a06c to i32*
  %v3_a06c = load i32, i32* %v2_a06c, align 4
  %v5_a070 = mul i32 %v3_a064, 24
  store i32 %v5_a070, i32* %r3.global-to-local, align 4
  %v1_a074 = load i32, i32* %sb.global-to-local, align 4
  %v2_a074 = add i32 %v1_a074, %v5_a070
  store i32 %v2_a074, i32* @lr, align 4
  %v2_a078 = add i32 %v2_a074, 4
  %v3_a078 = inttoptr i32 %v2_a078 to i32*
  store i32 %v3_a06c, i32* %v3_a078, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_a080 = load i32, i32* @r7, align 4
  %v4_a080 = add i32 %v3_a080, 6
  %v5_a080 = inttoptr i32 %v4_a080 to i16*
  store i16 %v5_a060, i16* %v5_a080, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a088 = load i32, i32* %r1.global-to-local, align 4
  %v1_a088 = trunc i32 %v0_a088 to i16
  %v2_a088 = load i32, i32* %r3.global-to-local, align 4
  %v3_a088 = load i32, i32* %sb.global-to-local, align 4
  %v4_a088 = add i32 %v3_a088, %v2_a088
  %v5_a088 = inttoptr i32 %v4_a088 to i16*
  store i16 %v1_a088, i16* %v5_a088, align 2
  %v0_a08c = load i32, i32* @r4, align 4
  %v1_a08c = trunc i32 %v0_a08c to i16
  %v2_a08c = load i32, i32* @lr, align 4
  %v3_a08c = add i32 %v2_a08c, 2
  %v4_a08c = inttoptr i32 %v3_a08c to i16*
  store i16 %v1_a08c, i16* %v4_a08c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a094 = load i32, i32* @r5, align 4
  store i32 %v0_a094, i32* %r1.global-to-local, align 4
  %v0_a09c = load i32, i32* @r8, align 4
  store i32 %v0_a09c, i32* %r2.global-to-local, align 4
  %v0_a0a0 = load i32, i32* @lr, align 4
  %v4_a0a0 = inttoptr i32 %v0_a0a0 to %sockaddr*
  %v0_a0a4 = load i32, i32* %ip.global-to-local, align 4
  %v7_a0a8 = inttoptr i32 %v0_a094 to i32*
  %v9_a0a8 = call i32 @sendto(i32 %v3_9d1c, i32* %v7_a0a8, i32 %v0_a09c, i32 16384, %sockaddr* %v4_a0a0, i32 %v0_a0a4)
  %v3_a0ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a0ac, i32* %r3.global-to-local, align 4
  %v1_a0b0 = add i32 %v3_a0ac, 1
  %v1_a0b4 = load i32, i32* @sl, align 4
  %v9_a0b4 = icmp eq i32 %v1_a0b0, %v1_a0b4
  store i1 %v9_a0b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0b0, i32* %stack_var_-44, align 4
  %v6_a0bc = icmp slt i32 %v1_a0b0, %v1_a0b4
  br i1 %v6_a0bc, label %dec_label_pc_9f9c, label %dec_label_pc_9f88

dec_label_pc_a0c4:                                ; preds = %dec_label_pc_9f9c
  %v1_a0c4 = add i32 %v2_9fa4, 16
  %v2_a0c4 = inttoptr i32 %v1_a0c4 to i32*
  %v3_a0c4 = load i32, i32* %v2_a0c4, align 4
  store i32 %v3_a0c4, i32* %r4.global-to-local, align 4
  %v0_a0c8 = call i32 @function_ee68()
  %v3_a0cc = load i32, i32* %stack_var_-44, align 4
  %v5_a0d4 = mul i32 %v3_a0cc, 24
  %v0_a0d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a0d8 = and i32 %v0_a0d8, 16711680
  store i32 %v1_a0d8, i32* %ip.global-to-local, align 4
  %v3_a0dc = udiv i32 %v0_a0d8, 16777216
  %v4_a0e0 = udiv i32 %v1_a0d8, 256
  %v5_a0e0 = or i32 %v4_a0e0, %v3_a0dc
  store i32 %v5_a0e0, i32* %r2.global-to-local, align 4
  %v1_a0e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_a0e4 = add i32 %v1_a0e4, %v5_a0d4
  store i32 %v2_a0e4, i32* %r1.global-to-local, align 4
  %v1_a0e8 = and i32 %v0_a0d8, 65280
  store i32 %v1_a0e8, i32* %r3.global-to-local, align 4
  %v1_a0ec = add i32 %v2_a0e4, 20
  %v2_a0ec = inttoptr i32 %v1_a0ec to i8*
  %v3_a0ec = load i8, i8* %v2_a0ec, align 1
  %v4_a0ec = zext i8 %v3_a0ec to i32
  store i32 %v4_a0ec, i32* %ip.global-to-local, align 4
  %v5_a0f4 = call i32 @llvm.bswap.i32(i32 %v0_a0d8)
  %v7_a0f8 = lshr i32 %v0_a0c8, %v4_a0ec
  %v8_a0f8 = add i32 %v7_a0f8, %v5_a0f4
  store i32 %v8_a0f8, i32* %r2.global-to-local, align 4
  store i32 %v6_9d08, i32* %r1.global-to-local, align 4
  %v5_a114 = call i32 @llvm.bswap.i32(i32 %v8_a0f8)
  store i32 %v5_a114, i32* %r3.global-to-local, align 4
  store i1 %v2_9fc8, i1* %cpsr_z.global-to-local, align 1
  %v1_a11c = load i32, i32* @r5, align 4
  %v2_a11c = add i32 %v1_a11c, 16
  %v3_a11c = inttoptr i32 %v2_a11c to i32*
  store i32 %v5_a114, i32* %v3_a11c, align 4
  br i1 %v2_9fc8, label %dec_label_pc_a124, label %dec_label_pc_9fd0

dec_label_pc_a124:                                ; preds = %dec_label_pc_a0c4, %dec_label_pc_9fc4
  %v0_a124 = call i32 @function_ee68()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_a130 = load i32, i32* %fp.global-to-local, align 4
  %v9_a130 = icmp eq i32 %v0_a130, 65535
  store i1 %v9_a130, i1* %cpsr_z.global-to-local, align 1
  %v1_a134 = load i32, i32* @r5, align 4
  %v2_a134 = add i32 %v1_a134, 12
  %v3_a134 = inttoptr i32 %v2_a134 to i32*
  store i32 %v0_a124, i32* %v3_a134, align 4
  br i1 %v9_a130, label %dec_label_pc_a13c, label %dec_label_pc_a124.dec_label_pc_9fe0_crit_edge

dec_label_pc_a124.dec_label_pc_9fe0_crit_edge:    ; preds = %dec_label_pc_a124
  %v1_9fe4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9fe0

dec_label_pc_a13c:                                ; preds = %dec_label_pc_a124, %dec_label_pc_9fd0
  %v0_a13c = call i32 @function_ee68()
  %v3_a144 = urem i32 %v0_a13c, 65536
  store i32 %v3_9d68, i32* %r2.global-to-local, align 4
  %v1_a150 = sub nsw i32 999, %v3_a144
  store i32 %v1_a150, i32* %r3.global-to-local, align 4
  %v1_a154 = load i32, i32* %r4.global-to-local, align 4
  %v9_a154 = icmp eq i32 %v3_9d68, %v1_a154
  store i1 %v9_a154, i1* %cpsr_z.global-to-local, align 1
  %v1_a158 = trunc i32 %v0_a13c to i16
  %v2_a158 = load i32, i32* @r5, align 4
  %v3_a158 = add i32 %v2_a158, 4
  %v4_a158 = inttoptr i32 %v3_a158 to i16*
  store i16 %v1_a158, i16* %v4_a158, align 2
  %v0_a15c = load i32, i32* %r3.global-to-local, align 4
  %v1_a15c = trunc i32 %v0_a15c to i16
  %v2_a15c = load i32, i32* @r6, align 4
  %v3_a15c = add i32 %v2_a15c, 4
  %v4_a15c = inttoptr i32 %v3_a15c to i16*
  store i16 %v1_a15c, i16* %v4_a15c, align 2
  br i1 %v9_a154, label %dec_label_pc_a164, label %dec_label_pc_a13c.dec_label_pc_9fec_crit_edge

dec_label_pc_a13c.dec_label_pc_9fec_crit_edge:    ; preds = %dec_label_pc_a13c
  %v1_9ff0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9fec

dec_label_pc_a164:                                ; preds = %dec_label_pc_a13c, %dec_label_pc_9fe0
  %v0_a164 = call i32 @function_ee68()
  %v1_a164 = trunc i32 %v0_a164 to i16
  store i32 %v3_9d6c, i32* %r3.global-to-local, align 4
  %v1_a16c = load i32, i32* %r4.global-to-local, align 4
  %v9_a16c = icmp eq i32 %v3_9d6c, %v1_a16c
  store i1 %v9_a16c, i1* %cpsr_z.global-to-local, align 1
  %v3_a170 = load i32, i32* @r5, align 4
  %v4_a170 = add i32 %v3_a170, 44
  %v5_a170 = inttoptr i32 %v4_a170 to i16*
  store i16 %v1_a164, i16* %v5_a170, align 2
  br i1 %v9_a16c, label %dec_label_pc_a178, label %dec_label_pc_9ff8

dec_label_pc_a178:                                ; preds = %dec_label_pc_a164, %dec_label_pc_9fec
  %v0_a178 = call i32 @function_ee68()
  %v1_a178 = trunc i32 %v0_a178 to i16
  store i32 %v1_9d60, i32* @r4, align 4
  store i1 %v2_a180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a180, label %.thread31, label %bb86

.thread31:                                        ; preds = %dec_label_pc_a178
  %v3_a18832 = load i32, i32* @r7, align 4
  %v4_a18833 = add i32 %v3_a18832, 2
  %v5_a18834 = inttoptr i32 %v4_a18833 to i16*
  store i16 %v1_a178, i16* %v5_a18834, align 2
  br label %dec_label_pc_a194

bb86:                                             ; preds = %dec_label_pc_a178
  %v1_a184 = load i32, i32* @r5, align 4
  %v2_a184 = add i32 %v1_a184, 16
  %v3_a184 = inttoptr i32 %v2_a184 to i32*
  %v4_a184 = load i32, i32* %v3_a184, align 4
  store i32 %v4_a184, i32* %r3.global-to-local, align 4
  %v3_a188 = load i32, i32* @r7, align 4
  %v4_a188 = add i32 %v3_a188, 2
  %v5_a188 = inttoptr i32 %v4_a188 to i16*
  store i16 %v1_a178, i16* %v5_a188, align 2
  %v1_a18c = load i32, i32* %r3.global-to-local, align 4
  %v2_a18c = load i32, i32* @r6, align 4
  %v3_a18c = add i32 %v2_a18c, 16
  %v4_a18c = inttoptr i32 %v3_a18c to i32*
  store i32 %v1_a18c, i32* %v4_a18c, align 4
  br label %dec_label_pc_a00c

dec_label_pc_a194:                                ; preds = %.thread31, %dec_label_pc_9ff8
  %v0_a194 = call i32 @function_ee68()
  store i32 %v1_9cd4, i32* %r1.global-to-local, align 4
  store i1 %v2_a19c, i1* %cpsr_z.global-to-local, align 1
  %v1_a1a0 = load i32, i32* @r6, align 4
  %v2_a1a0 = add i32 %v1_a1a0, 16
  %v3_a1a0 = inttoptr i32 %v2_a1a0 to i32*
  store i32 %v0_a194, i32* %v3_a1a0, align 4
  br i1 %v2_a19c, label %dec_label_pc_a018, label %dec_label_pc_a1a8

dec_label_pc_a1a8:                                ; preds = %dec_label_pc_a00c, %dec_label_pc_a194
  %v0_a1a8 = load i32, i32* @r7, align 4
  %v1_a1a8 = add i32 %v0_a1a8, 8
  store i32 %v6_9cb4, i32* %r1.global-to-local, align 4
  %v2_a1b0 = inttoptr i32 %v1_a1a8 to i16*
  %v3_a1b0 = call i32 @function_effc(i16* %v2_a1b0, i32 %v6_9cb4)
  br label %dec_label_pc_a018

dec_label_pc_a1b8:                                ; preds = %dec_label_pc_9d2c
  %v1_a1bc = call i32 @close(i32 %v3_9d1c)
  br label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_9bcc, %dec_label_pc_a1b8
  %v1_a1c8 = phi i32 [ -1, %dec_label_pc_9bcc ], [ %v1_a1bc, %dec_label_pc_a1b8 ]
  store i32 %v3_9bcc, i32* %r4.global-to-local, align 4
  store i32 %v6_9bcc, i32* %r5.global-to-local, align 4
  store i32 %v9_9bcc, i32* %r6.global-to-local, align 4
  store i32 %v12_9bcc, i32* %r7.global-to-local, align 4
  store i32 %v15_9bcc, i32* %r8.global-to-local, align 4
  ret i32 %v1_a1c8

dec_label_pc_a1cc:                                ; preds = %dec_label_pc_9d54
  store i32 %v6_9cb4, i32* %r2.global-to-local, align 4
  %v1_a1d4 = add i32 %v6_9cb4, 8
  store i32 %v1_a1d4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9f88.preheader

; uselistorder directives
  uselistorder i32 %v1_a1d4, { 1, 0 }
  uselistorder i16 %v1_a178, { 1, 0 }
  uselistorder i32 %v0_a13c, { 1, 0 }
  uselistorder i32 %v5_a114, { 1, 0 }
  uselistorder i32 %v0_a0d8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a0b4, { 1, 2, 0 }
  uselistorder i32 %v1_a0b0, { 2, 0, 3, 1 }
  uselistorder i32 %v3_a064, { 1, 0, 2 }
  uselistorder i32 %v0_a04c, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9fb0, { 1, 0, 2 }
  uselistorder i1 %v2_9fc8, { 3, 0, 1, 2 }
  uselistorder i1 %v2_a19c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_a180, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9f24, { 1, 0 }
  uselistorder i32 %v4_9e9814, { 1, 0 }
  uselistorder i32 %v3_9dbc, { 1, 0 }
  uselistorder i32 %v3_9da0, { 1, 2, 0 }
  uselistorder i32 %v1_9d9c, { 1, 0 }
  uselistorder i32 %v1_9d60, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v0_9d5c, { 1, 0, 3, 2 }
  uselistorder i32 %v3_9d58, { 1, 0 }
  uselistorder i32 %v0_9d58, { 1, 0, 3, 2 }
  uselistorder i32 %v3_9d54, { 1, 0 }
  uselistorder i32 %v0_9d54, { 1, 0, 3, 2 }
  uselistorder i32 %v3_9d1c, { 1, 2, 0, 3 }
  uselistorder i32 %v6_9d08, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v1_9cd4, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9cb4, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9c68, { 1, 2, 0 }
  uselistorder i32 %v1_9c44, { 3, 2, 1, 0 }
  uselistorder i32 %v6_9c3c, { 1, 0 }
  uselistorder i32 %v6_9c00, { 2, 1, 3, 0 }
  uselistorder i32 %v4_9be8, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 10 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r7.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r6.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 14, 15 }
  uselistorder i32* %r4.global-to-local, { 30, 5, 4, 6, 0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 37, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r1.global-to-local, { 36, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder label %dec_label_pc_a1c0, { 1, 0 }
  uselistorder label %dec_label_pc_a1a8, { 1, 0 }
  uselistorder label %dec_label_pc_a018, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f88.preheader, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_a1e8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a1e8:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_a1e8 = load i32, i32* @r4, align 4
  %v9_a1e8 = load i32, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a204 = call i32* @calloc(i32 4, i32 4)
  %v4_a204 = ptrtoint i32* %v2_a204 to i32
  store i32 %v4_a204, i32* @sl, align 4
  %v0_a210 = load i32, i32* @r7, align 4
  %v2_a214 = call i32* @calloc(i32 %v0_a210, i32 4)
  %v3_a214 = ptrtoint i32* %v2_a214 to i32
  store i32 65535, i32* @r4, align 4
  %v0_a220 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v3_a214, i32* @r8, align 4
  %v0_a230 = load i32, i32* @r5, align 4
  %v5_a234 = inttoptr i32 %v0_a220 to i32*
  %v6_a234 = call i32 @function_913c(i32 %v0_a230, i32* %v5_a234, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_a23c = urem i32 %v6_a234, 65536
  %v0_a240 = load i32, i32* @r6, align 4
  %v0_a248 = load i32, i32* @r4, align 4
  store i32 %v0_a248, i32* %r3.global-to-local, align 4
  %v0_a24c = load i32, i32* @r5, align 4
  %v5_a254 = inttoptr i32 %v0_a240 to i32*
  %v6_a254 = call i32 @function_913c(i32 %v0_a24c, i32* %v5_a254, i32 6, i32 %v0_a248, i32 %v3_a23c)
  %v0_a258 = load i32, i32* @r6, align 4
  %v3_a25c = mul i32 %v6_a254, 65536
  store i32 %v3_a25c, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_a268 = load i32, i32* @r5, align 4
  %v5_a26c = inttoptr i32 %v0_a258 to i32*
  %v6_a26c = call i32 @function_913c(i32 %v0_a268, i32* %v5_a26c, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a27c = load i32, i32* @r6, align 4
  %v0_a280 = load i32, i32* @r5, align 4
  %v3_a284 = urem i32 %v6_a26c, 65536
  store i32 %v3_a284, i32* @r5, align 4
  %v5_a288 = inttoptr i32 %v0_a27c to i32*
  %v6_a288 = call i32 @function_913c(i32 %v0_a280, i32* %v5_a288, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_a28c = load i32, i32* %sb.global-to-local, align 4
  %v3_a28c = udiv i32 %v0_a28c, 65536
  store i32 %v3_a28c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_a294 = load i32, i32* @r4, align 4
  %v9_a294 = icmp eq i32 %v3_a28c, %v1_a294
  br i1 %v9_a294, label %dec_label_pc_a2c4, label %bb

bb:                                               ; preds = %dec_label_pc_a1e8
  store i32 0, i32* %stack_var_-56, align 4
  %v4_a2ac = udiv i32 %v0_a28c, 16777216
  store i32 %v4_a2ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a2d4

dec_label_pc_a2c4:                                ; preds = %dec_label_pc_a1e8
  store i32 0, i32* %stack_var_-56, align 4
  %v0_a2c4 = call i32 @function_ee68()
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %bb, %dec_label_pc_a2c4
  %v0_a2b810 = urem i32 %v6_a288, 256
  %v0_a2d4 = load i32, i32* @r7, align 4
  %v2_a2d4 = icmp eq i32 %v0_a2d4, 0
  br i1 %v2_a2d4, label %dec_label_pc_a414, label %dec_label_pc_a2dc

dec_label_pc_a2dc:                                ; preds = %dec_label_pc_a2d4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v3_a388 = udiv i32 %v3_a23c, 256
  %v1_a384 = mul i32 %v6_a234, 256
  %v4_a38c = and i32 %v1_a384, 65280
  %v5_a38c = or i32 %v4_a38c, %v3_a388
  %tmp51 = bitcast i32* %stack_var_-56 to %sockaddr*
  br label %dec_label_pc_a36c

dec_label_pc_a2ec:                                ; preds = %bb52, %dec_label_pc_a3ac
  %v3_a2f8 = call i32 @socket(i32 2, i32 0, i32 0)
  %v2_a300 = icmp eq i32 %v3_a2f8, -1
  %v0_a304 = load i32, i32* %sb.global-to-local, align 4
  %v1_a304 = add i32 %v0_a304, 1
  store i32 %v1_a304, i32* %sb.global-to-local, align 4
  %v0_a308 = load i32, i32* %fp.global-to-local, align 4
  %v1_a308 = add i32 %v0_a308, 24
  store i32 %v1_a308, i32* %fp.global-to-local, align 4
  %v2_a314 = load i32, i32* @r8, align 4
  %v3_a314 = add i32 %v2_a314, %stack_var_-60.0
  %v4_a314 = inttoptr i32 %v3_a314 to i32*
  store i32 %v3_a2f8, i32* %v4_a314, align 4
  br i1 %v2_a300, label %dec_label_pc_a408, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a2ec
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v5_a334 = call i32 @bind(i32 %v3_a2f8, %sockaddr* %tmp51, i32 16)
  %v0_a338 = load i32, i32* %r6.global-to-local, align 4
  %v1_a338 = add i32 %v0_a338, 20
  %v2_a338 = inttoptr i32 %v1_a338 to i8*
  %v3_a338 = load i8, i8* %v2_a338, align 1
  %v4_a338 = zext i8 %v3_a338 to i32
  store i32 %v4_a338, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_a338, 32
  br i1 %tmp, label %dec_label_pc_a3c0, label %dec_label_pc_a344

dec_label_pc_a344:                                ; preds = %dec_label_pc_a31c, %dec_label_pc_a3c0
  %v0_a348 = phi i32 [ %v0_a338, %dec_label_pc_a31c ], [ %v0_a348.pre, %dec_label_pc_a3c0 ]
  %v1_a348 = inttoptr i32 %v0_a348 to %sockaddr*
  %v1_a34c = load i32, i32* @r8, align 4
  %v2_a34c = add i32 %v1_a34c, %stack_var_-60.0
  %v3_a34c = inttoptr i32 %v2_a34c to i32*
  %v4_a34c = load i32, i32* %v3_a34c, align 4
  %v5_a354 = call i32 @connect(i32 %v4_a34c, %sockaddr* %v1_a348, i32 16)
  %v0_a35c = load i32, i32* %sb.global-to-local, align 4
  %v1_a35c = load i32, i32* @r7, align 4
  %v9_a35c = icmp eq i32 %v0_a35c, %v1_a35c
  %v1_a360 = add i32 %stack_var_-60.0, 4
  store i32 %v1_a360, i32* %r3.global-to-local, align 4
  br i1 %v9_a35c, label %dec_label_pc_a414, label %dec_label_pc_a36c

dec_label_pc_a36c:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a2dc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_a2dc ], [ %v1_a360, %dec_label_pc_a344 ]
  store i32 65535, i32* %r4.global-to-local, align 4
  %v2_a37c = call i32* @calloc(i32 65535, i32 1)
  %v3_a37c = ptrtoint i32* %v2_a37c to i32
  store i32 %v5_a38c, i32* %r3.global-to-local, align 4
  %v9_a398 = icmp eq i32 %v3_a23c, 65535
  %v1_a39c = load i32, i32* %fp.global-to-local, align 4
  %v2_a39c = add i32 %v1_a39c, %arg2
  store i32 %v2_a39c, i32* %r6.global-to-local, align 4
  %v2_a3a0 = load i32, i32* @sl, align 4
  %v3_a3a0 = add i32 %v2_a3a0, %stack_var_-60.0
  %v4_a3a0 = inttoptr i32 %v3_a3a0 to i32*
  store i32 %v3_a37c, i32* %v4_a3a0, align 4
  br i1 %v9_a398, label %dec_label_pc_a3ac, label %bb52

bb52:                                             ; preds = %dec_label_pc_a36c
  %v1_a3a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_a3a4 = trunc i32 %v1_a3a4 to i16
  %v3_a3a4 = load i32, i32* %r6.global-to-local, align 4
  %v4_a3a4 = add i32 %v3_a3a4, 2
  %v5_a3a4 = inttoptr i32 %v4_a3a4 to i16*
  store i16 %v2_a3a4, i16* %v5_a3a4, align 2
  br label %dec_label_pc_a2ec

dec_label_pc_a3ac:                                ; preds = %dec_label_pc_a36c
  %v0_a3ac = call i32 @function_ee68()
  %v1_a3ac = trunc i32 %v0_a3ac to i16
  %v0_a3b4 = load i32, i32* %fp.global-to-local, align 4
  %v2_a3b4 = add i32 %v0_a3b4, %arg2
  store i32 %v2_a3b4, i32* %r6.global-to-local, align 4
  %v4_a3b8 = add i32 %v2_a3b4, 2
  %v5_a3b8 = inttoptr i32 %v4_a3b8 to i16*
  store i16 %v1_a3ac, i16* %v5_a3b8, align 2
  br label %dec_label_pc_a2ec

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a31c
  %v1_a3c0 = add i32 %v0_a338, 16
  %v2_a3c0 = inttoptr i32 %v1_a3c0 to i32*
  %v3_a3c0 = load i32, i32* %v2_a3c0, align 4
  store i32 %v3_a3c0, i32* %r4.global-to-local, align 4
  %v0_a3c4 = call i32 @function_ee68()
  %v1_a3d4 = and i32 %v3_a3c0, 65280
  store i32 %v1_a3d4, i32* %r3.global-to-local, align 4
  %v0_a3dc = load i32, i32* %r6.global-to-local, align 4
  %v1_a3dc = add i32 %v0_a3dc, 20
  %v2_a3dc = inttoptr i32 %v1_a3dc to i8*
  %v3_a3dc = load i8, i8* %v2_a3dc, align 1
  %v4_a3dc = zext i8 %v3_a3dc to i32
  %v5_a3e0 = call i32 @llvm.bswap.i32(i32 %v3_a3c0)
  %v7_a3e4 = lshr i32 %v0_a3c4, %v4_a3dc
  %v8_a3e4 = add i32 %v7_a3e4, %v5_a3e0
  %v5_a3fc = call i32 @llvm.bswap.i32(i32 %v8_a3e4)
  store i32 %v5_a3fc, i32* %r3.global-to-local, align 4
  %v2_a400 = add i32 %v0_a3dc, 4
  %v3_a400 = inttoptr i32 %v2_a400 to i32*
  store i32 %v5_a3fc, i32* %v3_a400, align 4
  %v0_a348.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_a344

dec_label_pc_a408:                                ; preds = %dec_label_pc_a2ec
  store i32 %v3_a1e8, i32* %r4.global-to-local, align 4
  store i32 %v9_a1e8, i32* %r6.global-to-local, align 4
  ret i32 -1

dec_label_pc_a414:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a2d4
  %v1_a45422 = phi i32 [ 0, %dec_label_pc_a2d4 ], [ %v0_a35c, %dec_label_pc_a344 ]
  %v2_a418 = icmp eq i32 %v0_a2b810, 0
  br i1 %v2_a418, label %dec_label_pc_a438.outer, label %dec_label_pc_a450.preheader

dec_label_pc_a450.preheader:                      ; preds = %dec_label_pc_a414
  %v0_a45858.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a450

dec_label_pc_a428:                                ; preds = %dec_label_pc_a438
  store i32 %v1_a42c, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a428 = load i32, i32* @r8, align 4
  %v4_a428 = mul i32 %v1_a42c, 4
  %v5_a428 = add i32 %v0_a428, %v4_a428
  %v6_a428 = inttoptr i32 %v5_a428 to i32*
  %v7_a428 = load i32, i32* %v6_a428, align 4
  %v0_a42c = load i32, i32* @sl, align 4
  %v5_a42c = add i32 %v0_a42c, %v4_a428
  %v6_a42c = inttoptr i32 %v5_a42c to i32*
  %v7_a42c = load i32, i32* %v6_a42c, align 4
  %v4_a430 = inttoptr i32 %v7_a42c to i32*
  %v5_a430 = call i32 @send(i32 %v7_a428, i32* %v4_a430, i32 %v0_a43c, i32 16384)
  %v0_a434 = load i32, i32* %r4.global-to-local, align 4
  %v1_a434 = add i32 %v0_a434, 1
  %v0_a438.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a438.outer

dec_label_pc_a438.outer:                          ; preds = %dec_label_pc_a414, %dec_label_pc_a428
  %v0_a438.ph = phi i32 [ %v0_a438.pre.pre, %dec_label_pc_a428 ], [ %v1_a45422, %dec_label_pc_a414 ]
  %v1_a42c.ph = phi i32 [ %v1_a434, %dec_label_pc_a428 ], [ 0, %dec_label_pc_a414 ]
  %v0_a43c = load i32, i32* @r5, align 4
  br label %dec_label_pc_a438

dec_label_pc_a438:                                ; preds = %dec_label_pc_a438.outer, %dec_label_pc_a438
  %v1_a42c = phi i32 [ 0, %dec_label_pc_a438 ], [ %v1_a42c.ph, %dec_label_pc_a438.outer ]
  %v8_a444 = icmp sgt i32 %v0_a438.ph, %v1_a42c
  br i1 %v8_a444, label %dec_label_pc_a428, label %dec_label_pc_a438

dec_label_pc_a450:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a460, %dec_label_pc_a450.preheader
  %v0_a45858 = phi i32 [ %v0_a45858.pre, %dec_label_pc_a450.preheader ], [ %v0_a45858, %dec_label_pc_a450 ], [ %v0_a458, %dec_label_pc_a460 ]
  %v1_a45421 = phi i32 [ %v1_a45422, %dec_label_pc_a450.preheader ], [ %v1_a45421, %dec_label_pc_a450 ], [ %v1_a454.pre, %dec_label_pc_a460 ]
  store i32 0, i32* @r6, align 4
  %v6_a45c59 = icmp sgt i32 %v1_a45421, 0
  br i1 %v6_a45c59, label %dec_label_pc_a460, label %dec_label_pc_a450

dec_label_pc_a460:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a460
  %v0_a45861 = phi i32 [ %v0_a458, %dec_label_pc_a460 ], [ %v0_a45858, %dec_label_pc_a450 ]
  %v1_a46060 = phi i32 [ %v1_a480, %dec_label_pc_a460 ], [ 0, %dec_label_pc_a450 ]
  %v0_a460 = load i32, i32* @sl, align 4
  %v4_a460 = mul i32 %v1_a46060, 4
  %v5_a460 = add i32 %v0_a460, %v4_a460
  %v6_a460 = inttoptr i32 %v5_a460 to i32*
  %v7_a460 = load i32, i32* %v6_a460, align 4
  store i32 %v7_a460, i32* @r4, align 4
  %v2_a468 = inttoptr i32 %v7_a460 to i16*
  %v3_a468 = call i32 @function_effc(i16* %v2_a468, i32 %v0_a45861)
  %v0_a46c = load i32, i32* @r8, align 4
  %v1_a46c = load i32, i32* @r6, align 4
  %v4_a46c = mul i32 %v1_a46c, 4
  %v5_a46c = add i32 %v4_a46c, %v0_a46c
  %v6_a46c = inttoptr i32 %v5_a46c to i32*
  %v7_a46c = load i32, i32* %v6_a46c, align 4
  %v0_a470 = load i32, i32* @r4, align 4
  %v0_a474 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_a47c = inttoptr i32 %v0_a470 to i32*
  %v5_a47c = call i32 @send(i32 %v7_a46c, i32* %v4_a47c, i32 %v0_a474, i32 16384)
  %v0_a480 = load i32, i32* @r6, align 4
  %v1_a480 = add i32 %v0_a480, 1
  %v1_a454.pre = load i32, i32* @r7, align 4
  store i32 %v1_a480, i32* @r6, align 4
  %v0_a458 = load i32, i32* @r5, align 4
  %v6_a45c = icmp slt i32 %v1_a480, %v1_a454.pre
  br i1 %v6_a45c, label %dec_label_pc_a460, label %dec_label_pc_a450

; uselistorder directives
  uselistorder i32 %v0_a458, { 1, 0 }
  uselistorder i32 %v1_a454.pre, { 1, 0 }
  uselistorder i32 %v1_a480, { 2, 1, 0 }
  uselistorder i32 %v1_a45421, { 1, 0 }
  uselistorder i32 %v1_a42c, { 2, 1, 0 }
  uselistorder i32 %v5_a3fc, { 1, 0 }
  uselistorder i32 %v3_a3c0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a338, { 1, 0, 2 }
  uselistorder i32 %v3_a28c, { 1, 0 }
  uselistorder i32 %v3_a23c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 2, 1, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 5, 2, 1, 4, 6, 3, 7 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_a460, { 1, 0 }
  uselistorder label %dec_label_pc_a450, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a438, { 1, 0 }
  uselistorder label %dec_label_pc_a438.outer, { 1, 0 }
  uselistorder label %dec_label_pc_a344, { 1, 0 }
  uselistorder label %dec_label_pc_a2ec, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0 }
}

define i32 @function_a488(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a488:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i16 @__decompiler_undefined_function_3()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a488 = load i32, i32* @r4, align 4
  %v27_a488 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a4a4 = call i32* @calloc(i32 16, i32 16)
  %v4_a4a4 = ptrtoint i32* %v2_a4a4 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a4b0 = load i32, i32* @r6, align 4
  store i32 %v0_a4b0, i32* %r0.global-to-local, align 4
  %v2_a4b4 = call i32* @calloc(i32 %v0_a4b0, i32 4)
  %v4_a4b4 = ptrtoint i32* %v2_a4b4 to i32
  %v0_a4b8 = load i32, i32* @r5, align 4
  store i32 %v0_a4b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a4c8 = load i32, i32* @r4, align 4
  store i32 %v0_a4c8, i32* %r0.global-to-local, align 4
  %v5_a4cc = inttoptr i32 %v0_a4b8 to i32*
  %v6_a4cc = call i32 @function_913c(i32 %v0_a4c8, i32* %v5_a4cc, i32 2, i32 0, i32 %v4_a4b4)
  %v1_a4d8 = urem i32 %v6_a4cc, 256
  store i32 %v1_a4d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a4e4 = load i32, i32* @r5, align 4
  store i32 %v0_a4e4, i32* %r1.global-to-local, align 4
  %v0_a4e8 = load i32, i32* @r4, align 4
  store i32 %v0_a4e8, i32* %r0.global-to-local, align 4
  %v5_a4ec = trunc i32 %v6_a4cc to i8
  %v6_a4f0 = inttoptr i32 %v0_a4e4 to i32*
  %v7_a4f0 = call i32 @function_913c(i32 %v0_a4e8, i32* %v6_a4f0, i32 3, i32 65535, i32 %v6_a4cc)
  %v0_a4f4 = load i32, i32* @r5, align 4
  store i32 %v0_a4f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a4f0, i32* @r7, align 4
  %v0_a504 = load i32, i32* @r4, align 4
  store i32 %v0_a504, i32* %r0.global-to-local, align 4
  %v5_a508 = inttoptr i32 %v0_a4f4 to i32*
  %v6_a508 = call i32 @function_913c(i32 %v0_a504, i32* %v5_a508, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a510 = urem i32 %v6_a508, 256
  store i32 %v1_a510, i32* %ip.global-to-local, align 4
  %v0_a514 = load i32, i32* @r5, align 4
  store i32 %v0_a514, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a520 = load i32, i32* @r4, align 4
  store i32 %v0_a520, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a508, 16777216
  %v5_a528 = sdiv i32 %sext, 16777216
  %v6_a528 = inttoptr i32 %v0_a514 to i32*
  %v7_a528 = call i32 @function_913c(i32 %v0_a520, i32* %v6_a528, i32 5, i32 1, i32 %v5_a528)
  %v1_a534 = urem i32 %v7_a528, 256
  store i32 %v1_a534, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a53c = load i32, i32* @r5, align 4
  store i32 %v0_a53c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a544 = load i32, i32* @r4, align 4
  store i32 %v0_a544, i32* %r0.global-to-local, align 4
  %v5_a54c = inttoptr i32 %v0_a53c to i32*
  %v6_a54c = call i32 @function_913c(i32 %v0_a544, i32* %v5_a54c, i32 7, i32 65535, i32 %v1_a534)
  %v0_a550 = load i32, i32* @r5, align 4
  store i32 %v0_a550, i32* %r1.global-to-local, align 4
  %v3_a554 = mul i32 %v6_a54c, 65536
  store i32 %v3_a554, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a560 = load i32, i32* @r4, align 4
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  %v3_a564 = urem i32 %v6_a54c, 65536
  store i32 %v3_a564, i32* @sl, align 4
  %v5_a568 = inttoptr i32 %v0_a550 to i32*
  %v6_a568 = call i32 @function_913c(i32 %v0_a560, i32* %v5_a568, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a570 = urem i32 %v6_a568, 256
  store i32 %v1_a570, i32* %ip.global-to-local, align 4
  %v0_a574 = load i32, i32* @r5, align 4
  store i32 %v0_a574, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a580 = load i32, i32* @r4, align 4
  store i32 %v0_a580, i32* %r0.global-to-local, align 4
  %v5_a588 = inttoptr i32 %v0_a574 to i32*
  %v6_a588 = call i32 @function_913c(i32 %v0_a580, i32* %v5_a588, i32 12, i32 1, i32 %v1_a570)
  %v1_a590 = urem i32 %v6_a588, 256
  store i32 %v1_a590, i32* %ip.global-to-local, align 4
  %v0_a594 = load i32, i32* @r5, align 4
  store i32 %v0_a594, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r4, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  %v5_a5a8 = inttoptr i32 %v0_a594 to i32*
  %v6_a5a8 = call i32 @function_913c(i32 %v0_a5a0, i32* %v5_a5a8, i32 13, i32 1, i32 %v1_a590)
  %v1_a5b0 = urem i32 %v6_a5a8, 256
  store i32 %v1_a5b0, i32* %ip.global-to-local, align 4
  %v0_a5b4 = load i32, i32* @r5, align 4
  store i32 %v0_a5b4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a5c0 = load i32, i32* @r4, align 4
  store i32 %v0_a5c0, i32* %r0.global-to-local, align 4
  %v5_a5c8 = inttoptr i32 %v0_a5b4 to i32*
  %v6_a5c8 = call i32 @function_913c(i32 %v0_a5c0, i32* %v5_a5c8, i32 14, i32 1, i32 %v1_a5b0)
  %v1_a5d0 = urem i32 %v6_a5c8, 256
  store i32 %v1_a5d0, i32* %ip.global-to-local, align 4
  %v0_a5d4 = load i32, i32* @r5, align 4
  store i32 %v0_a5d4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a5e0 = load i32, i32* @r4, align 4
  store i32 %v0_a5e0, i32* %r0.global-to-local, align 4
  %v5_a5e8 = inttoptr i32 %v0_a5d4 to i32*
  %v6_a5e8 = call i32 @function_913c(i32 %v0_a5e0, i32* %v5_a5e8, i32 15, i32 1, i32 %v1_a5d0)
  %v1_a5f0 = urem i32 %v6_a5e8, 256
  store i32 %v1_a5f0, i32* %ip.global-to-local, align 4
  %v0_a5f4 = load i32, i32* @r5, align 4
  store i32 %v0_a5f4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a600 = load i32, i32* @r4, align 4
  store i32 %v0_a600, i32* %r0.global-to-local, align 4
  %v5_a608 = inttoptr i32 %v0_a5f4 to i32*
  %v6_a608 = call i32 @function_913c(i32 %v0_a600, i32* %v5_a608, i32 16, i32 1, i32 %v1_a5f0)
  %v1_a610 = urem i32 %v6_a608, 256
  store i32 %v1_a610, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a61c = load i32, i32* @r5, align 4
  store i32 %v0_a61c, i32* %r1.global-to-local, align 4
  %v0_a620 = load i32, i32* @r4, align 4
  store i32 %v0_a620, i32* %r0.global-to-local, align 4
  %v5_a628 = inttoptr i32 %v0_a61c to i32*
  %v6_a628 = call i32 @function_913c(i32 %v0_a620, i32* %v5_a628, i32 0, i32 768, i32 %v1_a610)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  store i32 %v0_a638, i32* %r1.global-to-local, align 4
  %v0_a63c = load i32, i32* @r4, align 4
  store i32 %v0_a63c, i32* %r0.global-to-local, align 4
  %v5_a640 = inttoptr i32 %v0_a638 to i32*
  %v6_a640 = call i32 @function_913c(i32 %v0_a63c, i32* %v5_a640, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a648 = urem i32 %v6_a640, 256
  store i32 %v1_a648, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a65c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a65c, i32* %r0.global-to-local, align 4
  %v2_a660 = icmp eq i32 %v3_a65c, -1
  store i1 %v2_a660, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a65c, i32* %sb.global-to-local, align 4
  br i1 %v2_a660, label %dec_label_pc_a850, label %dec_label_pc_a66c

dec_label_pc_a66c:                                ; preds = %dec_label_pc_a488
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a674 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a674, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a688 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_a674, i32* nonnull %stack_var_-44, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_a688, i32* %r0.global-to-local, align 4
  %v2_a68c = icmp eq i32 %v6_a688, -1
  store i1 %v2_a68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a68c, label %dec_label_pc_a848, label %dec_label_pc_a694

dec_label_pc_a694:                                ; preds = %dec_label_pc_a66c
  %v0_a694 = load i32, i32* @r7, align 4
  %v3_a694 = mul i32 %v0_a694, 65536
  store i32 %v3_a694, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a69c = load i32, i32* @r6, align 4
  %v2_a69c = icmp eq i32 %v0_a69c, 0
  store i1 %v2_a69c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a6a4 = urem i32 %v0_a694, 65536
  store i32 %v3_a6a4, i32* %fp.global-to-local, align 4
  br i1 %v2_a69c, label %dec_label_pc_aad4, label %dec_label_pc_a6ac.preheader

dec_label_pc_a6ac.preheader:                      ; preds = %dec_label_pc_a694
  %v2_a6f8 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a73c = ptrtoint i32* %stack_var_-64 to i32
  %tmp72 = bitcast i32* %stack_var_-64 to %sockaddr*
  %tmp73 = bitcast i32* %stack_var_-80 to %sockaddr*
  %v2_a780 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a784 = ptrtoint i32* %stack_var_-48 to i32
  %v4_a7e4 = zext i8 %tmp to i32
  %v1_a7e8 = and i32 %v4_a7e4, 18
  %v2_a7ec = icmp eq i32 %v1_a7e8, 18
  %v3_a7d0 = sext i16 %tmp62 to i32
  %v1_a7f4 = and i32 %v4_a7e4, 5
  %v2_a7f4 = icmp eq i32 %v1_a7f4, 0
  %v4_a734 = add i32 %v2_a6f8, 82
  %v5_a734 = inttoptr i32 %v4_a734 to i16*
  %v1_a924 = add i32 %v6_a628, 40
  %v1_aa38 = urem i32 %v6_a568, 2
  %tmp100 = sub nsw i32 0, %v1_aa38
  %v4_aa40 = and i32 %tmp100, 32
  %v1_aa50 = urem i32 %v6_a588, 2
  %tmp101 = sub nsw i32 0, %v1_aa50
  %v4_aa58 = and i32 %tmp101, 16
  %v1_aa68 = urem i32 %v6_a5a8, 2
  %tmp102 = sub nsw i32 0, %v1_aa68
  %v4_aa70 = and i32 %tmp102, 8
  %v1_aa80 = urem i32 %v6_a5c8, 2
  %tmp103 = sub nsw i32 0, %v1_aa80
  %v4_aa88 = and i32 %tmp103, 4
  %v1_aa98 = urem i32 %v6_a5e8, 2
  %tmp104 = sub nsw i32 0, %v1_aa98
  %v3_aaa0 = and i32 %tmp104, 2
  %v1_aab0 = urem i32 %v6_a608, 2
  br label %dec_label_pc_a6ac

dec_label_pc_a6ac:                                ; preds = %dec_label_pc_a6ac.preheader, %dec_label_pc_a820
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a820 ], [ %tmp35, %dec_label_pc_a6ac.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a820 ], [ %tmp38, %dec_label_pc_a6ac.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a6b8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a6b8, i32* %r0.global-to-local, align 4
  %v2_a6bc = icmp eq i32 %v3_a6b8, -1
  store i1 %v2_a6bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a6b8, i32* @r5, align 4
  br i1 %v2_a6bc, label %dec_label_pc_a820, label %dec_label_pc_a6c8

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_a6ac, %dec_label_pc_a7fc
  %v0_a6d0 = phi i32 [ %v3_a810, %dec_label_pc_a7fc ], [ %v3_a6b8, %dec_label_pc_a6ac ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a7fc ], [ %stack_var_-62.0, %dec_label_pc_a6ac ]
  %stack_var_-60.1 = phi i32 [ %v0_a8d0, %dec_label_pc_a7fc ], [ %stack_var_-60.0, %dec_label_pc_a6ac ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a6d0 = call i32 (i32, i32, ...) @fcntl(i32 %v0_a6d0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a6d8 = or i32 %v2_a6d0, 2048
  store i32 %v1_a6d8, i32* %r2.global-to-local, align 4
  %v0_a6dc = load i32, i32* @r5, align 4
  store i32 %v0_a6dc, i32* %r0.global-to-local, align 4
  %v2_a6e0 = call i32 (i32, i32, ...) @fcntl(i32 %v0_a6dc, i32 4)
  %v3_a6e4 = load i32, i32* %stack_var_-44, align 4
  %v5_a6ec = mul i32 %v3_a6e4, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a6f8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a700 = add i32 %v5_a6ec, %arg2
  store i32 %v2_a700, i32* %r3.global-to-local, align 4
  %v1_a704 = add i32 %v2_a700, 20
  %v2_a704 = inttoptr i32 %v1_a704 to i8*
  %v3_a704 = load i8, i8* %v2_a704, align 1
  %v4_a704 = zext i8 %v3_a704 to i32
  store i32 %v4_a704, i32* %r2.global-to-local, align 4
  %v2_a708 = icmp ugt i8 %v3_a704, 30
  %v7_a708 = icmp eq i8 %v3_a704, 31
  store i1 %v7_a708, i1* %cpsr_z.global-to-local, align 1
  %v2_a70c = xor i1 %v7_a708, true
  %v3_a70c = and i1 %v2_a708, %v2_a70c
  br i1 %v3_a70c, label %bb, label %bb74

bb:                                               ; preds = %dec_label_pc_a6c8
  %v5_a70c = add i32 %v2_a700, 16
  %v6_a70c = inttoptr i32 %v5_a70c to i32*
  %v7_a70c = load i32, i32* %v6_a70c, align 4
  store i32 %v7_a70c, i32* %r3.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_a6c8, %bb
  %v4_a710 = phi i32 [ %v2_a700, %dec_label_pc_a6c8 ], [ %v7_a70c, %bb ]
  %v4_a710.stack_var_-60.1 = select i1 %v3_a70c, i32 %v4_a710, i32 %stack_var_-60.1
  %v2_a714 = xor i1 %v2_a708, true
  %v3_a714 = or i1 %v7_a708, %v2_a714
  br i1 %v3_a714, label %dec_label_pc_a85c, label %dec_label_pc_a718

dec_label_pc_a718:                                ; preds = %bb74, %dec_label_pc_a85c
  %v0_a8d0 = phi i32 [ %v5_a8ac, %dec_label_pc_a85c ], [ %v4_a710.stack_var_-60.1, %bb74 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a720 = load i32, i32* @sl, align 4
  %v9_a720 = icmp eq i32 %v0_a720, 65535
  store i1 %v9_a720, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a720, label %dec_label_pc_a8b8, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_a718
  %v4_a724 = udiv i32 %v0_a720, 256
  %v2_a728 = urem i32 %v0_a720, 256
  store i32 %v2_a728, i32* %r2.global-to-local, align 4
  %v5_a72c = mul nuw nsw i32 %v2_a728, 256
  %v6_a72c = or i32 %v5_a72c, %v4_a724
  store i32 %v6_a72c, i32* %r3.global-to-local, align 4
  store i32 %v2_a6f8, i32* %r0.global-to-local, align 4
  %v2_a734 = trunc i32 %v6_a72c to i16
  store i16 %v2_a734, i16* %v5_a734, align 2
  br label %dec_label_pc_a73c

dec_label_pc_a73c:                                ; preds = %.thread10, %dec_label_pc_a8b8
  %stack_var_-62.2 = phi i16 [ %v1_a8b8, %dec_label_pc_a8b8 ], [ %stack_var_-62.1, %.thread10 ]
  store i32 %v2_a73c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a744 = load i32, i32* @r5, align 4
  store i32 %v0_a744, i32* %r0.global-to-local, align 4
  %v5_a748 = call i32 @connect(i32 %v0_a744, %sockaddr* %tmp72, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a750 = call i32 @time(i32* null)
  store i32 %v2_a750, i32* %r0.global-to-local, align 4
  store i32 %v2_a750, i32* %r4.global-to-local, align 4
  %v9_a7b0 = icmp eq i32 %tmp36, %v0_a8d0
  %v4_a7d8 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a7b0 to i32
  %v9_a7c4 = icmp eq i1 %v9_a7b0, false
  %v9_a7dc = icmp eq i32 %v3_a7d0, %v4_a7d8
  br label %dec_label_pc_a76c

dec_label_pc_a75c:                                ; preds = %.thread, %dec_label_pc_a7cc, %dec_label_pc_a7f4, %bb78
  %v2_a75c = call i32 @time(i32* null)
  %v0_a760 = load i32, i32* %r4.global-to-local, align 4
  %v2_a760 = sub i32 %v2_a75c, %v0_a760
  store i32 %v2_a760, i32* %r0.global-to-local, align 4
  %v7_a764 = icmp eq i32 %v2_a760, 10
  store i1 %v7_a764, i1* %cpsr_z.global-to-local, align 1
  %v8_a768 = icmp sgt i32 %v2_a760, 10
  br i1 %v8_a768, label %dec_label_pc_a7fc, label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a75c, %dec_label_pc_a73c
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* %r1.global-to-local, align 4
  store i32 %v2_a784, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a78c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_a78c, i32* %r0.global-to-local, align 4
  %v10_a794 = call i32 @recvfrom(i32 %v0_a78c, i32* nonnull %stack_var_-336, i32 256, i32 16384, %sockaddr* %tmp73, i32* nonnull %stack_var_-48)
  store i32 %v10_a794, i32* %r2.global-to-local, align 4
  %v2_a79c = icmp eq i32 %v10_a794, -1
  store i1 %v2_a79c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_a79c, label %dec_label_pc_a850, label %dec_label_pc_a7a8

dec_label_pc_a7a8:                                ; preds = %dec_label_pc_a76c
  store i32 %v0_a8d0, i32* %r1.global-to-local, align 4
  store i32 %tmp36, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a7bc = icmp eq i32 %v10_a794, 40
  store i1 %v7_a7bc, i1* %cpsr_z.global-to-local, align 1
  %tmp105 = icmp ult i32 %v10_a794, 41
  br i1 %tmp105, label %.thread, label %bb78

.thread:                                          ; preds = %dec_label_pc_a7a8
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a75c

bb78:                                             ; preds = %dec_label_pc_a7a8
  store i1 %v9_a7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7c4, label %dec_label_pc_a75c, label %dec_label_pc_a7cc

dec_label_pc_a7cc:                                ; preds = %bb78
  store i32 %v3_a7d0, i32* @lr, align 4
  store i32 %v2_a6f8, i32* %r3.global-to-local, align 4
  store i32 %v4_a7d8, i32* %r2.global-to-local, align 4
  store i1 %v9_a7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7dc, label %dec_label_pc_a7e4, label %dec_label_pc_a75c

dec_label_pc_a7e4:                                ; preds = %dec_label_pc_a7cc
  store i32 %v4_a7e4, i32* %r2.global-to-local, align 4
  store i32 %v1_a7e8, i32* %r3.global-to-local, align 4
  store i1 %v2_a7ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7ec, label %dec_label_pc_a8c8, label %dec_label_pc_a7f4

dec_label_pc_a7f4:                                ; preds = %dec_label_pc_a7e4
  store i1 %v2_a7f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7f4, label %dec_label_pc_a75c, label %dec_label_pc_a7fc

dec_label_pc_a7fc:                                ; preds = %dec_label_pc_a7f4, %dec_label_pc_a75c
  %v0_a7fc = load i32, i32* @r5, align 4
  store i32 %v0_a7fc, i32* %r0.global-to-local, align 4
  %v1_a800 = call i32 @close(i32 %v0_a7fc)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a810 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_a810, i32* %r0.global-to-local, align 4
  %v3_a814 = icmp eq i32 %v3_a810, -1
  store i1 %v3_a814, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a810, i32* @r5, align 4
  br i1 %v3_a814, label %dec_label_pc_a820, label %dec_label_pc_a6c8

dec_label_pc_a820:                                ; preds = %dec_label_pc_a7fc, %dec_label_pc_a6ac, %bb85
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a6ac ], [ %stack_var_-62.2, %bb85 ], [ %stack_var_-62.2, %dec_label_pc_a7fc ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a6ac ], [ %v0_a8d0, %bb85 ], [ %v0_a8d0, %dec_label_pc_a7fc ]
  %v3_a820 = load i32, i32* %stack_var_-44, align 4
  %v1_a824 = add i32 %v3_a820, 1
  store i32 %v1_a824, i32* %r3.global-to-local, align 4
  %v1_a828 = load i32, i32* @r6, align 4
  %v9_a828 = icmp eq i32 %v1_a824, %v1_a828
  store i1 %v9_a828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a824, i32* %stack_var_-44, align 4
  %v5_a830 = icmp slt i32 %v1_a824, %v1_a828
  br i1 %v5_a830, label %dec_label_pc_a6ac, label %dec_label_pc_a834

dec_label_pc_a834:                                ; preds = %dec_label_pc_a820
  store i32 %v6_a628, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aae4

dec_label_pc_a848:                                ; preds = %dec_label_pc_a66c
  %v0_a848 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_a848, i32* %r0.global-to-local, align 4
  %v1_a84c = call i32 @close(i32 %v0_a848)
  store i32 %v1_a84c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a850

dec_label_pc_a850:                                ; preds = %dec_label_pc_a76c, %dec_label_pc_a488, %dec_label_pc_a848
  %v1_a858 = phi i32 [ -1, %dec_label_pc_a488 ], [ %v1_a84c, %dec_label_pc_a848 ], [ 0, %dec_label_pc_a76c ]
  store i32 %v3_a488, i32* %r4.global-to-local, align 4
  store i32 %v27_a488, i32* %lr.global-to-local, align 4
  ret i32 %v1_a858

dec_label_pc_a85c:                                ; preds = %bb74
  %v1_a85c = add i32 %v4_a710, 16
  %v2_a85c = inttoptr i32 %v1_a85c to i32*
  %v3_a85c = load i32, i32* %v2_a85c, align 4
  store i32 %v3_a85c, i32* %r4.global-to-local, align 4
  %v0_a860 = call i32 @function_ee68()
  store i32 %v0_a860, i32* %r0.global-to-local, align 4
  %v3_a864 = load i32, i32* %stack_var_-44, align 4
  %v5_a86c = mul i32 %v3_a864, 24
  %v1_a874 = and i32 %v3_a85c, 16711680
  store i32 %v1_a874, i32* %ip.global-to-local, align 4
  %v3_a878 = udiv i32 %v3_a85c, 16777216
  %v2_a87c = add i32 %v5_a86c, %arg2
  store i32 %v2_a87c, i32* %r1.global-to-local, align 4
  %v4_a880 = udiv i32 %v1_a874, 256
  %v5_a880 = or i32 %v4_a880, %v3_a878
  store i32 %v5_a880, i32* %r2.global-to-local, align 4
  %v1_a884 = and i32 %v3_a85c, 65280
  store i32 %v1_a884, i32* %r3.global-to-local, align 4
  %v1_a888 = add i32 %v2_a87c, 20
  %v2_a888 = inttoptr i32 %v1_a888 to i8*
  %v3_a888 = load i8, i8* %v2_a888, align 1
  %v4_a888 = zext i8 %v3_a888 to i32
  store i32 %v4_a888, i32* %ip.global-to-local, align 4
  %v5_a890 = call i32 @llvm.bswap.i32(i32 %v3_a85c)
  %v7_a894 = lshr i32 %v0_a860, %v4_a888
  %v8_a894 = add i32 %v7_a894, %v5_a890
  store i32 %v8_a894, i32* %r2.global-to-local, align 4
  %v1_a898 = and i32 %v8_a894, 16711680
  store i32 %v1_a898, i32* %r0.global-to-local, align 4
  %v1_a8a4 = and i32 %v8_a894, 65280
  store i32 %v1_a8a4, i32* %r1.global-to-local, align 4
  %v5_a8ac = call i32 @llvm.bswap.i32(i32 %v8_a894)
  store i32 %v5_a8ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a718

dec_label_pc_a8b8:                                ; preds = %dec_label_pc_a718
  %v0_a8b8 = call i32 @function_ee68()
  %v1_a8b8 = trunc i32 %v0_a8b8 to i16
  store i32 %v0_a8b8, i32* %r0.global-to-local, align 4
  store i32 %v2_a6f8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a73c

dec_label_pc_a8c8:                                ; preds = %dec_label_pc_a7e4
  %v3_a8c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a8c8, i32* %r4.global-to-local, align 4
  store i32 %v4_a4a4, i32* %ip.global-to-local, align 4
  %v5_a8d0 = mul i32 %v3_a8c8, 16
  %v6_a8d0 = add i32 %v5_a8d0, %v4_a4a4
  %v7_a8d0 = inttoptr i32 %v6_a8d0 to i32*
  store i32 %v0_a8d0, i32* %v7_a8d0, align 4
  %v0_a8d4 = load i32, i32* @r8, align 4
  %v1_a8d4 = add i32 %v0_a8d4, 4
  %v2_a8d4 = inttoptr i32 %v1_a8d4 to i32*
  %v3_a8d4 = load i32, i32* %v2_a8d4, align 4
  store i32 %v3_a8d4, i32* %r1.global-to-local, align 4
  %v1_a8e0 = and i32 %v3_a8d4, 65280
  store i32 %v1_a8e0, i32* %r2.global-to-local, align 4
  store i32 %v4_a4a4, i32* %r0.global-to-local, align 4
  %v0_a8f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a8f0 = mul i32 %v0_a8f0, 16
  %v2_a8f4 = add i32 %v3_a8f0, %v4_a4a4
  store i32 %v2_a8f4, i32* %ip.global-to-local, align 4
  %v5_a8f8 = call i32 @llvm.bswap.i32(i32 %v3_a8d4)
  store i32 %v5_a8f8, i32* %r3.global-to-local, align 4
  %v2_a8fc = add i32 %v2_a8f4, 4
  %v3_a8fc = inttoptr i32 %v2_a8fc to i32*
  store i32 %v5_a8f8, i32* %v3_a8fc, align 4
  %v0_a900 = load i32, i32* @r8, align 4
  %v1_a900 = add i32 %v0_a900, 8
  %v2_a900 = inttoptr i32 %v1_a900 to i32*
  %v3_a900 = load i32, i32* %v2_a900, align 4
  store i32 %v3_a900, i32* %r1.global-to-local, align 4
  %v1_a904 = and i32 %v3_a900, 16711680
  store i32 %v1_a904, i32* %r0.global-to-local, align 4
  store i32 %v6_a628, i32* %r2.global-to-local, align 4
  %v5_a91c = call i32 @llvm.bswap.i32(i32 %v3_a900)
  store i32 %v5_a91c, i32* %r3.global-to-local, align 4
  %v1_a920 = add i32 %v0_a900, 2
  %v2_a920 = inttoptr i32 %v1_a920 to i16*
  %v3_a920 = load i16, i16* %v2_a920, align 2
  %v4_a920 = zext i16 %v3_a920 to i32
  store i32 %v4_a920, i32* %r1.global-to-local, align 4
  store i32 %v1_a924, i32* @r7, align 4
  %v0_a928 = load i32, i32* @lr, align 4
  %v1_a928 = trunc i32 %v0_a928 to i16
  %v2_a928 = load i32, i32* %ip.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 14
  %v4_a928 = inttoptr i32 %v3_a928 to i16*
  store i16 %v1_a928, i16* %v4_a928, align 2
  %v0_a92c = load i32, i32* %r1.global-to-local, align 4
  %v1_a92c = trunc i32 %v0_a92c to i16
  %v2_a92c = load i32, i32* %ip.global-to-local, align 4
  %v3_a92c = add i32 %v2_a92c, 12
  %v4_a92c = inttoptr i32 %v3_a92c to i16*
  store i16 %v1_a92c, i16* %v4_a92c, align 2
  %v0_a930 = load i32, i32* %r3.global-to-local, align 4
  %v1_a930 = load i32, i32* %ip.global-to-local, align 4
  %v2_a930 = add i32 %v1_a930, 8
  %v3_a930 = inttoptr i32 %v2_a930 to i32*
  store i32 %v0_a930, i32* %v3_a930, align 4
  %v0_a934 = load i32, i32* @r7, align 4
  store i32 %v0_a934, i32* %r0.global-to-local, align 4
  %v1_a938 = call i32* @malloc(i32 %v0_a934)
  %v3_a938 = ptrtoint i32* %v1_a938 to i32
  store i32 %v3_a938, i32* %r0.global-to-local, align 4
  store i32 %v4_a4b4, i32* %r3.global-to-local, align 4
  %v2_a944 = load i32, i32* %r4.global-to-local, align 4
  %v5_a944 = mul i32 %v2_a944, 4
  %v6_a944 = add i32 %v5_a944, %v4_a4b4
  %v7_a944 = inttoptr i32 %v6_a944 to i32*
  store i32 %v3_a938, i32* %v7_a944, align 4
  %v3_a948 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a948, i32* %r2.global-to-local, align 4
  %v0_a94c = load i32, i32* %r3.global-to-local, align 4
  %v4_a94c = mul i32 %v3_a948, 4
  %v5_a94c = add i32 %v0_a94c, %v4_a94c
  %v6_a94c = inttoptr i32 %v5_a94c to i32*
  %v7_a94c = load i32, i32* %v6_a94c, align 4
  store i32 %v7_a94c, i32* @r4, align 4
  %v1_a950 = inttoptr i32 %v7_a94c to i8*
  %v2_a950 = load i8, i8* %v1_a950, align 1
  %tmp106 = urem i8 %v2_a950, 16
  %v1_a954 = zext i8 %tmp106 to i32
  %v1_a958 = or i32 %v1_a954, 64
  store i32 %v1_a958, i32* %r3.global-to-local, align 4
  %v1_a95c = trunc i32 %v1_a958 to i8
  store i8 %v1_a95c, i8* %v1_a950, align 1
  %v0_a960 = load i32, i32* @r4, align 4
  %v1_a960 = inttoptr i32 %v0_a960 to i8*
  %v2_a960 = load i8, i8* %v1_a960, align 1
  %v0_a964 = load i32, i32* @r7, align 4
  %tmp80 = mul i32 %v0_a964, 256
  %v1_a96c = and i8 %v2_a960, -16
  %v1_a970 = or i8 %v1_a96c, 5
  %v1_a974 = and i32 %tmp80, 65280
  %tmp81 = udiv i32 %v0_a964, 256
  %v4_a978 = urem i32 %tmp81, 256
  %v5_a978 = or i32 %v4_a978, %v1_a974
  store i32 %v5_a978, i32* %r2.global-to-local, align 4
  %v0_a97c = load i32, i32* %fp.global-to-local, align 4
  %v1_a97c = urem i32 %v0_a97c, 256
  store i32 %v1_a97c, i32* %r0.global-to-local, align 4
  store i32 %v1_a534, i32* %ip.global-to-local, align 4
  %v3_a984 = udiv i32 %v0_a97c, 256
  store i32 %v3_a984, i32* %r1.global-to-local, align 4
  store i8 %v1_a970, i8* %v1_a960, align 1
  %v0_a98c = load i32, i32* %r1.global-to-local, align 4
  %v1_a98c = load i32, i32* %r0.global-to-local, align 4
  %v4_a98c = mul i32 %v1_a98c, 256
  %v5_a98c = or i32 %v4_a98c, %v0_a98c
  store i32 %v5_a98c, i32* %r1.global-to-local, align 4
  store i32 %v6_a4cc, i32* %r0.global-to-local, align 4
  %v2_a994 = load i32, i32* @r4, align 4
  %v3_a994 = add i32 %v2_a994, 1
  %v4_a994 = inttoptr i32 %v3_a994 to i8*
  store i8 %v5_a4ec, i8* %v4_a994, align 1
  %v0_a998 = load i32, i32* %r1.global-to-local, align 4
  %v1_a998 = trunc i32 %v0_a998 to i16
  %v2_a998 = load i32, i32* @r4, align 4
  %v3_a998 = add i32 %v2_a998, 4
  %v4_a998 = inttoptr i32 %v3_a998 to i16*
  store i16 %v1_a998, i16* %v4_a998, align 2
  %v0_a99c = load i32, i32* %ip.global-to-local, align 4
  %v2_a99c = icmp eq i32 %v0_a99c, 0
  store i1 %v2_a99c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a528, i32* %r1.global-to-local, align 4
  %v0_a9a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9a4 = trunc i32 %v0_a9a4 to i16
  %v2_a9a4 = load i32, i32* @r4, align 4
  %v3_a9a4 = add i32 %v2_a9a4, 2
  %v4_a9a4 = inttoptr i32 %v3_a9a4 to i16*
  store i16 %v1_a9a4, i16* %v4_a9a4, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a99c, label %bb83, label %bb82

bb82:                                             ; preds = %dec_label_pc_a8c8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %dec_label_pc_a8c8, %bb82
  %v0_a9b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a9b0 = trunc i32 %v0_a9b0 to i8
  %v2_a9b0 = load i32, i32* @r4, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 8
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v1_a9b0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r4, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 9
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a9b8, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_a9b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a9b8 = trunc i32 %v1_a9b8 to i16
  %v3_a9b8 = load i32, i32* @r4, align 4
  %v4_a9b8 = add i32 %v3_a9b8, 6
  %v5_a9b8 = inttoptr i32 %v4_a9b8 to i16*
  store i16 %v2_a9b8, i16* %v5_a9b8, align 2
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  store i32 ptrtoint (i32* @global_var_1a230.41 to i32), i32* %r2.global-to-local, align 4
  %v2_a9c0 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_a9c0, i32* %r1.global-to-local, align 4
  %v1_a9c4 = load i32, i32* @r4, align 4
  %v2_a9c4 = add i32 %v1_a9c4, 12
  %v3_a9c4 = inttoptr i32 %v2_a9c4 to i32*
  store i32 %v2_a9c0, i32* %v3_a9c4, align 4
  %v3_a9c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a9c8, i32* %r3.global-to-local, align 4
  store i32 %v4_a4a4, i32* %ip.global-to-local, align 4
  %v4_a9d0 = mul i32 %v3_a9c8, 16
  %v5_a9d0 = add i32 %v4_a9d0, %v4_a4a4
  %v6_a9d0 = inttoptr i32 %v5_a9d0 to i32*
  %v7_a9d0 = load i32, i32* %v6_a9d0, align 4
  store i32 %v7_a9d0, i32* %r2.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r3.global-to-local, align 4
  %v1_a9dc = load i32, i32* @r4, align 4
  %v2_a9dc = add i32 %v1_a9dc, 16
  %v3_a9dc = inttoptr i32 %v2_a9dc to i32*
  store i32 %v7_a9d0, i32* %v3_a9dc, align 4
  %v0_a9e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9e0 = add i32 %v0_a9e0, 12
  %v2_a9e0 = inttoptr i32 %v1_a9e0 to i16*
  %v3_a9e0 = load i16, i16* %v2_a9e0, align 2
  %v4_a9e0 = zext i16 %v3_a9e0 to i32
  store i32 %v4_a9e0, i32* %r0.global-to-local, align 4
  %v1_a9e4 = add i32 %v0_a9e0, 8
  %v2_a9e4 = inttoptr i32 %v1_a9e4 to i32*
  %v3_a9e4 = load i32, i32* %v2_a9e4, align 4
  store i32 %v3_a9e4, i32* %r1.global-to-local, align 4
  %v2_a9e8 = load i32, i32* @r4, align 4
  %v3_a9e8 = add i32 %v2_a9e8, 20
  %v4_a9e8 = inttoptr i32 %v3_a9e8 to i16*
  store i16 %v3_a9e0, i16* %v4_a9e8, align 2
  %v0_a9ec = load i32, i32* @r4, align 4
  %v1_a9ec = add i32 %v0_a9ec, 20
  store i32 %v1_a9ec, i32* @r8, align 4
  %v1_a9f0 = add i32 %v0_a9ec, 33
  %v2_a9f0 = inttoptr i32 %v1_a9f0 to i8*
  %v3_a9f0 = load i8, i8* %v2_a9f0, align 1
  %v4_a9f0 = zext i8 %v3_a9f0 to i32
  store i32 %v4_a9f0, i32* %r2.global-to-local, align 4
  %v0_a9f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_a9f4 = add i32 %v0_a9ec, 24
  %v3_a9f4 = inttoptr i32 %v2_a9f4 to i32*
  store i32 %v0_a9f4, i32* %v3_a9f4, align 4
  %v0_a9f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9f8 = or i32 %v0_a9f8, 1
  store i32 %v1_a9f8, i32* %r2.global-to-local, align 4
  %v0_a9fc = load i32, i32* %r3.global-to-local, align 4
  %v1_a9fc = add i32 %v0_a9fc, 4
  %v2_a9fc = inttoptr i32 %v1_a9fc to i32*
  %v3_a9fc = load i32, i32* %v2_a9fc, align 4
  store i32 %v3_a9fc, i32* %r1.global-to-local, align 4
  %v1_aa00 = add i32 %v0_a9fc, 14
  %v2_aa00 = inttoptr i32 %v1_aa00 to i16*
  %v3_aa00 = load i16, i16* %v2_aa00, align 2
  %v4_aa00 = zext i16 %v3_aa00 to i32
  store i32 %v4_aa00, i32* %r3.global-to-local, align 4
  %v1_aa04 = trunc i32 %v1_a9f8 to i8
  %v2_aa04 = load i32, i32* @r8, align 4
  %v3_aa04 = add i32 %v2_aa04, 13
  %v4_aa04 = inttoptr i32 %v3_aa04 to i8*
  store i8 %v1_aa04, i8* %v4_aa04, align 1
  %v0_aa08 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa08 = trunc i32 %v0_aa08 to i16
  %v2_aa08 = load i32, i32* @r8, align 4
  %v3_aa08 = add i32 %v2_aa08, 2
  %v4_aa08 = inttoptr i32 %v3_aa08 to i16*
  store i16 %v1_aa08, i16* %v4_aa08, align 2
  %v0_aa0c = load i32, i32* @r8, align 4
  %v1_aa0c = add i32 %v0_aa0c, 12
  %v2_aa0c = inttoptr i32 %v1_aa0c to i8*
  %v3_aa0c = load i8, i8* %v2_aa0c, align 1
  %v4_aa0c = zext i8 %v3_aa0c to i32
  store i32 %v4_aa0c, i32* %r3.global-to-local, align 4
  %v1_aa10 = add i32 %v0_aa0c, 13
  %v2_aa10 = inttoptr i32 %v1_aa10 to i8*
  %v3_aa10 = load i8, i8* %v2_aa10, align 1
  %v4_aa10 = zext i8 %v3_aa10 to i32
  %tmp107 = urem i8 %v3_aa0c, 16
  %v1_aa14 = zext i8 %tmp107 to i32
  %v1_aa18 = or i32 %v1_aa14, 128
  store i32 %v1_aa18, i32* %r3.global-to-local, align 4
  %v1_aa1c = or i32 %v4_aa10, 16
  store i32 %v1_aa1c, i32* %r2.global-to-local, align 4
  %v0_aa20 = load i32, i32* %r1.global-to-local, align 4
  %v2_aa20 = add i32 %v0_aa0c, 8
  %v3_aa20 = inttoptr i32 %v2_aa20 to i32*
  store i32 %v0_aa20, i32* %v3_aa20, align 4
  %v0_aa24 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa24 = trunc i32 %v0_aa24 to i8
  %v2_aa24 = load i32, i32* @r8, align 4
  %v3_aa24 = add i32 %v2_aa24, 12
  %v4_aa24 = inttoptr i32 %v3_aa24 to i8*
  store i8 %v1_aa24, i8* %v4_aa24, align 1
  %v0_aa28 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* @r8, align 4
  %v3_aa28 = add i32 %v2_aa28, 13
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = call i32 @function_ee68()
  %v1_aa2c = trunc i32 %v0_aa2c to i16
  store i32 %v0_aa2c, i32* %r0.global-to-local, align 4
  store i32 %v1_a570, i32* %r1.global-to-local, align 4
  %v0_aa34 = load i32, i32* @r8, align 4
  %v1_aa34 = add i32 %v0_aa34, 13
  %v2_aa34 = inttoptr i32 %v1_aa34 to i8*
  %v3_aa34 = load i8, i8* %v2_aa34, align 1
  %v4_aa34 = zext i8 %v3_aa34 to i32
  store i32 %v1_aa38, i32* %r2.global-to-local, align 4
  %v1_aa3c = and i32 %v4_aa34, 223
  %v5_aa40 = or i32 %v1_aa3c, %v4_aa40
  store i32 %v5_aa40, i32* %r3.global-to-local, align 4
  %v1_aa44 = trunc i32 %v5_aa40 to i8
  store i8 %v1_aa44, i8* %v2_aa34, align 1
  store i32 %v1_a590, i32* %ip.global-to-local, align 4
  %v0_aa4c = load i32, i32* @r8, align 4
  %v1_aa4c = add i32 %v0_aa4c, 13
  %v2_aa4c = inttoptr i32 %v1_aa4c to i8*
  %v3_aa4c = load i8, i8* %v2_aa4c, align 1
  %v4_aa4c = zext i8 %v3_aa4c to i32
  store i32 %v1_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = and i32 %v4_aa4c, 239
  %v5_aa58 = or i32 %v1_aa54, %v4_aa58
  store i32 %v5_aa58, i32* %r2.global-to-local, align 4
  %v1_aa5c = trunc i32 %v5_aa58 to i8
  store i8 %v1_aa5c, i8* %v2_aa4c, align 1
  store i32 %v1_a5b0, i32* %r1.global-to-local, align 4
  %v0_aa64 = load i32, i32* @r8, align 4
  %v1_aa64 = add i32 %v0_aa64, 13
  %v2_aa64 = inttoptr i32 %v1_aa64 to i8*
  %v3_aa64 = load i8, i8* %v2_aa64, align 1
  %v4_aa64 = zext i8 %v3_aa64 to i32
  store i32 %v1_aa68, i32* %r2.global-to-local, align 4
  %v1_aa6c = and i32 %v4_aa64, 247
  %v5_aa70 = or i32 %v1_aa6c, %v4_aa70
  store i32 %v5_aa70, i32* %r3.global-to-local, align 4
  %v1_aa74 = trunc i32 %v5_aa70 to i8
  store i8 %v1_aa74, i8* %v2_aa64, align 1
  store i32 %v1_a5d0, i32* %ip.global-to-local, align 4
  %v0_aa7c = load i32, i32* @r8, align 4
  %v1_aa7c = add i32 %v0_aa7c, 13
  %v2_aa7c = inttoptr i32 %v1_aa7c to i8*
  %v3_aa7c = load i8, i8* %v2_aa7c, align 1
  %v4_aa7c = zext i8 %v3_aa7c to i32
  store i32 %v1_aa80, i32* %r3.global-to-local, align 4
  %v1_aa84 = and i32 %v4_aa7c, 251
  %v5_aa88 = or i32 %v1_aa84, %v4_aa88
  store i32 %v5_aa88, i32* %r2.global-to-local, align 4
  %v1_aa8c = trunc i32 %v5_aa88 to i8
  store i8 %v1_aa8c, i8* %v2_aa7c, align 1
  store i32 %v1_a5f0, i32* %r1.global-to-local, align 4
  %v0_aa94 = load i32, i32* @r8, align 4
  %v1_aa94 = add i32 %v0_aa94, 13
  %v2_aa94 = inttoptr i32 %v1_aa94 to i8*
  %v3_aa94 = load i8, i8* %v2_aa94, align 1
  %v4_aa94 = zext i8 %v3_aa94 to i32
  store i32 %v1_aa98, i32* %r2.global-to-local, align 4
  %v1_aa9c = and i32 %v4_aa94, 253
  %v4_aaa0 = or i32 %v1_aa9c, %v3_aaa0
  store i32 %v4_aaa0, i32* %r3.global-to-local, align 4
  %v1_aaa4 = trunc i32 %v4_aaa0 to i8
  store i8 %v1_aaa4, i8* %v2_aa94, align 1
  store i32 %v1_a610, i32* %ip.global-to-local, align 4
  %v0_aaac = load i32, i32* @r8, align 4
  %v1_aaac = add i32 %v0_aaac, 13
  %v2_aaac = inttoptr i32 %v1_aaac to i8*
  %v3_aaac = load i8, i8* %v2_aaac, align 1
  %v4_aaac = zext i8 %v3_aaac to i32
  %v1_aab4 = and i32 %v4_aaac, 254
  store i32 %v1_aab4, i32* %r2.global-to-local, align 4
  %v2_aab8 = or i32 %v1_aab4, %v1_aab0
  store i32 %v2_aab8, i32* %r3.global-to-local, align 4
  %v1_aabc = trunc i32 %v2_aab8 to i8
  store i8 %v1_aabc, i8* %v2_aaac, align 1
  %v3_aac0 = load i32, i32* @r8, align 4
  %v4_aac0 = add i32 %v3_aac0, 14
  %v5_aac0 = inttoptr i32 %v4_aac0 to i16*
  store i16 %v1_aa2c, i16* %v5_aac0, align 2
  store i32 %v6_a628, i32* %r1.global-to-local, align 4
  %v0_aac8 = load i32, i32* @r4, align 4
  %v1_aac8 = add i32 %v0_aac8, 40
  store i32 %v1_aac8, i32* %r0.global-to-local, align 4
  %v2_aacc = inttoptr i32 %v1_aac8 to i16*
  %v3_aacc = call i32 @function_effc(i16* %v2_aacc, i32 %v6_a628)
  store i32 %v3_aacc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a820

dec_label_pc_aad4:                                ; preds = %dec_label_pc_a694
  store i32 %v6_a628, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a628, 40
  br label %dec_label_pc_aae4

dec_label_pc_aae4:                                ; preds = %dec_label_pc_a834, %dec_label_pc_aad4
  %storemerge7.pre-phi = phi i32 [ %v1_a924, %dec_label_pc_a834 ], [ %.pre, %dec_label_pc_aad4 ]
  %v0_aaf827 = phi i32 [ %v1_a828, %dec_label_pc_a834 ], [ 0, %dec_label_pc_aad4 ]
  store i32 %storemerge7.pre-phi, i32* @r7, align 4
  %storemerge5 = mul i32 %v6_a628, 65536
  %storemerge = add i32 %v6_a628, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_aae4 = add i32 %storemerge5, 1310720
  store i32 %v1_aae4, i32* %r2.global-to-local, align 4
  %tmp86 = udiv i32 %v1_aae4, 256
  %v3_aaec = and i32 %tmp86, 65280
  store i32 %v3_aaec, i32* %r3.global-to-local, align 4
  %v4_aaf0 = udiv i32 %v1_aae4, 16777216
  %v5_aaf0 = or i32 %v3_aaec, %v4_aaf0
  store i32 %v5_aaf0, i32* @r8, align 4
  %v2_ac1c = icmp eq i32 %v1_a648, 0
  br label %dec_label_pc_aaf4

dec_label_pc_aaf4:                                ; preds = %dec_label_pc_aaf4, %dec_label_pc_ac00, %dec_label_pc_aae4
  %v0_aaf8 = phi i32 [ %v0_aaf827, %dec_label_pc_aae4 ], [ 0, %dec_label_pc_ac00 ], [ 0, %dec_label_pc_aaf4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aaf8 = icmp eq i32 %v0_aaf8, 0
  store i1 %v2_aaf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aaf8, label %dec_label_pc_aaf4, label %dec_label_pc_ab04

dec_label_pc_ab04:                                ; preds = %dec_label_pc_aaf4, %dec_label_pc_ac00
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab08

dec_label_pc_ab08:                                ; preds = %dec_label_pc_ab30, %dec_label_pc_ab04
  %v1_ab10 = phi i32 [ %v1_abf0, %dec_label_pc_ab30 ], [ 0, %dec_label_pc_ab04 ]
  store i32 %v4_a4b4, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_ab10 = mul i32 %v1_ab10, 4
  %v5_ab10 = add i32 %v4_ab10, %v4_a4b4
  %v6_ab10 = inttoptr i32 %v5_ab10 to i32*
  %v7_ab10 = load i32, i32* %v6_ab10, align 4
  store i32 %v7_ab10, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ab18 = load i32, i32* %fp.global-to-local, align 4
  %v9_ab18 = icmp eq i32 %v0_ab18, 65535
  store i1 %v9_ab18, i1* %cpsr_z.global-to-local, align 1
  %v1_ab1c = add i32 %v7_ab10, 20
  store i32 %v1_ab1c, i32* @r5, align 4
  br i1 %v9_ab18, label %dec_label_pc_ac14, label %dec_label_pc_ab24

dec_label_pc_ab24:                                ; preds = %dec_label_pc_ab08
  store i32 %v1_a648, i32* %r3.global-to-local, align 4
  store i1 %v2_ac1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac1c, label %dec_label_pc_ab30, label %dec_label_pc_ac28

dec_label_pc_ab30:                                ; preds = %dec_label_pc_ab24, %dec_label_pc_ac14, %dec_label_pc_ac28
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ab34 = load i32, i32* @r4, align 4
  %v3_ab34 = add i32 %v2_ab34, 10
  %v4_ab34 = inttoptr i32 %v3_ab34 to i16*
  store i16 0, i16* %v4_ab34, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ab3c = load i32, i32* @r4, align 4
  store i32 %v0_ab3c, i32* @r0, align 4
  %v2_ab40 = call i32 @function_d414(i32 %v0_ab3c, i32 20)
  %v3_ab40 = trunc i32 %v2_ab40 to i16
  store i32 %v2_ab40, i32* %r0.global-to-local, align 4
  %v3_ab44 = load i32, i32* %stack_var_-44, align 4
  store i32 %v4_a4a4, i32* %r2.global-to-local, align 4
  %v3_ab4c = mul i32 %v3_ab44, 16
  %v2_ab50 = add i32 %v3_ab4c, %v4_a4a4
  store i32 %v2_ab50, i32* %r1.global-to-local, align 4
  %v1_ab54 = add i32 %v2_ab50, 4
  %v2_ab54 = inttoptr i32 %v1_ab54 to i32*
  %v3_ab54 = load i32, i32* %v2_ab54, align 4
  %v3_ab58 = mul i32 %v3_ab54, 65536
  store i32 %v3_ab58, i32* %ip.global-to-local, align 4
  %tmp88 = mul i32 %v3_ab54, 256
  %v1_ab60 = and i32 %tmp88, 65280
  %tmp89 = udiv i32 %v3_ab54, 256
  %v4_ab64 = urem i32 %tmp89, 256
  %v5_ab64 = or i32 %v4_ab64, %v1_ab60
  store i32 %v5_ab64, i32* %r3.global-to-local, align 4
  %v1_ab68 = add i32 %v3_ab54, 1
  store i32 %v1_ab68, i32* %r2.global-to-local, align 4
  store i32 %v1_ab68, i32* %v2_ab54, align 4
  %v0_ab70 = load i32, i32* %r3.global-to-local, align 4
  %v1_ab70 = load i32, i32* @r5, align 4
  %v2_ab70 = add i32 %v1_ab70, 4
  %v3_ab70 = inttoptr i32 %v2_ab70 to i32*
  store i32 %v0_ab70, i32* %v3_ab70, align 4
  %v0_ab74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ab74 = add i32 %v0_ab74, 8
  %v2_ab74 = inttoptr i32 %v1_ab74 to i32*
  %v3_ab74 = load i32, i32* %v2_ab74, align 4
  %tmp90 = mul i32 %v3_ab74, 256
  %v1_ab80 = and i32 %tmp90, 65280
  %tmp91 = udiv i32 %v3_ab74, 256
  %v4_ab84 = urem i32 %tmp91, 256
  %v5_ab84 = or i32 %v4_ab84, %v1_ab80
  %v1_ab88 = load i32, i32* @r5, align 4
  %v2_ab88 = add i32 %v1_ab88, 8
  %v3_ab88 = inttoptr i32 %v2_ab88 to i32*
  store i32 %v5_ab84, i32* %v3_ab88, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ab90 = load i32, i32* @r4, align 4
  %v4_ab90 = add i32 %v3_ab90, 10
  %v5_ab90 = inttoptr i32 %v4_ab90 to i16*
  store i16 %v3_ab40, i16* %v5_ab90, align 2
  %v0_ab94 = load i32, i32* @r5, align 4
  store i32 %v0_ab94, i32* @r1, align 4
  %v0_ab98 = load i32, i32* %r3.global-to-local, align 4
  %v1_ab98 = trunc i32 %v0_ab98 to i16
  %v3_ab98 = add i32 %v0_ab94, 16
  %v4_ab98 = inttoptr i32 %v3_ab98 to i16*
  store i16 %v1_ab98, i16* %v4_ab98, align 2
  %v0_ab9c = load i32, i32* @r8, align 4
  store i32 %v0_ab9c, i32* %r2.global-to-local, align 4
  %v0_aba0 = load i32, i32* @sl, align 4
  store i32 %v0_aba0, i32* %r3.global-to-local, align 4
  %v0_aba4 = load i32, i32* @r4, align 4
  store i32 %v0_aba4, i32* %r0.global-to-local, align 4
  %v4_aba8 = call i32 @function_d464(i32 %v0_aba4, i32 %v0_ab94, i32 %v0_ab9c, i32 %v0_aba0)
  %v5_aba8 = trunc i32 %v4_aba8 to i16
  store i32 %v4_aba8, i32* %r0.global-to-local, align 4
  %v3_abac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_abac, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_abb4 = mul i32 %v3_abac, 32
  store i32 %v3_abb4, i32* %lr.global-to-local, align 4
  %v3_abb8 = load i32, i32* @r5, align 4
  %v4_abb8 = add i32 %v3_abb8, 16
  %v5_abb8 = inttoptr i32 %v4_abb8 to i16*
  store i16 %v5_aba8, i16* %v5_abb8, align 2
  %v0_abbc = load i32, i32* %lr.global-to-local, align 4
  %v1_abbc = load i32, i32* %r3.global-to-local, align 4
  %tmp108 = mul i32 %v1_abbc, -8
  %v5_abbc = add i32 %v0_abbc, %tmp108
  store i32 %v5_abbc, i32* %lr.global-to-local, align 4
  %v0_abc0 = load i32, i32* @r5, align 4
  %v1_abc0 = add i32 %v0_abc0, 2
  %v2_abc0 = inttoptr i32 %v1_abc0 to i16*
  %v3_abc0 = load i16, i16* %v2_abc0, align 2
  %v1_abc4 = load i32, i32* %ip.global-to-local, align 4
  %v2_abc4 = add i32 %v1_abc4, %v5_abbc
  store i32 %v2_abc4, i32* @lr, align 4
  %v3_abc8 = add i32 %v2_abc4, 2
  %v4_abc8 = inttoptr i32 %v3_abc8 to i16*
  store i16 %v3_abc0, i16* %v4_abc8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_abd4 = load i32, i32* @r4, align 4
  store i32 %v0_abd4, i32* %r1.global-to-local, align 4
  %v0_abd8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_abd8, i32* %r0.global-to-local, align 4
  %v0_abdc = load i32, i32* @r7, align 4
  store i32 %v0_abdc, i32* %r2.global-to-local, align 4
  %v0_abe0 = load i32, i32* @lr, align 4
  %v4_abe0 = inttoptr i32 %v0_abe0 to %sockaddr*
  %v7_abe8 = inttoptr i32 %v0_abd4 to i32*
  %v9_abe8 = call i32 @sendto(i32 %v0_abd8, i32* %v7_abe8, i32 %v0_abdc, i32 16384, %sockaddr* %v4_abe0, i32 16)
  %v3_abec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_abec, i32* %r3.global-to-local, align 4
  %v1_abf0 = add i32 %v3_abec, 1
  store i32 %v1_abf0, i32* %r0.global-to-local, align 4
  %v0_abf4 = load i32, i32* @r6, align 4
  %v9_abf4 = icmp eq i32 %v0_abf4, %v1_abf0
  store i1 %v9_abf4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_abf0, i32* %stack_var_-44, align 4
  %v8_abfc = icmp sgt i32 %v0_abf4, %v1_abf0
  br i1 %v8_abfc, label %dec_label_pc_ab08, label %dec_label_pc_ac00

dec_label_pc_ac00:                                ; preds = %dec_label_pc_ab30
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ac04 = icmp eq i32 %v0_abf4, 0
  store i1 %v2_ac04, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ac04, label %dec_label_pc_aaf4, label %dec_label_pc_ab04

dec_label_pc_ac14:                                ; preds = %dec_label_pc_ab08
  %v0_ac14 = call i32 @function_ee68()
  %v1_ac14 = trunc i32 %v0_ac14 to i16
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  store i32 %v1_a648, i32* %r3.global-to-local, align 4
  store i1 %v2_ac1c, i1* %cpsr_z.global-to-local, align 1
  %v3_ac20 = load i32, i32* @r4, align 4
  %v4_ac20 = add i32 %v3_ac20, 4
  %v5_ac20 = inttoptr i32 %v4_ac20 to i16*
  store i16 %v1_ac14, i16* %v5_ac20, align 2
  br i1 %v2_ac1c, label %dec_label_pc_ab30, label %dec_label_pc_ac14.dec_label_pc_ac28_crit_edge

dec_label_pc_ac14.dec_label_pc_ac28_crit_edge:    ; preds = %dec_label_pc_ac14
  %v0_ac28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ac28

dec_label_pc_ac28:                                ; preds = %dec_label_pc_ac14.dec_label_pc_ac28_crit_edge, %dec_label_pc_ab24
  %v0_ac28 = phi i32 [ %v0_ac28.pre, %dec_label_pc_ac14.dec_label_pc_ac28_crit_edge ], [ %v7_ab10, %dec_label_pc_ab24 ]
  %v1_ac28 = add i32 %v0_ac28, 40
  store i32 %v1_ac28, i32* %r0.global-to-local, align 4
  store i32 %v6_a628, i32* %r1.global-to-local, align 4
  %v2_ac30 = inttoptr i32 %v1_ac28 to i16*
  %v3_ac30 = call i32 @function_effc(i16* %v2_ac30, i32 %v6_a628)
  store i32 %v3_ac30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab30

; uselistorder directives
  uselistorder i32 %v0_ac14, { 1, 0 }
  uselistorder i32 %v1_abf0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_abbc, { 1, 0 }
  uselistorder i32 %v4_aba8, { 1, 0 }
  uselistorder i32 %v3_ab74, { 1, 0 }
  uselistorder i32 %v3_ab54, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ab40, { 1, 0 }
  uselistorder i1 %v2_ac1c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_aa2c, { 1, 0 }
  uselistorder i32 %v0_a964, { 1, 0 }
  uselistorder i32 %v5_a8f8, { 1, 0 }
  uselistorder i32 %v0_a8b8, { 1, 0 }
  uselistorder i32 %v3_a85c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_a824, { 1, 0, 2, 3 }
  uselistorder i1 %v3_a814, { 1, 0 }
  uselistorder i32 %v3_a810, { 0, 2, 3, 1 }
  uselistorder i1 %v9_a7c4, { 1, 0 }
  uselistorder i32 %v4_a7d8, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a720, { 1, 0, 2 }
  uselistorder i32 %v0_a8d0, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a710, { 1, 0 }
  uselistorder i1 %v7_a708, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_aa98, { 1, 0 }
  uselistorder i32 %v1_aa80, { 1, 0 }
  uselistorder i32 %v1_aa68, { 1, 0 }
  uselistorder i32 %v1_aa50, { 1, 0 }
  uselistorder i32 %v1_aa38, { 1, 0 }
  uselistorder i32 %v3_a7d0, { 1, 0 }
  uselistorder i1 %v2_a7ec, { 1, 0 }
  uselistorder i32 %v1_a7e8, { 1, 0 }
  uselistorder i32 %v4_a7e4, { 2, 0, 1 }
  uselistorder i32 %v2_a6f8, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a694, { 1, 0 }
  uselistorder i32 %v1_a648, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a628, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a610, { 1, 2, 0 }
  uselistorder i32 %v1_a5f0, { 1, 2, 0 }
  uselistorder i32 %v1_a5d0, { 1, 2, 0 }
  uselistorder i32 %v1_a5b0, { 1, 2, 0 }
  uselistorder i32 %v1_a590, { 1, 2, 0 }
  uselistorder i32 %v1_a570, { 1, 2, 0 }
  uselistorder i32 %v6_a54c, { 1, 0 }
  uselistorder i32 %v1_a534, { 1, 2, 0 }
  uselistorder i32 %v6_a4cc, { 2, 1, 3, 0 }
  uselistorder i32 %v4_a4b4, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v4_a4a4, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 15 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 20, 17, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 33, 35, 34, 36, 37, 38, 40, 39, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_ab30, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ab04, { 1, 0 }
  uselistorder label %dec_label_pc_aaf4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aae4, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %dec_label_pc_a850, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a820, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a75c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a73c, { 1, 0 }
  uselistorder label %dec_label_pc_a718, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_a6c8, { 1, 0 }
  uselistorder label %dec_label_pc_a6ac, { 1, 0 }
}

define i32 @function_ac3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ac3c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i16 @__decompiler_undefined_function_3()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_ac3c = load i32, i32* @r4, align 4
  %v27_ac3c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ac58 = call i32* @calloc(i32 16, i32 16)
  %v4_ac58 = ptrtoint i32* %v2_ac58 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_ac64 = load i32, i32* @r6, align 4
  store i32 %v0_ac64, i32* %r0.global-to-local, align 4
  %v2_ac68 = call i32* @calloc(i32 %v0_ac64, i32 4)
  %v4_ac68 = ptrtoint i32* %v2_ac68 to i32
  %v0_ac6c = load i32, i32* @r5, align 4
  store i32 %v0_ac6c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ac7c = load i32, i32* @r4, align 4
  store i32 %v0_ac7c, i32* %r0.global-to-local, align 4
  %v5_ac80 = inttoptr i32 %v0_ac6c to i32*
  %v6_ac80 = call i32 @function_913c(i32 %v0_ac7c, i32* %v5_ac80, i32 2, i32 0, i32 %v4_ac68)
  %v1_ac8c = urem i32 %v6_ac80, 256
  store i32 %v1_ac8c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ac98 = load i32, i32* @r5, align 4
  store i32 %v0_ac98, i32* %r1.global-to-local, align 4
  %v0_ac9c = load i32, i32* @r4, align 4
  store i32 %v0_ac9c, i32* %r0.global-to-local, align 4
  %v5_aca0 = trunc i32 %v6_ac80 to i8
  %v6_aca4 = inttoptr i32 %v0_ac98 to i32*
  %v7_aca4 = call i32 @function_913c(i32 %v0_ac9c, i32* %v6_aca4, i32 3, i32 65535, i32 %v6_ac80)
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aca4, i32* @r7, align 4
  %v0_acb8 = load i32, i32* @r4, align 4
  store i32 %v0_acb8, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @function_913c(i32 %v0_acb8, i32* %v5_acbc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_acc8 = load i32, i32* @r5, align 4
  store i32 %v0_acc8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_acbc, 16777216
  %v5_acdc = sdiv i32 %sext, 16777216
  %v6_acdc = inttoptr i32 %v0_acc8 to i32*
  %v7_acdc = call i32 @function_913c(i32 %v0_acd4, i32* %v6_acdc, i32 5, i32 1, i32 %v5_acdc)
  %v1_ace8 = urem i32 %v7_acdc, 256
  store i32 %v1_ace8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_acf0 = load i32, i32* @r5, align 4
  store i32 %v0_acf0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_acf8 = load i32, i32* @r4, align 4
  store i32 %v0_acf8, i32* %r0.global-to-local, align 4
  %v5_ad00 = inttoptr i32 %v0_acf0 to i32*
  %v6_ad00 = call i32 @function_913c(i32 %v0_acf8, i32* %v5_ad00, i32 7, i32 65535, i32 %v1_ace8)
  %v0_ad04 = load i32, i32* @r5, align 4
  store i32 %v0_ad04, i32* %r1.global-to-local, align 4
  %v3_ad08 = mul i32 %v6_ad00, 65536
  store i32 %v3_ad08, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad14 = load i32, i32* @r4, align 4
  store i32 %v0_ad14, i32* %r0.global-to-local, align 4
  %v3_ad18 = urem i32 %v6_ad00, 65536
  store i32 %v3_ad18, i32* @sl, align 4
  %v5_ad1c = inttoptr i32 %v0_ad04 to i32*
  %v6_ad1c = call i32 @function_913c(i32 %v0_ad14, i32* %v5_ad1c, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_ad24 = urem i32 %v6_ad1c, 256
  store i32 %v1_ad24, i32* %ip.global-to-local, align 4
  %v0_ad28 = load i32, i32* @r5, align 4
  store i32 %v0_ad28, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r4, align 4
  store i32 %v0_ad34, i32* %r0.global-to-local, align 4
  %v5_ad3c = inttoptr i32 %v0_ad28 to i32*
  %v6_ad3c = call i32 @function_913c(i32 %v0_ad34, i32* %v5_ad3c, i32 12, i32 1, i32 %v1_ad24)
  %v1_ad44 = urem i32 %v6_ad3c, 256
  store i32 %v1_ad44, i32* %ip.global-to-local, align 4
  %v0_ad48 = load i32, i32* @r5, align 4
  store i32 %v0_ad48, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad54 = load i32, i32* @r4, align 4
  store i32 %v0_ad54, i32* %r0.global-to-local, align 4
  %v5_ad5c = inttoptr i32 %v0_ad48 to i32*
  %v6_ad5c = call i32 @function_913c(i32 %v0_ad54, i32* %v5_ad5c, i32 13, i32 1, i32 %v1_ad44)
  %v1_ad64 = urem i32 %v6_ad5c, 256
  store i32 %v1_ad64, i32* %ip.global-to-local, align 4
  %v0_ad68 = load i32, i32* @r5, align 4
  store i32 %v0_ad68, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad74 = load i32, i32* @r4, align 4
  store i32 %v0_ad74, i32* %r0.global-to-local, align 4
  %v5_ad7c = inttoptr i32 %v0_ad68 to i32*
  %v6_ad7c = call i32 @function_913c(i32 %v0_ad74, i32* %v5_ad7c, i32 14, i32 0, i32 %v1_ad64)
  %v1_ad84 = urem i32 %v6_ad7c, 256
  store i32 %v1_ad84, i32* %ip.global-to-local, align 4
  %v0_ad88 = load i32, i32* @r5, align 4
  store i32 %v0_ad88, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad94 = load i32, i32* @r4, align 4
  store i32 %v0_ad94, i32* %r0.global-to-local, align 4
  %v5_ad9c = inttoptr i32 %v0_ad88 to i32*
  %v6_ad9c = call i32 @function_913c(i32 %v0_ad94, i32* %v5_ad9c, i32 15, i32 0, i32 %v1_ad84)
  %v1_ada4 = urem i32 %v6_ad9c, 256
  store i32 %v1_ada4, i32* %ip.global-to-local, align 4
  %v0_ada8 = load i32, i32* @r5, align 4
  store i32 %v0_ada8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_adb4 = load i32, i32* @r4, align 4
  store i32 %v0_adb4, i32* %r0.global-to-local, align 4
  %v5_adbc = inttoptr i32 %v0_ada8 to i32*
  %v6_adbc = call i32 @function_913c(i32 %v0_adb4, i32* %v5_adbc, i32 16, i32 0, i32 %v1_ada4)
  %v1_adc4 = urem i32 %v6_adbc, 256
  store i32 %v1_adc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_add0 = load i32, i32* @r5, align 4
  store i32 %v0_add0, i32* %r1.global-to-local, align 4
  %v0_add4 = load i32, i32* @r4, align 4
  store i32 %v0_add4, i32* %r0.global-to-local, align 4
  %v5_addc = inttoptr i32 %v0_add0 to i32*
  %v6_addc = call i32 @function_913c(i32 %v0_add4, i32* %v5_addc, i32 0, i32 768, i32 %v1_adc4)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_adec = load i32, i32* @r5, align 4
  store i32 %v0_adec, i32* %r1.global-to-local, align 4
  %v0_adf0 = load i32, i32* @r4, align 4
  store i32 %v0_adf0, i32* %r0.global-to-local, align 4
  %v5_adf4 = inttoptr i32 %v0_adec to i32*
  %v6_adf4 = call i32 @function_913c(i32 %v0_adf0, i32* %v5_adf4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_adfc = urem i32 %v6_adf4, 256
  store i32 %v1_adfc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae10 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ae10, i32* %r0.global-to-local, align 4
  %v2_ae14 = icmp eq i32 %v3_ae10, -1
  store i1 %v2_ae14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ae10, i32* %sb.global-to-local, align 4
  br i1 %v2_ae14, label %dec_label_pc_b004, label %dec_label_pc_ae20

dec_label_pc_ae20:                                ; preds = %dec_label_pc_ac3c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ae28 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ae28, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ae3c = call i32 @setsockopt(i32 0, i32 3, i32 %v6_ae28, i32* nonnull %stack_var_-44, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_ae3c, i32* %r0.global-to-local, align 4
  %v2_ae40 = icmp eq i32 %v6_ae3c, -1
  store i1 %v2_ae40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae40, label %dec_label_pc_affc, label %dec_label_pc_ae48

dec_label_pc_ae48:                                ; preds = %dec_label_pc_ae20
  %v0_ae48 = load i32, i32* @r7, align 4
  %v3_ae48 = mul i32 %v0_ae48, 65536
  store i32 %v3_ae48, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ae50 = load i32, i32* @r6, align 4
  %v2_ae50 = icmp eq i32 %v0_ae50, 0
  store i1 %v2_ae50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ae58 = urem i32 %v0_ae48, 65536
  store i32 %v3_ae58, i32* %fp.global-to-local, align 4
  br i1 %v2_ae50, label %dec_label_pc_b288, label %dec_label_pc_ae60.preheader

dec_label_pc_ae60.preheader:                      ; preds = %dec_label_pc_ae48
  %v2_aeac = ptrtoint i32* %stack_var_-144 to i32
  %v2_aef0 = ptrtoint i32* %stack_var_-64 to i32
  %tmp72 = bitcast i32* %stack_var_-64 to %sockaddr*
  %tmp73 = bitcast i32* %stack_var_-80 to %sockaddr*
  %v2_af34 = ptrtoint i32* %stack_var_-336 to i32
  %v2_af38 = ptrtoint i32* %stack_var_-48 to i32
  %v4_af98 = zext i8 %tmp to i32
  %v1_af9c = and i32 %v4_af98, 18
  %v2_afa0 = icmp eq i32 %v1_af9c, 18
  %v3_af84 = sext i16 %tmp62 to i32
  %v1_afa8 = and i32 %v4_af98, 5
  %v2_afa8 = icmp eq i32 %v1_afa8, 0
  %v4_aee8 = add i32 %v2_aeac, 82
  %v5_aee8 = inttoptr i32 %v4_aee8 to i16*
  %v1_b0d8 = add i32 %v6_addc, 40
  %v1_b1ec = urem i32 %v6_ad1c, 2
  %tmp100 = sub nsw i32 0, %v1_b1ec
  %v4_b1f4 = and i32 %tmp100, 32
  %v1_b204 = urem i32 %v6_ad3c, 2
  %tmp101 = sub nsw i32 0, %v1_b204
  %v4_b20c = and i32 %tmp101, 16
  %v1_b21c = urem i32 %v6_ad5c, 2
  %tmp102 = sub nsw i32 0, %v1_b21c
  %v4_b224 = and i32 %tmp102, 8
  %v1_b234 = urem i32 %v6_ad7c, 2
  %tmp103 = sub nsw i32 0, %v1_b234
  %v4_b23c = and i32 %tmp103, 4
  %v1_b24c = urem i32 %v6_ad9c, 2
  %tmp104 = sub nsw i32 0, %v1_b24c
  %v3_b254 = and i32 %tmp104, 2
  %v1_b264 = urem i32 %v6_adbc, 2
  br label %dec_label_pc_ae60

dec_label_pc_ae60:                                ; preds = %dec_label_pc_ae60.preheader, %dec_label_pc_afd4
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_afd4 ], [ %tmp35, %dec_label_pc_ae60.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_afd4 ], [ %tmp38, %dec_label_pc_ae60.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ae6c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_ae6c, i32* %r0.global-to-local, align 4
  %v2_ae70 = icmp eq i32 %v3_ae6c, -1
  store i1 %v2_ae70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ae6c, i32* @r5, align 4
  br i1 %v2_ae70, label %dec_label_pc_afd4, label %dec_label_pc_ae7c

dec_label_pc_ae7c:                                ; preds = %dec_label_pc_ae60, %dec_label_pc_afb0
  %v0_ae84 = phi i32 [ %v3_afc4, %dec_label_pc_afb0 ], [ %v3_ae6c, %dec_label_pc_ae60 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_afb0 ], [ %stack_var_-62.0, %dec_label_pc_ae60 ]
  %stack_var_-60.1 = phi i32 [ %v0_b084, %dec_label_pc_afb0 ], [ %stack_var_-60.0, %dec_label_pc_ae60 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ae84 = call i32 (i32, i32, ...) @fcntl(i32 %v0_ae84, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ae8c = or i32 %v2_ae84, 2048
  store i32 %v1_ae8c, i32* %r2.global-to-local, align 4
  %v0_ae90 = load i32, i32* @r5, align 4
  store i32 %v0_ae90, i32* %r0.global-to-local, align 4
  %v2_ae94 = call i32 (i32, i32, ...) @fcntl(i32 %v0_ae90, i32 4)
  %v3_ae98 = load i32, i32* %stack_var_-44, align 4
  %v5_aea0 = mul i32 %v3_ae98, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_aeac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_aeb4 = add i32 %v5_aea0, %arg2
  store i32 %v2_aeb4, i32* %r3.global-to-local, align 4
  %v1_aeb8 = add i32 %v2_aeb4, 20
  %v2_aeb8 = inttoptr i32 %v1_aeb8 to i8*
  %v3_aeb8 = load i8, i8* %v2_aeb8, align 1
  %v4_aeb8 = zext i8 %v3_aeb8 to i32
  store i32 %v4_aeb8, i32* %r2.global-to-local, align 4
  %v2_aebc = icmp ugt i8 %v3_aeb8, 30
  %v7_aebc = icmp eq i8 %v3_aeb8, 31
  store i1 %v7_aebc, i1* %cpsr_z.global-to-local, align 1
  %v2_aec0 = xor i1 %v7_aebc, true
  %v3_aec0 = and i1 %v2_aebc, %v2_aec0
  br i1 %v3_aec0, label %bb, label %bb74

bb:                                               ; preds = %dec_label_pc_ae7c
  %v5_aec0 = add i32 %v2_aeb4, 16
  %v6_aec0 = inttoptr i32 %v5_aec0 to i32*
  %v7_aec0 = load i32, i32* %v6_aec0, align 4
  store i32 %v7_aec0, i32* %r3.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_ae7c, %bb
  %v4_aec4 = phi i32 [ %v2_aeb4, %dec_label_pc_ae7c ], [ %v7_aec0, %bb ]
  %v4_aec4.stack_var_-60.1 = select i1 %v3_aec0, i32 %v4_aec4, i32 %stack_var_-60.1
  %v2_aec8 = xor i1 %v2_aebc, true
  %v3_aec8 = or i1 %v7_aebc, %v2_aec8
  br i1 %v3_aec8, label %dec_label_pc_b010, label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %bb74, %dec_label_pc_b010
  %v0_b084 = phi i32 [ %v5_b060, %dec_label_pc_b010 ], [ %v4_aec4.stack_var_-60.1, %bb74 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_aed4 = load i32, i32* @sl, align 4
  %v9_aed4 = icmp eq i32 %v0_aed4, 65535
  store i1 %v9_aed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aed4, label %dec_label_pc_b06c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_aecc
  %v4_aed8 = udiv i32 %v0_aed4, 256
  %v2_aedc = urem i32 %v0_aed4, 256
  store i32 %v2_aedc, i32* %r2.global-to-local, align 4
  %v5_aee0 = mul nuw nsw i32 %v2_aedc, 256
  %v6_aee0 = or i32 %v5_aee0, %v4_aed8
  store i32 %v6_aee0, i32* %r3.global-to-local, align 4
  store i32 %v2_aeac, i32* %r0.global-to-local, align 4
  %v2_aee8 = trunc i32 %v6_aee0 to i16
  store i16 %v2_aee8, i16* %v5_aee8, align 2
  br label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %.thread10, %dec_label_pc_b06c
  %stack_var_-62.2 = phi i16 [ %v1_b06c, %dec_label_pc_b06c ], [ %stack_var_-62.1, %.thread10 ]
  store i32 %v2_aef0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_aef8 = load i32, i32* @r5, align 4
  store i32 %v0_aef8, i32* %r0.global-to-local, align 4
  %v5_aefc = call i32 @connect(i32 %v0_aef8, %sockaddr* %tmp72, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_af04 = call i32 @time(i32* null)
  store i32 %v2_af04, i32* %r0.global-to-local, align 4
  store i32 %v2_af04, i32* %r4.global-to-local, align 4
  %v9_af64 = icmp eq i32 %tmp36, %v0_b084
  %v4_af8c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_af64 to i32
  %v9_af78 = icmp eq i1 %v9_af64, false
  %v9_af90 = icmp eq i32 %v3_af84, %v4_af8c
  br label %dec_label_pc_af20

dec_label_pc_af10:                                ; preds = %.thread, %dec_label_pc_af80, %dec_label_pc_afa8, %bb78
  %v2_af10 = call i32 @time(i32* null)
  %v0_af14 = load i32, i32* %r4.global-to-local, align 4
  %v2_af14 = sub i32 %v2_af10, %v0_af14
  store i32 %v2_af14, i32* %r0.global-to-local, align 4
  %v7_af18 = icmp eq i32 %v2_af14, 10
  store i1 %v7_af18, i1* %cpsr_z.global-to-local, align 1
  %v8_af1c = icmp sgt i32 %v2_af14, 10
  br i1 %v8_af1c, label %dec_label_pc_afb0, label %dec_label_pc_af20

dec_label_pc_af20:                                ; preds = %dec_label_pc_af10, %dec_label_pc_aef0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_af34, i32* %r1.global-to-local, align 4
  store i32 %v2_af38, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_af40 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_af40, i32* %r0.global-to-local, align 4
  %v10_af48 = call i32 @recvfrom(i32 %v0_af40, i32* nonnull %stack_var_-336, i32 256, i32 16384, %sockaddr* %tmp73, i32* nonnull %stack_var_-48)
  store i32 %v10_af48, i32* %r2.global-to-local, align 4
  %v2_af50 = icmp eq i32 %v10_af48, -1
  store i1 %v2_af50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_af50, label %dec_label_pc_b004, label %dec_label_pc_af5c

dec_label_pc_af5c:                                ; preds = %dec_label_pc_af20
  store i32 %v0_b084, i32* %r1.global-to-local, align 4
  store i32 %tmp36, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_af70 = icmp eq i32 %v10_af48, 40
  store i1 %v7_af70, i1* %cpsr_z.global-to-local, align 1
  %tmp105 = icmp ult i32 %v10_af48, 41
  br i1 %tmp105, label %.thread, label %bb78

.thread:                                          ; preds = %dec_label_pc_af5c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af10

bb78:                                             ; preds = %dec_label_pc_af5c
  store i1 %v9_af78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af78, label %dec_label_pc_af10, label %dec_label_pc_af80

dec_label_pc_af80:                                ; preds = %bb78
  store i32 %v3_af84, i32* @lr, align 4
  store i32 %v2_aeac, i32* %r3.global-to-local, align 4
  store i32 %v4_af8c, i32* %r2.global-to-local, align 4
  store i1 %v9_af90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af90, label %dec_label_pc_af98, label %dec_label_pc_af10

dec_label_pc_af98:                                ; preds = %dec_label_pc_af80
  store i32 %v4_af98, i32* %r2.global-to-local, align 4
  store i32 %v1_af9c, i32* %r3.global-to-local, align 4
  store i1 %v2_afa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afa0, label %dec_label_pc_b07c, label %dec_label_pc_afa8

dec_label_pc_afa8:                                ; preds = %dec_label_pc_af98
  store i1 %v2_afa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afa8, label %dec_label_pc_af10, label %dec_label_pc_afb0

dec_label_pc_afb0:                                ; preds = %dec_label_pc_afa8, %dec_label_pc_af10
  %v0_afb0 = load i32, i32* @r5, align 4
  store i32 %v0_afb0, i32* %r0.global-to-local, align 4
  %v1_afb4 = call i32 @close(i32 %v0_afb0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_afc4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_afc4, i32* %r0.global-to-local, align 4
  %v3_afc8 = icmp eq i32 %v3_afc4, -1
  store i1 %v3_afc8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_afc4, i32* @r5, align 4
  br i1 %v3_afc8, label %dec_label_pc_afd4, label %dec_label_pc_ae7c

dec_label_pc_afd4:                                ; preds = %dec_label_pc_afb0, %dec_label_pc_ae60, %bb85
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ae60 ], [ %stack_var_-62.2, %bb85 ], [ %stack_var_-62.2, %dec_label_pc_afb0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ae60 ], [ %v0_b084, %bb85 ], [ %v0_b084, %dec_label_pc_afb0 ]
  %v3_afd4 = load i32, i32* %stack_var_-44, align 4
  %v1_afd8 = add i32 %v3_afd4, 1
  store i32 %v1_afd8, i32* %r3.global-to-local, align 4
  %v1_afdc = load i32, i32* @r6, align 4
  %v9_afdc = icmp eq i32 %v1_afd8, %v1_afdc
  store i1 %v9_afdc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_afd8, i32* %stack_var_-44, align 4
  %v5_afe4 = icmp slt i32 %v1_afd8, %v1_afdc
  br i1 %v5_afe4, label %dec_label_pc_ae60, label %dec_label_pc_afe8

dec_label_pc_afe8:                                ; preds = %dec_label_pc_afd4
  store i32 %v6_addc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b298

dec_label_pc_affc:                                ; preds = %dec_label_pc_ae20
  %v0_affc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_affc, i32* %r0.global-to-local, align 4
  %v1_b000 = call i32 @close(i32 %v0_affc)
  store i32 %v1_b000, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b004

dec_label_pc_b004:                                ; preds = %dec_label_pc_af20, %dec_label_pc_ac3c, %dec_label_pc_affc
  %v1_b00c = phi i32 [ -1, %dec_label_pc_ac3c ], [ %v1_b000, %dec_label_pc_affc ], [ 0, %dec_label_pc_af20 ]
  store i32 %v3_ac3c, i32* %r4.global-to-local, align 4
  store i32 %v27_ac3c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b00c

dec_label_pc_b010:                                ; preds = %bb74
  %v1_b010 = add i32 %v4_aec4, 16
  %v2_b010 = inttoptr i32 %v1_b010 to i32*
  %v3_b010 = load i32, i32* %v2_b010, align 4
  store i32 %v3_b010, i32* %r4.global-to-local, align 4
  %v0_b014 = call i32 @function_ee68()
  store i32 %v0_b014, i32* %r0.global-to-local, align 4
  %v3_b018 = load i32, i32* %stack_var_-44, align 4
  %v5_b020 = mul i32 %v3_b018, 24
  %v1_b028 = and i32 %v3_b010, 16711680
  store i32 %v1_b028, i32* %ip.global-to-local, align 4
  %v3_b02c = udiv i32 %v3_b010, 16777216
  %v2_b030 = add i32 %v5_b020, %arg2
  store i32 %v2_b030, i32* %r1.global-to-local, align 4
  %v4_b034 = udiv i32 %v1_b028, 256
  %v5_b034 = or i32 %v4_b034, %v3_b02c
  store i32 %v5_b034, i32* %r2.global-to-local, align 4
  %v1_b038 = and i32 %v3_b010, 65280
  store i32 %v1_b038, i32* %r3.global-to-local, align 4
  %v1_b03c = add i32 %v2_b030, 20
  %v2_b03c = inttoptr i32 %v1_b03c to i8*
  %v3_b03c = load i8, i8* %v2_b03c, align 1
  %v4_b03c = zext i8 %v3_b03c to i32
  store i32 %v4_b03c, i32* %ip.global-to-local, align 4
  %v5_b044 = call i32 @llvm.bswap.i32(i32 %v3_b010)
  %v7_b048 = lshr i32 %v0_b014, %v4_b03c
  %v8_b048 = add i32 %v7_b048, %v5_b044
  store i32 %v8_b048, i32* %r2.global-to-local, align 4
  %v1_b04c = and i32 %v8_b048, 16711680
  store i32 %v1_b04c, i32* %r0.global-to-local, align 4
  %v1_b058 = and i32 %v8_b048, 65280
  store i32 %v1_b058, i32* %r1.global-to-local, align 4
  %v5_b060 = call i32 @llvm.bswap.i32(i32 %v8_b048)
  store i32 %v5_b060, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_aecc

dec_label_pc_b06c:                                ; preds = %dec_label_pc_aecc
  %v0_b06c = call i32 @function_ee68()
  %v1_b06c = trunc i32 %v0_b06c to i16
  store i32 %v0_b06c, i32* %r0.global-to-local, align 4
  store i32 %v2_aeac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_aef0

dec_label_pc_b07c:                                ; preds = %dec_label_pc_af98
  %v3_b07c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b07c, i32* %r4.global-to-local, align 4
  store i32 %v4_ac58, i32* %ip.global-to-local, align 4
  %v5_b084 = mul i32 %v3_b07c, 16
  %v6_b084 = add i32 %v5_b084, %v4_ac58
  %v7_b084 = inttoptr i32 %v6_b084 to i32*
  store i32 %v0_b084, i32* %v7_b084, align 4
  %v0_b088 = load i32, i32* @r8, align 4
  %v1_b088 = add i32 %v0_b088, 4
  %v2_b088 = inttoptr i32 %v1_b088 to i32*
  %v3_b088 = load i32, i32* %v2_b088, align 4
  store i32 %v3_b088, i32* %r1.global-to-local, align 4
  %v1_b094 = and i32 %v3_b088, 65280
  store i32 %v1_b094, i32* %r2.global-to-local, align 4
  store i32 %v4_ac58, i32* %r0.global-to-local, align 4
  %v0_b0a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b0a4 = mul i32 %v0_b0a4, 16
  %v2_b0a8 = add i32 %v3_b0a4, %v4_ac58
  store i32 %v2_b0a8, i32* %ip.global-to-local, align 4
  %v5_b0ac = call i32 @llvm.bswap.i32(i32 %v3_b088)
  store i32 %v5_b0ac, i32* %r3.global-to-local, align 4
  %v2_b0b0 = add i32 %v2_b0a8, 4
  %v3_b0b0 = inttoptr i32 %v2_b0b0 to i32*
  store i32 %v5_b0ac, i32* %v3_b0b0, align 4
  %v0_b0b4 = load i32, i32* @r8, align 4
  %v1_b0b4 = add i32 %v0_b0b4, 8
  %v2_b0b4 = inttoptr i32 %v1_b0b4 to i32*
  %v3_b0b4 = load i32, i32* %v2_b0b4, align 4
  store i32 %v3_b0b4, i32* %r1.global-to-local, align 4
  %v1_b0b8 = and i32 %v3_b0b4, 16711680
  store i32 %v1_b0b8, i32* %r0.global-to-local, align 4
  store i32 %v6_addc, i32* %r2.global-to-local, align 4
  %v5_b0d0 = call i32 @llvm.bswap.i32(i32 %v3_b0b4)
  store i32 %v5_b0d0, i32* %r3.global-to-local, align 4
  %v1_b0d4 = add i32 %v0_b0b4, 2
  %v2_b0d4 = inttoptr i32 %v1_b0d4 to i16*
  %v3_b0d4 = load i16, i16* %v2_b0d4, align 2
  %v4_b0d4 = zext i16 %v3_b0d4 to i32
  store i32 %v4_b0d4, i32* %r1.global-to-local, align 4
  store i32 %v1_b0d8, i32* @r7, align 4
  %v0_b0dc = load i32, i32* @lr, align 4
  %v1_b0dc = trunc i32 %v0_b0dc to i16
  %v2_b0dc = load i32, i32* %ip.global-to-local, align 4
  %v3_b0dc = add i32 %v2_b0dc, 14
  %v4_b0dc = inttoptr i32 %v3_b0dc to i16*
  store i16 %v1_b0dc, i16* %v4_b0dc, align 2
  %v0_b0e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0e0 = trunc i32 %v0_b0e0 to i16
  %v2_b0e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b0e0 = add i32 %v2_b0e0, 12
  %v4_b0e0 = inttoptr i32 %v3_b0e0 to i16*
  store i16 %v1_b0e0, i16* %v4_b0e0, align 2
  %v0_b0e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b0e4 = add i32 %v1_b0e4, 8
  %v3_b0e4 = inttoptr i32 %v2_b0e4 to i32*
  store i32 %v0_b0e4, i32* %v3_b0e4, align 4
  %v0_b0e8 = load i32, i32* @r7, align 4
  store i32 %v0_b0e8, i32* %r0.global-to-local, align 4
  %v1_b0ec = call i32* @malloc(i32 %v0_b0e8)
  %v3_b0ec = ptrtoint i32* %v1_b0ec to i32
  store i32 %v3_b0ec, i32* %r0.global-to-local, align 4
  store i32 %v4_ac68, i32* %r3.global-to-local, align 4
  %v2_b0f8 = load i32, i32* %r4.global-to-local, align 4
  %v5_b0f8 = mul i32 %v2_b0f8, 4
  %v6_b0f8 = add i32 %v5_b0f8, %v4_ac68
  %v7_b0f8 = inttoptr i32 %v6_b0f8 to i32*
  store i32 %v3_b0ec, i32* %v7_b0f8, align 4
  %v3_b0fc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0fc, i32* %r2.global-to-local, align 4
  %v0_b100 = load i32, i32* %r3.global-to-local, align 4
  %v4_b100 = mul i32 %v3_b0fc, 4
  %v5_b100 = add i32 %v0_b100, %v4_b100
  %v6_b100 = inttoptr i32 %v5_b100 to i32*
  %v7_b100 = load i32, i32* %v6_b100, align 4
  store i32 %v7_b100, i32* @r4, align 4
  %v1_b104 = inttoptr i32 %v7_b100 to i8*
  %v2_b104 = load i8, i8* %v1_b104, align 1
  %tmp106 = urem i8 %v2_b104, 16
  %v1_b108 = zext i8 %tmp106 to i32
  %v1_b10c = or i32 %v1_b108, 64
  store i32 %v1_b10c, i32* %r3.global-to-local, align 4
  %v1_b110 = trunc i32 %v1_b10c to i8
  store i8 %v1_b110, i8* %v1_b104, align 1
  %v0_b114 = load i32, i32* @r4, align 4
  %v1_b114 = inttoptr i32 %v0_b114 to i8*
  %v2_b114 = load i8, i8* %v1_b114, align 1
  %v0_b118 = load i32, i32* @r7, align 4
  %tmp80 = mul i32 %v0_b118, 256
  %v1_b120 = and i8 %v2_b114, -16
  %v1_b124 = or i8 %v1_b120, 5
  %v1_b128 = and i32 %tmp80, 65280
  %tmp81 = udiv i32 %v0_b118, 256
  %v4_b12c = urem i32 %tmp81, 256
  %v5_b12c = or i32 %v4_b12c, %v1_b128
  store i32 %v5_b12c, i32* %r2.global-to-local, align 4
  %v0_b130 = load i32, i32* %fp.global-to-local, align 4
  %v1_b130 = urem i32 %v0_b130, 256
  store i32 %v1_b130, i32* %r0.global-to-local, align 4
  store i32 %v1_ace8, i32* %ip.global-to-local, align 4
  %v3_b138 = udiv i32 %v0_b130, 256
  store i32 %v3_b138, i32* %r1.global-to-local, align 4
  store i8 %v1_b124, i8* %v1_b114, align 1
  %v0_b140 = load i32, i32* %r1.global-to-local, align 4
  %v1_b140 = load i32, i32* %r0.global-to-local, align 4
  %v4_b140 = mul i32 %v1_b140, 256
  %v5_b140 = or i32 %v4_b140, %v0_b140
  store i32 %v5_b140, i32* %r1.global-to-local, align 4
  store i32 %v6_ac80, i32* %r0.global-to-local, align 4
  %v2_b148 = load i32, i32* @r4, align 4
  %v3_b148 = add i32 %v2_b148, 1
  %v4_b148 = inttoptr i32 %v3_b148 to i8*
  store i8 %v5_aca0, i8* %v4_b148, align 1
  %v0_b14c = load i32, i32* %r1.global-to-local, align 4
  %v1_b14c = trunc i32 %v0_b14c to i16
  %v2_b14c = load i32, i32* @r4, align 4
  %v3_b14c = add i32 %v2_b14c, 4
  %v4_b14c = inttoptr i32 %v3_b14c to i16*
  store i16 %v1_b14c, i16* %v4_b14c, align 2
  %v0_b150 = load i32, i32* %ip.global-to-local, align 4
  %v2_b150 = icmp eq i32 %v0_b150, 0
  store i1 %v2_b150, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_acdc, i32* %r1.global-to-local, align 4
  %v0_b158 = load i32, i32* %r2.global-to-local, align 4
  %v1_b158 = trunc i32 %v0_b158 to i16
  %v2_b158 = load i32, i32* @r4, align 4
  %v3_b158 = add i32 %v2_b158, 2
  %v4_b158 = inttoptr i32 %v3_b158 to i16*
  store i16 %v1_b158, i16* %v4_b158, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b150, label %bb83, label %bb82

bb82:                                             ; preds = %dec_label_pc_b07c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %dec_label_pc_b07c, %bb82
  %v0_b164 = load i32, i32* %r1.global-to-local, align 4
  %v1_b164 = trunc i32 %v0_b164 to i8
  %v2_b164 = load i32, i32* @r4, align 4
  %v3_b164 = add i32 %v2_b164, 8
  %v4_b164 = inttoptr i32 %v3_b164 to i8*
  store i8 %v1_b164, i8* %v4_b164, align 1
  %v0_b168 = load i32, i32* %r3.global-to-local, align 4
  %v1_b168 = trunc i32 %v0_b168 to i8
  %v2_b168 = load i32, i32* @r4, align 4
  %v3_b168 = add i32 %v2_b168, 9
  %v4_b168 = inttoptr i32 %v3_b168 to i8*
  store i8 %v1_b168, i8* %v4_b168, align 1
  %v0_b16c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b16c, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_b16c = load i32, i32* %r2.global-to-local, align 4
  %v2_b16c = trunc i32 %v1_b16c to i16
  %v3_b16c = load i32, i32* @r4, align 4
  %v4_b16c = add i32 %v3_b16c, 6
  %v5_b16c = inttoptr i32 %v4_b16c to i16*
  store i16 %v2_b16c, i16* %v5_b16c, align 2
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  store i32 ptrtoint (i32* @global_var_1a230.41 to i32), i32* %r2.global-to-local, align 4
  %v2_b174 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_b174, i32* %r1.global-to-local, align 4
  %v1_b178 = load i32, i32* @r4, align 4
  %v2_b178 = add i32 %v1_b178, 12
  %v3_b178 = inttoptr i32 %v2_b178 to i32*
  store i32 %v2_b174, i32* %v3_b178, align 4
  %v3_b17c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b17c, i32* %r3.global-to-local, align 4
  store i32 %v4_ac58, i32* %ip.global-to-local, align 4
  %v4_b184 = mul i32 %v3_b17c, 16
  %v5_b184 = add i32 %v4_b184, %v4_ac58
  %v6_b184 = inttoptr i32 %v5_b184 to i32*
  %v7_b184 = load i32, i32* %v6_b184, align 4
  store i32 %v7_b184, i32* %r2.global-to-local, align 4
  store i32 %v5_b184, i32* %r3.global-to-local, align 4
  %v1_b190 = load i32, i32* @r4, align 4
  %v2_b190 = add i32 %v1_b190, 16
  %v3_b190 = inttoptr i32 %v2_b190 to i32*
  store i32 %v7_b184, i32* %v3_b190, align 4
  %v0_b194 = load i32, i32* %r3.global-to-local, align 4
  %v1_b194 = add i32 %v0_b194, 12
  %v2_b194 = inttoptr i32 %v1_b194 to i16*
  %v3_b194 = load i16, i16* %v2_b194, align 2
  %v4_b194 = zext i16 %v3_b194 to i32
  store i32 %v4_b194, i32* %r0.global-to-local, align 4
  %v1_b198 = add i32 %v0_b194, 8
  %v2_b198 = inttoptr i32 %v1_b198 to i32*
  %v3_b198 = load i32, i32* %v2_b198, align 4
  store i32 %v3_b198, i32* %r1.global-to-local, align 4
  %v2_b19c = load i32, i32* @r4, align 4
  %v3_b19c = add i32 %v2_b19c, 20
  %v4_b19c = inttoptr i32 %v3_b19c to i16*
  store i16 %v3_b194, i16* %v4_b19c, align 2
  %v0_b1a0 = load i32, i32* @r4, align 4
  %v1_b1a0 = add i32 %v0_b1a0, 20
  store i32 %v1_b1a0, i32* @r8, align 4
  %v1_b1a4 = add i32 %v0_b1a0, 33
  %v2_b1a4 = inttoptr i32 %v1_b1a4 to i8*
  %v3_b1a4 = load i8, i8* %v2_b1a4, align 1
  %v4_b1a4 = zext i8 %v3_b1a4 to i32
  store i32 %v4_b1a4, i32* %r2.global-to-local, align 4
  %v0_b1a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b1a8 = add i32 %v0_b1a0, 24
  %v3_b1a8 = inttoptr i32 %v2_b1a8 to i32*
  store i32 %v0_b1a8, i32* %v3_b1a8, align 4
  %v0_b1ac = load i32, i32* %r2.global-to-local, align 4
  %v1_b1ac = or i32 %v0_b1ac, 1
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  %v0_b1b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1b0 = add i32 %v0_b1b0, 4
  %v2_b1b0 = inttoptr i32 %v1_b1b0 to i32*
  %v3_b1b0 = load i32, i32* %v2_b1b0, align 4
  store i32 %v3_b1b0, i32* %r1.global-to-local, align 4
  %v1_b1b4 = add i32 %v0_b1b0, 14
  %v2_b1b4 = inttoptr i32 %v1_b1b4 to i16*
  %v3_b1b4 = load i16, i16* %v2_b1b4, align 2
  %v4_b1b4 = zext i16 %v3_b1b4 to i32
  store i32 %v4_b1b4, i32* %r3.global-to-local, align 4
  %v1_b1b8 = trunc i32 %v1_b1ac to i8
  %v2_b1b8 = load i32, i32* @r8, align 4
  %v3_b1b8 = add i32 %v2_b1b8, 13
  %v4_b1b8 = inttoptr i32 %v3_b1b8 to i8*
  store i8 %v1_b1b8, i8* %v4_b1b8, align 1
  %v0_b1bc = load i32, i32* %r3.global-to-local, align 4
  %v1_b1bc = trunc i32 %v0_b1bc to i16
  %v2_b1bc = load i32, i32* @r8, align 4
  %v3_b1bc = add i32 %v2_b1bc, 2
  %v4_b1bc = inttoptr i32 %v3_b1bc to i16*
  store i16 %v1_b1bc, i16* %v4_b1bc, align 2
  %v0_b1c0 = load i32, i32* @r8, align 4
  %v1_b1c0 = add i32 %v0_b1c0, 12
  %v2_b1c0 = inttoptr i32 %v1_b1c0 to i8*
  %v3_b1c0 = load i8, i8* %v2_b1c0, align 1
  %v4_b1c0 = zext i8 %v3_b1c0 to i32
  store i32 %v4_b1c0, i32* %r3.global-to-local, align 4
  %v1_b1c4 = add i32 %v0_b1c0, 13
  %v2_b1c4 = inttoptr i32 %v1_b1c4 to i8*
  %v3_b1c4 = load i8, i8* %v2_b1c4, align 1
  %v4_b1c4 = zext i8 %v3_b1c4 to i32
  %tmp107 = urem i8 %v3_b1c0, 16
  %v1_b1c8 = zext i8 %tmp107 to i32
  %v1_b1cc = or i32 %v1_b1c8, 128
  store i32 %v1_b1cc, i32* %r3.global-to-local, align 4
  %v1_b1d0 = or i32 %v4_b1c4, 16
  store i32 %v1_b1d0, i32* %r2.global-to-local, align 4
  %v0_b1d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b1d4 = add i32 %v0_b1c0, 8
  %v3_b1d4 = inttoptr i32 %v2_b1d4 to i32*
  store i32 %v0_b1d4, i32* %v3_b1d4, align 4
  %v0_b1d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1d8 = trunc i32 %v0_b1d8 to i8
  %v2_b1d8 = load i32, i32* @r8, align 4
  %v3_b1d8 = add i32 %v2_b1d8, 12
  %v4_b1d8 = inttoptr i32 %v3_b1d8 to i8*
  store i8 %v1_b1d8, i8* %v4_b1d8, align 1
  %v0_b1dc = load i32, i32* %r2.global-to-local, align 4
  %v1_b1dc = trunc i32 %v0_b1dc to i8
  %v2_b1dc = load i32, i32* @r8, align 4
  %v3_b1dc = add i32 %v2_b1dc, 13
  %v4_b1dc = inttoptr i32 %v3_b1dc to i8*
  store i8 %v1_b1dc, i8* %v4_b1dc, align 1
  %v0_b1e0 = call i32 @function_ee68()
  %v1_b1e0 = trunc i32 %v0_b1e0 to i16
  store i32 %v0_b1e0, i32* %r0.global-to-local, align 4
  store i32 %v1_ad24, i32* %r1.global-to-local, align 4
  %v0_b1e8 = load i32, i32* @r8, align 4
  %v1_b1e8 = add i32 %v0_b1e8, 13
  %v2_b1e8 = inttoptr i32 %v1_b1e8 to i8*
  %v3_b1e8 = load i8, i8* %v2_b1e8, align 1
  %v4_b1e8 = zext i8 %v3_b1e8 to i32
  store i32 %v1_b1ec, i32* %r2.global-to-local, align 4
  %v1_b1f0 = and i32 %v4_b1e8, 223
  %v5_b1f4 = or i32 %v1_b1f0, %v4_b1f4
  store i32 %v5_b1f4, i32* %r3.global-to-local, align 4
  %v1_b1f8 = trunc i32 %v5_b1f4 to i8
  store i8 %v1_b1f8, i8* %v2_b1e8, align 1
  store i32 %v1_ad44, i32* %ip.global-to-local, align 4
  %v0_b200 = load i32, i32* @r8, align 4
  %v1_b200 = add i32 %v0_b200, 13
  %v2_b200 = inttoptr i32 %v1_b200 to i8*
  %v3_b200 = load i8, i8* %v2_b200, align 1
  %v4_b200 = zext i8 %v3_b200 to i32
  store i32 %v1_b204, i32* %r3.global-to-local, align 4
  %v1_b208 = and i32 %v4_b200, 239
  %v5_b20c = or i32 %v1_b208, %v4_b20c
  store i32 %v5_b20c, i32* %r2.global-to-local, align 4
  %v1_b210 = trunc i32 %v5_b20c to i8
  store i8 %v1_b210, i8* %v2_b200, align 1
  store i32 %v1_ad64, i32* %r1.global-to-local, align 4
  %v0_b218 = load i32, i32* @r8, align 4
  %v1_b218 = add i32 %v0_b218, 13
  %v2_b218 = inttoptr i32 %v1_b218 to i8*
  %v3_b218 = load i8, i8* %v2_b218, align 1
  %v4_b218 = zext i8 %v3_b218 to i32
  store i32 %v1_b21c, i32* %r2.global-to-local, align 4
  %v1_b220 = and i32 %v4_b218, 247
  %v5_b224 = or i32 %v1_b220, %v4_b224
  store i32 %v5_b224, i32* %r3.global-to-local, align 4
  %v1_b228 = trunc i32 %v5_b224 to i8
  store i8 %v1_b228, i8* %v2_b218, align 1
  store i32 %v1_ad84, i32* %ip.global-to-local, align 4
  %v0_b230 = load i32, i32* @r8, align 4
  %v1_b230 = add i32 %v0_b230, 13
  %v2_b230 = inttoptr i32 %v1_b230 to i8*
  %v3_b230 = load i8, i8* %v2_b230, align 1
  %v4_b230 = zext i8 %v3_b230 to i32
  store i32 %v1_b234, i32* %r3.global-to-local, align 4
  %v1_b238 = and i32 %v4_b230, 251
  %v5_b23c = or i32 %v1_b238, %v4_b23c
  store i32 %v5_b23c, i32* %r2.global-to-local, align 4
  %v1_b240 = trunc i32 %v5_b23c to i8
  store i8 %v1_b240, i8* %v2_b230, align 1
  store i32 %v1_ada4, i32* %r1.global-to-local, align 4
  %v0_b248 = load i32, i32* @r8, align 4
  %v1_b248 = add i32 %v0_b248, 13
  %v2_b248 = inttoptr i32 %v1_b248 to i8*
  %v3_b248 = load i8, i8* %v2_b248, align 1
  %v4_b248 = zext i8 %v3_b248 to i32
  store i32 %v1_b24c, i32* %r2.global-to-local, align 4
  %v1_b250 = and i32 %v4_b248, 253
  %v4_b254 = or i32 %v1_b250, %v3_b254
  store i32 %v4_b254, i32* %r3.global-to-local, align 4
  %v1_b258 = trunc i32 %v4_b254 to i8
  store i8 %v1_b258, i8* %v2_b248, align 1
  store i32 %v1_adc4, i32* %ip.global-to-local, align 4
  %v0_b260 = load i32, i32* @r8, align 4
  %v1_b260 = add i32 %v0_b260, 13
  %v2_b260 = inttoptr i32 %v1_b260 to i8*
  %v3_b260 = load i8, i8* %v2_b260, align 1
  %v4_b260 = zext i8 %v3_b260 to i32
  %v1_b268 = and i32 %v4_b260, 254
  store i32 %v1_b268, i32* %r2.global-to-local, align 4
  %v2_b26c = or i32 %v1_b268, %v1_b264
  store i32 %v2_b26c, i32* %r3.global-to-local, align 4
  %v1_b270 = trunc i32 %v2_b26c to i8
  store i8 %v1_b270, i8* %v2_b260, align 1
  %v3_b274 = load i32, i32* @r8, align 4
  %v4_b274 = add i32 %v3_b274, 14
  %v5_b274 = inttoptr i32 %v4_b274 to i16*
  store i16 %v1_b1e0, i16* %v5_b274, align 2
  store i32 %v6_addc, i32* %r1.global-to-local, align 4
  %v0_b27c = load i32, i32* @r4, align 4
  %v1_b27c = add i32 %v0_b27c, 40
  store i32 %v1_b27c, i32* %r0.global-to-local, align 4
  %v2_b280 = inttoptr i32 %v1_b27c to i16*
  %v3_b280 = call i32 @function_effc(i16* %v2_b280, i32 %v6_addc)
  store i32 %v3_b280, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afd4

dec_label_pc_b288:                                ; preds = %dec_label_pc_ae48
  store i32 %v6_addc, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_addc, 40
  br label %dec_label_pc_b298

dec_label_pc_b298:                                ; preds = %dec_label_pc_afe8, %dec_label_pc_b288
  %storemerge7.pre-phi = phi i32 [ %v1_b0d8, %dec_label_pc_afe8 ], [ %.pre, %dec_label_pc_b288 ]
  %v0_b2ac27 = phi i32 [ %v1_afdc, %dec_label_pc_afe8 ], [ 0, %dec_label_pc_b288 ]
  store i32 %storemerge7.pre-phi, i32* @r7, align 4
  %storemerge5 = mul i32 %v6_addc, 65536
  %storemerge = add i32 %v6_addc, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b298 = add i32 %storemerge5, 1310720
  store i32 %v1_b298, i32* %r2.global-to-local, align 4
  %tmp86 = udiv i32 %v1_b298, 256
  %v3_b2a0 = and i32 %tmp86, 65280
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  %v4_b2a4 = udiv i32 %v1_b298, 16777216
  %v5_b2a4 = or i32 %v3_b2a0, %v4_b2a4
  store i32 %v5_b2a4, i32* @r8, align 4
  %v2_b3d0 = icmp eq i32 %v1_adfc, 0
  br label %dec_label_pc_b2a8

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_b2a8, %dec_label_pc_b3b4, %dec_label_pc_b298
  %v0_b2ac = phi i32 [ %v0_b2ac27, %dec_label_pc_b298 ], [ 0, %dec_label_pc_b3b4 ], [ 0, %dec_label_pc_b2a8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2ac = icmp eq i32 %v0_b2ac, 0
  store i1 %v2_b2ac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2ac, label %dec_label_pc_b2a8, label %dec_label_pc_b2b8

dec_label_pc_b2b8:                                ; preds = %dec_label_pc_b2a8, %dec_label_pc_b3b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b2bc

dec_label_pc_b2bc:                                ; preds = %dec_label_pc_b2e4, %dec_label_pc_b2b8
  %v1_b2c4 = phi i32 [ %v1_b3a4, %dec_label_pc_b2e4 ], [ 0, %dec_label_pc_b2b8 ]
  store i32 %v4_ac68, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b2c4 = mul i32 %v1_b2c4, 4
  %v5_b2c4 = add i32 %v4_b2c4, %v4_ac68
  %v6_b2c4 = inttoptr i32 %v5_b2c4 to i32*
  %v7_b2c4 = load i32, i32* %v6_b2c4, align 4
  store i32 %v7_b2c4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b2cc = load i32, i32* %fp.global-to-local, align 4
  %v9_b2cc = icmp eq i32 %v0_b2cc, 65535
  store i1 %v9_b2cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b2d0 = add i32 %v7_b2c4, 20
  store i32 %v1_b2d0, i32* @r5, align 4
  br i1 %v9_b2cc, label %dec_label_pc_b3c8, label %dec_label_pc_b2d8

dec_label_pc_b2d8:                                ; preds = %dec_label_pc_b2bc
  store i32 %v1_adfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b3d0, label %dec_label_pc_b2e4, label %dec_label_pc_b3dc

dec_label_pc_b2e4:                                ; preds = %dec_label_pc_b2d8, %dec_label_pc_b3c8, %dec_label_pc_b3dc
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b2e8 = load i32, i32* @r4, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 10
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i16*
  store i16 0, i16* %v4_b2e8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b2f0 = load i32, i32* @r4, align 4
  store i32 %v0_b2f0, i32* @r0, align 4
  %v2_b2f4 = call i32 @function_d414(i32 %v0_b2f0, i32 20)
  %v3_b2f4 = trunc i32 %v2_b2f4 to i16
  store i32 %v2_b2f4, i32* %r0.global-to-local, align 4
  %v3_b2f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v4_ac58, i32* %r2.global-to-local, align 4
  %v3_b300 = mul i32 %v3_b2f8, 16
  %v2_b304 = add i32 %v3_b300, %v4_ac58
  store i32 %v2_b304, i32* %r1.global-to-local, align 4
  %v1_b308 = add i32 %v2_b304, 4
  %v2_b308 = inttoptr i32 %v1_b308 to i32*
  %v3_b308 = load i32, i32* %v2_b308, align 4
  %v3_b30c = mul i32 %v3_b308, 65536
  store i32 %v3_b30c, i32* %ip.global-to-local, align 4
  %tmp88 = mul i32 %v3_b308, 256
  %v1_b314 = and i32 %tmp88, 65280
  %tmp89 = udiv i32 %v3_b308, 256
  %v4_b318 = urem i32 %tmp89, 256
  %v5_b318 = or i32 %v4_b318, %v1_b314
  store i32 %v5_b318, i32* %r3.global-to-local, align 4
  %v1_b31c = add i32 %v3_b308, 1
  store i32 %v1_b31c, i32* %r2.global-to-local, align 4
  store i32 %v1_b31c, i32* %v2_b308, align 4
  %v0_b324 = load i32, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r5, align 4
  %v2_b324 = add i32 %v1_b324, 4
  %v3_b324 = inttoptr i32 %v2_b324 to i32*
  store i32 %v0_b324, i32* %v3_b324, align 4
  %v0_b328 = load i32, i32* %r1.global-to-local, align 4
  %v1_b328 = add i32 %v0_b328, 8
  %v2_b328 = inttoptr i32 %v1_b328 to i32*
  %v3_b328 = load i32, i32* %v2_b328, align 4
  %tmp90 = mul i32 %v3_b328, 256
  %v1_b334 = and i32 %tmp90, 65280
  %tmp91 = udiv i32 %v3_b328, 256
  %v4_b338 = urem i32 %tmp91, 256
  %v5_b338 = or i32 %v4_b338, %v1_b334
  %v1_b33c = load i32, i32* @r5, align 4
  %v2_b33c = add i32 %v1_b33c, 8
  %v3_b33c = inttoptr i32 %v2_b33c to i32*
  store i32 %v5_b338, i32* %v3_b33c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b344 = load i32, i32* @r4, align 4
  %v4_b344 = add i32 %v3_b344, 10
  %v5_b344 = inttoptr i32 %v4_b344 to i16*
  store i16 %v3_b2f4, i16* %v5_b344, align 2
  %v0_b348 = load i32, i32* @r5, align 4
  store i32 %v0_b348, i32* @r1, align 4
  %v0_b34c = load i32, i32* %r3.global-to-local, align 4
  %v1_b34c = trunc i32 %v0_b34c to i16
  %v3_b34c = add i32 %v0_b348, 16
  %v4_b34c = inttoptr i32 %v3_b34c to i16*
  store i16 %v1_b34c, i16* %v4_b34c, align 2
  %v0_b350 = load i32, i32* @r8, align 4
  store i32 %v0_b350, i32* %r2.global-to-local, align 4
  %v0_b354 = load i32, i32* @sl, align 4
  store i32 %v0_b354, i32* %r3.global-to-local, align 4
  %v0_b358 = load i32, i32* @r4, align 4
  store i32 %v0_b358, i32* %r0.global-to-local, align 4
  %v4_b35c = call i32 @function_d464(i32 %v0_b358, i32 %v0_b348, i32 %v0_b350, i32 %v0_b354)
  %v5_b35c = trunc i32 %v4_b35c to i16
  store i32 %v4_b35c, i32* %r0.global-to-local, align 4
  %v3_b360 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b360, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b368 = mul i32 %v3_b360, 32
  store i32 %v3_b368, i32* %lr.global-to-local, align 4
  %v3_b36c = load i32, i32* @r5, align 4
  %v4_b36c = add i32 %v3_b36c, 16
  %v5_b36c = inttoptr i32 %v4_b36c to i16*
  store i16 %v5_b35c, i16* %v5_b36c, align 2
  %v0_b370 = load i32, i32* %lr.global-to-local, align 4
  %v1_b370 = load i32, i32* %r3.global-to-local, align 4
  %tmp108 = mul i32 %v1_b370, -8
  %v5_b370 = add i32 %v0_b370, %tmp108
  store i32 %v5_b370, i32* %lr.global-to-local, align 4
  %v0_b374 = load i32, i32* @r5, align 4
  %v1_b374 = add i32 %v0_b374, 2
  %v2_b374 = inttoptr i32 %v1_b374 to i16*
  %v3_b374 = load i16, i16* %v2_b374, align 2
  %v1_b378 = load i32, i32* %ip.global-to-local, align 4
  %v2_b378 = add i32 %v1_b378, %v5_b370
  store i32 %v2_b378, i32* @lr, align 4
  %v3_b37c = add i32 %v2_b378, 2
  %v4_b37c = inttoptr i32 %v3_b37c to i16*
  store i16 %v3_b374, i16* %v4_b37c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b388 = load i32, i32* @r4, align 4
  store i32 %v0_b388, i32* %r1.global-to-local, align 4
  %v0_b38c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_b38c, i32* %r0.global-to-local, align 4
  %v0_b390 = load i32, i32* @r7, align 4
  store i32 %v0_b390, i32* %r2.global-to-local, align 4
  %v0_b394 = load i32, i32* @lr, align 4
  %v4_b394 = inttoptr i32 %v0_b394 to %sockaddr*
  %v7_b39c = inttoptr i32 %v0_b388 to i32*
  %v9_b39c = call i32 @sendto(i32 %v0_b38c, i32* %v7_b39c, i32 %v0_b390, i32 16384, %sockaddr* %v4_b394, i32 16)
  %v3_b3a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b3a0, i32* %r3.global-to-local, align 4
  %v1_b3a4 = add i32 %v3_b3a0, 1
  store i32 %v1_b3a4, i32* %r0.global-to-local, align 4
  %v0_b3a8 = load i32, i32* @r6, align 4
  %v9_b3a8 = icmp eq i32 %v0_b3a8, %v1_b3a4
  store i1 %v9_b3a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b3a4, i32* %stack_var_-44, align 4
  %v8_b3b0 = icmp sgt i32 %v0_b3a8, %v1_b3a4
  br i1 %v8_b3b0, label %dec_label_pc_b2bc, label %dec_label_pc_b3b4

dec_label_pc_b3b4:                                ; preds = %dec_label_pc_b2e4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3b8 = icmp eq i32 %v0_b3a8, 0
  store i1 %v2_b3b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3b8, label %dec_label_pc_b2a8, label %dec_label_pc_b2b8

dec_label_pc_b3c8:                                ; preds = %dec_label_pc_b2bc
  %v0_b3c8 = call i32 @function_ee68()
  %v1_b3c8 = trunc i32 %v0_b3c8 to i16
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  store i32 %v1_adfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b3d0, i1* %cpsr_z.global-to-local, align 1
  %v3_b3d4 = load i32, i32* @r4, align 4
  %v4_b3d4 = add i32 %v3_b3d4, 4
  %v5_b3d4 = inttoptr i32 %v4_b3d4 to i16*
  store i16 %v1_b3c8, i16* %v5_b3d4, align 2
  br i1 %v2_b3d0, label %dec_label_pc_b2e4, label %dec_label_pc_b3c8.dec_label_pc_b3dc_crit_edge

dec_label_pc_b3c8.dec_label_pc_b3dc_crit_edge:    ; preds = %dec_label_pc_b3c8
  %v0_b3dc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b3dc

dec_label_pc_b3dc:                                ; preds = %dec_label_pc_b3c8.dec_label_pc_b3dc_crit_edge, %dec_label_pc_b2d8
  %v0_b3dc = phi i32 [ %v0_b3dc.pre, %dec_label_pc_b3c8.dec_label_pc_b3dc_crit_edge ], [ %v7_b2c4, %dec_label_pc_b2d8 ]
  %v1_b3dc = add i32 %v0_b3dc, 40
  store i32 %v1_b3dc, i32* %r0.global-to-local, align 4
  store i32 %v6_addc, i32* %r1.global-to-local, align 4
  %v2_b3e4 = inttoptr i32 %v1_b3dc to i16*
  %v3_b3e4 = call i32 @function_effc(i16* %v2_b3e4, i32 %v6_addc)
  store i32 %v3_b3e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b2e4

; uselistorder directives
  uselistorder i32 %v0_b3c8, { 1, 0 }
  uselistorder i32 %v1_b3a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b370, { 1, 0 }
  uselistorder i32 %v4_b35c, { 1, 0 }
  uselistorder i32 %v3_b328, { 1, 0 }
  uselistorder i32 %v3_b308, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b2f4, { 1, 0 }
  uselistorder i1 %v2_b3d0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b1e0, { 1, 0 }
  uselistorder i32 %v0_b118, { 1, 0 }
  uselistorder i32 %v5_b0ac, { 1, 0 }
  uselistorder i32 %v0_b06c, { 1, 0 }
  uselistorder i32 %v3_b010, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_afd8, { 1, 0, 2, 3 }
  uselistorder i1 %v3_afc8, { 1, 0 }
  uselistorder i32 %v3_afc4, { 0, 2, 3, 1 }
  uselistorder i1 %v9_af78, { 1, 0 }
  uselistorder i32 %v4_af8c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_aed4, { 1, 0, 2 }
  uselistorder i32 %v0_b084, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_aec4, { 1, 0 }
  uselistorder i1 %v7_aebc, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b24c, { 1, 0 }
  uselistorder i32 %v1_b234, { 1, 0 }
  uselistorder i32 %v1_b21c, { 1, 0 }
  uselistorder i32 %v1_b204, { 1, 0 }
  uselistorder i32 %v1_b1ec, { 1, 0 }
  uselistorder i32 %v3_af84, { 1, 0 }
  uselistorder i1 %v2_afa0, { 1, 0 }
  uselistorder i32 %v1_af9c, { 1, 0 }
  uselistorder i32 %v4_af98, { 2, 0, 1 }
  uselistorder i32 %v2_aeac, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ae48, { 1, 0 }
  uselistorder i32 %v1_adfc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_addc, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_adc4, { 1, 2, 0 }
  uselistorder i32 %v1_ada4, { 1, 2, 0 }
  uselistorder i32 %v1_ad84, { 1, 2, 0 }
  uselistorder i32 %v1_ad64, { 1, 2, 0 }
  uselistorder i32 %v1_ad44, { 1, 2, 0 }
  uselistorder i32 %v1_ad24, { 1, 2, 0 }
  uselistorder i32 %v6_ad00, { 1, 0 }
  uselistorder i32 %v1_ace8, { 1, 2, 0 }
  uselistorder i32 %v6_ac80, { 2, 1, 3, 0 }
  uselistorder i32 %v4_ac68, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v4_ac58, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 16, 15 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 20, 17, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 33, 35, 34, 36, 37, 38, 40, 39, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_b2e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b2b8, { 1, 0 }
  uselistorder label %dec_label_pc_b2a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b298, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %dec_label_pc_b004, { 2, 0, 1 }
  uselistorder label %dec_label_pc_afd4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af10, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_aef0, { 1, 0 }
  uselistorder label %dec_label_pc_aecc, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_ae7c, { 1, 0 }
  uselistorder label %dec_label_pc_ae60, { 1, 0 }
}

define i32 @function_b3f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b3f0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b3f0 = load i32, i32* @r4, align 4
  %v27_b3f0 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b40c = call i32* @calloc(i32 4, i32 4)
  %v4_b40c = ptrtoint i32* %v2_b40c to i32
  %v0_b410 = load i32, i32* @r5, align 4
  store i32 %v0_b410, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b420 = load i32, i32* @r4, align 4
  store i32 %v0_b420, i32* %r0.global-to-local, align 4
  %v5_b424 = inttoptr i32 %v0_b410 to i32*
  %v6_b424 = call i32 @function_913c(i32 %v0_b420, i32* %v5_b424, i32 2, i32 0, i32 %v4_b40c)
  %v1_b430 = urem i32 %v6_b424, 256
  store i32 %v1_b430, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  %v0_b440 = load i32, i32* @r4, align 4
  store i32 %v0_b440, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_b424, 16777216
  %v5_b448 = sdiv i32 %sext, 16777216
  %v6_b448 = inttoptr i32 %v0_b43c to i32*
  %v7_b448 = call i32 @function_913c(i32 %v0_b440, i32* %v6_b448, i32 3, i32 65535, i32 %v5_b448)
  %v0_b44c = load i32, i32* @r5, align 4
  store i32 %v0_b44c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b448, i32* %sb.global-to-local, align 4
  %v0_b45c = load i32, i32* @r4, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v5_b460 = inttoptr i32 %v0_b44c to i32*
  %v6_b460 = call i32 @function_913c(i32 %v0_b45c, i32* %v5_b460, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_b468 = urem i32 %v6_b460, 256
  store i32 %v1_b468, i32* %ip.global-to-local, align 4
  %v0_b46c = load i32, i32* @r5, align 4
  store i32 %v0_b46c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b478 = load i32, i32* @r4, align 4
  store i32 %v0_b478, i32* %r0.global-to-local, align 4
  %sext5 = mul i32 %v6_b460, 16777216
  %v5_b480 = sdiv i32 %sext5, 16777216
  %v6_b480 = inttoptr i32 %v0_b46c to i32*
  %v7_b480 = call i32 @function_913c(i32 %v0_b478, i32* %v6_b480, i32 5, i32 0, i32 %v5_b480)
  %v1_b48c = urem i32 %v7_b480, 256
  store i32 %v1_b48c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b498 = load i32, i32* @r5, align 4
  store i32 %v0_b498, i32* %r1.global-to-local, align 4
  %v0_b49c = load i32, i32* @r4, align 4
  store i32 %v0_b49c, i32* %r0.global-to-local, align 4
  %v5_b4a4 = inttoptr i32 %v0_b498 to i32*
  %v6_b4a4 = call i32 @function_913c(i32 %v0_b49c, i32* %v5_b4a4, i32 6, i32 65535, i32 %v1_b48c)
  %v0_b4ac = load i32, i32* @r5, align 4
  store i32 %v0_b4ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b4a4, i32* @r6, align 4
  %v0_b4bc = load i32, i32* @r4, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c0 = inttoptr i32 %v0_b4ac to i32*
  %v6_b4c0 = call i32 @function_913c(i32 %v0_b4bc, i32* %v5_b4c0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b4c8 = load i32, i32* @r5, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b4c0, i32* @sl, align 4
  %v0_b4d8 = load i32, i32* @r4, align 4
  store i32 %v0_b4d8, i32* %r0.global-to-local, align 4
  %v5_b4dc = inttoptr i32 %v0_b4c8 to i32*
  %v6_b4dc = call i32 @function_913c(i32 %v0_b4d8, i32* %v5_b4dc, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b4e8 = load i32, i32* @r5, align 4
  store i32 %v0_b4e8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 %v0_b4f4, i32* %r0.global-to-local, align 4
  %v5_b4f8 = inttoptr i32 %v0_b4e8 to i32*
  %v6_b4f8 = call i32 @function_913c(i32 %v0_b4f4, i32* %v5_b4f8, i32 18, i32 65535, i32 %v6_b4dc)
  %v0_b4fc = load i32, i32* @r5, align 4
  store i32 %v0_b4fc, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b50c = load i32, i32* @r4, align 4
  store i32 %v0_b50c, i32* %r0.global-to-local, align 4
  %v5_b510 = inttoptr i32 %v0_b4fc to i32*
  %v6_b510 = call i32 @function_913c(i32 %v0_b50c, i32* %v5_b510, i32 11, i32 0, i32 %v6_b4f8)
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b524 = load i32, i32* @r4, align 4
  store i32 %v0_b524, i32* %r0.global-to-local, align 4
  %v5_b528 = inttoptr i32 %v0_b514 to i32*
  %v6_b528 = call i32 @function_913c(i32 %v0_b524, i32* %v5_b528, i32 12, i32 1, i32 %v6_b510)
  %v0_b52c = load i32, i32* @r5, align 4
  store i32 %v0_b52c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b53c = load i32, i32* @r4, align 4
  store i32 %v0_b53c, i32* %r0.global-to-local, align 4
  %v5_b540 = inttoptr i32 %v0_b52c to i32*
  %v6_b540 = call i32 @function_913c(i32 %v0_b53c, i32* %v5_b540, i32 13, i32 0, i32 %v6_b528)
  %v0_b544 = load i32, i32* @r5, align 4
  store i32 %v0_b544, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b554 = load i32, i32* @r4, align 4
  store i32 %v0_b554, i32* %r0.global-to-local, align 4
  %v5_b558 = inttoptr i32 %v0_b544 to i32*
  %v6_b558 = call i32 @function_913c(i32 %v0_b554, i32* %v5_b558, i32 14, i32 0, i32 %v6_b540)
  %v0_b55c = load i32, i32* @r5, align 4
  store i32 %v0_b55c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b56c = load i32, i32* @r4, align 4
  store i32 %v0_b56c, i32* %r0.global-to-local, align 4
  %v5_b570 = inttoptr i32 %v0_b55c to i32*
  %v6_b570 = call i32 @function_913c(i32 %v0_b56c, i32* %v5_b570, i32 15, i32 0, i32 %v6_b558)
  %v0_b574 = load i32, i32* @r5, align 4
  store i32 %v0_b574, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b584 = load i32, i32* @r4, align 4
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  %v5_b588 = inttoptr i32 %v0_b574 to i32*
  %v6_b588 = call i32 @function_913c(i32 %v0_b584, i32* %v5_b588, i32 16, i32 0, i32 %v6_b570)
  %v0_b58c = load i32, i32* @r5, align 4
  store i32 %v0_b58c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b59c = load i32, i32* @r4, align 4
  store i32 %v0_b59c, i32* %r0.global-to-local, align 4
  %v5_b5a0 = inttoptr i32 %v0_b58c to i32*
  %v6_b5a0 = call i32 @function_913c(i32 %v0_b59c, i32* %v5_b5a0, i32 0, i32 512, i32 %v6_b588)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b5b0 = load i32, i32* @r5, align 4
  store i32 %v0_b5b0, i32* %r1.global-to-local, align 4
  %v0_b5b4 = load i32, i32* @r4, align 4
  store i32 %v0_b5b4, i32* %r0.global-to-local, align 4
  %v5_b5b8 = inttoptr i32 %v0_b5b0 to i32*
  %v6_b5b8 = call i32 @function_913c(i32 %v0_b5b4, i32* %v5_b5b8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b5c4 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = urem i32 %v6_b5b8, 256
  store i32 %v1_b5c8, i32* %ip.global-to-local, align 4
  %v0_b5cc = load i32, i32* @r5, align 4
  store i32 %v0_b5cc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b5d4 = load i32, i32* @r4, align 4
  store i32 %v0_b5d4, i32* %r0.global-to-local, align 4
  %v5_b5dc = inttoptr i32 %v0_b5cc to i32*
  %v6_b5dc = call i32 @function_90d0(i32 %v0_b5d4, i32* %v5_b5dc, i32 25, i32 %v2_b5c4, i32 %v1_b5c8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b5f0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b5f0, i32* %r0.global-to-local, align 4
  %v2_b5f4 = icmp eq i32 %v3_b5f0, -1
  store i1 %v2_b5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b5f4, label %dec_label_pc_babc, label %dec_label_pc_b600

dec_label_pc_b600:                                ; preds = %dec_label_pc_b3f0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b608 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b608, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_b61c = call i32 @setsockopt(i32 %v3_b5f0, i32 0, i32 3, i32* nonnull %stack_var_-44, i32 4)
  store i32 %v7_b61c, i32* %r0.global-to-local, align 4
  %v2_b620 = icmp eq i32 %v7_b61c, -1
  store i1 %v2_b620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b620, label %dec_label_pc_bab4, label %dec_label_pc_b628

dec_label_pc_b628:                                ; preds = %dec_label_pc_b600
  %v0_b628 = load i32, i32* %sb.global-to-local, align 4
  %v0_b62c = load i32, i32* @r6, align 4
  %v0_b630 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_b638 = urem i32 %v0_b628, 65536
  store i32 %v3_b638, i32* %r1.global-to-local, align 4
  %v3_b63c = urem i32 %v0_b62c, 65536
  store i32 %v3_b63c, i32* %r2.global-to-local, align 4
  %v3_b640 = urem i32 %v0_b630, 65536
  store i32 %v3_b640, i32* %r3.global-to-local, align 4
  %v0_b644 = load i32, i32* @r7, align 4
  %v2_b644 = icmp eq i32 %v0_b644, 0
  store i1 %v2_b644, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b644, label %dec_label_pc_bac8, label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %dec_label_pc_b628
  %v3_b660 = mul i32 %v6_b5a0, 65536
  %v1_b664 = add i32 %v3_b660, 2621440
  %tmp60 = mul i32 %v0_b62c, 256
  %v3_b688 = and i32 %tmp60, 65280
  %tmp61 = mul i32 %v0_b630, 256
  %v3_b68c = and i32 %tmp61, 65280
  %tmp62 = udiv i32 %v0_b62c, 256
  %v4_b690 = urem i32 %tmp62, 256
  %v5_b690 = or i32 %v4_b690, %v3_b688
  store i32 %v5_b690, i32* @r6, align 4
  %tmp63 = udiv i32 %v0_b630, 256
  %v4_b694 = urem i32 %tmp63, 256
  %v5_b694 = or i32 %v4_b694, %v3_b68c
  store i32 %v5_b694, i32* @sl, align 4
  %tmp64 = udiv i32 %v1_b664, 256
  %v3_b6a8 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v0_b628, 256
  %v3_b6ac = and i32 %tmp65, 65280
  %tmp66 = mul i32 %v6_b4dc, 256
  %v3_b6b0 = and i32 %tmp66, 65280
  %v1_b6b4 = urem i32 %v6_b510, 2
  %v1_b6b8 = urem i32 %v6_b528, 2
  %tmp67 = udiv i32 %v6_b4dc, 256
  %v4_b6bc = urem i32 %tmp67, 256
  %v5_b6bc = or i32 %v4_b6bc, %v3_b6b0
  %v4_b6c0 = udiv i32 %v1_b664, 16777216
  %v5_b6c0 = or i32 %v3_b6a8, %v4_b6c0
  store i32 %v5_b6c0, i32* %sb.global-to-local, align 4
  %tmp68 = udiv i32 %v0_b628, 256
  %v4_b6c4 = urem i32 %tmp68, 256
  %v5_b6c4 = or i32 %v4_b6c4, %v3_b6ac
  store i32 %v5_b6c4, i32* %fp.global-to-local, align 4
  %v1_b6e0 = urem i32 %v6_b540, 2
  store i32 %v1_b6e0, i32* %r2.global-to-local, align 4
  %v1_b6e4 = urem i32 %v6_b558, 2
  store i32 %v1_b6e4, i32* %r3.global-to-local, align 4
  %v1_b6e8 = urem i32 %v6_b570, 2
  store i32 %v1_b6e8, i32* %ip.global-to-local, align 4
  %v1_b6ec = urem i32 %v6_b588, 2
  store i32 %v1_b6ec, i32* %r0.global-to-local, align 4
  %v1_b6f0 = urem i32 %v6_b540, 256
  store i32 %v1_b6f0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %tmp = sub nsw i32 0, %v1_b6b8
  %v4_b7dc = and i32 %tmp, 16
  %tmp73 = sub nsw i32 0, %v1_b6e0
  %v4_b7f8 = and i32 %tmp73, 8
  %tmp74 = sub nsw i32 0, %v1_b6e4
  %v4_b80c = and i32 %tmp74, 4
  %tmp75 = sub nsw i32 0, %v1_b6e8
  %v3_b820 = and i32 %tmp75, 2
  %v2_b844 = icmp eq i32 %v1_b6f0, 0
  %v1_b76c = trunc i32 %v5_b448 to i8
  %extract.t = trunc i32 %v5_b480 to i8
  br label %dec_label_pc_b710

dec_label_pc_b710:                                ; preds = %bb71, %dec_label_pc_b65c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b71c = call i32* @calloc(i32 1510, i32 1)
  %v4_b71c = ptrtoint i32* %v2_b71c to i32
  store i32 %v4_b71c, i32* %r0.global-to-local, align 4
  %v2_b724 = load i32, i32* %r4.global-to-local, align 4
  %v5_b724 = mul i32 %v2_b724, 4
  %v6_b724 = add i32 %v5_b724, %v4_b40c
  %v7_b724 = inttoptr i32 %v6_b724 to i32*
  store i32 %v4_b71c, i32* %v7_b724, align 4
  %v3_b728 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b728, i32* %r2.global-to-local, align 4
  %v5_b730 = mul i32 %v3_b728, 24
  %v1_b734 = load i32, i32* @r8, align 4
  %v2_b734 = add i32 %v1_b734, %v5_b730
  store i32 %v2_b734, i32* %r1.global-to-local, align 4
  store i32 %v4_b40c, i32* %r3.global-to-local, align 4
  %v4_b73c = mul i32 %v3_b728, 4
  %v5_b73c = add i32 %v4_b73c, %v4_b40c
  %v6_b73c = inttoptr i32 %v5_b73c to i32*
  %v7_b73c = load i32, i32* %v6_b73c, align 4
  store i32 %v7_b73c, i32* @r5, align 4
  %v1_b740 = inttoptr i32 %v7_b73c to i8*
  %v2_b740 = load i8, i8* %v1_b740, align 1
  %tmp76 = urem i8 %v2_b740, 16
  %v1_b744 = zext i8 %tmp76 to i32
  %v1_b748 = or i32 %v1_b744, 64
  store i32 %v1_b748, i32* %r3.global-to-local, align 4
  %v1_b74c = trunc i32 %v1_b748 to i8
  store i8 %v1_b74c, i8* %v1_b740, align 1
  %v0_b750 = load i32, i32* @r5, align 4
  %v1_b750 = inttoptr i32 %v0_b750 to i8*
  %v2_b750 = load i8, i8* %v1_b750, align 1
  %v1_b754 = and i8 %v2_b750, -16
  %v1_b758 = or i8 %v1_b754, 5
  store i32 %v1_b48c, i32* %ip.global-to-local, align 4
  store i8 %v1_b758, i8* %v1_b750, align 1
  store i32 %v5_b448, i32* %r0.global-to-local, align 4
  %v0_b768 = load i32, i32* %ip.global-to-local, align 4
  %v2_b768 = icmp eq i32 %v0_b768, 0
  store i1 %v2_b768, i1* %cpsr_z.global-to-local, align 1
  %v2_b76c = load i32, i32* @r5, align 4
  %v3_b76c = add i32 %v2_b76c, 1
  %v4_b76c = inttoptr i32 %v3_b76c to i8*
  store i8 %v1_b76c, i8* %v4_b76c, align 1
  store i32 %v5_b480, i32* %r2.global-to-local, align 4
  %v0_b774 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b774, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b710
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b778 = load i32, i32* @r5, align 4
  %v4_b778 = add i32 %v3_b778, 6
  %v5_b778 = inttoptr i32 %v4_b778 to i16*
  store i16 64, i16* %v5_b778, align 2
  %v0_b780.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t18 = trunc i32 %v0_b780.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b710, %bb
  %v0_b780.off0 = phi i8 [ %extract.t, %dec_label_pc_b710 ], [ %extract.t18, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_b780 = load i32, i32* @r5, align 4
  %v3_b780 = add i32 %v2_b780, 8
  %v4_b780 = inttoptr i32 %v3_b780 to i8*
  store i8 %v0_b780.off0, i8* %v4_b780, align 1
  %v0_b784 = load i32, i32* %r3.global-to-local, align 4
  %v1_b784 = trunc i32 %v0_b784 to i8
  %v2_b784 = load i32, i32* @r5, align 4
  %v3_b784 = add i32 %v2_b784, 9
  %v4_b784 = inttoptr i32 %v3_b784 to i8*
  store i8 %v1_b784, i8* %v4_b784, align 1
  store i32 %v6_b5dc, i32* %ip.global-to-local, align 4
  %v1_b78c = load i32, i32* @r5, align 4
  %v2_b78c = add i32 %v1_b78c, 12
  %v3_b78c = inttoptr i32 %v2_b78c to i32*
  store i32 %v6_b5dc, i32* %v3_b78c, align 4
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = add i32 %v0_b790, 16
  %v2_b790 = inttoptr i32 %v1_b790 to i32*
  %v3_b790 = load i32, i32* %v2_b790, align 4
  store i32 %v3_b790, i32* %r3.global-to-local, align 4
  %v0_b794 = load i32, i32* %sb.global-to-local, align 4
  %v1_b794 = trunc i32 %v0_b794 to i16
  %v2_b794 = load i32, i32* @r5, align 4
  %v3_b794 = add i32 %v2_b794, 2
  %v4_b794 = inttoptr i32 %v3_b794 to i16*
  store i16 %v1_b794, i16* %v4_b794, align 2
  %v0_b798 = load i32, i32* %fp.global-to-local, align 4
  %v1_b798 = trunc i32 %v0_b798 to i16
  %v2_b798 = load i32, i32* @r5, align 4
  %v3_b798 = add i32 %v2_b798, 4
  %v4_b798 = inttoptr i32 %v3_b798 to i16*
  store i16 %v1_b798, i16* %v4_b798, align 2
  %v0_b79c = load i32, i32* %r3.global-to-local, align 4
  %v1_b79c = load i32, i32* @r5, align 4
  %v2_b79c = add i32 %v1_b79c, 16
  %v3_b79c = inttoptr i32 %v2_b79c to i32*
  store i32 %v0_b79c, i32* %v3_b79c, align 4
  %v0_b7a0 = load i32, i32* @r6, align 4
  %v1_b7a0 = trunc i32 %v0_b7a0 to i16
  %v2_b7a0 = load i32, i32* @r5, align 4
  %v3_b7a0 = add i32 %v2_b7a0, 20
  %v4_b7a0 = inttoptr i32 %v3_b7a0 to i16*
  store i16 %v1_b7a0, i16* %v4_b7a0, align 2
  %v0_b7a4 = load i32, i32* @r5, align 4
  %v1_b7a4 = add i32 %v0_b7a4, 20
  store i32 %v1_b7a4, i32* @r4, align 4
  %v1_b7a8 = add i32 %v0_b7a4, 32
  %v2_b7a8 = inttoptr i32 %v1_b7a8 to i8*
  %v3_b7a8 = load i8, i8* %v2_b7a8, align 1
  %v4_b7a8 = zext i8 %v3_b7a8 to i32
  store i32 %v4_b7a8, i32* %r3.global-to-local, align 4
  %v1_b7ac = add i32 %v0_b7a4, 33
  %v2_b7ac = inttoptr i32 %v1_b7ac to i8*
  %v3_b7ac = load i8, i8* %v2_b7ac, align 1
  %v4_b7ac = zext i8 %v3_b7ac to i32
  store i32 %v1_b6b4, i32* %r0.global-to-local, align 4
  %tmp77 = urem i8 %v3_b7a8, 16
  %v1_b7b4 = zext i8 %tmp77 to i32
  %v1_b7b8 = or i32 %v1_b7b4, 80
  store i32 %v1_b7b8, i32* %r3.global-to-local, align 4
  %v1_b7bc = and i32 %v4_b7ac, 223
  store i32 %v1_b7bc, i32* %r2.global-to-local, align 4
  %v1_b7c0 = trunc i32 %v1_b7b8 to i8
  store i8 %v1_b7c0, i8* %v2_b7a8, align 1
  %v0_b7c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7c4 = load i32, i32* %r0.global-to-local, align 4
  %v4_b7c4 = mul i32 %v1_b7c4, 32
  %v5_b7c4 = or i32 %v4_b7c4, %v0_b7c4
  store i32 %v5_b7c4, i32* %r2.global-to-local, align 4
  store i32 %v5_b6bc, i32* %r1.global-to-local, align 4
  %v1_b7cc = trunc i32 %v5_b7c4 to i8
  %v2_b7cc = load i32, i32* @r4, align 4
  %v3_b7cc = add i32 %v2_b7cc, 13
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v0_b7d0 = load i32, i32* @r4, align 4
  %v1_b7d0 = add i32 %v0_b7d0, 13
  %v2_b7d0 = inttoptr i32 %v1_b7d0 to i8*
  %v3_b7d0 = load i8, i8* %v2_b7d0, align 1
  %v4_b7d0 = zext i8 %v3_b7d0 to i32
  store i32 %v1_b6b8, i32* %r2.global-to-local, align 4
  %v1_b7d8 = and i32 %v4_b7d0, 239
  %v5_b7dc = or i32 %v1_b7d8, %v4_b7dc
  store i32 %v5_b7dc, i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_b7e0 = add i32 %v0_b7d0, 4
  %v3_b7e0 = inttoptr i32 %v2_b7e0 to i32*
  store i32 %v0_b7e0, i32* %v3_b7e0, align 4
  %v0_b7e4 = load i32, i32* @sl, align 4
  %v1_b7e4 = trunc i32 %v0_b7e4 to i16
  %v2_b7e4 = load i32, i32* @r4, align 4
  %v3_b7e4 = add i32 %v2_b7e4, 2
  %v4_b7e4 = inttoptr i32 %v3_b7e4 to i16*
  store i16 %v1_b7e4, i16* %v4_b7e4, align 2
  %v0_b7e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7e8 = trunc i32 %v0_b7e8 to i8
  %v2_b7e8 = load i32, i32* @r4, align 4
  %v3_b7e8 = add i32 %v2_b7e8, 13
  %v4_b7e8 = inttoptr i32 %v3_b7e8 to i8*
  store i8 %v1_b7e8, i8* %v4_b7e8, align 1
  %v0_b7ec = load i32, i32* @r4, align 4
  %v1_b7ec = add i32 %v0_b7ec, 13
  %v2_b7ec = inttoptr i32 %v1_b7ec to i8*
  %v3_b7ec = load i8, i8* %v2_b7ec, align 1
  %v4_b7ec = zext i8 %v3_b7ec to i32
  store i32 %v1_b6e0, i32* %r3.global-to-local, align 4
  %v1_b7f4 = and i32 %v4_b7ec, 247
  %v5_b7f8 = or i32 %v1_b7f4, %v4_b7f8
  store i32 %v5_b7f8, i32* %r2.global-to-local, align 4
  %v1_b7fc = trunc i32 %v5_b7f8 to i8
  store i8 %v1_b7fc, i8* %v2_b7ec, align 1
  %v0_b800 = load i32, i32* @r4, align 4
  %v1_b800 = add i32 %v0_b800, 13
  %v2_b800 = inttoptr i32 %v1_b800 to i8*
  %v3_b800 = load i8, i8* %v2_b800, align 1
  %v4_b800 = zext i8 %v3_b800 to i32
  store i32 %v1_b6e4, i32* %ip.global-to-local, align 4
  %v1_b808 = and i32 %v4_b800, 251
  %v5_b80c = or i32 %v1_b808, %v4_b80c
  store i32 %v5_b80c, i32* %r3.global-to-local, align 4
  %v1_b810 = trunc i32 %v5_b80c to i8
  store i8 %v1_b810, i8* %v2_b800, align 1
  %v0_b814 = load i32, i32* @r4, align 4
  %v1_b814 = add i32 %v0_b814, 13
  %v2_b814 = inttoptr i32 %v1_b814 to i8*
  %v3_b814 = load i8, i8* %v2_b814, align 1
  %v4_b814 = zext i8 %v3_b814 to i32
  store i32 %v1_b6e8, i32* %r0.global-to-local, align 4
  %v1_b81c = and i32 %v4_b814, 253
  %v4_b820 = or i32 %v1_b81c, %v3_b820
  store i32 %v4_b820, i32* %r2.global-to-local, align 4
  %v1_b824 = trunc i32 %v4_b820 to i8
  store i8 %v1_b824, i8* %v2_b814, align 1
  %v0_b828 = load i32, i32* @r4, align 4
  %v1_b828 = add i32 %v0_b828, 13
  %v2_b828 = inttoptr i32 %v1_b828 to i8*
  %v3_b828 = load i8, i8* %v2_b828, align 1
  %v4_b828 = zext i8 %v3_b828 to i32
  store i32 %v1_b6ec, i32* %r1.global-to-local, align 4
  %v1_b830 = and i32 %v4_b828, 254
  %v2_b834 = or i32 %v1_b830, %v1_b6ec
  store i32 %v2_b834, i32* %r3.global-to-local, align 4
  %v1_b838 = trunc i32 %v2_b834 to i8
  store i8 %v1_b838, i8* %v2_b828, align 1
  %v0_b83c = call i32 @function_ee68()
  %v1_b83c = trunc i32 %v0_b83c to i16
  store i32 %v0_b83c, i32* %r0.global-to-local, align 4
  store i32 %v1_b6f0, i32* %r2.global-to-local, align 4
  store i1 %v2_b844, i1* %cpsr_z.global-to-local, align 1
  %v3_b850.pre = load i32, i32* @r4, align 4
  br i1 %v2_b844, label %.thread4, label %bb69

bb69:                                             ; preds = %.thread
  %v2_b848 = add i32 %v3_b850.pre, 13
  %v3_b848 = inttoptr i32 %v2_b848 to i8*
  %v4_b848 = load i8, i8* %v3_b848, align 1
  %v5_b848 = zext i8 %v4_b848 to i32
  %v2_b84c = or i32 %v5_b848, 8
  store i32 %v2_b84c, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb69
  %v4_b850 = add i32 %v3_b850.pre, 14
  %v5_b850 = inttoptr i32 %v4_b850 to i16*
  store i16 %v1_b83c, i16* %v5_b850, align 2
  store i32 %v6_b5a0, i32* %r1.global-to-local, align 4
  %v0_b858 = load i32, i32* @r5, align 4
  %v1_b858 = add i32 %v0_b858, 40
  store i32 %v1_b858, i32* %r0.global-to-local, align 4
  br i1 %v2_b844, label %bb71, label %bb70

bb70:                                             ; preds = %.thread4
  %v1_b85c = load i32, i32* @r3, align 4
  %v2_b85c = trunc i32 %v1_b85c to i8
  %v3_b85c = load i32, i32* @r4, align 4
  %v4_b85c = add i32 %v3_b85c, 13
  %v5_b85c = inttoptr i32 %v4_b85c to i8*
  store i8 %v2_b85c, i8* %v5_b85c, align 1
  br label %bb71

bb71:                                             ; preds = %.thread4, %bb70
  %v2_b860 = inttoptr i32 %v1_b858 to i16*
  %v3_b860 = call i32 @function_effc(i16* %v2_b860, i32 %v6_b5a0)
  store i32 %v3_b860, i32* %r0.global-to-local, align 4
  %v3_b864 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b864, i32* %r3.global-to-local, align 4
  %v1_b868 = add i32 %v3_b864, 1
  store i32 %v1_b868, i32* %r4.global-to-local, align 4
  %v1_b86c = load i32, i32* @r7, align 4
  %v9_b86c = icmp eq i32 %v1_b868, %v1_b86c
  store i1 %v9_b86c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b868, i32* %stack_var_-44, align 4
  %v5_b874 = icmp slt i32 %v1_b868, %v1_b86c
  br i1 %v5_b874, label %dec_label_pc_b710, label %dec_label_pc_b878

dec_label_pc_b878:                                ; preds = %bb71
  store i32 %v6_b5a0, i32* %r3.global-to-local, align 4
  %v1_b87c = add i32 %v6_b5a0, 20
  store i32 %v1_b87c, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_bac8, %dec_label_pc_b878
  %v0_b89c9 = phi i32 [ %v1_b86c, %dec_label_pc_b878 ], [ 0, %dec_label_pc_bac8 ]
  %stack_var_-140.0 = phi i32 [ %v3_b660, %dec_label_pc_b878 ], [ %v3_bad4, %dec_label_pc_bac8 ]
  %storemerge = add i32 %v6_b5a0, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_b888 = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_b888, i32* %r2.global-to-local, align 4
  %tmp72 = udiv i32 %v1_b888, 256
  %v3_b890 = and i32 %tmp72, 65280
  store i32 %v3_b890, i32* %r3.global-to-local, align 4
  %v4_b894 = udiv i32 %v1_b888, 16777216
  %v5_b894 = or i32 %v3_b890, %v4_b894
  store i32 %v5_b894, i32* @sl, align 4
  %v3_ba34 = icmp eq i32 %v3_b638, 65535
  %v2_ba98 = icmp eq i32 %v1_b5c8, 0
  %v2_b8d4 = icmp eq i32 %v6_b5dc, -1
  br label %dec_label_pc_b898

dec_label_pc_b898:                                ; preds = %dec_label_pc_b898, %dec_label_pc_b9b0, %dec_label_pc_b884
  %v0_b89c = phi i32 [ %v0_b89c9, %dec_label_pc_b884 ], [ 0, %dec_label_pc_b9b0 ], [ 0, %dec_label_pc_b898 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b89c = icmp eq i32 %v0_b89c, 0
  store i1 %v2_b89c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b89c, label %dec_label_pc_b898, label %dec_label_pc_b8a8

dec_label_pc_b8a8:                                ; preds = %dec_label_pc_b898, %dec_label_pc_b9b0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8ac

dec_label_pc_b8ac:                                ; preds = %dec_label_pc_b92c, %dec_label_pc_b8a8
  %v1_b8c0 = phi i32 [ %v1_b9a0, %dec_label_pc_b92c ], [ 0, %dec_label_pc_b8a8 ]
  %v5_b8b0 = mul i32 %v1_b8c0, 24
  %v1_b8b4 = load i32, i32* @r8, align 4
  %v2_b8b4 = add i32 %v1_b8b4, %v5_b8b0
  store i32 %v2_b8b4, i32* %r3.global-to-local, align 4
  store i32 %v4_b40c, i32* %ip.global-to-local, align 4
  %v1_b8bc = add i32 %v2_b8b4, 20
  %v2_b8bc = inttoptr i32 %v1_b8bc to i8*
  %v3_b8bc = load i8, i8* %v2_b8bc, align 1
  %v4_b8bc = zext i8 %v3_b8bc to i32
  store i32 %v4_b8bc, i32* %r2.global-to-local, align 4
  %v4_b8c0 = mul i32 %v1_b8c0, 4
  %v5_b8c0 = add i32 %v4_b8c0, %v4_b40c
  %v6_b8c0 = inttoptr i32 %v5_b8c0 to i32*
  %v7_b8c0 = load i32, i32* %v6_b8c0, align 4
  store i32 %v7_b8c0, i32* @r5, align 4
  %v7_b8c4 = icmp eq i8 %v3_b8bc, 31
  store i1 %v7_b8c4, i1* %cpsr_z.global-to-local, align 1
  %v1_b8c8 = add i32 %v7_b8c0, 20
  store i32 %v1_b8c8, i32* @r6, align 4
  %tmp78 = icmp ult i8 %v3_b8bc, 32
  br i1 %tmp78, label %dec_label_pc_b9c4, label %dec_label_pc_b8d0

dec_label_pc_b8d0:                                ; preds = %dec_label_pc_b8ac
  store i32 %v6_b5dc, i32* %r0.global-to-local, align 4
  store i1 %v2_b8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b8d4, label %dec_label_pc_ba24, label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_b9c4, %dec_label_pc_b8d0
  store i32 %v3_b638, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba34, label %dec_label_pc_ba40, label %dec_label_pc_b8f0

dec_label_pc_b8f0:                                ; preds = %dec_label_pc_ba24.dec_label_pc_b8f0_crit_edge, %dec_label_pc_b8dc
  %v1_b8f4 = phi i32 [ %v1_b8f4.pre, %dec_label_pc_ba24.dec_label_pc_b8f0_crit_edge ], [ 65535, %dec_label_pc_b8dc ]
  store i32 %v3_b63c, i32* %r2.global-to-local, align 4
  %v9_b8f4 = icmp eq i32 %v3_b63c, %v1_b8f4
  store i1 %v9_b8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8f4, label %dec_label_pc_ba54, label %dec_label_pc_b8fc

dec_label_pc_b8fc:                                ; preds = %dec_label_pc_ba40.dec_label_pc_b8fc_crit_edge, %dec_label_pc_b8f0
  %v1_b900 = phi i32 [ %v1_b900.pre, %dec_label_pc_ba40.dec_label_pc_b8fc_crit_edge ], [ %v1_b8f4, %dec_label_pc_b8f0 ]
  store i32 %v3_b640, i32* %r3.global-to-local, align 4
  %v9_b900 = icmp eq i32 %v3_b640, %v1_b900
  store i1 %v9_b900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b900, label %dec_label_pc_ba68, label %dec_label_pc_b908

dec_label_pc_b908:                                ; preds = %dec_label_pc_ba54.dec_label_pc_b908_crit_edge, %dec_label_pc_b8fc
  %v1_b90c = phi i32 [ %v1_b90c.pre, %dec_label_pc_ba54.dec_label_pc_b908_crit_edge ], [ %v1_b900, %dec_label_pc_b8fc ]
  store i32 %v6_b4dc, i32* %ip.global-to-local, align 4
  %v9_b90c = icmp eq i32 %v6_b4dc, %v1_b90c
  store i1 %v9_b90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b90c, label %dec_label_pc_ba7c, label %dec_label_pc_b914

dec_label_pc_b914:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b914_crit_edge, %dec_label_pc_b908
  %v1_b918 = phi i32 [ %v1_b918.pre, %dec_label_pc_ba68.dec_label_pc_b914_crit_edge ], [ %v1_b90c, %dec_label_pc_b908 ]
  store i32 %v6_b4f8, i32* %r0.global-to-local, align 4
  %v9_b918 = icmp eq i32 %v6_b4f8, %v1_b918
  store i1 %v9_b918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b918, label %dec_label_pc_ba90, label %dec_label_pc_b920

dec_label_pc_b920:                                ; preds = %dec_label_pc_ba7c, %dec_label_pc_b914
  store i32 %v1_b5c8, i32* %r1.global-to-local, align 4
  store i1 %v2_ba98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ba98, label %dec_label_pc_b92c, label %dec_label_pc_baa4

dec_label_pc_b92c:                                ; preds = %dec_label_pc_b920, %dec_label_pc_ba90, %dec_label_pc_baa4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b930 = load i32, i32* @r5, align 4
  %v3_b930 = add i32 %v2_b930, 10
  %v4_b930 = inttoptr i32 %v3_b930 to i16*
  store i16 0, i16* %v4_b930, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b938 = load i32, i32* @r5, align 4
  store i32 %v0_b938, i32* @r0, align 4
  %v2_b93c = call i32 @function_d414(i32 %v0_b938, i32 20)
  %v3_b93c = trunc i32 %v2_b93c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b944 = load i32, i32* @r5, align 4
  %v4_b944 = add i32 %v3_b944, 10
  %v5_b944 = inttoptr i32 %v4_b944 to i16*
  store i16 %v3_b93c, i16* %v5_b944, align 2
  %v0_b948 = load i32, i32* @r6, align 4
  store i32 %v0_b948, i32* @r1, align 4
  %v0_b94c = load i32, i32* %r3.global-to-local, align 4
  %v1_b94c = trunc i32 %v0_b94c to i16
  %v3_b94c = add i32 %v0_b948, 16
  %v4_b94c = inttoptr i32 %v3_b94c to i16*
  store i16 %v1_b94c, i16* %v4_b94c, align 2
  %v0_b950 = load i32, i32* @sl, align 4
  store i32 %v0_b950, i32* %r2.global-to-local, align 4
  %v0_b954 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_b954, i32* %r3.global-to-local, align 4
  %v0_b958 = load i32, i32* @r5, align 4
  store i32 %v0_b958, i32* %r0.global-to-local, align 4
  %v4_b95c = call i32 @function_d464(i32 %v0_b958, i32 %v0_b948, i32 %v0_b950, i32 %v0_b954)
  %v5_b95c = trunc i32 %v4_b95c to i16
  store i32 %v4_b95c, i32* %r0.global-to-local, align 4
  %v3_b960 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b960, i32* %r3.global-to-local, align 4
  %v3_b964 = mul i32 %v3_b960, 32
  store i32 %v3_b964, i32* %lr.global-to-local, align 4
  %v3_b968 = load i32, i32* @r6, align 4
  %v4_b968 = add i32 %v3_b968, 16
  %v5_b968 = inttoptr i32 %v4_b968 to i16*
  store i16 %v5_b95c, i16* %v5_b968, align 2
  %v0_b96c = load i32, i32* %lr.global-to-local, align 4
  %v1_b96c = load i32, i32* %r3.global-to-local, align 4
  %tmp79 = mul i32 %v1_b96c, -8
  %v5_b96c = add i32 %v0_b96c, %tmp79
  store i32 %v5_b96c, i32* %lr.global-to-local, align 4
  %v0_b970 = load i32, i32* @r6, align 4
  %v1_b970 = add i32 %v0_b970, 2
  %v2_b970 = inttoptr i32 %v1_b970 to i16*
  %v3_b970 = load i16, i16* %v2_b970, align 2
  %v1_b974 = load i32, i32* @r8, align 4
  %v2_b974 = add i32 %v1_b974, %v5_b96c
  store i32 %v2_b974, i32* @lr, align 4
  %v3_b978 = add i32 %v2_b974, 2
  %v4_b978 = inttoptr i32 %v3_b978 to i16*
  store i16 %v3_b970, i16* %v4_b978, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b984 = load i32, i32* @r5, align 4
  store i32 %v0_b984, i32* %r1.global-to-local, align 4
  store i32 %v3_b5f0, i32* %r0.global-to-local, align 4
  %v0_b98c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b98c, i32* %r2.global-to-local, align 4
  %v0_b990 = load i32, i32* @lr, align 4
  %v4_b990 = inttoptr i32 %v0_b990 to %sockaddr*
  %v7_b998 = inttoptr i32 %v0_b984 to i32*
  %v9_b998 = call i32 @sendto(i32 %v3_b5f0, i32* %v7_b998, i32 %v0_b98c, i32 16384, %sockaddr* %v4_b990, i32 16)
  %v3_b99c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b99c, i32* %r3.global-to-local, align 4
  %v1_b9a0 = add i32 %v3_b99c, 1
  store i32 %v1_b9a0, i32* %r0.global-to-local, align 4
  %v1_b9a4 = load i32, i32* @r7, align 4
  %v9_b9a4 = icmp eq i32 %v1_b9a0, %v1_b9a4
  store i1 %v9_b9a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b9a0, i32* %stack_var_-44, align 4
  %v5_b9ac = icmp slt i32 %v1_b9a0, %v1_b9a4
  br i1 %v5_b9ac, label %dec_label_pc_b8ac, label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b92c
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b9b4 = icmp eq i32 %v1_b9a4, 0
  store i1 %v2_b9b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b9b4, label %dec_label_pc_b898, label %dec_label_pc_b8a8

dec_label_pc_b9c4:                                ; preds = %dec_label_pc_b8ac
  %v1_b9c4 = add i32 %v2_b8b4, 16
  %v2_b9c4 = inttoptr i32 %v1_b9c4 to i32*
  %v3_b9c4 = load i32, i32* %v2_b9c4, align 4
  store i32 %v3_b9c4, i32* %r4.global-to-local, align 4
  %v0_b9c8 = call i32 @function_ee68()
  store i32 %v0_b9c8, i32* %r0.global-to-local, align 4
  %v3_b9cc = load i32, i32* %stack_var_-44, align 4
  %v5_b9d4 = mul i32 %v3_b9cc, 24
  %v1_b9d8 = and i32 %v3_b9c4, 16711680
  store i32 %v1_b9d8, i32* %ip.global-to-local, align 4
  %v3_b9dc = udiv i32 %v3_b9c4, 16777216
  %v4_b9e0 = udiv i32 %v1_b9d8, 256
  %v5_b9e0 = or i32 %v4_b9e0, %v3_b9dc
  store i32 %v5_b9e0, i32* %r2.global-to-local, align 4
  %v1_b9e4 = load i32, i32* @r8, align 4
  %v2_b9e4 = add i32 %v1_b9e4, %v5_b9d4
  store i32 %v2_b9e4, i32* %r1.global-to-local, align 4
  %v1_b9e8 = and i32 %v3_b9c4, 65280
  store i32 %v1_b9e8, i32* %r3.global-to-local, align 4
  %v1_b9ec = add i32 %v2_b9e4, 20
  %v2_b9ec = inttoptr i32 %v1_b9ec to i8*
  %v3_b9ec = load i8, i8* %v2_b9ec, align 1
  %v4_b9ec = zext i8 %v3_b9ec to i32
  store i32 %v4_b9ec, i32* %ip.global-to-local, align 4
  %v5_b9f4 = call i32 @llvm.bswap.i32(i32 %v3_b9c4)
  %v7_b9f8 = lshr i32 %v0_b9c8, %v4_b9ec
  %v8_b9f8 = add i32 %v7_b9f8, %v5_b9f4
  store i32 %v8_b9f8, i32* %r2.global-to-local, align 4
  %v1_ba08 = and i32 %v8_b9f8, 65280
  store i32 %v1_ba08, i32* %r1.global-to-local, align 4
  store i32 %v6_b5dc, i32* %r0.global-to-local, align 4
  %v5_ba14 = call i32 @llvm.bswap.i32(i32 %v8_b9f8)
  store i32 %v5_ba14, i32* %r3.global-to-local, align 4
  store i1 %v2_b8d4, i1* %cpsr_z.global-to-local, align 1
  %v1_ba1c = load i32, i32* @r5, align 4
  %v2_ba1c = add i32 %v1_ba1c, 16
  %v3_ba1c = inttoptr i32 %v2_ba1c to i32*
  store i32 %v5_ba14, i32* %v3_ba1c, align 4
  br i1 %v2_b8d4, label %dec_label_pc_ba24, label %dec_label_pc_b8dc

dec_label_pc_ba24:                                ; preds = %dec_label_pc_b9c4, %dec_label_pc_b8d0
  %v0_ba24 = call i32 @function_ee68()
  store i32 %v0_ba24, i32* %r0.global-to-local, align 4
  store i32 %v3_b638, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba34, i1* %cpsr_z.global-to-local, align 1
  %v1_ba38 = load i32, i32* @r5, align 4
  %v2_ba38 = add i32 %v1_ba38, 12
  %v3_ba38 = inttoptr i32 %v2_ba38 to i32*
  store i32 %v0_ba24, i32* %v3_ba38, align 4
  br i1 %v3_ba34, label %dec_label_pc_ba40, label %dec_label_pc_ba24.dec_label_pc_b8f0_crit_edge

dec_label_pc_ba24.dec_label_pc_b8f0_crit_edge:    ; preds = %dec_label_pc_ba24
  %v1_b8f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8f0

dec_label_pc_ba40:                                ; preds = %dec_label_pc_ba24, %dec_label_pc_b8dc
  %v0_ba40 = call i32 @function_ee68()
  %v1_ba40 = trunc i32 %v0_ba40 to i16
  store i32 %v0_ba40, i32* %r0.global-to-local, align 4
  store i32 %v3_b63c, i32* %r2.global-to-local, align 4
  %v1_ba48 = load i32, i32* @r4, align 4
  %v9_ba48 = icmp eq i32 %v3_b63c, %v1_ba48
  store i1 %v9_ba48, i1* %cpsr_z.global-to-local, align 1
  %v3_ba4c = load i32, i32* @r5, align 4
  %v4_ba4c = add i32 %v3_ba4c, 4
  %v5_ba4c = inttoptr i32 %v4_ba4c to i16*
  store i16 %v1_ba40, i16* %v5_ba4c, align 2
  br i1 %v9_ba48, label %dec_label_pc_ba54, label %dec_label_pc_ba40.dec_label_pc_b8fc_crit_edge

dec_label_pc_ba40.dec_label_pc_b8fc_crit_edge:    ; preds = %dec_label_pc_ba40
  %v1_b900.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8fc

dec_label_pc_ba54:                                ; preds = %dec_label_pc_ba40, %dec_label_pc_b8f0
  %v0_ba54 = call i32 @function_ee68()
  %v1_ba54 = trunc i32 %v0_ba54 to i16
  store i32 %v0_ba54, i32* %r0.global-to-local, align 4
  store i32 %v3_b640, i32* %r3.global-to-local, align 4
  %v1_ba5c = load i32, i32* @r4, align 4
  %v9_ba5c = icmp eq i32 %v3_b640, %v1_ba5c
  store i1 %v9_ba5c, i1* %cpsr_z.global-to-local, align 1
  %v3_ba60 = load i32, i32* @r5, align 4
  %v4_ba60 = add i32 %v3_ba60, 20
  %v5_ba60 = inttoptr i32 %v4_ba60 to i16*
  store i16 %v1_ba54, i16* %v5_ba60, align 2
  br i1 %v9_ba5c, label %dec_label_pc_ba68, label %dec_label_pc_ba54.dec_label_pc_b908_crit_edge

dec_label_pc_ba54.dec_label_pc_b908_crit_edge:    ; preds = %dec_label_pc_ba54
  %v1_b90c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b908

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba54, %dec_label_pc_b8fc
  %v0_ba68 = call i32 @function_ee68()
  %v1_ba68 = trunc i32 %v0_ba68 to i16
  store i32 %v0_ba68, i32* %r0.global-to-local, align 4
  store i32 %v6_b4dc, i32* %ip.global-to-local, align 4
  %v1_ba70 = load i32, i32* @r4, align 4
  %v9_ba70 = icmp eq i32 %v6_b4dc, %v1_ba70
  store i1 %v9_ba70, i1* %cpsr_z.global-to-local, align 1
  %v3_ba74 = load i32, i32* @r6, align 4
  %v4_ba74 = add i32 %v3_ba74, 2
  %v5_ba74 = inttoptr i32 %v4_ba74 to i16*
  store i16 %v1_ba68, i16* %v5_ba74, align 2
  br i1 %v9_ba70, label %dec_label_pc_ba7c, label %dec_label_pc_ba68.dec_label_pc_b914_crit_edge

dec_label_pc_ba68.dec_label_pc_b914_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b918.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b914

dec_label_pc_ba7c:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b908
  %v0_ba7c = call i32 @function_ee68()
  %v1_ba80 = load i32, i32* @r6, align 4
  %v2_ba80 = add i32 %v1_ba80, 4
  %v3_ba80 = inttoptr i32 %v2_ba80 to i32*
  store i32 %v0_ba7c, i32* %v3_ba80, align 4
  store i32 %v6_b4f8, i32* %r0.global-to-local, align 4
  %v1_ba88 = load i32, i32* @r4, align 4
  %v9_ba88 = icmp eq i32 %v6_b4f8, %v1_ba88
  store i1 %v9_ba88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ba88, label %dec_label_pc_ba90, label %dec_label_pc_b920

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba7c, %dec_label_pc_b914
  %v0_ba90 = call i32 @function_ee68()
  store i32 %v0_ba90, i32* %r0.global-to-local, align 4
  store i32 %v1_b5c8, i32* %r1.global-to-local, align 4
  store i1 %v2_ba98, i1* %cpsr_z.global-to-local, align 1
  %v1_ba9c = load i32, i32* @r6, align 4
  %v2_ba9c = add i32 %v1_ba9c, 8
  %v3_ba9c = inttoptr i32 %v2_ba9c to i32*
  store i32 %v0_ba90, i32* %v3_ba9c, align 4
  br i1 %v2_ba98, label %dec_label_pc_b92c, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_b920, %dec_label_pc_ba90
  %v0_baa4 = load i32, i32* @r5, align 4
  %v1_baa4 = add i32 %v0_baa4, 40
  store i32 %v1_baa4, i32* %r0.global-to-local, align 4
  store i32 %v6_b5a0, i32* %r1.global-to-local, align 4
  %v2_baac = inttoptr i32 %v1_baa4 to i16*
  %v3_baac = call i32 @function_effc(i16* %v2_baac, i32 %v6_b5a0)
  store i32 %v3_baac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b92c

dec_label_pc_bab4:                                ; preds = %dec_label_pc_b600
  store i32 %v3_b5f0, i32* %r0.global-to-local, align 4
  %v1_bab8 = call i32 @close(i32 %v3_b5f0)
  store i32 %v1_bab8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_babc

dec_label_pc_babc:                                ; preds = %dec_label_pc_b3f0, %dec_label_pc_bab4
  %v1_bac4 = phi i32 [ -1, %dec_label_pc_b3f0 ], [ %v1_bab8, %dec_label_pc_bab4 ]
  store i32 %v3_b3f0, i32* %r4.global-to-local, align 4
  store i32 %v27_b3f0, i32* %lr.global-to-local, align 4
  ret i32 %v1_bac4

dec_label_pc_bac8:                                ; preds = %dec_label_pc_b628
  store i32 %v6_b5a0, i32* %r0.global-to-local, align 4
  %v1_bad0 = add i32 %v6_b5a0, 20
  store i32 %v1_bad0, i32* %sb.global-to-local, align 4
  %v3_bad4 = mul i32 %v6_b5a0, 65536
  store i32 %v3_bad4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b884

; uselistorder directives
  uselistorder i32 %v0_ba68, { 1, 0 }
  uselistorder i32 %v0_ba54, { 1, 0 }
  uselistorder i32 %v0_ba40, { 1, 0 }
  uselistorder i32 %v5_ba14, { 1, 0 }
  uselistorder i32 %v3_b9c4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_b9a0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b96c, { 1, 0 }
  uselistorder i32 %v4_b95c, { 1, 0 }
  uselistorder i1 %v2_b8d4, { 3, 0, 1, 2 }
  uselistorder i1 %v2_ba98, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ba34, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_b868, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b83c, { 1, 0 }
  uselistorder i32 %v1_b6f0, { 1, 2, 0 }
  uselistorder i32 %v1_b6ec, { 2, 1, 0 }
  uselistorder i32 %v1_b6e8, { 2, 0, 1 }
  uselistorder i32 %v1_b6e4, { 2, 0, 1 }
  uselistorder i32 %v1_b6e0, { 2, 0, 1 }
  uselistorder i32 %v1_b6b8, { 1, 0 }
  uselistorder i32 %v3_b660, { 1, 0 }
  uselistorder i32 %v3_b638, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b630, { 1, 0, 2 }
  uselistorder i32 %v0_b62c, { 1, 0, 2 }
  uselistorder i32 %v0_b628, { 1, 0, 2 }
  uselistorder i32 %v3_b5f0, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_b5dc, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_b5c8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_b5a0, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_b4f8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b4dc, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_b48c, { 1, 2, 0 }
  uselistorder i32 %v5_b480, { 0, 2, 1 }
  uselistorder i32 %v5_b448, { 0, 2, 1 }
  uselistorder i32 %v4_b40c, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sb.global-to-local, { 6, 5, 0, 1, 2, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 43, 44, 45, 47, 46, 48, 49, 50, 51, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 39, 40, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 34, 35, 36, 37, 38, 39, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 31, 30, 33, 32, 0 }
  uselistorder i32* %r0.global-to-local, { 35, 37, 36, 40, 38, 41, 39, 42, 43, 44, 46, 45, 48, 47, 49, 51, 50, 1, 2, 3, 5, 4, 10, 6, 7, 8, 9, 14, 11, 12, 13, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0 }
  uselistorder i32* %ip.global-to-local, { 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i1* %cpsr_z.global-to-local, { 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_babc, { 1, 0 }
  uselistorder label %dec_label_pc_baa4, { 1, 0 }
  uselistorder label %dec_label_pc_b92c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b8a8, { 1, 0 }
  uselistorder label %dec_label_pc_b898, { 1, 0, 2 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bae8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bae8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_bae8 = load i32, i32* @r4, align 4
  %v6_bae8 = load i32, i32* @r5, align 4
  %v9_bae8 = load i32, i32* @r6, align 4
  %v27_bae8 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bb04 = call i32* @calloc(i32 4, i32 4)
  %v3_bb04 = ptrtoint i32* %v2_bb04 to i32
  %v0_bb08 = load i32, i32* @r5, align 4
  store i32 %v0_bb08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v3_bb04, i32* %sb.global-to-local, align 4
  %v0_bb18 = load i32, i32* @r4, align 4
  store i32 %v0_bb18, i32* %r0.global-to-local, align 4
  %v5_bb1c = inttoptr i32 %v0_bb08 to i32*
  %v6_bb1c = call i32 @function_913c(i32 %v0_bb18, i32* %v5_bb1c, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r5, align 4
  store i32 %v0_bb34, i32* %r1.global-to-local, align 4
  %v0_bb38 = load i32, i32* @r4, align 4
  store i32 %v0_bb38, i32* %r0.global-to-local, align 4
  %v5_bb3c = trunc i32 %v6_bb1c to i8
  %v6_bb40 = inttoptr i32 %v0_bb34 to i32*
  %v7_bb40 = call i32 @function_913c(i32 %v0_bb38, i32* %v6_bb40, i32 3, i32 65535, i32 %v6_bb1c)
  %v0_bb44 = load i32, i32* @r5, align 4
  store i32 %v0_bb44, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_bb54 = load i32, i32* @r4, align 4
  store i32 %v0_bb54, i32* %r0.global-to-local, align 4
  %v5_bb58 = inttoptr i32 %v0_bb44 to i32*
  %v6_bb58 = call i32 @function_913c(i32 %v0_bb54, i32* %v5_bb58, i32 4, i32 64, i32 %v7_bb40)
  %v1_bb60 = urem i32 %v6_bb58, 256
  %v0_bb64 = load i32, i32* @r5, align 4
  store i32 %v0_bb64, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb70 = load i32, i32* @r4, align 4
  store i32 %v0_bb70, i32* %r0.global-to-local, align 4
  %v6_bb78 = inttoptr i32 %v0_bb64 to i32*
  %v7_bb78 = call i32 @function_913c(i32 %v0_bb70, i32* %v6_bb78, i32 5, i32 1, i32 %v1_bb60)
  %v1_bb84 = urem i32 %v7_bb78, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb90 = load i32, i32* @r5, align 4
  store i32 %v0_bb90, i32* %r1.global-to-local, align 4
  %v0_bb94 = load i32, i32* @r4, align 4
  store i32 %v0_bb94, i32* %r0.global-to-local, align 4
  %v5_bb9c = inttoptr i32 %v0_bb90 to i32*
  %v6_bb9c = call i32 @function_913c(i32 %v0_bb94, i32* %v5_bb9c, i32 6, i32 65535, i32 %v1_bb84)
  %v0_bba4 = load i32, i32* @r5, align 4
  store i32 %v0_bba4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb9c, i32* %fp.global-to-local, align 4
  %v0_bbb4 = load i32, i32* @r4, align 4
  store i32 %v0_bbb4, i32* %r0.global-to-local, align 4
  %v5_bbb8 = inttoptr i32 %v0_bba4 to i32*
  %v6_bbb8 = call i32 @function_913c(i32 %v0_bbb4, i32* %v5_bbb8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_bbc0 = load i32, i32* @r5, align 4
  store i32 %v0_bbc0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_bbb8, i32* @r6, align 4
  %v0_bbd0 = load i32, i32* @r4, align 4
  store i32 %v0_bbd0, i32* %r0.global-to-local, align 4
  %v5_bbd4 = inttoptr i32 %v0_bbc0 to i32*
  %v6_bbd4 = call i32 @function_913c(i32 %v0_bbd0, i32* %v5_bbd4, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_bbd8 = load i32, i32* @r5, align 4
  store i32 %v0_bbd8, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r4, align 4
  store i32 %v0_bbe8, i32* %r0.global-to-local, align 4
  %v5_bbec = inttoptr i32 %v0_bbd8 to i32*
  %v6_bbec = call i32 @function_913c(i32 %v0_bbe8, i32* %v5_bbec, i32 18, i32 0, i32 %v6_bbd4)
  %v0_bbf0 = load i32, i32* @r5, align 4
  store i32 %v0_bbf0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc00 = load i32, i32* @r4, align 4
  store i32 %v0_bc00, i32* %r0.global-to-local, align 4
  %v5_bc04 = inttoptr i32 %v0_bbf0 to i32*
  %v6_bc04 = call i32 @function_913c(i32 %v0_bc00, i32* %v5_bc04, i32 11, i32 0, i32 %v6_bbec)
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc18 = load i32, i32* @r4, align 4
  store i32 %v0_bc18, i32* %r0.global-to-local, align 4
  %v5_bc1c = inttoptr i32 %v0_bc08 to i32*
  %v6_bc1c = call i32 @function_913c(i32 %v0_bc18, i32* %v5_bc1c, i32 12, i32 0, i32 %v6_bc04)
  %v0_bc20 = load i32, i32* @r5, align 4
  store i32 %v0_bc20, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc30 = load i32, i32* @r4, align 4
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v5_bc34 = inttoptr i32 %v0_bc20 to i32*
  %v6_bc34 = call i32 @function_913c(i32 %v0_bc30, i32* %v5_bc34, i32 13, i32 0, i32 %v6_bc1c)
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r4, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v5_bc4c = inttoptr i32 %v0_bc38 to i32*
  %v6_bc4c = call i32 @function_913c(i32 %v0_bc48, i32* %v5_bc4c, i32 14, i32 0, i32 %v6_bc34)
  %v0_bc50 = load i32, i32* @r5, align 4
  store i32 %v0_bc50, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r4, align 4
  store i32 %v0_bc60, i32* %r0.global-to-local, align 4
  %v5_bc64 = inttoptr i32 %v0_bc50 to i32*
  %v6_bc64 = call i32 @function_913c(i32 %v0_bc60, i32* %v5_bc64, i32 15, i32 1, i32 %v6_bc4c)
  %v0_bc68 = load i32, i32* @r5, align 4
  store i32 %v0_bc68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc78 = load i32, i32* @r4, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v5_bc7c = inttoptr i32 %v0_bc68 to i32*
  %v6_bc7c = call i32 @function_913c(i32 %v0_bc78, i32* %v5_bc7c, i32 16, i32 0, i32 %v6_bc64)
  %v2_bc88 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_bc88, i32* %r3.global-to-local, align 4
  %v0_bc8c = load i32, i32* @r5, align 4
  store i32 %v0_bc8c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bc94 = load i32, i32* @r4, align 4
  store i32 %v0_bc94, i32* %r0.global-to-local, align 4
  %v5_bc98 = inttoptr i32 %v0_bc8c to i32*
  %v6_bc98 = call i32 @function_90d0(i32 %v0_bc94, i32* %v5_bc98, i32 25, i32 %v2_bc88, i32 %v6_bc7c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bcac = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bcac, i32* %r0.global-to-local, align 4
  %v2_bcb0 = icmp eq i32 %v3_bcac, -1
  store i1 %v2_bcb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bcac, i32* %sl.global-to-local, align 4
  br i1 %v2_bcb0, label %dec_label_pc_c184, label %dec_label_pc_bcbc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bae8
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcc4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcc4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bcd8 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_bcc4, i32* nonnull %stack_var_-44, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_bcd8, i32* %r0.global-to-local, align 4
  %v2_bcdc = icmp eq i32 %v6_bcd8, -1
  store i1 %v2_bcdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bcdc, label %dec_label_pc_c17c, label %dec_label_pc_bce4

dec_label_pc_bce4:                                ; preds = %dec_label_pc_bcbc
  %v3_bcec = mul i32 %v7_bb40, 65536
  store i32 %v3_bcec, i32* %r0.global-to-local, align 4
  %v0_bcf0 = load i32, i32* %fp.global-to-local, align 4
  %v3_bcf0 = mul i32 %v0_bcf0, 65536
  store i32 %v3_bcf0, i32* %r4.global-to-local, align 4
  %v0_bcf4 = load i32, i32* @r6, align 4
  %v3_bcf4 = mul i32 %v0_bcf4, 65536
  store i32 %v3_bcf4, i32* %r5.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_bc04, i32* %r2.global-to-local, align 4
  %v3_bd00 = urem i32 %v7_bb40, 65536
  store i32 %v3_bd00, i32* %r3.global-to-local, align 4
  %v3_bd04 = urem i32 %v0_bcf0, 65536
  store i32 %v3_bd04, i32* %r6.global-to-local, align 4
  %v3_bd08 = urem i32 %v0_bcf4, 65536
  store i32 %v3_bd08, i32* %r1.global-to-local, align 4
  %v0_bd0c = load i32, i32* @r7, align 4
  %v2_bd0c = icmp eq i32 %v0_bd0c, 0
  store i1 %v2_bd0c, i1* %cpsr_z.global-to-local, align 1
  %v1_bd1c = urem i32 %v6_bc04, 256
  store i32 %v1_bd1c, i32* %fp.global-to-local, align 4
  br i1 %v2_bd0c, label %dec_label_pc_bf70.preheader, label %dec_label_pc_bd24

dec_label_pc_bd24:                                ; preds = %dec_label_pc_bce4
  %tmp53 = mul i32 %v6_bbd4, 256
  %v3_bd3c = and i32 %tmp53, 65280
  %tmp54 = udiv i32 %v7_bb40, 256
  %v3_bd40 = urem i32 %tmp54, 256
  %tmp55 = udiv i32 %v6_bbd4, 256
  %v4_bd48 = urem i32 %tmp55, 256
  %v5_bd48 = or i32 %v4_bd48, %v3_bd3c
  %v1_bd44 = mul i32 %v7_bb40, 256
  %v4_bd4c = and i32 %v1_bd44, 65280
  %v5_bd4c = or i32 %v4_bd4c, %v3_bd40
  %tmp56 = mul i32 %v0_bcf0, 256
  %v3_bd58 = and i32 %tmp56, 65280
  %tmp57 = mul i32 %v0_bcf4, 256
  %v3_bd5c = and i32 %tmp57, 65280
  %v1_bd60 = urem i32 %v6_bc04, 2
  %v1_bd64 = urem i32 %v6_bc1c, 2
  %tmp58 = udiv i32 %v0_bcf0, 256
  %v4_bd68 = urem i32 %tmp58, 256
  %v5_bd68 = or i32 %v4_bd68, %v3_bd58
  store i32 %v5_bd68, i32* %r6.global-to-local, align 4
  %tmp59 = udiv i32 %v0_bcf4, 256
  %v4_bd6c = urem i32 %tmp59, 256
  %v5_bd6c = or i32 %v4_bd6c, %v3_bd5c
  store i32 %v5_bd6c, i32* %r5.global-to-local, align 4
  %v1_bd88 = urem i32 %v6_bc34, 2
  store i32 %v1_bd88, i32* %r2.global-to-local, align 4
  %v1_bd8c = urem i32 %v6_bc4c, 2
  store i32 %v1_bd8c, i32* %r3.global-to-local, align 4
  %v1_bd90 = urem i32 %v6_bc64, 2
  store i32 %v1_bd90, i32* %r0.global-to-local, align 4
  %v1_bd94 = urem i32 %v6_bc7c, 2
  store i32 %v1_bd94, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %sext = mul nuw i32 %v5_bd4c, 65536
  %v4_be1c = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_bd64
  %v4_be80 = and i32 %tmp, 16
  %tmp63 = sub nsw i32 0, %v1_bd88
  %v4_be94 = and i32 %tmp63, 8
  %tmp64 = sub nsw i32 0, %v1_bd8c
  %v4_beac = and i32 %tmp64, 4
  %tmp65 = sub nsw i32 0, %v1_bd90
  %v3_bec0 = and i32 %tmp65, 2
  %v1_be10 = trunc i32 %v6_bb58 to i8
  br label %dec_label_pc_bdb4

dec_label_pc_bdb4:                                ; preds = %bb62, %dec_label_pc_bd24
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_bdbc = call i32* @calloc(i32 128, i32 1)
  %v4_bdbc = ptrtoint i32* %v2_bdbc to i32
  store i32 %v4_bdbc, i32* %r0.global-to-local, align 4
  %v3_bdc0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bdc0, i32* %r2.global-to-local, align 4
  %v1_bdc4 = load i32, i32* %sb.global-to-local, align 4
  %v2_bdc4 = load i32, i32* %r4.global-to-local, align 4
  %v5_bdc4 = mul i32 %v2_bdc4, 4
  %v6_bdc4 = add i32 %v5_bdc4, %v1_bdc4
  %v7_bdc4 = inttoptr i32 %v6_bdc4 to i32*
  store i32 %v4_bdbc, i32* %v7_bdc4, align 4
  %v0_bdc8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bdc8 = mul i32 %v0_bdc8, 32
  store i32 %v3_bdc8, i32* %r3.global-to-local, align 4
  %v0_bdcc = load i32, i32* %sb.global-to-local, align 4
  %v4_bdcc = mul i32 %v0_bdc8, 4
  %v5_bdcc = add i32 %v0_bdcc, %v4_bdcc
  %v6_bdcc = inttoptr i32 %v5_bdcc to i32*
  %v7_bdcc = load i32, i32* %v6_bdcc, align 4
  store i32 %v7_bdcc, i32* %r4.global-to-local, align 4
  %v5_bdd0 = mul i32 %v0_bdc8, 24
  store i32 %v5_bdd0, i32* %r3.global-to-local, align 4
  %v1_bdd4 = load i32, i32* @r8, align 4
  %v2_bdd4 = add i32 %v1_bdd4, %v5_bdd0
  store i32 %v2_bdd4, i32* %r0.global-to-local, align 4
  %v1_bdd8 = inttoptr i32 %v7_bdcc to i8*
  %v2_bdd8 = load i8, i8* %v1_bdd8, align 1
  %tmp66 = urem i8 %v2_bdd8, 16
  %v1_bddc = zext i8 %tmp66 to i32
  %v1_bde0 = or i32 %v1_bddc, 64
  store i32 %v1_bde0, i32* %r3.global-to-local, align 4
  %v1_bde4 = trunc i32 %v1_bde0 to i8
  store i8 %v1_bde4, i8* %v1_bdd8, align 1
  %v0_bde8 = load i32, i32* %r4.global-to-local, align 4
  %v1_bde8 = inttoptr i32 %v0_bde8 to i8*
  %v2_bde8 = load i8, i8* %v1_bde8, align 1
  %v1_bdec = and i8 %v2_bde8, -16
  %v1_bdf0 = or i8 %v1_bdec, 5
  store i32 %v1_bb84, i32* %r3.global-to-local, align 4
  store i8 %v1_bdf0, i8* %v1_bde8, align 1
  %v2_be00 = load i32, i32* %r4.global-to-local, align 4
  %v3_be00 = add i32 %v2_be00, 1
  %v4_be00 = inttoptr i32 %v3_be00 to i8*
  store i8 %v5_bb3c, i8* %v4_be00, align 1
  store i32 %v1_bb60, i32* %r2.global-to-local, align 4
  %v0_be08 = load i32, i32* %r3.global-to-local, align 4
  %v2_be08 = icmp eq i32 %v0_be08, 0
  store i1 %v2_be08, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_be10 = load i32, i32* %r4.global-to-local, align 4
  %v3_be10 = add i32 %v2_be10, 8
  %v4_be10 = inttoptr i32 %v3_be10 to i8*
  store i8 %v1_be10, i8* %v4_be10, align 1
  %v0_be14 = load i32, i32* %r3.global-to-local, align 4
  %v1_be14 = trunc i32 %v0_be14 to i16
  %v2_be14 = load i32, i32* %r4.global-to-local, align 4
  %v3_be14 = add i32 %v2_be14, 2
  %v4_be14 = inttoptr i32 %v3_be14 to i16*
  store i16 %v1_be14, i16* %v4_be14, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_be1c, i32* %r1.global-to-local, align 4
  %v0_be20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be20, label %bb60, label %bb

bb:                                               ; preds = %dec_label_pc_bdb4
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb60

bb60:                                             ; preds = %dec_label_pc_bdb4, %bb
  %v2_be24 = load i32, i32* %r4.global-to-local, align 4
  %v3_be24 = add i32 %v2_be24, 9
  %v4_be24 = inttoptr i32 %v3_be24 to i8*
  store i8 6, i8* %v4_be24, align 1
  %v0_be28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be28, label %bb62, label %bb61

bb61:                                             ; preds = %bb60
  %v1_be28 = load i32, i32* %r2.global-to-local, align 4
  %v2_be28 = trunc i32 %v1_be28 to i16
  %v3_be28 = load i32, i32* %r4.global-to-local, align 4
  %v4_be28 = add i32 %v3_be28, 6
  %v5_be28 = inttoptr i32 %v4_be28 to i16*
  store i16 %v2_be28, i16* %v5_be28, align 2
  br label %bb62

bb62:                                             ; preds = %bb60, %bb61
  store i32 %v6_bc98, i32* %r2.global-to-local, align 4
  %v1_be30 = load i32, i32* %r4.global-to-local, align 4
  %v2_be30 = add i32 %v1_be30, 12
  %v3_be30 = inttoptr i32 %v2_be30 to i32*
  store i32 %v6_bc98, i32* %v3_be30, align 4
  %v0_be34 = load i32, i32* %r0.global-to-local, align 4
  %v1_be34 = add i32 %v0_be34, 16
  %v2_be34 = inttoptr i32 %v1_be34 to i32*
  %v3_be34 = load i32, i32* %v2_be34, align 4
  store i32 %v3_be34, i32* %r3.global-to-local, align 4
  %v0_be38 = load i32, i32* %r1.global-to-local, align 4
  %v1_be38 = trunc i32 %v0_be38 to i16
  %v2_be38 = load i32, i32* %r4.global-to-local, align 4
  %v3_be38 = add i32 %v2_be38, 4
  %v4_be38 = inttoptr i32 %v3_be38 to i16*
  store i16 %v1_be38, i16* %v4_be38, align 2
  %v0_be3c = load i32, i32* %r3.global-to-local, align 4
  %v1_be3c = load i32, i32* %r4.global-to-local, align 4
  %v2_be3c = add i32 %v1_be3c, 16
  %v3_be3c = inttoptr i32 %v2_be3c to i32*
  store i32 %v0_be3c, i32* %v3_be3c, align 4
  %v0_be40 = load i32, i32* %r6.global-to-local, align 4
  %v1_be40 = trunc i32 %v0_be40 to i16
  %v2_be40 = load i32, i32* %r4.global-to-local, align 4
  %v3_be40 = add i32 %v2_be40, 20
  %v4_be40 = inttoptr i32 %v3_be40 to i16*
  store i16 %v1_be40, i16* %v4_be40, align 2
  %v0_be44 = load i32, i32* %r4.global-to-local, align 4
  %v1_be44 = add i32 %v0_be44, 20
  store i32 %v1_be44, i32* %r1.global-to-local, align 4
  %v1_be48 = add i32 %v0_be44, 32
  %v2_be48 = inttoptr i32 %v1_be48 to i8*
  %v3_be48 = load i8, i8* %v2_be48, align 1
  %v4_be48 = zext i8 %v3_be48 to i32
  store i32 %v4_be48, i32* %r3.global-to-local, align 4
  %v1_be4c = add i32 %v0_be44, 33
  %v2_be4c = inttoptr i32 %v1_be4c to i8*
  %v3_be4c = load i8, i8* %v2_be4c, align 1
  %v4_be4c = zext i8 %v3_be4c to i32
  store i32 %v1_bd60, i32* %r0.global-to-local, align 4
  %v1_be54 = urem i8 %v3_be48, 16
  %v1_be58 = or i8 %v1_be54, -96
  %v1_be5c = and i32 %v4_be4c, 223
  store i32 %v1_be5c, i32* %r2.global-to-local, align 4
  store i8 %v1_be58, i8* %v2_be48, align 1
  %v0_be64 = load i32, i32* %r2.global-to-local, align 4
  %v1_be64 = load i32, i32* %r0.global-to-local, align 4
  %v4_be64 = mul i32 %v1_be64, 32
  %v5_be64 = or i32 %v4_be64, %v0_be64
  store i32 %v5_be64, i32* %r2.global-to-local, align 4
  store i32 %v5_bd48, i32* %r3.global-to-local, align 4
  %v1_be6c = trunc i32 %v5_be64 to i8
  %v2_be6c = load i32, i32* %r1.global-to-local, align 4
  %v3_be6c = add i32 %v2_be6c, 13
  %v4_be6c = inttoptr i32 %v3_be6c to i8*
  store i8 %v1_be6c, i8* %v4_be6c, align 1
  %v0_be70 = load i32, i32* %r3.global-to-local, align 4
  %v1_be70 = load i32, i32* %r1.global-to-local, align 4
  %v2_be70 = add i32 %v1_be70, 4
  %v3_be70 = inttoptr i32 %v2_be70 to i32*
  store i32 %v0_be70, i32* %v3_be70, align 4
  %v0_be74 = load i32, i32* %r1.global-to-local, align 4
  %v1_be74 = add i32 %v0_be74, 13
  %v2_be74 = inttoptr i32 %v1_be74 to i8*
  %v3_be74 = load i8, i8* %v2_be74, align 1
  %v4_be74 = zext i8 %v3_be74 to i32
  store i32 %v1_bd64, i32* %r0.global-to-local, align 4
  %v1_be7c = and i32 %v4_be74, 239
  %v5_be80 = or i32 %v1_be7c, %v4_be80
  store i32 %v5_be80, i32* %r3.global-to-local, align 4
  %v1_be84 = trunc i32 %v5_be80 to i8
  store i8 %v1_be84, i8* %v2_be74, align 1
  %v0_be88 = load i32, i32* %r1.global-to-local, align 4
  %v1_be88 = add i32 %v0_be88, 13
  %v2_be88 = inttoptr i32 %v1_be88 to i8*
  %v3_be88 = load i8, i8* %v2_be88, align 1
  %v4_be88 = zext i8 %v3_be88 to i32
  store i32 %v1_bd88, i32* %r3.global-to-local, align 4
  %v1_be90 = and i32 %v4_be88, 247
  %v5_be94 = or i32 %v1_be90, %v4_be94
  store i32 %v5_be94, i32* %r2.global-to-local, align 4
  %v0_be98 = load i32, i32* %r5.global-to-local, align 4
  %v1_be98 = trunc i32 %v0_be98 to i16
  %v3_be98 = add i32 %v0_be88, 2
  %v4_be98 = inttoptr i32 %v3_be98 to i16*
  store i16 %v1_be98, i16* %v4_be98, align 2
  %v0_be9c = load i32, i32* %r2.global-to-local, align 4
  %v1_be9c = trunc i32 %v0_be9c to i8
  %v2_be9c = load i32, i32* %r1.global-to-local, align 4
  %v3_be9c = add i32 %v2_be9c, 13
  %v4_be9c = inttoptr i32 %v3_be9c to i8*
  store i8 %v1_be9c, i8* %v4_be9c, align 1
  %v0_bea0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bea0 = add i32 %v0_bea0, 13
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bd8c, i32* %r0.global-to-local, align 4
  %v1_bea8 = and i32 %v4_bea0, 251
  %v5_beac = or i32 %v1_bea8, %v4_beac
  store i32 %v5_beac, i32* %r3.global-to-local, align 4
  %v1_beb0 = trunc i32 %v5_beac to i8
  store i8 %v1_beb0, i8* %v2_bea0, align 1
  %v0_beb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_beb4 = add i32 %v0_beb4, 13
  %v2_beb4 = inttoptr i32 %v1_beb4 to i8*
  %v3_beb4 = load i8, i8* %v2_beb4, align 1
  %v4_beb4 = zext i8 %v3_beb4 to i32
  store i32 %v1_bd90, i32* %r3.global-to-local, align 4
  %v1_bebc = and i32 %v4_beb4, 253
  %v4_bec0 = or i32 %v1_bebc, %v3_bec0
  store i32 %v4_bec0, i32* %r2.global-to-local, align 4
  %v1_bec4 = trunc i32 %v4_bec0 to i8
  store i8 %v1_bec4, i8* %v2_beb4, align 1
  %v0_bec8 = load i32, i32* %r1.global-to-local, align 4
  %v1_bec8 = add i32 %v0_bec8, 13
  %v2_bec8 = inttoptr i32 %v1_bec8 to i8*
  %v3_bec8 = load i8, i8* %v2_bec8, align 1
  %v4_bec8 = zext i8 %v3_bec8 to i32
  store i32 %v1_bd94, i32* %r0.global-to-local, align 4
  %v1_bed0 = and i32 %v4_bec8, 254
  %v2_bed4 = or i32 %v1_bed0, %v1_bd94
  store i32 %v2_bed4, i32* %r3.global-to-local, align 4
  %v1_bed8 = trunc i32 %v2_bed4 to i8
  store i8 %v1_bed8, i8* %v2_bec8, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_bee4 = load i32, i32* %r4.global-to-local, align 4
  %v3_bee4 = add i32 %v2_bee4, 40
  %v4_bee4 = inttoptr i32 %v3_bee4 to i8*
  store i8 2, i8* %v4_bee4, align 1
  %v0_bee8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bee8 = trunc i32 %v0_bee8 to i8
  %v2_bee8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bee8 = add i32 %v2_bee8, 41
  %v4_bee8 = inttoptr i32 %v3_bee8 to i8*
  store i8 %v1_bee8, i8* %v4_bee8, align 1
  %v0_beec = call i32 @function_ee68()
  %v1_bef0 = urem i32 %v0_beec, 16
  %v1_bef4 = or i32 %v1_bef0, 1392
  %tmp67 = mul nuw nsw i32 %v1_bef4, 256
  %v3_bf00 = add nuw nsw i32 %tmp67, 2048
  %v5_bf08 = or i32 %v3_bf00, 5
  %v1_bf0c = trunc i32 %v5_bf08 to i16
  %v2_bf0c = load i32, i32* %r4.global-to-local, align 4
  %v3_bf0c = add i32 %v2_bf0c, 42
  %v4_bf0c = inttoptr i32 %v3_bf0c to i16*
  store i16 %v1_bf0c, i16* %v4_bf0c, align 2
  %v2_bf14 = load i32, i32* %r4.global-to-local, align 4
  %v3_bf14 = add i32 %v2_bf14, 44
  %v4_bf14 = inttoptr i32 %v3_bf14 to i8*
  store i8 4, i8* %v4_bf14, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_bf24 = load i32, i32* %r4.global-to-local, align 4
  %v3_bf24 = add i32 %v2_bf24, 46
  %v4_bf24 = inttoptr i32 %v3_bf24 to i8*
  store i8 8, i8* %v4_bf24, align 1
  %v0_bf28 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf28 = trunc i32 %v0_bf28 to i8
  %v2_bf28 = load i32, i32* %r4.global-to-local, align 4
  %v3_bf28 = add i32 %v2_bf28, 47
  %v4_bf28 = inttoptr i32 %v3_bf28 to i8*
  store i8 %v1_bf28, i8* %v4_bf28, align 1
  %v0_bf2c = load i32, i32* %r0.global-to-local, align 4
  %v1_bf2c = trunc i32 %v0_bf2c to i8
  %v2_bf2c = load i32, i32* %r4.global-to-local, align 4
  %v3_bf2c = add i32 %v2_bf2c, 45
  %v4_bf2c = inttoptr i32 %v3_bf2c to i8*
  store i8 %v1_bf2c, i8* %v4_bf2c, align 1
  %v0_bf30 = call i32 @function_ee68()
  store i32 %v0_bf30, i32* %r0.global-to-local, align 4
  %v2_bf38 = load i32, i32* %r4.global-to-local, align 4
  %v3_bf38 = add i32 %v2_bf38, 59
  %v4_bf38 = inttoptr i32 %v3_bf38 to i8*
  store i8 6, i8* %v4_bf38, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_bf48 = load i32, i32* %r4.global-to-local, align 4
  %v2_bf48 = add i32 %v1_bf48, 48
  %v3_bf48 = inttoptr i32 %v2_bf48 to i32*
  store i32 %v0_bf30, i32* %v3_bf48, align 4
  %v0_bf4c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf4c = load i32, i32* %r4.global-to-local, align 4
  %v2_bf4c = add i32 %v1_bf4c, 52
  %v3_bf4c = inttoptr i32 %v2_bf4c to i32*
  store i32 %v0_bf4c, i32* %v3_bf4c, align 4
  %v0_bf50 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf50 = trunc i32 %v0_bf50 to i8
  %v2_bf50 = load i32, i32* %r4.global-to-local, align 4
  %v3_bf50 = add i32 %v2_bf50, 56
  %v4_bf50 = inttoptr i32 %v3_bf50 to i8*
  store i8 %v1_bf50, i8* %v4_bf50, align 1
  %v0_bf54 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf54 = trunc i32 %v0_bf54 to i8
  %v2_bf54 = load i32, i32* %r4.global-to-local, align 4
  %v3_bf54 = add i32 %v2_bf54, 58
  %v4_bf54 = inttoptr i32 %v3_bf54 to i8*
  store i8 %v1_bf54, i8* %v4_bf54, align 1
  %v0_bf58 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf58 = trunc i32 %v0_bf58 to i8
  %v2_bf58 = load i32, i32* %r4.global-to-local, align 4
  %v3_bf58 = add i32 %v2_bf58, 57
  %v4_bf58 = inttoptr i32 %v3_bf58 to i8*
  store i8 %v1_bf58, i8* %v4_bf58, align 1
  %v3_bf5c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf5c, i32* %r3.global-to-local, align 4
  %v1_bf60 = load i32, i32* %r2.global-to-local, align 4
  %v2_bf60 = add i32 %v1_bf60, %v3_bf5c
  store i32 %v2_bf60, i32* %r4.global-to-local, align 4
  %v1_bf64 = load i32, i32* @r7, align 4
  %v9_bf64 = icmp eq i32 %v2_bf60, %v1_bf64
  store i1 %v9_bf64, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_bf60, i32* %stack_var_-44, align 4
  %v5_bf6c = icmp slt i32 %v2_bf60, %v1_bf64
  br i1 %v5_bf6c, label %dec_label_pc_bdb4, label %dec_label_pc_bf70.preheader

dec_label_pc_bf70.preheader:                      ; preds = %bb62, %dec_label_pc_bce4
  %v0_bf747 = phi i32 [ 0, %dec_label_pc_bce4 ], [ %v1_bf64, %bb62 ]
  %v3_c0ec = icmp eq i32 %v6_bc98, -1
  %v3_bfbc = icmp eq i32 %v3_bd00, 65535
  br label %dec_label_pc_bf70

dec_label_pc_bf70:                                ; preds = %dec_label_pc_bf70, %dec_label_pc_c080, %dec_label_pc_bf70.preheader
  %v0_bf74 = phi i32 [ %v0_bf747, %dec_label_pc_bf70.preheader ], [ 0, %dec_label_pc_c080 ], [ 0, %dec_label_pc_bf70 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf74 = icmp eq i32 %v0_bf74, 0
  store i1 %v2_bf74, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf74, label %dec_label_pc_bf70, label %dec_label_pc_bf80

dec_label_pc_bf80:                                ; preds = %dec_label_pc_bf70, %dec_label_pc_c080
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bffc, %dec_label_pc_bf80
  %v1_bf94 = phi i32 [ %v1_c070, %dec_label_pc_bffc ], [ 0, %dec_label_pc_bf80 ]
  %v5_bf88 = mul i32 %v1_bf94, 24
  %v1_bf8c = load i32, i32* @r8, align 4
  %v2_bf8c = add i32 %v1_bf8c, %v5_bf88
  store i32 %v2_bf8c, i32* %r3.global-to-local, align 4
  %v1_bf90 = add i32 %v2_bf8c, 20
  %v2_bf90 = inttoptr i32 %v1_bf90 to i8*
  %v3_bf90 = load i8, i8* %v2_bf90, align 1
  %v4_bf90 = zext i8 %v3_bf90 to i32
  store i32 %v4_bf90, i32* %r2.global-to-local, align 4
  %v0_bf94 = load i32, i32* %sb.global-to-local, align 4
  %v4_bf94 = mul i32 %v1_bf94, 4
  %v5_bf94 = add i32 %v0_bf94, %v4_bf94
  %v6_bf94 = inttoptr i32 %v5_bf94 to i32*
  %v7_bf94 = load i32, i32* %v6_bf94, align 4
  store i32 %v7_bf94, i32* @r5, align 4
  %v7_bf98 = icmp eq i8 %v3_bf90, 31
  store i1 %v7_bf98, i1* %cpsr_z.global-to-local, align 1
  %v1_bf9c = add i32 %v7_bf94, 20
  store i32 %v1_bf9c, i32* @r6, align 4
  %tmp68 = icmp ult i8 %v3_bf90, 32
  br i1 %tmp68, label %dec_label_pc_c094, label %dec_label_pc_bfa4

dec_label_pc_bfa4:                                ; preds = %dec_label_pc_bf84
  store i32 %v6_bc98, i32* %r3.global-to-local, align 4
  store i1 %v3_c0ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c0ec, label %dec_label_pc_c0f4, label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_c094, %dec_label_pc_bfa4
  store i32 %v3_bd00, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bfbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bfbc, label %dec_label_pc_c110, label %dec_label_pc_bfc4

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_c0f4, %dec_label_pc_bfb0
  %v1_bfc8 = phi i32 [ %v1_c104, %dec_label_pc_c0f4 ], [ 65535, %dec_label_pc_bfb0 ]
  store i32 %v3_bd04, i32* %r1.global-to-local, align 4
  %v9_bfc8 = icmp eq i32 %v3_bd04, %v1_bfc8
  store i1 %v9_bfc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfc8, label %dec_label_pc_c124, label %dec_label_pc_bfd0

dec_label_pc_bfd0:                                ; preds = %dec_label_pc_c110.dec_label_pc_bfd0_crit_edge, %dec_label_pc_bfc4
  %v1_bfd4 = phi i32 [ %v1_bfd4.pre, %dec_label_pc_c110.dec_label_pc_bfd0_crit_edge ], [ %v1_bfc8, %dec_label_pc_bfc4 ]
  store i32 %v3_bd08, i32* %r2.global-to-local, align 4
  %v9_bfd4 = icmp eq i32 %v3_bd08, %v1_bfd4
  store i1 %v9_bfd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfd4, label %dec_label_pc_c138, label %dec_label_pc_bfdc

dec_label_pc_bfdc:                                ; preds = %dec_label_pc_c124.dec_label_pc_bfdc_crit_edge, %dec_label_pc_bfd0
  %v1_bfe0 = phi i32 [ %v1_bfe0.pre, %dec_label_pc_c124.dec_label_pc_bfdc_crit_edge ], [ %v1_bfd4, %dec_label_pc_bfd0 ]
  store i32 %v6_bbd4, i32* %r3.global-to-local, align 4
  %v9_bfe0 = icmp eq i32 %v6_bbd4, %v1_bfe0
  store i1 %v9_bfe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfe0, label %dec_label_pc_c14c, label %dec_label_pc_bfe8

dec_label_pc_bfe8:                                ; preds = %dec_label_pc_c138.dec_label_pc_bfe8_crit_edge, %dec_label_pc_bfdc
  %v1_bfec = phi i32 [ %v1_bfec.pre, %dec_label_pc_c138.dec_label_pc_bfe8_crit_edge ], [ %v1_bfe0, %dec_label_pc_bfdc ]
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v9_bfec = icmp eq i32 %v6_bbec, %v1_bfec
  store i1 %v9_bfec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfec, label %dec_label_pc_c160, label %dec_label_pc_bff4

dec_label_pc_bff4:                                ; preds = %dec_label_pc_c14c, %dec_label_pc_bfe8
  %v0_bff4 = load i32, i32* %fp.global-to-local, align 4
  %v2_bff4 = icmp eq i32 %v0_bff4, 0
  store i1 %v2_bff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bff4, label %dec_label_pc_bffc, label %dec_label_pc_c170

dec_label_pc_bffc:                                ; preds = %dec_label_pc_bff4, %dec_label_pc_c160, %dec_label_pc_c170
  %v2_c000 = load i32, i32* @r5, align 4
  %v3_c000 = add i32 %v2_c000, 10
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 0, i16* %v4_c000, align 2
  %v0_c004 = load i32, i32* @r5, align 4
  store i32 %v0_c004, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c00c = call i32 @function_d414(i32 %v0_c004, i32 20)
  %v3_c00c = trunc i32 %v2_c00c to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c014 = load i32, i32* @r5, align 4
  %v4_c014 = add i32 %v3_c014, 10
  %v5_c014 = inttoptr i32 %v4_c014 to i16*
  store i16 %v3_c00c, i16* %v5_c014, align 2
  %v0_c018 = load i32, i32* @r6, align 4
  store i32 %v0_c018, i32* @r1, align 4
  %v0_c01c = load i32, i32* %r2.global-to-local, align 4
  %v1_c01c = trunc i32 %v0_c01c to i16
  %v3_c01c = add i32 %v0_c018, 16
  %v4_c01c = inttoptr i32 %v3_c01c to i16*
  store i16 %v1_c01c, i16* %v4_c01c, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c028 = load i32, i32* @r5, align 4
  store i32 %v0_c028, i32* %r0.global-to-local, align 4
  %v4_c02c = call i32 @function_d464(i32 %v0_c028, i32 %v0_c018, i32 10240, i32 40)
  %v5_c02c = trunc i32 %v4_c02c to i16
  store i32 %v4_c02c, i32* %r0.global-to-local, align 4
  %v3_c030 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c030, i32* %r3.global-to-local, align 4
  %v3_c034 = mul i32 %v3_c030, 32
  store i32 %v3_c034, i32* %lr.global-to-local, align 4
  %v3_c038 = load i32, i32* @r6, align 4
  %v4_c038 = add i32 %v3_c038, 16
  %v5_c038 = inttoptr i32 %v4_c038 to i16*
  store i16 %v5_c02c, i16* %v5_c038, align 2
  %v0_c03c = load i32, i32* %lr.global-to-local, align 4
  %v1_c03c = load i32, i32* %r3.global-to-local, align 4
  %tmp69 = mul i32 %v1_c03c, -8
  %v5_c03c = add i32 %v0_c03c, %tmp69
  store i32 %v5_c03c, i32* %lr.global-to-local, align 4
  %v0_c040 = load i32, i32* @r6, align 4
  %v1_c040 = add i32 %v0_c040, 2
  %v2_c040 = inttoptr i32 %v1_c040 to i16*
  %v3_c040 = load i16, i16* %v2_c040, align 2
  %v4_c040 = zext i16 %v3_c040 to i32
  store i32 %v4_c040, i32* %r6.global-to-local, align 4
  %v1_c044 = load i32, i32* @r8, align 4
  %v2_c044 = add i32 %v1_c044, %v5_c03c
  store i32 %v2_c044, i32* @lr, align 4
  %v3_c048 = add i32 %v2_c044, 2
  %v4_c048 = inttoptr i32 %v3_c048 to i16*
  store i16 %v3_c040, i16* %v4_c048, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c054 = load i32, i32* @r5, align 4
  store i32 %v0_c054, i32* %r1.global-to-local, align 4
  %v0_c058 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_c058, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c060 = load i32, i32* @lr, align 4
  %v4_c060 = inttoptr i32 %v0_c060 to %sockaddr*
  %v7_c068 = inttoptr i32 %v0_c054 to i32*
  %v9_c068 = call i32 @sendto(i32 %v0_c058, i32* %v7_c068, i32 60, i32 16384, %sockaddr* %v4_c060, i32 16)
  %v3_c06c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c06c, i32* %r3.global-to-local, align 4
  %v1_c070 = add i32 %v3_c06c, 1
  store i32 %v1_c070, i32* %r0.global-to-local, align 4
  %v1_c074 = load i32, i32* @r7, align 4
  %v9_c074 = icmp eq i32 %v1_c070, %v1_c074
  store i1 %v9_c074, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c070, i32* %stack_var_-44, align 4
  %v5_c07c = icmp slt i32 %v1_c070, %v1_c074
  br i1 %v5_c07c, label %dec_label_pc_bf84, label %dec_label_pc_c080

dec_label_pc_c080:                                ; preds = %dec_label_pc_bffc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c084 = icmp eq i32 %v1_c074, 0
  store i1 %v2_c084, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c084, label %dec_label_pc_bf70, label %dec_label_pc_bf80

dec_label_pc_c094:                                ; preds = %dec_label_pc_bf84
  %v1_c094 = add i32 %v2_bf8c, 16
  %v2_c094 = inttoptr i32 %v1_c094 to i32*
  %v3_c094 = load i32, i32* %v2_c094, align 4
  store i32 %v3_c094, i32* %r4.global-to-local, align 4
  %v0_c098 = call i32 @function_ee68()
  store i32 %v0_c098, i32* %r0.global-to-local, align 4
  %v3_c09c = load i32, i32* %stack_var_-44, align 4
  %v5_c0a4 = mul i32 %v3_c09c, 24
  %v0_c0a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c0a8 = and i32 %v0_c0a8, 16711680
  %v3_c0ac = udiv i32 %v0_c0a8, 16777216
  %v4_c0b0 = udiv i32 %v1_c0a8, 256
  %v5_c0b0 = or i32 %v4_c0b0, %v3_c0ac
  store i32 %v5_c0b0, i32* %r2.global-to-local, align 4
  %v1_c0b4 = load i32, i32* @r8, align 4
  %v2_c0b4 = add i32 %v1_c0b4, %v5_c0a4
  store i32 %v2_c0b4, i32* %r1.global-to-local, align 4
  %v1_c0b8 = and i32 %v0_c0a8, 65280
  store i32 %v1_c0b8, i32* %r3.global-to-local, align 4
  %v1_c0bc = add i32 %v2_c0b4, 20
  %v2_c0bc = inttoptr i32 %v1_c0bc to i8*
  %v3_c0bc = load i8, i8* %v2_c0bc, align 1
  %v4_c0bc = zext i8 %v3_c0bc to i32
  %v5_c0c4 = call i32 @llvm.bswap.i32(i32 %v0_c0a8)
  %v7_c0c8 = lshr i32 %v0_c098, %v4_c0bc
  %v8_c0c8 = add i32 %v7_c0c8, %v5_c0c4
  store i32 %v8_c0c8, i32* %r2.global-to-local, align 4
  %v1_c0cc = and i32 %v8_c0c8, 16711680
  store i32 %v1_c0cc, i32* %r0.global-to-local, align 4
  %v1_c0d8 = and i32 %v8_c0c8, 65280
  store i32 %v1_c0d8, i32* %r1.global-to-local, align 4
  %v5_c0e0 = call i32 @llvm.bswap.i32(i32 %v8_c0c8)
  %v1_c0e4 = load i32, i32* @r5, align 4
  %v2_c0e4 = add i32 %v1_c0e4, 16
  %v3_c0e4 = inttoptr i32 %v2_c0e4 to i32*
  store i32 %v5_c0e0, i32* %v3_c0e4, align 4
  store i32 %v6_bc98, i32* %r3.global-to-local, align 4
  store i1 %v3_c0ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c0ec, label %dec_label_pc_c0f4, label %dec_label_pc_bfb0

dec_label_pc_c0f4:                                ; preds = %dec_label_pc_c094, %dec_label_pc_bfa4
  %v0_c0f4 = call i32 @function_ee68()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r5, align 4
  %v2_c0fc = add i32 %v1_c0fc, 12
  %v3_c0fc = inttoptr i32 %v2_c0fc to i32*
  store i32 %v0_c0f4, i32* %v3_c0fc, align 4
  store i32 %v3_bd00, i32* %r0.global-to-local, align 4
  %v0_c104 = load i32, i32* %r4.global-to-local, align 4
  %v1_c104 = add i32 %v0_c104, -1
  store i32 %v1_c104, i32* @r4, align 4
  %v9_c108 = icmp eq i32 %v3_bd00, %v1_c104
  store i1 %v9_c108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c108, label %dec_label_pc_c110, label %dec_label_pc_bfc4

dec_label_pc_c110:                                ; preds = %dec_label_pc_c0f4, %dec_label_pc_bfb0
  %v0_c110 = call i32 @function_ee68()
  %v1_c110 = trunc i32 %v0_c110 to i16
  store i32 %v0_c110, i32* %r0.global-to-local, align 4
  store i32 %v3_bd04, i32* %r1.global-to-local, align 4
  %v1_c118 = load i32, i32* @r4, align 4
  %v9_c118 = icmp eq i32 %v3_bd04, %v1_c118
  store i1 %v9_c118, i1* %cpsr_z.global-to-local, align 1
  %v3_c11c = load i32, i32* @r5, align 4
  %v4_c11c = add i32 %v3_c11c, 4
  %v5_c11c = inttoptr i32 %v4_c11c to i16*
  store i16 %v1_c110, i16* %v5_c11c, align 2
  br i1 %v9_c118, label %dec_label_pc_c124, label %dec_label_pc_c110.dec_label_pc_bfd0_crit_edge

dec_label_pc_c110.dec_label_pc_bfd0_crit_edge:    ; preds = %dec_label_pc_c110
  %v1_bfd4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfd0

dec_label_pc_c124:                                ; preds = %dec_label_pc_c110, %dec_label_pc_bfc4
  %v0_c124 = call i32 @function_ee68()
  %v1_c124 = trunc i32 %v0_c124 to i16
  store i32 %v0_c124, i32* %r0.global-to-local, align 4
  store i32 %v3_bd08, i32* %r2.global-to-local, align 4
  %v1_c12c = load i32, i32* @r4, align 4
  %v9_c12c = icmp eq i32 %v3_bd08, %v1_c12c
  store i1 %v9_c12c, i1* %cpsr_z.global-to-local, align 1
  %v3_c130 = load i32, i32* @r5, align 4
  %v4_c130 = add i32 %v3_c130, 20
  %v5_c130 = inttoptr i32 %v4_c130 to i16*
  store i16 %v1_c124, i16* %v5_c130, align 2
  br i1 %v9_c12c, label %dec_label_pc_c138, label %dec_label_pc_c124.dec_label_pc_bfdc_crit_edge

dec_label_pc_c124.dec_label_pc_bfdc_crit_edge:    ; preds = %dec_label_pc_c124
  %v1_bfe0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfdc

dec_label_pc_c138:                                ; preds = %dec_label_pc_c124, %dec_label_pc_bfd0
  %v0_c138 = call i32 @function_ee68()
  %v1_c138 = trunc i32 %v0_c138 to i16
  store i32 %v0_c138, i32* %r0.global-to-local, align 4
  store i32 %v6_bbd4, i32* %r3.global-to-local, align 4
  %v1_c140 = load i32, i32* @r4, align 4
  %v9_c140 = icmp eq i32 %v6_bbd4, %v1_c140
  store i1 %v9_c140, i1* %cpsr_z.global-to-local, align 1
  %v3_c144 = load i32, i32* @r6, align 4
  %v4_c144 = add i32 %v3_c144, 2
  %v5_c144 = inttoptr i32 %v4_c144 to i16*
  store i16 %v1_c138, i16* %v5_c144, align 2
  br i1 %v9_c140, label %dec_label_pc_c14c, label %dec_label_pc_c138.dec_label_pc_bfe8_crit_edge

dec_label_pc_c138.dec_label_pc_bfe8_crit_edge:    ; preds = %dec_label_pc_c138
  %v1_bfec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfe8

dec_label_pc_c14c:                                ; preds = %dec_label_pc_c138, %dec_label_pc_bfdc
  %v0_c14c = call i32 @function_ee68()
  %v1_c150 = load i32, i32* @r6, align 4
  %v2_c150 = add i32 %v1_c150, 4
  %v3_c150 = inttoptr i32 %v2_c150 to i32*
  store i32 %v0_c14c, i32* %v3_c150, align 4
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v1_c158 = load i32, i32* @r4, align 4
  %v9_c158 = icmp eq i32 %v6_bbec, %v1_c158
  store i1 %v9_c158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c158, label %dec_label_pc_c160, label %dec_label_pc_bff4

dec_label_pc_c160:                                ; preds = %dec_label_pc_c14c, %dec_label_pc_bfe8
  %v0_c160 = call i32 @function_ee68()
  store i32 %v0_c160, i32* %r0.global-to-local, align 4
  %v0_c164 = load i32, i32* %fp.global-to-local, align 4
  %v2_c164 = icmp eq i32 %v0_c164, 0
  store i1 %v2_c164, i1* %cpsr_z.global-to-local, align 1
  %v1_c168 = load i32, i32* @r6, align 4
  %v2_c168 = add i32 %v1_c168, 8
  %v3_c168 = inttoptr i32 %v2_c168 to i32*
  store i32 %v0_c160, i32* %v3_c168, align 4
  br i1 %v2_c164, label %dec_label_pc_bffc, label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_bff4, %dec_label_pc_c160
  %v0_c170 = call i32 @function_ee68()
  %v1_c170 = trunc i32 %v0_c170 to i16
  store i32 %v0_c170, i32* %r0.global-to-local, align 4
  %v3_c174 = load i32, i32* @r6, align 4
  %v4_c174 = add i32 %v3_c174, 18
  %v5_c174 = inttoptr i32 %v4_c174 to i16*
  store i16 %v1_c170, i16* %v5_c174, align 2
  br label %dec_label_pc_bffc

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bcbc
  %v0_c17c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_c17c, i32* %r0.global-to-local, align 4
  %v1_c180 = call i32 @close(i32 %v0_c17c)
  store i32 %v1_c180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c184

dec_label_pc_c184:                                ; preds = %dec_label_pc_bae8, %dec_label_pc_c17c
  %v1_c18c = phi i32 [ -1, %dec_label_pc_bae8 ], [ %v1_c180, %dec_label_pc_c17c ]
  store i32 %v3_bae8, i32* %r4.global-to-local, align 4
  store i32 %v6_bae8, i32* %r5.global-to-local, align 4
  store i32 %v9_bae8, i32* %r6.global-to-local, align 4
  store i32 %v27_bae8, i32* %lr.global-to-local, align 4
  ret i32 %v1_c18c

; uselistorder directives
  uselistorder i32 %v0_c170, { 1, 0 }
  uselistorder i32 %v0_c138, { 1, 0 }
  uselistorder i32 %v0_c124, { 1, 0 }
  uselistorder i32 %v0_c110, { 1, 0 }
  uselistorder i32 %v1_c104, { 1, 2, 0 }
  uselistorder i32 %v0_c0a8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c070, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c03c, { 1, 0 }
  uselistorder i32 %v4_c02c, { 1, 0 }
  uselistorder i1 %v3_bfbc, { 1, 0 }
  uselistorder i1 %v3_c0ec, { 3, 2, 1, 0 }
  uselistorder i32 %v2_bf60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bdc8, { 1, 2, 0 }
  uselistorder i32 %v1_bd94, { 2, 1, 0 }
  uselistorder i32 %v1_bd90, { 2, 0, 1 }
  uselistorder i32 %v1_bd8c, { 2, 0, 1 }
  uselistorder i32 %v1_bd88, { 2, 0, 1 }
  uselistorder i32 %v1_bd64, { 1, 0 }
  uselistorder i32 %v3_bd00, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_bcf4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_bcf0, { 1, 0, 3, 2 }
  uselistorder i32 %v6_bc98, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v6_bbec, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_bbd4, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_bb60, { 1, 0 }
  uselistorder i32 %v6_bb58, { 1, 0 }
  uselistorder i32 %v7_bb40, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 30, 29, 34, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 24, 23, 26, 25, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 5, 3, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 38, 41, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 49, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 16, 17, 18 }
  uselistorder i32 52, { 1, 0 }
  uselistorder label %dec_label_pc_c184, { 1, 0 }
  uselistorder label %dec_label_pc_c170, { 1, 0 }
  uselistorder label %dec_label_pc_bffc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf80, { 1, 0 }
  uselistorder label %dec_label_pc_bf70, { 1, 0, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
}

define i32 @function_c194(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c194:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_c194 = load i32, i32* @r4, align 4
  %v9_c194 = load i32, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1b0 = call i32* @calloc(i32 4, i32 4)
  %v4_c1b0 = ptrtoint i32* %v2_c1b0 to i32
  store i32 %v4_c1b0, i32* @sl, align 4
  %v0_c1bc = load i32, i32* @r7, align 4
  %v2_c1c0 = call i32* @calloc(i32 %v0_c1bc, i32 4)
  %v3_c1c0 = ptrtoint i32* %v2_c1c0 to i32
  store i32 65535, i32* @r4, align 4
  %v0_c1cc = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v3_c1c0, i32* @r8, align 4
  %v0_c1dc = load i32, i32* @r5, align 4
  %v5_c1e0 = inttoptr i32 %v0_c1cc to i32*
  %v6_c1e0 = call i32 @function_913c(i32 %v0_c1dc, i32* %v5_c1e0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_c1e8 = urem i32 %v6_c1e0, 65536
  %v0_c1ec = load i32, i32* @r6, align 4
  %v0_c1f4 = load i32, i32* @r4, align 4
  store i32 %v0_c1f4, i32* %r3.global-to-local, align 4
  %v0_c1f8 = load i32, i32* @r5, align 4
  %v5_c200 = inttoptr i32 %v0_c1ec to i32*
  %v6_c200 = call i32 @function_913c(i32 %v0_c1f8, i32* %v5_c200, i32 6, i32 %v0_c1f4, i32 %v3_c1e8)
  %v0_c204 = load i32, i32* @r6, align 4
  %v3_c208 = mul i32 %v6_c200, 65536
  store i32 %v3_c208, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c214 = load i32, i32* @r5, align 4
  %v5_c218 = inttoptr i32 %v0_c204 to i32*
  %v6_c218 = call i32 @function_913c(i32 %v0_c214, i32* %v5_c218, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c228 = load i32, i32* @r6, align 4
  %v0_c22c = load i32, i32* @r5, align 4
  %v3_c230 = urem i32 %v6_c218, 65536
  store i32 %v3_c230, i32* @r5, align 4
  %v5_c234 = inttoptr i32 %v0_c228 to i32*
  %v6_c234 = call i32 @function_913c(i32 %v0_c22c, i32* %v5_c234, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_c238 = load i32, i32* %sb.global-to-local, align 4
  %v3_c238 = udiv i32 %v0_c238, 65536
  store i32 %v3_c238, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_c240 = load i32, i32* @r4, align 4
  %v9_c240 = icmp eq i32 %v3_c238, %v1_c240
  br i1 %v9_c240, label %dec_label_pc_c270, label %bb

bb:                                               ; preds = %dec_label_pc_c194
  store i32 0, i32* %stack_var_-56, align 4
  %v4_c258 = udiv i32 %v0_c238, 16777216
  store i32 %v4_c258, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c280

dec_label_pc_c270:                                ; preds = %dec_label_pc_c194
  store i32 0, i32* %stack_var_-56, align 4
  %v0_c270 = call i32 @function_ee68()
  br label %dec_label_pc_c280

dec_label_pc_c280:                                ; preds = %bb, %dec_label_pc_c270
  %v0_c26410 = urem i32 %v6_c234, 256
  %v0_c280 = load i32, i32* @r7, align 4
  %v2_c280 = icmp eq i32 %v0_c280, 0
  br i1 %v2_c280, label %dec_label_pc_c3c0, label %dec_label_pc_c288

dec_label_pc_c288:                                ; preds = %dec_label_pc_c280
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v3_c334 = udiv i32 %v3_c1e8, 256
  %v1_c330 = mul i32 %v6_c1e0, 256
  %v4_c338 = and i32 %v1_c330, 65280
  %v5_c338 = or i32 %v4_c338, %v3_c334
  %tmp51 = bitcast i32* %stack_var_-56 to %sockaddr*
  br label %dec_label_pc_c318

dec_label_pc_c298:                                ; preds = %bb52, %dec_label_pc_c358
  %v3_c2a4 = call i32 @socket(i32 2, i32 17, i32 17)
  %v2_c2ac = icmp eq i32 %v3_c2a4, -1
  %v0_c2b0 = load i32, i32* %sb.global-to-local, align 4
  %v1_c2b0 = add i32 %v0_c2b0, 1
  store i32 %v1_c2b0, i32* %sb.global-to-local, align 4
  %v0_c2b4 = load i32, i32* %fp.global-to-local, align 4
  %v1_c2b4 = add i32 %v0_c2b4, 24
  store i32 %v1_c2b4, i32* %fp.global-to-local, align 4
  %v2_c2c0 = load i32, i32* @r8, align 4
  %v3_c2c0 = add i32 %v2_c2c0, %stack_var_-60.0
  %v4_c2c0 = inttoptr i32 %v3_c2c0 to i32*
  store i32 %v3_c2a4, i32* %v4_c2c0, align 4
  br i1 %v2_c2ac, label %dec_label_pc_c3b4, label %dec_label_pc_c2c8

dec_label_pc_c2c8:                                ; preds = %dec_label_pc_c298
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v5_c2e0 = call i32 @bind(i32 %v3_c2a4, %sockaddr* %tmp51, i32 16)
  %v0_c2e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_c2e4 = add i32 %v0_c2e4, 20
  %v2_c2e4 = inttoptr i32 %v1_c2e4 to i8*
  %v3_c2e4 = load i8, i8* %v2_c2e4, align 1
  %v4_c2e4 = zext i8 %v3_c2e4 to i32
  store i32 %v4_c2e4, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_c2e4, 32
  br i1 %tmp, label %dec_label_pc_c36c, label %dec_label_pc_c2f0

dec_label_pc_c2f0:                                ; preds = %dec_label_pc_c2c8, %dec_label_pc_c36c
  %v0_c2f4 = phi i32 [ %v0_c2e4, %dec_label_pc_c2c8 ], [ %v0_c2f4.pre, %dec_label_pc_c36c ]
  %v1_c2f4 = inttoptr i32 %v0_c2f4 to %sockaddr*
  %v1_c2f8 = load i32, i32* @r8, align 4
  %v2_c2f8 = add i32 %v1_c2f8, %stack_var_-60.0
  %v3_c2f8 = inttoptr i32 %v2_c2f8 to i32*
  %v4_c2f8 = load i32, i32* %v3_c2f8, align 4
  %v5_c300 = call i32 @connect(i32 %v4_c2f8, %sockaddr* %v1_c2f4, i32 16)
  %v0_c308 = load i32, i32* %sb.global-to-local, align 4
  %v1_c308 = load i32, i32* @r7, align 4
  %v9_c308 = icmp eq i32 %v0_c308, %v1_c308
  %v1_c30c = add i32 %stack_var_-60.0, 4
  store i32 %v1_c30c, i32* %r3.global-to-local, align 4
  br i1 %v9_c308, label %dec_label_pc_c3c0, label %dec_label_pc_c318

dec_label_pc_c318:                                ; preds = %dec_label_pc_c2f0, %dec_label_pc_c288
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_c288 ], [ %v1_c30c, %dec_label_pc_c2f0 ]
  store i32 65535, i32* %r4.global-to-local, align 4
  %v2_c328 = call i32* @calloc(i32 65535, i32 1)
  %v3_c328 = ptrtoint i32* %v2_c328 to i32
  store i32 %v5_c338, i32* %r3.global-to-local, align 4
  %v9_c344 = icmp eq i32 %v3_c1e8, 65535
  %v1_c348 = load i32, i32* %fp.global-to-local, align 4
  %v2_c348 = add i32 %v1_c348, %arg2
  store i32 %v2_c348, i32* %r6.global-to-local, align 4
  %v2_c34c = load i32, i32* @sl, align 4
  %v3_c34c = add i32 %v2_c34c, %stack_var_-60.0
  %v4_c34c = inttoptr i32 %v3_c34c to i32*
  store i32 %v3_c328, i32* %v4_c34c, align 4
  br i1 %v9_c344, label %dec_label_pc_c358, label %bb52

bb52:                                             ; preds = %dec_label_pc_c318
  %v1_c350 = load i32, i32* %r3.global-to-local, align 4
  %v2_c350 = trunc i32 %v1_c350 to i16
  %v3_c350 = load i32, i32* %r6.global-to-local, align 4
  %v4_c350 = add i32 %v3_c350, 2
  %v5_c350 = inttoptr i32 %v4_c350 to i16*
  store i16 %v2_c350, i16* %v5_c350, align 2
  br label %dec_label_pc_c298

dec_label_pc_c358:                                ; preds = %dec_label_pc_c318
  %v0_c358 = call i32 @function_ee68()
  %v1_c358 = trunc i32 %v0_c358 to i16
  %v0_c360 = load i32, i32* %fp.global-to-local, align 4
  %v2_c360 = add i32 %v0_c360, %arg2
  store i32 %v2_c360, i32* %r6.global-to-local, align 4
  %v4_c364 = add i32 %v2_c360, 2
  %v5_c364 = inttoptr i32 %v4_c364 to i16*
  store i16 %v1_c358, i16* %v5_c364, align 2
  br label %dec_label_pc_c298

dec_label_pc_c36c:                                ; preds = %dec_label_pc_c2c8
  %v1_c36c = add i32 %v0_c2e4, 16
  %v2_c36c = inttoptr i32 %v1_c36c to i32*
  %v3_c36c = load i32, i32* %v2_c36c, align 4
  store i32 %v3_c36c, i32* %r4.global-to-local, align 4
  %v0_c370 = call i32 @function_ee68()
  %v1_c380 = and i32 %v3_c36c, 65280
  store i32 %v1_c380, i32* %r3.global-to-local, align 4
  %v0_c388 = load i32, i32* %r6.global-to-local, align 4
  %v1_c388 = add i32 %v0_c388, 20
  %v2_c388 = inttoptr i32 %v1_c388 to i8*
  %v3_c388 = load i8, i8* %v2_c388, align 1
  %v4_c388 = zext i8 %v3_c388 to i32
  %v5_c38c = call i32 @llvm.bswap.i32(i32 %v3_c36c)
  %v7_c390 = lshr i32 %v0_c370, %v4_c388
  %v8_c390 = add i32 %v7_c390, %v5_c38c
  %v5_c3a8 = call i32 @llvm.bswap.i32(i32 %v8_c390)
  store i32 %v5_c3a8, i32* %r3.global-to-local, align 4
  %v2_c3ac = add i32 %v0_c388, 4
  %v3_c3ac = inttoptr i32 %v2_c3ac to i32*
  store i32 %v5_c3a8, i32* %v3_c3ac, align 4
  %v0_c2f4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c2f0

dec_label_pc_c3b4:                                ; preds = %dec_label_pc_c298
  store i32 %v3_c194, i32* %r4.global-to-local, align 4
  store i32 %v9_c194, i32* %r6.global-to-local, align 4
  ret i32 -1

dec_label_pc_c3c0:                                ; preds = %dec_label_pc_c2f0, %dec_label_pc_c280
  %v1_c40022 = phi i32 [ 0, %dec_label_pc_c280 ], [ %v0_c308, %dec_label_pc_c2f0 ]
  %v2_c3c4 = icmp eq i32 %v0_c26410, 0
  br i1 %v2_c3c4, label %dec_label_pc_c3e4.outer, label %dec_label_pc_c3fc.preheader

dec_label_pc_c3fc.preheader:                      ; preds = %dec_label_pc_c3c0
  %v0_c40458.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c3fc

dec_label_pc_c3d4:                                ; preds = %dec_label_pc_c3e4
  store i32 %v1_c3d8, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c3d4 = load i32, i32* @r8, align 4
  %v4_c3d4 = mul i32 %v1_c3d8, 4
  %v5_c3d4 = add i32 %v0_c3d4, %v4_c3d4
  %v6_c3d4 = inttoptr i32 %v5_c3d4 to i32*
  %v7_c3d4 = load i32, i32* %v6_c3d4, align 4
  %v0_c3d8 = load i32, i32* @sl, align 4
  %v5_c3d8 = add i32 %v0_c3d8, %v4_c3d4
  %v6_c3d8 = inttoptr i32 %v5_c3d8 to i32*
  %v7_c3d8 = load i32, i32* %v6_c3d8, align 4
  %v4_c3dc = inttoptr i32 %v7_c3d8 to i32*
  %v5_c3dc = call i32 @send(i32 %v7_c3d4, i32* %v4_c3dc, i32 %v0_c3e8, i32 16384)
  %v0_c3e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c3e0 = add i32 %v0_c3e0, 1
  %v0_c3e4.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c3e4.outer

dec_label_pc_c3e4.outer:                          ; preds = %dec_label_pc_c3c0, %dec_label_pc_c3d4
  %v0_c3e4.ph = phi i32 [ %v0_c3e4.pre.pre, %dec_label_pc_c3d4 ], [ %v1_c40022, %dec_label_pc_c3c0 ]
  %v1_c3d8.ph = phi i32 [ %v1_c3e0, %dec_label_pc_c3d4 ], [ 0, %dec_label_pc_c3c0 ]
  %v0_c3e8 = load i32, i32* @r5, align 4
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %dec_label_pc_c3e4.outer, %dec_label_pc_c3e4
  %v1_c3d8 = phi i32 [ 0, %dec_label_pc_c3e4 ], [ %v1_c3d8.ph, %dec_label_pc_c3e4.outer ]
  %v8_c3f0 = icmp sgt i32 %v0_c3e4.ph, %v1_c3d8
  br i1 %v8_c3f0, label %dec_label_pc_c3d4, label %dec_label_pc_c3e4

dec_label_pc_c3fc:                                ; preds = %dec_label_pc_c3fc, %dec_label_pc_c40c, %dec_label_pc_c3fc.preheader
  %v0_c40458 = phi i32 [ %v0_c40458.pre, %dec_label_pc_c3fc.preheader ], [ %v0_c40458, %dec_label_pc_c3fc ], [ %v0_c404, %dec_label_pc_c40c ]
  %v1_c40021 = phi i32 [ %v1_c40022, %dec_label_pc_c3fc.preheader ], [ %v1_c40021, %dec_label_pc_c3fc ], [ %v1_c400.pre, %dec_label_pc_c40c ]
  store i32 0, i32* @r6, align 4
  %v6_c40859 = icmp sgt i32 %v1_c40021, 0
  br i1 %v6_c40859, label %dec_label_pc_c40c, label %dec_label_pc_c3fc

dec_label_pc_c40c:                                ; preds = %dec_label_pc_c3fc, %dec_label_pc_c40c
  %v0_c40461 = phi i32 [ %v0_c404, %dec_label_pc_c40c ], [ %v0_c40458, %dec_label_pc_c3fc ]
  %v1_c40c60 = phi i32 [ %v1_c42c, %dec_label_pc_c40c ], [ 0, %dec_label_pc_c3fc ]
  %v0_c40c = load i32, i32* @sl, align 4
  %v4_c40c = mul i32 %v1_c40c60, 4
  %v5_c40c = add i32 %v0_c40c, %v4_c40c
  %v6_c40c = inttoptr i32 %v5_c40c to i32*
  %v7_c40c = load i32, i32* %v6_c40c, align 4
  store i32 %v7_c40c, i32* @r4, align 4
  %v2_c414 = inttoptr i32 %v7_c40c to i16*
  %v3_c414 = call i32 @function_effc(i16* %v2_c414, i32 %v0_c40461)
  %v0_c418 = load i32, i32* @r8, align 4
  %v1_c418 = load i32, i32* @r6, align 4
  %v4_c418 = mul i32 %v1_c418, 4
  %v5_c418 = add i32 %v4_c418, %v0_c418
  %v6_c418 = inttoptr i32 %v5_c418 to i32*
  %v7_c418 = load i32, i32* %v6_c418, align 4
  %v0_c41c = load i32, i32* @r4, align 4
  %v0_c420 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_c428 = inttoptr i32 %v0_c41c to i32*
  %v5_c428 = call i32 @send(i32 %v7_c418, i32* %v4_c428, i32 %v0_c420, i32 16384)
  %v0_c42c = load i32, i32* @r6, align 4
  %v1_c42c = add i32 %v0_c42c, 1
  %v1_c400.pre = load i32, i32* @r7, align 4
  store i32 %v1_c42c, i32* @r6, align 4
  %v0_c404 = load i32, i32* @r5, align 4
  %v6_c408 = icmp slt i32 %v1_c42c, %v1_c400.pre
  br i1 %v6_c408, label %dec_label_pc_c40c, label %dec_label_pc_c3fc

; uselistorder directives
  uselistorder i32 %v0_c404, { 1, 0 }
  uselistorder i32 %v1_c400.pre, { 1, 0 }
  uselistorder i32 %v1_c42c, { 2, 1, 0 }
  uselistorder i32 %v1_c40021, { 1, 0 }
  uselistorder i32 %v1_c3d8, { 2, 1, 0 }
  uselistorder i32 %v5_c3a8, { 1, 0 }
  uselistorder i32 %v3_c36c, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_c2e4, { 1, 0, 2 }
  uselistorder i32 %v3_c238, { 1, 0 }
  uselistorder i32 %v3_c1e8, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 2, 1, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 5, 2, 1, 4, 6, 3, 7 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_c40c, { 1, 0 }
  uselistorder label %dec_label_pc_c3fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c3e4, { 1, 0 }
  uselistorder label %dec_label_pc_c3e4.outer, { 1, 0 }
  uselistorder label %dec_label_pc_c2f0, { 1, 0 }
  uselistorder label %dec_label_pc_c298, { 1, 0 }
  uselistorder label %dec_label_pc_c280, { 1, 0 }
}

define i32 @function_c434(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c434:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c434 = load i32, i32* @r4, align 4
  %v6_c434 = load i32, i32* @r5, align 4
  %v9_c434 = load i32, i32* @r6, align 4
  %v27_c434 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c450 = call i32* @calloc(i32 4, i32 4)
  %v4_c450 = ptrtoint i32* %v2_c450 to i32
  %v0_c454 = load i32, i32* @r5, align 4
  store i32 %v0_c454, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c464 = load i32, i32* @r4, align 4
  store i32 %v0_c464, i32* %r0.global-to-local, align 4
  %v5_c468 = inttoptr i32 %v0_c454 to i32*
  %v6_c468 = call i32 @function_913c(i32 %v0_c464, i32* %v5_c468, i32 2, i32 0, i32 %v4_c450)
  %v1_c474 = urem i32 %v6_c468, 256
  store i32 %v1_c474, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c480 = load i32, i32* @r5, align 4
  store i32 %v0_c480, i32* %r1.global-to-local, align 4
  %v0_c484 = load i32, i32* @r4, align 4
  store i32 %v0_c484, i32* %r0.global-to-local, align 4
  %v5_c488 = trunc i32 %v6_c468 to i8
  %v6_c48c = inttoptr i32 %v0_c480 to i32*
  %v7_c48c = call i32 @function_913c(i32 %v0_c484, i32* %v6_c48c, i32 3, i32 65535, i32 %v6_c468)
  %v0_c490 = load i32, i32* @r5, align 4
  store i32 %v0_c490, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c4a0 = load i32, i32* @r4, align 4
  store i32 %v0_c4a0, i32* %r0.global-to-local, align 4
  %v5_c4a4 = inttoptr i32 %v0_c490 to i32*
  %v6_c4a4 = call i32 @function_913c(i32 %v0_c4a0, i32* %v5_c4a4, i32 4, i32 64, i32 %v7_c48c)
  %v1_c4ac = urem i32 %v6_c4a4, 256
  store i32 %v1_c4ac, i32* %ip.global-to-local, align 4
  %v0_c4b0 = load i32, i32* @r5, align 4
  store i32 %v0_c4b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c4bc = load i32, i32* @r4, align 4
  store i32 %v0_c4bc, i32* %r0.global-to-local, align 4
  %v6_c4c4 = inttoptr i32 %v0_c4b0 to i32*
  %v7_c4c4 = call i32 @function_913c(i32 %v0_c4bc, i32* %v6_c4c4, i32 5, i32 0, i32 %v1_c4ac)
  %v1_c4d0 = urem i32 %v7_c4c4, 256
  store i32 %v1_c4d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c4dc = load i32, i32* @r5, align 4
  store i32 %v0_c4dc, i32* %r1.global-to-local, align 4
  %v0_c4e0 = load i32, i32* @r4, align 4
  store i32 %v0_c4e0, i32* %r0.global-to-local, align 4
  %v5_c4e8 = inttoptr i32 %v0_c4dc to i32*
  %v6_c4e8 = call i32 @function_913c(i32 %v0_c4e0, i32* %v5_c4e8, i32 6, i32 65535, i32 %v1_c4d0)
  %v0_c4f0 = load i32, i32* @r5, align 4
  store i32 %v0_c4f0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c4e8, i32* %sb.global-to-local, align 4
  %v0_c500 = load i32, i32* @r4, align 4
  store i32 %v0_c500, i32* %r0.global-to-local, align 4
  %v5_c504 = inttoptr i32 %v0_c4f0 to i32*
  %v6_c504 = call i32 @function_913c(i32 %v0_c500, i32* %v5_c504, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c508 = load i32, i32* @r5, align 4
  store i32 %v0_c508, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_c504, i32* @sl, align 4
  %v0_c518 = load i32, i32* @r4, align 4
  store i32 %v0_c518, i32* %r0.global-to-local, align 4
  %v5_c51c = inttoptr i32 %v0_c508 to i32*
  %v6_c51c = call i32 @function_913c(i32 %v0_c518, i32* %v5_c51c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c528 = load i32, i32* @r5, align 4
  store i32 %v0_c528, i32* %r1.global-to-local, align 4
  store i32 %v6_c51c, i32* @r6, align 4
  %v0_c530 = load i32, i32* @r4, align 4
  store i32 %v0_c530, i32* %r0.global-to-local, align 4
  %v5_c534 = inttoptr i32 %v0_c528 to i32*
  %v6_c534 = call i32 @function_913c(i32 %v0_c530, i32* %v5_c534, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_c540 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_c540, i32* %r3.global-to-local, align 4
  %v1_c544 = urem i32 %v6_c534, 256
  store i32 %v1_c544, i32* %ip.global-to-local, align 4
  %v0_c548 = load i32, i32* @r5, align 4
  store i32 %v0_c548, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c550 = load i32, i32* @r4, align 4
  store i32 %v0_c550, i32* %r0.global-to-local, align 4
  %v5_c558 = inttoptr i32 %v0_c548 to i32*
  %v6_c558 = call i32 @function_913c(i32 %v0_c550, i32* %v5_c558, i32 25, i32 %v2_c540, i32 %v1_c544)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c56c = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_c56c, i32* %r0.global-to-local, align 4
  %v2_c570 = icmp eq i32 %v3_c56c, -1
  store i1 %v2_c570, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c56c, i32* %fp.global-to-local, align 4
  br i1 %v2_c570, label %dec_label_pc_c910, label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c434
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c584 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c584, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c598 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_c584, i32* nonnull %stack_var_-44, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c598, i32* %r0.global-to-local, align 4
  %v2_c59c = icmp eq i32 %v6_c598, -1
  store i1 %v2_c59c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c59c, label %dec_label_pc_c908, label %dec_label_pc_c5a4

dec_label_pc_c5a4:                                ; preds = %dec_label_pc_c57c
  %v0_c5a4 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_c5b0 = urem i32 %v0_c5a4, 65536
  store i32 %v3_c5b0, i32* %r2.global-to-local, align 4
  %v3_c5b4 = icmp ugt i32 %v3_c5b0, 1459
  %v9_c5b4 = icmp eq i32 %v3_c5b0, 1460
  store i1 %v9_c5b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c5b4, label %bb, label %bb49

bb:                                               ; preds = %dec_label_pc_c5a4
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_c5a4, %bb
  %v0_c610 = phi i32 [ %v3_c5b0, %dec_label_pc_c5a4 ], [ 1460, %bb ]
  store i32 %v7_c48c, i32* %r0.global-to-local, align 4
  %v0_c5c0 = load i32, i32* %sb.global-to-local, align 4
  %v3_c5c0 = mul i32 %v0_c5c0, 65536
  store i32 %v3_c5c0, i32* %r6.global-to-local, align 4
  %v3_c5c8 = urem i32 %v0_c5c0, 65536
  store i32 %v3_c5c8, i32* %ip.global-to-local, align 4
  %v0_c5cc = load i32, i32* @r7, align 4
  %v2_c5cc = icmp eq i32 %v0_c5cc, 0
  store i1 %v2_c5cc, i1* %cpsr_z.global-to-local, align 1
  %v0_c5d0 = load i32, i32* @sl, align 4
  %v3_c5d0 = mul i32 %v0_c5d0, 65536
  %v3_c5d4 = mul i32 %v7_c48c, 65536
  store i32 %v3_c5d4, i32* %r5.global-to-local, align 4
  br i1 %v2_c5cc, label %bb50, label %bb51

bb50:                                             ; preds = %bb49
  store i32 %v0_c610, i32* %ip.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %bb49, %bb50
  %v1_c600 = phi i32 [ %v3_c5c8, %bb49 ], [ %v0_c610, %bb50 ]
  %v3_c5e0 = urem i32 %v0_c5d0, 65536
  store i32 %v3_c5e0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c5e8 = urem i32 %v7_c48c, 65536
  store i32 %v3_c5e8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c5cc, label %.thread, label %dec_label_pc_c608

.thread:                                          ; preds = %bb51
  %v2_c5fc = add nsw i32 %v1_c600, 28
  store i32 %v2_c5fc, i32* %sb.global-to-local, align 4
  %v2_c600 = add nsw i32 %v1_c600, 8
  store i32 %v2_c600, i32* @sl, align 4
  br label %dec_label_pc_c72c.preheader

dec_label_pc_c608:                                ; preds = %bb51
  %v1_c610 = add nuw nsw i32 %v0_c610, 28
  store i32 %v1_c610, i32* %sb.global-to-local, align 4
  %v1_c614 = add nuw nsw i32 %v0_c610, 8
  store i32 %v1_c614, i32* @sl, align 4
  %tmp52 = mul i32 %v0_c5c0, 256
  %v3_c628 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v0_c5c0, 256
  %v4_c638 = urem i32 %tmp53, 256
  %v5_c638 = or i32 %v4_c638, %v3_c628
  store i32 %v5_c638, i32* %r6.global-to-local, align 4
  store i32 %v3_c5d0, i32* %r1.global-to-local, align 4
  %tmp54 = mul nuw nsw i32 %v1_c610, 256
  %v3_c644 = and i32 %tmp54, 65280
  store i32 %v3_c644, i32* %r3.global-to-local, align 4
  %tmp55 = mul i32 %v0_c5d0, 256
  %v3_c648 = and i32 %tmp55, 65280
  %tmp56 = mul nuw nsw i32 %v1_c614, 256
  %v3_c64c = and i32 %tmp56, 65280
  store i32 %v3_c64c, i32* %ip.global-to-local, align 4
  %tmp57 = udiv i32 %v1_c610, 256
  %v4_c650 = urem i32 %tmp57, 256
  %v5_c650 = or i32 %v4_c650, %v3_c644
  %tmp58 = udiv i32 %v0_c5d0, 256
  %v4_c654 = urem i32 %tmp58, 256
  %v5_c654 = or i32 %v4_c654, %v3_c648
  store i32 %v5_c654, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_c614 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp59 = mul i32 %v7_c48c, 256
  %v3_c65c = and i32 %tmp59, 65280
  store i32 %v3_c65c, i32* %r2.global-to-local, align 4
  %tmp60 = udiv i32 %v7_c48c, 256
  %v4_c66c = urem i32 %tmp60, 256
  %v5_c66c = or i32 %v4_c66c, %v3_c65c
  store i32 %v5_c66c, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %sext = mul nuw i32 %v5_c650, 65536
  %v4_c6e0 = sdiv i32 %sext, 65536
  %sext7 = mul nuw i32 %v5_c654, 65536
  %v7_c714 = sdiv i32 %sext7, 65536
  %v1_c6d4 = trunc i32 %v6_c4a4 to i8
  %v3_c714 = sext i16 %rev to i32
  br label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %.thread9, %dec_label_pc_c608
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c680 = call i32* @calloc(i32 1510, i32 1)
  %v4_c680 = ptrtoint i32* %v2_c680 to i32
  store i32 %v4_c680, i32* %r0.global-to-local, align 4
  store i32 %v4_c450, i32* %r3.global-to-local, align 4
  %v3_c688 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c688, i32* %r1.global-to-local, align 4
  %v2_c68c = load i32, i32* %r4.global-to-local, align 4
  %v5_c68c = mul i32 %v2_c68c, 4
  %v6_c68c = add i32 %v5_c68c, %v4_c450
  %v7_c68c = inttoptr i32 %v6_c68c to i32*
  store i32 %v4_c680, i32* %v7_c68c, align 4
  %v0_c690 = load i32, i32* %r3.global-to-local, align 4
  %v1_c690 = load i32, i32* %r1.global-to-local, align 4
  %v4_c690 = mul i32 %v1_c690, 4
  %v5_c690 = add i32 %v4_c690, %v0_c690
  %v6_c690 = inttoptr i32 %v5_c690 to i32*
  %v7_c690 = load i32, i32* %v6_c690, align 4
  store i32 %v7_c690, i32* %r0.global-to-local, align 4
  %v1_c694 = inttoptr i32 %v7_c690 to i8*
  %v2_c694 = load i8, i8* %v1_c694, align 1
  %tmp = urem i8 %v2_c694, 16
  %v1_c698 = zext i8 %tmp to i32
  %v1_c69c = or i32 %v1_c698, 64
  store i32 %v1_c69c, i32* %r3.global-to-local, align 4
  %v1_c6a0 = trunc i32 %v1_c69c to i8
  store i8 %v1_c6a0, i8* %v1_c694, align 1
  %v0_c6a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c6a4 = inttoptr i32 %v0_c6a4 to i8*
  %v2_c6a4 = load i8, i8* %v1_c6a4, align 1
  %v1_c6a8 = and i8 %v2_c6a4, -16
  %v1_c6ac = or i8 %v1_c6a8, 5
  store i32 %v1_c4d0, i32* %ip.global-to-local, align 4
  %v0_c6b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c6b4 = mul i32 %v0_c6b4, 32
  store i32 %v3_c6b4, i32* %r2.global-to-local, align 4
  store i8 %v1_c6ac, i8* %v1_c6a4, align 1
  %v0_c6bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c6bc = add i32 %v0_c6bc, 1
  store i32 %v1_c6bc, i32* %r4.global-to-local, align 4
  %v0_c6c0 = load i32, i32* %r2.global-to-local, align 4
  %tmp62 = mul i32 %v0_c6bc, -8
  %v5_c6c0 = add i32 %v0_c6c0, %tmp62
  store i32 %v5_c6c0, i32* %r2.global-to-local, align 4
  store i32 %v6_c468, i32* %r1.global-to-local, align 4
  %v2_c6c8 = load i32, i32* %r0.global-to-local, align 4
  %v3_c6c8 = add i32 %v2_c6c8, 1
  %v4_c6c8 = inttoptr i32 %v3_c6c8 to i8*
  store i8 %v5_c488, i8* %v4_c6c8, align 1
  store i32 %v1_c4ac, i32* %r3.global-to-local, align 4
  %v0_c6d0 = load i32, i32* %ip.global-to-local, align 4
  %v2_c6d0 = icmp eq i32 %v0_c6d0, 0
  store i1 %v2_c6d0, i1* %cpsr_z.global-to-local, align 1
  %v2_c6d4 = load i32, i32* %r0.global-to-local, align 4
  %v3_c6d4 = add i32 %v2_c6d4, 8
  %v4_c6d4 = inttoptr i32 %v3_c6d4 to i8*
  store i8 %v1_c6d4, i8* %v4_c6d4, align 1
  %v0_c6d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6d8, label %.thread9, label %bb61

bb61:                                             ; preds = %dec_label_pc_c674
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c6dc = load i32, i32* %r0.global-to-local, align 4
  %v4_c6dc = add i32 %v3_c6dc, 6
  %v5_c6dc = inttoptr i32 %v4_c6dc to i16*
  store i16 64, i16* %v5_c6dc, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_c674, %bb61
  store i32 %v4_c6e0, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c6e8 = load i32, i32* %r0.global-to-local, align 4
  %v3_c6e8 = add i32 %v2_c6e8, 9
  %v4_c6e8 = inttoptr i32 %v3_c6e8 to i8*
  store i8 17, i8* %v4_c6e8, align 1
  %v0_c6ec = load i32, i32* %ip.global-to-local, align 4
  %v1_c6ec = trunc i32 %v0_c6ec to i16
  %v2_c6ec = load i32, i32* %r0.global-to-local, align 4
  %v3_c6ec = add i32 %v2_c6ec, 2
  %v4_c6ec = inttoptr i32 %v3_c6ec to i16*
  store i16 %v1_c6ec, i16* %v4_c6ec, align 2
  store i32 %v6_c558, i32* %ip.global-to-local, align 4
  %v1_c6f4 = load i32, i32* %r0.global-to-local, align 4
  %v2_c6f4 = add i32 %v1_c6f4, 12
  %v3_c6f4 = inttoptr i32 %v2_c6f4 to i32*
  store i32 %v6_c558, i32* %v3_c6f4, align 4
  %v0_c6f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6f8 = load i32, i32* @r8, align 4
  %v2_c6f8 = add i32 %v1_c6f8, %v0_c6f8
  store i32 %v2_c6f8, i32* %r2.global-to-local, align 4
  %v1_c6fc = add i32 %v2_c6f8, 16
  %v2_c6fc = inttoptr i32 %v1_c6fc to i32*
  %v3_c6fc = load i32, i32* %v2_c6fc, align 4
  store i32 %v3_c6fc, i32* %r3.global-to-local, align 4
  %v0_c700 = load i32, i32* %r5.global-to-local, align 4
  %v1_c700 = trunc i32 %v0_c700 to i16
  %v2_c700 = load i32, i32* %r0.global-to-local, align 4
  %v3_c700 = add i32 %v2_c700, 4
  %v4_c700 = inttoptr i32 %v3_c700 to i16*
  store i16 %v1_c700, i16* %v4_c700, align 2
  %v0_c704 = load i32, i32* %r0.global-to-local, align 4
  %v1_c704 = add i32 %v0_c704, 20
  store i32 %v1_c704, i32* %r1.global-to-local, align 4
  %v0_c708 = load i32, i32* %r3.global-to-local, align 4
  %v2_c708 = add i32 %v0_c704, 16
  %v3_c708 = inttoptr i32 %v2_c708 to i32*
  store i32 %v0_c708, i32* %v3_c708, align 4
  %v0_c70c = load i32, i32* %r6.global-to-local, align 4
  %v1_c70c = trunc i32 %v0_c70c to i16
  %v2_c70c = load i32, i32* %r0.global-to-local, align 4
  %v3_c70c = add i32 %v2_c70c, 20
  %v4_c70c = inttoptr i32 %v3_c70c to i16*
  store i16 %v1_c70c, i16* %v4_c70c, align 2
  store i32 %v3_c714, i32* %r0.global-to-local, align 4
  store i32 %v7_c714, i32* %r3.global-to-local, align 4
  %v0_c718 = load i32, i32* %r4.global-to-local, align 4
  %v1_c718 = load i32, i32* @r7, align 4
  %v9_c718 = icmp eq i32 %v0_c718, %v1_c718
  store i1 %v9_c718, i1* %cpsr_z.global-to-local, align 1
  %v2_c71c = load i32, i32* %r1.global-to-local, align 4
  %v3_c71c = add i32 %v2_c71c, 4
  %v4_c71c = inttoptr i32 %v3_c71c to i16*
  store i16 %rev, i16* %v4_c71c, align 2
  %v0_c720 = load i32, i32* %r3.global-to-local, align 4
  %v1_c720 = trunc i32 %v0_c720 to i16
  %v2_c720 = load i32, i32* %r1.global-to-local, align 4
  %v3_c720 = add i32 %v2_c720, 2
  %v4_c720 = inttoptr i32 %v3_c720 to i16*
  store i16 %v1_c720, i16* %v4_c720, align 2
  %v0_c724 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c724, i32* %stack_var_-44, align 4
  %v5_c728 = icmp slt i32 %v0_c718, %v1_c718
  br i1 %v5_c728, label %dec_label_pc_c674, label %dec_label_pc_c72c.preheader.loopexit

dec_label_pc_c72c.preheader.loopexit:             ; preds = %.thread9
  %v0_c730.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c72c.preheader

dec_label_pc_c72c.preheader:                      ; preds = %.thread, %dec_label_pc_c72c.preheader.loopexit
  %v0_c730.pre = phi i32 [ %v0_c730.pre.pre, %dec_label_pc_c72c.preheader.loopexit ], [ 0, %.thread ]
  %v3_c898 = icmp eq i32 %v6_c558, -1
  %v3_c8b0 = icmp eq i32 %v3_c5e8, 65535
  %v2_c8ec = icmp eq i32 %v1_c544, 0
  br label %dec_label_pc_c72c

dec_label_pc_c72c:                                ; preds = %dec_label_pc_c72c, %dec_label_pc_c82c, %dec_label_pc_c72c.preheader
  %v0_c730 = phi i32 [ %v0_c730.pre, %dec_label_pc_c72c.preheader ], [ 0, %dec_label_pc_c82c ], [ 0, %dec_label_pc_c72c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c730 = icmp eq i32 %v0_c730, 0
  store i1 %v2_c730, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c730, label %dec_label_pc_c72c, label %dec_label_pc_c73c

dec_label_pc_c73c:                                ; preds = %dec_label_pc_c72c, %dec_label_pc_c82c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c740

dec_label_pc_c740:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c73c
  %v1_c754 = phi i32 [ %v1_c81c, %dec_label_pc_c7a8 ], [ 0, %dec_label_pc_c73c ]
  %v5_c744 = mul i32 %v1_c754, 24
  %v1_c748 = load i32, i32* @r8, align 4
  %v2_c748 = add i32 %v1_c748, %v5_c744
  store i32 %v2_c748, i32* %r3.global-to-local, align 4
  store i32 %v4_c450, i32* %r1.global-to-local, align 4
  %v1_c750 = add i32 %v2_c748, 20
  %v2_c750 = inttoptr i32 %v1_c750 to i8*
  %v3_c750 = load i8, i8* %v2_c750, align 1
  %v4_c750 = zext i8 %v3_c750 to i32
  store i32 %v4_c750, i32* %r2.global-to-local, align 4
  %v4_c754 = mul i32 %v1_c754, 4
  %v5_c754 = add i32 %v4_c754, %v4_c450
  %v6_c754 = inttoptr i32 %v5_c754 to i32*
  %v7_c754 = load i32, i32* %v6_c754, align 4
  store i32 %v7_c754, i32* @r5, align 4
  %v7_c758 = icmp eq i8 %v3_c750, 31
  store i1 %v7_c758, i1* %cpsr_z.global-to-local, align 1
  %v1_c75c = add i32 %v7_c754, 20
  store i32 %v1_c75c, i32* @r6, align 4
  %tmp63 = icmp ult i8 %v3_c750, 32
  br i1 %tmp63, label %dec_label_pc_c840, label %dec_label_pc_c764

dec_label_pc_c764:                                ; preds = %dec_label_pc_c740
  store i32 %v6_c558, i32* %r3.global-to-local, align 4
  store i1 %v3_c898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c898, label %dec_label_pc_c8a0, label %dec_label_pc_c770

dec_label_pc_c770:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c764
  store i32 %v3_c5e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c8b0, label %dec_label_pc_c8bc, label %dec_label_pc_c784

dec_label_pc_c784:                                ; preds = %dec_label_pc_c8a0.dec_label_pc_c784_crit_edge, %dec_label_pc_c770
  %v1_c788 = phi i32 [ %v1_c788.pre, %dec_label_pc_c8a0.dec_label_pc_c784_crit_edge ], [ 65535, %dec_label_pc_c770 ]
  store i32 %v3_c5c8, i32* %r0.global-to-local, align 4
  %v9_c788 = icmp eq i32 %v3_c5c8, %v1_c788
  store i1 %v9_c788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c788, label %dec_label_pc_c8d0, label %dec_label_pc_c790

dec_label_pc_c790:                                ; preds = %dec_label_pc_c8bc, %dec_label_pc_c784
  %v1_c794 = phi i32 [ %v1_c8c8, %dec_label_pc_c8bc ], [ %v1_c788, %dec_label_pc_c784 ]
  store i32 %v3_c5e0, i32* %r1.global-to-local, align 4
  %v9_c794 = icmp eq i32 %v3_c5e0, %v1_c794
  store i1 %v9_c794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c794, label %dec_label_pc_c8e4, label %dec_label_pc_c79c

dec_label_pc_c79c:                                ; preds = %dec_label_pc_c8d0, %dec_label_pc_c790
  store i32 %v1_c544, i32* %r3.global-to-local, align 4
  store i1 %v2_c8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c8ec, label %dec_label_pc_c7a8, label %dec_label_pc_c8f8

dec_label_pc_c7a8:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c8e4, %dec_label_pc_c8f8
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c7ac = load i32, i32* @r5, align 4
  %v3_c7ac = add i32 %v2_c7ac, 10
  %v4_c7ac = inttoptr i32 %v3_c7ac to i16*
  store i16 0, i16* %v4_c7ac, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c7b4 = load i32, i32* @r5, align 4
  store i32 %v0_c7b4, i32* @r0, align 4
  %v2_c7b8 = call i32 @function_d414(i32 %v0_c7b4, i32 20)
  %v3_c7b8 = trunc i32 %v2_c7b8 to i16
  %v3_c7bc = load i32, i32* @r5, align 4
  %v4_c7bc = add i32 %v3_c7bc, 10
  %v5_c7bc = inttoptr i32 %v4_c7bc to i16*
  store i16 %v3_c7b8, i16* %v5_c7bc, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c7c4 = load i32, i32* @r6, align 4
  %v3_c7c4 = add i32 %v2_c7c4, 6
  %v4_c7c4 = inttoptr i32 %v3_c7c4 to i16*
  store i16 0, i16* %v4_c7c4, align 2
  %v0_c7c8 = load i32, i32* @r6, align 4
  store i32 %v0_c7c8, i32* @r1, align 4
  %v1_c7cc = add i32 %v0_c7c8, 4
  %v2_c7cc = inttoptr i32 %v1_c7cc to i16*
  %v3_c7cc = load i16, i16* %v2_c7cc, align 2
  %v4_c7cc = zext i16 %v3_c7cc to i32
  store i32 %v4_c7cc, i32* %r2.global-to-local, align 4
  %v0_c7d0 = load i32, i32* @sl, align 4
  store i32 %v0_c7d0, i32* %r3.global-to-local, align 4
  %v0_c7d4 = load i32, i32* @r5, align 4
  store i32 %v0_c7d4, i32* %r0.global-to-local, align 4
  %v4_c7d8 = call i32 @function_d464(i32 %v0_c7d4, i32 %v0_c7c8, i32 %v4_c7cc, i32 %v0_c7d0)
  %v5_c7d8 = trunc i32 %v4_c7d8 to i16
  store i32 %v4_c7d8, i32* %r0.global-to-local, align 4
  %v3_c7dc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7dc, i32* %r3.global-to-local, align 4
  %v3_c7e0 = mul i32 %v3_c7dc, 32
  store i32 %v3_c7e0, i32* %lr.global-to-local, align 4
  %v3_c7e4 = load i32, i32* @r6, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 6
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v5_c7d8, i16* %v5_c7e4, align 2
  %v0_c7e8 = load i32, i32* %lr.global-to-local, align 4
  %v1_c7e8 = load i32, i32* %r3.global-to-local, align 4
  %tmp64 = mul i32 %v1_c7e8, -8
  %v5_c7e8 = add i32 %v0_c7e8, %tmp64
  store i32 %v5_c7e8, i32* %lr.global-to-local, align 4
  %v0_c7ec = load i32, i32* @r6, align 4
  %v1_c7ec = add i32 %v0_c7ec, 2
  %v2_c7ec = inttoptr i32 %v1_c7ec to i16*
  %v3_c7ec = load i16, i16* %v2_c7ec, align 2
  %v4_c7ec = zext i16 %v3_c7ec to i32
  store i32 %v4_c7ec, i32* %r6.global-to-local, align 4
  %v1_c7f0 = load i32, i32* @r8, align 4
  %v2_c7f0 = add i32 %v1_c7f0, %v5_c7e8
  store i32 %v2_c7f0, i32* @lr, align 4
  %v3_c7f4 = add i32 %v2_c7f0, 2
  %v4_c7f4 = inttoptr i32 %v3_c7f4 to i16*
  store i16 %v3_c7ec, i16* %v4_c7f4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 %v0_c800, i32* %r1.global-to-local, align 4
  %v0_c804 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c804, i32* %r0.global-to-local, align 4
  %v0_c808 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c808, i32* %r2.global-to-local, align 4
  %v0_c80c = load i32, i32* @lr, align 4
  %v4_c80c = inttoptr i32 %v0_c80c to %sockaddr*
  %v7_c814 = inttoptr i32 %v0_c800 to i32*
  %v9_c814 = call i32 @sendto(i32 %v0_c804, i32* %v7_c814, i32 %v0_c808, i32 16384, %sockaddr* %v4_c80c, i32 16)
  %v3_c818 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c818, i32* %r3.global-to-local, align 4
  %v1_c81c = add i32 %v3_c818, 1
  store i32 %v1_c81c, i32* %r0.global-to-local, align 4
  %v1_c820 = load i32, i32* @r7, align 4
  %v9_c820 = icmp eq i32 %v1_c81c, %v1_c820
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c81c, i32* %stack_var_-44, align 4
  %v5_c828 = icmp slt i32 %v1_c81c, %v1_c820
  br i1 %v5_c828, label %dec_label_pc_c740, label %dec_label_pc_c82c

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c7a8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c830 = icmp eq i32 %v1_c820, 0
  store i1 %v2_c830, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c830, label %dec_label_pc_c72c, label %dec_label_pc_c73c

dec_label_pc_c840:                                ; preds = %dec_label_pc_c740
  %v1_c840 = add i32 %v2_c748, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  store i32 %v3_c840, i32* %r4.global-to-local, align 4
  %v0_c844 = call i32 @function_ee68()
  store i32 %v0_c844, i32* %r0.global-to-local, align 4
  %v3_c848 = load i32, i32* %stack_var_-44, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v1_c854 = and i32 %v3_c840, 16711680
  store i32 %v1_c854, i32* %ip.global-to-local, align 4
  %v3_c858 = udiv i32 %v3_c840, 16777216
  %v4_c85c = udiv i32 %v1_c854, 256
  %v5_c85c = or i32 %v4_c85c, %v3_c858
  store i32 %v5_c85c, i32* %r2.global-to-local, align 4
  %v1_c860 = load i32, i32* @r8, align 4
  %v2_c860 = add i32 %v1_c860, %v5_c850
  store i32 %v2_c860, i32* %r1.global-to-local, align 4
  %v1_c864 = and i32 %v3_c840, 65280
  store i32 %v1_c864, i32* %r3.global-to-local, align 4
  %v1_c868 = add i32 %v2_c860, 20
  %v2_c868 = inttoptr i32 %v1_c868 to i8*
  %v3_c868 = load i8, i8* %v2_c868, align 1
  %v4_c868 = zext i8 %v3_c868 to i32
  store i32 %v4_c868, i32* %ip.global-to-local, align 4
  %v5_c870 = call i32 @llvm.bswap.i32(i32 %v3_c840)
  %v7_c874 = lshr i32 %v0_c844, %v4_c868
  %v8_c874 = add i32 %v7_c874, %v5_c870
  store i32 %v8_c874, i32* %r2.global-to-local, align 4
  %v1_c878 = and i32 %v8_c874, 16711680
  store i32 %v1_c878, i32* %r0.global-to-local, align 4
  %v1_c884 = and i32 %v8_c874, 65280
  store i32 %v1_c884, i32* %r1.global-to-local, align 4
  %v5_c88c = call i32 @llvm.bswap.i32(i32 %v8_c874)
  %v1_c890 = load i32, i32* @r5, align 4
  %v2_c890 = add i32 %v1_c890, 16
  %v3_c890 = inttoptr i32 %v2_c890 to i32*
  store i32 %v5_c88c, i32* %v3_c890, align 4
  store i32 %v6_c558, i32* %r3.global-to-local, align 4
  store i1 %v3_c898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c898, label %dec_label_pc_c8a0, label %dec_label_pc_c770

dec_label_pc_c8a0:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c764
  %v0_c8a0 = call i32 @function_ee68()
  store i32 %v0_c8a0, i32* %r0.global-to-local, align 4
  store i32 %v3_c5e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c8b4 = load i32, i32* @r5, align 4
  %v2_c8b4 = add i32 %v1_c8b4, 12
  %v3_c8b4 = inttoptr i32 %v2_c8b4 to i32*
  store i32 %v0_c8a0, i32* %v3_c8b4, align 4
  br i1 %v3_c8b0, label %dec_label_pc_c8bc, label %dec_label_pc_c8a0.dec_label_pc_c784_crit_edge

dec_label_pc_c8a0.dec_label_pc_c784_crit_edge:    ; preds = %dec_label_pc_c8a0
  %v1_c788.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c784

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8a0, %dec_label_pc_c770
  %v0_c8bc = call i32 @function_ee68()
  %v1_c8bc = trunc i32 %v0_c8bc to i16
  %v3_c8c0 = load i32, i32* @r5, align 4
  %v4_c8c0 = add i32 %v3_c8c0, 4
  %v5_c8c0 = inttoptr i32 %v4_c8c0 to i16*
  store i16 %v1_c8bc, i16* %v5_c8c0, align 2
  store i32 %v3_c5c8, i32* %r0.global-to-local, align 4
  %v1_c8c8 = load i32, i32* @r4, align 4
  %v9_c8c8 = icmp eq i32 %v3_c5c8, %v1_c8c8
  store i1 %v9_c8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c8c8, label %dec_label_pc_c8d0, label %dec_label_pc_c790

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8bc, %dec_label_pc_c784
  %v0_c8d0 = call i32 @function_ee68()
  %v1_c8d0 = trunc i32 %v0_c8d0 to i16
  store i32 %v0_c8d0, i32* %r0.global-to-local, align 4
  store i32 %v3_c5e0, i32* %r1.global-to-local, align 4
  %v1_c8d8 = load i32, i32* @r4, align 4
  %v9_c8d8 = icmp eq i32 %v3_c5e0, %v1_c8d8
  store i1 %v9_c8d8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8dc = load i32, i32* @r5, align 4
  %v4_c8dc = add i32 %v3_c8dc, 20
  %v5_c8dc = inttoptr i32 %v4_c8dc to i16*
  store i16 %v1_c8d0, i16* %v5_c8dc, align 2
  br i1 %v9_c8d8, label %dec_label_pc_c8e4, label %dec_label_pc_c79c

dec_label_pc_c8e4:                                ; preds = %dec_label_pc_c8d0, %dec_label_pc_c790
  %v0_c8e4 = call i32 @function_ee68()
  %v1_c8e4 = trunc i32 %v0_c8e4 to i16
  store i32 %v0_c8e4, i32* %r0.global-to-local, align 4
  store i32 %v1_c544, i32* %r3.global-to-local, align 4
  store i1 %v2_c8ec, i1* %cpsr_z.global-to-local, align 1
  %v3_c8f0 = load i32, i32* @r6, align 4
  %v4_c8f0 = add i32 %v3_c8f0, 2
  %v5_c8f0 = inttoptr i32 %v4_c8f0 to i16*
  store i16 %v1_c8e4, i16* %v5_c8f0, align 2
  br i1 %v2_c8ec, label %dec_label_pc_c7a8, label %dec_label_pc_c8f8

dec_label_pc_c8f8:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c8e4
  %v0_c8f8 = load i32, i32* @r5, align 4
  %v1_c8f8 = add i32 %v0_c8f8, 28
  store i32 %v1_c8f8, i32* %r0.global-to-local, align 4
  store i32 %v0_c610, i32* %r1.global-to-local, align 4
  %v2_c900 = inttoptr i32 %v1_c8f8 to i16*
  %v3_c900 = call i32 @function_effc(i16* %v2_c900, i32 %v0_c610)
  store i32 %v3_c900, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c7a8

dec_label_pc_c908:                                ; preds = %dec_label_pc_c57c
  %v0_c908 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c908, i32* %r0.global-to-local, align 4
  %v1_c90c = call i32 @close(i32 %v0_c908)
  store i32 %v1_c90c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c910

dec_label_pc_c910:                                ; preds = %dec_label_pc_c434, %dec_label_pc_c908
  %v1_c918 = phi i32 [ -1, %dec_label_pc_c434 ], [ %v1_c90c, %dec_label_pc_c908 ]
  store i32 %v3_c434, i32* %r4.global-to-local, align 4
  store i32 %v6_c434, i32* %r5.global-to-local, align 4
  store i32 %v9_c434, i32* %r6.global-to-local, align 4
  store i32 %v27_c434, i32* %lr.global-to-local, align 4
  ret i32 %v1_c918

; uselistorder directives
  uselistorder i32 %v0_c8e4, { 1, 0 }
  uselistorder i32 %v0_c8d0, { 1, 0 }
  uselistorder i32 %v1_c8c8, { 1, 0 }
  uselistorder i32 %v3_c840, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_c81c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c7e8, { 1, 0 }
  uselistorder i32 %v4_c7d8, { 1, 0 }
  uselistorder i1 %v2_c8ec, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c8b0, { 3, 2, 0, 1 }
  uselistorder i1 %v3_c898, { 3, 2, 1, 0 }
  uselistorder i32 %v3_c65c, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_c644, { 1, 0 }
  uselistorder i32 %v1_c614, { 1, 0, 2 }
  uselistorder i32 %v1_c610, { 1, 0, 2 }
  uselistorder i32 %v3_c5e8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_c5d0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c5c8, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_c5c0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_c610, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_c5b0, { 3, 1, 2, 0 }
  uselistorder i32 %v6_c558, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v1_c544, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_c4d0, { 1, 2, 0 }
  uselistorder i32 %v1_c4ac, { 2, 1, 0 }
  uselistorder i32 %v6_c4a4, { 1, 0 }
  uselistorder i32 %v7_c48c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v6_c468, { 2, 1, 3, 0 }
  uselistorder i32 %v4_c450, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 10 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 31, 30, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 (i16*, i32)* @function_effc, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder label %dec_label_pc_c910, { 1, 0 }
  uselistorder label %dec_label_pc_c8f8, { 1, 0 }
  uselistorder label %dec_label_pc_c7a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c73c, { 1, 0 }
  uselistorder label %dec_label_pc_c72c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c72c.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
}

define i32 @function_c920(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c920:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_c920 = load i32, i32* @r4, align 4
  %v6_c920 = load i32, i32* @r5, align 4
  %v9_c920 = load i32, i32* @r6, align 4
  %v12_c920 = load i32, i32* @r7, align 4
  %v27_c920 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c93c = call i32* @calloc(i32 4, i32 4)
  %v3_c93c = ptrtoint i32* %v2_c93c to i32
  %v0_c940 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v3_c93c, i32* %fp.global-to-local, align 4
  %v0_c950 = load i32, i32* @r4, align 4
  %v5_c954 = inttoptr i32 %v0_c940 to i32*
  %v6_c954 = call i32 @function_913c(i32 %v0_c950, i32* %v5_c954, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_c960 = urem i32 %v6_c954, 256
  store i32 %v1_c960, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c96c = load i32, i32* @r4, align 4
  %v0_c970 = load i32, i32* @r5, align 4
  %v5_c974 = trunc i32 %v6_c954 to i8
  %v6_c978 = inttoptr i32 %v0_c970 to i32*
  %v7_c978 = call i32 @function_913c(i32 %v0_c96c, i32* %v6_c978, i32 3, i32 65535, i32 %v6_c954)
  %v0_c97c = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c978, i32* @r7, align 4
  %v0_c98c = load i32, i32* @r4, align 4
  %v5_c990 = inttoptr i32 %v0_c97c to i32*
  %v6_c990 = call i32 @function_913c(i32 %v0_c98c, i32* %v5_c990, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_c998 = urem i32 %v6_c990, 256
  store i32 %v1_c998, i32* %ip.global-to-local, align 4
  %v0_c99c = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c9a8 = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_c990, 16777216
  %v5_c9b0 = sdiv i32 %sext, 16777216
  %v6_c9b0 = inttoptr i32 %v0_c99c to i32*
  %v7_c9b0 = call i32 @function_913c(i32 %v0_c9a8, i32* %v6_c9b0, i32 5, i32 0, i32 %v5_c9b0)
  %v1_c9bc = urem i32 %v7_c9b0, 256
  store i32 %v1_c9bc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c9c8 = load i32, i32* @r4, align 4
  %v0_c9cc = load i32, i32* @r5, align 4
  %v5_c9d4 = inttoptr i32 %v0_c9cc to i32*
  %v6_c9d4 = call i32 @function_913c(i32 %v0_c9c8, i32* %v5_c9d4, i32 6, i32 65535, i32 %v1_c9bc)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c9e4 = load i32, i32* @r5, align 4
  store i32 %v6_c9d4, i32* @r6, align 4
  %v0_c9ec = load i32, i32* @r4, align 4
  %v5_c9f0 = inttoptr i32 %v0_c9e4 to i32*
  %v6_c9f0 = call i32 @function_913c(i32 %v0_c9ec, i32* %v5_c9f0, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c9f0, i32* @r4, align 4
  %v1_c9fc = call i32 @function_110b8(i32 25)
  %v3_ca08 = call i32 @function_10ff4(i32 25, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_ca1c = call i32 @socket(i32 2, i32 3, i32 17)
  %v2_ca20 = icmp eq i32 %v3_ca1c, -1
  store i1 %v2_ca20, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ca1c, i32* %sb.global-to-local, align 4
  br i1 %v2_ca20, label %dec_label_pc_cd48, label %dec_label_pc_ca2c

dec_label_pc_ca2c:                                ; preds = %dec_label_pc_c920
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ca34 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ca34, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ca48 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_ca34, i32* nonnull %stack_var_-44, i32 ptrtoint (i32* @0 to i32))
  %v2_ca4c = icmp eq i32 %v6_ca48, -1
  store i1 %v2_ca4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ca4c, label %dec_label_pc_cd40, label %dec_label_pc_ca54

dec_label_pc_ca54:                                ; preds = %dec_label_pc_ca2c
  %v0_ca54 = load i32, i32* @r4, align 4
  %v0_ca58 = load i32, i32* @r7, align 4
  %v0_ca5c = load i32, i32* @r6, align 4
  %v3_ca5c = mul i32 %v0_ca5c, 65536
  store i32 %v3_ca5c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_ca64 = urem i32 %v0_ca58, 65536
  %v3_ca68 = urem i32 %v0_ca5c, 65536
  store i32 %v3_ca68, i32* %r2.global-to-local, align 4
  %v3_ca6c = urem i32 %v0_ca54, 65536
  store i32 %v3_ca6c, i32* %r3.global-to-local, align 4
  %v0_ca70 = load i32, i32* @r8, align 4
  %v2_ca70 = icmp eq i32 %v0_ca70, 0
  store i1 %v2_ca70, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ca70, label %dec_label_pc_cbac.preheader, label %dec_label_pc_ca88

dec_label_pc_ca88:                                ; preds = %dec_label_pc_ca54
  %tmp34 = mul i32 %v0_ca58, 256
  %v3_ca98 = and i32 %tmp34, 65280
  store i32 %v3_ca98, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_ca5c, 256
  %v3_ca9c = and i32 %tmp35, 65280
  store i32 %v3_ca9c, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_ca54, 256
  %v3_caa0 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_ca58, 256
  %v4_caa4 = urem i32 %tmp37, 256
  %v5_caa4 = or i32 %v4_caa4, %v3_ca98
  store i32 %v5_caa4, i32* %r5.global-to-local, align 4
  %tmp38 = udiv i32 %v0_ca5c, 256
  %v4_caa8 = urem i32 %tmp38, 256
  %v5_caa8 = or i32 %v4_caa8, %v3_ca9c
  store i32 %v5_caa8, i32* %r6.global-to-local, align 4
  %tmp39 = udiv i32 %v0_ca54, 256
  %v4_caac = urem i32 %tmp39, 256
  %v5_caac = or i32 %v4_caac, %v3_caa0
  store i32 %v5_caac, i32* %r7.global-to-local, align 4
  %v1_cb34 = trunc i32 %v5_c9b0 to i8
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %.thread, %dec_label_pc_ca88
  %v2_cab8 = call i32* @calloc(i32 128, i32 1)
  %v3_cab8 = ptrtoint i32* %v2_cab8 to i32
  %v3_cabc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cabc, i32* %r2.global-to-local, align 4
  %v5_cac4 = mul i32 %v3_cabc, 24
  store i32 %v5_cac4, i32* %r3.global-to-local, align 4
  %v1_cac8 = load i32, i32* %fp.global-to-local, align 4
  %v2_cac8 = load i32, i32* @r4, align 4
  %v5_cac8 = mul i32 %v2_cac8, 4
  %v6_cac8 = add i32 %v5_cac8, %v1_cac8
  %v7_cac8 = inttoptr i32 %v6_cac8 to i32*
  store i32 %v3_cab8, i32* %v7_cac8, align 4
  %v0_cacc = load i32, i32* %r3.global-to-local, align 4
  %v1_cacc = load i32, i32* @sl, align 4
  %v2_cacc = add i32 %v1_cacc, %v0_cacc
  store i32 %v2_cacc, i32* %r3.global-to-local, align 4
  %v0_cad0 = load i32, i32* %fp.global-to-local, align 4
  %v1_cad0 = load i32, i32* %r2.global-to-local, align 4
  %v4_cad0 = mul i32 %v1_cad0, 4
  %v5_cad0 = add i32 %v4_cad0, %v0_cad0
  %v6_cad0 = inttoptr i32 %v5_cad0 to i32*
  %v7_cad0 = load i32, i32* %v6_cad0, align 4
  store i32 %v7_cad0, i32* @lr, align 4
  %v1_cad8 = inttoptr i32 %v7_cad0 to i8*
  %v2_cad8 = load i8, i8* %v1_cad8, align 1
  %tmp = urem i8 %v2_cad8, 16
  %v1_cadc = zext i8 %tmp to i32
  %v1_cae0 = or i32 %v1_cadc, 64
  store i32 %v1_cae0, i32* %r3.global-to-local, align 4
  %v1_cae8 = trunc i32 %v1_cae0 to i8
  store i8 %v1_cae8, i8* %v1_cad8, align 1
  %v0_caec = load i32, i32* @lr, align 4
  %v1_caec = inttoptr i32 %v0_caec to i8*
  %v2_caec = load i8, i8* %v1_caec, align 1
  %v1_caf0 = and i8 %v2_caec, -16
  %v1_caf4 = or i8 %v1_caf0, 5
  store i8 %v1_caf4, i8* %v1_caec, align 1
  %v2_cb00 = load i32, i32* @lr, align 4
  %v3_cb00 = add i32 %v2_cb00, 1
  %v4_cb00 = inttoptr i32 %v3_cb00 to i8*
  store i8 %v5_c974, i8* %v4_cb00, align 1
  %v3_cb04 = load i32, i32* %stack_var_-48, align 4
  %v3_cb08 = mul i32 %v3_cb04, 65536
  %v1_cb0c = add i32 %v3_cb08, 2097152
  %v3_cb10 = udiv i32 %v1_cb0c, 256
  %v4_cb18 = udiv i32 %v1_cb0c, 16777216
  %v5_cb18 = or i32 %v3_cb10, %v4_cb18
  %v3_cb1c = urem i32 %v3_cb04, 65536
  store i32 %v3_cb1c, i32* %r2.global-to-local, align 4
  %v1_cb20 = trunc i32 %v5_cb18 to i16
  %v2_cb20 = load i32, i32* @lr, align 4
  %v3_cb20 = add i32 %v2_cb20, 2
  %v4_cb20 = inttoptr i32 %v3_cb20 to i16*
  store i16 %v1_cb20, i16* %v4_cb20, align 2
  %v0_cb24 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb24 = mul i32 %v0_cb24, 65536
  %v3_cb2c = add i32 %v1_cb24, 786432
  store i32 %v3_cb2c, i32* %r2.global-to-local, align 4
  store i32 %v1_c9bc, i32* %ip.global-to-local, align 4
  %v2_cb34 = load i32, i32* @lr, align 4
  %v3_cb34 = add i32 %v2_cb34, 8
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  %v0_cb38 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb38 = udiv i32 %v0_cb38, 256
  %v1_cb3c = and i32 %v3_cb38, 65280
  %v0_cb40 = load i32, i32* %ip.global-to-local, align 4
  %v2_cb40 = icmp eq i32 %v0_cb40, 0
  store i1 %v2_cb40, i1* %cpsr_z.global-to-local, align 1
  %v4_cb44 = udiv i32 %v0_cb38, 16777216
  %v5_cb44 = or i32 %v1_cb3c, %v4_cb44
  store i32 %v5_cb44, i32* %ip.global-to-local, align 4
  %v2_cb4c = load i32, i32* @lr, align 4
  %v3_cb4c = add i32 %v2_cb4c, 9
  %v4_cb4c = inttoptr i32 %v3_cb4c to i8*
  store i8 17, i8* %v4_cb4c, align 1
  store i32 ptrtoint (i32* @global_var_1a230.41 to i32), i32* %r3.global-to-local, align 4
  %v0_cb54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cb54, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cab0
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_cb58 = load i32, i32* @lr, align 4
  %v4_cb58 = add i32 %v3_cb58, 6
  %v5_cb58 = inttoptr i32 %v4_cb58 to i16*
  store i16 64, i16* %v5_cb58, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cab0, %bb
  %v2_cb5c = load i32, i32* @global_var_1a230.41, align 4
  %v1_cb60 = load i32, i32* @lr, align 4
  %v2_cb60 = add i32 %v1_cb60, 12
  %v3_cb60 = inttoptr i32 %v2_cb60 to i32*
  store i32 %v2_cb5c, i32* %v3_cb60, align 4
  store i32 %v2_cacc, i32* %r2.global-to-local, align 4
  %v1_cb68 = add i32 %v2_cacc, 16
  %v2_cb68 = inttoptr i32 %v1_cb68 to i32*
  %v3_cb68 = load i32, i32* %v2_cb68, align 4
  %v1_cb6c = load i32, i32* @lr, align 4
  %v2_cb6c = add i32 %v1_cb6c, 16
  %v3_cb6c = inttoptr i32 %v2_cb6c to i32*
  store i32 %v3_cb68, i32* %v3_cb6c, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_cb74 = load i32, i32* @lr, align 4
  %v1_cb74 = add i32 %v0_cb74, 20
  store i32 %v1_cb74, i32* %r4.global-to-local, align 4
  %v2_cb78 = add i32 %v0_cb74, 28
  %v3_cb78 = inttoptr i32 %v2_cb78 to i32*
  store i32 -1, i32* %v3_cb78, align 4
  %v0_cb7c = load i32, i32* %r5.global-to-local, align 4
  %v1_cb7c = trunc i32 %v0_cb7c to i16
  %v2_cb7c = load i32, i32* @lr, align 4
  %v3_cb7c = add i32 %v2_cb7c, 4
  %v4_cb7c = inttoptr i32 %v3_cb7c to i16*
  store i16 %v1_cb7c, i16* %v4_cb7c, align 2
  %v0_cb80 = load i32, i32* @lr, align 4
  %v1_cb80 = add i32 %v0_cb80, 32
  %v0_cb84 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb84 = trunc i32 %v0_cb84 to i16
  %v2_cb84 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb84 = add i32 %v2_cb84, 4
  %v4_cb84 = inttoptr i32 %v3_cb84 to i16*
  store i16 %v1_cb84, i16* %v4_cb84, align 2
  %v0_cb88 = load i32, i32* %r7.global-to-local, align 4
  %v1_cb88 = trunc i32 %v0_cb88 to i16
  %v2_cb88 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb88 = add i32 %v2_cb88, 2
  %v4_cb88 = inttoptr i32 %v3_cb88 to i16*
  store i16 %v1_cb88, i16* %v4_cb88, align 2
  %v0_cb8c = load i32, i32* %r6.global-to-local, align 4
  %v1_cb8c = trunc i32 %v0_cb8c to i16
  %v2_cb8c = load i32, i32* @lr, align 4
  %v3_cb8c = add i32 %v2_cb8c, 20
  %v4_cb8c = inttoptr i32 %v3_cb8c to i16*
  store i16 %v1_cb8c, i16* %v4_cb8c, align 2
  %v3_cb90 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cb90, i32* %r2.global-to-local, align 4
  %v3_cb94 = call i32 @function_1175c(i32 %v1_cb80, i32 %v3_ca08, i32 %v3_cb90)
  %v3_cb98 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cb98, i32* %r3.global-to-local, align 4
  %v1_cb9c = add i32 %v3_cb98, 1
  store i32 %v1_cb9c, i32* @r4, align 4
  %v1_cba0 = load i32, i32* @r8, align 4
  %v9_cba0 = icmp eq i32 %v1_cb9c, %v1_cba0
  store i1 %v9_cba0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb9c, i32* %stack_var_-44, align 4
  %v5_cba8 = icmp slt i32 %v1_cb9c, %v1_cba0
  br i1 %v5_cba8, label %dec_label_pc_cab0, label %dec_label_pc_cbac.preheader

dec_label_pc_cbac.preheader:                      ; preds = %.thread, %dec_label_pc_ca54
  %v0_cbb0.ph = phi i32 [ 0, %dec_label_pc_ca54 ], [ %v1_cba0, %.thread ]
  %v3_cbec = icmp eq i32 %v3_ca64, 65535
  br label %dec_label_pc_cbac

dec_label_pc_cbac:                                ; preds = %dec_label_pc_cbac, %dec_label_pc_cc98, %dec_label_pc_cbac.preheader
  %v0_cbb0 = phi i32 [ %v0_cbb0.ph, %dec_label_pc_cbac.preheader ], [ 0, %dec_label_pc_cc98 ], [ 0, %dec_label_pc_cbac ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_cbb0 = icmp eq i32 %v0_cbb0, 0
  store i1 %v2_cbb0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_cbb0, label %dec_label_pc_cbac, label %dec_label_pc_cbbc

dec_label_pc_cbbc:                                ; preds = %dec_label_pc_cbac, %dec_label_pc_cc98
  br label %dec_label_pc_cbc0

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_cc0c, %dec_label_pc_cbbc
  %v1_cbd0 = phi i32 [ %v1_cc88, %dec_label_pc_cc0c ], [ 0, %dec_label_pc_cbbc ]
  %v5_cbc4 = mul i32 %v1_cbd0, 24
  %v1_cbc8 = load i32, i32* @sl, align 4
  %v2_cbc8 = add i32 %v1_cbc8, %v5_cbc4
  store i32 %v2_cbc8, i32* %r3.global-to-local, align 4
  %v1_cbcc = add i32 %v2_cbc8, 20
  %v2_cbcc = inttoptr i32 %v1_cbcc to i8*
  %v3_cbcc = load i8, i8* %v2_cbcc, align 1
  %v4_cbcc = zext i8 %v3_cbcc to i32
  store i32 %v4_cbcc, i32* %r2.global-to-local, align 4
  %v0_cbd0 = load i32, i32* %fp.global-to-local, align 4
  %v4_cbd0 = mul i32 %v1_cbd0, 4
  %v5_cbd0 = add i32 %v0_cbd0, %v4_cbd0
  %v6_cbd0 = inttoptr i32 %v5_cbd0 to i32*
  %v7_cbd0 = load i32, i32* %v6_cbd0, align 4
  store i32 %v7_cbd0, i32* @r5, align 4
  %v7_cbd8 = icmp eq i8 %v3_cbcc, 31
  store i1 %v7_cbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_cbe0 = add i32 %v7_cbd0, 20
  store i32 %v1_cbe0, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_cbcc, 32
  br i1 %tmp40, label %dec_label_pc_ccac, label %dec_label_pc_cbe8

dec_label_pc_cbe8:                                ; preds = %dec_label_pc_cbc0
  store i32 %v3_ca64, i32* %r3.global-to-local, align 4
  store i1 %v3_cbec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cbec, label %dec_label_pc_cd0c, label %dec_label_pc_cbf4

dec_label_pc_cbf4:                                ; preds = %dec_label_pc_ccac, %dec_label_pc_cbe8
  %v1_cbf8 = phi i32 [ %v1_cd04, %dec_label_pc_ccac ], [ 65535, %dec_label_pc_cbe8 ]
  store i32 %v3_ca68, i32* %ip.global-to-local, align 4
  %v9_cbf8 = icmp eq i32 %v3_ca68, %v1_cbf8
  store i1 %v9_cbf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbf8, label %dec_label_pc_cd20, label %dec_label_pc_cc00

dec_label_pc_cc00:                                ; preds = %dec_label_pc_cd0c.dec_label_pc_cc00_crit_edge, %dec_label_pc_cbf4
  %v1_cc04 = phi i32 [ %v1_cc04.pre, %dec_label_pc_cd0c.dec_label_pc_cc00_crit_edge ], [ %v1_cbf8, %dec_label_pc_cbf4 ]
  %v9_cc04 = icmp eq i32 %v3_ca6c, %v1_cc04
  store i1 %v9_cc04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc04, label %dec_label_pc_cd34, label %dec_label_pc_cc0c

dec_label_pc_cc0c:                                ; preds = %dec_label_pc_cd20, %dec_label_pc_cc00, %dec_label_pc_cd34
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cc10 = load i32, i32* @r5, align 4
  %v3_cc10 = add i32 %v2_cc10, 10
  %v4_cc10 = inttoptr i32 %v3_cc10 to i16*
  store i16 0, i16* %v4_cc10, align 2
  %v0_cc18 = load i32, i32* @r5, align 4
  store i32 %v0_cc18, i32* @r0, align 4
  %v2_cc1c = call i32 @function_d414(i32 %v0_cc18, i32 20)
  %v3_cc1c = trunc i32 %v2_cc1c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cc24 = load i32, i32* @r5, align 4
  %v4_cc24 = add i32 %v3_cc24, 10
  %v5_cc24 = inttoptr i32 %v4_cc24 to i16*
  store i16 %v3_cc1c, i16* %v5_cc24, align 2
  %v0_cc28 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc28 = trunc i32 %v0_cc28 to i16
  %v2_cc28 = load i32, i32* @r6, align 4
  %v3_cc28 = add i32 %v2_cc28, 6
  %v4_cc28 = inttoptr i32 %v3_cc28 to i16*
  store i16 %v1_cc28, i16* %v4_cc28, align 2
  %v3_cc2c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cc2c, i32* %r3.global-to-local, align 4
  %v0_cc30 = load i32, i32* @r6, align 4
  store i32 %v0_cc30, i32* @r1, align 4
  %v1_cc34 = add i32 %v0_cc30, 4
  %v2_cc34 = inttoptr i32 %v1_cc34 to i16*
  %v3_cc34 = load i16, i16* %v2_cc34, align 2
  %v4_cc34 = zext i16 %v3_cc34 to i32
  store i32 %v4_cc34, i32* %r2.global-to-local, align 4
  %v1_cc38 = add i32 %v3_cc2c, 12
  store i32 %v1_cc38, i32* %r3.global-to-local, align 4
  %v0_cc3c = load i32, i32* @r5, align 4
  %v4_cc40 = call i32 @function_d464(i32 %v0_cc3c, i32 %v0_cc30, i32 %v4_cc34, i32 %v1_cc38)
  %v5_cc40 = trunc i32 %v4_cc40 to i16
  %v3_cc44 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cc44, i32* %r3.global-to-local, align 4
  %v3_cc48 = mul i32 %v3_cc44, 32
  store i32 %v3_cc48, i32* %lr.global-to-local, align 4
  %v3_cc4c = load i32, i32* @r6, align 4
  %v4_cc4c = add i32 %v3_cc4c, 6
  %v5_cc4c = inttoptr i32 %v4_cc4c to i16*
  store i16 %v5_cc40, i16* %v5_cc4c, align 2
  %v0_cc50 = load i32, i32* %lr.global-to-local, align 4
  %v1_cc50 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_cc50, -8
  %v5_cc50 = add i32 %v0_cc50, %tmp41
  store i32 %v5_cc50, i32* %lr.global-to-local, align 4
  %v0_cc54 = load i32, i32* @r6, align 4
  %v1_cc54 = add i32 %v0_cc54, 2
  %v2_cc54 = inttoptr i32 %v1_cc54 to i16*
  %v3_cc54 = load i16, i16* %v2_cc54, align 2
  %v4_cc54 = zext i16 %v3_cc54 to i32
  store i32 %v4_cc54, i32* %r6.global-to-local, align 4
  %v3_cc58 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cc58, i32* %r2.global-to-local, align 4
  %v1_cc5c = load i32, i32* @sl, align 4
  %v2_cc5c = add i32 %v1_cc5c, %v5_cc50
  store i32 %v2_cc5c, i32* @lr, align 4
  %v3_cc60 = add i32 %v2_cc5c, 2
  %v4_cc60 = inttoptr i32 %v3_cc60 to i16*
  store i16 %v3_cc54, i16* %v4_cc60, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_cc6c = load i32, i32* @r5, align 4
  %v0_cc70 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc70 = add i32 %v0_cc70, 32
  store i32 %v1_cc70, i32* %r2.global-to-local, align 4
  %v0_cc74 = load i32, i32* %sb.global-to-local, align 4
  %v0_cc78 = load i32, i32* @lr, align 4
  %v4_cc78 = inttoptr i32 %v0_cc78 to %sockaddr*
  %v7_cc80 = inttoptr i32 %v0_cc6c to i32*
  %v9_cc80 = call i32 @sendto(i32 %v0_cc74, i32* %v7_cc80, i32 %v1_cc70, i32 16384, %sockaddr* %v4_cc78, i32 16)
  %v3_cc84 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cc84, i32* %r3.global-to-local, align 4
  %v1_cc88 = add i32 %v3_cc84, 1
  %v1_cc8c = load i32, i32* @r8, align 4
  %v9_cc8c = icmp eq i32 %v1_cc88, %v1_cc8c
  store i1 %v9_cc8c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cc88, i32* %stack_var_-44, align 4
  %v5_cc94 = icmp slt i32 %v1_cc88, %v1_cc8c
  br i1 %v5_cc94, label %dec_label_pc_cbc0, label %dec_label_pc_cc98

dec_label_pc_cc98:                                ; preds = %dec_label_pc_cc0c
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_cc9c = icmp eq i32 %v1_cc8c, 0
  store i1 %v2_cc9c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_cc9c, label %dec_label_pc_cbac, label %dec_label_pc_cbbc

dec_label_pc_ccac:                                ; preds = %dec_label_pc_cbc0
  %v1_ccac = add i32 %v2_cbc8, 16
  %v2_ccac = inttoptr i32 %v1_ccac to i32*
  %v3_ccac = load i32, i32* %v2_ccac, align 4
  store i32 %v3_ccac, i32* @r4, align 4
  %v0_ccb0 = call i32 @function_ee68()
  %v3_ccb4 = load i32, i32* %stack_var_-44, align 4
  %v5_ccbc = mul i32 %v3_ccb4, 24
  %v0_ccc0 = load i32, i32* @r4, align 4
  %v1_ccc0 = and i32 %v0_ccc0, 16711680
  store i32 %v1_ccc0, i32* %ip.global-to-local, align 4
  %v3_ccc4 = udiv i32 %v0_ccc0, 16777216
  %v4_ccc8 = udiv i32 %v1_ccc0, 256
  %v5_ccc8 = or i32 %v4_ccc8, %v3_ccc4
  store i32 %v5_ccc8, i32* %r2.global-to-local, align 4
  %v1_cccc = load i32, i32* @sl, align 4
  %v2_cccc = add i32 %v1_cccc, %v5_ccbc
  %v1_ccd0 = and i32 %v0_ccc0, 65280
  store i32 %v1_ccd0, i32* %r3.global-to-local, align 4
  %v1_ccd4 = add i32 %v2_cccc, 20
  %v2_ccd4 = inttoptr i32 %v1_ccd4 to i8*
  %v3_ccd4 = load i8, i8* %v2_ccd4, align 1
  %v4_ccd4 = zext i8 %v3_ccd4 to i32
  store i32 %v4_ccd4, i32* %ip.global-to-local, align 4
  %v5_ccdc = call i32 @llvm.bswap.i32(i32 %v0_ccc0)
  %v7_cce0 = lshr i32 %v0_ccb0, %v4_ccd4
  %v8_cce0 = add i32 %v7_cce0, %v5_ccdc
  store i32 %v8_cce0, i32* %r2.global-to-local, align 4
  %v5_ccf8 = call i32 @llvm.bswap.i32(i32 %v8_cce0)
  %v1_ccfc = load i32, i32* @r5, align 4
  %v2_ccfc = add i32 %v1_ccfc, 16
  %v3_ccfc = inttoptr i32 %v2_ccfc to i32*
  store i32 %v5_ccf8, i32* %v3_ccfc, align 4
  store i32 %v3_ca64, i32* %r3.global-to-local, align 4
  %v1_cd04 = load i32, i32* %r7.global-to-local, align 4
  %v9_cd04 = icmp eq i32 %v3_ca64, %v1_cd04
  store i1 %v9_cd04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cd04, label %dec_label_pc_cd0c, label %dec_label_pc_cbf4

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_ccac, %dec_label_pc_cbe8
  %v0_cd0c = call i32 @function_ee68()
  %v1_cd0c = trunc i32 %v0_cd0c to i16
  store i32 %v3_ca68, i32* %ip.global-to-local, align 4
  %v1_cd14 = load i32, i32* %r7.global-to-local, align 4
  %v9_cd14 = icmp eq i32 %v3_ca68, %v1_cd14
  store i1 %v9_cd14, i1* %cpsr_z.global-to-local, align 1
  %v3_cd18 = load i32, i32* @r5, align 4
  %v4_cd18 = add i32 %v3_cd18, 4
  %v5_cd18 = inttoptr i32 %v4_cd18 to i16*
  store i16 %v1_cd0c, i16* %v5_cd18, align 2
  br i1 %v9_cd14, label %dec_label_pc_cd20, label %dec_label_pc_cd0c.dec_label_pc_cc00_crit_edge

dec_label_pc_cd0c.dec_label_pc_cc00_crit_edge:    ; preds = %dec_label_pc_cd0c
  %v1_cc04.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cc00

dec_label_pc_cd20:                                ; preds = %dec_label_pc_cd0c, %dec_label_pc_cbf4
  %v0_cd20 = call i32 @function_ee68()
  %v1_cd20 = trunc i32 %v0_cd20 to i16
  %v1_cd28 = load i32, i32* %r7.global-to-local, align 4
  %v9_cd28 = icmp eq i32 %v3_ca6c, %v1_cd28
  store i1 %v9_cd28, i1* %cpsr_z.global-to-local, align 1
  %v3_cd2c = load i32, i32* @r5, align 4
  %v4_cd2c = add i32 %v3_cd2c, 20
  %v5_cd2c = inttoptr i32 %v4_cd2c to i16*
  store i16 %v1_cd20, i16* %v5_cd2c, align 2
  br i1 %v9_cd28, label %dec_label_pc_cd34, label %dec_label_pc_cc0c

dec_label_pc_cd34:                                ; preds = %dec_label_pc_cd20, %dec_label_pc_cc00
  %v0_cd34 = call i32 @function_ee68()
  %v1_cd34 = trunc i32 %v0_cd34 to i16
  %v3_cd38 = load i32, i32* @r6, align 4
  %v4_cd38 = add i32 %v3_cd38, 2
  %v5_cd38 = inttoptr i32 %v4_cd38 to i16*
  store i16 %v1_cd34, i16* %v5_cd38, align 2
  br label %dec_label_pc_cc0c

dec_label_pc_cd40:                                ; preds = %dec_label_pc_ca2c
  %v0_cd40 = load i32, i32* %sb.global-to-local, align 4
  %v1_cd44 = call i32 @close(i32 %v0_cd40)
  br label %dec_label_pc_cd48

dec_label_pc_cd48:                                ; preds = %dec_label_pc_c920, %dec_label_pc_cd40
  %v1_cd50 = phi i32 [ -1, %dec_label_pc_c920 ], [ %v1_cd44, %dec_label_pc_cd40 ]
  store i32 %v3_c920, i32* %r4.global-to-local, align 4
  store i32 %v6_c920, i32* %r5.global-to-local, align 4
  store i32 %v9_c920, i32* %r6.global-to-local, align 4
  store i32 %v12_c920, i32* %r7.global-to-local, align 4
  store i32 %v27_c920, i32* %lr.global-to-local, align 4
  ret i32 %v1_cd50

; uselistorder directives
  uselistorder i32 %v1_cd04, { 1, 0 }
  uselistorder i32 %v0_ccc0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_cc88, { 2, 0, 3, 1 }
  uselistorder i32 %v5_cc50, { 1, 0 }
  uselistorder i1 %v3_cbec, { 1, 0 }
  uselistorder i32 %v1_cb9c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cb04, { 1, 0 }
  uselistorder i32 %v3_ca9c, { 1, 0 }
  uselistorder i32 %v3_ca98, { 1, 0 }
  uselistorder i32 %v0_ca5c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_ca58, { 1, 0, 2 }
  uselistorder i32 %v0_ca54, { 1, 0, 2 }
  uselistorder i32 %v1_c9bc, { 1, 2, 0 }
  uselistorder i32 %v5_c9b0, { 1, 0 }
  uselistorder i32 %v6_c954, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder label %dec_label_pc_cd48, { 1, 0 }
  uselistorder label %dec_label_pc_cc0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cbbc, { 1, 0 }
  uselistorder label %dec_label_pc_cbac, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_cd58(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cd58:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v3_cd58 = load i32, i32* @r4, align 4
  %v6_cd58 = load i32, i32* @r5, align 4
  %v9_cd58 = load i32, i32* @r6, align 4
  %v12_cd58 = load i32, i32* @r7, align 4
  %v18_cd58 = load i32, i32* @sb, align 4
  %v21_cd58 = load i32, i32* @sl, align 4
  %v27_cd58 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_cd78 = call i32* @calloc(i32 4, i32 4)
  %v4_cd78 = ptrtoint i32* %v2_cd78 to i32
  %v0_cd7c = load i32, i32* @r5, align 4
  store i32 %v0_cd7c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cd88 = load i32, i32* @r4, align 4
  store i32 %v0_cd88, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_cd90 = inttoptr i32 %v0_cd7c to i32*
  %v6_cd90 = call i32 @function_913c(i32 %v0_cd88, i32* %v5_cd90, i32 2, i32 0, i32 %v4_cd78)
  %v1_cd9c = urem i32 %v6_cd90, 256
  store i32 %v1_cd9c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cda8 = load i32, i32* @r4, align 4
  store i32 %v0_cda8, i32* %r0.global-to-local, align 4
  %v0_cdac = load i32, i32* @r5, align 4
  store i32 %v0_cdac, i32* %r1.global-to-local, align 4
  %sext23 = mul i32 %v6_cd90, 16777216
  %v5_cdb4 = sdiv i32 %sext23, 16777216
  %v6_cdb4 = inttoptr i32 %v0_cdac to i32*
  %v7_cdb4 = call i32 @function_913c(i32 %v0_cda8, i32* %v6_cdb4, i32 3, i32 65535, i32 %v5_cdb4)
  %v0_cdb8 = load i32, i32* @r5, align 4
  store i32 %v0_cdb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_cdc4 = load i32, i32* @r4, align 4
  store i32 %v0_cdc4, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_cdcc = inttoptr i32 %v0_cdb8 to i32*
  %v6_cdcc = call i32 @function_913c(i32 %v0_cdc4, i32* %v5_cdcc, i32 4, i32 64, i32 %v7_cdb4)
  %v1_cdd4 = urem i32 %v6_cdcc, 256
  store i32 %v1_cdd4, i32* %ip.global-to-local, align 4
  %v0_cdd8 = load i32, i32* @r5, align 4
  store i32 %v0_cdd8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cde4 = load i32, i32* @r4, align 4
  store i32 %v0_cde4, i32* %r0.global-to-local, align 4
  %sext24 = mul i32 %v6_cdcc, 16777216
  %v5_cdec = sdiv i32 %sext24, 16777216
  %v6_cdec = inttoptr i32 %v0_cdd8 to i32*
  %v7_cdec = call i32 @function_913c(i32 %v0_cde4, i32* %v6_cdec, i32 5, i32 0, i32 %v5_cdec)
  %v1_cdf8 = urem i32 %v7_cdec, 256
  store i32 %v1_cdf8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ce04 = load i32, i32* @r4, align 4
  store i32 %v0_ce04, i32* %r0.global-to-local, align 4
  %v0_ce08 = load i32, i32* @r5, align 4
  store i32 %v0_ce08, i32* %r1.global-to-local, align 4
  %v5_ce10 = inttoptr i32 %v0_ce08 to i32*
  %v6_ce10 = call i32 @function_913c(i32 %v0_ce04, i32* %v5_ce10, i32 6, i32 65535, i32 %v1_cdf8)
  %v0_ce14 = load i32, i32* @r5, align 4
  store i32 %v0_ce14, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ce20 = load i32, i32* @r4, align 4
  store i32 %v0_ce20, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_ce28 = inttoptr i32 %v0_ce14 to i32*
  %v6_ce28 = call i32 @function_913c(i32 %v0_ce20, i32* %v5_ce28, i32 7, i32 53, i32 %v6_ce10)
  %v0_ce34 = load i32, i32* @r5, align 4
  store i32 %v0_ce34, i32* %r1.global-to-local, align 4
  %v0_ce38 = load i32, i32* @r4, align 4
  store i32 %v0_ce38, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ce44 = inttoptr i32 %v0_ce34 to i32*
  %v6_ce44 = call i32 @function_913c(i32 %v0_ce38, i32* %v5_ce44, i32 9, i32 65535, i32 %v6_ce28)
  %v0_ce48 = load i32, i32* @r5, align 4
  store i32 %v0_ce48, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_ce54 = load i32, i32* @r4, align 4
  store i32 %v0_ce54, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_ce5c = inttoptr i32 %v0_ce48 to i32*
  %v6_ce5c = call i32 @function_913c(i32 %v0_ce54, i32* %v5_ce5c, i32 0, i32 12, i32 %v6_ce44)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ce68 = load i32, i32* @r5, align 4
  store i32 %v0_ce68, i32* %r1.global-to-local, align 4
  store i32 %v6_ce5c, i32* %sb.global-to-local, align 4
  %v0_ce70 = load i32, i32* @r4, align 4
  store i32 %v0_ce70, i32* %r0.global-to-local, align 4
  %v4_ce74 = inttoptr i32 %v0_ce68 to i32*
  %v5_ce74 = call i32 @function_8d5c(i32 %v0_ce70, i32* %v4_ce74, i32 8, i32 0)
  store i32 %v5_ce74, i32* %r7.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ce80 = call i32 @function_110b8(i32 26)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_ce8c = call i32 @function_10ff4(i32 26, i32* null)
  %v4_ce8c = inttoptr i32 %v3_ce8c to i8*
  store i32 %v3_ce8c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_ce94 = call i32 (i8*, i32, ...) @open(i8* %v4_ce8c, i32 0)
  store i32 %v4_ce94, i32* @r4, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_cea0 = call i32 @function_11018(i32 26)
  store i32 %v1_cea0, i32* %r0.global-to-local, align 4
  %v0_cea4 = load i32, i32* @r4, align 4
  %v1_cea4 = icmp slt i32 %v0_cea4, 0
  %v2_cea4 = icmp eq i32 %v0_cea4, 0
  store i1 %v2_cea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_cea4, label %dec_label_pc_d39c, label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %dec_label_pc_cd58
  %v2_ceb0 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_ceb0, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ceb0, i32* %r1.global-to-local, align 4
  store i32 %v0_cea4, i32* %r0.global-to-local, align 4
  %v4_cec0 = call i32 @read(i32 %v0_cea4, i32* nonnull %stack_var_-2124, i32 2048)
  store i32 %v4_cec0, i32* @r5, align 4
  %v0_cec8 = load i32, i32* @r4, align 4
  store i32 %v0_cec8, i32* %r0.global-to-local, align 4
  %v1_cecc = call i32 @close(i32 %v0_cec8)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_ced4 = call i32 @function_110b8(i32 27)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_cee0 = call i32 @function_10ff4(i32 27, i32* null)
  %v0_cee4 = load i32, i32* @r5, align 4
  store i32 %v0_cee4, i32* @r1, align 4
  store i32 %v3_cee0, i32* %r2.global-to-local, align 4
  store i32 %v2_ceb0, i32* %r0.global-to-local, align 4
  %v3_cef0 = bitcast i32* %stack_var_-2124 to i8*
  %v4_cef0 = call i32 @function_11a3c(i8* %v3_cef0, i32 %v0_cee4, i32 %v3_cee0)
  store i32 %v4_cef0, i32* @r6, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_cefc = call i32 @function_11018(i32 27)
  store i32 %v1_cefc, i32* %r0.global-to-local, align 4
  %v0_cf00 = load i32, i32* @r6, align 4
  %v2_cf00 = icmp eq i32 %v0_cf00, -1
  store i1 %v2_cf00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cf00, label %dec_label_pc_d39c, label %dec_label_pc_cf08

dec_label_pc_cf08:                                ; preds = %dec_label_pc_ceac
  %v0_cf08 = load i32, i32* @r5, align 4
  %v9_cf08 = icmp eq i32 %v0_cf08, %v0_cf00
  store i1 %v9_cf08, i1* %cpsr_z.global-to-local, align 1
  %v7_cf0c = icmp sgt i32 %v0_cf08, %v0_cf00
  br i1 %v7_cf0c, label %dec_label_pc_cf10, label %dec_label_pc_d39c

dec_label_pc_cf10:                                ; preds = %dec_label_pc_cf08
  %v0_cf10 = load i32, i32* %sl.global-to-local, align 4
  %v2_cf10 = add i32 %v0_cf10, %v0_cf00
  store i32 %v2_cf10, i32* %r2.global-to-local, align 4
  store i32 %v0_cf00, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cf3c = add i32 %v0_cf08, -1
  br label %dec_label_pc_cf34

dec_label_pc_cf20:                                ; preds = %dec_label_pc_cf5c, %bb104
  %v9_cf20 = icmp eq i32 %v1_cf3c, %v0_cf28
  store i1 %v9_cf20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cf20, label %dec_label_pc_cf68, label %dec_label_pc_cf28

dec_label_pc_cf28:                                ; preds = %dec_label_pc_cf4c, %dec_label_pc_cf20, %bb
  %v0_cf5830 = phi i32 [ %v0_cf58, %dec_label_pc_cf4c ], [ %v0_cf5831, %dec_label_pc_cf20 ], [ %v0_cf58, %bb ]
  %v0_cf3826 = phi i32 [ 0, %dec_label_pc_cf4c ], [ %v0_cf3827, %dec_label_pc_cf20 ], [ 0, %bb ]
  %v1_cf28 = add i32 %v0_cf28, 1
  store i32 %v1_cf28, i32* %r4.global-to-local, align 4
  %v9_cf2c = icmp eq i32 %v1_cf28, %v0_cf08
  store i1 %v9_cf2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cf2c, label %dec_label_pc_d39c, label %dec_label_pc_cf34

dec_label_pc_cf34:                                ; preds = %dec_label_pc_cf28, %dec_label_pc_cf10
  %v0_cf28 = phi i32 [ %v1_cf28, %dec_label_pc_cf28 ], [ %v0_cf00, %dec_label_pc_cf10 ]
  %v0_cf58 = phi i32 [ %v0_cf5830, %dec_label_pc_cf28 ], [ 0, %dec_label_pc_cf10 ]
  %v0_cf38 = phi i32 [ %v0_cf3826, %dec_label_pc_cf28 ], [ 0, %dec_label_pc_cf10 ]
  %v0_cf40 = phi i32 [ %v1_cf40, %dec_label_pc_cf28 ], [ %v2_cf10, %dec_label_pc_cf10 ]
  %v1_cf34 = inttoptr i32 %v0_cf40 to i8*
  %v2_cf34 = load i8, i8* %v1_cf34, align 1
  %v3_cf34 = zext i8 %v2_cf34 to i32
  store i32 %v3_cf34, i32* %r3.global-to-local, align 4
  %v2_cf38 = icmp eq i32 %v0_cf38, 0
  store i1 %v2_cf38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf3c, i32* %r0.global-to-local, align 4
  %v1_cf40 = add i32 %v0_cf40, 1
  store i32 %v1_cf40, i32* %r2.global-to-local, align 4
  %v1_cf44 = add nsw i32 %v3_cf34, -48
  store i32 %v1_cf44, i32* %r1.global-to-local, align 4
  br i1 %v2_cf38, label %dec_label_pc_cf4c, label %dec_label_pc_cf5c

dec_label_pc_cf4c:                                ; preds = %dec_label_pc_cf34
  %v7_cf4c = icmp eq i8 %v2_cf34, 9
  store i1 %v7_cf4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cf4c, label %dec_label_pc_cf28, label %bb

bb:                                               ; preds = %dec_label_pc_cf4c
  %v8_cf50 = icmp eq i8 %v2_cf34, 32
  store i1 %v8_cf50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cf50, label %dec_label_pc_cf28, label %dec_label_pc_cf58

dec_label_pc_cf58:                                ; preds = %bb
  %v1_cf58 = add i32 %v0_cf58, 1
  store i32 %v1_cf58, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_cf5c

dec_label_pc_cf5c:                                ; preds = %dec_label_pc_cf34, %dec_label_pc_cf58
  %v0_cf5831 = phi i32 [ %v0_cf58, %dec_label_pc_cf34 ], [ %v1_cf58, %dec_label_pc_cf58 ]
  %v0_cf3827 = phi i32 [ %v0_cf38, %dec_label_pc_cf34 ], [ %v1_cf58, %dec_label_pc_cf58 ]
  %v7_cf5c = icmp eq i8 %v2_cf34, 46
  store i1 %v7_cf5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cf5c, label %dec_label_pc_cf20, label %bb104

bb104:                                            ; preds = %dec_label_pc_cf5c
  %v8_cf60 = icmp eq i32 %v1_cf44, 9
  store i1 %v8_cf60, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_cf44, 10
  br i1 %tmp, label %dec_label_pc_cf20, label %dec_label_pc_cf68

dec_label_pc_cf68:                                ; preds = %dec_label_pc_cf20, %bb104
  %v0_cf28.lcssa = phi i32 [ %v1_cf3c, %dec_label_pc_cf20 ], [ %v0_cf28, %bb104 ]
  %v2_cf6c = sub i32 %v0_cf28.lcssa, %v0_cf00
  store i32 %v2_cf6c, i32* %r4.global-to-local, align 4
  %v2_cf70 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_cf70, i32* %r5.global-to-local, align 4
  store i32 %v2_cf10, i32* %r1.global-to-local, align 4
  store i32 %v2_cf70, i32* %r0.global-to-local, align 4
  store i32 %v2_cf6c, i32* %r2.global-to-local, align 4
  %v3_cf80 = call i32 @function_1175c(i32 %v2_cf70, i32 %v2_cf10, i32 %v2_cf6c)
  %v2_cf84 = ptrtoint i32* %stack_var_-40 to i32
  %v1_cf88 = load i32, i32* %r4.global-to-local, align 4
  %v2_cf88 = add i32 %v1_cf88, %v2_cf84
  store i32 %v2_cf88, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp105 = bitcast i32* %stack_var_-76 to i8*
  store i32 %v2_cf70, i32* %r0.global-to-local, align 4
  %v3_cf94 = add i32 %v2_cf88, -36
  %v4_cf94 = inttoptr i32 %v3_cf94 to i8*
  store i8 0, i8* %v4_cf94, align 1
  %v3_cf98 = call i32 @inet_addr(i8* %tmp105)
  store i32 %v3_cf98, i32* %r0.global-to-local, align 4
  store i32 %v3_cf98, i32* @fp, align 4
  br label %dec_label_pc_cfa0

dec_label_pc_cfa010:                              ; preds = %dec_label_pc_d39c
  unreachable

dec_label_pc_cfa0:                                ; preds = %dec_label_pc_d404, %dec_label_pc_d3f8, %dec_label_pc_d3e8, %dec_label_pc_d3d8, %dec_label_pc_cf68
  %v1_d3d450 = phi i32 [ %v1_d3a0, %dec_label_pc_d404 ], [ %v1_d3a0, %dec_label_pc_d3f8 ], [ %v1_d3a0, %dec_label_pc_d3e8 ], [ %v1_d3a0, %dec_label_pc_d3d8 ], [ %v3_cf98, %dec_label_pc_cf68 ]
  %v0_cfa0 = load i32, i32* %r7.global-to-local, align 4
  %v2_cfa0 = icmp eq i32 %v0_cfa0, 0
  store i1 %v2_cfa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cfa0, label %dec_label_pc_d3c8, label %dec_label_pc_cfa8

dec_label_pc_cfa8:                                ; preds = %dec_label_pc_cfa0
  store i32 %v0_cfa0, i32* %r0.global-to-local, align 4
  %v1_cfac = inttoptr i32 %v0_cfa0 to i8*
  %v2_cfac = call i32 @function_116ec(i8* %v1_cfac)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_cfac, i32* %r6.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cfc0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_cfc0, i32* %r0.global-to-local, align 4
  %v2_cfc4 = icmp eq i32 %v3_cfc0, -1
  store i1 %v2_cfc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cfc4, label %dec_label_pc_d3c8, label %dec_label_pc_cfd0

dec_label_pc_cfd0:                                ; preds = %dec_label_pc_cfa8
  store i32 1, i32* %stack_var_-44, align 4
  %v6_cfd8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_cfd8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_cfec = call i32 @setsockopt(i32 %v3_cfc0, i32 0, i32 3, i32* nonnull %stack_var_-44, i32 4)
  store i32 %v7_cfec, i32* %r0.global-to-local, align 4
  %v2_cff0 = icmp eq i32 %v7_cfec, -1
  store i1 %v2_cff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cff0, label %dec_label_pc_d3c0, label %dec_label_pc_cff8

dec_label_pc_cff8:                                ; preds = %dec_label_pc_cfd0
  %v0_d000 = load i32, i32* %sb.global-to-local, align 4
  %v1_d000 = urem i32 %v0_d000, 256
  store i32 %v1_d000, i32* %sb.global-to-local, align 4
  %v3_d008 = mul i32 %v6_ce10, 65536
  store i32 %v3_d008, i32* %r3.global-to-local, align 4
  %v5_d014 = trunc i32 %v0_d000 to i8
  %v0_d018 = load i32, i32* @r8, align 4
  %v2_d018 = icmp eq i32 %v0_d018, 0
  store i1 %v2_d018, i1* %cpsr_z.global-to-local, align 1
  %v3_d01c = urem i32 %v7_cdb4, 65536
  store i32 %v3_d01c, i32* %r0.global-to-local, align 4
  %v3_d024 = urem i32 %v6_ce10, 65536
  store i32 %v3_d024, i32* %r2.global-to-local, align 4
  %v3_d028 = mul i32 %v6_ce28, 65536
  store i32 %v3_d028, i32* %sl.global-to-local, align 4
  %v3_d02c = mul i32 %v6_ce44, 65536
  store i32 %v3_d02c, i32* %ip.global-to-local, align 4
  br i1 %v2_d018, label %bb106, label %bb107

bb106:                                            ; preds = %dec_label_pc_cff8
  %v5_d034 = sext i8 %v5_d014 to i32
  store i32 %v5_d034, i32* %r2.global-to-local, align 4
  br label %bb107

bb107:                                            ; preds = %dec_label_pc_cff8, %bb106
  %v2_d060 = phi i32 [ %v3_d024, %dec_label_pc_cff8 ], [ %v5_d034, %bb106 ]
  %v3_d040 = urem i32 %v6_ce28, 65536
  store i32 %v3_d040, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_d048 = urem i32 %v6_ce44, 65536
  store i32 %v3_d048, i32* %sl.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_d060 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v2_d018, label %.dec_label_pc_d248.preheader_crit_edge, label %dec_label_pc_d068

.dec_label_pc_d248.preheader_crit_edge:           ; preds = %bb107
  %v3_d060 = add i32 %v1_d060, %v2_d060
  store i32 %v3_d060, i32* @r7, align 4
  %.pre = sext i8 %v5_d014 to i32
  br label %dec_label_pc_d248.preheader

dec_label_pc_d068:                                ; preds = %bb107
  %v2_d068 = add i32 %v1_d060, %v1_d000
  %v3_d06c = mul i32 %v2_d068, 65536
  %v1_d074 = add i32 %v3_d06c, 1769472
  %v1_d078 = add i32 %v3_d06c, 3080192
  %tmp108 = udiv i32 %v1_d078, 256
  %v3_d08c = and i32 %tmp108, 65280
  %v4_d09c = udiv i32 %v1_d078, 16777216
  %v5_d09c = or i32 %v3_d08c, %v4_d09c
  store i32 %v5_d09c, i32* %sl.global-to-local, align 4
  %trunc61 = trunc i32 %v6_ce10 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc61)
  %tmp109 = mul i32 %v7_cdb4, 256
  %v3_d0b0 = and i32 %tmp109, 65280
  store i32 %v3_d0b0, i32* %r1.global-to-local, align 4
  %tmp110 = udiv i32 %v7_cdb4, 256
  %v4_d0b4 = urem i32 %tmp110, 256
  %v5_d0b4 = or i32 %v4_d0b4, %v3_d0b0
  store i32 %v5_d0b4, i32* %sb.global-to-local, align 4
  store i32 %v3_d02c, i32* %r2.global-to-local, align 4
  store i32 %v3_d028, i32* %r0.global-to-local, align 4
  %tmp111 = mul i32 %v6_ce28, 256
  %v3_d0c8 = and i32 %tmp111, 65280
  %tmp112 = mul i32 %v6_ce44, 256
  %v3_d0cc = and i32 %tmp112, 65280
  %tmp113 = udiv i32 %v1_d074, 256
  %v3_d0d0 = and i32 %tmp113, 65280
  store i32 %v3_d0d0, i32* %lr.global-to-local, align 4
  %tmp114 = udiv i32 %v6_ce28, 256
  %v4_d0d4 = urem i32 %tmp114, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  store i32 %v5_d0d4, i32* %ip.global-to-local, align 4
  %tmp115 = udiv i32 %v6_ce44, 256
  %v4_d0d8 = urem i32 %tmp115, 256
  %v5_d0d8 = or i32 %v4_d0d8, %v3_d0cc
  store i32 %v5_d0d8, i32* %r4.global-to-local, align 4
  %v1_d0dc = add i32 %v1_d060, 1
  store i32 %v1_d0dc, i32* %r3.global-to-local, align 4
  %v4_d0e0 = udiv i32 %v1_d074, 16777216
  %v5_d0e0 = or i32 %v4_d0e0, %tmp113
  store i32 0, i32* %r5.global-to-local, align 4
  %v4_d164 = sext i8 %v5_d014 to i32
  %sext = mul nuw i32 %v5_d0d4, 65536
  %v7_d178 = sdiv i32 %sext, 65536
  %sext9 = mul nuw i32 %v5_d0d8, 65536
  %v4_d1a0 = sdiv i32 %sext9, 65536
  %v1_d140 = trunc i32 %v5_cdb4 to i8
  %extract.t = trunc i32 %v5_cdec to i8
  %v1_d168 = add nsw i32 %v4_d164, 41
  %sext122 = mul i32 %v5_d0e0, 65536
  %v3_d178 = sdiv i32 %sext122, 65536
  br label %dec_label_pc_d0f8

dec_label_pc_d0f8:                                ; preds = %dec_label_pc_d218, %dec_label_pc_d068
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_d100 = call i32* @calloc(i32 600, i32 1)
  %v4_d100 = ptrtoint i32* %v2_d100 to i32
  store i32 %v4_d100, i32* %r0.global-to-local, align 4
  store i32 %v4_cd78, i32* %ip.global-to-local, align 4
  %v3_d108 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d108, i32* %r3.global-to-local, align 4
  %v2_d10c = load i32, i32* %r5.global-to-local, align 4
  %v5_d10c = mul i32 %v2_d10c, 4
  %v6_d10c = add i32 %v5_d10c, %v4_cd78
  %v7_d10c = inttoptr i32 %v6_d10c to i32*
  store i32 %v4_d100, i32* %v7_d10c, align 4
  %v0_d110 = load i32, i32* %ip.global-to-local, align 4
  %v1_d110 = load i32, i32* %r3.global-to-local, align 4
  %v4_d110 = mul i32 %v1_d110, 4
  %v5_d110 = add i32 %v4_d110, %v0_d110
  %v6_d110 = inttoptr i32 %v5_d110 to i32*
  %v7_d110 = load i32, i32* %v6_d110, align 4
  store i32 %v7_d110, i32* %r1.global-to-local, align 4
  %v1_d114 = inttoptr i32 %v7_d110 to i8*
  %v2_d114 = load i8, i8* %v1_d114, align 1
  %tmp129 = urem i8 %v2_d114, 16
  %v1_d118 = zext i8 %tmp129 to i32
  %v1_d11c = or i32 %v1_d118, 64
  store i32 %v1_d11c, i32* %r2.global-to-local, align 4
  %v1_d120 = trunc i32 %v1_d11c to i8
  store i8 %v1_d120, i8* %v1_d114, align 1
  %v0_d124 = load i32, i32* %r1.global-to-local, align 4
  %v1_d124 = inttoptr i32 %v0_d124 to i8*
  %v2_d124 = load i8, i8* %v1_d124, align 1
  %v3_d124 = zext i8 %v2_d124 to i32
  %v1_d128 = and i32 %v3_d124, 240
  %v1_d12c = or i32 %v1_d128, 5
  store i32 %v1_d12c, i32* %r3.global-to-local, align 4
  store i32 %v1_cdf8, i32* %lr.global-to-local, align 4
  %v1_d134 = trunc i32 %v1_d12c to i8
  store i8 %v1_d134, i8* %v1_d124, align 1
  store i32 %v5_cdb4, i32* %r0.global-to-local, align 4
  %v0_d13c = load i32, i32* %lr.global-to-local, align 4
  %v2_d13c = icmp eq i32 %v0_d13c, 0
  store i1 %v2_d13c, i1* %cpsr_z.global-to-local, align 1
  %v2_d140 = load i32, i32* %r1.global-to-local, align 4
  %v3_d140 = add i32 %v2_d140, 1
  %v4_d140 = inttoptr i32 %v3_d140 to i8*
  store i8 %v1_d140, i8* %v4_d140, align 1
  store i32 %v5_cdec, i32* %r2.global-to-local, align 4
  %v0_d148 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d148, label %.thread12, label %bb116

bb116:                                            ; preds = %dec_label_pc_d0f8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d14c = load i32, i32* %r1.global-to-local, align 4
  %v4_d14c = add i32 %v3_d14c, 6
  %v5_d14c = inttoptr i32 %v4_d14c to i16*
  store i16 64, i16* %v5_d14c, align 2
  %v0_d154.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t53 = trunc i32 %v0_d154.pre to i8
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d0f8, %bb116
  %v0_d154.off0 = phi i8 [ %extract.t, %dec_label_pc_d0f8 ], [ %extract.t53, %bb116 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_d154 = load i32, i32* %r1.global-to-local, align 4
  %v3_d154 = add i32 %v2_d154, 8
  %v4_d154 = inttoptr i32 %v3_d154 to i8*
  store i8 %v0_d154.off0, i8* %v4_d154, align 1
  %v0_d158 = load i32, i32* %r3.global-to-local, align 4
  %v1_d158 = trunc i32 %v0_d158 to i8
  %v2_d158 = load i32, i32* %r1.global-to-local, align 4
  %v3_d158 = add i32 %v2_d158, 9
  %v4_d158 = inttoptr i32 %v3_d158 to i8*
  store i8 %v1_d158, i8* %v4_d158, align 1
  %v2_d160 = load i32, i32* @global_var_1a230.41, align 4
  %v0_d168 = load i32, i32* %r1.global-to-local, align 4
  %v2_d16c = add i32 %v1_d168, %v0_d168
  store i32 %v2_d16c, i32* %r4.global-to-local, align 4
  %v2_d170 = add i32 %v0_d168, 12
  %v3_d170 = inttoptr i32 %v2_d170 to i32*
  store i32 %v2_d160, i32* %v3_d170, align 4
  store i32 %v3_d178, i32* %r2.global-to-local, align 4
  store i32 %v7_d178, i32* %r3.global-to-local, align 4
  %v0_d17c = load i32, i32* %r1.global-to-local, align 4
  %v1_d17c = add i32 %v0_d17c, 20
  store i32 %v1_d17c, i32* %ip.global-to-local, align 4
  %v0_d180 = load i32, i32* %sl.global-to-local, align 4
  %v1_d180 = trunc i32 %v0_d180 to i16
  %v3_d180 = add i32 %v0_d17c, 2
  %v4_d180 = inttoptr i32 %v3_d180 to i16*
  store i16 %v1_d180, i16* %v4_d180, align 2
  %v0_d184 = load i32, i32* %sb.global-to-local, align 4
  %v1_d184 = trunc i32 %v0_d184 to i16
  %v2_d184 = load i32, i32* %r1.global-to-local, align 4
  %v3_d184 = add i32 %v2_d184, 4
  %v4_d184 = inttoptr i32 %v3_d184 to i16*
  store i16 %v1_d184, i16* %v4_d184, align 2
  %v0_d188 = load i32, i32* %r2.global-to-local, align 4
  %v1_d188 = trunc i32 %v0_d188 to i16
  %v2_d188 = load i32, i32* %ip.global-to-local, align 4
  %v3_d188 = add i32 %v2_d188, 4
  %v4_d188 = inttoptr i32 %v3_d188 to i16*
  store i16 %v1_d188, i16* %v4_d188, align 2
  %v0_d18c = load i32, i32* %r3.global-to-local, align 4
  %v1_d18c = trunc i32 %v0_d18c to i16
  %v2_d18c = load i32, i32* %ip.global-to-local, align 4
  %v3_d18c = add i32 %v2_d18c, 2
  %v4_d18c = inttoptr i32 %v3_d18c to i16*
  store i16 %v1_d18c, i16* %v4_d18c, align 2
  %v2_d194 = load i32, i32* %r1.global-to-local, align 4
  %v3_d194 = add i32 %v2_d194, 20
  %v4_d194 = inttoptr i32 %v3_d194 to i16*
  store i16 %rev, i16* %v4_d194, align 2
  store i32 %v4_d164, i32* %ip.global-to-local, align 4
  %v0_d19c = load i32, i32* %r1.global-to-local, align 4
  %v1_d19c = add i32 %v0_d19c, 28
  store i32 %v1_d19c, i32* %r0.global-to-local, align 4
  store i32 %v4_d1a0, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_d1ac = add i32 %v0_d19c, 30
  %v4_d1ac = inttoptr i32 %v3_d1ac to i16*
  store i16 1, i16* %v4_d1ac, align 2
  %v0_d1b0 = load i32, i32* @lr, align 4
  %v1_d1b0 = trunc i32 %v0_d1b0 to i16
  %v2_d1b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_d1b0 = add i32 %v2_d1b0, 4
  %v4_d1b0 = inttoptr i32 %v3_d1b0 to i16*
  store i16 %v1_d1b0, i16* %v4_d1b0, align 2
  %v0_d1b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d1b4 = trunc i32 %v0_d1b4 to i8
  %v2_d1b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d1b4 = add i32 %v2_d1b4, 40
  %v4_d1b4 = inttoptr i32 %v3_d1b4 to i8*
  store i8 %v1_d1b4, i8* %v4_d1b4, align 1
  %v0_d1b8 = load i32, i32* @fp, align 4
  %v1_d1b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_d1b8 = add i32 %v1_d1b8, 16
  %v3_d1b8 = inttoptr i32 %v2_d1b8 to i32*
  store i32 %v0_d1b8, i32* %v3_d1b8, align 4
  %v0_d1bc = load i32, i32* %r3.global-to-local, align 4
  %v1_d1bc = trunc i32 %v0_d1bc to i16
  %v2_d1bc = load i32, i32* %r1.global-to-local, align 4
  %v3_d1bc = add i32 %v2_d1bc, 28
  %v4_d1bc = inttoptr i32 %v3_d1bc to i16*
  store i16 %v1_d1bc, i16* %v4_d1bc, align 2
  %v0_d1c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d1c0 = add i32 %v0_d1c0, 1
  store i32 %v1_d1c0, i32* %r0.global-to-local, align 4
  %v0_d1c4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_d1c4, i32* %r1.global-to-local, align 4
  store i32 %v1_d0dc, i32* %r2.global-to-local, align 4
  %v3_d1cc = call i32 @function_1175c(i32 %v1_d1c0, i32 %v0_d1c4, i32 %v1_d0dc)
  store i32 %v3_d1cc, i32* %r0.global-to-local, align 4
  %v0_d1d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_d1d0 = icmp eq i32 %v0_d1d0, 0
  store i1 %v2_d1d0, i1* %cpsr_z.global-to-local, align 1
  %tmp117 = icmp slt i32 %v0_d1d0, 1
  br i1 %tmp117, label %bb118, label %dec_label_pc_d1e0

bb118:                                            ; preds = %.thread12
  %v5_d1d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_d1d4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_d218

dec_label_pc_d1e0:                                ; preds = %.thread12
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_d1e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d1e4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d1ec

dec_label_pc_d1ec:                                ; preds = %.thread19, %dec_label_pc_d1e0
  %v0_d1f8 = phi i32 [ %storemerge, %.thread19 ], [ 0, %dec_label_pc_d1e0 ]
  %v0_d1fc = phi i32 [ %v0_d210, %.thread19 ], [ 0, %dec_label_pc_d1e0 ]
  %v1_d1ec = load i32, i32* %r7.global-to-local, align 4
  %v2_d1ec = add i32 %v1_d1ec, %v0_d1fc
  %v3_d1ec = inttoptr i32 %v2_d1ec to i8*
  %v4_d1ec = load i8, i8* %v3_d1ec, align 1
  %v6_d1ec = zext i8 %v4_d1ec to i32
  store i32 %v6_d1ec, i32* %r3.global-to-local, align 4
  %v7_d1f0 = icmp eq i8 %v4_d1ec, 46
  store i1 %v7_d1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d1f0, label %bb119, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_d1ec
  %v1_d1f815 = add nsw i32 %v0_d1f8, 1
  store i32 %v1_d1f815, i32* %r2.global-to-local, align 4
  %v1_d1fc17 = add i32 %v0_d1fc, 1
  store i32 %v1_d1fc17, i32* %r1.global-to-local, align 4
  br label %bb120

bb119:                                            ; preds = %dec_label_pc_d1ec
  %v2_d1f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d1f4 = add i32 %v2_d1f4, %v0_d1fc
  store i32 %v3_d1f4, i32* %r3.global-to-local, align 4
  %v1_d1f8 = add nsw i32 %v0_d1f8, 1
  store i32 %v1_d1f8, i32* %r2.global-to-local, align 4
  %v1_d1fc = add i32 %v0_d1fc, 1
  store i32 %v1_d1fc, i32* %r1.global-to-local, align 4
  %v2_d200 = trunc i32 %v0_d1f8 to i8
  %v3_d200 = load i32, i32* %r0.global-to-local, align 4
  %v4_d200 = inttoptr i32 %v3_d200 to i8*
  store i8 %v2_d200, i8* %v4_d200, align 1
  %v0_d204.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d204.pre, label %bb121, label %bb119.bb120_crit_edge

bb119.bb120_crit_edge:                            ; preds = %bb119
  %v1_d204.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb120

bb120:                                            ; preds = %bb119.bb120_crit_edge, %.thread60
  %v1_d204 = phi i32 [ %v1_d204.pre, %bb119.bb120_crit_edge ], [ %v1_d1f815, %.thread60 ]
  %v2_d204 = urem i32 %v1_d204, 256
  br label %.thread19

bb121:                                            ; preds = %bb119
  %v1_d208 = load i32, i32* %r3.global-to-local, align 4
  %v2_d208 = add i32 %v1_d208, 1
  store i32 %v2_d208, i32* %r0.global-to-local, align 4
  br label %.thread19

.thread19:                                        ; preds = %bb120, %bb121
  %storemerge = phi i32 [ %v2_d204, %bb120 ], [ 0, %bb121 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_d210 = load i32, i32* %r1.global-to-local, align 4
  %v1_d210 = load i32, i32* %r6.global-to-local, align 4
  %v9_d210 = icmp eq i32 %v0_d210, %v1_d210
  store i1 %v9_d210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d210, label %dec_label_pc_d218.loopexit, label %dec_label_pc_d1ec

dec_label_pc_d218.loopexit:                       ; preds = %.thread19
  %v2_d218.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t128 = trunc i32 %storemerge to i8
  br label %dec_label_pc_d218

dec_label_pc_d218:                                ; preds = %bb118, %dec_label_pc_d218.loopexit
  %v0_d218.off0 = phi i8 [ %extract.t128, %dec_label_pc_d218.loopexit ], [ 0, %bb118 ]
  %v2_d218 = phi i32 [ %v2_d218.pre, %dec_label_pc_d218.loopexit ], [ %v5_d1d4, %bb118 ]
  %v3_d218 = inttoptr i32 %v2_d218 to i8*
  store i8 %v0_d218.off0, i8* %v3_d218, align 1
  %v3_d21c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d21c, i32* %r3.global-to-local, align 4
  %v1_d220 = add i32 %v3_d21c, 1
  store i32 %v1_d220, i32* %r5.global-to-local, align 4
  %v0_d224 = load i32, i32* %r4.global-to-local, align 4
  %v1_d224 = load i32, i32* %r6.global-to-local, align 4
  %v2_d224 = add i32 %v1_d224, %v0_d224
  store i32 %v2_d224, i32* %r2.global-to-local, align 4
  store i32 256, i32* %lr.global-to-local, align 4
  %v0_d22c = load i32, i32* @r8, align 4
  %v9_d22c = icmp eq i32 %v0_d22c, %v1_d220
  store i1 %v9_d22c, i1* %cpsr_z.global-to-local, align 1
  %v3_d230 = add i32 %v2_d224, 4
  %v4_d230 = inttoptr i32 %v3_d230 to i16*
  store i16 256, i16* %v4_d230, align 2
  %v0_d234 = load i32, i32* %lr.global-to-local, align 4
  %v1_d234 = trunc i32 %v0_d234 to i16
  %v2_d234 = load i32, i32* %r2.global-to-local, align 4
  %v3_d234 = add i32 %v2_d234, 2
  %v4_d234 = inttoptr i32 %v3_d234 to i16*
  store i16 %v1_d234, i16* %v4_d234, align 2
  %v0_d238 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d238, i32* %stack_var_-44, align 4
  %v8_d23c = icmp sgt i32 %v0_d22c, %v1_d220
  br i1 %v8_d23c, label %dec_label_pc_d0f8, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d218
  store i32 %v4_d164, i32* %r0.global-to-local, align 4
  %v0_d244 = load i32, i32* %r6.global-to-local, align 4
  %v2_d244 = add i32 %v0_d244, %v4_d164
  store i32 %v2_d244, i32* @r7, align 4
  %v0_d24c.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d248.preheader

dec_label_pc_d248.preheader:                      ; preds = %.dec_label_pc_d248.preheader_crit_edge, %dec_label_pc_d240
  %v4_d2ac.pre-phi = phi i32 [ %.pre, %.dec_label_pc_d248.preheader_crit_edge ], [ %v4_d164, %dec_label_pc_d240 ]
  %v0_d24c.pre = phi i32 [ 0, %.dec_label_pc_d248.preheader_crit_edge ], [ %v0_d24c.pre.pre, %dec_label_pc_d240 ]
  %v3_d278 = icmp eq i32 %v3_d01c, 65535
  %v3_d288 = icmp eq i32 %v3_d024, 65535
  br label %dec_label_pc_d248

dec_label_pc_d248:                                ; preds = %dec_label_pc_d248, %dec_label_pc_d340, %dec_label_pc_d248.preheader
  %v0_d24c = phi i32 [ %v0_d24c.pre, %dec_label_pc_d248.preheader ], [ 0, %dec_label_pc_d340 ], [ 0, %dec_label_pc_d248 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d24c = icmp eq i32 %v0_d24c, 0
  store i1 %v2_d24c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d24c, label %dec_label_pc_d248, label %dec_label_pc_d258

dec_label_pc_d258:                                ; preds = %dec_label_pc_d248, %dec_label_pc_d340
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_d25c = load i32, i32* @r7, align 4
  %v1_d25c = add i32 %v0_d25c, 27
  store i32 %v1_d25c, i32* @sb, align 4
  %v1_d260 = add i32 %v0_d25c, 47
  store i32 %v1_d260, i32* @sl, align 4
  br label %dec_label_pc_d264

dec_label_pc_d264:                                ; preds = %dec_label_pc_d2a8, %dec_label_pc_d258
  %v1_d270 = phi i32 [ %v1_d330, %dec_label_pc_d2a8 ], [ 0, %dec_label_pc_d258 ]
  store i32 %v4_cd78, i32* %r3.global-to-local, align 4
  store i32 65536, i32* %r5.global-to-local, align 4
  store i32 %v3_d01c, i32* %ip.global-to-local, align 4
  %v4_d270 = mul i32 %v1_d270, 4
  %v5_d270 = add i32 %v4_d270, %v4_cd78
  %v6_d270 = inttoptr i32 %v5_d270 to i32*
  %v7_d270 = load i32, i32* %v6_d270, align 4
  store i32 %v7_d270, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_d278, i1* %cpsr_z.global-to-local, align 1
  %v1_d27c = add i32 %v7_d270, 20
  store i32 %v1_d27c, i32* @r6, align 4
  br i1 %v3_d278, label %dec_label_pc_d354, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d264
  store i32 %v3_d024, i32* @lr, align 4
  store i1 %v3_d288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d288, label %dec_label_pc_d368, label %dec_label_pc_d290

dec_label_pc_d290:                                ; preds = %dec_label_pc_d354.dec_label_pc_d290_crit_edge, %dec_label_pc_d284
  %v1_d294 = phi i32 [ %v1_d294.pre, %dec_label_pc_d354.dec_label_pc_d290_crit_edge ], [ 65535, %dec_label_pc_d284 ]
  store i32 %v3_d040, i32* %r0.global-to-local, align 4
  %v9_d294 = icmp eq i32 %v3_d040, %v1_d294
  store i1 %v9_d294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d294, label %dec_label_pc_d37c, label %dec_label_pc_d29c

dec_label_pc_d29c:                                ; preds = %dec_label_pc_d368, %dec_label_pc_d290
  %v1_d2a0 = phi i32 [ %v1_d374, %dec_label_pc_d368 ], [ %v1_d294, %dec_label_pc_d290 ]
  store i32 %v3_d048, i32* %r2.global-to-local, align 4
  %v9_d2a0 = icmp eq i32 %v3_d048, %v1_d2a0
  store i1 %v9_d2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d2a0, label %dec_label_pc_d390, label %dec_label_pc_d2a8

dec_label_pc_d2a8:                                ; preds = %dec_label_pc_d37c, %dec_label_pc_d29c, %dec_label_pc_d390
  %v0_d2a8 = load i32, i32* @r4, align 4
  %v1_d2a8 = add i32 %v0_d2a8, 41
  store i32 %v1_d2a8, i32* %r0.global-to-local, align 4
  store i32 %v4_d2ac.pre-phi, i32* %r1.global-to-local, align 4
  %v2_d2b0 = call i32 @function_ef2c(i32 %v1_d2a8, i32 %v4_d2ac.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d2b8 = load i32, i32* @r4, align 4
  %v3_d2b8 = add i32 %v2_d2b8, 10
  %v4_d2b8 = inttoptr i32 %v3_d2b8 to i16*
  store i16 0, i16* %v4_d2b8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d2c0 = load i32, i32* @r4, align 4
  store i32 %v0_d2c0, i32* @r0, align 4
  %v2_d2c4 = call i32 @function_d414(i32 %v0_d2c0, i32 20)
  %v3_d2c4 = trunc i32 %v2_d2c4 to i16
  store i32 %v2_d2c4, i32* %r0.global-to-local, align 4
  %v3_d2c8 = load i32, i32* @r4, align 4
  %v4_d2c8 = add i32 %v3_d2c8, 10
  %v5_d2c8 = inttoptr i32 %v4_d2c8 to i16*
  store i16 %v3_d2c4, i16* %v5_d2c8, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_d2d0 = load i32, i32* @r6, align 4
  %v3_d2d0 = add i32 %v2_d2d0, 6
  %v4_d2d0 = inttoptr i32 %v3_d2d0 to i16*
  store i16 0, i16* %v4_d2d0, align 2
  %v0_d2d4 = load i32, i32* @r6, align 4
  store i32 %v0_d2d4, i32* @r1, align 4
  %v1_d2d8 = add i32 %v0_d2d4, 4
  %v2_d2d8 = inttoptr i32 %v1_d2d8 to i16*
  %v3_d2d8 = load i16, i16* %v2_d2d8, align 2
  %v4_d2d8 = zext i16 %v3_d2d8 to i32
  store i32 %v4_d2d8, i32* %r2.global-to-local, align 4
  %v0_d2dc = load i32, i32* @sb, align 4
  store i32 %v0_d2dc, i32* %r3.global-to-local, align 4
  %v0_d2e0 = load i32, i32* @r4, align 4
  store i32 %v0_d2e0, i32* %r0.global-to-local, align 4
  %v4_d2e4 = call i32 @function_d464(i32 %v0_d2e0, i32 %v0_d2d4, i32 %v4_d2d8, i32 %v0_d2dc)
  %v5_d2e4 = trunc i32 %v4_d2e4 to i16
  store i32 %v4_d2e4, i32* %r0.global-to-local, align 4
  %v3_d2e8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d2e8, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v3_d2f0 = mul i32 %v3_d2e8, 32
  store i32 %v3_d2f0, i32* %ip.global-to-local, align 4
  %v3_d2f4 = load i32, i32* @r6, align 4
  %v4_d2f4 = add i32 %v3_d2f4, 6
  %v5_d2f4 = inttoptr i32 %v4_d2f4 to i16*
  store i16 %v5_d2e4, i16* %v5_d2f4, align 2
  %v0_d2f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_d2f8 = load i32, i32* %r3.global-to-local, align 4
  %tmp130 = mul i32 %v1_d2f8, -8
  %v5_d2f8 = add i32 %v0_d2f8, %tmp130
  store i32 %v5_d2f8, i32* %ip.global-to-local, align 4
  %v0_d2fc = load i32, i32* @r6, align 4
  %v1_d2fc = add i32 %v0_d2fc, 2
  %v2_d2fc = inttoptr i32 %v1_d2fc to i16*
  %v3_d2fc = load i16, i16* %v2_d2fc, align 2
  %v4_d2fc = zext i16 %v3_d2fc to i32
  store i32 %v4_d2fc, i32* %r6.global-to-local, align 4
  %v1_d300 = load i32, i32* %lr.global-to-local, align 4
  %v2_d300 = add i32 %v1_d300, %v5_d2f8
  store i32 %v2_d300, i32* %ip.global-to-local, align 4
  %v3_d304 = add i32 %v2_d300, 2
  %v4_d304 = inttoptr i32 %v3_d304 to i16*
  store i16 %v3_d2fc, i16* %v4_d304, align 2
  %v0_d308 = load i32, i32* @fp, align 4
  %v1_d308 = load i32, i32* %ip.global-to-local, align 4
  %v2_d308 = add i32 %v1_d308, 4
  %v3_d308 = inttoptr i32 %v2_d308 to i32*
  store i32 %v0_d308, i32* %v3_d308, align 4
  %v0_d30c = load i32, i32* @r4, align 4
  store i32 %v0_d30c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_cfc0, i32* %r0.global-to-local, align 4
  %v0_d318 = load i32, i32* @sl, align 4
  store i32 %v0_d318, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_d320 = load i32, i32* %ip.global-to-local, align 4
  %v4_d320 = inttoptr i32 %v0_d320 to %sockaddr*
  %v7_d328 = inttoptr i32 %v0_d30c to i32*
  %v9_d328 = call i32 @sendto(i32 %v3_cfc0, i32* %v7_d328, i32 %v0_d318, i32 16384, %sockaddr* %v4_d320, i32 16)
  %v3_d32c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d32c, i32* %r3.global-to-local, align 4
  %v1_d330 = add i32 %v3_d32c, 1
  store i32 %v1_d330, i32* %r0.global-to-local, align 4
  %v0_d334 = load i32, i32* @r8, align 4
  %v9_d334 = icmp eq i32 %v0_d334, %v1_d330
  store i1 %v9_d334, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d330, i32* %stack_var_-44, align 4
  %v8_d33c = icmp sgt i32 %v0_d334, %v1_d330
  br i1 %v8_d33c, label %dec_label_pc_d264, label %dec_label_pc_d340

dec_label_pc_d340:                                ; preds = %dec_label_pc_d2a8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d344 = icmp eq i32 %v0_d334, 0
  store i1 %v2_d344, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d344, label %dec_label_pc_d248, label %dec_label_pc_d258

dec_label_pc_d354:                                ; preds = %dec_label_pc_d264
  %v0_d354 = call i32 @function_ee68()
  %v1_d354 = trunc i32 %v0_d354 to i16
  store i32 %v0_d354, i32* %r0.global-to-local, align 4
  store i32 %v3_d024, i32* @lr, align 4
  %v1_d35c = load i32, i32* @r5, align 4
  %v9_d35c = icmp eq i32 %v3_d024, %v1_d35c
  store i1 %v9_d35c, i1* %cpsr_z.global-to-local, align 1
  %v3_d360 = load i32, i32* @r4, align 4
  %v4_d360 = add i32 %v3_d360, 4
  %v5_d360 = inttoptr i32 %v4_d360 to i16*
  store i16 %v1_d354, i16* %v5_d360, align 2
  br i1 %v9_d35c, label %dec_label_pc_d368, label %dec_label_pc_d354.dec_label_pc_d290_crit_edge

dec_label_pc_d354.dec_label_pc_d290_crit_edge:    ; preds = %dec_label_pc_d354
  %v1_d294.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d290

dec_label_pc_d368:                                ; preds = %dec_label_pc_d354, %dec_label_pc_d284
  %v0_d368 = call i32 @function_ee68()
  %v1_d368 = trunc i32 %v0_d368 to i16
  %v3_d36c = load i32, i32* @r4, align 4
  %v4_d36c = add i32 %v3_d36c, 20
  %v5_d36c = inttoptr i32 %v4_d36c to i16*
  store i16 %v1_d368, i16* %v5_d36c, align 2
  store i32 %v3_d040, i32* %r0.global-to-local, align 4
  %v1_d374 = load i32, i32* @r5, align 4
  %v9_d374 = icmp eq i32 %v3_d040, %v1_d374
  store i1 %v9_d374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d374, label %dec_label_pc_d37c, label %dec_label_pc_d29c

dec_label_pc_d37c:                                ; preds = %dec_label_pc_d368, %dec_label_pc_d290
  %v0_d37c = call i32 @function_ee68()
  %v1_d37c = trunc i32 %v0_d37c to i16
  store i32 %v0_d37c, i32* %r0.global-to-local, align 4
  store i32 %v3_d048, i32* %r2.global-to-local, align 4
  %v1_d384 = load i32, i32* @r5, align 4
  %v9_d384 = icmp eq i32 %v3_d048, %v1_d384
  store i1 %v9_d384, i1* %cpsr_z.global-to-local, align 1
  %v3_d388 = load i32, i32* @r6, align 4
  %v4_d388 = add i32 %v3_d388, 2
  %v5_d388 = inttoptr i32 %v4_d388 to i16*
  store i16 %v1_d37c, i16* %v5_d388, align 2
  br i1 %v9_d384, label %dec_label_pc_d390, label %dec_label_pc_d2a8

dec_label_pc_d390:                                ; preds = %dec_label_pc_d37c, %dec_label_pc_d29c
  %v0_d390 = call i32 @function_ee68()
  %v1_d390 = trunc i32 %v0_d390 to i16
  store i32 %v0_d390, i32* %r0.global-to-local, align 4
  %v3_d394 = load i32, i32* @r4, align 4
  %v4_d394 = add i32 %v3_d394, 28
  %v5_d394 = inttoptr i32 %v4_d394 to i16*
  store i16 %v1_d390, i16* %v5_d394, align 2
  br label %dec_label_pc_d2a8

dec_label_pc_d39c:                                ; preds = %dec_label_pc_cf28, %dec_label_pc_cf08, %dec_label_pc_ceac, %dec_label_pc_cd58
  %v0_d39c = call i32 @function_ee68()
  %v1_d3a0 = urem i32 %v0_d39c, 4
  store i32 %v1_d3a0, i32* %r0.global-to-local, align 4
  %v2_d3a4 = icmp eq i32 %v1_d3a0, 3
  store i1 %v2_d3a4, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d39c to i2
  switch i2 %trunc, label %dec_label_pc_cfa010 [
    i2 0, label %dec_label_pc_d3d8
    i2 1, label %dec_label_pc_d404
    i2 -2, label %dec_label_pc_d3f8
    i2 -1, label %dec_label_pc_d3e8
  ]

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_cfd0
  store i32 %v3_cfc0, i32* %r0.global-to-local, align 4
  %v1_d3c4 = call i32 @close(i32 %v3_cfc0)
  store i32 %v1_d3c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d3c8

dec_label_pc_d3c8:                                ; preds = %dec_label_pc_cfa8, %dec_label_pc_cfa0, %dec_label_pc_d3c0
  %v1_d3d4 = phi i32 [ -1, %dec_label_pc_cfa8 ], [ %v1_d3d450, %dec_label_pc_cfa0 ], [ %v1_d3c4, %dec_label_pc_d3c0 ]
  store i32 %v3_cd58, i32* %r4.global-to-local, align 4
  store i32 %v6_cd58, i32* %r5.global-to-local, align 4
  store i32 %v9_cd58, i32* %r6.global-to-local, align 4
  store i32 %v12_cd58, i32* %r7.global-to-local, align 4
  store i32 %v18_cd58, i32* %sb.global-to-local, align 4
  store i32 %v21_cd58, i32* %sl.global-to-local, align 4
  store i32 %v27_cd58, i32* %lr.global-to-local, align 4
  ret i32 %v1_d3d4

dec_label_pc_d3d8:                                ; preds = %dec_label_pc_d39c
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_cfa0

dec_label_pc_d3e8:                                ; preds = %dec_label_pc_d39c
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_cfa0

dec_label_pc_d3f8:                                ; preds = %dec_label_pc_d39c
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_cfa0

dec_label_pc_d404:                                ; preds = %dec_label_pc_d39c
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_cfa0

; uselistorder directives
  uselistorder i32 %v1_d3a0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_d39c, { 1, 0 }
  uselistorder i32 %v0_d390, { 1, 0 }
  uselistorder i32 %v0_d37c, { 1, 0 }
  uselistorder i32 %v1_d374, { 1, 0 }
  uselistorder i32 %v0_d354, { 1, 0 }
  uselistorder i32 %v1_d330, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_d2f8, { 1, 0 }
  uselistorder i32 %v4_d2e4, { 1, 0 }
  uselistorder i32 %v2_d2c4, { 1, 0 }
  uselistorder i1 %v3_d288, { 1, 0 }
  uselistorder i1 %v3_d278, { 1, 0 }
  uselistorder i32 %v4_d2ac.pre-phi, { 1, 0 }
  uselistorder i32 %v1_d220, { 1, 0, 2 }
  uselistorder i32 %v0_d210, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_d1fc, { 2, 0, 3, 1 }
  uselistorder i32 %v0_d1f8, { 1, 0, 2 }
  uselistorder i32 %v0_d168, { 1, 0 }
  uselistorder i32 %v4_d164, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp113, { 1, 0 }
  uselistorder i32 %v3_d0b0, { 1, 0 }
  uselistorder i32 %v3_d06c, { 1, 0 }
  uselistorder i32 %v1_d060, { 2, 0, 1 }
  uselistorder i32 %v3_d02c, { 1, 0 }
  uselistorder i32 %v3_d028, { 1, 0 }
  uselistorder i32 %v3_d024, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_d01c, { 0, 2, 1 }
  uselistorder i8 %v5_d014, { 1, 0, 2 }
  uselistorder i32 %v1_d000, { 1, 0 }
  uselistorder i32 %v0_d000, { 1, 0 }
  uselistorder i32 %v3_cfc0, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v0_cfa0, { 1, 0, 2 }
  uselistorder i32 %v2_cf70, { 0, 2, 1, 3 }
  uselistorder i32 %v2_cf6c, { 1, 0, 2 }
  uselistorder i1 %v7_cf5c, { 1, 0 }
  uselistorder i32 %v1_cf58, { 1, 0, 2 }
  uselistorder i1 %v8_cf50, { 1, 0 }
  uselistorder i1 %v7_cf4c, { 1, 0 }
  uselistorder i32 %v1_cf40, { 1, 0 }
  uselistorder i8 %v2_cf34, { 2, 0, 1, 3 }
  uselistorder i32 %v0_cf38, { 1, 0 }
  uselistorder i32 %v0_cf58, { 3, 0, 2, 1 }
  uselistorder i32 %v0_cf28, { 0, 2, 1 }
  uselistorder i32 %v1_cf3c, { 0, 2, 1 }
  uselistorder i32 %v2_cf10, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cf08, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cf00, { 1, 2, 3, 0, 5, 4, 6 }
  uselistorder i32 %v0_cea4, { 1, 0, 3, 2 }
  uselistorder i32 %v6_ce44, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_ce28, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_ce10, { 2, 1, 0, 3 }
  uselistorder i32 %v1_cdf8, { 1, 2, 0 }
  uselistorder i32 %v5_cdec, { 0, 2, 1 }
  uselistorder i32 %v7_cdb4, { 1, 0, 2, 3 }
  uselistorder i32 %v5_cdb4, { 0, 2, 1 }
  uselistorder i32 %v4_cd78, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 19, 17, 18, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 36, 35, 37, 38, 40, 39, 41, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 25, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_913c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 93, 94, 95, 96, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder label %dec_label_pc_d3c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d258, { 1, 0 }
  uselistorder label %dec_label_pc_d248, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d248.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d218, { 1, 0 }
  uselistorder label %.thread19, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %bb107, { 1, 0 }
  uselistorder label %dec_label_pc_cf68, { 1, 0 }
  uselistorder label %dec_label_pc_cf5c, { 1, 0 }
  uselistorder label %dec_label_pc_cf28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cf20, { 1, 0 }
}

define i32 @function_d414(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d414:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d438, label %dec_label_pc_d420

dec_label_pc_d420:                                ; preds = %dec_label_pc_d414
  %v0_d428.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d424

dec_label_pc_d424:                                ; preds = %dec_label_pc_d424, %dec_label_pc_d420
  %v0_d430 = phi i32 [ %v2_d430, %dec_label_pc_d424 ], [ 0, %dec_label_pc_d420 ]
  %v0_d428 = phi i32 [ %v5_d428, %dec_label_pc_d424 ], [ %v0_d428.pre, %dec_label_pc_d420 ]
  %v0_d424 = phi i32 [ %v1_d424, %dec_label_pc_d424 ], [ %arg1, %dec_label_pc_d420 ]
  %v1_d424 = add i32 %v0_d424, -2
  %v1_d428 = inttoptr i32 %v0_d428 to i16*
  %v2_d428 = load i16, i16* %v1_d428, align 2
  %v3_d428 = zext i16 %v2_d428 to i32
  %v5_d428 = add i32 %v0_d428, -2
  store i32 %v5_d428, i32* @r0, align 4
  %v2_d430 = add i32 %v3_d428, %v0_d430
  %v1_d424.cmp = icmp ugt i32 %v1_d424, 1
  br i1 %v1_d424.cmp, label %dec_label_pc_d424, label %dec_label_pc_d438.loopexit

dec_label_pc_d438.loopexit:                       ; preds = %dec_label_pc_d424
  br label %dec_label_pc_d438

dec_label_pc_d438:                                ; preds = %dec_label_pc_d414, %dec_label_pc_d438.loopexit
  %v1_d440 = phi i32 [ %v2_d430, %dec_label_pc_d438.loopexit ], [ 0, %dec_label_pc_d414 ]
  %v0_d438 = phi i32 [ %v1_d424, %dec_label_pc_d438.loopexit ], [ %arg1, %dec_label_pc_d414 ]
  %v7_d438 = icmp eq i32 %v0_d438, 1
  br i1 %v7_d438, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d438
  %v1_d43c = load i32, i32* @r0, align 4
  %v2_d43c = inttoptr i32 %v1_d43c to i8*
  %v3_d43c = load i8, i8* %v2_d43c, align 1
  %v4_d43c = zext i8 %v3_d43c to i32
  %v3_d440 = add i32 %v1_d440, %v4_d43c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d438, %bb
  %v0_d444 = phi i32 [ %v1_d440, %dec_label_pc_d438 ], [ %v3_d440, %bb ]
  %v3_d448 = urem i32 %v0_d444, 65536
  %v4_d44c = udiv i32 %v0_d444, 65536
  %v5_d44c = add nuw nsw i32 %v4_d44c, %v3_d448
  %v4_d450 = udiv i32 %v5_d44c, 65536
  %v5_d450 = add nuw nsw i32 %v4_d450, %v5_d44c
  %v1_d454 = urem i32 %v5_d450, 65536
  %v3_d45c = xor i32 %v1_d454, 65535
  ret i32 %v3_d45c

; uselistorder directives
  uselistorder i32 %v5_d44c, { 1, 0 }
  uselistorder i32 %v5_d428, { 1, 0 }
  uselistorder i32 %v1_d424, { 1, 0, 2 }
  uselistorder i32 %v0_d428, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d438, { 1, 0 }
}

define i32 @function_d464(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d464:
  %v1_d474 = add i32 %arg1, 12
  %v2_d474 = inttoptr i32 %v1_d474 to i32*
  %v3_d474 = load i32, i32* %v2_d474, align 4
  %v1_d478 = add i32 %arg1, 16
  %v2_d478 = inttoptr i32 %v1_d478 to i32*
  %v3_d478 = load i32, i32* %v2_d478, align 4
  %v7_d47c = icmp sgt i32 %arg3, 1
  br i1 %v7_d47c, label %dec_label_pc_d488.preheader, label %dec_label_pc_d49c

dec_label_pc_d488.preheader:                      ; preds = %dec_label_pc_d464
  %v0_d48c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d488

dec_label_pc_d488:                                ; preds = %dec_label_pc_d488.preheader, %dec_label_pc_d488
  %v0_d494 = phi i32 [ 0, %dec_label_pc_d488.preheader ], [ %v2_d494, %dec_label_pc_d488 ]
  %v0_d48c = phi i32 [ %v0_d48c.pre, %dec_label_pc_d488.preheader ], [ %v5_d48c, %dec_label_pc_d488 ]
  %v0_d488 = phi i32 [ %arg3, %dec_label_pc_d488.preheader ], [ %v1_d488, %dec_label_pc_d488 ]
  %v1_d488 = add nsw i32 %v0_d488, -2
  %v1_d48c = inttoptr i32 %v0_d48c to i16*
  %v2_d48c = load i16, i16* %v1_d48c, align 2
  %v3_d48c = zext i16 %v2_d48c to i32
  %v5_d48c = add i32 %v0_d48c, -2
  store i32 %v5_d48c, i32* @r1, align 4
  %v2_d494 = add i32 %v3_d48c, %v0_d494
  %v8_d498 = icmp sgt i32 %v1_d488, 1
  br i1 %v8_d498, label %dec_label_pc_d488, label %dec_label_pc_d49c.loopexit

dec_label_pc_d49c.loopexit:                       ; preds = %dec_label_pc_d488
  br label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d49c.loopexit, %dec_label_pc_d464
  %v1_d4a8 = phi i32 [ %v2_d494, %dec_label_pc_d49c.loopexit ], [ 0, %dec_label_pc_d464 ]
  %v0_d49c = phi i32 [ %v1_d488, %dec_label_pc_d49c.loopexit ], [ %arg3, %dec_label_pc_d464 ]
  %v7_d49c = icmp eq i32 %v0_d49c, 1
  br i1 %v7_d49c, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_d49c
  br label %bb19

bb:                                               ; preds = %dec_label_pc_d49c
  %v1_d4a0 = load i32, i32* @r1, align 4
  %v2_d4a0 = inttoptr i32 %v1_d4a0 to i8*
  %v3_d4a0 = load i8, i8* %v2_d4a0, align 1
  %v4_d4a0 = zext i8 %v3_d4a0 to i32
  %v3_d4a8 = add i32 %v4_d4a0, %v1_d4a8
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_d4d0 = phi i32 [ %v1_d4a8, %.thread ], [ %v3_d4a8, %bb ]
  %v0_d4b0 = mul i32 %v3_d474, 65536
  %v3_d4b0 = udiv i32 %v0_d4b0, 65536
  %v3_d4b4 = urem i32 %v3_d478, 65536
  %v4_d4bc = udiv i32 %v3_d474, 65536
  %v2_d4b8 = add nuw nsw i32 %v3_d4b4, %v4_d4bc
  %v5_d4bc = add nuw nsw i32 %v2_d4b8, %v3_d4b0
  %v1_d4c0 = add i32 %arg1, 9
  %v2_d4c0 = inttoptr i32 %v1_d4c0 to i8*
  %v3_d4c0 = load i8, i8* %v2_d4c0, align 1
  %v4_d4c0 = zext i8 %v3_d4c0 to i32
  %v4_d4c4 = udiv i32 %v3_d478, 65536
  %v3_d4cc = mul nuw nsw i32 %v4_d4c0, 256
  %v5_d4c4 = add i32 %v4_d4c4, %arg2
  %v2_d4c8 = add i32 %v5_d4c4, %v1_d4d0
  %v2_d4d0 = add i32 %v2_d4c8, %v5_d4bc
  %v2_d4d4 = add i32 %v2_d4d0, %v3_d4cc
  %tmp = icmp ult i32 %v2_d4d4, 65536
  br i1 %tmp, label %dec_label_pc_d4f4, label %dec_label_pc_d4e0

dec_label_pc_d4e0:                                ; preds = %bb19, %dec_label_pc_d4e0
  %v2_d4e85 = phi i32 [ %v2_d4e8, %dec_label_pc_d4e0 ], [ %v2_d4d4, %bb19 ]
  %v3_d4ec6.in = phi i32 [ %v2_d4e8, %dec_label_pc_d4e0 ], [ %v2_d4d4, %bb19 ]
  %v3_d4ec6 = udiv i32 %v3_d4ec6.in, 65536
  %v3_d4e4 = urem i32 %v2_d4e85, 65536
  %v2_d4e8 = add nuw nsw i32 %v3_d4e4, %v3_d4ec6
  %tmp20 = icmp ult i32 %v2_d4e8, 65536
  br i1 %tmp20, label %dec_label_pc_d4f4.loopexit, label %dec_label_pc_d4e0

dec_label_pc_d4f4.loopexit:                       ; preds = %dec_label_pc_d4e0
  br label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d4f4.loopexit, %bb19
  %v0_d4f4 = phi i32 [ %v2_d4e8, %dec_label_pc_d4f4.loopexit ], [ %v2_d4d4, %bb19 ]
  %v1_d4f4 = urem i32 %v0_d4f4, 65536
  %v3_d4fc = xor i32 %v1_d4f4, 65535
  ret i32 %v3_d4fc

; uselistorder directives
  uselistorder i32 %v2_d4e8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d4d4, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d4a8, { 1, 0 }
  uselistorder i32 %v5_d48c, { 1, 0 }
  uselistorder i32 %v0_d48c, { 1, 0 }
  uselistorder i32 %v3_d474, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d4e0, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_d488, { 1, 0 }
}

define i32 @function_d508(i32 %arg1) local_unnamed_addr {
dec_label_pc_d508:
  %v2_d514 = load i32, i32* @global_var_1a238.53, align 4
  %v2_d51c = call i32 @kill(i32 %v2_d514, i32 9)
  ret i32 %v2_d51c
}

define i32 @function_d530(i32 %arg1) local_unnamed_addr {
dec_label_pc_d530:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_d530 = load i32, i32* @r4, align 4
  %v6_d530 = load i32, i32* @r5, align 4
  %v9_d530 = load i32, i32* @r6, align 4
  %v12_d530 = load i32, i32* @r7, align 4
  %v15_d530 = load i32, i32* @r8, align 4
  %v21_d530 = load i32, i32* @sl, align 4
  %v27_d530 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_d54c = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_d54c, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_d578 = ptrtoint i32* %stack_var_-8777 to i32
  %v3_d584 = bitcast i8* %stack_var_-585 to i32*
  %v4_d584 = call i32* @memset(i32* %v3_d584, i32 0, i32 513)
  %v2_d588 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_d588, i32* @sl, align 4
  %v0_d58c = load i32, i32* @r5, align 4
  %v4_d598 = call i32* @memset(i32* nonnull %stack_var_-8777, i32 %v0_d58c, i32 4096)
  %v2_d59c = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d59c, i32* %sb.global-to-local, align 4
  %v0_d5a0 = load i32, i32* @r5, align 4
  %v4_d5ac = call i32* @memset(i32* nonnull %stack_var_-4681, i32 %v0_d5a0, i32 4096)
  %v2_d5b0 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_d5b0, i32* %sb.global-to-local, align 4
  %v0_d5b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d5b4 = udiv i32 %v0_d5b4, 256
  %v1_d5b8 = urem i32 %v0_d5b4, 256
  store i32 %v1_d5b8, i32* @r4, align 4
  %v3_d5c8 = trunc i32 %v3_d5b4 to i8
  %v4_d5c8 = call i32 @function_11b4c(i8 %v3_d5c8, i32 16, i32 %v2_d5b0)
  %v2_d5d0 = call i32 @function_116ec(i8* nonnull %stack_var_-72)
  %v7_d5d4 = icmp eq i32 %v2_d5d0, 2
  br i1 %v7_d5d4, label %dec_label_pc_da98, label %dec_label_pc_d5dc

dec_label_pc_d5dc:                                ; preds = %dec_label_pc_d530, %dec_label_pc_da98
  %v1_d5e0 = call i32 @function_110b8(i32 15)
  %v1_d5e8 = call i32 @function_110b8(i32 16)
  %v1_d5f0 = call i32 @function_110b8(i32 17)
  %v1_d5f8 = call i32 @function_110b8(i32 19)
  %v0_d5fc = load i32, i32* @r5, align 4
  %v2_d604 = inttoptr i32 %v0_d5fc to i32*
  %v3_d604 = call i32 @function_10ff4(i32 19, i32* %v2_d604)
  %v4_d604 = inttoptr i32 %v3_d604 to i8*
  %v0_d608 = load i32, i32* @r5, align 4
  %v4_d60c = call i32 (i8*, i32, ...) @open(i8* %v4_d604, i32 %v0_d608)
  %v2_d610 = icmp eq i32 %v4_d60c, -1
  store i32 %v4_d60c, i32* @r8, align 4
  br i1 %v2_d610, label %bb, label %dec_label_pc_d620.preheader

bb:                                               ; preds = %dec_label_pc_d5dc
  %v1_d618 = load i32, i32* @r5, align 4
  store i32 %v1_d618, i32* @r4, align 4
  br label %dec_label_pc_da34

dec_label_pc_d620.preheader:                      ; preds = %dec_label_pc_d5dc
  %v4_d62c52 = call i32 @function_1194c(i32* %v3_d584, i32 512, i32 %v4_d60c)
  %v2_d63054 = icmp eq i32 %v4_d62c52, 0
  br i1 %v2_d63054, label %dec_label_pc_d7b8.loopexit, label %dec_label_pc_d638.lr.ph

dec_label_pc_d638.lr.ph:                          ; preds = %dec_label_pc_d620.preheader
  %v2_d680 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_d638

dec_label_pc_d638:                                ; preds = %dec_label_pc_d638.lr.ph, %dec_label_pc_d620.backedge
  %v3_d63c = load i8, i8* %stack_var_-585, align 1
  %v4_d63c = sext i8 %v3_d63c to i32
  %v2_d640 = icmp eq i8 %v3_d63c, 0
  br i1 %v2_d640, label %bb123, label %bb122

bb122:                                            ; preds = %dec_label_pc_d638
  %v8_d644 = icmp eq i8 %v3_d63c, 58
  br i1 %v8_d644, label %.thread8, label %dec_label_pc_d658

.thread8:                                         ; preds = %bb122
  br label %dec_label_pc_d670

bb123:                                            ; preds = %dec_label_pc_d638
  br label %dec_label_pc_d670

dec_label_pc_d658:                                ; preds = %bb122
  %v1_d660.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d65c

dec_label_pc_d65c:                                ; preds = %bb124, %dec_label_pc_d658
  %v0_d65c = phi i32 [ %v1_d65c, %bb124 ], [ 0, %dec_label_pc_d658 ]
  %v1_d65c = add i32 %v0_d65c, 1
  %v2_d660 = add i32 %v1_d65c, %v1_d660.pre
  %v3_d660 = inttoptr i32 %v2_d660 to i8*
  %v4_d660 = load i8, i8* %v3_d660, align 1
  %v6_d660 = zext i8 %v4_d660 to i32
  %v2_d664 = icmp eq i8 %v4_d660, 0
  br i1 %v2_d664, label %dec_label_pc_d670, label %bb124

bb124:                                            ; preds = %dec_label_pc_d65c
  %v8_d668 = icmp eq i8 %v4_d660, 58
  br i1 %v8_d668, label %dec_label_pc_d670, label %dec_label_pc_d65c

dec_label_pc_d670:                                ; preds = %dec_label_pc_d65c, %bb124, %bb123, %.thread8
  %v1_d69c = phi i32 [ 0, %.thread8 ], [ 0, %bb123 ], [ %v1_d65c, %bb124 ], [ %v1_d65c, %dec_label_pc_d65c ]
  %v0_d670 = phi i32 [ %v4_d63c, %.thread8 ], [ %v4_d63c, %bb123 ], [ %v6_d660, %bb124 ], [ %v6_d660, %dec_label_pc_d65c ]
  %v2_d670 = icmp eq i32 %v0_d670, 0
  br i1 %v2_d670, label %dec_label_pc_d620.backedge, label %dec_label_pc_d678

dec_label_pc_d620.backedge:                       ; preds = %dec_label_pc_d670, %dec_label_pc_d740, %dec_label_pc_d78c, %dec_label_pc_d6bc
  %v0_d628 = load i32, i32* @r8, align 4
  %v4_d62c = call i32 @function_1194c(i32* %v3_d584, i32 512, i32 %v0_d628)
  %v2_d630 = icmp eq i32 %v4_d62c, 0
  br i1 %v2_d630, label %dec_label_pc_d7b8.loopexit, label %dec_label_pc_d638

dec_label_pc_d678:                                ; preds = %dec_label_pc_d670
  %v1_d67c = add i32 %v1_d69c, 2
  %v2_d684 = add i32 %v1_d67c, %v2_d680
  %v1_d688 = add i32 %v2_d684, -545
  %v2_d688 = inttoptr i32 %v1_d688 to i8*
  %v3_d688 = load i8, i8* %v2_d688, align 1
  %v2_d68c = icmp eq i8 %v3_d688, 0
  br i1 %v2_d68c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_d678
  %v8_d690 = icmp eq i8 %v3_d688, 32
  br i1 %v8_d690, label %.thread13, label %dec_label_pc_d69c

.thread13:                                        ; preds = %bb125
  store i32 %v1_d67c, i32* @r5, align 4
  br label %dec_label_pc_d6bc

bb126:                                            ; preds = %dec_label_pc_d678
  store i32 %v1_d67c, i32* @r5, align 4
  br label %dec_label_pc_d6bc

dec_label_pc_d69c:                                ; preds = %bb125
  %v0_d69c = load i32, i32* @r6, align 4
  %v2_d69c = add i32 %v0_d69c, %v1_d69c
  br label %dec_label_pc_d6a4

dec_label_pc_d6a4:                                ; preds = %bb127, %dec_label_pc_d69c
  %v0_d6b016 = phi i32 [ %v1_d6b0, %bb127 ], [ %v1_d67c, %dec_label_pc_d69c ]
  %v0_d6b418 = phi i32 [ %v1_d6b4, %bb127 ], [ %v2_d69c, %dec_label_pc_d69c ]
  %v1_d6a4 = add i32 %v0_d6b418, 3
  %v2_d6a4 = inttoptr i32 %v1_d6a4 to i8*
  %v3_d6a4 = load i8, i8* %v2_d6a4, align 1
  %v2_d6a8 = icmp eq i8 %v3_d6a4, 0
  br i1 %v2_d6a8, label %.thread15, label %bb127

.thread15:                                        ; preds = %dec_label_pc_d6a4
  %v1_d6b017 = add i32 %v0_d6b016, 1
  store i32 %v1_d6b017, i32* @r5, align 4
  br label %dec_label_pc_d6bc

bb127:                                            ; preds = %dec_label_pc_d6a4
  %v8_d6ac = icmp eq i8 %v3_d6a4, 32
  %v1_d6b0 = add i32 %v0_d6b016, 1
  store i32 %v1_d6b0, i32* @r5, align 4
  %v1_d6b4 = add i32 %v0_d6b418, 1
  br i1 %v8_d6ac, label %dec_label_pc_d6bc, label %dec_label_pc_d6a4

dec_label_pc_d6bc:                                ; preds = %bb127, %bb126, %.thread15, %.thread13
  %v1_d6c8 = phi i32 [ %v1_d6b017, %.thread15 ], [ %v1_d67c, %.thread13 ], [ %v1_d67c, %bb126 ], [ %v1_d6b0, %bb127 ]
  %v0_d6bc = load i32, i32* @r6, align 4
  %v2_d6bc = add i32 %v0_d6bc, %v1_d67c
  store i32 %v2_d6bc, i32* @r4, align 4
  %v2_d6c8 = add i32 %v1_d6c8, %v2_d680
  store i32 0, i32* @r7, align 4
  %v3_d6d0 = add i32 %v2_d6c8, -545
  %v4_d6d0 = inttoptr i32 %v3_d6d0 to i8*
  store i8 0, i8* %v4_d6d0, align 1
  %v0_d6d4 = load i32, i32* @r4, align 4
  %v1_d6d8 = inttoptr i32 %v0_d6d4 to i8*
  %v2_d6d8 = call i32 @function_116ec(i8* %v1_d6d8)
  store i32 %v2_d6d8, i32* @r1, align 4
  %v0_d6e4 = load i32, i32* @r4, align 4
  %v3_d6e8 = inttoptr i32 %v0_d6e4 to i8*
  %v4_d6e8 = call i32 @function_11a3c(i8* %v3_d6e8, i32 %v2_d6d8, i32 %v2_d5b0)
  %v2_d6ec = icmp eq i32 %v4_d6e8, -1
  br i1 %v2_d6ec, label %dec_label_pc_d620.backedge, label %dec_label_pc_d708.preheader

dec_label_pc_d708.preheader:                      ; preds = %dec_label_pc_d6bc
  %v1_d6f0 = load i32, i32* @r7, align 4
  %v1_d6f4 = load i32, i32* @r6, align 4
  %v2_d6f4 = load i32, i32* @r5, align 4
  %v3_d6f4 = add i32 %v2_d6f4, %v1_d6f4
  store i32 %v1_d6f0, i32* @lr, align 4
  %v1_d70844 = add i32 %v3_d6f4, 2
  %v2_d70845 = inttoptr i32 %v1_d70844 to i8*
  %v3_d70846 = load i8, i8* %v2_d70845, align 1
  %v2_d70c48 = icmp eq i8 %v3_d70846, 0
  %v1_d71050 = add i32 %v2_d6f4, 2
  br i1 %v2_d70c48, label %dec_label_pc_d740, label %dec_label_pc_d718

dec_label_pc_d718:                                ; preds = %dec_label_pc_d708.preheader, %dec_label_pc_d708.backedge
  %v0_d74079 = phi i32 [ %v0_d74077, %dec_label_pc_d708.backedge ], [ %v1_d6f0, %dec_label_pc_d708.preheader ]
  %v0_d728.pr = phi i32 [ %v0_d728.pr66, %dec_label_pc_d708.backedge ], [ %v1_d6f0, %dec_label_pc_d708.preheader ]
  %v0_da48 = phi i32 [ %v0_da4869, %dec_label_pc_d708.backedge ], [ %v1_d6f0, %dec_label_pc_d708.preheader ]
  %v0_d71074 = phi i32 [ %v1_d710, %dec_label_pc_d708.backedge ], [ %v1_d71050, %dec_label_pc_d708.preheader ]
  %v0_d738 = phi i32 [ %v0_d708, %dec_label_pc_d708.backedge ], [ %v3_d6f4, %dec_label_pc_d708.preheader ]
  %v1_d71c.in = phi i8 [ %v3_d708, %dec_label_pc_d708.backedge ], [ %v3_d70846, %dec_label_pc_d708.preheader ]
  %v7_d718 = icmp eq i8 %v1_d71c.in, 9
  br i1 %v7_d718, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d718
  %v8_d71c = icmp eq i8 %v1_d71c.in, 32
  br i1 %v8_d71c, label %.thread27, label %dec_label_pc_d728

.thread27:                                        ; preds = %bb128
  br label %dec_label_pc_d734

bb129:                                            ; preds = %dec_label_pc_d718
  br label %dec_label_pc_d734

dec_label_pc_d728:                                ; preds = %bb128
  %v7_d728 = icmp eq i32 %v0_d728.pr, 1
  br i1 %v7_d728, label %dec_label_pc_da48, label %dec_label_pc_d730

dec_label_pc_d730:                                ; preds = %dec_label_pc_da48, %dec_label_pc_d728
  %v0_d73471 = phi i32 [ %v1_da48, %dec_label_pc_da48 ], [ %v0_da48, %dec_label_pc_d728 ]
  br label %dec_label_pc_d734

dec_label_pc_d734:                                ; preds = %bb129, %.thread27, %dec_label_pc_d730
  %v0_d734 = phi i32 [ %v0_da48, %.thread27 ], [ %v0_da48, %bb129 ], [ %v0_d73471, %dec_label_pc_d730 ]
  %v0_d728.pr67 = phi i32 [ 1, %.thread27 ], [ 1, %bb129 ], [ 0, %dec_label_pc_d730 ]
  %v7_d73c = icmp sgt i32 %v0_d734, 6
  br i1 %v7_d73c, label %dec_label_pc_d740, label %dec_label_pc_d708.backedge

dec_label_pc_d740:                                ; preds = %dec_label_pc_d708.backedge, %dec_label_pc_d734, %dec_label_pc_d708.preheader
  %v1_d790 = phi i32 [ %v1_d71050, %dec_label_pc_d708.preheader ], [ %v1_d710, %dec_label_pc_d708.backedge ], [ %v0_d71074, %dec_label_pc_d734 ]
  %v0_d740 = phi i32 [ %v1_d6f0, %dec_label_pc_d708.preheader ], [ %v0_d74077, %dec_label_pc_d708.backedge ], [ %v0_d74079, %dec_label_pc_d734 ]
  %v2_d740 = icmp eq i32 %v0_d740, 0
  br i1 %v2_d740, label %dec_label_pc_d620.backedge, label %dec_label_pc_d74c

dec_label_pc_d74c:                                ; preds = %dec_label_pc_d740
  %v2_d754 = add i32 %v1_d790, %v2_d680
  %v1_d758 = add i32 %v2_d754, -545
  %v2_d758 = inttoptr i32 %v1_d758 to i8*
  %v3_d758 = load i8, i8* %v2_d758, align 1
  %v2_d75c = icmp eq i8 %v3_d758, 0
  br i1 %v2_d75c, label %dec_label_pc_d78c, label %bb130

bb130:                                            ; preds = %dec_label_pc_d74c
  %v8_d760 = icmp eq i8 %v3_d758, 32
  br i1 %v8_d760, label %dec_label_pc_d78c, label %dec_label_pc_d768

dec_label_pc_d768:                                ; preds = %bb130
  %v2_d768 = add i32 %v1_d790, %v1_d6f4
  br label %dec_label_pc_d76c

dec_label_pc_d76c:                                ; preds = %bb131, %dec_label_pc_d768
  %v0_d77830 = phi i32 [ %v1_d778, %bb131 ], [ %v1_d790, %dec_label_pc_d768 ]
  %v0_d76c = phi i32 [ %v1_d76c, %bb131 ], [ %v2_d768, %dec_label_pc_d768 ]
  %v1_d76c = add i32 %v0_d76c, 1
  %v2_d76c = inttoptr i32 %v1_d76c to i8*
  %v3_d76c = load i8, i8* %v2_d76c, align 1
  %v2_d770 = icmp eq i8 %v3_d76c, 0
  br i1 %v2_d770, label %.thread29, label %bb131

.thread29:                                        ; preds = %dec_label_pc_d76c
  %v1_d77831 = add i32 %v0_d77830, 1
  br label %dec_label_pc_d780

bb131:                                            ; preds = %dec_label_pc_d76c
  %v8_d774 = icmp eq i8 %v3_d76c, 32
  %v1_d778 = add i32 %v0_d77830, 1
  br i1 %v8_d774, label %dec_label_pc_d780, label %dec_label_pc_d76c

dec_label_pc_d780:                                ; preds = %bb131, %.thread29
  %v1_d788 = phi i32 [ %v1_d77831, %.thread29 ], [ %v1_d778, %bb131 ]
  %v2_d788 = add i32 %v1_d788, %v2_d680
  br label %dec_label_pc_d78c

dec_label_pc_d78c:                                ; preds = %dec_label_pc_d74c, %bb130, %dec_label_pc_d780
  %v2_d798 = phi i32 [ %v2_d754, %dec_label_pc_d74c ], [ %v2_d754, %bb130 ], [ %v2_d788, %dec_label_pc_d780 ]
  %v2_d790 = add i32 %v1_d790, %v1_d6f4
  store i32 %v2_d790, i32* @r4, align 4
  %v3_d798 = add i32 %v2_d798, -545
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 0, i8* %v4_d798, align 1
  %v1_d79c = inttoptr i32 %v2_d790 to i8*
  %v2_d79c = call i32 @function_116ec(i8* %v1_d79c)
  %v8_d7a4 = icmp sgt i32 %v2_d79c, 15
  br i1 %v8_d7a4, label %dec_label_pc_d620.backedge, label %dec_label_pc_d7a8

dec_label_pc_d7a8:                                ; preds = %dec_label_pc_d78c
  %v0_d7ac = load i32, i32* @r4, align 4
  %v2_d7b0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_d7b0, i32* @r0, align 4
  %v2_d7b4 = bitcast i32* %stack_var_-56 to i8*
  %v3_d7b4 = call i32 @function_11714(i8* %v2_d7b4, i32 %v0_d7ac)
  br label %dec_label_pc_d7b8

dec_label_pc_d7b8.loopexit:                       ; preds = %dec_label_pc_d620.backedge, %dec_label_pc_d620.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre89 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_d7b8

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_d7b8.loopexit, %dec_label_pc_d7a8
  %v1_d7c8.pre-phi = phi i8* [ %.pre89, %dec_label_pc_d7b8.loopexit ], [ %v2_d7b4, %dec_label_pc_d7a8 ]
  %v2_d7c4.pre-phi = phi i32 [ %.pre, %dec_label_pc_d7b8.loopexit ], [ %v2_d7b0, %dec_label_pc_d7a8 ]
  %v0_d7b8 = load i32, i32* @r8, align 4
  %v1_d7bc = call i32 @close(i32 %v0_d7b8)
  %v2_d7c8 = call i32 @function_116ec(i8* %v1_d7c8.pre-phi)
  store i32 %v2_d7c8, i32* @r4, align 4
  %v2_d7cc = icmp eq i32 %v2_d7c8, 0
  br i1 %v2_d7cc, label %dec_label_pc_da74, label %dec_label_pc_d7d4

dec_label_pc_d7d4:                                ; preds = %dec_label_pc_d7b8
  %v3_d7dc = call i32 @function_10ff4(i32 15, i32* null)
  %v4_d7dc = inttoptr i32 %v3_d7dc to i8*
  %v3_d7e0 = call %__dirstream* @opendir(i8* %v4_d7dc)
  %v5_d7e0 = ptrtoint %__dirstream* %v3_d7e0 to i32
  store i32 %v5_d7e0, i32* %sb.global-to-local, align 4
  %v2_d7e4 = icmp eq %__dirstream* %v3_d7e0, null
  br i1 %v2_d7e4, label %dec_label_pc_da14, label %dec_label_pc_d7f4.preheader

dec_label_pc_d7f4.preheader:                      ; preds = %dec_label_pc_d7d4
  store i32 0, i32* @r5, align 4
  %v3_d7f839 = call %dirent* @readdir(%__dirstream* nonnull %v3_d7e0)
  %v2_d7fc42 = icmp eq %dirent* %v3_d7f839, null
  br i1 %v2_d7fc42, label %dec_label_pc_da08, label %dec_label_pc_d804.preheader.lr.ph

dec_label_pc_d804.preheader.lr.ph:                ; preds = %dec_label_pc_d7f4.preheader
  %v2_d834 = bitcast i32* %stack_var_-4681 to i8*
  %tmp133 = bitcast i32* %stack_var_-8777 to i8*
  br label %dec_label_pc_d804.preheader

dec_label_pc_d7f4.loopexit:                       ; preds = %dec_label_pc_d80c, %dec_label_pc_d81c, %dec_label_pc_d888
  %v0_d7f4 = load i32, i32* %sb.global-to-local, align 4
  %v1_d7f4 = inttoptr i32 %v0_d7f4 to %__dirstream*
  %v3_d7f8 = call %dirent* @readdir(%__dirstream* %v1_d7f4)
  %v2_d7fc = icmp eq %dirent* %v3_d7f8, null
  br i1 %v2_d7fc, label %dec_label_pc_da08, label %dec_label_pc_d804.preheader

dec_label_pc_d804.preheader:                      ; preds = %dec_label_pc_d804.preheader.lr.ph, %dec_label_pc_d7f4.loopexit
  %v0_d80c87.in = phi %dirent* [ %v3_d7f839, %dec_label_pc_d804.preheader.lr.ph ], [ %v3_d7f8, %dec_label_pc_d7f4.loopexit ]
  br label %dec_label_pc_d804

dec_label_pc_d804:                                ; preds = %dec_label_pc_d804.preheader, %dec_label_pc_d9f0
  %v0_d824.in = phi %dirent* [ %v0_d80c87.in, %dec_label_pc_d804.preheader ], [ %v3_d9fc, %dec_label_pc_d9f0 ]
  %v0_d804 = load i32, i32* @r5, align 4
  %v2_d804 = icmp eq i32 %v0_d804, 0
  br i1 %v2_d804, label %dec_label_pc_d80c, label %dec_label_pc_da08

dec_label_pc_d80c:                                ; preds = %dec_label_pc_d804
  %v0_d824 = ptrtoint %dirent* %v0_d824.in to i32
  %v1_d80c = add i32 %v0_d824, 11
  %v2_d80c = inttoptr i32 %v1_d80c to i8*
  %v3_d80c = load i8, i8* %v2_d80c, align 1
  %v4_d80c = zext i8 %v3_d80c to i32
  %v1_d810 = add nsw i32 %v4_d80c, -48
  %tmp = icmp ugt i32 %v1_d810, 9
  br i1 %tmp, label %dec_label_pc_d7f4.loopexit, label %dec_label_pc_d81c

dec_label_pc_d81c:                                ; preds = %dec_label_pc_d80c
  store i32 %v1_d80c, i32* @r7, align 4
  %v3_d828 = call i32 @function_10ff4(i32 15, i32* null)
  store i32 %v2_d588, i32* @r0, align 4
  %v3_d834 = call i32 @function_11714(i8* %v2_d834, i32 %v3_d828)
  %v2_d83c = call i32 @function_116ec(i8* %v2_d834)
  %v0_d840 = load i32, i32* @r7, align 4
  %v1_d844 = load i32, i32* @sl, align 4
  %v2_d844 = add i32 %v1_d844, %v2_d83c
  store i32 %v2_d844, i32* @r0, align 4
  %v2_d848 = inttoptr i32 %v2_d844 to i8*
  %v3_d848 = call i32 @function_11714(i8* %v2_d848, i32 %v0_d840)
  %v2_d850 = call i32 @function_116ec(i8* %v2_d834)
  %v0_d854 = load i32, i32* @r5, align 4
  store i32 %v2_d850, i32* %r4.global-to-local, align 4
  %v2_d860 = inttoptr i32 %v0_d854 to i32*
  %v3_d860 = call i32 @function_10ff4(i32 16, i32* %v2_d860)
  %v1_d868 = load i32, i32* @sl, align 4
  %v2_d868 = add i32 %v1_d868, %v2_d850
  store i32 %v2_d868, i32* @r0, align 4
  %v2_d86c = inttoptr i32 %v2_d868 to i8*
  %v3_d86c = call i32 @function_11714(i8* %v2_d86c, i32 %v3_d860)
  %v7_d87c = call i32 @readlink(i8* %v2_d834, i8* %tmp133, i32 4096)
  %v2_d880 = icmp eq i32 %v7_d87c, -1
  br i1 %v2_d880, label %dec_label_pc_d7f4.loopexit, label %dec_label_pc_d888

dec_label_pc_d888:                                ; preds = %dec_label_pc_d81c
  %v0_d888 = load i32, i32* @r5, align 4
  %v2_d890 = inttoptr i32 %v0_d888 to i32*
  %v3_d890 = call i32 @function_10ff4(i32 15, i32* %v2_d890)
  store i32 %v2_d588, i32* @r0, align 4
  %v3_d89c = call i32 @function_11714(i8* %v2_d834, i32 %v3_d890)
  %v2_d8a4 = call i32 @function_116ec(i8* %v2_d834)
  %v0_d8a8 = load i32, i32* @r7, align 4
  %v1_d8ac = load i32, i32* @sl, align 4
  %v2_d8ac = add i32 %v1_d8ac, %v2_d8a4
  store i32 %v2_d8ac, i32* @r0, align 4
  %v2_d8b0 = inttoptr i32 %v2_d8ac to i8*
  %v3_d8b0 = call i32 @function_11714(i8* %v2_d8b0, i32 %v0_d8a8)
  %v2_d8b8 = call i32 @function_116ec(i8* %v2_d834)
  %v0_d8bc = load i32, i32* @r5, align 4
  store i32 %v2_d8b8, i32* %r4.global-to-local, align 4
  %v2_d8c8 = inttoptr i32 %v0_d8bc to i32*
  %v3_d8c8 = call i32 @function_10ff4(i32 17, i32* %v2_d8c8)
  %v1_d8d0 = load i32, i32* @sl, align 4
  %v2_d8d0 = add i32 %v1_d8d0, %v2_d8b8
  store i32 %v2_d8d0, i32* @r0, align 4
  %v2_d8d4 = inttoptr i32 %v2_d8d0 to i8*
  %v3_d8d4 = call i32 @function_11714(i8* %v2_d8d4, i32 %v3_d8c8)
  %v3_d8dc = call %__dirstream* @opendir(i8* %v2_d834)
  %v5_d8dc = ptrtoint %__dirstream* %v3_d8dc to i32
  store i32 %v5_d8dc, i32* @r8, align 4
  %v2_d8e0 = icmp eq %__dirstream* %v3_d8dc, null
  br i1 %v2_d8e0, label %dec_label_pc_d7f4.loopexit, label %dec_label_pc_d8e8.preheader

dec_label_pc_d8e8.preheader:                      ; preds = %dec_label_pc_d888
  %v3_d8ec140 = call %dirent* @readdir(%__dirstream* nonnull %v3_d8dc)
  %v5_d8ec141 = ptrtoint %dirent* %v3_d8ec140 to i32
  store i32 %v5_d8ec141, i32* @r6, align 4
  %v2_d8f0142 = icmp eq %dirent* %v3_d8ec140, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d578, i32* @r0, align 4
  br i1 %v2_d8f0142, label %dec_label_pc_d9f0, label %dec_label_pc_d900thread-pre-split

dec_label_pc_d8e8.loopexit:                       ; preds = %dec_label_pc_d908, %dec_label_pc_d9a0
  %v0_d8e8.pre = load i32, i32* @r8, align 4
  %v1_d8e8 = inttoptr i32 %v0_d8e8.pre to %__dirstream*
  %v3_d8ec = call %dirent* @readdir(%__dirstream* %v1_d8e8)
  %v5_d8ec = ptrtoint %dirent* %v3_d8ec to i32
  store i32 %v5_d8ec, i32* @r6, align 4
  %v2_d8f0 = icmp eq %dirent* %v3_d8ec, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d578, i32* @r0, align 4
  br i1 %v2_d8f0, label %dec_label_pc_d9f0, label %dec_label_pc_d900thread-pre-split

dec_label_pc_d900thread-pre-split:                ; preds = %dec_label_pc_d8e8.preheader, %dec_label_pc_d8e8.loopexit
  %v0_d900.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d900

dec_label_pc_d900:                                ; preds = %dec_label_pc_d900thread-pre-split, %dec_label_pc_d9c8
  %v0_d900 = phi i32 [ %v0_d900.pr, %dec_label_pc_d900thread-pre-split ], [ 1, %dec_label_pc_d9c8 ]
  %v2_d900 = icmp eq i32 %v0_d900, 0
  br i1 %v2_d900, label %dec_label_pc_d908, label %dec_label_pc_d9f0

dec_label_pc_d908:                                ; preds = %dec_label_pc_d900
  %v0_d908 = call i32 @function_11780()
  %v0_d90c = load i32, i32* @r5, align 4
  %v2_d914 = inttoptr i32 %v0_d90c to i32*
  %v3_d914 = call i32 @function_10ff4(i32 15, i32* %v2_d914)
  store i32 %v2_d588, i32* @r0, align 4
  %v3_d920 = call i32 @function_11714(i8* %v2_d834, i32 %v3_d914)
  %v2_d928 = call i32 @function_116ec(i8* %v2_d834)
  %v0_d92c = load i32, i32* @r7, align 4
  %v1_d930 = load i32, i32* @sl, align 4
  %v2_d930 = add i32 %v1_d930, %v2_d928
  store i32 %v2_d930, i32* @r0, align 4
  %v2_d934 = inttoptr i32 %v2_d930 to i8*
  %v3_d934 = call i32 @function_11714(i8* %v2_d934, i32 %v0_d92c)
  %v2_d93c = call i32 @function_116ec(i8* %v2_d834)
  %v0_d940 = load i32, i32* @r5, align 4
  store i32 %v2_d93c, i32* @r4, align 4
  %v2_d94c = inttoptr i32 %v0_d940 to i32*
  %v3_d94c = call i32 @function_10ff4(i32 17, i32* %v2_d94c)
  %v0_d954 = load i32, i32* @r4, align 4
  %v1_d954 = load i32, i32* @sl, align 4
  %v2_d954 = add i32 %v1_d954, %v0_d954
  store i32 %v2_d954, i32* @r0, align 4
  %v2_d958 = inttoptr i32 %v2_d954 to i8*
  %v3_d958 = call i32 @function_11714(i8* %v2_d958, i32 %v3_d94c)
  %v2_d960 = call i32 @function_116ec(i8* %v2_d834)
  %v1_d968 = load i32, i32* @sl, align 4
  %v2_d968 = add i32 %v1_d968, %v2_d960
  store i32 %v2_d968, i32* @r0, align 4
  %v2_d96c = inttoptr i32 %v2_d968 to i8*
  %v3_d96c = call i32 @function_11714(i8* %v2_d96c, i32 ptrtoint (i32* @global_var_11d80.55 to i32))
  %v2_d974 = call i32 @function_116ec(i8* %v2_d834)
  %v0_d978 = load i32, i32* @r6, align 4
  %v1_d978 = add i32 %v0_d978, 11
  %v1_d97c = load i32, i32* @sl, align 4
  %v2_d97c = add i32 %v1_d97c, %v2_d974
  store i32 %v2_d97c, i32* @r0, align 4
  %v2_d980 = inttoptr i32 %v2_d97c to i8*
  %v3_d980 = call i32 @function_11714(i8* %v2_d980, i32 %v1_d978)
  %v7_d990 = call i32 @readlink(i8* %v2_d834, i8* %tmp133, i32 4096)
  %v2_d994 = icmp eq i32 %v7_d990, -1
  br i1 %v2_d994, label %dec_label_pc_d8e8.loopexit, label %dec_label_pc_d9a0

dec_label_pc_d9a0:                                ; preds = %dec_label_pc_d908
  %v2_d9a0 = call i32 @function_116ec(i8* %tmp133)
  store i32 %v2_d9a0, i32* @r1, align 4
  %v4_d9b4 = call i32 @function_11a3c(i8* %tmp133, i32 %v2_d9a0, i32 %v2_d7c4.pre-phi)
  %v2_d9b8 = icmp eq i32 %v4_d9b4, -1
  br i1 %v2_d9b8, label %dec_label_pc_d8e8.loopexit, label %dec_label_pc_d9c8

dec_label_pc_d9c8:                                ; preds = %dec_label_pc_d9a0
  %v0_d9c0 = load i32, i32* @r7, align 4
  %v2_d9c8 = inttoptr i32 %v0_d9c0 to i8*
  %v3_d9c8 = call i32 @function_11810(i8* %v2_d9c8, i32 10)
  %v2_d9d0 = call i32 @kill(i32 %v3_d9c8, i32 9)
  %v0_d9d4 = load i32, i32* @r8, align 4
  %v1_d9d4 = inttoptr i32 %v0_d9d4 to %__dirstream*
  %v3_d9d8 = call %dirent* @readdir(%__dirstream* %v1_d9d4)
  %v5_d9d8 = ptrtoint %dirent* %v3_d9d8 to i32
  store i32 %v5_d9d8, i32* @r6, align 4
  %v2_d9dc = icmp eq %dirent* %v3_d9d8, null
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d578, i32* @r0, align 4
  br i1 %v2_d9dc, label %dec_label_pc_d9f0, label %dec_label_pc_d900

dec_label_pc_d9f0:                                ; preds = %dec_label_pc_d8e8.preheader, %dec_label_pc_d8e8.loopexit, %dec_label_pc_d9c8, %dec_label_pc_d900
  %v0_d9f0 = load i32, i32* @r8, align 4
  %v1_d9f0 = inttoptr i32 %v0_d9f0 to %__dirstream*
  %v3_d9f4 = call i32 @closedir(%__dirstream* %v1_d9f0)
  %v0_d9f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_d9f8 = inttoptr i32 %v0_d9f8 to %__dirstream*
  %v3_d9fc = call %dirent* @readdir(%__dirstream* %v1_d9f8)
  %v2_da00 = icmp eq %dirent* %v3_d9fc, null
  br i1 %v2_da00, label %dec_label_pc_da08, label %dec_label_pc_d804

dec_label_pc_da08:                                ; preds = %dec_label_pc_d7f4.loopexit, %dec_label_pc_d9f0, %dec_label_pc_d804, %dec_label_pc_d7f4.preheader
  %v0_da08 = load i32, i32* %sb.global-to-local, align 4
  %v1_da08 = inttoptr i32 %v0_da08 to %__dirstream*
  %v3_da0c = call i32 @closedir(%__dirstream* %v1_da08)
  %v0_da10 = load i32, i32* @r5, align 4
  %v1_da10 = urem i32 %v0_da10, 256
  br label %dec_label_pc_da14

dec_label_pc_da14:                                ; preds = %dec_label_pc_d7d4, %dec_label_pc_da08
  %storemerge = phi i32 [ %v1_da10, %dec_label_pc_da08 ], [ %v5_d7e0, %dec_label_pc_d7d4 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_da18 = call i32 @sleep(i32 1)
  %v1_da20 = call i32 @function_11018(i32 15)
  %v1_da28 = call i32 @function_11018(i32 16)
  %v1_da30 = call i32 @function_11018(i32 17)
  br label %dec_label_pc_da34

dec_label_pc_da34:                                ; preds = %bb, %dec_label_pc_da74, %dec_label_pc_da14
  %v0_da34 = load i32, i32* @r4, align 4
  store i32 %v3_d530, i32* @r4, align 4
  store i32 %v6_d530, i32* @r5, align 4
  store i32 %v9_d530, i32* @r6, align 4
  store i32 %v12_d530, i32* @r7, align 4
  store i32 %v15_d530, i32* @r8, align 4
  store i32 %v21_d530, i32* @sl, align 4
  store i32 %v27_d530, i32* @lr, align 4
  ret i32 %v0_da34

dec_label_pc_da48:                                ; preds = %dec_label_pc_d728
  %v1_da48 = add i32 %v0_da48, 1
  %v7_da4c = icmp eq i32 %v0_da48, 0
  br i1 %v7_da4c, label %dec_label_pc_da54, label %dec_label_pc_d730

dec_label_pc_da54:                                ; preds = %dec_label_pc_da48
  %v1_da54 = add i32 %v0_d738, 3
  %v2_da54 = inttoptr i32 %v1_da54 to i8*
  %v3_da54 = load i8, i8* %v2_da54, align 1
  %v7_da58 = icmp eq i8 %v3_da54, 65
  br i1 %v7_da58, label %dec_label_pc_da6c, label %dec_label_pc_da60

dec_label_pc_da60:                                ; preds = %dec_label_pc_da54, %dec_label_pc_da6c
  %v0_d74078 = phi i32 [ %v0_d74079, %dec_label_pc_da54 ], [ 1, %dec_label_pc_da6c ]
  br label %dec_label_pc_d708.backedge

dec_label_pc_d708.backedge:                       ; preds = %dec_label_pc_da60, %dec_label_pc_d734
  %v0_d74077 = phi i32 [ %v0_d74078, %dec_label_pc_da60 ], [ %v0_d74079, %dec_label_pc_d734 ]
  %v0_da4869 = phi i32 [ %v1_da48, %dec_label_pc_da60 ], [ %v0_d734, %dec_label_pc_d734 ]
  %v0_d728.pr66 = phi i32 [ 0, %dec_label_pc_da60 ], [ %v0_d728.pr67, %dec_label_pc_d734 ]
  %v0_d708 = add i32 %v0_d738, 1
  %v1_d708 = add i32 %v0_d738, 3
  %v2_d708 = inttoptr i32 %v1_d708 to i8*
  %v3_d708 = load i8, i8* %v2_d708, align 1
  %v2_d70c = icmp eq i8 %v3_d708, 0
  %v1_d710 = add i32 %v0_d71074, 1
  br i1 %v2_d70c, label %dec_label_pc_d740, label %dec_label_pc_d718

dec_label_pc_da6c:                                ; preds = %dec_label_pc_da54
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_da60

dec_label_pc_da74:                                ; preds = %dec_label_pc_d7b8
  %v1_da78 = call i32 @function_11018(i32 15)
  %v1_da80 = call i32 @function_11018(i32 16)
  %v1_da88 = call i32 @function_11018(i32 17)
  %v1_da90 = call i32 @function_11018(i32 19)
  br label %dec_label_pc_da34

dec_label_pc_da98:                                ; preds = %dec_label_pc_d530
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_d5dc

; uselistorder directives
  uselistorder i32 %v1_d710, { 1, 0 }
  uselistorder i8 %v3_d708, { 1, 0 }
  uselistorder i32 %v0_d74077, { 1, 0 }
  uselistorder i32 %v1_da48, { 1, 0 }
  uselistorder %dirent* %v3_d9fc, { 1, 0 }
  uselistorder i8* %tmp133, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d76c, { 1, 0 }
  uselistorder i32 %v0_d77830, { 1, 0 }
  uselistorder i32 %v1_d790, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d734, { 1, 0 }
  uselistorder i32 %v0_d71074, { 1, 0 }
  uselistorder i32 %v0_da48, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d74079, { 1, 2, 0 }
  uselistorder i32 %v1_d71050, { 1, 0 }
  uselistorder i32 %v2_d6f4, { 1, 0 }
  uselistorder i32 %v1_d6f0, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_d6b0, { 0, 2, 1 }
  uselistorder i32 %v0_d6b016, { 1, 0 }
  uselistorder i32 %v1_d67c, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v0_d5b4, { 1, 0 }
  uselistorder i32 %v2_d5b0, { 1, 0, 2 }
  uselistorder i32* %v3_d584, { 1, 0, 2 }
  uselistorder i32 %v2_d578, { 1, 2, 0 }
  uselistorder i8* %stack_var_-585, { 2, 0, 1 }
  uselistorder i32* %stack_var_-8777, { 1, 0, 2 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 47, { 1, 2, 0 }
  uselistorder i32 (i32*, i32, i32)* @function_1194c, { 1, 0 }
  uselistorder i32 512, { 4, 0, 1, 7, 5, 8, 6, 9, 2, 10, 3, 11 }
  uselistorder i32* (i32*, i32, i32)* @memset, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_da60, { 1, 0 }
  uselistorder label %dec_label_pc_da34, { 1, 2, 0 }
  uselistorder label %dec_label_pc_da14, { 1, 0 }
  uselistorder label %dec_label_pc_da08, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d9f0, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_d900, { 1, 0 }
  uselistorder label %dec_label_pc_d900thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d8e8.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d804, { 1, 0 }
  uselistorder label %dec_label_pc_d804.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d7f4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d78c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d734, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d718, { 1, 0 }
  uselistorder label %dec_label_pc_d6bc, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_d620.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d670, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d638, { 1, 0 }
  uselistorder label %dec_label_pc_d5dc, { 1, 0 }
}

define i32 @function_dac4(i32 %arg1) local_unnamed_addr {
dec_label_pc_dac4:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-8416 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-256 = alloca i32, align 4
  %v3_dac4 = load i32, i32* @r4, align 4
  %v6_dac4 = load i32, i32* @r5, align 4
  %v9_dac4 = load i32, i32* @r6, align 4
  %v12_dac4 = load i32, i32* @r7, align 4
  %v27_dac4 = load i32, i32* @lr, align 4
  %v2_dad4 = call i32 @time(i32* null)
  store i32 %v2_dad4, i32* @r7, align 4
  %v0_dadc = call i32 @fork()
  %v2_dae0 = icmp eq i32 %v0_dadc, -1
  %. = zext i1 %v2_dae0 to i32
  %tmp252 = icmp slt i32 %v0_dadc, 1
  %storemerge213 = select i1 %tmp252, i32 %., i32 1
  store i32 %storemerge213, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1a238.53 to i32), i32* %r3.global-to-local, align 4
  %v2_dafc = icmp eq i32 %storemerge213, 0
  store i32 %v0_dadc, i32* @global_var_1a238.53, align 4
  br i1 %v2_dafc, label %dec_label_pc_db18, label %dec_label_pc_db08

dec_label_pc_db08:                                ; preds = %dec_label_pc_ddbc, %dec_label_pc_dca0, %dec_label_pc_dac4
  %v1_db14 = phi i32 [ -1, %dec_label_pc_dca0 ], [ %v0_dadc, %dec_label_pc_dac4 ], [ %v5_ddd0, %dec_label_pc_ddbc ]
  store i32 %v3_dac4, i32* @r4, align 4
  store i32 %v6_dac4, i32* @r5, align 4
  store i32 %v9_dac4, i32* @r6, align 4
  store i32 %v12_dac4, i32* @r7, align 4
  store i32 %v27_dac4, i32* @lr, align 4
  ret i32 %v1_db14

dec_label_pc_db18:                                ; preds = %dec_label_pc_dac4
  %v2_db18 = ptrtoint i32* %stack_var_-256 to i32
  store i32 %v2_db18, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-80, align 4
  %v1_db30 = call i32 @function_d530(i32 58811)
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_db48 = load i32, i32* @r5, align 4
  store i32 %v0_db48, i32* %r2.global-to-local, align 4
  %v3_db50 = call i32 @socket(i32 2, i32 1, i32 %v0_db48)
  %v2_db54 = icmp eq i32 %v3_db50, -1
  store i32 %v3_db50, i32* @r4, align 4
  br i1 %v2_db54, label %dec_label_pc_db7c, label %dec_label_pc_db60

dec_label_pc_db60:                                ; preds = %dec_label_pc_db18
  %v2_db64 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_db64, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_db6c = call i32 @bind(i32 %v2_db64, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_db70 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_db78 = call i32 @listen(i32 %v0_db70, i32 1)
  br label %dec_label_pc_db7c

dec_label_pc_db7c:                                ; preds = %dec_label_pc_db18, %dec_label_pc_db60
  %v1_db84 = call i32 @function_d530(i32 50951)
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_db9c = load i32, i32* @r5, align 4
  store i32 %v0_db9c, i32* %r2.global-to-local, align 4
  %v3_dba4 = call i32 @socket(i32 2, i32 1, i32 %v0_db9c)
  %v2_dba8 = icmp eq i32 %v3_dba4, -1
  store i32 %v3_dba4, i32* %r4.global-to-local, align 4
  br i1 %v2_dba8, label %dec_label_pc_dbd0, label %dec_label_pc_dbb4

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_db7c
  %v2_dbb8 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_dbb8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_dbc0 = call i32 @bind(i32 %v2_dbb8, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_dbc4 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dbcc = call i32 @listen(i32 %v0_dbc4, i32 1)
  br label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_db7c, %dec_label_pc_dbb4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_dbd8 = load i32, i32* @r5, align 4
  store i32 %v0_dbd8, i32* %r2.global-to-local, align 4
  %v3_dbdc = call i32 @socket(i32 2, i32 1, i32 %v0_dbd8)
  %v2_dbe0 = icmp eq i32 %v3_dbdc, -1
  store i32 %v3_dbdc, i32* @r4, align 4
  br i1 %v2_dbe0, label %dec_label_pc_dc08, label %dec_label_pc_dbec

dec_label_pc_dbec:                                ; preds = %dec_label_pc_dbd0
  %v2_dbf0 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_dbf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_dbf8 = call i32 @bind(i32 %v2_dbf0, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_dbfc = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dc04 = call i32 @listen(i32 %v0_dbfc, i32 1)
  br label %dec_label_pc_dc08

dec_label_pc_dc08:                                ; preds = %dec_label_pc_dbd0, %dec_label_pc_dbec
  %v1_dc0c = call i32 @function_d530(i32 5632)
  store i32 %v2_db18, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_dc20 = load i32, i32* @r5, align 4
  store i32 %v0_dc20, i32* %r2.global-to-local, align 4
  %v3_dc28 = call i32 @socket(i32 2, i32 1, i32 %v0_dc20)
  %v2_dc2c = icmp eq i32 %v3_dc28, -1
  store i32 %v3_dc28, i32* @r4, align 4
  br i1 %v2_dc2c, label %dec_label_pc_dc54, label %dec_label_pc_dc38

dec_label_pc_dc38:                                ; preds = %dec_label_pc_dc08
  %v2_dc3c = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_dc3c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_dc44 = call i32 @bind(i32 %v2_dc3c, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_dc48 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dc50 = call i32 @listen(i32 %v0_dc48, i32 1)
  br label %dec_label_pc_dc54

dec_label_pc_dc54:                                ; preds = %dec_label_pc_dc08, %dec_label_pc_dc38
  %v1_dc58 = call i32 @function_d530(i32 5888)
  store i32 %v2_db18, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_dc6c = load i32, i32* @r5, align 4
  store i32 %v0_dc6c, i32* %r2.global-to-local, align 4
  %v3_dc74 = call i32 @socket(i32 2, i32 1, i32 %v0_dc6c)
  %v2_dc78 = icmp eq i32 %v3_dc74, -1
  store i32 %v3_dc74, i32* @r4, align 4
  br i1 %v2_dc78, label %dec_label_pc_dca0, label %dec_label_pc_dc84

dec_label_pc_dc84:                                ; preds = %dec_label_pc_dc54
  %v2_dc88 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_dc88, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_dc90 = call i32 @bind(i32 %v2_dc88, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_dc94 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dc9c = call i32 @listen(i32 %v0_dc94, i32 1)
  br label %dec_label_pc_dca0

dec_label_pc_dca0:                                ; preds = %dec_label_pc_dc54, %dec_label_pc_dc84
  %v1_dca4 = call i32 @sleep(i32 5)
  %v1_dcac = call i32* @malloc(i32 4096)
  %v3_dcac = ptrtoint i32* %v1_dcac to i32
  store i32 ptrtoint (i32* @global_var_1a1dc.58 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a234.60 to i32), i32* %r1.global-to-local, align 4
  store i32 %v3_dcac, i32* %r2.global-to-local, align 4
  %v0_dcbc = load i32, i32* @r5, align 4
  %v1_dcbc = trunc i32 %v0_dcbc to i8
  %v3_dcbc = bitcast i32* %v1_dcac to i8*
  store i8 %v1_dcbc, i8* %v3_dcbc, align 1
  %v0_dcc4 = load i32, i32* @r5, align 4
  %v1_dcc4 = load i32, i32* %r3.global-to-local, align 4
  %v2_dcc4 = inttoptr i32 %v1_dcc4 to i32*
  store i32 %v0_dcc4, i32* %v2_dcc4, align 4
  %v0_dcc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_dcc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_dcc8 = inttoptr i32 %v1_dcc8 to i32*
  store i32 %v0_dcc8, i32* %v2_dcc8, align 4
  %v1_dccc = call i32 @function_110b8(i32 15)
  %v1_dcd4 = call i32 @function_110b8(i32 16)
  %v2_dcdc = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_dcdc, i32* %r2.global-to-local, align 4
  %v0_dce0 = load i32, i32* @r5, align 4
  store i32 %v0_dce0, i32* %r1.global-to-local, align 4
  %v2_dcec = inttoptr i32 %v0_dce0 to i32*
  %v3_dcec = call i32 @function_10ff4(i32 15, i32* %v2_dcec)
  %v1_dcf4 = add i32 %v2_dcdc, -56
  store i32 %v1_dcf4, i32* %r3.global-to-local, align 4
  store i32 %v3_dcec, i32* %r1.global-to-local, align 4
  store i32 %v1_dcf4, i32* @r0, align 4
  %v2_dd04 = inttoptr i32 %v1_dcf4 to i8*
  %v3_dd04 = call i32 @function_11714(i8* %v2_dd04, i32 %v3_dcec)
  %v2_dd0c = add i32 %v3_dd04, %v1_dcf4
  store i32 %v2_dd0c, i32* @r4, align 4
  %v1_dd10 = call i32 @getpid()
  %v2_dd18 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_dd18, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_dd20 = trunc i32 %v1_dd10 to i8
  %v4_dd20 = call i32 @function_11b4c(i8 %v3_dd20, i32 10, i32 %v2_dd18)
  store i32 %v4_dd20, i32* %r1.global-to-local, align 4
  %v0_dd28 = load i32, i32* @r4, align 4
  store i32 %v0_dd28, i32* @r0, align 4
  %v2_dd2c = inttoptr i32 %v0_dd28 to i8*
  %v3_dd2c = call i32 @function_11714(i8* %v2_dd2c, i32 %v4_dd20)
  %v0_dd30 = load i32, i32* @r5, align 4
  store i32 %v0_dd30, i32* %r1.global-to-local, align 4
  %v1_dd34 = load i32, i32* @r4, align 4
  %v2_dd34 = add i32 %v1_dd34, %v3_dd2c
  store i32 %v2_dd34, i32* @r4, align 4
  %v2_dd3c = inttoptr i32 %v0_dd30 to i32*
  %v3_dd3c = call i32 @function_10ff4(i32 16, i32* %v2_dd3c)
  store i32 %v3_dd3c, i32* %r1.global-to-local, align 4
  %v0_dd44 = load i32, i32* @r4, align 4
  store i32 %v0_dd44, i32* @r0, align 4
  %v2_dd48 = inttoptr i32 %v0_dd44 to i8*
  %v3_dd48 = call i32 @function_11714(i8* %v2_dd48, i32 %v3_dd3c)
  %v0_dd4c = load i32, i32* @r5, align 4
  store i32 %v0_dd4c, i32* %r1.global-to-local, align 4
  store i32 %v3_dd48, i32* @r6, align 4
  %v4_dd58 = call i32 (i8*, i32, ...) @open(i8* %v2_dd04, i32 %v0_dd4c)
  %v2_dd5c = icmp eq i32 %v4_dd58, -1
  br i1 %v2_dd5c, label %dec_label_pc_db08, label %dec_label_pc_dd64

dec_label_pc_dd64:                                ; preds = %dec_label_pc_dca0
  %v1_dd64 = call i32 @close(i32 %v4_dd58)
  %v1_dd6c = call i32 @function_11018(i32 15)
  %v1_dd74 = call i32 @function_11018(i32 16)
  store i32 ptrtoint (i8** @global_var_1a234.60 to i32), i32* %r3.global-to-local, align 4
  %v2_dd80 = load i8*, i8** @global_var_1a234.60, align 4
  %v3_dd80 = ptrtoint i8* %v2_dd80 to i32
  store i32 %v3_dd80, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v7_dd8c = call i32 @readlink(i8* %v2_dd04, i8* %v2_dd80, i32 4095)
  %v2_dd90 = icmp eq i32 %v7_dd8c, -1
  br i1 %v2_dd90, label %.thread9, label %bb255

bb255:                                            ; preds = %dec_label_pc_dd64
  %v3_dd98 = load i32, i32* bitcast (i8** @global_var_1a234.60 to i32*), align 4
  store i32 %v3_dd98, i32* %r3.global-to-local, align 4
  %v1_dd9c = load i32, i32* @r5, align 4
  %v2_dd9c = trunc i32 %v1_dd9c to i8
  %v5_dd9c = add i32 %v3_dd98, %v7_dd8c
  %v6_dd9c = inttoptr i32 %v5_dd9c to i8*
  store i8 %v2_dd9c, i8* %v6_dd9c, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_dd64, %bb255
  store i32 %v1_dcf4, i32* @r0, align 4
  %v0_dda4 = load i32, i32* @r6, align 4
  %v1_dda4 = load i32, i32* @r4, align 4
  %v1_dcf4.neg = sub i32 56, %v2_dcdc
  %v2_dda4 = add i32 %v1_dcf4.neg, %v0_dda4
  %v2_dda8 = add i32 %v2_dda4, %v1_dda4
  store i32 %v2_dda8, i32* @r1, align 4
  %v0_ddac = call i32 @function_11780()
  %v0_ddb0 = load i32, i32* @r7, align 4
  store i32 %v0_ddb0, i32* @r4, align 4
  %v0_ddb4 = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_debc = ptrtoint i32* %stack_var_-160 to i32
  %v2_dec8 = bitcast i32* %stack_var_-160 to i8*
  %v2_df0c = ptrtoint i32* %stack_var_-224 to i32
  %v2_df10 = bitcast i32* %stack_var_-224 to i8*
  %v2_e07c = ptrtoint i32* %stack_var_-44 to i32
  %v2_e08c = ptrtoint i32* %stack_var_-48 to i32
  %v2_e0a0 = ptrtoint i32* %stack_var_-52 to i32
  %v2_e0b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_e0c4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_e0cc = ptrtoint i32* %stack_var_-60 to i32
  %v2_e0f0 = ptrtoint i32* %stack_var_-8416 to i32
  br label %dec_label_pc_ddbc

dec_label_pc_ddbc:                                ; preds = %dec_label_pc_de84, %.thread9
  %stack_var_-8436.0 = phi i32 [ %v0_ddb4, %.thread9 ], [ %stack_var_-8436.3, %dec_label_pc_de84 ]
  %v1_ddc0 = call i32 @function_110b8(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ddcc = call i32 @function_10ff4(i32 15, i32* null)
  %v4_ddcc = inttoptr i32 %v3_ddcc to i8*
  %v3_ddd0 = call %__dirstream* @opendir(i8* %v4_ddcc)
  %v5_ddd0 = ptrtoint %__dirstream* %v3_ddd0 to i32
  store i32 %v5_ddd0, i32* %r8.global-to-local, align 4
  %v2_ddd4 = icmp eq %__dirstream* %v3_ddd0, null
  br i1 %v2_ddd4, label %dec_label_pc_db08, label %dec_label_pc_dddc

dec_label_pc_dddc:                                ; preds = %dec_label_pc_ddbc
  %v1_dde0 = call i32 @function_11018(i32 15)
  %v0_dde4139 = load i32, i32* %r8.global-to-local, align 4
  %v1_dde4140 = inttoptr i32 %v0_dde4139 to %__dirstream*
  %v3_dde8141 = call %dirent* @readdir(%__dirstream* %v1_dde4140)
  %v2_ddec144 = icmp eq %dirent* %v3_dde8141, null
  br i1 %v2_ddec144, label %dec_label_pc_de84, label %dec_label_pc_ddf4.preheader

dec_label_pc_ddf4.preheader:                      ; preds = %dec_label_pc_dddc, %dec_label_pc_dde4.backedge
  %v0_ddf4156.in = phi %dirent* [ %v3_dde8, %dec_label_pc_dde4.backedge ], [ %v3_dde8141, %dec_label_pc_dddc ]
  %stack_var_-8436.1145 = phi i32 [ %stack_var_-8436.1.be, %dec_label_pc_dde4.backedge ], [ %stack_var_-8436.0, %dec_label_pc_dddc ]
  br label %dec_label_pc_ddf4

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_ddf4.preheader, %dec_label_pc_de6c
  %v0_de04.in = phi %dirent* [ %v3_de78, %dec_label_pc_de6c ], [ %v0_ddf4156.in, %dec_label_pc_ddf4.preheader ]
  %stack_var_-8436.2 = phi i32 [ %v1_de18, %dec_label_pc_de6c ], [ %stack_var_-8436.1145, %dec_label_pc_ddf4.preheader ]
  %v0_de04 = ptrtoint %dirent* %v0_de04.in to i32
  %v1_ddf4 = add i32 %v0_de04, 11
  %v2_ddf4 = inttoptr i32 %v1_ddf4 to i8*
  %v3_ddf4 = load i8, i8* %v2_ddf4, align 1
  %v4_ddf4 = zext i8 %v3_ddf4 to i32
  %v1_ddf8 = add nsw i32 %v4_ddf4, -48
  store i32 %v1_ddf8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ddf8, 9
  br i1 %tmp, label %dec_label_pc_dde4.backedge, label %dec_label_pc_de04

dec_label_pc_de04:                                ; preds = %dec_label_pc_ddf4
  store i32 %v1_ddf4, i32* @r6, align 4
  %v4_de0c = call i32 @atoi(i8* %v2_ddf4)
  %v0_de14 = load i32, i32* @r5, align 4
  %v1_de18 = add i32 %stack_var_-8436.2, 1
  store i32 %v1_de18, i32* %r1.global-to-local, align 4
  store i32 %v4_de0c, i32* %r7.global-to-local, align 4
  %v5_de24 = icmp slt i32 %v0_de14, %v4_de0c
  %v2_de94 = call i32 @time(i32* null)
  br i1 %v5_de24, label %dec_label_pc_de90, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_de04
  %v0_de30 = load i32, i32* @r4, align 4
  %v2_de30 = sub i32 %v2_de94, %v0_de30
  %v7_de38 = icmp slt i32 %v2_de30, 601
  br i1 %v7_de38, label %dec_label_pc_de40, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_de28
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_dde4.backedge

dec_label_pc_de40:                                ; preds = %dec_label_pc_de28
  %v0_de40 = load i32, i32* %r7.global-to-local, align 4
  %v7_de44 = icmp slt i32 %v0_de40, 401
  br i1 %v7_de44, label %dec_label_pc_dde4.backedge, label %dec_label_pc_de48

dec_label_pc_de48:                                ; preds = %dec_label_pc_de40
  %v3_de50 = zext i32 %v1_de18 to i64
  %v4_de50 = mul nuw i64 %v3_de50, 3435973837
  %v3_de541 = udiv i64 %v4_de50, 34359738368
  %v3_de583 = mul nuw nsw i64 %v3_de541, 8
  %v3_de58 = trunc i64 %v3_de583 to i32
  store i32 %v3_de58, i32* %r3.global-to-local, align 4
  %v2_de5c5 = mul nuw nsw i64 %v3_de541, 2
  %v2_de5c = trunc i64 %v2_de5c5 to i32
  %v2_de60 = add i32 %v3_de58, %v2_de5c
  store i32 %v2_de60, i32* %r2.global-to-local, align 4
  %v9_de64 = icmp eq i32 %v1_de18, %v2_de60
  br i1 %v9_de64, label %dec_label_pc_de6c, label %dec_label_pc_dde4.backedge

dec_label_pc_de6c:                                ; preds = %dec_label_pc_de48
  %v1_de70 = call i32 @sleep(i32 1)
  %v0_de74 = load i32, i32* %r8.global-to-local, align 4
  %v1_de74 = inttoptr i32 %v0_de74 to %__dirstream*
  %v3_de78 = call %dirent* @readdir(%__dirstream* %v1_de74)
  %v2_de7c = icmp eq %dirent* %v3_de78, null
  br i1 %v2_de7c, label %dec_label_pc_de84, label %dec_label_pc_ddf4

dec_label_pc_de84:                                ; preds = %dec_label_pc_dde4.backedge, %dec_label_pc_de6c, %dec_label_pc_dddc
  %stack_var_-8436.3 = phi i32 [ %stack_var_-8436.0, %dec_label_pc_dddc ], [ %v1_de18, %dec_label_pc_de6c ], [ %stack_var_-8436.1.be, %dec_label_pc_dde4.backedge ]
  %v0_de84 = load i32, i32* %r8.global-to-local, align 4
  %v1_de84 = inttoptr i32 %v0_de84 to %__dirstream*
  %v3_de88 = call i32 @closedir(%__dirstream* %v1_de84)
  br label %dec_label_pc_ddbc

dec_label_pc_de90:                                ; preds = %dec_label_pc_de04
  %v1_dea0 = call i32 @function_110b8(i32 15)
  %v1_dea8 = call i32 @function_110b8(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_deb4 = call i32 @function_10ff4(i32 15, i32* null)
  store i32 %v3_deb4, i32* %r1.global-to-local, align 4
  store i32 %v2_debc, i32* @r0, align 4
  %v3_dec8 = call i32 @function_11714(i8* %v2_dec8, i32 %v3_deb4)
  %v2_decc = add i32 %v2_debc, %v3_dec8
  store i32 %v2_decc, i32* %r5.global-to-local, align 4
  %v0_ded0 = load i32, i32* @r6, align 4
  store i32 %v0_ded0, i32* %r1.global-to-local, align 4
  store i32 %v2_decc, i32* @r0, align 4
  %v2_ded8 = inttoptr i32 %v2_decc to i8*
  %v3_ded8 = call i32 @function_11714(i8* %v2_ded8, i32 %v0_ded0)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_ded8, i32* %r4.global-to-local, align 4
  %v3_dee8 = call i32 @function_10ff4(i32 16, i32* null)
  store i32 %v3_dee8, i32* %r1.global-to-local, align 4
  %v1_def0 = load i32, i32* %r5.global-to-local, align 4
  %v2_def0 = add i32 %v1_def0, %v3_ded8
  store i32 %v2_def0, i32* @r0, align 4
  %v2_def4 = inttoptr i32 %v2_def0 to i8*
  %v3_def4 = call i32 @function_11714(i8* %v2_def4, i32 %v3_dee8)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_df00 = call i32 @function_10ff4(i32 15, i32* null)
  store i32 %v3_df00, i32* %r1.global-to-local, align 4
  store i32 %v2_df0c, i32* @r0, align 4
  %v3_df10 = call i32 @function_11714(i8* %v2_df10, i32 %v3_df00)
  %v2_df1c = add i32 %v3_df10, %v2_df0c
  store i32 %v2_df1c, i32* @r5, align 4
  store i32 %v2_df1c, i32* @r0, align 4
  %v0_df24 = load i32, i32* @r6, align 4
  store i32 %v0_df24, i32* %r1.global-to-local, align 4
  %v2_df28 = inttoptr i32 %v2_df1c to i8*
  %v3_df28 = call i32 @function_11714(i8* %v2_df28, i32 %v0_df24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_df28, i32* @r4, align 4
  %v3_df38 = call i32 @function_10ff4(i32 34, i32* null)
  store i32 %v3_df38, i32* %r1.global-to-local, align 4
  %v0_df40 = load i32, i32* @r4, align 4
  %v1_df40 = load i32, i32* @r5, align 4
  %v2_df40 = add i32 %v1_df40, %v0_df40
  store i32 %v2_df40, i32* @r0, align 4
  %v2_df44 = inttoptr i32 %v2_df40 to i8*
  %v3_df44 = call i32 @function_11714(i8* %v2_df44, i32 %v3_df38)
  %v1_df4c = call i32 @function_11018(i32 15)
  %v1_df54 = call i32 @function_11018(i32 16)
  store i32 %v1_dcf4, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v7_df68 = call i32 @readlink(i8* %v2_dec8, i8* %v2_dd04, i32 4095)
  %v2_df6c = icmp eq i32 %v7_df68, -1
  store i32 %v7_df68, i32* @r5, align 4
  br i1 %v2_df6c, label %dec_label_pc_e030, label %dec_label_pc_df78

dec_label_pc_df78:                                ; preds = %dec_label_pc_de90
  store i32 %v1_dcf4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_df80 = add i32 %v7_df68, %v1_dcf4
  %v5_df80 = inttoptr i32 %v4_df80 to i8*
  store i8 0, i8* %v5_df80, align 1
  %v1_df88 = call i32 @function_110b8(i32 35)
  %v0_df8c = load i32, i32* @r4, align 4
  store i32 %v0_df8c, i32* %r1.global-to-local, align 4
  %v2_df94 = inttoptr i32 %v0_df8c to i32*
  %v3_df94 = call i32 @function_10ff4(i32 35, i32* %v2_df94)
  %v0_df98 = load i32, i32* @r5, align 4
  %v1_df98 = add i32 %v0_df98, -1
  store i32 %v1_df98, i32* @r1, align 4
  store i32 %v3_df94, i32* %r2.global-to-local, align 4
  %v4_dfa4 = call i32 @function_11a3c(i8* %v2_dd04, i32 %v1_df98, i32 %v3_df94)
  %v2_dfa8 = icmp eq i32 %v4_dfa4, -1
  br i1 %v2_dfa8, label %dec_label_pc_dfc4, label %dec_label_pc_dfb0

dec_label_pc_dfb0:                                ; preds = %dec_label_pc_df78
  %v3_dfb4 = call i32 @unlink(i8* %v2_dd04)
  %v0_dfb8 = load i32, i32* %r7.global-to-local, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dfc0 = call i32 @kill(i32 %v0_dfb8, i32 9)
  br label %dec_label_pc_dfc4

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_df78, %dec_label_pc_dfb0
  %v1_dfc8 = call i32 @function_11018(i32 35)
  %v1_dfcc = call i32 @getpid()
  %v1_dfd0 = load i32, i32* %r7.global-to-local, align 4
  %v9_dfd0 = icmp eq i32 %v1_dfcc, %v1_dfd0
  br i1 %v9_dfd0, label %dec_label_pc_dffc, label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_dfc4
  %v0_dfd8 = call i32 @getppid()
  %v1_dfdc = load i32, i32* %r7.global-to-local, align 4
  %v9_dfdc = icmp eq i32 %v0_dfd8, %v1_dfdc
  br i1 %v9_dfdc, label %dec_label_pc_dffc, label %dec_label_pc_dfe4

dec_label_pc_dfe4:                                ; preds = %dec_label_pc_dfd8
  store i32 ptrtoint (i8** @global_var_1a234.60 to i32), i32* %r3.global-to-local, align 4
  %v2_dfec = load i8*, i8** @global_var_1a234.60, align 4
  %v3_dfec = ptrtoint i8* %v2_dfec to i32
  store i32 %v3_dfec, i32* %r1.global-to-local, align 4
  %v4_dff0 = call i32 @function_11acc(i8* %v2_dd04, i32 %v3_dfec)
  %v2_dff4 = icmp eq i32 %v4_dff0, 0
  br i1 %v2_dff4, label %dec_label_pc_e008, label %dec_label_pc_dfe4.dec_label_pc_dffc_crit_edge

dec_label_pc_dfe4.dec_label_pc_dffc_crit_edge:    ; preds = %dec_label_pc_dfe4
  %v0_e000.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dffc

dec_label_pc_dffc:                                ; preds = %dec_label_pc_dfe4.dec_label_pc_dffc_crit_edge, %dec_label_pc_dfd8, %dec_label_pc_dfc4
  %v0_e000 = phi i32 [ %v0_e000.pre, %dec_label_pc_dfe4.dec_label_pc_dffc_crit_edge ], [ %v0_dfd8, %dec_label_pc_dfd8 ], [ %v1_dfcc, %dec_label_pc_dfc4 ]
  store i32 %v2_de94, i32* @r4, align 4
  store i32 %v0_e000, i32* @r5, align 4
  br label %dec_label_pc_dde4.backedge

dec_label_pc_e008:                                ; preds = %dec_label_pc_dfe4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_e010 = call i32 (i8*, i32, ...) @open(i8* %v2_dd04, i32 0)
  %v2_e014 = icmp eq i32 %v4_e010, -1
  store i32 %v4_e010, i32* @r4, align 4
  br i1 %v2_e014, label %bb256, label %.thread12

bb256:                                            ; preds = %dec_label_pc_e008
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_e008, %bb256
  store i32 ptrtoint (i32* @global_var_e028.63 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_e014, i32 ptrtoint (i32* @global_var_8b60.62 to i32))
  %v0_e028 = load i32, i32* @r4, align 4
  %v1_e02c = call i32 @close(i32 %v0_e028)
  br label %dec_label_pc_e030

dec_label_pc_e030:                                ; preds = %dec_label_pc_de90, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_e038 = call i32 (i8*, i32, ...) @open(i8* %v2_dec8, i32 0)
  %v2_e03c = icmp eq i32 %v4_e038, -1
  br i1 %v2_e03c, label %dec_label_pc_e334, label %dec_label_pc_e048

dec_label_pc_e048:                                ; preds = %dec_label_pc_e030
  %v1_e04c = call i32 @function_110b8(i32 20)
  %v1_e054 = call i32 @function_110b8(i32 21)
  %v1_e05c = call i32 @function_110b8(i32 22)
  %v1_e064 = call i32 @function_110b8(i32 23)
  %v1_e06c = call i32 @function_110b8(i32 24)
  %v1_e074 = call i32 @function_110b8(i32 36)
  store i32 %v2_e07c, i32* %r1.global-to-local, align 4
  %v3_e084 = call i32 @function_10ff4(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_e08c, i32* %r1.global-to-local, align 4
  store i32 %v3_e084, i32* @r6, align 4
  %v3_e098 = call i32 @function_10ff4(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v2_e0a0, i32* %r1.global-to-local, align 4
  store i32 %v3_e098, i32* %sl.global-to-local, align 4
  %v3_e0ac = call i32 @function_10ff4(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v2_e0b4, i32* %r1.global-to-local, align 4
  store i32 %v3_e0ac, i32* %sb.global-to-local, align 4
  %v3_e0c0 = call i32 @function_10ff4(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v2_e0cc, i32* %r1.global-to-local, align 4
  %v3_e0d4 = call i32 @function_10ff4(i32 24, i32* nonnull %stack_var_-60)
  store i32 %v2_e0c4, i32* %r1.global-to-local, align 4
  %v3_e0e4 = call i32 @function_10ff4(i32 36, i32* nonnull %stack_var_-64)
  store i32 %v2_e0f0, i32* @r4, align 4
  store i32 %v2_e0f0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_e100136 = call i32 @read(i32 %v4_e038, i32* nonnull %stack_var_-8416, i32 4096)
  %tmp257 = icmp slt i32 %v4_e100136, 1
  br i1 %tmp257, label %dec_label_pc_e364, label %dec_label_pc_e10c

dec_label_pc_e10c:                                ; preds = %dec_label_pc_e048, %dec_label_pc_e0f4.backedge
  %v0_e1b0127 = phi i32 [ %v4_e100, %dec_label_pc_e0f4.backedge ], [ %v4_e100136, %dec_label_pc_e048 ]
  %v3_e110 = load i32, i32* %stack_var_-44, align 4
  %v5_e118 = icmp slt i32 %v0_e1b0127, %v3_e110
  br i1 %v5_e118, label %dec_label_pc_e128, label %dec_label_pc_e1f0.lr.ph

dec_label_pc_e1f0.lr.ph:                          ; preds = %dec_label_pc_e10c
  %v1_e1e883 = add i32 %v0_e1b0127, -1
  store i32 %v1_e1e883, i32* %r1.global-to-local, align 4
  %v0_e1f0.pre = load i32, i32* @r6, align 4
  %v1_e1f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e1f0

dec_label_pc_e128:                                ; preds = %dec_label_pc_e1e8.backedge, %dec_label_pc_e10c
  store i32 %v2_db18, i32* %r1.global-to-local, align 4
  %v3_e12c = load i32, i32* %stack_var_-48, align 4
  %v5_e134 = icmp slt i32 %v0_e1b0127, %v3_e12c
  br i1 %v5_e134, label %dec_label_pc_e144, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_e128
  %v1_e21c92 = add i32 %v0_e1b0127, -1
  store i32 %v1_e21c92, i32* %r1.global-to-local, align 4
  %v2_e21c93 = icmp eq i32 %v0_e1b0127, 0
  br i1 %v2_e21c93, label %dec_label_pc_e144, label %dec_label_pc_e224.lr.ph

dec_label_pc_e224.lr.ph:                          ; preds = %.thread28
  %v0_e224.pre = load i32, i32* %sl.global-to-local, align 4
  %v1_e228.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e224

dec_label_pc_e144:                                ; preds = %dec_label_pc_e21c.backedge, %.thread28, %dec_label_pc_e128
  store i32 %v2_db18, i32* %r2.global-to-local, align 4
  %v3_e148 = load i32, i32* %stack_var_-52, align 4
  %v5_e150 = icmp slt i32 %v0_e1b0127, %v3_e148
  br i1 %v5_e150, label %dec_label_pc_e160, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_e144
  %v1_e250101 = add i32 %v0_e1b0127, -1
  store i32 %v1_e250101, i32* %r1.global-to-local, align 4
  %v2_e250102 = icmp eq i32 %v0_e1b0127, 0
  br i1 %v2_e250102, label %dec_label_pc_e160, label %dec_label_pc_e258.lr.ph

dec_label_pc_e258.lr.ph:                          ; preds = %.thread37
  %v0_e258.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_e25c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e258

dec_label_pc_e160:                                ; preds = %dec_label_pc_e250.backedge, %.thread37, %dec_label_pc_e144
  store i32 %v2_db18, i32* %r3.global-to-local, align 4
  %v3_e164 = load i32, i32* %stack_var_-56, align 4
  %v5_e16c = icmp slt i32 %v0_e1b0127, %v3_e164
  br i1 %v5_e16c, label %dec_label_pc_e17c, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_e160
  %v1_e284110 = add i32 %v0_e1b0127, -1
  store i32 %v1_e284110, i32* %r1.global-to-local, align 4
  %v2_e284111 = icmp eq i32 %v0_e1b0127, 0
  br i1 %v2_e284111, label %dec_label_pc_e17c, label %dec_label_pc_e28c.lr.ph

dec_label_pc_e28c.lr.ph:                          ; preds = %.thread46
  %v1_e294.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e28c

dec_label_pc_e17c:                                ; preds = %dec_label_pc_e284.backedge, %.thread46, %dec_label_pc_e160
  %v3_e180 = load i32, i32* %stack_var_-60, align 4
  %v5_e188 = icmp slt i32 %v0_e1b0127, %v3_e180
  br i1 %v5_e188, label %dec_label_pc_e198, label %.thread55

.thread55:                                        ; preds = %dec_label_pc_e17c
  %v1_e2bc119 = add i32 %v0_e1b0127, -1
  store i32 %v1_e2bc119, i32* %r1.global-to-local, align 4
  %v2_e2bc120 = icmp eq i32 %v0_e1b0127, 0
  br i1 %v2_e2bc120, label %dec_label_pc_e198, label %dec_label_pc_e2c4.lr.ph

dec_label_pc_e2c4.lr.ph:                          ; preds = %.thread55
  %v1_e2cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e2c4

dec_label_pc_e198:                                ; preds = %dec_label_pc_e2bc.backedge, %.thread55, %dec_label_pc_e17c
  %v3_e19c = load i32, i32* %stack_var_-64, align 4
  store i32 %v3_e19c, i32* @lr, align 4
  %v5_e1a4 = icmp slt i32 %v0_e1b0127, %v3_e19c
  br i1 %v5_e1a4, label %dec_label_pc_e0f4.backedge, label %.thread61

dec_label_pc_e0f4.backedge:                       ; preds = %dec_label_pc_e1d0, %.thread61, %dec_label_pc_e198
  store i32 %v2_e0f0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_e100 = call i32 @read(i32 %v4_e038, i32* nonnull %stack_var_-8416, i32 4096)
  %tmp258 = icmp slt i32 %v4_e100, 1
  br i1 %tmp258, label %dec_label_pc_e364, label %dec_label_pc_e10c

.thread61:                                        ; preds = %dec_label_pc_e198
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_e1b0129 = icmp eq i32 %v0_e1b0127, 0
  br i1 %v2_e1b0129, label %dec_label_pc_e0f4.backedge, label %dec_label_pc_e1b8.lr.ph

dec_label_pc_e1b8.lr.ph:                          ; preds = %.thread61
  %v1_e1c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e1b8

dec_label_pc_e1b8:                                ; preds = %dec_label_pc_e1d0, %dec_label_pc_e1b8.lr.ph
  %v0_e1b0.in = phi i32 [ %v0_e1b0127, %dec_label_pc_e1b8.lr.ph ], [ %v0_e1b0, %dec_label_pc_e1d0 ]
  %v0_e1d0 = phi i32 [ 0, %dec_label_pc_e1b8.lr.ph ], [ %v1_e1d0, %dec_label_pc_e1d0 ]
  %v1_e1bc = phi i32 [ 0, %dec_label_pc_e1b8.lr.ph ], [ %v1_e1bc203, %dec_label_pc_e1d0 ]
  %v0_e1b0 = add i32 %v0_e1b0.in, -1
  store i32 %v3_e0e4, i32* %r3.global-to-local, align 4
  %v2_e1bc = add i32 %v1_e1bc, %v3_e0e4
  %v3_e1bc = inttoptr i32 %v2_e1bc to i8*
  %v4_e1bc = load i8, i8* %v3_e1bc, align 1
  %v6_e1bc = zext i8 %v4_e1bc to i32
  store i32 %v6_e1bc, i32* %r2.global-to-local, align 4
  %v2_e1c0 = add i32 %v0_e1d0, %v1_e1c0.pre
  %v3_e1c0 = inttoptr i32 %v2_e1c0 to i8*
  %v4_e1c0 = load i8, i8* %v3_e1c0, align 1
  %v6_e1c0 = zext i8 %v4_e1c0 to i32
  store i32 %v6_e1c0, i32* %r3.global-to-local, align 4
  %v9_e1c4 = icmp eq i8 %v4_e1c0, %v4_e1bc
  br i1 %v9_e1c4, label %dec_label_pc_e2e4, label %bb259

bb259:                                            ; preds = %dec_label_pc_e1b8
  br label %dec_label_pc_e1d0

dec_label_pc_e1d0:                                ; preds = %bb259, %dec_label_pc_e2e4
  %v1_e1bc203 = phi i32 [ %v1_e2e4, %dec_label_pc_e2e4 ], [ 0, %bb259 ]
  %v1_e1d0 = add i32 %v0_e1d0, 1
  store i32 %v1_e1d0, i32* %r1.global-to-local, align 4
  %v2_e1b0 = icmp eq i32 %v0_e1b0, 0
  br i1 %v2_e1b0, label %dec_label_pc_e0f4.backedge, label %dec_label_pc_e1b8

dec_label_pc_e1d8:                                ; preds = %dec_label_pc_e1f0
  %v1_e1d8 = add i32 %v1_e1f0, 1
  store i32 %v1_e1d8, i32* @lr, align 4
  %v9_e1dc = icmp eq i32 %v3_e110, %v1_e1d8
  br i1 %v9_e1dc, label %dec_label_pc_e2f0, label %dec_label_pc_e1e8.backedge

dec_label_pc_e1e8.backedge:                       ; preds = %dec_label_pc_e1d8, %dec_label_pc_e204
  %v1_e1f0161 = phi i32 [ 0, %dec_label_pc_e204 ], [ %v1_e1d8, %dec_label_pc_e1d8 ]
  %storemerge149 = add i32 %storemerge149.in, 1
  %v1_e1e8 = add i32 %v0_e1e8, -1
  store i32 %v1_e1e8, i32* %r1.global-to-local, align 4
  %v2_e1e8 = icmp eq i32 %v0_e1e8, 0
  br i1 %v2_e1e8, label %dec_label_pc_e128, label %dec_label_pc_e1f0

dec_label_pc_e1f0:                                ; preds = %dec_label_pc_e1e8.backedge, %dec_label_pc_e1f0.lr.ph
  %v0_e1e8 = phi i32 [ %v1_e1e883, %dec_label_pc_e1f0.lr.ph ], [ %v1_e1e8, %dec_label_pc_e1e8.backedge ]
  %storemerge149.in = phi i32 [ 0, %dec_label_pc_e1f0.lr.ph ], [ %storemerge149, %dec_label_pc_e1e8.backedge ]
  %v1_e1f0 = phi i32 [ 0, %dec_label_pc_e1f0.lr.ph ], [ %v1_e1f0161, %dec_label_pc_e1e8.backedge ]
  %v2_e1f0 = add i32 %v1_e1f0, %v0_e1f0.pre
  %v3_e1f0 = inttoptr i32 %v2_e1f0 to i8*
  %v4_e1f0 = load i8, i8* %v3_e1f0, align 1
  %v6_e1f0 = zext i8 %v4_e1f0 to i32
  store i32 %v6_e1f0, i32* %r2.global-to-local, align 4
  %v2_e1f4 = add i32 %storemerge149.in, %v1_e1f4.pre
  %v3_e1f4 = inttoptr i32 %v2_e1f4 to i8*
  %v4_e1f4 = load i8, i8* %v3_e1f4, align 1
  %v6_e1f4 = zext i8 %v4_e1f4 to i32
  store i32 %v6_e1f4, i32* %r3.global-to-local, align 4
  %v9_e1f8 = icmp eq i8 %v4_e1f4, %v4_e1f0
  br i1 %v9_e1f8, label %dec_label_pc_e1d8, label %dec_label_pc_e204

dec_label_pc_e204:                                ; preds = %dec_label_pc_e1f0
  br label %dec_label_pc_e1e8.backedge

dec_label_pc_e20c:                                ; preds = %dec_label_pc_e224
  %v1_e20c = add i32 %v1_e224, 1
  store i32 %v1_e20c, i32* @lr, align 4
  %v9_e210 = icmp eq i32 %v3_e12c, %v1_e20c
  br i1 %v9_e210, label %dec_label_pc_e2f0, label %dec_label_pc_e21c.backedge

dec_label_pc_e21c.backedge:                       ; preds = %dec_label_pc_e20c, %dec_label_pc_e238
  %v1_e224170 = phi i32 [ 0, %dec_label_pc_e238 ], [ %v1_e20c, %dec_label_pc_e20c ]
  %storemerge148 = add i32 %storemerge148.in, 1
  %v1_e21c = add i32 %v0_e21c, -1
  store i32 %v1_e21c, i32* %r1.global-to-local, align 4
  %v2_e21c = icmp eq i32 %v0_e21c, 0
  br i1 %v2_e21c, label %dec_label_pc_e144, label %dec_label_pc_e224

dec_label_pc_e224:                                ; preds = %dec_label_pc_e21c.backedge, %dec_label_pc_e224.lr.ph
  %v0_e21c = phi i32 [ %v1_e21c92, %dec_label_pc_e224.lr.ph ], [ %v1_e21c, %dec_label_pc_e21c.backedge ]
  %storemerge148.in = phi i32 [ 0, %dec_label_pc_e224.lr.ph ], [ %storemerge148, %dec_label_pc_e21c.backedge ]
  %v1_e224 = phi i32 [ 0, %dec_label_pc_e224.lr.ph ], [ %v1_e224170, %dec_label_pc_e21c.backedge ]
  %v2_e224 = add i32 %v1_e224, %v0_e224.pre
  %v3_e224 = inttoptr i32 %v2_e224 to i8*
  %v4_e224 = load i8, i8* %v3_e224, align 1
  %v6_e224 = zext i8 %v4_e224 to i32
  store i32 %v6_e224, i32* %r2.global-to-local, align 4
  %v2_e228 = add i32 %storemerge148.in, %v1_e228.pre
  %v3_e228 = inttoptr i32 %v2_e228 to i8*
  %v4_e228 = load i8, i8* %v3_e228, align 1
  %v6_e228 = zext i8 %v4_e228 to i32
  store i32 %v6_e228, i32* %r3.global-to-local, align 4
  %v9_e22c = icmp eq i8 %v4_e228, %v4_e224
  br i1 %v9_e22c, label %dec_label_pc_e20c, label %dec_label_pc_e238

dec_label_pc_e238:                                ; preds = %dec_label_pc_e224
  br label %dec_label_pc_e21c.backedge

dec_label_pc_e240:                                ; preds = %dec_label_pc_e258
  %v1_e240 = add i32 %v1_e258, 1
  store i32 %v1_e240, i32* @lr, align 4
  %v9_e244 = icmp eq i32 %v3_e148, %v1_e240
  br i1 %v9_e244, label %dec_label_pc_e2f0, label %dec_label_pc_e250.backedge

dec_label_pc_e250.backedge:                       ; preds = %dec_label_pc_e240, %dec_label_pc_e26c
  %v1_e258179 = phi i32 [ 0, %dec_label_pc_e26c ], [ %v1_e240, %dec_label_pc_e240 ]
  %storemerge147 = add i32 %storemerge147.in, 1
  %v1_e250 = add i32 %v0_e250, -1
  store i32 %v1_e250, i32* %r1.global-to-local, align 4
  %v2_e250 = icmp eq i32 %v0_e250, 0
  br i1 %v2_e250, label %dec_label_pc_e160, label %dec_label_pc_e258

dec_label_pc_e258:                                ; preds = %dec_label_pc_e250.backedge, %dec_label_pc_e258.lr.ph
  %v0_e250 = phi i32 [ %v1_e250101, %dec_label_pc_e258.lr.ph ], [ %v1_e250, %dec_label_pc_e250.backedge ]
  %storemerge147.in = phi i32 [ 0, %dec_label_pc_e258.lr.ph ], [ %storemerge147, %dec_label_pc_e250.backedge ]
  %v1_e258 = phi i32 [ 0, %dec_label_pc_e258.lr.ph ], [ %v1_e258179, %dec_label_pc_e250.backedge ]
  %v2_e258 = add i32 %v1_e258, %v0_e258.pre
  %v3_e258 = inttoptr i32 %v2_e258 to i8*
  %v4_e258 = load i8, i8* %v3_e258, align 1
  %v6_e258 = zext i8 %v4_e258 to i32
  store i32 %v6_e258, i32* %r2.global-to-local, align 4
  %v2_e25c = add i32 %storemerge147.in, %v1_e25c.pre
  %v3_e25c = inttoptr i32 %v2_e25c to i8*
  %v4_e25c = load i8, i8* %v3_e25c, align 1
  %v6_e25c = zext i8 %v4_e25c to i32
  store i32 %v6_e25c, i32* %r3.global-to-local, align 4
  %v9_e260 = icmp eq i8 %v4_e25c, %v4_e258
  br i1 %v9_e260, label %dec_label_pc_e240, label %dec_label_pc_e26c

dec_label_pc_e26c:                                ; preds = %dec_label_pc_e258
  br label %dec_label_pc_e250.backedge

dec_label_pc_e274:                                ; preds = %dec_label_pc_e28c
  %v1_e274 = add i32 %v1_e290, 1
  store i32 %v1_e274, i32* @lr, align 4
  %v9_e278 = icmp eq i32 %v3_e164, %v1_e274
  br i1 %v9_e278, label %dec_label_pc_e2f0, label %dec_label_pc_e284.backedge

dec_label_pc_e284.backedge:                       ; preds = %dec_label_pc_e274, %dec_label_pc_e2a4
  %v1_e290187 = phi i32 [ 0, %dec_label_pc_e2a4 ], [ %v1_e274, %dec_label_pc_e274 ]
  %storemerge146 = add i32 %storemerge146.in, 1
  %v1_e284 = add i32 %v0_e284, -1
  store i32 %v1_e284, i32* %r1.global-to-local, align 4
  %v2_e284 = icmp eq i32 %v0_e284, 0
  br i1 %v2_e284, label %dec_label_pc_e17c, label %dec_label_pc_e28c

dec_label_pc_e28c:                                ; preds = %dec_label_pc_e284.backedge, %dec_label_pc_e28c.lr.ph
  %v0_e284 = phi i32 [ %v1_e284110, %dec_label_pc_e28c.lr.ph ], [ %v1_e284, %dec_label_pc_e284.backedge ]
  %storemerge146.in = phi i32 [ 0, %dec_label_pc_e28c.lr.ph ], [ %storemerge146, %dec_label_pc_e284.backedge ]
  %v1_e290 = phi i32 [ 0, %dec_label_pc_e28c.lr.ph ], [ %v1_e290187, %dec_label_pc_e284.backedge ]
  store i32 %v3_e0c0, i32* %r3.global-to-local, align 4
  %v2_e290 = add i32 %v1_e290, %v3_e0c0
  %v3_e290 = inttoptr i32 %v2_e290 to i8*
  %v4_e290 = load i8, i8* %v3_e290, align 1
  %v6_e290 = zext i8 %v4_e290 to i32
  store i32 %v6_e290, i32* %r2.global-to-local, align 4
  %v2_e294 = add i32 %storemerge146.in, %v1_e294.pre
  %v3_e294 = inttoptr i32 %v2_e294 to i8*
  %v4_e294 = load i8, i8* %v3_e294, align 1
  %v6_e294 = zext i8 %v4_e294 to i32
  store i32 %v6_e294, i32* %r3.global-to-local, align 4
  %v9_e298 = icmp eq i8 %v4_e294, %v4_e290
  br i1 %v9_e298, label %dec_label_pc_e274, label %dec_label_pc_e2a4

dec_label_pc_e2a4:                                ; preds = %dec_label_pc_e28c
  br label %dec_label_pc_e284.backedge

dec_label_pc_e2ac:                                ; preds = %dec_label_pc_e2c4
  %v1_e2ac = add i32 %v1_e2c8, 1
  store i32 %v1_e2ac, i32* @lr, align 4
  %v9_e2b0 = icmp eq i32 %v3_e180, %v1_e2ac
  br i1 %v9_e2b0, label %dec_label_pc_e2f0, label %dec_label_pc_e2bc.backedge

dec_label_pc_e2bc.backedge:                       ; preds = %dec_label_pc_e2ac, %dec_label_pc_e2dc
  %v1_e2c8195 = phi i32 [ 0, %dec_label_pc_e2dc ], [ %v1_e2ac, %dec_label_pc_e2ac ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_e2bc = add i32 %v0_e2bc, -1
  store i32 %v1_e2bc, i32* %r1.global-to-local, align 4
  %v2_e2bc = icmp eq i32 %v0_e2bc, 0
  br i1 %v2_e2bc, label %dec_label_pc_e198, label %dec_label_pc_e2c4

dec_label_pc_e2c4:                                ; preds = %dec_label_pc_e2bc.backedge, %dec_label_pc_e2c4.lr.ph
  %v0_e2bc = phi i32 [ %v1_e2bc119, %dec_label_pc_e2c4.lr.ph ], [ %v1_e2bc, %dec_label_pc_e2bc.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_e2c4.lr.ph ], [ %storemerge, %dec_label_pc_e2bc.backedge ]
  %v1_e2c8 = phi i32 [ 0, %dec_label_pc_e2c4.lr.ph ], [ %v1_e2c8195, %dec_label_pc_e2bc.backedge ]
  store i32 %v3_e0d4, i32* %r3.global-to-local, align 4
  %v2_e2c8 = add i32 %v1_e2c8, %v3_e0d4
  %v3_e2c8 = inttoptr i32 %v2_e2c8 to i8*
  %v4_e2c8 = load i8, i8* %v3_e2c8, align 1
  %v6_e2c8 = zext i8 %v4_e2c8 to i32
  store i32 %v6_e2c8, i32* %r2.global-to-local, align 4
  %v2_e2cc = add i32 %storemerge.in, %v1_e2cc.pre
  %v3_e2cc = inttoptr i32 %v2_e2cc to i8*
  %v4_e2cc = load i8, i8* %v3_e2cc, align 1
  %v6_e2cc = zext i8 %v4_e2cc to i32
  store i32 %v6_e2cc, i32* %r3.global-to-local, align 4
  %v9_e2d0 = icmp eq i8 %v4_e2cc, %v4_e2c8
  br i1 %v9_e2d0, label %dec_label_pc_e2ac, label %dec_label_pc_e2dc

dec_label_pc_e2dc:                                ; preds = %dec_label_pc_e2c4
  br label %dec_label_pc_e2bc.backedge

dec_label_pc_e2e4:                                ; preds = %dec_label_pc_e1b8
  %v1_e2e4 = add i32 %v1_e1bc, 1
  %v9_e2e8 = icmp eq i32 %v3_e19c, %v1_e2e4
  br i1 %v9_e2e8, label %dec_label_pc_e2f0, label %dec_label_pc_e1d0

dec_label_pc_e2f0:                                ; preds = %dec_label_pc_e1d8, %dec_label_pc_e20c, %dec_label_pc_e240, %dec_label_pc_e274, %dec_label_pc_e2ac, %dec_label_pc_e2e4
  %v1_e2f4 = call i32 @function_11018(i32 20)
  %v1_e2fc = call i32 @function_11018(i32 21)
  %v1_e304 = call i32 @function_11018(i32 22)
  %v1_e30c = call i32 @function_11018(i32 23)
  %v1_e314 = call i32 @function_11018(i32 24)
  %v1_e31c = call i32 @function_11018(i32 36)
  %v1_e324 = call i32 @close(i32 %v4_e038)
  %v0_e328 = load i32, i32* %r7.global-to-local, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e330 = call i32 @kill(i32 %v0_e328, i32 9)
  br label %dec_label_pc_e334

dec_label_pc_e334:                                ; preds = %dec_label_pc_e030, %dec_label_pc_e364, %dec_label_pc_e2f0
  store i32 %v2_debc, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_e33c = call i32 @function_11780()
  store i32 %v2_df0c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_e34c = call i32 @function_11780()
  %v1_e354 = call i32 @sleep(i32 1)
  store i32 %v2_de94, i32* @r4, align 4
  %v0_e35c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_e35c, i32* @r5, align 4
  br label %dec_label_pc_dde4.backedge

dec_label_pc_dde4.backedge:                       ; preds = %dec_label_pc_de48, %dec_label_pc_de40, %dec_label_pc_ddf4, %dec_label_pc_e334, %dec_label_pc_dffc, %.thread10
  %stack_var_-8436.1.be = phi i32 [ %v1_de18, %dec_label_pc_e334 ], [ %v1_de18, %dec_label_pc_dffc ], [ %v1_de18, %.thread10 ], [ %stack_var_-8436.2, %dec_label_pc_ddf4 ], [ %v1_de18, %dec_label_pc_de40 ], [ %v1_de18, %dec_label_pc_de48 ]
  %v0_dde4 = load i32, i32* %r8.global-to-local, align 4
  %v1_dde4 = inttoptr i32 %v0_dde4 to %__dirstream*
  %v3_dde8 = call %dirent* @readdir(%__dirstream* %v1_dde4)
  %v2_ddec = icmp eq %dirent* %v3_dde8, null
  br i1 %v2_ddec, label %dec_label_pc_de84, label %dec_label_pc_ddf4.preheader

dec_label_pc_e364:                                ; preds = %dec_label_pc_e0f4.backedge, %dec_label_pc_e048
  %v1_e368 = call i32 @function_11018(i32 20)
  %v1_e370 = call i32 @function_11018(i32 21)
  %v1_e378 = call i32 @function_11018(i32 22)
  %v1_e380 = call i32 @function_11018(i32 23)
  %v1_e388 = call i32 @function_11018(i32 24)
  %v1_e390 = call i32 @function_11018(i32 36)
  %v1_e398 = call i32 @close(i32 %v4_e038)
  br label %dec_label_pc_e334

; uselistorder directives
  uselistorder %dirent* %v3_dde8, { 1, 0 }
  uselistorder i32 %stack_var_-8436.1.be, { 1, 0 }
  uselistorder i32 %v1_e2e4, { 1, 0 }
  uselistorder i32 %v1_e1d0, { 1, 0 }
  uselistorder i32 %v1_e1bc, { 1, 0 }
  uselistorder i32 %v0_e1d0, { 1, 0 }
  uselistorder i32 %v4_e100, { 1, 0 }
  uselistorder i32 %v4_e038, { 2, 1, 3, 0, 4 }
  uselistorder %dirent* %v3_de78, { 1, 0 }
  uselistorder i32 %v1_de18, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v5_ddd0, { 1, 0 }
  uselistorder i32 %stack_var_-8436.0, { 1, 0 }
  uselistorder i32 %v2_e0f0, { 1, 0, 2 }
  uselistorder i32 %v2_df0c, { 1, 0, 2 }
  uselistorder i8* %v2_dec8, { 1, 0, 2 }
  uselistorder i32 %v2_debc, { 1, 0, 2 }
  uselistorder i8* %v2_dd04, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 %v1_dcf4, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32 %storemerge213, { 1, 0 }
  uselistorder i32* %stack_var_-80, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8416, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 5, 6, 4, 0, 1, 2, 3, 7 }
  uselistorder i32* %r3.global-to-local, { 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r2.global-to-local, { 26, 27, 28, 0, 1, 2, 4, 3, 25, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r1.global-to-local, { 64, 65, 66, 0, 1, 3, 2, 24, 5, 62, 61, 60, 59, 4, 58, 63, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32 (%__dirstream*)* @closedir, { 2, 1, 0, 3 }
  uselistorder %dirent* null, { 4, 3, 1, 5, 6, 7, 0, 8, 2 }
  uselistorder %dirent* (%__dirstream*)* @readdir, { 5, 8, 1, 7, 6, 3, 0, 4, 2, 9 }
  uselistorder %__dirstream* (i8*)* @opendir, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i8*, i32)* @readlink, { 1, 0, 3, 2, 4 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i8** @global_var_1a234.60, { 3, 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1a234.60 to i32), { 2, 1, 0 }
  uselistorder i32 4096, { 3, 9, 1, 2, 4, 10, 5, 11, 0, 6, 7, 8 }
  uselistorder i32* @global_var_1a238.53, { 0, 2, 1 }
  uselistorder label %dec_label_pc_dde4.backedge, { 3, 4, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_e334, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e2f0, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e2bc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e284.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e250.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e21c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e1e8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e1d0, { 1, 0 }
  uselistorder label %dec_label_pc_e10c, { 1, 0 }
  uselistorder label %dec_label_pc_e030, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_dfc4, { 1, 0 }
  uselistorder label %dec_label_pc_ddf4, { 1, 0 }
  uselistorder label %dec_label_pc_ddf4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_dca0, { 1, 0 }
  uselistorder label %dec_label_pc_dc54, { 1, 0 }
  uselistorder label %dec_label_pc_dc08, { 1, 0 }
  uselistorder label %dec_label_pc_dbd0, { 1, 0 }
  uselistorder label %dec_label_pc_db7c, { 1, 0 }
}

define i32 @function_e3b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e3b0:
  store i32 ptrtoint (i32* @global_var_e528.65 to i32), i32* inttoptr (i32 106952 to i32*), align 8
  ret i32 %arg1
}

define i32 @function_e3c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e3c8:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_e3c8 = load i32, i32* @r6, align 4
  %v15_e3c8 = load i32, i32* @r8, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_e3e4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_e3e4, i32* %r0.global-to-local, align 4
  store i32 106944, i32* @r6, align 4
  %v2_e3ec = icmp eq i32 %v3_e3e4, -1
  store i32 %v3_e3e4, i32* inttoptr (i32 106944 to i32*), align 64
  br i1 %v2_e3ec, label %dec_label_pc_e3c8.dec_label_pc_e4a4_crit_edge, label %dec_label_pc_e3f8

dec_label_pc_e3c8.dec_label_pc_e4a4_crit_edge:    ; preds = %dec_label_pc_e3c8
  %v1_e4ac.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4a4

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e3c8
  %v0_e3fc = load i32, i32* %r4.global-to-local, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_e40c = load i32, i32* %r0.global-to-local, align 4
  %v6_e40c = call i32 @setsockopt(i32 %v0_e40c, i32 %v0_e3fc, i32 2, i32* nonnull %stack_var_-28, i32 4)
  store i32 %v6_e40c, i32* %r0.global-to-local, align 4
  %v0_e410 = load i32, i32* @r6, align 4
  %v1_e410 = inttoptr i32 %v0_e410 to i32*
  %v2_e410 = load i32, i32* %v1_e410, align 4
  store i32 %v2_e410, i32* %r4.global-to-local, align 4
  store i32 %v2_e410, i32* %r0.global-to-local, align 4
  %v2_e420 = call i32 (i32, i32, ...) @fcntl(i32 %v2_e410, i32 3)
  %v0_e424 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_e410, i32* %r0.global-to-local, align 4
  %v2_e430 = call i32 (i32, i32, ...) @fcntl(i32 %v2_e410, i32 %v0_e424)
  store i32 %v2_e430, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_e460 = call i32* @__errno_location()
  %v1_e460 = ptrtoint i32* %v0_e460 to i32
  store i32 %v1_e460, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 0, i32* %v0_e460, align 4
  %v2_e46c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e46c, i32* @r5, align 4
  store i32 %v1_e460, i32* %r4.global-to-local, align 4
  %tmp14 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v0_e47c = load i32, i32* @r6, align 4
  %v1_e47c = inttoptr i32 %v0_e47c to i32*
  %v2_e47c = load i32, i32* %v1_e47c, align 4
  store i32 %v2_e47c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v5_e488 = call i32 @bind(i32 %v2_e47c, %sockaddr* %tmp14, i32 16)
  store i32 %v5_e488, i32* %r0.global-to-local, align 4
  %v2_e48c = icmp eq i32 %v5_e488, -1
  br i1 %v2_e48c, label %dec_label_pc_e4b0, label %dec_label_pc_e494

dec_label_pc_e494:                                ; preds = %dec_label_pc_e3f8
  %v2_e49c = load i32, i32* inttoptr (i32 106944 to i32*), align 64
  store i32 %v2_e49c, i32* %r0.global-to-local, align 4
  %v2_e4a0 = call i32 @listen(i32 %v2_e49c, i32 1)
  store i32 %v2_e4a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %dec_label_pc_e3c8.dec_label_pc_e4a4_crit_edge, %dec_label_pc_e4bc, %dec_label_pc_e494
  %v1_e4ac = phi i32 [ %v1_e4ac.pre, %dec_label_pc_e3c8.dec_label_pc_e4a4_crit_edge ], [ %v1_e500, %dec_label_pc_e4bc ], [ %v2_e4a0, %dec_label_pc_e494 ]
  store i32 %v9_e3c8, i32* @r6, align 4
  store i32 %v15_e3c8, i32* @r8, align 4
  ret i32 %v1_e4ac

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_e3f8
  %v0_e4b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_e4b0 = inttoptr i32 %v0_e4b0 to i32*
  %v2_e4b0 = load i32, i32* %v1_e4b0, align 4
  %v7_e4b4 = icmp eq i32 %v2_e4b0, 99
  br i1 %v7_e4b4, label %dec_label_pc_e508, label %dec_label_pc_e4bc

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e508, %bb, %dec_label_pc_e4b0
  store i32 15290, i32* @r4, align 4
  %v0_e4d4 = load i32, i32* @r6, align 4
  %v1_e4d4 = inttoptr i32 %v0_e4d4 to i32*
  %v2_e4d4 = load i32, i32* %v1_e4d4, align 4
  store i32 %v2_e4d4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v5_e4e4 = call i32 @connect(i32 %v2_e4d4, %sockaddr* %tmp14, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_e4ec = call i32 @sleep(i32 5)
  store i32 %v1_e4ec, i32* %r0.global-to-local, align 4
  %v0_e4f0 = load i32, i32* @r6, align 4
  %v1_e4f0 = inttoptr i32 %v0_e4f0 to i32*
  %v2_e4f0 = load i32, i32* %v1_e4f0, align 4
  store i32 %v2_e4f0, i32* %r0.global-to-local, align 4
  %v1_e4f4 = call i32 @close(i32 %v2_e4f0)
  %v0_e4f8 = load i32, i32* @r4, align 4
  store i32 %v0_e4f8, i32* %r0.global-to-local, align 4
  %v1_e4fc = call i32 @function_d530(i32 %v0_e4f8)
  store i32 %v1_e4fc, i32* %r0.global-to-local, align 4
  %v1_e500 = call i32 @function_e3c8(i32 %v1_e4fc)
  store i32 %v1_e500, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4a4

dec_label_pc_e508:                                ; preds = %dec_label_pc_e4b0
  %v0_e508 = load i32, i32* @r8, align 4
  %v1_e508 = inttoptr i32 %v0_e508 to i8*
  %v2_e508 = load i8, i8* %v1_e508, align 1
  %v3_e508 = zext i8 %v2_e508 to i32
  %v1_e50c = load i32, i32* @r7, align 4
  %v9_e50c = icmp eq i32 %v3_e508, %v1_e50c
  br i1 %v9_e50c, label %dec_label_pc_e4bc, label %bb

bb:                                               ; preds = %dec_label_pc_e508
  %v2_e514 = trunc i32 %v1_e50c to i8
  store i8 %v2_e514, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_e4bc

; uselistorder directives
  uselistorder i32 %v1_e500, { 1, 0 }
  uselistorder %sockaddr* %tmp14, { 1, 0 }
  uselistorder i32 %v2_e410, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_-44, { 1, 2, 0, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 3, 2, 4, 6, 5, 8, 7, 10, 9, 11, 13, 12, 14, 15, 17, 18, 19, 16 }
  uselistorder i32 (i32)* @function_d530, { 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @listen, { 3, 2, 1, 0, 5, 4, 6 }
  uselistorder i32 (i32, %sockaddr*, i32)* @bind, { 1, 7, 6, 5, 4, 3, 2, 0, 8 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_e4bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e4a4, { 1, 2, 0 }
}

define i32 @function_e51c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e51c:
  %v0_e51c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e51c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_e51c
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e51c, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_e528(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e528:
  %v1_e530 = call i32 @function_110b8(i32 2)
  %v3_e53c = call i32 @function_10ff4(i32 2, i32* null)
  %v1_e540 = call i32 @function_f100(i32 %v3_e53c)
  store i32 %v1_e540, i32* @r6, align 4
  %v1_e54c = call i32 @function_11018(i32 2)
  %v0_e550 = load i32, i32* @r6, align 4
  %v2_e550 = icmp eq i32 %v0_e550, 0
  br i1 %v2_e550, label %dec_label_pc_e5a0, label %dec_label_pc_e558

dec_label_pc_e558:                                ; preds = %dec_label_pc_e528
  %v1_e558 = add i32 %v0_e550, 4
  %v2_e558 = inttoptr i32 %v1_e558 to i32*
  %v3_e558 = load i32, i32* %v2_e558, align 4
  store i32 %v3_e558, i32* @r4, align 4
  %v0_e55c = call i32 @function_ee68()
  %v0_e560 = load i32, i32* @r6, align 4
  %v1_e560 = inttoptr i32 %v0_e560 to i8*
  %v2_e560 = load i8, i8* %v1_e560, align 1
  %v3_e560 = zext i8 %v2_e560 to i32
  %v2_e564 = call i32 @function_11d44(i32 %v0_e55c, i32 %v3_e560)
  %v0_e56c = load i32, i32* @r4, align 4
  %v4_e56c = mul nuw nsw i32 %v3_e560, 4
  %v5_e56c = add i32 %v0_e56c, %v4_e56c
  %v6_e56c = inttoptr i32 %v5_e56c to i32*
  %v7_e56c = load i32, i32* %v6_e56c, align 4
  %v0_e570 = load i32, i32* @r6, align 4
  store i32 %v7_e56c, i32* @global_var_1a240.72, align 4
  %v1_e578 = inttoptr i32 %v0_e570 to i32*
  %v2_e578 = call i32 @function_f0d8(i32* %v1_e578)
  %v1_e580 = call i32 @function_110b8(i32 1)
  %v3_e58c = call i32 @function_10ff4(i32 1, i32* null)
  %v4_e58c = inttoptr i32 %v3_e58c to i16*
  %v3_e590 = load i16, i16* %v4_e58c, align 2
  store i16 %v3_e590, i16* bitcast (i32* @global_var_1a23e.73 to i16*), align 4
  %v1_e59c = call i32 @function_11018(i32 1)
  br label %dec_label_pc_e5a0

dec_label_pc_e5a0:                                ; preds = %dec_label_pc_e528, %dec_label_pc_e558
  %v1_e5a4 = phi i32 [ %v1_e54c, %dec_label_pc_e528 ], [ %v1_e59c, %dec_label_pc_e558 ]
  ret i32 %v1_e5a4

; uselistorder directives
  uselistorder label %dec_label_pc_e5a0, { 1, 0 }
}

define i32 @function_e5ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5ac:
  %v3_e5ac = load i32, i32* @r4, align 4
  %v6_e5ac = load i32, i32* @r5, align 4
  %v9_e5ac = load i32, i32* @lr, align 4
  %v0_e5b4 = call i32 @fork()
  %v2_e5b8 = icmp eq i32 %v0_e5b4, -1
  %. = zext i1 %v2_e5b8 to i32
  %tmp11 = icmp slt i32 %v0_e5b4, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_e5d4 = icmp eq i32 %storemerge4, 0
  store i32 %v0_e5b4, i32* @global_var_1a1e0.75, align 4
  br i1 %v2_e5d4, label %dec_label_pc_e5ec, label %dec_label_pc_e5e0

dec_label_pc_e5e0:                                ; preds = %dec_label_pc_e5ac
  store i32 %v3_e5ac, i32* @r4, align 4
  store i32 %v6_e5ac, i32* @r5, align 4
  store i32 %v9_e5ac, i32* @lr, align 4
  ret i32 %v0_e5b4

dec_label_pc_e5ec:                                ; preds = %dec_label_pc_e5ac
  %v1_e5f8 = call i32 @function_110b8(i32 28)
  %v1_e600 = call i32 @function_110b8(i32 29)
  %v0_e604 = load i32, i32* @r5, align 4
  %v2_e60c = inttoptr i32 %v0_e604 to i32*
  %v3_e60c = call i32 @function_10ff4(i32 28, i32* %v2_e60c)
  %v4_e60c = inttoptr i32 %v3_e60c to i8*
  %v4_e614 = call i32 (i8*, i32, ...) @open(i8* %v4_e60c, i32 2)
  %v2_e618 = icmp eq i32 %v4_e614, -1
  store i32 %v4_e614, i32* @r4, align 4
  br i1 %v2_e618, label %dec_label_pc_e660, label %dec_label_pc_e624

dec_label_pc_e624:                                ; preds = %dec_label_pc_e660, %dec_label_pc_e5ec
  %v0_e630 = phi i32 [ %v4_e670, %dec_label_pc_e660 ], [ %v4_e614, %dec_label_pc_e5ec ]
  %v2_e638 = call i32 (i32, i32, ...) @ioctl(i32 %v0_e630, i32 -2147199228)
  br label %dec_label_pc_e63c

dec_label_pc_e63c:                                ; preds = %dec_label_pc_e63c, %dec_label_pc_e624
  %v0_e648 = load i32, i32* @r4, align 4
  %v2_e650 = call i32 (i32, i32, ...) @ioctl(i32 %v0_e648, i32 -2147199227)
  %v1_e658 = call i32 @sleep(i32 10)
  br label %dec_label_pc_e63c

dec_label_pc_e660:                                ; preds = %dec_label_pc_e5ec
  %v0_e660 = load i32, i32* @r5, align 4
  %v2_e668 = inttoptr i32 %v0_e660 to i32*
  %v3_e668 = call i32 @function_10ff4(i32 29, i32* %v2_e668)
  %v4_e668 = inttoptr i32 %v3_e668 to i8*
  %v4_e670 = call i32 (i8*, i32, ...) @open(i8* %v4_e668, i32 2)
  %v3_e674 = icmp eq i32 %v4_e670, -1
  store i32 %v4_e670, i32* @r4, align 4
  br i1 %v3_e674, label %dec_label_pc_e680, label %dec_label_pc_e624

dec_label_pc_e680:                                ; preds = %dec_label_pc_e660
  %v1_e684 = call i32 @function_11018(i32 28)
  %v1_e68c = call i32 @function_11018(i32 29)
  %v0_e690 = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_e690)
  unreachable

; uselistorder directives
  uselistorder i32 %v4_e670, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_e5b4, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i32, ...)* @open, { 6, 5, 4, 3, 2, 1, 0, 7 }
}

define i32 @function_e69c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e69c:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e69c = load i32, i32* @r4, align 4
  %v6_e69c = load i32, i32* @r5, align 4
  %v15_e69c = load i32, i32* @r8, align 4
  %v2_e6ac = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_e6ac, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %tmp41 = bitcast i32* %stack_var_-64 to %_TYPEDEF_sigset_t*
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v3_e6c4 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %tmp41)
  %v4_e6d0 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %tmp41, i32 2)
  %v0_e6d4 = load i32, i32* @r5, align 4
  %v1_e6d4 = inttoptr i32 %v0_e6d4 to %_TYPEDEF_sigset_t*
  store i32 %v0_e6d4, i32* %r2.global-to-local, align 4
  %v7_e6e0 = call i32 @sigprocmask(i32 %v0_e6d4, %_TYPEDEF_sigset_t* %tmp41, %_TYPEDEF_sigset_t* %v1_e6d4)
  %v4_e6ec = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_e6f8 = call void (i32)* @signal(i32 5, void (i32)* inttoptr (i32 58288 to void (i32)*))
  %v0_e6fc = call i32 @function_119a8()
  store i32 ptrtoint (%sockaddr** @global_var_1a23c.71 to i32), i32* %r2.global-to-local, align 4
  store i16 -6144, i16* bitcast (i32* @global_var_1a23e.73 to i16*), align 4
  store i32 1494907823, i32* @global_var_1a240.72, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_e6fc, i32* @global_var_1a230.41, align 4
  store i16 2, i16* bitcast (%sockaddr** @global_var_1a23c.71 to i16*), align 4
  %v6_e724 = call i32 @function_11158(i32 %v0_e6fc, i32 ptrtoint (i32* @global_var_1a230.41 to i32), i32 ptrtoint (%sockaddr** @global_var_1a23c.71 to i32), i32 2)
  store i32 ptrtoint (i32* @global_var_e528.65 to i32), i32* %r3.global-to-local, align 4
  store i32 106952, i32* %ip.global-to-local, align 4
  %v2_e730 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_e730, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_e528.65 to i32), i32* inttoptr (i32 106952 to i32*), align 8
  %v1_e738 = call i32 @function_e3c8(i32 %v6_e724)
  %v1_e73c = call i32 @function_eec4(i32 %v1_e738)
  store i32 %v2_e730, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e748 = call i32 @function_11780()
  %v0_e74c = load i32, i32* @r6, align 4
  %v7_e74c = icmp eq i32 %v0_e74c, 2
  br i1 %v7_e74c, label %dec_label_pc_e87c, label %dec_label_pc_e754

dec_label_pc_e754:                                ; preds = %dec_label_pc_e87c, %dec_label_pc_e69c, %dec_label_pc_e88c
  %v0_e754 = call i32 @function_ee68()
  store i32 %v0_e754, i32* @r6, align 4
  %v0_e75c = load i32, i32* @r8, align 4
  %v1_e75c = inttoptr i32 %v0_e75c to i32*
  %v2_e75c = load i32, i32* %v1_e75c, align 4
  %v1_e760 = inttoptr i32 %v2_e75c to i8*
  %v2_e760 = call i32 @function_116ec(i8* %v1_e760)
  store i32 %v2_e760, i32* %r5.global-to-local, align 4
  %v0_e768 = load i32, i32* @r8, align 4
  %v1_e768 = inttoptr i32 %v0_e768 to i32*
  %v2_e768 = load i32, i32* %v1_e768, align 4
  %v1_e76c = inttoptr i32 %v2_e768 to i8*
  %v2_e76c = call i32 @function_116ec(i8* %v1_e76c)
  %v1_e770 = sub i32 20, %v2_e760
  store i32 %v2_e76c, i32* %r4.global-to-local, align 4
  %v0_e778 = load i32, i32* @r6, align 4
  %v2_e77c = call i32 @function_11d44(i32 %v0_e778, i32 %v1_e770)
  %v2_e780 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_e780, i32* @r5, align 4
  %v2_e784 = add i32 %v2_e76c, %v1_e770
  store i32 %v2_e784, i32* @r4, align 4
  %v2_e790 = call i32 @function_ef2c(i32 %v2_e780, i32 %v2_e784)
  %v2_e794 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_e794, i32* @lr, align 4
  %v1_e798 = load i32, i32* @r4, align 4
  %v2_e798 = add i32 %v1_e798, %v2_e794
  store i32 %v2_e798, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_e7a4 = load i32, i32* @r8, align 4
  %v1_e7a4 = inttoptr i32 %v0_e7a4 to i32*
  %v2_e7a4 = load i32, i32* %v1_e7a4, align 4
  store i32 %v2_e7a4, i32* @r0, align 4
  %v3_e7a8 = add i32 %v2_e798, -80
  %v4_e7a8 = inttoptr i32 %v3_e7a8 to i8*
  store i8 0, i8* %v4_e7a8, align 1
  %v2_e7ac = inttoptr i32 %v2_e7a4 to i8*
  %v3_e7ac = call i32 @function_11714(i8* %v2_e7ac, i32 %v2_e780)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e780, i32* @r0, align 4
  %v0_e7b8 = call i32 @function_11780()
  %v0_e7bc = call i32 @function_ee68()
  store i32 %v0_e7bc, i32* @r7, align 4
  %v0_e7c4 = load i32, i32* @r8, align 4
  %v1_e7c4 = inttoptr i32 %v0_e7c4 to i32*
  %v2_e7c4 = load i32, i32* %v1_e7c4, align 4
  %v1_e7c8 = inttoptr i32 %v2_e7c4 to i8*
  %v2_e7c8 = call i32 @function_116ec(i8* %v1_e7c8)
  store i32 %v2_e7c8, i32* @r6, align 4
  %v0_e7d0 = load i32, i32* @r8, align 4
  %v1_e7d0 = inttoptr i32 %v0_e7d0 to i32*
  %v2_e7d0 = load i32, i32* %v1_e7d0, align 4
  %v1_e7d4 = inttoptr i32 %v2_e7d0 to i8*
  %v2_e7d4 = call i32 @function_116ec(i8* %v1_e7d4)
  %v0_e7d8 = load i32, i32* @r6, align 4
  %v1_e7d8 = sub i32 20, %v0_e7d8
  store i32 %v2_e7d4, i32* %r4.global-to-local, align 4
  %v0_e7e0 = load i32, i32* @r7, align 4
  %v2_e7e4 = call i32 @function_11d44(i32 %v0_e7e0, i32 %v1_e7d8)
  %v2_e7e8 = add i32 %v2_e7d4, %v1_e7d8
  store i32 %v2_e7e8, i32* @r4, align 4
  %v2_e7f4 = call i32 @function_ef2c(i32 %v2_e780, i32 %v2_e7e8)
  store i32 %v2_e794, i32* %r2.global-to-local, align 4
  %v1_e7fc = load i32, i32* @r4, align 4
  %v2_e7fc = add i32 %v1_e7fc, %v2_e794
  store i32 %v2_e7fc, i32* %r3.global-to-local, align 4
  %v0_e800 = load i32, i32* @sl, align 4
  %v1_e800 = trunc i32 %v0_e800 to i8
  %v3_e800 = add i32 %v2_e7fc, -80
  %v4_e800 = inttoptr i32 %v3_e800 to i8*
  store i8 %v1_e800, i8* %v4_e800, align 1
  %v5_e80c = call i32 @prctl(i32 15, i32 %v2_e780, i32 %v2_e794, i32 %v2_e7fc, i32 ptrtoint (i32* @0 to i32))
  %v1_e814 = call i32 @function_110b8(i32 5)
  %v3_e824 = call i32 @function_10ff4(i32 5, i32* nonnull %stack_var_-48)
  %v3_e828 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e828, i32* %r2.global-to-local, align 4
  %v3_e834 = inttoptr i32 %v3_e824 to i32*
  %v4_e834 = call i32 @write(i32 1, i32* %v3_e834, i32 %v3_e828)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e844 = call i32 @write(i32 ptrtoint (i32* @global_var_11d84.83 to i32), i32* inttoptr (i32 1 to i32*), i32 1)
  %v1_e84c = call i32 @function_11018(i32 5)
  %v1_e850 = call i32 @function_91ac(i32 %v1_e84c)
  %v1_e854 = call i32 @function_dac4(i32 %v1_e850)
  %v1_e858 = call i32 @function_e5ac(i32 %v1_e854)
  %v0_e85c = call i32 @fork()
  %v1_e860 = load i32, i32* @sl, align 4
  %v7_e864 = icmp sgt i32 %v0_e85c, %v1_e860
  br i1 %v7_e864, label %dec_label_pc_e868, label %dec_label_pc_e8b4

dec_label_pc_e868:                                ; preds = %dec_label_pc_e754
  store i32 %v3_e69c, i32* %r4.global-to-local, align 4
  store i32 %v6_e69c, i32* %r5.global-to-local, align 4
  store i32 %v15_e69c, i32* %r8.global-to-local, align 4
  ret i32 %v1_e860

dec_label_pc_e87c:                                ; preds = %dec_label_pc_e69c
  %v0_e87c = load i32, i32* @r8, align 4
  %v1_e87c = add i32 %v0_e87c, 4
  %v2_e87c = inttoptr i32 %v1_e87c to i32*
  %v3_e87c = load i32, i32* %v2_e87c, align 4
  %v1_e880 = inttoptr i32 %v3_e87c to i8*
  %v2_e880 = call i32 @function_116ec(i8* %v1_e880)
  %v8_e888 = icmp sgt i32 %v2_e880, 31
  br i1 %v8_e888, label %dec_label_pc_e754, label %dec_label_pc_e88c

dec_label_pc_e88c:                                ; preds = %dec_label_pc_e87c
  %v0_e88c = load i32, i32* @r8, align 4
  %v1_e88c = add i32 %v0_e88c, 4
  %v2_e88c = inttoptr i32 %v1_e88c to i32*
  %v3_e88c = load i32, i32* %v2_e88c, align 4
  store i32 %v2_e730, i32* @r0, align 4
  %v2_e894 = bitcast i32* %stack_var_-152 to i8*
  %v3_e894 = call i32 @function_11714(i8* %v2_e894, i32 %v3_e88c)
  %v0_e898 = load i32, i32* @r8, align 4
  %v1_e898 = add i32 %v0_e898, 4
  %v2_e898 = inttoptr i32 %v1_e898 to i32*
  %v3_e898 = load i32, i32* %v2_e898, align 4
  store i32 %v3_e898, i32* %r4.global-to-local, align 4
  %v1_e8a0 = inttoptr i32 %v3_e898 to i8*
  %v2_e8a0 = call i32 @function_116ec(i8* %v1_e8a0)
  store i32 %v2_e8a0, i32* @r1, align 4
  store i32 %v3_e898, i32* @r0, align 4
  %v0_e8ac = call i32 @function_11780()
  br label %dec_label_pc_e754

dec_label_pc_e8b4:                                ; preds = %dec_label_pc_e754
  %v1_e8b4 = call i32 @setsid()
  %v0_e8bc = load i32, i32* @sl, align 4
  %v1_e8c0 = call i32 @close(i32 %v0_e8bc)
  %v1_e8c8 = call i32 @close(i32 1)
  %v1_e8d0 = call i32 @close(i32 2)
  store i32 106948, i32* @fp, align 4
  %v1_e8d8 = call i32 @function_91ac(i32 %v1_e8d0)
  %v1_e8dc = call i32 @function_dac4(i32 %v1_e8d8)
  %v1_e8e0 = call i32 @function_e5ac(i32 %v1_e8dc)
  %v1_e8e4 = call i32 @function_f858(i32 %v1_e8e0)
  %v0_e8e8 = load i32, i32* @sl, align 4
  %v2_e8ec = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_e8ec, i32* @r7, align 4
  %v2_e8f0 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_e8f0, i32* @r6, align 4
  %v2_e9d0 = ptrtoint i32* %stack_var_-72 to i32
  %tmp42 = bitcast i32* %stack_var_-280 to %_TYPEDEF_fd_set*
  %tmp43 = bitcast i32* %stack_var_-408 to %_TYPEDEF_fd_set*
  %tmp44 = bitcast i32* %stack_var_-72 to %timeval*
  %v2_ea20 = ptrtoint i32* %stack_var_-168 to i32
  %v2_ebfc = ptrtoint i32* %stack_var_-56 to i32
  %v2_ec04 = ptrtoint i8** %stack_var_-42 to i32
  %v5_ec10 = bitcast i8** %stack_var_-42 to i32*
  %v2_edac = ptrtoint i32* %stack_var_-1432 to i32
  %v2_ec20 = ptrtoint i32* %stack_var_-52 to i32
  %v1_ecd4 = bitcast i32* %stack_var_-152 to i8*
  %tmp46 = bitcast i32* %stack_var_-88 to %sockaddr*
  br label %dec_label_pc_e8f4

dec_label_pc_e8f4:                                ; preds = %dec_label_pc_ed34, %dec_label_pc_edd0, %bb50, %dec_label_pc_ecd0, %dec_label_pc_eb04, %dec_label_pc_eaf4, %bb47, %dec_label_pc_ee24, %dec_label_pc_ed90, %dec_label_pc_ed44, %dec_label_pc_ed20, %dec_label_pc_ec4c, %dec_label_pc_eb74, %dec_label_pc_eaac, %dec_label_pc_e8b4
  %stack_var_-1436.0 = phi i32 [ %v0_e8e8, %dec_label_pc_e8b4 ], [ %stack_var_-1436.0, %bb47 ], [ %stack_var_-1436.1, %dec_label_pc_eaf4 ], [ %stack_var_-1436.1, %dec_label_pc_eb04 ], [ %stack_var_-1436.1, %bb50 ], [ %stack_var_-1436.1, %dec_label_pc_ed44 ], [ %stack_var_-1436.1, %dec_label_pc_eb74 ], [ %stack_var_-1436.1, %dec_label_pc_edd0 ], [ %stack_var_-1436.1, %dec_label_pc_ee24 ], [ %stack_var_-1436.1, %dec_label_pc_ed90 ], [ %stack_var_-1436.1, %dec_label_pc_eaac ], [ %stack_var_-1436.1, %dec_label_pc_ecd0 ], [ %stack_var_-1436.1, %dec_label_pc_ed20 ], [ %stack_var_-1436.1, %dec_label_pc_ec4c ], [ %stack_var_-1436.1, %dec_label_pc_ed34 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e900

dec_label_pc_e900:                                ; preds = %dec_label_pc_e900, %dec_label_pc_e8f4
  %v1_e904 = phi i32 [ %v1_e908, %dec_label_pc_e900 ], [ 4, %dec_label_pc_e8f4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e904 = load i32, i32* @r7, align 4
  %v3_e904 = add i32 %v2_e904, %v1_e904
  %v4_e904 = inttoptr i32 %v3_e904 to i32*
  store i32 0, i32* %v4_e904, align 4
  %v0_e908 = load i32, i32* %r3.global-to-local, align 4
  %v1_e908 = add i32 %v0_e908, 4
  store i32 %v1_e908, i32* %r3.global-to-local, align 4
  %v7_e90c = icmp eq i32 %v1_e908, 128
  br i1 %v7_e90c, label %dec_label_pc_e914, label %dec_label_pc_e900

dec_label_pc_e914:                                ; preds = %dec_label_pc_e900
  %v0_e914 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e914, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e91c

dec_label_pc_e91c:                                ; preds = %dec_label_pc_e91c, %dec_label_pc_e914
  %v1_e920 = phi i32 [ %v1_e924, %dec_label_pc_e91c ], [ 4, %dec_label_pc_e914 ]
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_e920 = load i32, i32* @r6, align 4
  %v3_e920 = add i32 %v2_e920, %v1_e920
  %v4_e920 = inttoptr i32 %v3_e920 to i32*
  store i32 0, i32* %v4_e920, align 4
  %v0_e924 = load i32, i32* %r3.global-to-local, align 4
  %v1_e924 = add i32 %v0_e924, 4
  store i32 %v1_e924, i32* %r3.global-to-local, align 4
  %v7_e928 = icmp eq i32 %v1_e924, 128
  br i1 %v7_e928, label %dec_label_pc_e930, label %dec_label_pc_e91c

dec_label_pc_e930:                                ; preds = %dec_label_pc_e91c
  store i32 106944, i32* %r3.global-to-local, align 4
  %v2_e934 = load i32, i32* inttoptr (i32 106944 to i32*), align 64
  %v2_e938 = icmp eq i32 %v2_e934, -1
  br i1 %v2_e938, label %dec_label_pc_e964, label %dec_label_pc_e940

dec_label_pc_e940:                                ; preds = %dec_label_pc_e930
  %v3_e940 = udiv i32 %v2_e934, 32
  %v3_e944 = mul nuw nsw i32 %v3_e940, 4
  store i32 %v2_e794, i32* %ip.global-to-local, align 4
  %v2_e94c = add i32 %v3_e944, %v2_e794
  store i32 %v2_e94c, i32* %r3.global-to-local, align 4
  %v1_e950 = add i32 %v2_e94c, -240
  %v2_e950 = inttoptr i32 %v1_e950 to i32*
  %v3_e950 = load i32, i32* %v2_e950, align 4
  %v1_e954 = urem i32 %v2_e934, 32
  %v7_e95c = shl i32 1, %v1_e954
  %v8_e95c = or i32 %v3_e950, %v7_e95c
  store i32 %v8_e95c, i32* %r2.global-to-local, align 4
  store i32 %v8_e95c, i32* %v2_e950, align 4
  br label %dec_label_pc_e964

dec_label_pc_e964:                                ; preds = %dec_label_pc_e930, %dec_label_pc_e940
  %v0_e964 = load i32, i32* @fp, align 4
  %v1_e964 = inttoptr i32 %v0_e964 to i32*
  %v2_e964 = load i32, i32* %v1_e964, align 4
  store i32 %v2_e964, i32* %r3.global-to-local, align 4
  %v2_e968 = icmp eq i32 %v2_e964, -1
  store i32 106948, i32* %r8.global-to-local, align 4
  br i1 %v2_e968, label %dec_label_pc_eb8c, label %dec_label_pc_e974

dec_label_pc_e974:                                ; preds = %dec_label_pc_eb8c, %dec_label_pc_e964, %bb49
  %v2_e978 = load i8, i8* bitcast (i8** @global_var_1a1e4.87 to i8*), align 4
  %v3_e978 = zext i8 %v2_e978 to i32
  store i32 %v3_e978, i32* %r3.global-to-local, align 4
  %v2_e97c = icmp eq i8 %v2_e978, 0
  %v0_eac8 = load i32, i32* @fp, align 4
  %v1_eac8 = inttoptr i32 %v0_eac8 to i32*
  %v2_eac8 = load i32, i32* %v1_eac8, align 4
  store i32 %v2_eac8, i32* %ip.global-to-local, align 4
  %v3_eacc = udiv i32 %v2_eac8, 32
  store i32 %v3_eacc, i32* %r3.global-to-local, align 4
  br i1 %v2_e97c, label %dec_label_pc_eac8, label %dec_label_pc_e984

dec_label_pc_e984:                                ; preds = %dec_label_pc_e974
  %v3_e990 = mul nuw nsw i32 %v3_eacc, 4
  %v2_e994 = add i32 %v3_e990, %v2_e794
  store i32 %v2_e994, i32* %r3.global-to-local, align 4
  %v1_e998 = add i32 %v2_e994, -368
  %v2_e998 = inttoptr i32 %v1_e998 to i32*
  %v3_e998 = load i32, i32* %v2_e998, align 4
  %v1_e99c = urem i32 %v2_eac8, 32
  %v7_e9a4 = shl i32 1, %v1_e99c
  %v8_e9a4 = or i32 %v3_e998, %v7_e9a4
  store i32 %v8_e9a4, i32* %r2.global-to-local, align 4
  store i32 %v8_e9a4, i32* %v2_e998, align 4
  br label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_eac8, %dec_label_pc_e984
  store i32 106944, i32* %r3.global-to-local, align 4
  %v2_e9b0 = load i32, i32* inttoptr (i32 106944 to i32*), align 64
  store i32 0, i32* @lr, align 4
  %v0_e9b8 = load i32, i32* %ip.global-to-local, align 4
  %v5_e9bc = icmp slt i32 %v0_e9b8, %v2_e9b0
  br i1 %v5_e9bc, label %bb47, label %bb

bb:                                               ; preds = %dec_label_pc_e9ac
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_e9ac, %bb
  %v0_e9cc = phi i32 [ %v2_e9b0, %dec_label_pc_e9ac ], [ %v0_e9b8, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_e9cc = add i32 %v0_e9cc, 1
  store i32 %v2_e9d0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_e8f0, i32* %r2.global-to-local, align 4
  %v13_e9e8 = call i32 @select(i32 %v1_e9cc, %_TYPEDEF_fd_set* %tmp42, %_TYPEDEF_fd_set* %tmp43, %_TYPEDEF_fd_set* null, %timeval* %tmp44)
  %v14_e9e8 = trunc i32 %v13_e9e8 to i16
  %v3_e9ec = icmp eq i16 %v14_e9e8, -1
  br i1 %v3_e9ec, label %dec_label_pc_e8f4, label %dec_label_pc_e9f4

dec_label_pc_e9f4:                                ; preds = %bb47
  %v3_e9f4 = icmp eq i16 %v14_e9e8, 0
  br i1 %v3_e9f4, label %dec_label_pc_e9fc, label %dec_label_pc_ea30

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e9f4
  %v5_ea08 = srem i32 %stack_var_-1436.0, 6
  %v4_ea10 = sub i32 %stack_var_-1436.0, %v5_ea08
  store i32 %v4_ea10, i32* %r3.global-to-local, align 4
  %v2_ea18 = icmp eq i32 %v5_ea08, 0
  %v1_ea1c = add i32 %stack_var_-1436.0, 1
  store i32 %v1_ea1c, i32* @lr, align 4
  store i32 %v2_ea20, i32* %r2.global-to-local, align 4
  %v7_ea24 = inttoptr i32 %v13_e9e8 to i8*
  store i8* %v7_ea24, i8** %stack_var_-42, align 4
  br i1 %v2_ea18, label %dec_label_pc_ebfc, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_e9f4, %dec_label_pc_e9fc, %dec_label_pc_ebfc
  %stack_var_-1436.1 = phi i32 [ %v1_ea1c, %dec_label_pc_ebfc ], [ %v1_ea1c, %dec_label_pc_e9fc ], [ %stack_var_-1436.0, %dec_label_pc_e9f4 ]
  store i32 106944, i32* %r3.global-to-local, align 4
  %v2_ea34 = load i32, i32* inttoptr (i32 106944 to i32*), align 64
  %v2_ea38 = icmp eq i32 %v2_ea34, -1
  br i1 %v2_ea38, label %dec_label_pc_ea64, label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_ea30
  %v3_ea40 = udiv i32 %v2_ea34, 32
  %v3_ea44 = mul nuw nsw i32 %v3_ea40, 4
  store i32 %v2_e794, i32* %ip.global-to-local, align 4
  %v2_ea4c = add i32 %v3_ea44, %v2_e794
  store i32 %v2_ea4c, i32* %r3.global-to-local, align 4
  %v1_ea50 = add i32 %v2_ea4c, -240
  %v2_ea50 = inttoptr i32 %v1_ea50 to i32*
  %v3_ea50 = load i32, i32* %v2_ea50, align 4
  %v1_ea54 = urem i32 %v2_ea34, 32
  %v6_ea58 = lshr i32 %v3_ea50, %v1_ea54
  store i32 %v6_ea58, i32* %r2.global-to-local, align 4
  %v1_ea5c = urem i32 %v6_ea58, 2
  %v2_ea5c = icmp eq i32 %v1_ea5c, 0
  br i1 %v2_ea5c, label %dec_label_pc_ea64, label %dec_label_pc_ec88

dec_label_pc_ea64:                                ; preds = %dec_label_pc_ea40, %dec_label_pc_ea30
  %v2_ea68 = load i8, i8* bitcast (i8** @global_var_1a1e4.87 to i8*), align 4
  %v3_ea68 = zext i8 %v2_ea68 to i32
  store i32 %v3_ea68, i32* %r4.global-to-local, align 4
  %v2_ea6c = icmp eq i8 %v2_ea68, 0
  %v0_eaf4 = load i32, i32* @fp, align 4
  %v1_eaf4 = inttoptr i32 %v0_eaf4 to i32*
  %v2_eaf4 = load i32, i32* %v1_eaf4, align 4
  br i1 %v2_ea6c, label %dec_label_pc_eaf4, label %dec_label_pc_ea74

dec_label_pc_ea74:                                ; preds = %dec_label_pc_ea64
  %v3_ea78 = udiv i32 %v2_eaf4, 32
  store i32 %v2_e794, i32* %r2.global-to-local, align 4
  %v3_ea80 = mul nuw nsw i32 %v3_ea78, 4
  %v2_ea84 = add i32 %v3_ea80, %v2_e794
  store i32 %v2_ea84, i32* %r3.global-to-local, align 4
  %v1_ea88 = add i32 %v2_ea84, -368
  %v2_ea88 = inttoptr i32 %v1_ea88 to i32*
  %v3_ea88 = load i32, i32* %v2_ea88, align 4
  %v1_ea8c = urem i32 %v2_eaf4, 32
  %v6_ea90 = lshr i32 %v3_ea88, %v1_ea8c
  store i32 %v6_ea90, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a1e4.87 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_ea9c = urem i32 %v6_ea90, 2
  %v2_ea9c = icmp eq i32 %v1_ea9c, 0
  store i8 0, i8* bitcast (i8** @global_var_1a1e4.87 to i8*), align 4
  store i32 106948, i32* @r5, align 4
  br i1 %v2_ea9c, label %dec_label_pc_eaac, label %dec_label_pc_ec18

dec_label_pc_eaac:                                ; preds = %dec_label_pc_ea74
  %v1_eab0 = icmp ne i32 %v2_eaf4, -1
  call void @__pseudo_cond_branch(i1 %v1_eab0, i32 ptrtoint (i32* @global_var_8c8c.89 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_eab8 = load i32, i32* @r5, align 4
  %v2_eab8 = inttoptr i32 %v1_eab8 to i32*
  store i32 -1, i32* %v2_eab8, align 4
  %v1_eac0 = call i32 @sleep(i32 1)
  br label %dec_label_pc_e8f4

dec_label_pc_eac8:                                ; preds = %dec_label_pc_e974
  store i32 %v2_e794, i32* %r2.global-to-local, align 4
  %v3_ead4 = mul nuw nsw i32 %v3_eacc, 4
  %v2_ead8 = add i32 %v3_ead4, %v2_e794
  store i32 %v2_ead8, i32* %r3.global-to-local, align 4
  %v1_eadc = add i32 %v2_ead8, -240
  %v2_eadc = inttoptr i32 %v1_eadc to i32*
  %v3_eadc = load i32, i32* %v2_eadc, align 4
  %v1_eae0 = urem i32 %v2_eac8, 32
  %v7_eae8 = shl i32 1, %v1_eae0
  %v8_eae8 = or i32 %v3_eadc, %v7_eae8
  store i32 %v8_eae8, i32* %r2.global-to-local, align 4
  store i32 %v8_eae8, i32* %v2_eadc, align 4
  br label %dec_label_pc_e9ac

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_ea64
  %v2_eaf8 = icmp eq i32 %v2_eaf4, -1
  store i32 106948, i32* @r8, align 4
  br i1 %v2_eaf8, label %dec_label_pc_e8f4, label %dec_label_pc_eb04

dec_label_pc_eb04:                                ; preds = %dec_label_pc_eaf4
  %v3_eb04 = udiv i32 %v2_eaf4, 32
  store i32 %v2_e794, i32* %r2.global-to-local, align 4
  %v3_eb0c = mul nuw nsw i32 %v3_eb04, 4
  %v2_eb10 = add i32 %v3_eb0c, %v2_e794
  store i32 %v2_eb10, i32* %r3.global-to-local, align 4
  %v1_eb14 = add i32 %v2_eb10, -240
  %v2_eb14 = inttoptr i32 %v1_eb14 to i32*
  %v3_eb14 = load i32, i32* %v2_eb14, align 4
  %v1_eb18 = urem i32 %v2_eaf4, 32
  %v6_eb1c = lshr i32 %v3_eb14, %v1_eb18
  store i32 %v6_eb1c, i32* %r2.global-to-local, align 4
  %v1_eb20 = urem i32 %v6_eb1c, 2
  %v2_eb20 = icmp eq i32 %v1_eb20, 0
  br i1 %v2_eb20, label %dec_label_pc_e8f4, label %dec_label_pc_eb28

dec_label_pc_eb28:                                ; preds = %dec_label_pc_eb04
  %v6_eb2c = inttoptr i32 %v3_ea68 to i8*
  store i8* %v6_eb2c, i8** %stack_var_-42, align 4
  store i32 %v2_ec04, i32* @sl, align 4
  %v0_eb30 = call i32* @__errno_location()
  %v2_eb30 = ptrtoint i32* %v0_eb30 to i32
  %v0_eb34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_eb34, i32* %v0_eb30, align 4
  store i32 %v2_eb30, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_eb44 = load i32, i32* @r8, align 4
  %v1_eb44 = inttoptr i32 %v0_eb44 to i32*
  %v2_eb44 = load i32, i32* %v1_eb44, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_eb50 = call i32 @recv(i32 %v2_eb44, i32* %v5_ec10, i32 2, i32 16386)
  %v2_eb54 = icmp eq i32 %v5_eb50, -1
  br i1 %v2_eb54, label %dec_label_pc_ed34, label %dec_label_pc_eb5c

dec_label_pc_eb5c:                                ; preds = %dec_label_pc_eb28
  %v2_eb5c = icmp eq i32 %v5_eb50, 0
  br i1 %v2_eb5c, label %dec_label_pc_ed44, label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %dec_label_pc_eb5c
  store i32 %v2_ea20, i32* %ip.global-to-local, align 4
  %v3_eb68 = load i8*, i8** %stack_var_-42, align 4
  %v4_eb68 = ptrtoint i8* %v3_eb68 to i32
  store i32 %v4_eb68, i32* %r3.global-to-local, align 4
  %v2_eb6c = icmp eq i8* %v3_eb68, null
  br i1 %v2_eb6c, label %dec_label_pc_eb74, label %dec_label_pc_ed74

dec_label_pc_eb74:                                ; preds = %dec_label_pc_eb64
  %v0_eb74 = load i32, i32* @r8, align 4
  %v1_eb74 = inttoptr i32 %v0_eb74 to i32*
  %v2_eb74 = load i32, i32* %v1_eb74, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_eb80 = add i32 %v4_eb68, 16384
  store i32 %v1_eb80, i32* %r3.global-to-local, align 4
  %v5_eb84 = call i32 @recv(i32 %v2_eb74, i32* nonnull %v5_ec10, i32 2, i32 %v1_eb80)
  br label %dec_label_pc_e8f4

dec_label_pc_eb8c:                                ; preds = %dec_label_pc_e964
  %v0_eb94 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_eb94, i32* %r2.global-to-local, align 4
  %v3_eb98 = call i32 @socket(i32 2, i32 1, i32 %v0_eb94)
  %v2_eb9c = icmp eq i32 %v3_eb98, -1
  store i32 %v3_eb98, i32* %r5.global-to-local, align 4
  %v1_eba4 = load i32, i32* %r8.global-to-local, align 4
  %v2_eba4 = inttoptr i32 %v1_eba4 to i32*
  store i32 %v3_eb98, i32* %v2_eba4, align 4
  br i1 %v2_eb9c, label %dec_label_pc_e974, label %dec_label_pc_ebac

dec_label_pc_ebac:                                ; preds = %dec_label_pc_eb8c
  %v0_ebac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ebac, i32* %r2.global-to-local, align 4
  %v2_ebb4 = call i32 (i32, i32, ...) @fcntl(i32 %v3_eb98, i32 3)
  %v1_ebbc = or i32 %v2_ebb4, 2048
  store i32 %v1_ebbc, i32* %r2.global-to-local, align 4
  %v0_ebc0 = load i32, i32* %r5.global-to-local, align 4
  %v2_ebc4 = call i32 (i32, i32, ...) @fcntl(i32 %v0_ebc0, i32 4)
  %v2_ebcc = load i32, i32* inttoptr (i32 106952 to i32*), align 8
  store i32 %v2_ebcc, i32* %r3.global-to-local, align 4
  %v2_ebd0 = icmp eq i32 %v2_ebcc, 0
  br i1 %v2_ebd0, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_ebac
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_ebac, %bb48
  %v2_ebd8 = xor i1 %v2_ebd0, true
  call void @__pseudo_cond_branch(i1 %v2_ebd8, i32 %v2_ebcc)
  store i32 ptrtoint (i8** @global_var_1a1e4.87 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ebe4 = load i32, i32* %r8.global-to-local, align 4
  %v1_ebe4 = inttoptr i32 %v0_ebe4 to i32*
  %v2_ebe4 = load i32, i32* %v1_ebe4, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1a1e4.87 to i8*), align 4
  %v5_ebf4 = call i32 @connect(i32 %v2_ebe4, %sockaddr* bitcast (%sockaddr** @global_var_1a23c.71 to %sockaddr*), i32 16)
  br label %dec_label_pc_e974

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_e9fc
  %v0_ec00 = load i32, i32* @fp, align 4
  %v1_ec00 = inttoptr i32 %v0_ec00 to i32*
  %v2_ec00 = load i32, i32* %v1_ec00, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ec10 = call i32 @send(i32 %v2_ec00, i32* nonnull %v5_ec10, i32 2, i32 16384)
  br label %dec_label_pc_ea30

dec_label_pc_ec18:                                ; preds = %dec_label_pc_ea74
  store i32 4, i32* @r4, align 4
  store i32 %v2_ec20, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_ebfc, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v8_ec3c = call i32 @getsockopt(i32 %v2_eaf4, i32 1, i32 4, i32* nonnull %stack_var_-52, i32* nonnull %stack_var_-56)
  %v3_ec40 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ec40, i32* %r3.global-to-local, align 4
  %v2_ec44 = icmp eq i32 %v3_ec40, 0
  br i1 %v2_ec44, label %dec_label_pc_ecd0, label %dec_label_pc_ec4c

dec_label_pc_ec4c:                                ; preds = %dec_label_pc_ec18
  %v0_ec4c = load i32, i32* @r5, align 4
  %v1_ec4c = inttoptr i32 %v0_ec4c to i32*
  %v2_ec4c = load i32, i32* %v1_ec4c, align 4
  %v1_ec50 = call i32 @close(i32 %v2_ec4c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ec58 = load i32, i32* @r5, align 4
  %v2_ec58 = inttoptr i32 %v1_ec58 to i32*
  store i32 -1, i32* %v2_ec58, align 4
  %v0_ec5c = call i32 @function_ee68()
  %v3_ec64 = zext i32 %v0_ec5c to i64
  %v4_ec64 = mul nuw i64 %v3_ec64, 3435973837
  %v7_ec64 = trunc i64 %v4_ec64 to i32
  store i32 %v7_ec64, i32* %ip.global-to-local, align 4
  %v3_ec682 = udiv i64 %v4_ec64, 34359738368
  %v3_ec6c4 = mul nuw nsw i64 %v3_ec682, 8
  %v3_ec6c = trunc i64 %v3_ec6c4 to i32
  store i32 %v3_ec6c, i32* %r2.global-to-local, align 4
  %v2_ec706 = mul nuw nsw i64 %v3_ec682, 2
  %v2_ec70 = trunc i64 %v2_ec706 to i32
  %v2_ec74 = add i32 %v3_ec6c, %v2_ec70
  store i32 %v2_ec74, i32* %r3.global-to-local, align 4
  %v2_ec78 = sub i32 %v0_ec5c, %v2_ec74
  %v1_ec7c = add i32 %v2_ec78, 1
  %v1_ec80 = call i32 @sleep(i32 %v1_ec7c)
  br label %dec_label_pc_e8f4

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ea40
  %v1_ecb0 = sub i32 0, %v1_e8b4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_ec20, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v8_ec9c = call i32 @accept(i32 %v2_ea34, %sockaddr* %tmp46, i32* nonnull %stack_var_-52)
  %v1_eca0 = call i32 @function_f608(i32 %v8_ec9c)
  %v1_eca4 = call i32 @function_d508(i32 %v1_eca0)
  %v2_ecb4 = call i32 @kill(i32 %v1_ecb0, i32 9)
  store i32 ptrtoint (i32* @global_var_1a1e0.75 to i32), i32* %r3.global-to-local, align 4
  %v2_ecbc = load i32, i32* @global_var_1a1e0.75, align 4
  %v2_ecc0 = icmp eq i32 %v2_ecbc, 0
  br i1 %v2_ecc0, label %dec_label_pc_ecc8, label %dec_label_pc_ed68

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ec88, %dec_label_pc_ed68
  call void @exit(i32 0)
  unreachable

dec_label_pc_ecd0:                                ; preds = %dec_label_pc_ec18
  %v2_ecd4 = call i32 @function_116ec(i8* %v1_ecd4)
  %sext = mul i32 %v2_ecd4, 16777216
  %v1_ecd8 = sdiv i32 %sext, 16777216
  %v7_ecd8 = inttoptr i32 %v1_ecd8 to i8*
  store i8* %v7_ecd8, i8** %stack_var_-42, align 4
  %v0_ecdc = call i32 @function_119a8()
  %v0_ece4 = load i32, i32* @r4, align 4
  store i32 %v0_ece4, i32* %r2.global-to-local, align 4
  store i32 %v0_ecdc, i32* @global_var_1a230.41, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ecf4 = load i32, i32* @r5, align 4
  %v1_ecf4 = inttoptr i32 %v0_ecf4 to i32*
  %v2_ecf4 = load i32, i32* %v1_ecf4, align 4
  %v5_ecf8 = call i32 @send(i32 %v2_ecf4, i32* nonnull @global_var_11d88.93, i32 %v0_ece4, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_ed04 = load i32, i32* @r5, align 4
  %v1_ed04 = inttoptr i32 %v0_ed04 to i32*
  %v2_ed04 = load i32, i32* %v1_ed04, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ed10 = call i32 @send(i32 %v2_ed04, i32* %v5_ec10, i32 1, i32 16384)
  %v3_ed14 = load i8*, i8** %stack_var_-42, align 4
  %v4_ed14 = ptrtoint i8* %v3_ed14 to i32
  store i32 %v4_ed14, i32* %r2.global-to-local, align 4
  %v3_ed18 = icmp eq i8* %v3_ed14, null
  br i1 %v3_ed18, label %dec_label_pc_e8f4, label %dec_label_pc_ed20

dec_label_pc_ed20:                                ; preds = %dec_label_pc_ecd0
  %v0_ed20 = load i32, i32* @r5, align 4
  %v1_ed20 = inttoptr i32 %v0_ed20 to i32*
  %v2_ed20 = load i32, i32* %v1_ed20, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ed2c = call i32 @send(i32 %v2_ed20, i32* nonnull %stack_var_-152, i32 %v4_ed14, i32 16384)
  br label %dec_label_pc_e8f4

dec_label_pc_ed34:                                ; preds = %dec_label_pc_eda4, %dec_label_pc_eb28
  %v0_ed34 = load i32, i32* @r5, align 4
  %v1_ed34 = inttoptr i32 %v0_ed34 to i32*
  %v2_ed34 = load i32, i32* %v1_ed34, align 4
  store i32 %v2_ed34, i32* %r3.global-to-local, align 4
  %v7_ed38 = icmp eq i32 %v2_ed34, 4
  br i1 %v7_ed38, label %dec_label_pc_e8f4, label %bb50

bb50:                                             ; preds = %dec_label_pc_ed34
  %v8_ed3c = icmp eq i32 %v2_ed34, 11
  br i1 %v8_ed3c, label %dec_label_pc_e8f4, label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_edc8, %bb50, %dec_label_pc_eb5c
  %v0_ed44 = load i32, i32* @fp, align 4
  %v1_ed44 = inttoptr i32 %v0_ed44 to i32*
  %v2_ed44 = load i32, i32* %v1_ed44, align 4
  %v1_ed4c = icmp ne i32 %v2_ed44, -1
  call void @__pseudo_cond_branch(i1 %v1_ed4c, i32 ptrtoint (i32* @global_var_8c8c.89 to i32))
  store i32 106948, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 106948 to i32*), align 4
  %v1_ed60 = call i32 @sleep(i32 1)
  br label %dec_label_pc_e8f4

dec_label_pc_ed68:                                ; preds = %dec_label_pc_ec88
  %v2_ed6c = call i32 @kill(i32 %v2_ecbc, i32 9)
  br label %dec_label_pc_ecc8

dec_label_pc_ed74:                                ; preds = %dec_label_pc_eb64
  %v3_ed74 = udiv i32 %v4_eb68, 256
  %v1_ed78 = urem i32 %v4_eb68, 256
  store i32 %v1_ed78, i32* %r3.global-to-local, align 4
  %v4_ed7c = mul nuw nsw i32 %v1_ed78, 256
  %v5_ed7c = or i32 %v4_ed7c, %v3_ed74
  %v6_ed7c = trunc i32 %v5_ed7c to i16
  store i32 %v5_ed7c, i32* %r2.global-to-local, align 4
  %v7_ed88 = inttoptr i32 %v5_ed7c to i8*
  store i8* %v7_ed88, i8** %stack_var_-42, align 4
  %tmp51 = icmp ult i16 %v6_ed7c, 1025
  br i1 %tmp51, label %dec_label_pc_eda4, label %dec_label_pc_ed90

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed74
  %v0_ed90 = load i32, i32* @r8, align 4
  %v1_ed90 = inttoptr i32 %v0_ed90 to i32*
  %v2_ed90 = load i32, i32* %v1_ed90, align 4
  %v1_ed94 = call i32 @close(i32 %v2_ed90)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ed9c = load i32, i32* @r8, align 4
  %v2_ed9c = inttoptr i32 %v1_ed9c to i32*
  store i32 -1, i32* %v2_ed9c, align 4
  br label %dec_label_pc_e8f4

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed74
  %v0_eda4 = load i32, i32* %r4.global-to-local, align 4
  %v1_eda4 = load i32, i32* @r5, align 4
  %v2_eda4 = inttoptr i32 %v1_eda4 to i32*
  store i32 %v0_eda4, i32* %v2_eda4, align 4
  store i32 %v2_edac, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_edb4 = load i32, i32* @r8, align 4
  %v1_edb4 = inttoptr i32 %v0_edb4 to i32*
  %v2_edb4 = load i32, i32* %v1_edb4, align 4
  %v8_edbc = call i32 @recv(i32 %v2_edb4, i32* nonnull %stack_var_-1432, i32 %v5_ed7c, i32 16386)
  %v2_edc0 = icmp eq i32 %v8_edbc, -1
  br i1 %v2_edc0, label %dec_label_pc_ed34, label %dec_label_pc_edc8

dec_label_pc_edc8:                                ; preds = %dec_label_pc_eda4
  %v2_edc8 = icmp eq i32 %v8_edbc, 0
  br i1 %v2_edc8, label %dec_label_pc_ed44, label %dec_label_pc_edd0

dec_label_pc_edd0:                                ; preds = %dec_label_pc_edc8
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eddc = load i32, i32* @r8, align 4
  %v1_eddc = inttoptr i32 %v0_eddc to i32*
  %v2_eddc = load i32, i32* %v1_eddc, align 4
  %v5_ede0 = call i32 @recv(i32 %v2_eddc, i32* nonnull %v5_ec10, i32 2, i32 16384)
  %v3_ede8 = load i8*, i8** %stack_var_-42, align 4
  %v4_ede8 = ptrtoint i8* %v3_ede8 to i32
  %v3_edec = udiv i32 %v4_ede8, 256
  %v1_edf0 = urem i32 %v4_ede8, 256
  store i32 %v1_edf0, i32* %r3.global-to-local, align 4
  %v4_edf4 = mul nuw nsw i32 %v1_edf0, 256
  %v5_edf4 = or i32 %v4_edf4, %v3_edec
  store i32 %v5_edf4, i32* %ip.global-to-local, align 4
  store i32 %v2_ea20, i32* @lr, align 4
  store i32 %v5_edf4, i32* %r2.global-to-local, align 4
  %v0_ee04 = load i32, i32* @r8, align 4
  %v1_ee04 = inttoptr i32 %v0_ee04 to i32*
  %v2_ee04 = load i32, i32* %v1_ee04, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ee0c = inttoptr i32 %v5_edf4 to i8*
  store i8* %v6_ee0c, i8** %stack_var_-42, align 4
  %v7_ee10 = call i32 @recv(i32 %v2_ee04, i32* nonnull %stack_var_-1432, i32 %v5_edf4, i32 16384)
  store i32 %v2_ea20, i32* %r2.global-to-local, align 4
  %v3_ee18 = load i8*, i8** %stack_var_-42, align 4
  %v3_ee1c = icmp eq i8* %v3_ee18, null
  br i1 %v3_ee1c, label %dec_label_pc_e8f4, label %dec_label_pc_ee24

dec_label_pc_ee24:                                ; preds = %dec_label_pc_edd0
  %v4_ee18 = ptrtoint i8* %v3_ee18 to i32
  %v5_ee28 = call i32 @function_8eb4(i32* nonnull %stack_var_-1432, i32 %v4_ee18, i32 %v2_ea20)
  br label %dec_label_pc_e8f4

; uselistorder directives
  uselistorder i8* %v3_ee18, { 1, 0 }
  uselistorder i32 %v5_edf4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ede8, { 1, 0 }
  uselistorder i32 %v5_ed7c, { 1, 0, 3, 2 }
  uselistorder i32 %v3_eb98, { 2, 1, 0, 3 }
  uselistorder i32 %v4_eb68, { 1, 0, 2, 3 }
  uselistorder i32 %v2_eaf4, { 5, 2, 1, 6, 0, 4, 3 }
  uselistorder i32 %v2_ea34, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ea1c, { 1, 0, 2 }
  uselistorder i32 %v2_e934, { 1, 0, 2 }
  uselistorder i32 %v1_e924, { 1, 2, 0 }
  uselistorder i32 %v1_e908, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32* %v5_ec10, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v2_ea20, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_e794, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7, 15 }
  uselistorder i32 %v2_e780, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_e6fc, { 1, 0 }
  uselistorder i32 %v0_e6d4, { 0, 2, 1 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-152, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-280, { 1, 0, 2 }
  uselistorder i32* %stack_var_-408, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-1432, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 3, 1, 2, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_1a1e0.75, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_1a1e4.87 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1a1e4.87 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 106944 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_e5ac, { 1, 0 }
  uselistorder i32 (i32)* @function_dac4, { 1, 0 }
  uselistorder i32 (i32)* @function_91ac, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ef2c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_e3c8, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_e528.65 to i32), { 0, 2, 1 }
  uselistorder %sockaddr** @global_var_1a23c.71, { 1, 0, 2 }
  uselistorder void (i32)* (i32, void (i32)*)* @signal, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ecc8, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_ea30, { 2, 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_e974, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e964, { 1, 0 }
  uselistorder label %dec_label_pc_e8f4, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_e754, { 2, 0, 1 }
}

define i32 @function_ee4c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ee4c:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_ee4c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ee4c, label %bb, label %dec_label_pc_ee4c..thread1_crit_edge

dec_label_pc_ee4c..thread1_crit_edge:             ; preds = %dec_label_pc_ee4c
  %v0_ee58.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_ee4c
  %v2_ee4c = load i32, i32* @r4, align 4
  %v3_ee4c = and i32 %v2_ee4c, 4
  %v4_ee4c = icmp ne i32 %v3_ee4c, 0
  store i1 %v4_ee4c, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_ee4c..thread1_crit_edge, %bb
  %v0_ee58 = phi i1 [ %v0_ee58.pre, %dec_label_pc_ee4c..thread1_crit_edge ], [ %v4_ee4c, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_ee58, i32 -22308596)
  %v0_ee60 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ee60, label %bb4, label %.thread2

bb4:                                              ; preds = %.thread1
  %v2_ee64 = load i32, i32* @r8, align 4
  %v3_ee64 = and i32 %v2_ee64, 32
  %v4_ee64 = icmp ne i32 %v3_ee64, 0
  store i1 %v4_ee64, i1* %cpsr_c.global-to-local, align 1
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb4
  ret i32 %arg1

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_ee68() local_unnamed_addr {
dec_label_pc_ee68:
  %v2_ee74 = load i32, i32* @global_var_1a1e8.95, align 4
  %v2_ee78 = load i32, i32* @global_var_1a1f4.97, align 4
  %v4_ee84 = mul i32 %v2_ee74, 2048
  %v5_ee84 = xor i32 %v4_ee84, %v2_ee74
  store i32 %v5_ee84, i32* @r3, align 4
  %v4_ee88 = udiv i32 %v2_ee78, 524288
  %v5_ee88 = xor i32 %v4_ee88, %v2_ee78
  %v2_ee8c = load i32, i32* @global_var_1a1ec.99, align 4
  %v2_ee90 = load i32, i32* @global_var_1a1f0.101, align 4
  %v2_ee94 = xor i32 %v5_ee88, %v5_ee84
  %v4_ee98 = udiv i32 %v5_ee84, 256
  %v5_ee98 = xor i32 %v2_ee94, %v4_ee98
  store i32 %v2_ee8c, i32* @global_var_1a1e8.95, align 4
  store i32 %v2_ee90, i32* @global_var_1a1ec.99, align 4
  store i32 %v2_ee78, i32* @global_var_1a1f0.101, align 4
  store i32 %v5_ee98, i32* @global_var_1a1f4.97, align 4
  ret i32 %v5_ee98

; uselistorder directives
  uselistorder i32 %v2_ee78, { 2, 1, 0 }
  uselistorder i32 %v2_ee74, { 1, 0 }
  uselistorder i32* @r3, { 2, 0, 1 }
}

define i32 @function_eec4(i32 %arg1) local_unnamed_addr {
dec_label_pc_eec4:
  %v2_eed0 = call i32 @time(i32* null)
  store i32 %v2_eed0, i32* @global_var_1a1e8.95, align 4
  %v1_eedc = call i32 @getpid()
  %v0_eee4 = call i32 @getppid()
  %v2_eeec = xor i32 %v1_eedc, %v0_eee4
  store i32 %v2_eeec, i32* @global_var_1a1ec.99, align 4
  %v1_eef4 = call i32 @clock()
  %v2_eef8 = load i32, i32* @global_var_1a1ec.99, align 4
  %v2_ef04 = xor i32 %v2_eef8, %v1_eef4
  store i32 %v2_ef04, i32* @global_var_1a1f4.97, align 4
  store i32 %v1_eef4, i32* @global_var_1a1f0.101, align 4
  ret i32 %v1_eef4

; uselistorder directives
  uselistorder i32 %v1_eef4, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 1, 2, 0, 3 }
  uselistorder i32 ()* @getpid, { 2, 1, 0, 3 }
}

define i32 @function_ef2c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ef2c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_ef2c = load i32, i32* @r4, align 4
  %v6_ef2c = load i32, i32* @r5, align 4
  %v9_ef2c = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_ef40 = call i32 @function_110b8(i32 33)
  %v3_ef4c = call i32 @function_10ff4(i32 33, i32* null)
  %v1_ef50 = inttoptr i32 %v3_ef4c to i8*
  %tmp13 = bitcast i32* %stack_var_-72 to i8*
  %v6_ef58 = call i8* @strcpy(i8* %tmp13, i8* %v1_ef50)
  %v2_ef5c = icmp eq i32 %arg2, 0
  br i1 %v2_ef5c, label %dec_label_pc_efd8, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef2c
  store i32 ptrtoint (i32* @global_var_1a1e8.95 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1ec.99 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1f0.101 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1f4.97 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_efbc = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ef78

dec_label_pc_ef78:                                ; preds = %dec_label_pc_ef78.dec_label_pc_ef78_crit_edge, %dec_label_pc_ef64
  %v1_ef9c = phi i32 [ %v1_ef9c.pre, %dec_label_pc_ef78.dec_label_pc_ef78_crit_edge ], [ ptrtoint (i32* @global_var_1a1e8.95 to i32), %dec_label_pc_ef64 ]
  %v2_ef78 = load i32, i32* @global_var_1a1f4.97, align 4
  store i32 %v2_ef78, i32* %r2.global-to-local, align 4
  %v2_ef7c = load i32, i32* @global_var_1a1e8.95, align 4
  %v4_ef80 = udiv i32 %v2_ef78, 524288
  %v5_ef80 = xor i32 %v4_ef80, %v2_ef78
  %v4_ef84 = mul i32 %v2_ef7c, 2048
  %v5_ef84 = xor i32 %v4_ef84, %v2_ef7c
  %v2_ef88 = xor i32 %v5_ef80, %v5_ef84
  %v2_ef8c = load i32, i32* @global_var_1a1ec.99, align 4
  %v2_ef90 = load i32, i32* @global_var_1a1f0.101, align 4
  store i32 %v2_ef90, i32* %ip.global-to-local, align 4
  %v4_ef94 = udiv i32 %v5_ef84, 256
  %v5_ef94 = xor i32 %v2_ef88, %v4_ef94
  store i32 %v5_ef94, i32* @r4, align 4
  %v2_ef9c = inttoptr i32 %v1_ef9c to i32*
  store i32 %v2_ef8c, i32* %v2_ef9c, align 4
  %v0_efa0 = load i32, i32* %ip.global-to-local, align 4
  %v1_efa0 = load i32, i32* %r8.global-to-local, align 4
  %v2_efa0 = inttoptr i32 %v1_efa0 to i32*
  store i32 %v0_efa0, i32* %v2_efa0, align 4
  %v0_efa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_efa4 = load i32, i32* %r7.global-to-local, align 4
  %v2_efa4 = inttoptr i32 %v1_efa4 to i32*
  store i32 %v0_efa4, i32* %v2_efa4, align 4
  %v0_efa8 = load i32, i32* @r4, align 4
  %v1_efa8 = load i32, i32* @r6, align 4
  %v2_efa8 = inttoptr i32 %v1_efa8 to i32*
  store i32 %v0_efa8, i32* %v2_efa8, align 4
  %v2_efac = call i32 @function_116ec(i8* %tmp13)
  %v0_efb4 = load i32, i32* @r4, align 4
  %v2_efb8 = call i32 @function_11d44(i32 %v0_efb4, i32 %v2_efac)
  %v2_efc0 = add i32 %v2_efac, %v2_efbc
  %v1_efc4 = add i32 %v2_efc0, -32
  %v2_efc4 = inttoptr i32 %v1_efc4 to i8*
  %v3_efc4 = load i8, i8* %v2_efc4, align 1
  %v2_efc8 = load i32, i32* @r5, align 4
  %v3_efc8 = load i32, i32* %fp.global-to-local, align 4
  %v4_efc8 = add i32 %v3_efc8, %v2_efc8
  %v5_efc8 = inttoptr i32 %v4_efc8 to i8*
  store i8 %v3_efc4, i8* %v5_efc8, align 1
  %v0_efcc = load i32, i32* @r5, align 4
  %v1_efcc = add i32 %v0_efcc, 1
  store i32 %v1_efcc, i32* @r5, align 4
  %v1_efd0 = load i32, i32* %sb.global-to-local, align 4
  %v9_efd0 = icmp eq i32 %v1_efcc, %v1_efd0
  br i1 %v9_efd0, label %dec_label_pc_efd8, label %dec_label_pc_ef78.dec_label_pc_ef78_crit_edge

dec_label_pc_ef78.dec_label_pc_ef78_crit_edge:    ; preds = %dec_label_pc_ef78
  %v1_ef9c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ef78

dec_label_pc_efd8:                                ; preds = %dec_label_pc_ef78, %dec_label_pc_ef2c
  %v1_efdc = call i32 @function_11018(i32 33)
  store i32 %v3_ef2c, i32* @r4, align 4
  store i32 %v6_ef2c, i32* @r5, align 4
  store i32 %v9_ef2c, i32* @r6, align 4
  ret i32 %v1_efdc

; uselistorder directives
  uselistorder i32 %v2_ef7c, { 1, 0 }
  uselistorder i32 %v2_ef78, { 1, 0, 2 }
}

define i32 @function_effc(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_effc:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_effc = load i32, i32* %r1.global-to-local, align 4
  %v3_f000 = load i32, i32* @r4, align 4
  store i32 %v3_f000, i32* %stack_var_-28, align 4
  %v0_f004 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_f004, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_effc, 1
  br i1 %tmp16, label %dec_label_pc_f0ac, label %dec_label_pc_f00c

dec_label_pc_f00c:                                ; preds = %dec_label_pc_effc
  store i32 ptrtoint (i32* @global_var_1a1f4.97 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1f0.101 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1ec.99 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1e8.95 to i32), i32* %r6.global-to-local, align 4
  %v2_f01c = load i32, i32* @global_var_1a1f4.97, align 4
  store i32 %v2_f01c, i32* %lr.global-to-local, align 4
  %v2_f020 = load i32, i32* @global_var_1a1f0.101, align 4
  store i32 %v2_f020, i32* %r4.global-to-local, align 4
  %v2_f024 = load i32, i32* @global_var_1a1ec.99, align 4
  store i32 %v2_f024, i32* %r0.global-to-local, align 4
  %v2_f028 = load i32, i32* @global_var_1a1e8.95, align 4
  br label %dec_label_pc_f04c

dec_label_pc_f030:                                ; preds = %dec_label_pc_f06c
  %v1_f030 = trunc i32 %v5_f05c to i16
  %v3_f030 = inttoptr i32 %v9_f060 to i16*
  store i16 %v1_f030, i16* %v3_f030, align 2
  %v4_f030 = load i32, i32* %r5.global-to-local, align 4
  %v5_f030 = add i32 %v4_f030, -2
  store i32 %v5_f030, i32* %r5.global-to-local, align 4
  %v0_f034.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f034

dec_label_pc_f034:                                ; preds = %.thread, %dec_label_pc_f030
  %v0_f034 = phi i32 [ %v9_f064, %.thread ], [ %v0_f034.pre, %dec_label_pc_f030 ]
  %v2_f0305 = phi i32 [ %v12_f060, %.thread ], [ %v5_f030, %dec_label_pc_f030 ]
  %tmp17 = icmp slt i32 %v0_f034, 1
  br i1 %tmp17, label %dec_label_pc_f0b4, label %dec_label_pc_f040

dec_label_pc_f040:                                ; preds = %dec_label_pc_f034
  %v0_f038 = load i32, i32* %r0.global-to-local, align 4
  %v0_f040 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f040, i32* %r0.global-to-local, align 4
  %v0_f044 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_f044, i32* %r4.global-to-local, align 4
  %v0_f048 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f048, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %dec_label_pc_f00c, %dec_label_pc_f040
  %v0_f098 = phi i32 [ %v2_f024, %dec_label_pc_f00c ], [ %v0_f040, %dec_label_pc_f040 ]
  %v9_f060 = phi i32 [ %v0_f004, %dec_label_pc_f00c ], [ %v2_f0305, %dec_label_pc_f040 ]
  %v0_f078 = phi i32 [ %v0_effc, %dec_label_pc_f00c ], [ %v0_f034, %dec_label_pc_f040 ]
  %v0_f08c = phi i32 [ %v2_f01c, %dec_label_pc_f00c ], [ %v0_f048, %dec_label_pc_f040 ]
  %v0_f088 = phi i32 [ %v2_f028, %dec_label_pc_f00c ], [ %v0_f038, %dec_label_pc_f040 ]
  %v4_f04c = mul i32 %v0_f088, 2048
  %v5_f04c = xor i32 %v4_f04c, %v0_f088
  %v4_f050 = udiv i32 %v0_f08c, 524288
  %v5_f050 = xor i32 %v4_f050, %v0_f08c
  %v2_f054 = xor i32 %v5_f050, %v5_f04c
  %v4_f05c = udiv i32 %v5_f04c, 256
  %v5_f05c = xor i32 %v2_f054, %v4_f05c
  store i32 %v5_f05c, i32* %r3.global-to-local, align 4
  %v7_f060 = icmp sgt i32 %v0_f078, 3
  br i1 %v7_f060, label %.thread, label %dec_label_pc_f06c

.thread:                                          ; preds = %dec_label_pc_f04c
  %v10_f060 = inttoptr i32 %v9_f060 to i32*
  store i32 %v5_f05c, i32* %v10_f060, align 4
  %v11_f060 = load i32, i32* %r5.global-to-local, align 4
  %v12_f060 = add i32 %v11_f060, 4
  store i32 %v12_f060, i32* %r5.global-to-local, align 4
  %v8_f064 = load i32, i32* %r1.global-to-local, align 4
  %v9_f064 = add i32 %v8_f064, -4
  store i32 %v9_f064, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f034

dec_label_pc_f06c:                                ; preds = %dec_label_pc_f04c
  %v7_f078 = icmp eq i32 %v0_f078, 1
  store i32 %v5_f05c, i32* %r3.global-to-local, align 4
  %v1_f080 = add i32 %v0_f078, -2
  store i32 %v1_f080, i32* %r1.global-to-local, align 4
  br i1 %v7_f078, label %dec_label_pc_f088, label %dec_label_pc_f030

dec_label_pc_f088:                                ; preds = %dec_label_pc_f06c
  store i32 %v5_f05c, i32* %r3.global-to-local, align 4
  %v1_f098 = load i32, i32* %r6.global-to-local, align 4
  %v2_f098 = inttoptr i32 %v1_f098 to i32*
  store i32 %v0_f098, i32* %v2_f098, align 4
  %v0_f09c = load i32, i32* %r4.global-to-local, align 4
  %v1_f09c = load i32, i32* %r7.global-to-local, align 4
  %v2_f09c = inttoptr i32 %v1_f09c to i32*
  store i32 %v0_f09c, i32* %v2_f09c, align 4
  %v0_f0a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_f0a0 = load i32, i32* %r8.global-to-local, align 4
  %v2_f0a0 = inttoptr i32 %v1_f0a0 to i32*
  store i32 %v0_f0a0, i32* %v2_f0a0, align 4
  %v0_f0a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f0a4 = load i32, i32* %sl.global-to-local, align 4
  %v2_f0a4 = inttoptr i32 %v1_f0a4 to i32*
  store i32 %v0_f0a4, i32* %v2_f0a4, align 4
  %v0_f0a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f0a8 = trunc i32 %v0_f0a8 to i8
  %v2_f0a8 = load i32, i32* %r5.global-to-local, align 4
  %v3_f0a8 = inttoptr i32 %v2_f0a8 to i8*
  store i8 %v1_f0a8, i8* %v3_f0a8, align 1
  br label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_effc, %dec_label_pc_f0b4, %dec_label_pc_f088
  %v2_f0ac = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_f0ac, i32* @r4, align 4
  %v1_f0b0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_f0b0

dec_label_pc_f0b4:                                ; preds = %dec_label_pc_f034
  %v0_f0b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f0b4 = load i32, i32* %sl.global-to-local, align 4
  %v2_f0b4 = inttoptr i32 %v1_f0b4 to i32*
  store i32 %v0_f0b4, i32* %v2_f0b4, align 4
  %v0_f0b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_f0b8 = load i32, i32* %r8.global-to-local, align 4
  %v2_f0b8 = inttoptr i32 %v1_f0b8 to i32*
  store i32 %v0_f0b8, i32* %v2_f0b8, align 4
  %v0_f0bc = load i32, i32* %r4.global-to-local, align 4
  %v1_f0bc = load i32, i32* %r7.global-to-local, align 4
  %v2_f0bc = inttoptr i32 %v1_f0bc to i32*
  store i32 %v0_f0bc, i32* %v2_f0bc, align 4
  %v0_f0c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_f0c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f0c0 = inttoptr i32 %v1_f0c0 to i32*
  store i32 %v0_f0c0, i32* %v2_f0c0, align 4
  br label %dec_label_pc_f0ac

; uselistorder directives
  uselistorder i32 %v9_f064, { 1, 0 }
  uselistorder i32 %v12_f060, { 1, 0 }
  uselistorder i32 %v5_f05c, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_f088, { 1, 0 }
  uselistorder i32 %v0_f08c, { 1, 0 }
  uselistorder i32 %v0_f078, { 1, 0, 2 }
  uselistorder i32 %v0_f034, { 1, 0 }
  uselistorder i32 %v0_effc, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 3, 6, 4 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 2, 4, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32* @global_var_1a1e8.95, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1a1e8.95 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1a1ec.99, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1a1f0.101, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1a1f4.97, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_f0ac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f04c, { 1, 0 }
}

define i32 @function_f0d8(i32* %arg1) local_unnamed_addr {
dec_label_pc_f0d8:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_f0d8 = load i32, i32* @r4, align 4
  store i32 %v3_f0d8, i32* %stack_var_-8, align 4
  %v0_f0dc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_f0dc, i32* %r4.global-to-local, align 4
  %v2_f0dc = icmp eq i32 %v0_f0dc, 0
  br i1 %v2_f0dc, label %dec_label_pc_f0f8, label %dec_label_pc_f0e4

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0d8
  %v1_f0e4 = add i32 %v0_f0dc, 4
  %v2_f0e4 = inttoptr i32 %v1_f0e4 to i32*
  %v3_f0e4 = load i32, i32* %v2_f0e4, align 4
  store i32 %v3_f0e4, i32* %r0.global-to-local, align 4
  %v1_f0ec = icmp ne i32 %v3_f0e4, 0
  call void @__pseudo_cond_branch(i1 %v1_f0ec, i32 ptrtoint (i32* @global_var_8ca4.16 to i32))
  %v0_f0f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f0f0, i32* %r0.global-to-local, align 4
  %v1_f0f4 = inttoptr i32 %v0_f0f0 to i32*
  call void @free(i32* %v1_f0f4)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  %v2_f0f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0d8, %dec_label_pc_f0e4
  %v2_f0f8 = phi i32 [ %v3_f0d8, %dec_label_pc_f0d8 ], [ %v2_f0f8.pre, %dec_label_pc_f0e4 ]
  %v1_f0fc = phi i32 [ 0, %dec_label_pc_f0d8 ], [ ptrtoint (i32* @0 to i32), %dec_label_pc_f0e4 ]
  store i32 %v2_f0f8, i32* @r4, align 4
  ret i32 %v1_f0fc

; uselistorder directives
  uselistorder i32 %v0_f0dc, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_f0f8, { 1, 0 }
}

define i32 @function_f100(i32 %arg1) local_unnamed_addr {
dec_label_pc_f100:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp81 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v27_f100 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_f118 = call i32* @calloc(i32 1, i32 8)
  %v4_f118 = ptrtoint i32* %v2_f118 to i32
  store i32 %v4_f118, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_f124 = inttoptr i32 %arg1 to i8*
  %v2_f124 = call i32 @function_116ec(i8* %v1_f124)
  %v2_f12c = ptrtoint i16* %stack_var_-2244 to i32
  %v2_f130 = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_f130, i32* %sb.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_f138 = add i32 %v2_f124, 1
  store i32 %v1_f138, i32* %r0.global-to-local, align 4
  %v2_f13c = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_f13c, i32* %r2.global-to-local, align 4
  store i32 %v2_f130, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_f138, i32* %r3.global-to-local, align 4
  %v2_f178159 = icmp eq i32 %v1_f138, 0
  store i1 %v2_f178159, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_f180160 = add i32 %v2_f13c, -1
  store i32 %v1_f180160, i32* %r1.global-to-local, align 4
  %tmp118161 = icmp slt i32 %v1_f138, 1
  br i1 %tmp118161, label %dec_label_pc_f188, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f100, %bb117
  %v0_f14c164 = phi i32 [ %v1_f16c, %bb117 ], [ 0, %dec_label_pc_f100 ]
  %v1_f158163.off0 = phi i8 [ %extract.t165, %bb117 ], [ 0, %dec_label_pc_f100 ]
  %v2_f18c162 = phi i32 [ %v1_f170, %bb117 ], [ %v2_f13c, %dec_label_pc_f100 ]
  %v1_f14c = load i32, i32* %r5.global-to-local, align 4
  %v2_f14c = add i32 %v1_f14c, %v0_f14c164
  %v3_f14c = inttoptr i32 %v2_f14c to i8*
  %v4_f14c = load i8, i8* %v3_f14c, align 1
  %v6_f14c = zext i8 %v4_f14c to i32
  store i32 %v6_f14c, i32* %r3.global-to-local, align 4
  %v2_f150 = icmp eq i8 %v4_f14c, 0
  store i1 %v2_f150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f150, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_f14c
  %v8_f154 = icmp eq i8 %v4_f14c, 46
  store i1 %v8_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f154, label %.thread, label %.thread8

.thread:                                          ; preds = %dec_label_pc_f14c, %bb
  %v3_f158 = load i32, i32* %r6.global-to-local, align 4
  %v4_f158 = inttoptr i32 %v3_f158 to i8*
  store i8 %v1_f158163.off0, i8* %v4_f158, align 1
  %v0_f15c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f15c.pr, label %.thread10.thread14, label %.thread..thread8_crit_edge

.thread..thread8_crit_edge:                       ; preds = %.thread
  %v1_f15c.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_f15c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_f15c.pre to i8
  br label %.thread8

.thread8:                                         ; preds = %.thread..thread8_crit_edge, %bb
  %v3_f15c = phi i32 [ %v3_f15c.pre, %.thread..thread8_crit_edge ], [ %v2_f18c162, %bb ]
  %v1_f15c.off0 = phi i8 [ %extract.t, %.thread..thread8_crit_edge ], [ %v4_f14c, %bb ]
  %v4_f15c = add i32 %v3_f15c, -1
  %v5_f15c = inttoptr i32 %v4_f15c to i8*
  store i8 %v1_f15c.off0, i8* %v5_f15c, align 1
  %v0_f160.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f160.pr, label %.thread10, label %.thread13

.thread10.thread14:                               ; preds = %.thread
  %v1_f160 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_f160, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb117

.thread10:                                        ; preds = %.thread8
  %v1_f16012 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_f16012, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb117

.thread13:                                        ; preds = %.thread8
  %v1_f168 = load i32, i32* @lr, align 4
  %v2_f168 = urem i32 %v1_f168, 256
  store i32 %v2_f168, i32* %r4.global-to-local, align 4
  br label %bb117

bb117:                                            ; preds = %.thread10, %.thread10.thread14, %.thread13
  %v0_f17c34 = phi i32 [ 0, %.thread10.thread14 ], [ 0, %.thread10 ], [ %v2_f168, %.thread13 ]
  %v0_f16c = load i32, i32* %ip.global-to-local, align 4
  %v1_f16c = add i32 %v0_f16c, 1
  store i32 %v1_f16c, i32* %ip.global-to-local, align 4
  %v0_f170 = load i32, i32* %r2.global-to-local, align 4
  %v1_f170 = add i32 %v0_f170, 1
  store i32 %v1_f170, i32* %r2.global-to-local, align 4
  %v1_f174.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_f174 = sub i32 %v1_f174.pre, %v1_f16c
  store i32 %v2_f174, i32* %r3.global-to-local, align 4
  %v2_f178 = icmp eq i32 %v2_f174, 0
  store i1 %v2_f178, i1* %cpsr_z.global-to-local, align 1
  %v1_f17c = add nuw nsw i32 %v0_f17c34, 1
  store i32 %v1_f17c, i32* @lr, align 4
  store i32 %v0_f170, i32* %r1.global-to-local, align 4
  %tmp118 = icmp slt i32 %v2_f174, 1
  %extract.t165 = trunc i32 %v0_f17c34 to i8
  br i1 %tmp118, label %dec_label_pc_f188, label %dec_label_pc_f14c

dec_label_pc_f188:                                ; preds = %bb117, %dec_label_pc_f100
  %v1_f180.lcssa = phi i32 [ %v1_f180160, %dec_label_pc_f100 ], [ %v0_f170, %bb117 ]
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_f18c = inttoptr i32 %v1_f180.lcssa to i8*
  store i8 0, i8* %v4_f18c, align 1
  store i32 %v2_f130, i32* %r0.global-to-local, align 4
  %v1_f194 = bitcast i32* %stack_var_-2232 to i8*
  %v2_f194 = call i32 @function_116ec(i8* %v1_f194)
  %v2_f198 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_f198, i32* %r1.global-to-local, align 4
  %v1_f19c = load i32, i32* %sb.global-to-local, align 4
  %v2_f19c = add i32 %v1_f19c, %v2_f194
  store i32 %v2_f19c, i32* %r5.global-to-local, align 4
  %v0_f1a4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f1a4, i32* %stack_var_-68, align 4
  store i32 %v2_f130, i32* %r0.global-to-local, align 4
  %v2_f1b4 = call i32 @function_116ec(i8* %v1_f194)
  %v1_f1b8 = add i32 %v2_f1b4, 17
  store i32 %v1_f1b8, i32* %r0.global-to-local, align 4
  %v0_f1c0 = call i32 @function_ee68()
  %v1_f1c0 = sext i32 %v0_f1c0 to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_f1cc = mul nuw nsw i64 %v1_f1c0, 2147516417
  %v6_f1cc = udiv i64 %v5_f1cc, 4294967296
  %v7_f1cc = trunc i64 %v6_f1cc to i32
  %v8_f1cc = trunc i64 %v5_f1cc to i32
  store i32 %v8_f1cc, i32* @lr, align 4
  store i32 %v7_f1cc, i32* %r2.global-to-local, align 4
  %v5_f1d05 = udiv i64 %v5_f1cc, 140737488355328
  %v5_f1d0 = trunc i64 %v5_f1d05 to i32
  %v6_f1d0 = add i32 %v5_f1d0, %v0_f1c0
  store i32 16, i32* @r1, align 4
  %v6_f1dc = urem i32 %v6_f1d0, 65536
  store i32 %v6_f1dc, i32* %ip.global-to-local, align 4
  %v2_f1e4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_f1e4, i32* @r0, align 4
  %v5_f1e8 = trunc i32 %v6_f1d0 to i16
  %v0_f1ec = call i32 @function_11780()
  store i32 %v0_f1ec, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_f21c = load i32, i32* %r5.global-to-local, align 4
  %v1_f21c = add i32 %v0_f21c, 1
  store i32 %v1_f21c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_f1e8, i16* %stack_var_-2244, align 2
  %v4_f230 = inttoptr i32 %v1_f21c to i16*
  store i16 256, i16* %v4_f230, align 2
  %v0_f234 = load i32, i32* %r3.global-to-local, align 4
  %v1_f234 = trunc i32 %v0_f234 to i16
  %v2_f234 = load i32, i32* %r2.global-to-local, align 4
  %v3_f234 = add i32 %v2_f234, 2
  %v4_f234 = inttoptr i32 %v3_f234 to i16*
  store i16 %v1_f234, i16* %v4_f234, align 2
  store i32 -1, i32* %r6.global-to-local, align 4
  %v4_f290 = bitcast i16* %stack_var_-2244 to i32*
  %v2_f2cc = ptrtoint i32* %stack_var_-196 to i32
  %v2_f2f4 = ptrtoint i32* %stack_var_-40 to i32
  %v2_f320 = ptrtoint i32* %stack_var_-52 to i32
  %v2_f364 = ptrtoint i16* %stack_var_-4292 to i32
  %v7_f380 = bitcast i16* %stack_var_-4292 to i32*
  %v2_f3f8 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_f400 = bitcast i32* %stack_var_-4280 to i8*
  %v4_f424 = zext i16 %tmp81 to i32
  %v2_f428 = icmp eq i16 %tmp81, 0
  %v3_f2d8153 = add i32 %v2_f2cc, 4
  %v4_f2d8154 = inttoptr i32 %v3_f2d8153 to i32*
  br label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %dec_label_pc_f3ac, %dec_label_pc_f188
  %v1_f244 = phi i32 [ -1, %dec_label_pc_f188 ], [ %v0_f240.pre, %dec_label_pc_f3ac ]
  %storemerge = phi i32 [ 1, %dec_label_pc_f188 ], [ %v1_f3ac, %dec_label_pc_f3ac ]
  store i32 %storemerge, i32* %r8.global-to-local, align 4
  %v2_f240 = icmp eq i32 %v1_f244, -1
  store i1 %v2_f240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f240, label %bb121, label %bb120

bb120:                                            ; preds = %dec_label_pc_f240
  store i32 %v1_f244, i32* %r0.global-to-local, align 4
  br label %bb121

bb121:                                            ; preds = %dec_label_pc_f240, %bb120
  %v1_f248 = xor i1 %v2_f240, true
  call void @__pseudo_cond_branch(i1 %v1_f248, i32 ptrtoint (i32* @global_var_8c8c.89 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f258 = call i32 @socket(i32 2, i32 0, i32 0)
  store i32 %v3_f258, i32* %r0.global-to-local, align 4
  %v2_f25c = icmp eq i32 %v3_f258, -1
  store i1 %v2_f25c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f258, i32* %r6.global-to-local, align 4
  br i1 %v2_f25c, label %dec_label_pc_f3ec, label %dec_label_pc_f268

dec_label_pc_f268:                                ; preds = %bb121
  store i32 %v2_f1e4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_f274 = call i32 @connect(i32 %v2_f1e4, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  store i32 %v6_f274, i32* %r0.global-to-local, align 4
  %v2_f278 = icmp eq i32 %v6_f274, -1
  store i1 %v2_f278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f278, label %dec_label_pc_f3b4, label %dec_label_pc_f280

dec_label_pc_f280:                                ; preds = %dec_label_pc_f268
  %v0_f280 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f280, i32* %r0.global-to-local, align 4
  store i32 %v2_f12c, i32* %r1.global-to-local, align 4
  store i32 %v1_f1b8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f290 = call i32 @send(i32 %v0_f280, i32* %v4_f290, i32 %v1_f1b8, i32 16384)
  store i32 %v5_f290, i32* %r0.global-to-local, align 4
  %v2_f294 = icmp eq i32 %v5_f290, -1
  store i1 %v2_f294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f294, label %dec_label_pc_f3b4, label %dec_label_pc_f29c

dec_label_pc_f29c:                                ; preds = %dec_label_pc_f280
  %v0_f29c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f29c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_f2a8 = call i32 (i32, i32, ...) @fcntl(i32 3, i32 %v0_f29c)
  store i32 %v0_f29c, i32* %r1.global-to-local, align 4
  %v1_f2b0 = or i32 %v2_f2a8, 2048
  store i32 %v1_f2b0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_f2b8 = call i32 (i32, i32, ...) @fcntl(i32 4, i32 %v0_f29c)
  store i32 %v2_f2b8, i32* %r0.global-to-local, align 4
  store i32 %v2_f198, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_f2cc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %v4_f2d8154, align 4
  %v0_f2dc155 = load i32, i32* %r3.global-to-local, align 4
  %v1_f2dc156 = add i32 %v0_f2dc155, 4
  store i32 %v1_f2dc156, i32* %r3.global-to-local, align 4
  %v7_f2e0157 = icmp eq i32 %v1_f2dc156, 128
  br i1 %v7_f2e0157, label %dec_label_pc_f2e8, label %dec_label_pc_f2d4.dec_label_pc_f2d4_crit_edge

dec_label_pc_f2d4.dec_label_pc_f2d4_crit_edge:    ; preds = %dec_label_pc_f29c, %dec_label_pc_f2d4.dec_label_pc_f2d4_crit_edge
  %v1_f2dc158 = phi i32 [ %v1_f2dc, %dec_label_pc_f2d4.dec_label_pc_f2d4_crit_edge ], [ %v1_f2dc156, %dec_label_pc_f29c ]
  %v2_f2d8.pre = load i32, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_f2d8 = add i32 %v1_f2dc158, %v2_f2d8.pre
  %v4_f2d8 = inttoptr i32 %v3_f2d8 to i32*
  store i32 0, i32* %v4_f2d8, align 4
  %v0_f2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_f2dc = add i32 %v0_f2dc, 4
  store i32 %v1_f2dc, i32* %r3.global-to-local, align 4
  %v7_f2e0 = icmp eq i32 %v1_f2dc, 128
  br i1 %v7_f2e0, label %dec_label_pc_f2e8, label %dec_label_pc_f2d4.dec_label_pc_f2d4_crit_edge

dec_label_pc_f2e8:                                ; preds = %dec_label_pc_f2d4.dec_label_pc_f2d4_crit_edge, %dec_label_pc_f29c
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f2e8 = load i32, i32* %r6.global-to-local, align 4
  %v3_f2e8 = udiv i32 %v0_f2e8, 32
  %v3_f2f0 = mul nuw nsw i32 %v3_f2e8, 4
  store i32 %v3_f2f0, i32* %r3.global-to-local, align 4
  %v2_f2f8 = add i32 %v3_f2f0, %v2_f2f4
  store i32 %v2_f2f8, i32* %r5.global-to-local, align 4
  %v1_f2fc = add i32 %v2_f2f8, -156
  %v2_f2fc = inttoptr i32 %v1_f2fc to i32*
  %v3_f2fc = load i32, i32* %v2_f2fc, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_f304 = urem i32 %v0_f2e8, 32
  store i32 %v1_f304, i32* %r7.global-to-local, align 4
  %v7_f308 = shl i32 1, %v1_f304
  %v8_f308 = or i32 %v3_f2fc, %v7_f308
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_f308, i32* %v2_f2fc, align 4
  %v0_f318 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f318, i32* %stack_var_-52, align 4
  store i32 %v2_f320, i32* @lr, align 4
  store i32 %v2_f198, i32* %ip.global-to-local, align 4
  %v0_f328 = load i32, i32* %r6.global-to-local, align 4
  %v1_f328 = load i32, i32* %r3.global-to-local, align 4
  %v2_f328 = add i32 %v1_f328, %v0_f328
  store i32 %v2_f328, i32* %r0.global-to-local, align 4
  %v0_f330 = load i32, i32* %r4.global-to-local, align 4
  %v1_f330 = inttoptr i32 %v0_f330 to %_TYPEDEF_fd_set*
  store i32 %v0_f330, i32* %r2.global-to-local, align 4
  store i32 %v0_f330, i32* %r3.global-to-local, align 4
  %v11_f33c = call i32 @select(i32 %v2_f328, %_TYPEDEF_fd_set* %v1_f330, %_TYPEDEF_fd_set* %v1_f330, %_TYPEDEF_fd_set* %v1_f330, %timeval* bitcast (i32* @0 to %timeval*))
  store i32 %v11_f33c, i32* %r0.global-to-local, align 4
  %v2_f340 = icmp eq i32 %v11_f33c, -1
  store i1 %v2_f340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f340, label %dec_label_pc_f3c4, label %dec_label_pc_f348

dec_label_pc_f348:                                ; preds = %dec_label_pc_f2e8
  %v1_f348 = load i32, i32* %r4.global-to-local, align 4
  %v9_f348 = icmp eq i32 %v11_f33c, %v1_f348
  store i1 %v9_f348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f348, label %dec_label_pc_f3a4, label %dec_label_pc_f350

dec_label_pc_f350:                                ; preds = %dec_label_pc_f348
  %v0_f350 = load i32, i32* %r5.global-to-local, align 4
  %v1_f350 = add i32 %v0_f350, -156
  %v2_f350 = inttoptr i32 %v1_f350 to i32*
  %v3_f350 = load i32, i32* %v2_f350, align 4
  %v1_f354 = load i32, i32* %r7.global-to-local, align 4
  %v6_f354 = ashr i32 %v3_f350, %v1_f354
  store i32 %v6_f354, i32* %r3.global-to-local, align 4
  %v1_f358 = urem i32 %v6_f354, 2
  %v2_f358 = icmp eq i32 %v1_f358, 0
  store i1 %v2_f358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f358, label %dec_label_pc_f3c4, label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %dec_label_pc_f350
  store i32 %v2_f364, i32* %r5.global-to-local, align 4
  store i32 %v2_f364, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f374 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f374, i32* %r0.global-to-local, align 4
  %v4_f37c = inttoptr i32 %v1_f348 to %sockaddr*
  %v9_f380 = inttoptr i32 %v1_f348 to i32*
  %v10_f380 = call i32 @recvfrom(i32 %v0_f374, i32* %v7_f380, i32 2048, i32 16384, %sockaddr* %v4_f37c, i32* %v9_f380)
  store i32 %v10_f380, i32* %r4.global-to-local, align 4
  %v0_f388 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f388, i32* %r0.global-to-local, align 4
  %v1_f38c = inttoptr i32 %v0_f388 to i8*
  %v2_f38c = call i32 @function_116ec(i8* %v1_f38c)
  %v1_f390 = add i32 %v2_f38c, 17
  store i32 %v1_f390, i32* %r0.global-to-local, align 4
  %v0_f394 = load i32, i32* %r4.global-to-local, align 4
  %v3_f394 = icmp ult i32 %v0_f394, %v1_f390
  %v9_f394 = icmp eq i32 %v0_f394, %v1_f390
  store i1 %v9_f394, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* %r4.global-to-local, align 4
  br i1 %v3_f394, label %dec_label_pc_f3a4, label %dec_label_pc_f3f8

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f360, %dec_label_pc_f3f8, %dec_label_pc_f424, %dec_label_pc_f348, %dec_label_pc_f3ec
  %v0_f3a4 = load i32, i32* %r8.global-to-local, align 4
  %v7_f3a4 = icmp eq i32 %v0_f3a4, 5
  store i1 %v7_f3a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a4, label %dec_label_pc_f3c4, label %dec_label_pc_f3ac

dec_label_pc_f3ac:                                ; preds = %dec_label_pc_f3b4, %dec_label_pc_f3a4
  %v0_f3ac = phi i32 [ %v0_f3bc, %dec_label_pc_f3b4 ], [ %v0_f3a4, %dec_label_pc_f3a4 ]
  %v1_f3ac = add i32 %v0_f3ac, 1
  %v0_f240.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f240

dec_label_pc_f3b4:                                ; preds = %dec_label_pc_f280, %dec_label_pc_f268
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f3b8 = call i32 @sleep(i32 1)
  store i32 %v1_f3b8, i32* %r0.global-to-local, align 4
  %v0_f3bc = load i32, i32* %r8.global-to-local, align 4
  %v7_f3bc = icmp eq i32 %v0_f3bc, 5
  store i1 %v7_f3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3bc, label %dec_label_pc_f3c4, label %dec_label_pc_f3ac

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3b4, %dec_label_pc_f3a4, %dec_label_pc_f350, %dec_label_pc_f2e8, %dec_label_pc_f430, %dec_label_pc_f43c.backedge
  %v0_f3c4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f3c4, i32* %r0.global-to-local, align 4
  %v1_f3c8 = call i32 @close(i32 %v0_f3c4)
  store i32 %v1_f3c8, i32* %r0.global-to-local, align 4
  %v0_f3cc = load i32, i32* %fp.global-to-local, align 4
  %v1_f3cc = inttoptr i32 %v0_f3cc to i8*
  %v2_f3cc = load i8, i8* %v1_f3cc, align 1
  %v3_f3cc = zext i8 %v2_f3cc to i32
  store i32 %v3_f3cc, i32* %r4.global-to-local, align 4
  %v2_f3d0 = icmp eq i8 %v2_f3cc, 0
  store i1 %v2_f3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3d0, label %dec_label_pc_f514, label %dec_label_pc_f3d8

dec_label_pc_f3d8:                                ; preds = %dec_label_pc_f3c4, %dec_label_pc_f514
  %v0_f3d8 = phi i32 [ %v0_f3cc, %dec_label_pc_f3c4 ], [ %v0_f528, %dec_label_pc_f514 ]
  store i32 %v0_f3d8, i32* %r0.global-to-local, align 4
  store i32 %v27_f100, i32* @lr, align 4
  ret i32 %v0_f3d8

dec_label_pc_f3ec:                                ; preds = %bb121
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f3f0 = call i32 @sleep(i32 1)
  store i32 %v1_f3f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f3a4

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f360
  store i32 %v2_f3f8, i32* %sb.global-to-local, align 4
  store i32 %v2_f3f8, i32* %r0.global-to-local, align 4
  %v2_f400 = call i32 @function_116ec(i8* %v1_f400)
  %v4_f40c = load i16, i16* %stack_var_-4292, align 2
  %v5_f40c = sext i16 %v4_f40c to i32
  store i32 %v5_f40c, i32* %r3.global-to-local, align 4
  store i32 %v6_f1d0, i32* %r1.global-to-local, align 4
  %v1_f414 = load i32, i32* %sb.global-to-local, align 4
  %v9_f418 = icmp eq i16 %v4_f40c, %v5_f1e8
  store i1 %v9_f418, i1* %cpsr_z.global-to-local, align 1
  %v2_f414 = add i32 %v2_f400, 5
  %v1_f41c = add i32 %v2_f414, %v1_f414
  store i32 %v1_f41c, i32* %r0.global-to-local, align 4
  br i1 %v9_f418, label %dec_label_pc_f424, label %dec_label_pc_f3a4

dec_label_pc_f424:                                ; preds = %dec_label_pc_f3f8
  store i32 %v4_f424, i32* %r3.global-to-local, align 4
  store i1 %v2_f428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f428, label %dec_label_pc_f3a4, label %dec_label_pc_f430

dec_label_pc_f430:                                ; preds = %dec_label_pc_f424
  %div = udiv i16 %tmp81, 256
  %v3_f430 = zext i16 %div to i32
  store i32 %v3_f430, i32* %r2.global-to-local, align 4
  %v1_f434 = mul nuw nsw i32 %v4_f424, 256
  %v4_f438 = and i32 %v1_f434, 65280
  %v5_f438 = or i32 %v4_f438, %v3_f430
  %v1_f43c147 = add nsw i32 %v5_f438, -1
  %v3_f440148 = mul i32 %v1_f43c147, 65536
  store i32 %v3_f440148, i32* %r3.global-to-local, align 4
  %v7_f444149 = icmp eq i32 %v3_f440148, -65536
  store i1 %v7_f444149, i1* %cpsr_z.global-to-local, align 1
  %v3_f448150 = urem i32 %v1_f43c147, 65536
  store i32 %v3_f448150, i32* %r8.global-to-local, align 4
  br i1 %v7_f444149, label %dec_label_pc_f3c4, label %dec_label_pc_f450

dec_label_pc_f450:                                ; preds = %dec_label_pc_f430, %dec_label_pc_f43c.backedge
  %v3_f448152 = phi i32 [ %v3_f448, %dec_label_pc_f43c.backedge ], [ %v3_f448150, %dec_label_pc_f430 ]
  %v0_f4a0151 = phi i32 [ %storemerge30, %dec_label_pc_f43c.backedge ], [ %v1_f41c, %dec_label_pc_f430 ]
  store i32 %v0_f4a0151, i32* %r3.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_f45c19 = inttoptr i32 %v0_f4a0151 to i8*
  %v2_f45c20 = load i8, i8* %v1_f45c19, align 1
  %v3_f45c21 = zext i8 %v2_f45c20 to i32
  store i32 %v3_f45c21, i32* %r2.global-to-local, align 4
  %v2_f46022 = icmp eq i8 %v2_f45c20, 0
  store i1 %v2_f46022, i1* %cpsr_z.global-to-local, align 1
  %v3_f46423 = mul nuw nsw i32 %v3_f45c21, 256
  store i32 %v3_f46423, i32* %r1.global-to-local, align 4
  br i1 %v2_f46022, label %dec_label_pc_f498.thread131, label %dec_label_pc_f46c.preheader

dec_label_pc_f498.thread131:                      ; preds = %dec_label_pc_f450
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %bb123

dec_label_pc_f46c.preheader:                      ; preds = %dec_label_pc_f450, %dec_label_pc_f45c.backedge
  %v1_f538 = phi i32 [ %v1_f53852, %dec_label_pc_f45c.backedge ], [ 1, %dec_label_pc_f450 ]
  %v0_f53050 = phi i32 [ %v0_f530, %dec_label_pc_f45c.backedge ], [ 0, %dec_label_pc_f450 ]
  %v0_f47848 = phi i32 [ %v3_f464, %dec_label_pc_f45c.backedge ], [ %v3_f46423, %dec_label_pc_f450 ]
  %v0_f47446 = phi i32 [ %v1_f534, %dec_label_pc_f45c.backedge ], [ %v0_f4a0151, %dec_label_pc_f450 ]
  %v0_f46c44 = phi i32 [ %v3_f45c, %dec_label_pc_f45c.backedge ], [ %v3_f45c21, %dec_label_pc_f450 ]
  br label %dec_label_pc_f46c

dec_label_pc_f46c:                                ; preds = %dec_label_pc_f46c.preheader, %dec_label_pc_f474
  %v0_f530 = phi i32 [ %v0_f53050, %dec_label_pc_f46c.preheader ], [ 1, %dec_label_pc_f474 ]
  %v0_f478 = phi i32 [ %v0_f47848, %dec_label_pc_f46c.preheader ], [ %v3_f490, %dec_label_pc_f474 ]
  %v0_f534 = phi i32 [ %v0_f47446, %dec_label_pc_f46c.preheader ], [ %v2_f480, %dec_label_pc_f474 ]
  %v0_f46c = phi i32 [ %v0_f46c44, %dec_label_pc_f46c.preheader ], [ %v3_f484, %dec_label_pc_f474 ]
  %v7_f46c = icmp eq i32 %v0_f46c, 191
  store i1 %v7_f46c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_f46c, 192
  br i1 %tmp, label %dec_label_pc_f530, label %dec_label_pc_f474

dec_label_pc_f474:                                ; preds = %dec_label_pc_f46c
  %v1_f474 = add i32 %v0_f534, 1
  %v2_f474 = inttoptr i32 %v1_f474 to i8*
  %v3_f474 = load i8, i8* %v2_f474, align 1
  %v4_f474 = zext i8 %v3_f474 to i32
  %v2_f478 = or i32 %v4_f474, -49152
  %v0_f480 = load i32, i32* %r5.global-to-local, align 4
  %v1_f47c = add i32 %v0_f480, %v0_f478
  %v2_f480 = add i32 %v1_f47c, %v2_f478
  store i32 %v2_f480, i32* %r3.global-to-local, align 4
  %v1_f484 = inttoptr i32 %v2_f480 to i8*
  %v2_f484 = load i8, i8* %v1_f484, align 1
  %v3_f484 = zext i8 %v2_f484 to i32
  store i32 %v3_f484, i32* %r2.global-to-local, align 4
  %v2_f488 = icmp eq i8 %v2_f484, 0
  store i1 %v2_f488, i1* %cpsr_z.global-to-local, align 1
  %v3_f490 = mul nuw nsw i32 %v3_f484, 256
  store i32 %v3_f490, i32* %r1.global-to-local, align 4
  br i1 %v2_f488, label %dec_label_pc_f498.thread, label %dec_label_pc_f46c

dec_label_pc_f498.thread:                         ; preds = %dec_label_pc_f474
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb122

dec_label_pc_f498:                                ; preds = %dec_label_pc_f45c.backedge
  %v7_f498 = icmp eq i32 %v0_f530, 1
  store i1 %v7_f498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f498, label %bb122, label %bb123

bb122:                                            ; preds = %dec_label_pc_f498.thread, %dec_label_pc_f498
  %v1_f49c130 = phi i32 [ %v1_f538, %dec_label_pc_f498.thread ], [ %v1_f53852, %dec_label_pc_f498 ]
  %v2_f49c = add i32 %v1_f49c130, 1
  store i32 %v2_f49c, i32* %ip.global-to-local, align 4
  br label %bb123

bb123:                                            ; preds = %dec_label_pc_f498.thread131, %dec_label_pc_f498, %bb122
  %v1_f4a0 = phi i32 [ %v1_f53852, %dec_label_pc_f498 ], [ %v2_f49c, %bb122 ], [ 1, %dec_label_pc_f498.thread131 ]
  %v2_f4a0 = add i32 %v1_f4a0, %v0_f4a0151
  store i32 %v2_f4a0, i32* %r4.global-to-local, align 4
  %v3_f4a4 = inttoptr i32 %v2_f4a0 to i8*
  %v4_f4a4 = load i8, i8* %v3_f4a4, align 1
  %v6_f4a4 = zext i8 %v4_f4a4 to i32
  store i32 %v6_f4a4, i32* %r3.global-to-local, align 4
  %v1_f4a8 = add i32 %v2_f4a0, 1
  %v2_f4a8 = inttoptr i32 %v1_f4a8 to i8*
  %v3_f4a8 = load i8, i8* %v2_f4a8, align 1
  %v4_f4a8 = zext i8 %v3_f4a8 to i32
  store i32 %v4_f4a8, i32* %r2.global-to-local, align 4
  %v4_f4ac = mul nuw nsw i32 %v4_f4a8, 256
  %v5_f4ac = or i32 %v4_f4ac, %v6_f4a4
  store i32 %v5_f4ac, i32* %r3.global-to-local, align 4
  %v7_f4b0 = icmp eq i32 %v5_f4ac, 256
  store i1 %v7_f4b0, i1* %cpsr_z.global-to-local, align 1
  %v1_f4b4 = add i32 %v2_f4a0, 10
  store i32 %v1_f4b4, i32* %r7.global-to-local, align 4
  br i1 %v7_f4b0, label %dec_label_pc_f550, label %dec_label_pc_f4bc

dec_label_pc_f4bc:                                ; preds = %dec_label_pc_f550, %bb123
  store i32 %v1_f4b4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f4c825 = inttoptr i32 %v1_f4b4 to i8*
  %v2_f4c826 = load i8, i8* %v1_f4c825, align 1
  %v3_f4c827 = zext i8 %v2_f4c826 to i32
  store i32 %v3_f4c827, i32* %r2.global-to-local, align 4
  %v2_f4cc28 = icmp eq i8 %v2_f4c826, 0
  store i1 %v2_f4cc28, i1* %cpsr_z.global-to-local, align 1
  %v3_f4d029 = mul nuw nsw i32 %v3_f4c827, 256
  store i32 %v3_f4d029, i32* %r1.global-to-local, align 4
  br i1 %v2_f4cc28, label %dec_label_pc_f504.thread137, label %dec_label_pc_f4d8.preheader

dec_label_pc_f504.thread137:                      ; preds = %dec_label_pc_f4bc
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %bb125

dec_label_pc_f4d8.preheader:                      ; preds = %dec_label_pc_f4bc, %dec_label_pc_f4c8.backedge
  %v1_f548 = phi i32 [ %v1_f54867, %dec_label_pc_f4c8.backedge ], [ 1, %dec_label_pc_f4bc ]
  %v0_f54065 = phi i32 [ %v0_f540, %dec_label_pc_f4c8.backedge ], [ 0, %dec_label_pc_f4bc ]
  %v0_f4e463 = phi i32 [ %v3_f4d0, %dec_label_pc_f4c8.backedge ], [ %v3_f4d029, %dec_label_pc_f4bc ]
  %v0_f4e061 = phi i32 [ %v1_f544, %dec_label_pc_f4c8.backedge ], [ %v1_f4b4, %dec_label_pc_f4bc ]
  %v0_f4d859 = phi i32 [ %v3_f4c8, %dec_label_pc_f4c8.backedge ], [ %v3_f4c827, %dec_label_pc_f4bc ]
  br label %dec_label_pc_f4d8

dec_label_pc_f4d8:                                ; preds = %dec_label_pc_f4d8.preheader, %dec_label_pc_f4e0
  %v0_f540 = phi i32 [ %v0_f54065, %dec_label_pc_f4d8.preheader ], [ 1, %dec_label_pc_f4e0 ]
  %v0_f4e4 = phi i32 [ %v0_f4e463, %dec_label_pc_f4d8.preheader ], [ %v3_f4fc, %dec_label_pc_f4e0 ]
  %v0_f544 = phi i32 [ %v0_f4e061, %dec_label_pc_f4d8.preheader ], [ %v2_f4ec, %dec_label_pc_f4e0 ]
  %v0_f4d8 = phi i32 [ %v0_f4d859, %dec_label_pc_f4d8.preheader ], [ %v3_f4f0, %dec_label_pc_f4e0 ]
  %v7_f4d8 = icmp eq i32 %v0_f4d8, 191
  store i1 %v7_f4d8, i1* %cpsr_z.global-to-local, align 1
  %tmp172 = icmp ult i32 %v0_f4d8, 192
  br i1 %tmp172, label %dec_label_pc_f540, label %dec_label_pc_f4e0

dec_label_pc_f4e0:                                ; preds = %dec_label_pc_f4d8
  %v1_f4e0 = add i32 %v0_f544, 1
  %v2_f4e0 = inttoptr i32 %v1_f4e0 to i8*
  %v3_f4e0 = load i8, i8* %v2_f4e0, align 1
  %v4_f4e0 = zext i8 %v3_f4e0 to i32
  %v2_f4e4 = or i32 %v4_f4e0, -49152
  %v0_f4ec = load i32, i32* %r5.global-to-local, align 4
  %v1_f4e8 = add i32 %v0_f4ec, %v0_f4e4
  %v2_f4ec = add i32 %v1_f4e8, %v2_f4e4
  store i32 %v2_f4ec, i32* %r3.global-to-local, align 4
  %v1_f4f0 = inttoptr i32 %v2_f4ec to i8*
  %v2_f4f0 = load i8, i8* %v1_f4f0, align 1
  %v3_f4f0 = zext i8 %v2_f4f0 to i32
  store i32 %v3_f4f0, i32* %r2.global-to-local, align 4
  %v2_f4f4 = icmp eq i8 %v2_f4f0, 0
  store i1 %v2_f4f4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_f4fc = mul nuw nsw i32 %v3_f4f0, 256
  store i32 %v3_f4fc, i32* %r1.global-to-local, align 4
  br i1 %v2_f4f4, label %dec_label_pc_f504.thread, label %dec_label_pc_f4d8

dec_label_pc_f504.thread:                         ; preds = %dec_label_pc_f4e0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb124

dec_label_pc_f504:                                ; preds = %dec_label_pc_f4c8.backedge
  %v7_f504 = icmp eq i32 %v0_f540, 1
  store i1 %v7_f504, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f504, label %bb124, label %bb125

bb124:                                            ; preds = %dec_label_pc_f504.thread, %dec_label_pc_f504
  %v1_f508136 = phi i32 [ %v1_f548, %dec_label_pc_f504.thread ], [ %v1_f54867, %dec_label_pc_f504 ]
  %v2_f508 = add i32 %v1_f508136, 1
  store i32 %v2_f508, i32* %r0.global-to-local, align 4
  br label %bb125

bb125:                                            ; preds = %dec_label_pc_f504.thread137, %dec_label_pc_f564, %dec_label_pc_f504, %bb124
  %v1_f50c = phi i32 [ %v5_f57c, %dec_label_pc_f564 ], [ %v1_f54867, %dec_label_pc_f504 ], [ %v2_f508, %bb124 ], [ 1, %dec_label_pc_f504.thread137 ]
  %v2_f50c = add i32 %v1_f50c, %v1_f4b4
  br label %dec_label_pc_f43c.backedge

dec_label_pc_f43c.backedge:                       ; preds = %bb125, %dec_label_pc_f588
  %v0_f43c.pre = phi i32 [ %v3_f448152, %bb125 ], [ %v0_f43c.pre.pre, %dec_label_pc_f588 ]
  %storemerge30 = phi i32 [ %v2_f50c, %bb125 ], [ %v2_f600, %dec_label_pc_f588 ]
  store i32 %storemerge30, i32* %r0.global-to-local, align 4
  %v1_f43c = add i32 %v0_f43c.pre, -1
  %v3_f440 = mul i32 %v1_f43c, 65536
  store i32 %v3_f440, i32* %r3.global-to-local, align 4
  %v7_f444 = icmp eq i32 %v3_f440, -65536
  store i1 %v7_f444, i1* %cpsr_z.global-to-local, align 1
  %v3_f448 = urem i32 %v1_f43c, 65536
  store i32 %v3_f448, i32* %r8.global-to-local, align 4
  br i1 %v7_f444, label %dec_label_pc_f3c4, label %dec_label_pc_f450

dec_label_pc_f514:                                ; preds = %dec_label_pc_f3c4
  %v1_f514 = add i32 %v0_f3cc, 4
  %v2_f514 = inttoptr i32 %v1_f514 to i32*
  %v3_f514 = load i32, i32* %v2_f514, align 4
  store i32 %v3_f514, i32* %r0.global-to-local, align 4
  %v2_f518 = icmp eq i32 %v3_f514, 0
  store i1 %v2_f518, i1* %cpsr_z.global-to-local, align 1
  %v1_f51c = xor i1 %v2_f518, true
  call void @__pseudo_cond_branch(i1 %v1_f51c, i32 ptrtoint (i32* @global_var_8ca4.16 to i32))
  %v0_f520 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_f520, i32* %r0.global-to-local, align 4
  %v1_f524 = inttoptr i32 %v0_f520 to i32*
  call void @free(i32* %v1_f524)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  %v0_f528 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f528, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_f3d8

dec_label_pc_f530:                                ; preds = %dec_label_pc_f46c
  %v2_f530 = icmp eq i32 %v0_f530, 0
  store i1 %v2_f530, i1* %cpsr_z.global-to-local, align 1
  %v1_f534 = add i32 %v0_f534, 1
  store i32 %v1_f534, i32* %r3.global-to-local, align 4
  br i1 %v2_f530, label %bb126, label %dec_label_pc_f45c.backedge

dec_label_pc_f45c.backedge:                       ; preds = %dec_label_pc_f530, %bb126
  %v1_f53852 = phi i32 [ %v1_f538, %dec_label_pc_f530 ], [ %v2_f538, %bb126 ]
  %v1_f45c = inttoptr i32 %v1_f534 to i8*
  %v2_f45c = load i8, i8* %v1_f45c, align 1
  %v3_f45c = zext i8 %v2_f45c to i32
  store i32 %v3_f45c, i32* %r2.global-to-local, align 4
  %v2_f460 = icmp eq i8 %v2_f45c, 0
  store i1 %v2_f460, i1* %cpsr_z.global-to-local, align 1
  %v3_f464 = mul nuw nsw i32 %v3_f45c, 256
  store i32 %v3_f464, i32* %r1.global-to-local, align 4
  br i1 %v2_f460, label %dec_label_pc_f498, label %dec_label_pc_f46c.preheader

bb126:                                            ; preds = %dec_label_pc_f530
  %v2_f538 = add i32 %v1_f538, 1
  store i32 %v2_f538, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f45c.backedge

dec_label_pc_f540:                                ; preds = %dec_label_pc_f4d8
  %v2_f540 = icmp eq i32 %v0_f540, 0
  store i1 %v2_f540, i1* %cpsr_z.global-to-local, align 1
  %v1_f544 = add i32 %v0_f544, 1
  store i32 %v1_f544, i32* %r3.global-to-local, align 4
  br i1 %v2_f540, label %bb127, label %dec_label_pc_f4c8.backedge

dec_label_pc_f4c8.backedge:                       ; preds = %dec_label_pc_f540, %bb127
  %v1_f54867 = phi i32 [ %v1_f548, %dec_label_pc_f540 ], [ %v2_f548, %bb127 ]
  %v1_f4c8 = inttoptr i32 %v1_f544 to i8*
  %v2_f4c8 = load i8, i8* %v1_f4c8, align 1
  %v3_f4c8 = zext i8 %v2_f4c8 to i32
  store i32 %v3_f4c8, i32* %r2.global-to-local, align 4
  %v2_f4cc = icmp eq i8 %v2_f4c8, 0
  store i1 %v2_f4cc, i1* %cpsr_z.global-to-local, align 1
  %v3_f4d0 = mul nuw nsw i32 %v3_f4c8, 256
  store i32 %v3_f4d0, i32* %r1.global-to-local, align 4
  br i1 %v2_f4cc, label %dec_label_pc_f504, label %dec_label_pc_f4d8.preheader

bb127:                                            ; preds = %dec_label_pc_f540
  %v2_f548 = add i32 %v1_f548, 1
  store i32 %v2_f548, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f4c8.backedge

dec_label_pc_f550:                                ; preds = %bb123
  %v1_f550 = add i32 %v2_f4a0, 2
  %v2_f550 = inttoptr i32 %v1_f550 to i8*
  %v3_f550 = load i8, i8* %v2_f550, align 1
  %v4_f550 = zext i8 %v3_f550 to i32
  store i32 %v4_f550, i32* %r3.global-to-local, align 4
  %v1_f554 = add i32 %v2_f4a0, 3
  %v2_f554 = inttoptr i32 %v1_f554 to i8*
  %v3_f554 = load i8, i8* %v2_f554, align 1
  %v4_f554 = zext i8 %v3_f554 to i32
  store i32 %v4_f554, i32* %r2.global-to-local, align 4
  %v4_f558 = mul nuw nsw i32 %v4_f554, 256
  %v5_f558 = or i32 %v4_f558, %v4_f550
  store i32 %v5_f558, i32* %r3.global-to-local, align 4
  %v7_f55c = icmp eq i32 %v5_f558, 256
  store i1 %v7_f55c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f55c, label %dec_label_pc_f564, label %dec_label_pc_f4bc

dec_label_pc_f564:                                ; preds = %dec_label_pc_f550
  %v1_f564 = add i32 %v2_f4a0, 9
  %v2_f564 = inttoptr i32 %v1_f564 to i8*
  %v3_f564 = load i8, i8* %v2_f564, align 1
  %v4_f564 = zext i8 %v3_f564 to i32
  store i32 %v4_f564, i32* %r2.global-to-local, align 4
  %v1_f568 = add i32 %v2_f4a0, 8
  %v2_f568 = inttoptr i32 %v1_f568 to i8*
  %v3_f568 = load i8, i8* %v2_f568, align 1
  %v4_f568 = zext i8 %v3_f568 to i32
  %v4_f56c = mul nuw nsw i32 %v4_f564, 256
  %v5_f56c = or i32 %v4_f568, %v4_f56c
  %v3_f570 = mul i32 %v5_f56c, 65536
  store i32 %v3_f570, i32* %r3.global-to-local, align 4
  %v3_f574 = mul nuw nsw i32 %v4_f568, 256
  store i32 %v3_f574, i32* %r2.global-to-local, align 4
  %v5_f57c = or i32 %v3_f574, %v4_f564
  store i32 %v5_f57c, i32* %r0.global-to-local, align 4
  %v7_f580 = icmp eq i32 %v5_f57c, 4
  store i1 %v7_f580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f580, label %dec_label_pc_f588, label %bb125

dec_label_pc_f588:                                ; preds = %dec_label_pc_f564
  %v2_f588 = inttoptr i32 %v1_f4b4 to i8*
  %v3_f588 = load i8, i8* %v2_f588, align 1
  %v4_f588 = zext i8 %v3_f588 to i32
  store i32 %v4_f588, i32* %r3.global-to-local, align 4
  store i32 %v2_f198, i32* %r2.global-to-local, align 4
  %v1_f594 = add i32 %v2_f4a0, 11
  %v2_f594 = inttoptr i32 %v1_f594 to i8*
  %v3_f594 = load i8, i8* %v2_f594, align 1
  %v4_f594 = zext i8 %v3_f594 to i32
  store i32 %v4_f594, i32* %r2.global-to-local, align 4
  store i32 %v2_f198, i32* %r3.global-to-local, align 4
  %v1_f5a0 = add i32 %v2_f4a0, 12
  %v2_f5a0 = inttoptr i32 %v1_f5a0 to i8*
  %v3_f5a0 = load i8, i8* %v2_f5a0, align 1
  %v4_f5a0 = zext i8 %v3_f5a0 to i32
  store i32 %v4_f5a0, i32* %r3.global-to-local, align 4
  store i32 %v2_f198, i32* %ip.global-to-local, align 4
  %v1_f5ac = add i32 %v2_f4a0, 13
  %v2_f5ac = inttoptr i32 %v1_f5ac to i8*
  %v3_f5ac = load i8, i8* %v2_f5ac, align 1
  %v4_f5ac = zext i8 %v3_f5ac to i32
  store i32 %v4_f5ac, i32* %r2.global-to-local, align 4
  %v0_f5b4 = load i32, i32* %fp.global-to-local, align 4
  %v1_f5b4 = inttoptr i32 %v0_f5b4 to i8*
  %v2_f5b4 = load i8, i8* %v1_f5b4, align 1
  %v3_f5b4 = zext i8 %v2_f5b4 to i32
  %v1_f5b8 = mul nuw nsw i32 %v3_f5b4, 4
  %v3_f5bc = add nuw nsw i32 %v1_f5b8, 4
  store i32 %v3_f5bc, i32* %r1.global-to-local, align 4
  %v1_f5c0 = add i32 %v0_f5b4, 4
  %v2_f5c0 = inttoptr i32 %v1_f5c0 to i32*
  %v3_f5c0 = load i32, i32* %v2_f5c0, align 4
  store i32 %v3_f5c0, i32* %r0.global-to-local, align 4
  %v8_f5c4 = inttoptr i32 %v3_f5c0 to i32*
  %v9_f5c4 = call i32* @realloc(i32* %v8_f5c4, i32 %v3_f5bc)
  %v10_f5c4 = ptrtoint i32* %v9_f5c4 to i32
  store i32 %v10_f5c4, i32* %r0.global-to-local, align 4
  %v0_f5c8 = load i32, i32* %fp.global-to-local, align 4
  %v1_f5c8 = inttoptr i32 %v0_f5c8 to i8*
  %v2_f5c8 = load i8, i8* %v1_f5c8, align 1
  %v3_f5c8 = zext i8 %v2_f5c8 to i32
  store i32 %v3_f5c8, i32* %r2.global-to-local, align 4
  %v4_f5d0 = sext i8 %v3_f588 to i32
  store i32 %v4_f5d0, i32* %r3.global-to-local, align 4
  %v1_f5d4 = add nuw nsw i32 %v3_f5c8, 1
  store i32 %v1_f5d4, i32* %r1.global-to-local, align 4
  %v5_f5d8 = mul nuw nsw i32 %v3_f5c8, 4
  %v6_f5d8 = add i32 %v5_f5d8, %v10_f5c4
  %v7_f5d8 = inttoptr i32 %v6_f5d8 to i32*
  store i32 %v4_f5d0, i32* %v7_f5d8, align 4
  %v1_f5dc = load i32, i32* %fp.global-to-local, align 4
  %v2_f5dc = add i32 %v1_f5dc, 4
  %v3_f5dc = inttoptr i32 %v2_f5dc to i32*
  store i32 %v10_f5c4, i32* %v3_f5dc, align 4
  %v0_f5e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f5e0 = trunc i32 %v0_f5e0 to i8
  %v2_f5e0 = load i32, i32* %fp.global-to-local, align 4
  %v3_f5e0 = inttoptr i32 %v2_f5e0 to i8*
  store i8 %v1_f5e0, i8* %v3_f5e0, align 1
  %v0_f5e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_f5e4 = add i32 %v0_f5e4, 9
  %v2_f5e4 = inttoptr i32 %v1_f5e4 to i8*
  %v3_f5e4 = load i8, i8* %v2_f5e4, align 1
  %v4_f5e4 = zext i8 %v3_f5e4 to i32
  store i32 %v4_f5e4, i32* %r3.global-to-local, align 4
  %v1_f5e8 = add i32 %v0_f5e4, 8
  %v2_f5e8 = inttoptr i32 %v1_f5e8 to i8*
  %v3_f5e8 = load i8, i8* %v2_f5e8, align 1
  %v4_f5e8 = zext i8 %v3_f5e8 to i32
  %v4_f5ec = mul nuw nsw i32 %v4_f5e4, 256
  %v5_f5ec = or i32 %v4_f5e8, %v4_f5ec
  %v3_f5f0 = mul i32 %v5_f5ec, 65536
  store i32 %v3_f5f0, i32* %r2.global-to-local, align 4
  %v3_f5f4 = mul nuw nsw i32 %v4_f5e8, 256
  store i32 %v3_f5f4, i32* %r3.global-to-local, align 4
  %v5_f5fc = or i32 %v3_f5f4, %v4_f5e4
  store i32 %v5_f5fc, i32* %r0.global-to-local, align 4
  %v0_f600 = load i32, i32* %r7.global-to-local, align 4
  %v2_f600 = add i32 %v0_f600, %v5_f5fc
  %v0_f43c.pre.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_f43c.backedge

; uselistorder directives
  uselistorder i32 %v3_f5f4, { 1, 0 }
  uselistorder i32 %v4_f5e4, { 1, 0, 2 }
  uselistorder i32 %v10_f5c4, { 1, 0, 2 }
  uselistorder i32 %v3_f5bc, { 1, 0 }
  uselistorder i32 %v5_f57c, { 1, 2, 0 }
  uselistorder i32 %v3_f574, { 1, 0 }
  uselistorder i32 %v4_f564, { 1, 0, 2 }
  uselistorder i32 %v2_f548, { 1, 0 }
  uselistorder i32 %v3_f4c8, { 0, 2, 1 }
  uselistorder i32 %v1_f54867, { 2, 0, 1 }
  uselistorder i32 %v1_f544, { 1, 2, 0 }
  uselistorder i32 %v2_f538, { 1, 0 }
  uselistorder i32 %v3_f45c, { 0, 2, 1 }
  uselistorder i32 %v1_f53852, { 2, 0, 1 }
  uselistorder i32 %v1_f534, { 1, 2, 0 }
  uselistorder i32 %v0_f528, { 1, 0 }
  uselistorder i1 %v7_f444, { 1, 0 }
  uselistorder i32 %v3_f440, { 1, 0 }
  uselistorder i32 %v1_f43c, { 1, 0 }
  uselistorder i32 %storemerge30, { 1, 0 }
  uselistorder i32 %v3_f4f0, { 0, 2, 1 }
  uselistorder i32 %v2_f4ec, { 1, 2, 0 }
  uselistorder i32 %v0_f540, { 2, 0, 1 }
  uselistorder i32 %v1_f548, { 1, 2, 0 }
  uselistorder i32 %v3_f4d029, { 1, 0 }
  uselistorder i32 %v3_f4c827, { 1, 0, 2 }
  uselistorder i32 %v1_f4b4, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_f4a0, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_f484, { 0, 2, 1 }
  uselistorder i32 %v2_f480, { 1, 2, 0 }
  uselistorder i32 %v0_f530, { 2, 0, 1 }
  uselistorder i32 %v1_f538, { 1, 2, 0 }
  uselistorder i32 %v3_f46423, { 1, 0 }
  uselistorder i32 %v3_f45c21, { 1, 0, 2 }
  uselistorder i32 %v0_f4a0151, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f448150, { 1, 0 }
  uselistorder i32 %v3_f440148, { 1, 0 }
  uselistorder i32 %v1_f43c147, { 1, 0 }
  uselistorder i1 %v9_f418, { 1, 0 }
  uselistorder i32 %v0_f3d8, { 1, 0 }
  uselistorder i32 %v0_f3cc, { 1, 0, 2 }
  uselistorder i32 %v0_f3bc, { 1, 0 }
  uselistorder i32 %v0_f394, { 1, 0 }
  uselistorder i32 %v1_f348, { 1, 0, 2 }
  uselistorder %_TYPEDEF_fd_set* %v1_f330, { 1, 0, 2 }
  uselistorder i32 %v0_f330, { 0, 2, 1 }
  uselistorder i32 %v1_f304, { 1, 0 }
  uselistorder i32 %v3_f2f0, { 1, 0 }
  uselistorder i32 %v0_f2e8, { 1, 0 }
  uselistorder i32 %v1_f2dc, { 1, 2, 0 }
  uselistorder i32 %v0_f29c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f2cc, { 1, 0 }
  uselistorder i16 %v5_f1e8, { 1, 0 }
  uselistorder i32 %v2_f1e4, { 1, 0, 2 }
  uselistorder i32 %v6_f1d0, { 1, 2, 0 }
  uselistorder i64 %v5_f1cc, { 0, 2, 1 }
  uselistorder i32 %v1_f1b8, { 1, 0, 2 }
  uselistorder i32 %v1_f170, { 1, 0 }
  uselistorder i32 %v1_f16c, { 1, 2, 0 }
  uselistorder i32 %v2_f168, { 1, 0 }
  uselistorder i1 %v8_f154, { 1, 0 }
  uselistorder i16* %stack_var_-2244, { 0, 2, 1 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 2, 0, 1 }
  uselistorder i16 %tmp81, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 4, 0, 5, 1, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 6, 0, 2, 3, 4, 5, 7, 8, 12, 9, 11, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 14, 15, 7, 16, 10, 11, 8, 9, 13, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 37, 38, 27, 28, 29, 30, 31, 32, 35, 33, 34, 39 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 8, 29, 10, 11, 28, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 6, 3, 21, 5, 20, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 22, 24, 19 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 12, 7, 6, 9, 8, 10, 11, 13, 16, 14, 15, 18, 17, 21, 19, 20, 22, 23, 25, 24, 27, 26, 28, 30, 29, 31, 34, 33, 32, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 38, 6, 7, 39, 34, 9, 10, 36, 11, 12, 37, 33, 40, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 32, 30, 29, 28, 31, 41 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1 }
  uselistorder i32 -65536, { 1, 0, 2, 3 }
  uselistorder i32 (i32)* @sleep, { 2, 5, 1, 9, 4, 7, 11, 10, 8, 0, 3, 6, 12 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f4c8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f45c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f43c.backedge, { 1, 0 }
  uselistorder label %bb125, { 1, 3, 2, 0 }
  uselistorder label %bb124, { 1, 0 }
  uselistorder label %dec_label_pc_f4d8, { 1, 0 }
  uselistorder label %dec_label_pc_f4d8.preheader, { 1, 0 }
  uselistorder label %bb123, { 2, 1, 0 }
  uselistorder label %bb122, { 1, 0 }
  uselistorder label %dec_label_pc_f46c, { 1, 0 }
  uselistorder label %dec_label_pc_f46c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f450, { 1, 0 }
  uselistorder label %dec_label_pc_f3d8, { 1, 0 }
  uselistorder label %dec_label_pc_f3c4, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_f3a4, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_f2d4.dec_label_pc_f2d4_crit_edge, { 1, 0 }
  uselistorder label %bb121, { 1, 0 }
  uselistorder label %bb117, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f14c, { 1, 0 }
}

define i32 @function_f608(i32 %arg1) local_unnamed_addr {
dec_label_pc_f608:
  %v2_f614 = load i32, i32* @global_var_1a254.116, align 4
  %v2_f61c = call i32 @kill(i32 %v2_f614, i32 9)
  ret i32 %v2_f61c

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 1, 0, 7, 2, 6, 5, 4, 3, 8 }
}

define i32 @function_f630() local_unnamed_addr {
dec_label_pc_f630:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f630 = load i32, i32* @r4, align 4
  store i32 %v3_f630, i32* %stack_var_-16, align 4
  %v12_f630 = load i32, i32* @lr, align 4
  %v0_f634 = load i32, i32* @r0, align 4
  store i32 %v0_f634, i32* %r5.global-to-local, align 4
  %v1_f638 = add i32 %v0_f634, 4
  %v2_f638 = inttoptr i32 %v1_f638 to i32*
  %v3_f638 = load i32, i32* %v2_f638, align 4
  store i32 %v3_f638, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 63068, i32* @lr, align 4
  %v1_f658 = icmp ne i32 %v3_f638, -1
  call void @__pseudo_cond_branch(i1 %v1_f658, i32 ptrtoint (i32* @global_var_8c8c.89 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f668 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f668, i32* %r0.global-to-local, align 4
  %v2_f66c = icmp eq i32 %v3_f668, -1
  %v1_f670 = load i32, i32* %r5.global-to-local, align 4
  %v2_f670 = add i32 %v1_f670, 4
  %v3_f670 = inttoptr i32 %v2_f670 to i32*
  store i32 %v3_f668, i32* %v3_f670, align 4
  br i1 %v2_f66c, label %dec_label_pc_f630.dec_label_pc_f6e8_crit_edge, label %dec_label_pc_f678

dec_label_pc_f630.dec_label_pc_f6e8_crit_edge:    ; preds = %dec_label_pc_f630
  %v1_f6f0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6e8

dec_label_pc_f678:                                ; preds = %dec_label_pc_f630
  %v0_f678 = load i32, i32* %r5.global-to-local, align 4
  %v1_f678 = add i32 %v0_f678, 28
  store i32 %v1_f678, i32* @r0, align 4
  %v0_f67c = load i32, i32* %r6.global-to-local, align 4
  %v2_f67c = add i32 %v0_f678, 24
  %v3_f67c = inttoptr i32 %v2_f67c to i32*
  store i32 %v0_f67c, i32* %v3_f67c, align 4
  store i32 356, i32* @r1, align 4
  %v0_f684 = call i32 @function_11780()
  store i32 %v0_f684, i32* %r0.global-to-local, align 4
  %v0_f688 = load i32, i32* %r5.global-to-local, align 4
  %v1_f688 = add i32 %v0_f688, 4
  %v2_f688 = inttoptr i32 %v1_f688 to i32*
  %v3_f688 = load i32, i32* %v2_f688, align 4
  store i32 %v3_f688, i32* %r4.global-to-local, align 4
  %v0_f68c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f68c, i32* %r2.global-to-local, align 4
  store i32 %v3_f688, i32* %r0.global-to-local, align 4
  %v2_f698 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f688, i32 3)
  %v1_f6a0 = or i32 %v2_f698, 2048
  store i32 %v1_f6a0, i32* %r2.global-to-local, align 4
  %v0_f6a4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f6a4, i32* %r0.global-to-local, align 4
  %v2_f6a8 = call i32 (i32, i32, ...) @fcntl(i32 %v0_f6a4, i32 4)
  store i32 %v2_f6a8, i32* %r0.global-to-local, align 4
  %v2_f6b0 = load i32, i32* @global_var_1a22c.118, align 4
  store i32 %v2_f6b0, i32* %r2.global-to-local, align 4
  %v1_f6b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f6b8 = add i32 %v1_f6b8, 12
  %v3_f6b8 = inttoptr i32 %v2_f6b8 to i32*
  store i32 1, i32* %v3_f6b8, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_f6c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f6c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_f6c4 = add i32 %v1_f6c4, 8
  %v3_f6c4 = inttoptr i32 %v2_f6c4 to i32*
  store i32 %v0_f6c4, i32* %v3_f6c4, align 4
  %v0_f6c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f6cc = add i32 %v0_f6c8, 4
  %v2_f6cc = inttoptr i32 %v1_f6cc to i32*
  %v3_f6cc = load i32, i32* %v2_f6cc, align 4
  store i32 %v3_f6cc, i32* %r0.global-to-local, align 4
  %v1_f6d0 = add i32 %v0_f6c8, 20
  %v2_f6d0 = inttoptr i32 %v1_f6d0 to i16*
  %v3_f6d0 = load i16, i16* %v2_f6d0, align 2
  %v4_f6d0 = zext i16 %v3_f6d0 to i32
  store i32 %v4_f6d0, i32* %r5.global-to-local, align 4
  %tmp11 = bitcast i32* %stack_var_-32 to %sockaddr*
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_f6e4 = call i32 @connect(i32 %v3_f6cc, %sockaddr* %tmp11, i32 16)
  store i32 %v5_f6e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6e8

dec_label_pc_f6e8:                                ; preds = %dec_label_pc_f630.dec_label_pc_f6e8_crit_edge, %dec_label_pc_f678
  %v1_f6f0 = phi i32 [ %v1_f6f0.pre, %dec_label_pc_f630.dec_label_pc_f6e8_crit_edge ], [ %v5_f6e4, %dec_label_pc_f678 ]
  %v2_f6ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f6ec, i32* @r4, align 4
  store i32 %v12_f630, i32* @lr, align 4
  ret i32 %v1_f6f0

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_11780, { 8, 4, 7, 6, 5, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_f6e8, { 1, 0 }
}

define i32 @function_f6f8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f6f8:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1f8.120 to i32), i32* %fp.global-to-local, align 4
  %v2_f700 = load i32, i32* @global_var_1a1f8.120, align 4
  store i32 ptrtoint (i32* @global_var_1a224.122 to i32), i32* %sl.global-to-local, align 4
  %v1_f70c = add i32 %v2_f700, 1
  store i32 %v1_f70c, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_f718 = load i32, i32* @global_var_1a224.122, align 4
  store i32 %v2_f718, i32* %r0.global-to-local, align 4
  %v3_f71c = mul i32 %v1_f70c, 16
  store i32 %v3_f71c, i32* %r1.global-to-local, align 4
  %v3_f724 = inttoptr i32 %v2_f718 to i32*
  %v4_f724 = call i32* @realloc(i32* %v3_f724, i32 %v3_f71c)
  %v6_f724 = ptrtoint i32* %v4_f724 to i32
  %v2_f728 = load i32, i32* @global_var_1a1f8.120, align 4
  store i32 %v2_f728, i32* %r2.global-to-local, align 4
  store i32 %v6_f724, i32* %r8.global-to-local, align 4
  %v0_f730 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f730, i32* %r0.global-to-local, align 4
  %v1_f738 = load i32, i32* %sl.global-to-local, align 4
  %v2_f738 = inttoptr i32 %v1_f738 to i32*
  store i32 %v6_f724, i32* %v2_f738, align 4
  %v1_f73c = inttoptr i32 %v0_f730 to i8*
  %v2_f73c = call i32 @function_116ec(i8* %v1_f73c)
  %sext = mul i32 %v2_f73c, 16777216
  %v1_f740 = sdiv i32 %sext, 16777216
  %v2_f740 = add nsw i32 %v1_f740, 1
  store i32 %v2_f740, i32* %r4.global-to-local, align 4
  store i32 %v1_f740, i32* %r7.global-to-local, align 4
  store i32 %v2_f740, i32* %r0.global-to-local, align 4
  %v1_f74c = call i32* @malloc(i32 %v2_f740)
  %v3_f74c = ptrtoint i32* %v1_f74c to i32
  store i32 %v3_f74c, i32* %r0.global-to-local, align 4
  %v0_f750 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f750, i32* %r1.global-to-local, align 4
  %v0_f754 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f754, i32* %r2.global-to-local, align 4
  store i32 %v3_f74c, i32* %r6.global-to-local, align 4
  %v3_f75c = call i32 @function_1175c(i32 %v3_f74c, i32 %v0_f750, i32 %v0_f754)
  store i32 %v3_f75c, i32* %r0.global-to-local, align 4
  %v0_f760 = load i32, i32* %r7.global-to-local, align 4
  %tmp22 = icmp slt i32 %v0_f760, 1
  %extract.t6 = trunc i32 %v0_f760 to i8
  br i1 %tmp22, label %dec_label_pc_f784, label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f6f8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f76c

dec_label_pc_f76c:                                ; preds = %dec_label_pc_f76c, %dec_label_pc_f768
  %v2_f774 = phi i32 [ %v1_f778, %dec_label_pc_f76c ], [ 0, %dec_label_pc_f768 ]
  %v1_f76c = load i32, i32* %r6.global-to-local, align 4
  %v2_f76c = add i32 %v1_f76c, %v2_f774
  %v3_f76c = inttoptr i32 %v2_f76c to i8*
  %v4_f76c = load i8, i8* %v3_f76c, align 1
  %v6_f76c = zext i8 %v4_f76c to i32
  %v1_f770 = xor i32 %v6_f76c, 84
  store i32 %v1_f770, i32* %r3.global-to-local, align 4
  %v1_f774 = trunc i32 %v1_f770 to i8
  store i8 %v1_f774, i8* %v3_f76c, align 1
  %v0_f778 = load i32, i32* %r2.global-to-local, align 4
  %v1_f778 = add i32 %v0_f778, 1
  store i32 %v1_f778, i32* %r2.global-to-local, align 4
  %v1_f77c = load i32, i32* %r7.global-to-local, align 4
  %v9_f77c = icmp eq i32 %v1_f778, %v1_f77c
  br i1 %v9_f77c, label %dec_label_pc_f784.loopexit, label %dec_label_pc_f76c

dec_label_pc_f784.loopexit:                       ; preds = %dec_label_pc_f76c
  %extract.t = trunc i32 %v1_f778 to i8
  br label %dec_label_pc_f784

dec_label_pc_f784:                                ; preds = %dec_label_pc_f784.loopexit, %dec_label_pc_f6f8
  %v0_f794.off0 = phi i8 [ %extract.t, %dec_label_pc_f784.loopexit ], [ %extract.t6, %dec_label_pc_f6f8 ]
  %v2_f784 = load i32, i32* @global_var_1a1f8.120, align 4
  %v2_f788 = load i32, i32* @global_var_1a224.122, align 4
  %v3_f78c = mul i32 %v2_f784, 16
  store i32 %v3_f78c, i32* %sb.global-to-local, align 4
  %v2_f790 = add i32 %v2_f788, %v3_f78c
  store i32 %v2_f790, i32* %r2.global-to-local, align 4
  %v3_f794 = add i32 %v2_f790, 12
  %v4_f794 = inttoptr i32 %v3_f794 to i8*
  store i8 %v0_f794.off0, i8* %v4_f794, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_f728, i32* %r3.global-to-local, align 4
  %v0_f7a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_f7a0 = load i32, i32* %r8.global-to-local, align 4
  %v5_f7a0 = mul i32 %v2_f728, 16
  %v6_f7a0 = add i32 %v1_f7a0, %v5_f7a0
  %v7_f7a0 = inttoptr i32 %v6_f7a0 to i32*
  store i32 %v0_f7a0, i32* %v7_f7a0, align 4
  %v2_f7a4 = load i32, i32* @global_var_1a224.122, align 4
  store i32 %v2_f7a4, i32* %r7.global-to-local, align 4
  %v1_f7a8 = inttoptr i32 %arg2 to i8*
  %v2_f7a8 = call i32 @function_116ec(i8* %v1_f7a8)
  %sext1 = mul i32 %v2_f7a8, 16777216
  %v1_f7ac = sdiv i32 %sext1, 16777216
  %v2_f7ac = add nsw i32 %v1_f7ac, 1
  store i32 %v2_f7ac, i32* %r4.global-to-local, align 4
  store i32 %v1_f7ac, i32* %r6.global-to-local, align 4
  store i32 %v2_f7ac, i32* %r0.global-to-local, align 4
  %v1_f7b8 = call i32* @malloc(i32 %v2_f7ac)
  %v3_f7b8 = ptrtoint i32* %v1_f7b8 to i32
  store i32 %v3_f7b8, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f7c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f7c0, i32* %r2.global-to-local, align 4
  store i32 %v3_f7b8, i32* %r5.global-to-local, align 4
  %v3_f7c8 = call i32 @function_1175c(i32 %v3_f7b8, i32 %arg2, i32 %v0_f7c0)
  store i32 %v3_f7c8, i32* %r0.global-to-local, align 4
  %v0_f7cc = load i32, i32* %r6.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_f7cc, 1
  %extract.t8 = trunc i32 %v0_f7cc to i8
  br i1 %tmp23, label %dec_label_pc_f7f0, label %dec_label_pc_f7d4

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f784
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f7d8

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7d8, %dec_label_pc_f7d4
  %v2_f7e0 = phi i32 [ %v1_f7e4, %dec_label_pc_f7d8 ], [ 0, %dec_label_pc_f7d4 ]
  %v1_f7d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f7d8 = add i32 %v1_f7d8, %v2_f7e0
  %v3_f7d8 = inttoptr i32 %v2_f7d8 to i8*
  %v4_f7d8 = load i8, i8* %v3_f7d8, align 1
  %v6_f7d8 = zext i8 %v4_f7d8 to i32
  %v1_f7dc = xor i32 %v6_f7d8, 84
  store i32 %v1_f7dc, i32* %r3.global-to-local, align 4
  %v1_f7e0 = trunc i32 %v1_f7dc to i8
  store i8 %v1_f7e0, i8* %v3_f7d8, align 1
  %v0_f7e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f7e4 = add i32 %v0_f7e4, 1
  store i32 %v1_f7e4, i32* %r2.global-to-local, align 4
  %v1_f7e8 = load i32, i32* %r6.global-to-local, align 4
  %v9_f7e8 = icmp eq i32 %v1_f7e4, %v1_f7e8
  br i1 %v9_f7e8, label %dec_label_pc_f7f0.loopexit, label %dec_label_pc_f7d8

dec_label_pc_f7f0.loopexit:                       ; preds = %dec_label_pc_f7d8
  %extract.t7 = trunc i32 %v1_f7e4 to i8
  br label %dec_label_pc_f7f0

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f7f0.loopexit, %dec_label_pc_f784
  %v0_f800.off0 = phi i8 [ %extract.t7, %dec_label_pc_f7f0.loopexit ], [ %extract.t8, %dec_label_pc_f784 ]
  %v2_f7f0 = load i32, i32* @global_var_1a1f8.120, align 4
  store i32 %v2_f7f0, i32* %r0.global-to-local, align 4
  %v2_f7f4 = load i32, i32* @global_var_1a224.122, align 4
  %v3_f7f8 = mul i32 %v2_f7f0, 16
  store i32 %v3_f7f8, i32* %r1.global-to-local, align 4
  %v2_f7fc = or i32 %v3_f7f8, 13
  %v3_f800 = add i32 %v2_f7fc, %v2_f7f4
  %v4_f800 = inttoptr i32 %v3_f800 to i8*
  store i8 %v0_f800.off0, i8* %v4_f800, align 1
  store i32 ptrtoint (i16** @global_var_1a228.124 to i32), i32* %r4.global-to-local, align 4
  %v2_f80c = load i16, i16* bitcast (i16** @global_var_1a228.124 to i16*), align 4
  %v3_f80c = zext i16 %v2_f80c to i32
  store i32 %v3_f80c, i32* %lr.global-to-local, align 4
  %v2_f814 = load i32, i32* @global_var_1a224.122, align 4
  store i32 %v2_f814, i32* %r2.global-to-local, align 4
  %v0_f81c = load i32, i32* %r1.global-to-local, align 4
  %v2_f81c = add i32 %v0_f81c, %v2_f814
  store i32 %v2_f81c, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1a228.124 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_f824 = load i32, i32* %sb.global-to-local, align 4
  %v1_f824 = load i32, i32* %r7.global-to-local, align 4
  %v2_f824 = add i32 %v1_f824, %v0_f824
  store i32 %v2_f824, i32* %ip.global-to-local, align 4
  %v0_f828 = load i32, i32* %r0.global-to-local, align 4
  %v1_f828 = add i32 %v0_f828, 1
  store i32 %v1_f828, i32* %r0.global-to-local, align 4
  %v3_f82c = add i32 %v2_f81c, 10
  %v4_f82c = inttoptr i32 %v3_f82c to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1a228.124 to i32), i32 16), i32 16) to i16), i16* %v4_f82c, align 2
  %v0_f830 = load i32, i32* %lr.global-to-local, align 4
  %v1_f830 = trunc i32 %v0_f830 to i16
  %v2_f830 = load i32, i32* %r1.global-to-local, align 4
  %v3_f830 = add i32 %v2_f830, 8
  %v4_f830 = inttoptr i32 %v3_f830 to i16*
  store i16 %v1_f830, i16* %v4_f830, align 2
  %v0_f834 = load i32, i32* %r5.global-to-local, align 4
  %v1_f834 = load i32, i32* %ip.global-to-local, align 4
  %v2_f834 = add i32 %v1_f834, 4
  %v3_f834 = inttoptr i32 %v2_f834 to i32*
  store i32 %v0_f834, i32* %v3_f834, align 4
  %v1_f838 = load i32, i32* %fp.global-to-local, align 4
  %v2_f838 = inttoptr i32 %v1_f838 to i32*
  store i32 %v1_f828, i32* %v2_f838, align 4
  %v0_f83c = load i32, i32* %r3.global-to-local, align 4
  %v1_f83c = trunc i32 %v0_f83c to i16
  %v2_f83c = load i32, i32* %r4.global-to-local, align 4
  %v3_f83c = inttoptr i32 %v2_f83c to i16*
  store i16 %v1_f83c, i16* %v3_f83c, align 2
  ret i32 %v1_f828

; uselistorder directives
  uselistorder i32 %v3_f7f8, { 1, 0 }
  uselistorder i32 %v1_f7e4, { 0, 2, 3, 1 }
  uselistorder i32 %v3_f7b8, { 1, 0, 2 }
  uselistorder i32 %v3_f78c, { 1, 0 }
  uselistorder i32 %v1_f778, { 0, 2, 3, 1 }
  uselistorder i32 %v3_f74c, { 1, 0, 2 }
  uselistorder i32 %v2_f728, { 1, 0, 2 }
  uselistorder i32 %v3_f71c, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 0 }
  uselistorder i32 (i8*)* @function_116ec, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32* (i32*, i32)* @realloc, { 2, 0, 8, 6, 7, 12, 4, 11, 10, 5, 1, 3, 9, 13 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_f858(i32 %arg1) local_unnamed_addr {
dec_label_pc_f858:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sp.global-to-local = alloca i32, align 4
  store i32 0, i32* %sp.global-to-local, align 4
  %tmp332 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_f858 = load i32, i32* @r4, align 4
  %v18_f858 = load i32, i32* @sb, align 4
  %v21_f858 = load i32, i32* @sl, align 4
  %v24_f858 = load i32, i32* @fp, align 4
  %v0_f864 = call i32 @fork()
  %v2_f868 = icmp eq i32 %v0_f864, -1
  %. = zext i1 %v2_f868 to i32
  %tmp367 = icmp slt i32 %v0_f864, 1
  %storemerge326 = select i1 %tmp367, i32 %., i32 1
  store i32 %storemerge326, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1a254.116 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f884 = icmp eq i32 %storemerge326, 0
  store i1 %v2_f884, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f864, i32* @global_var_1a254.116, align 4
  br i1 %v2_f884, label %dec_label_pc_f8a0, label %dec_label_pc_f890

dec_label_pc_f890:                                ; preds = %dec_label_pc_f858
  store i32 %v3_f858, i32* %r4.global-to-local, align 4
  store i32 %v18_f858, i32* @sb, align 4
  store i32 %v21_f858, i32* @sl, align 4
  store i32 %v24_f858, i32* @fp, align 4
  ret i32 %v0_f864

dec_label_pc_f8a0:                                ; preds = %dec_label_pc_f858
  %v0_f8a0 = call i32 @function_119a8()
  store i32 ptrtoint (i32* @global_var_1a230.41 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f8a0, i32* @global_var_1a230.41, align 4
  %v1_f8ac = call i32 @function_eec4(i32 %v0_f8a0)
  %v0_f8b0 = load i32, i32* @r4, align 4
  %v1_f8b4 = inttoptr i32 %v0_f8b0 to i32*
  %v2_f8b4 = call i32 @time(i32* %v1_f8b4)
  store i32 ptrtoint (i32* @global_var_1a22c.118 to i32), i32* %r2.global-to-local, align 4
  store i32 388, i32* %r1.global-to-local, align 4
  store i32 %v2_f8b4, i32* @global_var_1a22c.118, align 4
  %v2_f8c8 = call i32* @calloc(i32 356, i32 388)
  %v4_f8c8 = ptrtoint i32* %v2_f8c8 to i32
  store i32 ptrtoint (i32* @global_var_1a24c.129 to i32), i32* %r3.global-to-local, align 4
  %v0_f8d0 = load i32, i32* @r4, align 4
  store i32 %v0_f8d0, i32* %stack_var_-52, align 4
  store i32 %v4_f8c8, i32* @global_var_1a24c.129, align 4
  store i32 %v0_f8d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f8dc

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f8dc.dec_label_pc_f8dc_crit_edge, %dec_label_pc_f8a0
  %v2_f8f8 = phi i32 [ %v2_f8f8.pre, %dec_label_pc_f8dc.dec_label_pc_f8dc_crit_edge ], [ %v4_f8c8, %dec_label_pc_f8a0 ]
  %v0_f8e0 = phi i32 [ %v0_f928, %dec_label_pc_f8dc.dec_label_pc_f8dc_crit_edge ], [ %v0_f8d0, %dec_label_pc_f8a0 ]
  %v1_f900 = add i32 %v0_f8e0, 1
  store i32 %v1_f900, i32* %ip.global-to-local, align 4
  %v3_f904 = mul i32 %v0_f8e0, 388
  %v2_f90c = add i32 %v3_f904, %v2_f8f8
  store i32 %v2_f90c, i32* %r3.global-to-local, align 4
  store i32 %v2_f90c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f920 = add i32 %v2_f90c, 4
  %v3_f920 = inttoptr i32 %v2_f920 to i32*
  store i32 -1, i32* %v3_f920, align 4
  %v0_f924 = load i32, i32* @r5, align 4
  %v1_f924 = load i32, i32* %r1.global-to-local, align 4
  %v2_f924 = add i32 %v1_f924, 12
  %v3_f924 = inttoptr i32 %v2_f924 to i32*
  store i32 %v0_f924, i32* %v3_f924, align 4
  %v0_f928 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f928, i32* %stack_var_-52, align 4
  %v5_f92c = icmp slt i32 %v1_f900, 356
  br i1 %v5_f92c, label %dec_label_pc_f8dc.dec_label_pc_f8dc_crit_edge, label %dec_label_pc_f930

dec_label_pc_f8dc.dec_label_pc_f8dc_crit_edge:    ; preds = %dec_label_pc_f8dc
  %v2_f8f8.pre = load i32, i32* @global_var_1a24c.129, align 4
  br label %dec_label_pc_f8dc

dec_label_pc_f930:                                ; preds = %dec_label_pc_f8dc
  %v8_f91c = icmp eq i32 %v1_f900, 356
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_f91c, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f938 = load i32, i32* %r2.global-to-local, align 4
  %v1_f938 = add i32 %v0_f938, 7
  store i32 %v1_f938, i32* %r2.global-to-local, align 4
  %v3_f93c = call i32 @socket(i32 2, i32 3, i32 %v1_f938)
  %v2_f944 = icmp eq i32 %v3_f93c, -1
  store i1 %v2_f944, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f944, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f93c, i32* %r4.global-to-local, align 4
  store i32 %v3_f93c, i32* @global_var_1a250.131, align 4
  br i1 %v2_f944, label %dec_label_pc_10fec, label %dec_label_pc_f954

dec_label_pc_f954:                                ; preds = %dec_label_pc_f930
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f958 = load i32, i32* @r5, align 4
  store i32 %v0_f958, i32* %r2.global-to-local, align 4
  %v2_f95c = call i32 (i32, i32, ...) @fcntl(i32 %v3_f93c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f964 = or i32 %v2_f95c, 2048
  store i32 %v1_f964, i32* %r2.global-to-local, align 4
  %v0_f968 = load i32, i32* %r4.global-to-local, align 4
  %v2_f96c = call i32 (i32, i32, ...) @fcntl(i32 %v0_f968, i32 4)
  %v2_f974 = ptrtoint i32* %stack_var_-56 to i32
  %v2_f978 = load i32, i32* @global_var_1a250.131, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_f980 = load i32, i32* @r5, align 4
  store i32 %v0_f980, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_f988 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f988, i32* %r3.global-to-local, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v7_f998 = call i32 @setsockopt(i32 %v2_f978, i32 %v0_f980, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f99c = icmp eq i32 %v7_f998, 0
  store i1 %v2_f99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f99c, label %dec_label_pc_f9a4, label %dec_label_pc_10fe0

dec_label_pc_f9a4:                                ; preds = %dec_label_pc_f954, %dec_label_pc_f9a4
  %v0_f9a4 = call i32 @function_ee68()
  %v1_f9b4 = mul i32 %v0_f9a4, 256
  %v3_f9b8 = and i32 %v1_f9b4, 65280
  %tmp370 = udiv i32 %v0_f9a4, 256
  %v4_f9bc = urem i32 %tmp370, 256
  %v5_f9bc = or i32 %v4_f9bc, %v3_f9b8
  store i32 %v5_f9bc, i32* %r3.global-to-local, align 4
  %v2_f9c0 = icmp ugt i32 %v5_f9bc, 1023
  store i1 %v2_f9c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c0 = icmp eq i32 %v5_f9bc, 1024
  store i1 %v7_f9c0, i1* %cpsr_z.global-to-local, align 1
  %v3_f9c4 = icmp ult i32 %v5_f9bc, 1022
  br i1 %v3_f9c4, label %dec_label_pc_f9a4, label %dec_label_pc_f9c8

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f9a4
  %v5_f9b0.le = trunc i32 %v0_f9a4 to i16
  store i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), i32* %ip.global-to-local, align 4
  %v2_f9cc = load i8, i8* bitcast (i32* @global_var_1a1fc.133 to i8*), align 4
  %v3_f9cc = zext i8 %v2_f9cc to i32
  %v1_f9d0 = and i32 %v3_f9cc, 240
  %v1_f9d4 = or i32 %v1_f9d0, 5
  store i32 %v1_f9d4, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i8 69, i8* bitcast (i32* @global_var_1a1fc.133 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1a1fe.134 to i16*), align 4
  %v0_f9f4 = call i32 @function_ee68()
  %v1_f9f4 = trunc i32 %v0_f9f4 to i16
  %v3_f9fc = load i8, i8* @global_var_1a21c.137, align 1
  store i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), i32* %ip.global-to-local, align 4
  %v1_fa0c = urem i8 %v3_f9fc, 16
  store i16 %v1_f9f4, i16* bitcast (i32* @global_var_1a200.138 to i16*), align 4
  %v1_fa14 = or i8 %v1_fa0c, 80
  store i32 64, i32* %r3.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1a204.139 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1a205.140 to i8*), align 4
  store i8 %v1_fa14, i8* @global_var_1a21c.137, align 1
  %v4_fa2c = sext i16 %v5_f9b0.le to i32
  store i32 %v4_fa2c, i32* %r2.global-to-local, align 4
  store i32 5888, i32* %r1.global-to-local, align 4
  store i16 5888, i16* @global_var_1a212.141, align 2
  store i16 %v5_f9b0.le, i16* bitcast (i32* @global_var_1a210.136 to i16*), align 4
  %v0_fa3c = call i32 @function_ee68()
  %v1_fa3c = trunc i32 %v0_fa3c to i16
  store i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32* %ip.global-to-local, align 4
  %v3_fa44 = load i8, i8* @global_var_1a21d.142, align 1
  %v4_fa44 = zext i8 %v3_fa44 to i32
  %v1_fa48 = or i32 %v4_fa44, 2
  store i32 %v1_fa48, i32* %r3.global-to-local, align 4
  store i16 %v1_fa3c, i16* bitcast (i32* @global_var_1a21e.143 to i16*), align 4
  %v1_fa50 = trunc i32 %v1_fa48 to i8
  store i8 %v1_fa50, i8* @global_var_1a21d.142, align 1
  store i32 ptrtoint (i32* @global_var_11d94.147 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_fa60 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint (i32* @global_var_11d94.147 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_11d98.149 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_fa70 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_11d98.149 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_11da0.151 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fa80 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_11da0.151 to i32), i32 12)
  store i32 ptrtoint (i32* @global_var_11d94.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_fa90 = call i32 @function_f6f8(i32 ptrtoint ([8 x i8]* @global_var_11dac.153 to i32), i32 ptrtoint (i32* @global_var_11d94.147 to i32), i32 7)
  store i32 ptrtoint ([9 x i8]* @global_var_11db4.155 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_faa0 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_11db4.155 to i32), i32 12)
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_11dc0.157 to i32), i32* %r1.global-to-local, align 4
  %v5_fab0 = call i32 @function_f6f8(i32 ptrtoint ([6 x i8]* @global_var_11dc0.157 to i32), i32 ptrtoint ([6 x i8]* @global_var_11dc0.157 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_11dc8.159 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fac0 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_11dc8.159 to i32), i32 9)
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_11dd0.161 to i32), i32* %r1.global-to-local, align 4
  %v5_fad0 = call i32 @function_f6f8(i32 ptrtoint ([8 x i8]* @global_var_11dd0.161 to i32), i32 ptrtoint ([8 x i8]* @global_var_11dd0.161 to i32), i32 14)
  store i32 ptrtoint ([8 x i8]* @global_var_11dac.153 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_fae0 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint ([8 x i8]* @global_var_11dac.153 to i32), i32 11)
  store i32 ptrtoint (i32* @global_var_11dd8.163 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_faf0 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint (i32* @global_var_11dd8.163 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_11de8.165 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fb00 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11d90.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_11de8.165 to i32), i32 9)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_11df0.167 to i32), i32* %r1.global-to-local, align 4
  %v5_fb10 = call i32 @function_f6f8(i32 ptrtoint ([5 x i8]* @global_var_11df0.167 to i32), i32 ptrtoint ([5 x i8]* @global_var_11df0.167 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_11df8.169 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fb20 = call i32 @function_f6f8(i32 ptrtoint ([8 x i8]* @global_var_11dac.153 to i32), i32 ptrtoint (i32* @global_var_11df8.169 to i32), i32 15)
  store i32 ptrtoint (i32* @global_var_11e04.171 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fb30 = call i32 @function_f6f8(i32 ptrtoint ([8 x i8]* @global_var_11dac.153 to i32), i32 ptrtoint (i32* @global_var_11e04.171 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_11e10.173 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fb40 = call i32 @function_f6f8(i32 ptrtoint ([6 x i8]* @global_var_11dc0.157 to i32), i32 ptrtoint ([5 x i8]* @global_var_11e10.173 to i32), i32 9)
  %v2_fb48 = ptrtoint i32* %stack_var_-1866 to i32
  %v1_fe70 = add i32 %v2_fb48, 20
  %v1_fed0 = add i32 %v2_fb48, 16
  %v2_fed0 = inttoptr i32 %v1_fed0 to i32*
  %v1_ff74 = add i32 %v2_fb48, 12
  %v2_ff74 = inttoptr i32 %v1_ff74 to i32*
  %v2_10164 = ptrtoint i32* %stack_var_-40 to i32
  %v2_101ac = ptrtoint i32* %stack_var_-68 to i32
  %v2_101b0 = ptrtoint i32* %stack_var_-224 to i32
  %tmp371 = bitcast i32* %stack_var_-224 to %_TYPEDEF_fd_set*
  %v2_101b4 = ptrtoint i32* %stack_var_-352 to i32
  %tmp372 = bitcast i32* %stack_var_-352 to %_TYPEDEF_fd_set*
  %tmp374 = bitcast i32* %stack_var_-68 to %timeval*
  %v2_10c38 = ptrtoint i32* %stack_var_-45 to i32
  %v2_10c4c = ptrtoint i32* %stack_var_-77 to i32
  %v2_10ba4 = ptrtoint i32* %stack_var_-60 to i32
  %v2_10400 = ptrtoint i32* %stack_var_-104 to i32
  %v2_10edc = ptrtoint i32* %stack_var_-96 to i32
  %tmp375 = bitcast i32* %stack_var_-96 to %sockaddr*
  %v2_10f34 = ptrtoint i32* %stack_var_-42 to i32
  %v1_fee0 = add i32 %v2_fb48, 9
  %v2_fee0 = inttoptr i32 %v1_fee0 to i8*
  br label %dec_label_pc_fb50

dec_label_pc_fb50:                                ; preds = %dec_label_pc_10354, %dec_label_pc_f9c8
  %stack_var_-1880.0 = phi i32 [ %tmp332, %dec_label_pc_f9c8 ], [ %stack_var_-1880.1, %dec_label_pc_10354 ]
  store i32 ptrtoint (i32* @global_var_1a22c.118 to i32), i32* %r1.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r2.global-to-local, align 4
  %v2_fb58 = load i32, i32* @global_var_1a22c.118, align 4
  store i32 %v2_fb58, i32* @r4, align 4
  %v3_fb5c = icmp uge i32 %stack_var_-1880.0, %v2_fb58
  store i1 %v3_fb5c, i1* %cpsr_c.global-to-local, align 1
  %v9_fb5c = icmp eq i32 %stack_var_-1880.0, %v2_fb58
  store i1 %v9_fb5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fb5c, label %dec_label_pc_fe64, label %dec_label_pc_fb64

dec_label_pc_fb64:                                ; preds = %dec_label_pc_fb50
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %bb411, %dec_label_pc_fb64
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_fb88 = call i32 @function_ee68()
  %v1_fb88 = trunc i32 %v0_fb88 to i16
  store i32 ptrtoint (i32* @global_var_1a230.41 to i32), i32* %ip.global-to-local, align 4
  %v2_fb94 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_fb94, i32* %r3.global-to-local, align 4
  store i16 %v1_fb88, i16* bitcast (i32* @global_var_1a200.138 to i16*), align 4
  store i32 %v2_fb94, i32* @global_var_1a208.174, align 4
  br label %dec_label_pc_fba0

dec_label_pc_fba0:                                ; preds = %dec_label_pc_fcf8, %dec_label_pc_fbd0, %dec_label_pc_fd2c, %dec_label_pc_fd20, %dec_label_pc_fd14, %dec_label_pc_fd08, %.thread48, %.thread32, %.thread28, %.thread24, %bb402, %bb401, %bb400, %bb399, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %dec_label_pc_fc6c, %dec_label_pc_fc64, %bb387, %dec_label_pc_fc34, %dec_label_pc_fc10, %bb380, %dec_label_pc_fbe0, %bb379, %dec_label_pc_fbc8, %bb378, %bb404, %dec_label_pc_fb74
  %v0_fba0 = call i32 @function_ee68()
  %v1_fba4 = urem i32 %v0_fba0, 256
  store i32 %v1_fba4, i32* %r1.global-to-local, align 4
  %v3_fba8 = udiv i32 %v0_fba0, 256
  store i32 %v3_fba8, i32* %r3.global-to-local, align 4
  %v3_fbac = udiv i32 %v0_fba0, 65536
  store i32 %v3_fbac, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbb0 = icmp eq i32 %v1_fba4, 0
  store i1 %v2_fbb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fbb0, label %bb378, label %bb377

bb377:                                            ; preds = %dec_label_pc_fba0
  %v3_fbb4 = icmp ugt i32 %v1_fba4, 126
  store i1 %v3_fbb4, i1* %cpsr_c.global-to-local, align 1
  %v8_fbb4 = icmp eq i32 %v1_fba4, 127
  store i1 %v8_fbb4, i1* %cpsr_z.global-to-local, align 1
  br label %bb378

bb378:                                            ; preds = %dec_label_pc_fba0, %bb377
  %v0_fbc4 = phi i1 [ true, %dec_label_pc_fba0 ], [ %v8_fbb4, %bb377 ]
  %v1_fbb8 = urem i32 %v3_fba8, 256
  store i32 %v1_fbb8, i32* %ip.global-to-local, align 4
  %v1_fbbc = urem i32 %v3_fbac, 256
  store i32 %v1_fbbc, i32* %r2.global-to-local, align 4
  %v1_fbc0 = and i32 %v0_fba0, 8388608
  %v2_fbc0 = icmp ne i32 %v1_fbc0, 0
  store i1 %v2_fbc0, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_fbc4, label %dec_label_pc_fba0, label %dec_label_pc_fbc8

dec_label_pc_fbc8:                                ; preds = %bb378
  %v2_fbc8 = icmp ugt i32 %v1_fba4, 2
  store i1 %v2_fbc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbc8 = icmp eq i32 %v1_fba4, 3
  store i1 %v7_fbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbc8, label %dec_label_pc_fba0, label %dec_label_pc_fbd0

dec_label_pc_fbd0:                                ; preds = %dec_label_pc_fbc8
  %v1_fbd0 = add nsw i32 %v1_fba4, -15
  store i32 %v1_fbd0, i32* %r3.global-to-local, align 4
  %v2_fbd4 = icmp ugt i32 %v1_fba4, 55
  store i1 %v2_fbd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbd4 = icmp eq i32 %v1_fba4, 56
  store i1 %v7_fbd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd4, label %dec_label_pc_fba0, label %bb379

bb379:                                            ; preds = %dec_label_pc_fbd0
  %v3_fbd8 = icmp ne i32 %v1_fbd0, 0
  store i1 %v3_fbd8, i1* %cpsr_c.global-to-local, align 1
  %v8_fbd8 = icmp eq i32 %v1_fbd0, 1
  store i1 %v8_fbd8, i1* %cpsr_z.global-to-local, align 1
  %v2_fbdc = xor i1 %v3_fbd8, true
  %v3_fbdc = or i1 %v8_fbd8, %v2_fbdc
  br i1 %v3_fbdc, label %dec_label_pc_fba0, label %dec_label_pc_fbe0

dec_label_pc_fbe0:                                ; preds = %bb379
  %v2_fbe0 = icmp ugt i32 %v1_fba4, 9
  store i1 %v2_fbe0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbe0 = icmp eq i32 %v1_fba4, 10
  store i1 %v7_fbe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbe0, label %dec_label_pc_fba0, label %dec_label_pc_fbe8

dec_label_pc_fbe8:                                ; preds = %dec_label_pc_fbe0
  %v2_fbe8 = icmp ugt i32 %v1_fba4, 191
  store i1 %v2_fbe8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbe8 = icmp eq i32 %v1_fba4, 192
  store i1 %v7_fbe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbe8, label %bb380, label %dec_label_pc_fbf4

bb380:                                            ; preds = %dec_label_pc_fbe8
  %v3_fbec = icmp ugt i32 %v1_fbb8, 167
  store i1 %v3_fbec, i1* %cpsr_c.global-to-local, align 1
  %v8_fbec = icmp eq i32 %v1_fbb8, 168
  store i1 %v8_fbec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fbec, label %dec_label_pc_fba0, label %dec_label_pc_fbf4

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_fbe8, %bb380
  %v7_fbf4 = icmp eq i32 %v1_fba4, 172
  %.464 = zext i1 %v7_fbf4 to i32
  store i32 %.464, i32* %r3.global-to-local, align 4
  %v2_fc00 = icmp ugt i32 %v1_fbb8, 14
  store i1 %v2_fc00, i1* %cpsr_c.global-to-local, align 1
  %v7_fc00 = icmp eq i32 %v1_fbb8, 15
  store i1 %v7_fc00, i1* %cpsr_z.global-to-local, align 1
  %v2_fc04 = xor i1 %v2_fc00, true
  %v3_fc04 = or i1 %v7_fc00, %v2_fc04
  br i1 %v3_fc04, label %.thread8, label %bb383

.thread8:                                         ; preds = %dec_label_pc_fbf4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fc18

bb383:                                            ; preds = %dec_label_pc_fbf4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc08 = icmp eq i1 %v7_fbf4, false
  store i1 %v2_fc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc08, label %dec_label_pc_fc18, label %dec_label_pc_fc10

dec_label_pc_fc10:                                ; preds = %bb383
  %v2_fc10 = icmp ugt i32 %v1_fbb8, 30
  store i1 %v2_fc10, i1* %cpsr_c.global-to-local, align 1
  %v7_fc10 = icmp eq i32 %v1_fbb8, 31
  store i1 %v7_fc10, i1* %cpsr_z.global-to-local, align 1
  %v2_fc14 = xor i1 %v2_fc10, true
  %v3_fc14 = or i1 %v7_fc10, %v2_fc14
  br i1 %v3_fc14, label %dec_label_pc_fba0, label %dec_label_pc_fc18

dec_label_pc_fc18:                                ; preds = %.thread8, %dec_label_pc_fc10, %bb383
  %v7_fc18 = icmp eq i32 %v1_fba4, 100
  %.465 = zext i1 %v7_fc18 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  %v2_fc24 = icmp ugt i32 %v1_fbb8, 62
  store i1 %v2_fc24, i1* %cpsr_c.global-to-local, align 1
  %v7_fc24 = icmp eq i32 %v1_fbb8, 63
  store i1 %v7_fc24, i1* %cpsr_z.global-to-local, align 1
  %v2_fc28 = xor i1 %v2_fc24, true
  %v3_fc28 = or i1 %v7_fc24, %v2_fc28
  br i1 %v3_fc28, label %.thread13, label %bb386

.thread13:                                        ; preds = %dec_label_pc_fc18
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fc3c

bb386:                                            ; preds = %dec_label_pc_fc18
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc2c = icmp eq i1 %v7_fc18, false
  store i1 %v2_fc2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc2c, label %dec_label_pc_fc3c, label %dec_label_pc_fc34

dec_label_pc_fc34:                                ; preds = %bb386
  %v2_fc34 = icmp ugt i32 %v1_fbb8, 125
  store i1 %v2_fc34, i1* %cpsr_c.global-to-local, align 1
  %v7_fc34 = icmp eq i32 %v1_fbb8, 126
  store i1 %v7_fc34, i1* %cpsr_z.global-to-local, align 1
  %v2_fc38 = xor i1 %v2_fc34, true
  %v3_fc38 = or i1 %v7_fc34, %v2_fc38
  br i1 %v3_fc38, label %dec_label_pc_fba0, label %dec_label_pc_fc3c

dec_label_pc_fc3c:                                ; preds = %.thread13, %dec_label_pc_fc34, %bb386
  %v2_fc3c = icmp ugt i32 %v1_fba4, 168
  store i1 %v2_fc3c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc3c = icmp eq i32 %v1_fba4, 169
  store i1 %v7_fc3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc3c, label %bb387, label %dec_label_pc_fc48

bb387:                                            ; preds = %dec_label_pc_fc3c
  %v3_fc40 = icmp eq i32 %v1_fbb8, 255
  store i1 %v3_fc40, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fc40, label %dec_label_pc_fba0, label %dec_label_pc_fc48

dec_label_pc_fc48:                                ; preds = %dec_label_pc_fc3c, %bb387
  %v7_fc48 = icmp eq i32 %v1_fba4, 198
  %.466 = zext i1 %v7_fc48 to i32
  store i32 %.466, i32* %r3.global-to-local, align 4
  %v2_fc54 = icmp ugt i32 %v1_fbb8, 16
  store i1 %v2_fc54, i1* %cpsr_c.global-to-local, align 1
  %v7_fc54 = icmp eq i32 %v1_fbb8, 17
  store i1 %v7_fc54, i1* %cpsr_z.global-to-local, align 1
  %v2_fc58 = xor i1 %v2_fc54, true
  %v3_fc58 = or i1 %v7_fc54, %v2_fc58
  br i1 %v3_fc58, label %.thread19, label %bb390

.thread19:                                        ; preds = %dec_label_pc_fc48
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fc6c

bb390:                                            ; preds = %dec_label_pc_fc48
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc5c = icmp eq i1 %v7_fc48, false
  store i1 %v2_fc5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc5c, label %dec_label_pc_fc6c, label %dec_label_pc_fc64

dec_label_pc_fc64:                                ; preds = %bb390
  %v2_fc64 = icmp ugt i32 %v1_fbb8, 18
  store i1 %v2_fc64, i1* %cpsr_c.global-to-local, align 1
  %v7_fc64 = icmp eq i32 %v1_fbb8, 19
  store i1 %v7_fc64, i1* %cpsr_z.global-to-local, align 1
  %v2_fc68 = xor i1 %v2_fc64, true
  %v3_fc68 = or i1 %v7_fc64, %v2_fc68
  br i1 %v3_fc68, label %dec_label_pc_fba0, label %dec_label_pc_fc6c

dec_label_pc_fc6c:                                ; preds = %.thread19, %dec_label_pc_fc64, %bb390
  %v2_fc6c = icmp ugt i32 %v1_fba4, 222
  store i1 %v2_fc6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc6c = icmp eq i32 %v1_fba4, 223
  store i1 %v7_fc6c, i1* %cpsr_z.global-to-local, align 1
  %v2_fc70 = xor i1 %v7_fc6c, true
  %v3_fc70 = and i1 %v2_fc6c, %v2_fc70
  br i1 %v3_fc70, label %dec_label_pc_fba0, label %dec_label_pc_fc74

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc6c
  %v7_fc74 = icmp eq i32 %v1_fba4, 106
  %.467 = zext i1 %v7_fc74 to i32
  %v2_fc80 = icmp ugt i32 %v1_fbb8, 185
  store i1 %v2_fc80, i1* %cpsr_c.global-to-local, align 1
  %v7_fc80 = icmp eq i32 %v1_fbb8, 186
  store i1 %v7_fc80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc80, label %bb393, label %dec_label_pc_fc8c

bb393:                                            ; preds = %dec_label_pc_fc74
  %v2_fc74 = icmp ugt i32 %v1_fba4, 105
  store i1 %v2_fc74, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fc74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc74, label %dec_label_pc_fba0, label %dec_label_pc_fc8c.thread

dec_label_pc_fc8c.thread:                         ; preds = %bb393
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fca0

dec_label_pc_fc8c:                                ; preds = %dec_label_pc_fc74
  %v2_fc8c = icmp ugt i32 %v1_fbb8, 186
  store i1 %v2_fc8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc8c = icmp eq i32 %v1_fbb8, 187
  store i1 %v7_fc8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc8c, label %.thread24, label %dec_label_pc_fca0

.thread24:                                        ; preds = %dec_label_pc_fc8c
  store i32 %.467, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc98 = icmp eq i1 %v7_fc74, false
  store i1 %v2_fc98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc98, label %dec_label_pc_fca0.thread, label %dec_label_pc_fba0

dec_label_pc_fca0.thread:                         ; preds = %.thread24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fcb4

dec_label_pc_fca0:                                ; preds = %dec_label_pc_fc8c, %dec_label_pc_fc8c.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fca0 = icmp ugt i32 %v1_fbb8, 184
  store i1 %v2_fca0, i1* %cpsr_c.global-to-local, align 1
  %v7_fca0 = icmp eq i32 %v1_fbb8, 185
  store i1 %v7_fca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fca0, label %.thread28, label %dec_label_pc_fcb4

.thread28:                                        ; preds = %dec_label_pc_fca0
  store i32 %.467, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fcac = icmp eq i1 %v7_fc74, false
  store i1 %v2_fcac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcac, label %dec_label_pc_fcb4.thread, label %dec_label_pc_fba0

dec_label_pc_fcb4.thread:                         ; preds = %.thread28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.thread33

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fca0, %dec_label_pc_fca0.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fcb4 = icmp ugt i32 %v1_fbb8, 183
  store i1 %v2_fcb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcb4 = icmp eq i32 %v1_fbb8, 184
  store i1 %v7_fcb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcb4, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_fcb4.thread, %dec_label_pc_fcb4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fcc8

.thread32:                                        ; preds = %dec_label_pc_fcb4
  store i32 %.467, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fcc0 = icmp eq i1 %v7_fc74, false
  store i1 %v2_fcc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcc0, label %dec_label_pc_fcc8, label %dec_label_pc_fba0

dec_label_pc_fcc8:                                ; preds = %.thread33, %.thread32
  %v2_fcc8 = icmp ugt i32 %v1_fba4, 149
  store i1 %v2_fcc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fcc8 = icmp eq i32 %v1_fba4, 150
  store i1 %v7_fcc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcc8, label %bb394, label %dec_label_pc_fcd4

bb394:                                            ; preds = %dec_label_pc_fcc8
  %v3_fccc = icmp ugt i32 %v1_fbb8, 30
  store i1 %v3_fccc, i1* %cpsr_c.global-to-local, align 1
  %v8_fccc = icmp eq i32 %v1_fbb8, 31
  store i1 %v8_fccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fccc, label %dec_label_pc_fba0, label %dec_label_pc_fcd4.thread

dec_label_pc_fcd4.thread:                         ; preds = %bb394
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fce0.thread

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fcc8
  %v2_fcd4 = icmp ugt i32 %v1_fba4, 48
  store i1 %v2_fcd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcd4 = icmp eq i32 %v1_fba4, 49
  store i1 %v7_fcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcd4, label %bb395, label %dec_label_pc_fce0

bb395:                                            ; preds = %dec_label_pc_fcd4
  %v3_fcd8 = icmp ugt i32 %v1_fbb8, 50
  store i1 %v3_fcd8, i1* %cpsr_c.global-to-local, align 1
  %v8_fcd8 = icmp eq i32 %v1_fbb8, 51
  store i1 %v8_fcd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fcd8, label %dec_label_pc_fba0, label %dec_label_pc_fce0.thread

dec_label_pc_fce0.thread:                         ; preds = %dec_label_pc_fcd4.thread, %bb395
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fcec.thread

dec_label_pc_fce0:                                ; preds = %dec_label_pc_fcd4
  %v2_fce0 = icmp ugt i32 %v1_fba4, 177
  store i1 %v2_fce0, i1* %cpsr_c.global-to-local, align 1
  %v7_fce0 = icmp eq i32 %v1_fba4, 178
  store i1 %v7_fce0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fce0, label %bb396, label %dec_label_pc_fcec

bb396:                                            ; preds = %dec_label_pc_fce0
  %v3_fce4 = icmp ugt i32 %v1_fbb8, 61
  store i1 %v3_fce4, i1* %cpsr_c.global-to-local, align 1
  %v8_fce4 = icmp eq i32 %v1_fbb8, 62
  store i1 %v8_fce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fce4, label %dec_label_pc_fba0, label %dec_label_pc_fcec.thread

dec_label_pc_fcec.thread:                         ; preds = %dec_label_pc_fce0.thread, %bb396
  %v2_fcec479 = icmp ugt i32 %v1_fba4, 159
  store i1 %v2_fcec479, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fcf8.thread

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fce0
  %v2_fcec = icmp ugt i32 %v1_fba4, 159
  store i1 %v2_fcec, i1* %cpsr_c.global-to-local, align 1
  %v7_fcec = icmp eq i32 %v1_fba4, 160
  store i1 %v7_fcec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcec, label %bb397, label %dec_label_pc_fcf8

bb397:                                            ; preds = %dec_label_pc_fcec
  %v3_fcf0 = icmp ugt i32 %v1_fbb8, 12
  store i1 %v3_fcf0, i1* %cpsr_c.global-to-local, align 1
  %v8_fcf0 = icmp eq i32 %v1_fbb8, 13
  store i1 %v8_fcf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fcf0, label %dec_label_pc_fba0, label %dec_label_pc_fcf8.thread

dec_label_pc_fcf8.thread:                         ; preds = %dec_label_pc_fcec.thread, %bb397
  %v1_fcf8481 = add nsw i32 %v1_fba4, -6
  store i32 %v1_fcf8481, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %bb398

dec_label_pc_fcf8:                                ; preds = %dec_label_pc_fcec
  %v1_fcf8 = add nsw i32 %v1_fba4, -6
  store i32 %v1_fcf8, i32* %r3.global-to-local, align 4
  %v2_fcfc = icmp ugt i32 %v1_fba4, 10
  store i1 %v2_fcfc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcfc = icmp eq i32 %v1_fba4, 11
  store i1 %v7_fcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcfc, label %dec_label_pc_fba0, label %bb398

bb398:                                            ; preds = %dec_label_pc_fcf8.thread, %dec_label_pc_fcf8
  %v1_fcf8484 = phi i32 [ %v1_fcf8481, %dec_label_pc_fcf8.thread ], [ %v1_fcf8, %dec_label_pc_fcf8 ]
  %v3_fd00 = icmp ne i32 %v1_fcf8484, 0
  store i1 %v3_fd00, i1* %cpsr_c.global-to-local, align 1
  %v8_fd00 = icmp eq i32 %v1_fcf8484, 1
  store i1 %v8_fd00, i1* %cpsr_z.global-to-local, align 1
  %v2_fd04 = xor i1 %v3_fd00, true
  %v3_fd04 = or i1 %v8_fd00, %v2_fd04
  br i1 %v3_fd04, label %dec_label_pc_fba0, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %bb398
  %v2_fd08 = icmp ugt i32 %v1_fba4, 21
  store i1 %v2_fd08, i1* %cpsr_c.global-to-local, align 1
  %v7_fd08 = icmp eq i32 %v1_fba4, 22
  store i1 %v7_fd08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd08, label %dec_label_pc_fba0, label %bb399

bb399:                                            ; preds = %dec_label_pc_fd08
  %v3_fd0c = icmp ugt i32 %v1_fba4, 20
  store i1 %v3_fd0c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd0c = icmp eq i32 %v1_fba4, 21
  store i1 %v8_fd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd0c, label %dec_label_pc_fba0, label %dec_label_pc_fd14

dec_label_pc_fd14:                                ; preds = %bb399
  %v2_fd14 = icmp ugt i32 %v1_fba4, 27
  store i1 %v2_fd14, i1* %cpsr_c.global-to-local, align 1
  %v7_fd14 = icmp eq i32 %v1_fba4, 28
  store i1 %v7_fd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd14, label %dec_label_pc_fba0, label %bb400

bb400:                                            ; preds = %dec_label_pc_fd14
  %v3_fd18 = icmp ugt i32 %v1_fba4, 25
  store i1 %v3_fd18, i1* %cpsr_c.global-to-local, align 1
  %v8_fd18 = icmp eq i32 %v1_fba4, 26
  store i1 %v8_fd18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd18, label %dec_label_pc_fba0, label %dec_label_pc_fd20

dec_label_pc_fd20:                                ; preds = %bb400
  %v2_fd20 = icmp ugt i32 %v1_fba4, 29
  store i1 %v2_fd20, i1* %cpsr_c.global-to-local, align 1
  %v7_fd20 = icmp eq i32 %v1_fba4, 30
  store i1 %v7_fd20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd20, label %dec_label_pc_fba0, label %bb401

bb401:                                            ; preds = %dec_label_pc_fd20
  %v3_fd24 = icmp ugt i32 %v1_fba4, 28
  store i1 %v3_fd24, i1* %cpsr_c.global-to-local, align 1
  %v8_fd24 = icmp eq i32 %v1_fba4, 29
  store i1 %v8_fd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd24, label %dec_label_pc_fba0, label %dec_label_pc_fd2c

dec_label_pc_fd2c:                                ; preds = %bb401
  %v2_fd2c = icmp ugt i32 %v1_fba4, 54
  store i1 %v2_fd2c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd2c = icmp eq i32 %v1_fba4, 55
  store i1 %v7_fd2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd2c, label %dec_label_pc_fba0, label %bb402

bb402:                                            ; preds = %dec_label_pc_fd2c
  %v3_fd30 = icmp ugt i32 %v1_fba4, 32
  store i1 %v3_fd30, i1* %cpsr_c.global-to-local, align 1
  %v8_fd30 = icmp eq i32 %v1_fba4, 33
  store i1 %v8_fd30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd30, label %dec_label_pc_fba0, label %dec_label_pc_fd38

dec_label_pc_fd38:                                ; preds = %bb402
  %v2_fd38 = icmp ugt i32 %v1_fba4, 214
  store i1 %v2_fd38, i1* %cpsr_c.global-to-local, align 1
  %v7_fd38 = icmp eq i32 %v1_fba4, 215
  store i1 %v7_fd38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd38, label %.thread48, label %bb403

bb403:                                            ; preds = %dec_label_pc_fd38
  %v3_fd3c = icmp ugt i32 %v1_fba4, 213
  store i1 %v3_fd3c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd3c = icmp eq i32 %v1_fba4, 214
  store i1 %v8_fd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd3c, label %bb404, label %dec_label_pc_fd4c

.thread48:                                        ; preds = %dec_label_pc_fd38
  br label %dec_label_pc_fba0

bb404:                                            ; preds = %bb403
  br label %dec_label_pc_fba0

dec_label_pc_fd4c:                                ; preds = %bb403
  %v5_fd58 = call i32 @llvm.bswap.i32(i32 %v0_fba0)
  store i32 %v5_fd58, i32* %r3.global-to-local, align 4
  %tmp405 = and i32 %v0_fba0, 65280
  %tmp406 = call i32 @llvm.bswap.i32(i32 %tmp405)
  %v3_fd60 = udiv i32 %v5_fd58, 16777216
  %tmp407 = and i32 %v0_fba0, 16711680
  %tmp408 = call i32 @llvm.bswap.i32(i32 %tmp407)
  %v4_fd68 = udiv i32 %tmp406, 256
  %v4_fd6c = mul nuw nsw i32 %tmp408, 256
  store i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), i32* @r0, align 4
  %tmp409 = and i32 %v0_fba0, 65536
  %v3_fd74 = icmp ne i32 %tmp409, 0
  store i1 %v3_fd74, i1* %cpsr_c.global-to-local, align 1
  %v4_fd74 = mul i32 %v5_fd58, 16777216
  %v5_fd68 = or i32 %v4_fd74, %v3_fd60
  %v5_fd6c = or i32 %v5_fd68, %v4_fd68
  %v5_fd74 = or i32 %v5_fd6c, %v4_fd6c
  store i32 %v5_fd74, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1a206.175 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_fd74, i32* @global_var_1a20c.176, align 4
  %v2_fd84 = call i32 @function_d414(i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), i32 20)
  %v3_fd84 = trunc i32 %v2_fd84 to i16
  %v3_fd88 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fd88, i32* %r1.global-to-local, align 4
  %v5_fd98 = sdiv i32 %v3_fd88, 10
  %v3_fd9c = mul i32 %v5_fd98, 8
  store i32 %v3_fd9c, i32* %r2.global-to-local, align 4
  %v2_fda4 = mul i32 %v5_fd98, 10
  store i32 %v2_fda4, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), i32* %ip.global-to-local, align 4
  %v3_fdac = icmp uge i32 %v3_fd88, %v2_fda4
  store i1 %v3_fdac, i1* %cpsr_c.global-to-local, align 1
  %v9_fdac = icmp eq i32 %v3_fd88, %v2_fda4
  store i1 %v9_fdac, i1* %cpsr_z.global-to-local, align 1
  store i16 %v3_fd84, i16* bitcast (i32* @global_var_1a206.175 to i16*), align 4
  br i1 %v9_fdac, label %.thread57.thread, label %bb410

.thread57.thread:                                 ; preds = %dec_label_pc_fd4c
  store i32 4873, i32* %r3.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32 2) to i16*), align 2
  %v3_fdc8286 = load i32, i32* @global_var_1a20c.176, align 4
  store i32 %v3_fdc8286, i32* @global_var_1a214.178, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb411

bb410:                                            ; preds = %dec_label_pc_fd4c
  %v3_fdc8289 = load i32, i32* @global_var_1a20c.176, align 4
  store i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r2.global-to-local, align 4
  store i32 %v3_fdc8289, i32* @global_var_1a214.178, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32 2) to i16*), align 2
  br label %bb411

bb411:                                            ; preds = %.thread57.thread, %bb410
  store i16 0, i16* bitcast (i32* @global_var_1a220.179 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v4_fdf4 = call i32 @function_d464(i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32 5120, i32 20)
  %v5_fdf4 = trunc i32 %v4_fdf4 to i16
  store i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), i32* %r1.global-to-local, align 4
  %v2_fe00 = load i32, i32* @global_var_1a250.131, align 4
  store i16 %v5_fdf4, i16* bitcast (i32* @global_var_1a220.179 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_10400, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v9_fe48 = call i32 @sendto(i32 %v2_fe00, i32* nonnull @global_var_1a1fc.133, i32 40, i32 16384, %sockaddr* %tmp375, i32 16)
  %v3_fe4c = load i32, i32* %stack_var_-52, align 4
  %v1_fe50 = add i32 %v3_fe4c, 1
  store i32 %v1_fe50, i32* %r3.global-to-local, align 4
  %v3_fe54 = icmp ugt i32 %v1_fe50, 483
  store i1 %v3_fe54, i1* %cpsr_c.global-to-local, align 1
  %v8_fe54 = icmp eq i32 %v1_fe50, 484
  store i1 %v8_fe54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fe50, i32* %stack_var_-52, align 4
  %v5_fe5c = icmp slt i32 %v1_fe50, 484
  br i1 %v5_fe5c, label %dec_label_pc_fb74, label %dec_label_pc_fe60

dec_label_pc_fe60:                                ; preds = %bb411
  %v0_fe60 = load i32, i32* @r4, align 4
  br label %dec_label_pc_fe64

dec_label_pc_fe64:                                ; preds = %dec_label_pc_fb50, %dec_label_pc_fe60
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_fb50 ], [ %v0_fe60, %dec_label_pc_fe60 ]
  %v0_fe64 = call i32* @__errno_location()
  %v2_fe64 = ptrtoint i32* %v0_fe64 to i32
  store i32 %v2_fb48, i32* %r1.global-to-local, align 4
  store i32 %v1_fe70, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_fe78

dec_label_pc_fe78:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_ff34, %dec_label_pc_ff2c, %dec_label_pc_ff08, %dec_label_pc_fef8, %dec_label_pc_fee0, %dec_label_pc_fec8, %dec_label_pc_ff24, %dec_label_pc_ff18, %dec_label_pc_fec0, %dec_label_pc_fffc, %dec_label_pc_fe64
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v0_fe64, align 4
  %v2_fe8c = load i32, i32* @global_var_1a250.131, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_fb48, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe9c = load i32, i32* %ip.global-to-local, align 4
  %v4_fea0 = inttoptr i32 %v0_fe9c to %sockaddr*
  %v9_fea4 = inttoptr i32 %v0_fe9c to i32*
  %v10_fea4 = call i32 @recvfrom(i32 %v2_fe8c, i32* nonnull %stack_var_-1866, i32 1514, i32 16384, %sockaddr* %v4_fea0, i32* %v9_fea4)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fea8 = icmp eq i32 %v10_fea4, 0
  store i1 %v2_fea8, i1* %cpsr_z.global-to-local, align 1
  %tmp412 = icmp slt i32 %v10_fea4, 1
  br i1 %tmp412, label %dec_label_pc_1000c, label %dec_label_pc_feb0

dec_label_pc_feb0:                                ; preds = %dec_label_pc_fe78
  store i32 %v2_fe64, i32* %ip.global-to-local, align 4
  %v2_feb4 = load i32, i32* %v0_fe64, align 4
  store i32 %v2_feb4, i32* %r3.global-to-local, align 4
  %v2_feb8 = icmp ugt i32 %v2_feb4, 10
  store i1 %v2_feb8, i1* %cpsr_c.global-to-local, align 1
  %v7_feb8 = icmp eq i32 %v2_feb4, 11
  store i1 %v7_feb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_feb8, label %dec_label_pc_1000c, label %dec_label_pc_fec0

dec_label_pc_fec0:                                ; preds = %dec_label_pc_feb0
  %v2_fec0 = icmp ugt i32 %v10_fea4, 38
  store i1 %v2_fec0, i1* %cpsr_c.global-to-local, align 1
  %v7_fec0 = icmp eq i32 %v10_fea4, 39
  store i1 %v7_fec0, i1* %cpsr_z.global-to-local, align 1
  %v2_fec4 = xor i1 %v2_fec0, true
  %v3_fec4 = or i1 %v7_fec0, %v2_fec4
  br i1 %v3_fec4, label %dec_label_pc_fe78, label %dec_label_pc_fec8

dec_label_pc_fec8:                                ; preds = %dec_label_pc_fec0
  store i32 ptrtoint (i32* @global_var_1a230.41 to i32), i32* %r1.global-to-local, align 4
  %v3_fed0 = load i32, i32* %v2_fed0, align 4
  store i32 %v3_fed0, i32* %r2.global-to-local, align 4
  %v2_fed4 = load i32, i32* @global_var_1a230.41, align 4
  store i32 %v2_fed4, i32* %r3.global-to-local, align 4
  %v3_fed8 = icmp uge i32 %v3_fed0, %v2_fed4
  store i1 %v3_fed8, i1* %cpsr_c.global-to-local, align 1
  %v9_fed8 = icmp eq i32 %v3_fed0, %v2_fed4
  store i1 %v9_fed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fed8, label %dec_label_pc_fee0, label %dec_label_pc_fe78

dec_label_pc_fee0:                                ; preds = %dec_label_pc_fec8
  %v3_fee0 = load i8, i8* %v2_fee0, align 1
  %v4_fee0 = zext i8 %v3_fee0 to i32
  store i32 %v4_fee0, i32* %r3.global-to-local, align 4
  %v2_fee4 = icmp ugt i8 %v3_fee0, 5
  store i1 %v2_fee4, i1* %cpsr_c.global-to-local, align 1
  %v7_fee4 = icmp eq i8 %v3_fee0, 6
  store i1 %v7_fee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fee4, label %dec_label_pc_feec, label %dec_label_pc_fe78

dec_label_pc_feec:                                ; preds = %dec_label_pc_fee0
  %v0_feec = load i32, i32* @r4, align 4
  %v1_feec = inttoptr i32 %v0_feec to i16*
  %v2_feec = load i16, i16* %v1_feec, align 2
  %v3_feec = zext i16 %v2_feec to i32
  store i32 %v3_feec, i32* %ip.global-to-local, align 4
  %v2_fef0 = icmp ugt i16 %v2_feec, 5887
  store i1 %v2_fef0, i1* %cpsr_c.global-to-local, align 1
  %v7_fef0 = icmp eq i16 %v2_feec, 5888
  store i1 %v7_fef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fef0, label %dec_label_pc_ff08, label %dec_label_pc_fef8

dec_label_pc_fef8:                                ; preds = %dec_label_pc_feec
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ff00 = icmp ugt i16 %v2_feec, 4872
  store i1 %v3_ff00, i1* %cpsr_c.global-to-local, align 1
  %v9_ff00 = icmp eq i16 %v2_feec, 4873
  store i1 %v9_ff00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ff00, label %dec_label_pc_ff08, label %dec_label_pc_fe78

dec_label_pc_ff08:                                ; preds = %dec_label_pc_fef8, %dec_label_pc_feec
  %v1_ff08 = add i32 %v0_feec, 2
  %v2_ff08 = inttoptr i32 %v1_ff08 to i16*
  %v3_ff08 = load i16, i16* %v2_ff08, align 2
  %v4_ff08 = zext i16 %v3_ff08 to i32
  store i32 %v4_ff08, i32* %r3.global-to-local, align 4
  store i32 %v4_fa2c, i32* %r2.global-to-local, align 4
  %v3_ff10 = icmp uge i32 %v4_ff08, %v4_fa2c
  store i1 %v3_ff10, i1* %cpsr_c.global-to-local, align 1
  %v9_ff10 = icmp eq i32 %v4_ff08, %v4_fa2c
  store i1 %v9_ff10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ff10, label %dec_label_pc_ff18, label %dec_label_pc_fe78

dec_label_pc_ff18:                                ; preds = %dec_label_pc_ff08
  %v1_ff18 = add i32 %v0_feec, 13
  %v2_ff18 = inttoptr i32 %v1_ff18 to i8*
  %v3_ff18 = load i8, i8* %v2_ff18, align 1
  %v4_ff18 = zext i8 %v3_ff18 to i32
  store i32 %v4_ff18, i32* %r3.global-to-local, align 4
  %v1_ff1c = and i32 %v4_ff18, 2
  %v2_ff1c = icmp eq i32 %v1_ff1c, 0
  store i1 %v2_ff1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff1c, label %dec_label_pc_fe78, label %dec_label_pc_ff24

dec_label_pc_ff24:                                ; preds = %dec_label_pc_ff18
  %v1_ff24 = and i32 %v4_ff18, 16
  %v2_ff24 = icmp eq i32 %v1_ff24, 0
  store i1 %v2_ff24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff24, label %dec_label_pc_fe78, label %dec_label_pc_ff2c

dec_label_pc_ff2c:                                ; preds = %dec_label_pc_ff24
  %v1_ff2c = and i32 %v4_ff18, 4
  %v2_ff2c = icmp eq i32 %v1_ff2c, 0
  store i1 %v2_ff2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff2c, label %dec_label_pc_ff34, label %dec_label_pc_fe78

dec_label_pc_ff34:                                ; preds = %dec_label_pc_ff2c
  %tmp = urem i8 %v3_ff18, 2
  %v2_ff34 = icmp eq i8 %tmp, 0
  store i1 %v2_ff34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff34, label %dec_label_pc_ff3c, label %dec_label_pc_fe78

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff34
  %v1_ff3c = add i32 %v0_feec, 8
  %v2_ff3c = inttoptr i32 %v1_ff3c to i32*
  %v3_ff3c = load i32, i32* %v2_ff3c, align 4
  %v5_ff54 = call i32 @llvm.bswap.i32(i32 %v3_ff3c)
  %v1_ff58 = add i32 %v5_ff54, -1
  store i32 %v1_ff58, i32* %r2.global-to-local, align 4
  %v1_ff5c = and i32 %v1_ff58, 16711680
  %v3_ff60 = udiv i32 %v1_ff58, 16777216
  %v4_ff68 = udiv i32 %v1_ff5c, 256
  %v5_ff68 = or i32 %v4_ff68, %v3_ff60
  %v1_ff64 = mul i32 %v1_ff58, 256
  %v4_ff6c = and i32 %v1_ff64, 16711680
  %v5_ff6c = or i32 %v5_ff68, %v4_ff6c
  store i32 %v5_ff6c, i32* %r3.global-to-local, align 4
  store i32 %v2_fb48, i32* %r1.global-to-local, align 4
  %v3_ff74 = load i32, i32* %v2_ff74, align 4
  store i32 %v3_ff74, i32* @lr, align 4
  %v5_ff78 = call i32 @llvm.bswap.i32(i32 %v1_ff58)
  store i32 %v5_ff78, i32* %r3.global-to-local, align 4
  %v3_ff7c = icmp uge i32 %v5_ff78, %v3_ff74
  store i1 %v3_ff7c, i1* %cpsr_c.global-to-local, align 1
  %v9_ff7c = icmp eq i32 %v5_ff78, %v3_ff74
  store i1 %v9_ff7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ff7c, label %dec_label_pc_ff84, label %dec_label_pc_fe78

dec_label_pc_ff84:                                ; preds = %dec_label_pc_ff3c
  %v0_ff84 = load i32, i32* @r5, align 4
  %v3_ff84 = icmp ugt i32 %v0_ff84, 355
  store i1 %v3_ff84, i1* %cpsr_c.global-to-local, align 1
  %v8_ff84 = icmp eq i32 %v0_ff84, 356
  store i1 %v8_ff84, i1* %cpsr_z.global-to-local, align 1
  %v6_ff88 = icmp slt i32 %v0_ff84, 356
  br i1 %v6_ff88, label %dec_label_pc_ff8c, label %dec_label_pc_1000c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff84
  store i32 ptrtoint (i32* @global_var_1a24c.129 to i32), i32* %r2.global-to-local, align 4
  %v2_ff98 = load i32, i32* @global_var_1a24c.129, align 4
  store i32 %v2_ff98, i32* %r1.global-to-local, align 4
  %v3_ffa0 = mul i32 %v0_ff84, 388
  store i32 %v3_ffa0, i32* %r3.global-to-local, align 4
  %v2_ffa4 = add i32 %v2_ff98, %v3_ffa0
  store i32 %v2_ffa4, i32* @r0, align 4
  %v1_ffa8 = add i32 %v2_ffa4, 12
  %v2_ffa8 = inttoptr i32 %v1_ffa8 to i32*
  %v3_ffa8 = load i32, i32* %v2_ffa8, align 4
  store i32 %v3_ffa8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffac = icmp eq i32 %v3_ffa8, 0
  store i1 %v2_ffac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffac, label %dec_label_pc_fff4, label %dec_label_pc_ffd0.preheader

dec_label_pc_ffd0.preheader:                      ; preds = %dec_label_pc_ff8c
  %v2_ffb0 = add i32 %v0_ff84, 1
  %v3_ffbc = mul i32 %v2_ffb0, 97
  %v2_ffc0 = and i32 %v3_ffbc, 1073741824
  %v3_ffc0 = icmp ne i32 %v2_ffc0, 0
  store i1 %v3_ffc0, i1* %cpsr_c.global-to-local, align 1
  %v4_ffc0 = mul i32 %v2_ffb0, 388
  %v3_ffc4 = add i32 %v2_ff98, %v4_ffc0
  store i32 %v3_ffc4, i32* %r3.global-to-local, align 4
  store i32 %v0_ff84, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ffd0

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffd0.preheader, %dec_label_pc_ffdc
  %v0_ffdc = phi i32 [ %v3_ffc4, %dec_label_pc_ffd0.preheader ], [ %v1_ffe8, %dec_label_pc_ffdc ]
  %v0_ffd0 = phi i32 [ %v0_ff84, %dec_label_pc_ffd0.preheader ], [ %v1_ffd0, %dec_label_pc_ffdc ]
  %v1_ffd0 = add i32 %v0_ffd0, 1
  store i32 %v1_ffd0, i32* %r2.global-to-local, align 4
  %v7_ffd4 = icmp eq i32 %v1_ffd0, 356
  br i1 %v7_ffd4, label %dec_label_pc_1000c.loopexit, label %dec_label_pc_ffdc

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_ffd0
  store i32 %v0_ffdc, i32* @r0, align 4
  %v1_ffe0 = add i32 %v0_ffdc, 12
  %v2_ffe0 = inttoptr i32 %v1_ffe0 to i32*
  %v3_ffe0 = load i32, i32* %v2_ffe0, align 4
  %v2_ffe4 = icmp eq i32 %v3_ffe0, 0
  %v1_ffe8 = add i32 %v0_ffdc, 388
  store i32 %v1_ffe8, i32* %r3.global-to-local, align 4
  br i1 %v2_ffe4, label %dec_label_pc_fff0, label %dec_label_pc_ffd0

dec_label_pc_fff0:                                ; preds = %dec_label_pc_ffdc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ffd0, i32* @r5, align 4
  br label %dec_label_pc_fff4

dec_label_pc_fff4:                                ; preds = %dec_label_pc_ff8c, %dec_label_pc_fff0
  %v1_fffc = phi i32 [ %v2_ffa4, %dec_label_pc_ff8c ], [ %v0_ffdc, %dec_label_pc_fff0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fff4 = icmp eq i32 %v1_fffc, 0
  store i1 %v2_fff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fff4, label %dec_label_pc_1000c, label %dec_label_pc_fffc

dec_label_pc_fffc:                                ; preds = %dec_label_pc_fff4
  %v2_fffc = add i32 %v1_fffc, 16
  %v3_fffc = inttoptr i32 %v2_fffc to i32*
  store i32 %v3_ff74, i32* %v3_fffc, align 4
  %v0_10000 = load i32, i32* %ip.global-to-local, align 4
  %v1_10000 = trunc i32 %v0_10000 to i16
  %v2_10000 = load i32, i32* @r0, align 4
  %v3_10000 = add i32 %v2_10000, 20
  %v4_10000 = inttoptr i32 %v3_10000 to i16*
  store i16 %v1_10000, i16* %v4_10000, align 2
  %v0_10004 = call i32 @function_f630()
  br label %dec_label_pc_fe78

dec_label_pc_1000c.loopexit:                      ; preds = %dec_label_pc_ffd0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1000c

dec_label_pc_1000c:                               ; preds = %dec_label_pc_ff84, %dec_label_pc_fff4, %dec_label_pc_feb0, %dec_label_pc_fe78, %dec_label_pc_1000c.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_1002c535 = load i32, i32* %sp.global-to-local, align 4
  %v3_1002c536 = add i32 %v2_1002c535, 1676
  %v4_1002c537 = inttoptr i32 %v3_1002c536 to i32*
  store i32 0, i32* %v4_1002c537, align 4
  br label %dec_label_pc_10018.dec_label_pc_10018_crit_edge

dec_label_pc_10018.dec_label_pc_10018_crit_edge:  ; preds = %dec_label_pc_1000c, %dec_label_pc_10018.dec_label_pc_10018_crit_edge
  %v0_10018.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1001c = add i32 %v0_10018.pre, 4
  store i32 %v1_1001c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10024 = add i32 %v0_10018.pre, 1672
  store i32 %v1_10024, i32* %ip.global-to-local, align 4
  %v7_10028 = icmp eq i32 %v1_1001c, 128
  %v2_1002c = load i32, i32* %sp.global-to-local, align 4
  %v3_1002c = add i32 %v2_1002c, %v1_10024
  %v4_1002c = inttoptr i32 %v3_1002c to i32*
  store i32 0, i32* %v4_1002c, align 4
  br i1 %v7_10028, label %dec_label_pc_10034, label %dec_label_pc_10018.dec_label_pc_10018_crit_edge

dec_label_pc_10034:                               ; preds = %dec_label_pc_10018.dec_label_pc_10018_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10034 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10034, i32* %stack_var_-352, align 4
  %v1_10040538 = add i32 %v0_10034, 8
  store i32 %v1_10040538, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_10048539 = add i32 %v0_10034, 1548
  store i32 %v1_10048539, i32* @lr, align 4
  %v7_1004c540 = icmp eq i32 %v1_10040538, 128
  %v2_10050541 = load i32, i32* %sp.global-to-local, align 4
  %v3_10050542 = add i32 %v2_10050541, %v1_10048539
  %v4_10050543 = inttoptr i32 %v3_10050542 to i32*
  store i32 0, i32* %v4_10050543, align 4
  br i1 %v7_1004c540, label %dec_label_pc_10058, label %dec_label_pc_1003c.dec_label_pc_1003c_crit_edge

dec_label_pc_1003c.dec_label_pc_1003c_crit_edge:  ; preds = %dec_label_pc_10034, %dec_label_pc_1003c.dec_label_pc_1003c_crit_edge
  %v0_1003c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_10040 = add i32 %v0_1003c.pre, 4
  store i32 %v1_10040, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_10048 = add i32 %v0_1003c.pre, 1544
  store i32 %v1_10048, i32* @lr, align 4
  %v7_1004c = icmp eq i32 %v1_10040, 128
  %v2_10050 = load i32, i32* %sp.global-to-local, align 4
  %v3_10050 = add i32 %v2_10050, %v1_10048
  %v4_10050 = inttoptr i32 %v3_10050 to i32*
  store i32 0, i32* %v4_10050, align 4
  br i1 %v7_1004c, label %dec_label_pc_10058, label %dec_label_pc_1003c.dec_label_pc_1003c_crit_edge

dec_label_pc_10058:                               ; preds = %dec_label_pc_1003c.dec_label_pc_1003c_crit_edge, %dec_label_pc_10034
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10058 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10058, i32* @r6, align 4
  store i32 %v0_10058, i32* @r5, align 4
  store i32 %v0_10058, i32* %stack_var_-52, align 4
  br label %dec_label_pc_100b4

dec_label_pc_10068:                               ; preds = %dec_label_pc_100e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_100d4, i1* %cpsr_z.global-to-local, align 1
  %v1_10158 = add i32 %v2_100cc, 4
  %v2_10158 = inttoptr i32 %v1_10158 to i32*
  %v3_10158 = load i32, i32* %v2_10158, align 4
  br i1 %v7_100d4, label %dec_label_pc_10158, label %dec_label_pc_10070

dec_label_pc_10070:                               ; preds = %dec_label_pc_10068
  store i32 %v3_10158, i32* %ip.global-to-local, align 4
  %v3_10074 = udiv i32 %v3_10158, 32
  store i32 %v2_10164, i32* %r1.global-to-local, align 4
  %v3_1007c = mul nuw nsw i32 %v3_10074, 4
  %v2_10080 = add i32 %v3_1007c, %v2_10164
  store i32 %v2_10080, i32* %r3.global-to-local, align 4
  %v1_10084 = add i32 %v2_10080, -184
  %v2_10084 = inttoptr i32 %v1_10084 to i32*
  %v3_10084 = load i32, i32* %v2_10084, align 4
  %v1_10088 = urem i32 %v3_10158, 32
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_10090 = shl i32 1, %v1_10088
  %v8_10090 = or i32 %v3_10084, %v7_10090
  store i32 %v8_10090, i32* %r2.global-to-local, align 4
  store i32 %v8_10090, i32* %v2_10084, align 4
  %v0_10098 = load i32, i32* @r6, align 4
  %v1_10098 = load i32, i32* %ip.global-to-local, align 4
  %v3_10098 = icmp uge i32 %v0_10098, %v1_10098
  store i1 %v3_10098, i1* %cpsr_c.global-to-local, align 1
  %v9_10098 = icmp eq i32 %v0_10098, %v1_10098
  store i1 %v9_10098, i1* %cpsr_z.global-to-local, align 1
  %v5_1009c = icmp slt i32 %v0_10098, %v1_10098
  br i1 %v5_1009c, label %bb413, label %bb414

bb413:                                            ; preds = %dec_label_pc_10070
  store i32 %v1_10098, i32* @r6, align 4
  br label %bb414

bb414:                                            ; preds = %.thread77, %bb420, %bb418, %bb422, %dec_label_pc_1014c, %dec_label_pc_10070, %bb413
  %v3_100a0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_100a0, i32* %r3.global-to-local, align 4
  %v1_100a4 = add i32 %v3_100a0, 1
  store i32 %v1_100a4, i32* %r2.global-to-local, align 4
  %v3_100a8 = icmp ugt i32 %v1_100a4, 355
  store i1 %v3_100a8, i1* %cpsr_c.global-to-local, align 1
  %v8_100a8 = icmp eq i32 %v1_100a4, 356
  store i1 %v8_100a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_100a4, i32* %stack_var_-52, align 4
  %v6_100b0 = icmp slt i32 %v1_100a4, 356
  br i1 %v6_100b0, label %dec_label_pc_100b4, label %dec_label_pc_10188

dec_label_pc_100b4:                               ; preds = %bb414, %dec_label_pc_10058
  %v1_100c0 = phi i32 [ %v1_100a4, %bb414 ], [ %v0_10058, %dec_label_pc_10058 ]
  store i32 ptrtoint (i32* @global_var_1a24c.129 to i32), i32* %r1.global-to-local, align 4
  %v2_100c4 = load i32, i32* @global_var_1a24c.129, align 4
  store i32 %v2_100c4, i32* %r2.global-to-local, align 4
  %v3_100c8 = mul i32 %v1_100c0, 388
  store i32 %v3_100c8, i32* %r3.global-to-local, align 4
  %v2_100cc = add i32 %v2_100c4, %v3_100c8
  store i32 %v2_100cc, i32* @r4, align 4
  %v1_100d0 = add i32 %v2_100cc, 12
  %v2_100d0 = inttoptr i32 %v1_100d0 to i32*
  %v3_100d0 = load i32, i32* %v2_100d0, align 4
  store i32 %v3_100d0, i32* %ip.global-to-local, align 4
  %v2_100d4 = icmp ne i32 %v3_100d0, 0
  store i1 %v2_100d4, i1* %cpsr_c.global-to-local, align 1
  %v7_100d4 = icmp eq i32 %v3_100d0, 1
  store i1 %v7_100d4, i1* %cpsr_z.global-to-local, align 1
  %v2_100d8 = xor i1 %v2_100d4, true
  %v3_100d8 = or i1 %v7_100d4, %v2_100d8
  br i1 %v3_100d8, label %bb415, label %bb416

bb415:                                            ; preds = %dec_label_pc_100b4
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb416

bb416:                                            ; preds = %dec_label_pc_100b4, %bb415
  %v1_100f8214 = phi i32 [ ptrtoint (i32* @global_var_1a24c.129 to i32), %dec_label_pc_100b4 ], [ 5, %bb415 ]
  %v2_100dc = xor i1 %v7_100d4, true
  %v3_100dc = and i1 %v2_100d4, %v2_100dc
  br i1 %v3_100dc, label %bb417, label %bb418

bb417:                                            ; preds = %bb416
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb418

bb418:                                            ; preds = %bb416, %bb417
  %v1_100f8 = phi i32 [ %v1_100f8214, %bb416 ], [ 30, %bb417 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100e0 = icmp eq i32 %v3_100d0, 0
  store i1 %v2_100e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100e0, label %bb414, label %dec_label_pc_100e8

dec_label_pc_100e8:                               ; preds = %bb418
  store i32 ptrtoint (i32* @global_var_1a22c.118 to i32), i32* %r2.global-to-local, align 4
  %v2_100ec = load i32, i32* @global_var_1a22c.118, align 4
  store i32 %v2_100ec, i32* %r3.global-to-local, align 4
  %v1_100f0 = add i32 %v2_100cc, 8
  %v2_100f0 = inttoptr i32 %v1_100f0 to i32*
  %v3_100f0 = load i32, i32* %v2_100f0, align 4
  store i32 %v3_100f0, i32* %r2.global-to-local, align 4
  %v2_100f4 = sub i32 %v2_100ec, %v3_100f0
  store i32 %v2_100f4, i32* %r3.global-to-local, align 4
  %v3_100f8 = icmp uge i32 %v2_100f4, %v1_100f8
  store i1 %v3_100f8, i1* %cpsr_c.global-to-local, align 1
  %v9_100f8 = icmp eq i32 %v2_100f4, %v1_100f8
  store i1 %v9_100f8, i1* %cpsr_z.global-to-local, align 1
  %v2_100fc = xor i1 %v3_100f8, true
  %v3_100fc = or i1 %v9_100f8, %v2_100fc
  br i1 %v3_100fc, label %dec_label_pc_10068, label %dec_label_pc_10100

dec_label_pc_10100:                               ; preds = %dec_label_pc_100e8
  %v1_10100 = add i32 %v2_100cc, 4
  %v2_10100 = inttoptr i32 %v1_10100 to i32*
  %v3_10100 = load i32, i32* %v2_10100, align 4
  %v1_10104 = call i32 @close(i32 %v3_10100)
  %v0_10108 = load i32, i32* @r4, align 4
  %v1_10108 = add i32 %v0_10108, 12
  %v2_10108 = inttoptr i32 %v1_10108 to i32*
  %v3_10108 = load i32, i32* %v2_10108, align 4
  store i32 %v3_10108, i32* %r3.global-to-local, align 4
  %v2_1010c = icmp ugt i32 %v3_10108, 1
  store i1 %v2_1010c, i1* %cpsr_c.global-to-local, align 1
  %v7_1010c = icmp eq i32 %v3_10108, 2
  store i1 %v7_1010c, i1* %cpsr_z.global-to-local, align 1
  %v2_10110 = xor i1 %v2_1010c, true
  %v3_10110 = or i1 %v7_1010c, %v2_10110
  br i1 %v3_10110, label %bb419, label %.thread298

.thread298:                                       ; preds = %dec_label_pc_10100
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10118295299 = add i32 %v0_10108, 4
  %v3_10118296300 = inttoptr i32 %v2_10118295299 to i32*
  store i32 -1, i32* %v3_10118296300, align 4
  br label %bb420

bb419:                                            ; preds = %dec_label_pc_10100
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10118292 = add i32 %v0_10108, 4
  %v3_10118293 = inttoptr i32 %v2_10118292 to i32*
  store i32 -1, i32* %v3_10118293, align 4
  %v4_1011c = load i32, i32* %r3.global-to-local, align 4
  %v5_1011c = load i32, i32* @r4, align 4
  %v6_1011c = add i32 %v5_1011c, 12
  %v7_1011c = inttoptr i32 %v6_1011c to i32*
  store i32 %v4_1011c, i32* %v7_1011c, align 4
  %v4_10120 = load i32, i32* %r3.global-to-local, align 4
  %v5_10120 = trunc i32 %v4_10120 to i8
  %v6_10120 = load i32, i32* @r4, align 4
  %v7_10120 = add i32 %v6_10120, 384
  %v8_10120 = inttoptr i32 %v7_10120 to i8*
  store i8 %v5_10120, i8* %v8_10120, align 1
  %v0_10124.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10124.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb420

bb420:                                            ; preds = %.thread298, %bb419
  %v1_10124 = phi i1 [ %v1_10124.pre, %bb419 ], [ %v2_1010c, %.thread298 ]
  %v0_10124 = phi i1 [ %v0_10124.pre, %bb419 ], [ false, %.thread298 ]
  %v2_10124 = xor i1 %v1_10124, true
  %v3_10124 = or i1 %v0_10124, %v2_10124
  br i1 %v3_10124, label %bb414, label %dec_label_pc_10128

dec_label_pc_10128:                               ; preds = %bb420
  %v0_10128 = load i32, i32* @r4, align 4
  %v1_10128 = add i32 %v0_10128, 384
  %v2_10128 = inttoptr i32 %v1_10128 to i8*
  %v3_10128 = load i8, i8* %v2_10128, align 1
  %v4_10128 = zext i8 %v3_10128 to i32
  %v1_1012c = add nuw nsw i32 %v4_10128, 1
  %v1_10130 = urem i32 %v1_1012c, 256
  store i32 %v1_10130, i32* %r3.global-to-local, align 4
  %v2_10134 = icmp ugt i32 %v1_10130, 9
  store i1 %v2_10134, i1* %cpsr_c.global-to-local, align 1
  %v7_10134 = icmp eq i32 %v1_10130, 10
  store i1 %v7_10134, i1* %cpsr_z.global-to-local, align 1
  %v1_10138 = trunc i32 %v1_1012c to i8
  store i8 %v1_10138, i8* %v2_10128, align 1
  %v0_1013c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1013c, label %.thread77, label %dec_label_pc_1014c

.thread77:                                        ; preds = %dec_label_pc_10128
  %v1_1013c = load i32, i32* %r3.global-to-local, align 4
  %v2_1013c = add i32 %v1_1013c, -10
  store i32 %v2_1013c, i32* %r3.global-to-local, align 4
  %v2_10140 = load i32, i32* @r4, align 4
  %v3_10140 = add i32 %v2_10140, 12
  %v4_10140 = inttoptr i32 %v3_10140 to i32*
  store i32 %v2_1013c, i32* %v4_10140, align 4
  %v1_10144 = load i32, i32* %r3.global-to-local, align 4
  %v2_10144 = trunc i32 %v1_10144 to i8
  %v3_10144 = load i32, i32* @r4, align 4
  %v4_10144 = add i32 %v3_10144, 384
  %v5_10144 = inttoptr i32 %v4_10144 to i8*
  store i8 %v2_10144, i8* %v5_10144, align 1
  %v0_10148.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10148.pr.pr, label %bb414, label %dec_label_pc_1014c

dec_label_pc_1014c:                               ; preds = %dec_label_pc_10128, %.thread77
  %v0_1014c = load i32, i32* @r4, align 4
  store i32 %v0_1014c, i32* @r0, align 4
  %v0_10150 = call i32 @function_f630()
  br label %bb414

dec_label_pc_10158:                               ; preds = %dec_label_pc_10068
  %v3_1015c = udiv i32 %v3_10158, 32
  %v3_10160 = mul nuw nsw i32 %v3_1015c, 4
  store i32 %v2_10164, i32* @lr, align 4
  %v2_10168 = add i32 %v3_10160, %v2_10164
  store i32 %v2_10168, i32* %r3.global-to-local, align 4
  %v1_1016c = add i32 %v2_10168, -312
  %v2_1016c = inttoptr i32 %v1_1016c to i32*
  %v3_1016c = load i32, i32* %v2_1016c, align 4
  %v1_10170 = urem i32 %v3_10158, 32
  store i32 %v1_10170, i32* %r1.global-to-local, align 4
  %v7_10174 = shl i32 1, %v1_10170
  %v8_10174 = or i32 %v3_1016c, %v7_10174
  store i32 %v8_10174, i32* %r2.global-to-local, align 4
  %v0_10178 = load i32, i32* @r5, align 4
  %v3_10178 = icmp uge i32 %v0_10178, %v3_10158
  store i1 %v3_10178, i1* %cpsr_c.global-to-local, align 1
  %v9_10178 = icmp eq i32 %v0_10178, %v3_10158
  store i1 %v9_10178, i1* %cpsr_z.global-to-local, align 1
  %v5_1017c = icmp slt i32 %v0_10178, %v3_10158
  br i1 %v5_1017c, label %bb421, label %bb422

bb421:                                            ; preds = %dec_label_pc_10158
  store i32 %v3_10158, i32* @r5, align 4
  br label %bb422

bb422:                                            ; preds = %dec_label_pc_10158, %bb421
  store i32 %v8_10174, i32* %v2_1016c, align 4
  br label %bb414

dec_label_pc_10188:                               ; preds = %bb414
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_10194 = load i32, i32* @r5, align 4
  %v1_10194 = load i32, i32* @r6, align 4
  %v3_10194 = icmp uge i32 %v0_10194, %v1_10194
  store i1 %v3_10194, i1* %cpsr_c.global-to-local, align 1
  %v9_10194 = icmp eq i32 %v0_10194, %v1_10194
  store i1 %v9_10194, i1* %cpsr_z.global-to-local, align 1
  %v5_10198 = icmp slt i32 %v0_10194, %v1_10194
  %storemerge158 = select i1 %v5_10198, i32 %v1_10194, i32 %v0_10194
  store i32 %v2_101ac, i32* %ip.global-to-local, align 4
  store i32 %v2_101b0, i32* %r1.global-to-local, align 4
  store i32 %v2_101b4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_101bc = add i32 %storemerge158, 1
  %v13_101c8 = call i32 @select(i32 %v1_101bc, %_TYPEDEF_fd_set* %tmp371, %_TYPEDEF_fd_set* %tmp372, %_TYPEDEF_fd_set* null, %timeval* %tmp374)
  %v0_101cc = load i32, i32* %r4.global-to-local, align 4
  %v1_101d0 = inttoptr i32 %v0_101cc to i32*
  %v2_101d0 = call i32 @time(i32* %v1_101d0)
  store i32 ptrtoint (i32* @global_var_1a22c.118 to i32), i32* @lr, align 4
  store i32 %v0_101cc, i32* %stack_var_-52, align 4
  store i32 %v2_101d0, i32* @global_var_1a22c.118, align 4
  br label %dec_label_pc_101e0

dec_label_pc_101e0:                               ; preds = %dec_label_pc_10354, %dec_label_pc_10188
  %v1_101ec = phi i32 [ %v1_10358, %dec_label_pc_10354 ], [ %v0_101cc, %dec_label_pc_10188 ]
  store i32 ptrtoint (i32* @global_var_1a24c.129 to i32), i32* %r1.global-to-local, align 4
  %v2_101f0 = load i32, i32* @global_var_1a24c.129, align 4
  store i32 %v2_101f0, i32* %r2.global-to-local, align 4
  %v3_101f4 = mul i32 %v1_101ec, 388
  store i32 %v3_101f4, i32* %r3.global-to-local, align 4
  %v2_101f8 = add i32 %v2_101f0, %v3_101f4
  store i32 %v2_101f8, i32* @r6, align 4
  %v1_101fc = add i32 %v2_101f8, 4
  %v2_101fc = inttoptr i32 %v1_101fc to i32*
  %v3_101fc = load i32, i32* %v2_101fc, align 4
  %v2_10200 = icmp eq i32 %v3_101fc, -1
  store i1 %v2_10200, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10200, label %dec_label_pc_10354, label %dec_label_pc_10208

dec_label_pc_10208:                               ; preds = %dec_label_pc_101e0
  %v3_10208 = udiv i32 %v3_101fc, 32
  store i32 %v2_10164, i32* %r3.global-to-local, align 4
  %v3_10210 = mul nuw nsw i32 %v3_10208, 4
  store i32 %v3_10210, i32* %ip.global-to-local, align 4
  %v2_10214 = add i32 %v3_10210, %v2_10164
  store i32 %v2_10214, i32* %r2.global-to-local, align 4
  %v1_10218 = add i32 %v2_10214, -312
  %v2_10218 = inttoptr i32 %v1_10218 to i32*
  %v3_10218 = load i32, i32* %v2_10218, align 4
  %v1_1021c = urem i32 %v3_101fc, 32
  store i32 %v1_1021c, i32* %r1.global-to-local, align 4
  %v2_10220 = add nsw i32 %v1_1021c, -1
  %v3_10220 = shl i32 1, %v2_10220
  %v4_10220 = and i32 %v3_10218, %v3_10220
  %v5_10220 = icmp ne i32 %v4_10220, 0
  store i1 %v5_10220, i1* %cpsr_c.global-to-local, align 1
  %v6_10220 = lshr i32 %v3_10218, %v1_1021c
  store i32 %v6_10220, i32* %r3.global-to-local, align 4
  %v1_10224 = urem i32 %v6_10220, 2
  %v2_10224 = icmp eq i32 %v1_10224, 0
  store i1 %v2_10224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10224, label %dec_label_pc_1022c, label %dec_label_pc_10da0

dec_label_pc_1022c:                               ; preds = %dec_label_pc_10208, %dec_label_pc_10e44
  %v1_10238 = phi i32 [ %v1_1021c, %dec_label_pc_10208 ], [ %v1_10238.pre, %dec_label_pc_10e44 ]
  %v0_10230 = phi i32 [ %v3_10210, %dec_label_pc_10208 ], [ %v0_10230.pre, %dec_label_pc_10e44 ]
  store i32 %v2_10164, i32* @lr, align 4
  %v2_10230 = add i32 %v0_10230, %v2_10164
  store i32 %v2_10230, i32* %r2.global-to-local, align 4
  %v1_10234 = add i32 %v2_10230, -184
  %v2_10234 = inttoptr i32 %v1_10234 to i32*
  %v3_10234 = load i32, i32* %v2_10234, align 4
  %v2_10238 = add i32 %v1_10238, -1
  %v3_10238 = shl i32 1, %v2_10238
  %v4_10238 = and i32 %v3_10234, %v3_10238
  %v5_10238 = icmp ne i32 %v4_10238, 0
  store i1 %v5_10238, i1* %cpsr_c.global-to-local, align 1
  %v6_10238 = lshr i32 %v3_10234, %v1_10238
  store i32 %v6_10238, i32* %r3.global-to-local, align 4
  %v1_1023c = urem i32 %v6_10238, 2
  %v2_1023c = icmp eq i32 %v1_1023c, 0
  store i1 %v2_1023c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1023c, label %dec_label_pc_10354, label %dec_label_pc_10244.preheader

dec_label_pc_10244.preheader:                     ; preds = %dec_label_pc_1022c
  %v0_10244181 = load i32, i32* @r6, align 4
  %v1_10244182 = add i32 %v0_10244181, 12
  %v2_10244183 = inttoptr i32 %v1_10244182 to i32*
  %v3_10244184 = load i32, i32* %v2_10244183, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10248180186 = icmp eq i32 %v3_10244184, 0
  store i1 %v2_10248180186, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10248180186, label %dec_label_pc_10354, label %dec_label_pc_10250.lr.ph

dec_label_pc_10244.loopexit:                      ; preds = %dec_label_pc_103a4, %dec_label_pc_10490
  %v0_10244 = load i32, i32* @r6, align 4
  %v1_10244 = add i32 %v0_10244, 12
  %v2_10244 = inttoptr i32 %v1_10244 to i32*
  %v3_10244 = load i32, i32* %v2_10244, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10248180 = icmp eq i32 %v3_10244, 0
  store i1 %v2_10248180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10248180, label %dec_label_pc_10354, label %dec_label_pc_10250.lr.ph

dec_label_pc_10250.lr.ph:                         ; preds = %dec_label_pc_10244.preheader, %dec_label_pc_10244.loopexit
  %v0_10250230 = phi i32 [ %v0_10244, %dec_label_pc_10244.loopexit ], [ %v0_10244181, %dec_label_pc_10244.preheader ]
  br label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_10248.backedge.thread, %dec_label_pc_10248.backedge, %dec_label_pc_10248.backedge.thread584, %dec_label_pc_10250.lr.ph
  %v0_10d6c = phi i32 [ %v0_10250230, %dec_label_pc_10250.lr.ph ], [ %v0_10250227, %dec_label_pc_10248.backedge ], [ %v0_102c8, %dec_label_pc_10248.backedge.thread ], [ %v0_102c8, %dec_label_pc_10248.backedge.thread584 ]
  %v1_10250 = add i32 %v0_10d6c, 24
  %v2_10250 = inttoptr i32 %v1_10250 to i32*
  %v3_10250 = load i32, i32* %v2_10250, align 4
  store i32 %v3_10250, i32* %r3.global-to-local, align 4
  %v2_10254 = icmp ugt i32 %v3_10250, 355
  store i1 %v2_10254, i1* %cpsr_c.global-to-local, align 1
  %v7_10254 = icmp eq i32 %v3_10250, 356
  store i1 %v7_10254, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10d6c, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_10254, label %dec_label_pc_10d6c, label %dec_label_pc_10260

dec_label_pc_10260:                               ; preds = %dec_label_pc_10250, %dec_label_pc_10d6c
  store i32 %v2_fe64, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v0_fe64, align 4
  %v0_1026c = load i32, i32* @r6, align 4
  %v1_1026c = add i32 %v0_1026c, 24
  %v2_1026c = inttoptr i32 %v1_1026c to i32*
  %v3_1026c = load i32, i32* %v2_1026c, align 4
  store i32 %v3_1026c, i32* %r2.global-to-local, align 4
  %v0_10270 = load i32, i32* @fp, align 4
  %v2_10270 = add i32 %v0_10270, %v3_1026c
  store i32 %v2_10270, i32* @r4, align 4
  %v1_10274 = add i32 %v0_1026c, 4
  %v2_10274 = inttoptr i32 %v1_10274 to i32*
  %v3_10274 = load i32, i32* %v2_10274, align 4
  %v1_10278 = sub i32 356, %v3_1026c
  store i32 %v1_10278, i32* %r2.global-to-local, align 4
  store i32 %v2_10270, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10284 = inttoptr i32 %v2_10270 to i32*
  %v5_10284 = call i32 @recv(i32 %v3_10274, i32* %v4_10284, i32 %v1_10278, i32 16384)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10288 = icmp eq i32 %v5_10284, 0
  store i1 %v2_10288, i1* %cpsr_z.global-to-local, align 1
  %tmp423 = icmp slt i32 %v5_10284, 1
  br i1 %tmp423, label %dec_label_pc_10300, label %dec_label_pc_10290

dec_label_pc_10290:                               ; preds = %dec_label_pc_10260
  %v0_10290 = load i32, i32* @r5, align 4
  store i32 %v0_10290, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10294

dec_label_pc_10294:                               ; preds = %.thread84, %dec_label_pc_10290
  %v3_102a0 = phi i32 [ %v1_102a4, %.thread84 ], [ %v0_10290, %dec_label_pc_10290 ]
  %v1_10294 = load i32, i32* @r4, align 4
  %v2_10294 = add i32 %v1_10294, %v3_102a0
  %v3_10294 = inttoptr i32 %v2_10294 to i8*
  %v4_10294 = load i8, i8* %v3_10294, align 1
  %v6_10294 = zext i8 %v4_10294 to i32
  store i32 %v6_10294, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10298 = icmp eq i8 %v4_10294, 0
  store i1 %v2_10298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10298, label %bb424, label %.thread84

bb424:                                            ; preds = %dec_label_pc_10294
  %v2_1029c = add nuw nsw i32 %v6_10294, 65
  store i32 %v2_1029c, i32* %r3.global-to-local, align 4
  %v2_102a0 = trunc i32 %v2_1029c to i8
  store i8 %v2_102a0, i8* %v3_10294, align 1
  %v0_102a4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread84

.thread84:                                        ; preds = %dec_label_pc_10294, %bb424
  %v0_102a4 = phi i32 [ %v3_102a0, %dec_label_pc_10294 ], [ %v0_102a4.pre, %bb424 ]
  %v1_102a4 = add i32 %v0_102a4, 1
  store i32 %v1_102a4, i32* %r2.global-to-local, align 4
  %v3_102a8 = icmp uge i32 %v1_102a4, %v5_10284
  store i1 %v3_102a8, i1* %cpsr_c.global-to-local, align 1
  %v9_102a8 = icmp eq i32 %v1_102a4, %v5_10284
  store i1 %v9_102a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_102a8, label %dec_label_pc_102b0, label %dec_label_pc_10294

dec_label_pc_102b0:                               ; preds = %.thread84, %dec_label_pc_10304
  store i32 ptrtoint (i32* @global_var_1a22c.118 to i32), i32* @lr, align 4
  %v0_102b4 = load i32, i32* @r6, align 4
  %v1_102b4 = add i32 %v0_102b4, 24
  %v2_102b4 = inttoptr i32 %v1_102b4 to i32*
  %v3_102b4 = load i32, i32* %v2_102b4, align 4
  %v2_102b8 = load i32, i32* @global_var_1a22c.118, align 4
  store i32 %v2_102b8, i32* %r2.global-to-local, align 4
  %v2_102bc = add i32 %v3_102b4, %v5_10284
  store i32 %v2_102bc, i32* %r3.global-to-local, align 4
  store i32 %v2_102bc, i32* %v2_102b4, align 4
  %v0_102c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_102c4 = load i32, i32* @r6, align 4
  %v2_102c4 = add i32 %v1_102c4, 8
  %v3_102c4 = inttoptr i32 %v2_102c4 to i32*
  store i32 %v0_102c4, i32* %v3_102c4, align 4
  br label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %dec_label_pc_10498, %dec_label_pc_102b0
  %v0_102c8 = load i32, i32* @r6, align 4
  %v1_102c8 = add i32 %v0_102c8, 12
  %v2_102c8 = inttoptr i32 %v1_102c8 to i32*
  %v3_102c8 = load i32, i32* %v2_102c8, align 4
  %v1_102cc = add i32 %v3_102c8, -2
  store i32 %v1_102cc, i32* %r3.global-to-local, align 4
  %v7_102d0 = icmp eq i32 %v1_102cc, 8
  store i1 %v7_102d0, i1* %cpsr_z.global-to-local, align 1
  %v5_102d4 = and i32 %v1_102cc, 1073741824
  %v6_102d4 = icmp ne i32 %v5_102d4, 0
  store i1 %v6_102d4, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_102c8, label %dec_label_pc_10248.backedge [
    i32 2, label %dec_label_pc_10594
    i32 3, label %dec_label_pc_10b14
    i32 4, label %dec_label_pc_10954
    i32 5, label %dec_label_pc_10738
    i32 6, label %dec_label_pc_10664
    i32 7, label %dec_label_pc_10a40
    i32 8, label %dec_label_pc_1080c
    i32 9, label %dec_label_pc_104c0
    i32 10, label %dec_label_pc_1036c
  ]

dec_label_pc_10300:                               ; preds = %dec_label_pc_10260
  br i1 %v2_10288, label %dec_label_pc_10fd0, label %dec_label_pc_10304

dec_label_pc_10304:                               ; preds = %dec_label_pc_10300
  %v3_10304 = icmp eq i32 %v5_10284, -1
  store i1 %v3_10304, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10304, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10304, label %dec_label_pc_1030c, label %dec_label_pc_102b0

dec_label_pc_1030c:                               ; preds = %dec_label_pc_10304
  store i32 %v2_fe64, i32* %ip.global-to-local, align 4
  %v2_10310 = load i32, i32* %v0_fe64, align 4
  store i32 %v2_10310, i32* %r3.global-to-local, align 4
  %v2_10314 = icmp ugt i32 %v2_10310, 10
  store i1 %v2_10314, i1* %cpsr_c.global-to-local, align 1
  %v7_10314 = icmp eq i32 %v2_10310, 11
  store i1 %v7_10314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10314, label %dec_label_pc_10354, label %dec_label_pc_1031c

dec_label_pc_1031c:                               ; preds = %dec_label_pc_1030c, %dec_label_pc_10fd0
  %v0_1031c = load i32, i32* @r6, align 4
  %v1_1031c = add i32 %v0_1031c, 4
  %v2_1031c = inttoptr i32 %v1_1031c to i32*
  %v3_1031c = load i32, i32* %v2_1031c, align 4
  %v1_10320 = call i32 @close(i32 %v3_1031c)
  %v0_10324 = load i32, i32* @r6, align 4
  %v1_10324 = add i32 %v0_10324, 384
  %v2_10324 = inttoptr i32 %v1_10324 to i8*
  %v3_10324 = load i8, i8* %v2_10324, align 1
  %v4_10324 = zext i8 %v3_10324 to i32
  %v1_10328 = add nuw nsw i32 %v4_10324, 1
  %v1_1032c = urem i32 %v1_10328, 256
  store i32 %v1_1032c, i32* %r3.global-to-local, align 4
  %v2_10330 = icmp ugt i32 %v1_1032c, 8
  store i1 %v2_10330, i1* %cpsr_c.global-to-local, align 1
  %v7_10330 = icmp eq i32 %v1_1032c, 9
  store i1 %v7_10330, i1* %cpsr_z.global-to-local, align 1
  %v1_10334 = trunc i32 %v1_10328 to i8
  store i8 %v1_10334, i8* %v2_10324, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_1033c = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1033c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_1033c = xor i1 %v1_1033c, true
  %v3_1033c = and i1 %v0_1033c, %v2_1033c
  br i1 %v3_1033c, label %bb425, label %.thread310

.thread310:                                       ; preds = %dec_label_pc_1031c
  %v1_10340306311 = load i32, i32* @r6, align 4
  %v2_10340307312 = add i32 %v1_10340306311, 4
  %v3_10340308313 = inttoptr i32 %v2_10340307312 to i32*
  store i32 -1, i32* %v3_10340308313, align 4
  br label %bb426

bb425:                                            ; preds = %dec_label_pc_1031c
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10340302 = load i32, i32* @r6, align 4
  %v2_10340303 = add i32 %v1_10340302, 4
  %v3_10340304 = inttoptr i32 %v2_10340303 to i32*
  store i32 -1, i32* %v3_10340304, align 4
  %v4_10344 = load i32, i32* %r3.global-to-local, align 4
  %v5_10344 = load i32, i32* @r6, align 4
  %v6_10344 = add i32 %v5_10344, 12
  %v7_10344 = inttoptr i32 %v6_10344 to i32*
  store i32 %v4_10344, i32* %v7_10344, align 4
  %v4_10348 = load i32, i32* %r3.global-to-local, align 4
  %v5_10348 = trunc i32 %v4_10348 to i8
  %v6_10348 = load i32, i32* @r6, align 4
  %v7_10348 = add i32 %v6_10348, 384
  %v8_10348 = inttoptr i32 %v7_10348 to i8*
  store i8 %v5_10348, i8* %v8_10348, align 1
  %v0_1034c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_1034c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb426

bb426:                                            ; preds = %.thread310, %bb425
  %v1_10350 = phi i1 [ %v1_1034c.pre, %bb425 ], [ %v0_1033c, %.thread310 ]
  %v0_10350 = phi i1 [ %v0_1034c.pre, %bb425 ], [ %v1_1033c, %.thread310 ]
  %v2_1034c = xor i1 %v1_10350, true
  %v3_1034c = or i1 %v0_10350, %v2_1034c
  br i1 %v3_1034c, label %bb427, label %bb428

bb427:                                            ; preds = %bb426
  br label %bb428

bb428:                                            ; preds = %bb426, %bb427
  store i32 66388, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_1034c, i32 ptrtoint (i32* @global_var_f630.181 to i32))
  br label %dec_label_pc_10354

dec_label_pc_10354:                               ; preds = %dec_label_pc_10244.loopexit, %dec_label_pc_10248.backedge, %dec_label_pc_10244.preheader, %dec_label_pc_1030c, %dec_label_pc_1022c, %dec_label_pc_101e0, %dec_label_pc_10e64, %bb428
  %v3_10354 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10354, i32* %r3.global-to-local, align 4
  %v1_10358 = add i32 %v3_10354, 1
  store i32 %v1_10358, i32* %r4.global-to-local, align 4
  %v3_1035c = icmp ugt i32 %v1_10358, 355
  store i1 %v3_1035c, i1* %cpsr_c.global-to-local, align 1
  %v8_1035c = icmp eq i32 %v1_10358, 356
  store i1 %v8_1035c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10358, i32* %stack_var_-52, align 4
  %v5_10364 = icmp slt i32 %v1_10358, 356
  br i1 %v5_10364, label %dec_label_pc_101e0, label %dec_label_pc_fb50

dec_label_pc_1036c:                               ; preds = %dec_label_pc_102c8
  %v1_10370 = call i32 @function_110b8(i32 12)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_10380 = call i32 @function_10ff4(i32 12, i32* nonnull %stack_var_-60)
  %v3_10384 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10380, i32* %r2.global-to-local, align 4
  %v1_1038c = add i32 %v3_10384, -1
  store i32 %v1_1038c, i32* %r3.global-to-local, align 4
  %v0_10390 = load i32, i32* @fp, align 4
  %v0_10394 = load i32, i32* @r6, align 4
  %v1_10394 = add i32 %v0_10394, 24
  %v2_10394 = inttoptr i32 %v1_10394 to i32*
  %v3_10394 = load i32, i32* %v2_10394, align 4
  store i32 %v3_10394, i32* %r1.global-to-local, align 4
  %v4_10398 = call i32 @function_117a4(i32 %v0_10390, i32 %v3_10394, i32 %v3_10380, i32 %v1_1038c)
  %v3_1039c = icmp eq i32 %v4_10398, -1
  store i1 %v3_1039c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_1039c, i1* %cpsr_z.global-to-local, align 1
  %v1_103a8 = call i32 @function_11018(i32 12)
  br i1 %v3_1039c, label %dec_label_pc_103a4, label %dec_label_pc_10d04

dec_label_pc_103a4:                               ; preds = %dec_label_pc_1036c
  %v1_103b0 = call i32 @function_110b8(i32 11)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_103c0 = call i32 @function_10ff4(i32 11, i32* nonnull %stack_var_-60)
  %v3_103c4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_103c0, i32* %r2.global-to-local, align 4
  %v1_103cc = add i32 %v3_103c4, -1
  store i32 %v1_103cc, i32* %r3.global-to-local, align 4
  %v0_103d0 = load i32, i32* @r6, align 4
  %v1_103d0 = add i32 %v0_103d0, 24
  %v2_103d0 = inttoptr i32 %v1_103d0 to i32*
  %v3_103d0 = load i32, i32* %v2_103d0, align 4
  store i32 %v3_103d0, i32* %r1.global-to-local, align 4
  %v0_103d4 = load i32, i32* @fp, align 4
  %v4_103d8 = call i32 @function_117a4(i32 %v0_103d4, i32 %v3_103d0, i32 %v3_103c0, i32 %v1_103cc)
  store i32 %v4_103d8, i32* @r8, align 4
  %v1_103e4 = call i32 @function_11018(i32 11)
  %v0_103e8 = load i32, i32* @r8, align 4
  %v2_103e8 = icmp eq i32 %v0_103e8, -1
  store i1 %v2_103e8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_103e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103e8, label %dec_label_pc_10244.loopexit, label %dec_label_pc_103f0

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103a4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103f0 = icmp eq i32 %v0_103e8, 0
  store i1 %v2_103f0, i1* %cpsr_z.global-to-local, align 1
  %tmp429 = icmp slt i32 %v0_103e8, 1
  br i1 %tmp429, label %dec_label_pc_10490thread-pre-split, label %dec_label_pc_103f8

dec_label_pc_103f8:                               ; preds = %dec_label_pc_103f0
  %v0_103f8 = load i32, i32* @r6, align 4
  %v1_103f8 = add i32 %v0_103f8, 20
  %v2_103f8 = inttoptr i32 %v1_103f8 to i16*
  %v3_103f8 = load i16, i16* %v2_103f8, align 2
  %v4_103f8 = zext i16 %v3_103f8 to i32
  store i32 %v4_103f8, i32* %r3.global-to-local, align 4
  %v1_103fc = add i32 %v0_103f8, 16
  %v2_103fc = inttoptr i32 %v1_103fc to i32*
  %v3_103fc = load i32, i32* %v2_103fc, align 4
  store i32 %v3_103fc, i32* %r2.global-to-local, align 4
  store i32 %v2_10400, i32* %r1.global-to-local, align 4
  store i32 %v4_103f8, i32* %stack_var_-42, align 4
  store i32 %v3_103fc, i32* %stack_var_-60, align 4
  %v1_1040c = inttoptr i32 %v0_103f8 to i32*
  %v2_1040c = load i32, i32* %v1_1040c, align 4
  store i32 %v2_1040c, i32* @sb, align 4
  %v0_10410 = call i32 @fork()
  %v2_10414 = icmp eq i32 %v0_10410, -1
  %.468 = zext i1 %v2_10414 to i32
  store i32 %.468, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10420 = icmp eq i32 %v0_10410, 0
  store i1 %v2_10420, i1* %cpsr_z.global-to-local, align 1
  %tmp432 = icmp slt i32 %v0_10410, 1
  br i1 %tmp432, label %bb433, label %.thread87

.thread87:                                        ; preds = %dec_label_pc_103f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10478

bb433:                                            ; preds = %dec_label_pc_103f8
  store i32 %.468, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1042c = icmp eq i1 %v2_10414, false
  store i1 %v2_1042c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1042c, label %dec_label_pc_10434, label %dec_label_pc_10478

dec_label_pc_10434:                               ; preds = %bb433
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10440 = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_10444 = icmp eq i32 %v3_10440, -1
  store i1 %v2_10444, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10444, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10440, i32* @r7, align 4
  br i1 %v2_10444, label %dec_label_pc_10fa0, label %dec_label_pc_10450

dec_label_pc_10450:                               ; preds = %dec_label_pc_10434
  %v1_10454 = call i32 @function_110b8(i32 3)
  %v1_1045c = call i32 @function_110b8(i32 4)
  %v0_10460 = load i32, i32* @sl, align 4
  store i32 %v0_10460, i32* %r1.global-to-local, align 4
  %v2_10468 = inttoptr i32 %v0_10460 to i32*
  %v3_10468 = call i32 @function_10ff4(i32 3, i32* %v2_10468)
  %v1_1046c = call i32 @function_f100(i32 %v3_10468)
  store i32 %v1_1046c, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_10470 = icmp eq i32 %v1_1046c, 0
  store i1 %v3_10470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10470, label %dec_label_pc_10478, label %dec_label_pc_10e80

dec_label_pc_10478:                               ; preds = %.thread87, %dec_label_pc_10450, %bb433
  %v0_10478 = load i32, i32* @r6, align 4
  %v1_10478 = add i32 %v0_10478, 4
  %v2_10478 = inttoptr i32 %v1_10478 to i32*
  %v3_10478 = load i32, i32* %v2_10478, align 4
  %v1_1047c = call i32 @close(i32 %v3_10478)
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_10488 = load i32, i32* @r6, align 4
  %v2_10488 = add i32 %v1_10488, 4
  %v3_10488 = inttoptr i32 %v2_10488 to i32*
  store i32 -1, i32* %v3_10488, align 4
  %v0_1048c = load i32, i32* %r2.global-to-local, align 4
  %v1_1048c = load i32, i32* @r6, align 4
  %v2_1048c = add i32 %v1_1048c, 12
  %v3_1048c = inttoptr i32 %v2_1048c to i32*
  store i32 %v0_1048c, i32* %v3_1048c, align 4
  br label %dec_label_pc_10490thread-pre-split

dec_label_pc_10490thread-pre-split:               ; preds = %dec_label_pc_10654.thread, %dec_label_pc_10478, %dec_label_pc_10a08, %dec_label_pc_10cbc, %dec_label_pc_103f0, %bb442, %dec_label_pc_10654
  %v0_10490.pr = load i32, i32* @r8, align 4
  br label %dec_label_pc_10490

dec_label_pc_10490:                               ; preds = %dec_label_pc_10490thread-pre-split, %dec_label_pc_10c18
  %v0_10490 = phi i32 [ %v0_10490.pr, %dec_label_pc_10490thread-pre-split ], [ %v0_10c28, %dec_label_pc_10c18 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10490 = icmp eq i32 %v0_10490, 0
  store i1 %v2_10490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10490, label %dec_label_pc_10244.loopexit, label %dec_label_pc_10498

dec_label_pc_10498:                               ; preds = %dec_label_pc_10490, %dec_label_pc_10abc, %dec_label_pc_108fc, %dec_label_pc_107b4, %dec_label_pc_10d90, %dec_label_pc_10d34, %dec_label_pc_106e0, %dec_label_pc_1053c
  %v0_10498 = load i32, i32* @r6, align 4
  %v1_10498 = add i32 %v0_10498, 24
  %v2_10498 = inttoptr i32 %v1_10498 to i32*
  %v3_10498 = load i32, i32* %v2_10498, align 4
  %v0_1049c = load i32, i32* @r8, align 4
  %v2_1049c = sub i32 %v0_1049c, %v3_10498
  %v3_1049c = icmp uge i32 %v0_1049c, %v3_10498
  store i1 %v3_1049c, i1* %cpsr_c.global-to-local, align 1
  %v4_1049c = xor i32 %v0_1049c, %v3_10498
  %v5_1049c = xor i32 %v2_1049c, %v0_1049c
  %v6_1049c = and i32 %v5_1049c, %v4_1049c
  %v7_1049c = icmp slt i32 %v6_1049c, 0
  %v8_1049c = icmp slt i32 %v2_1049c, 0
  %v9_1049c = icmp eq i32 %v0_1049c, %v3_10498
  store i1 %v9_1049c, i1* %cpsr_z.global-to-local, align 1
  %v2_104a0 = xor i1 %v8_1049c, %v7_1049c
  %v0_1049c.v3_10498 = select i1 %v2_104a0, i32 %v0_1049c, i32 %v3_10498
  store i32 %v0_1049c.v3_10498, i32* %r1.global-to-local, align 4
  %v2_104a8 = sub i32 %v3_10498, %v0_1049c.v3_10498
  store i32 %v2_104a8, i32* %r2.global-to-local, align 4
  store i32 %v2_104a8, i32* %v2_10498, align 4
  %v0_104b0 = load i32, i32* @fp, align 4
  %v1_104b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_104b0 = add i32 %v1_104b0, %v0_104b0
  store i32 %v2_104b0, i32* %r1.global-to-local, align 4
  %v3_104b8 = inttoptr i32 %v0_104b0 to i32*
  %v4_104b8 = inttoptr i32 %v2_104b0 to i32*
  %v5_104b8 = call i32* @memmove(i32* %v3_104b8, i32* %v4_104b8, i32 %v2_104a8)
  br label %dec_label_pc_102c8

dec_label_pc_104c0:                               ; preds = %dec_label_pc_102c8
  %v1_104c0 = add i32 %v0_102c8, 24
  %v2_104c0 = inttoptr i32 %v1_104c0 to i32*
  %v3_104c0 = load i32, i32* %v2_104c0, align 4
  store i32 %v3_104c0, i32* %r2.global-to-local, align 4
  %v1_104c4 = add i32 %v3_104c0, -1
  store i32 %v1_104c4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104c8 = icmp eq i32 %v1_104c4, 0
  store i1 %v2_104c8, i1* %cpsr_z.global-to-local, align 1
  %tmp436 = icmp slt i32 %v1_104c4, 1
  br i1 %tmp436, label %dec_label_pc_10248.backedge.thread, label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104c0
  %v2_104d0 = add i32 %v1_104c4, %v0_102c8
  store i32 %v2_104d0, i32* %r3.global-to-local, align 4
  %v1_104d4 = add i32 %v2_104d0, 28
  %v2_104d4 = inttoptr i32 %v1_104d4 to i8*
  %v3_104d4 = load i8, i8* %v2_104d4, align 1
  %v4_104d4 = zext i8 %v3_104d4 to i32
  store i32 %v4_104d4, i32* %r3.global-to-local, align 4
  %v2_104d8 = icmp ugt i8 %v3_104d4, 61
  store i1 %v2_104d8, i1* %cpsr_c.global-to-local, align 1
  %v7_104d8 = icmp eq i8 %v3_104d4, 62
  store i1 %v7_104d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104d8, label %dec_label_pc_1053c, label %bb437

bb437:                                            ; preds = %dec_label_pc_104d0
  %v3_104dc = icmp ugt i8 %v3_104d4, 57
  store i1 %v3_104dc, i1* %cpsr_c.global-to-local, align 1
  %v8_104dc = icmp eq i8 %v3_104d4, 58
  store i1 %v8_104dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_104dc, label %dec_label_pc_1053c, label %dec_label_pc_104e4

dec_label_pc_104e4:                               ; preds = %bb437
  %v2_104e4 = icmp ugt i8 %v3_104d4, 35
  store i1 %v2_104e4, i1* %cpsr_c.global-to-local, align 1
  %v7_104e4 = icmp eq i8 %v3_104d4, 36
  store i1 %v7_104e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104e4, label %dec_label_pc_1053c, label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104e4
  %v2_104ec = icmp ugt i8 %v3_104d4, 34
  store i1 %v2_104ec, i1* %cpsr_c.global-to-local, align 1
  %v7_104ec = icmp eq i8 %v3_104d4, 35
  store i1 %v7_104ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104ec, label %dec_label_pc_1053c, label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104ec
  %v2_104f4 = icmp ugt i8 %v3_104d4, 36
  store i1 %v2_104f4, i1* %cpsr_c.global-to-local, align 1
  %v7_104f4 = icmp eq i8 %v3_104d4, 37
  store i1 %v7_104f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104f4, label %dec_label_pc_1053c, label %dec_label_pc_10524.preheader

dec_label_pc_10524.preheader:                     ; preds = %dec_label_pc_104f4
  %v3_104f8 = add i32 %v0_102c8, 28
  %v2_104fc = add i32 %v3_104f8, %v3_104c0
  store i32 %v2_104fc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10524

dec_label_pc_10508:                               ; preds = %bb438
  %v2_10508 = icmp ugt i8 %v3_1052c, 35
  store i1 %v2_10508, i1* %cpsr_c.global-to-local, align 1
  %v7_10508 = icmp eq i8 %v3_1052c, 36
  store i1 %v7_10508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10508, label %dec_label_pc_1053c, label %dec_label_pc_10510

dec_label_pc_10510:                               ; preds = %dec_label_pc_10508
  %v2_10510 = icmp ugt i8 %v3_1052c, 34
  store i1 %v2_10510, i1* %cpsr_c.global-to-local, align 1
  %v7_10510 = icmp eq i8 %v3_1052c, 35
  store i1 %v7_10510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10510, label %dec_label_pc_1053c, label %dec_label_pc_10518

dec_label_pc_10518:                               ; preds = %dec_label_pc_10510
  %v2_10518 = icmp ugt i8 %v3_1052c, 36
  store i1 %v2_10518, i1* %cpsr_c.global-to-local, align 1
  %v7_10518 = icmp eq i8 %v3_1052c, 37
  store i1 %v7_10518, i1* %cpsr_z.global-to-local, align 1
  %v1_1051c = add i32 %v0_1051c, -1
  store i32 %v1_1051c, i32* %r3.global-to-local, align 4
  br i1 %v7_10518, label %dec_label_pc_1053c, label %dec_label_pc_10524

dec_label_pc_10524:                               ; preds = %dec_label_pc_10524.preheader, %dec_label_pc_10518
  %v0_1051c = phi i32 [ %v2_104fc, %dec_label_pc_10524.preheader ], [ %v1_1051c, %dec_label_pc_10518 ]
  %v0_10524 = phi i32 [ %v1_104c4, %dec_label_pc_10524.preheader ], [ %v1_10524, %dec_label_pc_10518 ]
  %v1_10524 = add i32 %v0_10524, -1
  store i32 %v1_10524, i32* %r1.global-to-local, align 4
  %v2_10524 = icmp ne i32 %v0_10524, 0
  store i1 %v2_10524, i1* %cpsr_c.global-to-local, align 1
  %v7_10524 = icmp eq i32 %v0_10524, 1
  store i1 %v7_10524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10524, label %dec_label_pc_10248.backedge.thread584, label %dec_label_pc_1052c

dec_label_pc_1052c:                               ; preds = %dec_label_pc_10524
  %v1_1052c = add i32 %v0_1051c, -2
  %v2_1052c = inttoptr i32 %v1_1052c to i8*
  %v3_1052c = load i8, i8* %v2_1052c, align 1
  %v4_1052c = zext i8 %v3_1052c to i32
  store i32 %v4_1052c, i32* %r2.global-to-local, align 4
  %v2_10530 = icmp ugt i8 %v3_1052c, 61
  store i1 %v2_10530, i1* %cpsr_c.global-to-local, align 1
  %v7_10530 = icmp eq i8 %v3_1052c, 62
  store i1 %v7_10530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10530, label %dec_label_pc_1053c, label %bb438

bb438:                                            ; preds = %dec_label_pc_1052c
  %v3_10534 = icmp ugt i8 %v3_1052c, 57
  store i1 %v3_10534, i1* %cpsr_c.global-to-local, align 1
  %v8_10534 = icmp eq i8 %v3_1052c, 58
  store i1 %v8_10534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10534, label %dec_label_pc_1053c, label %dec_label_pc_10508

dec_label_pc_1053c:                               ; preds = %dec_label_pc_1052c, %bb438, %dec_label_pc_10518, %dec_label_pc_10510, %dec_label_pc_10508, %dec_label_pc_104f4, %dec_label_pc_104d0, %dec_label_pc_104ec, %dec_label_pc_104e4, %bb437
  %v0_10540 = phi i32 [ %v1_104c4, %dec_label_pc_104f4 ], [ %v1_104c4, %dec_label_pc_104d0 ], [ %v1_104c4, %dec_label_pc_104ec ], [ %v1_104c4, %dec_label_pc_104e4 ], [ %v1_104c4, %bb437 ], [ %v1_10524, %dec_label_pc_10508 ], [ %v1_10524, %dec_label_pc_10510 ], [ %v1_10524, %dec_label_pc_10518 ], [ %v1_10524, %bb438 ], [ %v1_10524, %dec_label_pc_1052c ]
  %v1_10540 = add i32 %v0_10540, 1
  store i32 %v1_10540, i32* @r8, align 4
  %v1_10544 = call i32 @function_110b8(i32 10)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_10554 = call i32 @function_10ff4(i32 10, i32* nonnull %stack_var_-60)
  %v3_10558 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10558, i32* %r2.global-to-local, align 4
  store i32 %v3_10554, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10564 = load i32, i32* @r6, align 4
  %v1_10564 = add i32 %v0_10564, 4
  %v2_10564 = inttoptr i32 %v1_10564 to i32*
  %v3_10564 = load i32, i32* %v2_10564, align 4
  %v4_10568 = inttoptr i32 %v3_10554 to i32*
  %v5_10568 = call i32 @send(i32 %v3_10564, i32* %v4_10568, i32 %v3_10558, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e18.183 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10578 = load i32, i32* @r6, align 4
  %v1_10578 = add i32 %v0_10578, 4
  %v2_10578 = inttoptr i32 %v1_10578 to i32*
  %v3_10578 = load i32, i32* %v2_10578, align 4
  %v5_1057c = call i32 @send(i32 %v3_10578, i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), i32 2, i32 16384)
  %v1_10584 = call i32 @function_11018(i32 10)
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_1058c = load i32, i32* @r6, align 4
  %v2_1058c = add i32 %v1_1058c, 12
  %v3_1058c = inttoptr i32 %v2_1058c to i32*
  store i32 10, i32* %v3_1058c, align 4
  br label %dec_label_pc_10498

dec_label_pc_10594:                               ; preds = %dec_label_pc_102c8
  %v1_10594 = add i32 %v0_102c8, 24
  %v2_10594 = inttoptr i32 %v1_10594 to i32*
  %v3_10594 = load i32, i32* %v2_10594, align 4
  store i32 %v3_10594, i32* %r1.global-to-local, align 4
  %v0_10598 = load i32, i32* @fp, align 4
  store i32 %v0_10598, i32* @r4, align 4
  store i32 0, i32* @r8, align 4
  %v3_105a0171 = icmp eq i32 %v3_10594, 0
  store i1 %v3_105a0171, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_105a0171, i1* %cpsr_z.global-to-local, align 1
  %v6_105a4178 = icmp sgt i32 %v3_10594, 0
  br i1 %v6_105a4178, label %dec_label_pc_105a8.preheader, label %dec_label_pc_10654.thread

dec_label_pc_10654.thread:                        ; preds = %dec_label_pc_10594
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10490thread-pre-split

dec_label_pc_105a0.loopexit:                      ; preds = %dec_label_pc_105c4
  %v2_105cc = add i32 %v1_105cc, 2
  store i32 %v2_105cc, i32* @r4, align 4
  %v2_105d0 = add i32 %v1_105d0, 2
  store i32 %v2_105d0, i32* @r8, align 4
  %v3_105a0 = icmp uge i32 %v2_105d0, %v1_105a0
  store i1 %v3_105a0, i1* %cpsr_c.global-to-local, align 1
  %v9_105a0 = icmp eq i32 %v2_105d0, %v1_105a0
  store i1 %v9_105a0, i1* %cpsr_z.global-to-local, align 1
  %v6_105a4 = icmp slt i32 %v2_105d0, %v1_105a0
  br i1 %v6_105a4, label %dec_label_pc_105a8.preheader, label %dec_label_pc_10654

dec_label_pc_105a8.preheader:                     ; preds = %dec_label_pc_10594, %dec_label_pc_105a0.loopexit
  %v6_1065c271 = phi i32 [ %v6_1065c272, %dec_label_pc_105a0.loopexit ], [ %v0_102c8, %dec_label_pc_10594 ]
  %v1_105d0261 = phi i32 [ %v2_105d0, %dec_label_pc_105a0.loopexit ], [ 0, %dec_label_pc_10594 ]
  %v1_105b4259 = phi i32 [ %v1_105a0, %dec_label_pc_105a0.loopexit ], [ %v3_10594, %dec_label_pc_10594 ]
  %v0_105a8257 = phi i32 [ %v2_105cc, %dec_label_pc_105a0.loopexit ], [ %v0_10598, %dec_label_pc_10594 ]
  br label %dec_label_pc_105a8

dec_label_pc_105a8:                               ; preds = %dec_label_pc_105a8.preheader, %dec_label_pc_10638
  %v6_1065c272 = phi i32 [ %v6_1065c271, %dec_label_pc_105a8.preheader ], [ %v0_10640, %dec_label_pc_10638 ]
  %v1_105d0 = phi i32 [ %v1_105d0261, %dec_label_pc_105a8.preheader ], [ %v1_10644, %dec_label_pc_10638 ]
  %v1_105a0 = phi i32 [ %v1_105b4259, %dec_label_pc_105a8.preheader ], [ %v3_10640, %dec_label_pc_10638 ]
  %v1_105cc = phi i32 [ %v0_105a8257, %dec_label_pc_105a8.preheader ], [ %v1_1064c, %dec_label_pc_10638 ]
  %v1_105a8 = inttoptr i32 %v1_105cc to i8*
  %v2_105a8 = load i8, i8* %v1_105a8, align 1
  %v3_105a8 = zext i8 %v2_105a8 to i32
  store i32 %v3_105a8, i32* %r3.global-to-local, align 4
  %v2_105ac = icmp eq i8 %v2_105a8, -1
  store i1 %v2_105ac, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_105ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105ac, label %dec_label_pc_105b4, label %dec_label_pc_10654

dec_label_pc_105b4:                               ; preds = %dec_label_pc_105a8
  %v0_105b4 = load i32, i32* @fp, align 4
  %v2_105b4 = add i32 %v0_105b4, %v1_105a0
  store i32 %v2_105b4, i32* %r2.global-to-local, align 4
  %v1_105b8 = add i32 %v1_105cc, 1
  store i32 %v1_105b8, i32* @r5, align 4
  %v3_105bc = icmp uge i32 %v2_105b4, %v1_105b8
  store i1 %v3_105bc, i1* %cpsr_c.global-to-local, align 1
  %v9_105bc = icmp eq i32 %v2_105b4, %v1_105b8
  store i1 %v9_105bc, i1* %cpsr_z.global-to-local, align 1
  %v2_105c0 = xor i1 %v3_105bc, true
  %v3_105c0 = or i1 %v9_105bc, %v2_105c0
  br i1 %v3_105c0, label %dec_label_pc_10654, label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %dec_label_pc_105b4
  %v2_105c4 = inttoptr i32 %v1_105b8 to i8*
  %v3_105c4 = load i8, i8* %v2_105c4, align 1
  %v4_105c4 = zext i8 %v3_105c4 to i32
  store i32 %v4_105c4, i32* %r3.global-to-local, align 4
  %v2_105c8 = icmp eq i8 %v3_105c4, -1
  store i1 %v2_105c8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_105c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105c8, label %dec_label_pc_105a0.loopexit, label %dec_label_pc_105d8

dec_label_pc_105d8:                               ; preds = %dec_label_pc_105c4
  %v2_105d8 = icmp ugt i8 %v3_105c4, -4
  store i1 %v2_105d8, i1* %cpsr_c.global-to-local, align 1
  %v7_105d8 = icmp eq i8 %v3_105c4, -3
  store i1 %v7_105d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105d8, label %dec_label_pc_10c34, label %dec_label_pc_105e0

dec_label_pc_105e0:                               ; preds = %dec_label_pc_105d8
  %v1_105e0 = add i32 %v1_105cc, 2
  store i32 %v1_105e0, i32* %r3.global-to-local, align 4
  %v3_105e4 = icmp uge i32 %v2_105b4, %v1_105e0
  store i1 %v3_105e4, i1* %cpsr_c.global-to-local, align 1
  %v9_105e4 = icmp eq i32 %v2_105b4, %v1_105e0
  store i1 %v9_105e4, i1* %cpsr_z.global-to-local, align 1
  %v2_105e8 = xor i1 %v3_105e4, true
  %v3_105e8 = or i1 %v9_105e4, %v2_105e8
  br i1 %v3_105e8, label %dec_label_pc_10654, label %dec_label_pc_105ec

dec_label_pc_105ec:                               ; preds = %dec_label_pc_10c98, %bb462, %.thread148, %dec_label_pc_105e0
  %v0_105ec = load i32, i32* @r5, align 4
  %v1_105ec = inttoptr i32 %v0_105ec to i8*
  %v2_105ec = load i8, i8* %v1_105ec, align 1
  %v3_105ec = zext i8 %v2_105ec to i32
  store i32 %v3_105ec, i32* %r3.global-to-local, align 4
  %v2_105f0 = icmp ugt i8 %v2_105ec, -4
  store i1 %v2_105f0, i1* %cpsr_c.global-to-local, align 1
  %v7_105f0 = icmp eq i8 %v2_105ec, -3
  store i1 %v7_105f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105f0, label %.thread98, label %dec_label_pc_10600

.thread98:                                        ; preds = %dec_label_pc_105ec
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_105ec, align 1
  %v0_105fc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_105fc.pr.pr, label %.thread101, label %.thread98.dec_label_pc_10600thread-pre-split_crit_edge

.thread98.dec_label_pc_10600thread-pre-split_crit_edge: ; preds = %.thread98
  %v0_10600.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %dec_label_pc_105ec, %.thread98.dec_label_pc_10600thread-pre-split_crit_edge
  %v0_10600.pr = phi i32 [ %v0_10600.pr.pre, %.thread98.dec_label_pc_10600thread-pre-split_crit_edge ], [ %v3_105ec, %dec_label_pc_105ec ]
  %v2_10600 = icmp ugt i32 %v0_10600.pr, 250
  store i1 %v2_10600, i1* %cpsr_c.global-to-local, align 1
  %v7_10600 = icmp eq i32 %v0_10600.pr, 251
  store i1 %v7_10600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10600, label %bb439, label %.thread101

bb439:                                            ; preds = %dec_label_pc_10600
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_10608 = load i32, i32* @r5, align 4
  %v4_10608 = inttoptr i32 %v3_10608 to i8*
  store i8 -3, i8* %v4_10608, align 1
  br label %.thread101

.thread101:                                       ; preds = %dec_label_pc_10600, %.thread98, %bb439
  %v0_1060c = load i32, i32* @r4, align 4
  %v1_1060c = add i32 %v0_1060c, 2
  %v2_1060c = inttoptr i32 %v1_1060c to i8*
  %v3_1060c = load i8, i8* %v2_1060c, align 1
  %v4_1060c = zext i8 %v3_1060c to i32
  store i32 %v4_1060c, i32* %r3.global-to-local, align 4
  %v2_10610 = icmp ugt i8 %v3_1060c, -4
  store i1 %v2_10610, i1* %cpsr_c.global-to-local, align 1
  %v7_10610 = icmp eq i8 %v3_1060c, -3
  store i1 %v7_10610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10610, label %.thread102, label %dec_label_pc_10620

.thread102:                                       ; preds = %.thread101
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_1060c, align 1
  %v0_1061c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1061c.pr.pr, label %.thread105, label %.thread102.dec_label_pc_10620thread-pre-split_crit_edge

.thread102.dec_label_pc_10620thread-pre-split_crit_edge: ; preds = %.thread102
  %v0_10620.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10620

dec_label_pc_10620:                               ; preds = %.thread101, %.thread102.dec_label_pc_10620thread-pre-split_crit_edge
  %v0_10620.pr = phi i32 [ %v0_10620.pr.pre, %.thread102.dec_label_pc_10620thread-pre-split_crit_edge ], [ %v4_1060c, %.thread101 ]
  %v2_10620 = icmp ugt i32 %v0_10620.pr, 250
  store i1 %v2_10620, i1* %cpsr_c.global-to-local, align 1
  %v7_10620 = icmp eq i32 %v0_10620.pr, 251
  store i1 %v7_10620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10620, label %bb440, label %.thread105

bb440:                                            ; preds = %dec_label_pc_10620
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_10628 = load i32, i32* @r4, align 4
  %v4_10628 = add i32 %v3_10628, 2
  %v5_10628 = inttoptr i32 %v4_10628 to i8*
  store i8 -3, i8* %v5_10628, align 1
  br label %.thread105

.thread105:                                       ; preds = %dec_label_pc_10620, %.thread102, %bb440
  %v0_10630 = load i32, i32* @r4, align 4
  br label %dec_label_pc_10638

dec_label_pc_10638:                               ; preds = %dec_label_pc_10d48, %.thread105
  %storemerge4 = phi i32 [ %v2_10c4c, %dec_label_pc_10d48 ], [ %v0_10630, %.thread105 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_10d48 ], [ 3, %.thread105 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1063c = inttoptr i32 %storemerge4 to i32*
  %v5_1063c = call i32 @send(i32 16384, i32* %v4_1063c, i32 %storemerge3, i32 16384)
  %v0_10640 = load i32, i32* @r6, align 4
  %v1_10640 = add i32 %v0_10640, 24
  %v2_10640 = inttoptr i32 %v1_10640 to i32*
  %v3_10640 = load i32, i32* %v2_10640, align 4
  store i32 %v3_10640, i32* %r1.global-to-local, align 4
  %v0_10644 = load i32, i32* @r8, align 4
  %v1_10644 = add i32 %v0_10644, 3
  store i32 %v1_10644, i32* @r8, align 4
  %v3_10648 = icmp uge i32 %v1_10644, %v3_10640
  store i1 %v3_10648, i1* %cpsr_c.global-to-local, align 1
  %v9_10648 = icmp eq i32 %v1_10644, %v3_10640
  store i1 %v9_10648, i1* %cpsr_z.global-to-local, align 1
  %v0_1064c = load i32, i32* @r4, align 4
  %v1_1064c = add i32 %v0_1064c, 3
  store i32 %v1_1064c, i32* @r4, align 4
  %v5_10650 = icmp slt i32 %v1_10644, %v3_10640
  br i1 %v5_10650, label %dec_label_pc_105a8, label %dec_label_pc_10654

dec_label_pc_10654:                               ; preds = %dec_label_pc_105a0.loopexit, %dec_label_pc_105a8, %dec_label_pc_10638, %dec_label_pc_105e0, %dec_label_pc_105b4, %dec_label_pc_10c34.dec_label_pc_10654.loopexit_crit_edge
  %v6_1065c = phi i32 [ %v0_10c64, %dec_label_pc_10c34.dec_label_pc_10654.loopexit_crit_edge ], [ %v6_1065c272, %dec_label_pc_105a8 ], [ %v0_10640, %dec_label_pc_10638 ], [ %v6_1065c272, %dec_label_pc_105e0 ], [ %v6_1065c272, %dec_label_pc_105b4 ], [ %v6_1065c272, %dec_label_pc_105a0.loopexit ]
  %v0_10654 = phi i32 [ %v0_10654.pre.pre, %dec_label_pc_10c34.dec_label_pc_10654.loopexit_crit_edge ], [ %v1_105d0, %dec_label_pc_105a8 ], [ %v1_10644, %dec_label_pc_10638 ], [ %v1_105d0, %dec_label_pc_105e0 ], [ %v1_105d0, %dec_label_pc_105b4 ], [ %v2_105d0, %dec_label_pc_105a0.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10654 = icmp eq i32 %v0_10654, 0
  store i1 %v2_10654, i1* %cpsr_z.global-to-local, align 1
  %tmp441 = icmp slt i32 %v0_10654, 1
  br i1 %tmp441, label %dec_label_pc_10490thread-pre-split, label %bb442

bb442:                                            ; preds = %dec_label_pc_10654
  store i32 3, i32* %r3.global-to-local, align 4
  %v7_1065c = add i32 %v6_1065c, 12
  %v8_1065c = inttoptr i32 %v7_1065c to i32*
  store i32 3, i32* %v8_1065c, align 4
  br label %dec_label_pc_10490thread-pre-split

dec_label_pc_10664:                               ; preds = %dec_label_pc_102c8
  %v1_10664 = add i32 %v0_102c8, 24
  %v2_10664 = inttoptr i32 %v1_10664 to i32*
  %v3_10664 = load i32, i32* %v2_10664, align 4
  store i32 %v3_10664, i32* %r2.global-to-local, align 4
  %v1_10668 = add i32 %v3_10664, -1
  store i32 %v1_10668, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1066c = icmp eq i32 %v1_10668, 0
  store i1 %v2_1066c, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_10668, 1
  br i1 %tmp443, label %dec_label_pc_10248.backedge.thread, label %dec_label_pc_10674

dec_label_pc_10674:                               ; preds = %dec_label_pc_10664
  %v2_10674 = add i32 %v1_10668, %v0_102c8
  store i32 %v2_10674, i32* %r3.global-to-local, align 4
  %v1_10678 = add i32 %v2_10674, 28
  %v2_10678 = inttoptr i32 %v1_10678 to i8*
  %v3_10678 = load i8, i8* %v2_10678, align 1
  %v4_10678 = zext i8 %v3_10678 to i32
  store i32 %v4_10678, i32* %r3.global-to-local, align 4
  %v2_1067c = icmp ugt i8 %v3_10678, 61
  store i1 %v2_1067c, i1* %cpsr_c.global-to-local, align 1
  %v7_1067c = icmp eq i8 %v3_10678, 62
  store i1 %v7_1067c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1067c, label %dec_label_pc_106e0, label %bb444

bb444:                                            ; preds = %dec_label_pc_10674
  %v3_10680 = icmp ugt i8 %v3_10678, 57
  store i1 %v3_10680, i1* %cpsr_c.global-to-local, align 1
  %v8_10680 = icmp eq i8 %v3_10678, 58
  store i1 %v8_10680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10680, label %dec_label_pc_106e0, label %dec_label_pc_10688

dec_label_pc_10688:                               ; preds = %bb444
  %v2_10688 = icmp ugt i8 %v3_10678, 35
  store i1 %v2_10688, i1* %cpsr_c.global-to-local, align 1
  %v7_10688 = icmp eq i8 %v3_10678, 36
  store i1 %v7_10688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10688, label %dec_label_pc_106e0, label %dec_label_pc_10690

dec_label_pc_10690:                               ; preds = %dec_label_pc_10688
  %v2_10690 = icmp ugt i8 %v3_10678, 34
  store i1 %v2_10690, i1* %cpsr_c.global-to-local, align 1
  %v7_10690 = icmp eq i8 %v3_10678, 35
  store i1 %v7_10690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10690, label %dec_label_pc_106e0, label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %dec_label_pc_10690
  %v2_10698 = icmp ugt i8 %v3_10678, 36
  store i1 %v2_10698, i1* %cpsr_c.global-to-local, align 1
  %v7_10698 = icmp eq i8 %v3_10678, 37
  store i1 %v7_10698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10698, label %dec_label_pc_106e0, label %dec_label_pc_106c8.preheader

dec_label_pc_106c8.preheader:                     ; preds = %dec_label_pc_10698
  %v3_1069c = add i32 %v0_102c8, 28
  %v2_106a0 = add i32 %v3_1069c, %v3_10664
  store i32 %v2_106a0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_106c8

dec_label_pc_106ac:                               ; preds = %bb445
  %v2_106ac = icmp ugt i8 %v3_106d0, 35
  store i1 %v2_106ac, i1* %cpsr_c.global-to-local, align 1
  %v7_106ac = icmp eq i8 %v3_106d0, 36
  store i1 %v7_106ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106ac, label %dec_label_pc_106e0, label %dec_label_pc_106b4

dec_label_pc_106b4:                               ; preds = %dec_label_pc_106ac
  %v2_106b4 = icmp ugt i8 %v3_106d0, 34
  store i1 %v2_106b4, i1* %cpsr_c.global-to-local, align 1
  %v7_106b4 = icmp eq i8 %v3_106d0, 35
  store i1 %v7_106b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106b4, label %dec_label_pc_106e0, label %dec_label_pc_106bc

dec_label_pc_106bc:                               ; preds = %dec_label_pc_106b4
  %v2_106bc = icmp ugt i8 %v3_106d0, 36
  store i1 %v2_106bc, i1* %cpsr_c.global-to-local, align 1
  %v7_106bc = icmp eq i8 %v3_106d0, 37
  store i1 %v7_106bc, i1* %cpsr_z.global-to-local, align 1
  %v1_106c0 = add i32 %v0_106c0, -1
  store i32 %v1_106c0, i32* %r3.global-to-local, align 4
  br i1 %v7_106bc, label %dec_label_pc_106e0, label %dec_label_pc_106c8

dec_label_pc_106c8:                               ; preds = %dec_label_pc_106c8.preheader, %dec_label_pc_106bc
  %v0_106c0 = phi i32 [ %v2_106a0, %dec_label_pc_106c8.preheader ], [ %v1_106c0, %dec_label_pc_106bc ]
  %v0_106c8 = phi i32 [ %v1_10668, %dec_label_pc_106c8.preheader ], [ %v1_106c8, %dec_label_pc_106bc ]
  %v1_106c8 = add i32 %v0_106c8, -1
  store i32 %v1_106c8, i32* %r1.global-to-local, align 4
  %v2_106c8 = icmp ne i32 %v0_106c8, 0
  store i1 %v2_106c8, i1* %cpsr_c.global-to-local, align 1
  %v7_106c8 = icmp eq i32 %v0_106c8, 1
  store i1 %v7_106c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106c8, label %dec_label_pc_10248.backedge.thread584, label %dec_label_pc_106d0

dec_label_pc_106d0:                               ; preds = %dec_label_pc_106c8
  %v1_106d0 = add i32 %v0_106c0, -2
  %v2_106d0 = inttoptr i32 %v1_106d0 to i8*
  %v3_106d0 = load i8, i8* %v2_106d0, align 1
  %v4_106d0 = zext i8 %v3_106d0 to i32
  store i32 %v4_106d0, i32* %r2.global-to-local, align 4
  %v2_106d4 = icmp ugt i8 %v3_106d0, 61
  store i1 %v2_106d4, i1* %cpsr_c.global-to-local, align 1
  %v7_106d4 = icmp eq i8 %v3_106d0, 62
  store i1 %v7_106d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106d4, label %dec_label_pc_106e0, label %bb445

bb445:                                            ; preds = %dec_label_pc_106d0
  %v3_106d8 = icmp ugt i8 %v3_106d0, 57
  store i1 %v3_106d8, i1* %cpsr_c.global-to-local, align 1
  %v8_106d8 = icmp eq i8 %v3_106d0, 58
  store i1 %v8_106d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_106d8, label %dec_label_pc_106e0, label %dec_label_pc_106ac

dec_label_pc_106e0:                               ; preds = %dec_label_pc_106d0, %bb445, %dec_label_pc_106bc, %dec_label_pc_106b4, %dec_label_pc_106ac, %dec_label_pc_10698, %dec_label_pc_10674, %dec_label_pc_10690, %dec_label_pc_10688, %bb444
  %v0_106e4 = phi i32 [ %v1_10668, %dec_label_pc_10698 ], [ %v1_10668, %dec_label_pc_10674 ], [ %v1_10668, %dec_label_pc_10690 ], [ %v1_10668, %dec_label_pc_10688 ], [ %v1_10668, %bb444 ], [ %v1_106c8, %dec_label_pc_106ac ], [ %v1_106c8, %dec_label_pc_106b4 ], [ %v1_106c8, %dec_label_pc_106bc ], [ %v1_106c8, %bb445 ], [ %v1_106c8, %dec_label_pc_106d0 ]
  %v1_106e4 = add i32 %v0_106e4, 1
  store i32 %v1_106e4, i32* @r8, align 4
  %v1_106e8 = call i32 @function_110b8(i32 8)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_106f8 = call i32 @function_10ff4(i32 8, i32* nonnull %stack_var_-60)
  %v3_106fc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_106fc, i32* %r2.global-to-local, align 4
  store i32 %v3_106f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10708 = load i32, i32* @r6, align 4
  %v1_10708 = add i32 %v0_10708, 4
  %v2_10708 = inttoptr i32 %v1_10708 to i32*
  %v3_10708 = load i32, i32* %v2_10708, align 4
  %v4_1070c = inttoptr i32 %v3_106f8 to i32*
  %v5_1070c = call i32 @send(i32 %v3_10708, i32* %v4_1070c, i32 %v3_106fc, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e18.183 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_1071c = load i32, i32* @r6, align 4
  %v1_1071c = add i32 %v0_1071c, 4
  %v2_1071c = inttoptr i32 %v1_1071c to i32*
  %v3_1071c = load i32, i32* %v2_1071c, align 4
  %v5_10720 = call i32 @send(i32 %v3_1071c, i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), i32 2, i32 16384)
  %v1_10728 = call i32 @function_11018(i32 8)
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_10730 = load i32, i32* @r6, align 4
  %v2_10730 = add i32 %v1_10730, 12
  %v3_10730 = inttoptr i32 %v2_10730 to i32*
  store i32 7, i32* %v3_10730, align 4
  br label %dec_label_pc_10498

dec_label_pc_10738:                               ; preds = %dec_label_pc_102c8
  %v1_10738 = add i32 %v0_102c8, 24
  %v2_10738 = inttoptr i32 %v1_10738 to i32*
  %v3_10738 = load i32, i32* %v2_10738, align 4
  store i32 %v3_10738, i32* %r2.global-to-local, align 4
  %v1_1073c = add i32 %v3_10738, -1
  store i32 %v1_1073c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10740 = icmp eq i32 %v1_1073c, 0
  store i1 %v2_10740, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_1073c, 1
  br i1 %tmp446, label %dec_label_pc_10248.backedge.thread, label %dec_label_pc_10748

dec_label_pc_10748:                               ; preds = %dec_label_pc_10738
  %v2_10748 = add i32 %v1_1073c, %v0_102c8
  store i32 %v2_10748, i32* %r3.global-to-local, align 4
  %v1_1074c = add i32 %v2_10748, 28
  %v2_1074c = inttoptr i32 %v1_1074c to i8*
  %v3_1074c = load i8, i8* %v2_1074c, align 1
  %v4_1074c = zext i8 %v3_1074c to i32
  store i32 %v4_1074c, i32* %r3.global-to-local, align 4
  %v2_10750 = icmp ugt i8 %v3_1074c, 61
  store i1 %v2_10750, i1* %cpsr_c.global-to-local, align 1
  %v7_10750 = icmp eq i8 %v3_1074c, 62
  store i1 %v7_10750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10750, label %dec_label_pc_107b4, label %bb447

bb447:                                            ; preds = %dec_label_pc_10748
  %v3_10754 = icmp ugt i8 %v3_1074c, 57
  store i1 %v3_10754, i1* %cpsr_c.global-to-local, align 1
  %v8_10754 = icmp eq i8 %v3_1074c, 58
  store i1 %v8_10754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10754, label %dec_label_pc_107b4, label %dec_label_pc_1075c

dec_label_pc_1075c:                               ; preds = %bb447
  %v2_1075c = icmp ugt i8 %v3_1074c, 35
  store i1 %v2_1075c, i1* %cpsr_c.global-to-local, align 1
  %v7_1075c = icmp eq i8 %v3_1074c, 36
  store i1 %v7_1075c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1075c, label %dec_label_pc_107b4, label %dec_label_pc_10764

dec_label_pc_10764:                               ; preds = %dec_label_pc_1075c
  %v2_10764 = icmp ugt i8 %v3_1074c, 34
  store i1 %v2_10764, i1* %cpsr_c.global-to-local, align 1
  %v7_10764 = icmp eq i8 %v3_1074c, 35
  store i1 %v7_10764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10764, label %dec_label_pc_107b4, label %dec_label_pc_1076c

dec_label_pc_1076c:                               ; preds = %dec_label_pc_10764
  %v2_1076c = icmp ugt i8 %v3_1074c, 36
  store i1 %v2_1076c, i1* %cpsr_c.global-to-local, align 1
  %v7_1076c = icmp eq i8 %v3_1074c, 37
  store i1 %v7_1076c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1076c, label %dec_label_pc_107b4, label %dec_label_pc_1079c.preheader

dec_label_pc_1079c.preheader:                     ; preds = %dec_label_pc_1076c
  %v3_10770 = add i32 %v0_102c8, 28
  %v2_10774 = add i32 %v3_10770, %v3_10738
  store i32 %v2_10774, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1079c

dec_label_pc_10780:                               ; preds = %bb448
  %v2_10780 = icmp ugt i8 %v3_107a4, 35
  store i1 %v2_10780, i1* %cpsr_c.global-to-local, align 1
  %v7_10780 = icmp eq i8 %v3_107a4, 36
  store i1 %v7_10780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10780, label %dec_label_pc_107b4, label %dec_label_pc_10788

dec_label_pc_10788:                               ; preds = %dec_label_pc_10780
  %v2_10788 = icmp ugt i8 %v3_107a4, 34
  store i1 %v2_10788, i1* %cpsr_c.global-to-local, align 1
  %v7_10788 = icmp eq i8 %v3_107a4, 35
  store i1 %v7_10788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10788, label %dec_label_pc_107b4, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %dec_label_pc_10788
  %v2_10790 = icmp ugt i8 %v3_107a4, 36
  store i1 %v2_10790, i1* %cpsr_c.global-to-local, align 1
  %v7_10790 = icmp eq i8 %v3_107a4, 37
  store i1 %v7_10790, i1* %cpsr_z.global-to-local, align 1
  %v1_10794 = add i32 %v0_10794, -1
  store i32 %v1_10794, i32* %r3.global-to-local, align 4
  br i1 %v7_10790, label %dec_label_pc_107b4, label %dec_label_pc_1079c

dec_label_pc_1079c:                               ; preds = %dec_label_pc_1079c.preheader, %dec_label_pc_10790
  %v0_10794 = phi i32 [ %v2_10774, %dec_label_pc_1079c.preheader ], [ %v1_10794, %dec_label_pc_10790 ]
  %v0_1079c = phi i32 [ %v1_1073c, %dec_label_pc_1079c.preheader ], [ %v1_1079c, %dec_label_pc_10790 ]
  %v1_1079c = add i32 %v0_1079c, -1
  store i32 %v1_1079c, i32* %r1.global-to-local, align 4
  %v2_1079c = icmp ne i32 %v0_1079c, 0
  store i1 %v2_1079c, i1* %cpsr_c.global-to-local, align 1
  %v7_1079c = icmp eq i32 %v0_1079c, 1
  store i1 %v7_1079c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1079c, label %dec_label_pc_10248.backedge.thread584, label %dec_label_pc_107a4

dec_label_pc_107a4:                               ; preds = %dec_label_pc_1079c
  %v1_107a4 = add i32 %v0_10794, -2
  %v2_107a4 = inttoptr i32 %v1_107a4 to i8*
  %v3_107a4 = load i8, i8* %v2_107a4, align 1
  %v4_107a4 = zext i8 %v3_107a4 to i32
  store i32 %v4_107a4, i32* %r2.global-to-local, align 4
  %v2_107a8 = icmp ugt i8 %v3_107a4, 61
  store i1 %v2_107a8, i1* %cpsr_c.global-to-local, align 1
  %v7_107a8 = icmp eq i8 %v3_107a4, 62
  store i1 %v7_107a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107a8, label %dec_label_pc_107b4, label %bb448

bb448:                                            ; preds = %dec_label_pc_107a4
  %v3_107ac = icmp ugt i8 %v3_107a4, 57
  store i1 %v3_107ac, i1* %cpsr_c.global-to-local, align 1
  %v8_107ac = icmp eq i8 %v3_107a4, 58
  store i1 %v8_107ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_107ac, label %dec_label_pc_107b4, label %dec_label_pc_10780

dec_label_pc_107b4:                               ; preds = %dec_label_pc_107a4, %bb448, %dec_label_pc_10790, %dec_label_pc_10788, %dec_label_pc_10780, %dec_label_pc_1076c, %dec_label_pc_10748, %dec_label_pc_10764, %dec_label_pc_1075c, %bb447
  %v0_107b8 = phi i32 [ %v1_1073c, %dec_label_pc_1076c ], [ %v1_1073c, %dec_label_pc_10748 ], [ %v1_1073c, %dec_label_pc_10764 ], [ %v1_1073c, %dec_label_pc_1075c ], [ %v1_1073c, %bb447 ], [ %v1_1079c, %dec_label_pc_10780 ], [ %v1_1079c, %dec_label_pc_10788 ], [ %v1_1079c, %dec_label_pc_10790 ], [ %v1_1079c, %bb448 ], [ %v1_1079c, %dec_label_pc_107a4 ]
  %v1_107b8 = add i32 %v0_107b8, 1
  store i32 %v1_107b8, i32* @r8, align 4
  %v1_107bc = call i32 @function_110b8(i32 7)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_107cc = call i32 @function_10ff4(i32 7, i32* nonnull %stack_var_-60)
  %v3_107d0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_107d0, i32* %r2.global-to-local, align 4
  store i32 %v3_107cc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_107dc = load i32, i32* @r6, align 4
  %v1_107dc = add i32 %v0_107dc, 4
  %v2_107dc = inttoptr i32 %v1_107dc to i32*
  %v3_107dc = load i32, i32* %v2_107dc, align 4
  %v4_107e0 = inttoptr i32 %v3_107cc to i32*
  %v5_107e0 = call i32 @send(i32 %v3_107dc, i32* %v4_107e0, i32 %v3_107d0, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e18.183 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_107f0 = load i32, i32* @r6, align 4
  %v1_107f0 = add i32 %v0_107f0, 4
  %v2_107f0 = inttoptr i32 %v1_107f0 to i32*
  %v3_107f0 = load i32, i32* %v2_107f0, align 4
  %v5_107f4 = call i32 @send(i32 %v3_107f0, i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), i32 2, i32 16384)
  %v1_107fc = call i32 @function_11018(i32 7)
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_10804 = load i32, i32* @r6, align 4
  %v2_10804 = add i32 %v1_10804, 12
  %v3_10804 = inttoptr i32 %v2_10804 to i32*
  store i32 6, i32* %v3_10804, align 4
  br label %dec_label_pc_10498

dec_label_pc_1080c:                               ; preds = %dec_label_pc_102c8
  %v1_1080c = add i32 %v0_102c8, 24
  %v2_1080c = inttoptr i32 %v1_1080c to i32*
  %v3_1080c = load i32, i32* %v2_1080c, align 4
  store i32 %v3_1080c, i32* %r2.global-to-local, align 4
  %v1_10810 = add i32 %v3_1080c, -1
  store i32 %v1_10810, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10814 = icmp eq i32 %v1_10810, 0
  store i1 %v2_10814, i1* %cpsr_z.global-to-local, align 1
  %tmp449 = icmp slt i32 %v1_10810, 1
  br i1 %tmp449, label %dec_label_pc_10248.backedge.thread, label %dec_label_pc_1081c

dec_label_pc_1081c:                               ; preds = %dec_label_pc_1080c
  %v2_1081c = add i32 %v1_10810, %v0_102c8
  store i32 %v2_1081c, i32* %r3.global-to-local, align 4
  %v1_10820 = add i32 %v2_1081c, 28
  %v2_10820 = inttoptr i32 %v1_10820 to i8*
  %v3_10820 = load i8, i8* %v2_10820, align 1
  %v4_10820 = zext i8 %v3_10820 to i32
  store i32 %v4_10820, i32* %r3.global-to-local, align 4
  %v2_10824 = icmp ugt i8 %v3_10820, 61
  store i1 %v2_10824, i1* %cpsr_c.global-to-local, align 1
  %v7_10824 = icmp eq i8 %v3_10820, 62
  store i1 %v7_10824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10824, label %dec_label_pc_108fc, label %bb450

bb450:                                            ; preds = %dec_label_pc_1081c
  %v3_10828 = icmp ugt i8 %v3_10820, 57
  store i1 %v3_10828, i1* %cpsr_c.global-to-local, align 1
  %v8_10828 = icmp eq i8 %v3_10820, 58
  store i1 %v8_10828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10828, label %dec_label_pc_108fc, label %dec_label_pc_10830

dec_label_pc_10830:                               ; preds = %bb450
  %v2_10830 = icmp ugt i8 %v3_10820, 35
  store i1 %v2_10830, i1* %cpsr_c.global-to-local, align 1
  %v7_10830 = icmp eq i8 %v3_10820, 36
  store i1 %v7_10830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10830, label %dec_label_pc_108fc, label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %dec_label_pc_10830
  %v2_10838 = icmp ugt i8 %v3_10820, 34
  store i1 %v2_10838, i1* %cpsr_c.global-to-local, align 1
  %v7_10838 = icmp eq i8 %v3_10820, 35
  store i1 %v7_10838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10838, label %dec_label_pc_108fc, label %dec_label_pc_10840

dec_label_pc_10840:                               ; preds = %dec_label_pc_10838
  %v2_10840 = icmp ugt i8 %v3_10820, 36
  store i1 %v2_10840, i1* %cpsr_c.global-to-local, align 1
  %v7_10840 = icmp eq i8 %v3_10820, 37
  store i1 %v7_10840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10840, label %dec_label_pc_108fc, label %dec_label_pc_108e4.preheader

dec_label_pc_108e4.preheader:                     ; preds = %dec_label_pc_10840
  %v3_10844 = add i32 %v0_102c8, 28
  %v2_10848 = add i32 %v3_10844, %v3_1080c
  store i32 %v2_10848, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108e4

dec_label_pc_108c8:                               ; preds = %bb451
  %v2_108c8 = icmp ugt i8 %v3_108ec, 35
  store i1 %v2_108c8, i1* %cpsr_c.global-to-local, align 1
  %v7_108c8 = icmp eq i8 %v3_108ec, 36
  store i1 %v7_108c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c8, label %dec_label_pc_108fc, label %dec_label_pc_108d0

dec_label_pc_108d0:                               ; preds = %dec_label_pc_108c8
  %v2_108d0 = icmp ugt i8 %v3_108ec, 34
  store i1 %v2_108d0, i1* %cpsr_c.global-to-local, align 1
  %v7_108d0 = icmp eq i8 %v3_108ec, 35
  store i1 %v7_108d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108d0, label %dec_label_pc_108fc, label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108d0
  %v2_108d8 = icmp ugt i8 %v3_108ec, 36
  store i1 %v2_108d8, i1* %cpsr_c.global-to-local, align 1
  %v7_108d8 = icmp eq i8 %v3_108ec, 37
  store i1 %v7_108d8, i1* %cpsr_z.global-to-local, align 1
  %v1_108dc = add i32 %v0_108dc, -1
  store i32 %v1_108dc, i32* %r3.global-to-local, align 4
  br i1 %v7_108d8, label %dec_label_pc_108fc, label %dec_label_pc_108e4

dec_label_pc_108e4:                               ; preds = %dec_label_pc_108e4.preheader, %dec_label_pc_108d8
  %v0_108dc = phi i32 [ %v2_10848, %dec_label_pc_108e4.preheader ], [ %v1_108dc, %dec_label_pc_108d8 ]
  %v0_108e4 = phi i32 [ %v1_10810, %dec_label_pc_108e4.preheader ], [ %v1_108e4, %dec_label_pc_108d8 ]
  %v1_108e4 = add i32 %v0_108e4, -1
  store i32 %v1_108e4, i32* %r1.global-to-local, align 4
  %v2_108e4 = icmp ne i32 %v0_108e4, 0
  store i1 %v2_108e4, i1* %cpsr_c.global-to-local, align 1
  %v7_108e4 = icmp eq i32 %v0_108e4, 1
  store i1 %v7_108e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108e4, label %dec_label_pc_10248.backedge.thread584, label %dec_label_pc_108ec

dec_label_pc_108ec:                               ; preds = %dec_label_pc_108e4
  %v1_108ec = add i32 %v0_108dc, -2
  %v2_108ec = inttoptr i32 %v1_108ec to i8*
  %v3_108ec = load i8, i8* %v2_108ec, align 1
  %v4_108ec = zext i8 %v3_108ec to i32
  store i32 %v4_108ec, i32* %r2.global-to-local, align 4
  %v2_108f0 = icmp ugt i8 %v3_108ec, 61
  store i1 %v2_108f0, i1* %cpsr_c.global-to-local, align 1
  %v7_108f0 = icmp eq i8 %v3_108ec, 62
  store i1 %v7_108f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108f0, label %dec_label_pc_108fc, label %bb451

bb451:                                            ; preds = %dec_label_pc_108ec
  %v3_108f4 = icmp ugt i8 %v3_108ec, 57
  store i1 %v3_108f4, i1* %cpsr_c.global-to-local, align 1
  %v8_108f4 = icmp eq i8 %v3_108ec, 58
  store i1 %v8_108f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_108f4, label %dec_label_pc_108fc, label %dec_label_pc_108c8

dec_label_pc_108fc:                               ; preds = %dec_label_pc_108ec, %bb451, %dec_label_pc_108d8, %dec_label_pc_108d0, %dec_label_pc_108c8, %dec_label_pc_10840, %dec_label_pc_1081c, %dec_label_pc_10838, %dec_label_pc_10830, %bb450
  %v0_10900 = phi i32 [ %v1_10810, %dec_label_pc_10840 ], [ %v1_10810, %dec_label_pc_1081c ], [ %v1_10810, %dec_label_pc_10838 ], [ %v1_10810, %dec_label_pc_10830 ], [ %v1_10810, %bb450 ], [ %v1_108e4, %dec_label_pc_108c8 ], [ %v1_108e4, %dec_label_pc_108d0 ], [ %v1_108e4, %dec_label_pc_108d8 ], [ %v1_108e4, %bb451 ], [ %v1_108e4, %dec_label_pc_108ec ]
  %v1_10900 = add i32 %v0_10900, 1
  store i32 %v1_10900, i32* @r8, align 4
  %v1_10904 = call i32 @function_110b8(i32 9)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_10914 = call i32 @function_10ff4(i32 9, i32* nonnull %stack_var_-60)
  %v3_10918 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10918, i32* %r2.global-to-local, align 4
  store i32 %v3_10914, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10924 = load i32, i32* @r6, align 4
  %v1_10924 = add i32 %v0_10924, 4
  %v2_10924 = inttoptr i32 %v1_10924 to i32*
  %v3_10924 = load i32, i32* %v2_10924, align 4
  %v4_10928 = inttoptr i32 %v3_10914 to i32*
  %v5_10928 = call i32 @send(i32 %v3_10924, i32* %v4_10928, i32 %v3_10918, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e18.183 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10938 = load i32, i32* @r6, align 4
  %v1_10938 = add i32 %v0_10938, 4
  %v2_10938 = inttoptr i32 %v1_10938 to i32*
  %v3_10938 = load i32, i32* %v2_10938, align 4
  %v5_1093c = call i32 @send(i32 %v3_10938, i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), i32 2, i32 16384)
  %v1_10944 = call i32 @function_11018(i32 9)
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_1094c = load i32, i32* @r6, align 4
  %v2_1094c = add i32 %v1_1094c, 12
  %v3_1094c = inttoptr i32 %v2_1094c to i32*
  store i32 9, i32* %v3_1094c, align 4
  br label %dec_label_pc_10498

dec_label_pc_10954:                               ; preds = %dec_label_pc_102c8
  %v1_10954 = add i32 %v0_102c8, 24
  %v2_10954 = inttoptr i32 %v1_10954 to i32*
  %v3_10954 = load i32, i32* %v2_10954, align 4
  store i32 %v3_10954, i32* %r2.global-to-local, align 4
  %v1_10958 = add i32 %v3_10954, -1
  store i32 %v1_10958, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1095c = icmp eq i32 %v1_10958, 0
  store i1 %v2_1095c, i1* %cpsr_z.global-to-local, align 1
  %tmp452 = icmp slt i32 %v1_10958, 1
  br i1 %tmp452, label %dec_label_pc_109c0, label %dec_label_pc_10964

dec_label_pc_10964:                               ; preds = %dec_label_pc_10954
  %v2_10964 = add i32 %v1_10958, %v0_102c8
  store i32 %v2_10964, i32* %r3.global-to-local, align 4
  %v1_10968 = add i32 %v2_10964, 28
  %v2_10968 = inttoptr i32 %v1_10968 to i8*
  %v3_10968 = load i8, i8* %v2_10968, align 1
  %v4_10968 = zext i8 %v3_10968 to i32
  store i32 %v4_10968, i32* %r3.global-to-local, align 4
  %v2_1096c = icmp ugt i8 %v3_10968, 61
  store i1 %v2_1096c, i1* %cpsr_c.global-to-local, align 1
  %v7_1096c = icmp eq i8 %v3_10968, 62
  store i1 %v7_1096c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1096c, label %dec_label_pc_10cf4, label %bb453

bb453:                                            ; preds = %dec_label_pc_10964
  %v3_10970 = icmp ugt i8 %v3_10968, 57
  store i1 %v3_10970, i1* %cpsr_c.global-to-local, align 1
  %v8_10970 = icmp eq i8 %v3_10968, 58
  store i1 %v8_10970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10970, label %dec_label_pc_10cf4, label %dec_label_pc_10978

dec_label_pc_10978:                               ; preds = %bb453
  %v2_10978 = icmp ugt i8 %v3_10968, 35
  store i1 %v2_10978, i1* %cpsr_c.global-to-local, align 1
  %v7_10978 = icmp eq i8 %v3_10968, 36
  store i1 %v7_10978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10978, label %dec_label_pc_10cf4, label %dec_label_pc_10980

dec_label_pc_10980:                               ; preds = %dec_label_pc_10978
  %v2_10980 = icmp ugt i8 %v3_10968, 34
  store i1 %v2_10980, i1* %cpsr_c.global-to-local, align 1
  %v7_10980 = icmp eq i8 %v3_10968, 35
  store i1 %v7_10980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10980, label %dec_label_pc_10cf4, label %dec_label_pc_109b8.preheader

dec_label_pc_109b8.preheader:                     ; preds = %dec_label_pc_10980
  %v3_10984 = add i32 %v0_102c8, 28
  %v2_10988 = add i32 %v3_10984, %v3_10954
  store i32 %v2_10988, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_109b8

dec_label_pc_10994:                               ; preds = %dec_label_pc_109b8
  %v1_10994 = add i32 %v0_109b0, -2
  %v2_10994 = inttoptr i32 %v1_10994 to i8*
  %v3_10994 = load i8, i8* %v2_10994, align 1
  %v4_10994 = zext i8 %v3_10994 to i32
  store i32 %v4_10994, i32* %r2.global-to-local, align 4
  %v2_10998 = icmp ugt i8 %v3_10994, 61
  store i1 %v2_10998, i1* %cpsr_c.global-to-local, align 1
  %v7_10998 = icmp eq i8 %v3_10994, 62
  store i1 %v7_10998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10998, label %dec_label_pc_10cf4, label %bb454

bb454:                                            ; preds = %dec_label_pc_10994
  %v3_1099c = icmp ugt i8 %v3_10994, 57
  store i1 %v3_1099c, i1* %cpsr_c.global-to-local, align 1
  %v8_1099c = icmp eq i8 %v3_10994, 58
  store i1 %v8_1099c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1099c, label %dec_label_pc_10cf4, label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %bb454
  %v2_109a4 = icmp ugt i8 %v3_10994, 35
  store i1 %v2_109a4, i1* %cpsr_c.global-to-local, align 1
  %v7_109a4 = icmp eq i8 %v3_10994, 36
  store i1 %v7_109a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109a4, label %dec_label_pc_10cf4, label %dec_label_pc_109ac

dec_label_pc_109ac:                               ; preds = %dec_label_pc_109a4
  %v2_109ac = icmp ugt i8 %v3_10994, 34
  store i1 %v2_109ac, i1* %cpsr_c.global-to-local, align 1
  %v7_109ac = icmp eq i8 %v3_10994, 35
  store i1 %v7_109ac, i1* %cpsr_z.global-to-local, align 1
  %v1_109b0 = add i32 %v0_109b0, -1
  store i32 %v1_109b0, i32* %r3.global-to-local, align 4
  br i1 %v7_109ac, label %dec_label_pc_10cf4, label %dec_label_pc_109b8

dec_label_pc_109b8:                               ; preds = %dec_label_pc_109b8.preheader, %dec_label_pc_109ac
  %v0_109b0 = phi i32 [ %v2_10988, %dec_label_pc_109b8.preheader ], [ %v1_109b0, %dec_label_pc_109ac ]
  %v0_109b8 = phi i32 [ %v1_10958, %dec_label_pc_109b8.preheader ], [ %v1_109b8, %dec_label_pc_109ac ]
  %v1_109b8 = add i32 %v0_109b8, -1
  store i32 %v1_109b8, i32* %r1.global-to-local, align 4
  %v2_109b8 = icmp ne i32 %v0_109b8, 0
  store i1 %v2_109b8, i1* %cpsr_c.global-to-local, align 1
  %v7_109b8 = icmp eq i32 %v0_109b8, 1
  store i1 %v7_109b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109b8, label %dec_label_pc_109c0, label %dec_label_pc_10994

dec_label_pc_109c0:                               ; preds = %dec_label_pc_109b8, %dec_label_pc_10954
  %v1_109c4 = call i32 @function_110b8(i32 30)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_109d4 = call i32 @function_10ff4(i32 30, i32* nonnull %stack_var_-60)
  %v3_109d8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_109d4, i32* %r2.global-to-local, align 4
  %v1_109e0 = add i32 %v3_109d8, -1
  store i32 %v1_109e0, i32* %r3.global-to-local, align 4
  %v0_109e4 = load i32, i32* @fp, align 4
  %v0_109e8 = load i32, i32* @r6, align 4
  %v1_109e8 = add i32 %v0_109e8, 24
  %v2_109e8 = inttoptr i32 %v1_109e8 to i32*
  %v3_109e8 = load i32, i32* %v2_109e8, align 4
  store i32 %v3_109e8, i32* %r1.global-to-local, align 4
  %v4_109ec = call i32 @function_117a4(i32 %v0_109e4, i32 %v3_109e8, i32 %v3_109d4, i32 %v1_109e0)
  %v2_109f0 = icmp eq i32 %v4_109ec, -1
  store i1 %v2_109f0, i1* %cpsr_c.global-to-local, align 1
  %v7_109f0 = icmp eq i32 %v4_109ec, -1
  store i1 %v7_109f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109f0, label %dec_label_pc_10fa8.loopexit, label %dec_label_pc_10a00

dec_label_pc_10a00:                               ; preds = %dec_label_pc_109c0
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_10a04 = call i32 @function_11018(i32 30)
  br label %dec_label_pc_10a08

dec_label_pc_10a08:                               ; preds = %dec_label_pc_10cf4, %dec_label_pc_10a00
  %v0_10a08 = load i32, i32* @r6, align 4
  %v1_10a08 = inttoptr i32 %v0_10a08 to i32*
  %v2_10a08 = load i32, i32* %v1_10a08, align 4
  store i32 %v2_10a08, i32* %r3.global-to-local, align 4
  %v1_10a0c = add i32 %v0_10a08, 4
  %v2_10a0c = inttoptr i32 %v1_10a0c to i32*
  %v3_10a0c = load i32, i32* %v2_10a0c, align 4
  %v1_10a10 = add i32 %v2_10a08, 13
  %v2_10a10 = inttoptr i32 %v1_10a10 to i8*
  %v3_10a10 = load i8, i8* %v2_10a10, align 1
  %v4_10a10 = zext i8 %v3_10a10 to i32
  store i32 %v4_10a10, i32* %r2.global-to-local, align 4
  %v1_10a14 = add i32 %v2_10a08, 4
  %v2_10a14 = inttoptr i32 %v1_10a14 to i32*
  %v3_10a14 = load i32, i32* %v2_10a14, align 4
  store i32 %v3_10a14, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10a1c = inttoptr i32 %v3_10a14 to i32*
  %v5_10a1c = call i32 @send(i32 %v3_10a0c, i32* %v4_10a1c, i32 %v4_10a10, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a24 = load i32, i32* @r6, align 4
  %v1_10a24 = add i32 %v0_10a24, 4
  %v2_10a24 = inttoptr i32 %v1_10a24 to i32*
  %v3_10a24 = load i32, i32* %v2_10a24, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e18.183 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_10a30 = call i32 @send(i32 %v3_10a24, i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_10a38 = load i32, i32* @r6, align 4
  %v2_10a38 = add i32 %v1_10a38, 12
  %v3_10a38 = inttoptr i32 %v2_10a38 to i32*
  store i32 5, i32* %v3_10a38, align 4
  br label %dec_label_pc_10490thread-pre-split

dec_label_pc_10a40:                               ; preds = %dec_label_pc_102c8
  %v1_10a40 = add i32 %v0_102c8, 24
  %v2_10a40 = inttoptr i32 %v1_10a40 to i32*
  %v3_10a40 = load i32, i32* %v2_10a40, align 4
  store i32 %v3_10a40, i32* %r2.global-to-local, align 4
  %v1_10a44 = add i32 %v3_10a40, -1
  store i32 %v1_10a44, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a48 = icmp eq i32 %v1_10a44, 0
  store i1 %v2_10a48, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v1_10a44, 1
  br i1 %tmp455, label %dec_label_pc_10248.backedge.thread, label %dec_label_pc_10a50

dec_label_pc_10a50:                               ; preds = %dec_label_pc_10a40
  %v2_10a50 = add i32 %v1_10a44, %v0_102c8
  store i32 %v2_10a50, i32* %r3.global-to-local, align 4
  %v1_10a54 = add i32 %v2_10a50, 28
  %v2_10a54 = inttoptr i32 %v1_10a54 to i8*
  %v3_10a54 = load i8, i8* %v2_10a54, align 1
  %v4_10a54 = zext i8 %v3_10a54 to i32
  store i32 %v4_10a54, i32* %r3.global-to-local, align 4
  %v2_10a58 = icmp ugt i8 %v3_10a54, 61
  store i1 %v2_10a58, i1* %cpsr_c.global-to-local, align 1
  %v7_10a58 = icmp eq i8 %v3_10a54, 62
  store i1 %v7_10a58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a58, label %dec_label_pc_10abc, label %bb456

bb456:                                            ; preds = %dec_label_pc_10a50
  %v3_10a5c = icmp ugt i8 %v3_10a54, 57
  store i1 %v3_10a5c, i1* %cpsr_c.global-to-local, align 1
  %v8_10a5c = icmp eq i8 %v3_10a54, 58
  store i1 %v8_10a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10a5c, label %dec_label_pc_10abc, label %dec_label_pc_10a64

dec_label_pc_10a64:                               ; preds = %bb456
  %v2_10a64 = icmp ugt i8 %v3_10a54, 35
  store i1 %v2_10a64, i1* %cpsr_c.global-to-local, align 1
  %v7_10a64 = icmp eq i8 %v3_10a54, 36
  store i1 %v7_10a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a64, label %dec_label_pc_10abc, label %dec_label_pc_10a6c

dec_label_pc_10a6c:                               ; preds = %dec_label_pc_10a64
  %v2_10a6c = icmp ugt i8 %v3_10a54, 34
  store i1 %v2_10a6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a6c = icmp eq i8 %v3_10a54, 35
  store i1 %v7_10a6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a6c, label %dec_label_pc_10abc, label %dec_label_pc_10a74

dec_label_pc_10a74:                               ; preds = %dec_label_pc_10a6c
  %v2_10a74 = icmp ugt i8 %v3_10a54, 36
  store i1 %v2_10a74, i1* %cpsr_c.global-to-local, align 1
  %v7_10a74 = icmp eq i8 %v3_10a54, 37
  store i1 %v7_10a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a74, label %dec_label_pc_10abc, label %dec_label_pc_10aa4.preheader

dec_label_pc_10aa4.preheader:                     ; preds = %dec_label_pc_10a74
  %v3_10a78 = add i32 %v0_102c8, 28
  %v2_10a7c = add i32 %v3_10a78, %v3_10a40
  store i32 %v2_10a7c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10aa4

dec_label_pc_10a88:                               ; preds = %bb457
  %v2_10a88 = icmp ugt i8 %v3_10aac, 35
  store i1 %v2_10a88, i1* %cpsr_c.global-to-local, align 1
  %v7_10a88 = icmp eq i8 %v3_10aac, 36
  store i1 %v7_10a88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a88, label %dec_label_pc_10abc, label %dec_label_pc_10a90

dec_label_pc_10a90:                               ; preds = %dec_label_pc_10a88
  %v2_10a90 = icmp ugt i8 %v3_10aac, 34
  store i1 %v2_10a90, i1* %cpsr_c.global-to-local, align 1
  %v7_10a90 = icmp eq i8 %v3_10aac, 35
  store i1 %v7_10a90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a90, label %dec_label_pc_10abc, label %dec_label_pc_10a98

dec_label_pc_10a98:                               ; preds = %dec_label_pc_10a90
  %v2_10a98 = icmp ugt i8 %v3_10aac, 36
  store i1 %v2_10a98, i1* %cpsr_c.global-to-local, align 1
  %v7_10a98 = icmp eq i8 %v3_10aac, 37
  store i1 %v7_10a98, i1* %cpsr_z.global-to-local, align 1
  %v1_10a9c = add i32 %v0_10a9c, -1
  store i32 %v1_10a9c, i32* %r3.global-to-local, align 4
  br i1 %v7_10a98, label %dec_label_pc_10abc, label %dec_label_pc_10aa4

dec_label_pc_10aa4:                               ; preds = %dec_label_pc_10aa4.preheader, %dec_label_pc_10a98
  %v0_10a9c = phi i32 [ %v2_10a7c, %dec_label_pc_10aa4.preheader ], [ %v1_10a9c, %dec_label_pc_10a98 ]
  %v0_10aa4 = phi i32 [ %v1_10a44, %dec_label_pc_10aa4.preheader ], [ %v1_10aa4, %dec_label_pc_10a98 ]
  %v1_10aa4 = add i32 %v0_10aa4, -1
  store i32 %v1_10aa4, i32* %r1.global-to-local, align 4
  %v2_10aa4 = icmp ne i32 %v0_10aa4, 0
  store i1 %v2_10aa4, i1* %cpsr_c.global-to-local, align 1
  %v7_10aa4 = icmp eq i32 %v0_10aa4, 1
  store i1 %v7_10aa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10aa4, label %dec_label_pc_10248.backedge.thread584, label %dec_label_pc_10aac

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10aa4
  %v1_10aac = add i32 %v0_10a9c, -2
  %v2_10aac = inttoptr i32 %v1_10aac to i8*
  %v3_10aac = load i8, i8* %v2_10aac, align 1
  %v4_10aac = zext i8 %v3_10aac to i32
  store i32 %v4_10aac, i32* %r2.global-to-local, align 4
  %v2_10ab0 = icmp ugt i8 %v3_10aac, 61
  store i1 %v2_10ab0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ab0 = icmp eq i8 %v3_10aac, 62
  store i1 %v7_10ab0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ab0, label %dec_label_pc_10abc, label %bb457

bb457:                                            ; preds = %dec_label_pc_10aac
  %v3_10ab4 = icmp ugt i8 %v3_10aac, 57
  store i1 %v3_10ab4, i1* %cpsr_c.global-to-local, align 1
  %v8_10ab4 = icmp eq i8 %v3_10aac, 58
  store i1 %v8_10ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ab4, label %dec_label_pc_10abc, label %dec_label_pc_10a88

dec_label_pc_10abc:                               ; preds = %dec_label_pc_10aac, %bb457, %dec_label_pc_10a98, %dec_label_pc_10a90, %dec_label_pc_10a88, %dec_label_pc_10a74, %dec_label_pc_10a50, %dec_label_pc_10a6c, %dec_label_pc_10a64, %bb456
  %v0_10ac0 = phi i32 [ %v1_10a44, %dec_label_pc_10a74 ], [ %v1_10a44, %dec_label_pc_10a50 ], [ %v1_10a44, %dec_label_pc_10a6c ], [ %v1_10a44, %dec_label_pc_10a64 ], [ %v1_10a44, %bb456 ], [ %v1_10aa4, %dec_label_pc_10a88 ], [ %v1_10aa4, %dec_label_pc_10a90 ], [ %v1_10aa4, %dec_label_pc_10a98 ], [ %v1_10aa4, %bb457 ], [ %v1_10aa4, %dec_label_pc_10aac ]
  %v1_10ac0 = add i32 %v0_10ac0, 1
  store i32 %v1_10ac0, i32* @r8, align 4
  %v1_10ac4 = call i32 @function_110b8(i32 6)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_10ad4 = call i32 @function_10ff4(i32 6, i32* nonnull %stack_var_-60)
  %v3_10ad8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10ad8, i32* %r2.global-to-local, align 4
  store i32 %v3_10ad4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ae4 = load i32, i32* @r6, align 4
  %v1_10ae4 = add i32 %v0_10ae4, 4
  %v2_10ae4 = inttoptr i32 %v1_10ae4 to i32*
  %v3_10ae4 = load i32, i32* %v2_10ae4, align 4
  %v4_10ae8 = inttoptr i32 %v3_10ad4 to i32*
  %v5_10ae8 = call i32 @send(i32 %v3_10ae4, i32* %v4_10ae8, i32 %v3_10ad8, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e18.183 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10af8 = load i32, i32* @r6, align 4
  %v1_10af8 = add i32 %v0_10af8, 4
  %v2_10af8 = inttoptr i32 %v1_10af8 to i32*
  %v3_10af8 = load i32, i32* %v2_10af8, align 4
  %v5_10afc = call i32 @send(i32 %v3_10af8, i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), i32 2, i32 16384)
  %v1_10b04 = call i32 @function_11018(i32 6)
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_10b0c = load i32, i32* @r6, align 4
  %v2_10b0c = add i32 %v1_10b0c, 12
  %v3_10b0c = inttoptr i32 %v2_10b0c to i32*
  store i32 8, i32* %v3_10b0c, align 4
  br label %dec_label_pc_10498

dec_label_pc_10b14:                               ; preds = %dec_label_pc_102c8
  %v1_10b14 = add i32 %v0_102c8, 24
  %v2_10b14 = inttoptr i32 %v1_10b14 to i32*
  %v3_10b14 = load i32, i32* %v2_10b14, align 4
  store i32 %v3_10b14, i32* %r2.global-to-local, align 4
  %v1_10b18 = add i32 %v3_10b14, -1
  store i32 %v1_10b18, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b1c = icmp eq i32 %v1_10b18, 0
  store i1 %v2_10b1c, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v1_10b18, 1
  br i1 %tmp458, label %dec_label_pc_10b90, label %dec_label_pc_10b24

dec_label_pc_10b24:                               ; preds = %dec_label_pc_10b14
  %v2_10b24 = add i32 %v1_10b18, %v0_102c8
  store i32 %v2_10b24, i32* %r3.global-to-local, align 4
  %v1_10b28 = add i32 %v2_10b24, 28
  %v2_10b28 = inttoptr i32 %v1_10b28 to i8*
  %v3_10b28 = load i8, i8* %v2_10b28, align 1
  %v4_10b28 = zext i8 %v3_10b28 to i32
  store i32 %v4_10b28, i32* %r3.global-to-local, align 4
  %v2_10b2c = icmp ugt i8 %v3_10b28, 61
  store i1 %v2_10b2c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b2c = icmp eq i8 %v3_10b28, 62
  store i1 %v7_10b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b2c, label %dec_label_pc_10ca8, label %bb459

bb459:                                            ; preds = %dec_label_pc_10b24
  %v3_10b30 = icmp ugt i8 %v3_10b28, 57
  store i1 %v3_10b30, i1* %cpsr_c.global-to-local, align 1
  %v8_10b30 = icmp eq i8 %v3_10b28, 58
  store i1 %v8_10b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10b30, label %dec_label_pc_10ca8, label %dec_label_pc_10b38

dec_label_pc_10b38:                               ; preds = %bb459
  %v2_10b38 = icmp ugt i8 %v3_10b28, 35
  store i1 %v2_10b38, i1* %cpsr_c.global-to-local, align 1
  %v7_10b38 = icmp eq i8 %v3_10b28, 36
  store i1 %v7_10b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b38, label %dec_label_pc_10ca8, label %dec_label_pc_10b40

dec_label_pc_10b40:                               ; preds = %dec_label_pc_10b38
  %v2_10b40 = icmp ugt i8 %v3_10b28, 34
  store i1 %v2_10b40, i1* %cpsr_c.global-to-local, align 1
  %v7_10b40 = icmp eq i8 %v3_10b28, 35
  store i1 %v7_10b40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b40, label %dec_label_pc_10ca8, label %dec_label_pc_10b48

dec_label_pc_10b48:                               ; preds = %dec_label_pc_10b40
  %v2_10b48 = icmp ugt i8 %v3_10b28, 36
  store i1 %v2_10b48, i1* %cpsr_c.global-to-local, align 1
  %v7_10b48 = icmp eq i8 %v3_10b28, 37
  store i1 %v7_10b48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b48, label %dec_label_pc_10ca8, label %dec_label_pc_10b88.preheader

dec_label_pc_10b88.preheader:                     ; preds = %dec_label_pc_10b48
  %v3_10b4c = add i32 %v0_102c8, 28
  %v2_10b50 = add i32 %v3_10b4c, %v3_10b14
  store i32 %v2_10b50, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10b88

dec_label_pc_10b5c:                               ; preds = %dec_label_pc_10b88
  %v1_10b5c = add i32 %v0_10b80, -2
  %v2_10b5c = inttoptr i32 %v1_10b5c to i8*
  %v3_10b5c = load i8, i8* %v2_10b5c, align 1
  %v4_10b5c = zext i8 %v3_10b5c to i32
  store i32 %v4_10b5c, i32* %r2.global-to-local, align 4
  %v2_10b60 = icmp ugt i8 %v3_10b5c, 61
  store i1 %v2_10b60, i1* %cpsr_c.global-to-local, align 1
  %v7_10b60 = icmp eq i8 %v3_10b5c, 62
  store i1 %v7_10b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b60, label %dec_label_pc_10ca8, label %bb460

bb460:                                            ; preds = %dec_label_pc_10b5c
  %v3_10b64 = icmp ugt i8 %v3_10b5c, 57
  store i1 %v3_10b64, i1* %cpsr_c.global-to-local, align 1
  %v8_10b64 = icmp eq i8 %v3_10b5c, 58
  store i1 %v8_10b64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10b64, label %dec_label_pc_10ca8, label %dec_label_pc_10b6c

dec_label_pc_10b6c:                               ; preds = %bb460
  %v2_10b6c = icmp ugt i8 %v3_10b5c, 35
  store i1 %v2_10b6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b6c = icmp eq i8 %v3_10b5c, 36
  store i1 %v7_10b6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b6c, label %dec_label_pc_10ca8, label %dec_label_pc_10b74

dec_label_pc_10b74:                               ; preds = %dec_label_pc_10b6c
  %v2_10b74 = icmp ugt i8 %v3_10b5c, 34
  store i1 %v2_10b74, i1* %cpsr_c.global-to-local, align 1
  %v7_10b74 = icmp eq i8 %v3_10b5c, 35
  store i1 %v7_10b74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b74, label %dec_label_pc_10ca8, label %dec_label_pc_10b7c

dec_label_pc_10b7c:                               ; preds = %dec_label_pc_10b74
  %v2_10b7c = icmp ugt i8 %v3_10b5c, 36
  store i1 %v2_10b7c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b7c = icmp eq i8 %v3_10b5c, 37
  store i1 %v7_10b7c, i1* %cpsr_z.global-to-local, align 1
  %v1_10b80 = add i32 %v0_10b80, -1
  store i32 %v1_10b80, i32* %r3.global-to-local, align 4
  br i1 %v7_10b7c, label %dec_label_pc_10ca8, label %dec_label_pc_10b88

dec_label_pc_10b88:                               ; preds = %dec_label_pc_10b88.preheader, %dec_label_pc_10b7c
  %v0_10b80 = phi i32 [ %v2_10b50, %dec_label_pc_10b88.preheader ], [ %v1_10b80, %dec_label_pc_10b7c ]
  %v0_10b88 = phi i32 [ %v1_10b18, %dec_label_pc_10b88.preheader ], [ %v1_10b88, %dec_label_pc_10b7c ]
  %v1_10b88 = add i32 %v0_10b88, -1
  store i32 %v1_10b88, i32* %r1.global-to-local, align 4
  %v2_10b88 = icmp ne i32 %v0_10b88, 0
  store i1 %v2_10b88, i1* %cpsr_c.global-to-local, align 1
  %v7_10b88 = icmp eq i32 %v0_10b88, 1
  store i1 %v7_10b88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b88, label %dec_label_pc_10b90, label %dec_label_pc_10b5c

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b88, %dec_label_pc_10b14
  %v1_10b94 = call i32 @function_110b8(i32 31)
  %v1_10b9c = call i32 @function_110b8(i32 32)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_10bac = call i32 @function_10ff4(i32 31, i32* nonnull %stack_var_-60)
  store i32 %v3_10bac, i32* @r4, align 4
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  %v3_10bc0 = call i32 @function_10ff4(i32 32, i32* nonnull %stack_var_-60)
  %v3_10bc4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10bc0, i32* @r5, align 4
  %v0_10bcc = load i32, i32* @r4, align 4
  store i32 %v0_10bcc, i32* %r2.global-to-local, align 4
  %v1_10bd0 = add i32 %v3_10bc4, -1
  store i32 %v1_10bd0, i32* %r3.global-to-local, align 4
  %v0_10bd4 = load i32, i32* @fp, align 4
  %v0_10bd8 = load i32, i32* @r6, align 4
  %v1_10bd8 = add i32 %v0_10bd8, 24
  %v2_10bd8 = inttoptr i32 %v1_10bd8 to i32*
  %v3_10bd8 = load i32, i32* %v2_10bd8, align 4
  store i32 %v3_10bd8, i32* %r1.global-to-local, align 4
  %v4_10bdc = call i32 @function_117a4(i32 %v0_10bd4, i32 %v3_10bd8, i32 %v0_10bcc, i32 %v1_10bd0)
  %v2_10be0 = icmp eq i32 %v4_10bdc, -1
  store i1 %v2_10be0, i1* %cpsr_c.global-to-local, align 1
  %v7_10be0 = icmp eq i32 %v4_10bdc, -1
  store i1 %v7_10be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10be0, label %dec_label_pc_10bf0, label %dec_label_pc_10c18

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10b90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10bf0 = load i32, i32* %stack_var_-60, align 4
  %v0_10bf4 = load i32, i32* @r5, align 4
  store i32 %v0_10bf4, i32* %r2.global-to-local, align 4
  %v1_10bf8 = add i32 %v3_10bf0, -1
  store i32 %v1_10bf8, i32* %r3.global-to-local, align 4
  %v0_10bfc = load i32, i32* @fp, align 4
  %v0_10c00 = load i32, i32* @r6, align 4
  %v1_10c00 = add i32 %v0_10c00, 24
  %v2_10c00 = inttoptr i32 %v1_10c00 to i32*
  %v3_10c00 = load i32, i32* %v2_10c00, align 4
  store i32 %v3_10c00, i32* %r1.global-to-local, align 4
  %v4_10c04 = call i32 @function_117a4(i32 %v0_10bfc, i32 %v3_10c00, i32 %v0_10bf4, i32 %v1_10bf8)
  %v2_10c08 = icmp eq i32 %v4_10c04, -1
  store i1 %v2_10c08, i1* %cpsr_c.global-to-local, align 1
  %v7_10c08 = icmp eq i32 %v4_10c04, -1
  store i1 %v7_10c08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c08, label %dec_label_pc_10fb8, label %dec_label_pc_10c18

dec_label_pc_10c18:                               ; preds = %dec_label_pc_10bf0, %dec_label_pc_10b90
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_10c1c = call i32 @function_11018(i32 31)
  %v1_10c24 = call i32 @function_11018(i32 32)
  %v0_10c28 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c28 = icmp eq i32 %v0_10c28, 0
  store i1 %v2_10c28, i1* %cpsr_z.global-to-local, align 1
  %tmp461 = icmp slt i32 %v0_10c28, 1
  br i1 %tmp461, label %dec_label_pc_10490, label %dec_label_pc_10cbc

dec_label_pc_10c34:                               ; preds = %dec_label_pc_105d8
  store i32 ptrtoint (i32* @global_var_11e24.185 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_10c50 = call i32* @memcpy(i32* nonnull %stack_var_-45, i32* nonnull @global_var_11e24.185, i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e1b.187 to i32), i32* %r1.global-to-local, align 4
  %v5_10c60 = call i32* @memcpy(i32* nonnull %stack_var_-77, i32* nonnull @global_var_11e1b.187, i32 9)
  %v0_10c64 = load i32, i32* @r6, align 4
  %v1_10c64 = add i32 %v0_10c64, 24
  %v2_10c64 = inttoptr i32 %v1_10c64 to i32*
  %v3_10c64 = load i32, i32* %v2_10c64, align 4
  %v0_10c68 = load i32, i32* @r4, align 4
  %v1_10c68 = add i32 %v0_10c68, 2
  store i32 %v1_10c68, i32* %r2.global-to-local, align 4
  %v0_10c6c = load i32, i32* @fp, align 4
  %v2_10c6c = add i32 %v0_10c6c, %v3_10c64
  store i32 %v2_10c6c, i32* %r3.global-to-local, align 4
  %v3_10c70 = icmp uge i32 %v2_10c6c, %v1_10c68
  store i1 %v3_10c70, i1* %cpsr_c.global-to-local, align 1
  %v9_10c70 = icmp eq i32 %v2_10c6c, %v1_10c68
  store i1 %v9_10c70, i1* %cpsr_z.global-to-local, align 1
  %v2_10c74 = xor i1 %v3_10c70, true
  %v3_10c74 = or i1 %v9_10c70, %v2_10c74
  br i1 %v3_10c74, label %dec_label_pc_10c34.dec_label_pc_10654.loopexit_crit_edge, label %dec_label_pc_10c78

dec_label_pc_10c34.dec_label_pc_10654.loopexit_crit_edge: ; preds = %dec_label_pc_10c34
  %v0_10654.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_10654

dec_label_pc_10c78:                               ; preds = %dec_label_pc_10c34
  %v2_10c78 = inttoptr i32 %v1_10c68 to i8*
  %v3_10c78 = load i8, i8* %v2_10c78, align 1
  %v4_10c78 = zext i8 %v3_10c78 to i32
  store i32 %v4_10c78, i32* %r3.global-to-local, align 4
  %v2_10c7c = icmp ugt i8 %v3_10c78, 30
  store i1 %v2_10c7c, i1* %cpsr_c.global-to-local, align 1
  %v7_10c7c = icmp eq i8 %v3_10c78, 31
  store i1 %v7_10c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c7c, label %dec_label_pc_10d48, label %dec_label_pc_10c84

dec_label_pc_10c84:                               ; preds = %dec_label_pc_10c78
  %v1_10c84 = inttoptr i32 %v0_10c68 to i8*
  %v2_10c84 = load i8, i8* %v1_10c84, align 1
  %v3_10c84 = zext i8 %v2_10c84 to i32
  store i32 %v3_10c84, i32* %r3.global-to-local, align 4
  %v2_10c88 = icmp ugt i8 %v2_10c84, -4
  store i1 %v2_10c88, i1* %cpsr_c.global-to-local, align 1
  %v7_10c88 = icmp eq i8 %v2_10c84, -3
  store i1 %v7_10c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c88, label %.thread148, label %dec_label_pc_10c98

.thread148:                                       ; preds = %dec_label_pc_10c84
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_10c84, align 1
  %v0_10c94.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10c94.pr.pr, label %dec_label_pc_105ec, label %.thread148.dec_label_pc_10c98thread-pre-split_crit_edge

.thread148.dec_label_pc_10c98thread-pre-split_crit_edge: ; preds = %.thread148
  %v0_10c98.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10c98

dec_label_pc_10c98:                               ; preds = %dec_label_pc_10c84, %.thread148.dec_label_pc_10c98thread-pre-split_crit_edge
  %v0_10c98.pr = phi i32 [ %v0_10c98.pr.pre, %.thread148.dec_label_pc_10c98thread-pre-split_crit_edge ], [ %v3_10c84, %dec_label_pc_10c84 ]
  %v2_10c98 = icmp ugt i32 %v0_10c98.pr, 250
  store i1 %v2_10c98, i1* %cpsr_c.global-to-local, align 1
  %v7_10c98 = icmp eq i32 %v0_10c98.pr, 251
  store i1 %v7_10c98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c98, label %bb462, label %dec_label_pc_105ec

bb462:                                            ; preds = %dec_label_pc_10c98
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_10ca0 = load i32, i32* @r4, align 4
  %v4_10ca0 = inttoptr i32 %v3_10ca0 to i8*
  store i8 -3, i8* %v4_10ca0, align 1
  br label %dec_label_pc_105ec

dec_label_pc_10ca8:                               ; preds = %dec_label_pc_10b5c, %dec_label_pc_10b7c, %dec_label_pc_10b74, %dec_label_pc_10b6c, %bb460, %dec_label_pc_10b48, %dec_label_pc_10b24, %dec_label_pc_10b40, %dec_label_pc_10b38, %bb459
  %v0_10cac = phi i32 [ %v1_10b18, %dec_label_pc_10b48 ], [ %v1_10b18, %dec_label_pc_10b24 ], [ %v1_10b18, %dec_label_pc_10b40 ], [ %v1_10b18, %dec_label_pc_10b38 ], [ %v1_10b18, %bb459 ], [ %v1_10b88, %bb460 ], [ %v1_10b88, %dec_label_pc_10b6c ], [ %v1_10b88, %dec_label_pc_10b74 ], [ %v1_10b88, %dec_label_pc_10b7c ], [ %v1_10b88, %dec_label_pc_10b5c ]
  %v1_10cac = add i32 %v0_10cac, 1
  store i32 %v1_10cac, i32* @r8, align 4
  %v1_10cb0 = call i32 @function_11018(i32 31)
  %v1_10cb8 = call i32 @function_11018(i32 32)
  br label %dec_label_pc_10cbc

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10c18, %dec_label_pc_10ca8
  %v0_10cbc = load i32, i32* @r6, align 4
  %v1_10cbc = inttoptr i32 %v0_10cbc to i32*
  %v2_10cbc = load i32, i32* %v1_10cbc, align 4
  store i32 %v2_10cbc, i32* %r3.global-to-local, align 4
  %v1_10cc0 = add i32 %v0_10cbc, 4
  %v2_10cc0 = inttoptr i32 %v1_10cc0 to i32*
  %v3_10cc0 = load i32, i32* %v2_10cc0, align 4
  %v1_10cc4 = add i32 %v2_10cbc, 12
  %v2_10cc4 = inttoptr i32 %v1_10cc4 to i8*
  %v3_10cc4 = load i8, i8* %v2_10cc4, align 1
  %v4_10cc4 = zext i8 %v3_10cc4 to i32
  store i32 %v4_10cc4, i32* %r2.global-to-local, align 4
  %v1_10cc8 = inttoptr i32 %v2_10cbc to i32*
  %v2_10cc8 = load i32, i32* %v1_10cc8, align 4
  store i32 %v2_10cc8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10cd0 = inttoptr i32 %v2_10cc8 to i32*
  %v5_10cd0 = call i32 @send(i32 %v3_10cc0, i32* %v4_10cd0, i32 %v4_10cc4, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cd8 = load i32, i32* @r6, align 4
  %v1_10cd8 = add i32 %v0_10cd8, 4
  %v2_10cd8 = inttoptr i32 %v1_10cd8 to i32*
  %v3_10cd8 = load i32, i32* %v2_10cd8, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_11e18.183 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_10ce4 = call i32 @send(i32 %v3_10cd8, i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_10cec = load i32, i32* @r6, align 4
  %v2_10cec = add i32 %v1_10cec, 12
  %v3_10cec = inttoptr i32 %v2_10cec to i32*
  store i32 4, i32* %v3_10cec, align 4
  br label %dec_label_pc_10490thread-pre-split

dec_label_pc_10cf4:                               ; preds = %dec_label_pc_10994, %dec_label_pc_109ac, %dec_label_pc_109a4, %bb454, %dec_label_pc_10980, %dec_label_pc_10964, %dec_label_pc_10978, %bb453
  %v0_10cf8 = phi i32 [ %v1_10958, %dec_label_pc_10980 ], [ %v1_10958, %dec_label_pc_10964 ], [ %v1_10958, %dec_label_pc_10978 ], [ %v1_10958, %bb453 ], [ %v1_109b8, %bb454 ], [ %v1_109b8, %dec_label_pc_109a4 ], [ %v1_109b8, %dec_label_pc_109ac ], [ %v1_109b8, %dec_label_pc_10994 ]
  %v1_10cf8 = add i32 %v0_10cf8, 1
  store i32 %v1_10cf8, i32* @r8, align 4
  %v1_10cfc = call i32 @function_11018(i32 30)
  br label %dec_label_pc_10a08

dec_label_pc_10d04:                               ; preds = %dec_label_pc_1036c
  %v0_10d0c = load i32, i32* @r6, align 4
  %v1_10d0c = add i32 %v0_10d0c, 4
  %v2_10d0c = inttoptr i32 %v1_10d0c to i32*
  %v3_10d0c = load i32, i32* %v2_10d0c, align 4
  %v1_10d10 = call i32 @close(i32 %v3_10d0c)
  %v0_10d14 = load i32, i32* @r6, align 4
  %v1_10d14 = add i32 %v0_10d14, 384
  %v2_10d14 = inttoptr i32 %v1_10d14 to i8*
  %v3_10d14 = load i8, i8* %v2_10d14, align 1
  %v4_10d14 = zext i8 %v3_10d14 to i32
  %v1_10d18 = add nuw nsw i32 %v4_10d14, 1
  %v1_10d1c = urem i32 %v1_10d18, 256
  store i32 %v1_10d1c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10d24 = icmp ugt i32 %v1_10d1c, 9
  store i1 %v2_10d24, i1* %cpsr_c.global-to-local, align 1
  %v7_10d24 = icmp eq i32 %v1_10d1c, 10
  store i1 %v7_10d24, i1* %cpsr_z.global-to-local, align 1
  %v2_10d28 = add i32 %v0_10d14, 4
  %v3_10d28 = inttoptr i32 %v2_10d28 to i32*
  store i32 -1, i32* %v3_10d28, align 4
  %v0_10d2c = load i32, i32* %r3.global-to-local, align 4
  %v1_10d2c = trunc i32 %v0_10d2c to i8
  %v2_10d2c = load i32, i32* @r6, align 4
  %v3_10d2c = add i32 %v2_10d2c, 384
  %v4_10d2c = inttoptr i32 %v3_10d2c to i8*
  store i8 %v1_10d2c, i8* %v4_10d2c, align 1
  %v0_10d30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10d30, label %dec_label_pc_10d34, label %dec_label_pc_10d90

dec_label_pc_10d34:                               ; preds = %dec_label_pc_10d04
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r8, align 4
  %v1_10d3c = load i32, i32* @r6, align 4
  %v2_10d3c = add i32 %v1_10d3c, 12
  %v3_10d3c = inttoptr i32 %v2_10d3c to i32*
  store i32 0, i32* %v3_10d3c, align 4
  %v0_10d40 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d40 = trunc i32 %v0_10d40 to i8
  %v2_10d40 = load i32, i32* @r6, align 4
  %v3_10d40 = add i32 %v2_10d40, 384
  %v4_10d40 = inttoptr i32 %v3_10d40 to i8*
  store i8 %v1_10d40, i8* %v4_10d40, align 1
  br label %dec_label_pc_10498

dec_label_pc_10d48:                               ; preds = %dec_label_pc_10c78
  store i32 %v2_10c38, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10d54 = add i32 %v0_10c64, 4
  %v2_10d54 = inttoptr i32 %v1_10d54 to i32*
  %v3_10d54 = load i32, i32* %v2_10d54, align 4
  %v5_10d58 = call i32 @send(i32 %v3_10d54, i32* nonnull %stack_var_-45, i32 3, i32 16384)
  br label %dec_label_pc_10638

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10250
  %v1_10d74 = add i32 %v0_10d6c, 92
  store i32 %v1_10d74, i32* %r1.global-to-local, align 4
  store i32 292, i32* %r2.global-to-local, align 4
  %v3_10d7c = inttoptr i32 %.pre to i32*
  %v4_10d7c = inttoptr i32 %v1_10d74 to i32*
  %v5_10d7c = call i32* @memmove(i32* %v3_10d7c, i32* %v4_10d7c, i32 292)
  %v0_10d80 = load i32, i32* @r6, align 4
  %v1_10d80 = add i32 %v0_10d80, 24
  %v2_10d80 = inttoptr i32 %v1_10d80 to i32*
  %v3_10d80 = load i32, i32* %v2_10d80, align 4
  %v1_10d84 = add i32 %v3_10d80, -64
  store i32 %v1_10d84, i32* %r3.global-to-local, align 4
  store i32 %v1_10d84, i32* %v2_10d80, align 4
  br label %dec_label_pc_10260

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d04
  %v0_10d90 = load i32, i32* @r6, align 4
  store i32 %v0_10d90, i32* @r0, align 4
  %v0_10d94 = call i32 @function_f630()
  store i32 -1, i32* @r8, align 4
  br label %dec_label_pc_10498

dec_label_pc_10da0:                               ; preds = %dec_label_pc_10208
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_f974, i32* %r3.global-to-local, align 4
  store i32 %v2_10ba4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v8_10dc8 = call i32 @getsockopt(i32 %v3_101fc, i32 1, i32 4, i32* nonnull %stack_var_-56, i32* nonnull %stack_var_-60)
  %v3_10dcc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10dcc, i32* %r3.global-to-local, align 4
  %v2_10dd0 = or i32 %v3_10dcc, %v8_10dc8
  %v4_10dd0 = icmp eq i32 %v2_10dd0, 0
  store i1 %v4_10dd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10dd0, label %dec_label_pc_10dd8, label %dec_label_pc_10e64

dec_label_pc_10dd8:                               ; preds = %dec_label_pc_10da0
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_10ddc = load i32, i32* @r6, align 4
  %v2_10ddc = add i32 %v1_10ddc, 12
  %v3_10ddc = inttoptr i32 %v2_10ddc to i32*
  store i32 2, i32* %v3_10ddc, align 4
  %v0_10de0 = call i32 @function_ee68()
  store i32 ptrtoint (i16** @global_var_1a228.124 to i32), i32* %r3.global-to-local, align 4
  %v2_10de8 = load i16, i16* bitcast (i16** @global_var_1a228.124 to i16*), align 4
  %v3_10de8 = zext i16 %v2_10de8 to i32
  store i32 %v3_10de8, i32* %r1.global-to-local, align 4
  %v3_10dec = call i32 @function_11d44(i32 %v0_10de0, i32 %v3_10de8)
  store i32 ptrtoint (i32* @global_var_1a1f8.120 to i32), i32* %r3.global-to-local, align 4
  %v2_10df4 = load i32, i32* @global_var_1a1f8.120, align 4
  store i32 %v2_10df4, i32* %ip.global-to-local, align 4
  %v1_10dfc = load i32, i32* %r4.global-to-local, align 4
  %v9_10dfc = icmp eq i32 %v2_10df4, %v1_10dfc
  store i1 %v9_10dfc, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_10de8, i32* %r1.global-to-local, align 4
  %v7_10e04 = icmp sgt i32 %v2_10df4, %v1_10dfc
  br i1 %v7_10e04, label %dec_label_pc_10e08, label %dec_label_pc_10e40

dec_label_pc_10e08:                               ; preds = %dec_label_pc_10dd8
  %v2_10e0c = load i32, i32* @global_var_1a224.122, align 4
  store i32 %v2_10e0c, i32* %r3.global-to-local, align 4
  store i32 %v1_10dfc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e14

dec_label_pc_10e14:                               ; preds = %dec_label_pc_10e30, %dec_label_pc_10e08
  %v0_10e30 = phi i32 [ %v1_10e30, %dec_label_pc_10e30 ], [ %v1_10dfc, %dec_label_pc_10e08 ]
  %v0_10e38 = phi i32 [ %v1_10e38, %dec_label_pc_10e30 ], [ %v2_10e0c, %dec_label_pc_10e08 ]
  %v1_10e18 = add i32 %v0_10e38, 8
  %v2_10e18 = inttoptr i32 %v1_10e18 to i16*
  %v3_10e18 = load i16, i16* %v2_10e18, align 2
  %v4_10e18 = zext i16 %v3_10e18 to i32
  store i32 %v4_10e18, i32* %r3.global-to-local, align 4
  %tmp463 = icmp ugt i16 %v3_10e18, %v2_10de8
  br i1 %tmp463, label %dec_label_pc_10e30, label %dec_label_pc_10e24

dec_label_pc_10e24:                               ; preds = %dec_label_pc_10e14
  %v1_10e24 = add i32 %v0_10e38, 10
  %v2_10e24 = inttoptr i32 %v1_10e24 to i16*
  %v3_10e24 = load i16, i16* %v2_10e24, align 2
  %v4_10e24 = zext i16 %v3_10e24 to i32
  store i32 %v4_10e24, i32* %r3.global-to-local, align 4
  %v3_10e28 = icmp uge i16 %v3_10e24, %v2_10de8
  %v9_10e28 = icmp eq i16 %v3_10e24, %v2_10de8
  %v2_10e2c = xor i1 %v9_10e28, true
  %v3_10e2c = and i1 %v3_10e28, %v2_10e2c
  br i1 %v3_10e2c, label %dec_label_pc_10e44.loopexit, label %dec_label_pc_10e30

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10e24, %dec_label_pc_10e14
  %v1_10e30 = add i32 %v0_10e30, 1
  store i32 %v1_10e30, i32* %r2.global-to-local, align 4
  %v9_10e34 = icmp eq i32 %v1_10e30, %v2_10df4
  %v1_10e38 = add i32 %v0_10e38, 16
  store i32 %v1_10e38, i32* %r3.global-to-local, align 4
  br i1 %v9_10e34, label %dec_label_pc_10e40.loopexit, label %dec_label_pc_10e14

dec_label_pc_10e40.loopexit:                      ; preds = %dec_label_pc_10e30
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e40

dec_label_pc_10e40:                               ; preds = %dec_label_pc_10e40.loopexit, %dec_label_pc_10dd8
  br label %dec_label_pc_10e44

dec_label_pc_10e44.loopexit:                      ; preds = %dec_label_pc_10e24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_10e28, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e44

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10e44.loopexit, %dec_label_pc_10e40
  %v0_10e58 = phi i32 [ %v0_10e38, %dec_label_pc_10e44.loopexit ], [ 0, %dec_label_pc_10e40 ]
  %v0_10e44 = load i32, i32* @r6, align 4
  %v1_10e44 = add i32 %v0_10e44, 4
  %v2_10e44 = inttoptr i32 %v1_10e44 to i32*
  %v3_10e44 = load i32, i32* %v2_10e44, align 4
  %v3_10e48 = udiv i32 %v3_10e44, 32
  store i32 %v3_10e48, i32* %r2.global-to-local, align 4
  %v1_10e4c = urem i32 %v3_10e44, 32
  store i32 %v1_10e4c, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_10e50 = mul nuw nsw i32 %v3_10e48, 4
  store i32 %v3_10e50, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_10e58 = inttoptr i32 %v0_10e44 to i32*
  store i32 %v0_10e58, i32* %v2_10e58, align 4
  %v0_10e5c = load i32, i32* %r3.global-to-local, align 4
  %v1_10e5c = load i32, i32* @r6, align 4
  %v2_10e5c = add i32 %v1_10e5c, 24
  %v3_10e5c = inttoptr i32 %v2_10e5c to i32*
  store i32 %v0_10e5c, i32* %v3_10e5c, align 4
  %v0_10230.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_10238.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1022c

dec_label_pc_10e64:                               ; preds = %dec_label_pc_10da0
  %v0_10e64 = load i32, i32* @r6, align 4
  %v1_10e64 = add i32 %v0_10e64, 4
  %v2_10e64 = inttoptr i32 %v1_10e64 to i32*
  %v3_10e64 = load i32, i32* %v2_10e64, align 4
  %v1_10e68 = call i32 @close(i32 %v3_10e64)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10e70 = load i32, i32* %r4.global-to-local, align 4
  %v1_10e70 = load i32, i32* @r6, align 4
  %v2_10e70 = add i32 %v1_10e70, 12
  %v3_10e70 = inttoptr i32 %v2_10e70 to i32*
  store i32 %v0_10e70, i32* %v3_10e70, align 4
  %v0_10e74 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e74 = load i32, i32* @r6, align 4
  %v2_10e74 = add i32 %v1_10e74, 4
  %v3_10e74 = inttoptr i32 %v2_10e74 to i32*
  store i32 %v0_10e74, i32* %v3_10e74, align 4
  %v0_10e78 = load i32, i32* %r4.global-to-local, align 4
  %v1_10e78 = trunc i32 %v0_10e78 to i8
  %v2_10e78 = load i32, i32* @r6, align 4
  %v3_10e78 = add i32 %v2_10e78, 384
  %v4_10e78 = inttoptr i32 %v3_10e78 to i8*
  store i8 %v1_10e78, i8* %v4_10e78, align 1
  br label %dec_label_pc_10354

dec_label_pc_10e80:                               ; preds = %dec_label_pc_10450
  store i32 %v2_10400, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_10e8c = add i32 %v1_1046c, 4
  %v2_10e8c = inttoptr i32 %v1_10e8c to i32*
  %v3_10e8c = load i32, i32* %v2_10e8c, align 4
  store i32 %v3_10e8c, i32* @r4, align 4
  %v0_10e90 = call i32 @function_ee68()
  %v0_10e94 = load i32, i32* @r5, align 4
  %v1_10e94 = inttoptr i32 %v0_10e94 to i8*
  %v2_10e94 = load i8, i8* %v1_10e94, align 1
  %v3_10e94 = zext i8 %v2_10e94 to i32
  store i32 %v3_10e94, i32* %r1.global-to-local, align 4
  %v2_10e98 = call i32 @function_11d44(i32 %v0_10e90, i32 %v3_10e94)
  %v0_10e9c = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_10e9c = mul nuw nsw i32 %v3_10e94, 4
  %v5_10e9c = add i32 %v0_10e9c, %v4_10e9c
  %v6_10e9c = inttoptr i32 %v5_10e9c to i32*
  %v7_10e9c = load i32, i32* %v6_10e9c, align 4
  store i32 %v7_10e9c, i32* %r3.global-to-local, align 4
  %v0_10ea4 = load i32, i32* @sl, align 4
  store i32 %v0_10ea4, i32* %r1.global-to-local, align 4
  %v2_10eac = inttoptr i32 %v0_10ea4 to i32*
  %v3_10eac = call i32 @function_10ff4(i32 4, i32* %v2_10eac)
  store i32 %v2_10400, i32* %ip.global-to-local, align 4
  %v0_10ebc = load i32, i32* @r5, align 4
  %v1_10ec0 = inttoptr i32 %v0_10ebc to i32*
  %v2_10ec0 = call i32 @function_f0d8(i32* %v1_10ec0)
  %v1_10ec8 = call i32 @function_11018(i32 3)
  %v1_10ed0 = call i32 @function_11018(i32 4)
  %v0_10ed8 = load i32, i32* @r7, align 4
  store i32 %v2_10edc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_10ee4 = call i32 @connect(i32 %v0_10ed8, %sockaddr* %tmp375, i32 16)
  %v3_10ee8 = icmp eq i32 %v5_10ee4, -1
  store i1 %v3_10ee8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10ee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ee8, label %dec_label_pc_10ef0, label %dec_label_pc_10f00

dec_label_pc_10ef0:                               ; preds = %dec_label_pc_10e80
  %v0_10ef0 = load i32, i32* @r7, align 4
  %v1_10ef4 = call i32 @close(i32 %v0_10ef0)
  %v0_10ef8 = load i32, i32* @sl, align 4
  call void @exit(i32 %v0_10ef8)
  unreachable

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10e80
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_f974, i32* %r1.global-to-local, align 4
  %v0_10f0c = load i32, i32* @r7, align 4
  %v0_10f10 = load i32, i32* @sl, align 4
  store i32 %v0_10f10, i32* %stack_var_-56, align 4
  %v6_10f14 = call i32 @send(i32 %v0_10f0c, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_10ba4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f28 = load i32, i32* @r7, align 4
  %v5_10f2c = call i32 @send(i32 %v0_10f28, i32* nonnull %stack_var_-60, i32 4, i32 16384)
  store i32 %v2_10f34, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f40 = load i32, i32* @r7, align 4
  %v5_10f44 = call i32 @send(i32 %v0_10f40, i32* nonnull %stack_var_-42, i32 2, i32 16384)
  %v0_10f48 = load i32, i32* @sb, align 4
  %v1_10f48 = add i32 %v0_10f48, 12
  store i32 %v1_10f48, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f54 = load i32, i32* @r7, align 4
  %v4_10f58 = inttoptr i32 %v1_10f48 to i32*
  %v5_10f58 = call i32 @send(i32 %v0_10f54, i32* %v4_10f58, i32 1, i32 16384)
  %v0_10f5c = load i32, i32* @sb, align 4
  %v1_10f5c = inttoptr i32 %v0_10f5c to i32*
  %v2_10f5c = load i32, i32* %v1_10f5c, align 4
  store i32 %v2_10f5c, i32* %r1.global-to-local, align 4
  %v1_10f60 = add i32 %v0_10f5c, 12
  %v2_10f60 = inttoptr i32 %v1_10f60 to i8*
  %v3_10f60 = load i8, i8* %v2_10f60, align 1
  %v4_10f60 = zext i8 %v3_10f60 to i32
  store i32 %v4_10f60, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f68 = load i32, i32* @r7, align 4
  %v4_10f6c = inttoptr i32 %v2_10f5c to i32*
  %v5_10f6c = call i32 @send(i32 %v0_10f68, i32* %v4_10f6c, i32 %v4_10f60, i32 16384)
  %v0_10f70 = load i32, i32* @sb, align 4
  %v1_10f70 = add i32 %v0_10f70, 13
  store i32 %v1_10f70, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f7c = load i32, i32* @r7, align 4
  %v4_10f80 = inttoptr i32 %v1_10f70 to i32*
  %v5_10f80 = call i32 @send(i32 %v0_10f7c, i32* %v4_10f80, i32 1, i32 16384)
  %v0_10f84 = load i32, i32* @r7, align 4
  %v0_10f88 = load i32, i32* @sb, align 4
  %v1_10f88 = add i32 %v0_10f88, 13
  %v2_10f88 = inttoptr i32 %v1_10f88 to i8*
  %v3_10f88 = load i8, i8* %v2_10f88, align 1
  %v4_10f88 = zext i8 %v3_10f88 to i32
  store i32 %v4_10f88, i32* %r2.global-to-local, align 4
  %v1_10f8c = add i32 %v0_10f88, 4
  %v2_10f8c = inttoptr i32 %v1_10f8c to i32*
  %v3_10f8c = load i32, i32* %v2_10f8c, align 4
  store i32 %v3_10f8c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10f94 = inttoptr i32 %v3_10f8c to i32*
  %v5_10f94 = call i32 @send(i32 %v0_10f84, i32* %v4_10f94, i32 %v4_10f88, i32 16384)
  %v0_10f98 = load i32, i32* @r7, align 4
  %v1_10f9c = call i32 @close(i32 %v0_10f98)
  br label %dec_label_pc_10fa0

dec_label_pc_10fa0:                               ; preds = %dec_label_pc_10434, %dec_label_pc_10f00
  %v0_10fa0 = load i32, i32* @sl, align 4
  call void @exit(i32 %v0_10fa0)
  unreachable

dec_label_pc_10fa8.loopexit:                      ; preds = %dec_label_pc_109c0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v1_10fac = call i32 @function_11018(i32 30)
  %v0_10fb0 = load i32, i32* @r6, align 4
  %v1_10fb0 = add i32 %v0_10fb0, 12
  %v2_10fb0 = inttoptr i32 %v1_10fb0 to i32*
  %v3_10fb0 = load i32, i32* %v2_10fb0, align 4
  br label %dec_label_pc_10248.backedge

dec_label_pc_10248.backedge.thread:               ; preds = %dec_label_pc_104c0, %dec_label_pc_10664, %dec_label_pc_10738, %dec_label_pc_1080c, %dec_label_pc_10a40
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10250

dec_label_pc_10248.backedge.thread584:            ; preds = %dec_label_pc_1079c, %dec_label_pc_106c8, %dec_label_pc_10aa4, %dec_label_pc_108e4, %dec_label_pc_10524
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10250

dec_label_pc_10248.backedge:                      ; preds = %dec_label_pc_102c8, %dec_label_pc_10fa8.loopexit, %dec_label_pc_10fb8
  %v0_10250227 = phi i32 [ %v0_10fc8, %dec_label_pc_10fb8 ], [ %v0_10fb0, %dec_label_pc_10fa8.loopexit ], [ %v0_102c8, %dec_label_pc_102c8 ]
  %v0_10248.be = phi i32 [ %v3_10fc8, %dec_label_pc_10fb8 ], [ %v3_10fb0, %dec_label_pc_10fa8.loopexit ], [ %v3_102c8, %dec_label_pc_102c8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10248 = icmp eq i32 %v0_10248.be, 0
  store i1 %v2_10248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10248, label %dec_label_pc_10354, label %dec_label_pc_10250

dec_label_pc_10fb8:                               ; preds = %dec_label_pc_10bf0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v1_10fbc = call i32 @function_11018(i32 31)
  %v1_10fc4 = call i32 @function_11018(i32 32)
  %v0_10fc8 = load i32, i32* @r6, align 4
  %v1_10fc8 = add i32 %v0_10fc8, 12
  %v2_10fc8 = inttoptr i32 %v1_10fc8 to i32*
  %v3_10fc8 = load i32, i32* %v2_10fc8, align 4
  br label %dec_label_pc_10248.backedge

dec_label_pc_10fd0:                               ; preds = %dec_label_pc_10300
  store i32 %v2_fe64, i32* %r2.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v0_fe64, align 4
  br label %dec_label_pc_1031c

dec_label_pc_10fe0:                               ; preds = %dec_label_pc_f954
  store i32 ptrtoint (i32* @global_var_1a250.131 to i32), i32* %r2.global-to-local, align 4
  %v2_10fe4 = load i32, i32* @global_var_1a250.131, align 4
  %v1_10fe8 = call i32 @close(i32 %v2_10fe4)
  br label %dec_label_pc_10fec

dec_label_pc_10fec:                               ; preds = %dec_label_pc_f930, %dec_label_pc_10fe0
  %v0_10fec = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_10fec)
  unreachable

; uselistorder directives
  uselistorder i32 %v0_10fc8, { 1, 0 }
  uselistorder i1 %v3_10ee8, { 1, 0, 2 }
  uselistorder i32 %v3_10e44, { 1, 0 }
  uselistorder i32 %v1_10e38, { 1, 0 }
  uselistorder i32 %v1_10e30, { 1, 2, 0 }
  uselistorder i1 %v9_10e28, { 1, 0 }
  uselistorder i32 %v2_10df4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_10d1c, { 2, 1, 0 }
  uselistorder i32 %v0_10c98.pr, { 1, 0 }
  uselistorder i32 %v0_10c64, { 1, 2, 0 }
  uselistorder i32 %v0_10c28, { 1, 2, 0 }
  uselistorder i1 %v7_10c08, { 1, 0 }
  uselistorder i1 %v7_10be0, { 1, 0 }
  uselistorder i32 %v1_10b88, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_10b88, { 0, 2, 1 }
  uselistorder i32 %v0_10b80, { 1, 0 }
  uselistorder i1 %v7_10b7c, { 1, 0 }
  uselistorder i1 %v7_10b74, { 1, 0 }
  uselistorder i1 %v7_10b6c, { 1, 0 }
  uselistorder i1 %v8_10b64, { 1, 0 }
  uselistorder i1 %v7_10b48, { 1, 0 }
  uselistorder i1 %v7_10b40, { 1, 0 }
  uselistorder i1 %v7_10b38, { 1, 0 }
  uselistorder i1 %v8_10b30, { 1, 0 }
  uselistorder i32 %v1_10b18, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_10ab4, { 1, 0 }
  uselistorder i8 %v3_10aac, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10aa4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_10aa4, { 0, 2, 1 }
  uselistorder i32 %v0_10a9c, { 1, 0 }
  uselistorder i1 %v7_10a98, { 1, 0 }
  uselistorder i1 %v7_10a90, { 1, 0 }
  uselistorder i1 %v7_10a88, { 1, 0 }
  uselistorder i1 %v7_10a74, { 1, 0 }
  uselistorder i1 %v7_10a6c, { 1, 0 }
  uselistorder i1 %v7_10a64, { 1, 0 }
  uselistorder i1 %v8_10a5c, { 1, 0 }
  uselistorder i32 %v1_10a44, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v7_109f0, { 1, 0 }
  uselistorder i32 %v1_109b8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_109b8, { 0, 2, 1 }
  uselistorder i32 %v0_109b0, { 1, 0 }
  uselistorder i1 %v7_109ac, { 1, 0 }
  uselistorder i1 %v7_109a4, { 1, 0 }
  uselistorder i1 %v8_1099c, { 1, 0 }
  uselistorder i1 %v7_10980, { 1, 0 }
  uselistorder i1 %v7_10978, { 1, 0 }
  uselistorder i1 %v8_10970, { 1, 0 }
  uselistorder i32 %v1_10958, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_108f4, { 1, 0 }
  uselistorder i8 %v3_108ec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_108e4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_108e4, { 0, 2, 1 }
  uselistorder i32 %v0_108dc, { 1, 0 }
  uselistorder i1 %v7_108d8, { 1, 0 }
  uselistorder i1 %v7_108d0, { 1, 0 }
  uselistorder i1 %v7_108c8, { 1, 0 }
  uselistorder i1 %v7_10840, { 1, 0 }
  uselistorder i1 %v7_10838, { 1, 0 }
  uselistorder i1 %v7_10830, { 1, 0 }
  uselistorder i1 %v8_10828, { 1, 0 }
  uselistorder i32 %v1_10810, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_107ac, { 1, 0 }
  uselistorder i8 %v3_107a4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1079c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_1079c, { 0, 2, 1 }
  uselistorder i32 %v0_10794, { 1, 0 }
  uselistorder i1 %v7_10790, { 1, 0 }
  uselistorder i1 %v7_10788, { 1, 0 }
  uselistorder i1 %v7_10780, { 1, 0 }
  uselistorder i1 %v7_1076c, { 1, 0 }
  uselistorder i1 %v7_10764, { 1, 0 }
  uselistorder i1 %v7_1075c, { 1, 0 }
  uselistorder i1 %v8_10754, { 1, 0 }
  uselistorder i32 %v1_1073c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_106d8, { 1, 0 }
  uselistorder i8 %v3_106d0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_106c8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_106c8, { 0, 2, 1 }
  uselistorder i32 %v0_106c0, { 1, 0 }
  uselistorder i1 %v7_106bc, { 1, 0 }
  uselistorder i1 %v7_106b4, { 1, 0 }
  uselistorder i1 %v7_106ac, { 1, 0 }
  uselistorder i1 %v7_10698, { 1, 0 }
  uselistorder i1 %v7_10690, { 1, 0 }
  uselistorder i1 %v7_10688, { 1, 0 }
  uselistorder i1 %v8_10680, { 1, 0 }
  uselistorder i32 %v1_10668, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_10654, { 1, 0 }
  uselistorder i32 %v1_1064c, { 1, 0 }
  uselistorder i32 %v1_10644, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10640, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10640, { 0, 2, 1 }
  uselistorder i32 %v0_10620.pr, { 1, 0 }
  uselistorder i32 %v0_10600.pr, { 1, 0 }
  uselistorder i1 %v7_105d8, { 1, 0 }
  uselistorder i1 %v2_105c8, { 1, 0, 2 }
  uselistorder i1 %v2_105ac, { 1, 0, 2 }
  uselistorder i32 %v1_105cc, { 1, 2, 3, 0 }
  uselistorder i32 %v1_105a0, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_105d0, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_10534, { 1, 0 }
  uselistorder i8 %v3_1052c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10524, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_10524, { 0, 2, 1 }
  uselistorder i32 %v0_1051c, { 1, 0 }
  uselistorder i1 %v7_10518, { 1, 0 }
  uselistorder i1 %v7_10510, { 1, 0 }
  uselistorder i1 %v7_10508, { 1, 0 }
  uselistorder i1 %v7_104f4, { 1, 0 }
  uselistorder i1 %v7_104ec, { 1, 0 }
  uselistorder i1 %v7_104e4, { 1, 0 }
  uselistorder i1 %v8_104dc, { 1, 0 }
  uselistorder i32 %v1_104c4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_104b0, { 1, 0 }
  uselistorder i32 %v2_1049c, { 1, 0 }
  uselistorder i32 %v0_1049c, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_10498, { 2, 1, 4, 0, 5, 3 }
  uselistorder i1 %v2_1042c, { 1, 0 }
  uselistorder i32 %.468, { 1, 0 }
  uselistorder i1 %v2_10414, { 1, 0 }
  uselistorder i32 %v0_10410, { 1, 0, 2 }
  uselistorder i32 %v0_103e8, { 1, 0, 2 }
  uselistorder i1 %v3_1039c, { 1, 0, 2 }
  uselistorder i32 %v1_10358, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_1033c, { 1, 0 }
  uselistorder i32 %v1_1032c, { 2, 1, 0 }
  uselistorder i32 %v1_10328, { 1, 0 }
  uselistorder i1 %v3_10304, { 1, 0, 2 }
  uselistorder i32 %v0_102c8, { 2, 4, 5, 19, 6, 7, 23, 8, 9, 20, 10, 11, 24, 12, 13, 21, 14, 15, 22, 3, 18, 16, 17, 25, 26, 1, 0 }
  uselistorder i32 %v1_102a4, { 1, 2, 3, 0 }
  uselistorder i32 %v3_102a0, { 1, 0 }
  uselistorder i32 %v5_10284, { 3, 0, 1, 2, 4, 5 }
  uselistorder i32 %v2_10270, { 1, 0, 2 }
  uselistorder i32 %v3_1026c, { 1, 0, 2 }
  uselistorder i32 %v0_10d6c, { 1, 0, 2 }
  uselistorder i32 %v3_10234, { 1, 0 }
  uselistorder i32 %v1_1021c, { 3, 2, 1, 0 }
  uselistorder i32 %v3_10218, { 1, 0 }
  uselistorder i32 %v3_10210, { 1, 2, 0 }
  uselistorder i32 %v3_101fc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_101cc, { 1, 0, 2 }
  uselistorder i32 %v1_10194, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10194, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10178, { 0, 2, 1 }
  uselistorder i32 %v1_10170, { 1, 0 }
  uselistorder i32 %v1_10130, { 2, 1, 0 }
  uselistorder i32 %v1_1012c, { 1, 0 }
  uselistorder i1 %v2_1010c, { 1, 0, 2 }
  uselistorder i32 %v0_10108, { 1, 0, 2 }
  uselistorder i1 %v7_100d4, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_100d4, { 1, 0, 2 }
  uselistorder i32 %v2_100cc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_100a4, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_10098, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10098, { 0, 2, 1 }
  uselistorder i32 %v3_10158, { 4, 7, 5, 6, 1, 0, 3, 2, 8 }
  uselistorder i32 %v1_ffe8, { 1, 0 }
  uselistorder i32 %v1_ffd0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ffdc, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ff84, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v5_ff78, { 2, 1, 0 }
  uselistorder i32 %v1_ff58, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ff34, { 1, 0 }
  uselistorder i1 %v9_ff00, { 1, 0 }
  uselistorder i32 %v2_fe64, { 2, 1, 3, 0 }
  uselistorder i32 %v1_fe50, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_fd98, { 1, 0 }
  uselistorder i32 %v3_fd88, { 1, 2, 0, 3 }
  uselistorder i1 %v2_fcc0, { 1, 0 }
  uselistorder i1 %v2_fcac, { 1, 0 }
  uselistorder i1 %v2_fc98, { 1, 0 }
  uselistorder i32 %.467, { 2, 1, 0 }
  uselistorder i1 %v7_fc74, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_fc5c, { 1, 0 }
  uselistorder i1 %v3_fc40, { 1, 0, 2 }
  uselistorder i1 %v2_fc2c, { 1, 0 }
  uselistorder i1 %v2_fc08, { 1, 0 }
  uselistorder i32 %v1_fbb8, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fba4, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 54, 29, 28, 53, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fba0, { 3, 4, 5, 6, 7, 0, 1, 2 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder %sockaddr* %tmp375, { 1, 0 }
  uselistorder i32 %v2_10400, { 1, 2, 3, 0 }
  uselistorder i32 %v2_10ba4, { 3, 0, 10, 11, 6, 9, 5, 8, 7, 4, 2, 1 }
  uselistorder i32 %v2_10164, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_fb48, { 1, 4, 5, 0, 2, 3, 6 }
  uselistorder i32 %v4_fa2c, { 2, 1, 0, 3 }
  uselistorder i16 %v5_f9b0.le, { 1, 0 }
  uselistorder i32 %v0_f9a4, { 2, 1, 0 }
  uselistorder i32 %v2_f974, { 1, 0 }
  uselistorder i32 %v3_f93c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_f928, { 1, 0 }
  uselistorder i32 %v2_f90c, { 1, 0, 2 }
  uselistorder i32 %storemerge326, { 1, 0 }
  uselistorder i32 %v0_f864, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-56, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-96, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-68, { 1, 0, 2 }
  uselistorder i32* %stack_var_-224, { 1, 0, 2 }
  uselistorder i32* %stack_var_-352, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 0, 1, 12, 13, 14, 2, 3, 15, 7, 16, 4, 17, 8, 18, 5, 19, 6, 20, 9, 21, 22, 10, 23, 11, 24 }
  uselistorder i32* %sp.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 54, 37, 38, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 65, 67, 68, 158, 46, 47, 48, 49, 0, 1, 2, 3, 159, 160, 161, 162, 163, 164, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 20, 18, 19, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 35, 34, 36, 148, 149, 150, 151, 153, 152, 154, 155, 156, 157, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 179, 181, 182, 183, 184, 50, 108, 51, 52, 53, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 98, 95, 100, 187, 188, 101, 102, 186, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 185, 123, 124, 126, 125, 128, 127, 129, 131, 130, 133, 132, 141, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147 }
  uselistorder i32* %r2.global-to-local, { 38, 39, 21, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 42, 43, 44, 111, 30, 0, 1, 112, 114, 113, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 105, 106, 107, 108, 109, 110, 115, 116, 117, 118, 119, 120, 31, 32, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 121, 122, 59, 60, 62, 61, 58, 125, 63, 126, 64, 123, 124, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 104, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103 }
  uselistorder i32* %r1.global-to-local, { 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 45, 46, 47, 48, 49, 50, 105, 0, 1, 106, 107, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 98, 99, 100, 101, 102, 103, 104, 108, 97, 109, 110, 111, 112, 113, 114, 37, 115, 116, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 55, 56, 59, 60, 61, 57, 58, 62, 63, 64, 65, 66, 67, 96, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 11, 30, 12, 13, 14, 15, 16, 17, 29, 28, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 83, 177, 239, 29, 57, 185, 186, 70, 71, 58, 59, 208, 209, 210, 211, 212, 0, 65, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 20, 21, 22, 17, 18, 19, 23, 24, 25, 26, 27, 28, 176, 30, 35, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 188, 189, 53, 54, 55, 190, 191, 192, 193, 194, 195, 199, 200, 201, 196, 197, 198, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 247, 178, 230, 231, 232, 227, 228, 229, 233, 234, 235, 236, 237, 238, 60, 61, 62, 63, 64, 175, 66, 67, 68, 69, 72, 74, 73, 75, 76, 77, 78, 79, 80, 81, 82, 179, 180, 84, 85, 86, 87, 88, 90, 89, 91, 92, 93, 96, 98, 99, 97, 94, 95, 184, 183, 181, 100, 182, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 246, 130, 131, 245, 132, 133, 244, 134, 135, 243, 136, 137, 138, 174, 139, 242, 140, 141, 241, 142, 143, 240, 144, 145, 146, 147, 148, 173, 149, 150, 151, 152, 153, 172, 154, 155, 156, 171, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 170 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 82, 174, 233, 29, 57, 58, 69, 182, 183, 70, 59, 205, 206, 207, 208, 0, 173, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 20, 21, 22, 17, 18, 19, 23, 24, 25, 26, 27, 28, 172, 30, 35, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 185, 186, 53, 54, 55, 187, 188, 189, 190, 191, 192, 196, 197, 198, 193, 194, 195, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 241, 175, 224, 225, 226, 221, 222, 223, 227, 228, 229, 230, 231, 232, 60, 61, 62, 63, 64, 171, 65, 66, 67, 68, 71, 73, 72, 74, 75, 76, 77, 78, 79, 80, 81, 176, 177, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 94, 91, 92, 181, 180, 178, 97, 179, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 240, 125, 126, 239, 127, 128, 238, 129, 130, 237, 131, 132, 133, 170, 134, 236, 135, 136, 235, 137, 138, 234, 139, 140, 141, 142, 143, 169, 144, 145, 146, 147, 148, 168, 149, 150, 151, 167, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 184, 166 }
  uselistorder void (i32)* @exit, { 1, 3, 2, 0, 6, 5, 4, 7, 8 }
  uselistorder i16* bitcast (i16** @global_var_1a228.124 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1a228.124, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1a228.124 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32*, i32*)* @getsockopt, { 1, 0, 2 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32* (i32*, i32*, i32)* @memcpy, { 1, 0, 2 }
  uselistorder i32 -3, { 2, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 -4, { 1, 2, 3, 0 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_11e18.183 to i32*), { 5, 2, 6, 3, 0, 1, 4 }
  uselistorder [3 x i8]* @global_var_11e18.183, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @send, { 22, 24, 15, 14, 31, 11, 10, 4, 21, 6, 13, 12, 3, 18, 17, 25, 9, 23, 19, 5, 8, 7, 1, 27, 16, 29, 28, 30, 26, 20, 0, 2, 32 }
  uselistorder i8 37, { 0, 1, 6, 7, 8, 9, 2, 3, 4, 5, 10, 11 }
  uselistorder i8 34, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 14, 15, 16, 17, 4, 5, 18, 19, 20, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 16, 17, 18, 19, 4, 5, 6, 7, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 62, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 61, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_f100, { 1, 0 }
  uselistorder i32* @r7, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 53, 54, 55, 56, 57, 1, 58, 59, 60, 3, 2, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 7, 74, 75, 76, 77, 78, 79, 8, 80, 81, 82, 83, 84, 5, 4, 85, 86, 87, 88, 89, 90, 0, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 41, 39, 40, 6, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32* @r8, { 20, 21, 10, 7, 3, 8, 1, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 4, 51, 52, 53, 54, 55, 61, 5, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 6, 129, 130, 131, 132, 133, 2, 134, 135, 136, 137, 138, 139, 56, 57, 58, 59, 60 }
  uselistorder i32 (i32)* @function_11018, { 50, 49, 39, 38, 37, 43, 48, 47, 46, 45, 44, 42, 41, 40, 14, 13, 36, 35, 17, 34, 33, 32, 31, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 16, 15 }
  uselistorder i32 (i32, i32, i32, i32)* @function_117a4, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10ff4, { 6, 0, 1, 2, 3, 4, 5, 40, 41, 7, 8, 9, 36, 10, 11, 12, 13, 42, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39 }
  uselistorder i32 (i32)* @function_110b8, { 36, 35, 34, 33, 32, 31, 2, 1, 30, 29, 28, 27, 6, 26, 25, 24, 23, 0, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3 }
  uselistorder i32 -2, { 7, 8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32, i32)* @recv, { 4, 5, 3, 2, 1, 0, 6 }
  uselistorder i32 (i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*)* @select, { 2, 0, 1, 3 }
  uselistorder i32 384, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32* @r6, { 11, 38, 52, 53, 54, 55, 56, 57, 58, 39, 59, 40, 41, 42, 43, 44, 12, 13, 14, 33, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 60, 61, 4, 3, 62, 63, 64, 65, 66, 67, 68, 8, 69, 70, 71, 72, 73, 125, 126, 127, 128, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 0, 105, 106, 107, 6, 108, 109, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 9, 156, 157, 1, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 10, 196, 197, 2, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 7, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124 }
  uselistorder i32 ()* @function_f630, { 2, 1, 0 }
  uselistorder i8 5, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 9, 0, 2, 1, 3, 5, 4, 6, 7, 8, 10 }
  uselistorder i32 40, { 3, 5, 6, 4, 7, 8, 9, 2, 10, 11, 0, 12, 14, 13, 15, 1, 16, 18, 17 }
  uselistorder i32 16384, { 37, 68, 38, 69, 39, 70, 40, 71, 41, 72, 42, 73, 17, 74, 16, 64, 2, 52, 35, 53, 3, 54, 4, 55, 5, 56, 36, 57, 6, 58, 7, 59, 8, 60, 9, 61, 10, 62, 11, 63, 33, 34, 65, 12, 66, 13, 67, 43, 75, 14, 76, 15, 77, 18, 85, 44, 86, 21, 78, 20, 79, 46, 80, 47, 81, 19, 82, 45, 83, 84, 22, 87, 23, 88, 24, 89, 48, 90, 25, 0, 26, 91, 27, 92, 28, 93, 49, 94, 29, 95, 50, 96, 51, 97, 30, 1, 31, 98, 32, 99 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d464, { 9, 8, 7, 6, 5, 2, 4, 3, 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1a210.136 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d414, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 0, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 21, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 29, { 4, 3, 0, 1, 2 }
  uselistorder i32 28, { 0, 12, 1, 13, 2, 14, 3, 15, 4, 16, 5, 17, 6, 18, 7, 11, 20, 19, 8, 9, 10, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 27, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 -6, { 1, 0, 2, 3 }
  uselistorder i32 13, { 7, 8, 6, 9, 10, 0, 1, 11, 12, 13, 14, 15, 16, 17, 4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 5, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 3, 48, 49 }
  uselistorder i32 159, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 18, { 4, 5, 0, 6, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 31, { 0, 4, 1, 2, 3, 6, 7, 5 }
  uselistorder i32 30, { 5, 4, 1, 2, 3, 0, 9, 10, 7, 8, 6 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 56, { 1, 0, 2 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 20, { 20, 22, 2, 24, 3, 25, 19, 23, 21, 26, 27, 4, 5, 6, 7, 29, 8, 30, 31, 32, 33, 34, 35, 9, 36, 37, 38, 39, 40, 41, 10, 42, 43, 44, 45, 46, 47, 48, 49, 50, 11, 51, 52, 53, 54, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 13, 65, 66, 14, 67, 68, 69, 70, 15, 71, 72, 16, 73, 74, 75, 76, 77, 78, 79, 0, 80, 17, 81, 82, 83, 84, 1, 85, 18, 86, 87, 88, 28 }
  uselistorder i32 11, { 3, 4, 5, 9, 10, 11, 6, 12, 0, 13, 14, 15, 16, 7, 18, 8, 19, 1, 20, 2, 21, 17 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_11dac.153 to i32), { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32, i32)* @function_f6f8, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_11d94.147 to i32), { 0, 2, 1, 3 }
  uselistorder i8* @global_var_1a21d.142, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2 }
  uselistorder i32 5888, { 0, 2, 1 }
  uselistorder i8 6, { 1, 2, 3, 0 }
  uselistorder i32 64, { 9, 10, 11, 12, 13, 6, 14, 15, 16, 0, 17, 18, 19, 7, 20, 21, 22, 8, 23, 24, 25, 1, 26, 27, 28, 2, 29, 30, 31, 3, 32, 33, 34, 35, 36, 4, 37, 38, 39, 40, 41, 5, 42 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_1a210.136 to i32), { 2, 3, 1, 0, 4, 5 }
  uselistorder i8* @global_var_1a21c.137, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1a1fc.133 to i32), { 2, 0, 3, 1, 4, 5, 6 }
  uselistorder i32 1024, { 1, 0, 2 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 5, 1, 0, 6, 7, 8, 9, 10, 49, 50, 11, 12, 13, 51, 52, 14, 15, 16, 17, 18, 53, 2, 54, 55, 19, 20, 3, 21, 56, 57, 39, 22, 23, 24, 25, 26, 42, 43, 40, 41, 58, 59, 60, 46, 47, 44, 45, 61, 62, 63, 64, 4, 65, 27, 28, 66, 29, 30, 31, 32, 67, 33, 34, 68, 35, 36, 37, 38, 48 }
  uselistorder i32 ()* @function_ee68, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 38, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 5, 4, 25, 24, 23, 22, 21, 20, 19, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0, 3, 2 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @setsockopt, { 0, 4, 8, 7, 6, 5, 3, 2, 1, 10, 9, 11 }
  uselistorder i32 2048, { 7, 6, 4, 9, 10, 1, 2, 3, 8, 5, 11, 0, 12, 13 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 5, 4, 1, 0, 9, 8, 3, 2, 7, 6, 13, 12, 11, 10, 14 }
  uselistorder i32* @global_var_1a250.131, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @r5, { 16, 13, 14, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 105, 106, 107, 108, 109, 110, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 3, 72, 73, 74, 75, 76, 77, 5, 78, 79, 80, 81, 82, 83, 84, 6, 85, 7, 86, 87, 88, 89, 90, 91, 92, 111, 112, 4, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 168, 170, 0, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 296, 298, 1, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104 }
  uselistorder i32* @global_var_1a24c.129, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1a24c.129 to i32), { 1, 0, 2, 3, 4 }
  uselistorder i32* (i32, i32)* @calloc, { 39, 28, 18, 3, 2, 1, 0, 13, 12, 36, 35, 26, 32, 31, 30, 29, 21, 20, 17, 16, 8, 27, 15, 14, 4, 5, 34, 33, 11, 10, 7, 6, 25, 24, 23, 22, 9, 38, 37, 19, 40 }
  uselistorder i32 356, { 0, 5, 6, 7, 1, 8, 10, 2, 11, 12, 3, 4, 9 }
  uselistorder i32 388, { 2, 3, 6, 0, 1, 4, 5, 7 }
  uselistorder i32* @global_var_1a22c.118, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @time, { 0, 2, 1, 3, 6, 5, 4, 8, 7, 9 }
  uselistorder i32 (i32)* @function_eec4, { 1, 0 }
  uselistorder i32* @global_var_1a230.41, { 3, 4, 0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_1a230.41 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_119a8, { 2, 1, 0 }
  uselistorder i32* @global_var_1a254.116, { 0, 2, 1 }
  uselistorder i32 ()* @fork, { 0, 5, 6, 4, 3, 2, 1, 7 }
  uselistorder i32* @fp, { 3, 0, 1, 2, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* @sl, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 2, 56, 57, 58, 3, 59, 60, 61, 62, 63, 64, 65, 0, 66, 67, 68, 69, 1, 70, 71, 72, 29, 30, 31 }
  uselistorder i32* @sb, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_10fec, { 1, 0 }
  uselistorder label %dec_label_pc_10248.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10248.backedge.thread584, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_10248.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10fa0, { 1, 0 }
  uselistorder label %dec_label_pc_10cf4, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_10cbc, { 1, 0 }
  uselistorder label %dec_label_pc_10ca8, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10c98, { 1, 0 }
  uselistorder label %dec_label_pc_10b88, { 1, 0 }
  uselistorder label %dec_label_pc_10abc, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10aa4, { 1, 0 }
  uselistorder label %dec_label_pc_109b8, { 1, 0 }
  uselistorder label %dec_label_pc_108fc, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_108e4, { 1, 0 }
  uselistorder label %dec_label_pc_107b4, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_1079c, { 1, 0 }
  uselistorder label %dec_label_pc_106e0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_106c8, { 1, 0 }
  uselistorder label %dec_label_pc_10654, { 5, 2, 3, 4, 1, 0 }
  uselistorder label %.thread105, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10620, { 1, 0 }
  uselistorder label %.thread101, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10600, { 1, 0 }
  uselistorder label %dec_label_pc_105ec, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_105a8, { 1, 0 }
  uselistorder label %dec_label_pc_105a8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1053c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10524, { 1, 0 }
  uselistorder label %dec_label_pc_10498, { 4, 5, 1, 2, 3, 6, 7, 0 }
  uselistorder label %dec_label_pc_10490, { 1, 0 }
  uselistorder label %dec_label_pc_10490thread-pre-split, { 3, 2, 5, 6, 0, 1, 4 }
  uselistorder label %dec_label_pc_10478, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10354, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb428, { 1, 0 }
  uselistorder label %bb426, { 1, 0 }
  uselistorder label %dec_label_pc_1031c, { 1, 0 }
  uselistorder label %dec_label_pc_102b0, { 1, 0 }
  uselistorder label %.thread84, { 1, 0 }
  uselistorder label %dec_label_pc_10260, { 1, 0 }
  uselistorder label %dec_label_pc_10250, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10250.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_10244.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_1022c, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_1014c, { 1, 0 }
  uselistorder label %bb420, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_1003c.dec_label_pc_1003c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10018.dec_label_pc_10018_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1000c, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fff4, { 1, 0 }
  uselistorder label %dec_label_pc_ffd0, { 1, 0 }
  uselistorder label %dec_label_pc_fe78, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fe64, { 1, 0 }
  uselistorder label %bb411, { 1, 0 }
  uselistorder label %bb398, { 1, 0 }
  uselistorder label %dec_label_pc_fcf8.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fcec.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fce0.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fcc8, { 1, 0 }
  uselistorder label %.thread33, { 1, 0 }
  uselistorder label %dec_label_pc_fc6c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fc48, { 1, 0 }
  uselistorder label %dec_label_pc_fc3c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fc18, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fbf4, { 1, 0 }
  uselistorder label %bb378, { 1, 0 }
  uselistorder label %dec_label_pc_fba0, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_f9a4, { 1, 0 }
}

define i32 @function_10ff4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10ff4:
  %v3_10ff8 = mul i32 %arg1, 8
  %v2_10ffc = add i32 %v3_10ff8, ptrtoint (i32* @global_var_1a25c.192 to i32)
  %v2_11000 = icmp eq i32* %arg2, null
  br i1 %v2_11000, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10ff4
  %v3_110084 = inttoptr i32 %v2_10ffc to i32*
  %v4_110085 = load i32, i32* %v3_110084, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_10ff4
  %v2_11004 = add i32 %v3_10ff8, add (i32 ptrtoint (i32* @global_var_1a25c.192 to i32), i32 4)
  %v3_11004 = inttoptr i32 %v2_11004 to i16*
  %v4_11004 = load i16, i16* %v3_11004, align 4
  %v5_11004 = zext i16 %v4_11004 to i32
  %v3_11008 = inttoptr i32 %v2_10ffc to i32*
  %v4_11008 = load i32, i32* %v3_11008, align 4
  store i32 %v5_11004, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_110086 = phi i32 [ %v4_110085, %.thread ], [ %v4_11008, %bb ]
  ret i32 %v4_110086

; uselistorder directives
  uselistorder i32 %v2_10ffc, { 1, 0 }
  uselistorder i32 %v3_10ff8, { 1, 0 }
  uselistorder i32* null, { 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 1, 19, 2, 20, 4 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_11018(i32 %arg1) local_unnamed_addr {
dec_label_pc_11018:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11020 = mul i32 %arg1, 8
  %v2_11024 = add i32 %v3_11020, ptrtoint (i32* @global_var_1a25c.192 to i32)
  %v2_11028 = load i32, i32* inttoptr (i32 106960 to i32*), align 16
  %v1_1102c = add i32 %v3_11020, add (i32 ptrtoint (i32* @global_var_1a25c.192 to i32), i32 4)
  %v2_1102c = inttoptr i32 %v1_1102c to i16*
  %v3_1102c = load i16, i16* %v2_1102c, align 4
  %v3_11030 = udiv i32 %v2_11028, 256
  %v2_11034 = icmp eq i16 %v3_1102c, 0
  %v3_11038 = udiv i32 %v2_11028, 65536
  %v3_1103c = load i32, i32* @r4, align 4
  store i32 %v3_1103c, i32* %stack_var_-16, align 4
  %v1_11040 = urem i32 %v3_11030, 256
  store i32 %v1_11040, i32* %r6.global-to-local, align 4
  %v1_11044 = urem i32 %v3_11038, 256
  store i32 %v1_11044, i32* %r5.global-to-local, align 4
  %v3_11048 = udiv i32 %v2_11028, 16777216
  store i32 %v3_11048, i32* %r4.global-to-local, align 4
  %v1_1104c = urem i32 %v2_11028, 256
  store i32 %v1_1104c, i32* %lr.global-to-local, align 4
  br i1 %v2_11034, label %dec_label_pc_110a8, label %dec_label_pc_11054

dec_label_pc_11054:                               ; preds = %dec_label_pc_11018
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_11058 = inttoptr i32 %v2_11024 to i32*
  br label %dec_label_pc_11058

dec_label_pc_11058:                               ; preds = %dec_label_pc_11058.dec_label_pc_11058_crit_edge, %dec_label_pc_11054
  %v0_11060 = phi i32 [ %v0_11060.pre, %dec_label_pc_11058.dec_label_pc_11058_crit_edge ], [ %v1_1104c, %dec_label_pc_11054 ]
  %v2_11064 = phi i32 [ %v1_1109c, %dec_label_pc_11058.dec_label_pc_11058_crit_edge ], [ 0, %dec_label_pc_11054 ]
  %v2_11058 = load i32, i32* %v1_11058, align 4
  %v2_1105c = add i32 %v2_11058, %v2_11064
  %v3_1105c = inttoptr i32 %v2_1105c to i8*
  %v4_1105c = load i8, i8* %v3_1105c, align 1
  %v6_1105c = zext i8 %v4_1105c to i32
  %v2_11060 = xor i32 %v6_1105c, %v0_11060
  %v1_11064 = trunc i32 %v2_11060 to i8
  store i8 %v1_11064, i8* %v3_1105c, align 1
  %v2_11068 = load i32, i32* %v1_11058, align 4
  %v0_1106c = load i32, i32* %ip.global-to-local, align 4
  %v2_1106c = add i32 %v0_1106c, %v2_11068
  %v3_1106c = inttoptr i32 %v2_1106c to i8*
  %v4_1106c = load i8, i8* %v3_1106c, align 1
  %v6_1106c = zext i8 %v4_1106c to i32
  %v0_11070 = load i32, i32* %r6.global-to-local, align 4
  %v2_11070 = xor i32 %v0_11070, %v6_1106c
  %v1_11074 = trunc i32 %v2_11070 to i8
  store i8 %v1_11074, i8* %v3_1106c, align 1
  %v2_11078 = load i32, i32* %v1_11058, align 4
  %v0_1107c = load i32, i32* %ip.global-to-local, align 4
  %v2_1107c = add i32 %v0_1107c, %v2_11078
  %v3_1107c = inttoptr i32 %v2_1107c to i8*
  %v4_1107c = load i8, i8* %v3_1107c, align 1
  %v6_1107c = zext i8 %v4_1107c to i32
  %v0_11080 = load i32, i32* %r5.global-to-local, align 4
  %v2_11080 = xor i32 %v0_11080, %v6_1107c
  %v1_11084 = trunc i32 %v2_11080 to i8
  store i8 %v1_11084, i8* %v3_1107c, align 1
  %v2_11088 = load i32, i32* %v1_11058, align 4
  %v0_1108c = load i32, i32* %ip.global-to-local, align 4
  %v2_1108c = add i32 %v0_1108c, %v2_11088
  %v3_1108c = inttoptr i32 %v2_1108c to i8*
  %v4_1108c = load i8, i8* %v3_1108c, align 1
  %v6_1108c = zext i8 %v4_1108c to i32
  %v0_11090 = load i32, i32* %r4.global-to-local, align 4
  %v2_11090 = xor i32 %v0_11090, %v6_1108c
  %v1_11094 = trunc i32 %v2_11090 to i8
  store i8 %v1_11094, i8* %v3_1108c, align 1
  %v3_11098 = load i16, i16* %v2_1102c, align 4
  %v4_11098 = zext i16 %v3_11098 to i32
  %v0_1109c = load i32, i32* %ip.global-to-local, align 4
  %v1_1109c = add i32 %v0_1109c, 1
  store i32 %v1_1109c, i32* %ip.global-to-local, align 4
  %v8_110a4 = icmp sgt i32 %v4_11098, %v1_1109c
  br i1 %v8_110a4, label %dec_label_pc_11058.dec_label_pc_11058_crit_edge, label %dec_label_pc_110a8.loopexit

dec_label_pc_11058.dec_label_pc_11058_crit_edge:  ; preds = %dec_label_pc_11058
  %v0_11060.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_11058

dec_label_pc_110a8.loopexit:                      ; preds = %dec_label_pc_11058
  %v2_110a8.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_110a8

dec_label_pc_110a8:                               ; preds = %dec_label_pc_110a8.loopexit, %dec_label_pc_11018
  %v2_110a8 = phi i32 [ %v2_110a8.pre, %dec_label_pc_110a8.loopexit ], [ %v3_1103c, %dec_label_pc_11018 ]
  store i32 %v2_110a8, i32* @r4, align 4
  ret i32 %v2_11024

; uselistorder directives
  uselistorder i32 %v1_1109c, { 1, 2, 0 }
  uselistorder i32 %v1_1104c, { 1, 0 }
  uselistorder i32 %v2_11028, { 3, 0, 1, 2 }
  uselistorder i32 %v2_11024, { 1, 0 }
  uselistorder i32 %v3_11020, { 1, 0 }
}

define i32 @function_110b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_110b8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_110c0 = mul i32 %arg1, 8
  %v2_110c4 = add i32 %v3_110c0, ptrtoint (i32* @global_var_1a25c.192 to i32)
  %v2_110c8 = load i32, i32* inttoptr (i32 106960 to i32*), align 16
  %v1_110cc = add i32 %v3_110c0, add (i32 ptrtoint (i32* @global_var_1a25c.192 to i32), i32 4)
  %v2_110cc = inttoptr i32 %v1_110cc to i16*
  %v3_110cc = load i16, i16* %v2_110cc, align 4
  %v3_110d0 = udiv i32 %v2_110c8, 256
  %v2_110d4 = icmp eq i16 %v3_110cc, 0
  %v3_110d8 = udiv i32 %v2_110c8, 65536
  %v3_110dc = load i32, i32* @r4, align 4
  store i32 %v3_110dc, i32* %stack_var_-16, align 4
  %v1_110e0 = urem i32 %v3_110d0, 256
  store i32 %v1_110e0, i32* %r6.global-to-local, align 4
  %v1_110e4 = urem i32 %v3_110d8, 256
  store i32 %v1_110e4, i32* %r5.global-to-local, align 4
  %v3_110e8 = udiv i32 %v2_110c8, 16777216
  store i32 %v3_110e8, i32* %r4.global-to-local, align 4
  %v1_110ec = urem i32 %v2_110c8, 256
  store i32 %v1_110ec, i32* %lr.global-to-local, align 4
  br i1 %v2_110d4, label %dec_label_pc_11148, label %dec_label_pc_110f4

dec_label_pc_110f4:                               ; preds = %dec_label_pc_110b8
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_110f8 = inttoptr i32 %v2_110c4 to i32*
  br label %dec_label_pc_110f8

dec_label_pc_110f8:                               ; preds = %dec_label_pc_110f8.dec_label_pc_110f8_crit_edge, %dec_label_pc_110f4
  %v0_11100 = phi i32 [ %v0_11100.pre, %dec_label_pc_110f8.dec_label_pc_110f8_crit_edge ], [ %v1_110ec, %dec_label_pc_110f4 ]
  %v2_11104 = phi i32 [ %v1_1113c, %dec_label_pc_110f8.dec_label_pc_110f8_crit_edge ], [ 0, %dec_label_pc_110f4 ]
  %v2_110f8 = load i32, i32* %v1_110f8, align 4
  %v2_110fc = add i32 %v2_110f8, %v2_11104
  %v3_110fc = inttoptr i32 %v2_110fc to i8*
  %v4_110fc = load i8, i8* %v3_110fc, align 1
  %v6_110fc = zext i8 %v4_110fc to i32
  %v2_11100 = xor i32 %v6_110fc, %v0_11100
  %v1_11104 = trunc i32 %v2_11100 to i8
  store i8 %v1_11104, i8* %v3_110fc, align 1
  %v2_11108 = load i32, i32* %v1_110f8, align 4
  %v0_1110c = load i32, i32* %ip.global-to-local, align 4
  %v2_1110c = add i32 %v0_1110c, %v2_11108
  %v3_1110c = inttoptr i32 %v2_1110c to i8*
  %v4_1110c = load i8, i8* %v3_1110c, align 1
  %v6_1110c = zext i8 %v4_1110c to i32
  %v0_11110 = load i32, i32* %r6.global-to-local, align 4
  %v2_11110 = xor i32 %v0_11110, %v6_1110c
  %v1_11114 = trunc i32 %v2_11110 to i8
  store i8 %v1_11114, i8* %v3_1110c, align 1
  %v2_11118 = load i32, i32* %v1_110f8, align 4
  %v0_1111c = load i32, i32* %ip.global-to-local, align 4
  %v2_1111c = add i32 %v0_1111c, %v2_11118
  %v3_1111c = inttoptr i32 %v2_1111c to i8*
  %v4_1111c = load i8, i8* %v3_1111c, align 1
  %v6_1111c = zext i8 %v4_1111c to i32
  %v0_11120 = load i32, i32* %r5.global-to-local, align 4
  %v2_11120 = xor i32 %v0_11120, %v6_1111c
  %v1_11124 = trunc i32 %v2_11120 to i8
  store i8 %v1_11124, i8* %v3_1111c, align 1
  %v2_11128 = load i32, i32* %v1_110f8, align 4
  %v0_1112c = load i32, i32* %ip.global-to-local, align 4
  %v2_1112c = add i32 %v0_1112c, %v2_11128
  %v3_1112c = inttoptr i32 %v2_1112c to i8*
  %v4_1112c = load i8, i8* %v3_1112c, align 1
  %v6_1112c = zext i8 %v4_1112c to i32
  %v0_11130 = load i32, i32* %r4.global-to-local, align 4
  %v2_11130 = xor i32 %v0_11130, %v6_1112c
  %v1_11134 = trunc i32 %v2_11130 to i8
  store i8 %v1_11134, i8* %v3_1112c, align 1
  %v3_11138 = load i16, i16* %v2_110cc, align 4
  %v4_11138 = zext i16 %v3_11138 to i32
  %v0_1113c = load i32, i32* %ip.global-to-local, align 4
  %v1_1113c = add i32 %v0_1113c, 1
  store i32 %v1_1113c, i32* %ip.global-to-local, align 4
  %v8_11144 = icmp sgt i32 %v4_11138, %v1_1113c
  br i1 %v8_11144, label %dec_label_pc_110f8.dec_label_pc_110f8_crit_edge, label %dec_label_pc_11148.loopexit

dec_label_pc_110f8.dec_label_pc_110f8_crit_edge:  ; preds = %dec_label_pc_110f8
  %v0_11100.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_110f8

dec_label_pc_11148.loopexit:                      ; preds = %dec_label_pc_110f8
  %v2_11148.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11148

dec_label_pc_11148:                               ; preds = %dec_label_pc_11148.loopexit, %dec_label_pc_110b8
  %v2_11148 = phi i32 [ %v2_11148.pre, %dec_label_pc_11148.loopexit ], [ %v3_110dc, %dec_label_pc_110b8 ]
  store i32 %v2_11148, i32* @r4, align 4
  ret i32 %v2_110c4

; uselistorder directives
  uselistorder i32 %v1_1113c, { 1, 2, 0 }
  uselistorder i32 %v1_110ec, { 1, 0 }
  uselistorder i32 %v2_110c8, { 3, 0, 1, 2 }
  uselistorder i32 %v2_110c4, { 1, 0 }
  uselistorder i32 %v3_110c0, { 1, 0 }
  uselistorder i16 0, { 4, 5, 0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 2, 17, 3, 18, 19 }
}

define i32 @function_11158(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11158:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v1_11164 = call i32* @malloc(i32 2)
  %v3_11164 = ptrtoint i32* %v1_11164 to i32
  store i32 ptrtoint (i32* @global_var_1a25c.192 to i32), i32* %r4.global-to-local, align 4
  store i32 2, i32* %r6.global-to-local, align 4
  store i32 %v3_11164, i32* %r5.global-to-local, align 4
  %v3_1117c = call i32 @function_1175c(i32 %v3_11164, i32 ptrtoint (i32* @global_var_11e28.199 to i32), i32 2)
  store i32 12, i32* %fp.global-to-local, align 4
  %v0_11188 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11188, i32* @global_var_1a264.200, align 4
  %v0_1118c = load i32, i32* %r6.global-to-local, align 4
  %v1_1118c = trunc i32 %v0_1118c to i16
  store i16 %v1_1118c, i16* bitcast (i32* @global_var_1a268.201 to i16*), align 4
  %v2_11190 = call i32* @malloc(i32 12)
  %v4_11190 = ptrtoint i32* %v2_11190 to i32
  %v0_11198 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v4_11190, i32* %r5.global-to-local, align 4
  %v4_111a0 = call i32 @function_1175c(i32 %v4_11190, i32 ptrtoint ([13 x i8]* @global_var_11e2c.203 to i32), i32 %v0_11198)
  %v0_111a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_111a8, i32* @global_var_1a26c.204, align 4
  %v1_111ac = trunc i32 %v0_11198 to i16
  store i16 %v1_111ac, i16* bitcast (i32* @global_var_1a270.205 to i16*), align 4
  %v1_111b0 = call i32* @malloc(i32 %v0_11198)
  %v3_111b0 = ptrtoint i32* %v1_111b0 to i32
  %v0_111b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_111b0, i32* %r5.global-to-local, align 4
  %v4_111c0 = call i32 @function_1175c(i32 %v3_111b0, i32 ptrtoint ([13 x i8]* @global_var_11e3c.207 to i32), i32 %v0_111b8)
  %v0_111c4 = load i32, i32* %r6.global-to-local, align 4
  %v0_111c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_111c8, i32* @global_var_1a274.208, align 4
  %v1_111cc = trunc i32 %v0_111b8 to i16
  store i16 %v1_111cc, i16* bitcast (i32* @global_var_1a278.209 to i16*), align 4
  %v1_111d0 = call i32* @malloc(i32 %v0_111c4)
  %v3_111d0 = ptrtoint i32* %v1_111d0 to i32
  %v0_111d4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v3_111d0, i32* %r5.global-to-local, align 4
  %v3_111e0 = call i32 @function_1175c(i32 %v3_111d0, i32 ptrtoint (i32* @global_var_11e4c.211 to i32), i32 %v0_111d4)
  %v0_111e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_111e8, i32* @global_var_1a27c.212, align 4
  %v0_111ec = load i32, i32* %r6.global-to-local, align 4
  %v1_111ec = trunc i32 %v0_111ec to i16
  store i16 %v1_111ec, i16* bitcast (i32* @global_var_1a280.213 to i16*), align 4
  %v1_111f0 = call i32* @malloc(i32 36)
  %v3_111f0 = ptrtoint i32* %v1_111f0 to i32
  store i32 %v3_111f0, i32* %r5.global-to-local, align 4
  %v4_11200 = call i32 @function_1175c(i32 %v3_111f0, i32 ptrtoint ([37 x i8]* @global_var_11e50.215 to i32), i32 36)
  %v0_1120c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1120c, i32* @global_var_1a284.216, align 4
  store i16 36, i16* bitcast (i32* @global_var_1a288.217 to i16*), align 4
  %v1_11214 = call i32* @malloc(i32 6)
  %v3_11214 = ptrtoint i32* %v1_11214 to i32
  store i32 %v3_11214, i32* %r5.global-to-local, align 4
  %v4_11224 = call i32 @function_1175c(i32 %v3_11214, i32 ptrtoint ([7 x i8]* @global_var_11e78.219 to i32), i32 6)
  store i32 7, i32* %r6.global-to-local, align 4
  store i16 6, i16* bitcast (i32* @global_var_1a290.220 to i16*), align 4
  %v0_11238 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11238, i32* @global_var_1a28c.221, align 4
  %v2_1123c = call i32* @malloc(i32 7)
  %v4_1123c = ptrtoint i32* %v2_1123c to i32
  %v0_11240 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v4_1123c, i32* %r5.global-to-local, align 4
  %v4_1124c = call i32 @function_1175c(i32 %v4_1123c, i32 ptrtoint ([8 x i8]* @global_var_11e80.223 to i32), i32 %v0_11240)
  %v0_11250 = load i32, i32* %r6.global-to-local, align 4
  %v0_11254 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11254, i32* @global_var_1a294.224, align 4
  %v1_11258 = trunc i32 %v0_11250 to i16
  store i16 %v1_11258, i16* bitcast (i32* @global_var_1a298.225 to i16*), align 4
  %v1_1125c = call i32* @malloc(i32 %v0_11250)
  %v3_1125c = ptrtoint i32* %v1_1125c to i32
  %v0_11260 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v3_1125c, i32* %r5.global-to-local, align 4
  %v4_1126c = call i32 @function_1175c(i32 %v3_1125c, i32 ptrtoint ([8 x i8]* @global_var_11e88.227 to i32), i32 %v0_11260)
  %v0_11274 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11274, i32* @global_var_1a29c.228, align 4
  %v0_11278 = load i32, i32* %r6.global-to-local, align 4
  %v1_11278 = trunc i32 %v0_11278 to i16
  store i16 %v1_11278, i16* bitcast (i32* @global_var_1a2a0.229 to i16*), align 4
  %v1_1127c = call i32* @malloc(i32 3)
  %v3_1127c = ptrtoint i32* %v1_1127c to i32
  store i32 %v3_1127c, i32* %r5.global-to-local, align 4
  %v4_1128c = call i32 @function_1175c(i32 %v3_1127c, i32 ptrtoint ([4 x i8]* @global_var_11e90.231 to i32), i32 3)
  %v0_11298 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11298, i32* @global_var_1a2a4.232, align 4
  store i16 3, i16* bitcast (i32* @global_var_1a2a8.233 to i16*), align 4
  %v1_112a0 = call i32* @malloc(i32 19)
  %v3_112a0 = ptrtoint i32* %v1_112a0 to i32
  store i32 19, i32* %sl.global-to-local, align 4
  store i32 %v3_112a0, i32* %r5.global-to-local, align 4
  %v3_112b4 = call i32 @function_1175c(i32 %v3_112a0, i32 ptrtoint (i32* @global_var_11e94.235 to i32), i32 19)
  %v0_112bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_112bc, i32* @global_var_1a2ac.236, align 4
  store i16 19, i16* bitcast (i32* @global_var_1a2b0.237 to i16*), align 4
  %v1_112c4 = call i32* @malloc(i32 24)
  %v3_112c4 = ptrtoint i32* %v1_112c4 to i32
  store i32 %v3_112c4, i32* %r5.global-to-local, align 4
  %v3_112d4 = call i32 @function_1175c(i32 %v3_112c4, i32 ptrtoint (i32* @global_var_11ea8.238 to i32), i32 24)
  store i16 24, i16* bitcast (i32* @global_var_1a2b8.239 to i16*), align 4
  %v0_112e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_112e4, i32* @global_var_1a2b4.240, align 4
  %v1_112e8 = call i32* @malloc(i32 9)
  %v3_112e8 = ptrtoint i32* %v1_112e8 to i32
  store i32 %v3_112e8, i32* %r5.global-to-local, align 4
  %v4_112f8 = call i32 @function_1175c(i32 %v3_112e8, i32 ptrtoint ([10 x i8]* @global_var_11ec4.242 to i32), i32 9)
  %v0_11304 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11304, i32* @global_var_1a2bc.243, align 4
  store i16 9, i16* bitcast (i32* @global_var_1a2c0.244 to i16*), align 4
  %v1_1130c = call i32* @malloc(i32 16)
  %v2_1130c = ptrtoint i32* %v1_1130c to i32
  store i32 16, i32* %sb.global-to-local, align 4
  store i32 %v2_1130c, i32* %r5.global-to-local, align 4
  %v4_11320 = call i32 @function_1175c(i32 %v2_1130c, i32 ptrtoint ([17 x i8]* @global_var_11ed0.246 to i32), i32 16)
  %v0_11328 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11328, i32* @global_var_1a2c4.247, align 4
  store i16 16, i16* bitcast (i32* @global_var_1a2c8.248 to i16*), align 4
  %v1_11330 = call i32* @malloc(i32 22)
  %v3_11330 = ptrtoint i32* %v1_11330 to i32
  store i32 %v3_11330, i32* %r5.global-to-local, align 4
  %v4_11340 = call i32 @function_1175c(i32 %v3_11330, i32 ptrtoint ([23 x i8]* @global_var_11ee4.250 to i32), i32 22)
  %v0_11348 = load i32, i32* %r6.global-to-local, align 4
  store i16 22, i16* bitcast (i32* @global_var_1a2d0.251 to i16*), align 4
  %v0_11350 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11350, i32* @global_var_1a2cc.252, align 4
  %v1_11354 = call i32* @malloc(i32 %v0_11348)
  %v3_11354 = ptrtoint i32* %v1_11354 to i32
  %v0_11358 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v3_11354, i32* %r5.global-to-local, align 4
  %v4_11364 = call i32 @function_1175c(i32 %v3_11354, i32 ptrtoint ([8 x i8]* @global_var_11efc.254 to i32), i32 %v0_11358)
  %v0_1136c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1136c, i32* @global_var_1a2d4.255, align 4
  %v0_11370 = load i32, i32* %r6.global-to-local, align 4
  %v1_11370 = trunc i32 %v0_11370 to i16
  store i16 %v1_11370, i16* bitcast (i32* @global_var_1a2d8.256 to i16*), align 4
  %v1_11374 = call i32* @malloc(i32 5)
  %v3_11374 = ptrtoint i32* %v1_11374 to i32
  store i32 %v3_11374, i32* %r5.global-to-local, align 4
  %v4_11384 = call i32 @function_1175c(i32 %v3_11374, i32 ptrtoint ([6 x i8]* @global_var_11f04.258 to i32), i32 5)
  %v0_11390 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11390, i32* @global_var_1a2dc.259, align 4
  store i16 5, i16* bitcast (i32* @global_var_1a2e0.260 to i16*), align 4
  %v1_11398 = call i32* @malloc(i32 4)
  %v3_11398 = ptrtoint i32* %v1_11398 to i32
  store i32 %v3_11398, i32* %r5.global-to-local, align 4
  %v4_113a8 = call i32 @function_1175c(i32 %v3_11398, i32 ptrtoint ([5 x i8]* @global_var_11f0c.262 to i32), i32 4)
  store i16 4, i16* bitcast (i32* @global_var_1a2e8.263 to i16*), align 4
  %v0_113b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113b8, i32* @global_var_1a2e4.264, align 4
  %v1_113bc = call i32* @malloc(i32 6)
  %v3_113bc = ptrtoint i32* %v1_113bc to i32
  store i32 %v3_113bc, i32* %r5.global-to-local, align 4
  %v4_113cc = call i32 @function_1175c(i32 %v3_113bc, i32 ptrtoint ([7 x i8]* @global_var_11f14.266 to i32), i32 6)
  %v0_113d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113d8, i32* @global_var_1a2ec.267, align 4
  store i16 6, i16* bitcast (i32* @global_var_1a2f0.268 to i16*), align 4
  %v1_113e0 = call i32* @malloc(i32 14)
  %v2_113e0 = ptrtoint i32* %v1_113e0 to i32
  store i32 14, i32* %r7.global-to-local, align 4
  store i32 %v2_113e0, i32* %r5.global-to-local, align 4
  %v4_113f4 = call i32 @function_1175c(i32 %v2_113e0, i32 ptrtoint ([15 x i8]* @global_var_11f1c.270 to i32), i32 14)
  %v0_113fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113fc, i32* @global_var_1a2f4.271, align 4
  store i16 14, i16* bitcast (i32* @global_var_1a2f8.272 to i16*), align 4
  %v1_11404 = call i32* @malloc(i32 8)
  %v2_11404 = ptrtoint i32* %v1_11404 to i32
  store i32 8, i32* %r8.global-to-local, align 4
  store i32 %v2_11404, i32* %r5.global-to-local, align 4
  %v4_11418 = call i32 @function_1175c(i32 %v2_11404, i32 ptrtoint ([9 x i8]* @global_var_11f2c.274 to i32), i32 8)
  %v0_11420 = load i32, i32* %r6.global-to-local, align 4
  %v2_11424 = load i32, i32* %r4.global-to-local, align 4
  %v4_11424 = add i32 %v2_11424, 276
  %v5_11424 = inttoptr i32 %v4_11424 to i16*
  store i16 8, i16* %v5_11424, align 2
  %v0_11428 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11428, i32* @global_var_1a36c.275, align 4
  %v1_1142c = call i32* @malloc(i32 %v0_11420)
  %v3_1142c = ptrtoint i32* %v1_1142c to i32
  %v0_11430 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v3_1142c, i32* %r5.global-to-local, align 4
  %v4_1143c = call i32 @function_1175c(i32 %v3_1142c, i32 ptrtoint ([8 x i8]* @global_var_11f38.277 to i32), i32 %v0_11430)
  %v0_11444 = load i32, i32* %sb.global-to-local, align 4
  %v0_11448 = load i32, i32* %r6.global-to-local, align 4
  %v1_11448 = trunc i32 %v0_11448 to i16
  %v2_11448 = load i32, i32* %r4.global-to-local, align 4
  %v4_11448 = add i32 %v2_11448, 284
  %v5_11448 = inttoptr i32 %v4_11448 to i16*
  store i16 %v1_11448, i16* %v5_11448, align 2
  %v0_1144c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1144c, i32* @global_var_1a374.278, align 4
  %v1_11450 = call i32* @malloc(i32 %v0_11444)
  %v3_11450 = ptrtoint i32* %v1_11450 to i32
  %v0_11454 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_11450, i32* %r5.global-to-local, align 4
  %v4_11460 = call i32 @function_1175c(i32 %v3_11450, i32 ptrtoint ([17 x i8]* @global_var_11f40.280 to i32), i32 %v0_11454)
  %v0_11468 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11468, i32* @global_var_1a2fc.281, align 4
  %v1_1146c = trunc i32 %v0_11454 to i16
  store i16 %v1_1146c, i16* bitcast (i32* @global_var_1a300.282 to i16*), align 4
  %v1_11470 = call i32* @malloc(i32 23)
  %v2_11470 = ptrtoint i32* %v1_11470 to i32
  %v0_1147c = load i32, i32* %r6.global-to-local, align 4
  %v1_1147c = load i32, i32* %sb.global-to-local, align 4
  %v2_1147c = add i32 %v1_1147c, %v0_1147c
  store i32 %v2_1147c, i32* %r6.global-to-local, align 4
  store i32 %v2_11470, i32* %r5.global-to-local, align 4
  %v4_11484 = call i32 @function_1175c(i32 %v2_11470, i32 ptrtoint ([24 x i8]* @global_var_11f54.284 to i32), i32 23)
  %v0_11488 = load i32, i32* %r8.global-to-local, align 4
  %v0_1148c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1148c, i32* @global_var_1a304.285, align 4
  %v0_11490 = load i32, i32* %r6.global-to-local, align 4
  %v1_11490 = trunc i32 %v0_11490 to i16
  store i16 %v1_11490, i16* bitcast (i32* @global_var_1a308.286 to i16*), align 4
  %v1_11494 = call i32* @malloc(i32 %v0_11488)
  %v3_11494 = ptrtoint i32* %v1_11494 to i32
  %v0_1149c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_11494, i32* %r5.global-to-local, align 4
  %v4_114a4 = call i32 @function_1175c(i32 %v3_11494, i32 ptrtoint ([9 x i8]* @global_var_11f6c.288 to i32), i32 %v0_1149c)
  %v0_114a8 = load i32, i32* %r7.global-to-local, align 4
  %v0_114ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114ac, i32* @global_var_1a30c.289, align 4
  %v1_114b0 = trunc i32 %v0_1149c to i16
  store i16 %v1_114b0, i16* bitcast (i32* @global_var_1a310.290 to i16*), align 4
  %v1_114b4 = call i32* @malloc(i32 %v0_114a8)
  %v3_114b4 = ptrtoint i32* %v1_114b4 to i32
  %v0_114bc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_114b4, i32* %r5.global-to-local, align 4
  %v4_114c4 = call i32 @function_1175c(i32 %v3_114b4, i32 ptrtoint ([15 x i8]* @global_var_11f78.292 to i32), i32 %v0_114bc)
  %v0_114c8 = load i32, i32* %sl.global-to-local, align 4
  %v0_114cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114cc, i32* @global_var_1a314.293, align 4
  %v1_114d0 = trunc i32 %v0_114bc to i16
  store i16 %v1_114d0, i16* bitcast (i32* @global_var_1a318.294 to i16*), align 4
  %v1_114d4 = call i32* @malloc(i32 %v0_114c8)
  %v3_114d4 = ptrtoint i32* %v1_114d4 to i32
  store i32 ptrtoint ([20 x i8]* @global_var_11f88.296 to i32), i32* %sb.global-to-local, align 4
  %v0_114dc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_114d4, i32* %r5.global-to-local, align 4
  %v4_114e8 = call i32 @function_1175c(i32 %v3_114d4, i32 ptrtoint ([20 x i8]* @global_var_11f88.296 to i32), i32 %v0_114dc)
  %v0_114f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114f0, i32* @global_var_1a31c.297, align 4
  %v1_114f4 = trunc i32 %v0_114dc to i16
  store i16 %v1_114f4, i16* bitcast (i32* @global_var_1a320.298 to i16*), align 4
  %v1_114f8 = call i32* @malloc(i32 10)
  %v3_114f8 = ptrtoint i32* %v1_114f8 to i32
  store i32 %v3_114f8, i32* %r5.global-to-local, align 4
  %v4_11508 = call i32 @function_1175c(i32 %v3_114f8, i32 ptrtoint ([11 x i8]* @global_var_11f9c.300 to i32), i32 10)
  %v2_11518 = load i32, i32* %r4.global-to-local, align 4
  %v4_11518 = add i32 %v2_11518, 292
  %v5_11518 = inttoptr i32 %v4_11518 to i16*
  store i16 10, i16* %v5_11518, align 2
  %v0_1151c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1151c, i32* @global_var_1a37c.301, align 4
  %v1_11520 = call i32* @malloc(i32 21)
  %v3_11520 = ptrtoint i32* %v1_11520 to i32
  store i32 %v3_11520, i32* %r5.global-to-local, align 4
  %v3_11530 = call i32 @function_1175c(i32 %v3_11520, i32 ptrtoint (i32* @global_var_12000.303 to i32), i32 21)
  store i16 21, i16* bitcast (i32* @global_var_1a328.304 to i16*), align 4
  %v0_11540 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11540, i32* @global_var_1a324.305, align 4
  %v1_11544 = call i32* @malloc(i32 17)
  %v3_11544 = ptrtoint i32* %v1_11544 to i32
  store i32 %v3_11544, i32* %r5.global-to-local, align 4
  %v4_11554 = call i32 @function_1175c(i32 %v3_11544, i32 ptrtoint ([18 x i8]* @global_var_11fa8.307 to i32), i32 17)
  %v0_1155c = load i32, i32* %fp.global-to-local, align 4
  %v0_11560 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11560, i32* @global_var_1a32c.308, align 4
  store i16 17, i16* bitcast (i32* @global_var_1a330.309 to i16*), align 4
  %v1_11568 = call i32* @malloc(i32 %v0_1155c)
  %v3_11568 = ptrtoint i32* %v1_11568 to i32
  store i32 %v3_11568, i32* %r5.global-to-local, align 4
  %v4_11578 = call i32 @function_1175c(i32 %v3_11568, i32 ptrtoint ([13 x i8]* @global_var_11fbc.311 to i32), i32 %v0_1155c)
  %v0_1157c = load i32, i32* %r7.global-to-local, align 4
  %v0_11580 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11580, i32* @global_var_1a334.312, align 4
  %v0_11584 = load i32, i32* %fp.global-to-local, align 4
  %v1_11584 = trunc i32 %v0_11584 to i16
  store i16 %v1_11584, i16* bitcast (i32* @global_var_1a338.313 to i16*), align 4
  %v1_11588 = call i32* @malloc(i32 %v0_1157c)
  %v3_11588 = ptrtoint i32* %v1_11588 to i32
  %v0_11590 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_11588, i32* %r5.global-to-local, align 4
  %v4_11598 = call i32 @function_1175c(i32 %v3_11588, i32 ptrtoint ([15 x i8]* @global_var_11f78.292 to i32), i32 %v0_11590)
  %v0_1159c = load i32, i32* %sl.global-to-local, align 4
  %v0_115a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115a0, i32* @global_var_1a33c.314, align 4
  %v1_115a4 = trunc i32 %v0_11590 to i16
  store i16 %v1_115a4, i16* bitcast (i32* @global_var_1a340.315 to i16*), align 4
  %v1_115a8 = call i32* @malloc(i32 %v0_1159c)
  %v3_115a8 = ptrtoint i32* %v1_115a8 to i32
  %v0_115ac = load i32, i32* %sb.global-to-local, align 4
  %v0_115b0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_115a8, i32* %r5.global-to-local, align 4
  %v4_115b8 = call i32 @function_1175c(i32 %v3_115a8, i32 %v0_115ac, i32 %v0_115b0)
  %v0_115bc = load i32, i32* %r8.global-to-local, align 4
  %v0_115c0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115c0, i32* @global_var_1a344.316, align 4
  %v1_115c4 = trunc i32 %v0_115b0 to i16
  store i16 %v1_115c4, i16* bitcast (i32* @global_var_1a348.317 to i16*), align 4
  %v1_115c8 = call i32* @malloc(i32 %v0_115bc)
  %v3_115c8 = ptrtoint i32* %v1_115c8 to i32
  %v0_115d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_115c8, i32* %r5.global-to-local, align 4
  %v4_115d8 = call i32 @function_1175c(i32 %v3_115c8, i32 ptrtoint ([9 x i8]* @global_var_11fcc.319 to i32), i32 %v0_115d0)
  %v0_115e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115e0, i32* @global_var_1a34c.320, align 4
  %v1_115e4 = trunc i32 %v0_115d0 to i16
  store i16 %v1_115e4, i16* bitcast (i32* @global_var_1a350.321 to i16*), align 4
  %v1_115e8 = call i32* @malloc(i32 5)
  %v3_115e8 = ptrtoint i32* %v1_115e8 to i32
  store i32 %v3_115e8, i32* %r5.global-to-local, align 4
  %v4_115f8 = call i32 @function_1175c(i32 %v3_115e8, i32 ptrtoint ([6 x i8]* @global_var_11fd8.323 to i32), i32 5)
  store i16 5, i16* bitcast (i32* @global_var_1a358.324 to i16*), align 4
  %v0_11608 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11608, i32* @global_var_1a354.325, align 4
  %v1_1160c = call i32* @malloc(i32 6)
  %v3_1160c = ptrtoint i32* %v1_1160c to i32
  store i32 %v3_1160c, i32* %r5.global-to-local, align 4
  %v4_1161c = call i32 @function_1175c(i32 %v3_1160c, i32 ptrtoint ([7 x i8]* @global_var_11fe0.327 to i32), i32 6)
  %v0_11628 = load i32, i32* %r6.global-to-local, align 4
  %v2_1162c = load i32, i32* %r4.global-to-local, align 4
  %v4_1162c = add i32 %v2_1162c, 260
  %v5_1162c = inttoptr i32 %v4_1162c to i16*
  store i16 6, i16* %v5_1162c, align 2
  %v0_11630 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11630, i32* @global_var_1a35c.328, align 4
  %v1_11634 = call i32* @malloc(i32 %v0_11628)
  %v3_11634 = ptrtoint i32* %v1_11634 to i32
  %v0_1163c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v3_11634, i32* %r5.global-to-local, align 4
  %v4_11644 = call i32 @function_1175c(i32 %v3_11634, i32 ptrtoint ([24 x i8]* @global_var_11fe8.330 to i32), i32 %v0_1163c)
  %v0_1164c = load i32, i32* %r6.global-to-local, align 4
  %v1_1164c = trunc i32 %v0_1164c to i16
  %v2_1164c = load i32, i32* %r4.global-to-local, align 4
  %v4_1164c = add i32 %v2_1164c, 268
  %v5_1164c = inttoptr i32 %v4_1164c to i16*
  store i16 %v1_1164c, i16* %v5_1164c, align 2
  %v0_11650 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11650, i32* @global_var_1a364.331, align 4
  ret i32 %v4_11644

; uselistorder directives
  uselistorder i32 %v3_11634, { 1, 0 }
  uselistorder i32 %v3_115c8, { 1, 0 }
  uselistorder i32 %v3_115a8, { 1, 0 }
  uselistorder i32 %v3_11588, { 1, 0 }
  uselistorder i32 %v3_11568, { 1, 0 }
  uselistorder i32 %v3_114d4, { 1, 0 }
  uselistorder i32 %v3_114b4, { 1, 0 }
  uselistorder i32 %v3_11494, { 1, 0 }
  uselistorder i32 %v2_11470, { 1, 0 }
  uselistorder i32 %v3_11450, { 1, 0 }
  uselistorder i32 %v3_1142c, { 1, 0 }
  uselistorder i32 %v2_11404, { 1, 0 }
  uselistorder i32 %v2_113e0, { 1, 0 }
  uselistorder i32 %v3_11354, { 1, 0 }
  uselistorder i32 %v2_1130c, { 1, 0 }
  uselistorder i32 %v3_112a0, { 1, 0 }
  uselistorder i32 %v3_1125c, { 1, 0 }
  uselistorder i32 %v4_1123c, { 1, 0 }
  uselistorder i32 %v3_111d0, { 1, 0 }
  uselistorder i32 %v3_111b0, { 1, 0 }
  uselistorder i32 %v0_11198, { 1, 0, 2 }
  uselistorder i32 %v4_11190, { 1, 0 }
  uselistorder i32 %v3_11164, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 17, { 3, 4, 17, 5, 18, 19, 20, 6, 7, 8, 9, 10, 11, 21, 12, 22, 13, 23, 24, 14, 25, 15, 16, 1, 26, 2, 27, 28, 29, 0 }
  uselistorder i32 21, { 1, 0, 7, 6, 2, 3, 4, 5 }
  uselistorder i32 14, { 0, 8, 3, 7, 4, 9, 5, 10, 11, 6, 12, 13, 14, 15, 1, 16, 17, 18, 19, 2, 20 }
  uselistorder i32 5, { 14, 3, 15, 4, 16, 25, 2, 1, 26, 27, 0, 28, 29, 30, 17, 18, 19, 20, 21, 31, 22, 35, 5, 36, 6, 37, 7, 38, 23, 8, 39, 9, 40, 41, 10, 42, 43, 11, 44, 12, 45, 13, 47, 46, 32, 24, 33, 34 }
  uselistorder i32 22, { 1, 0, 6, 2, 3, 4, 5 }
  uselistorder i32 19, { 2, 7, 3, 8, 4, 5, 6, 0, 9, 1, 10 }
  uselistorder i32 7, { 11, 12, 13, 14, 15, 16, 19, 0, 17, 20, 21, 18, 22, 1, 23, 2, 24, 3, 4, 25, 5, 26, 6, 27, 7, 28, 8, 9, 29, 10, 31, 30 }
  uselistorder i32 6, { 12, 13, 14, 15, 16, 17, 19, 20, 21, 18, 28, 1, 0, 2, 29, 30, 31, 3, 32, 33, 34, 35, 4, 36, 37, 38, 39, 5, 40, 6, 41, 42, 22, 43, 7, 44, 45, 46, 23, 47, 8, 48, 49, 50, 24, 51, 52, 53, 25, 54, 9, 55, 56, 57, 58, 26, 59, 10, 60, 62, 63, 64, 65, 66, 27, 67, 11, 68, 61 }
  uselistorder i32 36, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 12, { 5, 8, 18, 28, 29, 30, 33, 34, 31, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 9, 10, 11, 35, 36, 37, 4, 38, 39, 40, 41, 43, 44, 17, 45, 12, 46, 13, 47, 49, 48, 42, 3, 77, 50, 14, 51, 52, 53, 54, 55, 56, 57, 15, 58, 59, 60, 16, 61, 62, 63, 64, 65, 66, 6, 67, 68, 69, 70, 71, 72, 7, 73, 74, 75, 76, 78, 79, 80, 81, 0, 1, 2 }
  uselistorder i32 (i32, i32, i32)* @function_1175c, { 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1a25c.192 to i32), { 4, 0, 1, 2, 3 }
  uselistorder i32* (i32)* @malloc, { 0, 28, 14, 18, 12, 20, 13, 1, 36, 40, 33, 38, 17, 24, 10, 34, 39, 19, 11, 16, 9, 32, 21, 35, 27, 29, 5, 4, 25, 37, 2, 26, 31, 22, 7, 6, 3, 15, 8, 30, 23, 41 }
}

define i32 @function_116ec(i8* %arg1) local_unnamed_addr {
dec_label_pc_116ec:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_116f0 = load i8, i8* %arg1, align 1
  %v2_116f4 = icmp eq i8 %v3_116f0, 0
  %v0_116f8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_116f4, i32 %v0_116f8)
  br label %dec_label_pc_11700

dec_label_pc_11700:                               ; preds = %dec_label_pc_11700, %dec_label_pc_116ec
  %v0_11700 = phi i32 [ %v1_11700, %dec_label_pc_11700 ], [ 0, %dec_label_pc_116ec ]
  %v1_11700 = add i32 %v0_11700, 1
  %v2_11704 = add i32 %v1_11700, %tmp
  %v3_11704 = inttoptr i32 %v2_11704 to i8*
  %v4_11704 = load i8, i8* %v3_11704, align 1
  %v2_11708 = icmp eq i8 %v4_11704, 0
  br i1 %v2_11708, label %dec_label_pc_11710, label %dec_label_pc_11700

dec_label_pc_11710:                               ; preds = %dec_label_pc_11700
  ret i32 %v1_11700
}

define i32 @function_11714(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11714:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11714 = load i8, i8* %arg1, align 1
  %v3_11714 = zext i8 %v2_11714 to i32
  %v2_11718 = icmp eq i8 %v2_11714, 0
  br i1 %v2_11718, label %bb, label %dec_label_pc_11724

bb:                                               ; preds = %dec_label_pc_11714
  store i32 %v3_11714, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11738

dec_label_pc_11724:                               ; preds = %dec_label_pc_11714
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11728

dec_label_pc_11728:                               ; preds = %dec_label_pc_11728, %dec_label_pc_11724
  %v0_11728 = phi i32 [ %v1_11728, %dec_label_pc_11728 ], [ 0, %dec_label_pc_11724 ]
  %v1_11728 = add i32 %v0_11728, 1
  store i32 %v1_11728, i32* %ip.global-to-local, align 4
  %v2_1172c = add i32 %v1_11728, %tmp
  %v3_1172c = inttoptr i32 %v2_1172c to i8*
  %v4_1172c = load i8, i8* %v3_1172c, align 1
  %v6_1172c = zext i8 %v4_1172c to i32
  store i32 %v6_1172c, i32* %r3.global-to-local, align 4
  %v2_11730 = icmp eq i8 %v4_1172c, 0
  br i1 %v2_11730, label %dec_label_pc_11738, label %dec_label_pc_11728

dec_label_pc_11738:                               ; preds = %dec_label_pc_11728, %bb
  %v0_11738 = phi i32 [ %v3_11714, %bb ], [ %v1_11728, %dec_label_pc_11728 ]
  %v1_117446 = add i32 %v0_11738, -1
  store i32 %v1_117446, i32* %r3.global-to-local, align 4
  %v3_117487 = icmp eq i32 %v0_11738, 0
  %v2_1174c8 = load i32, i32* @r0, align 4
  %v3_1174c9 = inttoptr i32 %v2_1174c8 to i8*
  store i8 %v2_11714, i8* %v3_1174c9, align 1
  %v4_1174c10 = load i32, i32* @r0, align 4
  %v5_1174c11 = add i32 %v4_1174c10, 1
  store i32 %v5_1174c11, i32* %r0.global-to-local, align 4
  br i1 %v3_117487, label %dec_label_pc_11754, label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %dec_label_pc_11738, %dec_label_pc_11740
  %v2_1174c = phi i32 [ %v5_1174c, %dec_label_pc_11740 ], [ %v5_1174c11, %dec_label_pc_11738 ]
  %v0_11740 = load i32, i32* %r1.global-to-local, align 4
  %v1_11740 = add i32 %v0_11740, 1
  %v2_11740 = inttoptr i32 %v1_11740 to i8*
  %v3_11740 = load i8, i8* %v2_11740, align 1
  store i32 %v1_11740, i32* %r1.global-to-local, align 4
  %v0_11744.pr = load i32, i32* %r3.global-to-local, align 4
  %v1_11744 = add i32 %v0_11744.pr, -1
  store i32 %v1_11744, i32* %r3.global-to-local, align 4
  %v3_11748 = icmp eq i32 %v0_11744.pr, 0
  %v3_1174c = inttoptr i32 %v2_1174c to i8*
  store i8 %v3_11740, i8* %v3_1174c, align 1
  %v4_1174c = load i32, i32* %r0.global-to-local, align 4
  %v5_1174c = add i32 %v4_1174c, 1
  store i32 %v5_1174c, i32* %r0.global-to-local, align 4
  br i1 %v3_11748, label %dec_label_pc_11754, label %dec_label_pc_11740

dec_label_pc_11754:                               ; preds = %dec_label_pc_11740, %dec_label_pc_11738
  %v0_11754 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_11754, i32* %r0.global-to-local, align 4
  ret i32 %v0_11754

; uselistorder directives
  uselistorder i32 %v5_1174c, { 1, 0 }
  uselistorder i32 %v1_11728, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_11740, { 1, 0 }
}

define i32 @function_1175c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1175c:
  %ip.global-to-local = alloca i32, align 4
  %v2_1175c = icmp eq i32 %arg3, 0
  %v0_11760 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1175c, i32 %v0_11760)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11768

dec_label_pc_11768:                               ; preds = %dec_label_pc_11768, %dec_label_pc_1175c
  %v0_11768 = phi i32 [ %v1_11770, %dec_label_pc_11768 ], [ 0, %dec_label_pc_1175c ]
  %v2_11768 = add i32 %v0_11768, %arg2
  %v3_11768 = inttoptr i32 %v2_11768 to i8*
  %v4_11768 = load i8, i8* %v3_11768, align 1
  %v4_1176c = add i32 %v0_11768, %arg1
  %v5_1176c = inttoptr i32 %v4_1176c to i8*
  store i8 %v4_11768, i8* %v5_1176c, align 1
  %v0_11770 = load i32, i32* %ip.global-to-local, align 4
  %v1_11770 = add i32 %v0_11770, 1
  store i32 %v1_11770, i32* %ip.global-to-local, align 4
  %v9_11774 = icmp eq i32 %v1_11770, %arg3
  br i1 %v9_11774, label %dec_label_pc_1177c, label %dec_label_pc_11768

dec_label_pc_1177c:                               ; preds = %dec_label_pc_11768
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_11770, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_11780() local_unnamed_addr {
dec_label_pc_11780:
  %r2.global-to-local = alloca i32, align 4
  %v0_11780 = load i32, i32* @r1, align 4
  %v2_11780 = icmp eq i32 %v0_11780, 0
  %v0_11784 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11780, i32 %v0_11784)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1178c

dec_label_pc_1178c:                               ; preds = %dec_label_pc_1178c, %dec_label_pc_11780
  %v2_11790 = phi i32 [ %v1_11794, %dec_label_pc_1178c ], [ 0, %dec_label_pc_11780 ]
  %v3_11790 = load i32, i32* @r0, align 4
  %v4_11790 = add i32 %v3_11790, %v2_11790
  %v5_11790 = inttoptr i32 %v4_11790 to i8*
  store i8 0, i8* %v5_11790, align 1
  %v0_11794 = load i32, i32* %r2.global-to-local, align 4
  %v1_11794 = add i32 %v0_11794, 1
  store i32 %v1_11794, i32* %r2.global-to-local, align 4
  %v1_11798 = load i32, i32* @r1, align 4
  %v9_11798 = icmp eq i32 %v1_11794, %v1_11798
  br i1 %v9_11798, label %dec_label_pc_117a0, label %dec_label_pc_1178c

dec_label_pc_117a0:                               ; preds = %dec_label_pc_1178c
  %v1_117a0 = load i32, i32* @r0, align 4
  ret i32 %v1_117a0

; uselistorder directives
  uselistorder i32 %v1_11794, { 1, 2, 0 }
}

define i32 @function_117a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_117a4:
  %v7_117b8 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_117b8, label %dec_label_pc_117c0, label %dec_label_pc_117c8

dec_label_pc_117c0:                               ; preds = %dec_label_pc_117dc, %dec_label_pc_117c8, %dec_label_pc_117a4, %dec_label_pc_11808
  %storemerge = phi i32 [ %v1_11808, %dec_label_pc_11808 ], [ -1, %dec_label_pc_117a4 ], [ -1, %dec_label_pc_117c8 ], [ -1, %dec_label_pc_117dc ]
  ret i32 %storemerge

dec_label_pc_117c8:                               ; preds = %dec_label_pc_117a4
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_117c0, label %dec_label_pc_117d0

dec_label_pc_117d0:                               ; preds = %dec_label_pc_117c8
  br label %dec_label_pc_117e8

dec_label_pc_117dc:                               ; preds = %bb, %dec_label_pc_117fc
  %v1_117e83 = phi i32 [ %v1_117fc, %dec_label_pc_117fc ], [ 0, %bb ]
  %v1_117dc = add i32 %v0_11808, 1
  %v9_117e0 = icmp eq i32 %v1_117dc, %arg2
  br i1 %v9_117e0, label %dec_label_pc_117c0, label %dec_label_pc_117e8

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117dc, %dec_label_pc_117d0
  %v0_11808 = phi i32 [ %v1_117dc, %dec_label_pc_117dc ], [ 0, %dec_label_pc_117d0 ]
  %v1_117e8 = phi i32 [ %v1_117e83, %dec_label_pc_117dc ], [ 0, %dec_label_pc_117d0 ]
  %v2_117e8 = add i32 %v1_117e8, %arg3
  %v3_117e8 = inttoptr i32 %v2_117e8 to i8*
  %v4_117e8 = load i8, i8* %v3_117e8, align 1
  %v2_117ec = add i32 %v0_11808, %arg1
  %v3_117ec = inttoptr i32 %v2_117ec to i8*
  %v4_117ec = load i8, i8* %v3_117ec, align 1
  %v9_117f0 = icmp eq i8 %v4_117ec, %v4_117e8
  br i1 %v9_117f0, label %dec_label_pc_117fc, label %bb

bb:                                               ; preds = %dec_label_pc_117e8
  br label %dec_label_pc_117dc

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117e8
  %v1_117fc = add i32 %v1_117e8, 1
  %v9_11800 = icmp eq i32 %v1_117fc, %arg4
  br i1 %v9_11800, label %dec_label_pc_11808, label %dec_label_pc_117dc

dec_label_pc_11808:                               ; preds = %dec_label_pc_117fc
  %v1_11808 = add i32 %v0_11808, 1
  br label %dec_label_pc_117c0

; uselistorder directives
  uselistorder i32 %v1_117fc, { 1, 0 }
  uselistorder i32 %v1_117e8, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_117dc, { 1, 0 }
  uselistorder label %dec_label_pc_117c0, { 3, 0, 1, 2 }
}

define i32 @function_11810(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11810:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11820

dec_label_pc_11820:                               ; preds = %.thread, %dec_label_pc_11834, %bb, %dec_label_pc_11810
  %v0_11820 = phi i32 [ %tmp, %dec_label_pc_11810 ], [ %v5_11820, %bb ], [ %v5_11820, %dec_label_pc_11834 ], [ %v5_11820, %.thread ]
  %v1_11820 = inttoptr i32 %v0_11820 to i8*
  %v2_11820 = load i8, i8* %v1_11820, align 1
  %v3_11820 = zext i8 %v2_11820 to i32
  %v5_11820 = add i32 %v0_11820, 1
  store i32 %v5_11820, i32* %r5.global-to-local, align 4
  %v7_11824 = icmp eq i8 %v2_11820, 9
  br i1 %v7_11824, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11820
  store i32 %v3_11820, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11820

bb:                                               ; preds = %dec_label_pc_11820
  %v8_11828 = icmp eq i8 %v2_11820, 32
  store i32 %v3_11820, i32* %r4.global-to-local, align 4
  br i1 %v8_11828, label %dec_label_pc_11820, label %dec_label_pc_11834

dec_label_pc_11834:                               ; preds = %bb
  %v7_11834 = icmp eq i8 %v2_11820, 10
  br i1 %v7_11834, label %dec_label_pc_11820, label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_11834
  %v7_1183c = icmp eq i8 %v2_11820, 45
  br i1 %v7_1183c, label %dec_label_pc_1192c, label %dec_label_pc_11844

dec_label_pc_11844:                               ; preds = %dec_label_pc_1183c
  %v7_11844 = icmp eq i8 %v2_11820, 43
  br i1 %v7_11844, label %bb44, label %dec_label_pc_11854

bb44:                                             ; preds = %dec_label_pc_11844
  %v2_11848 = inttoptr i32 %v5_11820 to i8*
  %v3_11848 = load i8, i8* %v2_11848, align 1
  %v4_11848 = zext i8 %v3_11848 to i32
  store i32 %v4_11848, i32* %r4.global-to-local, align 4
  %v6_11848 = add i32 %v0_11820, 2
  store i32 %v6_11848, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %bb44, %dec_label_pc_11844, %dec_label_pc_1192c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_1192c ], [ 2147483647, %dec_label_pc_11844 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_1192c ], [ 0, %dec_label_pc_11844 ], [ 0, %bb44 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_1185c = call i32 @function_11d44(i32 %storemerge1, i32 %arg2)
  store i32 %storemerge1, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_11868 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11868, i32* @r1, align 4
  %v0_1186c = call i32 @function_11c48()
  %v0_1187c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1187c.outer

dec_label_pc_1187c.outer:                         ; preds = %.thread5, %dec_label_pc_11854
  %v2_118f8.ph = phi i32 [ %v5_118f8, %.thread5 ], [ 0, %dec_label_pc_11854 ]
  %v1_118bc.ph = phi i32 [ %v4_118fc, %.thread5 ], [ %v0_1187c.pre, %dec_label_pc_11854 ]
  %v1_118d4.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_11854 ]
  %v3_118c8 = icmp uge i32 %v2_118f8.ph, %v0_1186c
  %v9_118c8 = icmp eq i32 %v2_118f8.ph, %v0_1186c
  %v2_118cc = xor i1 %v3_118c8, true
  %v3_118cc = or i1 %v9_118c8, %v2_118cc
  %v2_118d0 = xor i1 %v9_118c8, true
  %v3_118d0 = and i1 %v3_118c8, %v2_118d0
  %v2_118f0 = icmp eq i1 %v9_118c8, false
  br label %dec_label_pc_1187c

dec_label_pc_1187c:                               ; preds = %dec_label_pc_1187c.outer, %dec_label_pc_11904
  %v1_118d4 = phi i32 [ -1, %dec_label_pc_11904 ], [ %v1_118d4.ph, %dec_label_pc_1187c.outer ]
  %v1_118bc = phi i32 [ %v3_11904, %dec_label_pc_11904 ], [ %v1_118bc.ph, %dec_label_pc_1187c.outer ]
  %v1_1187c = urem i32 %v1_118bc, 256
  %v1_11880 = add nsw i32 %v1_1187c, -48
  %v1_11888 = add nsw i32 %v1_1187c, -97
  %v1_1188c = add i32 %v1_118bc, -48
  %v1_11890 = add nsw i32 %v1_1187c, -65
  %tmp75 = icmp ult i32 %v1_11880, 10
  br i1 %tmp75, label %dec_label_pc_118c0, label %dec_label_pc_11898

dec_label_pc_11898:                               ; preds = %dec_label_pc_1187c
  %v2_11898 = icmp ugt i32 %v1_11890, 24
  %v7_11898 = icmp eq i32 %v1_11890, 25
  %v2_1189c = xor i1 %v7_11898, true
  %v3_1189c = and i1 %v2_11898, %v2_1189c
  br i1 %v3_1189c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_11898
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_11898, %bb45
  %v0_118b014 = phi i32 [ %v1_1188c, %dec_label_pc_11898 ], [ 0, %bb45 ]
  %v2_118a0 = xor i1 %v2_11898, true
  %v3_118a0 = or i1 %v7_11898, %v2_118a0
  br i1 %v3_118a0, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_118b0 = phi i32 [ %v0_118b014, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_1189c, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_118a8 = icmp ugt i32 %v1_11888, 24
  %v11_118a8 = icmp eq i32 %v1_11888, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_118ac = phi i1 [ %v7_11898, %bb48 ], [ %v11_118a8, %bb49 ]
  %v0_118ac = phi i1 [ %v2_11898, %bb48 ], [ %v6_118a8, %bb49 ]
  %v2_118ac = xor i1 %v1_118ac, true
  %v3_118ac = and i1 %v0_118ac, %v2_118ac
  br i1 %v3_118ac, label %dec_label_pc_11910, label %dec_label_pc_118b0

dec_label_pc_118b0:                               ; preds = %bb50
  %v2_118b0 = icmp eq i32 %v0_118b0, 0
  %. = select i1 %v2_118b0, i32 87, i32 55
  %v2_118bc = sub i32 %v1_118bc, %.
  br label %dec_label_pc_118c0

dec_label_pc_118c0:                               ; preds = %dec_label_pc_1187c, %dec_label_pc_118b0
  %v0_118d429 = phi i32 [ %v1_11890, %dec_label_pc_1187c ], [ %., %dec_label_pc_118b0 ]
  %v3_118f8 = phi i32 [ %v1_1188c, %dec_label_pc_1187c ], [ %v2_118bc, %dec_label_pc_118b0 ]
  %v1_118c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_118c0 = sub i32 %v3_118f8, %v1_118c0
  %v4_118c0 = xor i32 %v1_118c0, %v3_118f8
  %v5_118c0 = xor i32 %v2_118c0, %v3_118f8
  %v6_118c0 = and i32 %v5_118c0, %v4_118c0
  %v7_118c0 = icmp slt i32 %v6_118c0, 0
  %v8_118c0 = icmp slt i32 %v2_118c0, 0
  %v2_118c4 = xor i1 %v8_118c0, %v7_118c0
  br i1 %v2_118c4, label %dec_label_pc_118c8, label %dec_label_pc_11910

dec_label_pc_118c8:                               ; preds = %dec_label_pc_118c0
  br i1 %v3_118cc, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_118c8
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_118c8, %bb53
  %v0_118d428 = phi i32 [ %v0_118d429, %dec_label_pc_118c8 ], [ 0, %bb53 ]
  br i1 %v3_118d0, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_118d4 = phi i32 [ %v0_118d428, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_118d4, 0
  %v4_118d4 = zext i1 %tmp76 to i32
  %v5_118d4 = or i32 %v0_118d4, %v4_118d4
  %v7_118d4 = icmp eq i32 %v5_118d4, 0
  br i1 %v7_118d4, label %dec_label_pc_118dc, label %dec_label_pc_11904

dec_label_pc_118dc:                               ; preds = %bb56
  %v1_118e8 = load i32, i32* %r8.global-to-local, align 4
  %v2_118e8 = sub i32 %v3_118f8, %v1_118e8
  %v4_118e8 = xor i32 %v1_118e8, %v3_118f8
  %v5_118e8 = xor i32 %v2_118e8, %v3_118f8
  %v6_118e8 = and i32 %v5_118e8, %v4_118e8
  %v7_118e8 = icmp slt i32 %v6_118e8, 0
  %v8_118e8 = icmp slt i32 %v2_118e8, 0
  %v9_118e8 = icmp eq i32 %v3_118f8, %v1_118e8
  %v3_118ec = xor i1 %v8_118e8, %v7_118e8
  %v4_118ec = or i1 %v9_118e8, %v3_118ec
  br i1 %v4_118ec, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_118dc
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_118dc
  br i1 %v2_118f0, label %.thread5, label %dec_label_pc_11904

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_118f8 = mul i32 %v1_118c0, %v2_118f8.ph
  %v5_118f8 = add i32 %v4_118f8, %v3_118f8
  %v1_118fc = load i32, i32* %r5.global-to-local, align 4
  %v2_118fc = inttoptr i32 %v1_118fc to i8*
  %v3_118fc = load i8, i8* %v2_118fc, align 1
  %v4_118fc = zext i8 %v3_118fc to i32
  store i32 %v4_118fc, i32* %r4.global-to-local, align 4
  %v6_118fc = add i32 %v1_118fc, 1
  store i32 %v6_118fc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1187c.outer

dec_label_pc_11904:                               ; preds = %thread-pre-split, %bb56
  %v0_11904 = load i32, i32* %r5.global-to-local, align 4
  %v1_11904 = inttoptr i32 %v0_11904 to i8*
  %v2_11904 = load i8, i8* %v1_11904, align 1
  %v3_11904 = zext i8 %v2_11904 to i32
  store i32 %v3_11904, i32* %r4.global-to-local, align 4
  %v5_11904 = add i32 %v0_11904, 1
  store i32 %v5_11904, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1187c

dec_label_pc_11910:                               ; preds = %dec_label_pc_118c0, %bb50
  %v1_11910 = icmp slt i32 %v1_118d4, 0
  %v0_1193c = load i32, i32* %sl.global-to-local, align 4
  %v2_1193c = icmp eq i32 %v0_1193c, 0
  br i1 %v1_11910, label %dec_label_pc_1193c, label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %dec_label_pc_11910
  br i1 %v2_1193c, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_11918
  %v2_1191c = sub i32 0, %v2_118f8.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_11918, %bb59
  %v1_11928 = phi i32 [ -2147483648, %bb61 ], [ %v2_118f8.ph, %dec_label_pc_11918 ], [ %v2_1191c, %bb59 ], [ 2147483647, %.thread32 ]
  ret i32 %v1_11928

dec_label_pc_1192c:                               ; preds = %dec_label_pc_1183c
  %v1_1192c = inttoptr i32 %v5_11820 to i8*
  %v2_1192c = load i8, i8* %v1_1192c, align 1
  %v3_1192c = zext i8 %v2_1192c to i32
  store i32 %v3_1192c, i32* %r4.global-to-local, align 4
  %v5_1192c = add i32 %v0_11820, 2
  store i32 %v5_1192c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11854

dec_label_pc_1193c:                               ; preds = %dec_label_pc_11910
  br i1 %v2_1193c, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_1193c
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_1193c
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_1193c, { 1, 0 }
  uselistorder i32 %v3_11904, { 1, 0 }
  uselistorder i32 %v4_118fc, { 1, 0 }
  uselistorder i32 %v2_118e8, { 1, 0 }
  uselistorder i32 %v1_118e8, { 1, 0, 2 }
  uselistorder i32 %v2_118c0, { 1, 0 }
  uselistorder i32 %v3_118f8, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_11898, { 1, 2, 0 }
  uselistorder i1 %v2_11898, { 1, 0, 2 }
  uselistorder i32 %v1_1187c, { 1, 2, 0 }
  uselistorder i32 %v1_118bc, { 1, 2, 0 }
  uselistorder i32 %v1_118d4, { 1, 0 }
  uselistorder i1 %v9_118c8, { 1, 0, 2 }
  uselistorder i1 %v3_118c8, { 1, 0 }
  uselistorder i32 %v2_118f8.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_1186c, { 1, 0 }
  uselistorder i32 %v5_11820, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_11820, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 5, 4, 6, 0 }
  uselistorder i32 25, { 13, 14, 8, 2, 3, 0, 9, 4, 10, 1, 11, 5, 6, 12, 7, 15 }
  uselistorder i32 24, { 32, 33, 6, 5, 50, 51, 43, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 7, 8, 9, 10, 11, 12, 13, 14, 15, 58, 16, 17, 0, 18, 19, 20, 1, 21, 22, 2, 23, 24, 59, 25, 3, 60, 26, 61, 62, 63, 64, 27, 28, 4, 65, 29, 66, 30, 56, 31, 57 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_118c0, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_1187c, { 1, 0 }
  uselistorder label %dec_label_pc_11854, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11820, { 1, 2, 0, 3 }
}

define i32 @function_1194c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1194c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1194c = load i32, i32* @r4, align 4
  store i32 %v3_1194c, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r7.global-to-local, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v4_1197012 = call i32 @read(i32 %arg3, i32* %arg1, i32 1)
  %v7_1197414 = icmp eq i32 %v4_1197012, 1
  br i1 %v7_1197414, label %dec_label_pc_1197c, label %dec_label_pc_11994

dec_label_pc_1197c:                               ; preds = %dec_label_pc_1194c, %dec_label_pc_11988.dec_label_pc_11964_crit_edge
  %v0_1197c16 = phi i32 [ %v0_1197c, %dec_label_pc_11988.dec_label_pc_11964_crit_edge ], [ 0, %dec_label_pc_1194c ]
  %v1_1197c = add i32 %v0_1197c16, 1
  store i32 %v1_1197c, i32* %r5.global-to-local, align 4
  %v1_11980 = load i32, i32* %r8.global-to-local, align 4
  %v6_11984 = icmp slt i32 %v1_1197c, %v1_11980
  br i1 %v6_11984, label %dec_label_pc_11988, label %.loopexit

dec_label_pc_11988:                               ; preds = %dec_label_pc_1197c
  %v0_11988 = load i32, i32* %r4.global-to-local, align 4
  %v1_11988 = inttoptr i32 %v0_11988 to i8*
  %v2_11988 = load i8, i8* %v1_11988, align 1
  %v5_11988 = add i32 %v0_11988, 1
  store i32 %v5_11988, i32* %r4.global-to-local, align 4
  %v7_1198c = icmp eq i8 %v2_11988, 10
  br i1 %v7_1198c, label %dec_label_pc_11994, label %dec_label_pc_11988.dec_label_pc_11964_crit_edge

dec_label_pc_11988.dec_label_pc_11964_crit_edge:  ; preds = %dec_label_pc_11988
  %v0_11968.pre = load i32, i32* %r6.global-to-local, align 4
  %v3_11970 = inttoptr i32 %v5_11988 to i32*
  %v4_11970 = call i32 @read(i32 %v0_11968.pre, i32* %v3_11970, i32 1)
  %v7_11974 = icmp eq i32 %v4_11970, 1
  %v0_1197c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11974, label %dec_label_pc_1197c, label %dec_label_pc_11994

dec_label_pc_11994:                               ; preds = %dec_label_pc_11988, %dec_label_pc_11988.dec_label_pc_11964_crit_edge, %dec_label_pc_1194c
  %v0_11994 = phi i32 [ 0, %dec_label_pc_1194c ], [ %v0_1197c, %dec_label_pc_11988.dec_label_pc_11964_crit_edge ], [ %v1_1197c, %dec_label_pc_11988 ]
  %v2_11994 = icmp eq i32 %v0_11994, 0
  br i1 %v2_11994, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_11994
  store i32 0, i32* %r7.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_1197c, %dec_label_pc_11994, %bb
  %v0_1199c = load i32, i32* %r7.global-to-local, align 4
  %v2_119a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_119a0, i32* @r4, align 4
  ret i32 %v0_1199c

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder i8 10, { 1, 0 }
  uselistorder i32 (i32, i32*, i32)* @read, { 4, 0, 2, 1, 3, 5 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11994, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1197c, { 1, 0 }
}

define i32 @function_119a8() local_unnamed_addr {
dec_label_pc_119a8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_119b8 = call i32* @__errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %v0_119b8, align 4
  %v3_119d0 = call i32 @socket(i32 2, i32 0, i32 0)
  %v2_119d4 = icmp eq i32 %v3_119d0, -1
  store i32 %v3_119d0, i32* %r5.global-to-local, align 4
  br i1 %v2_119d4, label %bb, label %dec_label_pc_119e4

bb:                                               ; preds = %dec_label_pc_119a8
  %v1_119dc = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a30

dec_label_pc_119e4:                               ; preds = %dec_label_pc_119a8
  %v2_119f0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_119f0, i32* %r4.global-to-local, align 4
  %v0_119fc = load i32, i32* %r6.global-to-local, align 4
  %v1_119fc = inttoptr i32 %v0_119fc to %sockaddr*
  store i32 2, i32* %stack_var_-36, align 4
  %v6_11a10 = call i32 @connect(i32 %v2_119f0, %sockaddr* %v1_119fc, i32 %v0_119fc)
  %tmp11 = bitcast i32* %stack_var_-36 to %sockaddr*
  %v0_11a1c = load i32, i32* %r5.global-to-local, align 4
  %v6_11a20 = call i32 @getsockname(i32 %v0_11a1c, %sockaddr* %tmp11, i32* nonnull %stack_var_-20)
  %v1_11a28 = call i32 @close(i32 %v0_11a1c)
  br label %dec_label_pc_11a30

dec_label_pc_11a30:                               ; preds = %bb, %dec_label_pc_119e4
  %storemerge = phi i32 [ 134744072, %dec_label_pc_119e4 ], [ %v1_119dc, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 (i32)* @close, { 0, 14, 23, 22, 13, 2, 1, 12, 11, 32, 10, 9, 26, 25, 24, 5, 4, 3, 31, 30, 29, 28, 27, 8, 7, 6, 16, 20, 19, 18, 17, 15, 21, 33 }
  uselistorder i32 (i32, %sockaddr*, i32)* @connect, { 5, 8, 9, 7, 0, 4, 2, 6, 3, 1, 10 }
  uselistorder i32 (i32, i32, i32)* @socket, { 10, 26, 25, 9, 11, 12, 16, 14, 13, 21, 20, 19, 18, 2, 1, 0, 17, 15, 24, 23, 22, 5, 4, 3, 8, 7, 6, 27 }
  uselistorder i32* ()* @__errno_location, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_11a30, { 1, 0 }
}

define i32 @function_11a3c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a3c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_11a40 = load i8, i8* %tmp, align 1
  %v2_11a44 = icmp eq i8 %v3_11a40, 0
  br i1 %v2_11a44, label %bb, label %dec_label_pc_11a58

bb:                                               ; preds = %dec_label_pc_11a3c
  %v4_11a40 = zext i8 %v3_11a40 to i32
  br label %dec_label_pc_11a6c

dec_label_pc_11a58:                               ; preds = %dec_label_pc_11a3c
  br label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a5c, %dec_label_pc_11a58
  %v0_11a5c = phi i32 [ %v1_11a5c, %dec_label_pc_11a5c ], [ 0, %dec_label_pc_11a58 ]
  %v1_11a5c = add i32 %v0_11a5c, 1
  %v2_11a60 = add i32 %v1_11a5c, %arg2
  %v3_11a60 = inttoptr i32 %v2_11a60 to i8*
  %v4_11a60 = load i8, i8* %v3_11a60, align 1
  %v2_11a64 = icmp eq i8 %v4_11a60, 0
  br i1 %v2_11a64, label %dec_label_pc_11a6c, label %dec_label_pc_11a5c

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a5c, %bb
  %v0_11ab021 = phi i32 [ %v4_11a40, %bb ], [ %v1_11a5c, %dec_label_pc_11a5c ]
  %v0_11a742 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_11a742, 1
  br i1 %tmp29, label %dec_label_pc_11ac4, label %dec_label_pc_11a80

dec_label_pc_11a80:                               ; preds = %dec_label_pc_11a6c, %dec_label_pc_11a74.backedge
  %v0_11a78.in = phi i32 [ %v0_11a78, %dec_label_pc_11a74.backedge ], [ %v0_11a742, %dec_label_pc_11a6c ]
  %v1_11a8c = phi i32 [ %v1_11a8c15, %dec_label_pc_11a74.backedge ], [ 0, %dec_label_pc_11a6c ]
  %v0_11a80 = phi i32 [ %v5_11a80, %dec_label_pc_11a74.backedge ], [ %tmp23, %dec_label_pc_11a6c ]
  %v0_11a78 = add i32 %v0_11a78.in, -1
  %v1_11a80 = inttoptr i32 %v0_11a80 to i8*
  %v2_11a80 = load i8, i8* %v1_11a80, align 1
  %v3_11a80 = zext i8 %v2_11a80 to i32
  %v5_11a80 = add i32 %v0_11a80, 1
  %v1_11a84 = add nsw i32 %v3_11a80, -65
  %v2_11a8c = add i32 %v1_11a8c, %arg2
  %v3_11a8c = inttoptr i32 %v2_11a8c to i8*
  %v4_11a8c = load i8, i8* %v3_11a8c, align 1
  %v6_11a8c = zext i8 %v4_11a8c to i32
  %v1_11a90 = add nsw i32 %v6_11a8c, -65
  %tmp38 = icmp ult i32 %v1_11a84, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_11a80
  %v5_11a94 = or i32 %v3_11a80, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_11a80, %bb30
  %v0_11aa0 = phi i32 [ %v3_11a80, %dec_label_pc_11a80 ], [ %v5_11a94, %bb30 ]
  %tmp39 = icmp ult i32 %v1_11a90, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_11a9c = or i32 %v6_11a8c, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_11aa0 = phi i32 [ %v6_11a8c, %bb31 ], [ %v5_11a9c, %bb32 ]
  %v9_11aa0 = icmp eq i32 %v0_11aa0, %v1_11aa0
  br i1 %v9_11aa0, label %dec_label_pc_11aac, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_11a74.backedge

dec_label_pc_11a74.backedge:                      ; preds = %bb34, %dec_label_pc_11aac
  %v1_11a8c15 = phi i32 [ 0, %bb34 ], [ %v1_11aac, %dec_label_pc_11aac ]
  %tmp35 = icmp slt i32 %v0_11a78, 1
  br i1 %tmp35, label %dec_label_pc_11ac4, label %dec_label_pc_11a80

dec_label_pc_11aac:                               ; preds = %bb33
  %v1_11aac = add i32 %v1_11a8c, 1
  %v9_11ab0 = icmp eq i32 %v0_11ab021, %v1_11aac
  br i1 %v9_11ab0, label %dec_label_pc_11ab8, label %dec_label_pc_11a74.backedge

dec_label_pc_11ab8:                               ; preds = %dec_label_pc_11aac
  %v2_11ab8 = sub i32 %v5_11a80, %tmp23
  br label %dec_label_pc_11ac4

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11a74.backedge, %dec_label_pc_11a6c, %dec_label_pc_11ab8
  %storemerge = phi i32 [ %v2_11ab8, %dec_label_pc_11ab8 ], [ -1, %dec_label_pc_11a6c ], [ -1, %dec_label_pc_11a74.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11aac, { 1, 0 }
  uselistorder i32 %v0_11a80, { 1, 0 }
  uselistorder i32 %v1_11a8c, { 1, 0 }
  uselistorder i8 %v3_11a40, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 6, 3, 7, 4, 8 }
  uselistorder label %dec_label_pc_11ac4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a74.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_11a80, { 1, 0 }
}

define i32 @function_11acc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11acc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11acc = load i8, i8* %arg1, align 1
  %v2_11ad0 = icmp eq i8 %v2_11acc, 0
  br i1 %v2_11ad0, label %bb, label %dec_label_pc_11adc

bb:                                               ; preds = %dec_label_pc_11acc
  %v3_11acc = zext i8 %v2_11acc to i32
  br label %dec_label_pc_11af0

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11acc
  br label %dec_label_pc_11ae0

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11ae0, %dec_label_pc_11adc
  %v0_11ae0 = phi i32 [ %v1_11ae0, %dec_label_pc_11ae0 ], [ 0, %dec_label_pc_11adc ]
  %v1_11ae0 = add i32 %v0_11ae0, 1
  %v2_11ae4 = add i32 %v1_11ae0, %tmp
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i8*
  %v4_11ae4 = load i8, i8* %v3_11ae4, align 1
  %v2_11ae8 = icmp eq i8 %v4_11ae4, 0
  br i1 %v2_11ae8, label %dec_label_pc_11af0, label %dec_label_pc_11ae0

dec_label_pc_11af0:                               ; preds = %dec_label_pc_11ae0, %bb
  %v0_11b3c3 = phi i32 [ %v3_11acc, %bb ], [ %v1_11ae0, %dec_label_pc_11ae0 ]
  %v1_11af0 = inttoptr i32 %arg2 to i8*
  %v2_11af0 = load i8, i8* %v1_11af0, align 1
  %v2_11af4 = icmp eq i8 %v2_11af0, 0
  br i1 %v2_11af4, label %bb21, label %dec_label_pc_11b00

bb21:                                             ; preds = %dec_label_pc_11af0
  %v3_11af0 = zext i8 %v2_11af0 to i32
  br label %dec_label_pc_11b14

dec_label_pc_11b00:                               ; preds = %dec_label_pc_11af0
  br label %dec_label_pc_11b04

dec_label_pc_11b04:                               ; preds = %dec_label_pc_11b04, %dec_label_pc_11b00
  %v0_11b04 = phi i32 [ %v1_11b04, %dec_label_pc_11b04 ], [ 0, %dec_label_pc_11b00 ]
  %v1_11b04 = add i32 %v0_11b04, 1
  %v2_11b08 = add i32 %v1_11b04, %arg2
  %v3_11b08 = inttoptr i32 %v2_11b08 to i8*
  %v4_11b08 = load i8, i8* %v3_11b08, align 1
  %v2_11b0c = icmp eq i8 %v4_11b08, 0
  br i1 %v2_11b0c, label %dec_label_pc_11b14, label %dec_label_pc_11b04

dec_label_pc_11b14:                               ; preds = %dec_label_pc_11b04, %bb21
  %v0_11b14 = phi i32 [ %v3_11af0, %bb21 ], [ %v1_11b04, %dec_label_pc_11b04 ]
  %v9_11b14 = icmp eq i32 %v0_11b14, %v0_11b3c3
  br i1 %v9_11b14, label %dec_label_pc_11b3c.preheader, label %dec_label_pc_11b1c

dec_label_pc_11b3c.preheader:                     ; preds = %dec_label_pc_11b14
  %v2_11b3c5 = icmp eq i32 %v0_11b3c3, 0
  br i1 %v2_11b3c5, label %dec_label_pc_11b44, label %dec_label_pc_11b24

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11b24, %dec_label_pc_11b14
  ret i32 0

dec_label_pc_11b24:                               ; preds = %dec_label_pc_11b34, %dec_label_pc_11b3c.preheader
  %v0_11b3c.in = phi i32 [ %v0_11b3c, %dec_label_pc_11b34 ], [ %v0_11b3c3, %dec_label_pc_11b3c.preheader ]
  %v0_11b38 = phi i32 [ %v1_11b38, %dec_label_pc_11b34 ], [ %arg2, %dec_label_pc_11b3c.preheader ]
  %v0_11b34 = phi i32 [ %v1_11b34, %dec_label_pc_11b34 ], [ %tmp, %dec_label_pc_11b3c.preheader ]
  %v0_11b3c = add i32 %v0_11b3c.in, -1
  %v1_11b24 = inttoptr i32 %v0_11b34 to i8*
  %v2_11b24 = load i8, i8* %v1_11b24, align 1
  %v1_11b28 = inttoptr i32 %v0_11b38 to i8*
  %v2_11b28 = load i8, i8* %v1_11b28, align 1
  %v9_11b2c = icmp eq i8 %v2_11b24, %v2_11b28
  br i1 %v9_11b2c, label %dec_label_pc_11b34, label %dec_label_pc_11b1c

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b24
  %v1_11b34 = add i32 %v0_11b34, 1
  %v1_11b38 = add i32 %v0_11b38, 1
  %v2_11b3c = icmp eq i32 %v0_11b3c, 0
  br i1 %v2_11b3c, label %dec_label_pc_11b44, label %dec_label_pc_11b24

dec_label_pc_11b44:                               ; preds = %dec_label_pc_11b34, %dec_label_pc_11b3c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_11af0, { 1, 0 }
  uselistorder i8 %v2_11acc, { 1, 0 }
}

define i32 @function_11b4c(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b4c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_11b50 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11b50, i32* %r8.global-to-local, align 4
  %v2_11b50 = icmp eq i32 %v0_11b50, 0
  store i1 %v2_11b50, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_11b50, label %dec_label_pc_11c30, label %dec_label_pc_11b60

dec_label_pc_11b60:                               ; preds = %dec_label_pc_11b4c
  %v3_11b60 = icmp eq i8 %arg1, 0
  store i1 %v3_11b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11b60, label %.thread, label %dec_label_pc_11b74

.thread:                                          ; preds = %dec_label_pc_11b60
  %v4_11b68 = inttoptr i32 %v0_11b50 to i8*
  store i8 48, i8* %v4_11b68, align 1
  %v0_11b6c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11b6c.pr.pr, label %.thread1, label %dec_label_pc_11b74

.thread1:                                         ; preds = %.thread
  %v4_11b6c = load i32, i32* %r8.global-to-local, align 4
  %v5_11b6c = add i32 %v4_11b6c, 1
  %v6_11b6c = inttoptr i32 %v5_11b6c to i8*
  store i8 0, i8* %v6_11b6c, align 1
  %v0_11b70.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11b70.pr.pr, label %dec_label_pc_11c30, label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %dec_label_pc_11b60, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_11b78 = icmp eq i32 %arg2, 10
  store i1 %v7_11b78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b78, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_11b74
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_11b74
  %v4_11b74 = zext i1 %tmp47 to i32
  store i32 %v4_11b74, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_11b988 = sub nsw i32 0, %tmp
  %tmp.v3_11b988 = select i1 %phitmp, i32 %tmp, i32 %v3_11b988
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_11b988, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* %r4.global-to-local, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_11ba4 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_11ba4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %bb45, %.thread6
  %v0_11ba8 = phi i32 [ %v0_11bcc, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_11ba8, i32* %r0.global-to-local, align 4
  %v0_11bac = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11bac, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_11ba8, 16777216
  %v1_11bb0 = sdiv i32 %sext, 16777216
  %v3_11bb0 = call i32 @function_11d44(i32 %v1_11bb0, i32 %v0_11bac)
  %v7_11bb4 = icmp eq i32 %v0_11bac, 9
  store i1 %v7_11bb4, i1* %cpsr_z.global-to-local, align 1
  %v1_11bb8 = add i32 %v0_11bac, 48
  %v0_11bbc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11bbc, i32* @r0, align 4
  %v7_11bc0 = icmp sgt i32 %v0_11bac, 9
  %extract.t = trunc i32 %v1_11bb8 to i8
  br i1 %v7_11bc0, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_11ba8
  %v9_11bc0 = add i32 %v0_11bac, 55
  %extract.t27 = trunc i32 %v9_11bc0 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_11ba8, %bb44
  %v0_11bc8.off0 = phi i8 [ %extract.t, %dec_label_pc_11ba8 ], [ %extract.t27, %bb44 ]
  %v0_11bc4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11bc4, i32* @r1, align 4
  %v2_11bc8 = load i32, i32* %r5.global-to-local, align 4
  %v3_11bc8 = load i32, i32* %r7.global-to-local, align 4
  %v4_11bc8 = add i32 %v3_11bc8, %v2_11bc8
  %v5_11bc8 = inttoptr i32 %v4_11bc8 to i8*
  store i8 %v0_11bc8.off0, i8* %v5_11bc8, align 1
  %v0_11bcc = call i32 @function_11c48()
  store i32 %v0_11bcc, i32* %r0.global-to-local, align 4
  store i32 %v0_11bcc, i32* %r4.global-to-local, align 4
  %v2_11bd0 = icmp eq i32 %v0_11bcc, 0
  store i1 %v2_11bd0, i1* %cpsr_z.global-to-local, align 1
  %v0_11bd4 = load i32, i32* %r5.global-to-local, align 4
  %v1_11bd4 = add i32 %v0_11bd4, -1
  store i32 %v1_11bd4, i32* %r5.global-to-local, align 4
  br i1 %v2_11bd0, label %dec_label_pc_11bdc, label %dec_label_pc_11ba8

dec_label_pc_11bdc:                               ; preds = %bb45
  %v0_11bdc = load i32, i32* %sl.global-to-local, align 4
  %v2_11bdc = icmp eq i32 %v0_11bdc, 0
  store i1 %v2_11bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11bdc, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_11bdc
  %v3_11be0 = ptrtoint i32* %stack_var_-32 to i32
  %v3_11be4 = add i32 %v1_11bd4, %v3_11be0
  store i32 %v3_11be4, i32* %r2.global-to-local, align 4
  %v4_11bec = add i32 %v3_11be4, -34
  %v5_11bec = inttoptr i32 %v4_11bec to i8*
  store i8 45, i8* %v5_11bec, align 1
  %v0_11bf0.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_11bf0.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_11bf0.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_11bdc
  %v1_11bf0 = phi i32 [ %v1_11bd4, %dec_label_pc_11bdc ], [ %v1_11bf0.pre, %.thread11 ]
  %v2_11bf0 = add i32 %v1_11bf0, 1
  store i32 %v2_11bf0, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_11bfc = phi i32 [ %v2_11bf0, %.thread12 ], [ %v1_11bf0.pre, %.thread11 ]
  %v0_11bf4 = load i32, i32* %r7.global-to-local, align 4
  %v2_11bf4 = add i32 %v0_11bf4, %v1_11bfc
  %v3_11bf4 = inttoptr i32 %v2_11bf4 to i8*
  %v4_11bf4 = load i8, i8* %v3_11bf4, align 1
  %v6_11bf4 = zext i8 %v4_11bf4 to i32
  %v2_11bf8 = icmp eq i8 %v4_11bf4, 0
  store i1 %v2_11bf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11bf4, i32* %r2.global-to-local, align 4
  br i1 %v2_11bf8, label %dec_label_pc_11c40, label %dec_label_pc_11c08.preheader

dec_label_pc_11c08.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11c08

dec_label_pc_11c08:                               ; preds = %dec_label_pc_11c08.preheader, %dec_label_pc_11c08
  %v0_11c08 = phi i32 [ 0, %dec_label_pc_11c08.preheader ], [ %v1_11c08, %dec_label_pc_11c08 ]
  %v1_11c08 = add i32 %v0_11c08, 1
  store i32 %v1_11c08, i32* %r1.global-to-local, align 4
  %v2_11c0c = add i32 %v1_11c08, %v2_11bf4
  %v3_11c0c = inttoptr i32 %v2_11c0c to i8*
  %v4_11c0c = load i8, i8* %v3_11c0c, align 1
  %v2_11c10 = icmp eq i8 %v4_11c0c, 0
  store i1 %v2_11c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c10, label %dec_label_pc_11c18, label %dec_label_pc_11c08

dec_label_pc_11c18:                               ; preds = %dec_label_pc_11c08, %dec_label_pc_11c40
  %v0_11c1c24 = phi i32 [ %v6_11bf4, %dec_label_pc_11c40 ], [ %v1_11c08, %dec_label_pc_11c08 ]
  %v0_11c18 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11c18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c1c

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c1c.dec_label_pc_11c1c_crit_edge, %dec_label_pc_11c18
  %v2_11c28 = phi i32 [ %v5_11c28, %dec_label_pc_11c1c.dec_label_pc_11c1c_crit_edge ], [ %v0_11c18, %dec_label_pc_11c18 ]
  %v0_11c20 = phi i32 [ %v0_11c20.pre, %dec_label_pc_11c1c.dec_label_pc_11c1c_crit_edge ], [ %v2_11bf4, %dec_label_pc_11c18 ]
  %v0_11c1c = phi i32 [ %v0_11c1c.pre, %dec_label_pc_11c1c.dec_label_pc_11c1c_crit_edge ], [ %v0_11c1c24, %dec_label_pc_11c18 ]
  %v1_11c1c = add i32 %v0_11c1c, -1
  store i32 %v1_11c1c, i32* %r1.global-to-local, align 4
  %v1_11c20 = inttoptr i32 %v0_11c20 to i8*
  %v2_11c20 = load i8, i8* %v1_11c20, align 1
  %v5_11c20 = add i32 %v0_11c20, 1
  store i32 %v5_11c20, i32* %r2.global-to-local, align 4
  %v3_11c24 = icmp eq i32 %v0_11c1c, 0
  store i1 %v3_11c24, i1* %cpsr_z.global-to-local, align 1
  %v3_11c28 = inttoptr i32 %v2_11c28 to i8*
  store i8 %v2_11c20, i8* %v3_11c28, align 1
  %v4_11c28 = load i32, i32* %r0.global-to-local, align 4
  %v5_11c28 = add i32 %v4_11c28, 1
  store i32 %v5_11c28, i32* %r0.global-to-local, align 4
  br i1 %v3_11c24, label %dec_label_pc_11c30, label %dec_label_pc_11c1c.dec_label_pc_11c1c_crit_edge

dec_label_pc_11c1c.dec_label_pc_11c1c_crit_edge:  ; preds = %dec_label_pc_11c1c
  %v0_11c1c.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11c20.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11c1c

dec_label_pc_11c30:                               ; preds = %dec_label_pc_11c1c, %.thread1, %dec_label_pc_11b4c
  %v0_11c30 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11c30, i32* %r0.global-to-local, align 4
  ret i32 %v0_11c30

dec_label_pc_11c40:                               ; preds = %.thread11._crit_edge
  store i32 %v6_11bf4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11c18

; uselistorder directives
  uselistorder i32 %v5_11c28, { 1, 0 }
  uselistorder i1 %v3_11c24, { 1, 0 }
  uselistorder i32 %v0_11c20, { 1, 0 }
  uselistorder i32 %v1_11c08, { 0, 1, 3, 2 }
  uselistorder i32 %v6_11bf4, { 1, 0 }
  uselistorder i32 %v2_11bf4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11bf0.pre, { 1, 0 }
  uselistorder i32 %v1_11bd4, { 1, 0, 2 }
  uselistorder i32 %v0_11bcc, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11bac, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_11b50, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 9, 10, 11, 12 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 2, 1, 3, 0 }
  uselistorder i32 9, { 3, 39, 4, 5, 24, 7, 28, 8, 27, 9, 10, 11, 6, 29, 2, 25, 26, 30, 12, 31, 13, 32, 14, 33, 15, 34, 35, 16, 17, 18, 36, 37, 19, 38, 0, 20, 1, 21, 52, 40, 41, 22, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 51, 23 }
  uselistorder i32 (i32, i32)* @function_11d44, { 3, 0, 7, 6, 2, 5, 4, 1 }
  uselistorder i32 16777216, { 1, 0, 2, 3, 4, 5, 6, 8, 7, 10, 9, 12, 11, 13, 14, 17, 15, 18, 16, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 32, 30, 33, 31, 34, 35, 37, 36, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32 32, { 47, 36, 3, 2, 40, 37, 38, 39, 5, 4, 7, 6, 9, 8, 44, 11, 10, 43, 13, 12, 14, 16, 15, 18, 17, 19, 20, 22, 21, 45, 46, 23, 48, 24, 49, 25, 26, 27, 28, 41, 29, 30, 31, 42, 32, 0, 33, 1, 34, 35 }
  uselistorder i1 false, { 1, 14, 2, 26, 33, 32, 28, 25, 29, 18, 30, 27, 3, 4, 5, 6, 7, 17, 8, 16, 9, 15, 10, 11, 19, 20, 21, 12, 13, 0, 22, 23, 24, 31, 34 }
  uselistorder i32 10, { 32, 0, 6, 4, 25, 24, 7, 23, 8, 9, 10, 20, 3, 26, 21, 11, 2, 22, 27, 12, 28, 29, 30, 13, 14, 15, 31, 5, 33, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 16, 46, 47, 48, 17, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 54, 18, 60, 19 }
  uselistorder i8 0, { 10, 11, 0, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 27, 29, 26, 5, 28, 6, 30, 31, 25, 2, 32, 33, 34, 8, 35, 38, 9, 36, 37, 7, 39, 40, 41, 42, 43, 3, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c18, { 1, 0 }
  uselistorder label %dec_label_pc_11c08, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_11b74, { 2, 1, 0 }
}

define i32 @function_11c48() local_unnamed_addr {
dec_label_pc_11c48:
  %r2.global-to-local = alloca i32, align 4
  %v0_11c48 = load i32, i32* @r1, align 4
  %v1_11c48 = add i32 %v0_11c48, -1
  store i32 %v1_11c48, i32* %r2.global-to-local, align 4
  %v2_11c48 = icmp eq i32 %v0_11c48, 0
  %v7_11c48 = icmp eq i32 %v0_11c48, 1
  %v0_11c4c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_11c48, i32 %v0_11c4c)
  br i1 %v2_11c48, label %dec_label_pc_11d30, label %dec_label_pc_11c54

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c48
  %v0_11c54 = load i32, i32* @r0, align 4
  %v1_11c54 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_11c54, %v1_11c54
  br i1 %tmp, label %dec_label_pc_11c5c, label %dec_label_pc_11ce8

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c54
  %v1_11c5c = load i32, i32* %r2.global-to-local, align 4
  %v2_11c5c = and i32 %v1_11c5c, %v1_11c54
  %v4_11c5c = icmp eq i32 %v2_11c5c, 0
  br i1 %v4_11c5c, label %dec_label_pc_11cf4, label %dec_label_pc_11c64

dec_label_pc_11c64:                               ; preds = %dec_label_pc_11c5c
  %v3_11c64 = icmp ult i32 %v1_11c54, 536870912
  br i1 %v3_11c64, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11c64
  %v4_11c68 = mul i32 %v1_11c54, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11c64, %.thread
  %v0_11c88.pr36.ph = phi i32 [ %v4_11c68, %.thread ], [ %v1_11c54, %dec_label_pc_11c64 ]
  %storemerge113 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11c64 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_11c88.pr36 = phi i32 [ %v4_11c7c, %bb81 ], [ %v0_11c88.pr36.ph, %.preheader.preheader ]
  %v1_11c80 = phi i32 [ %v4_11c80, %bb81 ], [ %storemerge113, %.preheader.preheader ]
  %v2_11c74 = icmp ugt i32 %v0_11c88.pr36, 268435455
  br i1 %v2_11c74, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11c88thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_11c78 = icmp ult i32 %v0_11c88.pr36, %v0_11c54
  br i1 %v4_11c78, label %bb80, label %dec_label_pc_11c88thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_11c7c = and i32 %v0_11c88.pr36, 268435456
  %v3_11c7c = icmp eq i32 %v2_11c7c, 0
  %v4_11c7c = mul i32 %v0_11c88.pr36, 16
  br i1 %v3_11c7c, label %bb81, label %dec_label_pc_11c88.loopexit

bb81:                                             ; preds = %bb80
  %v2_11c80 = and i32 %v1_11c80, 268435456
  %v3_11c80 = icmp eq i32 %v2_11c80, 0
  %v4_11c80 = mul i32 %v1_11c80, 16
  br i1 %v3_11c80, label %.preheader, label %dec_label_pc_11c88thread-pre-split.loopexit.loopexit

dec_label_pc_11c88thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_11c9448.ph = phi i32 [ %v1_11c80, %bb ], [ %v4_11c80, %bb81 ]
  %v0_11c88.pr38.ph = phi i32 [ %v0_11c88.pr36, %bb ], [ %v4_11c7c, %bb81 ]
  br label %dec_label_pc_11c88thread-pre-split.loopexit

dec_label_pc_11c88thread-pre-split.loopexit:      ; preds = %dec_label_pc_11c88thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11c9448 = phi i32 [ %v1_11c80, %.thread2 ], [ %v1_11c9448.ph, %dec_label_pc_11c88thread-pre-split.loopexit.loopexit ]
  %v0_11c88.pr38 = phi i32 [ %v0_11c88.pr36, %.thread2 ], [ %v0_11c88.pr38.ph, %dec_label_pc_11c88thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11c88thread-pre-split

dec_label_pc_11c88thread-pre-split:               ; preds = %dec_label_pc_11c88thread-pre-split.loopexit, %bb83
  %v1_11c9446 = phi i32 [ %v1_11c9448, %dec_label_pc_11c88thread-pre-split.loopexit ], [ %v3_11c94, %bb83 ]
  %v0_11c88.pr = phi i32 [ %v0_11c88.pr38, %dec_label_pc_11c88thread-pre-split.loopexit ], [ %v3_11c90, %bb83 ]
  br label %dec_label_pc_11c88

dec_label_pc_11c88.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_11c88

dec_label_pc_11c88:                               ; preds = %dec_label_pc_11c88.loopexit, %dec_label_pc_11c88thread-pre-split
  %v1_11c94 = phi i32 [ %v1_11c9446, %dec_label_pc_11c88thread-pre-split ], [ %v1_11c80, %dec_label_pc_11c88.loopexit ]
  %v1_11c90 = phi i32 [ %v0_11c88.pr, %dec_label_pc_11c88thread-pre-split ], [ %v4_11c7c, %dec_label_pc_11c88.loopexit ]
  %v2_11c88 = icmp slt i32 %v1_11c90, 0
  br i1 %v2_11c88, label %dec_label_pc_11c9c, label %bb82

bb82:                                             ; preds = %dec_label_pc_11c88
  %v4_11c8c = icmp ult i32 %v1_11c90, %v0_11c54
  br i1 %v4_11c8c, label %bb83, label %dec_label_pc_11c9c

bb83:                                             ; preds = %bb82
  %v3_11c90 = mul i32 %v1_11c90, 2
  %v2_11c94 = icmp slt i32 %v1_11c94, 0
  %v3_11c94 = mul i32 %v1_11c94, 2
  br i1 %v2_11c94, label %dec_label_pc_11c9c, label %dec_label_pc_11c88thread-pre-split

dec_label_pc_11c9c:                               ; preds = %bb82, %dec_label_pc_11c88, %bb83
  %v2_11ca859 = phi i32 [ %v3_11c94, %bb83 ], [ %v1_11c94, %bb82 ], [ %v1_11c94, %dec_label_pc_11c88 ]
  %v1_11ca051 = phi i32 [ %v3_11c90, %bb83 ], [ %v1_11c90, %bb82 ], [ %v1_11c90, %dec_label_pc_11c88 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11ca0

dec_label_pc_11ca0:                               ; preds = %.thread11, %dec_label_pc_11c9c
  %v1_11cd4 = phi i32 [ %v4_11cd4, %.thread11 ], [ %v2_11ca859, %dec_label_pc_11c9c ]
  %v1_11ca8 = phi i32 [ %v0_11ce0, %.thread11 ], [ 0, %dec_label_pc_11c9c ]
  %v1_11cd8 = phi i32 [ %v4_11cd8, %.thread11 ], [ %v1_11ca051, %dec_label_pc_11c9c ]
  %v1_11ca4 = phi i32 [ %v0_11cd0, %.thread11 ], [ %v0_11c54, %dec_label_pc_11c9c ]
  %v3_11ca0 = icmp ult i32 %v1_11ca4, %v1_11cd8
  br i1 %v3_11ca0, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_11ca0
  %v3_11ca4 = sub i32 %v1_11ca4, %v1_11cd8
  %v3_11ca8 = or i32 %v1_11ca8, %v1_11cd4
  store i32 %v3_11ca8, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11ca0, %bb84
  %v1_11cb0 = phi i32 [ %v1_11ca4, %dec_label_pc_11ca0 ], [ %v3_11ca4, %bb84 ]
  %v1_11cb4 = phi i32 [ %v1_11ca8, %dec_label_pc_11ca0 ], [ %v3_11ca8, %bb84 ]
  %v4_11cac = udiv i32 %v1_11cd8, 2
  %v6_11cac = icmp ult i32 %v1_11cb0, %v4_11cac
  br i1 %v6_11cac, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_11cb0 = urem i32 %v1_11cd8, 2
  %v4_11cb0 = icmp eq i32 %v3_11cb0, 0
  %v6_11cb0 = sub i32 %v1_11cb0, %v4_11cac
  br i1 %v4_11cb0, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_11cb4 = udiv i32 %v1_11cd4, 2
  %v6_11cb4 = or i32 %v1_11cb4, %v5_11cb4
  store i32 %v6_11cb4, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_11cbc = phi i32 [ %v6_11cb0, %bb85 ], [ %v1_11cb0, %.thread7 ], [ %v6_11cb0, %bb86 ]
  %v1_11cc0 = phi i32 [ %v1_11cb4, %bb85 ], [ %v1_11cb4, %.thread7 ], [ %v6_11cb4, %bb86 ]
  %v4_11cb8 = udiv i32 %v1_11cd8, 4
  %v6_11cb8 = icmp ult i32 %v1_11cbc, %v4_11cb8
  br i1 %v6_11cb8, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_11cbc = and i32 %v1_11cd8, 2
  %v4_11cbc = icmp eq i32 %v3_11cbc, 0
  %v6_11cbc = sub i32 %v1_11cbc, %v4_11cb8
  br i1 %v4_11cbc, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11cc0 = udiv i32 %v1_11cd4, 4
  %v6_11cc0 = or i32 %v1_11cc0, %v5_11cc0
  store i32 %v6_11cc0, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_11cc8 = phi i32 [ %v6_11cbc, %bb87 ], [ %v1_11cbc, %.thread8 ], [ %v6_11cbc, %bb88 ]
  %v1_11ccc = phi i32 [ %v1_11cc0, %bb87 ], [ %v1_11cc0, %.thread8 ], [ %v6_11cc0, %bb88 ]
  %v4_11cc4 = udiv i32 %v1_11cd8, 8
  %v6_11cc4 = icmp ult i32 %v1_11cc8, %v4_11cc4
  br i1 %v6_11cc4, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_11cc8 = and i32 %v1_11cd8, 4
  %v4_11cc8 = icmp eq i32 %v3_11cc8, 0
  %v6_11cc8 = sub i32 %v1_11cc8, %v4_11cc4
  br i1 %v4_11cc8, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11ccc = udiv i32 %v1_11cd4, 8
  %v6_11ccc = or i32 %v1_11ccc, %v5_11ccc
  store i32 %v6_11ccc, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_11ce0 = phi i32 [ %v1_11ccc, %bb89 ], [ %v1_11ccc, %.thread9 ], [ %v6_11ccc, %bb90 ]
  %v0_11cd0 = phi i32 [ %v6_11cc8, %bb89 ], [ %v1_11cc8, %.thread9 ], [ %v6_11cc8, %bb90 ]
  %v2_11cd0 = icmp eq i32 %v0_11cd0, 0
  br i1 %v2_11cd0, label %dec_label_pc_11ce0, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp118 = icmp ult i32 %v1_11cd4, 16
  br i1 %tmp118, label %dec_label_pc_11ce0, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_11cd4 = udiv i32 %v1_11cd4, 16
  %v4_11cd8 = udiv i32 %v1_11cd8, 16
  br label %dec_label_pc_11ca0

dec_label_pc_11ce0:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_11ce0

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11c54
  %v9_11c54 = icmp eq i32 %v0_11c54, %v1_11c54
  %. = zext i1 %v9_11c54 to i32
  ret i32 %.

dec_label_pc_11cf4:                               ; preds = %dec_label_pc_11c5c
  %v2_11cf4 = icmp ugt i32 %v1_11c54, 65535
  br i1 %v2_11cf4, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_11cf4
  %v2_11cf8 = and i32 %v1_11c54, 32768
  %v3_11cf8 = icmp eq i32 %v2_11cf8, 0
  %v4_11cf8 = udiv i32 %v1_11c54, 65536
  br i1 %v3_11cf8, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_11cf4
  %v0_11d0465 = phi i32 [ %v1_11c54, %dec_label_pc_11cf4 ], [ %v4_11cf8, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_11d08 = phi i32 [ %v0_11d0465, %.thread16 ], [ %v4_11cf8, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11d04 = icmp ugt i32 %v1_11d08, 255
  br i1 %v2_11d04, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_11d08 = and i32 %v1_11d08, 128
  %v3_11d08 = icmp eq i32 %v2_11d08, 0
  %v4_11d08 = udiv i32 %v1_11d08, 256
  br i1 %v3_11d08, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_11d0c = or i32 %storemerge, 8
  store i32 %v2_11d0c, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_11d18 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_11d0c, %bb98 ]
  %v1_11d14 = phi i32 [ %v1_11d08, %bb96 ], [ %v4_11d08, %bb97 ], [ %v4_11d08, %bb98 ]
  %v2_11d10 = icmp ugt i32 %v1_11d14, 15
  br i1 %v2_11d10, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_11d14 = and i32 %v1_11d14, 8
  %v3_11d14 = icmp eq i32 %v2_11d14, 0
  %v4_11d14 = udiv i32 %v1_11d14, 16
  br i1 %v3_11d14, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_11d18 = add nsw i32 %v1_11d18, 4
  store i32 %v2_11d18, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_11d20 = phi i32 [ %v1_11d18, %.thread17 ], [ %v1_11d18, %bb99 ], [ %v2_11d18, %bb100 ]
  %v5_11d24 = phi i32 [ %v1_11d14, %.thread17 ], [ %v4_11d14, %bb99 ], [ %v4_11d14, %bb100 ]
  %v2_11d1c = icmp ugt i32 %v5_11d24, 3
  %v7_11d1c = icmp eq i32 %v5_11d24, 4
  %v2_11d20 = xor i1 %v7_11d1c, true
  %v3_11d20 = and i1 %v2_11d1c, %v2_11d20
  br i1 %v3_11d20, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_11d20 = add nsw i32 %v4_11d20, 3
  store i32 %v5_11d20, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_11d24 = phi i32 [ %v4_11d20, %.thread18 ], [ %v5_11d20, %bb101 ]
  %v2_11d24 = xor i1 %v2_11d1c, true
  %v3_11d24 = or i1 %v7_11d1c, %v2_11d24
  br i1 %v3_11d24, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_11d24 = udiv i32 %v5_11d24, 2
  %v9_11d24 = add i32 %v4_11d24, %v8_11d24
  store i32 %v9_11d24, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_11d28 = phi i32 [ %v4_11d24, %bb102 ], [ %v9_11d24, %bb103 ]
  %v6_11d28 = lshr i32 %v0_11c54, %v1_11d28
  ret i32 %v6_11d28

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11c48
  %v0_11d30 = load i32, i32* @lr, align 4
  %v0_11d34 = call i32 @function_11d5c()
  store i32 %v0_11d30, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11d24, { 1, 0 }
  uselistorder i1 %v7_11d1c, { 1, 0 }
  uselistorder i32 %v4_11d14, { 1, 0 }
  uselistorder i32 %v1_11d14, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11d0c, { 1, 0 }
  uselistorder i32 %v4_11d08, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11d08, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11cf8, { 1, 0 }
  uselistorder i32 %v0_11cd0, { 1, 0 }
  uselistorder i32 %v4_11cc4, { 1, 0 }
  uselistorder i32 %v1_11ccc, { 1, 2, 0 }
  uselistorder i32 %v4_11cb8, { 1, 0 }
  uselistorder i32 %v1_11cc0, { 1, 2, 0 }
  uselistorder i32 %v4_11cac, { 1, 0 }
  uselistorder i32 %v1_11cb4, { 1, 2, 0 }
  uselistorder i32 %v1_11cd8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11ca8, { 1, 0 }
  uselistorder i32 %v1_11cd4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11c94, { 1, 0 }
  uselistorder i32 %v3_11c90, { 1, 0 }
  uselistorder i32 %v1_11c90, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11c94, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11c80, { 1, 0 }
  uselistorder i32 %v4_11c7c, { 2, 1, 0 }
  uselistorder i32 %v1_11c80, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11c88.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_11c54, { 6, 1, 7, 8, 9, 3, 2, 5, 4, 0 }
  uselistorder i32 %v0_11c54, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11c48, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i1 true, { 0, 1, 48, 2, 3, 4, 5, 6, 53, 83, 101, 38, 49, 55, 87, 58, 57, 56, 7, 10, 82, 47, 54, 84, 85, 86, 72, 88, 89, 90, 91, 92, 11, 12, 43, 44, 93, 94, 95, 96, 73, 97, 98, 8, 9, 99, 100, 71, 70, 13, 14, 15, 102, 16, 17, 59, 60, 66, 61, 67, 62, 65, 103, 63, 69, 104, 18, 105, 19, 39, 40, 106, 74, 75, 41, 107, 42, 108, 20, 21, 109, 76, 77, 22, 23, 110, 78, 79, 24, 25, 111, 80, 81, 26, 27, 52, 112, 113, 68, 114, 28, 45, 46, 64, 29, 30, 50, 31, 32, 51, 33, 34, 35, 36, 37 }
  uselistorder i32 3, { 93, 59, 36, 22, 39, 25, 60, 23, 61, 1, 62, 63, 64, 37, 40, 41, 3, 65, 24, 66, 42, 67, 38, 68, 43, 69, 44, 70, 26, 45, 46, 0, 71, 72, 47, 5, 4, 48, 74, 27, 75, 7, 6, 49, 28, 76, 9, 8, 50, 77, 29, 78, 79, 11, 10, 51, 80, 30, 81, 13, 12, 52, 82, 31, 83, 54, 84, 15, 14, 53, 85, 32, 86, 56, 87, 17, 16, 55, 88, 33, 89, 19, 18, 57, 90, 34, 91, 21, 20, 58, 94, 35, 95, 92, 2, 73 }
  uselistorder i32 15, { 25, 26, 4, 27, 5, 28, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 0, 16, 17, 18, 19, 20, 21, 22, 23, 29, 24, 30, 2, 31, 3, 32 }
  uselistorder i32 256, { 3, 4, 6, 7, 8, 5, 10, 11, 12, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 25, 24, 27, 28, 29, 30, 243, 31, 32, 33, 34, 35, 244, 36, 37, 38, 39, 245, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 53, 246, 54, 247, 63, 58, 64, 59, 60, 55, 56, 65, 61, 57, 62, 66, 67, 68, 69, 70, 71, 72, 79, 76, 80, 77, 81, 78, 73, 74, 75, 82, 83, 84, 85, 95, 91, 86, 96, 92, 97, 93, 87, 88, 89, 98, 94, 90, 99, 100, 101, 102, 103, 104, 0, 105, 1, 114, 110, 115, 111, 106, 107, 108, 116, 112, 117, 113, 109, 118, 119, 120, 121, 122, 132, 133, 127, 134, 128, 123, 124, 129, 135, 130, 136, 131, 125, 126, 137, 138, 139, 140, 145, 143, 141, 146, 144, 142, 147, 148, 150, 152, 153, 151, 149, 154, 241, 248, 155, 157, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 170, 168, 173, 171, 169, 174, 175, 177, 179, 180, 178, 176, 181, 242, 249, 182, 184, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 2, 197, 202, 209, 203, 210, 204, 198, 199, 211, 205, 200, 206, 212, 207, 201, 208, 213, 214, 215, 216, 217, 218, 223, 230, 224, 231, 225, 219, 220, 232, 226, 221, 227, 233, 228, 222, 229, 234, 235, 236, 237, 238, 239, 240 }
  uselistorder i32 128, { 4, 5, 0, 6, 9, 1, 7, 8, 2, 3, 10, 11, 12 }
  uselistorder i32 255, { 1, 0 }
  uselistorder i32 65536, { 4, 5, 6, 120, 7, 8, 9, 11, 10, 13, 12, 14, 15, 2, 16, 0, 3, 17, 18, 20, 19, 1, 23, 21, 22, 24, 121, 29, 25, 30, 26, 31, 27, 28, 32, 33, 34, 35, 37, 38, 36, 119, 40, 39, 42, 43, 44, 41, 47, 45, 48, 46, 49, 50, 51, 52, 54, 53, 55, 57, 58, 56, 59, 122, 61, 60, 65, 66, 67, 62, 63, 64, 68, 69, 70, 71, 72, 73, 123, 74, 76, 75, 78, 77, 79, 124, 80, 82, 81, 84, 83, 86, 87, 85, 88, 89, 96, 90, 97, 91, 98, 92, 99, 93, 100, 94, 95, 103, 104, 105, 101, 102, 106, 111, 107, 112, 108, 113, 109, 110, 116, 117, 118, 114, 115 }
  uselistorder i32 65535, { 106, 2, 3, 11, 12, 4, 5, 25, 24, 28, 54, 27, 55, 13, 14, 6, 30, 56, 29, 57, 58, 15, 59, 26, 33, 60, 31, 61, 32, 62, 0, 63, 64, 34, 65, 66, 16, 67, 7, 38, 68, 37, 69, 36, 70, 35, 71, 72, 17, 73, 8, 74, 75, 42, 76, 39, 77, 40, 78, 41, 79, 19, 18, 80, 81, 43, 82, 44, 83, 21, 20, 84, 85, 45, 86, 46, 87, 1, 88, 89, 47, 90, 91, 92, 93, 22, 94, 95, 9, 48, 96, 49, 97, 50, 98, 99, 100, 23, 101, 102, 10, 53, 103, 51, 104, 52, 105 }
  uselistorder i32 4, {}
  uselistorder i32 2, { 4, 125, 5, 6, 7, 8, 9, 48, 61, 42, 43, 62, 143, 63, 65, 141, 70, 142, 67, 144, 68, 128, 134, 52, 129, 69, 130, 53, 131, 54, 132, 55, 133, 135, 136, 137, 138, 139, 56, 140, 66, 49, 10, 11, 145, 147, 148, 71, 45, 126, 149, 64, 73, 72, 146, 156, 12, 74, 75, 157, 158, 76, 58, 150, 78, 151, 77, 57, 152, 79, 153, 13, 14, 15, 80, 154, 50, 155, 81, 82, 83, 84, 85, 86, 88, 46, 89, 87, 159, 90, 91, 92, 93, 94, 95, 160, 44, 47, 161, 162, 164, 165, 166, 167, 168, 169, 97, 170, 96, 171, 172, 173, 174, 175, 176, 98, 59, 177, 178, 179, 180, 181, 182, 100, 183, 99, 184, 185, 187, 101, 186, 102, 188, 189, 190, 191, 192, 193, 194, 0, 16, 17, 18, 19, 20, 21, 103, 195, 60, 196, 197, 198, 199, 200, 201, 1, 22, 23, 24, 25, 26, 27, 105, 202, 104, 203, 204, 205, 206, 207, 208, 107, 209, 108, 210, 109, 211, 28, 2, 29, 30, 31, 32, 33, 110, 212, 106, 213, 214, 215, 216, 217, 218, 112, 219, 113, 220, 114, 221, 34, 3, 35, 36, 37, 38, 39, 115, 222, 111, 223, 224, 226, 116, 225, 117, 227, 40, 228, 229, 230, 231, 232, 233, 119, 118, 234, 236, 41, 237, 238, 121, 239, 122, 240, 241, 242, 243, 244, 123, 245, 120, 246, 235, 124, 51, 163, 127 }
  uselistorder i32 16, { 5, 18, 6, 7, 0, 8, 9, 39, 80, 26, 81, 40, 41, 78, 82, 79, 84, 85, 27, 77, 86, 42, 43, 10, 72, 11, 12, 44, 83, 45, 89, 90, 25, 87, 28, 88, 29, 46, 47, 48, 49, 50, 51, 52, 53, 91, 54, 92, 55, 93, 56, 94, 57, 58, 95, 59, 60, 61, 62, 30, 160, 63, 97, 98, 99, 100, 19, 101, 102, 103, 104, 105, 20, 106, 107, 108, 109, 64, 31, 110, 111, 21, 112, 113, 13, 114, 115, 1, 65, 116, 117, 118, 22, 119, 120, 121, 122, 123, 2, 66, 124, 23, 125, 126, 127, 14, 128, 129, 73, 15, 74, 130, 67, 68, 131, 132, 3, 34, 133, 33, 32, 134, 24, 135, 136, 137, 16, 138, 139, 75, 17, 76, 140, 69, 70, 141, 142, 4, 37, 143, 36, 35, 144, 145, 71, 38, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 171, 173, 174, 96 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 14, 10, 15, 13, 1, 2, 6, 7, 8, 0, 3, 4, 5, 9, 11, 12, 16 }
  uselistorder i32* @lr, { 83, 84, 85, 34, 86, 39, 2, 3, 4, 5, 6, 7, 0, 11, 12, 8, 9, 10, 19, 20, 21, 23, 22, 1, 24, 13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 94 }
  uselistorder i32 -1, { 50, 51, 52, 0, 11, 16, 1, 53, 17, 12, 42, 43, 54, 13, 55, 180, 176, 177, 34, 178, 2, 56, 57, 3, 58, 59, 60, 61, 62, 63, 64, 65, 4, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 44, 179, 83, 84, 85, 86, 87, 88, 29, 28, 181, 89, 90, 91, 92, 32, 33, 30, 31, 93, 94, 36, 182, 95, 96, 5, 97, 15, 98, 99, 100, 101, 102, 35, 187, 188, 14, 103, 46, 183, 45, 184, 6, 47, 185, 104, 105, 106, 48, 186, 7, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 8, 37, 38, 39, 40, 41, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 18, 132, 133, 134, 135, 136, 137, 19, 138, 139, 140, 141, 20, 49, 190, 142, 143, 21, 144, 145, 146, 9, 147, 22, 148, 149, 150, 151, 23, 152, 153, 154, 24, 155, 156, 157, 158, 159, 25, 160, 161, 162, 163, 164, 10, 165, 26, 166, 167, 168, 27, 169, 170, 171, 172, 173, 189, 174, 175 }
  uselistorder i32 1, { 270, 763, 260, 653, 654, 655, 656, 283, 657, 451, 450, 45, 43, 38, 42, 39, 40, 41, 36, 37, 44, 0, 631, 632, 633, 634, 684, 288, 685, 289, 686, 453, 452, 268, 267, 269, 660, 347, 658, 659, 273, 274, 454, 11, 12, 10, 8, 9, 764, 765, 292, 1, 278, 346, 766, 15, 13, 16, 17, 14, 567, 568, 569, 348, 661, 266, 767, 191, 663, 662, 275, 664, 48, 46, 49, 47, 687, 160, 159, 157, 158, 163, 162, 164, 161, 703, 455, 168, 167, 166, 165, 169, 688, 456, 226, 225, 224, 223, 227, 349, 570, 350, 571, 313, 572, 575, 352, 576, 573, 555, 551, 354, 287, 552, 355, 553, 554, 359, 556, 557, 356, 558, 559, 360, 560, 561, 357, 562, 563, 358, 353, 564, 565, 566, 361, 362, 574, 363, 364, 577, 578, 579, 365, 580, 581, 582, 366, 293, 583, 550, 586, 585, 351, 584, 587, 588, 367, 589, 590, 591, 294, 598, 599, 284, 368, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 7, 195, 200, 201, 196, 199, 198, 197, 592, 593, 369, 594, 595, 370, 596, 597, 253, 243, 247, 245, 244, 251, 246, 252, 248, 249, 250, 242, 241, 254, 371, 372, 471, 470, 263, 264, 261, 262, 265, 605, 606, 607, 608, 609, 281, 610, 611, 612, 613, 295, 271, 614, 615, 282, 616, 617, 618, 296, 272, 619, 373, 620, 280, 279, 621, 374, 622, 375, 623, 624, 290, 627, 625, 626, 276, 277, 628, 376, 629, 479, 446, 478, 477, 476, 475, 474, 473, 445, 472, 230, 237, 228, 234, 232, 238, 239, 235, 236, 231, 229, 233, 240, 480, 34, 35, 768, 302, 291, 481, 32, 31, 30, 29, 33, 27, 25, 24, 26, 28, 689, 483, 482, 219, 220, 218, 217, 216, 215, 221, 222, 379, 314, 600, 601, 315, 602, 377, 378, 380, 603, 604, 381, 382, 383, 385, 384, 386, 387, 388, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 449, 486, 485, 484, 18, 20, 19, 22, 23, 21, 285, 389, 390, 391, 392, 395, 394, 393, 630, 498, 497, 192, 193, 194, 396, 635, 307, 636, 306, 637, 305, 638, 304, 639, 303, 640, 641, 397, 308, 398, 642, 399, 643, 400, 644, 401, 645, 402, 646, 403, 647, 404, 648, 405, 649, 406, 650, 407, 651, 408, 652, 286, 409, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 183, 182, 186, 185, 184, 187, 189, 190, 188, 665, 671, 3, 297, 666, 410, 667, 2, 668, 309, 669, 298, 299, 670, 672, 673, 310, 674, 447, 516, 515, 514, 448, 513, 512, 98, 99, 769, 316, 317, 770, 4, 5, 6, 690, 691, 692, 693, 694, 311, 312, 411, 695, 696, 412, 697, 698, 413, 699, 701, 700, 520, 519, 518, 517, 206, 209, 208, 203, 204, 205, 210, 212, 213, 211, 202, 214, 207, 704, 705, 706, 414, 415, 522, 521, 115, 112, 113, 114, 111, 119, 120, 110, 117, 118, 116, 707, 708, 709, 416, 710, 417, 319, 318, 418, 711, 523, 176, 173, 172, 171, 179, 180, 181, 178, 170, 177, 174, 175, 712, 713, 419, 714, 320, 300, 420, 524, 123, 122, 124, 125, 121, 715, 716, 717, 421, 718, 422, 423, 719, 321, 720, 525, 77, 79, 75, 76, 84, 81, 82, 83, 85, 74, 78, 80, 721, 722, 723, 424, 724, 425, 323, 322, 426, 726, 427, 727, 526, 65, 66, 71, 72, 68, 73, 70, 69, 64, 67, 728, 729, 730, 731, 732, 428, 733, 429, 734, 430, 328, 327, 431, 735, 324, 736, 325, 737, 326, 738, 532, 531, 530, 529, 528, 527, 103, 101, 105, 106, 108, 107, 100, 109, 102, 104, 739, 740, 741, 742, 743, 432, 744, 433, 745, 434, 337, 336, 435, 746, 335, 747, 334, 748, 333, 749, 329, 750, 330, 751, 331, 752, 332, 753, 538, 537, 536, 535, 534, 533, 129, 127, 131, 132, 134, 133, 126, 135, 128, 130, 754, 755, 436, 756, 338, 301, 437, 539, 257, 256, 258, 259, 255, 757, 758, 759, 438, 341, 340, 439, 760, 339, 761, 540, 90, 93, 94, 95, 96, 97, 89, 92, 91, 88, 87, 86, 771, 772, 773, 440, 344, 343, 441, 774, 342, 775, 545, 544, 543, 542, 541, 149, 147, 146, 145, 144, 150, 152, 154, 155, 156, 151, 148, 153, 762, 345, 442, 546, 137, 136, 141, 139, 142, 138, 140, 143, 776, 547, 62, 725, 63, 675, 678, 443, 679, 680, 676, 677, 681, 682, 51, 56, 53, 54, 55, 58, 50, 52, 57, 683, 444, 548, 60, 59, 702, 61, 549 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11ce0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11c9c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c88thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11d44(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11d44:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_11d48 = call i32 @function_11c48()
  ret i32 %v0_11d48

; uselistorder directives
  uselistorder i32 ()* @function_11c48, { 1, 2, 0 }
  uselistorder i32* @r1, { 3, 30, 31, 14, 2, 32, 15, 16, 5, 4, 9, 6, 7, 8, 10, 11, 12, 13, 17, 18, 19, 0, 20, 33, 34, 1, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35 }
}

define i32 @function_11d5c() local_unnamed_addr {
dec_label_pc_11d5c:
  %v1_11d64 = call i32 @raise(i32 8)
  ret i32 %v1_11d64

; uselistorder directives
  uselistorder i32 8, { 26, 37, 18, 7, 8, 15, 9, 20, 40, 21, 10, 11, 12, 41, 30, 39, 27, 28, 29, 38, 19, 42, 43, 44, 16, 17, 46, 13, 31, 47, 32, 48, 49, 45, 50, 51, 33, 52, 55, 22, 56, 57, 58, 59, 60, 61, 62, 63, 3, 64, 65, 66, 4, 67, 68, 69, 70, 71, 72, 73, 5, 74, 75, 76, 77, 78, 79, 80, 6, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 87, 23, 88, 24, 89, 25, 90, 34, 91, 0, 1, 36, 14, 53, 35, 54, 2 }
}

define i32 @function_11d70() local_unnamed_addr {
entry:
  %v3_11d74 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_11d74)
  %v31_11d7c = load i32, i32* @r0, align 4
  ret i32 %v31_11d7c

; uselistorder directives
  uselistorder i32* @r0, { 6, 4, 61, 36, 62, 5, 37, 0, 1, 10, 11, 14, 15, 16, 17, 12, 13, 23, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 2, 45, 46, 47, 48, 49, 50, 51, 63, 64, 3, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 7, 8, 9 }
  uselistorder i32 0, { 0, 738, 739, 78, 740, 741, 742, 743, 744, 94, 745, 416, 422, 417, 418, 746, 423, 91, 95, 540, 541, 542, 77, 219, 543, 544, 424, 1, 209, 96, 97, 98, 31, 99, 3, 2, 254, 458, 545, 546, 5, 4, 547, 748, 747, 749, 750, 751, 752, 29, 100, 753, 754, 755, 101, 72, 73, 252, 253, 103, 102, 104, 105, 548, 549, 106, 756, 757, 255, 62, 107, 550, 108, 109, 600, 110, 569, 465, 459, 113, 460, 256, 461, 257, 449, 439, 425, 440, 426, 441, 427, 442, 428, 443, 429, 444, 430, 445, 446, 32, 207, 208, 447, 431, 448, 450, 451, 452, 453, 454, 111, 112, 455, 456, 462, 415, 463, 258, 464, 211, 210, 466, 467, 468, 469, 114, 470, 471, 472, 432, 205, 473, 63, 64, 206, 474, 65, 66, 259, 476, 477, 419, 478, 479, 480, 481, 482, 260, 483, 484, 220, 221, 92, 421, 485, 486, 487, 488, 489, 490, 420, 491, 492, 261, 493, 262, 494, 497, 498, 499, 9, 115, 495, 116, 496, 7, 6, 117, 475, 516, 517, 518, 33, 519, 34, 520, 263, 521, 68, 69, 264, 522, 265, 266, 523, 524, 526, 118, 119, 525, 222, 35, 67, 225, 527, 120, 8, 528, 570, 571, 414, 457, 500, 267, 501, 502, 503, 121, 504, 505, 506, 507, 508, 509, 10, 122, 510, 268, 511, 269, 512, 270, 513, 226, 514, 515, 529, 314, 315, 271, 530, 272, 127, 126, 433, 81, 129, 128, 434, 82, 131, 130, 435, 83, 133, 132, 436, 84, 135, 134, 437, 85, 438, 125, 124, 123, 212, 223, 213, 214, 215, 216, 273, 531, 136, 137, 532, 533, 534, 535, 536, 537, 538, 539, 138, 274, 551, 552, 553, 554, 555, 139, 556, 558, 557, 86, 87, 140, 217, 142, 141, 559, 143, 144, 58, 145, 148, 572, 573, 574, 575, 147, 146, 149, 576, 577, 36, 37, 93, 79, 150, 59, 276, 578, 579, 580, 581, 582, 151, 583, 584, 229, 585, 586, 587, 588, 155, 152, 153, 154, 589, 590, 591, 592, 277, 593, 594, 228, 596, 275, 597, 227, 598, 278, 599, 157, 601, 602, 603, 604, 156, 158, 605, 606, 38, 39, 74, 607, 159, 608, 609, 279, 230, 610, 231, 611, 163, 613, 614, 615, 616, 162, 161, 164, 617, 618, 40, 41, 612, 160, 619, 620, 165, 621, 622, 280, 623, 233, 624, 232, 625, 281, 626, 42, 60, 70, 75, 43, 627, 88, 234, 283, 628, 629, 166, 167, 630, 282, 631, 170, 632, 633, 634, 635, 169, 168, 171, 636, 637, 44, 45, 89, 638, 639, 11, 12, 13, 14, 640, 641, 172, 284, 642, 285, 643, 286, 644, 287, 645, 288, 646, 289, 647, 290, 648, 235, 649, 176, 651, 652, 653, 654, 174, 173, 177, 655, 656, 46, 47, 650, 175, 658, 657, 15, 16, 17, 18, 659, 178, 660, 661, 237, 662, 291, 665, 292, 666, 293, 667, 294, 668, 295, 669, 296, 670, 236, 671, 297, 672, 182, 674, 675, 676, 677, 180, 179, 183, 678, 679, 48, 49, 673, 181, 680, 50, 299, 681, 683, 684, 685, 686, 300, 687, 19, 20, 21, 22, 23, 682, 184, 688, 689, 298, 690, 242, 691, 241, 692, 240, 693, 239, 694, 238, 695, 301, 696, 188, 698, 699, 700, 701, 186, 185, 189, 702, 703, 51, 52, 697, 187, 704, 53, 303, 705, 707, 708, 709, 710, 304, 711, 24, 25, 26, 27, 28, 706, 190, 712, 713, 302, 714, 243, 715, 305, 716, 54, 61, 71, 76, 55, 717, 90, 244, 307, 308, 309, 718, 719, 191, 192, 720, 306, 723, 724, 725, 194, 195, 726, 727, 56, 721, 722, 193, 729, 728, 730, 196, 731, 732, 247, 733, 246, 734, 245, 735, 310, 736, 759, 760, 761, 198, 199, 200, 763, 764, 57, 762, 758, 197, 766, 767, 765, 768, 201, 769, 770, 250, 771, 249, 772, 248, 773, 311, 776, 737, 774, 202, 775, 663, 203, 664, 560, 80, 561, 562, 563, 312, 218, 564, 565, 30, 224, 566, 567, 313, 568, 204, 595, 251, 777, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789 }
  uselistorder i32* @r4, { 19, 100, 101, 156, 157, 125, 126, 31, 32, 22, 23, 20, 21, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 0, 52, 44, 45, 67, 68, 346, 347, 127, 128, 129, 130, 131, 33, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 2, 3, 4, 5, 6, 7, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 1, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 8, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 9, 195, 10, 196, 11, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 12, 218, 13, 219, 14, 220, 15, 221, 222, 223, 16, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 17, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 18, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 344, 345, 361, 362, 117, 115, 116, 118, 119, 120, 121, 122, 123, 124, 366 }
}

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @sleep(i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @select(i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32* @calloc(i32, i32) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @atoi(i8*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @raise(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_4() local_unnamed_addr

declare i8* @__decompiler_undefined_function_5() local_unnamed_addr

declare %timeval* @__decompiler_undefined_function_6() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
