source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_n = internal unnamed_addr global i1 false
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@cpsr_v = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1f00c.14 = global i32 0
@global_var_9dc4.18 = constant i32 -509558771
@global_var_1f324.21 = global i32 0
@global_var_1f328.23 = global i32 0
@global_var_1f32c.25 = local_unnamed_addr global i32 0
@global_var_1f330.27 = global i32 0
@global_var_15780.33 = constant [37 x i8] c"kt8lmno5abghi6w7uvx2cdyz14pqef3rs9j0\00"
@global_var_157a8.36 = constant [7 x i8] c"(null)\00"
@global_var_1f09c = external local_unnamed_addr global i32
@global_var_1f320.41 = global i32 0
@global_var_1f318.43 = global i32 0
@global_var_1f31c.44 = local_unnamed_addr global i32 0
@global_var_21568.46 = global i32 0
@global_var_157b0.48 = constant [6 x i32] %wide-string
@global_var_157b4.50 = constant [5 x i32] %wide-string
@global_var_157b8.52 = constant [4 x i32] %wide-string
@global_var_1f094.57 = local_unnamed_addr global i32 -1
@global_var_15770.59 = constant [15 x i8] c"191.96.112.131\00"
@global_var_1f090.60 = global [15 x i8]* @global_var_15770.59
@global_var_157bc.63 = constant [3 x i32] %wide-string
@global_var_157c0.67 = constant i32 32
@global_var_1f010.70 = global i32 0
@global_var_abfc.75 = constant i32 -456978431
@global_var_b258.95 = constant i32 -478871519
@global_var_bbcc.104 = constant i32 -382906384
@global_var_aa98.113 = constant i32 -509591552
@global_var_c174.119 = constant i32 -442564540
@global_var_1f31d.149 = global i32 0
@global_var_cb30.173 = constant i32 -369098421
@global_var_bffc.189 = constant i32 -442543860
@global_var_acb0.198 = constant i32 -369094574
@global_var_d4fc.211 = constant i32 -335545085
@global_var_d964.224 = constant i32 -443088884
@global_var_bd80.236 = constant i32 -382909968
@global_var_ea28.243 = constant i32 -382906384
@global_var_20003.252 = global i32 0
@global_var_20000.253 = global i32 0
@global_var_e508.263 = constant i32 -509607926
@global_var_e6d8.273 = constant i32 -382910448
@global_var_10460.274 = constant i32 -382909968
@global_var_e84c.284 = constant i32 -509607928
@global_var_fbb8.326 = constant i32 -478805983
@global_var_10178.334 = constant i32 -382909456
@global_var_aac4.351 = constant i32 -382910336
@global_var_11590.356 = constant i32 -442695584
@global_var_11b58.365 = constant i32 -382910224
@global_var_13a78.386 = constant i32 -382910224
@global_var_14f7c.443 = constant i32 -504313148
@global_var_14f64.444 = constant i32 -483131392
@global_var_14e10.445 = constant i32 -481229311
@global_var_14fec.446 = constant i32 -477817729
@global_var_150ec.447 = constant i32 -476034303
@global_var_15328.448 = constant i32 -516685812
@global_var_1521c.449 = constant i32 -905969571
@global_var_15150.450 = constant i32 -528203771
@global_var_153b0.451 = constant i32 -478079873
@global_var_15394.452 = constant i32 -534704125
@global_var_15344.453 = constant i32 -534704125
@global_var_152dc.454 = constant i32 -483131392
@global_var_1f2f8.4 = external global i8*

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80b8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80b8)
  %v31_80c0 = load i32, i32* @r0, align 4
  ret i32 %v31_80c0
}

define i32 @_call_via_r0(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  ret i32 %arg1
}

define i32 @_call_via_r1(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  %v1_80d4 = load i32, i32* @r0, align 4
  ret i32 %v1_80d4
}

define i32 @_call_via_r2(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  %v1_80d8 = load i32, i32* @r0, align 4
  ret i32 %v1_80d8
}

define i32 @_call_via_r3(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  %v1_80dc = load i32, i32* @r0, align 4
  ret i32 %v1_80dc
}

define i32 @_call_via_r4() local_unnamed_addr {
entry:
  %v0_80e0 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v0_80e0)
  %v1_80e0 = load i32, i32* @r0, align 4
  ret i32 %v1_80e0
}

define i32 @_call_via_r5() local_unnamed_addr {
entry:
  %v0_80e4 = load i32, i32* @r5, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v1_80e4 = load i32, i32* @r0, align 4
  ret i32 %v1_80e4
}

define i32 @_call_via_r6() local_unnamed_addr {
entry:
  %v0_80e8 = load i32, i32* @r6, align 4
  call void @__pseudo_branch(i32 %v0_80e8)
  %v1_80e8 = load i32, i32* @r0, align 4
  ret i32 %v1_80e8
}

define i32 @_call_via_r7() local_unnamed_addr {
entry:
  %v0_80ec = load i32, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v0_80ec)
  %v1_80ec = load i32, i32* @r0, align 4
  ret i32 %v1_80ec
}

define i32 @_call_via_r8() local_unnamed_addr {
entry:
  %v0_80f0 = load i32, i32* @r8, align 4
  call void @__pseudo_branch(i32 %v0_80f0)
  %v1_80f0 = load i32, i32* @r0, align 4
  ret i32 %v1_80f0
}

define i32 @_call_via_r9() local_unnamed_addr {
entry:
  %v0_80f4 = load i32, i32* @sb, align 4
  call void @__pseudo_branch(i32 %v0_80f4)
  %v1_80f4 = load i32, i32* @r0, align 4
  ret i32 %v1_80f4
}

define i32 @_call_via_sl() local_unnamed_addr {
entry:
  %v0_80f8 = load i32, i32* @sl, align 4
  call void @__pseudo_branch(i32 %v0_80f8)
  %v1_80f8 = load i32, i32* @r0, align 4
  ret i32 %v1_80f8
}

define i32 @_call_via_fp() local_unnamed_addr {
entry:
  %v0_80fc = load i32, i32* @fp, align 4
  call void @__pseudo_branch(i32 %v0_80fc)
  %v1_80fc = load i32, i32* @r0, align 4
  ret i32 %v1_80fc
}

define i32 @_call_via_ip() local_unnamed_addr {
entry:
  %v0_8100 = load i32, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v0_8100)
  %v1_8100 = load i32, i32* @r0, align 4
  ret i32 %v1_8100
}

define i32 @_call_via_sp() local_unnamed_addr {
entry:
  %v0_8104 = load i32, i32* @sp, align 4
  call void @__pseudo_branch(i32 %v0_8104)
  %v1_8104 = load i32, i32* @r0, align 4
  ret i32 %v1_8104
}

define i32 @_call_via_lr() local_unnamed_addr {
entry:
  %v1_8108 = load i32, i32* @r0, align 4
  ret i32 %v1_8108
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_810c = load i32, i32* @r4, align 4
  store i32 %v3_810c, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1f2f8.4 to i32), i32* %r4.global-to-local, align 4
  %v2_8114 = load i8, i8* bitcast (i8** @global_var_1f2f8.4 to i8*), align 4
  %v2_8118 = icmp eq i8 %v2_8114, 0
  br i1 %v2_8118, label %dec_label_pc_8120, label %dec_label_pc_813c

dec_label_pc_8120:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8138 = load i32, i32* %r4.global-to-local, align 4
  %v3_8138 = inttoptr i32 %v2_8138 to i8*
  store i8 1, i8* %v3_8138, align 1
  %v2_813c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_813c

dec_label_pc_813c:                                ; preds = %entry, %dec_label_pc_8120
  %v2_813c = phi i32 [ %v3_810c, %entry ], [ %v2_813c.pre, %dec_label_pc_8120 ]
  store i32 %v2_813c, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_1f2f8.4, { 1, 0 }
  uselistorder label %dec_label_pc_813c, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8174 = load i32, i32* @global_var_1f00c.14, align 4
  %v2_8178 = icmp eq i32 %v2_8174, 0
  br i1 %v2_8178, label %dec_label_pc_8190, label %dec_label_pc_8180

dec_label_pc_8180:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8190

dec_label_pc_8190:                                ; preds = %bb, %dec_label_pc_8180
  ret i32 ptrtoint (i32* @global_var_1f00c.14 to i32)

; uselistorder directives
  uselistorder i32* @global_var_1f00c.14, { 1, 0 }
  uselistorder label %dec_label_pc_8190, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_81b8 = ptrtoint i32* %stack_var_4 to i32
  %v8_81d8 = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_9dc4.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32948, i32 87904, i32 %arg1, i32 %v4_81b8)
  %v0_81dc = call i32 @abort()
  ret i32 %v0_81dc
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_8200 = call i32 @__GI_time(i32* null)
  store i32 %v2_8200, i32* @r0, align 4
  store i32 %v2_8200, i32* @global_var_1f324.21, align 4
  %v0_8214 = call i32 @__GI_getpid()
  store i32 %v0_8214, i32* @r0, align 4
  %v0_821c = call i32 @getppid()
  %v2_8224 = xor i32 %v0_8214, %v0_821c
  store i32 %v2_8224, i32* @global_var_1f328.23, align 4
  %v0_8234 = call i32 @clock()
  store i32 %v0_8234, i32* @global_var_1f32c.25, align 4
  %v2_8254 = load i32, i32* @global_var_1f328.23, align 4
  %v2_8258 = xor i32 %v2_8254, %v0_8234
  store i32 %v2_8258, i32* @global_var_1f330.27, align 4
  ret i32 %v0_8234

; uselistorder directives
  uselistorder i32 %v0_8234, { 1, 0, 2 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_8294 = load i32, i32* @global_var_1f324.21, align 4
  %v3_82a0 = mul i32 %v2_8294, 2048
  %v2_82a8 = xor i32 %v3_82a0, %v2_8294
  %v3_82b4 = udiv i32 %v2_82a8, 256
  %v2_82c8 = load i32, i32* @global_var_1f328.23, align 4
  store i32 %v2_82c8, i32* @global_var_1f324.21, align 4
  %v2_82d8 = load i32, i32* @global_var_1f32c.25, align 4
  store i32 %v2_82d8, i32* @global_var_1f328.23, align 4
  %v2_82e8 = load i32, i32* @global_var_1f330.27, align 4
  store i32 %v2_82e8, i32* @global_var_1f32c.25, align 4
  %v3_82fc = udiv i32 %v2_82e8, 524288
  %v2_8308 = xor i32 %v3_82b4, %v2_82a8
  %v2_82bc = xor i32 %v2_8308, %v2_82e8
  %v2_8320 = xor i32 %v2_82bc, %v3_82fc
  store i32 %v2_8320, i32* @global_var_1f330.27, align 4
  ret i32 %v2_8320

; uselistorder directives
  uselistorder i32 %v2_82e8, { 1, 0, 2 }
  uselistorder i32 %v2_82a8, { 1, 0 }
  uselistorder i32 %v2_8294, { 1, 0 }
  uselistorder i32* @global_var_1f330.27, { 0, 2, 1 }
  uselistorder i32* @global_var_1f32c.25, { 0, 2, 1 }
  uselistorder i32* @global_var_1f328.23, { 0, 2, 3, 1 }
  uselistorder i32* @global_var_1f324.21, { 0, 2, 1 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8364 = load i32, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-32, align 4
  %v5_841c4 = icmp sgt i32 %arg2, 0
  br i1 %v5_841c4, label %dec_label_pc_8370, label %dec_label_pc_8420

dec_label_pc_8370:                                ; preds = %entry, %dec_label_pc_8414.backedge
  %v3_83a8 = phi i32 [ %v3_8414.be, %dec_label_pc_8414.backedge ], [ %arg2, %entry ]
  %stack_var_-28.0.in5 = phi i32 [ %stack_var_-28.0.in.be, %dec_label_pc_8414.backedge ], [ %v0_8364, %entry ]
  %v7_8378 = icmp slt i32 %v3_83a8, 4
  br i1 %v7_8378, label %dec_label_pc_83a8, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8370
  %v0_8380 = call i32 @rand_next()
  store i32 %v0_8380, i32* %r0.global-to-local, align 4
  %v2_8388 = inttoptr i32 %stack_var_-28.0.in5 to i32*
  store i32 %v0_8380, i32* %v2_8388, align 4
  %v1_8390 = add i32 %stack_var_-28.0.in5, 4
  %v3_8398 = load i32, i32* %stack_var_-32, align 4
  %v1_839c = add i32 %v3_8398, -4
  store i32 %v1_839c, i32* %stack_var_-32, align 4
  br label %dec_label_pc_8414.backedge

dec_label_pc_83a8:                                ; preds = %dec_label_pc_8370
  %v7_83b0 = icmp slt i32 %v3_83a8, 2
  br i1 %v7_83b0, label %dec_label_pc_83e8, label %dec_label_pc_83b4

dec_label_pc_83b4:                                ; preds = %dec_label_pc_83a8
  %v0_83b8 = call i32 @rand_next()
  store i32 %v0_83b8, i32* %r0.global-to-local, align 4
  %v1_83c8 = trunc i32 %v0_83b8 to i16
  %v3_83c8 = inttoptr i32 %stack_var_-28.0.in5 to i16*
  store i16 %v1_83c8, i16* %v3_83c8, align 2
  %v1_83d0 = add i32 %stack_var_-28.0.in5, 2
  %v3_83d8 = load i32, i32* %stack_var_-32, align 4
  %v1_83dc = add i32 %v3_83d8, -2
  store i32 %v1_83dc, i32* %stack_var_-32, align 4
  br label %dec_label_pc_8414.backedge

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83a8
  %v0_83e8 = call i32 @rand_next()
  store i32 %v0_83e8, i32* %r0.global-to-local, align 4
  %v1_83f8 = trunc i32 %v0_83e8 to i8
  %v3_83f8 = inttoptr i32 %stack_var_-28.0.in5 to i8*
  store i8 %v1_83f8, i8* %v3_83f8, align 1
  %v1_8400 = add i32 %stack_var_-28.0.in5, 1
  %v3_8408 = load i32, i32* %stack_var_-32, align 4
  %v1_840c = add i32 %v3_8408, -1
  store i32 %v1_840c, i32* %stack_var_-32, align 4
  br label %dec_label_pc_8414.backedge

dec_label_pc_8414.backedge:                       ; preds = %dec_label_pc_83e8, %dec_label_pc_837c, %dec_label_pc_83b4
  %v3_8414.be = phi i32 [ %v1_83dc, %dec_label_pc_83b4 ], [ %v1_839c, %dec_label_pc_837c ], [ %v1_840c, %dec_label_pc_83e8 ]
  %stack_var_-28.0.in.be = phi i32 [ %v1_83d0, %dec_label_pc_83b4 ], [ %v1_8390, %dec_label_pc_837c ], [ %v1_8400, %dec_label_pc_83e8 ]
  %v5_841c = icmp sgt i32 %v3_8414.be, 0
  br i1 %v5_841c, label %dec_label_pc_8370, label %dec_label_pc_8414.dec_label_pc_8420_crit_edge

dec_label_pc_8414.dec_label_pc_8420_crit_edge:    ; preds = %dec_label_pc_8414.backedge
  %v1_8428.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_8414.dec_label_pc_8420_crit_edge, %entry
  %v1_8428 = phi i32 [ %v1_8428.pre, %dec_label_pc_8414.dec_label_pc_8420_crit_edge ], [ %v0_8364, %entry ]
  ret i32 %v1_8428

; uselistorder directives
  uselistorder i32 %v3_8414.be, { 1, 0 }
  uselistorder i32 %stack_var_-28.0.in5, { 4, 5, 3, 0, 2, 1 }
  uselistorder i32 %v0_8364, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder label %dec_label_pc_8414.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8370, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-65 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_8430 = load i32, i32* @fp, align 4
  store i32 %v3_8430, i32* %stack_var_-16, align 4
  %v13_8430 = ptrtoint i32* %stack_var_-16 to i32
  store i32 ptrtoint ([37 x i8]* @global_var_15780.33 to i32), i32* @r3, align 4
  %v2_8448 = ptrtoint i32* %stack_var_-65 to i32
  store i32 37, i32* @ip, align 4
  store i32 %v2_8448, i32* @r0, align 4
  store i32 ptrtoint ([37 x i8]* @global_var_15780.33 to i32), i32* @r1, align 4
  store i32 37, i32* @r2, align 4
  %v0_845c = call i32 @memcpy()
  store i32 %v0_845c, i32* %r0.global-to-local, align 4
  %v5_857012 = icmp sgt i32 %arg2, 0
  br i1 %v5_857012, label %dec_label_pc_8464.lr.ph, label %dec_label_pc_8574

dec_label_pc_8464.lr.ph:                          ; preds = %entry
  %v2_84b4 = add i32 %v13_8430, -49
  br label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_8464.lr.ph, %dec_label_pc_8568.backedge
  %stack_var_-80.014 = phi i32 [ %arg2, %dec_label_pc_8464.lr.ph ], [ %stack_var_-80.0.be, %dec_label_pc_8568.backedge ]
  %stack_var_-76.113 = phi i8* [ %arg1, %dec_label_pc_8464.lr.ph ], [ %stack_var_-76.1.be, %dec_label_pc_8568.backedge ]
  %tmp30 = icmp ult i32 %stack_var_-80.014, 4
  %v0_84fc = call i32 @rand_next()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br i1 %tmp30, label %dec_label_pc_84fc, label %dec_label_pc_8488.lr.ph

dec_label_pc_8488.lr.ph:                          ; preds = %dec_label_pc_8464
  %v5_8478 = trunc i32 %v0_84fc to i8
  br label %dec_label_pc_8488

dec_label_pc_8488:                                ; preds = %dec_label_pc_8488.lr.ph, %dec_label_pc_8488
  %storemerge39 = phi i32 [ 0, %dec_label_pc_8488.lr.ph ], [ %v1_84d8, %dec_label_pc_8488 ]
  %stack_var_-24.08 = phi i8 [ %v5_8478, %dec_label_pc_8488.lr.ph ], [ %v5_8498, %dec_label_pc_8488 ]
  %stack_var_-76.07 = phi i8* [ %stack_var_-76.113, %dec_label_pc_8488.lr.ph ], [ %v5_84d0, %dec_label_pc_8488 ]
  %v4_8488 = sext i8 %stack_var_-24.08 to i32
  %v3_8494 = udiv i32 %v4_8488, 256
  %v5_8498 = trunc i32 %v3_8494 to i8
  %div = udiv i8 %stack_var_-24.08, 8
  %v3_84a0 = zext i8 %div to i32
  store i32 %v13_8430, i32* %r0.global-to-local, align 4
  %v2_84b8 = add i32 %v2_84b4, %v3_84a0
  %v1_84bc = inttoptr i32 %v2_84b8 to i8*
  %v2_84bc = load i8, i8* %v1_84bc, align 1
  %v4_84c0 = ptrtoint i8* %stack_var_-76.07 to i32
  store i8 %v2_84bc, i8* %stack_var_-76.07, align 1
  %v1_84cc = add i32 %v4_84c0, 1
  %v5_84d0 = inttoptr i32 %v1_84cc to i8*
  %v1_84d8 = add i32 %storemerge39, 1
  %tmp31 = icmp ult i32 %v1_84d8, 4
  br i1 %tmp31, label %dec_label_pc_8488, label %dec_label_pc_84ec

dec_label_pc_84ec:                                ; preds = %dec_label_pc_8488
  %v1_84f0 = add i32 %stack_var_-80.014, -4
  br label %dec_label_pc_8568.backedge

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8464
  %v3_8518 = urem i32 %v0_84fc, 37
  store i32 %v3_8518, i32* %r0.global-to-local, align 4
  %v4_8548 = ptrtoint i8* %stack_var_-76.113 to i32
  %v1_854c = trunc i32 %v3_8518 to i8
  store i8 %v1_854c, i8* %stack_var_-76.113, align 1
  %v1_8554 = add i32 %v4_8548, 1
  %v5_8558 = inttoptr i32 %v1_8554 to i8*
  %v1_8560 = add i32 %stack_var_-80.014, -1
  br label %dec_label_pc_8568.backedge

dec_label_pc_8568.backedge:                       ; preds = %dec_label_pc_84fc, %dec_label_pc_84ec
  %stack_var_-76.1.be = phi i8* [ %v5_84d0, %dec_label_pc_84ec ], [ %v5_8558, %dec_label_pc_84fc ]
  %stack_var_-80.0.be = phi i32 [ %v1_84f0, %dec_label_pc_84ec ], [ %v1_8560, %dec_label_pc_84fc ]
  %v5_8570 = icmp sgt i32 %stack_var_-80.0.be, 0
  br i1 %v5_8570, label %dec_label_pc_8464, label %dec_label_pc_8568.dec_label_pc_8574_crit_edge

dec_label_pc_8568.dec_label_pc_8574_crit_edge:    ; preds = %dec_label_pc_8568.backedge
  %v1_857c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8574

dec_label_pc_8574:                                ; preds = %dec_label_pc_8568.dec_label_pc_8574_crit_edge, %entry
  %v1_857c = phi i32 [ %v1_857c.pre, %dec_label_pc_8568.dec_label_pc_8574_crit_edge ], [ %v0_845c, %entry ]
  %v2_8578 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8578, i32* @fp, align 4
  ret i32 %v1_857c

; uselistorder directives
  uselistorder i32 %stack_var_-80.014, { 1, 2, 0 }
  uselistorder i32 %v13_8430, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 1, 5, 0 }
  uselistorder label %dec_label_pc_8488, { 1, 0 }
  uselistorder label %dec_label_pc_8464, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  br label %dec_label_pc_85b4

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85b4
  %v4_85b4 = ptrtoint i8* %stack_var_-28.0 to i32
  %v1_85d0 = add i32 %v4_85b4, 1
  %v5_85d4 = inttoptr i32 %v1_85d0 to i8*
  %v1_85ac = add i32 %storemerge1, 1
  br label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %entry, %dec_label_pc_85a8
  %stack_var_-28.0 = phi i8* [ %arg1, %entry ], [ %v5_85d4, %dec_label_pc_85a8 ]
  %storemerge1 = phi i32 [ 0, %entry ], [ %v1_85ac, %dec_label_pc_85a8 ]
  %v2_85b8 = load i8, i8* %stack_var_-28.0, align 1
  %v2_85bc = icmp eq i8 %v2_85b8, 0
  br i1 %v2_85bc, label %dec_label_pc_85e0, label %dec_label_pc_85a8

dec_label_pc_85e0:                                ; preds = %dec_label_pc_85b4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i8* %stack_var_-28.0, { 1, 0 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_865c6 = icmp eq i32 %arg3, 0
  br i1 %v3_865c6, label %dec_label_pc_8664, label %dec_label_pc_8624

dec_label_pc_8624:                                ; preds = %entry, %dec_label_pc_8624
  %v1_865013.in = phi i32 [ %v1_865013, %dec_label_pc_8624 ], [ %arg3, %entry ]
  %storemerge.in12 = phi i32 [ %v1_8644, %dec_label_pc_8624 ], [ %arg2, %entry ]
  %stack_var_-24.011 = phi i8* [ %v5_863c, %dec_label_pc_8624 ], [ %arg1, %entry ]
  %v1_865013 = add i32 %v1_865013.in, -1
  %storemerge = inttoptr i32 %storemerge.in12 to i8*
  %v2_8628 = load i8, i8* %storemerge, align 1
  %v4_862c = ptrtoint i8* %stack_var_-24.011 to i32
  store i8 %v2_8628, i8* %stack_var_-24.011, align 1
  %v1_8638 = add i32 %v4_862c, 1
  %v5_863c = inttoptr i32 %v1_8638 to i8*
  %v1_8644 = add i32 %storemerge.in12, 1
  %v3_865c = icmp eq i32 %v1_865013, 0
  br i1 %v3_865c, label %dec_label_pc_8664, label %dec_label_pc_8624

dec_label_pc_8664:                                ; preds = %dec_label_pc_8624, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %storemerge.in12, { 1, 0 }
  uselistorder label %dec_label_pc_8624, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v3_8674 = load i32, i32* @fp, align 4
  %v1_868c = inttoptr i32 %arg2 to i8*
  %v2_868c = call i32 @util_strlen(i8* %v1_868c)
  %v1_869c = add i32 %v2_868c, 1
  %v3_86ac = inttoptr i32 %arg1 to i8*
  %v4_86ac = call i32 @util_memcpy(i8* %v3_86ac, i32 %arg2, i32 %v1_869c)
  store i32 %v3_8674, i32* @fp, align 4
  ret i32 %v2_868c
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_86d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-24, align 4
  %v2_86e0 = icmp eq i32 %v0_86d4, 0
  br i1 %v2_86e0, label %dec_label_pc_8714, label %dec_label_pc_86e8

dec_label_pc_86e8:                                ; preds = %entry
  %v1_86ec = inttoptr i32 %v0_86d4 to i32*
  %v2_86ec = load i32, i32* %v1_86ec, align 4
  %v1_86f8 = trunc i32 %arg2 to i8
  %v3_86f8 = inttoptr i32 %v2_86ec to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_8700 = load i32, i32* %v1_86ec, align 4
  %v1_8704 = add i32 %v2_8700, 1
  store i32 %v1_8704, i32* %v1_86ec, align 4
  %v1_8730.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8728

dec_label_pc_8714:                                ; preds = %entry
  %v2_86d0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_8724 = call i32 @__GI_write(i32 1, i32 %v2_86d0)
  store i32 %v2_8724, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8728

dec_label_pc_8728:                                ; preds = %dec_label_pc_86e8, %dec_label_pc_8714
  %v1_8730 = phi i32 [ %v1_8730.pre, %dec_label_pc_86e8 ], [ %v2_8724, %dec_label_pc_8714 ]
  ret i32 %v1_8730

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8728, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %v3_8738 = load i32, i32* @fp, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %tmp43 = icmp slt i32 %arg3, 1
  br i1 %tmp43, label %dec_label_pc_87f0, label %dec_label_pc_8770

dec_label_pc_8770:                                ; preds = %entry
  %v2_87a020 = load i8, i8* %arg2, align 1
  %v2_87a422 = icmp eq i8 %v2_87a020, 0
  br i1 %v2_87a422, label %dec_label_pc_87ac, label %dec_label_pc_8784

dec_label_pc_8784:                                ; preds = %dec_label_pc_8770, %dec_label_pc_8784
  %v4_879c24 = phi i32 [ %v1_8794, %dec_label_pc_8784 ], [ %tmp, %dec_label_pc_8770 ]
  %stack_var_-40.023 = phi i32 [ %v1_8788, %dec_label_pc_8784 ], [ 0, %dec_label_pc_8770 ]
  %v1_8788 = add i32 %stack_var_-40.023, 1
  %v1_8794 = add i32 %v4_879c24, 1
  %v5_8798 = inttoptr i32 %v1_8794 to i8*
  %v2_87a0 = load i8, i8* %v5_8798, align 1
  %v2_87a4 = icmp eq i8 %v2_87a0, 0
  br i1 %v2_87a4, label %dec_label_pc_87ac, label %dec_label_pc_8784

dec_label_pc_87ac:                                ; preds = %dec_label_pc_8784, %dec_label_pc_8770
  %stack_var_-40.0.lcssa = phi i32 [ 0, %dec_label_pc_8770 ], [ %v1_8788, %dec_label_pc_8784 ]
  %v5_87b8 = icmp slt i32 %stack_var_-40.0.lcssa, %arg3
  br i1 %v5_87b8, label %dec_label_pc_87c8, label %dec_label_pc_87d8

dec_label_pc_87c8:                                ; preds = %dec_label_pc_87ac
  %v2_87d0 = sub i32 %arg3, %stack_var_-40.0.lcssa
  br label %dec_label_pc_87d8

dec_label_pc_87d8:                                ; preds = %dec_label_pc_87ac, %dec_label_pc_87c8
  %storemerge4 = phi i32 [ %v2_87d0, %dec_label_pc_87c8 ], [ 0, %dec_label_pc_87ac ]
  %v1_87dc = and i32 %arg4, 2
  %v2_87e0 = icmp eq i32 %v1_87dc, 0
  br i1 %v2_87e0, label %dec_label_pc_87f0, label %dec_label_pc_87e8

dec_label_pc_87e8:                                ; preds = %dec_label_pc_87d8
  br label %dec_label_pc_87f0

dec_label_pc_87f0:                                ; preds = %dec_label_pc_87d8, %entry, %dec_label_pc_87e8
  %stack_var_-28.0 = phi i32 [ %arg3, %entry ], [ %storemerge4, %dec_label_pc_87d8 ], [ %storemerge4, %dec_label_pc_87e8 ]
  %stack_var_-44.0 = phi i32 [ 32, %entry ], [ 32, %dec_label_pc_87d8 ], [ 48, %dec_label_pc_87e8 ]
  %v1_87f4 = urem i32 %arg4, 2
  %v2_87f8 = icmp eq i32 %v1_87f4, 0
  br i1 %v2_87f8, label %dec_label_pc_8828.preheader, label %dec_label_pc_8864.preheader

dec_label_pc_8828.preheader:                      ; preds = %dec_label_pc_87f0
  %v5_883017 = icmp sgt i32 %stack_var_-28.0, 0
  br i1 %v5_883017, label %dec_label_pc_8804.lr.ph, label %dec_label_pc_8864.preheader

dec_label_pc_8804.lr.ph:                          ; preds = %dec_label_pc_8828.preheader
  %v2_880c = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_8804

dec_label_pc_8804:                                ; preds = %dec_label_pc_8804.lr.ph, %dec_label_pc_8804
  %stack_var_-28.118 = phi i32 [ %stack_var_-28.0, %dec_label_pc_8804.lr.ph ], [ %v1_8820, %dec_label_pc_8804 ]
  %v3_880c = call i32 @printchar(i32* %v2_880c, i32 %stack_var_-44.0)
  %v3_8810 = load i32, i32* %stack_var_-48, align 4
  %v1_8814 = add i32 %v3_8810, 1
  store i32 %v1_8814, i32* %stack_var_-48, align 4
  %v1_8820 = add nsw i32 %stack_var_-28.118, -1
  %v5_8830 = icmp sgt i32 %stack_var_-28.118, 1
  br i1 %v5_8830, label %dec_label_pc_8804, label %dec_label_pc_8864.preheader

dec_label_pc_8864.preheader:                      ; preds = %dec_label_pc_8804, %dec_label_pc_8828.preheader, %dec_label_pc_87f0
  %v3_88a828 = phi i32 [ 0, %dec_label_pc_87f0 ], [ 0, %dec_label_pc_8828.preheader ], [ %v1_8814, %dec_label_pc_8804 ]
  %stack_var_-28.2.ph = phi i32 [ %stack_var_-28.0, %dec_label_pc_87f0 ], [ %stack_var_-28.0, %dec_label_pc_8828.preheader ], [ 0, %dec_label_pc_8804 ]
  %v2_886810 = load i8, i8* %arg2, align 1
  %v2_886c12 = icmp eq i8 %v2_886810, 0
  br i1 %v2_886c12, label %dec_label_pc_889c.preheader, label %dec_label_pc_8838.lr.ph

dec_label_pc_8838.lr.ph:                          ; preds = %dec_label_pc_8864.preheader
  %v2_8848 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_8838.lr.ph, %dec_label_pc_8838
  %v4_886414 = phi i32 [ %tmp, %dec_label_pc_8838.lr.ph ], [ %v1_885c, %dec_label_pc_8838 ]
  %stack_var_-24.013 = phi i8* [ %arg2, %dec_label_pc_8838.lr.ph ], [ %v5_8860, %dec_label_pc_8838 ]
  %v2_883c = load i8, i8* %stack_var_-24.013, align 1
  %v3_883c = zext i8 %v2_883c to i32
  %v3_8848 = call i32 @printchar(i32* %v2_8848, i32 %v3_883c)
  %v3_884c = load i32, i32* %stack_var_-48, align 4
  %v1_8850 = add i32 %v3_884c, 1
  store i32 %v1_8850, i32* %stack_var_-48, align 4
  %v1_885c = add i32 %v4_886414, 1
  %v5_8860 = inttoptr i32 %v1_885c to i8*
  %v2_8868 = load i8, i8* %v5_8860, align 1
  %v2_886c = icmp eq i8 %v2_8868, 0
  br i1 %v2_886c, label %dec_label_pc_889c.preheader, label %dec_label_pc_8838

dec_label_pc_889c.preheader:                      ; preds = %dec_label_pc_8838, %dec_label_pc_8864.preheader
  %v3_88a827 = phi i32 [ %v3_88a828, %dec_label_pc_8864.preheader ], [ %v1_8850, %dec_label_pc_8838 ]
  %v5_88a47 = icmp sgt i32 %stack_var_-28.2.ph, 0
  br i1 %v5_88a47, label %dec_label_pc_8878.lr.ph, label %dec_label_pc_88a8

dec_label_pc_8878.lr.ph:                          ; preds = %dec_label_pc_889c.preheader
  %v2_8880 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_8878

dec_label_pc_8878:                                ; preds = %dec_label_pc_8878.lr.ph, %dec_label_pc_8878
  %stack_var_-28.38 = phi i32 [ %stack_var_-28.2.ph, %dec_label_pc_8878.lr.ph ], [ %v1_8894, %dec_label_pc_8878 ]
  %v3_8880 = call i32 @printchar(i32* %v2_8880, i32 %stack_var_-44.0)
  %v3_8884 = load i32, i32* %stack_var_-48, align 4
  %v1_8888 = add i32 %v3_8884, 1
  store i32 %v1_8888, i32* %stack_var_-48, align 4
  %v1_8894 = add nsw i32 %stack_var_-28.38, -1
  %v5_88a4 = icmp sgt i32 %stack_var_-28.38, 1
  br i1 %v5_88a4, label %dec_label_pc_8878, label %dec_label_pc_88a8

dec_label_pc_88a8:                                ; preds = %dec_label_pc_8878, %dec_label_pc_889c.preheader
  %v3_88a8 = phi i32 [ %v3_88a827, %dec_label_pc_889c.preheader ], [ %v1_8888, %dec_label_pc_8878 ]
  store i32 %v3_8738, i32* @fp, align 4
  ret i32 %v3_88a8

; uselistorder directives
  uselistorder i32 %v1_885c, { 1, 0 }
  uselistorder i32 %stack_var_-40.0.lcssa, { 1, 0 }
  uselistorder i32 %v1_8794, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder i8* %arg2, { 1, 2, 0, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8878, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 1, 0 }
  uselistorder label %dec_label_pc_8804, { 1, 0 }
  uselistorder label %dec_label_pc_87f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_87d8, { 1, 0 }
  uselistorder label %dec_label_pc_8784, { 1, 0 }
}

define i32 @printi(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %v3_88c0 = load i32, i32* @fp, align 4
  store i32 35016, i32* %stack_var_-4, align 4
  %v2_88c4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_88c4, i32* @fp, align 4
  %v1_88f8 = icmp slt i32 %arg2, 0
  %v2_88f8 = icmp eq i32 %arg2, 0
  br i1 %v2_88f8, label %dec_label_pc_8900, label %dec_label_pc_8934

dec_label_pc_8900:                                ; preds = %entry
  store i32 48, i32* %stack_var_-28, align 4
  %v5_8924 = bitcast i32* %stack_var_-28 to i8*
  %v6_8924 = call i32 @prints(i32 %arg1, i8* %v5_8924, i32 %arg5, i32 %arg6, i32 0)
  br label %dec_label_pc_8a94

dec_label_pc_8934:                                ; preds = %entry
  %v2_8938 = icmp eq i32 %arg4, 0
  br i1 %v2_8938, label %dec_label_pc_896c, label %dec_label_pc_8940

dec_label_pc_8940:                                ; preds = %dec_label_pc_8934
  %v7_8944 = icmp eq i32 %arg3, 10
  br i1 %v7_8944, label %dec_label_pc_894c, label %dec_label_pc_896c

dec_label_pc_894c:                                ; preds = %dec_label_pc_8940
  br i1 %v1_88f8, label %dec_label_pc_8958, label %dec_label_pc_896c

dec_label_pc_8958:                                ; preds = %dec_label_pc_894c
  %v1_8964 = sub i32 0, %arg2
  br label %dec_label_pc_896c

dec_label_pc_896c:                                ; preds = %dec_label_pc_894c, %dec_label_pc_8940, %dec_label_pc_8934, %dec_label_pc_8958
  %stack_var_-52.0 = phi i32 [ %arg2, %dec_label_pc_8934 ], [ %v1_8964, %dec_label_pc_8958 ], [ %arg2, %dec_label_pc_894c ], [ %arg2, %dec_label_pc_8940 ]
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8934 ], [ 1, %dec_label_pc_8958 ], [ 0, %dec_label_pc_894c ], [ 0, %dec_label_pc_8940 ]
  %tmp26 = bitcast i32* %stack_var_-17 to i8*
  store i8 0, i8* %tmp26, align 4
  %v2_8a004 = icmp eq i32 %stack_var_-52.0, 0
  br i1 %v2_8a004, label %dec_label_pc_8a08, label %dec_label_pc_8988.lr.ph

dec_label_pc_8988.lr.ph:                          ; preds = %dec_label_pc_896c
  %v1_89b0 = add i32 %arg7, -58
  br label %dec_label_pc_8988

dec_label_pc_8988:                                ; preds = %dec_label_pc_8988.lr.ph, %dec_label_pc_89c0
  %stack_var_-52.16 = phi i32 [ %stack_var_-52.0, %dec_label_pc_8988.lr.ph ], [ %v2_8994, %dec_label_pc_89c0 ]
  %stack_var_-68.05 = phi i8* [ %tmp26, %dec_label_pc_8988.lr.ph ], [ %v5_89c8, %dec_label_pc_89c0 ]
  %v2_8994 = udiv i32 %stack_var_-52.16, %arg3
  %v3_8994 = urem i32 %stack_var_-52.16, %arg3
  %v7_89a8 = icmp slt i32 %v3_8994, 10
  br i1 %v7_89a8, label %dec_label_pc_89c0, label %dec_label_pc_89ac

dec_label_pc_89ac:                                ; preds = %dec_label_pc_8988
  %v2_89b8 = add i32 %v3_8994, %v1_89b0
  br label %dec_label_pc_89c0

dec_label_pc_89c0:                                ; preds = %dec_label_pc_8988, %dec_label_pc_89ac
  %stack_var_-64.0 = phi i32 [ %v3_8994, %dec_label_pc_8988 ], [ %v2_89b8, %dec_label_pc_89ac ]
  %v4_89c0 = ptrtoint i8* %stack_var_-68.05 to i32
  %v1_89c4 = add i32 %v4_89c0, -1
  %v5_89c8 = inttoptr i32 %v1_89c4 to i8*
  %fold = add i32 %stack_var_-64.0, 48
  %v1_89e0 = trunc i32 %fold to i8
  store i8 %v1_89e0, i8* %v5_89c8, align 1
  %v2_8a00 = icmp ult i32 %stack_var_-52.16, %arg3
  br i1 %v2_8a00, label %dec_label_pc_8a08, label %dec_label_pc_8988

dec_label_pc_8a08:                                ; preds = %dec_label_pc_89c0, %dec_label_pc_896c
  %stack_var_-68.0.lcssa = phi i8* [ %tmp26, %dec_label_pc_896c ], [ %v5_89c8, %dec_label_pc_89c0 ]
  %v2_8a0c = icmp eq i32 %stack_var_-60.0, 0
  br i1 %v2_8a0c, label %dec_label_pc_8a70, label %dec_label_pc_8a14

dec_label_pc_8a14:                                ; preds = %dec_label_pc_8a08
  %v3_8a14 = load i32, i32* %stack_var_0, align 4
  %v2_8a18 = icmp eq i32 %v3_8a14, 0
  br i1 %v2_8a18, label %dec_label_pc_8a58, label %dec_label_pc_8a20

dec_label_pc_8a20:                                ; preds = %dec_label_pc_8a14
  %v1_8a24 = and i32 %arg6, 2
  %v2_8a28 = icmp eq i32 %v1_8a24, 0
  br i1 %v2_8a28, label %dec_label_pc_8a58, label %dec_label_pc_8a30

dec_label_pc_8a30:                                ; preds = %dec_label_pc_8a20
  %v2_8a38 = inttoptr i32 %arg1 to i32*
  %v3_8a38 = call i32 @printchar(i32* %v2_8a38, i32 45)
  %v3_8a48 = load i32, i32* %stack_var_0, align 4
  %v1_8a4c = add i32 %v3_8a48, -1
  store i32 %v1_8a4c, i32* %stack_var_0, align 4
  br label %dec_label_pc_8a70

dec_label_pc_8a58:                                ; preds = %dec_label_pc_8a20, %dec_label_pc_8a14
  %v4_8a58 = ptrtoint i8* %stack_var_-68.0.lcssa to i32
  %v1_8a5c = add i32 %v4_8a58, -1
  %v5_8a60 = inttoptr i32 %v1_8a5c to i8*
  store i8 45, i8* %v5_8a60, align 1
  br label %dec_label_pc_8a70

dec_label_pc_8a70:                                ; preds = %dec_label_pc_8a08, %dec_label_pc_8a30, %dec_label_pc_8a58
  %stack_var_-68.1 = phi i8* [ %stack_var_-68.0.lcssa, %dec_label_pc_8a08 ], [ %v5_8a60, %dec_label_pc_8a58 ], [ %stack_var_-68.0.lcssa, %dec_label_pc_8a30 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_8a08 ], [ 0, %dec_label_pc_8a58 ], [ 1, %dec_label_pc_8a30 ]
  %v3_8a78 = load i32, i32* %stack_var_0, align 4
  %v6_8a80 = call i32 @prints(i32 %arg1, i8* %stack_var_-68.1, i32 %v3_8a78, i32 %arg6, i32 ptrtoint (i32* @0 to i32))
  %v2_8a8c = add i32 %v6_8a80, %stack_var_-56.0
  br label %dec_label_pc_8a94

dec_label_pc_8a94:                                ; preds = %dec_label_pc_8900, %dec_label_pc_8a70
  %storemerge2 = phi i32 [ %v2_8a8c, %dec_label_pc_8a70 ], [ %v6_8924, %dec_label_pc_8900 ]
  store i32 %v3_88c0, i32* @fp, align 4
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i8* %stack_var_-68.0.lcssa, { 2, 0, 1 }
  uselistorder i8* %v5_89c8, { 0, 2, 1 }
  uselistorder i32 %v3_8994, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.16, { 0, 2, 1 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8a94, { 1, 0 }
  uselistorder label %dec_label_pc_8a70, { 2, 1, 0 }
  uselistorder label %dec_label_pc_89c0, { 1, 0 }
  uselistorder label %dec_label_pc_8988, { 1, 0 }
  uselistorder label %dec_label_pc_896c, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-18 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 35508, i32* %stack_var_-4, align 4
  %v2_8ab0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8ab0, i32* @fp, align 4
  %stack_var_-32.428 = inttoptr i32 %arg2 to i8*
  %v2_8e5c29 = load i8, i8* %stack_var_-32.428, align 1
  %v2_8e6031 = icmp eq i8 %v2_8e5c29, 0
  br i1 %v2_8e6031, label %dec_label_pc_8e68, label %dec_label_pc_8ad0.lr.ph

dec_label_pc_8ad0.lr.ph:                          ; preds = %entry
  %v5_8e14 = bitcast i32* %stack_var_-18 to i8*
  br label %dec_label_pc_8ad0

dec_label_pc_8ad0:                                ; preds = %dec_label_pc_8ad0.lr.ph, %dec_label_pc_8e4c
  %stack_var_-32.435 = phi i8* [ %stack_var_-32.428, %dec_label_pc_8ad0.lr.ph ], [ %stack_var_-32.4, %dec_label_pc_8e4c ]
  %stack_var_-32.4.in34 = phi i32 [ %arg2, %dec_label_pc_8ad0.lr.ph ], [ %v1_8e50, %dec_label_pc_8e4c ]
  %stack_var_-36.133 = phi i32 [ %arg3, %dec_label_pc_8ad0.lr.ph ], [ %stack_var_-36.0, %dec_label_pc_8e4c ]
  %stack_var_-44.132 = phi i32 [ 0, %dec_label_pc_8ad0.lr.ph ], [ %stack_var_-44.0, %dec_label_pc_8e4c ]
  %v2_8ad4 = load i8, i8* %stack_var_-32.435, align 1
  %v7_8ad8 = icmp eq i8 %v2_8ad4, 37
  br i1 %v7_8ad8, label %dec_label_pc_8ae0, label %dec_label_pc_8e2c

dec_label_pc_8ae0:                                ; preds = %dec_label_pc_8ad0
  %v1_8ae4 = add i32 %stack_var_-32.4.in34, 1
  %v5_8ae8 = inttoptr i32 %v1_8ae4 to i8*
  %v2_8b00 = load i8, i8* %v5_8ae8, align 1
  %v2_8b04 = icmp eq i8 %v2_8b00, 0
  br i1 %v2_8b04, label %dec_label_pc_8e68, label %dec_label_pc_8b0c

dec_label_pc_8b0c:                                ; preds = %dec_label_pc_8ae0
  %v2_8b10 = load i8, i8* %v5_8ae8, align 1
  %v7_8b14 = icmp eq i8 %v2_8b10, 37
  br i1 %v7_8b14, label %dec_label_pc_8e2c, label %dec_label_pc_8b1c

dec_label_pc_8b1c:                                ; preds = %dec_label_pc_8b0c
  %v2_8b20 = load i8, i8* %v5_8ae8, align 1
  %v7_8b24 = icmp eq i8 %v2_8b20, 45
  br i1 %v7_8b24, label %dec_label_pc_8b2c, label %dec_label_pc_8b5c.preheader

dec_label_pc_8b2c:                                ; preds = %dec_label_pc_8b1c
  %v1_8b30 = add i32 %stack_var_-32.4.in34, 2
  %v5_8b34 = inttoptr i32 %v1_8b30 to i8*
  br label %dec_label_pc_8b5c.preheader

dec_label_pc_8b5c.preheader:                      ; preds = %dec_label_pc_8b2c, %dec_label_pc_8b1c
  %stack_var_-32.0.ph = phi i8* [ %v5_8ae8, %dec_label_pc_8b1c ], [ %v5_8b34, %dec_label_pc_8b2c ]
  %stack_var_-48.0.ph = phi i32 [ 0, %dec_label_pc_8b1c ], [ 1, %dec_label_pc_8b2c ]
  %v4_8b5c2 = ptrtoint i8* %stack_var_-32.0.ph to i32
  %v2_8b603 = load i8, i8* %stack_var_-32.0.ph, align 1
  %v7_8b647 = icmp eq i8 %v2_8b603, 48
  br i1 %v7_8b647, label %dec_label_pc_8b44, label %dec_label_pc_8ba8.preheader

dec_label_pc_8b44:                                ; preds = %dec_label_pc_8b5c.preheader, %dec_label_pc_8b44
  %v4_8b5c9 = phi i32 [ %v1_8b48, %dec_label_pc_8b44 ], [ %v4_8b5c2, %dec_label_pc_8b5c.preheader ]
  %stack_var_-48.08 = phi i32 [ %v1_8b54, %dec_label_pc_8b44 ], [ %stack_var_-48.0.ph, %dec_label_pc_8b5c.preheader ]
  %v1_8b48 = add i32 %v4_8b5c9, 1
  %v5_8b4c = inttoptr i32 %v1_8b48 to i8*
  %v1_8b54 = or i32 %stack_var_-48.08, 2
  %v2_8b60 = load i8, i8* %v5_8b4c, align 1
  %v7_8b64 = icmp eq i8 %v2_8b60, 48
  br i1 %v7_8b64, label %dec_label_pc_8b44, label %dec_label_pc_8ba8.preheader

dec_label_pc_8ba8.preheader:                      ; preds = %dec_label_pc_8b44, %dec_label_pc_8b5c.preheader
  %stack_var_-48.0.lcssa = phi i32 [ %stack_var_-48.0.ph, %dec_label_pc_8b5c.preheader ], [ %v1_8b54, %dec_label_pc_8b44 ]
  %stack_var_-32.0.lcssa = phi i8* [ %stack_var_-32.0.ph, %dec_label_pc_8b5c.preheader ], [ %v5_8b4c, %dec_label_pc_8b44 ]
  %v4_8ba811 = ptrtoint i8* %stack_var_-32.0.lcssa to i32
  %v2_8bac12 = load i8, i8* %stack_var_-32.0.lcssa, align 1
  %tmp60 = icmp ult i8 %v2_8bac12, 48
  br i1 %tmp60, label %dec_label_pc_8bc8, label %dec_label_pc_8bb8

dec_label_pc_8b70:                                ; preds = %dec_label_pc_8bb8
  %v2_8b7c = mul i32 %stack_var_-52.019, 10
  %v2_8b88 = load i8, i8* %stack_var_-32.120, align 1
  %v3_8b88 = zext i8 %v2_8b88 to i32
  %v1_8b8c = add i32 %v2_8b7c, -48
  %v2_8b94 = add i32 %v1_8b8c, %v3_8b88
  %v1_8ba0 = add i32 %v4_8ba821, 1
  %v5_8ba4 = inttoptr i32 %v1_8ba0 to i8*
  %v2_8bac = load i8, i8* %v5_8ba4, align 1
  %tmp61 = icmp ult i8 %v2_8bac, 48
  br i1 %tmp61, label %dec_label_pc_8bc8, label %dec_label_pc_8bb8

dec_label_pc_8bb8:                                ; preds = %dec_label_pc_8ba8.preheader, %dec_label_pc_8b70
  %v4_8ba821 = phi i32 [ %v1_8ba0, %dec_label_pc_8b70 ], [ %v4_8ba811, %dec_label_pc_8ba8.preheader ]
  %stack_var_-32.120 = phi i8* [ %v5_8ba4, %dec_label_pc_8b70 ], [ %stack_var_-32.0.lcssa, %dec_label_pc_8ba8.preheader ]
  %stack_var_-52.019 = phi i32 [ %v2_8b94, %dec_label_pc_8b70 ], [ 0, %dec_label_pc_8ba8.preheader ]
  %v2_8bbc = load i8, i8* %stack_var_-32.120, align 1
  %tmp62 = icmp ult i8 %v2_8bbc, 58
  br i1 %tmp62, label %dec_label_pc_8b70, label %dec_label_pc_8bc8

dec_label_pc_8bc8:                                ; preds = %dec_label_pc_8b70, %dec_label_pc_8bb8, %dec_label_pc_8ba8.preheader
  %stack_var_-52.0.lcssa = phi i32 [ 0, %dec_label_pc_8ba8.preheader ], [ %v2_8b94, %dec_label_pc_8b70 ], [ %stack_var_-52.019, %dec_label_pc_8bb8 ]
  %stack_var_-32.1.lcssa = phi i8* [ %stack_var_-32.0.lcssa, %dec_label_pc_8ba8.preheader ], [ %v5_8ba4, %dec_label_pc_8b70 ], [ %stack_var_-32.120, %dec_label_pc_8bb8 ]
  %v2_8bcc = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8bd0 = icmp eq i8 %v2_8bcc, 115
  br i1 %v7_8bd0, label %dec_label_pc_8bd8, label %dec_label_pc_8c3c

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bc8
  %v1_8bdc = add i32 %stack_var_-36.133, 4
  %v1_8be8 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8be8 = load i32, i32* %v1_8be8, align 4
  %v2_8bf4 = icmp eq i32 %v2_8be8, 0
  br i1 %v2_8bf4, label %dec_label_pc_8c08, label %dec_label_pc_8bfc

dec_label_pc_8bfc:                                ; preds = %dec_label_pc_8bd8
  %v5_8c00 = inttoptr i32 %v2_8be8 to i8*
  br label %dec_label_pc_8c10

dec_label_pc_8c08:                                ; preds = %dec_label_pc_8bd8
  br label %dec_label_pc_8c10

dec_label_pc_8c10:                                ; preds = %dec_label_pc_8bfc, %dec_label_pc_8c08
  %storemerge = phi i8* [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_157a8.36, i32 0, i32 0), %dec_label_pc_8c08 ], [ %v5_8c00, %dec_label_pc_8bfc ]
  %v7_8c24 = call i32 @prints(i32 %tmp, i8* %storemerge, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 ptrtoint (i32* @0 to i32))
  %v2_8c30 = add i32 %v7_8c24, %stack_var_-44.132
  br label %dec_label_pc_8e4c

dec_label_pc_8c3c:                                ; preds = %dec_label_pc_8bc8
  %v2_8c40 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8c44 = icmp eq i8 %v2_8c40, 100
  br i1 %v7_8c44, label %dec_label_pc_8c4c, label %dec_label_pc_8ca0

dec_label_pc_8c4c:                                ; preds = %dec_label_pc_8c3c
  %v1_8c50 = add i32 %stack_var_-36.133, 4
  %v1_8c5c = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8c5c = load i32, i32* %v1_8c5c, align 4
  %v7_8c88 = call i32 @printi(i32 %tmp, i32 %v2_8c5c, i32 10, i32 1, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 97)
  %v2_8c94 = add i32 %v7_8c88, %stack_var_-44.132
  br label %dec_label_pc_8e4c

dec_label_pc_8ca0:                                ; preds = %dec_label_pc_8c3c
  %v2_8ca4 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8ca8 = icmp eq i8 %v2_8ca4, 120
  br i1 %v7_8ca8, label %dec_label_pc_8cb0, label %dec_label_pc_8d04

dec_label_pc_8cb0:                                ; preds = %dec_label_pc_8ca0
  %v1_8cb4 = add i32 %stack_var_-36.133, 4
  %v1_8cc0 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8cc0 = load i32, i32* %v1_8cc0, align 4
  %v7_8cec = call i32 @printi(i32 %tmp, i32 %v2_8cc0, i32 16, i32 0, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 97)
  %v2_8cf8 = add i32 %v7_8cec, %stack_var_-44.132
  br label %dec_label_pc_8e4c

dec_label_pc_8d04:                                ; preds = %dec_label_pc_8ca0
  %v2_8d08 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8d0c = icmp eq i8 %v2_8d08, 88
  br i1 %v7_8d0c, label %dec_label_pc_8d14, label %dec_label_pc_8d68

dec_label_pc_8d14:                                ; preds = %dec_label_pc_8d04
  %v1_8d18 = add i32 %stack_var_-36.133, 4
  %v1_8d24 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8d24 = load i32, i32* %v1_8d24, align 4
  %v7_8d50 = call i32 @printi(i32 %tmp, i32 %v2_8d24, i32 16, i32 0, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 65)
  %v2_8d5c = add i32 %v7_8d50, %stack_var_-44.132
  br label %dec_label_pc_8e4c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_8d04
  %v2_8d6c = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8d70 = icmp eq i8 %v2_8d6c, 117
  br i1 %v7_8d70, label %dec_label_pc_8d78, label %dec_label_pc_8dcc

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d7c = add i32 %stack_var_-36.133, 4
  %v1_8d88 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8d88 = load i32, i32* %v1_8d88, align 4
  %v7_8db4 = call i32 @printi(i32 %tmp, i32 %v2_8d88, i32 10, i32 0, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 97)
  %v2_8dc0 = add i32 %v7_8db4, %stack_var_-44.132
  br label %dec_label_pc_8e4c

dec_label_pc_8dcc:                                ; preds = %dec_label_pc_8d68
  %v2_8dd0 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8dd4 = icmp eq i8 %v2_8dd0, 99
  br i1 %v7_8dd4, label %dec_label_pc_8ddc, label %dec_label_pc_8e4c

dec_label_pc_8ddc:                                ; preds = %dec_label_pc_8dcc
  %v1_8de0 = add i32 %stack_var_-36.133, 4
  %v1_8dec = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8dec = load i32, i32* %v1_8dec, align 4
  %v1_8df0 = urem i32 %v2_8dec, 256
  store i32 %v1_8df0, i32* %stack_var_-18, align 4
  %v6_8e14 = call i32 @prints(i32 %tmp, i8* %v5_8e14, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 %v1_8de0)
  %v2_8e20 = add i32 %v6_8e14, %stack_var_-44.132
  br label %dec_label_pc_8e4c

dec_label_pc_8e2c:                                ; preds = %dec_label_pc_8ad0, %dec_label_pc_8b0c
  %stack_var_-32.2 = phi i8* [ %v5_8ae8, %dec_label_pc_8b0c ], [ %stack_var_-32.435, %dec_label_pc_8ad0 ]
  %v2_8e30 = load i8, i8* %stack_var_-32.2, align 1
  %v3_8e30 = zext i8 %v2_8e30 to i32
  %v3_8e3c = call i32 @printchar(i32* %arg1, i32 %v3_8e30)
  %v1_8e44 = add i32 %stack_var_-44.132, 1
  br label %dec_label_pc_8e4c

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8dcc, %dec_label_pc_8ddc, %dec_label_pc_8d78, %dec_label_pc_8d14, %dec_label_pc_8cb0, %dec_label_pc_8c4c, %dec_label_pc_8c10, %dec_label_pc_8e2c
  %stack_var_-44.0 = phi i32 [ %v1_8e44, %dec_label_pc_8e2c ], [ %v2_8c30, %dec_label_pc_8c10 ], [ %v2_8c94, %dec_label_pc_8c4c ], [ %v2_8cf8, %dec_label_pc_8cb0 ], [ %v2_8d5c, %dec_label_pc_8d14 ], [ %v2_8dc0, %dec_label_pc_8d78 ], [ %v2_8e20, %dec_label_pc_8ddc ], [ %stack_var_-44.132, %dec_label_pc_8dcc ]
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.133, %dec_label_pc_8e2c ], [ %v1_8bdc, %dec_label_pc_8c10 ], [ %v1_8c50, %dec_label_pc_8c4c ], [ %v1_8cb4, %dec_label_pc_8cb0 ], [ %v1_8d18, %dec_label_pc_8d14 ], [ %v1_8d7c, %dec_label_pc_8d78 ], [ %v1_8de0, %dec_label_pc_8ddc ], [ %stack_var_-36.133, %dec_label_pc_8dcc ]
  %stack_var_-32.3 = phi i8* [ %stack_var_-32.2, %dec_label_pc_8e2c ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8c10 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8c4c ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8cb0 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8d14 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8d78 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8ddc ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8dcc ]
  %v4_8e4c = ptrtoint i8* %stack_var_-32.3 to i32
  %v1_8e50 = add i32 %v4_8e4c, 1
  %stack_var_-32.4 = inttoptr i32 %v1_8e50 to i8*
  %v2_8e5c = load i8, i8* %stack_var_-32.4, align 1
  %v2_8e60 = icmp eq i8 %v2_8e5c, 0
  br i1 %v2_8e60, label %dec_label_pc_8e68, label %dec_label_pc_8ad0

dec_label_pc_8e68:                                ; preds = %dec_label_pc_8ae0, %dec_label_pc_8e4c, %entry
  %stack_var_-44.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-44.132, %dec_label_pc_8ae0 ], [ %stack_var_-44.0, %dec_label_pc_8e4c ]
  %v2_8e6c = icmp eq i32* %arg1, null
  br i1 %v2_8e6c, label %dec_label_pc_8e84, label %dec_label_pc_8e74

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e68
  %v2_8e78 = load i32, i32* %arg1, align 4
  %v3_8e80 = inttoptr i32 %v2_8e78 to i8*
  store i8 0, i8* %v3_8e80, align 1
  br label %dec_label_pc_8e84

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8e68, %dec_label_pc_8e74
  ret i32 %stack_var_-44.1.lcssa

; uselistorder directives
  uselistorder i8* %stack_var_-32.4, { 1, 0 }
  uselistorder i8* %stack_var_-32.1.lcssa, { 12, 11, 9, 7, 5, 3, 1, 10, 8, 6, 4, 2, 0 }
  uselistorder i32 %stack_var_-52.0.lcssa, { 1, 2, 3, 4, 5, 0 }
  uselistorder i8* %stack_var_-32.0.lcssa, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-48.0.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8b48, { 1, 0 }
  uselistorder i32 %stack_var_-48.0.ph, { 1, 0 }
  uselistorder i8* %v5_8ae8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_-44.132, { 0, 8, 7, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %stack_var_-36.133, { 13, 0, 11, 12, 9, 10, 7, 8, 5, 6, 3, 4, 1, 2 }
  uselistorder i32 %stack_var_-32.4.in34, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-18, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @printi, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32, i32)* @prints, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8e84, { 1, 0 }
  uselistorder label %dec_label_pc_8e68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8e4c, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8e2c, { 1, 0 }
  uselistorder label %dec_label_pc_8c10, { 1, 0 }
  uselistorder label %dec_label_pc_8bc8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8bb8, { 1, 0 }
  uselistorder label %dec_label_pc_8b44, { 1, 0 }
  uselistorder label %dec_label_pc_8ad0, { 1, 0 }
}

define i32 @szprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_8e9c = ptrtoint i32* %stack_var_0 to i32
  store i32 %arg3, i32* %stack_var_-8, align 4
  %v3_8ea4 = load i32, i32* @fp, align 4
  %v10_8ea4 = load i32, i32* @lr, align 4
  store i32 36524, i32* %stack_var_-16, align 4
  %v2_8ea8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_8ea8, i32* @fp, align 4
  store i32 %arg1, i32* %stack_var_-44, align 4
  %v2_8eb4 = ptrtoint i32* %stack_var_-8 to i32
  %v2_8ec0 = ptrtoint i32* %stack_var_-44 to i32
  %v14_8ecc = call i32 @print(i32* nonnull %stack_var_-44, i32 %arg2, i32 %v2_8eb4, i32 %v2_8ec0, i32 %arg1, i32 %v2_8eb4, i32 %v3_8ea4, i32 %v1_8e9c, i32 %v10_8ea4, i32 36524, i32 %arg2, i32 %arg3, i32 %arg4)
  ret i32 %v14_8ecc

; uselistorder directives
  uselistorder i32 %v2_8eb4, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @trim(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_8f04 = call i32 @strlen(i8* %arg1)
  %v2_8f44.pre = load i32, i32* @global_var_1f09c, align 4
  br label %dec_label_pc_8f24

dec_label_pc_8f24:                                ; preds = %dec_label_pc_8f24, %entry
  %stack_var_-24.0 = phi i32 [ 0, %entry ], [ %v1_8f1c, %dec_label_pc_8f24 ]
  %v2_8f30 = add i32 %stack_var_-24.0, %tmp
  %v1_8f34 = inttoptr i32 %v2_8f30 to i8*
  %v2_8f34 = load i8, i8* %v1_8f34, align 1
  %v3_8f34 = zext i8 %v2_8f34 to i32
  %v2_8f38 = mul nuw nsw i32 %v3_8f34, 2
  %v2_8f48 = add i32 %v2_8f38, %v2_8f44.pre
  %v1_8f4c = inttoptr i32 %v2_8f48 to i16*
  %v2_8f4c = load i16, i16* %v1_8f4c, align 2
  %v1_8f50 = and i16 %v2_8f4c, 32
  %v2_8f54 = icmp eq i16 %v1_8f50, 0
  %v1_8f1c = add i32 %stack_var_-24.0, 1
  br i1 %v2_8f54, label %dec_label_pc_8f6c.preheader, label %dec_label_pc_8f24

dec_label_pc_8f6c.preheader:                      ; preds = %dec_label_pc_8f24
  %v1_8f0c = add i32 %v3_8f04, -1
  %v5_8f7810 = icmp slt i32 %v1_8f0c, %stack_var_-24.0
  br i1 %v5_8f7810, label %dec_label_pc_8ffc.preheader, label %dec_label_pc_8f7c

dec_label_pc_8f60:                                ; preds = %dec_label_pc_8f7c
  %v1_8f64 = add i32 %stack_var_-20.011, -1
  %v5_8f78 = icmp slt i32 %v1_8f64, %stack_var_-24.0
  br i1 %v5_8f78, label %dec_label_pc_8ffc.preheader, label %dec_label_pc_8f7c

dec_label_pc_8f7c:                                ; preds = %dec_label_pc_8f6c.preheader, %dec_label_pc_8f60
  %stack_var_-20.011 = phi i32 [ %v1_8f64, %dec_label_pc_8f60 ], [ %v1_8f0c, %dec_label_pc_8f6c.preheader ]
  %v2_8f88 = add i32 %stack_var_-20.011, %tmp
  %v1_8f8c = inttoptr i32 %v2_8f88 to i8*
  %v2_8f8c = load i8, i8* %v1_8f8c, align 1
  %v3_8f8c = zext i8 %v2_8f8c to i32
  %v2_8f90 = mul nuw nsw i32 %v3_8f8c, 2
  %v2_8fa0 = add i32 %v2_8f90, %v2_8f44.pre
  %v1_8fa4 = inttoptr i32 %v2_8fa0 to i16*
  %v2_8fa4 = load i16, i16* %v1_8fa4, align 2
  %v1_8fa8 = and i16 %v2_8fa4, 32
  %v2_8fac = icmp eq i16 %v1_8fa8, 0
  br i1 %v2_8fac, label %dec_label_pc_8ffc.preheader, label %dec_label_pc_8f60

dec_label_pc_8ffc.preheader:                      ; preds = %dec_label_pc_8f60, %dec_label_pc_8f7c, %dec_label_pc_8f6c.preheader
  %stack_var_-20.0.lcssa = phi i32 [ %v1_8f0c, %dec_label_pc_8f6c.preheader ], [ %v1_8f64, %dec_label_pc_8f60 ], [ %stack_var_-20.011, %dec_label_pc_8f7c ]
  br label %dec_label_pc_8ffc

dec_label_pc_8fc0:                                ; preds = %dec_label_pc_8ffc
  %v2_8fe4 = add i32 %storemerge1, %tmp
  %v1_8fe8 = inttoptr i32 %v2_8fe4 to i8*
  %v2_8fe8 = load i8, i8* %v1_8fe8, align 1
  %v3_8fec = inttoptr i32 %v2_9020 to i8*
  store i8 %v2_8fe8, i8* %v3_8fec, align 1
  %v1_8ff4 = add i32 %storemerge1, 1
  br label %dec_label_pc_8ffc

dec_label_pc_8ffc:                                ; preds = %dec_label_pc_8ffc.preheader, %dec_label_pc_8fc0
  %storemerge1 = phi i32 [ %v1_8ff4, %dec_label_pc_8fc0 ], [ %stack_var_-24.0, %dec_label_pc_8ffc.preheader ]
  %v7_9008 = icmp sgt i32 %storemerge1, %stack_var_-20.0.lcssa
  %v2_9014 = sub i32 %storemerge1, %stack_var_-24.0
  %v2_9020 = add i32 %v2_9014, %tmp
  br i1 %v7_9008, label %dec_label_pc_900c, label %dec_label_pc_8fc0

dec_label_pc_900c:                                ; preds = %dec_label_pc_8ffc
  %v3_9028 = inttoptr i32 %v2_9020 to i8*
  store i8 0, i8* %v3_9028, align 1
  ret i32 %v3_8f04

; uselistorder directives
  uselistorder i32 %storemerge1, { 2, 3, 0, 1 }
  uselistorder i32 %v1_8f0c, { 1, 0, 2 }
  uselistorder i32 %stack_var_-24.0, { 1, 0, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_8ffc, { 1, 0 }
  uselistorder label %dec_label_pc_8ffc.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8f7c, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_905c = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_905c, i32* %arg2, align 4
  %v3_9074 = icmp eq i32 %v1_905c, -1
  %. = zext i1 %v3_9074 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @recvLine(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_90f8.lr.ph:
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-185 = alloca i8, align 1
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_90a8 = load i32, i32* @fp, align 4
  store i32 %v3_90a8, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @r2, align 4
  %v4_90d0 = call i32 @__GI_memset(i8* %arg2, i32 0)
  store i32 30, i32* %stack_var_-184, align 4
  %v2_90e4 = ptrtoint i32* %stack_var_-176 to i32
  br label %dec_label_pc_90f8

dec_label_pc_90f8:                                ; preds = %dec_label_pc_90f8.lr.ph, %dec_label_pc_90f8
  %storemerge527 = phi i32 [ 0, %dec_label_pc_90f8.lr.ph ], [ %v1_910c, %dec_label_pc_90f8 ]
  %v5_9104 = mul nuw nsw i32 %storemerge527, 4
  %v6_9104 = add i32 %v5_9104, %v2_90e4
  %v7_9104 = inttoptr i32 %v6_9104 to i32*
  store i32 0, i32* %v7_9104, align 4
  %v1_910c = add nuw nsw i32 %storemerge527, 1
  %tmp52 = icmp ult i32 %v1_910c, 32
  br i1 %tmp52, label %dec_label_pc_90f8, label %dec_label_pc_9120

dec_label_pc_9120:                                ; preds = %dec_label_pc_90f8
  %v13_90a8 = ptrtoint i32* %stack_var_-16 to i32
  %v3_9124 = udiv i32 %arg1, 32
  %v3_9130 = mul nuw nsw i32 %v3_9124, 4
  %v2_9138 = add nsw i32 %v3_9130, -160
  %v2_913c = add i32 %v2_9138, %v13_90a8
  %v1_9140 = inttoptr i32 %v2_913c to i32*
  %v2_9140 = load i32, i32* %v1_9140, align 4
  %v1_9148 = urem i32 %arg1, 32
  %v6_9150 = shl i32 1, %v1_9148
  %v2_9154 = or i32 %v2_9140, %v6_9150
  store i32 %v2_9154, i32* %v1_9140, align 4
  %v1_9174 = add i32 %arg1, 1
  %v2_9180 = ptrtoint i32* %stack_var_-184 to i32
  %v5_9194 = call i32 @__libc_select(i32 %v1_9174, i32 %v2_90e4, i32 0, i32 %v2_90e4, i32 %v2_9180)
  %v5_91a8 = icmp sgt i32 %v5_9194, 0
  br i1 %v5_91a8, label %dec_label_pc_9328.preheader, label %dec_label_pc_9294.preheader

dec_label_pc_9294.preheader:                      ; preds = %dec_label_pc_9120
  %v7_929c23 = icmp slt i32 %tmp33, 10
  br i1 %v7_929c23, label %dec_label_pc_91d4.lr.ph, label %dec_label_pc_9328.preheader

dec_label_pc_91d4.lr.ph:                          ; preds = %dec_label_pc_9294.preheader, %dec_label_pc_9288
  %stack_var_-44.024 = phi i32 [ %v1_928c, %dec_label_pc_9288 ], [ %tmp33, %dec_label_pc_9294.preheader ]
  store i32 30, i32* %stack_var_-184, align 4
  br label %dec_label_pc_91d4

dec_label_pc_91d4:                                ; preds = %dec_label_pc_91d4.lr.ph, %dec_label_pc_91d4
  %storemerge615 = phi i32 [ 0, %dec_label_pc_91d4.lr.ph ], [ %v1_91e8, %dec_label_pc_91d4 ]
  %v5_91e0 = mul nuw nsw i32 %storemerge615, 4
  %v6_91e0 = add i32 %v5_91e0, %v2_90e4
  %v7_91e0 = inttoptr i32 %v6_91e0 to i32*
  store i32 0, i32* %v7_91e0, align 4
  %v1_91e8 = add nuw nsw i32 %storemerge615, 1
  %tmp53 = icmp ult i32 %v1_91e8, 32
  br i1 %tmp53, label %dec_label_pc_91d4, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_91d4
  %v2_921c = load i32, i32* %v1_9140, align 4
  %v2_9230 = or i32 %v2_921c, %v6_9150
  store i32 %v2_9230, i32* %v1_9140, align 4
  %v5_9270 = call i32 @__libc_select(i32 %v1_9174, i32 %v2_90e4, i32 0, i32 %v2_90e4, i32 %v2_9180)
  %v5_9284 = icmp sgt i32 %v5_9270, 0
  br i1 %v5_9284, label %dec_label_pc_9328.preheader, label %dec_label_pc_9288

dec_label_pc_9288:                                ; preds = %dec_label_pc_91fc
  %v1_928c = add nsw i32 %stack_var_-44.024, 1
  %v7_929c = icmp slt i32 %v1_928c, 10
  br i1 %v7_929c, label %dec_label_pc_91d4.lr.ph, label %dec_label_pc_9328.preheader

dec_label_pc_9328.preheader:                      ; preds = %dec_label_pc_9288, %dec_label_pc_91fc, %dec_label_pc_9294.preheader, %dec_label_pc_9120
  %v2_92bc = ptrtoint i8* %stack_var_-185 to i32
  %not.v7_933057 = icmp sgt i32 %arg3, 1
  %v2_934859 = icmp eq i1 %not.v7_933057, false
  br i1 %v2_934859, label %dec_label_pc_9350, label %dec_label_pc_92b4

dec_label_pc_92b4:                                ; preds = %dec_label_pc_9328.preheader, %dec_label_pc_931c
  %v1_932c62.in = phi i32 [ %v1_932c62, %dec_label_pc_931c ], [ %arg3, %dec_label_pc_9328.preheader ]
  %stack_var_-40.061 = phi i8* [ %v5_930c, %dec_label_pc_931c ], [ %arg2, %dec_label_pc_9328.preheader ]
  %stack_var_-36.060 = phi i32 [ %v1_9320, %dec_label_pc_931c ], [ 0, %dec_label_pc_9328.preheader ]
  %v1_932c62 = add i32 %v1_932c62.in, -1
  %v2_92b8 = load i32, i32* @global_var_1f320.41, align 4
  %v5_92d0 = call i32 @__libc_recv(i32 %v2_92b8, i32 %v2_92bc, i32 1, i32 0, i32 %v1_932c62)
  %v7_92d8 = icmp eq i32 %v5_92d0, 1
  br i1 %v7_92d8, label %dec_label_pc_92f8, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92b4
  store i8 0, i8* %stack_var_-40.061, align 1
  br label %dec_label_pc_9364

dec_label_pc_92f8:                                ; preds = %dec_label_pc_92b4
  %v3_92f8 = load i8, i8* %stack_var_-185, align 1
  %v4_92fc = ptrtoint i8* %stack_var_-40.061 to i32
  store i8 %v3_92f8, i8* %stack_var_-40.061, align 1
  %v1_9308 = add i32 %v4_92fc, 1
  %v5_930c = inttoptr i32 %v1_9308 to i8*
  %v3_9310 = load i8, i8* %stack_var_-185, align 1
  %v7_9314 = icmp eq i8 %v3_9310, 10
  br i1 %v7_9314, label %dec_label_pc_9350, label %dec_label_pc_931c

dec_label_pc_931c:                                ; preds = %dec_label_pc_92f8
  %v1_9320 = add i32 %stack_var_-36.060, 1
  %not.v7_9330 = icmp sgt i32 %v1_932c62, 1
  %v2_9348 = icmp eq i1 %not.v7_9330, false
  br i1 %v2_9348, label %dec_label_pc_9350, label %dec_label_pc_92b4

dec_label_pc_9350:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_931c, %dec_label_pc_9328.preheader
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_9328.preheader ], [ %v1_9320, %dec_label_pc_931c ], [ %stack_var_-36.060, %dec_label_pc_92f8 ]
  %stack_var_-40.1 = phi i8* [ %arg2, %dec_label_pc_9328.preheader ], [ %v5_930c, %dec_label_pc_931c ], [ %v5_930c, %dec_label_pc_92f8 ]
  store i8 0, i8* %stack_var_-40.1, align 1
  br label %dec_label_pc_9364

dec_label_pc_9364:                                ; preds = %dec_label_pc_92e0, %dec_label_pc_9350
  %storemerge = phi i32 [ -1, %dec_label_pc_92e0 ], [ %stack_var_-36.0.lcssa, %dec_label_pc_9350 ]
  %v2_9370 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_9370, i32* @fp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_932c62, { 1, 0, 2 }
  uselistorder i8* %stack_var_-40.061, { 1, 2, 0 }
  uselistorder i32 %v1_928c, { 1, 0 }
  uselistorder i32 %storemerge615, { 1, 0 }
  uselistorder i32 %storemerge527, { 1, 0 }
  uselistorder i32 %v2_90e4, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-184, { 0, 2, 1 }
  uselistorder i8* %stack_var_-185, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9364, { 1, 0 }
  uselistorder label %dec_label_pc_9350, { 1, 0, 2 }
  uselistorder label %dec_label_pc_92b4, { 1, 0 }
  uselistorder label %dec_label_pc_91d4, { 1, 0 }
  uselistorder label %dec_label_pc_91d4.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_90f8, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg4, i32* @r3, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_9380 = load i32, i32* @fp, align 4
  store i32 %v3_9380, i32* %stack_var_-16, align 4
  %v13_9380 = ptrtoint i32* %stack_var_-16 to i32
  %v2_93a8 = call i32 @__libc_fcntl(i32 %arg1, i32 3)
  %v1_93b8 = or i32 %v2_93a8, 2048
  store i32 %v1_93b8, i32* @r3, align 4
  %v2_93cc = call i32 @__libc_fcntl(i32 %arg1, i32 4)
  store i32 2, i32* %stack_var_-48, align 4
  %v3_93e0 = urem i32 %arg3, 65536
  %v1_93e8 = call i32 @__GI_htons(i32 %v3_93e0)
  %v3_9408 = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-44)
  %v2_9410 = icmp eq i32 %v3_9408, 0
  br i1 %v2_9410, label %dec_label_pc_9424, label %dec_label_pc_9418

dec_label_pc_9418:                                ; preds = %entry
  br label %dec_label_pc_95dc

dec_label_pc_9424:                                ; preds = %entry
  store i32 8, i32* @r2, align 4
  %v2_9438 = bitcast i32* %stack_var_-40 to i8*
  %v3_9438 = call i32 @__GI_memset(i8* %v2_9438, i32 0)
  %v2_943c = ptrtoint i32* %stack_var_-48 to i32
  %v3_944c = call i32 @__libc_connect(i32 %arg1, i32 %v2_943c, i32 16)
  store i32 %v3_944c, i32* @r3, align 4
  %v1_945c = icmp slt i32 %v3_944c, 0
  br i1 %v1_945c, label %dec_label_pc_9464, label %dec_label_pc_95a0

dec_label_pc_9464:                                ; preds = %dec_label_pc_9424
  %v0_9464 = call i32 @__GI___errno_location()
  %v1_946c = inttoptr i32 %v0_9464 to i32*
  %v2_946c = load i32, i32* %v1_946c, align 4
  %v7_9470 = icmp eq i32 %v2_946c, 115
  br i1 %v7_9470, label %dec_label_pc_949c.lr.ph, label %dec_label_pc_9594

dec_label_pc_949c.lr.ph:                          ; preds = %dec_label_pc_9464
  store i32 %arg4, i32* %stack_var_-184, align 4
  %v2_9488 = ptrtoint i32* %stack_var_-176 to i32
  br label %dec_label_pc_949c

dec_label_pc_949c:                                ; preds = %dec_label_pc_949c.lr.ph, %dec_label_pc_949c
  %storemerge14 = phi i32 [ 0, %dec_label_pc_949c.lr.ph ], [ %v1_94b0, %dec_label_pc_949c ]
  %v5_94a8 = mul nuw nsw i32 %storemerge14, 4
  %v6_94a8 = add i32 %v5_94a8, %v2_9488
  %v7_94a8 = inttoptr i32 %v6_94a8 to i32*
  store i32 0, i32* %v7_94a8, align 4
  %v1_94b0 = add nuw nsw i32 %storemerge14, 1
  %tmp28 = icmp ult i32 %v1_94b0, 32
  br i1 %tmp28, label %dec_label_pc_949c, label %dec_label_pc_94c4

dec_label_pc_94c4:                                ; preds = %dec_label_pc_949c
  %v3_94c8 = udiv i32 %arg1, 32
  %v3_94d4 = mul nuw nsw i32 %v3_94c8, 4
  %v2_94dc = add nsw i32 %v3_94d4, -160
  %v2_94e0 = add i32 %v2_94dc, %v13_9380
  %v1_94e4 = inttoptr i32 %v2_94e0 to i32*
  %v2_94e4 = load i32, i32* %v1_94e4, align 4
  %v1_94ec = urem i32 %arg1, 32
  %v6_94f4 = shl i32 1, %v1_94ec
  %v2_94f8 = or i32 %v2_94e4, %v6_94f4
  store i32 %v2_94f8, i32* %v1_94e4, align 4
  %v1_9518 = add i32 %arg1, 1
  %v2_9520 = ptrtoint i32* %stack_var_-184 to i32
  %v5_9538 = call i32 @__libc_select(i32 %v1_9518, i32 0, i32 %v2_9488, i32 0, i32 %v2_9520)
  %tmp29 = icmp slt i32 %v5_9538, 1
  br i1 %tmp29, label %dec_label_pc_9588, label %dec_label_pc_9548

dec_label_pc_9548:                                ; preds = %dec_label_pc_94c4
  store i32 4, i32* %stack_var_-188, align 4
  %v2_9550 = ptrtoint i32* %stack_var_-192 to i32
  %v2_9554 = ptrtoint i32* %stack_var_-188 to i32
  %v5_956c = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_9550, i32 %v2_9554)
  %v3_9570 = load i32, i32* %stack_var_-192, align 4
  store i32 %v3_9570, i32* @r3, align 4
  %v2_9574 = icmp eq i32 %v3_9570, 0
  br i1 %v2_9574, label %dec_label_pc_95a0, label %dec_label_pc_957c

dec_label_pc_957c:                                ; preds = %dec_label_pc_9548
  br label %dec_label_pc_95dc

dec_label_pc_9588:                                ; preds = %dec_label_pc_94c4
  br label %dec_label_pc_95dc

dec_label_pc_9594:                                ; preds = %dec_label_pc_9464
  br label %dec_label_pc_95dc

dec_label_pc_95a0:                                ; preds = %dec_label_pc_9424, %dec_label_pc_9548
  %v2_95ac = call i32 @__libc_fcntl(i32 %arg1, i32 3)
  %v1_95bc = and i32 %v2_95ac, -2049
  store i32 %v1_95bc, i32* @r3, align 4
  %v2_95d0 = call i32 @__libc_fcntl(i32 %arg1, i32 4)
  br label %dec_label_pc_95dc

dec_label_pc_95dc:                                ; preds = %dec_label_pc_9594, %dec_label_pc_9588, %dec_label_pc_957c, %dec_label_pc_9418, %dec_label_pc_95a0
  %stack_var_-212.0 = phi i32 [ 0, %dec_label_pc_9588 ], [ 1, %dec_label_pc_95a0 ], [ 0, %dec_label_pc_957c ], [ 0, %dec_label_pc_9594 ], [ 0, %dec_label_pc_9418 ]
  ret i32 %stack_var_-212.0

; uselistorder directives
  uselistorder i32 %storemerge14, { 1, 0 }
  uselistorder i32 %v2_9488, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0 }
  uselistorder i32* %stack_var_-184, { 1, 0 }
  uselistorder i32* %stack_var_-188, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 4, 5, 1, 0, 6, 7, 8 }
  uselistorder label %dec_label_pc_95dc, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_95a0, { 1, 0 }
  uselistorder label %dec_label_pc_949c, { 1, 0 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v3_95f4 = load i32, i32* @r4, align 4
  %v6_95f4 = load i32, i32* @r5, align 4
  %v9_95f4 = load i32, i32* @r6, align 4
  %v12_95f4 = load i32, i32* @fp, align 4
  store i32 38396, i32* %stack_var_-4, align 4
  %v2_95f8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_95f8, i32* @fp, align 4
  %v0_9600 = call i32 @__libc_fork()
  %v2_9610 = icmp eq i32 %v0_9600, 0
  br i1 %v2_9610, label %dec_label_pc_977c, label %dec_label_pc_9624

dec_label_pc_9624:                                ; preds = %entry
  %v2_9628 = load i32, i32* @global_var_1f318.43, align 4
  %v5_9628 = load i32, i32* @global_var_1f31c.44, align 4
  %v2_9634 = add i32 %v2_9628, 1
  %v3_9634 = icmp eq i32 %v2_9634, 0
  %v4_9638 = zext i1 %v3_9634 to i32
  %v5_9638 = add i32 %v4_9638, %v5_9628
  store i32 %v2_9634, i32* @global_var_1f318.43, align 4
  store i32 %v5_9638, i32* @global_var_1f31c.44, align 4
  %v2_9654 = add i32 %v2_9628, 2
  %v3_9654 = icmp eq i32 %v2_9634, -1
  %v4_9658 = zext i1 %v3_9654 to i32
  %v5_9658 = add i32 %v5_9638, %v4_9658
  %v3_965c = udiv i32 %v2_9654, 1073741824
  %v3_9660 = mul i32 %v5_9658, 4
  %v2_9664 = or i32 %v3_9660, %v3_965c
  store i32 %v2_9664, i32* @r4, align 4
  %v3_9668 = mul i32 %v2_9654, 4
  %v1_9670 = call i32 @malloc(i32 %v3_9668)
  br label %dec_label_pc_96c8

dec_label_pc_9688:                                ; preds = %dec_label_pc_96c8, %dec_label_pc_9714
  %v3_968c = mul i32 %storemerge3, 4
  %v2_9698 = add i32 %v3_968c, %v1_9670
  %v2_96ac = load i32, i32* @global_var_21568.46, align 4
  %v2_96b0 = add i32 %v2_96ac, %v3_968c
  %v1_96b4 = inttoptr i32 %v2_96b0 to i32*
  %v2_96b4 = load i32, i32* %v1_96b4, align 4
  %v2_96b8 = inttoptr i32 %v2_9698 to i32*
  store i32 %v2_96b4, i32* %v2_96b8, align 4
  %v1_96c0 = add i32 %storemerge3, 1
  br label %dec_label_pc_96c8

dec_label_pc_96c8:                                ; preds = %dec_label_pc_9624, %dec_label_pc_9688
  %storemerge3 = phi i32 [ 0, %dec_label_pc_9624 ], [ %v1_96c0, %dec_label_pc_9688 ]
  %v2_96e0 = load i32, i32* @global_var_1f318.43, align 4
  %v5_96e0 = load i32, i32* @global_var_1f31c.44, align 4
  %v2_96f4 = add i32 %v2_96e0, -1
  %v3_96f4 = icmp ne i32 %v2_96e0, 0
  %v3_96f8 = add i32 %v5_96e0, -1
  %v5_96f8 = sext i1 %v3_96f4 to i32
  %v9_970c = icmp eq i32 %v3_96f8, %v5_96f8
  br i1 %v9_970c, label %dec_label_pc_9714, label %dec_label_pc_9688

dec_label_pc_9714:                                ; preds = %dec_label_pc_96c8
  store i32 %v2_96f4, i32* @r5, align 4
  store i32 %storemerge3, i32* @r6, align 4
  %tmp = icmp ugt i32 %v2_96f4, %storemerge3
  br i1 %tmp, label %dec_label_pc_9688, label %dec_label_pc_9734

dec_label_pc_9734:                                ; preds = %dec_label_pc_9714
  store i32 %v5_96e0, i32* @r4, align 4
  %v3_973c = mul i32 %v2_96e0, 4
  %v1_9740 = add i32 %v1_9670, -4
  %v2_974c = add i32 %v1_9740, %v3_973c
  %v2_9754 = inttoptr i32 %v2_974c to i32*
  store i32 %v0_9600, i32* %v2_9754, align 4
  %v2_975c = load i32, i32* @global_var_21568.46, align 4
  store i32 %v2_975c, i32* @r0, align 4
  %v0_9764 = call i32 @free()
  store i32 %v1_9670, i32* @global_var_21568.46, align 4
  br label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %entry, %dec_label_pc_9734
  store i32 %v3_95f4, i32* @r4, align 4
  store i32 %v6_95f4, i32* @r5, align 4
  store i32 %v9_95f4, i32* @r6, align 4
  store i32 %v12_95f4, i32* @fp, align 4
  ret i32 %v0_9600

; uselistorder directives
  uselistorder i32 %storemerge3, { 0, 2, 1, 3 }
  uselistorder i32 %v3_968c, { 1, 0 }
  uselistorder i32 %v1_9670, { 2, 0, 1 }
  uselistorder i32 %v2_9634, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_977c, { 1, 0 }
  uselistorder label %dec_label_pc_96c8, { 1, 0 }
  uselistorder label %dec_label_pc_9688, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_979c = load i32, i32* @fp, align 4
  store i32 %v3_979c, i32* %stack_var_-16, align 4
  store i32 38820, i32* %stack_var_-4, align 4
  %v2_97a0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_97a0, i32* @fp, align 4
  store i32 %arg4, i32* %stack_var_-104, align 4
  %v8_97c0 = icmp sgt i32 %arg4, 4096
  br i1 %v8_97c0, label %dec_label_pc_9954, label %dec_label_pc_97c4

dec_label_pc_97c4:                                ; preds = %entry
  %v13_979c = ptrtoint i32* %stack_var_-16 to i32
  %v3_97d0 = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_97e0 = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* @r0, align 4
  %v1_97f4 = call i32 @__GI_gethostbyname(i32 %arg1)
  %v2_9800 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_9800, i32* @r0, align 4
  %v2_980c = call i32 @bzero(i32 %v2_9800, i32 16)
  %v1_9814 = add i32 %v1_97f4, 16
  %v2_9814 = inttoptr i32 %v1_9814 to i32*
  %v3_9814 = load i32, i32* %v2_9814, align 4
  %v1_9818 = inttoptr i32 %v3_9814 to i32*
  %v2_9818 = load i32, i32* %v1_9818, align 4
  %v1_9820 = add i32 %v1_97f4, 12
  %v2_9820 = inttoptr i32 %v1_9820 to i32*
  %v3_9820 = load i32, i32* %v2_9820, align 4
  store i32 %v3_9820, i32* @r2, align 4
  %v2_982c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_982c, i32* @r3, align 4
  %v4_9838 = call i32 @bcopy(i32 %v2_9818, i32 %v2_982c, i32 %v3_9820, i32 %v2_982c)
  %v1_9840 = add i32 %v1_97f4, 8
  %v2_9840 = inttoptr i32 %v1_9840 to i32*
  %v3_9840 = load i32, i32* %v2_9840, align 4
  %v3_9848 = urem i32 %v3_9840, 65536
  store i32 %v3_9848, i32* %stack_var_-56, align 4
  %v2_98a4 = ptrtoint i32* %stack_var_-88 to i32
  %v2_98b0 = bitcast i32* %stack_var_-88 to i8*
  %v2_9918 = add i32 %v2_97e0, %arg3
  %v2_98c0 = add i32 %v13_979c, -72
  br label %dec_label_pc_9868

dec_label_pc_9868:                                ; preds = %dec_label_pc_9944, %dec_label_pc_97c4
  %storemerge1 = phi i32 [ 0, %dec_label_pc_97c4 ], [ %v1_9948, %dec_label_pc_9944 ]
  %tmp = icmp ult i32 %storemerge1, 50
  br i1 %tmp, label %dec_label_pc_9944, label %dec_label_pc_9874

dec_label_pc_9874:                                ; preds = %dec_label_pc_9868
  %v2_9878 = call i32 @__GI_time(i32* null)
  %v1_9884 = call i32 @srand(i32 %v2_9878)
  %v1_9888 = call i32 @rand_init(i32 %v1_9884)
  %v0_988c = call i32 @rand_next()
  %v1_9894 = mul i32 %v0_988c, 4
  %v3_9898 = and i32 %v1_9894, 12
  %v1_989c = add nuw nsw i32 %v3_9898, 12
  %v3_98b0 = call i32 @rand_alphastr(i8* %v2_98b0, i32 %v1_989c)
  %v2_98c4 = add i32 %v2_98c0, %v1_989c
  %v3_98cc = inttoptr i32 %v2_98c4 to i8*
  store i8 0, i8* %v3_98cc, align 4
  %v3_98d8 = load i32, i32* %stack_var_-104, align 4
  %v5_98ec = call i32 @__libc_send(i32 %v3_97d0, i32 %v2_98a4, i32 %v3_98d8, i32 0, i32 %v2_98a4)
  %v3_9900 = call i32 @__libc_connect(i32 %v3_97d0, i32 %v2_9800, i32 16)
  %v2_9908 = call i32 @__GI_time(i32* null)
  %v5_9920 = icmp slt i32 %v2_9908, %v2_9918
  br i1 %v5_9920, label %dec_label_pc_993c, label %dec_label_pc_9924

dec_label_pc_9924:                                ; preds = %dec_label_pc_9874
  %v1_9928 = call i32 @__GI_close(i32 %v3_97d0)
  store i32 %v2_98a4, i32* @r0, align 4
  %v0_9930 = call i32 @free()
  %v1_9938 = call i32 @__GI__exit(i32 0)
  br label %dec_label_pc_993c

dec_label_pc_993c:                                ; preds = %dec_label_pc_9874, %dec_label_pc_9924
  br label %dec_label_pc_9944

dec_label_pc_9944:                                ; preds = %dec_label_pc_9868, %dec_label_pc_993c
  %stack_var_-28.0 = phi i32 [ %storemerge1, %dec_label_pc_9868 ], [ 0, %dec_label_pc_993c ]
  %v1_9948 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_9868

dec_label_pc_9954:                                ; preds = %entry
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v2_9800, { 0, 2, 1 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9944, { 1, 0 }
  uselistorder label %dec_label_pc_993c, { 1, 0 }
}

define i32 @processCmd(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-4 = alloca i32, align 4
  %v6_9964 = load i32, i32* @fp, align 4
  store i32 39276, i32* %stack_var_-4, align 4
  %v2_9968 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9968, i32* @fp, align 4
  %v2_997c = load i32, i32* %arg2, align 4
  store i32 ptrtoint ([6 x i32]* @global_var_157b0.48 to i32), i32* @r1, align 4
  %v2_9988 = inttoptr i32 %v2_997c to i8*
  %v3_9988 = call i32 @__GI_strcoll(i8* %v2_9988, i32 ptrtoint ([6 x i32]* @global_var_157b0.48 to i32))
  %v2_9990 = icmp eq i32 %v3_9988, 0
  br i1 %v2_9990, label %dec_label_pc_9998, label %dec_label_pc_9abc

dec_label_pc_9998:                                ; preds = %entry
  %v7_99a0 = icmp slt i32 %arg1, 5
  br i1 %v7_99a0, label %dec_label_pc_9bd4, label %dec_label_pc_99a4

dec_label_pc_99a4:                                ; preds = %dec_label_pc_9998
  %v1_99a8 = add i32 %tmp, 4
  %v1_99ac = inttoptr i32 %v1_99a8 to i32*
  %v2_99ac = load i32, i32* %v1_99ac, align 4
  %v1_99b8 = add i32 %tmp, 8
  %v1_99bc = inttoptr i32 %v1_99b8 to i32*
  %v2_99bc = load i32, i32* %v1_99bc, align 4
  store i32 %v2_99bc, i32* @r0, align 4
  %v1_99c4 = call i32 @atol(i32 %v2_99bc)
  %v1_99d4 = add i32 %tmp, 12
  %v1_99d8 = inttoptr i32 %v1_99d4 to i32*
  %v2_99d8 = load i32, i32* %v1_99d8, align 4
  store i32 %v2_99d8, i32* @r0, align 4
  %v1_99e0 = call i32 @atol(i32 %v2_99d8)
  %v1_99f0 = add i32 %tmp, 16
  %v1_99f4 = inttoptr i32 %v1_99f0 to i32*
  %v2_99f4 = load i32, i32* %v1_99f4, align 4
  store i32 %v2_99f4, i32* @r0, align 4
  %v1_99fc = call i32 @atol(i32 %v2_99f4)
  store i32 %v2_99ac, i32* @r0, align 4
  %v2_9a14 = call i32 @__GI_strchr(i32 %v2_99ac, i32 44)
  store i32 %v2_9a14, i32* @r0, align 4
  %v2_9a1c = icmp eq i32 %v2_9a14, 0
  br i1 %v2_9a1c, label %dec_label_pc_9a90, label %dec_label_pc_9a24

dec_label_pc_9a24:                                ; preds = %dec_label_pc_99a4
  %v2_9a30 = call i32 @__GI_strtok(i32 %v2_99ac, i32 ptrtoint ([5 x i32]* @global_var_157b4.50 to i32))
  store i32 %v2_9a30, i32* @r0, align 4
  %v2_9a846 = icmp eq i32 %v2_9a30, 0
  br i1 %v2_9a846, label %dec_label_pc_9abc, label %dec_label_pc_9a40

dec_label_pc_9a40:                                ; preds = %dec_label_pc_9a24, %dec_label_pc_9a6c
  %storemerge47 = phi i32 [ %v2_9a74, %dec_label_pc_9a6c ], [ %v2_9a30, %dec_label_pc_9a24 ]
  %v0_9a40 = call i32 @listFork()
  %v2_9a48 = icmp eq i32 %v0_9a40, 0
  br i1 %v2_9a48, label %dec_label_pc_9a50, label %dec_label_pc_9a6c

dec_label_pc_9a50:                                ; preds = %dec_label_pc_9a40
  %v4_9a60 = call i32 @sendSTD(i32 %storemerge47, i32 %v1_99c4, i32 %v1_99e0, i32 %v1_99fc)
  %v1_9a68 = call i32 @__GI__exit(i32 0)
  br label %dec_label_pc_9a6c

dec_label_pc_9a6c:                                ; preds = %dec_label_pc_9a40, %dec_label_pc_9a50
  %v2_9a74 = call i32 @__GI_strtok(i32 0, i32 ptrtoint ([5 x i32]* @global_var_157b4.50 to i32))
  store i32 %v2_9a74, i32* @r0, align 4
  %v2_9a84 = icmp eq i32 %v2_9a74, 0
  br i1 %v2_9a84, label %dec_label_pc_9abc, label %dec_label_pc_9a40

dec_label_pc_9a90:                                ; preds = %dec_label_pc_99a4
  %v0_9a90 = call i32 @listFork()
  %v2_9a98 = icmp eq i32 %v0_9a90, 0
  br i1 %v2_9a98, label %dec_label_pc_9aa0, label %dec_label_pc_9bd4

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9a90
  %v4_9ab0 = call i32 @sendSTD(i32 %v2_99ac, i32 %v1_99c4, i32 %v1_99e0, i32 %v1_99fc)
  %v1_9ab8 = call i32 @__GI__exit(i32 0)
  br label %dec_label_pc_9abc

dec_label_pc_9abc:                                ; preds = %dec_label_pc_9a6c, %dec_label_pc_9a24, %entry, %dec_label_pc_9aa0
  %v2_9ac0 = load i32, i32* %arg2, align 4
  store i32 ptrtoint ([4 x i32]* @global_var_157b8.52 to i32), i32* @r1, align 4
  %v2_9acc = inttoptr i32 %v2_9ac0 to i8*
  %v3_9acc = call i32 @__GI_strcoll(i8* %v2_9acc, i32 ptrtoint ([4 x i32]* @global_var_157b8.52 to i32))
  store i32 %v3_9acc, i32* @r0, align 4
  %v2_9ad4 = icmp eq i32 %v3_9acc, 0
  br i1 %v2_9ad4, label %dec_label_pc_9adc, label %dec_label_pc_9bd4

dec_label_pc_9adc:                                ; preds = %dec_label_pc_9abc
  br label %dec_label_pc_9b80

dec_label_pc_9af0:                                ; preds = %dec_label_pc_9b80, %dec_label_pc_9bb4
  %v3_9af4 = mul i32 %v3_9bc8, 4
  %v2_9b00 = load i32, i32* @global_var_21568.46, align 4
  %v2_9b04 = add i32 %v2_9b00, %v3_9af4
  %v1_9b08 = inttoptr i32 %v2_9b04 to i32*
  %v2_9b08 = load i32, i32* %v1_9b08, align 4
  %v2_9b0c = icmp eq i32 %v2_9b08, 0
  br i1 %v2_9b0c, label %dec_label_pc_9b74, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9af0
  %v2_9b2c = load i32, i32* %v1_9b08, align 4
  %v0_9b30 = call i32 @__GI_getpid()
  store i32 %v0_9b30, i32* @r0, align 4
  %v9_9b38 = icmp eq i32 %v2_9b2c, %v0_9b30
  br i1 %v9_9b38, label %dec_label_pc_9b74, label %dec_label_pc_9b40

dec_label_pc_9b40:                                ; preds = %dec_label_pc_9b14
  %v2_9b50 = load i32, i32* @global_var_21568.46, align 4
  %v2_9b54 = add i32 %v2_9b50, %v3_9af4
  %v1_9b58 = inttoptr i32 %v2_9b54 to i32*
  %v2_9b58 = load i32, i32* %v1_9b58, align 4
  %v2_9b64 = call i32 @kill(i32 %v2_9b58, i32 9)
  store i32 %v2_9b64, i32* @r0, align 4
  %v1_9b6c = add i32 %stack_var_-32.1, 1
  br label %dec_label_pc_9b74

dec_label_pc_9b74:                                ; preds = %dec_label_pc_9b14, %dec_label_pc_9af0, %dec_label_pc_9b40
  %v1_9bdc9 = phi i32 [ %v1_9bdc10, %dec_label_pc_9af0 ], [ %v0_9b30, %dec_label_pc_9b14 ], [ %v2_9b64, %dec_label_pc_9b40 ]
  %stack_var_-32.0 = phi i32 [ %stack_var_-32.1, %dec_label_pc_9af0 ], [ %stack_var_-32.1, %dec_label_pc_9b14 ], [ %v1_9b6c, %dec_label_pc_9b40 ]
  %v1_9b78 = add i32 %v3_9bc8, 1
  br label %dec_label_pc_9b80

dec_label_pc_9b80:                                ; preds = %dec_label_pc_9adc, %dec_label_pc_9b74
  %v1_9bdc10 = phi i32 [ 0, %dec_label_pc_9adc ], [ %v1_9bdc9, %dec_label_pc_9b74 ]
  %stack_var_-32.1 = phi i32 [ 0, %dec_label_pc_9adc ], [ %stack_var_-32.0, %dec_label_pc_9b74 ]
  %v3_9bc8 = phi i32 [ 0, %dec_label_pc_9adc ], [ %v1_9b78, %dec_label_pc_9b74 ]
  %v5_9b98 = load i32, i32* @global_var_1f31c.44, align 4
  %v9_9bac = icmp eq i32 %v5_9b98, 0
  br i1 %v9_9bac, label %dec_label_pc_9bb4, label %dec_label_pc_9af0

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9b80
  %v2_9b98 = load i32, i32* @global_var_1f318.43, align 4
  %tmp30 = icmp ugt i32 %v2_9b98, %v3_9bc8
  br i1 %tmp30, label %dec_label_pc_9af0, label %dec_label_pc_9bd4

dec_label_pc_9bd4:                                ; preds = %dec_label_pc_9bb4, %dec_label_pc_9a90, %dec_label_pc_9abc, %dec_label_pc_9998
  %v1_9bdc = phi i32 [ %v0_9a90, %dec_label_pc_9a90 ], [ %v3_9acc, %dec_label_pc_9abc ], [ 0, %dec_label_pc_9998 ], [ %v1_9bdc10, %dec_label_pc_9bb4 ]
  store i32 %v6_9964, i32* @fp, align 4
  ret i32 %v1_9bdc

; uselistorder directives
  uselistorder i32 %stack_var_-32.1, { 0, 2, 1 }
  uselistorder i32 %v3_9af4, { 1, 0 }
  uselistorder i32 %v2_9a74, { 2, 1, 0 }
  uselistorder i32 %v1_99fc, { 1, 0 }
  uselistorder i32 %v1_99e0, { 1, 0 }
  uselistorder i32 %v1_99c4, { 1, 0 }
  uselistorder i32 %v2_99ac, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @sendSTD, { 1, 0 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder label %dec_label_pc_9bd4, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_9b80, { 1, 0 }
  uselistorder label %dec_label_pc_9b74, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9af0, { 1, 0 }
  uselistorder label %dec_label_pc_9abc, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_9a6c, { 1, 0 }
  uselistorder label %dec_label_pc_9a40, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4116 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_9bf8 = load i32, i32* @fp, align 4
  store i32 39936, i32* %stack_var_-4, align 4
  %v2_9bfc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9bfc, i32* @fp, align 4
  %v2_9c10 = ptrtoint i32* %stack_var_-4116 to i32
  store i32 4096, i32* @r2, align 4
  %v2_9c20 = bitcast i32* %stack_var_-4116 to i8*
  %v3_9c20 = call i32 @__GI_memset(i8* %v2_9c20, i32 0)
  %v2_9c28 = load i32, i32* @global_var_1f320.41, align 4
  %v2_9c2c = icmp eq i32 %v2_9c28, 0
  br i1 %v2_9c2c, label %dec_label_pc_9c50, label %dec_label_pc_9c34

dec_label_pc_9c34:                                ; preds = %entry
  %v1_9c40 = call i32 @__GI_close(i32 %v2_9c28)
  store i32 0, i32* @global_var_1f320.41, align 4
  br label %dec_label_pc_9c50

dec_label_pc_9c50:                                ; preds = %entry, %dec_label_pc_9c34
  %v2_9c54 = load i32, i32* @global_var_1f094.57, align 4
  %v2_9c58 = icmp eq i32 %v2_9c54, 0
  br i1 %v2_9c58, label %dec_label_pc_9c84, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9c50
  %v1_9c78 = add i32 %v2_9c54, 1
  br label %dec_label_pc_9c84

dec_label_pc_9c84:                                ; preds = %dec_label_pc_9c50, %dec_label_pc_9c70
  %storemerge1 = phi i32 [ %v1_9c78, %dec_label_pc_9c70 ], [ 0, %dec_label_pc_9c50 ]
  store i32 %storemerge1, i32* @global_var_1f094.57, align 4
  %v4_9c9c = mul i32 %storemerge1, 4
  %v5_9c9c = add i32 %v4_9c9c, ptrtoint ([15 x i8]** @global_var_1f090.60 to i32)
  %v6_9c9c = inttoptr i32 %v5_9c9c to i32*
  %v7_9c9c = load i32, i32* %v6_9c9c, align 4
  store i32 %v7_9c9c, i32* @r1, align 4
  %v3_9ca8 = call i32 @strcpy(i8* %v2_9c20, i32 %v7_9c9c)
  store i32 %v2_9c10, i32* @r0, align 4
  %v2_9ccc = call i32 @__GI_strchr(i32 %v2_9c10, i32 58)
  %v2_9cd4 = icmp eq i32 %v2_9ccc, 0
  br i1 %v2_9cd4, label %dec_label_pc_9d34, label %dec_label_pc_9cdc

dec_label_pc_9cdc:                                ; preds = %dec_label_pc_9c84
  store i32 %v2_9c10, i32* @r0, align 4
  %v2_9cf0 = call i32 @__GI_strchr(i32 %v2_9c10, i32 58)
  %v1_9cf8 = add i32 %v2_9cf0, 1
  store i32 %v1_9cf8, i32* @r0, align 4
  %v1_9d00 = call i32 @atol(i32 %v1_9cf8)
  store i32 %v2_9c10, i32* @r0, align 4
  %v2_9d20 = call i32 @__GI_strchr(i32 %v2_9c10, i32 58)
  %v3_9d30 = inttoptr i32 %v2_9d20 to i8*
  store i8 0, i8* %v3_9d30, align 1
  br label %dec_label_pc_9d34

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9c84, %dec_label_pc_9cdc
  %stack_var_-20.0 = phi i32 [ 445, %dec_label_pc_9c84 ], [ %v1_9d00, %dec_label_pc_9cdc ]
  %v3_9d40 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9d40, i32* @global_var_1f320.41, align 4
  %v4_9d74 = call i32 @connectTimeout(i32 %v3_9d40, i32 %v2_9c10, i32 %stack_var_-20.0, i32 30)
  %v2_9d7c = icmp eq i32 %v4_9d74, 0
  %. = zext i1 %v2_9d7c to i32
  store i32 %v3_9bf8, i32* @fp, align 4
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v2_9c10, { 4, 1, 0, 3, 2, 6, 5 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_9d34, { 1, 0 }
  uselistorder label %dec_label_pc_9c84, { 1, 0 }
  uselistorder label %dec_label_pc_9c50, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-4284 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 40400, i32* %stack_var_-4, align 4
  %v2_9dcc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9dcc, i32* @fp, align 4
  %v2_9de0 = ptrtoint i32* %stack_var_-24 to i32
  %v1_9e08 = bitcast i8** %argv to i32*
  %v2_9e08 = load i32, i32* %v1_9e08, align 4
  %v3_9e10 = call i32 @unlink(i32 %v2_9e08, i32 %v2_9de0, i32 %v2_9de0)
  %v1_9e14 = call i32 @rand_init(i32 %v3_9e10)
  %v0_9e18 = call i32 @rand_next()
  %v1_9e20 = mul i32 %v0_9e18, 4
  %v3_9e24 = and i32 %v1_9e20, 12
  %v1_9e28 = add nuw nsw i32 %v3_9e24, 12
  %v2_9e30 = ptrtoint i32* %stack_var_-112 to i32
  %v2_9e3c = bitcast i32* %stack_var_-112 to i8*
  %v3_9e3c = call i32 @rand_alphastr(i8* %v2_9e3c, i32 %v1_9e28)
  %v2_9e4c = add i32 %v2_9de0, -88
  %v2_9e50 = add i32 %v2_9e4c, %v1_9e28
  %v3_9e58 = inttoptr i32 %v2_9e50 to i8*
  store i8 0, i8* %v3_9e58, align 4
  %v2_9e6c = load i32, i32* %v1_9e08, align 4
  %v3_9e7c = call i32 @util_strcpy(i32 %v2_9e6c, i32 %v2_9e30, i32 %v2_9e30)
  %v0_9e80 = call i32 @rand_next()
  %v1_9e8c = zext i32 %v0_9e80 to i64
  %v4_9e8c = mul nuw i64 %v1_9e8c, 2863311531
  %v3_9e906 = udiv i64 %v4_9e8c, 17179869184
  %v2_9ea48 = mul nuw nsw i64 %v3_9e906, 2
  %v2_9ea4 = trunc i64 %v2_9ea48 to i32
  %v3_9ea810 = mul nuw nsw i64 %v3_9e906, 8
  %v3_9ea8 = trunc i64 %v3_9ea810 to i32
  %v2_9eac53 = sub i32 %v2_9ea4, %v3_9ea8
  %v2_9eb0 = add i32 %v2_9eac53, %v0_9e80
  %v3_9ec4 = mul i32 %v2_9eb0, 4
  %v1_9ec8 = add i32 %v3_9ec4, 12
  %v6_9edc = call i32 @rand_alphastr(i8* %v2_9e3c, i32 %v1_9ec8)
  %v2_9ef0 = add i32 %v2_9e4c, %v1_9ec8
  %v3_9ef0 = inttoptr i32 %v2_9ef0 to i8*
  store i8 0, i8* %v3_9ef0, align 4
  %v5_9f08 = call i32 @prctl(i32 15, i32 %v2_9e30, i32 %v2_9ef0, i32 %v2_9e30)
  %v2_9f10 = call i32 @__GI_time(i32* null)
  store i32 %v2_9f10, i32* @r0, align 4
  store i32 %v2_9f10, i32* @r4, align 4
  %v0_9f18 = call i32 @__GI_getpid()
  %v0_9f20 = load i32, i32* @r4, align 4
  %v2_9f20 = xor i32 %v0_9f20, %v0_9f18
  %v1_9f28 = call i32 @srand(i32 %v2_9f20)
  %v1_9f2c = call i32 @rand_init(i32 %v1_9f28)
  store i32 %v1_9f2c, i32* @r0, align 4
  %v0_9f30 = call i32 @__libc_fork()
  store i32 %v0_9f30, i32* @r0, align 4
  %v2_9f40 = icmp eq i32 %v0_9f30, 0
  br i1 %v2_9f40, label %dec_label_pc_9f70, label %dec_label_pc_9f64

dec_label_pc_9f64:                                ; preds = %entry
  %v2_9f48 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v0_9f30, i32* @r0, align 4
  %v3_9f58 = call i32 @__libc_waitpid(i32 %v0_9f30, i32 %v2_9f48, i32 0)
  %v1_9f60 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_9f90

dec_label_pc_9f70:                                ; preds = %entry
  %v0_9f70 = call i32 @__libc_fork()
  %v2_9f80 = icmp eq i32 %v0_9f70, 0
  br i1 %v2_9f80, label %dec_label_pc_9f90, label %dec_label_pc_9f88

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9f70
  %v1_9f8c = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_9f90

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9f70, %dec_label_pc_9f88
  %v1_9f94 = call i32 @chdir(i32 ptrtoint ([3 x i32]* @global_var_157bc.63 to i32))
  %v2_9fa0 = call i32 @bsd_signal(i32 13, i32 1)
  %v2_a628 = ptrtoint i32* %stack_var_-4284 to i32
  %v4_a638 = bitcast i32* %stack_var_-4284 to i8*
  %v1_a358 = or i32 %v2_a628, 1
  %v5_a35c = inttoptr i32 %v1_a358 to i8*
  %v2_a5e8 = add i32 %v2_9de0, -164
  br label %dec_label_pc_9fa4

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9fa4, %dec_label_pc_a618, %dec_label_pc_9f90
  %v0_9fa4 = call i32 @initConnection()
  %v2_9fac = icmp eq i32 %v0_9fa4, 0
  br i1 %v2_9fac, label %dec_label_pc_9fb4, label %dec_label_pc_9fa4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fa4
  br label %dec_label_pc_a618

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_a290, %dec_label_pc_a234
  %v3_9fd8 = mul i32 %v3_a284, 4
  %v2_9fe4 = load i32, i32* @global_var_21568.46, align 4
  %v2_9fe8 = add i32 %v2_9fe4, %v3_9fd8
  %v1_9fec = inttoptr i32 %v2_9fe8 to i32*
  %v2_9fec = load i32, i32* %v1_9fec, align 4
  store i32 %v2_9fec, i32* @r0, align 4
  %v3_9ffc = call i32 @__libc_waitpid(i32 %v2_9fec, i32 0, i32 1)
  %tmp98 = icmp slt i32 %v3_9ffc, 1
  br i1 %tmp98, label %dec_label_pc_a228, label %dec_label_pc_a060

dec_label_pc_a01c:                                ; preds = %dec_label_pc_a0bc, %dec_label_pc_a060
  %v2_a020 = load i32, i32* @global_var_21568.46, align 4
  %v3_a02c = mul i32 %v1_a010, 4
  %v1_a024 = add i32 %v3_a02c, -4
  %v2_a030 = add i32 %v1_a024, %v2_a020
  %v2_a048 = add i32 %v2_a020, %v3_a02c
  %v1_a04c = inttoptr i32 %v2_a048 to i32*
  %v2_a04c = load i32, i32* %v1_a04c, align 4
  %v2_a050 = inttoptr i32 %v2_a030 to i32*
  store i32 %v2_a04c, i32* %v2_a050, align 4
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_9fd4, %dec_label_pc_a01c
  %v3_a00c.sink = phi i32 [ %v1_a010, %dec_label_pc_a01c ], [ %v3_a284, %dec_label_pc_9fd4 ]
  %v1_a010 = add i32 %v3_a00c.sink, 1
  %v2_a07c = load i32, i32* @global_var_1f318.43, align 4
  %v5_a07c = load i32, i32* @global_var_1f31c.44, align 4
  %tmp99 = icmp ugt i32 %v5_a07c, %v1_a010
  br i1 %tmp99, label %dec_label_pc_a01c, label %dec_label_pc_a0a4

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a060
  %v9_a0b4 = icmp eq i32 %v5_a07c, %v1_a010
  br i1 %v9_a0b4, label %dec_label_pc_a0bc, label %dec_label_pc_a0d4

dec_label_pc_a0bc:                                ; preds = %dec_label_pc_a0a4
  %v9_a0cc = icmp eq i32 %v2_a07c, 0
  br i1 %v9_a0cc, label %dec_label_pc_a0d4, label %dec_label_pc_a01c

dec_label_pc_a0d4:                                ; preds = %dec_label_pc_a0bc, %dec_label_pc_a0a4
  %v2_a0d8 = load i32, i32* @global_var_21568.46, align 4
  %v3_a0e4 = mul i32 %v1_a010, 4
  %v1_a0dc = add i32 %v3_a0e4, -4
  %v2_a0e8 = add i32 %v1_a0dc, %v2_a0d8
  %v2_a0f0 = inttoptr i32 %v2_a0e8 to i32*
  store i32 0, i32* %v2_a0f0, align 4
  %v2_a0f8 = load i32, i32* @global_var_1f318.43, align 4
  %v5_a0f8 = load i32, i32* @global_var_1f31c.44, align 4
  %v2_a104 = add i32 %v2_a0f8, -1
  %v3_a104 = icmp ne i32 %v2_a0f8, 0
  %v3_a108 = add i32 %v5_a0f8, -1
  %v4_a108 = zext i1 %v3_a104 to i32
  %v5_a108 = add i32 %v3_a108, %v4_a108
  store i32 %v2_a104, i32* @global_var_1f318.43, align 4
  store i32 %v5_a108, i32* @global_var_1f31c.44, align 4
  %v3_a124 = icmp eq i32 %v2_a0f8, 0
  %v4_a128 = zext i1 %v3_a124 to i32
  %v5_a128 = add i32 %v5_a108, %v4_a128
  %v3_a12c = udiv i32 %v2_a0f8, 1073741824
  %v3_a130 = mul i32 %v5_a128, 4
  %v2_a134 = or i32 %v3_a130, %v3_a12c
  store i32 %v2_a134, i32* @r4, align 4
  %v3_a138 = mul i32 %v2_a0f8, 4
  %v1_a140 = call i32 @malloc(i32 %v3_a138)
  br label %dec_label_pc_a198

dec_label_pc_a158:                                ; preds = %dec_label_pc_a1f4, %dec_label_pc_a198
  %v3_a15c = mul i32 %v3_a1e8, 4
  %v2_a168 = add i32 %v3_a15c, %v1_a140
  %v2_a17c = load i32, i32* @global_var_21568.46, align 4
  %v2_a180 = add i32 %v2_a17c, %v3_a15c
  %v1_a184 = inttoptr i32 %v2_a180 to i32*
  %v2_a184 = load i32, i32* %v1_a184, align 4
  %v2_a188 = inttoptr i32 %v2_a168 to i32*
  store i32 %v2_a184, i32* %v2_a188, align 4
  %v1_a190 = add i32 %v3_a1e8, 1
  br label %dec_label_pc_a198

dec_label_pc_a198:                                ; preds = %dec_label_pc_a0d4, %dec_label_pc_a158
  %v3_a1e8 = phi i32 [ 0, %dec_label_pc_a0d4 ], [ %v1_a190, %dec_label_pc_a158 ]
  %v2_a1b4 = load i32, i32* @global_var_1f318.43, align 4
  %v5_a1b4 = load i32, i32* @global_var_1f31c.44, align 4
  %tmp101 = icmp ugt i32 %v5_a1b4, %v3_a1e8
  br i1 %tmp101, label %dec_label_pc_a158, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a198
  %v9_a1ec = icmp eq i32 %v5_a1b4, %v3_a1e8
  br i1 %v9_a1ec, label %dec_label_pc_a1f4, label %dec_label_pc_a20c

dec_label_pc_a1f4:                                ; preds = %dec_label_pc_a1dc
  %v9_a204 = icmp eq i32 %v2_a1b4, 0
  br i1 %v9_a204, label %dec_label_pc_a20c, label %dec_label_pc_a158

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f4, %dec_label_pc_a1dc
  %v2_a210 = load i32, i32* @global_var_21568.46, align 4
  store i32 %v2_a210, i32* @r0, align 4
  %v0_a218 = call i32 @free()
  store i32 %v1_a140, i32* @global_var_21568.46, align 4
  br label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_9fd4, %dec_label_pc_a20c
  %v1_a22c = add i32 %v3_a284, 1
  br label %dec_label_pc_a234

dec_label_pc_a234:                                ; preds = %dec_label_pc_a618, %dec_label_pc_a228
  %v3_a284 = phi i32 [ %v1_a22c, %dec_label_pc_a228 ], [ 0, %dec_label_pc_a618 ]
  %v3_a23c = ashr i32 %v3_a284, 31
  %v2_a250 = load i32, i32* @global_var_1f318.43, align 4
  %v5_a250 = load i32, i32* @global_var_1f31c.44, align 4
  %v3_a270 = icmp uge i32 %v5_a250, %v3_a284
  %v9_a270 = icmp eq i32 %v5_a250, %v3_a284
  %v2_a274 = xor i1 %v9_a270, true
  %v3_a274 = and i1 %v3_a270, %v2_a274
  br i1 %v3_a274, label %dec_label_pc_9fd4, label %dec_label_pc_a278

dec_label_pc_a278:                                ; preds = %dec_label_pc_a234
  br i1 %v9_a270, label %dec_label_pc_a290, label %dec_label_pc_a2a8

dec_label_pc_a290:                                ; preds = %dec_label_pc_a278
  %tmp = icmp ugt i32 %v2_a250, %v3_a23c
  br i1 %tmp, label %dec_label_pc_9fd4, label %dec_label_pc_a2a8

dec_label_pc_a2a8:                                ; preds = %dec_label_pc_a278, %dec_label_pc_a290
  %v2_a2bc = add i32 %v5_a638, %v2_a628
  %v3_a2c4 = inttoptr i32 %v2_a2bc to i8*
  store i8 0, i8* %v3_a2c4, align 1
  %v2_a2d8 = call i32 @trim(i8* %v4_a638)
  %v2_a2f0 = load i8, i8* %v4_a638, align 4
  %v7_a2f4 = icmp eq i8 %v2_a2f0, 46
  br i1 %v7_a2f4, label %dec_label_pc_a318, label %dec_label_pc_a618

dec_label_pc_a318:                                ; preds = %dec_label_pc_a2a8, %dec_label_pc_a328
  %v3_a2fc.sink = phi i8* [ %storemerge13, %dec_label_pc_a328 ], [ %v4_a638, %dec_label_pc_a2a8 ]
  %v4_a2fc = ptrtoint i8* %v3_a2fc.sink to i32
  %v1_a300 = add i32 %v4_a2fc, 1
  %storemerge13 = inttoptr i32 %v1_a300 to i8*
  %v2_a31c = load i8, i8* %storemerge13, align 1
  %v7_a320 = icmp eq i8 %v2_a31c, 32
  br i1 %v7_a320, label %dec_label_pc_a338, label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a318
  %v2_a32c = load i8, i8* %storemerge13, align 1
  %v2_a330 = icmp eq i8 %v2_a32c, 0
  br i1 %v2_a330, label %dec_label_pc_a338, label %dec_label_pc_a318

dec_label_pc_a338:                                ; preds = %dec_label_pc_a328, %dec_label_pc_a318
  %v2_a33c = load i8, i8* %storemerge13, align 1
  %v2_a340 = icmp eq i8 %v2_a33c, 0
  br i1 %v2_a340, label %dec_label_pc_a618, label %dec_label_pc_a348

dec_label_pc_a348:                                ; preds = %dec_label_pc_a338
  store i8 0, i8* %storemerge13, align 1
  %v3_a368 = call i32 @strlen(i8* %v5_a35c)
  %v2_a378 = add i32 %v3_a368, %v2_a628
  %v1_a37c = add i32 %v2_a378, 2
  %v5_a380 = inttoptr i32 %v1_a37c to i8*
  %v1_a3b0 = add i32 %v2_a378, 1
  br label %dec_label_pc_a3ac

dec_label_pc_a388:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a3ac
  %v3_a398 = call i32 @strlen(i8* %v5_a380)
  %v2_a3a0 = add i32 %v1_a3b0, %v3_a398
  %v3_a3a8 = inttoptr i32 %v2_a3a0 to i8*
  store i8 0, i8* %v3_a3a8, align 1
  br label %dec_label_pc_a3ac

dec_label_pc_a3ac:                                ; preds = %dec_label_pc_a348, %dec_label_pc_a388
  %v3_a3bc = call i32 @strlen(i8* %v5_a380)
  %v2_a3c4 = add i32 %v1_a3b0, %v3_a3bc
  %v1_a3c8 = inttoptr i32 %v2_a3c4 to i8*
  %v2_a3c8 = load i8, i8* %v1_a3c8, align 1
  %v7_a3cc = icmp eq i8 %v2_a3c8, 10
  br i1 %v7_a3cc, label %dec_label_pc_a388, label %dec_label_pc_a3d4

dec_label_pc_a3d4:                                ; preds = %dec_label_pc_a3ac
  store i32 %v1_a3b0, i32* @r4, align 4
  %v3_a3e4 = call i32 @strlen(i8* %v5_a380)
  %v0_a3ec = load i32, i32* @r4, align 4
  %v2_a3ec = add i32 %v0_a3ec, %v3_a3e4
  %v1_a3f0 = inttoptr i32 %v2_a3ec to i8*
  %v2_a3f0 = load i8, i8* %v1_a3f0, align 1
  %v7_a3f4 = icmp eq i8 %v2_a3f0, 13
  br i1 %v7_a3f4, label %dec_label_pc_a388, label %dec_label_pc_a3fc

dec_label_pc_a3fc:                                ; preds = %dec_label_pc_a3d4
  %v2_a41824 = load i8, i8* %v5_a380, align 1
  %v7_a41c28 = icmp eq i8 %v2_a41824, 32
  br i1 %v7_a41c28, label %dec_label_pc_a434, label %dec_label_pc_a424

dec_label_pc_a408:                                ; preds = %dec_label_pc_a424
  %v1_a40c = add i32 %v4_a41430, 1
  %v5_a410 = inttoptr i32 %v1_a40c to i8*
  %v2_a418 = load i8, i8* %v5_a410, align 1
  %v7_a41c = icmp eq i8 %v2_a418, 32
  br i1 %v7_a41c, label %dec_label_pc_a434, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a3fc, %dec_label_pc_a408
  %v4_a41430 = phi i32 [ %v1_a40c, %dec_label_pc_a408 ], [ %v1_a37c, %dec_label_pc_a3fc ]
  %stack_var_-60.029 = phi i8* [ %v5_a410, %dec_label_pc_a408 ], [ %v5_a380, %dec_label_pc_a3fc ]
  %v2_a428 = load i8, i8* %stack_var_-60.029, align 1
  %v2_a42c = icmp eq i8 %v2_a428, 0
  br i1 %v2_a42c, label %dec_label_pc_a434, label %dec_label_pc_a408

dec_label_pc_a434:                                ; preds = %dec_label_pc_a408, %dec_label_pc_a424, %dec_label_pc_a3fc
  %stack_var_-60.0.lcssa = phi i8* [ %v5_a380, %dec_label_pc_a3fc ], [ %v5_a410, %dec_label_pc_a408 ], [ %stack_var_-60.029, %dec_label_pc_a424 ]
  %v4_a414.lcssa = phi i32 [ %v1_a37c, %dec_label_pc_a3fc ], [ %v1_a40c, %dec_label_pc_a408 ], [ %v4_a41430, %dec_label_pc_a424 ]
  store i8 0, i8* %stack_var_-60.0.lcssa, align 1
  %v1_a444 = add i32 %v4_a414.lcssa, 1
  %v2_a48835 = load i8, i8* %v5_a380, align 1
  %v2_a48c37 = icmp eq i8 %v2_a48835, 0
  br i1 %v2_a48c37, label %dec_label_pc_a494, label %dec_label_pc_a458

dec_label_pc_a458:                                ; preds = %dec_label_pc_a434, %dec_label_pc_a458
  %storemerge1239 = phi i8* [ %storemerge12, %dec_label_pc_a458 ], [ %v5_a380, %dec_label_pc_a434 ]
  %storemerge1938 = phi i32 [ %v1_a47c, %dec_label_pc_a458 ], [ %v1_a37c, %dec_label_pc_a434 ]
  %v2_a45c = load i8, i8* %storemerge1239, align 1
  %v3_a45c = zext i8 %v2_a45c to i32
  %v1_a464 = call i32 @__GI_toupper(i32 %v3_a45c)
  %v1_a474 = trunc i32 %v1_a464 to i8
  store i8 %v1_a474, i8* %storemerge1239, align 1
  %v1_a47c = add i32 %storemerge1938, 1
  %storemerge12 = inttoptr i32 %v1_a47c to i8*
  %v2_a488 = load i8, i8* %storemerge12, align 1
  %v2_a48c = icmp eq i8 %v2_a488, 0
  br i1 %v2_a48c, label %dec_label_pc_a494, label %dec_label_pc_a458

dec_label_pc_a494:                                ; preds = %dec_label_pc_a458, %dec_label_pc_a434
  %v2_a4a8 = call i32 @__GI_strtok(i32 %v1_a444, i32 ptrtoint (i32* @global_var_157c0.67 to i32))
  store i32 %v1_a37c, i32* %stack_var_-188, align 4
  %v2_a5a042 = icmp eq i32 %v2_a4a8, 0
  br i1 %v2_a5a042, label %dec_label_pc_a5a8, label %dec_label_pc_a4c0

dec_label_pc_a4c0:                                ; preds = %dec_label_pc_a494, %dec_label_pc_a588
  %stack_var_-32.045.in = phi i32 [ %v2_a590, %dec_label_pc_a588 ], [ %v2_a4a8, %dec_label_pc_a494 ]
  %stack_var_-36.143 = phi i32 [ %stack_var_-36.0, %dec_label_pc_a588 ], [ 1, %dec_label_pc_a494 ]
  %stack_var_-32.045 = inttoptr i32 %stack_var_-32.045.in to i8*
  %v2_a4c4 = load i8, i8* %stack_var_-32.045, align 1
  %v7_a4c8 = icmp eq i8 %v2_a4c4, 10
  br i1 %v7_a4c8, label %dec_label_pc_a588, label %dec_label_pc_a4d0

dec_label_pc_a4d0:                                ; preds = %dec_label_pc_a4c0
  store i32 %stack_var_-36.143, i32* @r4, align 4
  %v3_a4dc = call i32 @strlen(i8* nonnull %stack_var_-32.045)
  %v1_a4e4 = add i32 %v3_a4dc, 1
  %v1_a4ec = call i32 @malloc(i32 %v1_a4e4)
  %v0_a4fc = load i32, i32* @r4, align 4
  %v3_a4fc = mul i32 %v0_a4fc, 4
  %v2_a508 = add i32 %v2_a5e8, %v3_a4fc
  %v2_a50c = inttoptr i32 %v2_a508 to i32*
  store i32 %v1_a4ec, i32* %v2_a50c, align 4
  %v3_a518 = mul i32 %stack_var_-36.143, 4
  %v2_a524 = add i32 %v2_a5e8, %v3_a518
  %v1_a528 = inttoptr i32 %v2_a524 to i32*
  %v2_a528 = load i32, i32* %v1_a528, align 4
  store i32 %v2_a528, i32* @r4, align 4
  %v3_a534 = call i32 @strlen(i8* nonnull %stack_var_-32.045)
  %v1_a53c = add i32 %v3_a534, 1
  %v0_a540 = load i32, i32* @r4, align 4
  store i32 %v1_a53c, i32* @r2, align 4
  %v2_a54c = inttoptr i32 %v0_a540 to i8*
  %v3_a54c = call i32 @__GI_memset(i8* %v2_a54c, i32 0)
  %v2_a568 = load i32, i32* %v1_a528, align 4
  store i32 %stack_var_-32.045.in, i32* @r1, align 4
  %v3_a578 = inttoptr i32 %v2_a568 to i8*
  %v4_a578 = call i32 @strcpy(i8* %v3_a578, i32 %stack_var_-32.045.in)
  %v1_a580 = add i32 %stack_var_-36.143, 1
  br label %dec_label_pc_a588

dec_label_pc_a588:                                ; preds = %dec_label_pc_a4c0, %dec_label_pc_a4d0
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.143, %dec_label_pc_a4c0 ], [ %v1_a580, %dec_label_pc_a4d0 ]
  %v2_a590 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_157c0.67 to i32))
  %v2_a5a0 = icmp eq i32 %v2_a590, 0
  br i1 %v2_a5a0, label %dec_label_pc_a5a8, label %dec_label_pc_a4c0

dec_label_pc_a5a8:                                ; preds = %dec_label_pc_a588, %dec_label_pc_a494
  %stack_var_-36.1.lcssa = phi i32 [ 1, %dec_label_pc_a494 ], [ %stack_var_-36.0, %dec_label_pc_a588 ]
  %v3_a5b4 = call i32 @processCmd(i32 %stack_var_-36.1.lcssa, i32* nonnull %stack_var_-188)
  %v7_a5c0 = icmp slt i32 %stack_var_-36.1.lcssa, 2
  br i1 %v7_a5c0, label %dec_label_pc_a618, label %dec_label_pc_a5d8.lr.ph

dec_label_pc_a5d8.lr.ph:                          ; preds = %dec_label_pc_a5a8
  br label %dec_label_pc_a5d8

dec_label_pc_a5d8:                                ; preds = %dec_label_pc_a5d8.lr.ph, %dec_label_pc_a5d8
  %storemerge20113 = phi i32 [ 1, %dec_label_pc_a5d8.lr.ph ], [ %v1_a600, %dec_label_pc_a5d8 ]
  %v3_a5e0 = mul i32 %storemerge20113, 4
  %v2_a5ec = add i32 %v2_a5e8, %v3_a5e0
  %v1_a5f0 = inttoptr i32 %v2_a5ec to i32*
  %v2_a5f0 = load i32, i32* %v1_a5f0, align 4
  store i32 %v2_a5f0, i32* @r0, align 4
  %v0_a5f8 = call i32 @free()
  %v1_a600 = add nuw nsw i32 %storemerge20113, 1
  %v5_a614 = icmp slt i32 %v1_a600, %stack_var_-36.1.lcssa
  br i1 %v5_a614, label %dec_label_pc_a5d8, label %dec_label_pc_a618

dec_label_pc_a618:                                ; preds = %dec_label_pc_a5d8, %dec_label_pc_a2a8, %dec_label_pc_a5a8, %dec_label_pc_a338, %dec_label_pc_9fb4
  %v2_a61c = load i32, i32* @global_var_1f320.41, align 4
  %v5_a638 = call i32 @recvLine(i32 %v2_a61c, i8* %v4_a638, i32 4096, i32 %v2_a628)
  %v3_a648 = icmp eq i32 %v5_a638, -1
  br i1 %v3_a648, label %dec_label_pc_9fa4, label %dec_label_pc_a234

; uselistorder directives
  uselistorder i32 %v5_a638, { 1, 0 }
  uselistorder i32 %stack_var_-36.1.lcssa, { 2, 0, 1 }
  uselistorder i32 %v2_a590, { 1, 0 }
  uselistorder i8* %stack_var_-32.045, { 2, 1, 0 }
  uselistorder i32 %stack_var_-36.143, { 1, 3, 0, 2 }
  uselistorder i8* %storemerge12, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i8* %storemerge1239, { 1, 0 }
  uselistorder i32 %v1_a3b0, { 2, 1, 0 }
  uselistorder i8* %v5_a380, { 0, 3, 2, 1, 4, 5, 7, 6 }
  uselistorder i32 %v1_a37c, { 3, 0, 2, 1, 4 }
  uselistorder i8* %storemerge13, { 0, 1, 3, 4, 2 }
  uselistorder i1 %v9_a270, { 1, 0 }
  uselistorder i32 %v3_a284, { 3, 2, 5, 0, 1, 4 }
  uselistorder i32 %v5_a1b4, { 1, 0 }
  uselistorder i32 %v3_a1e8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a15c, { 1, 0 }
  uselistorder i32 %v1_a140, { 1, 0 }
  uselistorder i32 %v5_a07c, { 1, 0 }
  uselistorder i32 %v1_a010, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_a02c, { 1, 0 }
  uselistorder i32 %v2_a020, { 1, 0 }
  uselistorder i32 %v2_a5e8, { 2, 0, 1 }
  uselistorder i8* %v4_a638, { 3, 0, 1, 2 }
  uselistorder i32 %v2_a628, { 3, 0, 1, 2 }
  uselistorder i32 %v0_9f30, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9e30, { 0, 1, 3, 2 }
  uselistorder i32 %v2_9de0, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* @global_var_1f320.41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 2, 1, 0 }
  uselistorder i32* @global_var_1f318.43, { 2, 3, 0, 4, 5, 6, 7, 1, 8 }
  uselistorder i32* @global_var_21568.46, { 0, 2, 3, 4, 5, 6, 7, 8, 1, 9, 10 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 ()* @rand_next, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @rand_init, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a618, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_a5d8, { 1, 0 }
  uselistorder label %dec_label_pc_a588, { 1, 0 }
  uselistorder label %dec_label_pc_a4c0, { 1, 0 }
  uselistorder label %dec_label_pc_a458, { 1, 0 }
  uselistorder label %dec_label_pc_a434, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a3ac, { 1, 0 }
  uselistorder label %dec_label_pc_a318, { 1, 0 }
  uselistorder label %dec_label_pc_a2a8, { 1, 0 }
  uselistorder label %dec_label_pc_a228, { 1, 0 }
  uselistorder label %dec_label_pc_a198, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_9fa4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f90, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_a66c = load i32, i32* @r1, align 4
  %v1_a66c = add i32 %v0_a66c, -1
  store i32 %v1_a66c, i32* %r2.global-to-local, align 4
  %v2_a66c = icmp eq i32 %v0_a66c, 0
  %v7_a66c = icmp eq i32 %v0_a66c, 1
  %v0_a670 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_a66c, i32 %v0_a670)
  br i1 %v2_a66c, label %dec_label_pc_a754, label %dec_label_pc_a678

dec_label_pc_a678:                                ; preds = %entry
  %v0_a678 = load i32, i32* %r0.global-to-local, align 4
  %v1_a678 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_a678, %v1_a678
  br i1 %tmp, label %dec_label_pc_a680, label %dec_label_pc_a70c

dec_label_pc_a680:                                ; preds = %dec_label_pc_a678
  %v1_a680 = load i32, i32* %r2.global-to-local, align 4
  %v2_a680 = and i32 %v1_a680, %v1_a678
  %v4_a680 = icmp eq i32 %v2_a680, 0
  br i1 %v4_a680, label %dec_label_pc_a718, label %dec_label_pc_a688

dec_label_pc_a688:                                ; preds = %dec_label_pc_a680
  %v3_a688 = icmp ult i32 %v1_a678, 536870912
  br i1 %v3_a688, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_a688
  %v4_a68c = mul i32 %v1_a678, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_a688, %.thread
  %v0_a6ac.pr36.ph = phi i32 [ %v4_a68c, %.thread ], [ %v1_a678, %dec_label_pc_a688 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_a688 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_a6ac.pr36 = phi i32 [ %v4_a6a0, %bb81 ], [ %v0_a6ac.pr36.ph, %.preheader.preheader ]
  %v1_a6a4 = phi i32 [ %v4_a6a4, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_a698 = icmp ugt i32 %v0_a6ac.pr36, 268435455
  br i1 %v2_a698, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_a6acthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_a69c = icmp ult i32 %v0_a6ac.pr36, %v0_a678
  br i1 %v4_a69c, label %bb80, label %dec_label_pc_a6acthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_a6a0 = and i32 %v0_a6ac.pr36, 268435456
  %v3_a6a0 = icmp eq i32 %v2_a6a0, 0
  %v4_a6a0 = mul i32 %v0_a6ac.pr36, 16
  br i1 %v3_a6a0, label %bb81, label %dec_label_pc_a6ac.loopexit

bb81:                                             ; preds = %bb80
  %v2_a6a4 = and i32 %v1_a6a4, 268435456
  %v3_a6a4 = icmp eq i32 %v2_a6a4, 0
  %v4_a6a4 = mul i32 %v1_a6a4, 16
  br i1 %v3_a6a4, label %.preheader, label %dec_label_pc_a6acthread-pre-split.loopexit.loopexit

dec_label_pc_a6acthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_a6b848.ph = phi i32 [ %v1_a6a4, %bb ], [ %v4_a6a4, %bb81 ]
  %v0_a6ac.pr38.ph = phi i32 [ %v0_a6ac.pr36, %bb ], [ %v4_a6a0, %bb81 ]
  br label %dec_label_pc_a6acthread-pre-split.loopexit

dec_label_pc_a6acthread-pre-split.loopexit:       ; preds = %dec_label_pc_a6acthread-pre-split.loopexit.loopexit, %.thread2
  %v1_a6b848 = phi i32 [ %v1_a6a4, %.thread2 ], [ %v1_a6b848.ph, %dec_label_pc_a6acthread-pre-split.loopexit.loopexit ]
  %v0_a6ac.pr38 = phi i32 [ %v0_a6ac.pr36, %.thread2 ], [ %v0_a6ac.pr38.ph, %dec_label_pc_a6acthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_a6acthread-pre-split

dec_label_pc_a6acthread-pre-split:                ; preds = %dec_label_pc_a6acthread-pre-split.loopexit, %bb83
  %v1_a6b846 = phi i32 [ %v1_a6b848, %dec_label_pc_a6acthread-pre-split.loopexit ], [ %v3_a6b8, %bb83 ]
  %v0_a6ac.pr = phi i32 [ %v0_a6ac.pr38, %dec_label_pc_a6acthread-pre-split.loopexit ], [ %v3_a6b4, %bb83 ]
  br label %dec_label_pc_a6ac

dec_label_pc_a6ac.loopexit:                       ; preds = %bb80
  br label %dec_label_pc_a6ac

dec_label_pc_a6ac:                                ; preds = %dec_label_pc_a6ac.loopexit, %dec_label_pc_a6acthread-pre-split
  %v1_a6b8 = phi i32 [ %v1_a6b846, %dec_label_pc_a6acthread-pre-split ], [ %v1_a6a4, %dec_label_pc_a6ac.loopexit ]
  %v1_a6b4 = phi i32 [ %v0_a6ac.pr, %dec_label_pc_a6acthread-pre-split ], [ %v4_a6a0, %dec_label_pc_a6ac.loopexit ]
  %v2_a6ac = icmp slt i32 %v1_a6b4, 0
  br i1 %v2_a6ac, label %dec_label_pc_a6c0, label %bb82

bb82:                                             ; preds = %dec_label_pc_a6ac
  %v4_a6b0 = icmp ult i32 %v1_a6b4, %v0_a678
  br i1 %v4_a6b0, label %bb83, label %dec_label_pc_a6c0

bb83:                                             ; preds = %bb82
  %v3_a6b4 = mul i32 %v1_a6b4, 2
  %v2_a6b8 = icmp slt i32 %v1_a6b8, 0
  %v3_a6b8 = mul i32 %v1_a6b8, 2
  br i1 %v2_a6b8, label %dec_label_pc_a6c0, label %dec_label_pc_a6acthread-pre-split

dec_label_pc_a6c0:                                ; preds = %bb82, %dec_label_pc_a6ac, %bb83
  %v2_a6cc59 = phi i32 [ %v3_a6b8, %bb83 ], [ %v1_a6b8, %bb82 ], [ %v1_a6b8, %dec_label_pc_a6ac ]
  %v1_a6c451 = phi i32 [ %v3_a6b4, %bb83 ], [ %v1_a6b4, %bb82 ], [ %v1_a6b4, %dec_label_pc_a6ac ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a6c4

dec_label_pc_a6c4:                                ; preds = %.thread11, %dec_label_pc_a6c0
  %v1_a6f8 = phi i32 [ %v4_a6f8, %.thread11 ], [ %v2_a6cc59, %dec_label_pc_a6c0 ]
  %v1_a6cc = phi i32 [ %v0_a704, %.thread11 ], [ 0, %dec_label_pc_a6c0 ]
  %v1_a6fc = phi i32 [ %v4_a6fc, %.thread11 ], [ %v1_a6c451, %dec_label_pc_a6c0 ]
  %v1_a6c8 = phi i32 [ %v0_a6f4, %.thread11 ], [ %v0_a678, %dec_label_pc_a6c0 ]
  %v3_a6c4 = icmp ult i32 %v1_a6c8, %v1_a6fc
  br i1 %v3_a6c4, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_a6c4
  %v3_a6c8 = sub i32 %v1_a6c8, %v1_a6fc
  store i32 %v3_a6c8, i32* %r0.global-to-local, align 4
  %v3_a6cc = or i32 %v1_a6cc, %v1_a6f8
  store i32 %v3_a6cc, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_a6c4, %bb84
  %v1_a6d4 = phi i32 [ %v1_a6c8, %dec_label_pc_a6c4 ], [ %v3_a6c8, %bb84 ]
  %v1_a6d8 = phi i32 [ %v1_a6cc, %dec_label_pc_a6c4 ], [ %v3_a6cc, %bb84 ]
  %v4_a6d0 = udiv i32 %v1_a6fc, 2
  %v6_a6d0 = icmp ult i32 %v1_a6d4, %v4_a6d0
  br i1 %v6_a6d0, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_a6d4 = urem i32 %v1_a6fc, 2
  %v4_a6d4 = icmp eq i32 %v3_a6d4, 0
  %v6_a6d4 = sub i32 %v1_a6d4, %v4_a6d0
  store i32 %v6_a6d4, i32* %r0.global-to-local, align 4
  br i1 %v4_a6d4, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_a6d8 = udiv i32 %v1_a6f8, 2
  %v6_a6d8 = or i32 %v1_a6d8, %v5_a6d8
  store i32 %v6_a6d8, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_a6e0 = phi i32 [ %v6_a6d4, %bb85 ], [ %v1_a6d4, %.thread7 ], [ %v6_a6d4, %bb86 ]
  %v1_a6e4 = phi i32 [ %v1_a6d8, %bb85 ], [ %v1_a6d8, %.thread7 ], [ %v6_a6d8, %bb86 ]
  %v4_a6dc = udiv i32 %v1_a6fc, 4
  %v6_a6dc = icmp ult i32 %v1_a6e0, %v4_a6dc
  br i1 %v6_a6dc, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_a6e0 = and i32 %v1_a6fc, 2
  %v4_a6e0 = icmp eq i32 %v3_a6e0, 0
  %v6_a6e0 = sub i32 %v1_a6e0, %v4_a6dc
  store i32 %v6_a6e0, i32* %r0.global-to-local, align 4
  br i1 %v4_a6e0, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_a6e4 = udiv i32 %v1_a6f8, 4
  %v6_a6e4 = or i32 %v1_a6e4, %v5_a6e4
  store i32 %v6_a6e4, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_a6ec = phi i32 [ %v6_a6e0, %bb87 ], [ %v1_a6e0, %.thread8 ], [ %v6_a6e0, %bb88 ]
  %v1_a6f0 = phi i32 [ %v1_a6e4, %bb87 ], [ %v1_a6e4, %.thread8 ], [ %v6_a6e4, %bb88 ]
  %v4_a6e8 = udiv i32 %v1_a6fc, 8
  %v6_a6e8 = icmp ult i32 %v1_a6ec, %v4_a6e8
  br i1 %v6_a6e8, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_a6ec = and i32 %v1_a6fc, 4
  %v4_a6ec = icmp eq i32 %v3_a6ec, 0
  %v6_a6ec = sub i32 %v1_a6ec, %v4_a6e8
  store i32 %v6_a6ec, i32* %r0.global-to-local, align 4
  br i1 %v4_a6ec, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_a6f0 = udiv i32 %v1_a6f8, 8
  %v6_a6f0 = or i32 %v1_a6f0, %v5_a6f0
  store i32 %v6_a6f0, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_a704 = phi i32 [ %v1_a6f0, %bb89 ], [ %v1_a6f0, %.thread9 ], [ %v6_a6f0, %bb90 ]
  %v0_a6f4 = phi i32 [ %v6_a6ec, %bb89 ], [ %v1_a6ec, %.thread9 ], [ %v6_a6ec, %bb90 ]
  %v2_a6f4 = icmp eq i32 %v0_a6f4, 0
  br i1 %v2_a6f4, label %dec_label_pc_a704, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_a6f8, 16
  br i1 %tmp138, label %dec_label_pc_a704, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_a6f8 = udiv i32 %v1_a6f8, 16
  %v4_a6fc = udiv i32 %v1_a6fc, 16
  br label %dec_label_pc_a6c4

dec_label_pc_a704:                                ; preds = %thread-pre-split, %bb91
  store i32 %v0_a704, i32* %r0.global-to-local, align 4
  ret i32 %v0_a704

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a678
  %v9_a678 = icmp eq i32 %v0_a678, %v1_a678
  %. = zext i1 %v9_a678 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_a718:                                ; preds = %dec_label_pc_a680
  %v2_a718 = icmp ugt i32 %v1_a678, 65535
  br i1 %v2_a718, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_a718
  %v2_a71c = and i32 %v1_a678, 32768
  %v3_a71c = icmp eq i32 %v2_a71c, 0
  %v4_a71c = udiv i32 %v1_a678, 65536
  br i1 %v3_a71c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_a718
  %v0_a72865 = phi i32 [ %v1_a678, %dec_label_pc_a718 ], [ %v4_a71c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_a72c = phi i32 [ %v0_a72865, %.thread16 ], [ %v4_a71c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_a728 = icmp ugt i32 %v1_a72c, 255
  br i1 %v2_a728, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_a72c = and i32 %v1_a72c, 128
  %v3_a72c = icmp eq i32 %v2_a72c, 0
  %v4_a72c = udiv i32 %v1_a72c, 256
  br i1 %v3_a72c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_a730 = or i32 %storemerge, 8
  store i32 %v2_a730, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_a73c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_a730, %bb98 ]
  %v1_a738 = phi i32 [ %v1_a72c, %bb96 ], [ %v4_a72c, %bb97 ], [ %v4_a72c, %bb98 ]
  %v2_a734 = icmp ugt i32 %v1_a738, 15
  br i1 %v2_a734, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_a738 = and i32 %v1_a738, 8
  %v3_a738 = icmp eq i32 %v2_a738, 0
  %v4_a738 = udiv i32 %v1_a738, 16
  br i1 %v3_a738, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_a73c = add nsw i32 %v1_a73c, 4
  store i32 %v2_a73c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_a744 = phi i32 [ %v1_a73c, %.thread17 ], [ %v1_a73c, %bb99 ], [ %v2_a73c, %bb100 ]
  %v5_a748 = phi i32 [ %v1_a738, %.thread17 ], [ %v4_a738, %bb99 ], [ %v4_a738, %bb100 ]
  %v2_a740 = icmp ugt i32 %v5_a748, 3
  %v7_a740 = icmp eq i32 %v5_a748, 4
  %v2_a744 = xor i1 %v7_a740, true
  %v3_a744 = and i1 %v2_a740, %v2_a744
  br i1 %v3_a744, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_a744 = add nsw i32 %v4_a744, 3
  store i32 %v5_a744, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_a748 = phi i32 [ %v4_a744, %.thread18 ], [ %v5_a744, %bb101 ]
  %v2_a748 = xor i1 %v2_a740, true
  %v3_a748 = or i1 %v7_a740, %v2_a748
  br i1 %v3_a748, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_a748 = udiv i32 %v5_a748, 2
  %v9_a748 = add i32 %v4_a748, %v8_a748
  store i32 %v9_a748, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_a74c = phi i32 [ %v4_a748, %bb102 ], [ %v9_a748, %bb103 ]
  %v6_a74c = lshr i32 %v0_a678, %v1_a74c
  store i32 %v6_a74c, i32* %r0.global-to-local, align 4
  ret i32 %v6_a74c

dec_label_pc_a754:                                ; preds = %entry
  %v0_a758 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_a748, { 1, 0 }
  uselistorder i1 %v7_a740, { 1, 0 }
  uselistorder i32 %v4_a738, { 1, 0 }
  uselistorder i32 %v1_a738, { 1, 0, 2, 3 }
  uselistorder i32 %v2_a730, { 1, 0 }
  uselistorder i32 %v4_a72c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a72c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_a71c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_a6f4, { 1, 0 }
  uselistorder i32 %v0_a704, { 1, 0, 2 }
  uselistorder i32 %v4_a6e8, { 1, 0 }
  uselistorder i32 %v1_a6f0, { 1, 2, 0 }
  uselistorder i32 %v4_a6dc, { 1, 0 }
  uselistorder i32 %v1_a6e4, { 1, 2, 0 }
  uselistorder i32 %v4_a6d0, { 1, 0 }
  uselistorder i32 %v1_a6d8, { 1, 2, 0 }
  uselistorder i32 %v1_a6fc, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_a6cc, { 1, 0 }
  uselistorder i32 %v1_a6f8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_a6b8, { 1, 0 }
  uselistorder i32 %v3_a6b4, { 1, 0 }
  uselistorder i32 %v1_a6b4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_a6b8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_a6a4, { 1, 0 }
  uselistorder i32 %v4_a6a0, { 2, 1, 0 }
  uselistorder i32 %v1_a6a4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_a6ac.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_a678, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_a678, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_a66c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_a704, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_a6c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a6acthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_a76c = udiv i32 %arg1, %arg2
  ret i32 %v2_a76c
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_a788 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_a788
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_a7a4 = load i32, i32* @r0, align 4
  ret i32 %v1_a7a4
}

define i32 @unlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a7a8 = load i32, i32* @r7, align 4
  store i32 %v3_a7a8, i32* %stack_var_-8, align 4
  %v0_a7b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a7b4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a7b4, -4095
  br i1 %tmp, label %dec_label_pc_a7d4, label %dec_label_pc_a7c4

dec_label_pc_a7c4:                                ; preds = %entry
  %v0_a7c4 = call i32 @__GI___errno_location()
  %v0_a7c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_a7c8 = sub i32 0, %v0_a7c8
  %v2_a7cc = inttoptr i32 %v0_a7c4 to i32*
  store i32 %v1_a7c8, i32* %v2_a7cc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_a7d4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a7d4

dec_label_pc_a7d4:                                ; preds = %entry, %dec_label_pc_a7c4
  %v1_a7d8 = phi i32 [ %v0_a7b4, %entry ], [ -1, %dec_label_pc_a7c4 ]
  %v2_a7d4 = phi i32 [ %v3_a7a8, %entry ], [ %v2_a7d4.pre, %dec_label_pc_a7c4 ]
  store i32 %v2_a7d4, i32* @r7, align 4
  ret i32 %v1_a7d8

; uselistorder directives
  uselistorder i32 %v0_a7b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a7d4, { 1, 0 }
}

define i32 @__GI_getpid() local_unnamed_addr {
entry:
  %v1_a7ec = load i32, i32* @r0, align 4
  ret i32 %v1_a7ec
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_a7f4 = ptrtoint i32* %stack_var_-16 to i32
  %v2_a804 = call i32 @gettimeofday(i32 %v2_a7f4, i32 0)
  %v2_a808 = load i32, i32* %stack_var_-16, align 4
  %v2_a80c = icmp eq i32* %arg1, null
  br i1 %v2_a80c, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_a808, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_a808

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a854, label %dec_label_pc_a844

dec_label_pc_a844:                                ; preds = %entry
  %v0_a844 = call i32 @__GI___errno_location()
  %v0_a848 = load i32, i32* %r4.global-to-local, align 4
  %v1_a848 = sub i32 0, %v0_a848
  %v2_a84c = inttoptr i32 %v0_a844 to i32*
  store i32 %v1_a848, i32* %v2_a84c, align 4
  br label %dec_label_pc_a854

dec_label_pc_a854:                                ; preds = %entry, %dec_label_pc_a844
  %v1_a85c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a844 ]
  ret i32 %v1_a85c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a854, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a860 = load i32, i32* @r7, align 4
  store i32 %v3_a860, i32* %stack_var_-8, align 4
  %v0_a86c = load i32, i32* @r0, align 4
  store i32 %v0_a86c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a86c, -4095
  br i1 %tmp, label %dec_label_pc_a88c, label %dec_label_pc_a87c

dec_label_pc_a87c:                                ; preds = %entry
  %v0_a87c = call i32 @__GI___errno_location()
  %v0_a880 = load i32, i32* %r7.global-to-local, align 4
  %v1_a880 = sub i32 0, %v0_a880
  %v2_a884 = inttoptr i32 %v0_a87c to i32*
  store i32 %v1_a880, i32* %v2_a884, align 4
  %v2_a88c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a88c

dec_label_pc_a88c:                                ; preds = %entry, %dec_label_pc_a87c
  %v1_a890 = phi i32 [ %v0_a86c, %entry ], [ -1, %dec_label_pc_a87c ]
  %v2_a88c = phi i32 [ %v3_a860, %entry ], [ %v2_a88c.pre, %dec_label_pc_a87c ]
  store i32 %v2_a88c, i32* @r7, align 4
  ret i32 %v1_a890

; uselistorder directives
  uselistorder i32 %v0_a86c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a88c, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_a8a0 = call i32 @wait4()
  ret i32 %v0_a8a0
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a8e0, label %dec_label_pc_a8d0

dec_label_pc_a8d0:                                ; preds = %entry
  %v0_a8d0 = call i32 @__GI___errno_location()
  %v0_a8d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a8d4 = sub i32 0, %v0_a8d4
  %v2_a8d8 = inttoptr i32 %v0_a8d0 to i32*
  store i32 %v1_a8d4, i32* %v2_a8d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a8e0

dec_label_pc_a8e0:                                ; preds = %entry, %dec_label_pc_a8d0
  %v0_a8e0 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a8d0 ]
  ret i32 %v0_a8e0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a8e0, { 1, 0 }
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a8f0 = load i32, i32* @r7, align 4
  store i32 %v3_a8f0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a918, label %dec_label_pc_a908

dec_label_pc_a908:                                ; preds = %entry
  %v0_a908 = call i32 @__GI___errno_location()
  %v0_a90c = load i32, i32* %r7.global-to-local, align 4
  %v1_a90c = sub i32 0, %v0_a90c
  %v2_a910 = inttoptr i32 %v0_a908 to i32*
  store i32 %v1_a90c, i32* %v2_a910, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_a91c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a918

dec_label_pc_a918:                                ; preds = %entry, %dec_label_pc_a908
  %v2_a91c = phi i32 [ %v3_a8f0, %entry ], [ %v2_a91c.pre, %dec_label_pc_a908 ]
  %v0_a918 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a908 ]
  store i32 %v2_a91c, i32* @r7, align 4
  ret i32 %v0_a918

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a918, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a924 = load i32, i32* @r7, align 4
  store i32 %v3_a924, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a94c, label %dec_label_pc_a93c

dec_label_pc_a93c:                                ; preds = %entry
  %v0_a93c = call i32 @__GI___errno_location()
  %v0_a940 = load i32, i32* %r7.global-to-local, align 4
  %v1_a940 = sub i32 0, %v0_a940
  %v2_a944 = inttoptr i32 %v0_a93c to i32*
  store i32 %v1_a940, i32* %v2_a944, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_a950.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a94c

dec_label_pc_a94c:                                ; preds = %entry, %dec_label_pc_a93c
  %v2_a950 = phi i32 [ %v3_a924, %entry ], [ %v2_a950.pre, %dec_label_pc_a93c ]
  %v0_a94c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a93c ]
  store i32 %v2_a950, i32* @r7, align 4
  ret i32 %v0_a94c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a94c, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a958 = load i32, i32* @r7, align 4
  store i32 %v3_a958, i32* %stack_var_-8, align 4
  %v0_a964 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a964, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a964, -4095
  br i1 %tmp, label %dec_label_pc_a984, label %dec_label_pc_a974

dec_label_pc_a974:                                ; preds = %entry
  %v0_a974 = call i32 @__GI___errno_location()
  %v0_a978 = load i32, i32* %r7.global-to-local, align 4
  %v1_a978 = sub i32 0, %v0_a978
  %v2_a97c = inttoptr i32 %v0_a974 to i32*
  store i32 %v1_a978, i32* %v2_a97c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_a984.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a984

dec_label_pc_a984:                                ; preds = %entry, %dec_label_pc_a974
  %v1_a988 = phi i32 [ %v0_a964, %entry ], [ -1, %dec_label_pc_a974 ]
  %v2_a984 = phi i32 [ %v3_a958, %entry ], [ %v2_a984.pre, %dec_label_pc_a974 ]
  store i32 %v2_a984, i32* @r7, align 4
  ret i32 %v1_a988

; uselistorder directives
  uselistorder i32 %v0_a964, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a984, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_a9c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a9c8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a9c8, -4095
  br i1 %tmp, label %dec_label_pc_a9e8, label %dec_label_pc_a9d8

dec_label_pc_a9d8:                                ; preds = %entry
  %v0_a9d8 = call i32 @__GI___errno_location()
  %v0_a9dc = load i32, i32* %r7.global-to-local, align 4
  %v1_a9dc = sub i32 0, %v0_a9dc
  %v2_a9e0 = inttoptr i32 %v0_a9d8 to i32*
  store i32 %v1_a9dc, i32* %v2_a9e0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a9e8

dec_label_pc_a9e8:                                ; preds = %entry, %dec_label_pc_a9d8
  %v1_a9f4 = phi i32 [ %v0_a9c8, %entry ], [ -1, %dec_label_pc_a9d8 ]
  ret i32 %v1_a9f4

; uselistorder directives
  uselistorder i32 %v0_a9c8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9e8, { 1, 0 }
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_aa34 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_aa34, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aa34, -4095
  br i1 %tmp, label %dec_label_pc_aa54, label %dec_label_pc_aa44

dec_label_pc_aa44:                                ; preds = %entry
  %v0_aa44 = call i32 @__GI___errno_location()
  %v0_aa48 = load i32, i32* %r7.global-to-local, align 4
  %v1_aa48 = sub i32 0, %v0_aa48
  %v2_aa4c = inttoptr i32 %v0_aa44 to i32*
  store i32 %v1_aa48, i32* %v2_aa4c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa54

dec_label_pc_aa54:                                ; preds = %entry, %dec_label_pc_aa44
  %v1_aa60 = phi i32 [ %v0_aa34, %entry ], [ -1, %dec_label_pc_aa44 ]
  ret i32 %v1_aa60

; uselistorder directives
  uselistorder i32 %v0_aa34, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa54, { 1, 0 }
}

define i32 @__GI_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aa64 = load i32, i32* @r7, align 4
  store i32 %v3_aa64, i32* %stack_var_-8, align 4
  %v0_aa70 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_aa70, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aa70, -4095
  br i1 %tmp, label %dec_label_pc_aa90, label %dec_label_pc_aa80

dec_label_pc_aa80:                                ; preds = %entry
  %v0_aa80 = call i32 @__GI___errno_location()
  %v0_aa84 = load i32, i32* %r7.global-to-local, align 4
  %v1_aa84 = sub i32 0, %v0_aa84
  %v2_aa88 = inttoptr i32 %v0_aa80 to i32*
  store i32 %v1_aa84, i32* %v2_aa88, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_aa90.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_aa90

dec_label_pc_aa90:                                ; preds = %entry, %dec_label_pc_aa80
  %v1_aa94 = phi i32 [ %v0_aa70, %entry ], [ -1, %dec_label_pc_aa80 ]
  %v2_aa90 = phi i32 [ %v3_aa64, %entry ], [ %v2_aa90.pre, %dec_label_pc_aa80 ]
  store i32 %v2_aa90, i32* @r7, align 4
  ret i32 %v1_aa94

; uselistorder directives
  uselistorder i32 %v0_aa70, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa90, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa9c.outer

dec_label_pc_aa9c.outer:                          ; preds = %dec_label_pc_aab4, %entry
  %v0_aa9c.ph = phi i32 [ %v0_aa9c.pre.pre, %dec_label_pc_aab4 ], [ %arg1, %entry ]
  %tmp = icmp ult i32 %v0_aa9c.ph, -4095
  br label %dec_label_pc_aa9c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa9c.outer, %dec_label_pc_aa9c
  br i1 %tmp, label %dec_label_pc_aa9c, label %dec_label_pc_aab4

dec_label_pc_aab4:                                ; preds = %dec_label_pc_aa9c
  %v0_aab4 = call i32 @__GI___errno_location()
  %v1_aab8 = sub i32 0, %v0_aa9c.ph
  %v2_aabc = inttoptr i32 %v0_aab4 to i32*
  store i32 %v1_aab8, i32* %v2_aabc, align 4
  %v0_aa9c.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa9c.outer

; uselistorder directives
  uselistorder i32 %v0_aa9c.ph, { 1, 0 }
  uselistorder label %dec_label_pc_aa9c, { 1, 0 }
}

define i32 @__GI_close(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aac4 = load i32, i32* @r7, align 4
  store i32 %v3_aac4, i32* %stack_var_-8, align 4
  %v0_aad0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_aad0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aad0, -4095
  br i1 %tmp, label %dec_label_pc_aaf0, label %dec_label_pc_aae0

dec_label_pc_aae0:                                ; preds = %entry
  %v0_aae0 = call i32 @__GI___errno_location()
  %v0_aae4 = load i32, i32* %r7.global-to-local, align 4
  %v1_aae4 = sub i32 0, %v0_aae4
  %v2_aae8 = inttoptr i32 %v0_aae0 to i32*
  store i32 %v1_aae4, i32* %v2_aae8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_aaf0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_aaf0

dec_label_pc_aaf0:                                ; preds = %entry, %dec_label_pc_aae0
  %v1_aaf4 = phi i32 [ %v0_aad0, %entry ], [ -1, %dec_label_pc_aae0 ]
  %v2_aaf0 = phi i32 [ %v3_aac4, %entry ], [ %v2_aaf0.pre, %dec_label_pc_aae0 ]
  store i32 %v2_aaf0, i32* @r7, align 4
  ret i32 %v1_aaf4

; uselistorder directives
  uselistorder i32 %v0_aad0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aaf0, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  %v1_aafc = add i32 %arg1, 128
  %v2_ab00 = icmp ugt i32 %v1_aafc, 383
  %v0_ab08 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_ab00, i32 %v0_ab08)
  %v4_ab10 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 148) to i32*), align 4
  %v2_ab14 = mul i32 %arg1, 2
  %v2_ab18 = add i32 %v4_ab10, %v2_ab14
  %v3_ab18 = inttoptr i32 %v2_ab18 to i16*
  %v4_ab18 = load i16, i16* %v3_ab18, align 2
  %v6_ab18 = sext i16 %v4_ab18 to i32
  ret i32 %v6_ab18
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r3, align 4
  ret i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 1300)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_ab48 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_ab48, i32* @r0, align 4
  %v1_ab50 = call i32 @times(i32 %v2_ab48)
  %v2_ab54 = load i32, i32* %stack_var_-24, align 4
  %v2_ab58 = add i32 %v2_ab54, %tmp
  %v2_ab60 = mul i32 %v2_ab58, 10000
  %v1_ab64 = and i32 %v2_ab60, 2147483632
  ret i32 %v1_ab64

; uselistorder directives
  uselistorder i32 %v2_ab48, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1) local_unnamed_addr {
dec_label_pc_ab74:
  %v0_ab74 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ab74, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_ab74
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_ab74, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_ab84 = load i32, i32* @r2, align 4
  %v8_ab84 = icmp eq i32 %v0_ab84, 8
  store i1 %v8_ab84, i1* %cpsr_z.global-to-local, align 1
  %v5_ab88 = icmp slt i32 %v0_ab84, 8
  br i1 %v5_ab88, label %dec_label_pc_abe8, label %dec_label_pc_ab8c

dec_label_pc_ab8c:                                ; preds = %entry
  %v4_ab8c = mul i32 %arg2, 256
  %v5_ab8c = or i32 %v4_ab8c, %arg2
  %v4_ab90 = mul i32 %v5_ab8c, 65536
  %v5_ab90 = or i32 %v4_ab90, %v5_ab8c
  store i32 %v5_ab90, i32* %r1.global-to-local, align 4
  %v1_ab9457 = urem i32 %tmp, 4
  %v2_ab9458 = icmp eq i32 %v1_ab9457, 0
  store i1 %v2_ab9458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_ab9458, label %dec_label_pc_aba4, label %bb

bb:                                               ; preds = %dec_label_pc_ab8c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_ab8c ]
  %v3_ab9859 = phi i32 [ %v6_ab98, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_ab8c ]
  %v4_ab98 = inttoptr i32 %v3_ab9859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_ab98, align 1
  %v5_ab98 = load i32, i32* @r3, align 4
  %v6_ab98 = add i32 %v5_ab98, 1
  store i32 %v6_ab98, i32* @r3, align 4
  %v0_ab9c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_aba8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_ab9c.pr, label %dec_label_pc_aba4, label %.thread

.thread:                                          ; preds = %bb
  %v2_ab9c = add i32 %v0_aba8.pr.pre, -1
  store i32 %v2_ab9c, i32* @r2, align 4
  %v1_ab94 = urem i32 %v6_ab98, 4
  %v2_ab94 = icmp eq i32 %v1_ab94, 0
  store i1 %v2_ab94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ab94, label %dec_label_pc_aba4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_ab98.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_ab98.pre to i8
  br label %bb

dec_label_pc_aba4:                                ; preds = %.thread, %bb, %dec_label_pc_ab8c
  %v0_abb028 = phi i32 [ %tmp, %dec_label_pc_ab8c ], [ %v6_ab98, %bb ], [ %v6_ab98, %.thread ]
  %v0_aba8.pr = phi i32 [ %v0_ab84, %dec_label_pc_ab8c ], [ %v0_aba8.pr.pre, %bb ], [ %v2_ab9c, %.thread ]
  %v0_aba4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_aba4, i32* @ip, align 4
  %v8_aba810 = icmp eq i32 %v0_aba8.pr, 8
  store i1 %v8_aba810, i1* %cpsr_z.global-to-local, align 1
  %v5_abac11 = icmp slt i32 %v0_aba8.pr, 8
  br i1 %v5_abac11, label %dec_label_pc_abe8, label %dec_label_pc_abb0.preheader

dec_label_pc_abb0.preheader:                      ; preds = %dec_label_pc_aba4
  %v1_abb046 = inttoptr i32 %v0_abb028 to i32*
  store i32 %v0_aba4, i32* %v1_abb046, align 4
  %v3_abb047 = add i32 %v0_abb028, 4
  %v4_abb048 = inttoptr i32 %v3_abb047 to i32*
  %v5_abb049 = load i32, i32* @ip, align 4
  store i32 %v5_abb049, i32* %v4_abb048, align 4
  %v6_abb050 = add i32 %v0_abb028, 8
  store i32 %v6_abb050, i32* @r3, align 4
  %v0_abb451 = load i32, i32* @r2, align 4
  %v1_abb452 = add i32 %v0_abb451, -8
  store i32 %v1_abb452, i32* @r2, align 4
  %v5_abbc53 = icmp slt i32 %v1_abb452, 8
  br i1 %v5_abbc53, label %dec_label_pc_abb0.dec_label_pc_abe8.loopexit_crit_edge, label %dec_label_pc_abc0

dec_label_pc_abc0:                                ; preds = %dec_label_pc_abb0.preheader, %dec_label_pc_aba8.dec_label_pc_abb0_crit_edge
  %v6_abb055 = phi i32 [ %v6_abb0, %dec_label_pc_aba8.dec_label_pc_abb0_crit_edge ], [ %v6_abb050, %dec_label_pc_abb0.preheader ]
  %v0_abb054 = phi i32 [ %v12_abdc, %dec_label_pc_aba8.dec_label_pc_abb0_crit_edge ], [ %v0_abb028, %dec_label_pc_abb0.preheader ]
  %v1_abc0 = inttoptr i32 %v6_abb055 to i32*
  %v2_abc0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_abc0, i32* %v1_abc0, align 4
  %v3_abc0 = add i32 %v0_abb054, 12
  %v4_abc0 = inttoptr i32 %v3_abc0 to i32*
  %v5_abc0 = load i32, i32* @ip, align 4
  store i32 %v5_abc0, i32* %v4_abc0, align 4
  %v6_abc0 = add i32 %v0_abb054, 16
  store i32 %v6_abc0, i32* @r3, align 4
  %v0_abc4 = load i32, i32* @r2, align 4
  %v1_abc4 = add i32 %v0_abc4, -8
  store i32 %v1_abc4, i32* @r2, align 4
  %v5_abcc = icmp slt i32 %v1_abc4, 8
  br i1 %v5_abcc, label %dec_label_pc_abc0.dec_label_pc_abe8.loopexit_crit_edge, label %dec_label_pc_abd0

dec_label_pc_abd0:                                ; preds = %dec_label_pc_abc0
  %v1_abd0 = inttoptr i32 %v6_abc0 to i32*
  %v2_abd0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_abd0, i32* %v1_abd0, align 4
  %v3_abd0 = add i32 %v0_abb054, 20
  %v4_abd0 = inttoptr i32 %v3_abd0 to i32*
  %v5_abd0 = load i32, i32* @ip, align 4
  store i32 %v5_abd0, i32* %v4_abd0, align 4
  %v6_abd0 = add i32 %v0_abb054, 24
  store i32 %v6_abd0, i32* @r3, align 4
  %v0_abd4 = load i32, i32* @r2, align 4
  %v1_abd4 = add i32 %v0_abd4, -8
  store i32 %v1_abd4, i32* @r2, align 4
  %v5_abdc = icmp slt i32 %v1_abd4, 8
  br i1 %v5_abdc, label %dec_label_pc_abd0.dec_label_pc_abe8.loopexit_crit_edge, label %dec_label_pc_aba8

dec_label_pc_aba8:                                ; preds = %dec_label_pc_abd0
  %v7_abdc = inttoptr i32 %v6_abd0 to i32*
  %v8_abdc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_abdc, i32* %v7_abdc, align 4
  %v9_abdc = add i32 %v0_abb054, 28
  %v10_abdc = inttoptr i32 %v9_abdc to i32*
  %v11_abdc = load i32, i32* @ip, align 4
  store i32 %v11_abdc, i32* %v10_abdc, align 4
  %v12_abdc = add i32 %v0_abb054, 32
  store i32 %v12_abdc, i32* @r3, align 4
  %v6_abe0 = load i32, i32* @r2, align 4
  %v7_abe0 = add i32 %v6_abe0, -8
  store i32 %v7_abe0, i32* @r2, align 4
  %v5_abac = icmp slt i32 %v7_abe0, 8
  br i1 %v5_abac, label %dec_label_pc_aba8.dec_label_pc_abe8.loopexit_crit_edge, label %dec_label_pc_aba8.dec_label_pc_abb0_crit_edge

dec_label_pc_aba8.dec_label_pc_abb0_crit_edge:    ; preds = %dec_label_pc_aba8
  %v2_abb0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_abb0 = inttoptr i32 %v12_abdc to i32*
  store i32 %v2_abb0.pre, i32* %v1_abb0, align 4
  %v3_abb0 = add i32 %v0_abb054, 36
  %v4_abb0 = inttoptr i32 %v3_abb0 to i32*
  %v5_abb0 = load i32, i32* @ip, align 4
  store i32 %v5_abb0, i32* %v4_abb0, align 4
  %v6_abb0 = add i32 %v0_abb054, 40
  store i32 %v6_abb0, i32* @r3, align 4
  %v0_abb4 = load i32, i32* @r2, align 4
  %v1_abb4 = add i32 %v0_abb4, -8
  store i32 %v1_abb4, i32* @r2, align 4
  %v5_abbc = icmp slt i32 %v1_abb4, 8
  br i1 %v5_abbc, label %dec_label_pc_abb0.dec_label_pc_abe8.loopexit_crit_edge, label %dec_label_pc_abc0

dec_label_pc_aba8.dec_label_pc_abe8.loopexit_crit_edge: ; preds = %dec_label_pc_aba8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abe8

dec_label_pc_abb0.dec_label_pc_abe8.loopexit_crit_edge: ; preds = %dec_label_pc_aba8.dec_label_pc_abb0_crit_edge, %dec_label_pc_abb0.preheader
  %v1_abb4.lcssa = phi i32 [ %v1_abb452, %dec_label_pc_abb0.preheader ], [ %v1_abb4, %dec_label_pc_aba8.dec_label_pc_abb0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abe8

dec_label_pc_abc0.dec_label_pc_abe8.loopexit_crit_edge: ; preds = %dec_label_pc_abc0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abe8

dec_label_pc_abd0.dec_label_pc_abe8.loopexit_crit_edge: ; preds = %dec_label_pc_abd0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abe8

dec_label_pc_abe8:                                ; preds = %dec_label_pc_aba4, %dec_label_pc_aba8.dec_label_pc_abe8.loopexit_crit_edge, %dec_label_pc_abb0.dec_label_pc_abe8.loopexit_crit_edge, %dec_label_pc_abc0.dec_label_pc_abe8.loopexit_crit_edge, %dec_label_pc_abd0.dec_label_pc_abe8.loopexit_crit_edge, %entry
  %v0_abf0 = phi i32 [ %v0_ab84, %entry ], [ %v1_abd4, %dec_label_pc_abd0.dec_label_pc_abe8.loopexit_crit_edge ], [ %v1_abc4, %dec_label_pc_abc0.dec_label_pc_abe8.loopexit_crit_edge ], [ %v1_abb4.lcssa, %dec_label_pc_abb0.dec_label_pc_abe8.loopexit_crit_edge ], [ %v7_abe0, %dec_label_pc_aba8.dec_label_pc_abe8.loopexit_crit_edge ], [ %v0_aba8.pr, %dec_label_pc_aba4 ]
  %v2_abe8 = icmp eq i32 %v0_abf0, 0
  store i1 %v2_abe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_abe8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_abe8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_abe8
  %v1_abf0 = sub i32 7, %v0_abf0
  store i32 %v1_abf0, i32* @r2, align 4
  %v3_abf4 = mul i32 %v1_abf0, 4
  %v4_abf4 = add i32 %v3_abf4, ptrtoint (i32* @global_var_abfc.75 to i32)
  call void @__pseudo_branch(i32 %v4_abf4)
  %v0_abfc = load i32, i32* %r1.global-to-local, align 4
  %v1_abfc = trunc i32 %v0_abfc to i8
  %v2_abfc = load i32, i32* @r3, align 4
  %v3_abfc = inttoptr i32 %v2_abfc to i8*
  store i8 %v1_abfc, i8* %v3_abfc, align 1
  %v4_abfc = load i32, i32* @r3, align 4
  %v5_abfc = add i32 %v4_abfc, 1
  store i32 %v5_abfc, i32* %r3.global-to-local, align 4
  %v0_ac00 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac00 = trunc i32 %v0_ac00 to i8
  %v3_ac00 = inttoptr i32 %v5_abfc to i8*
  store i8 %v1_ac00, i8* %v3_ac00, align 1
  %v4_ac00 = load i32, i32* %r3.global-to-local, align 4
  %v5_ac00 = add i32 %v4_ac00, 1
  store i32 %v5_ac00, i32* %r3.global-to-local, align 4
  %v0_ac04 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac04 = trunc i32 %v0_ac04 to i8
  %v3_ac04 = inttoptr i32 %v5_ac00 to i8*
  store i8 %v1_ac04, i8* %v3_ac04, align 1
  %v4_ac04 = load i32, i32* %r3.global-to-local, align 4
  %v5_ac04 = add i32 %v4_ac04, 1
  store i32 %v5_ac04, i32* %r3.global-to-local, align 4
  %v0_ac08 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac08 = trunc i32 %v0_ac08 to i8
  %v3_ac08 = inttoptr i32 %v5_ac04 to i8*
  store i8 %v1_ac08, i8* %v3_ac08, align 1
  %v4_ac08 = load i32, i32* %r3.global-to-local, align 4
  %v5_ac08 = add i32 %v4_ac08, 1
  store i32 %v5_ac08, i32* %r3.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r1.global-to-local, align 4
  %v1_ac0c = trunc i32 %v0_ac0c to i8
  %v3_ac0c = inttoptr i32 %v5_ac08 to i8*
  store i8 %v1_ac0c, i8* %v3_ac0c, align 1
  %v4_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v5_ac0c = add i32 %v4_ac0c, 1
  store i32 %v5_ac0c, i32* %r3.global-to-local, align 4
  %v0_ac10 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac10 = trunc i32 %v0_ac10 to i8
  %v3_ac10 = inttoptr i32 %v5_ac0c to i8*
  store i8 %v1_ac10, i8* %v3_ac10, align 1
  %v4_ac10 = load i32, i32* %r3.global-to-local, align 4
  %v5_ac10 = add i32 %v4_ac10, 1
  store i32 %v5_ac10, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i8
  %v3_ac14 = inttoptr i32 %v5_ac10 to i8*
  store i8 %v1_ac14, i8* %v3_ac14, align 1
  %v4_ac14 = load i32, i32* %r3.global-to-local, align 4
  %v5_ac14 = add i32 %v4_ac14, 1
  store i32 %v5_ac14, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_abb0, { 1, 0 }
  uselistorder i32 %v12_abdc, { 1, 2, 0 }
  uselistorder i32 %v0_abb054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_aba8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_ab98, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_ab8c, { 1, 0 }
  uselistorder i32 %v0_ab84, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 5, 4, 3, 2, 1, 8, 7, 0, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_abe8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_abc0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_ac8c = inttoptr i32 %arg2 to i8*
  %v3_ac8c = call i32 @_memcpy(i8* %v2_ac8c, i32 %arg1)
  ret i32 %v3_ac8c
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_ac94.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_ac94 = phi i32 [ %v0_ac94.pre, %bb ], [ %v5_ac94, %bb3 ]
  %v0_ac90 = phi i32 [ %tmp, %bb ], [ %v5_ac90, %bb3 ]
  %v1_ac90 = inttoptr i32 %v0_ac90 to i8*
  %v2_ac90 = load i8, i8* %v1_ac90, align 1
  %v1_ac94 = inttoptr i32 %v0_ac94 to i8*
  %v2_ac94 = load i8, i8* %v1_ac94, align 1
  %v3_ac94 = zext i8 %v2_ac94 to i32
  %v2_ac98 = icmp eq i8 %v2_ac90, 0
  br i1 %v2_ac98, label %.dec_label_pc_aca4_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_ac94 = add i32 %v0_ac94, 1
  %v5_ac90 = add i32 %v0_ac90, 1
  %v3_ac90 = zext i8 %v2_ac90 to i32
  %v10_ac9c = icmp eq i8 %v2_ac90, %v2_ac94
  br i1 %v10_ac9c, label %entry, label %dec_label_pc_aca4

.dec_label_pc_aca4_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_aca4

dec_label_pc_aca4:                                ; preds = %bb3, %.dec_label_pc_aca4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_aca4_crit_edge ], [ %v3_ac90, %bb3 ]
  %v2_aca4.pre-phi = sub nsw i32 %.pn, %v3_ac94
  ret i32 %v2_aca4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_ac90, { 0, 2, 1 }
  uselistorder i32 %v0_ac90, { 1, 0 }
  uselistorder i32 %v0_ac94, { 1, 0 }
  uselistorder label %dec_label_pc_aca4, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_acb0 = load i32, i32* @r0, align 4
  %v1_acb0 = load i32, i32* @r1, align 4
  %v2_acb0 = inttoptr i32 %v0_acb0 to i8*
  %v3_acb0 = call i32 @_memcpy(i8* %v2_acb0, i32 %v1_acb0)
  ret i32 %v3_acb0
}

define i32 @bzero(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r2, align 4
  %v0_acc8 = load i32, i32* @r0, align 4
  %v2_acc8 = inttoptr i32 %v0_acc8 to i8*
  %v3_acc8 = call i32 @__GI_memset(i8* %v2_acc8, i32 0)
  ret i32 %v3_acc8
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_ace01 = load i32, i32* @r1, align 4
  %v1_ace02 = inttoptr i32 %v0_ace01 to i8*
  %v2_ace03 = load i8, i8* %v1_ace02, align 1
  %v2_ace45 = icmp eq i8 %v2_ace03, 0
  store i1 %v2_ace45, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_ace03, i8* %arg1, align 1
  br i1 %v2_ace45, label %dec_label_pc_acf0, label %dec_label_pc_acd8

dec_label_pc_acd8:                                ; preds = %entry, %dec_label_pc_acd8
  %v0_acd8 = load i32, i32* @r1, align 4
  %v1_acd8 = add i32 %v0_acd8, 1
  store i32 %v1_acd8, i32* @r1, align 4
  %v0_acdc = load i32, i32* %r2.global-to-local, align 4
  %v1_acdc = add i32 %v0_acdc, 1
  store i32 %v1_acdc, i32* %r2.global-to-local, align 4
  %v1_ace0 = inttoptr i32 %v1_acd8 to i8*
  %v2_ace0 = load i8, i8* %v1_ace0, align 1
  %v2_ace4 = icmp eq i8 %v2_ace0, 0
  store i1 %v2_ace4, i1* %cpsr_z.global-to-local, align 1
  %v3_ace8 = inttoptr i32 %v1_acdc to i8*
  store i8 %v2_ace0, i8* %v3_ace8, align 1
  %v0_acec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_acec, label %dec_label_pc_acf0, label %dec_label_pc_acd8

dec_label_pc_acf0:                                ; preds = %dec_label_pc_acd8, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_acd8, { 1, 0 }
}

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_acf8 = urem i32 %arg1, 256
  %v0_ad183 = load i32, i32* @r0, align 4
  %v1_ad184 = urem i32 %v0_ad183, 4
  %v2_ad185 = icmp eq i32 %v1_ad184, 0
  br i1 %v2_ad185, label %dec_label_pc_ad20, label %dec_label_pc_ad00

dec_label_pc_ad00:                                ; preds = %entry, %dec_label_pc_ad14
  %v0_ad14 = phi i32 [ %v1_ad14, %dec_label_pc_ad14 ], [ %v0_ad183, %entry ]
  %v1_ad00 = inttoptr i32 %v0_ad14 to i8*
  %v2_ad00 = load i8, i8* %v1_ad00, align 1
  %v3_ad00 = zext i8 %v2_ad00 to i32
  store i32 %v3_ad00, i32* @r3, align 4
  %v9_ad04 = icmp eq i32 %v3_ad00, %v1_acf8
  br i1 %v9_ad04, label %dec_label_pc_add4, label %dec_label_pc_ad0c

dec_label_pc_ad0c:                                ; preds = %dec_label_pc_ad00
  %v2_ad0c = icmp eq i8 %v2_ad00, 0
  br i1 %v2_ad0c, label %dec_label_pc_add0, label %dec_label_pc_ad14

dec_label_pc_ad14:                                ; preds = %dec_label_pc_ad0c
  %v1_ad14 = add i32 %v0_ad14, 1
  %v1_ad18 = urem i32 %v1_ad14, 4
  %v2_ad18 = icmp eq i32 %v1_ad18, 0
  br i1 %v2_ad18, label %dec_label_pc_ad20, label %dec_label_pc_ad00

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ad14, %entry
  %v0_ad24 = phi i32 [ %v0_ad183, %entry ], [ %v1_ad14, %dec_label_pc_ad14 ]
  %v4_ad20 = mul nuw nsw i32 %v1_acf8, 256
  %v5_ad20 = or i32 %v4_ad20, %v1_acf8
  %v4_ad28 = mul i32 %v5_ad20, 65536
  %v5_ad28 = or i32 %v4_ad28, %v5_ad20
  br label %dec_label_pc_ad2c

dec_label_pc_ad2c:                                ; preds = %dec_label_pc_adc8, %dec_label_pc_ad68, %dec_label_pc_ad20
  %v0_ad90 = phi i32 [ %v0_ad24, %dec_label_pc_ad20 ], [ %v4_ad2c, %dec_label_pc_ad68 ], [ %v4_ad2c, %dec_label_pc_adc8 ]
  %v1_ad2c = inttoptr i32 %v0_ad90 to i32*
  %v2_ad2c = load i32, i32* %v1_ad2c, align 4
  %v4_ad2c = add i32 %v0_ad90, 4
  %v2_ad34 = xor i32 %v2_ad2c, %v5_ad28
  %v2_ad38 = add i32 %v2_ad34, 2130640639
  store i32 %v2_ad38, i32* @ip, align 4
  %v2_ad40 = add i32 %v2_ad2c, 2130640639
  %v1_ad44 = sub i32 -1, %v2_ad2c
  %v2_ad48 = xor i32 %v2_ad40, %v1_ad44
  %v2_ad54 = and i32 %v2_ad48, -2130640640
  %v2_ad5c = icmp eq i32 %v2_ad54, 0
  br i1 %v2_ad5c, label %dec_label_pc_ad68, label %dec_label_pc_ad70

dec_label_pc_ad68:                                ; preds = %dec_label_pc_ad2c
  %v1_ad50 = sub i32 -1, %v2_ad34
  %v2_ad58 = xor i32 %v2_ad38, %v1_ad50
  %v2_ad60 = and i32 %v2_ad58, -2130640640
  %v2_ad68 = icmp eq i32 %v2_ad60, 0
  br i1 %v2_ad68, label %dec_label_pc_ad2c, label %dec_label_pc_ad70

dec_label_pc_ad70:                                ; preds = %dec_label_pc_ad2c, %dec_label_pc_ad68
  %v2_ad70 = inttoptr i32 %v0_ad90 to i8*
  %v3_ad70 = load i8, i8* %v2_ad70, align 1
  %v4_ad70 = zext i8 %v3_ad70 to i32
  store i32 %v4_ad70, i32* @r3, align 4
  %v9_ad74 = icmp eq i32 %v4_ad70, %v1_acf8
  br i1 %v9_ad74, label %dec_label_pc_add4, label %dec_label_pc_ad80

dec_label_pc_ad80:                                ; preds = %dec_label_pc_ad70
  %v2_ad80 = icmp eq i8 %v3_ad70, 0
  br i1 %v2_ad80, label %dec_label_pc_add0, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_ad80
  %v1_ad88 = add i32 %v0_ad90, 1
  %v2_ad88 = inttoptr i32 %v1_ad88 to i8*
  %v3_ad88 = load i8, i8* %v2_ad88, align 1
  %v4_ad88 = zext i8 %v3_ad88 to i32
  store i32 %v4_ad88, i32* @r3, align 4
  %v9_ad8c = icmp eq i32 %v4_ad88, %v1_acf8
  br i1 %v9_ad8c, label %dec_label_pc_add4, label %dec_label_pc_ad98

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad88
  %v2_ad98 = icmp eq i8 %v3_ad88, 0
  br i1 %v2_ad98, label %dec_label_pc_add0, label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad98
  %v1_ada0 = add i32 %v0_ad90, 2
  %v2_ada0 = inttoptr i32 %v1_ada0 to i8*
  %v3_ada0 = load i8, i8* %v2_ada0, align 1
  %v4_ada0 = zext i8 %v3_ada0 to i32
  store i32 %v4_ada0, i32* @r3, align 4
  %v9_ada4 = icmp eq i32 %v4_ada0, %v1_acf8
  br i1 %v9_ada4, label %dec_label_pc_add4, label %dec_label_pc_adb0

dec_label_pc_adb0:                                ; preds = %dec_label_pc_ada0
  %v2_adb0 = icmp eq i8 %v3_ada0, 0
  br i1 %v2_adb0, label %dec_label_pc_add0, label %dec_label_pc_adb8

dec_label_pc_adb8:                                ; preds = %dec_label_pc_adb0
  %v1_adb8 = add i32 %v0_ad90, 3
  %v2_adb8 = inttoptr i32 %v1_adb8 to i8*
  %v3_adb8 = load i8, i8* %v2_adb8, align 1
  %v4_adb8 = zext i8 %v3_adb8 to i32
  store i32 %v4_adb8, i32* @r3, align 4
  %v9_adbc = icmp eq i32 %v4_adb8, %v1_acf8
  br i1 %v9_adbc, label %dec_label_pc_add4, label %dec_label_pc_adc8

dec_label_pc_adc8:                                ; preds = %dec_label_pc_adb8
  %v2_adc8 = icmp eq i8 %v3_adb8, 0
  br i1 %v2_adc8, label %dec_label_pc_add0, label %dec_label_pc_ad2c

dec_label_pc_add0:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_adc8, %dec_label_pc_adb0, %dec_label_pc_ad98, %dec_label_pc_ad80
  br label %dec_label_pc_add4

dec_label_pc_add4:                                ; preds = %dec_label_pc_ad00, %dec_label_pc_adb8, %dec_label_pc_ada0, %dec_label_pc_ad88, %dec_label_pc_ad70, %dec_label_pc_add0
  %v1_add8 = phi i32 [ 0, %dec_label_pc_add0 ], [ %v1_adb8, %dec_label_pc_adb8 ], [ %v1_ada0, %dec_label_pc_ada0 ], [ %v1_ad88, %dec_label_pc_ad88 ], [ %v0_ad90, %dec_label_pc_ad70 ], [ %v0_ad14, %dec_label_pc_ad00 ]
  ret i32 %v1_add8

; uselistorder directives
  uselistorder i32 %v4_ad2c, { 1, 0 }
  uselistorder i32 %v2_ad2c, { 0, 2, 1 }
  uselistorder i32 %v0_ad90, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_ad20, { 1, 0 }
  uselistorder i32 %v1_ad14, { 1, 0, 2 }
  uselistorder i32 %v0_ad183, { 2, 1, 0 }
  uselistorder i32 %v1_acf8, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_add4, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_add0, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_ad70, { 1, 0 }
  uselistorder label %dec_label_pc_ad00, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 808), i32* @r2, align 4
  %v0_adfc = call i32 @strtok_r()
  ret i32 %v0_adfc
}

define i32 @__GI_htons(i32 %arg1) local_unnamed_addr {
entry:
  %v3_ae14 = udiv i32 %arg1, 256
  %v1_ae18 = mul i32 %arg1, 256
  %v4_ae1c = and i32 %v1_ae18, 65280
  %v5_ae1c = or i32 %v4_ae1c, %v3_ae14
  ret i32 %v5_ae1c
}

define i32 @__GI_htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v5_ae3c = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v5_ae3c
}

define i32 @__GI_ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %v3_ae44 = udiv i32 %arg1, 256
  %v1_ae48 = mul i32 %arg1, 256
  %v4_ae4c = and i32 %v1_ae48, 65280
  %v5_ae4c = or i32 %v4_ae4c, %v3_ae44
  ret i32 %v5_ae4c
}

define i32 @__GI_ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v5_ae6c = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v5_ae6c
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_ae7c = ptrtoint i32* %stack_var_-12 to i32
  %v0_ae80 = load i32, i32* @r0, align 4
  %v2_ae80 = inttoptr i32 %v0_ae80 to i8*
  %v3_ae80 = call i32 @inet_aton(i8* %v2_ae80, i32 %v2_ae7c)
  %v2_ae84 = icmp eq i32 %v3_ae80, 0
  %v4_ae88 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_ae84, i32 -1, i32 %v4_ae88
  ret i32 %storemerge
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  store i32 2, i32* @r1, align 4
  %v0_aea8 = call i32 @__GI_gethostbyname2()
  ret i32 %v0_aea8
}

define i32 @__GI_gethostbyname2() local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_aeb8 = load i32, i32* @r4, align 4
  %v6_aeb8 = load i32, i32* @r5, align 4
  %v0_aec0 = load i32, i32* @r0, align 4
  store i32 %v0_aec0, i32* @r4, align 4
  %v0_aec4 = load i32, i32* @r1, align 4
  store i32 %v0_aec4, i32* @r5, align 4
  %v0_aec8 = call i32 @__GI___h_errno_location()
  %v0_aef0 = load i32, i32* @r4, align 4
  %v2_aef4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_aef4, i32* @ip, align 4
  %v0_aef8 = load i32, i32* @r5, align 4
  %v8_af00 = call i32 @gethostbyname2_r(i32 %v0_aef0, i32 %v0_aef8, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 1252) to i32*), i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 812), i32 440, i32 %v2_aef4, i32 %v0_aec8)
  %v3_af04 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_aeb8, i32* @r4, align 4
  store i32 %v6_aeb8, i32* @r5, align 4
  ret i32 %v3_af04
}

define i32 @function_af18(i32 %arg1) local_unnamed_addr {
dec_label_pc_af18:
  %v0_af18 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_af18, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_af18
  %v2_af18 = load i32, i32* @ip, align 4
  %v5_af18 = udiv i32 %v2_af18, 64
  %v6_af18 = and i32 %v5_af18, %arg1
  %v2_af1c = load i32, i32* @r4, align 4
  %v3_af1c = udiv i32 %v2_af1c, 512
  %v4_af1c = mul i32 %v2_af1c, 8388608
  %v5_af1c = or i32 %v3_af1c, %v4_af1c
  %v8_af1c = and i32 %v6_af18, %v5_af1c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af18, %bb
  %v9_af1c = phi i32 [ %arg1, %dec_label_pc_af18 ], [ %v8_af1c, %bb ]
  ret i32 %v9_af1c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_af20 = load i32, i32* @r7, align 4
  store i32 %v3_af20, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_af48, label %dec_label_pc_af38

dec_label_pc_af38:                                ; preds = %entry
  %v0_af38 = call i32 @__GI___errno_location()
  %v0_af3c = load i32, i32* %r7.global-to-local, align 4
  %v1_af3c = sub i32 0, %v0_af3c
  %v2_af40 = inttoptr i32 %v0_af38 to i32*
  store i32 %v1_af3c, i32* %v2_af40, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_af4c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_af48

dec_label_pc_af48:                                ; preds = %entry, %dec_label_pc_af38
  %v2_af4c = phi i32 [ %v3_af20, %entry ], [ %v2_af4c.pre, %dec_label_pc_af38 ]
  %v0_af48 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_af38 ]
  store i32 %v2_af4c, i32* @r7, align 4
  ret i32 %v0_af48

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_af48, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_af8c, label %dec_label_pc_af7c

dec_label_pc_af7c:                                ; preds = %entry
  %v0_af7c = call i32 @__GI___errno_location()
  %v0_af80 = load i32, i32* %r4.global-to-local, align 4
  %v1_af80 = sub i32 0, %v0_af80
  %v2_af84 = inttoptr i32 %v0_af7c to i32*
  store i32 %v1_af80, i32* %v2_af84, align 4
  br label %dec_label_pc_af8c

dec_label_pc_af8c:                                ; preds = %entry, %dec_label_pc_af7c
  %v1_af94 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_af7c ]
  ret i32 %v1_af94

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af8c, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_af9c = load i32, i32* @r7, align 4
  store i32 %v3_af9c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_afc4, label %dec_label_pc_afb4

dec_label_pc_afb4:                                ; preds = %entry
  %v0_afb4 = call i32 @__GI___errno_location()
  %v0_afb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_afb8 = sub i32 0, %v0_afb8
  %v2_afbc = inttoptr i32 %v0_afb4 to i32*
  store i32 %v1_afb8, i32* %v2_afbc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_afc8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_afc4

dec_label_pc_afc4:                                ; preds = %entry, %dec_label_pc_afb4
  %v2_afc8 = phi i32 [ %v3_af9c, %entry ], [ %v2_afc8.pre, %dec_label_pc_afb4 ]
  %v0_afc4 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_afb4 ]
  store i32 %v2_afc8, i32* @r7, align 4
  ret i32 %v0_afc4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_afc4, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_afd4 = load i32, i32* @r7, align 4
  store i32 %v3_afd4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_affc, label %dec_label_pc_afec

dec_label_pc_afec:                                ; preds = %entry
  %v0_afec = call i32 @__GI___errno_location()
  %v0_aff0 = load i32, i32* %r7.global-to-local, align 4
  %v1_aff0 = sub i32 0, %v0_aff0
  %v2_aff4 = inttoptr i32 %v0_afec to i32*
  store i32 %v1_aff0, i32* %v2_aff4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_b000.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_affc

dec_label_pc_affc:                                ; preds = %entry, %dec_label_pc_afec
  %v2_b000 = phi i32 [ %v3_afd4, %entry ], [ %v2_b000.pre, %dec_label_pc_afec ]
  %v0_affc = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_afec ]
  store i32 %v2_b000, i32* @r7, align 4
  ret i32 %v0_affc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_affc, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b00c = load i32, i32* @r7, align 4
  store i32 %v3_b00c, i32* %stack_var_-8, align 4
  %v0_b018 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_b018, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b018, -4095
  br i1 %tmp, label %dec_label_pc_b038, label %dec_label_pc_b028

dec_label_pc_b028:                                ; preds = %entry
  %v0_b028 = call i32 @__GI___errno_location()
  %v0_b02c = load i32, i32* %r7.global-to-local, align 4
  %v1_b02c = sub i32 0, %v0_b02c
  %v2_b030 = inttoptr i32 %v0_b028 to i32*
  store i32 %v1_b02c, i32* %v2_b030, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_b038.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_b038

dec_label_pc_b038:                                ; preds = %entry, %dec_label_pc_b028
  %v1_b03c = phi i32 [ %v0_b018, %entry ], [ -1, %dec_label_pc_b028 ]
  %v2_b038 = phi i32 [ %v3_b00c, %entry ], [ %v2_b038.pre, %dec_label_pc_b028 ]
  store i32 %v2_b038, i32* @r7, align 4
  ret i32 %v1_b03c

; uselistorder directives
  uselistorder i32 %v0_b018, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b038, { 1, 0 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v3_b044 = load i32, i32* @r4, align 4
  %v0_b04c = call i32 @__GI_getpid()
  %v2_b054 = call i32 @kill(i32 %v0_b04c, i32 %arg1)
  store i32 %v3_b044, i32* @r4, align 4
  ret i32 %v2_b054

; uselistorder directives
  uselistorder i32 ()* @__GI_getpid, { 0, 3, 2, 1 }
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_b060 = load i32, i32* @r4, align 4
  store i32 %v3_b060, i32* %stack_var_-16, align 4
  %v6_b060 = load i32, i32* @r5, align 4
  %v9_b060 = load i32, i32* @r6, align 4
  %v7_b068 = icmp eq i32 %arg2, -1
  br i1 %v7_b068, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_b070 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_b08c

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b094

dec_label_pc_b08c:                                ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  %v7_b090 = icmp slt i32 %arg1, 65
  br i1 %v7_b090, label %dec_label_pc_b0a8, label %dec_label_pc_b094

dec_label_pc_b094:                                ; preds = %.thread16, %dec_label_pc_b08c
  %v0_b094 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_b0a0 = inttoptr i32 %v0_b094 to i32*
  store i32 22, i32* %v2_b0a0, align 4
  %v0_b100.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_b0a8:                                ; preds = %dec_label_pc_b08c
  %v2_b0a8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_b0a8, i32* @r4, align 4
  %v2_b0b0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v2_b0c0 = call i32 @__sigaddset(i32 %v2_b0b0, i32 %arg1)
  %v0_b0c8 = load i32, i32* @r5, align 4
  %v0_b0cc = load i32, i32* @r6, align 4
  %v2_b0cc = add i32 %v0_b0cc, 9564
  %v2_b0d0 = call i32 @__GI___sigismember(i32 %v2_b0cc, i32 %v0_b0c8)
  store i32 %v2_b070, i32* %r2.global-to-local, align 4
  %v0_b0e8 = load i32, i32* @r5, align 4
  %v3_b0f0 = call i32 @__libc_sigaction(i32 %v0_b0e8, i32 %v2_b0a8, i32 %v2_b070)
  %v1_b0f4 = icmp slt i32 %v3_b0f0, 0
  br i1 %v1_b0f4, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_b0a8
  %v5_b0f8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_b0f8, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_b0a8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_b094, %bb32
  %v0_b100 = phi i32 [ %v5_b0f8, %bb31 ], [ %v0_b100.pre, %dec_label_pc_b094 ], [ -1, %bb32 ]
  %v2_b108 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_b108, i32* @r4, align 4
  store i32 %v6_b060, i32* @r5, align 4
  store i32 %v9_b060, i32* @r6, align 4
  ret i32 %v0_b100

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 65, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b094, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b118 = add i32 %arg2, -1
  %v3_b11c = udiv i32 %v1_b118, 32
  %v4_b120 = mul nuw nsw i32 %v3_b11c, 4
  %v5_b120 = add i32 %v4_b120, %arg1
  %v6_b120 = inttoptr i32 %v5_b120 to i32*
  %v7_b120 = load i32, i32* %v6_b120, align 4
  %v1_b124 = urem i32 %v1_b118, 32
  %v7_b12c = shl i32 1, %v1_b124
  %v8_b12c = and i32 %v7_b120, %v7_b12c
  %v10_b12c = icmp ne i32 %v8_b12c, 0
  %. = zext i1 %v10_b12c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_b118, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b13c = add i32 %arg2, -1
  %v3_b140 = udiv i32 %v1_b13c, 32
  %v4_b144 = mul nuw nsw i32 %v3_b140, 4
  %v5_b144 = add i32 %v4_b144, %arg1
  %v6_b144 = inttoptr i32 %v5_b144 to i32*
  %v7_b144 = load i32, i32* %v6_b144, align 4
  %v1_b148 = urem i32 %v1_b13c, 32
  %v7_b150 = shl i32 1, %v1_b148
  %v8_b150 = or i32 %v7_b144, %v7_b150
  store i32 %v8_b150, i32* %v6_b144, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_b13c, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b160 = add i32 %arg2, -1
  %v3_b164 = udiv i32 %v1_b160, 32
  %v4_b168 = mul nuw nsw i32 %v3_b164, 4
  %v5_b168 = add i32 %v4_b168, %arg1
  %v6_b168 = inttoptr i32 %v5_b168 to i32*
  %v7_b168 = load i32, i32* %v6_b168, align 4
  %v1_b16c = urem i32 %v1_b160, 32
  %tmp = shl i32 -1, %v1_b16c
  %v8_b174 = add i32 %tmp, -1
  %v9_b174 = and i32 %v7_b168, %v8_b174
  store i32 %v9_b174, i32* %v6_b168, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_b160, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_b184 = udiv i32 %arg1, 256
  store i32 %v3_b184, i32* %r1.global-to-local, align 4
  %v2_b188 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_b188, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_b194 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_b188, i32 %v0_b194)
  %v0_b198 = load i32, i32* %r1.global-to-local, align 4
  %v1_b198 = add i32 %v0_b198, 1048320
  %v3_b19c = udiv i32 %v1_b198, 65536
  %v1_b1a0 = and i32 %v3_b19c, 8
  %v6_b1a4 = shl i32 %v0_b198, %v1_b1a0
  %v1_b1a8 = add i32 %v6_b1a4, 520192
  %v3_b1ac = udiv i32 %v1_b1a8, 65536
  %v1_b1b0 = and i32 %v3_b1ac, 4
  %v6_b1b4 = shl i32 %v6_b1a4, %v1_b1b0
  %v1_b1b8 = add i32 %v6_b1b4, 245760
  %v3_b1bc = udiv i32 %v1_b1b8, 65536
  %v1_b1c0 = and i32 %v3_b1bc, 2
  %v6_b1c4 = shl i32 %v6_b1b4, %v1_b1c0
  store i32 %v6_b1c4, i32* %r1.global-to-local, align 4
  %v1_b1c8 = sub nsw i32 13, %v1_b1a0
  %v2_b1cc = sub nsw i32 %v1_b1c8, %v1_b1b0
  %v3_b1d0 = udiv i32 %v6_b1c4, 32768
  %v4_b1d0 = sub nuw nsw i32 -1, %v3_b1d0
  %v4_b1d4 = udiv i32 %v6_b1c4, 16384
  %v5_b1d4 = and i32 %v4_b1d4, %v4_b1d0
  %v2_b1d8 = sub nsw i32 %v2_b1cc, %v1_b1c0
  %v2_b1dc = add nsw i32 %v2_b1d8, %v5_b1d4
  %v1_b1e0 = add nsw i32 %v2_b1dc, 6
  %v0_b1e4 = load i32, i32* %ip.global-to-local, align 4
  %v6_b1e4 = lshr i32 %v0_b1e4, %v1_b1e0
  %v3_b1e8 = mul nsw i32 %v2_b1dc, 4
  %v1_b1ec = add nsw i32 %v3_b1e8, 32
  %v1_b1f0 = urem i32 %v6_b1e4, 4
  %v2_b1f4 = or i32 %v1_b1f0, %v1_b1ec
  ret i32 %v2_b1f4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_b1fc = load i32, i32* @r4, align 4
  %v6_b1fc = load i32, i32* @r5, align 4
  %v9_b1fc = load i32, i32* @r6, align 4
  %v12_b1fc = load i32, i32* @r7, align 4
  %v15_b1fc = load i32, i32* @r8, align 4
  %v18_b1fc = load i32, i32* @sb, align 4
  %v21_b1fc = load i32, i32* @sl, align 4
  %v24_b1fc = load i32, i32* @fp, align 4
  %v27_b1fc = load i32, i32* @lr, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  %v4_b210 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 72) to i32*), align 4
  store i32 %v4_b210, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_b21c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 36) to i32*), align 4
  store i32 %v4_b21c, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %v4_b210, i32* @r2, align 4
  %v2_b228 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_b228, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %ip.global-to-local, align 4
  %v4_b234 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  store i32 %v4_b234, i32* %ip.global-to-local, align 4
  store i32 45632, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_b234)
  %v0_b240 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_b240, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  %v4_b24c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 16) to i32*), align 4
  store i32 %v4_b24c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_b258.95 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_b24c)
  %v0_b258 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_b258, -32
  br i1 %tmp, label %dec_label_pc_b274, label %dec_label_pc_b260

dec_label_pc_b260:                                ; preds = %entry
  %v0_b260 = call i32 @__GI___errno_location()
  store i32 %v0_b260, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_b26c = inttoptr i32 %v0_b260 to i32*
  store i32 12, i32* %v2_b26c, align 4
  br label %dec_label_pc_baf0

dec_label_pc_b274:                                ; preds = %entry
  %v1_b274 = add i32 %v0_b258, 11
  store i32 %v1_b274, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  %v2_b280 = icmp ugt i32 %v1_b274, 14
  %v7_b280 = icmp eq i32 %v1_b274, 15
  %v2_b284 = xor i1 %v7_b280, true
  %v3_b284 = and i1 %v2_b280, %v2_b284
  br i1 %v3_b284, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_b274
  %v5_b284 = and i32 %v1_b274, -8
  store i32 %v5_b284, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_b274, %bb
  %v4_b288 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b288, i32* @r0, align 4
  %v1_b28c = inttoptr i32 %v4_b288 to i32*
  %v2_b28c = load i32, i32* %v1_b28c, align 4
  store i32 %v2_b28c, i32* @r4, align 4
  %v2_b290 = xor i1 %v2_b280, true
  %v3_b290 = or i1 %v7_b280, %v2_b290
  br i1 %v3_b290, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_b294 = urem i32 %v2_b28c, 2
  %v2_b294 = icmp eq i32 %v1_b294, 0
  br i1 %v2_b294, label %dec_label_pc_b29c, label %dec_label_pc_b2ac

dec_label_pc_b29c:                                ; preds = %bb140
  %v2_b29c = icmp eq i32 %v2_b28c, 0
  br i1 %v2_b29c, label %dec_label_pc_b2a4, label %dec_label_pc_b688

dec_label_pc_b2a4:                                ; preds = %dec_label_pc_b29c
  %v0_b2a4 = call i32 @__malloc_consolidate()
  store i32 %v0_b2a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b688

dec_label_pc_b2ac:                                ; preds = %bb140
  %v0_b2ac = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_b2ac, %v2_b28c
  br i1 %tmp201, label %dec_label_pc_b2d4, label %dec_label_pc_b2b4

dec_label_pc_b2b4:                                ; preds = %dec_label_pc_b2ac
  %v1_b2b4 = add i32 %v4_b288, -4
  store i32 %v1_b2b4, i32* %r1.global-to-local, align 4
  %v3_b2b8 = udiv i32 %v0_b2ac, 8
  store i32 %v3_b2b8, i32* %r2.global-to-local, align 4
  %v4_b2bc = mul nuw i32 %v3_b2b8, 4
  %v5_b2bc = add i32 %v4_b2bc, %v1_b2b4
  %v6_b2bc = inttoptr i32 %v5_b2bc to i32*
  %v7_b2bc = load i32, i32* %v6_b2bc, align 4
  store i32 %v7_b2bc, i32* %r0.global-to-local, align 4
  %v2_b2c0 = icmp eq i32 %v7_b2bc, 0
  br i1 %v2_b2c0, label %dec_label_pc_b2d4, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_b2b4
  %v2_b2c4 = add i32 %v7_b2bc, 8
  %v3_b2c4 = inttoptr i32 %v2_b2c4 to i32*
  %v4_b2c4 = load i32, i32* %v3_b2c4, align 4
  store i32 %v4_b2c4, i32* %r3.global-to-local, align 4
  store i32 %v2_b2c4, i32* %r0.global-to-local, align 4
  store i32 %v2_b2c4, i32* %r4.global-to-local, align 4
  store i32 %v4_b2c4, i32* %v6_b2bc, align 4
  br label %dec_label_pc_bad4

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b2b4, %dec_label_pc_b2ac
  %tmp202 = icmp ugt i32 %v0_b2ac, 255
  br i1 %tmp202, label %dec_label_pc_b324, label %dec_label_pc_b2dc

dec_label_pc_b2dc:                                ; preds = %dec_label_pc_b2d4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b2e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  %v3_b2e8 = udiv i32 %v0_b2ac, 8
  store i32 %v3_b2e8, i32* @r7, align 4
  %v4_b2ec = mul nuw i32 %v3_b2e8, 8
  %v5_b2ec = add i32 %v4_b2e4, %v4_b2ec
  store i32 %v5_b2ec, i32* %r3.global-to-local, align 4
  %v1_b2f0 = add i32 %v5_b2ec, 44
  store i32 %v1_b2f0, i32* %ip.global-to-local, align 4
  %v1_b2f4 = add i32 %v5_b2ec, 56
  %v2_b2f4 = inttoptr i32 %v1_b2f4 to i32*
  %v3_b2f4 = load i32, i32* %v2_b2f4, align 4
  store i32 %v3_b2f4, i32* %r0.global-to-local, align 4
  %v9_b2f8 = icmp eq i32 %v3_b2f4, %v1_b2f0
  br i1 %v9_b2f8, label %dec_label_pc_b484, label %dec_label_pc_b300

dec_label_pc_b300:                                ; preds = %dec_label_pc_b2dc
  %v2_b300 = add i32 %v3_b2f4, %v0_b2ac
  store i32 %v2_b300, i32* %r3.global-to-local, align 4
  %v1_b304 = add i32 %v2_b300, 4
  %v2_b304 = inttoptr i32 %v1_b304 to i32*
  %v3_b304 = load i32, i32* %v2_b304, align 4
  store i32 %v3_b304, i32* %r2.global-to-local, align 4
  %v1_b308 = add i32 %v3_b2f4, 12
  %v2_b308 = inttoptr i32 %v1_b308 to i32*
  %v3_b308 = load i32, i32* %v2_b308, align 4
  store i32 %v3_b308, i32* %r1.global-to-local, align 4
  %v1_b30c = or i32 %v3_b304, 1
  store i32 %v1_b30c, i32* %r2.global-to-local, align 4
  %v1_b310 = add i32 %v3_b2f4, 8
  store i32 %v1_b310, i32* %r4.global-to-local, align 4
  store i32 %v1_b30c, i32* %v2_b304, align 4
  %v0_b318 = load i32, i32* %ip.global-to-local, align 4
  %v1_b318 = load i32, i32* %r1.global-to-local, align 4
  %v2_b318 = add i32 %v1_b318, 8
  %v3_b318 = inttoptr i32 %v2_b318 to i32*
  store i32 %v0_b318, i32* %v3_b318, align 4
  %v0_b31c = load i32, i32* %r1.global-to-local, align 4
  %v1_b31c = load i32, i32* %ip.global-to-local, align 4
  %v2_b31c = add i32 %v1_b31c, 12
  %v3_b31c = inttoptr i32 %v2_b31c to i32*
  store i32 %v0_b31c, i32* %v3_b31c, align 4
  br label %dec_label_pc_bad4

dec_label_pc_b324:                                ; preds = %dec_label_pc_b2d4
  store i32 %v0_b2ac, i32* %r0.global-to-local, align 4
  %v1_b328 = call i32 @__malloc_largebin_index(i32 %v0_b2ac)
  store i32 %v1_b328, i32* %r0.global-to-local, align 4
  %v0_b32c = load i32, i32* @r4, align 4
  %v1_b32c = and i32 %v0_b32c, 2
  %v2_b32c = icmp eq i32 %v1_b32c, 0
  store i32 %v1_b328, i32* @r7, align 4
  br i1 %v2_b32c, label %dec_label_pc_b484, label %dec_label_pc_b338

dec_label_pc_b338:                                ; preds = %dec_label_pc_b324
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  %v4_b340 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b340, i32* @r0, align 4
  %v0_b344 = call i32 @__malloc_consolidate()
  store i32 %v0_b344, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b484

dec_label_pc_b34c:                                ; preds = %dec_label_pc_b498
  %v1_b34c = add i32 %v3_b498, 4
  %v2_b34c = inttoptr i32 %v1_b34c to i32*
  %v3_b34c = load i32, i32* %v2_b34c, align 4
  store i32 %v3_b34c, i32* %r3.global-to-local, align 4
  %v0_b350 = load i32, i32* @sl, align 4
  %v1_b354 = and i32 %v3_b34c, -4
  store i32 %v1_b354, i32* %r4.global-to-local, align 4
  %v1_b358 = add i32 %v3_b498, 12
  %v2_b358 = inttoptr i32 %v1_b358 to i32*
  %v3_b358 = load i32, i32* %v2_b358, align 4
  store i32 %v3_b358, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_b350, 255
  br i1 %tmp203, label %dec_label_pc_b3b4, label %dec_label_pc_b360

dec_label_pc_b360:                                ; preds = %dec_label_pc_b34c
  %v9_b360 = icmp eq i32 %v3_b358, %v0_b3b8
  br i1 %v9_b360, label %dec_label_pc_b368, label %dec_label_pc_b3b4

dec_label_pc_b368:                                ; preds = %dec_label_pc_b360
  %v0_b368 = load i32, i32* @sb, align 4
  %v1_b368 = add i32 %v0_b368, 48
  %v2_b368 = inttoptr i32 %v1_b368 to i32*
  %v3_b368 = load i32, i32* %v2_b368, align 4
  store i32 %v3_b368, i32* %r3.global-to-local, align 4
  %v9_b36c = icmp eq i32 %v3_b498, %v3_b368
  br i1 %v9_b36c, label %dec_label_pc_b374, label %dec_label_pc_b3b4

dec_label_pc_b374:                                ; preds = %dec_label_pc_b368
  %v1_b374 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_b354, %v1_b374
  br i1 %tmp204, label %dec_label_pc_b37c, label %dec_label_pc_b3b4

dec_label_pc_b37c:                                ; preds = %dec_label_pc_b374
  %v2_b37c = sub i32 %v1_b354, %v0_b350
  store i32 %v2_b37c, i32* %r2.global-to-local, align 4
  %v2_b380 = add i32 %v0_b350, %v3_b498
  store i32 %v2_b380, i32* %r3.global-to-local, align 4
  %v1_b384 = or i32 %v0_b350, 1
  store i32 %v1_b384, i32* %r0.global-to-local, align 4
  %v1_b388 = or i32 %v2_b37c, 1
  store i32 %v1_b388, i32* %r1.global-to-local, align 4
  %v1_b38c = add i32 %v3_b498, 8
  store i32 %v1_b38c, i32* %r4.global-to-local, align 4
  %v2_b390 = add i32 %v0_b3b8, 8
  %v3_b390 = inttoptr i32 %v2_b390 to i32*
  store i32 %v2_b380, i32* %v3_b390, align 4
  %v0_b394 = load i32, i32* %r3.global-to-local, align 4
  %v1_b394 = load i32, i32* %ip.global-to-local, align 4
  %v2_b394 = add i32 %v1_b394, 12
  %v3_b394 = inttoptr i32 %v2_b394 to i32*
  store i32 %v0_b394, i32* %v3_b394, align 4
  %v0_b398 = load i32, i32* %r0.global-to-local, align 4
  %v1_b398 = load i32, i32* @r6, align 4
  %v2_b398 = add i32 %v1_b398, 4
  %v3_b398 = inttoptr i32 %v2_b398 to i32*
  store i32 %v0_b398, i32* %v3_b398, align 4
  %v0_b39c = load i32, i32* %r3.global-to-local, align 4
  %v1_b39c = load i32, i32* @sb, align 4
  %v2_b39c = add i32 %v1_b39c, 48
  %v3_b39c = inttoptr i32 %v2_b39c to i32*
  store i32 %v0_b39c, i32* %v3_b39c, align 4
  %v0_b3a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3a0 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3a0 = add i32 %v1_b3a0, %v0_b3a0
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i32*
  store i32 %v0_b3a0, i32* %v4_b3a0, align 4
  %v0_b3a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3a4 = add i32 %v1_b3a4, 4
  %v3_b3a4 = inttoptr i32 %v2_b3a4 to i32*
  store i32 %v0_b3a4, i32* %v3_b3a4, align 4
  %v0_b3a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b3a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3a8 = add i32 %v1_b3a8, 12
  %v3_b3a8 = inttoptr i32 %v2_b3a8 to i32*
  store i32 %v0_b3a8, i32* %v3_b3a8, align 4
  %v0_b3ac = load i32, i32* %ip.global-to-local, align 4
  %v1_b3ac = load i32, i32* %r3.global-to-local, align 4
  %v2_b3ac = add i32 %v1_b3ac, 8
  %v3_b3ac = inttoptr i32 %v2_b3ac to i32*
  store i32 %v0_b3ac, i32* %v3_b3ac, align 4
  br label %dec_label_pc_bad4

dec_label_pc_b3b4:                                ; preds = %dec_label_pc_b374, %dec_label_pc_b368, %dec_label_pc_b360, %dec_label_pc_b34c
  %v9_b3b4 = icmp eq i32 %v1_b354, %v0_b350
  %v2_b3b8 = add i32 %v3_b358, 8
  %v3_b3b8 = inttoptr i32 %v2_b3b8 to i32*
  store i32 %v0_b3b8, i32* %v3_b3b8, align 4
  %v0_b3bc = load i32, i32* %ip.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r5.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 12
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v0_b3bc, i32* %v3_b3bc, align 4
  br i1 %v9_b3b4, label %dec_label_pc_b514.loopexit, label %dec_label_pc_b3d0

dec_label_pc_b3d0:                                ; preds = %dec_label_pc_b3b4
  %v0_b3d0 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_b3d0, 255
  br i1 %tmp205, label %dec_label_pc_b3f4, label %dec_label_pc_b3d8

dec_label_pc_b3d8:                                ; preds = %dec_label_pc_b3d0
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  %v1_b3dc = load i32, i32* %r8.global-to-local, align 4
  %v2_b3dc = add i32 %v1_b3dc, ptrtoint (i32* @global_var_1f010.70 to i32)
  %v3_b3dc = inttoptr i32 %v2_b3dc to i32*
  %v4_b3dc = load i32, i32* %v3_b3dc, align 4
  %v3_b3e0 = udiv i32 %v0_b3d0, 8
  store i32 %v3_b3e0, i32* %r0.global-to-local, align 4
  %v4_b3e4 = mul nuw i32 %v3_b3e0, 8
  %v5_b3e4 = add i32 %v4_b3dc, %v4_b3e4
  store i32 %v5_b3e4, i32* %r3.global-to-local, align 4
  %v1_b3e8 = add i32 %v5_b3e4, 44
  store i32 %v1_b3e8, i32* %ip.global-to-local, align 4
  %v1_b3ec = add i32 %v5_b3e4, 52
  %v2_b3ec = inttoptr i32 %v1_b3ec to i32*
  %v3_b3ec = load i32, i32* %v2_b3ec, align 4
  store i32 %v3_b3ec, i32* @lr, align 4
  br label %dec_label_pc_b44c

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3d0
  store i32 %v0_b3d0, i32* %r0.global-to-local, align 4
  %v1_b3f8 = call i32 @__malloc_largebin_index(i32 %v0_b3d0)
  store i32 %v1_b3f8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %ip.global-to-local, align 4
  %v1_b400 = load i32, i32* %r8.global-to-local, align 4
  %v2_b400 = add i32 %v1_b400, ptrtoint (i32* @global_var_1f010.70 to i32)
  %v3_b400 = inttoptr i32 %v2_b400 to i32*
  %v4_b400 = load i32, i32* %v3_b400, align 4
  %v4_b404 = mul i32 %v1_b3f8, 8
  %v5_b404 = add i32 %v4_b400, %v4_b404
  store i32 %v5_b404, i32* %r3.global-to-local, align 4
  %v1_b408 = add i32 %v5_b404, 44
  store i32 %v1_b408, i32* %ip.global-to-local, align 4
  %v1_b40c = add i32 %v5_b404, 52
  %v2_b40c = inttoptr i32 %v1_b40c to i32*
  %v3_b40c = load i32, i32* %v2_b40c, align 4
  store i32 %v3_b40c, i32* @lr, align 4
  %v9_b410 = icmp eq i32 %v3_b40c, %v1_b408
  br i1 %v9_b410, label %dec_label_pc_b44c, label %dec_label_pc_b418

dec_label_pc_b418:                                ; preds = %dec_label_pc_b3f4
  %v1_b418 = add i32 %v5_b404, 56
  %v2_b418 = inttoptr i32 %v1_b418 to i32*
  %v3_b418 = load i32, i32* %v2_b418, align 4
  store i32 %v3_b418, i32* %r1.global-to-local, align 4
  %v1_b41c = add i32 %v3_b418, 4
  %v2_b41c = inttoptr i32 %v1_b41c to i32*
  %v3_b41c = load i32, i32* %v2_b41c, align 4
  store i32 %v3_b41c, i32* %r3.global-to-local, align 4
  %v0_b420 = load i32, i32* %r4.global-to-local, align 4
  %v3_b420 = icmp ult i32 %v0_b420, %v3_b41c
  br i1 %v3_b420, label %.thread, label %dec_label_pc_b43c.preheader

.thread:                                          ; preds = %dec_label_pc_b418
  store i32 %v1_b408, i32* @lr, align 4
  store i32 %v3_b418, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b44c

dec_label_pc_b43c.preheader:                      ; preds = %dec_label_pc_b418
  %v2_b428 = or i32 %v0_b420, 1
  store i32 %v2_b428, i32* %r2.global-to-local, align 4
  %v1_b43c179 = add i32 %v3_b40c, 4
  %v2_b43c180 = inttoptr i32 %v1_b43c179 to i32*
  %v3_b43c181 = load i32, i32* %v2_b43c180, align 4
  store i32 %v3_b43c181, i32* %r3.global-to-local, align 4
  %v3_b440183 = icmp ult i32 %v2_b428, %v3_b43c181
  br i1 %v3_b440183, label %dec_label_pc_b438, label %dec_label_pc_b448

dec_label_pc_b438:                                ; preds = %dec_label_pc_b43c.preheader, %dec_label_pc_b438
  %v0_b448184 = phi i32 [ %v3_b438, %dec_label_pc_b438 ], [ %v3_b40c, %dec_label_pc_b43c.preheader ]
  %v1_b438 = add i32 %v0_b448184, 8
  %v2_b438 = inttoptr i32 %v1_b438 to i32*
  %v3_b438 = load i32, i32* %v2_b438, align 4
  store i32 %v3_b438, i32* @lr, align 4
  %v1_b43c = add i32 %v3_b438, 4
  %v2_b43c = inttoptr i32 %v1_b43c to i32*
  %v3_b43c = load i32, i32* %v2_b43c, align 4
  store i32 %v3_b43c, i32* %r3.global-to-local, align 4
  %v3_b440 = icmp ult i32 %v2_b428, %v3_b43c
  br i1 %v3_b440, label %dec_label_pc_b438, label %dec_label_pc_b448

dec_label_pc_b448:                                ; preds = %dec_label_pc_b438, %dec_label_pc_b43c.preheader
  %v0_b448.lcssa = phi i32 [ %v3_b40c, %dec_label_pc_b43c.preheader ], [ %v3_b438, %dec_label_pc_b438 ]
  %v1_b448 = add i32 %v0_b448.lcssa, 12
  %v2_b448 = inttoptr i32 %v1_b448 to i32*
  %v3_b448 = load i32, i32* %v2_b448, align 4
  store i32 %v3_b448, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b44c

dec_label_pc_b44c:                                ; preds = %.thread, %dec_label_pc_b3f4, %dec_label_pc_b3d8, %dec_label_pc_b448
  %v0_b46c = phi i32 [ %v1_b408, %dec_label_pc_b3f4 ], [ %v1_b3e8, %dec_label_pc_b3d8 ], [ %v3_b448, %dec_label_pc_b448 ], [ %v3_b418, %.thread ]
  %v0_b460 = phi i32 [ %v1_b3f8, %dec_label_pc_b3f4 ], [ %v3_b3e0, %dec_label_pc_b3d8 ], [ %v1_b3f8, %dec_label_pc_b448 ], [ %v1_b3f8, %.thread ]
  %v1_b450 = phi i32 [ %v1_b400, %dec_label_pc_b3f4 ], [ %v1_b3dc, %dec_label_pc_b3d8 ], [ %v1_b400, %dec_label_pc_b448 ], [ %v1_b400, %.thread ]
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  %v2_b450 = add i32 %v1_b450, ptrtoint (i32* @global_var_1f010.70 to i32)
  %v3_b450 = inttoptr i32 %v2_b450 to i32*
  %v4_b450 = load i32, i32* %v3_b450, align 4
  %v3_b454 = sdiv i32 %v0_b460, 32
  store i32 %v3_b454, i32* %r3.global-to-local, align 4
  %v4_b458 = mul nsw i32 %v3_b454, 4
  %v5_b458 = add i32 %v4_b450, %v4_b458
  store i32 %v5_b458, i32* %r1.global-to-local, align 4
  %v1_b45c = add i32 %v5_b458, 820
  %v2_b45c = inttoptr i32 %v1_b45c to i32*
  %v3_b45c = load i32, i32* %v2_b45c, align 4
  %v1_b460 = urem i32 %v0_b460, 32
  store i32 %v1_b460, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_b468 = shl i32 1, %v1_b460
  %v8_b468 = or i32 %v3_b45c, %v7_b468
  store i32 %v8_b468, i32* %r3.global-to-local, align 4
  %v1_b46c = load i32, i32* @r6, align 4
  %v2_b46c = add i32 %v1_b46c, 12
  %v3_b46c = inttoptr i32 %v2_b46c to i32*
  store i32 %v0_b46c, i32* %v3_b46c, align 4
  %v0_b470 = load i32, i32* @lr, align 4
  %v1_b470 = load i32, i32* @r6, align 4
  %v2_b470 = add i32 %v1_b470, 8
  %v3_b470 = inttoptr i32 %v2_b470 to i32*
  store i32 %v0_b470, i32* %v3_b470, align 4
  %v0_b474 = load i32, i32* %r3.global-to-local, align 4
  %v1_b474 = load i32, i32* %r1.global-to-local, align 4
  %v2_b474 = add i32 %v1_b474, 820
  %v3_b474 = inttoptr i32 %v2_b474 to i32*
  store i32 %v0_b474, i32* %v3_b474, align 4
  %v0_b478 = load i32, i32* @r6, align 4
  %v1_b478 = load i32, i32* @lr, align 4
  %v2_b478 = add i32 %v1_b478, 12
  %v3_b478 = inttoptr i32 %v2_b478 to i32*
  store i32 %v0_b478, i32* %v3_b478, align 4
  %v0_b47c = load i32, i32* @r6, align 4
  %v1_b47c = load i32, i32* %ip.global-to-local, align 4
  %v2_b47c = add i32 %v1_b47c, 8
  %v3_b47c = inttoptr i32 %v2_b47c to i32*
  store i32 %v0_b47c, i32* %v3_b47c, align 4
  %v0_b498.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_b498

dec_label_pc_b484:                                ; preds = %dec_label_pc_b324, %dec_label_pc_b2dc, %dec_label_pc_b338
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  %v4_b48c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b48c, i32* @sb, align 4
  %v0_b490 = load i32, i32* @sl, align 4
  %v1_b490 = add i32 %v0_b490, 16
  store i32 %v1_b490, i32* @fp, align 4
  %v1_b494 = add i32 %v4_b48c, 52
  store i32 %v1_b494, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_b498

dec_label_pc_b498:                                ; preds = %dec_label_pc_b44c, %dec_label_pc_b484
  %v0_b3b8 = phi i32 [ %v0_b498.pre, %dec_label_pc_b44c ], [ %v1_b494, %dec_label_pc_b484 ]
  %v1_b498 = add i32 %v0_b3b8, 12
  %v2_b498 = inttoptr i32 %v1_b498 to i32*
  %v3_b498 = load i32, i32* %v2_b498, align 4
  store i32 %v3_b498, i32* @r6, align 4
  %v9_b49c = icmp eq i32 %v3_b498, %v0_b3b8
  br i1 %v9_b49c, label %dec_label_pc_b4a4, label %dec_label_pc_b34c

dec_label_pc_b4a4:                                ; preds = %dec_label_pc_b498
  %v0_b4a4 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_b4a4, 256
  %v0_b55c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_b4a4.dec_label_pc_b55c_crit_edge, label %dec_label_pc_b4ac

dec_label_pc_b4a4.dec_label_pc_b55c_crit_edge:    ; preds = %dec_label_pc_b4a4
  %.pre200 = mul i32 %v0_b55c.pre, 8
  br label %dec_label_pc_b55c

dec_label_pc_b4ac:                                ; preds = %dec_label_pc_b4a4
  %v4_b4ac = mul i32 %v0_b55c.pre, 8
  %v5_b4ac = add i32 %v4_b4ac, %v0_b3b8
  store i32 %v5_b4ac, i32* %r3.global-to-local, align 4
  %v1_b4b0 = add i32 %v5_b4ac, -8
  store i32 %v1_b4b0, i32* %r1.global-to-local, align 4
  %v1_b4b4 = add i32 %v5_b4ac, 4
  %v2_b4b4 = inttoptr i32 %v1_b4b4 to i32*
  %storemerge.pre = load i32, i32* %v2_b4b4, align 4
  br label %dec_label_pc_b554

dec_label_pc_b4bc:                                ; preds = %dec_label_pc_b554
  %v1_b4bc = add i32 %v1_b4e4, 4
  %v2_b4bc = inttoptr i32 %v1_b4bc to i32*
  %v3_b4bc = load i32, i32* %v2_b4bc, align 4
  store i32 %v3_b4bc, i32* %r3.global-to-local, align 4
  %v1_b4c0 = and i32 %v3_b4bc, -4
  store i32 %v1_b4c0, i32* %r2.global-to-local, align 4
  %v3_b4c4 = icmp ult i32 %v1_b4c0, %v0_b4a4
  %v1_b4c8 = add i32 %v1_b4e4, 12
  %v2_b4c8 = inttoptr i32 %v1_b4c8 to i32*
  %v3_b4c8 = load i32, i32* %v2_b4c8, align 4
  store i32 %v3_b4c8, i32* %r0.global-to-local, align 4
  br i1 %v3_b4c4, label %dec_label_pc_b554, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b4bc
  %v1_b4d0 = add i32 %v1_b4e4, 8
  %v2_b4d0 = inttoptr i32 %v1_b4d0 to i32*
  %v3_b4d0 = load i32, i32* %v2_b4d0, align 4
  store i32 %v3_b4d0, i32* %r1.global-to-local, align 4
  %v1_b4d4 = add i32 %v3_b4d0, 12
  %v2_b4d4 = inttoptr i32 %v1_b4d4 to i32*
  %v3_b4d4 = load i32, i32* %v2_b4d4, align 4
  store i32 %v3_b4d4, i32* %r3.global-to-local, align 4
  %v9_b4d8 = icmp eq i32 %v3_b4d4, %v1_b4e4
  br i1 %v9_b4d8, label %dec_label_pc_b4e0, label %dec_label_pc_b4ec

dec_label_pc_b4e0:                                ; preds = %dec_label_pc_b4d0
  %v1_b4e0 = add i32 %v3_b4c8, 8
  %v2_b4e0 = inttoptr i32 %v1_b4e0 to i32*
  %v3_b4e0 = load i32, i32* %v2_b4e0, align 4
  store i32 %v3_b4e0, i32* %r3.global-to-local, align 4
  %v9_b4e4 = icmp eq i32 %v3_b4e0, %v1_b4e4
  br i1 %v9_b4e4, label %dec_label_pc_b4f0, label %dec_label_pc_b4ec

dec_label_pc_b4ec:                                ; preds = %dec_label_pc_b4d0, %dec_label_pc_b4e0
  %v0_b4ec = call i32 @abort()
  store i32 %v0_b4ec, i32* %r0.global-to-local, align 4
  %v0_b4f0.pre = load i32, i32* @sl, align 4
  %v1_b4f0.pre = load i32, i32* @r2, align 4
  %v0_b4f8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b4e0, %dec_label_pc_b4ec
  %v1_b4f8 = phi i32 [ %v3_b4c8, %dec_label_pc_b4e0 ], [ %v0_b4ec, %dec_label_pc_b4ec ]
  %v0_b4f8 = phi i32 [ %v3_b4d0, %dec_label_pc_b4e0 ], [ %v0_b4f8.pre, %dec_label_pc_b4ec ]
  %v1_b4f0 = phi i32 [ %v1_b4c0, %dec_label_pc_b4e0 ], [ %v1_b4f0.pre, %dec_label_pc_b4ec ]
  %v0_b4f0 = phi i32 [ %v0_b4a4, %dec_label_pc_b4e0 ], [ %v0_b4f0.pre, %dec_label_pc_b4ec ]
  %v2_b4f0 = sub i32 %v1_b4f0, %v0_b4f0
  store i32 %v2_b4f0, i32* %lr.global-to-local, align 4
  %v2_b4f8 = add i32 %v1_b4f8, 8
  %v3_b4f8 = inttoptr i32 %v2_b4f8 to i32*
  store i32 %v0_b4f8, i32* %v3_b4f8, align 4
  %v0_b4fc = load i32, i32* %r0.global-to-local, align 4
  %v1_b4fc = load i32, i32* %r1.global-to-local, align 4
  %v2_b4fc = add i32 %v1_b4fc, 12
  %v3_b4fc = inttoptr i32 %v2_b4fc to i32*
  store i32 %v0_b4fc, i32* %v3_b4fc, align 4
  %v0_b500 = load i32, i32* %ip.global-to-local, align 4
  %v1_b500 = add i32 %v0_b500, 8
  store i32 %v1_b500, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_b4f0, 15
  br i1 %tmp207, label %dec_label_pc_b520, label %dec_label_pc_b508

dec_label_pc_b508:                                ; preds = %dec_label_pc_b4f0
  %v1_b508 = load i32, i32* %r2.global-to-local, align 4
  %v2_b508 = add i32 %v1_b508, %v0_b500
  store i32 %v2_b508, i32* %r2.global-to-local, align 4
  %v1_b50c = add i32 %v2_b508, 4
  %v2_b50c = inttoptr i32 %v1_b50c to i32*
  %v3_b50c = load i32, i32* %v2_b50c, align 4
  store i32 %v3_b50c, i32* %r3.global-to-local, align 4
  store i32 %v1_b500, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b514

dec_label_pc_b514.loopexit:                       ; preds = %dec_label_pc_b3b4
  %v1_b3c0 = load i32, i32* @r6, align 4
  %v2_b3c0 = load i32, i32* @sl, align 4
  %v3_b3c0 = add i32 %v2_b3c0, %v1_b3c0
  store i32 %v3_b3c0, i32* %r2.global-to-local, align 4
  %v2_b3c4 = add i32 %v3_b3c0, 4
  %v3_b3c4 = inttoptr i32 %v2_b3c4 to i32*
  %v4_b3c4 = load i32, i32* %v3_b3c4, align 4
  store i32 %v4_b3c4, i32* %r3.global-to-local, align 4
  %v2_b3c8 = add i32 %v1_b3c0, 8
  store i32 %v2_b3c8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %.dec_label_pc_b514_crit_edge, %dec_label_pc_b514.loopexit, %dec_label_pc_b508
  %v1_b518 = phi i32 [ %v4_b63c, %.dec_label_pc_b514_crit_edge ], [ %v3_b3c0, %dec_label_pc_b514.loopexit ], [ %v2_b508, %dec_label_pc_b508 ]
  %v0_b514 = phi i32 [ %v7_b63c, %.dec_label_pc_b514_crit_edge ], [ %v4_b3c4, %dec_label_pc_b514.loopexit ], [ %v3_b50c, %dec_label_pc_b508 ]
  %v1_b514 = or i32 %v0_b514, 1
  store i32 %v1_b514, i32* %r3.global-to-local, align 4
  %v2_b518 = add i32 %v1_b518, 4
  %v3_b518 = inttoptr i32 %v2_b518 to i32*
  store i32 %v1_b514, i32* %v3_b518, align 4
  br label %dec_label_pc_bad4

dec_label_pc_b520:                                ; preds = %dec_label_pc_b4f0
  %v1_b520 = load i32, i32* @sl, align 4
  %v2_b520 = add i32 %v1_b520, %v0_b500
  store i32 %v2_b520, i32* %r2.global-to-local, align 4
  %v1_b524 = or i32 %v1_b520, 1
  store i32 %v1_b524, i32* %r3.global-to-local, align 4
  %v0_b528 = load i32, i32* %lr.global-to-local, align 4
  %v1_b528 = or i32 %v0_b528, 1
  store i32 %v1_b528, i32* %r1.global-to-local, align 4
  store i32 %v1_b500, i32* %r4.global-to-local, align 4
  %v2_b530 = add i32 %v0_b500, 4
  %v3_b530 = inttoptr i32 %v2_b530 to i32*
  store i32 %v1_b524, i32* %v3_b530, align 4
  %v0_b534 = load i32, i32* %r2.global-to-local, align 4
  %v1_b534 = load i32, i32* @r6, align 4
  %v2_b534 = add i32 %v1_b534, 8
  %v3_b534 = inttoptr i32 %v2_b534 to i32*
  store i32 %v0_b534, i32* %v3_b534, align 4
  %v0_b538 = load i32, i32* %r2.global-to-local, align 4
  %v1_b538 = load i32, i32* @r6, align 4
  %v2_b538 = add i32 %v1_b538, 12
  %v3_b538 = inttoptr i32 %v2_b538 to i32*
  store i32 %v0_b538, i32* %v3_b538, align 4
  %v0_b53c = load i32, i32* %lr.global-to-local, align 4
  %v1_b53c = load i32, i32* %r2.global-to-local, align 4
  %v3_b53c = add i32 %v1_b53c, %v0_b53c
  %v4_b53c = inttoptr i32 %v3_b53c to i32*
  store i32 %v0_b53c, i32* %v4_b53c, align 4
  %v0_b540 = load i32, i32* %r1.global-to-local, align 4
  %v1_b540 = load i32, i32* %r2.global-to-local, align 4
  %v2_b540 = add i32 %v1_b540, 4
  %v3_b540 = inttoptr i32 %v2_b540 to i32*
  store i32 %v0_b540, i32* %v3_b540, align 4
  %v0_b544 = load i32, i32* @r6, align 4
  %v1_b544 = load i32, i32* %r2.global-to-local, align 4
  %v2_b544 = add i32 %v1_b544, 12
  %v3_b544 = inttoptr i32 %v2_b544 to i32*
  store i32 %v0_b544, i32* %v3_b544, align 4
  %v0_b548 = load i32, i32* @r6, align 4
  %v1_b548 = load i32, i32* %r2.global-to-local, align 4
  %v2_b548 = add i32 %v1_b548, 8
  %v3_b548 = inttoptr i32 %v2_b548 to i32*
  store i32 %v0_b548, i32* %v3_b548, align 4
  br label %dec_label_pc_bad4

dec_label_pc_b554:                                ; preds = %dec_label_pc_b4bc, %dec_label_pc_b4ac
  %v1_b4e4 = phi i32 [ %storemerge.pre, %dec_label_pc_b4ac ], [ %v3_b4c8, %dec_label_pc_b4bc ]
  store i32 %v1_b4e4, i32* %ip.global-to-local, align 4
  %v9_b554 = icmp eq i32 %v1_b4e4, %v1_b4b0
  br i1 %v9_b554, label %dec_label_pc_b55c.loopexit, label %dec_label_pc_b4bc

dec_label_pc_b55c.loopexit:                       ; preds = %dec_label_pc_b554
  br label %dec_label_pc_b55c

dec_label_pc_b55c:                                ; preds = %dec_label_pc_b4a4.dec_label_pc_b55c_crit_edge, %dec_label_pc_b55c.loopexit
  %v4_b58c.pre-phi = phi i32 [ %.pre200, %dec_label_pc_b4a4.dec_label_pc_b55c_crit_edge ], [ %v4_b4ac, %dec_label_pc_b55c.loopexit ]
  %v1_b55c = add i32 %v0_b55c.pre, 1
  store i32 %v1_b55c, i32* %r2.global-to-local, align 4
  %v1_b560 = urem i32 %v1_b55c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r0.global-to-local, align 4
  %v6_b56c = shl i32 1, %v1_b560
  store i32 %v6_b56c, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b574 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b574, i32* %r3.global-to-local, align 4
  %v3_b578 = udiv i32 %v1_b55c, 32
  store i32 %v3_b578, i32* @r5, align 4
  %v4_b57c = mul nuw nsw i32 %v3_b578, 4
  %v5_b57c = add i32 %v4_b574, %v4_b57c
  store i32 %v5_b57c, i32* %r2.global-to-local, align 4
  %v1_b580 = add i32 %v5_b57c, 820
  %v2_b580 = inttoptr i32 %v1_b580 to i32*
  %v3_b580 = load i32, i32* %v2_b580, align 4
  store i32 %v3_b580, i32* @r4, align 4
  %v1_b584 = add i32 %v4_b574, 52
  store i32 %v1_b584, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_b58c = add i32 %v1_b584, %v4_b58c.pre-phi
  store i32 %v5_b58c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b590

dec_label_pc_b590:                                ; preds = %dec_label_pc_b5f8, %dec_label_pc_b55c
  %v1_b598 = phi i32 [ %v1_b598.pre, %dec_label_pc_b5f8 ], [ %v3_b580, %dec_label_pc_b55c ]
  %v0_b598 = phi i32 [ %v0_b590.pre, %dec_label_pc_b5f8 ], [ %v6_b56c, %dec_label_pc_b55c ]
  %v1_b590 = sub i32 1, %v0_b598
  %v2_b590 = icmp ult i32 %v0_b598, 2
  %v1_b590. = select i1 %v2_b590, i32 %v1_b590, i32 0
  store i32 %v1_b590., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_b598, %v1_b598
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_b590
  %v5_b59c = or i32 %v1_b590., 1
  store i32 %v5_b59c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b5a8.preheader

bb142:                                            ; preds = %dec_label_pc_b590
  %v2_b5a0 = icmp eq i32 %v1_b590., 0
  br i1 %v2_b5a0, label %.dec_label_pc_b5e4.preheader_crit_edge, label %dec_label_pc_b5a8.preheader

.dec_label_pc_b5e4.preheader_crit_edge:           ; preds = %bb142
  %v0_b5dc54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5e4.preheader

dec_label_pc_b5a8.preheader:                      ; preds = %bb142, %.thread12
  %v0_b5a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b5a8

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b5a8.preheader, %dec_label_pc_b5b4
  %v0_b5a8 = phi i32 [ %v0_b5a8.pre, %dec_label_pc_b5a8.preheader ], [ %v1_b5a8, %dec_label_pc_b5b4 ]
  %v1_b5a8 = add i32 %v0_b5a8, 1
  store i32 %v1_b5a8, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_b5a8, 2
  br i1 %tmp208, label %dec_label_pc_b688.loopexit, label %dec_label_pc_b5b4

dec_label_pc_b5b4:                                ; preds = %dec_label_pc_b5a8
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r3.global-to-local, align 4
  %v1_b5b8 = load i32, i32* @r8, align 4
  %v2_b5b8 = add i32 %v1_b5b8, ptrtoint (i32* @global_var_1f010.70 to i32)
  %v3_b5b8 = inttoptr i32 %v2_b5b8 to i32*
  %v4_b5b8 = load i32, i32* %v3_b5b8, align 4
  store i32 %v4_b5b8, i32* %r2.global-to-local, align 4
  %v4_b5bc = mul i32 %v1_b5a8, 4
  %v5_b5bc = add i32 %v4_b5b8, %v4_b5bc
  store i32 %v5_b5bc, i32* %r3.global-to-local, align 4
  %v1_b5c0 = add i32 %v5_b5bc, 820
  %v2_b5c0 = inttoptr i32 %v1_b5c0 to i32*
  %v3_b5c0 = load i32, i32* %v2_b5c0, align 4
  store i32 %v3_b5c0, i32* @r4, align 4
  %v2_b5c4 = icmp eq i32 %v3_b5c0, 0
  br i1 %v2_b5c4, label %dec_label_pc_b5a8, label %dec_label_pc_b5cc

dec_label_pc_b5cc:                                ; preds = %dec_label_pc_b5b4
  %v4_b5cc = mul i32 %v1_b5a8, 256
  %v5_b5cc = add i32 %v4_b5b8, %v4_b5cc
  store i32 %v5_b5cc, i32* %r3.global-to-local, align 4
  %v1_b5d0 = add i32 %v5_b5cc, 44
  store i32 %v1_b5d0, i32* %r0.global-to-local, align 4
  %v0_b5d4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_b5d4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5e4.preheader

dec_label_pc_b5e4.preheader:                      ; preds = %.dec_label_pc_b5e4.preheader_crit_edge, %dec_label_pc_b5cc
  %v0_b5dc54 = phi i32 [ %v1_b5d0, %dec_label_pc_b5cc ], [ %v0_b5dc54.pre, %.dec_label_pc_b5e4.preheader_crit_edge ]
  %v0_b600 = phi i32 [ %v3_b5c0, %dec_label_pc_b5cc ], [ %v1_b598, %.dec_label_pc_b5e4.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_b5d4, %dec_label_pc_b5cc ], [ %v0_b598, %.dec_label_pc_b5e4.preheader_crit_edge ]
  %v2_b5e451 = and i32 %ip.promoted, %v0_b600
  %v4_b5e453 = icmp eq i32 %v2_b5e451, 0
  br i1 %v4_b5e453, label %dec_label_pc_b5dc, label %dec_label_pc_b5ec

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b5e4.preheader, %dec_label_pc_b5dc
  %v2_b5e056 = phi i32 [ %v2_b5e0, %dec_label_pc_b5dc ], [ %ip.promoted, %dec_label_pc_b5e4.preheader ]
  %v0_b5dc55 = phi i32 [ %v1_b5dc, %dec_label_pc_b5dc ], [ %v0_b5dc54, %dec_label_pc_b5e4.preheader ]
  %v1_b5dc = add i32 %v0_b5dc55, 8
  %v2_b5e0 = mul i32 %v2_b5e056, 2
  %v2_b5e4 = and i32 %v2_b5e0, %v0_b600
  %v4_b5e4 = icmp eq i32 %v2_b5e4, 0
  br i1 %v4_b5e4, label %dec_label_pc_b5dc, label %dec_label_pc_b5e4.dec_label_pc_b5ec_crit_edge

dec_label_pc_b5e4.dec_label_pc_b5ec_crit_edge:    ; preds = %dec_label_pc_b5dc
  store i32 %v1_b5dc, i32* %r0.global-to-local, align 4
  store i32 %v2_b5e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5ec

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b5e4.dec_label_pc_b5ec_crit_edge, %dec_label_pc_b5e4.preheader
  %v0_b60c = phi i32 [ %v2_b5e0, %dec_label_pc_b5e4.dec_label_pc_b5ec_crit_edge ], [ %ip.promoted, %dec_label_pc_b5e4.preheader ]
  %v0_b630 = phi i32 [ %v1_b5dc, %dec_label_pc_b5e4.dec_label_pc_b5ec_crit_edge ], [ %v0_b5dc54, %dec_label_pc_b5e4.preheader ]
  %v1_b5ec = add i32 %v0_b630, 12
  %v2_b5ec = inttoptr i32 %v1_b5ec to i32*
  %v3_b5ec = load i32, i32* %v2_b5ec, align 4
  store i32 %v3_b5ec, i32* @lr, align 4
  %v9_b5f0 = icmp eq i32 %v3_b5ec, %v0_b630
  br i1 %v9_b5f0, label %dec_label_pc_b5f8, label %dec_label_pc_b618

dec_label_pc_b5f8:                                ; preds = %dec_label_pc_b5ec
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r0.global-to-local, align 4
  %v1_b5fc = load i32, i32* @r8, align 4
  %v2_b5fc = add i32 %v1_b5fc, ptrtoint (i32* @global_var_1f010.70 to i32)
  %v3_b5fc = inttoptr i32 %v2_b5fc to i32*
  %v4_b5fc = load i32, i32* %v3_b5fc, align 4
  %v2_b600 = sub i32 -1, %v0_b60c
  %v3_b600 = and i32 %v0_b600, %v2_b600
  store i32 %v3_b600, i32* @r4, align 4
  %v1_b604 = load i32, i32* @r5, align 4
  %v4_b604 = mul i32 %v1_b604, 4
  %v5_b604 = add i32 %v4_b604, %v4_b5fc
  store i32 %v5_b604, i32* %r3.global-to-local, align 4
  %v1_b608 = add i32 %v0_b630, 8
  store i32 %v1_b608, i32* %r0.global-to-local, align 4
  %v2_b60c = mul i32 %v0_b60c, 2
  store i32 %v2_b60c, i32* %ip.global-to-local, align 4
  %v2_b610 = add i32 %v5_b604, 820
  %v3_b610 = inttoptr i32 %v2_b610 to i32*
  store i32 %v3_b600, i32* %v3_b610, align 4
  %v0_b590.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_b598.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b590

dec_label_pc_b618:                                ; preds = %dec_label_pc_b5ec
  %v1_b618 = add i32 %v3_b5ec, 4
  %v2_b618 = inttoptr i32 %v1_b618 to i32*
  %v3_b618 = load i32, i32* %v2_b618, align 4
  store i32 %v3_b618, i32* %r3.global-to-local, align 4
  %v1_b61c = and i32 %v3_b618, -4
  store i32 %v1_b61c, i32* %r2.global-to-local, align 4
  %v0_b620 = load i32, i32* @sl, align 4
  %v2_b620 = sub i32 %v1_b61c, %v0_b620
  store i32 %v2_b620, i32* %ip.global-to-local, align 4
  %v1_b624 = add i32 %v3_b5ec, 12
  %v2_b624 = inttoptr i32 %v1_b624 to i32*
  %v3_b624 = load i32, i32* %v2_b624, align 4
  store i32 %v3_b624, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_b620, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_b618
  %v6_b62c = add i32 %v1_b61c, %v3_b5ec
  store i32 %v6_b62c, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_b618, %bb143
  %v2_b630 = add i32 %v3_b624, 8
  %v3_b630 = inttoptr i32 %v2_b630 to i32*
  store i32 %v0_b630, i32* %v3_b630, align 4
  %v0_b634 = load i32, i32* %r3.global-to-local, align 4
  %v1_b634 = load i32, i32* %r0.global-to-local, align 4
  %v2_b634 = add i32 %v1_b634, 12
  %v3_b634 = inttoptr i32 %v2_b634 to i32*
  store i32 %v0_b634, i32* %v3_b634, align 4
  %v4_b638 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_b514_crit_edge, label %dec_label_pc_b644

.dec_label_pc_b514_crit_edge:                     ; preds = %bb144
  %v5_b638 = add i32 %v4_b638, 8
  store i32 %v5_b638, i32* %r4.global-to-local, align 4
  %v4_b63c = load i32, i32* %r2.global-to-local, align 4
  %v5_b63c = add i32 %v4_b63c, 4
  %v6_b63c = inttoptr i32 %v5_b63c to i32*
  %v7_b63c = load i32, i32* %v6_b63c, align 4
  store i32 %v7_b63c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b514

dec_label_pc_b644:                                ; preds = %bb144
  %v1_b644 = load i32, i32* @sl, align 4
  %v2_b644 = add i32 %v1_b644, %v4_b638
  store i32 %v2_b644, i32* %r1.global-to-local, align 4
  %v1_b64c = load i32, i32* @r6, align 4
  %v2_b64c = add i32 %v1_b64c, 8
  %v3_b64c = inttoptr i32 %v2_b64c to i32*
  store i32 %v2_b644, i32* %v3_b64c, align 4
  %v0_b650 = load i32, i32* %r1.global-to-local, align 4
  %v1_b650 = load i32, i32* @r6, align 4
  %v2_b650 = add i32 %v1_b650, 12
  %v3_b650 = inttoptr i32 %v2_b650 to i32*
  store i32 %v0_b650, i32* %v3_b650, align 4
  %v0_b654 = load i32, i32* @r6, align 4
  %v1_b654 = load i32, i32* %r1.global-to-local, align 4
  %v2_b654 = add i32 %v1_b654, 8
  %v3_b654 = inttoptr i32 %v2_b654 to i32*
  store i32 %v0_b654, i32* %v3_b654, align 4
  %v0_b658 = load i32, i32* @r6, align 4
  %v1_b658 = load i32, i32* %r1.global-to-local, align 4
  %v2_b658 = add i32 %v1_b658, 12
  %v3_b658 = inttoptr i32 %v2_b658 to i32*
  store i32 %v0_b658, i32* %v3_b658, align 4
  %tmp210 = icmp ult i32 %v1_b644, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_b644
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  %v8_b664 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v8_b664, i32* %r3.global-to-local, align 4
  %v4_b668 = load i32, i32* %r1.global-to-local, align 4
  %v6_b668 = add i32 %v8_b664, 48
  %v7_b668 = inttoptr i32 %v6_b668 to i32*
  store i32 %v4_b668, i32* %v7_b668, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_b644, %bb145
  %v0_b66c = load i32, i32* @sl, align 4
  %v1_b66c = or i32 %v0_b66c, 1
  store i32 %v1_b66c, i32* %r2.global-to-local, align 4
  %v0_b670 = load i32, i32* %ip.global-to-local, align 4
  %v1_b670 = or i32 %v0_b670, 1
  store i32 %v1_b670, i32* %r3.global-to-local, align 4
  %v0_b674 = load i32, i32* @lr, align 4
  %v1_b674 = add i32 %v0_b674, 8
  store i32 %v1_b674, i32* %r4.global-to-local, align 4
  %v2_b678 = add i32 %v0_b674, 4
  %v3_b678 = inttoptr i32 %v2_b678 to i32*
  store i32 %v1_b66c, i32* %v3_b678, align 4
  %v0_b67c = load i32, i32* %ip.global-to-local, align 4
  %v1_b67c = load i32, i32* %r1.global-to-local, align 4
  %v3_b67c = add i32 %v1_b67c, %v0_b67c
  %v4_b67c = inttoptr i32 %v3_b67c to i32*
  store i32 %v0_b67c, i32* %v4_b67c, align 4
  %v0_b680 = load i32, i32* %r3.global-to-local, align 4
  %v1_b680 = load i32, i32* %r1.global-to-local, align 4
  %v2_b680 = add i32 %v1_b680, 4
  %v3_b680 = inttoptr i32 %v2_b680 to i32*
  store i32 %v0_b680, i32* %v3_b680, align 4
  br label %dec_label_pc_bad4

dec_label_pc_b688.loopexit:                       ; preds = %dec_label_pc_b5a8
  br label %dec_label_pc_b688

dec_label_pc_b688:                                ; preds = %dec_label_pc_b688.loopexit, %dec_label_pc_b29c, %dec_label_pc_b2a4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %ip.global-to-local, align 4
  %v4_b690 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b690, i32* @r0, align 4
  %v1_b694 = add i32 %v4_b690, 44
  %v2_b694 = inttoptr i32 %v1_b694 to i32*
  %v3_b694 = load i32, i32* %v2_b694, align 4
  store i32 %v3_b694, i32* %ip.global-to-local, align 4
  %v1_b698 = add i32 %v3_b694, 4
  %v2_b698 = inttoptr i32 %v1_b698 to i32*
  %v3_b698 = load i32, i32* %v2_b698, align 4
  %v0_b69c = load i32, i32* @sl, align 4
  %v1_b69c = add i32 %v0_b69c, 16
  store i32 %v1_b69c, i32* %r1.global-to-local, align 4
  %v1_b6a0 = and i32 %v3_b698, -4
  store i32 %v1_b6a0, i32* %r3.global-to-local, align 4
  %v3_b6a4 = icmp ult i32 %v1_b6a0, %v1_b69c
  br i1 %v3_b6a4, label %dec_label_pc_b6d4, label %dec_label_pc_b6b0

dec_label_pc_b6b0:                                ; preds = %dec_label_pc_b688
  %v2_b6b0 = sub i32 %v1_b6a0, %v0_b69c
  %v2_b6b4 = add i32 %v0_b69c, %v3_b694
  store i32 %v2_b6b4, i32* %r1.global-to-local, align 4
  %v1_b6b8 = or i32 %v2_b6b0, 1
  store i32 %v1_b6b8, i32* %r3.global-to-local, align 4
  %v1_b6bc = or i32 %v0_b69c, 1
  store i32 %v1_b6bc, i32* %r2.global-to-local, align 4
  %v1_b6c0 = add i32 %v3_b694, 8
  store i32 %v1_b6c0, i32* %r4.global-to-local, align 4
  store i32 %v1_b6bc, i32* %v2_b698, align 4
  %v0_b6c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b6c8 = load i32, i32* @r0, align 4
  %v2_b6c8 = add i32 %v1_b6c8, 44
  %v3_b6c8 = inttoptr i32 %v2_b6c8 to i32*
  store i32 %v0_b6c8, i32* %v3_b6c8, align 4
  %v0_b6cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b6cc = load i32, i32* %r1.global-to-local, align 4
  %v2_b6cc = add i32 %v1_b6cc, 4
  %v3_b6cc = inttoptr i32 %v2_b6cc to i32*
  store i32 %v0_b6cc, i32* %v3_b6cc, align 4
  br label %dec_label_pc_bad4

dec_label_pc_b6d4:                                ; preds = %dec_label_pc_b688
  %v1_b6d4 = inttoptr i32 %v4_b690 to i32*
  %v2_b6d4 = load i32, i32* %v1_b6d4, align 4
  store i32 %v2_b6d4, i32* %r3.global-to-local, align 4
  %v1_b6d8 = and i32 %v2_b6d4, 2
  store i32 %v1_b6d8, i32* %ip.global-to-local, align 4
  %v2_b6d8 = icmp eq i32 %v1_b6d8, 0
  %v1_b6dc = add i32 %v4_b690, 860
  %v2_b6dc = inttoptr i32 %v1_b6dc to i32*
  %v3_b6dc = load i32, i32* %v2_b6dc, align 4
  store i32 %v3_b6dc, i32* %r1.global-to-local, align 4
  br i1 %v2_b6d8, label %dec_label_pc_b6f4, label %dec_label_pc_b6e4

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b6d4
  %v0_b6e4 = call i32 @__malloc_consolidate()
  %v0_b6e8 = load i32, i32* @sl, align 4
  %v1_b6e8 = add i32 %v0_b6e8, -7
  store i32 %v1_b6e8, i32* %r0.global-to-local, align 4
  %v1_b6ec = call i32 @malloc(i32 %v1_b6e8)
  store i32 %v1_b6ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bad0

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b6d4
  %v1_b6f4 = add i32 %v4_b690, 844
  %v2_b6f4 = inttoptr i32 %v1_b6f4 to i32*
  %v3_b6f4 = load i32, i32* %v2_b6f4, align 4
  store i32 %v3_b6f4, i32* %r3.global-to-local, align 4
  %v3_b6f8 = icmp ult i32 %v0_b69c, %v3_b6f4
  %v1_b6fc = add i32 %v3_b6dc, -1
  store i32 %v1_b6fc, i32* %sb.global-to-local, align 4
  br i1 %v3_b6f8, label %dec_label_pc_b7d0, label %dec_label_pc_b704

dec_label_pc_b704:                                ; preds = %dec_label_pc_b6f4
  %v1_b704 = add i32 %v4_b690, 852
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* %r2.global-to-local, align 4
  %v1_b708 = add i32 %v4_b690, 848
  %v2_b708 = inttoptr i32 %v1_b708 to i32*
  %v3_b708 = load i32, i32* %v2_b708, align 4
  store i32 %v3_b708, i32* %r3.global-to-local, align 4
  %v6_b710 = icmp slt i32 %v3_b708, %v3_b704
  br i1 %v6_b710, label %dec_label_pc_b714, label %dec_label_pc_b7d0

dec_label_pc_b714:                                ; preds = %dec_label_pc_b704
  %v1_b714 = add i32 %v0_b69c, 10
  %v2_b718 = add i32 %v1_b714, %v3_b6dc
  store i32 %v2_b718, i32* %r3.global-to-local, align 4
  %v2_b71c = sub i32 0, %v3_b6dc
  %v3_b71c = and i32 %v2_b718, %v2_b71c
  store i32 %v3_b71c, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_b71c, %v0_b69c
  br i1 %tmp211, label %dec_label_pc_b728, label %dec_label_pc_b7d0

dec_label_pc_b728:                                ; preds = %dec_label_pc_b714
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_b71c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_b740 = call i32 @mmap(i32 0, i32 %v3_b71c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_b740, i32* %r0.global-to-local, align 4
  %v7_b744 = icmp eq i32 %v6_b740, -1
  br i1 %v7_b744, label %dec_label_pc_b728.dec_label_pc_b7d0_crit_edge, label %dec_label_pc_b74c

dec_label_pc_b728.dec_label_pc_b7d0_crit_edge:    ; preds = %dec_label_pc_b728
  %v1_b7f4.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b7d0

dec_label_pc_b74c:                                ; preds = %dec_label_pc_b728
  %v1_b74c = urem i32 %v6_b740, 8
  store i32 %v1_b74c, i32* %r2.global-to-local, align 4
  %v2_b74c = icmp eq i32 %v1_b74c, 0
  br i1 %v2_b74c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_b74c
  %v2_b750 = sub nsw i32 8, %v1_b74c
  store i32 %v2_b750, i32* %r3.global-to-local, align 4
  %v2_b754 = load i32, i32* @r4, align 4
  %v3_b754 = sub i32 %v2_b754, %v2_b750
  %v3_b758 = add i32 %v2_b750, %v6_b740
  store i32 %v3_b758, i32* %lr.global-to-local, align 4
  %v2_b760 = or i32 %v3_b754, 2
  store i32 %v2_b760, i32* %r2.global-to-local, align 4
  %v5_b768 = inttoptr i32 %v3_b758 to i32*
  store i32 %v2_b750, i32* %v5_b768, align 4
  %v1_b76c = load i32, i32* %r2.global-to-local, align 4
  %v2_b76c = load i32, i32* %lr.global-to-local, align 4
  %v3_b76c = add i32 %v2_b76c, 4
  %v4_b76c = inttoptr i32 %v3_b76c to i32*
  store i32 %v1_b76c, i32* %v4_b76c, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_b74c
  store i32 %v6_b740, i32* %lr.global-to-local, align 4
  %v1_b76447 = load i32, i32* @r4, align 4
  %v2_b76448 = or i32 %v1_b76447, 2
  store i32 %v2_b76448, i32* %r3.global-to-local, align 4
  %v3_b770 = inttoptr i32 %v6_b740 to i32*
  store i32 0, i32* %v3_b770, align 4
  %v1_b774 = load i32, i32* %r3.global-to-local, align 4
  %v2_b774 = load i32, i32* %lr.global-to-local, align 4
  %v3_b774 = add i32 %v2_b774, 4
  %v4_b774 = inttoptr i32 %v3_b774 to i32*
  store i32 %v1_b774, i32* %v4_b774, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b780 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b780, i32* %ip.global-to-local, align 4
  %v1_b784 = add i32 %v4_b780, 848
  %v2_b784 = inttoptr i32 %v1_b784 to i32*
  %v3_b784 = load i32, i32* %v2_b784, align 4
  store i32 %v3_b784, i32* %r3.global-to-local, align 4
  %v1_b788 = add i32 %v4_b780, 856
  %v2_b788 = inttoptr i32 %v1_b788 to i32*
  %v3_b788 = load i32, i32* %v2_b788, align 4
  store i32 %v3_b788, i32* %r2.global-to-local, align 4
  %v1_b78c = add i32 %v3_b784, 1
  store i32 %v1_b78c, i32* %r3.global-to-local, align 4
  %v7_b794 = icmp sgt i32 %v1_b78c, %v3_b788
  br i1 %v7_b794, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_b78c, i32* %v2_b788, align 4
  %v0_b798.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_b798.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_b798 = phi i32 [ %v4_b780, %.thread27 ], [ %v1_b798.pre, %bb147 ]
  %v0_b798 = phi i32 [ %v1_b78c, %.thread27 ], [ %v0_b798.pre, %bb147 ]
  %v2_b798 = add i32 %v1_b798, 848
  %v3_b798 = inttoptr i32 %v2_b798 to i32*
  store i32 %v0_b798, i32* %v3_b798, align 4
  %v0_b79c = load i32, i32* %ip.global-to-local, align 4
  %v1_b79c = add i32 %v0_b79c, 868
  %v2_b79c = inttoptr i32 %v1_b79c to i32*
  %v3_b79c = load i32, i32* %v2_b79c, align 4
  store i32 %v3_b79c, i32* %r3.global-to-local, align 4
  %v1_b7a0 = add i32 %v0_b79c, 880
  %v2_b7a0 = inttoptr i32 %v1_b7a0 to i32*
  %v3_b7a0 = load i32, i32* %v2_b7a0, align 4
  store i32 %v3_b7a0, i32* %r2.global-to-local, align 4
  %v0_b7a4 = load i32, i32* @r4, align 4
  %v2_b7a4 = add i32 %v0_b7a4, %v3_b79c
  store i32 %v2_b7a4, i32* %r1.global-to-local, align 4
  %v1_b7a8 = add i32 %v0_b79c, 872
  %v2_b7a8 = inttoptr i32 %v1_b7a8 to i32*
  %v3_b7a8 = load i32, i32* %v2_b7a8, align 4
  store i32 %v3_b7a8, i32* %r3.global-to-local, align 4
  %v1_b7b0 = add i32 %v0_b79c, 884
  %v2_b7b0 = inttoptr i32 %v1_b7b0 to i32*
  %v3_b7b0 = load i32, i32* %v2_b7b0, align 4
  store i32 %v3_b7b0, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_b7a4, %v3_b7a0
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_b7a4, i32* %v2_b7a0, align 4
  %v0_b7b8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_b7b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_b7b8 = phi i32 [ %v0_b79c, %bb148 ], [ %v1_b7b8.pre, %bb149 ]
  %v0_b7b8 = phi i32 [ %v2_b7a4, %bb148 ], [ %v0_b7b8.pre, %bb149 ]
  %v2_b7b8 = add i32 %v1_b7b8, 868
  %v3_b7b8 = inttoptr i32 %v2_b7b8 to i32*
  store i32 %v0_b7b8, i32* %v3_b7b8, align 4
  %v0_b7bc = load i32, i32* %r1.global-to-local, align 4
  %v1_b7bc = load i32, i32* %r3.global-to-local, align 4
  %v2_b7bc = add i32 %v1_b7bc, %v0_b7bc
  store i32 %v2_b7bc, i32* %r1.global-to-local, align 4
  %v1_b7c0 = load i32, i32* %r2.global-to-local, align 4
  %v0_b7c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_b7c4 = add i32 %v0_b7c4, 8
  store i32 %v1_b7c4, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_b7bc, %v1_b7c0
  br i1 %tmp213, label %bb151, label %dec_label_pc_bad0

bb151:                                            ; preds = %bb150
  %v5_b7c8 = load i32, i32* %ip.global-to-local, align 4
  %v6_b7c8 = add i32 %v5_b7c8, 884
  %v7_b7c8 = inttoptr i32 %v6_b7c8 to i32*
  store i32 %v2_b7bc, i32* %v7_b7c8, align 4
  br label %dec_label_pc_bad0

dec_label_pc_b7d0:                                ; preds = %dec_label_pc_b714, %dec_label_pc_b6f4, %dec_label_pc_b728.dec_label_pc_b7d0_crit_edge, %dec_label_pc_b704
  %v1_b7f4 = phi i32 [ %v1_b7f4.pre, %dec_label_pc_b728.dec_label_pc_b7d0_crit_edge ], [ %v0_b69c, %dec_label_pc_b704 ], [ %v0_b69c, %dec_label_pc_b6f4 ], [ %v0_b69c, %dec_label_pc_b714 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %ip.global-to-local, align 4
  %v4_b7d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b7d8, i32* %r3.global-to-local, align 4
  %v1_b7dc = add i32 %v4_b7d8, 44
  %v2_b7dc = inttoptr i32 %v1_b7dc to i32*
  %v3_b7dc = load i32, i32* %v2_b7dc, align 4
  store i32 %v3_b7dc, i32* %r0.global-to-local, align 4
  %v1_b7e0 = add i32 %v4_b7d8, 864
  %v2_b7e0 = inttoptr i32 %v1_b7e0 to i32*
  %v3_b7e0 = load i32, i32* %v2_b7e0, align 4
  store i32 %v3_b7e0, i32* %r2.global-to-local, align 4
  %v1_b7e4 = add i32 %v4_b7d8, 840
  %v2_b7e4 = inttoptr i32 %v1_b7e4 to i32*
  %v3_b7e4 = load i32, i32* %v2_b7e4, align 4
  store i32 %v3_b7e4, i32* %r3.global-to-local, align 4
  %v1_b7e8 = add i32 %v3_b7dc, 4
  %v2_b7e8 = inttoptr i32 %v1_b7e8 to i32*
  %v3_b7e8 = load i32, i32* %v2_b7e8, align 4
  store i32 %v3_b7e8, i32* %r1.global-to-local, align 4
  %v1_b7f0 = urem i32 %v3_b7e0, 2
  %v2_b7f0 = icmp eq i32 %v1_b7f0, 0
  %v1_b7ec = add i32 %v1_b7f4, 16
  %v2_b7f4 = add i32 %v1_b7ec, %v3_b7e4
  store i32 %v2_b7f4, i32* %r3.global-to-local, align 4
  %v1_b7f8 = and i32 %v3_b7e8, -4
  store i32 %v1_b7f8, i32* @r8, align 4
  br i1 %v2_b7f0, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_b7d0
  %v3_b7fc = sub i32 %v2_b7f4, %v1_b7f8
  store i32 %v3_b7fc, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_b7d0, %bb152
  %v0_b800 = phi i32 [ %v2_b7f4, %dec_label_pc_b7d0 ], [ %v3_b7fc, %bb152 ]
  %v1_b800 = load i32, i32* %sb.global-to-local, align 4
  %v2_b800 = add i32 %v1_b800, %v0_b800
  store i32 %v2_b800, i32* %r3.global-to-local, align 4
  %v1_b804 = sub i32 -1, %v1_b800
  store i32 %v1_b804, i32* %fp.global-to-local, align 4
  %v2_b808 = and i32 %v2_b800, %v1_b804
  store i32 %v2_b808, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_b808, 1
  br i1 %tmp154, label %dec_label_pc_b82c, label %dec_label_pc_b818

dec_label_pc_b818:                                ; preds = %bb153
  store i32 %v2_b808, i32* %r0.global-to-local, align 4
  %v1_b81c = call i32 @__GI_sbrk(i32 %v2_b808)
  store i32 %v1_b81c, i32* %r0.global-to-local, align 4
  %v3_b820 = icmp eq i32 %v1_b81c, -1
  store i32 %v1_b81c, i32* @r4, align 4
  br i1 %v3_b820, label %dec_label_pc_b82c, label %dec_label_pc_b898

dec_label_pc_b82c:                                ; preds = %dec_label_pc_b818, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  %v4_b834 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b834, i32* %r6.global-to-local, align 4
  %v1_b838 = add i32 %v4_b834, 864
  %v2_b838 = inttoptr i32 %v1_b838 to i32*
  %v3_b838 = load i32, i32* %v2_b838, align 4
  store i32 %v3_b838, i32* %r3.global-to-local, align 4
  %v1_b83c = urem i32 %v3_b838, 2
  %v2_b83c = icmp eq i32 %v1_b83c, 0
  br i1 %v2_b83c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_b82c
  %v1_b840 = load i32, i32* @r8, align 4
  %v2_b840 = load i32, i32* %sb.global-to-local, align 4
  %v3_b840 = add i32 %v2_b840, %v1_b840
  %v2_b844 = load i32, i32* @r5, align 4
  %v3_b844 = add i32 %v3_b840, %v2_b844
  store i32 %v3_b844, i32* %r3.global-to-local, align 4
  %v2_b848 = load i32, i32* %fp.global-to-local, align 4
  %v3_b848 = and i32 %v2_b848, %v3_b844
  store i32 %v3_b848, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_b82c
  %v0_b84c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_b84c = phi i32 [ %v0_b84c.pr, %.thread29thread-pre-split ], [ %v3_b848, %bb155 ]
  %v2_b84c = icmp ugt i32 %v0_b84c, 1048575
  br i1 %v2_b84c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_b864 = phi i32 [ %v0_b84c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_b854 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_b864, %v1_b854
  br i1 %tmp214, label %dec_label_pc_b85c, label %dec_label_pc_bac0

dec_label_pc_b85c:                                ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_b864, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_b878 = call i32 @mmap(i32 0, i32 %v0_b864, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_b878, i32* %r0.global-to-local, align 4
  %v3_b87c = icmp eq i32 %v6_b878, -1
  %v8_b87c = icmp eq i32 %v6_b878, -1
  store i32 %v6_b878, i32* @r4, align 4
  br i1 %v8_b87c, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_b85c
  %v1_b884 = load i32, i32* %r6.global-to-local, align 4
  %v2_b884 = add i32 %v1_b884, 864
  %v3_b884 = inttoptr i32 %v2_b884 to i32*
  %v4_b884 = load i32, i32* %v3_b884, align 4
  %v2_b888 = load i32, i32* @r5, align 4
  %v3_b888 = add i32 %v2_b888, %v6_b878
  store i32 %v3_b888, i32* %r0.global-to-local, align 4
  %v2_b88c = and i32 %v4_b884, -2
  store i32 %v2_b88c, i32* %r3.global-to-local, align 4
  store i32 %v2_b88c, i32* %v3_b884, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_b85c, %bb158
  br i1 %v3_b87c, label %dec_label_pc_b898, label %dec_label_pc_b89c

dec_label_pc_b898:                                ; preds = %.thread32, %dec_label_pc_b818
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b89c

dec_label_pc_b89c:                                ; preds = %.thread32, %dec_label_pc_b898
  %v0_b89c = load i32, i32* @r4, align 4
  %v7_b89c = icmp eq i32 %v0_b89c, -1
  br i1 %v7_b89c, label %dec_label_pc_bac0, label %dec_label_pc_b8a4

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b89c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  %v4_b8ac = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b8ac, i32* %ip.global-to-local, align 4
  store i32 %v3_b7dc, i32* %r2.global-to-local, align 4
  %v1_b8b4 = add i32 %v4_b8ac, 872
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i32*
  %v3_b8b4 = load i32, i32* %v2_b8b4, align 4
  %v1_b8b8 = load i32, i32* @r8, align 4
  %v2_b8b8 = add i32 %v1_b8b8, %v3_b7dc
  store i32 %v2_b8b8, i32* %r1.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r5, align 4
  %v2_b8bc = add i32 %v0_b8bc, %v3_b8b4
  store i32 %v2_b8bc, i32* %r3.global-to-local, align 4
  %v9_b8c0 = icmp eq i32 %v0_b89c, %v2_b8b8
  br i1 %v9_b8c0, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_b8a4
  store i32 %v2_b8bc, i32* %v2_b8b4, align 4
  br label %dec_label_pc_b8dc

bb159:                                            ; preds = %dec_label_pc_b8a4
  %v1_b8c4 = load i32, i32* %r0.global-to-local, align 4
  %v8_b8c4 = icmp eq i32 %v1_b8c4, -1
  store i32 %v2_b8bc, i32* %v2_b8b4, align 4
  br i1 %v8_b8c4, label %.thread34, label %dec_label_pc_b8dc

.thread34:                                        ; preds = %bb159
  %v1_b8cc = load i32, i32* @r5, align 4
  %v2_b8cc = load i32, i32* @r8, align 4
  %v3_b8cc = add i32 %v2_b8cc, %v1_b8cc
  %v2_b8d0 = or i32 %v3_b8cc, 1
  store i32 %v2_b8d0, i32* %r3.global-to-local, align 4
  %v2_b8d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_b8d4 = add i32 %v2_b8d4, 4
  %v4_b8d4 = inttoptr i32 %v3_b8d4 to i32*
  store i32 %v2_b8d0, i32* %v4_b8d4, align 4
  br label %dec_label_pc_ba54

dec_label_pc_b8dc:                                ; preds = %bb159, %.thread122
  %v0_b8e0.pr = load i32, i32* @r8, align 4
  %v0_b8dc = load i32, i32* %ip.global-to-local, align 4
  %v1_b8dc = add i32 %v0_b8dc, 864
  %v2_b8dc = inttoptr i32 %v1_b8dc to i32*
  %v3_b8dc = load i32, i32* %v2_b8dc, align 4
  store i32 %v3_b8dc, i32* %r2.global-to-local, align 4
  %v2_b8e0 = icmp eq i32 %v0_b8e0.pr, 0
  br i1 %v2_b8e0, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_b8dc
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_b8dc
  %v2_b8e8 = urem i32 %v3_b8dc, 2
  store i32 %v2_b8e8, i32* %r3.global-to-local, align 4
  %v2_b8ec = icmp eq i32 %v2_b8e8, 0
  br i1 %v2_b8ec, label %.thread40, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %.thread36
  %v0_b8f4 = load i32, i32* @r4, align 4
  %v1_b8f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b8f4 = icmp ult i32 %v0_b8f4, %v1_b8f4
  br i1 %v3_b8f4, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_b8f4
  %v2_b8f8 = and i32 %v3_b8dc, -2
  store i32 %v2_b8f8, i32* %r3.global-to-local, align 4
  store i32 %v2_b8f8, i32* %v2_b8dc, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_b8f4, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %ip.global-to-local, align 4
  %v4_b908 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b908, i32* @r7, align 4
  %v1_b90c = add i32 %v4_b908, 864
  %v2_b90c = inttoptr i32 %v1_b90c to i32*
  %v3_b90c = load i32, i32* %v2_b90c, align 4
  store i32 %v3_b90c, i32* %r3.global-to-local, align 4
  %v1_b910 = urem i32 %v3_b90c, 2
  store i32 %v1_b910, i32* @r6, align 4
  %v2_b910 = icmp eq i32 %v1_b910, 0
  br i1 %v2_b910, label %dec_label_pc_b9a4, label %dec_label_pc_b918

dec_label_pc_b918:                                ; preds = %.thread40
  %v0_b918 = load i32, i32* @r8, align 4
  %v2_b918 = icmp eq i32 %v0_b918, 0
  br i1 %v2_b918, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_b918
  %v2_b91c = add i32 %v4_b908, 872
  %v3_b91c = inttoptr i32 %v2_b91c to i32*
  %v4_b91c = load i32, i32* %v3_b91c, align 4
  store i32 %v4_b91c, i32* %r2.global-to-local, align 4
  %v1_b920 = load i32, i32* %r1.global-to-local, align 4
  %v2_b920 = load i32, i32* @r4, align 4
  %v3_b920 = sub i32 %v2_b920, %v1_b920
  %v3_b924 = add i32 %v3_b920, %v4_b91c
  store i32 %v3_b924, i32* %r3.global-to-local, align 4
  store i32 %v3_b924, i32* %v3_b91c, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_b918, %bb161
  %v0_b92c = load i32, i32* @r4, align 4
  %v1_b92c = urem i32 %v0_b92c, 8
  store i32 %v1_b92c, i32* %r3.global-to-local, align 4
  %v2_b92c = icmp eq i32 %v1_b92c, 0
  br i1 %v2_b92c, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_b930 = sub nsw i32 8, %v1_b92c
  store i32 %v2_b930, i32* %r3.global-to-local, align 4
  %v3_b934 = add i32 %v2_b930, %v0_b92c
  store i32 %v3_b934, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_b93c = phi i32 [ 0, %.thread43 ], [ %v2_b930, %bb162 ]
  %v1_b938 = load i32, i32* @r5, align 4
  %v2_b938 = add i32 %v1_b938, %v0_b92c
  store i32 %v2_b938, i32* @r6, align 4
  %v1_b93c = load i32, i32* @r8, align 4
  %v2_b93c = add i32 %v2_b938, %v0_b93c
  %v2_b940 = add i32 %v2_b93c, %v1_b93c
  store i32 %v2_b940, i32* %r1.global-to-local, align 4
  %v1_b944 = load i32, i32* %sb.global-to-local, align 4
  %v2_b944 = add i32 %v1_b944, %v2_b940
  %v1_b948 = load i32, i32* %fp.global-to-local, align 4
  %v2_b948 = and i32 %v1_b948, %v2_b944
  store i32 %v2_b948, i32* %r2.global-to-local, align 4
  %v2_b94c = sub i32 0, %v2_b938
  store i32 %v2_b94c, i32* %r3.global-to-local, align 4
  %v2_b950 = sub i32 %v2_b948, %v2_b938
  store i32 %v2_b950, i32* @r5, align 4
  store i32 %v2_b950, i32* %r0.global-to-local, align 4
  br i1 %v2_b92c, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_b92c, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_b95c = call i32 @__GI_sbrk(i32 %v2_b950)
  store i32 %v1_b95c, i32* %r0.global-to-local, align 4
  %v3_b960 = icmp eq i32 %v1_b95c, -1
  br i1 %v3_b960, label %dec_label_pc_b968, label %dec_label_pc_b978

dec_label_pc_b968:                                ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_b96c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_b96c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_b9d0

dec_label_pc_b978:                                ; preds = %bb164
  %v1_b978 = load i32, i32* @r4, align 4
  %v3_b978 = icmp ult i32 %v1_b95c, %v1_b978
  br i1 %v3_b978, label %dec_label_pc_b980, label %dec_label_pc_b9d0

dec_label_pc_b980:                                ; preds = %dec_label_pc_b978
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r0.global-to-local, align 4
  %v4_b988 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b988, i32* %r2.global-to-local, align 4
  %v1_b98c = add i32 %v4_b988, 864
  %v2_b98c = inttoptr i32 %v1_b98c to i32*
  %v3_b98c = load i32, i32* %v2_b98c, align 4
  %v0_b990 = load i32, i32* @r6, align 4
  store i32 %v0_b990, i32* %r0.global-to-local, align 4
  %v1_b994 = and i32 %v3_b98c, -2
  store i32 %v1_b994, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_b994, i32* %v2_b98c, align 4
  br label %dec_label_pc_b9d0

dec_label_pc_b9a4:                                ; preds = %.thread40
  %v0_b9a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_b9a4 = icmp eq i32 %v0_b9a4, -1
  br i1 %v3_b9a4, label %dec_label_pc_b9ac, label %dec_label_pc_b9c8

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b9a4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_b9b0 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_b9b0, i32* %r0.global-to-local, align 4
  %v0_b9b4 = load i32, i32* @r7, align 4
  %v1_b9b4 = add i32 %v0_b9b4, 872
  %v2_b9b4 = inttoptr i32 %v1_b9b4 to i32*
  %v3_b9b4 = load i32, i32* %v2_b9b4, align 4
  store i32 %v3_b9b4, i32* %r2.global-to-local, align 4
  %v0_b9b8 = load i32, i32* @r4, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  %v2_b9b8 = add i32 %v3_b9b4, %v1_b9b0
  %v2_b9bc = sub i32 %v2_b9b8, %v0_b9b8
  %v2_b9c0 = sub i32 %v2_b9bc, %v0_b9bc
  store i32 %v2_b9c0, i32* %r3.global-to-local, align 4
  store i32 %v2_b9c0, i32* %v2_b9b4, align 4
  %v0_b9cc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b9c8

dec_label_pc_b9c8:                                ; preds = %dec_label_pc_b9a4, %dec_label_pc_b9ac
  %v0_b9cc = phi i32 [ 0, %dec_label_pc_b9a4 ], [ %v0_b9cc.pre, %dec_label_pc_b9ac ]
  %v0_b9c8 = load i32, i32* @r4, align 4
  store i32 %v0_b9c8, i32* @r7, align 4
  store i32 %v0_b9cc, i32* @r5, align 4
  br label %dec_label_pc_b9d0

dec_label_pc_b9d0:                                ; preds = %dec_label_pc_b978, %dec_label_pc_b980, %dec_label_pc_b968, %dec_label_pc_b9c8
  %v0_b9d0 = load i32, i32* %r0.global-to-local, align 4
  %v7_b9d0 = icmp eq i32 %v0_b9d0, -1
  br i1 %v7_b9d0, label %dec_label_pc_ba54, label %dec_label_pc_b9d8

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9d0
  %v1_b9d8 = load i32, i32* @r5, align 4
  %v2_b9d8 = add i32 %v1_b9d8, %v0_b9d0
  %v0_b9dc = load i32, i32* @r7, align 4
  %v2_b9dc = sub i32 %v2_b9d8, %v0_b9dc
  %v1_b9e0 = or i32 %v2_b9dc, 1
  %v2_b9e4 = add i32 %v0_b9dc, 4
  %v3_b9e4 = inttoptr i32 %v2_b9e4 to i32*
  store i32 %v1_b9e0, i32* %v3_b9e4, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b9f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_b9f0, i32* @r6, align 4
  %v1_b9f4 = add i32 %v4_b9f0, 872
  %v2_b9f4 = inttoptr i32 %v1_b9f4 to i32*
  %v3_b9f4 = load i32, i32* %v2_b9f4, align 4
  %v0_b9f8 = load i32, i32* @r8, align 4
  %v2_b9f8 = icmp eq i32 %v0_b9f8, 0
  %v0_b9fc = load i32, i32* @r5, align 4
  %v2_b9fc = add i32 %v0_b9fc, %v3_b9f4
  store i32 %v2_b9fc, i32* %r3.global-to-local, align 4
  store i32 %v2_b9fc, i32* %v2_b9f4, align 4
  %v0_ba04 = load i32, i32* @r7, align 4
  %v1_ba04 = load i32, i32* @r6, align 4
  %v2_ba04 = add i32 %v1_ba04, 44
  %v3_ba04 = inttoptr i32 %v2_ba04 to i32*
  store i32 %v0_ba04, i32* %v3_ba04, align 4
  br i1 %v2_b9f8, label %dec_label_pc_ba54, label %dec_label_pc_ba0c

dec_label_pc_ba0c:                                ; preds = %dec_label_pc_b9d8
  %v0_ba10 = load i32, i32* @r8, align 4
  %v1_ba10 = add i32 %v0_ba10, -12
  %v1_ba14 = and i32 %v1_ba10, -8
  store i32 %v3_b7dc, i32* %ip.global-to-local, align 4
  %v2_ba1c = add i32 %v1_ba14, %v3_b7dc
  store i32 %v2_ba1c, i32* %r1.global-to-local, align 4
  %v2_ba20 = icmp ugt i32 %v1_ba14, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_ba28 = or i32 %v1_ba14, 1
  store i32 %v1_ba28, i32* %r3.global-to-local, align 4
  store i32 %v1_ba28, i32* %v2_b7e8, align 4
  %v0_ba30 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba30 = load i32, i32* %r1.global-to-local, align 4
  %v2_ba30 = add i32 %v1_ba30, 8
  %v3_ba30 = inttoptr i32 %v2_ba30 to i32*
  store i32 %v0_ba30, i32* %v3_ba30, align 4
  %v0_ba34 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba34 = load i32, i32* %r1.global-to-local, align 4
  %v2_ba34 = add i32 %v1_ba34, 4
  %v3_ba34 = inttoptr i32 %v2_ba34 to i32*
  store i32 %v0_ba34, i32* %v3_ba34, align 4
  br i1 %v2_ba20, label %dec_label_pc_ba3c, label %dec_label_pc_ba54

dec_label_pc_ba3c:                                ; preds = %dec_label_pc_ba0c
  %v0_ba3c = load i32, i32* @r6, align 4
  %v1_ba3c = add i32 %v0_ba3c, 836
  %v2_ba3c = inttoptr i32 %v1_ba3c to i32*
  %v3_ba3c = load i32, i32* %v2_ba3c, align 4
  store i32 %v3_ba3c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_ba44 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba44 = add i32 %v0_ba44, 8
  store i32 %v1_ba44, i32* @r0, align 4
  store i32 -1, i32* %v2_ba3c, align 4
  %v0_ba4c = call i32 @free()
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  %v0_ba50 = load i32, i32* @r4, align 4
  %v1_ba50 = load i32, i32* @r6, align 4
  %v2_ba50 = add i32 %v1_ba50, 836
  %v3_ba50 = inttoptr i32 %v2_ba50 to i32*
  store i32 %v0_ba50, i32* %v3_ba50, align 4
  br label %dec_label_pc_ba54

dec_label_pc_ba54:                                ; preds = %.thread34, %dec_label_pc_ba0c, %dec_label_pc_b9d8, %dec_label_pc_b9d0, %dec_label_pc_ba3c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r0.global-to-local, align 4
  %v4_ba5c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_ba5c, i32* %lr.global-to-local, align 4
  %v1_ba60 = add i32 %v4_ba5c, 872
  store i32 %v1_ba60, i32* %r1.global-to-local, align 4
  %v1_ba64 = inttoptr i32 %v1_ba60 to i32*
  %v2_ba64 = load i32, i32* %v1_ba64, align 4
  store i32 %v2_ba64, i32* %r1.global-to-local, align 4
  %v3_ba64 = add i32 %v4_ba5c, 876
  %v4_ba64 = inttoptr i32 %v3_ba64 to i32*
  %v5_ba64 = load i32, i32* %v4_ba64, align 4
  store i32 %v5_ba64, i32* %r3.global-to-local, align 4
  %v1_ba6c = add i32 %v4_ba5c, 868
  %v2_ba6c = inttoptr i32 %v1_ba6c to i32*
  %v3_ba6c = load i32, i32* %v2_ba6c, align 4
  store i32 %v3_ba6c, i32* %r3.global-to-local, align 4
  %v1_ba70 = add i32 %v4_ba5c, 884
  %v2_ba70 = inttoptr i32 %v1_ba70 to i32*
  %v3_ba70 = load i32, i32* %v2_ba70, align 4
  store i32 %v3_ba70, i32* %r2.global-to-local, align 4
  %v2_ba74 = add i32 %v3_ba6c, %v2_ba64
  store i32 %v2_ba74, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_ba64, %v5_ba64
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_ba54
  store i32 %v2_ba64, i32* %v4_ba64, align 4
  %v0_ba7c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ba7c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_ba54, %bb165
  %v1_ba7c = phi i32 [ %v3_ba70, %dec_label_pc_ba54 ], [ %v1_ba7c.pre, %bb165 ]
  %v4_ba80 = phi i32 [ %v2_ba74, %dec_label_pc_ba54 ], [ %v0_ba7c.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_ba80, %v1_ba7c
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_ba80 = load i32, i32* %lr.global-to-local, align 4
  %v6_ba80 = add i32 %v5_ba80, 884
  %v7_ba80 = inttoptr i32 %v6_ba80 to i32*
  store i32 %v4_ba80, i32* %v7_ba80, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_ba84 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba84 = add i32 %v0_ba84, 44
  %v2_ba84 = inttoptr i32 %v1_ba84 to i32*
  %v3_ba84 = load i32, i32* %v2_ba84, align 4
  store i32 %v3_ba84, i32* %ip.global-to-local, align 4
  %v1_ba88 = add i32 %v3_ba84, 4
  %v2_ba88 = inttoptr i32 %v1_ba88 to i32*
  %v3_ba88 = load i32, i32* %v2_ba88, align 4
  store i32 %v1_b69c, i32* %r1.global-to-local, align 4
  %v1_ba90 = and i32 %v3_ba88, -4
  store i32 %v1_ba90, i32* %r3.global-to-local, align 4
  %v3_ba94 = icmp ult i32 %v1_ba90, %v1_b69c
  br i1 %v3_ba94, label %dec_label_pc_bac0, label %dec_label_pc_ba9c

dec_label_pc_ba9c:                                ; preds = %bb168
  %v0_ba9c = load i32, i32* @sl, align 4
  %v2_ba9c = sub i32 %v1_ba90, %v0_ba9c
  %v2_baa0 = add i32 %v0_ba9c, %v3_ba84
  store i32 %v2_baa0, i32* %r1.global-to-local, align 4
  %v1_baa4 = or i32 %v2_ba9c, 1
  store i32 %v1_baa4, i32* %r3.global-to-local, align 4
  %v1_baa8 = or i32 %v0_ba9c, 1
  store i32 %v1_baa8, i32* %r2.global-to-local, align 4
  %v1_baac = add i32 %v3_ba84, 8
  store i32 %v1_baac, i32* %r0.global-to-local, align 4
  store i32 %v1_baa8, i32* %v2_ba88, align 4
  %v0_bab4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bab4 = load i32, i32* %lr.global-to-local, align 4
  %v2_bab4 = add i32 %v1_bab4, 44
  %v3_bab4 = inttoptr i32 %v2_bab4 to i32*
  store i32 %v0_bab4, i32* %v3_bab4, align 4
  %v0_bab8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bab8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bab8 = add i32 %v1_bab8, 4
  %v3_bab8 = inttoptr i32 %v2_bab8 to i32*
  store i32 %v0_bab8, i32* %v3_bab8, align 4
  br label %dec_label_pc_bad0

dec_label_pc_bac0:                                ; preds = %bb157, %bb168, %dec_label_pc_b89c
  %v0_bac0 = call i32 @__GI___errno_location()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_bac8 = inttoptr i32 %v0_bac0 to i32*
  store i32 12, i32* %v2_bac8, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bad0

dec_label_pc_bad0:                                ; preds = %bb151, %bb150, %dec_label_pc_ba9c, %dec_label_pc_b6e4, %dec_label_pc_bac0
  %v0_bad0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_bad0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_bad4

dec_label_pc_bad4:                                ; preds = %.thread1, %dec_label_pc_b6b0, %.thread121, %dec_label_pc_b520, %dec_label_pc_b514, %dec_label_pc_b37c, %dec_label_pc_b300, %dec_label_pc_bad0
  store i32 %v2_b228, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r2, align 4
  %v4_bae4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 24) to i32*), align 4
  store i32 %v4_bae4, i32* @ip, align 4
  store i32 47856, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bae4)
  br label %dec_label_pc_baf0

dec_label_pc_baf0:                                ; preds = %dec_label_pc_b260, %dec_label_pc_bad4
  %v0_baf0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_baf0, i32* %r0.global-to-local, align 4
  store i32 %v3_b1fc, i32* @r4, align 4
  store i32 %v6_b1fc, i32* @r5, align 4
  store i32 %v9_b1fc, i32* @r6, align 4
  store i32 %v12_b1fc, i32* @r7, align 4
  store i32 %v15_b1fc, i32* @r8, align 4
  store i32 %v18_b1fc, i32* @sb, align 4
  store i32 %v21_b1fc, i32* @sl, align 4
  store i32 %v24_b1fc, i32* @fp, align 4
  store i32 %v27_b1fc, i32* @lr, align 4
  ret i32 %v0_baf0

; uselistorder directives
  uselistorder i32 %v0_ba9c, { 1, 0, 2 }
  uselistorder i32 %v3_ba84, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ba80, { 1, 0 }
  uselistorder i32 %v2_ba64, { 2, 0, 1, 3 }
  uselistorder i32 %v4_ba5c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_ba14, { 1, 2, 0 }
  uselistorder i32 %v0_b9dc, { 1, 0 }
  uselistorder i32 %v0_b9d0, { 1, 0 }
  uselistorder i32 %v2_b9c0, { 1, 0 }
  uselistorder i32 %v2_b950, { 2, 1, 0 }
  uselistorder i32 %v2_b938, { 1, 2, 0, 3 }
  uselistorder i32 %v2_b930, { 1, 0, 2 }
  uselistorder i32 %v1_b92c, { 2, 1, 0 }
  uselistorder i32 %v0_b92c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_b910, { 1, 0 }
  uselistorder i32 %v2_b8e8, { 1, 0 }
  uselistorder i32 %v3_b8dc, { 1, 0, 2 }
  uselistorder i32 %v2_b8bc, { 1, 0, 2 }
  uselistorder i32* %v2_b8b4, { 1, 0, 2 }
  uselistorder i32 %v0_b89c, { 1, 0 }
  uselistorder i32 %v6_b878, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_b864, { 2, 1, 0 }
  uselistorder i32 %v0_b84c, { 1, 0 }
  uselistorder i32 %v2_b808, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b804, { 1, 0 }
  uselistorder i32 %v3_b7dc, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_b7bc, { 1, 0, 2 }
  uselistorder i32 %v2_b7a4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b74c, { 2, 1, 0 }
  uselistorder i32 %v6_b740, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_b71c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_b6dc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b69c, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_b694, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b690, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_b67c, { 1, 0 }
  uselistorder i32 %v7_b63c, { 1, 0 }
  uselistorder i32 %v4_b63c, { 1, 0 }
  uselistorder i32 %v0_b60c, { 1, 0 }
  uselistorder i32 %v2_b5e0, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_b5dc54, { 1, 0 }
  uselistorder i32 %v1_b5a8, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_b590., { 1, 2, 0 }
  uselistorder i32 %v0_b598, { 0, 1, 3, 2 }
  uselistorder i32 %v1_b598, { 1, 0 }
  uselistorder i32 %v3_b578, { 1, 0 }
  uselistorder i32 %v4_b574, { 1, 0, 2 }
  uselistorder i32 %v1_b4e4, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_b53c, { 1, 0 }
  uselistorder i32 %v1_b520, { 1, 0 }
  uselistorder i32 %v1_b3c0, { 1, 0 }
  uselistorder i32 %v0_b500, { 2, 0, 1, 3 }
  uselistorder i32 %v3_b4c8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_b55c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_b4a4, { 2, 1, 0 }
  uselistorder i32 %v3_b498, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_b3b8, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_b460, { 1, 0 }
  uselistorder i32 %v3_b454, { 1, 0 }
  uselistorder i32 %v0_b460, { 1, 0 }
  uselistorder i32 %v3_b438, { 0, 2, 3, 1 }
  uselistorder i32 %v2_b428, { 1, 0, 2 }
  uselistorder i32 %v3_b3e0, { 2, 1, 0 }
  uselistorder i32 %v0_b3d0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_b3a0, { 1, 0 }
  uselistorder i32 %v1_b354, { 2, 1, 0, 3 }
  uselistorder i32 %v0_b350, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_b2f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b2e8, { 1, 0 }
  uselistorder i32 %v3_b2b8, { 1, 0 }
  uselistorder i32 %v0_b2ac, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_b28c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_b280, { 1, 0 }
  uselistorder i32 %v0_b258, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 14, 15, 16, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 27, 28, 29, 0, 1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 71, 58, 59, 60, 61, 62, 64, 65, 66, 67, 2, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 48, 49, 50, 51, 52, 53, 54, 55, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 15, 2, 4, 5, 6, 54, 47, 44, 55, 45, 46, 49, 48, 53, 50, 56, 52, 51, 57, 7, 11, 9, 8, 10, 13, 12, 16, 14, 58, 17, 18, 59, 19, 20, 21, 22, 23, 26, 27, 24, 25, 32, 29, 28, 30, 31, 33, 38, 34, 35, 36, 37, 40, 39, 43, 42, 41, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 0, 37, 38, 39, 40, 41, 1, 2, 5, 4, 6, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 42, 16, 17, 30, 29, 22, 18, 23, 19, 20, 21, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_baf0, { 1, 0 }
  uselistorder label %dec_label_pc_bad4, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_bad0, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_bac0, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_ba54, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_b9d0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_b9c8, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_b89c, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_b7d0, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_b688, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_b5dc, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_b5a8, { 1, 0 }
  uselistorder label %dec_label_pc_b55c, { 1, 0 }
  uselistorder label %dec_label_pc_b4f0, { 1, 0 }
  uselistorder label %dec_label_pc_b4ec, { 1, 0 }
  uselistorder label %dec_label_pc_b498, { 1, 0 }
  uselistorder label %dec_label_pc_b484, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b44c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_b438, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_bb04(i32 %arg1) local_unnamed_addr {
dec_label_pc_bb04:
  %v0_bb04 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bb04, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_bb04
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_bb04, %bb
  %v10_bb18 = phi i32 [ %arg1, %dec_label_pc_bb04 ], [ 0, %bb ]
  ret i32 %v10_bb18

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_bb1c = add i32 %arg2, 44
  %v2_bb1c = inttoptr i32 %v1_bb1c to i32*
  %v3_bb1c = load i32, i32* %v2_bb1c, align 4
  %v12_bb20 = load i32, i32* @r7, align 4
  %v1_bb24 = add i32 %v3_bb1c, 4
  %v2_bb24 = inttoptr i32 %v1_bb24 to i32*
  %v3_bb24 = load i32, i32* %v2_bb24, align 4
  %v1_bb28 = add i32 %arg2, 860
  %v2_bb28 = inttoptr i32 %v1_bb28 to i32*
  %v3_bb28 = load i32, i32* %v2_bb28, align 4
  store i32 %v3_bb28, i32* @r4, align 4
  %v1_bb2c = and i32 %v3_bb24, -4
  store i32 %v1_bb2c, i32* @r6, align 4
  %v1_bb30 = add i32 %v1_bb2c, -17
  %v2_bb34 = add i32 %v1_bb30, %v3_bb28
  store i32 %arg2, i32* @r5, align 4
  %v2_bb40 = sub i32 %v2_bb34, %arg1
  store i32 %v3_bb28, i32* %r1.global-to-local, align 4
  %v2_bb48 = udiv i32 %v2_bb40, %v3_bb28
  %v1_bb4c = add i32 %v2_bb48, -1
  store i32 %v1_bb4c, i32* %r0.global-to-local, align 4
  %v2_bb50 = mul i32 %v1_bb4c, %v3_bb28
  store i32 %v2_bb50, i32* @r7, align 4
  %v2_bb54 = icmp eq i32 %v2_bb50, 0
  store i1 %v2_bb54, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_bb50, 1
  br i1 %tmp8, label %dec_label_pc_bbbc, label %dec_label_pc_bb5c

dec_label_pc_bb5c:                                ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bb60 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_bb60, i32* %r0.global-to-local, align 4
  %v0_bb64 = load i32, i32* @r5, align 4
  %v1_bb64 = add i32 %v0_bb64, 44
  %v2_bb64 = inttoptr i32 %v1_bb64 to i32*
  %v3_bb64 = load i32, i32* %v2_bb64, align 4
  %v0_bb68 = load i32, i32* @r6, align 4
  %v2_bb68 = add i32 %v0_bb68, %v3_bb64
  %v9_bb6c = icmp eq i32 %v1_bb60, %v2_bb68
  store i1 %v9_bb6c, i1* @cpsr_z, align 1
  store i32 %v1_bb60, i32* @r4, align 4
  br i1 %v9_bb6c, label %dec_label_pc_bb78, label %dec_label_pc_bbbc

dec_label_pc_bb78:                                ; preds = %dec_label_pc_bb5c
  %v0_bb78 = load i32, i32* @r7, align 4
  %v1_bb78 = sub i32 0, %v0_bb78
  store i32 %v1_bb78, i32* %r0.global-to-local, align 4
  %v1_bb7c = call i32 @__GI_sbrk(i32 %v1_bb78)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bb84 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_bb84, i32* %r0.global-to-local, align 4
  %v7_bb88 = icmp eq i32 %v1_bb84, -1
  store i1 %v7_bb88, i1* @cpsr_z, align 1
  br i1 %v7_bb88, label %dec_label_pc_bbbc, label %dec_label_pc_bb90

dec_label_pc_bb90:                                ; preds = %dec_label_pc_bb78
  %v0_bb90 = load i32, i32* @r4, align 4
  %v2_bb90 = sub i32 %v0_bb90, %v1_bb84
  store i32 %v2_bb90, i32* %r0.global-to-local, align 4
  %v9_bb90 = icmp eq i32 %v0_bb90, %v1_bb84
  store i1 %v9_bb90, i1* @cpsr_z, align 1
  br i1 %v9_bb90, label %dec_label_pc_bbbc, label %dec_label_pc_bb98

dec_label_pc_bb98:                                ; preds = %dec_label_pc_bb90
  %v0_bb98 = load i32, i32* @r5, align 4
  %v1_bb98 = add i32 %v0_bb98, 872
  %v2_bb98 = inttoptr i32 %v1_bb98 to i32*
  %v3_bb98 = load i32, i32* %v2_bb98, align 4
  %v1_bb9c = load i32, i32* @r6, align 4
  %v2_bb9c = sub i32 %v1_bb9c, %v2_bb90
  %v1_bba0 = add i32 %v0_bb98, 44
  %v2_bba0 = inttoptr i32 %v1_bba0 to i32*
  %v3_bba0 = load i32, i32* %v2_bba0, align 4
  store i32 %v3_bba0, i32* %r1.global-to-local, align 4
  %v2_bba4 = sub i32 %v3_bb98, %v2_bb90
  %v1_bba8 = or i32 %v2_bb9c, 1
  store i32 %v1_bba8, i32* @r2, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_bba4, i32* %v2_bb98, align 4
  %v0_bbb4 = load i32, i32* @r2, align 4
  %v1_bbb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bbb4 = add i32 %v1_bbb4, 4
  %v3_bbb4 = inttoptr i32 %v2_bbb4 to i32*
  store i32 %v0_bbb4, i32* %v3_bbb4, align 4
  %v1_bbc8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbc0

dec_label_pc_bbbc:                                ; preds = %dec_label_pc_bb5c, %dec_label_pc_bb90, %dec_label_pc_bb78, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbc0

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bb98, %dec_label_pc_bbbc
  %v1_bbc8 = phi i32 [ %v1_bbc8.pre, %dec_label_pc_bb98 ], [ 0, %dec_label_pc_bbbc ]
  store i32 %v12_bb20, i32* @r7, align 4
  ret i32 %v1_bbc8

; uselistorder directives
  uselistorder i1 %v7_bb88, { 1, 0 }
  uselistorder i32 %v1_bb84, { 2, 1, 0, 3 }
  uselistorder i32 %v3_bb28, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 6, 5, 4, 2, 1, 0, 3 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_bbc0, { 1, 0 }
  uselistorder label %dec_label_pc_bbbc, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_bbcc = load i32, i32* @r4, align 4
  store i32 %v3_bbcc, i32* %stack_var_-36, align 4
  %v0_bbd0 = load i32, i32* @r0, align 4
  %v1_bbd0 = inttoptr i32 %v0_bbd0 to i32*
  %v2_bbd0 = load i32, i32* %v1_bbd0, align 4
  store i32 %v2_bbd0, i32* %r3.global-to-local, align 4
  %v2_bbd4 = icmp eq i32 %v2_bbd0, 0
  store i32 %v0_bbd0, i32* @r4, align 4
  br i1 %v2_bbd4, label %dec_label_pc_bd0c.preheader, label %dec_label_pc_bbe8

dec_label_pc_bd0c.preheader:                      ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_bd1425 = add i32 %v0_bbd0, 52
  store i32 %v1_bd1425, i32* %r3.global-to-local, align 4
  %v2_bd1c26 = add i32 %v0_bbd0, 60
  %v3_bd1c27 = inttoptr i32 %v2_bd1c26 to i32*
  store i32 %v1_bd1425, i32* %v3_bd1c27, align 4
  %v0_bd2028 = load i32, i32* %r3.global-to-local, align 4
  %v2_bd2029 = add i32 %v0_bd2028, 12
  %v3_bd2030 = inttoptr i32 %v2_bd2029 to i32*
  store i32 %v0_bd2028, i32* %v3_bd2030, align 4
  br label %dec_label_pc_bd0c.dec_label_pc_bd0c_crit_edge

dec_label_pc_bbe8:                                ; preds = %entry
  %v1_bbe8 = and i32 %v2_bbd0, -3
  %v3_bbec = udiv i32 %v2_bbd0, 8
  store i32 %v3_bbec, i32* %r2.global-to-local, align 4
  store i32 %v1_bbe8, i32* %v1_bbd0, align 4
  %v0_bbf4 = load i32, i32* @r0, align 4
  %v1_bbf4 = add i32 %v0_bbf4, -4
  store i32 %v1_bbf4, i32* %r3.global-to-local, align 4
  %v1_bbf8 = load i32, i32* %r2.global-to-local, align 4
  %v4_bbf8 = mul i32 %v1_bbf8, 4
  %v5_bbf8 = add i32 %v4_bbf8, %v1_bbf4
  store i32 %v5_bbf8, i32* %sb.global-to-local, align 4
  %v1_bbfc = add i32 %v0_bbf4, 52
  store i32 %v1_bbfc, i32* %r7.global-to-local, align 4
  %v1_bc00 = add i32 %v0_bbf4, 4
  store i32 %v1_bc00, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_bc08

dec_label_pc_bc08:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bbe8
  %v1_bcfc10 = phi i32 [ %v1_bcfc, %dec_label_pc_bd04 ], [ %v5_bbf8, %dec_label_pc_bbe8 ]
  %v1_bc14 = phi i32 [ %v1_bd04, %dec_label_pc_bd04 ], [ %v1_bc00, %dec_label_pc_bbe8 ]
  %v1_bc08 = inttoptr i32 %v1_bc14 to i32*
  %v2_bc08 = load i32, i32* %v1_bc08, align 4
  store i32 %v2_bc08, i32* %r1.global-to-local, align 4
  %v2_bc0c = icmp eq i32 %v2_bc08, 0
  br i1 %v2_bc0c, label %dec_label_pc_bcfc, label %dec_label_pc_bc14

dec_label_pc_bc14:                                ; preds = %dec_label_pc_bc08
  %v0_bc14 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bc14, i32* %v1_bc08, align 4
  %v0_bc18.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bc18

dec_label_pc_bc18:                                ; preds = %dec_label_pc_bcf0, %dec_label_pc_bc14
  %v0_bc34 = phi i32 [ %v0_bcf0, %dec_label_pc_bcf0 ], [ %v0_bc18.pre, %dec_label_pc_bc14 ]
  %v1_bc18 = add i32 %v0_bc34, 4
  %v2_bc18 = inttoptr i32 %v1_bc18 to i32*
  %v3_bc18 = load i32, i32* %v2_bc18, align 4
  store i32 %v3_bc18, i32* %r3.global-to-local, align 4
  %v1_bc1c = and i32 %v3_bc18, -2
  store i32 %v1_bc1c, i32* %lr.global-to-local, align 4
  %v2_bc20 = add i32 %v1_bc1c, %v0_bc34
  store i32 %v2_bc20, i32* @r0, align 4
  %v1_bc24 = urem i32 %v3_bc18, 2
  %v2_bc24 = icmp eq i32 %v1_bc24, 0
  %v1_bc28 = add i32 %v0_bc34, 8
  %v2_bc28 = inttoptr i32 %v1_bc28 to i32*
  %v3_bc28 = load i32, i32* %v2_bc28, align 4
  store i32 %v3_bc28, i32* %sl.global-to-local, align 4
  %v1_bc2c = add i32 %v2_bc20, 4
  %v2_bc2c = inttoptr i32 %v1_bc2c to i32*
  %v3_bc2c = load i32, i32* %v2_bc2c, align 4
  store i32 %v3_bc2c, i32* %r8.global-to-local, align 4
  br i1 %v2_bc24, label %dec_label_pc_bc34, label %dec_label_pc_bc68

dec_label_pc_bc34:                                ; preds = %dec_label_pc_bc18
  %v1_bc34 = inttoptr i32 %v0_bc34 to i32*
  %v2_bc34 = load i32, i32* %v1_bc34, align 4
  store i32 %v2_bc34, i32* %r5.global-to-local, align 4
  %v2_bc38 = sub i32 %v0_bc34, %v2_bc34
  store i32 %v2_bc38, i32* %r3.global-to-local, align 4
  %v1_bc3c = add i32 %v2_bc38, 8
  %v2_bc3c = inttoptr i32 %v1_bc3c to i32*
  %v3_bc3c = load i32, i32* %v2_bc3c, align 4
  store i32 %v3_bc3c, i32* %ip.global-to-local, align 4
  %v1_bc40 = add i32 %v3_bc3c, 12
  %v2_bc40 = inttoptr i32 %v1_bc40 to i32*
  %v3_bc40 = load i32, i32* %v2_bc40, align 4
  store i32 %v3_bc40, i32* %r1.global-to-local, align 4
  %v9_bc44 = icmp eq i32 %v3_bc40, %v2_bc38
  %v1_bc48 = add i32 %v2_bc38, 12
  %v2_bc48 = inttoptr i32 %v1_bc48 to i32*
  %v3_bc48 = load i32, i32* %v2_bc48, align 4
  store i32 %v3_bc48, i32* %r2.global-to-local, align 4
  br i1 %v9_bc44, label %dec_label_pc_bc50, label %dec_label_pc_bcac

dec_label_pc_bc50:                                ; preds = %dec_label_pc_bc34
  %v1_bc50 = add i32 %v3_bc48, 8
  %v2_bc50 = inttoptr i32 %v1_bc50 to i32*
  %v3_bc50 = load i32, i32* %v2_bc50, align 4
  store i32 %v3_bc50, i32* %r3.global-to-local, align 4
  %v9_bc54 = icmp eq i32 %v3_bc50, %v2_bc38
  br i1 %v9_bc54, label %dec_label_pc_bc5c, label %dec_label_pc_bcac

dec_label_pc_bc5c:                                ; preds = %dec_label_pc_bc50
  store i32 %v3_bc3c, i32* %v2_bc50, align 4
  %v0_bc60 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc60 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc60 = add i32 %v1_bc60, 12
  %v3_bc60 = inttoptr i32 %v2_bc60 to i32*
  store i32 %v0_bc60, i32* %v3_bc60, align 4
  %v0_bc64 = load i32, i32* %lr.global-to-local, align 4
  %v1_bc64 = load i32, i32* %r5.global-to-local, align 4
  %v2_bc64 = add i32 %v1_bc64, %v0_bc64
  store i32 %v2_bc64, i32* %lr.global-to-local, align 4
  %v0_bc6c.pre = load i32, i32* @r0, align 4
  %v0_bc70.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_bc68

dec_label_pc_bc68:                                ; preds = %dec_label_pc_bc18, %dec_label_pc_bc5c
  %v0_bce0 = phi i32 [ %v1_bc1c, %dec_label_pc_bc18 ], [ %v2_bc64, %dec_label_pc_bc5c ]
  %v0_bc70 = phi i32 [ %v3_bc2c, %dec_label_pc_bc18 ], [ %v0_bc70.pre, %dec_label_pc_bc5c ]
  %v1_bc84 = phi i32 [ %v2_bc20, %dec_label_pc_bc18 ], [ %v0_bc6c.pre, %dec_label_pc_bc5c ]
  %v0_bc68 = load i32, i32* @r4, align 4
  %v1_bc68 = add i32 %v0_bc68, 44
  %v2_bc68 = inttoptr i32 %v1_bc68 to i32*
  %v3_bc68 = load i32, i32* %v2_bc68, align 4
  store i32 %v3_bc68, i32* %r3.global-to-local, align 4
  %v9_bc6c = icmp eq i32 %v1_bc84, %v3_bc68
  %v1_bc70 = and i32 %v0_bc70, -4
  store i32 %v1_bc70, i32* %r5.global-to-local, align 4
  br i1 %v9_bc6c, label %dec_label_pc_bce0, label %dec_label_pc_bc78

dec_label_pc_bc78:                                ; preds = %dec_label_pc_bc68
  %v2_bc78 = add i32 %v1_bc84, %v1_bc70
  store i32 %v2_bc78, i32* %r3.global-to-local, align 4
  %v1_bc7c = add i32 %v2_bc78, 4
  %v2_bc7c = inttoptr i32 %v1_bc7c to i32*
  %v3_bc7c = load i32, i32* %v2_bc7c, align 4
  store i32 %v3_bc7c, i32* %r3.global-to-local, align 4
  %v1_bc80 = urem i32 %v3_bc7c, 2
  %v2_bc80 = icmp eq i32 %v1_bc80, 0
  %v2_bc84 = add i32 %v1_bc84, 4
  %v3_bc84 = inttoptr i32 %v2_bc84 to i32*
  store i32 %v1_bc70, i32* %v3_bc84, align 4
  br i1 %v2_bc80, label %dec_label_pc_bc8c, label %dec_label_pc_bc78.dec_label_pc_bcbc_crit_edge

dec_label_pc_bc78.dec_label_pc_bcbc_crit_edge:    ; preds = %dec_label_pc_bc78
  %v0_bcc0.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_bcbc

dec_label_pc_bc8c:                                ; preds = %dec_label_pc_bc78
  %v0_bc8c = load i32, i32* @r0, align 4
  %v1_bc8c = add i32 %v0_bc8c, 8
  %v2_bc8c = inttoptr i32 %v1_bc8c to i32*
  %v3_bc8c = load i32, i32* %v2_bc8c, align 4
  store i32 %v3_bc8c, i32* %ip.global-to-local, align 4
  %v1_bc90 = add i32 %v3_bc8c, 12
  %v2_bc90 = inttoptr i32 %v1_bc90 to i32*
  %v3_bc90 = load i32, i32* %v2_bc90, align 4
  store i32 %v3_bc90, i32* %r3.global-to-local, align 4
  %v9_bc94 = icmp eq i32 %v3_bc90, %v0_bc8c
  %v1_bc98 = add i32 %v0_bc8c, 12
  %v2_bc98 = inttoptr i32 %v1_bc98 to i32*
  %v3_bc98 = load i32, i32* %v2_bc98, align 4
  store i32 %v3_bc98, i32* %r2.global-to-local, align 4
  br i1 %v9_bc94, label %dec_label_pc_bca0, label %dec_label_pc_bcac

dec_label_pc_bca0:                                ; preds = %dec_label_pc_bc8c
  %v1_bca0 = add i32 %v3_bc98, 8
  %v2_bca0 = inttoptr i32 %v1_bca0 to i32*
  %v3_bca0 = load i32, i32* %v2_bca0, align 4
  store i32 %v3_bca0, i32* %r3.global-to-local, align 4
  %v9_bca4 = icmp eq i32 %v3_bca0, %v0_bc8c
  br i1 %v9_bca4, label %dec_label_pc_bcb0, label %dec_label_pc_bcac

dec_label_pc_bcac:                                ; preds = %dec_label_pc_bc8c, %dec_label_pc_bc50, %dec_label_pc_bc34, %dec_label_pc_bca0
  %v0_bcac = call i32 @abort()
  store i32 %v0_bcac, i32* @r0, align 4
  %v0_bcb0.pre = load i32, i32* @ip, align 4
  %v1_bcb0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_bcb0

dec_label_pc_bcb0:                                ; preds = %dec_label_pc_bca0, %dec_label_pc_bcac
  %v1_bcb0 = phi i32 [ %v3_bc98, %dec_label_pc_bca0 ], [ %v1_bcb0.pre, %dec_label_pc_bcac ]
  %v0_bcb0 = phi i32 [ %v3_bc8c, %dec_label_pc_bca0 ], [ %v0_bcb0.pre, %dec_label_pc_bcac ]
  %v2_bcb0 = add i32 %v1_bcb0, 8
  %v3_bcb0 = inttoptr i32 %v2_bcb0 to i32*
  store i32 %v0_bcb0, i32* %v3_bcb0, align 4
  %v0_bcb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcb4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bcb4 = add i32 %v1_bcb4, 12
  %v3_bcb4 = inttoptr i32 %v2_bcb4 to i32*
  store i32 %v0_bcb4, i32* %v3_bcb4, align 4
  %v0_bcb8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bcb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_bcb8 = add i32 %v1_bcb8, %v0_bcb8
  store i32 %v2_bcb8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_bcbc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bc78.dec_label_pc_bcbc_crit_edge, %dec_label_pc_bcb0
  %v0_bcc0 = phi i32 [ %v0_bcc0.pre, %dec_label_pc_bc78.dec_label_pc_bcbc_crit_edge ], [ %v2_bcb8, %dec_label_pc_bcb0 ]
  %v0_bcbc = load i32, i32* %r7.global-to-local, align 4
  %v1_bcbc = add i32 %v0_bcbc, 8
  %v2_bcbc = inttoptr i32 %v1_bcbc to i32*
  %v3_bcbc = load i32, i32* %v2_bcbc, align 4
  store i32 %v3_bcbc, i32* %r2.global-to-local, align 4
  %v1_bcc0 = or i32 %v0_bcc0, 1
  store i32 %v1_bcc0, i32* %r3.global-to-local, align 4
  %v0_bcc4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_bcc4, i32* %v2_bcbc, align 4
  %v0_bcc8 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcc8 = load i32, i32* %r2.global-to-local, align 4
  %v2_bcc8 = add i32 %v1_bcc8, 12
  %v3_bcc8 = inttoptr i32 %v2_bcc8 to i32*
  store i32 %v0_bcc8, i32* %v3_bcc8, align 4
  %v0_bccc = load i32, i32* %lr.global-to-local, align 4
  %v1_bccc = load i32, i32* %r1.global-to-local, align 4
  %v3_bccc = add i32 %v1_bccc, %v0_bccc
  %v4_bccc = inttoptr i32 %v3_bccc to i32*
  store i32 %v0_bccc, i32* %v4_bccc, align 4
  %v0_bcd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcd0 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcd0 = add i32 %v1_bcd0, 4
  %v3_bcd0 = inttoptr i32 %v2_bcd0 to i32*
  store i32 %v0_bcd0, i32* %v3_bcd0, align 4
  %v0_bcd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcd4 = add i32 %v1_bcd4, 8
  %v3_bcd4 = inttoptr i32 %v2_bcd4 to i32*
  store i32 %v0_bcd4, i32* %v3_bcd4, align 4
  %v0_bcd8 = load i32, i32* %r7.global-to-local, align 4
  %v1_bcd8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcd8 = add i32 %v1_bcd8, 12
  %v3_bcd8 = inttoptr i32 %v2_bcd8 to i32*
  store i32 %v0_bcd8, i32* %v3_bcd8, align 4
  br label %dec_label_pc_bcf0

dec_label_pc_bce0:                                ; preds = %dec_label_pc_bc68
  %v2_bce0 = add i32 %v1_bc70, %v0_bce0
  %v1_bce4 = or i32 %v2_bce0, 1
  store i32 %v1_bce4, i32* %r3.global-to-local, align 4
  %v1_bce8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bce8 = add i32 %v1_bce8, 4
  %v3_bce8 = inttoptr i32 %v2_bce8 to i32*
  store i32 %v1_bce4, i32* %v3_bce8, align 4
  %v0_bcec = load i32, i32* %r1.global-to-local, align 4
  %v1_bcec = load i32, i32* @r4, align 4
  %v2_bcec = add i32 %v1_bcec, 44
  %v3_bcec = inttoptr i32 %v2_bcec to i32*
  store i32 %v0_bcec, i32* %v3_bcec, align 4
  br label %dec_label_pc_bcf0

dec_label_pc_bcf0:                                ; preds = %dec_label_pc_bcbc, %dec_label_pc_bce0
  %v0_bcf0 = load i32, i32* %sl.global-to-local, align 4
  %v2_bcf0 = icmp eq i32 %v0_bcf0, 0
  store i32 %v0_bcf0, i32* %r1.global-to-local, align 4
  br i1 %v2_bcf0, label %dec_label_pc_bcfc.loopexit, label %dec_label_pc_bc18

dec_label_pc_bcfc.loopexit:                       ; preds = %dec_label_pc_bcf0
  %v0_bcfc.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_bcfc.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bcfc

dec_label_pc_bcfc:                                ; preds = %dec_label_pc_bcfc.loopexit, %dec_label_pc_bc08
  %v1_bcfc = phi i32 [ %v1_bcfc.pre, %dec_label_pc_bcfc.loopexit ], [ %v1_bcfc10, %dec_label_pc_bc08 ]
  %v0_bd04 = phi i32 [ %v0_bcfc.pre, %dec_label_pc_bcfc.loopexit ], [ %v1_bc14, %dec_label_pc_bc08 ]
  %v9_bcfc = icmp eq i32 %v0_bd04, %v1_bcfc
  br i1 %v9_bcfc, label %dec_label_pc_bd74, label %dec_label_pc_bd04

dec_label_pc_bd04:                                ; preds = %dec_label_pc_bcfc
  %v1_bd04 = add i32 %v0_bd04, 4
  store i32 %v1_bd04, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_bc08

dec_label_pc_bd0c.dec_label_pc_bd0c_crit_edge:    ; preds = %dec_label_pc_bd0c.preheader, %dec_label_pc_bd0c.dec_label_pc_bd0c_crit_edge
  %v0_bd0c.pre = load i32, i32* @r4, align 4
  %v1_bd0c.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_bd0c = mul i32 %v1_bd0c.pre, 8
  %v5_bd0c = add i32 %v4_bd0c, %v0_bd0c.pre
  %v1_bd10 = add i32 %v1_bd0c.pre, 1
  store i32 %v1_bd10, i32* %r2.global-to-local, align 4
  %v1_bd14 = add i32 %v5_bd0c, 44
  store i32 %v1_bd14, i32* %r3.global-to-local, align 4
  %v2_bd1c = add i32 %v5_bd0c, 52
  %v3_bd1c = inttoptr i32 %v2_bd1c to i32*
  store i32 %v1_bd14, i32* %v3_bd1c, align 4
  %v0_bd20 = load i32, i32* %r3.global-to-local, align 4
  %v2_bd20 = add i32 %v0_bd20, 12
  %v3_bd20 = inttoptr i32 %v2_bd20 to i32*
  store i32 %v0_bd20, i32* %v3_bd20, align 4
  %v7_bd24 = icmp sgt i32 %v1_bd10, 95
  br i1 %v7_bd24, label %dec_label_pc_bd28, label %dec_label_pc_bd0c.dec_label_pc_bd0c_crit_edge

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd0c.dec_label_pc_bd0c_crit_edge
  %v0_bd28 = load i32, i32* @r4, align 4
  %v1_bd28 = inttoptr i32 %v0_bd28 to i32*
  %v2_bd28 = load i32, i32* %v1_bd28, align 4
  store i32 %v2_bd28, i32* %r2.global-to-local, align 4
  %v1_bd2c = add i32 %v0_bd28, 864
  %v2_bd2c = inttoptr i32 %v1_bd2c to i32*
  %v3_bd2c = load i32, i32* %v2_bd2c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_bd34 = urem i32 %v2_bd28, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_bd3c = or i32 %v3_bd2c, 1
  store i32 %v1_bd3c, i32* %r1.global-to-local, align 4
  %v1_bd40 = or i32 %v1_bd34, 72
  store i32 %v1_bd40, i32* %r2.global-to-local, align 4
  %v1_bd44 = add i32 %v0_bd28, 52
  store i32 %v1_bd44, i32* %ip.global-to-local, align 4
  %v2_bd48 = add i32 %v0_bd28, 840
  %v3_bd48 = inttoptr i32 %v2_bd48 to i32*
  store i32 0, i32* %v3_bd48, align 4
  %v0_bd4c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd4c = add i32 %v0_bd4c, 65536
  store i32 %v1_bd4c, i32* %r3.global-to-local, align 4
  %v0_bd50 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd50 = load i32, i32* @r4, align 4
  %v2_bd50 = add i32 %v1_bd50, 836
  %v3_bd50 = inttoptr i32 %v2_bd50 to i32*
  store i32 %v0_bd50, i32* %v3_bd50, align 4
  %v0_bd54 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd54 = load i32, i32* @r4, align 4
  %v2_bd54 = add i32 %v1_bd54, 844
  %v3_bd54 = inttoptr i32 %v2_bd54 to i32*
  store i32 %v0_bd54, i32* %v3_bd54, align 4
  %v1_bd58 = load i32, i32* @r4, align 4
  %v2_bd58 = add i32 %v1_bd58, 852
  %v3_bd58 = inttoptr i32 %v2_bd58 to i32*
  store i32 %v1_bd4c, i32* %v3_bd58, align 4
  %v1_bd5c = load i32, i32* @r4, align 4
  %v2_bd5c = add i32 %v1_bd5c, 864
  %v3_bd5c = inttoptr i32 %v2_bd5c to i32*
  store i32 %v1_bd3c, i32* %v3_bd5c, align 4
  %v1_bd60 = load i32, i32* @r4, align 4
  %v2_bd60 = inttoptr i32 %v1_bd60 to i32*
  store i32 %v1_bd40, i32* %v2_bd60, align 4
  %v0_bd64 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd64 = load i32, i32* @r4, align 4
  %v2_bd64 = add i32 %v1_bd64, 44
  %v3_bd64 = inttoptr i32 %v2_bd64 to i32*
  store i32 %v0_bd64, i32* %v3_bd64, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_bd6c = call i32 @sysconf(i32 30, i32 %v1_bd3c, i32 %v1_bd40, i32 %v1_bd4c)
  store i32 %v4_bd6c, i32* @r0, align 4
  %v1_bd70 = load i32, i32* @r4, align 4
  %v2_bd70 = add i32 %v1_bd70, 860
  %v3_bd70 = inttoptr i32 %v2_bd70 to i32*
  store i32 %v4_bd6c, i32* %v3_bd70, align 4
  br label %dec_label_pc_bd74

dec_label_pc_bd74:                                ; preds = %dec_label_pc_bcfc, %dec_label_pc_bd28
  %v2_bd78 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_bd78, i32* @r4, align 4
  %v1_bd7c = load i32, i32* @r0, align 4
  ret i32 %v1_bd7c

; uselistorder directives
  uselistorder i32 %v0_bd28, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd20, { 1, 0 }
  uselistorder i32 %v1_bd04, { 1, 0 }
  uselistorder i32 %v0_bcf0, { 0, 2, 1 }
  uselistorder i32 %v0_bccc, { 1, 0 }
  uselistorder i32 %v1_bc1c, { 1, 0, 2 }
  uselistorder i32 %v0_bc34, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_bbf4, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 30, { 0, 4, 1, 2, 3 }
  uselistorder label %dec_label_pc_bd74, { 1, 0 }
  uselistorder label %dec_label_pc_bd0c.dec_label_pc_bd0c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_bcf0, { 1, 0 }
  uselistorder label %dec_label_pc_bcbc, { 1, 0 }
  uselistorder label %dec_label_pc_bcb0, { 1, 0 }
  uselistorder label %dec_label_pc_bcac, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_bc68, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_bd80 = load i32, i32* @r4, align 4
  %v6_bd80 = load i32, i32* @r5, align 4
  %v9_bd80 = load i32, i32* @r6, align 4
  %v12_bd80 = load i32, i32* @r7, align 4
  %v18_bd80 = load i32, i32* @lr, align 4
  %v0_bd88 = load i32, i32* @r0, align 4
  store i32 %v0_bd88, i32* @r6, align 4
  %v2_bd88 = icmp eq i32 %v0_bd88, 0
  %v2_bd8c = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r7, align 4
  br i1 %v2_bd88, label %dec_label_pc_bf94, label %dec_label_pc_bd98

dec_label_pc_bd98:                                ; preds = %entry
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_bd9c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 72) to i32*), align 4
  store i32 %v4_bd9c, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_bd9c, i32* %r2.global-to-local, align 4
  %v4_bda8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 36) to i32*), align 4
  store i32 %v4_bda8, i32* %r1.global-to-local, align 4
  store i32 %v2_bd8c, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_bdb4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  store i32 %v4_bdb4, i32* %ip.global-to-local, align 4
  store i32 48576, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bdb4)
  %v0_bdc0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bdc0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_bdc8 = load i32, i32* @r7, align 4
  %v2_bdc8 = add i32 %v0_bdc8, 16
  %v3_bdc8 = inttoptr i32 %v2_bdc8 to i32*
  %v4_bdc8 = load i32, i32* %v3_bdc8, align 4
  store i32 %v4_bdc8, i32* %ip.global-to-local, align 4
  store i32 48596, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bdc8)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_bdd8 = load i32, i32* @r7, align 4
  %v2_bdd8 = add i32 %v0_bdd8, 32
  %v3_bdd8 = inttoptr i32 %v2_bdd8 to i32*
  %v4_bdd8 = load i32, i32* %v3_bdd8, align 4
  store i32 %v4_bdd8, i32* @lr, align 4
  %v0_bddc = load i32, i32* @r6, align 4
  %v1_bddc = add i32 %v0_bddc, -4
  %v2_bddc = inttoptr i32 %v1_bddc to i32*
  %v3_bddc = load i32, i32* %v2_bddc, align 4
  store i32 %v3_bddc, i32* %r2.global-to-local, align 4
  %v1_bde0 = inttoptr i32 %v4_bdd8 to i32*
  %v2_bde0 = load i32, i32* %v1_bde0, align 4
  store i32 %v2_bde0, i32* %r3.global-to-local, align 4
  %v1_bde4 = and i32 %v3_bddc, -4
  store i32 %v1_bde4, i32* %ip.global-to-local, align 4
  %v1_bde8 = add i32 %v0_bddc, -8
  store i32 %v1_bde8, i32* @r5, align 4
  store i32 %v1_bde8, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_bde4, %v2_bde0
  br i1 %tmp, label %dec_label_pc_be18, label %dec_label_pc_bdf8

dec_label_pc_bdf8:                                ; preds = %dec_label_pc_bd98
  %v1_bdf8 = or i32 %v2_bde0, 3
  store i32 %v1_bdf8, i32* %r3.global-to-local, align 4
  store i32 %v1_bdf8, i32* %v1_bde0, align 4
  %v3_bdfc = load i32, i32* @lr, align 4
  %v4_bdfc = add i32 %v3_bdfc, -8
  store i32 %v4_bdfc, i32* %lr.global-to-local, align 4
  %v0_be00 = load i32, i32* %ip.global-to-local, align 4
  %v3_be00 = udiv i32 %v0_be00, 8
  store i32 %v3_be00, i32* %r1.global-to-local, align 4
  %v1_be04 = add i32 %v3_bdfc, -4
  store i32 %v1_be04, i32* @r2, align 4
  %v4_be08 = mul nuw i32 %v3_be00, 4
  %v5_be08 = add i32 %v4_be08, %v1_be04
  %v6_be08 = inttoptr i32 %v5_be08 to i32*
  %v7_be08 = load i32, i32* %v6_be08, align 4
  store i32 %v7_be08, i32* %r3.global-to-local, align 4
  %v1_be0c = load i32, i32* @r5, align 4
  %v2_be0c = add i32 %v1_be0c, 8
  %v3_be0c = inttoptr i32 %v2_be0c to i32*
  store i32 %v7_be08, i32* %v3_be0c, align 4
  %v0_be10 = load i32, i32* @r5, align 4
  %v1_be10 = load i32, i32* @r2, align 4
  %v2_be10 = load i32, i32* %r1.global-to-local, align 4
  %v5_be10 = mul i32 %v2_be10, 4
  %v6_be10 = add i32 %v5_be10, %v1_be10
  %v7_be10 = inttoptr i32 %v6_be10 to i32*
  store i32 %v0_be10, i32* %v7_be10, align 4
  br label %dec_label_pc_bf7c

dec_label_pc_be18:                                ; preds = %dec_label_pc_bd98
  %v1_be18 = and i32 %v3_bddc, 2
  %v2_be18 = icmp eq i32 %v1_be18, 0
  br i1 %v2_be18, label %dec_label_pc_be20, label %dec_label_pc_bf54

dec_label_pc_be20:                                ; preds = %dec_label_pc_be18
  %v1_be20 = or i32 %v2_bde0, 1
  store i32 %v1_be20, i32* %r3.global-to-local, align 4
  store i32 %v1_be20, i32* %v1_bde0, align 4
  %v0_be28 = load i32, i32* @r6, align 4
  %v1_be28 = add i32 %v0_be28, -4
  %v2_be28 = inttoptr i32 %v1_be28 to i32*
  %v3_be28 = load i32, i32* %v2_be28, align 4
  store i32 %v3_be28, i32* %r3.global-to-local, align 4
  %v0_be2c = load i32, i32* @r5, align 4
  %v1_be2c = load i32, i32* %ip.global-to-local, align 4
  %v2_be2c = add i32 %v1_be2c, %v0_be2c
  store i32 %v2_be2c, i32* %lr.global-to-local, align 4
  %v1_be30 = urem i32 %v3_be28, 2
  %v2_be30 = icmp eq i32 %v1_be30, 0
  %v1_be34 = add i32 %v2_be2c, 4
  %v2_be34 = inttoptr i32 %v1_be34 to i32*
  %v3_be34 = load i32, i32* %v2_be34, align 4
  store i32 %v3_be34, i32* %r8.global-to-local, align 4
  br i1 %v2_be30, label %dec_label_pc_be3c, label %dec_label_pc_be70

dec_label_pc_be3c:                                ; preds = %dec_label_pc_be20
  %v1_be3c = add i32 %v0_be28, -8
  %v2_be3c = inttoptr i32 %v1_be3c to i32*
  %v3_be3c = load i32, i32* %v2_be3c, align 4
  store i32 %v3_be3c, i32* %r1.global-to-local, align 4
  %v2_be40 = sub i32 %v0_be2c, %v3_be3c
  store i32 %v2_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = add i32 %v2_be40, 8
  %v2_be44 = inttoptr i32 %v1_be44 to i32*
  %v3_be44 = load i32, i32* %v2_be44, align 4
  store i32 %v3_be44, i32* %r2.global-to-local, align 4
  %v1_be48 = add i32 %v3_be44, 12
  %v2_be48 = inttoptr i32 %v1_be48 to i32*
  %v3_be48 = load i32, i32* %v2_be48, align 4
  store i32 %v3_be48, i32* %r4.global-to-local, align 4
  %v9_be4c = icmp eq i32 %v3_be48, %v2_be40
  %v1_be50 = add i32 %v2_be40, 12
  %v2_be50 = inttoptr i32 %v1_be50 to i32*
  %v3_be50 = load i32, i32* %v2_be50, align 4
  store i32 %v3_be50, i32* %r0.global-to-local, align 4
  br i1 %v9_be4c, label %dec_label_pc_be58, label %dec_label_pc_bebc

dec_label_pc_be58:                                ; preds = %dec_label_pc_be3c
  %v1_be58 = add i32 %v3_be50, 8
  %v2_be58 = inttoptr i32 %v1_be58 to i32*
  %v3_be58 = load i32, i32* %v2_be58, align 4
  store i32 %v3_be58, i32* %r3.global-to-local, align 4
  %v9_be5c = icmp eq i32 %v3_be58, %v2_be40
  br i1 %v9_be5c, label %dec_label_pc_be64, label %dec_label_pc_bebc

dec_label_pc_be64:                                ; preds = %dec_label_pc_be58
  store i32 %v3_be44, i32* %v2_be58, align 4
  %v0_be68 = load i32, i32* %r0.global-to-local, align 4
  %v1_be68 = load i32, i32* %r2.global-to-local, align 4
  %v2_be68 = add i32 %v1_be68, 12
  %v3_be68 = inttoptr i32 %v2_be68 to i32*
  store i32 %v0_be68, i32* %v3_be68, align 4
  %v0_be6c = load i32, i32* %ip.global-to-local, align 4
  %v1_be6c = load i32, i32* %r1.global-to-local, align 4
  %v2_be6c = add i32 %v1_be6c, %v0_be6c
  store i32 %v2_be6c, i32* %ip.global-to-local, align 4
  %v0_be7c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_be80.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_be70

dec_label_pc_be70:                                ; preds = %dec_label_pc_be20, %dec_label_pc_be64
  %v0_befc = phi i32 [ %v1_be2c, %dec_label_pc_be20 ], [ %v2_be6c, %dec_label_pc_be64 ]
  %v0_be80 = phi i32 [ %v3_be34, %dec_label_pc_be20 ], [ %v0_be80.pre, %dec_label_pc_be64 ]
  %v1_be94 = phi i32 [ %v2_be2c, %dec_label_pc_be20 ], [ %v0_be7c.pre, %dec_label_pc_be64 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_be74 = load i32, i32* @r7, align 4
  %v2_be74 = add i32 %v0_be74, 32
  %v3_be74 = inttoptr i32 %v2_be74 to i32*
  %v4_be74 = load i32, i32* %v3_be74, align 4
  store i32 %v4_be74, i32* @r2, align 4
  %v1_be78 = add i32 %v4_be74, 44
  %v2_be78 = inttoptr i32 %v1_be78 to i32*
  %v3_be78 = load i32, i32* %v2_be78, align 4
  store i32 %v3_be78, i32* %r3.global-to-local, align 4
  %v9_be7c = icmp eq i32 %v1_be94, %v3_be78
  %v1_be80 = and i32 %v0_be80, -4
  store i32 %v1_be80, i32* %r0.global-to-local, align 4
  br i1 %v9_be7c, label %dec_label_pc_befc, label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %dec_label_pc_be70
  %v2_be88 = add i32 %v1_be94, %v1_be80
  store i32 %v2_be88, i32* %r3.global-to-local, align 4
  %v1_be8c = add i32 %v2_be88, 4
  %v2_be8c = inttoptr i32 %v1_be8c to i32*
  %v3_be8c = load i32, i32* %v2_be8c, align 4
  store i32 %v3_be8c, i32* %r3.global-to-local, align 4
  %v1_be90 = urem i32 %v3_be8c, 2
  %v2_be90 = icmp eq i32 %v1_be90, 0
  %v2_be94 = add i32 %v1_be94, 4
  %v3_be94 = inttoptr i32 %v2_be94 to i32*
  store i32 %v1_be80, i32* %v3_be94, align 4
  br i1 %v2_be90, label %dec_label_pc_be9c, label %dec_label_pc_be88.dec_label_pc_becc_crit_edge

dec_label_pc_be88.dec_label_pc_becc_crit_edge:    ; preds = %dec_label_pc_be88
  %v0_bedc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_becc

dec_label_pc_be9c:                                ; preds = %dec_label_pc_be88
  %v0_be9c = load i32, i32* %lr.global-to-local, align 4
  %v1_be9c = add i32 %v0_be9c, 8
  %v2_be9c = inttoptr i32 %v1_be9c to i32*
  %v3_be9c = load i32, i32* %v2_be9c, align 4
  store i32 %v3_be9c, i32* %r1.global-to-local, align 4
  %v1_bea0 = add i32 %v3_be9c, 12
  %v2_bea0 = inttoptr i32 %v1_bea0 to i32*
  %v3_bea0 = load i32, i32* %v2_bea0, align 4
  store i32 %v3_bea0, i32* %r3.global-to-local, align 4
  %v9_bea4 = icmp eq i32 %v3_bea0, %v0_be9c
  %v1_bea8 = add i32 %v0_be9c, 12
  %v2_bea8 = inttoptr i32 %v1_bea8 to i32*
  %v3_bea8 = load i32, i32* %v2_bea8, align 4
  store i32 %v3_bea8, i32* %r2.global-to-local, align 4
  br i1 %v9_bea4, label %dec_label_pc_beb0, label %dec_label_pc_bebc

dec_label_pc_beb0:                                ; preds = %dec_label_pc_be9c
  %v1_beb0 = add i32 %v3_bea8, 8
  %v2_beb0 = inttoptr i32 %v1_beb0 to i32*
  %v3_beb0 = load i32, i32* %v2_beb0, align 4
  store i32 %v3_beb0, i32* %r3.global-to-local, align 4
  %v9_beb4 = icmp eq i32 %v3_beb0, %v0_be9c
  br i1 %v9_beb4, label %dec_label_pc_bec0, label %dec_label_pc_bebc

dec_label_pc_bebc:                                ; preds = %dec_label_pc_be9c, %dec_label_pc_be58, %dec_label_pc_be3c, %dec_label_pc_beb0
  %v0_bebc = call i32 @abort()
  store i32 %v0_bebc, i32* %r0.global-to-local, align 4
  %v0_bec0.pre = load i32, i32* @r1, align 4
  %v1_bec0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_bec0

dec_label_pc_bec0:                                ; preds = %dec_label_pc_beb0, %dec_label_pc_bebc
  %v1_bec0 = phi i32 [ %v3_bea8, %dec_label_pc_beb0 ], [ %v1_bec0.pre, %dec_label_pc_bebc ]
  %v0_bec0 = phi i32 [ %v3_be9c, %dec_label_pc_beb0 ], [ %v0_bec0.pre, %dec_label_pc_bebc ]
  %v2_bec0 = add i32 %v1_bec0, 8
  %v3_bec0 = inttoptr i32 %v2_bec0 to i32*
  store i32 %v0_bec0, i32* %v3_bec0, align 4
  %v0_bec4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bec4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bec4 = add i32 %v1_bec4, 12
  %v3_bec4 = inttoptr i32 %v2_bec4 to i32*
  store i32 %v0_bec4, i32* %v3_bec4, align 4
  %v0_bec8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bec8 = load i32, i32* %r0.global-to-local, align 4
  %v2_bec8 = add i32 %v1_bec8, %v0_bec8
  store i32 %v2_bec8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_becc

dec_label_pc_becc:                                ; preds = %dec_label_pc_be88.dec_label_pc_becc_crit_edge, %dec_label_pc_bec0
  %v0_bedc = phi i32 [ %v0_bedc.pre, %dec_label_pc_be88.dec_label_pc_becc_crit_edge ], [ %v2_bec8, %dec_label_pc_bec0 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_bed0 = load i32, i32* @r7, align 4
  %v2_bed0 = add i32 %v0_bed0, 32
  %v3_bed0 = inttoptr i32 %v2_bed0 to i32*
  %v4_bed0 = load i32, i32* %v3_bed0, align 4
  %v1_bed4 = add i32 %v4_bed0, 52
  store i32 %v1_bed4, i32* %r3.global-to-local, align 4
  %v1_bed8 = add i32 %v4_bed0, 60
  %v2_bed8 = inttoptr i32 %v1_bed8 to i32*
  %v3_bed8 = load i32, i32* %v2_bed8, align 4
  store i32 %v3_bed8, i32* %r1.global-to-local, align 4
  %v1_bedc = or i32 %v0_bedc, 1
  store i32 %v1_bedc, i32* @r2, align 4
  %v1_bee0 = load i32, i32* %r4.global-to-local, align 4
  %v2_bee0 = add i32 %v1_bee0, 12
  %v3_bee0 = inttoptr i32 %v2_bee0 to i32*
  store i32 %v1_bed4, i32* %v3_bee0, align 4
  %v0_bee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bee4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bee4 = add i32 %v1_bee4, 8
  %v3_bee4 = inttoptr i32 %v2_bee4 to i32*
  store i32 %v0_bee4, i32* %v3_bee4, align 4
  %v0_bee8 = load i32, i32* @r2, align 4
  %v1_bee8 = load i32, i32* %r4.global-to-local, align 4
  %v2_bee8 = add i32 %v1_bee8, 4
  %v3_bee8 = inttoptr i32 %v2_bee8 to i32*
  store i32 %v0_bee8, i32* %v3_bee8, align 4
  %v0_beec = load i32, i32* %ip.global-to-local, align 4
  %v1_beec = load i32, i32* %r4.global-to-local, align 4
  %v3_beec = add i32 %v1_beec, %v0_beec
  %v4_beec = inttoptr i32 %v3_beec to i32*
  store i32 %v0_beec, i32* %v4_beec, align 4
  %v0_bef0 = load i32, i32* %r4.global-to-local, align 4
  %v1_bef0 = load i32, i32* %r1.global-to-local, align 4
  %v2_bef0 = add i32 %v1_bef0, 12
  %v3_bef0 = inttoptr i32 %v2_bef0 to i32*
  store i32 %v0_bef0, i32* %v3_bef0, align 4
  %v0_bef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_bef4 = load i32, i32* %r3.global-to-local, align 4
  %v2_bef4 = add i32 %v1_bef4, 8
  %v3_bef4 = inttoptr i32 %v2_bef4 to i32*
  store i32 %v0_bef4, i32* %v3_bef4, align 4
  br label %dec_label_pc_bf0c

dec_label_pc_befc:                                ; preds = %dec_label_pc_be70
  %v2_befc = add i32 %v1_be80, %v0_befc
  store i32 %v2_befc, i32* %ip.global-to-local, align 4
  %v1_bf00 = or i32 %v2_befc, 1
  store i32 %v1_bf00, i32* %r3.global-to-local, align 4
  %v0_bf04 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bf04, i32* %v2_be78, align 4
  %v0_bf08 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf08 = load i32, i32* %r4.global-to-local, align 4
  %v2_bf08 = add i32 %v1_bf08, 4
  %v3_bf08 = inttoptr i32 %v2_bf08 to i32*
  store i32 %v0_bf08, i32* %v3_bf08, align 4
  br label %dec_label_pc_bf0c

dec_label_pc_bf0c:                                ; preds = %dec_label_pc_becc, %dec_label_pc_befc
  %v0_bf0c = load i32, i32* %ip.global-to-local, align 4
  %v3_bf10 = icmp ult i32 %v0_bf0c, 131070
  br i1 %v3_bf10, label %dec_label_pc_bf7c, label %dec_label_pc_bf14

dec_label_pc_bf14:                                ; preds = %dec_label_pc_bf0c
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_bf18 = load i32, i32* @r7, align 4
  %v2_bf18 = add i32 %v0_bf18, 32
  %v3_bf18 = inttoptr i32 %v2_bf18 to i32*
  %v4_bf18 = load i32, i32* %v3_bf18, align 4
  store i32 %v4_bf18, i32* @r4, align 4
  %v1_bf1c = inttoptr i32 %v4_bf18 to i32*
  %v2_bf1c = load i32, i32* %v1_bf1c, align 4
  store i32 %v2_bf1c, i32* %r3.global-to-local, align 4
  %v1_bf20 = and i32 %v2_bf1c, 2
  %v2_bf20 = icmp eq i32 %v1_bf20, 0
  br i1 %v2_bf20, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_bf14
  store i32 %v4_bf18, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_bf14, %bb
  %v1_bf28 = xor i1 %v2_bf20, true
  call void @__pseudo_cond_branch(i1 %v1_bf28, i32 ptrtoint (i32* @global_var_bbcc.104 to i32))
  %v0_bf2c = load i32, i32* @r4, align 4
  %v1_bf2c = add i32 %v0_bf2c, 44
  %v2_bf2c = inttoptr i32 %v1_bf2c to i32*
  %v3_bf2c = load i32, i32* %v2_bf2c, align 4
  store i32 %v3_bf2c, i32* %r3.global-to-local, align 4
  %v1_bf30 = add i32 %v3_bf2c, 4
  %v2_bf30 = inttoptr i32 %v1_bf30 to i32*
  %v3_bf30 = load i32, i32* %v2_bf30, align 4
  store i32 %v3_bf30, i32* %r3.global-to-local, align 4
  %v1_bf34 = add i32 %v0_bf2c, 836
  %v2_bf34 = inttoptr i32 %v1_bf34 to i32*
  %v3_bf34 = load i32, i32* %v2_bf34, align 4
  store i32 %v3_bf34, i32* @r2, align 4
  %v1_bf38 = and i32 %v3_bf30, -4
  store i32 %v1_bf38, i32* %r3.global-to-local, align 4
  %v3_bf3c = icmp ult i32 %v1_bf38, %v3_bf34
  br i1 %v3_bf3c, label %dec_label_pc_bf7c, label %dec_label_pc_bf44

dec_label_pc_bf44:                                ; preds = %bb17
  store i32 %v0_bf2c, i32* %r1.global-to-local, align 4
  %v1_bf48 = add i32 %v0_bf2c, 840
  %v2_bf48 = inttoptr i32 %v1_bf48 to i32*
  %v3_bf48 = load i32, i32* %v2_bf48, align 4
  store i32 %v3_bf48, i32* %r0.global-to-local, align 4
  %v2_bf4c = call i32 @__malloc_trim(i32 %v3_bf48, i32 %v0_bf2c)
  store i32 %v2_bf4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf7c

dec_label_pc_bf54:                                ; preds = %dec_label_pc_be18
  %v2_bf54 = inttoptr i32 %v1_bde8 to i32*
  %v3_bf54 = load i32, i32* %v2_bf54, align 4
  store i32 %v3_bf54, i32* %r0.global-to-local, align 4
  %v1_bf58 = add i32 %v4_bdd8, 848
  %v2_bf58 = inttoptr i32 %v1_bf58 to i32*
  %v3_bf58 = load i32, i32* %v2_bf58, align 4
  store i32 %v3_bf58, i32* %r2.global-to-local, align 4
  %v1_bf5c = add i32 %v4_bdd8, 868
  %v2_bf5c = inttoptr i32 %v1_bf5c to i32*
  %v3_bf5c = load i32, i32* %v2_bf5c, align 4
  %v2_bf60 = add i32 %v3_bf54, %v1_bde4
  store i32 %v2_bf60, i32* %r1.global-to-local, align 4
  %v1_bf64 = add i32 %v3_bf58, -1
  store i32 %v1_bf64, i32* @r2, align 4
  %v2_bf68 = sub i32 %v3_bf5c, %v2_bf60
  store i32 %v2_bf68, i32* %r3.global-to-local, align 4
  store i32 %v2_bf68, i32* %v2_bf5c, align 4
  %v1_bf70 = load i32, i32* @lr, align 4
  %v2_bf70 = add i32 %v1_bf70, 848
  %v3_bf70 = inttoptr i32 %v2_bf70 to i32*
  store i32 %v1_bf64, i32* %v3_bf70, align 4
  %v0_bf74 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf74 = load i32, i32* @r5, align 4
  %v2_bf74 = sub i32 %v1_bf74, %v0_bf74
  store i32 %v2_bf74, i32* %r0.global-to-local, align 4
  %v4_bf78 = call i32 @munmap(i32 %v2_bf74, i32 %v2_bf60, i32 %v1_bf64, i32 %v2_bf68)
  store i32 %v4_bf78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf7c

dec_label_pc_bf7c:                                ; preds = %bb17, %dec_label_pc_bf0c, %dec_label_pc_bf44, %dec_label_pc_bdf8, %dec_label_pc_bf54
  store i32 %v2_bd8c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_bf88 = load i32, i32* @r7, align 4
  %v2_bf88 = add i32 %v0_bf88, 24
  %v3_bf88 = inttoptr i32 %v2_bf88 to i32*
  %v4_bf88 = load i32, i32* %v3_bf88, align 4
  store i32 %v4_bf88, i32* @ip, align 4
  store i32 49044, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bf88)
  br label %dec_label_pc_bf94

dec_label_pc_bf94:                                ; preds = %entry, %dec_label_pc_bf7c
  store i32 %v3_bd80, i32* @r4, align 4
  store i32 %v6_bd80, i32* @r5, align 4
  store i32 %v9_bd80, i32* @r6, align 4
  store i32 %v12_bd80, i32* @r7, align 4
  store i32 %v18_bd80, i32* @lr, align 4
  ret i32 %v2_bd8c

; uselistorder directives
  uselistorder i32 %v0_bf2c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_beec, { 1, 0 }
  uselistorder i32 %v1_be2c, { 1, 0 }
  uselistorder i32 %v0_be2c, { 1, 0 }
  uselistorder i32 %v3_be00, { 1, 0 }
  uselistorder i32 %v1_bde4, { 1, 0, 2 }
  uselistorder i32 %v2_bde0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_bdd8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd88, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_bf94, { 1, 0 }
  uselistorder label %dec_label_pc_bf7c, { 4, 2, 0, 1, 3 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %dec_label_pc_bf0c, { 1, 0 }
  uselistorder label %dec_label_pc_becc, { 1, 0 }
  uselistorder label %dec_label_pc_bec0, { 1, 0 }
  uselistorder label %dec_label_pc_bebc, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_be70, { 1, 0 }
}

define i32 @function_bfa4(i32 %arg1) local_unnamed_addr {
dec_label_pc_bfa4:
  %v0_bfa4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bfa4, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_bfa4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_bfa4, %bb
  %v10_bfb8 = phi i32 [ %arg1, %dec_label_pc_bfa4 ], [ 0, %bb ]
  ret i32 %v10_bfb8

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_bfbc = load i32, i32* @r4, align 4
  store i32 %v3_bfbc, i32* %stack_var_-12, align 4
  %v6_bfbc = load i32, i32* @r5, align 4
  %v4_bfcc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_bfcc, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_bfcc, i32* @r0, align 4
  %v0_bfdc = call i32 @__malloc_consolidate()
  %v0_bfe0 = load i32, i32* @r4, align 4
  %v0_bfe4 = load i32, i32* @r5, align 4
  %v2_bfec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bfec, i32* @r4, align 4
  store i32 %v6_bfbc, i32* @r5, align 4
  %v2_bff0 = call i32 @__malloc_trim(i32 %v0_bfe0, i32 %v0_bfe4)
  %v0_bff4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bff4, label %bb, label %.thread

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_bff8 = phi i32 [ %v2_bff0, %entry ], [ 0, %bb ]
  ret i32 %v4_bff8

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  %v4_c014 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 16) to i32*), align 4
  store i32 49184, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_c014)
  %v2_c030 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v6_c03c = call i32 @__GI_sigprocmask(i32 1, i32 %v2_c030, i32 0, i32 32, i32 32, i32 0)
  %v0_c044 = load i32, i32* @r5, align 4
  %v2_c044 = add i32 %v0_c044, 1272
  %v3_c044 = inttoptr i32 %v2_c044 to i32*
  %v4_c044 = load i32, i32* %v3_c044, align 4
  %v2_c048 = icmp eq i32 %v4_c044, 0
  br i1 %v2_c048, label %dec_label_pc_c050, label %dec_label_pc_c090

dec_label_pc_c050:                                ; preds = %entry
  store i32 1, i32* %v3_c044, align 4
  br label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c0a0, %dec_label_pc_c050
  %v0_c05c = load i32, i32* @r5, align 4
  %v2_c05c = add i32 %v0_c05c, 176
  store i32 %v2_c05c, i32* @r4, align 4
  %v2_c068 = add i32 %v0_c05c, 36
  %v3_c068 = inttoptr i32 %v2_c068 to i32*
  %v4_c068 = load i32, i32* %v3_c068, align 4
  call void @__pseudo_branch(i32 %v4_c068)
  %v1_c078 = call i32 @__GI_raise(i32 6)
  %v0_c084 = load i32, i32* @r5, align 4
  %v2_c084 = add i32 %v0_c084, 16
  %v3_c084 = inttoptr i32 %v2_c084 to i32*
  %v4_c084 = load i32, i32* %v3_c084, align 4
  store i32 49296, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_c084)
  %v0_c094.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c090

dec_label_pc_c090:                                ; preds = %entry, %dec_label_pc_c058
  %v1_c0a8 = phi i32 [ %v0_c044, %entry ], [ %v0_c094.pre, %dec_label_pc_c058 ]
  %v2_c094 = add i32 %v1_c0a8, 1272
  %v3_c094 = inttoptr i32 %v2_c094 to i32*
  %v4_c094 = load i32, i32* %v3_c094, align 4
  %v7_c098 = icmp eq i32 %v4_c094, 1
  br i1 %v7_c098, label %dec_label_pc_c0a0, label %dec_label_pc_c0dc

dec_label_pc_c0a0:                                ; preds = %dec_label_pc_c090
  %v2_c0a0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_c0a0, i32* @r4, align 4
  store i32 2, i32* %v3_c094, align 4
  store i32 20, i32* @r2, align 4
  %v2_c0b8 = bitcast i32* %stack_var_-28 to i8*
  %v3_c0b8 = call i32 @__GI_memset(i8* %v2_c0b8, i32 0)
  %v3_c0d4 = call i32 @__libc_sigaction(i32 6, i32 %v2_c0a0, i32 0)
  br label %dec_label_pc_c058

dec_label_pc_c0dc:                                ; preds = %dec_label_pc_c090
  %v7_c0dc = icmp eq i32 %v4_c094, 2
  br i1 %v7_c0dc, label %dec_label_pc_c0e4, label %dec_label_pc_c0f0

dec_label_pc_c0e4:                                ; preds = %dec_label_pc_c0dc
  store i32 3, i32* %v3_c094, align 4
  %v0_c0ec = call i32 @abort()
  %v0_c0f0.pre = load i32, i32* @r5, align 4
  %v1_c0f0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_c0f0

dec_label_pc_c0f0:                                ; preds = %dec_label_pc_c0dc, %dec_label_pc_c0e4
  %v3_c0fc = phi i32 [ 1272, %dec_label_pc_c0dc ], [ %v1_c0f0.pre, %dec_label_pc_c0e4 ]
  %v2_c0fc = phi i32 [ %v1_c0a8, %dec_label_pc_c0dc ], [ %v0_c0f0.pre, %dec_label_pc_c0e4 ]
  %v2_c0f0 = add i32 %v2_c0fc, %v3_c0fc
  %v3_c0f0 = inttoptr i32 %v2_c0f0 to i32*
  %v4_c0f0 = load i32, i32* %v3_c0f0, align 4
  %v7_c0f4 = icmp eq i32 %v4_c0f0, 3
  br i1 %v7_c0f4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_c0f0
  store i32 4, i32* %v3_c0f0, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_c0f0, %bb
  call void @__pseudo_cond_branch(i1 %v7_c0f4, i32 ptrtoint (i32* @global_var_aa98.113 to i32))
  br label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %dec_label_pc_c108, %.thread2
  %v0_c108 = call i32 @abort()
  br label %dec_label_pc_c108

; uselistorder directives
  uselistorder i32* %v3_c094, { 1, 0, 2 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_c0f0, { 1, 0 }
  uselistorder label %dec_label_pc_c090, { 1, 0 }
}

define i32 @function_c114(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c114:
  %tmp = ptrtoint i16* %arg1 to i32
  %v0_c114 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c114, label %.thread1, label %.thread2

.thread1:                                         ; preds = %dec_label_pc_c114
  %v2_c114 = trunc i32 %tmp to i16
  store i16 %v2_c114, i16* %arg1, align 2
  call void @llvm.trap()
  unreachable

.thread2:                                         ; preds = %dec_label_pc_c114
  ret i32 %tmp
}

define i32 @random(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  %v4_c154 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c154)
  %v0_c168 = load i32, i32* @r4, align 4
  %v2_c168 = add i32 %v0_c168, 16
  %v3_c168 = inttoptr i32 %v2_c168 to i32*
  %v4_c168 = load i32, i32* %v3_c168, align 4
  call void @__pseudo_branch(i32 %v4_c168)
  %v2_c178 = ptrtoint i32* %stack_var_-20 to i32
  %v0_c17c = load i32, i32* @r4, align 4
  %v2_c17c = add i32 %v0_c17c, 352
  %v2_c180 = inttoptr i32 %v2_c17c to i32*
  %v3_c180 = call i32 @__GI_random_r(i32* %v2_c180, i32 %v2_c178)
  %v0_c190 = load i32, i32* @r4, align 4
  %v2_c190 = add i32 %v0_c190, 24
  %v3_c190 = inttoptr i32 %v2_c190 to i32*
  %v4_c190 = load i32, i32* %v3_c190, align 4
  call void @__pseudo_branch(i32 %v4_c190)
  %v3_c19c = load i32, i32* %stack_var_-20, align 4
  ret i32 %v3_c19c
}

define i32 @function_c1b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_c1b0:
  %v0_c1b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c1b0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c1b0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c1b0, %bb
  %v10_c1c4 = phi i32 [ %arg1, %dec_label_pc_c1b0 ], [ 0, %bb ]
  ret i32 %v10_c1c4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @setstate(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  store i32 %arg1, i32* @r5, align 4
  %v4_c1f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c1f8)
  %v0_c20c = load i32, i32* @r6, align 4
  %v2_c20c = add i32 %v0_c20c, 16
  %v3_c20c = inttoptr i32 %v2_c20c to i32*
  %v4_c20c = load i32, i32* %v3_c20c, align 4
  call void @__pseudo_branch(i32 %v4_c20c)
  %v0_c21c = load i32, i32* @r6, align 4
  %v2_c21c = add i32 %v0_c21c, 352
  %v0_c224 = load i32, i32* @r5, align 4
  %v1_c228 = add i32 %v0_c21c, 360
  %v2_c228 = inttoptr i32 %v1_c228 to i32*
  %v3_c228 = load i32, i32* %v2_c228, align 4
  store i32 %v3_c228, i32* @r4, align 4
  %v2_c22c = inttoptr i32 %v2_c21c to i32*
  %v3_c22c = call i32 @setstate_r(i32 %v0_c224, i32* %v2_c22c)
  %v1_c234 = icmp slt i32 %v3_c22c, 0
  %v3_c244 = load i32, i32* @r4, align 4
  %v4_c244 = add i32 %v3_c244, -4
  %storemerge = select i1 %v1_c234, i32 0, i32 %v4_c244
  %v0_c248 = load i32, i32* @r6, align 4
  %v2_c248 = add i32 %v0_c248, 24
  %v3_c248 = inttoptr i32 %v2_c248 to i32*
  %v4_c248 = load i32, i32* %v3_c248, align 4
  call void @__pseudo_branch(i32 %v4_c248)
  ret i32 %storemerge
}

define i32 @function_c268(i32 %arg1) local_unnamed_addr {
dec_label_pc_c268:
  %v0_c268 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c268, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c268
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c268, %bb
  %v10_c27c = phi i32 [ %arg1, %dec_label_pc_c268 ], [ 0, %bb ]
  ret i32 %v10_c27c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @sl, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  %v4_c2b8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c2b8)
  %v0_c2cc = load i32, i32* @r4, align 4
  %v2_c2cc = add i32 %v0_c2cc, 16
  %v3_c2cc = inttoptr i32 %v2_c2cc to i32*
  %v4_c2cc = load i32, i32* %v3_c2cc, align 4
  call void @__pseudo_branch(i32 %v4_c2cc)
  %v0_c2dc = load i32, i32* @r6, align 4
  %v0_c2e0 = load i32, i32* @r4, align 4
  %v2_c2e0 = add i32 %v0_c2e0, 352
  %v0_c2e4 = load i32, i32* @r7, align 4
  %v0_c2e8 = load i32, i32* @sl, align 4
  store i32 %v0_c2e8, i32* @r0, align 4
  %v1_c2ec = add i32 %v0_c2e0, 360
  %v2_c2ec = inttoptr i32 %v1_c2ec to i32*
  %v3_c2ec = load i32, i32* %v2_c2ec, align 4
  store i32 %v3_c2ec, i32* @r5, align 4
  %v4_c2f0 = inttoptr i32 %v0_c2e8 to i32*
  %v5_c2f0 = call i32 @__GI_initstate_r(i32* %v4_c2f0, i32 %v0_c2dc, i32 %v0_c2e4, i32 %v2_c2e0)
  %v0_c300 = load i32, i32* @r4, align 4
  %v2_c300 = add i32 %v0_c300, 24
  %v3_c300 = inttoptr i32 %v2_c300 to i32*
  %v4_c300 = load i32, i32* %v3_c300, align 4
  call void @__pseudo_branch(i32 %v4_c300)
  %v0_c30c = load i32, i32* @r5, align 4
  %v1_c30c = add i32 %v0_c30c, -4
  ret i32 %v1_c30c
}

define i32 @function_c328(i32 %arg1) local_unnamed_addr {
dec_label_pc_c328:
  %v0_c328 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c328, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c328
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c328, %bb
  %v10_c33c = phi i32 [ %arg1, %dec_label_pc_c328 ], [ 0, %bb ]
  ret i32 %v10_c33c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i32, align 4
  %v3_c340 = load i32, i32* @r4, align 4
  %v6_c340 = load i32, i32* @r5, align 4
  %v9_c340 = load i32, i32* @r6, align 4
  %v15_c340 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  %v2_c354 = ptrtoint i32* %stack_var_-40 to i32
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 200), i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v4_c370 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c370)
  %v0_c384 = load i32, i32* @r4, align 4
  %v2_c384 = add i32 %v0_c384, 16
  %v3_c384 = inttoptr i32 %v2_c384 to i32*
  %v4_c384 = load i32, i32* %v3_c384, align 4
  call void @__pseudo_branch(i32 %v4_c384)
  %v0_c394 = load i32, i32* @r6, align 4
  store i32 %v0_c394, i32* @r0, align 4
  %v0_c398 = load i32, i32* @r4, align 4
  %v2_c398 = add i32 %v0_c398, 352
  %v2_c39c = inttoptr i32 %v0_c394 to i32*
  %v3_c39c = call i32 @srandom_r(i32* %v2_c39c, i32 %v2_c398)
  %v0_c3b0 = load i32, i32* @r4, align 4
  %v2_c3b0 = add i32 %v0_c3b0, 24
  %v3_c3b0 = inttoptr i32 %v2_c3b0 to i32*
  %v4_c3b0 = load i32, i32* %v3_c3b0, align 4
  call void @__pseudo_branch(i32 %v4_c3b0)
  store i32 %v3_c340, i32* @r4, align 4
  store i32 %v6_c340, i32* @r5, align 4
  store i32 %v9_c340, i32* @r6, align 4
  store i32 %v15_c340, i32* @lr, align 4
  ret i32 %v2_c354
}

define i32 @function_c3cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_c3cc:
  %v0_c3cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c3cc, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c3cc
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c3cc, %bb
  %v10_c3e0 = phi i32 [ %arg1, %dec_label_pc_c3cc ], [ 0, %bb ]
  ret i32 %v10_c3e0

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_c3e4 = load i32, i32* @r4, align 4
  store i32 %v3_c3e4, i32* %stack_var_-20, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  %v1_c3ec = add i32 %tmp, 12
  %v2_c3ec = inttoptr i32 %v1_c3ec to i8*
  %v3_c3ec = load i8, i8* %v2_c3ec, align 1
  %v4_c3ec = zext i8 %v3_c3ec to i32
  store i32 %v4_c3ec, i32* %r1.global-to-local, align 4
  %v2_c3f0 = icmp eq i8 %v3_c3ec, 0
  store i1 %v2_c3f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c3f0, label %.thread5, label %.thread6

.thread5:                                         ; preds = %entry
  %v1_c3f812 = add i32 %arg1, 4
  store i32 %v1_c3f812, i32* %r6.global-to-local, align 4
  %v1_c3fc13 = add i32 %tmp, 8
  %v2_c3fc14 = inttoptr i32 %v1_c3fc13 to i32*
  %v3_c3fc15 = load i32, i32* %v2_c3fc14, align 4
  store i32 %v3_c3fc15, i32* %r0.global-to-local, align 4
  %v3_c418 = add i32 %v3_c3fc15, -4
  %v4_c418 = inttoptr i32 %v3_c418 to i32*
  store i32 %v4_c3ec, i32* %v4_c418, align 4
  br label %bb

.thread6:                                         ; preds = %entry
  %v2_c3f4 = add i32 %tmp, 4
  %v3_c3f4 = inttoptr i32 %v2_c3f4 to i32*
  %v4_c3f4 = load i32, i32* %v3_c3f4, align 4
  %v1_c3f8 = add i32 %arg1, 4
  store i32 %v1_c3f8, i32* %r6.global-to-local, align 4
  %v1_c3fc = add i32 %tmp, 8
  %v2_c3fc = inttoptr i32 %v1_c3fc to i32*
  %v3_c3fc = load i32, i32* %v2_c3fc, align 4
  store i32 %v3_c3fc, i32* %r0.global-to-local, align 4
  %v3_c404 = sub i32 %v4_c3f4, %v3_c3fc
  %v4_c408 = sdiv i32 %v3_c404, 4
  %v4_c40c = sext i8 %v3_c3ec to i32
  store i32 %v4_c40c, i32* %r1.global-to-local, align 4
  %v4_c414 = mul i32 %v4_c408, 5
  %v5_c414 = add i32 %v4_c414, %v4_c40c
  %v3_c41c = add i32 %v3_c3fc, -4
  %v4_c41c = inttoptr i32 %v3_c41c to i32*
  store i32 %v5_c414, i32* %v4_c41c, align 4
  br label %bb

bb:                                               ; preds = %.thread5, %.thread6
  %v0_c424 = load i32, i32* %r6.global-to-local, align 4
  %v1_c424 = add i32 %v0_c424, -4
  %v2_c424 = inttoptr i32 %v1_c424 to i32*
  %v3_c424 = load i32, i32* %v2_c424, align 4
  %v2_c42c = udiv i32 %v3_c424, 5
  %v3_c42c = urem i32 %v3_c424, 5
  store i32 %v2_c42c, i32* %r0.global-to-local, align 4
  store i32 %v3_c42c, i32* %r1.global-to-local, align 4
  %v2_c434 = icmp ugt i32 %v3_c42c, 3
  %v7_c434 = icmp eq i32 %v3_c42c, 4
  store i1 %v7_c434, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r5.global-to-local, align 4
  %v2_c43c = xor i1 %v7_c434, true
  %v3_c43c = and i1 %v2_c434, %v2_c43c
  br i1 %v3_c43c, label %dec_label_pc_c4a4, label %dec_label_pc_c440

dec_label_pc_c440:                                ; preds = %bb
  %v4_c448 = mul nuw nsw i32 %v3_c42c, 4
  %v5_c448 = add i32 %v4_c448, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37452)
  %v1_c44c = add i32 %v4_c448, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37432)
  %v2_c44c = inttoptr i32 %v1_c44c to i32*
  %v3_c44c = load i32, i32* %v2_c44c, align 4
  store i32 %v3_c44c, i32* %r5.global-to-local, align 4
  %v6_c450 = inttoptr i32 %v5_c448 to i32*
  %v7_c450 = load i32, i32* %v6_c450, align 4
  store i32 %v7_c450, i32* %r7.global-to-local, align 4
  %v2_c454 = icmp eq i32 %v3_c42c, 0
  store i1 %v2_c454, i1* %cpsr_z.global-to-local, align 1
  %v1_c458 = trunc i32 %v3_c44c to i8
  %v2_c458 = load i32, i32* %r4.global-to-local, align 4
  %v3_c458 = add i32 %v2_c458, 13
  %v4_c458 = inttoptr i32 %v3_c458 to i8*
  store i8 %v1_c458, i8* %v4_c458, align 1
  %v0_c45c = load i32, i32* %r7.global-to-local, align 4
  %v1_c45c = trunc i32 %v0_c45c to i8
  %v2_c45c = load i32, i32* %r4.global-to-local, align 4
  %v3_c45c = add i32 %v2_c45c, 14
  %v4_c45c = inttoptr i32 %v3_c45c to i8*
  store i8 %v1_c45c, i8* %v4_c45c, align 1
  %v0_c460 = load i32, i32* %r1.global-to-local, align 4
  %v1_c460 = trunc i32 %v0_c460 to i8
  %v2_c460 = load i32, i32* %r4.global-to-local, align 4
  %v3_c460 = add i32 %v2_c460, 12
  %v4_c460 = inttoptr i32 %v3_c460 to i8*
  store i8 %v1_c460, i8* %v4_c460, align 1
  %v0_c464 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c464, label %dec_label_pc_c490, label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %dec_label_pc_c440
  store i32 5, i32* %r1.global-to-local, align 4
  %v0_c46c = load i32, i32* %r6.global-to-local, align 4
  %v1_c46c = add i32 %v0_c46c, -4
  %v2_c46c = inttoptr i32 %v1_c46c to i32*
  %v3_c46c = load i32, i32* %v2_c46c, align 4
  %v2_c470 = sdiv i32 %v3_c46c, 5
  store i32 %v2_c470, i32* %r0.global-to-local, align 4
  %v4_c474 = mul i32 %v2_c470, 4
  %v5_c474 = add i32 %v4_c474, %v0_c46c
  %v1_c478 = load i32, i32* %r4.global-to-local, align 4
  %v2_c478 = add i32 %v1_c478, 4
  %v3_c478 = inttoptr i32 %v2_c478 to i32*
  store i32 %v5_c474, i32* %v3_c478, align 4
  %v0_c47c = load i32, i32* %r7.global-to-local, align 4
  %v1_c47c = load i32, i32* %r0.global-to-local, align 4
  %v2_c47c = add i32 %v1_c47c, %v0_c47c
  %v0_c480 = load i32, i32* %r5.global-to-local, align 4
  %v2_c484 = udiv i32 %v2_c47c, %v0_c480
  %v3_c484 = urem i32 %v2_c47c, %v0_c480
  store i32 %v2_c484, i32* %r0.global-to-local, align 4
  %v0_c488 = load i32, i32* %r6.global-to-local, align 4
  %v4_c488 = mul i32 %v3_c484, 4
  %v5_c488 = add i32 %v0_c488, %v4_c488
  store i32 %v5_c488, i32* %r1.global-to-local, align 4
  %v1_c48c = load i32, i32* %r4.global-to-local, align 4
  %v2_c48c = inttoptr i32 %v1_c48c to i32*
  store i32 %v5_c488, i32* %v2_c48c, align 4
  br label %dec_label_pc_c490

dec_label_pc_c490:                                ; preds = %dec_label_pc_c440, %dec_label_pc_c468
  %v0_c490 = load i32, i32* %r6.global-to-local, align 4
  %v1_c490 = load i32, i32* %r5.global-to-local, align 4
  %v4_c490 = mul i32 %v1_c490, 4
  %v5_c490 = add i32 %v4_c490, %v0_c490
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_c498 = load i32, i32* %r4.global-to-local, align 4
  %v2_c498 = add i32 %v1_c498, 16
  %v3_c498 = inttoptr i32 %v2_c498 to i32*
  store i32 %v5_c490, i32* %v3_c498, align 4
  %v0_c49c = load i32, i32* %r6.global-to-local, align 4
  %v1_c49c = load i32, i32* %r4.global-to-local, align 4
  %v2_c49c = add i32 %v1_c49c, 8
  %v3_c49c = inttoptr i32 %v2_c49c to i32*
  store i32 %v0_c49c, i32* %v3_c49c, align 4
  %v1_c4bc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c4b4

dec_label_pc_c4a4:                                ; preds = %bb
  %v0_c4a4 = call i32 @__GI___errno_location()
  %v2_c4ac = inttoptr i32 %v0_c4a4 to i32*
  store i32 22, i32* %v2_c4ac, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c4b4

dec_label_pc_c4b4:                                ; preds = %dec_label_pc_c490, %dec_label_pc_c4a4
  %v1_c4bc = phi i32 [ %v1_c4bc.pre, %dec_label_pc_c490 ], [ -1, %dec_label_pc_c4a4 ]
  %v2_c4b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_c4b8, i32* @r4, align 4
  ret i32 %v1_c4bc

; uselistorder directives
  uselistorder i32 %v0_c480, { 1, 0 }
  uselistorder i32 %v2_c47c, { 1, 0 }
  uselistorder i32 %v3_c424, { 1, 0 }
  uselistorder i32 %tmp, { 1, 2, 0, 4, 3, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 1, 2, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 0, 1, 2, 3, 8, 9, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c4b4, { 1, 0 }
  uselistorder label %dec_label_pc_c490, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c4c8 = load i32, i32* @r4, align 4
  store i32 %v3_c4c8, i32* %stack_var_-8, align 4
  %v1_c4cc = add i32 %tmp, 12
  %v2_c4cc = inttoptr i32 %v1_c4cc to i8*
  %v3_c4cc = load i8, i8* %v2_c4cc, align 1
  %v4_c4cc = sext i8 %v3_c4cc to i32
  store i32 %v4_c4cc, i32* %r3.global-to-local, align 4
  %v2_c4d0 = icmp eq i8 %v3_c4cc, 0
  store i32 %tmp, i32* %ip.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v1_c4dc = add i32 %tmp, 8
  %v2_c4dc = inttoptr i32 %v1_c4dc to i32*
  %v3_c4dc = load i32, i32* %v2_c4dc, align 4
  store i32 %v3_c4dc, i32* %lr.global-to-local, align 4
  br i1 %v2_c4d0, label %dec_label_pc_c4e4, label %dec_label_pc_c508

dec_label_pc_c4e4:                                ; preds = %entry
  %v1_c4e4 = inttoptr i32 %v3_c4dc to i32*
  %v2_c4e4 = load i32, i32* %v1_c4e4, align 4
  store i32 %v2_c4e4, i32* %r2.global-to-local, align 4
  %v2_c4ec = mul i32 %v2_c4e4, 1103515245
  %v1_c4f4 = add i32 %v2_c4ec, 12345
  %tmp6 = bitcast i32 %v1_c4f4 to float
  %tmp7 = call float @fabsf(float %tmp6)
  %v1_c4f8 = bitcast float %tmp7 to i32
  store i32 %v1_c4f8, i32* %r3.global-to-local, align 4
  store i32 %v1_c4f8, i32* %v1_c4e4, align 4
  %v0_c500 = load i32, i32* %r3.global-to-local, align 4
  %v2_c500 = inttoptr i32 %arg2 to i32*
  store i32 %v0_c500, i32* %v2_c500, align 4
  br label %dec_label_pc_c548

dec_label_pc_c508:                                ; preds = %entry
  %v2_c508 = load i32, i32* %arg1, align 4
  store i32 %v2_c508, i32* %r2.global-to-local, align 4
  %v1_c50c = add i32 %tmp, 4
  %v2_c50c = inttoptr i32 %v1_c50c to i32*
  %v3_c50c = load i32, i32* %v2_c50c, align 4
  store i32 %v3_c50c, i32* %r0.global-to-local, align 4
  %v1_c510 = inttoptr i32 %v2_c508 to i32*
  %v2_c510 = load i32, i32* %v1_c510, align 4
  store i32 %v2_c510, i32* %r1.global-to-local, align 4
  %v1_c514 = inttoptr i32 %v3_c50c to i32*
  %v2_c514 = load i32, i32* %v1_c514, align 4
  %v4_c514 = add i32 %v3_c50c, 4
  store i32 %v4_c514, i32* %r0.global-to-local, align 4
  %v2_c518 = add i32 %v2_c514, %v2_c510
  store i32 %v2_c518, i32* %r3.global-to-local, align 4
  store i32 %v2_c518, i32* %v1_c510, align 4
  %v3_c51c = load i32, i32* %r2.global-to-local, align 4
  %v4_c51c = add i32 %v3_c51c, 4
  store i32 %v4_c51c, i32* %r2.global-to-local, align 4
  %v0_c520 = load i32, i32* %ip.global-to-local, align 4
  %v1_c520 = add i32 %v0_c520, 16
  %v2_c520 = inttoptr i32 %v1_c520 to i32*
  %v3_c520 = load i32, i32* %v2_c520, align 4
  store i32 %v3_c520, i32* %r1.global-to-local, align 4
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v3_c524 = udiv i32 %v0_c524, 2
  store i32 %v3_c524, i32* %r3.global-to-local, align 4
  %v3_c528 = icmp ult i32 %v4_c51c, %v3_c520
  %v1_c52c = load i32, i32* %r4.global-to-local, align 4
  %v2_c52c = inttoptr i32 %v1_c52c to i32*
  store i32 %v3_c524, i32* %v2_c52c, align 4
  br i1 %v3_c528, label %dec_label_pc_c538, label %._crit_edge

._crit_edge:                                      ; preds = %dec_label_pc_c508
  %v1_c530 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_c530, i32* %r2.global-to-local, align 4
  %v0_c540.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_c538:                                ; preds = %dec_label_pc_c508
  %v0_c538 = load i32, i32* %r0.global-to-local, align 4
  %v1_c538 = load i32, i32* %r1.global-to-local, align 4
  %v3_c538 = icmp ult i32 %v0_c538, %v1_c538
  br i1 %v3_c538, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_c538
  %v1_c53c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_c53c, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_c538, %._crit_edge, %bb
  %v0_c540 = phi i32 [ %v0_c540.pre, %._crit_edge ], [ %v0_c538, %dec_label_pc_c538 ], [ %v1_c53c, %bb ]
  %v1_c540 = load i32, i32* %ip.global-to-local, align 4
  %v2_c540 = add i32 %v1_c540, 4
  %v3_c540 = inttoptr i32 %v2_c540 to i32*
  store i32 %v0_c540, i32* %v3_c540, align 4
  %v0_c544 = load i32, i32* %r2.global-to-local, align 4
  %v1_c544 = load i32, i32* %ip.global-to-local, align 4
  %v2_c544 = inttoptr i32 %v1_c544 to i32*
  store i32 %v0_c544, i32* %v2_c544, align 4
  br label %dec_label_pc_c548

dec_label_pc_c548:                                ; preds = %dec_label_pc_c4e4, %bb5
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c54c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c54c, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_c524, { 1, 0 }
  uselistorder i32 %v1_c4f8, { 1, 0 }
  uselistorder i32 %tmp, { 1, 3, 2, 0, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 6, 0 }
  uselistorder label %dec_label_pc_c548, { 1, 0 }
  uselistorder label %bb5, { 2, 0, 1 }
}

define i32 @srandom_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_c558 = load i32, i32* @r4, align 4
  store i32 %v3_c558, i32* %stack_var_-36, align 4
  %v1_c55c = add i32 %tmp, 12
  %v2_c55c = inttoptr i32 %v1_c55c to i8*
  %v3_c55c = load i8, i8* %v2_c55c, align 1
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_c56c = load i8, i8* %v2_c55c, align 1
  %tmp33 = icmp ugt i8 %v3_c55c, 4
  br i1 %tmp33, label %.dec_label_pc_c618_crit_edge, label %dec_label_pc_c578

.dec_label_pc_c618_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_c618

dec_label_pc_c578:                                ; preds = %entry
  %v0_c578 = load i32, i32* @r0, align 4
  %v2_c578 = icmp eq i32 %v0_c578, 0
  %v1_c57c = add i32 %tmp, 8
  %v2_c57c = inttoptr i32 %v1_c57c to i32*
  %v3_c57c = load i32, i32* %v2_c57c, align 4
  store i32 %v3_c57c, i32* %r6.global-to-local, align 4
  br i1 %v2_c578, label %bb, label %bb23

bb:                                               ; preds = %dec_label_pc_c578
  store i32 1, i32* @r0, align 4
  br label %bb23

bb23:                                             ; preds = %dec_label_pc_c578, %bb
  %v0_c588 = phi i32 [ %v0_c578, %dec_label_pc_c578 ], [ 1, %bb ]
  %v2_c584 = icmp eq i8 %v3_c56c, 0
  %v2_c588 = inttoptr i32 %v3_c57c to i32*
  store i32 %v0_c588, i32* %v2_c588, align 4
  br i1 %v2_c584, label %dec_label_pc_c614, label %dec_label_pc_c590

dec_label_pc_c590:                                ; preds = %bb23
  %v1_c590 = add i32 %tmp, 13
  %v2_c590 = inttoptr i32 %v1_c590 to i8*
  %v3_c590 = load i8, i8* %v2_c590, align 1
  %v4_c590 = sext i8 %v3_c590 to i32
  store i32 %v4_c590, i32* %sl.global-to-local, align 4
  store i32 16807, i32* %fp.global-to-local, align 4
  store i32 2836, i32* %sb.global-to-local, align 4
  %v0_c59c = load i32, i32* @r0, align 4
  store i32 %v0_c59c, i32* %r4.global-to-local, align 4
  %v0_c5a0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_c5a0, i32* %r8.global-to-local, align 4
  store i32 2, i32* %r7.global-to-local, align 4
  %v5_c5e025 = icmp sgt i8 %v3_c590, 1
  br i1 %v5_c5e025, label %dec_label_pc_c5ac, label %dec_label_pc_c5e4

dec_label_pc_c5ac:                                ; preds = %dec_label_pc_c590, %dec_label_pc_c5ac.dec_label_pc_c5ac_crit_edge
  %v1_c5c0 = phi i32 [ %v1_c5c0.pre, %dec_label_pc_c5ac.dec_label_pc_c5ac_crit_edge ], [ 2836, %dec_label_pc_c590 ]
  %v1_c5b4 = phi i32 [ %v1_c5b4.pre, %dec_label_pc_c5ac.dec_label_pc_c5ac_crit_edge ], [ 16807, %dec_label_pc_c590 ]
  %v0_c5b027 = phi i32 [ %v0_c5d4.pre, %dec_label_pc_c5ac.dec_label_pc_c5ac_crit_edge ], [ %v0_c59c, %dec_label_pc_c590 ]
  %v1_c5cc26 = phi i32 [ %v5_c5cc, %dec_label_pc_c5ac.dec_label_pc_c5ac_crit_edge ], [ %v0_c5a0, %dec_label_pc_c590 ]
  %v3_c5ac = urem i32 %v0_c5b027, ptrtoint (i32* @global_var_1f31d.149 to i32)
  %v2_c5b4 = mul i32 %v1_c5b4, %v3_c5ac
  %v2_c5bc = sdiv i32 %v0_c5b027, ptrtoint (i32* @global_var_1f31d.149 to i32)
  %v2_c5c0 = mul i32 %v1_c5c0, %v2_c5bc
  %v2_c5c4 = sub i32 %v2_c5b4, %v2_c5c0
  %v8_c5c4 = icmp slt i32 %v2_c5c4, 0
  %v2_c5c8 = add i32 %v2_c5c4, 2147483647
  %v2_c5c8.v2_c5c4 = select i1 %v8_c5c4, i32 %v2_c5c8, i32 %v2_c5c4
  store i32 %v2_c5c8.v2_c5c4, i32* %r4.global-to-local, align 4
  %v2_c5cc = add i32 %v1_c5cc26, 4
  %v3_c5cc = inttoptr i32 %v2_c5cc to i32*
  store i32 %v2_c5c8.v2_c5c4, i32* %v3_c5cc, align 4
  %v4_c5cc = load i32, i32* %r8.global-to-local, align 4
  %v5_c5cc = add i32 %v4_c5cc, 4
  store i32 %v5_c5cc, i32* %r8.global-to-local, align 4
  %v0_c5d0.pre = load i32, i32* %r7.global-to-local, align 4
  %v1_c5d0.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_c5d4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_c5dc = add i32 %v0_c5d0.pre, 1
  store i32 %v1_c5dc, i32* %r7.global-to-local, align 4
  %v5_c5e0 = icmp slt i32 %v0_c5d0.pre, %v1_c5d0.pre
  br i1 %v5_c5e0, label %dec_label_pc_c5ac.dec_label_pc_c5ac_crit_edge, label %dec_label_pc_c5d0.dec_label_pc_c5e4_crit_edge

dec_label_pc_c5ac.dec_label_pc_c5ac_crit_edge:    ; preds = %dec_label_pc_c5ac
  %v1_c5b4.pre = load i32, i32* %fp.global-to-local, align 4
  %v1_c5c0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_c5ac

dec_label_pc_c5d0.dec_label_pc_c5e4_crit_edge:    ; preds = %dec_label_pc_c5ac
  %v0_c5f4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c5e4

dec_label_pc_c5e4:                                ; preds = %dec_label_pc_c5d0.dec_label_pc_c5e4_crit_edge, %dec_label_pc_c590
  %v0_c5f4 = phi i32 [ %v0_c5f4.pre, %dec_label_pc_c5d0.dec_label_pc_c5e4_crit_edge ], [ %v0_c5a0, %dec_label_pc_c590 ]
  %v0_c5e8.lcssa = phi i32 [ %v1_c5d0.pre, %dec_label_pc_c5d0.dec_label_pc_c5e4_crit_edge ], [ %v4_c590, %dec_label_pc_c590 ]
  %v2_c5e8 = mul i32 %v0_c5e8.lcssa, 10
  store i32 %v2_c5e8, i32* @r4, align 4
  %v0_c5ec = load i32, i32* %r5.global-to-local, align 4
  %v1_c5ec = add i32 %v0_c5ec, 14
  %v2_c5ec = inttoptr i32 %v1_c5ec to i8*
  %v3_c5ec = load i8, i8* %v2_c5ec, align 1
  %v4_c5ec = sext i8 %v3_c5ec to i32
  %v2_c5f0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_c5f0, i32* %r7.global-to-local, align 4
  %v4_c5f4 = mul nsw i32 %v4_c5ec, 4
  %v5_c5f4 = add i32 %v0_c5f4, %v4_c5f4
  %v1_c5f8 = inttoptr i32 %v0_c5ec to i32*
  store i32 %v5_c5f4, i32* %v1_c5f8, align 4
  %v3_c5f8 = add i32 %v0_c5ec, 4
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i32*
  %v5_c5f8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v5_c5f8, i32* %v4_c5f8, align 4
  br label %dec_label_pc_c604

dec_label_pc_c600:                                ; preds = %dec_label_pc_c604
  %v0_c608 = load i32, i32* %r5.global-to-local, align 4
  %v2_c600 = inttoptr i32 %v0_c608 to i32*
  %v3_c600 = call i32 @__GI_random_r(i32* %v2_c600, i32 %v2_c5f0)
  br label %dec_label_pc_c604

dec_label_pc_c604:                                ; preds = %dec_label_pc_c5e4, %dec_label_pc_c600
  %v0_c604 = load i32, i32* @r4, align 4
  %v1_c604 = add i32 %v0_c604, -1
  store i32 %v1_c604, i32* @r4, align 4
  %v6_c604 = icmp slt i32 %v1_c604, 0
  br i1 %v6_c604, label %dec_label_pc_c614, label %dec_label_pc_c600

dec_label_pc_c614:                                ; preds = %dec_label_pc_c604, %bb23
  %v2_c61c.pre = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_c618

dec_label_pc_c618:                                ; preds = %.dec_label_pc_c618_crit_edge, %dec_label_pc_c614
  %v2_c61c = phi i32 [ %v3_c558, %.dec_label_pc_c618_crit_edge ], [ %v2_c61c.pre, %dec_label_pc_c614 ]
  %v1_c620 = phi i32 [ -1, %.dec_label_pc_c618_crit_edge ], [ 0, %dec_label_pc_c614 ]
  store i32 %v2_c61c, i32* @r4, align 4
  ret i32 %v1_c620

; uselistorder directives
  uselistorder i32 %v1_c604, { 1, 0 }
  uselistorder i32 %v0_c5ec, { 1, 0, 2 }
  uselistorder i32 %v0_c5d0.pre, { 1, 0 }
  uselistorder i32 %v5_c5cc, { 1, 0 }
  uselistorder i32 %v0_c5b027, { 1, 0 }
  uselistorder i32 %v0_c5a0, { 1, 0, 2 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f31d.149 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_c618, { 1, 0 }
  uselistorder label %dec_label_pc_c604, { 1, 0 }
  uselistorder label %dec_label_pc_c5ac, { 1, 0 }
  uselistorder label %bb23, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c624:
  %v0_c624 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c624, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c624
  %v2_c624 = load i32, i32* @r7, align 4
  %v5_c624 = udiv i32 %v2_c624, 8
  %v6_c624 = and i32 %v5_c624, %arg1
  %v3_c628 = load i32, i32* @fp, align 4
  %v8_c628 = shl i32 %v6_c624, %v3_c628
  %v9_c628 = and i32 %v8_c628, %arg1
  %v2_c62c = load i32, i32* @sp, align 4
  %v8_c62c = shl i32 %v2_c62c, %arg3
  %v9_c62c = and i32 %v8_c62c, %arg2
  call void @__pseudo_branch(i32 %v9_c62c)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c624, %bb
  %v10_c62c = phi i32 [ %arg1, %dec_label_pc_c624 ], [ %v9_c628, %bb ]
  ret i32 %v10_c62c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_initstate_r(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v3_c630 = load i32, i32* @r4, align 4
  %v6_c630 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r5, align 4
  %tmp28 = icmp ult i32 %arg2, 128
  br i1 %tmp28, label %dec_label_pc_c660, label %dec_label_pc_c650

dec_label_pc_c650:                                ; preds = %entry
  %v2_c650 = icmp ugt i32 %arg2, 254
  %v7_c650 = icmp eq i32 %arg2, 255
  %v2_c654 = xor i1 %v7_c650, true
  %v3_c654 = and i1 %v2_c650, %v2_c654
  br i1 %v3_c654, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_c650
  store i32 4, i32* @r4, align 4
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_c650, %bb
  %v1_c68c7 = phi i32 [ %v3_c630, %dec_label_pc_c650 ], [ 4, %bb ]
  %v2_c658 = xor i1 %v2_c650, true
  %v3_c658 = or i1 %v7_c650, %v2_c658
  br i1 %v3_c658, label %bb22, label %bb26

bb22:                                             ; preds = %bb21
  store i32 3, i32* @r4, align 4
  br label %bb26

dec_label_pc_c660:                                ; preds = %entry
  %tmp29 = icmp ugt i32 %arg2, 31
  br i1 %tmp29, label %dec_label_pc_c678, label %dec_label_pc_c668

dec_label_pc_c668:                                ; preds = %dec_label_pc_c660
  %tmp30 = icmp ugt i32 %arg2, 7
  br i1 %tmp30, label %.thread10, label %dec_label_pc_c6e8

.thread10:                                        ; preds = %dec_label_pc_c668
  store i32 0, i32* @r4, align 4
  br label %bb26

dec_label_pc_c678:                                ; preds = %dec_label_pc_c660
  %v2_c678 = icmp ugt i32 %arg2, 62
  %v7_c678 = icmp eq i32 %arg2, 63
  %v2_c67c = xor i1 %v7_c678, true
  %v3_c67c = and i1 %v2_c678, %v2_c67c
  br i1 %v3_c67c, label %bb23, label %bb24

bb23:                                             ; preds = %dec_label_pc_c678
  store i32 2, i32* @r4, align 4
  br label %bb24

bb24:                                             ; preds = %dec_label_pc_c678, %bb23
  %v1_c68c6 = phi i32 [ %v3_c630, %dec_label_pc_c678 ], [ 2, %bb23 ]
  %v2_c680 = xor i1 %v2_c678, true
  %v3_c680 = or i1 %v7_c678, %v2_c680
  br i1 %v3_c680, label %bb25, label %bb26

bb25:                                             ; preds = %bb24
  store i32 1, i32* @r4, align 4
  br label %bb26

bb26:                                             ; preds = %.thread10, %bb22, %bb21, %bb24, %bb25
  %v1_c698 = phi i32 [ 3, %bb22 ], [ %v1_c68c7, %bb21 ], [ %v1_c68c6, %bb24 ], [ 1, %bb25 ], [ 0, %.thread10 ]
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37452), i32* %r3.global-to-local, align 4
  %v4_c68c = mul i32 %v1_c698, 4
  %v5_c68c = add i32 %v4_c68c, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37452)
  store i32 %v5_c68c, i32* %r2.global-to-local, align 4
  %v1_c690 = add i32 %v4_c68c, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37432)
  %v2_c690 = inttoptr i32 %v1_c690 to i32*
  %v3_c690 = load i32, i32* %v2_c690, align 4
  store i32 %v3_c690, i32* %r1.global-to-local, align 4
  %v1_c694 = add i32 %tmp, 4
  store i32 %v1_c694, i32* @r6, align 4
  %v6_c698 = inttoptr i32 %v5_c68c to i32*
  %v7_c698 = load i32, i32* %v6_c698, align 4
  store i32 %v7_c698, i32* %r2.global-to-local, align 4
  %v4_c69c = mul i32 %v3_c690, 4
  %v5_c69c = add i32 %v4_c69c, %v1_c694
  store i32 %v5_c69c, i32* %r3.global-to-local, align 4
  %v2_c6a0 = add i32 %arg3, 16
  %v3_c6a0 = inttoptr i32 %v2_c6a0 to i32*
  store i32 %v5_c69c, i32* %v3_c6a0, align 4
  %v0_c6a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6a4 = trunc i32 %v0_c6a4 to i8
  %v2_c6a4 = load i32, i32* @r5, align 4
  %v3_c6a4 = add i32 %v2_c6a4, 14
  %v4_c6a4 = inttoptr i32 %v3_c6a4 to i8*
  store i8 %v1_c6a4, i8* %v4_c6a4, align 1
  %v0_c6a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c6a8 = trunc i32 %v0_c6a8 to i8
  %v2_c6a8 = load i32, i32* @r5, align 4
  %v3_c6a8 = add i32 %v2_c6a8, 13
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i8*
  store i8 %v1_c6a8, i8* %v4_c6a8, align 1
  %v0_c6ac = load i32, i32* @r4, align 4
  %v1_c6ac = trunc i32 %v0_c6ac to i8
  %v2_c6ac = load i32, i32* @r5, align 4
  %v3_c6ac = add i32 %v2_c6ac, 12
  %v4_c6ac = inttoptr i32 %v3_c6ac to i8*
  store i8 %v1_c6ac, i8* %v4_c6ac, align 1
  %v0_c6b0 = load i32, i32* @r6, align 4
  %v1_c6b0 = load i32, i32* @r5, align 4
  %v2_c6b0 = add i32 %v1_c6b0, 8
  %v3_c6b0 = inttoptr i32 %v2_c6b0 to i32*
  store i32 %v0_c6b0, i32* %v3_c6b0, align 4
  %v0_c6b4 = load i32, i32* @r5, align 4
  store i32 %v0_c6b4, i32* %r1.global-to-local, align 4
  %v0_c6b8 = load i32, i32* @r0, align 4
  %v2_c6b8 = inttoptr i32 %v0_c6b8 to i32*
  %v3_c6b8 = call i32 @srandom_r(i32* %v2_c6b8, i32 %v0_c6b4)
  store i32 %v3_c6b8, i32* %r0.global-to-local, align 4
  %v0_c6bc = load i32, i32* @r4, align 4
  %v2_c6bc = icmp eq i32 %v0_c6bc, 0
  br i1 %v2_c6bc, label %bb27, label %.thread4

bb27:                                             ; preds = %bb26
  %v1_c6d812 = load i32, i32* @r7, align 4
  %v2_c6d813 = inttoptr i32 %v1_c6d812 to i32*
  store i32 0, i32* %v2_c6d813, align 4
  %v1_c6dc = load i32, i32* @r4, align 4
  store i32 %v1_c6dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c700

.thread4:                                         ; preds = %bb26
  %v1_c6c0 = load i32, i32* @r5, align 4
  %v2_c6c0 = add i32 %v1_c6c0, 4
  %v3_c6c0 = inttoptr i32 %v2_c6c0 to i32*
  %v4_c6c0 = load i32, i32* %v3_c6c0, align 4
  %v1_c6c4 = load i32, i32* @r6, align 4
  %v3_c6c4 = sub i32 %v4_c6c0, %v1_c6c4
  %v4_c6c8 = sdiv i32 %v3_c6c4, 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_c6d0 = mul i32 %v4_c6c8, 5
  %v5_c6d0 = add i32 %v4_c6d0, %v0_c6bc
  store i32 %v5_c6d0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_c6d8 = load i32, i32* @r7, align 4
  %v2_c6d8 = inttoptr i32 %v1_c6d8 to i32*
  store i32 0, i32* %v2_c6d8, align 4
  %v1_c6e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_c6e0 = load i32, i32* @r7, align 4
  %v3_c6e0 = inttoptr i32 %v2_c6e0 to i32*
  store i32 %v1_c6e0, i32* %v3_c6e0, align 4
  %v1_c708.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c700

dec_label_pc_c6e8:                                ; preds = %dec_label_pc_c668
  %v0_c6e8 = call i32 @__GI___errno_location()
  store i32 %v0_c6e8, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r4.global-to-local, align 4
  %v2_c6f0 = inttoptr i32 %v0_c6e8 to i32*
  store i32 22, i32* %v2_c6f0, align 4
  %v0_c6f4 = call i32 @__GI___errno_location()
  %v0_c6f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_c6f8 = inttoptr i32 %v0_c6f4 to i32*
  store i32 %v0_c6f8, i32* %v2_c6f8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c700

dec_label_pc_c700:                                ; preds = %bb27, %.thread4, %dec_label_pc_c6e8
  %v1_c708 = phi i32 [ %v1_c708.pre, %.thread4 ], [ %v1_c6dc, %bb27 ], [ -1, %dec_label_pc_c6e8 ]
  store i32 %v3_c630, i32* @r4, align 4
  store i32 %v6_c630, i32* @r5, align 4
  ret i32 %v1_c708

; uselistorder directives
  uselistorder i1 %v7_c678, { 1, 0 }
  uselistorder i1 %v7_c650, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37452), { 1, 0, 2 }
  uselistorder i32 %arg2, { 3, 4, 0, 1, 6, 5, 2, 7 }
  uselistorder label %dec_label_pc_c700, { 2, 1, 0 }
  uselistorder label %bb26, { 4, 3, 0, 1, 2 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_c724 = call i32 @strtol()
  ret i32 %v0_c724
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_c740 = call i32 @_stdlib_strto_l()
  ret i32 %v0_c740
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v0_c764 = load i32, i32* @r1, align 4
  store i32 %v0_c764, i32* %fp.global-to-local, align 4
  %v0_c768 = load i32, i32* @r2, align 4
  store i32 %v0_c768, i32* %r5.global-to-local, align 4
  %v0_c76c = load i32, i32* @r0, align 4
  store i32 %v0_c76c, i32* %r4.global-to-local, align 4
  %v0_c770 = load i32, i32* @r3, align 4
  br label %dec_label_pc_c77c

dec_label_pc_c778:                                ; preds = %dec_label_pc_c77c
  %v1_c778 = add i32 %v0_c7b4, 1
  store i32 %v1_c778, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c77c

dec_label_pc_c77c:                                ; preds = %entry, %dec_label_pc_c778
  %v0_c7b4 = phi i32 [ %v0_c76c, %entry ], [ %v1_c778, %dec_label_pc_c778 ]
  %v1_c77c = inttoptr i32 %v0_c7b4 to i8*
  %v2_c77c = load i8, i8* %v1_c77c, align 1
  %v3_c77c = zext i8 %v2_c77c to i32
  %v4_c780 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 140) to i32*), align 4
  %v2_c784 = mul nuw nsw i32 %v3_c77c, 2
  %v2_c788 = add i32 %v2_c784, %v4_c780
  %v3_c788 = inttoptr i32 %v2_c788 to i16*
  %v4_c788 = load i16, i16* %v3_c788, align 2
  %v1_c78c = and i16 %v4_c788, 32
  %v2_c78c = icmp eq i16 %v1_c78c, 0
  br i1 %v2_c78c, label %dec_label_pc_c794, label %dec_label_pc_c778

dec_label_pc_c794:                                ; preds = %dec_label_pc_c77c
  %v7_c794 = icmp eq i8 %v2_c77c, 43
  br i1 %v7_c794, label %dec_label_pc_c7b4, label %dec_label_pc_c79c

dec_label_pc_c79c:                                ; preds = %dec_label_pc_c794
  %v7_c79c = icmp eq i8 %v2_c77c, 45
  br i1 %v7_c79c, label %dec_label_pc_c7b4, label %bb

bb:                                               ; preds = %dec_label_pc_c79c
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c7b8

dec_label_pc_c7b4:                                ; preds = %dec_label_pc_c794, %dec_label_pc_c79c
  %storemerge47 = phi i32 [ 1, %dec_label_pc_c79c ], [ 0, %dec_label_pc_c794 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_c7b4 = add i32 %v0_c7b4, 1
  store i32 %v1_c7b4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c7b8

dec_label_pc_c7b8:                                ; preds = %bb, %dec_label_pc_c7b4
  %v0_c7d8 = phi i32 [ %v0_c7b4, %bb ], [ %v1_c7b4, %dec_label_pc_c7b4 ]
  %v1_c7b8 = and i32 %v0_c768, -17
  %v3_c7b8 = icmp eq i32 %v1_c7b8, 0
  br i1 %v3_c7b8, label %dec_label_pc_c7c4, label %bb60

bb60:                                             ; preds = %dec_label_pc_c7b8
  br label %bb64

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7b8
  %v1_c7c4 = inttoptr i32 %v0_c7d8 to i8*
  %v2_c7c4 = load i8, i8* %v1_c7c4, align 1
  %v7_c7c8 = icmp eq i8 %v2_c7c4, 48
  %v1_c7cc = add i32 %v0_c768, 10
  store i32 %v1_c7cc, i32* %r5.global-to-local, align 4
  br i1 %v7_c7c8, label %dec_label_pc_c7d8, label %bb61

bb61:                                             ; preds = %dec_label_pc_c7c4
  br label %.thread8

dec_label_pc_c7d8:                                ; preds = %dec_label_pc_c7c4
  %v1_c7d8 = add i32 %v0_c7d8, 1
  %v2_c7d8 = inttoptr i32 %v1_c7d8 to i8*
  %v3_c7d8 = load i8, i8* %v2_c7d8, align 1
  %v4_c7d8 = zext i8 %v3_c7d8 to i32
  store i32 %v1_c7d8, i32* %r4.global-to-local, align 4
  %v1_c7dc = or i32 %v4_c7d8, 32
  %v7_c7e0 = icmp eq i32 %v1_c7dc, 120
  %v1_c7e4 = add i32 %v0_c768, 8
  store i32 %v1_c7e4, i32* %r5.global-to-local, align 4
  br i1 %v7_c7e0, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_c7d8
  %v3_c7f0 = mul i32 %v1_c7e4, 2
  store i32 %v3_c7f0, i32* %r5.global-to-local, align 4
  %v2_c7f4 = add i32 %v0_c7d8, 2
  store i32 %v2_c7f4, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_c7d8, %bb61, %bb62
  %v1_c8c030 = phi i32 [ %v0_c76c, %bb61 ], [ %v1_c7d8, %bb62 ], [ %v1_c7d8, %dec_label_pc_c7d8 ]
  %v0_c84421 = phi i32 [ %v0_c7d8, %bb61 ], [ %v2_c7f4, %bb62 ], [ %v1_c7d8, %dec_label_pc_c7d8 ]
  %v0_c7f8 = phi i32 [ %v1_c7cc, %bb61 ], [ %v3_c7f0, %bb62 ], [ %v1_c7e4, %dec_label_pc_c7d8 ]
  %v5_c7fc = icmp slt i32 %v0_c7f8, 16
  br i1 %v5_c7fc, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_c8c029 = phi i32 [ %v0_c76c, %bb60 ], [ %v1_c8c030, %.thread8 ], [ %v1_c8c030, %bb63 ]
  %v0_c84420 = phi i32 [ %v0_c7d8, %bb60 ], [ %v0_c84421, %.thread8 ], [ %v0_c84421, %bb63 ]
  %v0_c824 = phi i32 [ %v0_c768, %bb60 ], [ %v0_c7f8, %.thread8 ], [ 16, %bb63 ]
  %v1_c800 = add i32 %v0_c824, -2
  %tmp = icmp ugt i32 %v1_c800, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_c810

.thread:                                          ; preds = %bb64
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c810:                                ; preds = %bb64
  %v2_c818 = udiv i32 -1, %v0_c824
  %v3_c818 = urem i32 -1, %v0_c824
  %v1_c828 = urem i32 %v3_c818, 256
  store i32 %v1_c828, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v2_c818, i32* %r8.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_c844

dec_label_pc_c840:                                ; preds = %bb71, %dec_label_pc_c8a0
  %v0_c840 = phi i32 [ %v1_c88044, %bb71 ], [ %v0_c840.pre, %dec_label_pc_c8a0 ]
  br label %dec_label_pc_c844

dec_label_pc_c844:                                ; preds = %dec_label_pc_c810, %dec_label_pc_c840
  %v1_c8c027 = phi i32 [ %v1_c8c029, %dec_label_pc_c810 ], [ %v0_c840, %dec_label_pc_c840 ]
  %v0_c880 = phi i32 [ %v0_c84420, %dec_label_pc_c810 ], [ %v0_c840, %dec_label_pc_c840 ]
  %v1_c844 = inttoptr i32 %v0_c880 to i8*
  %v2_c844 = load i8, i8* %v1_c844, align 1
  %v3_c844 = zext i8 %v2_c844 to i32
  %v1_c848 = add nsw i32 %v3_c844, -48
  %v1_c84c = urem i32 %v1_c848, 256
  %v1_c854 = or i32 %v3_c844, 32
  %tmp79 = icmp ult i32 %v1_c84c, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_c85c

dec_label_pc_c85c:                                ; preds = %dec_label_pc_c844
  %tmp80 = icmp ugt i32 %v1_c854, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_c85c
  %v1_c860 = add nsw i32 %v1_c854, -87
  %v5_c868 = urem i32 %v1_c860, 256
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_c844, %dec_label_pc_c85c, %bb65
  %v3_c898 = phi i32 [ %v1_c84c, %dec_label_pc_c844 ], [ 40, %dec_label_pc_c85c ], [ %v5_c868, %bb65 ]
  %v1_c86c = load i32, i32* %r5.global-to-local, align 4
  %v6_c870 = icmp slt i32 %v3_c898, %v1_c86c
  br i1 %v6_c870, label %dec_label_pc_c874, label %dec_label_pc_c8bc.loopexit

dec_label_pc_c874:                                ; preds = %bb66
  %v0_c874 = load i32, i32* @ip, align 4
  %v1_c874 = load i32, i32* %r8.global-to-local, align 4
  %v9_c874 = icmp eq i32 %v0_c874, %v1_c874
  br i1 %v9_c874, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_c874
  %v1_c88040 = add i32 %v0_c880, 1
  store i32 %v1_c88040, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c888

bb67:                                             ; preds = %dec_label_pc_c874
  %v3_c874 = icmp ult i32 %v0_c874, %v1_c874
  %v1_c880 = add i32 %v0_c880, 1
  store i32 %v1_c880, i32* %r4.global-to-local, align 4
  br i1 %v3_c874, label %dec_label_pc_c888, label %dec_label_pc_c8a0

dec_label_pc_c888:                                ; preds = %bb67, %.thread39
  %v1_c88044 = phi i32 [ %v1_c88040, %.thread39 ], [ %v1_c880, %bb67 ]
  %v4_c8902443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_c888 = load i32, i32* %sl.global-to-local, align 4
  %v3_c888 = icmp uge i32 %v3_c898, %v1_c888
  %v9_c888 = icmp eq i32 %v3_c898, %v1_c888
  %v2_c88c = xor i1 %v3_c888, true
  %v3_c88c = or i1 %v9_c888, %v2_c88c
  br i1 %v3_c88c, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_c888
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_c888, %bb68
  %v4_c890 = phi i32 [ %v4_c8902443, %dec_label_pc_c888 ], [ 0, %bb68 ]
  %v2_c890 = xor i1 %v9_c888, true
  %v3_c890 = and i1 %v3_c888, %v2_c890
  br i1 %v3_c890, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_c890 = urem i32 %v4_c890, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_c894 = phi i32 [ %v5_c890, %bb70 ], [ %v4_c890, %bb69 ]
  %v2_c894 = icmp eq i32 %v0_c894, 0
  br i1 %v2_c894, label %bb71, label %dec_label_pc_c8a0

bb71:                                             ; preds = %thread-pre-split
  %v4_c898 = mul i32 %v0_c874, %v1_c86c
  %v5_c898 = add i32 %v4_c898, %v3_c898
  store i32 %v5_c898, i32* @ip, align 4
  br label %dec_label_pc_c840

dec_label_pc_c8a0:                                ; preds = %bb67, %thread-pre-split
  %v0_c8a0 = call i32 @__GI___errno_location()
  %v0_c8a8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c8a8, i32* @ip, align 4
  %v0_c8ac = load i32, i32* %r7.global-to-local, align 4
  %v2_c8ac = and i32 %v0_c8ac, %v0_c770
  store i32 %v2_c8ac, i32* %r7.global-to-local, align 4
  %v2_c8b4 = inttoptr i32 %v0_c8a0 to i32*
  store i32 34, i32* %v2_c8b4, align 4
  %v0_c840.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c840

dec_label_pc_c8bc.loopexit:                       ; preds = %bb66
  %v0_c8bc.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %.thread, %dec_label_pc_c8bc.loopexit
  %v1_c8c0 = phi i32 [ %v1_c8c027, %dec_label_pc_c8bc.loopexit ], [ %v1_c8c029, %.thread ]
  %v2_c8c0 = phi i32 [ %v0_c8bc.pre, %dec_label_pc_c8bc.loopexit ], [ %v0_c764, %.thread ]
  %v2_c8bc = icmp eq i32 %v2_c8c0, 0
  br i1 %v2_c8bc, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_c8bc
  %v3_c8c0 = inttoptr i32 %v2_c8c0 to i32*
  store i32 %v1_c8c0, i32* %v3_c8c0, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_c8bc, %bb72
  %v0_c8c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_c8c8 = icmp eq i32 %v0_c8c8, 0
  %. = select i1 %v2_c8c8, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_c8d4 = icmp eq i32 %v0_c770, 0
  %v0_c8f8.pre.pre = load i32, i32* @ip, align 4
  br i1 %v2_c8d4, label %dec_label_pc_c8f0, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_c8f8.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_c8e0, label %dec_label_pc_c8f0

dec_label_pc_c8e0:                                ; preds = %bb76
  %v0_c8e0 = call i32 @__GI___errno_location()
  %v2_c8e8 = inttoptr i32 %v0_c8e0 to i32*
  store i32 34, i32* %v2_c8e8, align 4
  %v0_c8ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c8ec, i32* @ip, align 4
  %v0_c8f0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c8f0

dec_label_pc_c8f0:                                ; preds = %bb76, %bb73, %dec_label_pc_c8e0
  %v0_c8f8.pre = phi i32 [ %v0_c8f8.pre.pre, %bb76 ], [ %v0_c8ec, %dec_label_pc_c8e0 ], [ %v0_c8f8.pre.pre, %bb73 ]
  %v0_c8f0 = phi i32 [ %v0_c8c8, %bb76 ], [ %v0_c8f0.pre, %dec_label_pc_c8e0 ], [ %v0_c8c8, %bb73 ]
  %v2_c8f0 = icmp eq i32 %v0_c8f0, 0
  br i1 %v2_c8f0, label %dec_label_pc_c8f0._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_c8f0
  %v2_c8f4 = sub i32 0, %v0_c8f8.pre
  store i32 %v2_c8f4, i32* @ip, align 4
  br label %dec_label_pc_c8f0._crit_edge

dec_label_pc_c8f0._crit_edge:                     ; preds = %dec_label_pc_c8f0, %bb77
  %v0_c8f8 = phi i32 [ %v2_c8f4, %bb77 ], [ %v0_c8f8.pre, %dec_label_pc_c8f0 ]
  ret i32 %v0_c8f8

; uselistorder directives
  uselistorder i32 %v0_c8f8.pre, { 1, 0 }
  uselistorder i32 %v0_c8f8.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_c890, { 1, 0 }
  uselistorder i1 %v3_c888, { 1, 0 }
  uselistorder i32 %v1_c888, { 1, 0 }
  uselistorder i32 %v1_c854, { 1, 0 }
  uselistorder i32 %v1_c84c, { 1, 0 }
  uselistorder i32 %v0_c880, { 1, 0, 2 }
  uselistorder i32 %v0_c840, { 1, 0 }
  uselistorder i32 %v3_c7f0, { 1, 0 }
  uselistorder i32 %v1_c7e4, { 1, 0, 2 }
  uselistorder i32 %v0_c7d8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_c7b4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c770, { 1, 0 }
  uselistorder i32 %v0_c76c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c768, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 8, 2, 9, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_c8f0._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_c8f0, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
  uselistorder label %dec_label_pc_c8a0, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c844, { 1, 0 }
  uselistorder label %dec_label_pc_c840, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c7b8, { 1, 0 }
  uselistorder label %dec_label_pc_c7b4, { 1, 0 }
  uselistorder label %dec_label_pc_c77c, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  %v4_c91c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 92) to i32*), align 4
  store i32 %v4_c91c, i32* @r4, align 4
  %v2_c924 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_c924, i32* %r0.global-to-local, align 4
  %v4_c93c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c93c)
  %v0_c94c = load i32, i32* @r4, align 4
  store i32 %v0_c94c, i32* %r0.global-to-local, align 4
  %v0_c950 = load i32, i32* @r5, align 4
  %v2_c950 = add i32 %v0_c950, 16
  %v3_c950 = inttoptr i32 %v2_c950 to i32*
  %v4_c950 = load i32, i32* %v3_c950, align 4
  call void @__pseudo_branch(i32 %v4_c950)
  %v0_c960 = load i32, i32* @r5, align 4
  %v2_c960 = add i32 %v0_c960, 1276
  %v3_c960 = inttoptr i32 %v2_c960 to i32*
  %v4_c960 = load i32, i32* %v3_c960, align 4
  %v2_c964 = icmp eq i32 %v4_c960, 0
  br i1 %v2_c964, label %.thread, label %bb

bb:                                               ; preds = %entry
  %v1_c968 = load i32, i32* @r6, align 4
  store i32 %v1_c968, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_c970 = xor i1 %v2_c964, true
  call void @__pseudo_cond_branch(i1 %v2_c970, i32 %v4_c960)
  store i32 %v2_c924, i32* @r0, align 4
  %v0_c980 = load i32, i32* @r5, align 4
  %v2_c980 = add i32 %v0_c980, 24
  %v3_c980 = inttoptr i32 %v2_c980 to i32*
  %v4_c980 = load i32, i32* %v3_c980, align 4
  call void @__pseudo_branch(i32 %v4_c980)
  %v0_c98c = call i32 @__GI___uClibc_fini()
  store i32 %v0_c98c, i32* %r0.global-to-local, align 4
  %v0_c994 = load i32, i32* @r5, align 4
  %v2_c994 = add i32 %v0_c994, -68108
  %v9_c994 = icmp eq i32 %v2_c994, 0
  br i1 %v9_c994, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_c99c = xor i1 %v9_c994, true
  call void @__pseudo_cond_branch(i1 %v2_c99c, i32 %v2_c994)
  %v0_c9a0 = load i32, i32* @r6, align 4
  store i32 %v0_c9a0, i32* %r0.global-to-local, align 4
  %v1_c9a4 = call i32 @__GI__exit(i32 %v0_c9a0)
  store i32 %v1_c9a4, i32* %r0.global-to-local, align 4
  %v0_c9a8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c9a8, label %.thread5, label %.thread6

.thread5:                                         ; preds = %bb9
  %v1_c9a8 = load i32, i32* @r2, align 4
  %v3_c9a8 = load i32, i32* @r1, align 4
  %v4_c9a8 = inttoptr i32 %v3_c9a8 to i32*
  store i32 %v1_c9a8, i32* %v4_c9a8, align 4
  %v5_c9a8 = load i32, i32* %r0.global-to-local, align 4
  %v6_c9a8 = load i32, i32* @r1, align 4
  %v7_c9a8 = sub i32 %v6_c9a8, %v5_c9a8
  store i32 %v7_c9a8, i32* @r1, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  call void @llvm.trap()
  unreachable

.thread6:                                         ; preds = %bb9
  ret i32 %v1_c9a4

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 3, 4, 2, 7, 5, 6, 8, 0 }
  uselistorder i32 (i32)* @__GI__exit, { 0, 2, 1, 3 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37412), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_c9e8 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37412))
  store i32 %v1_c9e8, i32* @r6, align 4
  %v2_c9ec = icmp eq i32 %v1_c9e8, 0
  br i1 %v2_c9ec, label %dec_label_pc_ca6c, label %dec_label_pc_c9f4

dec_label_pc_c9f4:                                ; preds = %entry
  store i32 140, i32* @sl, align 4
  %v0_c9fc = load i32, i32* @r4, align 4
  %v2_c9fc = add i32 %v0_c9fc, -37400
  store i32 %v2_c9fc, i32* @r8, align 4
  %v2_ca00 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ca00, i32* @r7, align 4
  br label %bb18

dec_label_pc_ca08:                                ; preds = %bb18
  %v3_ca08 = load i32, i32* %stack_var_-36, align 4
  %v1_ca0c = inttoptr i32 %v3_ca08 to i32*
  %v2_ca0c = load i32, i32* %v1_ca0c, align 4
  %v1_ca10 = inttoptr i32 %v2_ca0c to i8*
  %v2_ca10 = load i8, i8* %v1_ca10, align 1
  %v7_ca14 = icmp eq i8 %v2_ca10, 99
  br i1 %v7_ca14, label %dec_label_pc_ca1c, label %.backedge3

dec_label_pc_ca1c:                                ; preds = %dec_label_pc_ca08
  %v1_ca1c = add i32 %v2_ca0c, 1
  %v2_ca1c = inttoptr i32 %v1_ca1c to i8*
  %v3_ca1c = load i8, i8* %v2_ca1c, align 1
  %v7_ca20 = icmp eq i8 %v3_ca1c, 112
  br i1 %v7_ca20, label %dec_label_pc_ca28, label %.backedge3

dec_label_pc_ca28:                                ; preds = %dec_label_pc_ca1c
  %v1_ca28 = add i32 %v2_ca0c, 2
  %v2_ca28 = inttoptr i32 %v1_ca28 to i8*
  %v3_ca28 = load i8, i8* %v2_ca28, align 1
  %v7_ca2c = icmp eq i8 %v3_ca28, 117
  br i1 %v7_ca2c, label %dec_label_pc_ca34, label %.backedge3

dec_label_pc_ca34:                                ; preds = %dec_label_pc_ca28
  %v1_ca34 = add i32 %v2_ca0c, 3
  %v2_ca34 = inttoptr i32 %v1_ca34 to i8*
  %v3_ca34 = load i8, i8* %v2_ca34, align 1
  %v4_ca34 = zext i8 %v3_ca34 to i32
  %v0_ca38 = load i32, i32* @r4, align 4
  %v1_ca38 = load i32, i32* @sl, align 4
  %v2_ca38 = add i32 %v1_ca38, %v0_ca38
  %v3_ca38 = inttoptr i32 %v2_ca38 to i32*
  %v4_ca38 = load i32, i32* %v3_ca38, align 4
  %v2_ca3c = mul nuw nsw i32 %v4_ca34, 2
  %v2_ca40 = add i32 %v4_ca38, %v2_ca3c
  %v3_ca40 = inttoptr i32 %v2_ca40 to i16*
  %v4_ca40 = load i16, i16* %v3_ca40, align 2
  %v1_ca44 = and i16 %v4_ca40, 8
  %v2_ca44 = icmp eq i16 %v1_ca44, 0
  br i1 %v2_ca44, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_ca34
  %v1_ca48 = load i32, i32* @r5, align 4
  %v2_ca48 = add i32 %v1_ca48, 1
  store i32 %v2_ca48, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_ca34, %dec_label_pc_ca08, %dec_label_pc_ca1c, %dec_label_pc_ca28
  %v0_ca4c.pre = load i32, i32* @r6, align 4
  %v0_ca58.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_c9f4
  %v0_ca58 = phi i32 [ %v0_ca58.pre, %.backedge3 ], [ %v2_c9fc, %dec_label_pc_c9f4 ]
  %v0_ca4c = phi i32 [ %v0_ca4c.pre, %.backedge3 ], [ %v1_c9e8, %dec_label_pc_c9f4 ]
  %v4_ca5c = inttoptr i32 %v0_ca4c to i32*
  %v5_ca5c = call i32 @__GI_config_read(i32* %v4_ca5c, i32 %v2_ca00, i32 258, i32 %v0_ca58)
  %v2_ca60 = icmp eq i32 %v5_ca5c, 0
  br i1 %v2_ca60, label %dec_label_pc_cad0, label %dec_label_pc_ca08

dec_label_pc_ca6c:                                ; preds = %entry
  %v0_ca70 = load i32, i32* @r4, align 4
  %v2_ca70 = add i32 %v0_ca70, -37396
  store i32 %v2_ca70, i32* @r0, align 4
  %v1_ca74 = call i32 @__GI_config_open(i32 %v2_ca70)
  store i32 %v1_ca74, i32* @r6, align 4
  %v2_ca78 = icmp eq i32 %v1_ca74, 0
  br i1 %v2_ca78, label %bb19, label %dec_label_pc_ca84

bb19:                                             ; preds = %dec_label_pc_ca6c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_cad0

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca6c
  %v0_ca88 = load i32, i32* @r4, align 4
  %v2_ca88 = add i32 %v0_ca88, -37380
  store i32 %v2_ca88, i32* @r8, align 4
  %v2_ca90 = add i32 %v0_ca88, -37344
  store i32 %v2_ca90, i32* @r7, align 4
  %v2_ca94 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ca94, i32* @r4, align 4
  br label %bb21

dec_label_pc_ca9c:                                ; preds = %bb21
  %v0_cac8 = load i32, i32* @r8, align 4
  %v3_ca9c = load i32, i32* %stack_var_-36, align 4
  %v1_caa0 = inttoptr i32 %v3_ca9c to i32*
  %v2_caa0 = load i32, i32* %v1_caa0, align 4
  store i32 %v2_caa0, i32* @r1, align 4
  %v2_caa4 = inttoptr i32 %v0_cac8 to i8*
  %v3_caa4 = call i32 @__GI_strcoll(i8* %v2_caa4, i32 %v2_caa0)
  %v2_caa8 = icmp eq i32 %v3_caa4, 0
  br i1 %v2_caa8, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_ca9c
  %v1_caac = load i32, i32* @r5, align 4
  %v2_caac = add i32 %v1_caac, 1
  store i32 %v2_caac, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_ca9c
  %v0_cab8.pre = load i32, i32* @r7, align 4
  %v0_cabc.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_ca84
  %v0_cabc = phi i32 [ %v0_cabc.pre, %.backedge ], [ %v1_ca74, %dec_label_pc_ca84 ]
  %v0_cab8 = phi i32 [ %v0_cab8.pre, %.backedge ], [ %v2_ca90, %dec_label_pc_ca84 ]
  %v4_cac0 = inttoptr i32 %v0_cabc to i32*
  %v5_cac0 = call i32 @__GI_config_read(i32* %v4_cac0, i32 %v2_ca94, i32 459266, i32 %v0_cab8)
  %v2_cac4 = icmp eq i32 %v5_cac0, 0
  br i1 %v2_cac4, label %dec_label_pc_cad0, label %dec_label_pc_ca9c

dec_label_pc_cad0:                                ; preds = %bb18, %bb21, %bb19
  %v0_cad0 = load i32, i32* @r6, align 4
  %v1_cad4 = inttoptr i32 %v0_cad0 to i32*
  %v2_cad4 = call i32 @__GI_config_close(i32* %v1_cad4)
  %v0_cad8 = load i32, i32* @r5, align 4
  %v2_cad8 = icmp eq i32 %v0_cad8, 0
  %.v0_cad8 = select i1 %v2_cad8, i32 1, i32 %v0_cad8
  ret i32 %.v0_cad8

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder label %dec_label_pc_cad0, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_cefc

bb:                                               ; preds = %entry
  %v7_cb28 = mul i32 %arg1, 4
  %v8_cb28 = add i32 %v7_cb28, ptrtoint (i32* @global_var_cb30.173 to i32)
  call void @__pseudo_branch(i32 %v8_cb28)
  br label %dec_label_pc_cefc

dec_label_pc_cefc:                                ; preds = %bb, %entry
  %v0_cefc = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_cf08 = inttoptr i32 %v0_cefc to i32*
  store i32 22, i32* %v2_cf08, align 4
  %v0_d0b8 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_d0b8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_d0fc = add i32 %tmp, 4
  %v4_d0fc = inttoptr i32 %v3_d0fc to i32*
  store i32 %arg3, i32* %v4_d0fc, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_d108 = icmp eq i32 %arg2, 0
  br i1 %v2_d108, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v2_d114 = add i32 %tmp, 4
  %v3_d114 = inttoptr i32 %v2_d114 to i32*
  %v4_d114 = load i32, i32* %v3_d114, align 4
  store i32 %v4_d114, i32* %r0.global-to-local, align 4
  %v3_d118 = load i32, i32* %arg1, align 4
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %.02 = phi i32 [ %v3_d118, %bb ], [ undef, %entry ]
  %v2_d120 = xor i1 %v2_d108, true
  call void @__pseudo_cond_branch(i1 %v2_d120, i32 %.02)
  %v1_d12c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_d12c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_d154.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d130 = load i32, i32* @r4, align 4
  store i32 %v3_d130, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d154

dec_label_pc_d154:                                ; preds = %dec_label_pc_d154.dec_label_pc_d154_crit_edge, %dec_label_pc_d154.lr.ph
  %v1_d154 = phi i32 [ %v1_d160, %dec_label_pc_d154.dec_label_pc_d154_crit_edge ], [ 0, %dec_label_pc_d154.lr.ph ]
  %v0_d154 = phi i32 [ %v0_d154.pre, %dec_label_pc_d154.dec_label_pc_d154_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -8), %dec_label_pc_d154.lr.ph ]
  %v4_d154 = mul i32 %v1_d154, 4
  %v5_d154 = add i32 %v4_d154, %v0_d154
  %v6_d154 = inttoptr i32 %v5_d154 to i32*
  %v7_d154 = load i32, i32* %v6_d154, align 4
  call void @__pseudo_branch(i32 %v7_d154)
  %v0_d160 = load i32, i32* %r4.global-to-local, align 4
  %v1_d160 = add i32 %v0_d160, -1
  store i32 %v1_d160, i32* %r4.global-to-local, align 4
  %v2_d160 = icmp eq i32 %v0_d160, 0
  br i1 %v2_d160, label %dec_label_pc_d168, label %dec_label_pc_d154.dec_label_pc_d154_crit_edge

dec_label_pc_d154.dec_label_pc_d154_crit_edge:    ; preds = %dec_label_pc_d154
  %v0_d154.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_d154

dec_label_pc_d168:                                ; preds = %dec_label_pc_d154
  %v0_d16c.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_d16c = add i32 %v0_d16c.pre, 1292
  %v3_d16c = inttoptr i32 %v2_d16c to i32*
  %v4_d16c = load i32, i32* %v3_d16c, align 4
  %v2_d170 = icmp eq i32 %v4_d16c, 0
  br i1 %v2_d170, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_d168
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_d168, %bb
  %v2_d178 = xor i1 %v2_d170, true
  call void @__pseudo_cond_branch(i1 %v2_d178, i32 %v4_d16c)
  %v0_d180 = load i32, i32* %r5.global-to-local, align 4
  %v2_d180 = add i32 %v0_d180, 1296
  %v3_d180 = inttoptr i32 %v2_d180 to i32*
  %v4_d180 = load i32, i32* %v3_d180, align 4
  %v2_d184 = icmp eq i32 %v4_d180, 0
  br i1 %v2_d184, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_d18c = xor i1 %v2_d184, true
  call void @__pseudo_cond_branch(i1 %v2_d18c, i32 %v4_d180)
  %v2_d190 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d190, i32* %r4.global-to-local, align 4
  %v1_d194 = load i32, i32* @r0, align 4
  ret i32 %v1_d194

; uselistorder directives
  uselistorder i32 %v1_d160, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_d1c0 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_d1c8 = icmp eq i32 %v2_d1c0, -1
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r3, align 4
  br i1 %v3_d1c8, label %dec_label_pc_d1d4, label %dec_label_pc_d1ec

dec_label_pc_d1d4:                                ; preds = %entry
  %v0_d1d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_d1e0 = call i32 @__GI_open(i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37340), i32 %v0_d1d8)
  %v1_d1e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_d1e8 = icmp ne i32 %v2_d1e0, %v1_d1e4
  call void @__pseudo_cond_branch(i1 %v1_d1e8, i32 ptrtoint (i32* @global_var_bffc.189 to i32))
  br label %dec_label_pc_d1ec

dec_label_pc_d1ec:                                ; preds = %entry, %dec_label_pc_d1d4
  %v1_d1f4 = phi i32 [ %v2_d1c0, %entry ], [ %v2_d1e0, %dec_label_pc_d1d4 ]
  ret i32 %v1_d1f4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_d1ec, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r4.global-to-local, align 4
  %v4_d210 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 96) to i32*), align 4
  %v1_d214 = inttoptr i32 %v4_d210 to i32*
  %v2_d214 = load i32, i32* %v1_d214, align 4
  %v2_d218 = icmp eq i32 %v2_d214, 0
  br i1 %v2_d218, label %dec_label_pc_d220, label %dec_label_pc_d254

dec_label_pc_d220:                                ; preds = %entry
  %v4_d224 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 56) to i32*), align 4
  %v2_d22c = icmp eq i32 %v4_d224, 0
  store i32 4096, i32* %v1_d214, align 4
  br i1 %v2_d22c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_d220
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_d220, %bb
  %v2_d238 = xor i1 %v2_d22c, true
  call void @__pseudo_cond_branch(i1 %v2_d238, i32 %v4_d224)
  %v0_d240 = load i32, i32* %r4.global-to-local, align 4
  %v2_d240 = add i32 %v0_d240, -68264
  %v2_d248 = icmp eq i32 %v2_d240, 0
  br i1 %v2_d248, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_d250 = xor i1 %v2_d248, true
  call void @__pseudo_cond_branch(i1 %v2_d250, i32 %v2_d240)
  br label %dec_label_pc_d254

dec_label_pc_d254:                                ; preds = %entry, %bb6
  %v1_d258 = load i32, i32* @r0, align 4
  ret i32 %v1_d258

; uselistorder directives
  uselistorder label %dec_label_pc_d254, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %tmp54 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_d274 = add i32 %tmp, 4
  store i32 %v1_d274, i32* %ip.global-to-local, align 4
  %v2_d278 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  %v3_d284 = mul i32 %arg2, 4
  store i32 %v3_d284, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_d28c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 20) to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_d294 = ptrtoint i32* %stack_var_-120 to i32
  %v4_d298 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 28) to i32*), align 4
  store i32 %v4_d298, i32* %r4.global-to-local, align 4
  %v2_d2a0 = add i32 %v1_d274, %v3_d284
  store i32 %v2_d2a0, i32* %ip.global-to-local, align 4
  %v9_d2a4 = icmp eq i32 %v2_d2a0, %v2_d278
  store i1 %v9_d2a4, i1* %cpsr_z.global-to-local, align 1
  %v2_d2a8 = inttoptr i32 %v4_d28c to i32*
  store i32 %arg7, i32* %v2_d2a8, align 4
  store i32 1296, i32* %r2.global-to-local, align 4
  %v0_d2b4 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_d2a4, label %bb, label %.critedge

bb:                                               ; preds = %entry
  %v1_d2b8 = load i32, i32* @r7, align 4
  %v2_d2b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_d2b8 = add i32 %v2_d2b8, %v1_d2b8
  store i32 %v3_d2b8, i32* %r3.global-to-local, align 4
  %v1_d2bc = load i32, i32* @r6, align 4
  %v3_d2bc = add i32 %v1_d2bc, 1296
  %v4_d2bc = inttoptr i32 %v3_d2bc to i32*
  store i32 %arg6, i32* %v4_d2bc, align 4
  %v0_d2c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_d2c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d2c0 = inttoptr i32 %v1_d2c0 to i32*
  store i32 %v0_d2c0, i32* %v2_d2c0, align 4
  store i32 120, i32* @r2, align 4
  %v1_d2cc = load i32, i32* %r3.global-to-local, align 4
  %v2_d2cc = load i32, i32* %r4.global-to-local, align 4
  %v3_d2cc = inttoptr i32 %v2_d2cc to i32*
  store i32 %v1_d2cc, i32* %v3_d2cc, align 4
  br label %bb58

.critedge:                                        ; preds = %entry
  %v1_d2bc.c = load i32, i32* @r6, align 4
  %v3_d2bc.c = add i32 %v1_d2bc.c, 1296
  %v4_d2bc.c = inttoptr i32 %v3_d2bc.c to i32*
  store i32 %arg6, i32* %v4_d2bc.c, align 4
  %v0_d2c0.c = load i32, i32* %ip.global-to-local, align 4
  %v1_d2c0.c = load i32, i32* %r4.global-to-local, align 4
  %v2_d2c0.c = inttoptr i32 %v1_d2c0.c to i32*
  store i32 %v0_d2c0.c, i32* %v2_d2c0.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb58

bb58:                                             ; preds = %.critedge, %bb
  %v2_d2d8 = bitcast i32* %stack_var_-120 to i8*
  %v3_d2d8 = call i32 @__GI_memset(i8* %v2_d2d8, i32 0)
  %v0_d2dc = load i32, i32* %r4.global-to-local, align 4
  %v1_d2dc = inttoptr i32 %v0_d2dc to i32*
  %storemerge.pre = load i32, i32* %v1_d2dc, align 4
  br label %dec_label_pc_d2e8

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d2e8, %bb58
  %storemerge = phi i32 [ %storemerge.pre, %bb58 ], [ %v4_d2e8, %dec_label_pc_d2e8 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_d2e8 = inttoptr i32 %storemerge to i32*
  %v2_d2e8 = load i32, i32* %v1_d2e8, align 4
  store i32 %v2_d2e8, i32* %r3.global-to-local, align 4
  %v4_d2e8 = add i32 %storemerge, 4
  store i32 %v4_d2e8, i32* %r2.global-to-local, align 4
  %v2_d2ec = icmp eq i32 %v2_d2e8, 0
  br i1 %v2_d2ec, label %dec_label_pc_d2f8, label %dec_label_pc_d2e8

dec_label_pc_d2f8:                                ; preds = %dec_label_pc_d2e8
  store i32 %v4_d2e8, i32* @r4, align 4
  store i32 %v2_d294, i32* @r5, align 4
  %v1_d31c29 = inttoptr i32 %v4_d2e8 to i32*
  %v2_d31c30 = load i32, i32* %v1_d31c29, align 4
  store i32 %v2_d31c30, i32* %r3.global-to-local, align 4
  %v2_d32032 = icmp eq i32 %v2_d31c30, 0
  store i1 %v2_d32032, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d32032, label %dec_label_pc_d328, label %dec_label_pc_d304

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2f8, %dec_label_pc_d31c
  %v5_d308 = phi i32 [ %v2_d31c, %dec_label_pc_d31c ], [ %v2_d31c30, %dec_label_pc_d2f8 ]
  %v2_d304 = icmp ugt i32 %v5_d308, 13
  %v7_d304 = icmp eq i32 %v5_d308, 14
  store i1 %v7_d304, i1* %cpsr_z.global-to-local, align 1
  %v2_d308 = xor i1 %v2_d304, true
  %v3_d308 = or i1 %v7_d304, %v2_d308
  br i1 %v3_d308, label %bb59, label %bb60

bb59:                                             ; preds = %dec_label_pc_d304
  %v6_d308 = and i32 %v5_d308, 536870912
  %v7_d308 = icmp ne i32 %v6_d308, 0
  br label %bb60

bb60:                                             ; preds = %dec_label_pc_d304, %bb59
  %v1_d314 = phi i1 [ %v2_d304, %dec_label_pc_d304 ], [ %v7_d308, %bb59 ]
  %v2_d30c = xor i1 %v1_d314, true
  %v3_d30c = or i1 %v7_d304, %v2_d30c
  br i1 %v3_d30c, label %bb61, label %dec_label_pc_d31c

bb61:                                             ; preds = %bb60
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d31c

dec_label_pc_d31c:                                ; preds = %bb60, %bb61
  call void @__pseudo_cond_branch(i1 %v3_d30c, i32 ptrtoint (i32* @global_var_acb0.198 to i32))
  %v0_d318 = load i32, i32* @r4, align 4
  %v1_d318 = add i32 %v0_d318, 8
  store i32 %v1_d318, i32* @r4, align 4
  %v1_d31c = inttoptr i32 %v1_d318 to i32*
  %v2_d31c = load i32, i32* %v1_d31c, align 4
  store i32 %v2_d31c, i32* %r3.global-to-local, align 4
  %v2_d320 = icmp eq i32 %v2_d31c, 0
  store i1 %v2_d320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d320, label %dec_label_pc_d328, label %dec_label_pc_d304

dec_label_pc_d328:                                ; preds = %dec_label_pc_d31c, %dec_label_pc_d2f8
  %v1_d32c = call i32 @_dl_aux_init(i32 %v2_d294)
  store i32 %v1_d32c, i32* @r0, align 4
  %v1_d330 = call i32 @__GI___uClibc_init(i32 %v1_d32c)
  store i32 %v1_d330, i32* @r0, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  store i32 %tmp54, i32* @r2, align 4
  %v0_d33c = load i32, i32* @r6, align 4
  %v2_d33c = add i32 %v0_d33c, 96
  %v3_d33c = inttoptr i32 %v2_d33c to i32*
  %v4_d33c = load i32, i32* %v3_d33c, align 4
  store i32 %tmp53, i32* @r3, align 4
  %v2_d344 = icmp eq i32 %tmp54, 0
  store i1 %v2_d344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d344, label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_d328
  store i32 4096, i32* @r2, align 4
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_d328, %bb62
  %v0_d350 = phi i32 [ %tmp54, %dec_label_pc_d328 ], [ 4096, %bb62 ]
  %v3_d34c = icmp eq i32 %tmp53, -1
  %v8_d34c = icmp eq i32 %tmp53, -1
  store i1 %v8_d34c, i1* %cpsr_z.global-to-local, align 1
  %v2_d350 = inttoptr i32 %v4_d33c to i32*
  store i32 %v0_d350, i32* %v2_d350, align 4
  br i1 %v3_d34c, label %dec_label_pc_d358, label %dec_label_pc_d380

dec_label_pc_d358:                                ; preds = %bb63
  %v0_d358 = call i32 @getuid()
  store i32 %v0_d358, i32* @r0, align 4
  store i32 %v0_d358, i32* @r4, align 4
  %v0_d360 = call i32 @geteuid()
  store i32 %v0_d360, i32* @r0, align 4
  %v0_d364 = load i32, i32* @r4, align 4
  %v9_d364 = icmp eq i32 %v0_d364, %v0_d360
  store i1 %v9_d364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d364, label %dec_label_pc_d36c, label %dec_label_pc_d3a8

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d358
  %v1_d36c = call i32 @getgid(i32 %v0_d360)
  store i32 %v1_d36c, i32* @r0, align 4
  store i32 %v1_d36c, i32* @r4, align 4
  %v0_d374 = call i32 @getegid()
  store i32 %v0_d374, i32* @r0, align 4
  %v0_d378 = load i32, i32* @r4, align 4
  %v9_d378 = icmp eq i32 %v0_d378, %v0_d374
  store i1 %v9_d378, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d378, label %dec_label_pc_d380, label %dec_label_pc_d3a8

dec_label_pc_d380:                                ; preds = %dec_label_pc_d36c, %bb63
  store i32 %tmp53, i32* @r2, align 4
  store i1 %v8_d34c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d34c, label %dec_label_pc_d3cc, label %dec_label_pc_d38c

dec_label_pc_d38c:                                ; preds = %dec_label_pc_d380
  store i32 %tmp52, i32* @r3, align 4
  %v9_d390 = icmp eq i32 %tmp53, %tmp52
  store i1 %v9_d390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d390, label %dec_label_pc_d398, label %dec_label_pc_d3a8

dec_label_pc_d398:                                ; preds = %dec_label_pc_d38c
  store i32 %tmp51, i32* @r2, align 4
  store i32 %tmp50, i32* @r3, align 4
  %v9_d3a0 = icmp eq i32 %tmp51, %tmp50
  store i1 %v9_d3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d3a0, label %dec_label_pc_d3cc, label %dec_label_pc_d3a8

dec_label_pc_d3a8:                                ; preds = %dec_label_pc_d38c, %dec_label_pc_d36c, %dec_label_pc_d358, %dec_label_pc_d398
  %v2_d3b0 = call i32 @__check_one_fd(i32 0, i32 32768)
  %v2_d3bc = call i32 @__check_one_fd(i32 1, i32 32770)
  %v2_d3c8 = call i32 @__check_one_fd(i32 2, i32 32770)
  store i32 %v2_d3c8, i32* @r0, align 4
  br label %dec_label_pc_d3cc

dec_label_pc_d3cc:                                ; preds = %dec_label_pc_d398, %dec_label_pc_d380, %dec_label_pc_d3a8
  %v0_d3cc = load i32, i32* @r7, align 4
  %v1_d3cc = inttoptr i32 %v0_d3cc to i32*
  %v2_d3cc = load i32, i32* %v1_d3cc, align 4
  store i32 %v2_d3cc, i32* %r2.global-to-local, align 4
  store i32 396, i32* %r3.global-to-local, align 4
  %v1_d3d4 = load i32, i32* @r6, align 4
  %v3_d3d4 = add i32 %v1_d3d4, 396
  %v4_d3d4 = inttoptr i32 %v3_d3d4 to i32*
  store i32 %v2_d3cc, i32* %v4_d3d4, align 4
  %v0_d3d8 = load i32, i32* @r7, align 4
  %v1_d3d8 = inttoptr i32 %v0_d3d8 to i32*
  %v2_d3d8 = load i32, i32* %v1_d3d8, align 4
  store i32 %v2_d3d8, i32* @r4, align 4
  %v2_d3dc = icmp eq i32 %v2_d3d8, 0
  store i1 %v2_d3dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d3dc, label %bb65, label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d3cc
  store i32 116, i32* %r3.global-to-local, align 4
  %v0_d3e8 = load i32, i32* @r6, align 4
  %v2_d3e8 = add i32 %v0_d3e8, 116
  %v3_d3e8 = inttoptr i32 %v2_d3e8 to i32*
  %v4_d3e8 = load i32, i32* %v3_d3e8, align 4
  store i32 %v4_d3e8, i32* %r3.global-to-local, align 4
  %v2_d3ec = inttoptr i32 %v4_d3e8 to i32*
  store i32 %v2_d3d8, i32* %v2_d3ec, align 4
  %v0_d3f4 = load i32, i32* @r7, align 4
  %v1_d3f4 = inttoptr i32 %v0_d3f4 to i32*
  %v2_d3f4 = load i32, i32* %v1_d3f4, align 4
  %v4_d3f8 = call i32 @__GI_strrchr(i32 %v2_d3f4, i32 47, i32 %v2_d3cc, i32 %v4_d3e8)
  store i32 %v4_d3f8, i32* @r0, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v2_d400 = icmp eq i32 %v4_d3f8, 0
  store i1 %v2_d400, i1* %cpsr_z.global-to-local, align 1
  %v0_d404 = load i32, i32* @r6, align 4
  %v2_d404 = add i32 %v0_d404, 64
  %v3_d404 = inttoptr i32 %v2_d404 to i32*
  %v4_d404 = load i32, i32* %v3_d404, align 4
  store i32 %v4_d404, i32* %r2.global-to-local, align 4
  br i1 %v2_d400, label %.thread47, label %bb64

.thread47:                                        ; preds = %dec_label_pc_d3e4
  %v2_d40c48 = inttoptr i32 %v4_d404 to i32*
  store i32 0, i32* %v2_d40c48, align 4
  br label %bb65

bb64:                                             ; preds = %dec_label_pc_d3e4
  %v2_d408 = add i32 %v4_d3f8, 1
  store i32 %v2_d408, i32* %r3.global-to-local, align 4
  %v2_d40c = inttoptr i32 %v4_d404 to i32*
  store i32 %v4_d3f8, i32* %v2_d40c, align 4
  %v1_d410 = load i32, i32* %r3.global-to-local, align 4
  %v2_d410 = load i32, i32* %r2.global-to-local, align 4
  %v3_d410 = inttoptr i32 %v2_d410 to i32*
  store i32 %v1_d410, i32* %v3_d410, align 4
  br label %bb65

bb65:                                             ; preds = %.thread47, %bb64, %dec_label_pc_d3cc
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_d428 = load i32, i32* @r6, align 4
  %v2_d428 = add i32 %v0_d428, -12
  store i32 %v2_d428, i32* %r8.global-to-local, align 4
  store i32 1292, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_d438 = add i32 %v0_d428, 1292
  %v4_d438 = inttoptr i32 %v3_d438 to i32*
  store i32 %arg5, i32* %v4_d438, align 4
  %v0_d45017 = load i32, i32* %r4.global-to-local, align 4
  %v1_d45018 = load i32, i32* %r5.global-to-local, align 4
  %v3_d45020 = icmp ult i32 %v0_d45017, %v1_d45018
  %v9_d45026 = icmp eq i32 %v0_d45017, %v1_d45018
  store i1 %v9_d45026, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d45020, label %dec_label_pc_d440, label %dec_label_pc_d480.lr.ph

dec_label_pc_d440:                                ; preds = %dec_label_pc_d440, %bb65
  %v1_d440 = phi i32 [ %v1_d44c, %dec_label_pc_d440 ], [ %v0_d45017, %bb65 ]
  %v0_d440 = load i32, i32* %r8.global-to-local, align 4
  %v4_d440 = mul i32 %v1_d440, 4
  %v5_d440 = add i32 %v4_d440, %v0_d440
  %v6_d440 = inttoptr i32 %v5_d440 to i32*
  %v7_d440 = load i32, i32* %v6_d440, align 4
  store i32 %v7_d440, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_d440)
  %v0_d44c = load i32, i32* %r4.global-to-local, align 4
  %v1_d44c = add i32 %v0_d44c, 1
  store i32 %v1_d44c, i32* %r4.global-to-local, align 4
  %v1_d450 = load i32, i32* %r5.global-to-local, align 4
  %v3_d450 = icmp ult i32 %v1_d44c, %v1_d450
  %v9_d450 = icmp eq i32 %v1_d44c, %v1_d450
  store i1 %v9_d450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d450, label %dec_label_pc_d440, label %dec_label_pc_d480.lr.ph

dec_label_pc_d480.lr.ph:                          ; preds = %dec_label_pc_d440, %bb65
  %v2_d458 = icmp eq i32 %v0_d2b4, 0
  store i1 %v2_d458, i1* %cpsr_z.global-to-local, align 1
  %v2_d460 = xor i1 %v2_d458, true
  call void @__pseudo_cond_branch(i1 %v2_d460, i32 %v0_d2b4)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_d474 = load i32, i32* @r6, align 4
  %v2_d474 = add i32 %v0_d474, -12
  store i32 %v2_d474, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d480.dec_label_pc_d480_crit_edge, %dec_label_pc_d480.lr.ph
  %v1_d480 = phi i32 [ %v1_d48c, %dec_label_pc_d480.dec_label_pc_d480_crit_edge ], [ 0, %dec_label_pc_d480.lr.ph ]
  %v0_d480 = phi i32 [ %v0_d480.pre, %dec_label_pc_d480.dec_label_pc_d480_crit_edge ], [ %v2_d474, %dec_label_pc_d480.lr.ph ]
  %v4_d480 = mul i32 %v1_d480, 4
  %v5_d480 = add i32 %v4_d480, %v0_d480
  %v6_d480 = inttoptr i32 %v5_d480 to i32*
  %v7_d480 = load i32, i32* %v6_d480, align 4
  store i32 %v7_d480, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_d480)
  %v0_d48c = load i32, i32* %r4.global-to-local, align 4
  %v1_d48c = add i32 %v0_d48c, 1
  store i32 %v1_d48c, i32* %r4.global-to-local, align 4
  %v1_d490 = load i32, i32* %r5.global-to-local, align 4
  %v3_d490 = icmp ult i32 %v1_d48c, %v1_d490
  %v9_d490 = icmp eq i32 %v1_d48c, %v1_d490
  store i1 %v9_d490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d490, label %dec_label_pc_d480.dec_label_pc_d480_crit_edge, label %dec_label_pc_d498

dec_label_pc_d480.dec_label_pc_d480_crit_edge:    ; preds = %dec_label_pc_d480
  %v0_d480.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_d480

dec_label_pc_d498:                                ; preds = %dec_label_pc_d480
  %v0_d49c.pre = load i32, i32* @r6, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_d49c = add i32 %v0_d49c.pre, 108
  %v3_d49c = inttoptr i32 %v2_d49c to i32*
  %v4_d49c = load i32, i32* %v3_d49c, align 4
  store i32 %v4_d49c, i32* %r2.global-to-local, align 4
  store i32 %v4_d49c, i32* %r3.global-to-local, align 4
  %v2_d4a4 = icmp eq i32 %v4_d49c, 0
  store i1 %v2_d4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4a4, label %dec_label_pc_d4bc, label %dec_label_pc_d4ac

dec_label_pc_d4ac:                                ; preds = %dec_label_pc_d498
  call void @__pseudo_branch(i32 %v4_d49c)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_d4b8 = load i32, i32* @r0, align 4
  %v2_d4b8 = inttoptr i32 %v1_d4b8 to i32*
  store i32 0, i32* %v2_d4b8, align 4
  %v0_d4c0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d498, %dec_label_pc_d4ac
  %v0_d4c0 = phi i32 [ %v0_d49c.pre, %dec_label_pc_d498 ], [ %v0_d4c0.pre, %dec_label_pc_d4ac ]
  store i32 84, i32* %r3.global-to-local, align 4
  %v2_d4c0 = add i32 %v0_d4c0, 84
  %v3_d4c0 = inttoptr i32 %v2_d4c0 to i32*
  %v4_d4c0 = load i32, i32* %v3_d4c0, align 4
  store i32 %v4_d4c0, i32* %r2.global-to-local, align 4
  store i32 %v4_d4c0, i32* %r3.global-to-local, align 4
  %v2_d4c8 = icmp eq i32 %v4_d4c0, 0
  store i1 %v2_d4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4c8, label %dec_label_pc_d4e0, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d4bc
  call void @__pseudo_branch(i32 %v4_d4c0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_d4dc = load i32, i32* @r0, align 4
  %v2_d4dc = inttoptr i32 %v1_d4dc to i32*
  store i32 0, i32* %v2_d4dc, align 4
  %v0_d4e4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d4e0

dec_label_pc_d4e0:                                ; preds = %dec_label_pc_d4bc, %dec_label_pc_d4d0
  %v0_d4e4 = phi i32 [ %v0_d4c0, %dec_label_pc_d4bc ], [ %v0_d4e4.pre, %dec_label_pc_d4d0 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_d4e4 = add i32 %v0_d4e4, 28
  %v3_d4e4 = inttoptr i32 %v2_d4e4 to i32*
  %v4_d4e4 = load i32, i32* %v3_d4e4, align 4
  store i32 %v4_d4e4, i32* %r3.global-to-local, align 4
  %v1_d4ec = inttoptr i32 %v4_d4e4 to i32*
  %v2_d4ec = load i32, i32* %v1_d4ec, align 4
  store i32 %v2_d4ec, i32* %r2.global-to-local, align 4
  %v0_d4f0 = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_d4fc = call i32 @__GI_exit(i32 %v0_d4f0)
  %v0_d500 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d500, label %bb66, label %.thread8

bb66:                                             ; preds = %dec_label_pc_d4e0
  %v2_d504 = load i32, i32* %r4.global-to-local, align 4
  %v8_d504 = shl i32 %v2_d504, %v1_d4fc
  %v9_d504 = and i32 %v8_d504, %v1_d4fc
  %v2_d508 = load i32, i32* %ip.global-to-local, align 4
  %v8_d508 = shl i32 %v2_d508, %v9_d504
  %v9_d508 = and i32 %v8_d508, %v9_d504
  %v3_d50c = load i32, i32* %r5.global-to-local, align 4
  %v8_d50c = shl i32 %v9_d508, %v3_d50c
  %v9_d50c = and i32 %v8_d50c, %v9_d508
  %v2_d514 = load i32, i32* %r2.global-to-local, align 4
  %v3_d514 = and i32 %v9_d50c, %v2_d514
  store i32 %v3_d514, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_d4e0, %bb66
  %v4_d520 = phi i32 [ %v1_d4fc, %dec_label_pc_d4e0 ], [ 0, %bb66 ]
  ret i32 %v4_d520

; uselistorder directives
  uselistorder i32 %v1_d4fc, { 1, 0, 2 }
  uselistorder i32 %v0_d49c.pre, { 1, 0 }
  uselistorder i32 %v1_d490, { 1, 0 }
  uselistorder i32 %v1_d48c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_d450, { 1, 0 }
  uselistorder i32 %v1_d44c, { 1, 2, 3, 0 }
  uselistorder i32 %v4_d404, { 1, 0, 2 }
  uselistorder i1 %v8_d34c, { 1, 2, 0 }
  uselistorder i32 %v2_d31c, { 1, 2, 0 }
  uselistorder i1 %v2_d304, { 1, 0 }
  uselistorder i32 %v4_d2e8, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_d2b4, { 1, 0 }
  uselistorder i32 %v3_d284, { 1, 0 }
  uselistorder i32 %tmp53, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp52, { 1, 0 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 9, 8, 10, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 5, 6, 0, 7, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 2, 20 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_d4e0, { 1, 0 }
  uselistorder label %dec_label_pc_d4bc, { 1, 0 }
  uselistorder label %bb65, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d3cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3a8, { 3, 0, 1, 2 }
  uselistorder label %bb63, { 1, 0 }
  uselistorder label %dec_label_pc_d31c, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %dec_label_pc_d304, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d540 = load i32, i32* @r4, align 4
  store i32 %v3_d540, i32* %stack_var_-16, align 4
  %v3_d54c = urem i32 %arg3, 4096
  %v2_d550 = icmp eq i32 %v3_d54c, 0
  br i1 %v2_d550, label %dec_label_pc_d56c, label %dec_label_pc_d558

dec_label_pc_d558:                                ; preds = %entry
  %v0_d558 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_d564 = inttoptr i32 %v0_d558 to i32*
  store i32 22, i32* %v2_d564, align 4
  %v0_d59c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d59c

dec_label_pc_d56c:                                ; preds = %entry
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_d598, label %dec_label_pc_d588

dec_label_pc_d588:                                ; preds = %dec_label_pc_d56c
  %v0_d588 = call i32 @__GI___errno_location()
  %v0_d58c = load i32, i32* %r4.global-to-local, align 4
  %v1_d58c = sub i32 0, %v0_d58c
  %v2_d590 = inttoptr i32 %v0_d588 to i32*
  store i32 %v1_d58c, i32* %v2_d590, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d598

dec_label_pc_d598:                                ; preds = %dec_label_pc_d56c, %dec_label_pc_d588
  %v0_d598 = phi i32 [ %arg1, %dec_label_pc_d56c ], [ -1, %dec_label_pc_d588 ]
  store i32 %v0_d598, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d59c

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d558, %dec_label_pc_d598
  %v0_d59c = phi i32 [ %v0_d59c.pre, %dec_label_pc_d558 ], [ %v0_d598, %dec_label_pc_d598 ]
  %v2_d5a0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d5a0, i32* @r4, align 4
  ret i32 %v0_d59c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d59c, { 1, 0 }
  uselistorder label %dec_label_pc_d598, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v6_d5a8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_d5b0 = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_d5b0, label %dec_label_pc_d604, label %dec_label_pc_d5c8

dec_label_pc_d5c8:                                ; preds = %entry
  %v1_d5c8 = add i32 %arg2, 4
  %v2_d5c8 = inttoptr i32 %v1_d5c8 to i32*
  %v3_d5c8 = load i32, i32* %v2_d5c8, align 4
  store i32 %v3_d5c8, i32* @r3, align 4
  %v1_d5cc = and i32 %v3_d5c8, 67108864
  %v2_d5cc = icmp eq i32 %v1_d5cc, 0
  br i1 %v2_d5cc, label %dec_label_pc_d5d4, label %dec_label_pc_d604

dec_label_pc_d5d4:                                ; preds = %dec_label_pc_d5c8
  store i32 20, i32* @r2, align 4
  %v2_d5d8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_d5d8, i32* @r0, align 4
  %v0_d5dc = call i32 @memcpy()
  %v0_d604.pre = load i32, i32* @r5, align 4
  %v0_d60c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_d604

dec_label_pc_d604:                                ; preds = %dec_label_pc_d5c8, %entry, %dec_label_pc_d5d4
  %v0_d60c = phi i32 [ %arg3, %dec_label_pc_d5c8 ], [ %arg3, %entry ], [ %v0_d60c.pre, %dec_label_pc_d5d4 ]
  %v0_d608 = phi i32 [ %arg2, %dec_label_pc_d5c8 ], [ 0, %entry ], [ %v2_d5d8, %dec_label_pc_d5d4 ]
  %v0_d604 = phi i32 [ %arg1, %dec_label_pc_d5c8 ], [ %arg1, %entry ], [ %v0_d604.pre, %dec_label_pc_d5d4 ]
  %v4_d614 = call i32 @__syscall_rt_sigaction(i32 %v0_d604, i32 %v0_d608, i32 %v0_d60c, i32 8)
  store i32 %v6_d5a8, i32* @r5, align 4
  ret i32 %v4_d614

; uselistorder directives
  uselistorder label %dec_label_pc_d604, { 2, 0, 1 }
}

define i32 @function_d628(i32 %arg1) local_unnamed_addr {
dec_label_pc_d628:
  %v0_d628 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d628, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d628
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d628, %bb
  %v0_d630 = phi i32 [ %arg1, %dec_label_pc_d628 ], [ 0, %bb ]
  ret i32 %v0_d630

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer() local_unnamed_addr {
entry:
  %v0_d644 = load i32, i32* @r0, align 4
  ret i32 %v0_d644
}

define i32 @wait4() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d648 = load i32, i32* @r7, align 4
  store i32 %v3_d648, i32* %stack_var_-8, align 4
  %v0_d654 = load i32, i32* @r0, align 4
  store i32 %v0_d654, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d654, -4095
  br i1 %tmp, label %dec_label_pc_d670, label %dec_label_pc_d660

dec_label_pc_d660:                                ; preds = %entry
  %v0_d660 = call i32 @__GI___errno_location()
  %v0_d664 = load i32, i32* %r7.global-to-local, align 4
  %v1_d664 = sub i32 0, %v0_d664
  %v2_d668 = inttoptr i32 %v0_d660 to i32*
  store i32 %v1_d664, i32* %v2_d668, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_d674.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d670

dec_label_pc_d670:                                ; preds = %entry, %dec_label_pc_d660
  %v2_d674 = phi i32 [ %v3_d648, %entry ], [ %v2_d674.pre, %dec_label_pc_d660 ]
  %v0_d670 = phi i32 [ %v0_d654, %entry ], [ -1, %dec_label_pc_d660 ]
  store i32 %v2_d674, i32* @r7, align 4
  ret i32 %v0_d670

; uselistorder directives
  uselistorder i32 %v0_d654, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d670, { 1, 0 }
}

define i32 @__GI_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_d67c = load i32, i32* @r2, align 4
  %v9_d67c = load i32, i32* @r3, align 4
  store i32 %v9_d67c, i32* %stack_var_-4, align 4
  %v1_d68c = and i32 %arg2, 64
  %v2_d68c = icmp eq i32 %v1_d68c, 0
  br i1 %v2_d68c, label %.thread, label %bb

bb:                                               ; preds = %entry
  %v3_d694 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_d694, i32* @r3, align 4
  %phitmp = urem i32 %v6_d67c, 65536
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v0_d698 = phi i32 [ 0, %entry ], [ %phitmp, %bb ]
  store i32 %v0_d698, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_d6c8, label %dec_label_pc_d6b8

dec_label_pc_d6b8:                                ; preds = %.thread
  %v0_d6b8 = call i32 @__GI___errno_location()
  %v0_d6bc = load i32, i32* %r7.global-to-local, align 4
  %v1_d6bc = sub i32 0, %v0_d6bc
  store i32 %v1_d6bc, i32* @r3, align 4
  %v2_d6c0 = inttoptr i32 %v0_d6b8 to i32*
  store i32 %v1_d6bc, i32* %v2_d6c0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %.thread, %dec_label_pc_d6b8
  %v0_d6c8 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_d6b8 ]
  ret i32 %v0_d6c8

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6c8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_d6e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 96) to i32*), align 4
  %v1_d6ec = inttoptr i32 %v4_d6e8 to i32*
  %v2_d6ec = load i32, i32* %v1_d6ec, align 4
  %v2_d6f0 = icmp eq i32 %v2_d6ec, 0
  br i1 %v2_d6f0, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_d6f8 = phi i32 [ %v2_d6ec, %entry ], [ 4096, %bb ]
  ret i32 %v1_d6f8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_d714 = load i32, i32* @r0, align 4
  ret i32 %v1_d714
}

define i32 @__GI_clock_getres(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d718 = load i32, i32* @r7, align 4
  store i32 %v3_d718, i32* %stack_var_-8, align 4
  %v0_d724 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d724, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d724, -4095
  br i1 %tmp, label %dec_label_pc_d744, label %dec_label_pc_d734

dec_label_pc_d734:                                ; preds = %entry
  %v0_d734 = call i32 @__GI___errno_location()
  %v0_d738 = load i32, i32* %r7.global-to-local, align 4
  %v1_d738 = sub i32 0, %v0_d738
  %v2_d73c = inttoptr i32 %v0_d734 to i32*
  store i32 %v1_d738, i32* %v2_d73c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_d744.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d744

dec_label_pc_d744:                                ; preds = %entry, %dec_label_pc_d734
  %v1_d748 = phi i32 [ %v0_d724, %entry ], [ -1, %dec_label_pc_d734 ]
  %v2_d744 = phi i32 [ %v3_d718, %entry ], [ %v2_d744.pre, %dec_label_pc_d734 ]
  store i32 %v2_d744, i32* %r7.global-to-local, align 4
  ret i32 %v1_d748

; uselistorder directives
  uselistorder i32 %v0_d724, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d744, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_d75c = load i32, i32* @r0, align 4
  ret i32 %v1_d75c
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_d770 = load i32, i32* @r0, align 4
  ret i32 %v1_d770
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d774 = load i32, i32* @r4, align 4
  store i32 %v3_d774, i32* %stack_var_-16, align 4
  store i32 9508, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r4.global-to-local, align 4
  %v4_d784 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 9508) to i32*), align 4
  %v2_d788 = icmp eq i32 %v4_d784, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_d788, label %dec_label_pc_d794, label %dec_label_pc_d7a4

dec_label_pc_d794:                                ; preds = %entry
  %v1_d798 = call i32 @__GI_brk(i32 0)
  %v1_d79c = icmp slt i32 %v1_d798, 0
  br i1 %v1_d79c, label %dec_label_pc_d7c8, label %dec_label_pc_d7a4thread-pre-split

dec_label_pc_d7a4thread-pre-split:                ; preds = %dec_label_pc_d794
  %v0_d7a8.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_d7a4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_d7a4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_d7a4

dec_label_pc_d7a4:                                ; preds = %dec_label_pc_d7a4thread-pre-split, %entry
  %v1_d7a4 = phi i32 [ %v1_d7a4.pre, %dec_label_pc_d7a4thread-pre-split ], [ 9508, %entry ]
  %v0_d7a4 = phi i32 [ %v0_d7a4.pre, %dec_label_pc_d7a4thread-pre-split ], [ ptrtoint (i32* @global_var_1f010.70 to i32), %entry ]
  %v1_d7b8 = phi i32 [ %v0_d7a8.pr, %dec_label_pc_d7a4thread-pre-split ], [ %arg1, %entry ]
  %v2_d7a4 = add i32 %v0_d7a4, %v1_d7a4
  %v3_d7a4 = inttoptr i32 %v2_d7a4 to i32*
  %v4_d7a4 = load i32, i32* %v3_d7a4, align 4
  %v2_d7a8 = icmp eq i32 %v1_d7b8, 0
  store i32 %v4_d7a4, i32* %r4.global-to-local, align 4
  br i1 %v2_d7a8, label %dec_label_pc_d7cc, label %dec_label_pc_d7b4

dec_label_pc_d7b4:                                ; preds = %dec_label_pc_d7a4
  %v2_d7b8 = add i32 %v4_d7a4, %v1_d7b8
  %v1_d7bc = call i32 @__GI_brk(i32 %v2_d7b8)
  %v1_d7c0 = icmp slt i32 %v1_d7bc, 0
  br i1 %v1_d7c0, label %dec_label_pc_d7c8, label %dec_label_pc_d7b4.dec_label_pc_d7cc_crit_edge

dec_label_pc_d7b4.dec_label_pc_d7cc_crit_edge:    ; preds = %dec_label_pc_d7b4
  %v0_d7cc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d7cc

dec_label_pc_d7c8:                                ; preds = %dec_label_pc_d7b4, %dec_label_pc_d794
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d7cc

dec_label_pc_d7cc:                                ; preds = %dec_label_pc_d7a4, %dec_label_pc_d7b4.dec_label_pc_d7cc_crit_edge, %dec_label_pc_d7c8
  %v0_d7cc = phi i32 [ %v0_d7cc.pre, %dec_label_pc_d7b4.dec_label_pc_d7cc_crit_edge ], [ -1, %dec_label_pc_d7c8 ], [ %v4_d7a4, %dec_label_pc_d7a4 ]
  %v2_d7d0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d7d0, i32* @r4, align 4
  ret i32 %v0_d7cc

; uselistorder directives
  uselistorder i32 %v4_d7a4, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_d7cc, { 2, 1, 0 }
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_d7f0 = load i32, i32* @r0, align 4
  ret i32 %v1_d7f0
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_d7f8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_d804 = call i32 @getrlimit(i32 7, i32 %v2_d7f8)
  %v1_d808 = icmp slt i32 %v2_d804, 0
  %v5_d80c = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_d808, i32 256, i32 %v5_d80c
  ret i32 %storemerge
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d820 = load i32, i32* @r7, align 4
  store i32 %v3_d820, i32* %stack_var_-8, align 4
  %v0_d82c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d82c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d82c, -4095
  br i1 %tmp, label %dec_label_pc_d84c, label %dec_label_pc_d83c

dec_label_pc_d83c:                                ; preds = %entry
  %v0_d83c = call i32 @__GI___errno_location()
  %v0_d840 = load i32, i32* %r7.global-to-local, align 4
  %v1_d840 = sub i32 0, %v0_d840
  %v2_d844 = inttoptr i32 %v0_d83c to i32*
  store i32 %v1_d840, i32* %v2_d844, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_d84c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d84c

dec_label_pc_d84c:                                ; preds = %entry, %dec_label_pc_d83c
  %v1_d850 = phi i32 [ %v0_d82c, %entry ], [ -1, %dec_label_pc_d83c ]
  %v2_d84c = phi i32 [ %v3_d820, %entry ], [ %v2_d84c.pre, %dec_label_pc_d83c ]
  store i32 %v2_d84c, i32* @r7, align 4
  ret i32 %v1_d850

; uselistorder directives
  uselistorder i32 %v0_d82c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d84c, { 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_d864 = load i32, i32* @r0, align 4
  ret i32 %v1_d864
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d868 = load i32, i32* @r7, align 4
  store i32 %v3_d868, i32* %stack_var_-8, align 4
  %v0_d874 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d874, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d874, -4095
  br i1 %tmp, label %dec_label_pc_d894, label %dec_label_pc_d884

dec_label_pc_d884:                                ; preds = %entry
  %v0_d884 = call i32 @__GI___errno_location()
  %v0_d888 = load i32, i32* %r7.global-to-local, align 4
  %v1_d888 = sub i32 0, %v0_d888
  %v2_d88c = inttoptr i32 %v0_d884 to i32*
  store i32 %v1_d888, i32* %v2_d88c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_d894.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d894

dec_label_pc_d894:                                ; preds = %entry, %dec_label_pc_d884
  %v1_d898 = phi i32 [ %v0_d874, %entry ], [ -1, %dec_label_pc_d884 ]
  %v2_d894 = phi i32 [ %v3_d868, %entry ], [ %v2_d894.pre, %dec_label_pc_d884 ]
  store i32 %v2_d894, i32* @r7, align 4
  ret i32 %v1_d898

; uselistorder directives
  uselistorder i32 %v0_d874, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d894, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d89c = load i32, i32* @r7, align 4
  store i32 %v3_d89c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_d8c8, label %dec_label_pc_d8b8

dec_label_pc_d8b8:                                ; preds = %entry
  %v0_d8b8 = call i32 @__GI___errno_location()
  %v0_d8bc = load i32, i32* %r7.global-to-local, align 4
  %v1_d8bc = sub i32 0, %v0_d8bc
  %v2_d8c0 = inttoptr i32 %v0_d8b8 to i32*
  store i32 %v1_d8bc, i32* %v2_d8c0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_d8cc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %entry, %dec_label_pc_d8b8
  %v2_d8cc = phi i32 [ %v3_d89c, %entry ], [ %v2_d8cc.pre, %dec_label_pc_d8b8 ]
  %v0_d8c8 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_d8b8 ]
  store i32 %v2_d8cc, i32* @r7, align 4
  ret i32 %v0_d8c8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d8c8, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_d8d4 = load i32, i32* @r4, align 4
  store i32 %v3_d8d4, i32* %stack_var_-24, align 4
  %v2_d8d8 = load i32, i32* %arg1, align 4
  store i32 %v2_d8d8, i32* %r4.global-to-local, align 4
  %v3_d8e0 = icmp eq i32 %v2_d8d8, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  br i1 %v3_d8e0, label %dec_label_pc_d8f4, label %dec_label_pc_d908

dec_label_pc_d8f4:                                ; preds = %entry
  %v0_d8f4 = call i32 @__GI___errno_location()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_d8fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d8fc, i32* %r2.global-to-local, align 4
  %v2_d900 = inttoptr i32 %v0_d8f4 to i32*
  store i32 9, i32* %v2_d900, align 4
  %v0_d9a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d9a8

dec_label_pc_d908:                                ; preds = %entry
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_d90c = add i32 %tmp, 24
  store i32 %v1_d90c, i32* %r4.global-to-local, align 4
  store i32 %v1_d90c, i32* %r2.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_d920 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_d920)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_d938 = load i32, i32* @r6, align 4
  %v2_d938 = add i32 %v0_d938, 16
  %v3_d938 = inttoptr i32 %v2_d938 to i32*
  %v4_d938 = load i32, i32* %v3_d938, align 4
  call void @__pseudo_branch(i32 %v4_d938)
  %v0_d944 = load i32, i32* @r7, align 4
  %v1_d944 = inttoptr i32 %v0_d944 to i32*
  %v2_d944 = load i32, i32* %v1_d944, align 4
  store i32 %v2_d944, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_d954 = load i32, i32* @r8, align 4
  store i32 %v0_d954, i32* %v1_d944, align 4
  %v0_d958 = load i32, i32* @r6, align 4
  %v1_d958 = load i32, i32* %r3.global-to-local, align 4
  %v2_d958 = add i32 %v1_d958, %v0_d958
  %v3_d958 = inttoptr i32 %v2_d958 to i32*
  %v4_d958 = load i32, i32* %v3_d958, align 4
  store i32 ptrtoint (i32* @global_var_d964.224 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_d958)
  %v0_d964 = load i32, i32* @r7, align 4
  %v1_d964 = add i32 %v0_d964, 12
  %v2_d964 = inttoptr i32 %v1_d964 to i32*
  %v3_d964 = load i32, i32* %v2_d964, align 4
  store i32 %v3_d964, i32* @r0, align 4
  %v0_d968 = call i32 @free()
  %v0_d96c = load i32, i32* @r7, align 4
  store i32 %v0_d96c, i32* @r0, align 4
  %v0_d970 = call i32 @free()
  %v0_d978 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_d978, -4095
  br i1 %tmp11, label %dec_label_pc_d9a4, label %dec_label_pc_d994

dec_label_pc_d994:                                ; preds = %dec_label_pc_d908
  %v0_d994 = call i32 @__GI___errno_location()
  %v0_d998 = load i32, i32* @r4, align 4
  %v1_d998 = sub i32 0, %v0_d998
  store i32 %v1_d998, i32* %r3.global-to-local, align 4
  %v2_d99c = inttoptr i32 %v0_d994 to i32*
  store i32 %v1_d998, i32* %v2_d99c, align 4
  %v0_d9a0 = load i32, i32* @r8, align 4
  br label %dec_label_pc_d9a4

dec_label_pc_d9a4:                                ; preds = %dec_label_pc_d908, %dec_label_pc_d994
  %v0_d9a4 = phi i32 [ %v0_d978, %dec_label_pc_d908 ], [ %v0_d9a0, %dec_label_pc_d994 ]
  store i32 %v0_d9a4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d9a8

dec_label_pc_d9a8:                                ; preds = %dec_label_pc_d8f4, %dec_label_pc_d9a4
  %v0_d9a8 = phi i32 [ %v0_d9a8.pre, %dec_label_pc_d8f4 ], [ %v0_d9a4, %dec_label_pc_d9a4 ]
  %v2_d9b0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_d9b0, i32* %r4.global-to-local, align 4
  ret i32 %v0_d9a8

; uselistorder directives
  uselistorder i32 %v0_d978, { 1, 0 }
  uselistorder label %dec_label_pc_d9a8, { 1, 0 }
  uselistorder label %dec_label_pc_d9a4, { 1, 0 }
}

define i32 @function_d9bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_d9bc:
  %v0_d9bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d9bc, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_d9bc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_d9bc, %bb
  %v10_d9c8 = phi i32 [ %arg1, %dec_label_pc_d9bc ], [ 0, %bb ]
  ret i32 %v10_d9c8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v12_d9cc = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r4, align 4
  %v1_d9e0 = call i32 @malloc(i32 48)
  %v2_d9e8 = icmp eq i32 %v1_d9e0, 0
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  br i1 %v2_d9e8, label %bb, label %dec_label_pc_d9f8

bb:                                               ; preds = %entry
  br label %dec_label_pc_da84

dec_label_pc_d9f8:                                ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d9fc = load i32, i32* @r4, align 4
  %v2_d9fc = icmp ugt i32 %v0_d9fc, 511
  %v2_da00 = add i32 %v1_d9e0, 4
  %v3_da00 = inttoptr i32 %v2_da00 to i32*
  store i32 0, i32* %v3_da00, align 4
  %v0_da04 = load i32, i32* %r3.global-to-local, align 4
  %v2_da04 = add i32 %v1_d9e0, 16
  %v3_da04 = inttoptr i32 %v2_da04 to i32*
  store i32 %v0_da04, i32* %v3_da04, align 4
  %v0_da08 = load i32, i32* %r3.global-to-local, align 4
  %v2_da08 = add i32 %v1_d9e0, 8
  %v3_da08 = inttoptr i32 %v2_da08 to i32*
  store i32 %v0_da08, i32* %v3_da08, align 4
  br i1 %v2_d9fc, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_d9f8
  %v0_da102 = load i32, i32* @r4, align 4
  %v2_da103 = add i32 %v1_d9e0, 20
  %v3_da104 = inttoptr i32 %v2_da103 to i32*
  store i32 %v0_da102, i32* %v3_da104, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_d9f8
  %v1_da0c = load i32, i32* %r3.global-to-local, align 4
  %v2_da0c = add i32 %v1_da0c, 512
  store i32 %v2_da0c, i32* %r3.global-to-local, align 4
  %v0_da10 = load i32, i32* @r4, align 4
  %v2_da10 = add i32 %v1_d9e0, 20
  %v3_da10 = inttoptr i32 %v2_da10 to i32*
  store i32 %v0_da10, i32* %v3_da10, align 4
  %v1_da14 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_da14, i32* %v3_da10, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v1_d9e0, i32* @r5, align 4
  %v0_da1c = load i32, i32* @r7, align 4
  %v2_da1c = inttoptr i32 %v1_d9e0 to i32*
  store i32 %v0_da1c, i32* %v2_da1c, align 4
  %v0_da20 = load i32, i32* @r5, align 4
  %v1_da20 = add i32 %v0_da20, 20
  %v2_da20 = inttoptr i32 %v1_da20 to i32*
  %v3_da20 = load i32, i32* %v2_da20, align 4
  store i32 %v3_da20, i32* %r1.global-to-local, align 4
  %v2_da28 = call i32 @calloc(i32 1, i32 %v3_da20)
  %v2_da2c = icmp eq i32 %v2_da28, 0
  store i32 %v2_da28, i32* @r4, align 4
  %v1_da34 = load i32, i32* @r5, align 4
  %v2_da34 = add i32 %v1_da34, 12
  %v3_da34 = inttoptr i32 %v2_da34 to i32*
  store i32 %v2_da28, i32* %v3_da34, align 4
  br i1 %v2_da2c, label %dec_label_pc_da3c, label %dec_label_pc_da4c

dec_label_pc_da3c:                                ; preds = %bb17
  %v0_da3c = load i32, i32* @r5, align 4
  store i32 %v0_da3c, i32* @r0, align 4
  %v0_da40 = call i32 @free()
  %v0_da44 = load i32, i32* @r4, align 4
  br label %dec_label_pc_da84

dec_label_pc_da4c:                                ; preds = %bb17
  %v0_da50 = load i32, i32* @r6, align 4
  %v2_da50 = add i32 %v0_da50, -37328
  store i32 %v2_da50, i32* %r3.global-to-local, align 4
  %v1_da58 = inttoptr i32 %v2_da50 to i32*
  %v2_da58 = load i32, i32* %v1_da58, align 4
  %v3_da58 = add i32 %v0_da50, -37324
  %v4_da58 = inttoptr i32 %v3_da58 to i32*
  %v5_da58 = load i32, i32* %v4_da58, align 4
  store i32 %v5_da58, i32* %r1.global-to-local, align 4
  %v6_da58 = add i32 %v0_da50, -37320
  %v7_da58 = inttoptr i32 %v6_da58 to i32*
  %v8_da58 = load i32, i32* %v7_da58, align 4
  store i32 %v8_da58, i32* %r2.global-to-local, align 4
  %v9_da58 = add i32 %v0_da50, -37316
  %v10_da58 = inttoptr i32 %v9_da58 to i32*
  %v11_da58 = load i32, i32* %v10_da58, align 4
  store i32 %v11_da58, i32* %r3.global-to-local, align 4
  %v12_da58 = add i32 %v0_da50, -37312
  %v1_da64 = inttoptr i32 %v12_da58 to i32*
  %v2_da64 = load i32, i32* %v1_da64, align 4
  %v3_da64 = add i32 %v0_da50, -37308
  %v4_da64 = inttoptr i32 %v3_da64 to i32*
  %v5_da64 = load i32, i32* %v4_da64, align 4
  store i32 %v2_da64, i32* %stack_var_-32, align 4
  store i32 %v5_da58, i32* %r1.global-to-local, align 4
  store i32 %v8_da58, i32* %r2.global-to-local, align 4
  store i32 %v11_da58, i32* %r3.global-to-local, align 4
  %v0_da74 = load i32, i32* @r5, align 4
  %v1_da74 = add i32 %v0_da74, 24
  %v1_da78 = inttoptr i32 %v1_da74 to i32*
  store i32 %v2_da58, i32* %v1_da78, align 4
  %v3_da78 = add i32 %v0_da74, 28
  %v4_da78 = inttoptr i32 %v3_da78 to i32*
  %v5_da78 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_da78, i32* %v4_da78, align 4
  %v6_da78 = add i32 %v0_da74, 32
  %v7_da78 = inttoptr i32 %v6_da78 to i32*
  %v8_da78 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_da78, i32* %v7_da78, align 4
  %v9_da78 = add i32 %v0_da74, 36
  %v10_da78 = inttoptr i32 %v9_da78 to i32*
  %v11_da78 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_da78, i32* %v10_da78, align 4
  %v12_da78 = add i32 %v0_da74, 40
  %v2_da7c = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_da64, i32* %r1.global-to-local, align 4
  %v1_da80 = inttoptr i32 %v12_da78 to i32*
  store i32 %v2_da7c, i32* %v1_da80, align 4
  %v3_da80 = add i32 %v0_da74, 44
  %v4_da80 = inttoptr i32 %v3_da80 to i32*
  %v5_da80 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_da80, i32* %v4_da80, align 4
  %v0_da84.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_da84

dec_label_pc_da84:                                ; preds = %bb, %dec_label_pc_da3c, %dec_label_pc_da4c
  %v0_da84 = phi i32 [ 0, %bb ], [ %v0_da44, %dec_label_pc_da3c ], [ %v0_da84.pre, %dec_label_pc_da4c ]
  store i32 %v12_d9cc, i32* @r7, align 4
  ret i32 %v0_da84

; uselistorder directives
  uselistorder i32 %v2_da28, { 1, 0, 2 }
  uselistorder i32 %v1_d9e0, { 5, 4, 6, 0, 1, 3, 2, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_da84, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_daa4 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_dacc, label %dec_label_pc_dabc

dec_label_pc_dabc:                                ; preds = %entry
  %v0_dabc = call i32 @__GI___errno_location()
  %v0_dac0 = load i32, i32* @r7, align 4
  %v1_dac0 = sub i32 0, %v0_dac0
  %v2_dac4 = inttoptr i32 %v0_dabc to i32*
  store i32 %v1_dac0, i32* %v2_dac4, align 4
  br label %dec_label_pc_daf0

dec_label_pc_dacc:                                ; preds = %entry
  %v1_dacc = icmp slt i32 %arg1, 0
  br i1 %v1_dacc, label %dec_label_pc_daf0, label %dec_label_pc_dad4

dec_label_pc_dad4:                                ; preds = %dec_label_pc_dacc
  store i32 %v2_daa4, i32* @r1, align 4
  %v0_dad8 = call i32 @fstat()
  %v1_dadc = icmp slt i32 %v0_dad8, 0
  br i1 %v1_dadc, label %dec_label_pc_dae4, label %dec_label_pc_daf8

dec_label_pc_dae4:                                ; preds = %dec_label_pc_dad4
  br label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %dec_label_pc_dae4, %dec_label_pc_dacc, %dec_label_pc_dabc
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_db34

dec_label_pc_daf8:                                ; preds = %dec_label_pc_dad4
  %v0_db00 = load i32, i32* @r7, align 4
  %v3_db04 = call i32 @__GI___fcntl_nocancel(i32 %v0_db00, i32 2, i32 1)
  %v0_db08 = load i32, i32* @r7, align 4
  %v2_db10 = call i32 @fd_to_DIR(i32 %v0_db08, i32 %tmp)
  store i32 %v2_db10, i32* %r4.global-to-local, align 4
  %v2_db14 = icmp eq i32 %v2_db10, 0
  br i1 %v2_db14, label %dec_label_pc_db1c, label %dec_label_pc_db34

dec_label_pc_db1c:                                ; preds = %dec_label_pc_daf8
  %v0_db28 = call i32 @__GI___errno_location()
  %v2_db30 = inttoptr i32 %v0_db28 to i32*
  store i32 12, i32* %v2_db30, align 4
  %v0_db34.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_db34

dec_label_pc_db34:                                ; preds = %dec_label_pc_daf8, %dec_label_pc_daf0, %dec_label_pc_db1c
  %v0_db34 = phi i32 [ %v2_db10, %dec_label_pc_daf8 ], [ 0, %dec_label_pc_daf0 ], [ %v0_db34.pre, %dec_label_pc_db1c ]
  ret i32 %v0_db34

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_db34, { 2, 0, 1 }
}

define i32 @fdopendir(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_db4c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_db4c, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_db58 = call i32 @fstat()
  store i32 %v0_db58, i32* @r5, align 4
  %v2_db5c = icmp eq i32 %v0_db58, 0
  br i1 %v2_db5c, label %dec_label_pc_db64, label %dec_label_pc_dbcc

dec_label_pc_db64:                                ; preds = %entry
  %v1_db68 = and i32 %tmp4, 61440
  store i32 %v1_db68, i32* @r3, align 4
  %v7_db6c = icmp eq i32 %v1_db68, 16384
  br i1 %v7_db6c, label %dec_label_pc_db84, label %dec_label_pc_db74

dec_label_pc_db74:                                ; preds = %dec_label_pc_db64
  %v0_db74 = call i32 @__GI___errno_location()
  br label %dec_label_pc_dbb0

dec_label_pc_db84:                                ; preds = %dec_label_pc_db64
  %v0_db84 = load i32, i32* @r4, align 4
  %v2_db8c = call i32 @__libc_fcntl(i32 %v0_db84, i32 3)
  %v7_db90 = icmp eq i32 %v2_db8c, -1
  br i1 %v7_db90, label %dec_label_pc_dbcc, label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db84
  %v1_db98 = urem i32 %v2_db8c, 4
  %v7_db9c = icmp eq i32 %v1_db98, 1
  br i1 %v7_db9c, label %dec_label_pc_dba4, label %dec_label_pc_dbb8

dec_label_pc_dba4:                                ; preds = %dec_label_pc_db98
  %v0_dba4 = call i32 @__GI___errno_location()
  br label %dec_label_pc_dbb0

dec_label_pc_dbb0:                                ; preds = %dec_label_pc_db74, %dec_label_pc_dba4
  %storemerge2 = phi i32 [ %v0_db74, %dec_label_pc_db74 ], [ %v0_dba4, %dec_label_pc_dba4 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_db74 ], [ 22, %dec_label_pc_dba4 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_dbb0 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_dbb0, align 4
  %v0_dbd0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbd0

dec_label_pc_dbb8:                                ; preds = %dec_label_pc_db98
  %v0_dbb8 = load i32, i32* @r4, align 4
  %v2_dbc0 = call i32 @fd_to_DIR(i32 %v0_dbb8, i32 %tmp)
  store i32 %v2_dbc0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbd0

dec_label_pc_dbcc:                                ; preds = %entry, %dec_label_pc_db84
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_dbb8, %dec_label_pc_dbb0, %dec_label_pc_dbcc
  %v0_dbd0 = phi i32 [ %v2_dbc0, %dec_label_pc_dbb8 ], [ %v0_dbd0.pre, %dec_label_pc_dbb0 ], [ 0, %dec_label_pc_dbcc ]
  ret i32 %v0_dbd0

; uselistorder directives
  uselistorder i32 %v2_db8c, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_dbd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbcc, { 1, 0 }
  uselistorder label %dec_label_pc_dbb0, { 1, 0 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  %v1_dbf4 = add i32 %tmp, 24
  store i32 %v1_dbf4, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_dc0c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  store i32 %v4_dc0c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_dc0c)
  %v0_dc20 = load i32, i32* @r6, align 4
  %v2_dc20 = add i32 %v0_dc20, 16
  %v3_dc20 = inttoptr i32 %v2_dc20 to i32*
  %v4_dc20 = load i32, i32* %v3_dc20, align 4
  store i32 %v4_dc20, i32* %ip.global-to-local, align 4
  store i32 56364, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_dc20)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_dc30

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc60, %entry
  %v0_dc30 = load i32, i32* @r5, align 4
  %v1_dc30 = add i32 %v0_dc30, 4
  %v2_dc30 = inttoptr i32 %v1_dc30 to i32*
  %v3_dc30 = load i32, i32* %v2_dc30, align 4
  %v4_dc30 = add i32 %v0_dc30, 8
  %v5_dc30 = inttoptr i32 %v4_dc30 to i32*
  %v6_dc30 = load i32, i32* %v5_dc30, align 4
  %tmp10 = icmp ugt i32 %v6_dc30, %v3_dc30
  br i1 %tmp10, label %dec_label_pc_dc60, label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dc30
  %v1_dc3c = inttoptr i32 %v0_dc30 to i32*
  %v2_dc3c = load i32, i32* %v1_dc3c, align 4
  %v1_dc40 = add i32 %v0_dc30, 12
  %v2_dc40 = inttoptr i32 %v1_dc40 to i32*
  %v3_dc40 = load i32, i32* %v2_dc40, align 4
  %v1_dc44 = add i32 %v0_dc30, 20
  %v2_dc44 = inttoptr i32 %v1_dc44 to i32*
  %v3_dc44 = load i32, i32* %v2_dc44, align 4
  %v4_dc48 = inttoptr i32 %v3_dc40 to i32*
  %v5_dc48 = call i32 @__getdents64(i32 %v2_dc3c, i32* %v4_dc48, i32 %v3_dc44, i32 %v6_dc30)
  %tmp9 = icmp slt i32 %v5_dc48, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_dc58

.thread:                                          ; preds = %dec_label_pc_dc3c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_dc90

dec_label_pc_dc58:                                ; preds = %dec_label_pc_dc3c
  %v1_dc58 = load i32, i32* @r5, align 4
  %v2_dc58 = add i32 %v1_dc58, 8
  %v3_dc58 = inttoptr i32 %v2_dc58 to i32*
  store i32 %v5_dc48, i32* %v3_dc58, align 4
  %v0_dc5c = load i32, i32* @r7, align 4
  %v1_dc5c = load i32, i32* @r5, align 4
  %v2_dc5c = add i32 %v1_dc5c, 4
  %v3_dc5c = inttoptr i32 %v2_dc5c to i32*
  store i32 %v0_dc5c, i32* %v3_dc5c, align 4
  %v0_dc60.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dc60

dec_label_pc_dc60:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dc58
  %v1_dc84 = phi i32 [ %v0_dc30, %dec_label_pc_dc30 ], [ %v0_dc60.pre, %dec_label_pc_dc58 ]
  %v1_dc60 = add i32 %v1_dc84, 4
  %v2_dc60 = inttoptr i32 %v1_dc60 to i32*
  %v3_dc60 = load i32, i32* %v2_dc60, align 4
  %v1_dc64 = add i32 %v1_dc84, 12
  %v2_dc64 = inttoptr i32 %v1_dc64 to i32*
  %v3_dc64 = load i32, i32* %v2_dc64, align 4
  %v2_dc68 = add i32 %v3_dc64, %v3_dc60
  store i32 %v2_dc68, i32* @r4, align 4
  %v3_dc6c = inttoptr i32 %v2_dc68 to i32*
  %v4_dc6c = load i32, i32* %v3_dc6c, align 4
  %v1_dc70 = add i32 %v2_dc68, 4
  %v2_dc70 = inttoptr i32 %v1_dc70 to i32*
  %v3_dc70 = load i32, i32* %v2_dc70, align 4
  %v1_dc74 = add i32 %v2_dc68, 16
  %v2_dc74 = inttoptr i32 %v1_dc74 to i16*
  %v3_dc74 = load i16, i16* %v2_dc74, align 2
  %v4_dc74 = zext i16 %v3_dc74 to i32
  %v1_dc78 = add i32 %v2_dc68, 8
  %v2_dc78 = inttoptr i32 %v1_dc78 to i32*
  %v3_dc78 = load i32, i32* %v2_dc78, align 4
  store i32 %v3_dc78, i32* %ip.global-to-local, align 4
  %v2_dc7c = add i32 %v4_dc74, %v3_dc60
  %v2_dc80 = or i32 %v3_dc70, %v4_dc6c
  %v4_dc80 = icmp eq i32 %v2_dc80, 0
  store i32 %v2_dc7c, i32* %v2_dc60, align 4
  %v0_dc88 = load i32, i32* %ip.global-to-local, align 4
  %v1_dc88 = load i32, i32* @r5, align 4
  %v2_dc88 = add i32 %v1_dc88, 16
  %v3_dc88 = inttoptr i32 %v2_dc88 to i32*
  store i32 %v0_dc88, i32* %v3_dc88, align 4
  br i1 %v4_dc80, label %dec_label_pc_dc30, label %dec_label_pc_dc90

dec_label_pc_dc90:                                ; preds = %dec_label_pc_dc60, %.thread
  %v0_dc9c = load i32, i32* @r6, align 4
  %v2_dc9c = add i32 %v0_dc9c, 24
  %v3_dc9c = inttoptr i32 %v2_dc9c to i32*
  %v4_dc9c = load i32, i32* %v3_dc9c, align 4
  store i32 %v4_dc9c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_dc9c)
  %v0_dca8 = load i32, i32* @r4, align 4
  ret i32 %v0_dca8

; uselistorder directives
  uselistorder i32 %v2_dc68, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_dc84, { 1, 0 }
  uselistorder i32 %v6_dc30, { 1, 0 }
  uselistorder i32 %v0_dc30, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_dc60, { 1, 0 }
}

define i32 @function_dcbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_dcbc:
  %v0_dcbc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dcbc, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_dcbc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_dcbc, %bb
  %v10_dcc8 = phi i32 [ %arg1, %dec_label_pc_dcbc ], [ 0, %bb ]
  ret i32 %v10_dcc8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 1304)
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_dce8 = load i32, i32* @r4, align 4
  %v6_dce8 = load i32, i32* @r5, align 4
  %v9_dce8 = load i32, i32* @r6, align 4
  %v12_dce8 = load i32, i32* @r7, align 4
  %v15_dce8 = load i32, i32* @r8, align 4
  %v18_dce8 = load i32, i32* @sb, align 4
  %v21_dce8 = load i32, i32* @sl, align 4
  %v24_dce8 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_dcec = icmp eq i32* %arg1, null
  store i1 %v2_dcec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_dcec, label %dec_label_pc_dffc, label %dec_label_pc_dd04

dec_label_pc_dd04:                                ; preds = %entry
  %v1_dd04 = urem i32 %arg3, 256
  store i32 %v1_dd04, i32* @sb, align 4
  %v1_dd08 = udiv i32 %arg3, 256
  %v3_dd0c = urem i32 %v1_dd08, 256
  %v3_dd10 = mul nuw nsw i32 %v1_dd04, 4
  %v1_dd18 = or i32 %v3_dd10, 1
  %v1_dd24 = and i32 %arg3, 131072
  %v1_dd28 = add nsw i32 %v1_dd04, -1
  %v1_dd34 = and i32 %arg3, 262144
  store i32 %v1_dd34, i32* %r2.global-to-local, align 4
  %v1_dd38 = and i32 %arg3, 65536
  store i32 %v1_dd38, i32* %r3.global-to-local, align 4
  store i32 %v1_dd38, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_dd48 = add i32 %arg4, 1
  store i32 %v1_dd48, i32* @sl, align 4
  %v2_dec8 = inttoptr i32 %arg2 to i32*
  %v2_ded8 = icmp eq i32 %v1_dd24, 0
  %v2_df30 = icmp eq i32 %v1_dd34, 0
  br label %dec_label_pc_dd4c

dec_label_pc_dd4c:                                ; preds = %dec_label_pc_dd4c.backedge, %dec_label_pc_dd04
  %v2_dd68 = phi i32 [ %v0_dd4c.pre, %dec_label_pc_dd4c.backedge ], [ %tmp, %dec_label_pc_dd04 ]
  %v1_dd4c = add i32 %v2_dd68, 4
  %v2_dd4c = inttoptr i32 %v1_dd4c to i32*
  %v3_dd4c = load i32, i32* %v2_dd4c, align 4
  store i32 %v3_dd4c, i32* %r3.global-to-local, align 4
  %v2_dd50 = icmp eq i32 %v3_dd4c, 0
  store i1 %v2_dd50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd50, label %dec_label_pc_dd58, label %dec_label_pc_dda0

dec_label_pc_dd58:                                ; preds = %dec_label_pc_dd4c
  %v1_dd58 = add i32 %v2_dd68, 16
  %v2_dd58 = inttoptr i32 %v1_dd58 to i32*
  %v3_dd58 = load i32, i32* %v2_dd58, align 4
  store i32 %v3_dd58, i32* %r3.global-to-local, align 4
  %v2_dd5c = icmp eq i32 %v3_dd58, 0
  store i1 %v2_dd5c, i1* %cpsr_z.global-to-local, align 1
  %v1_dd60 = add i32 %v2_dd68, 8
  %v2_dd60 = inttoptr i32 %v1_dd60 to i32*
  %v3_dd60 = load i32, i32* %v2_dd60, align 4
  store i32 %v3_dd60, i32* %r3.global-to-local, align 4
  br i1 %v2_dd5c, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_dd58
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_dd58, align 4
  %v0_dd6c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_dd58, %bb
  %v0_dd6c = phi i32 [ %v0_dd6c.pre, %bb ], [ %v3_dd60, %dec_label_pc_dd58 ]
  %v2_dd6c = icmp eq i32 %v0_dd6c, 0
  store i1 %v2_dd6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd6c, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_dd18, i32* %r3.global-to-local, align 4
  %v2_dd74 = load i32, i32* @r5, align 4
  %v3_dd74 = add i32 %v2_dd74, 8
  %v4_dd74 = inttoptr i32 %v3_dd74 to i32*
  store i32 %v1_dd18, i32* %v4_dd74, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_dd78 = load i32, i32* @r5, align 4
  %v1_dd78 = add i32 %v0_dd78, 16
  %v2_dd78 = inttoptr i32 %v1_dd78 to i32*
  %v3_dd78 = load i32, i32* %v2_dd78, align 4
  store i32 %v3_dd78, i32* %r0.global-to-local, align 4
  %v1_dd7c = add i32 %v0_dd78, 8
  %v2_dd7c = inttoptr i32 %v1_dd7c to i32*
  %v3_dd7c = load i32, i32* %v2_dd7c, align 4
  store i32 %v3_dd7c, i32* %r3.global-to-local, align 4
  %v2_dd80 = add i32 %v3_dd7c, %v3_dd78
  store i32 %v2_dd80, i32* %r0.global-to-local, align 4
  %v1_dd84 = call i32 @malloc(i32 %v2_dd80)
  store i32 %v1_dd84, i32* %r0.global-to-local, align 4
  %v2_dd88 = icmp eq i32 %v1_dd84, 0
  store i1 %v2_dd88, i1* %cpsr_z.global-to-local, align 1
  %v1_dd8c = load i32, i32* @r5, align 4
  %v2_dd8c = add i32 %v1_dd8c, 4
  %v3_dd8c = inttoptr i32 %v2_dd8c to i32*
  store i32 %v1_dd84, i32* %v3_dd8c, align 4
  br i1 %v2_dd88, label %dec_label_pc_dffc, label %dec_label_pc_dd94

dec_label_pc_dd94:                                ; preds = %.thread
  %v0_dd94 = load i32, i32* @r5, align 4
  %v1_dd94 = add i32 %v0_dd94, 20
  %v2_dd94 = inttoptr i32 %v1_dd94 to i32*
  %v3_dd94 = load i32, i32* %v2_dd94, align 4
  %v1_dd98 = or i32 %v3_dd94, 1
  store i32 %v1_dd98, i32* %r3.global-to-local, align 4
  store i32 %v1_dd98, i32* %v2_dd94, align 4
  %v0_dda0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dda0

dec_label_pc_dda0:                                ; preds = %dec_label_pc_dd4c, %dec_label_pc_dd94
  %v1_dda8 = phi i32 [ %v2_dd68, %dec_label_pc_dd4c ], [ %v0_dda0.pre, %dec_label_pc_dd94 ]
  %v1_dda0 = add i32 %v1_dda8, 4
  %v2_dda0 = inttoptr i32 %v1_dda0 to i32*
  %v3_dda0 = load i32, i32* %v2_dda0, align 4
  store i32 %v3_dda0, i32* %r2.global-to-local, align 4
  %v4_dda0 = add i32 %v1_dda8, 8
  %v5_dda0 = inttoptr i32 %v4_dda0 to i32*
  %v6_dda0 = load i32, i32* %v5_dda0, align 4
  %v2_dda4 = add i32 %v6_dda0, %v3_dda0
  store i32 %v2_dda4, i32* %r3.global-to-local, align 4
  %v2_dda8 = add i32 %v1_dda8, 12
  %v3_dda8 = inttoptr i32 %v2_dda8 to i32*
  store i32 %v2_dda4, i32* %v3_dda8, align 4
  %v0_ddac = load i32, i32* @fp, align 4
  store i32 %v0_ddac, i32* @r6, align 4
  br label %dec_label_pc_ddb0

dec_label_pc_ddb0:                                ; preds = %dec_label_pc_de3c, %dec_label_pc_de28, %dec_label_pc_dda0
  %v0_ddb8 = phi i32 [ %v0_ddac, %dec_label_pc_dda0 ], [ %v1_de28, %dec_label_pc_de28 ], [ %v0_ddb8.pre.pre, %dec_label_pc_de3c ]
  %v0_ddb0 = load i32, i32* @r5, align 4
  %v1_ddb0 = add i32 %v0_ddb0, 12
  store i32 %v1_ddb0, i32* %r0.global-to-local, align 4
  %v1_ddb4 = inttoptr i32 %v1_ddb0 to i32*
  %v2_ddb4 = load i32, i32* %v1_ddb4, align 4
  store i32 %v2_ddb4, i32* %r0.global-to-local, align 4
  %v3_ddb4 = add i32 %v0_ddb0, 16
  %v4_ddb4 = inttoptr i32 %v3_ddb4 to i32*
  %v5_ddb4 = load i32, i32* %v4_ddb4, align 4
  %v2_ddb8 = add i32 %v2_ddb4, %v0_ddb8
  store i32 %v2_ddb8, i32* %r0.global-to-local, align 4
  %v2_ddbc = sub i32 %v5_ddb4, %v0_ddb8
  %v1_ddc0 = inttoptr i32 %v0_ddb0 to i32*
  %v2_ddc0 = load i32, i32* %v1_ddc0, align 4
  store i32 %v2_ddc0, i32* %r2.global-to-local, align 4
  %v3_ddc4 = call i32 @fgets(i32 %v2_ddb8, i32 %v2_ddbc, i32 %v2_ddc0)
  store i32 %v3_ddc4, i32* %r0.global-to-local, align 4
  store i32 %v3_ddc4, i32* %r4.global-to-local, align 4
  %v2_ddc8 = icmp eq i32 %v3_ddc4, 0
  store i1 %v2_ddc8, i1* %cpsr_z.global-to-local, align 1
  %v0_ddd0 = load i32, i32* @r5, align 4
  %v1_ddd0 = add i32 %v0_ddd0, 12
  br i1 %v2_ddc8, label %dec_label_pc_ddd0, label %dec_label_pc_dde8

dec_label_pc_ddd0:                                ; preds = %dec_label_pc_ddb0
  store i32 %v1_ddd0, i32* %r0.global-to-local, align 4
  %v1_ddd4 = inttoptr i32 %v1_ddd0 to i32*
  %v2_ddd4 = load i32, i32* %v1_ddd4, align 4
  store i32 %v2_ddd4, i32* %r0.global-to-local, align 4
  %v3_ddd4 = add i32 %v0_ddd0, 16
  %v4_ddd4 = inttoptr i32 %v3_ddd4 to i32*
  %v5_ddd4 = load i32, i32* %v4_ddd4, align 4
  store i32 %v5_ddd4, i32* @r2, align 4
  %v2_dddc = inttoptr i32 %v2_ddd4 to i8*
  %v3_dddc = call i32 @__GI_memset(i8* %v2_dddc, i32 0)
  store i32 %v3_dddc, i32* %r0.global-to-local, align 4
  %v0_dde0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e000

dec_label_pc_dde8:                                ; preds = %dec_label_pc_ddb0
  %v2_dde8 = inttoptr i32 %v1_ddd0 to i32*
  %v3_dde8 = load i32, i32* %v2_dde8, align 4
  store i32 %v3_dde8, i32* @r4, align 4
  %v1_ddec = load i32, i32* @r6, align 4
  %v2_ddec = add i32 %v1_ddec, %v3_dde8
  %v3_ddec = inttoptr i32 %v2_ddec to i8*
  store i32 %v2_ddec, i32* %r0.global-to-local, align 4
  %v3_ddf0 = call i32 @strlen(i8* %v3_ddec)
  %v0_ddf8 = load i32, i32* @r6, align 4
  %v2_ddf8 = add i32 %v0_ddf8, %v3_ddf0
  store i32 %v2_ddf8, i32* @r6, align 4
  %v0_ddfc = load i32, i32* @r4, align 4
  store i32 %v0_ddfc, i32* @r0, align 4
  %v2_de00 = call i32 @__GI_strchr(i32 %v0_ddfc, i32 10)
  store i32 %v2_de00, i32* %r0.global-to-local, align 4
  %v2_de04 = icmp eq i32 %v2_de00, 0
  store i1 %v2_de04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_de04, label %dec_label_pc_de30, label %dec_label_pc_de0c

dec_label_pc_de0c:                                ; preds = %dec_label_pc_dde8
  %v1_de0c = inttoptr i32 %v2_de00 to i8*
  %v2_de0c = load i8, i8* %v1_de0c, align 1
  %v3_de0c = zext i8 %v2_de0c to i32
  %v1_de10 = add nuw nsw i32 %v3_de0c, 255
  %v1_de14 = urem i32 %v1_de10, 256
  store i32 %v1_de14, i32* %r3.global-to-local, align 4
  %v7_de18 = icmp eq i32 %v1_de14, 92
  store i1 %v7_de18, i1* %cpsr_z.global-to-local, align 1
  %v1_de1c = trunc i32 %v1_de10 to i8
  store i8 %v1_de1c, i8* %v1_de0c, align 1
  %v0_de20 = load i32, i32* @r6, align 4
  %v1_de20 = add i32 %v0_de20, -1
  store i32 %v1_de20, i32* @r6, align 4
  %v0_de24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_de24, label %dec_label_pc_de28, label %dec_label_pc_deb4

dec_label_pc_de28:                                ; preds = %dec_label_pc_de0c
  %v1_de28 = add i32 %v0_de20, -2
  store i32 %v1_de28, i32* @r6, align 4
  br label %dec_label_pc_ddb0

dec_label_pc_de30:                                ; preds = %dec_label_pc_dde8
  %v0_de30 = load i32, i32* @r5, align 4
  %v1_de30 = add i32 %v0_de30, 20
  %v2_de30 = inttoptr i32 %v1_de30 to i32*
  %v3_de30 = load i32, i32* %v2_de30, align 4
  store i32 %v3_de30, i32* %r3.global-to-local, align 4
  %v2_de34 = icmp eq i32 %v3_de30, 0
  store i1 %v2_de34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_de34, label %dec_label_pc_de6c, label %dec_label_pc_de3c

dec_label_pc_de3c:                                ; preds = %dec_label_pc_de30
  %v1_de3c = add i32 %v0_de30, 16
  %v2_de3c = inttoptr i32 %v1_de3c to i32*
  %v3_de3c = load i32, i32* %v2_de3c, align 4
  store i32 %v3_de3c, i32* %r3.global-to-local, align 4
  %v1_de40 = add i32 %v0_de30, 8
  %v2_de40 = inttoptr i32 %v1_de40 to i32*
  %v3_de40 = load i32, i32* %v2_de40, align 4
  %v1_de44 = add i32 %v3_de3c, 4096
  store i32 %v1_de44, i32* %r3.global-to-local, align 4
  %v2_de48 = add i32 %v3_de40, %v1_de44
  store i32 %v1_de44, i32* %v2_de3c, align 4
  %v0_de50 = load i32, i32* @r5, align 4
  %v1_de50 = add i32 %v0_de50, 4
  %v2_de50 = inttoptr i32 %v1_de50 to i32*
  %v3_de50 = load i32, i32* %v2_de50, align 4
  store i32 %v3_de50, i32* %r0.global-to-local, align 4
  %v2_de54 = inttoptr i32 %v3_de50 to i32*
  %v3_de54 = call i32 @realloc(i32* %v2_de54, i32 %v2_de48)
  store i32 %v3_de54, i32* %r0.global-to-local, align 4
  %v0_de58 = load i32, i32* @r5, align 4
  %v1_de58 = add i32 %v0_de58, 8
  %v2_de58 = inttoptr i32 %v1_de58 to i32*
  %v3_de58 = load i32, i32* %v2_de58, align 4
  %v2_de5c = add i32 %v3_de58, %v3_de54
  store i32 %v2_de5c, i32* %r3.global-to-local, align 4
  %v2_de60 = add i32 %v0_de58, 12
  %v3_de60 = inttoptr i32 %v2_de60 to i32*
  store i32 %v2_de5c, i32* %v3_de60, align 4
  %v1_de64 = load i32, i32* @r5, align 4
  %v2_de64 = add i32 %v1_de64, 4
  %v3_de64 = inttoptr i32 %v2_de64 to i32*
  store i32 %v3_de54, i32* %v3_de64, align 4
  %v0_ddb8.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ddb0

dec_label_pc_de6c:                                ; preds = %dec_label_pc_de30, %.dec_label_pc_de6c_crit_edge
  %v0_de6c = phi i32 [ %v0_de6c.pre, %.dec_label_pc_de6c_crit_edge ], [ %v0_de30, %dec_label_pc_de30 ]
  %v1_de6c = inttoptr i32 %v0_de6c to i32*
  %v2_de6c = load i32, i32* %v1_de6c, align 4
  %v1_de70 = add i32 %v2_de6c, 52
  %v2_de70 = inttoptr i32 %v1_de70 to i32*
  %v3_de70 = load i32, i32* %v2_de70, align 4
  store i32 %v3_de70, i32* %r3.global-to-local, align 4
  %v2_de74 = icmp eq i32 %v3_de70, 0
  store i1 %v2_de74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_de74, label %dec_label_pc_dea0, label %dec_label_pc_de7c

dec_label_pc_de7c:                                ; preds = %dec_label_pc_de6c
  %v1_de7c = add i32 %v2_de6c, 16
  %v2_de7c = inttoptr i32 %v1_de7c to i32*
  %v3_de7c = load i32, i32* %v2_de7c, align 4
  store i32 %v3_de7c, i32* %r2.global-to-local, align 4
  %v1_de80 = add i32 %v2_de6c, 24
  %v2_de80 = inttoptr i32 %v1_de80 to i32*
  %v3_de80 = load i32, i32* %v2_de80, align 4
  store i32 %v3_de80, i32* %r3.global-to-local, align 4
  %v3_de84 = icmp ult i32 %v3_de7c, %v3_de80
  %v9_de84 = icmp eq i32 %v3_de7c, %v3_de80
  store i1 %v9_de84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_de84, label %dec_label_pc_dea8thread-pre-split, label %dec_label_pc_de94

dec_label_pc_de94:                                ; preds = %dec_label_pc_de7c
  store i32 %v2_de6c, i32* %r0.global-to-local, align 4
  %v1_de98 = inttoptr i32 %v2_de6c to i16*
  %v2_de98 = call i32 @getc_unlocked(i16* %v1_de98)
  store i32 %v2_de98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dea8

dec_label_pc_dea0:                                ; preds = %dec_label_pc_de6c
  store i32 %v2_de6c, i32* %r0.global-to-local, align 4
  %v1_dea4 = call i32 @__GI_fgetc(i32 %v2_de6c)
  store i32 %v1_dea4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dea8

dec_label_pc_dea8thread-pre-split:                ; preds = %dec_label_pc_de7c
  %v2_de88 = inttoptr i32 %v3_de7c to i8*
  %v3_de88 = load i8, i8* %v2_de88, align 1
  %v4_de88 = zext i8 %v3_de88 to i32
  store i32 %v4_de88, i32* %r0.global-to-local, align 4
  %v6_de88 = add i32 %v3_de7c, 1
  store i32 %v6_de88, i32* %r2.global-to-local, align 4
  store i32 %v6_de88, i32* %v2_de7c, align 4
  %v0_dea8.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dea8

dec_label_pc_dea8:                                ; preds = %dec_label_pc_dea8thread-pre-split, %dec_label_pc_de94, %dec_label_pc_dea0
  %v1_deac = phi i32 [ %v0_dea8.pr, %dec_label_pc_dea8thread-pre-split ], [ %v2_de98, %dec_label_pc_de94 ], [ %v1_dea4, %dec_label_pc_dea0 ]
  %v7_dea8 = icmp eq i32 %v1_deac, 10
  store i1 %v7_dea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dea8, label %dec_label_pc_deb4.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_dea8
  %v8_deac = icmp eq i32 %v1_deac, -1
  store i1 %v8_deac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_deac, label %dec_label_pc_deb4.loopexit, label %.dec_label_pc_de6c_crit_edge

.dec_label_pc_de6c_crit_edge:                     ; preds = %bb68
  %v0_de6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_de6c

dec_label_pc_deb4.loopexit:                       ; preds = %bb68, %dec_label_pc_dea8
  %v0_deb4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_deb4

dec_label_pc_deb4:                                ; preds = %dec_label_pc_de0c, %dec_label_pc_deb4.loopexit
  %v0_deb4 = phi i32 [ %v0_deb4.pre, %dec_label_pc_deb4.loopexit ], [ %v1_de20, %dec_label_pc_de0c ]
  %v7_deb4 = icmp eq i32 %v0_deb4, -1
  store i1 %v7_deb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_deb4, label %dec_label_pc_dffc, label %dec_label_pc_debc

dec_label_pc_debc:                                ; preds = %dec_label_pc_deb4
  %v0_debc = load i32, i32* @r5, align 4
  %v1_debc = add i32 %v0_debc, 4
  %v2_debc = inttoptr i32 %v1_debc to i32*
  %v3_debc = load i32, i32* %v2_debc, align 4
  store i32 %v3_debc, i32* %r0.global-to-local, align 4
  store i32 %v3_dd10, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_debc, i32* %v2_dec8, align 4
  %v0_decc = load i32, i32* @fp, align 4
  %v2_ded0 = inttoptr i32 %v3_debc to i8*
  %v3_ded0 = call i32 @__GI_memset(i8* %v2_ded0, i32 %v0_decc)
  store i32 %v3_ded0, i32* %r0.global-to-local, align 4
  store i32 %v1_dd24, i32* %r2.global-to-local, align 4
  store i1 %v2_ded8, i1* %cpsr_z.global-to-local, align 1
  %v0_dedc = load i32, i32* @r5, align 4
  %v1_dedc = add i32 %v0_dedc, 12
  %v2_dedc = inttoptr i32 %v1_dedc to i32*
  %v3_dedc = load i32, i32* %v2_dedc, align 4
  store i32 %v3_dedc, i32* @r4, align 4
  br i1 %v2_ded8, label %dec_label_pc_def4, label %dec_label_pc_dee4

dec_label_pc_dee4:                                ; preds = %dec_label_pc_debc
  store i32 %v3_dedc, i32* @r0, align 4
  %v1_deec = inttoptr i32 %v3_dedc to i8*
  %v2_deec = call i32 @__GI_strspn(i8* %v1_deec)
  store i32 %v2_deec, i32* %r0.global-to-local, align 4
  %v0_def0 = load i32, i32* @r4, align 4
  %v2_def0 = add i32 %v0_def0, %v2_deec
  store i32 %v2_def0, i32* @r4, align 4
  br label %dec_label_pc_def4

dec_label_pc_def4:                                ; preds = %dec_label_pc_debc, %dec_label_pc_dee4
  %v0_dfcc13 = phi i32 [ %v3_dedc, %dec_label_pc_debc ], [ %v2_def0, %dec_label_pc_dee4 ]
  %v1_def4 = inttoptr i32 %v0_dfcc13 to i8*
  %v2_def4 = load i8, i8* %v1_def4, align 1
  %v3_def4 = zext i8 %v2_def4 to i32
  store i32 %v3_def4, i32* %r2.global-to-local, align 4
  %v2_def8 = icmp eq i8 %v2_def4, 0
  store i1 %v2_def8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_def8, label %dec_label_pc_dd4c.backedge, label %dec_label_pc_df00

dec_label_pc_dd4c.backedge:                       ; preds = %dec_label_pc_def4, %dec_label_pc_dff4, %dec_label_pc_df00
  %v0_dd4c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dd4c

dec_label_pc_df00:                                ; preds = %dec_label_pc_def4
  %v0_df00 = load i32, i32* @r7, align 4
  %v1_df00 = inttoptr i32 %v0_df00 to i8*
  %v2_df00 = load i8, i8* %v1_df00, align 1
  %v3_df00 = zext i8 %v2_df00 to i32
  store i32 %v3_df00, i32* %r3.global-to-local, align 4
  %v9_df04 = icmp eq i8 %v2_df00, %v2_def4
  store i1 %v9_df04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_df04, label %dec_label_pc_dd4c.backedge, label %dec_label_pc_dfcc.preheader

dec_label_pc_dfcc.preheader:                      ; preds = %dec_label_pc_df00
  %v1_df08 = load i32, i32* @fp, align 4
  store i32 %v1_df08, i32* @r6, align 4
  %v2_dfcc15 = load i8, i8* %v1_def4, align 1
  %v3_dfcc16 = zext i8 %v2_dfcc15 to i32
  store i32 %v3_dfcc16, i32* %r2.global-to-local, align 4
  %v2_dfd017 = icmp eq i8 %v2_dfcc15, 0
  store i1 %v2_dfd017, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfd017, label %dec_label_pc_dfe8, label %dec_label_pc_dfd8.preheader

dec_label_pc_dfd8.preheader:                      ; preds = %dec_label_pc_dfcc.preheader
  %v2_dfd882 = load i8, i8* %v1_df00, align 1
  %v3_dfd883 = zext i8 %v2_dfd882 to i32
  store i32 %v3_dfd883, i32* %r3.global-to-local, align 4
  %v9_dfdc86 = icmp eq i8 %v2_dfd882, %v2_dfcc15
  store i1 %v9_dfdc86, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dfdc86, label %dec_label_pc_dfe8, label %bb74

dec_label_pc_df14:                                ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_df18 = load i32, i32* %v2_dec8, align 4
  store i32 %v2_df18, i32* %r3.global-to-local, align 4
  store i32 %v1_dd28, i32* %r2.global-to-local, align 4
  %v9_df20 = icmp eq i32 %v2_df2488, %v1_dd28
  store i1 %v9_df20, i1* %cpsr_z.global-to-local, align 1
  %v5_df24 = mul i32 %v2_df2488, 4
  %v6_df24 = add i32 %v2_df18, %v5_df24
  %v7_df24 = inttoptr i32 %v6_df24 to i32*
  store i32 %v0_df2487, i32* %v7_df24, align 4
  br i1 %v9_df20, label %dec_label_pc_df2c, label %dec_label_pc_df38

dec_label_pc_df2c:                                ; preds = %dec_label_pc_df14
  store i32 %v1_dd34, i32* %r3.global-to-local, align 4
  store i1 %v2_df30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_df30, label %dec_label_pc_df38, label %dec_label_pc_df58

dec_label_pc_df38:                                ; preds = %dec_label_pc_df2c, %dec_label_pc_df14
  %v0_df38 = load i32, i32* @r7, align 4
  %v1_df38 = inttoptr i32 %v0_df38 to i8*
  %v2_df38 = load i8, i8* %v1_df38, align 1
  %v3_df38 = zext i8 %v2_df38 to i32
  store i32 %v3_df38, i32* %r3.global-to-local, align 4
  %v2_df3c = icmp eq i8 %v2_df38, 0
  store i1 %v2_df3c, i1* %cpsr_z.global-to-local, align 1
  %v0_df40 = load i32, i32* @r4, align 4
  store i32 %v0_df40, i32* @r0, align 4
  %v1_df44 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_df3c, i32 %v1_df44, i32 %v0_df38
  store i32 %storemerge, i32* @r1, align 4
  %v0_df4c = call i32 @strcspn()
  store i32 %v0_df4c, i32* %r0.global-to-local, align 4
  %v0_df50 = load i32, i32* @r4, align 4
  %v2_df50 = add i32 %v0_df50, %v0_df4c
  store i32 %v2_df50, i32* @r4, align 4
  br label %dec_label_pc_df90

dec_label_pc_df58:                                ; preds = %dec_label_pc_df2c
  %v0_df58 = load i32, i32* @r4, align 4
  store i32 %v0_df58, i32* @r0, align 4
  %v0_df5c = load i32, i32* @r7, align 4
  %v1_df5c = inttoptr i32 %v0_df5c to i8*
  %v2_df5c = load i8, i8* %v1_df5c, align 1
  %v3_df5c = zext i8 %v2_df5c to i32
  %v5_df60 = call i32 @__GI_strchrnul(i32 %v0_df58, i32 %v3_df5c, i32 %v1_dd28, i32 %v1_dd34)
  store i32 %v5_df60, i32* %r0.global-to-local, align 4
  store i32 %v1_dd24, i32* %r2.global-to-local, align 4
  store i1 %v2_ded8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_df60, i32* @r4, align 4
  br i1 %v2_ded8, label %dec_label_pc_df90, label %dec_label_pc_df7c

dec_label_pc_df78:                                ; preds = %dec_label_pc_df7c
  %v1_df78 = add i32 %v0_df90.pre, -1
  store i32 %v1_df78, i32* @r4, align 4
  br label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_df58, %dec_label_pc_df78
  %v0_df7c = phi i32 [ %v1_df78, %dec_label_pc_df78 ], [ %v5_df60, %dec_label_pc_df58 ]
  %v1_df7c = add i32 %v0_df7c, -1
  %v2_df7c = inttoptr i32 %v1_df7c to i8*
  %v3_df7c = load i8, i8* %v2_df7c, align 1
  %v4_df7c = zext i8 %v3_df7c to i32
  %v0_df80 = load i32, i32* @sl, align 4
  store i32 %v0_df80, i32* @r0, align 4
  %v2_df84 = call i32 @__GI_strchr(i32 %v0_df80, i32 %v4_df7c)
  store i32 %v2_df84, i32* %r0.global-to-local, align 4
  %v2_df88 = icmp eq i32 %v2_df84, 0
  store i1 %v2_df88, i1* %cpsr_z.global-to-local, align 1
  %v0_df90.pre = load i32, i32* @r4, align 4
  br i1 %v2_df88, label %dec_label_pc_df90, label %dec_label_pc_df78

dec_label_pc_df90:                                ; preds = %dec_label_pc_df7c, %dec_label_pc_df58, %dec_label_pc_df38
  %v3_df9c = phi i32 [ %v5_df60, %dec_label_pc_df58 ], [ %v2_df50, %dec_label_pc_df38 ], [ %v0_df90.pre, %dec_label_pc_df7c ]
  %v1_df90 = inttoptr i32 %v3_df9c to i8*
  %v2_df90 = load i8, i8* %v1_df90, align 1
  %v3_df90 = zext i8 %v2_df90 to i32
  store i32 %v3_df90, i32* %r2.global-to-local, align 4
  %v0_df94 = load i32, i32* @r7, align 4
  %v1_df94 = inttoptr i32 %v0_df94 to i8*
  %v2_df94 = load i8, i8* %v1_df94, align 1
  %v3_df94 = zext i8 %v2_df94 to i32
  store i32 %v3_df94, i32* %r3.global-to-local, align 4
  %v9_df98 = icmp eq i8 %v2_df94, %v2_df90
  store i1 %v9_df98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_df98, label %bb71, label %dec_label_pc_dfa4

bb71:                                             ; preds = %dec_label_pc_df90
  %v1_df9c = load i32, i32* @fp, align 4
  %v2_df9c = trunc i32 %v1_df9c to i8
  store i8 %v2_df9c, i8* %v1_df90, align 1
  %v0_dfa0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dfa0.pr, label %bb73, label %.dec_label_pc_dfa4_crit_edge

.dec_label_pc_dfa4_crit_edge:                     ; preds = %bb71
  %v0_dfa4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dfa4

dec_label_pc_dfa4:                                ; preds = %.dec_label_pc_dfa4_crit_edge, %dec_label_pc_df90
  %v0_dfa4 = phi i32 [ %v0_dfa4.pre, %.dec_label_pc_dfa4_crit_edge ], [ %v3_df90, %dec_label_pc_df90 ]
  %v2_dfa4 = icmp eq i32 %v0_dfa4, 0
  store i1 %v2_dfa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfa4, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_dfa4
  %v1_dfa8 = load i32, i32* @fp, align 4
  %v2_dfa8 = trunc i32 %v1_dfa8 to i8
  %v3_dfa8 = load i32, i32* @r4, align 4
  %v4_dfa8 = inttoptr i32 %v3_dfa8 to i8*
  store i8 %v2_dfa8, i8* %v4_dfa8, align 1
  %v5_dfa8 = load i32, i32* @r4, align 4
  %v6_dfa8 = add i32 %v5_dfa8, 1
  store i32 %v6_dfa8, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_dfa4, %bb72
  %v2_dfac = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_dfac, i32* %r3.global-to-local, align 4
  %v2_dfb0 = icmp eq i32 %v2_dfac, 0
  store i1 %v2_dfb0, i1* %cpsr_z.global-to-local, align 1
  %v0_dfcc.pre = load i32, i32* @r4, align 4
  br i1 %v2_dfb0, label %dec_label_pc_dfc8, label %dec_label_pc_dfb8

dec_label_pc_dfb8:                                ; preds = %bb73
  store i32 %v0_dfcc.pre, i32* @r0, align 4
  %v1_dfc0 = inttoptr i32 %v0_dfcc.pre to i8*
  %v2_dfc0 = call i32 @__GI_strspn(i8* %v1_dfc0)
  store i32 %v2_dfc0, i32* %r0.global-to-local, align 4
  %v0_dfc4 = load i32, i32* @r4, align 4
  %v2_dfc4 = add i32 %v0_dfc4, %v2_dfc0
  store i32 %v2_dfc4, i32* @r4, align 4
  br label %dec_label_pc_dfc8

dec_label_pc_dfc8:                                ; preds = %bb73, %dec_label_pc_dfb8
  %v0_dfcc = phi i32 [ %v2_dfc4, %dec_label_pc_dfb8 ], [ %v0_dfcc.pre, %bb73 ]
  %v0_dfc8 = load i32, i32* @r6, align 4
  %v1_dfc8 = add i32 %v0_dfc8, 1
  store i32 %v1_dfc8, i32* @r6, align 4
  %v1_dfcc = inttoptr i32 %v0_dfcc to i8*
  %v2_dfcc = load i8, i8* %v1_dfcc, align 1
  %v3_dfcc = zext i8 %v2_dfcc to i32
  store i32 %v3_dfcc, i32* %r2.global-to-local, align 4
  %v2_dfd0 = icmp eq i8 %v2_dfcc, 0
  store i1 %v2_dfd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfd0, label %dec_label_pc_dfe8, label %dec_label_pc_dfc8.dec_label_pc_dfd8_crit_edge

dec_label_pc_dfc8.dec_label_pc_dfd8_crit_edge:    ; preds = %dec_label_pc_dfc8
  %v0_dfd8.pre = load i32, i32* @r7, align 4
  %v1_dfd8 = inttoptr i32 %v0_dfd8.pre to i8*
  %v2_dfd8 = load i8, i8* %v1_dfd8, align 1
  %v3_dfd8 = zext i8 %v2_dfd8 to i32
  store i32 %v3_dfd8, i32* %r3.global-to-local, align 4
  %v9_dfdc = icmp eq i8 %v2_dfd8, %v2_dfcc
  store i1 %v9_dfdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dfdc, label %dec_label_pc_dfe8, label %bb74

bb74:                                             ; preds = %dec_label_pc_dfd8.preheader, %dec_label_pc_dfc8.dec_label_pc_dfd8_crit_edge
  %v2_df2488 = phi i32 [ %v1_dfc8, %dec_label_pc_dfc8.dec_label_pc_dfd8_crit_edge ], [ %v1_df08, %dec_label_pc_dfd8.preheader ]
  %v0_df2487 = phi i32 [ %v0_dfcc, %dec_label_pc_dfc8.dec_label_pc_dfd8_crit_edge ], [ %v0_dfcc13, %dec_label_pc_dfd8.preheader ]
  %v2_dfe0 = load i32, i32* @sb, align 4
  %v3_dfe0 = sub i32 %v2_df2488, %v2_dfe0
  %v5_dfe0 = xor i32 %v2_dfe0, %v2_df2488
  %v6_dfe0 = xor i32 %v3_dfe0, %v2_df2488
  %v7_dfe0 = and i32 %v6_dfe0, %v5_dfe0
  %v8_dfe0 = icmp slt i32 %v7_dfe0, 0
  %v9_dfe0 = icmp slt i32 %v3_dfe0, 0
  %v10_dfe0 = icmp eq i32 %v2_df2488, %v2_dfe0
  store i1 %v10_dfe0, i1* %cpsr_z.global-to-local, align 1
  %v2_dfe4 = xor i1 %v9_dfe0, %v8_dfe0
  br i1 %v2_dfe4, label %dec_label_pc_df14, label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %dec_label_pc_dfd8.preheader, %bb74, %dec_label_pc_dfc8, %dec_label_pc_dfc8.dec_label_pc_dfd8_crit_edge, %dec_label_pc_dfcc.preheader
  %v0_dfec = phi i32 [ %v1_df08, %dec_label_pc_dfcc.preheader ], [ %v1_df08, %dec_label_pc_dfd8.preheader ], [ %v2_df2488, %bb74 ], [ %v1_dfc8, %dec_label_pc_dfc8 ], [ %v1_dfc8, %dec_label_pc_dfc8.dec_label_pc_dfd8_crit_edge ]
  store i32 %v3_dd0c, i32* %r2.global-to-local, align 4
  %v9_dfec = icmp eq i32 %v0_dfec, %v3_dd0c
  store i1 %v9_dfec, i1* %cpsr_z.global-to-local, align 1
  %v6_dff0 = icmp slt i32 %v0_dfec, %v3_dd0c
  br i1 %v6_dff0, label %dec_label_pc_dff4, label %dec_label_pc_e000

dec_label_pc_dff4:                                ; preds = %dec_label_pc_dfe8
  %v0_dff4 = load i32, i32* @r8, align 4
  %v1_dff4 = and i32 %v0_dff4, 1048576
  %v2_dff4 = icmp eq i32 %v1_dff4, 0
  store i1 %v2_dff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dff4, label %dec_label_pc_dd4c.backedge, label %dec_label_pc_dffc

dec_label_pc_dffc:                                ; preds = %dec_label_pc_dff4, %dec_label_pc_deb4, %.thread, %entry
  br label %dec_label_pc_e000

dec_label_pc_e000:                                ; preds = %dec_label_pc_dfe8, %dec_label_pc_ddd0, %dec_label_pc_dffc
  %v0_e000 = phi i32 [ %v0_dde0, %dec_label_pc_ddd0 ], [ 0, %dec_label_pc_dffc ], [ %v0_dfec, %dec_label_pc_dfe8 ]
  store i32 %v0_e000, i32* %r0.global-to-local, align 4
  store i32 %v3_dce8, i32* @r4, align 4
  store i32 %v6_dce8, i32* @r5, align 4
  store i32 %v9_dce8, i32* @r6, align 4
  store i32 %v12_dce8, i32* @r7, align 4
  store i32 %v15_dce8, i32* @r8, align 4
  store i32 %v18_dce8, i32* @sb, align 4
  store i32 %v21_dce8, i32* @sl, align 4
  store i32 %v24_dce8, i32* @fp, align 4
  ret i32 %v0_e000

; uselistorder directives
  uselistorder i32 %v0_e000, { 1, 0 }
  uselistorder i32 %v0_dfec, { 0, 2, 1 }
  uselistorder i32 %v3_dfe0, { 1, 0 }
  uselistorder i32 %v2_dfe0, { 1, 0, 2 }
  uselistorder i32 %v2_df2488, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_dfdc, { 1, 0 }
  uselistorder i32 %v0_dfcc.pre, { 0, 2, 1 }
  uselistorder i32 %v5_df60, { 1, 0, 2, 3 }
  uselistorder i1 %v9_dfdc86, { 1, 0 }
  uselistorder i1 %v9_df04, { 1, 0 }
  uselistorder i32 %v3_dedc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_deb4, { 1, 0 }
  uselistorder i1 %v8_deac, { 1, 0 }
  uselistorder i32 %v3_de7c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_de6c, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v3_de54, { 1, 0, 2 }
  uselistorder i32 %v1_de44, { 1, 0, 2 }
  uselistorder i32 %v0_de30, { 0, 2, 1, 3 }
  uselistorder i32 %v1_de28, { 1, 0 }
  uselistorder i32 %v1_de14, { 1, 0 }
  uselistorder i32 %v1_de10, { 1, 0 }
  uselistorder i32 %v2_ddec, { 1, 0 }
  uselistorder i32 %v1_ddd0, { 2, 0, 1 }
  uselistorder i32 %v0_ddb8, { 1, 0 }
  uselistorder i32 %v1_dda8, { 0, 2, 1 }
  uselistorder i1 %v2_ded8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_dd34, { 2, 0, 1, 3 }
  uselistorder i32 %v1_dd28, { 2, 1, 0 }
  uselistorder i32 %v3_dd10, { 1, 0 }
  uselistorder i32 %v3_dd0c, { 2, 1, 0 }
  uselistorder i32 %v1_dd04, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 7, 2, 3, 4, 5, 6, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 28, 26, 27, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 33, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_e000, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dfe8, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_dfc8, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_df7c, { 1, 0 }
  uselistorder label %dec_label_pc_dd4c.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_def4, { 1, 0 }
  uselistorder label %dec_label_pc_deb4, { 1, 0 }
  uselistorder label %dec_label_pc_dea8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_de6c, { 1, 0 }
  uselistorder label %dec_label_pc_dda0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_e014 = icmp eq i32* %arg1, null
  br i1 %v2_e014, label %dec_label_pc_e03c, label %dec_label_pc_e01c

dec_label_pc_e01c:                                ; preds = %entry
  %v2_e01c = load i32, i32* %arg1, align 4
  %v1_e020 = inttoptr i32 %v2_e01c to i16*
  %v2_e020 = call i32 @__GI_fclose(i16* %v1_e020)
  %v0_e024 = load i32, i32* @r4, align 4
  %v1_e024 = add i32 %v0_e024, 20
  %v2_e024 = inttoptr i32 %v1_e024 to i32*
  %v3_e024 = load i32, i32* %v2_e024, align 4
  %v2_e028 = icmp eq i32 %v3_e024, 0
  br i1 %v2_e028, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_e01c
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_e01c, %bb
  store i32 57396, i32* @lr, align 4
  %v1_e030 = xor i1 %v2_e028, true
  call void @__pseudo_cond_branch(i1 %v1_e030, i32 ptrtoint (i32* @global_var_bd80.236 to i32))
  %v0_e034 = load i32, i32* @r4, align 4
  store i32 %v0_e034, i32* @r0, align 4
  %v0_e038 = call i32 @free()
  br label %dec_label_pc_e03c

dec_label_pc_e03c:                                ; preds = %entry, %bb6
  %v1_e040 = phi i32 [ 0, %entry ], [ %v0_e038, %bb6 ]
  ret i32 %v1_e040

; uselistorder directives
  uselistorder label %dec_label_pc_e03c, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e050 = load i32, i32* @r4, align 4
  store i32 %v3_e050, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37372), i32* @r1, align 4
  %v0_e058 = load i32, i32* @r0, align 4
  %v2_e058 = load i32, i32* @r2, align 4
  %v4_e058 = call i32 @__GI_fopen(i32 %v0_e058, i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37372), i32 %v2_e058, i32 ptrtoint (i32* @global_var_1f010.70 to i32))
  store i32 %v4_e058, i32* %r0.global-to-local, align 4
  store i32 %v4_e058, i32* @r4, align 4
  %v2_e05c = icmp eq i32 %v4_e058, 0
  br i1 %v2_e05c, label %bb, label %dec_label_pc_e068

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_e068:                                ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e070 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_e070, i32* %r0.global-to-local, align 4
  %v2_e074 = icmp eq i32 %v2_e070, 0
  br i1 %v2_e074, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_e068
  %v1_e078 = load i32, i32* @r4, align 4
  %v3_e078 = inttoptr i32 %v2_e070 to i32*
  store i32 %v1_e078, i32* %v3_e078, align 4
  %v1_e080.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_e068, %bb4
  %v1_e080 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_e068 ], [ %v1_e080.pre, %bb4 ]
  %v2_e07c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e07c, i32* @r4, align 4
  ret i32 %v1_e080

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37372), { 1, 0 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e08c = load i32, i32* @r4, align 4
  store i32 %v3_e08c, i32* %stack_var_-36, align 4
  %v6_e08c = load i32, i32* @r5, align 4
  %v9_e08c = load i32, i32* @r6, align 4
  %v12_e08c = load i32, i32* @r7, align 4
  %v15_e08c = load i32, i32* @r8, align 4
  %v27_e08c = load i32, i32* @lr, align 4
  %v2_e090 = add i32 %tmp, 52
  %v3_e090 = inttoptr i32 %v2_e090 to i32*
  %v4_e090 = load i32, i32* %v3_e090, align 4
  %v1_e098 = sub i32 1, %v4_e090
  %v2_e098 = icmp ult i32 %v4_e090, 2
  br i1 %v2_e098, label %thread-pre-split, label %bb

bb:                                               ; preds = %entry
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %entry, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_e098, %entry ]
  %v0_e0a0 = phi i32 [ 0, %bb ], [ %v1_e098, %entry ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_e0a0 = icmp eq i32 %v0_e0a0, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  br i1 %v2_e0a0, label %dec_label_pc_e0ec, label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %thread-pre-split
  %v4_e0cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_e0cc)
  %v0_e0e0 = load i32, i32* @r6, align 4
  %v2_e0e0 = add i32 %v0_e0e0, 16
  %v3_e0e0 = inttoptr i32 %v2_e0e0 to i32*
  %v4_e0e0 = load i32, i32* %v3_e0e0, align 4
  call void @__pseudo_branch(i32 %v4_e0e0)
  %v0_e0ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_e0ec

dec_label_pc_e0ec:                                ; preds = %thread-pre-split, %dec_label_pc_e0b4
  %v1_e0f4 = phi i32 [ %tmp, %thread-pre-split ], [ %v0_e0ec.pre, %dec_label_pc_e0b4 ]
  %v1_e0ec = inttoptr i32 %v1_e0f4 to i16*
  %v2_e0ec = load i16, i16* %v1_e0ec, align 2
  %v3_e0ec = zext i16 %v2_e0ec to i32
  %v1_e0f0 = and i32 %v3_e0ec, 64
  %v2_e0f0 = icmp eq i32 %v1_e0f0, 0
  br i1 %v2_e0f0, label %bb18, label %bb17

bb17:                                             ; preds = %dec_label_pc_e0ec
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_e0ec, %bb17
  %storemerge24 = phi i32 [ %v1_e0f4, %bb17 ], [ %v1_e0f0, %dec_label_pc_e0ec ]
  %v1_e0f8 = xor i1 %v2_e0f0, true
  call void @__pseudo_cond_branch(i1 %v1_e0f8, i32 ptrtoint (i32* @global_var_ea28.243 to i32))
  store i32 %storemerge24, i32* %sl.global-to-local, align 4
  %v0_e100 = load i32, i32* @r5, align 4
  %v1_e100 = add i32 %v0_e100, 4
  %v2_e100 = inttoptr i32 %v1_e100 to i32*
  %v3_e100 = load i32, i32* %v2_e100, align 4
  %v1_e104 = call i32 @__GI_close(i32 %v3_e100)
  %v0_e10c = load i32, i32* @r6, align 4
  %v2_e118 = add i32 %v0_e10c, 112
  %v3_e118 = inttoptr i32 %v2_e118 to i32*
  %v4_e118 = load i32, i32* %v3_e118, align 4
  store i32 %v4_e118, i32* @r7, align 4
  %v1_e120 = load i32, i32* @r5, align 4
  %v2_e120 = add i32 %v1_e120, 4
  %v3_e120 = inttoptr i32 %v2_e120 to i32*
  store i32 -1, i32* %v3_e120, align 4
  %v0_e128 = load i32, i32* @r6, align 4
  %v2_e128 = add i32 %v0_e128, 76
  %v3_e128 = inttoptr i32 %v2_e128 to i32*
  %v4_e128 = load i32, i32* %v3_e128, align 4
  %v1_e130 = icmp slt i32 %v1_e104, 0
  store i32 %v4_e128, i32* %stack_var_-80, align 4
  br i1 %v1_e130, label %bb19, label %bb20

bb19:                                             ; preds = %bb18
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb20

bb20:                                             ; preds = %bb18, %bb19
  call void @__pseudo_branch(i32 %v4_e128)
  %v0_e158 = load i32, i32* @r6, align 4
  %v2_e158 = add i32 %v0_e158, 16
  %v3_e158 = inttoptr i32 %v2_e158 to i32*
  %v4_e158 = load i32, i32* %v3_e158, align 4
  call void @__pseudo_branch(i32 %v4_e158)
  %v0_e168 = load i32, i32* @r6, align 4
  %v2_e168 = add i32 %v0_e168, 12
  %v3_e168 = inttoptr i32 %v2_e168 to i32*
  %v4_e168 = load i32, i32* %v3_e168, align 4
  %v1_e16c = inttoptr i32 %v4_e168 to i32*
  %v2_e16c = load i32, i32* %v1_e16c, align 4
  %v1_e174 = add i32 %v2_e16c, 1
  %v2_e178 = add i32 %v0_e168, 24
  %v3_e178 = inttoptr i32 %v2_e178 to i32*
  %v4_e178 = load i32, i32* %v3_e178, align 4
  store i32 %v4_e178, i32* @r4, align 4
  store i32 %v1_e174, i32* %v1_e16c, align 4
  call void @__pseudo_branch(i32 %v4_e178)
  %v0_e190 = load i32, i32* @r5, align 4
  %v1_e190 = inttoptr i32 %v0_e190 to i16*
  %v2_e190 = load i16, i16* %v1_e190, align 2
  %v1_e194 = and i16 %v2_e190, 24576
  %v1_e198 = or i16 %v1_e194, 48
  %v0_e19c = load i32, i32* %sb.global-to-local, align 4
  %v2_e19c = icmp eq i32 %v0_e19c, 0
  store i16 %v1_e198, i16* %v1_e190, align 2
  br i1 %v2_e19c, label %.thread, label %bb21

bb21:                                             ; preds = %bb20
  br label %.thread

.thread:                                          ; preds = %bb20, %bb21
  %v2_e1b0 = xor i1 %v2_e19c, true
  call void @__pseudo_cond_branch(i1 %v2_e1b0, i32 %v4_e178)
  %v0_e1b4 = load i32, i32* @r5, align 4
  %v1_e1b4 = inttoptr i32 %v0_e1b4 to i16*
  %v2_e1b4 = load i16, i16* %v1_e1b4, align 2
  %v1_e1b8 = and i16 %v2_e1b4, 16384
  %v2_e1b8 = icmp eq i16 %v1_e1b8, 0
  br i1 %v2_e1b8, label %bb23, label %bb22

bb22:                                             ; preds = %.thread
  br label %bb23

bb23:                                             ; preds = %.thread, %bb22
  %v1_e1c0 = xor i1 %v2_e1b8, true
  call void @__pseudo_cond_branch(i1 %v1_e1c0, i32 ptrtoint (i32* @global_var_bd80.236 to i32))
  %v2_e1cc = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_e1cc)
  call void @__pseudo_branch(i32 %v4_e158)
  %v0_e1ec = load i32, i32* @r6, align 4
  %v2_e1ec = add i32 %v0_e1ec, 52
  %v3_e1ec = inttoptr i32 %v2_e1ec to i32*
  %v4_e1ec = load i32, i32* %v3_e1ec, align 4
  %v1_e1f0 = inttoptr i32 %v4_e1ec to i32*
  %v2_e1f0 = load i32, i32* %v1_e1f0, align 4
  %v1_e1f4 = add i32 %v2_e1f0, 1
  store i32 %v1_e1f4, i32* %v1_e1f0, align 4
  call void @__pseudo_branch(i32 %v4_e178)
  %v0_e20c = call i32 @_stdio_openlist_dec_use()
  %v0_e210 = load i32, i32* %sl.global-to-local, align 4
  %v2_e218 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e218, i32* @r4, align 4
  store i32 %v6_e08c, i32* @r5, align 4
  store i32 %v9_e08c, i32* @r6, align 4
  store i32 %v12_e08c, i32* @r7, align 4
  store i32 %v15_e08c, i32* @r8, align 4
  store i32 %v27_e08c, i32* @lr, align 4
  ret i32 %v0_e210

; uselistorder directives
  uselistorder i1 %v2_e1b8, { 1, 0 }
  uselistorder i32 %v4_e178, { 0, 2, 1, 3 }
  uselistorder i32 %v1_e098, { 1, 0 }
  uselistorder i32 %v4_e090, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder label %bb23, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_e0ec, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_e224(i32 %arg1) local_unnamed_addr {
dec_label_pc_e224:
  %v0_e224 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e224, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_e224
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_e224, %bb
  %v10_e23c = phi i32 [ %arg1, %dec_label_pc_e224 ], [ 0, %bb ]
  ret i32 %v10_e23c

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_e250 = call i32 @_stdio_fopen()
  ret i32 %v0_e250
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e260 = load i32, i32* @r4, align 4
  store i32 %v3_e260, i32* %stack_var_-36, align 4
  %v6_e260 = load i32, i32* @r5, align 4
  %v9_e260 = load i32, i32* @r6, align 4
  %v18_e260 = load i32, i32* @sb, align 4
  %v24_e260 = load i32, i32* @fp, align 4
  %v0_e264 = load i32, i32* @r1, align 4
  %v1_e264 = inttoptr i32 %v0_e264 to i8*
  %v2_e264 = load i8, i8* %v1_e264, align 1
  %v3_e264 = zext i8 %v2_e264 to i32
  store i32 %v3_e264, i32* @ip, align 4
  %v7_e26c = icmp eq i8 %v2_e264, 114
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @fp, align 4
  %v2_e274 = ptrtoint i32* %stack_var_-72 to i32
  %v0_e278 = load i32, i32* @r0, align 4
  store i32 %v0_e278, i32* @r6, align 4
  %v0_e27c = load i32, i32* @r2, align 4
  store i32 %v0_e27c, i32* @sb, align 4
  %v0_e280 = load i32, i32* @r3, align 4
  store i32 %v0_e280, i32* @r5, align 4
  br i1 %v7_e26c, label %dec_label_pc_e2cc, label %dec_label_pc_e288

dec_label_pc_e288:                                ; preds = %entry
  %v7_e288 = icmp eq i8 %v2_e264, 119
  br i1 %v7_e288, label %bb, label %dec_label_pc_e294

bb:                                               ; preds = %dec_label_pc_e288
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_e2d0

dec_label_pc_e294:                                ; preds = %dec_label_pc_e288
  %v7_e294 = icmp eq i8 %v2_e264, 97
  br i1 %v7_e294, label %bb34, label %dec_label_pc_e2a0

bb34:                                             ; preds = %dec_label_pc_e294
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_e2d0

dec_label_pc_e2a0:                                ; preds = %dec_label_pc_e294, %dec_label_pc_e354, %dec_label_pc_e328
  %v0_e2a0 = call i32 @__GI___errno_location()
  store i32 %v0_e2a0, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_e2a8 = load i32, i32* @sb, align 4
  %v2_e2a8 = icmp eq i32 %v0_e2a8, 0
  %v2_e2ac = inttoptr i32 %v0_e2a0 to i32*
  store i32 22, i32* %v2_e2ac, align 4
  br i1 %v2_e2a8, label %dec_label_pc_e520, label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e378._crit_edge, %dec_label_pc_e2a0
  %v0_e2b4 = load i32, i32* @sb, align 4
  %v1_e2b4 = inttoptr i32 %v0_e2b4 to i16*
  %v2_e2b4 = load i16, i16* %v1_e2b4, align 2
  %v3_e2b4 = zext i16 %v2_e2b4 to i32
  store i32 %v3_e2b4, i32* %r3.global-to-local, align 4
  %v1_e2b8 = and i32 %v3_e2b4, 8192
  %v2_e2b8 = icmp eq i32 %v1_e2b8, 0
  br i1 %v2_e2b8, label %dec_label_pc_e520, label %dec_label_pc_e2c0

dec_label_pc_e2c0:                                ; preds = %dec_label_pc_e2b4
  store i32 %v0_e2b4, i32* @r0, align 4
  %v0_e2c4 = call i32 @free()
  store i32 %v0_e2c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e520

dec_label_pc_e2cc:                                ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_e2d0

dec_label_pc_e2d0:                                ; preds = %bb, %bb34, %dec_label_pc_e2cc
  %v1_e2e8 = phi i32 [ 1089, %bb34 ], [ 577, %bb ], [ 1, %dec_label_pc_e2cc ]
  %v1_e2d0 = add i32 %v0_e264, 1
  %v2_e2d0 = inttoptr i32 %v1_e2d0 to i8*
  %v3_e2d0 = load i8, i8* %v2_e2d0, align 1
  %v7_e2d4 = icmp eq i8 %v3_e2d0, 98
  %v1_e2d0.v0_e264 = select i1 %v7_e2d4, i32 %v1_e2d0, i32 %v0_e264
  store i32 %v1_e2d0.v0_e264, i32* %r3.global-to-local, align 4
  %v1_e2e0 = add i32 %v1_e2d0.v0_e264, 1
  %v2_e2e0 = inttoptr i32 %v1_e2e0 to i8*
  %v3_e2e0 = load i8, i8* %v2_e2e0, align 1
  %v4_e2e0 = zext i8 %v3_e2e0 to i32
  store i32 %v4_e2e0, i32* @r3, align 4
  %v7_e2e4 = icmp eq i8 %v3_e2e0, 43
  br i1 %v7_e2e4, label %bb37, label %.thread5

bb37:                                             ; preds = %dec_label_pc_e2d0
  store i32 %v1_e2e8, i32* @r3, align 4
  %v2_e2ec = add nuw nsw i32 %v1_e2e8, 1
  store i32 %v2_e2ec, i32* @r4, align 4
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_e2d0, %bb37
  %v2_e2f0 = icmp eq i32 %v0_e27c, 0
  br i1 %v2_e2f0, label %dec_label_pc_e2f8, label %dec_label_pc_e320

dec_label_pc_e2f8:                                ; preds = %.thread5
  store i32 80, i32* %r0.global-to-local, align 4
  %v1_e2fc = call i32 @malloc(i32 80)
  store i32 %v1_e2fc, i32* %r0.global-to-local, align 4
  store i32 %v1_e2fc, i32* @sb, align 4
  %v3_e300 = icmp eq i32 %v1_e2fc, 0
  br i1 %v3_e300, label %dec_label_pc_e524, label %dec_label_pc_e308

dec_label_pc_e308:                                ; preds = %dec_label_pc_e2f8
  %v2_e30c = add i32 %v1_e2fc, 8
  %v3_e30c = inttoptr i32 %v2_e30c to i32*
  store i32 0, i32* %v3_e30c, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_e314 = load i32, i32* @sb, align 4
  %v3_e314 = inttoptr i32 %v2_e314 to i16*
  store i16 8192, i16* %v3_e314, align 2
  %v0_e318 = load i32, i32* @sb, align 4
  %v1_e318 = add i32 %v0_e318, 56
  store i32 %v1_e318, i32* @r0, align 4
  %v1_e31c = call i32 @__stdio_init_mutex(i32 %v1_e318)
  store i32 %v1_e31c, i32* %r0.global-to-local, align 4
  %v0_e320.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_e320

dec_label_pc_e320:                                ; preds = %.thread5, %dec_label_pc_e308
  %v0_e378 = phi i32 [ %v0_e280, %.thread5 ], [ %v0_e320.pre, %dec_label_pc_e308 ]
  %v1_e320 = icmp slt i32 %v0_e378, 0
  br i1 %v1_e320, label %dec_label_pc_e378, label %dec_label_pc_e328

dec_label_pc_e328:                                ; preds = %dec_label_pc_e320
  %v0_e32c = load i32, i32* @r4, align 4
  %v2_e32c = and i32 %v0_e32c, ptrtoint (i32* @global_var_20003.252 to i32)
  %v1_e330 = or i32 %v2_e32c, 1
  store i32 %v1_e330, i32* @r2, align 4
  %v0_e334 = load i32, i32* @r6, align 4
  %v1_e334 = add i32 %v0_e334, 1
  %v2_e338 = and i32 %v1_e334, %v1_e330
  store i32 %v2_e338, i32* %r3.global-to-local, align 4
  %v9_e33c = icmp eq i32 %v2_e338, %v1_e330
  %v1_e340 = load i32, i32* @sb, align 4
  %v2_e340 = add i32 %v1_e340, 4
  %v3_e340 = inttoptr i32 %v2_e340 to i32*
  store i32 %v0_e378, i32* %v3_e340, align 4
  br i1 %v9_e33c, label %dec_label_pc_e348, label %dec_label_pc_e2a0

dec_label_pc_e348:                                ; preds = %dec_label_pc_e328
  %v0_e348 = load i32, i32* @r4, align 4
  %v1_e348 = load i32, i32* @r6, align 4
  %v2_e348 = sub i32 -1, %v1_e348
  %v3_e348 = and i32 %v0_e348, %v2_e348
  store i32 %v3_e348, i32* @r3, align 4
  %v1_e34c = and i32 %v3_e348, 1024
  %v2_e34c = icmp eq i32 %v1_e34c, 0
  br i1 %v2_e34c, label %dec_label_pc_e36c, label %dec_label_pc_e354

dec_label_pc_e354:                                ; preds = %dec_label_pc_e348
  %v0_e354 = load i32, i32* @r5, align 4
  store i32 %v0_e354, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_e360 = call i32 @__libc_fcntl(i32 %v0_e354, i32 4)
  store i32 %v2_e360, i32* %r0.global-to-local, align 4
  %v2_e364 = icmp eq i32 %v2_e360, 0
  br i1 %v2_e364, label %dec_label_pc_e354.dec_label_pc_e36c_crit_edge, label %dec_label_pc_e2a0

dec_label_pc_e354.dec_label_pc_e36c_crit_edge:    ; preds = %dec_label_pc_e354
  %v0_e36c.pre = load i32, i32* @r6, align 4
  %v0_e370.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e36c

dec_label_pc_e36c:                                ; preds = %dec_label_pc_e354.dec_label_pc_e36c_crit_edge, %dec_label_pc_e348
  %v0_e370 = phi i32 [ %v0_e370.pre, %dec_label_pc_e354.dec_label_pc_e36c_crit_edge ], [ %v0_e348, %dec_label_pc_e348 ]
  %v0_e36c = phi i32 [ %v0_e36c.pre, %dec_label_pc_e354.dec_label_pc_e36c_crit_edge ], [ %v1_e348, %dec_label_pc_e348 ]
  %v1_e36c = and i32 %v0_e36c, 131072
  store i32 %v1_e36c, i32* %r3.global-to-local, align 4
  %v2_e370 = or i32 %v1_e36c, %v0_e370
  store i32 %v2_e370, i32* @r4, align 4
  br label %dec_label_pc_e39c

dec_label_pc_e378:                                ; preds = %dec_label_pc_e320
  %v7_e378 = icmp eq i32 %v0_e378, -1
  %v0_e384.pre = load i32, i32* @r4, align 4
  br i1 %v7_e378, label %dec_label_pc_e378._crit_edge, label %bb38

bb38:                                             ; preds = %dec_label_pc_e378
  %v2_e37c = or i32 %v0_e384.pre, ptrtoint (i32* @global_var_20000.253 to i32)
  store i32 %v2_e37c, i32* @r4, align 4
  br label %dec_label_pc_e378._crit_edge

dec_label_pc_e378._crit_edge:                     ; preds = %dec_label_pc_e378, %bb38
  %v0_e384 = phi i32 [ %v2_e37c, %bb38 ], [ %v0_e384.pre, %dec_label_pc_e378 ]
  %v0_e380 = load i32, i32* @r6, align 4
  store i32 %v0_e380, i32* %r0.global-to-local, align 4
  store i32 %v0_e384, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_e38c = call i32 @__GI_open(i32 %v0_e380, i32 %v0_e384)
  store i32 %v2_e38c, i32* %r0.global-to-local, align 4
  %v1_e390 = icmp slt i32 %v2_e38c, 0
  %v1_e394 = load i32, i32* @sb, align 4
  %v2_e394 = add i32 %v1_e394, 4
  %v3_e394 = inttoptr i32 %v2_e394 to i32*
  store i32 %v2_e38c, i32* %v3_e394, align 4
  br i1 %v1_e390, label %dec_label_pc_e2b4, label %.dec_label_pc_e39c_crit_edge

.dec_label_pc_e39c_crit_edge:                     ; preds = %dec_label_pc_e378._crit_edge
  %v0_e3a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e39c

dec_label_pc_e39c:                                ; preds = %.dec_label_pc_e39c_crit_edge, %dec_label_pc_e36c
  %v0_e3b8 = phi i32 [ %v0_e3a0.pre, %.dec_label_pc_e39c_crit_edge ], [ %v2_e370, %dec_label_pc_e36c ]
  %v0_e39c = load i32, i32* @sb, align 4
  %v1_e39c = inttoptr i32 %v0_e39c to i16*
  %v2_e39c = load i16, i16* %v1_e39c, align 2
  %v3_e39c = zext i16 %v2_e39c to i32
  %v1_e3a0 = urem i32 %v0_e3b8, 4
  %v1_e3a4 = and i32 %v0_e3b8, 1024
  %v1_e3a8 = and i32 %v3_e39c, 8192
  %v1_e3ac = add nuw nsw i32 %v1_e3a0, 1
  %v2_e3b0 = or i32 %v1_e3a8, %v1_e3a4
  store i32 %v2_e3b0, i32* %r3.global-to-local, align 4
  %v1_e3b4 = xor i32 %v1_e3ac, 3
  store i32 %v1_e3b4, i32* %r1.global-to-local, align 4
  %v1_e3b8 = and i32 %v0_e3b8, ptrtoint (i32* @global_var_20000.253 to i32)
  store i32 %v1_e3b8, i32* %r2.global-to-local, align 4
  %v2_e3b8 = icmp eq i32 %v1_e3b8, 0
  %v1_e3bc = add i32 %v0_e39c, 4
  %v2_e3bc = inttoptr i32 %v1_e3bc to i32*
  %v3_e3bc = load i32, i32* %v2_e3bc, align 4
  store i32 %v3_e3bc, i32* @r5, align 4
  br i1 %v2_e3b8, label %bb40, label %bb39

bb39:                                             ; preds = %dec_label_pc_e39c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_e39c, %bb39
  %v0_e3c8 = phi i32 [ 0, %dec_label_pc_e39c ], [ 32768, %bb39 ]
  %v4_e3c4 = mul nuw nsw i32 %v1_e3b4, 16
  %v5_e3c4 = or i32 %v2_e3b0, %v4_e3c4
  store i32 %v5_e3c4, i32* %r3.global-to-local, align 4
  %v2_e3c8 = or i32 %v0_e3c8, %v5_e3c4
  store i32 %v2_e3c8, i32* %r2.global-to-local, align 4
  %v8_e3cc = icmp eq i32 %v3_e3bc, 2147483647
  %v1_e3d0 = trunc i32 %v2_e3c8 to i16
  store i16 %v1_e3d0, i16* %v1_e39c, align 2
  br i1 %v8_e3cc, label %dec_label_pc_e400, label %dec_label_pc_e3d8

dec_label_pc_e3d8:                                ; preds = %bb40
  %v0_e3d8 = call i32 @__GI___errno_location()
  store i32 %v0_e3d8, i32* @r4, align 4
  %v0_e3e0 = load i32, i32* @r5, align 4
  store i32 %v0_e3e0, i32* @r0, align 4
  %v1_e3e4 = inttoptr i32 %v0_e3d8 to i32*
  %v2_e3e4 = load i32, i32* %v1_e3e4, align 4
  store i32 %v2_e3e4, i32* @r5, align 4
  %v1_e3e8 = call i32 @isatty(i32 %v0_e3e0)
  store i32 %v1_e3e8, i32* %r0.global-to-local, align 4
  %v2_e3ec = icmp eq i32 %v1_e3e8, 0
  br i1 %v2_e3ec, label %.thread7, label %bb41

bb41:                                             ; preds = %dec_label_pc_e3d8
  %v1_e3f0 = load i32, i32* @sb, align 4
  %v2_e3f0 = inttoptr i32 %v1_e3f0 to i16*
  %v3_e3f0 = load i16, i16* %v2_e3f0, align 2
  %v4_e3f0 = zext i16 %v3_e3f0 to i32
  %v2_e3f4 = or i32 %v4_e3f0, 256
  store i32 %v2_e3f4, i32* %r3.global-to-local, align 4
  %v2_e3f8 = trunc i32 %v2_e3f4 to i16
  store i16 %v2_e3f8, i16* %v2_e3f0, align 2
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_e3d8, %bb41
  %v0_e3fc = load i32, i32* @r5, align 4
  %v1_e3fc = load i32, i32* @r4, align 4
  %v2_e3fc = inttoptr i32 %v1_e3fc to i32*
  store i32 %v0_e3fc, i32* %v2_e3fc, align 4
  br label %dec_label_pc_e400

dec_label_pc_e400:                                ; preds = %bb40, %.thread7
  %v0_e400 = load i32, i32* @sb, align 4
  %v1_e400 = add i32 %v0_e400, 8
  %v2_e400 = inttoptr i32 %v1_e400 to i32*
  %v3_e400 = load i32, i32* %v2_e400, align 4
  store i32 %v3_e400, i32* %r3.global-to-local, align 4
  %v2_e404 = icmp eq i32 %v3_e400, 0
  br i1 %v2_e404, label %dec_label_pc_e40c, label %bb42

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e400
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_e410 = call i32 @malloc(i32 4096)
  store i32 %v1_e410, i32* %r0.global-to-local, align 4
  %v2_e414 = icmp eq i32 %v1_e410, 0
  %v1_e424.pre = load i32, i32* @sb, align 4
  br i1 %v2_e414, label %.thread11, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_e40c
  %v2_e418 = inttoptr i32 %v1_e424.pre to i16*
  %v3_e418 = load i16, i16* %v2_e418, align 2
  %v4_e418 = zext i16 %v3_e418 to i32
  %v2_e41c = add i32 %v1_e410, 4096
  store i32 %v2_e41c, i32* %r2.global-to-local, align 4
  %v2_e420 = or i32 %v4_e418, 16384
  store i32 %v2_e420, i32* %r3.global-to-local, align 4
  %v2_e424 = add i32 %v1_e424.pre, 8
  %v3_e424 = inttoptr i32 %v2_e424 to i32*
  store i32 %v1_e410, i32* %v3_e424, align 4
  %v1_e428 = load i32, i32* %r2.global-to-local, align 4
  %v2_e428 = load i32, i32* @sb, align 4
  %v3_e428 = add i32 %v2_e428, 12
  %v4_e428 = inttoptr i32 %v3_e428 to i32*
  store i32 %v1_e428, i32* %v4_e428, align 4
  %v1_e42c = load i32, i32* %r3.global-to-local, align 4
  %v2_e42c = trunc i32 %v1_e42c to i16
  %v3_e42c = load i32, i32* @sb, align 4
  %v4_e42c = inttoptr i32 %v3_e42c to i16*
  store i16 %v2_e42c, i16* %v4_e42c, align 2
  br label %bb42

.thread11:                                        ; preds = %dec_label_pc_e40c
  %v2_e42421 = add i32 %v1_e424.pre, 8
  %v3_e42422 = inttoptr i32 %v2_e42421 to i32*
  store i32 0, i32* %v3_e42422, align 4
  %v2_e430 = load i32, i32* @sb, align 4
  %v3_e430 = add i32 %v2_e430, 12
  %v4_e430 = inttoptr i32 %v3_e430 to i32*
  store i32 0, i32* %v4_e430, align 4
  br label %bb42

bb42:                                             ; preds = %.thread10, %dec_label_pc_e400, %.thread11
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_e43c = load i32, i32* @fp, align 4
  %v2_e43c = add i32 %v0_e43c, 60
  %v3_e43c = inttoptr i32 %v2_e43c to i32*
  %v4_e43c = load i32, i32* %v3_e43c, align 4
  store i32 %v4_e43c, i32* %r3.global-to-local, align 4
  %v2_e440 = load i32, i32* @sb, align 4
  %v3_e440 = add i32 %v2_e440, 2
  %v4_e440 = inttoptr i32 %v3_e440 to i8*
  store i8 0, i8* %v4_e440, align 1
  %v0_e444 = load i32, i32* @sb, align 4
  %v1_e444 = inttoptr i32 %v0_e444 to i16*
  %v2_e444 = load i16, i16* %v1_e444, align 2
  %v3_e444 = zext i16 %v2_e444 to i32
  store i32 %v3_e444, i32* @r2, align 4
  %v0_e448 = load i32, i32* %r3.global-to-local, align 4
  %v1_e448 = inttoptr i32 %v0_e448 to i32*
  %v2_e448 = load i32, i32* %v1_e448, align 4
  store i32 %v2_e448, i32* %r1.global-to-local, align 4
  %v1_e44c = add i32 %v0_e444, 8
  %v2_e44c = inttoptr i32 %v1_e44c to i32*
  %v3_e44c = load i32, i32* %v2_e44c, align 4
  store i32 %v3_e44c, i32* %r3.global-to-local, align 4
  %v1_e450 = and i32 %v3_e444, 8192
  %v2_e450 = icmp eq i32 %v1_e450, 0
  %v2_e454 = add i32 %v0_e444, 20
  %v3_e454 = inttoptr i32 %v2_e454 to i32*
  store i32 %v3_e44c, i32* %v3_e454, align 4
  %v0_e458 = load i32, i32* %r0.global-to-local, align 4
  %v1_e458 = load i32, i32* @sb, align 4
  %v2_e458 = add i32 %v1_e458, 44
  %v3_e458 = inttoptr i32 %v2_e458 to i32*
  store i32 %v0_e458, i32* %v3_e458, align 4
  %v0_e45c = load i32, i32* %r1.global-to-local, align 4
  %v1_e45c = load i32, i32* @sb, align 4
  %v2_e45c = add i32 %v1_e45c, 52
  %v3_e45c = inttoptr i32 %v2_e45c to i32*
  store i32 %v0_e45c, i32* %v3_e45c, align 4
  %v0_e460 = load i32, i32* %r3.global-to-local, align 4
  %v1_e460 = load i32, i32* @sb, align 4
  %v2_e460 = add i32 %v1_e460, 24
  %v3_e460 = inttoptr i32 %v2_e460 to i32*
  store i32 %v0_e460, i32* %v3_e460, align 4
  %v0_e464 = load i32, i32* %r3.global-to-local, align 4
  %v1_e464 = load i32, i32* @sb, align 4
  %v2_e464 = add i32 %v1_e464, 28
  %v3_e464 = inttoptr i32 %v2_e464 to i32*
  store i32 %v0_e464, i32* %v3_e464, align 4
  %v0_e468 = load i32, i32* %r3.global-to-local, align 4
  %v1_e468 = load i32, i32* @sb, align 4
  %v2_e468 = add i32 %v1_e468, 16
  %v3_e468 = inttoptr i32 %v2_e468 to i32*
  store i32 %v0_e468, i32* %v3_e468, align 4
  br i1 %v2_e450, label %dec_label_pc_e524, label %dec_label_pc_e470

dec_label_pc_e470:                                ; preds = %bb42
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_e474 = load i32, i32* @fp, align 4
  %v2_e474 = add i32 %v0_e474, 36
  %v3_e474 = inttoptr i32 %v2_e474 to i32*
  %v4_e474 = load i32, i32* %v3_e474, align 4
  store i32 %v4_e474, i32* %r8.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v2_e47c = add i32 %v0_e474, 112
  %v3_e47c = inttoptr i32 %v2_e47c to i32*
  %v4_e47c = load i32, i32* %v3_e47c, align 4
  store i32 %v4_e47c, i32* %r4.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_e484 = ptrtoint i32* %stack_var_-56 to i32
  %v2_e488 = add i32 %v0_e474, 76
  %v3_e488 = inttoptr i32 %v2_e488 to i32*
  %v4_e488 = load i32, i32* %v3_e488, align 4
  store i32 %v4_e474, i32* %r1.global-to-local, align 4
  store i32 %v4_e47c, i32* %r2.global-to-local, align 4
  store i32 %v2_e484, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e488)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_e4a4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e4a4, i32* %r0.global-to-local, align 4
  %v0_e4a8 = load i32, i32* @fp, align 4
  %v2_e4a8 = add i32 %v0_e4a8, 16
  %v3_e4a8 = inttoptr i32 %v2_e4a8 to i32*
  %v4_e4a8 = load i32, i32* %v3_e4a8, align 4
  call void @__pseudo_branch(i32 %v4_e4a8)
  store i32 100, i32* %r3.global-to-local, align 4
  %v0_e4b8 = load i32, i32* @fp, align 4
  %v2_e4b8 = add i32 %v0_e4b8, 100
  %v3_e4b8 = inttoptr i32 %v2_e4b8 to i32*
  %v4_e4b8 = load i32, i32* %v3_e4b8, align 4
  store i32 %v4_e4b8, i32* %r4.global-to-local, align 4
  %v0_e4bc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_e4bc, i32* %r1.global-to-local, align 4
  store i32 %v4_e4b8, i32* %r2.global-to-local, align 4
  store i32 %v2_e274, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e488)
  store i32 %v4_e4b8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e4a8)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_e4e0 = load i32, i32* @fp, align 4
  %v2_e4e0 = add i32 %v0_e4e0, 48
  %v3_e4e0 = inttoptr i32 %v2_e4e0 to i32*
  %v4_e4e0 = load i32, i32* %v3_e4e0, align 4
  store i32 %v4_e4e0, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_e4e8 = inttoptr i32 %v4_e4e0 to i32*
  %v2_e4e8 = load i32, i32* %v1_e4e8, align 4
  store i32 %v2_e4e8, i32* @r2, align 4
  store i32 %v2_e274, i32* %r0.global-to-local, align 4
  %v1_e4f0 = load i32, i32* @sb, align 4
  %v2_e4f0 = add i32 %v1_e4f0, 32
  %v3_e4f0 = inttoptr i32 %v2_e4f0 to i32*
  store i32 %v2_e4e8, i32* %v3_e4f0, align 4
  %v0_e4f4 = load i32, i32* @fp, align 4
  %v1_e4f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_e4f4 = add i32 %v1_e4f4, %v0_e4f4
  %v3_e4f4 = inttoptr i32 %v2_e4f4 to i32*
  %v4_e4f4 = load i32, i32* %v3_e4f4, align 4
  store i32 %v4_e4f4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_e4fc = load i32, i32* @sb, align 4
  %v1_e4fc = load i32, i32* @ip, align 4
  %v2_e4fc = inttoptr i32 %v1_e4fc to i32*
  store i32 %v0_e4fc, i32* %v2_e4fc, align 4
  call void @__pseudo_branch(i32 %v4_e4f4)
  store i32 %v2_e484, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e4f4)
  br label %dec_label_pc_e524

dec_label_pc_e520:                                ; preds = %dec_label_pc_e2b4, %dec_label_pc_e2a0, %dec_label_pc_e2c0
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_e524

dec_label_pc_e524:                                ; preds = %bb42, %dec_label_pc_e2f8, %dec_label_pc_e470, %dec_label_pc_e520
  %v0_e524 = load i32, i32* @sb, align 4
  store i32 %v0_e524, i32* %r0.global-to-local, align 4
  %v2_e52c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e52c, i32* @r4, align 4
  store i32 %v6_e260, i32* @r5, align 4
  store i32 %v9_e260, i32* @r6, align 4
  store i32 %v18_e260, i32* @sb, align 4
  store i32 %v24_e260, i32* @fp, align 4
  ret i32 %v0_e524

; uselistorder directives
  uselistorder i32 %v1_e424.pre, { 2, 1, 0 }
  uselistorder i32 %v0_e3b8, { 1, 2, 0 }
  uselistorder i32 %v0_e384, { 1, 0 }
  uselistorder i32 %v1_e348, { 1, 0 }
  uselistorder i32 %v0_e348, { 1, 0 }
  uselistorder i32 %v1_e330, { 1, 0, 2 }
  uselistorder i32 %v1_e2e8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 10, 9, 11, 13, 12, 15, 14, 16, 18, 17, 19, 20 }
  uselistorder i32 16384, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_open, { 1, 0 }
  uselistorder i32 131072, { 1, 0 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 5, 6, 2, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_e524, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_e520, { 2, 0, 1 }
  uselistorder label %bb42, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e400, { 1, 0 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_e378._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e320, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %dec_label_pc_e2d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e2a0, { 1, 2, 0 }
}

define i32 @function_e538(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e538:
  %tmp = ptrtoint i16* %arg1 to i32
  %v0_e538 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e538, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_e538
  %v3_e540 = and i32 %arg4, %arg3
  %v2_e544 = trunc i32 %v3_e540 to i16
  %v4_e544 = inttoptr i32 %v3_e540 to i16*
  store i16 %v2_e544, i16* %v4_e544, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_e538, %bb
  %v10_e564 = phi i32 [ %tmp, %dec_label_pc_e538 ], [ 0, %bb ]
  ret i32 %v10_e564

; uselistorder directives
  uselistorder i32 %v3_e540, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @_stdio_init(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_e56c = call i32 @__GI___errno_location()
  store i32 %v0_e56c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_e578 = inttoptr i32 %v0_e56c to i32*
  %v2_e578 = load i32, i32* %v1_e578, align 4
  store i32 %v2_e578, i32* @r6, align 4
  %v1_e57c = call i32 @isatty(i32 0)
  %v2_e584 = icmp eq i32 %v1_e57c, 0
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  br i1 %v2_e584, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_e590 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 484) to i16*), align 4
  %v7_e590 = zext i16 %v5_e590 to i32
  %v2_e594 = xor i32 %v7_e590, 256
  store i32 %v2_e594, i32* @r3, align 4
  %v2_e598 = trunc i32 %v2_e594 to i16
  store i16 %v2_e598, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 484) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_e5a0 = call i32 @isatty(i32 1)
  %v2_e5a4 = icmp eq i32 %v1_e5a0, 0
  br i1 %v2_e5a4, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_e5ac = load i32, i32* @r4, align 4
  %v2_e5b0 = add i32 %v1_e5ac, 564
  %v3_e5b0 = inttoptr i32 %v2_e5b0 to i16*
  %v4_e5b0 = load i16, i16* %v3_e5b0, align 2
  %v2_e5b4 = xor i16 %v4_e5b0, 256
  store i16 %v2_e5b4, i16* %v3_e5b0, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v0_e5bc = load i32, i32* @r6, align 4
  %v1_e5bc = load i32, i32* @r5, align 4
  %v2_e5bc = inttoptr i32 %v1_e5bc to i32*
  store i32 %v0_e5bc, i32* %v2_e5bc, align 4
  ret i32 %v1_e5a0

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r3, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37304), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_e5ec = call i32 @memcpy()
  ret i32 %v0_e5ec
}

define i32 @_stdio_term(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_e604 = load i32, i32* @r4, align 4
  store i32 %v3_e604, i32* %stack_var_-24, align 4
  store i32 100, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r6.global-to-local, align 4
  %v4_e614 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 100) to i32*), align 4
  store i32 %v4_e614, i32* @r0, align 4
  %v1_e618 = call i32 @__stdio_init_mutex(i32 %v4_e614)
  store i32 %v1_e618, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_e620 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 112) to i32*), align 4
  store i32 %v4_e620, i32* @r0, align 4
  %v1_e624 = call i32 @__stdio_init_mutex(i32 %v4_e620)
  store i32 %v1_e624, i32* %r0.global-to-local, align 4
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_e62c = load i32, i32* %r6.global-to-local, align 4
  %v2_e62c = add i32 %v0_e62c, 48
  %v3_e62c = inttoptr i32 %v2_e62c to i32*
  %v4_e62c = load i32, i32* %v3_e62c, align 4
  store i32 %v4_e62c, i32* %r3.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  %v1_e634 = inttoptr i32 %v4_e62c to i32*
  %v2_e634 = load i32, i32* %v1_e634, align 4
  store i32 %v2_e634, i32* @r4, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  %v1_e6805 = add i32 %v2_e634, 56
  store i32 %v1_e6805, i32* @r5, align 4
  %v2_e6847 = icmp eq i32 %v2_e634, 0
  store i32 %v1_e6805, i32* %r0.global-to-local, align 4
  br i1 %v2_e6847, label %dec_label_pc_e690, label %dec_label_pc_e640

dec_label_pc_e640:                                ; preds = %entry, %dec_label_pc_e674.dec_label_pc_e640_crit_edge
  %v1_e640 = phi i32 [ %v1_e640.pre, %dec_label_pc_e674.dec_label_pc_e640_crit_edge ], [ 44, %entry ]
  %v0_e640 = phi i32 [ %v0_e694.pre, %dec_label_pc_e674.dec_label_pc_e640_crit_edge ], [ %v0_e62c, %entry ]
  %v2_e640 = add i32 %v0_e640, %v1_e640
  %v3_e640 = inttoptr i32 %v2_e640 to i32*
  %v4_e640 = load i32, i32* %v3_e640, align 4
  store i32 %v4_e640, i32* @ip, align 4
  store i32 58956, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_e640)
  %v0_e64c = load i32, i32* %r0.global-to-local, align 4
  %v2_e64c = icmp eq i32 %v0_e64c, 0
  %v0_e650 = load i32, i32* @r5, align 4
  store i32 %v0_e650, i32* @r0, align 4
  br i1 %v2_e64c, label %dec_label_pc_e674, label %dec_label_pc_e658

dec_label_pc_e658:                                ; preds = %dec_label_pc_e640
  %v0_e658 = load i32, i32* @r4, align 4
  %v1_e658 = add i32 %v0_e658, 8
  %v2_e658 = inttoptr i32 %v1_e658 to i32*
  %v3_e658 = load i32, i32* %v2_e658, align 4
  store i32 %v3_e658, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v2_e660 = add i32 %v0_e658, 20
  %v3_e660 = inttoptr i32 %v2_e660 to i32*
  store i32 %v3_e658, i32* %v3_e660, align 4
  %v0_e664 = load i32, i32* %r2.global-to-local, align 4
  %v1_e664 = trunc i32 %v0_e664 to i16
  %v2_e664 = load i32, i32* @r4, align 4
  %v3_e664 = inttoptr i32 %v2_e664 to i16*
  store i16 %v1_e664, i16* %v3_e664, align 2
  %v0_e668 = load i32, i32* %r3.global-to-local, align 4
  %v1_e668 = load i32, i32* @r4, align 4
  %v2_e668 = add i32 %v1_e668, 24
  %v3_e668 = inttoptr i32 %v2_e668 to i32*
  store i32 %v0_e668, i32* %v3_e668, align 4
  %v0_e66c = load i32, i32* %r3.global-to-local, align 4
  %v1_e66c = load i32, i32* @r4, align 4
  %v2_e66c = add i32 %v1_e66c, 28
  %v3_e66c = inttoptr i32 %v2_e66c to i32*
  store i32 %v0_e66c, i32* %v3_e66c, align 4
  %v0_e670 = load i32, i32* %r3.global-to-local, align 4
  %v1_e670 = load i32, i32* @r4, align 4
  %v2_e670 = add i32 %v1_e670, 16
  %v3_e670 = inttoptr i32 %v2_e670 to i32*
  store i32 %v0_e670, i32* %v3_e670, align 4
  br label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %dec_label_pc_e640, %dec_label_pc_e658
  %v0_e674 = load i32, i32* %r7.global-to-local, align 4
  %v1_e674 = load i32, i32* @r4, align 4
  %v2_e674 = add i32 %v1_e674, 52
  %v3_e674 = inttoptr i32 %v2_e674 to i32*
  store i32 %v0_e674, i32* %v3_e674, align 4
  %v1_e678 = call i32 @__stdio_init_mutex(i32 %v0_e650)
  store i32 %v1_e678, i32* %r0.global-to-local, align 4
  %v0_e67c = load i32, i32* @r4, align 4
  %v1_e67c = add i32 %v0_e67c, 32
  %v2_e67c = inttoptr i32 %v1_e67c to i32*
  %v3_e67c = load i32, i32* %v2_e67c, align 4
  store i32 %v3_e67c, i32* @r4, align 4
  %v1_e680 = add i32 %v3_e67c, 56
  store i32 %v1_e680, i32* @r5, align 4
  %v2_e684 = icmp eq i32 %v3_e67c, 0
  store i32 %v1_e680, i32* %r0.global-to-local, align 4
  %v0_e694.pre = load i32, i32* %r6.global-to-local, align 4
  br i1 %v2_e684, label %dec_label_pc_e690, label %dec_label_pc_e674.dec_label_pc_e640_crit_edge

dec_label_pc_e674.dec_label_pc_e640_crit_edge:    ; preds = %dec_label_pc_e674
  %v1_e640.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e640

dec_label_pc_e690:                                ; preds = %dec_label_pc_e674, %entry
  %v1_e6c014 = phi i32 [ %v1_e6805, %entry ], [ %v1_e680, %dec_label_pc_e674 ]
  %v0_e694 = phi i32 [ %v0_e62c, %entry ], [ %v0_e694.pre, %dec_label_pc_e674 ]
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_e694 = add i32 %v0_e694, 48
  %v3_e694 = inttoptr i32 %v2_e694 to i32*
  %v4_e694 = load i32, i32* %v3_e694, align 4
  store i32 %v4_e694, i32* %r3.global-to-local, align 4
  %storemerge.in1 = inttoptr i32 %v4_e694 to i32*
  %storemerge2 = load i32, i32* %storemerge.in1, align 4
  store i32 %storemerge2, i32* %r4.global-to-local, align 4
  %v2_e6b44 = icmp eq i32 %storemerge2, 0
  br i1 %v2_e6b44, label %dec_label_pc_e6bc, label %dec_label_pc_e6a0

dec_label_pc_e6a0:                                ; preds = %dec_label_pc_e690, %dec_label_pc_e6b4
  %v1_e6a8 = phi i32 [ %storemerge, %dec_label_pc_e6b4 ], [ %storemerge2, %dec_label_pc_e690 ]
  %v1_e6a0 = inttoptr i32 %v1_e6a8 to i16*
  %v2_e6a0 = load i16, i16* %v1_e6a0, align 2
  %v3_e6a0 = zext i16 %v2_e6a0 to i32
  store i32 %v3_e6a0, i32* %r3.global-to-local, align 4
  %v1_e6a4 = and i32 %v3_e6a0, 64
  %v2_e6a4 = icmp eq i32 %v1_e6a4, 0
  br i1 %v2_e6a4, label %dec_label_pc_e6b4, label %bb

bb:                                               ; preds = %dec_label_pc_e6a0
  store i32 %v1_e6a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e6b4

dec_label_pc_e6b4:                                ; preds = %dec_label_pc_e6a0, %bb
  %v1_e6ac = xor i1 %v2_e6a4, true
  call void @__pseudo_cond_branch(i1 %v1_e6ac, i32 ptrtoint (i32* @global_var_e6d8.273 to i32))
  %v0_e6b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_e6b0 = add i32 %v0_e6b0, 32
  %storemerge.in = inttoptr i32 %v1_e6b0 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v2_e6b4 = icmp eq i32 %storemerge, 0
  br i1 %v2_e6b4, label %dec_label_pc_e6b4.dec_label_pc_e6bc_crit_edge, label %dec_label_pc_e6a0

dec_label_pc_e6b4.dec_label_pc_e6bc_crit_edge:    ; preds = %dec_label_pc_e6b4
  %v1_e6c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e6bc

dec_label_pc_e6bc:                                ; preds = %dec_label_pc_e6b4.dec_label_pc_e6bc_crit_edge, %dec_label_pc_e690
  %v1_e6c0 = phi i32 [ %v1_e6c0.pre, %dec_label_pc_e6b4.dec_label_pc_e6bc_crit_edge ], [ %v1_e6c014, %dec_label_pc_e690 ]
  %v2_e6bc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_e6bc, i32* %r4.global-to-local, align 4
  ret i32 %v1_e6c0

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_e62c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 6, 1, 2, 3, 7, 8, 4, 5, 0 }
  uselistorder label %dec_label_pc_e6b4, { 1, 0 }
  uselistorder label %dec_label_pc_e6a0, { 1, 0 }
  uselistorder label %dec_label_pc_e674, { 1, 0 }
  uselistorder label %dec_label_pc_e640, { 1, 0 }
}

define i32 @function_e6c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e6c8:
  %v0_e6c8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e6c8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_e6c8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_e6c8, %bb
  %v4_e6d4 = phi i32 [ %arg1, %dec_label_pc_e6c8 ], [ 0, %bb ]
  ret i32 %v4_e6d4

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__stdio_wcommit() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e6d8 = load i32, i32* @r4, align 4
  store i32 %v3_e6d8, i32* %stack_var_-8, align 4
  %v0_e6dc = load i32, i32* @r0, align 4
  %v1_e6dc = add i32 %v0_e6dc, 8
  %v2_e6dc = inttoptr i32 %v1_e6dc to i32*
  %v3_e6dc = load i32, i32* %v2_e6dc, align 4
  %v1_e6e0 = add i32 %v0_e6dc, 16
  %v2_e6e0 = inttoptr i32 %v1_e6e0 to i32*
  %v3_e6e0 = load i32, i32* %v2_e6e0, align 4
  %v9_e6e4 = icmp eq i32 %v3_e6e0, %v3_e6dc
  store i32 %v0_e6dc, i32* %r4.global-to-local, align 4
  br i1 %v9_e6e4, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_e6dc, i32* %v2_e6e0, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_e6f0 = xor i1 %v9_e6e4, true
  call void @__pseudo_cond_branch(i1 %v1_e6f0, i32 ptrtoint (i32* @global_var_10460.274 to i32))
  %v0_e6f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_e6f4 = add i32 %v0_e6f4, 8
  %v2_e6f4 = inttoptr i32 %v1_e6f4 to i32*
  %v3_e6f4 = load i32, i32* %v2_e6f4, align 4
  %v1_e6f8 = add i32 %v0_e6f4, 16
  %v2_e6f8 = inttoptr i32 %v1_e6f8 to i32*
  %v3_e6f8 = load i32, i32* %v2_e6f8, align 4
  %v2_e6fc = sub i32 %v3_e6f8, %v3_e6f4
  %v2_e700 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e700, i32* @r4, align 4
  ret i32 %v2_e6fc

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e708 = load i32, i32* @r4, align 4
  store i32 %v3_e708, i32* %stack_var_-16, align 4
  %v6_e708 = load i32, i32* @r5, align 4
  %v12_e708 = load i32, i32* @lr, align 4
  %v1_e70c = add i32 %arg1, 52
  %v2_e70c = inttoptr i32 %v1_e70c to i32*
  %v3_e70c = load i32, i32* %v2_e70c, align 4
  %v2_e714 = icmp eq i32 %v3_e70c, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r6.global-to-local, align 4
  br i1 %v2_e714, label %dec_label_pc_e74c, label %dec_label_pc_e728

dec_label_pc_e728:                                ; preds = %entry
  %v1_e728 = add i32 %arg1, 16
  %v2_e728 = inttoptr i32 %v1_e728 to i32*
  %v3_e728 = load i32, i32* %v2_e728, align 4
  %v1_e72c = add i32 %arg1, 24
  %v2_e72c = inttoptr i32 %v1_e72c to i32*
  %v3_e72c = load i32, i32* %v2_e72c, align 4
  %v3_e730 = icmp ult i32 %v3_e728, %v3_e72c
  br i1 %v3_e730, label %.thread, label %dec_label_pc_e740

.thread:                                          ; preds = %dec_label_pc_e728
  %v2_e734 = inttoptr i32 %v3_e728 to i8*
  %v3_e734 = load i8, i8* %v2_e734, align 1
  %v4_e734 = zext i8 %v3_e734 to i32
  store i32 %v4_e734, i32* %r4.global-to-local, align 4
  %v6_e734 = add i32 %v3_e728, 1
  store i32 %v6_e734, i32* %v2_e728, align 4
  br label %dec_label_pc_e7c0

dec_label_pc_e740:                                ; preds = %dec_label_pc_e728
  %v1_e740 = inttoptr i32 %arg1 to i16*
  %v2_e740 = call i32 @getc_unlocked(i16* %v1_e740)
  store i32 %v2_e740, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e7c0

dec_label_pc_e74c:                                ; preds = %entry
  %v1_e750 = add i32 %arg1, 56
  store i32 %v1_e750, i32* @r4, align 4
  %v4_e764 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_e764)
  %v0_e778 = load i32, i32* %r6.global-to-local, align 4
  %v2_e778 = add i32 %v0_e778, 16
  %v3_e778 = inttoptr i32 %v2_e778 to i32*
  %v4_e778 = load i32, i32* %v3_e778, align 4
  store i32 59268, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_e778)
  %v0_e784 = load i32, i32* @r5, align 4
  %v1_e784 = add i32 %v0_e784, 16
  %v2_e784 = inttoptr i32 %v1_e784 to i32*
  %v3_e784 = load i32, i32* %v2_e784, align 4
  %v1_e788 = add i32 %v0_e784, 24
  %v2_e788 = inttoptr i32 %v1_e788 to i32*
  %v3_e788 = load i32, i32* %v2_e788, align 4
  %v3_e78c = icmp ult i32 %v3_e784, %v3_e788
  br i1 %v3_e78c, label %.thread2, label %dec_label_pc_e79c

.thread2:                                         ; preds = %dec_label_pc_e74c
  %v2_e790 = inttoptr i32 %v3_e784 to i8*
  %v3_e790 = load i8, i8* %v2_e790, align 1
  %v4_e790 = zext i8 %v3_e790 to i32
  store i32 %v4_e790, i32* %r4.global-to-local, align 4
  %v6_e790 = add i32 %v3_e784, 1
  store i32 %v6_e790, i32* %v2_e784, align 4
  br label %dec_label_pc_e7a8

dec_label_pc_e79c:                                ; preds = %dec_label_pc_e74c
  %v1_e7a0 = inttoptr i32 %v0_e784 to i16*
  %v2_e7a0 = call i32 @getc_unlocked(i16* %v1_e7a0)
  store i32 %v2_e7a0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e7a8

dec_label_pc_e7a8:                                ; preds = %.thread2, %dec_label_pc_e79c
  %v0_e7b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e7b4 = add i32 %v0_e7b4, 24
  %v3_e7b4 = inttoptr i32 %v2_e7b4 to i32*
  %v4_e7b4 = load i32, i32* %v3_e7b4, align 4
  store i32 %v4_e7b4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_e7b4)
  br label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %.thread, %dec_label_pc_e740, %dec_label_pc_e7a8
  %v0_e7c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_e7c8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e7c8, i32* @r4, align 4
  store i32 %v6_e708, i32* @r5, align 4
  store i32 %v12_e708, i32* @lr, align 4
  ret i32 %v0_e7c0

; uselistorder directives
  uselistorder i32 %v3_e784, { 1, 0, 2 }
  uselistorder i32 %v3_e728, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 3, 1, 5, 4, 0, 2 }
  uselistorder label %dec_label_pc_e7c0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e7a8, { 1, 0 }
}

define i32 @function_e7d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e7d4:
  %v0_e7d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e7d4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_e7d4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_e7d4, %bb
  %v10_e7e0 = phi i32 [ %arg1, %dec_label_pc_e7d4 ], [ 0, %bb ]
  ret i32 %v10_e7e0

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_e7e4 = load i32, i32* @r4, align 4
  store i32 %v3_e7e4, i32* %stack_var_-28, align 4
  %v6_e7e4 = load i32, i32* @r5, align 4
  %v9_e7e4 = load i32, i32* @r6, align 4
  %v12_e7e4 = load i32, i32* @r7, align 4
  %v21_e7e4 = load i32, i32* @lr, align 4
  %v1_e7e8 = add i32 %arg3, 52
  %v2_e7e8 = inttoptr i32 %v1_e7e8 to i32*
  %v3_e7e8 = load i32, i32* %v2_e7e8, align 4
  %v1_e7f0 = sub i32 1, %v3_e7e8
  %v2_e7f0 = icmp ult i32 %v3_e7e8, 2
  br i1 %v2_e7f0, label %bb16, label %bb

bb:                                               ; preds = %entry
  br label %bb16

bb16:                                             ; preds = %entry, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_e7f0, %entry ]
  %v0_e7f8 = phi i32 [ 0, %bb ], [ %v1_e7f0, %entry ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_e7f8 = icmp eq i32 %v0_e7f8, 0
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_e7f8, label %dec_label_pc_e84c, label %dec_label_pc_e814

dec_label_pc_e814:                                ; preds = %bb16
  %v1_e818 = add i32 %arg3, 56
  store i32 %v1_e818, i32* @r4, align 4
  %v4_e82c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_e82c)
  %v0_e840 = load i32, i32* @r5, align 4
  %v2_e840 = add i32 %v0_e840, 16
  %v3_e840 = inttoptr i32 %v2_e840 to i32*
  %v4_e840 = load i32, i32* %v3_e840, align 4
  store i32 %v4_e840, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_e84c.284 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_e840)
  %v0_e84c.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_e850.pre = load i32, i32* @r7, align 4
  %v0_e854.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %bb16, %dec_label_pc_e814
  %v0_e854 = phi i32 [ %arg3, %bb16 ], [ %v0_e854.pre, %dec_label_pc_e814 ]
  %v0_e850 = phi i32 [ %arg2, %bb16 ], [ %v0_e850.pre, %dec_label_pc_e814 ]
  %v0_e84c = phi i32 [ %arg1, %bb16 ], [ %v0_e84c.pre, %dec_label_pc_e814 ]
  %v3_e858 = inttoptr i32 %v0_e84c to i8*
  %v4_e858 = call i32 @__GI_fgets_unlocked(i8* %v3_e858, i32 %v0_e850, i32 %v0_e854)
  %v0_e85c = load i32, i32* %sl.global-to-local, align 4
  %v2_e85c = icmp eq i32 %v0_e85c, 0
  store i32 %v4_e858, i32* %r4.global-to-local, align 4
  br i1 %v2_e85c, label %dec_label_pc_e84c..thread3_crit_edge, label %bb17

dec_label_pc_e84c..thread3_crit_edge:             ; preds = %dec_label_pc_e84c
  %v0_e878.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_e84c
  %v1_e870 = load i32, i32* @r5, align 4
  %v3_e870 = add i32 %v1_e870, 24
  %v4_e870 = inttoptr i32 %v3_e870 to i32*
  %v5_e870 = load i32, i32* %v4_e870, align 4
  store i32 %v5_e870, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_e84c..thread3_crit_edge, %bb17
  %v0_e878 = phi i32 [ %v0_e878.pre, %dec_label_pc_e84c..thread3_crit_edge ], [ %v5_e870, %bb17 ]
  %v2_e878 = xor i1 %v2_e85c, true
  call void @__pseudo_cond_branch(i1 %v2_e878, i32 %v0_e878)
  %v0_e87c = load i32, i32* %r4.global-to-local, align 4
  %v2_e884 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e884, i32* @r4, align 4
  store i32 %v6_e7e4, i32* @r5, align 4
  store i32 %v9_e7e4, i32* @r6, align 4
  store i32 %v12_e7e4, i32* @r7, align 4
  store i32 %v21_e7e4, i32* @lr, align 4
  ret i32 %v0_e87c

; uselistorder directives
  uselistorder i32 %v3_e7e8, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_e84c, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_e890(i32 %arg1) local_unnamed_addr {
dec_label_pc_e890:
  %v0_e890 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e890, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_e890
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_e890, %bb
  %v10_e89c = phi i32 [ %arg1, %dec_label_pc_e890 ], [ 0, %bb ]
  ret i32 %v10_e89c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_e8a0 = load i32, i32* @r4, align 4
  store i32 %v3_e8a0, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r6.global-to-local, align 4
  %v4_e8b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 36) to i32*), align 4
  store i32 %v4_e8b0, i32* %r8.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_e8b8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 112) to i32*), align 4
  store i32 %v4_e8b8, i32* %r4.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_e8c4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  store i32 %v4_e8c4, i32* %r7.global-to-local, align 4
  %v2_e8d0 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_e8c4)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_e8e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e8e4 = add i32 %v0_e8e4, 16
  %v3_e8e4 = inttoptr i32 %v2_e8e4 to i32*
  %v4_e8e4 = load i32, i32* %v3_e8e4, align 4
  store i32 %v4_e8e4, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e8e4)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_e8f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e8f4 = add i32 %v0_e8f4, 12
  %v3_e8f4 = inttoptr i32 %v2_e8f4 to i32*
  %v4_e8f4 = load i32, i32* %v3_e8f4, align 4
  store i32 %v4_e8f4, i32* %r3.global-to-local, align 4
  %v1_e8f8 = inttoptr i32 %v4_e8f4 to i32*
  %v2_e8f8 = load i32, i32* %v1_e8f8, align 4
  store i32 %v2_e8f8, i32* %r3.global-to-local, align 4
  %v7_e8fc = icmp eq i32 %v2_e8f8, 1
  br i1 %v7_e8fc, label %dec_label_pc_e904, label %dec_label_pc_e9c4

dec_label_pc_e904:                                ; preds = %entry
  store i32 52, i32* %r3.global-to-local, align 4
  %v2_e908 = add i32 %v0_e8f4, 52
  %v3_e908 = inttoptr i32 %v2_e908 to i32*
  %v4_e908 = load i32, i32* %v3_e908, align 4
  store i32 %v4_e908, i32* %r3.global-to-local, align 4
  %v1_e90c = inttoptr i32 %v4_e908 to i32*
  %v2_e90c = load i32, i32* %v1_e90c, align 4
  store i32 %v2_e90c, i32* %r3.global-to-local, align 4
  %tmp32 = icmp slt i32 %v2_e90c, 1
  br i1 %tmp32, label %dec_label_pc_e9c4, label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %dec_label_pc_e904
  store i32 100, i32* %r3.global-to-local, align 4
  %v2_e91c = add i32 %v0_e8f4, 100
  %v3_e91c = inttoptr i32 %v2_e91c to i32*
  %v4_e91c = load i32, i32* %v3_e91c, align 4
  store i32 %v4_e91c, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e8c4)
  call void @__pseudo_branch(i32 %v4_e8e4)
  %v0_e944 = load i32, i32* %r6.global-to-local, align 4
  %v2_e944 = add i32 %v0_e944, 48
  %v3_e944 = inttoptr i32 %v2_e944 to i32*
  %v4_e944 = load i32, i32* %v3_e944, align 4
  store i32 %v4_e944, i32* %r3.global-to-local, align 4
  %v1_e948 = inttoptr i32 %v4_e944 to i32*
  %v2_e948 = load i32, i32* %v1_e948, align 4
  store i32 %v2_e948, i32* %r4.global-to-local, align 4
  store i32 48, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_e99413 = icmp eq i32 %v2_e948, 0
  br i1 %v2_e99413, label %dec_label_pc_e9a0, label %dec_label_pc_e958

dec_label_pc_e958:                                ; preds = %dec_label_pc_e918, %dec_label_pc_e990
  %v0_e97c4 = phi i32 [ %v0_e990, %dec_label_pc_e990 ], [ %v2_e948, %dec_label_pc_e918 ]
  %v1_e958 = inttoptr i32 %v0_e97c4 to i16*
  %v2_e958 = load i16, i16* %v1_e958, align 2
  %v3_e958 = zext i16 %v2_e958 to i32
  store i32 %v3_e958, i32* %r3.global-to-local, align 4
  %v2_e95c = and i32 %v3_e958, 32816
  %v7_e960 = icmp eq i32 %v2_e95c, 48
  %v1_e964 = add i32 %v0_e97c4, 32
  %v2_e964 = inttoptr i32 %v1_e964 to i32*
  %v3_e964 = load i32, i32* %v2_e964, align 4
  store i32 %v3_e964, i32* %r5.global-to-local, align 4
  br i1 %v7_e960, label %dec_label_pc_e970, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_e958
  store i32 %v0_e97c4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e990

dec_label_pc_e970:                                ; preds = %dec_label_pc_e958
  %v0_e970 = load i32, i32* %r7.global-to-local, align 4
  %v2_e970 = icmp eq i32 %v0_e970, 0
  br i1 %v2_e970, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_e970
  %v1_e974 = load i32, i32* %r6.global-to-local, align 4
  %v2_e974 = load i32, i32* %r8.global-to-local, align 4
  %v3_e974 = add i32 %v2_e974, %v1_e974
  %v4_e974 = inttoptr i32 %v3_e974 to i32*
  %v5_e974 = load i32, i32* %v4_e974, align 4
  store i32 %v5_e974, i32* %r3.global-to-local, align 4
  %v3_e978 = inttoptr i32 %v5_e974 to i32*
  store i32 %v3_e964, i32* %v3_e978, align 4
  %v0_e97c = load i32, i32* %r4.global-to-local, align 4
  %v1_e97c = inttoptr i32 %v0_e97c to i16*
  %v2_e97c = load i16, i16* %v1_e97c, align 2
  %v3_e97c = zext i16 %v2_e97c to i32
  store i32 %v3_e97c, i32* %r3.global-to-local, align 4
  br label %bb33

bb:                                               ; preds = %dec_label_pc_e970
  %v2_e97c10 = load i16, i16* %v1_e958, align 2
  %v3_e97c11 = zext i16 %v2_e97c10 to i32
  store i32 %v3_e97c11, i32* %r3.global-to-local, align 4
  %v3_e980 = add i32 %v0_e970, 32
  %v4_e980 = inttoptr i32 %v3_e980 to i32*
  store i32 %v3_e964, i32* %v4_e980, align 4
  %v0_e984.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %.thread, %bb
  %v0_e984 = phi i32 [ %v3_e97c, %.thread ], [ %v0_e984.pre, %bb ]
  %v1_e984 = and i32 %v0_e984, 8192
  %v2_e984 = icmp eq i32 %v1_e984, 0
  br i1 %v2_e984, label %bb35, label %bb34

bb34:                                             ; preds = %bb33
  br label %bb35

bb35:                                             ; preds = %bb33, %bb34
  %v1_e98c = xor i1 %v2_e984, true
  call void @__pseudo_cond_branch(i1 %v1_e98c, i32 ptrtoint (i32* @global_var_bd80.236 to i32))
  %v0_e990.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %.thread23, %bb35
  %v0_e990 = phi i32 [ %v0_e990.pre, %bb35 ], [ %v3_e964, %.thread23 ]
  store i32 %v0_e990, i32* %r4.global-to-local, align 4
  %v2_e994 = icmp eq i32 %v0_e990, 0
  br i1 %v2_e994, label %dec_label_pc_e994.dec_label_pc_e9a0_crit_edge, label %dec_label_pc_e958

dec_label_pc_e994.dec_label_pc_e9a0_crit_edge:    ; preds = %dec_label_pc_e990
  %v0_e9ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e9a0

dec_label_pc_e9a0:                                ; preds = %dec_label_pc_e994.dec_label_pc_e9a0_crit_edge, %dec_label_pc_e918
  %v0_e9ac = phi i32 [ %v0_e9ac.pre, %dec_label_pc_e994.dec_label_pc_e9a0_crit_edge ], [ %v0_e944, %dec_label_pc_e918 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_e9ac = add i32 %v0_e9ac, 24
  %v3_e9ac = inttoptr i32 %v2_e9ac to i32*
  %v4_e9ac = load i32, i32* %v3_e9ac, align 4
  call void @__pseudo_branch(i32 %v4_e9ac)
  store i32 52, i32* %r3.global-to-local, align 4
  %v0_e9bc = load i32, i32* %r6.global-to-local, align 4
  %v2_e9bc = add i32 %v0_e9bc, 52
  %v3_e9bc = inttoptr i32 %v2_e9bc to i32*
  %v4_e9bc = load i32, i32* %v3_e9bc, align 4
  store i32 %v4_e9bc, i32* %r3.global-to-local, align 4
  %v0_e9c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_e9c0 = inttoptr i32 %v4_e9bc to i32*
  store i32 %v0_e9c0, i32* %v2_e9c0, align 4
  %v0_e9c8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e9c4

dec_label_pc_e9c4:                                ; preds = %entry, %dec_label_pc_e904, %dec_label_pc_e9a0
  %v0_e9c8 = phi i32 [ %v0_e8f4, %entry ], [ %v0_e8f4, %dec_label_pc_e904 ], [ %v0_e9c8.pre, %dec_label_pc_e9a0 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_e9c8 = add i32 %v0_e9c8, 12
  %v3_e9c8 = inttoptr i32 %v2_e9c8 to i32*
  %v4_e9c8 = load i32, i32* %v3_e9c8, align 4
  %v1_e9cc = inttoptr i32 %v4_e9c8 to i32*
  %v2_e9cc = load i32, i32* %v1_e9cc, align 4
  %v1_e9d0 = add i32 %v2_e9cc, -1
  store i32 %v1_e9d0, i32* %v1_e9cc, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_e9e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e9e4 = add i32 %v0_e9e4, 24
  %v3_e9e4 = inttoptr i32 %v2_e9e4 to i32*
  %v4_e9e4 = load i32, i32* %v3_e9e4, align 4
  store i32 %v4_e9e4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_e9e4)
  %v2_e9f4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_e9f4, i32* %r4.global-to-local, align 4
  ret i32 %v2_e8d0

; uselistorder directives
  uselistorder i32 %v0_e990, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder label %dec_label_pc_e9c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e990, { 1, 0 }
  uselistorder label %bb35, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %dec_label_pc_e958, { 1, 0 }
}

define i32 @function_ea00(i32 %arg1) local_unnamed_addr {
dec_label_pc_ea00:
  %v0_ea00 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ea00, label %bb, label %.thread8

bb:                                               ; preds = %dec_label_pc_ea00
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_ea00, %bb
  %v10_ea24 = phi i32 [ %arg1, %dec_label_pc_ea00 ], [ 0, %bb ]
  ret i32 %v10_ea24

; uselistorder directives
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-72 = alloca i32, align 4
  store i32 48, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %sb.global-to-local, align 4
  %v4_ea38 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 48) to i32*), align 4
  store i32 %v4_ea38, i32* %r3.global-to-local, align 4
  %v10_ea3c = icmp eq i32 %tmp, %v4_ea38
  store i32 %tmp, i32* %fp.global-to-local, align 4
  br i1 %v10_ea3c, label %bb, label %dec_label_pc_ea54

bb:                                               ; preds = %entry
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_ea64

dec_label_pc_ea54:                                ; preds = %entry
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_ea58 = icmp eq i16* %arg1, null
  br i1 %v2_ea58, label %dec_label_pc_ea64, label %dec_label_pc_ebcc

dec_label_pc_ea64:                                ; preds = %bb, %dec_label_pc_ea54
  %stack_var_-60.1.in = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_ea54 ]
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_ea78 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 112) to i32*), align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_ea84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v4_ea78, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_ea84)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_eaa8 = load i32, i32* %sb.global-to-local, align 4
  %v2_eaa8 = add i32 %v0_eaa8, 16
  %v3_eaa8 = inttoptr i32 %v2_eaa8 to i32*
  %v4_eaa8 = load i32, i32* %v3_eaa8, align 4
  call void @__pseudo_branch(i32 %v4_eaa8)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_eab8 = add i32 %v0_eaa8, 12
  %v3_eab8 = inttoptr i32 %v2_eab8 to i32*
  %v4_eab8 = load i32, i32* %v3_eab8, align 4
  store i32 %v4_eab8, i32* %r2.global-to-local, align 4
  %v1_eabc = inttoptr i32 %v4_eab8 to i32*
  %v2_eabc = load i32, i32* %v1_eabc, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_eac4 = add i32 %v2_eabc, 1
  store i32 %v1_eac4, i32* %r3.global-to-local, align 4
  %v2_eac8 = add i32 %v0_eaa8, 24
  %v3_eac8 = inttoptr i32 %v2_eac8 to i32*
  %v4_eac8 = load i32, i32* %v3_eac8, align 4
  store i32 %v1_eac4, i32* %v1_eabc, align 4
  call void @__pseudo_branch(i32 %v4_eac8)
  store i32 100, i32* %r3.global-to-local, align 4
  %v0_eae4 = load i32, i32* %sb.global-to-local, align 4
  %v2_eae4 = add i32 %v0_eae4, 100
  %v3_eae4 = inttoptr i32 %v2_eae4 to i32*
  %v4_eae4 = load i32, i32* %v3_eae4, align 4
  store i32 %v4_eae4, i32* @r4, align 4
  store i32 %v4_eae4, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_ea84)
  call void @__pseudo_branch(i32 %v4_eaa8)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_eb0c = load i32, i32* %sb.global-to-local, align 4
  %v2_eb0c = add i32 %v0_eb0c, 48
  %v3_eb0c = inttoptr i32 %v2_eb0c to i32*
  %v4_eb0c = load i32, i32* %v3_eb0c, align 4
  store i32 %v4_eb0c, i32* %r3.global-to-local, align 4
  %v1_eb18 = inttoptr i32 %v4_eb0c to i32*
  %v2_eb18 = load i32, i32* %v1_eb18, align 4
  store i32 %v2_eb18, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_eac8)
  %v0_eb24 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_eb24, i32* @r6, align 4
  %v2_eb28 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_eb28, i32* @r8, align 4
  store i32 76, i32* %fp.global-to-local, align 4
  %v0_ebbc.pr = load i32, i32* @r7, align 4
  %v2_ebbc20 = icmp eq i32 %v0_ebbc.pr, 0
  br i1 %v2_ebbc20, label %dec_label_pc_ebc4, label %dec_label_pc_eb30

dec_label_pc_eb30:                                ; preds = %dec_label_pc_ea64, %dec_label_pc_ebb8
  %v0_eb3c = phi i32 [ %v3_ebb8, %dec_label_pc_ebb8 ], [ %v0_ebbc.pr, %dec_label_pc_ea64 ]
  %v1_eb30 = inttoptr i32 %v0_eb3c to i16*
  %v2_eb30 = load i16, i16* %v1_eb30, align 2
  %v3_eb30 = zext i16 %v2_eb30 to i32
  store i32 %v3_eb30, i32* %r3.global-to-local, align 4
  %v1_eb34 = and i32 %v3_eb30, 64
  %v2_eb34 = icmp eq i32 %v1_eb34, 0
  br i1 %v2_eb34, label %dec_label_pc_ebb8, label %dec_label_pc_eb3c

dec_label_pc_eb3c:                                ; preds = %dec_label_pc_eb30
  %v1_eb3c = add i32 %v0_eb3c, 56
  store i32 %v1_eb3c, i32* @r4, align 4
  store i32 %v1_eb3c, i32* %r2.global-to-local, align 4
  %v0_eb4c = load i32, i32* %sb.global-to-local, align 4
  %v1_eb4c = load i32, i32* %fp.global-to-local, align 4
  %v2_eb4c = add i32 %v1_eb4c, %v0_eb4c
  %v3_eb4c = inttoptr i32 %v2_eb4c to i32*
  %v4_eb4c = load i32, i32* %v3_eb4c, align 4
  call void @__pseudo_branch(i32 %v4_eb4c)
  %v1_eb5c = load i32, i32* @r8, align 4
  %v2_eb5c = add i32 %v1_eb5c, %v0_eb4c
  %v3_eb5c = inttoptr i32 %v2_eb5c to i32*
  %v4_eb5c = load i32, i32* %v3_eb5c, align 4
  call void @__pseudo_branch(i32 %v4_eb5c)
  %v0_eb68 = load i32, i32* @r7, align 4
  %v1_eb68 = inttoptr i32 %v0_eb68 to i16*
  %v2_eb68 = load i16, i16* %v1_eb68, align 2
  %v3_eb68 = zext i16 %v2_eb68 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_eb70 = or i32 %v3_eb68, %stack_var_-60.1.in
  %v1_eb74 = xor i32 %v2_eb70, 320
  store i32 %v1_eb74, i32* %r3.global-to-local, align 4
  %v1_eb78 = and i32 %v1_eb74, 832
  %v2_eb78 = icmp eq i32 %v1_eb78, 0
  br i1 %v2_eb78, label %dec_label_pc_eb80, label %bb39

dec_label_pc_eb80:                                ; preds = %dec_label_pc_eb3c
  store i32 %v0_eb68, i32* @r0, align 4
  %v0_eb84 = call i32 @__stdio_wcommit()
  %v2_eb88 = icmp eq i32 %v0_eb84, 0
  br i1 %v2_eb88, label %.thread8, label %.thread9

.thread8:                                         ; preds = %dec_label_pc_eb80
  %v1_eb8c = load i32, i32* @r7, align 4
  %v2_eb8c = inttoptr i32 %v1_eb8c to i16*
  %v3_eb8c = load i16, i16* %v2_eb8c, align 2
  %v4_eb8c = zext i16 %v3_eb8c to i32
  store i32 %v4_eb8c, i32* %r3.global-to-local, align 4
  %v2_eb90 = add i32 %v1_eb8c, 8
  %v3_eb90 = inttoptr i32 %v2_eb90 to i32*
  %v4_eb90 = load i32, i32* %v3_eb90, align 4
  store i32 %v4_eb90, i32* %r2.global-to-local, align 4
  %v2_eb94 = and i32 %v4_eb8c, 65471
  store i32 %v2_eb94, i32* %r3.global-to-local, align 4
  %v3_eb98 = add i32 %v1_eb8c, 28
  %v4_eb98 = inttoptr i32 %v3_eb98 to i32*
  store i32 %v4_eb90, i32* %v4_eb98, align 4
  %v1_eb9c = load i32, i32* %r3.global-to-local, align 4
  %v2_eb9c = trunc i32 %v1_eb9c to i16
  %v3_eb9c = load i32, i32* @r7, align 4
  %v4_eb9c = inttoptr i32 %v3_eb9c to i16*
  store i16 %v2_eb9c, i16* %v4_eb9c, align 2
  br label %bb39

.thread9:                                         ; preds = %dec_label_pc_eb80
  store i32 -1, i32* @r6, align 4
  br label %bb39

bb39:                                             ; preds = %.thread8, %dec_label_pc_eb3c, %.thread9
  %v0_ebac = load i32, i32* %sb.global-to-local, align 4
  %v1_ebac = load i32, i32* %sl.global-to-local, align 4
  %v2_ebac = add i32 %v1_ebac, %v0_ebac
  %v3_ebac = inttoptr i32 %v2_ebac to i32*
  %v4_ebac = load i32, i32* %v3_ebac, align 4
  call void @__pseudo_branch(i32 %v4_ebac)
  %v0_ebb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ebb8

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_eb30, %bb39
  %v0_ebb8 = phi i32 [ %v0_eb3c, %dec_label_pc_eb30 ], [ %v0_ebb8.pre, %bb39 ]
  %v1_ebb8 = add i32 %v0_ebb8, 32
  %v2_ebb8 = inttoptr i32 %v1_ebb8 to i32*
  %v3_ebb8 = load i32, i32* %v2_ebb8, align 4
  store i32 %v3_ebb8, i32* @r7, align 4
  %v2_ebbc = icmp eq i32 %v3_ebb8, 0
  br i1 %v2_ebbc, label %dec_label_pc_ebc4, label %dec_label_pc_eb30

dec_label_pc_ebc4:                                ; preds = %dec_label_pc_ebb8, %dec_label_pc_ea64
  %v0_ebc4 = call i32 @_stdio_openlist_dec_use()
  %v0_ec00.pre = load i32, i32* @r6, align 4
  br label %bb41

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_ea54
  %v2_ebcc = load i16, i16* %arg1, align 2
  %v3_ebcc = zext i16 %v2_ebcc to i32
  %v1_ebd0 = and i32 %v3_ebcc, 64
  store i32 %v1_ebd0, i32* %r3.global-to-local, align 4
  %v2_ebd0 = icmp eq i32 %v1_ebd0, 0
  br i1 %v2_ebd0, label %bb40, label %dec_label_pc_ebdc

bb40:                                             ; preds = %dec_label_pc_ebcc
  br label %bb41

dec_label_pc_ebdc:                                ; preds = %dec_label_pc_ebcc
  %v0_ebdc = call i32 @__stdio_wcommit()
  %v2_ebe0 = icmp eq i32 %v0_ebdc, 0
  br i1 %v2_ebe0, label %.thread16, label %.thread18

.thread18:                                        ; preds = %dec_label_pc_ebdc
  br label %bb41

.thread16:                                        ; preds = %dec_label_pc_ebdc
  %v1_ebe4 = load i32, i32* %fp.global-to-local, align 4
  %v2_ebe4 = inttoptr i32 %v1_ebe4 to i16*
  %v3_ebe4 = load i16, i16* %v2_ebe4, align 2
  %v4_ebe4 = zext i16 %v3_ebe4 to i32
  store i32 %v4_ebe4, i32* %r3.global-to-local, align 4
  %v2_ebe8 = add i32 %v1_ebe4, 8
  %v3_ebe8 = inttoptr i32 %v2_ebe8 to i32*
  %v4_ebe8 = load i32, i32* %v3_ebe8, align 4
  store i32 %v4_ebe8, i32* %r2.global-to-local, align 4
  %v2_ebec = and i32 %v4_ebe4, 65471
  store i32 %v2_ebec, i32* %r3.global-to-local, align 4
  %v2_ebf0 = trunc i32 %v2_ebec to i16
  store i16 %v2_ebf0, i16* %v2_ebe4, align 2
  %v1_ebf4 = load i32, i32* %r2.global-to-local, align 4
  %v2_ebf4 = load i32, i32* %fp.global-to-local, align 4
  %v3_ebf4 = add i32 %v2_ebf4, 28
  %v4_ebf4 = inttoptr i32 %v3_ebf4 to i32*
  store i32 %v1_ebf4, i32* %v4_ebf4, align 4
  br label %bb41

bb41:                                             ; preds = %bb40, %.thread18, %dec_label_pc_ebc4, %.thread16
  %v0_ec00 = phi i32 [ -1, %.thread18 ], [ 0, %bb40 ], [ %v0_ec00.pre, %dec_label_pc_ebc4 ], [ 0, %.thread16 ]
  ret i32 %v0_ec00

; uselistorder directives
  uselistorder i32 %v3_ebb8, { 1, 2, 0 }
  uselistorder i32 %v0_eaa8, { 1, 0, 2 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 112) to i32*), { 1, 2, 0 }
  uselistorder label %bb41, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_ebb8, { 1, 0 }
  uselistorder label %bb39, { 2, 0, 1 }
  uselistorder label %dec_label_pc_eb30, { 1, 0 }
  uselistorder label %dec_label_pc_ea64, { 1, 0 }
}

define i32 @function_ec14(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec14:
  %v0_ec14 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ec14, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_ec14
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_ec14, %bb
  %v5_ec30 = phi i32 [ %arg1, %dec_label_pc_ec14 ], [ 0, %bb ]
  ret i32 %v5_ec30

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_ec34 = load i32, i32* @r4, align 4
  store i32 %v3_ec34, i32* %stack_var_-12, align 4
  %v6_ec34 = load i32, i32* @r5, align 4
  %v9_ec34 = load i32, i32* @lr, align 4
  %v0_ec38 = load i32, i32* @r0, align 4
  %v1_ec38 = add i32 %v0_ec38, 16
  %v2_ec38 = inttoptr i32 %v1_ec38 to i32*
  %v3_ec38 = load i32, i32* %v2_ec38, align 4
  store i32 %v3_ec38, i32* %r2.global-to-local, align 4
  %v1_ec3c = add i32 %v0_ec38, 24
  %v2_ec3c = inttoptr i32 %v1_ec3c to i32*
  %v3_ec3c = load i32, i32* %v2_ec3c, align 4
  %v3_ec40 = icmp ult i32 %v3_ec38, %v3_ec3c
  store i32 %v0_ec38, i32* @r4, align 4
  br i1 %v3_ec40, label %bb, label %dec_label_pc_ec60

bb:                                               ; preds = %entry
  %v2_ec4c = inttoptr i32 %v3_ec38 to i8*
  %v3_ec4c = load i8, i8* %v2_ec4c, align 1
  %v4_ec4c = zext i8 %v3_ec4c to i32
  store i32 %v4_ec4c, i32* %r0.global-to-local, align 4
  %v6_ec4c = add i32 %v3_ec38, 1
  store i32 %v6_ec4c, i32* %r2.global-to-local, align 4
  store i32 %v6_ec4c, i32* %v2_ec38, align 4
  br label %dec_label_pc_ed4c

dec_label_pc_ec60:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  %v1_ec60 = inttoptr i32 %v0_ec38 to i16*
  %v2_ec60 = load i16, i16* %v1_ec60, align 2
  %v3_ec60 = zext i16 %v2_ec60 to i32
  %v1_ec64 = and i32 %v3_ec60, 131
  %tmp25 = icmp ugt i32 %v1_ec64, 128
  br i1 %tmp25, label %dec_label_pc_ec80, label %dec_label_pc_ec70

dec_label_pc_ec70:                                ; preds = %dec_label_pc_ec60
  store i32 128, i32* @r1, align 4
  %v0_ec74 = call i32 @__stdio_trans2r_o()
  store i32 %v0_ec74, i32* %r0.global-to-local, align 4
  %v2_ec78 = icmp eq i32 %v0_ec74, 0
  br i1 %v2_ec78, label %dec_label_pc_ec70.dec_label_pc_ec80_crit_edge, label %dec_label_pc_ed48

dec_label_pc_ec70.dec_label_pc_ec80_crit_edge:    ; preds = %dec_label_pc_ec70
  %v0_ec80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ec80

dec_label_pc_ec80:                                ; preds = %dec_label_pc_ec70.dec_label_pc_ec80_crit_edge, %dec_label_pc_ec60
  %v2_ecc0 = phi i32 [ %v0_ec80.pre, %dec_label_pc_ec70.dec_label_pc_ec80_crit_edge ], [ %v0_ec38, %dec_label_pc_ec60 ]
  %v1_ec80 = inttoptr i32 %v2_ecc0 to i16*
  %v2_ec80 = load i16, i16* %v1_ec80, align 2
  %v3_ec80 = zext i16 %v2_ec80 to i32
  store i32 %v3_ec80, i32* %r2.global-to-local, align 4
  %v1_ec84 = and i32 %v3_ec80, 2
  %v2_ec84 = icmp eq i32 %v1_ec84, 0
  br i1 %v2_ec84, label %dec_label_pc_ecb0, label %dec_label_pc_ec8c

dec_label_pc_ec8c:                                ; preds = %dec_label_pc_ec80
  %tmp26 = urem i16 %v2_ec80, 2
  %v1_ec8c = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_ec8c
  %v4_ec90 = and i32 %tmp22, 4
  %v5_ec90 = add i32 %v4_ec90, %v2_ecc0
  %v1_ec94 = add i32 %v5_ec90, 36
  %v2_ec94 = inttoptr i32 %v1_ec94 to i8*
  %v3_ec94 = load i8, i8* %v2_ec94, align 1
  %v4_ec94 = zext i8 %v3_ec94 to i32
  %v1_ec98 = add nsw i32 %v3_ec80, -1
  store i32 %v1_ec98, i32* %r2.global-to-local, align 4
  store i32 %v4_ec94, i32* %r0.global-to-local, align 4
  %v2_eca4 = add i32 %v2_ecc0, 40
  %v3_eca4 = inttoptr i32 %v2_eca4 to i32*
  store i32 0, i32* %v3_eca4, align 4
  %v0_eca8 = load i32, i32* %r2.global-to-local, align 4
  %v1_eca8 = trunc i32 %v0_eca8 to i16
  %v2_eca8 = load i32, i32* @r4, align 4
  %v3_eca8 = inttoptr i32 %v2_eca8 to i16*
  store i16 %v1_eca8, i16* %v3_eca8, align 2
  br label %dec_label_pc_ed4c

dec_label_pc_ecb0:                                ; preds = %dec_label_pc_ec80
  %v1_ecb0 = add i32 %v2_ecc0, 16
  %v1_ecb4 = inttoptr i32 %v1_ecb0 to i32*
  %v2_ecb4 = load i32, i32* %v1_ecb4, align 4
  %v3_ecb4 = add i32 %v2_ecc0, 20
  %v4_ecb4 = inttoptr i32 %v3_ecb4 to i32*
  %v5_ecb4 = load i32, i32* %v4_ecb4, align 4
  %v9_ecb8 = icmp eq i32 %v5_ecb4, %v2_ecb4
  br i1 %v9_ecb8, label %dec_label_pc_ecc8, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_ecb0
  %v2_ecbc = inttoptr i32 %v2_ecb4 to i8*
  %v3_ecbc = load i8, i8* %v2_ecbc, align 1
  %v4_ecbc = zext i8 %v3_ecbc to i32
  store i32 %v4_ecbc, i32* %r0.global-to-local, align 4
  %v6_ecbc = add i32 %v2_ecb4, 1
  store i32 %v6_ecbc, i32* %v1_ecb4, align 4
  br label %dec_label_pc_ed4c

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ecb0
  %v1_ecc8 = add i32 %v2_ecc0, 4
  %v2_ecc8 = inttoptr i32 %v1_ecc8 to i32*
  %v3_ecc8 = load i32, i32* %v2_ecc8, align 4
  %v7_eccc = icmp eq i32 %v3_ecc8, -2
  br i1 %v7_eccc, label %.thread7, label %dec_label_pc_ece0

.thread7:                                         ; preds = %dec_label_pc_ecc8
  %v2_ecd0 = or i16 %v2_ec80, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_ecd0, i16* %v1_ec80, align 2
  br label %dec_label_pc_ed4c

dec_label_pc_ece0:                                ; preds = %dec_label_pc_ecc8
  %v1_ece0 = and i32 %v3_ec80, 768
  %v2_ece0 = icmp eq i32 %v1_ece0, 0
  br i1 %v2_ece0, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_ece0
  %v1_ece8 = load i32, i32* @r5, align 4
  %v3_ece8 = add i32 %v1_ece8, 48
  %v4_ece8 = inttoptr i32 %v3_ece8 to i32*
  %v5_ece8 = load i32, i32* %v4_ece8, align 4
  store i32 %v5_ece8, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_ece0, %bb23
  %v1_ecec = xor i1 %v2_ece0, true
  call void @__pseudo_cond_branch(i1 %v1_ecec, i32 ptrtoint (i32* @global_var_ea28.243 to i32))
  %v0_ecf0 = load i32, i32* @r4, align 4
  %v1_ecf0 = add i32 %v0_ecf0, 8
  store i32 %v1_ecf0, i32* %r2.global-to-local, align 4
  %v1_ecf4 = inttoptr i32 %v1_ecf0 to i32*
  %v2_ecf4 = load i32, i32* %v1_ecf4, align 4
  store i32 %v2_ecf4, i32* %r2.global-to-local, align 4
  %v3_ecf4 = add i32 %v0_ecf0, 12
  %v4_ecf4 = inttoptr i32 %v3_ecf4 to i32*
  %v5_ecf4 = load i32, i32* %v4_ecf4, align 4
  %v9_ecf8 = icmp eq i32 %v5_ecf4, %v2_ecf4
  br i1 %v9_ecf8, label %dec_label_pc_ed2c, label %dec_label_pc_ed00

dec_label_pc_ed00:                                ; preds = %.thread9
  %v2_ed00 = add i32 %v0_ecf0, 24
  %v3_ed00 = inttoptr i32 %v2_ed00 to i32*
  store i32 %v2_ecf4, i32* %v3_ed00, align 4
  %v0_ed04 = load i32, i32* @r4, align 4
  store i32 %v0_ed04, i32* %r0.global-to-local, align 4
  %v2_ed08 = call i32 @__stdio_rfill(i32 %v0_ed04)
  store i32 %v2_ed08, i32* %r0.global-to-local, align 4
  %v2_ed0c = icmp eq i32 %v2_ed08, 0
  br i1 %v2_ed0c, label %dec_label_pc_ed48, label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %dec_label_pc_ed00
  %v0_ed14 = load i32, i32* @r4, align 4
  %v1_ed14 = add i32 %v0_ed14, 20
  %v2_ed14 = inttoptr i32 %v1_ed14 to i32*
  %v3_ed14 = load i32, i32* %v2_ed14, align 4
  %v2_ed18 = add i32 %v0_ed14, 24
  %v3_ed18 = inttoptr i32 %v2_ed18 to i32*
  store i32 %v3_ed14, i32* %v3_ed18, align 4
  %v0_ed1c = load i32, i32* @r4, align 4
  %v1_ed1c = add i32 %v0_ed1c, 16
  %v2_ed1c = inttoptr i32 %v1_ed1c to i32*
  %v3_ed1c = load i32, i32* %v2_ed1c, align 4
  %v1_ed20 = inttoptr i32 %v3_ed1c to i8*
  %v2_ed20 = load i8, i8* %v1_ed20, align 1
  %v3_ed20 = zext i8 %v2_ed20 to i32
  store i32 %v3_ed20, i32* %r0.global-to-local, align 4
  %v5_ed20 = add i32 %v3_ed1c, 1
  store i32 %v5_ed20, i32* %v2_ed1c, align 4
  br label %dec_label_pc_ed4c

dec_label_pc_ed2c:                                ; preds = %.thread9
  %v1_ed2c = inttoptr i32 %v0_ecf0 to i16*
  store i32 %v0_ecf0, i32* %r0.global-to-local, align 4
  %v2_ed30 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_ed38 = call i32 @__stdio_READ(i16* %v1_ed2c, i32 %v2_ed30, i32 1)
  store i32 %v5_ed38, i32* %r0.global-to-local, align 4
  %v2_ed3c = icmp eq i32 %v5_ed38, 0
  br i1 %v2_ed3c, label %dec_label_pc_ed48, label %bb24

bb24:                                             ; preds = %dec_label_pc_ed2c
  %v4_ed40 = load i8, i8* %stack_var_-17, align 1
  %v5_ed40 = sext i8 %v4_ed40 to i32
  store i32 %v5_ed40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed4c

dec_label_pc_ed48:                                ; preds = %dec_label_pc_ed2c, %dec_label_pc_ec70, %dec_label_pc_ed00
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed4c

dec_label_pc_ed4c:                                ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_ed14, %dec_label_pc_ec8c, %dec_label_pc_ed48
  %v2_ed50 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ed50, i32* @r4, align 4
  store i32 %v6_ec34, i32* @r5, align 4
  store i32 %v9_ec34, i32* @lr, align 4
  %v1_ed54 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_ed54

; uselistorder directives
  uselistorder i32 %v2_ecb4, { 1, 0, 2 }
  uselistorder i32 %v2_ecc0, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_ec38, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder label %dec_label_pc_ed4c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_ed48, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_ed60 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed64 = icmp eq i32 %arg2, 0
  store i1 %v2_ed64, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_edec, label %dec_label_pc_edd4.preheader

dec_label_pc_edd4.preheader:                      ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_edd42 = add i32 %arg2, -1
  store i32 %v1_edd42, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_edd48 = icmp eq i32 %arg2, 1
  store i1 %v7_edd48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edd48, label %dec_label_pc_eddc, label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_edd4.preheader, %dec_label_pc_edd4.backedge.dec_label_pc_ed80_crit_edge
  %v0_eda4 = phi i32 [ %v0_ed80.pre, %dec_label_pc_edd4.backedge.dec_label_pc_ed80_crit_edge ], [ %arg3, %dec_label_pc_edd4.preheader ]
  %v1_ed80 = add i32 %v0_eda4, 16
  %v2_ed80 = inttoptr i32 %v1_ed80 to i32*
  %v3_ed80 = load i32, i32* %v2_ed80, align 4
  store i32 %v3_ed80, i32* %r2.global-to-local, align 4
  %v1_ed84 = add i32 %v0_eda4, 24
  %v2_ed84 = inttoptr i32 %v1_ed84 to i32*
  %v3_ed84 = load i32, i32* %v2_ed84, align 4
  store i32 %v3_ed84, i32* %r3.global-to-local, align 4
  %v3_ed88 = icmp uge i32 %v3_ed80, %v3_ed84
  store i1 %v3_ed88, i1* %cpsr_c.global-to-local, align 1
  %v9_ed88 = icmp eq i32 %v3_ed80, %v3_ed84
  store i1 %v9_ed88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ed88, label %dec_label_pc_eda4, label %dec_label_pc_ed90

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed80
  %v1_ed90 = inttoptr i32 %v3_ed80 to i8*
  %v2_ed90 = load i8, i8* %v1_ed90, align 1
  %v3_ed90 = zext i8 %v2_ed90 to i32
  store i32 %v3_ed90, i32* %r3.global-to-local, align 4
  %v5_ed90 = add i32 %v3_ed80, 1
  store i32 %v5_ed90, i32* %r2.global-to-local, align 4
  %v2_ed94 = load i32, i32* @r5, align 4
  %v3_ed94 = inttoptr i32 %v2_ed94 to i8*
  store i8 %v2_ed90, i8* %v3_ed94, align 1
  %v4_ed94 = load i32, i32* @r5, align 4
  %v5_ed94 = add i32 %v4_ed94, 1
  store i32 %v5_ed94, i32* @r5, align 4
  %v0_ed98 = load i32, i32* %r3.global-to-local, align 4
  %v2_ed98 = icmp ugt i32 %v0_ed98, 9
  store i1 %v2_ed98, i1* %cpsr_c.global-to-local, align 1
  %v7_ed98 = icmp eq i32 %v0_ed98, 10
  store i1 %v7_ed98, i1* %cpsr_z.global-to-local, align 1
  %v0_ed9c = load i32, i32* %r2.global-to-local, align 4
  %v1_ed9c = load i32, i32* @r4, align 4
  %v2_ed9c = add i32 %v1_ed9c, 16
  %v3_ed9c = inttoptr i32 %v2_ed9c to i32*
  store i32 %v0_ed9c, i32* %v3_ed9c, align 4
  br i1 %v7_ed98, label %dec_label_pc_eddc, label %dec_label_pc_edd4.backedge

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed80
  %v1_eda4 = inttoptr i32 %v0_eda4 to i16*
  %v3_eda8 = call i32 @getc_unlocked(i16* %v1_eda4)
  %v3_edac = icmp eq i32 %v3_eda8, -1
  store i1 %v3_edac, i1* %cpsr_c.global-to-local, align 1
  %v8_edac = icmp eq i32 %v3_eda8, -1
  store i1 %v8_edac, i1* %cpsr_z.global-to-local, align 1
  %v1_edb0 = urem i32 %v3_eda8, 256
  store i32 %v1_edb0, i32* %r3.global-to-local, align 4
  br i1 %v3_edac, label %dec_label_pc_edb8, label %dec_label_pc_edd0

dec_label_pc_edb8:                                ; preds = %dec_label_pc_eda4
  %v0_edb8 = load i32, i32* @r4, align 4
  %v1_edb8 = inttoptr i32 %v0_edb8 to i16*
  %v2_edb8 = load i16, i16* %v1_edb8, align 2
  %v3_edb8 = zext i16 %v2_edb8 to i32
  store i32 %v3_edb8, i32* %r3.global-to-local, align 4
  %v1_edbc = and i32 %v3_edb8, 8
  %v2_edbc = icmp eq i32 %v1_edbc, 0
  store i1 %v2_edbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edbc, label %dec_label_pc_eddc, label %dec_label_pc_edec

dec_label_pc_edd0:                                ; preds = %dec_label_pc_eda4
  %v1_edc8 = trunc i32 %v3_eda8 to i8
  %v2_edc8 = load i32, i32* @r5, align 4
  %v3_edc8 = inttoptr i32 %v2_edc8 to i8*
  store i8 %v1_edc8, i8* %v3_edc8, align 1
  %v4_edc8 = load i32, i32* @r5, align 4
  %v5_edc8 = add i32 %v4_edc8, 1
  store i32 %v5_edc8, i32* @r5, align 4
  %v0_edcc = load i32, i32* %r3.global-to-local, align 4
  %v2_edcc = icmp ugt i32 %v0_edcc, 9
  store i1 %v2_edcc, i1* %cpsr_c.global-to-local, align 1
  %v7_edcc = icmp eq i32 %v0_edcc, 10
  store i1 %v7_edcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edcc, label %dec_label_pc_eddc, label %dec_label_pc_edd4.backedge

dec_label_pc_edd4.backedge:                       ; preds = %dec_label_pc_edd0, %dec_label_pc_ed90
  %v0_edd4 = load i32, i32* %r6.global-to-local, align 4
  %v1_edd4 = add i32 %v0_edd4, -1
  store i32 %v1_edd4, i32* %r6.global-to-local, align 4
  %v2_edd4 = icmp ne i32 %v0_edd4, 0
  store i1 %v2_edd4, i1* %cpsr_c.global-to-local, align 1
  %v7_edd4 = icmp eq i32 %v0_edd4, 1
  store i1 %v7_edd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edd4, label %dec_label_pc_eddc, label %dec_label_pc_edd4.backedge.dec_label_pc_ed80_crit_edge

dec_label_pc_edd4.backedge.dec_label_pc_ed80_crit_edge: ; preds = %dec_label_pc_edd4.backedge
  %v0_ed80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ed80

dec_label_pc_eddc:                                ; preds = %dec_label_pc_edd0, %dec_label_pc_edd4.backedge, %dec_label_pc_ed90, %dec_label_pc_edd4.preheader, %dec_label_pc_edb8
  %v0_eddc = load i32, i32* @r5, align 4
  %v1_eddc = load i32, i32* @r7, align 4
  %v3_eddc = icmp uge i32 %v0_eddc, %v1_eddc
  store i1 %v3_eddc, i1* %cpsr_c.global-to-local, align 1
  %v9_eddc = icmp eq i32 %v0_eddc, %v1_eddc
  store i1 %v9_eddc, i1* %cpsr_z.global-to-local, align 1
  %v2_ede0 = xor i1 %v9_eddc, true
  %v3_ede0 = and i1 %v3_eddc, %v2_ede0
  br i1 %v3_ede0, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_eddc
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_ede4 = inttoptr i32 %v0_eddc to i8*
  store i8 0, i8* %v7_ede4, align 1
  %v0_ede8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_ede8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_eddc, %bb
  %v1_ede8 = phi i1 [ %v1_ede8.pre, %bb ], [ %v9_eddc, %dec_label_pc_eddc ]
  %v0_ede8 = phi i1 [ %v0_ede8.pre, %bb ], [ %v3_eddc, %dec_label_pc_eddc ]
  %v2_ede8 = xor i1 %v1_ede8, true
  %v3_ede8 = and i1 %v0_ede8, %v2_ede8
  br i1 %v3_ede8, label %.dec_label_pc_edf0_crit_edge, label %dec_label_pc_edec

.dec_label_pc_edf0_crit_edge:                     ; preds = %.thread14
  %v0_edf0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_edf0

dec_label_pc_edec:                                ; preds = %entry, %dec_label_pc_edb8, %.thread14
  br label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %.dec_label_pc_edf0_crit_edge, %dec_label_pc_edec
  %v0_edf0 = phi i32 [ %v0_edf0.pre, %.dec_label_pc_edf0_crit_edge ], [ 0, %dec_label_pc_edec ]
  store i32 %v6_ed60, i32* @r5, align 4
  ret i32 %v0_edf0

; uselistorder directives
  uselistorder i1 %v9_eddc, { 1, 0, 2 }
  uselistorder i32 %v1_eddc, { 1, 0 }
  uselistorder i32 %v0_eddc, { 0, 2, 1 }
  uselistorder i32 %v0_edd4, { 2, 0, 1 }
  uselistorder i32 %v0_edcc, { 1, 0 }
  uselistorder i32 %v3_eda8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ed98, { 1, 0 }
  uselistorder i32 %v3_ed80, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_eda4, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 (i16*)* @getc_unlocked, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_edf0, { 1, 0 }
  uselistorder label %dec_label_pc_edec, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_eddc, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_ed80, { 1, 0 }
}

define i32 @_memcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_ee00 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee00 = load i32, i32* %r0.global-to-local, align 4
  %v2_ee00 = sub i32 %v0_ee00, %v1_ee00
  %v3_ee00 = icmp ult i32 %v0_ee00, %v1_ee00
  %v4_ee00 = xor i32 %v1_ee00, %v0_ee00
  %v5_ee00 = xor i32 %v2_ee00, %v0_ee00
  %v6_ee00 = and i32 %v5_ee00, %v4_ee00
  %v7_ee00 = icmp slt i32 %v6_ee00, 0
  store i1 %v7_ee00, i1* %cpsr_v.global-to-local, align 1
  %v8_ee00 = icmp slt i32 %v2_ee00, 0
  store i1 %v8_ee00, i1* %cpsr_n.global-to-local, align 1
  %v9_ee00 = icmp eq i32 %v0_ee00, %v1_ee00
  store i1 %v9_ee00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ee00, label %dec_label_pc_f054, label %dec_label_pc_ee08

dec_label_pc_ee08:                                ; preds = %entry
  br i1 %v9_ee00, label %.thread130, label %bb

.thread130:                                       ; preds = %bb154, %.thread129, %bb151, %dec_label_pc_ee08
  %merge = phi i32 [ %v0_ee00, %dec_label_pc_ee08 ], [ %v2_f0e8, %bb151 ], [ %v11_f104, %bb154 ], [ %v7_f104, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_ee08
  %v5_ee0c = inttoptr i32 %v1_ee00 to i8*
  store i8* %v5_ee0c, i8** %stack_var_-8, align 4
  %v8_ee0c = load i32, i32* @lr, align 4
  %v0_ee10 = load i32, i32* @r2, align 4
  %v2_ee10 = add i32 %v0_ee10, -4
  store i32 %v2_ee10, i32* %r2.global-to-local, align 4
  %v4_ee10 = sub i32 3, %v0_ee10
  %v5_ee10 = and i32 %v4_ee10, %v0_ee10
  %v6_ee10 = icmp slt i32 %v5_ee10, 0
  store i1 %v6_ee10, i1* %cpsr_v.global-to-local, align 1
  %v7_ee10 = icmp slt i32 %v2_ee10, 0
  store i1 %v7_ee10, i1* %cpsr_n.global-to-local, align 1
  %v8_ee10 = icmp eq i32 %v0_ee10, 4
  store i1 %v8_ee10, i1* %cpsr_z.global-to-local, align 1
  %v5_ee14 = icmp slt i32 %v0_ee10, 4
  br i1 %v5_ee14, label %bb141, label %dec_label_pc_ee18

dec_label_pc_ee18:                                ; preds = %bb
  %v1_ee18 = urem i32 %v1_ee00, 4
  store i32 %v1_ee18, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_ee18 = icmp eq i32 %v1_ee18, 0
  store i1 %v2_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee18, label %dec_label_pc_ee20, label %dec_label_pc_eecc

dec_label_pc_ee20:                                ; preds = %dec_label_pc_ee18
  %v1_ee20 = urem i32 %v0_ee00, 4
  store i32 %v1_ee20, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_ee20 = icmp eq i32 %v1_ee20, 0
  store i1 %v2_ee20, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_ee00 to i2
  br i1 %v2_ee20, label %dec_label_pc_ee28, label %dec_label_pc_eefc

dec_label_pc_ee28:                                ; preds = %dec_label_pc_ee20, %dec_label_pc_eef4
  %v0_ee4094 = phi i32 [ %v1_ee00, %dec_label_pc_ee20 ], [ %v0_f01c77, %dec_label_pc_eef4 ]
  %v0_ee3c93 = phi i32 [ %v0_ee00, %dec_label_pc_ee20 ], [ %v0_eef4, %dec_label_pc_eef4 ]
  %v0_ee28 = phi i32 [ %v2_ee10, %dec_label_pc_ee20 ], [ %v2_eeec, %dec_label_pc_eef4 ]
  %v1_ee28 = add i32 %v0_ee28, -8
  store i32 %v1_ee28, i32* %r2.global-to-local, align 4
  %v3_ee28 = sub i32 7, %v0_ee28
  %v4_ee28 = and i32 %v3_ee28, %v0_ee28
  %v5_ee28 = icmp slt i32 %v4_ee28, 0
  store i1 %v5_ee28, i1* %cpsr_v.global-to-local, align 1
  %v6_ee28 = icmp slt i32 %v1_ee28, 0
  store i1 %v6_ee28, i1* %cpsr_n.global-to-local, align 1
  %v7_ee28 = icmp eq i32 %v0_ee28, 8
  store i1 %v7_ee28, i1* %cpsr_z.global-to-local, align 1
  %v2_ee2c = xor i1 %v6_ee28, %v5_ee28
  br i1 %v2_ee2c, label %dec_label_pc_ee7c, label %dec_label_pc_ee30

dec_label_pc_ee30:                                ; preds = %dec_label_pc_ee28
  %v1_ee30 = add i32 %v0_ee28, -28
  store i32 %v1_ee30, i32* %r2.global-to-local, align 4
  %v3_ee30 = sub i32 27, %v0_ee28
  %v4_ee30 = and i32 %v3_ee30, %v1_ee28
  %v5_ee30 = icmp slt i32 %v4_ee30, 0
  store i1 %v5_ee30, i1* %cpsr_v.global-to-local, align 1
  %v6_ee30 = icmp slt i32 %v1_ee30, 0
  store i1 %v6_ee30, i1* %cpsr_n.global-to-local, align 1
  %v7_ee30 = icmp eq i32 %v1_ee28, 20
  store i1 %v7_ee30, i1* %cpsr_z.global-to-local, align 1
  %v2_ee34 = xor i1 %v6_ee30, %v5_ee30
  br i1 %v2_ee34, label %dec_label_pc_ee68, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ee30
  %v0_ee38 = load i32, i32* @r4, align 4
  store i32 %v0_ee38, i32* %stack_var_-12, align 4
  br label %dec_label_pc_ee3c

dec_label_pc_ee3c:                                ; preds = %dec_label_pc_ee3c.dec_label_pc_ee3c_crit_edge, %dec_label_pc_ee38
  %v0_ee40 = phi i32 [ %v12_ee48, %dec_label_pc_ee3c.dec_label_pc_ee3c_crit_edge ], [ %v0_ee4094, %dec_label_pc_ee38 ]
  %v0_ee3c = phi i32 [ %v0_ee3c.pre, %dec_label_pc_ee3c.dec_label_pc_ee3c_crit_edge ], [ %v0_ee3c93, %dec_label_pc_ee38 ]
  %v1_ee3c = inttoptr i32 %v0_ee3c to i32*
  %v2_ee3c = load i32, i32* %v1_ee3c, align 4
  %v3_ee3c = add i32 %v0_ee3c, 4
  %v4_ee3c = inttoptr i32 %v3_ee3c to i32*
  %v5_ee3c = load i32, i32* %v4_ee3c, align 4
  store i32 %v5_ee3c, i32* %r4.global-to-local, align 4
  %v6_ee3c = add i32 %v0_ee3c, 8
  %v7_ee3c = inttoptr i32 %v6_ee3c to i32*
  %v8_ee3c = load i32, i32* %v7_ee3c, align 4
  store i32 %v8_ee3c, i32* %ip.global-to-local, align 4
  %v9_ee3c = add i32 %v0_ee3c, 12
  %v10_ee3c = inttoptr i32 %v9_ee3c to i32*
  %v11_ee3c = load i32, i32* %v10_ee3c, align 4
  store i32 %v11_ee3c, i32* %lr.global-to-local, align 4
  %v12_ee3c = add i32 %v0_ee3c, 16
  store i32 %v12_ee3c, i32* %r1.global-to-local, align 4
  %v1_ee40 = inttoptr i32 %v0_ee40 to i32*
  store i32 %v2_ee3c, i32* %v1_ee40, align 4
  %v3_ee40 = add i32 %v0_ee40, 4
  %v4_ee40 = inttoptr i32 %v3_ee40 to i32*
  %v5_ee40 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_ee40, i32* %v4_ee40, align 4
  %v6_ee40 = add i32 %v0_ee40, 8
  %v7_ee40 = inttoptr i32 %v6_ee40 to i32*
  %v8_ee40 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_ee40, i32* %v7_ee40, align 4
  %v9_ee40 = add i32 %v0_ee40, 12
  %v10_ee40 = inttoptr i32 %v9_ee40 to i32*
  %v11_ee40 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_ee40, i32* %v10_ee40, align 4
  %v12_ee40 = add i32 %v0_ee40, 16
  store i32 %v12_ee40, i32* %r0.global-to-local, align 4
  %v0_ee44 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee44 = inttoptr i32 %v0_ee44 to i32*
  %v2_ee44 = load i32, i32* %v1_ee44, align 4
  store i32 %v2_ee44, i32* @r3, align 4
  %v3_ee44 = add i32 %v0_ee44, 4
  %v4_ee44 = inttoptr i32 %v3_ee44 to i32*
  %v5_ee44 = load i32, i32* %v4_ee44, align 4
  store i32 %v5_ee44, i32* %r4.global-to-local, align 4
  %v6_ee44 = add i32 %v0_ee44, 8
  %v7_ee44 = inttoptr i32 %v6_ee44 to i32*
  %v8_ee44 = load i32, i32* %v7_ee44, align 4
  store i32 %v8_ee44, i32* @ip, align 4
  %v9_ee44 = add i32 %v0_ee44, 12
  %v10_ee44 = inttoptr i32 %v9_ee44 to i32*
  %v11_ee44 = load i32, i32* %v10_ee44, align 4
  store i32 %v11_ee44, i32* %lr.global-to-local, align 4
  %v12_ee44 = add i32 %v0_ee44, 16
  store i32 %v12_ee44, i32* %r1.global-to-local, align 4
  %v1_ee48 = inttoptr i32 %v12_ee40 to i32*
  store i32 %v2_ee44, i32* %v1_ee48, align 4
  %v3_ee48 = add i32 %v0_ee40, 20
  %v4_ee48 = inttoptr i32 %v3_ee48 to i32*
  %v5_ee48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_ee48, i32* %v4_ee48, align 4
  %v6_ee48 = add i32 %v0_ee40, 24
  %v7_ee48 = inttoptr i32 %v6_ee48 to i32*
  %v8_ee48 = load i32, i32* @ip, align 4
  store i32 %v8_ee48, i32* %v7_ee48, align 4
  %v9_ee48 = add i32 %v0_ee40, 28
  %v10_ee48 = inttoptr i32 %v9_ee48 to i32*
  %v11_ee48 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_ee48, i32* %v10_ee48, align 4
  %v12_ee48 = add i32 %v0_ee40, 32
  store i32 %v12_ee48, i32* %r0.global-to-local, align 4
  %v0_ee4c = load i32, i32* %r2.global-to-local, align 4
  %v1_ee4c = add i32 %v0_ee4c, -32
  store i32 %v1_ee4c, i32* %r2.global-to-local, align 4
  %v3_ee4c = sub i32 31, %v0_ee4c
  %v4_ee4c = and i32 %v3_ee4c, %v0_ee4c
  %v5_ee4c = icmp slt i32 %v4_ee4c, 0
  %v6_ee4c = icmp slt i32 %v1_ee4c, 0
  %v2_ee50 = xor i1 %v6_ee4c, %v5_ee4c
  br i1 %v2_ee50, label %dec_label_pc_ee54, label %dec_label_pc_ee3c.dec_label_pc_ee3c_crit_edge

dec_label_pc_ee3c.dec_label_pc_ee3c_crit_edge:    ; preds = %dec_label_pc_ee3c
  %v0_ee3c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ee3c

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee3c
  %v1_ee54 = add i32 %v0_ee4c, -16
  %v3_ee54 = add i32 %v0_ee4c, 2147483616
  %v4_ee54 = and i32 %v1_ee54, %v3_ee54
  %v5_ee54 = icmp slt i32 %v4_ee54, 0
  store i1 %v5_ee54, i1* %cpsr_v.global-to-local, align 1
  %v6_ee54 = icmp slt i32 %v1_ee54, 0
  store i1 %v6_ee54, i1* %cpsr_n.global-to-local, align 1
  %v7_ee54 = icmp eq i32 %v1_ee54, 0
  store i1 %v7_ee54, i1* %cpsr_z.global-to-local, align 1
  %v2_ee58 = xor i1 %v6_ee54, %v5_ee54
  br i1 %v2_ee58, label %bb138, label %bb137

bb137:                                            ; preds = %dec_label_pc_ee54
  %v3_ee58 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee58 = inttoptr i32 %v3_ee58 to i32*
  %v5_ee58 = load i32, i32* %v4_ee58, align 4
  store i32 %v5_ee58, i32* @r3, align 4
  %v6_ee58 = add i32 %v3_ee58, 4
  %v7_ee58 = inttoptr i32 %v6_ee58 to i32*
  %v8_ee58 = load i32, i32* %v7_ee58, align 4
  store i32 %v8_ee58, i32* %r4.global-to-local, align 4
  %v9_ee58 = add i32 %v3_ee58, 8
  %v10_ee58 = inttoptr i32 %v9_ee58 to i32*
  %v11_ee58 = load i32, i32* %v10_ee58, align 4
  store i32 %v11_ee58, i32* @ip, align 4
  %v12_ee58 = add i32 %v3_ee58, 12
  %v13_ee58 = inttoptr i32 %v12_ee58 to i32*
  %v14_ee58 = load i32, i32* %v13_ee58, align 4
  store i32 %v14_ee58, i32* %lr.global-to-local, align 4
  %v15_ee58 = add i32 %v3_ee58, 16
  store i32 %v15_ee58, i32* %r1.global-to-local, align 4
  %v4_ee5c = inttoptr i32 %v12_ee48 to i32*
  store i32 %v5_ee58, i32* %v4_ee5c, align 4
  %v6_ee5c = add i32 %v0_ee40, 36
  %v7_ee5c = inttoptr i32 %v6_ee5c to i32*
  %v8_ee5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_ee5c, i32* %v7_ee5c, align 4
  %v9_ee5c = add i32 %v0_ee40, 40
  %v10_ee5c = inttoptr i32 %v9_ee5c to i32*
  %v11_ee5c = load i32, i32* @ip, align 4
  store i32 %v11_ee5c, i32* %v10_ee5c, align 4
  %v12_ee5c = add i32 %v0_ee40, 44
  %v13_ee5c = inttoptr i32 %v12_ee5c to i32*
  %v14_ee5c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_ee5c, i32* %v13_ee5c, align 4
  %v15_ee5c = add i32 %v0_ee40, 48
  store i32 %v15_ee5c, i32* %r0.global-to-local, align 4
  %v3_ee60 = load i32, i32* %r2.global-to-local, align 4
  %v4_ee60 = add i32 %v3_ee60, -16
  store i32 %v4_ee60, i32* %r2.global-to-local, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_ee54, %bb137
  %v3_ee70102111 = phi i32 [ %v15_ee5c, %bb137 ], [ %v12_ee48, %dec_label_pc_ee54 ]
  %v0_ee68.pre = phi i32 [ %v4_ee60, %bb137 ], [ %v1_ee4c, %dec_label_pc_ee54 ]
  %v2_ee64 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ee64, i32* @r4, align 4
  br label %dec_label_pc_ee68

dec_label_pc_ee68:                                ; preds = %dec_label_pc_ee30, %bb138
  %v3_ee70101 = phi i32 [ %v0_ee4094, %dec_label_pc_ee30 ], [ %v3_ee70102111, %bb138 ]
  %v0_ee68 = phi i32 [ %v1_ee30, %dec_label_pc_ee30 ], [ %v0_ee68.pre, %bb138 ]
  %v1_ee68 = add i32 %v0_ee68, 20
  store i32 %v1_ee68, i32* %r2.global-to-local, align 4
  %v3_ee68 = sub i32 0, %v0_ee68
  %v4_ee68 = and i32 %v1_ee68, %v3_ee68
  %v5_ee68 = icmp slt i32 %v4_ee68, 0
  store i1 %v5_ee68, i1* %cpsr_v.global-to-local, align 1
  %v6_ee68 = icmp slt i32 %v1_ee68, 0
  store i1 %v6_ee68, i1* %cpsr_n.global-to-local, align 1
  %v7_ee68 = icmp eq i32 %v1_ee68, 0
  store i1 %v7_ee68, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee6c

dec_label_pc_ee6c:                                ; preds = %.thread115, %dec_label_pc_ee68
  %v0_ee7c.pre158 = phi i32 [ %v0_ee7c.pre, %.thread115 ], [ %v1_ee68, %dec_label_pc_ee68 ]
  %v3_ee70 = phi i32 [ %v3_ee7099116, %.thread115 ], [ %v3_ee70101, %dec_label_pc_ee68 ]
  %v1_ee74 = phi i1 [ %v1_ee78, %.thread115 ], [ %v5_ee68, %dec_label_pc_ee68 ]
  %v0_ee74 = phi i1 [ %v0_ee78, %.thread115 ], [ %v6_ee68, %dec_label_pc_ee68 ]
  %v2_ee6c = xor i1 %v1_ee74, %v0_ee74
  br i1 %v2_ee6c, label %.thread115, label %bb139

bb139:                                            ; preds = %dec_label_pc_ee6c
  %v3_ee6c = load i32, i32* %r1.global-to-local, align 4
  %v4_ee6c = inttoptr i32 %v3_ee6c to i32*
  %v5_ee6c = load i32, i32* %v4_ee6c, align 4
  store i32 %v5_ee6c, i32* @r3, align 4
  %v6_ee6c = add i32 %v3_ee6c, 4
  %v7_ee6c = inttoptr i32 %v6_ee6c to i32*
  %v8_ee6c = load i32, i32* %v7_ee6c, align 4
  store i32 %v8_ee6c, i32* @ip, align 4
  %v9_ee6c = add i32 %v3_ee6c, 8
  %v10_ee6c = inttoptr i32 %v9_ee6c to i32*
  %v11_ee6c = load i32, i32* %v10_ee6c, align 4
  store i32 %v11_ee6c, i32* %lr.global-to-local, align 4
  %v12_ee6c = add i32 %v3_ee6c, 12
  store i32 %v12_ee6c, i32* %r1.global-to-local, align 4
  %v4_ee70 = inttoptr i32 %v3_ee70 to i32*
  store i32 %v5_ee6c, i32* %v4_ee70, align 4
  %v6_ee70 = add i32 %v3_ee70, 4
  %v7_ee70 = inttoptr i32 %v6_ee70 to i32*
  %v8_ee70 = load i32, i32* @ip, align 4
  store i32 %v8_ee70, i32* %v7_ee70, align 4
  %v9_ee70 = add i32 %v3_ee70, 8
  %v10_ee70 = inttoptr i32 %v9_ee70 to i32*
  %v11_ee70 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_ee70, i32* %v10_ee70, align 4
  %v12_ee70 = add i32 %v3_ee70, 12
  store i32 %v12_ee70, i32* %r0.global-to-local, align 4
  %v3_ee74 = load i32, i32* %r2.global-to-local, align 4
  %v4_ee74 = add i32 %v3_ee74, -12
  store i32 %v4_ee74, i32* %r2.global-to-local, align 4
  %v6_ee74 = sub i32 11, %v3_ee74
  %v7_ee74 = and i32 %v6_ee74, %v3_ee74
  %v8_ee74 = icmp slt i32 %v7_ee74, 0
  store i1 %v8_ee74, i1* %cpsr_v.global-to-local, align 1
  %v9_ee74 = icmp slt i32 %v4_ee74, 0
  store i1 %v9_ee74, i1* %cpsr_n.global-to-local, align 1
  %v10_ee74 = icmp eq i32 %v3_ee74, 12
  store i1 %v10_ee74, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_ee6c, %bb139
  %v0_ee7c.pre = phi i32 [ %v4_ee74, %bb139 ], [ %v0_ee7c.pre158, %dec_label_pc_ee6c ]
  %v3_ee7099116 = phi i32 [ %v12_ee70, %bb139 ], [ %v3_ee70, %dec_label_pc_ee6c ]
  %v1_ee78 = phi i1 [ %v8_ee74, %bb139 ], [ %v1_ee74, %dec_label_pc_ee6c ]
  %v0_ee78 = phi i1 [ %v9_ee74, %bb139 ], [ %v0_ee74, %dec_label_pc_ee6c ]
  %v2_ee78 = xor i1 %v1_ee78, %v0_ee78
  br i1 %v2_ee78, label %dec_label_pc_ee7c, label %dec_label_pc_ee6c

dec_label_pc_ee7c:                                ; preds = %.thread115, %dec_label_pc_ee28
  %v4_ee8c = phi i32 [ %v0_ee4094, %dec_label_pc_ee28 ], [ %v3_ee7099116, %.thread115 ]
  %v0_ee7c = phi i32 [ %v1_ee28, %dec_label_pc_ee28 ], [ %v0_ee7c.pre, %.thread115 ]
  %v1_ee7c = add i32 %v0_ee7c, 8
  store i32 %v1_ee7c, i32* %r2.global-to-local, align 4
  %v3_ee7c = sub i32 0, %v0_ee7c
  %v4_ee7c = and i32 %v1_ee7c, %v3_ee7c
  %v5_ee7c = icmp slt i32 %v4_ee7c, 0
  store i1 %v5_ee7c, i1* %cpsr_v.global-to-local, align 1
  %v6_ee7c = icmp slt i32 %v1_ee7c, 0
  store i1 %v6_ee7c, i1* %cpsr_n.global-to-local, align 1
  %v7_ee7c = icmp eq i32 %v1_ee7c, 0
  store i1 %v7_ee7c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee80 = xor i1 %v6_ee7c, %v5_ee7c
  br i1 %v2_ee80, label %bb141, label %dec_label_pc_ee84

dec_label_pc_ee84:                                ; preds = %dec_label_pc_ee7c
  %v1_ee84 = add i32 %v0_ee7c, 4
  store i32 %v1_ee84, i32* %r2.global-to-local, align 4
  %v3_ee84 = sub i32 -5, %v0_ee7c
  %v4_ee84 = and i32 %v3_ee84, %v1_ee7c
  %v5_ee84 = icmp slt i32 %v4_ee84, 0
  store i1 %v5_ee84, i1* %cpsr_v.global-to-local, align 1
  %v6_ee84 = icmp slt i32 %v1_ee84, 0
  store i1 %v6_ee84, i1* %cpsr_n.global-to-local, align 1
  %v7_ee84 = icmp eq i32 %v1_ee7c, 4
  store i1 %v7_ee84, i1* %cpsr_z.global-to-local, align 1
  %v2_ee88 = xor i1 %v6_ee84, %v5_ee84
  %v3_ee88 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee88 = inttoptr i32 %v3_ee88 to i32*
  %v5_ee88 = load i32, i32* %v4_ee88, align 4
  store i32 %v5_ee88, i32* @r3, align 4
  %v7_ee88 = add i32 %v3_ee88, 4
  br i1 %v2_ee88, label %.thread122, label %bb140

.thread122:                                       ; preds = %dec_label_pc_ee84
  store i32 %v7_ee88, i32* %r1.global-to-local, align 4
  %v5_ee8c = inttoptr i32 %v4_ee8c to i32*
  store i32 %v5_ee88, i32* %v5_ee8c, align 4
  %v6_ee8c = load i32, i32* %r0.global-to-local, align 4
  %v7_ee8c = add i32 %v6_ee8c, 4
  store i32 %v7_ee8c, i32* %r0.global-to-local, align 4
  %v0_ee9c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_ee84
  %v7_ee90 = inttoptr i32 %v7_ee88 to i32*
  %v8_ee90 = load i32, i32* %v7_ee90, align 4
  store i32 %v8_ee90, i32* @ip, align 4
  %v9_ee90 = add i32 %v3_ee88, 8
  store i32 %v9_ee90, i32* %r1.global-to-local, align 4
  %v4_ee94 = inttoptr i32 %v4_ee8c to i32*
  store i32 %v5_ee88, i32* %v4_ee94, align 4
  %v6_ee94 = add i32 %v4_ee8c, 4
  %v7_ee94 = inttoptr i32 %v6_ee94 to i32*
  %v8_ee94 = load i32, i32* @ip, align 4
  store i32 %v8_ee94, i32* %v7_ee94, align 4
  %v9_ee94 = add i32 %v4_ee8c, 8
  store i32 %v9_ee94, i32* %r0.global-to-local, align 4
  %v3_ee98 = load i32, i32* %r2.global-to-local, align 4
  %v4_ee98 = add i32 %v3_ee98, -4
  store i32 %v4_ee98, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_ee7c, %bb, %dec_label_pc_f04c, %dec_label_pc_efe0, %dec_label_pc_ef74, %bb140
  %v0_ee9c = phi i32 [ %v0_ee9c.pre, %.thread122 ], [ %v2_eeec, %.thread128 ], [ %v1_ee7c, %dec_label_pc_ee7c ], [ %v2_ee10, %bb ], [ %v0_ee9c61, %dec_label_pc_f04c ], [ %v0_ee9c60, %dec_label_pc_efe0 ], [ %v0_ee9c59, %dec_label_pc_ef74 ], [ %v4_ee98, %bb140 ]
  %v1_ee9c = add i32 %v0_ee9c, 4
  store i32 %v1_ee9c, i32* %r2.global-to-local, align 4
  %v3_ee9c = sub i32 0, %v0_ee9c
  %v4_ee9c = and i32 %v1_ee9c, %v3_ee9c
  %v5_ee9c = icmp slt i32 %v4_ee9c, 0
  store i1 %v5_ee9c, i1* %cpsr_v.global-to-local, align 1
  %v6_ee9c = icmp slt i32 %v1_ee9c, 0
  store i1 %v6_ee9c, i1* %cpsr_n.global-to-local, align 1
  %v7_ee9c = icmp eq i32 %v1_ee9c, 0
  store i1 %v7_ee9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee9c, label %bb142, label %bb141.bb143_crit_edge

bb141.bb143_crit_edge:                            ; preds = %bb141
  %v0_eea4.pre = load i32, i32* @r3, align 4
  br label %bb143

bb142:                                            ; preds = %bb141
  %v3_eea0 = load i8*, i8** %stack_var_-8, align 4
  %v4_eea0 = ptrtoint i8* %v3_eea0 to i32
  store i32 %v4_eea0, i32* %r0.global-to-local, align 4
  br label %bb143

bb143:                                            ; preds = %bb141.bb143_crit_edge, %bb142
  %v0_eea4 = phi i32 [ %v0_eea4.pre, %bb141.bb143_crit_edge ], [ %v8_ee0c, %bb142 ]
  call void @__pseudo_cond_branch(i1 %v7_ee9c, i32 %v0_eea4)
  %v0_eea8 = load i32, i32* %r2.global-to-local, align 4
  %v1_eea8 = add i32 %v0_eea8, -2
  %v3_eea8 = sub i32 1, %v0_eea8
  %v4_eea8 = and i32 %v3_eea8, %v0_eea8
  %v5_eea8 = icmp slt i32 %v4_eea8, 0
  store i1 %v5_eea8, i1* %cpsr_v.global-to-local, align 1
  %v6_eea8 = icmp slt i32 %v1_eea8, 0
  store i1 %v6_eea8, i1* %cpsr_n.global-to-local, align 1
  %v7_eea8 = icmp eq i32 %v0_eea8, 2
  store i1 %v7_eea8, i1* %cpsr_z.global-to-local, align 1
  %v0_eeac = load i32, i32* %r1.global-to-local, align 4
  %v1_eeac = inttoptr i32 %v0_eeac to i8*
  %v2_eeac = load i8, i8* %v1_eeac, align 1
  %v5_eeac = add i32 %v0_eeac, 1
  store i32 %v5_eeac, i32* %r1.global-to-local, align 4
  %v2_eeb0 = load i32, i32* %r0.global-to-local, align 4
  %v3_eeb0 = inttoptr i32 %v2_eeb0 to i8*
  store i8 %v2_eeac, i8* %v3_eeb0, align 1
  %v4_eeb0 = load i32, i32* %r0.global-to-local, align 4
  %v5_eeb0 = add i32 %v4_eeb0, 1
  store i32 %v5_eeb0, i32* %r0.global-to-local, align 4
  %v0_eeb4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_eeb4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_eeb4 = xor i1 %v0_eeb4, %v1_eeb4
  br i1 %v2_eeb4, label %.thread125, label %bb144

bb144:                                            ; preds = %bb143
  %v3_eeb4 = load i32, i32* %r1.global-to-local, align 4
  %v4_eeb4 = inttoptr i32 %v3_eeb4 to i8*
  %v5_eeb4 = load i8, i8* %v4_eeb4, align 1
  %v8_eeb4 = add i32 %v3_eeb4, 1
  store i32 %v8_eeb4, i32* %r1.global-to-local, align 4
  %v6_eeb8 = inttoptr i32 %v5_eeb0 to i8*
  store i8 %v5_eeb4, i8* %v6_eeb8, align 1
  %v7_eeb8 = load i32, i32* %r0.global-to-local, align 4
  %v8_eeb8 = add i32 %v7_eeb8, 1
  store i32 %v8_eeb8, i32* %r0.global-to-local, align 4
  %v1_eebc.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_eebc.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb143, %bb144
  %v7_eec0 = phi i32 [ %v8_eeb8, %bb144 ], [ %v5_eeb0, %bb143 ]
  %v2_eec0 = phi i1 [ %v2_eebc.pre, %bb144 ], [ %v1_eeb4, %bb143 ]
  %v1_eec0 = phi i1 [ %v1_eebc.pre, %bb144 ], [ %v0_eeb4, %bb143 ]
  %v0_eebc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_eebc = xor i1 %v2_eec0, %v1_eec0
  %v4_eebc = or i1 %v0_eebc, %v3_eebc
  br i1 %v4_eebc, label %.thread126, label %bb145

bb145:                                            ; preds = %.thread125
  %v5_eebc = load i32, i32* %r1.global-to-local, align 4
  %v6_eebc = inttoptr i32 %v5_eebc to i8*
  %v7_eebc = load i8, i8* %v6_eebc, align 1
  %v10_eebc = add i32 %v5_eebc, 1
  store i32 %v10_eebc, i32* %r1.global-to-local, align 4
  %v8_eec0 = inttoptr i32 %v7_eec0 to i8*
  store i8 %v7_eebc, i8* %v8_eec0, align 1
  %v9_eec0 = load i32, i32* %r0.global-to-local, align 4
  %v10_eec0 = add i32 %v9_eec0, 1
  store i32 %v10_eec0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb145
  %v2_eec4 = load i8*, i8** %stack_var_-8, align 4
  %v3_eec4 = ptrtoint i8* %v2_eec4 to i32
  store i32 %v3_eec4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v8_ee0c)
  %v0_eecc.pre = load i32, i32* @ip, align 4
  %v0_eed4.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_eed8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_ee18, %.thread126
  %v2_eed8 = phi i32 [ %v1_ee00, %dec_label_pc_ee18 ], [ %v2_eed8.pre, %.thread126 ]
  %v0_eed4 = phi i32 [ %v0_ee00, %dec_label_pc_ee18 ], [ %v0_eed4.pre, %.thread126 ]
  %v0_eecc = phi i32 [ %v1_ee18, %dec_label_pc_ee18 ], [ %v0_eecc.pre, %.thread126 ]
  %v1_eecc = sub i32 4, %v0_eecc
  store i32 %v1_eecc, i32* @ip, align 4
  %v1_eed0 = add i32 %v1_eecc, -2
  %v3_eed0 = sub i32 1, %v1_eecc
  %v4_eed0 = and i32 %v3_eed0, %v1_eecc
  %v5_eed0 = icmp slt i32 %v4_eed0, 0
  store i1 %v5_eed0, i1* %cpsr_v.global-to-local, align 1
  %v6_eed0 = icmp slt i32 %v1_eed0, 0
  store i1 %v6_eed0, i1* %cpsr_n.global-to-local, align 1
  %v7_eed0 = icmp eq i32 %v1_eecc, 2
  store i1 %v7_eed0, i1* %cpsr_z.global-to-local, align 1
  %v1_eed4 = inttoptr i32 %v0_eed4 to i8*
  %v2_eed4 = load i8, i8* %v1_eed4, align 1
  %v3_eed4 = zext i8 %v2_eed4 to i32
  store i32 %v3_eed4, i32* @r3, align 4
  %v5_eed4 = add i32 %v0_eed4, 1
  store i32 %v5_eed4, i32* %r1.global-to-local, align 4
  %v3_eed8 = inttoptr i32 %v2_eed8 to i8*
  store i8 %v2_eed4, i8* %v3_eed8, align 1
  %v4_eed8 = load i32, i32* %r0.global-to-local, align 4
  %v5_eed8 = add i32 %v4_eed8, 1
  store i32 %v5_eed8, i32* %r0.global-to-local, align 4
  %v0_eedc = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_eedc = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_eedc = xor i1 %v0_eedc, %v1_eedc
  br i1 %v2_eedc, label %.thread127, label %bb146

bb146:                                            ; preds = %dec_label_pc_eecc
  %v3_eedc = load i32, i32* %r1.global-to-local, align 4
  %v4_eedc = inttoptr i32 %v3_eedc to i8*
  %v5_eedc = load i8, i8* %v4_eedc, align 1
  %v6_eedc = zext i8 %v5_eedc to i32
  store i32 %v6_eedc, i32* @r3, align 4
  %v8_eedc = add i32 %v3_eedc, 1
  store i32 %v8_eedc, i32* %r1.global-to-local, align 4
  %v6_eee0 = inttoptr i32 %v5_eed8 to i8*
  store i8 %v5_eedc, i8* %v6_eee0, align 1
  %v7_eee0 = load i32, i32* %r0.global-to-local, align 4
  %v8_eee0 = add i32 %v7_eee0, 1
  store i32 %v8_eee0, i32* %r0.global-to-local, align 4
  %v1_eee4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_eee4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_eecc, %bb146
  %v7_eee8 = phi i32 [ %v8_eee0, %bb146 ], [ %v5_eed8, %dec_label_pc_eecc ]
  %v2_eee8 = phi i1 [ %v2_eee4.pre, %bb146 ], [ %v1_eedc, %dec_label_pc_eecc ]
  %v1_eee8 = phi i1 [ %v1_eee4.pre, %bb146 ], [ %v0_eedc, %dec_label_pc_eecc ]
  %v0_eee4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_eee4 = xor i1 %v2_eee8, %v1_eee8
  %v4_eee4 = or i1 %v0_eee4, %v3_eee4
  br i1 %v4_eee4, label %.thread128, label %bb147

bb147:                                            ; preds = %.thread127
  %v5_eee4 = load i32, i32* %r1.global-to-local, align 4
  %v6_eee4 = inttoptr i32 %v5_eee4 to i8*
  %v7_eee4 = load i8, i8* %v6_eee4, align 1
  %v8_eee4 = zext i8 %v7_eee4 to i32
  store i32 %v8_eee4, i32* @r3, align 4
  %v10_eee4 = add i32 %v5_eee4, 1
  store i32 %v10_eee4, i32* %r1.global-to-local, align 4
  %v8_eee8 = inttoptr i32 %v7_eee8 to i8*
  store i8 %v7_eee4, i8* %v8_eee8, align 1
  %v9_eee8 = load i32, i32* %r0.global-to-local, align 4
  %v10_eee8 = add i32 %v9_eee8, 1
  store i32 %v10_eee8, i32* %r0.global-to-local, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb147
  %v0_f01c77 = phi i32 [ %v10_eee8, %bb147 ], [ %v7_eee8, %.thread127 ]
  %v0_eeec = load i32, i32* %r2.global-to-local, align 4
  %v1_eeec = load i32, i32* @ip, align 4
  %v2_eeec = sub i32 %v0_eeec, %v1_eeec
  store i32 %v2_eeec, i32* %r2.global-to-local, align 4
  %v4_eeec = xor i32 %v1_eeec, %v0_eeec
  %v5_eeec = xor i32 %v2_eeec, %v0_eeec
  %v6_eeec = and i32 %v5_eeec, %v4_eeec
  %v7_eeec = icmp slt i32 %v6_eeec, 0
  store i1 %v7_eeec, i1* %cpsr_v.global-to-local, align 1
  %v8_eeec = icmp slt i32 %v2_eeec, 0
  store i1 %v8_eeec, i1* %cpsr_n.global-to-local, align 1
  %v9_eeec = icmp eq i32 %v0_eeec, %v1_eeec
  store i1 %v9_eeec, i1* %cpsr_z.global-to-local, align 1
  %v2_eef0 = xor i1 %v8_eeec, %v7_eeec
  br i1 %v2_eef0, label %bb141, label %dec_label_pc_eef4

dec_label_pc_eef4:                                ; preds = %.thread128
  %v0_eef4 = load i32, i32* %r1.global-to-local, align 4
  %v1_eef4 = urem i32 %v0_eef4, 4
  store i32 %v1_eef4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_eef4 = icmp eq i32 %v1_eef4, 0
  store i1 %v2_eef4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_eef4 to i2
  br i1 %v2_eef4, label %dec_label_pc_ee28, label %dec_label_pc_eefc

dec_label_pc_eefc:                                ; preds = %dec_label_pc_ee20, %dec_label_pc_eef4
  %v0_f01c76 = phi i32 [ %v1_ee00, %dec_label_pc_ee20 ], [ %v0_f01c77, %dec_label_pc_eef4 ]
  %v0_ef84 = phi i32 [ %v2_ee10, %dec_label_pc_ee20 ], [ %v2_eeec, %dec_label_pc_eef4 ]
  %v0_ef04.off0 = phi i2 [ %extract.t, %dec_label_pc_ee20 ], [ %extract.t131, %dec_label_pc_eef4 ]
  %v0_eefc = phi i32 [ %v0_ee00, %dec_label_pc_ee20 ], [ %v0_eef4, %dec_label_pc_eef4 ]
  %v1_eefc = and i32 %v0_eefc, -4
  store i32 %v1_eefc, i32* %r1.global-to-local, align 4
  %v1_ef00 = inttoptr i32 %v1_eefc to i32*
  %v2_ef00 = load i32, i32* %v1_ef00, align 4
  store i32 %v2_ef00, i32* %lr.global-to-local, align 4
  %v4_ef00 = add i32 %v1_eefc, 4
  store i32 %v4_ef00, i32* %r1.global-to-local, align 4
  %v1_ef7c = add i32 %v0_ef84, -12
  %v3_ef7c = sub i32 11, %v0_ef84
  %v4_ef7c = and i32 %v3_ef7c, %v0_ef84
  %v5_ef7c = icmp slt i32 %v4_ef7c, 0
  store i1 %v5_ef7c, i1* %cpsr_v.global-to-local, align 1
  %v6_ef7c = icmp slt i32 %v1_ef7c, 0
  store i1 %v6_ef7c, i1* %cpsr_n.global-to-local, align 1
  %v7_ef7c = icmp eq i32 %v0_ef84, 12
  store i1 %v7_ef7c, i1* %cpsr_z.global-to-local, align 1
  %v2_ef80 = xor i1 %v6_ef7c, %v5_ef7c
  switch i2 %v0_ef04.off0, label %dec_label_pc_ef10 [
    i2 -1, label %dec_label_pc_efe8
    i2 -2, label %dec_label_pc_ef7c
  ]

dec_label_pc_ef10:                                ; preds = %dec_label_pc_eefc
  br i1 %v2_ef80, label %dec_label_pc_ef5c, label %dec_label_pc_ef18

dec_label_pc_ef18:                                ; preds = %dec_label_pc_ef10
  store i32 %v1_ef7c, i32* %r2.global-to-local, align 4
  %v3_ef1c = load i32, i32* @r4, align 4
  store i32 %v3_ef1c, i32* %stack_var_-16, align 4
  %v6_ef1c = load i32, i32* @r5, align 4
  store i32 %v6_ef1c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_ef20

dec_label_pc_ef20:                                ; preds = %dec_label_pc_ef20.dec_label_pc_ef20_crit_edge, %dec_label_pc_ef18
  %v0_ef44 = phi i32 [ %v12_ef44, %dec_label_pc_ef20.dec_label_pc_ef20_crit_edge ], [ %v0_f01c76, %dec_label_pc_ef18 ]
  %v0_ef24 = phi i32 [ %v0_ef24.pre, %dec_label_pc_ef20.dec_label_pc_ef20_crit_edge ], [ %v4_ef00, %dec_label_pc_ef18 ]
  %v0_ef20 = phi i32 [ %v0_ef20.pre, %dec_label_pc_ef20.dec_label_pc_ef20_crit_edge ], [ %v2_ef00, %dec_label_pc_ef18 ]
  %v3_ef20 = udiv i32 %v0_ef20, 256
  %v1_ef24 = inttoptr i32 %v0_ef24 to i32*
  %v2_ef24 = load i32, i32* %v1_ef24, align 4
  store i32 %v2_ef24, i32* %r4.global-to-local, align 4
  %v3_ef24 = add i32 %v0_ef24, 4
  %v4_ef24 = inttoptr i32 %v3_ef24 to i32*
  %v5_ef24 = load i32, i32* %v4_ef24, align 4
  store i32 %v5_ef24, i32* %r5.global-to-local, align 4
  %v6_ef24 = add i32 %v0_ef24, 8
  %v7_ef24 = inttoptr i32 %v6_ef24 to i32*
  %v8_ef24 = load i32, i32* %v7_ef24, align 4
  store i32 %v8_ef24, i32* %ip.global-to-local, align 4
  %v9_ef24 = add i32 %v0_ef24, 12
  %v10_ef24 = inttoptr i32 %v9_ef24 to i32*
  %v11_ef24 = load i32, i32* %v10_ef24, align 4
  store i32 %v11_ef24, i32* %lr.global-to-local, align 4
  %v12_ef24 = add i32 %v0_ef24, 16
  store i32 %v12_ef24, i32* %r1.global-to-local, align 4
  %v4_ef28 = mul i32 %v2_ef24, 16777216
  %v5_ef28 = or i32 %v4_ef28, %v3_ef20
  store i32 %v5_ef28, i32* @r3, align 4
  %v3_ef2c = udiv i32 %v2_ef24, 256
  %v4_ef30 = mul i32 %v5_ef24, 16777216
  %v5_ef30 = or i32 %v4_ef30, %v3_ef2c
  store i32 %v5_ef30, i32* %r4.global-to-local, align 4
  %v3_ef34 = udiv i32 %v5_ef24, 256
  %v4_ef38 = mul i32 %v8_ef24, 16777216
  %v5_ef38 = or i32 %v4_ef38, %v3_ef34
  store i32 %v5_ef38, i32* %r5.global-to-local, align 4
  %v3_ef3c = udiv i32 %v8_ef24, 256
  %v4_ef40 = mul i32 %v11_ef24, 16777216
  %v5_ef40 = or i32 %v4_ef40, %v3_ef3c
  store i32 %v5_ef40, i32* @ip, align 4
  %v1_ef44 = inttoptr i32 %v0_ef44 to i32*
  store i32 %v5_ef28, i32* %v1_ef44, align 4
  %v3_ef44 = add i32 %v0_ef44, 4
  %v4_ef44 = inttoptr i32 %v3_ef44 to i32*
  %v5_ef44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_ef44, i32* %v4_ef44, align 4
  %v6_ef44 = add i32 %v0_ef44, 8
  %v7_ef44 = inttoptr i32 %v6_ef44 to i32*
  %v8_ef44 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_ef44, i32* %v7_ef44, align 4
  %v9_ef44 = add i32 %v0_ef44, 12
  %v10_ef44 = inttoptr i32 %v9_ef44 to i32*
  %v11_ef44 = load i32, i32* @ip, align 4
  store i32 %v11_ef44, i32* %v10_ef44, align 4
  %v12_ef44 = add i32 %v0_ef44, 16
  store i32 %v12_ef44, i32* %r0.global-to-local, align 4
  %v0_ef48 = load i32, i32* %r2.global-to-local, align 4
  %v1_ef48 = add i32 %v0_ef48, -16
  store i32 %v1_ef48, i32* %r2.global-to-local, align 4
  %v3_ef48 = sub i32 15, %v0_ef48
  %v4_ef48 = and i32 %v3_ef48, %v0_ef48
  %v5_ef48 = icmp slt i32 %v4_ef48, 0
  %v6_ef48 = icmp slt i32 %v1_ef48, 0
  %v2_ef4c = xor i1 %v6_ef48, %v5_ef48
  br i1 %v2_ef4c, label %dec_label_pc_ef50, label %dec_label_pc_ef20.dec_label_pc_ef20_crit_edge

dec_label_pc_ef20.dec_label_pc_ef20_crit_edge:    ; preds = %dec_label_pc_ef20
  %v0_ef20.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ef24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef20

dec_label_pc_ef50:                                ; preds = %dec_label_pc_ef20
  %v2_ef50 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_ef50, i32* @r4, align 4
  %v5_ef50 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_ef50, i32* @r5, align 4
  %v1_ef54 = add i32 %v0_ef48, -4
  store i32 %v1_ef54, i32* %r2.global-to-local, align 4
  %v3_ef54 = add i32 %v0_ef48, 2147483632
  %v4_ef54 = and i32 %v1_ef54, %v3_ef54
  %v5_ef54 = icmp slt i32 %v4_ef54, 0
  store i1 %v5_ef54, i1* %cpsr_v.global-to-local, align 1
  %v6_ef54 = icmp slt i32 %v1_ef54, 0
  store i1 %v6_ef54, i1* %cpsr_n.global-to-local, align 1
  %v7_ef54 = icmp eq i32 %v1_ef54, 0
  store i1 %v7_ef54, i1* %cpsr_z.global-to-local, align 1
  %v2_ef58 = xor i1 %v6_ef54, %v5_ef54
  br i1 %v2_ef58, label %dec_label_pc_ef74, label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_ef50, %dec_label_pc_ef10, %dec_label_pc_ef5c
  %v1_ef68 = phi i32 [ %v4_ef68, %dec_label_pc_ef5c ], [ %v12_ef44, %dec_label_pc_ef50 ], [ %v0_f01c76, %dec_label_pc_ef10 ]
  %v0_ef5c = load i32, i32* %lr.global-to-local, align 4
  %v3_ef5c = udiv i32 %v0_ef5c, 256
  store i32 %v3_ef5c, i32* %ip.global-to-local, align 4
  %v0_ef60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ef60 = inttoptr i32 %v0_ef60 to i32*
  %v2_ef60 = load i32, i32* %v1_ef60, align 4
  store i32 %v2_ef60, i32* %lr.global-to-local, align 4
  %v4_ef60 = add i32 %v0_ef60, 4
  store i32 %v4_ef60, i32* %r1.global-to-local, align 4
  %v4_ef64 = mul i32 %v2_ef60, 16777216
  %v5_ef64 = or i32 %v4_ef64, %v3_ef5c
  store i32 %v5_ef64, i32* @ip, align 4
  %v2_ef68 = inttoptr i32 %v1_ef68 to i32*
  store i32 %v5_ef64, i32* %v2_ef68, align 4
  %v3_ef68 = load i32, i32* %r0.global-to-local, align 4
  %v4_ef68 = add i32 %v3_ef68, 4
  store i32 %v4_ef68, i32* %r0.global-to-local, align 4
  %v0_ef6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ef6c = add i32 %v0_ef6c, -4
  store i32 %v1_ef6c, i32* %r2.global-to-local, align 4
  %v3_ef6c = sub i32 3, %v0_ef6c
  %v4_ef6c = and i32 %v3_ef6c, %v0_ef6c
  %v5_ef6c = icmp slt i32 %v4_ef6c, 0
  %v6_ef6c = icmp slt i32 %v1_ef6c, 0
  %v2_ef70 = xor i1 %v6_ef6c, %v5_ef6c
  br i1 %v2_ef70, label %dec_label_pc_ef74.loopexit, label %dec_label_pc_ef5c

dec_label_pc_ef74.loopexit:                       ; preds = %dec_label_pc_ef5c
  %v7_ef6c = icmp eq i32 %v0_ef6c, 4
  store i1 %v5_ef6c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_ef6c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_ef6c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef74

dec_label_pc_ef74:                                ; preds = %dec_label_pc_ef74.loopexit, %dec_label_pc_ef50
  %v0_ee9c59 = phi i32 [ %v1_ef6c, %dec_label_pc_ef74.loopexit ], [ %v1_ef54, %dec_label_pc_ef50 ]
  %v0_ef74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ef74 = add i32 %v0_ef74, -3
  store i32 %v1_ef74, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_ef7c:                                ; preds = %dec_label_pc_eefc
  br i1 %v2_ef80, label %dec_label_pc_efc8, label %dec_label_pc_ef84

dec_label_pc_ef84:                                ; preds = %dec_label_pc_ef7c
  store i32 %v1_ef7c, i32* %r2.global-to-local, align 4
  %v3_ef88 = load i32, i32* @r4, align 4
  store i32 %v3_ef88, i32* %stack_var_-16, align 4
  %v6_ef88 = load i32, i32* @r5, align 4
  store i32 %v6_ef88, i32* %stack_var_-12, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %dec_label_pc_ef8c.dec_label_pc_ef8c_crit_edge, %dec_label_pc_ef84
  %v0_efb0 = phi i32 [ %v12_efb0, %dec_label_pc_ef8c.dec_label_pc_ef8c_crit_edge ], [ %v0_f01c76, %dec_label_pc_ef84 ]
  %v0_ef90 = phi i32 [ %v0_ef90.pre, %dec_label_pc_ef8c.dec_label_pc_ef8c_crit_edge ], [ %v4_ef00, %dec_label_pc_ef84 ]
  %v0_ef8c = phi i32 [ %v0_ef8c.pre, %dec_label_pc_ef8c.dec_label_pc_ef8c_crit_edge ], [ %v2_ef00, %dec_label_pc_ef84 ]
  %v3_ef8c = udiv i32 %v0_ef8c, 65536
  %v1_ef90 = inttoptr i32 %v0_ef90 to i32*
  %v2_ef90 = load i32, i32* %v1_ef90, align 4
  store i32 %v2_ef90, i32* %r4.global-to-local, align 4
  %v3_ef90 = add i32 %v0_ef90, 4
  %v4_ef90 = inttoptr i32 %v3_ef90 to i32*
  %v5_ef90 = load i32, i32* %v4_ef90, align 4
  store i32 %v5_ef90, i32* %r5.global-to-local, align 4
  %v6_ef90 = add i32 %v0_ef90, 8
  %v7_ef90 = inttoptr i32 %v6_ef90 to i32*
  %v8_ef90 = load i32, i32* %v7_ef90, align 4
  store i32 %v8_ef90, i32* %ip.global-to-local, align 4
  %v9_ef90 = add i32 %v0_ef90, 12
  %v10_ef90 = inttoptr i32 %v9_ef90 to i32*
  %v11_ef90 = load i32, i32* %v10_ef90, align 4
  store i32 %v11_ef90, i32* %lr.global-to-local, align 4
  %v12_ef90 = add i32 %v0_ef90, 16
  store i32 %v12_ef90, i32* %r1.global-to-local, align 4
  %v4_ef94 = mul i32 %v2_ef90, 65536
  %v5_ef94 = or i32 %v4_ef94, %v3_ef8c
  store i32 %v5_ef94, i32* @r3, align 4
  %v3_ef98 = udiv i32 %v2_ef90, 65536
  %v4_ef9c = mul i32 %v5_ef90, 65536
  %v5_ef9c = or i32 %v4_ef9c, %v3_ef98
  store i32 %v5_ef9c, i32* %r4.global-to-local, align 4
  %v3_efa0 = udiv i32 %v5_ef90, 65536
  %v4_efa4 = mul i32 %v8_ef90, 65536
  %v5_efa4 = or i32 %v4_efa4, %v3_efa0
  store i32 %v5_efa4, i32* %r5.global-to-local, align 4
  %v3_efa8 = udiv i32 %v8_ef90, 65536
  %v4_efac = mul i32 %v11_ef90, 65536
  %v5_efac = or i32 %v4_efac, %v3_efa8
  store i32 %v5_efac, i32* @ip, align 4
  %v1_efb0 = inttoptr i32 %v0_efb0 to i32*
  store i32 %v5_ef94, i32* %v1_efb0, align 4
  %v3_efb0 = add i32 %v0_efb0, 4
  %v4_efb0 = inttoptr i32 %v3_efb0 to i32*
  %v5_efb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_efb0, i32* %v4_efb0, align 4
  %v6_efb0 = add i32 %v0_efb0, 8
  %v7_efb0 = inttoptr i32 %v6_efb0 to i32*
  %v8_efb0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_efb0, i32* %v7_efb0, align 4
  %v9_efb0 = add i32 %v0_efb0, 12
  %v10_efb0 = inttoptr i32 %v9_efb0 to i32*
  %v11_efb0 = load i32, i32* @ip, align 4
  store i32 %v11_efb0, i32* %v10_efb0, align 4
  %v12_efb0 = add i32 %v0_efb0, 16
  store i32 %v12_efb0, i32* %r0.global-to-local, align 4
  %v0_efb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_efb4 = add i32 %v0_efb4, -16
  store i32 %v1_efb4, i32* %r2.global-to-local, align 4
  %v3_efb4 = sub i32 15, %v0_efb4
  %v4_efb4 = and i32 %v3_efb4, %v0_efb4
  %v5_efb4 = icmp slt i32 %v4_efb4, 0
  %v6_efb4 = icmp slt i32 %v1_efb4, 0
  %v2_efb8 = xor i1 %v6_efb4, %v5_efb4
  br i1 %v2_efb8, label %dec_label_pc_efbc, label %dec_label_pc_ef8c.dec_label_pc_ef8c_crit_edge

dec_label_pc_ef8c.dec_label_pc_ef8c_crit_edge:    ; preds = %dec_label_pc_ef8c
  %v0_ef8c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ef90.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_efbc:                                ; preds = %dec_label_pc_ef8c
  %v2_efbc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_efbc, i32* @r4, align 4
  %v5_efbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_efbc, i32* @r5, align 4
  %v1_efc0 = add i32 %v0_efb4, -4
  store i32 %v1_efc0, i32* %r2.global-to-local, align 4
  %v3_efc0 = add i32 %v0_efb4, 2147483632
  %v4_efc0 = and i32 %v1_efc0, %v3_efc0
  %v5_efc0 = icmp slt i32 %v4_efc0, 0
  store i1 %v5_efc0, i1* %cpsr_v.global-to-local, align 1
  %v6_efc0 = icmp slt i32 %v1_efc0, 0
  store i1 %v6_efc0, i1* %cpsr_n.global-to-local, align 1
  %v7_efc0 = icmp eq i32 %v1_efc0, 0
  store i1 %v7_efc0, i1* %cpsr_z.global-to-local, align 1
  %v2_efc4 = xor i1 %v6_efc0, %v5_efc0
  br i1 %v2_efc4, label %dec_label_pc_efe0, label %dec_label_pc_efc8

dec_label_pc_efc8:                                ; preds = %dec_label_pc_efbc, %dec_label_pc_ef7c, %dec_label_pc_efc8
  %v1_efd4 = phi i32 [ %v4_efd4, %dec_label_pc_efc8 ], [ %v12_efb0, %dec_label_pc_efbc ], [ %v0_f01c76, %dec_label_pc_ef7c ]
  %v0_efc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_efc8 = udiv i32 %v0_efc8, 65536
  store i32 %v3_efc8, i32* %ip.global-to-local, align 4
  %v0_efcc = load i32, i32* %r1.global-to-local, align 4
  %v1_efcc = inttoptr i32 %v0_efcc to i32*
  %v2_efcc = load i32, i32* %v1_efcc, align 4
  store i32 %v2_efcc, i32* %lr.global-to-local, align 4
  %v4_efcc = add i32 %v0_efcc, 4
  store i32 %v4_efcc, i32* %r1.global-to-local, align 4
  %v4_efd0 = mul i32 %v2_efcc, 65536
  %v5_efd0 = or i32 %v4_efd0, %v3_efc8
  store i32 %v5_efd0, i32* @ip, align 4
  %v2_efd4 = inttoptr i32 %v1_efd4 to i32*
  store i32 %v5_efd0, i32* %v2_efd4, align 4
  %v3_efd4 = load i32, i32* %r0.global-to-local, align 4
  %v4_efd4 = add i32 %v3_efd4, 4
  store i32 %v4_efd4, i32* %r0.global-to-local, align 4
  %v0_efd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_efd8 = add i32 %v0_efd8, -4
  store i32 %v1_efd8, i32* %r2.global-to-local, align 4
  %v3_efd8 = sub i32 3, %v0_efd8
  %v4_efd8 = and i32 %v3_efd8, %v0_efd8
  %v5_efd8 = icmp slt i32 %v4_efd8, 0
  %v6_efd8 = icmp slt i32 %v1_efd8, 0
  %v2_efdc = xor i1 %v6_efd8, %v5_efd8
  br i1 %v2_efdc, label %dec_label_pc_efe0.loopexit, label %dec_label_pc_efc8

dec_label_pc_efe0.loopexit:                       ; preds = %dec_label_pc_efc8
  %v7_efd8 = icmp eq i32 %v0_efd8, 4
  store i1 %v5_efd8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_efd8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_efd8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_efe0

dec_label_pc_efe0:                                ; preds = %dec_label_pc_efe0.loopexit, %dec_label_pc_efbc
  %v0_ee9c60 = phi i32 [ %v1_efd8, %dec_label_pc_efe0.loopexit ], [ %v1_efc0, %dec_label_pc_efbc ]
  %v0_efe0 = load i32, i32* %r1.global-to-local, align 4
  %v1_efe0 = add i32 %v0_efe0, -2
  store i32 %v1_efe0, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_efe8:                                ; preds = %dec_label_pc_eefc
  br i1 %v2_ef80, label %dec_label_pc_f034, label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %dec_label_pc_efe8
  store i32 %v1_ef7c, i32* %r2.global-to-local, align 4
  %v3_eff4 = load i32, i32* @r4, align 4
  store i32 %v3_eff4, i32* %stack_var_-16, align 4
  %v6_eff4 = load i32, i32* @r5, align 4
  store i32 %v6_eff4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_eff8

dec_label_pc_eff8:                                ; preds = %dec_label_pc_eff8.dec_label_pc_eff8_crit_edge, %dec_label_pc_eff0
  %v0_f01c = phi i32 [ %v12_f01c, %dec_label_pc_eff8.dec_label_pc_eff8_crit_edge ], [ %v0_f01c76, %dec_label_pc_eff0 ]
  %v0_effc = phi i32 [ %v0_effc.pre, %dec_label_pc_eff8.dec_label_pc_eff8_crit_edge ], [ %v4_ef00, %dec_label_pc_eff0 ]
  %v0_eff8 = phi i32 [ %v0_eff8.pre, %dec_label_pc_eff8.dec_label_pc_eff8_crit_edge ], [ %v2_ef00, %dec_label_pc_eff0 ]
  %v3_eff8 = udiv i32 %v0_eff8, 16777216
  %v1_effc = inttoptr i32 %v0_effc to i32*
  %v2_effc = load i32, i32* %v1_effc, align 4
  store i32 %v2_effc, i32* %r4.global-to-local, align 4
  %v3_effc = add i32 %v0_effc, 4
  %v4_effc = inttoptr i32 %v3_effc to i32*
  %v5_effc = load i32, i32* %v4_effc, align 4
  store i32 %v5_effc, i32* %r5.global-to-local, align 4
  %v6_effc = add i32 %v0_effc, 8
  %v7_effc = inttoptr i32 %v6_effc to i32*
  %v8_effc = load i32, i32* %v7_effc, align 4
  store i32 %v8_effc, i32* %ip.global-to-local, align 4
  %v9_effc = add i32 %v0_effc, 12
  %v10_effc = inttoptr i32 %v9_effc to i32*
  %v11_effc = load i32, i32* %v10_effc, align 4
  store i32 %v11_effc, i32* %lr.global-to-local, align 4
  %v12_effc = add i32 %v0_effc, 16
  store i32 %v12_effc, i32* %r1.global-to-local, align 4
  %v4_f000 = mul i32 %v2_effc, 256
  %v5_f000 = or i32 %v4_f000, %v3_eff8
  store i32 %v5_f000, i32* @r3, align 4
  %v3_f004 = udiv i32 %v2_effc, 16777216
  %v4_f008 = mul i32 %v5_effc, 256
  %v5_f008 = or i32 %v4_f008, %v3_f004
  store i32 %v5_f008, i32* %r4.global-to-local, align 4
  %v3_f00c = udiv i32 %v5_effc, 16777216
  %v4_f010 = mul i32 %v8_effc, 256
  %v5_f010 = or i32 %v4_f010, %v3_f00c
  store i32 %v5_f010, i32* %r5.global-to-local, align 4
  %v3_f014 = udiv i32 %v8_effc, 16777216
  %v4_f018 = mul i32 %v11_effc, 256
  %v5_f018 = or i32 %v4_f018, %v3_f014
  store i32 %v5_f018, i32* @ip, align 4
  %v1_f01c = inttoptr i32 %v0_f01c to i32*
  store i32 %v5_f000, i32* %v1_f01c, align 4
  %v3_f01c = add i32 %v0_f01c, 4
  %v4_f01c = inttoptr i32 %v3_f01c to i32*
  %v5_f01c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_f01c, i32* %v4_f01c, align 4
  %v6_f01c = add i32 %v0_f01c, 8
  %v7_f01c = inttoptr i32 %v6_f01c to i32*
  %v8_f01c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_f01c, i32* %v7_f01c, align 4
  %v9_f01c = add i32 %v0_f01c, 12
  %v10_f01c = inttoptr i32 %v9_f01c to i32*
  %v11_f01c = load i32, i32* @ip, align 4
  store i32 %v11_f01c, i32* %v10_f01c, align 4
  %v12_f01c = add i32 %v0_f01c, 16
  store i32 %v12_f01c, i32* %r0.global-to-local, align 4
  %v0_f020 = load i32, i32* %r2.global-to-local, align 4
  %v1_f020 = add i32 %v0_f020, -16
  store i32 %v1_f020, i32* %r2.global-to-local, align 4
  %v3_f020 = sub i32 15, %v0_f020
  %v4_f020 = and i32 %v3_f020, %v0_f020
  %v5_f020 = icmp slt i32 %v4_f020, 0
  %v6_f020 = icmp slt i32 %v1_f020, 0
  %v2_f024 = xor i1 %v6_f020, %v5_f020
  br i1 %v2_f024, label %dec_label_pc_f028, label %dec_label_pc_eff8.dec_label_pc_eff8_crit_edge

dec_label_pc_eff8.dec_label_pc_eff8_crit_edge:    ; preds = %dec_label_pc_eff8
  %v0_eff8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_effc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eff8

dec_label_pc_f028:                                ; preds = %dec_label_pc_eff8
  %v2_f028 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f028, i32* @r4, align 4
  %v5_f028 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_f028, i32* @r5, align 4
  %v1_f02c = add i32 %v0_f020, -4
  store i32 %v1_f02c, i32* %r2.global-to-local, align 4
  %v3_f02c = add i32 %v0_f020, 2147483632
  %v4_f02c = and i32 %v1_f02c, %v3_f02c
  %v5_f02c = icmp slt i32 %v4_f02c, 0
  store i1 %v5_f02c, i1* %cpsr_v.global-to-local, align 1
  %v6_f02c = icmp slt i32 %v1_f02c, 0
  store i1 %v6_f02c, i1* %cpsr_n.global-to-local, align 1
  %v7_f02c = icmp eq i32 %v1_f02c, 0
  store i1 %v7_f02c, i1* %cpsr_z.global-to-local, align 1
  %v2_f030 = xor i1 %v6_f02c, %v5_f02c
  br i1 %v2_f030, label %dec_label_pc_f04c, label %dec_label_pc_f034

dec_label_pc_f034:                                ; preds = %dec_label_pc_f028, %dec_label_pc_efe8, %dec_label_pc_f034
  %v1_f040 = phi i32 [ %v4_f040, %dec_label_pc_f034 ], [ %v12_f01c, %dec_label_pc_f028 ], [ %v0_f01c76, %dec_label_pc_efe8 ]
  %v0_f034 = load i32, i32* %lr.global-to-local, align 4
  %v3_f034 = udiv i32 %v0_f034, 16777216
  store i32 %v3_f034, i32* %ip.global-to-local, align 4
  %v0_f038 = load i32, i32* %r1.global-to-local, align 4
  %v1_f038 = inttoptr i32 %v0_f038 to i32*
  %v2_f038 = load i32, i32* %v1_f038, align 4
  store i32 %v2_f038, i32* %lr.global-to-local, align 4
  %v4_f038 = add i32 %v0_f038, 4
  store i32 %v4_f038, i32* %r1.global-to-local, align 4
  %v4_f03c = mul i32 %v2_f038, 256
  %v5_f03c = or i32 %v4_f03c, %v3_f034
  store i32 %v5_f03c, i32* @ip, align 4
  %v2_f040 = inttoptr i32 %v1_f040 to i32*
  store i32 %v5_f03c, i32* %v2_f040, align 4
  %v3_f040 = load i32, i32* %r0.global-to-local, align 4
  %v4_f040 = add i32 %v3_f040, 4
  store i32 %v4_f040, i32* %r0.global-to-local, align 4
  %v0_f044 = load i32, i32* %r2.global-to-local, align 4
  %v1_f044 = add i32 %v0_f044, -4
  store i32 %v1_f044, i32* %r2.global-to-local, align 4
  %v3_f044 = sub i32 3, %v0_f044
  %v4_f044 = and i32 %v3_f044, %v0_f044
  %v5_f044 = icmp slt i32 %v4_f044, 0
  %v6_f044 = icmp slt i32 %v1_f044, 0
  %v2_f048 = xor i1 %v6_f044, %v5_f044
  br i1 %v2_f048, label %dec_label_pc_f04c.loopexit, label %dec_label_pc_f034

dec_label_pc_f04c.loopexit:                       ; preds = %dec_label_pc_f034
  %v7_f044 = icmp eq i32 %v0_f044, 4
  store i1 %v5_f044, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_f044, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_f044, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %dec_label_pc_f04c.loopexit, %dec_label_pc_f028
  %v0_ee9c61 = phi i32 [ %v1_f044, %dec_label_pc_f04c.loopexit ], [ %v1_f02c, %dec_label_pc_f028 ]
  %v0_f04c = load i32, i32* %r1.global-to-local, align 4
  %v1_f04c = add i32 %v0_f04c, -1
  store i32 %v1_f04c, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_f054:                                ; preds = %entry
  %v1_f054 = load i32, i32* @r2, align 4
  %v2_f054 = add i32 %v1_f054, %v0_ee00
  store i32 %v2_f054, i32* %r1.global-to-local, align 4
  %v2_f058 = add i32 %v1_f054, %v1_ee00
  store i32 %v2_f058, i32* %r0.global-to-local, align 4
  %v2_f05c = add i32 %v1_f054, -4
  store i32 %v2_f05c, i32* %r2.global-to-local, align 4
  %v4_f05c = sub i32 3, %v1_f054
  %v5_f05c = and i32 %v4_f05c, %v1_f054
  %v6_f05c = icmp slt i32 %v5_f05c, 0
  store i1 %v6_f05c, i1* %cpsr_v.global-to-local, align 1
  %v7_f05c = icmp slt i32 %v2_f05c, 0
  store i1 %v7_f05c, i1* %cpsr_n.global-to-local, align 1
  %v8_f05c = icmp eq i32 %v1_f054, 4
  store i1 %v8_f05c, i1* %cpsr_z.global-to-local, align 1
  %v5_f060 = icmp slt i32 %v1_f054, 4
  br i1 %v5_f060, label %bb151, label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %dec_label_pc_f054
  %v1_f064 = urem i32 %v2_f058, 4
  store i32 %v1_f064, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f064 = icmp eq i32 %v1_f064, 0
  store i1 %v2_f064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f064, label %dec_label_pc_f06c, label %dec_label_pc_f10c

dec_label_pc_f06c:                                ; preds = %dec_label_pc_f064
  %v1_f06c = urem i32 %v2_f054, 4
  store i32 %v1_f06c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f06c = icmp eq i32 %v1_f06c, 0
  store i1 %v2_f06c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f06c, label %dec_label_pc_f074, label %dec_label_pc_f138

dec_label_pc_f074:                                ; preds = %dec_label_pc_f06c, %dec_label_pc_f130
  %v0_f08c37 = phi i32 [ %v2_f058, %dec_label_pc_f06c ], [ %v0_f18020, %dec_label_pc_f130 ]
  %v0_f08836 = phi i32 [ %v2_f054, %dec_label_pc_f06c ], [ %v0_f130, %dec_label_pc_f130 ]
  %v0_f074 = phi i32 [ %v2_f05c, %dec_label_pc_f06c ], [ %v2_f128, %dec_label_pc_f130 ]
  %v2_f074 = add i32 %v0_f074, -8
  store i32 %v2_f074, i32* %r2.global-to-local, align 4
  %v4_f074 = sub i32 7, %v0_f074
  %v5_f074 = and i32 %v4_f074, %v0_f074
  %v6_f074 = icmp slt i32 %v5_f074, 0
  store i1 %v6_f074, i1* %cpsr_v.global-to-local, align 1
  %v7_f074 = icmp slt i32 %v2_f074, 0
  store i1 %v7_f074, i1* %cpsr_n.global-to-local, align 1
  %v8_f074 = icmp eq i32 %v0_f074, 8
  store i1 %v8_f074, i1* %cpsr_z.global-to-local, align 1
  %v5_f078 = icmp slt i32 %v0_f074, 8
  br i1 %v5_f078, label %dec_label_pc_f0c4, label %dec_label_pc_f07c

dec_label_pc_f07c:                                ; preds = %dec_label_pc_f074
  %v3_f07c = load i32, i32* @r4, align 4
  %v5_f07c = inttoptr i32 %v3_f07c to i8*
  store i8* %v5_f07c, i8** %stack_var_-8, align 4
  %v8_f07c = load i32, i32* @lr, align 4
  %v2_f080 = add i32 %v0_f074, -28
  store i32 %v2_f080, i32* %r2.global-to-local, align 4
  %v4_f080 = sub i32 27, %v0_f074
  %v5_f080 = and i32 %v4_f080, %v2_f074
  %v6_f080 = icmp slt i32 %v5_f080, 0
  store i1 %v6_f080, i1* %cpsr_v.global-to-local, align 1
  %v7_f080 = icmp slt i32 %v2_f080, 0
  store i1 %v7_f080, i1* %cpsr_n.global-to-local, align 1
  %v8_f080 = icmp eq i32 %v2_f074, 20
  store i1 %v8_f080, i1* %cpsr_z.global-to-local, align 1
  %v5_f084 = icmp slt i32 %v2_f074, 20
  br i1 %v5_f084, label %dec_label_pc_f0a0, label %dec_label_pc_f088

dec_label_pc_f088:                                ; preds = %dec_label_pc_f07c, %dec_label_pc_f088.dec_label_pc_f088_crit_edge
  %v0_f08c = phi i32 [ %v1_f094, %dec_label_pc_f088.dec_label_pc_f088_crit_edge ], [ %v0_f08c37, %dec_label_pc_f07c ]
  %v0_f088 = phi i32 [ %v0_f088.pre, %dec_label_pc_f088.dec_label_pc_f088_crit_edge ], [ %v0_f08836, %dec_label_pc_f07c ]
  %v1_f088 = add i32 %v0_f088, -4
  %v2_f088 = inttoptr i32 %v1_f088 to i32*
  %v3_f088 = load i32, i32* %v2_f088, align 4
  %v4_f088 = add i32 %v0_f088, -8
  %v5_f088 = inttoptr i32 %v4_f088 to i32*
  %v6_f088 = load i32, i32* %v5_f088, align 4
  store i32 %v6_f088, i32* %r4.global-to-local, align 4
  %v7_f088 = add i32 %v0_f088, -12
  %v8_f088 = inttoptr i32 %v7_f088 to i32*
  %v9_f088 = load i32, i32* %v8_f088, align 4
  store i32 %v9_f088, i32* %ip.global-to-local, align 4
  %v10_f088 = add i32 %v0_f088, -16
  %v11_f088 = inttoptr i32 %v10_f088 to i32*
  %v12_f088 = load i32, i32* %v11_f088, align 4
  store i32 %v12_f088, i32* %lr.global-to-local, align 4
  store i32 %v10_f088, i32* %r1.global-to-local, align 4
  %v1_f08c = add i32 %v0_f08c, -16
  %v2_f08c = inttoptr i32 %v1_f08c to i32*
  store i32 %v3_f088, i32* %v2_f08c, align 4
  %v4_f08c = add i32 %v0_f08c, -12
  %v5_f08c = inttoptr i32 %v4_f08c to i32*
  %v6_f08c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_f08c, i32* %v5_f08c, align 4
  %v7_f08c = add i32 %v0_f08c, -8
  %v8_f08c = inttoptr i32 %v7_f08c to i32*
  %v9_f08c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_f08c, i32* %v8_f08c, align 4
  %v10_f08c = add i32 %v0_f08c, -4
  %v11_f08c = inttoptr i32 %v10_f08c to i32*
  %v12_f08c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f08c, i32* %v11_f08c, align 4
  store i32 %v1_f08c, i32* %r0.global-to-local, align 4
  %v0_f090 = load i32, i32* %r1.global-to-local, align 4
  %v1_f090 = add i32 %v0_f090, -4
  %v2_f090 = inttoptr i32 %v1_f090 to i32*
  %v3_f090 = load i32, i32* %v2_f090, align 4
  store i32 %v3_f090, i32* @r3, align 4
  %v4_f090 = add i32 %v0_f090, -8
  %v5_f090 = inttoptr i32 %v4_f090 to i32*
  %v6_f090 = load i32, i32* %v5_f090, align 4
  store i32 %v6_f090, i32* %r4.global-to-local, align 4
  %v7_f090 = add i32 %v0_f090, -12
  %v8_f090 = inttoptr i32 %v7_f090 to i32*
  %v9_f090 = load i32, i32* %v8_f090, align 4
  store i32 %v9_f090, i32* @ip, align 4
  %v10_f090 = add i32 %v0_f090, -16
  %v11_f090 = inttoptr i32 %v10_f090 to i32*
  %v12_f090 = load i32, i32* %v11_f090, align 4
  store i32 %v12_f090, i32* %lr.global-to-local, align 4
  store i32 %v10_f090, i32* %r1.global-to-local, align 4
  %v1_f094 = add i32 %v0_f08c, -32
  %v2_f094 = inttoptr i32 %v1_f094 to i32*
  store i32 %v3_f090, i32* %v2_f094, align 4
  %v4_f094 = add i32 %v0_f08c, -28
  %v5_f094 = inttoptr i32 %v4_f094 to i32*
  %v6_f094 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_f094, i32* %v5_f094, align 4
  %v7_f094 = add i32 %v0_f08c, -24
  %v8_f094 = inttoptr i32 %v7_f094 to i32*
  %v9_f094 = load i32, i32* @ip, align 4
  store i32 %v9_f094, i32* %v8_f094, align 4
  %v10_f094 = add i32 %v0_f08c, -20
  %v11_f094 = inttoptr i32 %v10_f094 to i32*
  %v12_f094 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f094, i32* %v11_f094, align 4
  store i32 %v1_f094, i32* %r0.global-to-local, align 4
  %v0_f098 = load i32, i32* %r2.global-to-local, align 4
  %v2_f098 = add i32 %v0_f098, -32
  store i32 %v2_f098, i32* %r2.global-to-local, align 4
  %v6_f09c = icmp slt i32 %v0_f098, 32
  br i1 %v6_f09c, label %dec_label_pc_f0a0.loopexit, label %dec_label_pc_f088.dec_label_pc_f088_crit_edge

dec_label_pc_f088.dec_label_pc_f088_crit_edge:    ; preds = %dec_label_pc_f088
  %v0_f088.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f088

dec_label_pc_f0a0.loopexit:                       ; preds = %dec_label_pc_f088
  %v4_f098 = sub i32 31, %v0_f098
  %v5_f098 = and i32 %v4_f098, %v0_f098
  %v6_f098 = icmp slt i32 %v5_f098, 0
  %v7_f098 = icmp slt i32 %v2_f098, 0
  store i1 %v6_f098, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f098, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0a0

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_f0a0.loopexit, %dec_label_pc_f07c
  %v6_f0a8 = phi i32 [ %v1_f094, %dec_label_pc_f0a0.loopexit ], [ %v0_f08c37, %dec_label_pc_f07c ]
  %v0_f0b0.pr = phi i32 [ %v2_f098, %dec_label_pc_f0a0.loopexit ], [ %v2_f080, %dec_label_pc_f07c ]
  %v4_f0a0 = add i32 %v0_f0b0.pr, 16
  %v6_f0a0 = sub i32 0, %v0_f0b0.pr
  %v7_f0a0 = and i32 %v4_f0a0, %v6_f0a0
  %v8_f0a0 = icmp slt i32 %v7_f0a0, 0
  store i1 %v8_f0a0, i1* %cpsr_v.global-to-local, align 1
  %v9_f0a0 = icmp slt i32 %v4_f0a0, 0
  store i1 %v9_f0a0, i1* %cpsr_n.global-to-local, align 1
  %v10_f0a0 = icmp eq i32 %v4_f0a0, 0
  store i1 %v10_f0a0, i1* %cpsr_z.global-to-local, align 1
  %v5_f0a4 = icmp slt i32 %v0_f0b0.pr, -16
  br i1 %v5_f0a4, label %.thread2, label %bb148

bb148:                                            ; preds = %dec_label_pc_f0a0
  %v6_f0a4 = load i32, i32* %r1.global-to-local, align 4
  %v7_f0a4 = add i32 %v6_f0a4, -4
  %v8_f0a4 = inttoptr i32 %v7_f0a4 to i32*
  %v9_f0a4 = load i32, i32* %v8_f0a4, align 4
  store i32 %v9_f0a4, i32* @r3, align 4
  %v10_f0a4 = add i32 %v6_f0a4, -8
  %v11_f0a4 = inttoptr i32 %v10_f0a4 to i32*
  %v12_f0a4 = load i32, i32* %v11_f0a4, align 4
  store i32 %v12_f0a4, i32* %r4.global-to-local, align 4
  %v13_f0a4 = add i32 %v6_f0a4, -12
  %v14_f0a4 = inttoptr i32 %v13_f0a4 to i32*
  %v15_f0a4 = load i32, i32* %v14_f0a4, align 4
  store i32 %v15_f0a4, i32* @ip, align 4
  %v16_f0a4 = add i32 %v6_f0a4, -16
  %v17_f0a4 = inttoptr i32 %v16_f0a4 to i32*
  %v18_f0a4 = load i32, i32* %v17_f0a4, align 4
  store i32 %v18_f0a4, i32* %lr.global-to-local, align 4
  store i32 %v16_f0a4, i32* %r1.global-to-local, align 4
  %v7_f0a8 = add i32 %v6_f0a8, -16
  %v8_f0a8 = inttoptr i32 %v7_f0a8 to i32*
  store i32 %v9_f0a4, i32* %v8_f0a8, align 4
  %v10_f0a8 = add i32 %v6_f0a8, -12
  %v11_f0a8 = inttoptr i32 %v10_f0a8 to i32*
  %v12_f0a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_f0a8, i32* %v11_f0a8, align 4
  %v13_f0a8 = add i32 %v6_f0a8, -8
  %v14_f0a8 = inttoptr i32 %v13_f0a8 to i32*
  %v15_f0a8 = load i32, i32* @ip, align 4
  store i32 %v15_f0a8, i32* %v14_f0a8, align 4
  %v16_f0a8 = add i32 %v6_f0a8, -4
  %v17_f0a8 = inttoptr i32 %v16_f0a8 to i32*
  %v18_f0a8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_f0a8, i32* %v17_f0a8, align 4
  store i32 %v7_f0a8, i32* %r0.global-to-local, align 4
  %v6_f0ac = load i32, i32* %r2.global-to-local, align 4
  %v7_f0ac = add i32 %v6_f0ac, -16
  store i32 %v7_f0ac, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_f0a0, %bb148
  %v6_f0b8 = phi i32 [ %v7_f0a8, %bb148 ], [ %v6_f0a8, %dec_label_pc_f0a0 ]
  %v0_f0b0 = phi i32 [ %v7_f0ac, %bb148 ], [ %v0_f0b0.pr, %dec_label_pc_f0a0 ]
  %v4_f0b0 = add i32 %v0_f0b0, 20
  store i32 %v4_f0b0, i32* %r2.global-to-local, align 4
  %v6_f0b0 = sub i32 0, %v0_f0b0
  %v7_f0b0 = and i32 %v4_f0b0, %v6_f0b0
  %v8_f0b0 = icmp slt i32 %v7_f0b0, 0
  store i1 %v8_f0b0, i1* %cpsr_v.global-to-local, align 1
  %v9_f0b0 = icmp slt i32 %v4_f0b0, 0
  store i1 %v9_f0b0, i1* %cpsr_n.global-to-local, align 1
  %v10_f0b0 = icmp eq i32 %v4_f0b0, 0
  store i1 %v10_f0b0, i1* %cpsr_z.global-to-local, align 1
  %v5_f0b4 = icmp slt i32 %v0_f0b0, -20
  br i1 %v5_f0b4, label %.thread4, label %bb149

bb149:                                            ; preds = %.thread2
  %v6_f0b4 = load i32, i32* %r1.global-to-local, align 4
  %v7_f0b4 = add i32 %v6_f0b4, -4
  %v8_f0b4 = inttoptr i32 %v7_f0b4 to i32*
  %v9_f0b4 = load i32, i32* %v8_f0b4, align 4
  store i32 %v9_f0b4, i32* @r3, align 4
  %v10_f0b4 = add i32 %v6_f0b4, -8
  %v11_f0b4 = inttoptr i32 %v10_f0b4 to i32*
  %v12_f0b4 = load i32, i32* %v11_f0b4, align 4
  store i32 %v12_f0b4, i32* @ip, align 4
  %v13_f0b4 = add i32 %v6_f0b4, -12
  %v14_f0b4 = inttoptr i32 %v13_f0b4 to i32*
  %v15_f0b4 = load i32, i32* %v14_f0b4, align 4
  store i32 %v15_f0b4, i32* %lr.global-to-local, align 4
  store i32 %v13_f0b4, i32* %r1.global-to-local, align 4
  %v7_f0b8 = add i32 %v6_f0b8, -12
  %v8_f0b8 = inttoptr i32 %v7_f0b8 to i32*
  store i32 %v9_f0b4, i32* %v8_f0b8, align 4
  %v10_f0b8 = add i32 %v6_f0b8, -8
  %v11_f0b8 = inttoptr i32 %v10_f0b8 to i32*
  %v12_f0b8 = load i32, i32* @ip, align 4
  store i32 %v12_f0b8, i32* %v11_f0b8, align 4
  %v13_f0b8 = add i32 %v6_f0b8, -4
  %v14_f0b8 = inttoptr i32 %v13_f0b8 to i32*
  %v15_f0b8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_f0b8, i32* %v14_f0b8, align 4
  store i32 %v7_f0b8, i32* %r0.global-to-local, align 4
  %v6_f0bc = load i32, i32* %r2.global-to-local, align 4
  %v7_f0bc = add i32 %v6_f0bc, -12
  store i32 %v7_f0bc, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb149
  %v6_f0dc45 = phi i32 [ %v6_f0b8, %.thread2 ], [ %v7_f0b8, %bb149 ]
  %v0_f0c443 = phi i32 [ %v4_f0b0, %.thread2 ], [ %v7_f0bc, %bb149 ]
  %v2_f0c0 = load i8*, i8** %stack_var_-8, align 4
  %v3_f0c0 = ptrtoint i8* %v2_f0c0 to i32
  store i32 %v3_f0c0, i32* @r4, align 4
  store i32 %v8_f07c, i32* @lr, align 4
  br label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f074, %.thread4
  %v7_f0d4 = phi i32 [ %v0_f08c37, %dec_label_pc_f074 ], [ %v6_f0dc45, %.thread4 ]
  %v0_f0c4 = phi i32 [ %v2_f074, %dec_label_pc_f074 ], [ %v0_f0c443, %.thread4 ]
  %v2_f0c4 = add i32 %v0_f0c4, 8
  store i32 %v2_f0c4, i32* %r2.global-to-local, align 4
  %v4_f0c4 = sub i32 0, %v0_f0c4
  %v5_f0c4 = and i32 %v2_f0c4, %v4_f0c4
  %v6_f0c4 = icmp slt i32 %v5_f0c4, 0
  store i1 %v6_f0c4, i1* %cpsr_v.global-to-local, align 1
  %v7_f0c4 = icmp slt i32 %v2_f0c4, 0
  store i1 %v7_f0c4, i1* %cpsr_n.global-to-local, align 1
  %v8_f0c4 = icmp eq i32 %v2_f0c4, 0
  store i1 %v8_f0c4, i1* %cpsr_z.global-to-local, align 1
  %v5_f0c8 = icmp slt i32 %v0_f0c4, -8
  br i1 %v5_f0c8, label %bb151, label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f0c4
  %v6_f0cc = add i32 %v0_f0c4, 4
  store i32 %v6_f0cc, i32* %r2.global-to-local, align 4
  %v8_f0cc = sub i32 -5, %v0_f0c4
  %v9_f0cc = and i32 %v8_f0cc, %v2_f0c4
  %v10_f0cc = icmp slt i32 %v9_f0cc, 0
  store i1 %v10_f0cc, i1* %cpsr_v.global-to-local, align 1
  %v11_f0cc = icmp slt i32 %v6_f0cc, 0
  store i1 %v11_f0cc, i1* %cpsr_n.global-to-local, align 1
  %v12_f0cc = icmp eq i32 %v2_f0c4, 4
  store i1 %v12_f0cc, i1* %cpsr_z.global-to-local, align 1
  %v5_f0d0 = icmp slt i32 %v2_f0c4, 4
  %v6_f0d0 = load i32, i32* %r1.global-to-local, align 4
  %v7_f0d0 = add i32 %v6_f0d0, -4
  %v8_f0d0 = inttoptr i32 %v7_f0d0 to i32*
  %v9_f0d0 = load i32, i32* %v8_f0d0, align 4
  store i32 %v9_f0d0, i32* @r3, align 4
  br i1 %v5_f0d0, label %.thread8, label %bb150

.thread8:                                         ; preds = %dec_label_pc_f0cc
  store i32 %v7_f0d0, i32* %r1.global-to-local, align 4
  %v8_f0d4 = add i32 %v7_f0d4, -4
  %v9_f0d4 = inttoptr i32 %v8_f0d4 to i32*
  store i32 %v9_f0d0, i32* %v9_f0d4, align 4
  %v10_f0d4 = load i32, i32* %r0.global-to-local, align 4
  %v11_f0d4 = add i32 %v10_f0d4, -4
  store i32 %v11_f0d4, i32* %r0.global-to-local, align 4
  %v0_f0e4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb151

bb150:                                            ; preds = %dec_label_pc_f0cc
  %v10_f0d8 = add i32 %v6_f0d0, -8
  %v11_f0d8 = inttoptr i32 %v10_f0d8 to i32*
  %v12_f0d8 = load i32, i32* %v11_f0d8, align 4
  store i32 %v12_f0d8, i32* @ip, align 4
  store i32 %v10_f0d8, i32* %r1.global-to-local, align 4
  %v7_f0dc = add i32 %v7_f0d4, -8
  %v8_f0dc = inttoptr i32 %v7_f0dc to i32*
  store i32 %v9_f0d0, i32* %v8_f0dc, align 4
  %v10_f0dc = add i32 %v7_f0d4, -4
  %v11_f0dc = inttoptr i32 %v10_f0dc to i32*
  %v12_f0dc = load i32, i32* @ip, align 4
  store i32 %v12_f0dc, i32* %v11_f0dc, align 4
  store i32 %v7_f0dc, i32* %r0.global-to-local, align 4
  %v6_f0e0 = load i32, i32* %r2.global-to-local, align 4
  %v7_f0e0 = add i32 %v6_f0e0, -4
  store i32 %v7_f0e0, i32* %r2.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread8, %dec_label_pc_f0c4, %dec_label_pc_f054, %.thread14, %dec_label_pc_f288, %dec_label_pc_f21c, %dec_label_pc_f1b0, %bb150
  %v2_f0e8 = phi i32 [ %v11_f0d4, %.thread8 ], [ %v7_f0d4, %dec_label_pc_f0c4 ], [ %v2_f058, %dec_label_pc_f054 ], [ %v0_f18020, %.thread14 ], [ %v2_f0f453, %dec_label_pc_f288 ], [ %v2_f0f452, %dec_label_pc_f21c ], [ %v2_f0f451, %dec_label_pc_f1b0 ], [ %v7_f0dc, %bb150 ]
  %v0_f0e4 = phi i32 [ %v0_f0e4.pre, %.thread8 ], [ %v2_f0c4, %dec_label_pc_f0c4 ], [ %v2_f05c, %dec_label_pc_f054 ], [ %v2_f128, %.thread14 ], [ %v0_f0e449, %dec_label_pc_f288 ], [ %v0_f0e448, %dec_label_pc_f21c ], [ %v0_f0e447, %dec_label_pc_f1b0 ], [ %v7_f0e0, %bb150 ]
  %v1_f0e4 = add i32 %v0_f0e4, 4
  store i32 %v1_f0e4, i32* @r2, align 4
  %v3_f0e4 = sub i32 0, %v0_f0e4
  %v4_f0e4 = and i32 %v1_f0e4, %v3_f0e4
  %v5_f0e4 = icmp slt i32 %v4_f0e4, 0
  store i1 %v5_f0e4, i1* %cpsr_v.global-to-local, align 1
  %v6_f0e4 = icmp slt i32 %v1_f0e4, 0
  store i1 %v6_f0e4, i1* %cpsr_n.global-to-local, align 1
  %v7_f0e4 = icmp eq i32 %v1_f0e4, 0
  store i1 %v7_f0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0e4, label %.thread130, label %bb152

bb152:                                            ; preds = %bb151
  %v1_f0ec = add i32 %v0_f0e4, 2
  %v3_f0ec = sub i32 -3, %v0_f0e4
  %v4_f0ec = and i32 %v3_f0ec, %v1_f0e4
  %v5_f0ec = icmp slt i32 %v4_f0ec, 0
  store i1 %v5_f0ec, i1* %cpsr_v.global-to-local, align 1
  %v6_f0ec = icmp slt i32 %v1_f0ec, 0
  store i1 %v6_f0ec, i1* %cpsr_n.global-to-local, align 1
  %v7_f0ec = icmp eq i32 %v1_f0e4, 2
  store i1 %v7_f0ec, i1* %cpsr_z.global-to-local, align 1
  %v0_f0f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f0f0 = add i32 %v0_f0f0, -1
  %v2_f0f0 = inttoptr i32 %v1_f0f0 to i8*
  %v3_f0f0 = load i8, i8* %v2_f0f0, align 1
  %v4_f0f0 = zext i8 %v3_f0f0 to i32
  store i32 %v4_f0f0, i32* @r3, align 4
  store i32 %v1_f0f0, i32* %r1.global-to-local, align 4
  %v3_f0f4 = add i32 %v2_f0e8, -1
  %v4_f0f4 = inttoptr i32 %v3_f0f4 to i8*
  store i8 %v3_f0f0, i8* %v4_f0f4, align 1
  %v5_f0f4 = load i32, i32* %r0.global-to-local, align 4
  %v6_f0f4 = add i32 %v5_f0f4, -1
  store i32 %v6_f0f4, i32* %r0.global-to-local, align 4
  %v0_f0f8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_f0f8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_f0f8 = xor i1 %v0_f0f8, %v1_f0f8
  br i1 %v2_f0f8, label %.thread129, label %bb153

bb153:                                            ; preds = %bb152
  %v3_f0f8 = load i32, i32* %r1.global-to-local, align 4
  %v4_f0f8 = add i32 %v3_f0f8, -1
  %v5_f0f8 = inttoptr i32 %v4_f0f8 to i8*
  %v6_f0f8 = load i8, i8* %v5_f0f8, align 1
  %v7_f0f8 = zext i8 %v6_f0f8 to i32
  store i32 %v7_f0f8, i32* @r3, align 4
  store i32 %v4_f0f8, i32* %r1.global-to-local, align 4
  %v6_f0fc = add i32 %v5_f0f4, -2
  %v7_f0fc = inttoptr i32 %v6_f0fc to i8*
  store i8 %v6_f0f8, i8* %v7_f0fc, align 1
  %v8_f0fc = load i32, i32* %r0.global-to-local, align 4
  %v9_f0fc = add i32 %v8_f0fc, -1
  store i32 %v9_f0fc, i32* %r0.global-to-local, align 4
  %v1_f100.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_f100.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb152, %bb153
  %v7_f104 = phi i32 [ %v9_f0fc, %bb153 ], [ %v6_f0f4, %bb152 ]
  %v2_f104 = phi i1 [ %v2_f100.pre, %bb153 ], [ %v1_f0f8, %bb152 ]
  %v1_f104 = phi i1 [ %v1_f100.pre, %bb153 ], [ %v0_f0f8, %bb152 ]
  %v0_f100 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_f100 = xor i1 %v2_f104, %v1_f104
  %v4_f100 = or i1 %v0_f100, %v3_f100
  br i1 %v4_f100, label %.thread130, label %bb154

bb154:                                            ; preds = %.thread129
  %v5_f100 = load i32, i32* %r1.global-to-local, align 4
  %v6_f100 = add i32 %v5_f100, -1
  %v7_f100 = inttoptr i32 %v6_f100 to i8*
  %v8_f100 = load i8, i8* %v7_f100, align 1
  %v9_f100 = zext i8 %v8_f100 to i32
  store i32 %v9_f100, i32* @r3, align 4
  store i32 %v6_f100, i32* %r1.global-to-local, align 4
  %v8_f104 = add i32 %v7_f104, -1
  %v9_f104 = inttoptr i32 %v8_f104 to i8*
  store i8 %v8_f100, i8* %v9_f104, align 1
  %v10_f104 = load i32, i32* %r0.global-to-local, align 4
  %v11_f104 = add i32 %v10_f104, -1
  store i32 %v11_f104, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f064
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_f10c = icmp eq i32 %v1_f064, 1
  store i1 %v8_f10c, i1* %cpsr_n.global-to-local, align 1
  %v9_f10c = icmp eq i32 %v1_f064, 2
  store i1 %v9_f10c, i1* %cpsr_z.global-to-local, align 1
  %v1_f110 = add i32 %v2_f054, -1
  %v2_f110 = inttoptr i32 %v1_f110 to i8*
  %v3_f110 = load i8, i8* %v2_f110, align 1
  %v4_f110 = zext i8 %v3_f110 to i32
  store i32 %v4_f110, i32* @r3, align 4
  store i32 %v1_f110, i32* %r1.global-to-local, align 4
  %v3_f114 = add i32 %v2_f058, -1
  %v4_f114 = inttoptr i32 %v3_f114 to i8*
  store i8 %v3_f110, i8* %v4_f114, align 1
  %v5_f114 = load i32, i32* %r0.global-to-local, align 4
  %v6_f114 = add i32 %v5_f114, -1
  store i32 %v6_f114, i32* %r0.global-to-local, align 4
  br i1 %v8_f10c, label %.thread14, label %bb155

bb155:                                            ; preds = %dec_label_pc_f10c
  %v6_f118 = load i32, i32* %r1.global-to-local, align 4
  %v7_f118 = add i32 %v6_f118, -1
  %v8_f118 = inttoptr i32 %v7_f118 to i8*
  %v9_f118 = load i8, i8* %v8_f118, align 1
  %v10_f118 = zext i8 %v9_f118 to i32
  store i32 %v10_f118, i32* @r3, align 4
  store i32 %v7_f118, i32* %r1.global-to-local, align 4
  %v9_f11c = add i32 %v5_f114, -2
  %v10_f11c = inttoptr i32 %v9_f11c to i8*
  store i8 %v9_f118, i8* %v10_f11c, align 1
  %v11_f11c = load i32, i32* %r0.global-to-local, align 4
  %v12_f11c = add i32 %v11_f11c, -1
  store i32 %v12_f11c, i32* %r0.global-to-local, align 4
  br i1 %v9_f10c, label %.thread14, label %bb156

bb156:                                            ; preds = %bb155
  %v8_f120 = load i32, i32* %r1.global-to-local, align 4
  %v9_f120 = add i32 %v8_f120, -1
  %v10_f120 = inttoptr i32 %v9_f120 to i8*
  %v11_f120 = load i8, i8* %v10_f120, align 1
  %v12_f120 = zext i8 %v11_f120 to i32
  store i32 %v12_f120, i32* @r3, align 4
  store i32 %v9_f120, i32* %r1.global-to-local, align 4
  %v11_f124 = add i32 %v11_f11c, -2
  %v12_f124 = inttoptr i32 %v11_f124 to i8*
  store i8 %v11_f120, i8* %v12_f124, align 1
  %v13_f124 = load i32, i32* %r0.global-to-local, align 4
  %v14_f124 = add i32 %v13_f124, -1
  store i32 %v14_f124, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb155, %dec_label_pc_f10c, %bb156
  %v0_f18020 = phi i32 [ %v12_f11c, %bb155 ], [ %v6_f114, %dec_label_pc_f10c ], [ %v14_f124, %bb156 ]
  %v0_f128 = load i32, i32* %r2.global-to-local, align 4
  %v1_f128 = load i32, i32* @ip, align 4
  %v2_f128 = sub i32 %v0_f128, %v1_f128
  store i32 %v2_f128, i32* %r2.global-to-local, align 4
  %v4_f128 = xor i32 %v1_f128, %v0_f128
  %v5_f128 = xor i32 %v2_f128, %v0_f128
  %v6_f128 = and i32 %v5_f128, %v4_f128
  %v7_f128 = icmp slt i32 %v6_f128, 0
  store i1 %v7_f128, i1* %cpsr_v.global-to-local, align 1
  %v8_f128 = icmp slt i32 %v2_f128, 0
  store i1 %v8_f128, i1* %cpsr_n.global-to-local, align 1
  %v9_f128 = icmp eq i32 %v0_f128, %v1_f128
  store i1 %v9_f128, i1* %cpsr_z.global-to-local, align 1
  %v5_f12c = icmp slt i32 %v0_f128, %v1_f128
  br i1 %v5_f12c, label %bb151, label %dec_label_pc_f130

dec_label_pc_f130:                                ; preds = %.thread14
  %v0_f130 = load i32, i32* %r1.global-to-local, align 4
  %v1_f130 = urem i32 %v0_f130, 4
  store i32 %v1_f130, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f130 = icmp eq i32 %v1_f130, 0
  store i1 %v2_f130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f130, label %dec_label_pc_f074, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %dec_label_pc_f06c, %dec_label_pc_f130
  %v0_f18019 = phi i32 [ %v2_f058, %dec_label_pc_f06c ], [ %v0_f18020, %dec_label_pc_f130 ]
  %v0_f22c = phi i32 [ %v2_f05c, %dec_label_pc_f06c ], [ %v2_f128, %dec_label_pc_f130 ]
  %v0_f138 = phi i32 [ %v2_f054, %dec_label_pc_f06c ], [ %v0_f130, %dec_label_pc_f130 ]
  %v0_f140 = phi i32 [ %v1_f06c, %dec_label_pc_f06c ], [ %v1_f130, %dec_label_pc_f130 ]
  %v1_f138 = and i32 %v0_f138, -4
  store i32 %v1_f138, i32* %r1.global-to-local, align 4
  %v1_f13c = inttoptr i32 %v1_f138 to i32*
  %v2_f13c = load i32, i32* %v1_f13c, align 4
  store i32 %v2_f13c, i32* @r3, align 4
  %v7_f140 = icmp ult i32 %v0_f140, 2
  %v2_f224 = add i32 %v0_f22c, -12
  %v4_f224 = sub i32 11, %v0_f22c
  %v5_f224 = and i32 %v4_f224, %v0_f22c
  %v6_f224 = icmp slt i32 %v5_f224, 0
  store i1 %v6_f224, i1* %cpsr_v.global-to-local, align 1
  %v7_f224 = icmp slt i32 %v2_f224, 0
  store i1 %v7_f224, i1* %cpsr_n.global-to-local, align 1
  %v8_f224 = icmp eq i32 %v0_f22c, 12
  store i1 %v8_f224, i1* %cpsr_z.global-to-local, align 1
  %v5_f228 = icmp slt i32 %v0_f22c, 12
  br i1 %v7_f140, label %dec_label_pc_f224, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %dec_label_pc_f138
  %v8_f140 = icmp eq i32 %v0_f140, 2
  br i1 %v8_f140, label %dec_label_pc_f1b8, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f148
  br i1 %v5_f228, label %dec_label_pc_f198, label %dec_label_pc_f154

dec_label_pc_f154:                                ; preds = %dec_label_pc_f14c
  store i32 %v2_f224, i32* %r2.global-to-local, align 4
  %v3_f158 = load i32, i32* @r4, align 4
  store i32 %v3_f158, i32* %stack_var_-12, align 4
  %v6_f158 = load i32, i32* @r5, align 4
  %v8_f158 = inttoptr i32 %v6_f158 to i8*
  store i8* %v8_f158, i8** %stack_var_-8, align 4
  %v11_f158 = load i32, i32* @lr, align 4
  br label %dec_label_pc_f15c

dec_label_pc_f15c:                                ; preds = %dec_label_pc_f15c.dec_label_pc_f15c_crit_edge, %dec_label_pc_f154
  %v0_f180 = phi i32 [ %v1_f180, %dec_label_pc_f15c.dec_label_pc_f15c_crit_edge ], [ %v0_f18019, %dec_label_pc_f154 ]
  %v0_f160 = phi i32 [ %v0_f160.pre, %dec_label_pc_f15c.dec_label_pc_f15c_crit_edge ], [ %v1_f138, %dec_label_pc_f154 ]
  %v0_f15c = phi i32 [ %v0_f15c.pre, %dec_label_pc_f15c.dec_label_pc_f15c_crit_edge ], [ %v2_f13c, %dec_label_pc_f154 ]
  %v3_f15c = mul i32 %v0_f15c, 256
  store i32 %v3_f15c, i32* %lr.global-to-local, align 4
  %v1_f160 = add i32 %v0_f160, -4
  %v2_f160 = inttoptr i32 %v1_f160 to i32*
  %v3_f160 = load i32, i32* %v2_f160, align 4
  store i32 %v3_f160, i32* @r3, align 4
  %v4_f160 = add i32 %v0_f160, -8
  %v5_f160 = inttoptr i32 %v4_f160 to i32*
  %v6_f160 = load i32, i32* %v5_f160, align 4
  store i32 %v6_f160, i32* %r4.global-to-local, align 4
  %v7_f160 = add i32 %v0_f160, -12
  %v8_f160 = inttoptr i32 %v7_f160 to i32*
  %v9_f160 = load i32, i32* %v8_f160, align 4
  store i32 %v9_f160, i32* %r5.global-to-local, align 4
  %v10_f160 = add i32 %v0_f160, -16
  %v11_f160 = inttoptr i32 %v10_f160 to i32*
  %v12_f160 = load i32, i32* %v11_f160, align 4
  store i32 %v10_f160, i32* %r1.global-to-local, align 4
  %v4_f164 = udiv i32 %v12_f160, 16777216
  %v5_f164 = or i32 %v4_f164, %v3_f15c
  store i32 %v5_f164, i32* %lr.global-to-local, align 4
  %v3_f168 = mul i32 %v12_f160, 256
  %v4_f16c = udiv i32 %v9_f160, 16777216
  %v5_f16c = or i32 %v3_f168, %v4_f16c
  store i32 %v5_f16c, i32* @ip, align 4
  %v3_f170 = mul i32 %v9_f160, 256
  %v4_f174 = udiv i32 %v6_f160, 16777216
  %v5_f174 = or i32 %v3_f170, %v4_f174
  store i32 %v5_f174, i32* %r5.global-to-local, align 4
  %v3_f178 = mul i32 %v6_f160, 256
  %v4_f17c = udiv i32 %v3_f160, 16777216
  %v5_f17c = or i32 %v3_f178, %v4_f17c
  store i32 %v5_f17c, i32* %r4.global-to-local, align 4
  %v1_f180 = add i32 %v0_f180, -16
  %v2_f180 = inttoptr i32 %v1_f180 to i32*
  store i32 %v5_f17c, i32* %v2_f180, align 4
  %v4_f180 = add i32 %v0_f180, -12
  %v5_f180 = inttoptr i32 %v4_f180 to i32*
  %v6_f180 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_f180, i32* %v5_f180, align 4
  %v7_f180 = add i32 %v0_f180, -8
  %v8_f180 = inttoptr i32 %v7_f180 to i32*
  %v9_f180 = load i32, i32* @ip, align 4
  store i32 %v9_f180, i32* %v8_f180, align 4
  %v10_f180 = add i32 %v0_f180, -4
  %v11_f180 = inttoptr i32 %v10_f180 to i32*
  %v12_f180 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f180, i32* %v11_f180, align 4
  store i32 %v1_f180, i32* %r0.global-to-local, align 4
  %v0_f184 = load i32, i32* %r2.global-to-local, align 4
  %v2_f184 = add i32 %v0_f184, -16
  store i32 %v2_f184, i32* %r2.global-to-local, align 4
  %v6_f188 = icmp slt i32 %v0_f184, 16
  br i1 %v6_f188, label %dec_label_pc_f18c, label %dec_label_pc_f15c.dec_label_pc_f15c_crit_edge

dec_label_pc_f15c.dec_label_pc_f15c_crit_edge:    ; preds = %dec_label_pc_f15c
  %v0_f15c.pre = load i32, i32* @r3, align 4
  %v0_f160.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f15c

dec_label_pc_f18c:                                ; preds = %dec_label_pc_f15c
  %v2_f18c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f18c, i32* @r4, align 4
  %v5_f18c = load i8*, i8** %stack_var_-8, align 4
  %v6_f18c = ptrtoint i8* %v5_f18c to i32
  store i32 %v6_f18c, i32* @r5, align 4
  store i32 %v11_f158, i32* @lr, align 4
  %v2_f190 = add i32 %v0_f184, -4
  store i32 %v2_f190, i32* %r2.global-to-local, align 4
  %v4_f190 = add i32 %v0_f184, 2147483632
  %v5_f190 = and i32 %v2_f190, %v4_f190
  %v6_f190 = icmp slt i32 %v5_f190, 0
  store i1 %v6_f190, i1* %cpsr_v.global-to-local, align 1
  %v7_f190 = icmp slt i32 %v2_f190, 0
  store i1 %v7_f190, i1* %cpsr_n.global-to-local, align 1
  %v8_f190 = icmp eq i32 %v2_f190, 0
  store i1 %v8_f190, i1* %cpsr_z.global-to-local, align 1
  %v5_f194 = icmp slt i32 %v2_f184, -12
  br i1 %v5_f194, label %dec_label_pc_f1b0, label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %dec_label_pc_f18c, %dec_label_pc_f14c, %dec_label_pc_f198
  %v1_f1a4 = phi i32 [ %v5_f1a4, %dec_label_pc_f198 ], [ %v1_f180, %dec_label_pc_f18c ], [ %v0_f18019, %dec_label_pc_f14c ]
  %v0_f198 = load i32, i32* @r3, align 4
  %v3_f198 = mul i32 %v0_f198, 256
  store i32 %v3_f198, i32* %ip.global-to-local, align 4
  %v0_f19c = load i32, i32* %r1.global-to-local, align 4
  %v1_f19c = add i32 %v0_f19c, -4
  %v2_f19c = inttoptr i32 %v1_f19c to i32*
  %v3_f19c = load i32, i32* %v2_f19c, align 4
  store i32 %v3_f19c, i32* @r3, align 4
  store i32 %v1_f19c, i32* %r1.global-to-local, align 4
  %v4_f1a0 = udiv i32 %v3_f19c, 16777216
  %v5_f1a0 = or i32 %v4_f1a0, %v3_f198
  store i32 %v5_f1a0, i32* @ip, align 4
  %v2_f1a4 = add i32 %v1_f1a4, -4
  %v3_f1a4 = inttoptr i32 %v2_f1a4 to i32*
  store i32 %v5_f1a0, i32* %v3_f1a4, align 4
  %v4_f1a4 = load i32, i32* %r0.global-to-local, align 4
  %v5_f1a4 = add i32 %v4_f1a4, -4
  store i32 %v5_f1a4, i32* %r0.global-to-local, align 4
  %v0_f1a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_f1a8 = add i32 %v0_f1a8, -4
  store i32 %v2_f1a8, i32* %r2.global-to-local, align 4
  %v6_f1ac = icmp slt i32 %v0_f1a8, 4
  br i1 %v6_f1ac, label %dec_label_pc_f1b0.loopexit, label %dec_label_pc_f198

dec_label_pc_f1b0.loopexit:                       ; preds = %dec_label_pc_f198
  %v4_f1a8 = sub i32 3, %v0_f1a8
  %v5_f1a8 = and i32 %v4_f1a8, %v0_f1a8
  %v6_f1a8 = icmp slt i32 %v5_f1a8, 0
  %v7_f1a8 = icmp slt i32 %v2_f1a8, 0
  store i1 %v6_f1a8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f1a8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f1b0

dec_label_pc_f1b0:                                ; preds = %dec_label_pc_f1b0.loopexit, %dec_label_pc_f18c
  %v2_f0f451 = phi i32 [ %v5_f1a4, %dec_label_pc_f1b0.loopexit ], [ %v1_f180, %dec_label_pc_f18c ]
  %v0_f0e447 = phi i32 [ %v2_f1a8, %dec_label_pc_f1b0.loopexit ], [ %v2_f190, %dec_label_pc_f18c ]
  %v0_f1b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f1b0 = add i32 %v0_f1b0, 3
  store i32 %v1_f1b0, i32* %r1.global-to-local, align 4
  br label %bb151

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f148
  br i1 %v5_f228, label %dec_label_pc_f204, label %dec_label_pc_f1c0

dec_label_pc_f1c0:                                ; preds = %dec_label_pc_f1b8
  store i32 %v2_f224, i32* %r2.global-to-local, align 4
  %v3_f1c4 = load i32, i32* @r4, align 4
  store i32 %v3_f1c4, i32* %stack_var_-12, align 4
  %v6_f1c4 = load i32, i32* @r5, align 4
  %v8_f1c4 = inttoptr i32 %v6_f1c4 to i8*
  store i8* %v8_f1c4, i8** %stack_var_-8, align 4
  %v11_f1c4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_f1c8

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_f1c8.dec_label_pc_f1c8_crit_edge, %dec_label_pc_f1c0
  %v0_f1ec = phi i32 [ %v1_f1ec, %dec_label_pc_f1c8.dec_label_pc_f1c8_crit_edge ], [ %v0_f18019, %dec_label_pc_f1c0 ]
  %v0_f1cc = phi i32 [ %v0_f1cc.pre, %dec_label_pc_f1c8.dec_label_pc_f1c8_crit_edge ], [ %v1_f138, %dec_label_pc_f1c0 ]
  %v0_f1c8 = phi i32 [ %v0_f1c8.pre, %dec_label_pc_f1c8.dec_label_pc_f1c8_crit_edge ], [ %v2_f13c, %dec_label_pc_f1c0 ]
  %v3_f1c8 = mul i32 %v0_f1c8, 65536
  store i32 %v3_f1c8, i32* %lr.global-to-local, align 4
  %v1_f1cc = add i32 %v0_f1cc, -4
  %v2_f1cc = inttoptr i32 %v1_f1cc to i32*
  %v3_f1cc = load i32, i32* %v2_f1cc, align 4
  store i32 %v3_f1cc, i32* @r3, align 4
  %v4_f1cc = add i32 %v0_f1cc, -8
  %v5_f1cc = inttoptr i32 %v4_f1cc to i32*
  %v6_f1cc = load i32, i32* %v5_f1cc, align 4
  store i32 %v6_f1cc, i32* %r4.global-to-local, align 4
  %v7_f1cc = add i32 %v0_f1cc, -12
  %v8_f1cc = inttoptr i32 %v7_f1cc to i32*
  %v9_f1cc = load i32, i32* %v8_f1cc, align 4
  store i32 %v9_f1cc, i32* %r5.global-to-local, align 4
  %v10_f1cc = add i32 %v0_f1cc, -16
  %v11_f1cc = inttoptr i32 %v10_f1cc to i32*
  %v12_f1cc = load i32, i32* %v11_f1cc, align 4
  store i32 %v10_f1cc, i32* %r1.global-to-local, align 4
  %v4_f1d0 = udiv i32 %v12_f1cc, 65536
  %v5_f1d0 = or i32 %v4_f1d0, %v3_f1c8
  store i32 %v5_f1d0, i32* %lr.global-to-local, align 4
  %v3_f1d4 = mul i32 %v12_f1cc, 65536
  %v4_f1d8 = udiv i32 %v9_f1cc, 65536
  %v5_f1d8 = or i32 %v3_f1d4, %v4_f1d8
  store i32 %v5_f1d8, i32* @ip, align 4
  %v3_f1dc = mul i32 %v9_f1cc, 65536
  %v4_f1e0 = udiv i32 %v6_f1cc, 65536
  %v5_f1e0 = or i32 %v3_f1dc, %v4_f1e0
  store i32 %v5_f1e0, i32* %r5.global-to-local, align 4
  %v3_f1e4 = mul i32 %v6_f1cc, 65536
  %v4_f1e8 = udiv i32 %v3_f1cc, 65536
  %v5_f1e8 = or i32 %v3_f1e4, %v4_f1e8
  store i32 %v5_f1e8, i32* %r4.global-to-local, align 4
  %v1_f1ec = add i32 %v0_f1ec, -16
  %v2_f1ec = inttoptr i32 %v1_f1ec to i32*
  store i32 %v5_f1e8, i32* %v2_f1ec, align 4
  %v4_f1ec = add i32 %v0_f1ec, -12
  %v5_f1ec = inttoptr i32 %v4_f1ec to i32*
  %v6_f1ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_f1ec, i32* %v5_f1ec, align 4
  %v7_f1ec = add i32 %v0_f1ec, -8
  %v8_f1ec = inttoptr i32 %v7_f1ec to i32*
  %v9_f1ec = load i32, i32* @ip, align 4
  store i32 %v9_f1ec, i32* %v8_f1ec, align 4
  %v10_f1ec = add i32 %v0_f1ec, -4
  %v11_f1ec = inttoptr i32 %v10_f1ec to i32*
  %v12_f1ec = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f1ec, i32* %v11_f1ec, align 4
  store i32 %v1_f1ec, i32* %r0.global-to-local, align 4
  %v0_f1f0 = load i32, i32* %r2.global-to-local, align 4
  %v2_f1f0 = add i32 %v0_f1f0, -16
  store i32 %v2_f1f0, i32* %r2.global-to-local, align 4
  %v6_f1f4 = icmp slt i32 %v0_f1f0, 16
  br i1 %v6_f1f4, label %dec_label_pc_f1f8, label %dec_label_pc_f1c8.dec_label_pc_f1c8_crit_edge

dec_label_pc_f1c8.dec_label_pc_f1c8_crit_edge:    ; preds = %dec_label_pc_f1c8
  %v0_f1c8.pre = load i32, i32* @r3, align 4
  %v0_f1cc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f1c8

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_f1c8
  %v2_f1f8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f1f8, i32* @r4, align 4
  %v5_f1f8 = load i8*, i8** %stack_var_-8, align 4
  %v6_f1f8 = ptrtoint i8* %v5_f1f8 to i32
  store i32 %v6_f1f8, i32* @r5, align 4
  store i32 %v11_f1c4, i32* @lr, align 4
  %v2_f1fc = add i32 %v0_f1f0, -4
  store i32 %v2_f1fc, i32* %r2.global-to-local, align 4
  %v4_f1fc = add i32 %v0_f1f0, 2147483632
  %v5_f1fc = and i32 %v2_f1fc, %v4_f1fc
  %v6_f1fc = icmp slt i32 %v5_f1fc, 0
  store i1 %v6_f1fc, i1* %cpsr_v.global-to-local, align 1
  %v7_f1fc = icmp slt i32 %v2_f1fc, 0
  store i1 %v7_f1fc, i1* %cpsr_n.global-to-local, align 1
  %v8_f1fc = icmp eq i32 %v2_f1fc, 0
  store i1 %v8_f1fc, i1* %cpsr_z.global-to-local, align 1
  %v5_f200 = icmp slt i32 %v2_f1f0, -12
  br i1 %v5_f200, label %dec_label_pc_f21c, label %dec_label_pc_f204

dec_label_pc_f204:                                ; preds = %dec_label_pc_f1f8, %dec_label_pc_f1b8, %dec_label_pc_f204
  %v1_f210 = phi i32 [ %v5_f210, %dec_label_pc_f204 ], [ %v1_f1ec, %dec_label_pc_f1f8 ], [ %v0_f18019, %dec_label_pc_f1b8 ]
  %v0_f204 = load i32, i32* @r3, align 4
  %v3_f204 = mul i32 %v0_f204, 65536
  store i32 %v3_f204, i32* %ip.global-to-local, align 4
  %v0_f208 = load i32, i32* %r1.global-to-local, align 4
  %v1_f208 = add i32 %v0_f208, -4
  %v2_f208 = inttoptr i32 %v1_f208 to i32*
  %v3_f208 = load i32, i32* %v2_f208, align 4
  store i32 %v3_f208, i32* @r3, align 4
  store i32 %v1_f208, i32* %r1.global-to-local, align 4
  %v4_f20c = udiv i32 %v3_f208, 65536
  %v5_f20c = or i32 %v4_f20c, %v3_f204
  store i32 %v5_f20c, i32* @ip, align 4
  %v2_f210 = add i32 %v1_f210, -4
  %v3_f210 = inttoptr i32 %v2_f210 to i32*
  store i32 %v5_f20c, i32* %v3_f210, align 4
  %v4_f210 = load i32, i32* %r0.global-to-local, align 4
  %v5_f210 = add i32 %v4_f210, -4
  store i32 %v5_f210, i32* %r0.global-to-local, align 4
  %v0_f214 = load i32, i32* %r2.global-to-local, align 4
  %v2_f214 = add i32 %v0_f214, -4
  store i32 %v2_f214, i32* %r2.global-to-local, align 4
  %v6_f218 = icmp slt i32 %v0_f214, 4
  br i1 %v6_f218, label %dec_label_pc_f21c.loopexit, label %dec_label_pc_f204

dec_label_pc_f21c.loopexit:                       ; preds = %dec_label_pc_f204
  %v4_f214 = sub i32 3, %v0_f214
  %v5_f214 = and i32 %v4_f214, %v0_f214
  %v6_f214 = icmp slt i32 %v5_f214, 0
  %v7_f214 = icmp slt i32 %v2_f214, 0
  store i1 %v6_f214, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f214, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f21c.loopexit, %dec_label_pc_f1f8
  %v2_f0f452 = phi i32 [ %v5_f210, %dec_label_pc_f21c.loopexit ], [ %v1_f1ec, %dec_label_pc_f1f8 ]
  %v0_f0e448 = phi i32 [ %v2_f214, %dec_label_pc_f21c.loopexit ], [ %v2_f1fc, %dec_label_pc_f1f8 ]
  %v0_f21c = load i32, i32* %r1.global-to-local, align 4
  %v1_f21c = add i32 %v0_f21c, 2
  store i32 %v1_f21c, i32* %r1.global-to-local, align 4
  br label %bb151

dec_label_pc_f224:                                ; preds = %dec_label_pc_f138
  br i1 %v5_f228, label %dec_label_pc_f270, label %dec_label_pc_f22c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f224
  store i32 %v2_f224, i32* %r2.global-to-local, align 4
  %v3_f230 = load i32, i32* @r4, align 4
  store i32 %v3_f230, i32* %stack_var_-12, align 4
  %v6_f230 = load i32, i32* @r5, align 4
  %v8_f230 = inttoptr i32 %v6_f230 to i8*
  store i8* %v8_f230, i8** %stack_var_-8, align 4
  %v11_f230 = load i32, i32* @lr, align 4
  br label %dec_label_pc_f234

dec_label_pc_f234:                                ; preds = %dec_label_pc_f234.dec_label_pc_f234_crit_edge, %dec_label_pc_f22c
  %v0_f258 = phi i32 [ %v1_f258, %dec_label_pc_f234.dec_label_pc_f234_crit_edge ], [ %v0_f18019, %dec_label_pc_f22c ]
  %v0_f238 = phi i32 [ %v0_f238.pre, %dec_label_pc_f234.dec_label_pc_f234_crit_edge ], [ %v1_f138, %dec_label_pc_f22c ]
  %v0_f234 = phi i32 [ %v0_f234.pre, %dec_label_pc_f234.dec_label_pc_f234_crit_edge ], [ %v2_f13c, %dec_label_pc_f22c ]
  %v3_f234 = mul i32 %v0_f234, 16777216
  store i32 %v3_f234, i32* %lr.global-to-local, align 4
  %v1_f238 = add i32 %v0_f238, -4
  %v2_f238 = inttoptr i32 %v1_f238 to i32*
  %v3_f238 = load i32, i32* %v2_f238, align 4
  store i32 %v3_f238, i32* @r3, align 4
  %v4_f238 = add i32 %v0_f238, -8
  %v5_f238 = inttoptr i32 %v4_f238 to i32*
  %v6_f238 = load i32, i32* %v5_f238, align 4
  store i32 %v6_f238, i32* %r4.global-to-local, align 4
  %v7_f238 = add i32 %v0_f238, -12
  %v8_f238 = inttoptr i32 %v7_f238 to i32*
  %v9_f238 = load i32, i32* %v8_f238, align 4
  store i32 %v9_f238, i32* %r5.global-to-local, align 4
  %v10_f238 = add i32 %v0_f238, -16
  %v11_f238 = inttoptr i32 %v10_f238 to i32*
  %v12_f238 = load i32, i32* %v11_f238, align 4
  store i32 %v10_f238, i32* %r1.global-to-local, align 4
  %v4_f23c = udiv i32 %v12_f238, 256
  %v5_f23c = or i32 %v4_f23c, %v3_f234
  store i32 %v5_f23c, i32* %lr.global-to-local, align 4
  %v3_f240 = mul i32 %v12_f238, 16777216
  %v4_f244 = udiv i32 %v9_f238, 256
  %v5_f244 = or i32 %v3_f240, %v4_f244
  store i32 %v5_f244, i32* @ip, align 4
  %v3_f248 = mul i32 %v9_f238, 16777216
  %v4_f24c = udiv i32 %v6_f238, 256
  %v5_f24c = or i32 %v3_f248, %v4_f24c
  store i32 %v5_f24c, i32* %r5.global-to-local, align 4
  %v3_f250 = mul i32 %v6_f238, 16777216
  %v4_f254 = udiv i32 %v3_f238, 256
  %v5_f254 = or i32 %v3_f250, %v4_f254
  store i32 %v5_f254, i32* %r4.global-to-local, align 4
  %v1_f258 = add i32 %v0_f258, -16
  %v2_f258 = inttoptr i32 %v1_f258 to i32*
  store i32 %v5_f254, i32* %v2_f258, align 4
  %v4_f258 = add i32 %v0_f258, -12
  %v5_f258 = inttoptr i32 %v4_f258 to i32*
  %v6_f258 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_f258, i32* %v5_f258, align 4
  %v7_f258 = add i32 %v0_f258, -8
  %v8_f258 = inttoptr i32 %v7_f258 to i32*
  %v9_f258 = load i32, i32* @ip, align 4
  store i32 %v9_f258, i32* %v8_f258, align 4
  %v10_f258 = add i32 %v0_f258, -4
  %v11_f258 = inttoptr i32 %v10_f258 to i32*
  %v12_f258 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f258, i32* %v11_f258, align 4
  store i32 %v1_f258, i32* %r0.global-to-local, align 4
  %v0_f25c = load i32, i32* %r2.global-to-local, align 4
  %v2_f25c = add i32 %v0_f25c, -16
  store i32 %v2_f25c, i32* %r2.global-to-local, align 4
  %v6_f260 = icmp slt i32 %v0_f25c, 16
  br i1 %v6_f260, label %dec_label_pc_f264, label %dec_label_pc_f234.dec_label_pc_f234_crit_edge

dec_label_pc_f234.dec_label_pc_f234_crit_edge:    ; preds = %dec_label_pc_f234
  %v0_f234.pre = load i32, i32* @r3, align 4
  %v0_f238.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f234

dec_label_pc_f264:                                ; preds = %dec_label_pc_f234
  %v2_f264 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f264, i32* @r4, align 4
  %v5_f264 = load i8*, i8** %stack_var_-8, align 4
  %v6_f264 = ptrtoint i8* %v5_f264 to i32
  store i32 %v6_f264, i32* @r5, align 4
  store i32 %v11_f230, i32* @lr, align 4
  %v2_f268 = add i32 %v0_f25c, -4
  store i32 %v2_f268, i32* %r2.global-to-local, align 4
  %v4_f268 = add i32 %v0_f25c, 2147483632
  %v5_f268 = and i32 %v2_f268, %v4_f268
  %v6_f268 = icmp slt i32 %v5_f268, 0
  store i1 %v6_f268, i1* %cpsr_v.global-to-local, align 1
  %v7_f268 = icmp slt i32 %v2_f268, 0
  store i1 %v7_f268, i1* %cpsr_n.global-to-local, align 1
  %v8_f268 = icmp eq i32 %v2_f268, 0
  store i1 %v8_f268, i1* %cpsr_z.global-to-local, align 1
  %v5_f26c = icmp slt i32 %v2_f25c, -12
  br i1 %v5_f26c, label %dec_label_pc_f288, label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %dec_label_pc_f264, %dec_label_pc_f224, %dec_label_pc_f270
  %v1_f27c = phi i32 [ %v5_f27c, %dec_label_pc_f270 ], [ %v1_f258, %dec_label_pc_f264 ], [ %v0_f18019, %dec_label_pc_f224 ]
  %v0_f270 = load i32, i32* @r3, align 4
  %v3_f270 = mul i32 %v0_f270, 16777216
  store i32 %v3_f270, i32* %ip.global-to-local, align 4
  %v0_f274 = load i32, i32* %r1.global-to-local, align 4
  %v1_f274 = add i32 %v0_f274, -4
  %v2_f274 = inttoptr i32 %v1_f274 to i32*
  %v3_f274 = load i32, i32* %v2_f274, align 4
  store i32 %v3_f274, i32* @r3, align 4
  store i32 %v1_f274, i32* %r1.global-to-local, align 4
  %v4_f278 = udiv i32 %v3_f274, 256
  %v5_f278 = or i32 %v4_f278, %v3_f270
  store i32 %v5_f278, i32* @ip, align 4
  %v2_f27c = add i32 %v1_f27c, -4
  %v3_f27c = inttoptr i32 %v2_f27c to i32*
  store i32 %v5_f278, i32* %v3_f27c, align 4
  %v4_f27c = load i32, i32* %r0.global-to-local, align 4
  %v5_f27c = add i32 %v4_f27c, -4
  store i32 %v5_f27c, i32* %r0.global-to-local, align 4
  %v0_f280 = load i32, i32* %r2.global-to-local, align 4
  %v2_f280 = add i32 %v0_f280, -4
  store i32 %v2_f280, i32* %r2.global-to-local, align 4
  %v6_f284 = icmp slt i32 %v0_f280, 4
  br i1 %v6_f284, label %dec_label_pc_f288.loopexit, label %dec_label_pc_f270

dec_label_pc_f288.loopexit:                       ; preds = %dec_label_pc_f270
  %v4_f280 = sub i32 3, %v0_f280
  %v5_f280 = and i32 %v4_f280, %v0_f280
  %v6_f280 = icmp slt i32 %v5_f280, 0
  %v7_f280 = icmp slt i32 %v2_f280, 0
  store i1 %v6_f280, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f280, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %dec_label_pc_f288.loopexit, %dec_label_pc_f264
  %v2_f0f453 = phi i32 [ %v5_f27c, %dec_label_pc_f288.loopexit ], [ %v1_f258, %dec_label_pc_f264 ]
  %v0_f0e449 = phi i32 [ %v2_f280, %dec_label_pc_f288.loopexit ], [ %v2_f268, %dec_label_pc_f264 ]
  %v0_f288 = load i32, i32* %r1.global-to-local, align 4
  %v1_f288 = add i32 %v0_f288, 1
  store i32 %v1_f288, i32* %r1.global-to-local, align 4
  br label %bb151

; uselistorder directives
  uselistorder i32 %v5_f27c, { 0, 2, 1 }
  uselistorder i32 %v3_f270, { 1, 0 }
  uselistorder i32 %v2_f268, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f258, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_f238, { 1, 0 }
  uselistorder i32 %v3_f234, { 1, 0 }
  uselistorder i32 %v0_f238, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f258, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f210, { 0, 2, 1 }
  uselistorder i32 %v3_f204, { 1, 0 }
  uselistorder i32 %v2_f1fc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f1ec, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_f1cc, { 1, 0 }
  uselistorder i32 %v3_f1c8, { 1, 0 }
  uselistorder i32 %v0_f1cc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f1ec, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f1a4, { 0, 2, 1 }
  uselistorder i32 %v3_f198, { 1, 0 }
  uselistorder i32 %v2_f190, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f180, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_f160, { 1, 0 }
  uselistorder i32 %v3_f15c, { 1, 0 }
  uselistorder i32 %v0_f160, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f180, { 3, 2, 1, 0 }
  uselistorder i1 %v5_f228, { 2, 0, 1 }
  uselistorder i32 %v0_f140, { 1, 0 }
  uselistorder i32 %v0_f22c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_f18019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_f130, { 2, 1, 0 }
  uselistorder i32 %v0_f130, { 2, 0, 1 }
  uselistorder i32 %v2_f128, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_f128, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f128, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_f18020, { 2, 1, 0 }
  uselistorder i32 %v11_f104, { 1, 0 }
  uselistorder i32 %v7_f104, { 1, 0 }
  uselistorder i32 %v1_f0e4, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_f0e4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_f0e8, { 1, 0 }
  uselistorder i32 %v7_f0dc, { 0, 2, 1 }
  uselistorder i32 %v10_f0d8, { 1, 0 }
  uselistorder i32 %v9_f0d0, { 1, 0, 2 }
  uselistorder i32 %v6_f0cc, { 1, 0 }
  uselistorder i32 %v2_f0c4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_f0c4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_f0d4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_f0b8, { 0, 2, 1 }
  uselistorder i32 %v13_f0b4, { 1, 0 }
  uselistorder i32 %v4_f0b0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_f0b0, { 2, 0, 1 }
  uselistorder i32 %v6_f0b8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_f0a8, { 0, 2, 1 }
  uselistorder i32 %v16_f0a4, { 1, 0 }
  uselistorder i32 %v4_f0a0, { 1, 2, 0 }
  uselistorder i32 %v0_f0b0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_f0a8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_f094, { 0, 3, 2, 1 }
  uselistorder i32 %v10_f090, { 1, 0 }
  uselistorder i32 %v1_f08c, { 1, 0 }
  uselistorder i32 %v10_f088, { 1, 0 }
  uselistorder i32 %v0_f088, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f08c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_f080, { 0, 2, 1 }
  uselistorder i32 %v2_f074, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_f074, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_f08c37, { 1, 2, 0 }
  uselistorder i32 %v1_f06c, { 2, 1, 0 }
  uselistorder i32 %v1_f064, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f05c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_f058, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_f054, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_f054, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_f044, { 0, 2, 1 }
  uselistorder i32 %v4_f040, { 1, 0 }
  uselistorder i32 %v3_f034, { 1, 0 }
  uselistorder i32 %v1_f02c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f020, { 1, 0 }
  uselistorder i32 %v12_f01c, { 0, 2, 1 }
  uselistorder i32 %v8_effc, { 1, 0, 2 }
  uselistorder i32 %v5_effc, { 1, 0, 2 }
  uselistorder i32 %v2_effc, { 1, 0, 2 }
  uselistorder i32 %v0_effc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f01c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_efd8, { 0, 2, 1 }
  uselistorder i32 %v4_efd4, { 1, 0 }
  uselistorder i32 %v3_efc8, { 1, 0 }
  uselistorder i32 %v1_efc0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_efb4, { 1, 0 }
  uselistorder i32 %v12_efb0, { 0, 2, 1 }
  uselistorder i32 %v8_ef90, { 1, 0, 2 }
  uselistorder i32 %v5_ef90, { 1, 0, 2 }
  uselistorder i32 %v2_ef90, { 1, 0, 2 }
  uselistorder i32 %v0_ef90, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_efb0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ef6c, { 0, 2, 1 }
  uselistorder i32 %v4_ef68, { 1, 0 }
  uselistorder i32 %v3_ef5c, { 1, 0 }
  uselistorder i32 %v1_ef54, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_ef48, { 1, 0 }
  uselistorder i32 %v12_ef44, { 0, 2, 1 }
  uselistorder i32 %v8_ef24, { 1, 0, 2 }
  uselistorder i32 %v5_ef24, { 1, 0, 2 }
  uselistorder i32 %v2_ef24, { 1, 0, 2 }
  uselistorder i32 %v0_ef24, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ef44, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_ef80, { 0, 2, 1 }
  uselistorder i32 %v1_ef7c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_ef00, { 2, 0, 1, 3 }
  uselistorder i32 %v2_ef00, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ef84, { 1, 0, 3, 2 }
  uselistorder i32 %v0_f01c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_eef4, { 1, 0 }
  uselistorder i32 %v0_eef4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_eeec, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_eeec, { 1, 0, 2 }
  uselistorder i32 %v0_eeec, { 2, 0, 1, 3 }
  uselistorder i32 %v0_f01c77, { 1, 0 }
  uselistorder i32 %v1_eecc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_eed4, { 1, 0 }
  uselistorder i32 %v0_eea8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_ee9c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_ee88, { 1, 0, 2 }
  uselistorder i32 %v1_ee84, { 1, 0 }
  uselistorder i32 %v1_ee7c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_ee7c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_ee74, { 0, 2, 1 }
  uselistorder i32 %v3_ee74, { 3, 0, 1, 2 }
  uselistorder i1 %v0_ee74, { 1, 0 }
  uselistorder i1 %v1_ee74, { 1, 0 }
  uselistorder i32 %v3_ee70, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_ee68, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_ee54, { 1, 2, 0 }
  uselistorder i32 %v1_ee4c, { 0, 2, 1 }
  uselistorder i32 %v12_ee48, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee3c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ee40, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_ee30, { 0, 2, 1 }
  uselistorder i32 %v1_ee28, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ee28, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_ee20, { 1, 0 }
  uselistorder i32 %v1_ee18, { 2, 1, 0 }
  uselistorder i32 %v2_ee10, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_ee10, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_ee0c, { 1, 0 }
  uselistorder i32 %v2_ee00, { 1, 0 }
  uselistorder i32 %v1_ee00, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_ee00, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 68, 1, 2, 3, 4, 5, 69, 6, 7, 8, 9, 10, 70, 11, 12, 66, 67, 71, 27, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 28, 29, 61, 30, 31, 32, 33, 34, 62, 35, 36, 37, 38, 39, 63, 40, 41, 42, 43, 44, 64, 45, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 2, 5, 3, 77, 4, 6, 8, 10, 7, 78, 9, 11, 13, 75, 12, 79, 74, 76, 80, 83, 81, 87, 88, 14, 15, 16, 18, 17, 19, 20, 82, 21, 22, 84, 23, 85, 24, 86, 25, 26, 27, 28, 29, 31, 33, 30, 45, 32, 34, 36, 38, 35, 46, 37, 39, 41, 43, 40, 47, 42, 44, 48, 49, 54, 50, 52, 51, 53, 55, 58, 56, 59, 57, 60, 61, 67, 62, 63, 68, 64, 69, 65, 70, 66, 71, 72, 73, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 56, 3, 4, 57, 5, 6, 58, 7, 55, 61, 62, 8, 9, 21, 10, 12, 11, 13, 14, 59, 15, 16, 60, 17, 18, 19, 20, 22, 23, 31, 24, 25, 32, 26, 27, 33, 28, 29, 34, 30, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 50, 51, 45, 46, 47, 52, 48, 49, 53, 54, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 7, 3, 9, 4, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 0, 24, 5, 25, 6, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 2, 7, 3, 9, 4, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 0, 23, 5, 24, 6, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 2, 7, 3, 9, 4, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 0, 25, 5, 26, 6, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f270, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f204, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f198, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f138, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb151, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_f0c4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_f088, { 1, 0 }
  uselistorder label %dec_label_pc_f074, { 1, 0 }
  uselistorder label %dec_label_pc_f034, { 2, 0, 1 }
  uselistorder label %dec_label_pc_efc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_eefc, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_eecc, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_ee68, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %dec_label_pc_ee28, { 1, 0 }
}

define i32 @strtok_r() local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f290 = load i32, i32* @r4, align 4
  store i32 %v3_f290, i32* %stack_var_-16, align 4
  %v0_f294 = load i32, i32* @r0, align 4
  store i32 %v0_f294, i32* %r4.global-to-local, align 4
  %v2_f294 = icmp eq i32 %v0_f294, 0
  %v1_f298 = load i32, i32* @r2, align 4
  br i1 %v2_f294, label %bb, label %entry._crit_edge

bb:                                               ; preds = %entry
  %v2_f298 = inttoptr i32 %v1_f298 to i32*
  %v3_f298 = load i32, i32* %v2_f298, align 4
  store i32 %v3_f298, i32* %r4.global-to-local, align 4
  br label %entry._crit_edge

entry._crit_edge:                                 ; preds = %entry, %bb
  %v0_f29c = phi i32 [ %v3_f298, %bb ], [ %v0_f294, %entry ]
  store i32 %v0_f29c, i32* @r0, align 4
  store i32 %v1_f298, i32* %r5.global-to-local, align 4
  %v0_f2a4 = load i32, i32* @r1, align 4
  store i32 %v0_f2a4, i32* %r6.global-to-local, align 4
  %v1_f2a8 = inttoptr i32 %v0_f29c to i8*
  %v2_f2a8 = call i32 @__GI_strspn(i8* %v1_f2a8)
  %v0_f2ac = load i32, i32* %r4.global-to-local, align 4
  %v2_f2ac = add i32 %v0_f2ac, %v2_f2a8
  %v3_f2ac = inttoptr i32 %v2_f2ac to i8*
  %v4_f2ac = load i8, i8* %v3_f2ac, align 1
  %v6_f2ac = zext i8 %v4_f2ac to i32
  store i32 %v6_f2ac, i32* %r3.global-to-local, align 4
  store i32 %v2_f2ac, i32* @r4, align 4
  %v2_f2b4 = icmp eq i8 %v4_f2ac, 0
  br i1 %v2_f2b4, label %bb8, label %dec_label_pc_f2c0

bb8:                                              ; preds = %entry._crit_edge
  %v2_f2b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_f2b8 = inttoptr i32 %v2_f2b8 to i32*
  store i32 %v2_f2ac, i32* %v3_f2b8, align 4
  br label %dec_label_pc_f2fc

dec_label_pc_f2c0:                                ; preds = %entry._crit_edge
  %v0_f2c0 = load i32, i32* %r6.global-to-local, align 4
  %v3_f2c8 = call i32 @__GI_strpbrk(i8* %v3_f2ac, i32 %v0_f2c0)
  %v3_f2cc = icmp eq i32 %v3_f2c8, 0
  br i1 %v3_f2cc, label %dec_label_pc_f2d4, label %dec_label_pc_f2ec

dec_label_pc_f2d4:                                ; preds = %dec_label_pc_f2c0
  %v0_f2d8 = load i32, i32* @r4, align 4
  store i32 %v0_f2d8, i32* @r0, align 4
  %v2_f2dc = call i32 @rawmemchr(i32 %v0_f2d8, i32 0)
  %v0_f2e0 = load i32, i32* @r4, align 4
  store i32 %v0_f2e0, i32* %r3.global-to-local, align 4
  %v1_f2e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i32*
  store i32 %v2_f2dc, i32* %v2_f2e4, align 4
  br label %dec_label_pc_f2fc

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f2c0
  %v4_f2c8 = inttoptr i32 %v3_f2c8 to i8*
  store i8 0, i8* %v4_f2c8, align 1
  %v7_f2f0 = add i32 %v3_f2c8, 1
  %v1_f2f4 = load i32, i32* %r5.global-to-local, align 4
  %v2_f2f4 = inttoptr i32 %v1_f2f4 to i32*
  store i32 %v7_f2f0, i32* %v2_f2f4, align 4
  %v0_f2f8 = load i32, i32* @r4, align 4
  store i32 %v0_f2f8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f2fc

dec_label_pc_f2fc:                                ; preds = %bb8, %dec_label_pc_f2d4, %dec_label_pc_f2ec
  %v0_f2fc = load i32, i32* %r3.global-to-local, align 4
  %v2_f300 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f300, i32* @r4, align 4
  ret i32 %v0_f2fc

; uselistorder directives
  uselistorder i32 %v3_f2c8, { 0, 2, 1 }
  uselistorder i32 %v0_f29c, { 1, 0 }
  uselistorder i32 %v0_f294, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 (i8*)* @__GI_strspn, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f2fc, { 2, 1, 0 }
  uselistorder label %entry._crit_edge, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_f308 = load i32, i32* @r4, align 4
  store i32 %v3_f308, i32* %stack_var_-16, align 4
  %v6_f308 = load i32, i32* @r5, align 4
  %v9_f308 = load i32, i32* @r6, align 4
  %v0_f30c = load i32, i32* @r0, align 4
  %v0_f310 = load i32, i32* @r1, align 4
  store i32 %v0_f310, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_f32c8 = inttoptr i32 %v0_f30c to i8*
  %v2_f32c9 = load i8, i8* %v1_f32c8, align 1
  %v2_f33011 = icmp eq i8 %v2_f32c9, 0
  store i32 %v0_f310, i32* @r0, align 4
  %v1_f33812 = add i32 %v0_f30c, 1
  store i32 %v1_f33812, i32* @r4, align 4
  br i1 %v2_f33011, label %dec_label_pc_f340, label %dec_label_pc_f31c

dec_label_pc_f31c:                                ; preds = %entry, %dec_label_pc_f328
  %v3_f32c14.in = phi i8 [ %v2_f32c, %dec_label_pc_f328 ], [ %v2_f32c9, %entry ]
  %v0_f33413 = phi i32 [ %v0_f334.pre, %dec_label_pc_f328 ], [ %v0_f310, %entry ]
  %v3_f32c14 = zext i8 %v3_f32c14.in to i32
  %v2_f31c = call i32 @__GI_strchr(i32 %v0_f33413, i32 %v3_f32c14)
  %v2_f320 = icmp eq i32 %v2_f31c, 0
  %v0_f328 = load i32, i32* @r5, align 4
  br i1 %v2_f320, label %dec_label_pc_f328, label %dec_label_pc_f340

dec_label_pc_f328:                                ; preds = %dec_label_pc_f31c
  %v1_f328 = add i32 %v0_f328, 1
  %v0_f32c.pre = load i32, i32* @r4, align 4
  %v0_f334.pre = load i32, i32* @r6, align 4
  store i32 %v1_f328, i32* @r5, align 4
  %v1_f32c = inttoptr i32 %v0_f32c.pre to i8*
  %v2_f32c = load i8, i8* %v1_f32c, align 1
  %v2_f330 = icmp eq i8 %v2_f32c, 0
  store i32 %v0_f334.pre, i32* @r0, align 4
  %v1_f338 = add i32 %v0_f32c.pre, 1
  store i32 %v1_f338, i32* @r4, align 4
  br i1 %v2_f330, label %dec_label_pc_f340, label %dec_label_pc_f31c

dec_label_pc_f340:                                ; preds = %dec_label_pc_f328, %dec_label_pc_f31c, %entry
  %v0_f340 = phi i32 [ 0, %entry ], [ %v0_f328, %dec_label_pc_f31c ], [ %v1_f328, %dec_label_pc_f328 ]
  %v2_f344 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f344, i32* @r4, align 4
  store i32 %v6_f308, i32* @r5, align 4
  store i32 %v9_f308, i32* @r6, align 4
  ret i32 %v0_f340

; uselistorder directives
  uselistorder i8 %v2_f32c, { 1, 0 }
  uselistorder i32 %v0_f334.pre, { 1, 0 }
  uselistorder i32 %v0_f32c.pre, { 1, 0 }
  uselistorder label %dec_label_pc_f31c, { 1, 0 }
}

define i32 @rawmemchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_f350 = urem i32 %arg1, 256
  %v0_f3682 = load i32, i32* @r0, align 4
  %v1_f3683 = urem i32 %v0_f3682, 4
  %v2_f3684 = icmp eq i32 %v1_f3683, 0
  br i1 %v2_f3684, label %dec_label_pc_f370, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %entry, %dec_label_pc_f364
  %v0_f364 = phi i32 [ %v1_f364, %dec_label_pc_f364 ], [ %v0_f3682, %entry ]
  %v1_f358 = inttoptr i32 %v0_f364 to i8*
  %v2_f358 = load i8, i8* %v1_f358, align 1
  %v3_f358 = zext i8 %v2_f358 to i32
  %v9_f35c = icmp eq i32 %v3_f358, %v1_f350
  br i1 %v9_f35c, label %dec_label_pc_f3ec, label %dec_label_pc_f364

dec_label_pc_f364:                                ; preds = %dec_label_pc_f358
  %v1_f364 = add i32 %v0_f364, 1
  %v1_f368 = urem i32 %v1_f364, 4
  %v2_f368 = icmp eq i32 %v1_f368, 0
  br i1 %v2_f368, label %dec_label_pc_f370, label %dec_label_pc_f358

dec_label_pc_f370:                                ; preds = %dec_label_pc_f364, %entry
  %v0_f374 = phi i32 [ %v0_f3682, %entry ], [ %v1_f364, %dec_label_pc_f364 ]
  %v4_f370 = mul nuw nsw i32 %v1_f350, 256
  %v5_f370 = or i32 %v4_f370, %v1_f350
  %v4_f378 = mul i32 %v5_f370, 65536
  %v5_f378 = or i32 %v4_f378, %v5_f370
  br label %dec_label_pc_f37c

dec_label_pc_f37c:                                ; preds = %dec_label_pc_f3dc, %dec_label_pc_f37c, %dec_label_pc_f370
  %v0_f3c0 = phi i32 [ %v0_f374, %dec_label_pc_f370 ], [ %v4_f37c, %dec_label_pc_f37c ], [ %v4_f37c, %dec_label_pc_f3dc ]
  %v1_f37c = inttoptr i32 %v0_f3c0 to i32*
  %v2_f37c = load i32, i32* %v1_f37c, align 4
  %v4_f37c = add i32 %v0_f3c0, 4
  %v2_f384 = xor i32 %v2_f37c, %v5_f378
  %v2_f388 = add i32 %v2_f384, 2130640639
  %v1_f390 = sub i32 -1, %v2_f384
  %v2_f394 = xor i32 %v2_f388, %v1_f390
  %v2_f398 = and i32 %v2_f394, -2130640640
  %v2_f39c = icmp eq i32 %v2_f398, 0
  br i1 %v2_f39c, label %dec_label_pc_f37c, label %dec_label_pc_f3a4

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f37c
  %v2_f3a4 = inttoptr i32 %v0_f3c0 to i8*
  %v3_f3a4 = load i8, i8* %v2_f3a4, align 1
  %v4_f3a4 = zext i8 %v3_f3a4 to i32
  %v9_f3ac = icmp eq i32 %v4_f3a4, %v1_f350
  %v1_f3b0 = add i32 %v0_f3c0, 3
  br i1 %v9_f3ac, label %dec_label_pc_f3ec, label %dec_label_pc_f3b8

dec_label_pc_f3b8:                                ; preds = %dec_label_pc_f3a4
  %v1_f3b8 = add i32 %v0_f3c0, 1
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i8*
  %v3_f3b8 = load i8, i8* %v2_f3b8, align 1
  %v4_f3b8 = zext i8 %v3_f3b8 to i32
  %v9_f3bc = icmp eq i32 %v4_f3b8, %v1_f350
  br i1 %v9_f3bc, label %bb, label %dec_label_pc_f3cc

bb:                                               ; preds = %dec_label_pc_f3b8
  br label %dec_label_pc_f3ec

dec_label_pc_f3cc:                                ; preds = %dec_label_pc_f3b8
  %v1_f3cc = add i32 %v0_f3c0, 2
  %v2_f3cc = inttoptr i32 %v1_f3cc to i8*
  %v3_f3cc = load i8, i8* %v2_f3cc, align 1
  %v4_f3cc = zext i8 %v3_f3cc to i32
  %v9_f3d0 = icmp eq i32 %v4_f3cc, %v1_f350
  br i1 %v9_f3d0, label %dec_label_pc_f3ec, label %dec_label_pc_f3dc

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f3cc
  %v2_f3dc = inttoptr i32 %v1_f3b0 to i8*
  %v3_f3dc = load i8, i8* %v2_f3dc, align 1
  %v4_f3dc = zext i8 %v3_f3dc to i32
  %v9_f3e0 = icmp eq i32 %v4_f3dc, %v1_f350
  br i1 %v9_f3e0, label %dec_label_pc_f3e8, label %dec_label_pc_f37c

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3dc
  br label %dec_label_pc_f3ec

dec_label_pc_f3ec:                                ; preds = %dec_label_pc_f358, %dec_label_pc_f3cc, %dec_label_pc_f3a4, %bb, %dec_label_pc_f3e8
  %v1_f3f0 = phi i32 [ %v1_f3b0, %dec_label_pc_f3e8 ], [ %v1_f3b8, %bb ], [ %v1_f3cc, %dec_label_pc_f3cc ], [ %v0_f3c0, %dec_label_pc_f3a4 ], [ %v0_f364, %dec_label_pc_f358 ]
  ret i32 %v1_f3f0

; uselistorder directives
  uselistorder i32 %v4_f37c, { 1, 0 }
  uselistorder i32 %v0_f3c0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_f370, { 1, 0 }
  uselistorder i32 %v1_f364, { 1, 0, 2 }
  uselistorder i32 %v0_f3682, { 2, 1, 0 }
  uselistorder i32 %v1_f350, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_f3ec, { 4, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_f358, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_f42c2 = load i32, i32* @r0, align 4
  %v1_f42c3 = inttoptr i32 %v0_f42c2 to i8*
  %v2_f42c4 = load i8, i8* %v1_f42c3, align 1
  %v3_f42c5 = zext i8 %v2_f42c4 to i32
  store i32 %v3_f42c5, i32* @ip, align 4
  %v2_f4306 = icmp eq i8 %v2_f42c4, 0
  br i1 %v2_f4306, label %dec_label_pc_f43c, label %dec_label_pc_f410.preheader

dec_label_pc_f408:                                ; preds = %dec_label_pc_f410
  %v3_f410 = zext i8 %v2_f410 to i32
  %v1_f418 = add i32 %v0_f418, 1
  %v9_f408 = icmp eq i32 %v0_f40810, %v3_f410
  br i1 %v9_f408, label %dec_label_pc_f424, label %dec_label_pc_f410

dec_label_pc_f410:                                ; preds = %dec_label_pc_f410.preheader, %dec_label_pc_f408
  %v0_f418 = phi i32 [ %tmp, %dec_label_pc_f410.preheader ], [ %v1_f418, %dec_label_pc_f408 ]
  %v1_f410 = inttoptr i32 %v0_f418 to i8*
  %v2_f410 = load i8, i8* %v1_f410, align 1
  %v2_f414 = icmp eq i8 %v2_f410, 0
  br i1 %v2_f414, label %dec_label_pc_f43c, label %dec_label_pc_f408

dec_label_pc_f424:                                ; preds = %dec_label_pc_f408
  %v1_f424 = add i32 %v0_f424, 1
  %v1_f428 = add i32 %v0_f428, 1
  %v1_f42c = inttoptr i32 %v1_f428 to i8*
  %v2_f42c = load i8, i8* %v1_f42c, align 1
  %v3_f42c = zext i8 %v2_f42c to i32
  store i32 %v3_f42c, i32* @ip, align 4
  %v2_f430 = icmp eq i8 %v2_f42c, 0
  br i1 %v2_f430, label %dec_label_pc_f43c, label %dec_label_pc_f410.preheader

dec_label_pc_f410.preheader:                      ; preds = %entry, %dec_label_pc_f424
  %v0_f428 = phi i32 [ %v1_f428, %dec_label_pc_f424 ], [ %v0_f42c2, %entry ]
  %v0_f424 = phi i32 [ %v1_f424, %dec_label_pc_f424 ], [ 0, %entry ]
  %v0_f40810 = phi i32 [ %v3_f42c, %dec_label_pc_f424 ], [ %v3_f42c5, %entry ]
  br label %dec_label_pc_f410

dec_label_pc_f43c:                                ; preds = %dec_label_pc_f424, %dec_label_pc_f410, %entry
  %v0_f43c = phi i32 [ 0, %entry ], [ %v0_f424, %dec_label_pc_f410 ], [ %v1_f424, %dec_label_pc_f424 ]
  ret i32 %v0_f43c

; uselistorder directives
  uselistorder i32 %v0_f418, { 1, 0 }
  uselistorder label %dec_label_pc_f410.preheader, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_f44c = urem i32 %arg2, 256
  store i32 %v1_f44c, i32* @r4, align 4
  %v2_f44c = icmp eq i32 %v1_f44c, 0
  br i1 %v2_f44c, label %dec_label_pc_f460, label %dec_label_pc_f474.preheader

dec_label_pc_f474.preheader:                      ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_f47c3 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_f44c)
  %v2_f4805 = icmp eq i32 %v2_f47c3, 0
  br i1 %v2_f4805, label %dec_label_pc_f488, label %dec_label_pc_f46c

dec_label_pc_f460:                                ; preds = %entry
  %v2_f464 = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_f48c

dec_label_pc_f46c:                                ; preds = %dec_label_pc_f474.preheader, %dec_label_pc_f46c
  %v2_f47c6 = phi i32 [ %v2_f47c, %dec_label_pc_f46c ], [ %v2_f47c3, %dec_label_pc_f474.preheader ]
  store i32 %v2_f47c6, i32* @r5, align 4
  %v1_f470 = add i32 %v2_f47c6, 1
  store i32 %v1_f470, i32* @r0, align 4
  %v0_f478 = load i32, i32* @r4, align 4
  %v2_f47c = call i32 @__GI_strchr(i32 %v1_f470, i32 %v0_f478)
  %v2_f480 = icmp eq i32 %v2_f47c, 0
  br i1 %v2_f480, label %dec_label_pc_f488, label %dec_label_pc_f46c

dec_label_pc_f488:                                ; preds = %dec_label_pc_f46c, %dec_label_pc_f474.preheader
  %v0_f488 = load i32, i32* @r5, align 4
  br label %dec_label_pc_f48c

dec_label_pc_f48c:                                ; preds = %dec_label_pc_f460, %dec_label_pc_f488
  %storemerge = phi i32 [ %v2_f464, %dec_label_pc_f460 ], [ %v0_f488, %dec_label_pc_f488 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_f47c, { 1, 0 }
  uselistorder i32 %v1_f470, { 1, 0 }
  uselistorder i32 %v1_f44c, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_f48c, { 1, 0 }
  uselistorder label %dec_label_pc_f46c, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_f49c = urem i32 %arg1, 256
  %v0_f4bc2 = load i32, i32* @r0, align 4
  %v1_f4bc3 = urem i32 %v0_f4bc2, 4
  %v2_f4bc4 = icmp eq i32 %v1_f4bc3, 0
  br i1 %v2_f4bc4, label %dec_label_pc_f4c4, label %dec_label_pc_f4a4

dec_label_pc_f4a4:                                ; preds = %entry, %dec_label_pc_f4b8
  %v0_f4b8 = phi i32 [ %v1_f4b8, %dec_label_pc_f4b8 ], [ %v0_f4bc2, %entry ]
  %v1_f4a4 = inttoptr i32 %v0_f4b8 to i8*
  %v2_f4a4 = load i8, i8* %v1_f4a4, align 1
  %v3_f4a4 = zext i8 %v2_f4a4 to i32
  %v9_f4a8 = icmp eq i32 %v3_f4a4, %v1_f49c
  br i1 %v9_f4a8, label %dec_label_pc_f574, label %dec_label_pc_f4b0

dec_label_pc_f4b0:                                ; preds = %dec_label_pc_f4a4
  %v2_f4b0 = icmp eq i8 %v2_f4a4, 0
  br i1 %v2_f4b0, label %dec_label_pc_f574, label %dec_label_pc_f4b8

dec_label_pc_f4b8:                                ; preds = %dec_label_pc_f4b0
  %v1_f4b8 = add i32 %v0_f4b8, 1
  %v1_f4bc = urem i32 %v1_f4b8, 4
  %v2_f4bc = icmp eq i32 %v1_f4bc, 0
  br i1 %v2_f4bc, label %dec_label_pc_f4c4, label %dec_label_pc_f4a4

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4b8, %entry
  %v0_f4c8 = phi i32 [ %v0_f4bc2, %entry ], [ %v1_f4b8, %dec_label_pc_f4b8 ]
  %v4_f4c4 = mul nuw nsw i32 %v1_f49c, 256
  %v5_f4c4 = or i32 %v4_f4c4, %v1_f49c
  %v4_f4cc = mul i32 %v5_f4c4, 65536
  %v5_f4cc = or i32 %v4_f4cc, %v5_f4c4
  br label %dec_label_pc_f4d0

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f56c, %dec_label_pc_f50c, %dec_label_pc_f4c4
  %v0_f534 = phi i32 [ %v0_f4c8, %dec_label_pc_f4c4 ], [ %v4_f4d0, %dec_label_pc_f50c ], [ %v4_f4d0, %dec_label_pc_f56c ]
  %v1_f4d0 = inttoptr i32 %v0_f534 to i32*
  %v2_f4d0 = load i32, i32* %v1_f4d0, align 4
  %v4_f4d0 = add i32 %v0_f534, 4
  %v2_f4d8 = xor i32 %v2_f4d0, %v5_f4cc
  %v2_f4dc = add i32 %v2_f4d8, 2130640639
  store i32 %v2_f4dc, i32* @ip, align 4
  %v2_f4e4 = add i32 %v2_f4d0, 2130640639
  %v1_f4e8 = sub i32 -1, %v2_f4d0
  %v2_f4ec = xor i32 %v2_f4e4, %v1_f4e8
  %v2_f4f8 = and i32 %v2_f4ec, -2130640640
  %v2_f500 = icmp eq i32 %v2_f4f8, 0
  br i1 %v2_f500, label %dec_label_pc_f50c, label %dec_label_pc_f514

dec_label_pc_f50c:                                ; preds = %dec_label_pc_f4d0
  %v1_f4f4 = sub i32 -1, %v2_f4d8
  %v2_f4fc = xor i32 %v2_f4dc, %v1_f4f4
  %v2_f504 = and i32 %v2_f4fc, -2130640640
  %v2_f50c = icmp eq i32 %v2_f504, 0
  br i1 %v2_f50c, label %dec_label_pc_f4d0, label %dec_label_pc_f514

dec_label_pc_f514:                                ; preds = %dec_label_pc_f4d0, %dec_label_pc_f50c
  %v2_f514 = inttoptr i32 %v0_f534 to i8*
  %v3_f514 = load i8, i8* %v2_f514, align 1
  %v4_f514 = zext i8 %v3_f514 to i32
  %v9_f518 = icmp eq i32 %v4_f514, %v1_f49c
  br i1 %v9_f518, label %dec_label_pc_f574, label %dec_label_pc_f524

dec_label_pc_f524:                                ; preds = %dec_label_pc_f514
  %v2_f524 = icmp eq i8 %v3_f514, 0
  br i1 %v2_f524, label %dec_label_pc_f574, label %dec_label_pc_f52c

dec_label_pc_f52c:                                ; preds = %dec_label_pc_f524
  %v1_f52c = add i32 %v0_f534, 1
  %v2_f52c = inttoptr i32 %v1_f52c to i8*
  %v3_f52c = load i8, i8* %v2_f52c, align 1
  %v4_f52c = zext i8 %v3_f52c to i32
  %v9_f530 = icmp eq i32 %v4_f52c, %v1_f49c
  br i1 %v9_f530, label %dec_label_pc_f574, label %dec_label_pc_f53c

dec_label_pc_f53c:                                ; preds = %dec_label_pc_f52c
  %v2_f53c = icmp eq i8 %v3_f52c, 0
  br i1 %v2_f53c, label %dec_label_pc_f574, label %dec_label_pc_f544

dec_label_pc_f544:                                ; preds = %dec_label_pc_f53c
  %v1_f544 = add i32 %v0_f534, 2
  %v2_f544 = inttoptr i32 %v1_f544 to i8*
  %v3_f544 = load i8, i8* %v2_f544, align 1
  %v4_f544 = zext i8 %v3_f544 to i32
  %v9_f548 = icmp eq i32 %v4_f544, %v1_f49c
  br i1 %v9_f548, label %dec_label_pc_f574, label %dec_label_pc_f554

dec_label_pc_f554:                                ; preds = %dec_label_pc_f544
  %v2_f554 = icmp eq i8 %v3_f544, 0
  br i1 %v2_f554, label %dec_label_pc_f574, label %dec_label_pc_f55c

dec_label_pc_f55c:                                ; preds = %dec_label_pc_f554
  %v1_f55c = add i32 %v0_f534, 3
  %v2_f55c = inttoptr i32 %v1_f55c to i8*
  %v3_f55c = load i8, i8* %v2_f55c, align 1
  %v4_f55c = zext i8 %v3_f55c to i32
  %v9_f560 = icmp eq i32 %v4_f55c, %v1_f49c
  br i1 %v9_f560, label %dec_label_pc_f574, label %dec_label_pc_f56c

dec_label_pc_f56c:                                ; preds = %dec_label_pc_f55c
  %v2_f56c = icmp eq i8 %v3_f55c, 0
  br i1 %v2_f56c, label %dec_label_pc_f574, label %dec_label_pc_f4d0

dec_label_pc_f574:                                ; preds = %dec_label_pc_f4b0, %dec_label_pc_f4a4, %dec_label_pc_f56c, %dec_label_pc_f55c, %dec_label_pc_f554, %dec_label_pc_f544, %dec_label_pc_f53c, %dec_label_pc_f52c, %dec_label_pc_f524, %dec_label_pc_f514
  %v1_f578 = phi i32 [ %v1_f55c, %dec_label_pc_f56c ], [ %v1_f55c, %dec_label_pc_f55c ], [ %v1_f544, %dec_label_pc_f554 ], [ %v1_f544, %dec_label_pc_f544 ], [ %v1_f52c, %dec_label_pc_f53c ], [ %v1_f52c, %dec_label_pc_f52c ], [ %v0_f534, %dec_label_pc_f524 ], [ %v0_f534, %dec_label_pc_f514 ], [ %v0_f4b8, %dec_label_pc_f4a4 ], [ %v0_f4b8, %dec_label_pc_f4b0 ]
  ret i32 %v1_f578

; uselistorder directives
  uselistorder i32 %v4_f4d0, { 1, 0 }
  uselistorder i32 %v2_f4d0, { 0, 2, 1 }
  uselistorder i32 %v0_f534, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_f4c4, { 1, 0 }
  uselistorder i32 %v1_f4b8, { 1, 0, 2 }
  uselistorder i32 %v0_f4bc2, { 2, 1, 0 }
  uselistorder i32 %v1_f49c, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_f574, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_f514, { 1, 0 }
  uselistorder label %dec_label_pc_f4a4, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f5b0

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f59c
  %v3_f59c = zext i8 %v2_f59c to i32
  %v1_f5a4 = add i32 %v0_f5a4, 1
  %v1_f58c = load i32, i32* %r0.global-to-local, align 4
  %v9_f58c = icmp eq i32 %v3_f59c, %v1_f58c
  br i1 %v9_f58c, label %dec_label_pc_f594, label %dec_label_pc_f59c

dec_label_pc_f594:                                ; preds = %dec_label_pc_f58c
  %v0_f594 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f594, i32* %r0.global-to-local, align 4
  ret i32 %v0_f594

dec_label_pc_f59c:                                ; preds = %dec_label_pc_f58c, %dec_label_pc_f5b0
  %v0_f5a4 = phi i32 [ %v1_f5a4, %dec_label_pc_f58c ], [ %arg2, %dec_label_pc_f5b0 ]
  %v1_f59c = inttoptr i32 %v0_f5a4 to i8*
  %v2_f59c = load i8, i8* %v1_f59c, align 1
  %v2_f5a0 = icmp eq i8 %v2_f59c, 0
  br i1 %v2_f5a0, label %dec_label_pc_f5ac, label %dec_label_pc_f58c

dec_label_pc_f5ac:                                ; preds = %dec_label_pc_f59c
  %v0_f5ac = load i32, i32* %r2.global-to-local, align 4
  %v1_f5ac = add i32 %v0_f5ac, 1
  br label %dec_label_pc_f5b0

dec_label_pc_f5b0:                                ; preds = %entry, %dec_label_pc_f5ac
  %storemerge = phi i32 [ %tmp, %entry ], [ %v1_f5ac, %dec_label_pc_f5ac ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_f5b0 = inttoptr i32 %storemerge to i8*
  %v2_f5b0 = load i8, i8* %v1_f5b0, align 1
  %v3_f5b0 = zext i8 %v2_f5b0 to i32
  store i32 %v3_f5b0, i32* %r0.global-to-local, align 4
  %v2_f5b4 = icmp eq i8 %v2_f5b0, 0
  %v0_f5b8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f5b4, i32 %v0_f5b8)
  br label %dec_label_pc_f59c

; uselistorder directives
  uselistorder i32 %v0_f5a4, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_f5b0, { 1, 0 }
  uselistorder label %dec_label_pc_f59c, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_f5cc = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_f5cc, i32* @r1, align 4
  %v0_f5d0 = call i32 @__GI_tcgetattr()
  %v1_f5d4 = sub i32 1, %v0_f5d0
  %v2_f5d4 = icmp ult i32 %v0_f5d0, 2
  br i1 %v2_f5d4, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_f5e4 = phi i32 [ %v1_f5d4, %entry ], [ 0, %bb ]
  ret i32 %v1_f5e4

; uselistorder directives
  uselistorder i32 %v0_f5d0, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_2()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_f5e8 = load i32, i32* @r4, align 4
  %v6_f5e8 = load i32, i32* @r5, align 4
  %v0_f5f4 = load i32, i32* @r1, align 4
  store i32 %v0_f5f4, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_f600 = call i32 @ioctl()
  store i32 %v0_f600, i32* %r0.global-to-local, align 4
  store i32 %v0_f600, i32* @r5, align 4
  %v2_f604 = icmp eq i32 %v0_f600, 0
  br i1 %v2_f604, label %dec_label_pc_f60c, label %dec_label_pc_f650

dec_label_pc_f60c:                                ; preds = %entry
  %v4_f618 = zext i8 %tmp to i32
  store i32 %v4_f618, i32* @ip, align 4
  %v3_f61c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f61c, i32* @r3, align 4
  %v1_f620 = load i32, i32* @r4, align 4
  %v2_f620 = add i32 %v1_f620, 4
  %v3_f620 = inttoptr i32 %v2_f620 to i32*
  %v0_f624 = load i32, i32* %r1.global-to-local, align 4
  %v1_f624 = load i32, i32* @r4, align 4
  %v2_f624 = add i32 %v1_f624, 8
  %v3_f624 = inttoptr i32 %v2_f624 to i32*
  store i32 %v0_f624, i32* %v3_f624, align 4
  %v0_f628 = load i32, i32* %r0.global-to-local, align 4
  %v1_f628 = load i32, i32* @r4, align 4
  %v2_f628 = add i32 %v1_f628, 12
  %v3_f628 = inttoptr i32 %v2_f628 to i32*
  store i32 %v0_f628, i32* %v3_f628, align 4
  %v2_f62c = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_f62c, i32* @r1, align 4
  %v1_f634 = load i32, i32* @r4, align 4
  %v2_f634 = inttoptr i32 %v1_f634 to i32*
  store i32 %v3_f61c, i32* %v2_f634, align 4
  %v0_f638 = load i32, i32* @ip, align 4
  %v1_f638 = trunc i32 %v0_f638 to i8
  %v2_f638 = load i32, i32* @r4, align 4
  %v3_f638 = add i32 %v2_f638, 16
  %v4_f638 = inttoptr i32 %v3_f638 to i8*
  store i8 %v1_f638, i8* %v4_f638, align 1
  %v0_f63c = load i32, i32* @r4, align 4
  %v1_f63c = add i32 %v0_f63c, 17
  store i32 %v1_f63c, i32* %r0.global-to-local, align 4
  %v4_f640 = call i32 @__GI_mempcpy(i32 %v1_f63c, i32 %v2_f62c, i32 19, i32 %v3_f61c)
  store i32 %v4_f640, i32* %r0.global-to-local, align 4
  %v0_f644 = load i32, i32* @r5, align 4
  store i32 %v0_f644, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_f64c = inttoptr i32 %v4_f640 to i8*
  %v3_f64c = call i32 @__GI_memset(i8* %v2_f64c, i32 %v0_f644)
  store i32 %v3_f64c, i32* %r0.global-to-local, align 4
  %v0_f650.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f650

dec_label_pc_f650:                                ; preds = %entry, %dec_label_pc_f60c
  %v0_f650 = phi i32 [ %v0_f600, %entry ], [ %v0_f650.pre, %dec_label_pc_f60c ]
  store i32 %v0_f650, i32* %r0.global-to-local, align 4
  store i32 %v3_f5e8, i32* @r4, align 4
  store i32 %v6_f5e8, i32* @r5, align 4
  ret i32 %v0_f650

; uselistorder directives
  uselistorder i32 %v0_f650, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder label %dec_label_pc_f650, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_f664 = load i32, i32* @r4, align 4
  store i32 %v3_f664, i32* %stack_var_-28, align 4
  %v0_f66c = load i32, i32* %r0.global-to-local, align 4
  %v2_f66c = icmp eq i32 %v0_f66c, 0
  br i1 %v2_f66c, label %dec_label_pc_f748, label %dec_label_pc_f67c

dec_label_pc_f67c:                                ; preds = %entry
  br label %dec_label_pc_f694

dec_label_pc_f694:                                ; preds = %dec_label_pc_f67c, %dec_label_pc_f70c
  %v1_f70c = phi i32 [ 0, %dec_label_pc_f67c ], [ %v5_f70c, %dec_label_pc_f70c ]
  %v0_f710 = phi i32 [ 1, %dec_label_pc_f67c ], [ %v1_f710, %dec_label_pc_f70c ]
  %v0_f694 = phi i32 [ %v0_f66c, %dec_label_pc_f67c ], [ %v0_f69412, %dec_label_pc_f70c ]
  %v1_f694 = inttoptr i32 %v0_f694 to i8*
  %v2_f694 = load i8, i8* %v1_f694, align 1
  %v3_f694 = zext i8 %v2_f694 to i32
  %v4_f698 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 140) to i32*), align 4
  %v2_f69c = mul nuw nsw i32 %v3_f694, 2
  %v2_f6a0 = add i32 %v2_f69c, %v4_f698
  %v3_f6a0 = inttoptr i32 %v2_f6a0 to i16*
  %v4_f6a0 = load i16, i16* %v3_f6a0, align 2
  %v1_f6a4 = and i16 %v4_f6a0, 8
  %v2_f6a4 = icmp eq i16 %v1_f6a4, 0
  br i1 %v2_f6a4, label %dec_label_pc_f748, label %dec_label_pc_f6ac

dec_label_pc_f6ac:                                ; preds = %dec_label_pc_f694
  br label %dec_label_pc_f6cc

dec_label_pc_f6b4:                                ; preds = %dec_label_pc_f6cc
  %v2_f6b4 = mul i32 %v0_f70c, 10
  %v1_f6b8 = add i32 %v2_f6b4, -48
  %v2_f6bc = add i32 %v3_f6cc, %v1_f6b8
  %v8_f6c4 = icmp sgt i32 %v2_f6bc, 255
  br i1 %v8_f6c4, label %dec_label_pc_f748, label %dec_label_pc_f6c8

dec_label_pc_f6c8:                                ; preds = %dec_label_pc_f6b4
  %v1_f6c8 = add i32 %v0_f6fc, 1
  store i32 %v1_f6c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6cc

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f6ac, %dec_label_pc_f6c8
  %v0_f70c = phi i32 [ 0, %dec_label_pc_f6ac ], [ %v2_f6bc, %dec_label_pc_f6c8 ]
  %v0_f6fc = phi i32 [ %v0_f694, %dec_label_pc_f6ac ], [ %v1_f6c8, %dec_label_pc_f6c8 ]
  %v1_f6cc = inttoptr i32 %v0_f6fc to i8*
  %v2_f6cc = load i8, i8* %v1_f6cc, align 1
  %v3_f6cc = zext i8 %v2_f6cc to i32
  %v2_f6d0 = mul nuw nsw i32 %v3_f6cc, 2
  %v2_f6d4 = add i32 %v2_f6d0, %v4_f698
  %v3_f6d4 = inttoptr i32 %v2_f6d4 to i16*
  %v4_f6d4 = load i16, i16* %v3_f6d4, align 2
  %v6_f6d4 = zext i16 %v4_f6d4 to i32
  %v1_f6d8 = and i32 %v6_f6d4, 8
  %v2_f6d8 = icmp eq i32 %v1_f6d8, 0
  br i1 %v2_f6d8, label %dec_label_pc_f6e0, label %dec_label_pc_f6b4

dec_label_pc_f6e0:                                ; preds = %dec_label_pc_f6cc
  %v7_f6e0 = icmp eq i32 %v0_f710, 4
  br i1 %v7_f6e0, label %dec_label_pc_f6f8, label %dec_label_pc_f6e8

dec_label_pc_f6e8:                                ; preds = %dec_label_pc_f6e0
  %v7_f6e8 = icmp eq i8 %v2_f6cc, 46
  br i1 %v7_f6e8, label %dec_label_pc_f6f0, label %dec_label_pc_f748

dec_label_pc_f6f0:                                ; preds = %dec_label_pc_f6e8
  %v1_f6f0 = add i32 %v0_f6fc, 1
  store i32 %v1_f6f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f70c

dec_label_pc_f6f8:                                ; preds = %dec_label_pc_f6e0
  %v2_f6f8 = icmp eq i8 %v2_f6cc, 0
  %v1_f6fc = add i32 %v0_f6fc, 1
  store i32 %v1_f6fc, i32* %r0.global-to-local, align 4
  br i1 %v2_f6f8, label %dec_label_pc_f70c, label %dec_label_pc_f704

dec_label_pc_f704:                                ; preds = %dec_label_pc_f6f8
  %v1_f704 = and i32 %v6_f6d4, 32
  %v2_f704 = icmp eq i32 %v1_f704, 0
  br i1 %v2_f704, label %dec_label_pc_f748, label %dec_label_pc_f70c

dec_label_pc_f70c:                                ; preds = %dec_label_pc_f704, %dec_label_pc_f6f8, %dec_label_pc_f6f0
  %v0_f69412 = phi i32 [ %v1_f6fc, %dec_label_pc_f704 ], [ %v1_f6fc, %dec_label_pc_f6f8 ], [ %v1_f6f0, %dec_label_pc_f6f0 ]
  %v4_f70c = mul i32 %v1_f70c, 256
  %v5_f70c = or i32 %v0_f70c, %v4_f70c
  %v1_f710 = add nuw nsw i32 %v0_f710, 1
  %v7_f718 = icmp slt i32 %v1_f710, 5
  br i1 %v7_f718, label %dec_label_pc_f694, label %dec_label_pc_f71c

dec_label_pc_f71c:                                ; preds = %dec_label_pc_f70c
  %v2_f71c = icmp eq i32 %arg2, 0
  br i1 %v2_f71c, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_f71c
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f74c

bb:                                               ; preds = %dec_label_pc_f71c
  %v4_f720 = udiv i32 %v5_f70c, 16777216
  %v2_f724 = udiv i32 %v5_f70c, 256
  %v5_f728 = and i32 %v2_f724, 65280
  %v2_f72c = and i32 %v5_f70c, 65280
  %v5_f730 = mul nuw nsw i32 %v2_f72c, 256
  %v5_f734 = mul i32 %v0_f70c, 16777216
  %v6_f728 = or i32 %v4_f720, %v5_f734
  %v6_f730 = or i32 %v6_f728, %v5_f728
  %v6_f734 = or i32 %v6_f730, %v5_f730
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_f740 = inttoptr i32 %arg2 to i32*
  store i32 %v6_f734, i32* %v3_f740, align 4
  %v2_f74c.pre = load i32, i32* %stack_var_-28, align 4
  %v1_f750.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f74c

dec_label_pc_f748:                                ; preds = %dec_label_pc_f6e8, %dec_label_pc_f704, %dec_label_pc_f694, %dec_label_pc_f6b4, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f74c

dec_label_pc_f74c:                                ; preds = %.thread7.thread, %bb, %dec_label_pc_f748
  %v1_f750 = phi i32 [ %v1_f750.pre, %bb ], [ 0, %dec_label_pc_f748 ], [ 1, %.thread7.thread ]
  %v2_f74c = phi i32 [ %v2_f74c.pre, %bb ], [ %v3_f664, %dec_label_pc_f748 ], [ %v3_f664, %.thread7.thread ]
  store i32 %v2_f74c, i32* @r4, align 4
  ret i32 %v1_f750

; uselistorder directives
  uselistorder i32 %v1_f710, { 1, 0 }
  uselistorder i32 %v5_f70c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_f6fc, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 6, 7, 8, 0, 1 }
  uselistorder i32 65280, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_f74c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f748, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_f6cc, { 1, 0 }
  uselistorder label %dec_label_pc_f694, { 1, 0 }
}

define i32 @gethostbyname2_r(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %v9_f75c = load i32, i32* @r6, align 4
  %v12_f75c = load i32, i32* @r7, align 4
  %v24_f75c = load i32, i32* @fp, align 4
  %v7_f760 = icmp eq i32 %arg2, 2
  store i32 %arg2, i32* @r4, align 4
  store i32 %tmp, i32* @r6, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg1, i32* @sb, align 4
  store i32 %arg5, i32* @sl, align 4
  store i32 %arg7, i32* @fp, align 4
  br i1 %v7_f760, label %dec_label_pc_f784, label %dec_label_pc_f7a4

dec_label_pc_f784:                                ; preds = %entry
  store i32 %arg6, i32* @ip, align 4
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg4, i32* @r2, align 4
  store i32 %arg5, i32* @r3, align 4
  %v0_f79c = call i32 @gethostbyname_r()
  store i32 %v0_f79c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f7a4:                                ; preds = %entry
  store i32 %arg6, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v7_f7ac = icmp eq i32 %arg2, 10
  %v2_f7b0 = inttoptr i32 %arg6 to i32*
  store i32 0, i32* %v2_f7b0, align 4
  br i1 %v7_f7ac, label %dec_label_pc_f7b8, label %dec_label_pc_f9ec

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f7a4
  %v1_f7b8 = load i32, i32* @r7, align 4
  %v9_f7b8 = icmp eq i32 %v1_f7b8, %arg1
  br i1 %v9_f7b8, label %dec_label_pc_f9ec, label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %dec_label_pc_f7b8
  %v0_f7c0 = call i32 @__GI___errno_location()
  store i32 %v0_f7c0, i32* %r0.global-to-local, align 4
  store i32 %arg6, i32* %ip.global-to-local, align 4
  store i32 %v0_f7c0, i32* @r5, align 4
  %v0_f7cc = load i32, i32* @r4, align 4
  %v0_f7d0 = load i32, i32* @r6, align 4
  store i32 %v0_f7d0, i32* %r2.global-to-local, align 4
  %v1_f7d4 = inttoptr i32 %v0_f7c0 to i32*
  %v2_f7d4 = load i32, i32* %v1_f7d4, align 4
  store i32 %v2_f7d4, i32* @r4, align 4
  %v0_f7d8 = load i32, i32* @r8, align 4
  store i32 %v0_f7d8, i32* %r3.global-to-local, align 4
  %v0_f7dc = load i32, i32* @r7, align 4
  store i32 %v0_f7dc, i32* %v1_f7d4, align 4
  %v0_f7e0 = load i32, i32* @sb, align 4
  store i32 %v0_f7e0, i32* %r0.global-to-local, align 4
  %v2_f7e4 = load i32, i32* @sl, align 4
  %v5_f7e4 = load i32, i32* %ip.global-to-local, align 4
  %v0_f7e8 = load i32, i32* @fp, align 4
  %v7_f7ec = call i32 @__get_hosts_byname_r(i32 %v0_f7e0, i32 %v0_f7cc, i32 %v0_f7d0, i32 %v0_f7d8, i32 %v2_f7e4, i32 %v5_f7e4, i32 %v0_f7e8)
  store i32 %v7_f7ec, i32* %r0.global-to-local, align 4
  %v2_f7f0 = icmp eq i32 %v7_f7ec, 0
  br i1 %v2_f7f0, label %bb, label %dec_label_pc_f7fc

bb:                                               ; preds = %dec_label_pc_f7c0
  %v1_f7f4 = load i32, i32* @r4, align 4
  %v2_f7f4 = load i32, i32* @r5, align 4
  %v3_f7f4 = inttoptr i32 %v2_f7f4 to i32*
  store i32 %v1_f7f4, i32* %v3_f7f4, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f7fc:                                ; preds = %dec_label_pc_f7c0
  %v0_f7fc = load i32, i32* @fp, align 4
  %v1_f7fc = inttoptr i32 %v0_f7fc to i32*
  %v2_f7fc = load i32, i32* %v1_f7fc, align 4
  store i32 %v2_f7fc, i32* %r3.global-to-local, align 4
  %v7_f800 = icmp eq i32 %v2_f7fc, 1
  br i1 %v7_f800, label %dec_label_pc_f81c, label %dec_label_pc_f808

dec_label_pc_f808:                                ; preds = %dec_label_pc_f7fc
  %v7_f808 = icmp eq i32 %v2_f7fc, 4
  br i1 %v7_f808, label %dec_label_pc_f838, label %dec_label_pc_f810

dec_label_pc_f810:                                ; preds = %dec_label_pc_f808
  %v3_f810 = icmp eq i32 %v2_f7fc, -1
  br i1 %v3_f810, label %dec_label_pc_f82c, label %dec_label_pc_f9f0

dec_label_pc_f81c:                                ; preds = %dec_label_pc_f7fc
  %v7_f81c = icmp eq i32 %v7_f7ec, 2
  br i1 %v7_f81c, label %.thread1, label %bb29

bb29:                                             ; preds = %dec_label_pc_f81c
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_f83c

.thread1:                                         ; preds = %dec_label_pc_f81c
  store i32 1, i32* @r7, align 4
  br label %dec_label_pc_f83c

dec_label_pc_f82c:                                ; preds = %dec_label_pc_f810
  %v0_f82c = load i32, i32* @r5, align 4
  %v1_f82c = inttoptr i32 %v0_f82c to i32*
  %v2_f82c = load i32, i32* %v1_f82c, align 4
  store i32 %v2_f82c, i32* %r3.global-to-local, align 4
  %v7_f830 = icmp eq i32 %v2_f82c, 2
  br i1 %v7_f830, label %dec_label_pc_f838, label %dec_label_pc_f9f0

dec_label_pc_f838:                                ; preds = %dec_label_pc_f82c, %dec_label_pc_f808
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_f83c

dec_label_pc_f83c:                                ; preds = %bb29, %.thread1, %dec_label_pc_f838
  %v0_f83c = load i32, i32* @r8, align 4
  %v1_f83c = sub i32 0, %v0_f83c
  %v1_f840 = urem i32 %v1_f83c, 4
  store i32 %v1_f840, i32* %r0.global-to-local, align 4
  %v1_f844 = load i32, i32* @sl, align 4
  %v2_f844 = sub i32 %v1_f844, %v1_f840
  %v1_f848 = add i32 %v2_f844, -24
  store i32 %v1_f848, i32* @sl, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f854 = load i32, i32* @r4, align 4
  %v1_f854 = load i32, i32* @r5, align 4
  %v2_f854 = inttoptr i32 %v1_f854 to i32*
  store i32 %v0_f854, i32* %v2_f854, align 4
  %v7_f858 = icmp sgt i32 %v1_f848, 255
  br i1 %v7_f858, label %dec_label_pc_f864, label %bb30

bb30:                                             ; preds = %dec_label_pc_f83c
  store i32 34, i32* %r0.global-to-local, align 4
  %v0_f85c = load i32, i32* %r3.global-to-local, align 4
  %v1_f85c = load i32, i32* @fp, align 4
  %v2_f85c = inttoptr i32 %v1_f85c to i32*
  store i32 %v0_f85c, i32* %v2_f85c, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f864:                                ; preds = %dec_label_pc_f83c
  %v0_f85c3 = load i32, i32* %r3.global-to-local, align 4
  %v1_f85c4 = load i32, i32* @fp, align 4
  %v2_f85c5 = inttoptr i32 %v1_f85c4 to i32*
  store i32 %v0_f85c3, i32* %v2_f85c5, align 4
  %v0_f864 = load i32, i32* @r8, align 4
  %v1_f864 = load i32, i32* %r0.global-to-local, align 4
  %v2_f864 = add i32 %v1_f864, %v0_f864
  store i32 %v2_f864, i32* @r8, align 4
  store i32 0, i32* @r4, align 4
  %v1_f86c = add i32 %v2_f864, 16
  store i32 %v1_f86c, i32* %r2.global-to-local, align 4
  %v1_f870 = add i32 %v2_f864, 24
  store i32 %v1_f870, i32* @r5, align 4
  %v3_f878 = inttoptr i32 %v1_f86c to i32*
  store i32 %v2_f864, i32* %v3_f878, align 4
  %v0_f87c = load i32, i32* @sb, align 4
  store i32 %v0_f87c, i32* @r1, align 4
  %v0_f880 = load i32, i32* @r4, align 4
  %v1_f880 = load i32, i32* %r2.global-to-local, align 4
  %v2_f880 = add i32 %v1_f880, 4
  %v3_f880 = inttoptr i32 %v2_f880 to i32*
  store i32 %v0_f880, i32* %v3_f880, align 4
  %v0_f884 = load i32, i32* @r5, align 4
  store i32 %v0_f884, i32* %r0.global-to-local, align 4
  %v0_f888 = load i32, i32* @sl, align 4
  store i32 %v0_f888, i32* %r2.global-to-local, align 4
  %v3_f88c = call i32 @strncpy(i32 %v0_f884, i32 %v0_f87c, i32 %v0_f888)
  %v0_f890 = load i32, i32* @r4, align 4
  %v1_f890 = trunc i32 %v0_f890 to i8
  %v2_f890 = load i32, i32* @r5, align 4
  %v3_f890 = load i32, i32* @sl, align 4
  %v4_f890 = add i32 %v3_f890, %v2_f890
  %v5_f890 = inttoptr i32 %v4_f890 to i8*
  store i8 %v1_f890, i8* %v5_f890, align 1
  %v0_f894 = load i32, i32* @sb, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v0_f89c = load i32, i32* @r8, align 4
  store i32 %v0_f89c, i32* %r2.global-to-local, align 4
  %v3_f8a0 = inttoptr i32 %v0_f894 to i8*
  %v4_f8a0 = call i32 @inet_pton(i32 10, i8* %v3_f8a0, i32 %v0_f89c)
  store i32 %v4_f8a0, i32* %r0.global-to-local, align 4
  %v1_f8a4 = load i32, i32* @r4, align 4
  %v9_f8a4 = icmp eq i32 %v4_f8a0, %v1_f8a4
  br i1 %v9_f8a4, label %dec_label_pc_f8dc, label %dec_label_pc_f8ac

dec_label_pc_f8ac:                                ; preds = %dec_label_pc_f864
  store i32 %v1_f86c, i32* @ip, align 4
  %v0_f8b4 = load i32, i32* @r6, align 4
  store i32 %v0_f8b4, i32* %v2_f7b0, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_f8bc = load i32, i32* @r6, align 4
  %v2_f8bc = add i32 %v1_f8bc, 8
  %v3_f8bc = inttoptr i32 %v2_f8bc to i32*
  store i32 10, i32* %v3_f8bc, align 4
  %v0_f8c0 = load i32, i32* @r4, align 4
  store i32 %v0_f8c0, i32* %r0.global-to-local, align 4
  %v0_f8c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8c4 = add i32 %v0_f8c4, 6
  store i32 %v1_f8c4, i32* %r3.global-to-local, align 4
  %v1_f8c8 = load i32, i32* @r6, align 4
  %v2_f8c8 = add i32 %v1_f8c8, 12
  %v3_f8c8 = inttoptr i32 %v2_f8c8 to i32*
  store i32 %v1_f8c4, i32* %v3_f8c8, align 4
  %v0_f8cc = load i32, i32* @r5, align 4
  %v1_f8cc = load i32, i32* @r6, align 4
  %v2_f8cc = inttoptr i32 %v1_f8cc to i32*
  store i32 %v0_f8cc, i32* %v2_f8cc, align 4
  %v0_f8d0 = load i32, i32* @ip, align 4
  %v1_f8d0 = load i32, i32* @r6, align 4
  %v2_f8d0 = add i32 %v1_f8d0, 16
  %v3_f8d0 = inttoptr i32 %v2_f8d0 to i32*
  store i32 %v0_f8d0, i32* %v3_f8d0, align 4
  %v0_f8d4 = load i32, i32* @r4, align 4
  %v1_f8d4 = load i32, i32* @fp, align 4
  %v2_f8d4 = inttoptr i32 %v1_f8d4 to i32*
  store i32 %v0_f8d4, i32* %v2_f8d4, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f864
  %v0_f8dc = load i32, i32* @r7, align 4
  %v2_f8dc = icmp eq i32 %v0_f8dc, 0
  br i1 %v2_f8dc, label %dec_label_pc_f8e4, label %dec_label_pc_f9dc

dec_label_pc_f8e4:                                ; preds = %dec_label_pc_f8dc
  %v2_f8e4 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_f8e4, i32* @r4, align 4
  store i32 %v2_f8e4, i32* %r0.global-to-local, align 4
  store i32 40, i32* @r2, align 4
  %v2_f8f4 = bitcast i32* %stack_var_-84 to i8*
  %v3_f8f4 = call i32 @__GI_memset(i8* %v2_f8f4, i32 0)
  store i32 %v3_f8f4, i32* %r0.global-to-local, align 4
  %v2_f8fc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_f8fc, i32* @sb, align 4
  %v7_f93c = icmp eq i32 %tmp9, 5
  br label %dec_label_pc_f900

dec_label_pc_f900:                                ; preds = %dec_label_pc_f954, %dec_label_pc_f8e4
  store i32 %v2_f8fc, i32* %r2.global-to-local, align 4
  store i32 %v2_f8e4, i32* %r3.global-to-local, align 4
  %v0_f90c = load i32, i32* @r5, align 4
  store i32 %v0_f90c, i32* %r0.global-to-local, align 4
  %v4_f910 = inttoptr i32 %v0_f90c to i8*
  %v5_f910 = call i32 @__dns_lookup(i8* %v4_f910, i32 28, i32 %v2_f8fc, i32 %v2_f8e4)
  store i32 %v5_f910, i32* @r4, align 4
  %v1_f914 = icmp slt i32 %v5_f910, 0
  %v0_f918 = load i32, i32* @sl, align 4
  store i32 %v0_f918, i32* %r2.global-to-local, align 4
  %v0_f91c = load i32, i32* @r7, align 4
  %v1_f91c = add i32 %v0_f91c, 1
  store i32 %v1_f91c, i32* @r7, align 4
  %v0_f920 = load i32, i32* @r5, align 4
  store i32 %v0_f920, i32* %r0.global-to-local, align 4
  br i1 %v1_f914, label %dec_label_pc_f9dc, label %dec_label_pc_f928

dec_label_pc_f928:                                ; preds = %dec_label_pc_f900
  %v3_f928 = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_f928, i32* @r1, align 4
  %v3_f92c = call i32 @strncpy(i32 %v0_f920, i32 %v3_f928, i32 %v0_f918)
  %v3_f930 = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_f930, i32* @r0, align 4
  %v0_f934 = call i32 @free()
  store i32 %v0_f934, i32* %r0.global-to-local, align 4
  %v0_f940 = load i32, i32* @r4, align 4
  store i32 %v0_f940, i32* %r2.global-to-local, align 4
  %v0_f944 = load i32, i32* @r5, align 4
  store i32 %v0_f944, i32* @r3, align 4
  br i1 %v7_f93c, label %dec_label_pc_f94c, label %dec_label_pc_f984

dec_label_pc_f94c:                                ; preds = %dec_label_pc_f928
  %v0_f94c = load i32, i32* @r7, align 4
  %v8_f950 = icmp sgt i32 %v0_f94c, 5
  br i1 %v8_f950, label %dec_label_pc_f978, label %dec_label_pc_f954

dec_label_pc_f954:                                ; preds = %dec_label_pc_f94c
  store i32 %tmp8, i32* @r1, align 4
  %v3_f958 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f958, i32* %r0.global-to-local, align 4
  %v0_f95c = load i32, i32* @sl, align 4
  %v5_f960 = call i32 @__decode_dotted(i32 %v3_f958, i32 %tmp8, i32 %v0_f940, i32 %v0_f944, i32 %v0_f95c)
  store i32 %v5_f960, i32* @r4, align 4
  %v3_f968 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f968, i32* @r0, align 4
  %v0_f96c = call i32 @free()
  store i32 %v0_f96c, i32* %r0.global-to-local, align 4
  %v0_f970 = load i32, i32* @r4, align 4
  %v1_f970 = icmp slt i32 %v0_f970, 0
  br i1 %v1_f970, label %dec_label_pc_f978, label %dec_label_pc_f900

dec_label_pc_f978:                                ; preds = %dec_label_pc_f954, %dec_label_pc_f94c
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9e4

dec_label_pc_f984:                                ; preds = %dec_label_pc_f928
  %v7_f984 = icmp eq i32 %tmp9, 28
  br i1 %v7_f984, label %dec_label_pc_f98c, label %dec_label_pc_f9d4

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f984
  store i32 16, i32* @r2, align 4
  %v0_f994 = load i32, i32* @r8, align 4
  store i32 %v0_f994, i32* @r0, align 4
  %v0_f998 = call i32 @memcpy()
  store i32 10, i32* %r3.global-to-local, align 4
  store i32 %v1_f86c, i32* %r2.global-to-local, align 4
  %v1_f9a4 = load i32, i32* @r6, align 4
  %v2_f9a4 = add i32 %v1_f9a4, 8
  %v3_f9a4 = inttoptr i32 %v2_f9a4 to i32*
  store i32 10, i32* %v3_f9a4, align 4
  %v0_f9a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f9a8 = add i32 %v0_f9a8, 6
  store i32 %v1_f9a8, i32* %r3.global-to-local, align 4
  %v1_f9ac = load i32, i32* @r6, align 4
  %v2_f9ac = add i32 %v1_f9ac, 12
  %v3_f9ac = inttoptr i32 %v2_f9ac to i32*
  store i32 %v1_f9a8, i32* %v3_f9ac, align 4
  %v3_f9b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f9b0, i32* @r0, align 4
  %v0_f9b4 = load i32, i32* @r5, align 4
  %v1_f9b4 = load i32, i32* @r6, align 4
  %v2_f9b4 = inttoptr i32 %v1_f9b4 to i32*
  store i32 %v0_f9b4, i32* %v2_f9b4, align 4
  %v0_f9b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f9b8 = load i32, i32* @r6, align 4
  %v2_f9b8 = add i32 %v1_f9b8, 16
  %v3_f9b8 = inttoptr i32 %v2_f9b8 to i32*
  store i32 %v0_f9b8, i32* %v3_f9b8, align 4
  %v0_f9bc = call i32 @free()
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @ip, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_f9cc = load i32, i32* @r6, align 4
  store i32 %v0_f9cc, i32* %v2_f7b0, align 4
  %v0_f9e4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9e4

dec_label_pc_f9d4:                                ; preds = %dec_label_pc_f984
  %v3_f9d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f9d4, i32* @r0, align 4
  %v0_f9d8 = call i32 @free()
  store i32 %v0_f9d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f900, %dec_label_pc_f8dc, %dec_label_pc_f9d4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9e4

dec_label_pc_f9e4:                                ; preds = %dec_label_pc_f98c, %dec_label_pc_f978, %dec_label_pc_f9dc
  %v0_f9e4 = phi i32 [ %v0_f9e4.pre, %dec_label_pc_f98c ], [ 3, %dec_label_pc_f978 ], [ 1, %dec_label_pc_f9dc ]
  %v1_f9e4 = load i32, i32* @fp, align 4
  %v2_f9e4 = inttoptr i32 %v1_f9e4 to i32*
  store i32 %v0_f9e4, i32* %v2_f9e4, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f9ec:                                ; preds = %dec_label_pc_f7a4, %dec_label_pc_f7b8
  store i32 22, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %bb, %bb30, %dec_label_pc_f82c, %dec_label_pc_f810, %dec_label_pc_f9e4, %dec_label_pc_f8ac, %dec_label_pc_f784, %dec_label_pc_f9ec
  store i32 %v9_f75c, i32* @r6, align 4
  store i32 %v12_f75c, i32* @r7, align 4
  store i32 %v24_f75c, i32* @fp, align 4
  %v1_f9f8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_f9f8

; uselistorder directives
  uselistorder i32 %v2_f8e4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f86c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_f840, { 1, 0 }
  uselistorder i32* %stack_var_-84, { 1, 2, 0, 3 }
  uselistorder i32 %tmp8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 22, 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 12, 10, 11, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23 }
  uselistorder i32 (i32, i32, i32)* @strncpy, { 1, 0 }
  uselistorder i32 -24, { 1, 0 }
  uselistorder i32 %arg6, { 4, 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f9f0, { 7, 4, 5, 1, 2, 3, 0, 6 }
  uselistorder label %dec_label_pc_f9ec, { 1, 0 }
  uselistorder label %dec_label_pc_f9e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f9dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f83c, { 2, 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_f9fc = load i32, i32* @r4, align 4
  %v6_f9fc = load i32, i32* @r5, align 4
  %v9_f9fc = load i32, i32* @r6, align 4
  %v12_f9fc = load i32, i32* @lr, align 4
  %v2_fa04 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_fa14 = mul i32 %arg2, %arg1
  store i32 %v2_fa14, i32* @r6, align 4
  br i1 %v2_fa04, label %dec_label_pc_fa44, label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %entry
  %v2_fa24 = udiv i32 %v2_fa14, %arg1
  %v9_fa28 = icmp eq i32 %v2_fa24, %arg2
  br i1 %v9_fa28, label %dec_label_pc_fa44, label %dec_label_pc_fa30

dec_label_pc_fa30:                                ; preds = %dec_label_pc_fa1c
  %v0_fa30 = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_fa3c = inttoptr i32 %v0_fa30 to i32*
  store i32 12, i32* %v2_fa3c, align 4
  br label %dec_label_pc_fb08

dec_label_pc_fa44:                                ; preds = %dec_label_pc_fa1c, %entry
  %v4_fa48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 72) to i32*), align 4
  store i32 %v4_fa48, i32* @r4, align 4
  %v4_fa60 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  store i32 %v4_fa60, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_fa60)
  %v0_fa74 = load i32, i32* @r5, align 4
  %v2_fa74 = add i32 %v0_fa74, 16
  %v3_fa74 = inttoptr i32 %v2_fa74 to i32*
  %v4_fa74 = load i32, i32* %v3_fa74, align 4
  store i32 %v4_fa74, i32* %ip.global-to-local, align 4
  store i32 64128, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_fa74)
  %v0_fa80 = load i32, i32* @r6, align 4
  %v1_fa84 = call i32 @malloc(i32 %v0_fa80)
  store i32 %v1_fa84, i32* %r4.global-to-local, align 4
  %v2_fa88 = icmp eq i32 %v1_fa84, 0
  br i1 %v2_fa88, label %.thread, label %dec_label_pc_fa90

dec_label_pc_fa90:                                ; preds = %dec_label_pc_fa44
  %v1_fa90 = add i32 %v1_fa84, -4
  %v2_fa90 = inttoptr i32 %v1_fa90 to i32*
  %v3_fa90 = load i32, i32* %v2_fa90, align 4
  %v1_fa94 = and i32 %v3_fa90, 2
  %v2_fa94 = icmp eq i32 %v1_fa94, 0
  br i1 %v2_fa94, label %dec_label_pc_fa9c, label %.thread

dec_label_pc_fa9c:                                ; preds = %dec_label_pc_fa90
  %v1_fa9c6 = add i32 %v3_fa90, -4
  %v1_faa0 = and i32 %v1_fa9c6, -4
  store i32 %v1_faa0, i32* @r2, align 4
  %v3_faa4 = udiv i32 %v1_faa0, 4
  store i32 %v3_faa4, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_faa0, 36
  %v2_faac = icmp ult i32 %v1_faa0, 33
  %v3_faac = or i1 %tmp, %v2_faac
  br i1 %v3_faac, label %dec_label_pc_fab8, label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_fa9c
  %v2_fab0 = inttoptr i32 %v1_fa84 to i8*
  %v3_fab0 = call i32 @__GI_memset(i8* %v2_fab0, i32 0)
  br label %.thread

dec_label_pc_fab8:                                ; preds = %dec_label_pc_fa9c
  %tmp7 = icmp eq i32 %v1_faa0, 16
  %v2_fabc = inttoptr i32 %v1_fa84 to i32*
  store i32 0, i32* %v2_fabc, align 4
  %v1_fac0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fac0 = add i32 %v1_fac0, 4
  %v3_fac0 = inttoptr i32 %v2_fac0 to i32*
  store i32 0, i32* %v3_fac0, align 4
  %v1_fac4 = load i32, i32* %r4.global-to-local, align 4
  %v2_fac4 = add i32 %v1_fac4, 8
  %v3_fac4 = inttoptr i32 %v2_fac4 to i32*
  store i32 0, i32* %v3_fac4, align 4
  %v2_fac8 = icmp ult i32 %v1_faa0, 13
  %v3_fac8 = or i1 %tmp7, %v2_fac8
  br i1 %v3_fac8, label %.thread, label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_fab8
  %v0_facc = load i32, i32* %ip.global-to-local, align 4
  %v1_fad0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fad0 = add i32 %v1_fad0, 12
  %v3_fad0 = inttoptr i32 %v2_fad0 to i32*
  store i32 0, i32* %v3_fad0, align 4
  %v1_fad4 = load i32, i32* %r4.global-to-local, align 4
  %v2_fad4 = add i32 %v1_fad4, 16
  %v3_fad4 = inttoptr i32 %v2_fad4 to i32*
  store i32 0, i32* %v3_fad4, align 4
  %tmp8 = icmp ult i32 %v0_facc, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_fadc

dec_label_pc_fadc:                                ; preds = %dec_label_pc_facc
  %v0_fadc = load i32, i32* %ip.global-to-local, align 4
  %v7_fadc = icmp eq i32 %v0_fadc, 9
  %v1_fae0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fae0 = add i32 %v1_fae0, 20
  %v3_fae0 = inttoptr i32 %v2_fae0 to i32*
  store i32 0, i32* %v3_fae0, align 4
  %v1_fae4 = load i32, i32* %r4.global-to-local, align 4
  %v2_fae4 = add i32 %v1_fae4, 24
  %v3_fae4 = inttoptr i32 %v2_fae4 to i32*
  store i32 0, i32* %v3_fae4, align 4
  br i1 %v7_fadc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_fadc
  %v2_fae8 = load i32, i32* %r4.global-to-local, align 4
  %v3_fae8 = add i32 %v2_fae8, 32
  %v4_fae8 = inttoptr i32 %v3_fae8 to i32*
  store i32 0, i32* %v4_fae8, align 4
  %v2_faec = load i32, i32* %r4.global-to-local, align 4
  %v3_faec = add i32 %v2_faec, 28
  %v4_faec = inttoptr i32 %v3_faec to i32*
  store i32 0, i32* %v4_faec, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_fadc, %dec_label_pc_fa90, %dec_label_pc_facc, %dec_label_pc_fab8, %dec_label_pc_fa44, %dec_label_pc_fab0, %bb
  %v0_fafc = load i32, i32* @r5, align 4
  %v2_fafc = add i32 %v0_fafc, 24
  %v3_fafc = inttoptr i32 %v2_fafc to i32*
  %v4_fafc = load i32, i32* %v3_fafc, align 4
  store i32 %v4_fafc, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_fafc)
  br label %dec_label_pc_fb08

dec_label_pc_fb08:                                ; preds = %dec_label_pc_fa30, %.thread
  %v0_fb08 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_f9fc, i32* @r4, align 4
  store i32 %v6_f9fc, i32* @r5, align 4
  store i32 %v9_f9fc, i32* @r6, align 4
  store i32 %v12_f9fc, i32* @lr, align 4
  ret i32 %v0_fb08

; uselistorder directives
  uselistorder i32 %v1_faa0, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v1_fa84, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 13, { 0, 6, 3, 4, 7, 5, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fb08, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_fb1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb1c:
  %v0_fb1c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fb1c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_fb1c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_fb1c, %bb
  %v10_fb2c = phi i32 [ %arg1, %dec_label_pc_fb1c ], [ 0, %bb ]
  ret i32 %v10_fb2c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_fb30 = load i32, i32* @r4, align 4
  %v6_fb30 = load i32, i32* @r5, align 4
  %v9_fb30 = load i32, i32* @r6, align 4
  %v12_fb30 = load i32, i32* @r7, align 4
  %v15_fb30 = load i32, i32* @r8, align 4
  %v18_fb30 = load i32, i32* @sb, align 4
  %v21_fb30 = load i32, i32* @sl, align 4
  %v24_fb30 = load i32, i32* @fp, align 4
  %v27_fb30 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_fb3c = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_fb3c, label %dec_label_pc_fb50, label %dec_label_pc_fb60

dec_label_pc_fb50:                                ; preds = %entry
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_fb54 = call i32 @malloc(i32 %arg2)
  store i32 %v1_fb54, i32* %r0.global-to-local, align 4
  store i32 %v1_fb54, i32* @r4, align 4
  br label %dec_label_pc_feb8

dec_label_pc_fb60:                                ; preds = %entry
  %v2_fb60 = icmp eq i32 %arg2, 0
  br i1 %v2_fb60, label %dec_label_pc_fb68, label %dec_label_pc_fb74

dec_label_pc_fb68:                                ; preds = %dec_label_pc_fb60
  %v0_fb68 = call i32 @free()
  store i32 %v0_fb68, i32* %r0.global-to-local, align 4
  %v0_fb6c = load i32, i32* @r6, align 4
  store i32 %v0_fb6c, i32* @r4, align 4
  br label %dec_label_pc_feb8

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb60
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_fb7c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 72) to i32*), align 4
  store i32 %v4_fb7c, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_fb7c, i32* %r2.global-to-local, align 4
  %v4_fb88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 36) to i32*), align 4
  store i32 %v4_fb88, i32* %r1.global-to-local, align 4
  %v2_fb8c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_fb8c, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_fb94 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_fb94)
  %v0_fba0 = load i32, i32* @r4, align 4
  store i32 %v0_fba0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  %v4_fbac = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 16) to i32*), align 4
  store i32 %v4_fbac, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_fbb8.326 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_fbac)
  %v0_fbb8 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_fbb8, -32
  br i1 %tmp36, label %dec_label_pc_fbd4, label %dec_label_pc_fbc0

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_fb74
  %v0_fbc0 = call i32 @__GI___errno_location()
  store i32 %v0_fbc0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_fbcc = inttoptr i32 %v0_fbc0 to i32*
  store i32 12, i32* %v2_fbcc, align 4
  br label %dec_label_pc_feb8

dec_label_pc_fbd4:                                ; preds = %dec_label_pc_fb74
  %v1_fbd4 = add i32 %v0_fbb8, 11
  store i32 %v1_fbd4, i32* %r0.global-to-local, align 4
  %v0_fbd8 = load i32, i32* @r5, align 4
  %v1_fbd8 = add i32 %v0_fbd8, -4
  %v2_fbd8 = inttoptr i32 %v1_fbd8 to i32*
  %v3_fbd8 = load i32, i32* %v2_fbd8, align 4
  store i32 %v3_fbd8, i32* %r2.global-to-local, align 4
  %v2_fbdc = icmp ugt i32 %v1_fbd4, 14
  %v7_fbdc = icmp eq i32 %v1_fbd4, 15
  %v2_fbe0 = xor i1 %v2_fbdc, true
  %v3_fbe0 = or i1 %v7_fbdc, %v2_fbe0
  br i1 %v3_fbe0, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_fbd4
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_fbd4, %bb
  %v2_fbe4 = xor i1 %v7_fbdc, true
  %v3_fbe4 = and i1 %v2_fbdc, %v2_fbe4
  br i1 %v3_fbe4, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_fbe4 = and i32 %v1_fbd4, -8
  store i32 %v5_fbe4, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_fbe8 = and i32 %v3_fbd8, 2
  %v2_fbe8 = icmp eq i32 %v1_fbe8, 0
  %v1_fbec = add i32 %v0_fbd8, -8
  store i32 %v1_fbec, i32* @sl, align 4
  %v1_fbf0 = and i32 %v3_fbd8, -4
  store i32 %v1_fbf0, i32* @r6, align 4
  br i1 %v2_fbe8, label %dec_label_pc_fbf8, label %dec_label_pc_fdd0

dec_label_pc_fbf8:                                ; preds = %bb29
  %v1_fbf8 = load i32, i32* @sb, align 4
  %v3_fbf8 = icmp ult i32 %v1_fbf0, %v1_fbf8
  br i1 %v3_fbf8, label %dec_label_pc_fc04, label %bb30

bb30:                                             ; preds = %dec_label_pc_fbf8
  store i32 %v1_fbf0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fd68

dec_label_pc_fc04:                                ; preds = %dec_label_pc_fbf8
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_fc0c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_fc0c, i32* %r0.global-to-local, align 4
  %v1_fc10 = add i32 %v4_fc0c, 44
  %v2_fc10 = inttoptr i32 %v1_fc10 to i32*
  %v3_fc10 = load i32, i32* %v2_fc10, align 4
  store i32 %v3_fc10, i32* %r3.global-to-local, align 4
  %v2_fc14 = add i32 %v1_fbf0, %v1_fbec
  store i32 %v2_fc14, i32* @r4, align 4
  %v9_fc18 = icmp eq i32 %v2_fc14, %v3_fc10
  %v1_fc1c = add i32 %v2_fc14, 4
  %v2_fc1c = inttoptr i32 %v1_fc1c to i32*
  %v3_fc1c = load i32, i32* %v2_fc1c, align 4
  store i32 %v3_fc1c, i32* %r1.global-to-local, align 4
  br i1 %v9_fc18, label %dec_label_pc_fc24, label %dec_label_pc_fc60

dec_label_pc_fc24:                                ; preds = %dec_label_pc_fc04
  %v1_fc24 = and i32 %v3_fc1c, -4
  %v2_fc28 = add i32 %v1_fc24, %v1_fbf0
  store i32 %v2_fc28, i32* %r1.global-to-local, align 4
  %v1_fc2c = add i32 %v1_fbf8, 16
  store i32 %v1_fc2c, i32* %r3.global-to-local, align 4
  %v3_fc30 = icmp ult i32 %v2_fc28, %v1_fc2c
  br i1 %v3_fc30, label %dec_label_pc_fcb4, label %dec_label_pc_fc38

dec_label_pc_fc38:                                ; preds = %dec_label_pc_fc24
  %v2_fc38 = sub i32 %v2_fc28, %v1_fbf8
  %v1_fc3c = urem i32 %v3_fbd8, 2
  %v2_fc40 = add i32 %v1_fbf8, %v1_fbec
  store i32 %v2_fc40, i32* %r1.global-to-local, align 4
  %v2_fc44 = or i32 %v1_fbf8, %v1_fc3c
  store i32 %v2_fc44, i32* %r2.global-to-local, align 4
  %v1_fc48 = or i32 %v2_fc38, 1
  store i32 %v1_fc48, i32* %r3.global-to-local, align 4
  store i32 %v0_fbd8, i32* @r4, align 4
  store i32 %v2_fc44, i32* %v2_fbd8, align 4
  %v0_fc54 = load i32, i32* %r1.global-to-local, align 4
  %v1_fc54 = load i32, i32* %r0.global-to-local, align 4
  %v2_fc54 = add i32 %v1_fc54, 44
  %v3_fc54 = inttoptr i32 %v2_fc54 to i32*
  store i32 %v0_fc54, i32* %v3_fc54, align 4
  %v0_fc58 = load i32, i32* %r3.global-to-local, align 4
  %v1_fc58 = load i32, i32* %r1.global-to-local, align 4
  %v2_fc58 = add i32 %v1_fc58, 4
  %v3_fc58 = inttoptr i32 %v2_fc58 to i32*
  store i32 %v0_fc58, i32* %v3_fc58, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fc60:                                ; preds = %dec_label_pc_fc04
  %v1_fc60 = and i32 %v3_fc1c, -2
  %v2_fc64 = add i32 %v1_fc60, %v2_fc14
  store i32 %v2_fc64, i32* %r3.global-to-local, align 4
  %v1_fc68 = add i32 %v2_fc64, 4
  %v2_fc68 = inttoptr i32 %v1_fc68 to i32*
  %v3_fc68 = load i32, i32* %v2_fc68, align 4
  store i32 %v3_fc68, i32* %r3.global-to-local, align 4
  %v1_fc6c = urem i32 %v3_fc68, 2
  %v2_fc6c = icmp eq i32 %v1_fc6c, 0
  br i1 %v2_fc6c, label %dec_label_pc_fc74, label %dec_label_pc_fcb4

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc60
  %v1_fc74 = and i32 %v3_fc1c, -4
  store i32 %v1_fc74, i32* %r3.global-to-local, align 4
  %v2_fc78 = add i32 %v1_fc74, %v1_fbf0
  store i32 %v2_fc78, i32* %r0.global-to-local, align 4
  %v3_fc7c = icmp ult i32 %v2_fc78, %v1_fbf8
  br i1 %v3_fc7c, label %dec_label_pc_fcb4, label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fc74
  %v1_fc84 = add i32 %v1_fbf0, %v0_fbd8
  %v2_fc84 = inttoptr i32 %v1_fc84 to i32*
  %v3_fc84 = load i32, i32* %v2_fc84, align 4
  store i32 %v3_fc84, i32* %r1.global-to-local, align 4
  %v1_fc88 = add i32 %v3_fc84, 12
  %v2_fc88 = inttoptr i32 %v1_fc88 to i32*
  %v3_fc88 = load i32, i32* %v2_fc88, align 4
  store i32 %v3_fc88, i32* %r3.global-to-local, align 4
  %v9_fc8c = icmp eq i32 %v3_fc88, %v2_fc14
  %v1_fc90 = add i32 %v2_fc14, 12
  %v2_fc90 = inttoptr i32 %v1_fc90 to i32*
  %v3_fc90 = load i32, i32* %v2_fc90, align 4
  store i32 %v3_fc90, i32* %r2.global-to-local, align 4
  br i1 %v9_fc8c, label %dec_label_pc_fc98, label %dec_label_pc_fca4

dec_label_pc_fc98:                                ; preds = %dec_label_pc_fc84
  %v1_fc98 = add i32 %v3_fc90, 8
  %v2_fc98 = inttoptr i32 %v1_fc98 to i32*
  %v3_fc98 = load i32, i32* %v2_fc98, align 4
  store i32 %v3_fc98, i32* %r3.global-to-local, align 4
  %v9_fc9c = icmp eq i32 %v3_fc98, %v2_fc14
  br i1 %v9_fc9c, label %dec_label_pc_fca8, label %dec_label_pc_fca4

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fc84, %dec_label_pc_fc98
  %v0_fca4 = call i32 @abort()
  store i32 %v0_fca4, i32* %r0.global-to-local, align 4
  %v0_fca8.pre = load i32, i32* @r1, align 4
  %v1_fca8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_fca8

dec_label_pc_fca8:                                ; preds = %dec_label_pc_fc98, %dec_label_pc_fca4
  %v1_fca8 = phi i32 [ %v3_fc90, %dec_label_pc_fc98 ], [ %v1_fca8.pre, %dec_label_pc_fca4 ]
  %v0_fca8 = phi i32 [ %v3_fc84, %dec_label_pc_fc98 ], [ %v0_fca8.pre, %dec_label_pc_fca4 ]
  %v2_fca8 = add i32 %v1_fca8, 8
  %v3_fca8 = inttoptr i32 %v2_fca8 to i32*
  store i32 %v0_fca8, i32* %v3_fca8, align 4
  %v0_fcac = load i32, i32* %r2.global-to-local, align 4
  %v1_fcac = load i32, i32* %r1.global-to-local, align 4
  %v2_fcac = add i32 %v1_fcac, 12
  %v3_fcac = inttoptr i32 %v2_fcac to i32*
  store i32 %v0_fcac, i32* %v3_fcac, align 4
  %v1_fd68.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fd68

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fc24, %dec_label_pc_fc74, %dec_label_pc_fc60
  %v1_fcb4 = add i32 %v1_fbf8, -7
  store i32 %v1_fcb4, i32* %r0.global-to-local, align 4
  %v1_fcb8 = call i32 @malloc(i32 %v1_fcb4)
  store i32 %v1_fcb8, i32* @r0, align 4
  store i32 %v1_fcb8, i32* %r1.global-to-local, align 4
  %v2_fcbc = icmp eq i32 %v1_fcb8, 0
  br i1 %v2_fcbc, label %bb31, label %dec_label_pc_fcc8

bb31:                                             ; preds = %dec_label_pc_fcb4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fcc8:                                ; preds = %dec_label_pc_fcb4
  %v1_fcd0.pre = load i32, i32* @r4, align 4
  %v1_fcc8 = add i32 %v1_fcb8, -4
  %v2_fcc8 = inttoptr i32 %v1_fcc8 to i32*
  %v3_fcc8 = load i32, i32* %v2_fcc8, align 4
  store i32 %v3_fcc8, i32* @r3, align 4
  %v1_fccc = add i32 %v1_fcb8, -8
  store i32 %v1_fccc, i32* @r7, align 4
  %v9_fcd0 = icmp eq i32 %v1_fccc, %v1_fcd0.pre
  br i1 %v9_fcd0, label %.thread2, label %dec_label_pc_fce0

.thread2:                                         ; preds = %dec_label_pc_fcc8
  %v2_fcd4 = and i32 %v3_fcc8, -4
  store i32 %v2_fcd4, i32* %r3.global-to-local, align 4
  %v2_fcd8 = load i32, i32* @r6, align 4
  %v3_fcd8 = add i32 %v2_fcd8, %v2_fcd4
  store i32 %v3_fcd8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fd68

dec_label_pc_fce0:                                ; preds = %dec_label_pc_fcc8
  %v0_fce0 = load i32, i32* @r6, align 4
  %v1_fce0 = add i32 %v0_fce0, -4
  store i32 %v1_fce0, i32* @r2, align 4
  %v3_fce4 = udiv i32 %v1_fce0, 4
  store i32 %v3_fce4, i32* @ip, align 4
  %tmp37 = and i32 %v1_fce0, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_fcec = icmp ult i32 %v1_fce0, 36
  %v3_fcec = or i1 %tmp38, %v2_fcec
  %v0_fcfc = load i32, i32* @r5, align 4
  br i1 %v3_fcec, label %dec_label_pc_fcfc, label %dec_label_pc_fcf0

dec_label_pc_fcf0:                                ; preds = %dec_label_pc_fce0
  store i32 %v0_fcfc, i32* @r1, align 4
  %v0_fcf4 = call i32 @memcpy()
  store i32 %v0_fcf4, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_fcfc:                                ; preds = %dec_label_pc_fce0
  %v1_fcfc = inttoptr i32 %v0_fcfc to i32*
  %v2_fcfc = load i32, i32* %v1_fcfc, align 4
  store i32 %v2_fcfc, i32* %r3.global-to-local, align 4
  %v2_fd00 = inttoptr i32 %v1_fcb8 to i32*
  store i32 %v2_fcfc, i32* %v2_fd00, align 4
  %v0_fd04 = load i32, i32* @r5, align 4
  %v1_fd04 = add i32 %v0_fd04, 4
  %v2_fd04 = inttoptr i32 %v1_fd04 to i32*
  %v3_fd04 = load i32, i32* %v2_fd04, align 4
  store i32 %v3_fd04, i32* %r3.global-to-local, align 4
  %v1_fd08 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd08 = add i32 %v1_fd08, 4
  %v3_fd08 = inttoptr i32 %v2_fd08 to i32*
  store i32 %v3_fd04, i32* %v3_fd08, align 4
  %v0_fd0c = load i32, i32* @r5, align 4
  %v1_fd0c = add i32 %v0_fd0c, 8
  %v2_fd0c = inttoptr i32 %v1_fd0c to i32*
  %v3_fd0c = load i32, i32* %v2_fd0c, align 4
  store i32 %v3_fd0c, i32* %r3.global-to-local, align 4
  %v0_fd10 = load i32, i32* @ip, align 4
  %v1_fd14 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd14 = add i32 %v1_fd14, 8
  %v3_fd14 = inttoptr i32 %v2_fd14 to i32*
  store i32 %v3_fd0c, i32* %v3_fd14, align 4
  %tmp39 = icmp ult i32 %v0_fd10, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_fd1c

dec_label_pc_fd1c:                                ; preds = %dec_label_pc_fcfc
  %v0_fd1c = load i32, i32* @r5, align 4
  %v1_fd1c = add i32 %v0_fd1c, 12
  %v2_fd1c = inttoptr i32 %v1_fd1c to i32*
  %v3_fd1c = load i32, i32* %v2_fd1c, align 4
  store i32 %v3_fd1c, i32* %r3.global-to-local, align 4
  %v1_fd20 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd20 = add i32 %v1_fd20, 12
  %v3_fd20 = inttoptr i32 %v2_fd20 to i32*
  store i32 %v3_fd1c, i32* %v3_fd20, align 4
  %v0_fd24 = load i32, i32* @r5, align 4
  %v1_fd24 = add i32 %v0_fd24, 16
  %v2_fd24 = inttoptr i32 %v1_fd24 to i32*
  %v3_fd24 = load i32, i32* %v2_fd24, align 4
  store i32 %v3_fd24, i32* %r3.global-to-local, align 4
  %v0_fd28 = load i32, i32* @ip, align 4
  %v1_fd2c = load i32, i32* %r1.global-to-local, align 4
  %v2_fd2c = add i32 %v1_fd2c, 16
  %v3_fd2c = inttoptr i32 %v2_fd2c to i32*
  store i32 %v3_fd24, i32* %v3_fd2c, align 4
  %tmp40 = icmp ult i32 %v0_fd28, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_fd34

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fd1c
  %v0_fd34 = load i32, i32* @r5, align 4
  %v1_fd34 = add i32 %v0_fd34, 20
  %v2_fd34 = inttoptr i32 %v1_fd34 to i32*
  %v3_fd34 = load i32, i32* %v2_fd34, align 4
  store i32 %v3_fd34, i32* %r3.global-to-local, align 4
  %v1_fd38 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd38 = add i32 %v1_fd38, 20
  %v3_fd38 = inttoptr i32 %v2_fd38 to i32*
  store i32 %v3_fd34, i32* %v3_fd38, align 4
  %v0_fd3c = load i32, i32* @r5, align 4
  %v1_fd3c = add i32 %v0_fd3c, 24
  %v2_fd3c = inttoptr i32 %v1_fd3c to i32*
  %v3_fd3c = load i32, i32* %v2_fd3c, align 4
  store i32 %v3_fd3c, i32* %r3.global-to-local, align 4
  %v1_fd40 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd40 = add i32 %v1_fd40, 24
  %v3_fd40 = inttoptr i32 %v2_fd40 to i32*
  store i32 %v3_fd3c, i32* %v3_fd40, align 4
  %v0_fd44 = load i32, i32* @ip, align 4
  %v7_fd44 = icmp eq i32 %v0_fd44, 9
  br i1 %v7_fd44, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_fd34
  %v1_fd48 = load i32, i32* @r5, align 4
  %v2_fd48 = add i32 %v1_fd48, 28
  %v3_fd48 = inttoptr i32 %v2_fd48 to i32*
  %v4_fd48 = load i32, i32* %v3_fd48, align 4
  store i32 %v4_fd48, i32* %r3.global-to-local, align 4
  %v2_fd4c = load i32, i32* %r1.global-to-local, align 4
  %v3_fd4c = add i32 %v2_fd4c, 28
  %v4_fd4c = inttoptr i32 %v3_fd4c to i32*
  store i32 %v4_fd48, i32* %v4_fd4c, align 4
  %v1_fd50 = load i32, i32* @r5, align 4
  %v2_fd50 = add i32 %v1_fd50, 32
  %v3_fd50 = inttoptr i32 %v2_fd50 to i32*
  %v4_fd50 = load i32, i32* %v3_fd50, align 4
  store i32 %v4_fd50, i32* %r3.global-to-local, align 4
  %v2_fd54 = load i32, i32* %r1.global-to-local, align 4
  %v3_fd54 = add i32 %v2_fd54, 32
  %v4_fd54 = inttoptr i32 %v3_fd54 to i32*
  store i32 %v4_fd50, i32* %v4_fd54, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_fd34, %dec_label_pc_fd1c, %dec_label_pc_fcfc, %dec_label_pc_fcf0, %bb32
  %v0_fd58 = load i32, i32* @r5, align 4
  store i32 %v0_fd58, i32* @r0, align 4
  %v0_fd5c = call i32 @free()
  store i32 %v0_fd5c, i32* %r0.global-to-local, align 4
  %v0_fd60 = load i32, i32* @r7, align 4
  %v1_fd60 = add i32 %v0_fd60, 8
  store i32 %v1_fd60, i32* @r4, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fd68:                                ; preds = %bb30, %.thread2, %dec_label_pc_fca8
  %v0_fd7c = phi i32 [ %v3_fcd8, %.thread2 ], [ %v1_fbf0, %bb30 ], [ %v1_fd68.pre, %dec_label_pc_fca8 ]
  %v0_fd68 = load i32, i32* @sb, align 4
  %v2_fd68 = sub i32 %v0_fd7c, %v0_fd68
  store i32 %v2_fd68, i32* %r1.global-to-local, align 4
  %v0_fd70 = load i32, i32* @sl, align 4
  %v1_fd70 = add i32 %v0_fd70, 4
  %v2_fd70 = inttoptr i32 %v1_fd70 to i32*
  %v3_fd70 = load i32, i32* %v2_fd70, align 4
  %tmp41 = icmp ugt i32 %v2_fd68, 15
  %v1_fd98 = urem i32 %v3_fd70, 2
  store i32 %v1_fd98, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_fd98, label %dec_label_pc_fd78

dec_label_pc_fd78:                                ; preds = %dec_label_pc_fd68
  %v2_fd7c = or i32 %v1_fd98, %v0_fd7c
  store i32 %v2_fd7c, i32* %r3.global-to-local, align 4
  store i32 %v2_fd7c, i32* %v2_fd70, align 4
  %v0_fd84 = load i32, i32* @sl, align 4
  %v1_fd84 = load i32, i32* %r0.global-to-local, align 4
  %v2_fd84 = add i32 %v1_fd84, %v0_fd84
  store i32 %v2_fd84, i32* %r2.global-to-local, align 4
  %v1_fd88 = add i32 %v2_fd84, 4
  %v2_fd88 = inttoptr i32 %v1_fd88 to i32*
  %v3_fd88 = load i32, i32* %v2_fd88, align 4
  %v1_fd8c = or i32 %v3_fd88, 1
  store i32 %v1_fd8c, i32* %r3.global-to-local, align 4
  store i32 %v1_fd8c, i32* %v2_fd88, align 4
  br label %dec_label_pc_fdc8

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd68
  %v2_fd9c = add i32 %v0_fd70, %v0_fd68
  store i32 %v2_fd9c, i32* %r0.global-to-local, align 4
  %v2_fda0 = or i32 %v1_fd98, %v0_fd68
  store i32 %v2_fda0, i32* %r3.global-to-local, align 4
  %v1_fda4 = or i32 %v2_fd68, 1
  store i32 %v1_fda4, i32* %r2.global-to-local, align 4
  store i32 %v2_fda0, i32* %v2_fd70, align 4
  %v0_fdac = load i32, i32* %r2.global-to-local, align 4
  %v1_fdac = load i32, i32* %r0.global-to-local, align 4
  %v2_fdac = add i32 %v1_fdac, 4
  %v3_fdac = inttoptr i32 %v2_fdac to i32*
  store i32 %v0_fdac, i32* %v3_fdac, align 4
  %v0_fdb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_fdb0 = load i32, i32* %r1.global-to-local, align 4
  %v2_fdb0 = add i32 %v1_fdb0, %v0_fdb0
  store i32 %v2_fdb0, i32* %r2.global-to-local, align 4
  %v1_fdb4 = add i32 %v2_fdb0, 4
  %v2_fdb4 = inttoptr i32 %v1_fdb4 to i32*
  %v3_fdb4 = load i32, i32* %v2_fdb4, align 4
  %v1_fdb8 = or i32 %v3_fdb4, 1
  store i32 %v1_fdb8, i32* %r3.global-to-local, align 4
  store i32 %v1_fdb8, i32* %v2_fdb4, align 4
  %v0_fdc0 = load i32, i32* %r0.global-to-local, align 4
  %v1_fdc0 = add i32 %v0_fdc0, 8
  store i32 %v1_fdc0, i32* @r0, align 4
  %v0_fdc4 = call i32 @free()
  store i32 %v0_fdc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdc8

dec_label_pc_fdc8:                                ; preds = %dec_label_pc_fd78, %dec_label_pc_fd98
  %v0_fdc8 = load i32, i32* @sl, align 4
  %v1_fdc8 = add i32 %v0_fdc8, 8
  store i32 %v1_fdc8, i32* @r4, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fdd0:                                ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r1.global-to-local, align 4
  %v4_fdd8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), align 4
  store i32 %v4_fdd8, i32* @r8, align 4
  %v2_fddc = inttoptr i32 %v1_fbec to i32*
  %v3_fddc = load i32, i32* %v2_fddc, align 4
  store i32 %v3_fddc, i32* @r4, align 4
  %v1_fde0 = add i32 %v4_fdd8, 860
  %v2_fde0 = inttoptr i32 %v1_fde0 to i32*
  %v3_fde0 = load i32, i32* %v2_fde0, align 4
  %v1_fde4 = add i32 %v3_fddc, 4
  %v1_fde8 = add i32 %v3_fde0, -1
  store i32 %v1_fde8, i32* %r2.global-to-local, align 4
  %v2_fdec = add i32 %v1_fde4, %v1_fde8
  %v1_fdf0 = load i32, i32* @sb, align 4
  %v2_fdf0 = add i32 %v2_fdec, %v1_fdf0
  store i32 %v2_fdf0, i32* %r3.global-to-local, align 4
  %v2_fdf4 = sub i32 0, %v3_fde0
  %v3_fdf4 = and i32 %v2_fdf0, %v2_fdf4
  store i32 %v3_fdf4, i32* @r7, align 4
  %v2_fdf8 = sub i32 %v3_fdf4, %v3_fddc
  store i32 %v2_fdf8, i32* @fp, align 4
  %v9_fdfc = icmp eq i32 %v1_fbf0, %v2_fdf8
  br i1 %v9_fdfc, label %dec_label_pc_fe70, label %dec_label_pc_fe04

dec_label_pc_fe04:                                ; preds = %dec_label_pc_fdd0
  %v2_fe04 = sub i32 %v1_fbec, %v3_fddc
  store i32 %v2_fe04, i32* %r0.global-to-local, align 4
  %v2_fe08 = add i32 %v3_fddc, %v1_fbf0
  store i32 %v2_fe08, i32* %r1.global-to-local, align 4
  store i32 %v3_fdf4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_fe14 = call i32 @mremap(i32 %v2_fe04, i32 %v2_fe08, i32 %v3_fdf4, i32 1)
  store i32 %v4_fe14, i32* %r0.global-to-local, align 4
  %v7_fe18 = icmp eq i32 %v4_fe14, -1
  br i1 %v7_fe18, label %dec_label_pc_fe64, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %dec_label_pc_fe04
  %v1_fe20 = load i32, i32* @r4, align 4
  %v2_fe20 = add i32 %v1_fe20, %v4_fe14
  store i32 %v2_fe20, i32* %r0.global-to-local, align 4
  %v0_fe24 = load i32, i32* @fp, align 4
  %v1_fe24 = or i32 %v0_fe24, 2
  store i32 %v1_fe24, i32* %r3.global-to-local, align 4
  %v2_fe28 = add i32 %v2_fe20, 4
  %v3_fe28 = inttoptr i32 %v2_fe28 to i32*
  store i32 %v1_fe24, i32* %v3_fe28, align 4
  %v0_fe2c = load i32, i32* @r8, align 4
  %v1_fe2c = add i32 %v0_fe2c, 868
  %v2_fe2c = inttoptr i32 %v1_fe2c to i32*
  %v3_fe2c = load i32, i32* %v2_fe2c, align 4
  store i32 %v3_fe2c, i32* %r3.global-to-local, align 4
  %v1_fe30 = add i32 %v0_fe2c, 880
  %v2_fe30 = inttoptr i32 %v1_fe30 to i32*
  %v3_fe30 = load i32, i32* %v2_fe30, align 4
  store i32 %v3_fe30, i32* %r2.global-to-local, align 4
  %v0_fe34 = load i32, i32* @r6, align 4
  %v2_fe34 = sub i32 %v3_fe2c, %v0_fe34
  store i32 %v2_fe34, i32* %r3.global-to-local, align 4
  %v1_fe38 = load i32, i32* @r7, align 4
  %v2_fe38 = add i32 %v1_fe38, %v2_fe34
  store i32 %v2_fe38, i32* %r1.global-to-local, align 4
  %v1_fe3c = add i32 %v0_fe2c, 872
  %v2_fe3c = inttoptr i32 %v1_fe3c to i32*
  %v3_fe3c = load i32, i32* %v2_fe3c, align 4
  store i32 %v3_fe3c, i32* %r3.global-to-local, align 4
  %v1_fe44 = add i32 %v0_fe2c, 884
  %v2_fe44 = inttoptr i32 %v1_fe44 to i32*
  %v3_fe44 = load i32, i32* %v2_fe44, align 4
  store i32 %v3_fe44, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_fe38, %v3_fe30
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_fe20
  store i32 %v2_fe38, i32* %v2_fe30, align 4
  %v0_fe4c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_fe4c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_fe20, %bb33
  %v1_fe4c = phi i32 [ %v0_fe2c, %dec_label_pc_fe20 ], [ %v1_fe4c.pre, %bb33 ]
  %v0_fe4c = phi i32 [ %v2_fe38, %dec_label_pc_fe20 ], [ %v0_fe4c.pre, %bb33 ]
  %v2_fe4c = add i32 %v1_fe4c, 868
  %v3_fe4c = inttoptr i32 %v2_fe4c to i32*
  store i32 %v0_fe4c, i32* %v3_fe4c, align 4
  %v0_fe50 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe50 = load i32, i32* %r3.global-to-local, align 4
  %v2_fe50 = add i32 %v1_fe50, %v0_fe50
  store i32 %v2_fe50, i32* %r1.global-to-local, align 4
  %v1_fe54 = load i32, i32* %r2.global-to-local, align 4
  %v0_fe58 = load i32, i32* %r0.global-to-local, align 4
  %v1_fe58 = add i32 %v0_fe58, 8
  store i32 %v1_fe58, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_fe50, %v1_fe54
  br i1 %tmp43, label %bb35, label %dec_label_pc_fe9c

bb35:                                             ; preds = %bb34
  %v5_fe5c = load i32, i32* @r8, align 4
  %v6_fe5c = add i32 %v5_fe5c, 884
  %v7_fe5c = inttoptr i32 %v6_fe5c to i32*
  store i32 %v2_fe50, i32* %v7_fe5c, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fe64:                                ; preds = %dec_label_pc_fe04
  %v0_fe64 = load i32, i32* @sb, align 4
  %v1_fe64 = add i32 %v0_fe64, 4
  store i32 %v1_fe64, i32* %r3.global-to-local, align 4
  %v0_fe68 = load i32, i32* @r6, align 4
  %v3_fe68 = icmp ult i32 %v0_fe68, %v1_fe64
  br i1 %v3_fe68, label %dec_label_pc_fe78, label %dec_label_pc_fe64.dec_label_pc_fe70_crit_edge

dec_label_pc_fe64.dec_label_pc_fe70_crit_edge:    ; preds = %dec_label_pc_fe64
  %v0_fe70.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fe70

dec_label_pc_fe70:                                ; preds = %dec_label_pc_fe64.dec_label_pc_fe70_crit_edge, %dec_label_pc_fdd0
  %v0_fe70 = phi i32 [ %v0_fe70.pre, %dec_label_pc_fe64.dec_label_pc_fe70_crit_edge ], [ %v0_fbd8, %dec_label_pc_fdd0 ]
  store i32 %v0_fe70, i32* @r4, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fe78:                                ; preds = %dec_label_pc_fe64
  %v1_fe78 = add i32 %v0_fe64, -7
  store i32 %v1_fe78, i32* %r0.global-to-local, align 4
  %v1_fe7c = call i32 @malloc(i32 %v1_fe78)
  store i32 %v1_fe7c, i32* @r0, align 4
  store i32 %v1_fe7c, i32* @r4, align 4
  %v2_fe80 = icmp eq i32 %v1_fe7c, 0
  br i1 %v2_fe80, label %dec_label_pc_fe9c, label %dec_label_pc_fe88

dec_label_pc_fe88:                                ; preds = %dec_label_pc_fe78
  %v0_fe88 = load i32, i32* @r6, align 4
  %v1_fe88 = add i32 %v0_fe88, -8
  store i32 %v1_fe88, i32* @r2, align 4
  %v0_fe8c = load i32, i32* @r5, align 4
  store i32 %v0_fe8c, i32* @r1, align 4
  %v0_fe90 = call i32 @memcpy()
  %v0_fe94 = load i32, i32* @r5, align 4
  store i32 %v0_fe94, i32* @r0, align 4
  %v0_fe98 = call i32 @free()
  store i32 %v0_fe98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fe9c:                                ; preds = %bb31, %bb35, %bb34, %dec_label_pc_fe78, %dec_label_pc_fe70, %dec_label_pc_fdc8, %.thread6, %dec_label_pc_fc38, %dec_label_pc_fe88
  store i32 %v2_fb8c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  %v4_feac = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 24) to i32*), align 4
  store i32 %v4_feac, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_feac)
  br label %dec_label_pc_feb8

dec_label_pc_feb8:                                ; preds = %dec_label_pc_fbc0, %dec_label_pc_fb68, %dec_label_pc_fb50, %dec_label_pc_fe9c
  %v0_feb8 = load i32, i32* @r4, align 4
  store i32 %v0_feb8, i32* %r0.global-to-local, align 4
  store i32 %v3_fb30, i32* @r4, align 4
  store i32 %v6_fb30, i32* @r5, align 4
  store i32 %v9_fb30, i32* @r6, align 4
  store i32 %v12_fb30, i32* @r7, align 4
  store i32 %v15_fb30, i32* @r8, align 4
  store i32 %v18_fb30, i32* @sb, align 4
  store i32 %v21_fb30, i32* @sl, align 4
  store i32 %v24_fb30, i32* @fp, align 4
  store i32 %v27_fb30, i32* @lr, align 4
  ret i32 %v0_feb8

; uselistorder directives
  uselistorder i32 %v2_fe50, { 1, 0, 2 }
  uselistorder i32 %v2_fe38, { 1, 2, 0, 3 }
  uselistorder i32 %v4_fe14, { 1, 0, 2 }
  uselistorder i32 %v3_fdf4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fd98, { 2, 1, 0 }
  uselistorder i32 %v2_fd68, { 1, 0, 2 }
  uselistorder i32 %v0_fcfc, { 1, 0 }
  uselistorder i32 %v1_fcb8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_fc1c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_fc14, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_fbf8, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_fbf0, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_fbec, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_fbdc, { 1, 0 }
  uselistorder i32 %v0_fbd8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_fbb8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 12, 8, 9, 10, 11, 22, 13, 15, 14, 16, 23, 24, 17, 18, 19, 20, 21, 27, 26, 25, 28, 30, 29 }
  uselistorder i32 860, { 0, 2, 1, 3 }
  uselistorder i32 ()* @abort, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 32) to i32*), { 3, 2, 17, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 16) to i32*), { 0, 2, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 72) to i32*), { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_feb8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fe9c, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_fdc8, { 1, 0 }
  uselistorder label %dec_label_pc_fd68, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_fcb4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fca8, { 1, 0 }
  uselistorder label %dec_label_pc_fca4, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_fecc(i32 %arg1) local_unnamed_addr {
dec_label_pc_fecc:
  %v0_fecc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fecc, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_fecc
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_fecc, %bb
  %v10_fee0 = phi i32 [ %arg1, %dec_label_pc_fecc ], [ 0, %bb ]
  ret i32 %v10_fee0

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  %v4_fef0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 104) to i32*), align 4
  %v4_fef8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 68) to i32*), align 4
  store i32 %v4_fef8, i32* %r1.global-to-local, align 4
  %v1_fefc = add i32 %arg1, 44
  %v2_fefc = inttoptr i32 %v1_fefc to i32*
  %v3_fefc = load i32, i32* %v2_fefc, align 4
  %v1_ff00 = add i32 %arg1, 28
  %v2_ff00 = inttoptr i32 %v1_ff00 to i32*
  %v3_ff00 = load i32, i32* %v2_ff00, align 4
  store i32 %v3_ff00, i32* %r2.global-to-local, align 4
  %v2_ff04 = inttoptr i32 %v4_fef0 to i32*
  store i32 %v3_fefc, i32* %v2_ff04, align 4
  %v0_ff08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ff08 = load i32, i32* %r1.global-to-local, align 4
  %v2_ff08 = inttoptr i32 %v1_ff08 to i32*
  store i32 %v0_ff08, i32* %v2_ff08, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_ff14(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff14:
  %v0_ff14 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ff14, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ff14
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ff14, %bb
  %v4_ff18 = phi i32 [ %arg1, %dec_label_pc_ff14 ], [ 0, %bb ]
  ret i32 %v4_ff18

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff58:
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r2, align 4
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 9508) to i32*), align 4
  ret i32 0
}

define i32 @__aeabi_unwind_cpp_pr0() local_unnamed_addr {
entry:
  %v1_ff68 = load i32, i32* @r0, align 4
  ret i32 %v1_ff68
}

define i32 @__aeabi_unwind_cpp_pr1() local_unnamed_addr {
entry:
  %v1_ff6c = load i32, i32* @r0, align 4
  ret i32 %v1_ff6c
}

define i32 @__aeabi_unwind_cpp_pr2() local_unnamed_addr {
entry:
  %v1_ff70 = load i32, i32* @r0, align 4
  ret i32 %v1_ff70
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ff74 = load i32, i32* @r7, align 4
  store i32 %v3_ff74, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_ff9c, label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %entry
  %v0_ff8c = call i32 @__GI___errno_location()
  %v0_ff90 = load i32, i32* %r7.global-to-local, align 4
  %v1_ff90 = sub i32 0, %v0_ff90
  %v2_ff94 = inttoptr i32 %v0_ff8c to i32*
  store i32 %v1_ff90, i32* %v2_ff94, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_ffa0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %entry, %dec_label_pc_ff8c
  %v2_ffa0 = phi i32 [ %v3_ff74, %entry ], [ %v2_ffa0.pre, %dec_label_pc_ff8c ]
  %v0_ff9c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_ff8c ]
  store i32 %v2_ffa0, i32* %r7.global-to-local, align 4
  ret i32 %v0_ff9c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ff9c, { 1, 0 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_ffb0 = load i32, i32* @r1, align 4
  store i32 %v0_ffb0, i32* @r3, align 4
  %v0_ffc0 = load i32, i32* @r0, align 4
  store i32 %v0_ffc0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ffc0, -4095
  br i1 %tmp, label %dec_label_pc_ffe0, label %dec_label_pc_ffcc

dec_label_pc_ffcc:                                ; preds = %entry
  %v0_ffcc = call i32 @__GI___errno_location()
  %v0_ffd0 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffd0 = sub i32 0, %v0_ffd0
  store i32 %v1_ffd0, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_ffd8 = inttoptr i32 %v0_ffcc to i32*
  store i32 %v1_ffd0, i32* %v2_ffd8, align 4
  br label %dec_label_pc_fff0

dec_label_pc_ffe0:                                ; preds = %entry
  %v2_ffe0 = icmp eq i32 %v0_ffc0, 0
  br i1 %v2_ffe0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ffe0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ffe0, %bb
  call void @__pseudo_cond_branch(i1 %v2_ffe0, i32 ptrtoint (i32* @global_var_10178.334 to i32))
  br label %dec_label_pc_fff0

dec_label_pc_fff0:                                ; preds = %dec_label_pc_ffcc, %.thread
  %v0_fff0 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_fff0

; uselistorder directives
  uselistorder i32 %v0_ffc0, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fff0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10000 = load i32, i32* @r4, align 4
  store i32 %v3_10000, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_10018 = inttoptr i32 %arg2 to i8*
  %v3_10018 = call i32 @__GI_memset(i8* %v2_10018, i32 0)
  %v2_1001c = load i32, i32* %arg1, align 4
  store i32 %v2_1001c, i32* %r3.global-to-local, align 4
  %v3_1001c = add i32 %tmp, 4
  %v4_1001c = inttoptr i32 %v3_1001c to i32*
  %v5_1001c = load i32, i32* %v4_1001c, align 4
  store i32 %v5_1001c, i32* %r4.global-to-local, align 4
  %v0_10020 = load i32, i32* %r5.global-to-local, align 4
  %v1_10020 = inttoptr i32 %v0_10020 to i32*
  store i32 %v2_1001c, i32* %v1_10020, align 4
  %v3_10020 = add i32 %v0_10020, 4
  %v4_10020 = inttoptr i32 %v3_10020 to i32*
  %v5_10020 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_10020, i32* %v4_10020, align 4
  %v0_10024 = load i32, i32* %r6.global-to-local, align 4
  %v1_10024 = add i32 %v0_10024, 12
  %v2_10024 = inttoptr i32 %v1_10024 to i32*
  %v3_10024 = load i32, i32* %v2_10024, align 4
  %v1_10028 = load i32, i32* %r5.global-to-local, align 4
  %v2_10028 = add i32 %v1_10028, 12
  %v3_10028 = inttoptr i32 %v2_10028 to i32*
  store i32 %v3_10024, i32* %v3_10028, align 4
  %v0_1002c = load i32, i32* %r6.global-to-local, align 4
  %v1_1002c = add i32 %v0_1002c, 96
  store i32 %v1_1002c, i32* %r3.global-to-local, align 4
  %v1_10030 = inttoptr i32 %v1_1002c to i32*
  %v2_10030 = load i32, i32* %v1_10030, align 4
  store i32 %v2_10030, i32* %r3.global-to-local, align 4
  %v3_10030 = add i32 %v0_1002c, 100
  %v4_10030 = inttoptr i32 %v3_10030 to i32*
  %v5_10030 = load i32, i32* %v4_10030, align 4
  store i32 %v5_10030, i32* %r4.global-to-local, align 4
  %v1_10034 = add i32 %v0_1002c, 56
  %v2_10034 = inttoptr i32 %v1_10034 to i32*
  %v3_10034 = load i32, i32* %v2_10034, align 4
  store i32 %v3_10034, i32* %r2.global-to-local, align 4
  %v1_10038 = load i32, i32* %r5.global-to-local, align 4
  %v2_10038 = add i32 %v1_10038, 96
  %v3_10038 = inttoptr i32 %v2_10038 to i32*
  store i32 %v2_10030, i32* %v3_10038, align 4
  %v0_1003c = load i32, i32* %r4.global-to-local, align 4
  %v1_1003c = load i32, i32* %r5.global-to-local, align 4
  %v2_1003c = add i32 %v1_1003c, 100
  %v3_1003c = inttoptr i32 %v2_1003c to i32*
  store i32 %v0_1003c, i32* %v3_1003c, align 4
  %v0_10040 = load i32, i32* %r6.global-to-local, align 4
  %v1_10040 = add i32 %v0_10040, 24
  store i32 %v1_10040, i32* %ip.global-to-local, align 4
  %v1_10044 = inttoptr i32 %v1_10040 to i32*
  %v2_10044 = load i32, i32* %v1_10044, align 4
  store i32 %v2_10044, i32* %ip.global-to-local, align 4
  %v3_10044 = add i32 %v0_10040, 28
  %v4_10044 = inttoptr i32 %v3_10044 to i32*
  %v5_10044 = load i32, i32* %v4_10044, align 4
  store i32 %v5_10044, i32* %lr.global-to-local, align 4
  %v0_10048 = load i32, i32* %r2.global-to-local, align 4
  %v1_10048 = load i32, i32* %r5.global-to-local, align 4
  %v2_10048 = add i32 %v1_10048, 56
  %v3_10048 = inttoptr i32 %v2_10048 to i32*
  store i32 %v0_10048, i32* %v3_10048, align 4
  %v0_1004c = load i32, i32* %r6.global-to-local, align 4
  %v1_1004c = add i32 %v0_1004c, 72
  store i32 %v1_1004c, i32* %r3.global-to-local, align 4
  %v1_10050 = add i32 %v0_1004c, 32
  store i32 %v1_10050, i32* %r7.global-to-local, align 4
  %v1_10054 = inttoptr i32 %v1_10050 to i32*
  %v2_10054 = load i32, i32* %v1_10054, align 4
  store i32 %v2_10054, i32* %r7.global-to-local, align 4
  %v3_10054 = add i32 %v0_1004c, 36
  %v4_10054 = inttoptr i32 %v3_10054 to i32*
  %v5_10054 = load i32, i32* %v4_10054, align 4
  store i32 %v5_10054, i32* %r8.global-to-local, align 4
  %v1_10058 = inttoptr i32 %v1_1004c to i32*
  %v2_10058 = load i32, i32* %v1_10058, align 4
  %v3_10058 = add i32 %v0_1004c, 76
  %v4_10058 = inttoptr i32 %v3_10058 to i32*
  %v5_10058 = load i32, i32* %v4_10058, align 4
  store i32 %v5_10058, i32* %r1.global-to-local, align 4
  %v0_1005c = load i32, i32* %r5.global-to-local, align 4
  %v1_1005c = add i32 %v0_1005c, 72
  %v1_10060 = inttoptr i32 %v1_1005c to i32*
  store i32 %v2_10058, i32* %v1_10060, align 4
  %v3_10060 = add i32 %v0_1005c, 76
  %v4_10060 = inttoptr i32 %v3_10060 to i32*
  %v5_10060 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10060, i32* %v4_10060, align 4
  %v0_10064 = load i32, i32* %r7.global-to-local, align 4
  %v1_10064 = load i32, i32* %r5.global-to-local, align 4
  %v2_10064 = add i32 %v1_10064, 32
  %v3_10064 = inttoptr i32 %v2_10064 to i32*
  store i32 %v0_10064, i32* %v3_10064, align 4
  %v0_10068 = load i32, i32* %r8.global-to-local, align 4
  %v1_10068 = load i32, i32* %r5.global-to-local, align 4
  %v2_10068 = add i32 %v1_10068, 36
  %v3_10068 = inttoptr i32 %v2_10068 to i32*
  store i32 %v0_10068, i32* %v3_10068, align 4
  %v0_1006c = load i32, i32* %r6.global-to-local, align 4
  %v1_1006c = add i32 %v0_1006c, 80
  store i32 %v1_1006c, i32* %r3.global-to-local, align 4
  %v1_10070 = add i32 %v0_1006c, 48
  store i32 %v1_10070, i32* %r7.global-to-local, align 4
  %v1_10074 = inttoptr i32 %v1_10070 to i32*
  %v2_10074 = load i32, i32* %v1_10074, align 4
  store i32 %v2_10074, i32* %r7.global-to-local, align 4
  %v3_10074 = add i32 %v0_1006c, 52
  %v4_10074 = inttoptr i32 %v3_10074 to i32*
  %v5_10074 = load i32, i32* %v4_10074, align 4
  store i32 %v5_10074, i32* %r8.global-to-local, align 4
  %v1_10078 = inttoptr i32 %v1_1006c to i32*
  %v2_10078 = load i32, i32* %v1_10078, align 4
  %v3_10078 = add i32 %v0_1006c, 84
  %v4_10078 = inttoptr i32 %v3_10078 to i32*
  %v5_10078 = load i32, i32* %v4_10078, align 4
  store i32 %v5_10078, i32* %r1.global-to-local, align 4
  %v1_1007c = add i32 %v0_1006c, 16
  %v2_1007c = inttoptr i32 %v1_1007c to i32*
  %v3_1007c = load i32, i32* %v2_1007c, align 4
  store i32 %v3_1007c, i32* %r2.global-to-local, align 4
  %v0_10080 = load i32, i32* %r5.global-to-local, align 4
  %v1_10080 = add i32 %v0_10080, 80
  %v1_10084 = inttoptr i32 %v1_10080 to i32*
  store i32 %v2_10078, i32* %v1_10084, align 4
  %v3_10084 = add i32 %v0_10080, 84
  %v4_10084 = inttoptr i32 %v3_10084 to i32*
  %v5_10084 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10084, i32* %v4_10084, align 4
  %v0_10088 = load i32, i32* %r7.global-to-local, align 4
  %v1_10088 = load i32, i32* %r5.global-to-local, align 4
  %v2_10088 = add i32 %v1_10088, 48
  %v3_10088 = inttoptr i32 %v2_10088 to i32*
  store i32 %v0_10088, i32* %v3_10088, align 4
  %v0_1008c = load i32, i32* %r8.global-to-local, align 4
  %v1_1008c = load i32, i32* %r5.global-to-local, align 4
  %v2_1008c = add i32 %v1_1008c, 52
  %v3_1008c = inttoptr i32 %v2_1008c to i32*
  store i32 %v0_1008c, i32* %v3_1008c, align 4
  %v0_10090 = load i32, i32* %r2.global-to-local, align 4
  %v1_10090 = load i32, i32* %r5.global-to-local, align 4
  %v2_10090 = add i32 %v1_10090, 16
  %v3_10090 = inttoptr i32 %v2_10090 to i32*
  store i32 %v0_10090, i32* %v3_10090, align 4
  %v0_10094 = load i32, i32* %r6.global-to-local, align 4
  %v1_10094 = add i32 %v0_10094, 88
  store i32 %v1_10094, i32* %r3.global-to-local, align 4
  %v1_10098 = add i32 %v0_10094, 20
  %v2_10098 = inttoptr i32 %v1_10098 to i32*
  %v3_10098 = load i32, i32* %v2_10098, align 4
  store i32 %v3_10098, i32* %r2.global-to-local, align 4
  %v1_1009c = inttoptr i32 %v1_10094 to i32*
  %v2_1009c = load i32, i32* %v1_1009c, align 4
  %v3_1009c = add i32 %v0_10094, 92
  %v4_1009c = inttoptr i32 %v3_1009c to i32*
  %v5_1009c = load i32, i32* %v4_1009c, align 4
  store i32 %v5_1009c, i32* %r1.global-to-local, align 4
  %v1_100a0 = add i32 %v0_10094, 64
  store i32 %v1_100a0, i32* %r6.global-to-local, align 4
  %v1_100a4 = inttoptr i32 %v1_100a0 to i32*
  %v2_100a4 = load i32, i32* %v1_100a4, align 4
  store i32 %v2_100a4, i32* %r6.global-to-local, align 4
  %v3_100a4 = add i32 %v0_10094, 68
  %v4_100a4 = inttoptr i32 %v3_100a4 to i32*
  %v5_100a4 = load i32, i32* %v4_100a4, align 4
  store i32 %v5_100a4, i32* %r7.global-to-local, align 4
  %v0_100a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_100a8 = add i32 %v0_100a8, 88
  store i32 %v1_100a8, i32* %r3.global-to-local, align 4
  %v2_100ac = add i32 %v0_100a8, 20
  %v3_100ac = inttoptr i32 %v2_100ac to i32*
  store i32 %v3_10098, i32* %v3_100ac, align 4
  %v0_100b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_100b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_100b0 = add i32 %v1_100b0, 24
  %v3_100b0 = inttoptr i32 %v2_100b0 to i32*
  store i32 %v0_100b0, i32* %v3_100b0, align 4
  %v0_100b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_100b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_100b4 = add i32 %v1_100b4, 28
  %v3_100b4 = inttoptr i32 %v2_100b4 to i32*
  store i32 %v0_100b4, i32* %v3_100b4, align 4
  %v0_100b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_100b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_100b8 = add i32 %v1_100b8, 64
  %v3_100b8 = inttoptr i32 %v2_100b8 to i32*
  store i32 %v0_100b8, i32* %v3_100b8, align 4
  %v0_100bc = load i32, i32* %r7.global-to-local, align 4
  %v1_100bc = load i32, i32* %r5.global-to-local, align 4
  %v2_100bc = add i32 %v1_100bc, 68
  %v3_100bc = inttoptr i32 %v2_100bc to i32*
  store i32 %v0_100bc, i32* %v3_100bc, align 4
  %v0_100c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_100c0 = inttoptr i32 %v0_100c0 to i32*
  store i32 %v2_1009c, i32* %v1_100c0, align 4
  %v3_100c0 = add i32 %v0_100c0, 4
  %v4_100c0 = inttoptr i32 %v3_100c0 to i32*
  %v5_100c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_100c0, i32* %v4_100c0, align 4
  %v2_100c4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_100c4, i32* %r4.global-to-local, align 4
  ret i32 %v2_1009c

; uselistorder directives
  uselistorder i32 %v0_10094, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_1006c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 104, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_100cc = load i32, i32* @r4, align 4
  store i32 %v3_100cc, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_100e4 = inttoptr i32 %arg2 to i8*
  %v3_100e4 = call i32 @__GI_memset(i8* %v2_100e4, i32 0)
  %v2_100e8 = load i32, i32* %arg1, align 4
  %v3_100e8 = add i32 %tmp, 4
  %v4_100e8 = inttoptr i32 %v3_100e8 to i32*
  %v5_100e8 = load i32, i32* %v4_100e8, align 4
  store i32 %v5_100e8, i32* %r4.global-to-local, align 4
  %v0_100ec = load i32, i32* %r6.global-to-local, align 4
  %v1_100ec = inttoptr i32 %v0_100ec to i32*
  store i32 %v2_100e8, i32* %v1_100ec, align 4
  %v3_100ec = add i32 %v0_100ec, 4
  %v4_100ec = inttoptr i32 %v3_100ec to i32*
  %v5_100ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_100ec, i32* %v4_100ec, align 4
  %v0_100f0 = load i32, i32* %r5.global-to-local, align 4
  %v1_100f0 = add i32 %v0_100f0, 32
  %v1_100f4 = inttoptr i32 %v1_100f0 to i32*
  %v2_100f4 = load i32, i32* %v1_100f4, align 4
  %v3_100f4 = add i32 %v0_100f0, 36
  %v4_100f4 = inttoptr i32 %v3_100f4 to i32*
  %v5_100f4 = load i32, i32* %v4_100f4, align 4
  store i32 %v5_100f4, i32* %r4.global-to-local, align 4
  %v1_100f8 = add i32 %v0_100f0, 96
  %v2_100f8 = inttoptr i32 %v1_100f8 to i32*
  %v3_100f8 = load i32, i32* %v2_100f8, align 4
  store i32 %v3_100f8, i32* %r2.global-to-local, align 4
  %v1_100fc = load i32, i32* %r6.global-to-local, align 4
  %v2_100fc = add i32 %v1_100fc, 32
  %v3_100fc = inttoptr i32 %v2_100fc to i32*
  store i32 %v2_100f4, i32* %v3_100fc, align 4
  %v0_10100 = load i32, i32* %r4.global-to-local, align 4
  %v1_10100 = load i32, i32* %r6.global-to-local, align 4
  %v2_10100 = add i32 %v1_10100, 36
  %v3_10100 = inttoptr i32 %v2_10100 to i32*
  store i32 %v0_10100, i32* %v3_10100, align 4
  %v0_10104 = load i32, i32* %r2.global-to-local, align 4
  %v1_10104 = load i32, i32* %r6.global-to-local, align 4
  %v2_10104 = add i32 %v1_10104, 12
  %v3_10104 = inttoptr i32 %v2_10104 to i32*
  store i32 %v0_10104, i32* %v3_10104, align 4
  %v0_10108 = load i32, i32* %r5.global-to-local, align 4
  %v1_10108 = add i32 %v0_10108, 48
  %v2_10108 = inttoptr i32 %v1_10108 to i32*
  %v3_10108 = load i32, i32* %v2_10108, align 4
  %v1_1010c = add i32 %v0_10108, 24
  store i32 %v1_1010c, i32* %ip.global-to-local, align 4
  %v1_10110 = inttoptr i32 %v1_1010c to i32*
  %v2_10110 = load i32, i32* %v1_10110, align 4
  store i32 %v2_10110, i32* %ip.global-to-local, align 4
  %v3_10110 = add i32 %v0_10108, 28
  %v4_10110 = inttoptr i32 %v3_10110 to i32*
  %v5_10110 = load i32, i32* %v4_10110, align 4
  store i32 %v5_10110, i32* %lr.global-to-local, align 4
  %v1_10114 = load i32, i32* %r6.global-to-local, align 4
  %v2_10114 = add i32 %v1_10114, 44
  %v3_10114 = inttoptr i32 %v2_10114 to i32*
  store i32 %v3_10108, i32* %v3_10114, align 4
  %v0_10118 = load i32, i32* %r5.global-to-local, align 4
  %v1_10118 = add i32 %v0_10118, 64
  %v2_10118 = inttoptr i32 %v1_10118 to i32*
  %v3_10118 = load i32, i32* %v2_10118, align 4
  %v1_1011c = add i32 %v0_10118, 56
  %v2_1011c = inttoptr i32 %v1_1011c to i32*
  %v3_1011c = load i32, i32* %v2_1011c, align 4
  store i32 %v3_1011c, i32* %r2.global-to-local, align 4
  %v1_10120 = load i32, i32* %r6.global-to-local, align 4
  %v2_10120 = add i32 %v1_10120, 52
  %v3_10120 = inttoptr i32 %v2_10120 to i32*
  store i32 %v3_10118, i32* %v3_10120, align 4
  %v0_10124 = load i32, i32* %r2.global-to-local, align 4
  %v1_10124 = load i32, i32* %r6.global-to-local, align 4
  %v2_10124 = add i32 %v1_10124, 48
  %v3_10124 = inttoptr i32 %v2_10124 to i32*
  store i32 %v0_10124, i32* %v3_10124, align 4
  %v0_10128 = load i32, i32* %r5.global-to-local, align 4
  %v1_10128 = add i32 %v0_10128, 72
  %v1_1012c = inttoptr i32 %v1_10128 to i32*
  %v2_1012c = load i32, i32* %v1_1012c, align 4
  %v3_1012c = add i32 %v0_10128, 76
  %v4_1012c = inttoptr i32 %v3_1012c to i32*
  %v5_1012c = load i32, i32* %v4_1012c, align 4
  store i32 %v5_1012c, i32* %r1.global-to-local, align 4
  %v0_10130 = load i32, i32* %r6.global-to-local, align 4
  %v1_10130 = add i32 %v0_10130, 56
  %v1_10134 = inttoptr i32 %v1_10130 to i32*
  store i32 %v2_1012c, i32* %v1_10134, align 4
  %v3_10134 = add i32 %v0_10130, 60
  %v4_10134 = inttoptr i32 %v3_10134 to i32*
  %v5_10134 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10134, i32* %v4_10134, align 4
  %v0_10138 = load i32, i32* %r5.global-to-local, align 4
  %v1_10138 = add i32 %v0_10138, 80
  %v1_1013c = inttoptr i32 %v1_10138 to i32*
  %v2_1013c = load i32, i32* %v1_1013c, align 4
  %v3_1013c = add i32 %v0_10138, 84
  %v4_1013c = inttoptr i32 %v3_1013c to i32*
  %v5_1013c = load i32, i32* %v4_1013c, align 4
  store i32 %v5_1013c, i32* %r1.global-to-local, align 4
  %v0_10140 = load i32, i32* %r6.global-to-local, align 4
  %v1_10140 = add i32 %v0_10140, 64
  %v1_10144 = inttoptr i32 %v1_10140 to i32*
  store i32 %v2_1013c, i32* %v1_10144, align 4
  %v3_10144 = add i32 %v0_10140, 68
  %v4_10144 = inttoptr i32 %v3_10144 to i32*
  %v5_10144 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10144, i32* %v4_10144, align 4
  %v0_10148 = load i32, i32* %r5.global-to-local, align 4
  %v1_10148 = add i32 %v0_10148, 16
  %v2_10148 = inttoptr i32 %v1_10148 to i32*
  %v3_10148 = load i32, i32* %v2_10148, align 4
  %v1_1014c = load i32, i32* %r6.global-to-local, align 4
  %v2_1014c = add i32 %v1_1014c, 16
  %v3_1014c = inttoptr i32 %v2_1014c to i32*
  store i32 %v3_10148, i32* %v3_1014c, align 4
  %v0_10150 = load i32, i32* %r5.global-to-local, align 4
  %v1_10150 = add i32 %v0_10150, 88
  %v1_10154 = add i32 %v0_10150, 20
  %v2_10154 = inttoptr i32 %v1_10154 to i32*
  %v3_10154 = load i32, i32* %v2_10154, align 4
  store i32 %v3_10154, i32* %r2.global-to-local, align 4
  %v1_10158 = inttoptr i32 %v1_10150 to i32*
  %v2_10158 = load i32, i32* %v1_10158, align 4
  %v3_10158 = add i32 %v0_10150, 92
  %v4_10158 = inttoptr i32 %v3_10158 to i32*
  %v5_10158 = load i32, i32* %v4_10158, align 4
  store i32 %v5_10158, i32* %r1.global-to-local, align 4
  %v0_1015c = load i32, i32* %r6.global-to-local, align 4
  %v1_1015c = add i32 %v0_1015c, 72
  %v1_10160 = inttoptr i32 %v1_1015c to i32*
  store i32 %v2_10158, i32* %v1_10160, align 4
  %v3_10160 = add i32 %v0_1015c, 76
  %v4_10160 = inttoptr i32 %v3_10160 to i32*
  %v5_10160 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10160, i32* %v4_10160, align 4
  %v0_10164 = load i32, i32* %r2.global-to-local, align 4
  %v1_10164 = load i32, i32* %r6.global-to-local, align 4
  %v2_10164 = add i32 %v1_10164, 20
  %v3_10164 = inttoptr i32 %v2_10164 to i32*
  store i32 %v0_10164, i32* %v3_10164, align 4
  %v0_10168 = load i32, i32* %ip.global-to-local, align 4
  %v1_10168 = load i32, i32* %r6.global-to-local, align 4
  %v2_10168 = add i32 %v1_10168, 24
  %v3_10168 = inttoptr i32 %v2_10168 to i32*
  store i32 %v0_10168, i32* %v3_10168, align 4
  %v0_1016c = load i32, i32* %lr.global-to-local, align 4
  %v1_1016c = load i32, i32* %r6.global-to-local, align 4
  %v2_1016c = add i32 %v1_1016c, 28
  %v3_1016c = inttoptr i32 %v2_1016c to i32*
  store i32 %v0_1016c, i32* %v3_1016c, align 4
  %v2_10170 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10170, i32* %r4.global-to-local, align 4
  ret i32 %v2_10158

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 92, { 0, 1, 3, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_10194 = inttoptr i32 %arg2 to i8*
  %v3_10194 = call i32 @__GI_memset(i8* %v2_10194, i32 0)
  %v1_10198 = add i32 %tmp, 4
  %v2_10198 = inttoptr i32 %v1_10198 to i32*
  %v3_10198 = load i32, i32* %v2_10198, align 4
  %v2_1019c = load i32, i32* %arg1, align 4
  store i32 %v2_1019c, i32* %r8.global-to-local, align 4
  %v1_101a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_101a0 = add i32 %v1_101a0, 12
  %v3_101a0 = inttoptr i32 %v2_101a0 to i32*
  store i32 %v3_10198, i32* %v3_101a0, align 4
  %v0_101a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_101a4 = add i32 %v0_101a4, 20
  %v2_101a4 = inttoptr i32 %v1_101a4 to i32*
  %v3_101a4 = load i32, i32* %v2_101a4, align 4
  %v1_101a8 = add i32 %v0_101a4, 16
  %v2_101a8 = inttoptr i32 %v1_101a8 to i32*
  %v3_101a8 = load i32, i32* %v2_101a8, align 4
  store i32 %v3_101a8, i32* %r6.global-to-local, align 4
  %v1_101ac = load i32, i32* %r5.global-to-local, align 4
  %v2_101ac = add i32 %v1_101ac, 44
  %v3_101ac = inttoptr i32 %v2_101ac to i32*
  store i32 %v3_101a4, i32* %v3_101ac, align 4
  %v0_101b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101b0 = add i32 %v0_101b0, 24
  %v2_101b0 = inttoptr i32 %v1_101b0 to i32*
  %v3_101b0 = load i32, i32* %v2_101b0, align 4
  %v1_101b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_101b4 = add i32 %v1_101b4, 48
  %v3_101b4 = inttoptr i32 %v2_101b4 to i32*
  store i32 %v3_101b0, i32* %v3_101b4, align 4
  %v0_101b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_101b8 = add i32 %v0_101b8, 28
  %v2_101b8 = inttoptr i32 %v1_101b8 to i32*
  %v3_101b8 = load i32, i32* %v2_101b8, align 4
  %v1_101bc = load i32, i32* %r5.global-to-local, align 4
  %v2_101bc = add i32 %v1_101bc, 52
  %v3_101bc = inttoptr i32 %v2_101bc to i32*
  store i32 %v3_101b8, i32* %v3_101bc, align 4
  %v0_101c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101c0 = add i32 %v0_101c0, 32
  %v1_101c4 = inttoptr i32 %v1_101c0 to i32*
  %v2_101c4 = load i32, i32* %v1_101c4, align 4
  %v3_101c4 = add i32 %v0_101c0, 36
  %v4_101c4 = inttoptr i32 %v3_101c4 to i32*
  %v5_101c4 = load i32, i32* %v4_101c4, align 4
  store i32 %v5_101c4, i32* %r1.global-to-local, align 4
  %v0_101c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_101c8 = add i32 %v0_101c8, 56
  %v1_101cc = inttoptr i32 %v1_101c8 to i32*
  store i32 %v2_101c4, i32* %v1_101cc, align 4
  %v3_101cc = add i32 %v0_101c8, 60
  %v4_101cc = inttoptr i32 %v3_101cc to i32*
  %v5_101cc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_101cc, i32* %v4_101cc, align 4
  %v0_101d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101d0 = add i32 %v0_101d0, 40
  %v1_101d4 = inttoptr i32 %v1_101d0 to i32*
  %v2_101d4 = load i32, i32* %v1_101d4, align 4
  %v3_101d4 = add i32 %v0_101d0, 44
  %v4_101d4 = inttoptr i32 %v3_101d4 to i32*
  %v5_101d4 = load i32, i32* %v4_101d4, align 4
  store i32 %v5_101d4, i32* %r1.global-to-local, align 4
  %v0_101d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_101d8 = add i32 %v0_101d8, 64
  %v1_101dc = inttoptr i32 %v1_101d8 to i32*
  store i32 %v2_101d4, i32* %v1_101dc, align 4
  %v3_101dc = add i32 %v0_101d8, 68
  %v4_101dc = inttoptr i32 %v3_101dc to i32*
  %v5_101dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_101dc, i32* %v4_101dc, align 4
  %v0_101e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101e0 = add i32 %v0_101e0, 48
  %v1_101e4 = inttoptr i32 %v1_101e0 to i32*
  %v2_101e4 = load i32, i32* %v1_101e4, align 4
  %v3_101e4 = add i32 %v0_101e0, 52
  %v4_101e4 = inttoptr i32 %v3_101e4 to i32*
  %v5_101e4 = load i32, i32* %v4_101e4, align 4
  store i32 %v5_101e4, i32* %r1.global-to-local, align 4
  %v1_101e8 = add i32 %v0_101e0, 8
  %v2_101e8 = inttoptr i32 %v1_101e8 to i16*
  %v3_101e8 = load i16, i16* %v2_101e8, align 2
  %v4_101e8 = zext i16 %v3_101e8 to i32
  store i32 %v4_101e8, i32* %r2.global-to-local, align 4
  %v1_101ec = add i32 %v0_101e0, 10
  %v2_101ec = inttoptr i32 %v1_101ec to i16*
  %v3_101ec = load i16, i16* %v2_101ec, align 2
  %v4_101ec = zext i16 %v3_101ec to i32
  store i32 %v4_101ec, i32* %ip.global-to-local, align 4
  %v1_101f0 = add i32 %v0_101e0, 12
  %v2_101f0 = inttoptr i32 %v1_101f0 to i16*
  %v3_101f0 = load i16, i16* %v2_101f0, align 2
  %v4_101f0 = zext i16 %v3_101f0 to i32
  store i32 %v4_101f0, i32* %lr.global-to-local, align 4
  %v1_101f4 = add i32 %v0_101e0, 14
  %v2_101f4 = inttoptr i32 %v1_101f4 to i16*
  %v3_101f4 = load i16, i16* %v2_101f4, align 2
  %v4_101f4 = zext i16 %v3_101f4 to i32
  store i32 %v4_101f4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_10200 = load i32, i32* %r5.global-to-local, align 4
  %v1_10200 = add i32 %v0_10200, 72
  %v1_10204 = inttoptr i32 %v1_10200 to i32*
  store i32 %v2_101e4, i32* %v1_10204, align 4
  %v3_10204 = add i32 %v0_10200, 76
  %v4_10204 = inttoptr i32 %v3_10204 to i32*
  %v5_10204 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10204, i32* %v4_10204, align 4
  %v0_10208 = load i32, i32* %r5.global-to-local, align 4
  %v1_10208 = inttoptr i32 %v0_10208 to i32*
  %v2_10208 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_10208, i32* %v1_10208, align 4
  %v3_10208 = add i32 %v0_10208, 4
  %v4_10208 = inttoptr i32 %v3_10208 to i32*
  %v5_10208 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_10208, i32* %v4_10208, align 4
  %v0_1020c = load i32, i32* %r6.global-to-local, align 4
  %v1_1020c = load i32, i32* %r5.global-to-local, align 4
  %v2_1020c = add i32 %v1_1020c, 32
  %v3_1020c = inttoptr i32 %v2_1020c to i32*
  store i32 %v0_1020c, i32* %v3_1020c, align 4
  %v0_10210 = load i32, i32* %r7.global-to-local, align 4
  %v1_10210 = load i32, i32* %r5.global-to-local, align 4
  %v2_10210 = add i32 %v1_10210, 36
  %v3_10210 = inttoptr i32 %v2_10210 to i32*
  store i32 %v0_10210, i32* %v3_10210, align 4
  %v0_10214 = load i32, i32* %r2.global-to-local, align 4
  %v1_10214 = load i32, i32* %r5.global-to-local, align 4
  %v2_10214 = add i32 %v1_10214, 16
  %v3_10214 = inttoptr i32 %v2_10214 to i32*
  store i32 %v0_10214, i32* %v3_10214, align 4
  %v0_10218 = load i32, i32* %ip.global-to-local, align 4
  %v1_10218 = load i32, i32* %r5.global-to-local, align 4
  %v2_10218 = add i32 %v1_10218, 20
  %v3_10218 = inttoptr i32 %v2_10218 to i32*
  store i32 %v0_10218, i32* %v3_10218, align 4
  %v0_1021c = load i32, i32* %lr.global-to-local, align 4
  %v1_1021c = load i32, i32* %r5.global-to-local, align 4
  %v2_1021c = add i32 %v1_1021c, 24
  %v3_1021c = inttoptr i32 %v2_1021c to i32*
  store i32 %v0_1021c, i32* %v3_1021c, align 4
  %v0_10220 = load i32, i32* %r4.global-to-local, align 4
  %v1_10220 = load i32, i32* %r5.global-to-local, align 4
  %v2_10220 = add i32 %v1_10220, 28
  %v3_10220 = inttoptr i32 %v2_10220 to i32*
  store i32 %v0_10220, i32* %v3_10220, align 4
  ret i32 %v2_101e4

; uselistorder directives
  uselistorder i32 %v0_101e0, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 68, { 0, 1, 4, 2, 3 }
  uselistorder i32 60, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10264, label %dec_label_pc_10254

dec_label_pc_10254:                               ; preds = %entry
  %v0_10254 = call i32 @__GI___errno_location()
  %v0_10258 = load i32, i32* %r4.global-to-local, align 4
  %v1_10258 = sub i32 0, %v0_10258
  %v2_1025c = inttoptr i32 %v0_10254 to i32*
  store i32 %v1_10258, i32* %v2_1025c, align 4
  br label %dec_label_pc_10264

dec_label_pc_10264:                               ; preds = %entry, %dec_label_pc_10254
  %v1_1026c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_10254 ]
  ret i32 %v1_1026c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10264, { 1, 0 }
}

define i32 @ioctl() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10270 = load i32, i32* @r3, align 4
  store i32 %v9_10270, i32* %stack_var_-4, align 4
  %v2_1027c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1027c, i32* @r3, align 4
  %v0_10294 = load i32, i32* @r0, align 4
  store i32 %v0_10294, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10294, -4095
  br i1 %tmp, label %dec_label_pc_102b0, label %dec_label_pc_102a0

dec_label_pc_102a0:                               ; preds = %entry
  %v0_102a0 = call i32 @__GI___errno_location()
  %v0_102a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_102a4 = sub i32 0, %v0_102a4
  store i32 %v1_102a4, i32* @r3, align 4
  %v2_102a8 = inttoptr i32 %v0_102a0 to i32*
  store i32 %v1_102a4, i32* %v2_102a8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %entry, %dec_label_pc_102a0
  %v0_102b0 = phi i32 [ %v0_10294, %entry ], [ -1, %dec_label_pc_102a0 ]
  ret i32 %v0_102b0

; uselistorder directives
  uselistorder i32 %v0_10294, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_102b0, { 1, 0 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_102c8 = load i32, i32* @r4, align 4
  %v6_102c8 = load i32, i32* @r5, align 4
  %v12_102c8 = load i32, i32* @r7, align 4
  %v1_102cc = add i32 %arg3, 14
  %v2_102d4 = ptrtoint i32* %stack_var_-72 to i32
  %v1_102d8 = and i32 %v1_102cc, -8
  %v2_102dc = sub i32 %v2_102d4, %v1_102d8
  %v1_102e0 = add i32 %v2_102dc, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_102e0, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_1031c, label %dec_label_pc_10308

dec_label_pc_10308:                               ; preds = %entry
  %v0_10308 = call i32 @__GI___errno_location()
  %v0_1030c = load i32, i32* %r4.global-to-local, align 4
  %v1_1030c = sub i32 0, %v0_1030c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10314 = inttoptr i32 %v0_10308 to i32*
  store i32 %v1_1030c, i32* %v2_10314, align 4
  %v0_10324.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10324

dec_label_pc_1031c:                               ; preds = %entry
  br i1 false, label %dec_label_pc_10324, label %dec_label_pc_1032c

dec_label_pc_10324:                               ; preds = %dec_label_pc_1031c, %dec_label_pc_10308
  %v0_10324 = phi i32 [ -1, %dec_label_pc_1031c ], [ %v0_10324.pre, %dec_label_pc_10308 ]
  store i32 %v0_10324, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_103f8

dec_label_pc_1032c:                               ; preds = %dec_label_pc_1031c
  %v2_1032c = add i32 %v1_102e0, %arg1
  %v2_10330 = add i32 %tmp, %arg3
  store i32 %v2_10330, i32* @ip, align 4
  store i32 %v1_102e0, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_103e0

dec_label_pc_1034c:                               ; preds = %dec_label_pc_103e0
  %v1_1034c = add i32 %v0_103a0, 16
  %v2_1034c = inttoptr i32 %v1_1034c to i16*
  %v3_1034c = load i16, i16* %v2_1034c, align 2
  %v4_1034c = zext i16 %v3_1034c to i32
  %v1_10350 = add nuw nsw i32 %v4_1034c, 7
  %v1_10354 = and i32 %v1_10350, 131064
  store i32 %v1_10354, i32* %r2.global-to-local, align 4
  %v2_1035c = add i32 %v1_10354, %v0_103a8
  store i32 %v2_1035c, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_1035c, %v2_10330
  br i1 %tmp26, label %dec_label_pc_10368, label %dec_label_pc_1039c

dec_label_pc_10368:                               ; preds = %dec_label_pc_1034c
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_10370 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_10370, i32* %r2.global-to-local, align 4
  %v0_10374 = load i32, i32* %sl.global-to-local, align 4
  %v1_10378 = load i32, i32* @sp, align 4
  %v2_10378 = inttoptr i32 %v1_10378 to i32*
  store i32 0, i32* %v2_10378, align 4
  %v4_1037c = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_10370, i32 %v0_10374)
  %v0_10380 = load i32, i32* @r5, align 4
  %v1_10380 = load i32, i32* %r6.global-to-local, align 4
  %v9_10380 = icmp eq i32 %v0_10380, %v1_10380
  br i1 %v9_10380, label %dec_label_pc_10388, label %dec_label_pc_103f4

dec_label_pc_10388:                               ; preds = %dec_label_pc_10368
  %v0_10388 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_10394 = inttoptr i32 %v0_10388 to i32*
  store i32 22, i32* %v2_10394, align 4
  %v0_103f8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_103f8

dec_label_pc_1039c:                               ; preds = %dec_label_pc_1034c
  %v1_1039c = inttoptr i32 %v0_103a0 to i32*
  %v2_1039c = load i32, i32* %v1_1039c, align 4
  %v3_1039c = add i32 %v0_103a0, 4
  %v4_1039c = inttoptr i32 %v3_1039c to i32*
  %v5_1039c = load i32, i32* %v4_1039c, align 4
  store i32 %v5_1039c, i32* %r4.global-to-local, align 4
  %v1_103a0 = add i32 %v0_103a0, 8
  store i32 %v1_103a0, i32* %sb.global-to-local, align 4
  %v1_103a4 = inttoptr i32 %v1_103a0 to i32*
  %v2_103a4 = load i32, i32* %v1_103a4, align 4
  store i32 %v2_103a4, i32* %sb.global-to-local, align 4
  %v3_103a4 = add i32 %v0_103a0, 12
  %v4_103a4 = inttoptr i32 %v3_103a4 to i32*
  %v5_103a4 = load i32, i32* %v4_103a4, align 4
  store i32 %v5_103a4, i32* %sl.global-to-local, align 4
  %v1_103a8 = inttoptr i32 %v0_103a8 to i32*
  store i32 %v2_1039c, i32* %v1_103a8, align 4
  %v3_103a8 = add i32 %v0_103a8, 4
  %v4_103a8 = inttoptr i32 %v3_103a8 to i32*
  %v5_103a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_103a8, i32* %v4_103a8, align 4
  %v0_103ac = load i32, i32* @r7, align 4
  %v1_103ac = add i32 %v0_103ac, 8
  %v1_103b0 = inttoptr i32 %v1_103ac to i32*
  %v2_103b0 = load i32, i32* %v1_103b0, align 4
  %v3_103b0 = add i32 %v0_103ac, 12
  %v4_103b0 = inttoptr i32 %v3_103b0 to i32*
  %v5_103b0 = load i32, i32* %v4_103b0, align 4
  store i32 %v5_103b0, i32* @r4, align 4
  %v1_103b4 = load i32, i32* @r5, align 4
  %v2_103b4 = add i32 %v1_103b4, 8
  %v3_103b4 = inttoptr i32 %v2_103b4 to i32*
  store i32 %v2_103b0, i32* %v3_103b4, align 4
  %v0_103b8 = load i32, i32* @r4, align 4
  %v1_103b8 = load i32, i32* @r5, align 4
  %v2_103b8 = add i32 %v1_103b8, 12
  %v3_103b8 = inttoptr i32 %v2_103b8 to i32*
  store i32 %v0_103b8, i32* %v3_103b8, align 4
  %v0_103bc = load i32, i32* %r2.global-to-local, align 4
  %v1_103bc = trunc i32 %v0_103bc to i16
  %v2_103bc = load i32, i32* @r5, align 4
  %v3_103bc = add i32 %v2_103bc, 16
  %v4_103bc = inttoptr i32 %v3_103bc to i16*
  store i16 %v1_103bc, i16* %v4_103bc, align 2
  %v0_103c0 = load i32, i32* @r7, align 4
  %v1_103c0 = add i32 %v0_103c0, 18
  %v2_103c0 = inttoptr i32 %v1_103c0 to i8*
  %v3_103c0 = load i8, i8* %v2_103c0, align 1
  %v4_103c0 = zext i8 %v3_103c0 to i32
  store i32 %v4_103c0, i32* @r3, align 4
  %v2_103c4 = load i32, i32* @r5, align 4
  %v3_103c4 = add i32 %v2_103c4, 18
  %v4_103c4 = inttoptr i32 %v3_103c4 to i8*
  store i8 %v3_103c0, i8* %v4_103c4, align 1
  %v0_103c8 = load i32, i32* @r7, align 4
  %v1_103c8 = add i32 %v0_103c8, 16
  %v2_103c8 = inttoptr i32 %v1_103c8 to i16*
  %v3_103c8 = load i16, i16* %v2_103c8, align 2
  %v4_103c8 = zext i16 %v3_103c8 to i32
  %v1_103cc = add nsw i32 %v4_103c8, -19
  store i32 %v1_103cc, i32* @r2, align 4
  %v0_103d0 = call i32 @memcpy()
  %v0_103d4 = load i32, i32* @r7, align 4
  %v1_103d4 = add i32 %v0_103d4, 16
  %v2_103d4 = inttoptr i32 %v1_103d4 to i16*
  %v3_103d4 = load i16, i16* %v2_103d4, align 2
  %v4_103d4 = zext i16 %v3_103d4 to i32
  %v0_103d8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_103d8, i32* @r5, align 4
  %v2_103dc = add i32 %v4_103d4, %v0_103d4
  store i32 %v2_103dc, i32* @r7, align 4
  br label %dec_label_pc_103e0

dec_label_pc_103e0:                               ; preds = %dec_label_pc_1032c, %dec_label_pc_1039c
  %v0_103a8 = phi i32 [ %tmp, %dec_label_pc_1032c ], [ %v0_103d8, %dec_label_pc_1039c ]
  %v0_103a0 = phi i32 [ %v1_102e0, %dec_label_pc_1032c ], [ %v2_103dc, %dec_label_pc_1039c ]
  %v3_103e4 = icmp ult i32 %v0_103a0, %v2_1032c
  %v1_103e8 = add i32 %v0_103a8, 19
  store i32 %v1_103e8, i32* @r0, align 4
  %v1_103ec = add i32 %v0_103a0, 19
  store i32 %v1_103ec, i32* @r1, align 4
  br i1 %v3_103e4, label %dec_label_pc_1034c, label %dec_label_pc_103f4.loopexit

dec_label_pc_103f4.loopexit:                      ; preds = %dec_label_pc_103e0
  %v0_103f4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_103f4

dec_label_pc_103f4:                               ; preds = %dec_label_pc_103f4.loopexit, %dec_label_pc_10368
  %v1_103f4 = phi i32 [ %v0_103a8, %dec_label_pc_103f4.loopexit ], [ %v0_10380, %dec_label_pc_10368 ]
  %v0_103f4 = phi i32 [ %v0_103f4.pre, %dec_label_pc_103f4.loopexit ], [ %v1_10380, %dec_label_pc_10368 ]
  %v2_103f4 = sub i32 %v1_103f4, %v0_103f4
  store i32 %v2_103f4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_103f8

dec_label_pc_103f8:                               ; preds = %dec_label_pc_10388, %dec_label_pc_10324, %dec_label_pc_103f4
  %v0_103f8 = phi i32 [ %v0_103f8.pre, %dec_label_pc_10388 ], [ %v0_10324, %dec_label_pc_10324 ], [ %v2_103f4, %dec_label_pc_103f4 ]
  store i32 %v3_102c8, i32* %r4.global-to-local, align 4
  store i32 %v6_102c8, i32* @r5, align 4
  store i32 %v12_102c8, i32* @r7, align 4
  ret i32 %v0_103f8

; uselistorder directives
  uselistorder i32 %v0_103a0, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_103a8, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_102e0, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_103f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_103e0, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10408 = load i32, i32* @r4, align 4
  store i32 %v3_10408, i32* %stack_var_-12, align 4
  %v0_1040c = load i32, i32* %r0.global-to-local, align 4
  %v1_1040c = inttoptr i32 %v0_1040c to i16*
  %v2_1040c = load i16, i16* %v1_1040c, align 2
  %v3_1040c = zext i16 %v2_1040c to i32
  %v1_10410 = and i32 %v3_1040c, 4
  store i32 %v1_10410, i32* %r5.global-to-local, align 4
  %v2_10410 = icmp eq i32 %v1_10410, 0
  store i32 %v0_1040c, i32* %r4.global-to-local, align 4
  br i1 %v2_10410, label %dec_label_pc_10424, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_10424:                               ; preds = %entry
  %v1_10424 = icmp slt i32 %arg2, 0
  br i1 %v1_10424, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_10424
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_10424, %bb18
  %v1_1042c = add i32 %v0_1040c, 4
  %v2_1042c = inttoptr i32 %v1_1042c to i32*
  %v3_1042c = load i32, i32* %v2_1042c, align 4
  store i32 %v3_1042c, i32* %r0.global-to-local, align 4
  %v1_10430 = call i32 @__GI_read(i32 %v3_1042c)
  store i32 %v1_10430, i32* %r0.global-to-local, align 4
  %v5_10438 = icmp sgt i32 %v1_10430, 0
  br i1 %v5_10438, label %.thread7, label %dec_label_pc_1043c

dec_label_pc_1043c:                               ; preds = %bb19
  %v2_10434 = icmp eq i32 %v1_10430, 0
  %v0_1043c = load i32, i32* %r4.global-to-local, align 4
  %v1_1043c = inttoptr i32 %v0_1043c to i16*
  %v2_1043c = load i16, i16* %v1_1043c, align 2
  br i1 %v2_10434, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_1043c
  %v2_10440 = or i16 %v2_1043c, 4
  store i16 %v2_10440, i16* %v1_1043c, align 2
  %v1_1045c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_1043c
  %v2_10444 = or i16 %v2_1043c, 8
  store i16 %v2_10444, i16* %v1_1043c, align 2
  %v1_10450 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_10450, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_1045c = phi i32 [ %v1_1045c.pre, %bb20 ], [ 0, %bb ], [ %v1_10430, %bb19 ], [ %v1_10450, %bb21 ]
  %v2_10458 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10458, i32* @r4, align 4
  ret i32 %v1_1045c

; uselistorder directives
  uselistorder i16 %v2_1043c, { 1, 0 }
  uselistorder i32 %v1_10430, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10460 = load i32, i32* @r4, align 4
  store i32 %v3_10460, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_104782 = icmp eq i32 %arg3, 0
  store i1 %v2_104782, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104782, label %dec_label_pc_10508, label %dec_label_pc_10480

dec_label_pc_10478thread-pre-split:               ; preds = %dec_label_pc_10480
  %v3_10498 = load i32, i32* %r6.global-to-local, align 4
  %v5_10498 = add i32 %v3_10498, %v3_10490
  store i32 %v5_10498, i32* %r6.global-to-local, align 4
  %v4_1049c = load i32, i32* %r5.global-to-local, align 4
  %v5_1049c = sub i32 %v4_1049c, %v3_10490
  store i32 %v5_1049c, i32* %r5.global-to-local, align 4
  %v2_10478 = icmp eq i32 %v5_1049c, 0
  store i1 %v2_10478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10478, label %dec_label_pc_10478.dec_label_pc_10508.loopexit_crit_edge, label %dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge

dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge: ; preds = %dec_label_pc_10478thread-pre-split
  %v3_10480.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_1048c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10480

dec_label_pc_10480:                               ; preds = %entry, %dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge
  %v0_1048c = phi i32 [ %v0_1048c.pre, %dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge ], [ %tmp, %entry ]
  %v0_10488 = phi i32 [ %v5_10498, %dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge ], [ %arg2, %entry ]
  %v3_10480 = phi i32 [ %v3_10480.pre, %dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge ], [ 2147483647, %entry ]
  %v0_10484.in = phi i32 [ %v5_1049c, %dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge ], [ %arg3, %entry ]
  %v3_10484 = phi i32 [ %v5_1049c, %dec_label_pc_10478thread-pre-split.dec_label_pc_10480_crit_edge ], [ %arg3, %entry ]
  %v0_10484 = icmp slt i32 %v0_10484.in, 0
  %storemerge = select i1 %v0_10484, i32 %v3_10480, i32 %v3_10484
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_10488, i32* %r1.global-to-local, align 4
  %v1_1048c = add i32 %v0_1048c, 4
  %v2_1048c = inttoptr i32 %v1_1048c to i32*
  %v3_1048c = load i32, i32* %v2_1048c, align 4
  %v3_10490 = call i32 @__GI_write(i32 %v3_1048c, i32 %v0_10488)
  %v1_10494 = icmp slt i32 %v3_10490, 0
  %v2_10494 = icmp eq i32 %v3_10490, 0
  store i1 %v2_10494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_10494, label %dec_label_pc_104a4, label %dec_label_pc_10478thread-pre-split

dec_label_pc_104a4:                               ; preds = %dec_label_pc_10480
  %v0_104a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_104a4 = inttoptr i32 %v0_104a4 to i16*
  %v2_104a4 = load i16, i16* %v1_104a4, align 2
  %v3_104a4 = zext i16 %v2_104a4 to i32
  store i32 %v3_104a4, i32* %r3.global-to-local, align 4
  %v1_104a8 = add i32 %v0_104a4, 8
  store i32 %v1_104a8, i32* %r1.global-to-local, align 4
  %v1_104ac = inttoptr i32 %v1_104a8 to i32*
  %v2_104ac = load i32, i32* %v1_104ac, align 4
  store i32 %v2_104ac, i32* %r1.global-to-local, align 4
  %v3_104ac = add i32 %v0_104a4, 12
  %v4_104ac = inttoptr i32 %v3_104ac to i32*
  %v5_104ac = load i32, i32* %v4_104ac, align 4
  %v1_104b0 = or i32 %v3_104a4, 8
  store i32 %v1_104b0, i32* %r3.global-to-local, align 4
  %v2_104b4 = sub i32 %v5_104ac, %v2_104ac
  store i32 %v2_104b4, i32* %r2.global-to-local, align 4
  %v9_104b4 = icmp eq i32 %v5_104ac, %v2_104ac
  store i1 %v9_104b4, i1* %cpsr_z.global-to-local, align 1
  %v1_104b8 = trunc i32 %v1_104b0 to i16
  store i16 %v1_104b8, i16* %v1_104a4, align 2
  br i1 %v9_104b4, label %dec_label_pc_104a4.dec_label_pc_10504_crit_edge, label %dec_label_pc_104c0

dec_label_pc_104a4.dec_label_pc_10504_crit_edge:  ; preds = %dec_label_pc_104a4
  %v0_10504.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10504

dec_label_pc_104c0:                               ; preds = %dec_label_pc_104a4
  %v0_104c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_104c0 = load i32, i32* %r5.global-to-local, align 4
  %v3_104c0 = icmp ult i32 %v0_104c0, %v1_104c0
  %v9_104c0 = icmp eq i32 %v0_104c0, %v1_104c0
  store i1 %v9_104c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_104c0, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_104c0
  store i32 %v1_104c0, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_104c0, %bb23
  %v2_104d4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_104e8
  %v2_104d4 = phi i32 [ %v2_104d4.pre, %.preheader ], [ %v1_104ec, %dec_label_pc_104e8 ]
  %v0_104c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_104c8 = inttoptr i32 %v0_104c8 to i8*
  %v2_104c8 = load i8, i8* %v1_104c8, align 1
  %v3_104c8 = zext i8 %v2_104c8 to i32
  store i32 %v3_104c8, i32* %r3.global-to-local, align 4
  %v7_104cc = icmp eq i8 %v2_104c8, 10
  store i1 %v7_104cc, i1* %cpsr_z.global-to-local, align 1
  %v1_104d0 = add i32 %v0_104c8, 1
  store i32 %v1_104d0, i32* %r6.global-to-local, align 4
  %v3_104d4 = inttoptr i32 %v2_104d4 to i8*
  store i8 %v2_104c8, i8* %v3_104d4, align 1
  %v0_104d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_104d8, label %dec_label_pc_104dc, label %dec_label_pc_104e8

dec_label_pc_104dc:                               ; preds = %bb24
  %v0_104dc = load i32, i32* %r4.global-to-local, align 4
  %v1_104dc = inttoptr i32 %v0_104dc to i16*
  %v2_104dc = load i16, i16* %v1_104dc, align 2
  %v3_104dc = zext i16 %v2_104dc to i32
  store i32 %v3_104dc, i32* %r3.global-to-local, align 4
  %v1_104e0 = and i32 %v3_104dc, 256
  %v2_104e0 = icmp eq i32 %v1_104e0, 0
  store i1 %v2_104e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104e0, label %dec_label_pc_104e8, label %dec_label_pc_104dc.dec_label_pc_104f4_crit_edge

dec_label_pc_104dc.dec_label_pc_104f4_crit_edge:  ; preds = %dec_label_pc_104dc
  %v0_104f8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_104f4

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104dc, %bb24
  %v0_104e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_104e8 = add i32 %v0_104e8, -1
  store i32 %v1_104e8, i32* %r2.global-to-local, align 4
  %v7_104e8 = icmp eq i32 %v0_104e8, 1
  store i1 %v7_104e8, i1* %cpsr_z.global-to-local, align 1
  %v0_104ec = load i32, i32* %r1.global-to-local, align 4
  %v1_104ec = add i32 %v0_104ec, 1
  store i32 %v1_104ec, i32* %r1.global-to-local, align 4
  br i1 %v7_104e8, label %dec_label_pc_104e8.dec_label_pc_104f4_crit_edge, label %bb24

dec_label_pc_104e8.dec_label_pc_104f4_crit_edge:  ; preds = %dec_label_pc_104e8
  %v0_104f4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104dc.dec_label_pc_104f4_crit_edge, %dec_label_pc_104e8.dec_label_pc_104f4_crit_edge
  %v0_104f8 = phi i32 [ %v1_104ec, %dec_label_pc_104e8.dec_label_pc_104f4_crit_edge ], [ %v0_104f8.pre, %dec_label_pc_104dc.dec_label_pc_104f4_crit_edge ]
  %v0_104f4 = phi i32 [ %v0_104f4.pre, %dec_label_pc_104e8.dec_label_pc_104f4_crit_edge ], [ %v0_104dc, %dec_label_pc_104dc.dec_label_pc_104f4_crit_edge ]
  %v1_104f4 = add i32 %v0_104f4, 8
  %v2_104f4 = inttoptr i32 %v1_104f4 to i32*
  %v3_104f4 = load i32, i32* %v2_104f4, align 4
  store i32 %v3_104f4, i32* %r3.global-to-local, align 4
  %v2_104f8 = add i32 %v0_104f4, 16
  %v3_104f8 = inttoptr i32 %v2_104f8 to i32*
  store i32 %v0_104f8, i32* %v3_104f8, align 4
  %v0_104fc = load i32, i32* %r3.global-to-local, align 4
  %v1_104fc = load i32, i32* %r1.global-to-local, align 4
  %v2_104fc = sub i32 %v1_104fc, %v0_104fc
  store i32 %v2_104fc, i32* %r3.global-to-local, align 4
  %v1_10500 = load i32, i32* %r5.global-to-local, align 4
  %v2_10500 = sub i32 %v1_10500, %v2_104fc
  store i32 %v2_10500, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10504

dec_label_pc_10504:                               ; preds = %dec_label_pc_104a4.dec_label_pc_10504_crit_edge, %dec_label_pc_104f4
  %v0_10504 = phi i32 [ %v0_10504.pre, %dec_label_pc_104a4.dec_label_pc_10504_crit_edge ], [ %v2_10500, %dec_label_pc_104f4 ]
  %v1_10504 = load i32, i32* @r7, align 4
  %v2_10504 = sub i32 %v1_10504, %v0_10504
  br label %dec_label_pc_10508

dec_label_pc_10478.dec_label_pc_10508.loopexit_crit_edge: ; preds = %dec_label_pc_10478thread-pre-split
  %v0_10508.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10508

dec_label_pc_10508:                               ; preds = %entry, %dec_label_pc_10478.dec_label_pc_10508.loopexit_crit_edge, %dec_label_pc_10504
  %v0_10508 = phi i32 [ %v2_10504, %dec_label_pc_10504 ], [ %v0_10508.pre.pre, %dec_label_pc_10478.dec_label_pc_10508.loopexit_crit_edge ], [ 0, %entry ]
  %v2_1050c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1050c, i32* %r4.global-to-local, align 4
  ret i32 %v0_10508

; uselistorder directives
  uselistorder i32 %v0_104f4, { 1, 0 }
  uselistorder i32 %v1_104ec, { 0, 2, 1 }
  uselistorder i32 %v0_104e8, { 1, 0 }
  uselistorder i32 %v1_104c0, { 0, 2, 1 }
  uselistorder i32 %v0_104c0, { 1, 0 }
  uselistorder i32 %v5_104ac, { 1, 0 }
  uselistorder i32 %v2_104ac, { 1, 0, 2 }
  uselistorder i32 %v3_10490, { 2, 3, 0, 1 }
  uselistorder i32 %v0_10488, { 1, 0 }
  uselistorder i32 %v5_1049c, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 3, 4, 2, 1, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 1, 4, 5, 2, 6, 7, 8, 0 }
  uselistorder i32 (i32, i32)* @__GI_write, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_10508, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10504, { 1, 0 }
  uselistorder label %dec_label_pc_104f4, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10480, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10514 = load i32, i32* @r4, align 4
  store i32 %v3_10514, i32* %stack_var_-8, align 4
  %v1_10518 = add i32 %arg1, 8
  %v1_1051c = inttoptr i32 %v1_10518 to i32*
  %v2_1051c = load i32, i32* %v1_1051c, align 4
  %v3_1051c = add i32 %arg1, 12
  %v4_1051c = inttoptr i32 %v3_1051c to i32*
  %v5_1051c = load i32, i32* %v4_1051c, align 4
  %v2_10520 = sub i32 %v5_1051c, %v2_1051c
  store i32 %v2_10520, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_10528 = inttoptr i32 %arg1 to i16*
  %v4_10528 = call i32 @__stdio_READ(i16* %v3_10528, i32 %v2_1051c, i32 %v2_10520)
  %v0_1052c = load i32, i32* @r4, align 4
  %v1_1052c = add i32 %v0_1052c, 8
  %v2_1052c = inttoptr i32 %v1_1052c to i32*
  %v3_1052c = load i32, i32* %v2_1052c, align 4
  store i32 %v3_1052c, i32* %r2.global-to-local, align 4
  %v2_10530 = add i32 %v3_1052c, %v4_10528
  %v2_10534 = add i32 %v0_1052c, 20
  %v3_10534 = inttoptr i32 %v2_10534 to i32*
  store i32 %v2_10530, i32* %v3_10534, align 4
  %v0_10538 = load i32, i32* %r2.global-to-local, align 4
  %v1_10538 = load i32, i32* @r4, align 4
  %v2_10538 = add i32 %v1_10538, 16
  %v3_10538 = inttoptr i32 %v2_10538 to i32*
  store i32 %v0_10538, i32* %v3_10538, align 4
  %v2_1053c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1053c, i32* @r4, align 4
  ret i32 %v4_10528

; uselistorder directives
  uselistorder i32 %v4_10528, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10544 = load i32, i32* @r4, align 4
  store i32 %v3_10544, i32* %stack_var_-12, align 4
  %v0_10548 = load i32, i32* @r0, align 4
  %v1_10548 = inttoptr i32 %v0_10548 to i16*
  %v2_10548 = load i16, i16* %v1_10548, align 2
  %v3_10548 = zext i16 %v2_10548 to i32
  store i32 %v3_10548, i32* %r3.global-to-local, align 4
  %v0_1054c = load i32, i32* @r1, align 4
  %v2_1054c = and i32 %v0_1054c, %v3_10548
  %v4_1054c = icmp eq i32 %v2_1054c, 0
  store i32 %v0_10548, i32* @r4, align 4
  br i1 %v4_1054c, label %dec_label_pc_1055c, label %dec_label_pc_1056c

dec_label_pc_1055c:                               ; preds = %entry
  %v1_1055c = and i32 %v3_10548, 2176
  %v2_1055c = icmp eq i32 %v1_1055c, 0
  br i1 %v2_1055c, label %dec_label_pc_10564, label %dec_label_pc_10578

dec_label_pc_10564:                               ; preds = %dec_label_pc_1055c
  %v2_10564 = or i32 %v0_1054c, %v3_10548
  store i32 %v2_10564, i32* %r3.global-to-local, align 4
  %v1_10568 = trunc i32 %v2_10564 to i16
  store i16 %v1_10568, i16* %v1_10548, align 2
  %v0_1056c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1056c

dec_label_pc_1056c:                               ; preds = %entry, %dec_label_pc_10564
  %v0_1056c = phi i32 [ %v0_10548, %entry ], [ %v0_1056c.pre, %dec_label_pc_10564 ]
  %v1_1056c = inttoptr i32 %v0_1056c to i16*
  %v2_1056c = load i16, i16* %v1_1056c, align 2
  %v3_1056c = zext i16 %v2_1056c to i32
  store i32 %v3_1056c, i32* %r3.global-to-local, align 4
  %v1_10570 = and i32 %v3_1056c, 16
  store i32 %v1_10570, i32* %r5.global-to-local, align 4
  %v2_10570 = icmp eq i32 %v1_10570, 0
  br i1 %v2_10570, label %dec_label_pc_10598, label %dec_label_pc_10578

dec_label_pc_10578:                               ; preds = %dec_label_pc_1055c, %dec_label_pc_1056c
  %v0_10578 = call i32 @__GI___errno_location()
  store i32 %v0_10578, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_10580 = inttoptr i32 %v0_10578 to i32*
  store i32 9, i32* %v2_10580, align 4
  br label %dec_label_pc_10584

dec_label_pc_10584:                               ; preds = %dec_label_pc_105a0, %dec_label_pc_10578
  %v0_10584 = load i32, i32* @r4, align 4
  %v1_10584 = inttoptr i32 %v0_10584 to i16*
  %v2_10584 = load i16, i16* %v1_10584, align 2
  %v3_10584 = zext i16 %v2_10584 to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_1058c = or i32 %v3_10584, 8
  store i32 %v1_1058c, i32* %r3.global-to-local, align 4
  %v1_10590 = trunc i32 %v1_1058c to i16
  store i16 %v1_10590, i16* %v1_10584, align 2
  %v1_105d8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_105d0

dec_label_pc_10598:                               ; preds = %dec_label_pc_1056c
  %v1_10598 = and i32 %v3_1056c, 64
  %v2_10598 = icmp eq i32 %v1_10598, 0
  br i1 %v2_10598, label %dec_label_pc_105c0, label %dec_label_pc_105a0

dec_label_pc_105a0:                               ; preds = %dec_label_pc_10598
  %v0_105a0 = call i32 @__stdio_wcommit()
  store i32 %v0_105a0, i32* %r0.global-to-local, align 4
  %v2_105a4 = icmp eq i32 %v0_105a0, 0
  br i1 %v2_105a4, label %dec_label_pc_105ac, label %dec_label_pc_10584

dec_label_pc_105ac:                               ; preds = %dec_label_pc_105a0
  %v0_105ac = load i32, i32* @r4, align 4
  %v1_105ac = inttoptr i32 %v0_105ac to i16*
  %v2_105ac = load i16, i16* %v1_105ac, align 2
  %v3_105ac = zext i16 %v2_105ac to i32
  store i32 %v3_105ac, i32* %r3.global-to-local, align 4
  %v1_105b0 = add i32 %v0_105ac, 8
  %v2_105b0 = inttoptr i32 %v1_105b0 to i32*
  %v3_105b0 = load i32, i32* %v2_105b0, align 4
  %v1_105b4 = and i32 %v3_105ac, 65471
  store i32 %v1_105b4, i32* %r3.global-to-local, align 4
  %v2_105b8 = add i32 %v0_105ac, 28
  %v3_105b8 = inttoptr i32 %v2_105b8 to i32*
  store i32 %v3_105b0, i32* %v3_105b8, align 4
  %v0_105bc = load i32, i32* %r3.global-to-local, align 4
  %v1_105bc = trunc i32 %v0_105bc to i16
  %v2_105bc = load i32, i32* @r4, align 4
  %v3_105bc = inttoptr i32 %v2_105bc to i16*
  store i16 %v1_105bc, i16* %v3_105bc, align 2
  %v0_105c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_105c0

dec_label_pc_105c0:                               ; preds = %dec_label_pc_10598, %dec_label_pc_105ac
  %v2_105c8 = phi i32 [ %v0_1056c, %dec_label_pc_10598 ], [ %v0_105c0.pre, %dec_label_pc_105ac ]
  %v1_105c0 = inttoptr i32 %v2_105c8 to i16*
  %v2_105c0 = load i16, i16* %v1_105c0, align 2
  %v3_105c0 = zext i16 %v2_105c0 to i32
  %v1_105c4 = or i32 %v3_105c0, 1
  store i32 %v1_105c4, i32* %r3.global-to-local, align 4
  %v1_105c8 = trunc i32 %v1_105c4 to i16
  store i16 %v1_105c8, i16* %v1_105c0, align 2
  %v0_105cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_105cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_105d0

dec_label_pc_105d0:                               ; preds = %dec_label_pc_10584, %dec_label_pc_105c0
  %v1_105d8 = phi i32 [ %v1_105d8.pre, %dec_label_pc_10584 ], [ %v0_105cc, %dec_label_pc_105c0 ]
  %v2_105d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_105d4, i32* @r4, align 4
  ret i32 %v1_105d8

; uselistorder directives
  uselistorder i32 %v3_10548, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder label %dec_label_pc_105d0, { 1, 0 }
  uselistorder label %dec_label_pc_105c0, { 1, 0 }
  uselistorder label %dec_label_pc_10578, { 1, 0 }
  uselistorder label %dec_label_pc_1056c, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_105dc = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_105ec = call i32 @memcpy()
  %v0_105f0 = load i32, i32* @r5, align 4
  %v1_105f0 = load i32, i32* @r4, align 4
  %v2_105f0 = add i32 %v1_105f0, %v0_105f0
  store i32 %v6_105dc, i32* @r5, align 4
  ret i32 %v2_105f0
}

define i32 @strncpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v7_10600 = icmp eq i32 %arg2, 3
  store i1 %v7_10600, i1* %cpsr_z.global-to-local, align 1
  %v0_10604 = load i32, i32* @lr, align 4
  store i32 %v0_10604, i32* %stack_var_-4, align 4
  %v1_10608 = add i32 %arg1, -1
  store i32 %v1_10608, i32* @ip, align 4
  %tmp = icmp ult i32 %arg2, 4
  br i1 %tmp, label %dec_label_pc_10684, label %dec_label_pc_10610

dec_label_pc_10610:                               ; preds = %entry
  %v3_10610 = udiv i32 %arg2, 4
  store i32 %v3_10610, i32* %lr.global-to-local, align 4
  %v0_10614.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_10614

dec_label_pc_10614:                               ; preds = %dec_label_pc_10660, %dec_label_pc_10610
  %v2_1061c = phi i32 [ %v6_10654, %dec_label_pc_10660 ], [ %v1_10608, %dec_label_pc_10610 ]
  %v0_10614 = phi i32 [ %v1_10664, %dec_label_pc_10660 ], [ %v0_10614.pre, %dec_label_pc_10610 ]
  %v1_10614 = inttoptr i32 %v0_10614 to i8*
  %v2_10614 = load i8, i8* %v1_10614, align 1
  %v3_10614 = zext i8 %v2_10614 to i32
  store i32 %v3_10614, i32* %r3.global-to-local, align 4
  %v2_10618 = icmp eq i8 %v2_10614, 0
  store i1 %v2_10618, i1* %cpsr_z.global-to-local, align 1
  %v3_1061c = add i32 %v2_1061c, 1
  %v4_1061c = inttoptr i32 %v3_1061c to i8*
  store i8 %v2_10614, i8* %v4_1061c, align 1
  %v5_1061c = load i32, i32* @ip, align 4
  %v6_1061c = add i32 %v5_1061c, 1
  store i32 %v6_1061c, i32* @ip, align 4
  %v0_10620 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10620, label %dec_label_pc_10670, label %dec_label_pc_10624

dec_label_pc_10624:                               ; preds = %dec_label_pc_10614
  %v0_10624 = load i32, i32* @r1, align 4
  %v1_10624 = add i32 %v0_10624, 1
  %v2_10624 = inttoptr i32 %v1_10624 to i8*
  %v3_10624 = load i8, i8* %v2_10624, align 1
  %v4_10624 = zext i8 %v3_10624 to i32
  store i32 %v4_10624, i32* %r3.global-to-local, align 4
  %v2_10628 = icmp eq i8 %v3_10624, 0
  store i1 %v2_10628, i1* %cpsr_z.global-to-local, align 1
  %v3_1062c = add i32 %v5_1061c, 2
  %v4_1062c = inttoptr i32 %v3_1062c to i8*
  store i8 %v3_10624, i8* %v4_1062c, align 1
  %v5_1062c = load i32, i32* @ip, align 4
  %v6_1062c = add i32 %v5_1062c, 1
  store i32 %v6_1062c, i32* @ip, align 4
  %v0_10630 = load i32, i32* @r1, align 4
  %v1_10630 = add i32 %v0_10630, 1
  store i32 %v1_10630, i32* %r1.global-to-local, align 4
  %v0_10634 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10634, label %dec_label_pc_10670, label %dec_label_pc_10638

dec_label_pc_10638:                               ; preds = %dec_label_pc_10624
  %v1_10638 = add i32 %v0_10630, 2
  %v2_10638 = inttoptr i32 %v1_10638 to i8*
  %v3_10638 = load i8, i8* %v2_10638, align 1
  %v4_10638 = zext i8 %v3_10638 to i32
  store i32 %v4_10638, i32* %r3.global-to-local, align 4
  %v2_1063c = icmp eq i8 %v3_10638, 0
  store i1 %v2_1063c, i1* %cpsr_z.global-to-local, align 1
  %v3_10640 = add i32 %v5_1062c, 2
  %v4_10640 = inttoptr i32 %v3_10640 to i8*
  store i8 %v3_10638, i8* %v4_10640, align 1
  %v5_10640 = load i32, i32* @ip, align 4
  %v6_10640 = add i32 %v5_10640, 1
  store i32 %v6_10640, i32* @ip, align 4
  %v0_10644 = load i32, i32* %r1.global-to-local, align 4
  %v1_10644 = add i32 %v0_10644, 1
  store i32 %v1_10644, i32* %r1.global-to-local, align 4
  %v0_10648 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10648, label %dec_label_pc_10670, label %dec_label_pc_1064c

dec_label_pc_1064c:                               ; preds = %dec_label_pc_10638
  %v1_1064c = add i32 %v0_10644, 2
  %v2_1064c = inttoptr i32 %v1_1064c to i8*
  %v3_1064c = load i8, i8* %v2_1064c, align 1
  %v4_1064c = zext i8 %v3_1064c to i32
  store i32 %v4_1064c, i32* %r3.global-to-local, align 4
  %v2_10650 = icmp eq i8 %v3_1064c, 0
  store i1 %v2_10650, i1* %cpsr_z.global-to-local, align 1
  %v3_10654 = add i32 %v5_10640, 2
  %v4_10654 = inttoptr i32 %v3_10654 to i8*
  store i8 %v3_1064c, i8* %v4_10654, align 1
  %v5_10654 = load i32, i32* @ip, align 4
  %v6_10654 = add i32 %v5_10654, 1
  store i32 %v6_10654, i32* @ip, align 4
  %v0_10658 = load i32, i32* %r1.global-to-local, align 4
  %v1_10658 = add i32 %v0_10658, 1
  store i32 %v1_10658, i32* %r1.global-to-local, align 4
  %v0_1065c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1065c, label %dec_label_pc_10670, label %dec_label_pc_10660

dec_label_pc_10660:                               ; preds = %dec_label_pc_1064c
  %v0_10660 = load i32, i32* %lr.global-to-local, align 4
  %v1_10660 = add i32 %v0_10660, -1
  store i32 %v1_10660, i32* %lr.global-to-local, align 4
  %v7_10660 = icmp eq i32 %v0_10660, 1
  store i1 %v7_10660, i1* %cpsr_z.global-to-local, align 1
  %v1_10664 = add i32 %v0_10658, 2
  store i32 %v1_10664, i32* @r1, align 4
  br i1 %v7_10660, label %dec_label_pc_10684, label %dec_label_pc_10614

dec_label_pc_10670:                               ; preds = %dec_label_pc_1064c, %dec_label_pc_10638, %dec_label_pc_10624, %dec_label_pc_10614
  %v1_10670 = phi i32 [ %v6_10654, %dec_label_pc_1064c ], [ %v6_10640, %dec_label_pc_10638 ], [ %v6_1062c, %dec_label_pc_10624 ], [ %v6_1061c, %dec_label_pc_10614 ]
  %v2_106701 = sub i32 %arg1, %v1_10670
  %v2_10674 = add i32 %v2_106701, %arg2
  %v1_10678 = add i32 %v2_10674, -1
  store i32 %v1_10678, i32* %r3.global-to-local, align 4
  %v7_10678 = icmp eq i32 %v2_10674, 1
  store i1 %v7_10678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10678, label %dec_label_pc_106b4, label %dec_label_pc_106a4

dec_label_pc_10684:                               ; preds = %dec_label_pc_10660, %entry
  %v2_106947 = phi i32 [ %v1_10608, %entry ], [ %v6_10654, %dec_label_pc_10660 ]
  %v1_10684 = urem i32 %arg2, 4
  store i32 %v1_10684, i32* %r3.global-to-local, align 4
  %v2_10684 = icmp eq i32 %v1_10684, 0
  store i1 %v2_10684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10684, label %dec_label_pc_106b4, label %dec_label_pc_1068c

dec_label_pc_1068c:                               ; preds = %dec_label_pc_10684, %dec_label_pc_1069c.dec_label_pc_1068c_crit_edge
  %v2_10694 = phi i32 [ %v6_10694, %dec_label_pc_1069c.dec_label_pc_1068c_crit_edge ], [ %v2_106947, %dec_label_pc_10684 ]
  %v0_10690 = phi i32 [ %v0_10690.pre, %dec_label_pc_1069c.dec_label_pc_1068c_crit_edge ], [ %v1_10684, %dec_label_pc_10684 ]
  %v0_1068c = load i32, i32* @r1, align 4
  %v1_1068c = inttoptr i32 %v0_1068c to i8*
  %v2_1068c = load i8, i8* %v1_1068c, align 1
  %v3_1068c = zext i8 %v2_1068c to i32
  store i32 %v3_1068c, i32* %r2.global-to-local, align 4
  %v5_1068c = add i32 %v0_1068c, 1
  store i32 %v5_1068c, i32* @r1, align 4
  %v1_10690 = add i32 %v0_10690, -1
  store i32 %v1_10690, i32* %r3.global-to-local, align 4
  %v7_10690 = icmp eq i32 %v0_10690, 1
  store i1 %v7_10690, i1* %cpsr_z.global-to-local, align 1
  %v3_10694 = add i32 %v2_10694, 1
  %v4_10694 = inttoptr i32 %v3_10694 to i8*
  store i8 %v2_1068c, i8* %v4_10694, align 1
  %v5_10694 = load i32, i32* @ip, align 4
  %v6_10694 = add i32 %v5_10694, 1
  store i32 %v6_10694, i32* @ip, align 4
  %v0_10698 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10698, label %dec_label_pc_106b4, label %dec_label_pc_1069c

dec_label_pc_1069c:                               ; preds = %dec_label_pc_1068c
  %v0_1069c = load i32, i32* %r2.global-to-local, align 4
  %v2_1069c = icmp eq i32 %v0_1069c, 0
  store i1 %v2_1069c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1069c, label %dec_label_pc_106a4, label %dec_label_pc_1069c.dec_label_pc_1068c_crit_edge

dec_label_pc_1069c.dec_label_pc_1068c_crit_edge:  ; preds = %dec_label_pc_1069c
  %v0_10690.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1068c

dec_label_pc_106a4:                               ; preds = %dec_label_pc_1069c, %dec_label_pc_10670
  %v2_106ac10 = phi i32 [ %v1_10670, %dec_label_pc_10670 ], [ %v6_10694, %dec_label_pc_1069c ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_106a8

dec_label_pc_106a8:                               ; preds = %dec_label_pc_106a8.dec_label_pc_106a8_crit_edge, %dec_label_pc_106a4
  %v2_106ac = phi i32 [ %v6_106ac, %dec_label_pc_106a8.dec_label_pc_106a8_crit_edge ], [ %v2_106ac10, %dec_label_pc_106a4 ]
  %v0_106ac.off0 = phi i8 [ %extract.t, %dec_label_pc_106a8.dec_label_pc_106a8_crit_edge ], [ 0, %dec_label_pc_106a4 ]
  %v0_106a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_106a8 = add i32 %v0_106a8, -1
  store i32 %v1_106a8, i32* %r3.global-to-local, align 4
  %v7_106a8 = icmp eq i32 %v0_106a8, 1
  store i1 %v7_106a8, i1* %cpsr_z.global-to-local, align 1
  %v3_106ac = add i32 %v2_106ac, 1
  %v4_106ac = inttoptr i32 %v3_106ac to i8*
  store i8 %v0_106ac.off0, i8* %v4_106ac, align 1
  %v5_106ac = load i32, i32* @ip, align 4
  %v6_106ac = add i32 %v5_106ac, 1
  store i32 %v6_106ac, i32* @ip, align 4
  %v0_106b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_106b0, label %dec_label_pc_106b4, label %dec_label_pc_106a8.dec_label_pc_106a8_crit_edge

dec_label_pc_106a8.dec_label_pc_106a8_crit_edge:  ; preds = %dec_label_pc_106a8
  %v0_106ac.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_106ac.pre to i8
  br label %dec_label_pc_106a8

dec_label_pc_106b4:                               ; preds = %dec_label_pc_1068c, %dec_label_pc_106a8, %dec_label_pc_10670, %dec_label_pc_10684
  %v2_106b4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_106b4, i32* @lr, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v6_106ac, { 1, 0 }
  uselistorder i32 %v0_106a8, { 1, 0 }
  uselistorder i32 %v6_10694, { 0, 2, 1 }
  uselistorder i32 %v1_10684, { 2, 1, 0 }
  uselistorder i32 %v2_10674, { 1, 0 }
  uselistorder i32 %v1_10664, { 1, 0 }
  uselistorder i32 %v0_10660, { 1, 0 }
  uselistorder i32 %v6_10654, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 4, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106b4, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_1068c, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_106bc = load i32, i32* @r4, align 4
  %v6_106bc = load i32, i32* @r5, align 4
  %v15_106bc = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 0, i32* @ip, align 4
  store i32 0, i32* @lr, align 4
  %v2_106d4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_106d4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 10, i32* %r7.global-to-local, align 4
  store i32 1, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-28, align 4
  %v0_1074c1 = load i32, i32* @r0, align 4
  %v1_1074c2 = inttoptr i32 %v0_1074c1 to i8*
  %v2_1074c3 = load i8, i8* %v1_1074c2, align 1
  %v3_1074c4 = zext i8 %v2_1074c3 to i32
  store i32 %v3_1074c4, i32* @r3, align 4
  %v2_107505 = icmp eq i8 %v2_1074c3, 0
  store i1 %v2_107505, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107505, label %dec_label_pc_1075c, label %dec_label_pc_106ec

dec_label_pc_106ec:                               ; preds = %entry, %dec_label_pc_1074c.backedge
  %v0_106f0 = phi i32 [ %v0_1074c, %dec_label_pc_1074c.backedge ], [ %v0_1074c1, %entry ]
  %v0_10728 = phi i32 [ %v3_1074c, %dec_label_pc_1074c.backedge ], [ %v3_1074c4, %entry ]
  %v2_106fc.in = phi i32 [ %v3_1074c, %dec_label_pc_1074c.backedge ], [ %v3_1074c4, %entry ]
  %v2_106fc = add nsw i32 %v2_106fc.in, -48
  %v2_106ec = icmp ugt i32 %v2_106fc, 8
  %v7_106ec = icmp eq i32 %v2_106fc, 9
  store i1 %v7_106ec, i1* %cpsr_z.global-to-local, align 1
  %v1_106f0 = add i32 %v0_106f0, 1
  store i32 %v1_106f0, i32* %r0.global-to-local, align 4
  %v2_106f4 = xor i1 %v7_106ec, true
  %v3_106f4 = and i1 %v2_106ec, %v2_106f4
  br i1 %v3_106f4, label %dec_label_pc_10728, label %dec_label_pc_106f8

dec_label_pc_106f8:                               ; preds = %dec_label_pc_106ec
  %v0_106f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_106f8 = inttoptr i32 %v0_106f8 to i8*
  %v2_106f8 = load i8, i8* %v1_106f8, align 1
  %v3_106f8 = zext i8 %v2_106f8 to i32
  %v0_106fc = load i32, i32* %r7.global-to-local, align 4
  %v3_106fc = mul i32 %v0_106fc, %v3_106f8
  %v4_106fc = add i32 %v3_106fc, %v2_106fc
  store i32 %v4_106fc, i32* @r3, align 4
  %v2_10700 = icmp ugt i32 %v4_106fc, 254
  %v7_10700 = icmp eq i32 %v4_106fc, 255
  store i1 %v7_10700, i1* %cpsr_z.global-to-local, align 1
  %v2_10704 = xor i1 %v7_10700, true
  %v3_10704 = and i1 %v2_10700, %v2_10704
  br i1 %v3_10704, label %dec_label_pc_10780, label %dec_label_pc_10708

dec_label_pc_10708:                               ; preds = %dec_label_pc_106f8
  %v0_10708 = load i32, i32* @lr, align 4
  %v2_10708 = icmp eq i32 %v0_10708, 0
  store i1 %v2_10708, i1* %cpsr_z.global-to-local, align 1
  %v1_1070c = trunc i32 %v4_106fc to i8
  store i8 %v1_1070c, i8* %v1_106f8, align 1
  %v0_10710 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10710, label %dec_label_pc_10714, label %dec_label_pc_1074c.backedge

dec_label_pc_10714:                               ; preds = %dec_label_pc_10708
  %v0_10714 = load i32, i32* @ip, align 4
  %v1_10714 = add i32 %v0_10714, 1
  store i32 %v1_10714, i32* @ip, align 4
  %v7_10718 = icmp eq i32 %v1_10714, 4
  store i1 %v7_10718, i1* %cpsr_z.global-to-local, align 1
  %v0_1071c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1071c, i32* @lr, align 4
  %v8_10720 = icmp sgt i32 %v1_10714, 4
  br i1 %v8_10720, label %dec_label_pc_10780, label %dec_label_pc_1074c.backedge

dec_label_pc_10728:                               ; preds = %dec_label_pc_106ec
  %v7_10728 = icmp eq i32 %v0_10728, 46
  %v1_10730 = load i32, i32* @lr, align 4
  %v2_10730 = urem i32 %v1_10730, 2
  %storemerge12 = select i1 %v7_10728, i32 %v2_10730, i32 0
  store i32 %storemerge12, i32* @r3, align 4
  %v2_10734 = icmp eq i32 %storemerge12, 0
  store i1 %v2_10734, i1* %cpsr_z.global-to-local, align 1
  %v0_10738 = load i32, i32* @r5, align 4
  store i32 %v0_10738, i32* @lr, align 4
  br i1 %v2_10734, label %dec_label_pc_10780, label %dec_label_pc_10740

dec_label_pc_10740:                               ; preds = %dec_label_pc_10728
  %v0_10740 = load i32, i32* @ip, align 4
  %v7_10740 = icmp eq i32 %v0_10740, 4
  store i1 %v7_10740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10740, label %dec_label_pc_10780, label %dec_label_pc_10748

dec_label_pc_10748:                               ; preds = %dec_label_pc_10740
  %v1_10748 = trunc i32 %v0_10738 to i8
  %v2_10748 = load i32, i32* %r1.global-to-local, align 4
  %v3_10748 = add i32 %v2_10748, 1
  %v4_10748 = inttoptr i32 %v3_10748 to i8*
  store i8 %v1_10748, i8* %v4_10748, align 1
  %v5_10748 = load i32, i32* %r1.global-to-local, align 4
  %v6_10748 = add i32 %v5_10748, 1
  store i32 %v6_10748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1074c.backedge

dec_label_pc_1074c.backedge:                      ; preds = %dec_label_pc_10748, %dec_label_pc_10708, %dec_label_pc_10714
  %v0_1074c = load i32, i32* %r0.global-to-local, align 4
  %v1_1074c = inttoptr i32 %v0_1074c to i8*
  %v2_1074c = load i8, i8* %v1_1074c, align 1
  %v3_1074c = zext i8 %v2_1074c to i32
  store i32 %v3_1074c, i32* @r3, align 4
  %v2_10750 = icmp eq i8 %v2_1074c, 0
  store i1 %v2_10750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10750, label %dec_label_pc_1074c.dec_label_pc_1075c_crit_edge, label %dec_label_pc_106ec

dec_label_pc_1074c.dec_label_pc_1075c_crit_edge:  ; preds = %dec_label_pc_1074c.backedge
  %v0_1075c.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_1075c

dec_label_pc_1075c:                               ; preds = %dec_label_pc_1074c.dec_label_pc_1075c_crit_edge, %entry
  %v0_1075c = phi i32 [ %v0_1075c.pre, %dec_label_pc_1074c.dec_label_pc_1075c_crit_edge ], [ 0, %entry ]
  %v7_1075c = icmp eq i32 %v0_1075c, 3
  store i1 %v7_1075c, i1* %cpsr_z.global-to-local, align 1
  %v7_10760 = icmp slt i32 %v0_1075c, 4
  br i1 %v7_10760, label %dec_label_pc_10780, label %dec_label_pc_10764

dec_label_pc_10764:                               ; preds = %dec_label_pc_1075c
  %v0_10764 = load i32, i32* @r4, align 4
  store i32 %v0_10764, i32* @r0, align 4
  store i32 %v2_106d4, i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_10770 = call i32 @memcpy()
  br label %dec_label_pc_10780

dec_label_pc_10780:                               ; preds = %dec_label_pc_106f8, %dec_label_pc_10714, %dec_label_pc_10728, %dec_label_pc_10740, %dec_label_pc_1075c, %dec_label_pc_10764
  %storemerge = phi i32 [ 1, %dec_label_pc_10764 ], [ 0, %dec_label_pc_1075c ], [ 0, %dec_label_pc_10740 ], [ 0, %dec_label_pc_10728 ], [ 0, %dec_label_pc_10714 ], [ 0, %dec_label_pc_106f8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v3_106bc, i32* @r4, align 4
  store i32 %v6_106bc, i32* @r5, align 4
  store i32 %v15_106bc, i32* @lr, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_1075c, { 1, 0 }
  uselistorder i32 %v3_1074c, { 2, 1, 0 }
  uselistorder i32 %v0_1074c, { 1, 0 }
  uselistorder i32 %storemerge12, { 1, 0 }
  uselistorder i32 %v2_106fc, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder label %dec_label_pc_10780, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1074c.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_106ec, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v3_1078c = load i32, i32* @r4, align 4
  %v6_1078c = load i32, i32* @r5, align 4
  %v9_1078c = load i32, i32* @r6, align 4
  %v12_1078c = load i32, i32* @r7, align 4
  %v27_1078c = load i32, i32* @lr, align 4
  %v7_10798 = icmp eq i32 %arg1, 2
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  br i1 %v7_10798, label %dec_label_pc_107b8, label %dec_label_pc_107ac

dec_label_pc_107ac:                               ; preds = %entry
  %v7_107ac = icmp eq i32 %arg1, 10
  br i1 %v7_107ac, label %dec_label_pc_107c8, label %dec_label_pc_10980

dec_label_pc_107b8:                               ; preds = %entry
  store i32 %tmp, i32* @r0, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_107c0 = call i32 @inet_pton4(i32 %tmp, i32 %arg3)
  br label %dec_label_pc_10990

dec_label_pc_107c8:                               ; preds = %dec_label_pc_107ac
  %v2_107c8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 16, i32* @r2, align 4
  %v2_107d4 = bitcast i32* %stack_var_-56 to i8*
  %v3_107d4 = call i32 @__GI_memset(i8* %v2_107d4, i32 0)
  %v0_107d8 = load i32, i32* @r5, align 4
  %v1_107d8 = inttoptr i32 %v0_107d8 to i8*
  %v2_107d8 = load i8, i8* %v1_107d8, align 1
  %v3_107d8 = zext i8 %v2_107d8 to i32
  store i32 %v3_107d8, i32* %r3.global-to-local, align 4
  %v7_107dc = icmp eq i8 %v2_107d8, 58
  store i32 %v3_107d4, i32* @r6, align 4
  %v2_107e4 = add i32 %v3_107d4, 16
  store i32 %v2_107e4, i32* %r8.global-to-local, align 4
  br i1 %v7_107dc, label %dec_label_pc_107ec, label %dec_label_pc_107f8

dec_label_pc_107ec:                               ; preds = %dec_label_pc_107c8
  %v1_107ec = add i32 %v0_107d8, 1
  %v2_107ec = inttoptr i32 %v1_107ec to i8*
  %v3_107ec = load i8, i8* %v2_107ec, align 1
  %v4_107ec = zext i8 %v3_107ec to i32
  store i32 %v4_107ec, i32* %r3.global-to-local, align 4
  store i32 %v1_107ec, i32* @r5, align 4
  %v7_107f0 = icmp eq i8 %v3_107ec, 58
  br i1 %v7_107f0, label %dec_label_pc_107f8, label %dec_label_pc_10978

dec_label_pc_107f8:                               ; preds = %dec_label_pc_107ec, %dec_label_pc_107c8
  %v0_10804 = phi i32 [ %v1_107ec, %dec_label_pc_107ec ], [ %v0_107d8, %dec_label_pc_107c8 ]
  store i32 -37276, i32* @r3, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v0_10800 = load i32, i32* @r4, align 4
  %v2_10800 = add i32 %v0_10800, -37276
  store i32 %v0_10804, i32* %sl.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v2_10800, i32* %stack_var_-64, align 4
  %v1_108dc3 = inttoptr i32 %v0_10804 to i8*
  %v2_108dc4 = load i8, i8* %v1_108dc3, align 1
  %v3_108dc5 = zext i8 %v2_108dc4 to i32
  store i32 %v3_108dc5, i32* @r4, align 4
  %v2_108e06 = icmp eq i8 %v2_108dc4, 0
  br i1 %v2_108e06, label %dec_label_pc_108e8.thread, label %dec_label_pc_10818

dec_label_pc_108e8.thread:                        ; preds = %dec_label_pc_107f8
  store i32 %v3_107d4, i32* @r4, align 4
  br label %dec_label_pc_10914

dec_label_pc_10818:                               ; preds = %dec_label_pc_107f8, %dec_label_pc_108dc.backedge.dec_label_pc_10818_crit_edge
  %v0_1081c = phi i32 [ %v3_108dc, %dec_label_pc_108dc.backedge.dec_label_pc_10818_crit_edge ], [ %v3_108dc5, %dec_label_pc_107f8 ]
  %v2_10818 = phi i32 [ %v2_10818.pre, %dec_label_pc_108dc.backedge.dec_label_pc_10818_crit_edge ], [ %v2_10800, %dec_label_pc_107f8 ]
  store i32 %v2_10818, i32* @r0, align 4
  %v1_1081c = or i32 %v0_1081c, 32
  store i32 %v1_1081c, i32* %r1.global-to-local, align 4
  %v2_10820 = call i32 @__GI_strchr(i32 %v2_10818, i32 %v1_1081c)
  %v2_10824 = icmp eq i32 %v2_10820, 0
  %v0_10828 = load i32, i32* @r5, align 4
  %v1_10828 = add i32 %v0_10828, 1
  store i32 %v1_10828, i32* @r5, align 4
  br i1 %v2_10824, label %dec_label_pc_1084c, label %dec_label_pc_10830

dec_label_pc_10830:                               ; preds = %dec_label_pc_10818
  %v2_10830 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_10830, i32* %r2.global-to-local, align 4
  %v2_10834 = sub i32 %v2_10820, %v2_10830
  %v1_10838 = load i32, i32* @r7, align 4
  %v4_10838 = mul i32 %v1_10838, 16
  %v5_10838 = or i32 %v4_10838, %v2_10834
  store i32 %v5_10838, i32* @r7, align 4
  store i32 65535, i32* @r3, align 4
  %tmp36 = icmp ult i32 %v5_10838, 65536
  br i1 %tmp36, label %dec_label_pc_108d8, label %dec_label_pc_10978

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10818
  %v0_1084c = load i32, i32* @r4, align 4
  %v7_1084c = icmp eq i32 %v0_1084c, 58
  br i1 %v7_1084c, label %dec_label_pc_10854, label %dec_label_pc_108ac

dec_label_pc_10854:                               ; preds = %dec_label_pc_1084c
  %v0_10854 = load i32, i32* %sb.global-to-local, align 4
  %v2_10854 = icmp eq i32 %v0_10854, 0
  br i1 %v2_10854, label %dec_label_pc_1085c, label %dec_label_pc_10870

dec_label_pc_1085c:                               ; preds = %dec_label_pc_10854
  %v0_1085c = load i32, i32* %fp.global-to-local, align 4
  %v2_1085c = icmp eq i32 %v0_1085c, 0
  br i1 %v2_1085c, label %dec_label_pc_10864, label %dec_label_pc_10978

dec_label_pc_10864:                               ; preds = %dec_label_pc_1085c
  %v0_10864 = load i32, i32* @r6, align 4
  store i32 %v0_10864, i32* %fp.global-to-local, align 4
  store i32 %v1_10828, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_108dc.backedge

dec_label_pc_10870:                               ; preds = %dec_label_pc_10854
  %v1_10870 = inttoptr i32 %v1_10828 to i8*
  %v2_10870 = load i8, i8* %v1_10870, align 1
  %v3_10870 = zext i8 %v2_10870 to i32
  store i32 %v3_10870, i32* %r3.global-to-local, align 4
  %v2_10874 = icmp eq i8 %v2_10870, 0
  br i1 %v2_10874, label %dec_label_pc_10978, label %dec_label_pc_1087c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10870
  %v0_1087c = load i32, i32* @r6, align 4
  %v1_1087c = add i32 %v0_1087c, 2
  store i32 %v1_1087c, i32* %r3.global-to-local, align 4
  %v1_10880 = load i32, i32* %r8.global-to-local, align 4
  %tmp37 = icmp ugt i32 %v1_1087c, %v1_10880
  br i1 %tmp37, label %dec_label_pc_10978, label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_1087c
  %v0_10888 = load i32, i32* @r7, align 4
  %v3_10888 = udiv i32 %v0_10888, 256
  store i32 %v3_10888, i32* %r2.global-to-local, align 4
  store i32 %v0_1087c, i32* %r3.global-to-local, align 4
  %v1_10890 = trunc i32 %v3_10888 to i8
  %v3_10890 = inttoptr i32 %v0_1087c to i8*
  store i8 %v1_10890, i8* %v3_10890, align 1
  %v4_10890 = load i32, i32* %r3.global-to-local, align 4
  %v5_10890 = add i32 %v4_10890, 1
  store i32 %v5_10890, i32* @r3, align 4
  %v0_10894 = load i32, i32* @r7, align 4
  %v1_10894 = trunc i32 %v0_10894 to i8
  %v2_10894 = load i32, i32* @r6, align 4
  %v3_10894 = add i32 %v2_10894, 1
  %v4_10894 = inttoptr i32 %v3_10894 to i8*
  store i8 %v1_10894, i8* %v4_10894, align 1
  store i32 0, i32* @r7, align 4
  %v0_1089c = load i32, i32* @r3, align 4
  %v1_1089c = add i32 %v0_1089c, 1
  store i32 %v1_1089c, i32* @r6, align 4
  %v0_108a0 = load i32, i32* @r5, align 4
  store i32 %v0_108a0, i32* %sl.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_108dc.backedge

dec_label_pc_108ac:                               ; preds = %dec_label_pc_1084c
  %v7_108ac = icmp eq i32 %v0_1084c, 46
  br i1 %v7_108ac, label %dec_label_pc_108b4, label %dec_label_pc_10978

dec_label_pc_108b4:                               ; preds = %dec_label_pc_108ac
  %v0_108b4 = load i32, i32* @r6, align 4
  %v1_108b4 = add i32 %v0_108b4, 4
  store i32 %v1_108b4, i32* @r4, align 4
  %v1_108b8 = load i32, i32* %r8.global-to-local, align 4
  %tmp38 = icmp ugt i32 %v1_108b4, %v1_108b8
  br i1 %tmp38, label %dec_label_pc_10978, label %dec_label_pc_108c0

dec_label_pc_108c0:                               ; preds = %dec_label_pc_108b4
  %v0_108c0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_108c0, i32* @r0, align 4
  store i32 %v0_108b4, i32* %r1.global-to-local, align 4
  %v3_108c8 = call i32 @inet_pton4(i32 %v0_108c0, i32 %v0_108b4)
  %v5_108d0 = icmp sgt i32 %v3_108c8, 0
  br i1 %v5_108d0, label %dec_label_pc_108c0.dec_label_pc_10914_crit_edge, label %dec_label_pc_10978

dec_label_pc_108c0.dec_label_pc_10914_crit_edge:  ; preds = %dec_label_pc_108c0
  %v0_10958.pre.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10914

dec_label_pc_108d8:                               ; preds = %dec_label_pc_10830
  store i32 1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_108dc.backedge

dec_label_pc_108dc.backedge:                      ; preds = %dec_label_pc_108d8, %dec_label_pc_10864, %dec_label_pc_10888
  %v0_108dc = phi i32 [ %v1_10828, %dec_label_pc_108d8 ], [ %v1_10828, %dec_label_pc_10864 ], [ %v0_108a0, %dec_label_pc_10888 ]
  %v0_108e812 = phi i32 [ 1, %dec_label_pc_108d8 ], [ 0, %dec_label_pc_10864 ], [ 0, %dec_label_pc_10888 ]
  %v1_108dc = inttoptr i32 %v0_108dc to i8*
  %v2_108dc = load i8, i8* %v1_108dc, align 1
  %v3_108dc = zext i8 %v2_108dc to i32
  store i32 %v3_108dc, i32* @r4, align 4
  %v2_108e0 = icmp eq i8 %v2_108dc, 0
  br i1 %v2_108e0, label %dec_label_pc_108e8, label %dec_label_pc_108dc.backedge.dec_label_pc_10818_crit_edge

dec_label_pc_108dc.backedge.dec_label_pc_10818_crit_edge: ; preds = %dec_label_pc_108dc.backedge
  %v2_10818.pre = load i32, i32* %stack_var_-64, align 4
  br label %dec_label_pc_10818

dec_label_pc_108e8:                               ; preds = %dec_label_pc_108dc.backedge
  %v0_108ec.pre = load i32, i32* @r6, align 4
  %v2_108e8 = icmp eq i32 %v0_108e812, 0
  store i32 %v0_108ec.pre, i32* @r4, align 4
  br i1 %v2_108e8, label %dec_label_pc_10914, label %dec_label_pc_108f4

dec_label_pc_108f4:                               ; preds = %dec_label_pc_108e8
  %v1_108f4 = add i32 %v0_108ec.pre, 2
  store i32 %v1_108f4, i32* %r3.global-to-local, align 4
  %v1_108f8 = load i32, i32* %r8.global-to-local, align 4
  %tmp39 = icmp ugt i32 %v1_108f4, %v1_108f8
  br i1 %tmp39, label %dec_label_pc_10978, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108f4
  store i32 %v0_108ec.pre, i32* %r3.global-to-local, align 4
  %v0_10904 = load i32, i32* @r7, align 4
  %v3_10904 = udiv i32 %v0_10904, 256
  store i32 %v3_10904, i32* %r2.global-to-local, align 4
  %v1_10908 = trunc i32 %v3_10904 to i8
  %v3_10908 = inttoptr i32 %v0_108ec.pre to i8*
  store i8 %v1_10908, i8* %v3_10908, align 1
  %v4_10908 = load i32, i32* %r3.global-to-local, align 4
  %v5_10908 = add i32 %v4_10908, 1
  store i32 %v5_10908, i32* @r3, align 4
  %v0_1090c = load i32, i32* @r7, align 4
  %v1_1090c = trunc i32 %v0_1090c to i8
  %v2_1090c = load i32, i32* @r6, align 4
  %v3_1090c = add i32 %v2_1090c, 1
  %v4_1090c = inttoptr i32 %v3_1090c to i8*
  store i8 %v1_1090c, i8* %v4_1090c, align 1
  %v0_10910 = load i32, i32* @r3, align 4
  %v1_10910 = add i32 %v0_10910, 1
  store i32 %v1_10910, i32* @r4, align 4
  br label %dec_label_pc_10914

dec_label_pc_10914:                               ; preds = %dec_label_pc_108c0.dec_label_pc_10914_crit_edge, %dec_label_pc_108e8.thread, %dec_label_pc_108e8, %dec_label_pc_10900
  %v0_10958.pre = phi i32 [ %v0_10958.pre.pre, %dec_label_pc_108c0.dec_label_pc_10914_crit_edge ], [ %v3_107d4, %dec_label_pc_108e8.thread ], [ %v0_108ec.pre, %dec_label_pc_108e8 ], [ %v1_10910, %dec_label_pc_10900 ]
  %v0_10914 = load i32, i32* %fp.global-to-local, align 4
  %v2_10914 = icmp eq i32 %v0_10914, 0
  %v1_10958.pre = load i32, i32* %r8.global-to-local, align 4
  br i1 %v2_10914, label %dec_label_pc_10958, label %dec_label_pc_1091c

dec_label_pc_1091c:                               ; preds = %dec_label_pc_10914
  %v9_1091c = icmp eq i32 %v0_10958.pre, %v1_10958.pre
  %v2_10920 = sub i32 %v0_10958.pre, %v0_10914
  store i32 %v2_10920, i32* @ip, align 4
  br i1 %v9_1091c, label %dec_label_pc_10978, label %dec_label_pc_10940.preheader

dec_label_pc_10940.preheader:                     ; preds = %dec_label_pc_1091c
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  br label %dec_label_pc_10940

dec_label_pc_10934:                               ; preds = %dec_label_pc_10940
  %v2_10948 = sub i32 %v0_10954, %v0_1094c
  %v0_10934 = load i32, i32* %fp.global-to-local, align 4
  %v2_10934 = add i32 %v0_10934, %v2_10944
  %v3_10934 = inttoptr i32 %v2_10934 to i8*
  %v4_10934 = load i8, i8* %v3_10934, align 1
  %v6_10934 = zext i8 %v4_10934 to i32
  store i32 %v6_10934, i32* @r3, align 4
  %v3_10938 = inttoptr i32 %v2_10948 to i8*
  store i8 %v4_10934, i8* %v3_10938, align 1
  %v0_1093c = load i32, i32* @lr, align 4
  %v1_1093c = trunc i32 %v0_1093c to i8
  %v2_1093c = load i32, i32* %fp.global-to-local, align 4
  %v3_1093c = load i32, i32* %r1.global-to-local, align 4
  %v4_1093c = add i32 %v3_1093c, %v2_1093c
  %v5_1093c = inttoptr i32 %v4_1093c to i8*
  store i8 %v1_1093c, i8* %v5_1093c, align 1
  %v0_10940.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10940.pre = load i32, i32* @ip, align 4
  %v1_10948.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10940

dec_label_pc_10940:                               ; preds = %dec_label_pc_10940.preheader, %dec_label_pc_10934
  %v0_10954 = phi i32 [ %v1_10958.pre, %dec_label_pc_10940.preheader ], [ %v1_10948.pre, %dec_label_pc_10934 ]
  %v1_10944 = phi i32 [ %v2_10920, %dec_label_pc_10940.preheader ], [ %v1_10940.pre, %dec_label_pc_10934 ]
  %v0_1094c = phi i32 [ 1, %dec_label_pc_10940.preheader ], [ %v0_10940.pre, %dec_label_pc_10934 ]
  %v2_10940 = sub i32 %v0_1094c, %v1_10944
  %v4_10940 = xor i32 %v0_1094c, %v1_10944
  %v5_10940 = xor i32 %v2_10940, %v0_1094c
  %v6_10940 = and i32 %v5_10940, %v4_10940
  %v7_10940 = icmp slt i32 %v6_10940, 0
  %v8_10940 = icmp slt i32 %v2_10940, 0
  %v9_10940 = icmp eq i32 %v0_1094c, %v1_10944
  %v2_10944 = sub i32 %v1_10944, %v0_1094c
  store i32 %v2_10944, i32* %r1.global-to-local, align 4
  %v1_1094c = add i32 %v0_1094c, 1
  store i32 %v1_1094c, i32* %r2.global-to-local, align 4
  %v3_10950 = xor i1 %v8_10940, %v7_10940
  %v4_10950 = or i1 %v9_10940, %v3_10950
  br i1 %v4_10950, label %dec_label_pc_10934, label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %dec_label_pc_10940
  store i32 %v0_10954, i32* @r4, align 4
  br label %dec_label_pc_10958

dec_label_pc_10958:                               ; preds = %dec_label_pc_10914, %dec_label_pc_10954
  %v0_10958 = phi i32 [ %v0_10954, %dec_label_pc_10954 ], [ %v0_10958.pre, %dec_label_pc_10914 ]
  %v1_10958 = phi i32 [ %v0_10954, %dec_label_pc_10954 ], [ %v1_10958.pre, %dec_label_pc_10914 ]
  %v9_10958 = icmp eq i32 %v0_10958, %v1_10958
  br i1 %v9_10958, label %dec_label_pc_10960, label %dec_label_pc_10978

dec_label_pc_10960:                               ; preds = %dec_label_pc_10958
  store i32 %arg3, i32* @r0, align 4
  store i32 %v2_107c8, i32* @r1, align 4
  store i32 16, i32* @r2, align 4
  %v0_1096c = call i32 @memcpy()
  br label %dec_label_pc_10990

dec_label_pc_10978:                               ; preds = %dec_label_pc_10830, %dec_label_pc_1085c, %dec_label_pc_1087c, %dec_label_pc_10870, %dec_label_pc_1091c, %dec_label_pc_108c0, %dec_label_pc_108ac, %dec_label_pc_10958, %dec_label_pc_107ec, %dec_label_pc_108f4, %dec_label_pc_108b4
  br label %dec_label_pc_10990

dec_label_pc_10980:                               ; preds = %dec_label_pc_107ac
  %v0_10980 = call i32 @__GI___errno_location()
  store i32 97, i32* %r3.global-to-local, align 4
  %v2_10988 = inttoptr i32 %v0_10980 to i32*
  store i32 97, i32* %v2_10988, align 4
  br label %dec_label_pc_10990

dec_label_pc_10990:                               ; preds = %dec_label_pc_10978, %dec_label_pc_10960, %dec_label_pc_107b8, %dec_label_pc_10980
  %v1_10998 = phi i32 [ 0, %dec_label_pc_10978 ], [ 1, %dec_label_pc_10960 ], [ %v3_107c0, %dec_label_pc_107b8 ], [ -1, %dec_label_pc_10980 ]
  store i32 %v3_1078c, i32* @r4, align 4
  store i32 %v6_1078c, i32* @r5, align 4
  store i32 %v9_1078c, i32* @r6, align 4
  store i32 %v12_1078c, i32* @r7, align 4
  store i32 %v27_1078c, i32* @lr, align 4
  ret i32 %v1_10998

; uselistorder directives
  uselistorder i32 %v2_10944, { 1, 0 }
  uselistorder i32 %v2_10940, { 1, 0 }
  uselistorder i32 %v0_1094c, { 2, 3, 6, 0, 1, 5, 4 }
  uselistorder i32 %v1_10944, { 1, 3, 0, 2 }
  uselistorder i32 %v0_10954, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10958.pre, { 0, 2, 1 }
  uselistorder i32 %v0_10958.pre, { 2, 0, 1 }
  uselistorder i32 %v3_10904, { 1, 0 }
  uselistorder i32 %v0_108ec.pre, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v3_108dc, { 1, 0 }
  uselistorder i32 %v0_108b4, { 1, 0, 2 }
  uselistorder i32 %v3_10888, { 1, 0 }
  uselistorder i32 %v0_1087c, { 1, 0, 2 }
  uselistorder i32 %v1_10828, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_10818, { 1, 0 }
  uselistorder i32 %v0_10804, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 (i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_10990, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10978, { 7, 4, 9, 5, 10, 6, 2, 3, 1, 0, 8 }
  uselistorder label %dec_label_pc_10958, { 1, 0 }
  uselistorder label %dec_label_pc_10940, { 1, 0 }
  uselistorder label %dec_label_pc_10914, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_108dc.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10818, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-57 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 %arg3, i32* %stack_var_-72, align 4
  store i32 0, i32* %stack_var_-57, align 4
  %v2_10a80 = ptrtoint i32* %stack_var_-40 to i32
  %v2_10a60 = add i32 %v2_10a80, -17
  br label %dec_label_pc_10a80

dec_label_pc_109d0:                               ; preds = %dec_label_pc_10a80
  %v0_109d0 = load i32, i32* %fp.global-to-local, align 4
  %v2_109d0 = add i32 %v0_109d0, %v1_109d0
  %v3_109d0 = inttoptr i32 %v2_109d0 to i8*
  %v4_109d0 = load i8, i8* %v3_109d0, align 1
  %v6_109d0 = zext i8 %v4_109d0 to i32
  store i32 %v6_109d0, i32* %r4.global-to-local, align 4
  %div4 = udiv i8 %v4_109d0, 100
  %v2_109d8 = zext i8 %div4 to i32
  store i32 %v2_109d8, i32* %r0.global-to-local, align 4
  %v1_109dc = or i8 %div4, 48
  %v3_109e0 = add i32 %v2_10a90, -17
  %v4_109e0 = inttoptr i32 %v3_109e0 to i8*
  store i8 %v1_109dc, i8* %v4_109e0, align 1
  %v0_109e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_109e4 = add i32 %v0_109e4, -17
  %v2_109e4 = inttoptr i32 %v1_109e4 to i8*
  %v3_109e4 = load i8, i8* %v2_109e4, align 1
  %v0_109e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_109e8 = add i32 %v0_109e8, 1
  store i32 %v1_109e8, i32* %r6.global-to-local, align 4
  store i32 %v2_10a80, i32* %r2.global-to-local, align 4
  %v7_109f0 = icmp eq i8 %v3_109e4, 48
  %v0_109f8 = load i32, i32* %r4.global-to-local, align 4
  %v0_10a00 = load i32, i32* %fp.global-to-local, align 4
  %v1_10a00 = load i32, i32* %sl.global-to-local, align 4
  %v2_10a00 = add i32 %v1_10a00, %v0_10a00
  store i32 %v2_10a00, i32* %sb.global-to-local, align 4
  %v2_10a08 = udiv i32 %v0_109f8, 10
  %v1_10a10 = urem i32 %v2_10a08, 256
  %v2_10a14 = udiv i32 %v1_10a10, 10
  %v3_10a14 = urem i32 %v1_10a10, 10
  store i32 %v2_10a14, i32* %r0.global-to-local, align 4
  %v1_10a18 = or i32 %v3_10a14, 48
  br i1 %v7_109f0, label %dec_label_pc_10a08, label %dec_label_pc_10a30

dec_label_pc_10a08:                               ; preds = %dec_label_pc_109d0
  %v7_10a20 = icmp eq i32 %v1_10a18, 48
  br i1 %v7_10a20, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_10a08
  store i32 %v1_109e8, i32* %r7.global-to-local, align 4
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_10a08, %bb
  %v1_10a28 = trunc i32 %v1_10a18 to i8
  store i8 %v1_10a28, i8* %v2_109e4, align 1
  %v0_10a5c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a4c

dec_label_pc_10a30:                               ; preds = %dec_label_pc_109d0
  %v2_109fc = add i32 %v1_109e8, %v2_10a80
  %v1_10a44 = trunc i32 %v1_10a18 to i8
  %v3_10a44 = add i32 %v2_109fc, -17
  %v4_10a44 = inttoptr i32 %v3_10a44 to i8*
  store i8 %v1_10a44, i8* %v4_10a44, align 1
  %v0_10a48 = load i32, i32* %r6.global-to-local, align 4
  %v1_10a48 = add i32 %v0_10a48, 1
  store i32 %v1_10a48, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a4c

dec_label_pc_10a4c:                               ; preds = %bb18, %dec_label_pc_10a30
  %v0_10a5c = phi i32 [ %v0_10a5c.pre, %bb18 ], [ %v1_10a48, %dec_label_pc_10a30 ]
  %v0_10a4c = load i32, i32* %sb.global-to-local, align 4
  %v1_10a4c = inttoptr i32 %v0_10a4c to i8*
  %v2_10a4c = load i8, i8* %v1_10a4c, align 1
  %tmp19 = urem i8 %v2_10a4c, 10
  store i32 %v2_10a80, i32* %ip.global-to-local, align 4
  %v1_10a5c = add i32 %v0_10a5c, 1
  store i32 %v1_10a5c, i32* %r0.global-to-local, align 4
  %v1_10a64 = or i8 %tmp19, 48
  %v3_10a68 = add i32 %v2_10a60, %v0_10a5c
  %v4_10a68 = inttoptr i32 %v3_10a68 to i8*
  store i8 %v1_10a64, i8* %v4_10a68, align 1
  %v0_10a6c = load i32, i32* %ip.global-to-local, align 4
  %v1_10a6c = load i32, i32* %r0.global-to-local, align 4
  %v2_10a6c = add i32 %v1_10a6c, %v0_10a6c
  store i32 %v2_10a6c, i32* %r2.global-to-local, align 4
  %v3_10a74 = add i32 %v2_10a6c, -17
  %v4_10a74 = inttoptr i32 %v3_10a74 to i8*
  store i8 46, i8* %v4_10a74, align 1
  %v0_10a78 = load i32, i32* %r0.global-to-local, align 4
  %v1_10a78 = add i32 %v0_10a78, 1
  store i32 %v1_10a78, i32* %r6.global-to-local, align 4
  %v0_10a7c = load i32, i32* %sl.global-to-local, align 4
  %v1_10a7c = add i32 %v0_10a7c, 1
  store i32 %v1_10a7c, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10a80

dec_label_pc_10a80:                               ; preds = %entry, %dec_label_pc_10a4c
  %v0_10a8c = phi i32 [ 0, %entry ], [ %v1_10a78, %dec_label_pc_10a4c ]
  %v1_109d0 = phi i32 [ 0, %entry ], [ %v1_10a7c, %dec_label_pc_10a4c ]
  store i32 %v2_10a80, i32* %ip.global-to-local, align 4
  store i32 %v0_10a8c, i32* %r7.global-to-local, align 4
  %v2_10a90 = add i32 %v0_10a8c, %v2_10a80
  store i32 %v2_10a90, i32* %r5.global-to-local, align 4
  %v7_10a94 = icmp sgt i32 %v1_109d0, 3
  br i1 %v7_10a94, label %dec_label_pc_10a98, label %dec_label_pc_109d0

dec_label_pc_10a98:                               ; preds = %dec_label_pc_10a80
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_10a9c = ptrtoint i32* %stack_var_-57 to i32
  store i32 %v2_10a9c, i32* %r4.global-to-local, align 4
  %v3_10aa0 = add i32 %v2_10a90, -18
  %v4_10aa0 = inttoptr i32 %v3_10aa0 to i8*
  store i8 0, i8* %v4_10aa0, align 1
  %tmp20 = bitcast i32* %stack_var_-57 to i8*
  store i32 %v2_10a9c, i32* %r0.global-to-local, align 4
  %v3_10aa8 = call i32 @strlen(i8* %tmp20)
  store i32 %v3_10aa8, i32* %r0.global-to-local, align 4
  %v2_10aac = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_10aac, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v3_10aa8, %v2_10aac
  br i1 %tmp, label %dec_label_pc_10ab8, label %dec_label_pc_10acc

dec_label_pc_10ab8:                               ; preds = %dec_label_pc_10a98
  %v0_10ab8 = call i32 @__GI___errno_location()
  store i32 %v0_10ab8, i32* %r0.global-to-local, align 4
  %v0_10ac0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10ac0, i32* %r2.global-to-local, align 4
  %v2_10ac4 = inttoptr i32 %v0_10ab8 to i32*
  store i32 28, i32* %v2_10ac4, align 4
  %v0_10adc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10adc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10a98
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_10a9c, i32* @r1, align 4
  %v2_10ad4 = inttoptr i32 %arg2 to i8*
  %v3_10ad4 = call i32 @strcpy(i8* %v2_10ad4, i32 %v2_10a9c)
  store i32 %v3_10ad4, i32* %r0.global-to-local, align 4
  store i32 %v3_10ad4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10ab8, %dec_label_pc_10acc
  %v0_10adc = phi i32 [ %v0_10adc.pre, %dec_label_pc_10ab8 ], [ %v3_10ad4, %dec_label_pc_10acc ]
  store i32 %v0_10adc, i32* %r0.global-to-local, align 4
  ret i32 %v0_10adc

; uselistorder directives
  uselistorder i32 %v0_10adc, { 1, 0 }
  uselistorder i32 %v2_10a9c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10a90, { 0, 2, 1 }
  uselistorder i32 %v1_109d0, { 1, 0 }
  uselistorder i32 %v1_10a18, { 1, 0, 2 }
  uselistorder i32 %v2_10a80, { 0, 5, 3, 2, 4, 1 }
  uselistorder i32* %stack_var_-57, { 0, 2, 1 }
  uselistorder i32* %r7.global-to-local, { 3, 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 6, 11, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1 }
  uselistorder i32 -17, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10adc, { 1, 0 }
  uselistorder label %dec_label_pc_10a80, { 1, 0 }
  uselistorder label %dec_label_pc_10a4c, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-118 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %v6_10aec = load i32, i32* @r5, align 4
  %v7_10af8 = icmp eq i32 %arg1, 2
  store i1 %v7_10af8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg4, i32* %stack_var_-128, align 4
  br i1 %v7_10af8, label %dec_label_pc_10b1c, label %dec_label_pc_10b10

dec_label_pc_10b10:                               ; preds = %entry
  %v7_10b10 = icmp eq i32 %arg1, 10
  store i1 %v7_10b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b10, label %dec_label_pc_10b30, label %dec_label_pc_10d44

dec_label_pc_10b1c:                               ; preds = %entry
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r2.global-to-local, align 4
  %v3_10b28 = call i32 @inet_ntop4(i32 %arg2, i32 %arg3, i32 %arg4)
  br label %dec_label_pc_10d3c

dec_label_pc_10b30:                               ; preds = %dec_label_pc_10b10
  %v2_10b30 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_10b30, i32* %r0.global-to-local, align 4
  store i32 32, i32* @r2, align 4
  %v2_10b3c = bitcast i32* %stack_var_-72 to i8*
  %v3_10b3c = call i32 @__GI_memset(i8* %v2_10b3c, i32 0)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_10b60 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_10b44

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10b44.dec_label_pc_10b44_crit_edge, %dec_label_pc_10b30
  %v0_10b5c = phi i32 [ %v0_10b44.pre, %dec_label_pc_10b44.dec_label_pc_10b44_crit_edge ], [ 0, %dec_label_pc_10b30 ]
  %v1_10b44 = load i32, i32* @r8, align 4
  %v2_10b44 = add i32 %v1_10b44, %v0_10b5c
  %v3_10b48 = inttoptr i32 %v2_10b44 to i8*
  %v4_10b48 = load i8, i8* %v3_10b48, align 1
  %v6_10b48 = zext i8 %v4_10b48 to i32
  %v1_10b4c = add i32 %v2_10b44, 1
  %v2_10b4c = inttoptr i32 %v1_10b4c to i8*
  %v3_10b4c = load i8, i8* %v2_10b4c, align 1
  %v4_10b4c = zext i8 %v3_10b4c to i32
  %tmp74 = icmp slt i32 %v0_10b5c, 0
  %v4_10b50 = zext i1 %tmp74 to i32
  %v5_10b50 = add i32 %v4_10b50, %v0_10b5c
  %v4_10b54 = mul nuw nsw i32 %v6_10b48, 256
  %v5_10b54 = or i32 %v4_10b4c, %v4_10b54
  store i32 %v5_10b54, i32* %r2.global-to-local, align 4
  %v3_10b58 = sdiv i32 %v5_10b50, 2
  %v1_10b5c = add i32 %v0_10b5c, 2
  store i32 %v1_10b5c, i32* %r0.global-to-local, align 4
  %v4_10b64 = mul i32 %v3_10b58, 4
  %v5_10b64 = add i32 %v4_10b64, %v2_10b60
  %v7_10b68 = icmp eq i32 %v1_10b5c, 15
  store i1 %v7_10b68, i1* %cpsr_z.global-to-local, align 1
  %v2_10b6c = add i32 %v5_10b64, -32
  %v3_10b6c = inttoptr i32 %v2_10b6c to i32*
  store i32 %v5_10b54, i32* %v3_10b6c, align 4
  %v7_10b70 = icmp sgt i32 %v1_10b5c, 15
  br i1 %v7_10b70, label %dec_label_pc_10b74, label %dec_label_pc_10b44.dec_label_pc_10b44_crit_edge

dec_label_pc_10b44.dec_label_pc_10b44_crit_edge:  ; preds = %dec_label_pc_10b44
  %v0_10b44.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10b44

dec_label_pc_10b74:                               ; preds = %dec_label_pc_10b44
  store i32 -1, i32* @r6, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10b8c

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b74, %dec_label_pc_10bd8
  %v0_10bcc = phi i32 [ -1, %dec_label_pc_10b74 ], [ %v0_10c00, %dec_label_pc_10bd8 ]
  %v0_10bbc = phi i32 [ -1, %dec_label_pc_10b74 ], [ %v0_10bec, %dec_label_pc_10bd8 ]
  %v0_10ba0 = phi i32 [ -1, %dec_label_pc_10b74 ], [ %v0_10ba07, %dec_label_pc_10bd8 ]
  %v0_10bd8 = phi i32 [ 0, %dec_label_pc_10b74 ], [ %v1_10bd8, %dec_label_pc_10bd8 ]
  %v4_10b90 = mul nuw nsw i32 %v0_10bd8, 4
  %v5_10b90 = add i32 %v4_10b90, %v2_10b60
  %v1_10b94 = add i32 %v5_10b90, -32
  %v2_10b94 = inttoptr i32 %v1_10b94 to i32*
  %v3_10b94 = load i32, i32* %v2_10b94, align 4
  %v2_10b98 = icmp eq i32 %v3_10b94, 0
  %v7_10ba0 = icmp eq i32 %v0_10ba0, -1
  br i1 %v2_10b98, label %dec_label_pc_10ba0, label %dec_label_pc_10bb4

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10b8c
  br i1 %v7_10ba0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_10ba0
  store i32 %v0_10bd8, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r4, align 4
  br label %dec_label_pc_10bd8

.thread:                                          ; preds = %dec_label_pc_10ba0
  %v1_10bac.pre = load i32, i32* @r4, align 4
  %v2_10bac = add i32 %v1_10bac.pre, 1
  store i32 %v2_10bac, i32* @r4, align 4
  br label %dec_label_pc_10bd8

dec_label_pc_10bb4:                               ; preds = %dec_label_pc_10b8c
  br i1 %v7_10ba0, label %dec_label_pc_10bd8, label %dec_label_pc_10bbc

dec_label_pc_10bbc:                               ; preds = %dec_label_pc_10bb4
  %v7_10bbc = icmp eq i32 %v0_10bbc, -1
  %v0_10bd0.pre = load i32, i32* @r4, align 4
  %v1_10bc4 = load i32, i32* @r7, align 4
  %v7_10bc8 = icmp sgt i32 %v0_10bd0.pre, %v1_10bc4
  %or.cond = or i1 %v7_10bbc, %v7_10bc8
  br i1 %or.cond, label %dec_label_pc_10bcc, label %dec_label_pc_10bd4

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10bbc
  store i32 %v0_10bcc, i32* @r6, align 4
  store i32 %v0_10bd0.pre, i32* @r7, align 4
  br label %dec_label_pc_10bd4

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10bbc, %dec_label_pc_10bcc
  %v0_10bbc12 = phi i32 [ %v0_10bcc, %dec_label_pc_10bcc ], [ %v0_10bbc, %dec_label_pc_10bbc ]
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10bd8

dec_label_pc_10bd8:                               ; preds = %bb, %.thread, %dec_label_pc_10bb4, %dec_label_pc_10bd4
  %v0_10c00 = phi i32 [ %v0_10bcc, %.thread ], [ %v0_10bd8, %bb ], [ %v0_10bcc, %dec_label_pc_10bb4 ], [ -1, %dec_label_pc_10bd4 ]
  %v0_10ba07 = phi i32 [ %v0_10ba0, %.thread ], [ %v0_10bd8, %bb ], [ -1, %dec_label_pc_10bb4 ], [ -1, %dec_label_pc_10bd4 ]
  %v0_10bec = phi i32 [ %v0_10bbc, %.thread ], [ %v0_10bbc, %bb ], [ %v0_10bbc, %dec_label_pc_10bb4 ], [ %v0_10bbc12, %dec_label_pc_10bd4 ]
  %v1_10bd8 = add nuw nsw i32 %v0_10bd8, 1
  %v7_10be0 = icmp slt i32 %v1_10bd8, 8
  br i1 %v7_10be0, label %dec_label_pc_10b8c, label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10bd8
  %v7_10be4 = icmp eq i32 %v0_10c00, -1
  store i1 %v7_10be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10be4, label %dec_label_pc_10be4.dec_label_pc_10c04_crit_edge, label %dec_label_pc_10bec

dec_label_pc_10be4.dec_label_pc_10c04_crit_edge:  ; preds = %dec_label_pc_10be4
  %v1_10c28.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10c04

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10be4
  %v7_10bec = icmp eq i32 %v0_10bec, -1
  store i1 %v7_10bec, i1* %cpsr_z.global-to-local, align 1
  %v0_10bfc.pre = load i32, i32* @r4, align 4
  br i1 %v7_10bec, label %dec_label_pc_10bfc, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bec
  %v1_10bf4 = load i32, i32* @r7, align 4
  %v9_10bf4 = icmp eq i32 %v0_10bfc.pre, %v1_10bf4
  store i1 %v9_10bf4, i1* %cpsr_z.global-to-local, align 1
  %v7_10bf8 = icmp sgt i32 %v0_10bfc.pre, %v1_10bf4
  br i1 %v7_10bf8, label %dec_label_pc_10bfc, label %dec_label_pc_10c04

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10bec, %dec_label_pc_10bf4
  store i32 %v0_10bfc.pre, i32* @r7, align 4
  store i32 %v0_10c00, i32* @r6, align 4
  br label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10be4.dec_label_pc_10c04_crit_edge, %dec_label_pc_10bf4, %dec_label_pc_10bfc
  %v1_10c28.pre = phi i32 [ %v1_10bf4, %dec_label_pc_10bf4 ], [ %v1_10c28.pre.pre, %dec_label_pc_10be4.dec_label_pc_10c04_crit_edge ], [ %v0_10bfc.pre, %dec_label_pc_10bfc ]
  %v0_10c04 = phi i32 [ %v0_10bec, %dec_label_pc_10bf4 ], [ %v0_10bec, %dec_label_pc_10be4.dec_label_pc_10c04_crit_edge ], [ %v0_10c00, %dec_label_pc_10bfc ]
  %v7_10c04 = icmp eq i32 %v0_10c04, -1
  store i1 %v7_10c04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c04, label %dec_label_pc_10c04._crit_edge, label %dec_label_pc_10c0c

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10c04
  %v7_10c0c = icmp eq i32 %v1_10c28.pre, 1
  store i1 %v7_10c0c, i1* %cpsr_z.global-to-local, align 1
  %v7_10c10 = icmp slt i32 %v1_10c28.pre, 2
  br i1 %v7_10c10, label %bb54, label %dec_label_pc_10c04._crit_edge

bb54:                                             ; preds = %dec_label_pc_10c0c
  store i32 -1, i32* @r6, align 4
  br label %dec_label_pc_10c04._crit_edge

dec_label_pc_10c04._crit_edge:                    ; preds = %dec_label_pc_10c04, %dec_label_pc_10c0c, %bb54
  %v0_10c28 = phi i32 [ %v0_10c04, %dec_label_pc_10c0c ], [ -1, %bb54 ], [ %v0_10c04, %dec_label_pc_10c04 ]
  %v2_10c18 = ptrtoint i32* %stack_var_-118 to i32
  store i32 %v2_10c18, i32* @r4, align 4
  %v0_10c1c = load i32, i32* @r5, align 4
  %v2_10c1c = add i32 %v0_10c1c, -37280
  store i32 %v2_10c1c, i32* @fp, align 4
  store i32 58, i32* @sb, align 4
  store i32 0, i32* @r5, align 4
  %v2_10c28 = add i32 %v0_10c28, %v1_10c28.pre
  store i32 %v2_10c28, i32* @sl, align 4
  %v9_10c88 = icmp eq i32 %tmp, 65535
  %v7_10c3068 = icmp eq i32 %v0_10c28, -1
  store i1 %v7_10c3068, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10c30

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10c04._crit_edge, %dec_label_pc_10ce0
  %v7_10c3072 = phi i1 [ %v7_10c3068, %dec_label_pc_10c04._crit_edge ], [ %v7_10c30, %dec_label_pc_10ce0 ]
  %v0_10c5c71 = phi i32 [ 0, %dec_label_pc_10c04._crit_edge ], [ %v1_10ce0, %dec_label_pc_10ce0 ]
  %v1_10c4870 = phi i32 [ %v0_10c28, %dec_label_pc_10c04._crit_edge ], [ %v0_10c30.pre, %dec_label_pc_10ce0 ]
  %v2_10c6069 = phi i32 [ %v2_10c18, %dec_label_pc_10c04._crit_edge ], [ %v3_10c4c29, %dec_label_pc_10ce0 ]
  br i1 %v7_10c3072, label %dec_label_pc_10c54, label %dec_label_pc_10c38

dec_label_pc_10c38:                               ; preds = %dec_label_pc_10c30
  %v9_10c38 = icmp eq i32 %v0_10c5c71, %v1_10c4870
  store i1 %v9_10c38, i1* %cpsr_z.global-to-local, align 1
  %v5_10c3c = icmp slt i32 %v0_10c5c71, %v1_10c4870
  br i1 %v5_10c3c, label %dec_label_pc_10c54, label %dec_label_pc_10c40

dec_label_pc_10c40:                               ; preds = %dec_label_pc_10c38
  %v1_10c40 = load i32, i32* @sl, align 4
  %v9_10c40 = icmp eq i32 %v0_10c5c71, %v1_10c40
  store i1 %v9_10c40, i1* %cpsr_z.global-to-local, align 1
  %v6_10c44 = icmp slt i32 %v0_10c5c71, %v1_10c40
  br i1 %v6_10c44, label %dec_label_pc_10c48, label %dec_label_pc_10c54

dec_label_pc_10c48:                               ; preds = %dec_label_pc_10c40
  store i1 %v9_10c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10c38, label %bb56, label %dec_label_pc_10ce0

bb56:                                             ; preds = %dec_label_pc_10c48
  %v1_10c4c = load i32, i32* @sb, align 4
  %v2_10c4c = trunc i32 %v1_10c4c to i8
  %v4_10c4c = inttoptr i32 %v2_10c6069 to i8*
  store i8 %v2_10c4c, i8* %v4_10c4c, align 1
  %v5_10c4c = load i32, i32* @r4, align 4
  %v6_10c4c = add i32 %v5_10c4c, 1
  store i32 %v6_10c4c, i32* @r4, align 4
  br label %dec_label_pc_10ce0

dec_label_pc_10c54:                               ; preds = %dec_label_pc_10c40, %dec_label_pc_10c38, %dec_label_pc_10c30
  %v2_10c54 = icmp eq i32 %v0_10c5c71, 0
  store i1 %v2_10c54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c54, label %dec_label_pc_10cc4, label %dec_label_pc_10c5c

dec_label_pc_10c5c:                               ; preds = %dec_label_pc_10c54
  %v7_10c5c = icmp eq i32 %v0_10c5c71, 6
  store i1 %v7_10c5c, i1* %cpsr_z.global-to-local, align 1
  %v0_10c60 = load i32, i32* @sb, align 4
  %v1_10c60 = trunc i32 %v0_10c60 to i8
  %v3_10c60 = inttoptr i32 %v2_10c6069 to i8*
  store i8 %v1_10c60, i8* %v3_10c60, align 1
  %v4_10c60 = load i32, i32* @r4, align 4
  %v5_10c60 = add i32 %v4_10c60, 1
  store i32 %v5_10c60, i32* @r4, align 4
  %v0_10c64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10c64, label %dec_label_pc_10c68, label %dec_label_pc_10cc4

dec_label_pc_10c68:                               ; preds = %dec_label_pc_10c5c
  %v0_10c68 = load i32, i32* @r6, align 4
  %v2_10c68 = icmp eq i32 %v0_10c68, 0
  store i1 %v2_10c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c68, label %dec_label_pc_10c70, label %dec_label_pc_10cc4

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c68
  %v0_10c70 = load i32, i32* @r7, align 4
  %v7_10c70 = icmp eq i32 %v0_10c70, 6
  store i1 %v7_10c70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c70, label %dec_label_pc_10c90, label %dec_label_pc_10c78

dec_label_pc_10c78:                               ; preds = %dec_label_pc_10c70
  %v7_10c78 = icmp eq i32 %v0_10c70, 5
  store i1 %v7_10c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c78, label %dec_label_pc_10c80, label %dec_label_pc_10cc4

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c78
  store i1 %v9_10c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10c88, label %dec_label_pc_10c90, label %dec_label_pc_10cc4

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10c80, %dec_label_pc_10c70
  %v2_10c94 = sub i32 %v2_10b60, %v5_10c60
  %v1_10c98 = add i32 %v2_10c94, -32
  store i32 %v1_10c98, i32* %r2.global-to-local, align 4
  %v0_10c9c = load i32, i32* @r8, align 4
  %v1_10c9c = add i32 %v0_10c9c, 12
  store i32 %v1_10c9c, i32* %r0.global-to-local, align 4
  %v3_10ca4 = call i32 @inet_ntop4(i32 %v1_10c9c, i32 %v5_10c60, i32 %v1_10c98)
  store i32 %v3_10ca4, i32* %r0.global-to-local, align 4
  %v2_10ca8 = icmp eq i32 %v3_10ca4, 0
  store i1 %v2_10ca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ca8, label %bb57, label %dec_label_pc_10cb4

bb57:                                             ; preds = %dec_label_pc_10c90
  %v1_10cac = load i32, i32* @r6, align 4
  store i32 %v1_10cac, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10cb4:                               ; preds = %dec_label_pc_10c90
  %v0_10cb4 = load i32, i32* @r4, align 4
  %v1_10cb4 = inttoptr i32 %v0_10cb4 to i8*
  store i32 %v0_10cb4, i32* %r0.global-to-local, align 4
  %v3_10cb8 = call i32 @strlen(i8* %v1_10cb4)
  store i32 %v3_10cb8, i32* %r0.global-to-local, align 4
  %v0_10cbc = load i32, i32* @r4, align 4
  %v2_10cbc = add i32 %v0_10cbc, %v3_10cb8
  store i32 %v2_10cbc, i32* @r4, align 4
  %v0_10cf4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10cf4

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10c80, %dec_label_pc_10c78, %dec_label_pc_10c68, %dec_label_pc_10c5c, %dec_label_pc_10c54
  %v0_10ccc = phi i32 [ %v5_10c60, %dec_label_pc_10c80 ], [ %v5_10c60, %dec_label_pc_10c78 ], [ %v5_10c60, %dec_label_pc_10c68 ], [ %v5_10c60, %dec_label_pc_10c5c ], [ %v2_10c6069, %dec_label_pc_10c54 ]
  store i32 %v2_10b60, i32* @lr, align 4
  %v1_10cc8 = load i32, i32* @r5, align 4
  %v4_10cc8 = mul i32 %v1_10cc8, 4
  %v5_10cc8 = add i32 %v4_10cc8, %v2_10b60
  store i32 %v0_10ccc, i32* @r0, align 4
  %v1_10cd0 = add i32 %v5_10cc8, -32
  %v2_10cd0 = inttoptr i32 %v1_10cd0 to i32*
  %v3_10cd0 = load i32, i32* %v2_10cd0, align 4
  store i32 %v3_10cd0, i32* %r2.global-to-local, align 4
  %v0_10cd4 = load i32, i32* @fp, align 4
  %v4_10cd8 = call i32 @sprintf(i32 %v0_10ccc, i32 %v0_10cd4, i32 %v3_10cd0, i32 %v5_10cc8)
  store i32 %v4_10cd8, i32* %r0.global-to-local, align 4
  %v0_10cdc = load i32, i32* @r4, align 4
  %v2_10cdc = add i32 %v0_10cdc, %v4_10cd8
  store i32 %v2_10cdc, i32* @r4, align 4
  br label %dec_label_pc_10ce0

dec_label_pc_10ce0:                               ; preds = %bb56, %dec_label_pc_10c48, %dec_label_pc_10cc4
  %v3_10c4c29 = phi i32 [ %v6_10c4c, %bb56 ], [ %v2_10c6069, %dec_label_pc_10c48 ], [ %v2_10cdc, %dec_label_pc_10cc4 ]
  %v0_10ce0 = load i32, i32* @r5, align 4
  %v1_10ce0 = add i32 %v0_10ce0, 1
  store i32 %v1_10ce0, i32* @r5, align 4
  %v0_10c30.pre = load i32, i32* @r6, align 4
  %v7_10ce8 = icmp slt i32 %v1_10ce0, 8
  %v7_10c30 = icmp eq i32 %v0_10c30.pre, -1
  store i1 %v7_10c30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ce8, label %dec_label_pc_10c30, label %dec_label_pc_10cec

dec_label_pc_10cec:                               ; preds = %dec_label_pc_10ce0
  br i1 %v7_10c30, label %.thread2, label %dec_label_pc_10cf4

dec_label_pc_10cf4:                               ; preds = %dec_label_pc_10cec, %dec_label_pc_10cb4
  %v3_10d00 = phi i32 [ %v3_10c4c29, %dec_label_pc_10cec ], [ %v2_10cbc, %dec_label_pc_10cb4 ]
  %v0_10cf4 = phi i32 [ %v0_10c30.pre, %dec_label_pc_10cec ], [ %v0_10cf4.pre, %dec_label_pc_10cb4 ]
  %v1_10cf4 = load i32, i32* @r7, align 4
  %v2_10cf4 = add i32 %v1_10cf4, %v0_10cf4
  %v7_10cf8 = icmp eq i32 %v2_10cf4, 8
  store i1 %v7_10cf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cf8, label %bb58, label %.thread2

bb58:                                             ; preds = %dec_label_pc_10cf4
  %v4_10d00 = inttoptr i32 %v3_10d00 to i8*
  store i8 58, i8* %v4_10d00, align 1
  %v5_10d00 = load i32, i32* @r4, align 4
  %v6_10d00 = add i32 %v5_10d00, 1
  store i32 %v6_10d00, i32* @r4, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10cf4, %dec_label_pc_10cec, %bb58
  %v2_10d08 = phi i32 [ %v3_10d00, %dec_label_pc_10cf4 ], [ %v3_10c4c29, %dec_label_pc_10cec ], [ %v6_10d00, %bb58 ]
  store i32 0, i32* %r5.global-to-local, align 4
  %v3_10d08 = inttoptr i32 %v2_10d08 to i8*
  store i8 0, i8* %v3_10d08, align 1
  %v4_10d08 = load i32, i32* @r4, align 4
  %v5_10d08 = add i32 %v4_10d08, 1
  store i32 %v2_10c18, i32* @r1, align 4
  %v2_10d10 = load i32, i32* %stack_var_-128, align 4
  store i32 %v2_10d10, i32* %r2.global-to-local, align 4
  %v2_10d14 = sub i32 %v5_10d08, %v2_10c18
  %v9_10d18 = icmp eq i32 %v2_10d14, %v2_10d10
  store i1 %v9_10d18, i1* %cpsr_z.global-to-local, align 1
  %tmp75 = icmp ugt i32 %v2_10d14, %v2_10d10
  br i1 %tmp75, label %dec_label_pc_10d20, label %dec_label_pc_10d34

dec_label_pc_10d20:                               ; preds = %.thread2
  %v0_10d20 = call i32 @__GI___errno_location()
  store i32 %v0_10d20, i32* %r0.global-to-local, align 4
  %v0_10d28 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10d28, i32* %r2.global-to-local, align 4
  %v2_10d2c = inttoptr i32 %v0_10d20 to i32*
  store i32 28, i32* %v2_10d2c, align 4
  %v0_10d54.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10d34:                               ; preds = %.thread2
  store i32 %arg3, i32* %r0.global-to-local, align 4
  %v2_10d38 = inttoptr i32 %arg3 to i8*
  %v3_10d38 = call i32 @strcpy(i8* %v2_10d38, i32 %v2_10c18)
  br label %dec_label_pc_10d3c

dec_label_pc_10d3c:                               ; preds = %dec_label_pc_10b1c, %dec_label_pc_10d34
  %storemerge = phi i32 [ %v3_10b28, %dec_label_pc_10b1c ], [ %v3_10d38, %dec_label_pc_10d34 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10d44:                               ; preds = %dec_label_pc_10b10
  %v0_10d44 = call i32 @__GI___errno_location()
  store i32 %v0_10d44, i32* %r0.global-to-local, align 4
  %v2_10d4c = inttoptr i32 %v0_10d44 to i32*
  store i32 97, i32* %v2_10d4c, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10d54:                               ; preds = %bb57, %dec_label_pc_10d3c, %dec_label_pc_10d20, %dec_label_pc_10d44
  %v0_10d54 = phi i32 [ %v1_10cac, %bb57 ], [ %storemerge, %dec_label_pc_10d3c ], [ %v0_10d54.pre, %dec_label_pc_10d20 ], [ 0, %dec_label_pc_10d44 ]
  store i32 %v0_10d54, i32* %r0.global-to-local, align 4
  store i32 %v6_10aec, i32* %r5.global-to-local, align 4
  ret i32 %v0_10d54

; uselistorder directives
  uselistorder i32 %v0_10d54, { 1, 0 }
  uselistorder i1 %v7_10c30, { 2, 0, 1 }
  uselistorder i32 %v0_10c30.pre, { 1, 0, 2 }
  uselistorder i32 %v1_10ce0, { 0, 2, 1 }
  uselistorder i32 %v0_10ccc, { 1, 0 }
  uselistorder i32 %v0_10cb4, { 1, 0 }
  uselistorder i32 %v5_10c60, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i1 %v9_10c38, { 1, 0, 2 }
  uselistorder i32 %v2_10c6069, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10c5c71, { 5, 4, 2, 3, 0, 1 }
  uselistorder i1 %v7_10c3068, { 1, 0 }
  uselistorder i32 %v2_10c18, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_10c28, { 1, 0, 2 }
  uselistorder i1 %v7_10c04, { 1, 0 }
  uselistorder i32 %v0_10c04, { 1, 2, 0 }
  uselistorder i32 %v1_10c28.pre, { 2, 0, 1 }
  uselistorder i32 %v0_10bfc.pre, { 0, 1, 3, 2 }
  uselistorder i1 %v7_10bec, { 1, 0 }
  uselistorder i1 %v7_10be4, { 1, 0 }
  uselistorder i32 %v1_10bd8, { 1, 0 }
  uselistorder i32 %v0_10bec, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10c00, { 1, 2, 0, 3 }
  uselistorder i1 %v7_10ba0, { 1, 0 }
  uselistorder i32 %v0_10bd8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_10bbc, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_10bcc, { 3, 1, 0, 2 }
  uselistorder i32 %v1_10b5c, { 1, 0, 2 }
  uselistorder i32 %v2_10b44, { 1, 0 }
  uselistorder i32 %v0_10b5c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_10b60, { 0, 4, 3, 1, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 4, 5, 6, 8, 7, 13, 9, 10, 11, 12, 14, 15, 16, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 15, 16, 17, 18, 19, 23, 20, 21, 22 }
  uselistorder i8 58, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d54, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_10d3c, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ce0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c30, { 1, 0 }
  uselistorder label %dec_label_pc_10c04._crit_edge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10c04, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10bfc, { 1, 0 }
  uselistorder label %dec_label_pc_10bd8, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10bd4, { 1, 0 }
  uselistorder label %dec_label_pc_10b8c, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg4, i32* %stack_var_0, align 4
  %v6_10d70 = load i32, i32* @r5, align 4
  %v0_10d74 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10d74, i32* %sl.global-to-local, align 4
  %v2_10d74 = icmp eq i32 %v0_10d74, 0
  br i1 %v2_10d74, label %.thread30, label %dec_label_pc_10d9c.preheader

.thread30:                                        ; preds = %entry
  store i32 %arg2, i32* %fp.global-to-local, align 4
  store i32 %arg3, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_10e5c

dec_label_pc_10d9c.preheader:                     ; preds = %entry
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %fp.global-to-local, align 4
  store i32 %arg3, i32* %sb.global-to-local, align 4
  store i32 1, i32* @ip, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10d9c4 = load i32, i32* @r1, align 4
  %v6_10da014 = icmp slt i32 %v0_10d9c4, %arg2
  br i1 %v6_10da014, label %dec_label_pc_10da4.preheader, label %dec_label_pc_10e5c

dec_label_pc_10da4.preheader:                     ; preds = %dec_label_pc_10d9c.preheader
  %v2_10da451 = add i32 %v0_10d74, %v0_10d9c4
  %v3_10da452 = inttoptr i32 %v2_10da451 to i8*
  %v4_10da453 = load i8, i8* %v3_10da452, align 1
  %v6_10da454 = zext i8 %v4_10da453 to i32
  store i32 %v6_10da454, i32* @r4, align 4
  %v2_10da855 = icmp eq i8 %v4_10da453, 0
  br i1 %v2_10da855, label %bb49, label %dec_label_pc_10db0

dec_label_pc_10d98:                               ; preds = %bb48, %bb44
  %v1_10d9c = phi i32 [ %v1_10d9c.pre, %bb48 ], [ %v1_10dc859, %bb44 ]
  %v0_10d9c = phi i32 [ %v0_10d9c.pre, %bb48 ], [ %v5_10de0, %bb44 ]
  %v0_10d98 = phi i32 [ %v0_10d98.pre, %bb48 ], [ %v0_10de460, %bb44 ]
  store i32 %v0_10d98, i32* %r0.global-to-local, align 4
  %v6_10da0 = icmp slt i32 %v0_10d9c, %v1_10d9c
  br i1 %v6_10da0, label %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge, label %dec_label_pc_10e5c

dec_label_pc_10d98.dec_label_pc_10da4_crit_edge:  ; preds = %dec_label_pc_10d98
  %v0_10da4.pre = load i32, i32* %sl.global-to-local, align 4
  %v2_10da4 = add i32 %v0_10da4.pre, %v0_10d9c
  %v3_10da4 = inttoptr i32 %v2_10da4 to i8*
  %v4_10da4 = load i8, i8* %v3_10da4, align 1
  %v6_10da4 = zext i8 %v4_10da4 to i32
  store i32 %v6_10da4, i32* @r4, align 4
  %v2_10da8 = icmp eq i8 %v4_10da4, 0
  %v0_10e48 = load i32, i32* @ip, align 4
  %v2_10e48 = icmp eq i32 %v0_10e48, 0
  br i1 %v2_10da8, label %dec_label_pc_10e48, label %dec_label_pc_10db0

dec_label_pc_10db0:                               ; preds = %dec_label_pc_10da4.preheader, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge
  %v2_10e4866 = phi i1 [ %v2_10e48, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge ], [ false, %dec_label_pc_10da4.preheader ]
  %v0_10e4864 = phi i32 [ %v0_10e48, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge ], [ 1, %dec_label_pc_10da4.preheader ]
  %v6_10da463 = phi i32 [ %v6_10da4, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge ], [ %v6_10da454, %dec_label_pc_10da4.preheader ]
  %v0_10dd062 = phi i32 [ %v0_10da4.pre, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge ], [ %v0_10d74, %dec_label_pc_10da4.preheader ]
  %v0_10dc061 = phi i32 [ %v0_10d9c, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge ], [ %v0_10d9c4, %dec_label_pc_10da4.preheader ]
  %v0_10de460 = phi i32 [ %v0_10d98, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge ], [ 0, %dec_label_pc_10da4.preheader ]
  %v1_10dc859 = phi i32 [ %v1_10d9c, %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge ], [ %arg2, %dec_label_pc_10da4.preheader ]
  %v1_10db4 = and i32 %v6_10da463, 192
  br i1 %v2_10e4866, label %bb42, label %bb

bb:                                               ; preds = %dec_label_pc_10db0
  %v1_10db8 = load i32, i32* %r8.global-to-local, align 4
  %v2_10db8 = add i32 %v1_10db8, 1
  store i32 %v2_10db8, i32* %r8.global-to-local, align 4
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_10db0, %bb
  %v2_10dbc = icmp eq i32 %v1_10db4, 192
  %v1_10dc0 = add i32 %v0_10dc061, 1
  store i32 %v1_10dc0, i32* %r1.global-to-local, align 4
  br i1 %v2_10dbc, label %dec_label_pc_10dc8, label %dec_label_pc_10df0

dec_label_pc_10dc8:                               ; preds = %bb42
  %v6_10dcc = icmp slt i32 %v1_10dc0, %v1_10dc859
  br i1 %v6_10dcc, label %dec_label_pc_10dd0, label %dec_label_pc_10e5c

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10dc8
  %v2_10dd0 = add i32 %v1_10dc0, %v0_10dd062
  %v3_10dd0 = inttoptr i32 %v2_10dd0 to i8*
  %v4_10dd0 = load i8, i8* %v3_10dd0, align 1
  %v6_10dd0 = zext i8 %v4_10dd0 to i32
  %v1_10dd8 = urem i32 %v6_10da463, 64
  br i1 %v2_10e4866, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_10dd0
  %v1_10ddc = load i32, i32* %r8.global-to-local, align 4
  %v2_10ddc = add i32 %v1_10ddc, 1
  store i32 %v2_10ddc, i32* %r8.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_10dd0, %bb43
  %v4_10de0 = mul nuw nsw i32 %v1_10dd8, 256
  %v5_10de0 = or i32 %v6_10dd0, %v4_10de0
  store i32 %v5_10de0, i32* %r1.global-to-local, align 4
  store i32 %v0_10de460, i32* %r7.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10d98

dec_label_pc_10df0:                               ; preds = %bb42
  %v2_10df0 = add i32 %v6_10da463, %v0_10de460
  store i32 %v2_10df0, i32* %r6.global-to-local, align 4
  %v3_10df4 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_10df4, i32* @r3, align 4
  %v1_10df8 = add i32 %v2_10df0, 1
  store i32 %v1_10df8, i32* %r7.global-to-local, align 4
  %v3_10dfc = icmp ult i32 %v1_10df8, %v3_10df4
  br i1 %v3_10dfc, label %dec_label_pc_10e04, label %dec_label_pc_10e5c

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10df0
  %v2_10e04 = add i32 %v6_10da463, %v1_10dc0
  store i32 %v2_10e04, i32* @r5, align 4
  %v3_10e08 = icmp ult i32 %v2_10e04, %v1_10dc859
  br i1 %v3_10e08, label %dec_label_pc_10e10, label %dec_label_pc_10e5c

dec_label_pc_10e10:                               ; preds = %dec_label_pc_10e04
  %v2_10e10 = add i32 %v1_10dc0, %v0_10dd062
  store i32 %v2_10e10, i32* @r1, align 4
  %v0_10e14 = load i32, i32* %sb.global-to-local, align 4
  %v2_10e14 = add i32 %v0_10e14, %v0_10de460
  store i32 %v2_10e14, i32* @r0, align 4
  store i32 %v6_10da463, i32* @r2, align 4
  %v0_10e20 = call i32 @memcpy()
  store i32 %v0_10e20, i32* %r0.global-to-local, align 4
  store i32 %v0_10e4864, i32* @ip, align 4
  %v0_10e28 = load i32, i32* %sl.global-to-local, align 4
  %v1_10e28 = load i32, i32* @r5, align 4
  %v2_10e28 = add i32 %v1_10e28, %v0_10e28
  %v3_10e28 = inttoptr i32 %v2_10e28 to i8*
  %v4_10e28 = load i8, i8* %v3_10e28, align 1
  br i1 %v2_10e4866, label %bb46, label %bb45

bb45:                                             ; preds = %dec_label_pc_10e10
  %v1_10e30 = load i32, i32* %r8.global-to-local, align 4
  %v2_10e30 = load i32, i32* @r4, align 4
  %v3_10e30 = add i32 %v2_10e30, %v1_10e30
  store i32 %v3_10e30, i32* %r8.global-to-local, align 4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_10e10, %bb45
  %v2_10e34 = icmp eq i8 %v4_10e28, 0
  br i1 %v2_10e34, label %bb48, label %bb47

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_10e40.off0 = phi i8 [ 0, %bb46 ], [ 46, %bb47 ]
  store i32 %v1_10e28, i32* %r1.global-to-local, align 4
  %v2_10e40 = load i32, i32* %sb.global-to-local, align 4
  %v3_10e40 = load i32, i32* %r6.global-to-local, align 4
  %v4_10e40 = add i32 %v3_10e40, %v2_10e40
  %v5_10e40 = inttoptr i32 %v4_10e40 to i8*
  store i8 %v0_10e40.off0, i8* %v5_10e40, align 1
  %v0_10d98.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_10d9c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10d9c.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_10d98

dec_label_pc_10e48:                               ; preds = %dec_label_pc_10d98.dec_label_pc_10da4_crit_edge
  %v0_10e50.pre.pre = load i32, i32* %r8.global-to-local, align 4
  br i1 %v2_10e48, label %dec_label_pc_10e5c, label %bb49

bb49:                                             ; preds = %dec_label_pc_10da4.preheader, %dec_label_pc_10e48
  %v0_10e50.pre69 = phi i32 [ %v0_10e50.pre.pre, %dec_label_pc_10e48 ], [ 0, %dec_label_pc_10da4.preheader ]
  %v2_10e4c = add i32 %v0_10e50.pre69, 1
  store i32 %v2_10e4c, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10e5c

dec_label_pc_10e5c:                               ; preds = %dec_label_pc_10e04, %dec_label_pc_10df0, %dec_label_pc_10dc8, %dec_label_pc_10d98, %dec_label_pc_10e48, %dec_label_pc_10d9c.preheader, %bb49, %.thread30
  %storemerge = phi i32 [ -1, %.thread30 ], [ %v2_10e4c, %bb49 ], [ -1, %dec_label_pc_10d9c.preheader ], [ %v0_10e50.pre.pre, %dec_label_pc_10e48 ], [ -1, %dec_label_pc_10df0 ], [ -1, %dec_label_pc_10e04 ], [ -1, %dec_label_pc_10d98 ], [ -1, %dec_label_pc_10dc8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v6_10d70, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_10e50.pre.pre, { 1, 0 }
  uselistorder i32 %v1_10e28, { 1, 0 }
  uselistorder i32 %v5_10de0, { 1, 0 }
  uselistorder i32 %v1_10dc0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_10de460, { 3, 2, 0, 1 }
  uselistorder i32 %v6_10da463, { 2, 4, 3, 0, 1 }
  uselistorder i1 %v2_10e4866, { 1, 2, 0 }
  uselistorder i32 %v0_10d74, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 4, 1, 5, 2, 6, 3, 7, 8 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 3, 4, 1, 2 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_10e5c, { 6, 4, 0, 1, 2, 3, 5, 7 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_10db0, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %tmp144 = call i32 @__decompiler_undefined_function_0()
  %tmp159 = call i32 @__decompiler_undefined_function_0()
  %tmp160 = call i32 @__decompiler_undefined_function_0()
  %tmp161 = call i32 @__decompiler_undefined_function_0()
  %tmp172 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-448 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-104 = alloca i16, align 2
  %stack_var_-76 = alloca i32, align 4
  %v3_10e68 = load i32, i32* @r4, align 4
  %v6_10e68 = load i32, i32* @r5, align 4
  %v9_10e68 = load i32, i32* @r6, align 4
  %v12_10e68 = load i32, i32* @r7, align 4
  %v15_10e68 = load i32, i32* @r8, align 4
  %v18_10e68 = load i32, i32* @sb, align 4
  %v21_10e68 = load i32, i32* @sl, align 4
  %v24_10e68 = load i32, i32* @fp, align 4
  %v27_10e68 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg4, i32* @fp, align 4
  %v0_10e7c = load i32, i32* %r1.global-to-local, align 4
  %v1_10e84 = call i32 @malloc(i32 512)
  store i32 %v1_10e84, i32* @sl, align 4
  %v0_10e8c = load i32, i32* @r4, align 4
  %v1_10e8c = inttoptr i32 %v0_10e8c to i8*
  %v3_10e90 = call i32 @strlen(i8* %v1_10e8c)
  store i32 894, i32* %r3.global-to-local, align 4
  %v3_10e9c = icmp ugt i32 %v3_10e90, 893
  store i1 %v3_10e9c, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r8, align 4
  %tmp285 = icmp ugt i32 %v3_10e90, 894
  br i1 %tmp285, label %.thread132, label %dec_label_pc_10ebc

.thread132:                                       ; preds = %entry
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115cc

dec_label_pc_10ebc:                               ; preds = %entry
  %v1_10ec0 = add i32 %v3_10e90, 130
  %v1_10ec4 = call i32 @malloc(i32 %v1_10ec0)
  store i32 %v1_10ec4, i32* @r0, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ec8 = icmp eq i32 %v1_10ec4, 0
  br i1 %v2_10ec8, label %.thread5, label %bb

bb:                                               ; preds = %dec_label_pc_10ebc
  %v1_10ecc = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_10ecc = icmp eq i32 %v1_10ecc, 0
  br i1 %v3_10ecc, label %bb213, label %dec_label_pc_10ee0

.thread5:                                         ; preds = %dec_label_pc_10ebc
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_115c4

bb213:                                            ; preds = %bb
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_115c4

dec_label_pc_10ee0:                               ; preds = %bb
  store i32 0, i32* @r5, align 4
  %v0_10ee0 = load i32, i32* @r4, align 4
  %v1_10ee0 = inttoptr i32 %v0_10ee0 to i8*
  %v2_10ee0 = load i8, i8* %v1_10ee0, align 1
  %v3_10ee0 = zext i8 %v2_10ee0 to i32
  store i32 %v3_10ee0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ee4 = icmp eq i8 %v2_10ee0, 0
  br i1 %v2_10ee4, label %dec_label_pc_115c4, label %dec_label_pc_10eec

dec_label_pc_10eec:                               ; preds = %dec_label_pc_10ee0
  %v2_10ef0 = add i32 %v0_10ee0, %v3_10e90
  store i32 %v2_10ef0, i32* %r3.global-to-local, align 4
  %v1_10ef4 = add i32 %v2_10ef0, -1
  %v2_10ef4 = inttoptr i32 %v1_10ef4 to i8*
  %v3_10ef4 = load i8, i8* %v2_10ef4, align 1
  %v4_10ef4 = zext i8 %v3_10ef4 to i32
  store i32 %v4_10ef4, i32* @r3, align 4
  store i32 %v3_10e90, i32* @r2, align 4
  store i32 %v0_10ee0, i32* @r1, align 4
  %v0_10f04 = call i32 @memcpy()
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 10472, i32* %ip.global-to-local, align 4
  store i32 9512, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @sb, align 4
  %v2_10f80 = ptrtoint i32* %stack_var_-76 to i32
  %v2_11098 = ptrtoint i16* %stack_var_-104 to i32
  %v15_1109c = ptrtoint i32* %stack_var_-88 to i32
  %v2_110c0 = ptrtoint i32* %stack_var_-192 to i32
  %v2_110e0 = bitcast i32* %stack_var_-192 to i8*
  %v2_11194 = ptrtoint i32* %stack_var_-48 to i32
  %v2_111a0 = ptrtoint i32* %stack_var_-56 to i32
  %v2_1122c = icmp eq i32 %tmp161, 0
  %v1_11238 = add i32 %tmp160, -2
  %v2_1123c = icmp ne i32 %v1_11238, 0
  %tmp214 = icmp slt i32 %tmp159, 1
  %v2_11328 = ptrtoint i32* %stack_var_-448 to i32
  %v2_1132c = ptrtoint i32* %stack_var_-144 to i32
  %v5_1157056 = icmp sgt i32 %tmp159, 0
  %v2_11498 = icmp ne i32 %v0_10e7c, 0
  %v7_11498 = icmp eq i32 %v0_10e7c, 1
  %v1_1138c = bitcast i32* %stack_var_-448 to i8*
  %v2_11440 = icmp eq i32 %tmp144, 0
  %v2_11248 = icmp ugt i8 %v3_10ef4, 45
  %v7_11248 = icmp eq i8 %v3_10ef4, 46
  %v1_10ff4 = add i32 %v1_10ec4, 1
  %stack_var_-476.0.pre = load i32, i32* @r5, align 4
  %v4_10fd4 = add i32 %v1_10ec4, %v3_10e90
  %v5_10fd4 = inttoptr i32 %v4_10fd4 to i8*
  %v1_11238.cmp = icmp ugt i32 %v1_11238, 1
  %v2_11270 = icmp eq i32 %tmp160, 0
  %v3_1149c = icmp ugt i32 %v0_10e7c, 27
  %v8_1149c = icmp eq i32 %v0_10e7c, 28
  br label %dec_label_pc_10f64

dec_label_pc_10f64:                               ; preds = %dec_label_pc_115ac, %dec_label_pc_10eec
  %stack_var_-476.0 = phi i32 [ %stack_var_-476.0.pre, %dec_label_pc_10eec ], [ %v1_115b0, %dec_label_pc_115ac ]
  %stack_var_-464.0 = phi i32 [ %tmp172, %dec_label_pc_10eec ], [ %v3_11078, %dec_label_pc_115ac ]
  %stack_var_-468.0 = phi i32 [ -1, %dec_label_pc_10eec ], [ %stack_var_-468.2, %dec_label_pc_115ac ]
  %v1_10f6c = phi i32 [ -1, %dec_label_pc_10eec ], [ %v3_1114c, %dec_label_pc_115ac ]
  store i32 %v1_10f6c, i32* %r3.global-to-local, align 4
  %v2_10f68 = icmp eq i32 %v1_10f6c, -1
  store i1 %v2_10f68, i1* %cpsr_c.global-to-local, align 1
  %v7_10f68 = icmp eq i32 %v1_10f6c, -1
  br i1 %v7_10f68, label %bb216, label %bb215

bb215:                                            ; preds = %dec_label_pc_10f64
  br label %bb216

bb216:                                            ; preds = %dec_label_pc_10f64, %bb215
  %v1_10f70 = xor i1 %v7_10f68, true
  call void @__pseudo_cond_branch(i1 %v1_10f70, i32 ptrtoint (i32* @global_var_aac4.351 to i32))
  store i32 36, i32* @r7, align 4
  %v0_10f7c = load i32, i32* @r8, align 4
  %v2_10f7c = add i32 %v0_10f7c, 40
  %v3_10f7c = inttoptr i32 %v2_10f7c to i32*
  %v4_10f7c = load i32, i32* %v3_10f7c, align 4
  store i32 %v4_10f7c, i32* @r4, align 4
  store i32 %v2_10f80, i32* @r5, align 4
  store i32 76, i32* %ip.global-to-local, align 4
  %v2_10f8c = add i32 %v0_10f7c, 36
  %v3_10f8c = inttoptr i32 %v2_10f8c to i32*
  %v4_10f8c = load i32, i32* %v3_10f8c, align 4
  store i32 %v4_10f8c, i32* %r1.global-to-local, align 4
  %v2_10f94 = add i32 %v0_10f7c, 76
  %v3_10f94 = inttoptr i32 %v2_10f94 to i32*
  %v4_10f94 = load i32, i32* %v3_10f94, align 4
  store i32 %v4_10f94, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_10f94)
  store i32 16, i32* %r1.global-to-local, align 4
  %v0_10fa8 = load i32, i32* @r8, align 4
  %v2_10fa8 = add i32 %v0_10fa8, 16
  %v3_10fa8 = inttoptr i32 %v2_10fa8 to i32*
  %v4_10fa8 = load i32, i32* %v3_10fa8, align 4
  store i32 %v4_10fa8, i32* %ip.global-to-local, align 4
  store i32 69556, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10fa8)
  %v0_10fb4 = call i32 @__open_nameservers()
  %v0_10fbc = load i32, i32* @r8, align 4
  %v2_10fbc = add i32 %v0_10fbc, 10484
  %v3_10fbc = inttoptr i32 %v2_10fbc to i32*
  %v4_10fbc = load i32, i32* %v3_10fbc, align 4
  store i32 %v1_10ec4, i32* %r3.global-to-local, align 4
  store i32 %v3_10e90, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_10fcc = load i32, i32* @sb, align 4
  %v3_10fcc = icmp uge i32 %v0_10fcc, %v4_10fbc
  store i1 %v3_10fcc, i1* %cpsr_c.global-to-local, align 1
  store i8 0, i8* %v5_10fd4, align 1
  %v0_10fd8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10fd8, label %dec_label_pc_11004, label %dec_label_pc_10fdc

dec_label_pc_10fdc:                               ; preds = %bb216
  store i32 46, i32* %r3.global-to-local, align 4
  %v3_10fe4 = load i32, i32* %ip.global-to-local, align 4
  %v4_10fe4 = add i32 %v3_10fe4, %v1_10ec4
  %v5_10fe4 = inttoptr i32 %v4_10fe4 to i8*
  store i8 46, i8* %v5_10fe4, align 1
  store i32 10472, i32* %r1.global-to-local, align 4
  %v0_10ff0 = load i32, i32* @r8, align 4
  %v2_10ff0 = add i32 %v0_10ff0, 10472
  %v3_10ff0 = inttoptr i32 %v2_10ff0 to i32*
  %v4_10ff0 = load i32, i32* %v3_10ff0, align 4
  store i32 %v4_10ff0, i32* %r3.global-to-local, align 4
  %v1_10ff8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10ff8 = add i32 %v1_10ff4, %v1_10ff8
  %v1_10ffc = load i32, i32* @sb, align 4
  %v2_10ffc = and i32 %v1_10ffc, 1073741824
  %v3_10ffc = icmp ne i32 %v2_10ffc, 0
  store i1 %v3_10ffc, i1* %cpsr_c.global-to-local, align 1
  %v4_10ffc = mul i32 %v1_10ffc, 4
  %v5_10ffc = add i32 %v4_10ffc, %v4_10ff0
  %v6_10ffc = inttoptr i32 %v5_10ffc to i32*
  %v7_10ffc = load i32, i32* %v6_10ffc, align 4
  store i32 %v7_10ffc, i32* @r1, align 4
  %v2_11000 = inttoptr i32 %v2_10ff8 to i8*
  %v3_11000 = call i32 @strcpy(i8* %v2_11000, i32 %v7_10ffc)
  br label %dec_label_pc_11004

dec_label_pc_11004:                               ; preds = %bb216, %dec_label_pc_10fdc
  store i32 %stack_var_-468.0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11008 = icmp slt i32 %stack_var_-468.0, 0
  br i1 %v1_11008, label %dec_label_pc_11010, label %dec_label_pc_11004.dec_label_pc_11040_crit_edge

dec_label_pc_11004.dec_label_pc_11040_crit_edge:  ; preds = %dec_label_pc_11004
  %v0_11048.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_11040

dec_label_pc_11010:                               ; preds = %dec_label_pc_11004
  store i32 10480, i32* %r3.global-to-local, align 4
  store i32 727, i32* %ip.global-to-local, align 4
  %v0_11018 = load i32, i32* @r8, align 4
  %v2_11018 = add i32 %v0_11018, 10480
  %v3_11018 = inttoptr i32 %v2_11018 to i32*
  %v4_11018 = load i32, i32* %v3_11018, align 4
  %v2_1101c = add i32 %v0_11018, 727
  %v3_1101c = inttoptr i32 %v2_1101c to i8*
  %v4_1101c = load i8, i8* %v3_1101c, align 1
  %v6_1101c = zext i8 %v4_1101c to i32
  %v2_11020 = mul i32 %v6_1101c, %v4_11018
  store i32 %v2_11020, i32* %r3.global-to-local, align 4
  store i32 9512, i32* %r1.global-to-local, align 4
  %v2_1102c = add i32 %v0_11018, 724
  %v3_1102c = inttoptr i32 %v2_1102c to i16*
  %v4_1102c = load i16, i16* %v3_1102c, align 2
  %v6_1102c = zext i16 %v4_1102c to i32
  %v2_11030 = add i32 %v0_11018, 9512
  %v3_11030 = inttoptr i32 %v2_11030 to i32*
  %v4_11030 = load i32, i32* %v3_11030, align 4
  store i32 %v4_11030, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %dec_label_pc_11004.dec_label_pc_11040_crit_edge, %dec_label_pc_11010
  %v2_11084 = phi i32 [ %v0_11018, %dec_label_pc_11010 ], [ %v0_11048.pre, %dec_label_pc_11004.dec_label_pc_11040_crit_edge ]
  %stack_var_-464.1 = phi i32 [ %v6_1102c, %dec_label_pc_11010 ], [ %stack_var_-464.0, %dec_label_pc_11004.dec_label_pc_11040_crit_edge ]
  %stack_var_-468.1 = phi i32 [ %v4_11030, %dec_label_pc_11010 ], [ %stack_var_-468.0, %dec_label_pc_11004.dec_label_pc_11040_crit_edge ]
  %stack_var_-476.1 = phi i32 [ %v2_11020, %dec_label_pc_11010 ], [ %stack_var_-476.0, %dec_label_pc_11004.dec_label_pc_11040_crit_edge ]
  store i32 10480, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-468.1, i32* %ip.global-to-local, align 4
  %v2_11048 = add i32 %v2_11084, 10480
  %v3_11048 = inttoptr i32 %v2_11048 to i32*
  %v4_11048 = load i32, i32* %v3_11048, align 4
  store i32 10476, i32* %r3.global-to-local, align 4
  %v3_11050 = icmp uge i32 %stack_var_-468.1, %v4_11048
  store i1 %v3_11050, i1* %cpsr_c.global-to-local, align 1
  %v2_11054 = add i32 %v2_11084, 10476
  %v3_11054 = inttoptr i32 %v2_11054 to i32*
  %v4_11054 = load i32, i32* %v3_11054, align 4
  store i32 %v4_11054, i32* %r3.global-to-local, align 4
  br i1 %v3_11050, label %bb217, label %bb218

bb217:                                            ; preds = %dec_label_pc_11040
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb218

bb218:                                            ; preds = %dec_label_pc_11040, %bb217
  %v0_11060 = phi i32 [ %stack_var_-468.1, %dec_label_pc_11040 ], [ 0, %bb217 ]
  %v3_11060 = mul i32 %v0_11060, 28
  %v4_11060 = add i32 %v3_11060, %v4_11054
  store i32 %v4_11060, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-464.1, i32* %ip.global-to-local, align 4
  %v1_1106c = add i32 %stack_var_-464.1, 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_11078 = urem i32 %v1_1106c, 65536
  store i32 9512, i32* %r1.global-to-local, align 4
  %v1_11084 = trunc i32 %v1_1106c to i16
  %v4_11084 = add i32 %v2_11084, 724
  %v5_11084 = inttoptr i32 %v4_11084 to i16*
  store i16 %v1_11084, i16* %v5_11084, align 2
  %v1_1108c = load i32, i32* @r8, align 4
  %v2_1108c = load i32, i32* %r1.global-to-local, align 4
  %v3_1108c = add i32 %v2_1108c, %v1_1108c
  %v4_1108c = inttoptr i32 %v3_1108c to i32*
  store i32 %v0_11060, i32* %v4_1108c, align 4
  %v0_11090 = load i32, i32* %r3.global-to-local, align 4
  %v1_11094 = inttoptr i32 %v0_11090 to i32*
  %v2_11094 = load i32, i32* %v1_11094, align 4
  %v3_11094 = add i32 %v0_11090, 4
  %v4_11094 = inttoptr i32 %v3_11094 to i32*
  %v5_11094 = load i32, i32* %v4_11094, align 4
  store i32 %v5_11094, i32* %r1.global-to-local, align 4
  %v9_11094 = add i32 %v0_11090, 12
  %v10_11094 = inttoptr i32 %v9_11094 to i32*
  %v11_11094 = load i32, i32* %v10_11094, align 4
  store i32 %v11_11094, i32* %r3.global-to-local, align 4
  %v12_11094 = add i32 %v0_11090, 16
  %v4_1109c = trunc i32 %v2_11094 to i16
  store i16 %v4_1109c, i16* %stack_var_-104, align 2
  store i32 %v15_1109c, i32* %ip.global-to-local, align 4
  %v1_110a0 = inttoptr i32 %v12_11094 to i32*
  %v2_110a0 = load i32, i32* %v1_110a0, align 4
  %v3_110a0 = add i32 %v0_11090, 20
  %v4_110a0 = inttoptr i32 %v3_110a0 to i32*
  %v5_110a0 = load i32, i32* %v4_110a0, align 4
  store i32 %v5_110a0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 %v2_110a0, i32* %stack_var_-88, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_110b4 = load i32, i32* @r8, align 4
  %v2_110b4 = add i32 %v0_110b4, 24
  %v3_110b4 = inttoptr i32 %v2_110b4 to i32*
  %v4_110b4 = load i32, i32* %v3_110b4, align 4
  store i32 %v4_110b4, i32* %ip.global-to-local, align 4
  store i32 69824, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_110b4)
  store i32 %v2_110c0, i32* @r6, align 4
  %v0_110c4 = load i32, i32* @r7, align 4
  store i32 %v0_110c4, i32* %r1.global-to-local, align 4
  store i32 512, i32* @r2, align 4
  %v0_110cc = load i32, i32* @sl, align 4
  %v2_110d0 = inttoptr i32 %v0_110cc to i8*
  %v3_110d0 = call i32 @__GI_memset(i8* %v2_110d0, i32 %v0_110c4)
  %v0_110d4 = load i32, i32* @r7, align 4
  store i32 %v0_110d4, i32* %r1.global-to-local, align 4
  store i32 48, i32* @r2, align 4
  %v3_110e0 = call i32 @__GI_memset(i8* %v2_110e0, i32 %v0_110d4)
  store i32 %v3_11078, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r5, align 4
  %v0_110f0 = load i32, i32* @sl, align 4
  store i32 %v0_110f0, i32* %r1.global-to-local, align 4
  store i32 %v3_11078, i32* %stack_var_-192, align 4
  %v6_11104 = call i32 @__encode_header(i32* nonnull %stack_var_-192, i32 %v0_110f0, i32 512, i32 %v3_11078, i32 %v3_11078)
  store i32 %v6_11104, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11108 = icmp slt i32 %v6_11104, 0
  br i1 %v1_11108, label %dec_label_pc_115c4, label %dec_label_pc_11110

dec_label_pc_11110:                               ; preds = %bb218
  store i32 %v0_10e7c, i32* @ip, align 4
  store i32 %v1_10ec4, i32* @r5, align 4
  %v0_11120 = load i32, i32* @sl, align 4
  %v2_11120 = add i32 %v0_11120, %v6_11104
  store i32 %v2_11120, i32* %r1.global-to-local, align 4
  %v1_11124 = sub i32 512, %v6_11104
  store i32 %v1_10ec4, i32* %stack_var_-60, align 4
  store i32 %v0_10e7c, i32* %stack_var_-56, align 4
  %v4_11130 = call i32 @__encode_question(i32* nonnull %stack_var_-60, i32 %v2_11120, i32 %v1_11124)
  store i32 %v4_11130, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11134 = icmp slt i32 %v4_11130, 0
  br i1 %v1_11134, label %dec_label_pc_115c4, label %dec_label_pc_1113c

dec_label_pc_1113c:                               ; preds = %dec_label_pc_11110
  %v3_11140 = load i16, i16* %stack_var_-104, align 2
  %v4_11140 = sext i16 %v3_11140 to i32
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_1114c = call i32 @socket(i32 %v4_11140, i32 2, i32 17)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11150 = icmp slt i32 %v3_1114c, 0
  br i1 %v1_11150, label %dec_label_pc_1159c, label %dec_label_pc_1115c

dec_label_pc_1115c:                               ; preds = %dec_label_pc_1113c
  store i32 %v2_11098, i32* %r1.global-to-local, align 4
  %v3_11164 = call i32 @__libc_connect(i32 %v3_1114c, i32 %v2_11098, i32 28)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11168 = icmp slt i32 %v3_11164, 0
  br i1 %v1_11168, label %dec_label_pc_1159c, label %dec_label_pc_11170

dec_label_pc_11170:                               ; preds = %dec_label_pc_1115c
  %v0_11170 = load i32, i32* @r5, align 4
  %v1_11170 = load i32, i32* @r4, align 4
  %v2_11170 = add i32 %v1_11170, %v0_11170
  %v0_11174 = load i32, i32* @r7, align 4
  store i32 %v0_11174, i32* %r3.global-to-local, align 4
  %v0_1117c = load i32, i32* @sl, align 4
  store i32 %v0_1117c, i32* %r1.global-to-local, align 4
  %v5_11180 = call i32 @__libc_send(i32 %v3_1114c, i32 %v0_1117c, i32 %v2_11170, i32 %v0_11174, i32 ptrtoint (i32* @0 to i32))
  store i32 726, i32* %r3.global-to-local, align 4
  %v0_11188 = load i32, i32* @r8, align 4
  %v2_11188 = add i32 %v0_11188, 726
  %v3_11188 = inttoptr i32 %v2_11188 to i8*
  %v4_11188 = load i8, i8* %v3_11188, align 1
  %v6_11188 = zext i8 %v4_11188 to i32
  store i32 1000, i32* %r3.global-to-local, align 4
  %v2_11190 = mul nuw nsw i32 %v6_11188, 1000
  store i32 %v2_11190, i32* @r4, align 4
  store i32 %v2_11194, i32* @r5, align 4
  br label %dec_label_pc_11198

dec_label_pc_11198:                               ; preds = %thread-pre-split, %dec_label_pc_11170
  %v0_111a4 = phi i32 [ %v1_111e4, %thread-pre-split ], [ %v2_11190, %dec_label_pc_11170 ]
  store i32 %v3_1114c, i32* %r3.global-to-local, align 4
  store i32 1, i32* @ip, align 4
  store i32 %v2_111a0, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v3_1114c, i32* %stack_var_-48, align 4
  %v7_111b8 = call i32 @__GI_poll(i32 %v2_11194, i32 1, i32 %v0_111a4, i32 %v3_1114c, i32 %v3_1114c, i32 1)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v0_111c0 = load i32, i32* @sl, align 4
  store i32 %v0_111c0, i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %tmp219 = icmp slt i32 %v7_111b8, 1
  br i1 %tmp219, label %dec_label_pc_1159c, label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_11198
  %v5_111d4 = call i32 @__libc_recv(i32 %v3_1114c, i32 %v0_111c0, i32 512, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v2_111d8 = icmp ugt i32 %v5_111d4, 10
  store i1 %v2_111d8, i1* %cpsr_c.global-to-local, align 1
  %v8_111e0 = icmp sgt i32 %v5_111d4, 11
  br i1 %v8_111e0, label %dec_label_pc_1120c, label %dec_label_pc_111e4

dec_label_pc_111e4:                               ; preds = %dec_label_pc_1120c, %dec_label_pc_11228, %dec_label_pc_111d4
  %v0_111e4 = load i32, i32* @r4, align 4
  %v1_111e4 = add i32 %v0_111e4, -1000
  store i32 %v1_111e4, i32* @r4, align 4
  %v7_111e4 = icmp eq i32 %v0_111e4, 1000
  %tmp283 = zext i1 %v7_111e4 to i32
  %. = xor i32 %tmp283, 1
  store i32 %., i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_111f4 = icmp slt i32 %v5_111d4, 0
  br i1 %v1_111f4, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_111e4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_1159c

thread-pre-split:                                 ; preds = %dec_label_pc_111e4
  store i32 %., i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v7_111e4, label %dec_label_pc_1159c, label %dec_label_pc_11198

dec_label_pc_1120c:                               ; preds = %dec_label_pc_111d4
  store i32 %v2_110c0, i32* %r1.global-to-local, align 4
  %v0_11210 = load i32, i32* @sl, align 4
  %v2_11214 = inttoptr i32 %v0_11210 to i8*
  %v3_11214 = call i32 @__decode_header(i8* %v2_11214, i32 %v2_110c0)
  %v3_11218 = load i32, i32* %stack_var_-192, align 4
  store i32 %v3_11218, i32* %r3.global-to-local, align 4
  store i32 %v3_11078, i32* %r1.global-to-local, align 4
  %v3_11220 = icmp uge i32 %v3_11218, %v3_11078
  store i1 %v3_11220, i1* %cpsr_c.global-to-local, align 1
  %v9_11220 = icmp eq i32 %v3_11218, %v3_11078
  br i1 %v9_11220, label %dec_label_pc_11228, label %dec_label_pc_111e4

dec_label_pc_11228:                               ; preds = %dec_label_pc_1120c
  store i32 %tmp161, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_1122c, label %dec_label_pc_111e4, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_11228
  store i32 %v1_11238, i32* %r3.global-to-local, align 4
  store i1 %v2_1123c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v1_11238.cmp, label %dec_label_pc_11270, label %dec_label_pc_11244

dec_label_pc_11244:                               ; preds = %dec_label_pc_11234
  store i1 %v2_11248, i1* %cpsr_c.global-to-local, align 1
  br i1 %v7_11248, label %dec_label_pc_11264, label %dec_label_pc_11250

dec_label_pc_11250:                               ; preds = %dec_label_pc_11244
  store i32 %v4_10fbc, i32* @r5, align 4
  %v1_11254 = add i32 %v4_10fbc, -1
  store i32 %v1_11254, i32* %r3.global-to-local, align 4
  %v0_11258 = load i32, i32* @sb, align 4
  %v3_11258 = icmp uge i32 %v0_11258, %v1_11254
  store i1 %v3_11258, i1* %cpsr_c.global-to-local, align 1
  %v5_1125c = icmp slt i32 %v0_11258, %v1_11254
  br i1 %v5_1125c, label %.thread7, label %dec_label_pc_11264

.thread7:                                         ; preds = %dec_label_pc_11250
  %v7_1125c = add i32 %v0_11258, 1
  br label %dec_label_pc_115ac

dec_label_pc_11264:                               ; preds = %dec_label_pc_11250, %dec_label_pc_11244
  %v0_11264 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_11298

dec_label_pc_11270:                               ; preds = %dec_label_pc_11234
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_11270, label %dec_label_pc_11278, label %dec_label_pc_1159c

dec_label_pc_11278:                               ; preds = %dec_label_pc_11270
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %tmp214, label %dec_label_pc_11290, label %dec_label_pc_112a0

dec_label_pc_11290:                               ; preds = %dec_label_pc_11278
  %v0_11290 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_11298

dec_label_pc_11298:                               ; preds = %dec_label_pc_11264, %dec_label_pc_11290
  %storemerge2 = phi i32 [ %v0_11290, %dec_label_pc_11290 ], [ %v0_11264, %dec_label_pc_11264 ]
  %storemerge = phi i32 [ 4, %dec_label_pc_11290 ], [ 1, %dec_label_pc_11264 ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v2_11298 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_11298, align 4
  br label %dec_label_pc_115e4

dec_label_pc_112a0:                               ; preds = %dec_label_pc_11278
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_112a4.pre = load i32, i32* @sl, align 4
  store i32 12, i32* @ip, align 4
  %v2_112a4 = add i32 %v0_112a4.pre, 12
  store i32 %v2_112a4, i32* @r4, align 4
  %v3_112a4 = icmp ugt i32 %v0_112a4.pre, -13
  store i1 %v3_112a4, i1* %cpsr_c.global-to-local, align 1
  %v9_112a4 = icmp eq i32 %v2_112a4, 0
  br i1 %v9_112a4, label %dec_label_pc_1159c, label %dec_label_pc_112ac

dec_label_pc_112ac:                               ; preds = %dec_label_pc_112a0
  %v2_112b0 = add i32 %v5_111d4, -12
  store i32 %v2_112b0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp223 = icmp slt i32 %v2_112b0, 1
  br i1 %tmp223, label %dec_label_pc_1159c, label %dec_label_pc_112c0

dec_label_pc_112b8thread-pre-split:               ; preds = %dec_label_pc_112dc
  %v2_112e815 = add i32 %v2_112cc, -1
  store i32 %v2_112e815, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp224 = icmp slt i32 %v2_112e815, 1
  br i1 %tmp224, label %dec_label_pc_1159c, label %dec_label_pc_112c0

dec_label_pc_112c0:                               ; preds = %dec_label_pc_112ac, %dec_label_pc_112b8thread-pre-split
  %v1_112e4 = phi i32 [ %v2_112e815, %dec_label_pc_112b8thread-pre-split ], [ %v2_112b0, %dec_label_pc_112ac ]
  %v0_112c0 = phi i32 [ %v2_112d4, %dec_label_pc_112b8thread-pre-split ], [ %v2_112a4, %dec_label_pc_112ac ]
  %v1_112c0 = inttoptr i32 %v0_112c0 to i8*
  %v2_112c0 = load i8, i8* %v1_112c0, align 1
  %v3_112c0 = zext i8 %v2_112c0 to i32
  store i32 %v3_112c0, i32* %r3.global-to-local, align 4
  %v5_112c0 = add i32 %v0_112c0, 1
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_112c4 = icmp eq i8 %v2_112c0, 0
  %v2_112cc = sub i32 %v1_112e4, %v3_112c0
  store i32 %v2_112cc, i32* @lr, align 4
  %v1_112d0 = and i32 %v3_112c0, 192
  store i32 %v1_112d0, i32* @ip, align 4
  %v2_112d4 = add i32 %v3_112c0, %v5_112c0
  br i1 %v2_112c4, label %dec_label_pc_112f0, label %dec_label_pc_112dc

dec_label_pc_112dc:                               ; preds = %dec_label_pc_112c0
  %v2_112dc = icmp eq i32 %v1_112d0, 192
  store i1 %v2_112dc, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_112dc, label %.thread9, label %dec_label_pc_112b8thread-pre-split

.thread9:                                         ; preds = %dec_label_pc_112dc
  %v2_112e0 = add i32 %v0_112c0, 2
  %v2_112e4 = add i32 %v1_112e4, -2
  store i32 %v2_112e4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_112f0

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112c0, %.thread9
  %v1_112fc = phi i32 [ %v2_112e0, %.thread9 ], [ %v5_112c0, %dec_label_pc_112c0 ]
  %v0_112f0 = phi i32 [ %v2_112e4, %.thread9 ], [ %v1_112e4, %dec_label_pc_112c0 ]
  %v1_112f0 = add i32 %v0_112f0, -3
  %v2_112f0 = icmp ugt i32 %v0_112f0, 2
  store i1 %v2_112f0, i1* %cpsr_c.global-to-local, align 1
  %v3_112f0 = sub i32 2, %v0_112f0
  %v4_112f0 = and i32 %v3_112f0, %v0_112f0
  %v5_112f0 = icmp slt i32 %v4_112f0, 0
  %v6_112f0 = icmp slt i32 %v1_112f0, 0
  %v7_112f0 = icmp eq i32 %v0_112f0, 3
  %v3_112f4 = xor i1 %v6_112f0, %v5_112f0
  %v4_112f4 = or i1 %v7_112f0, %v3_112f4
  br i1 %v4_112f4, label %dec_label_pc_1159c, label %dec_label_pc_112f8

dec_label_pc_112f8:                               ; preds = %dec_label_pc_112f0
  %v1_112f8 = sub i32 -8, %v0_112a4.pre
  %v2_112fc = add i32 %v1_112fc, %v1_112f8
  store i32 %v2_112fc, i32* %r3.global-to-local, align 4
  %v3_112fc = icmp ult i32 %v2_112fc, %v1_112f8
  store i1 %v3_112fc, i1* %cpsr_c.global-to-local, align 1
  %v8_112fc = icmp slt i32 %v2_112fc, 0
  br i1 %v8_112fc, label %dec_label_pc_1159c, label %dec_label_pc_11320

dec_label_pc_11320:                               ; preds = %dec_label_pc_112f8
  %v2_11308 = add i32 %v2_112fc, 12
  store i32 %v2_11308, i32* %r1.global-to-local, align 4
  store i32 %v2_11328, i32* @r5, align 4
  store i32 %v2_1132c, i32* @r7, align 4
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br i1 %v5_1157056, label %dec_label_pc_11344, label %dec_label_pc_11574

dec_label_pc_11344:                               ; preds = %dec_label_pc_11320, %dec_label_pc_1154c.dec_label_pc_11344_crit_edge
  %v0_11348 = phi i32 [ %v0_11348.pre, %dec_label_pc_1154c.dec_label_pc_11344_crit_edge ], [ %v0_112a4.pre, %dec_label_pc_11320 ]
  %stack_var_-460.364 = phi i32 [ %v2_11554, %dec_label_pc_1154c.dec_label_pc_11344_crit_edge ], [ %v2_11308, %dec_label_pc_11320 ]
  %stack_var_-452.061 = phi i32 [ %v1_11558, %dec_label_pc_1154c.dec_label_pc_11344_crit_edge ], [ 0, %dec_label_pc_11320 ]
  %stack_var_-480.260 = phi i32 [ %stack_var_-480.1, %dec_label_pc_1154c.dec_label_pc_11344_crit_edge ], [ 1, %dec_label_pc_11320 ]
  store i32 256, i32* @ip, align 4
  store i32 %stack_var_-460.364, i32* @r1, align 4
  store i32 %v2_11328, i32* %r3.global-to-local, align 4
  %v5_1135c = call i32 @__decode_dotted(i32 %v0_11348, i32 %stack_var_-460.364, i32 %v5_111d4, i32 %v2_11328, i32 256)
  store i32 %v5_1135c, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11360 = icmp slt i32 %v5_1135c, 0
  br i1 %v1_11360, label %dec_label_pc_11430, label %dec_label_pc_11368

dec_label_pc_11368:                               ; preds = %dec_label_pc_11344
  store i32 %stack_var_-460.364, i32* %r1.global-to-local, align 4
  %v1_11370 = add i32 %v5_1135c, 10
  store i32 %v1_11370, i32* @sb, align 4
  %v2_11374 = sub i32 %v5_111d4, %stack_var_-460.364
  %v2_11378 = sub i32 %v2_11374, %v1_11370
  store i32 %v2_11378, i32* %r3.global-to-local, align 4
  %v3_11378 = icmp uge i32 %v2_11374, %v1_11370
  store i1 %v3_11378, i1* %cpsr_c.global-to-local, align 1
  %v8_11378 = icmp slt i32 %v2_11378, 0
  br i1 %v8_11378, label %dec_label_pc_11428.thread, label %dec_label_pc_11388

dec_label_pc_11428.thread:                        ; preds = %dec_label_pc_11368
  store i32 %v2_11378, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_11430

dec_label_pc_11388:                               ; preds = %dec_label_pc_11368
  %v2_1138c = call i32 @__GI_strdup(i8* %v1_1138c)
  %v0_11394 = load i32, i32* @r4, align 4
  %v2_11394 = add i32 %v0_11394, %stack_var_-460.364
  %v0_11398 = load i32, i32* @sl, align 4
  %v2_11398 = add i32 %v0_11398, %v2_11394
  store i32 %v2_11398, i32* %r1.global-to-local, align 4
  %v1_1139c = add i32 %v2_11398, 2
  store i32 %v1_1139c, i32* %ip.global-to-local, align 4
  %v1_113a0 = add i32 %v2_11398, 4
  store i32 %v1_113a0, i32* %r3.global-to-local, align 4
  %v1_113a4 = add i32 %v2_11398, 5
  %v2_113a4 = inttoptr i32 %v1_113a4 to i8*
  %v3_113a4 = load i8, i8* %v2_113a4, align 1
  %v4_113a4 = zext i8 %v3_113a4 to i32
  %v1_113ac = add i32 %v2_11398, 8
  %v2_113ac = inttoptr i32 %v1_113ac to i8*
  %v3_113ac = load i8, i8* %v2_113ac, align 1
  %v4_113ac = zext i8 %v3_113ac to i32
  %v1_113b8 = add i32 %v2_11398, 6
  %v2_113b8 = inttoptr i32 %v1_113b8 to i8*
  %v3_113b8 = load i8, i8* %v2_113b8, align 1
  %v4_113b8 = zext i8 %v3_113b8 to i32
  store i32 %v4_113b8, i32* %r3.global-to-local, align 4
  %v1_113bc = add i32 %v2_11398, 9
  %v2_113bc = inttoptr i32 %v1_113bc to i8*
  %v3_113bc = load i8, i8* %v2_113bc, align 1
  %v4_113bc = zext i8 %v3_113bc to i32
  %v3_113c4 = inttoptr i32 %v2_11398 to i8*
  %v4_113c4 = load i8, i8* %v3_113c4, align 1
  %v6_113c4 = zext i8 %v4_113c4 to i32
  %v1_113c8 = add i32 %v2_11398, 3
  %v2_113c8 = inttoptr i32 %v1_113c8 to i8*
  %v3_113c8 = load i8, i8* %v2_113c8, align 1
  %v4_113c8 = zext i8 %v3_113c8 to i32
  store i32 %v4_113c8, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v2_113d0 = inttoptr i32 %v1_1139c to i8*
  %v3_113d0 = load i8, i8* %v2_113d0, align 1
  %v4_113d0 = zext i8 %v3_113d0 to i32
  store i32 %v4_113d0, i32* %ip.global-to-local, align 4
  %v1_113d4 = add i32 %v2_11398, 1
  %v2_113d4 = inttoptr i32 %v1_113d4 to i8*
  %v3_113d4 = load i8, i8* %v2_113d4, align 1
  %v4_113d4 = zext i8 %v3_113d4 to i32
  %v4_113d8 = mul nuw nsw i32 %v4_113ac, 256
  %v5_113d8 = or i32 %v4_113bc, %v4_113d8
  store i32 %v5_113d8, i32* @r6, align 4
  store i32 %v4_113a4, i32* @r7, align 4
  %v4_113e0 = mul nuw nsw i32 %v6_113c4, 256
  %v5_113e0 = or i32 %v4_113d4, %v4_113e0
  store i32 %v5_113e0, i32* @lr, align 4
  %v4_113e4 = mul nuw nsw i32 %v4_113d0, 256
  %v5_113e4 = or i32 %v4_113e4, %v4_113c8
  store i32 %v5_113e4, i32* %r3.global-to-local, align 4
  store i32 %v2_11378, i32* @r5, align 4
  store i32 %v4_113b8, i32* @ip, align 4
  %v1_113f8 = add i32 %v2_11398, 10
  store i32 %v1_113f8, i32* %r1.global-to-local, align 4
  %v1_113fc = add i32 %v2_11394, 10
  store i32 %v1_113fc, i32* @r4, align 4
  %v2_11400 = sub i32 %v2_11378, %v5_113d8
  %v3_11400 = icmp uge i32 %v2_11378, %v5_113d8
  store i1 %v3_11400, i1* %cpsr_c.global-to-local, align 1
  %tmp226 = sub i32 0, %v2_11400
  %v6_11400 = and i32 %v2_11378, %tmp226
  %v7_11400 = icmp slt i32 %v6_11400, 0
  %v8_11400 = icmp slt i32 %v2_11400, 0
  store i32 %v2_1138c, i32* %stack_var_-144, align 4
  %v2_11420 = xor i1 %v8_11400, %v7_11400
  br i1 %v2_11420, label %dec_label_pc_11430, label %dec_label_pc_11428

dec_label_pc_11428:                               ; preds = %dec_label_pc_11388
  %v0_11424 = load i32, i32* @sb, align 4
  %v2_11424 = add i32 %v0_11424, %v5_113d8
  store i32 %v2_11424, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11428 = icmp slt i32 %v2_11424, 0
  br i1 %v1_11428, label %dec_label_pc_11430, label %dec_label_pc_1144c

dec_label_pc_11430:                               ; preds = %dec_label_pc_11428, %dec_label_pc_11388, %dec_label_pc_11344, %dec_label_pc_11428.thread
  store i32 %stack_var_-452.061, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11434 = icmp eq i32 %stack_var_-452.061, 0
  br i1 %v2_11434, label %dec_label_pc_1159c, label %dec_label_pc_1143c

dec_label_pc_1143c:                               ; preds = %dec_label_pc_11430
  store i32 %tmp144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_11440, label %dec_label_pc_1159c, label %dec_label_pc_11574

dec_label_pc_1144c:                               ; preds = %dec_label_pc_11428
  store i32 %stack_var_-480.260, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11450 = icmp eq i32 %stack_var_-480.260, 0
  br i1 %v2_11450, label %dec_label_pc_114f4, label %dec_label_pc_11458

dec_label_pc_11458:                               ; preds = %dec_label_pc_1144c
  %v0_11458 = load i32, i32* @fp, align 4
  %v1_11458 = add i32 %v0_11458, 28
  store i32 %v1_11458, i32* %r3.global-to-local, align 4
  %v1_1145c = inttoptr i32 %v1_11458 to i32*
  %v2_1145c = load i32, i32* %v1_1145c, align 4
  store i32 %v2_1145c, i32* @r3, align 4
  %v3_1145c = add i32 %v0_11458, 32
  %v4_1145c = inttoptr i32 %v3_1145c to i32*
  %v5_1145c = load i32, i32* %v4_1145c, align 4
  store i32 %v5_1145c, i32* @ip, align 4
  %v6_1145c = add i32 %v0_11458, 36
  %v7_1145c = inttoptr i32 %v6_1145c to i32*
  %v8_1145c = load i32, i32* %v7_1145c, align 4
  store i32 %v8_1145c, i32* @lr, align 4
  store i32 40, i32* @r2, align 4
  store i32 %v0_11458, i32* @r0, align 4
  store i32 %v2_1132c, i32* @r1, align 4
  %v0_11478 = call i32 @memcpy()
  %v0_1147c = load i32, i32* @fp, align 4
  %v1_1147c = add i32 %v0_1147c, 4
  %v2_1147c = inttoptr i32 %v1_1147c to i32*
  %v3_1147c = load i32, i32* %v2_1147c, align 4
  %v2_11480 = icmp ugt i32 %v3_1147c, 23
  store i1 %v2_11480, i1* %cpsr_c.global-to-local, align 1
  %v7_11480 = icmp eq i32 %v3_1147c, 24
  br i1 %v7_11480, label %dec_label_pc_114a4, label %dec_label_pc_11488

dec_label_pc_11488:                               ; preds = %dec_label_pc_11458
  %v1_11488 = add i32 %v0_1147c, 28
  %v2_11488 = inttoptr i32 %v1_11488 to i32*
  %v3_11488 = load i32, i32* %v2_11488, align 4
  store i32 %v3_11488, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1148c = icmp eq i32 %v3_11488, 0
  br i1 %v2_1148c, label %dec_label_pc_11574, label %dec_label_pc_11494

dec_label_pc_11494:                               ; preds = %dec_label_pc_11488
  store i1 %v2_11498, i1* %cpsr_c.global-to-local, align 1
  br i1 %v7_11498, label %dec_label_pc_114a4, label %bb227

bb227:                                            ; preds = %dec_label_pc_11494
  store i1 %v3_1149c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v8_1149c, label %dec_label_pc_114a4, label %dec_label_pc_11574

dec_label_pc_114a4:                               ; preds = %dec_label_pc_11494, %bb227, %dec_label_pc_11458
  store i32 %v0_10e7c, i32* %r1.global-to-local, align 4
  %v3_114a8 = icmp uge i32 %v3_1147c, %v0_10e7c
  store i1 %v3_114a8, i1* %cpsr_c.global-to-local, align 1
  %v9_114a8 = icmp eq i32 %v3_1147c, %v0_10e7c
  br i1 %v9_114a8, label %dec_label_pc_114b8, label %bb228

bb228:                                            ; preds = %dec_label_pc_114a4
  br label %dec_label_pc_1154c

dec_label_pc_114b8:                               ; preds = %dec_label_pc_114a4
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-452.061, i32* @r5, align 4
  %v1_114c0 = add i32 %v0_1147c, 16
  %v2_114c0 = inttoptr i32 %v1_114c0 to i32*
  %v3_114c0 = load i32, i32* %v2_114c0, align 4
  %v2_114c4 = sub i32 %tmp159, %stack_var_-452.061
  %v1_114c8 = add i32 %v2_114c4, -1
  store i32 %v1_114c8, i32* %r3.global-to-local, align 4
  %v1_114cc = add i32 %v3_114c0, 4
  %v2_114d0 = mul i32 %v1_114cc, %v1_114c8
  store i32 %v2_114d0, i32* %r1.global-to-local, align 4
  %v1_114d4 = add i32 %v0_1147c, 32
  %v2_114d4 = inttoptr i32 %v1_114d4 to i32*
  %v3_114d4 = load i32, i32* %v2_114d4, align 4
  %v3_114d8 = icmp uge i32 %v2_114d0, %v3_114d4
  store i1 %v3_114d8, i1* %cpsr_c.global-to-local, align 1
  %v2_114dc = add i32 %v0_1147c, 36
  %v3_114dc = inttoptr i32 %v2_114dc to i32*
  store i32 %v1_114c8, i32* %v3_114dc, align 4
  %tmp286 = icmp ugt i32 %v2_114d0, %v3_114d4
  br i1 %tmp286, label %dec_label_pc_11574, label %dec_label_pc_114e4

dec_label_pc_114e4:                               ; preds = %dec_label_pc_114b8
  store i32 0, i32* @r7, align 4
  %v1_114ec = load i32, i32* @fp, align 4
  %v2_114ec = add i32 %v1_114ec, 36
  %v3_114ec = inttoptr i32 %v2_114ec to i32*
  store i32 0, i32* %v3_114ec, align 4
  br label %dec_label_pc_1154c

dec_label_pc_114f4:                               ; preds = %dec_label_pc_1144c
  store i32 %v2_1138c, i32* @r0, align 4
  %v0_114f8 = call i32 @free()
  store i32 %v5_113e0, i32* %r3.global-to-local, align 4
  store i32 %v0_10e7c, i32* @ip, align 4
  %v3_11504 = icmp uge i32 %v5_113e0, %v0_10e7c
  store i1 %v3_11504, i1* %cpsr_c.global-to-local, align 1
  %v9_11504 = icmp eq i32 %v5_113e0, %v0_10e7c
  br i1 %v9_11504, label %dec_label_pc_1150c, label %dec_label_pc_1154c

dec_label_pc_1150c:                               ; preds = %dec_label_pc_114f4
  %v0_1150c = load i32, i32* @fp, align 4
  %v1_1150c = add i32 %v0_1150c, 16
  %v2_1150c = inttoptr i32 %v1_1150c to i32*
  %v3_1150c = load i32, i32* %v2_1150c, align 4
  store i32 %v3_1150c, i32* %r1.global-to-local, align 4
  store i32 %v5_113d8, i32* %r3.global-to-local, align 4
  %v3_11514 = icmp uge i32 %v3_1150c, %v5_113d8
  store i1 %v3_11514, i1* %cpsr_c.global-to-local, align 1
  %v9_11514 = icmp eq i32 %v3_1150c, %v5_113d8
  br i1 %v9_11514, label %dec_label_pc_11528, label %dec_label_pc_1151c

dec_label_pc_1151c:                               ; preds = %dec_label_pc_1150c
  %v1_1151c = inttoptr i32 %v0_1150c to i32*
  %v2_1151c = load i32, i32* %v1_1151c, align 4
  store i32 %v2_1151c, i32* @r0, align 4
  %v0_11520 = call i32 @free()
  br label %dec_label_pc_1159c

dec_label_pc_11528:                               ; preds = %dec_label_pc_1150c
  %v1_11528 = add i32 %v0_1150c, 36
  %v2_11528 = inttoptr i32 %v1_11528 to i32*
  %v3_11528 = load i32, i32* %v2_11528, align 4
  %v1_1152c = add i32 %v0_1150c, 28
  %v2_1152c = inttoptr i32 %v1_1152c to i32*
  %v3_1152c = load i32, i32* %v2_1152c, align 4
  store i32 %v3_1152c, i32* @r3, align 4
  %v3_11530 = mul i32 %v3_11528, %v5_113d8
  %v4_11530 = add i32 %v3_1152c, %v3_11530
  store i32 %v4_11530, i32* @r0, align 4
  store i32 %v5_113d8, i32* @r2, align 4
  store i32 %v1_113f8, i32* @r1, align 4
  %v0_1153c = call i32 @memcpy()
  %v0_11540 = load i32, i32* @fp, align 4
  %v1_11540 = add i32 %v0_11540, 36
  %v2_11540 = inttoptr i32 %v1_11540 to i32*
  %v3_11540 = load i32, i32* %v2_11540, align 4
  %v1_11544 = add i32 %v3_11540, 1
  store i32 %v1_11544, i32* %r3.global-to-local, align 4
  store i32 %v1_11544, i32* %v2_11540, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %bb228, %dec_label_pc_114f4, %dec_label_pc_114e4, %dec_label_pc_11528
  %stack_var_-480.1 = phi i32 [ 0, %dec_label_pc_11528 ], [ 0, %dec_label_pc_114f4 ], [ 0, %dec_label_pc_114e4 ], [ 1, %bb228 ]
  %v1_11554 = load i32, i32* @r4, align 4
  %v1_11558 = add nuw nsw i32 %stack_var_-452.061, 1
  store i32 %v1_11558, i32* %r1.global-to-local, align 4
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  %v3_1156c = icmp uge i32 %v1_11558, %tmp159
  store i1 %v3_1156c, i1* %cpsr_c.global-to-local, align 1
  %v5_11570 = icmp slt i32 %v1_11558, %tmp159
  br i1 %v5_11570, label %dec_label_pc_1154c.dec_label_pc_11344_crit_edge, label %dec_label_pc_11574

dec_label_pc_1154c.dec_label_pc_11344_crit_edge:  ; preds = %dec_label_pc_1154c
  %v2_11554 = add i32 %v1_11554, %stack_var_-460.364
  %v0_11348.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11344

dec_label_pc_11574:                               ; preds = %dec_label_pc_1143c, %dec_label_pc_11320, %dec_label_pc_1154c, %dec_label_pc_11488, %dec_label_pc_114b8, %bb227
  %v1_11578 = call i32 @__GI_close(i32 %v3_1114c)
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11580 = icmp eq i32 %arg3, 0
  br i1 %v2_11580, label %.thread21, label %bb230

bb230:                                            ; preds = %dec_label_pc_11574
  %v1_11588 = load i32, i32* @sl, align 4
  %v3_11584 = inttoptr i32 %arg3 to i32*
  store i32 %v1_11588, i32* %v3_11584, align 4
  br label %bb231

.thread21:                                        ; preds = %dec_label_pc_11574
  br label %bb231

bb231:                                            ; preds = %bb230, %.thread21
  store i32 ptrtoint (i32* @global_var_11590.356 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11580, i32 ptrtoint (i32* @global_var_bd80.236 to i32))
  store i32 %v1_10ec4, i32* @r0, align 4
  %v0_11594 = call i32 @free()
  br label %dec_label_pc_11604

dec_label_pc_1159c:                               ; preds = %thread-pre-split, %dec_label_pc_11198, %dec_label_pc_112f8, %dec_label_pc_112f0, %dec_label_pc_112a0, %dec_label_pc_112ac, %dec_label_pc_112b8thread-pre-split, %thread-pre-split.thread, %dec_label_pc_11270, %dec_label_pc_1143c, %dec_label_pc_11430, %dec_label_pc_1115c, %dec_label_pc_1113c, %dec_label_pc_1151c
  %v1_115a0 = add i32 %v0_11060, 1
  store i32 %v1_115a0, i32* @r5, align 4
  br label %dec_label_pc_115ac

dec_label_pc_115ac:                               ; preds = %.thread7, %dec_label_pc_1159c
  %storemerge22 = phi i32 [ -1, %dec_label_pc_1159c ], [ %v7_1125c, %.thread7 ]
  %stack_var_-468.2 = phi i32 [ %v1_115a0, %dec_label_pc_1159c ], [ %v0_11060, %.thread7 ]
  store i32 %storemerge22, i32* @sb, align 4
  %v1_115b0 = add i32 %stack_var_-476.1, -1
  store i32 %v1_115b0, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp232 = icmp slt i32 %v1_115b0, 1
  br i1 %tmp232, label %dec_label_pc_115cc, label %dec_label_pc_10f64

dec_label_pc_115c4:                               ; preds = %dec_label_pc_11110, %bb218, %bb213, %.thread5, %dec_label_pc_10ee0
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_115cc

dec_label_pc_115cc:                               ; preds = %dec_label_pc_115ac, %.thread132, %dec_label_pc_115c4
  %stack_var_-472.1 = phi i32 [ %v1_10ec4, %dec_label_pc_115c4 ], [ 0, %.thread132 ], [ %v1_10ec4, %dec_label_pc_115ac ]
  %stack_var_-488.2 = phi i32 [ -1, %dec_label_pc_115c4 ], [ -1, %.thread132 ], [ %v3_1114c, %dec_label_pc_115ac ]
  %v0_115cc = call i32 @__GI___h_errno_location()
  store i32 %stack_var_-488.2, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v2_115d8 = icmp eq i32 %stack_var_-488.2, -1
  store i1 %v2_115d8, i1* %cpsr_c.global-to-local, align 1
  %v7_115d8 = icmp eq i32 %stack_var_-488.2, -1
  %v2_115dc = inttoptr i32 %v0_115cc to i32*
  store i32 -1, i32* %v2_115dc, align 4
  br i1 %v7_115d8, label %dec_label_pc_115ec, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115cc, %dec_label_pc_11298
  %stack_var_-472.2 = phi i32 [ %stack_var_-472.1, %dec_label_pc_115cc ], [ %v1_10ec4, %dec_label_pc_11298 ]
  %stack_var_-488.3 = phi i32 [ %stack_var_-488.2, %dec_label_pc_115cc ], [ %v3_1114c, %dec_label_pc_11298 ]
  %v1_115e8 = call i32 @__GI_close(i32 %stack_var_-488.3)
  br label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115cc, %dec_label_pc_115e4
  %stack_var_-472.3 = phi i32 [ %stack_var_-472.1, %dec_label_pc_115cc ], [ %stack_var_-472.2, %dec_label_pc_115e4 ]
  store i32 %stack_var_-472.3, i32* @r0, align 4
  %v0_115f0 = call i32 @free()
  %v0_115f4 = load i32, i32* @sl, align 4
  store i32 %v0_115f4, i32* @r0, align 4
  %v0_115f8 = call i32 @free()
  br label %dec_label_pc_11604

dec_label_pc_11604:                               ; preds = %bb231, %dec_label_pc_115ec
  %stack_var_-484.0 = phi i32 [ -1, %dec_label_pc_115ec ], [ %v5_111d4, %bb231 ]
  store i32 %v3_10e68, i32* @r4, align 4
  store i32 %v6_10e68, i32* @r5, align 4
  store i32 %v9_10e68, i32* @r6, align 4
  store i32 %v12_10e68, i32* @r7, align 4
  store i32 %v15_10e68, i32* @r8, align 4
  store i32 %v18_10e68, i32* @sb, align 4
  store i32 %v21_10e68, i32* @sl, align 4
  store i32 %v24_10e68, i32* @fp, align 4
  store i32 %v27_10e68, i32* @lr, align 4
  ret i32 %stack_var_-484.0

; uselistorder directives
  uselistorder i32 %stack_var_-488.2, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-472.1, { 1, 0 }
  uselistorder i32 %v1_115b0, { 1, 2, 0 }
  uselistorder i32 %v1_11558, { 1, 2, 3, 0 }
  uselistorder i32 %v0_1150c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_114c8, { 1, 0, 2 }
  uselistorder i32 %v2_11400, { 1, 0 }
  uselistorder i32 %v5_113d8, { 5, 0, 2, 3, 4, 1, 7, 6, 8 }
  uselistorder i32 %v2_11398, { 3, 4, 0, 5, 6, 1, 2, 7, 8, 9, 10 }
  uselistorder i32 %v2_11394, { 1, 0 }
  uselistorder i32 %v2_11378, { 0, 3, 2, 4, 1, 5, 6 }
  uselistorder i32 %v2_11374, { 1, 0 }
  uselistorder i32 %v1_11370, { 1, 0, 2 }
  uselistorder i32 %stack_var_-452.061, { 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-460.364, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32 %v0_112f0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v2_112cc, { 1, 0 }
  uselistorder i32 %v3_112c0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_112c0, { 0, 2, 1 }
  uselistorder i32 %v2_112b0, { 0, 2, 1 }
  uselistorder i1 %v7_111e4, { 1, 0 }
  uselistorder i32 %v1_111e4, { 1, 0 }
  uselistorder i32 %v0_111e4, { 1, 0 }
  uselistorder i32 %v5_111d4, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v3_1114c, { 1, 0, 2, 9, 7, 6, 5, 8, 4, 10, 11, 3 }
  uselistorder i32 %v6_11104, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11090, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v3_11078, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32 %v1_1106c, { 1, 0 }
  uselistorder i32 %v0_11060, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-464.1, { 1, 0 }
  uselistorder i32 %v0_11018, { 1, 0, 2, 3, 4 }
  uselistorder i1 %v7_10f68, { 1, 0 }
  uselistorder i32 %v1_10f6c, { 0, 2, 1 }
  uselistorder i32 %stack_var_-468.0, { 0, 2, 1 }
  uselistorder i32 %v2_11328, { 1, 0, 2 }
  uselistorder i32 %v1_11238, { 2, 0, 1 }
  uselistorder i32 %v2_110c0, { 1, 0, 2 }
  uselistorder i32 %v2_11098, { 1, 0 }
  uselistorder i32 %v0_10ee0, { 1, 0, 2 }
  uselistorder i32 %v1_10ec4, { 7, 0, 3, 6, 4, 8, 1, 9, 2, 5, 10, 11 }
  uselistorder i32 %v3_10e90, { 5, 1, 3, 2, 4, 0, 6 }
  uselistorder i32 %v0_10e7c, { 10, 9, 8, 7, 6, 5, 2, 11, 0, 1, 4, 3 }
  uselistorder i16* %stack_var_-104, { 2, 1, 0 }
  uselistorder i32* %stack_var_-192, { 2, 0, 3, 1, 4 }
  uselistorder i32 %tmp159, { 3, 8, 7, 0, 6, 2, 4, 1, 5 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 53, 20, 21, 54, 2, 22, 23, 24, 25, 26, 27, 28, 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 29, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 19, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 54, 17, 18, 52, 20, 21, 22, 23, 24, 55, 25, 26, 27, 28, 29, 30, 31, 32, 33, 53, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 (i32)* @__GI_close, { 3, 2, 0, 4, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__decode_dotted, { 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 ()* @__GI___h_errno_location, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_recv, { 1, 0 }
  uselistorder i32 1000, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 1, 2, 0 }
  uselistorder i32 27, { 2, 1, 0 }
  uselistorder i32 9512, { 1, 0, 2, 3 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11604, { 1, 0 }
  uselistorder label %dec_label_pc_115ec, { 1, 0 }
  uselistorder label %dec_label_pc_115cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115c4, { 0, 1, 4, 2, 3 }
  uselistorder label %dec_label_pc_115ac, { 1, 0 }
  uselistorder label %dec_label_pc_1159c, { 13, 9, 10, 2, 3, 6, 5, 4, 8, 0, 7, 1, 11, 12 }
  uselistorder label %bb231, { 1, 0 }
  uselistorder label %dec_label_pc_11574, { 2, 4, 5, 3, 0, 1 }
  uselistorder label %dec_label_pc_1154c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_114a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11430, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_11344, { 1, 0 }
  uselistorder label %dec_label_pc_112f0, { 1, 0 }
  uselistorder label %dec_label_pc_112c0, { 1, 0 }
  uselistorder label %dec_label_pc_11298, { 1, 0 }
  uselistorder label %dec_label_pc_111e4, { 1, 0, 2 }
  uselistorder label %bb218, { 1, 0 }
  uselistorder label %dec_label_pc_11040, { 1, 0 }
  uselistorder label %dec_label_pc_11004, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
}

define i32 @"$d"(i64* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11614:
  %v0_11614 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11614, label %.thread5, label %.thread13

.thread5:                                         ; preds = %dec_label_pc_11614
  call void @llvm.trap()
  unreachable

.thread13:                                        ; preds = %dec_label_pc_11614
  %tmp = ptrtoint i64* %arg1 to i32
  ret i32 %tmp
}

define i32 @skip_nospace() local_unnamed_addr {
entry:
  store i32 140, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @ip, align 4
  call void @llvm.trap()
  unreachable
}

define i32 @skip_and_NUL_space(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_116a8 = load i32, i32* @r4, align 4
  store i32 %v3_116a8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @ip, align 4
  store i32 140, i32* %r4.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v0_116b8.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_116b89 = inttoptr i32 %v0_116b8.pre to i8*
  %v2_116b810 = load i8, i8* %v1_116b89, align 1
  %v2_116bc12 = icmp eq i8 %v2_116b810, 0
  store i1 %v2_116bc12, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116bc12, label %dec_label_pc_116ec, label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %entry, %bb8.dec_label_pc_116c8_crit_edge
  %v1_116c8 = phi i32 [ %v1_116c8.pre, %bb8.dec_label_pc_116c8_crit_edge ], [ 140, %entry ]
  %v0_116c8 = phi i32 [ %v0_116c8.pre, %bb8.dec_label_pc_116c8_crit_edge ], [ ptrtoint (i32* @global_var_1f010.70 to i32), %entry ]
  %v2_116b816 = phi i8 [ %v2_116b8, %bb8.dec_label_pc_116c8_crit_edge ], [ %v2_116b810, %entry ]
  %v2_116c017.in.in = phi i8 [ %v2_116b8, %bb8.dec_label_pc_116c8_crit_edge ], [ %v2_116b810, %entry ]
  %v1_116b815 = phi i8* [ %v1_116b8, %bb8.dec_label_pc_116c8_crit_edge ], [ %v1_116b89, %entry ]
  %v2_116e014 = phi i32 [ %v2_116e4, %bb8.dec_label_pc_116c8_crit_edge ], [ %v0_116b8.pre, %entry ]
  %v2_116c017.in = zext i8 %v2_116c017.in.in to i32
  %v2_116c017 = mul nuw nsw i32 %v2_116c017.in, 2
  %v2_116c8 = add i32 %v1_116c8, %v0_116c8
  %v3_116c8 = inttoptr i32 %v2_116c8 to i32*
  %v4_116c8 = load i32, i32* %v3_116c8, align 4
  %v2_116cc = add i32 %v4_116c8, %v2_116c017
  %v3_116cc = inttoptr i32 %v2_116cc to i16*
  %v4_116cc = load i16, i16* %v3_116cc, align 2
  %v1_116d0 = and i16 %v4_116cc, 32
  %v2_116d0 = icmp eq i16 %v1_116d0, 0
  store i1 %v2_116d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116d0, label %dec_label_pc_116ec, label %dec_label_pc_116d8

dec_label_pc_116d8:                               ; preds = %dec_label_pc_116c8
  %v7_116d8 = icmp eq i8 %v2_116b816, 35
  br i1 %v7_116d8, label %bb7, label %bb

bb:                                               ; preds = %dec_label_pc_116d8
  %v8_116dc = icmp eq i8 %v2_116b816, 10
  br label %bb7

bb7:                                              ; preds = %dec_label_pc_116d8, %bb
  %storemerge = phi i1 [ %v8_116dc, %bb ], [ %v7_116d8, %dec_label_pc_116d8 ]
  store i1 %storemerge, i1* %cpsr_z.global-to-local, align 1
  %v0_116e0 = load i32, i32* %lr.global-to-local, align 4
  %v1_116e0 = trunc i32 %v0_116e0 to i8
  store i8 %v1_116e0, i8* %v1_116b815, align 1
  %v0_116e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_116f0.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v0_116e4, label %dec_label_pc_116ec, label %bb8

bb8:                                              ; preds = %bb7
  %v2_116e4 = add i32 %v1_116f0.pre, 1
  store i32 %v2_116e4, i32* %r0.global-to-local, align 4
  %v1_116b8 = inttoptr i32 %v2_116e4 to i8*
  %v2_116b8 = load i8, i8* %v1_116b8, align 1
  %v2_116bc = icmp eq i8 %v2_116b8, 0
  store i1 %v2_116bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116bc, label %dec_label_pc_116ec, label %bb8.dec_label_pc_116c8_crit_edge

bb8.dec_label_pc_116c8_crit_edge:                 ; preds = %bb8
  %v0_116c8.pre = load i32, i32* @ip, align 4
  %v1_116c8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116c8

dec_label_pc_116ec:                               ; preds = %bb8, %dec_label_pc_116c8, %bb7, %entry
  %v1_116f0 = phi i32 [ %v0_116b8.pre, %entry ], [ %v1_116f0.pre, %bb7 ], [ %v2_116e014, %dec_label_pc_116c8 ], [ %v2_116e4, %bb8 ]
  %v2_116ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_116ec, i32* @r4, align 4
  ret i32 %v1_116f0

; uselistorder directives
  uselistorder i8 %v2_116b8, { 2, 1, 0 }
  uselistorder i8* %v1_116b8, { 1, 0 }
  uselistorder i32 %v2_116e4, { 0, 2, 3, 1 }
  uselistorder i1 %v2_116d0, { 1, 0 }
  uselistorder i8 %v2_116b816, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_116ec, { 0, 2, 1, 3 }
  uselistorder label %bb7, { 1, 0 }
  uselistorder label %dec_label_pc_116c8, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-544 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-304 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-68 = alloca i16, align 2
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-560 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_116fc = load i32, i32* @r4, align 4
  store i32 %v3_116fc, i32* %stack_var_-36, align 4
  %v15_116fc = load i32, i32* @r8, align 4
  %v18_116fc = load i32, i32* @sb, align 4
  %v21_116fc = load i32, i32* @sl, align 4
  %v24_116fc = load i32, i32* @fp, align 4
  %v27_116fc = load i32, i32* @lr, align 4
  store i32 10468, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  %v4_1170c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 10468) to i32*), align 4
  store i32 %v4_1170c, i32* @r4, align 4
  %v2_11710 = icmp eq i32 %v4_1170c, 0
  br i1 %v2_11710, label %dec_label_pc_1171c, label %dec_label_pc_1174c

dec_label_pc_1171c:                               ; preds = %entry
  %v2_11720 = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_11720, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37256), i32* %r0.global-to-local, align 4
  %v2_11728 = call i32 @__GI_stat(i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37256), i32 %v2_11720)
  store i32 %v2_11728, i32* %r0.global-to-local, align 4
  %v2_1172c = icmp eq i32 %v2_11728, 0
  %v1_11730 = load i32, i32* @r4, align 4
  %.v1_11730 = select i1 %v2_1172c, i32 %tmp38, i32 %v1_11730
  store i32 9540, i32* %r1.global-to-local, align 4
  store i32 %.v1_11730, i32* %r2.global-to-local, align 4
  %v0_1173c = load i32, i32* @r5, align 4
  %v2_1173c = add i32 %v0_1173c, 9540
  %v3_1173c = inttoptr i32 %v2_1173c to i32*
  %v4_1173c = load i32, i32* %v3_1173c, align 4
  store i32 %v4_1173c, i32* %r3.global-to-local, align 4
  %v9_11740 = icmp eq i32 %v4_1173c, %.v1_11730
  br i1 %v9_11740, label %bb58, label %bb

bb:                                               ; preds = %dec_label_pc_1171c
  store i32 %.v1_11730, i32* %v3_1173c, align 4
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_1171c, %bb
  store i32 71500, i32* @lr, align 4
  %v1_11748 = xor i1 %v9_11740, true
  call void @__pseudo_cond_branch(i1 %v1_11748, i32 ptrtoint (i32* @global_var_11b58.365 to i32))
  %v0_11750.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1174c

dec_label_pc_1174c:                               ; preds = %entry, %bb58
  %v2_11764 = phi i32 [ ptrtoint (i32* @global_var_1f010.70 to i32), %entry ], [ %v0_11750.pre, %bb58 ]
  store i32 10480, i32* %r3.global-to-local, align 4
  %v2_11750 = add i32 %v2_11764, 10480
  %v3_11750 = inttoptr i32 %v2_11750 to i32*
  %v4_11750 = load i32, i32* %v3_11750, align 4
  store i32 %v4_11750, i32* %r3.global-to-local, align 4
  %v2_11754 = icmp eq i32 %v4_11750, 0
  br i1 %v2_11754, label %dec_label_pc_1175c, label %dec_label_pc_11af0

dec_label_pc_1175c:                               ; preds = %dec_label_pc_1174c
  %v4_11764 = add i32 %v2_11764, 726
  %v5_11764 = inttoptr i32 %v4_11764 to i8*
  store i8 5, i8* %v5_11764, align 1
  store i32 -37256, i32* %r0.global-to-local, align 4
  store i32 727, i32* %r3.global-to-local, align 4
  store i32 -37372, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v3_11778 = load i32, i32* @r5, align 4
  %v5_11778 = add i32 %v3_11778, 727
  %v6_11778 = inttoptr i32 %v5_11778 to i8*
  store i8 3, i8* %v6_11778, align 1
  %v0_1177c = load i32, i32* @r5, align 4
  %v1_1177c = load i32, i32* %r0.global-to-local, align 4
  %v2_1177c = add i32 %v1_1177c, %v0_1177c
  store i32 %v2_1177c, i32* @r0, align 4
  %v1_11780 = load i32, i32* %r1.global-to-local, align 4
  %v2_11780 = add i32 %v1_11780, %v0_1177c
  store i32 %v2_11780, i32* @r1, align 4
  %v5_11784 = call i32 @__GI_fopen(i32 %v2_1177c, i32 %v2_11780, i32 3, i32 727)
  store i32 %v5_11784, i32* %r0.global-to-local, align 4
  store i32 %v5_11784, i32* @fp, align 4
  %v2_11788 = icmp eq i32 %v5_11784, 0
  br i1 %v2_11788, label %dec_label_pc_11a14, label %dec_label_pc_119bc

dec_label_pc_11794:                               ; preds = %dec_label_pc_119bc, %dec_label_pc_119f0.backedge
  store i32 %v2_119f0, i32* %r0.global-to-local, align 4
  %v2_11798 = call i32 @skip_and_NUL_space(i8* %v1_11798)
  store i32 %v2_11798, i32* %r0.global-to-local, align 4
  store i32 %v2_11798, i32* @r4, align 4
  %v0_117a0 = call i32 @skip_nospace()
  store i32 %v0_117a0, i32* %r0.global-to-local, align 4
  %v1_117a4 = inttoptr i32 %v0_117a0 to i8*
  %v2_117a4 = call i32 @skip_and_NUL_space(i8* %v1_117a4)
  store i32 %v2_119c0, i32* @r1, align 4
  store i32 %v2_117a4, i32* @r7, align 4
  %v0_117b0 = load i32, i32* @r4, align 4
  store i32 %v0_117b0, i32* %r0.global-to-local, align 4
  %v2_117b4 = inttoptr i32 %v0_117b0 to i8*
  %v3_117b4 = call i32 @__GI_strcoll(i8* %v2_117b4, i32 %v2_119c0)
  store i32 %v3_117b4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v3_117b4, 16777216
  %v1_117b8 = sdiv i32 %sext, 16777216
  store i32 %v1_117b8, i32* @r6, align 4
  %sext.off = or i32 %sext, 16777215
  %tmp = icmp ult i32 %sext.off, 33554431
  br i1 %tmp, label %dec_label_pc_117c0, label %dec_label_pc_1187c

dec_label_pc_117c0:                               ; preds = %dec_label_pc_11794
  %v0_117c0 = load i32, i32* @r7, align 4
  store i32 %v0_117c0, i32* %r0.global-to-local, align 4
  %v0_117c4 = call i32 @skip_nospace()
  %v1_117c4 = inttoptr i32 %v0_117c4 to i8*
  store i32 %v2_117c8, i32* @r4, align 4
  %v0_117cc = load i32, i32* @r6, align 4
  %v1_117cc = trunc i32 %v0_117cc to i8
  store i8 %v1_117cc, i8* %v1_117c4, align 1
  %v0_117d0 = load i32, i32* @r6, align 4
  store i32 %v0_117d0, i32* %r1.global-to-local, align 4
  store i32 28, i32* @r2, align 4
  store i32 %v2_117c8, i32* %r0.global-to-local, align 4
  %v3_117dc = call i32 @__GI_memset(i8* %v2_117dc, i32 %v0_117d0)
  store i32 10, i32* %r0.global-to-local, align 4
  %v0_117e4 = load i32, i32* @r7, align 4
  store i32 %v0_117e4, i32* %r1.global-to-local, align 4
  store i32 %v2_117e8, i32* %r2.global-to-local, align 4
  %v3_117ec = inttoptr i32 %v0_117e4 to i8*
  %v4_117ec = call i32 @inet_pton(i32 10, i8* %v3_117ec, i32 %v2_117e8)
  store i32 %v4_117ec, i32* %r0.global-to-local, align 4
  %tmp59 = icmp slt i32 %v4_117ec, 1
  br i1 %tmp59, label %dec_label_pc_117fc, label %dec_label_pc_11818

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117c0
  %v0_117fc = load i32, i32* @r7, align 4
  store i32 %v0_117fc, i32* %r1.global-to-local, align 4
  store i32 %v2_11800, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_11808 = inttoptr i32 %v0_117fc to i8*
  %v4_11808 = call i32 @inet_pton(i32 2, i8* %v3_11808, i32 %v2_11800)
  store i32 %v4_11808, i32* %r0.global-to-local, align 4
  %tmp60 = icmp slt i32 %v4_11808, 1
  br i1 %tmp60, label %dec_label_pc_119f0.backedge, label %dec_label_pc_11818

dec_label_pc_11818:                               ; preds = %dec_label_pc_117fc, %dec_label_pc_117c0
  %v0_1181c.off0 = phi i16 [ 10, %dec_label_pc_117c0 ], [ 2, %dec_label_pc_117fc ]
  store i32 %v2_11818, i32* %r2.global-to-local, align 4
  store i16 %v0_1181c.off0, i16* %stack_var_-68, align 2
  store i32 13568, i32* %r3.global-to-local, align 4
  store i32 10480, i32* @r7, align 4
  %v0_1182c = load i32, i32* @r5, align 4
  %v2_1182c = add i32 %v0_1182c, 10480
  %v3_1182c = inttoptr i32 %v2_1182c to i32*
  %v4_1182c = load i32, i32* %v3_1182c, align 4
  store i32 10476, i32* @sl, align 4
  %v1_11834 = add i32 %v4_1182c, 1
  store i32 %v1_11834, i32* %r3.global-to-local, align 4
  store i32 28, i32* @r8, align 4
  %v2_1183c = mul i32 %v1_11834, 28
  store i32 %v2_1183c, i32* %r1.global-to-local, align 4
  %v2_11840 = add i32 %v0_1182c, 10476
  %v3_11840 = inttoptr i32 %v2_11840 to i32*
  %v4_11840 = load i32, i32* %v3_11840, align 4
  store i32 %v4_11840, i32* %r0.global-to-local, align 4
  %v2_11844 = inttoptr i32 %v4_11840 to i32*
  %v3_11844 = call i32 @realloc(i32* %v2_11844, i32 %v2_1183c)
  store i32 %v3_11844, i32* %r0.global-to-local, align 4
  store i32 %v3_11844, i32* @r6, align 4
  %v2_11848 = icmp eq i32 %v3_11844, 0
  br i1 %v2_11848, label %dec_label_pc_119f0.backedge, label %dec_label_pc_11850

dec_label_pc_11850:                               ; preds = %dec_label_pc_11818
  %v0_11850 = load i32, i32* @r5, align 4
  %v1_11850 = load i32, i32* @r7, align 4
  %v2_11850 = add i32 %v1_11850, %v0_11850
  %v3_11850 = inttoptr i32 %v2_11850 to i32*
  %v4_11850 = load i32, i32* %v3_11850, align 4
  store i32 %v4_11850, i32* %r4.global-to-local, align 4
  %v1_11854 = load i32, i32* @r8, align 4
  %v3_11854 = mul i32 %v1_11854, %v4_11850
  %v4_11854 = add i32 %v3_11854, %v3_11844
  store i32 %v4_11854, i32* %lr.global-to-local, align 4
  %v2_1185c = load i16, i16* %stack_var_-68, align 2
  %v3_1185c = sext i16 %v2_1185c to i32
  store i32 %v3_1185c, i32* %r0.global-to-local, align 4
  %v6_1185c = load i32, i32* %stack_var_-64, align 4
  store i32 %v6_1185c, i32* %r1.global-to-local, align 4
  %v9_1185c = load i32, i32* %stack_var_-60, align 4
  store i32 %v9_1185c, i32* %r2.global-to-local, align 4
  store i32 %v14_1185c, i32* @ip, align 4
  %v2_11860 = load i32, i32* @sl, align 4
  %v3_11860 = add i32 %v2_11860, %v0_11850
  %v4_11860 = inttoptr i32 %v3_11860 to i32*
  store i32 %v3_11844, i32* %v4_11860, align 4
  %v0_11864 = load i32, i32* %lr.global-to-local, align 4
  %v1_11864 = inttoptr i32 %v0_11864 to i32*
  %v2_11864 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_11864, i32* %v1_11864, align 4
  %v3_11864 = add i32 %v0_11864, 4
  %v4_11864 = inttoptr i32 %v3_11864 to i32*
  %v5_11864 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_11864, i32* %v4_11864, align 4
  %v6_11864 = add i32 %v0_11864, 8
  %v7_11864 = inttoptr i32 %v6_11864 to i32*
  %v8_11864 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_11864, i32* %v7_11864, align 4
  %v9_11864 = add i32 %v0_11864, 12
  %v10_11864 = inttoptr i32 %v9_11864 to i32*
  %v11_11864 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_11864, i32* %v10_11864, align 4
  %v12_11864 = add i32 %v0_11864, 16
  store i32 %v12_11864, i32* @lr, align 4
  %v2_11868 = load i32, i32* %stack_var_-52, align 4
  store i32 %v2_11868, i32* %r0.global-to-local, align 4
  %v0_1186c = load i32, i32* %r4.global-to-local, align 4
  %v1_1186c = add i32 %v0_1186c, 1
  store i32 %v1_1186c, i32* %r4.global-to-local, align 4
  %v1_11870 = inttoptr i32 %v12_11864 to i32*
  store i32 %v2_11868, i32* %v1_11870, align 4
  %v3_11870 = add i32 %v0_11864, 20
  %v4_11870 = inttoptr i32 %v3_11870 to i32*
  %v5_11870 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_11870, i32* %v4_11870, align 4
  %v6_11870 = add i32 %v0_11864, 24
  %v7_11870 = inttoptr i32 %v6_11870 to i32*
  %v8_11870 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_11870, i32* %v7_11870, align 4
  %v0_11874 = load i32, i32* %r4.global-to-local, align 4
  %v1_11874 = load i32, i32* @r5, align 4
  %v2_11874 = load i32, i32* @r7, align 4
  %v3_11874 = add i32 %v2_11874, %v1_11874
  %v4_11874 = inttoptr i32 %v3_11874 to i32*
  store i32 %v0_11874, i32* %v4_11874, align 4
  br label %dec_label_pc_119f0.backedge

dec_label_pc_1187c:                               ; preds = %dec_label_pc_11794
  %v0_1187c = load i32, i32* @r4, align 4
  store i32 %v0_1187c, i32* %r0.global-to-local, align 4
  store i32 %v2_119cc, i32* @r1, align 4
  %v2_11884 = inttoptr i32 %v0_1187c to i8*
  %v3_11884 = call i32 @__GI_strcoll(i8* %v2_11884, i32 %v2_119cc)
  store i32 %v3_11884, i32* %r0.global-to-local, align 4
  %v2_11888 = icmp eq i32 %v3_11884, 0
  br i1 %v2_11888, label %dec_label_pc_118bc, label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_1187c
  %v0_11890 = load i32, i32* @r4, align 4
  store i32 %v0_11890, i32* %r0.global-to-local, align 4
  store i32 %v2_119d8, i32* @r1, align 4
  %v2_11898 = inttoptr i32 %v0_11890 to i8*
  %v3_11898 = call i32 @__GI_strcoll(i8* %v2_11898, i32 %v2_119d8)
  store i32 %v3_11898, i32* %r0.global-to-local, align 4
  %v2_1189c = icmp eq i32 %v3_11898, 0
  br i1 %v2_1189c, label %dec_label_pc_118bc, label %dec_label_pc_1193c

dec_label_pc_118a8:                               ; preds = %dec_label_pc_118bc, %dec_label_pc_118a8.dec_label_pc_118a8_crit_edge
  %v2_118ac = phi i32 [ %v1_118c0, %dec_label_pc_118a8.dec_label_pc_118a8_crit_edge ], [ %v1_118c010, %dec_label_pc_118bc ]
  %v0_118ac = phi i32 [ %v1_118c8, %dec_label_pc_118a8.dec_label_pc_118a8_crit_edge ], [ %v1_118c817, %dec_label_pc_118bc ]
  %v1_118a8 = phi i32 [ %v1_118a8.pre, %dec_label_pc_118a8.dec_label_pc_118a8_crit_edge ], [ 10472, %dec_label_pc_118bc ]
  %v1_118ac = phi i32 [ %v0_118c0, %dec_label_pc_118a8.dec_label_pc_118a8_crit_edge ], [ %v0_118c09, %dec_label_pc_118bc ]
  %v2_118a8 = add i32 %v1_118ac, %v1_118a8
  %v3_118a8 = inttoptr i32 %v2_118a8 to i32*
  %v4_118a8 = load i32, i32* %v3_118a8, align 4
  store i32 %v4_118a8, i32* %r3.global-to-local, align 4
  %v3_118ac = add i32 %v1_118ac, %v2_118ac
  %v4_118ac = inttoptr i32 %v3_118ac to i32*
  store i32 %v0_118ac, i32* %v4_118ac, align 4
  %v0_118b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_118b0 = load i32, i32* %r2.global-to-local, align 4
  %v4_118b0 = mul i32 %v1_118b0, 4
  %v5_118b0 = add i32 %v4_118b0, %v0_118b0
  %v6_118b0 = inttoptr i32 %v5_118b0 to i32*
  %v7_118b0 = load i32, i32* %v6_118b0, align 4
  store i32 %v7_118b0, i32* @r0, align 4
  %v0_118b4 = call i32 @free()
  store i32 %v0_118b4, i32* %r0.global-to-local, align 4
  %v0_118c0 = load i32, i32* @r5, align 4
  %v1_118c0 = load i32, i32* @sb, align 4
  %v2_118c0 = add i32 %v1_118c0, %v0_118c0
  %v3_118c0 = inttoptr i32 %v2_118c0 to i32*
  %v4_118c0 = load i32, i32* %v3_118c0, align 4
  store i32 %v4_118c0, i32* %r3.global-to-local, align 4
  %v2_118c4 = icmp eq i32 %v4_118c0, 0
  %v1_118c8 = add i32 %v4_118c0, -1
  store i32 %v1_118c8, i32* %r2.global-to-local, align 4
  br i1 %v2_118c4, label %dec_label_pc_118d0, label %dec_label_pc_118a8.dec_label_pc_118a8_crit_edge

dec_label_pc_118a8.dec_label_pc_118a8_crit_edge:  ; preds = %dec_label_pc_118a8
  %v1_118a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_118a8

dec_label_pc_118bc:                               ; preds = %dec_label_pc_11890, %dec_label_pc_1187c
  store i32 10472, i32* @r4, align 4
  %v0_118c09 = load i32, i32* @r5, align 4
  %v1_118c010 = load i32, i32* @sb, align 4
  %v2_118c011 = add i32 %v1_118c010, %v0_118c09
  %v3_118c012 = inttoptr i32 %v2_118c011 to i32*
  %v4_118c013 = load i32, i32* %v3_118c012, align 4
  store i32 %v4_118c013, i32* %r3.global-to-local, align 4
  %v2_118c415 = icmp eq i32 %v4_118c013, 0
  %v1_118c817 = add i32 %v4_118c013, -1
  store i32 %v1_118c817, i32* %r2.global-to-local, align 4
  br i1 %v2_118c415, label %dec_label_pc_118d0, label %dec_label_pc_118a8

dec_label_pc_118d0:                               ; preds = %dec_label_pc_118a8, %dec_label_pc_118bc
  store i32 10472, i32* @r6, align 4
  br label %dec_label_pc_118d4

dec_label_pc_118d4:                               ; preds = %dec_label_pc_11918, %dec_label_pc_118d0
  %v0_118d4 = load i32, i32* @r7, align 4
  store i32 %v0_118d4, i32* %r0.global-to-local, align 4
  %v0_118d8 = call i32 @skip_nospace()
  store i32 %v0_118d8, i32* %r0.global-to-local, align 4
  %v1_118dc = inttoptr i32 %v0_118d8 to i8*
  %v2_118dc = call i32 @skip_and_NUL_space(i8* %v1_118dc)
  store i32 %v2_118dc, i32* %r0.global-to-local, align 4
  %v0_118e0 = load i32, i32* @r5, align 4
  %v1_118e0 = load i32, i32* @sb, align 4
  %v2_118e0 = add i32 %v1_118e0, %v0_118e0
  %v3_118e0 = inttoptr i32 %v2_118e0 to i32*
  %v4_118e0 = load i32, i32* %v3_118e0, align 4
  store i32 %v2_118dc, i32* @r4, align 4
  %tmp69 = mul i32 %v4_118e0, 4
  %v3_118ec = add i32 %tmp69, 4
  store i32 %v3_118ec, i32* %r1.global-to-local, align 4
  %v1_118f0 = load i32, i32* @r6, align 4
  %v2_118f0 = add i32 %v1_118f0, %v0_118e0
  %v3_118f0 = inttoptr i32 %v2_118f0 to i32*
  %v4_118f0 = load i32, i32* %v3_118f0, align 4
  store i32 %v4_118f0, i32* %r0.global-to-local, align 4
  %v2_118f4 = inttoptr i32 %v4_118f0 to i32*
  %v3_118f4 = call i32 @realloc(i32* %v2_118f4, i32 %v3_118ec)
  store i32 %v3_118f4, i32* %r3.global-to-local, align 4
  %v2_118f8 = icmp eq i32 %v3_118f4, 0
  %v0_118fc = load i32, i32* @r7, align 4
  store i32 %v0_118fc, i32* %r0.global-to-local, align 4
  %v0_11900 = load i32, i32* @r4, align 4
  store i32 %v0_11900, i32* @r7, align 4
  br i1 %v2_118f8, label %dec_label_pc_119f0.backedge, label %dec_label_pc_11908

dec_label_pc_11908:                               ; preds = %dec_label_pc_118d4
  %v1_11908 = load i32, i32* @r5, align 4
  %v2_11908 = load i32, i32* @r6, align 4
  %v3_11908 = add i32 %v2_11908, %v1_11908
  %v4_11908 = inttoptr i32 %v3_11908 to i32*
  store i32 %v3_118f4, i32* %v4_11908, align 4
  %v1_1190c = inttoptr i32 %v0_118fc to i8*
  %v2_1190c = call i32 @__GI_strdup(i8* %v1_1190c)
  store i32 %v2_1190c, i32* %r0.global-to-local, align 4
  %v2_11910 = icmp eq i32 %v2_1190c, 0
  br i1 %v2_11910, label %dec_label_pc_119f0.backedge, label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %dec_label_pc_11908
  %v0_11918 = load i32, i32* @r5, align 4
  %v1_11918 = load i32, i32* @sb, align 4
  %v2_11918 = add i32 %v1_11918, %v0_11918
  %v3_11918 = inttoptr i32 %v2_11918 to i32*
  %v4_11918 = load i32, i32* %v3_11918, align 4
  store i32 %v4_11918, i32* %r3.global-to-local, align 4
  %v1_1191c = load i32, i32* @r6, align 4
  %v2_1191c = add i32 %v1_1191c, %v0_11918
  %v3_1191c = inttoptr i32 %v2_1191c to i32*
  %v4_1191c = load i32, i32* %v3_1191c, align 4
  store i32 %v4_1191c, i32* %r2.global-to-local, align 4
  %v1_11920 = add i32 %v4_11918, 1
  store i32 %v1_11920, i32* %r1.global-to-local, align 4
  %v5_11924 = mul i32 %v4_11918, 4
  %v6_11924 = add i32 %v4_1191c, %v5_11924
  %v7_11924 = inttoptr i32 %v6_11924 to i32*
  store i32 %v2_1190c, i32* %v7_11924, align 4
  %v0_11928 = load i32, i32* %r1.global-to-local, align 4
  %v1_11928 = load i32, i32* @r5, align 4
  %v2_11928 = load i32, i32* @sb, align 4
  %v3_11928 = add i32 %v2_11928, %v1_11928
  %v4_11928 = inttoptr i32 %v3_11928 to i32*
  store i32 %v0_11928, i32* %v4_11928, align 4
  %v0_1192c = load i32, i32* @r4, align 4
  %v1_1192c = inttoptr i32 %v0_1192c to i8*
  %v2_1192c = load i8, i8* %v1_1192c, align 1
  %v3_1192c = zext i8 %v2_1192c to i32
  store i32 %v3_1192c, i32* %r3.global-to-local, align 4
  %v2_11930 = icmp eq i8 %v2_1192c, 0
  br i1 %v2_11930, label %dec_label_pc_119f0.backedge, label %dec_label_pc_118d4

dec_label_pc_1193c:                               ; preds = %dec_label_pc_11890
  %v0_1193c = load i32, i32* @r4, align 4
  store i32 %v0_1193c, i32* %r0.global-to-local, align 4
  %v2_11940 = load i32, i32* %stack_var_-560, align 4
  store i32 %v2_11940, i32* @r1, align 4
  %v2_11944 = inttoptr i32 %v0_1193c to i8*
  %v3_11944 = call i32 @__GI_strcoll(i8* %v2_11944, i32 %v2_11940)
  store i32 %v3_11944, i32* %r0.global-to-local, align 4
  %sext2 = mul i32 %v3_11944, 16777216
  %v1_11948 = sdiv i32 %sext2, 16777216
  store i32 %v1_11948, i32* @r4, align 4
  %sext2.off = or i32 %sext2, 16777215
  %tmp70 = icmp ult i32 %sext2.off, 33554431
  br i1 %tmp70, label %dec_label_pc_11950, label %dec_label_pc_119f0.backedge

dec_label_pc_11950:                               ; preds = %dec_label_pc_1193c
  %v0_11950 = load i32, i32* @r7, align 4
  %v2_11950 = icmp eq i32 %v0_11950, 0
  br i1 %v2_11950, label %dec_label_pc_119f0.backedge, label %dec_label_pc_11958

dec_label_pc_11958:                               ; preds = %dec_label_pc_11950
  store i32 %v0_11950, i32* @r0, align 4
  store i32 58, i32* %r1.global-to-local, align 4
  %v2_11960 = call i32 @__GI_strchr(i32 %v0_11950, i32 58)
  store i32 %v2_11960, i32* %r0.global-to-local, align 4
  store i32 %v2_11960, i32* @r6, align 4
  %v3_11964 = icmp eq i32 %v2_11960, 0
  br i1 %v3_11964, label %dec_label_pc_119f0.backedge, label %dec_label_pc_1196c

dec_label_pc_1196c:                               ; preds = %dec_label_pc_11958
  store i32 -37200, i32* %r1.global-to-local, align 4
  %v0_11970 = load i32, i32* @r4, align 4
  %v1_11970 = trunc i32 %v0_11970 to i8
  %v3_11970 = inttoptr i32 %v2_11960 to i8*
  store i8 %v1_11970, i8* %v3_11970, align 1
  %v0_11974 = load i32, i32* @r5, align 4
  %v1_11974 = load i32, i32* %r1.global-to-local, align 4
  %v2_11974 = add i32 %v1_11974, %v0_11974
  store i32 %v2_11974, i32* @r1, align 4
  %v0_11978 = load i32, i32* @r7, align 4
  store i32 %v0_11978, i32* %r0.global-to-local, align 4
  %v2_1197c = inttoptr i32 %v0_11978 to i8*
  %v3_1197c = call i32 @__GI_strcoll(i8* %v2_1197c, i32 %v2_11974)
  store i32 %v3_1197c, i32* %r0.global-to-local, align 4
  %v2_11980 = icmp eq i32 %v3_1197c, 0
  br i1 %v2_11980, label %dec_label_pc_119a8, label %dec_label_pc_1198c

dec_label_pc_1198c:                               ; preds = %dec_label_pc_1196c
  %v0_11990 = load i32, i32* @r7, align 4
  store i32 %v0_11990, i32* %r0.global-to-local, align 4
  %v0_11994 = load i32, i32* @r5, align 4
  %v2_11994 = add i32 %v0_11994, -37192
  store i32 %v2_11994, i32* @r1, align 4
  %v2_11998 = inttoptr i32 %v0_11990 to i8*
  %v3_11998 = call i32 @__GI_strcoll(i8* %v2_11998, i32 %v2_11994)
  store i32 %v3_11998, i32* %r0.global-to-local, align 4
  %v2_1199c = icmp eq i32 %v3_11998, 0
  br i1 %v2_1199c, label %dec_label_pc_119a8, label %dec_label_pc_119f0.backedge

dec_label_pc_119a8:                               ; preds = %dec_label_pc_1198c, %dec_label_pc_1196c
  %storemerge = phi i32 [ 726, %dec_label_pc_1196c ], [ 727, %dec_label_pc_1198c ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v0_119a8 = load i32, i32* @r6, align 4
  %v1_119a8 = add i32 %v0_119a8, 1
  store i32 %v1_119a8, i32* @r0, align 4
  %v0_119ac = load i32, i32* @r5, align 4
  %v2_119ac = add i32 %v0_119ac, %storemerge
  store i32 %v2_119ac, i32* @r4, align 4
  %v1_119b0 = call i32 @atol(i32 %v1_119a8)
  %v2_119b0 = trunc i32 %v1_119b0 to i8
  store i32 %v1_119b0, i32* %r0.global-to-local, align 4
  %v3_119b4 = load i32, i32* @r4, align 4
  %v4_119b4 = inttoptr i32 %v3_119b4 to i8*
  store i8 %v2_119b0, i8* %v4_119b4, align 1
  br label %dec_label_pc_119f0.backedge

dec_label_pc_119f0.backedge:                      ; preds = %dec_label_pc_11918, %dec_label_pc_11908, %dec_label_pc_118d4, %dec_label_pc_119a8, %dec_label_pc_11850, %dec_label_pc_117fc, %dec_label_pc_11818, %dec_label_pc_11950, %dec_label_pc_11958, %dec_label_pc_1193c, %dec_label_pc_1198c
  %v0_119fc.pre = load i32, i32* @fp, align 4
  store i32 %v2_119f0, i32* @r4, align 4
  store i32 %v2_119f0, i32* %r0.global-to-local, align 4
  store i32 128, i32* %r1.global-to-local, align 4
  store i32 %v0_119fc.pre, i32* %r2.global-to-local, align 4
  %v3_11a00 = call i32 @fgets(i32 %v2_119f0, i32 128, i32 %v0_119fc.pre)
  store i32 %v3_11a00, i32* %r0.global-to-local, align 4
  %v2_11a04 = icmp eq i32 %v3_11a00, 0
  br i1 %v2_11a04, label %dec_label_pc_11a0c, label %dec_label_pc_11794

dec_label_pc_119bc:                               ; preds = %dec_label_pc_1175c
  %v0_119c0 = load i32, i32* @r5, align 4
  %v2_119c0 = add i32 %v0_119c0, -37236
  %v2_119cc = add i32 %v0_119c0, -37224
  %v2_119d8 = add i32 %v0_119c0, -37216
  %v2_119e4 = add i32 %v0_119c0, -37208
  store i32 %v2_119e4, i32* %r3.global-to-local, align 4
  store i32 10484, i32* @sb, align 4
  store i32 %v2_119e4, i32* %stack_var_-560, align 4
  %v2_119f0 = ptrtoint i32* %stack_var_-288 to i32
  %v1_11798 = bitcast i32* %stack_var_-288 to i8*
  %v2_117c8 = ptrtoint i16* %stack_var_-68 to i32
  %v2_117dc = bitcast i16* %stack_var_-68 to i8*
  %v2_117e8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_11800 = ptrtoint i32* %stack_var_-64 to i32
  %v2_11818 = ptrtoint i32* %stack_var_-304 to i32
  %v14_1185c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_119f0, i32* @r4, align 4
  store i32 %v2_119f0, i32* %r0.global-to-local, align 4
  store i32 128, i32* %r1.global-to-local, align 4
  store i32 %v5_11784, i32* %r2.global-to-local, align 4
  %v3_11a0066 = call i32 @fgets(i32 %v2_119f0, i32 128, i32 %v5_11784)
  store i32 %v3_11a0066, i32* %r0.global-to-local, align 4
  %v2_11a0468 = icmp eq i32 %v3_11a0066, 0
  br i1 %v2_11a0468, label %dec_label_pc_11a0c, label %dec_label_pc_11794

dec_label_pc_11a0c:                               ; preds = %dec_label_pc_119f0.backedge, %dec_label_pc_119bc
  %v0_11a0c = load i32, i32* @fp, align 4
  store i32 %v0_11a0c, i32* %r0.global-to-local, align 4
  %v1_11a10 = inttoptr i32 %v0_11a0c to i16*
  %v2_11a10 = call i32 @__GI_fclose(i16* %v1_11a10)
  store i32 %v2_11a10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a14

dec_label_pc_11a14:                               ; preds = %dec_label_pc_1175c, %dec_label_pc_11a0c
  store i32 10480, i32* %r3.global-to-local, align 4
  %v0_11a18 = load i32, i32* @r5, align 4
  %v2_11a18 = add i32 %v0_11a18, 10480
  %v3_11a18 = inttoptr i32 %v2_11a18 to i32*
  %v4_11a18 = load i32, i32* %v3_11a18, align 4
  store i32 %v4_11a18, i32* %r3.global-to-local, align 4
  %v2_11a1c = icmp eq i32 %v4_11a18, 0
  br i1 %v2_11a1c, label %dec_label_pc_11a24, label %dec_label_pc_11a60

dec_label_pc_11a24:                               ; preds = %dec_label_pc_11a14
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11a28 = call i32 @malloc(i32 28)
  store i32 %v1_11a28, i32* %r0.global-to-local, align 4
  store i32 -37180, i32* %r3.global-to-local, align 4
  store i32 10476, i32* %r2.global-to-local, align 4
  %v2_11a34 = icmp eq i32 %v1_11a28, 0
  %v1_11a38 = load i32, i32* @r5, align 4
  br i1 %v2_11a34, label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_11a24
  %v3_11a38 = add i32 %v1_11a38, -37180
  store i32 %v3_11a38, i32* %r3.global-to-local, align 4
  %v3_11a3c28 = add i32 %v1_11a38, 10476
  %v4_11a3c29 = inttoptr i32 %v3_11a3c28 to i32*
  store i32 0, i32* %v4_11a3c29, align 4
  %v1_11a40 = load i32, i32* %r3.global-to-local, align 4
  %v2_11a40 = load i32, i32* @r5, align 4
  %v3_11a40 = load i32, i32* %r2.global-to-local, align 4
  %v4_11a40 = add i32 %v3_11a40, %v2_11a40
  %v5_11a40 = inttoptr i32 %v4_11a40 to i32*
  store i32 %v1_11a40, i32* %v5_11a40, align 4
  br label %.thread4

bb63:                                             ; preds = %dec_label_pc_11a24
  %v3_11a3c = add i32 %v1_11a38, 10476
  %v4_11a3c = inttoptr i32 %v3_11a3c to i32*
  store i32 %v1_11a28, i32* %v4_11a3c, align 4
  %v1_11a44 = load i32, i32* @r5, align 4
  %v2_11a44 = load i32, i32* %r3.global-to-local, align 4
  %v3_11a44 = add i32 %v2_11a44, %v1_11a44
  store i32 %v3_11a44, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %bb62, %bb63
  store i32 72272, i32* @lr, align 4
  %v1_11a4c = xor i1 %v2_11a34, true
  call void @__pseudo_cond_branch(i1 %v1_11a4c, i32 ptrtoint (i32* @global_var_acb0.198 to i32))
  store i32 10480, i32* %r2.global-to-local, align 4
  %v0_11a54 = load i32, i32* @r5, align 4
  %v2_11a54 = add i32 %v0_11a54, 10480
  %v3_11a54 = inttoptr i32 %v2_11a54 to i32*
  %v4_11a54 = load i32, i32* %v3_11a54, align 4
  %v1_11a58 = add i32 %v4_11a54, 1
  store i32 %v1_11a58, i32* %r3.global-to-local, align 4
  store i32 %v1_11a58, i32* %v3_11a54, align 4
  %v0_11a64.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11a60

dec_label_pc_11a60:                               ; preds = %dec_label_pc_11a14, %.thread4
  %v0_11a64 = phi i32 [ %v0_11a18, %dec_label_pc_11a14 ], [ %v0_11a64.pre, %.thread4 ]
  store i32 10484, i32* @r7, align 4
  %v2_11a64 = add i32 %v0_11a64, 10484
  %v3_11a64 = inttoptr i32 %v2_11a64 to i32*
  %v4_11a64 = load i32, i32* %v3_11a64, align 4
  store i32 %v4_11a64, i32* @r4, align 4
  %v2_11a68 = icmp eq i32 %v4_11a64, 0
  br i1 %v2_11a68, label %dec_label_pc_11a70, label %dec_label_pc_11af0

dec_label_pc_11a70:                               ; preds = %dec_label_pc_11a60
  %v2_11a70 = ptrtoint i32* %stack_var_-544 to i32
  store i32 %v2_11a70, i32* @r6, align 4
  store i32 %v2_11a70, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_11a7c = call i32 @__GI_gethostname(i32 %v2_11a70, i32 255)
  store i32 %v2_11a7c, i32* %r0.global-to-local, align 4
  %v2_11a80 = icmp eq i32 %v2_11a7c, 0
  br i1 %v2_11a80, label %dec_label_pc_11a8c, label %dec_label_pc_11af0

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a70
  store i32 %v2_11a70, i32* @r0, align 4
  store i32 46, i32* %r1.global-to-local, align 4
  %v2_11a94 = call i32 @__GI_strchr(i32 %v2_11a70, i32 46)
  store i32 %v2_11a94, i32* %r0.global-to-local, align 4
  %v2_11a98 = icmp eq i32 %v2_11a94, 0
  br i1 %v2_11a98, label %dec_label_pc_11af0, label %dec_label_pc_11aa0

dec_label_pc_11aa0:                               ; preds = %dec_label_pc_11a8c
  %v1_11aa0 = add i32 %v2_11a94, 1
  %v2_11aa0 = inttoptr i32 %v1_11aa0 to i8*
  %v3_11aa0 = load i8, i8* %v2_11aa0, align 1
  %v4_11aa0 = zext i8 %v3_11aa0 to i32
  store i32 %v4_11aa0, i32* %r3.global-to-local, align 4
  %v2_11aa4 = icmp eq i8 %v3_11aa0, 0
  store i32 %v1_11aa0, i32* %r0.global-to-local, align 4
  br i1 %v2_11aa4, label %dec_label_pc_11af0, label %dec_label_pc_11ab0

dec_label_pc_11ab0:                               ; preds = %dec_label_pc_11aa0
  %v2_11ab0 = call i32 @__GI_strdup(i8* %v2_11aa0)
  store i32 %v2_11ab0, i32* %r0.global-to-local, align 4
  store i32 %v2_11ab0, i32* @r4, align 4
  %v2_11ab4 = icmp eq i32 %v2_11ab0, 0
  br i1 %v2_11ab4, label %dec_label_pc_11af0, label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %dec_label_pc_11ab0
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_11ac0 = call i32 @malloc(i32 4)
  store i32 %v1_11ac0, i32* %r0.global-to-local, align 4
  store i32 10472, i32* %r3.global-to-local, align 4
  %v2_11ac8 = icmp eq i32 %v1_11ac0, 0
  %v1_11acc = load i32, i32* @r5, align 4
  %v3_11acc = add i32 %v1_11acc, 10472
  %v4_11acc = inttoptr i32 %v3_11acc to i32*
  store i32 %v1_11ac0, i32* %v4_11acc, align 4
  br i1 %v2_11ac8, label %dec_label_pc_11ad4, label %dec_label_pc_11ae0

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11abc
  %v0_11ad4 = load i32, i32* @r4, align 4
  store i32 %v0_11ad4, i32* @r0, align 4
  %v0_11ad8 = call i32 @free()
  store i32 %v0_11ad8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11af0

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11abc
  %v0_11ae0 = load i32, i32* @r5, align 4
  %v1_11ae0 = load i32, i32* @r7, align 4
  %v2_11ae0 = add i32 %v1_11ae0, %v0_11ae0
  %v3_11ae0 = inttoptr i32 %v2_11ae0 to i32*
  %v4_11ae0 = load i32, i32* %v3_11ae0, align 4
  %v1_11ae4 = add i32 %v4_11ae0, 1
  store i32 %v1_11ae4, i32* %r3.global-to-local, align 4
  %v0_11ae8 = load i32, i32* @r4, align 4
  %v2_11ae8 = inttoptr i32 %v1_11ac0 to i32*
  store i32 %v0_11ae8, i32* %v2_11ae8, align 4
  %v0_11aec = load i32, i32* %r3.global-to-local, align 4
  %v1_11aec = load i32, i32* @r5, align 4
  %v2_11aec = load i32, i32* @r7, align 4
  %v3_11aec = add i32 %v2_11aec, %v1_11aec
  %v4_11aec = inttoptr i32 %v3_11aec to i32*
  store i32 %v0_11aec, i32* %v4_11aec, align 4
  br label %dec_label_pc_11af0

dec_label_pc_11af0:                               ; preds = %dec_label_pc_11a70, %dec_label_pc_11a60, %dec_label_pc_1174c, %dec_label_pc_11ab0, %dec_label_pc_11aa0, %dec_label_pc_11a8c, %dec_label_pc_11ad4, %dec_label_pc_11ae0
  store i32 10468, i32* %r3.global-to-local, align 4
  %v0_11af4 = load i32, i32* @r5, align 4
  %v2_11af4 = add i32 %v0_11af4, 10468
  %v3_11af4 = inttoptr i32 %v2_11af4 to i32*
  %v4_11af4 = load i32, i32* %v3_11af4, align 4
  store i32 %v4_11af4, i32* %r0.global-to-local, align 4
  %v2_11af8 = icmp eq i32 %v4_11af4, 0
  br i1 %v2_11af8, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_11af0
  store i32 72452, i32* %lr.global-to-local, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_11af0, %bb64
  %v2_11b00 = xor i1 %v2_11af8, true
  call void @__pseudo_cond_branch(i1 %v2_11b00, i32 %v4_11af4)
  %v2_11b08 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11b08, i32* %r4.global-to-local, align 4
  store i32 %v15_116fc, i32* @r8, align 4
  store i32 %v18_116fc, i32* @sb, align 4
  store i32 %v21_116fc, i32* @sl, align 4
  store i32 %v24_116fc, i32* @fp, align 4
  store i32 %v27_116fc, i32* %lr.global-to-local, align 4
  ret i32 %v4_11af4

; uselistorder directives
  uselistorder i32 %v1_11ac0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11a70, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_11800, { 1, 0 }
  uselistorder i32 %v2_117e8, { 1, 0 }
  uselistorder i32 %v2_117c8, { 1, 0 }
  uselistorder i32 %v2_119f0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_119c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_119b0, { 1, 0 }
  uselistorder i32 %v0_11950, { 1, 0, 2 }
  uselistorder i32 %v1_118c817, { 1, 0 }
  uselistorder i32 %v1_118c010, { 1, 0 }
  uselistorder i32 %v0_118c09, { 1, 0 }
  uselistorder i32 %v1_118c8, { 1, 0 }
  uselistorder i32 %v3_11844, { 1, 0, 2, 3, 4 }
  uselistorder i16* %stack_var_-68, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 7, 8, 10, 11, 12, 22, 0, 13, 14, 15, 28, 18, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 15, 12, 4, 17, 5, 16, 6, 7, 8, 9, 10, 11, 13, 14 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 21, 16, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 3, 2, 5, 4, 6, 8, 7, 10, 9, 55, 54, 52, 53, 46, 45, 56, 12, 11, 14, 13, 15, 17, 16, 19, 18, 20, 21, 23, 22, 24, 26, 25, 31, 30, 27, 28, 29, 33, 32, 35, 34, 36, 38, 37, 39, 41, 40, 42, 44, 43, 49, 47, 48, 51, 50 }
  uselistorder i32 (i16*)* @__GI_fclose, { 1, 0 }
  uselistorder i32 (i32)* @atol, { 3, 4, 2, 1, 0 }
  uselistorder i32 58, { 0, 5, 4, 6, 1, 2, 3 }
  uselistorder i32 (i32*, i32)* @realloc, { 1, 2, 0 }
  uselistorder i16 2, { 1, 0 }
  uselistorder i32 ()* @skip_nospace, { 2, 1, 0 }
  uselistorder i32 -37372, { 1, 0 }
  uselistorder i32 727, { 0, 3, 4, 5, 2, 1 }
  uselistorder i32 -37256, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37256), { 1, 0 }
  uselistorder i32 10468, { 0, 2, 1, 3 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_11af0, { 7, 6, 3, 4, 5, 0, 1, 2 }
  uselistorder label %dec_label_pc_11a60, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_11a14, { 1, 0 }
  uselistorder label %dec_label_pc_11a0c, { 1, 0 }
  uselistorder label %dec_label_pc_119f0.backedge, { 3, 10, 8, 7, 9, 0, 1, 2, 4, 6, 5 }
  uselistorder label %dec_label_pc_118d0, { 1, 0 }
  uselistorder label %dec_label_pc_1174c, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
}

define i32 @__close_nameservers() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11b58 = load i32, i32* @r4, align 4
  store i32 %v3_11b58, i32* %stack_var_-20, align 4
  store i32 10476, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r5, align 4
  store i32 -37180, i32* %r3.global-to-local, align 4
  %v4_11b6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 10476) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37180), i32* %r3.global-to-local, align 4
  store i32 72576, i32* @lr, align 4
  %v1_11b7c = icmp ne i32 %v4_11b6c, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37180)
  call void @__pseudo_cond_branch(i1 %v1_11b7c, i32 ptrtoint (i32* @global_var_bd80.236 to i32))
  store i32 10480, i32* %r3.global-to-local, align 4
  store i32 10484, i32* @r7, align 4
  store i32 10472, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_11b90 = load i32, i32* @r5, align 4
  %v3_11b90 = add i32 %v1_11b90, 10480
  %v4_11b90 = inttoptr i32 %v3_11b90 to i32*
  store i32 0, i32* %v4_11b90, align 4
  %v0_11b94 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b94 = load i32, i32* @r5, align 4
  %v2_11b94 = load i32, i32* %r4.global-to-local, align 4
  %v3_11b94 = add i32 %v2_11b94, %v1_11b94
  %v4_11b94 = inttoptr i32 %v3_11b94 to i32*
  store i32 %v0_11b94, i32* %v4_11b94, align 4
  br label %dec_label_pc_11bac

dec_label_pc_11b9c:                               ; preds = %dec_label_pc_11bac
  store i32 %v4_11bc0, i32* %r3.global-to-local, align 4
  store i32 %v1_11bb4, i32* %v3_11bac, align 4
  %v0_11ba4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ba4 = load i32, i32* %r2.global-to-local, align 4
  %v4_11ba4 = mul i32 %v1_11ba4, 4
  %v5_11ba4 = add i32 %v4_11ba4, %v0_11ba4
  %v6_11ba4 = inttoptr i32 %v5_11ba4 to i32*
  %v7_11ba4 = load i32, i32* %v6_11ba4, align 4
  store i32 %v7_11ba4, i32* @r0, align 4
  %v0_11ba8 = call i32 @free()
  br label %dec_label_pc_11bac

dec_label_pc_11bac:                               ; preds = %entry, %dec_label_pc_11b9c
  %v0_11bac = load i32, i32* @r5, align 4
  %v1_11bac = load i32, i32* @r7, align 4
  %v2_11bac = add i32 %v1_11bac, %v0_11bac
  %v3_11bac = inttoptr i32 %v2_11bac to i32*
  %v4_11bac = load i32, i32* %v3_11bac, align 4
  store i32 %v4_11bac, i32* @r4, align 4
  %v2_11bb0 = icmp eq i32 %v4_11bac, 0
  %v1_11bb4 = add i32 %v4_11bac, -1
  store i32 %v1_11bb4, i32* %r2.global-to-local, align 4
  %v0_11bb8 = load i32, i32* @r6, align 4
  store i32 %v0_11bb8, i32* %r3.global-to-local, align 4
  %v2_11bc0 = add i32 %v0_11bb8, %v0_11bac
  %v3_11bc0 = inttoptr i32 %v2_11bc0 to i32*
  %v4_11bc0 = load i32, i32* %v3_11bc0, align 4
  br i1 %v2_11bb0, label %dec_label_pc_11bc0, label %dec_label_pc_11b9c

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11bac
  store i32 %v4_11bc0, i32* @r0, align 4
  %v0_11bc4 = call i32 @free()
  %v0_11bc8 = load i32, i32* @r4, align 4
  %v1_11bc8 = load i32, i32* @r5, align 4
  %v2_11bc8 = load i32, i32* @r6, align 4
  %v3_11bc8 = add i32 %v2_11bc8, %v1_11bc8
  %v4_11bc8 = inttoptr i32 %v3_11bc8 to i32*
  store i32 %v0_11bc8, i32* %v4_11bc8, align 4
  %v2_11bd0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11bd0, i32* %r4.global-to-local, align 4
  ret i32 %v0_11bc4

; uselistorder directives
  uselistorder i32 %v4_11bc0, { 1, 0 }
  uselistorder i32 %v1_11bb4, { 1, 0 }
  uselistorder i32* %v3_11bac, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 10472, { 4, 1, 7, 5, 6, 0, 3, 2, 8 }
  uselistorder i32 10484, { 1, 2, 4, 3, 0 }
  uselistorder i32 10480, { 0, 1, 3, 7, 4, 8, 2, 6, 5, 9, 10, 12, 11, 13 }
  uselistorder i32 -37180, { 1, 2, 0, 3 }
  uselistorder i32 10476, { 4, 5, 1, 0, 7, 2, 6, 3, 8 }
  uselistorder label %dec_label_pc_11bac, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v0_11bf0 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @lr, align 4
  store i32 %arg1, i32* @r1, align 4
  store i32 0, i32* @r0, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 0, i32* @r3, align 4
  %v0_11c2c = call i32 @__read_etc_hosts_r()
  store i32 %v0_11bf0, i32* @lr, align 4
  ret i32 %v0_11c2c
}

define i32 @gethostbyname_r() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %tmp29 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp29, i32* %stack_var_0, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_11c44 = load i32, i32* @r2, align 4
  store i32 %tmp29, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_11c50 = load i32, i32* @r0, align 4
  store i32 %v0_11c50, i32* @sl, align 4
  %v2_11c50 = icmp eq i32 %v0_11c50, 0
  %v2_11c54 = inttoptr i32 %tmp29 to i32*
  store i32 0, i32* %v2_11c54, align 4
  %v0_11c58 = load i32, i32* @r1, align 4
  store i32 %v0_11c58, i32* @r7, align 4
  %v0_11c5c = load i32, i32* @r3, align 4
  store i32 %v0_11c5c, i32* @r6, align 4
  br i1 %v2_11c50, label %bb, label %dec_label_pc_11c68

bb:                                               ; preds = %entry
  %v1_11c60 = load i32, i32* @r5, align 4
  %v2_11c60 = add i32 %v1_11c60, 22
  store i32 %v2_11c60, i32* @r5, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11c68:                               ; preds = %entry
  %v0_11c68 = call i32 @__GI___errno_location()
  store i32 %v0_11c68, i32* %r0.global-to-local, align 4
  %v3_11c6c = load i32, i32* %stack_var_0, align 4
  store i32 %v3_11c6c, i32* %ip.global-to-local, align 4
  %v1_11c70 = inttoptr i32 %v0_11c68 to i32*
  %v2_11c70 = load i32, i32* %v1_11c70, align 4
  store i32 %v2_11c70, i32* @r8, align 4
  %v0_11c74 = load i32, i32* @r5, align 4
  store i32 %v0_11c74, i32* %v1_11c70, align 4
  %v0_11c78 = load i32, i32* %ip.global-to-local, align 4
  store i32 %tmp18, i32* %ip.global-to-local, align 4
  store i32 %v0_11c68, i32* @r4, align 4
  %v0_11c88 = load i32, i32* @sl, align 4
  store i32 %v0_11c88, i32* %r0.global-to-local, align 4
  %v0_11c8c = load i32, i32* @r7, align 4
  store i32 %v0_11c8c, i32* %r2.global-to-local, align 4
  store i32 %v0_11c44, i32* %r3.global-to-local, align 4
  %v0_11c94 = load i32, i32* @r6, align 4
  %v7_11c9c = call i32 @__get_hosts_byname_r(i32 %v0_11c88, i32 2, i32 %v0_11c8c, i32 %v0_11c44, i32 %v0_11c94, i32 %v0_11c78, i32 %tmp18)
  store i32 %v7_11c9c, i32* %r0.global-to-local, align 4
  store i32 %v7_11c9c, i32* @r5, align 4
  %v2_11ca0 = icmp eq i32 %v7_11c9c, 0
  br i1 %v2_11ca0, label %bb34, label %dec_label_pc_11cac

bb34:                                             ; preds = %dec_label_pc_11c68
  %v1_11ca4 = load i32, i32* @r8, align 4
  %v2_11ca4 = load i32, i32* @r4, align 4
  %v3_11ca4 = inttoptr i32 %v2_11ca4 to i32*
  store i32 %v1_11ca4, i32* %v3_11ca4, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11c68
  store i32 %tmp18, i32* %r2.global-to-local, align 4
  %v1_11cb0 = inttoptr i32 %tmp18 to i32*
  %v2_11cb0 = load i32, i32* %v1_11cb0, align 4
  store i32 %v2_11cb0, i32* %r3.global-to-local, align 4
  %v7_11cb4 = icmp eq i32 %v2_11cb0, 1
  br i1 %v7_11cb4, label %dec_label_pc_11cd0, label %dec_label_pc_11cbc

dec_label_pc_11cbc:                               ; preds = %dec_label_pc_11cac
  %v7_11cbc = icmp eq i32 %v2_11cb0, 4
  br i1 %v7_11cbc, label %dec_label_pc_11cf0, label %dec_label_pc_11cc4

dec_label_pc_11cc4:                               ; preds = %dec_label_pc_11cbc
  %v3_11cc4 = icmp eq i32 %v2_11cb0, -1
  br i1 %v3_11cc4, label %dec_label_pc_11ce4, label %dec_label_pc_11f24

dec_label_pc_11cd0:                               ; preds = %dec_label_pc_11cac
  %v7_11cd0 = icmp eq i32 %v7_11c9c, 2
  br i1 %v7_11cd0, label %.thread4, label %bb35

bb35:                                             ; preds = %dec_label_pc_11cd0
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_11cf8

.thread4:                                         ; preds = %dec_label_pc_11cd0
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_11cf8

dec_label_pc_11ce4:                               ; preds = %dec_label_pc_11cc4
  %v0_11ce4 = load i32, i32* @r4, align 4
  %v1_11ce4 = inttoptr i32 %v0_11ce4 to i32*
  %v2_11ce4 = load i32, i32* %v1_11ce4, align 4
  store i32 %v2_11ce4, i32* %r3.global-to-local, align 4
  %v7_11ce8 = icmp eq i32 %v2_11ce4, 2
  br i1 %v7_11ce8, label %dec_label_pc_11cf0, label %dec_label_pc_11f24

dec_label_pc_11cf0:                               ; preds = %dec_label_pc_11ce4, %dec_label_pc_11cbc
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11cf8

dec_label_pc_11cf8:                               ; preds = %.thread4, %bb35, %dec_label_pc_11cf0
  %storemerge2 = phi i32 [ 0, %dec_label_pc_11cf0 ], [ 0, %bb35 ], [ 1, %.thread4 ]
  store i32 %tmp18, i32* @ip, align 4
  store i32 -1, i32* @r3, align 4
  %v0_11d00 = load i32, i32* @r8, align 4
  %v1_11d00 = load i32, i32* @r4, align 4
  %v2_11d00 = inttoptr i32 %v1_11d00 to i32*
  store i32 %v0_11d00, i32* %v2_11d00, align 4
  %v0_11d04 = load i32, i32* @sl, align 4
  %v1_11d04 = inttoptr i32 %v0_11d04 to i8*
  store i32 %v0_11d04, i32* %r0.global-to-local, align 4
  %v0_11d08 = load i32, i32* @r3, align 4
  %v1_11d08 = load i32, i32* @ip, align 4
  %v2_11d08 = inttoptr i32 %v1_11d08 to i32*
  store i32 %v0_11d08, i32* %v2_11d08, align 4
  %v3_11d0c = call i32 @strlen(i8* %v1_11d04)
  store i32 %v3_11d0c, i32* %r0.global-to-local, align 4
  %v1_11d10 = add i32 %v3_11d0c, 1
  store i32 %v1_11d10, i32* @r4, align 4
  %v0_11d14 = load i32, i32* @r6, align 4
  %v7_11d18 = icmp sgt i32 %v0_11d14, %v1_11d10
  br i1 %v7_11d18, label %dec_label_pc_11d1c, label %dec_label_pc_11f20

dec_label_pc_11d1c:                               ; preds = %dec_label_pc_11cf8
  %v0_11d1c = load i32, i32* @sl, align 4
  store i32 %v0_11d1c, i32* @r1, align 4
  store i32 %v1_11d10, i32* @r2, align 4
  store i32 %v0_11c44, i32* @r0, align 4
  %v0_11d28 = call i32 @memcpy()
  store i32 %v0_11d28, i32* %r0.global-to-local, align 4
  %v1_11d30 = load i32, i32* @r4, align 4
  %v2_11d30 = add i32 %v1_11d30, %v0_11c44
  %v1_11d34 = sub i32 0, %v2_11d30
  %v1_11d38 = load i32, i32* @r6, align 4
  %v2_11d38 = sub i32 %v1_11d38, %v1_11d30
  store i32 %v2_11d38, i32* %r2.global-to-local, align 4
  %v1_11d3c = urem i32 %v1_11d34, 4
  store i32 %v1_11d3c, i32* %r3.global-to-local, align 4
  %v2_11d40 = sub i32 %v2_11d38, %v1_11d3c
  store i32 %v2_11d40, i32* @sb, align 4
  %v1_11d44 = add i32 %v2_11d40, -8
  store i32 %v1_11d44, i32* @r5, align 4
  %v7_11d4c = icmp slt i32 %v1_11d44, 256
  br i1 %v7_11d4c, label %dec_label_pc_11f20, label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d1c
  %v2_11d50 = add i32 %v1_11d3c, %v2_11d30
  store i32 %v2_11d50, i32* @fp, align 4
  store i32 %v0_11c44, i32* %ip.global-to-local, align 4
  %v1_11d58 = add i32 %v2_11d50, 8
  store i32 %v1_11d58, i32* @r6, align 4
  store i32 0, i32* @r4, align 4
  %v1_11d60 = add i32 %v2_11d50, 16
  store i32 %v1_11d60, i32* @r8, align 4
  %v4_11d64 = inttoptr i32 %v2_11d50 to i32*
  store i32 %v0_11c44, i32* %v4_11d64, align 4
  %v0_11d68 = load i32, i32* @sl, align 4
  store i32 %v0_11d68, i32* %r0.global-to-local, align 4
  %v0_11d6c = load i32, i32* @r4, align 4
  %v1_11d6c = load i32, i32* @fp, align 4
  %v2_11d6c = add i32 %v1_11d6c, 4
  %v3_11d6c = inttoptr i32 %v2_11d6c to i32*
  store i32 %v0_11d6c, i32* %v3_11d6c, align 4
  %v0_11d70 = load i32, i32* @r8, align 4
  %v2_11d74 = inttoptr i32 %v0_11d68 to i8*
  %v3_11d74 = call i32 @inet_aton(i8* %v2_11d74, i32 %v0_11d70)
  store i32 %v3_11d74, i32* %r0.global-to-local, align 4
  %v1_11d78 = load i32, i32* @r4, align 4
  %v9_11d78 = icmp eq i32 %v3_11d74, %v1_11d78
  br i1 %v9_11d78, label %dec_label_pc_11dbc, label %dec_label_pc_11d80

dec_label_pc_11d80:                               ; preds = %dec_label_pc_11d50
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_11d84 = load i32, i32* @r7, align 4
  %v2_11d84 = add i32 %v1_11d84, 8
  %v3_11d84 = inttoptr i32 %v2_11d84 to i32*
  store i32 2, i32* %v3_11d84, align 4
  %v0_11d88 = load i32, i32* %r3.global-to-local, align 4
  %v2_11d88 = mul i32 %v0_11d88, 2
  %v1_11d8c = load i32, i32* @r7, align 4
  %v2_11d8c = add i32 %v1_11d8c, 12
  %v3_11d8c = inttoptr i32 %v2_11d8c to i32*
  store i32 %v2_11d88, i32* %v3_11d8c, align 4
  %v3_11d90 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_11d90, i32* %r2.global-to-local, align 4
  store i32 %v0_11c44, i32* %r3.global-to-local, align 4
  store i32 %tmp18, i32* @ip, align 4
  %v0_11d9c = load i32, i32* @r4, align 4
  store i32 %v0_11d9c, i32* @r5, align 4
  %v0_11da0 = load i32, i32* @r8, align 4
  %v1_11da0 = load i32, i32* @fp, align 4
  %v2_11da0 = add i32 %v1_11da0, 8
  %v3_11da0 = inttoptr i32 %v2_11da0 to i32*
  store i32 %v0_11da0, i32* %v3_11da0, align 4
  %v0_11da4 = load i32, i32* @r7, align 4
  %v1_11da4 = load i32, i32* %r2.global-to-local, align 4
  %v2_11da4 = inttoptr i32 %v1_11da4 to i32*
  store i32 %v0_11da4, i32* %v2_11da4, align 4
  %v0_11da8 = load i32, i32* @r7, align 4
  %v1_11da8 = inttoptr i32 %v0_11da8 to i32*
  %v2_11da8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v2_11da8, i32* %v1_11da8, align 4
  %v3_11da8 = add i32 %v0_11da8, 4
  %v4_11da8 = inttoptr i32 %v3_11da8 to i32*
  %v5_11da8 = load i32, i32* @fp, align 4
  store i32 %v5_11da8, i32* %v4_11da8, align 4
  %v0_11dac = load i32, i32* @r6, align 4
  %v1_11dac = load i32, i32* @r7, align 4
  %v2_11dac = add i32 %v1_11dac, 16
  %v3_11dac = inttoptr i32 %v2_11dac to i32*
  store i32 %v0_11dac, i32* %v3_11dac, align 4
  %v0_11db0 = load i32, i32* @r4, align 4
  %v1_11db0 = load i32, i32* @ip, align 4
  %v2_11db0 = inttoptr i32 %v1_11db0 to i32*
  store i32 %v0_11db0, i32* %v2_11db0, align 4
  %v0_11db4 = load i32, i32* @r4, align 4
  %v1_11db4 = load i32, i32* @r6, align 4
  %v2_11db4 = add i32 %v1_11db4, 4
  %v3_11db4 = inttoptr i32 %v2_11db4 to i32*
  store i32 %v0_11db4, i32* %v3_11db4, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11dbc:                               ; preds = %dec_label_pc_11d50
  store i32 %storemerge2, i32* %r2.global-to-local, align 4
  %v2_11dc0 = icmp eq i32 %storemerge2, 0
  br i1 %v2_11dc0, label %dec_label_pc_11dd8, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11dbc
  store i32 %tmp18, i32* @ip, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 1, i32* %v1_11cb0, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11dd8:                               ; preds = %dec_label_pc_11dbc
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_11de4 = load i32, i32* @sl, align 4
  store i32 %v0_11de4, i32* %r0.global-to-local, align 4
  %v2_11dec = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_11dec, i32* %r2.global-to-local, align 4
  %v2_11df0 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_11df0, i32* %r3.global-to-local, align 4
  %v7_11dfc = inttoptr i32 %v0_11de4 to i8*
  %v8_11dfc = call i32 @__dns_lookup(i8* %v7_11dfc, i32 1, i32 %v2_11dec, i32 %v2_11df0)
  store i32 %v8_11dfc, i32* %r0.global-to-local, align 4
  %v1_11e00 = icmp slt i32 %v8_11dfc, 0
  br i1 %v1_11e00, label %.thread, label %dec_label_pc_11e18

.thread:                                          ; preds = %dec_label_pc_11dd8
  store i32 %tmp18, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 1, i32* %v1_11cb0, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11e18:                               ; preds = %dec_label_pc_11dd8
  store i32 %tmp12, i32* %r3.global-to-local, align 4
  %v7_11e1c = icmp eq i32 %tmp12, 1
  br i1 %v7_11e1c, label %dec_label_pc_11e24, label %dec_label_pc_11efc

dec_label_pc_11e24:                               ; preds = %dec_label_pc_11e18
  store i32 0, i32* @r2, align 4
  store i32 12, i32* @r4, align 4
  store i32 12, i32* @r3, align 4
  %v0_11e3c = load i32, i32* @r5, align 4
  %v2_11e3c = add i32 %v0_11e3c, -12
  store i32 %v2_11e3c, i32* @r8, align 4
  %v8_11e3c = icmp slt i32 %v2_11e3c, 0
  br i1 %v8_11e3c, label %bb37, label %dec_label_pc_11e48

bb37:                                             ; preds = %dec_label_pc_11e24
  store i32 34, i32* @r5, align 4
  br label %dec_label_pc_11f0c

dec_label_pc_11e48:                               ; preds = %dec_label_pc_11e24
  %v0_11e48 = load i32, i32* @r6, align 4
  store i32 %v0_11e48, i32* @r1, align 4
  %v2_11e4c = add i32 %v0_11e48, 12
  store i32 %v2_11e4c, i32* @r0, align 4
  %v2_11e50 = call i32 @memmove(i32 %v2_11e4c, i32 %v0_11e48)
  %v0_11e54 = load i32, i32* @fp, align 4
  %v1_11e54 = add i32 %v0_11e54, 4
  store i32 %v1_11e54, i32* @r3, align 4
  %v1_11e58 = load i32, i32* @r4, align 4
  %v2_11e58 = add i32 %v1_11e58, %v1_11e54
  store i32 %v2_11e58, i32* @r5, align 4
  store i32 %v2_11e58, i32* @r0, align 4
  store i32 4, i32* @r2, align 4
  %v0_11e68 = call i32 @memcpy()
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_11e74.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11e74

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e74, %dec_label_pc_11e48
  %v0_11e74 = phi i32 [ %v0_11e74.pre, %dec_label_pc_11e48 ], [ %v1_11e78, %dec_label_pc_11e74 ]
  %v1_11e74 = load i32, i32* @r6, align 4
  %v7_11e74 = inttoptr i32 %v1_11e74 to i32*
  store i32 %v0_11e74, i32* %v7_11e74, align 4
  %v0_11e78 = load i32, i32* @r5, align 4
  %v1_11e78 = add i32 %v0_11e78, 4
  store i32 %v1_11e78, i32* @r5, align 4
  %v0_11e7c = load i32, i32* %r0.global-to-local, align 4
  %v1_11e7c = add i32 %v0_11e7c, 1
  store i32 %v1_11e7c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp38 = icmp eq i32 %v1_11e7c, 0
  br i1 %tmp38, label %dec_label_pc_11e74, label %dec_label_pc_11e8c

dec_label_pc_11e8c:                               ; preds = %dec_label_pc_11e74
  %v3_11e8c = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_11e8c, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_11e94 = icmp eq i32 %v3_11e8c, 0
  %v1_11e98 = load i32, i32* @r6, align 4
  %v5_11e98 = mul i32 %v1_11e7c, 4
  %v6_11e98 = add i32 %v1_11e98, %v5_11e98
  %v7_11e98 = inttoptr i32 %v6_11e98 to i32*
  store i32 0, i32* %v7_11e98, align 4
  br i1 %v2_11e94, label %dec_label_pc_11ec8, label %dec_label_pc_11ea0

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e8c
  %v0_11ea0 = load i32, i32* @r4, align 4
  %v1_11ea0 = inttoptr i32 %v0_11ea0 to i8*
  store i32 %v0_11ea0, i32* %r0.global-to-local, align 4
  %v3_11ea4 = call i32 @strlen(i8* %v1_11ea0)
  store i32 %v3_11ea4, i32* %r0.global-to-local, align 4
  %v0_11ea8 = load i32, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_11ea8, %v3_11ea4
  br i1 %tmp, label %dec_label_pc_11eb0, label %dec_label_pc_11ec8

dec_label_pc_11eb0:                               ; preds = %dec_label_pc_11ea0
  %v0_11eb0 = load i32, i32* @r4, align 4
  store i32 %v0_11eb0, i32* @r1, align 4
  %v0_11eb4 = load i32, i32* @r5, align 4
  store i32 %v0_11eb4, i32* %r0.global-to-local, align 4
  %v2_11eb8 = inttoptr i32 %v0_11eb4 to i8*
  %v3_11eb8 = call i32 @strcpy(i8* %v2_11eb8, i32 %v0_11eb0)
  store i32 %v3_11eb8, i32* %r0.global-to-local, align 4
  %v0_11ebc = load i32, i32* @r5, align 4
  br label %dec_label_pc_11ec8

dec_label_pc_11ec8:                               ; preds = %dec_label_pc_11ea0, %dec_label_pc_11e8c, %dec_label_pc_11eb0
  %storemerge1 = phi i32 [ %v0_11ebc, %dec_label_pc_11eb0 ], [ %v0_11c44, %dec_label_pc_11ea0 ], [ %v0_11c44, %dec_label_pc_11e8c ]
  store i32 %storemerge1, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_11ecc = load i32, i32* @r7, align 4
  %v2_11ecc = add i32 %v1_11ecc, 8
  %v3_11ecc = inttoptr i32 %v2_11ecc to i32*
  store i32 2, i32* %v3_11ecc, align 4
  %v0_11ed0 = load i32, i32* %r2.global-to-local, align 4
  %v2_11ed0 = mul i32 %v0_11ed0, 2
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11ed8 = load i32, i32* @r7, align 4
  %v2_11ed8 = add i32 %v1_11ed8, 12
  %v3_11ed8 = inttoptr i32 %v2_11ed8 to i32*
  store i32 %v2_11ed0, i32* %v3_11ed8, align 4
  %v3_11edc = load i32, i32* %stack_var_0, align 4
  store i32 %v3_11edc, i32* @ip, align 4
  store i32 %tmp18, i32* %r2.global-to-local, align 4
  %v0_11ee4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_11ee4, i32* @r5, align 4
  %v0_11ee8 = load i32, i32* @r7, align 4
  %v2_11ee8 = inttoptr i32 %v3_11edc to i32*
  store i32 %v0_11ee8, i32* %v2_11ee8, align 4
  %v0_11eec = load i32, i32* @r7, align 4
  %v1_11eec = inttoptr i32 %v0_11eec to i32*
  %v2_11eec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_11eec, i32* %v1_11eec, align 4
  %v3_11eec = add i32 %v0_11eec, 4
  %v4_11eec = inttoptr i32 %v3_11eec to i32*
  %v5_11eec = load i32, i32* @fp, align 4
  store i32 %v5_11eec, i32* %v4_11eec, align 4
  %v0_11ef0 = load i32, i32* @r6, align 4
  %v1_11ef0 = load i32, i32* @r7, align 4
  %v2_11ef0 = add i32 %v1_11ef0, 16
  %v3_11ef0 = inttoptr i32 %v2_11ef0 to i32*
  store i32 %v0_11ef0, i32* %v3_11ef0, align 4
  %v0_11ef4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ef4 = load i32, i32* %r2.global-to-local, align 4
  %v2_11ef4 = inttoptr i32 %v1_11ef4 to i32*
  store i32 %v0_11ef4, i32* %v2_11ef4, align 4
  br label %dec_label_pc_11f0c

dec_label_pc_11efc:                               ; preds = %dec_label_pc_11e18
  store i32 %tmp18, i32* @ip, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 1, i32* %v1_11cb0, align 4
  store i32 2, i32* @r5, align 4
  br label %dec_label_pc_11f0c

dec_label_pc_11f0c:                               ; preds = %bb37, %dec_label_pc_11ec8, %dec_label_pc_11efc
  %v3_11f0c = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_11f0c, i32* @r0, align 4
  %v0_11f10 = call i32 @free()
  %v3_11f14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_11f14, i32* @r0, align 4
  %v0_11f18 = call i32 @free()
  store i32 %v0_11f18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11f20:                               ; preds = %dec_label_pc_11cf8, %dec_label_pc_11d1c
  store i32 34, i32* @r5, align 4
  br label %dec_label_pc_11f24

dec_label_pc_11f24:                               ; preds = %.thread, %bb, %bb34, %.thread7, %dec_label_pc_11ce4, %dec_label_pc_11cc4, %dec_label_pc_11f0c, %dec_label_pc_11d80, %dec_label_pc_11f20
  %v0_11f24 = load i32, i32* @r5, align 4
  store i32 %v0_11f24, i32* %r0.global-to-local, align 4
  ret i32 %v0_11f24

; uselistorder directives
  uselistorder i32 %v0_11ea0, { 1, 0 }
  uselistorder i32 %v1_11e7c, { 1, 0, 2 }
  uselistorder i32 %v1_11e78, { 1, 0 }
  uselistorder i32 %v0_11e48, { 1, 0, 2 }
  uselistorder i32 %v2_11e3c, { 1, 0 }
  uselistorder i32 %v1_11d3c, { 2, 1, 0 }
  uselistorder i32 %v1_11d30, { 1, 0 }
  uselistorder i32 %v0_11d04, { 1, 0 }
  uselistorder i32 %storemerge2, { 1, 0 }
  uselistorder i32* %v1_11cb0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11c50, { 1, 0 }
  uselistorder i32 %v0_11c44, { 1, 2, 3, 5, 4, 0, 6, 8, 7 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 0 }
  uselistorder i32 %tmp18, { 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 %tmp12, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 19, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 1, 2, 6, 5, 8, 7, 10, 9, 0, 12, 11, 14, 13, 15, 17, 16, 19, 18, 20 }
  uselistorder i32 ()* @free, { 22, 21, 20, 19, 18, 17, 11, 10, 9, 8, 7, 16, 15, 14, 13, 6, 5, 4, 3, 12, 23, 28, 27, 26, 1, 25, 24, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @__get_hosts_byname_r, { 1, 0 }
  uselistorder label %dec_label_pc_11f24, { 8, 6, 0, 3, 7, 4, 5, 2, 1 }
  uselistorder label %dec_label_pc_11f20, { 1, 0 }
  uselistorder label %dec_label_pc_11f0c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11ec8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11cf8, { 2, 0, 1 }
}

define i32 @__GI_poll(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f34 = load i32, i32* @r7, align 4
  store i32 %v3_11f34, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11f5c, label %dec_label_pc_11f4c

dec_label_pc_11f4c:                               ; preds = %entry
  %v0_11f4c = call i32 @__GI___errno_location()
  %v0_11f50 = load i32, i32* %r7.global-to-local, align 4
  %v1_11f50 = sub i32 0, %v0_11f50
  %v2_11f54 = inttoptr i32 %v0_11f4c to i32*
  store i32 %v1_11f50, i32* %v2_11f54, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11f60.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11f5c

dec_label_pc_11f5c:                               ; preds = %entry, %dec_label_pc_11f4c
  %v2_11f60 = phi i32 [ %v3_11f34, %entry ], [ %v2_11f60.pre, %dec_label_pc_11f4c ]
  %v0_11f5c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_11f4c ]
  store i32 %v2_11f60, i32* @r7, align 4
  ret i32 %v0_11f5c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11f5c, { 1, 0 }
}

define i32 @__GI_gethostname(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-341 = alloca i32, align 4
  %stack_var_-406 = alloca i32, align 4
  %v2_11f74 = ptrtoint i32* %stack_var_-406 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v1_11f84 = call i32 @uname(i32 %v2_11f74)
  %v7_11f88 = icmp eq i32 %v1_11f84, -1
  br i1 %v7_11f88, label %bb, label %dec_label_pc_11f94

bb:                                               ; preds = %entry
  store i32 %v1_11f84, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fd0

dec_label_pc_11f94:                               ; preds = %entry
  %v2_11f94 = ptrtoint i32* %stack_var_-341 to i32
  %tmp10 = bitcast i32* %stack_var_-341 to i8*
  %v3_11f9c = call i32 @strlen(i8* %tmp10)
  %v1_11fa0 = add i32 %v3_11f9c, 1
  %v1_11fa4 = load i32, i32* %r5.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_11fa0, %v1_11fa4
  br i1 %tmp, label %dec_label_pc_11fac, label %dec_label_pc_11fc0

dec_label_pc_11fac:                               ; preds = %dec_label_pc_11f94
  %v0_11fac = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11fb8 = inttoptr i32 %v0_11fac to i32*
  store i32 22, i32* %v2_11fb8, align 4
  %v0_11fd0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fd0

dec_label_pc_11fc0:                               ; preds = %dec_label_pc_11f94
  %v0_11fc0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v2_11f94, i32* @r1, align 4
  %v2_11fc8 = inttoptr i32 %v0_11fc0 to i8*
  %v3_11fc8 = call i32 @strcpy(i8* %v2_11fc8, i32 %v2_11f94)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fd0

dec_label_pc_11fd0:                               ; preds = %bb, %dec_label_pc_11fac, %dec_label_pc_11fc0
  %v0_11fd0 = phi i32 [ %v1_11f84, %bb ], [ %v0_11fd0.pre, %dec_label_pc_11fac ], [ 0, %dec_label_pc_11fc0 ]
  ret i32 %v0_11fd0

; uselistorder directives
  uselistorder i32 %v2_11f94, { 1, 0 }
  uselistorder i32 %v1_11f84, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @strcpy, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_11fd0, { 2, 1, 0 }
}

define i32 @__GI_read(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11fe0 = load i32, i32* @r7, align 4
  store i32 %v3_11fe0, i32* %stack_var_-8, align 4
  %v0_11fec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11fec, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11fec, -4095
  br i1 %tmp, label %dec_label_pc_1200c, label %dec_label_pc_11ffc

dec_label_pc_11ffc:                               ; preds = %entry
  %v0_11ffc = call i32 @__GI___errno_location()
  %v0_12000 = load i32, i32* %r7.global-to-local, align 4
  %v1_12000 = sub i32 0, %v0_12000
  %v2_12004 = inttoptr i32 %v0_11ffc to i32*
  store i32 %v1_12000, i32* %v2_12004, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1200c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1200c

dec_label_pc_1200c:                               ; preds = %entry, %dec_label_pc_11ffc
  %v1_12010 = phi i32 [ %v0_11fec, %entry ], [ -1, %dec_label_pc_11ffc ]
  %v2_1200c = phi i32 [ %v3_11fe0, %entry ], [ %v2_1200c.pre, %dec_label_pc_11ffc ]
  store i32 %v2_1200c, i32* @r7, align 4
  ret i32 %v1_12010

; uselistorder directives
  uselistorder i32 %v0_11fec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1200c, { 1, 0 }
}

define i32 @__GI_stat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1204c, label %dec_label_pc_12038

dec_label_pc_12038:                               ; preds = %entry
  %v0_12038 = call i32 @__GI___errno_location()
  %v0_1203c = load i32, i32* %r7.global-to-local, align 4
  %v1_1203c = sub i32 0, %v0_1203c
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12044 = inttoptr i32 %v0_12038 to i32*
  store i32 %v1_1203c, i32* %v2_12044, align 4
  br label %dec_label_pc_1205c

dec_label_pc_1204c:                               ; preds = %entry
  %v2_1204c = icmp eq i32 %arg1, 0
  br i1 %v2_1204c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1204c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1204c, %bb
  call void @__pseudo_cond_branch(i1 %v2_1204c, i32 ptrtoint (i32* @global_var_10178.334 to i32))
  br label %dec_label_pc_1205c

dec_label_pc_1205c:                               ; preds = %dec_label_pc_12038, %.thread
  %v0_1205c = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_1205c

; uselistorder directives
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1205c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_120ac, label %dec_label_pc_12098

dec_label_pc_12098:                               ; preds = %entry
  %v0_12098 = call i32 @__GI___errno_location()
  %v0_1209c = load i32, i32* %r4.global-to-local, align 4
  %v1_1209c = sub i32 0, %v0_1209c
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_120a4 = inttoptr i32 %v0_12098 to i32*
  store i32 %v1_1209c, i32* %v2_120a4, align 4
  %v0_120b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120b4

dec_label_pc_120ac:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_120ac = icmp eq i32 %arg1, 0
  br i1 %v2_120ac, label %dec_label_pc_120c0, label %dec_label_pc_120b4

dec_label_pc_120b4:                               ; preds = %dec_label_pc_120ac, %dec_label_pc_12098
  %v0_120b4 = phi i32 [ %arg1, %dec_label_pc_120ac ], [ %v0_120b4.pre, %dec_label_pc_12098 ]
  br label %dec_label_pc_120c4

dec_label_pc_120c0:                               ; preds = %dec_label_pc_120ac
  br label %dec_label_pc_120c4

dec_label_pc_120c4:                               ; preds = %dec_label_pc_120b4, %dec_label_pc_120c0
  %v1_120cc = phi i32 [ %v0_120b4, %dec_label_pc_120b4 ], [ %tmp8, %dec_label_pc_120c0 ]
  ret i32 %v1_120cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_120c4, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v2_120dc = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_120dc, i32* @r3, align 4
  store i32 -1, i32* @r1, align 4
  store i32 %arg1, i32* @r2, align 4
  %v0_120f0 = call i32 @__GI_vsnprintf()
  ret i32 %v0_120f0

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @__GI_vsnprintf() local_unnamed_addr {
entry:
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %v3_12104 = load i32, i32* @r4, align 4
  %v6_12104 = load i32, i32* @r5, align 4
  %v9_12104 = load i32, i32* @r6, align 4
  %v12_12104 = load i32, i32* @r7, align 4
  %v18_12104 = load i32, i32* @sl, align 4
  %v2_1210c = ptrtoint i32* %stack_var_-112 to i32
  %v0_12110 = load i32, i32* @r0, align 4
  store i32 %v0_12110, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  %v2_12118 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12118, i32* @r0, align 4
  %v0_12120 = load i32, i32* @r3, align 4
  store i32 %v0_12120, i32* @r7, align 4
  store i32 1, i32* @ip, align 4
  %v0_1212c = load i32, i32* @r1, align 4
  store i32 %v0_1212c, i32* @r5, align 4
  %v0_12130 = load i32, i32* @r2, align 4
  store i32 %v0_12130, i32* @r6, align 4
  store i32 208, i32* %stack_var_-112, align 4
  %v1_12144 = call i32 @__stdio_init_mutex(i32 %v2_12118)
  %v0_12148 = load i32, i32* @r4, align 4
  %v1_12148 = sub i32 -1, %v0_12148
  %v0_1214c = load i32, i32* @r5, align 4
  %v3_1214c = icmp ult i32 %v0_1214c, %v1_12148
  br i1 %v3_1214c, label %bb26, label %bb

bb:                                               ; preds = %entry
  store i32 %v1_12148, i32* @r5, align 4
  br label %bb26

bb26:                                             ; preds = %entry, %bb
  %v1_12154 = phi i32 [ %v0_1214c, %entry ], [ %v1_12148, %bb ]
  %v2_12154 = add i32 %v1_12154, %v0_12148
  %v0_1215c = load i32, i32* @r6, align 4
  %v0_12160 = load i32, i32* @r7, align 4
  %v0_1216c = load i32, i32* @sl, align 4
  %v5_12178 = inttoptr i32 %v0_12148 to i8*
  %v15_12180 = inttoptr i32 %v0_1215c to i8*
  %v16_12180 = call i32 @_vfprintf_internal(i32 %v2_1210c, i8* %v15_12180, i32 %v0_12160, i32 %v2_12154, i32 %v0_12148, i32 %v2_12154, i32 %v0_12148, i32 %v0_12148, i32 %v0_12148, i32 %v2_12154, i32 %v0_1216c)
  %v0_12184 = load i32, i32* @r5, align 4
  %v1_12184 = load i32, i32* @sl, align 4
  %v9_12184 = icmp eq i32 %v0_12184, %v1_12184
  br i1 %v9_12184, label %dec_label_pc_121ac, label %dec_label_pc_12190

dec_label_pc_12190:                               ; preds = %bb26
  %v3_12154 = inttoptr i32 %v2_12154 to i8*
  %v9_12198 = icmp eq i8* %v5_12178, %v3_12154
  br i1 %v9_12198, label %bb27, label %bb28

bb27:                                             ; preds = %dec_label_pc_12190
  %v2_1219c = add i32 %v0_12148, -1
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_12190, %bb27
  %v1_121a0 = phi i32 [ %v2_12154, %dec_label_pc_12190 ], [ %v2_1219c, %bb27 ]
  %v6_121a0 = inttoptr i32 %v1_121a0 to i8*
  %stack_var_-96.0 = select i1 %v9_12198, i8* %v6_121a0, i8* %v5_12178
  %v1_121a8 = trunc i32 %v1_12184 to i8
  store i8 %v1_121a8, i8* %stack_var_-96.0, align 1
  br label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %bb26, %bb28
  store i32 %v3_12104, i32* @r4, align 4
  store i32 %v6_12104, i32* @r5, align 4
  store i32 %v9_12104, i32* @r6, align 4
  store i32 %v12_12104, i32* @r7, align 4
  store i32 %v18_12104, i32* @sl, align 4
  ret i32 %v16_12180

; uselistorder directives
  uselistorder i32 %v2_12154, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_12148, { 2, 1, 0 }
  uselistorder i32 %v0_12148, { 2, 4, 5, 7, 3, 6, 1, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_121ac, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @_charpad(i32 %arg1, i8 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-25 = alloca i8, align 1
  %v3_121b8 = load i32, i32* @r4, align 4
  %v6_121b8 = load i32, i32* @r5, align 4
  %v9_121b8 = load i32, i32* @r6, align 4
  %v12_121b8 = load i32, i32* @r7, align 4
  store i8 %arg2, i8* %stack_var_-25, align 1
  %v10_121c4 = ptrtoint i8* %stack_var_-25 to i32
  store i32 %v10_121c4, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %v2_121dc2 = icmp eq i32 %arg3, 0
  br i1 %v2_121dc2, label %dec_label_pc_121fc, label %dec_label_pc_121f0

dec_label_pc_121d8:                               ; preds = %dec_label_pc_121f0
  %v1_121d8 = add i32 %v0_121d8, -1
  store i32 %v1_121d8, i32* @r4, align 4
  %v2_121dc = icmp eq i32 %v1_121d8, 0
  %v0_121e8 = load i32, i32* @r7, align 4
  br i1 %v2_121dc, label %dec_label_pc_121fc.loopexit, label %dec_label_pc_121f0

dec_label_pc_121f0:                               ; preds = %entry, %dec_label_pc_121d8
  %v0_121e84 = phi i32 [ %v0_121e8, %dec_label_pc_121d8 ], [ %arg1, %entry ]
  %v3_121f0 = inttoptr i32 %v0_121e84 to i16*
  %v4_121f0 = call i32 @__stdio_fwrite(i32 %v10_121c4, i32 1, i16* %v3_121f0)
  %v7_121f4 = icmp eq i32 %v4_121f0, 1
  %v0_121d8 = load i32, i32* @r4, align 4
  br i1 %v7_121f4, label %dec_label_pc_121d8, label %dec_label_pc_121fc.loopexit

dec_label_pc_121fc.loopexit:                      ; preds = %dec_label_pc_121d8, %dec_label_pc_121f0
  %v0_121fc.ph = phi i32 [ %v0_121d8, %dec_label_pc_121f0 ], [ 0, %dec_label_pc_121d8 ]
  %v1_121fc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_121fc

dec_label_pc_121fc:                               ; preds = %dec_label_pc_121fc.loopexit, %entry
  %v1_121fc = phi i32 [ 0, %entry ], [ %v1_121fc.pre, %dec_label_pc_121fc.loopexit ]
  %v0_121fc = phi i32 [ 0, %entry ], [ %v0_121fc.ph, %dec_label_pc_121fc.loopexit ]
  %v2_121fc = sub i32 %v1_121fc, %v0_121fc
  store i32 %v3_121b8, i32* @r4, align 4
  store i32 %v6_121b8, i32* @r5, align 4
  store i32 %v9_121b8, i32* @r6, align 4
  store i32 %v12_121b8, i32* @r7, align 4
  ret i32 %v2_121fc

; uselistorder directives
  uselistorder i32 %v1_121d8, { 1, 0 }
  uselistorder label %dec_label_pc_121fc.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_121f0, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1220c = load i32, i32* @r4, align 4
  store i32 %v3_1220c, i32* %stack_var_-24, align 4
  %v6_1220c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v1_12214 = and i32 %arg2, 128
  %v2_12214 = icmp eq i32 %v1_12214, 0
  %v0_12218 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12218, i32* @r8, align 4
  store i32 %arg3, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* @r7, align 4
  br i1 %v2_12214, label %dec_label_pc_12268thread-pre-split, label %dec_label_pc_1222c

dec_label_pc_1222c:                               ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_12230 = call i32 @strlen(i8* %arg4)
  store i32 %v3_12230, i32* %r0.global-to-local, align 4
  %v1_12234 = load i32, i32* %r4.global-to-local, align 4
  %v2_12234 = sub i32 %v1_12234, %v3_12230
  store i32 %v2_12234, i32* @r4, align 4
  store i32 %v3_12230, i32* @r6, align 4
  %tmp13 = icmp slt i32 %v2_12234, 1
  br i1 %tmp13, label %.thread, label %dec_label_pc_12248

.thread:                                          ; preds = %dec_label_pc_1222c
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12264

dec_label_pc_12248:                               ; preds = %dec_label_pc_1222c
  %v0_12248 = load i32, i32* @r5, align 4
  %v1_12248 = urem i32 %v0_12248, 128
  %v0_1224c = load i32, i32* @r8, align 4
  store i32 %v0_1224c, i32* %r0.global-to-local, align 4
  %v3_12254 = trunc i32 %v1_12248 to i8
  %v4_12254 = call i32 @_charpad(i32 %v0_1224c, i8 %v3_12254, i32 %v2_12234)
  store i32 %v4_12254, i32* %r0.global-to-local, align 4
  %v1_12258 = load i32, i32* @r4, align 4
  %v9_12258 = icmp eq i32 %v4_12254, %v1_12258
  store i32 %v4_12254, i32* %r5.global-to-local, align 4
  br i1 %v9_12258, label %dec_label_pc_12248.dec_label_pc_12264_crit_edge, label %dec_label_pc_12284

dec_label_pc_12248.dec_label_pc_12264_crit_edge:  ; preds = %dec_label_pc_12248
  %v0_12264.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12264

dec_label_pc_12264:                               ; preds = %.thread, %dec_label_pc_12248.dec_label_pc_12264_crit_edge
  %v0_12264 = phi i32 [ %v0_12264.pre, %dec_label_pc_12248.dec_label_pc_12264_crit_edge ], [ %v3_12230, %.thread ]
  store i32 %v0_12264, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12268

dec_label_pc_12268thread-pre-split:               ; preds = %entry
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12268

dec_label_pc_12268:                               ; preds = %dec_label_pc_12268thread-pre-split, %dec_label_pc_12264
  %v5_12274 = phi i32 [ %arg3, %dec_label_pc_12268thread-pre-split ], [ %v0_12264, %dec_label_pc_12264 ]
  %tmp14 = icmp slt i32 %v5_12274, 1
  br i1 %tmp14, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_12268
  br label %bb15

bb:                                               ; preds = %dec_label_pc_12268
  %v5_12270 = load i32, i32* @r7, align 4
  br label %bb15

bb15:                                             ; preds = %.thread5, %bb
  %storemerge = phi i32 [ 0, %.thread5 ], [ %v5_12270, %bb ]
  %tmp16 = phi i1 [ false, %.thread5 ], [ true, %bb ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %tmp16, i32 ptrtoint (i32* @global_var_13a78.386 to i32))
  %v0_12280 = load i32, i32* %r5.global-to-local, align 4
  %v2_12280 = add i32 %storemerge, %v0_12280
  store i32 %v2_12280, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12284

dec_label_pc_12284:                               ; preds = %dec_label_pc_12248, %bb15
  %v0_12284 = phi i32 [ %v4_12254, %dec_label_pc_12248 ], [ %v2_12280, %bb15 ]
  store i32 %v0_12284, i32* %r0.global-to-local, align 4
  %v2_12288 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12288, i32* %r4.global-to-local, align 4
  store i32 %v6_1220c, i32* %r5.global-to-local, align 4
  ret i32 %v0_12284

; uselistorder directives
  uselistorder i32 %v0_12284, { 1, 0 }
  uselistorder i32 %v0_12264, { 1, 0 }
  uselistorder i32 %v2_12234, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 5, 4, 7, 6, 1, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12284, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_12264, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp98 = call i32 @__decompiler_undefined_function_0()
  %tmp99 = call i32 @__decompiler_undefined_function_0()
  %tmp102 = call i8 @__decompiler_undefined_function_2()
  %tmp103 = call i32 @__decompiler_undefined_function_0()
  %tmp104 = call i32 @__decompiler_undefined_function_0()
  %tmp105 = call i32 @__decompiler_undefined_function_0()
  %tmp106 = call i8 @__decompiler_undefined_function_2()
  %tmp107 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %v6_12290 = load i32, i32* @r5, align 4
  %v12_12290 = load i32, i32* @r7, align 4
  %v18_12290 = load i32, i32* @sb, align 4
  %v21_12290 = load i32, i32* @sl, align 4
  %v24_12290 = load i32, i32* @fp, align 4
  %v2_12298 = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_12298, i32* @r6, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %v2_12298, i32* %r0.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_122a8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_122a8, i32* @r5, align 4
  %v2_122ac = call i32 @_ppfs_init(i32* nonnull %stack_var_-352)
  store i32 %v2_122ac, i32* %r0.global-to-local, align 4
  %v1_122b4 = icmp slt i32 %v2_122ac, 0
  br i1 %v1_122b4, label %dec_label_pc_122c4, label %dec_label_pc_122f8

dec_label_pc_122c4:                               ; preds = %entry
  %v3_122c4 = load i32, i32* %stack_var_-352, align 4
  store i32 %v3_122c4, i32* @r4, align 4
  %v1_122c8 = inttoptr i32 %v3_122c4 to i8*
  store i32 %v3_122c4, i32* %r0.global-to-local, align 4
  %v3_122cc = call i32 @strlen(i8* %v1_122c8)
  store i32 %v3_122cc, i32* %r0.global-to-local, align 4
  %v2_122d0 = icmp eq i32 %v3_122cc, 0
  br i1 %v2_122d0, label %bb, label %dec_label_pc_122e0

bb:                                               ; preds = %dec_label_pc_122c4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12948

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122c4
  %v0_122e0 = load i32, i32* @r4, align 4
  store i32 %v0_122e0, i32* %r0.global-to-local, align 4
  %v0_122e4 = load i32, i32* @fp, align 4
  store i32 %v0_122e4, i32* %r2.global-to-local, align 4
  %v3_122e8 = inttoptr i32 %v0_122e4 to i16*
  %v4_122e8 = call i32 @__stdio_fwrite(i32 %v0_122e0, i32 %v3_122cc, i16* %v3_122e8)
  store i32 %v4_122e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12948

dec_label_pc_122f8:                               ; preds = %entry
  %v0_122f8 = load i32, i32* @r5, align 4
  store i32 %v2_12298, i32* %r0.global-to-local, align 4
  %v2_12300 = call i32 @_ppfs_prepargs(i32 %v2_12298, i32 %v0_122f8)
  store i32 %v2_12300, i32* %r0.global-to-local, align 4
  %v0_12348 = load i32, i32* @r4, align 4
  store i32 %v0_12348, i32* %r2.global-to-local, align 4
  %v1_123cc = bitcast i32* %stack_var_-352 to i8*
  %v4_123dc = zext i8 %tmp106 to i32
  %tmp137 = icmp slt i32 %tmp107, 1
  %v7_123e8 = ptrtoint i32* %stack_var_-272 to i32
  %v2_12400 = ptrtoint i32* %stack_var_-40 to i32
  %v2_1241c = icmp eq i32 %tmp104, 0
  %v2_12754 = ptrtoint i32* %stack_var_-200 to i32
  %v2_12798 = ptrtoint i32* %stack_var_-348 to i32
  %v2_1279c = ptrtoint i32* %stack_var_-72 to i32
  %v2_12650 = ptrtoint i32* %stack_var_-44 to i32
  %v2_1265c = ptrtoint i32* %stack_var_-52 to i32
  %v7_124b8 = zext i8 %tmp102 to i32
  %v2_124f0 = ptrtoint i32* %stack_var_-73 to i32
  %v1_124f8 = bitcast i32* %stack_var_-73 to i8*
  %v2_12500 = icmp ugt i32 %tmp104, 4
  %v7_12500 = icmp eq i32 %tmp104, 5
  %v7_123e4 = ptrtoint i32* %stack_var_-280 to i32
  %v5_12414195 = icmp sgt i32 %tmp105, 0
  %tmp207 = icmp ugt i32 %tmp104, 7
  %tmp208 = icmp ugt i32 %tmp104, 15
  %v2_12624 = icmp ugt i32 %tmp104, 16
  %v7_12624 = icmp eq i32 %tmp104, 17
  %v2_12628 = xor i1 %v7_12624, true
  %v3_12628 = and i1 %v2_12624, %v2_12628
  %v2_126ac = icmp ugt i32 %tmp104, 18
  %v7_126ac = icmp eq i32 %tmp104, 19
  %v2_126b0 = xor i1 %v7_126ac, true
  %v3_126b0 = and i1 %v2_126ac, %v2_126b0
  %v7_12748 = icmp eq i32 %tmp104, 20
  %v1_12460 = add i32 %tmp104, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37137)
  %v2_12460 = inttoptr i32 %v1_12460 to i8*
  %v2_1248c = xor i1 %v7_12500, true
  %v3_1248c = and i1 %v2_12500, %v2_1248c
  %v7_124c0 = icmp eq i32 %tmp104, 1
  %v2_12508 = xor i1 %v2_12500, true
  %v3_12508 = or i1 %v7_12500, %v2_12508
  %tmp209 = icmp ult i32 %tmp104, 3
  %v7_12570 = icmp eq i32 %tmp104, 3
  %v11_1257c = icmp eq i32 %tmp104, 4
  %v9_123ec = mul nuw nsw i32 %v4_123dc, 8
  %v10_123ec = add i32 %v7_123e4, %v9_123ec
  br label %dec_label_pc_1234c.outer

dec_label_pc_1234c.outer:                         ; preds = %dec_label_pc_1292c, %dec_label_pc_122f8
  %v0_1234c45 = phi i32 [ %v3_1292c, %dec_label_pc_1292c ], [ %v0_12348, %dec_label_pc_122f8 ]
  %v0_12480 = phi i32 [ %stack_var_-336.4, %dec_label_pc_1292c ], [ %tmp103, %dec_label_pc_122f8 ]
  %stack_var_-356.1.ph = phi i32 [ %stack_var_-356.3, %dec_label_pc_1292c ], [ 0, %dec_label_pc_122f8 ]
  br label %dec_label_pc_1234c.outer36

dec_label_pc_1234c.outer36:                       ; preds = %dec_label_pc_1234c.outer, %dec_label_pc_12938
  %v0_1234c44 = phi i32 [ %v0_1234c45, %dec_label_pc_1234c.outer ], [ %v1_12938, %dec_label_pc_12938 ]
  %v5_12378 = phi i32 [ %v0_1234c45, %dec_label_pc_1234c.outer ], [ %v1_123a8, %dec_label_pc_12938 ]
  %stack_var_-356.1.ph37 = phi i32 [ %stack_var_-356.1.ph, %dec_label_pc_1234c.outer ], [ %v1_12818, %dec_label_pc_12938 ]
  %v1_1234c188 = inttoptr i32 %v0_1234c44 to i8*
  %v2_1234c189 = load i8, i8* %v1_1234c188, align 1
  %v2_12350191 = icmp eq i8 %v2_1234c189, 0
  br i1 %v2_12350191, label %dec_label_pc_12368, label %bb138

bb138:                                            ; preds = %dec_label_pc_1234c.outer36, %.thread6
  %v2_1234c193 = phi i8 [ %v2_1234c, %.thread6 ], [ %v2_1234c189, %dec_label_pc_1234c.outer36 ]
  %v1_12360192 = phi i32 [ %v2_12360, %.thread6 ], [ %v0_1234c44, %dec_label_pc_1234c.outer36 ]
  %v8_12354 = icmp eq i8 %v2_1234c193, 37
  br i1 %v8_12354, label %dec_label_pc_12368, label %.thread6

.thread6:                                         ; preds = %bb138
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_12360 = add i32 %v1_12360192, 1
  store i32 %v2_12360, i32* @r4, align 4
  %v1_1234c = inttoptr i32 %v2_12360 to i8*
  %v2_1234c = load i8, i8* %v1_1234c, align 1
  %v2_12350 = icmp eq i8 %v2_1234c, 0
  br i1 %v2_12350, label %dec_label_pc_12368, label %bb138

dec_label_pc_12368:                               ; preds = %bb138, %.thread6, %dec_label_pc_1234c.outer36
  %v1_12360.lcssa = phi i32 [ %v0_1234c44, %dec_label_pc_1234c.outer36 ], [ %v2_12360, %.thread6 ], [ %v1_12360192, %bb138 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_12368 = sub i32 %v1_12360.lcssa, %v5_12378
  %v9_12368 = icmp eq i32 %v1_12360.lcssa, %v5_12378
  br i1 %v9_12368, label %dec_label_pc_1239c, label %dec_label_pc_12370

dec_label_pc_12370:                               ; preds = %dec_label_pc_12368
  store i32 %v2_12368, i32* @r5, align 4
  %tmp140 = icmp slt i32 %v2_12368, 1
  br i1 %tmp140, label %bb142, label %bb141

bb141:                                            ; preds = %dec_label_pc_12370
  store i32 %v5_12378, i32* %r0.global-to-local, align 4
  %v5_12380 = load i32, i32* @fp, align 4
  store i32 %v5_12380, i32* %r2.global-to-local, align 4
  br label %bb142

bb142:                                            ; preds = %dec_label_pc_12370, %bb141
  %tmp143 = phi i1 [ true, %bb141 ], [ false, %dec_label_pc_12370 ]
  store i32 74632, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp143, i32 ptrtoint (i32* @global_var_13a78.386 to i32))
  %v0_12388 = load i32, i32* %r0.global-to-local, align 4
  %v1_12388 = load i32, i32* @r5, align 4
  %v9_12388 = icmp eq i32 %v0_12388, %v1_12388
  br i1 %v9_12388, label %dec_label_pc_12390, label %dec_label_pc_12940

dec_label_pc_12390:                               ; preds = %bb142
  %v2_12394 = add i32 %v0_12388, %stack_var_-356.1.ph37
  %v0_1239c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1239c

dec_label_pc_1239c:                               ; preds = %dec_label_pc_12368, %dec_label_pc_12390
  %v0_123b0 = phi i32 [ %v5_12378, %dec_label_pc_12368 ], [ %v0_1239c.pre, %dec_label_pc_12390 ]
  %v1_12818 = phi i32 [ %stack_var_-356.1.ph37, %dec_label_pc_12368 ], [ %v2_12394, %dec_label_pc_12390 ]
  %v1_1239c = inttoptr i32 %v0_123b0 to i8*
  %v2_1239c = load i8, i8* %v1_1239c, align 1
  %v2_123a0 = icmp eq i8 %v2_1239c, 0
  br i1 %v2_123a0, label %dec_label_pc_12948, label %dec_label_pc_123a8

dec_label_pc_123a8:                               ; preds = %dec_label_pc_1239c
  %v1_123a8 = add i32 %v0_123b0, 1
  %v2_123a8 = inttoptr i32 %v1_123a8 to i8*
  %v3_123a8 = load i8, i8* %v2_123a8, align 1
  %v7_123ac = icmp eq i8 %v3_123a8, 37
  store i32 %v1_123a8, i32* %r2.global-to-local, align 4
  br i1 %v7_123ac, label %dec_label_pc_12938, label %dec_label_pc_123b8

dec_label_pc_123b8:                               ; preds = %dec_label_pc_123a8
  store i32 %v2_12298, i32* @r4, align 4
  store i32 %v2_12298, i32* %r0.global-to-local, align 4
  store i32 %v1_123a8, i32* %stack_var_-352, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_123cc = call i32 @_ppfs_parsespec(i8* %v1_123cc)
  store i32 %v2_12298, i32* @r0, align 4
  %v0_123d4 = call i32 @_ppfs_setargs()
  store i32 %v0_123d4, i32* %r0.global-to-local, align 4
  store i32 %v4_123dc, i32* @ip, align 4
  br i1 %tmp137, label %bb146, label %bb145

bb145:                                            ; preds = %dec_label_pc_123b8
  br label %bb146

bb146:                                            ; preds = %dec_label_pc_123b8, %bb145
  %storemerge = phi i32 [ %v10_123ec, %bb145 ], [ %v7_123e8, %dec_label_pc_123b8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br i1 %v5_12414195, label %dec_label_pc_123f8, label %dec_label_pc_12418

dec_label_pc_123f8:                               ; preds = %bb146, %dec_label_pc_123f8
  %v5_12404197 = phi i32 [ %v5_12404, %dec_label_pc_123f8 ], [ %v2_12400, %bb146 ]
  %v0_123f8196 = phi i32 [ %v1_123fc, %dec_label_pc_123f8 ], [ %storemerge, %bb146 ]
  %v2_123f8 = add i32 %v5_12404197, -32
  %v3_123f8 = inttoptr i32 %v2_123f8 to i32*
  store i32 %v0_123f8196, i32* %v3_123f8, align 4
  %v0_123fc = load i32, i32* %r0.global-to-local, align 4
  %v1_123fc = add i32 %v0_123fc, 8
  store i32 %v1_123fc, i32* %r0.global-to-local, align 4
  %v1_12404.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12404 = mul i32 %v1_12404.pre, 4
  %v5_12404 = add i32 %v4_12404, %v2_12400
  %v1_12410 = add i32 %v1_12404.pre, 1
  store i32 %v1_12410, i32* %r2.global-to-local, align 4
  %v5_12414 = icmp slt i32 %v1_12404.pre, %tmp105
  br i1 %v5_12414, label %dec_label_pc_123f8, label %dec_label_pc_12418

dec_label_pc_12418:                               ; preds = %dec_label_pc_123f8, %bb146
  store i32 %tmp104, i32* %r2.global-to-local, align 4
  br i1 %v2_1241c, label %dec_label_pc_12424, label %dec_label_pc_12448

dec_label_pc_12424:                               ; preds = %dec_label_pc_12418
  %v3_12424 = load i32, i32* %stack_var_-72, align 4
  %v1_12430 = inttoptr i32 %v3_12424 to i32*
  %v2_12430 = load i32, i32* %v1_12430, align 4
  store i32 %v2_12430, i32* %r0.global-to-local, align 4
  %v1_12434 = and i32 %v0_12480, 3840
  store i32 %v1_12818, i32* %r2.global-to-local, align 4
  %v3_1243c = ashr i32 %v1_12818, 31
  %v4_12440 = inttoptr i32 %v2_12430 to i16*
  %v5_12440 = call i32 @_store_inttype(i16* %v4_12440, i32 %v1_12434, i32 %v1_12818, i32 %v3_1243c)
  store i32 %v5_12440, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1292c

dec_label_pc_12448:                               ; preds = %dec_label_pc_12418
  br i1 %tmp207, label %dec_label_pc_125e4, label %dec_label_pc_12450

dec_label_pc_12450:                               ; preds = %dec_label_pc_12448
  %v3_12460 = load i8, i8* %v2_12460, align 1
  %v4_12460 = zext i8 %v3_12460 to i32
  %v7_12464 = icmp eq i8 %v3_12460, 10
  br i1 %v7_12464, label %dec_label_pc_12470, label %bb147

bb147:                                            ; preds = %dec_label_pc_12450
  br label %bb151

dec_label_pc_12470:                               ; preds = %dec_label_pc_12450
  %v1_12480 = and i32 %v0_12480, 64
  %v2_12480 = icmp eq i32 %v1_12480, 0
  br i1 %v2_12480, label %bb151, label %bb150

bb150:                                            ; preds = %dec_label_pc_12470
  br label %bb151

bb151:                                            ; preds = %bb147, %dec_label_pc_12470, %bb150
  br i1 %v3_1248c, label %.thread, label %dec_label_pc_12494

.thread:                                          ; preds = %bb151
  %v5_1248c = sub nsw i32 0, %v4_12460
  br label %dec_label_pc_124ac

dec_label_pc_12494:                               ; preds = %bb151
  br i1 %v7_12570, label %bb152, label %dec_label_pc_124a0

bb152:                                            ; preds = %dec_label_pc_12494
  br label %dec_label_pc_124ac

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12494
  br i1 %v7_124c0, label %dec_label_pc_124b0, label %dec_label_pc_124ac

dec_label_pc_124ac:                               ; preds = %.thread, %bb152, %dec_label_pc_124a0
  %v0_124d881 = phi i32 [ %v5_1248c, %.thread ], [ %v4_12460, %bb152 ], [ %v4_12460, %dec_label_pc_124a0 ]
  br label %dec_label_pc_124b0

dec_label_pc_124b0:                               ; preds = %dec_label_pc_124a0, %dec_label_pc_124ac
  %v0_124d880 = phi i32 [ %v0_124d881, %dec_label_pc_124ac ], [ %v4_12460, %dec_label_pc_124a0 ]
  %storemerge91 = phi i32 [ 11, %dec_label_pc_124ac ], [ 6, %dec_label_pc_124a0 ]
  store i32 %storemerge91, i32* @r6, align 4
  %v3_124b0 = load i32, i32* %stack_var_-348, align 4
  %v1_124b4 = icmp slt i32 %v3_124b0, 0
  %v7_124b8. = select i1 %v1_124b4, i32 %v7_124b8, i32 32
  store i32 %v7_124b8., i32* @sb, align 4
  br i1 %v7_124c0, label %bb157, label %.thread15

.thread15:                                        ; preds = %dec_label_pc_124b0
  store i32 %v2_12400, i32* %r2.global-to-local, align 4
  %v2_124c8 = load i32, i32* @ip, align 4
  %v5_124c8 = mul i32 %v2_124c8, 4
  %v6_124c8 = add i32 %v5_124c8, %v2_12400
  %v2_124cc = add i32 %v6_124c8, -276
  %v3_124cc = inttoptr i32 %v2_124cc to i32*
  %v4_124cc = load i32, i32* %v3_124cc, align 4
  %v2_124d4 = and i32 %v4_124cc, 3840
  br label %bb157

bb157:                                            ; preds = %dec_label_pc_124b0, %.thread15
  %storemerge93 = phi i32 [ %v2_124d4, %.thread15 ], [ 1024, %dec_label_pc_124b0 ]
  store i32 %storemerge93, i32* @r0, align 4
  store i32 %v0_124d880, i32* @r2, align 4
  %v3_124dc = load i32, i32* %stack_var_-72, align 4
  store i32 %v3_124dc, i32* @r1, align 4
  %v0_124e0 = call i32 @_load_inttype()
  store i32 %v0_124e0, i32* @r2, align 4
  %v0_124ec = load i32, i32* @r1, align 4
  store i32 %v0_124ec, i32* @r3, align 4
  store i32 %v2_124f0, i32* %r0.global-to-local, align 4
  %v2_124f8 = call i32 @_uintmaxtostr(i8* %v1_124f8)
  store i32 %v2_124f8, i32* %r0.global-to-local, align 4
  store i32 %v2_124f8, i32* @r4, align 4
  br i1 %v3_12508, label %bb160, label %dec_label_pc_1250c

dec_label_pc_1250c:                               ; preds = %bb157
  %v3_124f8 = inttoptr i32 %v2_124f8 to i8*
  %v3_1250c = load i8, i8* %v3_124f8, align 1
  %v7_12510 = icmp eq i8 %v3_1250c, 45
  %v2_12518 = or i32 %v0_12480, 2
  %v2_12518.stack_var_-336.0 = select i1 %v7_12510, i32 %v2_12518, i32 %v0_12480
  br i1 %v7_12510, label %.thread17, label %dec_label_pc_1252c

.thread17:                                        ; preds = %dec_label_pc_1250c
  %v3_1251c = add i32 %v2_124f8, 1
  store i32 %v3_1251c, i32* @r4, align 4
  store i32 2, i32* @r6, align 4
  br label %bb160

dec_label_pc_1252c:                               ; preds = %dec_label_pc_1250c
  %v1_1252c = and i32 %v2_12518.stack_var_-336.0, 2
  %v2_1252c = icmp eq i32 %v1_1252c, 0
  br i1 %v2_1252c, label %dec_label_pc_12538, label %bb158

bb158:                                            ; preds = %dec_label_pc_1252c
  store i32 0, i32* @r6, align 4
  br label %bb160

dec_label_pc_12538:                               ; preds = %dec_label_pc_1252c
  %v1_12538 = urem i32 %v2_12518.stack_var_-336.0, 2
  %v2_12538 = icmp eq i32 %v1_12538, 0
  br i1 %v2_12538, label %bb160, label %bb159

bb159:                                            ; preds = %dec_label_pc_12538
  store i32 4, i32* @r6, align 4
  br label %bb160

bb160:                                            ; preds = %.thread17, %bb158, %bb157, %dec_label_pc_12538, %bb159
  %v0_12594 = phi i32 [ %v2_124f8, %bb157 ], [ %v3_1251c, %.thread17 ], [ %v2_124f8, %dec_label_pc_12538 ], [ %v2_124f8, %bb159 ], [ %v2_124f8, %bb158 ]
  %v0_12550 = phi i32 [ %v0_12480, %bb157 ], [ %v2_12518, %.thread17 ], [ %v0_12480, %dec_label_pc_12538 ], [ %v0_12480, %bb159 ], [ %v0_12480, %bb158 ]
  %v3_12540 = load i32, i32* %stack_var_-348, align 4
  %v1_12548 = icmp slt i32 %v3_12540, 0
  br i1 %v1_12548, label %bb161, label %bb162

bb161:                                            ; preds = %bb160
  br label %bb162

bb162:                                            ; preds = %bb160, %bb161
  %storemerge206 = phi i32 [ 1, %bb161 ], [ %v3_12540, %bb160 ]
  %v0_12578 = phi i32 [ 1, %bb161 ], [ %v3_12540, %bb160 ]
  store i32 %storemerge206, i32* %r2.global-to-local, align 4
  %v1_12550 = and i32 %v0_12550, 16
  %v2_12550 = icmp eq i32 %v1_12550, 0
  %v2_1255c = sub i32 %v2_124f0, %v0_12594
  store i32 %v2_1255c, i32* @r5, align 4
  br i1 %v2_12550, label %bb169, label %dec_label_pc_12564

dec_label_pc_12564:                               ; preds = %bb162
  br i1 %tmp209, label %bb163, label %bb164

bb163:                                            ; preds = %dec_label_pc_12564
  store i32 6, i32* @r6, align 4
  br label %bb164

bb164:                                            ; preds = %dec_label_pc_12564, %bb163
  br i1 %v7_12570, label %bb165, label %bb166

bb165:                                            ; preds = %bb164
  store i32 9, i32* @r6, align 4
  br label %bb166

bb166:                                            ; preds = %bb164, %bb165
  %tmp210 = icmp ugt i32 %v0_12578, %v2_1255c
  br i1 %tmp210, label %bb169, label %bb167

bb167:                                            ; preds = %bb166
  br i1 %v11_1257c, label %dec_label_pc_12584, label %bb169

dec_label_pc_12584:                               ; preds = %bb167
  %v1_12584 = inttoptr i32 %v0_12594 to i8*
  %v2_12584 = load i8, i8* %v1_12584, align 1
  %v7_12588 = icmp eq i8 %v2_12584, 48
  br i1 %v7_12588, label %bb168, label %.thread24

bb168:                                            ; preds = %dec_label_pc_12584
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb169

.thread24:                                        ; preds = %dec_label_pc_12584
  %v2_12590 = add i32 %v2_1255c, 1
  store i32 %v2_12590, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %bb166, %bb168, %bb167, %bb162, %.thread24
  %v5_125d4 = phi i32 [ %v0_12578, %bb167 ], [ %v0_12578, %bb162 ], [ 1, %bb168 ], [ %v2_12590, %.thread24 ], [ %v0_12578, %bb166 ]
  %v1_12594 = inttoptr i32 %v0_12594 to i8*
  %v2_12594 = load i8, i8* %v1_12594, align 1
  %v7_12598 = icmp eq i8 %v2_12594, 48
  br i1 %v7_12598, label %dec_label_pc_125a0, label %dec_label_pc_125d0

dec_label_pc_125a0:                               ; preds = %bb169
  %v0_125a4 = load i32, i32* @r6, align 4
  %v7_125a8 = icmp slt i32 %v0_125a4, 6
  br i1 %v7_125a8, label %bb171, label %bb170

bb170:                                            ; preds = %dec_label_pc_125a0
  store i32 11, i32* @r6, align 4
  br label %bb171

bb171:                                            ; preds = %dec_label_pc_125a0, %bb170
  br i1 %v7_124c0, label %.thread27, label %dec_label_pc_125c4

.thread27:                                        ; preds = %bb171
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @ip, align 4
  store i32 5, i32* @r5, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37164), i32* @r4, align 4
  br label %dec_label_pc_125dc

dec_label_pc_125c4:                               ; preds = %bb171
  %v2_125c4 = icmp eq i32 %v5_125d4, 0
  br i1 %v2_125c4, label %bb172, label %dec_label_pc_125d0

bb172:                                            ; preds = %dec_label_pc_125c4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_125dc

dec_label_pc_125d0:                               ; preds = %dec_label_pc_125c4, %bb169
  %v2_125d0 = sub i32 %v5_125d4, %v2_1255c
  %tmp211 = icmp ugt i32 %v5_125d4, %v2_1255c
  br i1 %tmp211, label %.thread85, label %dec_label_pc_125dc

.thread85:                                        ; preds = %dec_label_pc_125d0
  store i32 %v2_125d0, i32* @r8, align 4
  br label %dec_label_pc_127e8thread-pre-split

dec_label_pc_125dc:                               ; preds = %dec_label_pc_125d0, %.thread27, %bb172
  %v1_127ec.pre205 = phi i32 [ %v2_1255c, %dec_label_pc_125d0 ], [ 5, %.thread27 ], [ 0, %bb172 ]
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_127e8thread-pre-split

dec_label_pc_125e4:                               ; preds = %dec_label_pc_12448
  br i1 %tmp208, label %dec_label_pc_12624, label %dec_label_pc_125ec

dec_label_pc_125ec:                               ; preds = %dec_label_pc_125e4
  %v3_125fc = load i32, i32* %stack_var_-72, align 4
  %v0_12600 = load i32, i32* @fp, align 4
  store i32 %v0_12600, i32* %r0.global-to-local, align 4
  %v1_12604 = inttoptr i32 %v3_125fc to i32*
  %v2_12604 = load i32, i32* %v1_12604, align 4
  store i32 %v2_12604, i32* %r2.global-to-local, align 4
  %v3_12604 = add i32 %v3_125fc, 4
  %v4_12604 = inttoptr i32 %v3_12604 to i32*
  %v5_12604 = load i32, i32* %v4_12604, align 4
  %v8_12608 = call i32 @_fpmaxtostr(i32 %v0_12600, double bitcast (i64 sext (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -52740) to i64) to double), i32 %v2_12604, i32 %v5_12604, i32 %v2_12798, i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -52740))
  store i32 %v8_12608, i32* %r0.global-to-local, align 4
  %v1_1260c = icmp slt i32 %v8_12608, 0
  br i1 %v1_1260c, label %dec_label_pc_12940, label %dec_label_pc_12614

dec_label_pc_12614:                               ; preds = %dec_label_pc_125ec
  %v2_12618 = add i32 %v8_12608, %v1_12818
  store i32 %v2_12618, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1292c

dec_label_pc_12624:                               ; preds = %dec_label_pc_125e4
  br i1 %v3_12628, label %dec_label_pc_126ac, label %dec_label_pc_1262c

dec_label_pc_1262c:                               ; preds = %dec_label_pc_12624
  store i32 0, i32* @sl, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_12634 = load i32, i32* %stack_var_-72, align 4
  store i32 %v3_12634, i32* %r0.global-to-local, align 4
  br i1 %v7_12624, label %dec_label_pc_1263c, label %dec_label_pc_12674

dec_label_pc_1263c:                               ; preds = %dec_label_pc_1262c
  %v1_1263c = inttoptr i32 %v3_12634 to i32*
  %v2_1263c = load i32, i32* %v1_1263c, align 4
  %v9_12640 = icmp eq i32 %v2_1263c, 0
  store i32 %v2_1263c, i32* %stack_var_-44, align 4
  br i1 %v9_12640, label %dec_label_pc_126ec, label %dec_label_pc_1264c

dec_label_pc_1264c:                               ; preds = %dec_label_pc_1263c
  %v3_1264c = load i32, i32* %stack_var_-348, align 4
  store i32 %v2_12650, i32* @r0, align 4
  %v4_12654 = ashr i32 %v3_1264c, 31
  %v5_12654 = or i32 %v4_12654, %v3_1264c
  store i32 %v5_12654, i32* %r2.global-to-local, align 4
  store i32 %v2_12650, i32* @r1, align 4
  %v6_12660 = call i32 @__GI_wcsrtombs(i32 %v2_12650, i32 %v2_12650, i32 %v5_12654, i32 %v2_1265c, i32 0, i32 %v2_1263c)
  store i32 %v6_12660, i32* %r0.global-to-local, align 4
  %v3_12664 = icmp eq i32 %v6_12660, -1
  store i32 %v6_12660, i32* @r5, align 4
  br i1 %v3_12664, label %dec_label_pc_12940, label %dec_label_pc_127d8

dec_label_pc_12674:                               ; preds = %dec_label_pc_1262c
  store i32 %v2_12754, i32* %r7.global-to-local, align 4
  %v1_12678 = inttoptr i32 %v3_12634 to i32*
  %v2_12678 = load i32, i32* %v1_12678, align 4
  store i32 %v2_1265c, i32* %r2.global-to-local, align 4
  store i32 %v2_12754, i32* %r0.global-to-local, align 4
  %v5_12684 = call i32 @__GI_wcrtomb(i32 %v2_12754, i32 %v2_12678, i32 %v2_1265c, i32 %tmp105, i32 0)
  store i32 %v5_12684, i32* %r0.global-to-local, align 4
  %v7_12688 = icmp eq i32 %v5_12684, -1
  store i32 %v5_12684, i32* @r5, align 4
  br i1 %v7_12688, label %dec_label_pc_12940, label %dec_label_pc_12694

dec_label_pc_12694:                               ; preds = %dec_label_pc_12674
  %v0_12694 = load i32, i32* @sl, align 4
  store i32 %v0_12694, i32* @r8, align 4
  store i32 %v2_12754, i32* @r4, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  %v1_126a4 = trunc i32 %v0_12694 to i8
  %v2_126a4 = load i32, i32* %r7.global-to-local, align 4
  %v4_126a4 = add i32 %v2_126a4, %v5_12684
  %v5_126a4 = inttoptr i32 %v4_126a4 to i8*
  store i8 %v1_126a4, i8* %v5_126a4, align 1
  %v0_127ec.pre.pre = load i32, i32* @r8, align 4
  %v1_127ec.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_127e8thread-pre-split

dec_label_pc_126ac:                               ; preds = %dec_label_pc_12624
  br i1 %v3_126b0, label %dec_label_pc_12748, label %dec_label_pc_126b4

dec_label_pc_126b4:                               ; preds = %dec_label_pc_126ac
  %v3_126b4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v3_126b4, i32* %r0.global-to-local, align 4
  %v1_126bc = inttoptr i32 %v3_126b4 to i32*
  %v2_126bc = load i32, i32* %v1_126bc, align 4
  br i1 %v7_126ac, label %dec_label_pc_126bc, label %dec_label_pc_12720

dec_label_pc_126bc:                               ; preds = %dec_label_pc_126b4
  store i32 %v2_126bc, i32* @r4, align 4
  %v2_126c0 = icmp eq i32 %v2_126bc, 0
  br i1 %v2_126c0, label %dec_label_pc_126ec, label %dec_label_pc_126c8

dec_label_pc_126c8:                               ; preds = %dec_label_pc_126bc, %dec_label_pc_12750
  %v0_126cc = phi i32 [ %v2_126bc, %dec_label_pc_126bc ], [ %v3_12760, %dec_label_pc_12750 ]
  %v3_126c8 = load i32, i32* %stack_var_-348, align 4
  store i32 %v0_126cc, i32* %r0.global-to-local, align 4
  %v4_126d0 = ashr i32 %v3_126c8, 31
  %v5_126d0 = or i32 %v4_126d0, %v3_126c8
  %v2_126d4 = inttoptr i32 %v0_126cc to i8*
  %v3_126d4 = call i32 @strnlen(i8* %v2_126d4, i32 %v5_126d0)
  store i32 %v3_126d4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v3_126d4, i32* @r5, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  br label %dec_label_pc_127e8

dec_label_pc_126ec:                               ; preds = %dec_label_pc_126bc, %dec_label_pc_1263c
  %v3_126ec = load i32, i32* %stack_var_-348, align 4
  %v1_126f0 = icmp slt i32 %v3_126ec, 0
  br i1 %v1_126f0, label %dec_label_pc_12708, label %dec_label_pc_126f8

dec_label_pc_126f8:                               ; preds = %dec_label_pc_126ec
  %tmp212 = icmp ult i32 %v3_126ec, 6
  br i1 %tmp212, label %dec_label_pc_12710, label %dec_label_pc_12708

dec_label_pc_12708:                               ; preds = %dec_label_pc_126f8, %dec_label_pc_126ec
  br label %dec_label_pc_12710

dec_label_pc_12710:                               ; preds = %dec_label_pc_126f8, %dec_label_pc_12708
  %storemerge97 = phi i32 [ 6, %dec_label_pc_12708 ], [ 0, %dec_label_pc_126f8 ]
  store i32 %storemerge97, i32* @r5, align 4
  store i32 0, i32* @r8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37156), i32* @r4, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  br label %dec_label_pc_127e8

dec_label_pc_12720:                               ; preds = %dec_label_pc_126b4
  store i32 %v2_126bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 1, i32* @r5, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v2_12754, i32* @r4, align 4
  store i32 %v2_126bc, i32* %stack_var_-200, align 4
  br label %dec_label_pc_127e8thread-pre-split

dec_label_pc_12748:                               ; preds = %dec_label_pc_126ac
  br i1 %v7_12748, label %dec_label_pc_12750, label %dec_label_pc_1276c

dec_label_pc_12750:                               ; preds = %dec_label_pc_12748
  %v0_12750 = call i32 @__GI___errno_location()
  store i32 %v0_12750, i32* %r0.global-to-local, align 4
  %v1_12758 = inttoptr i32 %v0_12750 to i32*
  %v2_12758 = load i32, i32* %v1_12758, align 4
  store i32 %v2_12758, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  %v3_12760 = call i32 @__GI___glibc_strerror_r(i32 %v2_12758, i32 %v2_12754, i32 128)
  store i32 %v3_12760, i32* %r0.global-to-local, align 4
  store i32 %v3_12760, i32* @r4, align 4
  br label %dec_label_pc_126c8

dec_label_pc_1276c:                               ; preds = %dec_label_pc_12748
  %v4_12774 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 728) to i32*), align 4
  %v1_1277c = add i32 %v4_12774, 10
  store i32 %v1_1277c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12780

dec_label_pc_12780:                               ; preds = %dec_label_pc_127c8, %dec_label_pc_1276c
  %v1_12790 = phi i32 [ %v1_127c8, %dec_label_pc_127c8 ], [ %v4_12774, %dec_label_pc_1276c ]
  %v1_12780 = inttoptr i32 %v1_12790 to i8*
  %v2_12780 = load i8, i8* %v1_12780, align 1
  %v3_12780 = zext i8 %v2_12780 to i32
  store i32 %v3_12780, i32* %r2.global-to-local, align 4
  %v9_12788 = icmp eq i32 %v3_12780, %tmp99
  br i1 %v9_12788, label %dec_label_pc_12790, label %dec_label_pc_127c8

dec_label_pc_12790:                               ; preds = %dec_label_pc_12780
  %v2_12790 = sub i32 %v1_12790, %v4_12774
  %v0_12794 = load i32, i32* @fp, align 4
  store i32 %v0_12794, i32* %r0.global-to-local, align 4
  store i32 %v2_1279c, i32* %r2.global-to-local, align 4
  %v4_127a4 = mul i32 %v2_12790, 4
  %v5_127a4 = add i32 %v4_127a4, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 10528)
  %v6_127a4 = inttoptr i32 %v5_127a4 to i32*
  %v7_127a4 = load i32, i32* %v6_127a4, align 4
  store i32 75696, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_127a4)
  %v0_127b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_127b0 = icmp slt i32 %v0_127b0, 0
  br i1 %v1_127b0, label %dec_label_pc_12940, label %dec_label_pc_127b8

dec_label_pc_127b8:                               ; preds = %dec_label_pc_12790
  %v2_127bc = add i32 %v0_127b0, %v1_12818
  br label %dec_label_pc_1292c

dec_label_pc_127c8:                               ; preds = %dec_label_pc_12780
  %v1_127c8 = add i32 %v1_12790, 1
  %v3_127cc = icmp ult i32 %v1_127c8, %v1_1277c
  br i1 %v3_127cc, label %dec_label_pc_12780, label %dec_label_pc_12940

dec_label_pc_127d8:                               ; preds = %dec_label_pc_1264c
  %v0_127d8 = load i32, i32* @sl, align 4
  store i32 %v0_127d8, i32* @r8, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v0_127d8, i32* @r4, align 4
  br label %dec_label_pc_127e8

dec_label_pc_127e8thread-pre-split:               ; preds = %.thread85, %dec_label_pc_125dc, %dec_label_pc_12694, %dec_label_pc_12720
  %v1_127ec.pre = phi i32 [ %v1_127ec.pre205, %dec_label_pc_125dc ], [ %v1_127ec.pre.pre, %dec_label_pc_12694 ], [ 1, %dec_label_pc_12720 ], [ %v2_1255c, %.thread85 ]
  %v0_127ec.pre = phi i32 [ 0, %dec_label_pc_125dc ], [ %v0_127ec.pre.pre, %dec_label_pc_12694 ], [ 0, %dec_label_pc_12720 ], [ %v2_125d0, %.thread85 ]
  %stack_var_-336.3.ph = phi i32 [ %v0_12550, %dec_label_pc_125dc ], [ %v0_12480, %dec_label_pc_12694 ], [ %v0_12480, %dec_label_pc_12720 ], [ %v0_12550, %.thread85 ]
  %v0_127e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_127e8

dec_label_pc_127e8:                               ; preds = %dec_label_pc_127e8thread-pre-split, %dec_label_pc_12710, %dec_label_pc_126c8, %dec_label_pc_127d8
  %v1_127ec = phi i32 [ %v1_127ec.pre, %dec_label_pc_127e8thread-pre-split ], [ %storemerge97, %dec_label_pc_12710 ], [ %v3_126d4, %dec_label_pc_126c8 ], [ %v6_12660, %dec_label_pc_127d8 ]
  %v0_127ec = phi i32 [ %v0_127ec.pre, %dec_label_pc_127e8thread-pre-split ], [ 0, %dec_label_pc_12710 ], [ 0, %dec_label_pc_126c8 ], [ %v0_127d8, %dec_label_pc_127d8 ]
  %v0_127f4 = phi i32 [ %v0_127e8.pr, %dec_label_pc_127e8thread-pre-split ], [ 11, %dec_label_pc_12710 ], [ 11, %dec_label_pc_126c8 ], [ 11, %dec_label_pc_127d8 ]
  %v0_12834 = phi i32 [ %stack_var_-336.3.ph, %dec_label_pc_127e8thread-pre-split ], [ %v0_12480, %dec_label_pc_12710 ], [ %v0_12480, %dec_label_pc_126c8 ], [ %v0_12480, %dec_label_pc_127d8 ]
  %v7_127e8 = icmp eq i32 %v0_127f4, 11
  %v2_127ec = add i32 %v1_127ec, %v0_127ec
  br i1 %v7_127e8, label %dec_label_pc_12804, label %bb173

bb173:                                            ; preds = %dec_label_pc_127e8
  %v7_127fc = icmp sgt i32 %v0_127f4, 5
  %. = select i1 %v7_127fc, i32 2, i32 1
  %v2_12800 = add i32 %v2_127ec, %.
  br label %dec_label_pc_12804

dec_label_pc_12804:                               ; preds = %dec_label_pc_127e8, %bb173
  %v0_12818 = phi i32 [ %v2_127ec, %dec_label_pc_127e8 ], [ %v2_12800, %bb173 ]
  store i32 %tmp98, i32* %r2.global-to-local, align 4
  %v3_12808 = icmp uge i32 %tmp98, %v0_12818
  %v9_12808 = icmp eq i32 %tmp98, %v0_12818
  %v2_1280c = xor i1 %v9_12808, true
  %v3_1280c = and i1 %v3_12808, %v2_1280c
  br i1 %v3_1280c, label %bb174, label %bb175

bb174:                                            ; preds = %dec_label_pc_12804
  %v2_12808 = sub i32 %tmp98, %v0_12818
  store i32 %v2_12808, i32* @sl, align 4
  br label %bb175

bb175:                                            ; preds = %dec_label_pc_12804, %bb174
  store i32 %v1_12818, i32* %r2.global-to-local, align 4
  %v2_12814 = xor i1 %v3_12808, true
  %v3_12814 = or i1 %v9_12808, %v2_12814
  br i1 %v3_12814, label %bb176, label %._crit_edge

._crit_edge:                                      ; preds = %bb175
  %v1_1281c.pre = load i32, i32* @sl, align 4
  br label %bb177

bb176:                                            ; preds = %bb175
  store i32 0, i32* @sl, align 4
  br label %bb177

bb177:                                            ; preds = %._crit_edge, %bb176
  %v2_1282c = phi i32 [ %v1_1281c.pre, %._crit_edge ], [ 0, %bb176 ]
  %v2_12818 = add i32 %v0_12818, %v1_12818
  %v2_1281c = add i32 %v2_12818, %v2_1282c
  %v0_12828 = load i32, i32* @sb, align 4
  %v7_12828 = icmp eq i32 %v0_12828, 48
  br i1 %v7_12828, label %bb178, label %.thread30

bb178:                                            ; preds = %bb177
  %v3_1282c = add i32 %v2_1282c, %v0_127ec
  store i32 %v3_1282c, i32* @r8, align 4
  store i32 0, i32* @sl, align 4
  br label %.thread30

.thread30:                                        ; preds = %bb177, %bb178
  %v0_12844 = phi i32 [ %v2_1282c, %bb177 ], [ 0, %bb178 ]
  %v1_12834 = and i32 %v0_12834, 8
  store i32 %v1_12834, i32* @r7, align 4
  %v2_12834 = icmp eq i32 %v1_12834, 0
  br i1 %v2_12834, label %dec_label_pc_1283c, label %dec_label_pc_12858

dec_label_pc_1283c:                               ; preds = %.thread30
  %v0_1283c = load i32, i32* @fp, align 4
  store i32 %v0_1283c, i32* %r0.global-to-local, align 4
  store i32 %v0_12844, i32* %r2.global-to-local, align 4
  %v4_12848 = call i32 @_charpad(i32 %v0_1283c, i8 32, i32 %v0_12844)
  store i32 %v4_12848, i32* %r0.global-to-local, align 4
  %v1_1284c = load i32, i32* @sl, align 4
  %v9_1284c = icmp eq i32 %v4_12848, %v1_1284c
  br i1 %v9_1284c, label %dec_label_pc_12854, label %dec_label_pc_12940

dec_label_pc_12854:                               ; preds = %dec_label_pc_1283c
  %v0_12854 = load i32, i32* @r7, align 4
  store i32 %v0_12854, i32* @sl, align 4
  %v0_12860.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12858

dec_label_pc_12858:                               ; preds = %.thread30, %dec_label_pc_12854
  %v0_12860 = phi i32 [ %v0_127f4, %.thread30 ], [ %v0_12860.pre, %dec_label_pc_12854 ]
  %v0_1285c = load i32, i32* @fp, align 4
  %v2_12860 = add i32 %v0_12860, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37148)
  store i32 %v2_12860, i32* %r0.global-to-local, align 4
  %v2_12864 = inttoptr i32 %v2_12860 to i8*
  %v3_12864 = call i32 @__GI_fputs_unlocked(i8* %v2_12864, i32 %v0_1285c)
  %v0_12868 = load i32, i32* @fp, align 4
  store i32 %v0_12868, i32* %r0.global-to-local, align 4
  %v0_12870 = load i32, i32* @r8, align 4
  store i32 %v0_12870, i32* %r2.global-to-local, align 4
  %v4_12874 = call i32 @_charpad(i32 %v0_12868, i8 48, i32 %v0_12870)
  store i32 %v4_12874, i32* %r0.global-to-local, align 4
  %v1_12878 = load i32, i32* @r8, align 4
  %v9_12878 = icmp eq i32 %v4_12874, %v1_12878
  br i1 %v9_12878, label %dec_label_pc_12880, label %dec_label_pc_12940

dec_label_pc_12880:                               ; preds = %dec_label_pc_12858
  %v3_12880 = load i32, i32* %stack_var_-44, align 4
  %v2_12884 = icmp eq i32 %v3_12880, 0
  br i1 %v2_12884, label %dec_label_pc_1288c, label %dec_label_pc_128b0

dec_label_pc_1288c:                               ; preds = %dec_label_pc_12880
  %v0_1288c = load i32, i32* @r5, align 4
  %v2_1288c = icmp eq i32 %v0_1288c, 0
  br i1 %v2_1288c, label %dec_label_pc_12914, label %dec_label_pc_12894

dec_label_pc_12894:                               ; preds = %dec_label_pc_1288c
  %v0_12894 = load i32, i32* @r4, align 4
  store i32 %v0_12894, i32* %r0.global-to-local, align 4
  %v0_1289c = load i32, i32* @fp, align 4
  store i32 %v0_1289c, i32* %r2.global-to-local, align 4
  %v3_128a0 = inttoptr i32 %v0_1289c to i16*
  %v4_128a0 = call i32 @__stdio_fwrite(i32 %v0_12894, i32 %v0_1288c, i16* %v3_128a0)
  store i32 %v4_128a0, i32* %r0.global-to-local, align 4
  %v1_128a4 = load i32, i32* @r5, align 4
  %v9_128a4 = icmp eq i32 %v4_128a0, %v1_128a4
  br i1 %v9_128a4, label %dec_label_pc_12914, label %dec_label_pc_12940

dec_label_pc_128b0:                               ; preds = %dec_label_pc_12880
  store i32 %v2_12754, i32* @r6, align 4
  store i32 %v2_12650, i32* @r8, align 4
  store i32 %v2_1265c, i32* @r7, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v0_12900.pr = load i32, i32* @r5, align 4
  %v2_1290041 = icmp eq i32 %v0_12900.pr, 0
  store i32 %v2_12650, i32* @r1, align 4
  store i32 %v2_12754, i32* @r0, align 4
  br i1 %v2_1290041, label %dec_label_pc_12914, label %dec_label_pc_128c8

dec_label_pc_128c8:                               ; preds = %dec_label_pc_128b0, %dec_label_pc_128fc
  %v1_128cc = phi i32 [ %v2_128fc, %dec_label_pc_128fc ], [ %v0_12900.pr, %dec_label_pc_128b0 ]
  %v2_128c8 = icmp ult i32 %v1_128cc, 128
  %.v1_128cc = select i1 %v2_128c8, i32 %v1_128cc, i32 128
  store i32 %.v1_128cc, i32* %r2.global-to-local, align 4
  %v6_128d4 = call i32 @__GI_wcsrtombs(i32 %v2_12754, i32 %v2_12650, i32 %.v1_128cc, i32 %v2_1265c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_128d4, i32* @r4, align 4
  %v2_128d8 = icmp eq i32 %v6_128d4, 0
  store i32 %v6_128d4, i32* %r0.global-to-local, align 4
  br i1 %v2_128d8, label %dec_label_pc_128fc, label %dec_label_pc_128e4

dec_label_pc_128e4:                               ; preds = %dec_label_pc_128c8
  store i32 %v2_12754, i32* %r0.global-to-local, align 4
  %v0_128ec = load i32, i32* @fp, align 4
  store i32 %v0_128ec, i32* %r2.global-to-local, align 4
  %v3_128f0 = inttoptr i32 %v0_128ec to i16*
  %v4_128f0 = call i32 @__stdio_fwrite(i32 %v2_12754, i32 %v6_128d4, i16* %v3_128f0)
  store i32 %v4_128f0, i32* %r0.global-to-local, align 4
  %v1_128f4 = load i32, i32* @r4, align 4
  %v9_128f4 = icmp eq i32 %v4_128f0, %v1_128f4
  br i1 %v9_128f4, label %dec_label_pc_128fc, label %dec_label_pc_12940

dec_label_pc_128fc:                               ; preds = %dec_label_pc_128e4, %dec_label_pc_128c8
  %v0_128fc = phi i32 [ %v4_128f0, %dec_label_pc_128e4 ], [ 0, %dec_label_pc_128c8 ]
  %v1_128fc = load i32, i32* @r5, align 4
  %v2_128fc = sub i32 %v1_128fc, %v0_128fc
  store i32 %v2_128fc, i32* @r5, align 4
  %v2_12900 = icmp eq i32 %v2_128fc, 0
  store i32 %v2_12650, i32* @r1, align 4
  store i32 %v2_12754, i32* @r0, align 4
  br i1 %v2_12900, label %dec_label_pc_12914, label %dec_label_pc_128c8

dec_label_pc_12914:                               ; preds = %dec_label_pc_128fc, %dec_label_pc_128b0, %dec_label_pc_12894, %dec_label_pc_1288c
  %v0_12914 = load i32, i32* @fp, align 4
  store i32 %v0_12914, i32* %r0.global-to-local, align 4
  %v0_1291c = load i32, i32* @sl, align 4
  store i32 %v0_1291c, i32* %r2.global-to-local, align 4
  %v4_12920 = call i32 @_charpad(i32 %v0_12914, i8 32, i32 %v0_1291c)
  store i32 %v4_12920, i32* %r0.global-to-local, align 4
  %v1_12924 = load i32, i32* @sl, align 4
  %v9_12924 = icmp eq i32 %v4_12920, %v1_12924
  br i1 %v9_12924, label %dec_label_pc_1292c, label %dec_label_pc_12940

dec_label_pc_1292c:                               ; preds = %dec_label_pc_12914, %dec_label_pc_127b8, %dec_label_pc_12614, %dec_label_pc_12424
  %stack_var_-336.4 = phi i32 [ %v0_12480, %dec_label_pc_12424 ], [ %v0_12834, %dec_label_pc_12914 ], [ %v0_12480, %dec_label_pc_127b8 ], [ %v0_12480, %dec_label_pc_12614 ]
  %stack_var_-356.3 = phi i32 [ %v1_12818, %dec_label_pc_12424 ], [ %v2_1281c, %dec_label_pc_12914 ], [ %v2_127bc, %dec_label_pc_127b8 ], [ %v2_12618, %dec_label_pc_12614 ]
  %v3_1292c = load i32, i32* %stack_var_-352, align 4
  store i32 %v3_1292c, i32* @r4, align 4
  store i32 %v3_1292c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1234c.outer

dec_label_pc_12938:                               ; preds = %dec_label_pc_123a8
  %v1_12938 = add i32 %v0_123b0, 2
  store i32 %v1_12938, i32* @r4, align 4
  br label %dec_label_pc_1234c.outer36

dec_label_pc_12940:                               ; preds = %dec_label_pc_127c8, %dec_label_pc_1264c, %dec_label_pc_12914, %dec_label_pc_12894, %dec_label_pc_12858, %dec_label_pc_1283c, %dec_label_pc_12790, %dec_label_pc_12674, %dec_label_pc_125ec, %bb142, %dec_label_pc_128e4
  br label %dec_label_pc_12948

dec_label_pc_12948:                               ; preds = %dec_label_pc_1239c, %bb, %dec_label_pc_122e0, %dec_label_pc_12940
  %stack_var_-356.4 = phi i32 [ -1, %bb ], [ -1, %dec_label_pc_122e0 ], [ -1, %dec_label_pc_12940 ], [ %v1_12818, %dec_label_pc_1239c ]
  store i32 %stack_var_-356.4, i32* %r0.global-to-local, align 4
  store i32 %v6_12290, i32* @r5, align 4
  store i32 %v12_12290, i32* %r7.global-to-local, align 4
  store i32 %v18_12290, i32* @sb, align 4
  store i32 %v21_12290, i32* @sl, align 4
  store i32 %v24_12290, i32* @fp, align 4
  ret i32 %stack_var_-356.4

; uselistorder directives
  uselistorder i32 %stack_var_-356.4, { 1, 0 }
  uselistorder i32 %v1_12938, { 1, 0 }
  uselistorder i32 %v3_1292c, { 1, 2, 0 }
  uselistorder i32 %v2_128fc, { 1, 2, 0 }
  uselistorder i32 %v0_12844, { 1, 0 }
  uselistorder i32 %v2_1282c, { 2, 0, 1 }
  uselistorder i1 %v9_12808, { 1, 0 }
  uselistorder i32 %v2_127ec, { 1, 0 }
  uselistorder i32 %v0_12834, { 1, 0 }
  uselistorder i32 %v0_127ec, { 1, 0 }
  uselistorder i32 %v1_127c8, { 1, 0 }
  uselistorder i32 %v1_12790, { 1, 0, 2 }
  uselistorder i32 %v3_12760, { 1, 2, 0 }
  uselistorder i32 %v0_126cc, { 1, 0 }
  uselistorder i32 %v2_126bc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_12684, { 1, 2, 0, 3 }
  uselistorder i32 %v3_125fc, { 1, 0 }
  uselistorder i32 %v2_1255c, { 2, 3, 0, 4, 5, 1, 6 }
  uselistorder i32 %v0_12578, { 1, 2, 3, 0 }
  uselistorder i32 %v2_124f8, { 2, 1, 0, 3, 4, 7, 5, 6 }
  uselistorder i32 %v4_12460, { 0, 2, 1, 3 }
  uselistorder i32 %v1_12404.pre, { 1, 0, 2 }
  uselistorder i32 %v1_123fc, { 1, 0 }
  uselistorder i32 %v1_123a8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_12818, { 0, 8, 1, 7, 2, 3, 6, 5, 4, 9 }
  uselistorder i32 %v2_12368, { 1, 0 }
  uselistorder i32 %v1_12360.lcssa, { 1, 0 }
  uselistorder i8 %v2_1234c, { 1, 0 }
  uselistorder i32 %v2_12360, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-356.1.ph37, { 1, 0 }
  uselistorder i32 %v5_12378, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12480, { 6, 4, 3, 15, 14, 5, 0, 1, 13, 12, 11, 7, 10, 8, 2, 9 }
  uselistorder i1 %v7_12570, { 1, 0 }
  uselistorder i1 %v7_124c0, { 1, 2, 0 }
  uselistorder i1 %v7_126ac, { 1, 0 }
  uselistorder i1 %v7_12624, { 1, 0 }
  uselistorder i1 %v7_12500, { 1, 0 }
  uselistorder i32 %v2_1265c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_12650, { 1, 2, 3, 0, 6, 4, 5, 7 }
  uselistorder i32 %v2_12754, { 1, 2, 3, 4, 5, 0, 11, 10, 9, 7, 8, 6 }
  uselistorder i32 %v2_12400, { 1, 3, 2, 0 }
  uselistorder i32 %v4_123dc, { 1, 0 }
  uselistorder i32 %v2_12298, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32* %stack_var_-352, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32 %tmp105, { 1, 2, 0 }
  uselistorder i32 %tmp104, { 12, 8, 9, 0, 10, 11, 3, 4, 5, 6, 7, 1, 2, 15, 14, 13 }
  uselistorder i32 %tmp98, { 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 20, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 21, 22, 23, 24, 30, 31, 25, 26, 27, 28, 29, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 9, 8, 10, 12, 11, 17, 13, 14, 15, 16, 18, 19, 22, 20, 21, 24, 23, 26, 25, 28, 27, 30, 29, 33, 31, 32, 36, 37, 34, 35, 38, 39, 1, 48, 41, 40, 43, 42, 45, 44, 47, 46, 0 }
  uselistorder i32 (i32, i8, i32)* @_charpad, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -52740), { 1, 0 }
  uselistorder i8 10, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 19, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12948, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12940, { 2, 10, 3, 4, 5, 0, 6, 7, 1, 8, 9 }
  uselistorder label %dec_label_pc_128c8, { 1, 0 }
  uselistorder label %dec_label_pc_12858, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %bb177, { 1, 0 }
  uselistorder label %bb175, { 1, 0 }
  uselistorder label %dec_label_pc_12804, { 1, 0 }
  uselistorder label %dec_label_pc_127e8, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_127e8thread-pre-split, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_12710, { 1, 0 }
  uselistorder label %dec_label_pc_126c8, { 1, 0 }
  uselistorder label %dec_label_pc_125dc, { 0, 2, 1 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 4, 1, 2, 0, 3 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %bb162, { 1, 0 }
  uselistorder label %bb160, { 4, 3, 1, 0, 2 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %dec_label_pc_124b0, { 1, 0 }
  uselistorder label %dec_label_pc_124ac, { 2, 1, 0 }
  uselistorder label %bb151, { 2, 1, 0 }
  uselistorder label %dec_label_pc_123f8, { 1, 0 }
  uselistorder label %bb146, { 1, 0 }
  uselistorder label %dec_label_pc_1239c, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %dec_label_pc_12368, { 1, 0, 2 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %dec_label_pc_1234c.outer36, { 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_12978 = load i32, i32* @r4, align 4
  %v6_12978 = load i32, i32* @r5, align 4
  store i32 152, i32* @r2, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_12984 = load i32, i32* @r1, align 4
  store i32 %v0_12984, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_12990 = bitcast i32* %arg1 to i8*
  %v3_12990 = call i32 @__GI_memset(i8* %v2_12990, i32 0)
  store i32 %v3_12990, i32* %r0.global-to-local, align 4
  %v0_12994 = load i32, i32* @r4, align 4
  %v1_12994 = add i32 %v0_12994, 24
  %v2_12994 = inttoptr i32 %v1_12994 to i32*
  %v3_12994 = load i32, i32* %v2_12994, align 4
  store i32 %v3_12994, i32* %r3.global-to-local, align 4
  %v0_12998 = load i32, i32* @r5, align 4
  %v2_12998 = inttoptr i32 %v0_12994 to i32*
  store i32 %v0_12998, i32* %v2_12998, align 4
  %v0_1299c = load i32, i32* %r3.global-to-local, align 4
  %v1_1299c = add i32 %v0_1299c, -1
  %v1_129a0 = load i32, i32* @r4, align 4
  %v2_129a0 = add i32 %v1_129a0, 24
  %v3_129a0 = inttoptr i32 %v2_129a0 to i32*
  store i32 %v1_1299c, i32* %v3_129a0, align 4
  %v0_129a4 = load i32, i32* @r4, align 4
  %v1_129a4 = add i32 %v0_129a4, 40
  store i32 %v1_129a4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_129b421 = inttoptr i32 %v1_129a4 to i32*
  store i32 8, i32* %v2_129b421, align 4
  %v3_129b422 = load i32, i32* %r2.global-to-local, align 4
  %v4_129b423 = add i32 %v3_129b422, 4
  store i32 %v4_129b423, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_129b0.dec_label_pc_129b0_crit_edge

dec_label_pc_129b0.dec_label_pc_129b0_crit_edge:  ; preds = %entry, %dec_label_pc_129b0.dec_label_pc_129b0_crit_edge
  %v4_129b424 = phi i32 [ %v4_129b423, %entry ], [ %v4_129b4, %dec_label_pc_129b0.dec_label_pc_129b0_crit_edge ]
  %v0_129b0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_129b4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_129b0 = add i32 %v0_129b0.pre, -1
  store i32 %v1_129b0, i32* %r3.global-to-local, align 4
  %v7_129b0 = icmp eq i32 %v0_129b0.pre, 1
  %v2_129b4 = inttoptr i32 %v4_129b424 to i32*
  store i32 %v0_129b4.pre, i32* %v2_129b4, align 4
  %v3_129b4 = load i32, i32* %r2.global-to-local, align 4
  %v4_129b4 = add i32 %v3_129b4, 4
  store i32 %v4_129b4, i32* %r2.global-to-local, align 4
  br i1 %v7_129b0, label %dec_label_pc_129bc, label %dec_label_pc_129b0.dec_label_pc_129b0_crit_edge

dec_label_pc_129bc:                               ; preds = %dec_label_pc_129b0.dec_label_pc_129b0_crit_edge
  %v0_129bc = load i32, i32* @r5, align 4
  store i32 %v0_129bc, i32* %r2.global-to-local, align 4
  %v1_129fc2 = inttoptr i32 %v0_129bc to i8*
  %v2_129fc3 = load i8, i8* %v1_129fc2, align 1
  %v3_129fc4 = zext i8 %v2_129fc3 to i32
  store i32 %v3_129fc4, i32* %r0.global-to-local, align 4
  %v2_12a005 = icmp eq i8 %v2_129fc3, 0
  br i1 %v2_12a005, label %dec_label_pc_12a08, label %dec_label_pc_129c4

dec_label_pc_129c4:                               ; preds = %dec_label_pc_129bc, %dec_label_pc_129fc.backedge
  %v0_129cc = phi i32 [ %storemerge, %dec_label_pc_129fc.backedge ], [ %v0_129bc, %dec_label_pc_129bc ]
  %v0_129c4 = phi i32 [ %v3_129fc, %dec_label_pc_129fc.backedge ], [ %v3_129fc4, %dec_label_pc_129bc ]
  %v7_129c4 = icmp eq i32 %v0_129c4, 37
  br i1 %v7_129c4, label %dec_label_pc_129cc, label %dec_label_pc_129f8

dec_label_pc_129cc:                               ; preds = %dec_label_pc_129c4
  %v1_129cc = add i32 %v0_129cc, 1
  %v2_129cc = inttoptr i32 %v1_129cc to i8*
  %v3_129cc = load i8, i8* %v2_129cc, align 1
  %v4_129cc = zext i8 %v3_129cc to i32
  store i32 %v4_129cc, i32* %r3.global-to-local, align 4
  store i32 %v1_129cc, i32* %r2.global-to-local, align 4
  %v7_129d0 = icmp eq i8 %v3_129cc, 37
  br i1 %v7_129d0, label %dec_label_pc_129f8, label %dec_label_pc_129d8

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129cc
  %v1_129d8 = load i32, i32* @r4, align 4
  %v2_129d8 = inttoptr i32 %v1_129d8 to i32*
  store i32 %v1_129cc, i32* %v2_129d8, align 4
  %v0_129dc = load i32, i32* @r4, align 4
  store i32 %v0_129dc, i32* %r0.global-to-local, align 4
  %v1_129e0 = inttoptr i32 %v0_129dc to i8*
  %v2_129e0 = call i32 @_ppfs_parsespec(i8* %v1_129e0)
  store i32 %v2_129e0, i32* %r0.global-to-local, align 4
  %v1_129e4 = icmp slt i32 %v2_129e0, 0
  br i1 %v1_129e4, label %dec_label_pc_12a0c.loopexit, label %dec_label_pc_129f0

dec_label_pc_129f0:                               ; preds = %dec_label_pc_129d8
  %v0_129f0 = load i32, i32* @r4, align 4
  %v1_129f0 = inttoptr i32 %v0_129f0 to i32*
  %v2_129f0 = load i32, i32* %v1_129f0, align 4
  br label %dec_label_pc_129fc.backedge

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129c4, %dec_label_pc_129cc
  %v0_129f8 = phi i32 [ %v0_129cc, %dec_label_pc_129c4 ], [ %v1_129cc, %dec_label_pc_129cc ]
  %v1_129f8 = add i32 %v0_129f8, 1
  br label %dec_label_pc_129fc.backedge

dec_label_pc_129fc.backedge:                      ; preds = %dec_label_pc_129f8, %dec_label_pc_129f0
  %storemerge = phi i32 [ %v1_129f8, %dec_label_pc_129f8 ], [ %v2_129f0, %dec_label_pc_129f0 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_129fc = inttoptr i32 %storemerge to i8*
  %v2_129fc = load i8, i8* %v1_129fc, align 1
  %v3_129fc = zext i8 %v2_129fc to i32
  store i32 %v3_129fc, i32* %r0.global-to-local, align 4
  %v2_12a00 = icmp eq i8 %v2_129fc, 0
  br i1 %v2_12a00, label %dec_label_pc_129fc.dec_label_pc_12a08_crit_edge, label %dec_label_pc_129c4

dec_label_pc_129fc.dec_label_pc_12a08_crit_edge:  ; preds = %dec_label_pc_129fc.backedge
  %v0_12a08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12a08

dec_label_pc_12a08:                               ; preds = %dec_label_pc_129fc.dec_label_pc_12a08_crit_edge, %dec_label_pc_129bc
  %v0_12a08 = phi i32 [ %v0_12a08.pre, %dec_label_pc_129fc.dec_label_pc_12a08_crit_edge ], [ %v0_129bc, %dec_label_pc_129bc ]
  %v1_12a08 = load i32, i32* @r4, align 4
  %v2_12a08 = inttoptr i32 %v1_12a08 to i32*
  store i32 %v0_12a08, i32* %v2_12a08, align 4
  %v1_12a14.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a0c

dec_label_pc_12a0c.loopexit:                      ; preds = %dec_label_pc_129d8
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a0c

dec_label_pc_12a0c:                               ; preds = %dec_label_pc_12a0c.loopexit, %dec_label_pc_12a08
  %v1_12a14 = phi i32 [ -1, %dec_label_pc_12a0c.loopexit ], [ %v1_12a14.pre, %dec_label_pc_12a08 ]
  store i32 %v3_12978, i32* @r4, align 4
  store i32 %v6_12978, i32* @r5, align 4
  ret i32 %v1_12a14

; uselistorder directives
  uselistorder i32 %v3_129fc, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_129bc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_129b4, { 1, 0 }
  uselistorder i32 %v0_129b0.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 0, 5, 1, 6, 7, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 1, 6, 3, 4, 2, 7, 5, 0 }
  uselistorder label %dec_label_pc_129f8, { 1, 0 }
  uselistorder label %dec_label_pc_129c4, { 1, 0 }
  uselistorder label %dec_label_pc_129b0.dec_label_pc_129b0_crit_edge, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12a18 = load i32, i32* @r4, align 4
  store i32 %v3_12a18, i32* %stack_var_-12, align 4
  %v0_12a1c = load i32, i32* @r0, align 4
  %v1_12a1c = add i32 %v0_12a1c, 24
  %v2_12a1c = inttoptr i32 %v1_12a1c to i32*
  %v3_12a1c = load i32, i32* %v2_12a1c, align 4
  store i32 %v3_12a1c, i32* %r5.global-to-local, align 4
  store i32 %v0_12a1c, i32* @r4, align 4
  %v2_12a2c = add i32 %v0_12a1c, 76
  %v3_12a2c = inttoptr i32 %v2_12a2c to i32*
  store i32 %arg2, i32* %v3_12a2c, align 4
  %tmp5 = icmp slt i32 %v3_12a1c, 1
  br i1 %tmp5, label %dec_label_pc_12a50, label %dec_label_pc_12a34

dec_label_pc_12a34:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12a38 = load i32, i32* @r0, align 4
  %v2_12a38 = add i32 %v1_12a38, 8
  %v3_12a38 = inttoptr i32 %v2_12a38 to i32*
  store i32 0, i32* %v3_12a38, align 4
  %v0_12a3c = load i32, i32* %r5.global-to-local, align 4
  %v1_12a3c = load i32, i32* @r0, align 4
  %v2_12a3c = add i32 %v1_12a3c, 28
  %v3_12a3c = inttoptr i32 %v2_12a3c to i32*
  store i32 %v0_12a3c, i32* %v3_12a3c, align 4
  %v0_12a40 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a40 = load i32, i32* @r0, align 4
  %v2_12a40 = add i32 %v1_12a40, 24
  %v3_12a40 = inttoptr i32 %v2_12a40 to i32*
  store i32 %v0_12a40, i32* %v3_12a40, align 4
  %v0_12a44 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a44 = load i32, i32* @r0, align 4
  %v2_12a44 = add i32 %v1_12a44, 4
  %v3_12a44 = inttoptr i32 %v2_12a44 to i32*
  store i32 %v0_12a44, i32* %v3_12a44, align 4
  %v0_12a48 = call i32 @_ppfs_setargs()
  store i32 %v0_12a48, i32* @r0, align 4
  %v0_12a4c = load i32, i32* %r5.global-to-local, align 4
  %v1_12a4c = load i32, i32* @r4, align 4
  %v2_12a4c = add i32 %v1_12a4c, 24
  %v3_12a4c = inttoptr i32 %v2_12a4c to i32*
  store i32 %v0_12a4c, i32* %v3_12a4c, align 4
  br label %dec_label_pc_12a50

dec_label_pc_12a50:                               ; preds = %entry, %dec_label_pc_12a34
  %v2_12a54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12a54, i32* @r4, align 4
  %v1_12a58 = load i32, i32* @r0, align 4
  ret i32 %v1_12a58

; uselistorder directives
  uselistorder i32 %v0_12a1c, { 1, 0, 2 }
  uselistorder i32 ()* @_ppfs_setargs, { 1, 0 }
  uselistorder label %dec_label_pc_12a50, { 1, 0 }
}

define i32 @_ppfs_setargs() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_12a5c = load i32, i32* @r0, align 4
  %v1_12a5c = add i32 %v0_12a5c, 24
  %v2_12a5c = inttoptr i32 %v1_12a5c to i32*
  %v3_12a5c = load i32, i32* %v2_12a5c, align 4
  store i32 %v3_12a5c, i32* %r1.global-to-local, align 4
  %v2_12a60 = icmp eq i32 %v3_12a5c, 0
  %v3_12a64 = load i32, i32* @r4, align 4
  store i32 %v3_12a64, i32* %stack_var_-8, align 4
  %v1_12a68 = add i32 %v0_12a5c, 8
  %v2_12a68 = inttoptr i32 %v1_12a68 to i32*
  %v3_12a68 = load i32, i32* %v2_12a68, align 4
  store i32 %v3_12a68, i32* %r3.global-to-local, align 4
  %v6_12a70 = icmp eq i32 %v3_12a68, -2147483648
  br i1 %v2_12a60, label %dec_label_pc_12a70, label %dec_label_pc_12ba8

dec_label_pc_12a70:                               ; preds = %entry
  br i1 %v6_12a70, label %dec_label_pc_12a78, label %dec_label_pc_12a90

dec_label_pc_12a78:                               ; preds = %dec_label_pc_12a70
  %v1_12a78 = add i32 %v0_12a5c, 76
  %v2_12a78 = inttoptr i32 %v1_12a78 to i32*
  %v3_12a78 = load i32, i32* %v2_12a78, align 4
  store i32 %v3_12a78, i32* %r3.global-to-local, align 4
  %v1_12a7c = inttoptr i32 %v3_12a78 to i32*
  %v2_12a7c = load i32, i32* %v1_12a7c, align 4
  store i32 %v2_12a7c, i32* %r2.global-to-local, align 4
  %v1_12a80 = add i32 %v3_12a78, 4
  store i32 %v1_12a80, i32* %r3.global-to-local, align 4
  store i32 %v1_12a80, i32* %v2_12a78, align 4
  %v0_12a88 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a88 = load i32, i32* @r0, align 4
  %v2_12a88 = add i32 %v1_12a88, 8
  %v3_12a88 = inttoptr i32 %v2_12a88 to i32*
  store i32 %v0_12a88, i32* %v3_12a88, align 4
  %v0_12a8c = load i32, i32* %r2.global-to-local, align 4
  %v1_12a8c = load i32, i32* @r0, align 4
  %v2_12a8c = add i32 %v1_12a8c, 80
  %v3_12a8c = inttoptr i32 %v2_12a8c to i32*
  store i32 %v0_12a8c, i32* %v3_12a8c, align 4
  %v0_12a90.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12a90

dec_label_pc_12a90:                               ; preds = %dec_label_pc_12a70, %dec_label_pc_12a78
  %v1_12aac = phi i32 [ %v0_12a5c, %dec_label_pc_12a70 ], [ %v0_12a90.pre, %dec_label_pc_12a78 ]
  %v1_12a90 = add i32 %v1_12aac, 4
  %v2_12a90 = inttoptr i32 %v1_12a90 to i32*
  %v3_12a90 = load i32, i32* %v2_12a90, align 4
  store i32 %v3_12a90, i32* %r3.global-to-local, align 4
  %v6_12a94 = icmp eq i32 %v3_12a90, -2147483648
  %v1_12a98 = add i32 %v1_12aac, 80
  store i32 %v1_12a98, i32* %ip.global-to-local, align 4
  br i1 %v6_12a94, label %dec_label_pc_12aa0, label %dec_label_pc_12ab8

dec_label_pc_12aa0:                               ; preds = %dec_label_pc_12a90
  %v1_12aa0 = add i32 %v1_12aac, 76
  %v2_12aa0 = inttoptr i32 %v1_12aa0 to i32*
  %v3_12aa0 = load i32, i32* %v2_12aa0, align 4
  store i32 %v3_12aa0, i32* %r3.global-to-local, align 4
  %v1_12aa4 = inttoptr i32 %v3_12aa0 to i32*
  %v2_12aa4 = load i32, i32* %v1_12aa4, align 4
  store i32 %v2_12aa4, i32* %r2.global-to-local, align 4
  %v1_12aa8 = add i32 %v3_12aa0, 4
  store i32 %v1_12aa8, i32* %r3.global-to-local, align 4
  store i32 %v1_12aa8, i32* %v2_12aa0, align 4
  %v0_12ab0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ab0 = load i32, i32* @r0, align 4
  %v2_12ab0 = add i32 %v1_12ab0, 4
  %v3_12ab0 = inttoptr i32 %v2_12ab0 to i32*
  store i32 %v0_12ab0, i32* %v3_12ab0, align 4
  %v0_12ab4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ab4 = load i32, i32* @r0, align 4
  %v2_12ab4 = add i32 %v1_12ab4, 80
  %v3_12ab4 = inttoptr i32 %v2_12ab4 to i32*
  store i32 %v0_12ab4, i32* %v3_12ab4, align 4
  %v0_12b9817.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12ab8

dec_label_pc_12ab8:                               ; preds = %dec_label_pc_12a90, %dec_label_pc_12aa0
  %v0_12b9817 = phi i32 [ %v1_12aac, %dec_label_pc_12a90 ], [ %v0_12b9817.pre, %dec_label_pc_12aa0 ]
  store i32 2055, i32* %r4.global-to-local, align 4
  %v0_12abc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12abc, i32* %lr.global-to-local, align 4
  %v1_12b9818 = add i32 %v0_12b9817, 28
  %v2_12b9819 = inttoptr i32 %v1_12b9818 to i32*
  %v3_12b9820 = load i32, i32* %v2_12b9819, align 4
  store i32 %v3_12b9820, i32* %r3.global-to-local, align 4
  %v5_12ba022 = icmp slt i32 %v0_12abc, %v3_12b9820
  br i1 %v5_12ba022, label %dec_label_pc_12ac4, label %dec_label_pc_12ba4.loopexit

dec_label_pc_12ac4:                               ; preds = %dec_label_pc_12ab8, %dec_label_pc_12b98.backedge
  %v0_12b9824 = phi i32 [ %v0_12b98, %dec_label_pc_12b98.backedge ], [ %v0_12b9817, %dec_label_pc_12ab8 ]
  %v0_12ad023 = phi i32 [ %v0_12ad0.be, %dec_label_pc_12b98.backedge ], [ %v0_12abc, %dec_label_pc_12ab8 ]
  %v4_12ac4 = mul i32 %v0_12ad023, 4
  %v5_12ac4 = add i32 %v4_12ac4, %v0_12b9824
  store i32 %v5_12ac4, i32* %r3.global-to-local, align 4
  %v1_12ac8 = add i32 %v5_12ac4, 40
  %v2_12ac8 = inttoptr i32 %v1_12ac8 to i32*
  %v3_12ac8 = load i32, i32* %v2_12ac8, align 4
  store i32 %v3_12ac8, i32* %r3.global-to-local, align 4
  %v7_12acc = icmp eq i32 %v3_12ac8, 8
  %v1_12ad0 = add i32 %v0_12ad023, 1
  store i32 %v1_12ad0, i32* %lr.global-to-local, align 4
  br i1 %v7_12acc, label %dec_label_pc_12b98.backedge, label %dec_label_pc_12ad8

dec_label_pc_12ad8:                               ; preds = %dec_label_pc_12ac4
  %v1_12ad8 = add i32 %v0_12b9824, 76
  %v2_12ad8 = inttoptr i32 %v1_12ad8 to i32*
  %v3_12ad8 = load i32, i32* %v2_12ad8, align 4
  store i32 %v3_12ad8, i32* %r1.global-to-local, align 4
  %v8_12adc = icmp sgt i32 %v3_12ac8, 8
  br i1 %v8_12adc, label %dec_label_pc_12b00, label %dec_label_pc_12ae0

dec_label_pc_12ae0:                               ; preds = %dec_label_pc_12ad8
  %v7_12ae0 = icmp eq i32 %v3_12ac8, 2
  br i1 %v7_12ae0, label %dec_label_pc_12b50, label %dec_label_pc_12ae8

dec_label_pc_12ae8:                               ; preds = %dec_label_pc_12ae0
  %v8_12ae8 = icmp sgt i32 %v3_12ac8, 2
  br i1 %v8_12ae8, label %dec_label_pc_12af8, label %dec_label_pc_12aec

dec_label_pc_12aec:                               ; preds = %dec_label_pc_12ae8
  %v1_12aec = icmp slt i32 %v3_12ac8, 0
  br i1 %v1_12aec, label %dec_label_pc_12b84, label %dec_label_pc_12b50

dec_label_pc_12af8:                               ; preds = %dec_label_pc_12ae8
  %v7_12af8 = icmp eq i32 %v3_12ac8, 7
  br i1 %v7_12af8, label %dec_label_pc_12b64, label %dec_label_pc_12b84

dec_label_pc_12b00:                               ; preds = %dec_label_pc_12ad8
  %v7_12b00 = icmp eq i32 %v3_12ac8, 1024
  br i1 %v7_12b00, label %dec_label_pc_12b50, label %dec_label_pc_12b08

dec_label_pc_12b08:                               ; preds = %dec_label_pc_12b00
  %v8_12b08 = icmp sgt i32 %v3_12ac8, 1024
  br i1 %v8_12b08, label %dec_label_pc_12b20, label %dec_label_pc_12b0c

dec_label_pc_12b0c:                               ; preds = %dec_label_pc_12b08
  switch i32 %v3_12ac8, label %dec_label_pc_12b84 [
    i32 256, label %dec_label_pc_12b50
    i32 512, label %dec_label_pc_12b50
  ]

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12b08
  %v7_12b20 = icmp eq i32 %v3_12ac8, 2048
  br i1 %v7_12b20, label %dec_label_pc_12b34, label %dec_label_pc_12b2c

dec_label_pc_12b2c:                               ; preds = %dec_label_pc_12b20
  %v1_12b28 = load i32, i32* %r4.global-to-local, align 4
  %v9_12b28 = icmp eq i32 %v3_12ac8, %v1_12b28
  br i1 %v9_12b28, label %dec_label_pc_12b64, label %dec_label_pc_12b84

dec_label_pc_12b34:                               ; preds = %dec_label_pc_12b20
  %v1_12b34 = add i32 %v3_12ad8, 7
  %v1_12b38 = and i32 %v1_12b34, -8
  store i32 %v1_12b38, i32* %r3.global-to-local, align 4
  %v1_12b3c = inttoptr i32 %v1_12b38 to i32*
  %v2_12b3c = load i32, i32* %v1_12b3c, align 8
  store i32 %v2_12b3c, i32* %r1.global-to-local, align 4
  %v3_12b3c = or i32 %v1_12b38, 4
  %v4_12b3c = inttoptr i32 %v3_12b3c to i32*
  %v5_12b3c = load i32, i32* %v4_12b3c, align 4
  store i32 %v5_12b3c, i32* %r2.global-to-local, align 4
  %v1_12b40 = add i32 %v1_12b38, 8
  store i32 %v1_12b40, i32* %r3.global-to-local, align 4
  store i32 %v1_12b40, i32* %v2_12ad8, align 4
  %v0_12b48 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b48 = inttoptr i32 %v0_12b48 to i32*
  %v2_12b48 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12b48, i32* %v1_12b48, align 4
  %v3_12b48 = add i32 %v0_12b48, 4
  %v4_12b48 = inttoptr i32 %v3_12b48 to i32*
  %v5_12b48 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_12b48, i32* %v4_12b48, align 4
  br label %dec_label_pc_12b94

dec_label_pc_12b50:                               ; preds = %dec_label_pc_12b0c, %dec_label_pc_12b0c, %dec_label_pc_12aec, %dec_label_pc_12b00, %dec_label_pc_12ae0
  %v1_12b50 = inttoptr i32 %v3_12ad8 to i32*
  %v2_12b50 = load i32, i32* %v1_12b50, align 4
  store i32 %v2_12b50, i32* %r2.global-to-local, align 4
  %v1_12b54 = add i32 %v3_12ad8, 4
  store i32 %v1_12b54, i32* %r3.global-to-local, align 4
  store i32 %v1_12b54, i32* %v2_12ad8, align 4
  %v0_12b5c = load i32, i32* %r2.global-to-local, align 4
  %v1_12b5c = load i32, i32* %ip.global-to-local, align 4
  %v2_12b5c = inttoptr i32 %v1_12b5c to i32*
  store i32 %v0_12b5c, i32* %v2_12b5c, align 4
  br label %dec_label_pc_12b94

dec_label_pc_12b64:                               ; preds = %dec_label_pc_12af8, %dec_label_pc_12b2c
  %v3_12b64 = load i32, i32* %v2_12ad8, align 4
  %v1_12b68 = add i32 %v3_12b64, 7
  %v1_12b6c = and i32 %v1_12b68, -8
  store i32 %v1_12b6c, i32* %r3.global-to-local, align 4
  %v1_12b70 = inttoptr i32 %v1_12b6c to i32*
  %v2_12b70 = load i32, i32* %v1_12b70, align 8
  store i32 %v2_12b70, i32* %r1.global-to-local, align 4
  %v3_12b70 = or i32 %v1_12b6c, 4
  %v4_12b70 = inttoptr i32 %v3_12b70 to i32*
  %v5_12b70 = load i32, i32* %v4_12b70, align 4
  store i32 %v5_12b70, i32* %r2.global-to-local, align 4
  %v1_12b74 = add i32 %v1_12b6c, 8
  store i32 %v1_12b74, i32* %r3.global-to-local, align 4
  store i32 %v1_12b74, i32* %v2_12ad8, align 4
  %v0_12b7c = load i32, i32* %ip.global-to-local, align 4
  %v1_12b7c = inttoptr i32 %v0_12b7c to i32*
  %v2_12b7c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12b7c, i32* %v1_12b7c, align 4
  %v3_12b7c = add i32 %v0_12b7c, 4
  %v4_12b7c = inttoptr i32 %v3_12b7c to i32*
  %v5_12b7c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_12b7c, i32* %v4_12b7c, align 4
  br label %dec_label_pc_12b94

dec_label_pc_12b84:                               ; preds = %dec_label_pc_12b0c, %dec_label_pc_12af8, %dec_label_pc_12aec, %dec_label_pc_12b2c
  %v1_12b84 = add i32 %v3_12ad8, 4
  store i32 %v1_12b84, i32* %r3.global-to-local, align 4
  store i32 %v1_12b84, i32* %v2_12ad8, align 4
  %v0_12b8c = load i32, i32* %r1.global-to-local, align 4
  %v1_12b8c = inttoptr i32 %v0_12b8c to i32*
  %v2_12b8c = load i32, i32* %v1_12b8c, align 4
  store i32 %v2_12b8c, i32* %r3.global-to-local, align 4
  %v1_12b90 = load i32, i32* %ip.global-to-local, align 4
  %v2_12b90 = inttoptr i32 %v1_12b90 to i32*
  store i32 %v2_12b8c, i32* %v2_12b90, align 4
  br label %dec_label_pc_12b94

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12b64, %dec_label_pc_12b50, %dec_label_pc_12b34, %dec_label_pc_12b84
  %v0_12b94 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b94 = add i32 %v0_12b94, 8
  store i32 %v1_12b94, i32* %ip.global-to-local, align 4
  %v0_12b9c.pre.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12b98.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12b98.backedge

dec_label_pc_12b98.backedge:                      ; preds = %dec_label_pc_12b94, %dec_label_pc_12ac4
  %v0_12b98 = phi i32 [ %v0_12b98.pre, %dec_label_pc_12b94 ], [ %v0_12b9824, %dec_label_pc_12ac4 ]
  %v0_12ad0.be = phi i32 [ %v0_12b9c.pre.pre, %dec_label_pc_12b94 ], [ %v1_12ad0, %dec_label_pc_12ac4 ]
  %v1_12b98 = add i32 %v0_12b98, 28
  %v2_12b98 = inttoptr i32 %v1_12b98 to i32*
  %v3_12b98 = load i32, i32* %v2_12b98, align 4
  store i32 %v3_12b98, i32* %r3.global-to-local, align 4
  %v5_12ba0 = icmp slt i32 %v0_12ad0.be, %v3_12b98
  br i1 %v5_12ba0, label %dec_label_pc_12ac4, label %dec_label_pc_12b98.dec_label_pc_12ba4.loopexit_crit_edge

dec_label_pc_12ba8:                               ; preds = %entry
  br i1 %v6_12a70, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12ba8
  %v2_12bac = add i32 %v0_12a5c, 36
  %v3_12bac = inttoptr i32 %v2_12bac to i8*
  %v4_12bac = load i8, i8* %v3_12bac, align 1
  %v5_12bac = zext i8 %v4_12bac to i32
  %v5_12bb0 = mul nuw nsw i32 %v5_12bac, 8
  %v6_12bb0 = add i32 %v5_12bb0, %v0_12a5c
  store i32 %v6_12bb0, i32* %r3.global-to-local, align 4
  %v2_12bb4 = add i32 %v6_12bb0, 72
  %v3_12bb4 = inttoptr i32 %v2_12bb4 to i32*
  %v4_12bb4 = load i32, i32* %v3_12bb4, align 4
  store i32 %v4_12bb4, i32* %r3.global-to-local, align 4
  store i32 %v4_12bb4, i32* %v2_12a68, align 4
  %v0_12bbc.pre = load i32, i32* @r0, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12ba8, %bb
  %v2_12bd0 = phi i32 [ %v0_12bbc.pre, %bb ], [ %v0_12a5c, %dec_label_pc_12ba8 ]
  %v1_12bbc = add i32 %v2_12bd0, 4
  %v2_12bbc = inttoptr i32 %v1_12bbc to i32*
  %v3_12bbc = load i32, i32* %v2_12bbc, align 4
  store i32 %v3_12bbc, i32* %r3.global-to-local, align 4
  %v6_12bc0 = icmp eq i32 %v3_12bbc, -2147483648
  br i1 %v6_12bc0, label %bb16, label %dec_label_pc_12ba4

bb16:                                             ; preds = %.thread1
  %v2_12bc4 = add i32 %v2_12bd0, 37
  %v3_12bc4 = inttoptr i32 %v2_12bc4 to i8*
  %v4_12bc4 = load i8, i8* %v3_12bc4, align 1
  %v5_12bc4 = zext i8 %v4_12bc4 to i32
  %v5_12bc8 = mul nuw nsw i32 %v5_12bc4, 8
  %v6_12bc8 = add i32 %v5_12bc8, %v2_12bd0
  store i32 %v6_12bc8, i32* %r3.global-to-local, align 4
  %v2_12bcc = add i32 %v6_12bc8, 72
  %v3_12bcc = inttoptr i32 %v2_12bcc to i32*
  %v4_12bcc = load i32, i32* %v3_12bcc, align 4
  store i32 %v4_12bcc, i32* %r3.global-to-local, align 4
  store i32 %v4_12bcc, i32* %v2_12bbc, align 4
  %v0_12bd4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12ba4

dec_label_pc_12b98.dec_label_pc_12ba4.loopexit_crit_edge: ; preds = %dec_label_pc_12b98.backedge
  br label %dec_label_pc_12ba4.loopexit

dec_label_pc_12ba4.loopexit:                      ; preds = %dec_label_pc_12b98.dec_label_pc_12ba4.loopexit_crit_edge, %dec_label_pc_12ab8
  %v0_12b98.lcssa = phi i32 [ %v0_12b98, %dec_label_pc_12b98.dec_label_pc_12ba4.loopexit_crit_edge ], [ %v0_12b9817, %dec_label_pc_12ab8 ]
  br label %dec_label_pc_12ba4

dec_label_pc_12ba4:                               ; preds = %dec_label_pc_12ba4.loopexit, %.thread1, %bb16
  %v1_12bf4 = phi i32 [ %v0_12b98.lcssa, %dec_label_pc_12ba4.loopexit ], [ %v2_12bd0, %.thread1 ], [ %v0_12bd4.pre, %bb16 ]
  %v1_12bd4 = add i32 %v1_12bf4, 8
  %v2_12bd4 = inttoptr i32 %v1_12bd4 to i32*
  %v3_12bd4 = load i32, i32* %v2_12bd4, align 4
  store i32 %v3_12bd4, i32* %r1.global-to-local, align 4
  %v1_12bd8 = icmp slt i32 %v3_12bd4, 0
  br i1 %v1_12bd8, label %dec_label_pc_12be0, label %dec_label_pc_12c00

dec_label_pc_12be0:                               ; preds = %dec_label_pc_12ba4
  %v1_12be0 = add i32 %v1_12bf4, 16
  %v2_12be0 = inttoptr i32 %v1_12be0 to i32*
  %v3_12be0 = load i32, i32* %v2_12be0, align 4
  %v1_12be8 = sub i32 0, %v3_12bd4
  store i32 %v1_12be8, i32* %r1.global-to-local, align 4
  %v1_12be4 = and i32 %v3_12be0, -10
  %v1_12bec = or i32 %v1_12be4, 8
  store i32 %v1_12bec, i32* %r3.global-to-local, align 4
  store i32 32, i32* %r2.global-to-local, align 4
  %v2_12bf4 = add i32 %v1_12bf4, 20
  %v3_12bf4 = inttoptr i32 %v2_12bf4 to i32*
  store i32 32, i32* %v3_12bf4, align 4
  %v0_12bf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12bf8 = load i32, i32* @r0, align 4
  %v2_12bf8 = add i32 %v1_12bf8, 8
  %v3_12bf8 = inttoptr i32 %v2_12bf8 to i32*
  store i32 %v0_12bf8, i32* %v3_12bf8, align 4
  %v0_12bfc = load i32, i32* %r3.global-to-local, align 4
  %v1_12bfc = load i32, i32* @r0, align 4
  %v2_12bfc = add i32 %v1_12bfc, 16
  %v3_12bfc = inttoptr i32 %v2_12bfc to i32*
  store i32 %v0_12bfc, i32* %v3_12bfc, align 4
  %v1_12c04.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12c00

dec_label_pc_12c00:                               ; preds = %dec_label_pc_12ba4, %dec_label_pc_12be0
  %v1_12c04 = phi i32 [ %v1_12bf4, %dec_label_pc_12ba4 ], [ %v1_12c04.pre, %dec_label_pc_12be0 ]
  %v2_12c00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12c00, i32* @r4, align 4
  ret i32 %v1_12c04

; uselistorder directives
  uselistorder i32 %v2_12bd0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12ad0.be, { 1, 0 }
  uselistorder i32 %v0_12b98, { 1, 2, 0 }
  uselistorder i32 %v3_12ad8, { 3, 1, 0, 2, 4 }
  uselistorder i32* %v2_12ad8, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 %v3_12ac8, { 1, 2, 0, 8, 5, 3, 4, 7, 6, 9, 10, 11 }
  uselistorder i32 %v0_12ad023, { 1, 0 }
  uselistorder i32 %v0_12b9824, { 0, 2, 1 }
  uselistorder i32 %v0_12b9817, { 2, 0, 1 }
  uselistorder i32 %v0_12a5c, { 1, 0, 4, 2, 3, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 7, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 72, { 4, 5, 10, 6, 7, 8, 9, 0, 1, 11, 2, 3 }
  uselistorder i32 80, { 1, 2, 3, 4, 5, 6, 0, 7 }
  uselistorder label %dec_label_pc_12c00, { 1, 0 }
  uselistorder label %dec_label_pc_12ba4, { 0, 2, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12b94, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12b84, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12b64, { 1, 0 }
  uselistorder label %dec_label_pc_12b50, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_12ac4, { 1, 0 }
  uselistorder label %dec_label_pc_12ab8, { 1, 0 }
  uselistorder label %dec_label_pc_12a90, { 1, 0 }
}

define i32 @_promoted_size() local_unnamed_addr {
entry:
  %v1_12c28.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12c24

dec_label_pc_12c24:                               ; preds = %dec_label_pc_12c30, %entry
  %v0_12c24 = phi i32 [ %v1_12c24, %dec_label_pc_12c30 ], [ add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37042), %entry ]
  %v1_12c24 = add i32 %v0_12c24, -2
  %v2_12c24 = inttoptr i32 %v1_12c24 to i16*
  %v3_12c24 = load i16, i16* %v2_12c24, align 2
  %v4_12c24 = sext i16 %v3_12c24 to i32
  store i32 %v1_12c24, i32* @ip, align 4
  %v9_12c28 = icmp eq i32 %v4_12c24, %v1_12c28.pre
  br i1 %v9_12c28, label %dec_label_pc_12c24.dec_label_pc_12c38_crit_edge, label %dec_label_pc_12c30

dec_label_pc_12c24.dec_label_pc_12c38_crit_edge:  ; preds = %dec_label_pc_12c24
  br label %dec_label_pc_12c38

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c24
  %tmp = icmp ugt i32 %v1_12c24, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37066)
  br i1 %tmp, label %dec_label_pc_12c24, label %dec_label_pc_12c38.loopexit

dec_label_pc_12c38.loopexit:                      ; preds = %dec_label_pc_12c30
  br label %dec_label_pc_12c38

dec_label_pc_12c38:                               ; preds = %dec_label_pc_12c38.loopexit, %dec_label_pc_12c24.dec_label_pc_12c38_crit_edge
  %v2_12c48.pre-phi = sub i32 %v1_12c24, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37066)
  store i32 %v2_12c48.pre-phi, i32* @r2, align 4
  %v4_12c4c = sdiv i32 %v2_12c48.pre-phi, 2
  %v5_12c4c = add i32 %v4_12c4c, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37042)
  %v6_12c4c = inttoptr i32 %v5_12c4c to i8*
  %v7_12c4c = load i8, i8* %v6_12c4c, align 1
  %v9_12c4c = zext i8 %v7_12c4c to i32
  ret i32 %v9_12c4c

; uselistorder directives
  uselistorder i32 %v2_12c48.pre-phi, { 1, 0 }
  uselistorder i32 %v1_12c24, { 1, 0, 3, 4, 2 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -37066), { 1, 0 }
}

define i32 @_ppfs_parsespec(i8* %arg1) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %tmp117 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-111 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i8*, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12c60 = load i32, i32* @r4, align 4
  store i32 %v3_12c60, i32* %stack_var_-36, align 4
  %v6_12c60 = load i32, i32* @r5, align 4
  %v27_12c60 = load i32, i32* @lr, align 4
  %v0_12c64 = load i32, i32* %r0.global-to-local, align 4
  %v1_12c64 = add i32 %v0_12c64, 16
  %v2_12c64 = inttoptr i32 %v1_12c64 to i32*
  %v3_12c64 = load i32, i32* %v2_12c64, align 4
  %v1_12c6c = and i32 %v3_12c64, 128
  store i32 %v1_12c6c, i32* @r4, align 4
  %v2_12c6c = icmp eq i32 %v1_12c6c, 0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 %v0_12c64, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @lr, align 4
  %v1_12c94 = add i32 %v0_12c64, 24
  %v2_12c94 = inttoptr i32 %v1_12c94 to i32*
  %v3_12c94 = load i32, i32* %v2_12c94, align 4
  store i32 %v3_12c94, i32* %fp.global-to-local, align 4
  br i1 %v2_12c6c, label %.dec_label_pc_12ce8_crit_edge, label %dec_label_pc_12ca0

.dec_label_pc_12ce8_crit_edge:                    ; preds = %entry
  %v2_12c98 = inttoptr i32 %v0_12c64 to i32*
  %v3_12c98 = load i32, i32* %v2_12c98, align 4
  store i32 %v3_12c98, i32* %r0.global-to-local, align 4
  %.pre = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_12ce8

dec_label_pc_12ca0:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_12cb0 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12cd4.dec_label_pc_12ca4_crit_edge, %dec_label_pc_12ca0
  %v1_12cb4 = phi i32 [ %v1_12cc4, %dec_label_pc_12cd4.dec_label_pc_12ca4_crit_edge ], [ 0, %dec_label_pc_12ca0 ]
  %v0_12ca4 = phi i32 [ %v0_12ca4.pre, %dec_label_pc_12cd4.dec_label_pc_12ca4_crit_edge ], [ %v0_12c64, %dec_label_pc_12ca0 ]
  %v1_12ca4 = inttoptr i32 %v0_12ca4 to i32*
  %v2_12ca4 = load i32, i32* %v1_12ca4, align 4
  %v4_12ca8 = mul i32 %v1_12cb4, 4
  %v5_12ca8 = add i32 %v2_12ca4, %v4_12ca8
  store i32 %v5_12ca8, i32* %r3.global-to-local, align 4
  %v1_12cac = add i32 %v5_12ca8, -4
  %v2_12cac = inttoptr i32 %v1_12cac to i8*
  %v3_12cac = load i8, i8* %v2_12cac, align 1
  %v4_12cac = zext i8 %v3_12cac to i32
  store i32 %v4_12cac, i32* %r1.global-to-local, align 4
  store i32 %v2_12cb0, i32* @ip, align 4
  %v2_12cb4 = add i32 %v1_12cb4, %v2_12cb0
  store i32 %v2_12cb4, i32* %r2.global-to-local, align 4
  %v3_12cb8 = add i32 %v2_12cb4, -72
  %v4_12cb8 = inttoptr i32 %v3_12cb8 to i8*
  store i8 %v3_12cac, i8* %v4_12cb8, align 1
  %v0_12cbc = load i32, i32* %r3.global-to-local, align 4
  %v1_12cbc = add i32 %v0_12cbc, -4
  %v2_12cbc = inttoptr i32 %v1_12cbc to i32*
  %v3_12cbc = load i32, i32* %v2_12cbc, align 4
  store i32 %v3_12cbc, i32* %r3.global-to-local, align 4
  %v0_12cc0 = load i32, i32* %r1.global-to-local, align 4
  %v9_12cc0 = icmp eq i32 %v0_12cc0, %v3_12cbc
  %v0_12cc4 = load i32, i32* %r0.global-to-local, align 4
  %v1_12cc4 = add i32 %v0_12cc4, 1
  store i32 %v1_12cc4, i32* %r0.global-to-local, align 4
  br i1 %v9_12cc0, label %dec_label_pc_12ccc, label %dec_label_pc_13190

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12ca4
  %v2_12ccc = icmp eq i32 %v3_12cbc, 0
  br i1 %v2_12ccc, label %dec_label_pc_12cdc, label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12ccc
  %tmp182 = icmp ult i32 %v1_12cc4, 32
  br i1 %tmp182, label %dec_label_pc_12cd4.dec_label_pc_12ca4_crit_edge, label %dec_label_pc_12cdc

dec_label_pc_12cd4.dec_label_pc_12ca4_crit_edge:  ; preds = %dec_label_pc_12cd4
  %v0_12ca4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12ca4

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12cd4, %dec_label_pc_12ccc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_12ce4 = ptrtoint i32* %stack_var_-111 to i32
  store i32 %v2_12ce4, i32* %r0.global-to-local, align 4
  %v0_12cf4.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_12ce8

dec_label_pc_12ce8:                               ; preds = %.dec_label_pc_12ce8_crit_edge, %dec_label_pc_12cdc
  %v3_12d1c.pre-phi = phi i32 [ %.pre, %.dec_label_pc_12ce8_crit_edge ], [ %v2_12cb0, %dec_label_pc_12cdc ]
  %v0_12d1464 = phi i32 [ %v3_12c98, %.dec_label_pc_12ce8_crit_edge ], [ %v2_12ce4, %dec_label_pc_12cdc ]
  %v0_12cf4 = phi i32 [ ptrtoint (i32* @global_var_1f010.70 to i32), %.dec_label_pc_12ce8_crit_edge ], [ %v0_12cf4.pre, %dec_label_pc_12cdc ]
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 140, i32* %r2.global-to-local, align 4
  %v2_12cf4 = add i32 %v0_12cf4, -37004
  store i32 %v2_12cf4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 -4, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v4_12d08 = inttoptr i32 %v2_12cf4 to i8*
  store i8* %v4_12d08, i8** %stack_var_-120, align 4
  br label %dec_label_pc_12d14

dec_label_pc_12d10:                               ; preds = %.thread20, %dec_label_pc_12e44
  %v0_12d10 = phi i32 [ %v2_12ebc, %.thread20 ], [ %v0_12e2076, %dec_label_pc_12e44 ]
  %stack_var_-44.0 = phi i32 [ %stack_var_-44.3, %.thread20 ], [ %stack_var_-44.2, %dec_label_pc_12e44 ]
  store i32 %v0_12d10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d14

dec_label_pc_12d14:                               ; preds = %dec_label_pc_12ce8, %dec_label_pc_12d10
  %v1_12d28 = phi i32 [ %v0_12d1464, %dec_label_pc_12ce8 ], [ %v0_12d10, %dec_label_pc_12d10 ]
  %stack_var_-44.1 = phi i32 [ %tmp117, %dec_label_pc_12ce8 ], [ %stack_var_-44.0, %dec_label_pc_12d10 ]
  %v1_12d14 = inttoptr i32 %v1_12d28 to i8*
  %v2_12d14 = load i8, i8* %v1_12d14, align 1
  %v3_12d14 = zext i8 %v2_12d14 to i32
  store i32 %v3_12d14, i32* %r3.global-to-local, align 4
  %v7_12d18 = icmp eq i8 %v2_12d14, 42
  br i1 %v7_12d18, label %bb, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12d14
  store i32 %v1_12d28, i32* %r6.global-to-local, align 4
  %v0_12d2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12d2c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d74.preheader

bb:                                               ; preds = %dec_label_pc_12d14
  %v1_12d20 = load i32, i32* %r8.global-to-local, align 4
  %v2_12d20 = load i32, i32* %sb.global-to-local, align 4
  %v4_12d20 = mul i32 %v2_12d20, %v1_12d20
  %v5_12d20 = add i32 %v4_12d20, %v3_12d1c.pre-phi
  store i32 %v5_12d20, i32* %r3.global-to-local, align 4
  %v2_12d28 = add i32 %v1_12d28, 1
  store i32 %v2_12d28, i32* %r6.global-to-local, align 4
  %v0_12d2c111 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12d2c111, i32* %r1.global-to-local, align 4
  %v3_12d30 = add i32 %v5_12d20, -40
  %v4_12d30 = inttoptr i32 %v3_12d30 to i32*
  store i32 %v0_12d2c111, i32* %v4_12d30, align 4
  %v0_12d78.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d74.preheader

dec_label_pc_12d74.preheader:                     ; preds = %.thread8, %bb
  %v0_12d78.pre = phi i32 [ %v1_12d28, %.thread8 ], [ %v0_12d78.pre.pre, %bb ]
  %v0_12d7c.pre = load i32, i32* @lr, align 4
  %v2_12d7c = add i32 %v0_12d7c.pre, 140
  %v3_12d7c = inttoptr i32 %v2_12d7c to i32*
  br label %dec_label_pc_12d74

dec_label_pc_12d38:                               ; preds = %dec_label_pc_12d74
  store i32 214748363, i32* %r3.global-to-local, align 4
  %v0_12d3c = load i32, i32* %r1.global-to-local, align 4
  %v2_12d3c = add i32 %v0_12d3c, -214748363
  %tmp139 = sub i32 214748362, %v0_12d3c
  %v6_12d3c = and i32 %tmp139, %v0_12d3c
  %v7_12d3c = icmp slt i32 %v6_12d3c, 0
  %v8_12d3c = icmp slt i32 %v2_12d3c, 0
  %v9_12d3c = icmp eq i32 %v0_12d3c, 214748363
  %v3_12d40 = xor i1 %v8_12d3c, %v7_12d3c
  %v4_12d40 = or i1 %v9_12d3c, %v3_12d40
  br i1 %v4_12d40, label %dec_label_pc_12d58, label %dec_label_pc_12d44

dec_label_pc_12d44:                               ; preds = %dec_label_pc_12d38
  store i32 214748364, i32* %r2.global-to-local, align 4
  %v9_12d48 = icmp eq i32 %v0_12d3c, 214748364
  br i1 %v9_12d48, label %dec_label_pc_12d50, label %dec_label_pc_12d70

dec_label_pc_12d50:                               ; preds = %dec_label_pc_12d44
  %v8_12d54 = icmp ugt i8 %v2_12d78, 55
  br i1 %v8_12d54, label %dec_label_pc_12d70, label %dec_label_pc_12d58

dec_label_pc_12d58:                               ; preds = %dec_label_pc_12d50, %dec_label_pc_12d38
  %v2_12d5c = mul i32 %v0_12d3c, 10
  %v1_12d60 = add i32 %v2_12d5c, -48
  store i32 %v1_12d60, i32* %r3.global-to-local, align 4
  %v2_12d64 = add i32 %v1_12d60, %v3_12d78
  br label %dec_label_pc_12d70

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12d50, %dec_label_pc_12d44, %dec_label_pc_12d58
  %storemerge = phi i32 [ %v2_12d64, %dec_label_pc_12d58 ], [ 2147483647, %dec_label_pc_12d44 ], [ 2147483647, %dec_label_pc_12d50 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_12d70 = add i32 %v0_12df8, 1
  store i32 %v1_12d70, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d74.preheader, %dec_label_pc_12d70
  %v0_12df8 = phi i32 [ %v0_12d78.pre, %dec_label_pc_12d74.preheader ], [ %v1_12d70, %dec_label_pc_12d70 ]
  store i32 140, i32* %r2.global-to-local, align 4
  %v1_12d78 = inttoptr i32 %v0_12df8 to i8*
  %v2_12d78 = load i8, i8* %v1_12d78, align 1
  %v3_12d78 = zext i8 %v2_12d78 to i32
  store i32 %v3_12d78, i32* @ip, align 4
  %v4_12d7c = load i32, i32* %v3_12d7c, align 4
  store i32 %v4_12d7c, i32* %r3.global-to-local, align 4
  %v2_12d80 = mul nuw nsw i32 %v3_12d78, 2
  store i32 %v2_12d80, i32* %r2.global-to-local, align 4
  %v2_12d84 = add i32 %v2_12d80, %v4_12d7c
  %v3_12d84 = inttoptr i32 %v2_12d84 to i16*
  %v4_12d84 = load i16, i16* %v3_12d84, align 2
  %v6_12d84 = zext i16 %v4_12d84 to i32
  store i32 %v6_12d84, i32* %r3.global-to-local, align 4
  %v1_12d88 = and i32 %v6_12d84, 8
  %v2_12d88 = icmp eq i32 %v1_12d88, 0
  br i1 %v2_12d88, label %dec_label_pc_12d90, label %dec_label_pc_12d38

dec_label_pc_12d90:                               ; preds = %dec_label_pc_12d74
  %v0_12d90 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d90 = add i32 %v0_12d90, -1
  %v2_12d90 = inttoptr i32 %v1_12d90 to i8*
  %v3_12d90 = load i8, i8* %v2_12d90, align 1
  %v4_12d90 = zext i8 %v3_12d90 to i32
  store i32 %v4_12d90, i32* %r3.global-to-local, align 4
  %v7_12d94 = icmp eq i8 %v3_12d90, 37
  br i1 %v7_12d94, label %dec_label_pc_12d9c, label %dec_label_pc_12e5c

dec_label_pc_12d9c:                               ; preds = %dec_label_pc_12d90
  %v7_12d9c = icmp eq i8 %v2_12d78, 36
  %. = zext i1 %v7_12d9c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v0_12da8 = load i32, i32* %r1.global-to-local, align 4
  %tmp143 = icmp slt i32 %v0_12da8, 1
  br i1 %tmp143, label %bb144, label %thread-pre-split

bb144:                                            ; preds = %dec_label_pc_12d9c
  store i32 0, i32* %r3.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_12d9c, %bb144
  %v0_12db0 = phi i32 [ 0, %bb144 ], [ %., %dec_label_pc_12d9c ]
  %v2_12db0 = icmp eq i32 %v0_12db0, 0
  %v0_12de4 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v2_12db0, label %dec_label_pc_12de4, label %dec_label_pc_12db8

dec_label_pc_12db8:                               ; preds = %thread-pre-split
  %v2_12de4 = icmp eq i32 %v0_12de4, 0
  %v1_12dbc = add i32 %v0_12df8, 1
  store i32 %v1_12dbc, i32* %r0.global-to-local, align 4
  br i1 %v2_12de4, label %dec_label_pc_13190, label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12db8
  %v2_12dc4 = sub i32 %v0_12da8, %v0_12de4
  %v4_12dc4 = xor i32 %v0_12de4, %v0_12da8
  %v5_12dc4 = xor i32 %v2_12dc4, %v0_12da8
  %v6_12dc4 = and i32 %v5_12dc4, %v4_12dc4
  %v7_12dc4 = icmp slt i32 %v6_12dc4, 0
  %v8_12dc4 = icmp slt i32 %v2_12dc4, 0
  %v9_12dc4 = icmp eq i32 %v0_12da8, %v0_12de4
  %v3_12dc8 = xor i1 %v8_12dc4, %v7_12dc4
  %v4_12dc8 = or i1 %v9_12dc4, %v3_12dc8
  br i1 %v4_12dc8, label %dec_label_pc_12dd8, label %bb145

bb145:                                            ; preds = %dec_label_pc_12dc4
  store i32 %v0_12da8, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12dd8

dec_label_pc_12dd4:                               ; preds = %dec_label_pc_12df8, %dec_label_pc_12e00
  %v0_12dd4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12dd4, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12dd8

dec_label_pc_12dd8:                               ; preds = %bb145, %dec_label_pc_12dc4, %dec_label_pc_12dd4
  %v0_12dd8 = phi i32 [ %v0_12d90, %dec_label_pc_12dd4 ], [ %v1_12dbc, %dec_label_pc_12dc4 ], [ %v1_12dbc, %bb145 ]
  %stack_var_-44.2 = phi i32 [ %stack_var_-44.1, %dec_label_pc_12dd4 ], [ %v0_12da8, %dec_label_pc_12dc4 ], [ %v0_12da8, %bb145 ]
  store i32 %v0_12dd8, i32* %r6.global-to-local, align 4
  store i32 1, i32* @ip, align 4
  %v2_12e14.pre = load i8*, i8** %stack_var_-120, align 4
  %v3_12e14 = ptrtoint i8* %v2_12e14.pre to i32
  br label %dec_label_pc_12e14

dec_label_pc_12de4:                               ; preds = %thread-pre-split
  %tmp146 = icmp slt i32 %v0_12de4, 1
  br i1 %tmp146, label %dec_label_pc_12df8, label %dec_label_pc_12dec

dec_label_pc_12dec:                               ; preds = %dec_label_pc_12de4
  %v7_12dec = icmp eq i8 %v2_12d78, 109
  br i1 %v7_12dec, label %dec_label_pc_12e5c, label %dec_label_pc_13190

dec_label_pc_12df8:                               ; preds = %dec_label_pc_12de4
  %tmp183 = icmp ugt i32 %v0_12df8, %v0_12d90
  br i1 %tmp183, label %dec_label_pc_12e00, label %dec_label_pc_12dd4

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12df8
  %v1_12e00 = inttoptr i32 %v0_12d90 to i8*
  %v2_12e00 = load i8, i8* %v1_12e00, align 1
  %v3_12e00 = zext i8 %v2_12e00 to i32
  store i32 %v3_12e00, i32* %r3.global-to-local, align 4
  %v7_12e04 = icmp eq i8 %v2_12e00, 48
  br i1 %v7_12e04, label %dec_label_pc_12dd4, label %bb147

bb147:                                            ; preds = %dec_label_pc_12e00
  %v1_12e08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_12e08, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e14.loopexit:                      ; preds = %dec_label_pc_12e1c
  %v1_12e28 = load i32, i32* @r4, align 4
  %v3_12e28 = or i32 %v1_12e28, %v0_12e3c
  store i32 %v3_12e28, i32* @r4, align 4
  %v2_12e2c = add i32 %v0_12e2076, 1
  store i32 %v2_12e2c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12e14

dec_label_pc_12e14:                               ; preds = %dec_label_pc_12e14.loopexit, %dec_label_pc_12dd8
  %v0_12e2076 = phi i32 [ %v2_12e2c, %dec_label_pc_12e14.loopexit ], [ %v0_12dd8, %dec_label_pc_12dd8 ]
  store i32 %v3_12e14, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_12e20 = inttoptr i32 %v0_12e2076 to i8*
  br label %dec_label_pc_12e1c

dec_label_pc_12e1c:                               ; preds = %dec_label_pc_12e34, %dec_label_pc_12e14
  %v0_12e3c = phi i32 [ %v2_12e3c, %dec_label_pc_12e34 ], [ 1, %dec_label_pc_12e14 ]
  %v0_12e1c = phi i32 [ %v5_12e1c, %dec_label_pc_12e34 ], [ %v3_12e14, %dec_label_pc_12e14 ]
  %v1_12e1c = inttoptr i32 %v0_12e1c to i8*
  %v2_12e1c = load i8, i8* %v1_12e1c, align 1
  %v3_12e1c = zext i8 %v2_12e1c to i32
  store i32 %v3_12e1c, i32* %r2.global-to-local, align 4
  %v5_12e1c = add i32 %v0_12e1c, 1
  store i32 %v5_12e1c, i32* %r0.global-to-local, align 4
  %v2_12e20 = load i8, i8* %v1_12e20, align 1
  %v3_12e20 = zext i8 %v2_12e20 to i32
  store i32 %v3_12e20, i32* %r3.global-to-local, align 4
  %v9_12e24 = icmp eq i8 %v2_12e20, %v2_12e1c
  br i1 %v9_12e24, label %dec_label_pc_12e14.loopexit, label %dec_label_pc_12e34

dec_label_pc_12e34:                               ; preds = %dec_label_pc_12e1c
  %v1_12e34 = inttoptr i32 %v5_12e1c to i8*
  %v2_12e34 = load i8, i8* %v1_12e34, align 1
  %v3_12e34 = zext i8 %v2_12e34 to i32
  store i32 %v3_12e34, i32* %r3.global-to-local, align 4
  %v2_12e38 = icmp eq i8 %v2_12e34, 0
  %v2_12e3c = mul i32 %v0_12e3c, 2
  store i32 %v2_12e3c, i32* %r1.global-to-local, align 4
  br i1 %v2_12e38, label %dec_label_pc_12e44, label %dec_label_pc_12e1c

dec_label_pc_12e44:                               ; preds = %dec_label_pc_12e34
  %v1_12e44 = add i32 %v0_12e2076, -1
  %v2_12e44 = inttoptr i32 %v1_12e44 to i8*
  %v3_12e44 = load i8, i8* %v2_12e44, align 1
  %v7_12e48 = icmp eq i8 %v3_12e44, 37
  %v0_12e4c = load i32, i32* @r4, align 4
  %v1_12e4c = and i32 %v0_12e4c, 10
  store i32 %v1_12e4c, i32* %r3.global-to-local, align 4
  %v4_12e50 = udiv i32 %v1_12e4c, 2
  %v5_12e50 = sub nuw nsw i32 -1, %v4_12e50
  %v6_12e50 = and i32 %v0_12e4c, %v5_12e50
  store i32 %v6_12e50, i32* @r4, align 4
  br i1 %v7_12e48, label %dec_label_pc_12e58, label %dec_label_pc_12d10

dec_label_pc_12e58:                               ; preds = %dec_label_pc_12e44
  %v0_12e58 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12e58, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12e5c

dec_label_pc_12e5c:                               ; preds = %bb147, %dec_label_pc_12d90, %dec_label_pc_12dec, %dec_label_pc_12e58
  %v1_12e9c = phi i32 [ %v0_12e2076, %dec_label_pc_12e58 ], [ %v0_12df8, %bb147 ], [ %v0_12df8, %dec_label_pc_12dec ], [ %v0_12df8, %dec_label_pc_12d90 ]
  %v0_12e98 = phi i32 [ %v5_12e1c, %dec_label_pc_12e58 ], [ %v0_12d90, %bb147 ], [ %v0_12d90, %dec_label_pc_12dec ], [ %v0_12d90, %dec_label_pc_12d90 ]
  %stack_var_-44.3 = phi i32 [ %stack_var_-44.2, %dec_label_pc_12e58 ], [ %stack_var_-44.1, %bb147 ], [ %stack_var_-44.1, %dec_label_pc_12dec ], [ %stack_var_-44.1, %dec_label_pc_12d90 ]
  %v1_12e5c = inttoptr i32 %v0_12e98 to i8*
  %v2_12e5c = load i8, i8* %v1_12e5c, align 1
  %v3_12e5c = zext i8 %v2_12e5c to i32
  store i32 %v3_12e5c, i32* %r3.global-to-local, align 4
  %v7_12e60 = icmp eq i8 %v2_12e5c, 42
  br i1 %v7_12e60, label %dec_label_pc_12e68, label %dec_label_pc_12ea8

dec_label_pc_12e68:                               ; preds = %dec_label_pc_12e5c
  %v0_12e68 = load i32, i32* %fp.global-to-local, align 4
  %v2_12e68 = icmp eq i32 %v0_12e68, 0
  br i1 %v2_12e68, label %dec_label_pc_12e98, label %dec_label_pc_12e70

dec_label_pc_12e70:                               ; preds = %dec_label_pc_12e68
  %v1_12e70 = inttoptr i32 %v1_12e9c to i8*
  %v2_12e70 = load i8, i8* %v1_12e70, align 1
  %v3_12e70 = zext i8 %v2_12e70 to i32
  store i32 %v3_12e70, i32* %r3.global-to-local, align 4
  %v7_12e74 = icmp eq i8 %v2_12e70, 36
  br i1 %v7_12e74, label %dec_label_pc_12e7c, label %dec_label_pc_13190

dec_label_pc_12e7c:                               ; preds = %dec_label_pc_12e70
  %v0_12e7c = load i32, i32* %r1.global-to-local, align 4
  %tmp148 = icmp slt i32 %v0_12e7c, 1
  br i1 %tmp148, label %dec_label_pc_13190, label %dec_label_pc_12e84

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12e7c
  %v0_12e88 = load i32, i32* %r8.global-to-local, align 4
  %v1_12e88 = load i32, i32* %sb.global-to-local, align 4
  %v3_12e88 = mul i32 %v1_12e88, %v0_12e88
  %v4_12e88 = add i32 %v3_12e88, %v3_12d1c.pre-phi
  store i32 %v4_12e88, i32* %r3.global-to-local, align 4
  %v1_12e8c = add i32 %v1_12e9c, 1
  store i32 %v1_12e8c, i32* %r6.global-to-local, align 4
  %v2_12e90 = add i32 %v4_12e88, -12
  %v3_12e90 = inttoptr i32 %v2_12e90 to i32*
  store i32 %v0_12e7c, i32* %v3_12e90, align 4
  br label %dec_label_pc_12ea4

dec_label_pc_12e98:                               ; preds = %dec_label_pc_12e68
  %v1_12e98 = add i32 %v0_12e98, 1
  store i32 %v1_12e98, i32* %r3.global-to-local, align 4
  %v9_12e9c = icmp eq i32 %v1_12e98, %v1_12e9c
  br i1 %v9_12e9c, label %dec_label_pc_12ea4, label %dec_label_pc_13190

dec_label_pc_12ea4:                               ; preds = %dec_label_pc_12e98, %dec_label_pc_12e84
  store i32 -2147483648, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ea8

dec_label_pc_12ea8:                               ; preds = %dec_label_pc_12e5c, %dec_label_pc_12ea4
  %v0_12ea8 = load i32, i32* %r8.global-to-local, align 4
  %v2_12ea8 = icmp eq i32 %v0_12ea8, 0
  br i1 %v2_12ea8, label %dec_label_pc_12eb4, label %dec_label_pc_12ed4.loopexit

dec_label_pc_12eb4:                               ; preds = %dec_label_pc_12ea8
  %v0_12eb4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12eb4 = inttoptr i32 %v0_12eb4 to i8*
  %v2_12eb4 = load i8, i8* %v1_12eb4, align 1
  %v3_12eb4 = zext i8 %v2_12eb4 to i32
  store i32 %v3_12eb4, i32* %r3.global-to-local, align 4
  %v7_12eb8 = icmp eq i8 %v2_12eb4, 46
  br i1 %v7_12eb8, label %.thread20, label %dec_label_pc_12ecc

.thread20:                                        ; preds = %dec_label_pc_12eb4
  %v2_12ebc = add i32 %v0_12eb4, 1
  store i32 %v2_12ebc, i32* %r6.global-to-local, align 4
  %v1_12ec0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_12ec0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12ecc:                               ; preds = %dec_label_pc_12eb4
  %v0_12ecc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12ecc, i32* %sl.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  br label %dec_label_pc_12ed4

dec_label_pc_12ed4.loopexit:                      ; preds = %dec_label_pc_12ea8
  %v1_12eac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_12eac, i32* @r5, align 4
  %v0_12ee0.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12ed4

dec_label_pc_12ed4:                               ; preds = %dec_label_pc_12ed4.loopexit, %dec_label_pc_12ecc
  %v0_12ee0.pre = phi i32 [ %v0_12ee0.pre.pre, %dec_label_pc_12ed4.loopexit ], [ %v0_12eb4, %dec_label_pc_12ecc ]
  store i32 -37128, i32* %r3.global-to-local, align 4
  %v0_12ed8 = load i32, i32* @lr, align 4
  %v2_12ed8 = add i32 %v0_12ed8, -37128
  store i32 %v2_12ed8, i32* %r1.global-to-local, align 4
  %v1_12ee0 = inttoptr i32 %v0_12ee0.pre to i8*
  br label %dec_label_pc_12edc

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12ef0, %dec_label_pc_12ed4
  %v0_12ef0 = phi i32 [ %v1_12ef0, %dec_label_pc_12ef0 ], [ %v2_12ed8, %dec_label_pc_12ed4 ]
  %v1_12edc = inttoptr i32 %v0_12ef0 to i8*
  %v2_12edc = load i8, i8* %v1_12edc, align 1
  %v3_12edc = zext i8 %v2_12edc to i32
  store i32 %v3_12edc, i32* %r2.global-to-local, align 4
  %v2_12ee0 = load i8, i8* %v1_12ee0, align 1
  %v3_12ee0 = zext i8 %v2_12ee0 to i32
  store i32 %v3_12ee0, i32* %r3.global-to-local, align 4
  %v9_12ee4 = icmp eq i8 %v2_12ee0, %v2_12edc
  br i1 %v9_12ee4, label %bb149, label %dec_label_pc_12ef0

bb149:                                            ; preds = %dec_label_pc_12edc
  %v2_12ee8 = add i32 %v0_12ee0.pre, 1
  store i32 %v2_12ee8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12efc

dec_label_pc_12ef0:                               ; preds = %dec_label_pc_12edc
  %v1_12ef0 = add i32 %v0_12ef0, 1
  %v2_12ef0 = inttoptr i32 %v1_12ef0 to i8*
  %v3_12ef0 = load i8, i8* %v2_12ef0, align 1
  %v4_12ef0 = zext i8 %v3_12ef0 to i32
  store i32 %v4_12ef0, i32* %r3.global-to-local, align 4
  store i32 %v1_12ef0, i32* %r1.global-to-local, align 4
  %v2_12ef4 = icmp eq i8 %v3_12ef0, 0
  br i1 %v2_12ef4, label %dec_label_pc_12efc, label %dec_label_pc_12edc

dec_label_pc_12efc:                               ; preds = %dec_label_pc_12ef0, %bb149
  %v1_12f20 = phi i32 [ %v2_12ee8, %bb149 ], [ %v0_12ee0.pre, %dec_label_pc_12ef0 ]
  %v1_12f1c = phi i32 [ %v0_12ef0, %bb149 ], [ %v1_12ef0, %dec_label_pc_12ef0 ]
  %v2_12f04 = sub i32 %v1_12f1c, %v2_12ed8
  store i32 %v2_12f04, i32* %r3.global-to-local, align 4
  %v8_12f0c = icmp sgt i32 %v2_12f04, 1
  br i1 %v8_12f0c, label %.thread24, label %dec_label_pc_12f10

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12efc
  %v1_12f10 = inttoptr i32 %v1_12f20 to i8*
  %v2_12f10 = load i8, i8* %v1_12f10, align 1
  %v3_12f10 = zext i8 %v2_12f10 to i32
  store i32 %v3_12f10, i32* %r2.global-to-local, align 4
  %v1_12f14 = inttoptr i32 %v1_12f1c to i8*
  %v2_12f14 = load i8, i8* %v1_12f14, align 1
  %v3_12f14 = zext i8 %v2_12f14 to i32
  store i32 %v3_12f14, i32* %r3.global-to-local, align 4
  %v9_12f18 = icmp eq i8 %v2_12f10, %v2_12f14
  br i1 %v9_12f18, label %bb150, label %.thread24

bb150:                                            ; preds = %dec_label_pc_12f10
  %v2_12f1c = add i32 %v1_12f1c, 9
  store i32 %v2_12f1c, i32* %r1.global-to-local, align 4
  %v2_12f20 = add i32 %v1_12f20, 1
  store i32 %v2_12f20, i32* %r6.global-to-local, align 4
  br label %.thread24

.thread24:                                        ; preds = %dec_label_pc_12f10, %dec_label_pc_12efc, %bb150
  %v0_12f28 = phi i32 [ %v1_12f1c, %dec_label_pc_12f10 ], [ %v1_12f1c, %dec_label_pc_12efc ], [ %v2_12f1c, %bb150 ]
  %v0_12f24 = phi i32 [ %v1_12f20, %dec_label_pc_12f10 ], [ %v1_12f20, %dec_label_pc_12efc ], [ %v2_12f20, %bb150 ]
  %v1_12f24 = inttoptr i32 %v0_12f24 to i8*
  %v2_12f24 = load i8, i8* %v1_12f24, align 1
  %v3_12f24 = zext i8 %v2_12f24 to i32
  store i32 %v3_12f24, i32* %r2.global-to-local, align 4
  %v1_12f28 = add i32 %v0_12f28, 9
  %v2_12f28 = inttoptr i32 %v1_12f28 to i8*
  %v3_12f28 = load i8, i8* %v2_12f28, align 1
  %v4_12f28 = zext i8 %v3_12f28 to i32
  store i32 %v4_12f28, i32* %r3.global-to-local, align 4
  %v2_12f2c = icmp eq i8 %v2_12f24, 0
  %v3_12f30 = mul nuw nsw i32 %v4_12f28, 256
  store i32 %v3_12f30, i32* @ip, align 4
  br i1 %v2_12f2c, label %dec_label_pc_13190, label %dec_label_pc_12f38

dec_label_pc_12f38:                               ; preds = %.thread24
  store i32 -37028, i32* %r3.global-to-local, align 4
  %v2_12f3c = add i32 %v0_12ed8, -37028
  store i32 %v2_12f3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f40

dec_label_pc_12f40:                               ; preds = %dec_label_pc_12fc4, %dec_label_pc_12f38
  %v1_12f54 = phi i32 [ %v1_12fc4, %dec_label_pc_12fc4 ], [ %v2_12f3c, %dec_label_pc_12f38 ]
  %v1_12f40 = inttoptr i32 %v1_12f54 to i8*
  %v2_12f40 = load i8, i8* %v1_12f40, align 1
  %v3_12f40 = zext i8 %v2_12f40 to i32
  store i32 %v3_12f40, i32* %r3.global-to-local, align 4
  %v9_12f44 = icmp eq i8 %v2_12f40, %v2_12f24
  br i1 %v9_12f44, label %dec_label_pc_12f4c, label %dec_label_pc_12fc4

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f40
  store i32 %v2_12f3c, i32* %r3.global-to-local, align 4
  %v2_12f54 = sub i32 %v1_12f54, %v2_12f3c
  store i32 %v2_12f54, i32* %r1.global-to-local, align 4
  %v7_12f5c = icmp slt i32 %v2_12f54, 18
  br i1 %v7_12f5c, label %bb152, label %dec_label_pc_12f60

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12f4c
  %v1_12f60 = and i32 %v3_12f30, 1024
  %v2_12f60 = icmp eq i32 %v1_12f60, 0
  br i1 %v2_12f60, label %bb152, label %bb151

bb151:                                            ; preds = %dec_label_pc_12f60
  %v2_12f64 = add i32 %v2_12f54, -2
  store i32 %v2_12f64, i32* %r1.global-to-local, align 4
  br label %bb152

bb152:                                            ; preds = %dec_label_pc_12f4c, %dec_label_pc_12f60, %bb151
  %v0_12f6c = phi i32 [ %v2_12f54, %dec_label_pc_12f4c ], [ %v2_12f54, %dec_label_pc_12f60 ], [ %v2_12f64, %bb151 ]
  store i32 -37076, i32* %r3.global-to-local, align 4
  %v1_12f6c = load i32, i32* %r7.global-to-local, align 4
  %v2_12f6c = add i32 %v1_12f6c, 32
  %v3_12f6c = inttoptr i32 %v2_12f6c to i32*
  store i32 %v0_12f6c, i32* %v3_12f6c, align 4
  %v0_12f70 = load i32, i32* @lr, align 4
  %v1_12f70 = load i32, i32* %r3.global-to-local, align 4
  %v2_12f70 = add i32 %v1_12f70, %v0_12f70
  store i32 %v2_12f70, i32* %r3.global-to-local, align 4
  %v1_12f74 = add i32 %v2_12f70, -1
  store i32 %v1_12f74, i32* %r0.global-to-local, align 4
  %v0_12f7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f78

dec_label_pc_12f78:                               ; preds = %dec_label_pc_12f78, %bb152
  %v0_12f78 = phi i32 [ %v1_12f78, %dec_label_pc_12f78 ], [ %v1_12f74, %bb152 ]
  %v1_12f78 = add i32 %v0_12f78, 1
  %v2_12f78 = inttoptr i32 %v1_12f78 to i8*
  %v3_12f78 = load i8, i8* %v2_12f78, align 1
  %v4_12f78 = zext i8 %v3_12f78 to i32
  store i32 %v4_12f78, i32* %r3.global-to-local, align 4
  store i32 %v1_12f78, i32* %r0.global-to-local, align 4
  %v8_12f80 = icmp sgt i32 %v0_12f7c.pre, %v4_12f78
  br i1 %v8_12f80, label %dec_label_pc_12f78, label %dec_label_pc_12f84

dec_label_pc_12f84:                               ; preds = %dec_label_pc_12f78
  %v2_12f8c.neg = sub i32 37076, %v0_12f70
  %v2_12f90 = add i32 %v2_12f8c.neg, %v1_12f78
  %v2_12f94 = mul i32 %v2_12f90, 2
  store i32 %v2_12f94, i32* %r2.global-to-local, align 4
  %v2_12f98 = add i32 %v0_12f70, -37092
  store i32 %v2_12f98, i32* %r3.global-to-local, align 4
  %v2_12f9c = add i32 %v2_12f94, %v2_12f98
  %v3_12f9c = inttoptr i32 %v2_12f9c to i16*
  %v4_12f9c = load i16, i16* %v3_12f9c, align 2
  %v6_12f9c = sext i16 %v4_12f9c to i32
  store i32 %v6_12f9c, i32* %r1.global-to-local, align 4
  %v2_12fa4 = add i32 %v0_12f70, -37108
  store i32 %v2_12fa4, i32* %r3.global-to-local, align 4
  %v2_12fa8 = add i32 %v2_12f94, %v2_12fa4
  %v3_12fa8 = inttoptr i32 %v2_12fa8 to i16*
  %v4_12fa8 = load i16, i16* %v3_12fa8, align 2
  %v6_12fa8 = sext i16 %v4_12fa8 to i32
  %v1_12fac = load i32, i32* @ip, align 4
  %v2_12fac = or i32 %v1_12fac, %v6_12f9c
  %v2_12fb0 = and i32 %v2_12fac, %v6_12fa8
  store i32 %v2_12fb0, i32* %r1.global-to-local, align 4
  store i32 -37028, i32* %r3.global-to-local, align 4
  %v2_12fb8 = add i32 %v0_12f70, -37028
  store i32 %v2_12fb8, i32* %r0.global-to-local, align 4
  store i32 %v2_12fb0, i32* %stack_var_-72, align 4
  %v0_12fdc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12fd0

dec_label_pc_12fc4:                               ; preds = %dec_label_pc_12f40
  %v1_12fc4 = add i32 %v1_12f54, 1
  %v2_12fc4 = inttoptr i32 %v1_12fc4 to i8*
  %v3_12fc4 = load i8, i8* %v2_12fc4, align 1
  %v4_12fc4 = zext i8 %v3_12fc4 to i32
  store i32 %v4_12fc4, i32* %r3.global-to-local, align 4
  store i32 %v1_12fc4, i32* %r0.global-to-local, align 4
  %v2_12fc8 = icmp eq i8 %v3_12fc4, 0
  br i1 %v2_12fc8, label %dec_label_pc_12fd0, label %dec_label_pc_12f40

dec_label_pc_12fd0:                               ; preds = %dec_label_pc_12fc4, %dec_label_pc_12f84
  %v0_12fdc = phi i32 [ %v0_12fdc.pre, %dec_label_pc_12f84 ], [ %v0_12f24, %dec_label_pc_12fc4 ]
  %v0_12fd8 = phi i32 [ %v1_12fac, %dec_label_pc_12f84 ], [ %v3_12f30, %dec_label_pc_12fc4 ]
  %v0_12fd0 = load i32, i32* @r4, align 4
  %v1_12fd0 = and i32 %v0_12fd0, 4
  %v1_12fd4 = and i32 %v0_12fd0, -5
  store i32 %v1_12fd4, i32* %r3.global-to-local, align 4
  %v1_12fd8 = and i32 %v0_12fd8, 3840
  store i32 %v1_12fd8, i32* %r2.global-to-local, align 4
  %v1_12fdc = inttoptr i32 %v0_12fdc to i8*
  %v2_12fdc = load i8, i8* %v1_12fdc, align 1
  %v3_12fdc = zext i8 %v2_12fdc to i32
  store i32 %v3_12fdc, i32* %r1.global-to-local, align 4
  %v2_12fe0 = or i32 %v1_12fd4, %v1_12fd8
  store i32 %v2_12fe0, i32* %r2.global-to-local, align 4
  %tmp180 = mul nuw nsw i32 %v1_12fd0, 4
  %tmp181 = or i32 %tmp180, 32
  %v1_12fec = load i32, i32* %r7.global-to-local, align 4
  %v2_12fec = add i32 %v1_12fec, 20
  %v3_12fec = inttoptr i32 %v2_12fec to i32*
  store i32 %tmp181, i32* %v3_12fec, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_12ff4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ff4 = load i32, i32* %r7.global-to-local, align 4
  %v2_12ff4 = add i32 %v1_12ff4, 12
  %v3_12ff4 = inttoptr i32 %v2_12ff4 to i32*
  store i32 %v0_12ff4, i32* %v3_12ff4, align 4
  %v0_12ff8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ff8 = add i32 %v0_12ff8, 4
  %v2_12ff8 = inttoptr i32 %v1_12ff8 to i32*
  %v3_12ff8 = load i32, i32* @r5, align 4
  store i32 %v3_12ff8, i32* %v2_12ff8, align 4
  %v4_12ff8 = add i32 %v0_12ff8, 8
  %v5_12ff8 = inttoptr i32 %v4_12ff8 to i32*
  %v6_12ff8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v6_12ff8, i32* %v5_12ff8, align 4
  %v0_12ffc = load i32, i32* %r2.global-to-local, align 4
  %v1_12ffc = load i32, i32* %r7.global-to-local, align 4
  %v2_12ffc = add i32 %v1_12ffc, 16
  %v3_12ffc = inttoptr i32 %v2_12ffc to i32*
  store i32 %v0_12ffc, i32* %v3_12ffc, align 4
  %v0_13000 = load i32, i32* %r3.global-to-local, align 4
  %v1_13000 = load i32, i32* %r7.global-to-local, align 4
  %v2_13000 = add i32 %v1_13000, 28
  %v3_13000 = inttoptr i32 %v2_13000 to i32*
  store i32 %v0_13000, i32* %v3_13000, align 4
  %v0_13004 = load i32, i32* %r0.global-to-local, align 4
  %v1_13004 = inttoptr i32 %v0_13004 to i8*
  %v2_13004 = load i8, i8* %v1_13004, align 1
  %v3_13004 = zext i8 %v2_13004 to i32
  store i32 %v3_13004, i32* %r2.global-to-local, align 4
  %v2_13008 = icmp eq i8 %v2_13004, 0
  br i1 %v2_13008, label %dec_label_pc_13010, label %dec_label_pc_13094

dec_label_pc_13010:                               ; preds = %dec_label_pc_12fd0
  %v0_13010 = load i32, i32* %r6.global-to-local, align 4
  %v1_13010 = inttoptr i32 %v0_13010 to i8*
  %v2_13010 = load i8, i8* %v1_13010, align 1
  %v3_13010 = zext i8 %v2_13010 to i32
  store i32 %v3_13010, i32* %r3.global-to-local, align 4
  %v7_13014 = icmp eq i8 %v2_13010, 109
  br i1 %v7_13014, label %.thread28, label %dec_label_pc_13028

.thread28:                                        ; preds = %dec_label_pc_13010
  store i32 20, i32* %r3.global-to-local, align 4
  %v2_1301c = load i32, i32* %r7.global-to-local, align 4
  %v3_1301c = add i32 %v2_1301c, 32
  %v4_1301c = inttoptr i32 %v3_1301c to i32*
  store i32 20, i32* %v4_1301c, align 4
  %v1_13020 = load i32, i32* %r2.global-to-local, align 4
  %v2_13020 = load i32, i32* %r7.global-to-local, align 4
  %v3_13020 = add i32 %v2_13020, 28
  %v4_13020 = inttoptr i32 %v3_13020 to i32*
  store i32 %v1_13020, i32* %v4_13020, align 4
  br label %dec_label_pc_13094

dec_label_pc_13028:                               ; preds = %dec_label_pc_13010
  store i32 728, i32* %r3.global-to-local, align 4
  %v0_1302c = load i32, i32* @lr, align 4
  %v2_1302c = add i32 %v0_1302c, 728
  %v3_1302c = inttoptr i32 %v2_1302c to i32*
  %v4_1302c = load i32, i32* %v3_1302c, align 4
  store i32 %v4_1302c, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r3.global-to-local, align 4
  %v1_13034 = load i32, i32* %r7.global-to-local, align 4
  %v2_13034 = add i32 %v1_13034, 32
  %v3_13034 = inttoptr i32 %v2_13034 to i32*
  store i32 21, i32* %v3_13034, align 4
  %v0_13038 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13038, i32* @ip, align 4
  %v1_1303c = add i32 %v0_13038, 10
  store i32 %v1_1303c, i32* %r0.global-to-local, align 4
  %v0_13044.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_13044 = inttoptr i32 %v0_13044.pre to i8*
  br label %dec_label_pc_13040

dec_label_pc_13040:                               ; preds = %dec_label_pc_13084, %dec_label_pc_13028
  %v1_13050 = phi i32 [ %v1_13084, %dec_label_pc_13084 ], [ %v0_13038, %dec_label_pc_13028 ]
  %v1_13040 = inttoptr i32 %v1_13050 to i8*
  %v2_13040 = load i8, i8* %v1_13040, align 1
  %v3_13040 = zext i8 %v2_13040 to i32
  store i32 %v3_13040, i32* %r2.global-to-local, align 4
  %v2_13044 = load i8, i8* %v1_13044, align 1
  %v3_13044 = zext i8 %v2_13044 to i32
  store i32 %v3_13044, i32* %r3.global-to-local, align 4
  %v9_13048 = icmp eq i8 %v2_13040, %v2_13044
  br i1 %v9_13048, label %dec_label_pc_13050, label %dec_label_pc_13084

dec_label_pc_13050:                               ; preds = %dec_label_pc_13040
  %v2_13050 = sub i32 %v1_13050, %v0_13038
  store i32 %v2_13050, i32* %r3.global-to-local, align 4
  %v0_13058 = load i32, i32* %r7.global-to-local, align 4
  %v1_13058 = add i32 %v0_13058, 4
  store i32 %v1_13058, i32* %r0.global-to-local, align 4
  %v0_1305c = load i32, i32* @lr, align 4
  %v2_1305c = add i32 %v0_1305c, 10488
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_13064 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_13064, i32* %r2.global-to-local, align 4
  %v4_13068 = mul i32 %v2_13050, 4
  %v5_13068 = add i32 %v2_1305c, %v4_13068
  %v6_13068 = inttoptr i32 %v5_13068 to i32*
  %v7_13068 = load i32, i32* %v6_13068, align 4
  store i32 %v7_13068, i32* @ip, align 4
  store i32 77940, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_13068)
  %v0_13074 = load i32, i32* %r0.global-to-local, align 4
  %v1_13078 = load i32, i32* %r7.global-to-local, align 4
  %v2_13078 = add i32 %v1_13078, 28
  %v3_13078 = inttoptr i32 %v2_13078 to i32*
  store i32 %v0_13074, i32* %v3_13078, align 4
  %v7_1307c = icmp sgt i32 %v0_13074, 5
  br i1 %v7_1307c, label %dec_label_pc_13190, label %dec_label_pc_13094

dec_label_pc_13084:                               ; preds = %dec_label_pc_13040
  %v1_13084 = add i32 %v1_13050, 1
  store i32 %v1_13084, i32* %r1.global-to-local, align 4
  %v3_13088 = icmp ult i32 %v1_13084, %v1_1303c
  br i1 %v3_13088, label %dec_label_pc_13040, label %dec_label_pc_13190

dec_label_pc_13094:                               ; preds = %.thread28, %dec_label_pc_13050, %dec_label_pc_12fd0
  %v0_13094 = load i32, i32* %fp.global-to-local, align 4
  %tmp156 = icmp slt i32 %v0_13094, 1
  br i1 %tmp156, label %dec_label_pc_13140, label %dec_label_pc_1309c

dec_label_pc_1309c:                               ; preds = %dec_label_pc_13094
  store i32 0, i32* %r8.global-to-local, align 4
  %v9_130b4 = add i32 %stack_var_-44.3, -2
  br label %dec_label_pc_130a0

dec_label_pc_130a0:                               ; preds = %dec_label_pc_13128, %dec_label_pc_1309c
  %v9_130c0 = phi i32 [ 0, %dec_label_pc_1309c ], [ %v1_1312c, %dec_label_pc_13128 ]
  %v7_130a4 = icmp sgt i32 %v9_130c0, 2
  br i1 %v7_130a4, label %.thread38, label %bb157

.thread38:                                        ; preds = %dec_label_pc_130a0
  store i32 %v9_130b4, i32* %r3.global-to-local, align 4
  %v10_130c0 = add i32 %v9_130c0, %v9_130b4
  store i32 %v10_130c0, i32* %r1.global-to-local, align 4
  br label %bb158

bb157:                                            ; preds = %dec_label_pc_130a0
  store i32 %v3_12d1c.pre-phi, i32* @ip, align 4
  %v12_130a8 = mul i32 %v9_130c0, 4
  %v13_130a8 = add i32 %v12_130a8, %v3_12d1c.pre-phi
  store i32 %v13_130a8, i32* %r3.global-to-local, align 4
  %v9_130b0 = add i32 %v13_130a8, -12
  %v10_130b0 = inttoptr i32 %v9_130b0 to i8*
  %v11_130b0 = load i8, i8* %v10_130b0, align 4
  %v12_130b0 = zext i8 %v11_130b0 to i32
  store i32 %v12_130b0, i32* %r2.global-to-local, align 4
  %v9_130b8 = load i32, i32* %r7.global-to-local, align 4
  %v10_130b8 = add i32 %v9_130b8, %v9_130c0
  store i32 %v10_130b8, i32* %r3.global-to-local, align 4
  store i32 %v12_130b0, i32* %r1.global-to-local, align 4
  %v11_130c4 = add i32 %v10_130b8, 36
  %v12_130c4 = inttoptr i32 %v11_130c4 to i8*
  store i8 %v11_130b0, i8* %v12_130c4, align 1
  %v0_130c8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb158

bb158:                                            ; preds = %.thread38, %bb157
  %v0_130e8 = phi i32 [ %v10_130c0, %.thread38 ], [ %v0_130c8.pre, %bb157 ]
  %v1_130c8 = load i32, i32* %fp.global-to-local, align 4
  %v2_130c8 = sub i32 %v0_130e8, %v1_130c8
  %v4_130c8 = xor i32 %v1_130c8, %v0_130e8
  %v5_130c8 = xor i32 %v2_130c8, %v0_130e8
  %v6_130c8 = and i32 %v5_130c8, %v4_130c8
  %v7_130c8 = icmp slt i32 %v6_130c8, 0
  %v8_130c8 = icmp slt i32 %v2_130c8, 0
  %v9_130c8 = icmp eq i32 %v0_130e8, %v1_130c8
  %v3_130cc = xor i1 %v8_130c8, %v7_130c8
  %v4_130cc = or i1 %v9_130c8, %v3_130cc
  br i1 %v4_130cc, label %dec_label_pc_130dc, label %dec_label_pc_130d0

dec_label_pc_130d0:                               ; preds = %bb158
  %v1_130d0 = add i32 %v0_130e8, -9
  %v3_130d0 = sub i32 8, %v0_130e8
  %v4_130d0 = and i32 %v3_130d0, %v0_130e8
  %v5_130d0 = icmp slt i32 %v4_130d0, 0
  %v6_130d0 = icmp slt i32 %v1_130d0, 0
  %v7_130d0 = icmp eq i32 %v0_130e8, 9
  %v3_130d4 = xor i1 %v6_130d0, %v5_130d0
  %v4_130d4 = or i1 %v7_130d0, %v3_130d4
  br i1 %v4_130d4, label %dec_label_pc_130d8, label %dec_label_pc_13190

dec_label_pc_130d8:                               ; preds = %dec_label_pc_130d0
  store i32 %v0_130e8, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_130dc

dec_label_pc_130dc:                               ; preds = %bb158, %dec_label_pc_130d8
  store i32 %v3_12d1c.pre-phi, i32* @r2, align 4
  %v1_130e0 = load i32, i32* %r8.global-to-local, align 4
  %v4_130e0 = mul i32 %v1_130e0, 4
  %v5_130e0 = add i32 %v4_130e0, %v3_12d1c.pre-phi
  store i32 %v5_130e0, i32* %sb.global-to-local, align 4
  %v1_130e4 = add i32 %v5_130e0, -40
  %v2_130e4 = inttoptr i32 %v1_130e4 to i32*
  %v3_130e4 = load i32, i32* %v2_130e4, align 4
  store i32 %v3_130e4, i32* %r5.global-to-local, align 4
  %v1_130e8 = add i32 %v0_130e8, -1
  store i32 %v1_130e8, i32* %r3.global-to-local, align 4
  %v0_130ec = load i32, i32* %r7.global-to-local, align 4
  %v4_130ec = mul i32 %v1_130e8, 4
  %v5_130ec = add i32 %v0_130ec, %v4_130ec
  store i32 %v5_130ec, i32* %sl.global-to-local, align 4
  %v7_130f0 = icmp eq i32 %v3_130e4, 8
  %v1_130f4 = add i32 %v5_130ec, 40
  %v2_130f4 = inttoptr i32 %v1_130f4 to i32*
  %v3_130f4 = load i32, i32* %v2_130f4, align 4
  store i32 %v3_130f4, i32* @r0, align 4
  br i1 %v7_130f0, label %dec_label_pc_13128, label %dec_label_pc_130fc

dec_label_pc_130fc:                               ; preds = %dec_label_pc_130dc
  %v9_130fc = icmp eq i32 %v3_130f4, %v3_130e4
  br i1 %v9_130fc, label %dec_label_pc_13120, label %bb159

bb159:                                            ; preds = %dec_label_pc_130fc
  %v8_13100 = icmp eq i32 %v3_130f4, 8
  br i1 %v8_13100, label %dec_label_pc_13120, label %dec_label_pc_13108

dec_label_pc_13108:                               ; preds = %bb159
  %v0_13108 = call i32 @_promoted_size()
  %v0_13110 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13110, i32* @r0, align 4
  %v0_13114 = call i32 @_promoted_size()
  store i32 %v0_13114, i32* %r0.global-to-local, align 4
  %v8_1311c = icmp sgt i32 %v0_13108, %v0_13114
  br i1 %v8_1311c, label %dec_label_pc_13128, label %dec_label_pc_13108.dec_label_pc_13120_crit_edge

dec_label_pc_13108.dec_label_pc_13120_crit_edge:  ; preds = %dec_label_pc_13108
  %v0_13120.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_13124.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_13120

dec_label_pc_13120:                               ; preds = %dec_label_pc_13108.dec_label_pc_13120_crit_edge, %dec_label_pc_130fc, %bb159
  %v1_13124 = phi i32 [ %v1_13124.pre, %dec_label_pc_13108.dec_label_pc_13120_crit_edge ], [ %v5_130ec, %dec_label_pc_130fc ], [ %v5_130ec, %bb159 ]
  %v0_13120 = phi i32 [ %v0_13120.pre, %dec_label_pc_13108.dec_label_pc_13120_crit_edge ], [ %v5_130e0, %dec_label_pc_130fc ], [ %v5_130e0, %bb159 ]
  %v1_13120 = add i32 %v0_13120, -40
  %v2_13120 = inttoptr i32 %v1_13120 to i32*
  %v3_13120 = load i32, i32* %v2_13120, align 4
  store i32 %v3_13120, i32* %r3.global-to-local, align 4
  %v2_13124 = add i32 %v1_13124, 40
  %v3_13124 = inttoptr i32 %v2_13124 to i32*
  store i32 %v3_13120, i32* %v3_13124, align 4
  br label %dec_label_pc_13128

dec_label_pc_13128:                               ; preds = %dec_label_pc_13108, %dec_label_pc_130dc, %dec_label_pc_13120
  %v0_13128 = load i32, i32* %r7.global-to-local, align 4
  %v1_13128 = add i32 %v0_13128, 28
  %v2_13128 = inttoptr i32 %v1_13128 to i32*
  %v3_13128 = load i32, i32* %v2_13128, align 4
  %v0_1312c = load i32, i32* %r8.global-to-local, align 4
  %v1_1312c = add i32 %v0_1312c, 1
  store i32 %v1_1312c, i32* %r8.global-to-local, align 4
  %v1_13130 = add i32 %v3_13128, 2
  store i32 %v1_13130, i32* %r3.global-to-local, align 4
  %v6_13138 = icmp slt i32 %v1_1312c, %v1_13130
  br i1 %v6_13138, label %dec_label_pc_130a0, label %dec_label_pc_1315c

dec_label_pc_13140:                               ; preds = %dec_label_pc_13094
  %v0_13140 = load i32, i32* %r7.global-to-local, align 4
  %v1_13140 = add i32 %v0_13140, 28
  %v2_13140 = inttoptr i32 %v1_13140 to i32*
  %v3_13140 = load i32, i32* %v2_13140, align 4
  store i32 %v3_13140, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v3_13148 = add i32 %v0_13140, 38
  %v4_13148 = inttoptr i32 %v3_13148 to i8*
  store i8 1, i8* %v4_13148, align 1
  %v0_1314c = load i32, i32* %r2.global-to-local, align 4
  %v3_1314c = mul i32 %v0_1314c, 4
  store i32 %v3_1314c, i32* @r2, align 4
  %v0_13150 = load i32, i32* %r7.global-to-local, align 4
  %v1_13150 = add i32 %v0_13150, 40
  store i32 %v1_13150, i32* @r0, align 4
  %v2_13154 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_13154, i32* @r1, align 4
  %v0_13158 = call i32 @memcpy()
  store i32 %v0_13158, i32* %r0.global-to-local, align 4
  %v0_1315c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1315c

dec_label_pc_1315c:                               ; preds = %dec_label_pc_13128, %dec_label_pc_13140
  %v2_13178 = phi i32 [ %v0_1315c.pre, %dec_label_pc_13140 ], [ %v0_13128, %dec_label_pc_13128 ]
  %v1_1315c = add i32 %v2_13178, 16
  %v2_1315c = inttoptr i32 %v1_1315c to i32*
  %v3_1315c = load i32, i32* %v2_1315c, align 4
  store i32 %v3_1315c, i32* %r3.global-to-local, align 4
  %v1_13160 = and i32 %v3_1315c, 128
  %v2_13160 = icmp eq i32 %v1_13160, 0
  br i1 %v2_13160, label %.thread50, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_1315c
  %v3_13164 = ptrtoint i32* %stack_var_-112 to i32
  store i32 %v3_13164, i32* %r3.global-to-local, align 4
  %v2_13168 = inttoptr i32 %v2_13178 to i32*
  %v3_13168 = load i32, i32* %v2_13168, align 4
  %v2_13170.pre = load i32, i32* %r6.global-to-local, align 4
  %v3_13170 = sub i32 %v2_13170.pre, %v3_13164
  store i32 %v3_13170, i32* %r3.global-to-local, align 4
  %v5_13174 = mul i32 %v3_13170, 4
  %v6_13174 = add i32 %v5_13174, %v3_13168
  store i32 %v6_13174, i32* @r2, align 4
  br label %bb160

.thread50:                                        ; preds = %dec_label_pc_1315c
  %v1_1316c45 = load i32, i32* %r6.global-to-local, align 4
  %v2_1316c46 = add i32 %v1_1316c45, 1
  store i32 %v2_1316c46, i32* %r3.global-to-local, align 4
  %v3_13178 = inttoptr i32 %v2_13178 to i32*
  store i32 %v2_1316c46, i32* %v3_13178, align 4
  %v0_1317c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %bb160

bb160:                                            ; preds = %.thread48, %.thread50
  %v1_13184 = phi i32 [ %v2_13178, %.thread48 ], [ %v0_1317c.pre, %.thread50 ]
  %v1_1317c = add i32 %v1_13184, 28
  %v2_1317c = inttoptr i32 %v1_1317c to i32*
  %v3_1317c = load i32, i32* %v2_1317c, align 4
  store i32 %v3_1317c, i32* %r3.global-to-local, align 4
  %v1_13180 = add i32 %v3_1317c, 2
  store i32 %v1_13180, i32* %r0.global-to-local, align 4
  %v0_13184 = load i32, i32* %fp.global-to-local, align 4
  %v2_13184 = add i32 %v1_13184, 24
  %v3_13184 = inttoptr i32 %v2_13184 to i32*
  store i32 %v0_13184, i32* %v3_13184, align 4
  br i1 %v2_13160, label %dec_label_pc_13194, label %bb161

bb161:                                            ; preds = %bb160
  %v1_13188 = load i32, i32* @r2, align 4
  %v2_13188 = load i32, i32* %r7.global-to-local, align 4
  %v3_13188 = inttoptr i32 %v2_13188 to i32*
  store i32 %v1_13188, i32* %v3_13188, align 4
  br label %dec_label_pc_13194

dec_label_pc_13190:                               ; preds = %dec_label_pc_13084, %dec_label_pc_12ca4, %dec_label_pc_12dec, %dec_label_pc_12e98, %dec_label_pc_12e70, %dec_label_pc_12e7c, %dec_label_pc_12db8, %dec_label_pc_130d0, %dec_label_pc_13050, %.thread24
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13194

dec_label_pc_13194:                               ; preds = %bb161, %bb160, %dec_label_pc_13190
  %v2_13198 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13198, i32* @r4, align 4
  store i32 %v6_12c60, i32* @r5, align 4
  store i32 %v27_12c60, i32* @lr, align 4
  %v1_1319c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_1319c

; uselistorder directives
  uselistorder i32 %v3_13170, { 1, 0 }
  uselistorder i32 %v1_1312c, { 1, 2, 0 }
  uselistorder i32 %v2_130c8, { 1, 0 }
  uselistorder i32 %v1_130c8, { 1, 0, 2 }
  uselistorder i32 %v0_130e8, { 3, 4, 5, 0, 7, 6, 9, 1, 2, 8 }
  uselistorder i32 %v9_130c0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_13084, { 1, 2, 0 }
  uselistorder i32 %v0_13074, { 1, 0 }
  uselistorder i32 %v1_13050, { 1, 0, 2 }
  uselistorder i32 %v1_12fc4, { 1, 2, 0 }
  uselistorder i32 %v1_12fac, { 1, 0 }
  uselistorder i32 %v2_12f94, { 2, 1, 0 }
  uselistorder i32 %v1_12f78, { 0, 2, 3, 1 }
  uselistorder i32 %v0_12f70, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_12f54, { 1, 0, 2 }
  uselistorder i32 %v2_12f3c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_12f30, { 2, 1, 0 }
  uselistorder i32 %v1_12ef0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_12ee0.pre, { 0, 2, 1 }
  uselistorder i32 %v2_12ebc, { 1, 0 }
  uselistorder i32 %v5_12e1c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12e1c, { 1, 0 }
  uselistorder i32 %v0_12e2076, { 1, 2, 3, 0, 4 }
  uselistorder i32 %stack_var_-44.2, { 1, 0 }
  uselistorder i32 %v2_12dc4, { 1, 0 }
  uselistorder i32 %v0_12de4, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_12da8, { 2, 3, 4, 6, 0, 1, 5, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_12d90, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 %v2_12d80, { 1, 0 }
  uselistorder i32 %v3_12d78, { 0, 2, 1 }
  uselistorder i8 %v2_12d78, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12df8, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v0_12d3c, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %stack_var_-44.1, { 1, 2, 3, 0 }
  uselistorder i32 %v1_12d28, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12d10, { 1, 0 }
  uselistorder i32 %v3_12d1c.pre-phi, { 0, 4, 1, 5, 2, 3 }
  uselistorder i32 %v1_12cc4, { 0, 2, 1 }
  uselistorder i32 %v2_12cb0, { 1, 0, 2 }
  uselistorder i32 %v0_12c64, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0 }
  uselistorder i32* %sl.global-to-local, { 0, 1, 4, 3, 2, 5 }
  uselistorder i32* %r7.global-to-local, { 1, 19, 0, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20 }
  uselistorder i32* %r6.global-to-local, { 15, 8, 9, 10, 13, 0, 1, 14, 2, 11, 3, 4, 5, 6, 12, 16, 7 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 60, 51, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 17, 46, 49, 50, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 15, 18, 19, 20 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 26, 27, 25, 17, 28, 18, 19, 20, 29, 21, 30, 31, 22, 23, 24 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 17, 18, 19, 22, 16, 20, 21, 24, 25, 23, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 4, 0, 5, 6, 7, 1, 2, 3, 8, 9 }
  uselistorder i32 ()* @_promoted_size, { 1, 0 }
  uselistorder i32 728, { 1, 2, 0 }
  uselistorder i32 -5, { 2, 1, 0 }
  uselistorder i32 -37028, { 0, 2, 1, 3 }
  uselistorder i8 46, { 3, 4, 2, 0, 5, 1, 6 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i8 36, { 1, 0 }
  uselistorder i8 37, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 2147483647, { 3, 4, 1, 6, 0, 2, 5 }
  uselistorder i32 140, { 2, 1, 4, 0, 5, 6, 7, 3 }
  uselistorder i32 -72, { 1, 0 }
  uselistorder label %dec_label_pc_13194, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13190, { 7, 0, 8, 9, 3, 5, 4, 2, 6, 1 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %dec_label_pc_1315c, { 1, 0 }
  uselistorder label %dec_label_pc_13128, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13120, { 0, 2, 1 }
  uselistorder label %dec_label_pc_130dc, { 1, 0 }
  uselistorder label %bb158, { 1, 0 }
  uselistorder label %dec_label_pc_13094, { 1, 0, 2 }
  uselistorder label %bb152, { 2, 1, 0 }
  uselistorder label %.thread24, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12ea8, { 1, 0 }
  uselistorder label %dec_label_pc_12e5c, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12dd8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12dd4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_12d74, { 1, 0 }
  uselistorder label %dec_label_pc_12d70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d74.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_12d14, { 1, 0 }
  uselistorder label %dec_label_pc_12ce8, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_131d0 = load i32, i32* @r4, align 4
  store i32 %v3_131d0, i32* %stack_var_-16, align 4
  %v6_131d0 = load i32, i32* @r5, align 4
  %v9_131d0 = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_131dc = call i32 @strlen(i8* %arg1)
  store i32 %v3_131dc, i32* @r6, align 4
  %v0_131e4 = load i32, i32* @r5, align 4
  %v0_131e8 = load i32, i32* @r4, align 4
  %v5_131f4 = inttoptr i32 %v0_131e4 to i16*
  %v6_131f4 = call i32 @__GI_fwrite_unlocked(i32 %v0_131e8, i32 1, i32 %v3_131dc, i16* %v5_131f4)
  %v1_131f8 = load i32, i32* @r6, align 4
  %v9_131f8 = icmp eq i32 %v6_131f4, %v1_131f8
  br i1 %v9_131f8, label %bb7, label %bb

bb:                                               ; preds = %entry
  br label %bb7

bb7:                                              ; preds = %entry, %bb
  %v1_13204 = phi i32 [ %v6_131f4, %entry ], [ -1, %bb ]
  %v2_13200 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13200, i32* @r4, align 4
  store i32 %v6_131d0, i32* @r5, align 4
  store i32 %v9_131d0, i32* @r6, align 4
  ret i32 %v1_13204

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i32 %arg2, i32 %arg3, i16* %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg4 to i32
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v9_13208 = load i32, i32* @r6, align 4
  %v12_13208 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v3_13210 = load i16, i16* %arg4, align 2
  %v1_13214 = and i16 %v3_13210, 192
  %v2_13218 = icmp eq i16 %v1_13214, 192
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg3, i32* @r6, align 4
  br i1 %v2_13218, label %dec_label_pc_13244, label %dec_label_pc_13230

dec_label_pc_13230:                               ; preds = %entry
  %v4_13238 = call i32 @__stdio_trans2w_o(i16* nonnull %arg4, i32 128)
  %v2_1323c = icmp eq i32 %v4_13238, 0
  br i1 %v2_1323c, label %dec_label_pc_13244thread-pre-split, label %dec_label_pc_132a4

dec_label_pc_13244thread-pre-split:               ; preds = %dec_label_pc_13230
  %v0_13244.pr = load i32, i32* @r4, align 4
  br label %dec_label_pc_13244

dec_label_pc_13244:                               ; preds = %dec_label_pc_13244thread-pre-split, %entry
  %v0_13268 = phi i32 [ %v0_13244.pr, %dec_label_pc_13244thread-pre-split ], [ %arg2, %entry ]
  %v2_13244 = icmp eq i32 %v0_13268, 0
  br i1 %v2_13244, label %dec_label_pc_132a4, label %bb

bb:                                               ; preds = %dec_label_pc_13244
  %v1_13248 = load i32, i32* @r6, align 4
  %v3_13248 = icmp eq i32 %v1_13248, 0
  br i1 %v3_13248, label %dec_label_pc_132a4, label %dec_label_pc_13250

dec_label_pc_13250:                               ; preds = %bb
  %v2_13258 = udiv i32 -1, %v0_13268
  %tmp9 = icmp ugt i32 %v1_13248, %v2_13258
  %v0_13284 = load i32, i32* @r5, align 4
  %v1_13284 = inttoptr i32 %v0_13284 to i16*
  br i1 %tmp9, label %dec_label_pc_13284, label %dec_label_pc_13264

dec_label_pc_13264:                               ; preds = %dec_label_pc_13250
  store i32 %v0_13284, i32* %r2.global-to-local, align 4
  %v2_13268 = mul i32 %v1_13248, %v0_13268
  %v0_1326c = load i32, i32* @r7, align 4
  %v5_13270 = call i32 @__stdio_fwrite(i32 %v0_1326c, i32 %v2_13268, i16* %v1_13284)
  %v0_13274 = load i32, i32* @r4, align 4
  %v2_13278 = udiv i32 %v5_13270, %v0_13274
  store i32 %v2_13278, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_132a8

dec_label_pc_13284:                               ; preds = %dec_label_pc_13250
  %v2_13284 = load i16, i16* %v1_13284, align 2
  %v1_13288 = or i16 %v2_13284, 8
  store i16 %v1_13288, i16* %v1_13284, align 2
  %v0_13290 = call i32 @__GI___errno_location()
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_1329c = inttoptr i32 %v0_13290 to i32*
  store i32 22, i32* %v2_1329c, align 4
  %v0_132a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_132a8

dec_label_pc_132a4:                               ; preds = %dec_label_pc_13244, %dec_label_pc_13230, %bb
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_132a8

dec_label_pc_132a8:                               ; preds = %dec_label_pc_13284, %dec_label_pc_13264, %dec_label_pc_132a4
  %v0_132a8 = phi i32 [ %v0_132a8.pre, %dec_label_pc_13284 ], [ %v2_13278, %dec_label_pc_13264 ], [ 0, %dec_label_pc_132a4 ]
  store i32 %v9_13208, i32* @r6, align 4
  store i32 %v12_13208, i32* @r7, align 4
  ret i32 %v0_132a8

; uselistorder directives
  uselistorder i16* %v1_13284, { 0, 2, 1 }
  uselistorder i32 %v1_13248, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 (i32, i32, i16*)* @__stdio_fwrite, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_132a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_132a4, { 2, 0, 1 }
}

define i32 @function_132b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_132b8:
  ret i32 %arg1
}

define i32 @memmove(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_132c0 = load i32, i32* @r0, align 4
  %v1_132c0 = load i32, i32* @r1, align 4
  %v2_132c0 = inttoptr i32 %v0_132c0 to i8*
  %v3_132c0 = call i32 @_memcpy(i8* %v2_132c0, i32 %v1_132c0)
  ret i32 %v3_132c0

; uselistorder directives
  uselistorder i32 (i8*, i32)* @_memcpy, { 0, 2, 1 }
}

define i32 @strnlen(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_132d0 = icmp eq i32 %arg2, 0
  br i1 %v2_132d0, label %bb, label %dec_label_pc_132e4

bb:                                               ; preds = %entry
  br label %bb25

dec_label_pc_132e4:                               ; preds = %entry
  %v2_132e4 = add i32 %tmp, %arg2
  %v3_132e4 = icmp ult i32 %v2_132e4, %tmp
  br i1 %v3_132e4, label %bb19, label %bb20

bb19:                                             ; preds = %dec_label_pc_132e4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_132e4, %bb19
  %v5_13384 = phi i32 [ %v2_132e4, %dec_label_pc_132e4 ], [ -1, %bb19 ]
  %v1_133044 = urem i32 %tmp, 4
  %v2_133045 = icmp eq i32 %v1_133044, 0
  br i1 %v2_133045, label %dec_label_pc_1330c, label %dec_label_pc_132f4

dec_label_pc_132f4:                               ; preds = %bb20, %dec_label_pc_13300
  %v0_13300 = phi i32 [ %v1_13300, %dec_label_pc_13300 ], [ %tmp, %bb20 ]
  %v1_132f4 = inttoptr i32 %v0_13300 to i8*
  %v2_132f4 = load i8, i8* %v1_132f4, align 1
  %v2_132f8 = icmp eq i8 %v2_132f4, 0
  br i1 %v2_132f8, label %dec_label_pc_13380, label %dec_label_pc_13300

dec_label_pc_13300:                               ; preds = %dec_label_pc_132f4
  %v1_13300 = add i32 %v0_13300, 1
  %v1_13304 = urem i32 %v1_13300, 4
  %v2_13304 = icmp eq i32 %v1_13304, 0
  br i1 %v2_13304, label %dec_label_pc_1330c, label %dec_label_pc_132f4

dec_label_pc_1330c:                               ; preds = %dec_label_pc_13300, %bb20
  %storemerge.lcssa = phi i32 [ %tmp, %bb20 ], [ %v1_13300, %dec_label_pc_13300 ]
  %v3_1337030 = icmp ult i32 %storemerge.lcssa, %v5_13384
  store i32 -2139062144, i32* @ip, align 4
  br i1 %v3_1337030, label %dec_label_pc_13314, label %dec_label_pc_13380

dec_label_pc_13314:                               ; preds = %dec_label_pc_1336c, %dec_label_pc_1330c
  %v0_1336437 = phi i32 [ %v4_13314, %dec_label_pc_1336c ], [ %storemerge.lcssa, %dec_label_pc_1330c ]
  %v1_13314 = inttoptr i32 %v0_1336437 to i32*
  %v2_13314 = load i32, i32* %v1_13314, align 4
  %v4_13314 = add i32 %v0_1336437, 4
  %v2_13318 = add i32 %v2_13314, -16843009
  %v2_1331c = and i32 %v2_13318, -2139062144
  store i32 %v2_1331c, i32* @ip, align 4
  %v2_13320 = icmp eq i32 %v2_1331c, 0
  br i1 %v2_13320, label %dec_label_pc_1336c, label %dec_label_pc_13328

dec_label_pc_13328:                               ; preds = %dec_label_pc_13314
  %v2_13328 = inttoptr i32 %v0_1336437 to i8*
  %v3_13328 = load i8, i8* %v2_13328, align 1
  %v2_1332c = icmp eq i8 %v3_13328, 0
  br i1 %v2_1332c, label %bb21, label %dec_label_pc_1333c

bb21:                                             ; preds = %dec_label_pc_13328
  br label %dec_label_pc_13380

dec_label_pc_1333c:                               ; preds = %dec_label_pc_13328
  %v1_1333c = add i32 %v0_1336437, 1
  %v2_1333c = inttoptr i32 %v1_1333c to i8*
  %v3_1333c = load i8, i8* %v2_1333c, align 1
  %v2_13340 = icmp eq i8 %v3_1333c, 0
  br i1 %v2_13340, label %dec_label_pc_13380, label %dec_label_pc_1334c

dec_label_pc_1334c:                               ; preds = %dec_label_pc_1333c
  %v1_1334c = add i32 %v0_1336437, 2
  %v2_1334c = inttoptr i32 %v1_1334c to i8*
  %v3_1334c = load i8, i8* %v2_1334c, align 1
  %v2_13350 = icmp eq i8 %v3_1334c, 0
  br i1 %v2_13350, label %dec_label_pc_13380, label %dec_label_pc_1335c

dec_label_pc_1335c:                               ; preds = %dec_label_pc_1334c
  %v1_1335c = add i32 %v0_1336437, 3
  %v2_1335c = inttoptr i32 %v1_1335c to i8*
  %v3_1335c = load i8, i8* %v2_1335c, align 1
  %v2_13360 = icmp eq i8 %v3_1335c, 0
  br i1 %v2_13360, label %dec_label_pc_13380, label %dec_label_pc_1336c

dec_label_pc_1336c:                               ; preds = %dec_label_pc_1335c, %dec_label_pc_13314
  %v3_13370 = icmp ult i32 %v4_13314, %v5_13384
  store i32 -2139062144, i32* @ip, align 4
  br i1 %v3_13370, label %dec_label_pc_13314, label %dec_label_pc_13380

dec_label_pc_13380:                               ; preds = %dec_label_pc_1336c, %dec_label_pc_1330c, %dec_label_pc_132f4, %dec_label_pc_1333c, %dec_label_pc_1334c, %dec_label_pc_1335c, %bb21
  %v1_13380 = phi i32 [ %v0_1336437, %bb21 ], [ %storemerge.lcssa, %dec_label_pc_1330c ], [ %v1_1333c, %dec_label_pc_1333c ], [ %v1_1334c, %dec_label_pc_1334c ], [ %v1_1335c, %dec_label_pc_1335c ], [ %v5_13384, %dec_label_pc_1336c ], [ %v0_13300, %dec_label_pc_132f4 ]
  %v3_13380 = icmp uge i32 %v5_13384, %v1_13380
  %v9_13380 = icmp eq i32 %v5_13384, %v1_13380
  %v2_13384 = xor i1 %v3_13380, true
  %v3_13384 = or i1 %v9_13380, %v2_13384
  br i1 %v3_13384, label %bb22, label %bb23

bb22:                                             ; preds = %dec_label_pc_13380
  %v6_13384 = sub i32 %v5_13384, %tmp
  br label %bb23

bb23:                                             ; preds = %dec_label_pc_13380, %bb22
  %v5_13388 = phi i32 [ %v1_13380, %dec_label_pc_13380 ], [ %v6_13384, %bb22 ]
  %v2_13388 = xor i1 %v9_13380, true
  %v3_13388 = and i1 %v3_13380, %v2_13388
  br i1 %v3_13388, label %bb24, label %bb25

bb24:                                             ; preds = %bb23
  %v6_13388 = sub i32 %v5_13388, %tmp
  br label %bb25

bb25:                                             ; preds = %bb, %bb23, %bb24
  %v1_13390 = phi i32 [ 0, %bb ], [ %v5_13388, %bb23 ], [ %v6_13388, %bb24 ]
  ret i32 %v1_13390

; uselistorder directives
  uselistorder i1 %v3_13380, { 1, 0 }
  uselistorder i32 %v4_13314, { 1, 0 }
  uselistorder i32 %v0_1336437, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_13300, { 1, 0, 2 }
  uselistorder i32 %v5_13384, { 3, 4, 5, 0, 2, 1 }
  uselistorder i32 %tmp, { 2, 1, 3, 5, 6, 0, 4 }
  uselistorder i32 -2139062144, { 2, 1, 0 }
  uselistorder label %bb25, { 2, 1, 0 }
  uselistorder label %bb23, { 1, 0 }
  uselistorder label %dec_label_pc_13380, { 0, 5, 4, 3, 6, 1, 2 }
  uselistorder label %dec_label_pc_132f4, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_133a4 = call i32 @__xpg_strerror_r()
  %v0_133a8 = load i32, i32* @r4, align 4
  ret i32 %v0_133a8
}

define i32 @__xpg_strerror_r() local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-25 = alloca i32, align 4
  %v3_133b4 = load i32, i32* @r4, align 4
  %v9_133b4 = load i32, i32* @r6, align 4
  %v0_133bc = load i32, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r6, align 4
  store i32 %v0_133bc, i32* @ip, align 4
  %v0_133cc = load i32, i32* @r1, align 4
  store i32 %v0_133cc, i32* @r7, align 4
  %v0_133d0 = load i32, i32* @r2, align 4
  store i32 %v0_133d0, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_133bc, 124
  br i1 %tmp, label %dec_label_pc_13408, label %dec_label_pc_133d8

dec_label_pc_133d8:                               ; preds = %entry
  br label %dec_label_pc_133f0

dec_label_pc_133e4:                               ; preds = %dec_label_pc_133f0
  br i1 %v2_133fc, label %bb, label %bb15

bb:                                               ; preds = %dec_label_pc_133e4
  %v2_133e8 = add i32 %v1_13400, -1
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_133e4, %bb
  %v0_133f01 = phi i32 [ %v1_13400, %dec_label_pc_133e4 ], [ %v2_133e8, %bb ]
  %v1_133ec = add i32 %v0_133ec, 1
  br label %dec_label_pc_133f0

dec_label_pc_133f0:                               ; preds = %dec_label_pc_133d8, %bb15
  %v1_13400 = phi i32 [ %v0_133bc, %dec_label_pc_133d8 ], [ %v0_133f01, %bb15 ]
  %v0_133ec = phi i32 [ add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -36980), %dec_label_pc_133d8 ], [ %v1_133ec, %bb15 ]
  store i32 %v0_133ec, i32* @r5, align 4
  %v2_133f0 = icmp eq i32 %v1_13400, 0
  %v1_133f4 = inttoptr i32 %v0_133ec to i8*
  %v2_133f4 = load i8, i8* %v1_133f4, align 1
  %v3_133f4 = zext i8 %v2_133f4 to i32
  store i32 %v3_133f4, i32* @r3, align 4
  %v2_133fc = icmp eq i8 %v2_133f4, 0
  br i1 %v2_133f0, label %dec_label_pc_133fc, label %dec_label_pc_133e4

dec_label_pc_133fc:                               ; preds = %dec_label_pc_133f0
  br i1 %v2_133fc, label %dec_label_pc_13408, label %bb16

bb16:                                             ; preds = %dec_label_pc_133fc
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13444

dec_label_pc_13408:                               ; preds = %dec_label_pc_133fc, %entry
  store i32 %v0_133bc, i32* @r2, align 4
  %v3_13410 = ashr i32 %v0_133bc, 31
  store i32 %v3_13410, i32* @r3, align 4
  %v6_13424 = bitcast i32* %stack_var_-25 to i8*
  %v7_13424 = call i32 @_uintmaxtostr(i8* %v6_13424)
  %v1_1342c = add i32 %v7_13424, -14
  store i32 %v1_1342c, i32* @r5, align 4
  %v0_13430 = load i32, i32* @r6, align 4
  %v2_13430 = add i32 %v0_13430, -36996
  store i32 %v2_13430, i32* @r1, align 4
  store i32 %v1_1342c, i32* @r0, align 4
  store i32 14, i32* @r2, align 4
  %v0_1343c = call i32 @memcpy()
  store i32 22, i32* %r6.global-to-local, align 4
  %v0_13444.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13444

dec_label_pc_13444:                               ; preds = %bb16, %dec_label_pc_13408
  %v0_13444 = phi i32 [ %v0_133ec, %bb16 ], [ %v0_13444.pre, %dec_label_pc_13408 ]
  %v1_13444 = inttoptr i32 %v0_13444 to i8*
  %v3_13448 = call i32 @strlen(i8* %v1_13444)
  %v0_1344c = load i32, i32* @r7, align 4
  %v2_1344c = icmp eq i32 %v0_1344c, 0
  br i1 %v2_1344c, label %bb17, label %dec_label_pc_13444._crit_edge

dec_label_pc_13444._crit_edge:                    ; preds = %dec_label_pc_13444
  %v1_13458.pre = load i32, i32* @r4, align 4
  br label %bb18

bb17:                                             ; preds = %dec_label_pc_13444
  store i32 0, i32* @r4, align 4
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_13444._crit_edge, %bb17
  %v1_13458 = phi i32 [ %v1_13458.pre, %dec_label_pc_13444._crit_edge ], [ 0, %bb17 ]
  %v1_13454 = add i32 %v3_13448, 1
  %v3_13458 = icmp uge i32 %v1_13454, %v1_13458
  %v9_13458 = icmp eq i32 %v1_13454, %v1_13458
  %v2_1345c = xor i1 %v3_13458, true
  %v3_1345c = or i1 %v9_13458, %v2_1345c
  br i1 %v3_1345c, label %bb19, label %bb20

bb19:                                             ; preds = %bb18
  store i32 %v1_13454, i32* @r4, align 4
  br label %bb20

bb20:                                             ; preds = %bb18, %bb19
  %v0_1346c = phi i32 [ %v1_13458, %bb18 ], [ %v1_13454, %bb19 ]
  %v2_13460 = xor i1 %v9_13458, true
  %v3_13460 = and i1 %v3_13458, %v2_13460
  br i1 %v3_13460, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 34, i32* %r6.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  %v2_13464 = icmp eq i32 %v0_1346c, 0
  br i1 %v2_13464, label %dec_label_pc_13488, label %dec_label_pc_1346c

dec_label_pc_1346c:                               ; preds = %bb22
  store i32 %v0_1346c, i32* @r2, align 4
  %v0_13470 = load i32, i32* @r5, align 4
  store i32 %v0_13470, i32* @r1, align 4
  store i32 %v0_1344c, i32* @r0, align 4
  %v0_13478 = call i32 @memcpy()
  %v0_1347c = load i32, i32* @r4, align 4
  %v1_1347c = load i32, i32* @r7, align 4
  %v2_1347c = add i32 %v1_1347c, %v0_1347c
  %v3_13484 = add i32 %v2_1347c, -1
  %v4_13484 = inttoptr i32 %v3_13484 to i8*
  store i8 0, i8* %v4_13484, align 1
  br label %dec_label_pc_13488

dec_label_pc_13488:                               ; preds = %bb22, %dec_label_pc_1346c
  %v0_13488 = load i32, i32* %r6.global-to-local, align 4
  %v2_13488 = icmp eq i32 %v0_13488, 0
  br i1 %v2_13488, label %dec_label_pc_13498, label %dec_label_pc_13490

dec_label_pc_13490:                               ; preds = %dec_label_pc_13488
  %v0_13490 = call i32 @__GI___errno_location()
  %v0_13494 = load i32, i32* %r6.global-to-local, align 4
  %v2_13494 = inttoptr i32 %v0_13490 to i32*
  store i32 %v0_13494, i32* %v2_13494, align 4
  %v0_13498.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13498

dec_label_pc_13498:                               ; preds = %dec_label_pc_13488, %dec_label_pc_13490
  %v0_13498 = phi i32 [ 0, %dec_label_pc_13488 ], [ %v0_13498.pre, %dec_label_pc_13490 ]
  store i32 %v3_133b4, i32* @r4, align 4
  store i32 %v9_133b4, i32* %r6.global-to-local, align 4
  ret i32 %v0_13498

; uselistorder directives
  uselistorder i1 %v3_13458, { 1, 0 }
  uselistorder i32 %v0_133ec, { 0, 2, 3, 1 }
  uselistorder i32 %v1_13400, { 1, 0, 2 }
  uselistorder i32 %v0_133bc, { 2, 1, 3, 0, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 5, 3, 4, 1, 2, 6 }
  uselistorder i32 14, { 3, 4, 7, 0, 9, 5, 8, 6, 1, 2 }
  uselistorder label %dec_label_pc_13498, { 1, 0 }
  uselistorder label %dec_label_pc_13488, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_13444, { 1, 0 }
  uselistorder label %dec_label_pc_133f0, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_134b4 = load i32, i32* @r4, align 4
  store i32 %v3_134b4, i32* %stack_var_-16, align 4
  %v9_134b4 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r6, align 4
  %v3_134bc = call i32 @strlen(i8* %arg1)
  %v1_134c0 = add i32 %v3_134bc, 1
  store i32 %v1_134c0, i32* @r4, align 4
  %v1_134c8 = call i32 @malloc(i32 %v1_134c0)
  store i32 %v1_134c8, i32* %r5.global-to-local, align 4
  %v2_134cc = icmp eq i32 %v1_134c8, 0
  br i1 %v2_134cc, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v1_134d8 = xor i1 %v2_134cc, true
  call void @__pseudo_cond_branch(i1 %v1_134d8, i32 ptrtoint (i32* @global_var_acb0.198 to i32))
  %v0_134dc = load i32, i32* %r5.global-to-local, align 4
  %v2_134e0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_134e0, i32* @r4, align 4
  store i32 %v9_134b4, i32* @r6, align 4
  ret i32 %v0_134dc

; uselistorder directives
  uselistorder i32 (i32)* @malloc, { 11, 10, 9, 3, 2, 8, 7, 6, 12, 5, 4, 13, 16, 1, 15, 14, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__encode_header(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_134ec = load i32, i32* @lr, align 4
  store i32 %v0_134ec, i32* %stack_var_-4, align 4
  store i32 %tmp, i32* %ip.global-to-local, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v7_134f8 = icmp sgt i32 %arg3, 11
  br i1 %v7_134f8, label %dec_label_pc_13500, label %dec_label_pc_135cc

dec_label_pc_13500:                               ; preds = %entry
  %tmp16 = inttoptr i32 %arg2 to i8*
  %v1_13500 = add i32 %tmp, 1
  %v2_13500 = inttoptr i32 %v1_13500 to i8*
  %v3_13500 = load i8, i8* %v2_13500, align 1
  store i8 %v3_13500, i8* %tmp16, align 1
  %v0_13508 = load i32, i32* %ip.global-to-local, align 4
  %v1_13508 = inttoptr i32 %v0_13508 to i32*
  %v2_13508 = load i32, i32* %v1_13508, align 4
  %v1_1350c = trunc i32 %v2_13508 to i8
  %v4_1350c = add i32 %arg2, 1
  %v5_1350c = inttoptr i32 %v4_1350c to i8*
  store i8 %v1_1350c, i8* %v5_1350c, align 1
  %v0_13510 = load i32, i32* %ip.global-to-local, align 4
  %v1_13510 = add i32 %v0_13510, 8
  %v2_13510 = inttoptr i32 %v1_13510 to i32*
  %v3_13510 = load i32, i32* %v2_13510, align 4
  %v1_13514 = add i32 %v0_13510, 20
  %v2_13514 = inttoptr i32 %v1_13514 to i32*
  %v3_13514 = load i32, i32* %v2_13514, align 4
  %v1_13518 = add i32 %v0_13510, 4
  %v2_13518 = inttoptr i32 %v1_13518 to i32*
  %v3_13518 = load i32, i32* %v2_13518, align 4
  %v1_1351c = add i32 %v0_13510, 12
  %v2_1351c = inttoptr i32 %v1_1351c to i32*
  %v3_1351c = load i32, i32* %v2_1351c, align 4
  %v2_13520 = icmp eq i32 %v3_13514, 0
  br i1 %v2_13520, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_13500
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_13500, %bb
  %v0_13530 = phi i32 [ 0, %dec_label_pc_13500 ], [ 1, %bb ]
  %v1_13528 = urem i32 %v3_13510, 16
  %v2_1352c = icmp eq i32 %v3_13518, 0
  %v4_13530 = mul nuw nsw i32 %v1_13528, 8
  %v5_13530 = or i32 %v0_13530, %v4_13530
  %v1_13534 = add i32 %v0_13510, 16
  %v2_13534 = inttoptr i32 %v1_13534 to i32*
  %v3_13534 = load i32, i32* %v2_13534, align 4
  %. = select i1 %v2_1352c, i32 0, i32 128
  %v2_13540 = icmp eq i32 %v3_1351c, 0
  %storemerge11 = select i1 %v2_13540, i32 0, i32 4
  %v2_1354c = or i32 %v5_13530, %.
  %v2_13550 = icmp eq i32 %v3_13534, 0
  %.26 = select i1 %v2_13550, i32 0, i32 2
  %v2_1355c = or i32 %v2_1354c, %storemerge11
  %v2_13560 = or i32 %v2_1355c, %.26
  %v1_13564 = trunc i32 %v2_13560 to i8
  %v2_13564 = load i32, i32* %lr.global-to-local, align 4
  %v3_13564 = add i32 %v2_13564, 2
  %v4_13564 = inttoptr i32 %v3_13564 to i8*
  store i8 %v1_13564, i8* %v4_13564, align 1
  %v0_13568 = load i32, i32* %ip.global-to-local, align 4
  %v1_13568 = add i32 %v0_13568, 24
  %v1_1356c = inttoptr i32 %v1_13568 to i32*
  %v2_1356c = load i32, i32* %v1_1356c, align 4
  %v3_1356c = add i32 %v0_13568, 28
  %v4_1356c = inttoptr i32 %v3_1356c to i32*
  %v5_1356c = load i32, i32* %v4_1356c, align 4
  %v2_13570 = icmp eq i32 %v2_1356c, 0
  %v1_13574 = urem i32 %v5_1356c, 16
  %v0_13580 = select i1 %v2_13570, i32 0, i32 128
  %v2_13580 = or i32 %v1_13574, %v0_13580
  %v1_13584 = trunc i32 %v2_13580 to i8
  %v2_13584 = load i32, i32* %lr.global-to-local, align 4
  %v3_13584 = add i32 %v2_13584, 3
  %v4_13584 = inttoptr i32 %v3_13584 to i8*
  store i8 %v1_13584, i8* %v4_13584, align 1
  %v0_13588 = load i32, i32* %ip.global-to-local, align 4
  %v1_13588 = add i32 %v0_13588, 33
  %v2_13588 = inttoptr i32 %v1_13588 to i8*
  %v3_13588 = load i8, i8* %v2_13588, align 1
  %v2_1358c = load i32, i32* %lr.global-to-local, align 4
  %v3_1358c = add i32 %v2_1358c, 4
  %v4_1358c = inttoptr i32 %v3_1358c to i8*
  store i8 %v3_13588, i8* %v4_1358c, align 1
  %v0_13590 = load i32, i32* %ip.global-to-local, align 4
  %v1_13590 = add i32 %v0_13590, 32
  %v2_13590 = inttoptr i32 %v1_13590 to i32*
  %v3_13590 = load i32, i32* %v2_13590, align 4
  %v1_13594 = trunc i32 %v3_13590 to i8
  %v2_13594 = load i32, i32* %lr.global-to-local, align 4
  %v3_13594 = add i32 %v2_13594, 5
  %v4_13594 = inttoptr i32 %v3_13594 to i8*
  store i8 %v1_13594, i8* %v4_13594, align 1
  %v0_13598 = load i32, i32* %ip.global-to-local, align 4
  %v1_13598 = add i32 %v0_13598, 37
  %v2_13598 = inttoptr i32 %v1_13598 to i8*
  %v3_13598 = load i8, i8* %v2_13598, align 1
  %v2_1359c = load i32, i32* %lr.global-to-local, align 4
  %v3_1359c = add i32 %v2_1359c, 6
  %v4_1359c = inttoptr i32 %v3_1359c to i8*
  store i8 %v3_13598, i8* %v4_1359c, align 1
  %v0_135a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_135a0 = add i32 %v0_135a0, 36
  %v2_135a0 = inttoptr i32 %v1_135a0 to i32*
  %v3_135a0 = load i32, i32* %v2_135a0, align 4
  %v1_135a4 = trunc i32 %v3_135a0 to i8
  %v2_135a4 = load i32, i32* %lr.global-to-local, align 4
  %v3_135a4 = add i32 %v2_135a4, 7
  %v4_135a4 = inttoptr i32 %v3_135a4 to i8*
  store i8 %v1_135a4, i8* %v4_135a4, align 1
  %v0_135a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_135a8 = add i32 %v0_135a8, 41
  %v2_135a8 = inttoptr i32 %v1_135a8 to i8*
  %v3_135a8 = load i8, i8* %v2_135a8, align 1
  %v2_135ac = load i32, i32* %lr.global-to-local, align 4
  %v3_135ac = add i32 %v2_135ac, 8
  %v4_135ac = inttoptr i32 %v3_135ac to i8*
  store i8 %v3_135a8, i8* %v4_135ac, align 1
  %v0_135b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_135b0 = add i32 %v0_135b0, 40
  %v2_135b0 = inttoptr i32 %v1_135b0 to i32*
  %v3_135b0 = load i32, i32* %v2_135b0, align 4
  %v1_135b4 = trunc i32 %v3_135b0 to i8
  %v2_135b4 = load i32, i32* %lr.global-to-local, align 4
  %v3_135b4 = add i32 %v2_135b4, 9
  %v4_135b4 = inttoptr i32 %v3_135b4 to i8*
  store i8 %v1_135b4, i8* %v4_135b4, align 1
  %v0_135b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_135b8 = add i32 %v0_135b8, 45
  %v2_135b8 = inttoptr i32 %v1_135b8 to i8*
  %v3_135b8 = load i8, i8* %v2_135b8, align 1
  %v2_135bc = load i32, i32* %lr.global-to-local, align 4
  %v3_135bc = add i32 %v2_135bc, 10
  %v4_135bc = inttoptr i32 %v3_135bc to i8*
  store i8 %v3_135b8, i8* %v4_135bc, align 1
  %v0_135c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_135c0 = add i32 %v0_135c0, 44
  %v2_135c0 = inttoptr i32 %v1_135c0 to i32*
  %v3_135c0 = load i32, i32* %v2_135c0, align 4
  %v1_135c4 = trunc i32 %v3_135c0 to i8
  %v2_135c4 = load i32, i32* %lr.global-to-local, align 4
  %v3_135c4 = add i32 %v2_135c4, 11
  %v4_135c4 = inttoptr i32 %v3_135c4 to i8*
  store i8 %v1_135c4, i8* %v4_135c4, align 1
  %v2_135cc.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_135cc

dec_label_pc_135cc:                               ; preds = %entry, %bb17
  %v2_135cc = phi i32 [ %v2_135cc.pre, %bb17 ], [ %v0_134ec, %entry ]
  %storemerge = phi i32 [ 12, %bb17 ], [ -1, %entry ]
  store i32 %v2_135cc, i32* @lr, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_13510, { 0, 2, 1, 3, 4 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 37, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_135cc, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__decode_header(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_135d4 = load i8, i8* %arg1, align 1
  %v4_135d4 = zext i8 %v3_135d4 to i32
  %v2_135d8 = add i32 %tmp, 1
  %v3_135d8 = inttoptr i32 %v2_135d8 to i8*
  %v4_135d8 = load i8, i8* %v3_135d8, align 1
  %v5_135d8 = zext i8 %v4_135d8 to i32
  %v4_135dc = mul nuw nsw i32 %v4_135d4, 256
  %v5_135dc = or i32 %v5_135d8, %v4_135dc
  %v2_135e0 = inttoptr i32 %arg2 to i32*
  store i32 %v5_135dc, i32* %v2_135e0, align 4
  %v2_135e4 = add i32 %tmp, 2
  %v3_135e4 = inttoptr i32 %v2_135e4 to i8*
  %v4_135e4 = load i8, i8* %v3_135e4, align 1
  %tmp3 = icmp slt i8 %v4_135e4, 0
  %v3_135e8 = zext i1 %tmp3 to i32
  %v2_135ec = add i32 %arg2, 4
  %v3_135ec = inttoptr i32 %v2_135ec to i32*
  store i32 %v3_135e8, i32* %v3_135ec, align 4
  %v4_135f0 = load i8, i8* %v3_135e4, align 1
  %div = udiv i8 %v4_135f0, 8
  %tmp4 = urem i8 %div, 16
  %v1_135f8 = zext i8 %tmp4 to i32
  %v2_135fc = add i32 %arg2, 8
  %v3_135fc = inttoptr i32 %v2_135fc to i32*
  store i32 %v1_135f8, i32* %v3_135fc, align 4
  %v4_13600 = load i8, i8* %v3_135e4, align 1
  %div1 = udiv i8 %v4_13600, 4
  %tmp5 = urem i8 %div1, 2
  %v1_13608 = zext i8 %tmp5 to i32
  %v2_1360c = add i32 %arg2, 12
  %v3_1360c = inttoptr i32 %v2_1360c to i32*
  store i32 %v1_13608, i32* %v3_1360c, align 4
  %v4_13610 = load i8, i8* %v3_135e4, align 1
  %div2 = udiv i8 %v4_13610, 2
  %tmp6 = urem i8 %div2, 2
  %v1_13618 = zext i8 %tmp6 to i32
  %v2_1361c = add i32 %arg2, 16
  %v3_1361c = inttoptr i32 %v2_1361c to i32*
  store i32 %v1_13618, i32* %v3_1361c, align 4
  %v4_13620 = load i8, i8* %v3_135e4, align 1
  %tmp7 = urem i8 %v4_13620, 2
  %v1_13624 = zext i8 %tmp7 to i32
  %v2_13628 = add i32 %arg2, 20
  %v3_13628 = inttoptr i32 %v2_13628 to i32*
  store i32 %v1_13624, i32* %v3_13628, align 4
  %v2_1362c = add i32 %tmp, 3
  %v3_1362c = inttoptr i32 %v2_1362c to i8*
  %v4_1362c = load i8, i8* %v3_1362c, align 1
  %tmp8 = icmp slt i8 %v4_1362c, 0
  %v3_13630 = zext i1 %tmp8 to i32
  %v2_13634 = add i32 %arg2, 24
  %v3_13634 = inttoptr i32 %v2_13634 to i32*
  store i32 %v3_13630, i32* %v3_13634, align 4
  %v4_13638 = load i8, i8* %v3_1362c, align 1
  %tmp9 = urem i8 %v4_13638, 16
  %v1_1363c = zext i8 %tmp9 to i32
  %v2_13640 = add i32 %arg2, 28
  %v3_13640 = inttoptr i32 %v2_13640 to i32*
  store i32 %v1_1363c, i32* %v3_13640, align 4
  %v2_13644 = add i32 %tmp, 4
  %v3_13644 = inttoptr i32 %v2_13644 to i8*
  %v4_13644 = load i8, i8* %v3_13644, align 1
  %v5_13644 = zext i8 %v4_13644 to i32
  %v2_13648 = add i32 %tmp, 5
  %v3_13648 = inttoptr i32 %v2_13648 to i8*
  %v4_13648 = load i8, i8* %v3_13648, align 1
  %v5_13648 = zext i8 %v4_13648 to i32
  %v4_1364c = mul nuw nsw i32 %v5_13644, 256
  %v5_1364c = or i32 %v5_13648, %v4_1364c
  %v2_13650 = add i32 %arg2, 32
  %v3_13650 = inttoptr i32 %v2_13650 to i32*
  store i32 %v5_1364c, i32* %v3_13650, align 4
  %v2_13654 = add i32 %tmp, 6
  %v3_13654 = inttoptr i32 %v2_13654 to i8*
  %v4_13654 = load i8, i8* %v3_13654, align 1
  %v5_13654 = zext i8 %v4_13654 to i32
  %v2_13658 = add i32 %tmp, 7
  %v3_13658 = inttoptr i32 %v2_13658 to i8*
  %v4_13658 = load i8, i8* %v3_13658, align 1
  %v5_13658 = zext i8 %v4_13658 to i32
  %v4_1365c = mul nuw nsw i32 %v5_13654, 256
  %v5_1365c = or i32 %v5_13658, %v4_1365c
  %v2_13660 = add i32 %arg2, 36
  %v3_13660 = inttoptr i32 %v2_13660 to i32*
  store i32 %v5_1365c, i32* %v3_13660, align 4
  %v2_13664 = add i32 %tmp, 8
  %v3_13664 = inttoptr i32 %v2_13664 to i8*
  %v4_13664 = load i8, i8* %v3_13664, align 1
  %v5_13664 = zext i8 %v4_13664 to i32
  %v2_13668 = add i32 %tmp, 9
  %v3_13668 = inttoptr i32 %v2_13668 to i8*
  %v4_13668 = load i8, i8* %v3_13668, align 1
  %v5_13668 = zext i8 %v4_13668 to i32
  %v4_1366c = mul nuw nsw i32 %v5_13664, 256
  %v5_1366c = or i32 %v5_13668, %v4_1366c
  %v2_13670 = add i32 %arg2, 40
  %v3_13670 = inttoptr i32 %v2_13670 to i32*
  store i32 %v5_1366c, i32* %v3_13670, align 4
  %v2_13674 = add i32 %tmp, 11
  %v3_13674 = inttoptr i32 %v2_13674 to i8*
  %v4_13674 = load i8, i8* %v3_13674, align 1
  %v5_13674 = zext i8 %v4_13674 to i32
  %v2_13678 = add i32 %tmp, 10
  %v3_13678 = inttoptr i32 %v2_13678 to i8*
  %v4_13678 = load i8, i8* %v3_13678, align 1
  %v5_13678 = zext i8 %v4_13678 to i32
  %v4_1367c = mul nuw nsw i32 %v5_13678, 256
  %v5_1367c = or i32 %v4_1367c, %v5_13674
  %v2_13680 = add i32 %arg2, 44
  %v3_13680 = inttoptr i32 %v2_13680 to i32*
  store i32 %v5_1367c, i32* %v3_13680, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 11, { 16, 17, 4, 9, 1, 2, 3, 10, 11, 12, 13, 14, 15, 0, 5, 18, 6, 7, 8, 19 }
  uselistorder i32 7, { 11, 12, 7, 8, 9, 0, 10, 1, 2, 5, 6, 4, 3, 13 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg2, { 3, 0, 8, 1, 6, 2, 10, 11, 7, 9, 4, 5 }
}

define i32 @__encode_question(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13688 = load i32, i32* @r4, align 4
  store i32 %v3_13688, i32* %stack_var_-16, align 4
  %v9_13688 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_13690 = load i32, i32* %arg1, align 4
  store i32 %v2_13690, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  %v1_1369c = inttoptr i32 %v2_13690 to i8*
  %v2_1369c = call i32 @__encode_dotted(i8* %v1_1369c)
  store i32 %v2_1369c, i32* %r0.global-to-local, align 4
  %v1_136a0 = icmp slt i32 %v2_1369c, 0
  br i1 %v1_136a0, label %dec_label_pc_136e0, label %dec_label_pc_136a8

dec_label_pc_136a8:                               ; preds = %entry
  %v1_136a8 = load i32, i32* @r5, align 4
  %v2_136a8 = sub i32 %v1_136a8, %v2_1369c
  %v7_136b0 = icmp slt i32 %v2_136a8, 4
  br i1 %v7_136b0, label %bb, label %dec_label_pc_136b8

bb:                                               ; preds = %dec_label_pc_136a8
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_136e0

dec_label_pc_136b8:                               ; preds = %dec_label_pc_136a8
  %v0_136b8 = load i32, i32* @r4, align 4
  %v1_136b8 = add i32 %v0_136b8, 5
  %v2_136b8 = inttoptr i32 %v1_136b8 to i8*
  %v3_136b8 = load i8, i8* %v2_136b8, align 1
  %v2_136bc = load i32, i32* @r6, align 4
  %v4_136bc = add i32 %v2_136bc, %v2_1369c
  %v5_136bc = inttoptr i32 %v4_136bc to i8*
  store i8 %v3_136b8, i8* %v5_136bc, align 1
  %v0_136c0 = load i32, i32* @r4, align 4
  %v1_136c0 = add i32 %v0_136c0, 4
  %v2_136c0 = inttoptr i32 %v1_136c0 to i32*
  %v3_136c0 = load i32, i32* %v2_136c0, align 4
  %v0_136c4 = load i32, i32* @r6, align 4
  %v1_136c4 = load i32, i32* %r0.global-to-local, align 4
  %v2_136c4 = add i32 %v1_136c4, %v0_136c4
  store i32 %v2_136c4, i32* %r2.global-to-local, align 4
  %v1_136c8 = trunc i32 %v3_136c0 to i8
  %v3_136c8 = add i32 %v2_136c4, 1
  %v4_136c8 = inttoptr i32 %v3_136c8 to i8*
  store i8 %v1_136c8, i8* %v4_136c8, align 1
  %v0_136cc = load i32, i32* @r4, align 4
  %v1_136cc = add i32 %v0_136cc, 9
  %v2_136cc = inttoptr i32 %v1_136cc to i8*
  %v3_136cc = load i8, i8* %v2_136cc, align 1
  %v2_136d0 = load i32, i32* %r2.global-to-local, align 4
  %v3_136d0 = add i32 %v2_136d0, 2
  %v4_136d0 = inttoptr i32 %v3_136d0 to i8*
  store i8 %v3_136cc, i8* %v4_136d0, align 1
  %v0_136d4 = load i32, i32* @r4, align 4
  %v1_136d4 = add i32 %v0_136d4, 8
  %v2_136d4 = inttoptr i32 %v1_136d4 to i32*
  %v3_136d4 = load i32, i32* %v2_136d4, align 4
  %v1_136d8 = trunc i32 %v3_136d4 to i8
  %v2_136d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_136d8 = add i32 %v2_136d8, 3
  %v4_136d8 = inttoptr i32 %v3_136d8 to i8*
  store i8 %v1_136d8, i8* %v4_136d8, align 1
  %v0_136dc = load i32, i32* %r0.global-to-local, align 4
  %v1_136dc = add i32 %v0_136dc, 4
  store i32 %v1_136dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_136e0

dec_label_pc_136e0:                               ; preds = %bb, %entry, %dec_label_pc_136b8
  %v1_136e4 = phi i32 [ -1, %bb ], [ %v2_1369c, %entry ], [ %v1_136dc, %dec_label_pc_136b8 ]
  %v2_136e0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_136e0, i32* @r4, align 4
  store i32 %v9_13688, i32* @r6, align 4
  ret i32 %v1_136e4

; uselistorder directives
  uselistorder i32 %v2_1369c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 5, 2, 6, 3, 0 }
  uselistorder i32 5, { 19, 20, 21, 4, 13, 5, 1, 14, 15, 6, 16, 0, 7, 22, 8, 2, 17, 9, 18, 11, 10, 3, 23, 12 }
  uselistorder label %dec_label_pc_136e0, { 2, 0, 1 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34072), i32* @r0, align 4
  %v1_13700 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34072))
  ret i32 %v1_13700

; uselistorder directives
  uselistorder i32 (i32)* @__GI_config_open, { 0, 2, 1 }
}

define i32 @__read_etc_hosts_r() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v3_13718 = load i32, i32* @r4, align 4
  %v6_13718 = load i32, i32* @r5, align 4
  %v9_13718 = load i32, i32* @r6, align 4
  %v12_13718 = load i32, i32* @r7, align 4
  %v15_13718 = load i32, i32* @r8, align 4
  %v18_13718 = load i32, i32* @sb, align 4
  %v21_13718 = load i32, i32* @sl, align 4
  %v24_13718 = load i32, i32* @fp, align 4
  store i32 %tmp10, i32* @r5, align 4
  store i32 %tmp9, i32* @lr, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 -1, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* @r4, align 4
  %v2_13740 = inttoptr i32 %tmp9 to i32*
  store i32 -1, i32* %v2_13740, align 4
  %v0_13744 = load i32, i32* @r0, align 4
  store i32 %v0_13744, i32* @r6, align 4
  %v0_13748 = load i32, i32* @r1, align 4
  %v0_1374c = load i32, i32* @r2, align 4
  store i32 %v0_1374c, i32* @r8, align 4
  %v0_13750 = load i32, i32* @r3, align 4
  store i32 %v0_13750, i32* @fp, align 4
  %v3_13754 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_13754, i32* @r7, align 4
  %tmp = icmp ult i32 %tmp10, 129
  br i1 %tmp, label %.thread, label %dec_label_pc_13760

.thread:                                          ; preds = %entry
  store i32 34, i32* @sb, align 4
  br label %dec_label_pc_13900

dec_label_pc_13760:                               ; preds = %entry
  %v2_13760 = icmp eq i32 %v0_13744, 0
  br i1 %v2_13760, label %dec_label_pc_13768, label %dec_label_pc_13788

dec_label_pc_13768:                               ; preds = %dec_label_pc_13760
  %v0_13768 = call i32 @__open_etc_hosts()
  store i32 %v0_13768, i32* @r6, align 4
  %v2_1376c = icmp eq i32 %v0_13768, 0
  br i1 %v2_1376c, label %dec_label_pc_13774, label %dec_label_pc_13788

dec_label_pc_13774:                               ; preds = %dec_label_pc_13768
  store i32 %tmp7, i32* %r2.global-to-local, align 4
  %v2_13778 = inttoptr i32 %tmp7 to i32*
  store i32 0, i32* %v2_13778, align 4
  %v0_1377c = call i32 @__GI___errno_location()
  %v1_13780 = inttoptr i32 %v0_1377c to i32*
  %v2_13780 = load i32, i32* %v1_13780, align 4
  store i32 %v2_13780, i32* @sb, align 4
  br label %dec_label_pc_13900

dec_label_pc_13788:                               ; preds = %dec_label_pc_13768, %dec_label_pc_13760
  %v1_137a8 = phi i32 [ %v0_13768, %dec_label_pc_13768 ], [ %v0_13744, %dec_label_pc_13760 ]
  %v0_1378c = load i32, i32* @r4, align 4
  %v2_1378c = add i32 %v0_1378c, -34060
  store i32 %v2_1378c, i32* @r4, align 4
  %v2_13790 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %tmp6, i32* %ip.global-to-local, align 4
  store i32 %tmp6, i32* @lr, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_137a8 = add i32 %v1_137a8, 8
  %v3_137a8 = inttoptr i32 %v2_137a8 to i32*
  store i32 48, i32* %v3_137a8, align 4
  store i32 %tmp9, i32* %r3.global-to-local, align 4
  %v0_137b0 = load i32, i32* @r5, align 4
  %v1_137b0 = add i32 %v0_137b0, -48
  store i32 %v1_137b0, i32* %r1.global-to-local, align 4
  %v0_137b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_137b4 = add i32 %v0_137b4, 24
  store i32 %v1_137b4, i32* @ip, align 4
  %v0_137b8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_137b8, i32* @sb, align 4
  %v0_137bc = load i32, i32* @lr, align 4
  %v1_137bc = add i32 %v0_137bc, 32
  store i32 %v1_137bc, i32* @sl, align 4
  %v1_137c0 = load i32, i32* @r6, align 4
  %v2_137c0 = add i32 %v1_137c0, 16
  %v3_137c0 = inttoptr i32 %v2_137c0 to i32*
  store i32 %v1_137b0, i32* %v3_137c0, align 4
  %v0_137c4 = load i32, i32* @r4, align 4
  %v0_137c8 = load i32, i32* @ip, align 4
  store i32 %v0_137c8, i32* %stack_var_-64, align 4
  %v0_137cc = load i32, i32* %r2.global-to-local, align 4
  %v1_137cc = load i32, i32* %r3.global-to-local, align 4
  %v2_137cc = inttoptr i32 %v1_137cc to i32*
  store i32 %v0_137cc, i32* %v2_137cc, align 4
  %v0_137d0 = load i32, i32* @lr, align 4
  %v1_137d0 = load i32, i32* @r6, align 4
  %v2_137d0 = add i32 %v1_137d0, 4
  %v3_137d0 = inttoptr i32 %v2_137d0 to i32*
  store i32 %v0_137d0, i32* %v3_137d0, align 4
  %v2_13800 = inttoptr i32 %v0_13748 to i8*
  br label %dec_label_pc_138d4

dec_label_pc_137d8:                               ; preds = %dec_label_pc_138d4
  %v3_137d8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_137d8, i32* %r1.global-to-local, align 4
  %v0_137dc = load i32, i32* @fp, align 4
  %v7_137dc = icmp eq i32 %v0_137dc, 1
  %v1_137e0 = add i32 %v3_137d8, 4
  store i32 %v1_137e0, i32* @r5, align 4
  %v1_137e4 = load i32, i32* @r7, align 4
  %v2_137e4 = add i32 %v1_137e4, 4
  %v3_137e4 = inttoptr i32 %v2_137e4 to i32*
  store i32 %v1_137e0, i32* %v3_137e4, align 4
  br i1 %v7_137dc, label %dec_label_pc_13900, label %dec_label_pc_137ec

dec_label_pc_137ec:                               ; preds = %dec_label_pc_137d8
  %v0_137ec = load i32, i32* @fp, align 4
  %v7_137ec = icmp eq i32 %v0_137ec, 2
  br i1 %v7_137ec, label %dec_label_pc_137f8, label %dec_label_pc_1381c.preheader

dec_label_pc_1381c.preheader:                     ; preds = %dec_label_pc_137ec
  %v1_137f0 = load i32, i32* @r5, align 4
  %v1_1381c25 = inttoptr i32 %v1_137f0 to i32*
  %v2_1381c26 = load i32, i32* %v1_1381c25, align 4
  store i32 %v2_1381c26, i32* %r3.global-to-local, align 4
  store i32 %v2_1381c26, i32* %r1.global-to-local, align 4
  %v2_1382028 = icmp eq i32 %v2_1381c26, 0
  %v1_1382829 = add i32 %v1_137f0, 4
  store i32 %v1_1382829, i32* @r4, align 4
  br i1 %v2_1382028, label %dec_label_pc_138d4, label %dec_label_pc_13810

dec_label_pc_137f8:                               ; preds = %dec_label_pc_137ec
  %v0_137f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_137f8 = inttoptr i32 %v0_137f8 to i32*
  %v2_137f8 = load i32, i32* %v1_137f8, align 4
  store i32 %v2_137f8, i32* @r1, align 4
  %v3_13800 = call i32 @__GI_strcoll(i8* %v2_13800, i32 %v2_137f8)
  %v2_13804 = icmp eq i32 %v3_13800, 0
  br i1 %v2_13804, label %dec_label_pc_13834, label %dec_label_pc_138d4

dec_label_pc_13810:                               ; preds = %dec_label_pc_1381c.preheader, %dec_label_pc_13810.dec_label_pc_1381c_crit_edge
  %v2_1381c30 = phi i32 [ %v2_1381c, %dec_label_pc_13810.dec_label_pc_1381c_crit_edge ], [ %v2_1381c26, %dec_label_pc_1381c.preheader ]
  %v3_13810 = call i32 @__GI_strcasecmp(i8* %v2_13800, i32 %v2_1381c30)
  %v2_13814 = icmp eq i32 %v3_13810, 0
  br i1 %v2_13814, label %dec_label_pc_13834, label %dec_label_pc_13810.dec_label_pc_1381c_crit_edge

dec_label_pc_13810.dec_label_pc_1381c_crit_edge:  ; preds = %dec_label_pc_13810
  %v0_1381c.pre = load i32, i32* @r4, align 4
  %v1_1381c = inttoptr i32 %v0_1381c.pre to i32*
  %v2_1381c = load i32, i32* %v1_1381c, align 4
  store i32 %v2_1381c, i32* %r3.global-to-local, align 4
  store i32 %v2_1381c, i32* %r1.global-to-local, align 4
  %v2_13820 = icmp eq i32 %v2_1381c, 0
  %v1_13828 = add i32 %v0_1381c.pre, 4
  store i32 %v1_13828, i32* @r4, align 4
  br i1 %v2_13820, label %dec_label_pc_138d4, label %dec_label_pc_13810

dec_label_pc_13834:                               ; preds = %dec_label_pc_13810, %dec_label_pc_137f8
  %v0_13834 = load i32, i32* @r5, align 4
  %v1_13834 = inttoptr i32 %v0_13834 to i32*
  %v2_13834 = load i32, i32* %v1_13834, align 4
  store i32 %v2_13834, i32* %r3.global-to-local, align 4
  %v4_13834 = add i32 %v0_13834, 4
  store i32 %v4_13834, i32* @r5, align 4
  %v2_13838 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_13838, i32* @ip, align 4
  store i32 0, i32* @lr, align 4
  %v1_13840 = load i32, i32* @r7, align 4
  %v2_13840 = inttoptr i32 %v1_13840 to i32*
  store i32 %v2_13834, i32* %v2_13840, align 4
  %v0_13844 = load i32, i32* @lr, align 4
  %v1_13844 = load i32, i32* @ip, align 4
  %v2_13844 = add i32 %v1_13844, 4
  %v3_13844 = inttoptr i32 %v2_13844 to i32*
  store i32 %v0_13844, i32* %v3_13844, align 4
  store i32 %tmp6, i32* %r2.global-to-local, align 4
  %v0_1384c = load i32, i32* @r8, align 4
  %v7_1384c = icmp eq i32 %v0_1384c, 2
  %v0_13850 = load i32, i32* @r5, align 4
  %v1_13850 = load i32, i32* @r7, align 4
  %v2_13850 = add i32 %v1_13850, 4
  %v3_13850 = inttoptr i32 %v2_13850 to i32*
  store i32 %v0_13850, i32* %v3_13850, align 4
  %v0_13854 = load i32, i32* @ip, align 4
  %v1_13854 = load i32, i32* @r7, align 4
  %v2_13854 = add i32 %v1_13854, 16
  %v3_13854 = inttoptr i32 %v2_13854 to i32*
  store i32 %v0_13854, i32* %v3_13854, align 4
  %v0_13858 = load i32, i32* @sl, align 4
  %v1_13858 = load i32, i32* %r2.global-to-local, align 4
  %v2_13858 = add i32 %v1_13858, 24
  %v3_13858 = inttoptr i32 %v2_13858 to i32*
  store i32 %v0_13858, i32* %v3_13858, align 4
  br i1 %v7_1384c, label %dec_label_pc_13860, label %dec_label_pc_13890

dec_label_pc_13860:                               ; preds = %dec_label_pc_13834
  %v3_13860 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_13860, i32* %r3.global-to-local, align 4
  %v0_13864 = load i32, i32* @r8, align 4
  %v1_13868 = inttoptr i32 %v3_13860 to i32*
  %v2_13868 = load i32, i32* %v1_13868, align 4
  store i32 %v2_13868, i32* %r1.global-to-local, align 4
  %v0_1386c = load i32, i32* @sl, align 4
  store i32 %v0_1386c, i32* %r2.global-to-local, align 4
  %v3_13870 = inttoptr i32 %v2_13868 to i8*
  %v4_13870 = call i32 @inet_pton(i32 %v0_13864, i8* %v3_13870, i32 %v0_1386c)
  %tmp23 = icmp slt i32 %v4_13870, 1
  br i1 %tmp23, label %dec_label_pc_138d0, label %dec_label_pc_1387c

dec_label_pc_1387c:                               ; preds = %dec_label_pc_13860
  %v0_13880 = load i32, i32* @r7, align 4
  %v2_13880 = inttoptr i32 %tmp7 to i32*
  store i32 %v0_13880, i32* %v2_13880, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v0_13888 = load i32, i32* @r8, align 4
  %v1_13888 = load i32, i32* @r7, align 4
  %v2_13888 = add i32 %v1_13888, 8
  %v3_13888 = inttoptr i32 %v2_13888 to i32*
  store i32 %v0_13888, i32* %v3_13888, align 4
  %v0_138c8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_138c4

dec_label_pc_13890:                               ; preds = %dec_label_pc_13834
  %v0_13890 = load i32, i32* @r8, align 4
  %v7_13890 = icmp eq i32 %v0_13890, 10
  br i1 %v7_13890, label %dec_label_pc_13898, label %dec_label_pc_138d0

dec_label_pc_13898:                               ; preds = %dec_label_pc_13890
  %v3_13898 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_13898, i32* %r3.global-to-local, align 4
  %v1_138a0 = inttoptr i32 %v3_13898 to i32*
  %v2_138a0 = load i32, i32* %v1_138a0, align 4
  store i32 %v2_138a0, i32* %r1.global-to-local, align 4
  %v0_138a4 = load i32, i32* @sl, align 4
  store i32 %v0_138a4, i32* %r2.global-to-local, align 4
  %v3_138a8 = inttoptr i32 %v2_138a0 to i8*
  %v4_138a8 = call i32 @inet_pton(i32 10, i8* %v3_138a8, i32 %v0_138a4)
  %tmp24 = icmp slt i32 %v4_138a8, 1
  br i1 %tmp24, label %dec_label_pc_138d0, label %dec_label_pc_138b4

dec_label_pc_138b4:                               ; preds = %dec_label_pc_13898
  store i32 %tmp7, i32* @ip, align 4
  %v0_138b8 = load i32, i32* @r8, align 4
  %v1_138b8 = load i32, i32* @r7, align 4
  %v2_138b8 = add i32 %v1_138b8, 8
  %v3_138b8 = inttoptr i32 %v2_138b8 to i32*
  store i32 %v0_138b8, i32* %v3_138b8, align 4
  %v0_138bc = load i32, i32* @r7, align 4
  %v1_138bc = load i32, i32* @ip, align 4
  %v2_138bc = inttoptr i32 %v1_138bc to i32*
  store i32 %v0_138bc, i32* %v2_138bc, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_138c4

dec_label_pc_138c4:                               ; preds = %dec_label_pc_1387c, %dec_label_pc_138b4
  %v0_138c8 = phi i32 [ %v0_138c8.pre, %dec_label_pc_1387c ], [ 16, %dec_label_pc_138b4 ]
  store i32 0, i32* @sb, align 4
  %v1_138c8 = load i32, i32* @r7, align 4
  %v2_138c8 = add i32 %v1_138c8, 12
  %v3_138c8 = inttoptr i32 %v2_138c8 to i32*
  store i32 %v0_138c8, i32* %v3_138c8, align 4
  br label %dec_label_pc_138f8

dec_label_pc_138d0:                               ; preds = %dec_label_pc_13890, %dec_label_pc_13898, %dec_label_pc_13860
  store i32 2, i32* @sb, align 4
  br label %dec_label_pc_138d4

dec_label_pc_138d4:                               ; preds = %dec_label_pc_1381c.preheader, %dec_label_pc_13810.dec_label_pc_1381c_crit_edge, %dec_label_pc_137f8, %dec_label_pc_138d0, %dec_label_pc_13788
  %v0_138d4 = load i32, i32* @r6, align 4
  store i32 %v2_13790, i32* %r1.global-to-local, align 4
  store i32 459270, i32* %r2.global-to-local, align 4
  store i32 %v0_137c4, i32* %r3.global-to-local, align 4
  %v4_138e4 = inttoptr i32 %v0_138d4 to i32*
  %v5_138e4 = call i32 @__GI_config_read(i32* %v4_138e4, i32 %v2_13790, i32 459270, i32 %v0_137c4)
  %v2_138e8 = icmp eq i32 %v5_138e4, 0
  br i1 %v2_138e8, label %dec_label_pc_138f0, label %dec_label_pc_137d8

dec_label_pc_138f0:                               ; preds = %dec_label_pc_138d4
  %v0_138f0 = load i32, i32* @fp, align 4
  %v7_138f0 = icmp eq i32 %v0_138f0, 1
  br i1 %v7_138f0, label %dec_label_pc_13900, label %dec_label_pc_138f8

dec_label_pc_138f8:                               ; preds = %dec_label_pc_138f0, %dec_label_pc_138c4
  %v0_138f8 = load i32, i32* @r6, align 4
  %v1_138fc = inttoptr i32 %v0_138f8 to i32*
  %v2_138fc = call i32 @__GI_config_close(i32* %v1_138fc)
  br label %dec_label_pc_13900

dec_label_pc_13900:                               ; preds = %dec_label_pc_137d8, %.thread, %dec_label_pc_138f0, %dec_label_pc_13774, %dec_label_pc_138f8
  %v0_13900 = load i32, i32* @sb, align 4
  store i32 %v3_13718, i32* @r4, align 4
  store i32 %v6_13718, i32* @r5, align 4
  store i32 %v9_13718, i32* @r6, align 4
  store i32 %v12_13718, i32* @r7, align 4
  store i32 %v15_13718, i32* @r8, align 4
  store i32 %v18_13718, i32* @sb, align 4
  store i32 %v21_13718, i32* @sl, align 4
  store i32 %v24_13718, i32* @fp, align 4
  ret i32 %v0_13900

; uselistorder directives
  uselistorder i32 %v2_1381c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_1381c.pre, { 1, 0 }
  uselistorder i32 %v0_137c4, { 1, 0 }
  uselistorder i32 %v2_13790, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 4, 3 }
  uselistorder i32 %tmp9, { 2, 0, 1 }
  uselistorder i32 %tmp7, { 3, 2, 1, 0 }
  uselistorder i32 %tmp6, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0, 9, 10 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 5, 6, 7, 8 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 0, 5, 7 }
  uselistorder i32 (i32*)* @__GI_config_close, { 1, 0 }
  uselistorder i32 (i32*, i32, i32, i32)* @__GI_config_read, { 2, 0, 1 }
  uselistorder i32 (i8*, i32)* @__GI_strcoll, { 2, 3, 4, 5, 6, 7, 8, 0, 9, 1 }
  uselistorder i32 -48, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 34, { 6, 5, 7, 8, 9, 1, 2, 0, 4, 10, 3, 11 }
  uselistorder i32* @fp, { 26, 27, 28, 29, 38, 39, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 40, 41, 42, 43, 44, 45, 46, 47, 0, 52, 62, 63, 64, 65, 66, 67, 68, 69, 70, 17, 18, 48, 49, 50, 51, 71, 72, 73, 1, 74, 75, 76, 77, 78, 53, 54, 55, 56, 57, 58, 59, 60, 61, 30, 31, 32, 33, 34, 35, 36, 37, 2, 81, 83, 82, 84, 19, 20, 21, 22, 23, 24, 25, 79, 80, 85, 86, 87, 88, 89, 90, 97, 98, 96, 91, 92, 93, 94, 95, 99, 100, 101, 102, 3 }
  uselistorder i32* @sl, { 29, 30, 31, 32, 38, 39, 8, 9, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 0, 59, 2, 60, 61, 62, 63, 64, 65, 66, 67, 68, 25, 26, 48, 49, 50, 51, 52, 53, 69, 70, 71, 72, 73, 74, 75, 76, 33, 34, 35, 36, 37, 5, 6, 27, 28, 77, 78, 79, 3, 80, 81, 82, 83, 84, 85, 87, 4, 86, 89, 88, 90, 91, 92, 93, 7 }
  uselistorder i32* @sb, { 16, 17, 18, 19, 24, 25, 26, 27, 5, 6, 7, 8, 9, 10, 11, 0, 12, 28, 29, 42, 30, 31, 32, 2, 33, 70, 71, 3, 72, 73, 74, 75, 76, 77, 78, 13, 14, 15, 34, 35, 36, 37, 38, 39, 40, 41, 79, 80, 81, 82, 83, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 1, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 20, 21, 22, 23, 84, 87, 85, 86, 88, 4 }
  uselistorder i32* @r8, { 28, 29, 30, 31, 32, 33, 38, 39, 12, 13, 14, 15, 16, 17, 1, 18, 0, 19, 20, 21, 6, 7, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 57, 60, 61, 62, 63, 64, 65, 2, 66, 67, 68, 69, 70, 71, 22, 23, 24, 52, 53, 3, 54, 55, 56, 72, 73, 74, 75, 76, 77, 78, 58, 59, 49, 50, 34, 35, 36, 37, 25, 26, 27, 8, 9, 4, 10, 79, 80, 81, 82, 83, 5, 84, 85, 86, 87, 88, 89, 90, 91, 11 }
  uselistorder label %dec_label_pc_13900, { 4, 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_138d4, { 3, 1, 2, 0, 4 }
  uselistorder label %dec_label_pc_138d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138c4, { 1, 0 }
  uselistorder label %dec_label_pc_13810, { 1, 0 }
}

define i32 @uname(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1391c = load i32, i32* @r7, align 4
  store i32 %v3_1391c, i32* %stack_var_-8, align 4
  %v0_13928 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13928, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13928, -4095
  br i1 %tmp, label %dec_label_pc_13948, label %dec_label_pc_13938

dec_label_pc_13938:                               ; preds = %entry
  %v0_13938 = call i32 @__GI___errno_location()
  %v0_1393c = load i32, i32* %r7.global-to-local, align 4
  %v1_1393c = sub i32 0, %v0_1393c
  %v2_13940 = inttoptr i32 %v0_13938 to i32*
  store i32 %v1_1393c, i32* %v2_13940, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13948.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13948

dec_label_pc_13948:                               ; preds = %entry, %dec_label_pc_13938
  %v1_1394c = phi i32 [ %v0_13928, %entry ], [ -1, %dec_label_pc_13938 ]
  %v2_13948 = phi i32 [ %v3_1391c, %entry ], [ %v2_13948.pre, %dec_label_pc_13938 ]
  store i32 %v2_13948, i32* @r7, align 4
  ret i32 %v1_1394c

; uselistorder directives
  uselistorder i32 %v0_13928, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13948, { 1, 0 }
}

define i32 @__GI_wcrtomb(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_13950 = load i32, i32* @lr, align 4
  %v2_13954 = icmp eq i32 %arg1, 0
  br i1 %v2_13954, label %bb, label %.thread

.thread:                                          ; preds = %entry
  br label %bb11

bb:                                               ; preds = %entry
  %v3_1395c = ptrtoint i32* %stack_var_-32 to i32
  br label %bb11

bb11:                                             ; preds = %.thread, %bb
  %v0_13984 = phi i32 [ %arg2, %.thread ], [ 0, %bb ]
  %v0_13970 = phi i32 [ %arg1, %.thread ], [ %v3_1395c, %bb ]
  store i32 %arg3, i32* @r4, align 4
  %v2_1396c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1396c, i32* @ip, align 4
  %v2_13974 = ptrtoint i32* %stack_var_-16 to i32
  store i32 16, i32* @r3, align 4
  store i32 %v2_1396c, i32* %stack_var_-16, align 4
  store i32 %v0_13984, i32* %stack_var_-12, align 4
  %v5_1398c = inttoptr i32 %v0_13970 to i8*
  %v6_1398c = call i32 @__GI_wcsnrtombs(i8* %v5_1398c, i32 %v2_13974, i32 1, i32 16, i32 %arg3)
  %v2_13990 = icmp eq i32 %v6_1398c, 0
  br i1 %v2_13990, label %bb12, label %bb13

bb12:                                             ; preds = %bb11
  br label %bb13

bb13:                                             ; preds = %bb11, %bb12
  %v1_139a0 = phi i32 [ %v6_1398c, %bb11 ], [ 1, %bb12 ]
  store i32 %v6_13950, i32* @lr, align 4
  ret i32 %v1_139a0

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %bb13, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @__GI_wcsrtombs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r3, align 4
  %v0_139b8 = load i32, i32* @r0, align 4
  %v1_139b8 = load i32, i32* @r1, align 4
  %v5_139b8 = inttoptr i32 %v0_139b8 to i8*
  %v6_139b8 = call i32 @__GI_wcsnrtombs(i8* %v5_139b8, i32 %v1_139b8, i32 -1, i32 %arg1, i32 ptrtoint (i32* @0 to i32))
  ret i32 %v6_139b8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_139c8 = load i32, i32* @r4, align 4
  store i32 %v3_139c8, i32* %stack_var_-12, align 4
  %v10_139cc = icmp eq i32 %tmp, %arg2
  store i1 %v10_139cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v10_139cc, label %dec_label_pc_139e4, label %bb

bb:                                               ; preds = %entry
  %v4_139d0 = icmp eq i8* %arg1, null
  store i1 %v4_139d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %lr.global-to-local, align 4
  br i1 %v4_139d0, label %dec_label_pc_139e4.thread, label %bb39

dec_label_pc_139e4.thread:                        ; preds = %bb
  %v2_139d4 = ptrtoint i32* %stack_var_-32 to i32
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb40

bb39:                                             ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %.thread14.thread

dec_label_pc_139e4:                               ; preds = %entry
  %v2_139d41 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v3_139e4 = icmp eq i8* %arg1, null
  store i1 %v3_139e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_139e4, label %bb40, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_139e4
  store i32 %v2_139d41, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %.thread14.thread

bb40:                                             ; preds = %dec_label_pc_139e4, %dec_label_pc_139e4.thread
  %storemerge20 = phi i32 [ %v2_139d41, %dec_label_pc_139e4 ], [ %v2_139d4, %dec_label_pc_139e4.thread ]
  store i32 %storemerge20, i32* %lr.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  br label %.thread14.thread

.thread14.thread:                                 ; preds = %bb39, %.thread8, %bb40
  %v2_13a4028 = phi i32 [ %v2_139d41, %.thread8 ], [ %tmp, %bb39 ], [ %storemerge20, %bb40 ]
  %v0_139fc = load i32, i32* @r3, align 4
  %v3_139fc = icmp uge i32 %v0_139fc, %arg3
  %arg3.v0_139fc = select i1 %v3_139fc, i32 %arg3, i32 %v0_139fc
  store i32 %arg3.v0_139fc, i32* %r5.global-to-local, align 4
  %v1_13a08 = inttoptr i32 %arg2 to i32*
  %v2_13a08 = load i32, i32* %v1_13a08, align 4
  store i32 %v2_13a08, i32* %r2.global-to-local, align 4
  store i32 %arg3.v0_139fc, i32* %r0.global-to-local, align 4
  %v2_13a5422 = icmp eq i32 %arg3.v0_139fc, 0
  store i1 %v2_13a5422, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a5422, label %dec_label_pc_13a5c, label %dec_label_pc_13a14

dec_label_pc_13a14:                               ; preds = %.thread14.thread, %dec_label_pc_13a4c.dec_label_pc_13a14_crit_edge
  %v2_13a40 = phi i32 [ %v2_13a4c, %dec_label_pc_13a4c.dec_label_pc_13a14_crit_edge ], [ %v2_13a4028, %.thread14.thread ]
  %v0_13a20 = phi i32 [ %v0_13a14.pre, %dec_label_pc_13a4c.dec_label_pc_13a14_crit_edge ], [ %v2_13a08, %.thread14.thread ]
  %v1_13a14 = inttoptr i32 %v0_13a20 to i32*
  %v2_13a14 = load i32, i32* %v1_13a14, align 4
  %v7_13a18 = icmp eq i32 %v2_13a14, 127
  store i1 %v7_13a18, i1* %cpsr_z.global-to-local, align 1
  %v1_13a1c = urem i32 %v2_13a14, 256
  store i32 %v1_13a1c, i32* @ip, align 4
  %v1_13a20 = add i32 %v0_13a20, 4
  store i32 %v1_13a20, i32* %r2.global-to-local, align 4
  %tmp45 = icmp ult i32 %v2_13a14, 128
  br i1 %tmp45, label %dec_label_pc_13a3c, label %dec_label_pc_13a28

dec_label_pc_13a28:                               ; preds = %dec_label_pc_13a14
  %v0_13a28 = call i32 @__GI___errno_location()
  store i32 %v0_13a28, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13a34 = inttoptr i32 %v0_13a28 to i32*
  store i32 84, i32* %v2_13a34, align 4
  %v0_13a68.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a68

dec_label_pc_13a3c:                               ; preds = %dec_label_pc_13a14
  %v2_13a3c = icmp eq i32 %v1_13a1c, 0
  store i1 %v2_13a3c, i1* %cpsr_z.global-to-local, align 1
  %v1_13a40 = trunc i32 %v2_13a14 to i8
  %v3_13a40 = inttoptr i32 %v2_13a40 to i8*
  store i8 %v1_13a40, i8* %v3_13a40, align 1
  %v0_13a44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13a44, label %.dec_label_pc_13a5c_crit_edge, label %dec_label_pc_13a4c

dec_label_pc_13a4c:                               ; preds = %dec_label_pc_13a3c
  %v0_13a4c = load i32, i32* %lr.global-to-local, align 4
  %v1_13a4c = load i32, i32* %r4.global-to-local, align 4
  %v2_13a4c = add i32 %v1_13a4c, %v0_13a4c
  store i32 %v2_13a4c, i32* %lr.global-to-local, align 4
  %v0_13a50 = load i32, i32* %r0.global-to-local, align 4
  %v1_13a50 = add i32 %v0_13a50, -1
  store i32 %v1_13a50, i32* %r0.global-to-local, align 4
  %v2_13a54 = icmp eq i32 %v1_13a50, 0
  store i1 %v2_13a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a54, label %dec_label_pc_13a5c, label %dec_label_pc_13a4c.dec_label_pc_13a14_crit_edge

dec_label_pc_13a4c.dec_label_pc_13a14_crit_edge:  ; preds = %dec_label_pc_13a4c
  %v0_13a14.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a14

.dec_label_pc_13a5c_crit_edge:                    ; preds = %dec_label_pc_13a3c
  %v1_13a44 = load i32, i32* @ip, align 4
  store i32 %v1_13a44, i32* %r2.global-to-local, align 4
  %v0_13a5c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13a5c

dec_label_pc_13a5c:                               ; preds = %dec_label_pc_13a4c, %.dec_label_pc_13a5c_crit_edge, %.thread14.thread
  %v0_13a5c = phi i32 [ %v0_13a5c.pre, %.dec_label_pc_13a5c_crit_edge ], [ %v2_13a4028, %.thread14.thread ], [ %v2_13a4c, %dec_label_pc_13a4c ]
  %v1_13a5c = load i32, i32* @sp, align 4
  %v9_13a5c = icmp eq i32 %v0_13a5c, %v1_13a5c
  store i1 %v9_13a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13a5c, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_13a5c
  %v1_13a60 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_13a60, i32* %v1_13a08, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_13a5c, %bb43
  %v0_13a64 = load i32, i32* %r0.global-to-local, align 4
  %v1_13a64 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a64 = sub i32 %v1_13a64, %v0_13a64
  store i32 %v2_13a64, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a68

dec_label_pc_13a68:                               ; preds = %dec_label_pc_13a28, %bb44
  %v0_13a68 = phi i32 [ %v0_13a68.pre, %dec_label_pc_13a28 ], [ %v2_13a64, %bb44 ]
  store i32 %v0_13a68, i32* %r0.global-to-local, align 4
  %v2_13a70 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13a70, i32* %r4.global-to-local, align 4
  ret i32 %v0_13a68

; uselistorder directives
  uselistorder i32 %v0_13a68, { 1, 0 }
  uselistorder i32 %v1_13a50, { 1, 0 }
  uselistorder i32 %v2_13a4c, { 0, 2, 1 }
  uselistorder i32 %v1_13a1c, { 1, 0 }
  uselistorder i32 %v2_13a14, { 2, 0, 1, 3 }
  uselistorder i32 %v2_13a4028, { 1, 0 }
  uselistorder i32 %v2_139d41, { 2, 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 5, 3, 4, 6, 8, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 3, 6, 0 }
  uselistorder i32* %lr.global-to-local, { 5, 0, 4, 6, 1, 3, 2 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 4, 1, 2, 3, 9, 5, 8, 6, 7 }
  uselistorder i32* @sp, { 2, 3, 0, 1 }
  uselistorder i32 84, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13a68, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_13a5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13a14, { 1, 0 }
  uselistorder label %.thread14.thread, { 2, 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i16* %arg3) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg3 to i32
  %stack_var_-20 = alloca i32, align 4
  %v3_13a78 = load i32, i32* @r4, align 4
  store i32 %v3_13a78, i32* %stack_var_-20, align 4
  %v6_13a78 = load i32, i32* @r5, align 4
  %v9_13a78 = load i32, i32* @r6, align 4
  %v12_13a78 = load i32, i32* @r7, align 4
  %v3_13a7c = load i16, i16* %arg3, align 2
  %v4_13a7c = zext i16 %v3_13a7c to i32
  %v1_13a80 = and i32 %v4_13a7c, 512
  store i32 %v1_13a80, i32* @r4, align 4
  %v2_13a80 = icmp eq i32 %v1_13a80, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_13a80, label %dec_label_pc_13a98, label %dec_label_pc_13b94

dec_label_pc_13a98:                               ; preds = %entry
  %v2_13a98 = add i32 %tmp, 4
  %v3_13a98 = inttoptr i32 %v2_13a98 to i32*
  %v4_13a98 = load i32, i32* %v3_13a98, align 4
  %v2_13aa0 = add i32 %tmp, 16
  %v3_13aa0 = inttoptr i32 %v2_13aa0 to i32*
  %v4_13aa0 = load i32, i32* %v3_13aa0, align 4
  store i32 %v4_13aa0, i32* @r0, align 4
  %v2_13aa4 = add i32 %tmp, 12
  %v3_13aa4 = inttoptr i32 %v2_13aa4 to i32*
  %v4_13aa4 = load i32, i32* %v3_13aa4, align 4
  store i32 %v4_13aa4, i32* @r3, align 4
  %v4_13aa8 = icmp eq i32 %v4_13a98, -2
  %v2_13aac = sub i32 %v4_13aa4, %v4_13aa0
  br i1 %v4_13aa8, label %dec_label_pc_13aac, label %dec_label_pc_13ad4

dec_label_pc_13aac:                               ; preds = %dec_label_pc_13a98
  %v3_13ab0 = icmp ugt i32 %v2_13aac, %arg2
  br i1 %v3_13ab0, label %bb, label %bb12

bb:                                               ; preds = %dec_label_pc_13aac
  br label %bb12

bb12:                                             ; preds = %dec_label_pc_13aac, %bb
  %storemerge = phi i32 [ %arg2, %bb ], [ %v2_13aac, %dec_label_pc_13aac ]
  %v0_13ab8 = phi i32 [ %arg2, %bb ], [ %v2_13aac, %dec_label_pc_13aac ]
  store i32 %storemerge, i32* @r4, align 4
  store i32 %v0_13ab8, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_13ac0 = call i32 @memcpy()
  %v0_13ac4 = load i32, i32* @r5, align 4
  %v1_13ac4 = add i32 %v0_13ac4, 16
  %v2_13ac4 = inttoptr i32 %v1_13ac4 to i32*
  %v3_13ac4 = load i32, i32* %v2_13ac4, align 4
  %v1_13ac8 = load i32, i32* @r4, align 4
  %v2_13ac8 = add i32 %v1_13ac8, %v3_13ac4
  store i32 %v2_13ac8, i32* %v2_13ac4, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13ad4:                               ; preds = %dec_label_pc_13a98
  store i32 %v2_13aac, i32* @r3, align 4
  %tmp18 = icmp ult i32 %v2_13aac, %arg2
  br i1 %tmp18, label %dec_label_pc_13b74, label %dec_label_pc_13ae0

dec_label_pc_13ae0:                               ; preds = %dec_label_pc_13ad4
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_13ae8 = call i32 @memcpy()
  %v0_13aec = load i32, i32* @r5, align 4
  %v1_13aec = add i32 %v0_13aec, 16
  %v2_13aec = inttoptr i32 %v1_13aec to i32*
  %v3_13aec = load i32, i32* %v2_13aec, align 4
  %v1_13af0 = inttoptr i32 %v0_13aec to i16*
  %v2_13af0 = load i16, i16* %v1_13af0, align 2
  %v1_13af4 = load i32, i32* @r6, align 4
  %v2_13af4 = add i32 %v1_13af4, %v3_13aec
  %v1_13af8 = and i16 %v2_13af0, 256
  %v2_13af8 = icmp eq i16 %v1_13af8, 0
  store i32 %v2_13af4, i32* %v2_13aec, align 4
  br i1 %v2_13af8, label %dec_label_pc_13ba8, label %dec_label_pc_13b04

dec_label_pc_13b04:                               ; preds = %dec_label_pc_13ae0
  %v0_13b04 = load i32, i32* @r7, align 4
  %v0_13b0c = load i32, i32* @r6, align 4
  %v4_13b10 = call i32 @memrchr(i32 %v0_13b04, i32 10, i32 %v0_13b0c, i32 %v2_13af4)
  %v2_13b14 = icmp eq i32 %v4_13b10, 0
  br i1 %v2_13b14, label %dec_label_pc_13ba8, label %dec_label_pc_13b1c

dec_label_pc_13b1c:                               ; preds = %dec_label_pc_13b04
  %v0_13b1c = load i32, i32* @r5, align 4
  store i32 %v0_13b1c, i32* @r0, align 4
  %v0_13b20 = call i32 @__stdio_wcommit()
  %v2_13b24 = icmp eq i32 %v0_13b20, 0
  br i1 %v2_13b24, label %dec_label_pc_13ba8, label %dec_label_pc_13b2c

dec_label_pc_13b2c:                               ; preds = %dec_label_pc_13b1c
  %v1_13b2c = load i32, i32* @r6, align 4
  %v3_13b2c = icmp uge i32 %v0_13b20, %v1_13b2c
  %v1_13b2c.v0_13b20 = select i1 %v3_13b2c, i32 %v1_13b2c, i32 %v0_13b20
  store i32 %v1_13b2c.v0_13b20, i32* @r4, align 4
  %v2_13b38 = sub i32 %v1_13b2c, %v1_13b2c.v0_13b20
  %v0_13b3c = load i32, i32* @r7, align 4
  %v2_13b3c = add i32 %v0_13b3c, %v2_13b38
  store i32 %v2_13b3c, i32* %r7.global-to-local, align 4
  store i32 %v2_13b3c, i32* @r0, align 4
  store i32 %v1_13b2c.v0_13b20, i32* @r2, align 4
  %v4_13b4c = call i32 @__GI_memchr(i32 %v2_13b3c, i32 10, i32 %v1_13b2c.v0_13b20, i32 %v2_13b38)
  %v2_13b50 = icmp eq i32 %v4_13b4c, 0
  br i1 %v2_13b50, label %dec_label_pc_13ba8, label %dec_label_pc_13b58

dec_label_pc_13b58:                               ; preds = %dec_label_pc_13b2c
  %v0_13b58 = load i32, i32* @r5, align 4
  %v1_13b58 = add i32 %v0_13b58, 16
  %v2_13b58 = inttoptr i32 %v1_13b58 to i32*
  %v3_13b58 = load i32, i32* %v2_13b58, align 4
  %v0_13b5c = load i32, i32* %r7.global-to-local, align 4
  %v1_13b5c = load i32, i32* @r4, align 4
  %v2_13b5c = sub i32 %v0_13b5c, %v4_13b4c
  %v2_13b60 = add i32 %v2_13b5c, %v1_13b5c
  %v2_13b64 = sub i32 %v3_13b58, %v2_13b60
  %v1_13b68 = load i32, i32* @r6, align 4
  %v2_13b68 = sub i32 %v1_13b68, %v2_13b60
  store i32 %v2_13b68, i32* @r6, align 4
  store i32 %v2_13b64, i32* %v2_13b58, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13b74:                               ; preds = %dec_label_pc_13ad4
  %v2_13b74 = add i32 %tmp, 8
  %v3_13b74 = inttoptr i32 %v2_13b74 to i32*
  %v4_13b74 = load i32, i32* %v3_13b74, align 4
  %v9_13b78 = icmp eq i32 %v4_13aa0, %v4_13b74
  br i1 %v9_13b78, label %dec_label_pc_13b94, label %dec_label_pc_13b80

dec_label_pc_13b80:                               ; preds = %dec_label_pc_13b74
  store i32 %tmp, i32* @r0, align 4
  %v0_13b84 = call i32 @__stdio_wcommit()
  %v2_13b88 = icmp eq i32 %v0_13b84, 0
  br i1 %v2_13b88, label %dec_label_pc_13b80.dec_label_pc_13b94_crit_edge, label %bb15

dec_label_pc_13b80.dec_label_pc_13b94_crit_edge:  ; preds = %dec_label_pc_13b80
  %v0_13b94.pre = load i32, i32* @r6, align 4
  %v0_13b98.pre = load i32, i32* @r5, align 4
  %v0_13b9c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_13b94

bb15:                                             ; preds = %dec_label_pc_13b80
  %v1_13b8c = load i32, i32* @r4, align 4
  store i32 %v1_13b8c, i32* @r6, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13b94:                               ; preds = %dec_label_pc_13b80.dec_label_pc_13b94_crit_edge, %entry, %dec_label_pc_13b74
  %v0_13b9c = phi i32 [ %v0_13b9c.pre, %dec_label_pc_13b80.dec_label_pc_13b94_crit_edge ], [ %arg1, %entry ], [ %arg1, %dec_label_pc_13b74 ]
  %v0_13b98 = phi i32 [ %v0_13b98.pre, %dec_label_pc_13b80.dec_label_pc_13b94_crit_edge ], [ %tmp, %entry ], [ %tmp, %dec_label_pc_13b74 ]
  %v0_13b94 = phi i32 [ %v0_13b94.pre, %dec_label_pc_13b80.dec_label_pc_13b94_crit_edge ], [ %arg2, %entry ], [ %arg2, %dec_label_pc_13b74 ]
  %v1_13b98 = inttoptr i32 %v0_13b98 to i16*
  %v5_13ba0 = call i32 @__stdio_WRITE(i16* %v1_13b98, i32 %v0_13b9c, i32 %v0_13b94)
  store i32 %v5_13ba0, i32* @r6, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13ba8:                               ; preds = %bb15, %dec_label_pc_13b2c, %dec_label_pc_13b1c, %dec_label_pc_13b04, %dec_label_pc_13ae0, %dec_label_pc_13b58, %bb12, %dec_label_pc_13b94
  %v0_13ba8 = load i32, i32* @r6, align 4
  %v2_13bb0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13bb0, i32* @r4, align 4
  store i32 %v6_13a78, i32* @r5, align 4
  store i32 %v9_13a78, i32* @r6, align 4
  store i32 %v12_13a78, i32* @r7, align 4
  ret i32 %v0_13ba8

; uselistorder directives
  uselistorder i32 %v2_13b60, { 1, 0 }
  uselistorder i32 %v2_13b38, { 1, 0 }
  uselistorder i32 %v1_13b2c.v0_13b20, { 1, 2, 0, 3 }
  uselistorder i32 %v1_13b2c, { 1, 0, 2 }
  uselistorder i32 %v2_13aac, { 2, 4, 0, 1, 3 }
  uselistorder i32 %tmp, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %arg2, { 3, 4, 5, 2, 0, 1, 6, 7 }
  uselistorder i32 %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_13ba8, { 7, 0, 5, 1, 2, 3, 4, 6 }
  uselistorder label %dec_label_pc_13b94, { 0, 2, 1 }
  uselistorder label %bb12, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13bb8 = load i32, i32* @r4, align 4
  store i32 %v3_13bb8, i32* %stack_var_-8, align 4
  %v3_13bbc = load i16, i16* %arg1, align 2
  %v4_13bbc = zext i16 %v3_13bbc to i32
  %v2_13bc0 = and i32 %v4_13bbc, %arg2
  %v4_13bc0 = icmp eq i32 %v2_13bc0, 0
  store i32 %tmp, i32* @r4, align 4
  br i1 %v4_13bc0, label %dec_label_pc_13bcc, label %dec_label_pc_13bdc

dec_label_pc_13bcc:                               ; preds = %entry
  %v1_13bcc = and i32 %v4_13bbc, 2176
  %v2_13bcc = icmp eq i32 %v1_13bcc, 0
  br i1 %v2_13bcc, label %dec_label_pc_13bd4, label %dec_label_pc_13be8

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13bcc
  %v2_13bd4 = or i32 %v4_13bbc, %arg2
  %v1_13bd8 = trunc i32 %v2_13bd4 to i16
  store i16 %v1_13bd8, i16* %arg1, align 2
  %v0_13bdc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13bdc

dec_label_pc_13bdc:                               ; preds = %entry, %dec_label_pc_13bd4
  %v0_13c18 = phi i32 [ %tmp, %entry ], [ %v0_13bdc.pre, %dec_label_pc_13bd4 ]
  %v1_13bdc = inttoptr i32 %v0_13c18 to i16*
  %v2_13bdc = load i16, i16* %v1_13bdc, align 2
  %v3_13bdc = zext i16 %v2_13bdc to i32
  store i32 %v3_13bdc, i32* @ip, align 4
  %v1_13be0 = and i32 %v3_13bdc, 32
  %v2_13be0 = icmp eq i32 %v1_13be0, 0
  br i1 %v2_13be0, label %dec_label_pc_13c08, label %dec_label_pc_13be8

dec_label_pc_13be8:                               ; preds = %dec_label_pc_13bcc, %dec_label_pc_13bdc
  %v0_13be8 = call i32 @__GI___errno_location()
  store i32 %v0_13be8, i32* %r0.global-to-local, align 4
  %v2_13bf0 = inttoptr i32 %v0_13be8 to i32*
  store i32 9, i32* %v2_13bf0, align 4
  br label %dec_label_pc_13bf4

dec_label_pc_13bf4:                               ; preds = %dec_label_pc_13c30, %dec_label_pc_13be8
  %v0_13bf4 = load i32, i32* @r4, align 4
  %v1_13bf4 = inttoptr i32 %v0_13bf4 to i16*
  %v2_13bf4 = load i16, i16* %v1_13bf4, align 2
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_13bfc = or i16 %v2_13bf4, 8
  store i16 %v1_13bfc, i16* %v1_13bf4, align 2
  br label %bb11

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13bdc
  %tmp14 = urem i16 %v2_13bdc, 4
  %v2_13c08 = icmp eq i16 %tmp14, 0
  br i1 %v2_13c08, label %dec_label_pc_13c64, label %dec_label_pc_13c10

dec_label_pc_13c10:                               ; preds = %dec_label_pc_13c08
  %v1_13c10 = and i32 %v3_13bdc, 4
  store i32 %v1_13c10, i32* @r1, align 4
  %v2_13c10 = icmp eq i32 %v1_13c10, 0
  br i1 %v2_13c10, label %dec_label_pc_13c18, label %dec_label_pc_13c48

dec_label_pc_13c18:                               ; preds = %dec_label_pc_13c10
  %v1_13c18 = add i32 %v0_13c18, 20
  %v2_13c18 = inttoptr i32 %v1_13c18 to i32*
  %v3_13c18 = load i32, i32* %v2_13c18, align 4
  store i32 %v3_13c18, i32* %r2.global-to-local, align 4
  %v1_13c1c = add i32 %v0_13c18, 16
  %v2_13c1c = inttoptr i32 %v1_13c1c to i32*
  %v3_13c1c = load i32, i32* %v2_13c1c, align 4
  %v9_13c20 = icmp eq i32 %v3_13c18, %v3_13c1c
  br i1 %v9_13c20, label %dec_label_pc_13c28, label %dec_label_pc_13c30

dec_label_pc_13c28:                               ; preds = %dec_label_pc_13c18
  %v1_13c28 = and i32 %v3_13bdc, 2
  %v2_13c28 = icmp eq i32 %v1_13c28, 0
  br i1 %v2_13c28, label %dec_label_pc_13c48, label %dec_label_pc_13c30

dec_label_pc_13c30:                               ; preds = %dec_label_pc_13c18, %dec_label_pc_13c28
  %v1_13c30 = and i32 %v3_13bdc, 1024
  %tmp12 = udiv i32 %v1_13c30, 1024
  %tmp13 = add nuw nsw i32 %tmp12, 1
  store i32 %tmp13, i32* %r2.global-to-local, align 4
  %v0_13c3c = call i32 @__GI_fseek()
  store i32 %v0_13c3c, i32* %r0.global-to-local, align 4
  %v2_13c40 = icmp eq i32 %v0_13c3c, 0
  br i1 %v2_13c40, label %.dec_label_pc_13c48_crit_edge, label %dec_label_pc_13bf4

.dec_label_pc_13c48_crit_edge:                    ; preds = %dec_label_pc_13c30
  %v0_13c48.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c48

dec_label_pc_13c48:                               ; preds = %.dec_label_pc_13c48_crit_edge, %dec_label_pc_13c10, %dec_label_pc_13c28
  %v2_13c54 = phi i32 [ %v0_13c48.pre, %.dec_label_pc_13c48_crit_edge ], [ %v0_13c18, %dec_label_pc_13c10 ], [ %v0_13c18, %dec_label_pc_13c28 ]
  %v1_13c48 = inttoptr i32 %v2_13c54 to i16*
  %v2_13c48 = load i16, i16* %v1_13c48, align 2
  %v1_13c4c = add i32 %v2_13c54, 8
  %v2_13c4c = inttoptr i32 %v1_13c4c to i32*
  %v3_13c4c = load i32, i32* %v2_13c4c, align 4
  store i32 %v3_13c4c, i32* %r2.global-to-local, align 4
  %v1_13c50 = and i16 %v2_13c48, -4
  store i16 %v1_13c50, i16* %v1_13c48, align 2
  %v0_13c58 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c58 = load i32, i32* @r4, align 4
  %v2_13c58 = add i32 %v1_13c58, 20
  %v3_13c58 = inttoptr i32 %v2_13c58 to i32*
  store i32 %v0_13c58, i32* %v3_13c58, align 4
  %v0_13c5c = load i32, i32* %r2.global-to-local, align 4
  %v1_13c5c = load i32, i32* @r4, align 4
  %v2_13c5c = add i32 %v1_13c5c, 24
  %v3_13c5c = inttoptr i32 %v2_13c5c to i32*
  store i32 %v0_13c5c, i32* %v3_13c5c, align 4
  %v0_13c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c60 = load i32, i32* @r4, align 4
  %v2_13c60 = add i32 %v1_13c60, 16
  %v3_13c60 = inttoptr i32 %v2_13c60 to i32*
  store i32 %v0_13c60, i32* %v3_13c60, align 4
  %v0_13c64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c64

dec_label_pc_13c64:                               ; preds = %dec_label_pc_13c08, %dec_label_pc_13c48
  %v2_13c70 = phi i32 [ %v0_13c18, %dec_label_pc_13c08 ], [ %v0_13c64.pre, %dec_label_pc_13c48 ]
  %v1_13c64 = inttoptr i32 %v2_13c70 to i16*
  %v2_13c64 = load i16, i16* %v1_13c64, align 2
  %v3_13c64 = zext i16 %v2_13c64 to i32
  %v1_13c68 = or i16 %v2_13c64, 64
  %v1_13c6c = and i32 %v3_13c64, 2816
  store i32 %v1_13c6c, i32* %r0.global-to-local, align 4
  %v2_13c6c = icmp eq i32 %v1_13c6c, 0
  store i16 %v1_13c68, i16* %v1_13c64, align 2
  br i1 %v2_13c6c, label %bb10, label %.thread1

bb10:                                             ; preds = %dec_label_pc_13c64
  %v1_13c74 = load i32, i32* @r4, align 4
  %v2_13c74 = add i32 %v1_13c74, 12
  %v3_13c74 = inttoptr i32 %v2_13c74 to i32*
  %v4_13c74 = load i32, i32* %v3_13c74, align 4
  %v3_13c78 = add i32 %v1_13c74, 28
  %v4_13c78 = inttoptr i32 %v3_13c78 to i32*
  store i32 %v4_13c74, i32* %v4_13c78, align 4
  br label %bb11

.thread1:                                         ; preds = %dec_label_pc_13c64
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb11

bb11:                                             ; preds = %bb10, %dec_label_pc_13bf4, %.thread1
  %v2_13c80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c80, i32* @r4, align 4
  %v1_13c84 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13c84

; uselistorder directives
  uselistorder i32 %v2_13c54, { 1, 0 }
  uselistorder i32 %v0_13c18, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v4_13bbc, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 4, 3, 5 }
  uselistorder label %bb11, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c64, { 1, 0 }
  uselistorder label %dec_label_pc_13c48, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13c30, { 1, 0 }
  uselistorder label %dec_label_pc_13be8, { 1, 0 }
  uselistorder label %dec_label_pc_13bdc, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %v0_13c88 = load i32, i32* @r2, align 4
  %v1_13c88 = icmp slt i32 %v0_13c88, 0
  %v0_13c8c = load i32, i32* @r0, align 4
  %v1_13c90 = and i32 %v0_13c8c, 2048
  %v2_13cc4 = icmp eq i32 %v1_13c90, 0
  br i1 %v1_13c88, label %dec_label_pc_13cc4, label %dec_label_pc_13c98

dec_label_pc_13c98:                               ; preds = %entry
  br i1 %v2_13cc4, label %dec_label_pc_13ca0, label %dec_label_pc_13ccc

dec_label_pc_13ca0:                               ; preds = %dec_label_pc_13c98
  %v7_13ca0 = icmp eq i32 %v0_13c8c, 256
  %v0_13ca4 = load i32, i32* @r1, align 4
  %v1_13ca4 = inttoptr i32 %v0_13ca4 to i32*
  %v2_13ca4 = load i32, i32* %v1_13ca4, align 4
  %v2_13ca8 = urem i32 %v2_13ca4, 256
  %v2_13ca8.v2_13ca4 = select i1 %v7_13ca0, i32 %v2_13ca8, i32 %v2_13ca4
  br i1 %v7_13ca0, label %.thread, label %dec_label_pc_13cb0

dec_label_pc_13cb0:                               ; preds = %dec_label_pc_13ca0
  %v7_13cb0 = icmp eq i32 %v0_13c8c, 512
  br i1 %v7_13cb0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13cb0
  %v4_13cb8 = urem i32 %v2_13ca8.v2_13ca4, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13cb0, %dec_label_pc_13ca0, %bb
  %v1_13cc0 = phi i32 [ %v2_13ca4, %dec_label_pc_13cb0 ], [ %v2_13ca8, %dec_label_pc_13ca0 ], [ %v4_13cb8, %bb ]
  store i32 0, i32* @r1, align 4
  ret i32 %v1_13cc0

dec_label_pc_13cc4:                               ; preds = %entry
  br i1 %v2_13cc4, label %dec_label_pc_13cd4, label %dec_label_pc_13ccc

dec_label_pc_13ccc:                               ; preds = %dec_label_pc_13c98, %dec_label_pc_13cc4
  %v0_13ccc = load i32, i32* @r1, align 4
  %v1_13ccc = inttoptr i32 %v0_13ccc to i32*
  %v2_13ccc = load i32, i32* %v1_13ccc, align 4
  %v3_13ccc = add i32 %v0_13ccc, 4
  %v4_13ccc = inttoptr i32 %v3_13ccc to i32*
  %v5_13ccc = load i32, i32* %v4_13ccc, align 4
  store i32 %v5_13ccc, i32* @r1, align 4
  ret i32 %v2_13ccc

dec_label_pc_13cd4:                               ; preds = %dec_label_pc_13cc4
  %v7_13cd4 = icmp eq i32 %v0_13c8c, 256
  %v0_13cd8 = load i32, i32* @r1, align 4
  %v1_13cd8 = inttoptr i32 %v0_13cd8 to i32*
  %v2_13cd8 = load i32, i32* %v1_13cd8, align 4
  %v2_13cdc = urem i32 %v2_13cd8, 256
  %v2_13cdc.v2_13cd8 = select i1 %v7_13cd4, i32 %v2_13cdc, i32 %v2_13cd8
  br i1 %v7_13cd4, label %.thread2, label %dec_label_pc_13ce4

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cd4
  %v7_13ce4 = icmp eq i32 %v0_13c8c, 512
  br i1 %v7_13ce4, label %bb5, label %.thread2

bb5:                                              ; preds = %dec_label_pc_13ce4
  %v4_13ce8 = mul i32 %v2_13cdc.v2_13cd8, 65536
  %v4_13cec = sdiv i32 %v4_13ce8, 65536
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13ce4, %dec_label_pc_13cd4, %bb5
  %v0_13cf0 = phi i32 [ %v2_13cd8, %dec_label_pc_13ce4 ], [ %v2_13cdc, %dec_label_pc_13cd4 ], [ %v4_13cec, %bb5 ]
  %v3_13cf0 = ashr i32 %v0_13cf0, 31
  store i32 %v3_13cf0, i32* @r1, align 4
  ret i32 %v0_13cf0

; uselistorder directives
  uselistorder i32 %v0_13cf0, { 1, 0 }
  uselistorder i32 %v2_13cdc, { 1, 0 }
  uselistorder i32 %v2_13cd8, { 1, 2, 0 }
  uselistorder i32 %v2_13ca8, { 1, 0 }
  uselistorder i32 %v2_13ca4, { 1, 2, 0 }
  uselistorder i1 %v2_13cc4, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ccc, { 1, 0 }
  uselistorder label %.thread, { 2, 0, 1 }
}

define i32 @_store_inttype(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %tmp = trunc i32 %arg3 to i16
  %tmp2 = ptrtoint i16* %arg1 to i32
  %v7_13cf8 = icmp eq i32 %arg2, 256
  store i1 %v7_13cf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13cf8, label %bb, label %bb4

bb:                                               ; preds = %entry
  %v3_13cfc = trunc i32 %arg3 to i8
  %tmp3 = bitcast i16* %arg1 to i8*
  store i8 %v3_13cfc, i8* %tmp3, align 1
  %v1_13d00.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v1_13d00 = phi i1 [ false, %entry ], [ %v1_13d00.pre, %bb ]
  %v0_13d00 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_13d00, i32 %v0_13d00)
  %v7_13d04 = icmp eq i32 %arg2, 2048
  store i1 %v7_13d04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13d04, label %dec_label_pc_13d0c, label %dec_label_pc_13d14

dec_label_pc_13d0c:                               ; preds = %bb4
  %tmp5 = bitcast i16* %arg1 to i32*
  store i32 %arg3, i32* %tmp5, align 4
  %v5_13d0c = add i32 %tmp2, 4
  %v6_13d0c = inttoptr i32 %v5_13d0c to i32*
  store i32 %arg4, i32* %v6_13d0c, align 4
  ret i32 %tmp2

dec_label_pc_13d14:                               ; preds = %bb4
  %v7_13d14 = icmp eq i32 %arg2, 512
  store i1 %v7_13d14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13d14, label %bb6, label %.thread

bb6:                                              ; preds = %dec_label_pc_13d14
  store i16 %tmp, i16* %arg1, align 2
  br label %bb8

.thread:                                          ; preds = %dec_label_pc_13d14
  %tmp7 = bitcast i16* %arg1 to i32*
  store i32 %arg3, i32* %tmp7, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %.thread
  ret i32 %tmp2

; uselistorder directives
  uselistorder i32 512, { 5, 6, 7, 8, 1, 4, 10, 3, 11, 2, 9, 0 }
  uselistorder i16* %arg1, { 3, 2, 0, 1, 4 }
  uselistorder label %bb8, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @_uintmaxtostr(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %tmp21 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp21, i32* %r7.global-to-local, align 4
  %v1_13d30 = icmp slt i32 %tmp21, 0
  %v2_13d30 = icmp eq i32 %tmp21, 0
  store i1 %v2_13d30, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r8.global-to-local, align 4
  %v0_13d38 = load i32, i32* @r2, align 4
  store i32 %v0_13d38, i32* %r5.global-to-local, align 4
  %v0_13d3c = load i32, i32* @r3, align 4
  store i32 %v0_13d3c, i32* %r6.global-to-local, align 4
  br i1 %v1_13d30, label %dec_label_pc_13d44, label %dec_label_pc_13d64

dec_label_pc_13d44:                               ; preds = %entry
  %v1_13d44 = icmp slt i32 %v0_13d3c, 0
  %v2_13d44 = icmp eq i32 %v0_13d3c, 0
  store i1 %v2_13d44, i1* %cpsr_z.global-to-local, align 1
  %v1_13d48 = sub i32 0, %tmp21
  store i32 %v1_13d48, i32* %r7.global-to-local, align 4
  br i1 %v1_13d44, label %dec_label_pc_13d50, label %dec_label_pc_13d64

dec_label_pc_13d50:                               ; preds = %dec_label_pc_13d44
  %v1_13d54 = sub i32 0, %v0_13d38
  store i32 %v1_13d54, i32* %r5.global-to-local, align 4
  %v2_13d54 = icmp eq i32 %v0_13d38, 0
  %v2_13d58 = icmp eq i1 %v2_13d54, false
  %v5_13d58 = sext i1 %v2_13d58 to i32
  %v6_13d58 = sub i32 %v5_13d58, %v0_13d3c
  store i32 %v6_13d58, i32* %r6.global-to-local, align 4
  %v19_13d58 = icmp eq i32 %v6_13d58, 0
  store i1 %v19_13d58, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d6c

dec_label_pc_13d64:                               ; preds = %dec_label_pc_13d44, %entry
  br label %dec_label_pc_13d6c

dec_label_pc_13d6c:                               ; preds = %dec_label_pc_13d50, %dec_label_pc_13d64
  %storemerge = phi i8 [ 0, %dec_label_pc_13d64 ], [ 1, %dec_label_pc_13d50 ]
  store i32 0, i32* %sl.global-to-local, align 4
  store i8 0, i8* %arg1, align 1
  %v0_13d74 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d7c = udiv i32 -1, %v0_13d74
  store i32 %v2_13d7c, i32* %fp.global-to-local, align 4
  %v3_13d8c = urem i32 -1, %v0_13d74
  %v1_13d90 = add i32 %v3_13d8c, 1
  store i32 %v1_13d90, i32* %sb.global-to-local, align 4
  %v9_13d94 = icmp eq i32 %v1_13d90, %v0_13d74
  store i1 %v9_13d94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13d94, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13d6c
  %v1_13d98 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_13d98, i32* %sb.global-to-local, align 4
  %v2_13d9c = add i32 %v2_13d7c, 1
  store i32 %v2_13d9c, i32* %fp.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13d6c, %bb
  %v0_13da0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13da0, i32* %sl.global-to-local, align 4
  %v0_13da4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13da4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13da8

dec_label_pc_13da8thread-pre-split:               ; preds = %bb25
  %v0_13da8.pr = load i32, i32* %sl.global-to-local, align 4
  %v0_13dac.pre = load i32, i32* %r6.global-to-local, align 4
  %v0_13db0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13da8thread-pre-split, %.thread
  %v0_13e2c = phi i32 [ %v0_13db0.pre, %dec_label_pc_13da8thread-pre-split ], [ %v0_13d74, %.thread ]
  %v0_13e24 = phi i32 [ %v0_13dac.pre, %dec_label_pc_13da8thread-pre-split ], [ %v0_13da4, %.thread ]
  %v0_13dc0 = phi i32 [ %v0_13da8.pr, %dec_label_pc_13da8thread-pre-split ], [ %v0_13da0, %.thread ]
  %v2_13da8 = icmp eq i32 %v0_13dc0, 0
  store i1 %v2_13da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13da8, label %dec_label_pc_13e20, label %dec_label_pc_13db8

dec_label_pc_13db8:                               ; preds = %dec_label_pc_13da8
  %v2_13dbc = udiv i32 %v0_13dc0, %v0_13e2c
  %v3_13dbc = urem i32 %v0_13dc0, %v0_13e2c
  store i32 %v2_13dbc, i32* %sl.global-to-local, align 4
  %v2_13ddc = udiv i32 %v0_13e24, %v0_13e2c
  %v3_13ddc = urem i32 %v0_13e24, %v0_13e2c
  %v0_13de0 = load i32, i32* %sb.global-to-local, align 4
  %v2_13de0 = mul i32 %v0_13de0, %v3_13dbc
  %v2_13de8 = add i32 %v2_13de0, %v3_13ddc
  store i32 %v2_13de8, i32* %r5.global-to-local, align 4
  %v0_13df4 = load i32, i32* %fp.global-to-local, align 4
  %v2_13df4 = mul i32 %v0_13df4, %v3_13dbc
  %v2_13dfc = add i32 %v2_13df4, %v2_13ddc
  %v2_13e04 = udiv i32 %v2_13de8, %v0_13e2c
  %v2_13e0c = add i32 %v2_13dfc, %v2_13e04
  br label %dec_label_pc_13e38

dec_label_pc_13e20:                               ; preds = %dec_label_pc_13da8
  %v2_13e20 = udiv i32 %v0_13e24, %v0_13e2c
  br label %dec_label_pc_13e38

dec_label_pc_13e38:                               ; preds = %dec_label_pc_13db8, %dec_label_pc_13e20
  %storemerge28 = phi i32 [ %v2_13e20, %dec_label_pc_13e20 ], [ %v2_13e0c, %dec_label_pc_13db8 ]
  %v0_13e54 = phi i32 [ %v2_13e20, %dec_label_pc_13e20 ], [ %v2_13e0c, %dec_label_pc_13db8 ]
  %v1_13e54 = phi i32 [ 0, %dec_label_pc_13e20 ], [ %v2_13dbc, %dec_label_pc_13db8 ]
  %v2_13de8.pn = phi i32 [ %v0_13e24, %dec_label_pc_13e20 ], [ %v2_13de8, %dec_label_pc_13db8 ]
  store i32 %storemerge28, i32* %r6.global-to-local, align 4
  %v0_13e40 = urem i32 %v2_13de8.pn, %v0_13e2c
  %v2_13e3c = icmp ugt i32 %v0_13e40, 8
  %v7_13e3c = icmp eq i32 %v0_13e40, 9
  store i1 %v7_13e3c, i1* %cpsr_z.global-to-local, align 1
  %v1_13e44 = add i32 %v0_13e40, 48
  %v0_13e4c = load i32, i32* %r8.global-to-local, align 4
  %v1_13e4c = add i32 %v0_13e4c, -1
  store i32 %v1_13e4c, i32* %r8.global-to-local, align 4
  %v2_13e50 = xor i1 %v7_13e3c, true
  %v3_13e50 = and i1 %v2_13e3c, %v2_13e50
  %extract.t = trunc i32 %v1_13e44 to i8
  br i1 %v3_13e50, label %bb24, label %bb25

bb24:                                             ; preds = %dec_label_pc_13e38
  %v2_13e40 = add i32 %v0_13e40, %tmp11
  %extract.t9 = trunc i32 %v2_13e40 to i8
  br label %bb25

bb25:                                             ; preds = %dec_label_pc_13e38, %bb24
  %v0_13e58.off0 = phi i8 [ %extract.t, %dec_label_pc_13e38 ], [ %extract.t9, %bb24 ]
  %v2_13e54 = or i32 %v0_13e54, %v1_13e54
  %v4_13e54 = icmp eq i32 %v2_13e54, 0
  store i1 %v4_13e54, i1* %cpsr_z.global-to-local, align 1
  %v3_13e58 = inttoptr i32 %v1_13e4c to i8*
  store i8 %v0_13e58.off0, i8* %v3_13e58, align 1
  %v0_13e5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13e5c, label %dec_label_pc_13e60, label %dec_label_pc_13da8thread-pre-split

dec_label_pc_13e60:                               ; preds = %bb25
  %v4_13e6010 = zext i8 %storemerge to i32
  store i32 %v4_13e6010, i32* @r3, align 4
  %v2_13e64 = icmp eq i8 %storemerge, 0
  store i1 %v2_13e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e64, label %dec_label_pc_13e60..thread2_crit_edge, label %bb26

dec_label_pc_13e60..thread2_crit_edge:            ; preds = %dec_label_pc_13e60
  %v0_13e70.pre = load i32, i32* %r8.global-to-local, align 4
  br label %.thread2

bb26:                                             ; preds = %dec_label_pc_13e60
  store i32 45, i32* @r3, align 4
  %v3_13e6c = load i32, i32* %r8.global-to-local, align 4
  %v4_13e6c = add i32 %v3_13e6c, -1
  %v5_13e6c = inttoptr i32 %v4_13e6c to i8*
  store i8 45, i8* %v5_13e6c, align 1
  %v6_13e6c = load i32, i32* %r8.global-to-local, align 4
  %v7_13e6c = add i32 %v6_13e6c, -1
  store i32 %v7_13e6c, i32* %r8.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13e60..thread2_crit_edge, %bb26
  %v0_13e70 = phi i32 [ %v0_13e70.pre, %dec_label_pc_13e60..thread2_crit_edge ], [ %v7_13e6c, %bb26 ]
  ret i32 %v0_13e70

; uselistorder directives
  uselistorder i32 %v0_13e40, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13e2c, { 0, 6, 1, 2, 3, 5, 4 }
  uselistorder i8 %storemerge, { 1, 0 }
  uselistorder i32 %v0_13d38, { 1, 0, 2 }
  uselistorder i32 %tmp21, { 0, 3, 2, 1 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i8 1, { 1, 2, 0, 3 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %dec_label_pc_13e38, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_13d6c, { 1, 0 }
}

define i32 @_fpmaxtostr(i32 %arg1, double %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  %tmp = fptrunc double %arg2 to float
  %tmp160 = bitcast float %tmp to i32
  store i32 %tmp160, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg4, i32* %stack_var_0, align 4
  %stack_var_-46 = alloca i8, align 1
  %stack_var_-164 = alloca i32, align 4
  %stack_var_-47 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-82 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-83 = alloca i32, align 4
  %stack_var_-81 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %v27_13e80 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v1_13e8c = add i32 %arg4, 8
  %v2_13e8c = inttoptr i32 %v1_13e8c to i8*
  %v3_13e8c = load i8, i8* %v2_13e8c, align 1
  %v4_13e8c = zext i8 %v3_13e8c to i32
  store i32 %v4_13e8c, i32* %sb.global-to-local, align 4
  %v1_13e90 = or i32 %v4_13e8c, 32
  %v7_13e94 = icmp eq i32 %v1_13e90, 97
  store i1 %v7_13e94, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg4, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v1_13eac = inttoptr i32 %arg4 to i32*
  %v2_13eac = load i32, i32* %v1_13eac, align 4
  store i32 %v2_13eac, i32* %fp.global-to-local, align 4
  store i32 %arg4, i32* %lr.global-to-local, align 4
  %v0_13eb4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_13eb4, i32* %r6.global-to-local, align 4
  store i32 45360, i32* %ip.global-to-local, align 4
  br i1 %v7_13e94, label %bb, label %bb201

bb:                                               ; preds = %entry
  %v2_13ebc = add nuw nsw i32 %v4_13e8c, 6
  store i32 %v2_13ebc, i32* %r3.global-to-local, align 4
  br label %bb201

bb201:                                            ; preds = %entry, %bb
  %v1_13ecc = phi i32 [ %v0_13eb4, %entry ], [ %v2_13ebc, %bb ]
  store i32 %tmp160, i32* %r5.global-to-local, align 4
  %v1_13ec4 = add i32 %arg4, 12
  %v2_13ec4 = inttoptr i32 %v1_13ec4 to i32*
  %v3_13ec4 = load i32, i32* %v2_13ec4, align 4
  store i32 %v3_13ec4, i32* %r2.global-to-local, align 4
  %v1_13ec8 = add i32 %arg4, 4
  %v2_13ec8 = inttoptr i32 %v1_13ec8 to i32*
  %v3_13ec8 = load i32, i32* %v2_13ec8, align 4
  store i32 %v3_13ec8, i32* @lr, align 4
  br i1 %v7_13e94, label %bb202, label %bb203

bb202:                                            ; preds = %bb201
  %v2_13ecc = urem i32 %v1_13ecc, 256
  store i32 %v2_13ecc, i32* %sb.global-to-local, align 4
  br label %bb203

bb203:                                            ; preds = %bb201, %bb202
  %v1_13ed0 = icmp slt i32 %v2_13eac, 0
  %v2_13ed0 = icmp eq i32 %v2_13eac, 0
  store i1 %v2_13ed0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %ip.global-to-local, align 4
  br i1 %v1_13ed0, label %bb204, label %bb205

bb204:                                            ; preds = %bb203
  store i32 6, i32* %fp.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %bb203, %bb204
  %v1_13ee0 = and i32 %v3_13ec4, 2
  %v2_13ee0 = icmp eq i32 %v1_13ee0, 0
  store i1 %v2_13ee0, i1* %cpsr_z.global-to-local, align 1
  store i8 0, i8* %stack_var_-46, align 1
  br i1 %v2_13ee0, label %dec_label_pc_13ef8, label %dec_label_pc_13f04

dec_label_pc_13ef8:                               ; preds = %bb205
  %v1_13ef8 = urem i32 %v3_13ec4, 2
  %v2_13ef8 = icmp eq i32 %v1_13ef8, 0
  store i1 %v2_13ef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ef8, label %dec_label_pc_13f08, label %dec_label_pc_13f04

dec_label_pc_13f04:                               ; preds = %dec_label_pc_13ef8, %bb205
  %storemerge = phi i32 [ 43, %bb205 ], [ 32, %dec_label_pc_13ef8 ]
  %v0_13f04.off0 = phi i8 [ 43, %bb205 ], [ 32, %dec_label_pc_13ef8 ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  store i8 %v0_13f04.off0, i8* %stack_var_-46, align 1
  br label %dec_label_pc_13f08

dec_label_pc_13f08:                               ; preds = %dec_label_pc_13ef8, %dec_label_pc_13f04
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_13eb4, i32* %r3.global-to-local, align 4
  store i32 %tmp160, i32* @r0, align 4
  store i32 %v0_13eb4, i32* %r1.global-to-local, align 4
  store i32 %tmp160, i32* @r2, align 4
  %v1_13f24 = fptrunc double %arg2 to float
  %v2_13f24 = bitcast float %v1_13f24 to i32
  %v9_13f24 = call i32 @__aeabi_dcmpeq(i32 %v2_13f24, i32 %v0_13eb4, i32 %v2_13f24, i32 %v0_13eb4, i32 0)
  store i32 %v9_13f24, i32* %r0.global-to-local, align 4
  %v2_13f28 = icmp eq i32 %v9_13f24, 0
  store i1 %v2_13f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f28, label %bb207, label %dec_label_pc_13f38

bb207:                                            ; preds = %dec_label_pc_13f08
  store i32 8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13fec

dec_label_pc_13f38:                               ; preds = %dec_label_pc_13f08
  %v0_13f38 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13f38, i32* @r0, align 4
  %v0_13f3c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13f3c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_13f48 = call i32 @__aeabi_dcmpeq(i32 %v0_13f38, i32 %v0_13f3c, i32 0, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v7_13f48, i32* %r0.global-to-local, align 4
  %v2_13f4c = icmp eq i32 %v7_13f48, 0
  store i1 %v2_13f4c, i1* %cpsr_z.global-to-local, align 1
  %v0_13f94 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f94 = sext i32 %v0_13f94 to i64
  %v2_13f94 = bitcast i64 %v1_13f94 to double
  br i1 %v2_13f4c, label %dec_label_pc_13f94, label %dec_label_pc_13f54

dec_label_pc_13f54:                               ; preds = %dec_label_pc_13f38
  store i32 1072693248, i32* %r1.global-to-local, align 4
  %v9_13f64 = fdiv double 0.000000e+00, %v2_13f94
  %v10_13f64 = fptrunc double %v9_13f64 to float
  %v11_13f64 = bitcast float %v10_13f64 to i32
  store i32 %v11_13f64, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_13f70 = call i32 @__aeabi_dcmplt(i32 %v11_13f64, i32 1072693248, i32 0, i32 0)
  store i32 %v4_13f70, i32* %r0.global-to-local, align 4
  %v2_13f74 = icmp eq i32 %v4_13f70, 0
  store i1 %v2_13f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f74, label %bb208, label %dec_label_pc_13f80

bb208:                                            ; preds = %dec_label_pc_13f54
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14160

dec_label_pc_13f80:                               ; preds = %dec_label_pc_13f54
  store i32 45, i32* %r3.global-to-local, align 4
  store i8 45, i8* %stack_var_-46, align 1
  br label %dec_label_pc_14160

dec_label_pc_13f94:                               ; preds = %dec_label_pc_13f38
  store i32 %v0_13f94, i32* @r0, align 4
  %v0_13f98 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13f98, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13fa4 = fptrunc double %v2_13f94 to float
  %v2_13fa4 = bitcast float %v1_13fa4 to i32
  %v6_13fa4 = call i32 @__aeabi_dcmplt(i32 %v2_13fa4, i32 %v0_13f98, i32 0, i32 0)
  store i32 %v6_13fa4, i32* %r0.global-to-local, align 4
  %v2_13fa8 = icmp eq i32 %v6_13fa4, 0
  store i1 %v2_13fa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fa8, label %dec_label_pc_13f94..thread9_crit_edge, label %bb209

dec_label_pc_13f94..thread9_crit_edge:            ; preds = %dec_label_pc_13f94
  %v0_13fc8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %.thread9

bb209:                                            ; preds = %dec_label_pc_13f94
  store i32 45, i32* %r2.global-to-local, align 4
  %v1_13fb0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fb0 = sub i32 0, %v1_13fb0
  store i32 %v2_13fb0, i32* %r4.global-to-local, align 4
  store i8 45, i8* %stack_var_-46, align 1
  store i32 %v2_13fb0, i32* %r6.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_13f94..thread9_crit_edge, %bb209
  %v0_13fc8 = phi i32 [ %v0_13fc8.pre, %dec_label_pc_13f94..thread9_crit_edge ], [ %v2_13fb0, %bb209 ]
  %v0_13fc4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fc4 = sext i32 %v0_13fc4 to i64
  %v2_13fc4 = bitcast i64 %v1_13fc4 to double
  %v9_13fcc = fmul double %v2_13fc4, 0.000000e+00
  %v10_13fcc = fptrunc double %v9_13fcc to float
  %v11_13fcc = bitcast float %v10_13fcc to i32
  store i32 %v11_13fcc, i32* @r2, align 4
  store i32 %v0_13fc8, i32* %r3.global-to-local, align 4
  store i32 %v0_13fc4, i32* @r0, align 4
  store i32 %v0_13fc8, i32* %r1.global-to-local, align 4
  %v7_13fe0 = call i32 @__aeabi_dcmpeq(i32 %v0_13fc4, i32 %v0_13fc8, i32 %v11_13fcc, i32 %v0_13fc8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v7_13fe0, i32* %r0.global-to-local, align 4
  %v2_13fe4 = icmp eq i32 %v7_13fe0, 0
  store i1 %v2_13fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fe4, label %dec_label_pc_14038, label %.thread9.dec_label_pc_13fec_crit_edge

.thread9.dec_label_pc_13fec_crit_edge:            ; preds = %.thread9
  %v3_13fec.pre = load i32, i32* %stack_var_0, align 4
  br label %dec_label_pc_13fec

dec_label_pc_13fec:                               ; preds = %bb207, %.thread9.dec_label_pc_13fec_crit_edge
  %v3_13fec = phi i32 [ %v3_13fec.pre, %.thread9.dec_label_pc_13fec_crit_edge ], [ %arg4, %bb207 ]
  %v1_13f30.v0_13f1c5 = phi i32 [ 0, %.thread9.dec_label_pc_13fec_crit_edge ], [ 8, %bb207 ]
  store i32 %v3_13fec, i32* %ip.global-to-local, align 4
  %v2_13ff4 = add i32 %v3_13fec, 16
  %v3_13ff4 = inttoptr i32 %v2_13ff4 to i32*
  store i32 32, i32* %v3_13ff4, align 4
  %v0_13ffc = load i32, i32* %sb.global-to-local, align 4
  %v7_13ffc = icmp eq i32 %v0_13ffc, 96
  store i1 %v7_13ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 3, i32* %stack_var_-164, align 4
  %tmp274 = icmp ult i32 %v0_13ffc, 97
  br i1 %tmp274, label %bb210, label %.thread124

bb210:                                            ; preds = %dec_label_pc_13fec
  %v5_14010 = or i32 %v1_13f30.v0_13f1c5, 4
  store i32 %v5_14010, i32* %r3.global-to-local, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_13fec, %bb210
  %v4_14014 = phi i32 [ %v5_14010, %bb210 ], [ 3, %dec_label_pc_13fec ]
  %v4_14014.v1_13f30.v0_13f1c = select i1 %tmp274, i32 %v4_14014, i32 %v1_13f30.v0_13f1c5
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34056), i32* %r3.global-to-local, align 4
  %v2_14028 = add i32 %v4_14014.v1_13f30.v0_13f1c, add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34056)
  store i32 %v2_14028, i32* %r2.global-to-local, align 4
  %v2_1402c = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v2_1402c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14554

dec_label_pc_14038:                               ; preds = %.thread9
  %v0_14038 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14038, i32* %r1.global-to-local, align 4
  store i32 1100470148, i32* %r3.global-to-local, align 4
  %v0_14040 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14040, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  %v6_14048 = call i32 @__aeabi_dcmplt(i32 %v0_14040, i32 %v0_14038, i32 0, i32 1100470148)
  store i32 %v6_14048, i32* %r0.global-to-local, align 4
  %v2_1404c = icmp eq i32 %v6_14048, 0
  store i1 %v2_1404c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1404c, label %bb212, label %bb211

bb211:                                            ; preds = %dec_label_pc_14038
  store i32 1, i32* %r0.global-to-local, align 4
  br label %bb212

bb212:                                            ; preds = %dec_label_pc_14038, %bb211
  %v0_14054 = phi i32 [ 0, %dec_label_pc_14038 ], [ 1, %bb211 ]
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34032), i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34032), i32* %stack_var_-208, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  store i32 256, i32* %r4.global-to-local, align 4
  %v2_14088 = icmp eq i32 %v0_14054, 0
  br label %dec_label_pc_14078

dec_label_pc_14078:                               ; preds = %dec_label_pc_14110.dec_label_pc_14078_crit_edge, %bb212
  %v2_14080 = phi i32 [ add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34032), %bb212 ], [ %v2_14080.pre, %dec_label_pc_14110.dec_label_pc_14078_crit_edge ]
  %v0_1407c = phi i32 [ 9, %bb212 ], [ %v0_14110, %dec_label_pc_14110.dec_label_pc_14078_crit_edge ]
  %v2_140c0 = phi i32 [ 8, %bb212 ], [ %stack_var_-192.3, %dec_label_pc_14110.dec_label_pc_14078_crit_edge ]
  store i32 %v0_14054, i32* %r2.global-to-local, align 4
  %v1_1407c = add i32 %v0_1407c, -1
  store i32 %v1_1407c, i32* %sl.global-to-local, align 4
  store i32 %v2_14080, i32* @lr, align 4
  %v3_14084 = mul i32 %v1_1407c, 8
  store i32 %v3_14084, i32* %r3.global-to-local, align 4
  store i1 %v2_14088, i1* %cpsr_z.global-to-local, align 1
  %v0_1408c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1408c, i32* %r0.global-to-local, align 4
  %v0_14090 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14090, i32* %r1.global-to-local, align 4
  %v2_14094 = add i32 %v3_14084, %v2_14080
  store i32 %v2_14094, i32* %ip.global-to-local, align 4
  %v1_140d0 = inttoptr i32 %v2_14094 to i32*
  %v2_140d0 = load i32, i32* %v1_140d0, align 4
  %v3_140d0 = sext i32 %v2_140d0 to i64
  %v1_140d4 = sext i32 %v0_1408c to i64
  %v2_140d4 = bitcast i64 %v1_140d4 to double
  br i1 %v2_14088, label %dec_label_pc_140d0, label %dec_label_pc_1409c

dec_label_pc_1409c:                               ; preds = %dec_label_pc_14078
  %v8_140a0 = bitcast i64 %v3_140d0 to double
  %v9_140a0 = fmul double %v2_140d4, %v8_140a0
  %v10_140a0 = fptrunc double %v9_140a0 to float
  %v11_140a0 = bitcast float %v10_140a0 to i32
  store i32 %v11_140a0, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  store i32 1104006501, i32* %r3.global-to-local, align 4
  store i32 %v11_140a0, i32* %r7.global-to-local, align 4
  store i32 %v0_14090, i32* %r8.global-to-local, align 4
  %v4_140b4 = call i32 @__aeabi_dcmplt(i32 %v11_140a0, i32 %v0_14090, i32 0, i32 1104006501)
  store i32 %v4_140b4, i32* %r0.global-to-local, align 4
  %v2_140b8 = icmp eq i32 %v4_140b4, 0
  store i1 %v2_140b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140b8, label %dec_label_pc_14110, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_1409c
  %v1_140c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_140c0 = sub i32 %v2_140c0, %v1_140c0
  store i32 %v3_140c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14108

dec_label_pc_140d0:                               ; preds = %dec_label_pc_14078
  store i32 %v0_14090, i32* @r1, align 4
  %v8_140dc = bitcast i64 %v3_140d0 to double
  %v9_140dc = fdiv double %v2_140d4, %v8_140dc
  %v10_140dc = fptrunc double %v9_140dc to float
  %v11_140dc = bitcast float %v10_140dc to i32
  store i32 %v11_140dc, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  store i32 1100470148, i32* @r3, align 4
  store i32 %v11_140dc, i32* %r7.global-to-local, align 4
  store i32 %v0_14090, i32* %r8.global-to-local, align 4
  %v4_140f0 = call i32 @__aeabi_dcmpge(i32 %v11_140dc, i32 %v0_14090, i32 0, i32 1100470148)
  store i32 %v4_140f0, i32* %r0.global-to-local, align 4
  %v2_140f4 = icmp eq i32 %v4_140f0, 0
  store i1 %v2_140f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140f4, label %dec_label_pc_14110, label %dec_label_pc_140fc

dec_label_pc_140fc:                               ; preds = %dec_label_pc_140d0
  %v1_14100 = load i32, i32* %r4.global-to-local, align 4
  %v2_14100 = add i32 %v1_14100, %v2_140c0
  store i32 %v2_14100, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14108

dec_label_pc_14108:                               ; preds = %.thread10, %dec_label_pc_140fc
  %stack_var_-192.2 = phi i32 [ %v2_14100, %dec_label_pc_140fc ], [ %v3_140c0, %.thread10 ]
  %v0_14108 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_14108, i32* %r5.global-to-local, align 4
  %v0_1410c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1410c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14110

dec_label_pc_14110:                               ; preds = %dec_label_pc_1409c, %dec_label_pc_140d0, %dec_label_pc_14108
  %stack_var_-192.3 = phi i32 [ %v2_140c0, %dec_label_pc_140d0 ], [ %stack_var_-192.2, %dec_label_pc_14108 ], [ %v2_140c0, %dec_label_pc_1409c ]
  %v0_14110 = load i32, i32* %sl.global-to-local, align 4
  %v2_14110 = icmp eq i32 %v0_14110, 0
  store i1 %v2_14110, i1* %cpsr_z.global-to-local, align 1
  %v0_14114 = load i32, i32* %r4.global-to-local, align 4
  %v3_14114 = sdiv i32 %v0_14114, 2
  store i32 %v3_14114, i32* %r4.global-to-local, align 4
  br i1 %v2_14110, label %dec_label_pc_1411c, label %dec_label_pc_14110.dec_label_pc_14078_crit_edge

dec_label_pc_14110.dec_label_pc_14078_crit_edge:  ; preds = %dec_label_pc_14110
  %v2_14080.pre = load i32, i32* %stack_var_-208, align 4
  br label %dec_label_pc_14078

dec_label_pc_1411c:                               ; preds = %dec_label_pc_14110
  %v0_1411c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1411c, i32* @r0, align 4
  %v0_14120 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14120, i32* @r1, align 4
  store i32 0, i32* @r2, align 4
  store i32 1104006501, i32* @r3, align 4
  %v6_1412c = call i32 @__aeabi_dcmpge(i32 %v0_1411c, i32 %v0_14120, i32 0, i32 1104006501)
  store i32 %v6_1412c, i32* %r0.global-to-local, align 4
  %v2_14130 = icmp eq i32 %v6_1412c, 0
  store i1 %v2_14130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14130, label %dec_label_pc_14160, label %dec_label_pc_14138

dec_label_pc_14138:                               ; preds = %dec_label_pc_1411c
  %v0_14138 = load i32, i32* %r5.global-to-local, align 4
  %v1_14138 = sext i32 %v0_14138 to i64
  %v2_14138 = bitcast i64 %v1_14138 to double
  %v0_1413c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1413c, i32* %r1.global-to-local, align 4
  store i32 1076101120, i32* %r3.global-to-local, align 4
  %v9_14148 = fdiv double %v2_14138, 0.000000e+00
  %v10_14148 = fptrunc double %v9_14148 to float
  %v11_14148 = bitcast float %v10_14148 to i32
  store i32 %v11_14148, i32* %r0.global-to-local, align 4
  store i32 %v11_14148, i32* %r5.global-to-local, align 4
  %v1_14158 = add i32 %stack_var_-192.3, 1
  store i32 %v1_14158, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14160

dec_label_pc_14160:                               ; preds = %dec_label_pc_14138, %bb208, %dec_label_pc_1411c, %dec_label_pc_13f80
  %stack_var_-192.4 = phi i32 [ %stack_var_-192.3, %dec_label_pc_1411c ], [ -1, %dec_label_pc_13f80 ], [ -1, %bb208 ], [ %v1_14158, %dec_label_pc_14138 ]
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_14164 = ptrtoint i32* %stack_var_-81 to i32
  store i32 %v2_14164, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_14168

dec_label_pc_14168:                               ; preds = %dec_label_pc_141e0, %dec_label_pc_14160
  %v0_14168 = load i32, i32* %r6.global-to-local, align 4
  %v0_1416c = load i32, i32* %r5.global-to-local, align 4
  %v1_14170 = sext i32 %v0_1416c to i64
  %v2_14170 = bitcast i64 %v1_14170 to double
  %v3_14170 = fptoui double %v2_14170 to i32
  store i32 %v3_14170, i32* %r8.global-to-local, align 4
  store i32 %v3_14170, i32* %r2.global-to-local, align 4
  store i32 %v0_14168, i32* %r3.global-to-local, align 4
  store i32 %v0_1416c, i32* @r0, align 4
  store i32 %v0_14168, i32* %r1.global-to-local, align 4
  %v6_1418c = call i32 @__aeabi_dsub(i32 %v0_1416c, i32 %v0_14168, i32 %v3_14170, i32 %v0_14168)
  %v7_1418c = sext i32 %v6_1418c to i64
  %v8_1418c = bitcast i64 %v7_1418c to double
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1104006501, i32* %r3.global-to-local, align 4
  %v9_14198 = fmul double %v8_1418c, 0.000000e+00
  %v10_14198 = fptrunc double %v9_14198 to float
  %v11_14198 = bitcast float %v10_14198 to i32
  store i32 %v11_14198, i32* %r0.global-to-local, align 4
  %v0_1419c = load i32, i32* %sl.global-to-local, align 4
  %v1_1419c = add i32 %v0_1419c, 9
  store i32 %v1_1419c, i32* %sl.global-to-local, align 4
  store i32 %v11_14198, i32* %r5.global-to-local, align 4
  store i32 %v0_14168, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_141ac.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_141ac

dec_label_pc_141ac:                               ; preds = %dec_label_pc_141ac.dec_label_pc_141ac_crit_edge, %dec_label_pc_14168
  %v1_141c0 = phi i32 [ %v1_141c0.pre, %dec_label_pc_141ac.dec_label_pc_141ac_crit_edge ], [ %v1_1419c, %dec_label_pc_14168 ]
  %v0_141b8 = phi i32 [ %v0_141d4, %dec_label_pc_141ac.dec_label_pc_141ac_crit_edge ], [ 0, %dec_label_pc_14168 ]
  %v0_141c4 = phi i32 [ %v2_141d0, %dec_label_pc_141ac.dec_label_pc_141ac_crit_edge ], [ %v0_141ac.pre, %dec_label_pc_14168 ]
  %v3_141b4 = urem i32 %v0_141c4, 10
  %v1_141b8 = add i32 %v0_141b8, 1
  store i32 %v1_141b8, i32* %r7.global-to-local, align 4
  %v1_141bc = or i32 %v3_141b4, 48
  store i32 %v1_141bc, i32* %r2.global-to-local, align 4
  %v2_141c0 = sub i32 %v1_141c0, %v1_141b8
  store i32 %v2_141c0, i32* %r3.global-to-local, align 4
  store i32 %v0_141c4, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_141cc = trunc i32 %v1_141bc to i8
  %v3_141cc = inttoptr i32 %v2_141c0 to i8*
  store i8 %v1_141cc, i8* %v3_141cc, align 1
  %v0_141d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_141d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_141d0 = udiv i32 %v0_141d0, %v1_141d0
  store i32 %v2_141d0, i32* %r0.global-to-local, align 4
  %v0_141d4 = load i32, i32* %r7.global-to-local, align 4
  %v7_141d4 = icmp eq i32 %v0_141d4, 8
  store i1 %v7_141d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_141d0, i32* %r8.global-to-local, align 4
  %v7_141dc = icmp slt i32 %v0_141d4, 9
  br i1 %v7_141dc, label %dec_label_pc_141ac.dec_label_pc_141ac_crit_edge, label %dec_label_pc_141e0

dec_label_pc_141ac.dec_label_pc_141ac_crit_edge:  ; preds = %dec_label_pc_141ac
  %v1_141c0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_141ac

dec_label_pc_141e0:                               ; preds = %dec_label_pc_141ac
  %v0_141e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_141e0 = add i32 %v0_141e0, 1
  store i32 %v1_141e0, i32* %r4.global-to-local, align 4
  %v7_141e4 = icmp eq i32 %v0_141e0, 0
  store i1 %v7_141e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_141e4, label %dec_label_pc_14168, label %dec_label_pc_141ec

dec_label_pc_141ec:                               ; preds = %dec_label_pc_141e0
  %v0_141ec = load i32, i32* %sb.global-to-local, align 4
  %v7_141ec = icmp eq i32 %v0_141ec, 96
  store i1 %v7_141ec, i1* %cpsr_z.global-to-local, align 1
  %tmp275 = icmp ult i32 %v0_141ec, 97
  br i1 %tmp275, label %bb213, label %thread-pre-split

bb213:                                            ; preds = %dec_label_pc_141ec
  %v5_141fc = add i32 %v0_141ec, 32
  store i32 %v5_141fc, i32* %r3.global-to-local, align 4
  %v5_14200 = urem i32 %v5_141fc, 256
  store i32 %v5_14200, i32* %sb.global-to-local, align 4
  br label %bb214

thread-pre-split:                                 ; preds = %dec_label_pc_141ec
  %v4_141f8.pre129134 = load i32, i32* %r3.global-to-local, align 4
  %phitmp = urem i32 %v4_141f8.pre129134, 256
  br label %bb214

bb214:                                            ; preds = %thread-pre-split, %bb213
  %v4_141f8126130 = phi i32 [ %phitmp, %thread-pre-split ], [ 69, %bb213 ]
  %v0_14220 = phi i32 [ %v0_141ec, %thread-pre-split ], [ %v5_14200, %bb213 ]
  %v7_14204 = icmp eq i32 %v0_14220, 103
  %. = zext i1 %v7_14204 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v0_14210 = load i32, i32* %fp.global-to-local, align 4
  %v2_14210 = icmp eq i32 %v0_14210, 0
  store i1 %v2_14210, i1* %cpsr_z.global-to-local, align 1
  %tmp217 = icmp slt i32 %v0_14210, 1
  br i1 %tmp217, label %.thread16, label %bb218

.thread16:                                        ; preds = %bb214
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb220

bb218:                                            ; preds = %bb214
  %v2_14218 = icmp eq i1 %v7_14204, false
  store i1 %v2_14218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14218, label %bb220, label %bb219

bb219:                                            ; preds = %bb218
  %v2_1421c = add i32 %v0_14210, -1
  store i32 %v2_1421c, i32* %fp.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %.thread16, %bb218, %bb219
  %v0_14230 = phi i32 [ %v0_14210, %.thread16 ], [ %v0_14210, %bb218 ], [ %v2_1421c, %bb219 ]
  %v7_14220 = icmp eq i32 %v0_14220, 102
  store i1 %v7_14220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14220, label %dec_label_pc_1422c, label %bb221

bb221:                                            ; preds = %bb220
  store i32 %v0_14230, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14254

dec_label_pc_1422c:                               ; preds = %bb220
  store i32 %stack_var_-192.4, i32* %r3.global-to-local, align 4
  %v2_14230 = add i32 %v0_14230, %stack_var_-192.4
  store i32 %v2_14230, i32* %ip.global-to-local, align 4
  %v8_14234 = icmp eq i32 %v2_14230, -1
  store i1 %v8_14234, i1* %cpsr_z.global-to-local, align 1
  %v6_14238 = icmp slt i32 %v2_14230, -1
  br i1 %v6_14238, label %dec_label_pc_1423c, label %dec_label_pc_14254

dec_label_pc_1423c:                               ; preds = %dec_label_pc_1422c
  %v2_1423c = ptrtoint i32* %stack_var_-83 to i32
  store i32 %v2_1423c, i32* %r0.global-to-local, align 4
  store i32 48, i32* %r1.global-to-local, align 4
  store i32 17, i32* @r2, align 4
  %v2_14248 = bitcast i32* %stack_var_-83 to i8*
  %v3_14248 = call i32 @__GI_memset(i8* %v2_14248, i32 48)
  store i32 %v3_14248, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14254

dec_label_pc_14254:                               ; preds = %bb221, %dec_label_pc_1422c, %dec_label_pc_1423c
  %v1_1429892 = phi i32 [ %v3_14248, %dec_label_pc_1423c ], [ %v2_141d0, %dec_label_pc_1422c ], [ %v2_141d0, %bb221 ]
  %v1_1427c = phi i32 [ -1, %dec_label_pc_1423c ], [ %v2_14230, %dec_label_pc_1422c ], [ %v0_14230, %bb221 ]
  %stack_var_-192.5 = phi i32 [ -1, %dec_label_pc_1423c ], [ %stack_var_-192.4, %dec_label_pc_1422c ], [ %stack_var_-192.4, %bb221 ]
  %v1_14258 = add i32 %v1_1427c, -16
  %v3_14258 = sub i32 15, %v1_1427c
  %v4_14258 = and i32 %v3_14258, %v1_1427c
  %v5_14258 = icmp slt i32 %v4_14258, 0
  %v6_14258 = icmp slt i32 %v1_14258, 0
  %v7_14258 = icmp eq i32 %v1_1427c, 16
  store i1 %v7_14258, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 48, i32* %stack_var_-82, align 4
  %v2_14264 = ptrtoint i32* %stack_var_-83 to i32
  store i32 %v2_14264, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-83, align 4
  %v3_1426c = xor i1 %v6_14258, %v5_14258
  %v4_1426c = or i1 %v7_14258, %v3_1426c
  br i1 %v4_1426c, label %dec_label_pc_14278, label %.thread140

.thread140:                                       ; preds = %dec_label_pc_14254
  %v7_1426c137141 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v7_1426c137141, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.preheader

dec_label_pc_14278:                               ; preds = %dec_label_pc_14254
  %v2_14278 = ptrtoint i32* %stack_var_-82 to i32
  %v2_1427c = add i32 %v1_1427c, %v2_14278
  store i32 %v2_1427c, i32* %r3.global-to-local, align 4
  %v1_14280 = add i32 %v2_1427c, 2
  %v2_14280 = inttoptr i32 %v1_14280 to i8*
  %v3_14280 = load i8, i8* %v2_14280, align 1
  %v4_14280 = zext i8 %v3_14280 to i32
  store i32 %v4_14280, i32* %r2.global-to-local, align 4
  store i32 %v1_14280, i32* %r1.global-to-local, align 4
  %v2_14288 = icmp ugt i8 %v3_14280, 51
  %v7_14288 = icmp eq i8 %v3_14280, 52
  store i1 %v7_14288, i1* %cpsr_z.global-to-local, align 1
  %v2_1428c = xor i1 %v2_14288, true
  %v3_1428c = or i1 %v7_14288, %v2_1428c
  br i1 %v3_1428c, label %bb222, label %bb223

bb222:                                            ; preds = %dec_label_pc_14278
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb223

bb223:                                            ; preds = %dec_label_pc_14278, %bb222
  %v1_1429890 = phi i32 [ %v1_1429892, %dec_label_pc_14278 ], [ 0, %bb222 ]
  %v2_14290 = xor i1 %v7_14288, true
  %v3_14290 = and i1 %v2_14288, %v2_14290
  br i1 %v3_14290, label %bb224, label %.preheader

bb224:                                            ; preds = %bb223
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %bb223, %bb224, %.thread140, %._crit_edge87
  %v0_14294 = phi i32 [ %v0_14294.pre, %._crit_edge87 ], [ %v7_1426c137141, %.thread140 ], [ %v1_14280, %bb223 ], [ %v1_14280, %bb224 ]
  %v1_14298 = phi i32 [ %v1_14298.pre, %._crit_edge87 ], [ 0, %.thread140 ], [ %v1_1429890, %bb223 ], [ 1, %bb224 ]
  %v1_14294 = add i32 %v0_14294, -1
  %v2_14294 = inttoptr i32 %v1_14294 to i8*
  %v3_14294 = load i8, i8* %v2_14294, align 1
  %v4_14294 = zext i8 %v3_14294 to i32
  store i32 %v1_14294, i32* %r1.global-to-local, align 4
  %v2_14298 = add i32 %v4_14294, %v1_14298
  %v1_1429c = urem i32 %v2_14298, 256
  store i32 %v1_1429c, i32* %r3.global-to-local, align 4
  %v2_142a0 = icmp ugt i32 %v1_1429c, 56
  %v7_142a0 = icmp eq i32 %v1_1429c, 57
  store i1 %v7_142a0, i1* %cpsr_z.global-to-local, align 1
  %v2_142a4 = xor i1 %v2_142a0, true
  %v3_142a4 = or i1 %v7_142a0, %v2_142a4
  br i1 %v3_142a4, label %bb225, label %bb226

bb225:                                            ; preds = %.preheader
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb226

bb226:                                            ; preds = %.preheader, %bb225
  %v2_142a8 = xor i1 %v7_142a0, true
  %v3_142a8 = and i1 %v2_142a0, %v2_142a8
  br i1 %v3_142a8, label %bb227, label %bb226.bb228_crit_edge

bb226.bb228_crit_edge:                            ; preds = %bb226
  %v1_142b0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb228

bb227:                                            ; preds = %bb226
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb228

bb228:                                            ; preds = %bb226.bb228_crit_edge, %bb227
  %v1_142b0 = phi i32 [ %v1_142b0.pre, %bb226.bb228_crit_edge ], [ 1, %bb227 ]
  %v7_142ac = icmp eq i32 %v1_1429c, 48
  store i1 %v7_142ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_142ac, label %bb229, label %._crit_edge93

bb229:                                            ; preds = %bb228
  %v2_142b0 = or i32 %v1_142b0, 1
  store i32 %v2_142b0, i32* %r2.global-to-local, align 4
  br label %._crit_edge93

._crit_edge93:                                    ; preds = %bb228, %bb229
  %v0_142b4 = phi i32 [ 1, %bb229 ], [ %v1_142b0, %bb228 ]
  %v2_142b4 = icmp eq i32 %v0_142b4, 0
  store i1 %v2_142b4, i1* %cpsr_z.global-to-local, align 1
  %v1_142b8 = trunc i32 %v2_14298 to i8
  store i8 %v1_142b8, i8* %v2_14294, align 1
  %v0_142bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_142bc, label %dec_label_pc_142c0, label %._crit_edge87

._crit_edge87:                                    ; preds = %._crit_edge93
  %v1_14298.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_14294.pre = load i32, i32* %r1.global-to-local, align 4
  br label %.preheader

dec_label_pc_142c0:                               ; preds = %._crit_edge93
  store i32 %v2_14264, i32* %r2.global-to-local, align 4
  %v2_142c4 = ptrtoint i32* %stack_var_-82 to i32
  store i32 %v2_142c4, i32* %r3.global-to-local, align 4
  %v0_142c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_142c8 = icmp uge i32 %v0_142c8, %v2_142c4
  %v9_142c8 = icmp eq i32 %v0_142c8, %v2_142c4
  store i1 %v9_142c8, i1* %cpsr_z.global-to-local, align 1
  %v2_142cc = xor i1 %v3_142c8, true
  %v3_142cc = or i1 %v9_142c8, %v2_142cc
  br i1 %v3_142cc, label %bb230, label %.thread145

bb230:                                            ; preds = %dec_label_pc_142c0
  store i32 %stack_var_-192.5, i32* @lr, align 4
  store i32 %v2_142c4, i32* %r2.global-to-local, align 4
  store i32 %v2_142c4, i32* %r1.global-to-local, align 4
  br label %.thread145

.thread145:                                       ; preds = %dec_label_pc_142c0, %bb230
  %v2_142ec = phi i32 [ %v2_142c4, %bb230 ], [ %v0_142c8, %dec_label_pc_142c0 ]
  %v4_142e0144 = phi i32 [ %v2_142c4, %bb230 ], [ %v2_14264, %dec_label_pc_142c0 ]
  %v2_142d8 = xor i1 %v9_142c8, true
  %v3_142d8 = and i1 %v3_142c8, %v2_142d8
  br i1 %v3_142d8, label %bb231, label %bb232

bb231:                                            ; preds = %.thread145
  store i32 %stack_var_-192.5, i32* %r0.global-to-local, align 4
  br label %bb232

bb232:                                            ; preds = %.thread145, %bb231
  br i1 %v3_142cc, label %bb233, label %bb234

bb233:                                            ; preds = %bb232
  %v4_142dc = load i32, i32* @lr, align 4
  %v5_142dc = add i32 %v4_142dc, 1
  store i32 %v5_142dc, i32* %r0.global-to-local, align 4
  br label %bb234

bb234:                                            ; preds = %bb232, %bb233
  br i1 %v3_142d8, label %bb235, label %bb236

bb235:                                            ; preds = %bb234
  %v5_142e0 = add i32 %v4_142e0144, 2
  store i32 %v5_142e0, i32* %r2.global-to-local, align 4
  br label %bb236

bb236:                                            ; preds = %bb234, %bb235
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_142e8 = load i32, i32* %sb.global-to-local, align 4
  %v7_142e8 = icmp eq i32 %v0_142e8, 103
  store i1 %v7_142e8, i1* %cpsr_z.global-to-local, align 1
  %v3_142ec = add i32 %v2_142ec, 1
  %v4_142ec = inttoptr i32 %v3_142ec to i8*
  store i8 0, i8* %v4_142ec, align 1
  %v0_142f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_142f0 = add i32 %v0_142f0, 1
  store i32 %v1_142f0, i32* %lr.global-to-local, align 4
  %v0_142f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_142f4, label %dec_label_pc_142f8, label %dec_label_pc_14320

dec_label_pc_142f8:                               ; preds = %bb236
  %v0_142f8 = load i32, i32* %r0.global-to-local, align 4
  %v1_142f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_142f8 = sub i32 %v0_142f8, %v1_142f8
  %v4_142f8 = xor i32 %v1_142f8, %v0_142f8
  %v5_142f8 = xor i32 %v2_142f8, %v0_142f8
  %v6_142f8 = and i32 %v5_142f8, %v4_142f8
  %v7_142f8 = icmp slt i32 %v6_142f8, 0
  %v8_142f8 = icmp slt i32 %v2_142f8, 0
  %v9_142f8 = icmp eq i32 %v0_142f8, %v1_142f8
  %v3_142fc = xor i1 %v8_142f8, %v7_142f8
  %v4_142fc = or i1 %v9_142f8, %v3_142fc
  %.258 = zext i1 %v4_142fc to i32
  store i32 %.258, i32* %r3.global-to-local, align 4
  %v1_14304 = add i32 %v0_142f8, 4
  %v3_14304 = sub i32 0, %v0_142f8
  %v4_14304 = and i32 %v1_14304, %v3_14304
  %v5_14304 = icmp slt i32 %v4_14304, 0
  %v6_14304 = icmp slt i32 %v1_14304, 0
  %v7_14304 = icmp eq i32 %v1_14304, 0
  store i1 %v7_14304, i1* %cpsr_z.global-to-local, align 1
  %v2_14308 = xor i1 %v6_14304, %v5_14304
  br i1 %v2_14308, label %.thread21, label %bb239

.thread21:                                        ; preds = %dec_label_pc_142f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1463c

bb239:                                            ; preds = %dec_label_pc_142f8
  %v2_1430c = icmp eq i1 %v4_142fc, false
  store i1 %v2_1430c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1430c, label %dec_label_pc_1463c, label %.thread24

.thread24:                                        ; preds = %bb239
  %v3_14310 = sub i32 %v1_142f8, %v0_142f8
  store i32 %v3_14310, i32* %fp.global-to-local, align 4
  store i32 102, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1432c

dec_label_pc_14320:                               ; preds = %bb236
  %v0_14320 = load i32, i32* %sb.global-to-local, align 4
  %v7_14320 = icmp eq i32 %v0_14320, 102
  store i1 %v7_14320, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_14320, i32* %r8.global-to-local, align 4
  br i1 %v7_14320, label %dec_label_pc_14320.dec_label_pc_1432c_crit_edge, label %dec_label_pc_1433c

dec_label_pc_14320.dec_label_pc_1432c_crit_edge:  ; preds = %dec_label_pc_14320
  %v0_1432c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1432c

dec_label_pc_1432c:                               ; preds = %.thread24, %dec_label_pc_14320.dec_label_pc_1432c_crit_edge
  %v0_1432c = phi i32 [ %v0_1432c.pre, %dec_label_pc_14320.dec_label_pc_1432c_crit_edge ], [ %v0_142f8, %.thread24 ]
  %v1_1432c = icmp slt i32 %v0_1432c, 0
  %v2_1432c = icmp eq i32 %v0_1432c, 0
  store i1 %v2_1432c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1432c, label %bb240, label %dec_label_pc_1433c

bb240:                                            ; preds = %dec_label_pc_1432c
  store i32 48, i32* %r3.global-to-local, align 4
  %v5_14334 = load i32, i32* %r2.global-to-local, align 4
  %v6_14334 = add i32 %v5_14334, -1
  %v7_14334 = inttoptr i32 %v6_14334 to i8*
  store i8 48, i8* %v7_14334, align 1
  %v8_14334 = load i32, i32* %r2.global-to-local, align 4
  %v9_14334 = add i32 %v8_14334, -1
  store i32 %v9_14334, i32* %r2.global-to-local, align 4
  %v0_14338.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_1436c.pre.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1433c

dec_label_pc_1433c:                               ; preds = %bb240, %dec_label_pc_1432c, %dec_label_pc_1463c, %dec_label_pc_14320
  %v1_1436c = phi i32 [ %v1_142f0, %dec_label_pc_14320 ], [ %v1_142f0, %dec_label_pc_1463c ], [ %v1_1436c.pre.pre, %bb240 ], [ %v1_142f0, %dec_label_pc_1432c ]
  %v1_143e430 = phi i32 [ 0, %dec_label_pc_14320 ], [ 0, %dec_label_pc_1463c ], [ %v0_14338.pre, %bb240 ], [ %v0_1432c, %dec_label_pc_1432c ]
  store i32 %v1_143e430, i32* %r1.global-to-local, align 4
  store i32 1, i32* %stack_var_-164, align 4
  store i32 176, i32* %r4.global-to-local, align 4
  %v2_14348 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_14348, i32* %r3.global-to-local, align 4
  %v0_14354 = load i32, i32* %r2.global-to-local, align 4
  %v1_14354 = inttoptr i32 %v0_14354 to i8*
  %v2_14354 = load i8, i8* %v1_14354, align 1
  %v3_14354 = zext i8 %v2_14354 to i32
  store i32 %v3_14354, i32* %r3.global-to-local, align 4
  %v5_14354 = add i32 %v0_14354, 1
  store i32 %v5_14354, i32* %r2.global-to-local, align 4
  %v1_14358 = icmp slt i32 %v1_143e430, 0
  %v2_14358 = icmp eq i32 %v1_143e430, 0
  store i1 %v2_14358, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v5_14354, i32* %r6.global-to-local, align 4
  store i32 %v3_14354, i32* %stack_var_-42, align 4
  %v2_1436c = sub i32 %v1_1436c, %v5_14354
  store i32 %v2_1436c, i32* %ip.global-to-local, align 4
  br i1 %v1_14358, label %.thread, label %dec_label_pc_14378

.thread:                                          ; preds = %dec_label_pc_1433c
  %v5_14370 = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v5_14370, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_143f4

dec_label_pc_14378:                               ; preds = %dec_label_pc_1433c
  store i32 112, i32* %r3.global-to-local, align 4
  %v2_1437c = sub i32 %v1_143e430, %v2_1436c
  %v4_1437c = xor i32 %v2_1436c, %v1_143e430
  %v5_1437c = xor i32 %v2_1437c, %v1_143e430
  %v6_1437c = and i32 %v5_1437c, %v4_1437c
  %v7_1437c = icmp slt i32 %v6_1437c, 0
  %v8_1437c = icmp slt i32 %v2_1437c, 0
  %v9_1437c = icmp eq i32 %v1_143e430, %v2_1436c
  store i1 %v9_1437c, i1* %cpsr_z.global-to-local, align 1
  store i32 112, i32* %stack_var_-156, align 4
  %v2_14388 = xor i1 %v8_1437c, %v7_1437c
  br i1 %v2_14388, label %dec_label_pc_143d4, label %dec_label_pc_1438c

dec_label_pc_1438c:                               ; preds = %dec_label_pc_14378
  store i32 %v2_1437c, i32* %r2.global-to-local, align 4
  %v2_14390 = icmp eq i32 %v2_1437c, 0
  store i1 %v2_14390, i1* %cpsr_z.global-to-local, align 1
  %v2_14394 = ptrtoint i32* %stack_var_-180 to i32
  store i32 %v2_14394, i32* %lr.global-to-local, align 4
  %tmp241 = icmp slt i32 %v2_1437c, 1
  br i1 %tmp241, label %.thread148, label %dec_label_pc_143a8

.thread148:                                       ; preds = %dec_label_pc_1438c
  %v7_1439c = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v7_1439c, i32* %r7.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %.thread34

dec_label_pc_143a8:                               ; preds = %dec_label_pc_1438c
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34053), i32* %r3.global-to-local, align 4
  %v2_143b8 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_143b8, i32* %r7.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  store i32 176, i32* %stack_var_-144, align 4
  br label %dec_label_pc_143f4

dec_label_pc_143d4:                               ; preds = %dec_label_pc_14378
  store i1 %v2_14358, i1* %cpsr_z.global-to-local, align 1
  %v2_143d8 = ptrtoint i32* %stack_var_-180 to i32
  store i32 %v2_143d8, i32* %lr.global-to-local, align 4
  br i1 %v2_14358, label %bb242, label %bb243

bb242:                                            ; preds = %dec_label_pc_143d4
  %v3_143e0 = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v3_143e0, i32* %r7.global-to-local, align 4
  br label %.thread34

bb243:                                            ; preds = %dec_label_pc_143d4
  %v3_143e4 = sub i32 %v2_1436c, %v1_143e430
  store i32 %v3_143e4, i32* %ip.global-to-local, align 4
  %v3_143e863 = add i32 %v5_14354, %v1_143e430
  store i32 %v3_143e863, i32* %r6.global-to-local, align 4
  %v3_143ec = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v3_143ec, i32* %r7.global-to-local, align 4
  br label %.thread34

.thread34:                                        ; preds = %.thread148, %bb242, %bb243
  %v1_14434265 = phi i32 [ %v3_143e0, %bb242 ], [ %v3_143ec, %bb243 ], [ %v7_1439c, %.thread148 ]
  %v0_14408102 = phi i32 [ %v2_1436c, %bb242 ], [ %v3_143e4, %bb243 ], [ 0, %.thread148 ]
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_143f4

dec_label_pc_143f4:                               ; preds = %.thread, %dec_label_pc_143a8, %.thread34
  %v1_14434 = phi i32 [ %v2_143b8, %dec_label_pc_143a8 ], [ %v1_14434265, %.thread34 ], [ %v5_14370, %.thread ]
  %v0_14448109 = phi i32 [ -1, %dec_label_pc_143a8 ], [ -1, %.thread34 ], [ %v1_143e430, %.thread ]
  %v0_14408 = phi i32 [ 0, %dec_label_pc_143a8 ], [ %v0_14408102, %.thread34 ], [ %v2_1436c, %.thread ]
  %v3_143f4 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_143f4, i32* %r2.global-to-local, align 4
  %v1_143f8 = add i32 %v3_143f4, 12
  %v2_143f8 = inttoptr i32 %v1_143f8 to i32*
  %v3_143f8 = load i32, i32* %v2_143f8, align 4
  %v1_143fc = and i32 %v3_143f8, 16
  store i32 %v1_143fc, i32* %r4.global-to-local, align 4
  %v2_143fc = icmp eq i32 %v1_143fc, 0
  %tmp270 = zext i1 %v2_143fc to i32
  %.259 = xor i32 %tmp270, 1
  store i32 %.259, i32* %r3.global-to-local, align 4
  %v2_14408 = icmp eq i32 %v0_14408, 0
  store i1 %v2_14408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14408, label %bb246, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_143f4
  store i32 1, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14424

bb246:                                            ; preds = %dec_label_pc_143f4
  store i1 %v2_143fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143fc, label %dec_label_pc_14418, label %dec_label_pc_14424

dec_label_pc_14418:                               ; preds = %bb246
  %v0_14418 = load i32, i32* %sb.global-to-local, align 4
  %v7_14418 = icmp eq i32 %v0_14418, 103
  store i1 %v7_14418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14418, label %dec_label_pc_14448, label %bb247

bb247:                                            ; preds = %dec_label_pc_14418
  %v1_1441c = load i32, i32* %fp.global-to-local, align 4
  %v3_1441c = icmp eq i32 %v1_1441c, 0
  store i1 %v3_1441c, i1* %cpsr_z.global-to-local, align 1
  %tmp248 = icmp slt i32 %v1_1441c, 1
  br i1 %tmp248, label %dec_label_pc_14448, label %dec_label_pc_14424

dec_label_pc_14424:                               ; preds = %.thread37, %bb246, %bb247
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34056), i32* %r3.global-to-local, align 4
  %v2_14434 = inttoptr i32 %v1_14434 to i32*
  store i32 112, i32* %v2_14434, align 4
  %v0_14438 = load i32, i32* %r3.global-to-local, align 4
  %v1_14438 = add i32 %v0_14438, 16
  store i32 %v1_14438, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_14440 = load i32, i32* %r7.global-to-local, align 4
  %v1_14440 = add i32 %v0_14440, 4
  %v2_14440 = inttoptr i32 %v1_14440 to i32*
  store i32 1, i32* %v2_14440, align 4
  %v4_14440 = add i32 %v0_14440, 8
  %v5_14440 = inttoptr i32 %v4_14440 to i32*
  %v6_14440 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v6_14440, i32* %v5_14440, align 4
  %v0_14444 = load i32, i32* %r7.global-to-local, align 4
  %v1_14444 = add i32 %v0_14444, 12
  store i32 %v1_14444, i32* %r7.global-to-local, align 4
  %v0_14448.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14448

dec_label_pc_14448:                               ; preds = %dec_label_pc_14418, %bb247, %dec_label_pc_14424
  %v1_14468 = phi i32 [ %v1_14434, %bb247 ], [ %v1_14444, %dec_label_pc_14424 ], [ %v1_14434, %dec_label_pc_14418 ]
  %v0_14448 = phi i32 [ %v0_14448109, %bb247 ], [ %v0_14448.pre, %dec_label_pc_14424 ], [ %v0_14448109, %dec_label_pc_14418 ]
  %v1_14448 = add i32 %v0_14448, 1
  store i32 %v1_14448, i32* %lr.global-to-local, align 4
  %v6_14448 = icmp slt i32 %v1_14448, 0
  %v7_14448 = icmp eq i32 %v1_14448, 0
  store i1 %v7_14448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_14448, label %dec_label_pc_14450, label %dec_label_pc_14474

dec_label_pc_14450:                               ; preds = %dec_label_pc_14448
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34053), i32* %r3.global-to-local, align 4
  %v1_14460 = sub i32 -1, %v0_14448
  store i32 %v1_14460, i32* %r1.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v2_14468 = inttoptr i32 %v1_14468 to i32*
  store i32 176, i32* %v2_14468, align 4
  %v0_1446c = load i32, i32* %r7.global-to-local, align 4
  %v1_1446c = add i32 %v0_1446c, 4
  %v2_1446c = inttoptr i32 %v1_1446c to i32*
  %v3_1446c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v3_1446c, i32* %v2_1446c, align 4
  %v4_1446c = add i32 %v0_1446c, 8
  %v5_1446c = inttoptr i32 %v4_1446c to i32*
  %v6_1446c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v6_1446c, i32* %v5_1446c, align 4
  %v0_14470 = load i32, i32* %r7.global-to-local, align 4
  %v1_14470 = add i32 %v0_14470, 12
  store i32 %v1_14470, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14474

dec_label_pc_14474:                               ; preds = %dec_label_pc_14448, %dec_label_pc_14450
  %v2_1447c = phi i32 [ %v1_14468, %dec_label_pc_14448 ], [ %v1_14470, %dec_label_pc_14450 ]
  %v0_14474 = load i32, i32* %ip.global-to-local, align 4
  %v2_14474 = icmp eq i32 %v0_14474, 0
  store i1 %v2_14474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14474, label %.thread46, label %bb249

bb249:                                            ; preds = %dec_label_pc_14474
  store i32 112, i32* %r3.global-to-local, align 4
  %v3_1447c = inttoptr i32 %v2_1447c to i32*
  store i32 112, i32* %v3_1447c, align 4
  %v1_14480 = load i32, i32* %r6.global-to-local, align 4
  %v2_14480 = load i32, i32* %r7.global-to-local, align 4
  %v3_14480 = add i32 %v2_14480, 8
  %v4_14480 = inttoptr i32 %v3_14480 to i32*
  store i32 %v1_14480, i32* %v4_14480, align 4
  %v1_14484 = load i32, i32* %ip.global-to-local, align 4
  %v2_14484 = load i32, i32* %r7.global-to-local, align 4
  %v3_14484 = add i32 %v2_14484, 4
  %v4_14484 = inttoptr i32 %v3_14484 to i32*
  store i32 %v1_14484, i32* %v4_14484, align 4
  %v1_14488 = load i32, i32* %r7.global-to-local, align 4
  %v2_14488 = add i32 %v1_14488, 12
  store i32 %v2_14488, i32* %r7.global-to-local, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_14474, %bb249
  %v1_144c0 = phi i32 [ %v2_1447c, %dec_label_pc_14474 ], [ %v2_14488, %bb249 ]
  %v0_1448c = load i32, i32* %sb.global-to-local, align 4
  %v7_1448c = icmp eq i32 %v0_1448c, 103
  store i1 %v7_1448c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1448c, label %dec_label_pc_14494, label %dec_label_pc_1449c

dec_label_pc_14494:                               ; preds = %.thread46
  %v0_14494 = load i32, i32* %r4.global-to-local, align 4
  %v2_14494 = icmp eq i32 %v0_14494, 0
  store i1 %v2_14494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14494, label %dec_label_pc_144cc, label %dec_label_pc_1449c

dec_label_pc_1449c:                               ; preds = %.thread46, %dec_label_pc_14494
  %v0_1449c = load i32, i32* %lr.global-to-local, align 4
  %v1_1449c = load i32, i32* %ip.global-to-local, align 4
  %v2_1449c = sub i32 %v1_1449c, %v0_1449c
  store i32 %v2_1449c, i32* %r1.global-to-local, align 4
  %v1_144a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_144a0 = sub i32 %v2_1449c, %v1_144a0
  %v4_144a0 = xor i32 %v1_144a0, %v2_1449c
  %v5_144a0 = xor i32 %v2_144a0, %v2_1449c
  %v6_144a0 = and i32 %v5_144a0, %v4_144a0
  %v7_144a0 = icmp slt i32 %v6_144a0, 0
  %v8_144a0 = icmp slt i32 %v2_144a0, 0
  %v9_144a0 = icmp eq i32 %v2_1449c, %v1_144a0
  store i1 %v9_144a0, i1* %cpsr_z.global-to-local, align 1
  %v2_144a4 = xor i1 %v8_144a0, %v7_144a0
  br i1 %v2_144a4, label %dec_label_pc_144a8, label %dec_label_pc_144cc

dec_label_pc_144a8:                               ; preds = %dec_label_pc_1449c
  %v2_144b4 = sub i32 %v1_144a0, %v2_1449c
  store i32 %v2_144b4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34053), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v2_144c0 = inttoptr i32 %v1_144c0 to i32*
  store i32 176, i32* %v2_144c0, align 4
  %v0_144c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_144c4 = add i32 %v0_144c4, 4
  %v2_144c4 = inttoptr i32 %v1_144c4 to i32*
  %v3_144c4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v3_144c4, i32* %v2_144c4, align 4
  %v4_144c4 = add i32 %v0_144c4, 8
  %v5_144c4 = inttoptr i32 %v4_144c4 to i32*
  %v6_144c4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v6_144c4, i32* %v5_144c4, align 4
  %v0_144c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_144c8 = add i32 %v0_144c8, 12
  store i32 %v1_144c8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_144cc

dec_label_pc_144cc:                               ; preds = %dec_label_pc_1449c, %dec_label_pc_14494, %dec_label_pc_144a8
  %v1_14560.pre.pre = phi i32 [ %v1_144c0, %dec_label_pc_1449c ], [ %v1_144c0, %dec_label_pc_14494 ], [ %v1_144c8, %dec_label_pc_144a8 ]
  %v0_144cc = load i32, i32* %r8.global-to-local, align 4
  %v7_144cc = icmp eq i32 %v0_144cc, 102
  store i1 %v7_144cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_144cc, label %dec_label_pc_14554, label %dec_label_pc_144d4

dec_label_pc_144d4:                               ; preds = %dec_label_pc_144cc
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_144d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_144d8 = icmp slt i32 %v0_144d8, 0
  %v2_144d8 = icmp eq i32 %v0_144d8, 0
  store i1 %v2_144d8, i1* %cpsr_z.global-to-local, align 1
  %v4_144dc = select i1 %tmp275, i32 %v4_141f8126130, i32 101
  store i32 %v4_144dc, i32* %r4.global-to-local, align 4
  store i32 0, i32* %stack_var_-47, align 4
  %v4_144ec = sub i32 0, %v0_144d8
  %storemerge158 = select i1 %v1_144d8, i32 %v4_144ec, i32 %v0_144d8
  %tmp271 = ashr i32 %v0_144d8, 31
  %tmp272 = and i32 %tmp271, 2
  %tmp273 = add nuw nsw i32 %tmp272, 43
  store i32 %storemerge158, i32* %r5.global-to-local, align 4
  store i32 %tmp273, i32* %sl.global-to-local, align 4
  %v2_144f4 = ptrtoint i32* %stack_var_-47 to i32
  store i32 %v2_144f4, i32* %r6.global-to-local, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_144fc

dec_label_pc_144fc:                               ; preds = %dec_label_pc_1452c, %dec_label_pc_144fc, %dec_label_pc_144d4
  %v2_14514 = phi i32 [ %v2_144f4, %dec_label_pc_144d4 ], [ %v6_14514, %dec_label_pc_144fc ], [ %v6_14514, %dec_label_pc_1452c ]
  %v0_1450c = phi i32 [ %storemerge158, %dec_label_pc_144d4 ], [ %v2_14518, %dec_label_pc_144fc ], [ %v2_14518, %dec_label_pc_1452c ]
  %v3_14504 = urem i32 %v0_1450c, 10
  %v1_14508 = or i32 %v3_14504, 48
  store i32 %v1_14508, i32* %r3.global-to-local, align 4
  store i32 %v0_1450c, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_14514 = trunc i32 %v1_14508 to i8
  %v3_14514 = add i32 %v2_14514, -1
  %v4_14514 = inttoptr i32 %v3_14514 to i8*
  store i8 %v1_14514, i8* %v4_14514, align 1
  %v5_14514 = load i32, i32* %r6.global-to-local, align 4
  %v6_14514 = add i32 %v5_14514, -1
  store i32 %v6_14514, i32* %r6.global-to-local, align 4
  %v0_14518 = load i32, i32* %r0.global-to-local, align 4
  %v1_14518 = load i32, i32* %r1.global-to-local, align 4
  %v2_14518 = sdiv i32 %v0_14518, %v1_14518
  store i32 %v2_14518, i32* %r0.global-to-local, align 4
  %v0_1451c = load i32, i32* %r8.global-to-local, align 4
  %v1_1451c = add i32 %v0_1451c, 1
  store i32 %v1_1451c, i32* %r8.global-to-local, align 4
  %v7_14520 = icmp eq i32 %v1_1451c, 3
  store i1 %v7_14520, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_14518, i32* %r5.global-to-local, align 4
  br i1 %v7_14520, label %dec_label_pc_144fc, label %dec_label_pc_1452c

dec_label_pc_1452c:                               ; preds = %dec_label_pc_144fc
  %v2_1452c = icmp eq i32 %v2_14518, 0
  store i1 %v2_1452c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1452c, label %dec_label_pc_14534, label %dec_label_pc_144fc

dec_label_pc_14534:                               ; preds = %dec_label_pc_1452c
  %v1_14534 = add i32 %v5_14514, -2
  store i32 %v1_14534, i32* %r3.global-to-local, align 4
  %v0_14538 = load i32, i32* %sl.global-to-local, align 4
  %v1_14538 = trunc i32 %v0_14538 to i8
  %v4_14538 = inttoptr i32 %v1_14534 to i8*
  store i8 %v1_14538, i8* %v4_14538, align 1
  %v0_1453c = load i32, i32* %r3.global-to-local, align 4
  %v1_1453c = add i32 %v0_1453c, -1
  store i32 %v1_1453c, i32* %r2.global-to-local, align 4
  %v0_14540 = load i32, i32* %r4.global-to-local, align 4
  %v1_14540 = trunc i32 %v0_14540 to i8
  %v4_14540 = inttoptr i32 %v1_1453c to i8*
  store i8 %v1_14540, i8* %v4_14540, align 1
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_14548 = load i32, i32* %r7.global-to-local, align 4
  %v1_14548 = inttoptr i32 %v0_14548 to i32*
  store i32 112, i32* %v1_14548, align 4
  %v3_14548 = add i32 %v0_14548, 4
  %v4_14548 = inttoptr i32 %v3_14548 to i32*
  %v5_14548 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v5_14548, i32* %v4_14548, align 4
  %v0_1454c = load i32, i32* %r2.global-to-local, align 4
  %v1_1454c = load i32, i32* %r7.global-to-local, align 4
  %v2_1454c = add i32 %v1_1454c, 8
  %v3_1454c = inttoptr i32 %v2_1454c to i32*
  store i32 %v0_1454c, i32* %v3_1454c, align 4
  %v0_14550 = load i32, i32* %r7.global-to-local, align 4
  %v1_14550 = add i32 %v0_14550, 12
  store i32 %v1_14550, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14554

dec_label_pc_14554:                               ; preds = %dec_label_pc_144cc, %.thread124, %dec_label_pc_14534
  %v1_14560.pre = phi i32 [ %v2_1402c, %.thread124 ], [ %v1_14550, %dec_label_pc_14534 ], [ %v1_14560.pre.pre, %dec_label_pc_144cc ]
  %v2_14554 = ptrtoint i32* %stack_var_-164 to i32
  store i32 %v2_14554, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14558

dec_label_pc_14558:                               ; preds = %dec_label_pc_14558, %dec_label_pc_14554
  %v0_14558 = phi i32 [ %v2_14554, %dec_label_pc_14554 ], [ %v4_14558, %dec_label_pc_14558 ]
  %stack_var_-188.0 = phi i32 [ %v3_13ec8, %dec_label_pc_14554 ], [ %v2_14564, %dec_label_pc_14558 ]
  %v1_14558 = inttoptr i32 %v0_14558 to i32*
  %v2_14558 = load i32, i32* %v1_14558, align 4
  store i32 %v2_14558, i32* %r3.global-to-local, align 4
  %v4_14558 = add i32 %v0_14558, 12
  store i32 %v4_14558, i32* %r2.global-to-local, align 4
  %v3_14560 = icmp ult i32 %v4_14558, %v1_14560.pre
  %v2_14564 = sub i32 %stack_var_-188.0, %v2_14558
  store i32 %v2_14564, i32* %ip.global-to-local, align 4
  br i1 %v3_14560, label %dec_label_pc_14558, label %dec_label_pc_14570

dec_label_pc_14570:                               ; preds = %dec_label_pc_14558
  %v3_14570 = load i8, i8* %stack_var_-46, align 1
  %v4_14570 = sext i8 %v3_14570 to i32
  store i32 %v4_14570, i32* %r3.global-to-local, align 4
  store i32 %v4_14570, i32* %r2.global-to-local, align 4
  %v2_14574 = icmp eq i8 %v3_14570, 0
  store i1 %v2_14574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14574, label %bb254, label %bb253

bb253:                                            ; preds = %dec_label_pc_14570
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb254

bb254:                                            ; preds = %dec_label_pc_14570, %bb253
  %v1_145d4 = phi i32 [ %v4_14570, %dec_label_pc_14570 ], [ 1, %bb253 ]
  %v2_1457c = sub i32 %v2_14564, %v1_145d4
  store i32 %v2_1457c, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r0.global-to-local, align 4
  %v2_14584 = ptrtoint i8* %stack_var_-46 to i32
  store i32 %v2_14584, i32* %r3.global-to-local, align 4
  %v2_14588 = icmp eq i32 %v2_1457c, 0
  store i1 %v2_14588, i1* %cpsr_z.global-to-local, align 1
  store i32 160, i32* %stack_var_-180, align 4
  %tmp255 = icmp slt i32 %v2_1457c, 1
  br i1 %tmp255, label %dec_label_pc_145f0, label %dec_label_pc_1459c

dec_label_pc_1459c:                               ; preds = %bb254
  %v3_1459c = load i32, i32* %stack_var_0, align 4
  store i32 %v3_1459c, i32* %lr.global-to-local, align 4
  %v1_145a0 = add i32 %v3_1459c, 12
  %v2_145a0 = inttoptr i32 %v1_145a0 to i32*
  %v3_145a0 = load i32, i32* %v2_145a0, align 4
  store i32 %v3_145a0, i32* %r3.global-to-local, align 4
  %v1_145a4 = and i32 %v3_145a0, 8
  %v2_145a4 = icmp eq i32 %v1_145a4, 0
  store i1 %v2_145a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_145a4, label %dec_label_pc_145c8, label %dec_label_pc_145ac

dec_label_pc_145ac:                               ; preds = %dec_label_pc_1459c
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34053), i32* %r3.global-to-local, align 4
  %v1_145bc = add i32 %v1_14560.pre, 12
  store i32 %v1_145bc, i32* %r6.global-to-local, align 4
  %v1_145c0 = inttoptr i32 %v1_14560.pre to i32*
  store i32 160, i32* %v1_145c0, align 4
  %v3_145c0 = add i32 %v1_14560.pre, 4
  %v4_145c0 = inttoptr i32 %v3_145c0 to i32*
  %v5_145c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_145c0, i32* %v4_145c0, align 4
  %v6_145c0 = add i32 %v1_14560.pre, 8
  %v7_145c0 = inttoptr i32 %v6_145c0 to i32*
  %v8_145c0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v8_145c0, i32* %v7_145c0, align 4
  br label %dec_label_pc_145f4

dec_label_pc_145c8:                               ; preds = %dec_label_pc_1459c
  store i32 %v3_1459c, i32* %ip.global-to-local, align 4
  %v1_145cc = add i32 %v3_1459c, 16
  %v2_145cc = inttoptr i32 %v1_145cc to i32*
  %v3_145cc = load i32, i32* %v2_145cc, align 4
  store i32 %v3_145cc, i32* %r3.global-to-local, align 4
  %v7_145d0 = icmp eq i32 %v3_145cc, 48
  store i1 %v7_145d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_145d0, label %.thread54.thread70, label %bb256

bb256:                                            ; preds = %dec_label_pc_145c8
  store i32 %v2_14564, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_145f0

.thread54.thread70:                               ; preds = %dec_label_pc_145c8
  %v4_145dc = load i32, i32* %stack_var_-164, align 4
  store i32 %v1_14560.pre, i32* %r6.global-to-local, align 4
  %v3_145e4 = add i32 %v4_145dc, %v2_1457c
  store i32 %v3_145e4, i32* %r3.global-to-local, align 4
  store i32 %v3_145e4, i32* %stack_var_-164, align 4
  br label %dec_label_pc_145f4

dec_label_pc_145f0:                               ; preds = %bb256, %bb254
  store i32 %v1_14560.pre, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_145f4

dec_label_pc_145f4:                               ; preds = %.thread54.thread70, %dec_label_pc_145ac, %dec_label_pc_145f0
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_145f8 = ptrtoint i32* %stack_var_-180 to i32
  store i32 %v2_145f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_145fc

dec_label_pc_145fc:                               ; preds = %dec_label_pc_14624, %dec_label_pc_145f4
  %v0_145fc = phi i32 [ %v1_14618, %dec_label_pc_14624 ], [ %v2_145f8, %dec_label_pc_145f4 ]
  %v1_145fc = inttoptr i32 %v0_145fc to i32*
  %v2_145fc = load i32, i32* %v1_145fc, align 4
  store i32 %v2_145fc, i32* %r1.global-to-local, align 4
  %v3_145fc = add i32 %v0_145fc, 4
  %v4_145fc = inttoptr i32 %v3_145fc to i32*
  %v5_145fc = load i32, i32* %v4_145fc, align 4
  store i32 %v5_145fc, i32* %r2.global-to-local, align 4
  %v6_145fc = add i32 %v0_145fc, 8
  %v7_145fc = inttoptr i32 %v6_145fc to i32*
  %v8_145fc = load i32, i32* %v7_145fc, align 4
  store i32 %v8_145fc, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  store i32 %arg5, i32* %ip.global-to-local, align 4
  store i32 83472, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg5)
  %v0_14610 = load i32, i32* %r5.global-to-local, align 4
  %v1_14610 = add i32 %v0_14610, 4
  %v2_14610 = inttoptr i32 %v1_14610 to i32*
  %v3_14610 = load i32, i32* %v2_14610, align 4
  store i32 %v3_14610, i32* %r3.global-to-local, align 4
  %v0_14614 = load i32, i32* %r0.global-to-local, align 4
  %v9_14614 = icmp eq i32 %v0_14614, %v3_14610
  store i1 %v9_14614, i1* %cpsr_z.global-to-local, align 1
  %v1_14618 = add i32 %v0_14610, 12
  store i32 %v1_14618, i32* %r5.global-to-local, align 4
  br i1 %v9_14614, label %dec_label_pc_14624, label %bb257

bb257:                                            ; preds = %dec_label_pc_145fc
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14644

dec_label_pc_14624:                               ; preds = %dec_label_pc_145fc
  %v0_14628.pre = load i32, i32* %r7.global-to-local, align 4
  %v1_14624 = load i32, i32* %r6.global-to-local, align 4
  %v3_14624 = icmp ult i32 %v1_14618, %v1_14624
  %v9_14624 = icmp eq i32 %v1_14618, %v1_14624
  store i1 %v9_14624, i1* %cpsr_z.global-to-local, align 1
  %v2_14628 = add i32 %v0_14628.pre, %v3_14610
  store i32 %v2_14628, i32* %r7.global-to-local, align 4
  br i1 %v3_14624, label %dec_label_pc_145fc, label %dec_label_pc_14644

dec_label_pc_1463c:                               ; preds = %.thread21, %bb239
  %v0_1463c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1463c, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1433c

dec_label_pc_14644:                               ; preds = %dec_label_pc_14624, %bb257
  %v0_14644 = phi i32 [ -1, %bb257 ], [ %v2_14628, %dec_label_pc_14624 ]
  store i32 %v0_14644, i32* %r0.global-to-local, align 4
  store i32 %v27_13e80, i32* @lr, align 4
  ret i32 %v0_14644

; uselistorder directives
  uselistorder i32 %v0_14644, { 1, 0 }
  uselistorder i32 %v1_14624, { 1, 0 }
  uselistorder i32 %v1_14618, { 0, 1, 3, 2 }
  uselistorder i32 %v0_145fc, { 2, 1, 0 }
  uselistorder i32 %v3_1459c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14564, { 0, 1, 3, 2 }
  uselistorder i32 %v4_14558, { 1, 2, 0 }
  uselistorder i32 %v0_14558, { 1, 0 }
  uselistorder i32 %v1_14560.pre, { 6, 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_14518, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v6_14514, { 2, 1, 0 }
  uselistorder i32 %storemerge158, { 1, 0 }
  uselistorder i32 %v0_144d8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v2_144a0, { 1, 0 }
  uselistorder i32 %v1_144a0, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1449c, { 2, 4, 0, 1, 3, 5 }
  uselistorder i1 %v2_143fc, { 2, 1, 0 }
  uselistorder i32 %v2_1437c, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v2_1436c, { 1, 2, 3, 5, 0, 4, 6 }
  uselistorder i1 %v2_14358, { 1, 0, 2 }
  uselistorder i32 %v5_14354, { 0, 2, 1, 3 }
  uselistorder i32 %v1_143e430, { 3, 0, 4, 6, 1, 2, 5, 7, 8, 9 }
  uselistorder i1 %v2_1430c, { 1, 0 }
  uselistorder i32 %v1_14304, { 1, 2, 0 }
  uselistorder i32 %v2_142f8, { 1, 0 }
  uselistorder i32 %v1_142f8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_142f8, { 3, 4, 0, 5, 6, 1, 2, 7 }
  uselistorder i1 %v3_142c8, { 1, 0 }
  uselistorder i32 %v0_142c8, { 0, 2, 1 }
  uselistorder i32 %v2_142c4, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v1_142b0, { 1, 0 }
  uselistorder i1 %v2_142a0, { 1, 0 }
  uselistorder i32 %v1_1429c, { 3, 2, 1, 0 }
  uselistorder i32 %v2_14298, { 1, 0 }
  uselistorder i1 %v2_14288, { 1, 0 }
  uselistorder i32 %v1_1427c, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_14230, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14230, { 1, 0, 2 }
  uselistorder i1 %v2_14218, { 1, 0 }
  uselistorder i32 %v5_14200, { 1, 0 }
  uselistorder i32 %v0_141ec, { 1, 2, 0, 3 }
  uselistorder i32 %v0_141d4, { 1, 2, 0 }
  uselistorder i32 %v2_141d0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_14168, { 2, 4, 1, 0, 3 }
  uselistorder i32 %stack_var_-192.4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14110, { 1, 0 }
  uselistorder double %v2_140d4, { 1, 0 }
  uselistorder i32 %v0_14090, { 1, 2, 0, 4, 3, 5 }
  uselistorder i32 %v3_14084, { 1, 0 }
  uselistorder i32 %v2_140c0, { 1, 3, 0, 2 }
  uselistorder i32 %v0_14054, { 1, 0 }
  uselistorder i32 %v5_14010, { 1, 0 }
  uselistorder i32 %v1_13f30.v0_13f1c5, { 1, 0 }
  uselistorder i32 %v3_13fec, { 1, 0 }
  uselistorder i32 %v0_13fc8, { 0, 2, 3, 1 }
  uselistorder i32 %v2_13fb0, { 2, 1, 0 }
  uselistorder i32 %v0_13f94, { 1, 0 }
  uselistorder i32 %v0_13eb4, { 0, 2, 3, 1, 4, 5 }
  uselistorder i32* %stack_var_-156, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-83, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-82, { 1, 2, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-47, { 1, 0 }
  uselistorder i32* %stack_var_-164, { 0, 1, 4, 2, 3 }
  uselistorder i8* %stack_var_-46, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_0, { 2, 3, 0, 1 }
  uselistorder i32 %tmp160, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 2, 3, 4, 5, 6, 0, 7, 8, 1, 9 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 12, 11, 13 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 13, 14, 15, 5, 16, 17, 6, 18, 19, 20, 7, 21, 22, 8, 23, 24, 9, 10, 11, 12, 25, 26, 27, 28, 30, 29, 31, 32 }
  uselistorder i32* %r6.global-to-local, { 21, 0, 22, 1, 2, 3, 4, 19, 20, 5, 6, 9, 10, 11, 7, 12, 13, 8, 14, 17, 15, 16, 18 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 9, 7, 10, 11, 8, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 42, 29, 33, 30, 31, 32, 34, 27, 35, 36, 37, 38, 39, 40, 41, 63, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 64, 65, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 15, 19, 20, 16, 17, 21, 22, 23, 26, 24, 25, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 10, 11, 14, 15, 12, 16, 17, 18, 19, 36, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 38, 7, 8, 33, 35, 32, 34, 9, 10, 36, 11, 12, 37, 14, 13, 28, 15, 16, 1, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 30, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 6, 7, 8, 3, 4, 5, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 60, 18, 19, 20, 21, 22, 23, 24, 25, 59, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 61, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 }
  uselistorder i32 112, { 2, 11, 0, 12, 3, 1, 13, 4, 6, 5, 7, 8, 9, 10 }
  uselistorder i32 176, { 1, 4, 2, 5, 0, 6, 3 }
  uselistorder i8 48, { 4, 6, 7, 8, 9, 0, 10, 1, 11, 2, 3, 12, 5 }
  uselistorder i32 (i8*, i32)* @__GI_memset, { 1, 2, 11, 13, 14, 3, 15, 10, 4, 5, 9, 16, 12, 7, 8, 20, 19, 0, 6, 17, 21, 18 }
  uselistorder i32 17, { 1, 2, 0, 3 }
  uselistorder i32 48, { 24, 5, 25, 26, 2, 6, 27, 7, 28, 8, 29, 39, 30, 9, 36, 37, 31, 32, 33, 34, 0, 1, 10, 12, 11, 13, 38, 3, 14, 15, 17, 35, 16, 18, 19, 20, 21, 40, 41, 42, 22, 23, 4 }
  uselistorder i32 10, { 24, 6, 25, 7, 8, 9, 2, 30, 32, 33, 26, 27, 10, 28, 11, 37, 40, 41, 42, 23, 29, 13, 12, 3, 44, 43, 34, 14, 45, 15, 46, 16, 47, 48, 1, 38, 39, 31, 5, 0, 35, 36, 17, 49, 18, 4, 20, 21, 19, 22, 50 }
  uselistorder i32 (i32, i32, i32, i32)* @__aeabi_dcmpge, { 1, 0 }
  uselistorder i32 1104006501, { 4, 1, 2, 0, 3 }
  uselistorder i32 9, { 1, 8, 0, 9, 10, 2, 17, 18, 19, 11, 12, 13, 14, 22, 23, 3, 21, 20, 16, 6, 7, 4, 15, 5 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34032), { 0, 2, 1 }
  uselistorder i32 1100470148, { 1, 2, 0, 3 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 -34056), { 2, 1, 0 }
  uselistorder i32 96, { 4, 5, 6, 7, 8, 1, 2, 3, 0 }
  uselistorder i8 45, { 1, 4, 2, 5, 3, 0, 6, 7 }
  uselistorder i32 45, { 2, 0, 3, 4, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__aeabi_dcmplt, { 3, 2, 1, 0 }
  uselistorder double 0.000000e+00, { 2, 1, 0, 3 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__aeabi_dcmpeq, { 2, 1, 0 }
  uselistorder i8 32, { 0, 2, 3, 4, 1, 5 }
  uselistorder i8 43, { 0, 2, 1 }
  uselistorder i32 97, { 1, 0, 7, 5, 6, 8, 2, 3, 4 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg4, { 0, 1, 2, 6, 5, 4, 3, 8, 7, 9 }
  uselistorder label %dec_label_pc_1463c, { 1, 0 }
  uselistorder label %dec_label_pc_145f4, { 2, 0, 1 }
  uselistorder label %bb254, { 1, 0 }
  uselistorder label %dec_label_pc_14554, { 2, 0, 1 }
  uselistorder label %dec_label_pc_144cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1449c, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %dec_label_pc_14474, { 1, 0 }
  uselistorder label %dec_label_pc_14448, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14424, { 2, 1, 0 }
  uselistorder label %dec_label_pc_143f4, { 2, 1, 0 }
  uselistorder label %.thread34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1433c, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1432c, { 1, 0 }
  uselistorder label %bb236, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %.thread145, { 1, 0 }
  uselistorder label %._crit_edge93, { 1, 0 }
  uselistorder label %bb228, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %.preheader, { 3, 1, 0, 2 }
  uselistorder label %bb223, { 1, 0 }
  uselistorder label %dec_label_pc_14254, { 2, 1, 0 }
  uselistorder label %bb220, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14160, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_14110, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14108, { 1, 0 }
  uselistorder label %bb212, { 1, 0 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %dec_label_pc_13fec, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_13f08, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %bb201, { 1, 0 }
}

define i32 @__GI_memchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_14678 = urem i32 %arg1, 256
  %v0_14694.pr = load i32, i32* @r2, align 4
  %v2_1469415 = icmp eq i32 %v0_14694.pr, 0
  %v0_146a8.pre = load i32, i32* @r0, align 4
  br i1 %v2_1469415, label %dec_label_pc_146a4, label %dec_label_pc_1469c

dec_label_pc_14680:                               ; preds = %dec_label_pc_1469c
  %v1_14680 = inttoptr i32 %v0_14690 to i8*
  %v2_14680 = load i8, i8* %v1_14680, align 1
  %v3_14680 = zext i8 %v2_14680 to i32
  %v9_14684 = icmp eq i32 %v3_14680, %v1_14678
  br i1 %v9_14684, label %dec_label_pc_14754, label %dec_label_pc_1468c

dec_label_pc_1468c:                               ; preds = %dec_label_pc_14680
  %v1_1468c = add i32 %v0_1468c, -1
  %v1_14690 = add i32 %v0_14690, 1
  %v2_14694 = icmp eq i32 %v1_1468c, 0
  br i1 %v2_14694, label %dec_label_pc_146a4, label %dec_label_pc_1469c

dec_label_pc_1469c:                               ; preds = %entry, %dec_label_pc_1468c
  %v0_1468c = phi i32 [ %v1_1468c, %dec_label_pc_1468c ], [ %v0_14694.pr, %entry ]
  %v0_14690 = phi i32 [ %v1_14690, %dec_label_pc_1468c ], [ %v0_146a8.pre, %entry ]
  %v1_1469c = urem i32 %v0_14690, 4
  %v2_1469c = icmp eq i32 %v1_1469c, 0
  br i1 %v2_1469c, label %dec_label_pc_146a4, label %dec_label_pc_14680

dec_label_pc_146a4:                               ; preds = %dec_label_pc_1468c, %dec_label_pc_1469c, %entry
  %v0_1472022 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_1468c ], [ %v0_1468c, %dec_label_pc_1469c ]
  %v0_146a8 = phi i32 [ %v0_146a8.pre, %entry ], [ %v1_14690, %dec_label_pc_1468c ], [ %v0_14690, %dec_label_pc_1469c ]
  %v4_146a4 = mul nuw nsw i32 %v1_14678, 256
  %v5_146a4 = or i32 %v4_146a4, %v1_14678
  %v4_146ac = mul i32 %v5_146a4, 65536
  %v5_146ac = or i32 %v4_146ac, %v5_146a4
  store i32 2130640639, i32* @ip, align 4
  %tmp = icmp ugt i32 %v0_1472022, 3
  br i1 %tmp, label %dec_label_pc_146b4, label %dec_label_pc_14748.preheader

dec_label_pc_146b4:                               ; preds = %dec_label_pc_146a4, %dec_label_pc_14720.backedge
  %v0_146d060 = phi i32 [ %v1_146d0, %dec_label_pc_14720.backedge ], [ %v0_1472022, %dec_label_pc_146a4 ]
  %v0_146f459 = phi i32 [ %v4_146b4, %dec_label_pc_14720.backedge ], [ %v0_146a8, %dec_label_pc_146a4 ]
  %v1_146b4 = inttoptr i32 %v0_146f459 to i32*
  %v2_146b4 = load i32, i32* %v1_146b4, align 4
  %v4_146b4 = add i32 %v0_146f459, 4
  %v2_146b8 = xor i32 %v2_146b4, %v5_146ac
  %v2_146bc = add i32 %v2_146b8, 2130640639
  %v1_146c0 = sub i32 -1, %v2_146b8
  %v2_146c4 = xor i32 %v2_146bc, %v1_146c0
  %v2_146c8 = and i32 %v2_146c4, -2130640640
  %v2_146cc = icmp eq i32 %v2_146c8, 0
  %v1_146d0 = add i32 %v0_146d060, -4
  br i1 %v2_146cc, label %dec_label_pc_14720.backedge, label %dec_label_pc_146d8

dec_label_pc_14720.backedge:                      ; preds = %dec_label_pc_146b4, %dec_label_pc_14710
  store i32 2130640639, i32* @ip, align 4
  %tmp73 = icmp ugt i32 %v1_146d0, 3
  br i1 %tmp73, label %dec_label_pc_146b4, label %dec_label_pc_14748.preheader

dec_label_pc_146d8:                               ; preds = %dec_label_pc_146b4
  %v2_146d8 = inttoptr i32 %v0_146f459 to i8*
  %v3_146d8 = load i8, i8* %v2_146d8, align 1
  %v4_146d8 = zext i8 %v3_146d8 to i32
  %v9_146e0 = icmp eq i32 %v4_146d8, %v1_14678
  %v1_146e4 = add i32 %v0_146f459, 3
  store i32 %v1_146e4, i32* @ip, align 4
  br i1 %v9_146e0, label %dec_label_pc_14754, label %dec_label_pc_146ec

dec_label_pc_146ec:                               ; preds = %dec_label_pc_146d8
  %v1_146ec = add i32 %v0_146f459, 1
  %v2_146ec = inttoptr i32 %v1_146ec to i8*
  %v3_146ec = load i8, i8* %v2_146ec, align 1
  %v4_146ec = zext i8 %v3_146ec to i32
  %v9_146f0 = icmp eq i32 %v4_146ec, %v1_14678
  br i1 %v9_146f0, label %bb, label %dec_label_pc_14700

bb:                                               ; preds = %dec_label_pc_146ec
  br label %dec_label_pc_14754

dec_label_pc_14700:                               ; preds = %dec_label_pc_146ec
  %v1_14700 = add i32 %v0_146f459, 2
  %v2_14700 = inttoptr i32 %v1_14700 to i8*
  %v3_14700 = load i8, i8* %v2_14700, align 1
  %v4_14700 = zext i8 %v3_14700 to i32
  %v9_14704 = icmp eq i32 %v4_14700, %v1_14678
  br i1 %v9_14704, label %dec_label_pc_14754, label %dec_label_pc_14710

dec_label_pc_14710:                               ; preds = %dec_label_pc_14700
  %v2_14710 = inttoptr i32 %v1_146e4 to i8*
  %v3_14710 = load i8, i8* %v2_14710, align 1
  %v4_14710 = zext i8 %v3_14710 to i32
  %v9_14714 = icmp eq i32 %v4_14710, %v1_14678
  br i1 %v9_14714, label %bb36, label %dec_label_pc_14720.backedge

bb36:                                             ; preds = %dec_label_pc_14710
  br label %dec_label_pc_14754

dec_label_pc_14748.preheader:                     ; preds = %dec_label_pc_14720.backedge, %dec_label_pc_146a4
  %v0_146f4.lcssa = phi i32 [ %v0_146a8, %dec_label_pc_146a4 ], [ %v4_146b4, %dec_label_pc_14720.backedge ]
  %v0_146d0.lcssa = phi i32 [ %v0_1472022, %dec_label_pc_146a4 ], [ %v1_146d0, %dec_label_pc_14720.backedge ]
  %v2_147487 = icmp eq i32 %v0_146d0.lcssa, 0
  br i1 %v2_147487, label %dec_label_pc_14750, label %dec_label_pc_14738

dec_label_pc_14738:                               ; preds = %dec_label_pc_14744, %dec_label_pc_14748.preheader
  %v0_14748.in = phi i32 [ %v0_14748, %dec_label_pc_14744 ], [ %v0_146d0.lcssa, %dec_label_pc_14748.preheader ]
  %v0_14744 = phi i32 [ %v1_14744, %dec_label_pc_14744 ], [ %v0_146f4.lcssa, %dec_label_pc_14748.preheader ]
  %v0_14748 = add i32 %v0_14748.in, -1
  %v1_14738 = inttoptr i32 %v0_14744 to i8*
  %v2_14738 = load i8, i8* %v1_14738, align 1
  %v3_14738 = zext i8 %v2_14738 to i32
  %v9_1473c = icmp eq i32 %v3_14738, %v1_14678
  br i1 %v9_1473c, label %dec_label_pc_14754, label %dec_label_pc_14744

dec_label_pc_14744:                               ; preds = %dec_label_pc_14738
  %v1_14744 = add i32 %v0_14744, 1
  %v2_14748 = icmp eq i32 %v0_14748, 0
  br i1 %v2_14748, label %dec_label_pc_14750, label %dec_label_pc_14738

dec_label_pc_14750:                               ; preds = %dec_label_pc_14744, %dec_label_pc_14748.preheader
  br label %dec_label_pc_14754

dec_label_pc_14754:                               ; preds = %dec_label_pc_14680, %dec_label_pc_14700, %dec_label_pc_146d8, %dec_label_pc_14738, %bb36, %bb, %dec_label_pc_14750
  %v1_14758 = phi i32 [ 0, %dec_label_pc_14750 ], [ %v1_146ec, %bb ], [ %v1_146e4, %bb36 ], [ %v0_14744, %dec_label_pc_14738 ], [ %v1_14700, %dec_label_pc_14700 ], [ %v0_146f459, %dec_label_pc_146d8 ], [ %v0_14690, %dec_label_pc_14680 ]
  ret i32 %v1_14758

; uselistorder directives
  uselistorder i32 %v1_146d0, { 1, 0, 2 }
  uselistorder i32 %v0_146f459, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v5_146a4, { 1, 0 }
  uselistorder i32 %v0_1472022, { 1, 2, 0 }
  uselistorder i32 %v0_14690, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_146a8.pre, { 1, 0 }
  uselistorder i32 %v1_14678, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder label %dec_label_pc_14754, { 6, 3, 4, 1, 5, 2, 0 }
  uselistorder label %dec_label_pc_14720.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_146b4, { 1, 0 }
  uselistorder label %dec_label_pc_146a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1469c, { 1, 0 }
}

define i32 @memrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_14768 = urem i32 %arg2, 256
  %v2_1476c = add i32 %arg3, %arg1
  %v2_147844 = icmp eq i32 %arg3, 0
  br i1 %v2_147844, label %dec_label_pc_14794, label %dec_label_pc_1478c

dec_label_pc_14774:                               ; preds = %dec_label_pc_1478c
  %v1_14774 = add i32 %v0_14774, -1
  %v2_14774 = inttoptr i32 %v1_14774 to i8*
  %v3_14774 = load i8, i8* %v2_14774, align 1
  %v4_14774 = zext i8 %v3_14774 to i32
  %v9_14778 = icmp eq i32 %v4_14774, %v1_14768
  br i1 %v9_14778, label %dec_label_pc_14834, label %dec_label_pc_14780

dec_label_pc_14780:                               ; preds = %dec_label_pc_14774
  %v1_14780 = add i32 %v0_14780, -1
  %v2_14784 = icmp eq i32 %v1_14780, 0
  br i1 %v2_14784, label %dec_label_pc_14794, label %dec_label_pc_1478c

dec_label_pc_1478c:                               ; preds = %entry, %dec_label_pc_14780
  %v0_14780 = phi i32 [ %v1_14780, %dec_label_pc_14780 ], [ %arg3, %entry ]
  %v0_14774 = phi i32 [ %v1_14774, %dec_label_pc_14780 ], [ %v2_1476c, %entry ]
  %v1_1478c = urem i32 %v0_14774, 4
  %v2_1478c = icmp eq i32 %v1_1478c, 0
  br i1 %v2_1478c, label %dec_label_pc_14794, label %dec_label_pc_14774

dec_label_pc_14794:                               ; preds = %dec_label_pc_14780, %dec_label_pc_1478c, %entry
  %v0_1481c13 = phi i32 [ %v2_1476c, %entry ], [ %v1_14774, %dec_label_pc_14780 ], [ %v0_14774, %dec_label_pc_1478c ]
  %v0_148089 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_14780 ], [ %v0_14780, %dec_label_pc_1478c ]
  %v4_14794 = mul nuw nsw i32 %v1_14768, 256
  %v5_14794 = or i32 %v4_14794, %v1_14768
  %v4_14798 = mul i32 %v5_14794, 65536
  %v5_14798 = or i32 %v4_14798, %v5_14794
  store i32 2130640639, i32* @ip, align 4
  %tmp = icmp ugt i32 %v0_148089, 3
  br i1 %tmp, label %dec_label_pc_147a0, label %dec_label_pc_14828

dec_label_pc_147a0:                               ; preds = %dec_label_pc_14794, %dec_label_pc_14808.backedge
  %v0_147bc40 = phi i32 [ %v1_147bc, %dec_label_pc_14808.backedge ], [ %v0_148089, %dec_label_pc_14794 ]
  %v0_147a039 = phi i32 [ %v1_147a0, %dec_label_pc_14808.backedge ], [ %v0_1481c13, %dec_label_pc_14794 ]
  %v1_147a0 = add i32 %v0_147a039, -4
  %v2_147a0 = inttoptr i32 %v1_147a0 to i32*
  %v3_147a0 = load i32, i32* %v2_147a0, align 4
  %v2_147a4 = xor i32 %v3_147a0, %v5_14798
  %v2_147a8 = add i32 %v2_147a4, 2130640639
  store i32 %v2_147a8, i32* @ip, align 4
  %v1_147ac = sub i32 -1, %v2_147a4
  %v2_147b0 = xor i32 %v2_147a8, %v1_147ac
  %v2_147b4 = and i32 %v2_147b0, -2130640640
  %v2_147b8 = icmp eq i32 %v2_147b4, 0
  %v1_147bc = add i32 %v0_147bc40, -4
  br i1 %v2_147b8, label %dec_label_pc_14808.backedge, label %dec_label_pc_147c4

dec_label_pc_14808.backedge:                      ; preds = %dec_label_pc_147a0, %dec_label_pc_147fc
  store i32 2130640639, i32* @ip, align 4
  %tmp46 = icmp ugt i32 %v1_147bc, 3
  br i1 %tmp46, label %dec_label_pc_147a0, label %dec_label_pc_14828

dec_label_pc_147c4:                               ; preds = %dec_label_pc_147a0
  %v1_147c4 = add i32 %v0_147a039, -1
  %v2_147c4 = inttoptr i32 %v1_147c4 to i8*
  %v3_147c4 = load i8, i8* %v2_147c4, align 1
  %v4_147c4 = zext i8 %v3_147c4 to i32
  %v9_147c8 = icmp eq i32 %v4_147c4, %v1_14768
  br i1 %v9_147c8, label %dec_label_pc_147f4, label %dec_label_pc_147d4

dec_label_pc_147d4:                               ; preds = %dec_label_pc_147c4
  %v1_147d4 = add i32 %v0_147a039, -2
  %v2_147d4 = inttoptr i32 %v1_147d4 to i8*
  %v3_147d4 = load i8, i8* %v2_147d4, align 1
  %v4_147d4 = zext i8 %v3_147d4 to i32
  %v9_147d8 = icmp eq i32 %v4_147d4, %v1_14768
  br i1 %v9_147d8, label %dec_label_pc_147f4, label %dec_label_pc_147e4

dec_label_pc_147e4:                               ; preds = %dec_label_pc_147d4
  %v1_147e4 = add i32 %v0_147a039, -3
  %v2_147e4 = inttoptr i32 %v1_147e4 to i8*
  %v3_147e4 = load i8, i8* %v2_147e4, align 1
  %v4_147e4 = zext i8 %v3_147e4 to i32
  %v9_147e8 = icmp eq i32 %v4_147e4, %v1_14768
  br i1 %v9_147e8, label %dec_label_pc_147f4, label %dec_label_pc_147fc

dec_label_pc_147f4:                               ; preds = %dec_label_pc_147e4, %dec_label_pc_147d4, %dec_label_pc_147c4
  %v0_147f4 = phi i32 [ %v1_147e4, %dec_label_pc_147e4 ], [ %v1_147d4, %dec_label_pc_147d4 ], [ %v1_147c4, %dec_label_pc_147c4 ]
  br label %dec_label_pc_14834

dec_label_pc_147fc:                               ; preds = %dec_label_pc_147e4
  %v1_147fc = inttoptr i32 %v1_147a0 to i8*
  %v2_147fc = load i8, i8* %v1_147fc, align 1
  %v3_147fc = zext i8 %v2_147fc to i32
  %v9_14800 = icmp eq i32 %v3_147fc, %v1_14768
  br i1 %v9_14800, label %dec_label_pc_14834, label %dec_label_pc_14808.backedge

dec_label_pc_1481c:                               ; preds = %dec_label_pc_14828
  %v1_14828 = add i32 %v0_14828, -1
  %v1_1481c = add i32 %v0_1481c, -1
  %v2_1481c = inttoptr i32 %v1_1481c to i8*
  %v3_1481c = load i8, i8* %v2_1481c, align 1
  %v4_1481c = zext i8 %v3_1481c to i32
  %v9_14820 = icmp eq i32 %v4_1481c, %v1_14768
  br i1 %v9_14820, label %dec_label_pc_14834, label %dec_label_pc_14828

dec_label_pc_14828:                               ; preds = %dec_label_pc_14794, %dec_label_pc_14808.backedge, %dec_label_pc_1481c
  %v0_1481c = phi i32 [ %v1_1481c, %dec_label_pc_1481c ], [ %v0_1481c13, %dec_label_pc_14794 ], [ %v1_147a0, %dec_label_pc_14808.backedge ]
  %v0_14828 = phi i32 [ %v1_14828, %dec_label_pc_1481c ], [ %v0_148089, %dec_label_pc_14794 ], [ %v1_147bc, %dec_label_pc_14808.backedge ]
  %v2_14828 = icmp eq i32 %v0_14828, 0
  br i1 %v2_14828, label %dec_label_pc_14830, label %dec_label_pc_1481c

dec_label_pc_14830:                               ; preds = %dec_label_pc_14828
  br label %dec_label_pc_14834

dec_label_pc_14834:                               ; preds = %dec_label_pc_14774, %dec_label_pc_147fc, %dec_label_pc_1481c, %dec_label_pc_147f4, %dec_label_pc_14830
  %v1_14838 = phi i32 [ %v0_147f4, %dec_label_pc_147f4 ], [ 0, %dec_label_pc_14830 ], [ %v1_1481c, %dec_label_pc_1481c ], [ %v1_147a0, %dec_label_pc_147fc ], [ %v1_14774, %dec_label_pc_14774 ]
  ret i32 %v1_14838

; uselistorder directives
  uselistorder i32 %v0_14828, { 1, 0 }
  uselistorder i32 %v1_147bc, { 1, 0, 2 }
  uselistorder i32 %v1_147a0, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_147a039, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14794, { 1, 0 }
  uselistorder i32 %v0_148089, { 1, 2, 0 }
  uselistorder i32 %v0_14774, { 1, 0, 2 }
  uselistorder i32 %v2_1476c, { 1, 0 }
  uselistorder i32 %v1_14768, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 -3, { 0, 2, 1, 3, 4 }
  uselistorder i32 -2130640640, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 2130640639, { 6, 2, 0, 7, 3, 1, 4, 8, 9, 5, 10 }
  uselistorder i32 %arg3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14834, { 4, 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_14828, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14808.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_147a0, { 1, 0 }
  uselistorder label %dec_label_pc_14794, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1478c, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @ip, align 4
  br label %dec_label_pc_14860

dec_label_pc_14860:                               ; preds = %dec_label_pc_1488c, %entry
  %v1_148a48 = phi i32 [ %v1_148a49, %dec_label_pc_1488c ], [ 0, %entry ]
  %v0_14894 = phi i32 [ %v1_14894, %dec_label_pc_1488c ], [ %arg2, %entry ]
  %v0_14898 = phi i32 [ %v1_14898, %dec_label_pc_1488c ], [ %tmp, %entry ]
  %v9_14860 = icmp eq i32 %v0_14898, %v0_14894
  %.pre = inttoptr i32 %v0_14898 to i8*
  br i1 %v9_14860, label %dec_label_pc_1488c, label %dec_label_pc_14868

dec_label_pc_14868:                               ; preds = %dec_label_pc_14860
  %v2_14868 = load i8, i8* %.pre, align 1
  %v3_14868 = zext i8 %v2_14868 to i32
  %v1_1486c = inttoptr i32 %v0_14894 to i8*
  %v2_1486c = load i8, i8* %v1_1486c, align 1
  %v3_1486c = zext i8 %v2_1486c to i32
  %v4_14870 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 736) to i32*), align 4
  %v2_14874 = mul nuw nsw i32 %v3_1486c, 2
  %v2_14878 = mul nuw nsw i32 %v3_14868, 2
  %v2_1487c = add i32 %v4_14870, %v2_14874
  %v3_1487c = inttoptr i32 %v2_1487c to i16*
  %v4_1487c = load i16, i16* %v3_1487c, align 2
  %v6_1487c = sext i16 %v4_1487c to i32
  %v2_14880 = add i32 %v4_14870, %v2_14878
  %v3_14880 = inttoptr i32 %v2_14880 to i16*
  %v4_14880 = load i16, i16* %v3_14880, align 2
  %v6_14880 = sext i16 %v4_14880 to i32
  %v2_14884 = sub nsw i32 %v6_14880, %v6_1487c
  %v9_14884 = icmp eq i16 %v4_14880, %v4_1487c
  br i1 %v9_14884, label %dec_label_pc_1488c, label %dec_label_pc_148a0

dec_label_pc_1488c:                               ; preds = %dec_label_pc_14860, %dec_label_pc_14868
  %v1_148a49 = phi i32 [ %v2_14884, %dec_label_pc_14868 ], [ %v1_148a48, %dec_label_pc_14860 ]
  %v2_1488c = load i8, i8* %.pre, align 1
  %v2_14890 = icmp eq i8 %v2_1488c, 0
  %v1_14894 = add i32 %v0_14894, 1
  %v1_14898 = add i32 %v0_14898, 1
  store i32 %v1_14898, i32* @ip, align 4
  br i1 %v2_14890, label %dec_label_pc_148a0, label %dec_label_pc_14860

dec_label_pc_148a0:                               ; preds = %dec_label_pc_1488c, %dec_label_pc_14868
  %v1_148a4 = phi i32 [ %v1_148a49, %dec_label_pc_1488c ], [ %v2_14884, %dec_label_pc_14868 ]
  ret i32 %v1_148a4

; uselistorder directives
  uselistorder i32 %v1_14898, { 1, 0 }
  uselistorder i32 %v2_14884, { 1, 0 }
  uselistorder i32 %v0_14898, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1488c, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %v3_148b0 = load i32, i32* @r4, align 4
  store i32 %v3_148b0, i32* %stack_var_-32, align 4
  %v6_148b0 = load i32, i32* @r5, align 4
  %v9_148b0 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_148b8 = load i32, i32* @r1, align 4
  store i32 %v0_148b8, i32* %r8.global-to-local, align 4
  %v0_148bc = load i32, i32* @r2, align 4
  store i32 %v0_148bc, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r0, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1492423 = icmp slt i8* %arg1, null
  store i1 %v1_1492423, i1* %cpsr_n.global-to-local, align 1
  %v2_1492424 = icmp eq i8* %arg1, null
  store i1 %v2_1492424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1492424, label %dec_label_pc_1493c, label %dec_label_pc_14930

dec_label_pc_148c8:                               ; preds = %dec_label_pc_14930
  %v2_148c8 = call i32 @__GI_strchr(i32 %v0_148c826, i32 46)
  store i32 %v2_148c8, i32* @r6, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_148cc = icmp slt i32 %v2_148c8, 0
  store i1 %v1_148cc, i1* %cpsr_n.global-to-local, align 1
  %v2_148cc = icmp eq i32 %v2_148c8, 0
  store i1 %v2_148cc, i1* %cpsr_z.global-to-local, align 1
  %v0_148d0 = load i32, i32* @r4, align 4
  %v2_148d0 = sub i32 %v2_148c8, %v0_148d0
  store i32 %v2_148d0, i32* @r5, align 4
  br i1 %v2_148cc, label %dec_label_pc_148d8, label %dec_label_pc_148e4

dec_label_pc_148d8:                               ; preds = %dec_label_pc_148c8
  %v1_148d8 = inttoptr i32 %v0_148d0 to i8*
  %v3_148dc = call i32 @strlen(i8* %v1_148d8)
  %sext = mul i32 %v3_148dc, 16777216
  %v1_148e0 = sdiv i32 %sext, 16777216
  store i32 %v1_148e0, i32* @r5, align 4
  %v0_148f0.pre = load i32, i32* @r4, align 4
  %v0_14900.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_148e4

dec_label_pc_148e4:                               ; preds = %dec_label_pc_148c8, %dec_label_pc_148d8
  %v0_14900 = phi i32 [ %v2_148c8, %dec_label_pc_148c8 ], [ %v0_14900.pre, %dec_label_pc_148d8 ]
  %v0_148f0 = phi i32 [ %v0_148d0, %dec_label_pc_148c8 ], [ %v0_148f0.pre, %dec_label_pc_148d8 ]
  %v0_14910 = phi i32 [ %v2_148d0, %dec_label_pc_148c8 ], [ %v1_148e0, %dec_label_pc_148d8 ]
  %v0_148e4 = load i32, i32* %sl.global-to-local, align 4
  %v1_148e4 = add i32 %v0_148e4, 1
  store i32 %v1_148e4, i32* %r7.global-to-local, align 4
  %v1_148e8 = load i32, i32* %sb.global-to-local, align 4
  %v2_148e8 = sub i32 %v1_148e8, %v0_148e4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_148ec = icmp slt i32 %v0_14910, 0
  store i1 %v1_148ec, i1* %cpsr_n.global-to-local, align 1
  %v2_148ec = icmp eq i32 %v0_14910, 0
  store i1 %v2_148ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_148f0, i32* @r1, align 4
  %v0_148f4 = load i32, i32* %r8.global-to-local, align 4
  %v2_148f4 = add i32 %v0_148f4, %v1_148e4
  store i32 %v2_148f4, i32* @r0, align 4
  store i32 %v0_14910, i32* @r2, align 4
  %v1_148fc = add i32 %v2_148e8, -1
  store i32 %v1_148fc, i32* @r3, align 4
  %v1_14900 = add i32 %v0_14900, 1
  store i32 %v1_14900, i32* @r4, align 4
  br i1 %v2_148ec, label %dec_label_pc_14950, label %dec_label_pc_14908

dec_label_pc_14908:                               ; preds = %dec_label_pc_148e4
  %v2_14908 = sub i32 %v0_14910, %v1_148fc
  %v3_14908 = icmp ult i32 %v0_14910, %v1_148fc
  %v4_14908 = xor i32 %v1_148fc, %v0_14910
  %v5_14908 = xor i32 %v2_14908, %v0_14910
  %v6_14908 = and i32 %v5_14908, %v4_14908
  %v7_14908 = icmp slt i32 %v6_14908, 0
  store i1 %v7_14908, i1* %cpsr_v.global-to-local, align 1
  %v8_14908 = icmp slt i32 %v2_14908, 0
  store i1 %v8_14908, i1* %cpsr_n.global-to-local, align 1
  %v9_14908 = icmp eq i32 %v0_14910, %v1_148fc
  store i1 %v9_14908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14908, label %dec_label_pc_14910, label %dec_label_pc_14950

dec_label_pc_14910:                               ; preds = %dec_label_pc_14908
  %v1_14910 = trunc i32 %v0_14910 to i8
  %v4_14910 = add i32 %v0_148f4, %v0_148e4
  %v5_14910 = inttoptr i32 %v4_14910 to i8*
  store i8 %v1_14910, i8* %v5_14910, align 1
  %v0_14914 = call i32 @memcpy()
  store i32 %v0_14914, i32* @r0, align 4
  %v0_14918 = load i32, i32* @r6, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_14918 = icmp slt i32 %v0_14918, 0
  store i1 %v1_14918, i1* %cpsr_n.global-to-local, align 1
  %v2_14918 = icmp eq i32 %v0_14918, 0
  store i1 %v2_14918, i1* %cpsr_z.global-to-local, align 1
  %v0_1491c = load i32, i32* @r5, align 4
  %v1_1491c = load i32, i32* %r7.global-to-local, align 4
  %v2_1491c = add i32 %v1_1491c, %v0_1491c
  store i32 %v2_1491c, i32* %sl.global-to-local, align 4
  br i1 %v2_14918, label %dec_label_pc_1493c, label %dec_label_pc_14910.dec_label_pc_14924_crit_edge

dec_label_pc_14910.dec_label_pc_14924_crit_edge:  ; preds = %dec_label_pc_14910
  %v0_14924.pre = load i32, i32* @r4, align 4
  store i32 %v0_14924.pre, i32* @r0, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_14924 = icmp slt i32 %v0_14924.pre, 0
  store i1 %v1_14924, i1* %cpsr_n.global-to-local, align 1
  %v2_14924 = icmp eq i32 %v0_14924.pre, 0
  store i1 %v2_14924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14924, label %dec_label_pc_1493c, label %dec_label_pc_14930

dec_label_pc_14930:                               ; preds = %entry, %dec_label_pc_14910.dec_label_pc_14924_crit_edge
  %v0_148c826 = phi i32 [ %v0_14924.pre, %dec_label_pc_14910.dec_label_pc_14924_crit_edge ], [ %tmp, %entry ]
  %v5_14944525 = phi i32 [ %v2_1491c, %dec_label_pc_14910.dec_label_pc_14924_crit_edge ], [ 0, %entry ]
  %v1_14930 = inttoptr i32 %v0_148c826 to i8*
  %v2_14930 = load i8, i8* %v1_14930, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14934 = icmp eq i8 %v2_14930, 0
  store i1 %v2_14934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14934, label %dec_label_pc_1493c, label %dec_label_pc_148c8

dec_label_pc_1493c:                               ; preds = %dec_label_pc_14910.dec_label_pc_14924_crit_edge, %dec_label_pc_14910, %dec_label_pc_14930, %entry
  %v8_14948 = phi i32 [ 0, %entry ], [ %v5_14944525, %dec_label_pc_14930 ], [ %v2_1491c, %dec_label_pc_14910 ], [ %v2_1491c, %dec_label_pc_14910.dec_label_pc_14924_crit_edge ]
  %v0_1493c = load i32, i32* %sb.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1493c = icmp slt i32 %v0_1493c, 0
  store i1 %v1_1493c, i1* %cpsr_n.global-to-local, align 1
  %v2_1493c = icmp eq i32 %v0_1493c, 0
  store i1 %v2_1493c, i1* %cpsr_z.global-to-local, align 1
  %tmp21 = icmp slt i32 %v0_1493c, 1
  br i1 %tmp21, label %bb22, label %bb

bb:                                               ; preds = %dec_label_pc_1493c
  %v6_14944 = add i32 %v8_14948, 1
  store i32 %v6_14944, i32* @r0, align 4
  %v7_14948 = load i32, i32* %r8.global-to-local, align 4
  %v9_14948 = add i32 %v7_14948, %v8_14948
  %v10_14948 = inttoptr i32 %v9_14948 to i8*
  store i8 0, i8* %v10_14948, align 1
  %v0_1494c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_1494c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1494c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb22

bb22:                                             ; preds = %dec_label_pc_1493c, %bb
  %v2_1494c = phi i1 [ %v2_1494c.pre, %bb ], [ false, %dec_label_pc_1493c ]
  %v1_1494c = phi i1 [ %v1_1494c.pre, %bb ], [ %v1_1493c, %dec_label_pc_1493c ]
  %v0_1494c = phi i1 [ %v0_1494c.pre, %bb ], [ %v2_1493c, %dec_label_pc_1493c ]
  %v3_1494c = xor i1 %v2_1494c, %v1_1494c
  %v4_1494c = or i1 %v0_1494c, %v3_1494c
  br i1 %v4_1494c, label %dec_label_pc_14950, label %.dec_label_pc_14954_crit_edge

.dec_label_pc_14954_crit_edge:                    ; preds = %bb22
  %v1_14958.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14954

dec_label_pc_14950:                               ; preds = %dec_label_pc_14908, %dec_label_pc_148e4, %bb22
  br label %dec_label_pc_14954

dec_label_pc_14954:                               ; preds = %.dec_label_pc_14954_crit_edge, %dec_label_pc_14950
  %v1_14958 = phi i32 [ %v1_14958.pre, %.dec_label_pc_14954_crit_edge ], [ -1, %dec_label_pc_14950 ]
  %v2_14954 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_14954, i32* @r4, align 4
  store i32 %v6_148b0, i32* @r5, align 4
  store i32 %v9_148b0, i32* @r6, align 4
  ret i32 %v1_14958

; uselistorder directives
  uselistorder i32 %v0_1493c, { 0, 2, 1 }
  uselistorder i32 %v0_14924.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14918, { 1, 0 }
  uselistorder i32 %v2_14908, { 1, 0 }
  uselistorder i32 %v1_148fc, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v0_14910, { 2, 4, 0, 1, 5, 3, 6, 7, 8 }
  uselistorder i32 %v1_148e0, { 1, 0 }
  uselistorder i1 %v2_1492424, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i8 0, { 6, 39, 40, 41, 25, 26, 43, 44, 42, 0, 1, 45, 38, 47, 48, 49, 50, 46, 52, 51, 8, 53, 54, 55, 28, 56, 57, 2, 59, 58, 60, 3, 61, 27, 62, 9, 10, 63, 4, 64, 65, 67, 66, 29, 68, 30, 11, 69, 70, 71, 72, 12, 74, 73, 13, 14, 15, 16, 17, 76, 75, 31, 77, 5, 78, 79, 7, 80, 82, 81, 32, 83, 18, 84, 85, 19, 20, 21, 22, 23, 86, 33, 24, 88, 34, 89, 90, 87, 91, 92, 93, 94, 95, 96, 97, 98, 100, 99, 101, 103, 104, 102, 35, 105, 106, 37, 107, 36, 108, 109 }
  uselistorder i32 ()* @memcpy, { 15, 21, 20, 19, 18, 17, 14, 13, 8, 7, 6, 5, 4, 3, 10, 16, 12, 11, 2, 9, 0, 1 }
  uselistorder i32 (i8*)* @strlen, { 7, 5, 18, 17, 16, 19, 4, 3, 2, 1, 15, 14, 6, 13, 12, 11, 9, 10, 8, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 10, 6, 5, 4, 2, 1, 0, 9, 8, 7, 13, 12, 11, 3 }
  uselistorder label %dec_label_pc_14954, { 1, 0 }
  uselistorder label %dec_label_pc_14950, { 2, 0, 1 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %dec_label_pc_1493c, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_14930, { 1, 0 }
  uselistorder label %dec_label_pc_148e4, { 1, 0 }
}

define i32 @__GI_fseek() local_unnamed_addr {
entry:
  %v0_14968 = load i32, i32* @r1, align 4
  store i32 %v0_14968, i32* @r2, align 4
  %v0_14970 = call i32 @__GI_fseeko64()
  ret i32 %v0_14970
}

define i32 @__GI_fseeko64() local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp16 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %v3_14980 = load i32, i32* @r4, align 4
  %v6_14980 = load i32, i32* @r5, align 4
  %v12_14980 = load i32, i32* @r7, align 4
  store i32 %tmp16, i32* @r7, align 4
  %v0_14994 = load i32, i32* @r2, align 4
  store i32 %v0_14994, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32* %r6.global-to-local, align 4
  %v0_149a0 = load i32, i32* @r0, align 4
  store i32 %v0_149a0, i32* @r5, align 4
  %tmp = icmp ult i32 %tmp16, 3
  br i1 %tmp, label %dec_label_pc_149bc, label %dec_label_pc_149a8

dec_label_pc_149a8:                               ; preds = %entry
  %v0_149a8 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_149b4 = inttoptr i32 %v0_149a8 to i32*
  store i32 22, i32* %v2_149b4, align 4
  br label %dec_label_pc_14aac

dec_label_pc_149bc:                               ; preds = %entry
  %v1_149bc = add i32 %v0_149a0, 52
  %v2_149bc = inttoptr i32 %v1_149bc to i32*
  %v3_149bc = load i32, i32* %v2_149bc, align 4
  %v1_149c0 = sub i32 1, %v3_149bc
  store i32 %v1_149c0, i32* %r8.global-to-local, align 4
  %v2_149c0 = icmp ult i32 %v3_149bc, 2
  br i1 %v2_149c0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_149bc
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14a08

bb:                                               ; preds = %dec_label_pc_149bc
  %v2_149c8 = icmp eq i32 %v1_149c0, 0
  br i1 %v2_149c8, label %dec_label_pc_14a08, label %dec_label_pc_149d0

dec_label_pc_149d0:                               ; preds = %bb
  %v1_149d4 = add i32 %v0_149a0, 56
  store i32 %v1_149d4, i32* @r4, align 4
  %v4_149d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 36) to i32*), align 4
  store i32 %v4_149d8, i32* %r1.global-to-local, align 4
  store i32 %v1_149d4, i32* %r2.global-to-local, align 4
  %v4_149e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_149e8)
  %v0_149fc = load i32, i32* %r6.global-to-local, align 4
  %v2_149fc = add i32 %v0_149fc, 16
  %v3_149fc = inttoptr i32 %v2_149fc to i32*
  %v4_149fc = load i32, i32* %v3_149fc, align 4
  store i32 %v4_149fc, i32* @ip, align 4
  store i32 84488, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_149fc)
  %v0_14a08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14a08

dec_label_pc_14a08:                               ; preds = %.thread, %bb, %dec_label_pc_149d0
  %v0_14a14 = phi i32 [ %v0_149a0, %.thread ], [ %v0_149a0, %bb ], [ %v0_14a08.pre, %dec_label_pc_149d0 ]
  %v1_14a08 = inttoptr i32 %v0_14a14 to i16*
  %v2_14a08 = load i16, i16* %v1_14a08, align 2
  %v1_14a0c = and i16 %v2_14a08, 64
  %v2_14a0c = icmp eq i16 %v1_14a0c, 0
  br i1 %v2_14a0c, label %dec_label_pc_14a24, label %dec_label_pc_14a14

dec_label_pc_14a14:                               ; preds = %dec_label_pc_14a08
  store i32 %v0_14a14, i32* @r0, align 4
  %v0_14a18 = call i32 @__stdio_wcommit()
  %v2_14a1c = icmp eq i32 %v0_14a18, 0
  br i1 %v2_14a1c, label %dec_label_pc_14a24, label %dec_label_pc_14a8c

dec_label_pc_14a24:                               ; preds = %dec_label_pc_14a14, %dec_label_pc_14a08
  %v0_14a24 = load i32, i32* @r7, align 4
  %v7_14a24 = icmp eq i32 %v0_14a24, 1
  br i1 %v7_14a24, label %dec_label_pc_14a2c, label %dec_label_pc_14a24.dec_label_pc_14a40_crit_edge

dec_label_pc_14a24.dec_label_pc_14a40_crit_edge:  ; preds = %dec_label_pc_14a24
  %.pre = ptrtoint i32* %stack_var_-32 to i32
  br label %dec_label_pc_14a40

dec_label_pc_14a2c:                               ; preds = %dec_label_pc_14a24
  %v0_14a2c = load i32, i32* @r5, align 4
  %v2_14a30 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_14a30, i32* %r1.global-to-local, align 4
  %v2_14a34 = inttoptr i32 %v0_14a2c to i16*
  %v3_14a34 = call i32 @__stdio_adjust_position(i16* %v2_14a34, i32 %v2_14a30)
  %v1_14a38 = icmp slt i32 %v3_14a34, 0
  br i1 %v1_14a38, label %dec_label_pc_14a8c, label %dec_label_pc_14a2c.dec_label_pc_14a40_crit_edge

dec_label_pc_14a2c.dec_label_pc_14a40_crit_edge:  ; preds = %dec_label_pc_14a2c
  %v0_14a40.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14a40

dec_label_pc_14a40:                               ; preds = %dec_label_pc_14a24.dec_label_pc_14a40_crit_edge, %dec_label_pc_14a2c.dec_label_pc_14a40_crit_edge
  %v2_14a48.pre-phi = phi i32 [ %.pre, %dec_label_pc_14a24.dec_label_pc_14a40_crit_edge ], [ %v2_14a30, %dec_label_pc_14a2c.dec_label_pc_14a40_crit_edge ]
  %v0_14a40 = phi i32 [ %v0_14a24, %dec_label_pc_14a24.dec_label_pc_14a40_crit_edge ], [ %v0_14a40.pre, %dec_label_pc_14a2c.dec_label_pc_14a40_crit_edge ]
  store i32 %v0_14a40, i32* %r2.global-to-local, align 4
  %v0_14a44 = load i32, i32* @r5, align 4
  store i32 %v2_14a48.pre-phi, i32* %r1.global-to-local, align 4
  %v4_14a4c = call i32 @__stdio_seek(i32 %v0_14a44, i32* nonnull %stack_var_-32, i32 %v0_14a40)
  %v1_14a50 = icmp slt i32 %v4_14a4c, 0
  br i1 %v1_14a50, label %dec_label_pc_14a8c, label %dec_label_pc_14a58

dec_label_pc_14a58:                               ; preds = %dec_label_pc_14a40
  %v0_14a58 = load i32, i32* @r5, align 4
  %v1_14a58 = inttoptr i32 %v0_14a58 to i16*
  %v2_14a58 = load i16, i16* %v1_14a58, align 2
  %v1_14a5c = add i32 %v0_14a58, 8
  %v2_14a5c = inttoptr i32 %v1_14a5c to i32*
  %v3_14a5c = load i32, i32* %v2_14a5c, align 4
  store i32 %v3_14a5c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_14a64 = and i16 %v2_14a58, -72
  store i32 0, i32* %r4.global-to-local, align 4
  store i16 %v1_14a64, i16* %v1_14a58, align 2
  %v0_14a70 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a70 = load i32, i32* @r5, align 4
  %v2_14a70 = add i32 %v1_14a70, 28
  %v3_14a70 = inttoptr i32 %v2_14a70 to i32*
  store i32 %v0_14a70, i32* %v3_14a70, align 4
  %v0_14a74 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a74 = trunc i32 %v0_14a74 to i8
  %v2_14a74 = load i32, i32* @r5, align 4
  %v3_14a74 = add i32 %v2_14a74, 2
  %v4_14a74 = inttoptr i32 %v3_14a74 to i8*
  store i8 %v1_14a74, i8* %v4_14a74, align 1
  %v0_14a78 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a78 = load i32, i32* @r5, align 4
  %v2_14a78 = add i32 %v1_14a78, 16
  %v3_14a78 = inttoptr i32 %v2_14a78 to i32*
  store i32 %v0_14a78, i32* %v3_14a78, align 4
  %v0_14a7c = load i32, i32* %r2.global-to-local, align 4
  %v1_14a7c = load i32, i32* @r5, align 4
  %v2_14a7c = add i32 %v1_14a7c, 20
  %v3_14a7c = inttoptr i32 %v2_14a7c to i32*
  store i32 %v0_14a7c, i32* %v3_14a7c, align 4
  %v0_14a80 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a80 = load i32, i32* @r5, align 4
  %v2_14a80 = add i32 %v1_14a80, 24
  %v3_14a80 = inttoptr i32 %v2_14a80 to i32*
  store i32 %v0_14a80, i32* %v3_14a80, align 4
  %v0_14a84 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a84 = load i32, i32* @r5, align 4
  %v2_14a84 = add i32 %v1_14a84, 44
  %v3_14a84 = inttoptr i32 %v2_14a84 to i32*
  store i32 %v0_14a84, i32* %v3_14a84, align 4
  br label %dec_label_pc_14a90

dec_label_pc_14a8c:                               ; preds = %dec_label_pc_14a14, %dec_label_pc_14a40, %dec_label_pc_14a2c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a90

dec_label_pc_14a90:                               ; preds = %dec_label_pc_14a58, %dec_label_pc_14a8c
  %v0_14a90 = load i32, i32* %r8.global-to-local, align 4
  %v2_14a90 = icmp eq i32 %v0_14a90, 0
  br i1 %v2_14a90, label %dec_label_pc_14a90..thread8_crit_edge, label %bb20

dec_label_pc_14a90..thread8_crit_edge:            ; preds = %dec_label_pc_14a90
  %v0_14aa8.pre = load i32, i32* @ip, align 4
  br label %.thread8

bb20:                                             ; preds = %dec_label_pc_14a90
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_14aa0 = load i32, i32* %r6.global-to-local, align 4
  %v3_14aa0 = add i32 %v1_14aa0, 24
  %v4_14aa0 = inttoptr i32 %v3_14aa0 to i32*
  %v5_14aa0 = load i32, i32* %v4_14aa0, align 4
  store i32 %v5_14aa0, i32* @ip, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14a90..thread8_crit_edge, %bb20
  %v0_14aa8 = phi i32 [ %v0_14aa8.pre, %dec_label_pc_14a90..thread8_crit_edge ], [ %v5_14aa0, %bb20 ]
  %v2_14aa8 = xor i1 %v2_14a90, true
  call void @__pseudo_cond_branch(i1 %v2_14aa8, i32 %v0_14aa8)
  br label %dec_label_pc_14aac

dec_label_pc_14aac:                               ; preds = %dec_label_pc_149a8, %.thread8
  %v0_14aac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_14980, i32* @r4, align 4
  store i32 %v6_14980, i32* @r5, align 4
  store i32 %v12_14980, i32* @r7, align 4
  ret i32 %v0_14aac

; uselistorder directives
  uselistorder i32 %v0_14a40, { 1, 0 }
  uselistorder i32 %v3_149bc, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 3, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32 24, { 0, 30, 31, 48, 52, 54, 55, 32, 33, 34, 35, 36, 37, 38, 39, 1, 66, 6, 8, 56, 57, 40, 41, 42, 43, 9, 58, 59, 10, 53, 67, 2, 63, 60, 61, 62, 11, 12, 13, 15, 14, 16, 3, 17, 49, 50, 44, 64, 18, 65, 19, 20, 51, 21, 45, 46, 22, 47, 23, 24, 25, 4, 26, 27, 28, 7, 29, 5 }
  uselistorder i32 28, { 18, 19, 32, 4, 20, 21, 22, 23, 24, 25, 26, 0, 27, 6, 35, 5, 38, 39, 44, 46, 47, 7, 8, 45, 9, 10, 40, 33, 34, 28, 11, 29, 12, 49, 36, 37, 31, 48, 13, 1, 41, 42, 30, 43, 14, 15, 16, 3, 17, 2 }
  uselistorder i32 ()* @__stdio_wcommit, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 76, { 18, 19, 20, 21, 0, 4, 5, 6, 7, 8, 1, 9, 2, 10, 11, 12, 13, 14, 15, 16, 3, 17 }
  uselistorder i32 36, { 25, 26, 21, 22, 29, 30, 31, 32, 7, 4, 6, 27, 8, 23, 9, 24, 10, 0, 1, 11, 2, 5, 28, 12, 13, 14, 15, 16, 18, 19, 17, 20, 3 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.70 to i32), i32 36) to i32*), { 0, 2, 4, 1, 3 }
  uselistorder i32 56, { 5, 4, 12, 6, 7, 8, 9, 13, 14, 11, 10, 2, 15, 1, 0, 3 }
  uselistorder i32 22, { 1, 11, 2, 3, 13, 4, 15, 0, 14, 5, 6, 7, 8, 12, 9, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_1f010.70 to i32), { 95, 3, 8, 10, 5, 6, 9, 4, 7, 96, 97, 69, 11, 98, 12, 99, 71, 70, 33, 30, 31, 32, 29, 13, 36, 28, 72, 73, 100, 14, 15, 74, 101, 1, 102, 103, 104, 105, 106, 107, 75, 76, 108, 38, 37, 39, 109, 110, 27, 77, 111, 112, 113, 114, 78, 79, 115, 80, 116, 16, 117, 118, 119, 40, 17, 81, 120, 121, 122, 18, 82, 123, 124, 19, 20, 125, 21, 83, 126, 22, 127, 23, 128, 84, 129, 85, 130, 24, 25, 26, 131, 87, 132, 133, 134, 135, 136, 137, 34, 64, 60, 58, 57, 59, 61, 62, 63, 56, 65, 51, 53, 52, 50, 49, 54, 55, 46, 45, 48, 47, 44, 43, 42, 41, 89, 66, 88, 67, 35, 68, 86, 90, 138, 2, 92, 91, 93, 94, 139, 0 }
  uselistorder i32* @r7, { 19, 4, 20, 21, 22, 23, 0, 24, 25, 26, 27, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 106, 107, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 14, 15, 37, 38, 39, 40, 43, 44, 45, 46, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 146, 147, 148, 149, 150, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 47, 48, 49, 50, 1, 51, 2, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 5, 151, 152, 52, 53, 54, 55, 56, 57, 58, 59, 74, 140, 141, 142, 143, 144, 145, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 6, 153, 159, 154, 7, 155, 156, 157, 12, 158, 160, 8, 161, 162, 129, 130, 131, 99, 9, 100, 101, 102, 103, 104, 105, 60, 61, 66, 67, 68, 69, 62, 63, 64, 65, 70, 71, 72, 73, 240, 241, 242, 243, 204, 205, 75, 81, 82, 244, 245, 246, 249, 250, 10, 16, 17, 76, 77, 3, 78, 13, 79, 80, 206, 207, 212, 213, 214, 215, 216, 217, 218, 208, 209, 210, 211, 219, 220, 221, 222, 223, 224, 225, 226, 11, 227, 228, 229, 198, 199, 200, 201, 234, 235, 232, 233, 202, 203, 236, 237, 238, 239, 247, 248, 83, 84, 230, 231, 85, 86, 18 }
  uselistorder label %dec_label_pc_14aac, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_14a90, { 1, 0 }
  uselistorder label %dec_label_pc_14a8c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14a40, { 1, 0 }
  uselistorder label %dec_label_pc_14a08, { 2, 1, 0 }
}

define i32 @function_14ac0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ac0:
  %v0_14ac0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14ac0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14ac0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14ac0, %bb
  %v10_14acc = phi i32 [ %arg1, %dec_label_pc_14ac0 ], [ 0, %bb ]
  ret i32 %v10_14acc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__stdio_adjust_position(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14ad0 = load i32, i32* @r4, align 4
  store i32 %v3_14ad0, i32* %stack_var_-12, align 4
  %v3_14ad4 = load i16, i16* %arg1, align 2
  %v4_14ad4 = zext i16 %v3_14ad4 to i32
  store i32 %v4_14ad4, i32* @ip, align 4
  %tmp17 = urem i16 %v3_14ad4, 4
  %v1_14ad8 = zext i16 %tmp17 to i32
  store i32 %v1_14ad8, i32* %r2.global-to-local, align 4
  %v2_14ad8 = icmp eq i16 %tmp17, 0
  br i1 %v2_14ad8, label %bb, label %dec_label_pc_14aec

bb:                                               ; preds = %entry
  br label %bb14

dec_label_pc_14aec:                               ; preds = %entry
  %v1_14aec = add nsw i32 %v1_14ad8, -1
  %v7_14aec = icmp eq i16 %tmp17, 1
  br i1 %v7_14aec, label %bb14, label %dec_label_pc_14af4

dec_label_pc_14af4:                               ; preds = %dec_label_pc_14aec
  %v1_14af4 = and i32 %v4_14ad4, 2048
  %v2_14af4 = icmp eq i32 %v1_14af4, 0
  br i1 %v2_14af4, label %bb14, label %dec_label_pc_14afc

dec_label_pc_14afc:                               ; preds = %dec_label_pc_14af4
  %v7_14afc = icmp eq i32 %v1_14aec, 2
  br i1 %v7_14afc, label %dec_label_pc_14b80, label %dec_label_pc_14b04

dec_label_pc_14b04:                               ; preds = %dec_label_pc_14afc
  %v2_14b04 = add i32 %tmp, 40
  %v3_14b04 = inttoptr i32 %v2_14b04 to i32*
  %v4_14b04 = load i32, i32* %v3_14b04, align 4
  store i32 %v4_14b04, i32* %r3.global-to-local, align 4
  %v2_14b08 = icmp eq i32 %v4_14b04, 0
  br i1 %v2_14b08, label %dec_label_pc_14b10, label %dec_label_pc_14b80

dec_label_pc_14b10:                               ; preds = %dec_label_pc_14b04
  %v2_14b10 = add i32 %tmp, 44
  %v3_14b10 = inttoptr i32 %v2_14b10 to i32*
  %v4_14b10 = load i32, i32* %v3_14b10, align 4
  store i32 %v4_14b10, i32* %r3.global-to-local, align 4
  %v2_14b14 = add i32 %tmp, 3
  %v3_14b14 = inttoptr i32 %v2_14b14 to i8*
  %v4_14b14 = load i8, i8* %v3_14b14, align 1
  %v5_14b14 = zext i8 %v4_14b14 to i32
  store i32 %v5_14b14, i32* %r2.global-to-local, align 4
  %v2_14b18 = icmp eq i32 %v4_14b10, 0
  br i1 %v2_14b18, label %.thread1, label %bb13

.thread1:                                         ; preds = %dec_label_pc_14b10
  %v1_14b203 = sub nsw i32 0, %v5_14b14
  br label %bb14

bb13:                                             ; preds = %dec_label_pc_14b10
  %v3_14b1c = add i32 %tmp, 2
  %v4_14b1c = inttoptr i32 %v3_14b1c to i8*
  %v5_14b1c = load i8, i8* %v4_14b1c, align 1
  %v6_14b1c = zext i8 %v5_14b1c to i32
  store i32 %v6_14b1c, i32* %r3.global-to-local, align 4
  %sum = add nuw nsw i32 %v6_14b1c, %v5_14b14
  %v3_14b24 = sub nsw i32 0, %sum
  br label %bb14

bb14:                                             ; preds = %bb, %.thread1, %dec_label_pc_14af4, %dec_label_pc_14aec, %bb13
  %v1_14b38 = phi i32 [ %v1_14b203, %.thread1 ], [ %v1_14aec, %dec_label_pc_14af4 ], [ %v1_14aec, %dec_label_pc_14aec ], [ 0, %bb ], [ %v3_14b24, %bb13 ]
  %v1_14b28 = and i32 %v4_14ad4, 64
  %v2_14b28 = icmp eq i32 %v1_14b28, 0
  %v2_14b2c = add i32 %tmp, 16
  %v3_14b2c = inttoptr i32 %v2_14b2c to i32*
  %v4_14b2c = load i32, i32* %v3_14b2c, align 4
  store i32 %v4_14b2c, i32* %r3.global-to-local, align 4
  %storemerge.in.in.v = select i1 %v2_14b28, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_14b38 = sub i32 %v1_14b38, %v4_14b2c
  store i32 %v2_14b38, i32* %r3.global-to-local, align 4
  %v1_14b3c = inttoptr i32 %arg2 to i32*
  %v2_14b3c = load i32, i32* %v1_14b3c, align 4
  store i32 %v2_14b3c, i32* %r0.global-to-local, align 4
  %v3_14b3c = add i32 %arg2, 4
  %v4_14b3c = inttoptr i32 %v3_14b3c to i32*
  %v5_14b3c = load i32, i32* %v4_14b3c, align 4
  %v2_14b40 = add i32 %storemerge, %v2_14b38
  store i32 %v2_14b40, i32* %r4.global-to-local, align 4
  %v2_14b44 = sub i32 %v2_14b3c, %v2_14b40
  store i32 %v2_14b44, i32* %r2.global-to-local, align 4
  %v2_14b48 = and i32 %v2_14b40, 1073741824
  %v3_14b48 = icmp ne i32 %v2_14b48, 0
  %v4_14b48 = ashr i32 %v2_14b40, 31
  %v6_14b48 = icmp eq i1 %v3_14b48, false
  %v7_14b48 = sub i32 %v5_14b3c, %v4_14b48
  %v9_14b48 = sext i1 %v6_14b48 to i32
  %v10_14b48 = add i32 %v7_14b48, %v9_14b48
  store i32 %v10_14b48, i32* %r3.global-to-local, align 4
  %v2_14b4c = sub i32 %v10_14b48, %v5_14b3c
  %v4_14b4c = xor i32 %v10_14b48, %v5_14b3c
  %v5_14b4c = xor i32 %v2_14b4c, %v10_14b48
  %v6_14b4c = and i32 %v5_14b4c, %v4_14b4c
  %v7_14b4c = icmp slt i32 %v6_14b4c, 0
  %v8_14b4c = icmp slt i32 %v2_14b4c, 0
  %v9_14b4c = icmp eq i32 %v10_14b48, %v5_14b3c
  store i32 %v2_14b44, i32* %v1_14b3c, align 4
  %v5_14b50 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_14b50, i32* %v4_14b3c, align 4
  %v3_14b54 = xor i1 %v8_14b4c, %v7_14b4c
  %v4_14b54 = or i1 %v9_14b4c, %v3_14b54
  br i1 %v4_14b54, label %dec_label_pc_14b58, label %dec_label_pc_14b64

dec_label_pc_14b58:                               ; preds = %bb14
  br i1 %v9_14b4c, label %dec_label_pc_14b5c, label %dec_label_pc_14b68thread-pre-split

dec_label_pc_14b5c:                               ; preds = %dec_label_pc_14b58
  %v0_14b5c = load i32, i32* %r2.global-to-local, align 4
  %v1_14b5c = load i32, i32* %r0.global-to-local, align 4
  %tmp18 = icmp ugt i32 %v0_14b5c, %v1_14b5c
  br i1 %tmp18, label %dec_label_pc_14b64, label %dec_label_pc_14b68thread-pre-split

dec_label_pc_14b64:                               ; preds = %dec_label_pc_14b5c, %bb14
  %v0_14b64 = load i32, i32* %r4.global-to-local, align 4
  %v1_14b64 = sub i32 0, %v0_14b64
  store i32 %v1_14b64, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b68

dec_label_pc_14b68thread-pre-split:               ; preds = %dec_label_pc_14b5c, %dec_label_pc_14b58
  %v0_14b68.pr = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b68

dec_label_pc_14b68:                               ; preds = %dec_label_pc_14b68thread-pre-split, %dec_label_pc_14b64
  %v0_14b68 = phi i32 [ %v0_14b68.pr, %dec_label_pc_14b68thread-pre-split ], [ %v1_14b64, %dec_label_pc_14b64 ]
  %v1_14b68 = icmp slt i32 %v0_14b68, 0
  br i1 %v1_14b68, label %dec_label_pc_14b70, label %dec_label_pc_14b84

dec_label_pc_14b70:                               ; preds = %dec_label_pc_14b68
  %v0_14b70 = call i32 @__GI___errno_location()
  store i32 %v0_14b70, i32* %r0.global-to-local, align 4
  store i32 75, i32* %r3.global-to-local, align 4
  %v2_14b78 = inttoptr i32 %v0_14b70 to i32*
  store i32 75, i32* %v2_14b78, align 4
  %v0_14b84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b84

dec_label_pc_14b80:                               ; preds = %dec_label_pc_14b04, %dec_label_pc_14afc
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b84

dec_label_pc_14b84:                               ; preds = %dec_label_pc_14b68, %dec_label_pc_14b70, %dec_label_pc_14b80
  %v0_14b84 = phi i32 [ %v0_14b68, %dec_label_pc_14b68 ], [ %v0_14b84.pre, %dec_label_pc_14b70 ], [ -1, %dec_label_pc_14b80 ]
  store i32 %v0_14b84, i32* %r0.global-to-local, align 4
  %v2_14b8c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14b8c, i32* @r4, align 4
  ret i32 %v0_14b84

; uselistorder directives
  uselistorder i32 %v0_14b84, { 1, 0 }
  uselistorder i1 %v9_14b4c, { 1, 0 }
  uselistorder i32 %v2_14b4c, { 1, 0 }
  uselistorder i32 %v10_14b48, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v5_14b3c, { 2, 0, 1, 3 }
  uselistorder i32 %tmp, { 0, 5, 1, 3, 2, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 3, 1, 2, 5 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 3, 0 }
  uselistorder i32 ()* @__GI___errno_location, { 72, 71, 70, 69, 40, 39, 68, 67, 66, 61, 37, 36, 35, 34, 33, 65, 64, 63, 26, 30, 60, 59, 29, 32, 56, 51, 31, 38, 25, 62, 28, 27, 58, 57, 55, 54, 53, 52, 8, 7, 21, 50, 6, 45, 20, 19, 18, 16, 15, 49, 48, 47, 17, 14, 44, 24, 23, 1, 12, 11, 22, 5, 10, 46, 3, 9, 4, 43, 0, 13, 42, 41, 2 }
  uselistorder i32 64, { 5, 6, 3, 17, 0, 14, 12, 7, 8, 9, 10, 15, 16, 11, 13, 18, 2, 4, 1 }
  uselistorder i32 44, { 6, 7, 9, 10, 2, 11, 8, 34, 12, 13, 1, 0, 3, 14, 4, 18, 19, 20, 21, 22, 23, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 5 }
  uselistorder i32 40, { 5, 11, 12, 6, 7, 8, 9, 10, 15, 1, 13, 16, 2, 14, 4, 3, 0 }
  uselistorder i16 0, { 9, 0, 10, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i16 4, { 2, 3, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_14b84, { 2, 1, 0 }
  uselistorder label %bb14, { 4, 1, 2, 3, 0 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_14ba0 = load i32, i32* %arg2, align 4
  %v3_14ba0 = add i32 %tmp, 4
  %v4_14ba0 = inttoptr i32 %v3_14ba0 to i32*
  %v5_14ba0 = load i32, i32* %v4_14ba0, align 4
  %v1_14ba4 = add i32 %arg1, 4
  %v2_14ba4 = inttoptr i32 %v1_14ba4 to i32*
  %v3_14ba4 = load i32, i32* %v2_14ba4, align 4
  store i32 %tmp, i32* @r4, align 4
  %v4_14bac = call i32 @__GI_lseek64(i32 %v3_14ba4, i32 %tmp, i32 %v2_14ba0, i32 %v5_14ba0)
  %v1_14bb0 = icmp slt i32* %arg2, null
  br i1 %v1_14bb0, label %bb13, label %bb

bb:                                               ; preds = %entry
  %v3_14bb85 = load i32, i32* @r4, align 4
  %v4_14bb86 = inttoptr i32 %v3_14bb85 to i32*
  store i32 %v4_14bac, i32* %v4_14bb86, align 4
  %v6_14bb87 = add i32 %v3_14bb85, 4
  %v7_14bb88 = inttoptr i32 %v6_14bb87 to i32*
  store i32 %tmp, i32* %v7_14bb88, align 4
  br label %bb13

bb13:                                             ; preds = %entry, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v4_14bac, %entry ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %tmp, { 0, 3, 2, 1 }
  uselistorder i32* null, { 2, 3, 0, 4, 1, 6, 7, 8, 9, 5, 10 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_lseek64, { 1, 0 }
  uselistorder label %bb13, { 1, 0 }
}

define i32 @__aeabi_idiv(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r1, align 4
  %v0_14bd0 = load i32, i32* @r1, align 4
  %v1_14bd0 = icmp slt i32 %v0_14bd0, 0
  %v2_14bd0 = icmp eq i32 %v0_14bd0, 0
  %v2_14bd4 = xor i32 %v0_14bd0, %arg1
  br i1 %v2_14bd0, label %dec_label_pc_14ce8, label %dec_label_pc_14bdc

dec_label_pc_14bdc:                               ; preds = %entry
  br i1 %v1_14bd0, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_14bdc
  %v2_14bdc = sub i32 0, %v0_14bd0
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_14bdc, %bb
  %v1_14ca8 = phi i32 [ %v2_14bdc, %bb ], [ %v0_14bd0, %dec_label_pc_14bdc ]
  %v1_14be0 = add i32 %v1_14ca8, -1
  %v7_14be0 = icmp eq i32 %v1_14ca8, 1
  br i1 %v7_14be0, label %dec_label_pc_14c88, label %dec_label_pc_14be8

dec_label_pc_14be8:                               ; preds = %thread-pre-split
  %v1_14be8 = icmp slt i32 %arg1, 0
  br i1 %v1_14be8, label %bb85, label %bb86

bb85:                                             ; preds = %dec_label_pc_14be8
  %v2_14bec = sub i32 0, %arg1
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_14be8, %bb85
  %v0_14cdc = phi i32 [ %arg1, %dec_label_pc_14be8 ], [ %v2_14bec, %bb85 ]
  %v3_14bf0 = icmp uge i32 %v0_14cdc, %v1_14ca8
  %v9_14bf0 = icmp eq i32 %v0_14cdc, %v1_14ca8
  %v2_14bf4 = xor i1 %v3_14bf0, true
  %v3_14bf4 = or i1 %v9_14bf0, %v2_14bf4
  br i1 %v3_14bf4, label %dec_label_pc_14c94, label %dec_label_pc_14bf8

dec_label_pc_14bf8:                               ; preds = %bb86
  %v2_14bf8 = and i32 %v1_14be0, %v1_14ca8
  %v4_14bf8 = icmp eq i32 %v2_14bf8, 0
  br i1 %v4_14bf8, label %dec_label_pc_14ca4, label %dec_label_pc_14c00

dec_label_pc_14c00:                               ; preds = %dec_label_pc_14bf8
  %v3_14c00 = icmp ult i32 %v1_14ca8, 536870912
  br i1 %v3_14c00, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_14c00
  %v4_14c04 = mul i32 %v1_14ca8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_14c00, %.thread
  %v0_14c24.pr40.ph = phi i32 [ %v4_14c04, %.thread ], [ %v1_14ca8, %dec_label_pc_14c00 ]
  %storemerge143 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_14c00 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb89
  %v0_14c24.pr40 = phi i32 [ %v4_14c18, %bb89 ], [ %v0_14c24.pr40.ph, %.preheader.preheader ]
  %v1_14c1c = phi i32 [ %v4_14c1c, %bb89 ], [ %storemerge143, %.preheader.preheader ]
  %v2_14c10 = icmp ugt i32 %v0_14c24.pr40, 268435455
  br i1 %v2_14c10, label %.thread3, label %bb87

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_14c24thread-pre-split.loopexit

bb87:                                             ; preds = %.preheader
  %v4_14c14 = icmp ult i32 %v0_14c24.pr40, %v0_14cdc
  br i1 %v4_14c14, label %bb88, label %dec_label_pc_14c24thread-pre-split.loopexit.loopexit

bb88:                                             ; preds = %bb87
  %v2_14c18 = and i32 %v0_14c24.pr40, 268435456
  %v3_14c18 = icmp eq i32 %v2_14c18, 0
  %v4_14c18 = mul i32 %v0_14c24.pr40, 16
  br i1 %v3_14c18, label %bb89, label %dec_label_pc_14c24.loopexit

bb89:                                             ; preds = %bb88
  %v2_14c1c = and i32 %v1_14c1c, 268435456
  %v3_14c1c = icmp eq i32 %v2_14c1c, 0
  %v4_14c1c = mul i32 %v1_14c1c, 16
  br i1 %v3_14c1c, label %.preheader, label %dec_label_pc_14c24thread-pre-split.loopexit.loopexit

dec_label_pc_14c24thread-pre-split.loopexit.loopexit: ; preds = %bb89, %bb87
  %v1_14c3052.ph = phi i32 [ %v1_14c1c, %bb87 ], [ %v4_14c1c, %bb89 ]
  %v0_14c24.pr42.ph = phi i32 [ %v0_14c24.pr40, %bb87 ], [ %v4_14c18, %bb89 ]
  br label %dec_label_pc_14c24thread-pre-split.loopexit

dec_label_pc_14c24thread-pre-split.loopexit:      ; preds = %dec_label_pc_14c24thread-pre-split.loopexit.loopexit, %.thread3
  %v1_14c3052 = phi i32 [ %v1_14c1c, %.thread3 ], [ %v1_14c3052.ph, %dec_label_pc_14c24thread-pre-split.loopexit.loopexit ]
  %v0_14c24.pr42 = phi i32 [ %v0_14c24.pr40, %.thread3 ], [ %v0_14c24.pr42.ph, %dec_label_pc_14c24thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_14c24thread-pre-split

dec_label_pc_14c24thread-pre-split:               ; preds = %dec_label_pc_14c24thread-pre-split.loopexit, %bb91
  %v1_14c3050 = phi i32 [ %v1_14c3052, %dec_label_pc_14c24thread-pre-split.loopexit ], [ %v3_14c30, %bb91 ]
  %v2_14c2848 = phi i32 [ %v0_14cdc, %dec_label_pc_14c24thread-pre-split.loopexit ], [ %v2_14c28, %bb91 ]
  %v0_14c24.pr = phi i32 [ %v0_14c24.pr42, %dec_label_pc_14c24thread-pre-split.loopexit ], [ %v3_14c2c, %bb91 ]
  br label %dec_label_pc_14c24

dec_label_pc_14c24.loopexit:                      ; preds = %bb88
  br label %dec_label_pc_14c24

dec_label_pc_14c24:                               ; preds = %dec_label_pc_14c24.loopexit, %dec_label_pc_14c24thread-pre-split
  %v1_14c30 = phi i32 [ %v1_14c3050, %dec_label_pc_14c24thread-pre-split ], [ %v1_14c1c, %dec_label_pc_14c24.loopexit ]
  %v2_14c28 = phi i32 [ %v2_14c2848, %dec_label_pc_14c24thread-pre-split ], [ %v0_14cdc, %dec_label_pc_14c24.loopexit ]
  %v1_14c2c = phi i32 [ %v0_14c24.pr, %dec_label_pc_14c24thread-pre-split ], [ %v4_14c18, %dec_label_pc_14c24.loopexit ]
  %v2_14c24 = icmp slt i32 %v1_14c2c, 0
  br i1 %v2_14c24, label %dec_label_pc_14c38, label %bb90

bb90:                                             ; preds = %dec_label_pc_14c24
  %v4_14c28 = icmp ult i32 %v1_14c2c, %v2_14c28
  br i1 %v4_14c28, label %bb91, label %dec_label_pc_14c38

bb91:                                             ; preds = %bb90
  %v3_14c2c = mul i32 %v1_14c2c, 2
  %v2_14c30 = icmp slt i32 %v1_14c30, 0
  %v3_14c30 = mul i32 %v1_14c30, 2
  br i1 %v2_14c30, label %dec_label_pc_14c38, label %dec_label_pc_14c24thread-pre-split

dec_label_pc_14c38:                               ; preds = %bb90, %dec_label_pc_14c24, %bb91
  %v2_14c4463 = phi i32 [ %v3_14c30, %bb91 ], [ %v1_14c30, %bb90 ], [ %v1_14c30, %dec_label_pc_14c24 ]
  %v1_14c3c55 = phi i32 [ %v3_14c2c, %bb91 ], [ %v1_14c2c, %bb90 ], [ %v1_14c2c, %dec_label_pc_14c24 ]
  br label %dec_label_pc_14c3c

dec_label_pc_14c3c:                               ; preds = %.thread13, %dec_label_pc_14c38
  %v1_14c70 = phi i32 [ %v4_14c70, %.thread13 ], [ %v2_14c4463, %dec_label_pc_14c38 ]
  %v1_14c44 = phi i32 [ %v1_14c80, %.thread13 ], [ 0, %dec_label_pc_14c38 ]
  %v1_14c74 = phi i32 [ %v4_14c74, %.thread13 ], [ %v1_14c3c55, %dec_label_pc_14c38 ]
  %v1_14c40 = phi i32 [ %v0_14c6c, %.thread13 ], [ %v0_14cdc, %dec_label_pc_14c38 ]
  %v3_14c3c = icmp ult i32 %v1_14c40, %v1_14c74
  br i1 %v3_14c3c, label %.thread8, label %bb92

bb92:                                             ; preds = %dec_label_pc_14c3c
  %v3_14c40 = sub i32 %v1_14c40, %v1_14c74
  %v3_14c44 = or i32 %v1_14c44, %v1_14c70
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14c3c, %bb92
  %v1_14c4c = phi i32 [ %v1_14c40, %dec_label_pc_14c3c ], [ %v3_14c40, %bb92 ]
  %v1_14c50 = phi i32 [ %v1_14c44, %dec_label_pc_14c3c ], [ %v3_14c44, %bb92 ]
  %v4_14c48 = udiv i32 %v1_14c74, 2
  %v6_14c48 = icmp ult i32 %v1_14c4c, %v4_14c48
  br i1 %v6_14c48, label %.thread9, label %bb93

bb93:                                             ; preds = %.thread8
  %v3_14c4c = urem i32 %v1_14c74, 2
  %v4_14c4c = icmp eq i32 %v3_14c4c, 0
  %v6_14c4c = sub i32 %v1_14c4c, %v4_14c48
  br i1 %v4_14c4c, label %.thread9, label %bb94

bb94:                                             ; preds = %bb93
  %v5_14c50 = udiv i32 %v1_14c70, 2
  %v6_14c50 = or i32 %v1_14c50, %v5_14c50
  br label %.thread9

.thread9:                                         ; preds = %bb93, %.thread8, %bb94
  %v1_14c58 = phi i32 [ %v6_14c4c, %bb93 ], [ %v1_14c4c, %.thread8 ], [ %v6_14c4c, %bb94 ]
  %v1_14c5c = phi i32 [ %v1_14c50, %bb93 ], [ %v1_14c50, %.thread8 ], [ %v6_14c50, %bb94 ]
  %v4_14c54 = udiv i32 %v1_14c74, 4
  %v6_14c54 = icmp ult i32 %v1_14c58, %v4_14c54
  br i1 %v6_14c54, label %.thread10, label %bb95

bb95:                                             ; preds = %.thread9
  %v3_14c58 = and i32 %v1_14c74, 2
  %v4_14c58 = icmp eq i32 %v3_14c58, 0
  %v6_14c58 = sub i32 %v1_14c58, %v4_14c54
  br i1 %v4_14c58, label %.thread10, label %bb96

bb96:                                             ; preds = %bb95
  %v5_14c5c = udiv i32 %v1_14c70, 4
  %v6_14c5c = or i32 %v1_14c5c, %v5_14c5c
  br label %.thread10

.thread10:                                        ; preds = %bb95, %.thread9, %bb96
  %v1_14c64 = phi i32 [ %v6_14c58, %bb95 ], [ %v1_14c58, %.thread9 ], [ %v6_14c58, %bb96 ]
  %v1_14c68 = phi i32 [ %v1_14c5c, %bb95 ], [ %v1_14c5c, %.thread9 ], [ %v6_14c5c, %bb96 ]
  %v4_14c60 = udiv i32 %v1_14c74, 8
  %v6_14c60 = icmp ult i32 %v1_14c64, %v4_14c60
  br i1 %v6_14c60, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %.thread10
  %v3_14c64 = and i32 %v1_14c74, 4
  %v4_14c64 = icmp eq i32 %v3_14c64, 0
  %v6_14c64 = sub i32 %v1_14c64, %v4_14c60
  br i1 %v4_14c64, label %thread-pre-split12, label %bb98

bb98:                                             ; preds = %bb97
  %v5_14c68 = udiv i32 %v1_14c70, 8
  %v6_14c68 = or i32 %v1_14c68, %v5_14c68
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb98, %.thread10, %bb97
  %v1_14c80 = phi i32 [ %v1_14c68, %bb97 ], [ %v1_14c68, %.thread10 ], [ %v6_14c68, %bb98 ]
  %v0_14c6c = phi i32 [ %v6_14c64, %bb97 ], [ %v1_14c64, %.thread10 ], [ %v6_14c64, %bb98 ]
  %v2_14c6c = icmp eq i32 %v0_14c6c, 0
  br i1 %v2_14c6c, label %dec_label_pc_14c7c, label %bb99

bb99:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_14c70, 16
  br i1 %tmp, label %dec_label_pc_14c7c, label %.thread13

.thread13:                                        ; preds = %bb99
  %v4_14c70 = udiv i32 %v1_14c70, 16
  %v4_14c74 = udiv i32 %v1_14c74, 16
  br label %dec_label_pc_14c3c

dec_label_pc_14c7c:                               ; preds = %thread-pre-split12, %bb99
  %v1_14c7c = icmp slt i32 %v2_14bd4, 0
  br i1 %v1_14c7c, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_14c7c
  %v2_14c80 = sub i32 0, %v1_14c80
  br label %.thread16

.thread16:                                        ; preds = %bb104, %bb103, %bb101, %dec_label_pc_14c88, %dec_label_pc_14c7c, %bb100
  %v1_14c84 = phi i32 [ %v1_14c80, %dec_label_pc_14c7c ], [ %v2_14c80, %bb100 ], [ %arg1, %dec_label_pc_14c88 ], [ %v2_14c8c, %bb101 ], [ %v1_14ca080, %bb103 ], [ %v2_14c9c, %bb104 ]
  ret i32 %v1_14c84

dec_label_pc_14c88:                               ; preds = %thread-pre-split
  br i1 %v1_14bd0, label %bb101, label %.thread16

bb101:                                            ; preds = %dec_label_pc_14c88
  %v2_14c8c = sub i32 0, %arg1
  br label %.thread16

dec_label_pc_14c94:                               ; preds = %bb86
  br i1 %v3_14bf0, label %bb103, label %bb102

bb102:                                            ; preds = %dec_label_pc_14c94
  br label %bb103

bb103:                                            ; preds = %dec_label_pc_14c94, %bb102
  %v1_14ca080 = phi i32 [ %arg1, %dec_label_pc_14c94 ], [ 0, %bb102 ]
  br i1 %v9_14bf0, label %bb104, label %.thread16

bb104:                                            ; preds = %bb103
  %v4_14c98 = ashr i32 %v2_14bd4, 31
  %v2_14c9c = or i32 %v4_14c98, 1
  br label %.thread16

dec_label_pc_14ca4:                               ; preds = %dec_label_pc_14bf8
  %v2_14ca4 = icmp ugt i32 %v1_14ca8, 65535
  br i1 %v2_14ca4, label %bb105, label %.thread19

bb105:                                            ; preds = %dec_label_pc_14ca4
  %v2_14ca8 = and i32 %v1_14ca8, 32768
  %v3_14ca8 = icmp eq i32 %v2_14ca8, 0
  %v4_14ca8 = udiv i32 %v1_14ca8, 65536
  br i1 %v3_14ca8, label %.thread19, label %bb106

.thread19:                                        ; preds = %bb105, %dec_label_pc_14ca4
  %v0_14cb470 = phi i32 [ %v1_14ca8, %dec_label_pc_14ca4 ], [ %v4_14ca8, %bb105 ]
  br label %bb106

bb106:                                            ; preds = %bb105, %.thread19
  %v1_14cb8 = phi i32 [ %v0_14cb470, %.thread19 ], [ %v4_14ca8, %bb105 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb105 ]
  %v2_14cb4 = icmp ugt i32 %v1_14cb8, 255
  br i1 %v2_14cb4, label %bb107, label %.thread20

bb107:                                            ; preds = %bb106
  %v2_14cb8 = and i32 %v1_14cb8, 128
  %v3_14cb8 = icmp eq i32 %v2_14cb8, 0
  %v4_14cb8 = udiv i32 %v1_14cb8, 256
  br i1 %v3_14cb8, label %.thread20, label %bb108

bb108:                                            ; preds = %bb107
  %v2_14cbc = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb107, %bb106, %bb108
  %v1_14cc8 = phi i32 [ %storemerge, %bb106 ], [ %storemerge, %bb107 ], [ %v2_14cbc, %bb108 ]
  %v1_14cc4 = phi i32 [ %v1_14cb8, %bb106 ], [ %v4_14cb8, %bb107 ], [ %v4_14cb8, %bb108 ]
  %v2_14cc0 = icmp ugt i32 %v1_14cc4, 15
  br i1 %v2_14cc0, label %bb109, label %.thread21

bb109:                                            ; preds = %.thread20
  %v2_14cc4 = and i32 %v1_14cc4, 8
  %v3_14cc4 = icmp eq i32 %v2_14cc4, 0
  %v4_14cc4 = udiv i32 %v1_14cc4, 16
  br i1 %v3_14cc4, label %.thread21, label %bb110

bb110:                                            ; preds = %bb109
  %v2_14cc8 = add nsw i32 %v1_14cc8, 4
  br label %.thread21

.thread21:                                        ; preds = %bb109, %.thread20, %bb110
  %v4_14cd0 = phi i32 [ %v1_14cc8, %.thread20 ], [ %v1_14cc8, %bb109 ], [ %v2_14cc8, %bb110 ]
  %v5_14cd4 = phi i32 [ %v1_14cc4, %.thread20 ], [ %v4_14cc4, %bb109 ], [ %v4_14cc4, %bb110 ]
  %v2_14ccc = icmp ugt i32 %v5_14cd4, 3
  %v7_14ccc = icmp eq i32 %v5_14cd4, 4
  %v2_14cd0 = xor i1 %v7_14ccc, true
  %v3_14cd0 = and i1 %v2_14ccc, %v2_14cd0
  br i1 %v3_14cd0, label %bb111, label %bb112

bb111:                                            ; preds = %.thread21
  %v5_14cd0 = add nsw i32 %v4_14cd0, 3
  br label %bb112

bb112:                                            ; preds = %.thread21, %bb111
  %v4_14cd4 = phi i32 [ %v4_14cd0, %.thread21 ], [ %v5_14cd0, %bb111 ]
  %v2_14cd4 = xor i1 %v2_14ccc, true
  %v3_14cd4 = or i1 %v7_14ccc, %v2_14cd4
  br i1 %v3_14cd4, label %bb113, label %bb114

bb113:                                            ; preds = %bb112
  %v8_14cd4 = udiv i32 %v5_14cd4, 2
  %v9_14cd4 = add i32 %v4_14cd4, %v8_14cd4
  br label %bb114

bb114:                                            ; preds = %bb112, %bb113
  %v1_14cdc = phi i32 [ %v4_14cd4, %bb112 ], [ %v9_14cd4, %bb113 ]
  %v1_14cd8 = icmp slt i32 %v2_14bd4, 0
  %v6_14cdc = lshr i32 %v0_14cdc, %v1_14cdc
  %v2_14ce0 = sub i32 0, %v6_14cdc
  %v2_14ce0.v6_14cdc = select i1 %v1_14cd8, i32 %v2_14ce0, i32 %v6_14cdc
  ret i32 %v2_14ce0.v6_14cdc

dec_label_pc_14ce8:                               ; preds = %entry
  %v0_14cec = call i32 @__div0()
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_14cd4, { 1, 0 }
  uselistorder i1 %v7_14ccc, { 1, 0 }
  uselistorder i32 %v4_14cc4, { 1, 0 }
  uselistorder i32 %v1_14cc4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14cb8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_14cb8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14ca8, { 1, 0 }
  uselistorder i32 %v0_14c6c, { 1, 0 }
  uselistorder i32 %v4_14c60, { 1, 0 }
  uselistorder i32 %v1_14c68, { 1, 2, 0 }
  uselistorder i32 %v4_14c54, { 1, 0 }
  uselistorder i32 %v1_14c5c, { 1, 2, 0 }
  uselistorder i32 %v4_14c48, { 1, 0 }
  uselistorder i32 %v1_14c50, { 1, 2, 0 }
  uselistorder i32 %v1_14c74, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_14c44, { 1, 0 }
  uselistorder i32 %v1_14c70, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_14c30, { 1, 0 }
  uselistorder i32 %v3_14c2c, { 1, 0 }
  uselistorder i32 %v1_14c2c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_14c28, { 1, 0 }
  uselistorder i32 %v1_14c30, { 1, 2, 0, 3 }
  uselistorder i32 %v4_14c1c, { 1, 0 }
  uselistorder i32 %v4_14c18, { 2, 1, 0 }
  uselistorder i32 %v1_14c1c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_14c24.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_14bf0, { 1, 0 }
  uselistorder i32 %v1_14ca8, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_14bd4, { 1, 0, 2 }
  uselistorder i32 %v0_14bd0, { 2, 1, 0, 4, 3 }
  uselistorder i32 ()* @__div0, { 1, 0 }
  uselistorder i32 %arg1, { 4, 5, 6, 3, 2, 1, 0 }
  uselistorder label %bb114, { 1, 0 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_14c7c, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_14c38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c24thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @__aeabi_idivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_14d00 = sdiv i32 %arg1, %arg2
  ret i32 %v2_14d00
}

define i32 @__aeabi_drsub(double %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = sext i32 %arg3 to i64
  %v8_14d18 = bitcast i64 %tmp to double
  %v9_14d18 = fadd double %v8_14d18, %arg1
  %v10_14d18 = fptrunc double %v9_14d18 to float
  %v11_14d18 = bitcast float %v10_14d18 to i32
  ret i32 %v11_14d18
}

define i32 @__aeabi_dsub(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_14d1c = load i32, i32* @r0, align 4
  ret i32 %v2_14d1c
}

define i32 @__adddf3(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14d20 = load i32, i32* @r4, align 4
  store i32 %v3_14d20, i32* %stack_var_-12, align 4
  %v6_14d20 = load i32, i32* @r5, align 4
  %v9_14d20 = load i32, i32* @lr, align 4
  %v0_14d24 = load i32, i32* %r1.global-to-local, align 4
  %v2_14d24 = mul i32 %v0_14d24, 2
  store i32 %v2_14d24, i32* %r4.global-to-local, align 4
  %v0_14d28 = load i32, i32* %r3.global-to-local, align 4
  %v2_14d28 = mul i32 %v0_14d28, 2
  store i32 %v2_14d28, i32* %r5.global-to-local, align 4
  %v4_14d2c = icmp eq i32 %v2_14d28, %v2_14d24
  %v1_14d30 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v4_14d2c, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v2_14d30 = load i32, i32* %r2.global-to-local, align 4
  %v5_14d30 = icmp eq i32 %v2_14d30, %v1_14d30
  br i1 %v5_14d30, label %.thread3, label %.thread

.thread:                                          ; preds = %entry, %bb
  %v3_14d34 = or i32 %v1_14d30, %v2_14d24
  %v5_14d34 = icmp eq i32 %v3_14d34, 0
  br i1 %v5_14d34, label %.thread3, label %bb10

bb10:                                             ; preds = %.thread
  %v2_14d38 = load i32, i32* %r2.global-to-local, align 4
  %v3_14d38 = or i32 %v2_14d38, %v2_14d28
  %v5_14d38 = icmp eq i32 %v3_14d38, 0
  br i1 %v5_14d38, label %.thread3, label %bb11

bb11:                                             ; preds = %bb10
  %v2_14d24.off = add i32 %v2_14d24, 4194303
  %tmp = icmp ult i32 %v2_14d24.off, 2097152
  br i1 %tmp, label %.thread3, label %bb12

bb12:                                             ; preds = %bb11
  %v2_14d28.off = add i32 %v2_14d28, 4194303
  %tmp17 = icmp ult i32 %v2_14d28.off, 2097152
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb, %bb10, %bb11, %bb12
  %v0_14d44 = phi i1 [ true, %bb10 ], [ true, %bb11 ], [ %tmp17, %bb12 ], [ true, %bb ], [ true, %.thread ]
  call void @__pseudo_cond_branch(i1 %v0_14d44, i32 ptrtoint (i32* @global_var_14f7c.443 to i32))
  %v0_14d48 = load i32, i32* %r4.global-to-local, align 4
  %v3_14d48 = udiv i32 %v0_14d48, 2097152
  store i32 %v3_14d48, i32* %r4.global-to-local, align 4
  %v1_14d4c = load i32, i32* %r5.global-to-local, align 4
  %v4_14d4c = udiv i32 %v1_14d4c, 2097152
  %v5_14d4c = sub nsw i32 %v4_14d4c, %v3_14d48
  %v5_14d50 = icmp ult i32 %v4_14d4c, %v3_14d48
  br i1 %v5_14d50, label %bb13, label %bb14

bb13:                                             ; preds = %.thread3
  %v7_14d50 = sub nsw i32 0, %v5_14d4c
  br label %bb14

bb14:                                             ; preds = %.thread3, %bb13
  %storemerge = phi i32 [ %v7_14d50, %bb13 ], [ %v5_14d4c, %.thread3 ]
  %v0_14d74 = phi i32 [ %v7_14d50, %bb13 ], [ %v5_14d4c, %.thread3 ]
  store i32 %storemerge, i32* %r5.global-to-local, align 4
  %v7_14d54 = icmp ugt i32 %v4_14d4c, %v3_14d48
  br i1 %v7_14d54, label %dec_label_pc_14d58, label %dec_label_pc_14d74

dec_label_pc_14d58:                               ; preds = %bb14
  %v2_14d58 = add nsw i32 %v0_14d74, %v3_14d48
  store i32 %v2_14d58, i32* %r4.global-to-local, align 4
  %v0_14d5c = load i32, i32* %r0.global-to-local, align 4
  %v1_14d5c = load i32, i32* %r2.global-to-local, align 4
  %v0_14d60 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d60 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_14d5c, i32* %r0.global-to-local, align 4
  store i32 %v1_14d60, i32* %r1.global-to-local, align 4
  store i32 %v0_14d5c, i32* %r2.global-to-local, align 4
  store i32 %v0_14d60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14d74

dec_label_pc_14d74:                               ; preds = %bb14, %dec_label_pc_14d58
  %tmp18 = icmp ugt i32 %v0_14d74, 54
  br i1 %tmp18, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_14d74
  %v6_14d78 = load i32, i32* %stack_var_-12, align 4
  store i32 %v6_14d78, i32* %r4.global-to-local, align 4
  store i32 %v6_14d20, i32* %r5.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14d74, %bb15
  call void @__pseudo_cond_branch(i1 %tmp18, i32 %v9_14d20)
  %v0_14d80 = load i32, i32* %r1.global-to-local, align 4
  %v3_14d80 = icmp sgt i32 %v0_14d80, -1
  %v4_14d8c = urem i32 %v0_14d80, 1048576
  %v5_14d8c = or i32 %v4_14d8c, 1048576
  store i32 %v5_14d8c, i32* %r1.global-to-local, align 4
  br i1 %v3_14d80, label %dec_label_pc_14d9c, label %dec_label_pc_14d94

dec_label_pc_14d94:                               ; preds = %bb16
  %v0_14d94 = load i32, i32* %r0.global-to-local, align 4
  %v1_14d94 = sub i32 0, %v0_14d94
  store i32 %v1_14d94, i32* %r0.global-to-local, align 4
  %v2_14d94 = icmp eq i32 %v0_14d94, 0
  %v2_14d98 = icmp eq i1 %v2_14d94, false
  %v5_14d98 = sext i1 %v2_14d98 to i32
  %v6_14d98 = sub nsw i32 %v5_14d98, %v5_14d8c
  store i32 %v6_14d98, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14d9c

dec_label_pc_14d9c:                               ; preds = %bb16, %dec_label_pc_14d94
  %v0_14d9c = load i32, i32* %r3.global-to-local, align 4
  %v3_14d9c = icmp sgt i32 %v0_14d9c, -1
  %v4_14da4 = urem i32 %v0_14d9c, 1048576
  %v5_14da4 = or i32 %v4_14da4, 1048576
  store i32 %v5_14da4, i32* %r3.global-to-local, align 4
  br i1 %v3_14d9c, label %dec_label_pc_14db4, label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14d9c
  %v0_14dac = load i32, i32* %r2.global-to-local, align 4
  %v1_14dac = sub i32 0, %v0_14dac
  store i32 %v1_14dac, i32* %r2.global-to-local, align 4
  %v2_14dac = icmp eq i32 %v0_14dac, 0
  %v2_14db0 = icmp eq i1 %v2_14dac, false
  %v5_14db0 = sext i1 %v2_14db0 to i32
  %v6_14db0 = sub nsw i32 %v5_14db0, %v5_14da4
  store i32 %v6_14db0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14db4

dec_label_pc_14db4:                               ; preds = %dec_label_pc_14d9c, %dec_label_pc_14dac
  %v0_14db4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14db4 = load i32, i32* %r5.global-to-local, align 4
  %v4_14db4 = icmp eq i32 %v1_14db4, %v0_14db4
  call void @__pseudo_cond_branch(i1 %v4_14db4, i32 ptrtoint (i32* @global_var_14f64.444 to i32))
  %v1_14db8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14db8

; uselistorder directives
  uselistorder i32 %v0_14d9c, { 1, 0 }
  uselistorder i32 %v0_14d80, { 1, 0 }
  uselistorder i1 %tmp18, { 1, 0 }
  uselistorder i32 %v4_14d4c, { 2, 1, 0 }
  uselistorder i32 %v3_14d48, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14d30, { 1, 0 }
  uselistorder i32 %v2_14d28, { 1, 3, 0, 2 }
  uselistorder i32 %v2_14d24, { 1, 3, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 5, 6, 0, 1, 2 }
  uselistorder label %dec_label_pc_14db4, { 1, 0 }
  uselistorder label %dec_label_pc_14d9c, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_14d74, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread3, { 4, 3, 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14dbc() local_unnamed_addr {
dec_label_pc_14dbc:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v0_14dbc = load i32, i32* @r4, align 4
  %v1_14dbc = add i32 %v0_14dbc, -1
  store i32 %v1_14dbc, i32* @r4, align 4
  %v0_14dc0 = load i32, i32* @r5, align 4
  %v1_14dc0 = sub i32 32, %v0_14dc0
  store i32 %v1_14dc0, i32* @lr, align 4
  %v5_14dc4 = icmp sgt i32 %v0_14dc0, 32
  br i1 %v5_14dc4, label %dec_label_pc_14de0, label %dec_label_pc_14dc8

dec_label_pc_14dc8:                               ; preds = %dec_label_pc_14dbc
  %v0_14dc8 = load i32, i32* @r2, align 4
  %v6_14dc8 = shl i32 %v0_14dc8, %v1_14dc0
  store i32 %v6_14dc8, i32* %ip.global-to-local, align 4
  %v0_14dcc = load i32, i32* @r0, align 4
  %v3_14dcc = add i32 %v0_14dc0, -1
  %v4_14dcc = shl i32 1, %v3_14dcc
  %v7_14dcc = lshr i32 %v0_14dc8, %v0_14dc0
  %v8_14dcc = add i32 %v0_14dcc, %v7_14dcc
  %v9_14dcc = icmp ult i32 %v8_14dcc, %v0_14dcc
  %v0_14dd0 = load i32, i32* @r1, align 4
  %v2_14dd0 = zext i1 %v9_14dcc to i32
  %v3_14dd0 = add i32 %v2_14dd0, %v0_14dd0
  %v1_14dd4 = load i32, i32* @r3, align 4
  %v7_14dd4 = shl i32 %v1_14dd4, %v1_14dc0
  %v8_14dd4 = add i32 %v7_14dd4, %v8_14dcc
  store i32 %v8_14dd4, i32* %r0.global-to-local, align 4
  %v5_14dd8 = and i32 %v1_14dd4, %v4_14dcc
  %v6_14dd8 = icmp ne i32 %v5_14dd8, 0
  %v7_14dd8 = ashr i32 %v1_14dd4, %v0_14dc0
  %v9_14dd8 = add i32 %v3_14dd0, %v7_14dd8
  %v10_14dd8 = zext i1 %v6_14dd8 to i32
  %v11_14dd8 = add i32 %v10_14dd8, %v9_14dd8
  br label %dec_label_pc_14dfc

dec_label_pc_14de0:                               ; preds = %dec_label_pc_14dbc
  %v1_14de0 = add i32 %v0_14dc0, -32
  %v1_14de4 = add i32 %v1_14dc0, 32
  store i32 %v1_14de4, i32* @lr, align 4
  %v0_14dec = load i32, i32* @r3, align 4
  %v2_14dec = add i32 %v1_14dc0, 31
  %v3_14dec = lshr i32 -2147483648, %v2_14dec
  %v4_14dec = and i32 %v0_14dec, %v3_14dec
  %v5_14dec = icmp ne i32 %v4_14dec, 0
  %v6_14dec = shl i32 %v0_14dec, %v1_14de4
  %v2_14df0 = or i32 %v6_14dec, 2
  %v2_14df0.v6_14dec = select i1 %v5_14dec, i32 %v2_14df0, i32 %v6_14dec
  store i32 %v2_14df0.v6_14dec, i32* %ip.global-to-local, align 4
  %v0_14df4 = load i32, i32* @r0, align 4
  %v7_14df4 = ashr i32 %v0_14dec, %v1_14de0
  %v8_14df4 = add i32 %v0_14df4, %v7_14df4
  store i32 %v8_14df4, i32* %r0.global-to-local, align 4
  %v0_14df8 = load i32, i32* @r1, align 4
  %v2_14df8 = and i32 %v0_14dec, 1073741824
  %v3_14df8 = icmp ne i32 %v2_14df8, 0
  %v4_14df8 = ashr i32 %v0_14dec, 31
  %v6_14df8 = add i32 %v0_14df8, %v4_14df8
  %v7_14df8 = zext i1 %v3_14df8 to i32
  %v8_14df8 = add i32 %v6_14df8, %v7_14df8
  br label %dec_label_pc_14dfc

dec_label_pc_14dfc:                               ; preds = %dec_label_pc_14dc8, %dec_label_pc_14de0
  %storemerge = phi i32 [ %v11_14dd8, %dec_label_pc_14dc8 ], [ %v8_14df8, %dec_label_pc_14de0 ]
  %v0_14dfc = phi i32 [ %v11_14dd8, %dec_label_pc_14dc8 ], [ %v8_14df8, %dec_label_pc_14de0 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_14dfc = and i32 %v0_14dfc, -2147483648
  store i32 %v1_14dfc, i32* @r5, align 4
  %v1_14e00 = icmp sgt i32 %v0_14dfc, -1
  call void @__pseudo_cond_branch(i1 %v1_14e00, i32 ptrtoint (i32* @global_var_14e10.445 to i32))
  %v0_14e04 = load i32, i32* %ip.global-to-local, align 4
  %v1_14e04 = sub i32 0, %v0_14e04
  store i32 %v1_14e04, i32* %ip.global-to-local, align 4
  %v2_14e04 = icmp eq i32 %v0_14e04, 0
  %v0_14e08 = load i32, i32* %r0.global-to-local, align 4
  %v2_14e08 = icmp eq i1 %v2_14e04, false
  %v5_14e08 = sext i1 %v2_14e08 to i32
  %v6_14e08 = sub i32 %v5_14e08, %v0_14e08
  store i32 %v6_14e08, i32* %r0.global-to-local, align 4
  %v7_14e08 = zext i1 %v2_14e08 to i32
  %v8_14e08 = icmp ne i32 %v6_14e08, %v7_14e08
  %v9_14e08 = icmp ne i32 %v0_14e08, -1
  %v10_14e08 = or i1 %v9_14e08, %v8_14e08
  %v11_14e08 = icmp ne i32 %v0_14e08, 0
  %v12_14e08 = select i1 %v2_14e08, i1 %v10_14e08, i1 %v11_14e08
  %v0_14e0c = load i32, i32* %r1.global-to-local, align 4
  %v5_14e0c = sext i1 %v12_14e08 to i32
  %v6_14e0c = sub i32 %v5_14e0c, %v0_14e0c
  store i32 %v6_14e0c, i32* @r1, align 4
  ret i32 %v6_14e08

; uselistorder directives
  uselistorder i1 %v2_14e08, { 1, 2, 0 }
  uselistorder i32 %v0_14e08, { 1, 2, 0 }
  uselistorder i32 %v8_14df8, { 1, 0 }
  uselistorder i32 %v0_14dec, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v11_14dd8, { 1, 0 }
  uselistorder i32 %v1_14dd4, { 1, 0, 2 }
  uselistorder i32 %v0_14dcc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_14dfc, { 1, 0 }
}

define i32 @function_14e10(i64 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14e10:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = trunc i64 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_14e10 = load i32, i32* %r1.global-to-local, align 4
  %v3_14e14 = icmp ult i32 %v0_14e10, 1048574
  br i1 %v3_14e14, label %dec_label_pc_14e58, label %dec_label_pc_14e18

dec_label_pc_14e18:                               ; preds = %dec_label_pc_14e10
  %v3_14e1c = icmp ult i32 %v0_14e10, 2097150
  br i1 %v3_14e1c, label %dec_label_pc_14e3c, label %dec_label_pc_14e20

dec_label_pc_14e20:                               ; preds = %dec_label_pc_14e18
  %v1_14e20 = urem i32 %v0_14e10, 2
  %v2_14e20 = icmp ne i32 %v1_14e20, 0
  %v3_14e20 = udiv i32 %v0_14e10, 2
  store i32 %v3_14e20, i32* %r1.global-to-local, align 4
  %v0_14e24 = load i32, i32* %r0.global-to-local, align 4
  %v3_14e24 = zext i1 %v2_14e20 to i32
  %v6_14e24 = zext i32 %v0_14e24 to i64
  %v7_14e24 = sub i32 33, %v0_14e24
  %v8_14e24 = zext i32 %v7_14e24 to i64
  %v9_14e24 = shl i64 %v6_14e24, %v8_14e24
  %v10_14e24 = sub i32 32, %v0_14e24
  %v11_14e24 = shl i32 %v3_14e24, %v10_14e24
  %v12_14e24 = zext i32 %v11_14e24 to i64
  %v14_14e24 = or i64 %v12_14e24, %v9_14e24
  %v15_14e24 = trunc i64 %v14_14e24 to i32
  %v16_14e24 = add i32 %v0_14e24, -1
  %v17_14e24 = shl i32 1, %v16_14e24
  %v18_14e24 = and i32 %v17_14e24, %v0_14e24
  %v19_14e24 = icmp ne i32 %v18_14e24, 0
  store i32 %v15_14e24, i32* %r0.global-to-local, align 4
  %v0_14e28 = load i32, i32* @ip, align 4
  %v3_14e28 = zext i1 %v19_14e24 to i32
  %v6_14e28 = zext i32 %v0_14e28 to i64
  %v7_14e28 = sub i32 33, %v0_14e28
  %v8_14e28 = zext i32 %v7_14e28 to i64
  %v9_14e28 = shl i64 %v6_14e28, %v8_14e28
  %v10_14e28 = sub i32 32, %v0_14e28
  %v11_14e28 = shl i32 %v3_14e28, %v10_14e28
  %v12_14e28 = zext i32 %v11_14e28 to i64
  %v14_14e28 = or i64 %v12_14e28, %v9_14e28
  %v15_14e28 = trunc i64 %v14_14e28 to i32
  store i32 %v15_14e28, i32* @ip, align 4
  %v0_14e2c = load i32, i32* @r4, align 4
  %v1_14e2c = add i32 %v0_14e2c, 1
  store i32 %v1_14e2c, i32* @r4, align 4
  %v3_14e30 = mul i32 %v1_14e2c, 2097152
  %v2_14e34 = icmp ugt i32 %v3_14e30, -4194305
  call void @__pseudo_cond_branch(i1 %v2_14e34, i32 ptrtoint (i32* @global_var_14fec.446 to i32))
  br label %dec_label_pc_14e3c

dec_label_pc_14e3c:                               ; preds = %dec_label_pc_14e58, %dec_label_pc_14e18, %dec_label_pc_14e20
  %v0_14e3c = load i32, i32* @ip, align 4
  %v2_14e3c = icmp slt i32 %v0_14e3c, 0
  %v6_14e3c = icmp eq i32 %v0_14e3c, -2147483648
  %v1_14e40 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v6_14e3c, label %bb, label %dec_label_pc_14e3c._crit_edge

bb:                                               ; preds = %dec_label_pc_14e3c
  %v2_14e40 = urem i32 %v1_14e40, 2
  %v3_14e40 = icmp ne i32 %v2_14e40, 0
  br label %dec_label_pc_14e3c._crit_edge

dec_label_pc_14e3c._crit_edge:                    ; preds = %dec_label_pc_14e3c, %bb
  %v1_14e44 = phi i1 [ %v3_14e40, %bb ], [ %v2_14e3c, %dec_label_pc_14e3c ]
  %v2_14e44 = zext i1 %v1_14e44 to i32
  %v3_14e44 = add i32 %v2_14e44, %v1_14e40
  store i32 %v3_14e44, i32* %r0.global-to-local, align 4
  %v0_14e48 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e48 = load i32, i32* @r4, align 4
  %v2_14e48 = and i32 %v1_14e48, 4096
  %v3_14e48 = icmp ne i32 %v2_14e48, 0
  %v4_14e48 = mul i32 %v1_14e48, 1048576
  %v6_14e48 = add i32 %v4_14e48, %v0_14e48
  %v7_14e48 = zext i1 %v3_14e48 to i32
  %v8_14e48 = add i32 %v7_14e48, %v6_14e48
  %v1_14e4c = load i32, i32* @r5, align 4
  %v2_14e4c = or i32 %v1_14e4c, %v8_14e48
  store i32 %v2_14e4c, i32* %r1.global-to-local, align 4
  ret i32 %v3_14e44

dec_label_pc_14e58:                               ; preds = %dec_label_pc_14e10
  %v0_14e58 = load i32, i32* @ip, align 4
  %v1_14e58 = icmp slt i32 %v0_14e58, 0
  %v2_14e58 = mul i32 %v0_14e58, 2
  store i32 %v2_14e58, i32* @ip, align 4
  %v0_14e5c = load i32, i32* %r0.global-to-local, align 4
  %v3_14e5c = mul i32 %v0_14e5c, 2
  %v4_14e5c = zext i1 %v1_14e58 to i32
  %v5_14e5c = or i32 %v3_14e5c, %v4_14e5c
  store i32 %v5_14e5c, i32* %r0.global-to-local, align 4
  %v9_14e5c = icmp ule i32 %v5_14e5c, %v0_14e5c
  %v10_14e5c = icmp ult i32 %v3_14e5c, %v0_14e5c
  %v11_14e5c = select i1 %v1_14e58, i1 %v9_14e5c, i1 %v10_14e5c
  %v3_14e60 = mul i32 %v0_14e10, 2
  %v4_14e60 = zext i1 %v11_14e5c to i32
  %v5_14e60 = or i32 %v4_14e60, %v3_14e60
  store i32 %v5_14e60, i32* %r1.global-to-local, align 4
  %v1_14e64 = and i32 %v3_14e60, 1048576
  %v2_14e64 = icmp eq i32 %v1_14e64, 0
  %v0_14e68 = load i32, i32* @r4, align 4
  %v1_14e68 = add i32 %v0_14e68, -1
  store i32 %v1_14e68, i32* @r4, align 4
  br i1 %v2_14e64, label %bb7, label %dec_label_pc_14e3c

bb7:                                              ; preds = %dec_label_pc_14e58
  ret i32 %v5_14e5c

; uselistorder directives
  uselistorder i32 %v0_14e5c, { 1, 2, 0 }
  uselistorder i1 %v1_14e58, { 1, 0 }
  uselistorder i32 %v1_14e40, { 1, 0 }
  uselistorder i32 %v0_14e3c, { 1, 0 }
  uselistorder i32 %v0_14e28, { 1, 0, 2 }
  uselistorder i32 %v0_14e24, { 0, 3, 2, 1, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_14e3c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_14e3c, { 0, 2, 1 }
}

define i32 @function_14e70() local_unnamed_addr {
dec_label_pc_14e70:
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i32, align 4
  %v0_14e70 = load i32, i32* @r1, align 4
  %v2_14e70 = icmp eq i32 %v0_14e70, 0
  br i1 %v2_14e70, label %bb38, label %bb

bb:                                               ; preds = %dec_label_pc_14e70
  br label %.thread

bb38:                                             ; preds = %dec_label_pc_14e70
  %v1_14e7c10 = load i32, i32* @r0, align 4
  store i32 %v1_14e7c10, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  br label %.thread

.thread:                                          ; preds = %bb, %bb38
  %v0_14ed8 = phi i32 [ %v0_14e70, %bb ], [ %v1_14e7c10, %bb38 ]
  %v1_14e90 = phi i32 [ 20, %bb ], [ 52, %bb38 ]
  %v2_14e88 = icmp ugt i32 %v0_14ed8, 65535
  br i1 %v2_14e88, label %bb39, label %.thread3

bb39:                                             ; preds = %.thread
  %v2_14e8c = and i32 %v0_14ed8, 32768
  %v3_14e8c = icmp eq i32 %v2_14e8c, 0
  %v4_14e8c = udiv i32 %v0_14ed8, 65536
  br i1 %v3_14e8c, label %.thread3, label %bb40

bb40:                                             ; preds = %bb39
  %v2_14e90 = add nsw i32 %v1_14e90, -16
  br label %.thread3

.thread3:                                         ; preds = %bb39, %.thread, %bb40
  %v1_14e9c = phi i32 [ %v1_14e90, %.thread ], [ %v1_14e90, %bb39 ], [ %v2_14e90, %bb40 ]
  %v1_14e98 = phi i32 [ %v0_14ed8, %.thread ], [ %v4_14e8c, %bb39 ], [ %v4_14e8c, %bb40 ]
  %v2_14e94 = icmp ugt i32 %v1_14e98, 255
  br i1 %v2_14e94, label %bb41, label %.thread4

bb41:                                             ; preds = %.thread3
  %v2_14e98 = and i32 %v1_14e98, 128
  %v3_14e98 = icmp eq i32 %v2_14e98, 0
  %v4_14e98 = udiv i32 %v1_14e98, 256
  br i1 %v3_14e98, label %.thread4, label %bb42

bb42:                                             ; preds = %bb41
  %v2_14e9c = add nsw i32 %v1_14e9c, -8
  br label %.thread4

.thread4:                                         ; preds = %bb41, %.thread3, %bb42
  %v1_14ea8 = phi i32 [ %v1_14e9c, %.thread3 ], [ %v1_14e9c, %bb41 ], [ %v2_14e9c, %bb42 ]
  %v1_14ea4 = phi i32 [ %v1_14e98, %.thread3 ], [ %v4_14e98, %bb41 ], [ %v4_14e98, %bb42 ]
  %v2_14ea0 = icmp ugt i32 %v1_14ea4, 15
  br i1 %v2_14ea0, label %bb43, label %.thread5

bb43:                                             ; preds = %.thread4
  %v2_14ea4 = and i32 %v1_14ea4, 8
  %v3_14ea4 = icmp eq i32 %v2_14ea4, 0
  %v4_14ea4 = udiv i32 %v1_14ea4, 16
  br i1 %v3_14ea4, label %.thread5, label %bb44

bb44:                                             ; preds = %bb43
  %v2_14ea8 = add nsw i32 %v1_14ea8, -4
  br label %.thread5

.thread5:                                         ; preds = %bb43, %.thread4, %bb44
  %v1_14eb0 = phi i32 [ %v1_14ea8, %.thread4 ], [ %v1_14ea8, %bb43 ], [ %v2_14ea8, %bb44 ]
  %v1_14eb8 = phi i32 [ %v1_14ea4, %.thread4 ], [ %v4_14ea4, %bb43 ], [ %v4_14ea4, %bb44 ]
  %v2_14eac = icmp ugt i32 %v1_14eb8, 3
  br i1 %v2_14eac, label %bb45, label %.thread6

bb45:                                             ; preds = %.thread5
  %v2_14eb0 = add i32 %v1_14eb0, -2
  br label %bb46

.thread6:                                         ; preds = %.thread5
  %v5_14eb4 = udiv i32 %v1_14eb8, 2
  %v6_14eb4 = sub i32 %v1_14eb0, %v5_14eb4
  br label %bb46

bb46:                                             ; preds = %bb45, %.thread6
  %v0_14eb8 = phi i32 [ %v6_14eb4, %.thread6 ], [ %v2_14eb0, %bb45 ]
  %v4_14eb8 = udiv i32 %v1_14eb8, 8
  %v5_14eb8 = sub i32 %v0_14eb8, %v4_14eb8
  %v2_14ebc = add i32 %v5_14eb8, -32
  %v4_14ebc = sub i32 31, %v5_14eb8
  %v5_14ebc = and i32 %v4_14ebc, %v5_14eb8
  %v8_14ebc = icmp eq i32 %v5_14eb8, 32
  %v6_14ec0 = icmp slt i32 %v5_14eb8, 32
  br i1 %v6_14ec0, label %dec_label_pc_14ec4, label %dec_label_pc_14ee4

dec_label_pc_14ec4:                               ; preds = %bb46
  %v2_14ec4 = add i32 %v5_14eb8, -20
  %v7_14ec8 = icmp sgt i32 %v2_14ebc, -12
  br i1 %v7_14ec8, label %dec_label_pc_14ecc, label %dec_label_pc_14ee0

dec_label_pc_14ecc:                               ; preds = %dec_label_pc_14ec4
  %v1_14ed0 = sub i32 32, %v5_14eb8
  %v6_14ed4 = shl i32 %v0_14ed8, %v5_14eb8
  store i32 %v6_14ed4, i32* @r0, align 4
  %v6_14ed8 = lshr i32 %v0_14ed8, %v1_14ed0
  store i32 %v6_14ed8, i32* %r1.global-to-local, align 4
  br label %.thread31

dec_label_pc_14ee0:                               ; preds = %dec_label_pc_14ec4
  %v8_14ec4 = icmp eq i32 %v2_14ec4, 0
  %v4_14ec4 = add i32 %v5_14eb8, 2147483616
  %v5_14ec4 = and i32 %v2_14ec4, %v4_14ec4
  br label %dec_label_pc_14ee4

dec_label_pc_14ee4:                               ; preds = %bb46, %dec_label_pc_14ee0
  %v1_14ef0.in = phi i32 [ %v2_14ebc, %bb46 ], [ %v2_14ec4, %dec_label_pc_14ee0 ]
  %v6_14ef0 = phi i32 [ %v2_14ebc, %bb46 ], [ %v5_14eb8, %dec_label_pc_14ee0 ]
  %v2_14ef0.in = phi i32 [ %v5_14ebc, %bb46 ], [ %v5_14ec4, %dec_label_pc_14ee0 ]
  %v0_14ef0 = phi i1 [ %v8_14ebc, %bb46 ], [ %v8_14ec4, %dec_label_pc_14ee0 ]
  %v1_14ef0 = icmp slt i32 %v1_14ef0.in, 0
  %v2_14ef0 = icmp slt i32 %v2_14ef0.in, 0
  %v3_14ee4 = xor i1 %v2_14ef0, %v1_14ef0
  %v4_14ee4 = or i1 %v0_14ef0, %v3_14ee4
  br i1 %v4_14ee4, label %bb47, label %bb48

bb47:                                             ; preds = %dec_label_pc_14ee4
  %v6_14ee4 = sub i32 32, %v6_14ef0
  store i32 %v6_14ee4, i32* @ip, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_14ee4, %bb47
  %v6_14ee8 = shl i32 %v0_14ed8, %v6_14ef0
  store i32 %v6_14ee8, i32* %r1.global-to-local, align 4
  br i1 %v4_14ee4, label %bb49, label %.thread31

bb49:                                             ; preds = %bb48
  %v6_14eec = load i32, i32* @r0, align 4
  %v7_14eec = load i32, i32* @ip, align 4
  %v12_14eec = lshr i32 %v6_14eec, %v7_14eec
  %v13_14eec = or i32 %v12_14eec, %v6_14ee8
  store i32 %v13_14eec, i32* %r1.global-to-local, align 4
  %v11_14ef0 = shl i32 %v6_14eec, %v6_14ef0
  store i32 %v11_14ef0, i32* @r0, align 4
  br label %.thread31

.thread31:                                        ; preds = %bb48, %dec_label_pc_14ecc, %bb49
  %v6_14ef8 = phi i32 [ %v6_14ed8, %dec_label_pc_14ecc ], [ %v13_14eec, %bb49 ], [ %v6_14ee8, %bb48 ]
  %v0_14ef4 = load i32, i32* @r4, align 4
  %v2_14ef4 = sub i32 %v0_14ef4, %v5_14eb8
  store i32 %v2_14ef4, i32* %r4.global-to-local, align 4
  %v4_14ef4 = xor i32 %v0_14ef4, %v5_14eb8
  %v5_14ef4 = xor i32 %v2_14ef4, %v0_14ef4
  %v6_14ef4 = and i32 %v5_14ef4, %v4_14ef4
  %v7_14ef4 = icmp slt i32 %v6_14ef4, 0
  %v8_14ef4 = icmp slt i32 %v2_14ef4, 0
  %v5_14ef8 = icmp slt i32 %v0_14ef4, %v5_14eb8
  br i1 %v5_14ef8, label %.thread8, label %bb50

bb50:                                             ; preds = %.thread31
  %v10_14ef8 = mul i32 %v2_14ef4, 1048576
  %v11_14ef8 = add i32 %v10_14ef8, %v6_14ef8
  %v7_14efc = load i32, i32* @r5, align 4
  %v8_14efc = or i32 %v7_14efc, %v11_14ef8
  store i32 %v8_14efc, i32* %r1.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %.thread31, %bb50
  %v3_14f04 = xor i1 %v8_14ef4, %v7_14ef4
  %v4_14f04 = xor i1 %v3_14f04, true
  call void @__pseudo_cond_branch(i1 %v4_14f04, i32 %tmp33)
  %v0_14f08 = load i32, i32* %r4.global-to-local, align 4
  %v2_14f0c = sub i32 -32, %v0_14f08
  store i32 %v2_14f0c, i32* %r4.global-to-local, align 4
  %v6_14f10 = icmp sgt i32 %v0_14f08, -32
  br i1 %v6_14f10, label %dec_label_pc_14f14, label %dec_label_pc_14f54

dec_label_pc_14f14:                               ; preds = %.thread8
  %v1_14f14 = add i32 %v2_14f0c, 12
  store i32 %v1_14f14, i32* %r4.global-to-local, align 4
  %v8_14f18 = icmp sgt i32 %v1_14f14, 0
  br i1 %v8_14f18, label %dec_label_pc_14f38, label %dec_label_pc_14f1c

dec_label_pc_14f1c:                               ; preds = %dec_label_pc_14f14
  %v1_14f1c = add i32 %v2_14f0c, 32
  %v1_14f20 = sub i32 0, %v2_14f0c
  %v0_14f24 = load i32, i32* @r0, align 4
  %v6_14f24 = lshr i32 %v0_14f24, %v1_14f1c
  %v1_14f28 = load i32, i32* %r1.global-to-local, align 4
  %v7_14f28 = shl i32 %v1_14f28, %v1_14f20
  %v8_14f28 = or i32 %v7_14f28, %v6_14f24
  %v0_14f2c = load i32, i32* @r5, align 4
  %v7_14f2c = lshr i32 %v1_14f28, %v1_14f1c
  %v8_14f2c = or i32 %v0_14f2c, %v7_14f2c
  store i32 %v8_14f2c, i32* %r1.global-to-local, align 4
  %v2_14f30 = load i32, i32* %stack_var_12, align 4
  store i32 %v2_14f30, i32* %r4.global-to-local, align 4
  ret i32 %v8_14f28

dec_label_pc_14f38:                               ; preds = %dec_label_pc_14f14
  %v1_14f38 = sub i32 0, %v2_14f0c
  %v1_14f3c = add i32 %v2_14f0c, 32
  %v0_14f40 = load i32, i32* @r0, align 4
  %v6_14f40 = lshr i32 %v0_14f40, %v1_14f3c
  %v1_14f44 = load i32, i32* %r1.global-to-local, align 4
  %v7_14f44 = shl i32 %v1_14f44, %v1_14f38
  %v8_14f44 = or i32 %v7_14f44, %v6_14f40
  %v0_14f48 = load i32, i32* @r5, align 4
  store i32 %v0_14f48, i32* %r1.global-to-local, align 4
  %v2_14f4c = load i32, i32* %stack_var_12, align 4
  store i32 %v2_14f4c, i32* %r4.global-to-local, align 4
  ret i32 %v8_14f44

dec_label_pc_14f54:                               ; preds = %.thread8
  %v0_14f54 = load i32, i32* %r1.global-to-local, align 4
  %v6_14f54 = lshr i32 %v0_14f54, %v2_14f0c
  %v0_14f58 = load i32, i32* @r5, align 4
  store i32 %v0_14f58, i32* %r1.global-to-local, align 4
  %v2_14f5c = load i32, i32* %stack_var_12, align 4
  store i32 %v2_14f5c, i32* %r4.global-to-local, align 4
  ret i32 %v6_14f54

; uselistorder directives
  uselistorder i32 %v2_14f0c, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v2_14ef4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14ef4, { 2, 0, 1, 3 }
  uselistorder i32 %v6_14ee8, { 1, 0, 2 }
  uselistorder i32 %v2_14ebc, { 1, 0, 2 }
  uselistorder i32 %v5_14eb8, { 6, 0, 5, 7, 3, 8, 2, 4, 9, 10, 1, 12, 11 }
  uselistorder i32 %v4_14ea4, { 1, 0 }
  uselistorder i32 %v1_14ea4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14e98, { 1, 0 }
  uselistorder i32 %v1_14e98, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14e8c, { 1, 0 }
  uselistorder i32 %v0_14ed8, { 3, 1, 2, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 8, 6, 9, 4, 10, 5, 1, 2, 3, 7, 0 }
  uselistorder i32 -12, { 2, 27, 28, 0, 1, 3, 15, 16, 4, 18, 19, 5, 20, 21, 17, 14, 13, 12, 11, 10, 22, 23, 24, 25, 9, 6, 8, 7, 26 }
  uselistorder i32 -20, { 0, 2, 1 }
  uselistorder i32 -2, { 8, 1, 2, 7, 10, 9, 18, 11, 12, 19, 4, 5, 3, 13, 14, 15, 0, 6, 16, 20, 21, 22, 23, 17 }
  uselistorder i32 -4, { 10, 11, 47, 12, 48, 49, 50, 2, 13, 56, 57, 58, 59, 60, 61, 0, 1, 55, 21, 75, 76, 77, 6, 22, 23, 24, 78, 79, 80, 7, 25, 26, 27, 81, 82, 83, 8, 28, 29, 84, 20, 19, 85, 86, 87, 18, 17, 16, 15, 30, 31, 32, 33, 34, 5, 35, 3, 36, 4, 88, 14, 37, 51, 52, 53, 54, 38, 39, 63, 64, 65, 9, 66, 67, 68, 40, 62, 69, 70, 71, 72, 73, 74, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 15, { 5, 6, 7, 0, 3, 12, 1, 13, 8, 9, 10, 2, 14, 11, 4 }
  uselistorder i32 -8, { 4, 33, 34, 5, 0, 35, 6, 7, 8, 36, 15, 16, 17, 18, 19, 20, 14, 13, 3, 12, 11, 10, 9, 21, 22, 23, 24, 25, 2, 37, 26, 27, 38, 28, 39, 32, 29, 30, 31, 1 }
  uselistorder i32 128, { 13, 14, 0, 8, 9, 10, 17, 18, 1, 2, 11, 19, 5, 16, 6, 7, 12, 22, 21, 3, 4, 20, 15 }
  uselistorder i32 255, { 7, 8, 4, 11, 12, 3, 5, 6, 10, 0, 1, 2, 9 }
  uselistorder i32 -16, { 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 7, 6, 5, 1, 17, 18, 19, 20, 21, 22, 4, 0 }
  uselistorder i32 65536, { 1, 2, 3, 4, 6, 5, 7, 8, 0, 9, 10, 12, 11, 17, 13, 18, 14, 19, 15, 20, 16, 21, 22, 23, 27, 24, 28, 25, 29, 26, 30, 40, 31, 41, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32 32768, { 3, 4, 1, 6, 2, 0, 5 }
  uselistorder i32 65535, { 2, 3, 0, 1, 4 }
  uselistorder i32 52, { 1, 12, 3, 18, 13, 14, 4, 5, 7, 6, 8, 20, 16, 15, 21, 9, 19, 17, 22, 23, 2, 24, 0, 25, 26, 10, 11 }
  uselistorder i32 20, { 5, 0, 13, 14, 15, 32, 33, 6, 16, 17, 18, 19, 2, 8, 38, 34, 35, 20, 21, 22, 23, 36, 37, 31, 41, 9, 42, 43, 3, 44, 39, 10, 24, 40, 28, 29, 30, 25, 11, 26, 27, 1, 45, 7, 12, 46, 4 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread31, { 2, 0, 1 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_14ee4, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
  uselistorder label %.thread4, { 2, 0, 1 }
  uselistorder label %.thread3, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14f64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_14f64:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_14f64 = load i32, i32* @r4, align 4
  %v2_14f64 = icmp eq i32 %v0_14f64, 0
  %v1_14f68 = xor i32 %arg3, 1048576
  store i32 %v1_14f68, i32* @r3, align 4
  br i1 %v2_14f64, label %.thread, label %.thread1

.thread:                                          ; preds = %dec_label_pc_14f64
  %v1_14f6c = load i32, i32* @r1, align 4
  %v2_14f6c = xor i32 %v1_14f6c, 1048576
  store i32 %v2_14f6c, i32* @r1, align 4
  store i32 1, i32* @r4, align 4
  br label %bb

.thread1:                                         ; preds = %dec_label_pc_14f64
  %v1_14f74 = load i32, i32* @r5, align 4
  %v2_14f74 = add i32 %v1_14f74, -1
  store i32 %v2_14f74, i32* @r5, align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread1
  %v0_14f78 = call i32 @function_14dbc()
  store i32 %v0_14f78, i32* %r0.global-to-local, align 4
  %v0_14f7c = load i32, i32* @r4, align 4
  %v0_14f7c.off = add i32 %v0_14f7c, 4194303
  %tmp = icmp ult i32 %v0_14f7c.off, 2097152
  %v1_1500c = load i32, i32* @r5, align 4
  %v1_1500c.off = add i32 %v1_1500c, 4194303
  %tmp44 = icmp ult i32 %v1_1500c.off, 2097152
  br i1 %tmp, label %.thread11, label %bb30

bb30:                                             ; preds = %bb
  br i1 %tmp44, label %bb37, label %dec_label_pc_14f88

dec_label_pc_14f88:                               ; preds = %bb30
  %v4_14f88 = icmp eq i32 %v1_1500c, %v0_14f7c
  br i1 %v4_14f88, label %bb31, label %dec_label_pc_14f94

bb31:                                             ; preds = %dec_label_pc_14f88
  %v2_14f8c = load i32, i32* @r2, align 4
  %v5_14f8c = icmp eq i32 %v2_14f8c, %v0_14f78
  br i1 %v5_14f8c, label %dec_label_pc_14fa8, label %dec_label_pc_14f94

dec_label_pc_14f94:                               ; preds = %dec_label_pc_14f88, %bb31
  %v2_14f94 = or i32 %v0_14f7c, %v0_14f78
  %v4_14f94 = icmp eq i32 %v2_14f94, 0
  br i1 %v4_14f94, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_14f94
  %v1_14f9c = load i32, i32* @r2, align 4
  store i32 %v1_14f9c, i32* %r0.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_14f94, %bb32
  %v1_14fa4 = phi i32 [ %v0_14f78, %dec_label_pc_14f94 ], [ %v1_14f9c, %bb32 ]
  ret i32 %v1_14fa4

dec_label_pc_14fa8:                               ; preds = %bb31
  %v0_14fa8 = load i32, i32* @r1, align 4
  %v1_14fa8 = load i32, i32* @r3, align 4
  %v4_14fa8 = icmp eq i32 %v1_14fa8, %v0_14fa8
  br i1 %v4_14fa8, label %dec_label_pc_14fa8..thread8_crit_edge, label %bb33

dec_label_pc_14fa8..thread8_crit_edge:            ; preds = %dec_label_pc_14fa8
  %v0_14fb8.pre = load i32, i32* @lr, align 4
  br label %.thread8

bb33:                                             ; preds = %dec_label_pc_14fa8
  store i32 0, i32* @r1, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg6, i32* @lr, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14fa8..thread8_crit_edge, %bb33
  %v0_14fb8 = phi i32 [ %v0_14fb8.pre, %dec_label_pc_14fa8..thread8_crit_edge ], [ %arg6, %bb33 ]
  %v2_14fb8 = xor i1 %v4_14fa8, true
  call void @__pseudo_cond_branch(i1 %v2_14fb8, i32 %v0_14fb8)
  %v0_14fbc = load i32, i32* @r4, align 4
  %tmp45 = icmp ult i32 %v0_14fbc, 2097152
  br i1 %tmp45, label %dec_label_pc_14fc4, label %dec_label_pc_14fd8

dec_label_pc_14fc4:                               ; preds = %.thread8
  %v0_14fc4 = load i32, i32* %r0.global-to-local, align 4
  %v1_14fc4 = icmp slt i32 %v0_14fc4, 0
  %v2_14fc4 = mul i32 %v0_14fc4, 2
  store i32 %v2_14fc4, i32* %r0.global-to-local, align 4
  %v0_14fc8 = load i32, i32* @r1, align 4
  %v3_14fc8 = mul i32 %v0_14fc8, 2
  %v4_14fc8 = zext i1 %v1_14fc4 to i32
  %v5_14fc8 = or i32 %v3_14fc8, %v4_14fc8
  %v9_14fc8 = icmp ule i32 %v5_14fc8, %v0_14fc8
  %v10_14fc8 = icmp ult i32 %v3_14fc8, %v0_14fc8
  %v11_14fc8 = select i1 %v1_14fc4, i1 %v9_14fc8, i1 %v10_14fc8
  br i1 %v11_14fc8, label %bb34, label %bb35

bb34:                                             ; preds = %dec_label_pc_14fc4
  br label %bb35

bb35:                                             ; preds = %dec_label_pc_14fc4, %bb34
  ret i32 %v2_14fc4

dec_label_pc_14fd8:                               ; preds = %.thread8
  %v2_14fd8 = icmp ugt i32 %v0_14fbc, -4194305
  br i1 %v2_14fd8, label %dec_label_pc_14fd8..thread9_crit_edge, label %bb36

dec_label_pc_14fd8..thread9_crit_edge:            ; preds = %dec_label_pc_14fd8
  %v0_14fe4.pre = load i32, i32* @lr, align 4
  br label %.thread9

bb36:                                             ; preds = %dec_label_pc_14fd8
  %v1_14fdc = load i32, i32* @r1, align 4
  %v2_14fdc = add i32 %v1_14fdc, 1048576
  store i32 %v2_14fdc, i32* @r1, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14fd8..thread9_crit_edge, %bb36
  %v0_14fe4 = phi i32 [ %v0_14fe4.pre, %dec_label_pc_14fd8..thread9_crit_edge ], [ %arg9, %bb36 ]
  %v2_14fe4 = xor i1 %v2_14fd8, true
  call void @__pseudo_cond_branch(i1 %v2_14fe4, i32 %v0_14fe4)
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

.thread11:                                        ; preds = %bb
  %v1_15018.pre = load i32, i32* @r1, align 4
  br i1 %tmp44, label %.thread13, label %.thread14

.thread14:                                        ; preds = %.thread11
  store i32 %v1_15018.pre, i32* @r3, align 4
  br label %bb38

bb37:                                             ; preds = %bb30
  %v1_15004 = load i32, i32* @r3, align 4
  %v1_15008 = load i32, i32* @r2, align 4
  store i32 %v1_15008, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %bb37, %.thread14
  %v1_1501823 = phi i32 [ %v1_15018.pre, %.thread14 ], [ %v1_15004, %bb37 ]
  %v1_15014 = phi i32 [ %v0_14f78, %.thread14 ], [ %v1_15008, %bb37 ]
  store i32 %v1_15014, i32* @r2, align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread11, %bb38
  %v1_15024 = phi i32 [ %v1_1501823, %bb38 ], [ %v1_15018.pre, %.thread11 ]
  %v1_1502c = phi i32 [ %v1_15014, %bb38 ], [ %v0_14f78, %.thread11 ]
  %v4_15018 = mul i32 %v1_15024, 4096
  %v5_15018 = or i32 %v4_15018, %v1_1502c
  %v7_15018 = icmp eq i32 %v5_15018, 0
  br i1 %v7_15018, label %bb39, label %.thread17

bb39:                                             ; preds = %.thread13
  %v1_1501c = load i32, i32* @r2, align 4
  %v2_1501c = load i32, i32* @r3, align 4
  %v5_1501c = mul i32 %v2_1501c, 4096
  %v6_1501c = or i32 %v5_1501c, %v1_1501c
  %v8_1501c = icmp eq i32 %v6_1501c, 0
  br i1 %v8_1501c, label %bb40, label %.thread17

bb40:                                             ; preds = %bb39
  %v5_15020 = icmp eq i32 %v2_1501c, %v1_15024
  br i1 %v5_15020, label %bb41, label %.thread17

.thread17:                                        ; preds = %.thread13, %bb39, %bb40
  br label %bb41

bb41:                                             ; preds = %bb40, %.thread17
  ret i32 %v1_1502c

; uselistorder directives
  uselistorder i32 %v1_15018.pre, { 0, 2, 1 }
  uselistorder i32 %v0_14fc8, { 1, 2, 0 }
  uselistorder i32 %v2_14fc4, { 1, 0 }
  uselistorder i1 %v1_14fc4, { 1, 0 }
  uselistorder i32 %v0_14fbc, { 1, 0 }
  uselistorder i1 %v4_14fa8, { 1, 0 }
  uselistorder i32 %v0_14f7c, { 2, 0, 1 }
  uselistorder i32 %v0_14f78, { 2, 3, 4, 1, 0, 5 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %.thread17, { 2, 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb35, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %dec_label_pc_14f94, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__aeabi_ui2d(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_15030 = icmp eq i32 %arg1, 0
  br i1 %v2_15030, label %bb, label %bb3

bb:                                               ; preds = %entry
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v0_15038 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15030, i32 %v0_15038)
  store i32 1074, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* @r1, align 4
  %v0_15050 = call i32 @function_14e70()
  ret i32 %v0_15050

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__floatsidf(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_15054 = icmp eq i32 %arg1, 0
  br i1 %v2_15054, label %bb, label %bb3

bb:                                               ; preds = %entry
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v0_1505c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15054, i32 %v0_1505c)
  store i32 1074, i32* @r4, align 4
  %v1_1506c = and i32 %arg1, -2147483648
  store i32 %v1_1506c, i32* @r5, align 4
  %v2_1506c = icmp eq i32 %v1_1506c, 0
  br i1 %v2_1506c, label %bb5, label %bb4

bb4:                                              ; preds = %bb3
  %v2_15070 = sub i32 0, %arg1
  store i32 %v2_15070, i32* @r0, align 4
  br label %bb5

bb5:                                              ; preds = %bb3, %bb4
  store i32 0, i32* @r1, align 4
  %v0_15078 = call i32 @function_14e70()
  ret i32 %v0_15078

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1, 3 }
  uselistorder label %bb5, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__extendsfdf2(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %v2_1507c = mul i32 %arg1, 2
  store i32 %v2_1507c, i32* %r2.global-to-local, align 4
  %v4_1507c = icmp eq i32 %v2_1507c, 0
  %v1_15080 = and i32 %v2_1507c, 4
  %v2_15080 = icmp ne i32 %v1_15080, 0
  %v3_15080 = sdiv i32 %v2_1507c, 8
  %v3_15084 = zext i1 %v2_15080 to i32
  %v6_15084 = zext i32 %v3_15080 to i64
  %v7_15084 = sub nsw i32 33, %v3_15080
  %v8_15084 = zext i32 %v7_15084 to i64
  %v9_15084 = shl i64 %v6_15084, %v8_15084
  %v10_15084 = sub nsw i32 32, %v3_15080
  %v11_15084 = shl i32 %v3_15084, %v10_15084
  %v12_15084 = zext i32 %v11_15084 to i64
  %v14_15084 = or i64 %v12_15084, %v9_15084
  %v15_15084 = trunc i64 %v14_15084 to i32
  store i32 %v15_15084, i32* %r1.global-to-local, align 4
  %v3_15088 = mul i32 %arg1, 536870912
  store i32 %v3_15088, i32* @r0, align 4
  br i1 %v4_1507c, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v2_1508c = and i32 %v2_1507c, -16777216
  store i32 %v2_1508c, i32* @r3, align 4
  %v4_1508c = icmp eq i32 %v2_1508c, 0
  br i1 %v4_1508c, label %.thread1, label %bb7

bb7:                                              ; preds = %bb
  %v4_15090 = icmp ugt i32 %v2_1507c, -16777217
  br i1 %v4_15090, label %.thread1, label %bb8

bb8:                                              ; preds = %bb7
  %v2_15094 = xor i32 %v15_15084, 939524096
  store i32 %v2_15094, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb, %bb7, %bb8
  %v1_15098 = phi i1 [ false, %bb ], [ false, %bb7 ], [ true, %bb8 ], [ false, %entry ]
  %v0_15098 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_15098, i32 %v0_15098)
  %v0_1509c = load i32, i32* %r2.global-to-local, align 4
  %v2_1509c = icmp eq i32 %v0_1509c, 0
  br i1 %v2_1509c, label %bb10, label %bb9

bb9:                                              ; preds = %.thread1
  %v1_150a0 = load i32, i32* @r3, align 4
  %v4_150a0 = icmp eq i32 %v1_150a0, -16777216
  br label %bb10

bb10:                                             ; preds = %.thread1, %bb9
  %v1_150a4 = phi i1 [ true, %.thread1 ], [ %v4_150a0, %bb9 ]
  %v0_150a4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_150a4, i32 %v0_150a4)
  store i32 896, i32* @r4, align 4
  %v0_150b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_150b0 = and i32 %v0_150b0, -2147483648
  store i32 %v1_150b0, i32* @r5, align 4
  %tmp = bitcast i32 %v0_150b0 to float
  %tmp11 = call float @fabsf(float %tmp)
  %v1_150b4 = bitcast float %tmp11 to i32
  store i32 %v1_150b4, i32* @r1, align 4
  %v0_150b8 = call i32 @function_14e70()
  ret i32 %v0_150b8

; uselistorder directives
  uselistorder i32 %v3_15080, { 1, 2, 0 }
  uselistorder i32 %v2_1507c, { 0, 4, 5, 3, 2, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder i32 ()* @function_14e70, { 2, 1, 0 }
  uselistorder label %bb10, { 1, 0 }
  uselistorder label %.thread1, { 3, 2, 1, 0 }
}

define i32 @__aeabi_ul2d(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_150bc = or i32 %arg2, %arg1
  %v4_150bc = icmp eq i32 %v2_150bc, 0
  %v0_150c0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v4_150bc, i32 %v0_150c0)
  store i32 0, i32* @r5, align 4
  %v0_150cc = call i32 @function_150ec()
  ret i32 %v0_150cc
}

define i32 @__floatdidf(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_150d0 = or i32 %arg2, %arg1
  %v4_150d0 = icmp eq i32 %v2_150d0, 0
  %v0_150d4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v4_150d0, i32 %v0_150d4)
  %v1_150e0 = icmp sgt i32 %arg2, -1
  call void @__pseudo_cond_branch(i1 %v1_150e0, i32 ptrtoint (i32* @global_var_150ec.447 to i32))
  %v1_150e4 = sub i32 0, %arg1
  ret i32 %v1_150e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_150ec() local_unnamed_addr {
dec_label_pc_150ec:
  %r4.global-to-local = alloca i32, align 4
  store i32 1074, i32* %r4.global-to-local, align 4
  %v0_150f4 = load i32, i32* @r1, align 4
  %tmp = icmp ult i32 %v0_150f4, 4194304
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_14e10.445 to i32))
  %tmp6 = icmp ult i32 %v0_150f4, 33554432
  br i1 %tmp6, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_150ec
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_150ec, %bb
  %v1_1510c = phi i32 [ 3, %dec_label_pc_150ec ], [ 6, %bb ]
  %tmp7 = icmp ult i32 %v0_150f4, 268435456
  br i1 %tmp7, label %bb5, label %bb4

bb4:                                              ; preds = %bb3
  %v2_1510c = add nuw nsw i32 %v1_1510c, 3
  br label %bb5

bb5:                                              ; preds = %bb3, %bb4
  %v0_15110 = phi i32 [ %v1_1510c, %bb3 ], [ %v2_1510c, %bb4 ]
  %not. = icmp slt i32 %v0_150f4, 0
  %v4_15110 = zext i1 %not. to i32
  %v5_15110 = add nsw i32 %v0_15110, %v4_15110
  %v1_15114 = sub nsw i32 32, %v5_15110
  %v0_15118 = load i32, i32* @r0, align 4
  %v6_15118 = shl i32 %v0_15118, %v1_15114
  store i32 %v6_15118, i32* @ip, align 4
  %v6_1511c = lshr i32 %v0_15118, %v5_15110
  %v1_15120 = load i32, i32* @r1, align 4
  %v7_15120 = shl i32 %v1_15120, %v1_15114
  %v8_15120 = or i32 %v7_15120, %v6_1511c
  %v6_15124 = lshr i32 %v1_15120, %v5_15110
  %v0_15128 = load i32, i32* %r4.global-to-local, align 4
  %v2_15128 = add i32 %v0_15128, %v5_15110
  store i32 %v2_15128, i32* @r4, align 4
  %v4_1512c = sext i32 %v8_15120 to i64
  %v5_1512c = call i32 @function_14e10(i64 %v4_1512c, i32 %v6_15124, i32 %v5_15110, i32 %v1_15114)
  ret i32 %v5_1512c

; uselistorder directives
  uselistorder i32 %v5_15110, { 2, 0, 1, 3, 4 }
  uselistorder i32 6, { 4, 8, 9, 13, 14, 2, 0, 5, 10, 1, 3, 11, 12, 15, 16, 6, 7, 17 }
  uselistorder i32 3, { 36, 12, 23, 44, 24, 37, 0, 1, 2, 38, 3, 4, 39, 6, 19, 40, 45, 46, 47, 8, 41, 5, 15, 49, 9, 50, 16, 51, 52, 13, 53, 10, 43, 25, 26, 58, 27, 28, 29, 30, 31, 32, 48, 20, 35, 7, 42, 33, 59, 14, 54, 18, 55, 17, 56, 11, 57, 34, 21, 22 }
  uselistorder label %bb5, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__aeabi_dmul(i64 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = sext i32 %arg3 to i64
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp32 = trunc i64 %arg1 to i32
  store i32 %tmp32, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_15130 = load i32, i32* @r4, align 4
  store i32 %v3_15130, i32* %stack_var_-16, align 4
  %v12_15130 = load i32, i32* @lr, align 4
  store i32 2047, i32* %ip.global-to-local, align 4
  %v4_1513c = udiv i32 %arg2, 1048576
  %v5_1513c = urem i32 %v4_1513c, 2048
  store i32 %v5_1513c, i32* %r4.global-to-local, align 4
  %v6_1513c = icmp eq i32 %v5_1513c, 0
  br i1 %v6_1513c, label %.thread2, label %bb

bb:                                               ; preds = %entry
  %v5_15140 = udiv i32 %arg4, 1048576
  %v6_15140 = urem i32 %v5_15140, 2048
  store i32 %v6_15140, i32* @r5, align 4
  %v7_15140 = icmp eq i32 %v6_15140, 0
  br i1 %v7_15140, label %.thread2, label %bb38

bb38:                                             ; preds = %bb
  %v5_15144 = icmp eq i32 %v5_1513c, 2047
  br i1 %v5_15144, label %.thread2, label %bb39

bb39:                                             ; preds = %bb38
  %v5_15148 = icmp eq i32 %v6_15140, 2047
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb, %bb38, %bb39
  %v0_1514c = phi i1 [ true, %bb ], [ true, %bb38 ], [ %v5_15148, %bb39 ], [ true, %entry ]
  store i32 ptrtoint (i32* @global_var_15150.450 to i32), i32* %lr.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %v0_1514c, i32 ptrtoint (i32* @global_var_15328.448 to i32))
  %v0_15150 = load i32, i32* %r4.global-to-local, align 4
  %v1_15150 = load i32, i32* @r5, align 4
  %v2_15150 = add i32 %v1_15150, %v0_15150
  store i32 %v2_15150, i32* %r4.global-to-local, align 4
  %v2_15154 = xor i32 %arg4, %arg2
  %v1_15158 = load i32, i32* %ip.global-to-local, align 4
  %tmp51 = mul i32 %v1_15158, -2097152
  %v5_15158 = add i32 %tmp51, -1
  %v6_15158 = and i32 %v5_15158, %arg2
  store i32 %v6_15158, i32* %r1.global-to-local, align 4
  %v6_1515c = and i32 %v5_15158, %arg4
  %v5_15160 = mul i32 %arg2, 4096
  %v6_15160 = or i32 %v5_15160, %tmp32
  %v8_15160 = icmp eq i32 %v6_15160, 0
  br i1 %v8_15160, label %.thread3, label %bb40

.thread3:                                         ; preds = %.thread2
  %v1_151685 = or i32 %v6_15158, 1048576
  store i32 %v1_151685, i32* %r1.global-to-local, align 4
  %v1_1516c7 = or i32 %v6_1515c, 1048576
  br label %dec_label_pc_151ec

bb40:                                             ; preds = %.thread2
  %v6_15164 = mul i32 %arg4, 4096
  %v7_15164 = or i32 %v6_15164, %arg3
  %v9_15164 = icmp eq i32 %v7_15164, 0
  %v1_15168 = or i32 %v6_15158, 1048576
  store i32 %v1_15168, i32* %r1.global-to-local, align 4
  %v1_1516c = or i32 %v6_1515c, 1048576
  br i1 %v9_15164, label %dec_label_pc_151ec, label %dec_label_pc_15174

dec_label_pc_15174:                               ; preds = %bb40
  %v6_15174 = mul nuw i64 %tmp, %arg1
  %v7_15174 = udiv i64 %v6_15174, 4294967296
  %v9_15174 = trunc i64 %v6_15174 to i32
  store i32 %v9_15174, i32* %ip.global-to-local, align 4
  %v7_1517c = zext i32 %v1_15168 to i64
  %v11_1517c = mul nuw nsw i64 %v7_1517c, %tmp
  %v12_1517c = add i64 %v11_1517c, %v7_15174
  %v1_15180 = and i32 %v2_15154, -2147483648
  %v10_15184 = zext i32 %v1_1516c to i64
  %v11_15184 = mul nuw i64 %v10_15184, %arg1
  %v12_15184 = add i64 %v12_1517c, %v11_15184
  %v13_15184 = udiv i64 %v12_15184, 4294967296
  %v15_15184 = trunc i64 %v12_15184 to i32
  %v10_1518c = mul nuw i64 %v10_15184, %v7_1517c
  %v11_1518c = add i64 %v13_15184, %v10_1518c
  %v12_1518c = udiv i64 %v11_1518c, 4294967296
  %v13_1518c = trunc i64 %v12_1518c to i32
  %v14_1518c = trunc i64 %v11_1518c to i32
  %v2_15190 = icmp eq i32 %v9_15174, 0
  br i1 %v2_15190, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_15174
  %v2_15194 = or i32 %v15_15184, 1
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_15174, %bb41
  %storemerge = phi i32 [ %v2_15194, %bb41 ], [ %v15_15184, %dec_label_pc_15174 ]
  %v0_151a8 = phi i32 [ %v2_15194, %bb41 ], [ %v15_15184, %dec_label_pc_15174 ]
  store i32 %storemerge, i32* %lr.global-to-local, align 4
  %v1_15198 = add i32 %v2_15150, -255
  %v2_1519c = icmp ugt i32 %v13_1518c, 511
  %v2_151a0 = icmp eq i1 %v2_1519c, false
  %v3_151a0 = add i32 %v2_15150, -1023
  %v5_151a0 = sext i1 %v2_151a0 to i32
  %v6_151a0 = add i32 %v3_151a0, %v5_151a0
  store i32 %v6_151a0, i32* %r4.global-to-local, align 4
  %v3_151a4 = icmp ugt i32 %v1_15198, 768
  br i1 %v3_151a4, label %dec_label_pc_151b4, label %dec_label_pc_151a8

dec_label_pc_151a8:                               ; preds = %bb42
  %v1_151a8 = icmp slt i32 %v0_151a8, 0
  %v2_151a8 = mul i32 %v0_151a8, 2
  store i32 %v2_151a8, i32* %lr.global-to-local, align 4
  %v3_151ac = mul i32 %v14_1518c, 2
  %v4_151ac = zext i1 %v1_151a8 to i32
  %v5_151ac = or i32 %v4_151ac, %v3_151ac
  %v9_151ac = icmp ule i32 %v5_151ac, %v14_1518c
  %v10_151ac = icmp ult i32 %v3_151ac, %v14_1518c
  %v11_151ac = select i1 %v1_151a8, i1 %v9_151ac, i1 %v10_151ac
  %v3_151b025 = mul nuw nsw i64 %v12_1518c, 2
  %v3_151b0 = trunc i64 %v3_151b025 to i32
  %v4_151b0 = zext i1 %v11_151ac to i32
  %v5_151b0 = or i32 %v4_151b0, %v3_151b0
  br label %dec_label_pc_151b4

dec_label_pc_151b4:                               ; preds = %bb42, %dec_label_pc_151a8
  %v0_151c4 = phi i32 [ %v0_151a8, %bb42 ], [ %v2_151a8, %dec_label_pc_151a8 ]
  %v0_151bc = phi i32 [ %v14_1518c, %bb42 ], [ %v5_151ac, %dec_label_pc_151a8 ]
  %v1_151b4 = phi i32 [ %v13_1518c, %bb42 ], [ %v5_151b0, %dec_label_pc_151a8 ]
  %v4_151b4 = mul i32 %v1_151b4, 2048
  %v4_151b8 = udiv i32 %v0_151bc, 2097152
  %v5_151b4 = or i32 %v4_151b8, %v1_15180
  %v5_151b8 = or i32 %v5_151b4, %v4_151b4
  store i32 %v5_151b8, i32* %r1.global-to-local, align 4
  %v3_151bc = mul i32 %v0_151bc, 2048
  %v4_151c0 = udiv i32 %v0_151c4, 2097152
  %v5_151c0 = or i32 %v3_151bc, %v4_151c0
  store i32 %v5_151c0, i32* %r0.global-to-local, align 4
  %v3_151c4 = mul i32 %v0_151c4, 2048
  store i32 %v3_151c4, i32* %lr.global-to-local, align 4
  %v1_151c8 = add i32 %v6_151a0, -253
  store i32 %v1_151c8, i32* %ip.global-to-local, align 4
  %v2_151c8 = icmp ugt i32 %v6_151a0, 252
  %v7_151c8 = icmp eq i32 %v6_151a0, 253
  %v2_151cc = xor i1 %v7_151c8, true
  %v3_151cc = and i1 %v2_151c8, %v2_151cc
  br i1 %v3_151cc, label %bb43, label %bb44

bb43:                                             ; preds = %dec_label_pc_151b4
  %v6_151cc = icmp ugt i32 %v1_151c8, 1791
  %v11_151cc = icmp eq i32 %v1_151c8, 1792
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_151b4, %bb43
  %v1_151d0 = phi i1 [ %v7_151c8, %dec_label_pc_151b4 ], [ %v11_151cc, %bb43 ]
  %v0_151d0 = phi i1 [ %v2_151c8, %dec_label_pc_151b4 ], [ %v6_151cc, %bb43 ]
  %v2_151d0 = xor i1 %v1_151d0, true
  %v3_151d0 = and i1 %v0_151d0, %v2_151d0
  call void @__pseudo_cond_branch(i1 %v3_151d0, i32 ptrtoint (i32* @global_var_1521c.449 to i32))
  %v0_151d4 = load i32, i32* %lr.global-to-local, align 4
  %v2_151d4 = icmp slt i32 %v0_151d4, 0
  %v6_151d4 = icmp eq i32 %v0_151d4, -2147483648
  %v1_151d8 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v6_151d4, label %bb45, label %._crit_edge

bb45:                                             ; preds = %bb44
  %v2_151d8 = urem i32 %v1_151d8, 2
  %v3_151d8 = icmp ne i32 %v2_151d8, 0
  %v4_151d8 = udiv i32 %v1_151d8, 2
  store i32 %v4_151d8, i32* %lr.global-to-local, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %bb44, %bb45
  %v1_151dc = phi i1 [ %v3_151d8, %bb45 ], [ %v2_151d4, %bb44 ]
  %v2_151dc = zext i1 %v1_151dc to i32
  %v3_151dc = add i32 %v2_151dc, %v1_151d8
  store i32 %v3_151dc, i32* %r0.global-to-local, align 4
  %v0_151e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_151e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_151e0 = and i32 %v1_151e0, 4096
  %v3_151e0 = icmp ne i32 %v2_151e0, 0
  %v4_151e0 = mul i32 %v1_151e0, 1048576
  %v6_151e0 = add i32 %v4_151e0, %v0_151e0
  %v7_151e0 = zext i1 %v3_151e0 to i32
  %v8_151e0 = add i32 %v7_151e0, %v6_151e0
  store i32 %v8_151e0, i32* %r1.global-to-local, align 4
  %v2_151e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_151e4, i32* %r4.global-to-local, align 4
  store i32 %v12_15130, i32* %lr.global-to-local, align 4
  ret i32 %v3_151dc

dec_label_pc_151ec:                               ; preds = %.thread3, %bb40
  %v1_151f8 = phi i32 [ %v1_1516c7, %.thread3 ], [ %v1_1516c, %bb40 ]
  %v1_151f0 = phi i32 [ %v1_151685, %.thread3 ], [ %v1_15168, %bb40 ]
  %v1_151ec = and i32 %v2_15154, -2147483648
  %v2_151f0 = or i32 %v1_151f0, %v1_151ec
  %v4_151f41 = or i64 %tmp, %arg1
  %v4_151f4 = trunc i64 %v4_151f41 to i32
  store i32 %v4_151f4, i32* %r0.global-to-local, align 4
  %v2_151f8 = xor i32 %v2_151f0, %v1_151f8
  store i32 %v2_151f8, i32* %r1.global-to-local, align 4
  %v4_151fc = udiv i32 %v1_15158, 2
  %v5_151fc = sub i32 %v2_15150, %v4_151fc
  store i32 %v5_151fc, i32* %r4.global-to-local, align 4
  %v7_151fc = sub i32 0, %v5_151fc
  %v8_151fc = and i32 %v2_15150, %v7_151fc
  %v11_151fc = icmp eq i32 %v2_15150, %v4_151fc
  %v7_15200 = icmp sgt i32 %v2_15150, %v4_151fc
  br i1 %v7_15200, label %bb46, label %bb47

bb46:                                             ; preds = %dec_label_pc_151ec
  %v10_15200 = sub i32 %v1_15158, %v5_151fc
  %v12_15200 = xor i32 %v5_151fc, %v1_15158
  %v13_15200 = xor i32 %v10_15200, %v1_15158
  %v14_15200 = and i32 %v13_15200, %v12_15200
  %v17_15200 = icmp eq i32 %v1_15158, %v5_151fc
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_151ec, %bb46
  %v3_1520c.in = phi i32 [ %v8_151fc, %dec_label_pc_151ec ], [ %v14_15200, %bb46 ]
  %v2_1520c.in = phi i32 [ %v5_151fc, %dec_label_pc_151ec ], [ %v10_15200, %bb46 ]
  %v1_1520c = phi i1 [ %v11_151fc, %dec_label_pc_151ec ], [ %v17_15200, %bb46 ]
  %v2_1520c = icmp slt i32 %v2_1520c.in, 0
  %v3_1520c = icmp slt i32 %v3_1520c.in, 0
  %v3_15204 = xor i1 %v3_1520c, %v2_1520c
  %v4_15204 = or i1 %v1_1520c, %v3_15204
  br i1 %v4_15204, label %._crit_edge23, label %bb48

._crit_edge23:                                    ; preds = %bb47
  %v0_1520c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %bb49

bb48:                                             ; preds = %bb47
  %v9_1520430 = mul i32 %v5_151fc, 1048576
  %v10_1520431 = or i32 %v2_151f8, %v9_1520430
  store i32 %v10_1520431, i32* %r1.global-to-local, align 4
  %v7_15208 = load i32, i32* %stack_var_-16, align 4
  store i32 %v7_15208, i32* %r4.global-to-local, align 4
  store i32 %v12_15130, i32* %lr.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %._crit_edge23, %bb48
  %v0_1520c = phi i32 [ %v0_1520c.pre, %._crit_edge23 ], [ %v12_15130, %bb48 ]
  %v6_1520c = xor i1 %v4_15204, true
  call void @__pseudo_cond_branch(i1 %v6_1520c, i32 %v0_1520c)
  %v0_15210 = load i32, i32* %r1.global-to-local, align 4
  %v1_15210 = or i32 %v0_15210, 1048576
  store i32 %v1_15210, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v0_15218 = load i32, i32* %r4.global-to-local, align 4
  %v1_15218 = add i32 %v0_15218, -1
  store i32 %v1_15218, i32* %r4.global-to-local, align 4
  ret i32 %v4_151f4

; uselistorder directives
  uselistorder i32 %v5_151fc, { 1, 0, 5, 3, 4, 2, 6 }
  uselistorder i32 %v4_151fc, { 2, 1, 0 }
  uselistorder i32 %v1_151d8, { 2, 0, 1 }
  uselistorder i32 %v0_151d4, { 1, 0 }
  uselistorder i1 %v7_151c8, { 1, 0 }
  uselistorder i32 %v2_151a8, { 1, 0 }
  uselistorder i1 %v1_151a8, { 1, 0 }
  uselistorder i32 %v6_151a0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_151a8, { 1, 0, 2 }
  uselistorder i32 %v14_1518c, { 1, 3, 2, 0 }
  uselistorder i64 %v11_1518c, { 1, 0 }
  uselistorder i64 %v12_15184, { 1, 0 }
  uselistorder i64 %v10_15184, { 1, 0 }
  uselistorder i64 %v7_1517c, { 1, 0 }
  uselistorder i64 %v6_15174, { 1, 0 }
  uselistorder i32 %v6_1515c, { 1, 0 }
  uselistorder i32 %v6_15158, { 1, 0, 2 }
  uselistorder i32 %v1_15158, { 5, 2, 3, 4, 1, 0 }
  uselistorder i32 %v2_15150, { 4, 3, 0, 2, 1, 5, 6 }
  uselistorder i32 %v6_15140, { 2, 1, 0 }
  uselistorder i32 %v5_1513c, { 2, 1, 0 }
  uselistorder i32 %v12_15130, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 9, 10, 2, 3, 4, 5, 6, 8, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i32 %arg4, { 0, 2, 3, 1 }
  uselistorder i32 %arg2, { 0, 2, 3, 1, 4 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_151ec, { 1, 0 }
  uselistorder label %._crit_edge, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_151b4, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %.thread2, { 3, 2, 1, 0 }
}

define i32 @function_1521c() local_unnamed_addr {
dec_label_pc_1521c:
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %stack_var_16 = alloca i32, align 4
  %v0_1521c = load i1, i1* @cpsr_z, align 1
  %v1_1521c = load i1, i1* @cpsr_n, align 1
  %v2_1521c = load i1, i1* @cpsr_v, align 1
  %v3_1521c = xor i1 %v1_1521c, %v2_1521c
  %v4_1521c = or i1 %v0_1521c, %v3_1521c
  br i1 %v4_1521c, label %dec_label_pc_15220, label %dec_label_pc_15398

dec_label_pc_15220:                               ; preds = %dec_label_pc_1521c
  %v0_15220 = load i32, i32* @r4, align 4
  %v4_15220 = add i32 %v0_15220, 54
  %v6_15220 = sub i32 0, %v0_15220
  %v7_15220 = and i32 %v4_15220, %v6_15220
  %v8_15220 = icmp slt i32 %v7_15220, 0
  %v9_15220 = icmp slt i32 %v4_15220, 0
  %v10_15220 = icmp eq i32 %v4_15220, 0
  %v7_15224 = icmp sgt i32 %v0_15220, -54
  br i1 %v7_15224, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_15220
  store i32 0, i32* @r0, align 4
  %v8_15228 = load i32, i32* @r1, align 4
  %v9_15228 = and i32 %v8_15228, -2147483648
  store i32 %v9_15228, i32* @r1, align 4
  store i32 %tmp10, i32* @r4, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15220, %bb
  %v4_15230 = xor i1 %v9_15220, %v8_15220
  %v5_15230 = or i1 %v10_15220, %v4_15230
  call void @__pseudo_cond_branch(i1 %v5_15230, i32 %tmp7)
  %v0_15234 = load i32, i32* @r4, align 4
  %v1_15234 = sub i32 0, %v0_15234
  %v2_15238 = sub i32 -32, %v0_15234
  %v4_15238 = add i32 %v0_15234, 31
  %v5_15238 = and i32 %v4_15238, %v1_15234
  %v6_15238 = icmp slt i32 %v5_15238, 0
  store i1 %v6_15238, i1* @cpsr_v, align 1
  %v6_1523c = icmp slt i32 %v1_15234, 32
  br i1 %v6_1523c, label %dec_label_pc_15240, label %dec_label_pc_152ac

dec_label_pc_15240:                               ; preds = %.thread1
  %v1_15240 = add i32 %v2_15238, 12
  %v8_15244 = icmp sgt i32 %v1_15240, 0
  br i1 %v8_15244, label %dec_label_pc_1527c, label %dec_label_pc_15248

dec_label_pc_15248:                               ; preds = %dec_label_pc_15240
  %v1_15248 = add i32 %v2_15238, 32
  %v1_1524c = sub i32 0, %v2_15238
  %v0_15250 = load i32, i32* @r0, align 4
  %v6_15250 = shl i32 %v0_15250, %v1_1524c
  %v2_15254 = add i32 %v2_15238, 31
  %v3_15254 = shl i32 1, %v2_15254
  %v6_15254 = lshr i32 %v0_15250, %v1_15248
  %v1_15258 = load i32, i32* @r1, align 4
  %v7_15258 = shl i32 %v1_15258, %v1_1524c
  %v8_15258 = or i32 %v7_15258, %v6_15254
  %v1_1525c = and i32 %v1_15258, -2147483648
  %tmp = bitcast i32 %v1_15258 to float
  %tmp19 = call float @fabsf(float %tmp)
  %v1_15260 = bitcast float %tmp19 to i32
  %tmp20 = icmp slt i32 %v6_15250, 0
  %v4_15264 = zext i1 %tmp20 to i32
  %v5_15264 = add i32 %v8_15258, %v4_15264
  %v5_15268 = and i32 %v1_15260, %v3_15254
  %v6_15268 = icmp ne i32 %v5_15268, 0
  %v7_15268 = lshr i32 %v1_15260, %v1_15248
  %v9_15268 = add i32 %v7_15268, %v1_1525c
  %v10_15268 = zext i1 %v6_15268 to i32
  %v11_15268 = add i32 %v9_15268, %v10_15268
  store i32 %v11_15268, i32* @r1, align 4
  %v19_15268 = add i32 %v11_15268, %v10_15268
  %v20_15268 = xor i32 %v19_15268, %v1_15258
  %v21_15268 = xor i32 %v19_15268, %v7_15268
  %v22_15268 = and i32 %v20_15268, %v21_15268
  %v23_15268 = icmp slt i32 %v22_15268, 0
  store i1 %v23_15268, i1* @cpsr_v, align 1
  %v3_1526c = mul i32 %v6_15250, 2
  %v4_1526c = or i32 %v3_1526c, %tmp7
  %v5_1526c = icmp slt i32 %v4_1526c, 0
  store i1 %v5_1526c, i1* @cpsr_n, align 1
  %v6_1526c = icmp eq i32 %v4_1526c, 0
  store i1 %v6_1526c, i1* @cpsr_z, align 1
  br i1 %v6_1526c, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_15248
  %tmp21 = sext i1 %tmp20 to i32
  %v6_15270 = add nsw i32 %tmp21, -1
  %v7_15270 = and i32 %v5_15264, %v6_15270
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_15248, %bb13
  %v1_15278 = phi i32 [ %v5_15264, %dec_label_pc_15248 ], [ %v7_15270, %bb13 ]
  %v2_15274 = load i32, i32* %stack_var_16, align 4
  store i32 %v2_15274, i32* @r4, align 4
  store i32 %tmp6, i32* @r5, align 4
  store i32 %tmp5, i32* @r6, align 4
  ret i32 %v1_15278

dec_label_pc_1527c:                               ; preds = %dec_label_pc_15240
  %v1_1527c = sub i32 0, %v2_15238
  %v1_15280 = add i32 %v2_15238, 32
  %v0_15284 = load i32, i32* @r0, align 4
  %v6_15284 = shl i32 %v0_15284, %v1_1527c
  %v6_15288 = lshr i32 %v0_15284, %v1_15280
  %v1_1528c = load i32, i32* @r1, align 4
  %v7_1528c = shl i32 %v1_1528c, %v1_1527c
  %v8_1528c = or i32 %v7_1528c, %v6_15288
  %v1_15290 = and i32 %v1_1528c, -2147483648
  %tmp22 = icmp slt i32 %v6_15284, 0
  %v4_15294 = zext i1 %tmp22 to i32
  %v5_15294 = add i32 %v8_1528c, %v4_15294
  %v6_15294 = icmp ult i32 %v5_15294, %v8_1528c
  %v2_15298 = zext i1 %v6_15294 to i32
  %v3_15298 = or i32 %v2_15298, %v1_15290
  store i32 %v3_15298, i32* @r1, align 4
  %v9_15298 = add nsw i32 %v3_15298, %v2_15298
  %v10_15298 = sub i32 0, %v1_1528c
  %v11_15298 = and i32 %v9_15298, %v10_15298
  %v12_15298 = icmp slt i32 %v11_15298, 0
  store i1 %v12_15298, i1* @cpsr_v, align 1
  %v3_1529c = mul i32 %v6_15284, 2
  %v4_1529c = or i32 %v3_1529c, %tmp7
  %v5_1529c = icmp slt i32 %v4_1529c, 0
  store i1 %v5_1529c, i1* @cpsr_n, align 1
  %v6_1529c = icmp eq i32 %v4_1529c, 0
  store i1 %v6_1529c, i1* @cpsr_z, align 1
  br i1 %v6_1529c, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_1527c
  %tmp23 = sext i1 %tmp22 to i32
  %v6_152a0 = add nsw i32 %tmp23, -1
  %v7_152a0 = and i32 %v5_15294, %v6_152a0
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_1527c, %bb15
  %v1_152a8 = phi i32 [ %v5_15294, %dec_label_pc_1527c ], [ %v7_152a0, %bb15 ]
  %v2_152a4 = load i32, i32* %stack_var_16, align 4
  store i32 %v2_152a4, i32* @r4, align 4
  store i32 %tmp6, i32* @r5, align 4
  store i32 %tmp5, i32* @r6, align 4
  ret i32 %v1_152a8

dec_label_pc_152ac:                               ; preds = %.thread1
  %v1_152ac = sub i32 32, %v2_15238
  %v1_152b0 = load i32, i32* @r0, align 4
  %v7_152b0 = shl i32 %v1_152b0, %v1_152ac
  %v8_152b0 = or i32 %v7_152b0, %tmp7
  %v6_152b4 = lshr i32 %v1_152b0, %v2_15238
  %v1_152b8 = load i32, i32* @r1, align 4
  %v7_152b8 = shl i32 %v1_152b8, %v1_152ac
  %v8_152b8 = or i32 %v7_152b8, %v6_152b4
  %v6_152bc = lshr i32 %v1_152b8, %v2_15238
  %v1_152c0 = and i32 %v1_152b8, -2147483648
  store i32 %v1_152c0, i32* @r1, align 4
  %v7_152c4 = lshr i32 %v1_152c0, %v2_15238
  %v8_152c4 = sub i32 -1, %v7_152c4
  %v9_152c4 = and i32 %v6_152bc, %v8_152c4
  %tmp24 = icmp slt i32 %v8_152b8, 0
  %v4_152c8 = zext i1 %tmp24 to i32
  %v5_152c8 = add i32 %v4_152c8, %v9_152c4
  %v3_152cc = mul i32 %v8_152b8, 2
  %v4_152cc = or i32 %v8_152b0, %v3_152cc
  %v5_152cc = icmp slt i32 %v4_152cc, 0
  store i1 %v5_152cc, i1* @cpsr_n, align 1
  %v6_152cc = icmp eq i32 %v4_152cc, 0
  store i1 %v6_152cc, i1* @cpsr_z, align 1
  br i1 %v6_152cc, label %bb17, label %bb18

bb17:                                             ; preds = %dec_label_pc_152ac
  %tmp25 = sext i1 %tmp24 to i32
  %v6_152d0 = add nsw i32 %tmp25, -1
  %v7_152d0 = and i32 %v5_152c8, %v6_152d0
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_152ac, %bb17
  %v1_152d8 = phi i32 [ %v5_152c8, %dec_label_pc_152ac ], [ %v7_152d0, %bb17 ]
  %v2_152d4 = load i32, i32* %stack_var_16, align 4
  store i32 %v2_152d4, i32* @r4, align 4
  store i32 %tmp6, i32* @r5, align 4
  store i32 %tmp5, i32* @r6, align 4
  ret i32 %v1_152d8

dec_label_pc_15398:                               ; preds = %dec_label_pc_1521c
  %v0_15398 = load i32, i32* @r1, align 4
  %v1_15398 = and i32 %v0_15398, -2147483648
  %v1_153a0 = or i32 %v1_15398, 2146435072
  store i32 %v1_153a0, i32* @r1, align 4
  store i32 %tmp10, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v5_152c8, { 1, 0 }
  uselistorder i32 %v5_15294, { 1, 0, 2 }
  uselistorder i32 %v8_1528c, { 1, 0 }
  uselistorder i32 %v1_1527c, { 1, 0 }
  uselistorder i32 %v5_15264, { 1, 0 }
  uselistorder i32 %v1_15258, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1524c, { 1, 0 }
  uselistorder i32 %v2_15238, { 5, 6, 7, 9, 0, 1, 2, 3, 4, 8 }
  uselistorder i32 %v1_15234, { 1, 0 }
  uselistorder i32 %v4_15220, { 1, 2, 0 }
  uselistorder i32 %v0_15220, { 1, 0, 2 }
  uselistorder i32 %tmp10, { 1, 0 }
  uselistorder i32 %tmp6, { 2, 1, 0 }
  uselistorder i32 %tmp5, { 2, 1, 0 }
  uselistorder i32 12, { 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 60, 67, 10, 68, 44, 71, 3, 1, 2, 72, 73, 5, 0, 4, 83, 45, 12, 13, 49, 14, 15, 69, 70, 46, 47, 48, 74, 75, 76, 77, 78, 16, 79, 66, 17, 84, 85, 80, 11, 129, 130, 131, 132, 133, 135, 136, 134, 137, 138, 139, 140, 141, 142, 143, 18, 19, 20, 21, 23, 22, 24, 81, 82, 25, 61, 62, 63, 64, 65, 50, 51, 26, 52, 53, 54, 87, 86, 55, 56, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 6, 27, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 118, 119, 120, 121, 122, 123, 124, 126, 127, 28, 128, 9, 57, 58, 7, 59, 88, 8, 89 }
  uselistorder i32 -32, { 4, 3, 5, 6, 7, 11, 12, 8, 13, 14, 0, 9, 2, 10, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_153b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_153b0:
  %v1_153b4 = or i32 %arg1, 2146959360
  store i32 %v1_153b4, i32* @r1, align 4
  %v1_153bc = load i32, i32* @r0, align 4
  ret i32 %v1_153bc
}

define i32 @__aeabi_ddiv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_153c0 = load i32, i32* @r4, align 4
  store i32 %v3_153c0, i32* %stack_var_-16, align 4
  %v6_153c0 = load i32, i32* @r5, align 4
  %v9_153c0 = load i32, i32* @r6, align 4
  %v12_153c0 = load i32, i32* @lr, align 4
  store i32 2047, i32* %ip.global-to-local, align 4
  %v1_153cc = load i32, i32* @r1, align 4
  %v4_153cc = udiv i32 %v1_153cc, 1048576
  %v5_153cc = urem i32 %v4_153cc, 2048
  store i32 %v5_153cc, i32* @r4, align 4
  %v6_153cc = icmp eq i32 %v5_153cc, 0
  br i1 %v6_153cc, label %entry..thread2_crit_edge, label %bb

entry..thread2_crit_edge:                         ; preds = %entry
  %.pre147 = udiv i32 %arg4, 1048576
  br label %.thread2

bb:                                               ; preds = %entry
  %v5_153d0 = udiv i32 %arg4, 1048576
  %v6_153d0 = urem i32 %v5_153d0, 2048
  store i32 %v6_153d0, i32* %r5.global-to-local, align 4
  %v7_153d0 = icmp eq i32 %v6_153d0, 0
  br i1 %v7_153d0, label %.thread1, label %bb90

.thread1:                                         ; preds = %bb
  br label %dec_label_pc_1555c

bb90:                                             ; preds = %bb
  %v5_153d4 = icmp eq i32 %v5_153cc, 2047
  br i1 %v5_153d4, label %.thread2, label %bb91

.thread2:                                         ; preds = %entry..thread2_crit_edge, %bb90
  %.pre145.pre-phi = phi i32 [ %.pre147, %entry..thread2_crit_edge ], [ %v5_153d0, %bb90 ]
  br label %dec_label_pc_1555c

bb91:                                             ; preds = %bb90
  %v5_153d8 = icmp eq i32 %v6_153d0, 2047
  br i1 %v5_153d8, label %dec_label_pc_1555c, label %dec_label_pc_153e0

dec_label_pc_153e0:                               ; preds = %bb91
  %v2_153e0 = sub nsw i32 %v5_153cc, %v6_153d0
  store i32 %v2_153e0, i32* %r4.global-to-local, align 4
  %v2_153e4 = xor i32 %v1_153cc, %arg4
  %v4_153e8 = mul i32 %arg4, 4096
  %v5_153e8 = or i32 %v4_153e8, %arg3
  store i32 %v5_153e8, i32* %r5.global-to-local, align 4
  %v7_153e8 = icmp eq i32 %v5_153e8, 0
  %v3_153ec = mul i32 %v1_153cc, 4096
  store i32 %v3_153ec, i32* %r1.global-to-local, align 4
  br i1 %v7_153e8, label %dec_label_pc_15528, label %dec_label_pc_153f4

dec_label_pc_153f4:                               ; preds = %dec_label_pc_153e0
  %tmp92 = mul i32 %arg4, 256
  %v4_153fc = and i32 %tmp92, 268435200
  %v4_15400 = udiv i32 %arg3, 16777216
  %v5_153fc = or i32 %v4_15400, %v4_153fc
  %v5_15400 = or i32 %v5_153fc, 268435456
  store i32 %v5_15400, i32* %r3.global-to-local, align 4
  %v3_15404 = mul i32 %arg3, 256
  store i32 %v3_15404, i32* %r2.global-to-local, align 4
  %tmp93 = mul i32 %v1_153cc, 256
  %v4_15408 = and i32 %tmp93, 268435200
  %v1_1540c = load i32, i32* @r0, align 4
  %v4_1540c = udiv i32 %v1_1540c, 16777216
  %v5_15408 = or i32 %v4_15408, %v4_1540c
  %v5_1540c = or i32 %v5_15408, 268435456
  store i32 %v5_1540c, i32* %r5.global-to-local, align 4
  %v3_15410 = mul i32 %v1_1540c, 256
  store i32 %v3_15410, i32* %r6.global-to-local, align 4
  %v1_15414 = and i32 %v2_153e4, -2147483648
  store i32 %v1_15414, i32* %r1.global-to-local, align 4
  %v3_15418 = icmp uge i32 %v5_1540c, %v5_15400
  %v9_15418 = icmp eq i32 %v5_1540c, %v5_15400
  br i1 %v9_15418, label %bb94, label %bb95

bb94:                                             ; preds = %dec_label_pc_153f4
  %v4_1541c = icmp uge i32 %v3_15410, %v3_15404
  br label %bb95

bb95:                                             ; preds = %dec_label_pc_153f4, %bb94
  %v1_15420 = phi i1 [ %v3_15418, %dec_label_pc_153f4 ], [ %v4_1541c, %bb94 ]
  %v2_15420 = add nsw i32 %v2_153e0, 253
  %v3_15420 = zext i1 %v1_15420 to i32
  %v4_15420 = add nsw i32 %v2_15420, %v3_15420
  %v8_15420 = icmp ule i32 %v4_15420, %v2_153e0
  %v9_15420 = icmp ugt i32 %v2_153e0, -254
  %v10_15420 = select i1 %v1_15420, i1 %v8_15420, i1 %v9_15420
  %v1_15424 = add nsw i32 %v4_15420, 768
  store i32 %v1_15424, i32* %r4.global-to-local, align 4
  br i1 %v10_15420, label %dec_label_pc_15434, label %dec_label_pc_1542c

dec_label_pc_1542c:                               ; preds = %bb95
  %v3_1542c = udiv i32 %v5_15400, 2
  store i32 %v3_1542c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15434

dec_label_pc_15434:                               ; preds = %bb95, %dec_label_pc_1542c
  %v0_1543c = phi i32 [ %v5_15400, %bb95 ], [ %v3_1542c, %dec_label_pc_1542c ]
  %v0_15440 = phi i32 [ %v3_15404, %bb95 ], [ 0, %dec_label_pc_1542c ]
  %v2_15434 = sub i32 %v3_15410, %v0_15440
  store i32 %v2_15434, i32* %r6.global-to-local, align 4
  %v3_15434 = icmp uge i32 %v3_15410, %v0_15440
  %v3_15438 = icmp eq i1 %v3_15434, false
  %v4_15438 = sub nsw i32 %v5_1540c, %v0_1543c
  %v6_15438 = sext i1 %v3_15438 to i32
  %v7_15438 = add nsw i32 %v6_15438, %v4_15438
  store i32 %v7_15438, i32* %r5.global-to-local, align 4
  %v3_1543c = udiv i32 %v0_1543c, 2
  store i32 %v3_1543c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1544c.outer

dec_label_pc_1544c.outer:                         ; preds = %dec_label_pc_154e4, %dec_label_pc_15434
  %v1_154f8.ph = phi i32 [ %v2_154e4, %dec_label_pc_154e4 ], [ %v1_15414, %dec_label_pc_15434 ]
  %v0_15450.ph = phi i32 [ %v5_154c0, %dec_label_pc_154e4 ], [ %v7_15438, %dec_label_pc_15434 ]
  %v1_15454.ph = phi i32 [ %v3_154c4, %dec_label_pc_154e4 ], [ %v2_15434, %dec_label_pc_15434 ]
  %v5_154cc17.ph = phi i32 [ %v5_154cc, %dec_label_pc_154e4 ], [ %v3_1543c, %dec_label_pc_15434 ]
  %v3_154d013.ph = phi i32 [ %v3_154d0, %dec_label_pc_154e4 ], [ 0, %dec_label_pc_15434 ]
  %storemerge133 = phi i32 [ 0, %dec_label_pc_154e4 ], [ 1048576, %dec_label_pc_15434 ]
  %storemerge = phi i32 [ -2147483648, %dec_label_pc_154e4 ], [ 524288, %dec_label_pc_15434 ]
  store i32 %storemerge133, i32* %r0.global-to-local, align 4
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1544c

dec_label_pc_1544c:                               ; preds = %dec_label_pc_1544c.outer, %dec_label_pc_154bc
  %v1_154b059 = phi i32 [ %v2_154f8, %dec_label_pc_154bc ], [ %storemerge133, %dec_label_pc_1544c.outer ]
  %v1_1545c = phi i32 [ %v1_1545c32, %dec_label_pc_154bc ], [ %storemerge133, %dec_label_pc_1544c.outer ]
  %v1_1547841 = phi i32 [ %v1_1547843, %dec_label_pc_154bc ], [ %storemerge133, %dec_label_pc_1544c.outer ]
  %v1_1549450 = phi i32 [ %v1_1549452, %dec_label_pc_154bc ], [ %storemerge133, %dec_label_pc_1544c.outer ]
  %v0_154d4 = phi i32 [ %v3_154d4, %dec_label_pc_154bc ], [ %storemerge, %dec_label_pc_1544c.outer ]
  %v0_15450 = phi i32 [ %v5_154c0, %dec_label_pc_154bc ], [ %v0_15450.ph, %dec_label_pc_1544c.outer ]
  %v1_15454 = phi i32 [ %v3_154c4, %dec_label_pc_154bc ], [ %v1_15454.ph, %dec_label_pc_1544c.outer ]
  %v5_154cc17 = phi i32 [ %v5_154cc, %dec_label_pc_154bc ], [ %v5_154cc17.ph, %dec_label_pc_1544c.outer ]
  %v3_154d013 = phi i32 [ %v3_154d0, %dec_label_pc_154bc ], [ %v3_154d013.ph, %dec_label_pc_1544c.outer ]
  %v3_1544c = icmp uge i32 %v1_15454, %v3_154d013
  %v3_15450 = icmp eq i1 %v3_1544c, false
  %v4_15450 = sub i32 %v0_15450, %v5_154cc17
  %v6_15450 = sext i1 %v3_15450 to i32
  %v7_15450 = add i32 %v6_15450, %v4_15450
  %v8_15450 = zext i1 %v3_15450 to i32
  %v9_15450 = sub i32 %v7_15450, %v8_15450
  %v10_15450 = icmp ult i32 %v0_15450, %v9_15450
  %v11_15450 = icmp ne i32 %v5_154cc17, -1
  %v12_15450 = or i1 %v11_15450, %v10_15450
  %v13_15450 = icmp ult i32 %v0_15450, %v5_154cc17
  %v14_15450 = select i1 %v3_15450, i1 %v12_15450, i1 %v13_15450
  br i1 %v14_15450, label %.thread4, label %bb96

bb96:                                             ; preds = %dec_label_pc_1544c
  %v3_15454 = sub i32 %v1_15454, %v3_154d013
  store i32 %v3_15454, i32* %r6.global-to-local, align 4
  store i32 %v7_15450, i32* %r5.global-to-local, align 4
  %v3_1545c = or i32 %v1_1545c, %v0_154d4
  store i32 %v3_1545c, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_1544c, %bb96
  %v1_154b058 = phi i32 [ %v1_154b059, %dec_label_pc_1544c ], [ %v3_1545c, %bb96 ]
  %v1_1545c35 = phi i32 [ %v1_1545c, %dec_label_pc_1544c ], [ %v3_1545c, %bb96 ]
  %v1_15478 = phi i32 [ %v1_1547841, %dec_label_pc_1544c ], [ %v3_1545c, %bb96 ]
  %v1_1549449 = phi i32 [ %v1_1549450, %dec_label_pc_1544c ], [ %v3_1545c, %bb96 ]
  %v0_1546c = phi i32 [ %v0_15450, %dec_label_pc_1544c ], [ %v7_15450, %bb96 ]
  %v1_15470 = phi i32 [ %v1_15454, %dec_label_pc_1544c ], [ %v3_15454, %bb96 ]
  %v1_15460 = urem i32 %v5_154cc17, 2
  %v2_15460 = icmp ne i32 %v1_15460, 0
  %v3_15460 = udiv i32 %v5_154cc17, 2
  %v3_15464 = zext i1 %v2_15460 to i32
  %v6_15464 = zext i32 %v3_154d013 to i64
  %v7_15464 = sub i32 33, %v3_154d013
  %v8_15464 = zext i32 %v7_15464 to i64
  %v9_15464 = shl i64 %v6_15464, %v8_15464
  %v10_15464 = sub i32 32, %v3_154d013
  %v11_15464 = shl i32 %v3_15464, %v10_15464
  %v12_15464 = zext i32 %v11_15464 to i64
  %v14_15464 = or i64 %v12_15464, %v9_15464
  %v15_15464 = trunc i64 %v14_15464 to i32
  %v3_15468 = icmp uge i32 %v1_15470, %v15_15464
  %v3_1546c = icmp eq i1 %v3_15468, false
  %v4_1546c = sub i32 %v0_1546c, %v3_15460
  %v6_1546c = sext i1 %v3_1546c to i32
  %v7_1546c = add i32 %v6_1546c, %v4_1546c
  %v13_1546c = icmp ult i32 %v0_1546c, %v3_15460
  %v14_1546c = or i1 %v13_1546c, %v3_1546c
  br i1 %v14_1546c, label %.thread6, label %bb97

bb97:                                             ; preds = %.thread4
  %v3_15470 = sub i32 %v1_15470, %v15_15464
  store i32 %v3_15470, i32* %r6.global-to-local, align 4
  store i32 %v7_1546c, i32* %r5.global-to-local, align 4
  %v5_15478 = udiv i32 %v0_154d4, 2
  %v6_15478 = or i32 %v1_15478, %v5_15478
  store i32 %v6_15478, i32* %r0.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %.thread4, %bb97
  %v1_154b057 = phi i32 [ %v1_154b058, %.thread4 ], [ %v6_15478, %bb97 ]
  %v1_1545c34 = phi i32 [ %v1_1545c35, %.thread4 ], [ %v6_15478, %bb97 ]
  %v1_1547845 = phi i32 [ %v1_15478, %.thread4 ], [ %v6_15478, %bb97 ]
  %v1_15494 = phi i32 [ %v1_1549449, %.thread4 ], [ %v6_15478, %bb97 ]
  %v0_15488 = phi i32 [ %v0_1546c, %.thread4 ], [ %v7_1546c, %bb97 ]
  %v1_1548c = phi i32 [ %v1_15470, %.thread4 ], [ %v3_15470, %bb97 ]
  %v1_1547c = urem i32 %v3_15460, 2
  %v2_1547c = icmp ne i32 %v1_1547c, 0
  %v3_1547c = udiv i32 %v5_154cc17, 4
  %v3_15480 = zext i1 %v2_1547c to i32
  %v6_15480 = and i64 %v14_15464, 4294967295
  %v7_15480 = sub i32 33, %v15_15464
  %v8_15480 = zext i32 %v7_15480 to i64
  %v9_15480 = shl i64 %v6_15480, %v8_15480
  %v10_15480 = sub i32 32, %v15_15464
  %v11_15480 = shl i32 %v3_15480, %v10_15480
  %v12_15480 = zext i32 %v11_15480 to i64
  %v14_15480 = or i64 %v12_15480, %v9_15480
  %v15_15480 = trunc i64 %v14_15480 to i32
  %v3_15484 = icmp uge i32 %v1_1548c, %v15_15480
  %v3_15488 = icmp eq i1 %v3_15484, false
  %v4_15488 = sub i32 %v0_15488, %v3_1547c
  %v6_15488 = sext i1 %v3_15488 to i32
  %v7_15488 = add i32 %v6_15488, %v4_15488
  %v13_15488 = icmp ult i32 %v0_15488, %v3_1547c
  %v14_15488 = or i1 %v13_15488, %v3_15488
  br i1 %v14_15488, label %.thread8, label %bb98

bb98:                                             ; preds = %.thread6
  %v3_1548c = sub i32 %v1_1548c, %v15_15480
  store i32 %v3_1548c, i32* %r6.global-to-local, align 4
  store i32 %v7_15488, i32* %r5.global-to-local, align 4
  %v5_15494 = udiv i32 %v0_154d4, 4
  %v6_15494 = or i32 %v1_15494, %v5_15494
  store i32 %v6_15494, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %.thread6, %bb98
  %v1_154b0 = phi i32 [ %v1_154b057, %.thread6 ], [ %v6_15494, %bb98 ]
  %v1_1545c33 = phi i32 [ %v1_1545c34, %.thread6 ], [ %v6_15494, %bb98 ]
  %v1_1547844 = phi i32 [ %v1_1547845, %.thread6 ], [ %v6_15494, %bb98 ]
  %v1_1549453 = phi i32 [ %v1_15494, %.thread6 ], [ %v6_15494, %bb98 ]
  %v0_154a4 = phi i32 [ %v0_15488, %.thread6 ], [ %v7_15488, %bb98 ]
  %v1_154a8 = phi i32 [ %v1_1548c, %.thread6 ], [ %v3_1548c, %bb98 ]
  %v1_15498 = urem i32 %v3_1547c, 2
  %v2_15498 = icmp ne i32 %v1_15498, 0
  %v3_15498 = udiv i32 %v5_154cc17, 8
  %v3_1549c = zext i1 %v2_15498 to i32
  %v6_1549c = and i64 %v14_15480, 4294967295
  %v7_1549c = sub i32 33, %v15_15480
  %v8_1549c = zext i32 %v7_1549c to i64
  %v9_1549c = shl i64 %v6_1549c, %v8_1549c
  %v10_1549c = sub i32 32, %v15_15480
  %v11_1549c = shl i32 %v3_1549c, %v10_1549c
  %v12_1549c = zext i32 %v11_1549c to i64
  %v14_1549c = or i64 %v12_1549c, %v9_1549c
  %v15_1549c = trunc i64 %v14_1549c to i32
  %v3_154a0 = icmp uge i32 %v1_154a8, %v15_1549c
  %v3_154a4 = icmp eq i1 %v3_154a0, false
  %v4_154a4 = sub i32 %v0_154a4, %v3_15498
  %v6_154a4 = sext i1 %v3_154a4 to i32
  %v7_154a4 = add i32 %v6_154a4, %v4_154a4
  %v13_154a4 = icmp ult i32 %v0_154a4, %v3_15498
  %v14_154a4 = or i1 %v13_154a4, %v3_154a4
  br i1 %v14_154a4, label %.thread10, label %bb100

bb100:                                            ; preds = %.thread8
  %v3_154a8 = sub i32 %v1_154a8, %v15_1549c
  store i32 %v3_154a8, i32* %r6.global-to-local, align 4
  store i32 %v7_154a4, i32* %r5.global-to-local, align 4
  %v5_154b0 = udiv i32 %v0_154d4, 8
  %v6_154b0 = or i32 %v1_154b0, %v5_154b0
  store i32 %v6_154b0, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread8, %bb100
  %v1_154c0 = phi i32 [ %v1_154a8, %.thread8 ], [ %v3_154a8, %bb100 ]
  %v0_154bc = phi i32 [ %v0_154a4, %.thread8 ], [ %v7_154a4, %bb100 ]
  %v2_154f8 = phi i32 [ %v1_154b0, %.thread8 ], [ %v6_154b0, %bb100 ]
  %v1_1545c32 = phi i32 [ %v1_1545c33, %.thread8 ], [ %v6_154b0, %bb100 ]
  %v1_1547843 = phi i32 [ %v1_1547844, %.thread8 ], [ %v6_154b0, %bb100 ]
  %v1_1549452 = phi i32 [ %v1_1549453, %.thread8 ], [ %v6_154b0, %bb100 ]
  %v2_154b4 = or i32 %v0_154bc, %v1_154c0
  %v4_154b4 = icmp eq i32 %v2_154b4, 0
  br i1 %v4_154b4, label %dec_label_pc_154f4, label %dec_label_pc_154bc

dec_label_pc_154bc:                               ; preds = %.thread10
  %v3_154bc = mul i32 %v0_154bc, 16
  %v4_154c0 = udiv i32 %v1_154c0, 268435456
  %v5_154c0 = or i32 %v3_154bc, %v4_154c0
  store i32 %v5_154c0, i32* %r5.global-to-local, align 4
  %v3_154c4 = mul i32 %v1_154c0, 16
  store i32 %v3_154c4, i32* %r6.global-to-local, align 4
  %v3_154c8 = mul nuw i32 %v3_15498, 8
  %v4_154cc = udiv i32 %v15_1549c, 536870912
  %v5_154cc = or i32 %v4_154cc, %v3_154c8
  %v3_154d0 = mul i32 %v15_1549c, 8
  %v3_154d4 = udiv i32 %v0_154d4, 16
  store i32 %v3_154d4, i32* %ip.global-to-local, align 4
  %tmp = icmp ult i32 %v0_154d4, 16
  br i1 %tmp, label %dec_label_pc_154dc, label %dec_label_pc_1544c

dec_label_pc_154dc:                               ; preds = %dec_label_pc_154bc
  %v1_154dc = and i32 %v1_154f8.ph, 1048576
  %v2_154dc = icmp eq i32 %v1_154dc, 0
  br i1 %v2_154dc, label %dec_label_pc_154e4, label %.thread11.loopexit

dec_label_pc_154e4:                               ; preds = %dec_label_pc_154dc
  %v2_154e4 = or i32 %v2_154f8, %v1_154f8.ph
  store i32 %v2_154e4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1544c.outer

dec_label_pc_154f4:                               ; preds = %.thread10
  store i32 %v15_1549c, i32* %r2.global-to-local, align 4
  store i32 %v3_15498, i32* %r3.global-to-local, align 4
  %v1_154f4 = and i32 %v1_154f8.ph, 1048576
  %v2_154f4 = icmp eq i32 %v1_154f4, 0
  br i1 %v2_154f4, label %bb101, label %.thread11

bb101:                                            ; preds = %dec_label_pc_154f4
  %v3_154f8 = or i32 %v2_154f8, %v1_154f8.ph
  store i32 %v3_154f8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11.loopexit:                               ; preds = %dec_label_pc_154dc
  store i32 %v3_154d0, i32* %r2.global-to-local, align 4
  store i32 %v5_154cc, i32* %r3.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %.thread11.loopexit, %dec_label_pc_154f4, %bb101
  %v1_15500 = add nsw i32 %v4_15420, 515
  store i32 %v1_15500, i32* %ip.global-to-local, align 4
  %v2_15500 = icmp ugt i32 %v1_15424, 252
  %v7_15500 = icmp eq i32 %v1_15424, 253
  %v2_15504 = xor i1 %v7_15500, true
  %v3_15504 = and i1 %v2_15500, %v2_15504
  br i1 %v3_15504, label %bb102, label %bb103

bb102:                                            ; preds = %.thread11
  %v6_15504 = icmp ugt i32 %v1_15500, 1791
  %v11_15504 = icmp eq i32 %v1_15500, 1792
  br label %bb103

bb103:                                            ; preds = %.thread11, %bb102
  %v1_15508 = phi i1 [ %v7_15500, %.thread11 ], [ %v11_15504, %bb102 ]
  %v0_15508 = phi i1 [ %v2_15500, %.thread11 ], [ %v6_15504, %bb102 ]
  %v2_15508 = xor i1 %v1_15508, true
  %v3_15508 = and i1 %v0_15508, %v2_15508
  call void @__pseudo_cond_branch(i1 %v3_15508, i32 ptrtoint (i32* @global_var_1521c.449 to i32))
  %v0_1550c = load i32, i32* %r5.global-to-local, align 4
  %v1_1550c = load i32, i32* %r3.global-to-local, align 4
  %v2_1550c = sub i32 %v0_1550c, %v1_1550c
  store i32 %v2_1550c, i32* %ip.global-to-local, align 4
  %v3_1550c = icmp uge i32 %v0_1550c, %v1_1550c
  %v9_1550c = icmp eq i32 %v0_1550c, %v1_1550c
  br i1 %v9_1550c, label %bb104, label %.thread12

bb104:                                            ; preds = %bb103
  %v1_15510 = load i32, i32* %r6.global-to-local, align 4
  %v2_15510 = load i32, i32* %r2.global-to-local, align 4
  %v3_15510 = sub i32 %v1_15510, %v2_15510
  store i32 %v3_15510, i32* %ip.global-to-local, align 4
  %v4_15510 = icmp uge i32 %v1_15510, %v2_15510
  %v10_15510 = icmp eq i32 %v1_15510, %v2_15510
  br i1 %v10_15510, label %bb105, label %.thread12

bb105:                                            ; preds = %bb104
  %v1_15514 = load i32, i32* %r0.global-to-local, align 4
  %v2_15514 = urem i32 %v1_15514, 2
  %v3_15514 = icmp ne i32 %v2_15514, 0
  %v4_15514 = udiv i32 %v1_15514, 2
  store i32 %v4_15514, i32* %ip.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb103, %bb104, %bb105
  %v1_15518 = phi i1 [ %v3_1550c, %bb103 ], [ %v4_15510, %bb104 ], [ %v3_15514, %bb105 ]
  %v0_15518 = load i32, i32* %r0.global-to-local, align 4
  %v2_15518 = zext i1 %v1_15518 to i32
  %v3_15518 = add i32 %v2_15518, %v0_15518
  store i32 %v3_15518, i32* %r0.global-to-local, align 4
  %v0_1551c = load i32, i32* %r1.global-to-local, align 4
  %v1_1551c = load i32, i32* %r4.global-to-local, align 4
  %v2_1551c = and i32 %v1_1551c, 4096
  %v3_1551c = icmp ne i32 %v2_1551c, 0
  %v4_1551c = mul i32 %v1_1551c, 1048576
  %v6_1551c = add i32 %v4_1551c, %v0_1551c
  %v7_1551c = zext i1 %v3_1551c to i32
  %v8_1551c = add i32 %v7_1551c, %v6_1551c
  store i32 %v8_1551c, i32* %r1.global-to-local, align 4
  %v2_15520 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15520, i32* %r4.global-to-local, align 4
  store i32 %v6_153c0, i32* %r5.global-to-local, align 4
  store i32 %v9_153c0, i32* %r6.global-to-local, align 4
  ret i32 %v3_15518

dec_label_pc_15528:                               ; preds = %dec_label_pc_153e0
  %v1_15528 = and i32 %v2_153e4, -2147483648
  %v4_1552c = urem i32 %v1_153cc, 1048576
  %v5_1552c = or i32 %v1_15528, %v4_1552c
  store i32 %v5_1552c, i32* %r1.global-to-local, align 4
  %v6_15530 = add nsw i32 %v2_153e0, 1023
  store i32 %v6_15530, i32* %r4.global-to-local, align 4
  %v8_15530 = sub nsw i32 0, %v2_153e0
  %v9_15530 = and i32 %v6_15530, %v8_15530
  %v11_15530 = icmp slt i32 %v2_153e0, -1023
  %v12_15530 = icmp eq i32 %v6_15530, 0
  %v7_15534 = icmp sgt i32 %v2_153e0, -1023
  br i1 %v7_15534, label %bb106, label %bb107

bb106:                                            ; preds = %dec_label_pc_15528
  %v10_15534 = sub nsw i32 1024, %v2_153e0
  store i32 %v10_15534, i32* %r5.global-to-local, align 4
  %v14_15534 = and i32 %v10_15534, %v6_15530
  %v16_15534 = icmp slt i32 %v10_15534, 0
  %v17_15534 = icmp eq i32 %v6_15530, 2047
  br label %bb107

bb107:                                            ; preds = %dec_label_pc_15528, %bb106
  %v3_15540.in = phi i32 [ %v9_15530, %dec_label_pc_15528 ], [ %v14_15534, %bb106 ]
  %v2_15540 = phi i1 [ %v11_15530, %dec_label_pc_15528 ], [ %v16_15534, %bb106 ]
  %v1_15540 = phi i1 [ %v12_15530, %dec_label_pc_15528 ], [ %v17_15534, %bb106 ]
  %v3_15540 = icmp slt i32 %v3_15540.in, 0
  %v3_15538 = xor i1 %v3_15540, %v2_15540
  %v4_15538 = or i1 %v1_15540, %v3_15538
  br i1 %v4_15538, label %.thread, label %bb108

bb108:                                            ; preds = %bb107
  %v9_1553884 = mul i32 %v6_15530, 1048576
  %v10_1553885 = or i32 %v9_1553884, %v5_1552c
  store i32 %v10_1553885, i32* %r1.global-to-local, align 4
  store i32 %v3_153c0, i32* %r4.global-to-local, align 4
  store i32 %v6_153c0, i32* %r5.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %bb107, %bb108
  %v0_15540 = phi i32 [ %v12_153c0, %bb108 ], [ %v1_15528, %bb107 ]
  %v6_15540 = xor i1 %v4_15538, true
  call void @__pseudo_cond_branch(i1 %v6_15540, i32 %v0_15540)
  %v0_15544 = load i32, i32* %r1.global-to-local, align 4
  %v1_15544 = or i32 %v0_15544, 1048576
  store i32 %v1_15544, i32* @r1, align 4
  %v0_1554c = load i32, i32* %r4.global-to-local, align 4
  %v1_1554c = add i32 %v0_1554c, -1
  store i32 %v1_1554c, i32* @r4, align 4
  %v3_1554c = sub i32 0, %v0_1554c
  %v4_1554c = and i32 %v0_1554c, %v3_1554c
  %v5_1554c = icmp slt i32 %v4_1554c, 0
  store i1 %v5_1554c, i1* @cpsr_v, align 1
  %v6_1554c = icmp slt i32 %v1_1554c, 0
  store i1 %v6_1554c, i1* @cpsr_n, align 1
  %v7_1554c = icmp eq i32 %v0_1554c, 1
  store i1 %v7_1554c, i1* @cpsr_z, align 1
  %v0_15550 = call i32 @function_1521c()
  store i32 %v0_15550, i32* @r0, align 4
  %v0_15558 = call i32 @function_1521c()
  store i32 %v0_15558, i32* @r0, align 4
  %v0_1555c.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_15560.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1555c

dec_label_pc_1555c:                               ; preds = %.thread1, %.thread2, %bb91, %.thread
  %v4_1555c.pre-phi = phi i32 [ %v5_153d0, %.thread1 ], [ %.pre145.pre-phi, %.thread2 ], [ %v5_153d0, %bb91 ], [ %v5_153d0, %.thread ]
  %v0_15560 = phi i32 [ %v5_153cc, %.thread1 ], [ %v5_153cc, %.thread2 ], [ %v5_153cc, %bb91 ], [ %v0_15560.pre, %.thread ]
  %v2_15564 = phi i32 [ 2047, %.thread1 ], [ 2047, %.thread2 ], [ 2047, %bb91 ], [ %v0_1555c.pre, %.thread ]
  %v5_1555c = and i32 %v2_15564, %v4_1555c.pre-phi
  store i32 %v5_1555c, i32* @r5, align 4
  %v4_15560 = icmp eq i32 %v2_15564, %v0_15560
  br i1 %v4_15560, label %bb109, label %bb110

bb109:                                            ; preds = %dec_label_pc_1555c
  %v5_15564 = icmp eq i32 %v5_1555c, %v2_15564
  br label %bb110

bb110:                                            ; preds = %dec_label_pc_1555c, %bb109
  %v0_15568 = phi i1 [ false, %dec_label_pc_1555c ], [ %v5_15564, %bb109 ]
  call void @__pseudo_cond_branch(i1 %v0_15568, i32 ptrtoint (i32* @global_var_153b0.451 to i32))
  %v0_1556c = load i32, i32* @r4, align 4
  %v1_1556c = load i32, i32* %ip.global-to-local, align 4
  %v4_1556c = icmp eq i32 %v1_1556c, %v0_1556c
  br i1 %v4_1556c, label %dec_label_pc_15574, label %dec_label_pc_15590

dec_label_pc_15574:                               ; preds = %bb110
  %v0_15574 = load i32, i32* @r0, align 4
  %v1_15574 = load i32, i32* @r1, align 4
  %v4_15574 = mul i32 %v1_15574, 4096
  %v5_15574 = or i32 %v4_15574, %v0_15574
  store i32 %v5_15574, i32* %r4.global-to-local, align 4
  %v1_15578 = icmp ne i32 %v5_15574, 0
  call void @__pseudo_cond_branch(i1 %v1_15578, i32 ptrtoint (i32* @global_var_153b0.451 to i32))
  %v0_1557c = load i32, i32* @r5, align 4
  %v1_1557c = load i32, i32* %ip.global-to-local, align 4
  %v1_15580 = icmp ne i32 %v1_1557c, %v0_1557c
  call void @__pseudo_cond_branch(i1 %v1_15580, i32 ptrtoint (i32* @global_var_15394.452 to i32))
  store i32 %arg3, i32* @r0, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v2_1558c = call i32 @function_153b0(i32 %arg3, i32 %arg4)
  store i32 %v2_1558c, i32* @r0, align 4
  %v1_15590.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_15590

dec_label_pc_15590:                               ; preds = %bb110, %dec_label_pc_15574
  %v1_15590 = phi i32 [ %v1_1556c, %bb110 ], [ %v1_15590.pre, %dec_label_pc_15574 ]
  %v0_15590 = load i32, i32* @r5, align 4
  %v4_15590 = icmp eq i32 %v0_15590, %v1_15590
  br i1 %v4_15590, label %dec_label_pc_15598, label %dec_label_pc_15590.dec_label_pc_155ac_crit_edge

dec_label_pc_15590.dec_label_pc_155ac_crit_edge:  ; preds = %dec_label_pc_15590
  %v0_155ac.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_155ac

dec_label_pc_15598:                               ; preds = %dec_label_pc_15590
  %v4_15598 = mul i32 %arg4, 4096
  %v5_15598 = or i32 %v4_15598, %arg3
  store i32 %v5_15598, i32* %r5.global-to-local, align 4
  %v7_15598 = icmp eq i32 %v5_15598, 0
  call void @__pseudo_cond_branch(i1 %v7_15598, i32 ptrtoint (i32* @global_var_15344.453 to i32))
  store i32 %arg3, i32* @r0, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v2_155a8 = call i32 @function_153b0(i32 %arg3, i32 %arg4)
  store i32 %v2_155a8, i32* @r0, align 4
  br label %dec_label_pc_155ac

dec_label_pc_155ac:                               ; preds = %dec_label_pc_15590.dec_label_pc_155ac_crit_edge, %dec_label_pc_15598
  %v0_155ac = phi i32 [ %v0_155ac.pre, %dec_label_pc_15590.dec_label_pc_155ac_crit_edge ], [ %v2_155a8, %dec_label_pc_15598 ]
  %v1_155ac = load i32, i32* @r1, align 4
  %v3_155ac = mul i32 %v1_155ac, 2
  %v4_155ac = or i32 %v3_155ac, %v0_155ac
  store i32 %v4_155ac, i32* %r6.global-to-local, align 4
  %v6_155ac = icmp eq i32 %v4_155ac, 0
  br i1 %v6_155ac, label %dec_label_pc_155ac._crit_edge, label %bb111

dec_label_pc_155ac._crit_edge:                    ; preds = %dec_label_pc_155ac
  %.pre = mul i32 %arg4, 2
  %.pre80 = or i32 %.pre, %arg3
  br label %bb112

bb111:                                            ; preds = %dec_label_pc_155ac
  %v4_155b0 = mul i32 %arg4, 2
  %v5_155b0 = or i32 %v4_155b0, %arg3
  store i32 %v5_155b0, i32* %r6.global-to-local, align 4
  %phitmp = icmp ne i32 %v5_155b0, 0
  br label %bb112

bb112:                                            ; preds = %dec_label_pc_155ac._crit_edge, %bb111
  %v4_155c0.pre-phi = phi i32 [ %.pre80, %dec_label_pc_155ac._crit_edge ], [ %v5_155b0, %bb111 ]
  %v0_155b4 = phi i1 [ false, %dec_label_pc_155ac._crit_edge ], [ %phitmp, %bb111 ]
  call void @__pseudo_cond_branch(i1 %v0_155b4, i32 ptrtoint (i32* @global_var_152dc.454 to i32))
  %v0_155b8 = load i32, i32* @r0, align 4
  %v1_155b8 = load i32, i32* @r1, align 4
  %v3_155b8 = mul i32 %v1_155b8, 2
  %v4_155b8 = or i32 %v3_155b8, %v0_155b8
  store i32 %v4_155b8, i32* %r4.global-to-local, align 4
  %v1_155bc = icmp ne i32 %v4_155b8, 0
  call void @__pseudo_cond_branch(i1 %v1_155bc, i32 ptrtoint (i32* @global_var_15394.452 to i32))
  store i32 %v4_155c0.pre-phi, i32* %r5.global-to-local, align 4
  %v1_155c4 = icmp ne i32 %v4_155c0.pre-phi, 0
  call void @__pseudo_cond_branch(i1 %v1_155c4, i32 ptrtoint (i32* @global_var_15344.453 to i32))
  %v0_155c8 = load i32, i32* @r0, align 4
  %v1_155c8 = load i32, i32* @r1, align 4
  %v2_155c8 = call i32 @function_153b0(i32 %v0_155c8, i32 %v1_155c8)
  store i32 %v2_155c8, i32* %r0.global-to-local, align 4
  ret i32 %v2_155c8

; uselistorder directives
  uselistorder i32 %v5_155b0, { 1, 0, 2 }
  uselistorder i32 %v1_1556c, { 1, 0 }
  uselistorder i32 %v1_1554c, { 1, 0 }
  uselistorder i32 %v0_1554c, { 3, 1, 0, 2 }
  uselistorder i32 %v10_15534, { 2, 0, 1 }
  uselistorder i32 %v6_15530, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v1_15528, { 1, 0 }
  uselistorder i32 %v2_15510, { 1, 0, 2 }
  uselistorder i32 %v1_15510, { 1, 0, 2 }
  uselistorder i32 %v1_1550c, { 1, 0, 2 }
  uselistorder i32 %v0_1550c, { 1, 0, 2 }
  uselistorder i1 %v7_15500, { 1, 0 }
  uselistorder i32 %v2_154e4, { 1, 0 }
  uselistorder i32 %v3_154d0, { 2, 1, 0 }
  uselistorder i32 %v3_154c4, { 0, 2, 1 }
  uselistorder i32 %v5_154c0, { 2, 0, 1 }
  uselistorder i32 %v6_154b0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_1549c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v3_15498, { 3, 0, 2, 1 }
  uselistorder i32 %v0_154a4, { 0, 2, 1 }
  uselistorder i32 %v1_154b0, { 1, 0 }
  uselistorder i32 %v6_15494, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_15480, { 1, 2, 0, 3 }
  uselistorder i32 %v3_1547c, { 0, 2, 1 }
  uselistorder i32 %v0_15488, { 0, 2, 1 }
  uselistorder i32 %v1_15494, { 1, 0 }
  uselistorder i32 %v6_15478, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_15464, { 1, 2, 0, 3 }
  uselistorder i32 %v0_1546c, { 0, 2, 1 }
  uselistorder i32 %v1_15478, { 1, 0 }
  uselistorder i32 %v3_1545c, { 2, 1, 0, 3, 4 }
  uselistorder i1 %v3_15450, { 1, 2, 0 }
  uselistorder i32 %v3_154d013, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v5_154cc17, { 0, 1, 2, 3, 5, 6, 4 }
  uselistorder i32 %v0_15450, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1545c, { 1, 0 }
  uselistorder i32 %storemerge133, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_154f8.ph, { 1, 0, 3, 2 }
  uselistorder i32 %v3_1543c, { 1, 0 }
  uselistorder i32 %v0_15440, { 1, 0 }
  uselistorder i32 %v3_1542c, { 1, 0 }
  uselistorder i1 %v1_15420, { 1, 0 }
  uselistorder i32 %v3_15410, { 2, 3, 1, 0 }
  uselistorder i32 %v5_1540c, { 3, 2, 1, 0 }
  uselistorder i32 %v3_15404, { 2, 1, 0 }
  uselistorder i32 %v5_15400, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_153e0, { 3, 1, 2, 0, 4, 7, 6, 5, 8 }
  uselistorder i32 %v6_153d0, { 2, 3, 1, 0 }
  uselistorder i32 %v5_153d0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v5_153cc, { 5, 4, 3, 2, 6, 1, 0 }
  uselistorder i32 %v1_153cc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_153c0, { 1, 0 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 1, 4, 5, 6, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 1, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 9, 10, 2, 3, 6, 4, 5, 7, 8 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 7, 8, 2, 3, 4, 5, 6, 9 }
  uselistorder i32* %ip.global-to-local, { 9, 7, 8, 6, 0, 1, 2, 3, 4, 5, 10 }
  uselistorder i32 (i32, i32)* @function_153b0, { 2, 1, 0 }
  uselistorder i32 ()* @function_1521c, { 1, 0 }
  uselistorder i32 1024, { 2, 0, 4, 5, 3, 6, 1, 7, 8, 9 }
  uselistorder i32 536870912, { 2, 3, 0, 4, 1 }
  uselistorder i32 16, { 1, 9, 7, 8, 10, 11, 25, 12, 13, 2, 14, 15, 73, 74, 38, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 33, 86, 28, 108, 109, 116, 118, 16, 119, 17, 87, 88, 89, 90, 91, 92, 72, 122, 123, 39, 124, 126, 143, 144, 145, 30, 29, 40, 146, 18, 147, 148, 131, 132, 133, 98, 99, 100, 101, 120, 121, 93, 94, 95, 96, 127, 128, 129, 130, 41, 117, 3, 42, 149, 150, 151, 152, 141, 34, 35, 36, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 139, 140, 134, 137, 138, 5, 4, 31, 43, 44, 45, 46, 110, 47, 111, 135, 136, 97, 48, 49, 142, 19, 50, 51, 112, 113, 52, 53, 114, 115, 102, 103, 54, 104, 55, 56, 57, 32, 125, 37, 105, 153, 106, 58, 59, 60, 61, 62, 64, 65, 155, 156, 0, 157, 158, 63, 66, 27, 20, 26, 21, 22, 6, 23, 24, 107, 67, 154, 68, 69, 70, 71 }
  uselistorder i32 8, { 0, 1, 2, 3, 4, 5, 60, 61, 33, 6, 7, 22, 8, 29, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 9, 40, 76, 39, 77, 78, 62, 79, 80, 112, 113, 120, 122, 123, 124, 125, 10, 126, 81, 82, 63, 83, 84, 85, 86, 30, 87, 52, 53, 88, 89, 90, 41, 91, 92, 93, 94, 25, 26, 95, 96, 97, 54, 128, 129, 130, 131, 132, 34, 98, 48, 49, 64, 141, 142, 143, 144, 145, 146, 147, 100, 101, 102, 103, 127, 133, 134, 135, 136, 137, 138, 139, 140, 121, 159, 160, 213, 154, 214, 42, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 148, 149, 150, 151, 152, 153, 99, 155, 31, 156, 157, 158, 114, 115, 116, 117, 118, 119, 104, 105, 106, 107, 50, 232, 233, 35, 108, 11, 162, 161, 109, 110, 32, 164, 165, 166, 167, 168, 169, 170, 171, 12, 55, 172, 173, 174, 175, 176, 177, 178, 179, 13, 180, 181, 182, 183, 14, 184, 185, 15, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 203, 196, 197, 198, 199, 56, 24, 200, 201, 202, 57, 58, 16, 204, 205, 206, 207, 209, 210, 59, 17, 211, 18, 208, 45, 46, 43, 44, 27, 28, 37, 38, 47, 234, 51, 65, 36, 19, 20, 23, 21, 111, 163, 212 }
  uselistorder i32 4, { 5, 6, 146, 210, 211, 147, 7, 8, 71, 152, 153, 154, 9, 155, 10, 156, 157, 158, 159, 160, 161, 162, 163, 164, 70, 165, 166, 167, 168, 169, 170, 212, 213, 214, 215, 216, 58, 217, 218, 226, 228, 229, 83, 230, 231, 232, 69, 233, 171, 11, 12, 100, 13, 101, 102, 103, 104, 172, 173, 14, 174, 105, 175, 176, 177, 85, 178, 179, 84, 106, 180, 181, 182, 183, 184, 185, 59, 107, 186, 188, 108, 109, 187, 148, 236, 110, 237, 238, 239, 240, 241, 242, 15, 243, 111, 86, 244, 112, 0, 1, 113, 247, 269, 270, 88, 87, 271, 114, 115, 116, 117, 272, 273, 90, 274, 89, 275, 16, 17, 2, 260, 261, 262, 194, 195, 234, 235, 189, 190, 191, 192, 193, 248, 249, 250, 251, 252, 253, 254, 255, 256, 18, 257, 258, 259, 227, 19, 276, 20, 277, 328, 264, 219, 21, 22, 208, 23, 24, 82, 77, 78, 25, 339, 79, 340, 74, 26, 27, 80, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 28, 358, 359, 360, 361, 362, 363, 73, 364, 365, 366, 367, 368, 369, 29, 30, 81, 370, 263, 91, 265, 31, 266, 92, 267, 268, 245, 246, 118, 220, 221, 222, 223, 224, 225, 32, 196, 197, 198, 199, 33, 200, 371, 119, 93, 120, 372, 34, 373, 121, 150, 151, 122, 35, 201, 123, 202, 124, 75, 203, 282, 125, 283, 284, 278, 279, 280, 281, 126, 127, 204, 128, 129, 205, 36, 206, 207, 72, 76, 287, 288, 289, 290, 291, 292, 130, 131, 37, 293, 294, 295, 296, 297, 298, 299, 300, 132, 285, 286, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 133, 134, 135, 315, 316, 319, 322, 317, 318, 94, 136, 320, 60, 321, 323, 324, 325, 327, 137, 39, 38, 326, 138, 139, 140, 338, 40, 41, 141, 61, 42, 43, 329, 330, 149, 44, 45, 62, 63, 64, 46, 47, 48, 65, 49, 50, 51, 52, 142, 53, 209, 54, 66, 55, 56, 57, 96, 95, 97, 67, 143, 98, 144, 68, 145, 331, 332, 333, 334, 335, 336, 3, 4, 337, 99 }
  uselistorder i32 32, { 71, 72, 73, 74, 21, 22, 29, 69, 70, 24, 25, 75, 23, 30, 76, 77, 78, 79, 28, 80, 81, 37, 16, 82, 83, 100, 102, 103, 84, 85, 15, 86, 0, 38, 87, 88, 89, 90, 91, 92, 17, 114, 39, 93, 115, 104, 105, 94, 95, 96, 97, 40, 108, 109, 41, 101, 117, 31, 26, 112, 110, 111, 98, 99, 113, 42, 106, 107, 34, 33, 32, 44, 48, 45, 49, 46, 50, 47, 51, 59, 60, 58, 61, 62, 63, 64, 65, 66, 53, 54, 1, 55, 2, 56, 4, 3, 52, 57, 43, 67, 116, 6, 5, 8, 7, 10, 9, 27, 12, 11, 18, 19, 14, 13, 20, 35, 36, 68 }
  uselistorder i32 33, { 2, 3, 4, 1, 5, 6, 7, 0 }
  uselistorder i32 524288, { 1, 0 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i32 268435456, { 1, 2, 3, 0, 4, 5, 6, 7 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 256, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 87, 15, 88, 16, 89, 17, 90, 18, 19, 20, 21, 22, 23, 24, 82, 85, 25, 26, 27, 84, 95, 28, 29, 30, 31, 32, 92, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 83, 93, 91, 94, 62, 64, 63, 65, 81, 66, 67, 68, 0, 86, 1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }
  uselistorder i32 1048576, { 20, 0, 1, 2, 21, 22, 13, 3, 4, 5, 23, 6, 7, 24, 25, 16, 17, 8, 9, 26, 27, 28, 19, 29, 10, 14, 11, 18, 12, 30, 15, 31 }
  uselistorder i32 2047, { 5, 6, 7, 2, 0, 3, 8, 1, 4, 9 }
  uselistorder i32* @r6, { 29, 30, 31, 32, 104, 105, 4, 106, 107, 33, 34, 35, 36, 5, 37, 38, 39, 40, 41, 42, 43, 108, 109, 125, 126, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 6, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 1, 71, 7, 24, 56, 0, 57, 58, 72, 73, 74, 75, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 168, 169, 170, 171, 172, 173, 185, 186, 187, 199, 200, 201, 202, 9, 8, 76, 77, 78, 79, 80, 81, 203, 204, 10, 205, 206, 207, 208, 209, 210, 211, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 129, 130, 131, 132, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 110, 11, 111, 112, 12, 188, 189, 190, 13, 191, 192, 82, 83, 193, 194, 14, 195, 196, 197, 198, 158, 159, 160, 161, 162, 163, 164, 165, 166, 113, 114, 115, 116, 15, 16, 117, 118, 119, 120, 121, 122, 123, 124, 84, 85, 86, 87, 88, 89, 90, 91, 17, 18, 19, 268, 269, 270, 271, 272, 273, 2, 274, 275, 25, 20, 26, 21, 27, 265, 266, 267, 92, 93, 94, 226, 227, 228, 229, 95, 96, 97, 98, 99, 100, 230, 234, 235, 236, 237, 231, 232, 233, 238, 239, 240, 241, 242, 22, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 260, 254, 255, 256, 257, 259, 261, 101, 102, 3, 103, 262, 263, 264, 28 }
  uselistorder i32* @r5, { 47, 48, 49, 50, 51, 52, 53, 54, 55, 44, 45, 46, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 6, 78, 79, 184, 185, 186, 187, 188, 80, 0, 81, 82, 83, 84, 85, 86, 189, 190, 191, 192, 193, 194, 217, 223, 224, 225, 226, 87, 7, 88, 30, 89, 90, 91, 92, 93, 94, 95, 96, 98, 97, 99, 100, 8, 101, 102, 103, 104, 105, 106, 107, 27, 108, 109, 113, 4, 114, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 33, 34, 35, 110, 111, 112, 125, 126, 127, 128, 129, 130, 227, 228, 229, 230, 231, 232, 233, 234, 2, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 9, 258, 259, 260, 261, 262, 315, 270, 271, 272, 273, 274, 275, 276, 25, 277, 278, 279, 296, 332, 333, 10, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 11, 349, 348, 28, 350, 351, 352, 353, 354, 131, 132, 133, 134, 135, 136, 137, 355, 356, 357, 358, 359, 360, 365, 366, 361, 362, 363, 364, 316, 317, 318, 319, 142, 143, 144, 145, 146, 147, 148, 149, 150, 280, 281, 282, 12, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 218, 219, 220, 221, 222, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 320, 13, 321, 322, 323, 421, 422, 423, 195, 31, 196, 3, 197, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 302, 303, 29, 304, 310, 311, 312, 313, 314, 198, 199, 200, 201, 139, 138, 26, 140, 141, 324, 325, 326, 327, 328, 329, 14, 330, 331, 263, 264, 265, 266, 267, 15, 268, 269, 202, 18, 203, 204, 16, 205, 206, 207, 208, 209, 210, 17, 211, 212, 213, 214, 215, 216, 151, 19, 152, 153, 154, 155, 32, 156, 20, 157, 158, 159, 160, 161, 436, 21, 437, 438, 448, 36, 37, 38, 39, 40, 41, 42, 439, 440, 441, 442, 443, 162, 163, 164, 165, 166, 167, 168, 169, 170, 379, 380, 381, 171, 172, 173, 174, 22, 23, 444, 445, 446, 447, 175, 176, 177, 178, 386, 387, 391, 392, 393, 394, 395, 388, 389, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 5, 409, 410, 411, 412, 413, 24, 414, 415, 416, 417, 179, 180, 181, 182, 183, 382, 383, 384, 385, 418, 419, 420, 43 }
  uselistorder i32 %arg4, { 0, 1, 9, 8, 2, 11, 10, 3, 4, 7, 5, 6, 12 }
  uselistorder i32 %arg3, { 2, 3, 9, 8, 4, 7, 6, 0, 1, 5, 10 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %dec_label_pc_155ac, { 1, 0 }
  uselistorder label %dec_label_pc_15590, { 1, 0 }
  uselistorder label %bb110, { 1, 0 }
  uselistorder label %dec_label_pc_1555c, { 3, 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb107, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread11, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_1544c, { 1, 0 }
  uselistorder label %dec_label_pc_15434, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__gtdf2() local_unnamed_addr {
entry:
  store i32 -1, i32* @ip, align 4
  %v0_155d0 = call i32 @function_155e0()
  ret i32 %v0_155d0
}

define i32 @__ltdf2() local_unnamed_addr {
entry:
  store i32 1, i32* @ip, align 4
  %v0_155d8 = call i32 @function_155e0()
  ret i32 %v0_155d8

; uselistorder directives
  uselistorder i32 ()* @function_155e0, { 1, 0 }
}

define i32 @__cmpdf2() local_unnamed_addr {
entry:
  %v0_155dc = load i32, i32* @r0, align 4
  ret i32 %v0_155dc
}

define i32 @function_155e0() local_unnamed_addr {
dec_label_pc_155e0:
  %v0_155e0 = load i32, i32* @ip, align 4
  %v0_155e4 = load i32, i32* @r1, align 4
  %v2_155e4 = mul i32 %v0_155e4, 2
  %v2_155e4.off = add i32 %v2_155e4, 4194303
  %tmp = icmp ult i32 %v2_155e4.off, 2097152
  %v0_155ec = load i32, i32* @r3, align 4
  %v2_155ec = mul i32 %v0_155ec, 2
  br i1 %tmp, label %dec_label_pc_1563c, label %bb

bb:                                               ; preds = %dec_label_pc_155e0
  %v2_155ec.off = add i32 %v2_155ec, 4194303
  %tmp21 = icmp ult i32 %v2_155ec.off, 2097152
  br i1 %tmp21, label %dec_label_pc_15630, label %dec_label_pc_155f8

dec_label_pc_155f8:                               ; preds = %dec_label_pc_15644, %dec_label_pc_15650, %bb
  %v0_155f8 = load i32, i32* @r0, align 4
  %v4_155f8 = or i32 %v0_155f8, %v2_155e4
  %v6_155f8 = icmp eq i32 %v4_155f8, 0
  br i1 %v6_155f8, label %bb10, label %.thread

bb10:                                             ; preds = %dec_label_pc_155f8
  %v1_155fc = load i32, i32* @r2, align 4
  %v5_155fc = or i32 %v1_155fc, %v2_155ec
  %v7_155fc = icmp eq i32 %v5_155fc, 0
  br i1 %v7_155fc, label %.thread1, label %.thread

.thread:                                          ; preds = %dec_label_pc_155f8, %bb10
  %v5_15600 = icmp eq i32 %v0_155ec, %v0_155e4
  br i1 %v5_15600, label %.thread..thread1_crit_edge, label %.thread2

.thread..thread1_crit_edge:                       ; preds = %.thread
  %v2_15604.pre = load i32, i32* @r2, align 4
  br label %.thread1

.thread1:                                         ; preds = %.thread..thread1_crit_edge, %bb10
  %v2_15604 = phi i32 [ %v2_15604.pre, %.thread..thread1_crit_edge ], [ %v1_155fc, %bb10 ]
  %v5_15604 = icmp eq i32 %v2_15604, %v0_155f8
  br i1 %v5_15604, label %bb11, label %.thread2

bb11:                                             ; preds = %.thread1
  store i32 0, i32* @r0, align 4
  br label %.thread2

.thread2:                                         ; preds = %.thread, %.thread1, %bb11
  %v1_1560c = phi i1 [ false, %.thread ], [ false, %.thread1 ], [ true, %bb11 ]
  %v0_1560c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_1560c, i32 %v0_1560c)
  %v0_15610 = load i32, i32* @r0, align 4
  %v0_15614 = load i32, i32* @r1, align 4
  %v1_15614 = load i32, i32* @r3, align 4
  %v2_15614 = xor i32 %v1_15614, %v0_15614
  %v3_15614 = icmp slt i32 %v2_15614, 0
  br i1 %v3_15614, label %..thread3_crit_edge, label %bb12

bb12:                                             ; preds = %.thread2
  %v10_15618 = icmp eq i32 %v0_15614, %v1_15614
  br i1 %v10_15618, label %bb13, label %bb14

bb13:                                             ; preds = %bb12
  %v2_1561c = load i32, i32* @r2, align 4
  %v4_1561c = icmp ult i32 %v0_15610, %v2_1561c
  br i1 %v4_1561c, label %..thread3_crit_edge, label %bb15

bb14:                                             ; preds = %bb12
  %v4_15618 = icmp ult i32 %v0_15614, %v1_15614
  br i1 %v4_15618, label %..thread3_crit_edge, label %bb15

..thread3_crit_edge:                              ; preds = %bb13, %bb14, %.thread2
  %.pre8 = ashr i32 %v1_15614, 31
  br label %.thread3

bb15:                                             ; preds = %bb13, %bb14
  %v2_15620 = and i32 %v1_15614, 1073741824
  %v3_15620 = icmp eq i32 %v2_15620, 0
  %v4_15620 = ashr i32 %v1_15614, 31
  br i1 %v3_15620, label %.thread3, label %bb16

.thread3:                                         ; preds = %bb15, %..thread3_crit_edge
  %v4_15624.pre-phi = phi i32 [ %.pre8, %..thread3_crit_edge ], [ %v4_15620, %bb15 ]
  %v5_15624 = sub nsw i32 -1, %v4_15624.pre-phi
  br label %bb16

bb16:                                             ; preds = %bb15, %.thread3
  %v0_15628 = phi i32 [ %v4_15620, %bb15 ], [ %v5_15624, %.thread3 ]
  %v1_15628 = or i32 %v0_15628, 1
  ret i32 %v1_15628

dec_label_pc_15630:                               ; preds = %bb
  br label %dec_label_pc_15644

dec_label_pc_1563c:                               ; preds = %dec_label_pc_155e0
  %v0_1563c = load i32, i32* @r0, align 4
  %v4_1563c = mul i32 %v0_155e4, 4096
  %v5_1563c = or i32 %v0_1563c, %v4_1563c
  %v7_1563c = icmp eq i32 %v5_1563c, 0
  br i1 %v7_1563c, label %dec_label_pc_1563c.dec_label_pc_15644_crit_edge, label %dec_label_pc_15658

dec_label_pc_1563c.dec_label_pc_15644_crit_edge:  ; preds = %dec_label_pc_1563c
  %v2_155ec.off20 = add i32 %v2_155ec, 4194303
  %tmp22 = icmp ult i32 %v2_155ec.off20, 2097152
  br label %dec_label_pc_15644

dec_label_pc_15644:                               ; preds = %dec_label_pc_1563c.dec_label_pc_15644_crit_edge, %dec_label_pc_15630
  %v3_15648.pre-phi = phi i1 [ %tmp22, %dec_label_pc_1563c.dec_label_pc_15644_crit_edge ], [ true, %dec_label_pc_15630 ]
  br i1 %v3_15648.pre-phi, label %dec_label_pc_15650, label %dec_label_pc_155f8

dec_label_pc_15650:                               ; preds = %dec_label_pc_15644
  %v0_15650 = load i32, i32* @r2, align 4
  %v4_15650 = mul i32 %v0_155ec, 4096
  %v5_15650 = or i32 %v0_15650, %v4_15650
  %v7_15650 = icmp eq i32 %v5_15650, 0
  br i1 %v7_15650, label %dec_label_pc_155f8, label %dec_label_pc_15658

dec_label_pc_15658:                               ; preds = %dec_label_pc_1563c, %dec_label_pc_15650
  ret i32 %v0_155e0

; uselistorder directives
  uselistorder i32 %v4_15620, { 1, 0 }
  uselistorder i32 %v1_15614, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_15614, { 2, 1, 0 }
  uselistorder i32 %v1_155fc, { 1, 0 }
  uselistorder i32 %v2_155ec, { 0, 2, 1 }
  uselistorder i32 %v0_155ec, { 1, 0, 2 }
  uselistorder i32 %v2_155e4, { 1, 0 }
  uselistorder i32 %v0_155e4, { 1, 0, 2 }
  uselistorder i32 1073741824, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32 31, { 9, 4, 2, 5, 6, 10, 3, 18, 11, 1, 12, 13, 14, 15, 16, 7, 8, 0, 17 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 5, 6, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43, 37, 0, 44, 45, 46, 47, 55, 56, 57, 39, 41, 61, 53, 51, 54, 52, 38, 48, 49, 50, 42, 66, 71, 69, 70, 68, 62, 63, 1, 64, 65, 67, 58, 59, 40, 60, 2, 3, 4 }
  uselistorder i32* @r3, { 14, 15, 12, 13, 16, 17, 7, 18, 19, 20, 21, 44, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 45, 33, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 2, 76, 6, 40, 55, 56, 57, 42, 43, 54, 78, 79, 58, 93, 94, 3, 95, 96, 97, 4, 98, 99, 100, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 0, 119, 120, 121, 122, 59, 39, 60, 61, 62, 63, 64, 41, 123, 124, 125, 126, 129, 130, 131, 127, 52, 53, 81, 82, 88, 89, 90, 91, 92, 9, 10, 11, 135, 132, 133, 134, 1, 136, 137, 138, 128, 80, 83, 84, 85, 86, 8, 87 }
  uselistorder i32* @r1, { 29, 30, 11, 31, 32, 33, 34, 35, 14, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 25, 26, 15, 27, 28, 47, 1, 48, 49, 50, 51, 52, 53, 54, 10, 55, 56, 57, 58, 93, 16, 59, 94, 95, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 17, 96, 99, 18, 71, 72, 73, 19, 21, 74, 75, 76, 7, 77, 78, 79, 20, 80, 81, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 115, 123, 124, 125, 126, 129, 130, 131, 8, 82, 83, 132, 133, 134, 135, 136, 137, 138, 2, 116, 84, 86, 113, 114, 3, 139, 140, 141, 142, 118, 119, 120, 97, 90, 117, 121, 122, 98, 0, 85, 87, 23, 24, 148, 149, 150, 106, 107, 4, 5, 143, 144, 12, 127, 128, 9, 22, 6, 145, 146, 13, 88, 89, 91, 92, 147 }
  uselistorder i32* @ip, { 18, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0, 28, 55, 56, 30, 29, 4, 31, 32, 5, 33, 34, 35, 36, 57, 58, 59, 60, 61, 65, 66, 68, 37, 39, 38, 6, 41, 42, 43, 44, 45, 46, 47, 48, 40, 49, 50, 51, 52, 69, 70, 71, 72, 73, 74, 75, 83, 1, 91, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 109, 112, 8, 113, 9, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 54, 84, 85, 86, 87, 88, 89, 67, 131, 132, 133, 134, 95, 96, 62, 63, 12, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 10, 174, 175, 176, 177, 178, 179, 180, 181, 182, 92, 93, 2, 94, 64, 53, 97, 98, 99, 183, 76, 77, 3, 78, 79, 80, 81, 82, 136, 11, 137, 138, 13, 135, 140, 187, 184, 185, 186, 7, 188, 139, 14 }
  uselistorder label %dec_label_pc_15658, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %..thread3_crit_edge, { 1, 0, 2 }
  uselistorder label %.thread2, { 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_155f8, { 1, 0, 2 }
}

define i32 @__aeabi_cdrcmple() local_unnamed_addr {
entry:
  %v0_15660 = load i32, i32* @r0, align 4
  %v0_15664 = load i32, i32* @r2, align 4
  store i32 %v0_15664, i32* @r0, align 4
  store i32 %v0_15660, i32* @r2, align 4
  %v0_15678 = call i32 @__aeabi_cdcmple()
  ret i32 %v0_15678
}

define i32 @__aeabi_cdcmple() local_unnamed_addr {
entry:
  %v3_1567c = load i32, i32* @r0, align 4
  %v1_15680 = sext i32 %v3_1567c to i64
  %v2_15680 = bitcast i64 %v1_15680 to double
  %v3_15680 = load i32, i32* @r2, align 4
  %v4_15680 = sext i32 %v3_15680 to i64
  %v5_15680 = bitcast i64 %v4_15680 to double
  %v7_15680 = fcmp oeq double %v2_15680, %v5_15680
  store i1 true, i1* @cpsr_c, align 1
  %not.v6_15680 = fcmp ule double %v2_15680, %v5_15680
  %not.v7_15680 = xor i1 %v7_15680, true
  %v1_15684 = and i1 %not.v6_15680, %not.v7_15680
  store i1 %v7_15680, i1* @cpsr_z, align 1
  br i1 %v1_15684, label %bb, label %bb3

bb:                                               ; preds = %entry
  store i1 false, i1* @cpsr_c, align 1
  store i1 %v7_15680, i1* @cpsr_z, align 1
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  ret i32 %v3_1567c

; uselistorder directives
  uselistorder i1 %v7_15680, { 1, 2, 0 }
  uselistorder i32* @r2, { 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 11, 26, 27, 28, 67, 68, 10, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 72, 12, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 74, 75, 76, 77, 78, 83, 93, 94, 95, 96, 97, 98, 59, 99, 100, 101, 13, 62, 73, 60, 61, 107, 81, 82, 4, 71, 102, 103, 104, 84, 65, 122, 123, 124, 85, 86, 87, 88, 89, 90, 91, 92, 14, 69, 70, 125, 126, 127, 130, 131, 132, 133, 2, 145, 128, 79, 80, 5, 129, 108, 111, 112, 113, 6, 114, 115, 116, 7, 109, 110, 117, 8, 118, 66, 105, 134, 141, 142, 135, 136, 137, 138, 139, 140, 0, 1, 143, 9, 144, 63, 64, 106, 119, 120, 121 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__aeabi_dcmpeq(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v0_15698 = call i32 @__aeabi_cdcmple()
  %v0_1569c = load i1, i1* @cpsr_z, align 1
  %.v0_15698. = zext i1 %v0_1569c to i32
  ret i32 %.v0_15698.
}

define i32 @__aeabi_dcmplt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_156b0 = call i32 @__aeabi_cdcmple()
  %v0_156b4 = load i1, i1* @cpsr_c, align 1
  %tmp2 = zext i1 %v0_156b4 to i32
  %.v0_156b0. = xor i32 %tmp2, 1
  ret i32 %.v0_156b0.
}

define i32 @__aeabi_dcmple() local_unnamed_addr {
entry:
  %v0_156c8 = call i32 @__aeabi_cdcmple()
  %v0_156cc = load i1, i1* @cpsr_z, align 1
  %v1_156cc = load i1, i1* @cpsr_c, align 1
  %v2_156cc = xor i1 %v1_156cc, true
  %v3_156cc = or i1 %v0_156cc, %v2_156cc
  %.v0_156c8 = select i1 %v3_156cc, i32 1, i32 %v0_156c8
  %v2_156d0 = xor i1 %v0_156cc, true
  %v3_156d0 = and i1 %v1_156cc, %v2_156d0
  %..v0_156c8 = select i1 %v3_156d0, i32 0, i32 %.v0_156c8
  ret i32 %..v0_156c8

; uselistorder directives
  uselistorder i1 %v1_156cc, { 1, 0 }
  uselistorder i32 ()* @__aeabi_cdcmple, { 2, 1, 0, 3 }
}

define i32 @__aeabi_dcmpge(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_156dc = load i32, i32* @lr, align 4
  store i32 %v0_156dc, i32* %stack_var_-8, align 4
  %v0_156e0 = call i32 @__aeabi_cdrcmple()
  %v0_156e4 = load i1, i1* @cpsr_z, align 1
  %v1_156e4 = load i1, i1* @cpsr_c, align 1
  %v2_156e4 = xor i1 %v1_156e4, true
  %v3_156e4 = or i1 %v0_156e4, %v2_156e4
  %.v0_156e0 = select i1 %v3_156e4, i32 1, i32 %v0_156e0
  %v2_156e8 = xor i1 %v0_156e4, true
  %v3_156e8 = and i1 %v1_156e4, %v2_156e8
  %..v0_156e0 = select i1 %v3_156e8, i32 0, i32 %.v0_156e0
  %v2_156ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_156ec, i32* @lr, align 4
  ret i32 %..v0_156e0

; uselistorder directives
  uselistorder i1 %v1_156e4, { 1, 0 }
  uselistorder i1 true, { 2, 3, 4, 5, 0, 98, 1, 89, 6, 7, 8, 9, 10, 11, 81, 82, 90, 91, 83, 12, 13, 14, 84, 85, 86, 92, 15, 16, 17, 18, 95, 21, 22, 23, 24, 19, 20, 96, 25, 97, 26, 27, 28, 29, 30, 31, 32, 79, 33, 34, 35, 36, 80, 39, 38, 37, 100, 101, 102, 103, 104, 105, 106, 87, 107, 108, 109, 94, 110, 111, 112, 113, 88, 114, 115, 116, 117, 118, 119, 120, 40, 121, 99, 122, 41, 42, 43, 44, 45, 46, 93, 123, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78 }
  uselistorder i1* @cpsr_z, { 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 40, 15, 16, 17, 18, 19, 20, 21, 22, 36, 37, 38, 39, 23, 24, 25 }
  uselistorder i32* @lr, { 10, 11, 12, 13, 14, 5, 6, 7, 8, 9, 15, 0, 16, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 47, 48, 52, 53, 54, 58, 59, 60, 30, 31, 32, 33, 34, 35, 3, 4, 36, 37, 38, 39, 61, 62, 63, 64, 65, 68, 78, 79, 72, 80, 81, 82, 83, 84, 85, 86, 87, 40, 88, 89, 90, 98, 91, 92, 93, 94, 95, 96, 97, 99, 100, 69, 70, 71, 55, 56, 57, 45, 122, 123, 124, 125, 126, 127, 128, 129, 130, 73, 74, 75, 76, 77, 49, 50, 51, 41, 66, 67, 46, 42, 43, 101, 102, 131, 132, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 2, 115, 116, 118, 119, 117, 44, 120, 121 }
}

define i32 @__aeabi_dcmpgt() local_unnamed_addr {
entry:
  %v0_156f8 = call i32 @__aeabi_cdrcmple()
  %v0_156fc = load i1, i1* @cpsr_c, align 1
  %tmp2 = zext i1 %v0_156fc to i32
  %.v0_156f8. = xor i32 %tmp2, 1
  ret i32 %.v0_156f8.

; uselistorder directives
  uselistorder i32 1, {}
  uselistorder i1 false, { 37, 13, 14, 11, 15, 50, 51, 52, 53, 54, 55, 8, 9, 12, 56, 57, 58, 59, 10, 38, 35, 39, 40, 41, 42, 43, 3, 32, 2, 5, 60, 16, 6, 7, 17, 18, 36, 1, 30, 0, 21, 22, 23, 44, 19, 20, 45, 46, 47, 48, 49, 24, 27, 26, 25, 28, 29, 4, 34, 31, 33, 61, 62, 63, 64 }
  uselistorder i1* @cpsr_c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 ()* @__aeabi_cdrcmple, { 1, 0 }
}

define i32 @__fixunsdfsi(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_1570c = icmp slt i32 %arg2, 0
  %v2_1570c = mul i32 %arg2, 2
  br i1 %v1_1570c, label %dec_label_pc_15740, label %dec_label_pc_15714

dec_label_pc_15714:                               ; preds = %entry
  %v1_15714 = add i32 %v2_1570c, 2097152
  %v2_15714 = icmp ugt i32 %v2_1570c, -2097153
  br i1 %v2_15714, label %dec_label_pc_15748, label %dec_label_pc_1571c

dec_label_pc_1571c:                               ; preds = %dec_label_pc_15714
  %v6_15714 = icmp slt i32 %v1_15714, 0
  br i1 %v6_15714, label %dec_label_pc_15720, label %dec_label_pc_15740

dec_label_pc_15720:                               ; preds = %dec_label_pc_1571c
  %v4_15724 = sdiv i32 %v1_15714, 2097152
  %v5_15724 = sub nsw i32 -993, %v4_15724
  %v11_15724 = icmp slt i32 %v5_15724, 0
  br i1 %v11_15724, label %dec_label_pc_15750, label %dec_label_pc_1572c

dec_label_pc_1572c:                               ; preds = %dec_label_pc_15720
  %v3_1572c = mul i32 %arg2, 2048
  %v4_15734 = udiv i32 %arg1, 2097152
  %v1_15730 = or i32 %v4_15734, %v3_1572c
  %v5_15734 = or i32 %v1_15730, -2147483648
  %v6_15738 = lshr i32 %v5_15734, %v5_15724
  ret i32 %v6_15738

dec_label_pc_15740:                               ; preds = %dec_label_pc_1571c, %entry
  ret i32 0

dec_label_pc_15748:                               ; preds = %dec_label_pc_15714
  %v4_15748 = mul i32 %arg2, 4096
  %v5_15748 = or i32 %v4_15748, %arg1
  %v7_15748 = icmp eq i32 %v5_15748, 0
  br i1 %v7_15748, label %dec_label_pc_15750, label %dec_label_pc_15758

dec_label_pc_15750:                               ; preds = %dec_label_pc_15748, %dec_label_pc_15720
  ret i32 -1

dec_label_pc_15758:                               ; preds = %dec_label_pc_15748
  ret i32 0

; uselistorder directives
  uselistorder i32 -1, { 0, 32, 234, 154, 155, 35, 36, 33, 34, 156, 37, 1, 157, 158, 159, 160, 2, 161, 162, 3, 4, 163, 73, 235, 164, 236, 237, 74, 165, 238, 166, 71, 38, 167, 239, 5, 39, 168, 75, 240, 170, 241, 242, 72, 63, 64, 243, 244, 245, 246, 247, 134, 76, 248, 135, 6, 169, 65, 66, 171, 249, 250, 251, 172, 139, 140, 252, 173, 253, 254, 141, 77, 283, 142, 285, 78, 286, 129, 255, 174, 79, 143, 80, 256, 175, 176, 257, 258, 40, 259, 260, 67, 261, 177, 178, 128, 136, 130, 7, 179, 262, 180, 181, 41, 263, 266, 287, 81, 288, 289, 8, 82, 290, 291, 182, 183, 126, 184, 138, 83, 9, 185, 300, 68, 69, 301, 186, 131, 187, 132, 188, 10, 189, 137, 133, 302, 303, 53, 54, 55, 56, 58, 70, 11, 12, 61, 264, 13, 14, 15, 85, 89, 84, 86, 123, 124, 90, 88, 87, 144, 265, 91, 190, 191, 192, 193, 194, 294, 195, 267, 268, 269, 92, 270, 93, 298, 94, 271, 95, 273, 16, 196, 304, 305, 197, 42, 43, 44, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 198, 199, 17, 200, 127, 295, 297, 201, 96, 296, 202, 18, 45, 299, 292, 145, 284, 203, 20, 19, 204, 205, 21, 272, 206, 97, 336, 98, 337, 99, 309, 62, 310, 100, 274, 101, 338, 102, 278, 103, 311, 312, 22, 207, 208, 209, 313, 293, 147, 146, 104, 275, 60, 210, 105, 276, 211, 23, 212, 148, 314, 27, 213, 214, 26, 28, 315, 25, 215, 216, 46, 24, 217, 47, 48, 49, 50, 218, 219, 220, 57, 279, 280, 29, 106, 306, 107, 307, 108, 317, 109, 110, 316, 59, 51, 52, 221, 111, 308, 112, 319, 113, 277, 114, 340, 115, 320, 116, 339, 117, 281, 118, 318, 119, 120, 121, 282, 222, 223, 122, 149, 125, 150, 151, 152, 30, 224, 225, 226, 227, 228, 229, 230, 231, 31, 232, 233, 153 }
  uselistorder i32 4096, { 0, 1, 2, 3, 4, 18, 5, 6, 19, 7, 8, 9, 10, 20, 23, 15, 24, 22, 12, 11, 13, 25, 14, 16, 21, 17 }
  uselistorder i32 -2147483648, { 0, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 5, 16, 17, 3, 18, 19, 20, 21, 2 }
  uselistorder i32 2048, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 8 }
  uselistorder i32 2097152, { 8, 9, 15, 0, 1, 2, 10, 11, 3, 4, 5, 12, 13, 14, 6, 7 }
  uselistorder i32 2, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 141, 36, 37, 38, 131, 39, 40, 41, 42, 43, 142, 143, 144, 132, 44, 45, 93, 145, 91, 146, 147, 46, 47, 148, 149, 160, 161, 162, 164, 165, 166, 92, 94, 150, 151, 115, 48, 49, 50, 51, 52, 116, 152, 111, 110, 53, 153, 154, 155, 167, 54, 118, 168, 169, 170, 55, 119, 171, 172, 173, 117, 120, 176, 0, 179, 133, 134, 95, 121, 180, 122, 156, 56, 157, 181, 182, 183, 57, 96, 97, 112, 98, 113, 99, 174, 58, 59, 60, 175, 163, 184, 185, 186, 187, 61, 62, 135, 100, 101, 199, 200, 108, 201, 202, 102, 203, 204, 177, 136, 178, 137, 123, 124, 63, 140, 64, 103, 65, 66, 106, 158, 89, 67, 205, 107, 189, 68, 69, 190, 70, 71, 90, 72, 73, 74, 75, 109, 191, 192, 76, 77, 1, 138, 193, 78, 194, 188, 104, 79, 80, 139, 81, 82, 83, 84, 85, 125, 159, 126, 127, 128, 105, 129, 86, 87, 197, 114, 195, 88, 196, 198, 130 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_15764 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15764)
  %v31_1576c = load i32, i32* @r0, align 4
  ret i32 %v31_1576c

; uselistorder directives
  uselistorder i32* @r0, { 48, 124, 118, 119, 120, 121, 122, 123, 49, 24, 125, 86, 126, 5, 87, 127, 128, 85, 88, 129, 50, 25, 130, 131, 132, 133, 115, 51, 116, 117, 52, 53, 134, 135, 136, 137, 138, 139, 22, 140, 141, 54, 142, 143, 6, 209, 211, 93, 210, 2, 7, 144, 145, 82, 83, 146, 147, 148, 84, 149, 150, 151, 55, 152, 153, 154, 155, 56, 222, 221, 156, 157, 158, 65, 159, 160, 161, 8, 9, 162, 163, 10, 12, 0, 1, 164, 165, 11, 166, 167, 168, 58, 89, 169, 170, 171, 172, 173, 57, 174, 14, 175, 176, 4, 177, 178, 179, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 250, 251, 252, 253, 254, 255, 256, 257, 96, 258, 180, 259, 260, 261, 263, 262, 15, 59, 241, 186, 245, 187, 60, 61, 62, 238, 94, 239, 240, 95, 27, 264, 265, 266, 267, 268, 28, 16, 292, 17, 64, 18, 19, 213, 3, 214, 202, 203, 204, 244, 67, 243, 68, 242, 181, 182, 183, 184, 185, 246, 247, 248, 249, 69, 212, 215, 216, 217, 218, 219, 220, 70, 71, 188, 189, 190, 72, 73, 74, 75, 76, 193, 77, 293, 295, 296, 105, 106, 107, 108, 109, 110, 111, 112, 78, 79, 113, 114, 294, 234, 80, 269, 270, 271, 272, 191, 192, 277, 26, 97, 98, 278, 13, 279, 280, 281, 282, 283, 284, 285, 286, 33, 273, 63, 29, 20, 30, 66, 291, 287, 31, 32, 194, 195, 196, 197, 90, 91, 92, 198, 199, 200, 201, 99, 100, 101, 23, 21, 102, 205, 206, 207, 208, 274, 275, 276, 288, 289, 290, 103, 104, 34, 35, 36, 37, 38, 46, 47, 81, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder void (i32)* @__pseudo_branch, { 15, 16, 17, 18, 19, 20, 77, 78, 79, 51, 52, 53, 40, 41, 42, 91, 60, 61, 62, 63, 64, 65, 66, 67, 68, 54, 55, 56, 57, 58, 59, 69, 70, 37, 38, 39, 21, 71, 72, 73, 74, 75, 76, 43, 44, 45, 46, 47, 48, 49, 50, 22, 23, 24, 25, 26, 27, 96, 97, 98, 99, 100, 92, 83, 93, 94, 95, 0, 80, 81, 82, 28, 29, 30, 31, 32, 33, 34, 35, 36, 101, 102, 103, 84, 85, 86, 87, 88, 89, 104, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 90 }
  uselistorder i32 0, { 0, 524, 1, 525, 526, 468, 357, 358, 527, 528, 529, 530, 531, 532, 533, 3, 4, 5, 534, 535, 2, 536, 537, 469, 6, 538, 539, 29, 470, 540, 541, 542, 543, 544, 545, 546, 547, 87, 86, 177, 178, 179, 548, 549, 550, 7, 551, 552, 30, 553, 554, 555, 31, 32, 170, 556, 557, 558, 559, 33, 171, 362, 560, 561, 562, 563, 564, 565, 34, 566, 9, 8, 35, 471, 567, 473, 472, 568, 569, 570, 571, 572, 10, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 474, 523, 573, 574, 575, 576, 577, 11, 578, 475, 579, 580, 581, 582, 172, 173, 363, 583, 584, 13, 12, 585, 586, 587, 588, 589, 590, 591, 476, 477, 592, 479, 593, 594, 480, 481, 595, 596, 478, 597, 482, 598, 483, 599, 600, 601, 602, 14, 869, 870, 871, 872, 107, 873, 180, 874, 875, 876, 877, 878, 879, 880, 181, 484, 487, 485, 486, 881, 882, 883, 884, 885, 886, 108, 603, 604, 605, 606, 607, 608, 182, 88, 319, 609, 610, 611, 115, 612, 364, 613, 614, 615, 616, 617, 618, 887, 888, 47, 48, 897, 898, 889, 890, 891, 892, 893, 894, 895, 896, 899, 183, 116, 488, 619, 49, 117, 620, 621, 281, 118, 489, 283, 622, 50, 96, 623, 624, 282, 625, 626, 627, 628, 629, 185, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 120, 119, 186, 187, 642, 643, 644, 645, 646, 647, 121, 122, 648, 649, 650, 651, 652, 653, 36, 654, 655, 656, 657, 658, 51, 188, 659, 123, 366, 660, 661, 662, 663, 664, 367, 189, 665, 666, 667, 668, 331, 669, 670, 671, 330, 672, 673, 329, 674, 675, 184, 676, 365, 677, 191, 678, 37, 679, 326, 321, 680, 681, 682, 368, 369, 683, 684, 685, 327, 328, 686, 687, 688, 190, 689, 690, 691, 692, 693, 694, 695, 15, 696, 697, 698, 490, 699, 700, 701, 702, 703, 704, 706, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 721, 284, 723, 724, 124, 725, 900, 907, 902, 903, 905, 904, 906, 90, 192, 930, 937, 193, 938, 99, 939, 100, 940, 101, 941, 102, 942, 194, 943, 944, 195, 726, 727, 197, 728, 729, 196, 730, 198, 731, 732, 285, 733, 199, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 125, 744, 745, 746, 747, 749, 750, 748, 751, 126, 752, 755, 753, 754, 200, 370, 756, 757, 758, 201, 202, 759, 760, 761, 762, 763, 764, 371, 765, 766, 372, 767, 769, 203, 768, 286, 278, 770, 771, 773, 127, 774, 205, 775, 71, 72, 69, 70, 776, 373, 109, 103, 777, 778, 779, 208, 206, 207, 374, 780, 781, 782, 68, 204, 783, 784, 785, 786, 787, 788, 789, 790, 791, 375, 110, 314, 89, 792, 793, 794, 16, 209, 502, 503, 113, 73, 97, 772, 287, 795, 814, 815, 948, 949, 950, 210, 951, 952, 953, 211, 954, 955, 67, 76, 77, 91, 956, 74, 957, 75, 958, 959, 960, 128, 129, 961, 962, 963, 212, 964, 965, 322, 966, 967, 376, 968, 969, 970, 971, 972, 973, 974, 78, 975, 976, 92, 1009, 991, 992, 993, 994, 995, 996, 288, 997, 998, 999, 1000, 1044, 1064, 1065, 1066, 1008, 130, 1067, 332, 317, 318, 377, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 38, 1076, 1077, 52, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1087, 1088, 1089, 213, 1090, 1091, 491, 1092, 1082, 1071, 492, 279, 493, 1083, 1093, 1094, 1095, 1096, 53, 1098, 54, 1097, 131, 1099, 1100, 214, 796, 797, 798, 799, 800, 93, 801, 802, 215, 39, 216, 803, 378, 804, 320, 217, 218, 379, 380, 220, 1101, 1102, 1103, 1104, 1105, 221, 219, 381, 382, 1106, 1107, 1108, 1109, 222, 383, 1110, 384, 1111, 55, 56, 57, 58, 359, 223, 1112, 104, 1113, 225, 224, 385, 386, 1114, 1115, 1116, 1010, 1011, 1012, 1013, 1014, 132, 1015, 1016, 1017, 17, 1018, 289, 79, 1019, 387, 1020, 1021, 1022, 333, 334, 816, 817, 1045, 1001, 945, 946, 335, 947, 388, 805, 389, 806, 823, 824, 834, 18, 133, 134, 1002, 390, 226, 1003, 1004, 1005, 1006, 1007, 135, 236, 228, 235, 227, 229, 230, 231, 233, 232, 234, 931, 932, 933, 934, 391, 1117, 1118, 1119, 237, 1120, 1121, 1122, 1123, 1124, 1125, 238, 1126, 136, 1190, 1191, 1192, 1193, 239, 240, 1194, 1046, 241, 908, 909, 910, 290, 1219, 80, 291, 1223, 1224, 98, 59, 858, 859, 292, 60, 911, 94, 242, 860, 861, 1225, 1226, 1227, 1228, 1229, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1230, 1231, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 40, 1250, 1251, 1252, 1253, 1254, 41, 1255, 1256, 1257, 42, 1258, 1259, 1260, 43, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1285, 1286, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 44, 1304, 1305, 1306, 1307, 1308, 45, 1309, 1310, 1311, 1312, 1313, 46, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 243, 1023, 494, 1024, 1041, 1025, 1026, 1038, 392, 393, 1039, 1040, 137, 138, 139, 1027, 1028, 1036, 1033, 1034, 1035, 293, 316, 1037, 140, 1031, 1029, 1030, 294, 1032, 141, 1042, 1043, 19, 20, 142, 912, 143, 808, 807, 296, 810, 809, 295, 811, 812, 394, 813, 144, 1047, 1048, 1049, 81, 82, 1050, 1051, 1052, 244, 1053, 1054, 1055, 1056, 1057, 395, 1058, 1059, 1060, 1061, 1062, 1063, 145, 977, 978, 979, 980, 146, 21, 245, 247, 935, 246, 936, 248, 901, 147, 913, 918, 919, 914, 915, 916, 921, 922, 923, 249, 924, 925, 926, 927, 928, 917, 920, 929, 148, 818, 819, 820, 250, 821, 822, 251, 825, 829, 830, 831, 832, 252, 826, 253, 827, 828, 149, 833, 1329, 1330, 1134, 835, 1135, 1136, 1137, 254, 1138, 836, 837, 1331, 111, 1332, 845, 150, 255, 1333, 1334, 1139, 1140, 151, 396, 1339, 1340, 397, 1341, 1342, 256, 298, 1343, 1344, 398, 83, 1345, 1346, 399, 1351, 1355, 495, 297, 1356, 400, 1352, 1353, 1354, 1335, 1336, 496, 257, 280, 504, 22, 23, 505, 507, 506, 258, 508, 509, 510, 401, 511, 259, 1337, 1338, 981, 982, 983, 984, 985, 986, 261, 152, 987, 988, 989, 105, 260, 990, 402, 838, 153, 839, 154, 840, 262, 1128, 1129, 1130, 24, 1127, 841, 842, 155, 156, 157, 106, 843, 158, 403, 404, 1349, 263, 336, 159, 160, 1146, 1147, 1148, 1149, 1150, 264, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 265, 1141, 405, 1142, 1143, 406, 1144, 1145, 161, 1158, 1159, 269, 267, 268, 1160, 1161, 275, 274, 175, 266, 1162, 1163, 1164, 1165, 1166, 1167, 324, 323, 337, 407, 1168, 1169, 1170, 84, 1171, 271, 270, 272, 273, 174, 1172, 1173, 299, 1174, 1175, 114, 1176, 1177, 1178, 1179, 1180, 25, 26, 846, 847, 85, 162, 1131, 1132, 1188, 1183, 1184, 1195, 163, 1220, 1221, 1222, 300, 408, 27, 1357, 1358, 95, 1133, 1347, 1196, 844, 1350, 1218, 1348, 848, 1189, 1181, 849, 409, 850, 28, 1197, 1198, 1199, 112, 1200, 1201, 1202, 1203, 1204, 276, 1205, 497, 500, 498, 499, 1206, 501, 325, 414, 415, 301, 61, 338, 410, 176, 411, 412, 339, 413, 851, 416, 852, 417, 418, 853, 854, 419, 855, 360, 856, 420, 857, 421, 164, 340, 422, 341, 277, 862, 863, 423, 864, 866, 424, 425, 865, 302, 867, 868, 342, 427, 428, 426, 429, 431, 430, 432, 1182, 343, 344, 345, 346, 1185, 435, 433, 434, 303, 1186, 436, 1187, 62, 442, 63, 441, 437, 440, 305, 443, 438, 439, 304, 444, 347, 165, 445, 446, 447, 448, 449, 1217, 166, 64, 315, 306, 350, 351, 1207, 1208, 1209, 307, 348, 349, 352, 1210, 1211, 353, 1212, 1213, 309, 65, 167, 168, 308, 1215, 1216, 361, 169, 66, 450, 1214, 451, 310, 452, 453, 312, 311, 454, 313, 354, 512, 355, 356, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373 }
  uselistorder i32* @r4, { 54, 58, 12, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 55, 56, 57, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 9, 85, 86, 87, 88, 89, 90, 263, 14, 264, 13, 265, 266, 267, 91, 92, 15, 93, 94, 95, 16, 96, 17, 97, 98, 99, 100, 101, 8, 102, 0, 103, 104, 105, 1, 268, 272, 18, 4, 297, 298, 299, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 106, 107, 108, 109, 19, 110, 111, 112, 113, 114, 39, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 20, 162, 163, 164, 165, 166, 43, 44, 45, 149, 150, 41, 37, 151, 167, 168, 169, 170, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 5, 413, 346, 347, 348, 349, 350, 351, 352, 353, 354, 21, 355, 356, 375, 376, 377, 437, 438, 439, 378, 379, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 6, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 22, 24, 184, 23, 185, 460, 461, 462, 463, 466, 2, 464, 465, 10, 38, 467, 472, 473, 468, 469, 470, 471, 414, 415, 380, 25, 381, 382, 383, 26, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 200, 201, 202, 186, 187, 357, 358, 359, 360, 361, 362, 363, 364, 365, 27, 366, 367, 368, 369, 370, 371, 372, 373, 374, 300, 301, 302, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 556, 557, 416, 417, 418, 419, 420, 421, 422, 423, 424, 559, 560, 273, 274, 28, 7, 275, 257, 258, 259, 260, 261, 262, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 29, 394, 408, 409, 395, 396, 397, 398, 399, 405, 30, 406, 407, 403, 404, 400, 410, 411, 412, 276, 277, 278, 401, 402, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 425, 426, 427, 31, 428, 32, 429, 33, 430, 431, 432, 433, 434, 435, 436, 343, 344, 345, 303, 304, 305, 306, 269, 270, 271, 279, 280, 281, 34, 282, 283, 284, 35, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 11, 213, 214, 215, 216, 217, 218, 507, 508, 577, 509, 510, 581, 586, 587, 588, 589, 590, 591, 592, 578, 46, 47, 48, 49, 50, 51, 579, 580, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 490, 493, 494, 495, 496, 491, 492, 233, 234, 497, 498, 499, 500, 501, 502, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 582, 585, 241, 242, 243, 244, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 36, 527, 528, 529, 530, 512, 513, 514, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 40, 544, 545, 3, 546, 547, 548, 549, 550, 551, 245, 246, 247, 583, 584, 42, 503, 504, 505, 506, 248, 249, 250, 251, 252, 253, 254, 255, 256, 552, 553, 554, 555, 52, 53, 558 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16* @__decompiler_undefined_function_1() local_unnamed_addr

declare i8 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i16 @__decompiler_undefined_function_4() local_unnamed_addr

declare i8** @__decompiler_undefined_function_5() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
