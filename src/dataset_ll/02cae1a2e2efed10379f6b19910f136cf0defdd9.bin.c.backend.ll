source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1bad0.5 = global i32 0
@global_var_1bae0.6 = global i32* @global_var_1bad0.5
@global_var_1bc40.12 = global i32 0
@global_var_e3d0.18 = constant i32 -382906384
@global_var_1318c.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_ff00.24 = constant i32 79676
@global_var_108c4.26 = constant i32 -382910448
@global_var_13184.28 = constant i32 32
@global_var_1315c.30 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_13174.32 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_13180.34 = constant [3 x i8] c"\0D\0A\00"
@global_var_13194.36 = constant [9 x i8] c"Cookie: \00"
@global_var_131a0.38 = constant [3 x i8] c"; \00"
@global_var_131a4.40 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_131ac.42 = constant i32 59
@global_var_131b0.44 = constant [5 x i8] c"http\00"
@global_var_131b8.46 = constant [5 x i8] c"url=\00"
@global_var_131c0.48 = constant [5 x i8] c"POST\00"
@global_var_ff2c.49 = constant i32 -439275520
@global_var_131c8.51 = constant i32 39
@global_var_131cc.53 = constant i32 61
@global_var_1bc5c.57 = global i32 0
@global_var_a0cc.58 = constant i32 -352321546
@global_var_1151c.59 = constant i32 -481296384
@global_var_cc50.64 = constant i32 -382906384
@global_var_c50c.66 = constant i32 -382906384
@global_var_bd98.68 = constant i32 -382906384
@global_var_b538.70 = constant i32 -382906384
@global_var_ae1c.72 = constant i32 -382906384
@global_var_a6a0.74 = constant i32 -382906384
@global_var_81cc.76 = constant i32 -382906384
@global_var_1bcbc.78 = global i32 0
@global_var_131d0.85 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1bcc4.88 = global i32 0
@global_var_1bc60.90 = global i32 0
@global_var_1bcc0.92 = global i32 0
@global_var_e340.94 = constant i32 -382910352
@global_var_1baec.96 = global i32 65980
@global_var_1bae4.98 = global i32 -1
@global_var_1bccc.104 = local_unnamed_addr global i32 0
@global_var_1bccb.105 = local_unnamed_addr global i32 0
@global_var_1bcca.106 = local_unnamed_addr global i32 0
@global_var_e1b8.108 = constant i32 -442556408
@global_var_131e0.110 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_13234.116 = constant [3 x i8] c"/.\00"
@global_var_1bcc9.117 = local_unnamed_addr global i32 0
@global_var_e1d0.120 = constant i32 -382909968
@global_var_f528.127 = constant i32 -509607552
@global_var_13230.132 = constant i32 57784
@global_var_13204.134 = constant i32 10
@global_var_131f0.136 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1bae8.139 = global i32 -1
@global_var_101bc.143 = constant i32 -382910224
@global_var_13208.145 = constant i32 16777216
@global_var_1bc68.147 = global i32 0
@global_var_1bc74.149 = global i32 0
@global_var_1bc6c.151 = global i32 0
@global_var_1bc70.153 = global i32 0
@global_var_13248.159 = constant [33 x i8] c"7cliftvqm1ugnkbej08owar2phd35s64\00"
@global_var_f408.168 = constant i32 -442695668
@global_var_1bcd8.170 = global i32 0
@global_var_1baf4.173 = global i32 -1095770451
@global_var_1326c.177 = constant i32 1326272261
@global_var_1bcf0.179 = local_unnamed_addr global i32 0
@global_var_1bcf4.180 = local_unnamed_addr global i32 0
@global_var_1bcf5.181 = local_unnamed_addr global i32 0
@global_var_1327c.183 = constant [3 x i8] c"m?\00"
@global_var_1bcf8.184 = local_unnamed_addr global i32 0
@global_var_1bcfc.185 = local_unnamed_addr global i32 0
@global_var_1bcfd.186 = local_unnamed_addr global i32 0
@global_var_1bd68.187 = local_unnamed_addr global i32 0
@global_var_1bd6c.188 = local_unnamed_addr global i32 0
@global_var_1bd6d.189 = local_unnamed_addr global i32 0
@global_var_13280.191 = constant i32 34777
@global_var_1bd70.192 = local_unnamed_addr global i32 0
@global_var_1bd74.193 = local_unnamed_addr global i32 0
@global_var_1bd75.194 = local_unnamed_addr global i32 0
@global_var_13284.196 = constant i32 370215694
@global_var_1bce8.197 = local_unnamed_addr global i32 0
@global_var_1bcec.198 = local_unnamed_addr global i32 0
@global_var_1bced.199 = local_unnamed_addr global i32 0
@global_var_134c0.201 = constant i32 303437322
@global_var_1bd04.202 = local_unnamed_addr global i32 0
@global_var_1bd00.203 = local_unnamed_addr global i32 0
@global_var_1bd05.204 = local_unnamed_addr global i32 0
@global_var_13290.206 = constant i32 219157069
@global_var_1bd08.207 = local_unnamed_addr global i32 0
@global_var_1bd0c.208 = local_unnamed_addr global i32 0
@global_var_1bd0d.209 = local_unnamed_addr global i32 0
@global_var_13298.211 = constant i32 119146317
@global_var_1bd14.212 = local_unnamed_addr global i32 0
@global_var_1bd10.213 = local_unnamed_addr global i32 0
@global_var_1bd15.214 = local_unnamed_addr global i32 0
@global_var_132a0.216 = constant i32 235341386
@global_var_1bd1c.217 = local_unnamed_addr global i32 0
@global_var_1bd18.218 = local_unnamed_addr global i32 0
@global_var_1bd1d.219 = local_unnamed_addr global i32 0
@global_var_132ac.221 = constant i32 1644561485
@global_var_1bd24.222 = local_unnamed_addr global i32 0
@global_var_1bd20.223 = local_unnamed_addr global i32 0
@global_var_1bd25.224 = local_unnamed_addr global i32 0
@global_var_132b4.226 = constant i32 185336652
@global_var_1bd28.227 = local_unnamed_addr global i32 0
@global_var_1bd2c.228 = local_unnamed_addr global i32 0
@global_var_1bd2d.229 = local_unnamed_addr global i32 0
@global_var_132bc.231 = constant i32 51777869
@global_var_1bd34.232 = local_unnamed_addr global i32 0
@global_var_1bd30.233 = local_unnamed_addr global i32 0
@global_var_1bd35.234 = local_unnamed_addr global i32 0
@global_var_132c8.236 = constant i32 758261552
@global_var_1bd3c.237 = local_unnamed_addr global i32 0
@global_var_1bd38.238 = local_unnamed_addr global i32 0
@global_var_1bd3d.239 = local_unnamed_addr global i32 0
@global_var_132d8.241 = constant [11 x i8] c"*662$.--&b\00"
@global_var_1bd40.242 = local_unnamed_addr global i32 0
@global_var_1bd44.243 = local_unnamed_addr global i32 0
@global_var_1bd45.244 = local_unnamed_addr global i32 0
@global_var_132e4.246 = constant [11 x i8] c".-.,-%6$-b\00"
@global_var_1bd48.247 = local_unnamed_addr global i32 0
@global_var_1bd4c.248 = local_unnamed_addr global i32 0
@global_var_1bd4d.249 = local_unnamed_addr global i32 0
@global_var_132f0.251 = constant i32 1515395646
@global_var_1bd54.252 = local_unnamed_addr global i32 0
@global_var_1bd50.253 = local_unnamed_addr global i32 0
@global_var_1bd55.254 = local_unnamed_addr global i32 0
@global_var_13314.256 = constant i32 235801880
@global_var_1bd5c.257 = local_unnamed_addr global i32 0
@global_var_1bd58.258 = local_unnamed_addr global i32 0
@global_var_1bd5d.259 = local_unnamed_addr global i32 0
@global_var_13320.261 = constant [12 x i8] c"%'6.-!#.+2b\00"
@global_var_1bd64.262 = local_unnamed_addr global i32 0
@global_var_1bd60.263 = local_unnamed_addr global i32 0
@global_var_1bd65.264 = local_unnamed_addr global i32 0
@global_var_1332c.266 = constant i32 235342353
@global_var_1bd7c.267 = local_unnamed_addr global i32 0
@global_var_1bd78.268 = local_unnamed_addr global i32 0
@global_var_1bd7d.269 = local_unnamed_addr global i32 0
@global_var_134e0.271 = constant i32 199687
@global_var_1bd80.272 = local_unnamed_addr global i32 0
@global_var_1bd84.273 = local_unnamed_addr global i32 0
@global_var_1bd85.274 = local_unnamed_addr global i32 0
@global_var_13334.276 = constant i32 370219793
@global_var_1bd88.277 = local_unnamed_addr global i32 0
@global_var_1bd8c.278 = local_unnamed_addr global i32 0
@global_var_1bd8d.279 = local_unnamed_addr global i32 0
@global_var_1333c.281 = constant i32 6425105
@global_var_1bd94.282 = local_unnamed_addr global i32 0
@global_var_1bd90.283 = local_unnamed_addr global i32 0
@global_var_1bd95.284 = local_unnamed_addr global i32 0
@global_var_134e8.286 = constant i32 202047565
@global_var_1bd98.287 = local_unnamed_addr global i32 0
@global_var_1bd9c.288 = local_unnamed_addr global i32 0
@global_var_1bd9d.289 = local_unnamed_addr global i32 0
@global_var_13340.291 = constant i32 590359343
@global_var_1bda4.292 = local_unnamed_addr global i32 0
@global_var_1bda0.293 = local_unnamed_addr global i32 0
@global_var_1bda5.294 = local_unnamed_addr global i32 0
@global_var_1335c.296 = constant i32 269287692
@global_var_1bda8.297 = local_unnamed_addr global i32 0
@global_var_1bdac.298 = local_unnamed_addr global i32 0
@global_var_1bdad.299 = local_unnamed_addr global i32 0
@global_var_134fc.301 = constant i32 202047565
@global_var_1bdb0.302 = local_unnamed_addr global i32 0
@global_var_1bdb4.303 = local_unnamed_addr global i32 0
@global_var_1bdb5.304 = local_unnamed_addr global i32 0
@global_var_13510.306 = constant i32 202047565
@global_var_1bdbc.307 = local_unnamed_addr global i32 0
@global_var_1bdb8.308 = local_unnamed_addr global i32 0
@global_var_1bdbd.309 = local_unnamed_addr global i32 0
@global_var_13368.311 = constant i32 386740534
@global_var_1bdc4.312 = local_unnamed_addr global i32 0
@global_var_1bdc0.313 = local_unnamed_addr global i32 0
@global_var_1bdc5.314 = local_unnamed_addr global i32 0
@global_var_13380.316 = constant i32 18220877
@global_var_1bdcc.317 = local_unnamed_addr global i32 0
@global_var_1bdc8.318 = local_unnamed_addr global i32 0
@global_var_1bdcd.319 = local_unnamed_addr global i32 0
@global_var_13394.321 = constant i32 118424332
@global_var_1bdd0.322 = local_unnamed_addr global i32 0
@global_var_1bdd4.323 = local_unnamed_addr global i32 0
@global_var_1bdd5.324 = local_unnamed_addr global i32 0
@global_var_133a4.326 = constant i32 202116385
@global_var_1bddc.327 = local_unnamed_addr global i32 0
@global_var_1bdd8.328 = local_unnamed_addr global i32 0
@global_var_1bddd.329 = local_unnamed_addr global i32 0
@global_var_13528.331 = constant i32 117506339
@global_var_1bde4.332 = local_unnamed_addr global i32 0
@global_var_1bde0.333 = local_unnamed_addr global i32 0
@global_var_1bde5.334 = local_unnamed_addr global i32 0
@global_var_133bc.336 = constant i32 117506339
@global_var_1bdec.337 = local_unnamed_addr global i32 0
@global_var_1bde8.338 = local_unnamed_addr global i32 0
@global_var_1bded.339 = local_unnamed_addr global i32 0
@global_var_133e0.341 = constant i32 369888545
@global_var_1bdf4.342 = local_unnamed_addr global i32 0
@global_var_1bdf0.343 = local_unnamed_addr global i32 0
@global_var_1bdf5.344 = local_unnamed_addr global i32 0
@global_var_13414.346 = constant i32 555091729
@global_var_1bdf8.347 = local_unnamed_addr global i32 0
@global_var_1bdfc.348 = local_unnamed_addr global i32 0
@global_var_1bdfd.349 = local_unnamed_addr global i32 0
@global_var_13424.351 = constant i32 268699408
@global_var_1be00.352 = local_unnamed_addr global i32 0
@global_var_1be04.353 = local_unnamed_addr global i32 0
@global_var_1be05.354 = local_unnamed_addr global i32 0
@global_var_13430.356 = constant i32 50400526
@global_var_1be08.357 = local_unnamed_addr global i32 0
@global_var_1be0c.358 = local_unnamed_addr global i32 0
@global_var_1be0d.359 = local_unnamed_addr global i32 0
@global_var_1343c.361 = constant i32 1326843665
@global_var_1be10.362 = local_unnamed_addr global i32 0
@global_var_1be14.363 = local_unnamed_addr global i32 0
@global_var_1be15.364 = local_unnamed_addr global i32 0
@global_var_1344c.366 = constant i32 369888513
@global_var_1be18.367 = local_unnamed_addr global i32 0
@global_var_1be1c.368 = local_unnamed_addr global i32 0
@global_var_1be1d.369 = local_unnamed_addr global i32 0
@global_var_13460.371 = constant i32 201527318
@global_var_1be20.372 = local_unnamed_addr global i32 0
@global_var_1be24.373 = local_unnamed_addr global i32 0
@global_var_1be25.374 = local_unnamed_addr global i32 0
@global_var_13474.376 = constant i32 202836481
@global_var_1be2c.377 = local_unnamed_addr global i32 0
@global_var_1be28.378 = local_unnamed_addr global i32 0
@global_var_1be2d.379 = local_unnamed_addr global i32 0
@global_var_133b0.381 = constant i32 302450441
@global_var_1be34.382 = local_unnamed_addr global i32 0
@global_var_1be30.383 = local_unnamed_addr global i32 0
@global_var_1be35.384 = local_unnamed_addr global i32 0
@global_var_13480.386 = constant i32 202116353
@global_var_1be38.387 = local_unnamed_addr global i32 0
@global_var_1be3c.388 = local_unnamed_addr global i32 0
@global_var_1be3d.389 = local_unnamed_addr global i32 0
@global_var_13490.391 = constant i32 336594705
@global_var_1be44.392 = local_unnamed_addr global i32 0
@global_var_1be40.393 = local_unnamed_addr global i32 0
@global_var_1be45.394 = local_unnamed_addr global i32 0
@global_var_134a4.396 = constant i32 336594705
@global_var_1be4c.397 = local_unnamed_addr global i32 0
@global_var_1be48.398 = local_unnamed_addr global i32 0
@global_var_1be4d.399 = local_unnamed_addr global i32 0
@global_var_1357c.401 = constant i32 186125615
@global_var_1be50.402 = local_unnamed_addr global i32 0
@global_var_1be54.403 = local_unnamed_addr global i32 0
@global_var_1be55.404 = local_unnamed_addr global i32 0
@global_var_135ec.406 = constant i32 186125615
@global_var_1be58.407 = local_unnamed_addr global i32 0
@global_var_1be5c.408 = local_unnamed_addr global i32 0
@global_var_1be5d.409 = local_unnamed_addr global i32 0
@global_var_1365c.411 = constant i32 186125615
@global_var_1be60.412 = local_unnamed_addr global i32 0
@global_var_1be64.413 = local_unnamed_addr global i32 0
@global_var_1be65.414 = local_unnamed_addr global i32 0
@global_var_136cc.416 = constant i32 186125615
@global_var_1be6c.417 = local_unnamed_addr global i32 0
@global_var_1be68.418 = local_unnamed_addr global i32 0
@global_var_1be6d.419 = local_unnamed_addr global i32 0
@global_var_1373c.420 = constant i32 186125615
@global_var_1be75.421 = local_unnamed_addr global i32 0
@global_var_1be70.422 = local_unnamed_addr global i32 0
@global_var_1be74.423 = local_unnamed_addr global i32 0
@global_var_11f04.426 = constant i32 -476053504
@global_var_10c94.430 = constant i32 -443219956
@global_var_10e00.435 = constant i32 -376111092
@global_var_1bcb0.438 = global i32 0
@global_var_10f7c.440 = constant i32 -456978431
@global_var_1be78.442 = global i32 0
@global_var_1bc78.444 = global i32 0
@global_var_1bbf4.447 = global i32 256
@global_var_1baf8.448 = global i32* @global_var_1bbf4.447
@global_var_1bca0.451 = global i32 0
@global_var_1bef8.453 = global i32 0
@global_var_126b8.454 = constant i32 -382910416
@global_var_10f00.455 = constant i32 -509595648
@global_var_1159c.462 = constant i32 -442564520
@global_var_1bc00.468 = global i32 0
@global_var_10b40.470 = constant i32 -481230848
@global_var_1bc90.472 = global i32 0
@global_var_12308.474 = constant i32 -509587456
@global_var_138c0.476 = constant i32 33554944
@global_var_1bc38.477 = global i32* @global_var_138c0.476
@global_var_1bc18.480 = global i32 0
@global_var_1bc94.484 = local_unnamed_addr global i32 0
@global_var_11cbc.486 = constant i32 -352321419
@global_var_1bac4.490 = global i32 -1
@global_var_1bca4.493 = global i32 0
@global_var_1bca8.495 = local_unnamed_addr global i32 0
@global_var_11ef0.496 = constant i32 -390234096
@global_var_137b4.498 = constant [10 x i8] c"/dev/null\00"
@global_var_1bcac.500 = global i32 0
@global_var_1bc98.505 = local_unnamed_addr global i32 0
@global_var_1bc9c.507 = global i32 0
@global_var_10ee0.509 = constant i32 -369096946
@global_var_1bc30 = external local_unnamed_addr global i32
@global_var_10e98.520 = constant i32 -442564608
@global_var_121b8.522 = constant i32 -335544664
@global_var_122d4.525 = constant i32 -275775369
@global_var_12a4c.526 = constant i32 -382910352
@global_var_1bcb8.528 = global i32 0
@global_var_1bf10.531 = global i32 0
@global_var_1bf14.533 = global i32 0
@global_var_1bac8.536 = global i32 0
@global_var_1bc3c.3 = external global i8*
@global_var_1bc58.55 = external global i8*
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1baf0.100 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1bcc8.103 = external global i8*
@global_var_1bc64.141 = external global i8*
@global_var_13190.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_130fc(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1bc3c.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1bc3c.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1bae0.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1bae0.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1bae0.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1bae0.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1bc3c.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1bae0.6, { 1, 0 }
  uselistorder i8** @global_var_1bc3c.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 113364 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 113364

bb2:                                              ; preds = %.thread
  ret i32 113364

; uselistorder directives
  uselistorder i32 113364, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_11fa4(i32 ptrtoint (i32* @global_var_e3d0.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 78136, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_1196c()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1318c.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_1318c.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_13190.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_13190.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a398(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a398(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_10f00(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_ff04(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_ff04(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_ff04(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_ff04(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_f5e0(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_f5e0(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_f5e0(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_f5e0(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_f5e0(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_f5e0(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_f5e0(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_f5e0(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_f5e0(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_f5e0(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_f5e0(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_114c4(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v0_83dc = load i32, i32* %r3.global-to-local, align 4
  %v1_83dc = trunc i32 %v0_83dc to i8
  %v2_83dc = load i32, i32* @r5, align 4
  %v3_83dc = add i32 %v2_83dc, 4
  %v4_83dc = inttoptr i32 %v3_83dc to i8*
  store i8 %v1_83dc, i8* %v4_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v2_83e4 = call i32 @function_106ec(i32 %v0_83e0, i32 %v1_81e4)
  store i32 %v2_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v2_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v2_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_ff2c(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_ff04(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_10ef0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_ff2c(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_ff2c(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_ff2c(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_eccc()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  %v2_8494 = and i32 %v0_8484, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16777216)
  %v3_8494 = icmp ne i32 %v2_8494, 0
  store i1 %v3_8494, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v4_849c = udiv i32 %v0_8484, 16777216
  %v5_849c = or i32 %v3_848c, %v4_849c
  %v2_84a0 = or i32 %v5_849c, %v5_8494
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_eccc()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_10620(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_10b94(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_108c4(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_108c4.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_111c0(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_107d4(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_107d4(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_11190(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_1101c(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_10ae4(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_10b94(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_965c, %dec_label_pc_9400, %dec_label_pc_88dc
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_11074(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_108c4(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_ffa4(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_ffa4(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_ff2c(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13184.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_ff2c(i8* %v2_8968, i32 ptrtoint (i32* @global_var_13184.28 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_ff2c(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_1315c.30 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_ff2c(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_1315c.30 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_ff04(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_ff2c(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13174.32 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_ff2c(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_13174.32 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_ff2c(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_ff2c(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_f5e0(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_ff04(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_f4fc(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_ff2c(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_f528(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_ff04(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_ff2c(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_f5e0(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_ff04(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_f4fc(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_ff2c(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_f528(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_ff2c(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_f5e0(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_ff04(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_f4fc(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_ff2c(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_f528(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_ff2c(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_f5e0(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_ff04(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_f4fc(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_ff2c(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_f528(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_ff2c(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_ff04(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_f4fc(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_ff2c(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_13184.28 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_ff2c(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_13184.28 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_ff04(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_ff04(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_103f8(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_ff2c(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13194.36 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_ff2c(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_13194.36 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_ff2c(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_131a0.38 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_ff2c(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_131a0.38 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_ff04(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_ff2c(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_ff2c(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_ff2c(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_102e4(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_ff04(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_11130(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_ffa4(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_110d0(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_131a4.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_ffc8(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_131a4.40 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_131a4.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_ffc8(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_131a4.40 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_f4fc(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_10258(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_f4fc(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_10258(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_f4fc(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_10258(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_f4fc(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_10258(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_ffc8(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_ff04(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_f4fc(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_10258(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_f4fc(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_10258(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_f4fc(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_10258(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_ffc8(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_ff04(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_f4fc(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_10258(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_f4fc(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_10258(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_f4fc(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_10258(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_ffc8(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_10030(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_f4fc(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_10258(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_f4fc(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_10258(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_ffc8(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_ffc8(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_ffc8(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_ff04(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_10368(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_ff04(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_ff2c(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_f4fc(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_10258(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_f4fc(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_10258(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_ffc8(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_131b0.44 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_ffc8(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_131b0.44 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_10e98()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_110d0(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_9578, %dec_label_pc_94ac, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_10ef0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_10ef0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_f4fc(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_ffc8(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_ffc8(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_ffc8(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_ffc8(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_ffc8(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_131ac.42 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_10030(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_ff2c(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_10e98()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_110d0(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_108c4(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_f4fc(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_10258(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_f4fc(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_10258(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_ffc8(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_ff04(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_131b8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_10258(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_131b8.46 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_ff04(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_131b8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_10258(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_131b8.46 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_10030(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_11cf4(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_10b94(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_ff04(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_131b0.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_10258(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_131b0.44 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1318c.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_10ee0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_1318c.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_108c4(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_131a4.40 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_ffc8(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_131a4.40 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_131c0.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_102e4(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_131c0.48 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_110d0(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_108c4(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_10ef0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_ff04(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_ff04(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_ff2c.49 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_ff04(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_ffa4(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_ff04(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_ff2c(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_108c4(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1318c.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_102e4(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_1318c.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_f4fc(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_ffc8(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_131c8.51 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_ffc8(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_131c8.51 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_ffa4(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_ff04(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_ff04(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_ff2c(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_ff04(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_ff2c(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_ff04(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_131cc.53 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_ff2c(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_131cc.53 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_131c8.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_ffc8(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_131c8.51 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_ff04(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_ff2c(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_10ef0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_ff04(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_ff04(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_ff2c.49 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_ff04(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_ffa4(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_ff04(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_ff2c(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_ff04(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_ff04(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_ff04(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_ffa4(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_ff04(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_ff2c(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_f5e0(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_f4fc(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_ff2c(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_f528(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_ff2c(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_f5e0(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_f4fc(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_ff2c(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_f528(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_f5e0(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_f4fc(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_ff2c(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_f528(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_f5e0(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_f4fc(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_ff2c(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_f528(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_f5e0(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_f4fc(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_ff2c(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_f528(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 3, 2, 5, 8, 9, 7, 6, 4, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 3, 9, 4, 7, 8, 6, 5, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 1, 8, 3, 6, 7, 5, 4, 2, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 9, 8, 3, 6, 7, 5, 4, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 3, 9, 4, 7, 8, 6, 5, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 13, 14, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 6, 5, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 66, 68, 69, 70, 71, 72, 73, 75, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 160, 161, 162, 163, 111, 112, 113, 114, 118, 115, 116, 117, 119, 120, 123, 124, 121, 122, 125, 127, 126, 128, 129, 130, 131, 132, 137, 133, 134, 135, 136, 138, 140, 139, 13, 142, 141, 11, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 159, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 108, 109, 110, 75, 76, 77, 78, 79, 82, 83, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 43, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 44, 45, 9, 46, 47, 48, 49, 52, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 166, 167, 168, 169, 170, 171, 172, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 132, 134, 135, 137, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 164, 0 }
  uselistorder i32* %r0.global-to-local, { 10, 9, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 225, 32, 165, 24, 72, 38, 33, 35, 34, 36, 39, 37, 41, 40, 43, 42, 44, 46, 45, 47, 50, 48, 49, 52, 51, 55, 53, 54, 56, 57, 58, 60, 59, 61, 62, 63, 65, 64, 66, 68, 67, 70, 69, 71, 74, 73, 76, 75, 77, 79, 78, 81, 80, 82, 84, 83, 85, 88, 86, 87, 90, 89, 93, 91, 92, 94, 96, 95, 98, 97, 100, 99, 101, 103, 102, 104, 106, 105, 107, 108, 109, 31, 111, 110, 113, 112, 114, 116, 115, 117, 118, 119, 121, 120, 123, 122, 124, 126, 125, 127, 129, 128, 131, 130, 132, 133, 136, 134, 135, 137, 139, 138, 140, 142, 141, 144, 143, 145, 146, 147, 149, 148, 150, 152, 151, 154, 153, 156, 155, 157, 159, 158, 160, 161, 163, 162, 30, 164, 167, 166, 169, 168, 171, 170, 174, 172, 173, 176, 175, 177, 179, 178, 180, 29, 181, 183, 182, 185, 184, 186, 188, 187, 189, 191, 190, 192, 193, 195, 194, 197, 196, 198, 200, 199, 201, 203, 202, 204, 205, 207, 206, 209, 208, 210, 212, 211, 213, 215, 214, 216, 28, 217, 218, 219, 27, 220, 347, 221, 228, 222, 223, 292, 224, 226, 227, 8, 229, 230, 26, 231, 232, 233, 234, 235, 236, 237, 239, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 273, 275, 276, 277, 278, 280, 279, 281, 282, 283, 7, 284, 6, 285, 287, 286, 4, 5, 289, 288, 3, 290, 291, 293, 295, 294, 296, 345, 297, 25, 299, 298, 344, 300, 346, 301, 302, 1, 303, 2, 304, 305, 307, 306, 309, 308, 310, 311, 312, 314, 313, 315, 316, 318, 317, 320, 319, 322, 321, 324, 323, 326, 325, 327, 328, 329, 330, 331, 332, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 31, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 30 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 55, 56, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 8, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 9, 10, 11, 4, 5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 151, 152, 109, 111, 110, 112, 113, 114, 119, 121, 120, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 135, 136, 128, 129, 130, 131, 132, 133, 134, 137, 0, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 144, 145, 109, 110, 115, 114, 111, 112, 113, 116, 117, 118, 119, 120, 121, 129, 130, 122, 123, 124, 125, 126, 127, 128, 131, 0, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 147, 148, 109, 110, 111, 116, 118, 117, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 132, 133, 125, 126, 127, 128, 129, 130, 131, 134, 0, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 162, 163, 164, 116, 117, 122, 124, 123, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 141, 142, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 1, 0, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161 }
  uselistorder i32 ptrtoint (i32* @global_var_131c8.51 to i32), { 1, 2, 0, 3 }
  uselistorder i32 104, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_131b8.46 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_131b0.44 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_131ac.42 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32, i32)* @function_ffc8, { 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_131a4.40 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_13180.34 to i32), { 12, 16, 3, 17, 15, 18, 13, 19, 14, 20, 0, 21, 1, 22, 2, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31 }
  uselistorder i32 ptrtoint (i32* @global_var_13184.28 to i32), { 0, 2, 1, 3 }
  uselistorder i8 7, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 127, { 0, 5, 3, 6, 1, 7, 2, 8, 4, 9 }
  uselistorder i32 126, { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_1318c.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 13, 0, 14, 15, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_108f0()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_108f0()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_11cf4(i32 %v0_a03c)
  %v0_a044 = call i32 @function_10948()
  %v2_a04c = call i32 @function_109c4(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_11c60(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_11c60(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1bc5c.57, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_11c60(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v21_a0d8 = load i32, i32* @sl, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_114c4(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v0_a170 = phi i32 [ %v0_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v0_a170, %v1_a16c
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_114c4(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_114c4(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_ff80(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_10e98()
  %v0_a294 = load i32, i32* @sl, align 4
  %v1_a294 = and i32 %v0_a294, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v4_a2a4 = mul i32 %v1_a294, 256
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_1151c.59 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_1151c.59 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v21_a0d8, i32* @sl, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_1151c()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 2, 21, 3, 20, 4, 22, 10, 7, 5, 6, 8, 9, 16, 11, 12, 13, 14, 15, 18, 17, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 5, 4, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a32c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a32c = urem i32 %arg1, 256
  %v2_a330 = icmp eq i32 %v1_a32c, 0
  %v3_a334 = load i32, i32* @r4, align 4
  br i1 %v2_a330, label %dec_label_pc_a37c, label %dec_label_pc_a340

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v0_a340 = load i32, i32* %r1.global-to-local, align 4
  %v1_a340 = add i32 %v0_a340, 4
  %v2_a340 = inttoptr i32 %v1_a340 to i8*
  %v3_a340 = load i8, i8* %v2_a340, align 1
  %v4_a340 = zext i8 %v3_a340 to i32
  %v1_a344 = urem i32 %arg3, 256
  %v9_a348 = icmp eq i32 %v4_a340, %v1_a344
  br i1 %v9_a348, label %dec_label_pc_a384, label %dec_label_pc_a36c.preheader

dec_label_pc_a36c.preheader:                      ; preds = %dec_label_pc_a340
  br label %dec_label_pc_a36c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a36c
  %v1_a35c = add i32 %v0_a364.in, 12
  %v2_a35c = inttoptr i32 %v1_a35c to i8*
  %v3_a35c = load i8, i8* %v2_a35c, align 1
  %v4_a35c = zext i8 %v3_a35c to i32
  %v9_a360 = icmp eq i32 %v1_a344, %v4_a35c
  br i1 %v9_a360, label %dec_label_pc_a384, label %dec_label_pc_a36c

dec_label_pc_a36c:                                ; preds = %dec_label_pc_a36c.preheader, %dec_label_pc_a35c
  %v0_a364.in = phi i32 [ %v0_a340, %dec_label_pc_a36c.preheader ], [ %v0_a364, %dec_label_pc_a35c ]
  %v0_a36c = phi i32 [ 0, %dec_label_pc_a36c.preheader ], [ %v1_a36c, %dec_label_pc_a35c ]
  %v0_a364 = add i32 %v0_a364.in, 8
  %v1_a36c = add i32 %v0_a36c, 1
  %v9_a370 = icmp eq i32 %v1_a32c, %v1_a36c
  store i32 %v0_a364, i32* %r1.global-to-local, align 4
  br i1 %v9_a370, label %dec_label_pc_a37c, label %dec_label_pc_a35c

dec_label_pc_a37c:                                ; preds = %dec_label_pc_a36c, %dec_label_pc_a384, %dec_label_pc_a32c
  store i32 %v3_a334, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a384:                                ; preds = %dec_label_pc_a35c, %dec_label_pc_a340
  %v0_a384 = phi i32 [ %v0_a340, %dec_label_pc_a340 ], [ %v0_a364, %dec_label_pc_a35c ]
  %v1_a384 = inttoptr i32 %v0_a384 to i32*
  %v2_a384 = load i32, i32* %v1_a384, align 4
  store i32 %v2_a384, i32* @r0, align 4
  %v2_a388 = icmp eq i32 %v2_a384, 0
  br i1 %v2_a388, label %dec_label_pc_a37c, label %dec_label_pc_a390

dec_label_pc_a390:                                ; preds = %dec_label_pc_a384
  store i32 %v3_a334, i32* @r4, align 4
  %v1_a394 = call i32 @function_10fa0(i32 %v2_a384)
  ret i32 %v1_a394

; uselistorder directives
  uselistorder i32 %v1_a36c, { 1, 0 }
  uselistorder i32 %v0_a364, { 1, 0, 2 }
  uselistorder i32 %v0_a364.in, { 1, 0 }
  uselistorder i32 %v1_a344, { 1, 0 }
  uselistorder i32 %v0_a340, { 1, 0, 2 }
  uselistorder i32 %v3_a334, { 1, 0 }
  uselistorder i32 %v1_a32c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a37c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a36c, { 1, 0 }
}

define i32 @function_a398(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a398:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a398 = urem i32 %arg1, 256
  %v2_a39c = icmp eq i32 %v1_a398, 0
  %v3_a3a0 = load i32, i32* @r4, align 4
  %v6_a3a0 = load i32, i32* @lr, align 4
  br i1 %v2_a39c, label %dec_label_pc_a3e8, label %dec_label_pc_a3ac

dec_label_pc_a3ac:                                ; preds = %dec_label_pc_a398
  %v0_a3ac = load i32, i32* %r1.global-to-local, align 4
  %v1_a3ac = add i32 %v0_a3ac, 4
  %v2_a3ac = inttoptr i32 %v1_a3ac to i8*
  %v3_a3ac = load i8, i8* %v2_a3ac, align 1
  %v4_a3ac = zext i8 %v3_a3ac to i32
  %v1_a3b0 = urem i32 %arg3, 256
  %v9_a3b4 = icmp eq i32 %v4_a3ac, %v1_a3b0
  br i1 %v9_a3b4, label %dec_label_pc_a3f0, label %dec_label_pc_a3d8.preheader

dec_label_pc_a3d8.preheader:                      ; preds = %dec_label_pc_a3ac
  br label %dec_label_pc_a3d8

dec_label_pc_a3c8:                                ; preds = %dec_label_pc_a3d8
  %v1_a3c8 = add i32 %v0_a3d0.in, 12
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i8*
  %v3_a3c8 = load i8, i8* %v2_a3c8, align 1
  %v4_a3c8 = zext i8 %v3_a3c8 to i32
  %v9_a3cc = icmp eq i32 %v1_a3b0, %v4_a3c8
  br i1 %v9_a3cc, label %dec_label_pc_a3f0, label %dec_label_pc_a3d8

dec_label_pc_a3d8:                                ; preds = %dec_label_pc_a3d8.preheader, %dec_label_pc_a3c8
  %v0_a3d0.in = phi i32 [ %v0_a3ac, %dec_label_pc_a3d8.preheader ], [ %v0_a3d0, %dec_label_pc_a3c8 ]
  %v0_a3d8 = phi i32 [ 0, %dec_label_pc_a3d8.preheader ], [ %v1_a3d8, %dec_label_pc_a3c8 ]
  %v0_a3d0 = add i32 %v0_a3d0.in, 8
  %v1_a3d8 = add i32 %v0_a3d8, 1
  store i32 %v1_a3d8, i32* @lr, align 4
  %v9_a3dc = icmp eq i32 %v1_a398, %v1_a3d8
  store i32 %v0_a3d0, i32* %r1.global-to-local, align 4
  br i1 %v9_a3dc, label %dec_label_pc_a3e8, label %dec_label_pc_a3c8

dec_label_pc_a3e8:                                ; preds = %dec_label_pc_a3d8, %dec_label_pc_a398, %dec_label_pc_a3f0
  store i32 %v3_a3a0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a3f0:                                ; preds = %dec_label_pc_a3c8, %dec_label_pc_a3ac
  %v0_a3f0 = phi i32 [ %v0_a3ac, %dec_label_pc_a3ac ], [ %v0_a3d0, %dec_label_pc_a3c8 ]
  %v1_a3f0 = inttoptr i32 %v0_a3f0 to i32*
  %v2_a3f0 = load i32, i32* %v1_a3f0, align 4
  %v2_a3f4 = icmp eq i32 %v2_a3f0, 0
  br i1 %v2_a3f4, label %dec_label_pc_a3e8, label %dec_label_pc_a3fc

dec_label_pc_a3fc:                                ; preds = %dec_label_pc_a3f0
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a3a0, i32* @r4, align 4
  store i32 %v6_a3a0, i32* @lr, align 4
  %v2_a404 = inttoptr i32 %v2_a3f0 to i8*
  %v3_a404 = call i32 @function_10030(i8* %v2_a404, i32 10)
  ret i32 %v3_a404

; uselistorder directives
  uselistorder i32 %v1_a3d8, { 1, 2, 0 }
  uselistorder i32 %v0_a3d0, { 1, 0, 2 }
  uselistorder i32 %v0_a3d0.in, { 1, 0 }
  uselistorder i32 %v1_a3b0, { 1, 0 }
  uselistorder i32 %v0_a3ac, { 1, 0, 2 }
  uselistorder i32 %v3_a3a0, { 1, 0 }
  uselistorder i32 %v1_a398, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a3e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a3d8, { 1, 0 }
}

define i32 @function_a408(i32 %arg1) local_unnamed_addr {
dec_label_pc_a408:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a408 = load i32, i32* @r4, align 4
  store i32 %v3_a408, i32* %stack_var_-20, align 4
  %v6_a408 = load i32, i32* @r5, align 4
  %v9_a408 = load i32, i32* @r6, align 4
  %v12_a408 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a414 = call i32 @function_114c4(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1bc58.55 to i32), i32* @r4, align 4
  %v2_a41c = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a41c = zext i8 %v2_a41c to i32
  store i32 ptrtoint (i32* @global_var_1bc5c.57 to i32), i32* @r6, align 4
  store i32 53044, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a414, i32* @r5, align 4
  %v3_a430 = mul nuw nsw i32 %v3_a41c, 4
  store i32 %v3_a430, i32* %r1.global-to-local, align 4
  %v2_a434 = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a438 = inttoptr i32 %v2_a414 to i32*
  store i32 53044, i32* %v2_a438, align 4
  %v0_a43c = load i32, i32* @r7, align 4
  %v1_a43c = trunc i32 %v0_a43c to i8
  %v2_a43c = load i32, i32* @r5, align 4
  %v3_a43c = add i32 %v2_a43c, 4
  %v4_a43c = inttoptr i32 %v3_a43c to i8*
  store i8 %v1_a43c, i8* %v4_a43c, align 1
  %v0_a440 = load i32, i32* %r1.global-to-local, align 4
  %v1_a440 = add i32 %v0_a440, 4
  store i32 %v1_a440, i32* %r1.global-to-local, align 4
  %v2_a444 = call i32 @function_1160c(i32 %v2_a434, i32 %v1_a440)
  %v2_a448 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a448 = zext i8 %v2_a448 to i32
  store i32 %v3_a448, i32* %r3.global-to-local, align 4
  store i32 %v2_a444, i32* %ip.global-to-local, align 4
  %v0_a450 = load i32, i32* @r5, align 4
  %v5_a450 = mul nuw nsw i32 %v3_a448, 4
  %v6_a450 = add i32 %v5_a450, %v2_a444
  %v7_a450 = inttoptr i32 %v6_a450 to i32*
  store i32 %v0_a450, i32* %v7_a450, align 4
  %v0_a454 = load i32, i32* %r3.global-to-local, align 4
  %v1_a454 = load i32, i32* @r7, align 4
  %v2_a454 = add i32 %v1_a454, %v0_a454
  store i32 %v2_a454, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a460 = load i32, i32* %ip.global-to-local, align 4
  %v1_a460 = load i32, i32* @r6, align 4
  %v2_a460 = inttoptr i32 %v1_a460 to i32*
  store i32 %v0_a460, i32* %v2_a460, align 4
  %v0_a464 = load i32, i32* %r2.global-to-local, align 4
  %v1_a464 = trunc i32 %v0_a464 to i8
  %v2_a464 = load i32, i32* @r4, align 4
  %v3_a464 = inttoptr i32 %v2_a464 to i8*
  store i8 %v1_a464, i8* %v3_a464, align 1
  %v2_a468 = call i32 @function_114c4(i32 %v1_a454, i32 8)
  %v2_a46c = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a46c = zext i8 %v2_a46c to i32
  store i32 ptrtoint (i32* @global_var_cc50.64 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a468, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a47c = mul nuw nsw i32 %v3_a46c, 4
  store i32 %v3_a47c, i32* %r1.global-to-local, align 4
  %v2_a480 = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a484 = inttoptr i32 %v2_a468 to i32*
  store i32 ptrtoint (i32* @global_var_cc50.64 to i32), i32* %v2_a484, align 4
  %v0_a488 = load i32, i32* %r3.global-to-local, align 4
  %v1_a488 = trunc i32 %v0_a488 to i8
  %v2_a488 = load i32, i32* @r5, align 4
  %v3_a488 = add i32 %v2_a488, 4
  %v4_a488 = inttoptr i32 %v3_a488 to i8*
  store i8 %v1_a488, i8* %v4_a488, align 1
  %v0_a48c = load i32, i32* %r1.global-to-local, align 4
  %v1_a48c = add i32 %v0_a48c, 4
  store i32 %v1_a48c, i32* %r1.global-to-local, align 4
  %v4_a490 = call i32 @function_1160c(i32 %v2_a480, i32 %v1_a48c)
  %v2_a494 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a494 = zext i8 %v2_a494 to i32
  store i32 %v3_a494, i32* %r3.global-to-local, align 4
  store i32 %v4_a490, i32* %ip.global-to-local, align 4
  %v0_a49c = load i32, i32* @r5, align 4
  %v5_a49c = mul nuw nsw i32 %v3_a494, 4
  %v6_a49c = add i32 %v5_a49c, %v4_a490
  %v7_a49c = inttoptr i32 %v6_a49c to i32*
  store i32 %v0_a49c, i32* %v7_a49c, align 4
  %v0_a4a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4a0 = load i32, i32* @r7, align 4
  %v2_a4a0 = add i32 %v1_a4a0, %v0_a4a0
  store i32 %v2_a4a0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a4ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a4ac = load i32, i32* @r6, align 4
  %v2_a4ac = inttoptr i32 %v1_a4ac to i32*
  store i32 %v0_a4ac, i32* %v2_a4ac, align 4
  %v0_a4b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4b0 = trunc i32 %v0_a4b0 to i8
  %v2_a4b0 = load i32, i32* @r4, align 4
  %v3_a4b0 = inttoptr i32 %v2_a4b0 to i8*
  store i8 %v1_a4b0, i8* %v3_a4b0, align 1
  %v2_a4b4 = call i32 @function_114c4(i32 %v1_a4a0, i32 8)
  %v2_a4b8 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a4b8 = zext i8 %v2_a4b8 to i32
  store i32 ptrtoint (i32* @global_var_c50c.66 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4b4, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a4c8 = mul nuw nsw i32 %v3_a4b8, 4
  store i32 %v3_a4c8, i32* %r1.global-to-local, align 4
  %v2_a4cc = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a4d0 = inttoptr i32 %v2_a4b4 to i32*
  store i32 ptrtoint (i32* @global_var_c50c.66 to i32), i32* %v2_a4d0, align 4
  %v0_a4d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d4 = trunc i32 %v0_a4d4 to i8
  %v2_a4d4 = load i32, i32* @r5, align 4
  %v3_a4d4 = add i32 %v2_a4d4, 4
  %v4_a4d4 = inttoptr i32 %v3_a4d4 to i8*
  store i8 %v1_a4d4, i8* %v4_a4d4, align 1
  %v0_a4d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a4d8 = add i32 %v0_a4d8, 4
  store i32 %v1_a4d8, i32* %r1.global-to-local, align 4
  %v4_a4dc = call i32 @function_1160c(i32 %v2_a4cc, i32 %v1_a4d8)
  %v2_a4e0 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a4e0 = zext i8 %v2_a4e0 to i32
  store i32 %v3_a4e0, i32* %r3.global-to-local, align 4
  store i32 %v4_a4dc, i32* %ip.global-to-local, align 4
  %v0_a4e8 = load i32, i32* @r5, align 4
  %v5_a4e8 = mul nuw nsw i32 %v3_a4e0, 4
  %v6_a4e8 = add i32 %v5_a4e8, %v4_a4dc
  %v7_a4e8 = inttoptr i32 %v6_a4e8 to i32*
  store i32 %v0_a4e8, i32* %v7_a4e8, align 4
  %v0_a4ec = load i32, i32* %r3.global-to-local, align 4
  %v1_a4ec = load i32, i32* @r7, align 4
  %v2_a4ec = add i32 %v1_a4ec, %v0_a4ec
  store i32 %v2_a4ec, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a4f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_a4f8 = load i32, i32* @r6, align 4
  %v2_a4f8 = inttoptr i32 %v1_a4f8 to i32*
  store i32 %v0_a4f8, i32* %v2_a4f8, align 4
  %v0_a4fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a4fc = trunc i32 %v0_a4fc to i8
  %v2_a4fc = load i32, i32* @r4, align 4
  %v3_a4fc = inttoptr i32 %v2_a4fc to i8*
  store i8 %v1_a4fc, i8* %v3_a4fc, align 1
  %v2_a500 = call i32 @function_114c4(i32 %v1_a4ec, i32 8)
  %v2_a504 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a504 = zext i8 %v2_a504 to i32
  store i32 ptrtoint (i32* @global_var_bd98.68 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a500, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a514 = mul nuw nsw i32 %v3_a504, 4
  store i32 %v3_a514, i32* %r1.global-to-local, align 4
  %v2_a518 = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a51c = inttoptr i32 %v2_a500 to i32*
  store i32 ptrtoint (i32* @global_var_bd98.68 to i32), i32* %v2_a51c, align 4
  %v0_a520 = load i32, i32* %r3.global-to-local, align 4
  %v1_a520 = trunc i32 %v0_a520 to i8
  %v2_a520 = load i32, i32* @r5, align 4
  %v3_a520 = add i32 %v2_a520, 4
  %v4_a520 = inttoptr i32 %v3_a520 to i8*
  store i8 %v1_a520, i8* %v4_a520, align 1
  %v0_a524 = load i32, i32* %r1.global-to-local, align 4
  %v1_a524 = add i32 %v0_a524, 4
  store i32 %v1_a524, i32* %r1.global-to-local, align 4
  %v4_a528 = call i32 @function_1160c(i32 %v2_a518, i32 %v1_a524)
  %v2_a52c = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a52c = zext i8 %v2_a52c to i32
  store i32 %v3_a52c, i32* %r3.global-to-local, align 4
  store i32 %v4_a528, i32* %ip.global-to-local, align 4
  %v0_a534 = load i32, i32* @r5, align 4
  %v5_a534 = mul nuw nsw i32 %v3_a52c, 4
  %v6_a534 = add i32 %v5_a534, %v4_a528
  %v7_a534 = inttoptr i32 %v6_a534 to i32*
  store i32 %v0_a534, i32* %v7_a534, align 4
  %v0_a538 = load i32, i32* %r3.global-to-local, align 4
  %v1_a538 = load i32, i32* @r7, align 4
  %v2_a538 = add i32 %v1_a538, %v0_a538
  store i32 %v2_a538, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a544 = load i32, i32* %ip.global-to-local, align 4
  %v1_a544 = load i32, i32* @r6, align 4
  %v2_a544 = inttoptr i32 %v1_a544 to i32*
  store i32 %v0_a544, i32* %v2_a544, align 4
  %v0_a548 = load i32, i32* %r2.global-to-local, align 4
  %v1_a548 = trunc i32 %v0_a548 to i8
  %v2_a548 = load i32, i32* @r4, align 4
  %v3_a548 = inttoptr i32 %v2_a548 to i8*
  store i8 %v1_a548, i8* %v3_a548, align 1
  %v2_a54c = call i32 @function_114c4(i32 %v1_a538, i32 8)
  %v2_a550 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a550 = zext i8 %v2_a550 to i32
  store i32 ptrtoint (i32* @global_var_b538.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a54c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a560 = mul nuw nsw i32 %v3_a550, 4
  store i32 %v3_a560, i32* %r1.global-to-local, align 4
  %v2_a564 = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a568 = inttoptr i32 %v2_a54c to i32*
  store i32 ptrtoint (i32* @global_var_b538.70 to i32), i32* %v2_a568, align 4
  %v0_a56c = load i32, i32* %r3.global-to-local, align 4
  %v1_a56c = trunc i32 %v0_a56c to i8
  %v2_a56c = load i32, i32* @r5, align 4
  %v3_a56c = add i32 %v2_a56c, 4
  %v4_a56c = inttoptr i32 %v3_a56c to i8*
  store i8 %v1_a56c, i8* %v4_a56c, align 1
  %v0_a570 = load i32, i32* %r1.global-to-local, align 4
  %v1_a570 = add i32 %v0_a570, 4
  store i32 %v1_a570, i32* %r1.global-to-local, align 4
  %v4_a574 = call i32 @function_1160c(i32 %v2_a564, i32 %v1_a570)
  %v2_a578 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a578 = zext i8 %v2_a578 to i32
  store i32 %v3_a578, i32* %r3.global-to-local, align 4
  store i32 %v4_a574, i32* %ip.global-to-local, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  %v5_a580 = mul nuw nsw i32 %v3_a578, 4
  %v6_a580 = add i32 %v5_a580, %v4_a574
  %v7_a580 = inttoptr i32 %v6_a580 to i32*
  store i32 %v0_a580, i32* %v7_a580, align 4
  %v0_a584 = load i32, i32* %r3.global-to-local, align 4
  %v1_a584 = load i32, i32* @r7, align 4
  %v2_a584 = add i32 %v1_a584, %v0_a584
  store i32 %v2_a584, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a590 = load i32, i32* %ip.global-to-local, align 4
  %v1_a590 = load i32, i32* @r6, align 4
  %v2_a590 = inttoptr i32 %v1_a590 to i32*
  store i32 %v0_a590, i32* %v2_a590, align 4
  %v0_a594 = load i32, i32* %r2.global-to-local, align 4
  %v1_a594 = trunc i32 %v0_a594 to i8
  %v2_a594 = load i32, i32* @r4, align 4
  %v3_a594 = inttoptr i32 %v2_a594 to i8*
  store i8 %v1_a594, i8* %v3_a594, align 1
  %v2_a598 = call i32 @function_114c4(i32 %v1_a584, i32 8)
  %v2_a59c = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a59c = zext i8 %v2_a59c to i32
  store i32 ptrtoint (i32* @global_var_ae1c.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a598, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a5ac = mul nuw nsw i32 %v3_a59c, 4
  store i32 %v3_a5ac, i32* %r1.global-to-local, align 4
  %v2_a5b0 = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a5b4 = inttoptr i32 %v2_a598 to i32*
  store i32 ptrtoint (i32* @global_var_ae1c.72 to i32), i32* %v2_a5b4, align 4
  %v0_a5b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5b8 = trunc i32 %v0_a5b8 to i8
  %v2_a5b8 = load i32, i32* @r5, align 4
  %v3_a5b8 = add i32 %v2_a5b8, 4
  %v4_a5b8 = inttoptr i32 %v3_a5b8 to i8*
  store i8 %v1_a5b8, i8* %v4_a5b8, align 1
  %v0_a5bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5bc = add i32 %v0_a5bc, 4
  store i32 %v1_a5bc, i32* %r1.global-to-local, align 4
  %v4_a5c0 = call i32 @function_1160c(i32 %v2_a5b0, i32 %v1_a5bc)
  %v2_a5c4 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a5c4 = zext i8 %v2_a5c4 to i32
  store i32 %v3_a5c4, i32* %r3.global-to-local, align 4
  store i32 %v4_a5c0, i32* %ip.global-to-local, align 4
  %v0_a5cc = load i32, i32* @r5, align 4
  %v5_a5cc = mul nuw nsw i32 %v3_a5c4, 4
  %v6_a5cc = add i32 %v5_a5cc, %v4_a5c0
  %v7_a5cc = inttoptr i32 %v6_a5cc to i32*
  store i32 %v0_a5cc, i32* %v7_a5cc, align 4
  %v0_a5d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5d0 = load i32, i32* @r7, align 4
  %v2_a5d0 = add i32 %v1_a5d0, %v0_a5d0
  store i32 %v2_a5d0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5dc = load i32, i32* @r6, align 4
  %v2_a5dc = inttoptr i32 %v1_a5dc to i32*
  store i32 %v0_a5dc, i32* %v2_a5dc, align 4
  %v0_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a5e0 = trunc i32 %v0_a5e0 to i8
  %v2_a5e0 = load i32, i32* @r4, align 4
  %v3_a5e0 = inttoptr i32 %v2_a5e0 to i8*
  store i8 %v1_a5e0, i8* %v3_a5e0, align 1
  %v2_a5e4 = call i32 @function_114c4(i32 %v1_a5d0, i32 8)
  %v2_a5e8 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a5e8 = zext i8 %v2_a5e8 to i32
  store i32 ptrtoint (i32* @global_var_a6a0.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a5e4, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a5f8 = mul nuw nsw i32 %v3_a5e8, 4
  store i32 %v3_a5f8, i32* %r1.global-to-local, align 4
  %v2_a5fc = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a600 = inttoptr i32 %v2_a5e4 to i32*
  store i32 ptrtoint (i32* @global_var_a6a0.74 to i32), i32* %v2_a600, align 4
  %v0_a604 = load i32, i32* %r3.global-to-local, align 4
  %v1_a604 = trunc i32 %v0_a604 to i8
  %v2_a604 = load i32, i32* @r5, align 4
  %v3_a604 = add i32 %v2_a604, 4
  %v4_a604 = inttoptr i32 %v3_a604 to i8*
  store i8 %v1_a604, i8* %v4_a604, align 1
  %v0_a608 = load i32, i32* %r1.global-to-local, align 4
  %v1_a608 = add i32 %v0_a608, 4
  store i32 %v1_a608, i32* %r1.global-to-local, align 4
  %v4_a60c = call i32 @function_1160c(i32 %v2_a5fc, i32 %v1_a608)
  %v2_a610 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a610 = zext i8 %v2_a610 to i32
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  store i32 %v4_a60c, i32* %ip.global-to-local, align 4
  %v0_a618 = load i32, i32* @r5, align 4
  %v5_a618 = mul nuw nsw i32 %v3_a610, 4
  %v6_a618 = add i32 %v5_a618, %v4_a60c
  %v7_a618 = inttoptr i32 %v6_a618 to i32*
  store i32 %v0_a618, i32* %v7_a618, align 4
  %v0_a61c = load i32, i32* %r3.global-to-local, align 4
  %v1_a61c = load i32, i32* @r7, align 4
  %v2_a61c = add i32 %v1_a61c, %v0_a61c
  store i32 %v2_a61c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a628 = trunc i32 %v2_a61c to i8
  %v2_a628 = load i32, i32* @r4, align 4
  %v3_a628 = inttoptr i32 %v2_a628 to i8*
  store i8 %v1_a628, i8* %v3_a628, align 1
  %v0_a62c = load i32, i32* %ip.global-to-local, align 4
  %v1_a62c = load i32, i32* @r6, align 4
  %v2_a62c = inttoptr i32 %v1_a62c to i32*
  store i32 %v0_a62c, i32* %v2_a62c, align 4
  %v2_a630 = call i32 @function_114c4(i32 %v1_a61c, i32 8)
  %v2_a634 = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a634 = zext i8 %v2_a634 to i32
  store i32 ptrtoint (i32* @global_var_81cc.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a630, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a644 = mul nuw nsw i32 %v3_a634, 4
  store i32 %v3_a644, i32* %r1.global-to-local, align 4
  %v2_a648 = load i32, i32* @global_var_1bc5c.57, align 4
  %v2_a64c = inttoptr i32 %v2_a630 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.76 to i32), i32* %v2_a64c, align 4
  %v0_a650 = load i32, i32* %r3.global-to-local, align 4
  %v1_a650 = trunc i32 %v0_a650 to i8
  %v2_a650 = load i32, i32* @r5, align 4
  %v3_a650 = add i32 %v2_a650, 4
  %v4_a650 = inttoptr i32 %v3_a650 to i8*
  store i8 %v1_a650, i8* %v4_a650, align 1
  %v0_a654 = load i32, i32* %r1.global-to-local, align 4
  %v1_a654 = add i32 %v0_a654, 4
  store i32 %v1_a654, i32* %r1.global-to-local, align 4
  %v4_a658 = call i32 @function_1160c(i32 %v2_a648, i32 %v1_a654)
  %v2_a65c = load i8, i8* bitcast (i8** @global_var_1bc58.55 to i8*), align 4
  %v3_a65c = zext i8 %v2_a65c to i32
  store i32 %v3_a65c, i32* %r3.global-to-local, align 4
  %v1_a660 = load i32, i32* @r6, align 4
  %v2_a660 = inttoptr i32 %v1_a660 to i32*
  store i32 %v4_a658, i32* %v2_a660, align 4
  %v0_a664 = load i32, i32* @r5, align 4
  %v2_a664 = load i32, i32* %r3.global-to-local, align 4
  %v5_a664 = mul i32 %v2_a664, 4
  %v6_a664 = add i32 %v5_a664, %v4_a658
  %v7_a664 = inttoptr i32 %v6_a664 to i32*
  store i32 %v0_a664, i32* %v7_a664, align 4
  %v0_a668 = load i32, i32* %r3.global-to-local, align 4
  %v1_a668 = load i32, i32* @r7, align 4
  %v2_a668 = add i32 %v1_a668, %v0_a668
  store i32 %v2_a668, i32* %r2.global-to-local, align 4
  %v1_a670 = trunc i32 %v2_a668 to i8
  %v2_a670 = load i32, i32* @r4, align 4
  %v3_a670 = inttoptr i32 %v2_a670 to i8*
  store i8 %v1_a670, i8* %v3_a670, align 1
  %v2_a674 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a674, i32* @r4, align 4
  store i32 %v6_a408, i32* @r5, align 4
  store i32 %v9_a408, i32* @r6, align 4
  store i32 %v12_a408, i32* @r7, align 4
  ret i32 %v1_a668

; uselistorder directives
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i32 %v1_a61c, { 1, 0 }
  uselistorder i32 %v1_a5d0, { 1, 0 }
  uselistorder i32 %v1_a584, { 1, 0 }
  uselistorder i32 %v1_a538, { 1, 0 }
  uselistorder i32 %v1_a4ec, { 1, 0 }
  uselistorder i32 %v1_a4a0, { 1, 0 }
  uselistorder i32 %v1_a454, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* @global_var_1bc5c.57, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i8* bitcast (i8** @global_var_1bc58.55 to i8*), { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a6a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a6a0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a6a0 = load i32, i32* @r4, align 4
  %v15_a6a0 = load i32, i32* @r8, align 4
  %v21_a6a0 = load i32, i32* @sl, align 4
  %v1_a6a4 = urem i32 %arg1, 256
  store i32 %v1_a6a4, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a6bc = urem i32 %arg3, 256
  store i32 %v1_a6bc, i32* @r4, align 4
  %v2_a6c0 = call i32 @function_114c4(i32 %v1_a6a4, i32 4)
  %v0_a6c4 = load i32, i32* @r5, align 4
  store i32 %v0_a6c4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a6d4 = load i32, i32* @r4, align 4
  store i32 %v0_a6d4, i32* %r0.global-to-local, align 4
  %v5_a6d8 = inttoptr i32 %v0_a6c4 to i32*
  %v6_a6d8 = call i32 @function_a398(i32 %v0_a6d4, i32* %v5_a6d8, i32 2, i32 0)
  %v1_a6e4 = urem i32 %v6_a6d8, 256
  store i32 %v1_a6e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a6f0 = load i32, i32* @r5, align 4
  store i32 %v0_a6f0, i32* %r1.global-to-local, align 4
  %v0_a6f4 = load i32, i32* @r4, align 4
  store i32 %v0_a6f4, i32* %r0.global-to-local, align 4
  %v5_a6f8 = trunc i32 %v6_a6d8 to i8
  %v6_a6fc = inttoptr i32 %v0_a6f0 to i32*
  %v7_a6fc = call i32 @function_a398(i32 %v0_a6f4, i32* %v6_a6fc, i32 3, i32 65535)
  %v0_a700 = load i32, i32* @r5, align 4
  store i32 %v0_a700, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a6fc, i32* @r7, align 4
  %v0_a710 = load i32, i32* @r4, align 4
  store i32 %v0_a710, i32* %r0.global-to-local, align 4
  %v4_a714 = inttoptr i32 %v0_a700 to i32*
  %v5_a714 = call i32 @function_a398(i32 %v0_a710, i32* %v4_a714, i32 4, i32 64)
  %v1_a71c = urem i32 %v5_a714, 256
  store i32 %v1_a71c, i32* %ip.global-to-local, align 4
  %v0_a720 = load i32, i32* @r5, align 4
  store i32 %v0_a720, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a72c = load i32, i32* @r4, align 4
  store i32 %v0_a72c, i32* %r0.global-to-local, align 4
  %v5_a730 = trunc i32 %v5_a714 to i8
  %v6_a734 = inttoptr i32 %v0_a720 to i32*
  %v7_a734 = call i32 @function_a398(i32 %v0_a72c, i32* %v6_a734, i32 5, i32 1)
  %v1_a740 = urem i32 %v7_a734, 256
  store i32 %v1_a740, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a74c = load i32, i32* @r5, align 4
  store i32 %v0_a74c, i32* %r1.global-to-local, align 4
  %v0_a750 = load i32, i32* @r4, align 4
  store i32 %v0_a750, i32* %r0.global-to-local, align 4
  %v5_a758 = inttoptr i32 %v0_a74c to i32*
  %v6_a758 = call i32 @function_a398(i32 %v0_a750, i32* %v5_a758, i32 6, i32 65535)
  %v0_a760 = load i32, i32* @r5, align 4
  store i32 %v0_a760, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a758, i32* @sl, align 4
  %v0_a770 = load i32, i32* @r4, align 4
  store i32 %v0_a770, i32* %r0.global-to-local, align 4
  %v4_a774 = inttoptr i32 %v0_a760 to i32*
  %v5_a774 = call i32 @function_a398(i32 %v0_a770, i32* %v4_a774, i32 7, i32 65535)
  %v0_a778 = load i32, i32* @r5, align 4
  store i32 %v0_a778, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a774, i32* @r8, align 4
  %v0_a788 = load i32, i32* @r4, align 4
  store i32 %v0_a788, i32* %r0.global-to-local, align 4
  %v4_a78c = inttoptr i32 %v0_a778 to i32*
  %v5_a78c = call i32 @function_a398(i32 %v0_a788, i32* %v4_a78c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a79c = load i32, i32* @r5, align 4
  store i32 %v0_a79c, i32* %r1.global-to-local, align 4
  %v0_a7a0 = load i32, i32* @r4, align 4
  store i32 %v0_a7a0, i32* %r0.global-to-local, align 4
  %v4_a7a4 = inttoptr i32 %v0_a79c to i32*
  %v5_a7a4 = call i32 @function_a398(i32 %v0_a7a0, i32* %v4_a7a4, i32 1, i32 1)
  %v1_a7ac = urem i32 %v5_a7a4, 256
  store i32 %v1_a7ac, i32* %ip.global-to-local, align 4
  %v0_a7b0 = load i32, i32* @r5, align 4
  store i32 %v0_a7b0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a7bc = load i32, i32* @r4, align 4
  store i32 %v0_a7bc, i32* %r0.global-to-local, align 4
  %v5_a7c4 = inttoptr i32 %v0_a7b0 to i32*
  %v6_a7c4 = call i32 @function_a398(i32 %v0_a7bc, i32* %v5_a7c4, i32 19, i32 0)
  %v0_a7cc = load i32, i32* @r5, align 4
  store i32 %v0_a7cc, i32* %r1.global-to-local, align 4
  %v2_a7d0 = load i32, i32* @global_var_1bcbc.78, align 4
  store i32 %v2_a7d0, i32* %r3.global-to-local, align 4
  store i32 %v6_a7c4, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a7dc = load i32, i32* @r4, align 4
  store i32 %v0_a7dc, i32* %r0.global-to-local, align 4
  %v4_a7e0 = inttoptr i32 %v0_a7cc to i32*
  %v5_a7e0 = call i32 @function_a398(i32 %v0_a7dc, i32* %v4_a7e0, i32 25, i32 %v2_a7d0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a7f4 = call i32 @function_111c0(i32 2, i32 3, i32 6)
  store i32 %v3_a7f4, i32* %r0.global-to-local, align 4
  %v7_a7f8 = icmp eq i32 %v3_a7f4, -1
  store i1 %v7_a7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a7f8, label %dec_label_pc_acdc, label %dec_label_pc_a804

dec_label_pc_a804:                                ; preds = %dec_label_pc_a6a0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a80c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a80c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a820 = call i32 @function_11190(i32 %v3_a7f4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a820, i32* %r0.global-to-local, align 4
  %v7_a824 = icmp eq i32 %v6_a820, -1
  store i1 %v7_a824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a824, label %dec_label_pc_acd4, label %dec_label_pc_a82c

dec_label_pc_a82c:                                ; preds = %dec_label_pc_a804
  %v0_a82c = load i32, i32* @sl, align 4
  %v3_a82c = mul i32 %v0_a82c, 65536
  store i32 %v3_a82c, i32* %sl.global-to-local, align 4
  %v0_a830 = load i32, i32* @r8, align 4
  %v3_a830 = mul i32 %v0_a830, 65536
  store i32 %v3_a830, i32* %r8.global-to-local, align 4
  %v0_a838 = load i32, i32* @r7, align 4
  %v3_a838 = mul i32 %v0_a838, 65536
  %v0_a83c = load i32, i32* @r6, align 4
  %v1_a83c = urem i32 %v0_a83c, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a844 = urem i32 %v0_a838, 65536
  store i32 %v3_a844, i32* %r2.global-to-local, align 4
  %v3_a848 = urem i32 %v0_a82c, 65536
  store i32 %v3_a848, i32* %r3.global-to-local, align 4
  %v3_a84c = urem i32 %v0_a830, 65536
  store i32 %v3_a84c, i32* %r1.global-to-local, align 4
  %v0_a850 = load i32, i32* @fp, align 4
  %v2_a850 = icmp eq i32 %v0_a850, 0
  store i1 %v2_a850, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_a850, 1
  br i1 %tmp88, label %dec_label_pc_adfc, label %dec_label_pc_a870

dec_label_pc_a870:                                ; preds = %dec_label_pc_a82c
  %v3_a874 = mul i32 %v5_a78c, 65536
  %v0_a838.not = or i32 %v0_a838, -65536
  %v1_a87c = xor i32 %v0_a838.not, 65535
  %v1_a884 = add i32 %v3_a874, 4325376
  %v1_a888 = urem i32 %v0_a82c, 256
  %v3_a890 = udiv i32 %v1_a884, 256
  %v1_a894 = add i32 %v3_a874, 524288
  %v1_a89c = add i32 %v3_a874, 1835008
  %v1_a8a0 = urem i32 %v0_a830, 256
  %v1_a8a4 = and i32 %v3_a890, 65280
  store i32 %v1_a8a4, i32* %r0.global-to-local, align 4
  %v3_a8ac = udiv i32 %v1_a89c, 256
  %tmp89 = mul nsw i32 %v1_a87c, 256
  %v1_a8c4 = and i32 %v3_a8ac, 65280
  store i32 %v1_a8c4, i32* %ip.global-to-local, align 4
  %v1_a8c8 = and i32 %tmp89, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_a8c8, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_a87c, 256
  %v4_a8b4 = sdiv i32 %v1_a884, 16777216
  %v5_a8e4 = trunc i32 %tmp91 to i8
  %v3_a8f0 = mul nuw nsw i32 %v1_a888, 256
  %v3_a8f8 = ashr i32 %v1_a884, 31
  %v3_a8fc = mul nuw nsw i32 %v1_a8a0, 256
  store i32 %v3_a8fc, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_a82c, 256
  %v4_a900 = urem i32 %tmp92, 256
  %v5_a900 = or i32 %v4_a900, %v3_a8f0
  store i32 %v5_a900, i32* @r7, align 4
  %v3_a904 = udiv i32 %v1_a894, 256
  %tmp93 = udiv i32 %v0_a830, 256
  %v4_a908 = urem i32 %tmp93, 256
  %v5_a908 = or i32 %v4_a908, %v3_a8fc
  store i32 %v5_a908, i32* %sl.global-to-local, align 4
  %v5_a90c = trunc i32 %v3_a8f8 to i8
  %v3_a914 = sdiv i32 %v3_a838, 16777216
  %v7_a914 = sdiv i32 %v1_a89c, 16777216
  %v1_a918 = and i32 %v3_a904, 65280
  store i32 %v1_a918, i32* @r6, align 4
  %v3_a91c = ashr i32 %v3_a838, 31
  %v3_a920 = ashr i32 %v1_a89c, 31
  %v3_a924 = udiv i32 %v1_a87c, 65536
  %v4_a928 = udiv i32 %v1_a894, 16777216
  %v5_a928 = or i32 %v4_a928, %v1_a918
  store i32 %v5_a928, i32* %r8.global-to-local, align 4
  store i32 %v1_a888, i32* %r1.global-to-local, align 4
  store i32 %v1_a8a0, i32* %r2.global-to-local, align 4
  %v3_a94037 = udiv i32 %v1_a918, 256
  store i32 %v3_a94037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_a9a0 = sext i8 %v5_a730 to i32
  %v2_aaa0 = icmp eq i32 %v1_a83c, 0
  %sext16 = mul i32 %v0_a82c, 16777216
  %v4_aab4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_a894, 256
  %v4_aac8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_a830, 16777216
  %v4_aad0 = sdiv i32 %sext18, 16777216
  %v1_aad8 = trunc i32 %v4_aac8 to i8
  br label %dec_label_pc_a954

dec_label_pc_a954:                                ; preds = %bb105, %dec_label_pc_a870
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a960 = call i32 @function_114c4(i32 1510, i32 4)
  store i32 %v2_a960, i32* %r0.global-to-local, align 4
  store i32 %v2_a6c0, i32* %r1.global-to-local, align 4
  %v3_a968 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a968, i32* %r3.global-to-local, align 4
  %v2_a96c = load i32, i32* @r4, align 4
  %v5_a96c = mul i32 %v2_a96c, 4
  %v6_a96c = add i32 %v5_a96c, %v2_a6c0
  %v7_a96c = inttoptr i32 %v6_a96c to i32*
  store i32 %v2_a960, i32* %v7_a96c, align 4
  %v0_a970 = load i32, i32* %r1.global-to-local, align 4
  %v1_a970 = load i32, i32* %r3.global-to-local, align 4
  %v4_a970 = mul i32 %v1_a970, 4
  %v5_a970 = add i32 %v4_a970, %v0_a970
  %v6_a970 = inttoptr i32 %v5_a970 to i32*
  %v7_a970 = load i32, i32* %v6_a970, align 4
  store i32 %v7_a970, i32* %r4.global-to-local, align 4
  %v1_a974 = inttoptr i32 %v7_a970 to i8*
  %v2_a974 = load i8, i8* %v1_a974, align 1
  %tmp = urem i8 %v2_a974, 16
  %v1_a978 = zext i8 %tmp to i32
  %v1_a97c = or i32 %v1_a978, 64
  store i32 %v1_a97c, i32* %r2.global-to-local, align 4
  %v1_a980 = trunc i32 %v1_a97c to i8
  store i8 %v1_a980, i8* %v1_a974, align 1
  %v0_a984 = load i32, i32* %r4.global-to-local, align 4
  %v1_a984 = inttoptr i32 %v0_a984 to i8*
  %v2_a984 = load i8, i8* %v1_a984, align 1
  %v1_a988 = and i8 %v2_a984, -16
  %v1_a98c = or i8 %v1_a988, 5
  store i32 %v1_a740, i32* %r2.global-to-local, align 4
  store i8 %v1_a98c, i8* %v1_a984, align 1
  %v2_a99c = load i32, i32* %r4.global-to-local, align 4
  %v3_a99c = add i32 %v2_a99c, 1
  %v4_a99c = inttoptr i32 %v3_a99c to i8*
  store i8 %v5_a6f8, i8* %v4_a99c, align 1
  store i32 %v4_a9a0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a9a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a9a8 = add i32 %v2_a9a8, 8
  %v4_a9a8 = inttoptr i32 %v3_a9a8 to i8*
  store i8 %v5_a730, i8* %v4_a9a8, align 1
  %v0_a9ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a9ac = load i32, i32* %ip.global-to-local, align 4
  %v9_a9ac = icmp eq i32 %v0_a9ac, %v1_a9ac
  store i1 %v9_a9ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a8f8, i32* %r3.global-to-local, align 4
  store i32 %v4_a8b4, i32* %r2.global-to-local, align 4
  %v2_a9b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a9b8 = add i32 %v2_a9b8, 3
  %v4_a9b8 = inttoptr i32 %v3_a9b8 to i8*
  store i8 %v5_a90c, i8* %v4_a9b8, align 1
  %v0_a9bc = load i32, i32* %r2.global-to-local, align 4
  %v1_a9bc = trunc i32 %v0_a9bc to i8
  %v2_a9bc = load i32, i32* %r4.global-to-local, align 4
  %v3_a9bc = add i32 %v2_a9bc, 2
  %v4_a9bc = inttoptr i32 %v3_a9bc to i8*
  store i8 %v1_a9bc, i8* %v4_a9bc, align 1
  %v0_a9c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a9c0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_a954
  store i32 %v3_a91c, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_a91c to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_a954
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_a91c, i32* %r2.global-to-local, align 4
  %v3_a9c8 = load i32, i32* %r4.global-to-local, align 4
  %v4_a9c8 = add i32 %v3_a9c8, 6
  %v5_a9c8 = inttoptr i32 %v4_a9c8 to i8*
  store i8 64, i8* %v5_a9c8, align 1
  %v0_a9d0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_a9d0.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_a91c.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_a9d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a9d0 = add i32 %v2_a9d0, 5
  %v4_a9d0 = inttoptr i32 %v3_a9d0 to i8*
  store i8 %v3_a91c.sink.off0, i8* %v4_a9d0, align 1
  store i32 %v3_a914, i32* %r1.global-to-local, align 4
  %v0_a9d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a9d8, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_a9d8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_a9d8, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_a9dc = load i32, i32* %r3.global-to-local, align 4
  %v1_a9dc = trunc i32 %v0_a9dc to i8
  %v2_a9dc = load i32, i32* %r4.global-to-local, align 4
  %v3_a9dc = add i32 %v2_a9dc, 9
  %v4_a9dc = inttoptr i32 %v3_a9dc to i8*
  store i8 %v1_a9dc, i8* %v4_a9dc, align 1
  %v0_a9e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a9e0, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_a9e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a9e0 = trunc i32 %v1_a9e0 to i8
  %v3_a9e0 = load i32, i32* %r4.global-to-local, align 4
  %v4_a9e0 = add i32 %v3_a9e0, 7
  %v5_a9e0 = inttoptr i32 %v4_a9e0 to i8*
  store i8 %v2_a9e0, i8* %v5_a9e0, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_a9e4 = load i32, i32* %stack_var_-40, align 4
  %v5_a9ec = mul i32 %v3_a9e4, 24
  store i32 %v5_a9ec, i32* %r3.global-to-local, align 4
  store i32 %v5_a7e0, i32* %r2.global-to-local, align 4
  %v1_a9f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_a9f4 = add i32 %v1_a9f4, 12
  %v3_a9f4 = inttoptr i32 %v2_a9f4 to i32*
  store i32 %v5_a7e0, i32* %v3_a9f4, align 4
  %v0_a9f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9f8 = load i32, i32* @sb, align 4
  %v2_a9f8 = add i32 %v1_a9f8, %v0_a9f8
  store i32 %v2_a9f8, i32* %r3.global-to-local, align 4
  %v1_a9fc = add i32 %v2_a9f8, 16
  %v2_a9fc = inttoptr i32 %v1_a9fc to i32*
  %v3_a9fc = load i32, i32* %v2_a9fc, align 4
  store i32 %v3_a9fc, i32* %r2.global-to-local, align 4
  %v0_aa00 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa00 = trunc i32 %v0_aa00 to i8
  %v2_aa00 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa00 = add i32 %v2_aa00, 4
  %v4_aa00 = inttoptr i32 %v3_aa00 to i8*
  store i8 %v1_aa00, i8* %v4_aa00, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa08 = add i32 %v0_aa08, 20
  store i32 %v1_aa08, i32* %r1.global-to-local, align 4
  %v3_aa0c = add i32 %v0_aa08, 22
  %v4_aa0c = inttoptr i32 %v3_aa0c to i8*
  store i8 101, i8* %v4_aa0c, align 1
  %v0_aa10 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa10 = load i32, i32* %r4.global-to-local, align 4
  %v2_aa10 = add i32 %v1_aa10, 16
  %v3_aa10 = inttoptr i32 %v2_aa10 to i32*
  store i32 %v0_aa10, i32* %v3_aa10, align 4
  %v0_aa14 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa14 = add i32 %v0_aa14, 24
  store i32 %v1_aa14, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_aa1c = load i32, i32* %r3.global-to-local, align 4
  %v1_aa1c = add i32 %v0_aa1c, -93
  store i32 %v1_aa1c, i32* %r3.global-to-local, align 4
  %v2_aa20 = load i32, i32* %r1.global-to-local, align 4
  %v3_aa20 = add i32 %v2_aa20, 3
  %v4_aa20 = inttoptr i32 %v3_aa20 to i8*
  store i8 88, i8* %v4_aa20, align 1
  %v0_aa24 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa24 = trunc i32 %v0_aa24 to i8
  %v2_aa24 = load i32, i32* %r0.global-to-local, align 4
  %v3_aa24 = add i32 %v2_aa24, 12
  %v4_aa24 = inttoptr i32 %v3_aa24 to i8*
  store i8 %v1_aa24, i8* %v4_aa24, align 1
  %v0_aa28 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* %r0.global-to-local, align 4
  %v3_aa28 = add i32 %v2_aa28, 13
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa2c = add i32 %v0_aa2c, 38
  %v2_aa2c = inttoptr i32 %v1_aa2c to i8*
  %v3_aa2c = load i8, i8* %v2_aa2c, align 1
  %tmp116 = urem i8 %v3_aa2c, 16
  %v1_aa30 = zext i8 %tmp116 to i32
  %v1_aa34 = or i32 %v1_aa30, 64
  store i32 %v1_aa34, i32* %r3.global-to-local, align 4
  %v1_aa38 = trunc i32 %v1_aa34 to i8
  store i8 %v1_aa38, i8* %v2_aa2c, align 1
  %v0_aa3c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa3c = add i32 %v0_aa3c, 38
  %v2_aa3c = inttoptr i32 %v1_aa3c to i8*
  %v3_aa3c = load i8, i8* %v2_aa3c, align 1
  %v1_aa40 = and i8 %v3_aa3c, -16
  %v1_aa44 = or i8 %v1_aa40, 5
  store i8 %v1_aa44, i8* %v2_aa3c, align 1
  %v0_aa50 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa50 = add i32 %v0_aa50, 38
  store i32 %v1_aa50, i32* @r5, align 4
  %v3_aa54 = add i32 %v0_aa50, 39
  %v4_aa54 = inttoptr i32 %v3_aa54 to i8*
  store i8 %v5_a6f8, i8* %v4_aa54, align 1
  store i32 %v7_a914, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_a920, i32* %r2.global-to-local, align 4
  %v2_aa64 = load i32, i32* @r5, align 4
  %v3_aa64 = add i32 %v2_aa64, 4
  %v4_aa64 = inttoptr i32 %v3_aa64 to i8*
  store i8 %v5_a8e4, i8* %v4_aa64, align 1
  %v0_aa68 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa68 = trunc i32 %v0_aa68 to i8
  %v2_aa68 = load i32, i32* @r5, align 4
  %v3_aa68 = add i32 %v2_aa68, 2
  %v4_aa68 = inttoptr i32 %v3_aa68 to i8*
  store i8 %v1_aa68, i8* %v4_aa68, align 1
  %v0_aa6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa6c, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_a924, i32* %r1.global-to-local, align 4
  %v0_aa74 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa74 = trunc i32 %v0_aa74 to i8
  %v2_aa74 = load i32, i32* @r5, align 4
  %v3_aa74 = add i32 %v2_aa74, 3
  %v4_aa74 = inttoptr i32 %v3_aa74 to i8*
  store i8 %v1_aa74, i8* %v4_aa74, align 1
  store i32 %v4_a9a0, i32* %r2.global-to-local, align 4
  %v0_aa7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa7c, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_aa7c = load i32, i32* %r3.global-to-local, align 4
  %v2_aa7c = trunc i32 %v1_aa7c to i8
  %v3_aa7c = load i32, i32* @r5, align 4
  %v4_aa7c = add i32 %v3_aa7c, 6
  %v5_aa7c = inttoptr i32 %v4_aa7c to i8*
  store i8 %v2_aa7c, i8* %v5_aa7c, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_aa84 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa84 = trunc i32 %v0_aa84 to i8
  %v2_aa84 = load i32, i32* @r5, align 4
  %v3_aa84 = add i32 %v2_aa84, 5
  %v4_aa84 = inttoptr i32 %v3_aa84 to i8*
  store i8 %v1_aa84, i8* %v4_aa84, align 1
  %v0_aa88 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa88 = trunc i32 %v0_aa88 to i8
  %v2_aa88 = load i32, i32* @r5, align 4
  %v3_aa88 = add i32 %v2_aa88, 8
  %v4_aa88 = inttoptr i32 %v3_aa88 to i8*
  store i8 %v1_aa88, i8* %v4_aa88, align 1
  %v0_aa8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa8c, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_aa8c = load i32, i32* %ip.global-to-local, align 4
  %v2_aa8c = trunc i32 %v1_aa8c to i8
  %v3_aa8c = load i32, i32* @r5, align 4
  %v4_aa8c = add i32 %v3_aa8c, 7
  %v5_aa8c = inttoptr i32 %v4_aa8c to i8*
  store i8 %v2_aa8c, i8* %v5_aa8c, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_aa90 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa90 = trunc i32 %v0_aa90 to i8
  %v2_aa90 = load i32, i32* @r5, align 4
  %v3_aa90 = add i32 %v2_aa90, 9
  %v4_aa90 = inttoptr i32 %v3_aa90 to i8*
  store i8 %v1_aa90, i8* %v4_aa90, align 1
  %v0_aa94 = call i32 @function_eccc()
  store i32 %v0_aa94, i32* %r0.global-to-local, align 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  store i1 %v2_aaa0, i1* %cpsr_z.global-to-local, align 1
  %v1_aaa4 = sub i32 1023, %v0_aa94
  store i32 %v1_aaa4, i32* %r3.global-to-local, align 4
  br i1 %v2_aaa0, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_aaac = load i32, i32* @r5, align 4
  %v3_aaac = add i32 %v2_aaac, 16
  %v4_aaac = inttoptr i32 %v3_aaac to i32*
  store i32 %v1_aaa4, i32* %v4_aaac, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_aaa8 = load i32, i32* %r4.global-to-local, align 4
  %v2_aaa8 = add i32 %v1_aaa8, 16
  %v3_aaa8 = inttoptr i32 %v2_aaa8 to i32*
  %v4_aaa8 = load i32, i32* %v3_aaa8, align 4
  store i32 %v4_aaa8, i32* %r3.global-to-local, align 4
  %v2_aab0 = load i32, i32* @r5, align 4
  %v3_aab0 = add i32 %v2_aab0, 16
  %v4_aab0 = inttoptr i32 %v3_aab0 to i32*
  store i32 %v4_aaa8, i32* %v4_aab0, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_aab4, i32* %r3.global-to-local, align 4
  %v0_aab8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aab8 = add i32 %v0_aab8, 58
  store i32 %v1_aab8, i32* @r6, align 4
  %v1_aabc = load i32, i32* @r5, align 4
  %v2_aabc = add i32 %v1_aabc, 12
  %v3_aabc = inttoptr i32 %v2_aabc to i32*
  store i32 %v0_aa94, i32* %v3_aabc, align 4
  %v0_aac0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aac0 = trunc i32 %v0_aac0 to i8
  %v2_aac0 = load i32, i32* @r6, align 4
  %v3_aac0 = add i32 %v2_aac0, 1
  %v4_aac0 = inttoptr i32 %v3_aac0 to i8*
  store i8 %v1_aac0, i8* %v4_aac0, align 1
  %v3_aac4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aac4, i32* %r3.global-to-local, align 4
  store i32 %v4_aac8, i32* %r2.global-to-local, align 4
  %v1_aacc = add i32 %v3_aac4, 1
  store i32 %v1_aacc, i32* @r4, align 4
  store i32 %v4_aad0, i32* %r1.global-to-local, align 4
  %v1_aad4 = load i32, i32* @fp, align 4
  %v9_aad4 = icmp eq i32 %v1_aacc, %v1_aad4
  store i1 %v9_aad4, i1* %cpsr_z.global-to-local, align 1
  %v2_aad8 = load i32, i32* @r6, align 4
  %v3_aad8 = add i32 %v2_aad8, 5
  %v4_aad8 = inttoptr i32 %v3_aad8 to i8*
  store i8 %v1_aad8, i8* %v4_aad8, align 1
  %v0_aadc = load i32, i32* @r7, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r6, align 4
  %v3_aadc = inttoptr i32 %v2_aadc to i8*
  store i8 %v1_aadc, i8* %v3_aadc, align 1
  %v0_aae0 = load i32, i32* %sl.global-to-local, align 4
  %v1_aae0 = trunc i32 %v0_aae0 to i8
  %v2_aae0 = load i32, i32* @r6, align 4
  %v3_aae0 = add i32 %v2_aae0, 2
  %v4_aae0 = inttoptr i32 %v3_aae0 to i8*
  store i8 %v1_aae0, i8* %v4_aae0, align 1
  %v0_aae4 = load i32, i32* %r1.global-to-local, align 4
  %v1_aae4 = trunc i32 %v0_aae4 to i8
  %v2_aae4 = load i32, i32* @r6, align 4
  %v3_aae4 = add i32 %v2_aae4, 3
  %v4_aae4 = inttoptr i32 %v3_aae4 to i8*
  store i8 %v1_aae4, i8* %v4_aae4, align 1
  %v0_aae8 = load i32, i32* %r8.global-to-local, align 4
  %v1_aae8 = trunc i32 %v0_aae8 to i8
  %v2_aae8 = load i32, i32* @r6, align 4
  %v3_aae8 = add i32 %v2_aae8, 4
  %v4_aae8 = inttoptr i32 %v3_aae8 to i8*
  store i8 %v1_aae8, i8* %v4_aae8, align 1
  %v0_aaec = load i32, i32* @r4, align 4
  store i32 %v0_aaec, i32* %stack_var_-40, align 4
  %v5_aaf0 = icmp slt i32 %v1_aacc, %v1_aad4
  br i1 %v5_aaf0, label %dec_label_pc_a954, label %dec_label_pc_aaf4

dec_label_pc_aaf4:                                ; preds = %bb105
  %v1_aafc = add i32 %v5_a78c, 8
  store i32 %v1_aafc, i32* %r2.global-to-local, align 4
  %v1_ab00 = add i32 %v5_a78c, 66
  store i32 %v1_ab00, i32* %r3.global-to-local, align 4
  %v0_ab0c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_ab0c.preheader

dec_label_pc_ab0c.preheader:                      ; preds = %dec_label_pc_aaf4, %dec_label_pc_adfc
  %v0_ab0c.pre = phi i32 [ %v0_ab0c.pre.pre, %dec_label_pc_aaf4 ], [ %v0_a850, %dec_label_pc_adfc ]
  %stack_var_-160.0.ph = phi i32 [ %v1_ab00, %dec_label_pc_aaf4 ], [ %v1_ae08, %dec_label_pc_adfc ]
  %stack_var_-156.0.ph = phi i32 [ %v1_aafc, %dec_label_pc_aaf4 ], [ %v1_ae04, %dec_label_pc_adfc ]
  %v3_ad5c = icmp eq i32 %v3_a844, 65535
  %v2_adcc = icmp eq i32 %v1_a83c, 0
  %v2_abb0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_abc8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_abd8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_abe4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_abf8 = icmp eq i32 %v1_a7ac, 0
  %v2_ab54 = icmp eq i32 %v5_a7e0, -1
  %v7_ab54 = icmp eq i32 %v5_a7e0, -1
  br label %dec_label_pc_ab0c

dec_label_pc_ab0c:                                ; preds = %dec_label_pc_ac00, %dec_label_pc_ab0c.preheader
  %v0_ab0c = phi i32 [ %v0_ab0c.pre, %dec_label_pc_ab0c.preheader ], [ %v1_acc4, %dec_label_pc_ac00 ]
  %v2_ab0c = icmp eq i32 %v0_ab0c, 0
  store i1 %v2_ab0c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_ab0c, 1
  br label %dec_label_pc_ab14

dec_label_pc_ab14:                                ; preds = %dec_label_pc_ab14, %dec_label_pc_ab0c
  br i1 %tmp106, label %dec_label_pc_ab14, label %dec_label_pc_ab18

dec_label_pc_ab18:                                ; preds = %dec_label_pc_ab14
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ab24

dec_label_pc_ab24:                                ; preds = %dec_label_pc_ac00, %dec_label_pc_ab18
  %v1_ab38 = phi i32 [ %v1_acc0, %dec_label_pc_ac00 ], [ 0, %dec_label_pc_ab18 ]
  %v5_ab28 = mul i32 %v1_ab38, 24
  %v1_ab2c = load i32, i32* @sb, align 4
  %v2_ab2c = add i32 %v1_ab2c, %v5_ab28
  store i32 %v2_ab2c, i32* %r3.global-to-local, align 4
  store i32 %v2_a6c0, i32* %r1.global-to-local, align 4
  %v1_ab34 = add i32 %v2_ab2c, 20
  %v2_ab34 = inttoptr i32 %v1_ab34 to i8*
  %v3_ab34 = load i8, i8* %v2_ab34, align 1
  %v4_ab34 = zext i8 %v3_ab34 to i32
  store i32 %v4_ab34, i32* %r2.global-to-local, align 4
  %v4_ab38 = mul i32 %v1_ab38, 4
  %v5_ab38 = add i32 %v4_ab38, %v2_a6c0
  %v6_ab38 = inttoptr i32 %v5_ab38 to i32*
  %v7_ab38 = load i32, i32* %v6_ab38, align 4
  store i32 %v7_ab38, i32* @r5, align 4
  %v7_ab3c = icmp eq i8 %v3_ab34, 31
  store i1 %v7_ab3c, i1* %cpsr_z.global-to-local, align 1
  %v1_ab40 = add i32 %v7_ab38, 24
  store i32 %v1_ab40, i32* @r8, align 4
  %v1_ab44 = add i32 %v7_ab38, 38
  store i32 %v1_ab44, i32* @r6, align 4
  %v1_ab48 = add i32 %v7_ab38, 58
  store i32 %v1_ab48, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_ab34, 32
  br i1 %tmp117, label %dec_label_pc_ace4, label %dec_label_pc_ab50

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab24
  store i32 %v5_a7e0, i32* %r2.global-to-local, align 4
  store i1 %v7_ab54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab54, label %dec_label_pc_ad4c, label %dec_label_pc_ab5c

dec_label_pc_ab5c:                                ; preds = %dec_label_pc_ace4, %dec_label_pc_ab50
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ad5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ad5c, label %dec_label_pc_ad68, label %dec_label_pc_ab70

dec_label_pc_ab70:                                ; preds = %dec_label_pc_ad4c.dec_label_pc_ab70_crit_edge, %dec_label_pc_ab5c
  %v1_ab74 = phi i32 [ %v1_ab74.pre, %dec_label_pc_ad4c.dec_label_pc_ab70_crit_edge ], [ 65535, %dec_label_pc_ab5c ]
  store i32 %v3_a848, i32* %r1.global-to-local, align 4
  %v9_ab74 = icmp eq i32 %v3_a848, %v1_ab74
  store i1 %v9_ab74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab74, label %dec_label_pc_ada0, label %dec_label_pc_ab7c

dec_label_pc_ab7c:                                ; preds = %dec_label_pc_ad68.dec_label_pc_ab7c_crit_edge, %dec_label_pc_ab70
  %v1_ab80 = phi i32 [ %v1_ab80.pre, %dec_label_pc_ad68.dec_label_pc_ab7c_crit_edge ], [ %v1_ab74, %dec_label_pc_ab70 ]
  store i32 %v3_a84c, i32* %r2.global-to-local, align 4
  %v9_ab80 = icmp eq i32 %v3_a84c, %v1_ab80
  store i1 %v9_ab80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab80, label %dec_label_pc_adbc, label %dec_label_pc_ab88

dec_label_pc_ab88:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_ab7c
  store i32 %v1_a83c, i32* %r3.global-to-local, align 4
  store i1 %v2_adcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_adcc, label %dec_label_pc_ade0, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_ab88
  %v1_ab90 = load i32, i32* @r5, align 4
  %v2_ab90 = add i32 %v1_ab90, 16
  %v3_ab90 = inttoptr i32 %v2_ab90 to i32*
  %v4_ab90 = load i32, i32* %v3_ab90, align 4
  store i32 %v4_ab90, i32* %r3.global-to-local, align 4
  %v2_ab94 = load i32, i32* @r6, align 4
  %v3_ab94 = add i32 %v2_ab94, 16
  %v4_ab94 = inttoptr i32 %v3_ab94 to i32*
  store i32 %v4_ab90, i32* %v4_ab94, align 4
  br label %dec_label_pc_ab9c

dec_label_pc_ab9c:                                ; preds = %bb109, %.thread23, %dec_label_pc_ade0
  %v0_ab9c = call i32 @function_eccc()
  store i32 %v0_ab9c, i32* %r0.global-to-local, align 4
  store i32 %v0_ab9c, i32* %stack_var_-44, align 4
  %v0_aba4 = call i32 @function_eccc()
  store i32 %v0_aba4, i32* %r0.global-to-local, align 4
  store i32 %v0_aba4, i32* %stack_var_-48, align 4
  %v0_abac = call i32 @function_eccc()
  store i32 %v2_abb0, i32* %r1.global-to-local, align 4
  store i32 %v0_abac, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_abbc = load i32, i32* @r8, align 4
  store i32 %v0_abbc, i32* %r0.global-to-local, align 4
  %v3_abc0 = call i32 @function_ff80(i32 %v0_abbc, i32 %v2_abb0, i32 4)
  %v0_abc4 = load i32, i32* @r8, align 4
  %v1_abc4 = add i32 %v0_abc4, 6
  store i32 %v1_abc4, i32* %r0.global-to-local, align 4
  store i32 %v2_abc8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_abd0 = call i32 @function_ff80(i32 %v1_abc4, i32 %v2_abc8, i32 4)
  %v0_abd4 = load i32, i32* @r8, align 4
  %v1_abd4 = add i32 %v0_abd4, 4
  store i32 %v1_abd4, i32* %r0.global-to-local, align 4
  store i32 %v2_abd8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_abe0 = call i32 @function_ff80(i32 %v1_abd4, i32 %v2_abd8, i32 2)
  store i32 %v2_abe4, i32* %r1.global-to-local, align 4
  %v0_abe8 = load i32, i32* @r8, align 4
  %v1_abe8 = add i32 %v0_abe8, 10
  store i32 %v1_abe8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_abf0 = call i32 @function_ff80(i32 %v1_abe8, i32 %v2_abe4, i32 2)
  store i32 %v3_abf0, i32* %r0.global-to-local, align 4
  store i32 %v1_a7ac, i32* %r1.global-to-local, align 4
  store i1 %v2_abf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_abf8, label %dec_label_pc_ac00, label %dec_label_pc_adec

dec_label_pc_ac00:                                ; preds = %dec_label_pc_ab9c, %dec_label_pc_adec
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac04 = load i32, i32* @sl, align 4
  %v1_ac04 = trunc i32 %v0_ac04 to i8
  %v2_ac04 = load i32, i32* @r5, align 4
  %v3_ac04 = add i32 %v2_ac04, 10
  %v4_ac04 = inttoptr i32 %v3_ac04 to i8*
  store i8 %v1_ac04, i8* %v4_ac04, align 1
  %v0_ac08 = load i32, i32* @sl, align 4
  %v1_ac08 = trunc i32 %v0_ac08 to i8
  %v2_ac08 = load i32, i32* @r5, align 4
  %v3_ac08 = add i32 %v2_ac08, 11
  %v4_ac08 = inttoptr i32 %v3_ac08 to i8*
  store i8 %v1_ac08, i8* %v4_ac08, align 1
  %v0_ac0c = load i32, i32* @r5, align 4
  store i32 %v0_ac0c, i32* @r0, align 4
  %v2_ac10 = call i32 @function_d3f8(i32 %v0_ac0c, i32 20)
  %v3_ac10 = trunc i32 %v2_ac10 to i8
  %v4_ac14 = sdiv i32 %v2_ac10, 256
  store i32 %v4_ac14, i32* %r3.global-to-local, align 4
  %v1_ac18 = trunc i32 %v4_ac14 to i8
  %v2_ac18 = load i32, i32* @r5, align 4
  %v3_ac18 = add i32 %v2_ac18, 11
  %v4_ac18 = inttoptr i32 %v3_ac18 to i8*
  store i8 %v1_ac18, i8* %v4_ac18, align 1
  %v3_ac1c = load i32, i32* @r5, align 4
  %v4_ac1c = add i32 %v3_ac1c, 10
  %v5_ac1c = inttoptr i32 %v4_ac1c to i8*
  store i8 %v3_ac10, i8* %v5_ac1c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac24 = load i32, i32* @sl, align 4
  %v1_ac24 = trunc i32 %v0_ac24 to i8
  %v2_ac24 = load i32, i32* @r6, align 4
  %v3_ac24 = add i32 %v2_ac24, 10
  %v4_ac24 = inttoptr i32 %v3_ac24 to i8*
  store i8 %v1_ac24, i8* %v4_ac24, align 1
  %v0_ac28 = load i32, i32* @sl, align 4
  %v1_ac28 = trunc i32 %v0_ac28 to i8
  %v2_ac28 = load i32, i32* @r6, align 4
  %v3_ac28 = add i32 %v2_ac28, 11
  %v4_ac28 = inttoptr i32 %v3_ac28 to i8*
  store i8 %v1_ac28, i8* %v4_ac28, align 1
  %v0_ac2c = load i32, i32* @r6, align 4
  store i32 %v0_ac2c, i32* @r0, align 4
  %v2_ac30 = call i32 @function_d3f8(i32 %v0_ac2c, i32 20)
  %v3_ac30 = trunc i32 %v2_ac30 to i8
  store i32 %v2_ac30, i32* %r0.global-to-local, align 4
  %v4_ac34 = sdiv i32 %v2_ac30, 256
  store i32 %v4_ac34, i32* %r3.global-to-local, align 4
  %v3_ac38 = load i32, i32* @r6, align 4
  %v4_ac38 = add i32 %v3_ac38, 10
  %v5_ac38 = inttoptr i32 %v4_ac38 to i8*
  store i8 %v3_ac30, i8* %v5_ac38, align 1
  %v0_ac3c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac3c = trunc i32 %v0_ac3c to i8
  %v2_ac3c = load i32, i32* @r6, align 4
  %v3_ac3c = add i32 %v2_ac3c, 11
  %v4_ac3c = inttoptr i32 %v3_ac3c to i8*
  store i8 %v1_ac3c, i8* %v4_ac3c, align 1
  %v0_ac40 = load i32, i32* @r7, align 4
  %v1_ac40 = add i32 %v0_ac40, 4
  %v2_ac40 = inttoptr i32 %v1_ac40 to i8*
  %v3_ac40 = load i8, i8* %v2_ac40, align 1
  %v4_ac40 = zext i8 %v3_ac40 to i32
  store i32 %v4_ac40, i32* %r3.global-to-local, align 4
  %v1_ac44 = add i32 %v0_ac40, 5
  %v2_ac44 = inttoptr i32 %v1_ac44 to i8*
  %v3_ac44 = load i8, i8* %v2_ac44, align 1
  %v4_ac44 = zext i8 %v3_ac44 to i32
  store i32 %v0_ac40, i32* @r1, align 4
  %v4_ac4c = mul nuw nsw i32 %v4_ac44, 256
  %v5_ac4c = or i32 %v4_ac4c, %v4_ac40
  store i32 %v5_ac4c, i32* %r2.global-to-local, align 4
  %v0_ac50 = load i32, i32* @sl, align 4
  %v1_ac50 = trunc i32 %v0_ac50 to i8
  %v3_ac50 = add i32 %v0_ac40, 6
  %v4_ac50 = inttoptr i32 %v3_ac50 to i8*
  store i8 %v1_ac50, i8* %v4_ac50, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r7, align 4
  %v3_ac58 = add i32 %v2_ac58, 7
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i32, i32* @r6, align 4
  store i32 %v0_ac5c, i32* %r0.global-to-local, align 4
  %v4_ac60 = call i32 @function_d454(i32 %v0_ac5c, i32 %v0_ac40, i32 %v5_ac4c, i32 %stack_var_-156.0.ph)
  %v5_ac60 = trunc i32 %v4_ac60 to i8
  store i32 %v4_ac60, i32* %r0.global-to-local, align 4
  %v3_ac64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac64, i32* %r3.global-to-local, align 4
  %v3_ac68 = mul i32 %v3_ac64, 32
  store i32 %v3_ac68, i32* %r2.global-to-local, align 4
  %v0_ac6c = load i32, i32* @r5, align 4
  %v1_ac6c = add i32 %v0_ac6c, 16
  %v2_ac6c = inttoptr i32 %v1_ac6c to i32*
  %v3_ac6c = load i32, i32* %v2_ac6c, align 4
  store i32 %v3_ac6c, i32* %r1.global-to-local, align 4
  %v5_ac70 = mul i32 %v3_ac64, 24
  store i32 %v5_ac70, i32* %r2.global-to-local, align 4
  %v4_ac7442 = udiv i32 %v4_ac60, 256
  %v1_ac78 = trunc i32 %v4_ac7442 to i8
  %v2_ac78 = load i32, i32* @r7, align 4
  %v3_ac78 = add i32 %v2_ac78, 7
  %v4_ac78 = inttoptr i32 %v3_ac78 to i8*
  store i8 %v1_ac78, i8* %v4_ac78, align 1
  %v0_ac7c = load i32, i32* %r2.global-to-local, align 4
  %v1_ac7c = load i32, i32* @sb, align 4
  %v2_ac7c = add i32 %v1_ac7c, %v0_ac7c
  store i32 %v2_ac7c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_ac84 = load i32, i32* @r7, align 4
  %v4_ac84 = add i32 %v3_ac84, 6
  %v5_ac84 = inttoptr i32 %v4_ac84 to i8*
  store i8 %v5_ac60, i8* %v5_ac84, align 1
  %v0_ac88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac88 = load i32, i32* %lr.global-to-local, align 4
  %v2_ac88 = add i32 %v1_ac88, 4
  %v3_ac88 = inttoptr i32 %v2_ac88 to i32*
  store i32 %v0_ac88, i32* %v3_ac88, align 4
  %v0_ac8c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac8c = trunc i32 %v0_ac8c to i8
  %v2_ac8c = load i32, i32* %r2.global-to-local, align 4
  %v3_ac8c = load i32, i32* @sb, align 4
  %v4_ac8c = add i32 %v3_ac8c, %v2_ac8c
  %v5_ac8c = inttoptr i32 %v4_ac8c to i8*
  store i8 %v1_ac8c, i8* %v5_ac8c, align 1
  %v0_ac90 = load i32, i32* @sl, align 4
  %v1_ac90 = trunc i32 %v0_ac90 to i8
  %v2_ac90 = load i32, i32* %lr.global-to-local, align 4
  %v3_ac90 = add i32 %v2_ac90, 2
  %v4_ac90 = inttoptr i32 %v3_ac90 to i8*
  store i8 %v1_ac90, i8* %v4_ac90, align 1
  %v0_ac94 = load i32, i32* @sl, align 4
  %v1_ac94 = trunc i32 %v0_ac94 to i8
  %v2_ac94 = load i32, i32* %lr.global-to-local, align 4
  %v3_ac94 = add i32 %v2_ac94, 1
  %v4_ac94 = inttoptr i32 %v3_ac94 to i8*
  store i8 %v1_ac94, i8* %v4_ac94, align 1
  %v0_ac98 = load i32, i32* @sl, align 4
  %v1_ac98 = trunc i32 %v0_ac98 to i8
  %v2_ac98 = load i32, i32* %lr.global-to-local, align 4
  %v3_ac98 = add i32 %v2_ac98, 3
  %v4_ac98 = inttoptr i32 %v3_ac98 to i8*
  store i8 %v1_ac98, i8* %v4_ac98, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_aca4 = load i32, i32* @r5, align 4
  store i32 %v0_aca4, i32* %r1.global-to-local, align 4
  store i32 %v3_a7f4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_acb0 = load i32, i32* %lr.global-to-local, align 4
  %v6_acb8 = inttoptr i32 %v0_aca4 to i32*
  %v7_acb8 = call i32 @function_1115c(i32 %v3_a7f4, i32* %v6_acb8, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_acb0, i32 16)
  %v3_acbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_acbc, i32* %r3.global-to-local, align 4
  %v1_acc0 = add i32 %v3_acbc, 1
  store i32 %v1_acc0, i32* %r0.global-to-local, align 4
  %v1_acc4 = load i32, i32* @fp, align 4
  %v9_acc4 = icmp eq i32 %v1_acc0, %v1_acc4
  store i1 %v9_acc4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acc0, i32* %stack_var_-40, align 4
  %v6_accc = icmp slt i32 %v1_acc0, %v1_acc4
  br i1 %v6_accc, label %dec_label_pc_ab24, label %dec_label_pc_ab0c

dec_label_pc_acd4:                                ; preds = %dec_label_pc_a804
  store i32 %v3_a7f4, i32* %r0.global-to-local, align 4
  %v1_acd8 = call i32 @function_108c4(i32 %v3_a7f4)
  store i32 %v1_acd8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_acdc

dec_label_pc_acdc:                                ; preds = %dec_label_pc_a6a0, %dec_label_pc_acd4
  %v29_ace0 = phi i32 [ %v3_a7f4, %dec_label_pc_a6a0 ], [ %v1_acd8, %dec_label_pc_acd4 ]
  store i32 %v3_a6a0, i32* %r4.global-to-local, align 4
  store i32 %v15_a6a0, i32* %r8.global-to-local, align 4
  store i32 %v21_a6a0, i32* %sl.global-to-local, align 4
  ret i32 %v29_ace0

dec_label_pc_ace4:                                ; preds = %dec_label_pc_ab24
  %v1_ace4 = add i32 %v2_ab2c, 16
  %v2_ace4 = inttoptr i32 %v1_ace4 to i32*
  %v3_ace4 = load i32, i32* %v2_ace4, align 4
  store i32 %v3_ace4, i32* %r4.global-to-local, align 4
  %v0_ace8 = call i32 @function_eccc()
  store i32 %v0_ace8, i32* %r0.global-to-local, align 4
  %v3_acec = load i32, i32* %stack_var_-40, align 4
  %v5_acf4 = mul i32 %v3_acec, 24
  %v0_acf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_acfc = load i32, i32* @sb, align 4
  %v2_acfc = add i32 %v1_acfc, %v5_acf4
  store i32 %v2_acfc, i32* %r1.global-to-local, align 4
  %v1_ad00 = and i32 %v0_acf8, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_ad00, i32* %r3.global-to-local, align 4
  %v1_acf8 = udiv i32 %v0_acf8, 256
  %v3_ad04 = and i32 %v1_acf8, 65280
  store i32 %v3_ad04, i32* %r2.global-to-local, align 4
  %v3_ad08 = mul i32 %v0_acf8, 16777216
  store i32 %v3_ad08, i32* %ip.global-to-local, align 4
  %v1_ad0c = add i32 %v2_acfc, 20
  %v2_ad0c = inttoptr i32 %v1_ad0c to i8*
  %v3_ad0c = load i8, i8* %v2_ad0c, align 1
  %v4_ad0c = zext i8 %v3_ad0c to i32
  store i32 %v4_ad0c, i32* %lr.global-to-local, align 4
  %v4_ad10 = mul i32 %v1_ad00, 256
  %v5_ad10 = or i32 %v4_ad10, %v3_ad08
  store i32 %v5_ad10, i32* %ip.global-to-local, align 4
  %v4_ad14 = udiv i32 %v0_acf8, 16777216
  %v5_ad14 = or i32 %v3_ad04, %v4_ad14
  %v2_ad18 = or i32 %v5_ad14, %v5_ad10
  %v7_ad1c = lshr i32 %v0_ace8, %v4_ad0c
  %v8_ad1c = add i32 %v7_ad1c, %v2_ad18
  %v3_ad28 = mul i32 %v8_ad1c, 16777216
  %v1_ad2c = and i32 %v8_ad1c, 65280
  store i32 %v1_ad2c, i32* %r0.global-to-local, align 4
  store i32 %v5_a7e0, i32* %r2.global-to-local, align 4
  %v4_ad38 = mul nuw nsw i32 %v1_ad2c, 256
  %v5_ad38 = or i32 %v4_ad38, %v3_ad28
  store i32 %v5_ad38, i32* %r1.global-to-local, align 4
  %v2_ad3c = call i32 @llvm.bswap.i32(i32 %v8_ad1c)
  store i32 %v2_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v7_ab54, i1* %cpsr_z.global-to-local, align 1
  %v1_ad44 = load i32, i32* @r5, align 4
  %v2_ad44 = add i32 %v1_ad44, 16
  %v3_ad44 = inttoptr i32 %v2_ad44 to i32*
  store i32 %v2_ad3c, i32* %v3_ad44, align 4
  br i1 %v2_ab54, label %dec_label_pc_ad4c, label %dec_label_pc_ab5c

dec_label_pc_ad4c:                                ; preds = %dec_label_pc_ace4, %dec_label_pc_ab50
  %v0_ad4c = call i32 @function_eccc()
  store i32 %v0_ad4c, i32* %r0.global-to-local, align 4
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ad5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad60 = load i32, i32* @r5, align 4
  %v2_ad60 = add i32 %v1_ad60, 12
  %v3_ad60 = inttoptr i32 %v2_ad60 to i32*
  store i32 %v0_ad4c, i32* %v3_ad60, align 4
  br i1 %v3_ad5c, label %dec_label_pc_ad68, label %dec_label_pc_ad4c.dec_label_pc_ab70_crit_edge

dec_label_pc_ad4c.dec_label_pc_ab70_crit_edge:    ; preds = %dec_label_pc_ad4c
  %v1_ab74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ab70

dec_label_pc_ad68:                                ; preds = %dec_label_pc_ad4c, %dec_label_pc_ab5c
  %v0_ad68 = call i32 @function_eccc()
  %v3_ad70 = urem i32 %v0_ad68, 65536
  store i32 %v3_ad70, i32* %r0.global-to-local, align 4
  %v1_ad78 = sub nsw i32 999, %v3_ad70
  store i32 %v1_ad78, i32* %r2.global-to-local, align 4
  %v3_ad7c = sdiv i32 %v1_ad78, 256
  store i32 %v3_ad7c, i32* %r1.global-to-local, align 4
  %v3_ad8039 = udiv i32 %v3_ad70, 256
  store i32 %v3_ad8039, i32* %r3.global-to-local, align 4
  %v1_ad84 = trunc i32 %v3_ad8039 to i8
  %v2_ad84 = load i32, i32* @r5, align 4
  %v3_ad84 = add i32 %v2_ad84, 5
  %v4_ad84 = inttoptr i32 %v3_ad84 to i8*
  store i8 %v1_ad84, i8* %v4_ad84, align 1
  %v0_ad88 = load i32, i32* %r0.global-to-local, align 4
  %v1_ad88 = trunc i32 %v0_ad88 to i8
  %v2_ad88 = load i32, i32* @r5, align 4
  %v3_ad88 = add i32 %v2_ad88, 4
  %v4_ad88 = inttoptr i32 %v3_ad88 to i8*
  store i8 %v1_ad88, i8* %v4_ad88, align 1
  %v0_ad8c = load i32, i32* %r1.global-to-local, align 4
  %v1_ad8c = trunc i32 %v0_ad8c to i8
  %v2_ad8c = load i32, i32* @r6, align 4
  %v3_ad8c = add i32 %v2_ad8c, 5
  %v4_ad8c = inttoptr i32 %v3_ad8c to i8*
  store i8 %v1_ad8c, i8* %v4_ad8c, align 1
  store i32 %v3_a848, i32* %r1.global-to-local, align 4
  %v1_ad94 = load i32, i32* @r4, align 4
  %v9_ad94 = icmp eq i32 %v3_a848, %v1_ad94
  store i1 %v9_ad94, i1* %cpsr_z.global-to-local, align 1
  %v0_ad98 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad98 = trunc i32 %v0_ad98 to i8
  %v2_ad98 = load i32, i32* @r6, align 4
  %v3_ad98 = add i32 %v2_ad98, 4
  %v4_ad98 = inttoptr i32 %v3_ad98 to i8*
  store i8 %v1_ad98, i8* %v4_ad98, align 1
  %v0_ad9c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ad9c, label %dec_label_pc_ada0, label %dec_label_pc_ad68.dec_label_pc_ab7c_crit_edge

dec_label_pc_ad68.dec_label_pc_ab7c_crit_edge:    ; preds = %dec_label_pc_ad68
  %v1_ab80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ab7c

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad68, %dec_label_pc_ab70
  %v0_ada0 = call i32 @function_eccc()
  %v1_ada0 = trunc i32 %v0_ada0 to i8
  store i32 %v0_ada0, i32* %r0.global-to-local, align 4
  store i32 %v3_a84c, i32* %r2.global-to-local, align 4
  %v4_ada8 = sdiv i32 %v0_ada0, 256
  store i32 %v4_ada8, i32* %r3.global-to-local, align 4
  %v1_adac = load i32, i32* @r4, align 4
  %v9_adac = icmp eq i32 %v3_a84c, %v1_adac
  store i1 %v9_adac, i1* %cpsr_z.global-to-local, align 1
  %v3_adb0 = load i32, i32* @r5, align 4
  %v4_adb0 = add i32 %v3_adb0, 58
  %v5_adb0 = inttoptr i32 %v4_adb0 to i8*
  store i8 %v1_ada0, i8* %v5_adb0, align 1
  %v0_adb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_adb4 = trunc i32 %v0_adb4 to i8
  %v2_adb4 = load i32, i32* @r7, align 4
  %v3_adb4 = add i32 %v2_adb4, 1
  %v4_adb4 = inttoptr i32 %v3_adb4 to i8*
  store i8 %v1_adb4, i8* %v4_adb4, align 1
  %v0_adb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adb8, label %dec_label_pc_adbc, label %dec_label_pc_ab88

dec_label_pc_adbc:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_ab7c
  %v0_adbc = call i32 @function_eccc()
  %v1_adbc = trunc i32 %v0_adbc to i8
  store i32 %v0_adbc, i32* %r0.global-to-local, align 4
  %v4_adc043 = udiv i32 %v0_adbc, 256
  %v1_adc4 = trunc i32 %v4_adc043 to i8
  %v2_adc4 = load i32, i32* @r7, align 4
  %v3_adc4 = add i32 %v2_adc4, 3
  %v4_adc4 = inttoptr i32 %v3_adc4 to i8*
  store i8 %v1_adc4, i8* %v4_adc4, align 1
  store i32 %v1_a83c, i32* %r3.global-to-local, align 4
  store i1 %v2_adcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_adcc, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_adbc
  %v1_add0 = load i32, i32* @r5, align 4
  %v2_add0 = add i32 %v1_add0, 16
  %v3_add0 = inttoptr i32 %v2_add0 to i32*
  %v4_add0 = load i32, i32* %v3_add0, align 4
  store i32 %v4_add0, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_adbc, %bb107
  %v3_add4 = load i32, i32* @r7, align 4
  %v4_add4 = add i32 %v3_add4, 2
  %v5_add4 = inttoptr i32 %v4_add4 to i8*
  store i8 %v1_adbc, i8* %v5_add4, align 1
  %v0_add8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_add8, label %dec_label_pc_ade0, label %bb109

bb109:                                            ; preds = %bb108
  %v1_add8 = load i32, i32* %r3.global-to-local, align 4
  %v2_add8 = load i32, i32* @r6, align 4
  %v3_add8 = add i32 %v2_add8, 16
  %v4_add8 = inttoptr i32 %v3_add8 to i32*
  store i32 %v1_add8, i32* %v4_add8, align 4
  br label %dec_label_pc_ab9c

dec_label_pc_ade0:                                ; preds = %dec_label_pc_ab88, %bb108
  %v0_ade0 = call i32 @function_eccc()
  store i32 %v0_ade0, i32* %r0.global-to-local, align 4
  %v1_ade4 = load i32, i32* @r6, align 4
  %v2_ade4 = add i32 %v1_ade4, 16
  %v3_ade4 = inttoptr i32 %v2_ade4 to i32*
  store i32 %v0_ade0, i32* %v3_ade4, align 4
  br label %dec_label_pc_ab9c

dec_label_pc_adec:                                ; preds = %dec_label_pc_ab9c
  %v0_adec = load i32, i32* @r7, align 4
  %v1_adec = add i32 %v0_adec, 8
  store i32 %v1_adec, i32* %r0.global-to-local, align 4
  store i32 %v5_a78c, i32* @r1, align 4
  %v1_adf4 = inttoptr i32 %v1_adec to i8*
  %v2_adf4 = call i32 @function_eea8(i8* %v1_adf4)
  store i32 %v2_adf4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ac00

dec_label_pc_adfc:                                ; preds = %dec_label_pc_a82c
  %v1_ae04 = add i32 %v5_a78c, 8
  store i32 %v1_ae04, i32* %r1.global-to-local, align 4
  %v1_ae08 = add i32 %v5_a78c, 66
  store i32 %v1_ae08, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ab0c.preheader

; uselistorder directives
  uselistorder i32 %v1_ae08, { 1, 0 }
  uselistorder i32 %v1_ae04, { 1, 0 }
  uselistorder i32 %v0_adbc, { 0, 2, 1 }
  uselistorder i32 %v0_ada0, { 0, 2, 1 }
  uselistorder i32 %v3_ad70, { 0, 2, 1 }
  uselistorder i32 %v2_ad3c, { 1, 0 }
  uselistorder i32 %v8_ad1c, { 1, 2, 0 }
  uselistorder i32 %v3_ad08, { 1, 0 }
  uselistorder i32 %v0_acf8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_acc4, { 1, 2, 0 }
  uselistorder i32 %v1_acc0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_ac64, { 1, 0, 2 }
  uselistorder i32 %v4_ac60, { 0, 2, 1 }
  uselistorder i32 %v0_ac40, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ac30, { 0, 2, 1 }
  uselistorder i32 %v4_ac14, { 1, 0 }
  uselistorder i32 %v7_ab38, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ab0c, { 1, 0 }
  uselistorder i1 %v7_ab54, { 2, 1, 0 }
  uselistorder i1 %v2_adcc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ad5c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_aa94, { 1, 0, 2 }
  uselistorder i32 %v3_a91c, { 1, 0, 2 }
  uselistorder i32 %v3_a8fc, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_a8a0, { 1, 0 }
  uselistorder i32 %v1_a89c, { 2, 1, 0 }
  uselistorder i32 %v1_a888, { 1, 0 }
  uselistorder i32 %v1_a884, { 2, 1, 0 }
  uselistorder i32 %v1_a87c, { 0, 2, 1 }
  uselistorder i32 %v3_a874, { 2, 1, 0 }
  uselistorder i32 %v0_a850, { 1, 0, 2 }
  uselistorder i32 %v3_a844, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a83c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_a838, { 1, 0 }
  uselistorder i32 %v0_a838, { 2, 1, 0 }
  uselistorder i32 %v0_a830, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a82c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_a824, { 1, 0 }
  uselistorder i1 %v7_a7f8, { 1, 0 }
  uselistorder i32 %v3_a7f4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_a7e0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a7ac, { 1, 2, 0 }
  uselistorder i32 %v5_a78c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a740, { 1, 0 }
  uselistorder i8 %v5_a730, { 1, 0 }
  uselistorder i32 %v5_a714, { 1, 0 }
  uselistorder i32 %v6_a6d8, { 1, 0 }
  uselistorder i32 %v2_a6c0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a6a4, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder label %dec_label_pc_ade0, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_acdc, { 1, 0 }
  uselistorder label %dec_label_pc_ac00, { 1, 0 }
  uselistorder label %dec_label_pc_ab9c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab0c.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_ae1c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ae1c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_ae1c = load i32, i32* @r4, align 4
  %v15_ae1c = load i32, i32* @r8, align 4
  %v1_ae20 = urem i32 %arg1, 256
  store i32 %v1_ae20, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_ae20, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_ae38 = urem i32 %arg3, 256
  store i32 %v1_ae38, i32* @r4, align 4
  %v2_ae3c = call i32 @function_114c4(i32 %v1_ae20, i32 4)
  %v0_ae40 = load i32, i32* @r5, align 4
  store i32 %v0_ae40, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ae50 = load i32, i32* @r4, align 4
  store i32 %v0_ae50, i32* %r0.global-to-local, align 4
  %v5_ae54 = inttoptr i32 %v0_ae40 to i32*
  %v6_ae54 = call i32 @function_a398(i32 %v0_ae50, i32* %v5_ae54, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ae6c = load i32, i32* @r5, align 4
  store i32 %v0_ae6c, i32* %r1.global-to-local, align 4
  %v0_ae70 = load i32, i32* @r4, align 4
  store i32 %v0_ae70, i32* %r0.global-to-local, align 4
  %v5_ae74 = trunc i32 %v6_ae54 to i8
  %v6_ae78 = inttoptr i32 %v0_ae6c to i32*
  %v7_ae78 = call i32 @function_a398(i32 %v0_ae70, i32* %v6_ae78, i32 3, i32 65535)
  %v0_ae7c = load i32, i32* @r5, align 4
  store i32 %v0_ae7c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ae78, i32* @r7, align 4
  %v0_ae8c = load i32, i32* @r4, align 4
  store i32 %v0_ae8c, i32* %r0.global-to-local, align 4
  %v4_ae90 = inttoptr i32 %v0_ae7c to i32*
  %v5_ae90 = call i32 @function_a398(i32 %v0_ae8c, i32* %v4_ae90, i32 4, i32 64)
  %v0_ae9c = load i32, i32* @r5, align 4
  store i32 %v0_ae9c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aea8 = load i32, i32* @r4, align 4
  store i32 %v0_aea8, i32* %r0.global-to-local, align 4
  %v5_aeac = trunc i32 %v5_ae90 to i8
  %v6_aeb0 = inttoptr i32 %v0_ae9c to i32*
  %v7_aeb0 = call i32 @function_a398(i32 %v0_aea8, i32* %v6_aeb0, i32 5, i32 1)
  %v1_aebc = urem i32 %v7_aeb0, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_aec8 = load i32, i32* @r5, align 4
  store i32 %v0_aec8, i32* %r1.global-to-local, align 4
  %v0_aecc = load i32, i32* @r4, align 4
  store i32 %v0_aecc, i32* %r0.global-to-local, align 4
  %v5_aed4 = inttoptr i32 %v0_aec8 to i32*
  %v6_aed4 = call i32 @function_a398(i32 %v0_aecc, i32* %v5_aed4, i32 6, i32 65535)
  %v0_aedc = load i32, i32* @r5, align 4
  store i32 %v0_aedc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_aed4, i32* @sl, align 4
  %v0_aeec = load i32, i32* @r4, align 4
  store i32 %v0_aeec, i32* %r0.global-to-local, align 4
  %v4_aef0 = inttoptr i32 %v0_aedc to i32*
  %v5_aef0 = call i32 @function_a398(i32 %v0_aeec, i32* %v4_aef0, i32 7, i32 65535)
  %v0_aef4 = load i32, i32* @r5, align 4
  store i32 %v0_aef4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_aef0, i32* @r8, align 4
  %v0_af04 = load i32, i32* @r4, align 4
  store i32 %v0_af04, i32* %r0.global-to-local, align 4
  %v4_af08 = inttoptr i32 %v0_aef4 to i32*
  %v5_af08 = call i32 @function_a398(i32 %v0_af04, i32* %v4_af08, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af18 = load i32, i32* @r5, align 4
  store i32 %v0_af18, i32* %r1.global-to-local, align 4
  %v0_af1c = load i32, i32* @r4, align 4
  store i32 %v0_af1c, i32* %r0.global-to-local, align 4
  %v4_af20 = inttoptr i32 %v0_af18 to i32*
  %v5_af20 = call i32 @function_a398(i32 %v0_af1c, i32* %v4_af20, i32 1, i32 1)
  %v1_af28 = urem i32 %v5_af20, 256
  %v0_af2c = load i32, i32* @r5, align 4
  store i32 %v0_af2c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_af38 = load i32, i32* @r4, align 4
  store i32 %v0_af38, i32* %r0.global-to-local, align 4
  %v5_af40 = inttoptr i32 %v0_af2c to i32*
  %v6_af40 = call i32 @function_a398(i32 %v0_af38, i32* %v5_af40, i32 19, i32 0)
  %v0_af48 = load i32, i32* @r5, align 4
  store i32 %v0_af48, i32* %r1.global-to-local, align 4
  %v2_af4c = load i32, i32* @global_var_1bcbc.78, align 4
  store i32 %v2_af4c, i32* %r3.global-to-local, align 4
  store i32 %v6_af40, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_af58 = load i32, i32* @r4, align 4
  store i32 %v0_af58, i32* %r0.global-to-local, align 4
  %v4_af5c = inttoptr i32 %v0_af48 to i32*
  %v5_af5c = call i32 @function_a398(i32 %v0_af58, i32* %v4_af5c, i32 25, i32 %v2_af4c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_af70 = call i32 @function_111c0(i32 2, i32 3, i32 6)
  store i32 %v3_af70, i32* %r0.global-to-local, align 4
  %v7_af74 = icmp eq i32 %v3_af70, -1
  store i1 %v7_af74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_af74, label %dec_label_pc_b3f4, label %dec_label_pc_af80

dec_label_pc_af80:                                ; preds = %dec_label_pc_ae1c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_af88 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_af88, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_af9c = call i32 @function_11190(i32 %v3_af70, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_af9c, i32* %r0.global-to-local, align 4
  %v7_afa0 = icmp eq i32 %v6_af9c, -1
  store i1 %v7_afa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_afa0, label %dec_label_pc_b3ec, label %dec_label_pc_afa8

dec_label_pc_afa8:                                ; preds = %dec_label_pc_af80
  %v0_afa8 = load i32, i32* @sl, align 4
  %v0_afb4 = load i32, i32* @r8, align 4
  %v3_afb4 = mul i32 %v0_afb4, 65536
  store i32 %v3_afb4, i32* %r8.global-to-local, align 4
  %v0_afb8 = load i32, i32* @r7, align 4
  %v0_afbc = load i32, i32* @r6, align 4
  %v1_afbc = urem i32 %v0_afbc, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_afc4 = urem i32 %v0_afa8, 65536
  store i32 %v3_afc4, i32* %r2.global-to-local, align 4
  %v3_afc8 = urem i32 %v0_afb4, 65536
  store i32 %v3_afc8, i32* %r3.global-to-local, align 4
  %v0_afcc = load i32, i32* @fp, align 4
  %v2_afcc = icmp eq i32 %v0_afcc, 0
  store i1 %v2_afcc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_afdc = urem i32 %v0_afb8, 65536
  store i32 %v3_afdc, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_afcc, 1
  br i1 %tmp84, label %dec_label_pc_b518, label %dec_label_pc_afec

dec_label_pc_afec:                                ; preds = %dec_label_pc_afa8
  %v3_aff0 = mul i32 %v5_af08, 65536
  %v1_aff4 = add i32 %v3_aff0, 3407872
  %v3_affc = udiv i32 %v1_aff4, 256
  %v0_afb8.not = or i32 %v0_afb8, -65536
  %v1_b00c = xor i32 %v0_afb8.not, 65535
  %v1_b010 = urem i32 %v0_afb4, 256
  %tmp85 = mul nsw i32 %v1_b00c, 256
  %v1_b028 = and i32 %v3_affc, 65280
  %v1_b02c = add i32 %v3_aff0, 524288
  %v4_b030 = udiv i32 %v1_aff4, 16777216
  %v5_b030 = or i32 %v1_b028, %v4_b030
  store i32 %v5_b030, i32* %r0.global-to-local, align 4
  %v1_b034 = add i32 %v3_aff0, 1835008
  %v1_b03c = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_b03c, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b00c, 256
  %tmp87 = udiv i32 %v0_afb8, 256
  %v5_b050 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_afa8, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b070 = sdiv i32 %sext29, 16777216
  %v3_b07c = mul nuw nsw i32 %v1_b010, 256
  store i32 %v3_b07c, i32* @r5, align 4
  %v3_b080 = udiv i32 %v1_b02c, 256
  %tmp89 = udiv i32 %v0_afb4, 256
  %v4_b088 = urem i32 %tmp89, 256
  %v5_b088 = or i32 %v4_b088, %v3_b07c
  store i32 %v5_b088, i32* @r7, align 4
  %v3_b08c = ashr i32 %sext29, 31
  %v3_b098 = sdiv i32 %v1_b034, 16777216
  %v1_b09c = and i32 %v3_b080, 65280
  store i32 %v1_b09c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b0a4 = sdiv i32 %sext30, 16777216
  %v3_b0a8 = ashr i32 %v1_b034, 31
  %v3_b0ac = udiv i32 %v1_b00c, 65536
  %v4_b0b0 = udiv i32 %v1_b02c, 16777216
  %v5_b0b0 = or i32 %v1_b09c, %v4_b0b0
  store i32 %v5_b0b0, i32* %r8.global-to-local, align 4
  %v3_b0bc = ashr i32 %sext30, 31
  store i32 %v3_b0bc, i32* %r1.global-to-local, align 4
  store i32 %v1_b010, i32* %r2.global-to-local, align 4
  %v3_b0c441 = udiv i32 %v1_b09c, 256
  store i32 %v3_b0c441, i32* %r3.global-to-local, align 4
  %v5_b0cc = trunc i32 %v3_b0bc to i8
  store i32 0, i32* @r4, align 4
  %v4_b128 = sext i8 %v5_aeac to i32
  %sext = mul i32 %v1_aff4, 256
  %v4_b130 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b030, 16777216
  %v4_b140 = sdiv i32 %sext16, 16777216
  %v2_b214 = icmp eq i32 %v1_afbc, 0
  %sext20 = mul i32 %v1_b02c, 256
  %v4_b234 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_afb4, 16777216
  %v7_b24c = sdiv i32 %sext21, 16777216
  %v1_b13c = trunc i32 %v4_b130 to i8
  br label %dec_label_pc_b0dc

dec_label_pc_b0dc:                                ; preds = %bb96, %dec_label_pc_afec
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b0e8 = call i32 @function_114c4(i32 1510, i32 4)
  store i32 %v2_b0e8, i32* %r0.global-to-local, align 4
  store i32 %v2_ae3c, i32* %r1.global-to-local, align 4
  %v3_b0f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b0f0, i32* %r3.global-to-local, align 4
  %v2_b0f4 = load i32, i32* @r4, align 4
  %v5_b0f4 = mul i32 %v2_b0f4, 4
  %v6_b0f4 = add i32 %v5_b0f4, %v2_ae3c
  %v7_b0f4 = inttoptr i32 %v6_b0f4 to i32*
  store i32 %v2_b0e8, i32* %v7_b0f4, align 4
  %v0_b0f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0f8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b0f8 = mul i32 %v1_b0f8, 4
  %v5_b0f8 = add i32 %v4_b0f8, %v0_b0f8
  %v6_b0f8 = inttoptr i32 %v5_b0f8 to i32*
  %v7_b0f8 = load i32, i32* %v6_b0f8, align 4
  store i32 %v7_b0f8, i32* %r4.global-to-local, align 4
  %v1_b0fc = inttoptr i32 %v7_b0f8 to i8*
  %v2_b0fc = load i8, i8* %v1_b0fc, align 1
  %tmp = urem i8 %v2_b0fc, 16
  %v1_b100 = zext i8 %tmp to i32
  %v1_b104 = or i32 %v1_b100, 64
  store i32 %v1_b104, i32* %r2.global-to-local, align 4
  %v1_b108 = trunc i32 %v1_b104 to i8
  store i8 %v1_b108, i8* %v1_b0fc, align 1
  %v0_b10c = load i32, i32* %r4.global-to-local, align 4
  %v1_b10c = inttoptr i32 %v0_b10c to i8*
  %v2_b10c = load i8, i8* %v1_b10c, align 1
  %v1_b110 = and i8 %v2_b10c, -16
  %v1_b114 = or i8 %v1_b110, 5
  store i32 %v1_aebc, i32* %r2.global-to-local, align 4
  store i8 %v1_b114, i8* %v1_b10c, align 1
  %v2_b124 = load i32, i32* %r4.global-to-local, align 4
  %v3_b124 = add i32 %v2_b124, 1
  %v4_b124 = inttoptr i32 %v3_b124 to i8*
  store i8 %v5_ae74, i8* %v4_b124, align 1
  store i32 %v4_b128, i32* %r1.global-to-local, align 4
  %v2_b12c = load i32, i32* %r4.global-to-local, align 4
  %v3_b12c = add i32 %v2_b12c, 8
  %v4_b12c = inttoptr i32 %v3_b12c to i8*
  store i8 %v5_aeac, i8* %v4_b12c, align 1
  store i32 %v4_b130, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b138 = load i32, i32* %r2.global-to-local, align 4
  %v9_b138 = icmp eq i32 %v0_b138, 0
  store i1 %v9_b138, i1* %cpsr_z.global-to-local, align 1
  %v2_b13c = load i32, i32* %r4.global-to-local, align 4
  %v3_b13c = add i32 %v2_b13c, 3
  %v4_b13c = inttoptr i32 %v3_b13c to i8*
  store i8 %v1_b13c, i8* %v4_b13c, align 1
  store i32 %v4_b140, i32* %r2.global-to-local, align 4
  %v0_b144 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b144, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b0dc
  %v1_b144 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b144, i32* %r3.global-to-local, align 4
  %v2_b148 = trunc i32 %v1_b144 to i8
  %v3_b148 = load i32, i32* %r4.global-to-local, align 4
  %v4_b148 = add i32 %v3_b148, 7
  %v5_b148 = inttoptr i32 %v4_b148 to i8*
  store i8 %v2_b148, i8* %v5_b148, align 1
  %v0_b14c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b14c.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b150 = load i32, i32* %r4.global-to-local, align 4
  %v4_b150 = add i32 %v3_b150, 6
  %v5_b150 = inttoptr i32 %v4_b150 to i8*
  store i8 64, i8* %v5_b150, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b0dc, %.thread, %bb
  %v0_b154 = load i32, i32* %r2.global-to-local, align 4
  %v1_b154 = trunc i32 %v0_b154 to i8
  %v2_b154 = load i32, i32* %r4.global-to-local, align 4
  %v3_b154 = add i32 %v2_b154, 2
  %v4_b154 = inttoptr i32 %v3_b154 to i8*
  store i8 %v1_b154, i8* %v4_b154, align 1
  store i32 %v3_b08c, i32* %r2.global-to-local, align 4
  store i32 %v4_b070, i32* %r1.global-to-local, align 4
  %v2_b164 = load i32, i32* %r4.global-to-local, align 4
  %v3_b164 = add i32 %v2_b164, 9
  %v4_b164 = inttoptr i32 %v3_b164 to i8*
  store i8 47, i8* %v4_b164, align 1
  %v0_b168 = load i32, i32* %r2.global-to-local, align 4
  %v1_b168 = trunc i32 %v0_b168 to i8
  %v2_b168 = load i32, i32* %r4.global-to-local, align 4
  %v3_b168 = add i32 %v2_b168, 5
  %v4_b168 = inttoptr i32 %v3_b168 to i8*
  store i8 %v1_b168, i8* %v4_b168, align 1
  %v3_b16c = load i32, i32* %stack_var_-40, align 4
  %v5_b174 = mul i32 %v3_b16c, 24
  store i32 %v5_b174, i32* %r3.global-to-local, align 4
  store i32 %v5_af5c, i32* %r2.global-to-local, align 4
  %v1_b17c = load i32, i32* %r4.global-to-local, align 4
  %v2_b17c = add i32 %v1_b17c, 12
  %v3_b17c = inttoptr i32 %v2_b17c to i32*
  store i32 %v5_af5c, i32* %v3_b17c, align 4
  %v0_b180 = load i32, i32* %r3.global-to-local, align 4
  %v1_b180 = load i32, i32* @sb, align 4
  %v2_b180 = add i32 %v1_b180, %v0_b180
  store i32 %v2_b180, i32* %r3.global-to-local, align 4
  %v0_b184 = load i32, i32* %r1.global-to-local, align 4
  %v1_b184 = trunc i32 %v0_b184 to i8
  %v2_b184 = load i32, i32* %r4.global-to-local, align 4
  %v3_b184 = add i32 %v2_b184, 4
  %v4_b184 = inttoptr i32 %v3_b184 to i8*
  store i8 %v1_b184, i8* %v4_b184, align 1
  %v0_b188 = load i32, i32* %r3.global-to-local, align 4
  %v1_b188 = add i32 %v0_b188, 16
  %v2_b188 = inttoptr i32 %v1_b188 to i32*
  %v3_b188 = load i32, i32* %v2_b188, align 4
  store i32 %v3_b188, i32* %r2.global-to-local, align 4
  %v0_b18c = load i32, i32* %r4.global-to-local, align 4
  %v1_b18c = add i32 %v0_b18c, 20
  store i32 %v1_b18c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b194 = load i32, i32* %r0.global-to-local, align 4
  %v1_b194 = trunc i32 %v0_b194 to i8
  %v3_b194 = add i32 %v0_b18c, 23
  %v4_b194 = inttoptr i32 %v3_b194 to i8*
  store i8 %v1_b194, i8* %v4_b194, align 1
  %v0_b198 = load i32, i32* %r3.global-to-local, align 4
  %v1_b198 = trunc i32 %v0_b198 to i8
  %v2_b198 = load i32, i32* %r1.global-to-local, align 4
  %v3_b198 = add i32 %v2_b198, 2
  %v4_b198 = inttoptr i32 %v3_b198 to i8*
  store i8 %v1_b198, i8* %v4_b198, align 1
  %v0_b19c = load i32, i32* %r4.global-to-local, align 4
  %v1_b19c = add i32 %v0_b19c, 24
  %v2_b19c = inttoptr i32 %v1_b19c to i8*
  %v3_b19c = load i8, i8* %v2_b19c, align 1
  %tmp104 = urem i8 %v3_b19c, 16
  %v1_b1a0 = zext i8 %tmp104 to i32
  %v1_b1a4 = or i32 %v1_b1a0, 64
  store i32 %v1_b1a4, i32* %r3.global-to-local, align 4
  %v1_b1a8 = trunc i32 %v1_b1a4 to i8
  store i8 %v1_b1a8, i8* %v2_b19c, align 1
  %v0_b1ac = load i32, i32* %r2.global-to-local, align 4
  %v1_b1ac = load i32, i32* %r4.global-to-local, align 4
  %v2_b1ac = add i32 %v1_b1ac, 16
  %v3_b1ac = inttoptr i32 %v2_b1ac to i32*
  store i32 %v0_b1ac, i32* %v3_b1ac, align 4
  %v0_b1b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b1b0 = add i32 %v0_b1b0, 24
  %v2_b1b0 = inttoptr i32 %v1_b1b0 to i8*
  %v3_b1b0 = load i8, i8* %v2_b1b0, align 1
  %v1_b1b4 = and i8 %v3_b1b0, -16
  %v1_b1b8 = or i8 %v1_b1b4, 5
  store i8 %v1_b1b8, i8* %v2_b1b0, align 1
  %v0_b1c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b1c4 = add i32 %v0_b1c4, 24
  store i32 %v1_b1c4, i32* @r5, align 4
  %v3_b1c8 = add i32 %v0_b1c4, 25
  %v4_b1c8 = inttoptr i32 %v3_b1c8 to i8*
  store i8 %v5_ae74, i8* %v4_b1c8, align 1
  store i32 %v3_b098, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b0a8, i32* %r2.global-to-local, align 4
  %v2_b1d8 = load i32, i32* @r5, align 4
  %v3_b1d8 = add i32 %v2_b1d8, 4
  %v4_b1d8 = inttoptr i32 %v3_b1d8 to i8*
  store i8 %v5_b050, i8* %v4_b1d8, align 1
  %v0_b1dc = load i32, i32* %r1.global-to-local, align 4
  %v1_b1dc = trunc i32 %v0_b1dc to i8
  %v2_b1dc = load i32, i32* @r5, align 4
  %v3_b1dc = add i32 %v2_b1dc, 2
  %v4_b1dc = inttoptr i32 %v3_b1dc to i8*
  store i8 %v1_b1dc, i8* %v4_b1dc, align 1
  %v0_b1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1e0, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b0ac, i32* %r1.global-to-local, align 4
  %v0_b1e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b1e8 = trunc i32 %v0_b1e8 to i8
  %v2_b1e8 = load i32, i32* @r5, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 3
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i8*
  store i8 %v1_b1e8, i8* %v4_b1e8, align 1
  store i32 %v4_b128, i32* %r2.global-to-local, align 4
  %v0_b1f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1f0, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b1f0 = load i32, i32* %r3.global-to-local, align 4
  %v2_b1f0 = trunc i32 %v1_b1f0 to i8
  %v3_b1f0 = load i32, i32* @r5, align 4
  %v4_b1f0 = add i32 %v3_b1f0, 6
  %v5_b1f0 = inttoptr i32 %v4_b1f0 to i8*
  store i8 %v2_b1f0, i8* %v5_b1f0, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b1f8 = trunc i32 %v0_b1f8 to i8
  %v2_b1f8 = load i32, i32* @r5, align 4
  %v3_b1f8 = add i32 %v2_b1f8, 5
  %v4_b1f8 = inttoptr i32 %v3_b1f8 to i8*
  store i8 %v1_b1f8, i8* %v4_b1f8, align 1
  %v0_b1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_b1fc = trunc i32 %v0_b1fc to i8
  %v2_b1fc = load i32, i32* @r5, align 4
  %v3_b1fc = add i32 %v2_b1fc, 8
  %v4_b1fc = inttoptr i32 %v3_b1fc to i8*
  store i8 %v1_b1fc, i8* %v4_b1fc, align 1
  %v0_b200 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b200, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b200 = load i32, i32* %r0.global-to-local, align 4
  %v2_b200 = trunc i32 %v1_b200 to i8
  %v3_b200 = load i32, i32* @r5, align 4
  %v4_b200 = add i32 %v3_b200, 7
  %v5_b200 = inttoptr i32 %v4_b200 to i8*
  store i8 %v2_b200, i8* %v5_b200, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b204 = load i32, i32* %r3.global-to-local, align 4
  %v1_b204 = trunc i32 %v0_b204 to i8
  %v2_b204 = load i32, i32* @r5, align 4
  %v3_b204 = add i32 %v2_b204, 9
  %v4_b204 = inttoptr i32 %v3_b204 to i8*
  store i8 %v1_b204, i8* %v4_b204, align 1
  %v0_b208 = call i32 @function_eccc()
  store i32 %v0_b208, i32* %r0.global-to-local, align 4
  store i32 %v1_afbc, i32* %r1.global-to-local, align 4
  store i1 %v2_b214, i1* %cpsr_z.global-to-local, align 1
  %v1_b218 = sub i32 1023, %v0_b208
  store i32 %v1_b218, i32* %r3.global-to-local, align 4
  br i1 %v2_b214, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b220 = load i32, i32* @r5, align 4
  %v3_b220 = add i32 %v2_b220, 16
  %v4_b220 = inttoptr i32 %v3_b220 to i32*
  store i32 %v1_b218, i32* %v4_b220, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b21c = load i32, i32* %r4.global-to-local, align 4
  %v2_b21c = add i32 %v1_b21c, 16
  %v3_b21c = inttoptr i32 %v2_b21c to i32*
  %v4_b21c = load i32, i32* %v3_b21c, align 4
  store i32 %v4_b21c, i32* %r3.global-to-local, align 4
  %v2_b224 = load i32, i32* @r5, align 4
  %v3_b224 = add i32 %v2_b224, 16
  %v4_b224 = inttoptr i32 %v3_b224 to i32*
  store i32 %v4_b21c, i32* %v4_b224, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b0a4, i32* %r3.global-to-local, align 4
  %v0_b22c = load i32, i32* %r4.global-to-local, align 4
  %v1_b22c = add i32 %v0_b22c, 44
  store i32 %v1_b22c, i32* @r6, align 4
  %v1_b230 = load i32, i32* @r5, align 4
  %v2_b230 = add i32 %v1_b230, 12
  %v3_b230 = inttoptr i32 %v2_b230 to i32*
  store i32 %v0_b208, i32* %v3_b230, align 4
  store i32 %v4_b234, i32* %r2.global-to-local, align 4
  %v0_b238 = load i32, i32* %r3.global-to-local, align 4
  %v1_b238 = trunc i32 %v0_b238 to i8
  %v2_b238 = load i32, i32* @r6, align 4
  %v3_b238 = inttoptr i32 %v2_b238 to i8*
  store i8 %v1_b238, i8* %v3_b238, align 1
  %v3_b23c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  %v0_b240 = load i32, i32* %r2.global-to-local, align 4
  %v1_b240 = trunc i32 %v0_b240 to i8
  %v2_b240 = load i32, i32* @r6, align 4
  %v3_b240 = add i32 %v2_b240, 5
  %v4_b240 = inttoptr i32 %v3_b240 to i8*
  store i8 %v1_b240, i8* %v4_b240, align 1
  %v0_b244 = load i32, i32* %r3.global-to-local, align 4
  %v1_b244 = add i32 %v0_b244, 1
  store i32 %v1_b244, i32* @r4, align 4
  store i32 %v3_b0bc, i32* %r1.global-to-local, align 4
  store i32 %v7_b24c, i32* %r2.global-to-local, align 4
  %v1_b250 = load i32, i32* @fp, align 4
  %v9_b250 = icmp eq i32 %v1_b244, %v1_b250
  store i1 %v9_b250, i1* %cpsr_z.global-to-local, align 1
  %v2_b254 = load i32, i32* @r6, align 4
  %v3_b254 = add i32 %v2_b254, 1
  %v4_b254 = inttoptr i32 %v3_b254 to i8*
  store i8 %v5_b0cc, i8* %v4_b254, align 1
  %v0_b258 = load i32, i32* @r7, align 4
  %v1_b258 = trunc i32 %v0_b258 to i8
  %v2_b258 = load i32, i32* @r6, align 4
  %v3_b258 = add i32 %v2_b258, 2
  %v4_b258 = inttoptr i32 %v3_b258 to i8*
  store i8 %v1_b258, i8* %v4_b258, align 1
  %v0_b25c = load i32, i32* %r2.global-to-local, align 4
  %v1_b25c = trunc i32 %v0_b25c to i8
  %v2_b25c = load i32, i32* @r6, align 4
  %v3_b25c = add i32 %v2_b25c, 3
  %v4_b25c = inttoptr i32 %v3_b25c to i8*
  store i8 %v1_b25c, i8* %v4_b25c, align 1
  %v0_b260 = load i32, i32* %r8.global-to-local, align 4
  %v1_b260 = trunc i32 %v0_b260 to i8
  %v2_b260 = load i32, i32* @r6, align 4
  %v3_b260 = add i32 %v2_b260, 4
  %v4_b260 = inttoptr i32 %v3_b260 to i8*
  store i8 %v1_b260, i8* %v4_b260, align 1
  %v0_b264 = load i32, i32* @r4, align 4
  store i32 %v0_b264, i32* %stack_var_-40, align 4
  %v5_b268 = icmp slt i32 %v1_b244, %v1_b250
  br i1 %v5_b268, label %dec_label_pc_b0dc, label %dec_label_pc_b26c

dec_label_pc_b26c:                                ; preds = %bb96
  %v1_b274 = add i32 %v5_af08, 8
  store i32 %v1_b274, i32* %r3.global-to-local, align 4
  %v1_b278 = add i32 %v5_af08, 52
  store i32 %v1_b278, i32* %r1.global-to-local, align 4
  %v0_b284.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b284.preheader

dec_label_pc_b284.preheader:                      ; preds = %dec_label_pc_b26c, %dec_label_pc_b518
  %v0_b284.pre = phi i32 [ %v0_b284.pre.pre, %dec_label_pc_b26c ], [ %v0_afcc, %dec_label_pc_b518 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b278, %dec_label_pc_b26c ], [ %v1_b524, %dec_label_pc_b518 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b274, %dec_label_pc_b26c ], [ %v1_b520, %dec_label_pc_b518 ]
  %v2_b4fc = icmp eq i32 %v1_af28, 0
  %v2_b2fc = icmp eq i32 %v1_afbc, 0
  %v2_b2c8 = icmp eq i32 %v5_af5c, -1
  %v7_b2c8 = icmp eq i32 %v5_af5c, -1
  br label %dec_label_pc_b284

dec_label_pc_b284:                                ; preds = %dec_label_pc_b318, %dec_label_pc_b284.preheader
  %v0_b284 = phi i32 [ %v0_b284.pre, %dec_label_pc_b284.preheader ], [ %v1_b3dc, %dec_label_pc_b318 ]
  %v2_b284 = icmp eq i32 %v0_b284, 0
  store i1 %v2_b284, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b284, 1
  br label %dec_label_pc_b28c

dec_label_pc_b28c:                                ; preds = %dec_label_pc_b28c, %dec_label_pc_b284
  br i1 %tmp97, label %dec_label_pc_b28c, label %dec_label_pc_b290

dec_label_pc_b290:                                ; preds = %dec_label_pc_b28c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b29c

dec_label_pc_b29c:                                ; preds = %dec_label_pc_b318, %dec_label_pc_b290
  %v1_b2b0 = phi i32 [ %v1_b3d8, %dec_label_pc_b318 ], [ 0, %dec_label_pc_b290 ]
  %v5_b2a0 = mul i32 %v1_b2b0, 24
  %v1_b2a4 = load i32, i32* @sb, align 4
  %v2_b2a4 = add i32 %v1_b2a4, %v5_b2a0
  store i32 %v2_b2a4, i32* %r3.global-to-local, align 4
  store i32 %v2_ae3c, i32* %r1.global-to-local, align 4
  %v1_b2ac = add i32 %v2_b2a4, 20
  %v2_b2ac = inttoptr i32 %v1_b2ac to i8*
  %v3_b2ac = load i8, i8* %v2_b2ac, align 1
  %v4_b2ac = zext i8 %v3_b2ac to i32
  store i32 %v4_b2ac, i32* %r2.global-to-local, align 4
  %v4_b2b0 = mul i32 %v1_b2b0, 4
  %v5_b2b0 = add i32 %v4_b2b0, %v2_ae3c
  %v6_b2b0 = inttoptr i32 %v5_b2b0 to i32*
  %v7_b2b0 = load i32, i32* %v6_b2b0, align 4
  store i32 %v7_b2b0, i32* @r5, align 4
  %v7_b2b4 = icmp eq i8 %v3_b2ac, 31
  store i1 %v7_b2b4, i1* %cpsr_z.global-to-local, align 1
  %v1_b2b8 = add i32 %v7_b2b0, 24
  store i32 %v1_b2b8, i32* @r6, align 4
  %v1_b2bc = add i32 %v7_b2b0, 44
  store i32 %v1_b2bc, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_b2ac, 32
  br i1 %tmp105, label %dec_label_pc_b3fc, label %dec_label_pc_b2c4

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b29c
  store i32 %v5_af5c, i32* %r2.global-to-local, align 4
  store i1 %v7_b2c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b2c8, label %dec_label_pc_b464, label %dec_label_pc_b2d0

dec_label_pc_b2d0:                                ; preds = %dec_label_pc_b3fc, %dec_label_pc_b2c4
  store i32 65535, i32* @r4, align 4
  %v0_b2d8 = load i32, i32* @sl, align 4
  %v9_b2d8 = icmp eq i32 %v0_b2d8, 65535
  store i1 %v9_b2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b2d8, label %dec_label_pc_b47c, label %dec_label_pc_b2e0

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b464.dec_label_pc_b2e0_crit_edge, %dec_label_pc_b2d0
  %v1_b2e4 = phi i32 [ %v1_b2e4.pre, %dec_label_pc_b464.dec_label_pc_b2e0_crit_edge ], [ 65535, %dec_label_pc_b2d0 ]
  store i32 %v3_afc4, i32* %r3.global-to-local, align 4
  %v9_b2e4 = icmp eq i32 %v3_afc4, %v1_b2e4
  store i1 %v9_b2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b2e4, label %dec_label_pc_b4b4, label %dec_label_pc_b2ec

dec_label_pc_b2ec:                                ; preds = %dec_label_pc_b47c.dec_label_pc_b2ec_crit_edge, %dec_label_pc_b2e0
  %v1_b2f0 = phi i32 [ %v1_b2f0.pre, %dec_label_pc_b47c.dec_label_pc_b2ec_crit_edge ], [ %v1_b2e4, %dec_label_pc_b2e0 ]
  store i32 %v3_afc8, i32* %r1.global-to-local, align 4
  %v9_b2f0 = icmp eq i32 %v3_afc8, %v1_b2f0
  store i1 %v9_b2f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b2f0, label %dec_label_pc_b4d0, label %dec_label_pc_b2f8

dec_label_pc_b2f8:                                ; preds = %dec_label_pc_b4b4, %dec_label_pc_b2ec
  store i32 %v1_afbc, i32* %r2.global-to-local, align 4
  store i1 %v2_b2fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2fc, label %dec_label_pc_b4f4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b2f8
  %v1_b300 = load i32, i32* @r5, align 4
  %v2_b300 = add i32 %v1_b300, 16
  %v3_b300 = inttoptr i32 %v2_b300 to i32*
  %v4_b300 = load i32, i32* %v3_b300, align 4
  store i32 %v4_b300, i32* %r3.global-to-local, align 4
  %v2_b304 = load i32, i32* @r6, align 4
  %v3_b304 = add i32 %v2_b304, 16
  %v4_b304 = inttoptr i32 %v3_b304 to i32*
  store i32 %v4_b300, i32* %v4_b304, align 4
  br label %dec_label_pc_b30c

dec_label_pc_b30c:                                ; preds = %bb102, %.thread26
  store i32 %v1_af28, i32* %r3.global-to-local, align 4
  store i1 %v2_b4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b4fc, label %dec_label_pc_b318, label %dec_label_pc_b508

dec_label_pc_b318:                                ; preds = %dec_label_pc_b30c, %dec_label_pc_b4f4, %dec_label_pc_b508
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b31c = load i32, i32* @r8, align 4
  %v1_b31c = trunc i32 %v0_b31c to i8
  %v2_b31c = load i32, i32* @r5, align 4
  %v3_b31c = add i32 %v2_b31c, 10
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v1_b31c, i8* %v4_b31c, align 1
  %v0_b320 = load i32, i32* @r8, align 4
  %v1_b320 = trunc i32 %v0_b320 to i8
  %v2_b320 = load i32, i32* @r5, align 4
  %v3_b320 = add i32 %v2_b320, 11
  %v4_b320 = inttoptr i32 %v3_b320 to i8*
  store i8 %v1_b320, i8* %v4_b320, align 1
  %v0_b324 = load i32, i32* @r5, align 4
  store i32 %v0_b324, i32* @r0, align 4
  %v2_b328 = call i32 @function_d3f8(i32 %v0_b324, i32 20)
  %v3_b328 = trunc i32 %v2_b328 to i8
  %v4_b32c = sdiv i32 %v2_b328, 256
  store i32 %v4_b32c, i32* %r3.global-to-local, align 4
  %v1_b330 = trunc i32 %v4_b32c to i8
  %v2_b330 = load i32, i32* @r5, align 4
  %v3_b330 = add i32 %v2_b330, 11
  %v4_b330 = inttoptr i32 %v3_b330 to i8*
  store i8 %v1_b330, i8* %v4_b330, align 1
  %v3_b334 = load i32, i32* @r5, align 4
  %v4_b334 = add i32 %v3_b334, 10
  %v5_b334 = inttoptr i32 %v4_b334 to i8*
  store i8 %v3_b328, i8* %v5_b334, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b33c = load i32, i32* @r8, align 4
  %v1_b33c = trunc i32 %v0_b33c to i8
  %v2_b33c = load i32, i32* @r6, align 4
  %v3_b33c = add i32 %v2_b33c, 10
  %v4_b33c = inttoptr i32 %v3_b33c to i8*
  store i8 %v1_b33c, i8* %v4_b33c, align 1
  %v0_b340 = load i32, i32* @r8, align 4
  %v1_b340 = trunc i32 %v0_b340 to i8
  %v2_b340 = load i32, i32* @r6, align 4
  %v3_b340 = add i32 %v2_b340, 11
  %v4_b340 = inttoptr i32 %v3_b340 to i8*
  store i8 %v1_b340, i8* %v4_b340, align 1
  %v0_b344 = load i32, i32* @r6, align 4
  store i32 %v0_b344, i32* @r0, align 4
  %v2_b348 = call i32 @function_d3f8(i32 %v0_b344, i32 20)
  %v3_b348 = trunc i32 %v2_b348 to i8
  store i32 %v2_b348, i32* %r0.global-to-local, align 4
  %v4_b34c = sdiv i32 %v2_b348, 256
  store i32 %v4_b34c, i32* %r3.global-to-local, align 4
  %v3_b350 = load i32, i32* @r6, align 4
  %v4_b350 = add i32 %v3_b350, 10
  %v5_b350 = inttoptr i32 %v4_b350 to i8*
  store i8 %v3_b348, i8* %v5_b350, align 1
  %v0_b354 = load i32, i32* %r3.global-to-local, align 4
  %v1_b354 = trunc i32 %v0_b354 to i8
  %v2_b354 = load i32, i32* @r6, align 4
  %v3_b354 = add i32 %v2_b354, 11
  %v4_b354 = inttoptr i32 %v3_b354 to i8*
  store i8 %v1_b354, i8* %v4_b354, align 1
  %v0_b358 = load i32, i32* @r7, align 4
  %v1_b358 = add i32 %v0_b358, 4
  %v2_b358 = inttoptr i32 %v1_b358 to i8*
  %v3_b358 = load i8, i8* %v2_b358, align 1
  %v4_b358 = zext i8 %v3_b358 to i32
  store i32 %v4_b358, i32* %r3.global-to-local, align 4
  %v1_b35c = add i32 %v0_b358, 5
  %v2_b35c = inttoptr i32 %v1_b35c to i8*
  %v3_b35c = load i8, i8* %v2_b35c, align 1
  %v4_b35c = zext i8 %v3_b35c to i32
  store i32 %v0_b358, i32* @r1, align 4
  %v4_b364 = mul nuw nsw i32 %v4_b35c, 256
  %v5_b364 = or i32 %v4_b364, %v4_b358
  store i32 %v5_b364, i32* %r2.global-to-local, align 4
  %v0_b368 = load i32, i32* @r8, align 4
  %v1_b368 = trunc i32 %v0_b368 to i8
  %v3_b368 = add i32 %v0_b358, 6
  %v4_b368 = inttoptr i32 %v3_b368 to i8*
  store i8 %v1_b368, i8* %v4_b368, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b370 = load i32, i32* @r8, align 4
  %v1_b370 = trunc i32 %v0_b370 to i8
  %v2_b370 = load i32, i32* @r7, align 4
  %v3_b370 = add i32 %v2_b370, 7
  %v4_b370 = inttoptr i32 %v3_b370 to i8*
  store i8 %v1_b370, i8* %v4_b370, align 1
  %v0_b374 = load i32, i32* @r6, align 4
  store i32 %v0_b374, i32* %r0.global-to-local, align 4
  %v4_b378 = call i32 @function_d454(i32 %v0_b374, i32 %v0_b358, i32 %v5_b364, i32 %stack_var_-152.0.ph)
  %v5_b378 = trunc i32 %v4_b378 to i8
  store i32 %v4_b378, i32* %r0.global-to-local, align 4
  %v3_b37c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b37c, i32* %r3.global-to-local, align 4
  %v3_b380 = mul i32 %v3_b37c, 32
  store i32 %v3_b380, i32* %r2.global-to-local, align 4
  %v0_b384 = load i32, i32* @r5, align 4
  %v1_b384 = add i32 %v0_b384, 16
  %v2_b384 = inttoptr i32 %v1_b384 to i32*
  %v3_b384 = load i32, i32* %v2_b384, align 4
  store i32 %v3_b384, i32* %r1.global-to-local, align 4
  %v5_b388 = mul i32 %v3_b37c, 24
  store i32 %v5_b388, i32* %r2.global-to-local, align 4
  %v4_b38c42 = udiv i32 %v4_b378, 256
  %v1_b390 = trunc i32 %v4_b38c42 to i8
  %v2_b390 = load i32, i32* @r7, align 4
  %v3_b390 = add i32 %v2_b390, 7
  %v4_b390 = inttoptr i32 %v3_b390 to i8*
  store i8 %v1_b390, i8* %v4_b390, align 1
  %v0_b394 = load i32, i32* %r2.global-to-local, align 4
  %v1_b394 = load i32, i32* @sb, align 4
  %v2_b394 = add i32 %v1_b394, %v0_b394
  store i32 %v2_b394, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b39c = load i32, i32* @r7, align 4
  %v4_b39c = add i32 %v3_b39c, 6
  %v5_b39c = inttoptr i32 %v4_b39c to i8*
  store i8 %v5_b378, i8* %v5_b39c, align 1
  %v0_b3a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3a0 = load i32, i32* %lr.global-to-local, align 4
  %v2_b3a0 = add i32 %v1_b3a0, 4
  %v3_b3a0 = inttoptr i32 %v2_b3a0 to i32*
  store i32 %v0_b3a0, i32* %v3_b3a0, align 4
  %v0_b3a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3a4 = trunc i32 %v0_b3a4 to i8
  %v2_b3a4 = load i32, i32* %r2.global-to-local, align 4
  %v3_b3a4 = load i32, i32* @sb, align 4
  %v4_b3a4 = add i32 %v3_b3a4, %v2_b3a4
  %v5_b3a4 = inttoptr i32 %v4_b3a4 to i8*
  store i8 %v1_b3a4, i8* %v5_b3a4, align 1
  %v0_b3a8 = load i32, i32* @r8, align 4
  %v1_b3a8 = trunc i32 %v0_b3a8 to i8
  %v2_b3a8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3a8 = add i32 %v2_b3a8, 2
  %v4_b3a8 = inttoptr i32 %v3_b3a8 to i8*
  store i8 %v1_b3a8, i8* %v4_b3a8, align 1
  %v0_b3ac = load i32, i32* @r8, align 4
  %v1_b3ac = trunc i32 %v0_b3ac to i8
  %v2_b3ac = load i32, i32* %lr.global-to-local, align 4
  %v3_b3ac = add i32 %v2_b3ac, 1
  %v4_b3ac = inttoptr i32 %v3_b3ac to i8*
  store i8 %v1_b3ac, i8* %v4_b3ac, align 1
  %v0_b3b0 = load i32, i32* @r8, align 4
  %v1_b3b0 = trunc i32 %v0_b3b0 to i8
  %v2_b3b0 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3b0 = add i32 %v2_b3b0, 3
  %v4_b3b0 = inttoptr i32 %v3_b3b0 to i8*
  store i8 %v1_b3b0, i8* %v4_b3b0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r5, align 4
  store i32 %v0_b3bc, i32* %r1.global-to-local, align 4
  store i32 %v3_af70, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b3c8 = load i32, i32* %lr.global-to-local, align 4
  %v6_b3d0 = inttoptr i32 %v0_b3bc to i32*
  %v7_b3d0 = call i32 @function_1115c(i32 %v3_af70, i32* %v6_b3d0, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b3c8, i32 16)
  %v3_b3d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b3d4, i32* %r3.global-to-local, align 4
  %v1_b3d8 = add i32 %v3_b3d4, 1
  store i32 %v1_b3d8, i32* %r0.global-to-local, align 4
  %v1_b3dc = load i32, i32* @fp, align 4
  %v9_b3dc = icmp eq i32 %v1_b3d8, %v1_b3dc
  store i1 %v9_b3dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b3d8, i32* %stack_var_-40, align 4
  %v6_b3e4 = icmp slt i32 %v1_b3d8, %v1_b3dc
  br i1 %v6_b3e4, label %dec_label_pc_b29c, label %dec_label_pc_b284

dec_label_pc_b3ec:                                ; preds = %dec_label_pc_af80
  store i32 %v3_af70, i32* %r0.global-to-local, align 4
  %v1_b3f0 = call i32 @function_108c4(i32 %v3_af70)
  store i32 %v1_b3f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_ae1c, %dec_label_pc_b3ec
  %v29_b3f8 = phi i32 [ %v3_af70, %dec_label_pc_ae1c ], [ %v1_b3f0, %dec_label_pc_b3ec ]
  store i32 %v3_ae1c, i32* %r4.global-to-local, align 4
  store i32 %v15_ae1c, i32* %r8.global-to-local, align 4
  ret i32 %v29_b3f8

dec_label_pc_b3fc:                                ; preds = %dec_label_pc_b29c
  %v1_b3fc = add i32 %v2_b2a4, 16
  %v2_b3fc = inttoptr i32 %v1_b3fc to i32*
  %v3_b3fc = load i32, i32* %v2_b3fc, align 4
  store i32 %v3_b3fc, i32* %r4.global-to-local, align 4
  %v0_b400 = call i32 @function_eccc()
  store i32 %v0_b400, i32* %r0.global-to-local, align 4
  %v3_b404 = load i32, i32* %stack_var_-40, align 4
  %v5_b40c = mul i32 %v3_b404, 24
  %v0_b410 = load i32, i32* %r4.global-to-local, align 4
  %v1_b414 = load i32, i32* @sb, align 4
  %v2_b414 = add i32 %v1_b414, %v5_b40c
  store i32 %v2_b414, i32* %r1.global-to-local, align 4
  %v1_b418 = and i32 %v0_b410, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b418, i32* %r3.global-to-local, align 4
  %v1_b410 = udiv i32 %v0_b410, 256
  %v3_b41c = and i32 %v1_b410, 65280
  store i32 %v3_b41c, i32* %r2.global-to-local, align 4
  %v3_b420 = mul i32 %v0_b410, 16777216
  %v1_b424 = add i32 %v2_b414, 20
  %v2_b424 = inttoptr i32 %v1_b424 to i8*
  %v3_b424 = load i8, i8* %v2_b424, align 1
  %v4_b424 = zext i8 %v3_b424 to i32
  store i32 %v4_b424, i32* %lr.global-to-local, align 4
  %v4_b428 = mul i32 %v1_b418, 256
  %v5_b428 = or i32 %v4_b428, %v3_b420
  %v4_b42c = udiv i32 %v0_b410, 16777216
  %v5_b42c = or i32 %v3_b41c, %v4_b42c
  %v2_b430 = or i32 %v5_b42c, %v5_b428
  %v7_b434 = lshr i32 %v0_b400, %v4_b424
  %v8_b434 = add i32 %v7_b434, %v2_b430
  %v3_b440 = mul i32 %v8_b434, 16777216
  %v1_b444 = and i32 %v8_b434, 65280
  store i32 %v1_b444, i32* %r0.global-to-local, align 4
  store i32 %v5_af5c, i32* %r2.global-to-local, align 4
  %v4_b450 = mul nuw nsw i32 %v1_b444, 256
  %v5_b450 = or i32 %v4_b450, %v3_b440
  store i32 %v5_b450, i32* %r1.global-to-local, align 4
  %v2_b454 = call i32 @llvm.bswap.i32(i32 %v8_b434)
  store i32 %v2_b454, i32* %r3.global-to-local, align 4
  store i1 %v7_b2c8, i1* %cpsr_z.global-to-local, align 1
  %v1_b45c = load i32, i32* @r5, align 4
  %v2_b45c = add i32 %v1_b45c, 16
  %v3_b45c = inttoptr i32 %v2_b45c to i32*
  store i32 %v2_b454, i32* %v3_b45c, align 4
  br i1 %v2_b2c8, label %dec_label_pc_b464, label %dec_label_pc_b2d0

dec_label_pc_b464:                                ; preds = %dec_label_pc_b3fc, %dec_label_pc_b2c4
  %v0_b464 = call i32 @function_eccc()
  store i32 %v0_b464, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b470 = load i32, i32* @sl, align 4
  %v9_b470 = icmp eq i32 %v0_b470, 65535
  store i1 %v9_b470, i1* %cpsr_z.global-to-local, align 1
  %v1_b474 = load i32, i32* @r5, align 4
  %v2_b474 = add i32 %v1_b474, 12
  %v3_b474 = inttoptr i32 %v2_b474 to i32*
  store i32 %v0_b464, i32* %v3_b474, align 4
  br i1 %v9_b470, label %dec_label_pc_b47c, label %dec_label_pc_b464.dec_label_pc_b2e0_crit_edge

dec_label_pc_b464.dec_label_pc_b2e0_crit_edge:    ; preds = %dec_label_pc_b464
  %v1_b2e4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b2e0

dec_label_pc_b47c:                                ; preds = %dec_label_pc_b464, %dec_label_pc_b2d0
  %v0_b47c = call i32 @function_eccc()
  %v3_b484 = urem i32 %v0_b47c, 65536
  store i32 %v3_b484, i32* %r0.global-to-local, align 4
  %v3_b48815 = udiv i32 %v0_b47c, 256
  %v1_b48c = trunc i32 %v3_b48815 to i8
  %v2_b48c = load i32, i32* @r5, align 4
  %v3_b48c = add i32 %v2_b48c, 5
  %v4_b48c = inttoptr i32 %v3_b48c to i8*
  store i8 %v1_b48c, i8* %v4_b48c, align 1
  %v0_b490 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_afc4, i32* %r3.global-to-local, align 4
  %v1_b498 = sub i32 999, %v0_b490
  store i32 %v1_b498, i32* %r2.global-to-local, align 4
  %v3_b49c = sdiv i32 %v1_b498, 256
  store i32 %v3_b49c, i32* %r1.global-to-local, align 4
  %v1_b4a0 = load i32, i32* @r4, align 4
  %v9_b4a0 = icmp eq i32 %v3_afc4, %v1_b4a0
  store i1 %v9_b4a0, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a4 = trunc i32 %v0_b490 to i8
  %v2_b4a4 = load i32, i32* @r5, align 4
  %v3_b4a4 = add i32 %v2_b4a4, 4
  %v4_b4a4 = inttoptr i32 %v3_b4a4 to i8*
  store i8 %v1_b4a4, i8* %v4_b4a4, align 1
  %v0_b4a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b4a8 = trunc i32 %v0_b4a8 to i8
  %v2_b4a8 = load i32, i32* @r6, align 4
  %v3_b4a8 = add i32 %v2_b4a8, 5
  %v4_b4a8 = inttoptr i32 %v3_b4a8 to i8*
  store i8 %v1_b4a8, i8* %v4_b4a8, align 1
  %v0_b4ac = load i32, i32* %r2.global-to-local, align 4
  %v1_b4ac = trunc i32 %v0_b4ac to i8
  %v2_b4ac = load i32, i32* @r6, align 4
  %v3_b4ac = add i32 %v2_b4ac, 4
  %v4_b4ac = inttoptr i32 %v3_b4ac to i8*
  store i8 %v1_b4ac, i8* %v4_b4ac, align 1
  %v0_b4b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b4b0, label %dec_label_pc_b4b4, label %dec_label_pc_b47c.dec_label_pc_b2ec_crit_edge

dec_label_pc_b47c.dec_label_pc_b2ec_crit_edge:    ; preds = %dec_label_pc_b47c
  %v1_b2f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b2ec

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b47c, %dec_label_pc_b2e0
  %v0_b4b4 = call i32 @function_eccc()
  %v1_b4b4 = trunc i32 %v0_b4b4 to i8
  store i32 %v0_b4b4, i32* %r0.global-to-local, align 4
  store i32 %v3_afc8, i32* %r1.global-to-local, align 4
  %v4_b4bc = sdiv i32 %v0_b4b4, 256
  store i32 %v4_b4bc, i32* %r3.global-to-local, align 4
  %v1_b4c0 = load i32, i32* @r4, align 4
  %v9_b4c0 = icmp eq i32 %v3_afc8, %v1_b4c0
  store i1 %v9_b4c0, i1* %cpsr_z.global-to-local, align 1
  %v3_b4c4 = load i32, i32* @r5, align 4
  %v4_b4c4 = add i32 %v3_b4c4, 44
  %v5_b4c4 = inttoptr i32 %v4_b4c4 to i8*
  store i8 %v1_b4b4, i8* %v5_b4c4, align 1
  %v0_b4c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b4c8 = trunc i32 %v0_b4c8 to i8
  %v2_b4c8 = load i32, i32* @r7, align 4
  %v3_b4c8 = add i32 %v2_b4c8, 1
  %v4_b4c8 = inttoptr i32 %v3_b4c8 to i8*
  store i8 %v1_b4c8, i8* %v4_b4c8, align 1
  %v0_b4cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b4cc, label %dec_label_pc_b4d0, label %dec_label_pc_b2f8

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b4b4, %dec_label_pc_b2ec
  %v0_b4d0 = call i32 @function_eccc()
  %v1_b4d0 = trunc i32 %v0_b4d0 to i8
  store i32 %v0_b4d0, i32* %r0.global-to-local, align 4
  store i32 %v1_afbc, i32* %r2.global-to-local, align 4
  %v4_b4d8 = sdiv i32 %v0_b4d0, 256
  store i32 %v4_b4d8, i32* %r3.global-to-local, align 4
  store i1 %v2_b2fc, i1* %cpsr_z.global-to-local, align 1
  %v1_b4e0 = trunc i32 %v4_b4d8 to i8
  %v2_b4e0 = load i32, i32* @r7, align 4
  %v3_b4e0 = add i32 %v2_b4e0, 3
  %v4_b4e0 = inttoptr i32 %v3_b4e0 to i8*
  store i8 %v1_b4e0, i8* %v4_b4e0, align 1
  %v0_b4e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b4e4, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_b4d0
  %v1_b4e4 = load i32, i32* @r5, align 4
  %v2_b4e4 = add i32 %v1_b4e4, 16
  %v3_b4e4 = inttoptr i32 %v2_b4e4 to i32*
  %v4_b4e4 = load i32, i32* %v3_b4e4, align 4
  store i32 %v4_b4e4, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_b4d0, %bb100
  %v3_b4e8 = load i32, i32* @r7, align 4
  %v4_b4e8 = add i32 %v3_b4e8, 2
  %v5_b4e8 = inttoptr i32 %v4_b4e8 to i8*
  store i8 %v1_b4d0, i8* %v5_b4e8, align 1
  %v0_b4ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b4ec, label %dec_label_pc_b4f4, label %bb102

bb102:                                            ; preds = %bb101
  %v1_b4ec = load i32, i32* %r3.global-to-local, align 4
  %v2_b4ec = load i32, i32* @r6, align 4
  %v3_b4ec = add i32 %v2_b4ec, 16
  %v4_b4ec = inttoptr i32 %v3_b4ec to i32*
  store i32 %v1_b4ec, i32* %v4_b4ec, align 4
  br label %dec_label_pc_b30c

dec_label_pc_b4f4:                                ; preds = %dec_label_pc_b2f8, %bb101
  %v0_b4f4 = call i32 @function_eccc()
  store i32 %v0_b4f4, i32* %r0.global-to-local, align 4
  store i32 %v1_af28, i32* %r3.global-to-local, align 4
  store i1 %v2_b4fc, i1* %cpsr_z.global-to-local, align 1
  %v1_b500 = load i32, i32* @r6, align 4
  %v2_b500 = add i32 %v1_b500, 16
  %v3_b500 = inttoptr i32 %v2_b500 to i32*
  store i32 %v0_b4f4, i32* %v3_b500, align 4
  br i1 %v2_b4fc, label %dec_label_pc_b318, label %dec_label_pc_b508

dec_label_pc_b508:                                ; preds = %dec_label_pc_b30c, %dec_label_pc_b4f4
  %v0_b508 = load i32, i32* @r7, align 4
  %v1_b508 = add i32 %v0_b508, 8
  store i32 %v1_b508, i32* %r0.global-to-local, align 4
  store i32 %v5_af08, i32* @r1, align 4
  %v1_b510 = inttoptr i32 %v1_b508 to i8*
  %v2_b510 = call i32 @function_eea8(i8* %v1_b510)
  store i32 %v2_b510, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b318

dec_label_pc_b518:                                ; preds = %dec_label_pc_afa8
  %v1_b520 = add i32 %v5_af08, 8
  store i32 %v1_b520, i32* %r2.global-to-local, align 4
  %v1_b524 = add i32 %v5_af08, 52
  store i32 %v1_b524, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b284.preheader

; uselistorder directives
  uselistorder i32 %v1_b524, { 1, 0 }
  uselistorder i32 %v1_b520, { 1, 0 }
  uselistorder i32 %v4_b4d8, { 1, 0 }
  uselistorder i32 %v0_b4d0, { 0, 2, 1 }
  uselistorder i32 %v0_b4b4, { 0, 2, 1 }
  uselistorder i32 %v2_b454, { 1, 0 }
  uselistorder i32 %v8_b434, { 1, 2, 0 }
  uselistorder i32 %v0_b410, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b3dc, { 1, 2, 0 }
  uselistorder i32 %v1_b3d8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b37c, { 1, 0, 2 }
  uselistorder i32 %v4_b378, { 0, 2, 1 }
  uselistorder i32 %v0_b358, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b348, { 0, 2, 1 }
  uselistorder i32 %v4_b32c, { 1, 0 }
  uselistorder i32 %v7_b2b0, { 1, 0, 2 }
  uselistorder i32 %v0_b284, { 1, 0 }
  uselistorder i1 %v7_b2c8, { 2, 1, 0 }
  uselistorder i1 %v2_b4fc, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b244, { 1, 0, 2 }
  uselistorder i32 %v0_b208, { 1, 0, 2 }
  uselistorder i32 %v3_b0bc, { 0, 2, 1 }
  uselistorder i32 %v3_b07c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b034, { 1, 0 }
  uselistorder i32 %v1_b010, { 1, 0 }
  uselistorder i32 %v1_b00c, { 0, 2, 1 }
  uselistorder i32 %v3_aff0, { 2, 1, 0 }
  uselistorder i32 %v0_afcc, { 1, 0, 2 }
  uselistorder i32 %v1_afbc, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_afb8, { 0, 2, 1 }
  uselistorder i32 %v0_afb4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_afa0, { 1, 0 }
  uselistorder i1 %v7_af74, { 1, 0 }
  uselistorder i32 %v3_af70, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_af5c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_af28, { 1, 0, 2 }
  uselistorder i32 %v5_af08, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_aeac, { 1, 0 }
  uselistorder i32 %v2_ae3c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_ae20, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i32 1023, { 0, 1, 2, 4, 3, 5 }
  uselistorder i8 47, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_b508, { 1, 0 }
  uselistorder label %dec_label_pc_b4f4, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_b3f4, { 1, 0 }
  uselistorder label %dec_label_pc_b318, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b284.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b538(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b538:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b53c = urem i32 %arg1, 256
  store i32 %v1_b53c, i32* @fp, align 4
  store i32 %v1_b53c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b554 = urem i32 %arg3, 256
  store i32 %v1_b554, i32* @r4, align 4
  %v2_b558 = call i32 @function_114c4(i32 %v1_b53c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b564 = load i32, i32* @fp, align 4
  store i32 %v0_b564, i32* %r0.global-to-local, align 4
  %v2_b568 = call i32 @function_114c4(i32 %v0_b564, i32 4)
  %v0_b56c = load i32, i32* @r5, align 4
  store i32 %v0_b56c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b57c = load i32, i32* @r4, align 4
  store i32 %v0_b57c, i32* %r0.global-to-local, align 4
  %v5_b580 = inttoptr i32 %v0_b56c to i32*
  %v6_b580 = call i32 @function_a398(i32 %v0_b57c, i32* %v5_b580, i32 2, i32 0)
  %v1_b58c = urem i32 %v6_b580, 256
  store i32 %v1_b58c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b598 = load i32, i32* @r5, align 4
  store i32 %v0_b598, i32* %r1.global-to-local, align 4
  %v0_b59c = load i32, i32* @r4, align 4
  store i32 %v0_b59c, i32* %r0.global-to-local, align 4
  %v6_b5a4 = inttoptr i32 %v0_b598 to i32*
  %v7_b5a4 = call i32 @function_a398(i32 %v0_b59c, i32* %v6_b5a4, i32 3, i32 65535)
  %v0_b5a8 = load i32, i32* @r5, align 4
  store i32 %v0_b5a8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b5a4, i32* @r6, align 4
  %v0_b5b8 = load i32, i32* @r4, align 4
  store i32 %v0_b5b8, i32* %r0.global-to-local, align 4
  %v4_b5bc = inttoptr i32 %v0_b5a8 to i32*
  %v5_b5bc = call i32 @function_a398(i32 %v0_b5b8, i32* %v4_b5bc, i32 4, i32 64)
  %v1_b5c4 = urem i32 %v5_b5bc, 256
  store i32 %v1_b5c4, i32* %ip.global-to-local, align 4
  %v0_b5c8 = load i32, i32* @r5, align 4
  store i32 %v0_b5c8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b5d4 = load i32, i32* @r4, align 4
  store i32 %v0_b5d4, i32* %r0.global-to-local, align 4
  %v6_b5dc = inttoptr i32 %v0_b5c8 to i32*
  %v7_b5dc = call i32 @function_a398(i32 %v0_b5d4, i32* %v6_b5dc, i32 5, i32 1)
  %v1_b5e8 = urem i32 %v7_b5dc, 256
  store i32 %v1_b5e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b5f0 = load i32, i32* @r5, align 4
  store i32 %v0_b5f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b5f8 = load i32, i32* @r4, align 4
  store i32 %v0_b5f8, i32* %r0.global-to-local, align 4
  %v5_b600 = inttoptr i32 %v0_b5f0 to i32*
  %v6_b600 = call i32 @function_a398(i32 %v0_b5f8, i32* %v5_b600, i32 7, i32 65535)
  %v0_b604 = load i32, i32* @r5, align 4
  store i32 %v0_b604, i32* %r1.global-to-local, align 4
  %v3_b608 = mul i32 %v6_b600, 65536
  store i32 %v3_b608, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b614 = load i32, i32* @r4, align 4
  store i32 %v0_b614, i32* %r0.global-to-local, align 4
  %v4_b618 = inttoptr i32 %v0_b604 to i32*
  %v5_b618 = call i32 @function_a398(i32 %v0_b614, i32* %v4_b618, i32 11, i32 0)
  %v1_b620 = urem i32 %v5_b618, 256
  store i32 %v1_b620, i32* %ip.global-to-local, align 4
  %v0_b624 = load i32, i32* @r5, align 4
  store i32 %v0_b624, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b630 = load i32, i32* @r4, align 4
  store i32 %v0_b630, i32* %r0.global-to-local, align 4
  %v5_b638 = inttoptr i32 %v0_b624 to i32*
  %v6_b638 = call i32 @function_a398(i32 %v0_b630, i32* %v5_b638, i32 12, i32 1)
  %v1_b640 = urem i32 %v6_b638, 256
  store i32 %v1_b640, i32* %ip.global-to-local, align 4
  %v0_b644 = load i32, i32* @r5, align 4
  store i32 %v0_b644, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b650 = load i32, i32* @r4, align 4
  store i32 %v0_b650, i32* %r0.global-to-local, align 4
  %v5_b658 = inttoptr i32 %v0_b644 to i32*
  %v6_b658 = call i32 @function_a398(i32 %v0_b650, i32* %v5_b658, i32 13, i32 1)
  %v1_b660 = urem i32 %v6_b658, 256
  store i32 %v1_b660, i32* %ip.global-to-local, align 4
  %v0_b664 = load i32, i32* @r5, align 4
  store i32 %v0_b664, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b670 = load i32, i32* @r4, align 4
  store i32 %v0_b670, i32* %r0.global-to-local, align 4
  %v5_b678 = inttoptr i32 %v0_b664 to i32*
  %v6_b678 = call i32 @function_a398(i32 %v0_b670, i32* %v5_b678, i32 14, i32 0)
  %v1_b680 = urem i32 %v6_b678, 256
  store i32 %v1_b680, i32* %ip.global-to-local, align 4
  %v0_b684 = load i32, i32* @r5, align 4
  store i32 %v0_b684, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b690 = load i32, i32* @r4, align 4
  store i32 %v0_b690, i32* %r0.global-to-local, align 4
  %v5_b698 = inttoptr i32 %v0_b684 to i32*
  %v6_b698 = call i32 @function_a398(i32 %v0_b690, i32* %v5_b698, i32 15, i32 0)
  %v1_b6a0 = urem i32 %v6_b698, 256
  store i32 %v1_b6a0, i32* %ip.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @r5, align 4
  store i32 %v0_b6a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b6b0 = load i32, i32* @r4, align 4
  store i32 %v0_b6b0, i32* %r0.global-to-local, align 4
  %v5_b6b8 = inttoptr i32 %v0_b6a4 to i32*
  %v6_b6b8 = call i32 @function_a398(i32 %v0_b6b0, i32* %v5_b6b8, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b6b8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b6c8 = load i32, i32* @r5, align 4
  store i32 %v0_b6c8, i32* %r1.global-to-local, align 4
  %v0_b6cc = load i32, i32* @r4, align 4
  store i32 %v0_b6cc, i32* %r0.global-to-local, align 4
  %v1_b6d0 = urem i32 %v6_b6b8, 256
  store i32 %v1_b6d0, i32* @r8, align 4
  %v4_b6d4 = inttoptr i32 %v0_b6c8 to i32*
  %v5_b6d4 = call i32 @function_a398(i32 %v0_b6cc, i32* %v4_b6d4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r5, align 4
  store i32 %v0_b6e0, i32* %r1.global-to-local, align 4
  store i32 %v5_b6d4, i32* @sb, align 4
  %v0_b6e8 = load i32, i32* @r4, align 4
  store i32 %v0_b6e8, i32* %r0.global-to-local, align 4
  %v4_b6ec = inttoptr i32 %v0_b6e0 to i32*
  %v5_b6ec = call i32 @function_a398(i32 %v0_b6e8, i32* %v4_b6ec, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b6f8 = urem i32 %v5_b6ec, 256
  store i32 %v1_b6f8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b708 = call i32 @function_111c0(i32 2, i32 3, i32 6)
  store i32 %v3_b708, i32* %r0.global-to-local, align 4
  %v0_b70c = load i32, i32* @r7, align 4
  %v3_b70c = udiv i32 %v0_b70c, 65536
  store i32 %v3_b70c, i32* %r1.global-to-local, align 4
  %v7_b710 = icmp eq i32 %v3_b708, -1
  store i1 %v7_b710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b710, label %dec_label_pc_b96c, label %dec_label_pc_b720

dec_label_pc_b720:                                ; preds = %dec_label_pc_b538
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b728 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b728, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b73c = call i32 @function_11190(i32 %v3_b708, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b73c, i32* %r0.global-to-local, align 4
  %v7_b740 = icmp eq i32 %v6_b73c, -1
  store i1 %v7_b740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b740, label %dec_label_pc_b964, label %dec_label_pc_b748

dec_label_pc_b748:                                ; preds = %dec_label_pc_b720
  %v0_b748 = load i32, i32* @fp, align 4
  %v2_b748 = icmp eq i32 %v0_b748, 0
  store i1 %v2_b748, i1* %cpsr_z.global-to-local, align 1
  %v0_b74c = load i32, i32* @r6, align 4
  %v3_b74c = mul i32 %v0_b74c, 65536
  store i32 %v3_b74c, i32* %r0.global-to-local, align 4
  %v3_b750 = urem i32 %v0_b74c, 65536
  store i32 %v3_b750, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b748, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b774.preheader

.thread18:                                        ; preds = %dec_label_pc_b748
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_bbf8

dec_label_pc_b774.preheader:                      ; preds = %dec_label_pc_b748
  %v5_b758 = load i32, i32* @r7, align 4
  %v8_b758 = udiv i32 %v5_b758, 16777216
  %tmp73 = udiv i32 %v0_b74c, 256
  %v8_b75c = urem i32 %tmp73, 256
  store i32 %v8_b75c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b860 = icmp ugt i32 %v0_b70c, -65537
  %v2_b884 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b890 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_b8c0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b8c4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b8c8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_b914 = zext i8 %tmp31 to i32
  %v4_b918 = zext i8 %tmp30 to i32
  %v4_b924 = mul nuw nsw i32 %v4_b918, 256
  %v4_b934 = zext i8 %tmp to i32
  %v1_b938 = and i32 %v4_b934, 18
  %v2_b93c = icmp eq i32 %v1_b938, 18
  %v1_b870 = mul nuw nsw i32 %v3_b70c, 256
  %v4_b874 = and i32 %v1_b870, 65280
  %v5_b874 = or i32 %v8_b758, %v4_b874
  %v3_b87893 = udiv i32 %v4_b874, 256
  %v1_b87c = trunc i32 %v3_b87893 to i8
  %v1_ba40 = mul i32 %v0_b74c, 256
  %v4_ba48 = and i32 %v1_ba40, 65280
  %sext = mul i32 %v6_b580, 16777216
  %v4_ba58 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b5bc, 16777216
  %v4_ba7c = sdiv i32 %sext5, 16777216
  %v5_b924 = or i32 %v4_b914, %v4_b924
  %v1_b944 = and i32 %v4_b934, 5
  %v2_b944 = icmp eq i32 %v1_b944, 0
  %v1_b880 = trunc i32 %v8_b758 to i8
  %v5_ba48 = or i32 %v8_b75c, %v4_ba48
  %v1_ba68 = trunc i32 %v4_ba58 to i8
  %v1_bb48 = urem i32 %v5_b618, 2
  %tmp94 = sub nsw i32 0, %v1_bb48
  %v4_bb50 = and i32 %tmp94, 32
  %v1_bb60 = urem i32 %v6_b638, 2
  %tmp95 = sub nsw i32 0, %v1_bb60
  %v4_bb68 = and i32 %tmp95, 16
  %v1_bb78 = urem i32 %v6_b658, 2
  %tmp96 = sub nsw i32 0, %v1_bb78
  %v4_bb80 = and i32 %tmp96, 8
  %v1_bb90 = urem i32 %v6_b678, 2
  %tmp97 = sub nsw i32 0, %v1_bb90
  %v4_bb98 = and i32 %tmp97, 4
  %v1_bba8 = urem i32 %v6_b698, 2
  %tmp98 = sub nsw i32 0, %v1_bba8
  %v3_bbb0 = and i32 %tmp98, 2
  br label %dec_label_pc_b774

dec_label_pc_b774:                                ; preds = %dec_label_pc_bbe4, %dec_label_pc_b94c, %dec_label_pc_b774.preheader
  store i32 %v8_b75c, i32* %r3.global-to-local, align 4
  %v0_b780 = load i32, i32* @sb, align 4
  %v1_b780 = add i32 %v0_b780, 40
  store i32 %v1_b780, i32* @sl, align 4
  br label %dec_label_pc_b784

dec_label_pc_b784:                                ; preds = %dec_label_pc_b958, %dec_label_pc_b774
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b790 = call i32 @function_111c0(i32 2, i32 1, i32 0)
  store i32 %v3_b790, i32* %r0.global-to-local, align 4
  %v7_b794 = icmp eq i32 %v3_b790, -1
  store i1 %v7_b794, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b790, i32* @r7, align 4
  br i1 %v7_b794, label %dec_label_pc_bbe4, label %dec_label_pc_b7a0

dec_label_pc_b7a0:                                ; preds = %dec_label_pc_b784
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b7a8 = call i32 @function_107d4(i32 %v3_b790, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b7b0 = or i32 %v2_b7a8, 2048
  store i32 %v1_b7b0, i32* @r2, align 4
  %v0_b7b4 = load i32, i32* @r7, align 4
  store i32 %v0_b7b4, i32* %r0.global-to-local, align 4
  %v2_b7b8 = call i32 @function_107d4(i32 %v0_b7b4, i32 4)
  store i32 %v2_b7b8, i32* %r0.global-to-local, align 4
  %v3_b7bc = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b7cc = mul i32 %v3_b7bc, 24
  store i32 %v5_b7cc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b7dc = add i32 %v5_b7cc, %arg2
  store i32 %v2_b7dc, i32* %r2.global-to-local, align 4
  %v1_b7e0 = add i32 %v2_b7dc, 20
  %v2_b7e0 = inttoptr i32 %v1_b7e0 to i8*
  %v3_b7e0 = load i8, i8* %v2_b7e0, align 1
  %v4_b7e0 = zext i8 %v3_b7e0 to i32
  store i32 %v4_b7e0, i32* %r3.global-to-local, align 4
  %v2_b7e4 = icmp ugt i8 %v3_b7e0, 30
  %v7_b7e4 = icmp eq i8 %v3_b7e0, 31
  store i1 %v7_b7e4, i1* %cpsr_z.global-to-local, align 1
  %v2_b7e8 = xor i1 %v7_b7e4, true
  %v3_b7e8 = and i1 %v2_b7e4, %v2_b7e8
  %v5_b7e8 = add i32 %v2_b7dc, 16
  %v6_b7e8 = inttoptr i32 %v5_b7e8 to i32*
  %v7_b7e8 = load i32, i32* %v6_b7e8, align 4
  br i1 %v3_b7e8, label %dec_label_pc_b854, label %dec_label_pc_b7f4

dec_label_pc_b7f4:                                ; preds = %dec_label_pc_b7a0
  store i32 %v7_b7e8, i32* @r4, align 4
  %v0_b7f8 = call i32 @function_eccc()
  store i32 %v0_b7f8, i32* %r0.global-to-local, align 4
  %v3_b7fc = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b808 = mul i32 %v3_b7fc, 24
  %v0_b80c = load i32, i32* @r4, align 4
  %v2_b810 = add i32 %v5_b808, %arg2
  store i32 %v2_b810, i32* %r1.global-to-local, align 4
  %v1_b814 = and i32 %v0_b80c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b814, i32* %r3.global-to-local, align 4
  %v1_b80c = udiv i32 %v0_b80c, 256
  %v3_b818 = and i32 %v1_b80c, 65280
  store i32 %v3_b818, i32* %r2.global-to-local, align 4
  %v3_b81c = mul i32 %v0_b80c, 16777216
  store i32 %v3_b81c, i32* %ip.global-to-local, align 4
  %v1_b820 = add i32 %v2_b810, 20
  %v2_b820 = inttoptr i32 %v1_b820 to i8*
  %v3_b820 = load i8, i8* %v2_b820, align 1
  %v4_b820 = zext i8 %v3_b820 to i32
  store i32 %v4_b820, i32* %lr.global-to-local, align 4
  %v4_b824 = mul i32 %v1_b814, 256
  %v5_b824 = or i32 %v4_b824, %v3_b81c
  store i32 %v5_b824, i32* %ip.global-to-local, align 4
  %v4_b828 = udiv i32 %v0_b80c, 16777216
  %v5_b828 = or i32 %v3_b818, %v4_b828
  %v2_b82c = or i32 %v5_b828, %v5_b824
  %v7_b830 = lshr i32 %v0_b7f8, %v4_b820
  %v8_b830 = add i32 %v7_b830, %v2_b82c
  store i32 %v8_b830, i32* %r2.global-to-local, align 4
  %v3_b83c = mul i32 %v8_b830, 16777216
  %v1_b840 = and i32 %v8_b830, 65280
  store i32 %v1_b840, i32* %r0.global-to-local, align 4
  %v4_b844 = mul nuw nsw i32 %v1_b840, 256
  %v5_b844 = or i32 %v4_b844, %v3_b83c
  store i32 %v5_b844, i32* %r1.global-to-local, align 4
  %v2_b84c = call i32 @llvm.bswap.i32(i32 %v8_b830)
  br label %dec_label_pc_b854

dec_label_pc_b854:                                ; preds = %dec_label_pc_b7a0, %dec_label_pc_b7f4
  %storemerge25 = phi i32 [ %v2_b84c, %dec_label_pc_b7f4 ], [ %v7_b7e8, %dec_label_pc_b7a0 ]
  store i32 %v3_b70c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b860, label %dec_label_pc_b974, label %dec_label_pc_b868

dec_label_pc_b868:                                ; preds = %dec_label_pc_b854
  store i32 %v8_b758, i32* %ip.global-to-local, align 4
  store i32 %v5_b874, i32* %r3.global-to-local, align 4
  store i32 %v3_b87893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b974, %dec_label_pc_b868
  %stack_var_-57.0 = phi i8 [ %v1_b97c, %dec_label_pc_b974 ], [ %v1_b87c, %dec_label_pc_b868 ]
  %storemerge = phi i8 [ %v1_b974, %dec_label_pc_b974 ], [ %v1_b880, %dec_label_pc_b868 ]
  store i32 %v2_b884, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b88c = load i32, i32* @r7, align 4
  store i32 %v0_b88c, i32* %r0.global-to-local, align 4
  %v4_b890 = call i32 @function_1101c(i32 %v0_b88c, %sockaddr* nonnull %v3_b890, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b898 = call i32 @function_10b94(i32* null)
  store i32 %v2_b898, i32* %r0.global-to-local, align 4
  store i32 %v2_b898, i32* @r4, align 4
  %v9_b8f8 = icmp eq i32 %tmp32, %storemerge25
  %v4_b91c = zext i8 %storemerge to i32
  %v4_b920 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b8f8 to i32
  %v9_b90c = icmp eq i1 %v9_b8f8, false
  %v4_b928 = mul nuw nsw i32 %v4_b920, 256
  %v5_b928 = or i32 %v4_b928, %v4_b91c
  %v9_b92c = icmp eq i32 %v5_b928, %v5_b924
  br label %dec_label_pc_b8b4

dec_label_pc_b8a4:                                ; preds = %.thread23, %dec_label_pc_b914, %dec_label_pc_b944, %bb75
  %v2_b8a4 = call i32 @function_10b94(i32* null)
  %v0_b8a8 = load i32, i32* @r4, align 4
  %v2_b8a8 = sub i32 %v2_b8a4, %v0_b8a8
  store i32 %v2_b8a8, i32* %r0.global-to-local, align 4
  %v7_b8ac = icmp eq i32 %v2_b8a8, 10
  store i1 %v7_b8ac, i1* %cpsr_z.global-to-local, align 1
  %v8_b8b0 = icmp sgt i32 %v2_b8a8, 10
  br i1 %v8_b8b0, label %dec_label_pc_b958, label %dec_label_pc_b8b4

dec_label_pc_b8b4:                                ; preds = %dec_label_pc_b8a4, %dec_label_pc_b884
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_b8c0, i32* %lr.global-to-local, align 4
  store i32 %v2_b8c4, i32* %ip.global-to-local, align 4
  store i32 %v2_b8c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b708, i32* %r0.global-to-local, align 4
  %v7_b8dc = call i32 @function_110fc(i32 %v3_b708, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b8c0, i32 %v2_b8c4)
  store i32 %v7_b8dc, i32* %r2.global-to-local, align 4
  %v7_b8e4 = icmp eq i32 %v7_b8dc, -1
  store i1 %v7_b8e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b8e4, label %dec_label_pc_b96c, label %dec_label_pc_b8f0

dec_label_pc_b8f0:                                ; preds = %dec_label_pc_b8b4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_b904 = icmp eq i32 %v7_b8dc, 40
  store i1 %v7_b904, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_b8dc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_b8f0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b8a4

bb75:                                             ; preds = %dec_label_pc_b8f0
  store i1 %v9_b90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b90c, label %dec_label_pc_b8a4, label %dec_label_pc_b914

dec_label_pc_b914:                                ; preds = %bb75
  store i32 %v4_b918, i32* %r1.global-to-local, align 4
  store i32 %v4_b91c, i32* %ip.global-to-local, align 4
  store i32 %v4_b920, i32* %r2.global-to-local, align 4
  store i32 %v5_b924, i32* %r3.global-to-local, align 4
  store i32 %v5_b928, i32* @r5, align 4
  store i1 %v9_b92c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b92c, label %dec_label_pc_b934, label %dec_label_pc_b8a4

dec_label_pc_b934:                                ; preds = %dec_label_pc_b914
  store i32 %v4_b934, i32* %r2.global-to-local, align 4
  store i32 %v1_b938, i32* %r3.global-to-local, align 4
  store i1 %v2_b93c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b93c, label %dec_label_pc_b988, label %dec_label_pc_b944

dec_label_pc_b944:                                ; preds = %dec_label_pc_b934
  store i1 %v2_b944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b944, label %dec_label_pc_b8a4, label %dec_label_pc_b94c

dec_label_pc_b94c:                                ; preds = %dec_label_pc_b944
  %v0_b94c = load i32, i32* @r7, align 4
  store i32 %v0_b94c, i32* %r0.global-to-local, align 4
  %v1_b950 = call i32 @function_108c4(i32 %v0_b94c)
  store i32 %v1_b950, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b774

dec_label_pc_b958:                                ; preds = %dec_label_pc_b8a4
  %v0_b958 = load i32, i32* @r7, align 4
  store i32 %v0_b958, i32* %r0.global-to-local, align 4
  %v1_b95c = call i32 @function_108c4(i32 %v0_b958)
  store i32 %v1_b95c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b784

dec_label_pc_b964:                                ; preds = %dec_label_pc_b720
  store i32 %v3_b708, i32* %r0.global-to-local, align 4
  %v1_b968 = call i32 @function_108c4(i32 %v3_b708)
  store i32 %v1_b968, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b96c

dec_label_pc_b96c:                                ; preds = %dec_label_pc_b8b4, %dec_label_pc_b538, %dec_label_pc_b964
  %v29_b970 = phi i32 [ %v3_b708, %dec_label_pc_b538 ], [ %v1_b968, %dec_label_pc_b964 ], [ 0, %dec_label_pc_b8b4 ]
  ret i32 %v29_b970

dec_label_pc_b974:                                ; preds = %dec_label_pc_b854
  %v0_b974 = call i32 @function_eccc()
  %v1_b974 = trunc i32 %v0_b974 to i8
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  %v4_b978 = sdiv i32 %v0_b974, 256
  store i32 %v4_b978, i32* %r3.global-to-local, align 4
  %v1_b97c = trunc i32 %v4_b978 to i8
  br label %dec_label_pc_b884

dec_label_pc_b988:                                ; preds = %dec_label_pc_b934
  %v3_b988 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b988, i32* @r4, align 4
  store i32 %v2_b558, i32* %r2.global-to-local, align 4
  %v3_b990 = mul i32 %v3_b988, 16
  store i32 %v3_b990, i32* %ip.global-to-local, align 4
  %v3_b994 = add i32 %v3_b990, %v2_b558
  %v4_b994 = inttoptr i32 %v3_b994 to i32*
  store i32 %storemerge25, i32* %v4_b994, align 4
  %v0_b998 = load i32, i32* @r6, align 4
  %v1_b998 = add i32 %v0_b998, 4
  %v2_b998 = inttoptr i32 %v1_b998 to i32*
  %v3_b998 = load i32, i32* %v2_b998, align 4
  store i32 %v3_b998, i32* %r0.global-to-local, align 4
  %v1_b9a0 = and i32 %v3_b998, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b9a0, i32* %r1.global-to-local, align 4
  store i32 %v2_b558, i32* %lr.global-to-local, align 4
  %v3_b9a8 = mul i32 %v3_b998, 16777216
  %v1_b99c = udiv i32 %v3_b998, 256
  %v3_b9ac = and i32 %v1_b99c, 65280
  %v4_b9b0 = mul i32 %v1_b9a0, 256
  %v5_b9b0 = or i32 %v4_b9b0, %v3_b9a8
  store i32 %v5_b9b0, i32* %r2.global-to-local, align 4
  %v4_b9b4 = udiv i32 %v3_b998, 16777216
  %v5_b9b4 = or i32 %v3_b9ac, %v4_b9b4
  %v1_b9b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b9b8 = add i32 %v1_b9b8, %v2_b558
  store i32 %v2_b9b8, i32* %ip.global-to-local, align 4
  %v2_b9bc = or i32 %v5_b9b4, %v5_b9b0
  store i32 %v2_b9bc, i32* %r3.global-to-local, align 4
  %v2_b9c0 = add i32 %v2_b9b8, 4
  %v3_b9c0 = inttoptr i32 %v2_b9c0 to i32*
  store i32 %v2_b9bc, i32* %v3_b9c0, align 4
  %v0_b9c4 = load i32, i32* @r6, align 4
  %v1_b9c4 = add i32 %v0_b9c4, 8
  %v2_b9c4 = inttoptr i32 %v1_b9c4 to i32*
  %v3_b9c4 = load i32, i32* %v2_b9c4, align 4
  store i32 %v3_b9c4, i32* %r0.global-to-local, align 4
  %v1_b9cc = and i32 %v3_b9c4, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b9cc, i32* %r1.global-to-local, align 4
  %v3_b9d0 = mul i32 %v3_b9c4, 16777216
  %v1_b9c8 = udiv i32 %v3_b9c4, 256
  %v3_b9d4 = and i32 %v1_b9c8, 65280
  %v4_b9d8 = mul i32 %v1_b9cc, 256
  %v5_b9d8 = or i32 %v4_b9d8, %v3_b9d0
  store i32 %v5_b9d8, i32* %r2.global-to-local, align 4
  %v4_b9dc = udiv i32 %v3_b9c4, 16777216
  %v5_b9dc = or i32 %v3_b9d4, %v4_b9dc
  %v2_b9e0 = or i32 %v5_b9dc, %v5_b9d8
  store i32 %v2_b9e0, i32* %r3.global-to-local, align 4
  %v1_b9e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b9e4 = add i32 %v1_b9e4, 8
  %v3_b9e4 = inttoptr i32 %v2_b9e4 to i32*
  store i32 %v2_b9e0, i32* %v3_b9e4, align 4
  %v0_b9e8 = load i32, i32* @r6, align 4
  %v1_b9e8 = inttoptr i32 %v0_b9e8 to i32*
  %v2_b9e8 = load i32, i32* %v1_b9e8, align 4
  %v3_b9ec = udiv i32 %v2_b9e8, 65536
  store i32 %v3_b9ec, i32* %r2.global-to-local, align 4
  %v3_b9f03 = udiv i32 %v2_b9e8, 16777216
  store i32 %v3_b9f03, i32* %r1.global-to-local, align 4
  %v0_b9f4 = load i32, i32* @r5, align 4
  %v3_b9f4 = sdiv i32 %v0_b9f4, 256
  store i32 %v3_b9f4, i32* %r3.global-to-local, align 4
  %v1_b9f8 = trunc i32 %v3_b9f4 to i8
  %v2_b9f8 = load i32, i32* %ip.global-to-local, align 4
  %v3_b9f8 = add i32 %v2_b9f8, 15
  %v4_b9f8 = inttoptr i32 %v3_b9f8 to i8*
  store i8 %v1_b9f8, i8* %v4_b9f8, align 1
  %v0_b9fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b9fc = trunc i32 %v0_b9fc to i8
  %v2_b9fc = load i32, i32* %ip.global-to-local, align 4
  %v3_b9fc = add i32 %v2_b9fc, 13
  %v4_b9fc = inttoptr i32 %v3_b9fc to i8*
  store i8 %v1_b9fc, i8* %v4_b9fc, align 1
  %v0_ba00 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba00 = trunc i32 %v0_ba00 to i8
  %v2_ba00 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba00 = add i32 %v2_ba00, 12
  %v4_ba00 = inttoptr i32 %v3_ba00 to i8*
  store i8 %v1_ba00, i8* %v4_ba00, align 1
  %v0_ba04 = load i32, i32* @r5, align 4
  %v1_ba04 = trunc i32 %v0_ba04 to i8
  %v2_ba04 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba04 = add i32 %v2_ba04, 14
  %v4_ba04 = inttoptr i32 %v3_ba04 to i8*
  store i8 %v1_ba04, i8* %v4_ba04, align 1
  %v0_ba08 = load i32, i32* @sl, align 4
  store i32 %v0_ba08, i32* %r0.global-to-local, align 4
  %v1_ba0c = call i32 @function_11370(i32 %v0_ba08)
  store i32 %v1_ba0c, i32* %r0.global-to-local, align 4
  store i32 %v2_b568, i32* %r1.global-to-local, align 4
  %v3_ba14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ba14, i32* %r2.global-to-local, align 4
  %v2_ba18 = load i32, i32* @r4, align 4
  %v5_ba18 = mul i32 %v2_ba18, 4
  %v6_ba18 = add i32 %v5_ba18, %v2_b568
  %v7_ba18 = inttoptr i32 %v6_ba18 to i32*
  store i32 %v1_ba0c, i32* %v7_ba18, align 4
  %v0_ba1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba1c = load i32, i32* %r2.global-to-local, align 4
  %v4_ba1c = mul i32 %v1_ba1c, 4
  %v5_ba1c = add i32 %v4_ba1c, %v0_ba1c
  %v6_ba1c = inttoptr i32 %v5_ba1c to i32*
  %v7_ba1c = load i32, i32* %v6_ba1c, align 4
  store i32 %v7_ba1c, i32* @r4, align 4
  %v1_ba20 = inttoptr i32 %v7_ba1c to i8*
  %v2_ba20 = load i8, i8* %v1_ba20, align 1
  %tmp100 = urem i8 %v2_ba20, 16
  %v1_ba24 = zext i8 %tmp100 to i32
  %v1_ba28 = or i32 %v1_ba24, 64
  store i32 %v1_ba28, i32* %r3.global-to-local, align 4
  %v1_ba2c = trunc i32 %v1_ba28 to i8
  store i8 %v1_ba2c, i8* %v1_ba20, align 1
  %v0_ba30 = load i32, i32* @r4, align 4
  %v1_ba30 = inttoptr i32 %v0_ba30 to i8*
  %v2_ba30 = load i8, i8* %v1_ba30, align 1
  store i32 %v3_b750, i32* %ip.global-to-local, align 4
  %v1_ba3c = and i8 %v2_ba30, -16
  %v1_ba44 = or i8 %v1_ba3c, 5
  store i32 %v5_ba48, i32* %r0.global-to-local, align 4
  %v0_ba4c = load i32, i32* @sl, align 4
  %v3_ba4c = mul i32 %v0_ba4c, 65536
  store i32 %v3_ba4c, i32* %r2.global-to-local, align 4
  store i32 %v1_b5e8, i32* %lr.global-to-local, align 4
  store i8 %v1_ba44, i8* %v1_ba30, align 1
  store i32 %v4_ba58, i32* %r1.global-to-local, align 4
  %v0_ba5c = load i32, i32* %r2.global-to-local, align 4
  %v3_ba5c = udiv i32 %v0_ba5c, 65536
  %v1_ba60 = urem i32 %v3_ba5c, 256
  store i32 %v1_ba60, i32* %r3.global-to-local, align 4
  %v3_ba64 = udiv i32 %v0_ba5c, 16777216
  store i32 %v3_ba64, i32* %r2.global-to-local, align 4
  %v2_ba68 = load i32, i32* @r4, align 4
  %v3_ba68 = add i32 %v2_ba68, 1
  %v4_ba68 = inttoptr i32 %v3_ba68 to i8*
  store i8 %v1_ba68, i8* %v4_ba68, align 1
  %v0_ba6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ba6c = load i32, i32* %r3.global-to-local, align 4
  %v4_ba6c = mul i32 %v1_ba6c, 256
  %v5_ba6c = or i32 %v4_ba6c, %v0_ba6c
  store i32 %v5_ba6c, i32* %r2.global-to-local, align 4
  %v1_ba70 = trunc i32 %v0_ba6c to i8
  %v2_ba70 = load i32, i32* @r4, align 4
  %v3_ba70 = add i32 %v2_ba70, 2
  %v4_ba70 = inttoptr i32 %v3_ba70 to i8*
  store i8 %v1_ba70, i8* %v4_ba70, align 1
  %v0_ba74 = load i32, i32* %lr.global-to-local, align 4
  %v2_ba74 = icmp eq i32 %v0_ba74, 0
  store i1 %v2_ba74, i1* %cpsr_z.global-to-local, align 1
  %v0_ba78 = load i32, i32* %r2.global-to-local, align 4
  %v3_ba78 = sdiv i32 %v0_ba78, 256
  store i32 %v3_ba78, i32* %r3.global-to-local, align 4
  store i32 %v4_ba7c, i32* %r2.global-to-local, align 4
  %v1_ba80 = trunc i32 %v3_ba78 to i8
  %v2_ba80 = load i32, i32* @r4, align 4
  %v3_ba80 = add i32 %v2_ba80, 3
  %v4_ba80 = inttoptr i32 %v3_ba80 to i8*
  store i8 %v1_ba80, i8* %v4_ba80, align 1
  %v0_ba84 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba84, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_b988
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_b988, %bb76
  %v0_ba88 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba88 = trunc i32 %v0_ba88 to i8
  %v2_ba88 = load i32, i32* @r4, align 4
  %v3_ba88 = add i32 %v2_ba88, 8
  %v4_ba88 = inttoptr i32 %v3_ba88 to i8*
  store i8 %v1_ba88, i8* %v4_ba88, align 1
  %v0_ba8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba8c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_ba8c = load i32, i32* %r3.global-to-local, align 4
  %v2_ba8c = trunc i32 %v1_ba8c to i8
  %v3_ba8c = load i32, i32* @r4, align 4
  %v4_ba8c = add i32 %v3_ba8c, 6
  %v5_ba8c = inttoptr i32 %v4_ba8c to i8*
  store i8 %v2_ba8c, i8* %v5_ba8c, align 1
  %v0_ba90.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba90.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_ba98 = load i32, i32* @r4, align 4
  %v3_ba98 = add i32 %v2_ba98, 9
  %v4_ba98 = inttoptr i32 %v3_ba98 to i8*
  store i8 6, i8* %v4_ba98, align 1
  %v0_ba9c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba9c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_ba9c = load i32, i32* %r2.global-to-local, align 4
  %v2_ba9c = trunc i32 %v1_ba9c to i8
  %v3_ba9c = load i32, i32* @r4, align 4
  %v4_ba9c = add i32 %v3_ba9c, 7
  %v5_ba9c = inttoptr i32 %v4_ba9c to i8*
  store i8 %v2_ba9c, i8* %v5_ba9c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_baa4 = load i32, i32* @global_var_1bcbc.78, align 4
  store i32 %v2_baa4, i32* %r3.global-to-local, align 4
  %v0_baa8 = load i32, i32* %r0.global-to-local, align 4
  %v3_baa8 = sdiv i32 %v0_baa8, 256
  store i32 %v3_baa8, i32* %ip.global-to-local, align 4
  %v1_baac = load i32, i32* @r4, align 4
  %v2_baac = add i32 %v1_baac, 12
  %v3_baac = inttoptr i32 %v2_baac to i32*
  store i32 %v2_baa4, i32* %v3_baac, align 4
  %v0_bab0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bab0 = trunc i32 %v0_bab0 to i8
  %v2_bab0 = load i32, i32* @r4, align 4
  %v3_bab0 = add i32 %v2_bab0, 5
  %v4_bab0 = inttoptr i32 %v3_bab0 to i8*
  store i8 %v1_bab0, i8* %v4_bab0, align 1
  %v3_bab4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bab4, i32* %r2.global-to-local, align 4
  store i32 %v2_b558, i32* %ip.global-to-local, align 4
  %v4_babc = mul i32 %v3_bab4, 16
  %v5_babc = add i32 %v4_babc, %v2_b558
  %v6_babc = inttoptr i32 %v5_babc to i32*
  %v7_babc = load i32, i32* %v6_babc, align 4
  store i32 %v7_babc, i32* %r3.global-to-local, align 4
  %v0_bac0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bac0 = trunc i32 %v0_bac0 to i8
  %v2_bac0 = load i32, i32* @r4, align 4
  %v3_bac0 = add i32 %v2_bac0, 4
  %v4_bac0 = inttoptr i32 %v3_bac0 to i8*
  store i8 %v1_bac0, i8* %v4_bac0, align 1
  %v0_bac4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bac4 = load i32, i32* @r4, align 4
  %v2_bac4 = add i32 %v1_bac4, 16
  %v3_bac4 = inttoptr i32 %v2_bac4 to i32*
  store i32 %v0_bac4, i32* %v3_bac4, align 4
  %v0_bac8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bac8 = mul i32 %v0_bac8, 16
  %v1_bacc = load i32, i32* %ip.global-to-local, align 4
  %v2_bacc = add i32 %v1_bacc, %v3_bac8
  store i32 %v2_bacc, i32* %r2.global-to-local, align 4
  %v1_bad0 = add i32 %v2_bacc, 13
  %v2_bad0 = inttoptr i32 %v1_bad0 to i8*
  %v3_bad0 = load i8, i8* %v2_bad0, align 1
  %v4_bad0 = zext i8 %v3_bad0 to i32
  store i32 %v4_bad0, i32* %r1.global-to-local, align 4
  %v1_bad4 = add i32 %v2_bacc, 12
  %v2_bad4 = inttoptr i32 %v1_bad4 to i8*
  %v3_bad4 = load i8, i8* %v2_bad4, align 1
  %v4_bad4 = zext i8 %v3_bad4 to i32
  %v4_bad8 = mul nuw nsw i32 %v4_bad0, 256
  %v5_bad8 = or i32 %v4_bad4, %v4_bad8
  store i32 %v5_bad8, i32* %r3.global-to-local, align 4
  %v2_badc = load i32, i32* @r4, align 4
  %v3_badc = add i32 %v2_badc, 20
  %v4_badc = inttoptr i32 %v3_badc to i8*
  store i8 %v3_bad4, i8* %v4_badc, align 1
  %v0_bae0 = load i32, i32* @r4, align 4
  %v1_bae0 = add i32 %v0_bae0, 20
  store i32 %v1_bae0, i32* @r6, align 4
  %v0_bae4 = load i32, i32* %r3.global-to-local, align 4
  %v3_bae4 = sdiv i32 %v0_bae4, 256
  store i32 %v3_bae4, i32* %r3.global-to-local, align 4
  %v1_bae8 = trunc i32 %v3_bae4 to i8
  %v3_bae8 = add i32 %v0_bae0, 21
  %v4_bae8 = inttoptr i32 %v3_bae8 to i8*
  store i8 %v1_bae8, i8* %v4_bae8, align 1
  %v0_baec = load i32, i32* @r6, align 4
  %v1_baec = add i32 %v0_baec, 13
  %v2_baec = inttoptr i32 %v1_baec to i8*
  %v3_baec = load i8, i8* %v2_baec, align 1
  %v4_baec = zext i8 %v3_baec to i32
  store i32 %v4_baec, i32* %r3.global-to-local, align 4
  %v0_baf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_baf0 = add i32 %v0_baf0, 8
  %v2_baf0 = inttoptr i32 %v1_baf0 to i32*
  %v3_baf0 = load i32, i32* %v2_baf0, align 4
  store i32 %v3_baf0, i32* %r1.global-to-local, align 4
  %v1_baf4 = or i32 %v4_baec, 1
  store i32 %v1_baf4, i32* %r3.global-to-local, align 4
  %v1_baf8 = add i32 %v0_baf0, 15
  %v2_baf8 = inttoptr i32 %v1_baf8 to i8*
  %v3_baf8 = load i8, i8* %v2_baf8, align 1
  %v4_baf8 = zext i8 %v3_baf8 to i32
  store i32 %v4_baf8, i32* %ip.global-to-local, align 4
  %v1_bafc = add i32 %v0_baf0, 14
  %v2_bafc = inttoptr i32 %v1_bafc to i8*
  %v3_bafc = load i8, i8* %v2_bafc, align 1
  %v4_bafc = zext i8 %v3_bafc to i32
  store i32 %v4_bafc, i32* %r0.global-to-local, align 4
  %v2_bb00 = add i32 %v0_baec, 4
  %v3_bb00 = inttoptr i32 %v2_bb00 to i32*
  store i32 %v3_baf0, i32* %v3_bb00, align 4
  %v0_bb04 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb04 = add i32 %v0_bb04, 4
  %v2_bb04 = inttoptr i32 %v1_bb04 to i32*
  %v3_bb04 = load i32, i32* %v2_bb04, align 4
  store i32 %v3_bb04, i32* %lr.global-to-local, align 4
  %v0_bb08 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb08 = trunc i32 %v0_bb08 to i8
  %v2_bb08 = load i32, i32* @r6, align 4
  %v3_bb08 = add i32 %v2_bb08, 13
  %v4_bb08 = inttoptr i32 %v3_bb08 to i8*
  store i8 %v1_bb08, i8* %v4_bb08, align 1
  %v0_bb0c = load i32, i32* @r6, align 4
  %v1_bb0c = add i32 %v0_bb0c, 12
  %v2_bb0c = inttoptr i32 %v1_bb0c to i8*
  %v3_bb0c = load i8, i8* %v2_bb0c, align 1
  %v4_bb0c = zext i8 %v3_bb0c to i32
  store i32 %v4_bb0c, i32* %r2.global-to-local, align 4
  %v1_bb10 = add i32 %v0_bb0c, 13
  %v2_bb10 = inttoptr i32 %v1_bb10 to i8*
  %v3_bb10 = load i8, i8* %v2_bb10, align 1
  %v4_bb10 = zext i8 %v3_bb10 to i32
  %v0_bb14 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb14 = load i32, i32* %ip.global-to-local, align 4
  %v4_bb14 = mul i32 %v1_bb14, 256
  %v5_bb14 = or i32 %v4_bb14, %v0_bb14
  store i32 %v5_bb14, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bb0c, 16
  %v1_bb18 = zext i8 %tmp101 to i32
  %v3_bb1c = sdiv i32 %v5_bb14, 256
  store i32 %v3_bb1c, i32* %r1.global-to-local, align 4
  %v1_bb20 = or i32 %v1_bb18, 128
  store i32 %v1_bb20, i32* %r2.global-to-local, align 4
  %v1_bb24 = or i32 %v4_bb10, 16
  store i32 %v1_bb24, i32* %r3.global-to-local, align 4
  %v1_bb28 = trunc i32 %v3_bb1c to i8
  %v3_bb28 = add i32 %v0_bb0c, 3
  %v4_bb28 = inttoptr i32 %v3_bb28 to i8*
  store i8 %v1_bb28, i8* %v4_bb28, align 1
  %v0_bb2c = load i32, i32* %lr.global-to-local, align 4
  %v1_bb2c = load i32, i32* @r6, align 4
  %v2_bb2c = add i32 %v1_bb2c, 8
  %v3_bb2c = inttoptr i32 %v2_bb2c to i32*
  store i32 %v0_bb2c, i32* %v3_bb2c, align 4
  %v0_bb30 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb30 = trunc i32 %v0_bb30 to i8
  %v2_bb30 = load i32, i32* @r6, align 4
  %v3_bb30 = add i32 %v2_bb30, 12
  %v4_bb30 = inttoptr i32 %v3_bb30 to i8*
  store i8 %v1_bb30, i8* %v4_bb30, align 1
  %v0_bb34 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb34 = trunc i32 %v0_bb34 to i8
  %v2_bb34 = load i32, i32* @r6, align 4
  %v3_bb34 = add i32 %v2_bb34, 13
  %v4_bb34 = inttoptr i32 %v3_bb34 to i8*
  store i8 %v1_bb34, i8* %v4_bb34, align 1
  %v0_bb38 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb38 = trunc i32 %v0_bb38 to i8
  %v2_bb38 = load i32, i32* @r6, align 4
  %v3_bb38 = add i32 %v2_bb38, 2
  %v4_bb38 = inttoptr i32 %v3_bb38 to i8*
  store i8 %v1_bb38, i8* %v4_bb38, align 1
  %v0_bb3c = call i32 @function_eccc()
  %v1_bb3c = trunc i32 %v0_bb3c to i8
  store i32 %v0_bb3c, i32* %r0.global-to-local, align 4
  store i32 %v1_b620, i32* %lr.global-to-local, align 4
  %v0_bb44 = load i32, i32* @r6, align 4
  %v1_bb44 = add i32 %v0_bb44, 13
  %v2_bb44 = inttoptr i32 %v1_bb44 to i8*
  %v3_bb44 = load i8, i8* %v2_bb44, align 1
  %v4_bb44 = zext i8 %v3_bb44 to i32
  store i32 %v1_bb48, i32* %r2.global-to-local, align 4
  %v1_bb4c = and i32 %v4_bb44, 223
  %v5_bb50 = or i32 %v1_bb4c, %v4_bb50
  store i32 %v5_bb50, i32* %r3.global-to-local, align 4
  %v1_bb54 = trunc i32 %v5_bb50 to i8
  store i8 %v1_bb54, i8* %v2_bb44, align 1
  store i32 %v1_b640, i32* %r1.global-to-local, align 4
  %v0_bb5c = load i32, i32* @r6, align 4
  %v1_bb5c = add i32 %v0_bb5c, 13
  %v2_bb5c = inttoptr i32 %v1_bb5c to i8*
  %v3_bb5c = load i8, i8* %v2_bb5c, align 1
  %v4_bb5c = zext i8 %v3_bb5c to i32
  store i32 %v1_bb60, i32* %r3.global-to-local, align 4
  %v1_bb64 = and i32 %v4_bb5c, 239
  %v5_bb68 = or i32 %v1_bb64, %v4_bb68
  store i32 %v5_bb68, i32* %r2.global-to-local, align 4
  %v1_bb6c = trunc i32 %v5_bb68 to i8
  store i8 %v1_bb6c, i8* %v2_bb5c, align 1
  store i32 %v1_b660, i32* %ip.global-to-local, align 4
  %v0_bb74 = load i32, i32* @r6, align 4
  %v1_bb74 = add i32 %v0_bb74, 13
  %v2_bb74 = inttoptr i32 %v1_bb74 to i8*
  %v3_bb74 = load i8, i8* %v2_bb74, align 1
  %v4_bb74 = zext i8 %v3_bb74 to i32
  store i32 %v1_bb78, i32* %r2.global-to-local, align 4
  %v1_bb7c = and i32 %v4_bb74, 247
  %v5_bb80 = or i32 %v1_bb7c, %v4_bb80
  store i32 %v5_bb80, i32* %r3.global-to-local, align 4
  %v1_bb84 = trunc i32 %v5_bb80 to i8
  store i8 %v1_bb84, i8* %v2_bb74, align 1
  %v0_bb8c = load i32, i32* @r6, align 4
  %v1_bb8c = add i32 %v0_bb8c, 13
  %v2_bb8c = inttoptr i32 %v1_bb8c to i8*
  %v3_bb8c = load i8, i8* %v2_bb8c, align 1
  %v4_bb8c = zext i8 %v3_bb8c to i32
  store i32 %v1_bb90, i32* %r3.global-to-local, align 4
  %v1_bb94 = and i32 %v4_bb8c, 251
  %v5_bb98 = or i32 %v1_bb94, %v4_bb98
  store i32 %v5_bb98, i32* %r2.global-to-local, align 4
  %v1_bb9c = trunc i32 %v5_bb98 to i8
  store i8 %v1_bb9c, i8* %v2_bb8c, align 1
  store i32 %v1_b6a0, i32* %r1.global-to-local, align 4
  %v0_bba4 = load i32, i32* @r6, align 4
  %v1_bba4 = add i32 %v0_bba4, 13
  %v2_bba4 = inttoptr i32 %v1_bba4 to i8*
  %v3_bba4 = load i8, i8* %v2_bba4, align 1
  %v4_bba4 = zext i8 %v3_bba4 to i32
  store i32 %v1_bba8, i32* %r2.global-to-local, align 4
  %v1_bbac = and i32 %v4_bba4, 253
  %v4_bbb0 = or i32 %v1_bbac, %v3_bbb0
  store i32 %v4_bbb0, i32* %r3.global-to-local, align 4
  %v1_bbb4 = trunc i32 %v4_bbb0 to i8
  store i8 %v1_bbb4, i8* %v2_bba4, align 1
  %v0_bbb8 = load i32, i32* @r6, align 4
  %v1_bbb8 = add i32 %v0_bbb8, 13
  %v2_bbb8 = inttoptr i32 %v1_bbb8 to i8*
  %v3_bbb8 = load i8, i8* %v2_bbb8, align 1
  %v4_bbb8 = zext i8 %v3_bbb8 to i32
  %v0_bbbc = load i32, i32* @r8, align 4
  %v1_bbbc = urem i32 %v0_bbbc, 2
  %v1_bbc0 = and i32 %v4_bbb8, 254
  store i32 %v1_bbc0, i32* %r2.global-to-local, align 4
  %v4_bbc427 = udiv i32 %v0_bb3c, 256
  %v2_bbc8 = or i32 %v1_bbc0, %v1_bbbc
  store i32 %v2_bbc8, i32* %r3.global-to-local, align 4
  %v1_bbcc = trunc i32 %v4_bbc427 to i8
  %v3_bbcc = add i32 %v0_bbb8, 15
  %v4_bbcc = inttoptr i32 %v3_bbcc to i8*
  store i8 %v1_bbcc, i8* %v4_bbcc, align 1
  %v3_bbd0 = load i32, i32* @r6, align 4
  %v4_bbd0 = add i32 %v3_bbd0, 14
  %v5_bbd0 = inttoptr i32 %v4_bbd0 to i8*
  store i8 %v1_bb3c, i8* %v5_bbd0, align 1
  %v0_bbd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bbd4 = trunc i32 %v0_bbd4 to i8
  %v2_bbd4 = load i32, i32* @r6, align 4
  %v3_bbd4 = add i32 %v2_bbd4, 13
  %v4_bbd4 = inttoptr i32 %v3_bbd4 to i8*
  store i8 %v1_bbd4, i8* %v4_bbd4, align 1
  %v0_bbd8 = load i32, i32* @r4, align 4
  %v1_bbd8 = add i32 %v0_bbd8, 40
  store i32 %v1_bbd8, i32* %r0.global-to-local, align 4
  %v0_bbdc = load i32, i32* @sb, align 4
  store i32 %v0_bbdc, i32* @r1, align 4
  %v1_bbe0 = inttoptr i32 %v1_bbd8 to i8*
  %v2_bbe0 = call i32 @function_eea8(i8* %v1_bbe0)
  store i32 %v2_bbe0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_b784, %bb81
  %v3_bbe4 = load i32, i32* %stack_var_-40, align 4
  %v1_bbe8 = add i32 %v3_bbe4, 1
  store i32 %v1_bbe8, i32* %r3.global-to-local, align 4
  %v1_bbec = load i32, i32* @fp, align 4
  %v9_bbec = icmp eq i32 %v1_bbe8, %v1_bbec
  store i1 %v9_bbec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bbe8, i32* %stack_var_-40, align 4
  %v5_bbf4 = icmp slt i32 %v1_bbe8, %v1_bbec
  br i1 %v5_bbf4, label %dec_label_pc_b774, label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bbe4, %.thread18
  %v0_bc0012 = phi i32 [ %v0_b748, %.thread18 ], [ %v1_bbec, %dec_label_pc_bbe4 ]
  %v0_bbf8 = load i32, i32* @sb, align 4
  %v1_bbf8 = add i32 %v0_bbf8, 40
  store i32 %v1_bbf8, i32* @sl, align 4
  %v1_bbfc = add i32 %v0_bbf8, 20
  store i32 %v1_bbfc, i32* @r7, align 4
  %v2_bc4c = icmp eq i32 %v1_b6f8, 0
  %v6_bc2c = inttoptr i32 %v2_b568 to i32*
  %v3_bc34 = icmp eq i32 %v3_b750, 65535
  br label %dec_label_pc_bc00

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bc5c, %dec_label_pc_bbf8
  %v0_bc00 = phi i32 [ %v1_bd3c, %dec_label_pc_bc5c ], [ %v0_bc0012, %dec_label_pc_bbf8 ]
  %v2_bc00 = icmp eq i32 %v0_bc00, 0
  store i1 %v2_bc00, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_bc00, 1
  br label %dec_label_pc_bc08

dec_label_pc_bc08:                                ; preds = %dec_label_pc_bc08, %dec_label_pc_bc00
  br i1 %tmp82, label %dec_label_pc_bc08, label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bc08
  %v0_bc0c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_bc0c, 256
  %v1_bc14 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp84 = udiv i32 %v0_bc0c, 256
  %v4_bc18 = urem i32 %tmp84, 256
  %v5_bc18 = or i32 %v4_bc18, %v1_bc14
  store i32 %v5_bc18, i32* @r8, align 4
  store i32 %v2_b568, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b750, i32* %ip.global-to-local, align 4
  %v7_bc2c = load i32, i32* %v6_bc2c, align 4
  store i32 %v7_bc2c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bc34, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_bc40 = add i32 %v7_bc2c, 20
  store i32 %v1_bc40, i32* @r5, align 4
  br i1 %v3_bc34, label %dec_label_pc_bd68, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_bc0c
  %v0_bc50 = phi i32 [ %v7_bd54, %dec_label_pc_bd48 ], [ %v7_bc2c, %dec_label_pc_bc0c ]
  store i32 %v1_b6f8, i32* %lr.global-to-local, align 4
  store i1 %v2_bc4c, i1* %cpsr_z.global-to-local, align 1
  %v1_bc50 = add i32 %v0_bc50, 40
  store i32 %v1_bc50, i32* %r0.global-to-local, align 4
  %v0_bc54 = load i32, i32* @sb, align 4
  store i32 %v0_bc54, i32* @r1, align 4
  br i1 %v2_bc4c, label %dec_label_pc_bc5c, label %dec_label_pc_bd8c

dec_label_pc_bc5c:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bd68, %dec_label_pc_bd8c
  %v2_bc5c = phi i32 [ %v0_bc50, %dec_label_pc_bc48 ], [ %v0_bd80, %dec_label_pc_bd68 ], [ %v2_bc5c.pre, %dec_label_pc_bd8c ]
  %v0_bc5c = load i32, i32* @r6, align 4
  %v1_bc5c = trunc i32 %v0_bc5c to i8
  %v3_bc5c = add i32 %v2_bc5c, 10
  %v4_bc5c = inttoptr i32 %v3_bc5c to i8*
  store i8 %v1_bc5c, i8* %v4_bc5c, align 1
  %v0_bc60 = load i32, i32* @r6, align 4
  %v1_bc60 = trunc i32 %v0_bc60 to i8
  %v2_bc60 = load i32, i32* @r4, align 4
  %v3_bc60 = add i32 %v2_bc60, 11
  %v4_bc60 = inttoptr i32 %v3_bc60 to i8*
  store i8 %v1_bc60, i8* %v4_bc60, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc68 = load i32, i32* @r4, align 4
  store i32 %v0_bc68, i32* @r0, align 4
  %v2_bc6c = call i32 @function_d3f8(i32 %v0_bc68, i32 20)
  %v3_bc6c = trunc i32 %v2_bc6c to i8
  store i32 %v2_bc6c, i32* %r0.global-to-local, align 4
  %v3_bc70 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b558, i32* %r2.global-to-local, align 4
  %v3_bc78 = mul i32 %v3_bc70, 16
  %v2_bc7c = add i32 %v3_bc78, %v2_b558
  store i32 %v2_bc7c, i32* %r1.global-to-local, align 4
  %v1_bc80 = add i32 %v2_bc7c, 4
  %v2_bc80 = inttoptr i32 %v1_bc80 to i32*
  %v3_bc80 = load i32, i32* %v2_bc80, align 4
  %v3_bc84 = mul i32 %v3_bc80, 65536
  store i32 %v3_bc84, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_bc80, 256
  %v1_bc8c = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_bc80, 256
  %v4_bc90 = urem i32 %tmp86, 256
  %v5_bc90 = or i32 %v4_bc90, %v1_bc8c
  store i32 %v5_bc90, i32* %r2.global-to-local, align 4
  %v1_bc94 = add i32 %v3_bc80, 1
  store i32 %v1_bc94, i32* %r3.global-to-local, align 4
  store i32 %v1_bc94, i32* %v2_bc80, align 4
  %v0_bc9c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc9c = load i32, i32* @r5, align 4
  %v2_bc9c = add i32 %v1_bc9c, 4
  %v3_bc9c = inttoptr i32 %v2_bc9c to i32*
  store i32 %v0_bc9c, i32* %v3_bc9c, align 4
  %v0_bca0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bca0 = add i32 %v0_bca0, 8
  %v2_bca0 = inttoptr i32 %v1_bca0 to i32*
  %v3_bca0 = load i32, i32* %v2_bca0, align 4
  %tmp87 = mul i32 %v3_bca0, 256
  %v1_bcac = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_bca0, 256
  %v4_bcb0 = urem i32 %tmp88, 256
  %v5_bcb0 = or i32 %v4_bcb0, %v1_bcac
  store i32 %v5_bcb0, i32* %r2.global-to-local, align 4
  %v4_bcb428 = udiv i32 %v2_bc6c, 256
  %v1_bcb8 = trunc i32 %v4_bcb428 to i8
  %v2_bcb8 = load i32, i32* @r4, align 4
  %v3_bcb8 = add i32 %v2_bcb8, 11
  %v4_bcb8 = inttoptr i32 %v3_bcb8 to i8*
  store i8 %v1_bcb8, i8* %v4_bcb8, align 1
  %v3_bcbc = load i32, i32* @r4, align 4
  %v4_bcbc = add i32 %v3_bcbc, 10
  %v5_bcbc = inttoptr i32 %v4_bcbc to i8*
  store i8 %v3_bc6c, i8* %v5_bcbc, align 1
  %v0_bcc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcc0 = load i32, i32* @r5, align 4
  %v2_bcc0 = add i32 %v1_bcc0, 8
  %v3_bcc0 = inttoptr i32 %v2_bcc0 to i32*
  store i32 %v0_bcc0, i32* %v3_bcc0, align 4
  %v0_bcc4 = load i32, i32* @r5, align 4
  store i32 %v0_bcc4, i32* @r1, align 4
  %v0_bcc8 = load i32, i32* @r8, align 4
  store i32 %v0_bcc8, i32* %r2.global-to-local, align 4
  %v0_bccc = load i32, i32* @r7, align 4
  store i32 %v0_bccc, i32* %r3.global-to-local, align 4
  %v0_bcd0 = load i32, i32* @r4, align 4
  store i32 %v0_bcd0, i32* %r0.global-to-local, align 4
  %v0_bcd4 = load i32, i32* @r6, align 4
  %v1_bcd4 = trunc i32 %v0_bcd4 to i8
  %v3_bcd4 = add i32 %v0_bcc4, 16
  %v4_bcd4 = inttoptr i32 %v3_bcd4 to i8*
  store i8 %v1_bcd4, i8* %v4_bcd4, align 1
  %v0_bcd8 = load i32, i32* @r6, align 4
  %v1_bcd8 = trunc i32 %v0_bcd8 to i8
  %v2_bcd8 = load i32, i32* @r5, align 4
  %v3_bcd8 = add i32 %v2_bcd8, 17
  %v4_bcd8 = inttoptr i32 %v3_bcd8 to i8*
  store i8 %v1_bcd8, i8* %v4_bcd8, align 1
  %v4_bcdc = call i32 @function_d454(i32 %v0_bcd0, i32 %v0_bcc4, i32 %v0_bcc8, i32 %v0_bccc)
  %v5_bcdc = trunc i32 %v4_bcdc to i8
  store i32 %v4_bcdc, i32* %r0.global-to-local, align 4
  %v4_bce029 = udiv i32 %v4_bcdc, 256
  %v1_bce4 = trunc i32 %v4_bce029 to i8
  %v2_bce4 = load i32, i32* @r5, align 4
  %v3_bce4 = add i32 %v2_bce4, 17
  %v4_bce4 = inttoptr i32 %v3_bce4 to i8*
  store i8 %v1_bce4, i8* %v4_bce4, align 1
  %v3_bce8 = load i32, i32* @r5, align 4
  %v4_bce8 = add i32 %v3_bce8, 16
  %v5_bce8 = inttoptr i32 %v4_bce8 to i8*
  store i8 %v5_bcdc, i8* %v5_bce8, align 1
  %v3_bcec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bcec, i32* %r3.global-to-local, align 4
  %v0_bcf0 = load i32, i32* @r4, align 4
  %v1_bcf0 = add i32 %v0_bcf0, 20
  %v2_bcf0 = inttoptr i32 %v1_bcf0 to i32*
  %v3_bcf0 = load i32, i32* %v2_bcf0, align 4
  %v5_bcf8 = mul i32 %v3_bcec, 24
  %v3_bd00 = udiv i32 %v3_bcf0, 65536
  store i32 %v3_bd00, i32* %r2.global-to-local, align 4
  %v2_bd04 = add i32 %v5_bcf8, %arg2
  store i32 %v2_bd04, i32* %ip.global-to-local, align 4
  %v3_bd084 = udiv i32 %v3_bcf0, 16777216
  %v1_bd0c = trunc i32 %v3_bd084 to i8
  %v3_bd0c = add i32 %v2_bd04, 3
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v1_bd0c, i8* %v4_bd0c, align 1
  %v0_bd10 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd10 = trunc i32 %v0_bd10 to i8
  %v2_bd10 = load i32, i32* %ip.global-to-local, align 4
  %v3_bd10 = add i32 %v2_bd10, 2
  %v4_bd10 = inttoptr i32 %v3_bd10 to i8*
  store i8 %v1_bd10, i8* %v4_bd10, align 1
  %v0_bd14 = load i32, i32* @r4, align 4
  store i32 %v0_bd14, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b708, i32* %r0.global-to-local, align 4
  %v0_bd20 = load i32, i32* @sl, align 4
  store i32 %v0_bd20, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bd28 = load i32, i32* %ip.global-to-local, align 4
  %v6_bd30 = inttoptr i32 %v0_bd14 to i32*
  %v7_bd30 = call i32 @function_1115c(i32 %v3_b708, i32* %v6_bd30, i32 %v0_bd20, i32 16384, i32 %v0_bd28, i32 16)
  %v3_bd34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v1_bd38 = add i32 %v3_bd34, 1
  store i32 %v1_bd38, i32* %r0.global-to-local, align 4
  %v1_bd3c = load i32, i32* @fp, align 4
  %v9_bd3c = icmp eq i32 %v1_bd38, %v1_bd3c
  store i1 %v9_bd3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bd38, i32* %stack_var_-40, align 4
  %v6_bd44 = icmp slt i32 %v1_bd38, %v1_bd3c
  br i1 %v6_bd44, label %dec_label_pc_bd48, label %dec_label_pc_bc00

dec_label_pc_bd48:                                ; preds = %dec_label_pc_bc5c
  store i32 %v2_b568, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b750, i32* %ip.global-to-local, align 4
  %v4_bd54 = mul i32 %v1_bd38, 4
  %v5_bd54 = add i32 %v4_bd54, %v2_b568
  %v6_bd54 = inttoptr i32 %v5_bd54 to i32*
  %v7_bd54 = load i32, i32* %v6_bd54, align 4
  store i32 %v7_bd54, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bc34, i1* %cpsr_z.global-to-local, align 1
  %v1_bd60 = add i32 %v7_bd54, 20
  store i32 %v1_bd60, i32* @r5, align 4
  br i1 %v3_bc34, label %dec_label_pc_bd68, label %dec_label_pc_bc48

dec_label_pc_bd68:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_bc0c
  %v0_bd68 = call i32 @function_eccc()
  %v1_bd68 = trunc i32 %v0_bd68 to i8
  store i32 %v1_b6f8, i32* %lr.global-to-local, align 4
  %v4_bd70 = sdiv i32 %v0_bd68, 256
  store i32 %v4_bd70, i32* %r3.global-to-local, align 4
  store i1 %v2_bc4c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd78 = load i32, i32* @r4, align 4
  %v4_bd78 = add i32 %v3_bd78, 4
  %v5_bd78 = inttoptr i32 %v4_bd78 to i8*
  store i8 %v1_bd68, i8* %v5_bd78, align 1
  %v0_bd7c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd7c = trunc i32 %v0_bd7c to i8
  %v2_bd7c = load i32, i32* @r4, align 4
  %v3_bd7c = add i32 %v2_bd7c, 5
  %v4_bd7c = inttoptr i32 %v3_bd7c to i8*
  store i8 %v1_bd7c, i8* %v4_bd7c, align 1
  %v0_bd80 = load i32, i32* @r4, align 4
  %v1_bd80 = add i32 %v0_bd80, 40
  store i32 %v1_bd80, i32* %r0.global-to-local, align 4
  %v0_bd84 = load i32, i32* @sb, align 4
  store i32 %v0_bd84, i32* @r1, align 4
  %v0_bd88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd88, label %dec_label_pc_bc5c, label %dec_label_pc_bd8c

dec_label_pc_bd8c:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bd68
  %v0_bd8c = phi i32 [ %v1_bc50, %dec_label_pc_bc48 ], [ %v1_bd80, %dec_label_pc_bd68 ]
  %v1_bd8c = inttoptr i32 %v0_bd8c to i8*
  %v2_bd8c = call i32 @function_eea8(i8* %v1_bd8c)
  store i32 %v2_bd8c, i32* %r0.global-to-local, align 4
  %v2_bc5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bc5c

; uselistorder directives
  uselistorder i32 %v0_bd80, { 1, 0 }
  uselistorder i32 %v7_bd54, { 1, 2, 0 }
  uselistorder i32 %v1_bd3c, { 1, 2, 0 }
  uselistorder i32 %v1_bd38, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_bcdc, { 0, 2, 1 }
  uselistorder i32 %v0_bcc4, { 1, 0, 2 }
  uselistorder i32 %v3_bca0, { 1, 0 }
  uselistorder i32 %v3_bc80, { 3, 2, 0, 1 }
  uselistorder i32 %v2_bc6c, { 0, 2, 1 }
  uselistorder i32 %v0_bc50, { 1, 0 }
  uselistorder i32 %v0_bc0c, { 1, 0 }
  uselistorder i32 %v0_bc00, { 1, 0 }
  uselistorder i1 %v3_bc34, { 2, 3, 1, 0 }
  uselistorder i32 %v1_bbe8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bb3c, { 0, 2, 1 }
  uselistorder i32 %v3_bb1c, { 1, 0 }
  uselistorder i32 %v0_baf0, { 1, 0, 2 }
  uselistorder i32 %v3_bae4, { 1, 0 }
  uselistorder i32 %v3_ba78, { 1, 0 }
  uselistorder i32 %v0_ba6c, { 1, 0 }
  uselistorder i32 %v3_b9f4, { 1, 0 }
  uselistorder i32 %v3_b9c4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b998, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b990, { 1, 0 }
  uselistorder i32 %v4_b978, { 1, 0 }
  uselistorder i32 %v0_b974, { 0, 2, 1 }
  uselistorder i1 %v7_b8e4, { 1, 0 }
  uselistorder i32 %v7_b8dc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b928, { 1, 0 }
  uselistorder i1 %v9_b90c, { 1, 0 }
  uselistorder i32 %v4_b920, { 1, 0 }
  uselistorder i32 %v4_b91c, { 1, 0 }
  uselistorder i32 %v8_b830, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b81c, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b794, { 1, 0 }
  uselistorder i32 %v3_b790, { 2, 1, 0, 3 }
  uselistorder i32 %v1_bba8, { 1, 0 }
  uselistorder i32 %v1_bb90, { 1, 0 }
  uselistorder i32 %v1_bb78, { 1, 0 }
  uselistorder i32 %v1_bb60, { 1, 0 }
  uselistorder i32 %v1_bb48, { 1, 0 }
  uselistorder i32 %v5_b924, { 1, 0 }
  uselistorder i32 %v3_b87893, { 1, 0 }
  uselistorder i1 %v2_b93c, { 1, 0 }
  uselistorder i32 %v1_b938, { 1, 0 }
  uselistorder i32 %v4_b934, { 2, 0, 1 }
  uselistorder i32 %v4_b918, { 1, 0 }
  uselistorder i1 %v3_b860, { 1, 0 }
  uselistorder i32 %v8_b75c, { 2, 1, 0 }
  uselistorder i32 %v8_b758, { 1, 2, 0 }
  uselistorder i32 %v3_b750, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b74c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b740, { 1, 0 }
  uselistorder i1 %v7_b710, { 1, 0 }
  uselistorder i32 %v3_b70c, { 2, 0, 1 }
  uselistorder i32 %v3_b708, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b6f8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b6a0, { 1, 0 }
  uselistorder i32 %v1_b660, { 1, 0 }
  uselistorder i32 %v1_b640, { 1, 0 }
  uselistorder i32 %v1_b620, { 1, 0 }
  uselistorder i32 %v1_b5e8, { 1, 0 }
  uselistorder i32 %v2_b568, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b558, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b53c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 60, 61, 62, 63, 64, 65, 66, 67, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 65, 66, 67, 68, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 43, 42, 44, 46, 45, 0 }
  uselistorder i32* %r0.global-to-local, { 62, 57, 58, 59, 61, 60, 4, 1, 2, 5, 3, 13, 6, 7, 8, 9, 10, 11, 12, 17, 14, 15, 16, 18, 20, 19, 22, 21, 25, 23, 26, 27, 24, 28, 30, 29, 31, 32, 34, 33, 38, 35, 36, 37, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %lr.global-to-local, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %ip.global-to-local, { 34, 35, 36, 37, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i1* %cpsr_z.global-to-local, { 23, 24, 25, 26, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 14, 0, 15, 16, 13, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_bd8c, { 1, 0 }
  uselistorder label %dec_label_pc_bc5c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bbe4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_b96c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b8a4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b854, { 1, 0 }
}

define i32 @function_bd98(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bd98:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_bd9c = urem i32 %arg1, 256
  store i32 %v1_bd9c, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bdb4 = urem i32 %arg3, 256
  store i32 %v1_bdb4, i32* @r4, align 4
  %v2_bdb8 = call i32 @function_114c4(i32 %v1_bd9c, i32 4)
  %v0_bdbc = load i32, i32* @r5, align 4
  store i32 %v0_bdbc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bdcc = load i32, i32* @r4, align 4
  %v5_bdd0 = inttoptr i32 %v0_bdbc to i32*
  %v6_bdd0 = call i32 @function_a398(i32 %v0_bdcc, i32* %v5_bdd0, i32 2, i32 0)
  %v1_bddc = urem i32 %v6_bdd0, 256
  store i32 %v1_bddc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bde8 = load i32, i32* @r5, align 4
  store i32 %v0_bde8, i32* %r1.global-to-local, align 4
  %v0_bdec = load i32, i32* @r4, align 4
  %v5_bdf0 = trunc i32 %v6_bdd0 to i8
  %v6_bdf4 = inttoptr i32 %v0_bde8 to i32*
  %v7_bdf4 = call i32 @function_a398(i32 %v0_bdec, i32* %v6_bdf4, i32 3, i32 65535)
  %v0_bdf8 = load i32, i32* @r5, align 4
  store i32 %v0_bdf8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdf4, i32* @r8, align 4
  %v0_be08 = load i32, i32* @r4, align 4
  %v4_be0c = inttoptr i32 %v0_bdf8 to i32*
  %v5_be0c = call i32 @function_a398(i32 %v0_be08, i32* %v4_be0c, i32 4, i32 64)
  %v1_be14 = urem i32 %v5_be0c, 256
  store i32 %v1_be14, i32* %ip.global-to-local, align 4
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v0_be18, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be24 = load i32, i32* @r4, align 4
  %v6_be2c = inttoptr i32 %v0_be18 to i32*
  %v7_be2c = call i32 @function_a398(i32 %v0_be24, i32* %v6_be2c, i32 5, i32 0)
  %v1_be38 = urem i32 %v7_be2c, 256
  store i32 %v1_be38, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be44 = load i32, i32* @r5, align 4
  store i32 %v0_be44, i32* %r1.global-to-local, align 4
  %v0_be48 = load i32, i32* @r4, align 4
  %v5_be50 = inttoptr i32 %v0_be44 to i32*
  %v6_be50 = call i32 @function_a398(i32 %v0_be48, i32* %v5_be50, i32 6, i32 65535)
  %v0_be58 = load i32, i32* @r5, align 4
  store i32 %v0_be58, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_be50, i32* @r7, align 4
  %v0_be68 = load i32, i32* @r4, align 4
  %v4_be6c = inttoptr i32 %v0_be58 to i32*
  %v5_be6c = call i32 @function_a398(i32 %v0_be68, i32* %v4_be6c, i32 7, i32 65535)
  %v0_be74 = load i32, i32* @r5, align 4
  store i32 %v0_be74, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_be6c, i32* @r6, align 4
  %v0_be84 = load i32, i32* @r4, align 4
  %v4_be88 = inttoptr i32 %v0_be74 to i32*
  %v5_be88 = call i32 @function_a398(i32 %v0_be84, i32* %v4_be88, i32 17, i32 65535)
  %v0_be94 = load i32, i32* @r5, align 4
  store i32 %v0_be94, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  %v5_bea4 = inttoptr i32 %v0_be94 to i32*
  %v6_bea4 = call i32 @function_a398(i32 %v0_bea0, i32* %v5_bea4, i32 18, i32 65535)
  %v0_bea8 = load i32, i32* @r5, align 4
  store i32 %v0_bea8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_beb8 = load i32, i32* @r4, align 4
  %v5_bebc = inttoptr i32 %v0_bea8 to i32*
  %v6_bebc = call i32 @function_a398(i32 %v0_beb8, i32* %v5_bebc, i32 11, i32 0)
  %v0_bec0 = load i32, i32* @r5, align 4
  store i32 %v0_bec0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bed0 = load i32, i32* @r4, align 4
  %v5_bed4 = inttoptr i32 %v0_bec0 to i32*
  %v6_bed4 = call i32 @function_a398(i32 %v0_bed0, i32* %v5_bed4, i32 12, i32 1)
  %v0_bed8 = load i32, i32* @r5, align 4
  store i32 %v0_bed8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bee8 = load i32, i32* @r4, align 4
  %v5_beec = inttoptr i32 %v0_bed8 to i32*
  %v6_beec = call i32 @function_a398(i32 %v0_bee8, i32* %v5_beec, i32 13, i32 0)
  %v0_bef0 = load i32, i32* @r5, align 4
  store i32 %v0_bef0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bf00 = load i32, i32* @r4, align 4
  %v5_bf04 = inttoptr i32 %v0_bef0 to i32*
  %v6_bf04 = call i32 @function_a398(i32 %v0_bf00, i32* %v5_bf04, i32 14, i32 0)
  %v0_bf08 = load i32, i32* @r5, align 4
  store i32 %v0_bf08, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bf18 = load i32, i32* @r4, align 4
  %v5_bf1c = inttoptr i32 %v0_bf08 to i32*
  %v6_bf1c = call i32 @function_a398(i32 %v0_bf18, i32* %v5_bf1c, i32 15, i32 0)
  %v0_bf20 = load i32, i32* @r5, align 4
  store i32 %v0_bf20, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bf30 = load i32, i32* @r4, align 4
  %v5_bf34 = inttoptr i32 %v0_bf20 to i32*
  %v6_bf34 = call i32 @function_a398(i32 %v0_bf30, i32* %v5_bf34, i32 16, i32 0)
  %v0_bf38 = load i32, i32* @r5, align 4
  store i32 %v0_bf38, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r4, align 4
  %v5_bf4c = inttoptr i32 %v0_bf38 to i32*
  %v6_bf4c = call i32 @function_a398(i32 %v0_bf48, i32* %v5_bf4c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf5c = load i32, i32* @r5, align 4
  store i32 %v0_bf5c, i32* %r1.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r4, align 4
  %v4_bf64 = inttoptr i32 %v0_bf5c to i32*
  %v5_bf64 = call i32 @function_a398(i32 %v0_bf60, i32* %v4_bf64, i32 1, i32 1)
  %v2_bf70 = load i32, i32* @global_var_1bcbc.78, align 4
  store i32 %v2_bf70, i32* %r3.global-to-local, align 4
  %v1_bf74 = urem i32 %v5_bf64, 256
  store i32 %v1_bf74, i32* %ip.global-to-local, align 4
  %v0_bf78 = load i32, i32* @r5, align 4
  store i32 %v0_bf78, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  %v5_bf88 = inttoptr i32 %v0_bf78 to i32*
  %v6_bf88 = call i32 @function_a32c(i32 %v0_bf80, i32* %v5_bf88, i32 25, i32 %v2_bf70, i32 %v1_bf74)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bf9c = call i32 @function_111c0(i32 2, i32 3, i32 6)
  %v7_bfa0 = icmp eq i32 %v3_bf9c, -1
  store i1 %v7_bfa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfa0, label %dec_label_pc_c3d8, label %dec_label_pc_bfac

dec_label_pc_bfac:                                ; preds = %dec_label_pc_bd98
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bfb4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bfb4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bfc8 = call i32 @function_11190(i32 %v3_bf9c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_bfcc = icmp eq i32 %v6_bfc8, -1
  store i1 %v7_bfcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfcc, label %dec_label_pc_c3d0, label %dec_label_pc_bfd4

dec_label_pc_bfd4:                                ; preds = %dec_label_pc_bfac
  %v0_bfd4 = load i32, i32* @r8, align 4
  %v0_bfd8 = load i32, i32* @r7, align 4
  %v0_bfdc = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bfe4 = urem i32 %v0_bfd4, 65536
  store i32 %v3_bfe4, i32* %r2.global-to-local, align 4
  %v3_bfe8 = urem i32 %v0_bfd8, 65536
  store i32 %v3_bfe8, i32* %r3.global-to-local, align 4
  %v3_bfec = urem i32 %v0_bfdc, 65536
  store i32 %v3_bfec, i32* %ip.global-to-local, align 4
  %v0_bff0 = load i32, i32* @fp, align 4
  %v2_bff0 = icmp eq i32 %v0_bff0, 0
  store i1 %v2_bff0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_bff0, 1
  br i1 %tmp75, label %dec_label_pc_c4f0, label %dec_label_pc_c008

dec_label_pc_c008:                                ; preds = %dec_label_pc_bfd4
  %v1_c010 = add i32 %v6_bf4c, 40
  %tmp76 = mul i32 %v1_c010, 256
  %v1_c024 = urem i32 %v0_bfd8, 256
  %v1_c028 = and i32 %tmp76, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v3_c02c = mul nuw nsw i32 %v1_c024, 256
  %v1_c034 = urem i32 %v0_bfdc, 256
  %tmp77 = udiv i32 %v0_bfdc, 256
  %v3_c038 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c010, 256
  %v4_c03c = urem i32 %tmp78, 256
  %v5_c03c = or i32 %v4_c03c, %v1_c028
  store i32 %v5_c03c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_bfd8, 256
  %v4_c040 = urem i32 %tmp79, 256
  %v5_c040 = or i32 %v4_c040, %v3_c02c
  store i32 %v5_c040, i32* @sl, align 4
  %v4_c044 = mul nuw nsw i32 %v1_c034, 256
  %v5_c044 = or i32 %v4_c044, %v3_c038
  store i32 %v5_c044, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_bfd4, 256
  %v3_c054 = urem i32 %tmp80, 256
  %v1_c058 = urem i32 %v0_bfd4, 256
  %tmp81 = mul i32 %v5_be88, 256
  %v1_c060 = and i32 %tmp81, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v1_c064 = urem i32 %v6_bebc, 2
  %v1_c068 = urem i32 %v6_bed4, 2
  %v1_c06c = urem i32 %v6_beec, 2
  %tmp82 = udiv i32 %v5_be88, 256
  %v4_c070 = urem i32 %tmp82, 256
  %v5_c070 = or i32 %v4_c070, %v1_c060
  store i32 %v5_c070, i32* @r8, align 4
  %v1_c090 = urem i32 %v6_bf04, 2
  %v1_c094 = urem i32 %v6_bf1c, 2
  %v1_c098 = urem i32 %v6_bf34, 2
  %v1_c09c = urem i32 %v6_beec, 256
  %v4_c0a0 = mul nuw nsw i32 %v1_c058, 256
  %v5_c0a0 = or i32 %v4_c0a0, %v3_c054
  store i32 %v5_c0a0, i32* @r5, align 4
  %v3_c0b425 = udiv i32 %v1_c028, 256
  store i32 %v3_c0b425, i32* %r3.global-to-local, align 4
  store i32 %v1_c058, i32* %ip.global-to-local, align 4
  store i32 %v1_c024, i32* %r1.global-to-local, align 4
  store i32 %v1_c034, i32* %r2.global-to-local, align 4
  %v5_c0d0 = trunc i32 %v0_bfd8 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_be0c, 16777216
  %v4_c12c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_bfd4, 16777216
  %v4_c138 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c14c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c028, 65536
  %v4_c150 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c064
  %v4_c1a0 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c068
  %v4_c1b4 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c06c
  %v4_c1c8 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c090
  %v4_c1dc = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c094
  %v3_c1f0 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_bfdc, 16777216
  %v7_c220 = sdiv i32 %sext12, 16777216
  %v1_c134 = trunc i32 %v4_c12c to i8
  %extract.t = trunc i32 %v4_c138 to i8
  %v3_c220 = sext i8 %v5_c0d0 to i32
  %v2_c244 = icmp eq i32 %v1_c09c, 0
  br label %dec_label_pc_c0dc

dec_label_pc_c0dc:                                ; preds = %bb89, %dec_label_pc_c008
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c0e8 = call i32 @function_114c4(i32 1510, i32 1)
  store i32 %v2_bdb8, i32* %ip.global-to-local, align 4
  %v2_c0f4 = load i32, i32* @r4, align 4
  %v5_c0f4 = mul i32 %v2_c0f4, 4
  %v6_c0f4 = add i32 %v5_c0f4, %v2_bdb8
  %v7_c0f4 = inttoptr i32 %v6_c0f4 to i32*
  store i32 %v2_c0e8, i32* %v7_c0f4, align 4
  %v3_c0f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c0f8, i32* %r3.global-to-local, align 4
  %v0_c0fc = load i32, i32* %ip.global-to-local, align 4
  %v4_c0fc = mul i32 %v3_c0f8, 4
  %v5_c0fc = add i32 %v0_c0fc, %v4_c0fc
  %v6_c0fc = inttoptr i32 %v5_c0fc to i32*
  %v7_c0fc = load i32, i32* %v6_c0fc, align 4
  store i32 %v7_c0fc, i32* @r7, align 4
  %v1_c100 = inttoptr i32 %v7_c0fc to i8*
  %v2_c100 = load i8, i8* %v1_c100, align 1
  %tmp97 = urem i8 %v2_c100, 16
  %v1_c104 = zext i8 %tmp97 to i32
  %v1_c108 = or i32 %v1_c104, 64
  store i32 %v1_c108, i32* %r2.global-to-local, align 4
  %v1_c10c = trunc i32 %v1_c108 to i8
  store i8 %v1_c10c, i8* %v1_c100, align 1
  %v0_c110 = load i32, i32* @r7, align 4
  %v1_c110 = inttoptr i32 %v0_c110 to i8*
  %v2_c110 = load i8, i8* %v1_c110, align 1
  %v1_c114 = and i8 %v2_c110, -16
  %v1_c118 = or i8 %v1_c114, 5
  store i32 %v1_be38, i32* %r1.global-to-local, align 4
  store i8 %v1_c118, i8* %v1_c110, align 1
  %v2_c128 = load i32, i32* @r7, align 4
  %v3_c128 = add i32 %v2_c128, 1
  %v4_c128 = inttoptr i32 %v3_c128 to i8*
  store i8 %v5_bdf0, i8* %v4_c128, align 1
  store i32 %v4_c12c, i32* %r3.global-to-local, align 4
  %v0_c130 = load i32, i32* %r1.global-to-local, align 4
  %v2_c130 = icmp eq i32 %v0_c130, 0
  store i1 %v2_c130, i1* %cpsr_z.global-to-local, align 1
  %v2_c134 = load i32, i32* @r7, align 4
  %v3_c134 = add i32 %v2_c134, 8
  %v4_c134 = inttoptr i32 %v3_c134 to i8*
  store i8 %v1_c134, i8* %v4_c134, align 1
  store i32 %v4_c138, i32* %r2.global-to-local, align 4
  %v0_c13c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c13c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c0dc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c140 = load i32, i32* @r7, align 4
  %v4_c140 = add i32 %v3_c140, 6
  %v5_c140 = inttoptr i32 %v4_c140 to i8*
  store i8 64, i8* %v5_c140, align 1
  %v0_c148.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c148.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c0dc, %bb
  %v0_c148.off0 = phi i8 [ %extract.t, %dec_label_pc_c0dc ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c148 = load i32, i32* @r7, align 4
  %v3_c148 = add i32 %v2_c148, 5
  %v4_c148 = inttoptr i32 %v3_c148 to i8*
  store i8 %v0_c148.off0, i8* %v4_c148, align 1
  store i32 %v4_c14c, i32* %ip.global-to-local, align 4
  store i32 %v4_c150, i32* %r1.global-to-local, align 4
  %v0_c154 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c154, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c158 = load i32, i32* %r3.global-to-local, align 4
  %v1_c158 = trunc i32 %v0_c158 to i8
  %v2_c158 = load i32, i32* @r7, align 4
  %v3_c158 = add i32 %v2_c158, 9
  %v4_c158 = inttoptr i32 %v3_c158 to i8*
  store i8 %v1_c158, i8* %v4_c158, align 1
  %v0_c15c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c15c, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c15c = load i32, i32* %r2.global-to-local, align 4
  %v2_c15c = trunc i32 %v1_c15c to i8
  %v3_c15c = load i32, i32* @r7, align 4
  %v4_c15c = add i32 %v3_c15c, 7
  %v5_c15c = inttoptr i32 %v4_c15c to i8*
  store i8 %v2_c15c, i8* %v5_c15c, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c160 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c160, i32* %r2.global-to-local, align 4
  %v0_c164 = load i32, i32* %ip.global-to-local, align 4
  %v1_c164 = trunc i32 %v0_c164 to i8
  %v2_c164 = load i32, i32* @r7, align 4
  %v3_c164 = add i32 %v2_c164, 2
  %v4_c164 = inttoptr i32 %v3_c164 to i8*
  store i8 %v1_c164, i8* %v4_c164, align 1
  store i32 %v6_bf88, i32* %ip.global-to-local, align 4
  %v0_c16c = load i32, i32* %r2.global-to-local, align 4
  %v3_c16c = mul i32 %v0_c16c, 32
  store i32 %v3_c16c, i32* %r3.global-to-local, align 4
  %v1_c170 = load i32, i32* @r7, align 4
  %v2_c170 = add i32 %v1_c170, 12
  %v3_c170 = inttoptr i32 %v2_c170 to i32*
  store i32 %v6_bf88, i32* %v3_c170, align 4
  %v0_c174 = load i32, i32* %r3.global-to-local, align 4
  %v1_c174 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c174, -8
  %v5_c174 = add i32 %v0_c174, %tmp98
  %v1_c178 = load i32, i32* @sb, align 4
  %v2_c178 = add i32 %v1_c178, %v5_c174
  store i32 %v2_c178, i32* %r3.global-to-local, align 4
  %v1_c17c = add i32 %v2_c178, 16
  %v2_c17c = inttoptr i32 %v1_c17c to i32*
  %v3_c17c = load i32, i32* %v2_c17c, align 4
  store i32 %v3_c17c, i32* %r2.global-to-local, align 4
  %v0_c180 = load i32, i32* %r1.global-to-local, align 4
  %v1_c180 = trunc i32 %v0_c180 to i8
  %v2_c180 = load i32, i32* @r7, align 4
  %v3_c180 = add i32 %v2_c180, 3
  %v4_c180 = inttoptr i32 %v3_c180 to i8*
  store i8 %v1_c180, i8* %v4_c180, align 1
  %v0_c184 = load i32, i32* @r5, align 4
  %v1_c184 = trunc i32 %v0_c184 to i8
  %v2_c184 = load i32, i32* @r7, align 4
  %v3_c184 = add i32 %v2_c184, 4
  %v4_c184 = inttoptr i32 %v3_c184 to i8*
  store i8 %v1_c184, i8* %v4_c184, align 1
  %v0_c188 = load i32, i32* %r2.global-to-local, align 4
  %v1_c188 = load i32, i32* @r7, align 4
  %v2_c188 = add i32 %v1_c188, 16
  %v3_c188 = inttoptr i32 %v2_c188 to i32*
  store i32 %v0_c188, i32* %v3_c188, align 4
  %v0_c18c = load i32, i32* @sl, align 4
  %v1_c18c = trunc i32 %v0_c18c to i8
  %v2_c18c = load i32, i32* @r7, align 4
  %v3_c18c = add i32 %v2_c18c, 20
  %v4_c18c = inttoptr i32 %v3_c18c to i8*
  store i8 %v1_c18c, i8* %v4_c18c, align 1
  %v0_c190 = load i32, i32* @r7, align 4
  %v1_c190 = add i32 %v0_c190, 20
  store i32 %v1_c190, i32* @r4, align 4
  %v1_c194 = add i32 %v0_c190, 33
  %v2_c194 = inttoptr i32 %v1_c194 to i8*
  %v3_c194 = load i8, i8* %v2_c194, align 1
  %v4_c194 = zext i8 %v3_c194 to i32
  store i32 %v1_c064, i32* %r1.global-to-local, align 4
  %v1_c19c = and i32 %v4_c194, 223
  %v5_c1a0 = or i32 %v1_c19c, %v4_c1a0
  store i32 %v5_c1a0, i32* %r3.global-to-local, align 4
  %v1_c1a4 = trunc i32 %v5_c1a0 to i8
  store i8 %v1_c1a4, i8* %v2_c194, align 1
  %v0_c1a8 = load i32, i32* @r4, align 4
  %v1_c1a8 = add i32 %v0_c1a8, 13
  %v2_c1a8 = inttoptr i32 %v1_c1a8 to i8*
  %v3_c1a8 = load i8, i8* %v2_c1a8, align 1
  %v4_c1a8 = zext i8 %v3_c1a8 to i32
  store i32 %v1_c068, i32* %r3.global-to-local, align 4
  %v1_c1b0 = and i32 %v4_c1a8, 239
  %v5_c1b4 = or i32 %v1_c1b0, %v4_c1b4
  store i32 %v5_c1b4, i32* %r2.global-to-local, align 4
  %v1_c1b8 = trunc i32 %v5_c1b4 to i8
  store i8 %v1_c1b8, i8* %v2_c1a8, align 1
  %v0_c1bc = load i32, i32* @r4, align 4
  %v1_c1bc = add i32 %v0_c1bc, 13
  %v2_c1bc = inttoptr i32 %v1_c1bc to i8*
  %v3_c1bc = load i8, i8* %v2_c1bc, align 1
  %v4_c1bc = zext i8 %v3_c1bc to i32
  store i32 %v1_c06c, i32* %ip.global-to-local, align 4
  %v1_c1c4 = and i32 %v4_c1bc, 247
  %v5_c1c8 = or i32 %v1_c1c4, %v4_c1c8
  store i32 %v5_c1c8, i32* %r3.global-to-local, align 4
  %v1_c1cc = trunc i32 %v5_c1c8 to i8
  store i8 %v1_c1cc, i8* %v2_c1bc, align 1
  %v0_c1d0 = load i32, i32* @r4, align 4
  %v1_c1d0 = add i32 %v0_c1d0, 13
  %v2_c1d0 = inttoptr i32 %v1_c1d0 to i8*
  %v3_c1d0 = load i8, i8* %v2_c1d0, align 1
  %v4_c1d0 = zext i8 %v3_c1d0 to i32
  store i32 %v1_c090, i32* %r1.global-to-local, align 4
  %v1_c1d8 = and i32 %v4_c1d0, 251
  %v5_c1dc = or i32 %v1_c1d8, %v4_c1dc
  store i32 %v5_c1dc, i32* %r2.global-to-local, align 4
  %v1_c1e0 = trunc i32 %v5_c1dc to i8
  store i8 %v1_c1e0, i8* %v2_c1d0, align 1
  %v0_c1e4 = load i32, i32* @r4, align 4
  %v1_c1e4 = add i32 %v0_c1e4, 13
  %v2_c1e4 = inttoptr i32 %v1_c1e4 to i8*
  %v3_c1e4 = load i8, i8* %v2_c1e4, align 1
  %v4_c1e4 = zext i8 %v3_c1e4 to i32
  store i32 %v1_c094, i32* %r2.global-to-local, align 4
  %v1_c1ec = and i32 %v4_c1e4, 253
  %v4_c1f0 = or i32 %v1_c1ec, %v3_c1f0
  store i32 %v4_c1f0, i32* %r3.global-to-local, align 4
  %v1_c1f4 = trunc i32 %v4_c1f0 to i8
  store i8 %v1_c1f4, i8* %v2_c1e4, align 1
  %v0_c1f8 = load i32, i32* @r4, align 4
  %v1_c1f8 = add i32 %v0_c1f8, 12
  %v2_c1f8 = inttoptr i32 %v1_c1f8 to i8*
  %v3_c1f8 = load i8, i8* %v2_c1f8, align 1
  %v4_c1f8 = zext i8 %v3_c1f8 to i32
  store i32 %v4_c1f8, i32* %r2.global-to-local, align 4
  %v1_c1fc = add i32 %v0_c1f8, 13
  %v2_c1fc = inttoptr i32 %v1_c1fc to i8*
  %v3_c1fc = load i8, i8* %v2_c1fc, align 1
  %v4_c1fc = zext i8 %v3_c1fc to i32
  store i32 %v1_c098, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c1f8, 16
  %v1_c204 = zext i8 %tmp99 to i32
  %v1_c208 = and i32 %v4_c1fc, 254
  %v2_c20c = or i32 %v1_c208, %v1_c098
  store i32 %v2_c20c, i32* %r3.global-to-local, align 4
  %v1_c210 = or i32 %v1_c204, 80
  store i32 %v1_c210, i32* %r2.global-to-local, align 4
  %v1_c214 = trunc i32 %v2_c20c to i8
  store i8 %v1_c214, i8* %v2_c1fc, align 1
  %v0_c218 = load i32, i32* %r2.global-to-local, align 4
  %v1_c218 = trunc i32 %v0_c218 to i8
  %v2_c218 = load i32, i32* @r4, align 4
  %v3_c218 = add i32 %v2_c218, 12
  %v4_c218 = inttoptr i32 %v3_c218 to i8*
  store i8 %v1_c218, i8* %v4_c218, align 1
  store i32 %v3_c220, i32* %r1.global-to-local, align 4
  store i32 %v7_c220, i32* %r2.global-to-local, align 4
  %v2_c224 = load i32, i32* @r4, align 4
  %v3_c224 = add i32 %v2_c224, 1
  %v4_c224 = inttoptr i32 %v3_c224 to i8*
  store i8 %v5_c0d0, i8* %v4_c224, align 1
  %v0_c228 = load i32, i32* %r2.global-to-local, align 4
  %v1_c228 = trunc i32 %v0_c228 to i8
  %v2_c228 = load i32, i32* @r4, align 4
  %v3_c228 = add i32 %v2_c228, 3
  %v4_c228 = inttoptr i32 %v3_c228 to i8*
  store i8 %v1_c228, i8* %v4_c228, align 1
  %v0_c22c = load i32, i32* @r6, align 4
  %v1_c22c = trunc i32 %v0_c22c to i8
  %v2_c22c = load i32, i32* @r4, align 4
  %v3_c22c = add i32 %v2_c22c, 2
  %v4_c22c = inttoptr i32 %v3_c22c to i8*
  store i8 %v1_c22c, i8* %v4_c22c, align 1
  %v0_c230 = load i32, i32* @r8, align 4
  %v1_c230 = load i32, i32* @r4, align 4
  %v2_c230 = add i32 %v1_c230, 4
  %v3_c230 = inttoptr i32 %v2_c230 to i32*
  store i32 %v0_c230, i32* %v3_c230, align 4
  %v0_c234 = call i32 @function_eccc()
  store i32 %v1_c09c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c234, 16777216
  %v1_c23c = sdiv i32 %sext, 16777216
  store i32 %v1_c23c, i32* %r2.global-to-local, align 4
  %v3_c240 = ashr i32 %sext, 31
  store i32 %v3_c240, i32* %r3.global-to-local, align 4
  store i1 %v2_c244, i1* %cpsr_z.global-to-local, align 1
  %v1_c248 = trunc i32 %v3_c240 to i8
  %v2_c248 = load i32, i32* @r4, align 4
  %v3_c248 = add i32 %v2_c248, 15
  %v4_c248 = inttoptr i32 %v3_c248 to i8*
  store i8 %v1_c248, i8* %v4_c248, align 1
  %v0_c24c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c258.pre = load i32, i32* @r4, align 4
  br i1 %v0_c24c, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c24c = add i32 %v2_c258.pre, 13
  %v3_c24c = inttoptr i32 %v2_c24c to i8*
  %v4_c24c = load i8, i8* %v3_c24c, align 1
  %v5_c24c = zext i8 %v4_c24c to i32
  %v2_c250 = or i32 %v5_c24c, 8
  store i32 %v2_c250, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_bf4c, i32* @r1, align 4
  %v0_c258 = load i32, i32* %r2.global-to-local, align 4
  %v1_c258 = trunc i32 %v0_c258 to i8
  %v3_c258 = add i32 %v2_c258.pre, 14
  %v4_c258 = inttoptr i32 %v3_c258 to i8*
  store i8 %v1_c258, i8* %v4_c258, align 1
  %v0_c25c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c25c, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c25c = load i32, i32* %r3.global-to-local, align 4
  %v2_c25c = trunc i32 %v1_c25c to i8
  %v3_c25c = load i32, i32* @r4, align 4
  %v4_c25c = add i32 %v3_c25c, 13
  %v5_c25c = inttoptr i32 %v4_c25c to i8*
  store i8 %v2_c25c, i8* %v5_c25c, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c260 = load i32, i32* @r7, align 4
  %v1_c260 = add i32 %v0_c260, 40
  %v1_c264 = inttoptr i32 %v1_c260 to i8*
  %v2_c264 = call i32 @function_eea8(i8* %v1_c264)
  %v3_c268 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c268, i32* %r3.global-to-local, align 4
  %v1_c26c = add i32 %v3_c268, 1
  store i32 %v1_c26c, i32* @r4, align 4
  %v0_c270 = load i32, i32* @fp, align 4
  %v9_c270 = icmp eq i32 %v0_c270, %v1_c26c
  store i1 %v9_c270, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c26c, i32* %stack_var_-40, align 4
  %v8_c278 = icmp sgt i32 %v0_c270, %v1_c26c
  br i1 %v8_c278, label %dec_label_pc_c0dc, label %dec_label_pc_c27c

dec_label_pc_c27c:                                ; preds = %bb89
  store i32 %v6_bf4c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c284.preheader

dec_label_pc_c284.preheader:                      ; preds = %dec_label_pc_c27c, %dec_label_pc_c4f0
  %v0_c28417 = phi i32 [ %v0_c270, %dec_label_pc_c27c ], [ %v0_bff0, %dec_label_pc_c4f0 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c010, %dec_label_pc_c27c ], [ %v1_c4f8, %dec_label_pc_c4f0 ]
  %storemerge = add i32 %v6_bf4c, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c43c = icmp eq i32 %v6_bf88, -1
  %v8_c43c = icmp eq i32 %v6_bf88, -1
  %v3_c458 = icmp eq i32 %v3_bfe4, 65535
  %v2_c4d4 = icmp eq i32 %v1_bf74, 0
  br label %dec_label_pc_c284

dec_label_pc_c284:                                ; preds = %dec_label_pc_c32c, %dec_label_pc_c284.preheader
  %v0_c284 = phi i32 [ %v0_c28417, %dec_label_pc_c284.preheader ], [ %v0_c3c0, %dec_label_pc_c32c ]
  %v2_c284 = icmp eq i32 %v0_c284, 0
  store i1 %v2_c284, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c284, 1
  br label %dec_label_pc_c28c

dec_label_pc_c28c:                                ; preds = %dec_label_pc_c28c, %dec_label_pc_c284
  br i1 %tmp90, label %dec_label_pc_c28c, label %dec_label_pc_c290

dec_label_pc_c290:                                ; preds = %dec_label_pc_c28c
  %v0_c290 = load i32, i32* @r8, align 4
  %v3_c290 = mul i32 %v0_c290, 65536
  store i32 %v3_c290, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c290, 256
  %v1_c298 = and i32 %tmp91, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_c298, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c290, 256
  %v4_c2a4 = urem i32 %tmp92, 256
  %v5_c2a4 = or i32 %v4_c2a4, %v1_c298
  store i32 %v5_c2a4, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c2ac

dec_label_pc_c2ac:                                ; preds = %dec_label_pc_c32c, %dec_label_pc_c290
  %v1_c2c0 = phi i32 [ %v1_c3bc, %dec_label_pc_c32c ], [ 0, %dec_label_pc_c290 ]
  %v5_c2b0 = mul i32 %v1_c2c0, 24
  %v1_c2b4 = load i32, i32* @sb, align 4
  %v2_c2b4 = add i32 %v1_c2b4, %v5_c2b0
  store i32 %v2_c2b4, i32* %r3.global-to-local, align 4
  store i32 %v2_bdb8, i32* %ip.global-to-local, align 4
  %v1_c2bc = add i32 %v2_c2b4, 20
  %v2_c2bc = inttoptr i32 %v1_c2bc to i8*
  %v3_c2bc = load i8, i8* %v2_c2bc, align 1
  %v4_c2bc = zext i8 %v3_c2bc to i32
  store i32 %v4_c2bc, i32* %r2.global-to-local, align 4
  %v4_c2c0 = mul i32 %v1_c2c0, 4
  %v5_c2c0 = add i32 %v4_c2c0, %v2_bdb8
  %v6_c2c0 = inttoptr i32 %v5_c2c0 to i32*
  %v7_c2c0 = load i32, i32* %v6_c2c0, align 4
  store i32 %v7_c2c0, i32* @r5, align 4
  %v7_c2c4 = icmp eq i8 %v3_c2bc, 31
  store i1 %v7_c2c4, i1* %cpsr_z.global-to-local, align 1
  %v1_c2c8 = add i32 %v7_c2c0, 20
  store i32 %v1_c2c8, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c2bc, 32
  br i1 %tmp100, label %dec_label_pc_c3e0, label %dec_label_pc_c2d0

dec_label_pc_c2d0:                                ; preds = %dec_label_pc_c2ac
  store i32 %v6_bf88, i32* %r1.global-to-local, align 4
  store i1 %v8_c43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c43c, label %dec_label_pc_c448, label %dec_label_pc_c2dc

dec_label_pc_c2dc:                                ; preds = %dec_label_pc_c3e0, %dec_label_pc_c2d0
  store i32 %v3_bfe4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c458, label %dec_label_pc_c464, label %dec_label_pc_c2f0

dec_label_pc_c2f0:                                ; preds = %dec_label_pc_c448.dec_label_pc_c2f0_crit_edge, %dec_label_pc_c2dc
  %v1_c2f4 = phi i32 [ %v1_c2f4.pre, %dec_label_pc_c448.dec_label_pc_c2f0_crit_edge ], [ 65535, %dec_label_pc_c2dc ]
  store i32 %v3_bfe8, i32* %r3.global-to-local, align 4
  %v9_c2f4 = icmp eq i32 %v3_bfe8, %v1_c2f4
  store i1 %v9_c2f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c2f4, label %dec_label_pc_c480, label %dec_label_pc_c2fc

dec_label_pc_c2fc:                                ; preds = %dec_label_pc_c464.dec_label_pc_c2fc_crit_edge, %dec_label_pc_c2f0
  %v1_c300 = phi i32 [ %v1_c300.pre, %dec_label_pc_c464.dec_label_pc_c2fc_crit_edge ], [ %v1_c2f4, %dec_label_pc_c2f0 ]
  store i32 %v3_bfec, i32* %ip.global-to-local, align 4
  %v9_c300 = icmp eq i32 %v3_bfec, %v1_c300
  store i1 %v9_c300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c300, label %dec_label_pc_c49c, label %dec_label_pc_c308

dec_label_pc_c308:                                ; preds = %dec_label_pc_c480.dec_label_pc_c308_crit_edge, %dec_label_pc_c2fc
  %v1_c30c = phi i32 [ %v1_c30c.pre, %dec_label_pc_c480.dec_label_pc_c308_crit_edge ], [ %v1_c300, %dec_label_pc_c2fc ]
  store i32 %v5_be88, i32* %r1.global-to-local, align 4
  %v9_c30c = icmp eq i32 %v5_be88, %v1_c30c
  store i1 %v9_c30c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c30c, label %dec_label_pc_c4b8, label %dec_label_pc_c314

dec_label_pc_c314:                                ; preds = %dec_label_pc_c49c.dec_label_pc_c314_crit_edge, %dec_label_pc_c308
  %v1_c318 = phi i32 [ %v1_c318.pre, %dec_label_pc_c49c.dec_label_pc_c314_crit_edge ], [ %v1_c30c, %dec_label_pc_c308 ]
  store i32 %v6_bea4, i32* %r2.global-to-local, align 4
  %v9_c318 = icmp eq i32 %v6_bea4, %v1_c318
  store i1 %v9_c318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c318, label %dec_label_pc_c4cc, label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %dec_label_pc_c4b8, %dec_label_pc_c314
  store i32 %v1_bf74, i32* %r3.global-to-local, align 4
  store i1 %v2_c4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c4d4, label %dec_label_pc_c32c, label %dec_label_pc_c4e0

dec_label_pc_c32c:                                ; preds = %dec_label_pc_c320, %dec_label_pc_c4cc, %dec_label_pc_c4e0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c330 = load i32, i32* @r7, align 4
  %v1_c330 = trunc i32 %v0_c330 to i8
  %v2_c330 = load i32, i32* @r5, align 4
  %v3_c330 = add i32 %v2_c330, 10
  %v4_c330 = inttoptr i32 %v3_c330 to i8*
  store i8 %v1_c330, i8* %v4_c330, align 1
  %v0_c334 = load i32, i32* @r7, align 4
  %v1_c334 = trunc i32 %v0_c334 to i8
  %v2_c334 = load i32, i32* @r5, align 4
  %v3_c334 = add i32 %v2_c334, 11
  %v4_c334 = inttoptr i32 %v3_c334 to i8*
  store i8 %v1_c334, i8* %v4_c334, align 1
  %v0_c338 = load i32, i32* @r5, align 4
  store i32 %v0_c338, i32* @r0, align 4
  %v2_c33c = call i32 @function_d3f8(i32 %v0_c338, i32 20)
  %v3_c33c = trunc i32 %v2_c33c to i8
  %v4_c34028 = udiv i32 %v2_c33c, 256
  %v1_c344 = trunc i32 %v4_c34028 to i8
  %v2_c344 = load i32, i32* @r5, align 4
  %v3_c344 = add i32 %v2_c344, 11
  %v4_c344 = inttoptr i32 %v3_c344 to i8*
  store i8 %v1_c344, i8* %v4_c344, align 1
  %v3_c348 = load i32, i32* @r5, align 4
  %v4_c348 = add i32 %v3_c348, 10
  %v5_c348 = inttoptr i32 %v4_c348 to i8*
  store i8 %v3_c33c, i8* %v5_c348, align 1
  %v0_c34c = load i32, i32* @r6, align 4
  store i32 %v0_c34c, i32* @r1, align 4
  %v0_c350 = load i32, i32* @sl, align 4
  store i32 %v0_c350, i32* %r2.global-to-local, align 4
  %v0_c354 = load i32, i32* @r8, align 4
  store i32 %v0_c354, i32* %r3.global-to-local, align 4
  %v0_c358 = load i32, i32* @r7, align 4
  %v1_c358 = trunc i32 %v0_c358 to i8
  %v3_c358 = add i32 %v0_c34c, 16
  %v4_c358 = inttoptr i32 %v3_c358 to i8*
  store i8 %v1_c358, i8* %v4_c358, align 1
  %v0_c35c = load i32, i32* @r7, align 4
  %v1_c35c = trunc i32 %v0_c35c to i8
  %v2_c35c = load i32, i32* @r6, align 4
  %v3_c35c = add i32 %v2_c35c, 17
  %v4_c35c = inttoptr i32 %v3_c35c to i8*
  store i8 %v1_c35c, i8* %v4_c35c, align 1
  %v0_c360 = load i32, i32* @r5, align 4
  %v4_c364 = call i32 @function_d454(i32 %v0_c360, i32 %v0_c34c, i32 %v0_c350, i32 %v0_c354)
  %v5_c364 = trunc i32 %v4_c364 to i8
  %v4_c36829 = udiv i32 %v4_c364, 256
  %v1_c36c = trunc i32 %v4_c36829 to i8
  %v2_c36c = load i32, i32* @r6, align 4
  %v3_c36c = add i32 %v2_c36c, 17
  %v4_c36c = inttoptr i32 %v3_c36c to i8*
  store i8 %v1_c36c, i8* %v4_c36c, align 1
  %v3_c370 = load i32, i32* @r6, align 4
  %v4_c370 = add i32 %v3_c370, 16
  %v5_c370 = inttoptr i32 %v4_c370 to i8*
  store i8 %v5_c364, i8* %v5_c370, align 1
  %v3_c374 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c374, i32* %r3.global-to-local, align 4
  %v0_c378 = load i32, i32* @r5, align 4
  %v1_c378 = add i32 %v0_c378, 20
  %v2_c378 = inttoptr i32 %v1_c378 to i32*
  %v3_c378 = load i32, i32* %v2_c378, align 4
  %v3_c380 = udiv i32 %v3_c378, 65536
  store i32 %v3_c380, i32* %r2.global-to-local, align 4
  %v5_c384 = mul i32 %v3_c374, 24
  %v1_c388 = load i32, i32* @sb, align 4
  %v2_c388 = add i32 %v1_c388, %v5_c384
  store i32 %v2_c388, i32* %ip.global-to-local, align 4
  %v3_c38c27 = udiv i32 %v3_c378, 16777216
  %v1_c390 = trunc i32 %v3_c38c27 to i8
  %v3_c390 = add i32 %v2_c388, 3
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  %v0_c394 = load i32, i32* %r2.global-to-local, align 4
  %v1_c394 = trunc i32 %v0_c394 to i8
  %v2_c394 = load i32, i32* %ip.global-to-local, align 4
  %v3_c394 = add i32 %v2_c394, 2
  %v4_c394 = inttoptr i32 %v3_c394 to i8*
  store i8 %v1_c394, i8* %v4_c394, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c39c = load i32, i32* @r5, align 4
  store i32 %v0_c39c, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c3ac = load i32, i32* %ip.global-to-local, align 4
  %v6_c3b4 = inttoptr i32 %v0_c39c to i32*
  %v7_c3b4 = call i32 @function_1115c(i32 %v3_bf9c, i32* %v6_c3b4, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c3ac, i32 16)
  %v3_c3b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3b8, i32* %r3.global-to-local, align 4
  %v1_c3bc = add i32 %v3_c3b8, 1
  %v0_c3c0 = load i32, i32* @fp, align 4
  %v9_c3c0 = icmp eq i32 %v0_c3c0, %v1_c3bc
  store i1 %v9_c3c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3bc, i32* %stack_var_-40, align 4
  %v7_c3c8 = icmp sgt i32 %v0_c3c0, %v1_c3bc
  br i1 %v7_c3c8, label %dec_label_pc_c2ac, label %dec_label_pc_c284

dec_label_pc_c3d0:                                ; preds = %dec_label_pc_bfac
  %v1_c3d4 = call i32 @function_108c4(i32 %v3_bf9c)
  br label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_bd98, %dec_label_pc_c3d0
  %v29_c3dc = phi i32 [ %v3_bf9c, %dec_label_pc_bd98 ], [ %v1_c3d4, %dec_label_pc_c3d0 ]
  ret i32 %v29_c3dc

dec_label_pc_c3e0:                                ; preds = %dec_label_pc_c2ac
  %v1_c3e0 = add i32 %v2_c2b4, 16
  %v2_c3e0 = inttoptr i32 %v1_c3e0 to i32*
  %v3_c3e0 = load i32, i32* %v2_c3e0, align 4
  %v0_c3e4 = call i32 @function_eccc()
  %v3_c3e8 = load i32, i32* %stack_var_-40, align 4
  %v5_c3f0 = mul i32 %v3_c3e8, 24
  %v1_c3f8 = load i32, i32* @sb, align 4
  %v2_c3f8 = add i32 %v1_c3f8, %v5_c3f0
  store i32 %v2_c3f8, i32* %r1.global-to-local, align 4
  %v1_c3fc = and i32 %v3_c3e0, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_c3fc, i32* %r3.global-to-local, align 4
  %v1_c3f4 = udiv i32 %v3_c3e0, 256
  %v3_c400 = and i32 %v1_c3f4, 65280
  store i32 %v3_c400, i32* %r2.global-to-local, align 4
  %v3_c404 = mul i32 %v3_c3e0, 16777216
  store i32 %v3_c404, i32* %ip.global-to-local, align 4
  %v1_c408 = add i32 %v2_c3f8, 20
  %v2_c408 = inttoptr i32 %v1_c408 to i8*
  %v3_c408 = load i8, i8* %v2_c408, align 1
  %v4_c408 = zext i8 %v3_c408 to i32
  %v4_c40c = mul i32 %v1_c3fc, 256
  %v5_c40c = or i32 %v4_c40c, %v3_c404
  store i32 %v5_c40c, i32* %ip.global-to-local, align 4
  %v4_c410 = udiv i32 %v3_c3e0, 16777216
  %v5_c410 = or i32 %v3_c400, %v4_c410
  %v2_c414 = or i32 %v5_c410, %v5_c40c
  %v7_c418 = lshr i32 %v0_c3e4, %v4_c408
  %v8_c418 = add i32 %v7_c418, %v2_c414
  store i32 %v8_c418, i32* %r2.global-to-local, align 4
  %v2_c434 = call i32 @llvm.bswap.i32(i32 %v8_c418)
  store i32 %v2_c434, i32* %r3.global-to-local, align 4
  store i32 %v6_bf88, i32* %r1.global-to-local, align 4
  store i1 %v8_c43c, i1* %cpsr_z.global-to-local, align 1
  %v1_c440 = load i32, i32* @r5, align 4
  %v2_c440 = add i32 %v1_c440, 16
  %v3_c440 = inttoptr i32 %v2_c440 to i32*
  store i32 %v2_c434, i32* %v3_c440, align 4
  br i1 %v3_c43c, label %dec_label_pc_c448, label %dec_label_pc_c2dc

dec_label_pc_c448:                                ; preds = %dec_label_pc_c3e0, %dec_label_pc_c2d0
  %v0_c448 = call i32 @function_eccc()
  store i32 %v3_bfe4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c458, i1* %cpsr_z.global-to-local, align 1
  %v1_c45c = load i32, i32* @r5, align 4
  %v2_c45c = add i32 %v1_c45c, 12
  %v3_c45c = inttoptr i32 %v2_c45c to i32*
  store i32 %v0_c448, i32* %v3_c45c, align 4
  br i1 %v3_c458, label %dec_label_pc_c464, label %dec_label_pc_c448.dec_label_pc_c2f0_crit_edge

dec_label_pc_c448.dec_label_pc_c2f0_crit_edge:    ; preds = %dec_label_pc_c448
  %v1_c2f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c2f0

dec_label_pc_c464:                                ; preds = %dec_label_pc_c448, %dec_label_pc_c2dc
  %v0_c464 = call i32 @function_eccc()
  %v1_c464 = trunc i32 %v0_c464 to i8
  %v4_c46830 = udiv i32 %v0_c464, 256
  %v1_c46c = trunc i32 %v4_c46830 to i8
  %v2_c46c = load i32, i32* @r5, align 4
  %v3_c46c = add i32 %v2_c46c, 5
  %v4_c46c = inttoptr i32 %v3_c46c to i8*
  store i8 %v1_c46c, i8* %v4_c46c, align 1
  store i32 %v3_bfe8, i32* %r3.global-to-local, align 4
  %v1_c474 = load i32, i32* @r4, align 4
  %v9_c474 = icmp eq i32 %v3_bfe8, %v1_c474
  store i1 %v9_c474, i1* %cpsr_z.global-to-local, align 1
  %v3_c478 = load i32, i32* @r5, align 4
  %v4_c478 = add i32 %v3_c478, 4
  %v5_c478 = inttoptr i32 %v4_c478 to i8*
  store i8 %v1_c464, i8* %v5_c478, align 1
  %v0_c47c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c47c, label %dec_label_pc_c480, label %dec_label_pc_c464.dec_label_pc_c2fc_crit_edge

dec_label_pc_c464.dec_label_pc_c2fc_crit_edge:    ; preds = %dec_label_pc_c464
  %v1_c300.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c2fc

dec_label_pc_c480:                                ; preds = %dec_label_pc_c464, %dec_label_pc_c2f0
  %v0_c480 = call i32 @function_eccc()
  %v1_c480 = trunc i32 %v0_c480 to i8
  store i32 %v3_bfec, i32* %ip.global-to-local, align 4
  %v4_c488 = sdiv i32 %v0_c480, 256
  store i32 %v4_c488, i32* %r3.global-to-local, align 4
  %v1_c48c = load i32, i32* @r4, align 4
  %v9_c48c = icmp eq i32 %v3_bfec, %v1_c48c
  store i1 %v9_c48c, i1* %cpsr_z.global-to-local, align 1
  %v3_c490 = load i32, i32* @r5, align 4
  %v4_c490 = add i32 %v3_c490, 20
  %v5_c490 = inttoptr i32 %v4_c490 to i8*
  store i8 %v1_c480, i8* %v5_c490, align 1
  %v0_c494 = load i32, i32* %r3.global-to-local, align 4
  %v1_c494 = trunc i32 %v0_c494 to i8
  %v2_c494 = load i32, i32* @r6, align 4
  %v3_c494 = add i32 %v2_c494, 1
  %v4_c494 = inttoptr i32 %v3_c494 to i8*
  store i8 %v1_c494, i8* %v4_c494, align 1
  %v0_c498 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c498, label %dec_label_pc_c49c, label %dec_label_pc_c480.dec_label_pc_c308_crit_edge

dec_label_pc_c480.dec_label_pc_c308_crit_edge:    ; preds = %dec_label_pc_c480
  %v1_c30c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c308

dec_label_pc_c49c:                                ; preds = %dec_label_pc_c480, %dec_label_pc_c2fc
  %v0_c49c = call i32 @function_eccc()
  %v1_c49c = trunc i32 %v0_c49c to i8
  store i32 %v5_be88, i32* %r1.global-to-local, align 4
  %v4_c4a4 = sdiv i32 %v0_c49c, 256
  store i32 %v4_c4a4, i32* %r3.global-to-local, align 4
  %v1_c4a8 = load i32, i32* @r4, align 4
  %v9_c4a8 = icmp eq i32 %v5_be88, %v1_c4a8
  store i1 %v9_c4a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c4ac = trunc i32 %v4_c4a4 to i8
  %v2_c4ac = load i32, i32* @r6, align 4
  %v3_c4ac = add i32 %v2_c4ac, 3
  %v4_c4ac = inttoptr i32 %v3_c4ac to i8*
  store i8 %v1_c4ac, i8* %v4_c4ac, align 1
  %v3_c4b0 = load i32, i32* @r6, align 4
  %v4_c4b0 = add i32 %v3_c4b0, 2
  %v5_c4b0 = inttoptr i32 %v4_c4b0 to i8*
  store i8 %v1_c49c, i8* %v5_c4b0, align 1
  %v0_c4b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4b4, label %dec_label_pc_c4b8, label %dec_label_pc_c49c.dec_label_pc_c314_crit_edge

dec_label_pc_c49c.dec_label_pc_c314_crit_edge:    ; preds = %dec_label_pc_c49c
  %v1_c318.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c314

dec_label_pc_c4b8:                                ; preds = %dec_label_pc_c49c, %dec_label_pc_c308
  %v0_c4b8 = call i32 @function_eccc()
  store i32 %v6_bea4, i32* %r2.global-to-local, align 4
  %v1_c4c0 = load i32, i32* @r4, align 4
  %v9_c4c0 = icmp eq i32 %v6_bea4, %v1_c4c0
  store i1 %v9_c4c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c4c4 = load i32, i32* @r6, align 4
  %v2_c4c4 = add i32 %v1_c4c4, 4
  %v3_c4c4 = inttoptr i32 %v2_c4c4 to i32*
  store i32 %v0_c4b8, i32* %v3_c4c4, align 4
  br i1 %v9_c4c0, label %dec_label_pc_c4cc, label %dec_label_pc_c320

dec_label_pc_c4cc:                                ; preds = %dec_label_pc_c4b8, %dec_label_pc_c314
  %v0_c4cc = call i32 @function_eccc()
  store i32 %v1_bf74, i32* %r3.global-to-local, align 4
  store i1 %v2_c4d4, i1* %cpsr_z.global-to-local, align 1
  %v1_c4d8 = load i32, i32* @r6, align 4
  %v2_c4d8 = add i32 %v1_c4d8, 8
  %v3_c4d8 = inttoptr i32 %v2_c4d8 to i32*
  store i32 %v0_c4cc, i32* %v3_c4d8, align 4
  br i1 %v2_c4d4, label %dec_label_pc_c32c, label %dec_label_pc_c4e0

dec_label_pc_c4e0:                                ; preds = %dec_label_pc_c320, %dec_label_pc_c4cc
  %v0_c4e0 = load i32, i32* @r5, align 4
  %v1_c4e0 = add i32 %v0_c4e0, 40
  store i32 %v6_bf4c, i32* @r1, align 4
  %v1_c4e8 = inttoptr i32 %v1_c4e0 to i8*
  %v2_c4e8 = call i32 @function_eea8(i8* %v1_c4e8)
  br label %dec_label_pc_c32c

dec_label_pc_c4f0:                                ; preds = %dec_label_pc_bfd4
  store i32 %v6_bf4c, i32* %r3.global-to-local, align 4
  %v1_c4f8 = add i32 %v6_bf4c, 40
  store i32 %v1_c4f8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c284.preheader

; uselistorder directives
  uselistorder i32 %v1_c4f8, { 1, 0 }
  uselistorder i32 %v4_c4a4, { 1, 0 }
  uselistorder i32 %v2_c434, { 1, 0 }
  uselistorder i32 %v3_c404, { 1, 0 }
  uselistorder i32 %v3_c3e0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_c3c0, { 1, 2, 0 }
  uselistorder i32 %v1_c3bc, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c34c, { 1, 0, 2 }
  uselistorder i32 %v0_c290, { 2, 0, 1 }
  uselistorder i32 %v0_c284, { 1, 0 }
  uselistorder i1 %v2_c4d4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c458, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c26c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c0d0, { 1, 0 }
  uselistorder i32 %v1_c098, { 1, 0 }
  uselistorder i32 %v1_c094, { 1, 0 }
  uselistorder i32 %v1_c090, { 1, 0 }
  uselistorder i32 %v1_c06c, { 1, 0 }
  uselistorder i32 %v1_c068, { 1, 0 }
  uselistorder i32 %v1_c064, { 1, 0 }
  uselistorder i32 %v1_c058, { 1, 0 }
  uselistorder i32 %v1_c034, { 1, 0 }
  uselistorder i32 %v1_c024, { 1, 0 }
  uselistorder i32 %v1_c010, { 2, 1, 0 }
  uselistorder i32 %v0_bff0, { 1, 0, 2 }
  uselistorder i32 %v3_bfe4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bfd8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_bfd4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_bfcc, { 1, 0 }
  uselistorder i1 %v7_bfa0, { 1, 0 }
  uselistorder i32 %v3_bf9c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_bf88, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_bf74, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bf4c, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_bea4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_be88, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_be38, { 1, 0 }
  uselistorder i32 %v6_bdd0, { 1, 0 }
  uselistorder i32 %v2_bdb8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bd9c, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_c4e0, { 1, 0 }
  uselistorder label %dec_label_pc_c3d8, { 1, 0 }
  uselistorder label %dec_label_pc_c32c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c284.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c50c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c50c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c50c = load i32, i32* @r4, align 4
  %v12_c50c = load i32, i32* @r7, align 4
  %v1_c510 = urem i32 %arg1, 256
  store i32 %v1_c510, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c510, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c528 = urem i32 %arg3, 256
  store i32 %v1_c528, i32* @r4, align 4
  %v2_c52c = call i32 @function_114c4(i32 %v1_c510, i32 4)
  %v0_c530 = load i32, i32* @r5, align 4
  store i32 %v0_c530, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c52c, i32* %fp.global-to-local, align 4
  %v0_c540 = load i32, i32* @r4, align 4
  store i32 %v0_c540, i32* %r0.global-to-local, align 4
  %v4_c544 = inttoptr i32 %v0_c530 to i32*
  %v5_c544 = call i32 @function_a398(i32 %v0_c540, i32* %v4_c544, i32 2, i32 0)
  %v1_c550 = urem i32 %v5_c544, 256
  store i32 %v1_c550, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c55c = load i32, i32* @r5, align 4
  store i32 %v0_c55c, i32* %r1.global-to-local, align 4
  %v0_c560 = load i32, i32* @r4, align 4
  store i32 %v0_c560, i32* %r0.global-to-local, align 4
  %v5_c564 = trunc i32 %v5_c544 to i8
  %v6_c568 = inttoptr i32 %v0_c55c to i32*
  %v7_c568 = call i32 @function_a398(i32 %v0_c560, i32* %v6_c568, i32 3, i32 65535)
  %v0_c56c = load i32, i32* @r5, align 4
  store i32 %v0_c56c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c57c = load i32, i32* @r4, align 4
  store i32 %v0_c57c, i32* %r0.global-to-local, align 4
  %v5_c580 = inttoptr i32 %v0_c56c to i32*
  %v6_c580 = call i32 @function_a398(i32 %v0_c57c, i32* %v5_c580, i32 4, i32 64)
  %v1_c588 = urem i32 %v6_c580, 256
  store i32 %v1_c588, i32* %ip.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  store i32 %v0_c58c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* @r4, align 4
  store i32 %v0_c598, i32* %r0.global-to-local, align 4
  %v6_c5a0 = inttoptr i32 %v0_c58c to i32*
  %v7_c5a0 = call i32 @function_a398(i32 %v0_c598, i32* %v6_c5a0, i32 5, i32 1)
  %v1_c5ac = urem i32 %v7_c5a0, 256
  store i32 %v1_c5ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c5b8 = load i32, i32* @r5, align 4
  store i32 %v0_c5b8, i32* %r1.global-to-local, align 4
  %v0_c5bc = load i32, i32* @r4, align 4
  store i32 %v0_c5bc, i32* %r0.global-to-local, align 4
  %v5_c5c4 = inttoptr i32 %v0_c5b8 to i32*
  %v6_c5c4 = call i32 @function_a398(i32 %v0_c5bc, i32* %v5_c5c4, i32 6, i32 65535)
  %v0_c5cc = load i32, i32* @r5, align 4
  store i32 %v0_c5cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c5c4, i32* @r7, align 4
  %v0_c5dc = load i32, i32* @r4, align 4
  store i32 %v0_c5dc, i32* %r0.global-to-local, align 4
  %v4_c5e0 = inttoptr i32 %v0_c5cc to i32*
  %v5_c5e0 = call i32 @function_a398(i32 %v0_c5dc, i32* %v4_c5e0, i32 7, i32 65535)
  %v0_c5e8 = load i32, i32* @r5, align 4
  store i32 %v0_c5e8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c5e0, i32* @r6, align 4
  %v0_c5f8 = load i32, i32* @r4, align 4
  store i32 %v0_c5f8, i32* %r0.global-to-local, align 4
  %v4_c5fc = inttoptr i32 %v0_c5e8 to i32*
  %v5_c5fc = call i32 @function_a398(i32 %v0_c5f8, i32* %v4_c5fc, i32 17, i32 65535)
  %v0_c600 = load i32, i32* @r5, align 4
  store i32 %v0_c600, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c610 = load i32, i32* @r4, align 4
  store i32 %v0_c610, i32* %r0.global-to-local, align 4
  %v5_c614 = inttoptr i32 %v0_c600 to i32*
  %v6_c614 = call i32 @function_a398(i32 %v0_c610, i32* %v5_c614, i32 18, i32 0)
  %v0_c618 = load i32, i32* @r5, align 4
  store i32 %v0_c618, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c628 = load i32, i32* @r4, align 4
  store i32 %v0_c628, i32* %r0.global-to-local, align 4
  %v5_c62c = inttoptr i32 %v0_c618 to i32*
  %v6_c62c = call i32 @function_a398(i32 %v0_c628, i32* %v5_c62c, i32 11, i32 0)
  %v0_c630 = load i32, i32* @r5, align 4
  store i32 %v0_c630, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c640 = load i32, i32* @r4, align 4
  store i32 %v0_c640, i32* %r0.global-to-local, align 4
  %v5_c644 = inttoptr i32 %v0_c630 to i32*
  %v6_c644 = call i32 @function_a398(i32 %v0_c640, i32* %v5_c644, i32 12, i32 0)
  %v0_c648 = load i32, i32* @r5, align 4
  store i32 %v0_c648, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c658 = load i32, i32* @r4, align 4
  store i32 %v0_c658, i32* %r0.global-to-local, align 4
  %v5_c65c = inttoptr i32 %v0_c648 to i32*
  %v6_c65c = call i32 @function_a398(i32 %v0_c658, i32* %v5_c65c, i32 13, i32 0)
  %v0_c660 = load i32, i32* @r5, align 4
  store i32 %v0_c660, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c670 = load i32, i32* @r4, align 4
  store i32 %v0_c670, i32* %r0.global-to-local, align 4
  %v5_c674 = inttoptr i32 %v0_c660 to i32*
  %v6_c674 = call i32 @function_a398(i32 %v0_c670, i32* %v5_c674, i32 14, i32 0)
  %v0_c678 = load i32, i32* @r5, align 4
  store i32 %v0_c678, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c688 = load i32, i32* @r4, align 4
  store i32 %v0_c688, i32* %r0.global-to-local, align 4
  %v5_c68c = inttoptr i32 %v0_c678 to i32*
  %v6_c68c = call i32 @function_a398(i32 %v0_c688, i32* %v5_c68c, i32 15, i32 1)
  %v0_c690 = load i32, i32* @r5, align 4
  store i32 %v0_c690, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c6a0 = load i32, i32* @r4, align 4
  store i32 %v0_c6a0, i32* %r0.global-to-local, align 4
  %v5_c6a4 = inttoptr i32 %v0_c690 to i32*
  %v6_c6a4 = call i32 @function_a398(i32 %v0_c6a0, i32* %v5_c6a4, i32 16, i32 0)
  %v2_c6b0 = load i32, i32* @global_var_1bcbc.78, align 4
  store i32 %v2_c6b0, i32* %r3.global-to-local, align 4
  %v0_c6b4 = load i32, i32* @r5, align 4
  store i32 %v0_c6b4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c6bc = load i32, i32* @r4, align 4
  store i32 %v0_c6bc, i32* %r0.global-to-local, align 4
  %v5_c6c0 = inttoptr i32 %v0_c6b4 to i32*
  %v6_c6c0 = call i32 @function_a32c(i32 %v0_c6bc, i32* %v5_c6c0, i32 25, i32 %v2_c6b0, i32 %v6_c6a4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c6d4 = call i32 @function_111c0(i32 2, i32 3, i32 6)
  store i32 %v3_c6d4, i32* %r0.global-to-local, align 4
  %v7_c6d8 = icmp eq i32 %v3_c6d4, -1
  store i1 %v7_c6d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c6d4, i32* %sb.global-to-local, align 4
  br i1 %v7_c6d8, label %dec_label_pc_cc44, label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c50c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c6ec = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c6ec, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c700 = call i32 @function_11190(i32 %v3_c6d4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c700, i32* %r0.global-to-local, align 4
  %v7_c704 = icmp eq i32 %v6_c700, -1
  store i1 %v7_c704, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c704, label %dec_label_pc_cc3c, label %dec_label_pc_c70c

dec_label_pc_c70c:                                ; preds = %dec_label_pc_c6e4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_c720 = load i32, i32* @r7, align 4
  %v3_c720 = mul i32 %v0_c720, 65536
  store i32 %v3_c720, i32* %r4.global-to-local, align 4
  %v0_c724 = load i32, i32* @r6, align 4
  %v3_c728 = urem i32 %v7_c568, 65536
  store i32 %v3_c728, i32* %r3.global-to-local, align 4
  %v3_c72c = urem i32 %v0_c720, 65536
  store i32 %v3_c72c, i32* %ip.global-to-local, align 4
  %v3_c730 = urem i32 %v0_c724, 65536
  store i32 %v3_c730, i32* %r0.global-to-local, align 4
  %v1_c734 = urem i32 %v6_c62c, 256
  store i32 %v1_c734, i32* %r2.global-to-local, align 4
  %v0_c738 = load i32, i32* @sl, align 4
  %v2_c738 = icmp eq i32 %v0_c738, 0
  store i1 %v2_c738, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_c738, 1
  br i1 %tmp69, label %dec_label_pc_c9e8, label %dec_label_pc_c750

dec_label_pc_c750:                                ; preds = %dec_label_pc_c70c
  %v1_c760 = urem i32 %v0_c720, 256
  %v1_c768 = urem i32 %v7_c568, 256
  %v1_c76c = urem i32 %v0_c724, 256
  %tmp70 = mul i32 %v5_c5fc, 256
  %v3_c774 = mul nuw nsw i32 %v1_c76c, 256
  %v1_c778 = and i32 %tmp70, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp71 = udiv i32 %v0_c724, 256
  %v4_c77c = urem i32 %tmp71, 256
  %v5_c77c = or i32 %v4_c77c, %v3_c774
  store i32 %v5_c77c, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_c5fc, 256
  %v4_c780 = urem i32 %tmp72, 256
  %v5_c780 = or i32 %v4_c780, %v1_c778
  store i32 %v5_c780, i32* @r5, align 4
  %v3_c78c = mul nuw nsw i32 %v1_c768, 256
  %v1_c790 = urem i32 %v6_c62c, 2
  %tmp73 = udiv i32 %v7_c568, 256
  %v4_c794 = urem i32 %tmp73, 256
  %v5_c794 = or i32 %v4_c794, %v3_c78c
  store i32 %v5_c794, i32* @lr, align 4
  %v1_c798 = urem i32 %v6_c644, 2
  %v3_c7a8 = mul nuw nsw i32 %v1_c760, 256
  store i32 %v3_c7a8, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_c720, 256
  %v4_c7b4 = urem i32 %tmp74, 256
  %v5_c7b4 = or i32 %v4_c7b4, %v3_c7a8
  store i32 %v5_c7b4, i32* @r7, align 4
  %v1_c7b8 = urem i32 %v6_c65c, 2
  %v1_c7bc = urem i32 %v6_c674, 2
  %v1_c7c0 = urem i32 %v6_c68c, 2
  %v1_c7d0 = urem i32 %v6_c6a4, 2
  store i32 %v1_c7d0, i32* %r0.global-to-local, align 4
  store i32 %v1_c768, i32* %r2.global-to-local, align 4
  store i32 %v1_c760, i32* %r3.global-to-local, align 4
  store i32 %v1_c76c, i32* %ip.global-to-local, align 4
  %v5_c7e0 = trunc i32 %tmp73 to i8
  %v5_c7f0 = trunc i32 %v0_c724 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c580, 16777216
  %v4_c840 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c568, 16777216
  %v4_c858 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_c790
  %v4_c8b4 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c798
  %v4_c8c8 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c7b8
  %v4_c8dc = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c7bc
  %v4_c8f0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c7c0
  %v3_c904 = and i32 %tmp81, 2
  %v7_c934 = sext i8 %v5_c7f0 to i32
  %sext77 = mul i32 %v0_c720, 16777216
  %v3_c934 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_c7f8

dec_label_pc_c7f8:                                ; preds = %bb76, %dec_label_pc_c750
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c800 = call i32 @function_114c4(i32 128, i32 1)
  store i32 %v2_c800, i32* %r0.global-to-local, align 4
  %v3_c804 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c804, i32* %r2.global-to-local, align 4
  %v1_c808 = load i32, i32* %fp.global-to-local, align 4
  %v2_c808 = load i32, i32* @r4, align 4
  %v5_c808 = mul i32 %v2_c808, 4
  %v6_c808 = add i32 %v5_c808, %v1_c808
  %v7_c808 = inttoptr i32 %v6_c808 to i32*
  store i32 %v2_c800, i32* %v7_c808, align 4
  %v0_c80c = load i32, i32* %fp.global-to-local, align 4
  %v1_c80c = load i32, i32* %r2.global-to-local, align 4
  %v4_c80c = mul i32 %v1_c80c, 4
  %v5_c80c = add i32 %v4_c80c, %v0_c80c
  %v6_c80c = inttoptr i32 %v5_c80c to i32*
  %v7_c80c = load i32, i32* %v6_c80c, align 4
  store i32 %v7_c80c, i32* %r4.global-to-local, align 4
  %v1_c810 = inttoptr i32 %v7_c80c to i8*
  %v2_c810 = load i8, i8* %v1_c810, align 1
  %tmp82 = urem i8 %v2_c810, 16
  %v1_c814 = zext i8 %tmp82 to i32
  %v1_c818 = or i32 %v1_c814, 64
  store i32 %v1_c818, i32* %r3.global-to-local, align 4
  %v1_c81c = trunc i32 %v1_c818 to i8
  store i8 %v1_c81c, i8* %v1_c810, align 1
  %v0_c820 = load i32, i32* %r4.global-to-local, align 4
  %v1_c820 = inttoptr i32 %v0_c820 to i8*
  %v2_c820 = load i8, i8* %v1_c820, align 1
  %v1_c824 = and i8 %v2_c820, -16
  %v1_c828 = or i8 %v1_c824, 5
  store i32 %v1_c5ac, i32* %r0.global-to-local, align 4
  store i8 %v1_c828, i8* %v1_c820, align 1
  %v2_c838 = load i32, i32* %r4.global-to-local, align 4
  %v3_c838 = add i32 %v2_c838, 1
  %v4_c838 = inttoptr i32 %v3_c838 to i8*
  store i8 %v5_c564, i8* %v4_c838, align 1
  store i32 %v4_c840, i32* %r2.global-to-local, align 4
  %v2_c844 = load i32, i32* %r4.global-to-local, align 4
  %v3_c844 = add i32 %v2_c844, 4
  %v4_c844 = inttoptr i32 %v3_c844 to i8*
  store i8 %v5_c7e0, i8* %v4_c844, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_c850 = load i32, i32* %r0.global-to-local, align 4
  %v2_c850 = icmp eq i32 %v0_c850, 0
  store i1 %v2_c850, i1* %cpsr_z.global-to-local, align 1
  %v2_c854 = load i32, i32* %r4.global-to-local, align 4
  %v3_c854 = add i32 %v2_c854, 3
  %v4_c854 = inttoptr i32 %v3_c854 to i8*
  store i8 60, i8* %v4_c854, align 1
  store i32 %v4_c858, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c860 = load i32, i32* %r2.global-to-local, align 4
  %v1_c860 = trunc i32 %v0_c860 to i8
  %v2_c860 = load i32, i32* %r4.global-to-local, align 4
  %v3_c860 = add i32 %v2_c860, 8
  %v4_c860 = inttoptr i32 %v3_c860 to i8*
  store i8 %v1_c860, i8* %v4_c860, align 1
  %v0_c864 = load i32, i32* %ip.global-to-local, align 4
  %v1_c864 = trunc i32 %v0_c864 to i8
  %v2_c864 = load i32, i32* %r4.global-to-local, align 4
  %v3_c864 = add i32 %v2_c864, 9
  %v4_c864 = inttoptr i32 %v3_c864 to i8*
  store i8 %v1_c864, i8* %v4_c864, align 1
  %v0_c868 = load i32, i32* %r3.global-to-local, align 4
  %v1_c868 = trunc i32 %v0_c868 to i8
  %v2_c868 = load i32, i32* %r4.global-to-local, align 4
  %v3_c868 = add i32 %v2_c868, 2
  %v4_c868 = inttoptr i32 %v3_c868 to i8*
  store i8 %v1_c868, i8* %v4_c868, align 1
  %v3_c86c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c86c, i32* %r2.global-to-local, align 4
  %v0_c870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c870, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c7f8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c874 = load i32, i32* %r4.global-to-local, align 4
  %v4_c874 = add i32 %v3_c874, 6
  %v5_c874 = inttoptr i32 %v4_c874 to i8*
  store i8 64, i8* %v5_c874, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c7f8, %bb
  %v0_c878 = load i32, i32* %r0.global-to-local, align 4
  %v1_c878 = trunc i32 %v0_c878 to i8
  %v2_c878 = load i32, i32* %r4.global-to-local, align 4
  %v3_c878 = add i32 %v2_c878, 5
  %v4_c878 = inttoptr i32 %v3_c878 to i8*
  store i8 %v1_c878, i8* %v4_c878, align 1
  %v0_c87c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c87c, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_c6c0, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_c6c0, i32* %r0.global-to-local, align 4
  %v3_c884 = load i32, i32* %r4.global-to-local, align 4
  %v4_c884 = add i32 %v3_c884, 7
  %v5_c884 = inttoptr i32 %v4_c884 to i8*
  store i8 0, i8* %v5_c884, align 1
  %v0_c88c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_c88c = phi i32 [ %v6_c6c0, %.thread9 ], [ %v0_c88c.pre, %bb75 ]
  %v0_c888 = load i32, i32* %r2.global-to-local, align 4
  %v3_c888 = mul i32 %v0_c888, 32
  store i32 %v3_c888, i32* %r3.global-to-local, align 4
  %v1_c88c = load i32, i32* %r4.global-to-local, align 4
  %v2_c88c = add i32 %v1_c88c, 12
  %v3_c88c = inttoptr i32 %v2_c88c to i32*
  store i32 %v0_c88c, i32* %v3_c88c, align 4
  %v0_c890 = load i32, i32* %r3.global-to-local, align 4
  %v1_c890 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_c890, -8
  %v5_c890 = add i32 %v0_c890, %tmp83
  %v1_c894 = load i32, i32* @r8, align 4
  %v2_c894 = add i32 %v1_c894, %v5_c890
  store i32 %v2_c894, i32* %r3.global-to-local, align 4
  %v1_c898 = add i32 %v2_c894, 16
  %v2_c898 = inttoptr i32 %v1_c898 to i32*
  %v3_c898 = load i32, i32* %v2_c898, align 4
  store i32 %v3_c898, i32* %r2.global-to-local, align 4
  %v0_c89c = load i32, i32* @r7, align 4
  %v1_c89c = trunc i32 %v0_c89c to i8
  %v2_c89c = load i32, i32* %r4.global-to-local, align 4
  %v3_c89c = add i32 %v2_c89c, 20
  %v4_c89c = inttoptr i32 %v3_c89c to i8*
  store i8 %v1_c89c, i8* %v4_c89c, align 1
  %v0_c8a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c8a0 = load i32, i32* %r4.global-to-local, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v0_c8a0, i32* %v3_c8a0, align 4
  %v0_c8a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c8a4 = add i32 %v0_c8a4, 20
  store i32 %v1_c8a4, i32* %r1.global-to-local, align 4
  %v1_c8a8 = add i32 %v0_c8a4, 33
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i8*
  %v3_c8a8 = load i8, i8* %v2_c8a8, align 1
  %v4_c8a8 = zext i8 %v3_c8a8 to i32
  store i32 %v1_c790, i32* %r2.global-to-local, align 4
  %v1_c8b0 = and i32 %v4_c8a8, 223
  %v5_c8b4 = or i32 %v1_c8b0, %v4_c8b4
  store i32 %v5_c8b4, i32* %r3.global-to-local, align 4
  %v1_c8b8 = trunc i32 %v5_c8b4 to i8
  store i8 %v1_c8b8, i8* %v2_c8a8, align 1
  %v0_c8bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c8bc = add i32 %v0_c8bc, 13
  %v2_c8bc = inttoptr i32 %v1_c8bc to i8*
  %v3_c8bc = load i8, i8* %v2_c8bc, align 1
  %v4_c8bc = zext i8 %v3_c8bc to i32
  store i32 %v1_c798, i32* %r3.global-to-local, align 4
  %v1_c8c4 = and i32 %v4_c8bc, 239
  %v5_c8c8 = or i32 %v1_c8c4, %v4_c8c8
  store i32 %v5_c8c8, i32* %r2.global-to-local, align 4
  %v1_c8cc = trunc i32 %v5_c8c8 to i8
  store i8 %v1_c8cc, i8* %v2_c8bc, align 1
  %v0_c8d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8d0 = add i32 %v0_c8d0, 13
  %v2_c8d0 = inttoptr i32 %v1_c8d0 to i8*
  %v3_c8d0 = load i8, i8* %v2_c8d0, align 1
  %v4_c8d0 = zext i8 %v3_c8d0 to i32
  store i32 %v1_c7b8, i32* %ip.global-to-local, align 4
  %v1_c8d8 = and i32 %v4_c8d0, 247
  %v5_c8dc = or i32 %v1_c8d8, %v4_c8dc
  store i32 %v5_c8dc, i32* %r3.global-to-local, align 4
  %v1_c8e0 = trunc i32 %v5_c8dc to i8
  store i8 %v1_c8e0, i8* %v2_c8d0, align 1
  %v0_c8e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8e4 = add i32 %v0_c8e4, 13
  %v2_c8e4 = inttoptr i32 %v1_c8e4 to i8*
  %v3_c8e4 = load i8, i8* %v2_c8e4, align 1
  %v4_c8e4 = zext i8 %v3_c8e4 to i32
  store i32 %v1_c7bc, i32* %r0.global-to-local, align 4
  %v1_c8ec = and i32 %v4_c8e4, 251
  %v5_c8f0 = or i32 %v1_c8ec, %v4_c8f0
  store i32 %v5_c8f0, i32* %r2.global-to-local, align 4
  %v1_c8f4 = trunc i32 %v5_c8f0 to i8
  store i8 %v1_c8f4, i8* %v2_c8e4, align 1
  %v0_c8f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8f8 = add i32 %v0_c8f8, 13
  %v2_c8f8 = inttoptr i32 %v1_c8f8 to i8*
  %v3_c8f8 = load i8, i8* %v2_c8f8, align 1
  %v4_c8f8 = zext i8 %v3_c8f8 to i32
  store i32 %v1_c7c0, i32* %r2.global-to-local, align 4
  %v1_c900 = and i32 %v4_c8f8, 253
  %v4_c904 = or i32 %v1_c900, %v3_c904
  store i32 %v4_c904, i32* %r3.global-to-local, align 4
  %v1_c908 = trunc i32 %v4_c904 to i8
  store i8 %v1_c908, i8* %v2_c8f8, align 1
  %v0_c90c = load i32, i32* %r1.global-to-local, align 4
  %v1_c90c = add i32 %v0_c90c, 12
  %v2_c90c = inttoptr i32 %v1_c90c to i8*
  %v3_c90c = load i8, i8* %v2_c90c, align 1
  %v4_c90c = zext i8 %v3_c90c to i32
  store i32 %v4_c90c, i32* %r2.global-to-local, align 4
  %v1_c910 = add i32 %v0_c90c, 13
  %v2_c910 = inttoptr i32 %v1_c910 to i8*
  %v3_c910 = load i8, i8* %v2_c910, align 1
  %v4_c910 = zext i8 %v3_c910 to i32
  %tmp84 = urem i8 %v3_c90c, 16
  %v1_c918 = zext i8 %tmp84 to i32
  %v1_c91c = and i32 %v4_c910, 254
  %v2_c920 = or i32 %v1_c91c, %v1_c7d0
  %v1_c924 = or i32 %v1_c918, 160
  store i32 %v1_c924, i32* %r2.global-to-local, align 4
  %v1_c928 = trunc i32 %v2_c920 to i8
  store i8 %v1_c928, i8* %v2_c910, align 1
  %v0_c92c = load i32, i32* %r2.global-to-local, align 4
  %v1_c92c = trunc i32 %v0_c92c to i8
  %v2_c92c = load i32, i32* %r1.global-to-local, align 4
  %v3_c92c = add i32 %v2_c92c, 12
  %v4_c92c = inttoptr i32 %v3_c92c to i8*
  store i8 %v1_c92c, i8* %v4_c92c, align 1
  store i32 %v3_c934, i32* %r0.global-to-local, align 4
  store i32 %v7_c934, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_c940 = load i32, i32* %r1.global-to-local, align 4
  %v3_c940 = add i32 %v2_c940, 3
  %v4_c940 = inttoptr i32 %v3_c940 to i8*
  store i8 %v5_c7f0, i8* %v4_c940, align 1
  %v0_c944 = load i32, i32* %r0.global-to-local, align 4
  %v1_c944 = trunc i32 %v0_c944 to i8
  %v2_c944 = load i32, i32* %r1.global-to-local, align 4
  %v3_c944 = add i32 %v2_c944, 1
  %v4_c944 = inttoptr i32 %v3_c944 to i8*
  store i8 %v1_c944, i8* %v4_c944, align 1
  %v0_c948 = load i32, i32* @r6, align 4
  %v1_c948 = trunc i32 %v0_c948 to i8
  %v2_c948 = load i32, i32* %r1.global-to-local, align 4
  %v3_c948 = add i32 %v2_c948, 2
  %v4_c948 = inttoptr i32 %v3_c948 to i8*
  store i8 %v1_c948, i8* %v4_c948, align 1
  %v0_c94c = load i32, i32* @r5, align 4
  %v1_c94c = load i32, i32* %r1.global-to-local, align 4
  %v2_c94c = add i32 %v1_c94c, 4
  %v3_c94c = inttoptr i32 %v2_c94c to i32*
  store i32 %v0_c94c, i32* %v3_c94c, align 4
  %v0_c950 = load i32, i32* %ip.global-to-local, align 4
  %v1_c950 = trunc i32 %v0_c950 to i8
  %v2_c950 = load i32, i32* %r4.global-to-local, align 4
  %v3_c950 = add i32 %v2_c950, 41
  %v4_c950 = inttoptr i32 %v3_c950 to i8*
  store i8 %v1_c950, i8* %v4_c950, align 1
  %v0_c954 = load i32, i32* %r3.global-to-local, align 4
  %v1_c954 = trunc i32 %v0_c954 to i8
  %v2_c954 = load i32, i32* %r4.global-to-local, align 4
  %v3_c954 = add i32 %v2_c954, 40
  %v4_c954 = inttoptr i32 %v3_c954 to i8*
  store i8 %v1_c954, i8* %v4_c954, align 1
  %v0_c958 = call i32 @function_eccc()
  %v1_c95c = mul i32 %v0_c958, 256
  %v1_c960 = and i32 %v1_c95c, 3840
  %v1_c964 = or i32 %v1_c960, 356352
  %v3_c96c = add nuw nsw i32 %v1_c964, 2048
  %v1_c970 = and i32 %v3_c96c, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_c9787 = udiv i32 %v1_c970, 256
  store i32 %v3_c9787, i32* %r1.global-to-local, align 4
  %v0_c97c = load i32, i32* %r4.global-to-local, align 4
  %v1_c97c = add i32 %v0_c97c, 42
  store i32 %v1_c97c, i32* %r2.global-to-local, align 4
  %v4_c980 = inttoptr i32 %v1_c97c to i8*
  store i8 5, i8* %v4_c980, align 1
  %v0_c984 = load i32, i32* %r1.global-to-local, align 4
  %v1_c984 = trunc i32 %v0_c984 to i8
  %v2_c984 = load i32, i32* %r2.global-to-local, align 4
  %v3_c984 = add i32 %v2_c984, 1
  %v4_c984 = inttoptr i32 %v3_c984 to i8*
  store i8 %v1_c984, i8* %v4_c984, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_c990 = load i32, i32* %r4.global-to-local, align 4
  %v3_c990 = add i32 %v2_c990, 47
  %v4_c990 = inttoptr i32 %v3_c990 to i8*
  store i8 10, i8* %v4_c990, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c99c = load i32, i32* %r3.global-to-local, align 4
  %v1_c99c = trunc i32 %v0_c99c to i8
  %v2_c99c = load i32, i32* %r4.global-to-local, align 4
  %v3_c99c = add i32 %v2_c99c, 46
  %v4_c99c = inttoptr i32 %v3_c99c to i8*
  store i8 %v1_c99c, i8* %v4_c99c, align 1
  %v0_c9a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c9a0 = trunc i32 %v0_c9a0 to i8
  %v2_c9a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9a0 = add i32 %v2_c9a0, 45
  %v4_c9a0 = inttoptr i32 %v3_c9a0 to i8*
  store i8 %v1_c9a0, i8* %v4_c9a0, align 1
  %v0_c9a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c9a4 = trunc i32 %v0_c9a4 to i8
  %v2_c9a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9a4 = add i32 %v2_c9a4, 44
  %v4_c9a4 = inttoptr i32 %v3_c9a4 to i8*
  store i8 %v1_c9a4, i8* %v4_c9a4, align 1
  %v0_c9a8 = call i32 @function_eccc()
  store i32 %v0_c9a8, i32* %r0.global-to-local, align 4
  %v2_c9b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9b0 = add i32 %v2_c9b0, 56
  %v4_c9b0 = inttoptr i32 %v3_c9b0 to i8*
  store i8 1, i8* %v4_c9b0, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c9c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_c9c0 = add i32 %v1_c9c0, 48
  %v3_c9c0 = inttoptr i32 %v2_c9c0 to i32*
  store i32 %v0_c9a8, i32* %v3_c9c0, align 4
  %v0_c9c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c9c4 = trunc i32 %v0_c9c4 to i8
  %v2_c9c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9c4 = add i32 %v2_c9c4, 58
  %v4_c9c4 = inttoptr i32 %v3_c9c4 to i8*
  store i8 %v1_c9c4, i8* %v4_c9c4, align 1
  %v0_c9c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c9c8 = trunc i32 %v0_c9c8 to i8
  %v2_c9c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9c8 = add i32 %v2_c9c8, 59
  %v4_c9c8 = inttoptr i32 %v3_c9c8 to i8*
  store i8 %v1_c9c8, i8* %v4_c9c8, align 1
  %v0_c9cc = load i32, i32* %ip.global-to-local, align 4
  %v1_c9cc = load i32, i32* %r4.global-to-local, align 4
  %v2_c9cc = add i32 %v1_c9cc, 52
  %v3_c9cc = inttoptr i32 %v2_c9cc to i32*
  store i32 %v0_c9cc, i32* %v3_c9cc, align 4
  %v0_c9d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c9d0 = trunc i32 %v0_c9d0 to i8
  %v2_c9d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9d0 = add i32 %v2_c9d0, 57
  %v4_c9d0 = inttoptr i32 %v3_c9d0 to i8*
  store i8 %v1_c9d0, i8* %v4_c9d0, align 1
  %v3_c9d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9d4, i32* %r3.global-to-local, align 4
  %v1_c9d8 = add i32 %v3_c9d4, 1
  store i32 %v1_c9d8, i32* @r4, align 4
  %v0_c9dc = load i32, i32* @sl, align 4
  %v9_c9dc = icmp eq i32 %v0_c9dc, %v1_c9d8
  store i1 %v9_c9dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c9d8, i32* %stack_var_-40, align 4
  %v8_c9e4 = icmp sgt i32 %v0_c9dc, %v1_c9d8
  br i1 %v8_c9e4, label %dec_label_pc_c7f8, label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %bb76, %dec_label_pc_c70c
  %v0_c9e8 = phi i32 [ %v0_c738, %dec_label_pc_c70c ], [ %v0_c9dc, %bb76 ]
  %v2_c9e8 = icmp eq i32 %v0_c9e8, 0
  store i1 %v2_c9e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cba0 = icmp eq i32 %v3_c728, 65535
  %v2_cc1c = icmp eq i32 %v1_c734, 0
  %v2_ca24 = icmp eq i32 %v6_c6c0, -1
  %v7_ca24 = icmp eq i32 %v6_c6c0, -1
  br label %dec_label_pc_c9f0.outer

dec_label_pc_c9f0.outer:                          ; preds = %dec_label_pc_cb1c, %dec_label_pc_c9e8
  %v1_c9f0.ph.in = phi i32 [ %v0_cb10, %dec_label_pc_cb1c ], [ %v0_c9e8, %dec_label_pc_c9e8 ]
  %v0_c9f0.ph = phi i1 [ %v2_cb1c, %dec_label_pc_cb1c ], [ %v2_c9e8, %dec_label_pc_c9e8 ]
  %v1_c9f0.ph = icmp slt i32 %v1_c9f0.ph.in, 0
  %v4_c9f0 = or i1 %v1_c9f0.ph, %v0_c9f0.ph
  br label %dec_label_pc_c9f0

dec_label_pc_c9f0:                                ; preds = %dec_label_pc_c9f0.outer, %dec_label_pc_c9f0
  br i1 %v4_c9f0, label %dec_label_pc_c9f0, label %dec_label_pc_c9f4

dec_label_pc_c9f4:                                ; preds = %dec_label_pc_c9f0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ca00

dec_label_pc_ca00:                                ; preds = %dec_label_pc_ca7c, %dec_label_pc_c9f4
  %v1_ca10 = phi i32 [ %v1_cb0c, %dec_label_pc_ca7c ], [ 0, %dec_label_pc_c9f4 ]
  %v5_ca04 = mul i32 %v1_ca10, 24
  %v1_ca08 = load i32, i32* @r8, align 4
  %v2_ca08 = add i32 %v1_ca08, %v5_ca04
  store i32 %v2_ca08, i32* %r3.global-to-local, align 4
  %v1_ca0c = add i32 %v2_ca08, 20
  %v2_ca0c = inttoptr i32 %v1_ca0c to i8*
  %v3_ca0c = load i8, i8* %v2_ca0c, align 1
  %v4_ca0c = zext i8 %v3_ca0c to i32
  store i32 %v4_ca0c, i32* %r2.global-to-local, align 4
  %v0_ca10 = load i32, i32* %fp.global-to-local, align 4
  %v4_ca10 = mul i32 %v1_ca10, 4
  %v5_ca10 = add i32 %v0_ca10, %v4_ca10
  %v6_ca10 = inttoptr i32 %v5_ca10 to i32*
  %v7_ca10 = load i32, i32* %v6_ca10, align 4
  store i32 %v7_ca10, i32* @r5, align 4
  %v7_ca14 = icmp eq i8 %v3_ca0c, 31
  store i1 %v7_ca14, i1* %cpsr_z.global-to-local, align 1
  %v1_ca18 = add i32 %v7_ca10, 20
  store i32 %v1_ca18, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_ca0c, 32
  br i1 %tmp85, label %dec_label_pc_cb28, label %dec_label_pc_ca20

dec_label_pc_ca20:                                ; preds = %dec_label_pc_ca00
  store i32 %v6_c6c0, i32* %r0.global-to-local, align 4
  store i1 %v7_ca24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ca24, label %dec_label_pc_cb90, label %dec_label_pc_ca2c

dec_label_pc_ca2c:                                ; preds = %dec_label_pc_cb28, %dec_label_pc_ca20
  store i32 %v3_c728, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cba0, label %dec_label_pc_cbac, label %dec_label_pc_ca40

dec_label_pc_ca40:                                ; preds = %dec_label_pc_cb90.dec_label_pc_ca40_crit_edge, %dec_label_pc_ca2c
  %v1_ca44 = phi i32 [ %v1_ca44.pre, %dec_label_pc_cb90.dec_label_pc_ca40_crit_edge ], [ 65535, %dec_label_pc_ca2c ]
  store i32 %v3_c72c, i32* %r3.global-to-local, align 4
  %v9_ca44 = icmp eq i32 %v3_c72c, %v1_ca44
  store i1 %v9_ca44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ca44, label %dec_label_pc_cbc8, label %dec_label_pc_ca4c

dec_label_pc_ca4c:                                ; preds = %dec_label_pc_cbac.dec_label_pc_ca4c_crit_edge, %dec_label_pc_ca40
  %v1_ca50 = phi i32 [ %v1_ca50.pre, %dec_label_pc_cbac.dec_label_pc_ca4c_crit_edge ], [ %v1_ca44, %dec_label_pc_ca40 ]
  store i32 %v3_c730, i32* %ip.global-to-local, align 4
  %v9_ca50 = icmp eq i32 %v3_c730, %v1_ca50
  store i1 %v9_ca50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ca50, label %dec_label_pc_cbe4, label %dec_label_pc_ca58

dec_label_pc_ca58:                                ; preds = %dec_label_pc_cbc8.dec_label_pc_ca58_crit_edge, %dec_label_pc_ca4c
  %v1_ca5c = phi i32 [ %v1_ca5c.pre, %dec_label_pc_cbc8.dec_label_pc_ca58_crit_edge ], [ %v1_ca50, %dec_label_pc_ca4c ]
  store i32 %v5_c5fc, i32* %r0.global-to-local, align 4
  %v9_ca5c = icmp eq i32 %v5_c5fc, %v1_ca5c
  store i1 %v9_ca5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ca5c, label %dec_label_pc_cc00, label %dec_label_pc_ca64

dec_label_pc_ca64:                                ; preds = %dec_label_pc_cbe4.dec_label_pc_ca64_crit_edge, %dec_label_pc_ca58
  %v1_ca68 = phi i32 [ %v1_ca68.pre, %dec_label_pc_cbe4.dec_label_pc_ca64_crit_edge ], [ %v1_ca5c, %dec_label_pc_ca58 ]
  store i32 %v6_c614, i32* %r2.global-to-local, align 4
  %v9_ca68 = icmp eq i32 %v6_c614, %v1_ca68
  store i1 %v9_ca68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ca68, label %dec_label_pc_cc14, label %dec_label_pc_ca70

dec_label_pc_ca70:                                ; preds = %dec_label_pc_cc00, %dec_label_pc_ca64
  store i32 %v1_c734, i32* %r3.global-to-local, align 4
  store i1 %v2_cc1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cc1c, label %dec_label_pc_ca7c, label %dec_label_pc_cc28

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca70, %dec_label_pc_cc14, %dec_label_pc_cc28
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ca80 = load i32, i32* %r7.global-to-local, align 4
  %v1_ca80 = trunc i32 %v0_ca80 to i8
  %v2_ca80 = load i32, i32* @r5, align 4
  %v3_ca80 = add i32 %v2_ca80, 10
  %v4_ca80 = inttoptr i32 %v3_ca80 to i8*
  store i8 %v1_ca80, i8* %v4_ca80, align 1
  %v0_ca84 = load i32, i32* %r7.global-to-local, align 4
  %v1_ca84 = trunc i32 %v0_ca84 to i8
  %v2_ca84 = load i32, i32* @r5, align 4
  %v3_ca84 = add i32 %v2_ca84, 11
  %v4_ca84 = inttoptr i32 %v3_ca84 to i8*
  store i8 %v1_ca84, i8* %v4_ca84, align 1
  %v0_ca88 = load i32, i32* @r5, align 4
  store i32 %v0_ca88, i32* @r0, align 4
  %v2_ca8c = call i32 @function_d3f8(i32 %v0_ca88, i32 20)
  %v3_ca8c = trunc i32 %v2_ca8c to i8
  %v4_ca9027 = udiv i32 %v2_ca8c, 256
  %v1_ca94 = trunc i32 %v4_ca9027 to i8
  %v2_ca94 = load i32, i32* @r5, align 4
  %v3_ca94 = add i32 %v2_ca94, 11
  %v4_ca94 = inttoptr i32 %v3_ca94 to i8*
  store i8 %v1_ca94, i8* %v4_ca94, align 1
  %v3_ca98 = load i32, i32* @r5, align 4
  %v4_ca98 = add i32 %v3_ca98, 10
  %v5_ca98 = inttoptr i32 %v4_ca98 to i8*
  store i8 %v3_ca8c, i8* %v5_ca98, align 1
  %v0_ca9c = load i32, i32* @r6, align 4
  store i32 %v0_ca9c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_caa8 = load i32, i32* %r7.global-to-local, align 4
  %v1_caa8 = trunc i32 %v0_caa8 to i8
  %v3_caa8 = add i32 %v0_ca9c, 16
  %v4_caa8 = inttoptr i32 %v3_caa8 to i8*
  store i8 %v1_caa8, i8* %v4_caa8, align 1
  %v0_caac = load i32, i32* %r7.global-to-local, align 4
  %v1_caac = trunc i32 %v0_caac to i8
  %v2_caac = load i32, i32* @r6, align 4
  %v3_caac = add i32 %v2_caac, 17
  %v4_caac = inttoptr i32 %v3_caac to i8*
  store i8 %v1_caac, i8* %v4_caac, align 1
  %v0_cab0 = load i32, i32* @r5, align 4
  store i32 %v0_cab0, i32* %r0.global-to-local, align 4
  %v4_cab4 = call i32 @function_d454(i32 %v0_cab0, i32 %v0_ca9c, i32 10240, i32 40)
  %v5_cab4 = trunc i32 %v4_cab4 to i8
  store i32 %v4_cab4, i32* %r0.global-to-local, align 4
  %v4_cab828 = udiv i32 %v4_cab4, 256
  %v1_cabc = trunc i32 %v4_cab828 to i8
  %v2_cabc = load i32, i32* @r6, align 4
  %v3_cabc = add i32 %v2_cabc, 17
  %v4_cabc = inttoptr i32 %v3_cabc to i8*
  store i8 %v1_cabc, i8* %v4_cabc, align 1
  %v3_cac0 = load i32, i32* @r6, align 4
  %v4_cac0 = add i32 %v3_cac0, 16
  %v5_cac0 = inttoptr i32 %v4_cac0 to i8*
  store i8 %v5_cab4, i8* %v5_cac0, align 1
  %v3_cac4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cac4, i32* %r3.global-to-local, align 4
  %v0_cac8 = load i32, i32* @r5, align 4
  %v1_cac8 = add i32 %v0_cac8, 20
  %v2_cac8 = inttoptr i32 %v1_cac8 to i32*
  %v3_cac8 = load i32, i32* %v2_cac8, align 4
  %v3_cad0 = udiv i32 %v3_cac8, 65536
  store i32 %v3_cad0, i32* %r2.global-to-local, align 4
  %v5_cad4 = mul i32 %v3_cac4, 24
  %v1_cad8 = load i32, i32* @r8, align 4
  %v2_cad8 = add i32 %v1_cad8, %v5_cad4
  store i32 %v2_cad8, i32* %ip.global-to-local, align 4
  %v3_cadc26 = udiv i32 %v3_cac8, 16777216
  %v1_cae0 = trunc i32 %v3_cadc26 to i8
  %v3_cae0 = add i32 %v2_cad8, 3
  %v4_cae0 = inttoptr i32 %v3_cae0 to i8*
  store i8 %v1_cae0, i8* %v4_cae0, align 1
  %v0_cae4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cae4 = trunc i32 %v0_cae4 to i8
  %v2_cae4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cae4 = add i32 %v2_cae4, 2
  %v4_cae4 = inttoptr i32 %v3_cae4 to i8*
  store i8 %v1_cae4, i8* %v4_cae4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_caec = load i32, i32* @r5, align 4
  store i32 %v0_caec, i32* %r1.global-to-local, align 4
  %v0_caf0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_caf0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cafc = load i32, i32* %ip.global-to-local, align 4
  %v6_cb04 = inttoptr i32 %v0_caec to i32*
  %v7_cb04 = call i32 @function_1115c(i32 %v0_caf0, i32* %v6_cb04, i32 60, i32 16384, i32 %v0_cafc, i32 16)
  %v3_cb08 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb08, i32* %r3.global-to-local, align 4
  %v1_cb0c = add i32 %v3_cb08, 1
  store i32 %v1_cb0c, i32* %r0.global-to-local, align 4
  %v0_cb10 = load i32, i32* @sl, align 4
  %v9_cb10 = icmp eq i32 %v0_cb10, %v1_cb0c
  store i1 %v9_cb10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb0c, i32* %stack_var_-40, align 4
  %v8_cb18 = icmp sgt i32 %v0_cb10, %v1_cb0c
  br i1 %v8_cb18, label %dec_label_pc_ca00, label %dec_label_pc_cb1c

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_ca7c
  %v2_cb1c = icmp eq i32 %v0_cb10, 0
  store i1 %v2_cb1c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c9f0.outer

dec_label_pc_cb28:                                ; preds = %dec_label_pc_ca00
  %v1_cb28 = add i32 %v2_ca08, 16
  %v2_cb28 = inttoptr i32 %v1_cb28 to i32*
  %v3_cb28 = load i32, i32* %v2_cb28, align 4
  store i32 %v3_cb28, i32* %r4.global-to-local, align 4
  %v0_cb2c = call i32 @function_eccc()
  store i32 %v0_cb2c, i32* %r0.global-to-local, align 4
  %v3_cb30 = load i32, i32* %stack_var_-40, align 4
  %v5_cb38 = mul i32 %v3_cb30, 24
  %v0_cb3c = load i32, i32* %r4.global-to-local, align 4
  %v1_cb40 = load i32, i32* @r8, align 4
  %v2_cb40 = add i32 %v1_cb40, %v5_cb38
  store i32 %v2_cb40, i32* %r1.global-to-local, align 4
  %v1_cb44 = and i32 %v0_cb3c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_cb44, i32* %r3.global-to-local, align 4
  %v1_cb3c = udiv i32 %v0_cb3c, 256
  %v3_cb48 = and i32 %v1_cb3c, 65280
  store i32 %v3_cb48, i32* %r2.global-to-local, align 4
  %v3_cb4c = mul i32 %v0_cb3c, 16777216
  store i32 %v3_cb4c, i32* %ip.global-to-local, align 4
  %v1_cb50 = add i32 %v2_cb40, 20
  %v2_cb50 = inttoptr i32 %v1_cb50 to i8*
  %v3_cb50 = load i8, i8* %v2_cb50, align 1
  %v4_cb50 = zext i8 %v3_cb50 to i32
  %v4_cb54 = mul i32 %v1_cb44, 256
  %v5_cb54 = or i32 %v4_cb54, %v3_cb4c
  store i32 %v5_cb54, i32* %ip.global-to-local, align 4
  %v4_cb58 = udiv i32 %v0_cb3c, 16777216
  %v5_cb58 = or i32 %v3_cb48, %v4_cb58
  %v2_cb5c = or i32 %v5_cb58, %v5_cb54
  %v7_cb60 = lshr i32 %v0_cb2c, %v4_cb50
  %v8_cb60 = add i32 %v7_cb60, %v2_cb5c
  store i32 %v8_cb60, i32* %r2.global-to-local, align 4
  %v3_cb6c = mul i32 %v8_cb60, 16777216
  %v1_cb64 = mul i32 %v8_cb60, 256
  %v4_cb70 = and i32 %v1_cb64, 16711680
  %v5_cb70 = or i32 %v4_cb70, %v3_cb6c
  store i32 %v5_cb70, i32* %r1.global-to-local, align 4
  store i32 %v6_c6c0, i32* %r0.global-to-local, align 4
  %v2_cb80 = call i32 @llvm.bswap.i32(i32 %v8_cb60)
  store i32 %v2_cb80, i32* %r3.global-to-local, align 4
  store i1 %v7_ca24, i1* %cpsr_z.global-to-local, align 1
  %v1_cb88 = load i32, i32* @r5, align 4
  %v2_cb88 = add i32 %v1_cb88, 16
  %v3_cb88 = inttoptr i32 %v2_cb88 to i32*
  store i32 %v2_cb80, i32* %v3_cb88, align 4
  br i1 %v2_ca24, label %dec_label_pc_cb90, label %dec_label_pc_ca2c

dec_label_pc_cb90:                                ; preds = %dec_label_pc_cb28, %dec_label_pc_ca20
  %v0_cb90 = call i32 @function_eccc()
  store i32 %v0_cb90, i32* %r0.global-to-local, align 4
  store i32 %v3_c728, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cba0, i1* %cpsr_z.global-to-local, align 1
  %v1_cba4 = load i32, i32* @r5, align 4
  %v2_cba4 = add i32 %v1_cba4, 12
  %v3_cba4 = inttoptr i32 %v2_cba4 to i32*
  store i32 %v0_cb90, i32* %v3_cba4, align 4
  br i1 %v3_cba0, label %dec_label_pc_cbac, label %dec_label_pc_cb90.dec_label_pc_ca40_crit_edge

dec_label_pc_cb90.dec_label_pc_ca40_crit_edge:    ; preds = %dec_label_pc_cb90
  %v1_ca44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ca40

dec_label_pc_cbac:                                ; preds = %dec_label_pc_cb90, %dec_label_pc_ca2c
  %v0_cbac = call i32 @function_eccc()
  %v1_cbac = trunc i32 %v0_cbac to i8
  store i32 %v0_cbac, i32* %r0.global-to-local, align 4
  %v4_cbb029 = udiv i32 %v0_cbac, 256
  %v1_cbb4 = trunc i32 %v4_cbb029 to i8
  %v2_cbb4 = load i32, i32* @r5, align 4
  %v3_cbb4 = add i32 %v2_cbb4, 5
  %v4_cbb4 = inttoptr i32 %v3_cbb4 to i8*
  store i8 %v1_cbb4, i8* %v4_cbb4, align 1
  store i32 %v3_c72c, i32* %r3.global-to-local, align 4
  %v1_cbbc = load i32, i32* @r4, align 4
  %v9_cbbc = icmp eq i32 %v3_c72c, %v1_cbbc
  store i1 %v9_cbbc, i1* %cpsr_z.global-to-local, align 1
  %v3_cbc0 = load i32, i32* @r5, align 4
  %v4_cbc0 = add i32 %v3_cbc0, 4
  %v5_cbc0 = inttoptr i32 %v4_cbc0 to i8*
  store i8 %v1_cbac, i8* %v5_cbc0, align 1
  %v0_cbc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbc4, label %dec_label_pc_cbc8, label %dec_label_pc_cbac.dec_label_pc_ca4c_crit_edge

dec_label_pc_cbac.dec_label_pc_ca4c_crit_edge:    ; preds = %dec_label_pc_cbac
  %v1_ca50.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ca4c

dec_label_pc_cbc8:                                ; preds = %dec_label_pc_cbac, %dec_label_pc_ca40
  %v0_cbc8 = call i32 @function_eccc()
  %v1_cbc8 = trunc i32 %v0_cbc8 to i8
  store i32 %v0_cbc8, i32* %r0.global-to-local, align 4
  store i32 %v3_c730, i32* %ip.global-to-local, align 4
  %v4_cbd0 = sdiv i32 %v0_cbc8, 256
  store i32 %v4_cbd0, i32* %r3.global-to-local, align 4
  %v1_cbd4 = load i32, i32* @r4, align 4
  %v9_cbd4 = icmp eq i32 %v3_c730, %v1_cbd4
  store i1 %v9_cbd4, i1* %cpsr_z.global-to-local, align 1
  %v3_cbd8 = load i32, i32* @r5, align 4
  %v4_cbd8 = add i32 %v3_cbd8, 20
  %v5_cbd8 = inttoptr i32 %v4_cbd8 to i8*
  store i8 %v1_cbc8, i8* %v5_cbd8, align 1
  %v0_cbdc = load i32, i32* %r3.global-to-local, align 4
  %v1_cbdc = trunc i32 %v0_cbdc to i8
  %v2_cbdc = load i32, i32* @r6, align 4
  %v3_cbdc = add i32 %v2_cbdc, 1
  %v4_cbdc = inttoptr i32 %v3_cbdc to i8*
  store i8 %v1_cbdc, i8* %v4_cbdc, align 1
  %v0_cbe0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbe0, label %dec_label_pc_cbe4, label %dec_label_pc_cbc8.dec_label_pc_ca58_crit_edge

dec_label_pc_cbc8.dec_label_pc_ca58_crit_edge:    ; preds = %dec_label_pc_cbc8
  %v1_ca5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ca58

dec_label_pc_cbe4:                                ; preds = %dec_label_pc_cbc8, %dec_label_pc_ca4c
  %v0_cbe4 = call i32 @function_eccc()
  %v1_cbe4 = trunc i32 %v0_cbe4 to i8
  %v4_cbe8 = sdiv i32 %v0_cbe4, 256
  store i32 %v4_cbe8, i32* %r3.global-to-local, align 4
  %v3_cbec = load i32, i32* @r6, align 4
  %v4_cbec = add i32 %v3_cbec, 2
  %v5_cbec = inttoptr i32 %v4_cbec to i8*
  store i8 %v1_cbe4, i8* %v5_cbec, align 1
  store i32 %v5_c5fc, i32* %r0.global-to-local, align 4
  %v1_cbf4 = load i32, i32* @r4, align 4
  %v9_cbf4 = icmp eq i32 %v5_c5fc, %v1_cbf4
  store i1 %v9_cbf4, i1* %cpsr_z.global-to-local, align 1
  %v0_cbf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cbf8 = trunc i32 %v0_cbf8 to i8
  %v2_cbf8 = load i32, i32* @r6, align 4
  %v3_cbf8 = add i32 %v2_cbf8, 3
  %v4_cbf8 = inttoptr i32 %v3_cbf8 to i8*
  store i8 %v1_cbf8, i8* %v4_cbf8, align 1
  %v0_cbfc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbfc, label %dec_label_pc_cc00, label %dec_label_pc_cbe4.dec_label_pc_ca64_crit_edge

dec_label_pc_cbe4.dec_label_pc_ca64_crit_edge:    ; preds = %dec_label_pc_cbe4
  %v1_ca68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ca64

dec_label_pc_cc00:                                ; preds = %dec_label_pc_cbe4, %dec_label_pc_ca58
  %v0_cc00 = call i32 @function_eccc()
  store i32 %v0_cc00, i32* %r0.global-to-local, align 4
  store i32 %v6_c614, i32* %r2.global-to-local, align 4
  %v1_cc08 = load i32, i32* @r4, align 4
  %v9_cc08 = icmp eq i32 %v6_c614, %v1_cc08
  store i1 %v9_cc08, i1* %cpsr_z.global-to-local, align 1
  %v1_cc0c = load i32, i32* @r6, align 4
  %v2_cc0c = add i32 %v1_cc0c, 4
  %v3_cc0c = inttoptr i32 %v2_cc0c to i32*
  store i32 %v0_cc00, i32* %v3_cc0c, align 4
  br i1 %v9_cc08, label %dec_label_pc_cc14, label %dec_label_pc_ca70

dec_label_pc_cc14:                                ; preds = %dec_label_pc_cc00, %dec_label_pc_ca64
  %v0_cc14 = call i32 @function_eccc()
  store i32 %v0_cc14, i32* %r0.global-to-local, align 4
  store i32 %v1_c734, i32* %r3.global-to-local, align 4
  store i1 %v2_cc1c, i1* %cpsr_z.global-to-local, align 1
  %v1_cc20 = load i32, i32* @r6, align 4
  %v2_cc20 = add i32 %v1_cc20, 8
  %v3_cc20 = inttoptr i32 %v2_cc20 to i32*
  store i32 %v0_cc14, i32* %v3_cc20, align 4
  br i1 %v2_cc1c, label %dec_label_pc_ca7c, label %dec_label_pc_cc28

dec_label_pc_cc28:                                ; preds = %dec_label_pc_ca70, %dec_label_pc_cc14
  %v0_cc28 = call i32 @function_eccc()
  %v1_cc28 = trunc i32 %v0_cc28 to i8
  store i32 %v0_cc28, i32* %r0.global-to-local, align 4
  %v4_cc2c = sdiv i32 %v0_cc28, 256
  store i32 %v4_cc2c, i32* %r3.global-to-local, align 4
  %v1_cc30 = trunc i32 %v4_cc2c to i8
  %v2_cc30 = load i32, i32* @r6, align 4
  %v3_cc30 = add i32 %v2_cc30, 19
  %v4_cc30 = inttoptr i32 %v3_cc30 to i8*
  store i8 %v1_cc30, i8* %v4_cc30, align 1
  %v3_cc34 = load i32, i32* @r6, align 4
  %v4_cc34 = add i32 %v3_cc34, 18
  %v5_cc34 = inttoptr i32 %v4_cc34 to i8*
  store i8 %v1_cc28, i8* %v5_cc34, align 1
  br label %dec_label_pc_ca7c

dec_label_pc_cc3c:                                ; preds = %dec_label_pc_c6e4
  %v0_cc3c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cc3c, i32* %r0.global-to-local, align 4
  %v1_cc40 = call i32 @function_108c4(i32 %v0_cc3c)
  store i32 %v1_cc40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cc44

dec_label_pc_cc44:                                ; preds = %dec_label_pc_c50c, %dec_label_pc_cc3c
  %v29_cc48 = phi i32 [ %v3_c6d4, %dec_label_pc_c50c ], [ %v1_cc40, %dec_label_pc_cc3c ]
  store i32 %v3_c50c, i32* %r4.global-to-local, align 4
  store i32 %v12_c50c, i32* %r7.global-to-local, align 4
  ret i32 %v29_cc48

; uselistorder directives
  uselistorder i32 %v4_cc2c, { 1, 0 }
  uselistorder i32 %v0_cc28, { 0, 2, 1 }
  uselistorder i32 %v0_cbc8, { 0, 2, 1 }
  uselistorder i32 %v0_cbac, { 0, 2, 1 }
  uselistorder i32 %v2_cb80, { 1, 0 }
  uselistorder i32 %v8_cb60, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cb4c, { 1, 0 }
  uselistorder i32 %v0_cb3c, { 1, 0, 2, 3 }
  uselistorder i1 %v2_cb1c, { 1, 0 }
  uselistorder i32 %v0_cb10, { 1, 2, 3, 0 }
  uselistorder i32 %v1_cb0c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cab4, { 0, 2, 1 }
  uselistorder i32 %v0_ca9c, { 1, 0, 2 }
  uselistorder i1 %v7_ca24, { 2, 1, 0 }
  uselistorder i1 %v2_cc1c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cba0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c9d8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c7f0, { 1, 0 }
  uselistorder i32 %v1_c7d0, { 1, 0 }
  uselistorder i32 %v1_c7c0, { 1, 0 }
  uselistorder i32 %v1_c7bc, { 1, 0 }
  uselistorder i32 %v1_c7b8, { 1, 0 }
  uselistorder i32 %v3_c7a8, { 1, 0 }
  uselistorder i32 %v1_c798, { 1, 0 }
  uselistorder i32 %v1_c790, { 1, 0 }
  uselistorder i32 %v1_c76c, { 1, 0 }
  uselistorder i32 %v1_c768, { 1, 0 }
  uselistorder i32 %v1_c760, { 1, 0 }
  uselistorder i32 %v1_c734, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c728, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c724, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c720, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c704, { 1, 0 }
  uselistorder i1 %v7_c6d8, { 1, 0 }
  uselistorder i32 %v3_c6d4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c6c0, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_c614, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c5fc, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c5ac, { 1, 0 }
  uselistorder i32 %v5_c544, { 1, 0 }
  uselistorder i32 %v1_c510, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder i32 41, { 4, 0, 2, 5, 1, 6, 3, 7 }
  uselistorder i32 254, { 0, 1, 2, 3, 8, 4, 9, 5, 10, 6, 11, 7, 12 }
  uselistorder label %dec_label_pc_cc44, { 1, 0 }
  uselistorder label %dec_label_pc_cc28, { 1, 0 }
  uselistorder label %dec_label_pc_ca7c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c9f0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_cc50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cc50:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_cc50 = load i32, i32* @fp, align 4
  %v1_cc54 = urem i32 %arg1, 256
  store i32 %v1_cc54, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_cc6c = urem i32 %arg3, 256
  store i32 %v1_cc6c, i32* @r4, align 4
  %v2_cc70 = call i32 @function_114c4(i32 %v1_cc54, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_cc70, i32* @sl, align 4
  %v0_cc7c = load i32, i32* @r7, align 4
  %v2_cc80 = call i32 @function_114c4(i32 %v0_cc7c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_cc8c = load i32, i32* @r6, align 4
  store i32 %v0_cc8c, i32* %r1.global-to-local, align 4
  store i32 %v2_cc80, i32* @sb, align 4
  %v0_cc9c = load i32, i32* @r4, align 4
  %v4_cca0 = inttoptr i32 %v0_cc8c to i32*
  %v5_cca0 = call i32 @function_a398(i32 %v0_cc9c, i32* %v4_cca0, i32 7, i32 65535)
  %v3_cca8 = urem i32 %v5_cca0, 65536
  %v0_ccac = load i32, i32* @r6, align 4
  store i32 %v0_ccac, i32* %r1.global-to-local, align 4
  %v0_ccb4 = load i32, i32* @r5, align 4
  %v0_ccb8 = load i32, i32* @r4, align 4
  %v5_ccc0 = inttoptr i32 %v0_ccac to i32*
  %v6_ccc0 = call i32 @function_a398(i32 %v0_ccb8, i32* %v5_ccc0, i32 6, i32 %v0_ccb4)
  %v0_ccc4 = load i32, i32* @r6, align 4
  store i32 %v0_ccc4, i32* %r1.global-to-local, align 4
  %v3_ccc8 = mul i32 %v6_ccc0, 65536
  store i32 %v3_ccc8, i32* %fp.global-to-local, align 4
  %v0_ccd4 = load i32, i32* @r4, align 4
  %v4_ccd8 = inttoptr i32 %v0_ccc4 to i32*
  %v5_ccd8 = call i32 @function_a398(i32 %v0_ccd4, i32* %v4_ccd8, i32 0, i32 512)
  %v0_cce4 = load i32, i32* @r6, align 4
  store i32 %v0_cce4, i32* %r1.global-to-local, align 4
  %v0_cce8 = load i32, i32* @r4, align 4
  %v3_ccf0 = urem i32 %v5_ccd8, 65536
  store i32 %v3_ccf0, i32* @r6, align 4
  %v4_ccf4 = inttoptr i32 %v0_cce4 to i32*
  %v5_ccf4 = call i32 @function_a398(i32 %v0_cce8, i32* %v4_ccf4, i32 1, i32 1)
  %v0_ccf8 = load i32, i32* %fp.global-to-local, align 4
  %v3_ccf8 = udiv i32 %v0_ccf8, 65536
  %v1_cd00 = load i32, i32* @r5, align 4
  %v9_cd00 = icmp eq i32 %v3_ccf8, %v1_cd00
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_cd00, label %dec_label_pc_cd28, label %bb

bb:                                               ; preds = %dec_label_pc_cc50
  %v2_cd14 = mul nuw nsw i32 %v3_ccf8, 256
  %v4_cd18 = and i32 %v2_cd14, 65280
  %v1_cd1c = urem i32 %v5_ccf4, 256
  store i32 %v1_cd1c, i32* @r8, align 4
  %v5_cd20 = udiv i32 %v0_ccf8, 16777216
  %v6_cd20 = or i32 %v4_cd18, %v5_cd20
  br label %dec_label_pc_cd34

dec_label_pc_cd28:                                ; preds = %dec_label_pc_cc50
  %v1_cd1c7 = urem i32 %v5_ccf4, 256
  store i32 %v1_cd1c7, i32* @r8, align 4
  %v0_cd28 = call i32 @function_eccc()
  %v3_cd30 = urem i32 %v0_cd28, 65536
  br label %dec_label_pc_cd34

dec_label_pc_cd34:                                ; preds = %bb, %dec_label_pc_cd28
  %storemerge17 = phi i32 [ %v6_cd20, %bb ], [ %v3_cd30, %dec_label_pc_cd28 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_cd34 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_cd34, 1
  br i1 %tmp41, label %dec_label_pc_cedc.preheader, label %dec_label_pc_cd3c

dec_label_pc_cedc.preheader:                      ; preds = %dec_label_pc_ce38, %dec_label_pc_cd34
  %storemerge3.in12.ph = phi i32 [ %v0_cd34, %dec_label_pc_cd34 ], [ %v1_cd90, %dec_label_pc_ce38 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_cea4, label %dec_label_pc_cea8.lr.ph

dec_label_pc_cd3c:                                ; preds = %dec_label_pc_cd34
  store i32 %v3_cca8, i32* %r1.global-to-local, align 4
  %v3_cd40 = udiv i32 %v5_cca0, 256
  %v5_cd4c = trunc i32 %v3_cd40 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_cd64 = udiv i32 %v5_cca0, 65536
  store i32 %v3_cd64, i32* @r4, align 4
  %v4_cd74 = trunc i32 %v3_cd64 to i8
  store i8 %v4_cd74, i8* %stack_var_-80, align 1
  %v3_ce84 = icmp eq i32 %v3_cca8, 65535
  %v2_cdac = ptrtoint i32* %stack_var_-52 to i32
  %v3_cddc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_ce68

dec_label_pc_cd7c:                                ; preds = %dec_label_pc_ce68
  %v2_cd7c = load i8, i8* %stack_var_-80, align 1
  %v3_cd7c = sext i8 %v2_cd7c to i32
  store i32 %v3_cd7c, i32* %r1.global-to-local, align 4
  store i32 %v3_cd40, i32* @r4, align 4
  %v2_cd80 = load i32, i32* @r5, align 4
  %v3_cd80 = add i32 %v2_cd80, 2
  %v4_cd80 = inttoptr i32 %v3_cd80 to i8*
  store i8 %v5_cd4c, i8* %v4_cd80, align 1
  %v0_cd84 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd84 = trunc i32 %v0_cd84 to i8
  %v2_cd84 = load i32, i32* @r5, align 4
  %v3_cd84 = add i32 %v2_cd84, 3
  %v4_cd84 = inttoptr i32 %v3_cd84 to i8*
  store i8 %v1_cd84, i8* %v4_cd84, align 1
  br label %dec_label_pc_cd88

dec_label_pc_cd88:                                ; preds = %dec_label_pc_ce90, %dec_label_pc_cd7c
  %v1_cd90 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_cda0 = call i32 @function_111c0(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_cda8 = icmp eq i32 %v3_cda0, -1
  store i32 %v2_cdac, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_cdbc = load i32, i32* @sb, align 4
  %v3_cdbc = add i32 %v2_cdbc, %stack_var_-60.0
  %v4_cdbc = inttoptr i32 %v3_cdbc to i32*
  store i32 %v3_cda0, i32* %v4_cdbc, align 4
  br i1 %v7_cda8, label %dec_label_pc_cee8, label %dec_label_pc_cdc4

dec_label_pc_cdc4:                                ; preds = %dec_label_pc_cd88
  store i32 2, i32* %stack_var_-52, align 4
  %v4_cddc = call i32 @function_10ff0(i32 %v3_cda0, %sockaddr* %v3_cddc, i32 16)
  %v0_cde0 = load i32, i32* @r5, align 4
  %v1_cde0 = add i32 %v0_cde0, 20
  %v2_cde0 = inttoptr i32 %v1_cde0 to i8*
  %v3_cde0 = load i8, i8* %v2_cde0, align 1
  %tmp = icmp ugt i8 %v3_cde0, 31
  br i1 %tmp, label %dec_label_pc_ce38, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cdc4
  %v1_cdec = add i32 %v0_cde0, 16
  %v2_cdec = inttoptr i32 %v1_cdec to i32*
  %v3_cdec = load i32, i32* %v2_cdec, align 4
  store i32 %v3_cdec, i32* @r4, align 4
  %v0_cdf0 = call i32 @function_eccc()
  %v0_cdf4 = load i32, i32* @r4, align 4
  %v1_cdf8 = and i32 %v0_cdf4, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v1_cdf4 = udiv i32 %v0_cdf4, 256
  %v3_cdfc = and i32 %v1_cdf4, 65280
  %v3_ce00 = mul i32 %v0_cdf4, 16777216
  %v4_ce04 = mul i32 %v1_cdf8, 256
  %v5_ce04 = or i32 %v4_ce04, %v3_ce00
  store i32 %v5_ce04, i32* %r1.global-to-local, align 4
  %v4_ce08 = udiv i32 %v0_cdf4, 16777216
  %v5_ce08 = or i32 %v3_cdfc, %v4_ce08
  %v0_ce0c = load i32, i32* @r5, align 4
  %v1_ce0c = add i32 %v0_ce0c, 20
  %v2_ce0c = inttoptr i32 %v1_ce0c to i8*
  %v3_ce0c = load i8, i8* %v2_ce0c, align 1
  %v4_ce0c = zext i8 %v3_ce0c to i32
  %v2_ce10 = or i32 %v5_ce04, %v5_ce08
  %v7_ce14 = lshr i32 %v0_cdf0, %v4_ce0c
  %v8_ce14 = add i32 %v7_ce14, %v2_ce10
  %v3_ce20 = mul i32 %v8_ce14, 16777216
  %v1_ce24 = and i32 %v8_ce14, 65280
  %v4_ce28 = mul nuw nsw i32 %v1_ce24, 256
  %v5_ce28 = or i32 %v4_ce28, %v3_ce20
  store i32 %v5_ce28, i32* %r1.global-to-local, align 4
  %v2_ce30 = call i32 @llvm.bswap.i32(i32 %v8_ce14)
  %v2_ce34 = add i32 %v0_ce0c, 4
  %v3_ce34 = inttoptr i32 %v2_ce34 to i32*
  store i32 %v2_ce30, i32* %v3_ce34, align 4
  %v0_ce44.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_ce38

dec_label_pc_ce38:                                ; preds = %dec_label_pc_cdc4, %dec_label_pc_cdec
  %v0_ce44 = phi i32 [ %v0_cde0, %dec_label_pc_cdc4 ], [ %v0_ce44.pre, %dec_label_pc_cdec ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_ce40 = load i32, i32* @sb, align 4
  %v2_ce40 = add i32 %v1_ce40, %stack_var_-60.0
  %v3_ce40 = inttoptr i32 %v2_ce40 to i32*
  %v4_ce40 = load i32, i32* %v3_ce40, align 4
  store i32 %v0_ce44, i32* %r1.global-to-local, align 4
  %v3_ce48 = inttoptr i32 %v0_ce44 to %sockaddr*
  %v4_ce48 = call i32 @function_1101c(i32 %v4_ce40, %sockaddr* %v3_ce48, i32 16)
  %v1_ce54 = add i32 %stack_var_-60.0, 4
  %v1_ce58 = load i32, i32* @r7, align 4
  %v9_ce58 = icmp eq i32 %v1_cd90, %v1_ce58
  %v0_ce60 = load i32, i32* @r5, align 4
  %v1_ce60 = add i32 %v0_ce60, 24
  store i32 %v1_ce60, i32* @r5, align 4
  br i1 %v9_ce58, label %dec_label_pc_cedc.preheader, label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %dec_label_pc_ce38, %dec_label_pc_cd3c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_cd3c ], [ %v1_ce54, %dec_label_pc_ce38 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_cd3c ], [ %v1_cd90, %dec_label_pc_ce38 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_ce74 = call i32 @function_114c4(i32 65535, i32 1)
  store i32 %v3_cca8, i32* %r1.global-to-local, align 4
  %v2_ce88 = load i32, i32* @sl, align 4
  %v3_ce88 = add i32 %v2_ce88, %stack_var_-60.0
  %v4_ce88 = inttoptr i32 %v3_ce88 to i32*
  store i32 %v2_ce74, i32* %v4_ce88, align 4
  br i1 %v3_ce84, label %dec_label_pc_ce90, label %dec_label_pc_cd7c

dec_label_pc_ce90:                                ; preds = %dec_label_pc_ce68
  %v0_ce90 = call i32 @function_eccc()
  %v1_ce90 = trunc i32 %v0_ce90 to i8
  %v4_ce94 = sdiv i32 %v0_ce90, 256
  %v1_ce98 = trunc i32 %v4_ce94 to i8
  %v2_ce98 = load i32, i32* @r5, align 4
  %v3_ce98 = add i32 %v2_ce98, 3
  %v4_ce98 = inttoptr i32 %v3_ce98 to i8*
  store i8 %v1_ce98, i8* %v4_ce98, align 1
  %v3_ce9c = load i32, i32* @r5, align 4
  %v4_ce9c = add i32 %v3_ce9c, 2
  %v5_ce9c = inttoptr i32 %v4_ce9c to i8*
  store i8 %v1_ce90, i8* %v5_ce9c, align 1
  br label %dec_label_pc_cd88

dec_label_pc_cea4:                                ; preds = %dec_label_pc_cedc.loopexit, %dec_label_pc_cedc.preheader, %dec_label_pc_cee0.loopexit, %dec_label_pc_cea4
  br label %dec_label_pc_cea4

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cea8.lr.ph, %dec_label_pc_cee0.loopexit
  %v0_cea8 = load i32, i32* @r8, align 4
  %v2_cea8 = icmp eq i32 %v0_cea8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_cea8, label %dec_label_pc_ceb0, label %dec_label_pc_cef0

dec_label_pc_ceb0:                                ; preds = %dec_label_pc_cea8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_ceb8

dec_label_pc_ceb8:                                ; preds = %dec_label_pc_ceb8, %dec_label_pc_ceb0
  %v0_cec0 = phi i32 [ %v1_cec0, %dec_label_pc_ceb8 ], [ 0, %dec_label_pc_ceb0 ]
  %v0_ceb8 = phi i32 [ %v1_ced4, %dec_label_pc_ceb8 ], [ 0, %dec_label_pc_ceb0 ]
  %v1_ceb8 = load i32, i32* @sb, align 4
  %v2_ceb8 = add i32 %v1_ceb8, %v0_ceb8
  %v3_ceb8 = inttoptr i32 %v2_ceb8 to i32*
  %v4_ceb8 = load i32, i32* %v3_ceb8, align 4
  %v1_cebc = load i32, i32* @sl, align 4
  %v2_cebc = add i32 %v1_cebc, %v0_ceb8
  %v3_cebc = inttoptr i32 %v2_cebc to i32*
  %v4_cebc = load i32, i32* %v3_cebc, align 4
  store i32 %v4_cebc, i32* %r1.global-to-local, align 4
  %v1_cec0 = add i32 %v0_cec0, 1
  %v0_cec4 = load i32, i32* @r6, align 4
  %v4_cecc = inttoptr i32 %v4_cebc to i32*
  %v5_cecc = call i32 @function_11130(i32 %v4_ceb8, i32* %v4_cecc, i32 %v0_cec4, i32 16384)
  %v1_ced0 = load i32, i32* @r7, align 4
  %v9_ced0 = icmp eq i32 %v1_cec0, %v1_ced0
  %v0_ced4 = load i32, i32* @r4, align 4
  %v1_ced4 = add i32 %v0_ced4, 4
  store i32 %v1_ced4, i32* @r4, align 4
  br i1 %v9_ced0, label %dec_label_pc_cedc.loopexit, label %dec_label_pc_ceb8

dec_label_pc_cedc.loopexit:                       ; preds = %dec_label_pc_ceb8
  %tmp4247 = icmp slt i32 %v1_cec0, 1
  br i1 %tmp4247, label %dec_label_pc_cea4, label %dec_label_pc_cea8.lr.ph

dec_label_pc_cea8.lr.ph:                          ; preds = %dec_label_pc_cedc.preheader, %dec_label_pc_cedc.loopexit
  br label %dec_label_pc_cea8

dec_label_pc_cee0.loopexit:                       ; preds = %dec_label_pc_cef8
  %tmp42 = icmp slt i32 %v0_cf20, 1
  br i1 %tmp42, label %dec_label_pc_cea4, label %dec_label_pc_cea8

dec_label_pc_cee8:                                ; preds = %dec_label_pc_cd88
  store i32 %v24_cc50, i32* %fp.global-to-local, align 4
  ret i32 %v3_cda0

dec_label_pc_cef0:                                ; preds = %dec_label_pc_cea8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_cef8

dec_label_pc_cef8:                                ; preds = %dec_label_pc_cef8, %dec_label_pc_cef0
  %v0_cef8 = phi i32 [ %v1_cf24, %dec_label_pc_cef8 ], [ 0, %dec_label_pc_cef0 ]
  %v1_cef8 = load i32, i32* @sl, align 4
  %v2_cef8 = add i32 %v1_cef8, %v0_cef8
  %v3_cef8 = inttoptr i32 %v2_cef8 to i32*
  %v4_cef8 = load i32, i32* %v3_cef8, align 4
  store i32 %v4_cef8, i32* @r4, align 4
  %v0_cefc = load i32, i32* @r6, align 4
  store i32 %v0_cefc, i32* @r1, align 4
  %v1_cf04 = inttoptr i32 %v4_cef8 to i8*
  %v2_cf04 = call i32 @function_eea8(i8* %v1_cf04)
  %v0_cf08 = load i32, i32* @r5, align 4
  %v1_cf08 = add i32 %v0_cf08, 1
  store i32 %v1_cf08, i32* @r5, align 4
  %v0_cf0c = load i32, i32* @fp, align 4
  %v1_cf0c = load i32, i32* @sb, align 4
  %v2_cf0c = add i32 %v1_cf0c, %v0_cf0c
  %v3_cf0c = inttoptr i32 %v2_cf0c to i32*
  %v4_cf0c = load i32, i32* %v3_cf0c, align 4
  %v0_cf10 = load i32, i32* @r4, align 4
  store i32 %v0_cf10, i32* %r1.global-to-local, align 4
  %v0_cf14 = load i32, i32* @r6, align 4
  %v4_cf1c = inttoptr i32 %v0_cf10 to i32*
  %v5_cf1c = call i32 @function_11130(i32 %v4_cf0c, i32* %v4_cf1c, i32 %v0_cf14, i32 16384)
  %v0_cf20 = load i32, i32* @r5, align 4
  %v1_cf20 = load i32, i32* @r7, align 4
  %v9_cf20 = icmp eq i32 %v0_cf20, %v1_cf20
  %v0_cf24 = load i32, i32* @fp, align 4
  %v1_cf24 = add i32 %v0_cf24, 4
  store i32 %v1_cf24, i32* @fp, align 4
  br i1 %v9_cf20, label %dec_label_pc_cee0.loopexit, label %dec_label_pc_cef8

; uselistorder directives
  uselistorder i32 %v1_cf24, { 1, 0 }
  uselistorder i32 %v0_cf20, { 1, 0 }
  uselistorder i32 %v1_ced4, { 1, 0 }
  uselistorder i32 %v1_cec0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_ce44, { 1, 0 }
  uselistorder i32 %v8_ce14, { 1, 2, 0 }
  uselistorder i32 %v0_cdf4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cda0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_cd90, { 1, 2, 0 }
  uselistorder i32 %v3_cd64, { 1, 0 }
  uselistorder i32 %v3_cd40, { 1, 0 }
  uselistorder i32 %v3_cca8, { 0, 2, 1 }
  uselistorder i32 %v1_cc54, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder i32 (i8*)* @function_eea8, { 0, 1, 2, 6, 3, 4, 5 }
  uselistorder label %dec_label_pc_cea8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_cea8, { 1, 0 }
  uselistorder label %dec_label_pc_cea4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_ce38, { 1, 0 }
  uselistorder label %dec_label_pc_cd34, { 1, 0 }
}

define i32 @function_cf34(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cf34:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_cf34 = load i32, i32* @r4, align 4
  %v12_cf34 = load i32, i32* @r7, align 4
  %v1_cf38 = urem i32 %arg1, 256
  store i32 %v1_cf38, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_cf4c = urem i32 %arg3, 256
  store i32 %v1_cf4c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_cf54 = call i32 @function_114c4(i32 %v1_cf38, i32 4)
  %v0_cf58 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cf64 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_cf6c = inttoptr i32 %v0_cf58 to i32*
  %v6_cf6c = call i32 @function_a398(i32 %v0_cf64, i32* %v5_cf6c, i32 2, i32 0)
  %v1_cf78 = urem i32 %v6_cf6c, 256
  store i32 %v1_cf78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cf84 = load i32, i32* @r4, align 4
  %v0_cf88 = load i32, i32* @r5, align 4
  %v5_cf8c = trunc i32 %v6_cf6c to i8
  %v6_cf90 = inttoptr i32 %v0_cf88 to i32*
  %v7_cf90 = call i32 @function_a398(i32 %v0_cf84, i32* %v6_cf90, i32 3, i32 65535)
  %v0_cf94 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_cf90, i32* @r7, align 4
  %v0_cfa4 = load i32, i32* @r4, align 4
  %v4_cfa8 = inttoptr i32 %v0_cf94 to i32*
  %v5_cfa8 = call i32 @function_a398(i32 %v0_cfa4, i32* %v4_cfa8, i32 4, i32 64)
  %v1_cfb0 = urem i32 %v5_cfa8, 256
  store i32 %v1_cfb0, i32* %ip.global-to-local, align 4
  %v0_cfb4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cfc0 = load i32, i32* @r4, align 4
  %v5_cfc4 = trunc i32 %v5_cfa8 to i8
  %v6_cfc8 = inttoptr i32 %v0_cfb4 to i32*
  %v7_cfc8 = call i32 @function_a398(i32 %v0_cfc0, i32* %v6_cfc8, i32 5, i32 0)
  %v1_cfd4 = urem i32 %v7_cfc8, 256
  store i32 %v1_cfd4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cfe0 = load i32, i32* @r4, align 4
  %v0_cfe4 = load i32, i32* @r5, align 4
  %v5_cfec = inttoptr i32 %v0_cfe4 to i32*
  %v6_cfec = call i32 @function_a398(i32 %v0_cfe0, i32* %v5_cfec, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_cffc = load i32, i32* @r5, align 4
  store i32 %v6_cfec, i32* @r6, align 4
  %v0_d004 = load i32, i32* @r4, align 4
  %v4_d008 = inttoptr i32 %v0_cffc to i32*
  %v5_d008 = call i32 @function_a398(i32 %v0_d004, i32* %v4_d008, i32 7, i32 27015)
  store i32 %v5_d008, i32* @r4, align 4
  %v1_d014 = call i32 @function_f5e0(i32 29)
  %v3_d020 = call i32 @function_f4fc(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_d020, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d034 = call i32 @function_111c0(i32 2, i32 3, i32 17)
  %v7_d038 = icmp eq i32 %v3_d034, -1
  store i1 %v7_d038, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d034, i32* %fp.global-to-local, align 4
  br i1 %v7_d038, label %dec_label_pc_d3ec, label %dec_label_pc_d044

dec_label_pc_d044:                                ; preds = %dec_label_pc_cf34
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d04c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d04c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d060 = call i32 @function_11190(i32 %v3_d034, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d064 = icmp eq i32 %v6_d060, -1
  store i1 %v7_d064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d064, label %dec_label_pc_d3e4, label %dec_label_pc_d06c

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d044
  %v0_d06c = load i32, i32* @r4, align 4
  %v3_d06c = mul i32 %v0_d06c, 65536
  store i32 %v3_d06c, i32* @lr, align 4
  %v0_d070 = load i32, i32* @r7, align 4
  %v0_d074 = load i32, i32* @r6, align 4
  %v3_d074 = mul i32 %v0_d074, 65536
  store i32 %v3_d074, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_d07c = urem i32 %v0_d070, 65536
  %v3_d080 = urem i32 %v0_d074, 65536
  store i32 %v3_d080, i32* %r2.global-to-local, align 4
  %v3_d084 = urem i32 %v0_d06c, 65536
  store i32 %v3_d084, i32* %r3.global-to-local, align 4
  %v0_d088 = load i32, i32* %sb.global-to-local, align 4
  %v2_d088 = icmp eq i32 %v0_d088, 0
  store i1 %v2_d088, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_d088, 1
  br i1 %tmp50, label %dec_label_pc_d20c, label %dec_label_pc_d0a0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d06c
  %v1_d0a4 = urem i32 %v0_d06c, 256
  %v1_d0a8 = urem i32 %v0_d070, 256
  %v3_d0ac = mul nuw nsw i32 %v1_d0a4, 256
  %v1_d0b0 = urem i32 %v0_d074, 256
  %tmp51 = udiv i32 %v0_d070, 256
  %v3_d0b4 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_d074, 256
  %v3_d0b8 = urem i32 %tmp52, 256
  store i32 %v3_d0b8, i32* %ip.global-to-local, align 4
  %v4_d0bc = mul nuw nsw i32 %v1_d0a8, 256
  %v5_d0bc = or i32 %v4_d0bc, %v3_d0b4
  store i32 %v5_d0bc, i32* @r7, align 4
  %v4_d0c0 = mul nuw nsw i32 %v1_d0b0, 256
  %v5_d0c0 = or i32 %v4_d0c0, %v3_d0b8
  store i32 %v5_d0c0, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_d06c, 256
  %v4_d0c4 = urem i32 %tmp53, 256
  %v5_d0c4 = or i32 %v4_d0c4, %v3_d0ac
  store i32 %v5_d0c4, i32* @r5, align 4
  store i32 %v1_d0b0, i32* %r2.global-to-local, align 4
  store i32 %v1_d0a4, i32* %r3.global-to-local, align 4
  %v2_d140 = icmp eq i32 %v1_cfd4, 0
  %v4_d144 = sext i8 %v5_cfc4 to i32
  %sext = mul i32 %v0_d070, 16777216
  %v4_d160 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_d074, 16777216
  %v4_d1bc = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_d06c, 16777216
  %v4_d1dc = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_d0e0

dec_label_pc_d0e0:                                ; preds = %bb57, %dec_label_pc_d0a0
  %v2_d0e8 = call i32 @function_114c4(i32 128, i32 1)
  store i32 %v2_cf54, i32* %r2.global-to-local, align 4
  %v3_d0f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d0f0, i32* %r3.global-to-local, align 4
  %v2_d0f4 = load i32, i32* @r4, align 4
  %v5_d0f4 = mul i32 %v2_d0f4, 4
  %v6_d0f4 = add i32 %v5_d0f4, %v2_cf54
  %v7_d0f4 = inttoptr i32 %v6_d0f4 to i32*
  store i32 %v2_d0e8, i32* %v7_d0f4, align 4
  %v0_d0f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d0f8 = load i32, i32* %r3.global-to-local, align 4
  %v4_d0f8 = mul i32 %v1_d0f8, 4
  %v5_d0f8 = add i32 %v4_d0f8, %v0_d0f8
  %v6_d0f8 = inttoptr i32 %v5_d0f8 to i32*
  %v7_d0f8 = load i32, i32* %v6_d0f8, align 4
  store i32 %v7_d0f8, i32* @lr, align 4
  %v1_d0fc = inttoptr i32 %v7_d0f8 to i8*
  %v2_d0fc = load i8, i8* %v1_d0fc, align 1
  %tmp = urem i8 %v2_d0fc, 16
  %v1_d100 = zext i8 %tmp to i32
  %v1_d104 = or i32 %v1_d100, 64
  store i32 %v1_d104, i32* %r3.global-to-local, align 4
  %v1_d108 = trunc i32 %v1_d104 to i8
  store i8 %v1_d108, i8* %v1_d0fc, align 1
  %v0_d10c = load i32, i32* @lr, align 4
  %v1_d10c = inttoptr i32 %v0_d10c to i8*
  %v2_d10c = load i8, i8* %v1_d10c, align 1
  %v1_d110 = and i8 %v2_d10c, -16
  %v1_d114 = or i8 %v1_d110, 5
  store i8 %v1_d114, i8* %v1_d10c, align 1
  %v2_d120 = load i32, i32* @lr, align 4
  %v3_d120 = add i32 %v2_d120, 1
  %v4_d120 = inttoptr i32 %v3_d120 to i8*
  store i8 %v5_cf8c, i8* %v4_d120, align 1
  %v3_d124 = load i32, i32* %stack_var_-44, align 4
  %v1_d128 = add i32 %v3_d124, 32
  %tmp54 = mul i32 %v1_d128, 256
  %v1_d134 = and i32 %tmp54, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp55 = udiv i32 %v1_d128, 256
  %v4_d138 = urem i32 %tmp55, 256
  %v5_d138 = or i32 %v4_d138, %v1_d134
  store i32 %v5_d138, i32* %r2.global-to-local, align 4
  store i1 %v2_d140, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d144, i32* %r3.global-to-local, align 4
  %v2_d148 = load i32, i32* @lr, align 4
  %v3_d148 = add i32 %v2_d148, 8
  %v4_d148 = inttoptr i32 %v3_d148 to i8*
  store i8 %v5_cfc4, i8* %v4_d148, align 1
  %v0_d14c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d14c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d0e0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d150 = load i32, i32* @lr, align 4
  %v4_d150 = add i32 %v3_d150, 6
  %v5_d150 = inttoptr i32 %v4_d150 to i8*
  store i8 64, i8* %v5_d150, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e0, %bb
  %v0_d154 = load i32, i32* %r2.global-to-local, align 4
  %v1_d154 = trunc i32 %v0_d154 to i8
  %v2_d154 = load i32, i32* @lr, align 4
  %v3_d154 = add i32 %v2_d154, 2
  %v4_d154 = inttoptr i32 %v3_d154 to i8*
  store i8 %v1_d154, i8* %v4_d154, align 1
  %v0_d158 = load i32, i32* %r2.global-to-local, align 4
  %v3_d158 = sdiv i32 %v0_d158, 256
  store i32 %v3_d158, i32* %ip.global-to-local, align 4
  store i32 %v4_d160, i32* %r2.global-to-local, align 4
  %v2_d164 = load i32, i32* @lr, align 4
  %v3_d164 = add i32 %v2_d164, 9
  %v4_d164 = inttoptr i32 %v3_d164 to i8*
  store i8 17, i8* %v4_d164, align 1
  store i32 ptrtoint (i32* @global_var_1bcbc.78 to i32), i32* %r3.global-to-local, align 4
  %v0_d16c = load i32, i32* %r2.global-to-local, align 4
  %v1_d16c = trunc i32 %v0_d16c to i8
  %v2_d16c = load i32, i32* @lr, align 4
  %v3_d16c = add i32 %v2_d16c, 5
  %v4_d16c = inttoptr i32 %v3_d16c to i8*
  store i8 %v1_d16c, i8* %v4_d16c, align 1
  %v0_d170 = load i32, i32* %ip.global-to-local, align 4
  %v1_d170 = trunc i32 %v0_d170 to i8
  %v2_d170 = load i32, i32* @lr, align 4
  %v3_d170 = add i32 %v2_d170, 3
  %v4_d170 = inttoptr i32 %v3_d170 to i8*
  store i8 %v1_d170, i8* %v4_d170, align 1
  %v0_d174 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d174, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_d1789 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d1789, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d178 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d178, i32* %ip.global-to-local, align 4
  %v3_d17c = load i32, i32* @lr, align 4
  %v4_d17c = add i32 %v3_d17c, 7
  %v5_d17c = inttoptr i32 %v4_d17c to i8*
  store i8 0, i8* %v5_d17c, align 1
  %v0_d184.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_d184 = phi i32 [ %v3_d1789, %.thread8 ], [ %v0_d184.pre, %bb56 ]
  %v2_d180 = load i32, i32* @global_var_1bcbc.78, align 4
  store i32 %v2_d180, i32* %r2.global-to-local, align 4
  %v3_d184 = mul i32 %v0_d184, 32
  store i32 %v3_d184, i32* %r3.global-to-local, align 4
  %v1_d188 = load i32, i32* @lr, align 4
  %v2_d188 = add i32 %v1_d188, 12
  %v3_d188 = inttoptr i32 %v2_d188 to i32*
  store i32 %v2_d180, i32* %v3_d188, align 4
  %v0_d18c = load i32, i32* %r3.global-to-local, align 4
  %v1_d18c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_d18c, -8
  %v5_d18c = add i32 %v0_d18c, %tmp60
  %v1_d190 = load i32, i32* @sl, align 4
  %v2_d190 = add i32 %v5_d18c, %v1_d190
  store i32 %v2_d190, i32* %r3.global-to-local, align 4
  %v1_d194 = add i32 %v2_d190, 16
  %v2_d194 = inttoptr i32 %v1_d194 to i32*
  %v3_d194 = load i32, i32* %v2_d194, align 4
  %v1_d198 = load i32, i32* @lr, align 4
  %v2_d198 = add i32 %v1_d198, 16
  %v3_d198 = inttoptr i32 %v2_d198 to i32*
  store i32 %v3_d194, i32* %v3_d198, align 4
  %v3_d19c = load i32, i32* %stack_var_-44, align 4
  %v1_d1a0 = add i32 %v3_d19c, 12
  %tmp58 = mul i32 %v1_d1a0, 256
  %v1_d1b0 = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp59 = udiv i32 %v1_d1a0, 256
  %v4_d1b4 = urem i32 %tmp59, 256
  %v5_d1b4 = or i32 %v4_d1b4, %v1_d1b0
  store i32 %v5_d1b4, i32* %ip.global-to-local, align 4
  %v1_d1b8 = load i32, i32* @lr, align 4
  %v2_d1b8 = add i32 %v1_d1b8, 28
  %v3_d1b8 = inttoptr i32 %v2_d1b8 to i32*
  store i32 -1, i32* %v3_d1b8, align 4
  store i32 %v4_d1bc, i32* %r2.global-to-local, align 4
  %v0_d1c0 = load i32, i32* @lr, align 4
  %v1_d1c0 = add i32 %v0_d1c0, 20
  store i32 %v1_d1c0, i32* %r4.global-to-local, align 4
  %v0_d1c4 = load i32, i32* %ip.global-to-local, align 4
  %v3_d1c4 = sdiv i32 %v0_d1c4, 256
  store i32 %v3_d1c4, i32* %r3.global-to-local, align 4
  %v0_d1c8 = load i32, i32* @r7, align 4
  %v1_d1c8 = trunc i32 %v0_d1c8 to i8
  %v3_d1c8 = add i32 %v0_d1c0, 4
  %v4_d1c8 = inttoptr i32 %v3_d1c8 to i8*
  store i8 %v1_d1c8, i8* %v4_d1c8, align 1
  %v0_d1cc = load i32, i32* @r6, align 4
  %v1_d1cc = trunc i32 %v0_d1cc to i8
  %v2_d1cc = load i32, i32* @lr, align 4
  %v3_d1cc = add i32 %v2_d1cc, 20
  %v4_d1cc = inttoptr i32 %v3_d1cc to i8*
  store i8 %v1_d1cc, i8* %v4_d1cc, align 1
  %v0_d1d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_d1d0 = trunc i32 %v0_d1d0 to i8
  %v2_d1d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d1d0 = add i32 %v2_d1d0, 5
  %v4_d1d0 = inttoptr i32 %v3_d1d0 to i8*
  store i8 %v1_d1d0, i8* %v4_d1d0, align 1
  %v0_d1d4 = load i32, i32* @r5, align 4
  %v1_d1d4 = trunc i32 %v0_d1d4 to i8
  %v2_d1d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d1d4 = add i32 %v2_d1d4, 2
  %v4_d1d4 = inttoptr i32 %v3_d1d4 to i8*
  store i8 %v1_d1d4, i8* %v4_d1d4, align 1
  %v0_d1d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d1d8 = trunc i32 %v0_d1d8 to i8
  %v2_d1d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d1d8 = add i32 %v2_d1d8, 1
  %v4_d1d8 = inttoptr i32 %v3_d1d8 to i8*
  store i8 %v1_d1d8, i8* %v4_d1d8, align 1
  store i32 %v4_d1dc, i32* %r3.global-to-local, align 4
  %v0_d1e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_d1e0 = trunc i32 %v0_d1e0 to i8
  %v2_d1e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d1e0 = add i32 %v2_d1e0, 4
  %v4_d1e0 = inttoptr i32 %v3_d1e0 to i8*
  store i8 %v1_d1e0, i8* %v4_d1e0, align 1
  %v0_d1e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_d1e4 = trunc i32 %v0_d1e4 to i8
  %v2_d1e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d1e4 = add i32 %v2_d1e4, 3
  %v4_d1e4 = inttoptr i32 %v3_d1e4 to i8*
  store i8 %v1_d1e4, i8* %v4_d1e4, align 1
  %v0_d1e8 = load i32, i32* %r8.global-to-local, align 4
  %v0_d1ec = load i32, i32* @lr, align 4
  %v1_d1ec = add i32 %v0_d1ec, 32
  %v3_d1f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d1f0, i32* %r2.global-to-local, align 4
  %v3_d1f4 = call i32 @function_ff80(i32 %v1_d1ec, i32 %v0_d1e8, i32 %v3_d1f0)
  %v3_d1f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d1f8, i32* %r3.global-to-local, align 4
  %v1_d1fc = add i32 %v3_d1f8, 1
  store i32 %v1_d1fc, i32* @r4, align 4
  %v1_d200 = load i32, i32* %sb.global-to-local, align 4
  %v9_d200 = icmp eq i32 %v1_d1fc, %v1_d200
  store i1 %v9_d200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d1fc, i32* %stack_var_-40, align 4
  %v5_d208 = icmp slt i32 %v1_d1fc, %v1_d200
  br i1 %v5_d208, label %dec_label_pc_d0e0, label %dec_label_pc_d20c

dec_label_pc_d20c:                                ; preds = %bb57, %dec_label_pc_d06c
  %v0_d20c = phi i32 [ %v0_d088, %dec_label_pc_d06c ], [ %v1_d200, %bb57 ]
  %v2_d20c = icmp eq i32 %v0_d20c, 0
  store i1 %v2_d20c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d254 = icmp eq i32 %v3_d07c, 65535
  br label %dec_label_pc_d214.outer

dec_label_pc_d214.outer:                          ; preds = %dec_label_pc_d324, %dec_label_pc_d20c
  %v1_d214.ph.in = phi i32 [ %v1_d318, %dec_label_pc_d324 ], [ %v0_d20c, %dec_label_pc_d20c ]
  %v0_d214.ph = phi i1 [ %v2_d324, %dec_label_pc_d324 ], [ %v2_d20c, %dec_label_pc_d20c ]
  %v1_d214.ph = icmp slt i32 %v1_d214.ph.in, 0
  %v4_d214 = or i1 %v1_d214.ph, %v0_d214.ph
  br label %dec_label_pc_d214

dec_label_pc_d214:                                ; preds = %dec_label_pc_d214.outer, %dec_label_pc_d214
  br i1 %v4_d214, label %dec_label_pc_d214, label %dec_label_pc_d218

dec_label_pc_d218:                                ; preds = %dec_label_pc_d214
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_d224

dec_label_pc_d224:                                ; preds = %dec_label_pc_d274, %dec_label_pc_d218
  %v1_d238 = phi i32 [ %v1_d314, %dec_label_pc_d274 ], [ 0, %dec_label_pc_d218 ]
  %v5_d228 = mul i32 %v1_d238, 24
  %v1_d22c = load i32, i32* @sl, align 4
  %v2_d22c = add i32 %v1_d22c, %v5_d228
  store i32 %v2_d22c, i32* %r3.global-to-local, align 4
  %v1_d234 = add i32 %v2_d22c, 20
  %v2_d234 = inttoptr i32 %v1_d234 to i8*
  %v3_d234 = load i8, i8* %v2_d234, align 1
  %v4_d234 = zext i8 %v3_d234 to i32
  store i32 %v4_d234, i32* %r2.global-to-local, align 4
  %v4_d238 = mul i32 %v1_d238, 4
  %v5_d238 = add i32 %v4_d238, %v2_cf54
  %v6_d238 = inttoptr i32 %v5_d238 to i32*
  %v7_d238 = load i32, i32* %v6_d238, align 4
  store i32 %v7_d238, i32* @r5, align 4
  %v7_d240 = icmp eq i8 %v3_d234, 31
  store i1 %v7_d240, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_d248 = add i32 %v7_d238, 20
  store i32 %v1_d248, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_d234, 32
  br i1 %tmp61, label %dec_label_pc_d330, label %dec_label_pc_d250

dec_label_pc_d250:                                ; preds = %dec_label_pc_d224
  store i32 %v3_d07c, i32* %r2.global-to-local, align 4
  store i1 %v3_d254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d254, label %dec_label_pc_d398, label %dec_label_pc_d25c

dec_label_pc_d25c:                                ; preds = %dec_label_pc_d330.dec_label_pc_d25c_crit_edge, %dec_label_pc_d250
  %v1_d260 = phi i32 [ %v1_d260.pre, %dec_label_pc_d330.dec_label_pc_d25c_crit_edge ], [ 65535, %dec_label_pc_d250 ]
  store i32 %v3_d080, i32* %r3.global-to-local, align 4
  %v9_d260 = icmp eq i32 %v3_d080, %v1_d260
  store i1 %v9_d260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d260, label %dec_label_pc_d3b4, label %dec_label_pc_d268

dec_label_pc_d268:                                ; preds = %dec_label_pc_d398.dec_label_pc_d268_crit_edge, %dec_label_pc_d25c
  %v1_d26c = phi i32 [ %v1_d26c.pre, %dec_label_pc_d398.dec_label_pc_d268_crit_edge ], [ %v1_d260, %dec_label_pc_d25c ]
  %v9_d26c = icmp eq i32 %v3_d084, %v1_d26c
  store i1 %v9_d26c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d26c, label %dec_label_pc_d3d0, label %dec_label_pc_d274

dec_label_pc_d274:                                ; preds = %dec_label_pc_d3b4, %dec_label_pc_d268, %dec_label_pc_d3d0
  %v0_d278 = load i32, i32* %r8.global-to-local, align 4
  %v1_d278 = trunc i32 %v0_d278 to i8
  %v2_d278 = load i32, i32* @r5, align 4
  %v3_d278 = add i32 %v2_d278, 10
  %v4_d278 = inttoptr i32 %v3_d278 to i8*
  store i8 %v1_d278, i8* %v4_d278, align 1
  %v0_d27c = load i32, i32* %r8.global-to-local, align 4
  %v1_d27c = trunc i32 %v0_d27c to i8
  %v2_d27c = load i32, i32* @r5, align 4
  %v3_d27c = add i32 %v2_d27c, 11
  %v4_d27c = inttoptr i32 %v3_d27c to i8*
  store i8 %v1_d27c, i8* %v4_d27c, align 1
  %v0_d280 = load i32, i32* @r5, align 4
  store i32 %v0_d280, i32* @r0, align 4
  %v2_d284 = call i32 @function_d3f8(i32 %v0_d280, i32 20)
  %v3_d284 = trunc i32 %v2_d284 to i8
  %v4_d288 = sdiv i32 %v2_d284, 256
  store i32 %v4_d288, i32* %r3.global-to-local, align 4
  %v1_d28c = trunc i32 %v4_d288 to i8
  %v2_d28c = load i32, i32* @r5, align 4
  %v3_d28c = add i32 %v2_d28c, 11
  %v4_d28c = inttoptr i32 %v3_d28c to i8*
  store i8 %v1_d28c, i8* %v4_d28c, align 1
  %v3_d290 = load i32, i32* @r5, align 4
  %v4_d290 = add i32 %v3_d290, 10
  %v5_d290 = inttoptr i32 %v4_d290 to i8*
  store i8 %v3_d284, i8* %v5_d290, align 1
  %v0_d294 = load i32, i32* %r8.global-to-local, align 4
  %v1_d294 = trunc i32 %v0_d294 to i8
  %v2_d294 = load i32, i32* @r6, align 4
  %v3_d294 = add i32 %v2_d294, 6
  %v4_d294 = inttoptr i32 %v3_d294 to i8*
  store i8 %v1_d294, i8* %v4_d294, align 1
  %v0_d298 = load i32, i32* %r8.global-to-local, align 4
  %v1_d298 = trunc i32 %v0_d298 to i8
  %v2_d298 = load i32, i32* @r6, align 4
  %v3_d298 = add i32 %v2_d298, 7
  %v4_d298 = inttoptr i32 %v3_d298 to i8*
  store i8 %v1_d298, i8* %v4_d298, align 1
  %v0_d29c = load i32, i32* @r5, align 4
  %v1_d29c = add i32 %v0_d29c, 24
  %v2_d29c = inttoptr i32 %v1_d29c to i8*
  %v3_d29c = load i8, i8* %v2_d29c, align 1
  %v4_d29c = zext i8 %v3_d29c to i32
  store i32 %v4_d29c, i32* %r3.global-to-local, align 4
  %v1_d2a0 = add i32 %v0_d29c, 25
  %v2_d2a0 = inttoptr i32 %v1_d2a0 to i8*
  %v3_d2a0 = load i8, i8* %v2_d2a0, align 1
  %v4_d2a0 = zext i8 %v3_d2a0 to i32
  %v4_d2a4 = mul nuw nsw i32 %v4_d2a0, 256
  %v5_d2a4 = or i32 %v4_d2a4, %v4_d29c
  store i32 %v5_d2a4, i32* %r2.global-to-local, align 4
  %v3_d2a8 = load i32, i32* %stack_var_-44, align 4
  %v0_d2ac = load i32, i32* @r6, align 4
  store i32 %v0_d2ac, i32* @r1, align 4
  %v1_d2b0 = add i32 %v3_d2a8, 12
  store i32 %v1_d2b0, i32* %r3.global-to-local, align 4
  %v4_d2b8 = call i32 @function_d454(i32 %v0_d29c, i32 %v0_d2ac, i32 %v5_d2a4, i32 %v1_d2b0)
  %v5_d2b8 = trunc i32 %v4_d2b8 to i8
  %v4_d2bc24 = udiv i32 %v4_d2b8, 256
  %v1_d2c0 = trunc i32 %v4_d2bc24 to i8
  %v2_d2c0 = load i32, i32* @r6, align 4
  %v3_d2c0 = add i32 %v2_d2c0, 7
  %v4_d2c0 = inttoptr i32 %v3_d2c0 to i8*
  store i8 %v1_d2c0, i8* %v4_d2c0, align 1
  %v3_d2c4 = load i32, i32* @r6, align 4
  %v4_d2c4 = add i32 %v3_d2c4, 6
  %v5_d2c4 = inttoptr i32 %v4_d2c4 to i8*
  store i8 %v5_d2b8, i8* %v5_d2c4, align 1
  %v3_d2c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d2c8, i32* %r3.global-to-local, align 4
  %v0_d2cc = load i32, i32* @r5, align 4
  %v1_d2cc = add i32 %v0_d2cc, 20
  %v2_d2cc = inttoptr i32 %v1_d2cc to i32*
  %v3_d2cc = load i32, i32* %v2_d2cc, align 4
  %v5_d2d4 = mul i32 %v3_d2c8, 24
  %v1_d2d8 = load i32, i32* @sl, align 4
  %v2_d2d8 = add i32 %v1_d2d8, %v5_d2d4
  store i32 %v2_d2d8, i32* %ip.global-to-local, align 4
  %v3_d2dc = udiv i32 %v3_d2cc, 65536
  store i32 %v3_d2dc, i32* %r2.global-to-local, align 4
  %v1_d2e0 = trunc i32 %v3_d2dc to i8
  %v3_d2e0 = add i32 %v2_d2d8, 2
  %v4_d2e0 = inttoptr i32 %v3_d2e0 to i8*
  store i8 %v1_d2e0, i8* %v4_d2e0, align 1
  %v0_d2e4 = load i32, i32* %r2.global-to-local, align 4
  %v3_d2e425 = udiv i32 %v0_d2e4, 256
  %v3_d2e8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d2e8, i32* %r2.global-to-local, align 4
  %v1_d2ec = trunc i32 %v3_d2e425 to i8
  %v2_d2ec = load i32, i32* %ip.global-to-local, align 4
  %v3_d2ec = add i32 %v2_d2ec, 3
  %v4_d2ec = inttoptr i32 %v3_d2ec to i8*
  store i8 %v1_d2ec, i8* %v4_d2ec, align 1
  %v0_d2f0 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d2f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d2f8 = add i32 %v0_d2f8, 32
  store i32 %v1_d2f8, i32* %r2.global-to-local, align 4
  %v0_d2fc = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d304 = load i32, i32* %ip.global-to-local, align 4
  %v6_d30c = inttoptr i32 %v0_d2f0 to i32*
  %v7_d30c = call i32 @function_1115c(i32 %v0_d2fc, i32* %v6_d30c, i32 %v1_d2f8, i32 16384, i32 %v0_d304, i32 16)
  %v3_d310 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d310, i32* %r3.global-to-local, align 4
  %v1_d314 = add i32 %v3_d310, 1
  %v1_d318 = load i32, i32* %sb.global-to-local, align 4
  %v9_d318 = icmp eq i32 %v1_d314, %v1_d318
  store i1 %v9_d318, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d314, i32* %stack_var_-40, align 4
  %v5_d320 = icmp slt i32 %v1_d314, %v1_d318
  br i1 %v5_d320, label %dec_label_pc_d224, label %dec_label_pc_d324

dec_label_pc_d324:                                ; preds = %dec_label_pc_d274
  %v2_d324 = icmp eq i32 %v1_d318, 0
  store i1 %v2_d324, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d214.outer

dec_label_pc_d330:                                ; preds = %dec_label_pc_d224
  %v1_d330 = add i32 %v2_d22c, 16
  %v2_d330 = inttoptr i32 %v1_d330 to i32*
  %v3_d330 = load i32, i32* %v2_d330, align 4
  store i32 %v3_d330, i32* @r4, align 4
  %v0_d334 = call i32 @function_eccc()
  %v3_d338 = load i32, i32* %stack_var_-40, align 4
  %v5_d340 = mul i32 %v3_d338, 24
  %v0_d344 = load i32, i32* @r4, align 4
  %v1_d348 = and i32 %v0_d344, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_d348, i32* %r3.global-to-local, align 4
  %v1_d344 = udiv i32 %v0_d344, 256
  %v3_d34c = and i32 %v1_d344, 65280
  store i32 %v3_d34c, i32* %r2.global-to-local, align 4
  %v1_d350 = load i32, i32* @sl, align 4
  %v2_d350 = add i32 %v1_d350, %v5_d340
  store i32 %v2_d350, i32* %ip.global-to-local, align 4
  %v3_d354 = mul i32 %v0_d344, 16777216
  %v4_d358 = mul i32 %v1_d348, 256
  %v5_d358 = or i32 %v4_d358, %v3_d354
  %v1_d35c = add i32 %v2_d350, 20
  %v2_d35c = inttoptr i32 %v1_d35c to i8*
  %v3_d35c = load i8, i8* %v2_d35c, align 1
  %v4_d35c = zext i8 %v3_d35c to i32
  %v4_d360 = udiv i32 %v0_d344, 16777216
  %v5_d360 = or i32 %v3_d34c, %v4_d360
  %v2_d364 = or i32 %v5_d360, %v5_d358
  %v7_d368 = lshr i32 %v0_d334, %v4_d35c
  %v8_d368 = add i32 %v7_d368, %v2_d364
  store i32 %v3_d07c, i32* %r2.global-to-local, align 4
  %v2_d388 = call i32 @llvm.bswap.i32(i32 %v8_d368)
  store i32 %v2_d388, i32* %r3.global-to-local, align 4
  %v1_d38c = load i32, i32* %r7.global-to-local, align 4
  %v9_d38c = icmp eq i32 %v3_d07c, %v1_d38c
  store i1 %v9_d38c, i1* %cpsr_z.global-to-local, align 1
  %v1_d390 = load i32, i32* @r5, align 4
  %v2_d390 = add i32 %v1_d390, 16
  %v3_d390 = inttoptr i32 %v2_d390 to i32*
  store i32 %v2_d388, i32* %v3_d390, align 4
  br i1 %v9_d38c, label %dec_label_pc_d398, label %dec_label_pc_d330.dec_label_pc_d25c_crit_edge

dec_label_pc_d330.dec_label_pc_d25c_crit_edge:    ; preds = %dec_label_pc_d330
  %v1_d260.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d25c

dec_label_pc_d398:                                ; preds = %dec_label_pc_d330, %dec_label_pc_d250
  %v0_d398 = call i32 @function_eccc()
  %v1_d398 = trunc i32 %v0_d398 to i8
  %v4_d39c26 = udiv i32 %v0_d398, 256
  %v1_d3a0 = trunc i32 %v4_d39c26 to i8
  %v2_d3a0 = load i32, i32* @r5, align 4
  %v3_d3a0 = add i32 %v2_d3a0, 5
  %v4_d3a0 = inttoptr i32 %v3_d3a0 to i8*
  store i8 %v1_d3a0, i8* %v4_d3a0, align 1
  store i32 %v3_d080, i32* %r3.global-to-local, align 4
  %v1_d3a8 = load i32, i32* %r7.global-to-local, align 4
  %v9_d3a8 = icmp eq i32 %v3_d080, %v1_d3a8
  store i1 %v9_d3a8, i1* %cpsr_z.global-to-local, align 1
  %v3_d3ac = load i32, i32* @r5, align 4
  %v4_d3ac = add i32 %v3_d3ac, 4
  %v5_d3ac = inttoptr i32 %v4_d3ac to i8*
  store i8 %v1_d398, i8* %v5_d3ac, align 1
  %v0_d3b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3b0, label %dec_label_pc_d3b4, label %dec_label_pc_d398.dec_label_pc_d268_crit_edge

dec_label_pc_d398.dec_label_pc_d268_crit_edge:    ; preds = %dec_label_pc_d398
  %v1_d26c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d268

dec_label_pc_d3b4:                                ; preds = %dec_label_pc_d398, %dec_label_pc_d25c
  %v0_d3b4 = call i32 @function_eccc()
  %v1_d3b4 = trunc i32 %v0_d3b4 to i8
  %v4_d3bc = sdiv i32 %v0_d3b4, 256
  store i32 %v4_d3bc, i32* %r3.global-to-local, align 4
  %v1_d3c0 = load i32, i32* %r7.global-to-local, align 4
  %v9_d3c0 = icmp eq i32 %v3_d084, %v1_d3c0
  store i1 %v9_d3c0, i1* %cpsr_z.global-to-local, align 1
  %v3_d3c4 = load i32, i32* @r5, align 4
  %v4_d3c4 = add i32 %v3_d3c4, 20
  %v5_d3c4 = inttoptr i32 %v4_d3c4 to i8*
  store i8 %v1_d3b4, i8* %v5_d3c4, align 1
  %v0_d3c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d3c8 = trunc i32 %v0_d3c8 to i8
  %v2_d3c8 = load i32, i32* @r6, align 4
  %v3_d3c8 = add i32 %v2_d3c8, 1
  %v4_d3c8 = inttoptr i32 %v3_d3c8 to i8*
  store i8 %v1_d3c8, i8* %v4_d3c8, align 1
  %v0_d3cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3cc, label %dec_label_pc_d3d0, label %dec_label_pc_d274

dec_label_pc_d3d0:                                ; preds = %dec_label_pc_d3b4, %dec_label_pc_d268
  %v0_d3d0 = call i32 @function_eccc()
  %v1_d3d0 = trunc i32 %v0_d3d0 to i8
  %v4_d3d4 = sdiv i32 %v0_d3d0, 256
  store i32 %v4_d3d4, i32* %r3.global-to-local, align 4
  %v1_d3d8 = trunc i32 %v4_d3d4 to i8
  %v2_d3d8 = load i32, i32* @r6, align 4
  %v3_d3d8 = add i32 %v2_d3d8, 3
  %v4_d3d8 = inttoptr i32 %v3_d3d8 to i8*
  store i8 %v1_d3d8, i8* %v4_d3d8, align 1
  %v3_d3dc = load i32, i32* @r6, align 4
  %v4_d3dc = add i32 %v3_d3dc, 2
  %v5_d3dc = inttoptr i32 %v4_d3dc to i8*
  store i8 %v1_d3d0, i8* %v5_d3dc, align 1
  br label %dec_label_pc_d274

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d044
  %v0_d3e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_d3e8 = call i32 @function_108c4(i32 %v0_d3e4)
  br label %dec_label_pc_d3ec

dec_label_pc_d3ec:                                ; preds = %dec_label_pc_cf34, %dec_label_pc_d3e4
  %v29_d3f0 = phi i32 [ %v3_d034, %dec_label_pc_cf34 ], [ %v1_d3e8, %dec_label_pc_d3e4 ]
  store i32 %v3_cf34, i32* %r4.global-to-local, align 4
  store i32 %v12_cf34, i32* %r7.global-to-local, align 4
  ret i32 %v29_d3f0

; uselistorder directives
  uselistorder i32 %v4_d3d4, { 1, 0 }
  uselistorder i32 %v2_d388, { 1, 0 }
  uselistorder i32 %v0_d344, { 1, 0, 2, 3 }
  uselistorder i1 %v2_d324, { 1, 0 }
  uselistorder i32 %v1_d318, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d314, { 2, 0, 3, 1 }
  uselistorder i32 %v3_d2dc, { 1, 0 }
  uselistorder i32 %v4_d288, { 1, 0 }
  uselistorder i1 %v3_d254, { 1, 0 }
  uselistorder i32 %v1_d1fc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d1a0, { 1, 0 }
  uselistorder i32 %v1_d128, { 1, 0 }
  uselistorder i32 %v1_d0b0, { 1, 0 }
  uselistorder i32 %v1_d0a4, { 1, 0 }
  uselistorder i32 %v0_d074, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d06c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d064, { 1, 0 }
  uselistorder i1 %v7_d038, { 1, 0 }
  uselistorder i32 %v3_d034, { 1, 2, 3, 0 }
  uselistorder i32 %v1_cfd4, { 1, 0 }
  uselistorder i8 %v5_cfc4, { 1, 0 }
  uselistorder i32 %v5_cfa8, { 1, 0 }
  uselistorder i32 %v6_cf6c, { 1, 0 }
  uselistorder i32 %v1_cf38, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 5, 3, 1, 4, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_1115c, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d454, { 5, 4, 3, 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_d3f8, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 31, { 1, 0, 2, 3, 6, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960), { 5, 6, 0, 7, 1, 2, 8, 9, 10, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a398, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74 }
  uselistorder label %dec_label_pc_d3ec, { 1, 0 }
  uselistorder label %dec_label_pc_d274, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d214, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d3f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d3f8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d428, label %dec_label_pc_d404

dec_label_pc_d404:                                ; preds = %dec_label_pc_d3f8
  %v0_d408.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %dec_label_pc_d408, %dec_label_pc_d404
  %v0_d41c = phi i32 [ %v2_d41c, %dec_label_pc_d408 ], [ 0, %dec_label_pc_d404 ]
  %v0_d410 = phi i32 [ %v1_d410, %dec_label_pc_d408 ], [ %arg1, %dec_label_pc_d404 ]
  %v0_d420 = phi i32 [ %v1_d420, %dec_label_pc_d408 ], [ %v0_d408.pre, %dec_label_pc_d404 ]
  %v1_d408 = inttoptr i32 %v0_d420 to i8*
  %v2_d408 = load i8, i8* %v1_d408, align 1
  %v3_d408 = zext i8 %v2_d408 to i32
  %v1_d40c = add i32 %v0_d420, 1
  %v2_d40c = inttoptr i32 %v1_d40c to i8*
  %v3_d40c = load i8, i8* %v2_d40c, align 1
  %v4_d40c = zext i8 %v3_d40c to i32
  %v1_d410 = add i32 %v0_d410, -2
  %v4_d414 = mul nuw nsw i32 %v4_d40c, 256
  %v5_d414 = or i32 %v4_d414, %v3_d408
  %v2_d41c = add i32 %v5_d414, %v0_d41c
  %v1_d420 = add i32 %v0_d420, 2
  store i32 %v1_d420, i32* @r0, align 4
  %v1_d410.cmp = icmp ugt i32 %v1_d410, 1
  br i1 %v1_d410.cmp, label %dec_label_pc_d408, label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d408, %dec_label_pc_d3f8
  %v1_d430 = phi i32 [ 0, %dec_label_pc_d3f8 ], [ %v2_d41c, %dec_label_pc_d408 ]
  %v0_d428 = phi i32 [ %arg1, %dec_label_pc_d3f8 ], [ %v1_d410, %dec_label_pc_d408 ]
  %v7_d428 = icmp eq i32 %v0_d428, 1
  br i1 %v7_d428, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d428
  %v1_d42c = load i32, i32* @r0, align 4
  %v2_d42c = inttoptr i32 %v1_d42c to i8*
  %v3_d42c = load i8, i8* %v2_d42c, align 1
  %v4_d42c = zext i8 %v3_d42c to i32
  %v3_d430 = add i32 %v1_d430, %v4_d42c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d428, %bb
  %v0_d434 = phi i32 [ %v1_d430, %dec_label_pc_d428 ], [ %v3_d430, %bb ]
  %v3_d438 = urem i32 %v0_d434, 65536
  %v4_d43c = udiv i32 %v0_d434, 65536
  %v5_d43c = add nuw nsw i32 %v4_d43c, %v3_d438
  %v4_d440 = udiv i32 %v5_d43c, 65536
  %v5_d440 = add nuw nsw i32 %v4_d440, %v5_d43c
  %v1_d444 = urem i32 %v5_d440, 65536
  %v3_d44c = xor i32 %v1_d444, 65535
  ret i32 %v3_d44c

; uselistorder directives
  uselistorder i32 %v5_d43c, { 1, 0 }
  uselistorder i32 %v1_d420, { 1, 0 }
  uselistorder i32 %v1_d410, { 1, 0, 2 }
  uselistorder i32 %v0_d420, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d454(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d454:
  %v3_d464 = urem i32 %arg2, 65536
  %v1_d468 = add i32 %arg1, 12
  %v1_d46c = inttoptr i32 %v1_d468 to i32*
  %v2_d46c = load i32, i32* %v1_d46c, align 4
  %v3_d46c = add i32 %arg1, 16
  %v4_d46c = inttoptr i32 %v3_d46c to i32*
  %v5_d46c = load i32, i32* %v4_d46c, align 4
  %v7_d470 = icmp sgt i32 %arg3, 1
  br i1 %v7_d470, label %dec_label_pc_d47c.preheader, label %dec_label_pc_d49c

dec_label_pc_d47c.preheader:                      ; preds = %dec_label_pc_d454
  %v0_d47c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d47c

dec_label_pc_d47c:                                ; preds = %dec_label_pc_d47c.preheader, %dec_label_pc_d47c
  %v0_d490 = phi i32 [ 0, %dec_label_pc_d47c.preheader ], [ %v2_d490, %dec_label_pc_d47c ]
  %v0_d484 = phi i32 [ %arg3, %dec_label_pc_d47c.preheader ], [ %v1_d484, %dec_label_pc_d47c ]
  %v0_d494 = phi i32 [ %v0_d47c.pre, %dec_label_pc_d47c.preheader ], [ %v1_d494, %dec_label_pc_d47c ]
  %v1_d47c = inttoptr i32 %v0_d494 to i8*
  %v2_d47c = load i8, i8* %v1_d47c, align 1
  %v3_d47c = zext i8 %v2_d47c to i32
  %v1_d480 = add i32 %v0_d494, 1
  %v2_d480 = inttoptr i32 %v1_d480 to i8*
  %v3_d480 = load i8, i8* %v2_d480, align 1
  %v4_d480 = zext i8 %v3_d480 to i32
  %v1_d484 = add nsw i32 %v0_d484, -2
  %v4_d488 = mul nuw nsw i32 %v4_d480, 256
  %v5_d488 = or i32 %v4_d488, %v3_d47c
  %v2_d490 = add i32 %v5_d488, %v0_d490
  %v1_d494 = add i32 %v0_d494, 2
  store i32 %v1_d494, i32* @r1, align 4
  %v8_d498 = icmp sgt i32 %v1_d484, 1
  br i1 %v8_d498, label %dec_label_pc_d47c, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d47c, %dec_label_pc_d454
  %v1_d4a4 = phi i32 [ 0, %dec_label_pc_d454 ], [ %v2_d490, %dec_label_pc_d47c ]
  %v0_d49c = phi i32 [ %arg3, %dec_label_pc_d454 ], [ %v1_d484, %dec_label_pc_d47c ]
  %v7_d49c = icmp eq i32 %v0_d49c, 1
  br i1 %v7_d49c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d49c
  %v1_d4a0 = load i32, i32* @r1, align 4
  %v2_d4a0 = inttoptr i32 %v1_d4a0 to i8*
  %v3_d4a0 = load i8, i8* %v2_d4a0, align 1
  %v4_d4a0 = zext i8 %v3_d4a0 to i32
  %v3_d4a4 = add i32 %v4_d4a0, %v1_d4a4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d49c, %bb
  %v0_d4c8 = phi i32 [ %v1_d4a4, %dec_label_pc_d49c ], [ %v3_d4a4, %bb ]
  %v3_d4ac = urem i32 %v2_d46c, 65536
  %v1_d4b4 = add i32 %arg1, 9
  %v2_d4b4 = inttoptr i32 %v1_d4b4 to i8*
  %v3_d4b4 = load i8, i8* %v2_d4b4, align 1
  %v4_d4b4 = zext i8 %v3_d4b4 to i32
  %v3_d4b8 = urem i32 %v5_d46c, 65536
  %v4_d4bc = udiv i32 %v2_d46c, 65536
  %v3_d4c4 = mul nuw nsw i32 %v4_d4b4, 256
  %v4_d4c8 = udiv i32 %v5_d46c, 65536
  %v5_d4c8 = add i32 %v0_d4c8, %v4_d4c8
  %v2_d4cc = add i32 %v5_d4c8, %v3_d4c4
  %v5_d4bc = add nuw nsw i32 %v3_d4ac, %v3_d464
  %v2_d4c0 = add nuw nsw i32 %v5_d4bc, %v4_d4bc
  %v2_d4d0 = add nuw nsw i32 %v2_d4c0, %v3_d4b8
  %v2_d4d4 = add i32 %v2_d4cc, %v2_d4d0
  %tmp = icmp ult i32 %v2_d4d4, 65536
  br i1 %tmp, label %dec_label_pc_d4f4, label %dec_label_pc_d4e0

dec_label_pc_d4e0:                                ; preds = %.thread, %dec_label_pc_d4e0
  %v2_d4e81 = phi i32 [ %v2_d4e8, %dec_label_pc_d4e0 ], [ %v2_d4d4, %.thread ]
  %v3_d4ec2.in = phi i32 [ %v2_d4e8, %dec_label_pc_d4e0 ], [ %v2_d4d4, %.thread ]
  %v3_d4ec2 = udiv i32 %v3_d4ec2.in, 65536
  %v3_d4e4 = urem i32 %v2_d4e81, 65536
  %v2_d4e8 = add nuw nsw i32 %v3_d4e4, %v3_d4ec2
  %tmp14 = icmp ult i32 %v2_d4e8, 65536
  br i1 %tmp14, label %dec_label_pc_d4f4.loopexit, label %dec_label_pc_d4e0

dec_label_pc_d4f4.loopexit:                       ; preds = %dec_label_pc_d4e0
  br label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d4f4.loopexit, %.thread
  %v0_d4f4 = phi i32 [ %v2_d4e8, %dec_label_pc_d4f4.loopexit ], [ %v2_d4d4, %.thread ]
  %v1_d4f4 = urem i32 %v0_d4f4, 65536
  %v3_d4fc = xor i32 %v1_d4f4, 65535
  ret i32 %v3_d4fc

; uselistorder directives
  uselistorder i32 %v2_d4e8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d4d4, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d4a4, { 1, 0 }
  uselistorder i32 %v1_d494, { 1, 0 }
  uselistorder i32 %v1_d484, { 0, 2, 1 }
  uselistorder i32 %v0_d494, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d4e0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d47c, { 1, 0 }
}

define i32 @function_d504(i32 %arg1) local_unnamed_addr {
dec_label_pc_d504:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d504 = load i32, i32* @r4, align 4
  store i32 %v3_d504, i32* %stack_var_-36, align 4
  %v6_d504 = load i32, i32* @r5, align 4
  %v9_d504 = load i32, i32* @r6, align 4
  %v12_d504 = load i32, i32* @r7, align 4
  %v15_d504 = load i32, i32* @r8, align 4
  %v18_d504 = load i32, i32* @sb, align 4
  %v21_d504 = load i32, i32* @sl, align 4
  %v24_d504 = load i32, i32* @fp, align 4
  %v2_d518 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d518, i32* @sl, align 4
  %v3_d520 = mul i32 %arg1, 65536
  store i32 %v3_d520, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d52c = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d538 = bitcast i32* %stack_var_-4677 to i8*
  %v3_d538 = call i32 @function_10f00(i8* %v2_d538, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d550 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d550 = call i32 @function_10f00(i8* %v2_d550, i32 0)
  %v2_d554 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d554, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d574 = call i32 @function_10f00(i8* nonnull %stack_var_-581, i32 0)
  %v2_d578 = ptrtoint i8* %stack_var_-68 to i32
  %v1_d580 = load i32, i32* @r5, align 4
  %v4_d580 = udiv i32 %v1_d580, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d5a0 = trunc i32 %v4_d580 to i8
  %v4_d5a0 = call i32 @function_103f8(i8 %v3_d5a0, i32 16, i32 %v2_d578)
  %v2_d5a8 = call i32 @function_ff04(i8* nonnull %stack_var_-68)
  %v7_d5ac = icmp eq i32 %v2_d5a8, 2
  br i1 %v7_d5ac, label %dec_label_pc_da40, label %dec_label_pc_d5b4

dec_label_pc_d5b4:                                ; preds = %dec_label_pc_d504, %dec_label_pc_da40
  %v1_d5b8 = call i32 @function_f5e0(i32 6)
  %v1_d5c0 = call i32 @function_f5e0(i32 7)
  %v1_d5c8 = call i32 @function_f5e0(i32 9)
  %v0_d5d0 = load i32, i32* @r4, align 4
  %v4_d5d4 = call i32 @function_109f0(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_131d0.85, i32 0, i32 0), i32 %v0_d5d0)
  %v7_d5d8 = icmp eq i32 %v4_d5d4, -1
  store i32 %v4_d5d4, i32* @r8, align 4
  br i1 %v7_d5d8, label %dec_label_pc_da00, label %dec_label_pc_d5e4.preheader

dec_label_pc_d5e4.preheader:                      ; preds = %dec_label_pc_d5b4
  %v4_d5f058 = call i32 @function_1015c(i8* nonnull %stack_var_-581, i32 512, i32 %v4_d5d4)
  %v2_d5f460 = icmp eq i32 %v4_d5f058, 0
  br i1 %v2_d5f460, label %dec_label_pc_d784.loopexit, label %dec_label_pc_d5fc.lr.ph

dec_label_pc_d5fc.lr.ph:                          ; preds = %dec_label_pc_d5e4.preheader
  %v2_d644 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d5fc

dec_label_pc_d5fc:                                ; preds = %dec_label_pc_d5fc.lr.ph, %dec_label_pc_d5e4.backedge
  %v3_d600 = load i8, i8* %stack_var_-581, align 1
  %v4_d600 = sext i8 %v3_d600 to i32
  %v2_d604 = icmp eq i8 %v3_d600, 0
  br i1 %v2_d604, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_d5fc
  %v8_d608 = icmp eq i8 %v3_d600, 58
  br i1 %v8_d608, label %.thread6, label %dec_label_pc_d61c

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d634

bb130:                                            ; preds = %dec_label_pc_d5fc
  br label %dec_label_pc_d634

dec_label_pc_d61c:                                ; preds = %bb
  %v1_d624.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d620

dec_label_pc_d620:                                ; preds = %bb131, %dec_label_pc_d61c
  %v0_d620 = phi i32 [ %v1_d620, %bb131 ], [ 0, %dec_label_pc_d61c ]
  %v1_d620 = add i32 %v0_d620, 1
  %v2_d624 = add i32 %v1_d620, %v1_d624.pre
  %v3_d624 = inttoptr i32 %v2_d624 to i8*
  %v4_d624 = load i8, i8* %v3_d624, align 1
  %v6_d624 = zext i8 %v4_d624 to i32
  %v2_d628 = icmp eq i8 %v4_d624, 0
  br i1 %v2_d628, label %dec_label_pc_d634, label %bb131

bb131:                                            ; preds = %dec_label_pc_d620
  %v8_d62c = icmp eq i8 %v4_d624, 58
  br i1 %v8_d62c, label %dec_label_pc_d634, label %dec_label_pc_d620

dec_label_pc_d634:                                ; preds = %dec_label_pc_d620, %bb131, %bb130, %.thread6
  %v1_d660 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_d620, %bb131 ], [ %v1_d620, %dec_label_pc_d620 ]
  %v0_d634 = phi i32 [ %v4_d600, %.thread6 ], [ %v4_d600, %bb130 ], [ %v6_d624, %bb131 ], [ %v6_d624, %dec_label_pc_d620 ]
  %v2_d634 = icmp eq i32 %v0_d634, 0
  br i1 %v2_d634, label %dec_label_pc_d5e4.backedge, label %dec_label_pc_d63c

dec_label_pc_d5e4.backedge:                       ; preds = %dec_label_pc_d634, %dec_label_pc_d70c, %dec_label_pc_d758, %dec_label_pc_d680
  %v0_d5ec = load i32, i32* @r8, align 4
  %v4_d5f0 = call i32 @function_1015c(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d5ec)
  %v2_d5f4 = icmp eq i32 %v4_d5f0, 0
  br i1 %v2_d5f4, label %dec_label_pc_d784.loopexit, label %dec_label_pc_d5fc

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d634
  %v1_d640 = add i32 %v1_d660, 2
  %v2_d648 = add i32 %v1_d640, %v2_d644
  %v1_d64c = add i32 %v2_d648, -545
  %v2_d64c = inttoptr i32 %v1_d64c to i8*
  %v3_d64c = load i8, i8* %v2_d64c, align 1
  %v2_d650 = icmp eq i8 %v3_d64c, 0
  br i1 %v2_d650, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_d63c
  %v8_d654 = icmp eq i8 %v3_d64c, 32
  br i1 %v8_d654, label %.thread10, label %dec_label_pc_d660

.thread10:                                        ; preds = %bb132
  store i32 %v1_d640, i32* @r5, align 4
  br label %dec_label_pc_d680

bb133:                                            ; preds = %dec_label_pc_d63c
  store i32 %v1_d640, i32* @r5, align 4
  br label %dec_label_pc_d680

dec_label_pc_d660:                                ; preds = %bb132
  %v0_d660 = load i32, i32* @r6, align 4
  %v2_d660 = add i32 %v0_d660, %v1_d660
  br label %dec_label_pc_d664

dec_label_pc_d664:                                ; preds = %bb134, %dec_label_pc_d660
  %v0_d67013 = phi i32 [ %v1_d670, %bb134 ], [ %v2_d660, %dec_label_pc_d660 ]
  %v1_d664 = add i32 %v0_d67013, 3
  %v2_d664 = inttoptr i32 %v1_d664 to i8*
  %v3_d664 = load i8, i8* %v2_d664, align 1
  %v2_d668 = icmp eq i8 %v3_d664, 0
  br i1 %v2_d668, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_d664
  %v1_d67014 = add i32 %v0_d67013, 1
  br label %dec_label_pc_d678

bb134:                                            ; preds = %dec_label_pc_d664
  %v8_d66c = icmp eq i8 %v3_d664, 32
  %v1_d670 = add i32 %v0_d67013, 1
  br i1 %v8_d66c, label %dec_label_pc_d678, label %dec_label_pc_d664

dec_label_pc_d678:                                ; preds = %bb134, %.thread12
  %v1_d67015 = phi i32 [ %v1_d67014, %.thread12 ], [ %v1_d670, %bb134 ]
  %v2_d678 = sub i32 %v1_d67015, %v0_d660
  %v1_d67c = add i32 %v2_d678, 2
  store i32 %v1_d67c, i32* @r5, align 4
  br label %dec_label_pc_d680

dec_label_pc_d680:                                ; preds = %bb133, %.thread10, %dec_label_pc_d678
  %v1_d68c = phi i32 [ %v1_d640, %.thread10 ], [ %v1_d640, %bb133 ], [ %v1_d67c, %dec_label_pc_d678 ]
  %v0_d680 = load i32, i32* @r6, align 4
  %v2_d680 = add i32 %v0_d680, %v1_d640
  store i32 %v2_d680, i32* @r4, align 4
  %v2_d68c = add i32 %v1_d68c, %v2_d644
  store i32 0, i32* @r7, align 4
  %v3_d698 = add i32 %v2_d68c, -545
  %v4_d698 = inttoptr i32 %v3_d698 to i8*
  store i8 0, i8* %v4_d698, align 1
  %v1_d69c = inttoptr i32 %v2_d680 to i8*
  %v2_d69c = call i32 @function_ff04(i8* %v1_d69c)
  store i32 %v2_d69c, i32* @r1, align 4
  %v0_d6a8 = load i32, i32* @r4, align 4
  %v3_d6ac = inttoptr i32 %v0_d6a8 to i8*
  %v4_d6ac = call i32 @function_10258(i8* %v3_d6ac, i32 %v2_d69c, i32 %v2_d578)
  %v7_d6b0 = icmp eq i32 %v4_d6ac, -1
  br i1 %v7_d6b0, label %dec_label_pc_d5e4.backedge, label %dec_label_pc_d6cc.preheader

dec_label_pc_d6cc.preheader:                      ; preds = %dec_label_pc_d680
  %v1_d6b4 = load i32, i32* @r7, align 4
  %v1_d6b8 = load i32, i32* @r6, align 4
  %v2_d6b8 = load i32, i32* @r5, align 4
  %v3_d6b8 = add i32 %v2_d6b8, %v1_d6b8
  store i32 %v1_d6b4, i32* @lr, align 4
  store i32 %v1_d6b4, i32* @r4, align 4
  %v1_d6cc50 = add i32 %v3_d6b8, 2
  %v2_d6cc51 = inttoptr i32 %v1_d6cc50 to i8*
  %v3_d6cc52 = load i8, i8* %v2_d6cc51, align 1
  %v2_d6d054 = icmp eq i8 %v3_d6cc52, 0
  %v1_d6d456 = add i32 %v2_d6b8, 2
  br i1 %v2_d6d054, label %dec_label_pc_d70c, label %dec_label_pc_d6dc

dec_label_pc_d6dc:                                ; preds = %dec_label_pc_d6cc.preheader, %dec_label_pc_d6cc.backedge
  %v0_d70c86 = phi i32 [ %v0_d70c85, %dec_label_pc_d6cc.backedge ], [ %v1_d6b4, %dec_label_pc_d6cc.preheader ]
  %v0_d6f4.pr = phi i32 [ %v0_d6f4.pr71, %dec_label_pc_d6cc.backedge ], [ %v1_d6b4, %dec_label_pc_d6cc.preheader ]
  %v0_da10 = phi i32 [ %v0_da1074, %dec_label_pc_d6cc.backedge ], [ %v1_d6b4, %dec_label_pc_d6cc.preheader ]
  %v0_d6d482 = phi i32 [ %v1_d6d4, %dec_label_pc_d6cc.backedge ], [ %v1_d6d456, %dec_label_pc_d6cc.preheader ]
  %v0_d704 = phi i32 [ %v0_d6cc, %dec_label_pc_d6cc.backedge ], [ %v3_d6b8, %dec_label_pc_d6cc.preheader ]
  %v1_d6e0.in = phi i8 [ %v3_d6cc, %dec_label_pc_d6cc.backedge ], [ %v3_d6cc52, %dec_label_pc_d6cc.preheader ]
  %v7_d6dc = icmp eq i8 %v1_d6e0.in, 9
  br i1 %v7_d6dc, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_d6dc
  %v8_d6e0 = icmp eq i8 %v1_d6e0.in, 32
  br i1 %v8_d6e0, label %.thread23.thread35, label %dec_label_pc_d6f4

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_d700

.thread23:                                        ; preds = %dec_label_pc_d6dc
  br label %dec_label_pc_d700

dec_label_pc_d6f4:                                ; preds = %bb135
  %v7_d6f4 = icmp eq i32 %v0_d6f4.pr, 1
  br i1 %v7_d6f4, label %dec_label_pc_da10, label %dec_label_pc_d6fc

dec_label_pc_d6fc:                                ; preds = %dec_label_pc_da10, %dec_label_pc_d6f4
  %v0_d70079 = phi i32 [ %v1_da10, %dec_label_pc_da10 ], [ %v0_da10, %dec_label_pc_d6f4 ]
  br label %dec_label_pc_d700

dec_label_pc_d700:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d6fc
  %v0_d700 = phi i32 [ %v0_da10, %.thread23.thread35 ], [ %v0_da10, %.thread23 ], [ %v0_d70079, %dec_label_pc_d6fc ]
  %v0_d6f4.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d6fc ]
  %v7_d708 = icmp sgt i32 %v0_d700, 6
  br i1 %v7_d708, label %dec_label_pc_d70c, label %dec_label_pc_d6cc.backedge

dec_label_pc_d70c:                                ; preds = %dec_label_pc_d6cc.backedge, %dec_label_pc_d700, %dec_label_pc_d6cc.preheader
  %v1_d75c = phi i32 [ %v1_d6d456, %dec_label_pc_d6cc.preheader ], [ %v1_d6d4, %dec_label_pc_d6cc.backedge ], [ %v0_d6d482, %dec_label_pc_d700 ]
  %v0_d70c = phi i32 [ %v1_d6b4, %dec_label_pc_d6cc.preheader ], [ %v0_d70c85, %dec_label_pc_d6cc.backedge ], [ %v0_d70c86, %dec_label_pc_d700 ]
  %v2_d70c = icmp eq i32 %v0_d70c, 0
  br i1 %v2_d70c, label %dec_label_pc_d5e4.backedge, label %dec_label_pc_d718

dec_label_pc_d718:                                ; preds = %dec_label_pc_d70c
  %v2_d720 = add i32 %v1_d75c, %v2_d644
  %v1_d724 = add i32 %v2_d720, -545
  %v2_d724 = inttoptr i32 %v1_d724 to i8*
  %v3_d724 = load i8, i8* %v2_d724, align 1
  %v2_d728 = icmp eq i8 %v3_d724, 0
  br i1 %v2_d728, label %dec_label_pc_d758, label %bb136

bb136:                                            ; preds = %dec_label_pc_d718
  %v8_d72c = icmp eq i8 %v3_d724, 32
  br i1 %v8_d72c, label %dec_label_pc_d758, label %dec_label_pc_d734

dec_label_pc_d734:                                ; preds = %bb136
  %v2_d734 = add i32 %v1_d75c, %v1_d6b8
  br label %dec_label_pc_d738

dec_label_pc_d738:                                ; preds = %bb137, %dec_label_pc_d734
  %v0_d74428 = phi i32 [ %v1_d744, %bb137 ], [ %v1_d75c, %dec_label_pc_d734 ]
  %v0_d738 = phi i32 [ %v1_d738, %bb137 ], [ %v2_d734, %dec_label_pc_d734 ]
  %v1_d738 = add i32 %v0_d738, 1
  %v2_d738 = inttoptr i32 %v1_d738 to i8*
  %v3_d738 = load i8, i8* %v2_d738, align 1
  %v2_d73c = icmp eq i8 %v3_d738, 0
  br i1 %v2_d73c, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_d738
  %v1_d74429 = add i32 %v0_d74428, 1
  br label %dec_label_pc_d74c

bb137:                                            ; preds = %dec_label_pc_d738
  %v8_d740 = icmp eq i8 %v3_d738, 32
  %v1_d744 = add i32 %v0_d74428, 1
  br i1 %v8_d740, label %dec_label_pc_d74c, label %dec_label_pc_d738

dec_label_pc_d74c:                                ; preds = %bb137, %.thread27
  %v1_d754 = phi i32 [ %v1_d74429, %.thread27 ], [ %v1_d744, %bb137 ]
  %v2_d754 = add i32 %v1_d754, %v2_d644
  br label %dec_label_pc_d758

dec_label_pc_d758:                                ; preds = %dec_label_pc_d718, %bb136, %dec_label_pc_d74c
  %v2_d764 = phi i32 [ %v2_d720, %dec_label_pc_d718 ], [ %v2_d720, %bb136 ], [ %v2_d754, %dec_label_pc_d74c ]
  %v2_d75c = add i32 %v1_d75c, %v1_d6b8
  store i32 %v2_d75c, i32* @r4, align 4
  %v3_d764 = add i32 %v2_d764, -545
  %v4_d764 = inttoptr i32 %v3_d764 to i8*
  store i8 0, i8* %v4_d764, align 1
  %v1_d768 = inttoptr i32 %v2_d75c to i8*
  %v2_d768 = call i32 @function_ff04(i8* %v1_d768)
  %v8_d770 = icmp sgt i32 %v2_d768, 15
  br i1 %v8_d770, label %dec_label_pc_d5e4.backedge, label %dec_label_pc_d774

dec_label_pc_d774:                                ; preds = %dec_label_pc_d758
  %v0_d778 = load i32, i32* @r4, align 4
  %v2_d77c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d77c, i32* @r0, align 4
  %v2_d780 = bitcast i32* %stack_var_-52 to i8*
  %v3_d780 = call i32 @function_ff2c(i8* %v2_d780, i32 %v0_d778)
  br label %dec_label_pc_d784

dec_label_pc_d784.loopexit:                       ; preds = %dec_label_pc_d5e4.backedge, %dec_label_pc_d5e4.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d784

dec_label_pc_d784:                                ; preds = %dec_label_pc_d784.loopexit, %dec_label_pc_d774
  %v1_d794.pre-phi = phi i8* [ %.pre99, %dec_label_pc_d784.loopexit ], [ %v2_d780, %dec_label_pc_d774 ]
  %v2_d790.pre-phi = phi i32 [ %.pre, %dec_label_pc_d784.loopexit ], [ %v2_d77c, %dec_label_pc_d774 ]
  %v0_d784 = load i32, i32* @r8, align 4
  %v1_d788 = call i32 @function_108c4(i32 %v0_d784)
  %v2_d794 = call i32 @function_ff04(i8* %v1_d794.pre-phi)
  store i32 %v2_d794, i32* @r4, align 4
  %v2_d798 = icmp eq i32 %v2_d794, 0
  br i1 %v2_d798, label %dec_label_pc_d9e8, label %dec_label_pc_d7a0

dec_label_pc_d7a0:                                ; preds = %dec_label_pc_d784
  %v3_d7a8 = call i32 @function_f4fc(i32 6, i32* null)
  store i32 %v3_d7a8, i32* @r0, align 4
  %v1_d7ac = call i32 @function_10ccc(i32 %v3_d7a8)
  store i32 %v1_d7ac, i32* @r8, align 4
  %v2_d7b0 = icmp eq i32 %v1_d7ac, 0
  br i1 %v2_d7b0, label %dec_label_pc_d9e0, label %dec_label_pc_d7c0.preheader

dec_label_pc_d7c0.preheader:                      ; preds = %dec_label_pc_d7a0
  store i32 0, i32* @r5, align 4
  %v1_d7c445 = inttoptr i32 %v1_d7ac to i32*
  %v2_d7c446 = call i32 @function_10dc8(i32* %v1_d7c445)
  %v2_d7c848 = icmp eq i32 %v2_d7c446, 0
  br i1 %v2_d7c848, label %dec_label_pc_d9d4, label %dec_label_pc_d7d0.preheader

dec_label_pc_d7c0.loopexit:                       ; preds = %dec_label_pc_d7d8, %dec_label_pc_d7ec, %dec_label_pc_d854
  %v0_d7c0 = load i32, i32* @r8, align 4
  %v1_d7c4 = inttoptr i32 %v0_d7c0 to i32*
  %v2_d7c4 = call i32 @function_10dc8(i32* %v1_d7c4)
  %v2_d7c8 = icmp eq i32 %v2_d7c4, 0
  br i1 %v2_d7c8, label %dec_label_pc_d9d4, label %dec_label_pc_d7d0.preheader

dec_label_pc_d7d0.preheader:                      ; preds = %dec_label_pc_d7c0.preheader, %dec_label_pc_d7c0.loopexit
  %v0_d7d894 = phi i32 [ %v2_d7c4, %dec_label_pc_d7c0.loopexit ], [ %v2_d7c446, %dec_label_pc_d7c0.preheader ]
  br label %dec_label_pc_d7d0

dec_label_pc_d7d0:                                ; preds = %dec_label_pc_d7d0.preheader, %dec_label_pc_d9bc
  %v0_d7e4 = phi i32 [ %v0_d7d894, %dec_label_pc_d7d0.preheader ], [ %v2_d9c8, %dec_label_pc_d9bc ]
  %v0_d7d0 = load i32, i32* @r5, align 4
  %v2_d7d0 = icmp eq i32 %v0_d7d0, 0
  br i1 %v2_d7d0, label %dec_label_pc_d7d8, label %dec_label_pc_d9d4

dec_label_pc_d7d8:                                ; preds = %dec_label_pc_d7d0
  %v1_d7d8 = add i32 %v0_d7e4, 11
  %v2_d7d8 = inttoptr i32 %v1_d7d8 to i8*
  %v3_d7d8 = load i8, i8* %v2_d7d8, align 1
  %v4_d7d8 = zext i8 %v3_d7d8 to i32
  %v1_d7dc = add nsw i32 %v4_d7d8, -48
  store i32 %v1_d7d8, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d7dc, 9
  br i1 %tmp, label %dec_label_pc_d7c0.loopexit, label %dec_label_pc_d7ec

dec_label_pc_d7ec:                                ; preds = %dec_label_pc_d7d8
  %v3_d7f4 = call i32 @function_f4fc(i32 6, i32* null)
  store i32 %v2_d518, i32* @r0, align 4
  %v3_d800 = call i32 @function_ff2c(i8* %v2_d538, i32 %v3_d7f4)
  %v2_d808 = call i32 @function_ff04(i8* %v2_d538)
  %v0_d80c = load i32, i32* @r7, align 4
  %v0_d810 = load i32, i32* @sl, align 4
  %v2_d810 = add i32 %v0_d810, %v2_d808
  store i32 %v2_d810, i32* @r0, align 4
  %v2_d814 = inttoptr i32 %v2_d810 to i8*
  %v3_d814 = call i32 @function_ff2c(i8* %v2_d814, i32 %v0_d80c)
  %v2_d81c = call i32 @function_ff04(i8* %v2_d538)
  %v0_d820 = load i32, i32* @r5, align 4
  store i32 %v2_d81c, i32* @r4, align 4
  %v2_d82c = inttoptr i32 %v0_d820 to i32*
  %v3_d82c = call i32 @function_f4fc(i32 7, i32* %v2_d82c)
  %v0_d834 = load i32, i32* @sl, align 4
  %v1_d834 = load i32, i32* @r4, align 4
  %v2_d834 = add i32 %v1_d834, %v0_d834
  store i32 %v2_d834, i32* @r0, align 4
  %v2_d838 = inttoptr i32 %v2_d834 to i8*
  %v3_d838 = call i32 @function_ff2c(i8* %v2_d838, i32 %v3_d82c)
  %v4_d848 = call i32 @function_10ab8(i8* %v2_d538, i32 %v2_d52c, i32 4096)
  %v7_d84c = icmp eq i32 %v4_d848, -1
  br i1 %v7_d84c, label %dec_label_pc_d7c0.loopexit, label %dec_label_pc_d854

dec_label_pc_d854:                                ; preds = %dec_label_pc_d7ec
  %v0_d854 = load i32, i32* @r5, align 4
  %v2_d85c = inttoptr i32 %v0_d854 to i32*
  %v3_d85c = call i32 @function_f4fc(i32 6, i32* %v2_d85c)
  store i32 %v2_d518, i32* @r0, align 4
  %v3_d868 = call i32 @function_ff2c(i8* %v2_d538, i32 %v3_d85c)
  %v2_d870 = call i32 @function_ff04(i8* %v2_d538)
  %v0_d874 = load i32, i32* @r7, align 4
  %v0_d878 = load i32, i32* @sl, align 4
  %v2_d878 = add i32 %v0_d878, %v2_d870
  store i32 %v2_d878, i32* @r0, align 4
  %v2_d87c = inttoptr i32 %v2_d878 to i8*
  %v3_d87c = call i32 @function_ff2c(i8* %v2_d87c, i32 %v0_d874)
  %v2_d884 = call i32 @function_ff04(i8* %v2_d538)
  %v0_d888 = load i32, i32* @r5, align 4
  store i32 %v2_d884, i32* @r4, align 4
  %v2_d894 = inttoptr i32 %v0_d888 to i32*
  %v3_d894 = call i32 @function_f4fc(i32 9, i32* %v2_d894)
  %v0_d89c = load i32, i32* @sl, align 4
  %v1_d89c = load i32, i32* @r4, align 4
  %v2_d89c = add i32 %v1_d89c, %v0_d89c
  store i32 %v2_d89c, i32* @r0, align 4
  %v2_d8a0 = inttoptr i32 %v2_d89c to i8*
  %v3_d8a0 = call i32 @function_ff2c(i8* %v2_d8a0, i32 %v3_d894)
  store i32 %v2_d518, i32* @r0, align 4
  %v1_d8a8 = call i32 @function_10ccc(i32 %v2_d518)
  store i32 %v1_d8a8, i32* @sb, align 4
  %v2_d8ac = icmp eq i32 %v1_d8a8, 0
  br i1 %v2_d8ac, label %dec_label_pc_d7c0.loopexit, label %dec_label_pc_d8b4.preheader

dec_label_pc_d8b4.preheader:                      ; preds = %dec_label_pc_d854
  %v1_d8b840 = inttoptr i32 %v1_d8a8 to i32*
  %v2_d8b841 = call i32 @function_10dc8(i32* %v1_d8b840)
  store i32 %v2_d8b841, i32* @r6, align 4
  %v2_d8bc43 = icmp eq i32 %v2_d8b841, 0
  br i1 %v2_d8bc43, label %dec_label_pc_d9bc, label %dec_label_pc_d8ccthread-pre-split

dec_label_pc_d8b4.loopexit:                       ; preds = %dec_label_pc_d8d4, %dec_label_pc_d96c
  %v0_d8b4 = load i32, i32* @sb, align 4
  %v1_d8b8 = inttoptr i32 %v0_d8b4 to i32*
  %v2_d8b8 = call i32 @function_10dc8(i32* %v1_d8b8)
  store i32 %v2_d8b8, i32* @r6, align 4
  %v2_d8bc = icmp eq i32 %v2_d8b8, 0
  br i1 %v2_d8bc, label %dec_label_pc_d9bc, label %dec_label_pc_d8ccthread-pre-split

dec_label_pc_d8ccthread-pre-split:                ; preds = %dec_label_pc_d8b4.preheader, %dec_label_pc_d8b4.loopexit
  %v0_d8cc.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d8cc

dec_label_pc_d8cc:                                ; preds = %dec_label_pc_d8ccthread-pre-split, %dec_label_pc_d994
  %v0_d8cc = phi i32 [ %v0_d8cc.pr, %dec_label_pc_d8ccthread-pre-split ], [ 1, %dec_label_pc_d994 ]
  %v2_d8cc = icmp eq i32 %v0_d8cc, 0
  br i1 %v2_d8cc, label %dec_label_pc_d8d4, label %dec_label_pc_d9bc

dec_label_pc_d8d4:                                ; preds = %dec_label_pc_d8cc
  %v2_d8d4 = call i32 @function_ffa4(i32 %v2_d52c, i32 4096)
  %v0_d8d8 = load i32, i32* @r5, align 4
  %v2_d8e0 = inttoptr i32 %v0_d8d8 to i32*
  %v3_d8e0 = call i32 @function_f4fc(i32 6, i32* %v2_d8e0)
  store i32 %v2_d518, i32* @r0, align 4
  %v3_d8ec = call i32 @function_ff2c(i8* %v2_d538, i32 %v3_d8e0)
  %v2_d8f4 = call i32 @function_ff04(i8* %v2_d538)
  %v0_d8f8 = load i32, i32* @r7, align 4
  %v0_d8fc = load i32, i32* @sl, align 4
  %v2_d8fc = add i32 %v0_d8fc, %v2_d8f4
  store i32 %v2_d8fc, i32* @r0, align 4
  %v2_d900 = inttoptr i32 %v2_d8fc to i8*
  %v3_d900 = call i32 @function_ff2c(i8* %v2_d900, i32 %v0_d8f8)
  %v2_d908 = call i32 @function_ff04(i8* %v2_d538)
  %v0_d90c = load i32, i32* @r5, align 4
  store i32 %v2_d908, i32* @r4, align 4
  %v2_d918 = inttoptr i32 %v0_d90c to i32*
  %v3_d918 = call i32 @function_f4fc(i32 9, i32* %v2_d918)
  %v0_d920 = load i32, i32* @sl, align 4
  %v1_d920 = load i32, i32* @r4, align 4
  %v2_d920 = add i32 %v1_d920, %v0_d920
  store i32 %v2_d920, i32* @r0, align 4
  %v2_d924 = inttoptr i32 %v2_d920 to i8*
  %v3_d924 = call i32 @function_ff2c(i8* %v2_d924, i32 %v3_d918)
  %v2_d92c = call i32 @function_ff04(i8* %v2_d538)
  %v0_d934 = load i32, i32* @sl, align 4
  %v2_d934 = add i32 %v0_d934, %v2_d92c
  store i32 %v2_d934, i32* @r0, align 4
  %v2_d938 = inttoptr i32 %v2_d934 to i8*
  %v3_d938 = call i32 @function_ff2c(i8* %v2_d938, i32 ptrtoint ([2 x i8]* @global_var_13190.23 to i32))
  %v2_d940 = call i32 @function_ff04(i8* %v2_d538)
  %v0_d944 = load i32, i32* @r6, align 4
  %v1_d944 = add i32 %v0_d944, 11
  %v0_d948 = load i32, i32* @sl, align 4
  %v2_d948 = add i32 %v0_d948, %v2_d940
  store i32 %v2_d948, i32* @r0, align 4
  %v2_d94c = inttoptr i32 %v2_d948 to i8*
  %v3_d94c = call i32 @function_ff2c(i8* %v2_d94c, i32 %v1_d944)
  %v4_d95c = call i32 @function_10ab8(i8* %v2_d538, i32 %v2_d52c, i32 4096)
  %v7_d960 = icmp eq i32 %v4_d95c, -1
  br i1 %v7_d960, label %dec_label_pc_d8b4.loopexit, label %dec_label_pc_d96c

dec_label_pc_d96c:                                ; preds = %dec_label_pc_d8d4
  %v2_d96c = call i32 @function_ff04(i8* %v2_d550)
  store i32 %v2_d96c, i32* @r1, align 4
  %v4_d980 = call i32 @function_10258(i8* %v2_d550, i32 %v2_d96c, i32 %v2_d790.pre-phi)
  %v7_d984 = icmp eq i32 %v4_d980, -1
  br i1 %v7_d984, label %dec_label_pc_d8b4.loopexit, label %dec_label_pc_d994

dec_label_pc_d994:                                ; preds = %dec_label_pc_d96c
  %v0_d98c = load i32, i32* @r7, align 4
  %v2_d994 = inttoptr i32 %v0_d98c to i8*
  %v3_d994 = call i32 @function_10030(i8* %v2_d994, i32 10)
  %v2_d99c = call i32 @function_109c4(i32 %v3_d994, i32 9)
  %v0_d9a0 = load i32, i32* @sb, align 4
  %v1_d9a4 = inttoptr i32 %v0_d9a0 to i32*
  %v2_d9a4 = call i32 @function_10dc8(i32* %v1_d9a4)
  store i32 %v2_d9a4, i32* @r6, align 4
  %v2_d9a8 = icmp eq i32 %v2_d9a4, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_d9a8, label %dec_label_pc_d9bc, label %dec_label_pc_d8cc

dec_label_pc_d9bc:                                ; preds = %dec_label_pc_d8b4.loopexit, %dec_label_pc_d994, %dec_label_pc_d8cc, %dec_label_pc_d8b4.preheader
  %v0_d9bc = load i32, i32* @sb, align 4
  %v1_d9c0 = inttoptr i32 %v0_d9bc to i32*
  %v2_d9c0 = call i32 @function_10c18(i32* %v1_d9c0)
  %v0_d9c4 = load i32, i32* @r8, align 4
  %v1_d9c8 = inttoptr i32 %v0_d9c4 to i32*
  %v2_d9c8 = call i32 @function_10dc8(i32* %v1_d9c8)
  %v2_d9cc = icmp eq i32 %v2_d9c8, 0
  br i1 %v2_d9cc, label %dec_label_pc_d9d4, label %dec_label_pc_d7d0

dec_label_pc_d9d4:                                ; preds = %dec_label_pc_d7c0.loopexit, %dec_label_pc_d9bc, %dec_label_pc_d7d0, %dec_label_pc_d7c0.preheader
  %v0_d9d4 = load i32, i32* @r8, align 4
  %v1_d9d8 = inttoptr i32 %v0_d9d4 to i32*
  %v2_d9d8 = call i32 @function_10c18(i32* %v1_d9d8)
  %v0_d9dc = load i32, i32* @r5, align 4
  %v1_d9dc = urem i32 %v0_d9dc, 256
  br label %dec_label_pc_d9e0

dec_label_pc_d9e0:                                ; preds = %dec_label_pc_d7a0, %dec_label_pc_d9d4
  %storemerge = phi i32 [ %v1_d9dc, %dec_label_pc_d9d4 ], [ 0, %dec_label_pc_d7a0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d9e4 = call i32 @function_11cf4(i32 1)
  br label %dec_label_pc_d9e8

dec_label_pc_d9e8:                                ; preds = %dec_label_pc_d784, %dec_label_pc_d9e0
  %v1_d9ec = call i32 @function_f528(i32 6)
  %v1_d9f4 = call i32 @function_f528(i32 7)
  %v1_d9fc = call i32 @function_f528(i32 9)
  br label %dec_label_pc_da00

dec_label_pc_da00:                                ; preds = %dec_label_pc_d5b4, %dec_label_pc_d9e8
  %v0_da00 = load i32, i32* @r4, align 4
  %v2_da0c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_da0c, i32* @r4, align 4
  store i32 %v6_d504, i32* @r5, align 4
  store i32 %v9_d504, i32* @r6, align 4
  store i32 %v12_d504, i32* @r7, align 4
  store i32 %v15_d504, i32* @r8, align 4
  store i32 %v18_d504, i32* @sb, align 4
  store i32 %v21_d504, i32* @sl, align 4
  store i32 %v24_d504, i32* @fp, align 4
  ret i32 %v0_da00

dec_label_pc_da10:                                ; preds = %dec_label_pc_d6f4
  %v1_da10 = add i32 %v0_da10, 1
  store i32 %v1_da10, i32* @lr, align 4
  %v7_da14 = icmp eq i32 %v0_da10, 0
  br i1 %v7_da14, label %dec_label_pc_da1c, label %dec_label_pc_d6fc

dec_label_pc_da1c:                                ; preds = %dec_label_pc_da10
  %v1_da1c = add i32 %v0_d704, 3
  %v2_da1c = inttoptr i32 %v1_da1c to i8*
  %v3_da1c = load i8, i8* %v2_da1c, align 1
  %v7_da20 = icmp eq i8 %v3_da1c, 65
  br i1 %v7_da20, label %dec_label_pc_da30, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_da1c
  br label %dec_label_pc_d6cc.backedge

dec_label_pc_da30:                                ; preds = %dec_label_pc_da1c
  store i32 %v1_da10, i32* @r4, align 4
  br label %dec_label_pc_d6cc.backedge

dec_label_pc_d6cc.backedge:                       ; preds = %.thread33, %dec_label_pc_da30, %dec_label_pc_d700
  %v0_d70c85 = phi i32 [ %v1_da10, %dec_label_pc_da30 ], [ %v0_d70c86, %dec_label_pc_d700 ], [ %v0_d70c86, %.thread33 ]
  %v0_da1074 = phi i32 [ %v1_da10, %dec_label_pc_da30 ], [ %v0_d700, %dec_label_pc_d700 ], [ %v1_da10, %.thread33 ]
  %v0_d6f4.pr71 = phi i32 [ 0, %dec_label_pc_da30 ], [ %v0_d6f4.pr72, %dec_label_pc_d700 ], [ 0, %.thread33 ]
  %v0_d6cc = add i32 %v0_d704, 1
  %v1_d6cc = add i32 %v0_d704, 3
  %v2_d6cc = inttoptr i32 %v1_d6cc to i8*
  %v3_d6cc = load i8, i8* %v2_d6cc, align 1
  %v2_d6d0 = icmp eq i8 %v3_d6cc, 0
  %v1_d6d4 = add i32 %v0_d6d482, 1
  br i1 %v2_d6d0, label %dec_label_pc_d70c, label %dec_label_pc_d6dc

dec_label_pc_da40:                                ; preds = %dec_label_pc_d504
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d5b4

; uselistorder directives
  uselistorder i32 %v1_d6d4, { 1, 0 }
  uselistorder i8 %v3_d6cc, { 1, 0 }
  uselistorder i32 %v0_d70c85, { 1, 0 }
  uselistorder i32 %v1_da10, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d9c8, { 1, 0 }
  uselistorder i32 %v1_d738, { 1, 0 }
  uselistorder i32 %v0_d74428, { 1, 0 }
  uselistorder i32 %v1_d75c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d700, { 1, 0 }
  uselistorder i32 %v0_d6d482, { 1, 0 }
  uselistorder i32 %v0_da10, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d70c86, { 1, 2, 0 }
  uselistorder i32 %v1_d6d456, { 1, 0 }
  uselistorder i32 %v2_d6b8, { 1, 0 }
  uselistorder i32 %v1_d6b4, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d67013, { 1, 0, 2 }
  uselistorder i32 %v0_d660, { 1, 0 }
  uselistorder i32 %v1_d640, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_d5d4, { 1, 2, 0 }
  uselistorder i32 %v2_d52c, { 1, 0, 2 }
  uselistorder i32 %v2_d518, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_10030, { 1, 0, 2, 3, 4 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_13190.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_1015c, { 1, 0 }
  uselistorder label %dec_label_pc_d6cc.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_da00, { 1, 0 }
  uselistorder label %dec_label_pc_d9e8, { 1, 0 }
  uselistorder label %dec_label_pc_d9e0, { 1, 0 }
  uselistorder label %dec_label_pc_d9d4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d9bc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d8cc, { 1, 0 }
  uselistorder label %dec_label_pc_d8ccthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d8b4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d7d0, { 1, 0 }
  uselistorder label %dec_label_pc_d7d0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d7c0.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d758, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d700, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d6dc, { 1, 0 }
  uselistorder label %dec_label_pc_d680, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d5e4.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d634, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d5fc, { 1, 0 }
  uselistorder label %dec_label_pc_d5b4, { 1, 0 }
}

define i32 @function_da70(i32 %arg1) local_unnamed_addr {
dec_label_pc_da70:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_da70 = load i32, i32* @r4, align 4
  store i32 %v3_da70, i32* %stack_var_-36, align 4
  %v6_da70 = load i32, i32* @r5, align 4
  %v9_da70 = load i32, i32* @r6, align 4
  %v2_da80 = call i32 @function_10b94(i32* null)
  store i32 %v2_da80, i32* @r7, align 4
  %v0_da88 = call i32 @function_108f0()
  %v7_da8c = icmp eq i32 %v0_da88, -1
  %. = zext i1 %v7_da8c to i32
  %tmp212 = icmp slt i32 %v0_da88, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1bcc4.88 to i32), i32* %r3.global-to-local, align 4
  %v2_daa8 = icmp eq i32 %storemerge174, 0
  store i32 %v0_da88, i32* @global_var_1bcc4.88, align 4
  br i1 %v2_daa8, label %dec_label_pc_dac0, label %dec_label_pc_dab4

dec_label_pc_dab4:                                ; preds = %dec_label_pc_dc3c, %dec_label_pc_db24, %dec_label_pc_da70
  %v29_dabc = phi i32 [ %v3_dbc8, %dec_label_pc_db24 ], [ %v0_da88, %dec_label_pc_da70 ], [ 0, %dec_label_pc_dc3c ]
  store i32 %v6_da70, i32* @r5, align 4
  store i32 %v9_da70, i32* @r6, align 4
  ret i32 %v29_dabc

dec_label_pc_dac0:                                ; preds = %dec_label_pc_da70
  %v2_dac0 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_dac0, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_dad8 = call i32 @function_d504(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_dae4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_daec = load i32, i32* @r5, align 4
  store i32 %v0_daec, i32* %r2.global-to-local, align 4
  %v3_daf8 = call i32 @function_111c0(i32 %v0_dae4, i32 1, i32 %v0_daec)
  %v7_dafc = icmp eq i32 %v3_daf8, -1
  store i32 %v3_daf8, i32* @r4, align 4
  br i1 %v7_dafc, label %dec_label_pc_db24, label %dec_label_pc_db08

dec_label_pc_db08:                                ; preds = %dec_label_pc_dac0
  %v2_db0c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_db0c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_db14 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_db14 = call i32 @function_10ff0(i32 %v3_daf8, %sockaddr* %v3_db14, i32 16)
  %v0_db18 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_db20 = call i32 @function_110a4(i32 %v0_db18, i32 1)
  br label %dec_label_pc_db24

dec_label_pc_db24:                                ; preds = %dec_label_pc_dac0, %dec_label_pc_db08
  %v1_db28 = call i32 @function_11cf4(i32 5)
  %v1_db30 = call i32 @function_11370(i32 4096)
  store i32 ptrtoint (i32* @global_var_1bc60.90 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bcc0.92 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_db30, i32* %r2.global-to-local, align 4
  %v0_db40 = load i32, i32* @r5, align 4
  %v1_db40 = trunc i32 %v0_db40 to i8
  %v3_db40 = inttoptr i32 %v1_db30 to i8*
  store i8 %v1_db40, i8* %v3_db40, align 1
  %v0_db48 = load i32, i32* @r5, align 4
  %v1_db48 = load i32, i32* %r3.global-to-local, align 4
  %v2_db48 = inttoptr i32 %v1_db48 to i32*
  store i32 %v0_db48, i32* %v2_db48, align 4
  %v0_db4c = load i32, i32* %r2.global-to-local, align 4
  %v1_db4c = load i32, i32* %r1.global-to-local, align 4
  %v2_db4c = inttoptr i32 %v1_db4c to i32*
  store i32 %v0_db4c, i32* %v2_db4c, align 4
  %v1_db50 = call i32 @function_f5e0(i32 6)
  %v1_db58 = call i32 @function_f5e0(i32 7)
  %v0_db5c = load i32, i32* @r5, align 4
  store i32 %v0_db5c, i32* %r1.global-to-local, align 4
  %v2_db64 = inttoptr i32 %v0_db5c to i32*
  %v3_db64 = call i32 @function_f4fc(i32 6, i32* %v2_db64)
  %v2_db6c = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_db6c, i32* @r8, align 4
  store i32 %v3_db64, i32* %r1.global-to-local, align 4
  store i32 %v2_db6c, i32* @r0, align 4
  %v2_db78 = bitcast i32* %stack_var_-8408 to i8*
  %v3_db78 = call i32 @function_ff2c(i8* %v2_db78, i32 %v3_db64)
  %v0_db7c = load i32, i32* @r8, align 4
  %v2_db7c = add i32 %v0_db7c, %v3_db78
  store i32 %v2_db7c, i32* @r4, align 4
  %v0_db80 = call i32 @function_1091c()
  %v2_db88 = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_db88, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_db90 = trunc i32 %v0_db80 to i8
  %v4_db90 = call i32 @function_103f8(i8 %v3_db90, i32 10, i32 %v2_db88)
  store i32 %v4_db90, i32* %r1.global-to-local, align 4
  %v0_db98 = load i32, i32* @r4, align 4
  store i32 %v0_db98, i32* @r0, align 4
  %v2_db9c = inttoptr i32 %v0_db98 to i8*
  %v3_db9c = call i32 @function_ff2c(i8* %v2_db9c, i32 %v4_db90)
  %v0_dba0 = load i32, i32* @r5, align 4
  store i32 %v0_dba0, i32* %r1.global-to-local, align 4
  %v0_dba4 = load i32, i32* @r4, align 4
  %v2_dba4 = add i32 %v0_dba4, %v3_db9c
  store i32 %v2_dba4, i32* @r4, align 4
  %v2_dbac = inttoptr i32 %v0_dba0 to i32*
  %v3_dbac = call i32 @function_f4fc(i32 7, i32* %v2_dbac)
  store i32 %v3_dbac, i32* %r1.global-to-local, align 4
  %v0_dbb4 = load i32, i32* @r4, align 4
  store i32 %v0_dbb4, i32* @r0, align 4
  %v2_dbb8 = inttoptr i32 %v0_dbb4 to i8*
  %v3_dbb8 = call i32 @function_ff2c(i8* %v2_dbb8, i32 %v3_dbac)
  %v0_dbbc = load i32, i32* @r5, align 4
  store i32 %v0_dbbc, i32* %r1.global-to-local, align 4
  store i32 %v3_dbb8, i32* @r6, align 4
  %v3_dbc8 = call i32 @function_109f0(i8* %v2_db78, i32 %v0_dbbc)
  %v7_dbcc = icmp eq i32 %v3_dbc8, -1
  br i1 %v7_dbcc, label %dec_label_pc_dab4, label %dec_label_pc_dbd4

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_db24
  %v1_dbd4 = call i32 @function_108c4(i32 %v3_dbc8)
  %v1_dbdc = call i32 @function_f528(i32 6)
  %v1_dbe4 = call i32 @function_f528(i32 7)
  store i32 ptrtoint (i32* @global_var_1bcc0.92 to i32), i32* %r3.global-to-local, align 4
  %v2_dbf0 = load i32, i32* @global_var_1bcc0.92, align 4
  store i32 %v2_dbf0, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_dbfc = call i32 @function_10ab8(i8* %v2_db78, i32 %v2_dbf0, i32 4095)
  %v7_dc00 = icmp eq i32 %v4_dbfc, -1
  br i1 %v7_dc00, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_dbd4
  %v0_dc0c54 = load i32, i32* @r4, align 4
  %v1_dc0c55 = load i32, i32* @r6, align 4
  %v2_dc0c56 = add i32 %v1_dc0c55, %v0_dc0c54
  store i32 %v2_dc0c56, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_dbd4
  %v3_dc08 = load i32, i32* @global_var_1bcc0.92, align 4
  store i32 %v3_dc08, i32* %r3.global-to-local, align 4
  %v0_dc0c = load i32, i32* @r4, align 4
  %v1_dc0c = load i32, i32* @r6, align 4
  %v2_dc0c = add i32 %v1_dc0c, %v0_dc0c
  store i32 %v2_dc0c, i32* %r1.global-to-local, align 4
  %v1_dc10 = load i32, i32* @r5, align 4
  %v2_dc10 = trunc i32 %v1_dc10 to i8
  %v5_dc10 = add i32 %v3_dc08, %v4_dbfc
  %v6_dc10 = inttoptr i32 %v5_dc10 to i8*
  store i8 %v2_dc10, i8* %v6_dc10, align 1
  %v1_dc14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_dc14 = phi i32 [ %v2_dc0c56, %.thread5.thread ], [ %v1_dc14.pre, %bb215 ]
  %v0_dc14 = load i32, i32* @r8, align 4
  %v2_dc14 = sub i32 %v1_dc14, %v0_dc14
  store i32 %v2_dc14, i32* %r1.global-to-local, align 4
  %v2_dc1c = call i32 @function_ffa4(i32 %v2_db6c, i32 %v2_dc14)
  %v2_dc28 = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_dc28, i32* %r1.global-to-local, align 4
  store i32 %v2_dc28, i32* %stack_var_-8428, align 4
  %v0_dc30 = load i32, i32* @r5, align 4
  %v0_dc34 = load i32, i32* @r7, align 4
  store i32 %v0_dc34, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_dd30 = ptrtoint i32* %stack_var_-152 to i32
  %v2_dd34 = bitcast i32* %stack_var_-152 to i8*
  %v2_dd80 = ptrtoint i32* %stack_var_-216 to i32
  %v2_dd84 = bitcast i32* %stack_var_-216 to i8*
  %v2_def4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_df04 = ptrtoint i32* %stack_var_-48 to i32
  %v2_df18 = ptrtoint i32* %stack_var_-52 to i32
  %v2_df2c = ptrtoint i32* %stack_var_-40 to i32
  %v2_df44 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ddfc = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dcf4, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_dc30, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_dcf4 ]
  %v1_dc40 = call i32 @function_f5e0(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc4c = call i32 @function_f4fc(i32 6, i32* null)
  store i32 %v3_dc4c, i32* @r0, align 4
  %v1_dc50 = call i32 @function_10ccc(i32 %v3_dc4c)
  store i32 %v1_dc50, i32* @sl, align 4
  %v2_dc54 = icmp eq i32 %v1_dc50, 0
  br i1 %v2_dc54, label %dec_label_pc_dab4, label %dec_label_pc_dc5c

dec_label_pc_dc5c:                                ; preds = %dec_label_pc_dc3c
  %v1_dc60 = call i32 @function_f528(i32 6)
  %v0_dc64117 = load i32, i32* @sl, align 4
  %v1_dc68118 = inttoptr i32 %v0_dc64117 to i32*
  %v2_dc68119 = call i32 @function_10dc8(i32* %v1_dc68118)
  %v2_dc6c121 = icmp eq i32 %v2_dc68119, 0
  br i1 %v2_dc6c121, label %dec_label_pc_dcf4, label %dec_label_pc_dc74.preheader

dec_label_pc_dc74.preheader:                      ; preds = %dec_label_pc_dc5c, %dec_label_pc_dc64.backedge
  %v0_dc74133 = phi i32 [ %v2_dc68, %dec_label_pc_dc64.backedge ], [ %v2_dc68119, %dec_label_pc_dc5c ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_dc64.backedge ], [ %stack_var_-8420.0, %dec_label_pc_dc5c ]
  br label %dec_label_pc_dc74

dec_label_pc_dc74:                                ; preds = %dec_label_pc_dc74.preheader, %dec_label_pc_dcdc
  %v0_dc84 = phi i32 [ %v2_dce8, %dec_label_pc_dcdc ], [ %v0_dc74133, %dec_label_pc_dc74.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_dc98, %dec_label_pc_dcdc ], [ %stack_var_-8420.1122, %dec_label_pc_dc74.preheader ]
  %v1_dc74 = add i32 %v0_dc84, 11
  %v2_dc74 = inttoptr i32 %v1_dc74 to i8*
  %v3_dc74 = load i8, i8* %v2_dc74, align 1
  %v4_dc74 = zext i8 %v3_dc74 to i32
  %v1_dc78 = add nsw i32 %v4_dc74, -48
  store i32 %v1_dc78, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_dc78, 9
  br i1 %tmp, label %dec_label_pc_dc64.backedge, label %dec_label_pc_dc84

dec_label_pc_dc84:                                ; preds = %dec_label_pc_dc74
  store i32 %v1_dc74, i32* @r6, align 4
  %v2_dc8c = call i32 @function_11ab4(i8* %v2_dc74)
  %v0_dc94 = load i32, i32* @r5, align 4
  %v1_dc98 = add i32 %stack_var_-8420.2, 1
  store i32 %v1_dc98, i32* %r2.global-to-local, align 4
  store i32 %v2_dc8c, i32* @r7, align 4
  %v5_dca4 = icmp slt i32 %v0_dc94, %v2_dc8c
  %v2_dd04 = call i32 @function_10b94(i32* null)
  br i1 %v5_dca4, label %dec_label_pc_dd00, label %dec_label_pc_dca8

dec_label_pc_dca8:                                ; preds = %dec_label_pc_dc84
  %v0_dcb0 = load i32, i32* @r4, align 4
  %v2_dcb0 = sub i32 %v2_dd04, %v0_dcb0
  %v7_dcb8 = icmp slt i32 %v2_dcb0, 601
  br i1 %v7_dcb8, label %dec_label_pc_dcc0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_dca8
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_dc64.backedge

dec_label_pc_dcc0:                                ; preds = %dec_label_pc_dca8
  %v0_dcc0 = load i32, i32* @r7, align 4
  %v7_dcc4 = icmp slt i32 %v0_dcc0, 401
  br i1 %v7_dcc4, label %dec_label_pc_dc64.backedge, label %dec_label_pc_dcc8

dec_label_pc_dcc8:                                ; preds = %dec_label_pc_dcc0
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_dcd0 = call i32 @function_10620(i32 %v1_dc98, i32 10)
  %v2_dcd4 = icmp eq i32 %v2_dcd0, 0
  br i1 %v2_dcd4, label %dec_label_pc_dcdc, label %dec_label_pc_dc64.backedge

dec_label_pc_dcdc:                                ; preds = %dec_label_pc_dcc8
  %v1_dce0 = call i32 @function_11cf4(i32 1)
  %v0_dce4 = load i32, i32* @sl, align 4
  %v1_dce8 = inttoptr i32 %v0_dce4 to i32*
  %v2_dce8 = call i32 @function_10dc8(i32* %v1_dce8)
  %v2_dcec = icmp eq i32 %v2_dce8, 0
  br i1 %v2_dcec, label %dec_label_pc_dcf4, label %dec_label_pc_dc74

dec_label_pc_dcf4:                                ; preds = %dec_label_pc_dc64.backedge, %dec_label_pc_dcdc, %dec_label_pc_dc5c
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_dc5c ], [ %v1_dc98, %dec_label_pc_dcdc ], [ %stack_var_-8420.1.be, %dec_label_pc_dc64.backedge ]
  %v0_dcf4 = load i32, i32* @sl, align 4
  %v1_dcf8 = inttoptr i32 %v0_dcf4 to i32*
  %v2_dcf8 = call i32 @function_10c18(i32* %v1_dcf8)
  br label %dec_label_pc_dc3c

dec_label_pc_dd00:                                ; preds = %dec_label_pc_dc84
  %v1_dd10 = call i32 @function_f5e0(i32 6)
  %v1_dd18 = call i32 @function_f5e0(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd24 = call i32 @function_f4fc(i32 6, i32* null)
  store i32 %v3_dd24, i32* %r1.global-to-local, align 4
  store i32 %v2_dd30, i32* @r0, align 4
  %v3_dd34 = call i32 @function_ff2c(i8* %v2_dd34, i32 %v3_dd24)
  store i32 %v2_dd30, i32* %r3.global-to-local, align 4
  %v2_dd40 = add i32 %v3_dd34, %v2_dd30
  store i32 %v2_dd40, i32* %r5.global-to-local, align 4
  %v0_dd44 = load i32, i32* @r6, align 4
  store i32 %v0_dd44, i32* %r1.global-to-local, align 4
  store i32 %v2_dd40, i32* @r0, align 4
  %v2_dd4c = inttoptr i32 %v2_dd40 to i8*
  %v3_dd4c = call i32 @function_ff2c(i8* %v2_dd4c, i32 %v0_dd44)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd5c = call i32 @function_f4fc(i32 7, i32* null)
  store i32 %v3_dd5c, i32* %r1.global-to-local, align 4
  %v0_dd64 = load i32, i32* %r5.global-to-local, align 4
  %v2_dd64 = add i32 %v3_dd4c, %v0_dd64
  store i32 %v2_dd64, i32* @r0, align 4
  %v2_dd68 = inttoptr i32 %v2_dd64 to i8*
  %v3_dd68 = call i32 @function_ff2c(i8* %v2_dd68, i32 %v3_dd5c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd74 = call i32 @function_f4fc(i32 6, i32* null)
  store i32 %v3_dd74, i32* %r1.global-to-local, align 4
  store i32 %v2_dd80, i32* @r0, align 4
  %v3_dd84 = call i32 @function_ff2c(i8* %v2_dd84, i32 %v3_dd74)
  %v2_dd90 = add i32 %v3_dd84, %v2_dd80
  store i32 %v2_dd90, i32* @r5, align 4
  %v0_dd94 = load i32, i32* @r6, align 4
  store i32 %v0_dd94, i32* %r1.global-to-local, align 4
  store i32 %v2_dd90, i32* @r0, align 4
  %v2_dd9c = inttoptr i32 %v2_dd90 to i8*
  %v3_dd9c = call i32 @function_ff2c(i8* %v2_dd9c, i32 %v0_dd94)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_dd9c, i32* @r4, align 4
  %v3_ddac = call i32 @function_f4fc(i32 11, i32* null)
  store i32 %v3_ddac, i32* %r1.global-to-local, align 4
  %v0_ddb4 = load i32, i32* @r5, align 4
  %v1_ddb4 = load i32, i32* @r4, align 4
  %v2_ddb4 = add i32 %v1_ddb4, %v0_ddb4
  store i32 %v2_ddb4, i32* @r0, align 4
  %v2_ddb8 = inttoptr i32 %v2_ddb4 to i8*
  %v3_ddb8 = call i32 @function_ff2c(i8* %v2_ddb8, i32 %v3_ddac)
  %v1_ddc0 = call i32 @function_f528(i32 6)
  %v1_ddc8 = call i32 @function_f528(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dddc = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_dddc, i32* %r1.global-to-local, align 4
  %v4_dde0 = call i32 @function_10ab8(i8* %v2_dd34, i32 %v2_dddc, i32 4095)
  %v7_dde8 = icmp eq i32 %v4_dde0, -1
  store i32 %v4_dde0, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_dde8, label %dec_label_pc_deb0, label %dec_label_pc_ddf8

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_dd00
  store i32 %v2_ddfc, i32* %r1.global-to-local, align 4
  %v2_de00 = add i32 %v4_dde0, %v2_ddfc
  store i32 %v2_de00, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_de08 = add i32 %v2_de00, -4276
  %v5_de08 = inttoptr i32 %v4_de08 to i8*
  store i8 0, i8* %v5_de08, align 1
  %v1_de10 = call i32 @function_f5e0(i32 10)
  %v0_de14 = load i32, i32* @r4, align 4
  store i32 %v0_de14, i32* %r1.global-to-local, align 4
  %v2_de1c = inttoptr i32 %v0_de14 to i32*
  %v3_de1c = call i32 @function_f4fc(i32 10, i32* %v2_de1c)
  %v0_de20 = load i32, i32* @r5, align 4
  %v1_de20 = add i32 %v0_de20, -1
  store i32 %v1_de20, i32* @r1, align 4
  store i32 %v3_de1c, i32* %r2.global-to-local, align 4
  %v2_de28 = load i32, i32* %stack_var_-8428, align 4
  %v3_de2c = inttoptr i32 %v2_de28 to i8*
  %v4_de2c = call i32 @function_10258(i8* %v3_de2c, i32 %v1_de20, i32 %v3_de1c)
  %v7_de30 = icmp eq i32 %v4_de2c, -1
  br i1 %v7_de30, label %dec_label_pc_de4c, label %dec_label_pc_de38

dec_label_pc_de38:                                ; preds = %dec_label_pc_ddf8
  %v2_de38 = load i32, i32* %stack_var_-8428, align 4
  %v1_de3c = inttoptr i32 %v2_de38 to i8*
  %v2_de3c = call i32 @function_10bc0(i8* %v1_de3c)
  %v0_de40 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_de48 = call i32 @function_109c4(i32 %v0_de40, i32 9)
  br label %dec_label_pc_de4c

dec_label_pc_de4c:                                ; preds = %dec_label_pc_ddf8, %dec_label_pc_de38
  %v1_de50 = call i32 @function_f528(i32 10)
  %v0_de54 = call i32 @function_1091c()
  %v0_de58 = load i32, i32* @r7, align 4
  %v9_de58 = icmp eq i32 %v0_de58, %v0_de54
  br i1 %v9_de58, label %dec_label_pc_de84, label %dec_label_pc_de60

dec_label_pc_de60:                                ; preds = %dec_label_pc_de4c
  %v0_de60 = call i32 @function_10948()
  %v0_de64 = load i32, i32* @r7, align 4
  %v9_de64 = icmp eq i32 %v0_de64, %v0_de60
  br i1 %v9_de64, label %dec_label_pc_de84, label %dec_label_pc_de6c

dec_label_pc_de6c:                                ; preds = %dec_label_pc_de60
  store i32 ptrtoint (i32* @global_var_1bcc0.92 to i32), i32* %r2.global-to-local, align 4
  %v2_de70 = load i32, i32* %stack_var_-8428, align 4
  %v2_de74 = load i32, i32* @global_var_1bcc0.92, align 4
  store i32 %v2_de74, i32* %r1.global-to-local, align 4
  %v2_de78 = inttoptr i32 %v2_de70 to i8*
  %v3_de78 = call i32 @function_102e4(i8* %v2_de78, i32 %v2_de74)
  %v2_de7c = icmp eq i32 %v3_de78, 0
  br i1 %v2_de7c, label %dec_label_pc_de90, label %dec_label_pc_de6c.dec_label_pc_de84_crit_edge

dec_label_pc_de6c.dec_label_pc_de84_crit_edge:    ; preds = %dec_label_pc_de6c
  %v0_de88.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_de84

dec_label_pc_de84:                                ; preds = %dec_label_pc_de6c.dec_label_pc_de84_crit_edge, %dec_label_pc_de60, %dec_label_pc_de4c
  %v0_de88 = phi i32 [ %v0_de88.pre, %dec_label_pc_de6c.dec_label_pc_de84_crit_edge ], [ %v0_de60, %dec_label_pc_de60 ], [ %v0_de54, %dec_label_pc_de4c ]
  store i32 %v2_dd04, i32* @r4, align 4
  store i32 %v0_de88, i32* @r5, align 4
  br label %dec_label_pc_dc64.backedge

dec_label_pc_dc64.backedge:                       ; preds = %dec_label_pc_dcc8, %dec_label_pc_dcc0, %dec_label_pc_dc74, %dec_label_pc_de84, %dec_label_pc_e134, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_dc98, %dec_label_pc_e134 ], [ %v1_dc98, %dec_label_pc_de84 ], [ %v1_dc98, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_dc74 ], [ %v1_dc98, %dec_label_pc_dcc0 ], [ %v1_dc98, %dec_label_pc_dcc8 ]
  %v0_dc64 = load i32, i32* @sl, align 4
  %v1_dc68 = inttoptr i32 %v0_dc64 to i32*
  %v2_dc68 = call i32 @function_10dc8(i32* %v1_dc68)
  %v2_dc6c = icmp eq i32 %v2_dc68, 0
  br i1 %v2_dc6c, label %dec_label_pc_dcf4, label %dec_label_pc_dc74.preheader

dec_label_pc_de90:                                ; preds = %dec_label_pc_de6c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_de94 = load i32, i32* %stack_var_-8428, align 4
  %v2_de98 = inttoptr i32 %v2_de94 to i8*
  %v3_de98 = call i32 @function_109f0(i8* %v2_de98, i32 0)
  %v7_de9c = icmp eq i32 %v3_de98, -1
  store i32 %v3_de98, i32* @r4, align 4
  br i1 %v7_de9c, label %dec_label_pc_e168, label %dec_label_pc_dea8

dec_label_pc_dea8:                                ; preds = %dec_label_pc_de90, %dec_label_pc_e168
  %v0_dea8 = phi i32 [ %v3_de98, %dec_label_pc_de90 ], [ %v0_dea8.pre, %dec_label_pc_e168 ]
  %v1_deac = call i32 @function_108c4(i32 %v0_dea8)
  br label %dec_label_pc_deb0

dec_label_pc_deb0:                                ; preds = %dec_label_pc_dd00, %dec_label_pc_dea8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_debc = call i32 @function_109f0(i8* %v2_dd34, i32 0)
  %v7_dec0 = icmp eq i32 %v3_debc, -1
  br i1 %v7_dec0, label %dec_label_pc_e134, label %dec_label_pc_decc

dec_label_pc_decc:                                ; preds = %dec_label_pc_deb0
  %v1_ded0 = call i32 @function_f5e0(i32 12)
  %v1_ded8 = call i32 @function_f5e0(i32 13)
  %v1_dee0 = call i32 @function_f5e0(i32 14)
  %v1_dee8 = call i32 @function_f5e0(i32 15)
  %v1_def0 = call i32 @function_f5e0(i32 16)
  store i32 %v2_def4, i32* %r1.global-to-local, align 4
  %v3_defc = call i32 @function_f4fc(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_df04, i32* %r1.global-to-local, align 4
  store i32 %v3_defc, i32* @r5, align 4
  %v3_df10 = call i32 @function_f4fc(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_df18, i32* %r1.global-to-local, align 4
  store i32 %v3_df10, i32* @r6, align 4
  %v3_df24 = call i32 @function_f4fc(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_df2c, i32* %r1.global-to-local, align 4
  store i32 %v3_df24, i32* @sb, align 4
  %v3_df38 = call i32 @function_f4fc(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_df38, i32* @fp, align 4
  store i32 %v2_df44, i32* %r1.global-to-local, align 4
  %v3_df4c = call i32 @function_f4fc(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_db6c, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_df60114 = call i32 @function_10a8c(i32 %v3_debc, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_df60114, 1
  br i1 %tmp217, label %dec_label_pc_e178, label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_decc, %dec_label_pc_df54.backedge
  %v0_dff4105 = phi i32 [ %v4_df60, %dec_label_pc_df54.backedge ], [ %v4_df60114, %dec_label_pc_decc ]
  store i32 %v2_dac0, i32* %r3.global-to-local, align 4
  %v3_df70 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_df70, i32* @r4, align 4
  %v5_df78 = icmp slt i32 %v0_dff4105, %v3_df70
  br i1 %v5_df78, label %dec_label_pc_df88, label %dec_label_pc_e034.lr.ph

dec_label_pc_e034.lr.ph:                          ; preds = %dec_label_pc_df6c
  %v1_e02c70 = add i32 %v0_dff4105, -1
  store i32 %v1_e02c70, i32* %r1.global-to-local, align 4
  %v0_e034.pre = load i32, i32* @r5, align 4
  %v1_e038.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e034

dec_label_pc_df88:                                ; preds = %dec_label_pc_e02c.backedge, %dec_label_pc_df6c
  %v3_df8c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_df8c, i32* @r4, align 4
  %v5_df94 = icmp slt i32 %v0_dff4105, %v3_df8c
  br i1 %v5_df94, label %dec_label_pc_dfa4, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_df88
  %v1_e06079 = add i32 %v0_dff4105, -1
  store i32 %v1_e06079, i32* %r1.global-to-local, align 4
  %v2_e06080 = icmp eq i32 %v0_dff4105, 0
  br i1 %v2_e06080, label %dec_label_pc_dfa4, label %dec_label_pc_e068.lr.ph

dec_label_pc_e068.lr.ph:                          ; preds = %.thread28
  %v0_e068.pre = load i32, i32* @r6, align 4
  %v1_e06c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e068

dec_label_pc_dfa4:                                ; preds = %dec_label_pc_e060.backedge, %.thread28, %dec_label_pc_df88
  store i32 %v2_dac0, i32* %r1.global-to-local, align 4
  %v3_dfa8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_dfa8, i32* @r4, align 4
  %v5_dfb0 = icmp slt i32 %v0_dff4105, %v3_dfa8
  br i1 %v5_dfb0, label %dec_label_pc_dfc0, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_dfa4
  %v1_e09488 = add i32 %v0_dff4105, -1
  store i32 %v1_e09488, i32* %r1.global-to-local, align 4
  %v2_e09489 = icmp eq i32 %v0_dff4105, 0
  br i1 %v2_e09489, label %dec_label_pc_dfc0, label %dec_label_pc_e09c.lr.ph

dec_label_pc_e09c.lr.ph:                          ; preds = %.thread37
  %v0_e09c.pre = load i32, i32* @sb, align 4
  %v1_e0a0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e09c

dec_label_pc_dfc0:                                ; preds = %dec_label_pc_e094.backedge, %.thread37, %dec_label_pc_dfa4
  store i32 %v2_dac0, i32* %r2.global-to-local, align 4
  %v3_dfc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dfc4, i32* @r4, align 4
  %v5_dfcc = icmp slt i32 %v0_dff4105, %v3_dfc4
  br i1 %v5_dfcc, label %dec_label_pc_dfdc, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_dfc0
  %v1_e0c897 = add i32 %v0_dff4105, -1
  store i32 %v1_e0c897, i32* %r1.global-to-local, align 4
  %v2_e0c898 = icmp eq i32 %v0_dff4105, 0
  br i1 %v2_e0c898, label %dec_label_pc_dfdc, label %dec_label_pc_e0d0.lr.ph

dec_label_pc_e0d0.lr.ph:                          ; preds = %.thread46
  %v0_e0d0.pre = load i32, i32* @fp, align 4
  %v1_e0d4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e0d0

dec_label_pc_dfdc:                                ; preds = %dec_label_pc_e0c8.backedge, %.thread46, %dec_label_pc_dfc0
  store i32 %v2_dac0, i32* %r3.global-to-local, align 4
  %v3_dfe0 = load i32, i32* %stack_var_-56, align 4
  %v5_dfe8 = icmp slt i32 %v0_dff4105, %v3_dfe0
  br i1 %v5_dfe8, label %dec_label_pc_df54.backedge, label %.thread52

dec_label_pc_df54.backedge:                       ; preds = %dec_label_pc_e018, %.thread52, %dec_label_pc_dfdc
  store i32 %v2_db6c, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_df60 = call i32 @function_10a8c(i32 %v3_debc, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_df60, 1
  br i1 %tmp218, label %dec_label_pc_e178, label %dec_label_pc_df6c

.thread52:                                        ; preds = %dec_label_pc_dfdc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dff4107 = icmp eq i32 %v0_dff4105, 0
  br i1 %v2_dff4107, label %dec_label_pc_df54.backedge, label %dec_label_pc_dffc.lr.ph

dec_label_pc_dffc.lr.ph:                          ; preds = %.thread52
  %v1_e004.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_dffc

dec_label_pc_dffc:                                ; preds = %dec_label_pc_e018, %dec_label_pc_dffc.lr.ph
  %v0_dff4.in = phi i32 [ %v0_dff4105, %dec_label_pc_dffc.lr.ph ], [ %v0_dff4, %dec_label_pc_e018 ]
  %v0_e018 = phi i32 [ 0, %dec_label_pc_dffc.lr.ph ], [ %v1_e018, %dec_label_pc_e018 ]
  %v0_e00c = phi i32 [ 0, %dec_label_pc_dffc.lr.ph ], [ %v1_e00c., %dec_label_pc_e018 ]
  %v0_dff4 = add i32 %v0_dff4.in, -1
  store i32 %v3_df4c, i32* %r3.global-to-local, align 4
  %v2_e000 = add i32 %v0_e00c, %v3_df4c
  %v3_e000 = inttoptr i32 %v2_e000 to i8*
  %v4_e000 = load i8, i8* %v3_e000, align 1
  %v6_e000 = zext i8 %v4_e000 to i32
  store i32 %v6_e000, i32* %r2.global-to-local, align 4
  %v2_e004 = add i32 %v0_e018, %v1_e004.pre
  %v3_e004 = inttoptr i32 %v2_e004 to i8*
  %v4_e004 = load i8, i8* %v3_e004, align 1
  %v6_e004 = zext i8 %v4_e004 to i32
  store i32 %v6_e004, i32* %r3.global-to-local, align 4
  %v9_e008 = icmp eq i8 %v4_e004, %v4_e000
  %v1_e00c = add i32 %v0_e00c, 1
  %v1_e00c. = select i1 %v9_e008, i32 %v1_e00c, i32 0
  store i32 %v1_e00c., i32* %r1.global-to-local, align 4
  br i1 %v9_e008, label %dec_label_pc_e0f0, label %dec_label_pc_e018

dec_label_pc_e018:                                ; preds = %dec_label_pc_e0f0, %dec_label_pc_dffc
  %v1_e018 = add i32 %v0_e018, 1
  %v2_dff4 = icmp eq i32 %v0_dff4, 0
  br i1 %v2_dff4, label %dec_label_pc_df54.backedge, label %dec_label_pc_dffc

dec_label_pc_e020:                                ; preds = %dec_label_pc_e034
  %v9_e020 = icmp eq i32 %v3_df70, %v1_e040.
  br i1 %v9_e020, label %dec_label_pc_e0f8, label %dec_label_pc_e02c.backedge

dec_label_pc_e02c.backedge:                       ; preds = %dec_label_pc_e034, %dec_label_pc_e020
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_e02c = add i32 %v0_e02c, -1
  store i32 %v1_e02c, i32* %r1.global-to-local, align 4
  %v2_e02c = icmp eq i32 %v0_e02c, 0
  br i1 %v2_e02c, label %dec_label_pc_df88, label %dec_label_pc_e034

dec_label_pc_e034:                                ; preds = %dec_label_pc_e02c.backedge, %dec_label_pc_e034.lr.ph
  %v0_e02c = phi i32 [ %v1_e02c70, %dec_label_pc_e034.lr.ph ], [ %v1_e02c, %dec_label_pc_e02c.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_e034.lr.ph ], [ %storemerge125, %dec_label_pc_e02c.backedge ]
  %v0_e040 = phi i32 [ 0, %dec_label_pc_e034.lr.ph ], [ %v1_e040., %dec_label_pc_e02c.backedge ]
  %v2_e034 = add i32 %v0_e040, %v0_e034.pre
  %v3_e034 = inttoptr i32 %v2_e034 to i8*
  %v4_e034 = load i8, i8* %v3_e034, align 1
  %v6_e034 = zext i8 %v4_e034 to i32
  store i32 %v6_e034, i32* %r2.global-to-local, align 4
  %v2_e038 = add i32 %storemerge125.in, %v1_e038.pre
  %v3_e038 = inttoptr i32 %v2_e038 to i8*
  %v4_e038 = load i8, i8* %v3_e038, align 1
  %v6_e038 = zext i8 %v4_e038 to i32
  store i32 %v6_e038, i32* %r3.global-to-local, align 4
  %v9_e03c = icmp eq i8 %v4_e038, %v4_e034
  %v1_e040 = add i32 %v0_e040, 1
  %v1_e040. = select i1 %v9_e03c, i32 %v1_e040, i32 0
  br i1 %v9_e03c, label %dec_label_pc_e020, label %dec_label_pc_e02c.backedge

dec_label_pc_e054:                                ; preds = %dec_label_pc_e068
  %v9_e054 = icmp eq i32 %v3_df8c, %v1_e074.
  br i1 %v9_e054, label %dec_label_pc_e0f8, label %dec_label_pc_e060.backedge

dec_label_pc_e060.backedge:                       ; preds = %dec_label_pc_e068, %dec_label_pc_e054
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_e060 = add i32 %v0_e060, -1
  store i32 %v1_e060, i32* %r1.global-to-local, align 4
  %v2_e060 = icmp eq i32 %v0_e060, 0
  br i1 %v2_e060, label %dec_label_pc_dfa4, label %dec_label_pc_e068

dec_label_pc_e068:                                ; preds = %dec_label_pc_e060.backedge, %dec_label_pc_e068.lr.ph
  %v0_e060 = phi i32 [ %v1_e06079, %dec_label_pc_e068.lr.ph ], [ %v1_e060, %dec_label_pc_e060.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_e068.lr.ph ], [ %storemerge124, %dec_label_pc_e060.backedge ]
  %v0_e074 = phi i32 [ 0, %dec_label_pc_e068.lr.ph ], [ %v1_e074., %dec_label_pc_e060.backedge ]
  %v2_e068 = add i32 %v0_e074, %v0_e068.pre
  %v3_e068 = inttoptr i32 %v2_e068 to i8*
  %v4_e068 = load i8, i8* %v3_e068, align 1
  %v6_e068 = zext i8 %v4_e068 to i32
  store i32 %v6_e068, i32* %r2.global-to-local, align 4
  %v2_e06c = add i32 %storemerge124.in, %v1_e06c.pre
  %v3_e06c = inttoptr i32 %v2_e06c to i8*
  %v4_e06c = load i8, i8* %v3_e06c, align 1
  %v6_e06c = zext i8 %v4_e06c to i32
  store i32 %v6_e06c, i32* %r3.global-to-local, align 4
  %v9_e070 = icmp eq i8 %v4_e06c, %v4_e068
  %v1_e074 = add i32 %v0_e074, 1
  %v1_e074. = select i1 %v9_e070, i32 %v1_e074, i32 0
  br i1 %v9_e070, label %dec_label_pc_e054, label %dec_label_pc_e060.backedge

dec_label_pc_e088:                                ; preds = %dec_label_pc_e09c
  %v9_e088 = icmp eq i32 %v3_dfa8, %v1_e0a8.
  br i1 %v9_e088, label %dec_label_pc_e0f8, label %dec_label_pc_e094.backedge

dec_label_pc_e094.backedge:                       ; preds = %dec_label_pc_e09c, %dec_label_pc_e088
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_e094 = add i32 %v0_e094, -1
  store i32 %v1_e094, i32* %r1.global-to-local, align 4
  %v2_e094 = icmp eq i32 %v0_e094, 0
  br i1 %v2_e094, label %dec_label_pc_dfc0, label %dec_label_pc_e09c

dec_label_pc_e09c:                                ; preds = %dec_label_pc_e094.backedge, %dec_label_pc_e09c.lr.ph
  %v0_e094 = phi i32 [ %v1_e09488, %dec_label_pc_e09c.lr.ph ], [ %v1_e094, %dec_label_pc_e094.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_e09c.lr.ph ], [ %storemerge123, %dec_label_pc_e094.backedge ]
  %v0_e0a8 = phi i32 [ 0, %dec_label_pc_e09c.lr.ph ], [ %v1_e0a8., %dec_label_pc_e094.backedge ]
  %v2_e09c = add i32 %v0_e0a8, %v0_e09c.pre
  %v3_e09c = inttoptr i32 %v2_e09c to i8*
  %v4_e09c = load i8, i8* %v3_e09c, align 1
  %v6_e09c = zext i8 %v4_e09c to i32
  store i32 %v6_e09c, i32* %r2.global-to-local, align 4
  %v2_e0a0 = add i32 %storemerge123.in, %v1_e0a0.pre
  %v3_e0a0 = inttoptr i32 %v2_e0a0 to i8*
  %v4_e0a0 = load i8, i8* %v3_e0a0, align 1
  %v6_e0a0 = zext i8 %v4_e0a0 to i32
  store i32 %v6_e0a0, i32* %r3.global-to-local, align 4
  %v9_e0a4 = icmp eq i8 %v4_e0a0, %v4_e09c
  %v1_e0a8 = add i32 %v0_e0a8, 1
  %v1_e0a8. = select i1 %v9_e0a4, i32 %v1_e0a8, i32 0
  br i1 %v9_e0a4, label %dec_label_pc_e088, label %dec_label_pc_e094.backedge

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e0d0
  %v9_e0bc = icmp eq i32 %v3_dfc4, %v1_e0dc.
  br i1 %v9_e0bc, label %dec_label_pc_e0f8, label %dec_label_pc_e0c8.backedge

dec_label_pc_e0c8.backedge:                       ; preds = %dec_label_pc_e0d0, %dec_label_pc_e0bc
  %storemerge = add i32 %storemerge.in, 1
  %v1_e0c8 = add i32 %v0_e0c8, -1
  store i32 %v1_e0c8, i32* %r1.global-to-local, align 4
  %v2_e0c8 = icmp eq i32 %v0_e0c8, 0
  br i1 %v2_e0c8, label %dec_label_pc_dfdc, label %dec_label_pc_e0d0

dec_label_pc_e0d0:                                ; preds = %dec_label_pc_e0c8.backedge, %dec_label_pc_e0d0.lr.ph
  %v0_e0c8 = phi i32 [ %v1_e0c897, %dec_label_pc_e0d0.lr.ph ], [ %v1_e0c8, %dec_label_pc_e0c8.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_e0d0.lr.ph ], [ %storemerge, %dec_label_pc_e0c8.backedge ]
  %v0_e0dc = phi i32 [ 0, %dec_label_pc_e0d0.lr.ph ], [ %v1_e0dc., %dec_label_pc_e0c8.backedge ]
  %v2_e0d0 = add i32 %v0_e0dc, %v0_e0d0.pre
  %v3_e0d0 = inttoptr i32 %v2_e0d0 to i8*
  %v4_e0d0 = load i8, i8* %v3_e0d0, align 1
  %v6_e0d0 = zext i8 %v4_e0d0 to i32
  store i32 %v6_e0d0, i32* %r2.global-to-local, align 4
  %v2_e0d4 = add i32 %storemerge.in, %v1_e0d4.pre
  %v3_e0d4 = inttoptr i32 %v2_e0d4 to i8*
  %v4_e0d4 = load i8, i8* %v3_e0d4, align 1
  %v6_e0d4 = zext i8 %v4_e0d4 to i32
  store i32 %v6_e0d4, i32* %r3.global-to-local, align 4
  %v9_e0d8 = icmp eq i8 %v4_e0d4, %v4_e0d0
  %v1_e0dc = add i32 %v0_e0dc, 1
  %v1_e0dc. = select i1 %v9_e0d8, i32 %v1_e0dc, i32 0
  br i1 %v9_e0d8, label %dec_label_pc_e0bc, label %dec_label_pc_e0c8.backedge

dec_label_pc_e0f0:                                ; preds = %dec_label_pc_dffc
  %v9_e0f0 = icmp eq i32 %v3_dfe0, %v1_e00c.
  br i1 %v9_e0f0, label %dec_label_pc_e0f8, label %dec_label_pc_e018

dec_label_pc_e0f8:                                ; preds = %dec_label_pc_e020, %dec_label_pc_e054, %dec_label_pc_e088, %dec_label_pc_e0bc, %dec_label_pc_e0f0
  %v1_e0fc = call i32 @function_f528(i32 12)
  %v1_e104 = call i32 @function_f528(i32 13)
  %v1_e10c = call i32 @function_f528(i32 14)
  %v1_e114 = call i32 @function_f528(i32 15)
  %v1_e11c = call i32 @function_f528(i32 16)
  %v1_e124 = call i32 @function_108c4(i32 %v3_debc)
  %v0_e128 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e130 = call i32 @function_109c4(i32 %v0_e128, i32 9)
  br label %dec_label_pc_e134

dec_label_pc_e134:                                ; preds = %dec_label_pc_deb0, %dec_label_pc_e178, %dec_label_pc_e0f8
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_e140 = call i32 @function_ffa4(i32 %v2_dd30, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_e150 = call i32 @function_ffa4(i32 %v2_dd80, i32 64)
  %v1_e158 = call i32 @function_11cf4(i32 1)
  store i32 %v2_dd04, i32* @r4, align 4
  %v0_e160 = load i32, i32* @r7, align 4
  store i32 %v0_e160, i32* @r5, align 4
  br label %dec_label_pc_dc64.backedge

dec_label_pc_e168:                                ; preds = %dec_label_pc_de90
  %v0_e168 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e170 = call i32 @function_109c4(i32 %v0_e168, i32 9)
  %v0_dea8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dea8

dec_label_pc_e178:                                ; preds = %dec_label_pc_df54.backedge, %dec_label_pc_decc
  %v1_e17c = call i32 @function_f528(i32 12)
  %v1_e184 = call i32 @function_f528(i32 13)
  %v1_e18c = call i32 @function_f528(i32 14)
  %v1_e194 = call i32 @function_f528(i32 15)
  %v1_e19c = call i32 @function_f528(i32 16)
  %v1_e1a4 = call i32 @function_108c4(i32 %v3_debc)
  br label %dec_label_pc_e134

; uselistorder directives
  uselistorder i32 %v1_e0dc., { 1, 0 }
  uselistorder i1 %v9_e0d8, { 1, 0 }
  uselistorder i32 %v0_e0dc, { 1, 0 }
  uselistorder i32 %v1_e0a8., { 1, 0 }
  uselistorder i1 %v9_e0a4, { 1, 0 }
  uselistorder i32 %v0_e0a8, { 1, 0 }
  uselistorder i32 %v1_e074., { 1, 0 }
  uselistorder i1 %v9_e070, { 1, 0 }
  uselistorder i32 %v0_e074, { 1, 0 }
  uselistorder i32 %v1_e040., { 1, 0 }
  uselistorder i1 %v9_e03c, { 1, 0 }
  uselistorder i32 %v0_e040, { 1, 0 }
  uselistorder i32 %v1_e00c., { 1, 2, 0 }
  uselistorder i1 %v9_e008, { 1, 0 }
  uselistorder i32 %v0_e00c, { 1, 0 }
  uselistorder i32 %v0_e018, { 1, 0 }
  uselistorder i32 %v4_df60, { 1, 0 }
  uselistorder i32 %v3_debc, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_de98, { 1, 2, 0 }
  uselistorder i32 %v2_dc68, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_dde0, { 1, 2, 0 }
  uselistorder i32 %v2_dce8, { 1, 0 }
  uselistorder i32 %v1_dc98, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_dd80, { 1, 0, 2 }
  uselistorder i32 %v2_dd30, { 1, 0, 2, 3 }
  uselistorder i32 %v4_dbfc, { 1, 0 }
  uselistorder i32 %v3_dbc8, { 2, 0, 1 }
  uselistorder i32 %v2_db6c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_daf8, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_da88, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-72, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 6, 7, 9, 10, 11, 13, 14, 0, 17, 12, 8, 16, 4, 2, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 35, 37, 36, 38, 39, 40, 42, 41, 43, 44, 45, 1, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder i32 (i8*, i32, i32)* @function_10258, { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 (i32*)* @function_10c18, { 2, 0, 1 }
  uselistorder i32 (i32*)* @function_10dc8, { 8, 7, 0, 3, 4, 5, 2, 6, 1 }
  uselistorder i32 (i32)* @function_10ccc, { 0, 2, 1 }
  uselistorder i32 (i8*, i32, i32)* @function_10ab8, { 2, 3, 0, 1 }
  uselistorder i32 (i8, i32, i32)* @function_103f8, { 1, 0, 2 }
  uselistorder i32* @global_var_1bcc0.92, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e134, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e0f8, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_df6c, { 1, 0 }
  uselistorder label %dec_label_pc_deb0, { 1, 0 }
  uselistorder label %dec_label_pc_dea8, { 1, 0 }
  uselistorder label %dec_label_pc_dc64.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_de4c, { 1, 0 }
  uselistorder label %dec_label_pc_dc74, { 1, 0 }
  uselistorder label %dec_label_pc_dc74.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_db24, { 1, 0 }
}

define i32 @function_e1b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e1b8:
  store i32 ptrtoint (i32* @global_var_e340.94 to i32), i32* @global_var_1baec.96, align 4
  ret i32 %arg1
}

define i32 @function_e1d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e1d0:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_e1d0 = load i32, i32* @r4, align 4
  %v12_e1d0 = load i32, i32* @r7, align 4
  %v15_e1d0 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_e1ec = call i32 @function_111c0(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1bae4.98 to i32), i32* @r6, align 4
  %v7_e1f4 = icmp eq i32 %v3_e1ec, -1
  store i32 %v3_e1ec, i32* @global_var_1bae4.98, align 4
  br i1 %v7_e1f4, label %dec_label_pc_e2b4, label %dec_label_pc_e200

dec_label_pc_e200:                                ; preds = %dec_label_pc_e1d0
  %v0_e204 = load i32, i32* @r4, align 4
  %v6_e214 = call i32 @function_11190(i32 %v3_e1ec, i32 %v0_e204, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_e218 = load i32, i32* @global_var_1bae4.98, align 4
  store i32 %v2_e218, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_e228 = call i32 @function_107d4(i32 %v2_e218, i32 3)
  %v1_e230 = or i32 %v2_e228, 2048
  store i32 %v1_e230, i32* @r2, align 4
  %v0_e234 = load i32, i32* @r4, align 4
  %v2_e238 = call i32 @function_107d4(i32 %v0_e234, i32 4)
  store i32 ptrtoint (i8** @global_var_1baf0.100 to i32), i32* @r8, align 4
  %v2_e240 = load i8, i8* bitcast (i8** @global_var_1baf0.100 to i8*), align 4
  %v2_e244 = icmp eq i8 %v2_e240, 0
  br i1 %v2_e244, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_e200
  br label %bb

.thread:                                          ; preds = %dec_label_pc_e200
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_e27c = call i32 @function_10e98()
  %v0_e280 = load i32, i32* @r5, align 4
  %v2_e280 = inttoptr i32 %v0_e27c to i32*
  store i32 %v0_e280, i32* %v2_e280, align 4
  %v2_e284 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e284, i32* @r7, align 4
  store i32 %v0_e27c, i32* @r4, align 4
  %v2_e290 = load i32, i32* @global_var_1bae4.98, align 4
  %v3_e298 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_e298 = call i32 @function_10ff0(i32 %v2_e290, %sockaddr* %v3_e298, i32 16)
  %v7_e29c = icmp eq i32 %v4_e298, -1
  br i1 %v7_e29c, label %dec_label_pc_e2bc, label %dec_label_pc_e2a4

dec_label_pc_e2a4:                                ; preds = %bb
  %v2_e2ac = load i32, i32* @global_var_1bae4.98, align 4
  %v2_e2b0 = call i32 @function_110a4(i32 %v2_e2ac, i32 1)
  br label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e1d0, %dec_label_pc_e2c8, %dec_label_pc_e2a4
  %v20_e2b8 = phi i32 [ %v3_e1ec, %dec_label_pc_e1d0 ], [ %v1_e318, %dec_label_pc_e2c8 ], [ %v2_e2b0, %dec_label_pc_e2a4 ]
  store i32 %v3_e1d0, i32* @r4, align 4
  store i32 %v12_e1d0, i32* @r7, align 4
  store i32 %v15_e1d0, i32* @r8, align 4
  ret i32 %v20_e2b8

dec_label_pc_e2bc:                                ; preds = %bb
  %v0_e2bc = load i32, i32* @r4, align 4
  %v1_e2bc = inttoptr i32 %v0_e2bc to i32*
  %v2_e2bc = load i32, i32* %v1_e2bc, align 4
  %v7_e2c0 = icmp eq i32 %v2_e2bc, 99
  br i1 %v7_e2c0, label %dec_label_pc_e320, label %dec_label_pc_e2c8

dec_label_pc_e2c8:                                ; preds = %dec_label_pc_e320, %bb21, %dec_label_pc_e2bc
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_e2e0 = load i32, i32* @global_var_1bae4.98, align 4
  %v4_e2f8 = call i32 @function_1101c(i32 %v2_e2e0, %sockaddr* %v3_e298, i32 16)
  %v1_e300 = call i32 @function_11cf4(i32 5)
  %v2_e304 = load i32, i32* @global_var_1bae4.98, align 4
  %v1_e308 = call i32 @function_108c4(i32 %v2_e304)
  %v1_e314 = call i32 @function_d504(i32 58811)
  %v1_e318 = call i32 @function_e1d0(i32 %v1_e314)
  br label %dec_label_pc_e2b4

dec_label_pc_e320:                                ; preds = %dec_label_pc_e2bc
  %v2_e320 = load i8, i8* bitcast (i8** @global_var_1baf0.100 to i8*), align 4
  %v3_e320 = zext i8 %v2_e320 to i32
  %v1_e324 = load i32, i32* @r5, align 4
  %v9_e324 = icmp eq i32 %v3_e320, %v1_e324
  br i1 %v9_e324, label %dec_label_pc_e2c8, label %bb21

bb21:                                             ; preds = %dec_label_pc_e320
  %v2_e32c = trunc i32 %v1_e324 to i8
  store i8 %v2_e32c, i8* bitcast (i8** @global_var_1baf0.100 to i8*), align 4
  br label %dec_label_pc_e2c8

; uselistorder directives
  uselistorder i32 %v3_e1ec, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d504, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_110a4, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_10ff0, { 0, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1baf0.100 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1baf0.100, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_11190, { 0, 1, 2, 6, 3, 4, 5, 7 }
  uselistorder label %dec_label_pc_e2c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e2b4, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_e340() local_unnamed_addr {
dec_label_pc_e340:
  %stack_var_-16 = alloca i32, align 4
  %v3_e340 = load i32, i32* @r4, align 4
  store i32 %v3_e340, i32* %stack_var_-16, align 4
  %v1_e348 = call i32 @function_f5e0(i32 3)
  %v3_e354 = call i32 @function_f4fc(i32 3, i32* null)
  %v1_e358 = inttoptr i32 %v3_e354 to i8*
  %v2_e358 = call i32 @function_efb0(i8* %v1_e358)
  store i32 %v2_e358, i32* @r5, align 4
  %v1_e364 = call i32 @function_f528(i32 3)
  %v0_e368 = load i32, i32* @r5, align 4
  %v2_e368 = icmp eq i32 %v0_e368, 0
  store i32 ptrtoint (i8** @global_var_1bcc8.103 to i32), i32* @r6, align 4
  br i1 %v2_e368, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_e340
  ret i32 %v1_e364

bb5:                                              ; preds = %dec_label_pc_e340
  %v1_e374 = add i32 %v0_e368, 4
  %v2_e374 = inttoptr i32 %v1_e374 to i32*
  %v3_e374 = load i32, i32* %v2_e374, align 4
  store i32 %v3_e374, i32* @r4, align 4
  %v0_e378 = call i32 @function_eccc()
  %v0_e37c = load i32, i32* @r5, align 4
  %v1_e37c = inttoptr i32 %v0_e37c to i8*
  %v2_e37c = load i8, i8* %v1_e37c, align 1
  %v3_e37c = zext i8 %v2_e37c to i32
  %v2_e380 = call i32 @function_10620(i32 %v0_e378, i32 %v3_e37c)
  %v0_e384 = load i32, i32* @r4, align 4
  %v4_e384 = mul i32 %v2_e380, 4
  %v5_e384 = add i32 %v0_e384, %v4_e384
  %v6_e384 = inttoptr i32 %v5_e384 to i32*
  %v7_e384 = load i32, i32* %v6_e384, align 4
  %v0_e388 = load i32, i32* @r5, align 4
  store i32 %v7_e384, i32* @global_var_1bccc.104, align 4
  %v1_e390 = call i32 @function_ef8c(i32 %v0_e388)
  %v1_e398 = call i32 @function_f5e0(i32 4)
  %v3_e3a4 = call i32 @function_f4fc(i32 4, i32* null)
  %v4_e3a4 = inttoptr i32 %v3_e3a4 to i8*
  %v2_e3a8 = add i32 %v3_e3a4, 1
  %v3_e3a8 = inttoptr i32 %v2_e3a8 to i8*
  %v4_e3a8 = load i8, i8* %v3_e3a8, align 1
  %v3_e3ac = load i8, i8* %v4_e3a4, align 1
  store i8 %v4_e3a8, i8* bitcast (i32* @global_var_1bccb.105 to i8*), align 4
  store i8 %v3_e3ac, i8* bitcast (i32* @global_var_1bcca.106 to i8*), align 4
  %v2_e3c4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e3c4, i32* @r4, align 4
  %v1_e3c8 = call i32 @function_f528(i32 4)
  %v0_e3cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e3cc, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_e3c8

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_e3d0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e3d0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %tmp19 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-1616 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-170 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-106 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e3d0 = load i32, i32* @r4, align 4
  store i32 %v3_e3d0, i32* %stack_var_-36, align 4
  %v15_e3d0 = load i32, i32* @r8, align 4
  %v2_e3e0 = ptrtoint i32* %stack_var_-464 to i32
  store i32 %v2_e3e0, i32* @r4, align 4
  store i32 %arg1, i32* @sb, align 4
  store i32 %v2_e3e0, i32* @r0, align 4
  store i32 %tmp, i32* @fp, align 4
  %v1_e3f0 = call i32 @function_11234(i32 %v2_e3e0)
  store i32 %v2_e3e0, i32* @r0, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_e3fc = call i32 @function_11204(i32 %v2_e3e0, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v2_e3e0, i32* %r1.global-to-local, align 4
  %v3_e40c = bitcast i32* %stack_var_-464 to %_TYPEDEF_sigset_t*
  %v4_e40c = call i32 @function_10b40(i32 0, %_TYPEDEF_sigset_t* %v3_e40c, i32 0)
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e418 = call i32 @function_1124c(i32 17, i32 1)
  store i32 ptrtoint (i32* @global_var_e1b8.108 to i32), i32* %r1.global-to-local, align 4
  %v2_e424 = call i32 @function_1124c(i32 5, i32 ptrtoint (i32* @global_var_e1b8.108 to i32))
  store i32 2, i32* %r1.global-to-local, align 4
  %v4_e430 = call i32 @function_109f0(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_131e0.110, i32 0, i32 0), i32 2)
  %v7_e434 = icmp eq i32 %v4_e430, -1
  store i32 %v4_e430, i32* @r4, align 4
  br i1 %v7_e434, label %dec_label_pc_e6dc, label %dec_label_pc_e440

dec_label_pc_e440:                                ; preds = %dec_label_pc_e6dc, %dec_label_pc_e3d0
  %v0_e454 = phi i32 [ %v4_e6e4, %dec_label_pc_e6dc ], [ %v4_e430, %dec_label_pc_e3d0 ]
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 -2147199228, i32* %r1.global-to-local, align 4
  %v2_e458 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_e458, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_e460 = call i32 @function_10974(i32 %v0_e454, i32 -2147199228, i32 %v2_e458, i32 1, i32 1)
  %v0_e464 = load i32, i32* @r4, align 4
  %v1_e468 = call i32 @function_108c4(i32 %v0_e464)
  br label %dec_label_pc_e46c

dec_label_pc_e46c:                                ; preds = %dec_label_pc_e6dc, %dec_label_pc_e440
  %v2_e470 = call i32 @function_10898(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_13190.23, i32 0, i32 0))
  %v1_e474 = call i32 @function_101bc(i32 %v2_e470)
  store i32 ptrtoint (i8** @global_var_1bcc8.103 to i32), i32* @lr, align 4
  store i8 80, i8* bitcast (i32* @global_var_1bccb.105 to i8*), align 4
  store i32 197803826, i32* %r3.global-to-local, align 4
  store i32 %v1_e474, i32* @global_var_1bcbc.78, align 4
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1bcc8.103 to i8*), align 4
  store i32 197803826, i32* @global_var_1bccc.104, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13234.116 to i32), i32* @r1, align 4
  store i32 18, i32* @r2, align 4
  store i8 0, i8* bitcast (i32* @global_var_1bcc9.117 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1bcca.106 to i8*), align 4
  %v2_e4b4 = ptrtoint i32* %stack_var_-106 to i32
  store i32 %v2_e4b4, i32* @r0, align 4
  %v0_e4b8 = load i32, i32* @fp, align 4
  %v1_e4b8 = inttoptr i32 %v0_e4b8 to i32*
  %v2_e4b8 = load i32, i32* %v1_e4b8, align 4
  store i32 %v2_e4b8, i32* @r8, align 4
  %v4_e4bc = call i32 @function_10ee0(i32 %v2_e4b4, i32 ptrtoint ([3 x i8]* @global_var_13234.116 to i32), i32 18)
  %v2_e4d0 = ptrtoint i32* %stack_var_-208 to i32
  store i32 %v2_e4d0, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_e1d0.120 to i32), i32* %stack_var_-208, align 4
  store i32 65408, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13230.132 to i32), i32* @lr, align 4
  %v13_e4e0 = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v13_e4e0, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_e1b8.108 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_e1b8.108 to i32), i32* %stack_var_-176, align 4
  %v0_e4ec = load i32, i32* @r4, align 4
  store i32 %v0_e4ec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e4f0

dec_label_pc_e4f0:                                ; preds = %dec_label_pc_e4f0, %dec_label_pc_e46c
  %v0_e4fc = phi i32 [ %v2_e4fc, %dec_label_pc_e4f0 ], [ %v0_e4ec, %dec_label_pc_e46c ]
  %v0_e4f0 = phi i32 [ %v1_e4f4, %dec_label_pc_e4f0 ], [ %v0_e4ec, %dec_label_pc_e46c ]
  %v2_e4f0 = add i32 %v0_e4f0, %v2_e4d0
  %v3_e4f0 = inttoptr i32 %v2_e4f0 to i32*
  %v4_e4f0 = load i32, i32* %v3_e4f0, align 4
  store i32 %v4_e4f0, i32* %r3.global-to-local, align 4
  %v1_e4f4 = add i32 %v0_e4f0, 4
  store i32 %v1_e4f4, i32* %r2.global-to-local, align 4
  %v7_e4f8 = icmp eq i32 %v1_e4f4, 28
  %v2_e4fc = add i32 %v4_e4f0, %v0_e4fc
  store i32 %v2_e4fc, i32* @r4, align 4
  br i1 %v7_e4f8, label %dec_label_pc_e504, label %dec_label_pc_e4f0

dec_label_pc_e504:                                ; preds = %dec_label_pc_e4f0
  %v2_e504 = icmp eq i32 %v2_e4fc, 0
  br i1 %v2_e504, label %dec_label_pc_e5e0, label %dec_label_pc_e50c

dec_label_pc_e50c:                                ; preds = %dec_label_pc_e504
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_e510 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_e510, i32* @sl, align 4
  store i32 175, i32* @r6, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v2_e510, i32* @r7, align 4
  %v2_e524 = ptrtoint i32* %stack_var_-36 to i32
  %v0_e534.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e520

dec_label_pc_e520:                                ; preds = %dec_label_pc_e520.dec_label_pc_e520_crit_edge, %dec_label_pc_e50c
  %v3_e538 = phi i32 [ %v3_e538.pre, %dec_label_pc_e520.dec_label_pc_e520_crit_edge ], [ %v2_e510, %dec_label_pc_e50c ]
  %v2_e538 = phi i32 [ %v0_e56c, %dec_label_pc_e520.dec_label_pc_e520_crit_edge ], [ 0, %dec_label_pc_e50c ]
  %v0_e534 = phi i32 [ %v0_e554, %dec_label_pc_e520.dec_label_pc_e520_crit_edge ], [ %v0_e534.pre, %dec_label_pc_e50c ]
  %v1_e528 = phi i32 [ %v1_e574, %dec_label_pc_e520.dec_label_pc_e520_crit_edge ], [ 0, %dec_label_pc_e50c ]
  store i32 %v2_e524, i32* %r2.global-to-local, align 4
  %v2_e528 = add i32 %v1_e528, %v2_e524
  store i32 %v2_e528, i32* %r3.global-to-local, align 4
  %v1_e52c = add i32 %v2_e528, -70
  %v2_e52c = inttoptr i32 %v1_e52c to i8*
  %v3_e52c = load i8, i8* %v2_e52c, align 1
  %v4_e52c = zext i8 %v3_e52c to i32
  store i32 %v4_e52c, i32* %r1.global-to-local, align 4
  %v1_e530 = add i32 %v2_e528, -69
  %v2_e530 = inttoptr i32 %v1_e530 to i8*
  %v3_e530 = load i8, i8* %v2_e530, align 1
  %v4_e530 = zext i8 %v3_e530 to i32
  store i32 %v4_e530, i32* %r2.global-to-local, align 4
  %v4_e538 = add i32 %v2_e538, %v3_e538
  %v5_e538 = inttoptr i32 %v4_e538 to i8*
  store i8 %v3_e530, i8* %v5_e538, align 1
  %v0_e53c = load i32, i32* %r1.global-to-local, align 4
  %v1_e53c = trunc i32 %v0_e53c to i8
  %v2_e53c = load i32, i32* @r7, align 4
  %v3_e53c = add i32 %v2_e53c, 1
  %v4_e53c = inttoptr i32 %v3_e53c to i8*
  store i8 %v1_e53c, i8* %v4_e53c, align 1
  %v0_e540 = load i32, i32* %ip.global-to-local, align 4
  %v1_e540 = add i32 %v0_e540, 2
  store i32 %v1_e540, i32* @r5, align 4
  %v1_e544 = inttoptr i32 %v0_e534 to i8*
  %v2_e544 = call i32 @function_ff04(i8* %v1_e544)
  store i32 %v2_e544, i32* %r1.global-to-local, align 4
  %v0_e54c = load i32, i32* @r5, align 4
  %v2_e550 = call i32 @function_106ec(i32 %v0_e54c, i32 %v2_e544)
  %v0_e554 = load i32, i32* @r8, align 4
  %v2_e554 = add i32 %v0_e554, %v2_e550
  %v3_e554 = inttoptr i32 %v2_e554 to i8*
  %v4_e554 = load i8, i8* %v3_e554, align 1
  %v6_e554 = zext i8 %v4_e554 to i32
  %v0_e558 = load i32, i32* %r4.global-to-local, align 4
  %v2_e558 = mul i32 %v0_e558, 2
  %v1_e55c = add i32 %v2_e558, 14
  %v1_e560 = sub nuw nsw i32 -1, %v6_e554
  %v3_e564 = sdiv i32 %v1_e55c, 2
  %v0_e568 = load i32, i32* @r6, align 4
  %v2_e568 = add i32 %v0_e568, %v1_e560
  store i32 %v2_e568, i32* %r3.global-to-local, align 4
  %v0_e56c = load i32, i32* @r5, align 4
  %v7_e56c = icmp eq i32 %v0_e56c, 12
  %v1_e570 = urem i32 %v2_e568, 256
  store i32 %v1_e570, i32* @r6, align 4
  %v1_e574 = add nsw i32 %v3_e564, -4
  store i32 %v1_e574, i32* %r4.global-to-local, align 4
  %v0_e578 = load i32, i32* @r7, align 4
  %v1_e578 = add i32 %v0_e578, 2
  store i32 %v1_e578, i32* @r7, align 4
  store i32 %v0_e56c, i32* %ip.global-to-local, align 4
  br i1 %v7_e56c, label %dec_label_pc_e584, label %dec_label_pc_e520.dec_label_pc_e520_crit_edge

dec_label_pc_e520.dec_label_pc_e520_crit_edge:    ; preds = %dec_label_pc_e520
  %v3_e538.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_e520

dec_label_pc_e584:                                ; preds = %dec_label_pc_e520
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e58c = call i32 @function_10620(i32 %v1_e570, i32 9)
  %v3_e594 = mul i32 %v2_e58c, 4
  store i32 %v2_e524, i32* %r3.global-to-local, align 4
  %v1_e59c = and i32 %v3_e594, 1020
  %v2_e5a0 = add i32 %v1_e59c, %v2_e524
  store i32 58796, i32* @lr, align 4
  %v1_e5a8 = add i32 %v2_e5a0, -172
  %v2_e5a8 = inttoptr i32 %v1_e5a8 to i32*
  %v3_e5a8 = load i32, i32* %v2_e5a8, align 4
  call void @__pseudo_branch(i32 %v3_e5a8)
  store i32 %v2_e510, i32* %r1.global-to-local, align 4
  %v0_e5b0 = load i32, i32* @r8, align 4
  %v2_e5b4 = inttoptr i32 %v0_e5b0 to i8*
  %v3_e5b4 = call i32 @function_102e4(i8* %v2_e5b4, i32 %v2_e510)
  store i32 %v3_e5b4, i32* @r4, align 4
  store i32 18, i32* %r1.global-to-local, align 4
  %v2_e5c8 = call i32 @function_ffa4(i32 %v2_e4b4, i32 18)
  %v0_e5d0 = load i32, i32* @r5, align 4
  store i32 %v0_e5d0, i32* %r1.global-to-local, align 4
  %v2_e5d4 = call i32 @function_ffa4(i32 %v2_e510, i32 %v0_e5d0)
  %v0_e5d8 = load i32, i32* @r4, align 4
  %v1_e5d8 = urem i32 %v0_e5d8, 256
  %v2_e5d8 = icmp eq i32 %v1_e5d8, 0
  br i1 %v2_e5d8, label %dec_label_pc_e5e0, label %dec_label_pc_ec84

dec_label_pc_e5e0:                                ; preds = %dec_label_pc_e584, %dec_label_pc_e504, %dec_label_pc_ec84
  %v0_e5e0 = phi i32 [ %v2_e5d4, %dec_label_pc_e584 ], [ ptrtoint (i32* @global_var_f528.127 to i32), %dec_label_pc_e504 ], [ %v1_ec88, %dec_label_pc_ec84 ]
  %v1_e5e0 = call i32 @function_e1d0(i32 %v0_e5e0)
  %v1_e5e4 = call i32 @function_ed24(i32 %v1_e5e0)
  %v2_e5ec = ptrtoint i32* %stack_var_-138 to i32
  store i32 32, i32* %r1.global-to-local, align 4
  %v2_e5f4 = call i32 @function_ffa4(i32 %v2_e5ec, i32 32)
  %v0_e5f8 = load i32, i32* @sb, align 4
  %v7_e5f8 = icmp eq i32 %v0_e5f8, 2
  br i1 %v7_e5f8, label %dec_label_pc_ec48, label %dec_label_pc_e600

dec_label_pc_e600:                                ; preds = %dec_label_pc_ec48, %dec_label_pc_e5e0, %dec_label_pc_ec58
  %v0_e600 = call i32 @function_eccc()
  %v1_e604 = mul i32 %v0_e600, 4
  %v3_e608 = and i32 %v1_e604, 12
  %v2_e610 = ptrtoint i32* %stack_var_-170 to i32
  store i32 %v2_e610, i32* @r5, align 4
  %v1_e614 = add nuw nsw i32 %v3_e608, 12
  store i32 %v1_e614, i32* @r4, align 4
  store i32 %v1_e614, i32* %r1.global-to-local, align 4
  %v2_e620 = call i32 @function_ed80(i32 %v2_e610, i32 %v1_e614)
  %v2_e628 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e628, i32* %ip.global-to-local, align 4
  %v1_e62c = load i32, i32* @r4, align 4
  %v2_e62c = add i32 %v1_e62c, %v2_e628
  store i32 %v2_e62c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v2_e610, i32* %r1.global-to-local, align 4
  %v0_e638 = load i32, i32* @fp, align 4
  %v1_e638 = inttoptr i32 %v0_e638 to i32*
  %v2_e638 = load i32, i32* %v1_e638, align 4
  store i32 %v2_e638, i32* @r0, align 4
  %v3_e63c = add i32 %v2_e62c, -134
  %v4_e63c = inttoptr i32 %v3_e63c to i8*
  store i8 0, i8* %v4_e63c, align 1
  %v2_e640 = inttoptr i32 %v2_e638 to i8*
  %v3_e640 = call i32 @function_ff2c(i8* %v2_e640, i32 %v2_e610)
  %v0_e644 = call i32 @function_eccc()
  store i32 6, i32* %r1.global-to-local, align 4
  %v2_e64c = call i32 @function_10620(i32 %v0_e644, i32 6)
  %v3_e650 = mul i32 %v2_e64c, 4
  %v1_e654 = add i32 %v3_e650, 12
  store i32 %v1_e654, i32* @r4, align 4
  store i32 %v1_e654, i32* %r1.global-to-local, align 4
  %v2_e660 = call i32 @function_ed80(i32 %v2_e610, i32 %v1_e654)
  store i32 %v2_e628, i32* %r2.global-to-local, align 4
  %v1_e66c = load i32, i32* @r4, align 4
  %v2_e66c = add i32 %v1_e66c, %v2_e628
  store i32 %v2_e66c, i32* %r3.global-to-local, align 4
  %v0_e670 = load i32, i32* @r6, align 4
  %v1_e670 = trunc i32 %v0_e670 to i8
  %v3_e670 = add i32 %v2_e66c, -134
  %v4_e670 = inttoptr i32 %v3_e670 to i8*
  store i8 %v1_e670, i8* %v4_e670, align 1
  store i32 %v2_e610, i32* %r1.global-to-local, align 4
  %v4_e67c = call i32 @function_10a5c(i32 15, i32 %v2_e610, i32 %v2_e628, i32 %v2_e66c)
  %v1_e684 = call i32 @function_f5e0(i32 2)
  %v2_e68c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e68c, i32* %r1.global-to-local, align 4
  %v3_e694 = call i32 @function_f4fc(i32 2, i32* nonnull %stack_var_-44)
  %v3_e698 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e698, i32* %r2.global-to-local, align 4
  store i32 %v3_e694, i32* %r1.global-to-local, align 4
  %v3_e6a4 = inttoptr i32 %v3_e694 to i32*
  %v4_e6a4 = call i32 @function_10bec(i32 1, i32* %v3_e6a4, i32 %v3_e698)
  store i32 ptrtoint (i32* @global_var_13204.134 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e6b4 = call i32 @function_10bec(i32 1, i32* nonnull @global_var_13204.134, i32 1)
  %v1_e6bc = call i32 @function_f528(i32 2)
  %v0_e6c0 = call i32 @function_108f0()
  %v1_e6c4 = load i32, i32* @r6, align 4
  %v7_e6c8 = icmp sgt i32 %v0_e6c0, %v1_e6c4
  br i1 %v7_e6c8, label %dec_label_pc_e6cc, label %dec_label_pc_e6f8

dec_label_pc_e6cc:                                ; preds = %dec_label_pc_e600
  %v2_e6d8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e6d8, i32* %r4.global-to-local, align 4
  store i32 %v15_e3d0, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_e6dc:                                ; preds = %dec_label_pc_e3d0
  store i32 2, i32* %r1.global-to-local, align 4
  %v4_e6e4 = call i32 @function_109f0(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_131f0.136, i32 0, i32 0), i32 2)
  %v3_e6e8 = icmp eq i32 %v4_e6e4, -1
  store i32 %v4_e6e4, i32* @r4, align 4
  br i1 %v3_e6e8, label %dec_label_pc_e46c, label %dec_label_pc_e440

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e600
  %v1_e6f8 = call i32 @function_10b14(i32 %v0_e6c0)
  %v0_e6fc = load i32, i32* @r6, align 4
  %v1_e700 = call i32 @function_108c4(i32 %v0_e6fc)
  %v1_e708 = call i32 @function_108c4(i32 1)
  %v1_e710 = call i32 @function_108c4(i32 2)
  %v1_e714 = call i32 @function_a408(i32 %v1_e710)
  %v1_e718 = call i32 @function_da70(i32 %v1_e714)
  %v2_e720 = ptrtoint i32* %stack_var_-1616 to i32
  store i32 %v2_e720, i32* %r3.global-to-local, align 4
  %v0_e724 = load i32, i32* @r6, align 4
  store i32 %v0_e724, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1bae4.98 to i32), i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_1bae8.139 to i32), i32* @sl, align 4
  %v2_e73c = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_e73c, i32* @r6, align 4
  %v2_e740 = ptrtoint i32* %stack_var_-336 to i32
  store i32 %v2_e740, i32* @r7, align 4
  %v2_e818 = ptrtoint i32* %stack_var_-60 to i32
  %v2_eac4 = ptrtoint i8* %stack_var_-38 to i32
  %v4_ead0 = bitcast i8* %stack_var_-38 to i32*
  %v2_eae8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_eaec = ptrtoint i32* %stack_var_-52 to i32
  %v1_eb40 = bitcast i32* %stack_var_-138 to i8*
  %v2_eaa4 = ptrtoint i32* %stack_var_-88 to i32
  %v5_eab0 = bitcast i32* %stack_var_-88 to %sockaddr*
  br label %dec_label_pc_e744

dec_label_pc_e744:                                ; preds = %dec_label_pc_e744.backedge, %dec_label_pc_e6f8
  %v2_e74c68 = phi i32 [ %v2_e73c, %dec_label_pc_e6f8 ], [ %v2_e74c68.pre, %dec_label_pc_e744.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp19, %dec_label_pc_e6f8 ], [ %stack_var_-37.0.be, %dec_label_pc_e744.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e74c70 = inttoptr i32 %v2_e74c68 to i32*
  store i32 0, i32* %v4_e74c70, align 4
  %v0_e75071 = load i32, i32* %r3.global-to-local, align 4
  %v1_e75072 = add i32 %v0_e75071, 4
  store i32 %v1_e75072, i32* %r3.global-to-local, align 4
  %v7_e75473 = icmp eq i32 %v1_e75072, 128
  br i1 %v7_e75473, label %dec_label_pc_e75c, label %dec_label_pc_e74c.dec_label_pc_e74c_crit_edge

dec_label_pc_e74c.dec_label_pc_e74c_crit_edge:    ; preds = %dec_label_pc_e744, %dec_label_pc_e74c.dec_label_pc_e74c_crit_edge
  %v1_e75074 = phi i32 [ %v1_e750, %dec_label_pc_e74c.dec_label_pc_e74c_crit_edge ], [ %v1_e75072, %dec_label_pc_e744 ]
  %v0_e74c.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e74c = load i32, i32* @r6, align 4
  %v3_e74c = add i32 %v2_e74c, %v1_e75074
  %v4_e74c = inttoptr i32 %v3_e74c to i32*
  store i32 %v0_e74c.pre, i32* %v4_e74c, align 4
  %v0_e750 = load i32, i32* %r3.global-to-local, align 4
  %v1_e750 = add i32 %v0_e750, 4
  store i32 %v1_e750, i32* %r3.global-to-local, align 4
  %v7_e754 = icmp eq i32 %v1_e750, 128
  br i1 %v7_e754, label %dec_label_pc_e75c, label %dec_label_pc_e74c.dec_label_pc_e74c_crit_edge

dec_label_pc_e75c:                                ; preds = %dec_label_pc_e74c.dec_label_pc_e74c_crit_edge, %dec_label_pc_e744
  %v0_e75c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e75c, i32* %r3.global-to-local, align 4
  store i32 %v0_e75c, i32* @r4, align 4
  %v2_e76475 = load i32, i32* @r7, align 4
  %v3_e76476 = add i32 %v2_e76475, %v0_e75c
  %v4_e76477 = inttoptr i32 %v3_e76476 to i32*
  store i32 %v0_e75c, i32* %v4_e76477, align 4
  %v0_e76878 = load i32, i32* %r3.global-to-local, align 4
  %v1_e76879 = add i32 %v0_e76878, 4
  store i32 %v1_e76879, i32* %r3.global-to-local, align 4
  %v7_e76c80 = icmp eq i32 %v1_e76879, 128
  br i1 %v7_e76c80, label %dec_label_pc_e774, label %dec_label_pc_e764.dec_label_pc_e764_crit_edge

dec_label_pc_e764.dec_label_pc_e764_crit_edge:    ; preds = %dec_label_pc_e75c, %dec_label_pc_e764.dec_label_pc_e764_crit_edge
  %v1_e76881 = phi i32 [ %v1_e768, %dec_label_pc_e764.dec_label_pc_e764_crit_edge ], [ %v1_e76879, %dec_label_pc_e75c ]
  %v0_e764.pre = load i32, i32* @r4, align 4
  %v2_e764 = load i32, i32* @r7, align 4
  %v3_e764 = add i32 %v2_e764, %v1_e76881
  %v4_e764 = inttoptr i32 %v3_e764 to i32*
  store i32 %v0_e764.pre, i32* %v4_e764, align 4
  %v0_e768 = load i32, i32* %r3.global-to-local, align 4
  %v1_e768 = add i32 %v0_e768, 4
  store i32 %v1_e768, i32* %r3.global-to-local, align 4
  %v7_e76c = icmp eq i32 %v1_e768, 128
  br i1 %v7_e76c, label %dec_label_pc_e774, label %dec_label_pc_e764.dec_label_pc_e764_crit_edge

dec_label_pc_e774:                                ; preds = %dec_label_pc_e764.dec_label_pc_e764_crit_edge, %dec_label_pc_e75c
  %v2_e774 = load i32, i32* @global_var_1bae4.98, align 4
  %v7_e778 = icmp eq i32 %v2_e774, -1
  br i1 %v7_e778, label %dec_label_pc_e7a8, label %dec_label_pc_e780

dec_label_pc_e780:                                ; preds = %dec_label_pc_e774
  %v3_e780 = udiv i32 %v2_e774, 32
  %v3_e788 = mul nuw nsw i32 %v3_e780, 4
  store i32 %v2_e628, i32* %ip.global-to-local, align 4
  %v2_e790 = add i32 %v3_e788, %v2_e628
  store i32 %v2_e790, i32* %r3.global-to-local, align 4
  %v1_e794 = add i32 %v2_e790, -556
  %v2_e794 = inttoptr i32 %v1_e794 to i32*
  %v3_e794 = load i32, i32* %v2_e794, align 4
  %v1_e798 = urem i32 %v2_e774, 32
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_e7a0 = shl i32 1, %v1_e798
  %v8_e7a0 = or i32 %v3_e794, %v7_e7a0
  store i32 %v8_e7a0, i32* %r2.global-to-local, align 4
  store i32 %v8_e7a0, i32* %v2_e794, align 4
  br label %dec_label_pc_e7a8

dec_label_pc_e7a8:                                ; preds = %dec_label_pc_e774, %dec_label_pc_e780
  %v2_e7a8 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_e7a8, i32* %r3.global-to-local, align 4
  %v7_e7ac = icmp eq i32 %v2_e7a8, -1
  store i32 ptrtoint (i32* @global_var_1bae8.139 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_e7ac, label %dec_label_pc_ea2c, label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %dec_label_pc_ea2c, %dec_label_pc_e7a8, %.thread
  store i32 ptrtoint (i8** @global_var_1bc64.141 to i32), i32* %r2.global-to-local, align 4
  %v2_e7bc = load i8, i8* bitcast (i8** @global_var_1bc64.141 to i8*), align 4
  %v3_e7bc = zext i8 %v2_e7bc to i32
  store i32 %v3_e7bc, i32* %r3.global-to-local, align 4
  %v2_e7c0 = icmp eq i8 %v2_e7bc, 0
  %v2_e904 = load i32, i32* @global_var_1bae8.139, align 4
  %v3_e90c = udiv i32 %v2_e904, 32
  br i1 %v2_e7c0, label %dec_label_pc_e904, label %dec_label_pc_e7c8

dec_label_pc_e7c8:                                ; preds = %dec_label_pc_e7b8
  %v3_e7d4 = mul nuw nsw i32 %v3_e90c, 4
  store i32 %v2_e628, i32* %ip.global-to-local, align 4
  %v2_e7dc = add i32 %v3_e7d4, %v2_e628
  store i32 %v2_e7dc, i32* %r3.global-to-local, align 4
  %v1_e7e0 = add i32 %v2_e7dc, -300
  %v2_e7e0 = inttoptr i32 %v1_e7e0 to i32*
  %v3_e7e0 = load i32, i32* %v2_e7e0, align 4
  %v1_e7e4 = urem i32 %v2_e904, 32
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_e7ec = shl i32 1, %v1_e7e4
  %v8_e7ec = or i32 %v3_e7e0, %v7_e7ec
  store i32 %v8_e7ec, i32* %r2.global-to-local, align 4
  store i32 %v8_e7ec, i32* %v2_e7e0, align 4
  br label %dec_label_pc_e7f4

dec_label_pc_e7f4:                                ; preds = %dec_label_pc_e904, %dec_label_pc_e7c8
  %v2_e7f4 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_e7f4, i32* %r3.global-to-local, align 4
  %v2_e7f8 = load i32, i32* @global_var_1bae4.98, align 4
  store i32 10, i32* %ip.global-to-local, align 4
  %v5_e804 = icmp slt i32 %v2_e7f8, %v2_e7f4
  br i1 %v5_e804, label %bb, label %bb65

bb:                                               ; preds = %dec_label_pc_e7f4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_e7f4, %bb
  %v0_e81c = phi i32 [ %v2_e7f8, %dec_label_pc_e7f4 ], [ %v2_e7f4, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_e818, i32* %ip.global-to-local, align 4
  %v1_e81c = add i32 %v0_e81c, 1
  store i32 %v2_e73c, i32* %r1.global-to-local, align 4
  store i32 %v2_e740, i32* %r2.global-to-local, align 4
  %v5_e830 = call i32 @function_10ae4(i32 %v1_e81c, i32 %v2_e73c, i32 %v2_e740, i32 0, i32 %v2_e818)
  %v8_e834 = icmp eq i32 %v5_e830, -1
  store i32 %v5_e830, i32* %r3.global-to-local, align 4
  br i1 %v8_e834, label %dec_label_pc_e744.backedge, label %dec_label_pc_e840

dec_label_pc_e840:                                ; preds = %bb65
  %v6_e830 = trunc i32 %v5_e830 to i8
  %v3_e840 = icmp eq i8 %v6_e830, 0
  br i1 %v3_e840, label %dec_label_pc_e848, label %dec_label_pc_e868

dec_label_pc_e848:                                ; preds = %dec_label_pc_e840
  %v0_e848 = load i32, i32* @fp, align 4
  store i32 6, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-38, align 1
  %v2_e858 = call i32 @function_106ec(i32 %v0_e848, i32 6)
  %v2_e85c = icmp eq i32 %v2_e858, 0
  %v0_e860 = load i32, i32* @fp, align 4
  %v1_e860 = add i32 %v0_e860, 1
  store i32 %v1_e860, i32* @fp, align 4
  br i1 %v2_e85c, label %dec_label_pc_eab8, label %dec_label_pc_e868

dec_label_pc_e868:                                ; preds = %dec_label_pc_e840, %dec_label_pc_e848, %dec_label_pc_eab8
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_eab8 ], [ 0, %dec_label_pc_e848 ], [ %stack_var_-37.0, %dec_label_pc_e840 ]
  %v2_e868 = load i32, i32* @global_var_1bae4.98, align 4
  %v7_e86c = icmp eq i32 %v2_e868, -1
  br i1 %v7_e86c, label %dec_label_pc_e89c, label %dec_label_pc_e874

dec_label_pc_e874:                                ; preds = %dec_label_pc_e868
  %v3_e874 = udiv i32 %v2_e868, 32
  store i32 %v2_e628, i32* %r2.global-to-local, align 4
  %v3_e880 = mul nuw nsw i32 %v3_e874, 4
  %v2_e884 = add i32 %v3_e880, %v2_e628
  store i32 %v2_e884, i32* %r3.global-to-local, align 4
  %v1_e888 = add i32 %v2_e884, -556
  %v2_e888 = inttoptr i32 %v1_e888 to i32*
  %v3_e888 = load i32, i32* %v2_e888, align 4
  %v1_e88c = urem i32 %v2_e868, 32
  store i32 %v1_e88c, i32* %r1.global-to-local, align 4
  %v6_e890 = lshr i32 %v3_e888, %v1_e88c
  store i32 %v6_e890, i32* %r2.global-to-local, align 4
  %v1_e894 = urem i32 %v6_e890, 2
  %v2_e894 = icmp eq i32 %v1_e894, 0
  br i1 %v2_e894, label %dec_label_pc_e89c, label %dec_label_pc_ea9c

dec_label_pc_e89c:                                ; preds = %dec_label_pc_e874, %dec_label_pc_e868, %dec_label_pc_ea9c
  store i32 ptrtoint (i8** @global_var_1bc64.141 to i32), i32* %r3.global-to-local, align 4
  %v2_e8a0 = load i8, i8* bitcast (i8** @global_var_1bc64.141 to i8*), align 4
  %v3_e8a0 = zext i8 %v2_e8a0 to i32
  store i32 %v3_e8a0, i32* @r4, align 4
  %v2_e8a4 = icmp eq i8 %v2_e8a0, 0
  %v2_e934 = load i32, i32* @global_var_1bae8.139, align 4
  br i1 %v2_e8a4, label %dec_label_pc_e934, label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %dec_label_pc_e89c
  %v3_e8b4 = udiv i32 %v2_e934, 32
  store i32 %v2_e628, i32* %ip.global-to-local, align 4
  %v3_e8bc = mul nuw nsw i32 %v3_e8b4, 4
  %v2_e8c0 = add i32 %v3_e8bc, %v2_e628
  store i32 %v2_e8c0, i32* %r3.global-to-local, align 4
  %v1_e8c4 = add i32 %v2_e8c0, -300
  %v2_e8c4 = inttoptr i32 %v1_e8c4 to i32*
  %v3_e8c4 = load i32, i32* %v2_e8c4, align 4
  %v1_e8c8 = urem i32 %v2_e934, 32
  store i32 %v1_e8c8, i32* %r1.global-to-local, align 4
  %v6_e8cc = lshr i32 %v3_e8c4, %v1_e8c8
  store i32 %v6_e8cc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1bc64.141 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_e8d8 = urem i32 %v6_e8cc, 2
  %v2_e8d8 = icmp eq i32 %v1_e8d8, 0
  store i8 0, i8* bitcast (i8** @global_var_1bc64.141 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1bae8.139 to i32), i32* @r4, align 4
  br i1 %v2_e8d8, label %dec_label_pc_e8e8, label %dec_label_pc_ead8

dec_label_pc_e8e8:                                ; preds = %dec_label_pc_e8ac
  store i32 59632, i32* @lr, align 4
  %v1_e8ec = icmp ne i32 %v2_e934, -1
  call void @__pseudo_cond_branch(i1 %v1_e8ec, i32 ptrtoint (i32* @global_var_108c4.26 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e8f4 = load i32, i32* @r4, align 4
  %v2_e8f4 = inttoptr i32 %v1_e8f4 to i32*
  store i32 -1, i32* %v2_e8f4, align 4
  %v1_e8fc = call i32 @function_11cf4(i32 1)
  br label %dec_label_pc_e744.backedge

dec_label_pc_e744.backedge:                       ; preds = %dec_label_pc_e8e8, %dec_label_pc_ea08, %dec_label_pc_eb10, %dec_label_pc_eb8c, %dec_label_pc_ebb8, %dec_label_pc_ec3c, %bb65, %dec_label_pc_e934, %dec_label_pc_e944, %dec_label_pc_eb38, %bb67, %dec_label_pc_ebe8, %dec_label_pc_eba4
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb65 ], [ %stack_var_-37.1, %dec_label_pc_e934 ], [ %stack_var_-37.1, %dec_label_pc_e944 ], [ %stack_var_-37.3, %bb67 ], [ %stack_var_-37.2, %dec_label_pc_ea08 ], [ %stack_var_-37.1, %dec_label_pc_ebb8 ], [ %v3_ec00, %dec_label_pc_ebe8 ], [ %v3_ec00, %dec_label_pc_ec3c ], [ %stack_var_-37.1, %dec_label_pc_e8e8 ], [ %stack_var_-37.1, %dec_label_pc_eb38 ], [ %stack_var_-37.1, %dec_label_pc_eb8c ], [ %stack_var_-37.1, %dec_label_pc_eb10 ], [ %stack_var_-37.3, %dec_label_pc_eba4 ]
  %v2_e74c68.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e744

dec_label_pc_e904:                                ; preds = %dec_label_pc_e7b8
  store i32 %v2_e628, i32* %r2.global-to-local, align 4
  %v3_e914 = mul nuw nsw i32 %v3_e90c, 4
  %v2_e918 = add i32 %v3_e914, %v2_e628
  store i32 %v2_e918, i32* %r3.global-to-local, align 4
  %v1_e91c = add i32 %v2_e918, -556
  %v2_e91c = inttoptr i32 %v1_e91c to i32*
  %v3_e91c = load i32, i32* %v2_e91c, align 4
  %v1_e920 = urem i32 %v2_e904, 32
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_e928 = shl i32 1, %v1_e920
  %v8_e928 = or i32 %v3_e91c, %v7_e928
  store i32 %v8_e928, i32* %r2.global-to-local, align 4
  store i32 %v8_e928, i32* %v2_e91c, align 4
  br label %dec_label_pc_e7f4

dec_label_pc_e934:                                ; preds = %dec_label_pc_e89c
  store i32 %v2_e934, i32* %r1.global-to-local, align 4
  %v7_e938 = icmp eq i32 %v2_e934, -1
  store i32 ptrtoint (i32* @global_var_1bae8.139 to i32), i32* @r8, align 4
  br i1 %v7_e938, label %dec_label_pc_e744.backedge, label %dec_label_pc_e944

dec_label_pc_e944:                                ; preds = %dec_label_pc_e934
  %v3_e944 = udiv i32 %v2_e934, 32
  %v3_e94c = mul nuw nsw i32 %v3_e944, 4
  store i32 %v2_e628, i32* %ip.global-to-local, align 4
  %v2_e954 = add i32 %v3_e94c, %v2_e628
  store i32 %v2_e954, i32* %r3.global-to-local, align 4
  %v1_e958 = add i32 %v2_e954, -556
  %v2_e958 = inttoptr i32 %v1_e958 to i32*
  %v3_e958 = load i32, i32* %v2_e958, align 4
  %v1_e95c = urem i32 %v2_e934, 32
  store i32 %v1_e95c, i32* %r1.global-to-local, align 4
  %v6_e960 = lshr i32 %v3_e958, %v1_e95c
  store i32 %v6_e960, i32* %r2.global-to-local, align 4
  %v1_e964 = urem i32 %v6_e960, 2
  %v2_e964 = icmp eq i32 %v1_e964, 0
  br i1 %v2_e964, label %dec_label_pc_e744.backedge, label %dec_label_pc_e96c

dec_label_pc_e96c:                                ; preds = %dec_label_pc_e944
  %v0_e96c = call i32 @function_10e98()
  %v0_e970 = load i32, i32* @r4, align 4
  %v2_e970 = inttoptr i32 %v0_e96c to i32*
  store i32 %v0_e970, i32* %v2_e970, align 4
  store i32 %v0_e96c, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e984 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e990 = call i32 @function_110d0(i32 %v2_e984, i32* %v4_ead0, i32 2, i32 16386)
  %v7_e994 = icmp eq i32 %v5_e990, -1
  br i1 %v7_e994, label %dec_label_pc_eba4, label %dec_label_pc_e99c

dec_label_pc_e99c:                                ; preds = %dec_label_pc_e96c
  %v2_e99c = icmp eq i32 %v5_e990, 0
  br i1 %v2_e99c, label %dec_label_pc_ea08, label %dec_label_pc_e9a4

dec_label_pc_e9a4:                                ; preds = %dec_label_pc_e99c
  %v3_e9a4 = load i8, i8* %stack_var_-38, align 1
  %v4_e9a4 = sext i8 %v3_e9a4 to i32
  %v4_e9a8 = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_e9a8, i32* %r3.global-to-local, align 4
  %v4_e9ac = mul nuw nsw i32 %v4_e9a8, 256
  %v5_e9ac = or i32 %v4_e9a4, %v4_e9ac
  store i32 %v5_e9ac, i32* %r2.global-to-local, align 4
  %v7_e9ac = icmp eq i32 %v5_e9ac, 0
  br i1 %v7_e9ac, label %dec_label_pc_ebb8, label %dec_label_pc_e9b4

dec_label_pc_e9b4:                                ; preds = %dec_label_pc_e9a4
  %v1_e9b4 = mul nsw i32 %v4_e9a4, 256
  %v3_e9b8 = and i32 %v1_e9b4, 65280
  %v4_e9bc = udiv i32 %v5_e9ac, 256
  %v5_e9bc = or i32 %v3_e9b8, %v4_e9bc
  store i32 %v5_e9bc, i32* %r3.global-to-local, align 4
  %v3_e9c02 = udiv i32 %v5_e9bc, 256
  store i32 %v3_e9c02, i32* %r2.global-to-local, align 4
  %v1_e9c8 = trunc i32 %v3_e9c02 to i8
  %v6_e9cc = trunc i32 %v4_e9bc to i8
  store i8 %v6_e9cc, i8* %stack_var_-38, align 1
  %tmp84 = icmp ugt i32 %v5_e9bc, 1024
  br i1 %tmp84, label %dec_label_pc_ebd4, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9b4, %dec_label_pc_ebd4
  %v3_e9d4 = phi i8 [ %v6_e9cc, %dec_label_pc_e9b4 ], [ %v3_e9d4.pre, %dec_label_pc_ebd4 ]
  %v4_e9d4 = sext i8 %v3_e9d4 to i32
  store i32 %v4_e9d4, i32* %r1.global-to-local, align 4
  %v0_e9d8 = load i32, i32* @r4, align 4
  %v1_e9d8 = load i32, i32* @r5, align 4
  %v2_e9d8 = inttoptr i32 %v1_e9d8 to i32*
  store i32 %v0_e9d8, i32* %v2_e9d8, align 4
  %v4_e9dc = urem i32 %v3_e9c02, 256
  %v0_e9e4 = load i32, i32* %r1.global-to-local, align 4
  %v4_e9e4 = mul nuw nsw i32 %v4_e9dc, 256
  %v5_e9e4 = or i32 %v0_e9e4, %v4_e9e4
  store i32 %v5_e9e4, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e9ec = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_e720, i32* %r1.global-to-local, align 4
  %v5_e9f4 = call i32 @function_110d0(i32 %v2_e9ec, i32* nonnull %stack_var_-1616, i32 %v5_e9e4, i32 16386)
  %v7_e9f8 = icmp eq i32 %v5_e9f4, -1
  br i1 %v7_e9f8, label %dec_label_pc_eba4, label %dec_label_pc_ea00

dec_label_pc_ea00:                                ; preds = %dec_label_pc_e9d4
  %v2_ea00 = icmp eq i32 %v5_e9f4, 0
  br i1 %v2_ea00, label %dec_label_pc_ea08, label %dec_label_pc_ebe8

dec_label_pc_ea08:                                ; preds = %bb67, %dec_label_pc_ea00, %dec_label_pc_e99c
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb67 ], [ %stack_var_-37.1, %dec_label_pc_e99c ], [ %v1_e9c8, %dec_label_pc_ea00 ]
  %v2_ea08 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 59924, i32* @lr, align 4
  %v1_ea10 = icmp ne i32 %v2_ea08, -1
  call void @__pseudo_cond_branch(i1 %v1_ea10, i32 ptrtoint (i32* @global_var_108c4.26 to i32))
  store i32 ptrtoint (i32* @global_var_1bae8.139 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1bae8.139, align 4
  %v1_ea24 = call i32 @function_11cf4(i32 1)
  br label %dec_label_pc_e744.backedge

dec_label_pc_ea2c:                                ; preds = %dec_label_pc_e7a8
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_ea34 = load i32, i32* @r4, align 4
  store i32 %v0_ea34, i32* %r2.global-to-local, align 4
  %v3_ea38 = call i32 @function_111c0(i32 2, i32 1, i32 %v0_ea34)
  %v7_ea3c = icmp eq i32 %v3_ea38, -1
  store i32 %v3_ea38, i32* @r5, align 4
  %v1_ea44 = load i32, i32* %r8.global-to-local, align 4
  %v2_ea44 = inttoptr i32 %v1_ea44 to i32*
  store i32 %v3_ea38, i32* %v2_ea44, align 4
  br i1 %v7_ea3c, label %dec_label_pc_e7b8, label %dec_label_pc_ea4c

dec_label_pc_ea4c:                                ; preds = %dec_label_pc_ea2c
  %v0_ea4c = load i32, i32* @r4, align 4
  store i32 %v0_ea4c, i32* @r2, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_ea54 = call i32 @function_107d4(i32 %v3_ea38, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ea5c = or i32 %v2_ea54, 2048
  store i32 %v1_ea5c, i32* @r2, align 4
  %v0_ea60 = load i32, i32* @r5, align 4
  %v2_ea64 = call i32 @function_107d4(i32 %v0_ea60, i32 4)
  store i32 ptrtoint (i32* @global_var_1baec.96 to i32), i32* %r2.global-to-local, align 4
  %v2_ea6c = load i32, i32* @global_var_1baec.96, align 4
  store i32 %v2_ea6c, i32* %r3.global-to-local, align 4
  %v2_ea70 = icmp eq i32 %v2_ea6c, 0
  br i1 %v2_ea70, label %.thread, label %bb66

bb66:                                             ; preds = %dec_label_pc_ea4c
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_101bc.143 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ea4c, %bb66
  store i32 ptrtoint (i8** @global_var_1bc64.141 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_ea84 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 ptrtoint (i8** @global_var_1bcc8.103 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1bc64.141 to i8*), align 4
  %v5_ea94 = call i32 @function_1101c(i32 %v2_ea84, %sockaddr* bitcast (i8** @global_var_1bcc8.103 to %sockaddr*), i32 16)
  br label %dec_label_pc_e7b8

dec_label_pc_ea9c:                                ; preds = %dec_label_pc_e874
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_eaa4, i32* %r1.global-to-local, align 4
  store i32 %v2_eae8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_eab0 = call i32 @function_10fc4(i32 %v2_e868, %sockaddr* %v5_eab0, i32 %v2_eae8, i32 16, i32 16)
  br label %dec_label_pc_e89c

dec_label_pc_eab8:                                ; preds = %dec_label_pc_e848
  %v2_eac0 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ead0 = call i32 @function_11130(i32 %v2_eac0, i32* nonnull %v4_ead0, i32 2, i32 16384)
  br label %dec_label_pc_e868

dec_label_pc_ead8:                                ; preds = %dec_label_pc_e8ac
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_eae8, i32* %r3.global-to-local, align 4
  store i32 %v2_eaec, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_eb00 = call i32 @function_11074(i32 %v2_e934, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_eaec)
  %v3_eb04 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_eb04, i32* %r3.global-to-local, align 4
  %v2_eb08 = icmp eq i32 %v3_eb04, 0
  br i1 %v2_eb08, label %dec_label_pc_eb38, label %dec_label_pc_eb10

dec_label_pc_eb10:                                ; preds = %dec_label_pc_ead8
  %v2_eb10 = load i32, i32* @global_var_1bae8.139, align 4
  %v1_eb14 = call i32 @function_108c4(i32 %v2_eb10)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_eb1c = load i32, i32* @r4, align 4
  %v2_eb1c = inttoptr i32 %v1_eb1c to i32*
  store i32 -1, i32* %v2_eb1c, align 4
  %v0_eb20 = call i32 @function_eccc()
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_eb28 = call i32 @function_10620(i32 %v0_eb20, i32 10)
  %v1_eb2c = add i32 %v2_eb28, 1
  %v1_eb30 = call i32 @function_11cf4(i32 %v1_eb2c)
  br label %dec_label_pc_e744.backedge

dec_label_pc_eb38:                                ; preds = %dec_label_pc_ead8
  %v2_eb40 = call i32 @function_ff04(i8* %v1_eb40)
  %v3_eb40 = trunc i32 %v2_eb40 to i8
  store i8 %v3_eb40, i8* %stack_var_-38, align 1
  %v2_eb48 = call i32 @function_101bc(i32 %v2_eb40)
  store i32 ptrtoint (i32* @global_var_13208.145 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_eb48, i32* @global_var_1bcbc.78, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eb5c = load i32, i32* @r5, align 4
  store i32 %v0_eb5c, i32* %r2.global-to-local, align 4
  %v2_eb60 = load i32, i32* @global_var_1bae8.139, align 4
  %v5_eb64 = call i32 @function_11130(i32 %v2_eb60, i32* nonnull @global_var_13208.145, i32 %v0_eb5c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_eb70 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_eb7c = call i32 @function_11130(i32 %v2_eb70, i32* %v4_ead0, i32 1, i32 16384)
  %v3_eb80 = load i8, i8* %stack_var_-38, align 1
  %v4_eb80 = sext i8 %v3_eb80 to i32
  store i32 %v4_eb80, i32* %r2.global-to-local, align 4
  %v2_eb84 = icmp eq i8 %v3_eb80, 0
  br i1 %v2_eb84, label %dec_label_pc_e744.backedge, label %dec_label_pc_eb8c

dec_label_pc_eb8c:                                ; preds = %dec_label_pc_eb38
  %v2_eb90 = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_e5ec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_eb9c = call i32 @function_11130(i32 %v2_eb90, i32* nonnull %stack_var_-138, i32 %v4_eb80, i32 16384)
  br label %dec_label_pc_e744.backedge

dec_label_pc_eba4:                                ; preds = %dec_label_pc_e9d4, %dec_label_pc_e96c
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_e96c ], [ %v1_e9c8, %dec_label_pc_e9d4 ]
  %v0_eba4 = load i32, i32* @r5, align 4
  %v1_eba4 = inttoptr i32 %v0_eba4 to i32*
  %v2_eba4 = load i32, i32* %v1_eba4, align 4
  store i32 %v2_eba4, i32* %r3.global-to-local, align 4
  %v7_eba8 = icmp eq i32 %v2_eba4, 4
  br i1 %v7_eba8, label %dec_label_pc_e744.backedge, label %bb67

bb67:                                             ; preds = %dec_label_pc_eba4
  %v8_ebac = icmp eq i32 %v2_eba4, 11
  br i1 %v8_ebac, label %dec_label_pc_e744.backedge, label %dec_label_pc_ea08

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_e9a4
  %v2_ebbc = load i32, i32* @global_var_1bae8.139, align 4
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ebcc = call i32 @function_110d0(i32 %v2_ebbc, i32* nonnull %v4_ead0, i32 2, i32 16384)
  br label %dec_label_pc_e744.backedge

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_e9b4
  %v2_ebd4 = load i32, i32* @global_var_1bae8.139, align 4
  %v1_ebd8 = call i32 @function_108c4(i32 %v2_ebd4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ebe0 = load i32, i32* @r8, align 4
  %v2_ebe0 = inttoptr i32 %v1_ebe0 to i32*
  store i32 -1, i32* %v2_ebe0, align 4
  %v3_e9d4.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_e9d4

dec_label_pc_ebe8:                                ; preds = %dec_label_pc_ea00
  store i32 %v2_eac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_ebf8 = load i32, i32* @global_var_1bae8.139, align 4
  %v5_ebfc = call i32 @function_110d0(i32 %v2_ebf8, i32* nonnull %v4_ead0, i32 2, i32 16384)
  %v3_ec00 = load i8, i8* %stack_var_-38, align 1
  %v4_ec00 = sext i8 %v3_ec00 to i32
  %v4_ec08 = mul nsw i32 %v4_ec00, 256
  %v5_ec08 = or i32 %v4_ec08, %v4_e9dc
  store i32 %v5_ec08, i32* %ip.global-to-local, align 4
  store i32 %v5_ec08, i32* %r2.global-to-local, align 4
  store i32 %v4_ec00, i32* @lr, align 4
  store i32 %v2_e720, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_ec1c = load i32, i32* @global_var_1bae8.139, align 4
  store i8 %v1_e9c8, i8* %stack_var_-38, align 1
  %v8_ec28 = call i32 @function_110d0(i32 %v2_ec1c, i32* nonnull %stack_var_-1616, i32 %v5_ec08, i32 16384)
  %v3_ec2c = load i8, i8* %stack_var_-38, align 1
  %v4_ec2c = sext i8 %v3_ec2c to i32
  store i32 %v4_ec2c, i32* %r2.global-to-local, align 4
  %v4_ec30 = zext i8 %v3_ec00 to i32
  store i32 %v4_ec30, i32* %r3.global-to-local, align 4
  %v4_ec34 = mul nuw nsw i32 %v4_ec30, 256
  %v5_ec34 = or i32 %v4_ec2c, %v4_ec34
  store i32 %v5_ec34, i32* %r1.global-to-local, align 4
  %v7_ec34 = icmp eq i32 %v5_ec34, 0
  br i1 %v7_ec34, label %dec_label_pc_e744.backedge, label %dec_label_pc_ec3c

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ebe8
  %v5_ec40 = call i32 @function_a0d8(i32* nonnull %stack_var_-1616, i32 %v5_ec34, i32 %v4_ec2c, i32 %v4_ec30)
  br label %dec_label_pc_e744.backedge

dec_label_pc_ec48:                                ; preds = %dec_label_pc_e5e0
  %v0_ec48 = load i32, i32* @fp, align 4
  %v1_ec48 = add i32 %v0_ec48, 4
  %v2_ec48 = inttoptr i32 %v1_ec48 to i32*
  %v3_ec48 = load i32, i32* %v2_ec48, align 4
  %v1_ec4c = inttoptr i32 %v3_ec48 to i8*
  %v2_ec4c = call i32 @function_ff04(i8* %v1_ec4c)
  %v8_ec54 = icmp sgt i32 %v2_ec4c, 31
  br i1 %v8_ec54, label %dec_label_pc_e600, label %dec_label_pc_ec58

dec_label_pc_ec58:                                ; preds = %dec_label_pc_ec48
  %v0_ec5c = load i32, i32* @fp, align 4
  %v1_ec5c = add i32 %v0_ec5c, 4
  %v2_ec5c = inttoptr i32 %v1_ec5c to i32*
  %v3_ec5c = load i32, i32* %v2_ec5c, align 4
  store i32 %v3_ec5c, i32* %r1.global-to-local, align 4
  store i32 %v2_e5ec, i32* @r0, align 4
  %v2_ec64 = bitcast i32* %stack_var_-138 to i8*
  %v3_ec64 = call i32 @function_ff2c(i8* %v2_ec64, i32 %v3_ec5c)
  %v0_ec68 = load i32, i32* @fp, align 4
  %v1_ec68 = add i32 %v0_ec68, 4
  %v2_ec68 = inttoptr i32 %v1_ec68 to i32*
  %v3_ec68 = load i32, i32* %v2_ec68, align 4
  store i32 %v3_ec68, i32* %r4.global-to-local, align 4
  %v1_ec70 = inttoptr i32 %v3_ec68 to i8*
  %v2_ec70 = call i32 @function_ff04(i8* %v1_ec70)
  store i32 %v2_ec70, i32* %r1.global-to-local, align 4
  %v2_ec7c = call i32 @function_ffa4(i32 %v3_ec68, i32 %v2_ec70)
  br label %dec_label_pc_e600

dec_label_pc_ec84:                                ; preds = %dec_label_pc_e584
  %v1_ec88 = call i32 @function_111ec(i32 5)
  br label %dec_label_pc_e5e0

; uselistorder directives
  uselistorder i32 %v4_ec30, { 1, 0, 2 }
  uselistorder i32 %v4_ec2c, { 1, 0, 2 }
  uselistorder i32 %v4_ec00, { 1, 0 }
  uselistorder i8 %v3_ec00, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 1, 0, 2 }
  uselistorder i32 %v3_ea38, { 3, 2, 1, 0 }
  uselistorder i32 %v5_e9f4, { 1, 0 }
  uselistorder i32 %v4_e9dc, { 1, 0 }
  uselistorder i8 %v1_e9c8, { 0, 2, 1 }
  uselistorder i32 %v3_e9c02, { 0, 2, 1 }
  uselistorder i32 %v4_e9bc, { 1, 0 }
  uselistorder i32 %v5_e990, { 1, 0 }
  uselistorder i32 %v1_e95c, { 1, 0 }
  uselistorder i32 %v1_e8c8, { 1, 0 }
  uselistorder i32 %v2_e934, { 6, 3, 2, 0, 7, 1, 5, 4 }
  uselistorder i32 %v1_e88c, { 1, 0 }
  uselistorder i32 %v2_e868, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 8, 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %v5_e830, { 2, 1, 0 }
  uselistorder i32 %v2_e774, { 2, 1, 0 }
  uselistorder i32 %v1_e768, { 1, 2, 0 }
  uselistorder i32 %v1_e750, { 1, 2, 0 }
  uselistorder i32 %v2_eae8, { 2, 1, 0 }
  uselistorder i32* %v4_ead0, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_eac4, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_e73c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_e6e4, { 1, 2, 0 }
  uselistorder i32 %v2_e628, { 0, 13, 1, 14, 2, 12, 3, 11, 4, 10, 5, 9, 8, 6, 15, 7, 16 }
  uselistorder i32 %v2_e610, { 2, 1, 3, 0, 4, 5, 6 }
  uselistorder i32 %v2_e5ec, { 1, 0, 2 }
  uselistorder i32 %v1_e574, { 1, 0 }
  uselistorder i32 %v1_e570, { 1, 0 }
  uselistorder i32 %v0_e56c, { 0, 2, 1 }
  uselistorder i32 %v2_e524, { 0, 2, 1, 3 }
  uselistorder i32 %v2_e510, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v2_e4fc, { 0, 2, 1 }
  uselistorder i32 %v1_e4f4, { 1, 2, 0 }
  uselistorder i32 %v0_e4f0, { 1, 0 }
  uselistorder i32 %v0_e4ec, { 1, 0, 2 }
  uselistorder i32 %v4_e430, { 1, 2, 0 }
  uselistorder i32 %v2_e3e0, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 3, 1 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2, 3, 5, 4, 6 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8* %stack_var_-38, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 53, 54, 40, 41, 36, 51, 52, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 45, 46, 48, 49, 50, 51, 53, 52, 54, 0 }
  uselistorder i32* @global_var_1baec.96, { 1, 2, 0 }
  uselistorder i32 1024, { 0, 2, 3, 4, 1, 5 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1bc64.141 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1bc64.141, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1bc64.141 to i32), { 3, 2, 1, 0 }
  uselistorder i32* @global_var_1bae8.139, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32* @global_var_1bae4.98, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 ()* @function_108f0, { 3, 0, 2, 1 }
  uselistorder i32 (i32)* @function_f528, { 29, 30, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 9, 8, 7, 6, 5, 4, 17, 16, 15, 14, 13, 12, 11, 10, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_f4fc, { 0, 1, 2, 3, 4, 5, 6, 7, 21, 22, 23, 24, 25, 26, 27, 28, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 47, 48, 49, 50 }
  uselistorder i32 (i32)* @function_f5e0, { 37, 36, 35, 34, 33, 32, 31, 30, 20, 19, 18, 17, 16, 15, 29, 28, 27, 26, 25, 24, 23, 22, 21, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i8*, i32)* @function_ff2c, { 0, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 28, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 62, 63, 64, 65, 66, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32 (i32, i32)* @function_ed80, { 1, 0 }
  uselistorder i32 (i32)* @function_e1d0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_106ec, { 2, 1, 0 }
  uselistorder i8 2, { 2, 1, 0 }
  uselistorder i32* @global_var_1bcbc.78, { 0, 1, 2, 8, 3, 4, 5, 6, 7 }
  uselistorder i32 ptrtoint (i8** @global_var_1bcc8.103 to i32), { 2, 1, 0 }
  uselistorder i32 (i32)* @function_101bc, { 1, 0 }
  uselistorder [2 x i8]* @global_var_13190.23, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_e1b8.108 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32)* @function_1124c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e9d4, { 1, 0 }
  uselistorder label %dec_label_pc_e744.backedge, { 5, 11, 4, 10, 12, 3, 9, 2, 1, 8, 7, 0, 6 }
  uselistorder label %dec_label_pc_e89c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e868, { 2, 1, 0 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_e7b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e7a8, { 1, 0 }
  uselistorder label %dec_label_pc_e764.dec_label_pc_e764_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e74c.dec_label_pc_e74c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e600, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e5e0, { 2, 0, 1 }
}

define i32 @function_eccc() local_unnamed_addr {
dec_label_pc_eccc:
  %v2_ecd8 = load i32, i32* @global_var_1bc68.147, align 4
  %v2_ecdc = load i32, i32* @global_var_1bc74.149, align 4
  store i32 ptrtoint (i32* @global_var_1bc6c.151 to i32), i32* @lr, align 4
  %v4_ece8 = mul i32 %v2_ecd8, 2048
  %v5_ece8 = xor i32 %v4_ece8, %v2_ecd8
  %v4_ecec = udiv i32 %v2_ecdc, 524288
  %v5_ecec = xor i32 %v4_ecec, %v2_ecdc
  %v2_ecf0 = load i32, i32* @global_var_1bc6c.151, align 4
  %v2_ecf4 = load i32, i32* @global_var_1bc70.153, align 4
  %v2_ecf8 = xor i32 %v5_ecec, %v5_ece8
  %v4_ecfc = udiv i32 %v5_ece8, 256
  %v5_ecfc = xor i32 %v2_ecf8, %v4_ecfc
  store i32 %v2_ecf0, i32* @global_var_1bc68.147, align 4
  store i32 %v2_ecf4, i32* @global_var_1bc6c.151, align 4
  store i32 %v2_ecdc, i32* @global_var_1bc70.153, align 4
  store i32 %v5_ecfc, i32* @global_var_1bc74.149, align 4
  ret i32 %v5_ecfc

; uselistorder directives
  uselistorder i32 %v2_ecdc, { 2, 1, 0 }
  uselistorder i32 %v2_ecd8, { 1, 0 }
}

define i32 @function_ed24(i32 %arg1) local_unnamed_addr {
dec_label_pc_ed24:
  %v2_ed2c = call i32 @function_10b94(i32* null)
  store i32 %v2_ed2c, i32* @global_var_1bc68.147, align 4
  %v0_ed38 = call i32 @function_1091c()
  store i32 %v0_ed38, i32* @r4, align 4
  %v0_ed40 = call i32 @function_10948()
  %v0_ed48 = load i32, i32* @r4, align 4
  %v2_ed48 = xor i32 %v0_ed48, %v0_ed40
  store i32 %v2_ed48, i32* @r4, align 4
  store i32 %v2_ed48, i32* @global_var_1bc6c.151, align 4
  %v1_ed50 = call i32 @function_10ea4(i32 %v0_ed40)
  %v2_ed54 = load i32, i32* @global_var_1bc6c.151, align 4
  %v2_ed60 = xor i32 %v2_ed54, %v1_ed50
  store i32 %v2_ed60, i32* @global_var_1bc74.149, align 4
  store i32 %v1_ed50, i32* @global_var_1bc70.153, align 4
  ret i32 %v1_ed50

; uselistorder directives
  uselistorder i32 %v1_ed50, { 1, 2, 0 }
  uselistorder i32 %v0_ed40, { 1, 0 }
  uselistorder i32 ()* @function_10948, { 2, 0, 1 }
  uselistorder i32 (i32*)* @function_10b94, { 0, 3, 4, 1, 2, 5, 6, 7 }
}

define i32 @function_ed80(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ed80:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ed80 = load i32, i32* @r4, align 4
  store i32 %v3_ed80, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_13248.159 to i32), i32* @r1, align 4
  %v2_ed94 = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_ed94, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_ed9c = call i32 @function_10ee0(i32 %v2_ed94, i32 ptrtoint ([33 x i8]* @global_var_13248.159 to i32), i32 33)
  store i32 %v4_ed9c, i32* %r0.global-to-local, align 4
  %v0_eda0 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_eda0 = icmp slt i32 %v0_eda0, 0
  store i1 %v1_eda0, i1* %cpsr_n.global-to-local, align 1
  %v2_eda0 = icmp eq i32 %v0_eda0, 0
  store i1 %v2_eda0, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_eda0, 1
  br i1 %tmp20, label %dec_label_pc_ee8c, label %dec_label_pc_eda8

dec_label_pc_eda8:                                ; preds = %dec_label_pc_ed80
  store i32 ptrtoint (i32* @global_var_1bc74.149 to i32), i32* %fp.global-to-local, align 4
  %v2_edb4 = load i32, i32* @global_var_1bc70.153, align 4
  store i32 %v2_edb4, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc68.147 to i32), i32* %r3.global-to-local, align 4
  %v2_edbc = load i32, i32* @global_var_1bc6c.151, align 4
  store i32 %v2_edbc, i32* %sl.global-to-local, align 4
  %v2_edc0 = load i32, i32* @global_var_1bc74.149, align 4
  store i32 %v2_edc0, i32* %r6.global-to-local, align 4
  %v2_edc4 = load i32, i32* @global_var_1bc68.147, align 4
  store i32 %v2_edc4, i32* %ip.global-to-local, align 4
  %v0_edc8 = load i32, i32* @r4, align 4
  %v1_edc8 = add i32 %v0_edc8, 1
  store i32 %v1_edc8, i32* %r7.global-to-local, align 4
  %v2_edd4 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_ee34

dec_label_pc_edd0:                                ; preds = %dec_label_pc_ee34
  %v1_edd0 = udiv i32 %v5_ee40, 8
  %v4_edd8 = urem i32 %v1_edd0, 32
  %v5_edd8 = add i32 %v4_edd8, %v2_edd4
  store i32 %v5_edd8, i32* %r0.global-to-local, align 4
  %v3_eddc = mul i32 %v5_ee40, 65536
  store i32 %v3_eddc, i32* %r2.global-to-local, align 4
  store i32 %v2_edd4, i32* %r3.global-to-local, align 4
  %v3_ede4 = mul i32 %v5_ee40, 256
  store i32 %v3_ede4, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_ee40, 2048
  %v4_ede8 = urem i32 %tmp21, 32
  %v5_ede8 = add i32 %v4_ede8, %v2_edd4
  store i32 %v5_ede8, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_ee40, 524288
  %v4_edec = urem i32 %tmp22, 32
  %v5_edec = add i32 %v4_edec, %v2_edd4
  store i32 %v5_edec, i32* @lr, align 4
  %v4_edf0 = udiv i32 %v2_ee3c, 134217728
  %v5_edf0 = add i32 %v4_edf0, %v2_edd4
  %v1_edf4 = add i32 %v5_ede8, -33
  %v2_edf4 = inttoptr i32 %v1_edf4 to i8*
  %v3_edf4 = load i8, i8* %v2_edf4, align 1
  %v4_edf4 = zext i8 %v3_edf4 to i32
  store i32 %v4_edf4, i32* %r2.global-to-local, align 4
  %v1_edf8 = add i32 %v5_edd8, -33
  %v2_edf8 = inttoptr i32 %v1_edf8 to i8*
  %v3_edf8 = load i8, i8* %v2_edf8, align 1
  %v4_edf8 = zext i8 %v3_edf8 to i32
  store i32 %v4_edf8, i32* %r3.global-to-local, align 4
  %v1_edfc = add i32 %v5_edec, -33
  %v2_edfc = inttoptr i32 %v1_edfc to i8*
  %v3_edfc = load i8, i8* %v2_edfc, align 1
  %v4_edfc = zext i8 %v3_edfc to i32
  store i32 %v4_edfc, i32* %r1.global-to-local, align 4
  %v1_ee00 = add i32 %v5_edf0, -33
  %v2_ee00 = inttoptr i32 %v1_ee00 to i8*
  %v3_ee00 = load i8, i8* %v2_ee00, align 1
  %v4_ee00 = zext i8 %v3_ee00 to i32
  store i32 %v4_ee00, i32* %r0.global-to-local, align 4
  %v1_ee04 = add i32 %v0_ee04, -4
  store i32 %v1_ee04, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ee08 = icmp slt i32 %v1_ee04, 0
  store i1 %v1_ee08, i1* %cpsr_n.global-to-local, align 1
  %v2_ee08 = icmp eq i32 %v1_ee04, 0
  store i1 %v2_ee08, i1* %cpsr_z.global-to-local, align 1
  %v3_ee0c = add i32 %v2_ee0c, -1
  %v4_ee0c = inttoptr i32 %v3_ee0c to i8*
  store i8 %v3_edf8, i8* %v4_ee0c, align 1
  %v0_ee10 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee10 = trunc i32 %v0_ee10 to i8
  %v2_ee10 = load i32, i32* %r7.global-to-local, align 4
  %v3_ee10 = inttoptr i32 %v2_ee10 to i8*
  store i8 %v1_ee10, i8* %v3_ee10, align 1
  %v0_ee14 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee14 = trunc i32 %v0_ee14 to i8
  %v2_ee14 = load i32, i32* %r7.global-to-local, align 4
  %v3_ee14 = add i32 %v2_ee14, 1
  %v4_ee14 = inttoptr i32 %v3_ee14 to i8*
  store i8 %v1_ee14, i8* %v4_ee14, align 1
  %v0_ee18 = load i32, i32* %r0.global-to-local, align 4
  %v1_ee18 = trunc i32 %v0_ee18 to i8
  %v2_ee18 = load i32, i32* %r7.global-to-local, align 4
  %v3_ee18 = add i32 %v2_ee18, 2
  %v4_ee18 = inttoptr i32 %v3_ee18 to i8*
  store i8 %v1_ee18, i8* %v4_ee18, align 1
  %v0_ee1c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ee1c, i32* %ip.global-to-local, align 4
  %v0_ee20 = load i32, i32* %r7.global-to-local, align 4
  %v1_ee20 = add i32 %v0_ee20, 4
  store i32 %v1_ee20, i32* %r7.global-to-local, align 4
  %v0_ee24 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_ee24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_ee24 = xor i1 %v1_ee24, %v2_ee24
  %v4_ee24 = or i1 %v0_ee24, %v3_ee24
  br i1 %v4_ee24, label %dec_label_pc_ee70, label %dec_label_pc_ee28

dec_label_pc_ee28:                                ; preds = %dec_label_pc_ee54, %dec_label_pc_edd0
  %v2_ee0c6 = phi i32 [ %v1_ee68, %dec_label_pc_ee54 ], [ %v1_ee20, %dec_label_pc_edd0 ]
  %v0_ee342 = phi i32 [ %v0_ee64, %dec_label_pc_ee54 ], [ %v0_ee1c, %dec_label_pc_edd0 ]
  %v0_ee28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ee28, i32* %sl.global-to-local, align 4
  %v0_ee2c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ee2c, i32* %sb.global-to-local, align 4
  %v0_ee30 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ee30, i32* %r6.global-to-local, align 4
  %v0_ee44.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_ee34

dec_label_pc_ee34:                                ; preds = %dec_label_pc_eda8, %dec_label_pc_ee28
  %v2_ee0c = phi i32 [ %v1_edc8, %dec_label_pc_eda8 ], [ %v2_ee0c6, %dec_label_pc_ee28 ]
  %v0_ee04 = phi i32 [ %v0_eda0, %dec_label_pc_eda8 ], [ %v0_ee44.pre, %dec_label_pc_ee28 ]
  %v0_ee38 = phi i32 [ %v2_edc0, %dec_label_pc_eda8 ], [ %v0_ee30, %dec_label_pc_ee28 ]
  %v0_ee34 = phi i32 [ %v2_edc4, %dec_label_pc_eda8 ], [ %v0_ee342, %dec_label_pc_ee28 ]
  %v4_ee34 = mul i32 %v0_ee34, 2048
  %v5_ee34 = xor i32 %v4_ee34, %v0_ee34
  store i32 %v5_ee34, i32* %r3.global-to-local, align 4
  %v4_ee38 = udiv i32 %v0_ee38, 524288
  %v5_ee38 = xor i32 %v4_ee38, %v0_ee38
  %v2_ee3c = xor i32 %v5_ee38, %v5_ee34
  store i32 %v2_ee3c, i32* %r2.global-to-local, align 4
  %v4_ee40 = udiv i32 %v5_ee34, 256
  %v5_ee40 = xor i32 %v4_ee40, %v2_ee3c
  store i32 %v5_ee40, i32* %r5.global-to-local, align 4
  %v1_ee44 = add i32 %v0_ee04, -3
  %v2_ee44 = icmp ugt i32 %v0_ee04, 2
  %v3_ee44 = sub i32 2, %v0_ee04
  %v4_ee44 = and i32 %v3_ee44, %v0_ee04
  %v5_ee44 = icmp slt i32 %v4_ee44, 0
  store i1 %v5_ee44, i1* %cpsr_v.global-to-local, align 1
  %v6_ee44 = icmp slt i32 %v1_ee44, 0
  store i1 %v6_ee44, i1* %cpsr_n.global-to-local, align 1
  %v7_ee44 = icmp eq i32 %v0_ee04, 3
  store i1 %v7_ee44, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ee40, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_ee50 = xor i1 %v7_ee44, true
  %v3_ee50 = and i1 %v2_ee44, %v2_ee50
  br i1 %v3_ee50, label %dec_label_pc_edd0, label %dec_label_pc_ee54

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee34
  %v2_ee54 = call i32 @function_10620(i32 %v5_ee40, i32 33)
  store i32 %v2_ee54, i32* %r0.global-to-local, align 4
  %v0_ee58 = load i32, i32* %r8.global-to-local, align 4
  %v1_ee58 = add i32 %v0_ee58, -1
  store i32 %v1_ee58, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ee5c = icmp slt i32 %v1_ee58, 0
  store i1 %v1_ee5c, i1* %cpsr_n.global-to-local, align 1
  %v2_ee5c = icmp eq i32 %v1_ee58, 0
  store i1 %v2_ee5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ee60 = trunc i32 %v2_ee54 to i8
  %v2_ee60 = load i32, i32* %r7.global-to-local, align 4
  %v3_ee60 = add i32 %v2_ee60, -1
  %v4_ee60 = inttoptr i32 %v3_ee60 to i8*
  store i8 %v1_ee60, i8* %v4_ee60, align 1
  %v0_ee64 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ee64, i32* %ip.global-to-local, align 4
  %v0_ee68 = load i32, i32* %r7.global-to-local, align 4
  %v1_ee68 = add i32 %v0_ee68, 1
  store i32 %v1_ee68, i32* %r7.global-to-local, align 4
  %v0_ee6c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee6c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_ee6c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_ee6c = xor i1 %v1_ee6c, %v2_ee6c
  %v4_ee6c = or i1 %v0_ee6c, %v3_ee6c
  br i1 %v4_ee6c, label %dec_label_pc_ee70, label %dec_label_pc_ee28

dec_label_pc_ee70:                                ; preds = %dec_label_pc_ee54, %dec_label_pc_edd0
  store i32 ptrtoint (i32* @global_var_1bc6c.151 to i32), i32* %r3.global-to-local, align 4
  %v0_ee78 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ee78, i32* @global_var_1bc70.153, align 4
  store i32 ptrtoint (i32* @global_var_1bc68.147 to i32), i32* %ip.global-to-local, align 4
  %v0_ee80 = load i32, i32* %r5.global-to-local, align 4
  %v1_ee80 = load i32, i32* %fp.global-to-local, align 4
  %v2_ee80 = inttoptr i32 %v1_ee80 to i32*
  store i32 %v0_ee80, i32* %v2_ee80, align 4
  %v0_ee84 = load i32, i32* %sb.global-to-local, align 4
  %v1_ee84 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee84 = inttoptr i32 %v1_ee84 to i32*
  store i32 %v0_ee84, i32* %v2_ee84, align 4
  %v0_ee88 = load i32, i32* %sl.global-to-local, align 4
  %v1_ee88 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee88 = inttoptr i32 %v1_ee88 to i32*
  store i32 %v0_ee88, i32* %v2_ee88, align 4
  %v2_ee90.pre = load i32, i32* %stack_var_-36, align 4
  %v29_ee90.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ee8c

dec_label_pc_ee8c:                                ; preds = %dec_label_pc_ed80, %dec_label_pc_ee70
  %v29_ee90 = phi i32 [ %v29_ee90.pre, %dec_label_pc_ee70 ], [ %v4_ed9c, %dec_label_pc_ed80 ]
  %v2_ee90 = phi i32 [ %v2_ee90.pre, %dec_label_pc_ee70 ], [ %v3_ed80, %dec_label_pc_ed80 ]
  store i32 %v2_ee90, i32* @r4, align 4
  ret i32 %v29_ee90

; uselistorder directives
  uselistorder i32 %v1_ee68, { 1, 0 }
  uselistorder i32 %v0_ee64, { 1, 0 }
  uselistorder i32 %v5_ee40, { 6, 5, 7, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_ee3c, { 1, 2, 0 }
  uselistorder i32 %v0_ee34, { 1, 0 }
  uselistorder i32 %v0_ee38, { 1, 0 }
  uselistorder i32 %v0_ee04, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_edd4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_eda0, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_ee8c, { 1, 0 }
  uselistorder label %dec_label_pc_ee34, { 1, 0 }
}

define i32 @function_eea8(i8* %arg1) local_unnamed_addr {
dec_label_pc_eea8:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_eea8 = load i32, i32* @r4, align 4
  store i32 %v3_eea8, i32* %stack_var_-36, align 4
  %v9_eea8 = load i32, i32* @r6, align 4
  %v12_eea8 = load i32, i32* @r7, align 4
  %v15_eea8 = load i32, i32* @r8, align 4
  %v18_eea8 = load i32, i32* @sb, align 4
  %v21_eea8 = load i32, i32* @sl, align 4
  %v24_eea8 = load i32, i32* @fp, align 4
  %v0_eeac = load i32, i32* @r1, align 4
  store i32 %v0_eeac, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_eeac, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_eea8
  store i32 %v3_eea8, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_eea8
  store i32 ptrtoint (i32* @global_var_1bc74.149 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc70.153 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc6c.151 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc68.147 to i32), i32* %r8.global-to-local, align 4
  %v2_eec8 = load i32, i32* @global_var_1bc74.149, align 4
  store i32 %v2_eec8, i32* @lr, align 4
  %v2_eecc = load i32, i32* @global_var_1bc70.153, align 4
  store i32 %v2_eecc, i32* %r7.global-to-local, align 4
  %v2_eed0 = load i32, i32* @global_var_1bc6c.151, align 4
  store i32 %v2_eed0, i32* %r6.global-to-local, align 4
  %v2_eed4 = load i32, i32* @global_var_1bc68.147, align 4
  br label %dec_label_pc_ef00

dec_label_pc_eedc:                                ; preds = %dec_label_pc_ef2c
  %v3_ef34 = sdiv i32 %v5_ef18, 256
  %v1_eedc = trunc i32 %v3_ef34 to i8
  %v3_eedc = add i32 %v9_ef20, 1
  %v4_eedc = inttoptr i32 %v3_eedc to i8*
  store i8 %v1_eedc, i8* %v4_eedc, align 1
  %v0_eee0 = load i32, i32* %r3.global-to-local, align 4
  %v1_eee0 = trunc i32 %v0_eee0 to i8
  %v2_eee0 = load i32, i32* %r5.global-to-local, align 4
  %v3_eee0 = inttoptr i32 %v2_eee0 to i8*
  store i8 %v1_eee0, i8* %v3_eee0, align 1
  %v0_eee4 = load i32, i32* %r5.global-to-local, align 4
  %v1_eee4 = add i32 %v0_eee4, 2
  store i32 %v1_eee4, i32* %r5.global-to-local, align 4
  %v0_eee8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eee8

dec_label_pc_eee8:                                ; preds = %.thread, %dec_label_pc_eedc
  %v0_eee8 = phi i32 [ %v9_ef24, %.thread ], [ %v0_eee8.pre, %dec_label_pc_eedc ]
  %v2_eedc7 = phi i32 [ %v12_ef20, %.thread ], [ %v1_eee4, %dec_label_pc_eedc ]
  %tmp22 = icmp slt i32 %v0_eee8, 1
  br i1 %tmp22, label %dec_label_pc_ef68, label %dec_label_pc_eef4

dec_label_pc_eef4:                                ; preds = %dec_label_pc_eee8
  %v0_eeec = load i32, i32* %r6.global-to-local, align 4
  %v0_eef4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_eef4, i32* %r6.global-to-local, align 4
  %v0_eef8 = load i32, i32* @lr, align 4
  store i32 %v0_eef8, i32* %r7.global-to-local, align 4
  %v0_eefc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_eefc, i32* @lr, align 4
  br label %dec_label_pc_ef00

dec_label_pc_ef00:                                ; preds = %bb21, %dec_label_pc_eef4
  %v0_ef50 = phi i32 [ %v2_eed0, %bb21 ], [ %v0_eef4, %dec_label_pc_eef4 ]
  %v9_ef20 = phi i32 [ %tmp, %bb21 ], [ %v2_eedc7, %dec_label_pc_eef4 ]
  %v0_ef38 = phi i32 [ %v0_eeac, %bb21 ], [ %v0_eee8, %dec_label_pc_eef4 ]
  %v0_ef44 = phi i32 [ %v2_eec8, %bb21 ], [ %v0_eefc, %dec_label_pc_eef4 ]
  %v0_ef40 = phi i32 [ %v2_eed4, %bb21 ], [ %v0_eeec, %dec_label_pc_eef4 ]
  %v4_ef00 = mul i32 %v0_ef40, 2048
  %v5_ef00 = xor i32 %v4_ef00, %v0_ef40
  %v4_ef04 = udiv i32 %v0_ef44, 524288
  %v5_ef04 = xor i32 %v4_ef04, %v0_ef44
  %v2_ef08 = xor i32 %v5_ef04, %v5_ef00
  %v4_ef18 = udiv i32 %v5_ef00, 256
  %v5_ef18 = xor i32 %v4_ef18, %v2_ef08
  store i32 %v5_ef18, i32* %r3.global-to-local, align 4
  %v7_ef20 = icmp sgt i32 %v0_ef38, 3
  br i1 %v7_ef20, label %.thread, label %dec_label_pc_ef2c

.thread:                                          ; preds = %dec_label_pc_ef00
  %v10_ef20 = inttoptr i32 %v9_ef20 to i32*
  store i32 %v5_ef18, i32* %v10_ef20, align 4
  %v11_ef20 = load i32, i32* %r5.global-to-local, align 4
  %v12_ef20 = add i32 %v11_ef20, 4
  store i32 %v12_ef20, i32* %r5.global-to-local, align 4
  %v8_ef24 = load i32, i32* %r4.global-to-local, align 4
  %v9_ef24 = add i32 %v8_ef24, -4
  store i32 %v9_ef24, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eee8

dec_label_pc_ef2c:                                ; preds = %dec_label_pc_ef00
  store i32 %v5_ef18, i32* %r3.global-to-local, align 4
  %v7_ef30 = icmp eq i32 %v0_ef38, 1
  %v1_ef38 = add i32 %v0_ef38, -2
  store i32 %v1_ef38, i32* %r4.global-to-local, align 4
  br i1 %v7_ef30, label %dec_label_pc_ef40, label %dec_label_pc_eedc

dec_label_pc_ef40:                                ; preds = %dec_label_pc_ef2c
  store i32 %v5_ef18, i32* %r3.global-to-local, align 4
  %v1_ef50 = load i32, i32* %r8.global-to-local, align 4
  %v2_ef50 = inttoptr i32 %v1_ef50 to i32*
  store i32 %v0_ef50, i32* %v2_ef50, align 4
  %v0_ef54 = load i32, i32* %r7.global-to-local, align 4
  %v1_ef54 = load i32, i32* %sl.global-to-local, align 4
  %v2_ef54 = inttoptr i32 %v1_ef54 to i32*
  store i32 %v0_ef54, i32* %v2_ef54, align 4
  %v0_ef58 = load i32, i32* @lr, align 4
  %v1_ef58 = load i32, i32* %sb.global-to-local, align 4
  %v2_ef58 = inttoptr i32 %v1_ef58 to i32*
  store i32 %v0_ef58, i32* %v2_ef58, align 4
  %v0_ef5c = load i32, i32* %r3.global-to-local, align 4
  %v1_ef5c = load i32, i32* %fp.global-to-local, align 4
  %v2_ef5c = inttoptr i32 %v1_ef5c to i32*
  store i32 %v0_ef5c, i32* %v2_ef5c, align 4
  %v0_ef60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ef60 = trunc i32 %v0_ef60 to i8
  %v2_ef60 = load i32, i32* %r5.global-to-local, align 4
  %v3_ef60 = inttoptr i32 %v2_ef60 to i8*
  store i8 %v1_ef60, i8* %v3_ef60, align 1
  %v2_ef64 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ef64, i32* @r4, align 4
  store i32 %v9_eea8, i32* @r6, align 4
  store i32 %v12_eea8, i32* @r7, align 4
  store i32 %v15_eea8, i32* @r8, align 4
  store i32 %v18_eea8, i32* @sb, align 4
  store i32 %v21_eea8, i32* @sl, align 4
  store i32 %v24_eea8, i32* @fp, align 4
  ret i32 %v5_ef00

dec_label_pc_ef68:                                ; preds = %dec_label_pc_eee8
  %v0_ef68 = load i32, i32* %r3.global-to-local, align 4
  %v1_ef68 = load i32, i32* %fp.global-to-local, align 4
  %v2_ef68 = inttoptr i32 %v1_ef68 to i32*
  store i32 %v0_ef68, i32* %v2_ef68, align 4
  %v0_ef6c = load i32, i32* @lr, align 4
  %v1_ef6c = load i32, i32* %sb.global-to-local, align 4
  %v2_ef6c = inttoptr i32 %v1_ef6c to i32*
  store i32 %v0_ef6c, i32* %v2_ef6c, align 4
  %v0_ef70 = load i32, i32* %r7.global-to-local, align 4
  %v1_ef70 = load i32, i32* %sl.global-to-local, align 4
  %v2_ef70 = inttoptr i32 %v1_ef70 to i32*
  store i32 %v0_ef70, i32* %v2_ef70, align 4
  %v0_ef74 = load i32, i32* %r6.global-to-local, align 4
  %v1_ef74 = load i32, i32* %r8.global-to-local, align 4
  %v2_ef74 = inttoptr i32 %v1_ef74 to i32*
  store i32 %v0_ef74, i32* %v2_ef74, align 4
  %v2_ef78 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ef78, i32* @r4, align 4
  store i32 %v9_eea8, i32* @r6, align 4
  store i32 %v12_eea8, i32* @r7, align 4
  store i32 %v15_eea8, i32* @r8, align 4
  store i32 %v18_eea8, i32* @sb, align 4
  store i32 %v21_eea8, i32* @sl, align 4
  store i32 %v24_eea8, i32* @fp, align 4
  ret i32 %v5_ef00

; uselistorder directives
  uselistorder i32 %v9_ef24, { 1, 0 }
  uselistorder i32 %v12_ef20, { 1, 0 }
  uselistorder i32 %v5_ef18, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_ef00, { 1, 2, 0, 3 }
  uselistorder i32 %v0_ef40, { 1, 0 }
  uselistorder i32 %v0_ef44, { 1, 0 }
  uselistorder i32 %v0_eee8, { 1, 0 }
  uselistorder i32 %v24_eea8, { 1, 0 }
  uselistorder i32 %v21_eea8, { 1, 0 }
  uselistorder i32 %v18_eea8, { 1, 0 }
  uselistorder i32 %v15_eea8, { 1, 0 }
  uselistorder i32 %v12_eea8, { 1, 0 }
  uselistorder i32 %v9_eea8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1bc68.147, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1bc6c.151, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1bc70.153, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1bc74.149, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @fp, { 34, 35, 36, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 37, 2, 38, 39, 40 }
  uselistorder i32* @sl, { 47, 48, 49, 3, 0, 4, 7, 5, 6, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1, 85, 86, 87, 88 }
  uselistorder i32* @sb, { 33, 34, 35, 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder label %dec_label_pc_ef00, { 1, 0 }
}

define i32 @function_ef8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_ef8c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ef8c = load i32, i32* @r4, align 4
  store i32 %v3_ef8c, i32* %stack_var_-8, align 4
  %v6_ef8c = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_ef90 = icmp eq i32 %arg1, 0
  br i1 %v2_ef90, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_ef8c
  store i32 %v3_ef8c, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_ef8c
  %v1_ef98 = add i32 %arg1, 4
  %v2_ef98 = inttoptr i32 %v1_ef98 to i32*
  %v3_ef98 = load i32, i32* %v2_ef98, align 4
  %v1_efa0 = icmp ne i32 %v3_ef98, 0
  call void @__pseudo_cond_branch(i1 %v1_efa0, i32 ptrtoint (i32* @global_var_1151c.59 to i32))
  %v0_efa4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_efa4, i32* @r0, align 4
  %v2_efa8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_efa8, i32* @r4, align 4
  store i32 %v6_ef8c, i32* @lr, align 4
  %v0_efac = call i32 @function_1151c()
  ret i32 %v0_efac
}

define i32 @function_efb0(i8* %arg1) local_unnamed_addr {
dec_label_pc_efb0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_efb0 = load i32, i32* @r4, align 4
  store i32 %v3_efb0, i32* %stack_var_-36, align 4
  %v6_efb0 = load i32, i32* @r5, align 4
  %v12_efb0 = load i32, i32* @r7, align 4
  %v15_efb0 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_efc8 = call i32 @function_114c4(i32 1, i32 8)
  %v0_efd0 = load i32, i32* @r4, align 4
  %v1_efd0 = inttoptr i32 %v0_efd0 to i8*
  store i32 %v0_efd0, i32* %r0.global-to-local, align 4
  %v3_efd4 = call i32 @function_ff04(i8* %v1_efd0)
  %v2_efdc = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_efdc, i32* %fp.global-to-local, align 4
  %v2_efe0 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_efe4 = add i32 %v3_efd4, 1
  store i32 %v1_efe4, i32* %r0.global-to-local, align 4
  %v2_efe8 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_efe8, i32* %r2.global-to-local, align 4
  store i32 %v2_efdc, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_f028162 = icmp eq i32 %v1_efe4, 0
  store i1 %v2_f028162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_f030163 = or i32 %v2_efe8, 1
  store i32 %v1_f030163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_efe4, 1
  br i1 %tmp124164, label %dec_label_pc_f038, label %dec_label_pc_eff8.lr.ph

dec_label_pc_eff8.lr.ph:                          ; preds = %dec_label_pc_efb0
  %v0_eff8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_eff8

dec_label_pc_eff8:                                ; preds = %dec_label_pc_eff8.lr.ph, %.thread12
  %v1_f00c176.off0 = phi i8 [ 0, %dec_label_pc_eff8.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_eff8 = phi i32 [ %v0_eff8.pre, %dec_label_pc_eff8.lr.ph ], [ %v1_f01c, %.thread12 ]
  %v2_f03c165 = phi i32 [ %v2_efe8, %dec_label_pc_eff8.lr.ph ], [ %v0_f024, %.thread12 ]
  %v1_eff8 = inttoptr i32 %v0_eff8 to i8*
  %v2_eff8 = load i8, i8* %v1_eff8, align 1
  %v3_eff8 = zext i8 %v2_eff8 to i32
  store i32 %v3_eff8, i32* %r3.global-to-local, align 4
  %v2_effc = icmp eq i8 %v2_eff8, 0
  store i1 %v2_effc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_effc, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_eff8
  %v8_f000 = icmp eq i8 %v2_eff8, 46
  store i1 %v8_f000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f000, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_f004 = inttoptr i32 %v2_f03c165 to i8*
  store i8 %v2_eff8, i8* %v4_f004, align 1
  %v5_f004 = load i32, i32* %r2.global-to-local, align 4
  %v6_f004 = add i32 %v5_f004, 1
  store i32 %v6_f004, i32* %r2.global-to-local, align 4
  %v0_f008.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f008.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_f00c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_f00c.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_eff8
  %v1_f00c.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_f00c176.off0, %bb ], [ %v1_f00c176.off0, %dec_label_pc_eff8 ]
  %v3_f00c = load i32, i32* %r5.global-to-local, align 4
  %v4_f00c = inttoptr i32 %v3_f00c to i8*
  store i8 %v1_f00c.off0, i8* %v4_f00c, align 1
  %v0_f010.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f010.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_f004, i32* %r1.global-to-local, align 4
  %v1_f010 = load i32, i32* %ip.global-to-local, align 4
  %v2_f010 = urem i32 %v1_f010, 256
  store i32 %v2_f010, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_f01010 = load i32, i32* %ip.global-to-local, align 4
  %v2_f01011 = urem i32 %v1_f01010, 256
  store i32 %v2_f01011, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_f014.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_f014.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_f02c.pre = phi i32 [ %v2_f01011, %..thread12_crit_edge ], [ %v2_f010, %bb122 ], [ 0, %bb123 ]
  %v0_f01c = load i32, i32* @r4, align 4
  %v1_f01c = add i32 %v0_f01c, 1
  store i32 %v1_f01c, i32* @r4, align 4
  %v0_f020 = load i32, i32* %r0.global-to-local, align 4
  %v1_f020 = add i32 %v0_f020, -1
  store i32 %v1_f020, i32* %r0.global-to-local, align 4
  %v0_f024 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_f024, i32* %r2.global-to-local, align 4
  %v2_f028 = icmp eq i32 %v1_f020, 0
  store i1 %v2_f028, i1* %cpsr_z.global-to-local, align 1
  %v1_f02c = add nuw nsw i32 %v0_f02c.pre, 1
  store i32 %v1_f02c, i32* %ip.global-to-local, align 4
  %v1_f030 = add i32 %v0_f024, 1
  store i32 %v1_f030, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_f020, 1
  %extract.t179 = trunc i32 %v0_f02c.pre to i8
  br i1 %tmp124, label %dec_label_pc_f038, label %dec_label_pc_eff8

dec_label_pc_f038:                                ; preds = %.thread12, %dec_label_pc_efb0
  %v2_f03c.lcssa = phi i32 [ %v2_efe8, %dec_label_pc_efb0 ], [ %v0_f024, %.thread12 ]
  %v3_efc8 = inttoptr i32 %v2_efc8 to i8*
  store i32 0, i32* @r4, align 4
  %v3_f03c = inttoptr i32 %v2_f03c.lcssa to i8*
  store i8 0, i8* %v3_f03c, align 1
  store i32 %v2_efdc, i32* %r0.global-to-local, align 4
  %v1_f044 = bitcast i32* %stack_var_-2228 to i8*
  %v2_f044 = call i32 @function_ff04(i8* %v1_f044)
  %v2_f048 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_f048, i32* %r1.global-to-local, align 4
  %v0_f04c = load i32, i32* %fp.global-to-local, align 4
  %v2_f04c = add i32 %v0_f04c, %v2_f044
  store i32 %v2_f04c, i32* @r5, align 4
  %v0_f050 = load i32, i32* @r4, align 4
  store i32 %v0_f050, i32* %stack_var_-64, align 4
  store i32 %v2_efdc, i32* %r0.global-to-local, align 4
  %v2_f064 = call i32 @function_ff04(i8* %v1_f044)
  %v1_f068 = add i32 %v2_f064, 17
  store i32 %v1_f068, i32* %r0.global-to-local, align 4
  %v0_f070 = call i32 @function_eccc()
  store i32 %v0_f070, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_f07c = call i32 @function_10620(i32 %v0_f070, i32 65535)
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_f088 = urem i32 %v2_f07c, 65536
  store i32 %v6_f088, i32* %r3.global-to-local, align 4
  %v2_f090 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_f090, i32* %r0.global-to-local, align 4
  %v2_f098 = call i32 @function_ffa4(i32 %v2_f090, i32 16)
  %sext = mul i32 %v2_f07c, 16777216
  %v4_f09c = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_f048, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_f09c, i32* %lr.global-to-local, align 4
  %v0_f0e4 = load i32, i32* @r5, align 4
  %v2_f0e4 = add i32 %v0_f0e4, 1
  store i32 %v2_f0e4, i32* %ip.global-to-local, align 4
  %v2_f0e8 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_f0e8, i32* %r1.global-to-local, align 4
  %v5_f0ec = trunc i32 %v4_f09c to i8
  store i8 %v5_f0ec, i8* %stack_var_-2240, align 1
  %v0_f104 = load i32, i32* @r4, align 4
  %v1_f104 = trunc i32 %v0_f104 to i8
  %v4_f104 = inttoptr i32 %v2_f0e4 to i8*
  store i8 %v1_f104, i8* %v4_f104, align 1
  %v0_f108 = load i32, i32* @r4, align 4
  %v1_f108 = trunc i32 %v0_f108 to i8
  %v2_f108 = load i32, i32* %ip.global-to-local, align 4
  %v3_f108 = add i32 %v2_f108, 2
  %v4_f108 = inttoptr i32 %v3_f108 to i8*
  store i8 %v1_f108, i8* %v4_f108, align 1
  %v0_f10c = load i32, i32* %r0.global-to-local, align 4
  %v1_f10c = trunc i32 %v0_f10c to i8
  %v2_f10c = load i32, i32* %ip.global-to-local, align 4
  %v3_f10c = add i32 %v2_f10c, 3
  %v4_f10c = inttoptr i32 %v3_f10c to i8*
  store i8 %v1_f10c, i8* %v4_f10c, align 1
  %v0_f110 = load i32, i32* %r0.global-to-local, align 4
  %v1_f110 = trunc i32 %v0_f110 to i8
  %v2_f110 = load i32, i32* %ip.global-to-local, align 4
  %v3_f110 = add i32 %v2_f110, 1
  %v4_f110 = inttoptr i32 %v3_f110 to i8*
  store i8 %v1_f110, i8* %v4_f110, align 1
  %v0_f118 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_f118, i32* %sl.global-to-local, align 4
  %v2_f120 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_f120, i32* @r6, align 4
  %v3_f158 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_f174 = bitcast i8* %stack_var_-2240 to i32*
  %v2_f1c4 = ptrtoint i32* %stack_var_-36 to i32
  %v2_f1f0 = ptrtoint i32* %stack_var_-48 to i32
  %v6_f24c = bitcast i8* %stack_var_-4288 to i32*
  %v1_f2c8 = add i32 %v2_f0e8, 12
  %v1_f2d0 = inttoptr i32 %v1_f2c8 to i8*
  %v1_f2e4 = add i32 %v2_f0e8, 1
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i8*
  %v1_f300 = add i32 %v2_f0e8, 6
  %v2_f300 = inttoptr i32 %v1_f300 to i8*
  %v1_f304 = add i32 %v2_f0e8, 7
  %v2_f304 = inttoptr i32 %v1_f304 to i8*
  br label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f278, %dec_label_pc_f038
  %v1_f128 = phi i32 [ %v0_f124.pre, %dec_label_pc_f278 ], [ -1, %dec_label_pc_f038 ]
  %v7_f124 = icmp eq i32 %v1_f128, -1
  store i1 %v7_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f124, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_f124
  store i32 %v1_f128, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_f124, %bb125
  store i32 61744, i32* @lr, align 4
  %v1_f12c = xor i1 %v7_f124, true
  call void @__pseudo_cond_branch(i1 %v1_f12c, i32 ptrtoint (i32* @global_var_108c4.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f13c = call i32 @function_111c0(i32 2, i32 2, i32 0)
  store i32 %v3_f13c, i32* %r0.global-to-local, align 4
  %v7_f140 = icmp eq i32 %v3_f13c, -1
  store i1 %v7_f140, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f13c, i32* @r7, align 4
  br i1 %v7_f140, label %dec_label_pc_f2b8, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %bb126
  store i32 %v2_f090, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_f158 = call i32 @function_1101c(i32 %v3_f13c, %sockaddr* %v3_f158, i32 16)
  store i32 %v4_f158, i32* %r0.global-to-local, align 4
  %v7_f15c = icmp eq i32 %v4_f158, -1
  store i1 %v7_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f15c, label %dec_label_pc_f280, label %dec_label_pc_f164

dec_label_pc_f164:                                ; preds = %dec_label_pc_f14c
  %v0_f164 = load i32, i32* @r7, align 4
  store i32 %v0_f164, i32* %r0.global-to-local, align 4
  store i32 %v2_efe0, i32* %r1.global-to-local, align 4
  store i32 %v1_f068, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f174 = call i32 @function_11130(i32 %v0_f164, i32* %v4_f174, i32 %v1_f068, i32 16384)
  store i32 %v5_f174, i32* %r0.global-to-local, align 4
  %v7_f178 = icmp eq i32 %v5_f174, -1
  store i1 %v7_f178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f178, label %dec_label_pc_f280, label %dec_label_pc_f180

dec_label_pc_f180:                                ; preds = %dec_label_pc_f164
  %v0_f180 = load i32, i32* @r7, align 4
  store i32 %v0_f180, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_f18c = call i32 @function_107d4(i32 3, i32 %v0_f180)
  store i32 0, i32* @r4, align 4
  %v1_f194 = or i32 %v2_f18c, 2048
  store i32 %v1_f194, i32* @r2, align 4
  %v0_f198 = load i32, i32* @r7, align 4
  store i32 %v0_f198, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_f1a0 = call i32 @function_107d4(i32 4, i32 %v0_f198)
  store i32 %v2_f1a0, i32* %r0.global-to-local, align 4
  %v0_f1a4 = load i32, i32* @r4, align 4
  store i32 %v0_f1a4, i32* %r3.global-to-local, align 4
  %v2_f1a8154 = load i32, i32* @r6, align 4
  %v3_f1a8155 = add i32 %v2_f1a8154, %v0_f1a4
  %v4_f1a8156 = inttoptr i32 %v3_f1a8155 to i32*
  store i32 %v0_f1a4, i32* %v4_f1a8156, align 4
  %v0_f1ac157 = load i32, i32* %r3.global-to-local, align 4
  %v1_f1ac158 = add i32 %v0_f1ac157, 4
  store i32 %v1_f1ac158, i32* %r3.global-to-local, align 4
  %v7_f1b0159 = icmp eq i32 %v1_f1ac158, 128
  br i1 %v7_f1b0159, label %dec_label_pc_f1b8, label %dec_label_pc_f1a8.dec_label_pc_f1a8_crit_edge

dec_label_pc_f1a8.dec_label_pc_f1a8_crit_edge:    ; preds = %dec_label_pc_f180, %dec_label_pc_f1a8.dec_label_pc_f1a8_crit_edge
  %v1_f1ac160 = phi i32 [ %v1_f1ac, %dec_label_pc_f1a8.dec_label_pc_f1a8_crit_edge ], [ %v1_f1ac158, %dec_label_pc_f180 ]
  %v0_f1a8.pre = load i32, i32* @r4, align 4
  %v2_f1a8 = load i32, i32* @r6, align 4
  %v3_f1a8 = add i32 %v2_f1a8, %v1_f1ac160
  %v4_f1a8 = inttoptr i32 %v3_f1a8 to i32*
  store i32 %v0_f1a8.pre, i32* %v4_f1a8, align 4
  %v0_f1ac = load i32, i32* %r3.global-to-local, align 4
  %v1_f1ac = add i32 %v0_f1ac, 4
  store i32 %v1_f1ac, i32* %r3.global-to-local, align 4
  %v7_f1b0 = icmp eq i32 %v1_f1ac, 128
  br i1 %v7_f1b0, label %dec_label_pc_f1b8, label %dec_label_pc_f1a8.dec_label_pc_f1a8_crit_edge

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f1a8.dec_label_pc_f1a8_crit_edge, %dec_label_pc_f180
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f1b8 = load i32, i32* @r7, align 4
  %v3_f1b8 = udiv i32 %v0_f1b8, 32
  %v3_f1c0 = mul nuw nsw i32 %v3_f1b8, 4
  store i32 %v3_f1c0, i32* %r3.global-to-local, align 4
  store i32 %v2_f1c4, i32* %r2.global-to-local, align 4
  %v2_f1c8 = add i32 %v3_f1c0, %v2_f1c4
  store i32 %v2_f1c8, i32* @r5, align 4
  %v1_f1cc = add i32 %v2_f1c8, -156
  %v2_f1cc = inttoptr i32 %v1_f1cc to i32*
  %v3_f1cc = load i32, i32* %v2_f1cc, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_f1d4 = urem i32 %v0_f1b8, 32
  store i32 %v1_f1d4, i32* @r8, align 4
  %v7_f1d8 = shl i32 1, %v1_f1d4
  %v8_f1d8 = or i32 %v3_f1cc, %v7_f1d8
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_f1d8, i32* %v2_f1cc, align 4
  %v0_f1e8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f1e8, i32* %stack_var_-48, align 4
  store i32 %v2_f1f0, i32* %lr.global-to-local, align 4
  store i32 %v2_f048, i32* %ip.global-to-local, align 4
  %v0_f1f8 = load i32, i32* @r7, align 4
  %v1_f1f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_f1f8 = add i32 %v1_f1f8, %v0_f1f8
  store i32 %v2_f1f8, i32* %r0.global-to-local, align 4
  store i32 %v2_f120, i32* %r1.global-to-local, align 4
  %v0_f204 = load i32, i32* @r4, align 4
  store i32 %v0_f204, i32* %r2.global-to-local, align 4
  store i32 %v0_f204, i32* %r3.global-to-local, align 4
  %v5_f210 = call i32 @function_10ae4(i32 %v2_f1f8, i32 %v2_f120, i32 %v0_f204, i32 %v0_f204, i32 %v2_f1f0)
  store i32 %v5_f210, i32* %r0.global-to-local, align 4
  %v7_f214 = icmp eq i32 %v5_f210, -1
  store i1 %v7_f214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f214, label %dec_label_pc_f290, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f1b8
  %v2_f21c = icmp eq i32 %v5_f210, 0
  store i1 %v2_f21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f21c, label %dec_label_pc_f270, label %dec_label_pc_f224

dec_label_pc_f224:                                ; preds = %dec_label_pc_f21c
  %v0_f224 = load i32, i32* @r5, align 4
  %v1_f224 = add i32 %v0_f224, -156
  %v2_f224 = inttoptr i32 %v1_f224 to i32*
  %v3_f224 = load i32, i32* %v2_f224, align 4
  %v1_f228 = load i32, i32* @r8, align 4
  %v6_f228 = ashr i32 %v3_f224, %v1_f228
  store i32 %v6_f228, i32* %r3.global-to-local, align 4
  %v1_f22c = urem i32 %v6_f228, 2
  %v2_f22c = icmp eq i32 %v1_f22c, 0
  store i1 %v2_f22c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f22c, label %dec_label_pc_f290, label %dec_label_pc_f234

dec_label_pc_f234:                                ; preds = %dec_label_pc_f224
  store i32 %v2_f0e8, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f240 = load i32, i32* @r7, align 4
  store i32 %v0_f240, i32* %r0.global-to-local, align 4
  %v0_f244 = load i32, i32* @r4, align 4
  %v7_f24c = call i32 @function_110fc(i32 %v0_f240, i32* %v6_f24c, i32 2048, i32 16384, i32 %v0_f244, i32 %v0_f244)
  store i32 %v7_f24c, i32* %r4.global-to-local, align 4
  %v0_f254 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_f254, i32* %r0.global-to-local, align 4
  %v1_f258 = inttoptr i32 %v0_f254 to i8*
  %v2_f258 = call i32 @function_ff04(i8* %v1_f258)
  %v1_f25c = add i32 %v2_f258, 17
  store i32 %v1_f25c, i32* %r0.global-to-local, align 4
  %v0_f260 = load i32, i32* %r4.global-to-local, align 4
  %v3_f260 = icmp ult i32 %v0_f260, %v1_f25c
  %v9_f260 = icmp eq i32 %v0_f260, %v1_f25c
  store i1 %v9_f260, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_f260, label %dec_label_pc_f270, label %dec_label_pc_f2c4

dec_label_pc_f270:                                ; preds = %dec_label_pc_f234, %dec_label_pc_f2c4, %dec_label_pc_f300, %dec_label_pc_f21c, %dec_label_pc_f2b8
  %v0_f270 = load i32, i32* %sl.global-to-local, align 4
  %v7_f270 = icmp eq i32 %v0_f270, 5
  store i1 %v7_f270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f270, label %dec_label_pc_f290, label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f280, %dec_label_pc_f270
  %v0_f278 = phi i32 [ %v0_f288, %dec_label_pc_f280 ], [ %v0_f270, %dec_label_pc_f270 ]
  %v1_f278 = add i32 %v0_f278, 1
  store i32 %v1_f278, i32* %sl.global-to-local, align 4
  %v0_f124.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f124

dec_label_pc_f280:                                ; preds = %dec_label_pc_f164, %dec_label_pc_f14c
  %v0_f280 = phi i32 [ %v5_f174, %dec_label_pc_f164 ], [ %v4_f158, %dec_label_pc_f14c ]
  %v1_f280 = add i32 %v0_f280, 2
  store i32 %v1_f280, i32* %r0.global-to-local, align 4
  %v1_f284 = call i32 @function_11cf4(i32 %v1_f280)
  store i32 %v1_f284, i32* %r0.global-to-local, align 4
  %v0_f288 = load i32, i32* %sl.global-to-local, align 4
  %v7_f288 = icmp eq i32 %v0_f288, 5
  store i1 %v7_f288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f288, label %dec_label_pc_f290, label %dec_label_pc_f278

dec_label_pc_f290:                                ; preds = %dec_label_pc_f280, %dec_label_pc_f270, %dec_label_pc_f224, %dec_label_pc_f1b8, %dec_label_pc_f310, %dec_label_pc_f31c.backedge
  %v0_f290 = load i32, i32* @r7, align 4
  store i32 %v0_f290, i32* %r0.global-to-local, align 4
  %v1_f294 = call i32 @function_108c4(i32 %v0_f290)
  store i32 %v1_f294, i32* %r0.global-to-local, align 4
  store i32 %v2_efc8, i32* %r2.global-to-local, align 4
  %v2_f29c = load i8, i8* %v3_efc8, align 1
  %v3_f29c = zext i8 %v2_f29c to i32
  store i32 %v3_f29c, i32* @r4, align 4
  %v2_f2a0 = icmp eq i8 %v2_f29c, 0
  store i1 %v2_f2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2a0, label %dec_label_pc_f3fc, label %dec_label_pc_f2a8

dec_label_pc_f2a8:                                ; preds = %dec_label_pc_f290, %dec_label_pc_f3fc
  %stack_var_-4300.0 = phi i8* [ %v5_f410, %dec_label_pc_f3fc ], [ %v3_efc8, %dec_label_pc_f290 ]
  %v4_f2a8 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_f2a8, i32* %r0.global-to-local, align 4
  %v2_f2b4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f2b4, i32* @r4, align 4
  store i32 %v6_efb0, i32* %r5.global-to-local, align 4
  store i32 %v12_efb0, i32* @r7, align 4
  store i32 %v15_efb0, i32* @r8, align 4
  ret i32 %v4_f2a8

dec_label_pc_f2b8:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f2bc = call i32 @function_11cf4(i32 1)
  store i32 %v1_f2bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f270

dec_label_pc_f2c4:                                ; preds = %dec_label_pc_f234
  store i32 %v2_f0e8, i32* %lr.global-to-local, align 4
  store i32 %v1_f2c8, i32* %fp.global-to-local, align 4
  store i32 %v1_f2c8, i32* %r0.global-to-local, align 4
  %v2_f2d0 = call i32 @function_ff04(i8* %v1_f2d0)
  store i32 %v2_f2d0, i32* %r0.global-to-local, align 4
  store i32 %v2_f0e8, i32* %ip.global-to-local, align 4
  store i32 %v2_f1c4, i32* %r1.global-to-local, align 4
  %v4_f2e0 = load i8, i8* %stack_var_-4288, align 1
  %v5_f2e0 = sext i8 %v4_f2e0 to i32
  store i32 %v5_f2e0, i32* %r3.global-to-local, align 4
  %v3_f2e4 = load i8, i8* %v2_f2e4, align 1
  %v4_f2e4 = zext i8 %v3_f2e4 to i32
  store i32 %v4_f2e4, i32* %r2.global-to-local, align 4
  store i32 %v4_f09c, i32* %lr.global-to-local, align 4
  %v4_f2ec = mul nuw nsw i32 %v4_f2e4, 256
  %v5_f2ec = or i32 %v4_f2ec, %v5_f2e0
  store i32 %v5_f2ec, i32* %r3.global-to-local, align 4
  %v0_f2f0 = load i32, i32* %fp.global-to-local, align 4
  %v9_f2f4 = icmp eq i32 %v5_f2ec, %v4_f09c
  store i1 %v9_f2f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f2f0 = add i32 %v2_f2d0, 5
  %v1_f2f8 = add i32 %v2_f2f0, %v0_f2f0
  store i32 %v1_f2f8, i32* %r0.global-to-local, align 4
  br i1 %v9_f2f4, label %dec_label_pc_f300, label %dec_label_pc_f270

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2c4
  %v3_f300 = load i8, i8* %v2_f300, align 1
  %v4_f300 = zext i8 %v3_f300 to i32
  store i32 %v4_f300, i32* %r2.global-to-local, align 4
  %v3_f304 = load i8, i8* %v2_f304, align 1
  %v4_f304 = zext i8 %v3_f304 to i32
  store i32 %v4_f304, i32* %r3.global-to-local, align 4
  %v4_f308 = mul nuw nsw i32 %v4_f304, 256
  %v5_f308 = or i32 %v4_f308, %v4_f300
  store i32 %v5_f308, i32* %r2.global-to-local, align 4
  %v7_f308 = icmp eq i32 %v5_f308, 0
  store i1 %v7_f308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f308, label %dec_label_pc_f270, label %dec_label_pc_f310

dec_label_pc_f310:                                ; preds = %dec_label_pc_f300
  %v3_f314 = mul nuw nsw i32 %v4_f300, 256
  %v5_f318 = or i32 %v4_f304, %v3_f314
  %v1_f3d0 = add i32 %v2_f0e8, -49152
  %v1_f31c143 = add nsw i32 %v5_f318, -1
  %v3_f320144 = mul i32 %v1_f31c143, 65536
  store i32 %v3_f320144, i32* %r3.global-to-local, align 4
  %v7_f324150 = icmp eq i32 %v3_f320144, -65536
  store i1 %v7_f324150, i1* %cpsr_z.global-to-local, align 1
  %v3_f328151 = urem i32 %v1_f31c143, 65536
  store i32 %v3_f328151, i32* @r6, align 4
  br i1 %v7_f324150, label %dec_label_pc_f290, label %dec_label_pc_f330.lr.ph

dec_label_pc_f330.lr.ph:                          ; preds = %dec_label_pc_f310
  %v1_f4ac = add i32 %v2_efc8, 4
  %v2_f4ac = inttoptr i32 %v1_f4ac to i32*
  br label %dec_label_pc_f330

dec_label_pc_f330:                                ; preds = %dec_label_pc_f330.lr.ph, %dec_label_pc_f31c.backedge
  %v3_f328153 = phi i32 [ %v3_f328151, %dec_label_pc_f330.lr.ph ], [ %v3_f328, %dec_label_pc_f31c.backedge ]
  %v0_f384152 = phi i32 [ %v1_f2f8, %dec_label_pc_f330.lr.ph ], [ %storemerge, %dec_label_pc_f31c.backedge ]
  store i32 %v0_f384152, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_f33c17 = inttoptr i32 %v0_f384152 to i8*
  %v2_f33c18 = load i8, i8* %v1_f33c17, align 1
  %v3_f33c19 = zext i8 %v2_f33c18 to i32
  store i32 %v3_f33c19, i32* %r2.global-to-local, align 4
  %v2_f34020 = icmp eq i8 %v2_f33c18, 0
  store i1 %v2_f34020, i1* %cpsr_z.global-to-local, align 1
  %v3_f34421 = mul nuw nsw i32 %v3_f33c19, 256
  store i32 %v3_f34421, i32* %r1.global-to-local, align 4
  br i1 %v2_f34020, label %dec_label_pc_f37c, label %dec_label_pc_f34c.preheader

dec_label_pc_f34c.preheader:                      ; preds = %dec_label_pc_f330, %dec_label_pc_f33c.backedge
  %v1_f420 = phi i32 [ %v1_f42049, %dec_label_pc_f33c.backedge ], [ 1, %dec_label_pc_f330 ]
  %v0_f41847 = phi i32 [ %v0_f418, %dec_label_pc_f33c.backedge ], [ 0, %dec_label_pc_f330 ]
  %v0_f35845 = phi i32 [ %v3_f344, %dec_label_pc_f33c.backedge ], [ %v3_f34421, %dec_label_pc_f330 ]
  %v0_f35443 = phi i32 [ %v1_f41c, %dec_label_pc_f33c.backedge ], [ %v0_f384152, %dec_label_pc_f330 ]
  %v0_f34c41 = phi i32 [ %v3_f33c, %dec_label_pc_f33c.backedge ], [ %v3_f33c19, %dec_label_pc_f330 ]
  br label %dec_label_pc_f34c

dec_label_pc_f34c:                                ; preds = %dec_label_pc_f34c.preheader, %dec_label_pc_f354
  %v0_f418 = phi i32 [ %v0_f41847, %dec_label_pc_f34c.preheader ], [ 1, %dec_label_pc_f354 ]
  %v0_f358 = phi i32 [ %v0_f35845, %dec_label_pc_f34c.preheader ], [ %v3_f374, %dec_label_pc_f354 ]
  %v0_f41c = phi i32 [ %v0_f35443, %dec_label_pc_f34c.preheader ], [ %v2_f364, %dec_label_pc_f354 ]
  %v0_f34c = phi i32 [ %v0_f34c41, %dec_label_pc_f34c.preheader ], [ %v3_f368, %dec_label_pc_f354 ]
  %v7_f34c = icmp eq i32 %v0_f34c, 191
  store i1 %v7_f34c, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_f34c, 192
  br i1 %tmp180, label %dec_label_pc_f418, label %dec_label_pc_f354

dec_label_pc_f354:                                ; preds = %dec_label_pc_f34c
  %v1_f354 = add i32 %v0_f41c, 1
  %v2_f354 = inttoptr i32 %v1_f354 to i8*
  %v3_f354 = load i8, i8* %v2_f354, align 1
  %v4_f354 = zext i8 %v3_f354 to i32
  store i32 %v2_f0e8, i32* %r1.global-to-local, align 4
  %v2_f358 = add i32 %v0_f358, %v1_f3d0
  %v2_f364 = add i32 %v2_f358, %v4_f354
  store i32 %v2_f364, i32* %r3.global-to-local, align 4
  %v1_f368 = inttoptr i32 %v2_f364 to i8*
  %v2_f368 = load i8, i8* %v1_f368, align 1
  %v3_f368 = zext i8 %v2_f368 to i32
  store i32 %v3_f368, i32* %r2.global-to-local, align 4
  %v2_f36c = icmp eq i8 %v2_f368, 0
  store i1 %v2_f36c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %lr.global-to-local, align 4
  %v3_f374 = mul nuw nsw i32 %v3_f368, 256
  store i32 %v3_f374, i32* %r1.global-to-local, align 4
  br i1 %v2_f36c, label %dec_label_pc_f37c, label %dec_label_pc_f34c

dec_label_pc_f37c:                                ; preds = %dec_label_pc_f33c.backedge, %dec_label_pc_f354, %dec_label_pc_f330
  %v1_f380 = phi i32 [ 1, %dec_label_pc_f330 ], [ %v1_f420, %dec_label_pc_f354 ], [ %v1_f42049, %dec_label_pc_f33c.backedge ]
  %v0_f37c = phi i32 [ 0, %dec_label_pc_f330 ], [ 1, %dec_label_pc_f354 ], [ %v0_f418, %dec_label_pc_f33c.backedge ]
  %v7_f37c = icmp eq i32 %v0_f37c, 1
  store i1 %v7_f37c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f37c, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_f37c
  %v2_f380 = add i32 %v1_f380, 1
  store i32 %v2_f380, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_f37c, %bb127
  %v1_f384 = phi i32 [ %v1_f380, %dec_label_pc_f37c ], [ %v2_f380, %bb127 ]
  %v2_f384 = add i32 %v1_f384, %v0_f384152
  store i32 %v2_f384, i32* @r4, align 4
  %v3_f388 = inttoptr i32 %v2_f384 to i8*
  %v4_f388 = load i8, i8* %v3_f388, align 1
  %v6_f388 = zext i8 %v4_f388 to i32
  store i32 %v6_f388, i32* %r3.global-to-local, align 4
  %v1_f38c = add i32 %v2_f384, 1
  %v2_f38c = inttoptr i32 %v1_f38c to i8*
  %v3_f38c = load i8, i8* %v2_f38c, align 1
  %v4_f38c = zext i8 %v3_f38c to i32
  store i32 %v4_f38c, i32* %r2.global-to-local, align 4
  %v4_f390 = mul nuw nsw i32 %v4_f38c, 256
  %v5_f390 = or i32 %v4_f390, %v6_f388
  store i32 %v5_f390, i32* %r3.global-to-local, align 4
  %v7_f394 = icmp eq i32 %v5_f390, 256
  store i1 %v7_f394, i1* %cpsr_z.global-to-local, align 1
  %v1_f398 = add i32 %v2_f384, 10
  store i32 %v1_f398, i32* @r5, align 4
  br i1 %v7_f394, label %dec_label_pc_f438, label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %dec_label_pc_f438, %bb128
  store i32 %v1_f398, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f3ac23 = inttoptr i32 %v1_f398 to i8*
  %v2_f3ac24 = load i8, i8* %v1_f3ac23, align 1
  %v3_f3ac25 = zext i8 %v2_f3ac24 to i32
  store i32 %v3_f3ac25, i32* %r2.global-to-local, align 4
  %v2_f3b026 = icmp eq i8 %v2_f3ac24, 0
  store i1 %v2_f3b026, i1* %cpsr_z.global-to-local, align 1
  %v3_f3b427 = mul nuw nsw i32 %v3_f3ac25, 256
  store i32 %v3_f3b427, i32* %r1.global-to-local, align 4
  br i1 %v2_f3b026, label %dec_label_pc_f3ec, label %dec_label_pc_f3bc.preheader

dec_label_pc_f3bc.preheader:                      ; preds = %dec_label_pc_f3a0, %dec_label_pc_f3ac.backedge
  %v1_f430 = phi i32 [ %v1_f43064, %dec_label_pc_f3ac.backedge ], [ 1, %dec_label_pc_f3a0 ]
  %v0_f42862 = phi i32 [ %v0_f428, %dec_label_pc_f3ac.backedge ], [ 0, %dec_label_pc_f3a0 ]
  %v0_f3c860 = phi i32 [ %v3_f3b4, %dec_label_pc_f3ac.backedge ], [ %v3_f3b427, %dec_label_pc_f3a0 ]
  %v0_f3c458 = phi i32 [ %v1_f42c, %dec_label_pc_f3ac.backedge ], [ %v1_f398, %dec_label_pc_f3a0 ]
  %v0_f3bc56 = phi i32 [ %v3_f3ac, %dec_label_pc_f3ac.backedge ], [ %v3_f3ac25, %dec_label_pc_f3a0 ]
  br label %dec_label_pc_f3bc

dec_label_pc_f3bc:                                ; preds = %dec_label_pc_f3bc.preheader, %dec_label_pc_f3c4
  %v0_f428 = phi i32 [ %v0_f42862, %dec_label_pc_f3bc.preheader ], [ 1, %dec_label_pc_f3c4 ]
  %v0_f3c8 = phi i32 [ %v0_f3c860, %dec_label_pc_f3bc.preheader ], [ %v3_f3e4, %dec_label_pc_f3c4 ]
  %v0_f42c = phi i32 [ %v0_f3c458, %dec_label_pc_f3bc.preheader ], [ %v2_f3d4, %dec_label_pc_f3c4 ]
  %v0_f3bc = phi i32 [ %v0_f3bc56, %dec_label_pc_f3bc.preheader ], [ %v3_f3d8, %dec_label_pc_f3c4 ]
  %v7_f3bc = icmp eq i32 %v0_f3bc, 191
  store i1 %v7_f3bc, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_f3bc, 192
  br i1 %tmp181, label %dec_label_pc_f428, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3bc
  %v1_f3c4 = add i32 %v0_f42c, 1
  %v2_f3c4 = inttoptr i32 %v1_f3c4 to i8*
  %v3_f3c4 = load i8, i8* %v2_f3c4, align 1
  %v4_f3c4 = zext i8 %v3_f3c4 to i32
  store i32 %v2_f0e8, i32* %r1.global-to-local, align 4
  %v2_f3c8 = add i32 %v0_f3c8, %v1_f3d0
  %v2_f3d4 = add i32 %v2_f3c8, %v4_f3c4
  store i32 %v2_f3d4, i32* %r3.global-to-local, align 4
  %v1_f3d8 = inttoptr i32 %v2_f3d4 to i8*
  %v2_f3d8 = load i8, i8* %v1_f3d8, align 1
  %v3_f3d8 = zext i8 %v2_f3d8 to i32
  store i32 %v3_f3d8, i32* %r2.global-to-local, align 4
  %v2_f3dc = icmp eq i8 %v2_f3d8, 0
  store i1 %v2_f3dc, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_f3e4 = mul nuw nsw i32 %v3_f3d8, 256
  store i32 %v3_f3e4, i32* %r1.global-to-local, align 4
  br i1 %v2_f3dc, label %dec_label_pc_f3ec, label %dec_label_pc_f3bc

dec_label_pc_f3ec:                                ; preds = %dec_label_pc_f3ac.backedge, %dec_label_pc_f3c4, %dec_label_pc_f3a0
  %v1_f3f0 = phi i32 [ 1, %dec_label_pc_f3a0 ], [ %v1_f430, %dec_label_pc_f3c4 ], [ %v1_f43064, %dec_label_pc_f3ac.backedge ]
  %v0_f3ec = phi i32 [ 0, %dec_label_pc_f3a0 ], [ 1, %dec_label_pc_f3c4 ], [ %v0_f428, %dec_label_pc_f3ac.backedge ]
  %v7_f3ec = icmp eq i32 %v0_f3ec, 1
  store i1 %v7_f3ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3ec, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_f3ec
  %v2_f3f0 = add i32 %v1_f3f0, 1
  store i32 %v2_f3f0, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_f3ec, %bb129
  %v1_f3f4 = phi i32 [ %v1_f3f0, %dec_label_pc_f3ec ], [ %v2_f3f0, %bb129 ]
  %v2_f3f4 = add i32 %v1_f3f4, %v1_f398
  br label %dec_label_pc_f31c.backedge

dec_label_pc_f31c.backedge:                       ; preds = %bb130, %dec_label_pc_f4e0
  %v0_f31c.pre = phi i32 [ %v3_f328153, %bb130 ], [ %v0_f31c.pre.pre, %dec_label_pc_f4e0 ]
  %storemerge = phi i32 [ %v2_f3f4, %bb130 ], [ %v2_f4f4, %dec_label_pc_f4e0 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_f31c = add i32 %v0_f31c.pre, -1
  %v3_f320 = mul i32 %v1_f31c, 65536
  store i32 %v3_f320, i32* %r3.global-to-local, align 4
  %v7_f324 = icmp eq i32 %v3_f320, -65536
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  %v3_f328 = urem i32 %v1_f31c, 65536
  store i32 %v3_f328, i32* @r6, align 4
  br i1 %v7_f324, label %dec_label_pc_f290, label %dec_label_pc_f330

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f290
  %v1_f3fc = add i32 %v2_efc8, 4
  %v2_f3fc = inttoptr i32 %v1_f3fc to i32*
  %v3_f3fc = load i32, i32* %v2_f3fc, align 4
  store i32 %v3_f3fc, i32* %r0.global-to-local, align 4
  %v2_f400 = icmp eq i32 %v3_f3fc, 0
  store i1 %v2_f400, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_f408.168 to i32), i32* @lr, align 4
  %v1_f404 = xor i1 %v2_f400, true
  call void @__pseudo_cond_branch(i1 %v1_f404, i32 ptrtoint (i32* @global_var_1151c.59 to i32))
  store i32 %v2_efc8, i32* @r0, align 4
  %v0_f40c = call i32 @function_1151c()
  store i32 %v0_f40c, i32* %r0.global-to-local, align 4
  %v0_f410 = load i32, i32* @r4, align 4
  %v5_f410 = inttoptr i32 %v0_f410 to i8*
  br label %dec_label_pc_f2a8

dec_label_pc_f418:                                ; preds = %dec_label_pc_f34c
  %v2_f418 = icmp eq i32 %v0_f418, 0
  store i1 %v2_f418, i1* %cpsr_z.global-to-local, align 1
  %v1_f41c = add i32 %v0_f41c, 1
  store i32 %v1_f41c, i32* %r3.global-to-local, align 4
  br i1 %v2_f418, label %bb131, label %dec_label_pc_f33c.backedge

dec_label_pc_f33c.backedge:                       ; preds = %dec_label_pc_f418, %bb131
  %v1_f42049 = phi i32 [ %v1_f420, %dec_label_pc_f418 ], [ %v2_f420, %bb131 ]
  %v1_f33c = inttoptr i32 %v1_f41c to i8*
  %v2_f33c = load i8, i8* %v1_f33c, align 1
  %v3_f33c = zext i8 %v2_f33c to i32
  store i32 %v3_f33c, i32* %r2.global-to-local, align 4
  %v2_f340 = icmp eq i8 %v2_f33c, 0
  store i1 %v2_f340, i1* %cpsr_z.global-to-local, align 1
  %v3_f344 = mul nuw nsw i32 %v3_f33c, 256
  store i32 %v3_f344, i32* %r1.global-to-local, align 4
  br i1 %v2_f340, label %dec_label_pc_f37c, label %dec_label_pc_f34c.preheader

bb131:                                            ; preds = %dec_label_pc_f418
  %v2_f420 = add i32 %v1_f420, 1
  store i32 %v2_f420, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f33c.backedge

dec_label_pc_f428:                                ; preds = %dec_label_pc_f3bc
  %v2_f428 = icmp eq i32 %v0_f428, 0
  store i1 %v2_f428, i1* %cpsr_z.global-to-local, align 1
  %v1_f42c = add i32 %v0_f42c, 1
  store i32 %v1_f42c, i32* %r3.global-to-local, align 4
  br i1 %v2_f428, label %bb132, label %dec_label_pc_f3ac.backedge

dec_label_pc_f3ac.backedge:                       ; preds = %dec_label_pc_f428, %bb132
  %v1_f43064 = phi i32 [ %v1_f430, %dec_label_pc_f428 ], [ %v2_f430, %bb132 ]
  %v1_f3ac = inttoptr i32 %v1_f42c to i8*
  %v2_f3ac = load i8, i8* %v1_f3ac, align 1
  %v3_f3ac = zext i8 %v2_f3ac to i32
  store i32 %v3_f3ac, i32* %r2.global-to-local, align 4
  %v2_f3b0 = icmp eq i8 %v2_f3ac, 0
  store i1 %v2_f3b0, i1* %cpsr_z.global-to-local, align 1
  %v3_f3b4 = mul nuw nsw i32 %v3_f3ac, 256
  store i32 %v3_f3b4, i32* %r1.global-to-local, align 4
  br i1 %v2_f3b0, label %dec_label_pc_f3ec, label %dec_label_pc_f3bc.preheader

bb132:                                            ; preds = %dec_label_pc_f428
  %v2_f430 = add i32 %v1_f430, 1
  store i32 %v2_f430, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f3ac.backedge

dec_label_pc_f438:                                ; preds = %bb128
  %v1_f438 = add i32 %v2_f384, 2
  %v2_f438 = inttoptr i32 %v1_f438 to i8*
  %v3_f438 = load i8, i8* %v2_f438, align 1
  %v4_f438 = zext i8 %v3_f438 to i32
  store i32 %v4_f438, i32* %r3.global-to-local, align 4
  %v1_f43c = add i32 %v2_f384, 3
  %v2_f43c = inttoptr i32 %v1_f43c to i8*
  %v3_f43c = load i8, i8* %v2_f43c, align 1
  %v4_f43c = zext i8 %v3_f43c to i32
  store i32 %v4_f43c, i32* %r2.global-to-local, align 4
  %v4_f440 = mul nuw nsw i32 %v4_f43c, 256
  %v5_f440 = or i32 %v4_f440, %v4_f438
  store i32 %v5_f440, i32* %r3.global-to-local, align 4
  %v7_f444 = icmp eq i32 %v5_f440, 256
  store i1 %v7_f444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f444, label %dec_label_pc_f44c, label %dec_label_pc_f3a0

dec_label_pc_f44c:                                ; preds = %dec_label_pc_f438
  %v1_f44c = add i32 %v2_f384, 8
  %v2_f44c = inttoptr i32 %v1_f44c to i8*
  %v3_f44c = load i8, i8* %v2_f44c, align 1
  %v4_f44c = zext i8 %v3_f44c to i32
  store i32 %v4_f44c, i32* %r1.global-to-local, align 4
  %v1_f450 = add i32 %v2_f384, 9
  %v2_f450 = inttoptr i32 %v1_f450 to i8*
  %v3_f450 = load i8, i8* %v2_f450, align 1
  %v4_f450 = zext i8 %v3_f450 to i32
  store i32 %v4_f450, i32* %r0.global-to-local, align 4
  %v4_f454 = mul nuw nsw i32 %v4_f450, 256
  %v5_f454 = or i32 %v4_f454, %v4_f44c
  %v3_f458 = mul i32 %v5_f454, 65536
  store i32 %v3_f458, i32* %r2.global-to-local, align 4
  %v3_f45c = mul nuw nsw i32 %v4_f44c, 256
  %v5_f464 = or i32 %v4_f450, %v3_f45c
  store i32 %v5_f464, i32* %r3.global-to-local, align 4
  %v7_f468 = icmp eq i32 %v5_f464, 4
  store i1 %v7_f468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f468, label %dec_label_pc_f470, label %dec_label_pc_f4e0

dec_label_pc_f470:                                ; preds = %dec_label_pc_f44c
  %v2_f470 = inttoptr i32 %v1_f398 to i8*
  %v3_f470 = load i8, i8* %v2_f470, align 1
  %v4_f470 = zext i8 %v3_f470 to i32
  store i32 %v4_f470, i32* %r3.global-to-local, align 4
  store i32 %v2_f048, i32* %r2.global-to-local, align 4
  %v1_f47c = add i32 %v2_f384, 11
  %v2_f47c = inttoptr i32 %v1_f47c to i8*
  %v3_f47c = load i8, i8* %v2_f47c, align 1
  %v4_f47c = zext i8 %v3_f47c to i32
  store i32 %v4_f47c, i32* %r2.global-to-local, align 4
  store i32 %v2_f048, i32* %r3.global-to-local, align 4
  %v1_f488 = add i32 %v2_f384, 12
  %v2_f488 = inttoptr i32 %v1_f488 to i8*
  %v3_f488 = load i8, i8* %v2_f488, align 1
  %v4_f488 = zext i8 %v3_f488 to i32
  store i32 %v4_f488, i32* %r3.global-to-local, align 4
  store i32 %v2_f048, i32* %ip.global-to-local, align 4
  %v1_f494 = add i32 %v2_f384, 13
  %v2_f494 = inttoptr i32 %v1_f494 to i8*
  %v3_f494 = load i8, i8* %v2_f494, align 1
  %v4_f494 = zext i8 %v3_f494 to i32
  store i32 %v4_f494, i32* %r2.global-to-local, align 4
  store i32 %v2_efc8, i32* @lr, align 4
  %v2_f4a0 = load i8, i8* %v3_efc8, align 1
  %v3_f4a0 = zext i8 %v2_f4a0 to i32
  %v3_f4a4 = mul nuw nsw i32 %v3_f4a0, 4
  %v1_f4a8 = add nuw nsw i32 %v3_f4a4, 4
  store i32 %v1_f4a8, i32* %r1.global-to-local, align 4
  %v3_f4ac = load i32, i32* %v2_f4ac, align 4
  store i32 %v3_f4ac, i32* %r0.global-to-local, align 4
  %v8_f4b0 = call i32 @function_1160c(i32 %v3_f4ac, i32 %v1_f4a8)
  store i32 %v8_f4b0, i32* %r0.global-to-local, align 4
  store i32 %v2_efc8, i32* %r1.global-to-local, align 4
  store i32 %v2_f048, i32* %ip.global-to-local, align 4
  %v2_f4bc = load i8, i8* %v3_efc8, align 1
  %v3_f4bc = zext i8 %v2_f4bc to i32
  store i32 %v3_f4bc, i32* %r2.global-to-local, align 4
  %v4_f4c0 = sext i8 %v3_f470 to i32
  store i32 %v4_f4c0, i32* %r3.global-to-local, align 4
  store i32 %v2_efc8, i32* %lr.global-to-local, align 4
  %v1_f4c8 = add nuw nsw i32 %v3_f4bc, 1
  store i32 %v1_f4c8, i32* %r1.global-to-local, align 4
  %v5_f4cc = mul nuw nsw i32 %v3_f4bc, 4
  %v6_f4cc = add i32 %v5_f4cc, %v8_f4b0
  %v7_f4cc = inttoptr i32 %v6_f4cc to i32*
  store i32 %v4_f4c0, i32* %v7_f4cc, align 4
  %v1_f4d0 = load i32, i32* %lr.global-to-local, align 4
  %v2_f4d0 = add i32 %v1_f4d0, 4
  %v3_f4d0 = inttoptr i32 %v2_f4d0 to i32*
  store i32 %v8_f4b0, i32* %v3_f4d0, align 4
  %v0_f4d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_f4d4 = trunc i32 %v0_f4d4 to i8
  %v2_f4d4 = load i32, i32* %lr.global-to-local, align 4
  %v3_f4d4 = inttoptr i32 %v2_f4d4 to i8*
  store i8 %v1_f4d4, i8* %v3_f4d4, align 1
  %v0_f4d8 = load i32, i32* @r4, align 4
  %v1_f4d8 = add i32 %v0_f4d8, 9
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i8*
  %v3_f4d8 = load i8, i8* %v2_f4d8, align 1
  %v4_f4d8 = zext i8 %v3_f4d8 to i32
  store i32 %v4_f4d8, i32* %r0.global-to-local, align 4
  %v1_f4dc = add i32 %v0_f4d8, 8
  %v2_f4dc = inttoptr i32 %v1_f4dc to i8*
  %v3_f4dc = load i8, i8* %v2_f4dc, align 1
  %v4_f4dc = zext i8 %v3_f4dc to i32
  store i32 %v4_f4dc, i32* %r1.global-to-local, align 4
  %v0_f4f4.pre = load i32, i32* @r5, align 4
  %v0_f31c.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f4e0

dec_label_pc_f4e0:                                ; preds = %dec_label_pc_f44c, %dec_label_pc_f470
  %v0_f31c.pre.pre = phi i32 [ %v3_f328153, %dec_label_pc_f44c ], [ %v0_f31c.pre.pre.pre, %dec_label_pc_f470 ]
  %v0_f4f4 = phi i32 [ %v1_f398, %dec_label_pc_f44c ], [ %v0_f4f4.pre, %dec_label_pc_f470 ]
  %v1_f4e0 = phi i32 [ %v4_f450, %dec_label_pc_f44c ], [ %v4_f4d8, %dec_label_pc_f470 ]
  %v0_f4e0 = phi i32 [ %v4_f44c, %dec_label_pc_f44c ], [ %v4_f4dc, %dec_label_pc_f470 ]
  %v4_f4e0 = mul nuw nsw i32 %v1_f4e0, 256
  %v5_f4e0 = or i32 %v4_f4e0, %v0_f4e0
  %v3_f4e4 = mul i32 %v5_f4e0, 65536
  store i32 %v3_f4e4, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_f4e0, 256
  %v5_f4f0 = or i32 %tmp133, %v1_f4e0
  store i32 %v5_f4f0, i32* %r3.global-to-local, align 4
  %v2_f4f4 = add i32 %v5_f4f0, %v0_f4f4
  br label %dec_label_pc_f31c.backedge

; uselistorder directives
  uselistorder i32 %v1_f4e0, { 1, 0 }
  uselistorder i32 %v3_f4bc, { 1, 0, 2 }
  uselistorder i32 %v8_f4b0, { 1, 0, 2 }
  uselistorder i32 %v4_f450, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f44c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_f430, { 1, 0 }
  uselistorder i32 %v3_f3ac, { 0, 2, 1 }
  uselistorder i32 %v1_f43064, { 1, 0 }
  uselistorder i32 %v1_f42c, { 1, 2, 0 }
  uselistorder i32 %v2_f420, { 1, 0 }
  uselistorder i32 %v3_f33c, { 0, 2, 1 }
  uselistorder i32 %v1_f42049, { 1, 0 }
  uselistorder i32 %v1_f41c, { 1, 2, 0 }
  uselistorder i1 %v7_f324, { 1, 0 }
  uselistorder i32 %v1_f31c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_f3d8, { 0, 2, 1 }
  uselistorder i32 %v2_f3d4, { 1, 2, 0 }
  uselistorder i32 %v0_f428, { 2, 0, 1 }
  uselistorder i32 %v1_f430, { 1, 2, 0 }
  uselistorder i32 %v3_f3b427, { 1, 0 }
  uselistorder i32 %v3_f3ac25, { 1, 0, 2 }
  uselistorder i32 %v1_f398, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_f384, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_f368, { 0, 2, 1 }
  uselistorder i32 %v2_f364, { 1, 2, 0 }
  uselistorder i32 %v0_f418, { 2, 0, 1 }
  uselistorder i32 %v1_f420, { 1, 2, 0 }
  uselistorder i32 %v3_f34421, { 1, 0 }
  uselistorder i32 %v3_f33c19, { 1, 0, 2 }
  uselistorder i32 %v0_f384152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f328151, { 1, 0 }
  uselistorder i1 %v7_f324150, { 1, 0 }
  uselistorder i32 %v1_f31c143, { 1, 0 }
  uselistorder i32 %v4_f304, { 1, 0, 2 }
  uselistorder i32 %v0_f288, { 1, 0 }
  uselistorder i32 %v0_f260, { 1, 0 }
  uselistorder i1 %v7_f214, { 1, 0 }
  uselistorder i32 %v5_f210, { 1, 0, 2 }
  uselistorder i32 %v1_f1d4, { 1, 0 }
  uselistorder i32 %v3_f1c0, { 1, 0 }
  uselistorder i32 %v0_f1b8, { 1, 0 }
  uselistorder i32 %v1_f1ac, { 1, 2, 0 }
  uselistorder i1 %v7_f178, { 1, 0 }
  uselistorder i32 %v5_f174, { 1, 0, 2 }
  uselistorder i1 %v7_f15c, { 1, 0 }
  uselistorder i32 %v4_f158, { 1, 0, 2 }
  uselistorder i1 %v7_f140, { 1, 0 }
  uselistorder i32 %v3_f13c, { 1, 2, 0, 3 }
  uselistorder i1 %v7_f124, { 2, 1, 0 }
  uselistorder i32 %v1_f128, { 1, 0 }
  uselistorder i32 %v1_f2c8, { 1, 2, 0 }
  uselistorder i32 %v2_f1c4, { 1, 0, 2 }
  uselistorder i32 %v2_f120, { 1, 0, 2 }
  uselistorder i32 %v2_f0e8, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_f09c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_f068, { 1, 0, 2 }
  uselistorder i32 %v0_f024, { 0, 1, 3, 2 }
  uselistorder i32 %v1_f020, { 1, 0, 2 }
  uselistorder i32 %v1_f01c, { 1, 0 }
  uselistorder i32 %v2_f01011, { 1, 0 }
  uselistorder i32 %v2_f010, { 1, 0 }
  uselistorder i1 %v8_f000, { 1, 0 }
  uselistorder i32 %v2_efe8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_efd0, { 1, 0 }
  uselistorder i32 %v2_efc8, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 28, 9, 10, 27, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 29, 24, 30, 26 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 48, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 34, 9, 10, 11, 12, 33, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 32, 30, 28, 29, 31, 37 }
  uselistorder i32 (i32, i32)* @function_1160c, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_11cf4, { 8, 7, 11, 10, 9, 6, 5, 2, 1, 4, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10ae4, { 1, 2, 0 }
  uselistorder i32 2048, { 5, 7, 8, 0, 1, 2, 3, 6, 9, 4, 10, 11 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_11130, { 4, 0, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 16384, { 0, 29, 11, 30, 2, 22, 14, 23, 13, 24, 15, 25, 16, 26, 1, 27, 12, 28, 3, 31, 17, 18, 4, 32, 5, 33, 7, 34, 6, 35, 8, 36, 9, 37, 20, 38, 21, 39, 10, 40, 19, 41 }
  uselistorder i32 (i32, i32)* @function_ffa4, { 11, 15, 14, 13, 12, 10, 9, 7, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_eccc, { 49, 52, 51, 50, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 2, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i8*)* @function_ff04, { 4, 5, 6, 7, 8, 0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 71, 72, 73, 74, 75, 76, 77, 78, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 }
  uselistorder label %dec_label_pc_f4e0, { 1, 0 }
  uselistorder label %dec_label_pc_f3ac.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f33c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f31c.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_f3bc, { 1, 0 }
  uselistorder label %dec_label_pc_f3bc.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_f34c, { 1, 0 }
  uselistorder label %dec_label_pc_f34c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f330, { 1, 0 }
  uselistorder label %dec_label_pc_f2a8, { 1, 0 }
  uselistorder label %dec_label_pc_f290, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_f270, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_f1a8.dec_label_pc_f1a8_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_eff8, { 1, 0 }
}

define i32 @function_f4fc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f4fc:
  %v3_f500 = mul i32 %arg1, 8
  %v2_f504 = add i32 %v3_f500, ptrtoint (i32* @global_var_1bcd8.170 to i32)
  %v2_f508 = icmp eq i32* %arg2, null
  br i1 %v2_f508, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f4fc
  %v3_f51411 = inttoptr i32 %v2_f504 to i32*
  %v4_f51412 = load i32, i32* %v3_f51411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_f4fc
  %v2_f50c = add i32 %v3_f500, add (i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), i32 5)
  %v3_f50c = inttoptr i32 %v2_f50c to i8*
  %v4_f50c = load i8, i8* %v3_f50c, align 1
  %v5_f50c = zext i8 %v4_f50c to i32
  store i32 %v5_f50c, i32* @r2, align 4
  %v2_f510 = add i32 %v3_f500, add (i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), i32 4)
  %v3_f510 = inttoptr i32 %v2_f510 to i8*
  %v4_f510 = load i8, i8* %v3_f510, align 4
  %v5_f510 = zext i8 %v4_f510 to i32
  %v3_f514 = inttoptr i32 %v2_f504 to i32*
  %v4_f514 = load i32, i32* %v3_f514, align 4
  %v5_f518 = mul nuw nsw i32 %v5_f50c, 256
  %v6_f518 = or i32 %v5_f510, %v5_f518
  store i32 %v6_f518, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_f514714 = phi i32 [ %v4_f51412, %.thread ], [ %v4_f514, %bb ]
  ret i32 %v4_f514714

; uselistorder directives
  uselistorder i32 %v2_f504, { 1, 0 }
  uselistorder i32 %v3_f500, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_f528(i32 %arg1) local_unnamed_addr {
dec_label_pc_f528:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_f528 = mul i32 %arg1, 8
  %v3_f52c = load i32, i32* @r4, align 4
  store i32 %v3_f52c, i32* %stack_var_-20, align 4
  %v3_f53c = and i32 %v3_f528, 2040
  %v2_f540 = add i32 %v3_f53c, ptrtoint (i32* @global_var_1bcd8.170 to i32)
  store i32 %v2_f540, i32* @lr, align 4
  %v1_f548 = add i32 %v3_f53c, add (i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), i32 4)
  store i32 %v1_f548, i32* %r7.global-to-local, align 4
  %v2_f54c = load i32, i32* @global_var_1baf4.173, align 4
  %v2_f550 = inttoptr i32 %v1_f548 to i8*
  %v3_f550 = load i8, i8* %v2_f550, align 4
  %v4_f550 = zext i8 %v3_f550 to i32
  store i32 %v4_f550, i32* @r1, align 4
  %v1_f554 = add i32 %v3_f53c, add (i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), i32 5)
  %v2_f554 = inttoptr i32 %v1_f554 to i8*
  %v3_f554 = load i8, i8* %v2_f554, align 1
  %v4_f554 = zext i8 %v3_f554 to i32
  %v3_f558 = udiv i32 %v2_f54c, 256
  %v4_f55c = mul nuw nsw i32 %v4_f554, 256
  %v5_f55c = or i32 %v4_f55c, %v4_f550
  %v7_f55c = icmp eq i32 %v5_f55c, 0
  store i1 %v7_f55c, i1* @cpsr_z, align 1
  %v3_f560 = udiv i32 %v2_f54c, 65536
  %v1_f564 = urem i32 %v3_f558, 256
  store i32 %v1_f564, i32* %r6.global-to-local, align 4
  %v1_f568 = urem i32 %v3_f560, 256
  store i32 %v1_f568, i32* %r5.global-to-local, align 4
  %v3_f56c = udiv i32 %v2_f54c, 16777216
  store i32 %v3_f56c, i32* %r4.global-to-local, align 4
  %v1_f570 = urem i32 %v2_f54c, 256
  br i1 %v7_f55c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_f528
  store i32 %v3_f52c, i32* @r4, align 4
  ret i32 %v1_f570

bb8:                                              ; preds = %dec_label_pc_f528
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f57c

dec_label_pc_f57c:                                ; preds = %dec_label_pc_f57c, %bb8
  %v2_f588 = phi i32 [ %v1_f5c4, %dec_label_pc_f57c ], [ 0, %bb8 ]
  %v0_f57c = phi i32 [ %v0_f5bc, %dec_label_pc_f57c ], [ %v2_f540, %bb8 ]
  %v1_f57c = inttoptr i32 %v0_f57c to i32*
  %v2_f57c = load i32, i32* %v1_f57c, align 4
  %v2_f580 = add i32 %v2_f57c, %v2_f588
  %v3_f580 = inttoptr i32 %v2_f580 to i8*
  %v4_f580 = load i8, i8* %v3_f580, align 1
  %v6_f580 = zext i8 %v4_f580 to i32
  %v2_f584 = xor i32 %v6_f580, %v1_f570
  %v1_f588 = trunc i32 %v2_f584 to i8
  store i8 %v1_f588, i8* %v3_f580, align 1
  %v0_f58c = load i32, i32* @lr, align 4
  %v1_f58c = inttoptr i32 %v0_f58c to i32*
  %v2_f58c = load i32, i32* %v1_f58c, align 4
  %v0_f590 = load i32, i32* %ip.global-to-local, align 4
  %v2_f590 = add i32 %v0_f590, %v2_f58c
  %v3_f590 = inttoptr i32 %v2_f590 to i8*
  %v4_f590 = load i8, i8* %v3_f590, align 1
  %v6_f590 = zext i8 %v4_f590 to i32
  %v0_f594 = load i32, i32* %r6.global-to-local, align 4
  %v2_f594 = xor i32 %v0_f594, %v6_f590
  %v1_f598 = trunc i32 %v2_f594 to i8
  store i8 %v1_f598, i8* %v3_f590, align 1
  %v0_f59c = load i32, i32* @lr, align 4
  %v1_f59c = inttoptr i32 %v0_f59c to i32*
  %v2_f59c = load i32, i32* %v1_f59c, align 4
  %v0_f5a0 = load i32, i32* %ip.global-to-local, align 4
  %v2_f5a0 = add i32 %v0_f5a0, %v2_f59c
  %v3_f5a0 = inttoptr i32 %v2_f5a0 to i8*
  %v4_f5a0 = load i8, i8* %v3_f5a0, align 1
  %v6_f5a0 = zext i8 %v4_f5a0 to i32
  %v0_f5a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_f5a4 = xor i32 %v0_f5a4, %v6_f5a0
  %v1_f5a8 = trunc i32 %v2_f5a4 to i8
  store i8 %v1_f5a8, i8* %v3_f5a0, align 1
  %v0_f5ac = load i32, i32* @lr, align 4
  %v1_f5ac = inttoptr i32 %v0_f5ac to i32*
  %v2_f5ac = load i32, i32* %v1_f5ac, align 4
  store i32 %v2_f5ac, i32* @r1, align 4
  %v0_f5b0 = load i32, i32* %ip.global-to-local, align 4
  %v2_f5b0 = add i32 %v0_f5b0, %v2_f5ac
  %v3_f5b0 = inttoptr i32 %v2_f5b0 to i8*
  %v4_f5b0 = load i8, i8* %v3_f5b0, align 1
  %v6_f5b0 = zext i8 %v4_f5b0 to i32
  %v0_f5b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_f5b4 = xor i32 %v0_f5b4, %v6_f5b0
  %v1_f5b8 = trunc i32 %v2_f5b4 to i8
  store i8 %v1_f5b8, i8* %v3_f5b0, align 1
  %v0_f5bc = load i32, i32* @lr, align 4
  %v1_f5bc = add i32 %v0_f5bc, 4
  %v2_f5bc = inttoptr i32 %v1_f5bc to i8*
  %v3_f5bc = load i8, i8* %v2_f5bc, align 1
  %v4_f5bc = zext i8 %v3_f5bc to i32
  %v0_f5c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_f5c0 = add i32 %v0_f5c0, 1
  %v2_f5c0 = inttoptr i32 %v1_f5c0 to i8*
  %v3_f5c0 = load i8, i8* %v2_f5c0, align 1
  %v4_f5c0 = zext i8 %v3_f5c0 to i32
  %v0_f5c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_f5c4 = add i32 %v0_f5c4, 1
  store i32 %v1_f5c4, i32* %ip.global-to-local, align 4
  %v4_f5c8 = mul nuw nsw i32 %v4_f5c0, 256
  %v5_f5c8 = or i32 %v4_f5c8, %v4_f5bc
  %v9_f5cc = icmp eq i32 %v5_f5c8, %v1_f5c4
  store i1 %v9_f5cc, i1* @cpsr_z, align 1
  %v8_f5d0 = icmp sgt i32 %v5_f5c8, %v1_f5c4
  br i1 %v8_f5d0, label %dec_label_pc_f57c, label %dec_label_pc_f5d4

dec_label_pc_f5d4:                                ; preds = %dec_label_pc_f57c
  %v2_f5d4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_f5d4, i32* @r4, align 4
  ret i32 %v1_f570

; uselistorder directives
  uselistorder i32 %v1_f5c4, { 1, 2, 3, 0 }
  uselistorder i32 %v0_f5bc, { 1, 0 }
  uselistorder i32 %v1_f570, { 0, 2, 1 }
  uselistorder i32 %v2_f54c, { 3, 0, 1, 2 }
}

define i32 @function_f5e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_f5e0:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_f5e0 = mul i32 %arg1, 8
  %v3_f5e4 = load i32, i32* @r4, align 4
  store i32 %v3_f5e4, i32* %stack_var_-20, align 4
  %v3_f5f4 = and i32 %v3_f5e0, 2040
  %v2_f5f8 = add i32 %v3_f5f4, ptrtoint (i32* @global_var_1bcd8.170 to i32)
  store i32 %v2_f5f8, i32* @lr, align 4
  %v1_f600 = add i32 %v3_f5f4, add (i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), i32 4)
  store i32 %v1_f600, i32* %r7.global-to-local, align 4
  %v2_f604 = load i32, i32* @global_var_1baf4.173, align 4
  store i32 %v2_f604, i32* @r2, align 4
  %v2_f608 = inttoptr i32 %v1_f600 to i8*
  %v3_f608 = load i8, i8* %v2_f608, align 4
  %v4_f608 = zext i8 %v3_f608 to i32
  %v1_f60c = add i32 %v3_f5f4, add (i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), i32 5)
  %v2_f60c = inttoptr i32 %v1_f60c to i8*
  %v3_f60c = load i8, i8* %v2_f60c, align 1
  %v4_f60c = zext i8 %v3_f60c to i32
  %v3_f610 = udiv i32 %v2_f604, 256
  %v4_f614 = mul nuw nsw i32 %v4_f60c, 256
  %v5_f614 = or i32 %v4_f614, %v4_f608
  %v7_f614 = icmp eq i32 %v5_f614, 0
  %v3_f618 = udiv i32 %v2_f604, 65536
  %v1_f61c = urem i32 %v3_f610, 256
  store i32 %v1_f61c, i32* %r6.global-to-local, align 4
  %v1_f620 = urem i32 %v3_f618, 256
  store i32 %v1_f620, i32* %r5.global-to-local, align 4
  %v3_f624 = udiv i32 %v2_f604, 16777216
  store i32 %v3_f624, i32* %r4.global-to-local, align 4
  %v1_f628 = urem i32 %v2_f604, 256
  br i1 %v7_f614, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_f5e0
  store i32 %v3_f5e4, i32* @r4, align 4
  ret i32 %v1_f628

bb8:                                              ; preds = %dec_label_pc_f5e0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f634

dec_label_pc_f634:                                ; preds = %dec_label_pc_f634, %bb8
  %v2_f640 = phi i32 [ %v1_f67c, %dec_label_pc_f634 ], [ 0, %bb8 ]
  %v0_f634 = phi i32 [ %v0_f674, %dec_label_pc_f634 ], [ %v2_f5f8, %bb8 ]
  %v1_f634 = inttoptr i32 %v0_f634 to i32*
  %v2_f634 = load i32, i32* %v1_f634, align 4
  %v2_f638 = add i32 %v2_f634, %v2_f640
  %v3_f638 = inttoptr i32 %v2_f638 to i8*
  %v4_f638 = load i8, i8* %v3_f638, align 1
  %v6_f638 = zext i8 %v4_f638 to i32
  %v2_f63c = xor i32 %v6_f638, %v1_f628
  %v1_f640 = trunc i32 %v2_f63c to i8
  store i8 %v1_f640, i8* %v3_f638, align 1
  %v0_f644 = load i32, i32* @lr, align 4
  %v1_f644 = inttoptr i32 %v0_f644 to i32*
  %v2_f644 = load i32, i32* %v1_f644, align 4
  %v0_f648 = load i32, i32* %ip.global-to-local, align 4
  %v2_f648 = add i32 %v0_f648, %v2_f644
  %v3_f648 = inttoptr i32 %v2_f648 to i8*
  %v4_f648 = load i8, i8* %v3_f648, align 1
  %v6_f648 = zext i8 %v4_f648 to i32
  %v0_f64c = load i32, i32* %r6.global-to-local, align 4
  %v2_f64c = xor i32 %v0_f64c, %v6_f648
  %v1_f650 = trunc i32 %v2_f64c to i8
  store i8 %v1_f650, i8* %v3_f648, align 1
  %v0_f654 = load i32, i32* @lr, align 4
  %v1_f654 = inttoptr i32 %v0_f654 to i32*
  %v2_f654 = load i32, i32* %v1_f654, align 4
  %v0_f658 = load i32, i32* %ip.global-to-local, align 4
  %v2_f658 = add i32 %v0_f658, %v2_f654
  %v3_f658 = inttoptr i32 %v2_f658 to i8*
  %v4_f658 = load i8, i8* %v3_f658, align 1
  %v6_f658 = zext i8 %v4_f658 to i32
  %v0_f65c = load i32, i32* %r5.global-to-local, align 4
  %v2_f65c = xor i32 %v0_f65c, %v6_f658
  %v1_f660 = trunc i32 %v2_f65c to i8
  store i8 %v1_f660, i8* %v3_f658, align 1
  %v0_f664 = load i32, i32* @lr, align 4
  %v1_f664 = inttoptr i32 %v0_f664 to i32*
  %v2_f664 = load i32, i32* %v1_f664, align 4
  %v0_f668 = load i32, i32* %ip.global-to-local, align 4
  %v2_f668 = add i32 %v0_f668, %v2_f664
  %v3_f668 = inttoptr i32 %v2_f668 to i8*
  %v4_f668 = load i8, i8* %v3_f668, align 1
  %v6_f668 = zext i8 %v4_f668 to i32
  %v0_f66c = load i32, i32* %r4.global-to-local, align 4
  %v2_f66c = xor i32 %v0_f66c, %v6_f668
  %v1_f670 = trunc i32 %v2_f66c to i8
  store i8 %v1_f670, i8* %v3_f668, align 1
  %v0_f674 = load i32, i32* @lr, align 4
  %v1_f674 = add i32 %v0_f674, 4
  %v2_f674 = inttoptr i32 %v1_f674 to i8*
  %v3_f674 = load i8, i8* %v2_f674, align 1
  %v4_f674 = zext i8 %v3_f674 to i32
  %v0_f678 = load i32, i32* %r7.global-to-local, align 4
  %v1_f678 = add i32 %v0_f678, 1
  %v2_f678 = inttoptr i32 %v1_f678 to i8*
  %v3_f678 = load i8, i8* %v2_f678, align 1
  %v4_f678 = zext i8 %v3_f678 to i32
  %v0_f67c = load i32, i32* %ip.global-to-local, align 4
  %v1_f67c = add i32 %v0_f67c, 1
  store i32 %v1_f67c, i32* %ip.global-to-local, align 4
  %v4_f680 = mul nuw nsw i32 %v4_f678, 256
  %v5_f680 = or i32 %v4_f680, %v4_f674
  store i32 %v5_f680, i32* @r2, align 4
  %v8_f688 = icmp sgt i32 %v5_f680, %v1_f67c
  br i1 %v8_f688, label %dec_label_pc_f634, label %dec_label_pc_f68c

dec_label_pc_f68c:                                ; preds = %dec_label_pc_f634
  %v2_f68c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_f68c, i32* @r4, align 4
  ret i32 %v1_f628

; uselistorder directives
  uselistorder i32 %v1_f67c, { 1, 2, 0 }
  uselistorder i32 %v0_f674, { 1, 0 }
  uselistorder i32 %v1_f628, { 1, 2, 0 }
  uselistorder i32 %v2_f604, { 3, 0, 1, 2, 4 }
}

define i32 @function_f698() local_unnamed_addr {
dec_label_pc_f698:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v1_f6a0 = call i32 @function_11370(i32 15)
  store i32 ptrtoint (i32* @global_var_1326c.177 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 15, i32* @r7, align 4
  store i32 %v1_f6a0, i32* @r5, align 4
  %v3_f6c0 = call i32 @function_ff80(i32 %v1_f6a0, i32 ptrtoint (i32* @global_var_1326c.177 to i32), i32 15)
  %v0_f6c8 = load i32, i32* @r5, align 4
  store i32 %v0_f6c8, i32* @global_var_1bcf0.179, align 4
  %v0_f6cc = load i32, i32* @r7, align 4
  %v1_f6cc = trunc i32 %v0_f6cc to i8
  store i8 %v1_f6cc, i8* bitcast (i32* @global_var_1bcf4.180 to i8*), align 4
  %v0_f6d0 = load i32, i32* @r6, align 4
  %v1_f6d0 = trunc i32 %v0_f6d0 to i8
  store i8 %v1_f6d0, i8* bitcast (i32* @global_var_1bcf5.181 to i8*), align 4
  %v1_f6d4 = call i32 @function_11370(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 %v1_f6d4, i32* %r8.global-to-local, align 4
  %v4_f6e8 = call i32 @function_ff80(i32 %v1_f6d4, i32 ptrtoint ([3 x i8]* @global_var_1327c.183 to i32), i32 2)
  %v0_f6ec = load i32, i32* @r7, align 4
  store i32 %v1_f6d4, i32* @global_var_1bcf8.184, align 4
  %v0_f6f4 = load i32, i32* @r5, align 4
  %v1_f6f4 = trunc i32 %v0_f6f4 to i8
  store i8 %v1_f6f4, i8* bitcast (i32* @global_var_1bcfc.185 to i8*), align 4
  %v0_f6f8 = load i32, i32* @r6, align 4
  %v1_f6f8 = trunc i32 %v0_f6f8 to i8
  store i8 %v1_f6f8, i8* bitcast (i32* @global_var_1bcfd.186 to i8*), align 4
  %v1_f6fc = call i32 @function_11370(i32 %v0_f6ec)
  %v0_f700 = load i32, i32* %sl.global-to-local, align 4
  %v0_f704 = load i32, i32* @r7, align 4
  store i32 %v1_f6fc, i32* %r8.global-to-local, align 4
  %v3_f70c = call i32 @function_ff80(i32 %v1_f6fc, i32 %v0_f700, i32 %v0_f704)
  %v0_f710 = load i32, i32* @r5, align 4
  store i32 %v1_f6fc, i32* @global_var_1bd68.187, align 4
  %v0_f718 = load i32, i32* @r7, align 4
  %v1_f718 = trunc i32 %v0_f718 to i8
  store i8 %v1_f718, i8* bitcast (i32* @global_var_1bd6c.188 to i8*), align 4
  %v0_f71c = load i32, i32* @r6, align 4
  %v1_f71c = trunc i32 %v0_f71c to i8
  store i8 %v1_f71c, i8* bitcast (i32* @global_var_1bd6d.189 to i8*), align 4
  %v1_f720 = call i32 @function_11370(i32 %v0_f710)
  %v0_f724 = load i32, i32* @r5, align 4
  store i32 %v1_f720, i32* @r7, align 4
  %v3_f730 = call i32 @function_ff80(i32 %v1_f720, i32 ptrtoint (i32* @global_var_13280.191 to i32), i32 %v0_f724)
  %v0_f738 = load i32, i32* @r7, align 4
  store i32 %v0_f738, i32* @global_var_1bd70.192, align 4
  %v0_f73c = load i32, i32* @r5, align 4
  %v1_f73c = trunc i32 %v0_f73c to i8
  store i8 %v1_f73c, i8* bitcast (i32* @global_var_1bd74.193 to i8*), align 4
  %v0_f740 = load i32, i32* @r6, align 4
  %v1_f740 = trunc i32 %v0_f740 to i8
  store i8 %v1_f740, i8* bitcast (i32* @global_var_1bd75.194 to i8*), align 4
  %v1_f744 = call i32 @function_11370(i32 10)
  store i32 10, i32* %r8.global-to-local, align 4
  store i32 %v1_f744, i32* @r5, align 4
  %v3_f758 = call i32 @function_ff80(i32 %v1_f744, i32 ptrtoint (i32* @global_var_13284.196 to i32), i32 10)
  %v0_f760 = load i32, i32* @r5, align 4
  store i32 %v0_f760, i32* @global_var_1bce8.197, align 4
  store i8 10, i8* bitcast (i32* @global_var_1bcec.198 to i8*), align 4
  %v0_f768 = load i32, i32* @r6, align 4
  %v1_f768 = trunc i32 %v0_f768 to i8
  store i8 %v1_f768, i8* bitcast (i32* @global_var_1bced.199 to i8*), align 4
  %v1_f76c = call i32 @function_11370(i32 29)
  store i32 %v1_f76c, i32* @r5, align 4
  %v3_f77c = call i32 @function_ff80(i32 %v1_f76c, i32 ptrtoint (i32* @global_var_134c0.201 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1bd04.202 to i8*), align 4
  %v0_f78c = load i32, i32* @r5, align 4
  store i32 %v0_f78c, i32* @global_var_1bd00.203, align 4
  %v0_f790 = load i32, i32* @r6, align 4
  %v1_f790 = trunc i32 %v0_f790 to i8
  store i8 %v1_f790, i8* bitcast (i32* @global_var_1bd05.204 to i8*), align 4
  %v1_f794 = call i32 @function_11370(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_f794, i32* @r5, align 4
  %v3_f7a8 = call i32 @function_ff80(i32 %v1_f794, i32 ptrtoint (i32* @global_var_13290.206 to i32), i32 7)
  %v0_f7b0 = load i32, i32* @r5, align 4
  store i32 %v0_f7b0, i32* @global_var_1bd08.207, align 4
  %v0_f7b4 = load i32, i32* @r7, align 4
  %v1_f7b4 = trunc i32 %v0_f7b4 to i8
  store i8 %v1_f7b4, i8* bitcast (i32* @global_var_1bd0c.208 to i8*), align 4
  %v0_f7b8 = load i32, i32* @r6, align 4
  %v1_f7b8 = trunc i32 %v0_f7b8 to i8
  store i8 %v1_f7b8, i8* bitcast (i32* @global_var_1bd0d.209 to i8*), align 4
  %v1_f7bc = call i32 @function_11370(i32 5)
  store i32 %v1_f7bc, i32* @r5, align 4
  %v3_f7cc = call i32 @function_ff80(i32 %v1_f7bc, i32 ptrtoint (i32* @global_var_13298.211 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1bd14.212 to i8*), align 4
  %v0_f7dc = load i32, i32* @r5, align 4
  store i32 %v0_f7dc, i32* @global_var_1bd10.213, align 4
  %v0_f7e0 = load i32, i32* @r6, align 4
  %v1_f7e0 = trunc i32 %v0_f7e0 to i8
  store i8 %v1_f7e0, i8* bitcast (i32* @global_var_1bd15.214 to i8*), align 4
  %v1_f7e4 = call i32 @function_11370(i32 11)
  store i32 %v1_f7e4, i32* @r5, align 4
  %v3_f7f4 = call i32 @function_ff80(i32 %v1_f7e4, i32 ptrtoint (i32* @global_var_132a0.216 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1bd1c.217 to i8*), align 4
  %v0_f804 = load i32, i32* @r5, align 4
  store i32 %v0_f804, i32* @global_var_1bd18.218, align 4
  %v0_f808 = load i32, i32* @r6, align 4
  %v1_f808 = trunc i32 %v0_f808 to i8
  store i8 %v1_f808, i8* bitcast (i32* @global_var_1bd1d.219 to i8*), align 4
  %v1_f80c = call i32 @function_11370(i32 4)
  store i32 %v1_f80c, i32* @r5, align 4
  %v3_f81c = call i32 @function_ff80(i32 %v1_f80c, i32 ptrtoint (i32* @global_var_132ac.221 to i32), i32 4)
  %v0_f824 = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1bd24.222 to i8*), align 4
  %v0_f82c = load i32, i32* @r5, align 4
  store i32 %v0_f82c, i32* @global_var_1bd20.223, align 4
  %v0_f830 = load i32, i32* @r6, align 4
  %v1_f830 = trunc i32 %v0_f830 to i8
  store i8 %v1_f830, i8* bitcast (i32* @global_var_1bd25.224 to i8*), align 4
  %v1_f834 = call i32 @function_11370(i32 %v0_f824)
  %v0_f838 = load i32, i32* @r7, align 4
  store i32 %v1_f834, i32* @r5, align 4
  %v3_f844 = call i32 @function_ff80(i32 %v1_f834, i32 ptrtoint (i32* @global_var_132b4.226 to i32), i32 %v0_f838)
  %v0_f84c = load i32, i32* @r5, align 4
  store i32 %v0_f84c, i32* @global_var_1bd28.227, align 4
  %v0_f850 = load i32, i32* @r7, align 4
  %v1_f850 = trunc i32 %v0_f850 to i8
  store i8 %v1_f850, i8* bitcast (i32* @global_var_1bd2c.228 to i8*), align 4
  %v0_f854 = load i32, i32* @r6, align 4
  %v1_f854 = trunc i32 %v0_f854 to i8
  store i8 %v1_f854, i8* bitcast (i32* @global_var_1bd2d.229 to i8*), align 4
  %v1_f858 = call i32 @function_11370(i32 8)
  store i32 %v1_f858, i32* @r5, align 4
  %v3_f868 = call i32 @function_ff80(i32 %v1_f858, i32 ptrtoint (i32* @global_var_132bc.231 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1bd34.232 to i8*), align 4
  %v0_f878 = load i32, i32* @r5, align 4
  store i32 %v0_f878, i32* @global_var_1bd30.233, align 4
  %v0_f87c = load i32, i32* @r6, align 4
  %v1_f87c = trunc i32 %v0_f87c to i8
  store i8 %v1_f87c, i8* bitcast (i32* @global_var_1bd35.234 to i8*), align 4
  %v1_f880 = call i32 @function_11370(i32 13)
  store i32 %v1_f880, i32* @r5, align 4
  %v3_f890 = call i32 @function_ff80(i32 %v1_f880, i32 ptrtoint (i32* @global_var_132c8.236 to i32), i32 13)
  %v0_f898 = load i32, i32* %r8.global-to-local, align 4
  store i8 13, i8* bitcast (i32* @global_var_1bd3c.237 to i8*), align 4
  %v0_f8a0 = load i32, i32* @r5, align 4
  store i32 %v0_f8a0, i32* @global_var_1bd38.238, align 4
  %v0_f8a4 = load i32, i32* @r6, align 4
  %v1_f8a4 = trunc i32 %v0_f8a4 to i8
  store i8 %v1_f8a4, i8* bitcast (i32* @global_var_1bd3d.239 to i8*), align 4
  %v1_f8a8 = call i32 @function_11370(i32 %v0_f898)
  %v0_f8b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_f8a8, i32* @r5, align 4
  %v4_f8b8 = call i32 @function_ff80(i32 %v1_f8a8, i32 ptrtoint ([11 x i8]* @global_var_132d8.241 to i32), i32 %v0_f8b0)
  %v0_f8c0 = load i32, i32* @r5, align 4
  store i32 %v0_f8c0, i32* @global_var_1bd40.242, align 4
  %v1_f8c4 = trunc i32 %v0_f8b0 to i8
  store i8 %v1_f8c4, i8* bitcast (i32* @global_var_1bd44.243 to i8*), align 4
  %v0_f8c8 = load i32, i32* @r6, align 4
  %v1_f8c8 = trunc i32 %v0_f8c8 to i8
  store i8 %v1_f8c8, i8* bitcast (i32* @global_var_1bd45.244 to i8*), align 4
  %v1_f8cc = call i32 @function_11370(i32 %v0_f8b0)
  %v0_f8d4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_f8cc, i32* @r5, align 4
  %v4_f8dc = call i32 @function_ff80(i32 %v1_f8cc, i32 ptrtoint ([11 x i8]* @global_var_132e4.246 to i32), i32 %v0_f8d4)
  %v0_f8e4 = load i32, i32* @r5, align 4
  store i32 %v0_f8e4, i32* @global_var_1bd48.247, align 4
  %v1_f8e8 = trunc i32 %v0_f8d4 to i8
  store i8 %v1_f8e8, i8* bitcast (i32* @global_var_1bd4c.248 to i8*), align 4
  %v0_f8ec = load i32, i32* @r6, align 4
  %v1_f8ec = trunc i32 %v0_f8ec to i8
  store i8 %v1_f8ec, i8* bitcast (i32* @global_var_1bd4d.249 to i8*), align 4
  %v1_f8f0 = call i32 @function_11370(i32 33)
  store i32 %v1_f8f0, i32* @r5, align 4
  %v3_f900 = call i32 @function_ff80(i32 %v1_f8f0, i32 ptrtoint (i32* @global_var_132f0.251 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1bd54.252 to i8*), align 4
  %v0_f910 = load i32, i32* @r5, align 4
  store i32 %v0_f910, i32* @global_var_1bd50.253, align 4
  %v0_f914 = load i32, i32* @r6, align 4
  %v1_f914 = trunc i32 %v0_f914 to i8
  store i8 %v1_f914, i8* bitcast (i32* @global_var_1bd55.254 to i8*), align 4
  %v1_f918 = call i32 @function_11370(i32 8)
  store i32 %v1_f918, i32* @r5, align 4
  %v3_f928 = call i32 @function_ff80(i32 %v1_f918, i32 ptrtoint (i32* @global_var_13314.256 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1bd5c.257 to i8*), align 4
  %v0_f938 = load i32, i32* @r5, align 4
  store i32 %v0_f938, i32* @global_var_1bd58.258, align 4
  %v0_f93c = load i32, i32* @r6, align 4
  %v1_f93c = trunc i32 %v0_f93c to i8
  store i8 %v1_f93c, i8* bitcast (i32* @global_var_1bd5d.259 to i8*), align 4
  %v1_f940 = call i32 @function_11370(i32 11)
  store i32 %v1_f940, i32* @r5, align 4
  %v4_f950 = call i32 @function_ff80(i32 %v1_f940, i32 ptrtoint ([12 x i8]* @global_var_13320.261 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1bd64.262 to i8*), align 4
  %v0_f960 = load i32, i32* @r5, align 4
  store i32 %v0_f960, i32* @global_var_1bd60.263, align 4
  %v0_f964 = load i32, i32* @r6, align 4
  %v1_f964 = trunc i32 %v0_f964 to i8
  store i8 %v1_f964, i8* bitcast (i32* @global_var_1bd65.264 to i8*), align 4
  %v1_f968 = call i32 @function_11370(i32 6)
  store i32 %v1_f968, i32* @r5, align 4
  %v3_f978 = call i32 @function_ff80(i32 %v1_f968, i32 ptrtoint (i32* @global_var_1332c.266 to i32), i32 6)
  %v0_f980 = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1bd7c.267 to i8*), align 4
  %v0_f988 = load i32, i32* @r5, align 4
  store i32 %v0_f988, i32* @global_var_1bd78.268, align 4
  %v0_f98c = load i32, i32* @r6, align 4
  %v1_f98c = trunc i32 %v0_f98c to i8
  store i8 %v1_f98c, i8* bitcast (i32* @global_var_1bd7d.269 to i8*), align 4
  %v1_f990 = call i32 @function_11370(i32 %v0_f980)
  %v0_f994 = load i32, i32* @r7, align 4
  store i32 %v1_f990, i32* @r5, align 4
  %v3_f9a0 = call i32 @function_ff80(i32 %v1_f990, i32 ptrtoint (i32* @global_var_134e0.271 to i32), i32 %v0_f994)
  %v0_f9a4 = load i32, i32* @r7, align 4
  %v0_f9a8 = load i32, i32* @r5, align 4
  store i32 %v0_f9a8, i32* @global_var_1bd80.272, align 4
  %v1_f9ac = trunc i32 %v0_f9a4 to i8
  store i8 %v1_f9ac, i8* bitcast (i32* @global_var_1bd84.273 to i8*), align 4
  %v0_f9b0 = load i32, i32* @r6, align 4
  %v1_f9b0 = trunc i32 %v0_f9b0 to i8
  store i8 %v1_f9b0, i8* bitcast (i32* @global_var_1bd85.274 to i8*), align 4
  %v1_f9b4 = call i32 @function_11370(i32 %v0_f9a4)
  %v0_f9b8 = load i32, i32* @r7, align 4
  store i32 %v1_f9b4, i32* @r5, align 4
  %v3_f9c4 = call i32 @function_ff80(i32 %v1_f9b4, i32 ptrtoint (i32* @global_var_13334.276 to i32), i32 %v0_f9b8)
  %v0_f9cc = load i32, i32* @r5, align 4
  store i32 %v0_f9cc, i32* @global_var_1bd88.277, align 4
  %v0_f9d0 = load i32, i32* @r7, align 4
  %v1_f9d0 = trunc i32 %v0_f9d0 to i8
  store i8 %v1_f9d0, i8* bitcast (i32* @global_var_1bd8c.278 to i8*), align 4
  %v0_f9d4 = load i32, i32* @r6, align 4
  %v1_f9d4 = trunc i32 %v0_f9d4 to i8
  store i8 %v1_f9d4, i8* bitcast (i32* @global_var_1bd8d.279 to i8*), align 4
  %v1_f9d8 = call i32 @function_11370(i32 3)
  store i32 %v1_f9d8, i32* @r5, align 4
  %v3_f9e8 = call i32 @function_ff80(i32 %v1_f9d8, i32 ptrtoint (i32* @global_var_1333c.281 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1bd94.282 to i8*), align 4
  %v0_f9f8 = load i32, i32* @r5, align 4
  store i32 %v0_f9f8, i32* @global_var_1bd90.283, align 4
  %v0_f9fc = load i32, i32* @r6, align 4
  %v1_f9fc = trunc i32 %v0_f9fc to i8
  store i8 %v1_f9fc, i8* bitcast (i32* @global_var_1bd95.284 to i8*), align 4
  %v1_fa00 = call i32 @function_11370(i32 19)
  store i32 %v1_fa00, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_fa14 = call i32 @function_ff80(i32 %v1_fa00, i32 ptrtoint (i32* @global_var_134e8.286 to i32), i32 19)
  %v0_fa1c = load i32, i32* @r5, align 4
  store i32 %v0_fa1c, i32* @global_var_1bd98.287, align 4
  store i8 19, i8* bitcast (i32* @global_var_1bd9c.288 to i8*), align 4
  %v0_fa24 = load i32, i32* @r6, align 4
  %v1_fa24 = trunc i32 %v0_fa24 to i8
  store i8 %v1_fa24, i8* bitcast (i32* @global_var_1bd9d.289 to i8*), align 4
  %v1_fa28 = call i32 @function_11370(i32 24)
  store i32 %v1_fa28, i32* @r5, align 4
  %v3_fa38 = call i32 @function_ff80(i32 %v1_fa28, i32 ptrtoint (i32* @global_var_13340.291 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1bda4.292 to i8*), align 4
  %v0_fa48 = load i32, i32* @r5, align 4
  store i32 %v0_fa48, i32* @global_var_1bda0.293, align 4
  %v0_fa4c = load i32, i32* @r6, align 4
  %v1_fa4c = trunc i32 %v0_fa4c to i8
  store i8 %v1_fa4c, i8* bitcast (i32* @global_var_1bda5.294 to i8*), align 4
  %v1_fa50 = call i32 @function_11370(i32 9)
  store i32 %v1_fa50, i32* @r5, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  %v3_fa64 = call i32 @function_ff80(i32 %v1_fa50, i32 ptrtoint (i32* @global_var_1335c.296 to i32), i32 9)
  %v0_fa6c = load i32, i32* @r5, align 4
  store i32 %v0_fa6c, i32* @global_var_1bda8.297, align 4
  store i8 9, i8* bitcast (i32* @global_var_1bdac.298 to i8*), align 4
  %v0_fa74 = load i32, i32* @r6, align 4
  %v1_fa74 = trunc i32 %v0_fa74 to i8
  store i8 %v1_fa74, i8* bitcast (i32* @global_var_1bdad.299 to i8*), align 4
  %v1_fa78 = call i32 @function_11370(i32 16)
  store i32 %v1_fa78, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_fa8c = call i32 @function_ff80(i32 %v1_fa78, i32 ptrtoint (i32* @global_var_134fc.301 to i32), i32 16)
  %v0_fa94 = load i32, i32* @r5, align 4
  store i32 %v0_fa94, i32* @global_var_1bdb0.302, align 4
  store i8 16, i8* bitcast (i32* @global_var_1bdb4.303 to i8*), align 4
  %v0_fa9c = load i32, i32* @r6, align 4
  %v1_fa9c = trunc i32 %v0_fa9c to i8
  store i8 %v1_fa9c, i8* bitcast (i32* @global_var_1bdb5.304 to i8*), align 4
  %v1_faa0 = call i32 @function_11370(i32 22)
  store i32 %v1_faa0, i32* @r5, align 4
  %v3_fab0 = call i32 @function_ff80(i32 %v1_faa0, i32 ptrtoint (i32* @global_var_13510.306 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1bdbc.307 to i8*), align 4
  %v0_fac0 = load i32, i32* @r5, align 4
  store i32 %v0_fac0, i32* @global_var_1bdb8.308, align 4
  %v0_fac4 = load i32, i32* @r6, align 4
  %v1_fac4 = trunc i32 %v0_fac4 to i8
  store i8 %v1_fac4, i8* bitcast (i32* @global_var_1bdbd.309 to i8*), align 4
  %v1_fac8 = call i32 @function_11370(i32 21)
  store i32 %v1_fac8, i32* @r5, align 4
  %v3_fad8 = call i32 @function_ff80(i32 %v1_fac8, i32 ptrtoint (i32* @global_var_13368.311 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1bdc4.312 to i8*), align 4
  %v0_fae8 = load i32, i32* @r5, align 4
  store i32 %v0_fae8, i32* @global_var_1bdc0.313, align 4
  %v0_faec = load i32, i32* @r6, align 4
  %v1_faec = trunc i32 %v0_faec to i8
  store i8 %v1_faec, i8* bitcast (i32* @global_var_1bdc5.314 to i8*), align 4
  %v1_faf0 = call i32 @function_11370(i32 17)
  store i32 %v1_faf0, i32* @r5, align 4
  %v3_fb00 = call i32 @function_ff80(i32 %v1_faf0, i32 ptrtoint (i32* @global_var_13380.316 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1bdcc.317 to i8*), align 4
  %v0_fb10 = load i32, i32* @r5, align 4
  store i32 %v0_fb10, i32* @global_var_1bdc8.318, align 4
  %v0_fb14 = load i32, i32* @r6, align 4
  %v1_fb14 = trunc i32 %v0_fb14 to i8
  store i8 %v1_fb14, i8* bitcast (i32* @global_var_1bdcd.319 to i8*), align 4
  %v1_fb18 = call i32 @function_11370(i32 12)
  %v0_fb24 = load i32, i32* @r7, align 4
  %v1_fb24 = add i32 %v0_fb24, 5
  store i32 %v1_fb24, i32* @r7, align 4
  store i32 %v1_fb18, i32* @r5, align 4
  %v3_fb2c = call i32 @function_ff80(i32 %v1_fb18, i32 ptrtoint (i32* @global_var_13394.321 to i32), i32 12)
  %v0_fb34 = load i32, i32* @r5, align 4
  store i32 %v0_fb34, i32* @global_var_1bdd0.322, align 4
  %v0_fb38 = load i32, i32* @r7, align 4
  %v1_fb38 = trunc i32 %v0_fb38 to i8
  store i8 %v1_fb38, i8* bitcast (i32* @global_var_1bdd4.323 to i8*), align 4
  %v0_fb3c = load i32, i32* @r6, align 4
  %v1_fb3c = trunc i32 %v0_fb3c to i8
  store i8 %v1_fb3c, i8* bitcast (i32* @global_var_1bdd5.324 to i8*), align 4
  %v1_fb40 = call i32 @function_11370(i32 23)
  store i32 %v1_fb40, i32* @r5, align 4
  %v3_fb50 = call i32 @function_ff80(i32 %v1_fb40, i32 ptrtoint (i32* @global_var_133a4.326 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1bddc.327 to i8*), align 4
  %v0_fb60 = load i32, i32* @r5, align 4
  store i32 %v0_fb60, i32* @global_var_1bdd8.328, align 4
  %v0_fb64 = load i32, i32* @r6, align 4
  %v1_fb64 = trunc i32 %v0_fb64 to i8
  store i8 %v1_fb64, i8* bitcast (i32* @global_var_1bddd.329 to i8*), align 4
  %v1_fb68 = call i32 @function_11370(i32 83)
  store i32 %v1_fb68, i32* @r5, align 4
  %v3_fb78 = call i32 @function_ff80(i32 %v1_fb68, i32 ptrtoint (i32* @global_var_13528.331 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1bde4.332 to i8*), align 4
  %v0_fb88 = load i32, i32* @r5, align 4
  store i32 %v0_fb88, i32* @global_var_1bde0.333, align 4
  %v0_fb8c = load i32, i32* @r6, align 4
  %v1_fb8c = trunc i32 %v0_fb8c to i8
  store i8 %v1_fb8c, i8* bitcast (i32* @global_var_1bde5.334 to i8*), align 4
  %v1_fb90 = call i32 @function_11370(i32 32)
  store i32 %v1_fb90, i32* @r5, align 4
  %v3_fba0 = call i32 @function_ff80(i32 %v1_fb90, i32 ptrtoint (i32* @global_var_133bc.336 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1bdec.337 to i8*), align 4
  %v0_fbb0 = load i32, i32* @r5, align 4
  store i32 %v0_fbb0, i32* @global_var_1bde8.338, align 4
  %v0_fbb4 = load i32, i32* @r6, align 4
  %v1_fbb4 = trunc i32 %v0_fbb4 to i8
  store i8 %v1_fbb4, i8* bitcast (i32* @global_var_1bded.339 to i8*), align 4
  %v1_fbb8 = call i32 @function_11370(i32 48)
  store i32 %v1_fbb8, i32* @r5, align 4
  %v3_fbc8 = call i32 @function_ff80(i32 %v1_fbb8, i32 ptrtoint (i32* @global_var_133e0.341 to i32), i32 48)
  %v0_fbd0 = load i32, i32* @r7, align 4
  store i8 48, i8* bitcast (i32* @global_var_1bdf4.342 to i8*), align 4
  %v0_fbd8 = load i32, i32* @r5, align 4
  store i32 %v0_fbd8, i32* @global_var_1bdf0.343, align 4
  %v0_fbdc = load i32, i32* @r6, align 4
  %v1_fbdc = trunc i32 %v0_fbdc to i8
  store i8 %v1_fbdc, i8* bitcast (i32* @global_var_1bdf5.344 to i8*), align 4
  %v1_fbe0 = call i32 @function_11370(i32 %v0_fbd0)
  %v0_fbe4 = load i32, i32* @r7, align 4
  store i32 %v1_fbe0, i32* @r5, align 4
  %v3_fbf0 = call i32 @function_ff80(i32 %v1_fbe0, i32 ptrtoint (i32* @global_var_13414.346 to i32), i32 %v0_fbe4)
  %v0_fbf4 = load i32, i32* %sl.global-to-local, align 4
  %v0_fbf8 = load i32, i32* @r5, align 4
  store i32 %v0_fbf8, i32* @global_var_1bdf8.347, align 4
  %v0_fbfc = load i32, i32* @r7, align 4
  %v1_fbfc = trunc i32 %v0_fbfc to i8
  store i8 %v1_fbfc, i8* bitcast (i32* @global_var_1bdfc.348 to i8*), align 4
  %v0_fc00 = load i32, i32* @r6, align 4
  %v1_fc00 = trunc i32 %v0_fc00 to i8
  store i8 %v1_fc00, i8* bitcast (i32* @global_var_1bdfd.349 to i8*), align 4
  %v1_fc04 = call i32 @function_11370(i32 %v0_fbf4)
  %v0_fc0c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_fc04, i32* @r5, align 4
  %v3_fc14 = call i32 @function_ff80(i32 %v1_fc04, i32 ptrtoint (i32* @global_var_13424.351 to i32), i32 %v0_fc0c)
  %v0_fc18 = load i32, i32* %r8.global-to-local, align 4
  %v0_fc1c = load i32, i32* @r5, align 4
  store i32 %v0_fc1c, i32* @global_var_1be00.352, align 4
  %v1_fc20 = trunc i32 %v0_fc0c to i8
  store i8 %v1_fc20, i8* bitcast (i32* @global_var_1be04.353 to i8*), align 4
  %v0_fc24 = load i32, i32* @r6, align 4
  %v1_fc24 = trunc i32 %v0_fc24 to i8
  store i8 %v1_fc24, i8* bitcast (i32* @global_var_1be05.354 to i8*), align 4
  %v1_fc28 = call i32 @function_11370(i32 %v0_fc18)
  %v0_fc30 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_fc28, i32* @r5, align 4
  %v3_fc38 = call i32 @function_ff80(i32 %v1_fc28, i32 ptrtoint (i32* @global_var_13430.356 to i32), i32 %v0_fc30)
  %v0_fc3c = load i32, i32* @r7, align 4
  %v0_fc40 = load i32, i32* @r5, align 4
  store i32 %v0_fc40, i32* @global_var_1be08.357, align 4
  %v1_fc44 = trunc i32 %v0_fc30 to i8
  store i8 %v1_fc44, i8* bitcast (i32* @global_var_1be0c.358 to i8*), align 4
  %v0_fc48 = load i32, i32* @r6, align 4
  %v1_fc48 = trunc i32 %v0_fc48 to i8
  store i8 %v1_fc48, i8* bitcast (i32* @global_var_1be0d.359 to i8*), align 4
  %v1_fc4c = call i32 @function_11370(i32 %v0_fc3c)
  %v0_fc50 = load i32, i32* @r7, align 4
  store i32 %v1_fc4c, i32* @r5, align 4
  %v3_fc5c = call i32 @function_ff80(i32 %v1_fc4c, i32 ptrtoint (i32* @global_var_1343c.361 to i32), i32 %v0_fc50)
  %v0_fc60 = load i32, i32* %fp.global-to-local, align 4
  %v0_fc64 = load i32, i32* @r5, align 4
  store i32 %v0_fc64, i32* @global_var_1be10.362, align 4
  %v0_fc68 = load i32, i32* @r7, align 4
  %v1_fc68 = trunc i32 %v0_fc68 to i8
  store i8 %v1_fc68, i8* bitcast (i32* @global_var_1be14.363 to i8*), align 4
  %v0_fc6c = load i32, i32* @r6, align 4
  %v1_fc6c = trunc i32 %v0_fc6c to i8
  store i8 %v1_fc6c, i8* bitcast (i32* @global_var_1be15.364 to i8*), align 4
  %v1_fc70 = call i32 @function_11370(i32 %v0_fc60)
  %v0_fc78 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_fc70, i32* @r5, align 4
  %v3_fc80 = call i32 @function_ff80(i32 %v1_fc70, i32 ptrtoint (i32* @global_var_1344c.366 to i32), i32 %v0_fc78)
  %v0_fc84 = load i32, i32* %sb.global-to-local, align 4
  %v0_fc88 = load i32, i32* @r5, align 4
  store i32 %v0_fc88, i32* @global_var_1be18.367, align 4
  %v1_fc8c = trunc i32 %v0_fc78 to i8
  store i8 %v1_fc8c, i8* bitcast (i32* @global_var_1be1c.368 to i8*), align 4
  %v0_fc90 = load i32, i32* @r6, align 4
  %v1_fc90 = trunc i32 %v0_fc90 to i8
  store i8 %v1_fc90, i8* bitcast (i32* @global_var_1be1d.369 to i8*), align 4
  %v1_fc94 = call i32 @function_11370(i32 %v0_fc84)
  %v0_fc9c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_fc94, i32* @r5, align 4
  %v3_fca4 = call i32 @function_ff80(i32 %v1_fc94, i32 ptrtoint (i32* @global_var_13460.371 to i32), i32 %v0_fc9c)
  %v0_fcac = load i32, i32* @r5, align 4
  store i32 %v0_fcac, i32* @global_var_1be20.372, align 4
  %v1_fcb0 = trunc i32 %v0_fc9c to i8
  store i8 %v1_fcb0, i8* bitcast (i32* @global_var_1be24.373 to i8*), align 4
  %v0_fcb4 = load i32, i32* @r6, align 4
  %v1_fcb4 = trunc i32 %v0_fcb4 to i8
  store i8 %v1_fcb4, i8* bitcast (i32* @global_var_1be25.374 to i8*), align 4
  %v1_fcb8 = call i32 @function_11370(i32 8)
  store i32 %v1_fcb8, i32* @r5, align 4
  %v3_fcc8 = call i32 @function_ff80(i32 %v1_fcb8, i32 ptrtoint (i32* @global_var_13474.376 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1be2c.377 to i8*), align 4
  %v0_fcd8 = load i32, i32* @r5, align 4
  store i32 %v0_fcd8, i32* @global_var_1be28.378, align 4
  %v0_fcdc = load i32, i32* @r6, align 4
  %v1_fcdc = trunc i32 %v0_fcdc to i8
  store i8 %v1_fcdc, i8* bitcast (i32* @global_var_1be2d.379 to i8*), align 4
  %v1_fce0 = call i32 @function_11370(i32 11)
  store i32 %v1_fce0, i32* @r5, align 4
  %v3_fcf0 = call i32 @function_ff80(i32 %v1_fce0, i32 ptrtoint (i32* @global_var_133b0.381 to i32), i32 11)
  %v0_fcf8 = load i32, i32* @r7, align 4
  store i8 11, i8* bitcast (i32* @global_var_1be34.382 to i8*), align 4
  %v0_fd00 = load i32, i32* @r5, align 4
  store i32 %v0_fd00, i32* @global_var_1be30.383, align 4
  %v0_fd04 = load i32, i32* @r6, align 4
  %v1_fd04 = trunc i32 %v0_fd04 to i8
  store i8 %v1_fd04, i8* bitcast (i32* @global_var_1be35.384 to i8*), align 4
  %v1_fd08 = call i32 @function_11370(i32 %v0_fcf8)
  %v0_fd0c = load i32, i32* @r7, align 4
  store i32 %v1_fd08, i32* @r5, align 4
  %v3_fd18 = call i32 @function_ff80(i32 %v1_fd08, i32 ptrtoint (i32* @global_var_13480.386 to i32), i32 %v0_fd0c)
  %v0_fd20 = load i32, i32* @r5, align 4
  store i32 %v0_fd20, i32* @global_var_1be38.387, align 4
  %v0_fd24 = load i32, i32* @r7, align 4
  %v1_fd24 = trunc i32 %v0_fd24 to i8
  store i8 %v1_fd24, i8* bitcast (i32* @global_var_1be3c.388 to i8*), align 4
  %v0_fd28 = load i32, i32* @r6, align 4
  %v1_fd28 = trunc i32 %v0_fd28 to i8
  store i8 %v1_fd28, i8* bitcast (i32* @global_var_1be3d.389 to i8*), align 4
  %v1_fd2c = call i32 @function_11370(i32 18)
  store i32 %v1_fd2c, i32* @r5, align 4
  %v3_fd3c = call i32 @function_ff80(i32 %v1_fd2c, i32 ptrtoint (i32* @global_var_13490.391 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1be44.392 to i8*), align 4
  %v0_fd4c = load i32, i32* @r5, align 4
  store i32 %v0_fd4c, i32* @global_var_1be40.393, align 4
  %v0_fd50 = load i32, i32* @r6, align 4
  %v1_fd50 = trunc i32 %v0_fd50 to i8
  store i8 %v1_fd50, i8* bitcast (i32* @global_var_1be45.394 to i8*), align 4
  %v1_fd54 = call i32 @function_11370(i32 25)
  store i32 %v1_fd54, i32* @r5, align 4
  %v3_fd64 = call i32 @function_ff80(i32 %v1_fd54, i32 ptrtoint (i32* @global_var_134a4.396 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1be4c.397 to i8*), align 4
  %v0_fd74 = load i32, i32* @r5, align 4
  store i32 %v0_fd74, i32* @global_var_1be48.398, align 4
  %v0_fd78 = load i32, i32* @r6, align 4
  %v1_fd78 = trunc i32 %v0_fd78 to i8
  store i8 %v1_fd78, i8* bitcast (i32* @global_var_1be4d.399 to i8*), align 4
  %v1_fd7c = call i32 @function_11370(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_fd7c, i32* @r7, align 4
  %v3_fd90 = call i32 @function_ff80(i32 %v1_fd7c, i32 ptrtoint (i32* @global_var_1357c.401 to i32), i32 111)
  %v0_fd94 = load i32, i32* @r5, align 4
  %v0_fd98 = load i32, i32* @r7, align 4
  store i32 %v0_fd98, i32* @global_var_1be50.402, align 4
  %v1_fd9c = trunc i32 %v0_fd94 to i8
  store i8 %v1_fd9c, i8* bitcast (i32* @global_var_1be54.403 to i8*), align 4
  %v0_fda0 = load i32, i32* @r6, align 4
  %v1_fda0 = trunc i32 %v0_fda0 to i8
  store i8 %v1_fda0, i8* bitcast (i32* @global_var_1be55.404 to i8*), align 4
  %v1_fda4 = call i32 @function_11370(i32 %v0_fd94)
  %v0_fda8 = load i32, i32* @r5, align 4
  store i32 %v1_fda4, i32* @r7, align 4
  %v3_fdb4 = call i32 @function_ff80(i32 %v1_fda4, i32 ptrtoint (i32* @global_var_135ec.406 to i32), i32 %v0_fda8)
  %v0_fdbc = load i32, i32* @r7, align 4
  store i32 %v0_fdbc, i32* @global_var_1be58.407, align 4
  %v0_fdc0 = load i32, i32* @r5, align 4
  %v1_fdc0 = trunc i32 %v0_fdc0 to i8
  store i8 %v1_fdc0, i8* bitcast (i32* @global_var_1be5c.408 to i8*), align 4
  %v0_fdc4 = load i32, i32* @r6, align 4
  %v1_fdc4 = trunc i32 %v0_fdc4 to i8
  store i8 %v1_fdc4, i8* bitcast (i32* @global_var_1be5d.409 to i8*), align 4
  %v1_fdc8 = call i32 @function_11370(i32 110)
  %v0_fdcc = load i32, i32* @r5, align 4
  %v1_fdcc = add i32 %v0_fdcc, -1
  store i32 %v1_fdcc, i32* @r5, align 4
  store i32 %v1_fdc8, i32* @r7, align 4
  %v3_fddc = call i32 @function_ff80(i32 %v1_fdc8, i32 ptrtoint (i32* @global_var_1365c.411 to i32), i32 %v1_fdcc)
  %v0_fde0 = load i32, i32* @r5, align 4
  %v0_fde4 = load i32, i32* @r7, align 4
  store i32 %v0_fde4, i32* @global_var_1be60.412, align 4
  %v1_fde8 = trunc i32 %v0_fde0 to i8
  store i8 %v1_fde8, i8* bitcast (i32* @global_var_1be64.413 to i8*), align 4
  %v0_fdec = load i32, i32* @r6, align 4
  %v1_fdec = trunc i32 %v0_fdec to i8
  store i8 %v1_fdec, i8* bitcast (i32* @global_var_1be65.414 to i8*), align 4
  %v1_fdf0 = call i32 @function_11370(i32 %v0_fde0)
  %v0_fdf4 = load i32, i32* @r5, align 4
  store i32 %v1_fdf0, i32* @r7, align 4
  %v3_fe00 = call i32 @function_ff80(i32 %v1_fdf0, i32 ptrtoint (i32* @global_var_136cc.416 to i32), i32 %v0_fdf4)
  %v0_fe08 = load i32, i32* @r5, align 4
  %v1_fe08 = trunc i32 %v0_fe08 to i8
  store i8 %v1_fe08, i8* bitcast (i32* @global_var_1be6c.417 to i8*), align 4
  %v0_fe0c = load i32, i32* @r7, align 4
  store i32 %v0_fe0c, i32* @global_var_1be68.418, align 4
  %v0_fe10 = load i32, i32* @r6, align 4
  %v1_fe10 = trunc i32 %v0_fe10 to i8
  store i8 %v1_fe10, i8* bitcast (i32* @global_var_1be6d.419 to i8*), align 4
  %v1_fe14 = call i32 @function_11370(i32 117)
  %v3_fe24 = call i32 @function_ff80(i32 %v1_fe14, i32 ptrtoint (i32* @global_var_1373c.420 to i32), i32 117)
  %v0_fe2c = load i32, i32* @r6, align 4
  %v1_fe2c = trunc i32 %v0_fe2c to i8
  store i8 %v1_fe2c, i8* bitcast (i32* @global_var_1be75.421 to i8*), align 4
  store i32 %v1_fe14, i32* @global_var_1be70.422, align 4
  store i8 117, i8* bitcast (i32* @global_var_1be74.423 to i8*), align 4
  ret i32 %v3_fe24

; uselistorder directives
  uselistorder i32 %v1_fdf0, { 1, 0 }
  uselistorder i32 %v1_fdc8, { 1, 0 }
  uselistorder i32 %v1_fda4, { 1, 0 }
  uselistorder i32 %v1_fd7c, { 1, 0 }
  uselistorder i32 %v1_fd08, { 1, 0 }
  uselistorder i32 %v1_fc94, { 1, 0 }
  uselistorder i32 %v1_fc70, { 1, 0 }
  uselistorder i32 %v1_fc4c, { 1, 0 }
  uselistorder i32 %v1_fc28, { 1, 0 }
  uselistorder i32 %v1_fc04, { 1, 0 }
  uselistorder i32 %v1_fbe0, { 1, 0 }
  uselistorder i32 %v1_fb18, { 1, 0 }
  uselistorder i32 %v1_f9b4, { 1, 0 }
  uselistorder i32 %v1_f990, { 1, 0 }
  uselistorder i32 %v1_f8cc, { 1, 0 }
  uselistorder i32 %v0_f8b0, { 1, 0, 2 }
  uselistorder i32 %v1_f8a8, { 1, 0 }
  uselistorder i32 %v1_f834, { 1, 0 }
  uselistorder i32 %v1_f794, { 1, 0 }
  uselistorder i32 %v1_f744, { 1, 0 }
  uselistorder i32 %v1_f720, { 1, 0 }
  uselistorder i32 %v1_f6fc, { 0, 2, 1 }
  uselistorder i32 %v1_f6d4, { 0, 2, 1 }
  uselistorder i32 %v1_f6a0, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 4, 5, 6, 0, 7, 8, 1, 2, 3 }
  uselistorder i8 4, { 3, 2, 0, 1 }
  uselistorder i8 11, { 2, 3, 4, 0, 1 }
  uselistorder i8 5, { 10, 0, 9, 1, 2, 3, 4, 5, 6, 7, 11, 8 }
  uselistorder i32 (i32, i32, i32)* @function_ff80, { 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1bcd8.170 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_ff04(i8* %arg1) local_unnamed_addr {
dec_label_pc_ff04:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_ff08 = load i8, i8* %arg1, align 1
  %v4_ff08 = zext i8 %v3_ff08 to i32
  %v2_ff0c = icmp eq i8 %v3_ff08, 0
  br i1 %v2_ff0c, label %dec_label_pc_ff28, label %bb

dec_label_pc_ff28:                                ; preds = %dec_label_pc_ff18, %dec_label_pc_ff04
  %merge = phi i32 [ %v4_ff08, %dec_label_pc_ff04 ], [ %v1_ff18, %dec_label_pc_ff18 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_ff04
  br label %dec_label_pc_ff18

dec_label_pc_ff18:                                ; preds = %dec_label_pc_ff18, %bb
  %v0_ff18 = phi i32 [ %v1_ff18, %dec_label_pc_ff18 ], [ 0, %bb ]
  %v1_ff18 = add i32 %v0_ff18, 1
  %v2_ff1c = add i32 %v1_ff18, %tmp
  %v3_ff1c = inttoptr i32 %v2_ff1c to i8*
  %v4_ff1c = load i8, i8* %v3_ff1c, align 1
  %v2_ff20 = icmp eq i8 %v4_ff1c, 0
  br i1 %v2_ff20, label %dec_label_pc_ff28, label %dec_label_pc_ff18

; uselistorder directives
  uselistorder i32 %v1_ff18, { 1, 0, 2 }
}

define i32 @function_ff2c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ff2c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_ff2c = load i8, i8* %arg1, align 1
  %v3_ff2c = zext i8 %v2_ff2c to i32
  %v2_ff30 = icmp eq i8 %v2_ff2c, 0
  br i1 %v2_ff30, label %dec_label_pc_ff74, label %dec_label_pc_ff38

dec_label_pc_ff38:                                ; preds = %dec_label_pc_ff2c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff3c

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_ff38
  %v0_ff3c = phi i32 [ %v1_ff3c, %dec_label_pc_ff3c ], [ 0, %dec_label_pc_ff38 ]
  %v1_ff3c = add i32 %v0_ff3c, 1
  store i32 %v1_ff3c, i32* %ip.global-to-local, align 4
  %v2_ff40 = add i32 %v1_ff3c, %tmp
  %v3_ff40 = inttoptr i32 %v2_ff40 to i8*
  %v4_ff40 = load i8, i8* %v3_ff40, align 1
  %v2_ff44 = icmp eq i8 %v4_ff40, 0
  br i1 %v2_ff44, label %dec_label_pc_ff4c, label %dec_label_pc_ff3c

dec_label_pc_ff4c:                                ; preds = %dec_label_pc_ff3c
  %v7_ff4c = icmp eq i32 %v0_ff3c, -2
  br i1 %v7_ff4c, label %dec_label_pc_ff6c, label %dec_label_pc_ff58.preheader

dec_label_pc_ff58.preheader:                      ; preds = %dec_label_pc_ff4c, %dec_label_pc_ff74
  %storemerge = phi i32 [ %v3_ff2c, %dec_label_pc_ff74 ], [ %v1_ff3c, %dec_label_pc_ff4c ]
  %v2_ff64.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_ff58.dec_label_pc_ff58_crit_edge, %dec_label_pc_ff58.preheader
  %v2_ff64 = phi i32 [ %v5_ff64, %dec_label_pc_ff58.dec_label_pc_ff58_crit_edge ], [ %v2_ff64.pre, %dec_label_pc_ff58.preheader ]
  %v0_ff5c = phi i32 [ %v0_ff5c.pre, %dec_label_pc_ff58.dec_label_pc_ff58_crit_edge ], [ %tmp, %dec_label_pc_ff58.preheader ]
  %v0_ff58 = phi i32 [ %v0_ff58.pre, %dec_label_pc_ff58.dec_label_pc_ff58_crit_edge ], [ %storemerge, %dec_label_pc_ff58.preheader ]
  %v1_ff58 = add i32 %v0_ff58, -1
  store i32 %v1_ff58, i32* @r2, align 4
  %v1_ff5c = inttoptr i32 %v0_ff5c to i8*
  %v2_ff5c = load i8, i8* %v1_ff5c, align 1
  %v5_ff5c = add i32 %v0_ff5c, 1
  store i32 %v5_ff5c, i32* %r1.global-to-local, align 4
  %v3_ff60 = icmp eq i32 %v0_ff58, 0
  %v3_ff64 = inttoptr i32 %v2_ff64 to i8*
  store i8 %v2_ff5c, i8* %v3_ff64, align 1
  %v4_ff64 = load i32, i32* @r0, align 4
  %v5_ff64 = add i32 %v4_ff64, 1
  store i32 %v5_ff64, i32* @r0, align 4
  br i1 %v3_ff60, label %dec_label_pc_ff6c.loopexit, label %dec_label_pc_ff58.dec_label_pc_ff58_crit_edge

dec_label_pc_ff58.dec_label_pc_ff58_crit_edge:    ; preds = %dec_label_pc_ff58
  %v0_ff58.pre = load i32, i32* @r2, align 4
  %v0_ff5c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ff58

dec_label_pc_ff6c.loopexit:                       ; preds = %dec_label_pc_ff58
  %v0_ff6c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff6c

dec_label_pc_ff6c:                                ; preds = %dec_label_pc_ff6c.loopexit, %dec_label_pc_ff4c
  %v0_ff6c = phi i32 [ %v0_ff6c.pre, %dec_label_pc_ff6c.loopexit ], [ %v1_ff3c, %dec_label_pc_ff4c ]
  ret i32 %v0_ff6c

dec_label_pc_ff74:                                ; preds = %dec_label_pc_ff2c
  store i32 %v3_ff2c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff58.preheader

; uselistorder directives
  uselistorder i32 %v5_ff64, { 1, 0 }
  uselistorder i32 %v0_ff5c, { 1, 0 }
  uselistorder i32 %v1_ff3c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_ff2c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff58.preheader, { 1, 0 }
}

define i32 @function_ff80(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ff80:
  %ip.global-to-local = alloca i32, align 4
  %v2_ff80 = icmp eq i32 %arg3, 0
  br i1 %v2_ff80, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_ff8c, %dec_label_pc_ff80
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_ff80
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff8c, %bb
  %v0_ff8c = phi i32 [ %v1_ff94, %dec_label_pc_ff8c ], [ 0, %bb ]
  %v2_ff8c = add i32 %v0_ff8c, %arg2
  %v3_ff8c = inttoptr i32 %v2_ff8c to i8*
  %v4_ff8c = load i8, i8* %v3_ff8c, align 1
  %v4_ff90 = add i32 %v0_ff8c, %arg1
  %v5_ff90 = inttoptr i32 %v4_ff90 to i8*
  store i8 %v4_ff8c, i8* %v5_ff90, align 1
  %v0_ff94 = load i32, i32* %ip.global-to-local, align 4
  %v1_ff94 = add i32 %v0_ff94, 1
  store i32 %v1_ff94, i32* %ip.global-to-local, align 4
  %v9_ff98 = icmp eq i32 %v1_ff94, %arg3
  br i1 %v9_ff98, label %.loopexit, label %dec_label_pc_ff8c

; uselistorder directives
  uselistorder i32 %v1_ff94, { 1, 2, 0 }
}

define i32 @function_ffa4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ffa4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_ffa4 = icmp eq i32 %arg2, 0
  br i1 %v2_ffa4, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_ffb4, %dec_label_pc_ffa4
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_ffa4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ffb4

dec_label_pc_ffb4:                                ; preds = %dec_label_pc_ffb4.dec_label_pc_ffb4_crit_edge, %bb
  %v2_ffb4 = phi i32 [ %v1_ffb8, %dec_label_pc_ffb4.dec_label_pc_ffb4_crit_edge ], [ 0, %bb ]
  %v0_ffb4.off0 = phi i8 [ %extract.t, %dec_label_pc_ffb4.dec_label_pc_ffb4_crit_edge ], [ 0, %bb ]
  %v4_ffb4 = add i32 %v2_ffb4, %arg1
  %v5_ffb4 = inttoptr i32 %v4_ffb4 to i8*
  store i8 %v0_ffb4.off0, i8* %v5_ffb4, align 1
  %v0_ffb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ffb8 = add i32 %v0_ffb8, 1
  store i32 %v1_ffb8, i32* %r3.global-to-local, align 4
  %v9_ffbc = icmp eq i32 %v1_ffb8, %arg2
  br i1 %v9_ffbc, label %.loopexit, label %dec_label_pc_ffb4.dec_label_pc_ffb4_crit_edge

dec_label_pc_ffb4.dec_label_pc_ffb4_crit_edge:    ; preds = %dec_label_pc_ffb4
  %v0_ffb4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_ffb4.pre to i8
  br label %dec_label_pc_ffb4

; uselistorder directives
  uselistorder i32 %v1_ffb8, { 1, 2, 0 }
}

define i32 @function_ffc8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ffc8:
  store i32 %arg4, i32* @lr, align 4
  %v7_ffdc = icmp sgt i32 %arg4, %arg2
  br i1 %v7_ffdc, label %dec_label_pc_ffe0, label %dec_label_pc_ffe8

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_fffc, %dec_label_pc_ffc8, %dec_label_pc_ffe8
  ret i32 -1

dec_label_pc_ffe8:                                ; preds = %dec_label_pc_ffc8
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_ffe0, label %dec_label_pc_fff0

dec_label_pc_fff0:                                ; preds = %dec_label_pc_ffe8
  br label %dec_label_pc_10008

dec_label_pc_fffc:                                ; preds = %dec_label_pc_10020, %dec_label_pc_10008
  %v1_fffc = add i32 %v0_10028, 1
  %v9_10000 = icmp eq i32 %v1_fffc, %arg2
  br i1 %v9_10000, label %dec_label_pc_ffe0, label %dec_label_pc_10008

dec_label_pc_10008:                               ; preds = %dec_label_pc_fffc, %dec_label_pc_fff0
  %v0_10028 = phi i32 [ %v1_fffc, %dec_label_pc_fffc ], [ 0, %dec_label_pc_fff0 ]
  %v0_10014 = phi i32 [ %v1_10014., %dec_label_pc_fffc ], [ 0, %dec_label_pc_fff0 ]
  %v2_10008 = add i32 %v0_10014, %arg3
  %v3_10008 = inttoptr i32 %v2_10008 to i8*
  %v4_10008 = load i8, i8* %v3_10008, align 1
  %v2_1000c = add i32 %v0_10028, %arg1
  %v3_1000c = inttoptr i32 %v2_1000c to i8*
  %v4_1000c = load i8, i8* %v3_1000c, align 1
  %v9_10010 = icmp eq i8 %v4_1000c, %v4_10008
  %v1_10014 = add i32 %v0_10014, 1
  %v1_10014. = select i1 %v9_10010, i32 %v1_10014, i32 0
  br i1 %v9_10010, label %dec_label_pc_10020, label %dec_label_pc_fffc

dec_label_pc_10020:                               ; preds = %dec_label_pc_10008
  %v9_10020 = icmp eq i32 %v1_10014., %arg4
  br i1 %v9_10020, label %dec_label_pc_10028, label %dec_label_pc_fffc

dec_label_pc_10028:                               ; preds = %dec_label_pc_10020
  %v1_10028 = add i32 %v0_10028, 1
  ret i32 %v1_10028

; uselistorder directives
  uselistorder i1 %v9_10010, { 1, 0 }
  uselistorder i32 %v0_10014, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_ffe0, { 0, 2, 1 }
}

define i32 @function_10030(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10030:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10030 = load i32, i32* @r4, align 4
  store i32 %v3_10030, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1003c

dec_label_pc_1003c:                               ; preds = %.thread, %dec_label_pc_10054, %bb, %dec_label_pc_10030
  %v0_1003c = phi i32 [ %tmp, %dec_label_pc_10030 ], [ %v5_1003c, %bb ], [ %v5_1003c, %dec_label_pc_10054 ], [ %v5_1003c, %.thread ]
  %v1_1003c = inttoptr i32 %v0_1003c to i8*
  %v2_1003c = load i8, i8* %v1_1003c, align 1
  %v3_1003c = zext i8 %v2_1003c to i32
  %v5_1003c = add i32 %v0_1003c, 1
  store i32 %v5_1003c, i32* %r5.global-to-local, align 4
  %v7_10044 = icmp eq i8 %v2_1003c, 9
  br i1 %v7_10044, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1003c
  store i32 %v3_1003c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1003c

bb:                                               ; preds = %dec_label_pc_1003c
  %v8_10048 = icmp eq i8 %v2_1003c, 32
  store i32 %v3_1003c, i32* %r4.global-to-local, align 4
  br i1 %v8_10048, label %dec_label_pc_1003c, label %dec_label_pc_10054

dec_label_pc_10054:                               ; preds = %bb
  %v7_10054 = icmp eq i8 %v2_1003c, 10
  br i1 %v7_10054, label %dec_label_pc_1003c, label %dec_label_pc_1005c

dec_label_pc_1005c:                               ; preds = %dec_label_pc_10054
  %v7_1005c = icmp eq i8 %v2_1003c, 45
  br i1 %v7_1005c, label %dec_label_pc_1013c, label %dec_label_pc_10064

dec_label_pc_10064:                               ; preds = %dec_label_pc_1005c
  %v7_10064 = icmp eq i8 %v2_1003c, 43
  br i1 %v7_10064, label %bb48, label %dec_label_pc_10074

bb48:                                             ; preds = %dec_label_pc_10064
  %v2_10068 = inttoptr i32 %v5_1003c to i8*
  %v3_10068 = load i8, i8* %v2_10068, align 1
  %v4_10068 = zext i8 %v3_10068 to i32
  store i32 %v4_10068, i32* %r4.global-to-local, align 4
  %v6_10068 = add i32 %v0_1003c, 2
  store i32 %v6_10068, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %bb48, %dec_label_pc_10064, %dec_label_pc_1013c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_1013c ], [ 2147483647, %dec_label_pc_10064 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_1013c ], [ 0, %dec_label_pc_10064 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_1007c = call i32 @function_10620(i32 %storemerge1, i32 %arg2)
  %v0_10080 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10080, i32* @r1, align 4
  store i32 %v2_1007c, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_1008c = call i32 @function_10510()
  store i32 %v0_1008c, i32* @lr, align 4
  %v0_1009c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %.thread8, %dec_label_pc_10074
  %v2_1011811 = phi i32 [ %v1_1013426, %.thread8 ], [ 0, %dec_label_pc_10074 ]
  %v1_100f4 = phi i32 [ %v0_1012824, %.thread8 ], [ 0, %dec_label_pc_10074 ]
  %v1_100dc = phi i32 [ %v3_10120, %.thread8 ], [ %v0_1009c.pre, %dec_label_pc_10074 ]
  %v1_1009c = urem i32 %v1_100dc, 256
  %v1_100a0 = add nsw i32 %v1_1009c, -48
  %v1_100a8 = add nsw i32 %v1_1009c, -97
  %v1_100ac = add i32 %v1_100dc, -48
  %v1_100b0 = add nsw i32 %v1_1009c, -65
  %tmp71 = icmp ult i32 %v1_100a0, 10
  br i1 %tmp71, label %dec_label_pc_100e0, label %dec_label_pc_100b8

dec_label_pc_100b8:                               ; preds = %dec_label_pc_1009c
  %v2_100b8 = icmp ugt i32 %v1_100b0, 24
  %v7_100b8 = icmp eq i32 %v1_100b0, 25
  %v2_100bc = xor i1 %v7_100b8, true
  %v3_100bc = and i1 %v2_100b8, %v2_100bc
  br i1 %v3_100bc, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_100b8
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_100b8, %bb49
  %v0_100d020 = phi i32 [ %v1_100ac, %dec_label_pc_100b8 ], [ 0, %bb49 ]
  %v2_100c0 = xor i1 %v2_100b8, true
  %v3_100c0 = or i1 %v7_100b8, %v2_100c0
  br i1 %v3_100c0, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_100d0 = phi i32 [ %v0_100d020, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_100bc, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_100c8 = icmp ugt i32 %v1_100a8, 24
  %v11_100c8 = icmp eq i32 %v1_100a8, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_100cc = phi i1 [ %v7_100b8, %bb52 ], [ %v11_100c8, %bb53 ]
  %v0_100cc = phi i1 [ %v2_100b8, %bb52 ], [ %v6_100c8, %bb53 ]
  %v2_100cc = xor i1 %v1_100cc, true
  %v3_100cc = and i1 %v0_100cc, %v2_100cc
  br i1 %v3_100cc, label %dec_label_pc_10128, label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %bb54
  %v2_100d0 = icmp eq i32 %v0_100d0, 0
  %. = select i1 %v2_100d0, i32 87, i32 55
  %v2_100dc = sub i32 %v1_100dc, %.
  br label %dec_label_pc_100e0

dec_label_pc_100e0:                               ; preds = %dec_label_pc_1009c, %dec_label_pc_100d0
  %v0_100f434 = phi i32 [ %v1_100b0, %dec_label_pc_1009c ], [ %., %dec_label_pc_100d0 ]
  %v3_1011812 = phi i32 [ %v1_100ac, %dec_label_pc_1009c ], [ %v2_100dc, %dec_label_pc_100d0 ]
  %v1_100e0 = load i32, i32* %r6.global-to-local, align 4
  %v6_100e4 = icmp slt i32 %v3_1011812, %v1_100e0
  br i1 %v6_100e4, label %dec_label_pc_100e8, label %dec_label_pc_10128

dec_label_pc_100e8:                               ; preds = %dec_label_pc_100e0
  %v3_100e8 = icmp uge i32 %v2_1011811, %v0_1008c
  %v9_100e8 = icmp eq i32 %v2_1011811, %v0_1008c
  %v2_100ec = xor i1 %v3_100e8, true
  %v3_100ec = or i1 %v9_100e8, %v2_100ec
  br i1 %v3_100ec, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_100e8
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_100e8, %bb57
  %v0_100f433 = phi i32 [ %v0_100f434, %dec_label_pc_100e8 ], [ 0, %bb57 ]
  %v2_100f0 = xor i1 %v9_100e8, true
  %v3_100f0 = and i1 %v3_100e8, %v2_100f0
  br i1 %v3_100f0, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_100f4 = phi i32 [ %v0_100f433, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_100f4, 0
  %v4_100f4 = zext i1 %tmp72 to i32
  %v5_100f4 = or i32 %v0_100f4, %v4_100f4
  %v7_100f4 = icmp eq i32 %v5_100f4, 0
  br i1 %v7_100f4, label %dec_label_pc_10100, label %.thread8

dec_label_pc_10100:                               ; preds = %bb60
  %v1_1010c = load i32, i32* %r8.global-to-local, align 4
  %v7_10110 = icmp sgt i32 %v3_1011812, %v1_1010c
  br i1 %v7_10110, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_10100
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_10100
  %v2_10114 = icmp eq i1 %v9_100e8, false
  br i1 %v2_10114, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1011813 = mul i32 %v1_100e0, %v2_1011811
  %v5_1011814 = add i32 %v4_1011813, %v3_1011812
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1013426 = phi i32 [ %v2_1011811, %bb63 ], [ %v2_1011811, %bb60 ], [ %v5_1011814, %bb64 ]
  %v0_1012824 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10120 = load i32, i32* %r5.global-to-local, align 4
  %v1_10120 = inttoptr i32 %v0_10120 to i8*
  %v2_10120 = load i8, i8* %v1_10120, align 1
  %v3_10120 = zext i8 %v2_10120 to i32
  store i32 %v3_10120, i32* %r4.global-to-local, align 4
  %v5_10120 = add i32 %v0_10120, 1
  store i32 %v5_10120, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1009c

dec_label_pc_10128:                               ; preds = %dec_label_pc_100e0, %bb54
  %v1_10128 = icmp slt i32 %v1_100f4, 0
  %v0_1014c = load i32, i32* %sl.global-to-local, align 4
  %v2_1014c = icmp eq i32 %v0_1014c, 0
  br i1 %v1_10128, label %dec_label_pc_1014c, label %dec_label_pc_10130

dec_label_pc_10130:                               ; preds = %dec_label_pc_10128
  br i1 %v2_1014c, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10130
  %v2_10134 = sub i32 0, %v2_1011811
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10130, %bb65
  %v23_10138 = phi i32 [ %v2_1011811, %dec_label_pc_10130 ], [ %v2_10134, %bb65 ]
  %v2_10138 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10138, i32* @r4, align 4
  ret i32 %v23_10138

dec_label_pc_1013c:                               ; preds = %dec_label_pc_1005c
  %v1_1013c = inttoptr i32 %v5_1003c to i8*
  %v2_1013c = load i8, i8* %v1_1013c, align 1
  %v3_1013c = zext i8 %v2_1013c to i32
  store i32 %v3_1013c, i32* %r4.global-to-local, align 4
  %v5_1013c = add i32 %v0_1003c, 2
  store i32 %v5_1013c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10074

dec_label_pc_1014c:                               ; preds = %dec_label_pc_10128
  %.70 = select i1 %v2_1014c, i32 2147483647, i32 -2147483648
  %v2_10158 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10158, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10120, { 1, 0 }
  uselistorder i1 %v9_100e8, { 1, 0, 2 }
  uselistorder i1 %v3_100e8, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_100b8, { 1, 2, 0 }
  uselistorder i1 %v2_100b8, { 1, 0, 2 }
  uselistorder i32 %v1_1009c, { 1, 2, 0 }
  uselistorder i32 %v1_100dc, { 1, 2, 0 }
  uselistorder i32 %v1_100f4, { 1, 0 }
  uselistorder i32 %v2_1011811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_1008c, { 1, 0, 2 }
  uselistorder i32 %v5_1003c, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_1003c, { 1, 0 }
  uselistorder i32 %v0_1003c, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 0, 1, 2, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_100e0, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_10074, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1003c, { 1, 2, 0, 3 }
}

define i32 @function_1015c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1015c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1015c = load i32, i32* @r4, align 4
  store i32 %v3_1015c, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10174

dec_label_pc_10174:                               ; preds = %dec_label_pc_101a0.dec_label_pc_10174_crit_edge, %dec_label_pc_1015c
  %v0_10178 = phi i32 [ %v0_10178.pre, %dec_label_pc_101a0.dec_label_pc_10174_crit_edge ], [ %arg3, %dec_label_pc_1015c ]
  %v0_10174 = phi i32 [ %v1_1018c, %dec_label_pc_101a0.dec_label_pc_10174_crit_edge ], [ %tmp, %dec_label_pc_1015c ]
  %tmp12 = inttoptr i32 %v0_10174 to i32*
  %v5_10180 = call i32 @function_10a8c(i32 %v0_10178, i32* %tmp12, i32 1)
  %v7_10184 = icmp eq i32 %v5_10180, 1
  %v0_10188 = load i32, i32* @r4, align 4
  %v1_1018c = add i32 %v0_10188, 1
  store i32 %v1_1018c, i32* @r4, align 4
  %v0_10194 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_10184, label %dec_label_pc_10194, label %dec_label_pc_101ac

dec_label_pc_10194:                               ; preds = %dec_label_pc_10174
  %v1_10194 = add i32 %v0_10194, 1
  store i32 %v1_10194, i32* %r5.global-to-local, align 4
  %v0_10198 = load i32, i32* %r7.global-to-local, align 4
  %v7_1019c = icmp sgt i32 %v0_10198, %v1_10194
  br i1 %v7_1019c, label %dec_label_pc_101a0, label %dec_label_pc_101ac

dec_label_pc_101a0:                               ; preds = %dec_label_pc_10194
  %v1_101a0 = inttoptr i32 %v0_10188 to i8*
  %v2_101a0 = load i8, i8* %v1_101a0, align 1
  %v7_101a4 = icmp eq i8 %v2_101a0, 10
  br i1 %v7_101a4, label %dec_label_pc_101ac, label %dec_label_pc_101a0.dec_label_pc_10174_crit_edge

dec_label_pc_101a0.dec_label_pc_10174_crit_edge:  ; preds = %dec_label_pc_101a0
  %v0_10178.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10174

dec_label_pc_101ac:                               ; preds = %dec_label_pc_10174, %dec_label_pc_101a0, %dec_label_pc_10194
  %v0_101ac = phi i32 [ %v1_10194, %dec_label_pc_101a0 ], [ %v1_10194, %dec_label_pc_10194 ], [ %v0_10194, %dec_label_pc_10174 ]
  %v2_101ac = icmp eq i32 %v0_101ac, 0
  %v1_101b0 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_101ac, i32 0, i32 %v1_101b0
  %v2_101b8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_101b8, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1018c, { 1, 0 }
  uselistorder i8 10, { 7, 1, 0, 8, 9, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_10a8c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_101ac, { 1, 2, 0 }
}

define i32 @function_101bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_101bc:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_101bc = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_101cc = call i32 @function_10e98()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_101d4 = inttoptr i32 %v0_101cc to i32*
  store i32 0, i32* %v2_101d4, align 4
  %v0_101e0 = load i32, i32* %r6.global-to-local, align 4
  %v3_101e4 = call i32 @function_111c0(i32 2, i32 2, i32 %v0_101e0)
  %v7_101f0 = icmp eq i32 %v3_101e4, -1
  store i32 %v3_101e4, i32* %r5.global-to-local, align 4
  %v2_101fc = load i32, i32* @r4, align 4
  br i1 %v7_101f0, label %dec_label_pc_1024c, label %dec_label_pc_10210

dec_label_pc_10210:                               ; preds = %dec_label_pc_101bc
  %v7_101fc = shl i32 2056, %v2_101fc
  %v8_101fc = or i32 %v7_101fc, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_1022c = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_1022c = call i32 @function_1101c(i32 %v3_101e4, %sockaddr* %v3_1022c, i32 %v2_101fc)
  %v2_10234 = ptrtoint i32* %stack_var_-24 to i32
  %v0_10238 = load i32, i32* %r5.global-to-local, align 4
  %v4_1023c = call i32 @function_11048(i32 %v0_10238, %sockaddr* %v3_1022c, i32 %v2_10234)
  %v1_10244 = call i32 @function_108c4(i32 %v0_10238)
  br label %dec_label_pc_1024c

dec_label_pc_1024c:                               ; preds = %dec_label_pc_101bc, %dec_label_pc_10210
  %v0_1024c = phi i32 [ %v0_101e0, %dec_label_pc_101bc ], [ %v8_101fc, %dec_label_pc_10210 ]
  store i32 %v3_101bc, i32* @r4, align 4
  ret i32 %v0_1024c

; uselistorder directives
  uselistorder i32 %v3_101e4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_1101c, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_111c0, { 13, 11, 12, 10, 1, 9, 8, 7, 2, 6, 5, 4, 3, 0 }
  uselistorder label %dec_label_pc_1024c, { 1, 0 }
}

define i32 @function_10258(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10258:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_1025c = load i8, i8* %tmp, align 1
  %v2_10260 = icmp eq i8 %v3_1025c, 0
  br i1 %v2_10260, label %bb, label %dec_label_pc_10274

bb:                                               ; preds = %dec_label_pc_10258
  %v4_1025c = zext i8 %v3_1025c to i32
  br label %dec_label_pc_10288

dec_label_pc_10274:                               ; preds = %dec_label_pc_10258
  br label %dec_label_pc_10278

dec_label_pc_10278:                               ; preds = %dec_label_pc_10278, %dec_label_pc_10274
  %v0_10278 = phi i32 [ %v1_10278, %dec_label_pc_10278 ], [ 0, %dec_label_pc_10274 ]
  %v1_10278 = add i32 %v0_10278, 1
  %v2_1027c = add i32 %v1_10278, %arg2
  %v3_1027c = inttoptr i32 %v2_1027c to i8*
  %v4_1027c = load i8, i8* %v3_1027c, align 1
  %v2_10280 = icmp eq i8 %v4_1027c, 0
  br i1 %v2_10280, label %dec_label_pc_10288, label %dec_label_pc_10278

dec_label_pc_10288:                               ; preds = %dec_label_pc_10278, %bb
  %v0_102cc18 = phi i32 [ %v4_1025c, %bb ], [ %v1_10278, %dec_label_pc_10278 ]
  %v0_102901 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_102901, 1
  br i1 %tmp27, label %dec_label_pc_102dc, label %dec_label_pc_1029c

dec_label_pc_1029c:                               ; preds = %dec_label_pc_10288, %dec_label_pc_10290.backedge
  %v0_10294.in = phi i32 [ %v0_10294, %dec_label_pc_10290.backedge ], [ %v0_102901, %dec_label_pc_10288 ]
  %v0_102c0 = phi i32 [ %v1_102c0., %dec_label_pc_10290.backedge ], [ 0, %dec_label_pc_10288 ]
  %v0_1029c = phi i32 [ %v5_1029c, %dec_label_pc_10290.backedge ], [ %tmp20, %dec_label_pc_10288 ]
  %v0_10294 = add i32 %v0_10294.in, -1
  %v1_1029c = inttoptr i32 %v0_1029c to i8*
  %v2_1029c = load i8, i8* %v1_1029c, align 1
  %v3_1029c = zext i8 %v2_1029c to i32
  store i32 %v3_1029c, i32* @lr, align 4
  %v5_1029c = add i32 %v0_1029c, 1
  %v2_102a0 = add i32 %v0_102c0, %arg2
  %v3_102a0 = inttoptr i32 %v2_102a0 to i8*
  %v4_102a0 = load i8, i8* %v3_102a0, align 1
  %v6_102a0 = zext i8 %v4_102a0 to i32
  %v1_102a4 = add nsw i32 %v3_1029c, -65
  %v1_102a8 = add nsw i32 %v6_102a0, -65
  %tmp35 = icmp ult i32 %v1_102a4, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_1029c
  %v5_102b0 = or i32 %v3_1029c, 96
  store i32 %v5_102b0, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_1029c, %bb28
  %v0_102bc = phi i32 [ %v3_1029c, %dec_label_pc_1029c ], [ %v5_102b0, %bb28 ]
  %tmp36 = icmp ult i32 %v1_102a8, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_102b8 = or i32 %v6_102a0, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_102bc = phi i32 [ %v6_102a0, %bb29 ], [ %v5_102b8, %bb30 ]
  %v9_102bc = icmp eq i32 %v0_102bc, %v1_102bc
  %v1_102c0 = add i32 %v0_102c0, 1
  %v1_102c0. = select i1 %v9_102bc, i32 %v1_102c0, i32 0
  br i1 %v9_102bc, label %dec_label_pc_102cc, label %dec_label_pc_10290.backedge

dec_label_pc_10290.backedge:                      ; preds = %bb31, %dec_label_pc_102cc
  %tmp32 = icmp slt i32 %v0_10294, 1
  br i1 %tmp32, label %dec_label_pc_102dc, label %dec_label_pc_1029c

dec_label_pc_102cc:                               ; preds = %bb31
  %v9_102cc = icmp eq i32 %v0_102cc18, %v1_102c0.
  br i1 %v9_102cc, label %dec_label_pc_102d4, label %dec_label_pc_10290.backedge

dec_label_pc_102d4:                               ; preds = %dec_label_pc_102cc
  %v2_102d4 = sub i32 %v5_1029c, %tmp20
  ret i32 %v2_102d4

dec_label_pc_102dc:                               ; preds = %dec_label_pc_10290.backedge, %dec_label_pc_10288
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_102c0., { 1, 0 }
  uselistorder i32 %v0_1029c, { 1, 0 }
  uselistorder i32 %v0_102c0, { 1, 0 }
  uselistorder i8 %v3_1025c, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_10290.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_1029c, { 1, 0 }
}

define i32 @function_102e4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_102e4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_102e4 = load i8, i8* %arg1, align 1
  %v2_102e8 = icmp eq i8 %v2_102e4, 0
  br i1 %v2_102e8, label %bb, label %dec_label_pc_102f4

bb:                                               ; preds = %dec_label_pc_102e4
  %v3_102e4 = zext i8 %v2_102e4 to i32
  br label %dec_label_pc_10308

dec_label_pc_102f4:                               ; preds = %dec_label_pc_102e4
  br label %dec_label_pc_102f8

dec_label_pc_102f8:                               ; preds = %dec_label_pc_102f8, %dec_label_pc_102f4
  %v0_102f8 = phi i32 [ %v1_102f8, %dec_label_pc_102f8 ], [ 0, %dec_label_pc_102f4 ]
  %v1_102f8 = add i32 %v0_102f8, 1
  %v2_102fc = add i32 %v1_102f8, %tmp
  %v3_102fc = inttoptr i32 %v2_102fc to i8*
  %v4_102fc = load i8, i8* %v3_102fc, align 1
  %v2_10300 = icmp eq i8 %v4_102fc, 0
  br i1 %v2_10300, label %dec_label_pc_10308, label %dec_label_pc_102f8

dec_label_pc_10308:                               ; preds = %dec_label_pc_102f8, %bb
  %v1_1032c = phi i32 [ %v3_102e4, %bb ], [ %v1_102f8, %dec_label_pc_102f8 ]
  %v1_10308 = inttoptr i32 %arg2 to i8*
  %v2_10308 = load i8, i8* %v1_10308, align 1
  %v3_10308 = zext i8 %v2_10308 to i32
  %v2_1030c = icmp eq i8 %v2_10308, 0
  br i1 %v2_1030c, label %bb22, label %dec_label_pc_10318

bb22:                                             ; preds = %dec_label_pc_10308
  store i32 %v3_10308, i32* @r2, align 4
  br label %dec_label_pc_1032c

dec_label_pc_10318:                               ; preds = %dec_label_pc_10308
  br label %dec_label_pc_1031c

dec_label_pc_1031c:                               ; preds = %dec_label_pc_1031c, %dec_label_pc_10318
  %v0_1031c = phi i32 [ %v1_1031c, %dec_label_pc_1031c ], [ 0, %dec_label_pc_10318 ]
  %v1_1031c = add i32 %v0_1031c, 1
  store i32 %v1_1031c, i32* @r2, align 4
  %v2_10320 = add i32 %v1_1031c, %arg2
  %v3_10320 = inttoptr i32 %v2_10320 to i8*
  %v4_10320 = load i8, i8* %v3_10320, align 1
  %v2_10324 = icmp eq i8 %v4_10320, 0
  br i1 %v2_10324, label %dec_label_pc_1032c, label %dec_label_pc_1031c

dec_label_pc_1032c:                               ; preds = %dec_label_pc_1031c, %bb22
  %v0_103584 = phi i32 [ %v3_10308, %bb22 ], [ %v1_1031c, %dec_label_pc_1031c ]
  %v9_1032c = icmp eq i32 %v0_103584, %v1_1032c
  br i1 %v9_1032c, label %dec_label_pc_10358.preheader, label %dec_label_pc_10338

dec_label_pc_10358.preheader:                     ; preds = %dec_label_pc_1032c
  %v2_103586 = icmp eq i32 %v1_1032c, 0
  br i1 %v2_103586, label %dec_label_pc_10360, label %dec_label_pc_10340

dec_label_pc_10338:                               ; preds = %dec_label_pc_10340, %dec_label_pc_1032c
  ret i32 0

dec_label_pc_10340:                               ; preds = %dec_label_pc_10350, %dec_label_pc_10358.preheader
  %v0_10358.in = phi i32 [ %v0_10358, %dec_label_pc_10350 ], [ %v1_1032c, %dec_label_pc_10358.preheader ]
  %v0_10354 = phi i32 [ %v1_10354, %dec_label_pc_10350 ], [ %arg2, %dec_label_pc_10358.preheader ]
  %v0_10350 = phi i32 [ %v1_10350, %dec_label_pc_10350 ], [ %tmp, %dec_label_pc_10358.preheader ]
  %v0_10358 = add i32 %v0_10358.in, -1
  %v1_10340 = inttoptr i32 %v0_10350 to i8*
  %v2_10340 = load i8, i8* %v1_10340, align 1
  %v3_10340 = zext i8 %v2_10340 to i32
  store i32 %v3_10340, i32* @r2, align 4
  %v1_10344 = inttoptr i32 %v0_10354 to i8*
  %v2_10344 = load i8, i8* %v1_10344, align 1
  %v9_10348 = icmp eq i8 %v2_10340, %v2_10344
  br i1 %v9_10348, label %dec_label_pc_10350, label %dec_label_pc_10338

dec_label_pc_10350:                               ; preds = %dec_label_pc_10340
  %v1_10350 = add i32 %v0_10350, 1
  %v1_10354 = add i32 %v0_10354, 1
  %v2_10358 = icmp eq i32 %v0_10358, 0
  br i1 %v2_10358, label %dec_label_pc_10360, label %dec_label_pc_10340

dec_label_pc_10360:                               ; preds = %dec_label_pc_10350, %dec_label_pc_10358.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_1031c, { 0, 1, 3, 2 }
  uselistorder i8 %v2_102e4, { 1, 0 }
}

define i32 @function_10368(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10368:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1036c = load i8, i8* %arg1, align 1
  %v2_10370 = icmp eq i8 %v2_1036c, 0
  %v0_10374 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_10370, label %bb, label %dec_label_pc_10380

bb:                                               ; preds = %dec_label_pc_10368
  %v3_1036c = zext i8 %v2_1036c to i32
  br label %dec_label_pc_10394

dec_label_pc_10380:                               ; preds = %dec_label_pc_10368
  br label %dec_label_pc_10384

dec_label_pc_10384:                               ; preds = %dec_label_pc_10384, %dec_label_pc_10380
  %v0_10384 = phi i32 [ %v1_10384, %dec_label_pc_10384 ], [ 0, %dec_label_pc_10380 ]
  %v1_10384 = add i32 %v0_10384, 1
  %v2_10388 = add i32 %v1_10384, %tmp
  %v3_10388 = inttoptr i32 %v2_10388 to i8*
  %v4_10388 = load i8, i8* %v3_10388, align 1
  %v2_1038c = icmp eq i8 %v4_10388, 0
  br i1 %v2_1038c, label %dec_label_pc_10394, label %dec_label_pc_10384

dec_label_pc_10394:                               ; preds = %dec_label_pc_10384, %bb
  %v9_103bc = phi i32 [ %v3_1036c, %bb ], [ %v1_10384, %dec_label_pc_10384 ]
  %v0_10394 = load i32, i32* %r1.global-to-local, align 4
  %v1_10394 = inttoptr i32 %v0_10394 to i8*
  %v2_10394 = load i8, i8* %v1_10394, align 1
  %v3_10394 = zext i8 %v2_10394 to i32
  %v2_10398 = icmp eq i8 %v2_10394, 0
  br i1 %v2_10398, label %bb26, label %dec_label_pc_103a4

bb26:                                             ; preds = %dec_label_pc_10394
  store i32 %v3_10394, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_103b8

dec_label_pc_103a4:                               ; preds = %dec_label_pc_10394
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_103a8

dec_label_pc_103a8:                               ; preds = %dec_label_pc_103a8, %dec_label_pc_103a4
  %v0_103a8 = phi i32 [ %v1_103a8, %dec_label_pc_103a8 ], [ 0, %dec_label_pc_103a4 ]
  %v1_103a8 = add i32 %v0_103a8, 1
  store i32 %v1_103a8, i32* %r2.global-to-local, align 4
  %v2_103ac = add i32 %v1_103a8, %v0_10394
  %v3_103ac = inttoptr i32 %v2_103ac to i8*
  %v4_103ac = load i8, i8* %v3_103ac, align 1
  %v2_103b0 = icmp eq i8 %v4_103ac, 0
  br i1 %v2_103b0, label %dec_label_pc_103b8, label %dec_label_pc_103a8

dec_label_pc_103b8:                               ; preds = %dec_label_pc_103a8, %bb26
  %v1_103b8 = phi i32 [ %v3_10394, %bb26 ], [ %v1_103a8, %dec_label_pc_103a8 ]
  %v2_103b8 = sub i32 %v0_10374, %v1_103b8
  %v4_103b8 = xor i32 %v1_103b8, %v0_10374
  %v5_103b8 = xor i32 %v2_103b8, %v0_10374
  %v6_103b8 = and i32 %v5_103b8, %v4_103b8
  %v7_103bc = icmp sgt i32 %v0_10374, %v1_103b8
  br i1 %v7_103bc, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_103b8
  %v10_103bc = sub i32 %v0_10374, %v9_103bc
  %v12_103bc = xor i32 %v9_103bc, %v0_10374
  %v13_103bc = xor i32 %v10_103bc, %v0_10374
  %v14_103bc = and i32 %v13_103bc, %v12_103bc
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_103b8, %bb27
  %v2_103c0.in = phi i32 [ %v6_103b8, %dec_label_pc_103b8 ], [ %v14_103bc, %bb27 ]
  %v1_103c0.in = phi i32 [ %v2_103b8, %dec_label_pc_103b8 ], [ %v10_103bc, %bb27 ]
  %v1_103b8.pn = phi i32 [ %v1_103b8, %dec_label_pc_103b8 ], [ %v9_103bc, %bb27 ]
  %v0_103c0 = icmp eq i32 %v0_10374, %v1_103b8.pn
  %v1_103c0 = icmp slt i32 %v1_103c0.in, 0
  %v2_103c0 = icmp slt i32 %v2_103c0.in, 0
  %v3_103c0 = xor i1 %v2_103c0, %v1_103c0
  %v4_103c0 = or i1 %v0_103c0, %v3_103c0
  br i1 %v4_103c0, label %dec_label_pc_103d0.preheader, label %dec_label_pc_103e8

dec_label_pc_103d0.preheader:                     ; preds = %bb28
  %v2_103d05 = icmp eq i32 %v0_10374, 0
  br i1 %v2_103d05, label %dec_label_pc_103f0, label %dec_label_pc_103d8

dec_label_pc_103c8:                               ; preds = %dec_label_pc_103d8
  %v1_103c8 = add i32 %v0_103c8, 1
  %v1_103cc = add i32 %v0_103cc, 1
  store i32 %v1_103cc, i32* %r1.global-to-local, align 4
  %v2_103d0 = icmp eq i32 %v0_103d0, 0
  br i1 %v2_103d0, label %dec_label_pc_103f0, label %dec_label_pc_103d8

dec_label_pc_103d8:                               ; preds = %dec_label_pc_103c8, %dec_label_pc_103d0.preheader
  %v0_103d0.in = phi i32 [ %v0_103d0, %dec_label_pc_103c8 ], [ %v0_10374, %dec_label_pc_103d0.preheader ]
  %v0_103cc = phi i32 [ %v1_103cc, %dec_label_pc_103c8 ], [ %v0_10394, %dec_label_pc_103d0.preheader ]
  %v0_103c8 = phi i32 [ %v1_103c8, %dec_label_pc_103c8 ], [ %tmp, %dec_label_pc_103d0.preheader ]
  %v0_103d0 = add i32 %v0_103d0.in, -1
  %v1_103d8 = inttoptr i32 %v0_103c8 to i8*
  %v2_103d8 = load i8, i8* %v1_103d8, align 1
  %v3_103d8 = zext i8 %v2_103d8 to i32
  store i32 %v3_103d8, i32* %r2.global-to-local, align 4
  %v1_103dc = inttoptr i32 %v0_103cc to i8*
  %v2_103dc = load i8, i8* %v1_103dc, align 1
  %v9_103e0 = icmp eq i8 %v2_103d8, %v2_103dc
  br i1 %v9_103e0, label %dec_label_pc_103c8, label %dec_label_pc_103e8

dec_label_pc_103e8:                               ; preds = %dec_label_pc_103d8, %bb28
  ret i32 0

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103c8, %dec_label_pc_103d0.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_103c8, { 1, 0 }
  uselistorder i32 %v0_103cc, { 1, 0 }
  uselistorder i32 %v1_103b8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_103a8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10374, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_1036c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_103f8(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_103f8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_103f8 = load i32, i32* @r4, align 4
  store i32 %v3_103f8, i32* %stack_var_-28, align 4
  %v22_103f8 = ptrtoint i32* %stack_var_-28 to i32
  %v0_103fc = load i32, i32* @r2, align 4
  store i32 %v0_103fc, i32* %r8.global-to-local, align 4
  %v2_103fc = icmp eq i32 %v0_103fc, 0
  store i1 %v2_103fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_103fc, label %dec_label_pc_104ec, label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_103f8
  %v3_1040c = icmp eq i8 %arg1, 0
  store i1 %v3_1040c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1040c, label %.thread, label %dec_label_pc_10420

.thread:                                          ; preds = %dec_label_pc_1040c
  %v4_10414 = inttoptr i32 %v0_103fc to i8*
  store i8 48, i8* %v4_10414, align 1
  %v0_10418.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10418.pr.pr, label %.thread1, label %dec_label_pc_10420

.thread1:                                         ; preds = %.thread
  %v4_10418 = load i32, i32* %r8.global-to-local, align 4
  %v5_10418 = add i32 %v4_10418, 1
  %v6_10418 = inttoptr i32 %v5_10418 to i8*
  store i8 0, i8* %v6_10418, align 1
  %v0_1041c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1041c.pr.pr, label %dec_label_pc_104ec, label %dec_label_pc_10420

dec_label_pc_10420:                               ; preds = %dec_label_pc_1040c, %.thread, %.thread1
  %v7_10424 = icmp eq i32 %arg2, 10
  store i1 %v7_10424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10424, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_10420
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_10420
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_10448

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10458

dec_label_pc_10448:                               ; preds = %bb
  %v2_10448 = sub nsw i32 0, %tmp
  store i32 %v2_10448, i32* %r4.global-to-local, align 4
  store i1 %v3_1040c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1040c, label %dec_label_pc_104f8, label %dec_label_pc_10458

dec_label_pc_10458:                               ; preds = %dec_label_pc_10448, %.thread4
  %v0_1046010 = phi i32 [ %tmp, %.thread4 ], [ %v2_10448, %dec_label_pc_10448 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_10448 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_1045c = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_1045c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10460

dec_label_pc_10460:                               ; preds = %bb37, %dec_label_pc_10458
  %v0_10460 = phi i32 [ %v0_10484, %bb37 ], [ %v0_1046010, %dec_label_pc_10458 ]
  store i32 %v0_10460, i32* %r0.global-to-local, align 4
  %v0_10464 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10464, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10460, 16777216
  %v1_10468 = sdiv i32 %sext, 16777216
  %v3_10468 = call i32 @function_10620(i32 %v1_10468, i32 %v0_10464)
  store i32 %v3_10468, i32* %r0.global-to-local, align 4
  %v7_1046c = icmp eq i32 %v3_10468, 9
  store i1 %v7_1046c, i1* %cpsr_z.global-to-local, align 1
  %v1_10470 = add i32 %v3_10468, 48
  %v0_10474 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10474, i32* @r1, align 4
  %v7_10478 = icmp sgt i32 %v3_10468, 9
  %extract.t = trunc i32 %v1_10470 to i8
  br i1 %v7_10478, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_10460
  %v9_10478 = add i32 %v3_10468, 55
  %extract.t20 = trunc i32 %v9_10478 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_10460, %bb36
  %v0_10480.off0 = phi i8 [ %extract.t, %dec_label_pc_10460 ], [ %extract.t20, %bb36 ]
  %v0_1047c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1047c, i32* @r0, align 4
  %v2_10480 = load i32, i32* %r7.global-to-local, align 4
  %v3_10480 = inttoptr i32 %v2_10480 to i8*
  store i8 %v0_10480.off0, i8* %v3_10480, align 1
  %v4_10480 = load i32, i32* %r7.global-to-local, align 4
  %v5_10480 = add i32 %v4_10480, -1
  store i32 %v5_10480, i32* %r7.global-to-local, align 4
  %v0_10484 = call i32 @function_10510()
  store i32 %v0_10484, i32* %r0.global-to-local, align 4
  store i32 %v0_10484, i32* %r4.global-to-local, align 4
  %v2_10488 = icmp eq i32 %v0_10484, 0
  store i1 %v2_10488, i1* %cpsr_z.global-to-local, align 1
  %v0_1048c = load i32, i32* %r6.global-to-local, align 4
  %v1_1048c = add i32 %v0_1048c, -1
  store i32 %v1_1048c, i32* %r6.global-to-local, align 4
  br i1 %v2_10488, label %dec_label_pc_10494, label %dec_label_pc_10460

dec_label_pc_10494:                               ; preds = %bb37
  %v0_10494 = load i32, i32* %sl.global-to-local, align 4
  %v2_10494 = icmp eq i32 %v0_10494, 0
  store i1 %v2_10494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10494, label %bb38, label %dec_label_pc_104fc

bb38:                                             ; preds = %dec_label_pc_10494
  store i32 %v0_1048c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_104a0

dec_label_pc_104a0:                               ; preds = %bb38, %dec_label_pc_104fc
  %v1_104ac = phi i32 [ %v0_1048c, %bb38 ], [ %v1_104a4.pre, %dec_label_pc_104fc ]
  %v2_104a0 = ptrtoint i32* %stack_var_-62 to i32
  %v2_104a4 = add i32 %v1_104ac, %v2_104a0
  %v3_104a4 = inttoptr i32 %v2_104a4 to i8*
  %v4_104a4 = load i8, i8* %v3_104a4, align 1
  %v6_104a4 = zext i8 %v4_104a4 to i32
  %v2_104a8 = icmp eq i8 %v4_104a4, 0
  store i1 %v2_104a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_104a4, i32* %r1.global-to-local, align 4
  br i1 %v2_104a8, label %dec_label_pc_104d0, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104a0
  br label %dec_label_pc_104b8

dec_label_pc_104b8:                               ; preds = %dec_label_pc_104b8, %dec_label_pc_104b4
  %v0_104b8 = phi i32 [ %v1_104b8, %dec_label_pc_104b8 ], [ 0, %dec_label_pc_104b4 ]
  %v1_104b8 = add i32 %v0_104b8, 1
  store i32 %v1_104b8, i32* @r2, align 4
  %v2_104bc = add i32 %v1_104b8, %v2_104a4
  %v3_104bc = inttoptr i32 %v2_104bc to i8*
  %v4_104bc = load i8, i8* %v3_104bc, align 1
  %v2_104c0 = icmp eq i8 %v4_104bc, 0
  store i1 %v2_104c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104c0, label %dec_label_pc_104c8, label %dec_label_pc_104b8

dec_label_pc_104c8:                               ; preds = %dec_label_pc_104b8
  %v7_104c8 = icmp eq i32 %v0_104b8, -2
  store i1 %v7_104c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104c8, label %dec_label_pc_104ec, label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104c8, %dec_label_pc_104a0
  %v0_104d817 = phi i32 [ %v1_104b8, %dec_label_pc_104c8 ], [ %v6_104a4, %dec_label_pc_104a0 ]
  store i32 %v2_104a4, i32* %r0.global-to-local, align 4
  %v0_104d4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_104d4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_104d8

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104d8.dec_label_pc_104d8_crit_edge, %dec_label_pc_104d0
  %v2_104e4 = phi i32 [ %v5_104e4, %dec_label_pc_104d8.dec_label_pc_104d8_crit_edge ], [ %v0_104d4, %dec_label_pc_104d0 ]
  %v0_104dc = phi i32 [ %v0_104dc.pre, %dec_label_pc_104d8.dec_label_pc_104d8_crit_edge ], [ %v2_104a4, %dec_label_pc_104d0 ]
  %v0_104d8 = phi i32 [ %v0_104d8.pre, %dec_label_pc_104d8.dec_label_pc_104d8_crit_edge ], [ %v0_104d817, %dec_label_pc_104d0 ]
  %v1_104d8 = add i32 %v0_104d8, -1
  store i32 %v1_104d8, i32* @r2, align 4
  %v1_104dc = inttoptr i32 %v0_104dc to i8*
  %v2_104dc = load i8, i8* %v1_104dc, align 1
  %v5_104dc = add i32 %v0_104dc, 1
  store i32 %v5_104dc, i32* %r0.global-to-local, align 4
  %v3_104e0 = icmp eq i32 %v0_104d8, 0
  store i1 %v3_104e0, i1* %cpsr_z.global-to-local, align 1
  %v3_104e4 = inttoptr i32 %v2_104e4 to i8*
  store i8 %v2_104dc, i8* %v3_104e4, align 1
  %v4_104e4 = load i32, i32* %r1.global-to-local, align 4
  %v5_104e4 = add i32 %v4_104e4, 1
  store i32 %v5_104e4, i32* %r1.global-to-local, align 4
  br i1 %v3_104e0, label %dec_label_pc_104ec, label %dec_label_pc_104d8.dec_label_pc_104d8_crit_edge

dec_label_pc_104d8.dec_label_pc_104d8_crit_edge:  ; preds = %dec_label_pc_104d8
  %v0_104d8.pre = load i32, i32* @r2, align 4
  %v0_104dc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_104d8

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104d8, %dec_label_pc_104c8, %.thread1, %dec_label_pc_103f8
  %v0_104ec = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_104ec, i32* %r0.global-to-local, align 4
  %v2_104f4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_104f4, i32* @r4, align 4
  ret i32 %v0_104ec

dec_label_pc_104f8:                               ; preds = %dec_label_pc_10448
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_104fc

dec_label_pc_104fc:                               ; preds = %dec_label_pc_10494, %dec_label_pc_104f8
  %v1_10500 = phi i32 [ %v1_1048c, %dec_label_pc_10494 ], [ 32, %dec_label_pc_104f8 ]
  %v2_10500 = add i32 %v1_10500, %v22_103f8
  %v3_10508 = add i32 %v2_10500, -34
  %v4_10508 = inttoptr i32 %v3_10508 to i8*
  store i8 45, i8* %v4_10508, align 1
  %v1_104a4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_104a0

; uselistorder directives
  uselistorder i32 %v5_104e4, { 1, 0 }
  uselistorder i1 %v3_104e0, { 1, 0 }
  uselistorder i32 %v0_104dc, { 1, 0 }
  uselistorder i1 %v7_104c8, { 1, 0 }
  uselistorder i32 %v1_104b8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_104a4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10484, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10468, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_1040c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_103fc, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder label %dec_label_pc_104fc, { 1, 0 }
  uselistorder label %dec_label_pc_104a0, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_10420, { 2, 1, 0 }
}

define i32 @function_10510() local_unnamed_addr {
dec_label_pc_10510:
  %v0_10510 = load i32, i32* @r1, align 4
  %v1_10510 = add i32 %v0_10510, -1
  %v7_10510 = icmp eq i32 %v0_10510, 1
  br i1 %v7_10510, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_10510
  %v2_10514 = load i32, i32* @r0, align 4
  ret i32 %v2_10514

bb82:                                             ; preds = %dec_label_pc_10510
  %v2_10510 = icmp eq i32 %v0_10510, 0
  br i1 %v2_10510, label %dec_label_pc_105f8, label %dec_label_pc_1051c

dec_label_pc_1051c:                               ; preds = %bb82
  %v0_1051c = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_1051c, %v0_10510
  br i1 %tmp, label %dec_label_pc_10524, label %dec_label_pc_105b0

dec_label_pc_10524:                               ; preds = %dec_label_pc_1051c
  %v2_10524 = and i32 %v1_10510, %v0_10510
  %v4_10524 = icmp eq i32 %v2_10524, 0
  br i1 %v4_10524, label %dec_label_pc_105bc, label %dec_label_pc_1052c

dec_label_pc_1052c:                               ; preds = %dec_label_pc_10524
  %v3_1052c = icmp ult i32 %v0_10510, 536870912
  br i1 %v3_1052c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1052c
  %v4_10530 = mul i32 %v0_10510, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1052c, %.thread
  %v0_10550.pr36.ph = phi i32 [ %v4_10530, %.thread ], [ %v0_10510, %dec_label_pc_1052c ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1052c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_10550.pr36 = phi i32 [ %v4_10544, %bb85 ], [ %v0_10550.pr36.ph, %.preheader.preheader ]
  %v1_10548 = phi i32 [ %v4_10548, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_1053c = icmp ugt i32 %v0_10550.pr36, 268435455
  br i1 %v2_1053c, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10550thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_10540 = icmp ult i32 %v0_10550.pr36, %v0_1051c
  br i1 %v4_10540, label %bb84, label %dec_label_pc_10550thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_10544 = and i32 %v0_10550.pr36, 268435456
  %v3_10544 = icmp eq i32 %v2_10544, 0
  %v4_10544 = mul i32 %v0_10550.pr36, 16
  br i1 %v3_10544, label %bb85, label %dec_label_pc_10550.loopexit

bb85:                                             ; preds = %bb84
  %v2_10548 = and i32 %v1_10548, 268435456
  %v3_10548 = icmp eq i32 %v2_10548, 0
  %v4_10548 = mul i32 %v1_10548, 16
  br i1 %v3_10548, label %.preheader, label %dec_label_pc_10550thread-pre-split.loopexit.loopexit

dec_label_pc_10550thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1055c48.ph = phi i32 [ %v1_10548, %bb83 ], [ %v4_10548, %bb85 ]
  %v0_10550.pr38.ph = phi i32 [ %v0_10550.pr36, %bb83 ], [ %v4_10544, %bb85 ]
  br label %dec_label_pc_10550thread-pre-split.loopexit

dec_label_pc_10550thread-pre-split.loopexit:      ; preds = %dec_label_pc_10550thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1055c48 = phi i32 [ %v1_10548, %.thread2 ], [ %v1_1055c48.ph, %dec_label_pc_10550thread-pre-split.loopexit.loopexit ]
  %v0_10550.pr38 = phi i32 [ %v0_10550.pr36, %.thread2 ], [ %v0_10550.pr38.ph, %dec_label_pc_10550thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10550thread-pre-split

dec_label_pc_10550thread-pre-split:               ; preds = %dec_label_pc_10550thread-pre-split.loopexit, %bb87
  %v1_1055c46 = phi i32 [ %v1_1055c48, %dec_label_pc_10550thread-pre-split.loopexit ], [ %v3_1055c, %bb87 ]
  %v0_10550.pr = phi i32 [ %v0_10550.pr38, %dec_label_pc_10550thread-pre-split.loopexit ], [ %v3_10558, %bb87 ]
  br label %dec_label_pc_10550

dec_label_pc_10550.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %dec_label_pc_10550.loopexit, %dec_label_pc_10550thread-pre-split
  %v1_1055c = phi i32 [ %v1_1055c46, %dec_label_pc_10550thread-pre-split ], [ %v1_10548, %dec_label_pc_10550.loopexit ]
  %v1_10558 = phi i32 [ %v0_10550.pr, %dec_label_pc_10550thread-pre-split ], [ %v4_10544, %dec_label_pc_10550.loopexit ]
  %v2_10550 = icmp slt i32 %v1_10558, 0
  br i1 %v2_10550, label %dec_label_pc_10564, label %bb86

bb86:                                             ; preds = %dec_label_pc_10550
  %v4_10554 = icmp ult i32 %v1_10558, %v0_1051c
  br i1 %v4_10554, label %bb87, label %dec_label_pc_10564

bb87:                                             ; preds = %bb86
  %v3_10558 = mul i32 %v1_10558, 2
  %v2_1055c = icmp slt i32 %v1_1055c, 0
  %v3_1055c = mul i32 %v1_1055c, 2
  br i1 %v2_1055c, label %dec_label_pc_10564, label %dec_label_pc_10550thread-pre-split

dec_label_pc_10564:                               ; preds = %bb86, %dec_label_pc_10550, %bb87
  %v2_1057059 = phi i32 [ %v3_1055c, %bb87 ], [ %v1_1055c, %bb86 ], [ %v1_1055c, %dec_label_pc_10550 ]
  %v1_1056851 = phi i32 [ %v3_10558, %bb87 ], [ %v1_10558, %bb86 ], [ %v1_10558, %dec_label_pc_10550 ]
  br label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %.thread11, %dec_label_pc_10564
  %v1_1059c = phi i32 [ %v4_1059c, %.thread11 ], [ %v2_1057059, %dec_label_pc_10564 ]
  %v1_10570 = phi i32 [ %v0_105a8, %.thread11 ], [ 0, %dec_label_pc_10564 ]
  %v1_105a0 = phi i32 [ %v4_105a0, %.thread11 ], [ %v1_1056851, %dec_label_pc_10564 ]
  %v1_1056c = phi i32 [ %v0_10598, %.thread11 ], [ %v0_1051c, %dec_label_pc_10564 ]
  %v3_10568 = icmp ult i32 %v1_1056c, %v1_105a0
  br i1 %v3_10568, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_10568
  %v3_1056c = sub i32 %v1_1056c, %v1_105a0
  %v3_10570 = or i32 %v1_10570, %v1_1059c
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10568, %bb88
  %v1_10578 = phi i32 [ %v1_1056c, %dec_label_pc_10568 ], [ %v3_1056c, %bb88 ]
  %v1_1057c = phi i32 [ %v1_10570, %dec_label_pc_10568 ], [ %v3_10570, %bb88 ]
  %v4_10574 = udiv i32 %v1_105a0, 2
  %v6_10574 = icmp ult i32 %v1_10578, %v4_10574
  br i1 %v6_10574, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_10578 = urem i32 %v1_105a0, 2
  %v4_10578 = icmp eq i32 %v3_10578, 0
  %v6_10578 = sub i32 %v1_10578, %v4_10574
  br i1 %v4_10578, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_1057c = udiv i32 %v1_1059c, 2
  %v6_1057c = or i32 %v1_1057c, %v5_1057c
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_10584 = phi i32 [ %v6_10578, %bb89 ], [ %v1_10578, %.thread7 ], [ %v6_10578, %bb90 ]
  %v1_10588 = phi i32 [ %v1_1057c, %bb89 ], [ %v1_1057c, %.thread7 ], [ %v6_1057c, %bb90 ]
  %v4_10580 = udiv i32 %v1_105a0, 4
  %v6_10580 = icmp ult i32 %v1_10584, %v4_10580
  br i1 %v6_10580, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_10584 = and i32 %v1_105a0, 2
  %v4_10584 = icmp eq i32 %v3_10584, 0
  %v6_10584 = sub i32 %v1_10584, %v4_10580
  br i1 %v4_10584, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_10588 = udiv i32 %v1_1059c, 4
  %v6_10588 = or i32 %v1_10588, %v5_10588
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_10590 = phi i32 [ %v6_10584, %bb91 ], [ %v1_10584, %.thread8 ], [ %v6_10584, %bb92 ]
  %v1_10594 = phi i32 [ %v1_10588, %bb91 ], [ %v1_10588, %.thread8 ], [ %v6_10588, %bb92 ]
  %v4_1058c = udiv i32 %v1_105a0, 8
  %v6_1058c = icmp ult i32 %v1_10590, %v4_1058c
  br i1 %v6_1058c, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_10590 = and i32 %v1_105a0, 4
  %v4_10590 = icmp eq i32 %v3_10590, 0
  %v6_10590 = sub i32 %v1_10590, %v4_1058c
  br i1 %v4_10590, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_10594 = udiv i32 %v1_1059c, 8
  %v6_10594 = or i32 %v1_10594, %v5_10594
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_105a8 = phi i32 [ %v1_10594, %bb93 ], [ %v1_10594, %.thread9 ], [ %v6_10594, %bb94 ]
  %v0_10598 = phi i32 [ %v6_10590, %bb93 ], [ %v1_10590, %.thread9 ], [ %v6_10590, %bb94 ]
  %v2_10598 = icmp eq i32 %v0_10598, 0
  br i1 %v2_10598, label %dec_label_pc_105a8, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_1059c, 16
  br i1 %tmp142, label %dec_label_pc_105a8, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_1059c = udiv i32 %v1_1059c, 16
  %v4_105a0 = udiv i32 %v1_105a0, 16
  br label %dec_label_pc_10568

dec_label_pc_105a8:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_105a8

dec_label_pc_105b0:                               ; preds = %dec_label_pc_1051c
  %v9_1051c = icmp eq i32 %v0_1051c, %v0_10510
  %. = zext i1 %v9_1051c to i32
  ret i32 %.

dec_label_pc_105bc:                               ; preds = %dec_label_pc_10524
  %v2_105bc = icmp ugt i32 %v0_10510, 65535
  br i1 %v2_105bc, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_105bc
  %v2_105c0 = and i32 %v0_10510, 32768
  %v3_105c0 = icmp eq i32 %v2_105c0, 0
  %v4_105c0 = udiv i32 %v0_10510, 65536
  br i1 %v3_105c0, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_105bc
  %v0_105cc65 = phi i32 [ %v0_10510, %dec_label_pc_105bc ], [ %v4_105c0, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_105d0 = phi i32 [ %v0_105cc65, %.thread16 ], [ %v4_105c0, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_105cc = icmp ugt i32 %v1_105d0, 255
  br i1 %v2_105cc, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_105d0 = and i32 %v1_105d0, 128
  %v3_105d0 = icmp eq i32 %v2_105d0, 0
  %v4_105d0 = udiv i32 %v1_105d0, 256
  br i1 %v3_105d0, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_105d4 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_105e0 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_105d4, %bb102 ]
  %v1_105dc = phi i32 [ %v1_105d0, %bb100 ], [ %v4_105d0, %bb101 ], [ %v4_105d0, %bb102 ]
  %v2_105d8 = icmp ugt i32 %v1_105dc, 15
  br i1 %v2_105d8, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_105dc = and i32 %v1_105dc, 8
  %v3_105dc = icmp eq i32 %v2_105dc, 0
  %v4_105dc = udiv i32 %v1_105dc, 16
  br i1 %v3_105dc, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_105e0 = add nsw i32 %v1_105e0, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_105e8 = phi i32 [ %v1_105e0, %.thread17 ], [ %v1_105e0, %bb103 ], [ %v2_105e0, %bb104 ]
  %v5_105ec = phi i32 [ %v1_105dc, %.thread17 ], [ %v4_105dc, %bb103 ], [ %v4_105dc, %bb104 ]
  %v2_105e4 = icmp ugt i32 %v5_105ec, 3
  %v7_105e4 = icmp eq i32 %v5_105ec, 4
  %v2_105e8 = xor i1 %v7_105e4, true
  %v3_105e8 = and i1 %v2_105e4, %v2_105e8
  br i1 %v3_105e8, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_105e8 = add nsw i32 %v4_105e8, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_105ec = phi i32 [ %v4_105e8, %.thread18 ], [ %v5_105e8, %bb105 ]
  %v2_105ec = xor i1 %v2_105e4, true
  %v3_105ec = or i1 %v7_105e4, %v2_105ec
  br i1 %v3_105ec, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_105ec = udiv i32 %v5_105ec, 2
  %v9_105ec = add i32 %v4_105ec, %v8_105ec
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_105f0 = phi i32 [ %v4_105ec, %bb106 ], [ %v9_105ec, %bb107 ]
  %v6_105f0 = lshr i32 %v0_1051c, %v1_105f0
  ret i32 %v6_105f0

dec_label_pc_105f8:                               ; preds = %bb82
  %v0_105f8 = load i32, i32* @lr, align 4
  %v0_105fc = call i32 @function_107d0()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_105f8)
  %v9_10608 = load i32, i32* @lr, align 4
  %v0_1060c = call i32 @function_10510()
  store i32 %v9_10608, i32* @lr, align 4
  ret i32 %v0_1060c

; uselistorder directives
  uselistorder i32 %v4_105ec, { 1, 0 }
  uselistorder i1 %v7_105e4, { 1, 0 }
  uselistorder i32 %v4_105dc, { 1, 0 }
  uselistorder i32 %v1_105dc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_105d0, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_105d0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_105c0, { 1, 0 }
  uselistorder i32 %v0_10598, { 1, 0 }
  uselistorder i32 %v4_1058c, { 1, 0 }
  uselistorder i32 %v1_10594, { 1, 2, 0 }
  uselistorder i32 %v4_10580, { 1, 0 }
  uselistorder i32 %v1_10588, { 1, 2, 0 }
  uselistorder i32 %v4_10574, { 1, 0 }
  uselistorder i32 %v1_1057c, { 1, 2, 0 }
  uselistorder i32 %v1_105a0, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10570, { 1, 0 }
  uselistorder i32 %v1_1059c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_1055c, { 1, 0 }
  uselistorder i32 %v3_10558, { 1, 0 }
  uselistorder i32 %v1_10558, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_1055c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10548, { 1, 0 }
  uselistorder i32 %v4_10544, { 2, 1, 0 }
  uselistorder i32 %v1_10548, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10550.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_1051c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10510, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 74, 38, 39, 0, 1, 10, 11, 2, 20, 40, 19, 41, 42, 3, 21, 43, 44, 12, 45, 4, 25, 46, 22, 47, 23, 48, 24, 49, 50, 13, 51, 5, 52, 53, 29, 54, 28, 55, 26, 56, 27, 57, 14, 15, 6, 58, 30, 59, 31, 60, 61, 62, 16, 63, 64, 7, 34, 65, 32, 66, 33, 67, 68, 17, 69, 8, 9, 37, 70, 35, 71, 36, 72, 18, 73 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_105a8, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10564, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10550thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10620(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10620:
  store i32 %arg1, i32* @r0, align 4
  %v1_10620 = add i32 %arg2, -1
  %v2_10620 = icmp eq i32 %arg2, 0
  br i1 %v2_10620, label %dec_label_pc_106dc, label %dec_label_pc_10628

dec_label_pc_10628:                               ; preds = %dec_label_pc_10620
  %v7_10620 = icmp eq i32 %arg2, 1
  br i1 %v7_10620, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_10628
  %v1_10628 = load i32, i32* @r0, align 4
  %v10_10628 = icmp eq i32 %v1_10628, %arg2
  br i1 %v10_10628, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_10628, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_10628 = icmp ult i32 %v1_10628, %arg2
  br i1 %v4_10628, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_10630 = and i32 %v1_10620, %arg2
  %v8_10630 = icmp eq i32 %v6_10630, 0
  br i1 %v8_10630, label %.thread67, label %dec_label_pc_10640.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_10634 = phi i32 [ %v1_10628, %bb75 ], [ 0, %.thread65 ]
  %v3_10634 = and i32 %v1_10634, %v1_10620
  br label %bb76

dec_label_pc_10640.preheader:                     ; preds = %bb75
  %v2_1064099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1064099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_106d0, %bb74, %bb89, %bb84, %dec_label_pc_106a0, %.thread67
  %v5_10638 = phi i32 [ %v1_10628, %bb74 ], [ %v3_10634, %.thread67 ], [ %v1_1067c.v6_1067c.v6_10684.v6_1068c, %dec_label_pc_106a0 ], [ 0, %bb84 ], [ %v1_106d4, %dec_label_pc_106d0 ], [ %v2_106d0, %bb89 ]
  ret i32 %v5_10638

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_10640.preheader
  %v0_10654.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_10640.preheader ], [ %v4_10648, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10640.preheader ], [ %v2_1064c11, %.thread1.thread9 ]
  br label %dec_label_pc_10654thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_10640.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1064c11, %.thread1.thread9 ], [ 0, %dec_label_pc_10640.preheader ]
  %v0_10654.pr33100 = phi i32 [ %v4_10648, %.thread1.thread9 ], [ %arg2, %dec_label_pc_10640.preheader ]
  %v4_10644 = icmp ult i32 %v0_10654.pr33100, %v1_10628
  br i1 %v4_10644, label %bb78, label %dec_label_pc_10654thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_10648 = and i32 %v0_10654.pr33100, 268435456
  %v3_10648 = icmp eq i32 %v2_10648, 0
  %v4_10648 = mul i32 %v0_10654.pr33100, 16
  br i1 %v3_10648, label %.thread1.thread9, label %dec_label_pc_10654.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1064c11 = add i32 %storemerge101, 4
  %v2_10640 = icmp ugt i32 %v4_10648, 268435455
  br i1 %v2_10640, label %.thread, label %bb77

dec_label_pc_10654thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_10654thread-pre-split.loopexit

dec_label_pc_10654thread-pre-split.loopexit:      ; preds = %dec_label_pc_10654thread-pre-split.loopexit.loopexit, %.thread
  %v0_10654.pr3398 = phi i32 [ %v0_10654.pr33.lcssa, %.thread ], [ %v0_10654.pr33100, %dec_label_pc_10654thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_10654thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10654thread-pre-split

dec_label_pc_10654thread-pre-split:               ; preds = %.thread4, %dec_label_pc_10654thread-pre-split.loopexit
  %v1_1066039 = phi i32 [ %storemerge95, %dec_label_pc_10654thread-pre-split.loopexit ], [ %v2_10660, %.thread4 ]
  %v0_10654.pr = phi i32 [ %v0_10654.pr3398, %dec_label_pc_10654thread-pre-split.loopexit ], [ %v3_1065c, %.thread4 ]
  br label %dec_label_pc_10654

dec_label_pc_10654.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_10654

dec_label_pc_10654:                               ; preds = %dec_label_pc_10654.loopexit, %dec_label_pc_10654thread-pre-split
  %v0_10668.pr = phi i32 [ %v1_1066039, %dec_label_pc_10654thread-pre-split ], [ %storemerge101, %dec_label_pc_10654.loopexit ]
  %v1_1065c = phi i32 [ %v0_10654.pr, %dec_label_pc_10654thread-pre-split ], [ %v4_10648, %dec_label_pc_10654.loopexit ]
  %v2_10654 = icmp slt i32 %v1_1065c, 0
  br i1 %v2_10654, label %dec_label_pc_10668, label %bb79

bb79:                                             ; preds = %dec_label_pc_10654
  %v4_10658 = icmp ult i32 %v1_1065c, %v1_10628
  br i1 %v4_10658, label %.thread4, label %dec_label_pc_10668

.thread4:                                         ; preds = %bb79
  %v3_1065c = mul i32 %v1_1065c, 2
  %v2_10660 = add i32 %v0_10668.pr, 1
  br label %dec_label_pc_10654thread-pre-split

dec_label_pc_10668:                               ; preds = %bb79, %dec_label_pc_10654
  %v2_10668 = add i32 %v0_10668.pr, -3
  %v5_1066c = icmp slt i32 %v0_10668.pr, 3
  br i1 %v5_1066c, label %dec_label_pc_106ac, label %dec_label_pc_10670

dec_label_pc_10670:                               ; preds = %dec_label_pc_10668, %bb83
  %v6_10698 = phi i32 [ %v0_106a0, %bb83 ], [ %v2_10668, %dec_label_pc_10668 ]
  %v1_10674 = phi i32 [ %v1_1067c.v6_1067c.v6_10684.v6_1068c, %bb83 ], [ %v1_10628, %dec_label_pc_10668 ]
  %v3_1069412 = phi i32 [ %v3_10694, %bb83 ], [ %v1_1065c, %dec_label_pc_10668 ]
  %v3_10670 = icmp ult i32 %v1_10674, %v3_1069412
  %v3_10674 = select i1 %v3_10670, i32 0, i32 %v3_1069412
  %v1_1067c = sub i32 %v1_10674, %v3_10674
  %v4_10678 = udiv i32 %v3_1069412, 2
  %v6_10678 = icmp ult i32 %v1_1067c, %v4_10678
  %v6_1067c = select i1 %v6_10678, i32 0, i32 %v4_10678
  %v1_1067c.v6_1067c = sub i32 %v1_1067c, %v6_1067c
  %.demorgan = and i1 %v3_10670, %v6_10678
  %v4_10680 = udiv i32 %v3_1069412, 4
  %v6_10680 = icmp ult i32 %v1_1067c.v6_1067c, %v4_10680
  %v6_10684 = select i1 %v6_10680, i32 0, i32 %v4_10680
  %v1_1067c.v6_1067c.v6_10684 = sub i32 %v1_1067c.v6_1067c, %v6_10684
  %.demorgan71 = and i1 %.demorgan, %v6_10680
  %v4_10688 = udiv i32 %v3_1069412, 8
  %v6_10688 = icmp ult i32 %v1_1067c.v6_1067c.v6_10684, %v4_10688
  %v6_1068c = select i1 %v6_10688, i32 0, i32 %v4_10688
  %v1_1067c.v6_1067c.v6_10684.v6_1068c = sub i32 %v1_1067c.v6_1067c.v6_10684, %v6_1068c
  %.demorgan72 = and i1 %.demorgan71, %v6_10688
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_10670
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_10670, %bb80
  %v2_10690 = add i32 %v1_1067c.v6_1067c.v6_10684.v6_1068c, -1
  %v4_10690 = sub i32 0, %v1_1067c.v6_1067c.v6_10684.v6_1068c
  %v5_10690 = and i32 %v1_1067c.v6_1067c.v6_10684.v6_1068c, %v4_10690
  %v3_10694 = udiv i32 %v3_1069412, 16
  %v5_10698 = icmp slt i32 %v1_1067c.v6_1067c.v6_10684.v6_1068c, 1
  br i1 %v5_10698, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_10698 = add i32 %v6_10698, -4
  %v9_10698 = sub i32 3, %v6_10698
  %v10_10698 = and i32 %v9_10698, %v6_10698
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_106a0 = phi i32 [ %v6_10698, %bb81 ], [ %v7_10698, %bb82 ]
  %v0_1069c15.in = phi i32 [ %v2_10690, %bb81 ], [ %v7_10698, %bb82 ]
  %v1_1069c14.in = phi i32 [ %v5_10690, %bb81 ], [ %v10_10698, %bb82 ]
  %v1_1069c14 = icmp slt i32 %v1_1069c14.in, 0
  %v0_1069c15 = icmp slt i32 %v0_1069c15.in, 0
  %v2_1069c = xor i1 %v0_1069c15, %v1_1069c14
  br i1 %v2_1069c, label %dec_label_pc_106a0, label %dec_label_pc_10670

dec_label_pc_106a0:                               ; preds = %bb83
  %v1_106a0 = urem i32 %v0_106a0, 4
  %v2_106a0 = icmp eq i32 %v1_106a0, 0
  br i1 %v2_106a0, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_106a0
  %v3_106a4 = icmp eq i32 %v1_1067c.v6_1067c.v6_10684.v6_1068c, 0
  br i1 %v3_106a4, label %bb76, label %dec_label_pc_106ac

dec_label_pc_106ac:                               ; preds = %bb84, %dec_label_pc_10668
  %v0_106c0 = phi i32 [ %v3_10694, %bb84 ], [ %v1_1065c, %dec_label_pc_10668 ]
  %v1_106bc = phi i32 [ %v1_1067c.v6_1067c.v6_10684.v6_1068c, %bb84 ], [ %v1_10628, %dec_label_pc_10668 ]
  %v0_106ac = phi i32 [ %v0_106a0, %bb84 ], [ %v2_10668, %dec_label_pc_10668 ]
  %v5_106b0 = icmp slt i32 %v0_106ac, -2
  br i1 %v5_106b0, label %dec_label_pc_106d0, label %dec_label_pc_106b4

dec_label_pc_106b4:                               ; preds = %dec_label_pc_106ac
  %v8_106ac = icmp eq i32 %v0_106ac, -2
  br i1 %v8_106ac, label %dec_label_pc_106c4, label %dec_label_pc_106b8

dec_label_pc_106b8:                               ; preds = %dec_label_pc_106b4
  %v3_106b8 = icmp ult i32 %v1_106bc, %v0_106c0
  br i1 %v3_106b8, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_106b8
  %v2_106b8 = sub i32 %v1_106bc, %v0_106c0
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_106b8, %bb85
  %v0_106c452 = phi i32 [ %v1_106bc, %dec_label_pc_106b8 ], [ %v2_106b8, %bb85 ]
  %v3_106c0 = udiv i32 %v0_106c0, 2
  br label %dec_label_pc_106c4

dec_label_pc_106c4:                               ; preds = %dec_label_pc_106b4, %bb86
  %v0_106cc = phi i32 [ %v0_106c0, %dec_label_pc_106b4 ], [ %v3_106c0, %bb86 ]
  %v1_106c8 = phi i32 [ %v1_106bc, %dec_label_pc_106b4 ], [ %v0_106c452, %bb86 ]
  %v3_106c4 = icmp ult i32 %v1_106c8, %v0_106cc
  br i1 %v3_106c4, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_106c4
  %v2_106c4 = sub i32 %v1_106c8, %v0_106cc
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_106c4, %bb87
  %v0_106d055 = phi i32 [ %v1_106c8, %dec_label_pc_106c4 ], [ %v2_106c4, %bb87 ]
  %v3_106cc = udiv i32 %v0_106cc, 2
  br label %dec_label_pc_106d0

dec_label_pc_106d0:                               ; preds = %dec_label_pc_106ac, %bb88
  %v2_106d4 = phi i32 [ %v0_106c0, %dec_label_pc_106ac ], [ %v3_106cc, %bb88 ]
  %v1_106d4 = phi i32 [ %v1_106bc, %dec_label_pc_106ac ], [ %v0_106d055, %bb88 ]
  %v3_106d0 = icmp ult i32 %v1_106d4, %v2_106d4
  br i1 %v3_106d0, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_106d0
  %v2_106d0 = sub i32 %v1_106d4, %v2_106d4
  br label %bb76

dec_label_pc_106dc:                               ; preds = %dec_label_pc_10620
  %v0_106dc = load i32, i32* @lr, align 4
  %v0_106e0 = call i32 @function_107d0()
  call void @__pseudo_branch(i32 %v0_106dc)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_106d4, { 1, 2, 0 }
  uselistorder i32 %v0_106c0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_106a0, { 1, 0, 2 }
  uselistorder i32 %v7_10698, { 1, 0 }
  uselistorder i32 %v3_10694, { 1, 0 }
  uselistorder i32 %v1_1067c.v6_1067c.v6_10684.v6_1068c, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_10688, { 1, 0 }
  uselistorder i32 %v4_10680, { 1, 0 }
  uselistorder i32 %v4_10678, { 1, 0 }
  uselistorder i32 %v6_10698, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10668, { 1, 0 }
  uselistorder i32 %v1_1065c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_10648, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10654.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10628, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_106d0, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_106c4, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_10670, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_106ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_106ec:
  store i32 %arg1, i32* @r0, align 4
  %v2_106ec = icmp eq i32 %arg2, 0
  br i1 %v2_106ec, label %dec_label_pc_107c0, label %dec_label_pc_106f4

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106ec
  %v1_106ec = icmp slt i32 %arg2, 0
  br i1 %v1_106ec, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_106f4
  %v2_106f4 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_106f4, %bb
  %v4_1070c = phi i32 [ %arg2, %dec_label_pc_106f4 ], [ %v2_106f4, %bb ]
  %v0_106f8 = load i32, i32* @r0, align 4
  %v1_106f8 = icmp slt i32 %v0_106f8, 0
  br i1 %v1_106f8, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_106fc = sub i32 0, %v0_106f8
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_10704 = phi i32 [ %v0_106f8, %bb79 ], [ %v2_106fc, %bb80 ]
  %v1_10700 = add i32 %v4_1070c, -1
  %v7_10700 = icmp eq i32 %v4_1070c, 1
  br i1 %v7_10700, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_10704 = icmp eq i32 %v1_10704, %v4_1070c
  br i1 %v10_10704, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_10704 = icmp ult i32 %v1_10704, %v4_1070c
  br i1 %v4_10704, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_1070c = and i32 %v1_10700, %v4_1070c
  %v8_1070c = icmp eq i32 %v6_1070c, 0
  br i1 %v8_1070c, label %.thread72, label %dec_label_pc_1071c.preheader

dec_label_pc_1071c.preheader:                     ; preds = %bb84
  %v2_1071c109 = icmp ugt i32 %v4_1070c, 268435455
  br i1 %v2_1071c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1071064 = phi i32 [ %v1_10704, %bb84 ], [ 0, %.thread70 ]
  %v3_10710 = and i32 %v1_1071064, %v1_10700
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_1071c.preheader
  %v0_10730.pr35.lcssa = phi i32 [ %v4_1070c, %dec_label_pc_1071c.preheader ], [ %v4_10724, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1071c.preheader ], [ %v2_107289, %.thread2.thread7 ]
  br label %dec_label_pc_10730thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_1071c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_107289, %.thread2.thread7 ], [ 0, %dec_label_pc_1071c.preheader ]
  %v0_10730.pr35110 = phi i32 [ %v4_10724, %.thread2.thread7 ], [ %v4_1070c, %dec_label_pc_1071c.preheader ]
  %v4_10720 = icmp ult i32 %v0_10730.pr35110, %v1_10704
  br i1 %v4_10720, label %bb86, label %dec_label_pc_10730thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_10724 = and i32 %v0_10730.pr35110, 268435456
  %v3_10724 = icmp eq i32 %v2_10724, 0
  %v4_10724 = mul i32 %v0_10730.pr35110, 16
  br i1 %v3_10724, label %.thread2.thread7, label %dec_label_pc_10730.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_107289 = add i32 %storemerge111, 4
  %v2_1071c = icmp ugt i32 %v4_10724, 268435455
  br i1 %v2_1071c, label %.thread1, label %bb85

dec_label_pc_10730thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_10730thread-pre-split.loopexit

dec_label_pc_10730thread-pre-split.loopexit:      ; preds = %dec_label_pc_10730thread-pre-split.loopexit.loopexit, %.thread1
  %v0_10730.pr35108 = phi i32 [ %v0_10730.pr35.lcssa, %.thread1 ], [ %v0_10730.pr35110, %dec_label_pc_10730thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_10730thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10730thread-pre-split

dec_label_pc_10730thread-pre-split:               ; preds = %.thread4, %dec_label_pc_10730thread-pre-split.loopexit
  %v1_1073c41 = phi i32 [ %storemerge105, %dec_label_pc_10730thread-pre-split.loopexit ], [ %v2_1073c, %.thread4 ]
  %v2_1073436 = phi i32 [ %v1_10704, %dec_label_pc_10730thread-pre-split.loopexit ], [ %v2_10734, %.thread4 ]
  %v0_10730.pr = phi i32 [ %v0_10730.pr35108, %dec_label_pc_10730thread-pre-split.loopexit ], [ %v3_10738, %.thread4 ]
  br label %dec_label_pc_10730

dec_label_pc_10730.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_10730

dec_label_pc_10730:                               ; preds = %dec_label_pc_10730.loopexit, %dec_label_pc_10730thread-pre-split
  %v0_10744.pr = phi i32 [ %v1_1073c41, %dec_label_pc_10730thread-pre-split ], [ %storemerge111, %dec_label_pc_10730.loopexit ]
  %v2_10734 = phi i32 [ %v2_1073436, %dec_label_pc_10730thread-pre-split ], [ %v1_10704, %dec_label_pc_10730.loopexit ]
  %v1_10738 = phi i32 [ %v0_10730.pr, %dec_label_pc_10730thread-pre-split ], [ %v4_10724, %dec_label_pc_10730.loopexit ]
  %v2_10730 = icmp slt i32 %v1_10738, 0
  br i1 %v2_10730, label %dec_label_pc_10744, label %bb87

bb87:                                             ; preds = %dec_label_pc_10730
  %v4_10734 = icmp ult i32 %v1_10738, %v2_10734
  br i1 %v4_10734, label %.thread4, label %dec_label_pc_10744

.thread4:                                         ; preds = %bb87
  %v3_10738 = mul i32 %v1_10738, 2
  %v2_1073c = add i32 %v0_10744.pr, 1
  br label %dec_label_pc_10730thread-pre-split

dec_label_pc_10744:                               ; preds = %bb87, %dec_label_pc_10730
  %v2_10744 = add i32 %v0_10744.pr, -3
  %v5_10748 = icmp slt i32 %v0_10744.pr, 3
  br i1 %v5_10748, label %dec_label_pc_10788, label %dec_label_pc_1074c

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10744, %bb91
  %v6_10774 = phi i32 [ %v0_1077c, %bb91 ], [ %v2_10744, %dec_label_pc_10744 ]
  %v1_10750 = phi i32 [ %v1_10758.v6_10758.v6_10760.v6_10768, %bb91 ], [ %v2_10734, %dec_label_pc_10744 ]
  %v3_1077010 = phi i32 [ %v3_10770, %bb91 ], [ %v1_10738, %dec_label_pc_10744 ]
  %v3_1074c = icmp ult i32 %v1_10750, %v3_1077010
  %v3_10750 = select i1 %v3_1074c, i32 0, i32 %v3_1077010
  %v1_10758 = sub i32 %v1_10750, %v3_10750
  %v4_10754 = udiv i32 %v3_1077010, 2
  %v6_10754 = icmp ult i32 %v1_10758, %v4_10754
  %v6_10758 = select i1 %v6_10754, i32 0, i32 %v4_10754
  %v1_10758.v6_10758 = sub i32 %v1_10758, %v6_10758
  %.demorgan = and i1 %v3_1074c, %v6_10754
  %v4_1075c = udiv i32 %v3_1077010, 4
  %v6_1075c = icmp ult i32 %v1_10758.v6_10758, %v4_1075c
  %v6_10760 = select i1 %v6_1075c, i32 0, i32 %v4_1075c
  %v1_10758.v6_10758.v6_10760 = sub i32 %v1_10758.v6_10758, %v6_10760
  %.demorgan76 = and i1 %.demorgan, %v6_1075c
  %v4_10764 = udiv i32 %v3_1077010, 8
  %v6_10764 = icmp ult i32 %v1_10758.v6_10758.v6_10760, %v4_10764
  %v6_10768 = select i1 %v6_10764, i32 0, i32 %v4_10764
  %v1_10758.v6_10758.v6_10760.v6_10768 = sub i32 %v1_10758.v6_10758.v6_10760, %v6_10768
  %.demorgan77 = and i1 %.demorgan76, %v6_10764
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_1074c
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_1074c, %bb88
  %v2_1076c = add i32 %v1_10758.v6_10758.v6_10760.v6_10768, -1
  %v4_1076c = sub i32 0, %v1_10758.v6_10758.v6_10760.v6_10768
  %v5_1076c = and i32 %v1_10758.v6_10758.v6_10760.v6_10768, %v4_1076c
  %v3_10770 = udiv i32 %v3_1077010, 16
  %v5_10774 = icmp slt i32 %v1_10758.v6_10758.v6_10760.v6_10768, 1
  br i1 %v5_10774, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_10774 = add i32 %v6_10774, -4
  %v9_10774 = sub i32 3, %v6_10774
  %v10_10774 = and i32 %v9_10774, %v6_10774
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_1077c = phi i32 [ %v6_10774, %bb89 ], [ %v7_10774, %bb90 ]
  %v0_1077813.in = phi i32 [ %v2_1076c, %bb89 ], [ %v7_10774, %bb90 ]
  %v1_1077812.in = phi i32 [ %v5_1076c, %bb89 ], [ %v10_10774, %bb90 ]
  %v1_1077812 = icmp slt i32 %v1_1077812.in, 0
  %v0_1077813 = icmp slt i32 %v0_1077813.in, 0
  %v2_10778 = xor i1 %v0_1077813, %v1_1077812
  br i1 %v2_10778, label %dec_label_pc_1077c, label %dec_label_pc_1074c

dec_label_pc_1077c:                               ; preds = %bb91
  %v1_1077c = urem i32 %v0_1077c, 4
  %v2_1077c = icmp eq i32 %v1_1077c, 0
  br i1 %v2_1077c, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_1077c
  %v3_10780 = icmp eq i32 %v1_10758.v6_10758.v6_10760.v6_10768, 0
  br i1 %v3_10780, label %.thread6, label %dec_label_pc_10788

dec_label_pc_10788:                               ; preds = %bb92, %dec_label_pc_10744
  %v0_1079c = phi i32 [ %v3_10770, %bb92 ], [ %v1_10738, %dec_label_pc_10744 ]
  %v1_10798 = phi i32 [ %v1_10758.v6_10758.v6_10760.v6_10768, %bb92 ], [ %v2_10734, %dec_label_pc_10744 ]
  %v0_10788 = phi i32 [ %v0_1077c, %bb92 ], [ %v2_10744, %dec_label_pc_10744 ]
  %v5_1078c = icmp slt i32 %v0_10788, -2
  br i1 %v5_1078c, label %dec_label_pc_107ac, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %dec_label_pc_10788
  %v8_10788 = icmp eq i32 %v0_10788, -2
  br i1 %v8_10788, label %dec_label_pc_107a0, label %dec_label_pc_10794

dec_label_pc_10794:                               ; preds = %dec_label_pc_10790
  %v3_10794 = icmp ult i32 %v1_10798, %v0_1079c
  br i1 %v3_10794, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_10794
  %v2_10794 = sub i32 %v1_10798, %v0_1079c
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_10794, %bb93
  %v0_107a054 = phi i32 [ %v1_10798, %dec_label_pc_10794 ], [ %v2_10794, %bb93 ]
  %v3_1079c = udiv i32 %v0_1079c, 2
  br label %dec_label_pc_107a0

dec_label_pc_107a0:                               ; preds = %dec_label_pc_10790, %bb94
  %v0_107a8 = phi i32 [ %v0_1079c, %dec_label_pc_10790 ], [ %v3_1079c, %bb94 ]
  %v1_107a4 = phi i32 [ %v1_10798, %dec_label_pc_10790 ], [ %v0_107a054, %bb94 ]
  %v3_107a0 = icmp ult i32 %v1_107a4, %v0_107a8
  br i1 %v3_107a0, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_107a0
  %v2_107a0 = sub i32 %v1_107a4, %v0_107a8
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_107a0, %bb95
  %v0_107ac57 = phi i32 [ %v1_107a4, %dec_label_pc_107a0 ], [ %v2_107a0, %bb95 ]
  %v3_107a8 = udiv i32 %v0_107a8, 2
  br label %dec_label_pc_107ac

dec_label_pc_107ac:                               ; preds = %dec_label_pc_10788, %bb96
  %v2_107b0 = phi i32 [ %v0_1079c, %dec_label_pc_10788 ], [ %v3_107a8, %bb96 ]
  %v1_107b0 = phi i32 [ %v1_10798, %dec_label_pc_10788 ], [ %v0_107ac57, %bb96 ]
  %v3_107ac = icmp ult i32 %v1_107b0, %v2_107b0
  br i1 %v3_107ac, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_107ac
  %v2_107ac = sub i32 %v1_107b0, %v2_107b0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_107ac, %bb83, %.thread72, %dec_label_pc_1077c, %bb92, %bb97
  %v1_107b8 = phi i32 [ %v1_10758.v6_10758.v6_10760.v6_10768, %dec_label_pc_1077c ], [ 0, %bb92 ], [ %v1_107b0, %dec_label_pc_107ac ], [ %v2_107ac, %bb97 ], [ %v3_10710, %.thread72 ], [ %v1_10704, %bb83 ]
  br i1 %v1_106f8, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_107b8 = sub i32 0, %v1_107b8
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_107bc = phi i32 [ %v1_107b8, %.thread6 ], [ %v2_107b8, %bb98 ]
  ret i32 %v1_107bc

dec_label_pc_107c0:                               ; preds = %dec_label_pc_106ec
  %v0_107c0 = load i32, i32* @lr, align 4
  %v0_107c4 = call i32 @function_107d0()
  call void @__pseudo_branch(i32 %v0_107c0)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_1079c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1077c, { 1, 0, 2 }
  uselistorder i32 %v7_10774, { 1, 0 }
  uselistorder i32 %v3_10770, { 1, 0 }
  uselistorder i32 %v1_10758.v6_10758.v6_10760.v6_10768, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_10764, { 1, 0 }
  uselistorder i32 %v4_1075c, { 1, 0 }
  uselistorder i32 %v4_10754, { 1, 0 }
  uselistorder i32 %v6_10774, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10744, { 1, 0 }
  uselistorder i32 %v1_10738, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_10734, { 1, 0, 3, 2 }
  uselistorder i32 %v4_10724, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10730.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10704, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_1070c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_107d0, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_107ac, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_107a0, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_1074c, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_107d0() local_unnamed_addr {
dec_label_pc_107d0:
  %v1_107d0 = load i32, i32* @r0, align 4
  ret i32 %v1_107d0
}

define i32 @function_107d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_107d4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_107d4 = load i32, i32* @r2, align 4
  %v1_107e4 = add i32 %arg2, -12
  store i32 %v6_107d4, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_107e4, 2
  br i1 %tmp, label %dec_label_pc_1080c, label %dec_label_pc_10804

dec_label_pc_10804:                               ; preds = %dec_label_pc_107d4
  %v0_10804 = call i32 @function_10848()
  br label %dec_label_pc_10838

dec_label_pc_1080c:                               ; preds = %dec_label_pc_107d4
  %v2_10814 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_10814, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_10814, -4095
  br i1 %tmp8, label %dec_label_pc_10838, label %dec_label_pc_10824

dec_label_pc_10824:                               ; preds = %dec_label_pc_1080c
  %v0_10824 = call i32 @function_10e98()
  %v0_10828 = load i32, i32* %r4.global-to-local, align 4
  %v1_10828 = sub i32 0, %v0_10828
  %v2_1082c = inttoptr i32 %v0_10824 to i32*
  store i32 %v1_10828, i32* %v2_1082c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %dec_label_pc_10824, %dec_label_pc_1080c, %dec_label_pc_10804
  %storemerge = phi i32 [ %v0_10804, %dec_label_pc_10804 ], [ %v2_10814, %dec_label_pc_1080c ], [ -1, %dec_label_pc_10824 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10814, { 1, 0, 2 }
}

define i32 @function_10848() local_unnamed_addr {
dec_label_pc_10848:
  %r4.global-to-local = alloca i32, align 4
  %v0_10868 = load i32, i32* @r0, align 4
  store i32 %v0_10868, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10868, -4095
  br i1 %tmp, label %dec_label_pc_10884, label %dec_label_pc_10874

dec_label_pc_10874:                               ; preds = %dec_label_pc_10848
  %v0_10874 = call i32 @function_10e98()
  %v0_10878 = load i32, i32* %r4.global-to-local, align 4
  %v1_10878 = sub i32 0, %v0_10878
  %v2_1087c = inttoptr i32 %v0_10874 to i32*
  store i32 %v1_10878, i32* %v2_1087c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %dec_label_pc_10848, %dec_label_pc_10874
  %v0_10884 = phi i32 [ %v0_10868, %dec_label_pc_10848 ], [ -1, %dec_label_pc_10874 ]
  ret i32 %v0_10884

; uselistorder directives
  uselistorder i32 %v0_10868, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10884, { 1, 0 }
}

define i32 @function_10898(i8* %arg1) local_unnamed_addr {
dec_label_pc_10898:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10898 = load i32, i32* @r4, align 4
  store i32 %v3_10898, i32* %stack_var_-8, align 4
  %v3_1089c = call i32 @chdir(i8* %arg1)
  store i32 %v3_1089c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1089c, -4095
  br i1 %tmp, label %dec_label_pc_108bc, label %dec_label_pc_108ac

dec_label_pc_108ac:                               ; preds = %dec_label_pc_10898
  %v0_108ac = call i32 @function_10e98()
  %v0_108b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_108b0 = sub i32 0, %v0_108b0
  %v2_108b4 = inttoptr i32 %v0_108ac to i32*
  store i32 %v1_108b0, i32* %v2_108b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108bc

dec_label_pc_108bc:                               ; preds = %dec_label_pc_10898, %dec_label_pc_108ac
  %v0_108bc = phi i32 [ %v3_1089c, %dec_label_pc_10898 ], [ -1, %dec_label_pc_108ac ]
  %v2_108c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_108c0, i32* @r4, align 4
  ret i32 %v0_108bc

; uselistorder directives
  uselistorder i32 %v3_1089c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108bc, { 1, 0 }
}

define i32 @function_108c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_108c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108c4 = load i32, i32* @r4, align 4
  store i32 %v3_108c4, i32* %stack_var_-8, align 4
  %v1_108c8 = call i32 @close(i32 %arg1)
  store i32 %v1_108c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_108c8, -4095
  br i1 %tmp, label %dec_label_pc_108e8, label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108c4
  %v0_108d8 = call i32 @function_10e98()
  %v0_108dc = load i32, i32* %r4.global-to-local, align 4
  %v1_108dc = sub i32 0, %v0_108dc
  %v2_108e0 = inttoptr i32 %v0_108d8 to i32*
  store i32 %v1_108dc, i32* %v2_108e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108e8

dec_label_pc_108e8:                               ; preds = %dec_label_pc_108c4, %dec_label_pc_108d8
  %v0_108e8 = phi i32 [ %v1_108c8, %dec_label_pc_108c4 ], [ -1, %dec_label_pc_108d8 ]
  %v2_108ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_108ec, i32* @r4, align 4
  ret i32 %v0_108e8

; uselistorder directives
  uselistorder i32 %v1_108c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108e8, { 1, 0 }
}

define i32 @function_108f0() local_unnamed_addr {
dec_label_pc_108f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108f0 = load i32, i32* @r4, align 4
  store i32 %v3_108f0, i32* %stack_var_-8, align 4
  %v0_108f4 = call i32 @fork()
  store i32 %v0_108f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_108f4, -4095
  br i1 %tmp, label %dec_label_pc_10914, label %dec_label_pc_10904

dec_label_pc_10904:                               ; preds = %dec_label_pc_108f0
  %v0_10904 = call i32 @function_10e98()
  %v0_10908 = load i32, i32* %r4.global-to-local, align 4
  %v1_10908 = sub i32 0, %v0_10908
  %v2_1090c = inttoptr i32 %v0_10904 to i32*
  store i32 %v1_10908, i32* %v2_1090c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10914

dec_label_pc_10914:                               ; preds = %dec_label_pc_108f0, %dec_label_pc_10904
  %v0_10914 = phi i32 [ %v0_108f4, %dec_label_pc_108f0 ], [ -1, %dec_label_pc_10904 ]
  %v2_10918 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10918, i32* @r4, align 4
  ret i32 %v0_10914

; uselistorder directives
  uselistorder i32 %v0_108f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10914, { 1, 0 }
}

define i32 @function_1091c() local_unnamed_addr {
dec_label_pc_1091c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1091c = load i32, i32* @r4, align 4
  store i32 %v3_1091c, i32* %stack_var_-8, align 4
  %v0_10920 = call i32 @getpid()
  store i32 %v0_10920, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10920, -4095
  br i1 %tmp, label %dec_label_pc_10940, label %dec_label_pc_10930

dec_label_pc_10930:                               ; preds = %dec_label_pc_1091c
  %v0_10930 = call i32 @function_10e98()
  %v0_10934 = load i32, i32* %r4.global-to-local, align 4
  %v1_10934 = sub i32 0, %v0_10934
  %v2_10938 = inttoptr i32 %v0_10930 to i32*
  store i32 %v1_10934, i32* %v2_10938, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10940

dec_label_pc_10940:                               ; preds = %dec_label_pc_1091c, %dec_label_pc_10930
  %v0_10940 = phi i32 [ %v0_10920, %dec_label_pc_1091c ], [ -1, %dec_label_pc_10930 ]
  %v2_10944 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10944, i32* @r4, align 4
  ret i32 %v0_10940

; uselistorder directives
  uselistorder i32 %v0_10920, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10940, { 1, 0 }
}

define i32 @function_10948() local_unnamed_addr {
dec_label_pc_10948:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10948 = load i32, i32* @r4, align 4
  store i32 %v3_10948, i32* %stack_var_-8, align 4
  %v0_1094c = call i32 @getppid()
  store i32 %v0_1094c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1094c, -4095
  br i1 %tmp, label %dec_label_pc_1096c, label %dec_label_pc_1095c

dec_label_pc_1095c:                               ; preds = %dec_label_pc_10948
  %v0_1095c = call i32 @function_10e98()
  %v0_10960 = load i32, i32* %r4.global-to-local, align 4
  %v1_10960 = sub i32 0, %v0_10960
  %v2_10964 = inttoptr i32 %v0_1095c to i32*
  store i32 %v1_10960, i32* %v2_10964, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1096c

dec_label_pc_1096c:                               ; preds = %dec_label_pc_10948, %dec_label_pc_1095c
  %v0_1096c = phi i32 [ %v0_1094c, %dec_label_pc_10948 ], [ -1, %dec_label_pc_1095c ]
  %v2_10970 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10970, i32* @r4, align 4
  ret i32 %v0_1096c

; uselistorder directives
  uselistorder i32 %v0_1094c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1096c, { 1, 0 }
}

define i32 @function_10974(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10974:
  %r4.global-to-local = alloca i32, align 4
  %v2_10990 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_10990, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10990, -4095
  br i1 %tmp, label %dec_label_pc_109b0, label %dec_label_pc_109a0

dec_label_pc_109a0:                               ; preds = %dec_label_pc_10974
  %v0_109a0 = call i32 @function_10e98()
  %v0_109a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_109a4 = sub i32 0, %v0_109a4
  %v2_109a8 = inttoptr i32 %v0_109a0 to i32*
  store i32 %v1_109a4, i32* %v2_109a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_109b0

dec_label_pc_109b0:                               ; preds = %dec_label_pc_10974, %dec_label_pc_109a0
  %v0_109b0 = phi i32 [ %v2_10990, %dec_label_pc_10974 ], [ -1, %dec_label_pc_109a0 ]
  ret i32 %v0_109b0

; uselistorder directives
  uselistorder i32 %v2_10990, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109b0, { 1, 0 }
}

define i32 @function_109c4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_109c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109c4 = load i32, i32* @r4, align 4
  store i32 %v3_109c4, i32* %stack_var_-8, align 4
  %v2_109c8 = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_109c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_109c8, -4095
  br i1 %tmp, label %dec_label_pc_109e8, label %dec_label_pc_109d8

dec_label_pc_109d8:                               ; preds = %dec_label_pc_109c4
  %v0_109d8 = call i32 @function_10e98()
  %v0_109dc = load i32, i32* %r4.global-to-local, align 4
  %v1_109dc = sub i32 0, %v0_109dc
  %v2_109e0 = inttoptr i32 %v0_109d8 to i32*
  store i32 %v1_109dc, i32* %v2_109e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_109e8

dec_label_pc_109e8:                               ; preds = %dec_label_pc_109c4, %dec_label_pc_109d8
  %v0_109e8 = phi i32 [ %v2_109c8, %dec_label_pc_109c4 ], [ -1, %dec_label_pc_109d8 ]
  %v2_109ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_109ec, i32* @r4, align 4
  ret i32 %v0_109e8

; uselistorder directives
  uselistorder i32 %v2_109c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109e8, { 1, 0 }
}

define i32 @function_109f0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_109f0:
  %r4.global-to-local = alloca i32, align 4
  %v1_10a00 = and i32 %arg2, 64
  %v2_10a00 = icmp eq i32 %v1_10a00, 0
  br i1 %v2_10a00, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_109f0
  %v6_109f0 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_109f0, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_109f0, %bb
  %v0_10a10 = phi i32 [ 0, %dec_label_pc_109f0 ], [ %phitmp, %bb ]
  store i32 %v0_10a10, i32* @r2, align 4
  %v4_10a18 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_10a1c = icmp eq i32 %v4_10a18, -4096
  store i1 %v7_10a1c, i1* @cpsr_z, align 1
  store i32 %v4_10a18, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10a18, -4095
  br i1 %tmp, label %dec_label_pc_10a38, label %dec_label_pc_10a28

dec_label_pc_10a28:                               ; preds = %.thread1
  %v0_10a28 = call i32 @function_10e98()
  %v0_10a2c = load i32, i32* %r4.global-to-local, align 4
  %v1_10a2c = sub i32 0, %v0_10a2c
  %v2_10a30 = inttoptr i32 %v0_10a28 to i32*
  store i32 %v1_10a2c, i32* %v2_10a30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a38

dec_label_pc_10a38:                               ; preds = %.thread1, %dec_label_pc_10a28
  %v0_10a38 = phi i32 [ %v4_10a18, %.thread1 ], [ -1, %dec_label_pc_10a28 ]
  ret i32 %v0_10a38

; uselistorder directives
  uselistorder i32 %v4_10a18, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10a38, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_10a4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10a4c:
  store i32 %arg1, i32* @r2, align 4
  %v0_10a54 = load i32, i32* @r0, align 4
  %v2_10a54 = inttoptr i32 %v0_10a54 to i8*
  %v3_10a54 = call i32 @function_109f0(i8* %v2_10a54, i32 577)
  %v0_10a58 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10a58, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_10a4c
  %v6_10a58 = and i32 %v3_10a54, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_10a4c, %bb
  %v7_10a58 = phi i32 [ %v3_10a54, %dec_label_pc_10a4c ], [ %v6_10a58, %bb ]
  ret i32 %v7_10a58

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_10a5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10a5c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a5c = load i32, i32* @r4, align 4
  store i32 %v3_10a5c, i32* %stack_var_-8, align 4
  %v4_10a64 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 0)
  store i32 %v4_10a64, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10a64, -4095
  br i1 %tmp, label %dec_label_pc_10a84, label %dec_label_pc_10a74

dec_label_pc_10a74:                               ; preds = %dec_label_pc_10a5c
  %v0_10a74 = call i32 @function_10e98()
  %v0_10a78 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a78 = sub i32 0, %v0_10a78
  %v2_10a7c = inttoptr i32 %v0_10a74 to i32*
  store i32 %v1_10a78, i32* %v2_10a7c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a84

dec_label_pc_10a84:                               ; preds = %dec_label_pc_10a5c, %dec_label_pc_10a74
  %v0_10a84 = phi i32 [ %v4_10a64, %dec_label_pc_10a5c ], [ -1, %dec_label_pc_10a74 ]
  %v2_10a88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a88, i32* @r4, align 4
  ret i32 %v0_10a84

; uselistorder directives
  uselistorder i32 %v4_10a64, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a84, { 1, 0 }
}

define i32 @function_10a8c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a8c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a8c = load i32, i32* @r4, align 4
  store i32 %v3_10a8c, i32* %stack_var_-8, align 4
  %v4_10a90 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10a90, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10a90, -4095
  br i1 %tmp, label %dec_label_pc_10ab0, label %dec_label_pc_10aa0

dec_label_pc_10aa0:                               ; preds = %dec_label_pc_10a8c
  %v0_10aa0 = call i32 @function_10e98()
  %v0_10aa4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10aa4 = sub i32 0, %v0_10aa4
  %v2_10aa8 = inttoptr i32 %v0_10aa0 to i32*
  store i32 %v1_10aa4, i32* %v2_10aa8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ab0

dec_label_pc_10ab0:                               ; preds = %dec_label_pc_10a8c, %dec_label_pc_10aa0
  %v0_10ab0 = phi i32 [ %v4_10a90, %dec_label_pc_10a8c ], [ -1, %dec_label_pc_10aa0 ]
  %v2_10ab4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10ab4, i32* @r4, align 4
  ret i32 %v0_10ab0

; uselistorder directives
  uselistorder i32 %v4_10a90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ab0, { 1, 0 }
}

define i32 @function_10ab8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ab8:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_10ab8 = load i32, i32* @r4, align 4
  store i32 %v3_10ab8, i32* %stack_var_-8, align 4
  %v7_10abc = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_10abc, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_10abc, -4095
  br i1 %tmp6, label %dec_label_pc_10adc, label %dec_label_pc_10acc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10ab8
  %v0_10acc = call i32 @function_10e98()
  %v0_10ad0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ad0 = sub i32 0, %v0_10ad0
  %v2_10ad4 = inttoptr i32 %v0_10acc to i32*
  store i32 %v1_10ad0, i32* %v2_10ad4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10ab8, %dec_label_pc_10acc
  %v0_10adc = phi i32 [ %v7_10abc, %dec_label_pc_10ab8 ], [ -1, %dec_label_pc_10acc ]
  %v2_10ae0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10ae0, i32* @r4, align 4
  ret i32 %v0_10adc

; uselistorder directives
  uselistorder i32 %v7_10abc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10adc, { 1, 0 }
}

define i32 @function_10ae4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10ae4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ae4 = load i32, i32* @r4, align 4
  store i32 %v3_10ae4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10b0c, label %dec_label_pc_10afc

dec_label_pc_10afc:                               ; preds = %dec_label_pc_10ae4
  %v0_10afc = call i32 @function_10e98()
  %v0_10b00 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b00 = sub i32 0, %v0_10b00
  %v2_10b04 = inttoptr i32 %v0_10afc to i32*
  store i32 %v1_10b00, i32* %v2_10b04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10b10.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b0c

dec_label_pc_10b0c:                               ; preds = %dec_label_pc_10ae4, %dec_label_pc_10afc
  %v2_10b10 = phi i32 [ %v3_10ae4, %dec_label_pc_10ae4 ], [ %v2_10b10.pre, %dec_label_pc_10afc ]
  %v0_10b0c = phi i32 [ %arg1, %dec_label_pc_10ae4 ], [ -1, %dec_label_pc_10afc ]
  store i32 %v2_10b10, i32* @r4, align 4
  ret i32 %v0_10b0c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b0c, { 1, 0 }
}

define i32 @function_10b14(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b14:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b14 = load i32, i32* @r4, align 4
  store i32 %v3_10b14, i32* %stack_var_-8, align 4
  %v0_10b18 = call i32 @setsid()
  store i32 %v0_10b18, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b18, -4095
  br i1 %tmp, label %dec_label_pc_10b38, label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10b14
  %v0_10b28 = call i32 @function_10e98()
  %v0_10b2c = load i32, i32* %r4.global-to-local, align 4
  %v1_10b2c = sub i32 0, %v0_10b2c
  %v2_10b30 = inttoptr i32 %v0_10b28 to i32*
  store i32 %v1_10b2c, i32* %v2_10b30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b38

dec_label_pc_10b38:                               ; preds = %dec_label_pc_10b14, %dec_label_pc_10b28
  %v0_10b38 = phi i32 [ %v0_10b18, %dec_label_pc_10b14 ], [ -1, %dec_label_pc_10b28 ]
  %v2_10b3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b3c, i32* @r4, align 4
  ret i32 %v0_10b38

; uselistorder directives
  uselistorder i32 %v0_10b18, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b38, { 1, 0 }
}

define i32 @function_10b40(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b40:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b40 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_10b40, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10b40
  %v3_10b485 = load i32, i32* @r4, align 4
  store i32 %v3_10b485, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b68

bb:                                               ; preds = %dec_label_pc_10b40
  %v3_10b48 = load i32, i32* @r4, align 4
  store i32 %v3_10b48, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_10b68, label %dec_label_pc_10b54

dec_label_pc_10b54:                               ; preds = %bb
  %v0_10b54 = call i32 @function_10e98()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10b60 = inttoptr i32 %v0_10b54 to i32*
  store i32 22, i32* %v2_10b60, align 4
  %v0_10b8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10b8c

dec_label_pc_10b68:                               ; preds = %.thread, %bb
  %v7_10b68 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_10b68, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_10b68, -4095
  br i1 %tmp13, label %dec_label_pc_10b88, label %dec_label_pc_10b78

dec_label_pc_10b78:                               ; preds = %dec_label_pc_10b68
  %v0_10b78 = call i32 @function_10e98()
  %v0_10b7c = load i32, i32* %r4.global-to-local, align 4
  %v1_10b7c = sub i32 0, %v0_10b7c
  %v2_10b80 = inttoptr i32 %v0_10b78 to i32*
  store i32 %v1_10b7c, i32* %v2_10b80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b88

dec_label_pc_10b88:                               ; preds = %dec_label_pc_10b68, %dec_label_pc_10b78
  %v0_10b88 = phi i32 [ %v7_10b68, %dec_label_pc_10b68 ], [ -1, %dec_label_pc_10b78 ]
  store i32 %v0_10b88, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10b8c

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b54, %dec_label_pc_10b88
  %v0_10b8c = phi i32 [ %v0_10b8c.pre, %dec_label_pc_10b54 ], [ %v0_10b88, %dec_label_pc_10b88 ]
  %v2_10b90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b90, i32* @r4, align 4
  ret i32 %v0_10b8c

; uselistorder directives
  uselistorder i32 %v7_10b68, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_10b8c, { 1, 0 }
  uselistorder label %dec_label_pc_10b88, { 1, 0 }
  uselistorder label %dec_label_pc_10b68, { 1, 0 }
}

define i32 @function_10b94(i32* %arg1) local_unnamed_addr {
dec_label_pc_10b94:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b94 = load i32, i32* @r4, align 4
  store i32 %v3_10b94, i32* %stack_var_-8, align 4
  %v2_10b98 = call i32 @time(i32* %arg1)
  store i32 %v2_10b98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10b98, -4095
  br i1 %tmp, label %dec_label_pc_10bb8, label %dec_label_pc_10ba8

dec_label_pc_10ba8:                               ; preds = %dec_label_pc_10b94
  %v0_10ba8 = call i32 @function_10e98()
  %v0_10bac = load i32, i32* %r4.global-to-local, align 4
  %v1_10bac = sub i32 0, %v0_10bac
  %v2_10bb0 = inttoptr i32 %v0_10ba8 to i32*
  store i32 %v1_10bac, i32* %v2_10bb0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10bb8

dec_label_pc_10bb8:                               ; preds = %dec_label_pc_10b94, %dec_label_pc_10ba8
  %v0_10bb8 = phi i32 [ %v2_10b98, %dec_label_pc_10b94 ], [ -1, %dec_label_pc_10ba8 ]
  %v2_10bbc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10bbc, i32* @r4, align 4
  ret i32 %v0_10bb8

; uselistorder directives
  uselistorder i32 %v2_10b98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bb8, { 1, 0 }
}

define i32 @function_10bc0(i8* %arg1) local_unnamed_addr {
dec_label_pc_10bc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bc0 = load i32, i32* @r4, align 4
  store i32 %v3_10bc0, i32* %stack_var_-8, align 4
  %v3_10bc4 = call i32 @unlink(i8* %arg1)
  store i32 %v3_10bc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_10bc4, -4095
  br i1 %tmp, label %dec_label_pc_10be4, label %dec_label_pc_10bd4

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10bc0
  %v0_10bd4 = call i32 @function_10e98()
  %v0_10bd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10bd8 = sub i32 0, %v0_10bd8
  %v2_10bdc = inttoptr i32 %v0_10bd4 to i32*
  store i32 %v1_10bd8, i32* %v2_10bdc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10bc0, %dec_label_pc_10bd4
  %v0_10be4 = phi i32 [ %v3_10bc4, %dec_label_pc_10bc0 ], [ -1, %dec_label_pc_10bd4 ]
  %v2_10be8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10be8, i32* @r4, align 4
  ret i32 %v0_10be4

; uselistorder directives
  uselistorder i32 %v3_10bc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10be4, { 1, 0 }
}

define i32 @function_10bec(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10bec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bec = load i32, i32* @r4, align 4
  store i32 %v3_10bec, i32* %stack_var_-8, align 4
  %v4_10bf0 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10bf0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10bf0, -4095
  br i1 %tmp, label %dec_label_pc_10c10, label %dec_label_pc_10c00

dec_label_pc_10c00:                               ; preds = %dec_label_pc_10bec
  %v0_10c00 = call i32 @function_10e98()
  %v0_10c04 = load i32, i32* %r4.global-to-local, align 4
  %v1_10c04 = sub i32 0, %v0_10c04
  %v2_10c08 = inttoptr i32 %v0_10c00 to i32*
  store i32 %v1_10c04, i32* %v2_10c08, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c10

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10bec, %dec_label_pc_10c00
  %v0_10c10 = phi i32 [ %v4_10bf0, %dec_label_pc_10bec ], [ -1, %dec_label_pc_10c00 ]
  %v2_10c14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10c14, i32* @r4, align 4
  ret i32 %v0_10c10

; uselistorder directives
  uselistorder i32 %v4_10bf0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c10, { 1, 0 }
}

define i32 @function_10c18(i32* %arg1) local_unnamed_addr {
dec_label_pc_10c18:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10c18 = load i32, i32* @r4, align 4
  store i32 %v3_10c18, i32* %stack_var_-20, align 4
  %v6_10c18 = load i32, i32* @r5, align 4
  %v9_10c18 = load i32, i32* @r6, align 4
  %v12_10c18 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_10c20 = load i32, i32* %arg1, align 4
  store i32 %v2_10c20, i32* %r4.global-to-local, align 4
  %v2_10c24 = ptrtoint i32* %stack_var_-36 to i32
  %v1_10c28 = add i32 %tmp, 24
  store i32 %v1_10c28, i32* @r6, align 4
  %v3_10c2c = icmp eq i32 %v2_10c20, -1
  store i32 %v2_10c24, i32* @r7, align 4
  store i32 %v1_10c28, i32* %r2.global-to-local, align 4
  store i32 %v2_10c24, i32* @r0, align 4
  br i1 %v3_10c2c, label %dec_label_pc_10c44, label %dec_label_pc_10c58

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c18
  %v0_10c44 = call i32 @function_10e98()
  %v0_10c4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10c4c, i32* %r2.global-to-local, align 4
  %v2_10c50 = inttoptr i32 %v0_10c44 to i32*
  store i32 9, i32* %v2_10c50, align 4
  %v0_10cb0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cb0

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c18
  %v8_10c60 = call i32 @function_11f0c(i32 %v2_10c24, i32 ptrtoint (i32* @global_var_11f04.426 to i32), i32 %v1_10c28, i32 73484, i32 %v3_10c18, i32 %v6_10c18, i32 %v9_10c18)
  %v1_10c70 = call i32 @function_11f04()
  %v0_10c7c = load i32, i32* @r5, align 4
  %v1_10c7c = inttoptr i32 %v0_10c7c to i32*
  %v2_10c7c = load i32, i32* %v1_10c7c, align 4
  store i32 %v2_10c7c, i32* @r4, align 4
  store i32 %v2_10c24, i32* @r0, align 4
  store i32 -1, i32* %v1_10c7c, align 4
  store i32 ptrtoint (i32* @global_var_10c94.430 to i32), i32* @lr, align 4
  %v8_10c90 = call i32 @function_11f0c(i32 %v2_10c24, i32 1, i32 %v1_10c28, i32 73484, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_10c94 = load i32, i32* @r5, align 4
  %v1_10c94 = add i32 %v0_10c94, 12
  %v2_10c94 = inttoptr i32 %v1_10c94 to i32*
  %v3_10c94 = load i32, i32* %v2_10c94, align 4
  store i32 %v3_10c94, i32* @r0, align 4
  %v0_10c98 = call i32 @function_1151c()
  %v0_10c9c = load i32, i32* @r5, align 4
  store i32 %v0_10c9c, i32* @r0, align 4
  %v0_10ca0 = call i32 @function_1151c()
  %v0_10ca4 = load i32, i32* @r4, align 4
  %v1_10ca8 = call i32 @function_108c4(i32 %v0_10ca4)
  store i32 %v1_10ca8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cb0

dec_label_pc_10cb0:                               ; preds = %dec_label_pc_10c44, %dec_label_pc_10c58
  %v0_10cb0 = phi i32 [ %v0_10cb0.pre, %dec_label_pc_10c44 ], [ %v1_10ca8, %dec_label_pc_10c58 ]
  %v2_10cb8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10cb8, i32* @r4, align 4
  store i32 %v6_10c18, i32* @r5, align 4
  store i32 %v9_10c18, i32* @r6, align 4
  store i32 %v12_10c18, i32* @r7, align 4
  ret i32 %v0_10cb0

; uselistorder directives
  uselistorder i32 %v1_10c28, { 2, 1, 0, 3 }
  uselistorder i32 %v2_10c24, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_10c18, { 1, 0 }
  uselistorder i32 %v6_10c18, { 1, 0 }
  uselistorder label %dec_label_pc_10cb0, { 1, 0 }
}

define i32 @function_10ccc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ccc:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_10ccc = load i32, i32* @r4, align 4
  %v9_10ccc = load i32, i32* @r6, align 4
  %v12_10ccc = load i32, i32* @r7, align 4
  %v0_10cd8 = load i32, i32* @r0, align 4
  %v2_10cd8 = inttoptr i32 %v0_10cd8 to i8*
  %v3_10cd8 = call i32 @function_109f0(i8* %v2_10cd8, i32 18432)
  store i32 %v3_10cd8, i32* @r0, align 4
  store i32 %v3_10cd8, i32* @r7, align 4
  %v1_10cdc = icmp slt i32 %v3_10cd8, 0
  br i1 %v1_10cdc, label %.thread1, label %dec_label_pc_10ce8

.thread1:                                         ; preds = %dec_label_pc_10ccc
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_10db8

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10ccc
  %v2_10cd4 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_10cd4, i32* @r1, align 4
  %v0_10cec = call i32 @function_12330()
  %v1_10cf0 = icmp slt i32 %v0_10cec, 0
  br i1 %v1_10cf0, label %dec_label_pc_10d10, label %dec_label_pc_10cf8

dec_label_pc_10cf8:                               ; preds = %dec_label_pc_10ce8
  %v0_10cf8 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_10d04 = call i32 @function_107d4(i32 %v0_10cf8, i32 2)
  %v1_10d08 = icmp slt i32 %v2_10d04, 0
  br i1 %v1_10d08, label %dec_label_pc_10d10, label %dec_label_pc_10d30

dec_label_pc_10d10:                               ; preds = %dec_label_pc_10cf8, %dec_label_pc_10ce8
  %v0_10d10 = call i32 @function_10e98()
  store i32 %v0_10d10, i32* %r5.global-to-local, align 4
  %v0_10d18 = load i32, i32* @r7, align 4
  %v1_10d1c = inttoptr i32 %v0_10d10 to i32*
  %v2_10d1c = load i32, i32* %v1_10d1c, align 4
  store i32 %v2_10d1c, i32* @r4, align 4
  %v1_10d20 = call i32 @function_108c4(i32 %v0_10d18)
  store i32 0, i32* @r6, align 4
  %v0_10d28 = load i32, i32* @r4, align 4
  %v1_10d28 = load i32, i32* %r5.global-to-local, align 4
  %v2_10d28 = inttoptr i32 %v1_10d28 to i32*
  store i32 %v0_10d28, i32* %v2_10d28, align 4
  br label %dec_label_pc_10db8

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10cf8
  %v1_10d34 = call i32 @function_11370(i32 48)
  store i32 %v1_10d34, i32* @r6, align 4
  %v2_10d38 = icmp eq i32 %v1_10d34, 0
  br i1 %v2_10d38, label %dec_label_pc_10d88, label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10d30
  store i32 0, i32* @r4, align 4
  %v2_10d44 = add i32 %v1_10d34, 16
  %v3_10d44 = inttoptr i32 %v2_10d44 to i32*
  store i32 0, i32* %v3_10d44, align 4
  %v2_10d4c = icmp ugt i32 %tmp, 511
  %v1_10d50 = load i32, i32* @r6, align 4
  %v2_10d50 = add i32 %v1_10d50, 20
  %v3_10d50 = inttoptr i32 %v2_10d50 to i32*
  store i32 %tmp, i32* %v3_10d50, align 4
  br i1 %v2_10d4c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_10d40
  %v2_10d58 = load i32, i32* @r6, align 4
  %v3_10d58 = add i32 %v2_10d58, 20
  %v4_10d58 = inttoptr i32 %v3_10d58 to i32*
  store i32 512, i32* %v4_10d58, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10d40, %bb
  %v0_10d5c = load i32, i32* @r7, align 4
  %v1_10d5c = load i32, i32* @r6, align 4
  %v2_10d5c = inttoptr i32 %v1_10d5c to i32*
  store i32 %v0_10d5c, i32* %v2_10d5c, align 4
  %v0_10d60 = load i32, i32* @r4, align 4
  %v1_10d60 = load i32, i32* @r6, align 4
  %v2_10d60 = add i32 %v1_10d60, 8
  %v3_10d60 = inttoptr i32 %v2_10d60 to i32*
  store i32 %v0_10d60, i32* %v3_10d60, align 4
  %v0_10d64 = load i32, i32* @r4, align 4
  %v1_10d64 = load i32, i32* @r6, align 4
  %v2_10d64 = add i32 %v1_10d64, 4
  %v3_10d64 = inttoptr i32 %v2_10d64 to i32*
  store i32 %v0_10d64, i32* %v3_10d64, align 4
  %v0_10d6c = load i32, i32* @r6, align 4
  %v1_10d6c = add i32 %v0_10d6c, 20
  %v2_10d6c = inttoptr i32 %v1_10d6c to i32*
  %v3_10d6c = load i32, i32* %v2_10d6c, align 4
  %v2_10d70 = call i32 @function_114c4(i32 1, i32 %v3_10d6c)
  %v2_10d74 = icmp eq i32 %v2_10d70, 0
  %v1_10d78 = load i32, i32* @r6, align 4
  %v2_10d78 = add i32 %v1_10d78, 12
  %v3_10d78 = inttoptr i32 %v2_10d78 to i32*
  store i32 %v2_10d70, i32* %v3_10d78, align 4
  br i1 %v2_10d74, label %dec_label_pc_10d80, label %dec_label_pc_10da4

dec_label_pc_10d80:                               ; preds = %.thread
  %v0_10d80 = load i32, i32* @r6, align 4
  store i32 %v0_10d80, i32* @r0, align 4
  %v0_10d84 = call i32 @function_1151c()
  br label %dec_label_pc_10d88

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10d30, %dec_label_pc_10d80
  %v0_10d88 = load i32, i32* @r7, align 4
  %v1_10d8c = call i32 @function_108c4(i32 %v0_10d88)
  %v0_10d90 = call i32 @function_10e98()
  store i32 0, i32* @r6, align 4
  %v2_10d9c = inttoptr i32 %v0_10d90 to i32*
  store i32 12, i32* %v2_10d9c, align 4
  br label %dec_label_pc_10db8

dec_label_pc_10da4:                               ; preds = %.thread
  store i32 69048, i32* @lr, align 4
  %v1_10db4 = call i32 @function_11f04()
  br label %dec_label_pc_10db8

dec_label_pc_10db8:                               ; preds = %.thread1, %dec_label_pc_10d88, %dec_label_pc_10d10, %dec_label_pc_10da4
  %v0_10db8 = load i32, i32* @r6, align 4
  store i32 %v3_10ccc, i32* @r4, align 4
  store i32 %v9_10ccc, i32* @r6, align 4
  store i32 %v12_10ccc, i32* @r7, align 4
  ret i32 %v0_10db8

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_114c4, { 27, 28, 26, 25, 24, 23, 22, 21, 20, 19, 1, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 512, { 0, 4, 1, 5, 6, 7, 2, 8, 3, 9 }
  uselistorder i32 (i32)* @function_108c4, { 18, 17, 16, 30, 23, 29, 28, 27, 26, 25, 24, 22, 21, 20, 19, 6, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10db8, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_10d88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_10dc8(i32* %arg1) local_unnamed_addr {
dec_label_pc_10dc8:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10dc8 = load i32, i32* @r4, align 4
  %v6_10dc8 = load i32, i32* @r5, align 4
  %v9_10dc8 = load i32, i32* @lr, align 4
  %v1_10dcc = add i32 %tmp, 24
  store i32 %v1_10dcc, i32* @r4, align 4
  %v2_10dd0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 73484, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_10dd0, i32* @r0, align 4
  store i32 %v1_10dcc, i32* %r2.global-to-local, align 4
  %v8_10dec = call i32 @function_11f0c(i32 %v2_10dd0, i32 ptrtoint (i32* @global_var_11f04.426 to i32), i32 %v1_10dcc, i32 73484, i32 %v3_10dc8, i32 %v6_10dc8, i32 %v9_10dc8)
  %v0_10df0 = load i32, i32* @r4, align 4
  store i32 %v0_10df0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11f04.426 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10e00.435 to i32), i32* @lr, align 4
  %v1_10dfc = call i32 @function_11f04()
  store i32 %v1_10dfc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10e00

dec_label_pc_10e00:                               ; preds = %dec_label_pc_10e34, %dec_label_pc_10dc8
  %v0_10e00 = load i32, i32* @r5, align 4
  %v1_10e00 = add i32 %v0_10e00, 4
  %v2_10e00 = inttoptr i32 %v1_10e00 to i32*
  %v3_10e00 = load i32, i32* %v2_10e00, align 4
  store i32 %v3_10e00, i32* %r2.global-to-local, align 4
  %v4_10e00 = add i32 %v0_10e00, 8
  %v5_10e00 = inttoptr i32 %v4_10e00 to i32*
  %v6_10e00 = load i32, i32* %v5_10e00, align 4
  store i32 %v6_10e00, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_10e00, %v3_10e00
  br i1 %tmp8, label %dec_label_pc_10e34, label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10e00
  %v1_10e0c = inttoptr i32 %v0_10e00 to i32*
  %v2_10e0c = load i32, i32* %v1_10e0c, align 4
  store i32 %v2_10e0c, i32* @r0, align 4
  %v1_10e10 = add i32 %v0_10e00, 12
  %v2_10e10 = inttoptr i32 %v1_10e10 to i32*
  %v3_10e10 = load i32, i32* %v2_10e10, align 4
  %v1_10e14 = add i32 %v0_10e00, 20
  %v2_10e14 = inttoptr i32 %v1_10e14 to i32*
  %v3_10e14 = load i32, i32* %v2_10e14, align 4
  store i32 %v3_10e14, i32* @r2, align 4
  %v4_10e18 = call i32 @function_12380(i32 %v2_10e0c, i32 %v3_10e10, i32 %v3_10e14, i32 %v6_10e00)
  store i32 %v4_10e18, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_10e18, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_10e28

.thread:                                          ; preds = %dec_label_pc_10e0c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_10e68

dec_label_pc_10e28:                               ; preds = %dec_label_pc_10e0c
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10e2c = load i32, i32* @r5, align 4
  %v2_10e2c = add i32 %v1_10e2c, 4
  %v3_10e2c = inttoptr i32 %v2_10e2c to i32*
  store i32 0, i32* %v3_10e2c, align 4
  %v1_10e30 = load i32, i32* @r5, align 4
  %v2_10e30 = add i32 %v1_10e30, 8
  %v3_10e30 = inttoptr i32 %v2_10e30 to i32*
  store i32 %v4_10e18, i32* %v3_10e30, align 4
  %v0_10e34.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10e34

dec_label_pc_10e34:                               ; preds = %dec_label_pc_10e00, %dec_label_pc_10e28
  %v1_10e4c = phi i32 [ %v0_10e00, %dec_label_pc_10e00 ], [ %v0_10e34.pre, %dec_label_pc_10e28 ]
  %v1_10e34 = add i32 %v1_10e4c, 4
  %v2_10e34 = inttoptr i32 %v1_10e34 to i32*
  %v3_10e34 = load i32, i32* %v2_10e34, align 4
  store i32 %v3_10e34, i32* %r2.global-to-local, align 4
  %v1_10e38 = add i32 %v1_10e4c, 12
  %v2_10e38 = inttoptr i32 %v1_10e38 to i32*
  %v3_10e38 = load i32, i32* %v2_10e38, align 4
  store i32 %v3_10e38, i32* %ip.global-to-local, align 4
  %v2_10e3c = add i32 %v3_10e38, %v3_10e34
  store i32 %v2_10e3c, i32* @r4, align 4
  %v1_10e40 = add i32 %v2_10e3c, 4
  %v2_10e40 = inttoptr i32 %v1_10e40 to i32*
  %v3_10e40 = load i32, i32* %v2_10e40, align 4
  %v1_10e44 = add i32 %v2_10e3c, 8
  %v2_10e44 = inttoptr i32 %v1_10e44 to i8*
  %v3_10e44 = load i8, i8* %v2_10e44, align 1
  %v4_10e44 = zext i8 %v3_10e44 to i32
  store i32 %v4_10e44, i32* %r3.global-to-local, align 4
  %v1_10e48 = add i32 %v2_10e3c, 9
  %v2_10e48 = inttoptr i32 %v1_10e48 to i8*
  %v3_10e48 = load i8, i8* %v2_10e48, align 1
  %v4_10e48 = zext i8 %v3_10e48 to i32
  store i32 %v4_10e48, i32* %r0.global-to-local, align 4
  %v2_10e4c = add i32 %v1_10e4c, 16
  %v3_10e4c = inttoptr i32 %v2_10e4c to i32*
  store i32 %v3_10e40, i32* %v3_10e4c, align 4
  %v0_10e50 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e50 = load i32, i32* %ip.global-to-local, align 4
  %v2_10e50 = add i32 %v1_10e50, %v0_10e50
  %v3_10e50 = inttoptr i32 %v2_10e50 to i32*
  %v4_10e50 = load i32, i32* %v3_10e50, align 4
  %v0_10e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e54 = load i32, i32* %r0.global-to-local, align 4
  %v4_10e54 = mul i32 %v1_10e54, 256
  %v5_10e54 = or i32 %v4_10e54, %v0_10e54
  store i32 %v5_10e54, i32* %r3.global-to-local, align 4
  %v2_10e58 = add i32 %v5_10e54, %v0_10e50
  store i32 %v2_10e58, i32* @r2, align 4
  %v2_10e5c = icmp eq i32 %v4_10e50, 0
  %v1_10e60 = load i32, i32* @r5, align 4
  %v2_10e60 = add i32 %v1_10e60, 4
  %v3_10e60 = inttoptr i32 %v2_10e60 to i32*
  store i32 %v2_10e58, i32* %v3_10e60, align 4
  br i1 %v2_10e5c, label %dec_label_pc_10e00, label %dec_label_pc_10e68

dec_label_pc_10e68:                               ; preds = %dec_label_pc_10e34, %.thread
  store i32 %v2_10dd0, i32* @r0, align 4
  store i32 73484, i32* %r3.global-to-local, align 4
  store i32 69244, i32* @lr, align 4
  %v3_10e78 = load i32, i32* @r2, align 4
  %v8_10e78 = call i32 @function_11f0c(i32 %v2_10dd0, i32 1, i32 %v3_10e78, i32 73484, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_10e7c = load i32, i32* @r4, align 4
  store i32 %v0_10e7c, i32* %r0.global-to-local, align 4
  store i32 %v3_10dc8, i32* @r4, align 4
  store i32 %v6_10dc8, i32* @r5, align 4
  ret i32 %v0_10e7c

; uselistorder directives
  uselistorder i32 %v1_10e4c, { 0, 2, 1 }
  uselistorder i32 %v6_10e00, { 1, 0, 2 }
  uselistorder i32 %v0_10e00, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_10dd0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_10dcc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_10e34, { 1, 0 }
}

define i32 @function_10e98() local_unnamed_addr {
dec_label_pc_10e98:
  ret i32 ptrtoint (i32* @global_var_1bcb0.438 to i32)
}

define i32 @function_10ea4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ea4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_10eb0 = bitcast i32* %stack_var_-20 to %tms*
  %v2_10eb0 = call i32 @function_12710(%tms* %v1_10eb0)
  %v2_10eb8 = load i32, i32* %stack_var_-20, align 4
  %v2_10ebc = add i32 %v2_10eb8, %tmp
  %v2_10ec4 = mul i32 %v2_10ebc, 10000
  %v1_10ec8 = and i32 %v2_10ec4, 2147483632
  ret i32 %v1_10ec8

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_10ed4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ed4:
  %v0_10ed4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10ed4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10ed4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10ed4, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10ee0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ee0:
  %v0_10ee0 = call i32 @function_12b20()
  ret i32 %v0_10ee0
}

define i32 @function_10ef0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ef0:
  %v0_10ef0 = call i32 @function_12b20()
  ret i32 %v0_10ef0

; uselistorder directives
  uselistorder i32 ()* @function_12b20, { 1, 0 }
}

define i32 @function_10f00(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f00:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_10f04 = load i32, i32* @r2, align 4
  %v8_10f04 = icmp eq i32 %v0_10f04, 8
  store i1 %v8_10f04, i1* %cpsr_z.global-to-local, align 1
  %v5_10f08 = icmp slt i32 %v0_10f04, 8
  br i1 %v5_10f08, label %dec_label_pc_10f68, label %dec_label_pc_10f0c

dec_label_pc_10f0c:                               ; preds = %dec_label_pc_10f00
  %v4_10f0c = mul i32 %arg2, 256
  %v5_10f0c = or i32 %v4_10f0c, %arg2
  %v4_10f10 = mul i32 %v5_10f0c, 65536
  %v5_10f10 = or i32 %v4_10f10, %v5_10f0c
  store i32 %v5_10f10, i32* %r1.global-to-local, align 4
  %v1_10f1457 = urem i32 %tmp, 4
  %v2_10f1458 = icmp eq i32 %v1_10f1457, 0
  store i1 %v2_10f1458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_10f1458, label %dec_label_pc_10f24, label %bb

bb:                                               ; preds = %dec_label_pc_10f0c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_10f0c ]
  %v3_10f1859 = phi i32 [ %v6_10f18, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_10f0c ]
  %v4_10f18 = inttoptr i32 %v3_10f1859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10f18, align 1
  %v5_10f18 = load i32, i32* %r3.global-to-local, align 4
  %v6_10f18 = add i32 %v5_10f18, 1
  store i32 %v6_10f18, i32* %r3.global-to-local, align 4
  %v0_10f1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10f28.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_10f1c.pr, label %dec_label_pc_10f24, label %.thread

.thread:                                          ; preds = %bb
  %v2_10f1c = add i32 %v0_10f28.pr.pre, -1
  store i32 %v2_10f1c, i32* @r2, align 4
  %v1_10f14 = urem i32 %v6_10f18, 4
  %v2_10f14 = icmp eq i32 %v1_10f14, 0
  store i1 %v2_10f14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f14, label %dec_label_pc_10f24, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10f18.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_10f18.pre to i8
  br label %bb

dec_label_pc_10f24:                               ; preds = %.thread, %bb, %dec_label_pc_10f0c
  %v0_10f3028 = phi i32 [ %tmp, %dec_label_pc_10f0c ], [ %v6_10f18, %bb ], [ %v6_10f18, %.thread ]
  %v0_10f28.pr = phi i32 [ %v0_10f04, %dec_label_pc_10f0c ], [ %v0_10f28.pr.pre, %bb ], [ %v2_10f1c, %.thread ]
  %v0_10f24 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10f24, i32* %ip.global-to-local, align 4
  %v8_10f2810 = icmp eq i32 %v0_10f28.pr, 8
  store i1 %v8_10f2810, i1* %cpsr_z.global-to-local, align 1
  %v5_10f2c11 = icmp slt i32 %v0_10f28.pr, 8
  br i1 %v5_10f2c11, label %dec_label_pc_10f68, label %dec_label_pc_10f30.preheader

dec_label_pc_10f30.preheader:                     ; preds = %dec_label_pc_10f24
  %v1_10f3046 = inttoptr i32 %v0_10f3028 to i32*
  store i32 %v0_10f24, i32* %v1_10f3046, align 4
  %v3_10f3047 = add i32 %v0_10f3028, 4
  %v4_10f3048 = inttoptr i32 %v3_10f3047 to i32*
  %v5_10f3049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_10f3049, i32* %v4_10f3048, align 4
  %v6_10f3050 = add i32 %v0_10f3028, 8
  store i32 %v6_10f3050, i32* %r3.global-to-local, align 4
  %v0_10f3451 = load i32, i32* @r2, align 4
  %v1_10f3452 = add i32 %v0_10f3451, -8
  store i32 %v1_10f3452, i32* %r2.global-to-local, align 4
  %v5_10f3c53 = icmp slt i32 %v1_10f3452, 8
  br i1 %v5_10f3c53, label %dec_label_pc_10f30.dec_label_pc_10f68.loopexit_crit_edge, label %dec_label_pc_10f40

dec_label_pc_10f40:                               ; preds = %dec_label_pc_10f30.preheader, %dec_label_pc_10f28.dec_label_pc_10f30_crit_edge
  %v6_10f3055 = phi i32 [ %v6_10f30, %dec_label_pc_10f28.dec_label_pc_10f30_crit_edge ], [ %v6_10f3050, %dec_label_pc_10f30.preheader ]
  %v0_10f3054 = phi i32 [ %v12_10f5c, %dec_label_pc_10f28.dec_label_pc_10f30_crit_edge ], [ %v0_10f3028, %dec_label_pc_10f30.preheader ]
  %v1_10f40 = inttoptr i32 %v6_10f3055 to i32*
  %v2_10f40 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10f40, i32* %v1_10f40, align 4
  %v3_10f40 = add i32 %v0_10f3054, 12
  %v4_10f40 = inttoptr i32 %v3_10f40 to i32*
  %v5_10f40 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_10f40, i32* %v4_10f40, align 4
  %v6_10f40 = add i32 %v0_10f3054, 16
  store i32 %v6_10f40, i32* %r3.global-to-local, align 4
  %v0_10f44 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f44 = add i32 %v0_10f44, -8
  store i32 %v1_10f44, i32* %r2.global-to-local, align 4
  %v5_10f4c = icmp slt i32 %v1_10f44, 8
  br i1 %v5_10f4c, label %dec_label_pc_10f40.dec_label_pc_10f68.loopexit_crit_edge, label %dec_label_pc_10f50

dec_label_pc_10f50:                               ; preds = %dec_label_pc_10f40
  %v1_10f50 = inttoptr i32 %v6_10f40 to i32*
  %v2_10f50 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10f50, i32* %v1_10f50, align 4
  %v3_10f50 = add i32 %v0_10f3054, 20
  %v4_10f50 = inttoptr i32 %v3_10f50 to i32*
  %v5_10f50 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_10f50, i32* %v4_10f50, align 4
  %v6_10f50 = add i32 %v0_10f3054, 24
  store i32 %v6_10f50, i32* %r3.global-to-local, align 4
  %v0_10f54 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f54 = add i32 %v0_10f54, -8
  store i32 %v1_10f54, i32* %r2.global-to-local, align 4
  %v5_10f5c = icmp slt i32 %v1_10f54, 8
  br i1 %v5_10f5c, label %dec_label_pc_10f50.dec_label_pc_10f68.loopexit_crit_edge, label %dec_label_pc_10f28

dec_label_pc_10f28:                               ; preds = %dec_label_pc_10f50
  %v7_10f5c = inttoptr i32 %v6_10f50 to i32*
  %v8_10f5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_10f5c, i32* %v7_10f5c, align 4
  %v9_10f5c = add i32 %v0_10f3054, 28
  %v10_10f5c = inttoptr i32 %v9_10f5c to i32*
  %v11_10f5c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_10f5c, i32* %v10_10f5c, align 4
  %v12_10f5c = add i32 %v0_10f3054, 32
  store i32 %v12_10f5c, i32* %r3.global-to-local, align 4
  %v6_10f60 = load i32, i32* %r2.global-to-local, align 4
  %v7_10f60 = add i32 %v6_10f60, -8
  store i32 %v7_10f60, i32* %r2.global-to-local, align 4
  %v5_10f2c = icmp slt i32 %v7_10f60, 8
  br i1 %v5_10f2c, label %dec_label_pc_10f28.dec_label_pc_10f68.loopexit_crit_edge, label %dec_label_pc_10f28.dec_label_pc_10f30_crit_edge

dec_label_pc_10f28.dec_label_pc_10f30_crit_edge:  ; preds = %dec_label_pc_10f28
  %v2_10f30.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10f30 = inttoptr i32 %v12_10f5c to i32*
  store i32 %v2_10f30.pre, i32* %v1_10f30, align 4
  %v3_10f30 = add i32 %v0_10f3054, 36
  %v4_10f30 = inttoptr i32 %v3_10f30 to i32*
  %v5_10f30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_10f30, i32* %v4_10f30, align 4
  %v6_10f30 = add i32 %v0_10f3054, 40
  store i32 %v6_10f30, i32* %r3.global-to-local, align 4
  %v0_10f34 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f34 = add i32 %v0_10f34, -8
  store i32 %v1_10f34, i32* %r2.global-to-local, align 4
  %v5_10f3c = icmp slt i32 %v1_10f34, 8
  br i1 %v5_10f3c, label %dec_label_pc_10f30.dec_label_pc_10f68.loopexit_crit_edge, label %dec_label_pc_10f40

dec_label_pc_10f30.dec_label_pc_10f68.loopexit_crit_edge: ; preds = %dec_label_pc_10f28.dec_label_pc_10f30_crit_edge, %dec_label_pc_10f30.preheader
  %v1_10f34.lcssa = phi i32 [ %v1_10f3452, %dec_label_pc_10f30.preheader ], [ %v1_10f34, %dec_label_pc_10f28.dec_label_pc_10f30_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f68

dec_label_pc_10f28.dec_label_pc_10f68.loopexit_crit_edge: ; preds = %dec_label_pc_10f28
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f68

dec_label_pc_10f40.dec_label_pc_10f68.loopexit_crit_edge: ; preds = %dec_label_pc_10f40
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f68

dec_label_pc_10f50.dec_label_pc_10f68.loopexit_crit_edge: ; preds = %dec_label_pc_10f50
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f68

dec_label_pc_10f68:                               ; preds = %dec_label_pc_10f24, %dec_label_pc_10f30.dec_label_pc_10f68.loopexit_crit_edge, %dec_label_pc_10f28.dec_label_pc_10f68.loopexit_crit_edge, %dec_label_pc_10f40.dec_label_pc_10f68.loopexit_crit_edge, %dec_label_pc_10f50.dec_label_pc_10f68.loopexit_crit_edge, %dec_label_pc_10f00
  %v0_10f70 = phi i32 [ %v0_10f04, %dec_label_pc_10f00 ], [ %v1_10f54, %dec_label_pc_10f50.dec_label_pc_10f68.loopexit_crit_edge ], [ %v1_10f44, %dec_label_pc_10f40.dec_label_pc_10f68.loopexit_crit_edge ], [ %v7_10f60, %dec_label_pc_10f28.dec_label_pc_10f68.loopexit_crit_edge ], [ %v1_10f34.lcssa, %dec_label_pc_10f30.dec_label_pc_10f68.loopexit_crit_edge ], [ %v0_10f28.pr, %dec_label_pc_10f24 ]
  %v2_10f68 = icmp eq i32 %v0_10f70, 0
  store i1 %v2_10f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f68, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_10f68
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_10f68
  %v1_10f70 = sub i32 7, %v0_10f70
  store i32 %v1_10f70, i32* %r2.global-to-local, align 4
  %v3_10f74 = mul i32 %v1_10f70, 4
  %v4_10f74 = add i32 %v3_10f74, ptrtoint (i32* @global_var_10f7c.440 to i32)
  call void @__pseudo_branch(i32 %v4_10f74)
  %v0_10f7c = load i32, i32* %r1.global-to-local, align 4
  %v1_10f7c = trunc i32 %v0_10f7c to i8
  %v2_10f7c = load i32, i32* %r3.global-to-local, align 4
  %v3_10f7c = inttoptr i32 %v2_10f7c to i8*
  store i8 %v1_10f7c, i8* %v3_10f7c, align 1
  %v4_10f7c = load i32, i32* %r3.global-to-local, align 4
  %v5_10f7c = add i32 %v4_10f7c, 1
  store i32 %v5_10f7c, i32* %r3.global-to-local, align 4
  %v0_10f80 = load i32, i32* %r1.global-to-local, align 4
  %v1_10f80 = trunc i32 %v0_10f80 to i8
  %v3_10f80 = inttoptr i32 %v5_10f7c to i8*
  store i8 %v1_10f80, i8* %v3_10f80, align 1
  %v4_10f80 = load i32, i32* %r3.global-to-local, align 4
  %v5_10f80 = add i32 %v4_10f80, 1
  store i32 %v5_10f80, i32* %r3.global-to-local, align 4
  %v0_10f84 = load i32, i32* %r1.global-to-local, align 4
  %v1_10f84 = trunc i32 %v0_10f84 to i8
  %v3_10f84 = inttoptr i32 %v5_10f80 to i8*
  store i8 %v1_10f84, i8* %v3_10f84, align 1
  %v4_10f84 = load i32, i32* %r3.global-to-local, align 4
  %v5_10f84 = add i32 %v4_10f84, 1
  store i32 %v5_10f84, i32* %r3.global-to-local, align 4
  %v0_10f88 = load i32, i32* %r1.global-to-local, align 4
  %v1_10f88 = trunc i32 %v0_10f88 to i8
  %v3_10f88 = inttoptr i32 %v5_10f84 to i8*
  store i8 %v1_10f88, i8* %v3_10f88, align 1
  %v4_10f88 = load i32, i32* %r3.global-to-local, align 4
  %v5_10f88 = add i32 %v4_10f88, 1
  store i32 %v5_10f88, i32* %r3.global-to-local, align 4
  %v0_10f8c = load i32, i32* %r1.global-to-local, align 4
  %v1_10f8c = trunc i32 %v0_10f8c to i8
  %v3_10f8c = inttoptr i32 %v5_10f88 to i8*
  store i8 %v1_10f8c, i8* %v3_10f8c, align 1
  %v4_10f8c = load i32, i32* %r3.global-to-local, align 4
  %v5_10f8c = add i32 %v4_10f8c, 1
  store i32 %v5_10f8c, i32* %r3.global-to-local, align 4
  %v0_10f90 = load i32, i32* %r1.global-to-local, align 4
  %v1_10f90 = trunc i32 %v0_10f90 to i8
  %v3_10f90 = inttoptr i32 %v5_10f8c to i8*
  store i8 %v1_10f90, i8* %v3_10f90, align 1
  %v4_10f90 = load i32, i32* %r3.global-to-local, align 4
  %v5_10f90 = add i32 %v4_10f90, 1
  store i32 %v5_10f90, i32* %r3.global-to-local, align 4
  %v0_10f94 = load i32, i32* %r1.global-to-local, align 4
  %v1_10f94 = trunc i32 %v0_10f94 to i8
  %v3_10f94 = inttoptr i32 %v5_10f90 to i8*
  store i8 %v1_10f94, i8* %v3_10f94, align 1
  %v4_10f94 = load i32, i32* %r3.global-to-local, align 4
  %v5_10f94 = add i32 %v4_10f94, 1
  store i32 %v5_10f94, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_10f30, { 1, 0 }
  uselistorder i32 %v12_10f5c, { 1, 2, 0 }
  uselistorder i32 %v0_10f3054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_10f28.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10f18, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_10f0c, { 1, 0 }
  uselistorder i32 %v0_10f04, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 3, 0, 4, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10f68, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_10f40, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_10fa0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10fa0:
  %stack_var_-8 = alloca i32, align 4
  %v2_10fa4 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_10fa4, i32* @r1, align 4
  %v0_10fac = call i32 @function_12fb0()
  %v2_10fb0 = icmp eq i32 %v0_10fac, 0
  br i1 %v2_10fb0, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_10fa0
  %v3_10fb8 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_10fa0, %bb
  %v5_10fc0 = phi i32 [ -1, %dec_label_pc_10fa0 ], [ %v3_10fb8, %bb ]
  ret i32 %v5_10fc0

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_10fc4(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10fc4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10fc4 = load i32, i32* @r4, align 4
  store i32 %v3_10fc4, i32* %stack_var_-8, align 4
  %v5_10fc8 = inttoptr i32 %arg3 to i32*
  %v6_10fc8 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_10fc8)
  store i32 %v6_10fc8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_10fc8, -4095
  br i1 %tmp, label %dec_label_pc_10fe8, label %dec_label_pc_10fd8

dec_label_pc_10fd8:                               ; preds = %dec_label_pc_10fc4
  %v0_10fd8 = call i32 @function_10e98()
  %v0_10fdc = load i32, i32* %r4.global-to-local, align 4
  %v1_10fdc = sub i32 0, %v0_10fdc
  %v2_10fe0 = inttoptr i32 %v0_10fd8 to i32*
  store i32 %v1_10fdc, i32* %v2_10fe0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_10fc4, %dec_label_pc_10fd8
  %v0_10fe8 = phi i32 [ %v6_10fc8, %dec_label_pc_10fc4 ], [ -1, %dec_label_pc_10fd8 ]
  %v2_10fec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10fec, i32* %r4.global-to-local, align 4
  ret i32 %v0_10fe8

; uselistorder directives
  uselistorder i32 %v6_10fc8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10fe8, { 1, 0 }
}

define i32 @function_10ff0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ff0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ff0 = load i32, i32* @r4, align 4
  store i32 %v3_10ff0, i32* %stack_var_-8, align 4
  %v5_10ff4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_10ff4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10ff4, -4095
  br i1 %tmp, label %dec_label_pc_11014, label %dec_label_pc_11004

dec_label_pc_11004:                               ; preds = %dec_label_pc_10ff0
  %v0_11004 = call i32 @function_10e98()
  %v0_11008 = load i32, i32* %r4.global-to-local, align 4
  %v1_11008 = sub i32 0, %v0_11008
  %v2_1100c = inttoptr i32 %v0_11004 to i32*
  store i32 %v1_11008, i32* %v2_1100c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11014

dec_label_pc_11014:                               ; preds = %dec_label_pc_10ff0, %dec_label_pc_11004
  %v0_11014 = phi i32 [ %v5_10ff4, %dec_label_pc_10ff0 ], [ -1, %dec_label_pc_11004 ]
  %v2_11018 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11018, i32* @r4, align 4
  ret i32 %v0_11014

; uselistorder directives
  uselistorder i32 %v5_10ff4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11014, { 1, 0 }
}

define i32 @function_1101c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1101c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1101c = load i32, i32* @r4, align 4
  store i32 %v3_1101c, i32* %stack_var_-8, align 4
  %v5_11020 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_11020, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11020, -4095
  br i1 %tmp, label %dec_label_pc_11040, label %dec_label_pc_11030

dec_label_pc_11030:                               ; preds = %dec_label_pc_1101c
  %v0_11030 = call i32 @function_10e98()
  %v0_11034 = load i32, i32* %r4.global-to-local, align 4
  %v1_11034 = sub i32 0, %v0_11034
  %v2_11038 = inttoptr i32 %v0_11030 to i32*
  store i32 %v1_11034, i32* %v2_11038, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %dec_label_pc_1101c, %dec_label_pc_11030
  %v0_11040 = phi i32 [ %v5_11020, %dec_label_pc_1101c ], [ -1, %dec_label_pc_11030 ]
  %v2_11044 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11044, i32* @r4, align 4
  ret i32 %v0_11040

; uselistorder directives
  uselistorder i32 %v5_11020, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11040, { 1, 0 }
}

define i32 @function_11048(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11048:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11048 = load i32, i32* @r4, align 4
  store i32 %v3_11048, i32* %stack_var_-8, align 4
  %v5_1104c = inttoptr i32 %arg3 to i32*
  %v6_1104c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_1104c)
  store i32 %v6_1104c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_1104c, -4095
  br i1 %tmp, label %dec_label_pc_1106c, label %dec_label_pc_1105c

dec_label_pc_1105c:                               ; preds = %dec_label_pc_11048
  %v0_1105c = call i32 @function_10e98()
  %v0_11060 = load i32, i32* %r4.global-to-local, align 4
  %v1_11060 = sub i32 0, %v0_11060
  %v2_11064 = inttoptr i32 %v0_1105c to i32*
  store i32 %v1_11060, i32* %v2_11064, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1106c

dec_label_pc_1106c:                               ; preds = %dec_label_pc_11048, %dec_label_pc_1105c
  %v0_1106c = phi i32 [ %v6_1104c, %dec_label_pc_11048 ], [ -1, %dec_label_pc_1105c ]
  %v2_11070 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11070, i32* @r4, align 4
  ret i32 %v0_1106c

; uselistorder directives
  uselistorder i32 %v6_1104c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1106c, { 1, 0 }
}

define i32 @function_11074(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11074:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11074 = load i32, i32* @r4, align 4
  store i32 %v3_11074, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_1107c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_1107c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1107c, -4095
  br i1 %tmp, label %dec_label_pc_1109c, label %dec_label_pc_1108c

dec_label_pc_1108c:                               ; preds = %dec_label_pc_11074
  %v0_1108c = call i32 @function_10e98()
  %v0_11090 = load i32, i32* %r4.global-to-local, align 4
  %v1_11090 = sub i32 0, %v0_11090
  %v2_11094 = inttoptr i32 %v0_1108c to i32*
  store i32 %v1_11090, i32* %v2_11094, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1109c

dec_label_pc_1109c:                               ; preds = %dec_label_pc_11074, %dec_label_pc_1108c
  %v0_1109c = phi i32 [ %v5_1107c, %dec_label_pc_11074 ], [ -1, %dec_label_pc_1108c ]
  %v2_110a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_110a0, i32* @r4, align 4
  ret i32 %v0_1109c

; uselistorder directives
  uselistorder i32 %v5_1107c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1109c, { 1, 0 }
}

define i32 @function_110a4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_110a4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110a4 = load i32, i32* @r4, align 4
  store i32 %v3_110a4, i32* %stack_var_-8, align 4
  %v2_110a8 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_110a8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_110a8, -4095
  br i1 %tmp, label %dec_label_pc_110c8, label %dec_label_pc_110b8

dec_label_pc_110b8:                               ; preds = %dec_label_pc_110a4
  %v0_110b8 = call i32 @function_10e98()
  %v0_110bc = load i32, i32* %r4.global-to-local, align 4
  %v1_110bc = sub i32 0, %v0_110bc
  %v2_110c0 = inttoptr i32 %v0_110b8 to i32*
  store i32 %v1_110bc, i32* %v2_110c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_110c8

dec_label_pc_110c8:                               ; preds = %dec_label_pc_110a4, %dec_label_pc_110b8
  %v0_110c8 = phi i32 [ %v2_110a8, %dec_label_pc_110a4 ], [ -1, %dec_label_pc_110b8 ]
  %v2_110cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_110cc, i32* @r4, align 4
  ret i32 %v0_110c8

; uselistorder directives
  uselistorder i32 %v2_110a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_110c8, { 1, 0 }
}

define i32 @function_110d0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_110d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110d0 = load i32, i32* @r4, align 4
  store i32 %v3_110d0, i32* %stack_var_-8, align 4
  %v5_110d4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_110d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_110d4, -4095
  br i1 %tmp, label %dec_label_pc_110f4, label %dec_label_pc_110e4

dec_label_pc_110e4:                               ; preds = %dec_label_pc_110d0
  %v0_110e4 = call i32 @function_10e98()
  %v0_110e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_110e8 = sub i32 0, %v0_110e8
  %v2_110ec = inttoptr i32 %v0_110e4 to i32*
  store i32 %v1_110e8, i32* %v2_110ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_110f4

dec_label_pc_110f4:                               ; preds = %dec_label_pc_110d0, %dec_label_pc_110e4
  %v0_110f4 = phi i32 [ %v5_110d4, %dec_label_pc_110d0 ], [ -1, %dec_label_pc_110e4 ]
  %v2_110f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_110f8, i32* @r4, align 4
  ret i32 %v0_110f4

; uselistorder directives
  uselistorder i32 %v5_110d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_110f4, { 1, 0 }
}

define i32 @function_110fc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_110fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_110fc = load i32, i32* @r4, align 4
  store i32 %v3_110fc, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11108 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_11108, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11108, -4095
  br i1 %tmp, label %dec_label_pc_11128, label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %dec_label_pc_110fc
  %v0_11118 = call i32 @function_10e98()
  %v0_1111c = load i32, i32* %r4.global-to-local, align 4
  %v1_1111c = sub i32 0, %v0_1111c
  %v2_11120 = inttoptr i32 %v0_11118 to i32*
  store i32 %v1_1111c, i32* %v2_11120, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_110fc, %dec_label_pc_11118
  %v0_11128 = phi i32 [ %v5_11108, %dec_label_pc_110fc ], [ -1, %dec_label_pc_11118 ]
  %v2_1112c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1112c, i32* @r4, align 4
  ret i32 %v0_11128

; uselistorder directives
  uselistorder i32 %v5_11108, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11128, { 1, 0 }
}

define i32 @function_11130(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11130:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11130 = load i32, i32* @r4, align 4
  store i32 %v3_11130, i32* %stack_var_-8, align 4
  %v5_11134 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11134, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11134, -4095
  br i1 %tmp, label %dec_label_pc_11154, label %dec_label_pc_11144

dec_label_pc_11144:                               ; preds = %dec_label_pc_11130
  %v0_11144 = call i32 @function_10e98()
  %v0_11148 = load i32, i32* %r4.global-to-local, align 4
  %v1_11148 = sub i32 0, %v0_11148
  %v2_1114c = inttoptr i32 %v0_11144 to i32*
  store i32 %v1_11148, i32* %v2_1114c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11154

dec_label_pc_11154:                               ; preds = %dec_label_pc_11130, %dec_label_pc_11144
  %v0_11154 = phi i32 [ %v5_11134, %dec_label_pc_11130 ], [ -1, %dec_label_pc_11144 ]
  %v2_11158 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11158, i32* @r4, align 4
  ret i32 %v0_11154

; uselistorder directives
  uselistorder i32 %v5_11134, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11154, { 1, 0 }
}

define i32 @function_1115c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1115c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11168 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_11168, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11168, -4095
  br i1 %tmp, label %dec_label_pc_11188, label %dec_label_pc_11178

dec_label_pc_11178:                               ; preds = %dec_label_pc_1115c
  %v0_11178 = call i32 @function_10e98()
  %v0_1117c = load i32, i32* %r4.global-to-local, align 4
  %v1_1117c = sub i32 0, %v0_1117c
  %v2_11180 = inttoptr i32 %v0_11178 to i32*
  store i32 %v1_1117c, i32* %v2_11180, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11188

dec_label_pc_11188:                               ; preds = %dec_label_pc_1115c, %dec_label_pc_11178
  %v0_11188 = phi i32 [ %v5_11168, %dec_label_pc_1115c ], [ -1, %dec_label_pc_11178 ]
  ret i32 %v0_11188

; uselistorder directives
  uselistorder i32 %v5_11168, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11188, { 1, 0 }
}

define i32 @function_11190(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11190:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11190 = load i32, i32* @r4, align 4
  store i32 %v3_11190, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11198 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_11198, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11198, -4095
  br i1 %tmp, label %dec_label_pc_111b8, label %dec_label_pc_111a8

dec_label_pc_111a8:                               ; preds = %dec_label_pc_11190
  %v0_111a8 = call i32 @function_10e98()
  %v0_111ac = load i32, i32* %r4.global-to-local, align 4
  %v1_111ac = sub i32 0, %v0_111ac
  %v2_111b0 = inttoptr i32 %v0_111a8 to i32*
  store i32 %v1_111ac, i32* %v2_111b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_111b8

dec_label_pc_111b8:                               ; preds = %dec_label_pc_11190, %dec_label_pc_111a8
  %v0_111b8 = phi i32 [ %v5_11198, %dec_label_pc_11190 ], [ -1, %dec_label_pc_111a8 ]
  %v2_111bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111bc, i32* @r4, align 4
  ret i32 %v0_111b8

; uselistorder directives
  uselistorder i32 %v5_11198, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111b8, { 1, 0 }
}

define i32 @function_111c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111c0 = load i32, i32* @r4, align 4
  store i32 %v3_111c0, i32* %stack_var_-8, align 4
  %v3_111c4 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_111c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_111c4, -4095
  br i1 %tmp, label %dec_label_pc_111e4, label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_111c0
  %v0_111d4 = call i32 @function_10e98()
  %v0_111d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_111d8 = sub i32 0, %v0_111d8
  %v2_111dc = inttoptr i32 %v0_111d4 to i32*
  store i32 %v1_111d8, i32* %v2_111dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_111e4

dec_label_pc_111e4:                               ; preds = %dec_label_pc_111c0, %dec_label_pc_111d4
  %v0_111e4 = phi i32 [ %v3_111c4, %dec_label_pc_111c0 ], [ -1, %dec_label_pc_111d4 ]
  %v2_111e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111e8, i32* @r4, align 4
  ret i32 %v0_111e4

; uselistorder directives
  uselistorder i32 %v3_111c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111e4, { 1, 0 }
}

define i32 @function_111ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_111ec:
  %v3_111ec = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_111f4 = call i32 @function_1091c()
  %v0_111f8 = load i32, i32* @r4, align 4
  store i32 %v3_111ec, i32* @r4, align 4
  %v2_11200 = call i32 @function_109c4(i32 %v0_111f4, i32 %v0_111f8)
  ret i32 %v2_11200

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_109c4, { 5, 4, 3, 0, 2, 1 }
  uselistorder i32 ()* @function_1091c, { 0, 3, 2, 1 }
}

define i32 @function_11204(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11204:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_11220, label %dec_label_pc_11210

dec_label_pc_11210:                               ; preds = %dec_label_pc_11204
  %v8_11214 = icmp sgt i32 %arg1, 64
  br i1 %v8_11214, label %dec_label_pc_11220, label %dec_label_pc_11218

dec_label_pc_11218:                               ; preds = %dec_label_pc_11210
  %v0_1121c = call i32 @function_11328()
  br label %dec_label_pc_11220

dec_label_pc_11220:                               ; preds = %dec_label_pc_11210, %dec_label_pc_11204, %dec_label_pc_11218
  %v0_11220 = call i32 @function_10e98()
  %v2_11228 = inttoptr i32 %v0_11220 to i32*
  store i32 22, i32* %v2_11228, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11220, { 2, 0, 1 }
}

define i32 @function_11234(i32 %arg1) local_unnamed_addr {
dec_label_pc_11234:
  store i32 128, i32* @r2, align 4
  %v0_11240 = load i32, i32* @r0, align 4
  %v2_11240 = inttoptr i32 %v0_11240 to i8*
  %v3_11240 = call i32 @function_10f00(i8* %v2_11240, i32 0)
  ret i32 0
}

define i32 @function_1124c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1124c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1124c = load i32, i32* @r4, align 4
  store i32 %v3_1124c, i32* %stack_var_-12, align 4
  %v6_1124c = load i32, i32* @r5, align 4
  %v10_1124c = ptrtoint i32* %stack_var_-12 to i32
  %v7_11250 = icmp eq i32 %arg2, -1
  %v0_1125c.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_11250, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1124c
  br label %dec_label_pc_11274

bb:                                               ; preds = %dec_label_pc_1124c
  %v2_11258 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_1125c.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_1125c.pre, 1
  br i1 %tmp19, label %dec_label_pc_11274, label %dec_label_pc_11264

dec_label_pc_11264:                               ; preds = %bb
  %v7_11268 = icmp sgt i32 %v0_1125c.pre, 64
  br i1 %v7_11268, label %dec_label_pc_11274, label %bb20

bb20:                                             ; preds = %dec_label_pc_11264
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1129824 = add i32 %v10_1124c, 124
  br label %dec_label_pc_11288

dec_label_pc_11274:                               ; preds = %.thread, %dec_label_pc_11264, %bb
  %v0_11274 = call i32 @function_10e98()
  store i32 %v0_11274, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_11280 = inttoptr i32 %v0_11274 to i32*
  store i32 22, i32* %v2_11280, align 4
  %v0_112f4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_112f4

dec_label_pc_11288:                               ; preds = %bb20, %dec_label_pc_11288
  %v5_1129825 = phi i32 [ %v5_1129824, %bb20 ], [ %v5_11298, %dec_label_pc_11288 ]
  %v2_1128c = add i32 %v5_1129825, -136
  %v3_1128c = inttoptr i32 %v2_1128c to i32*
  store i32 0, i32* %v3_1128c, align 4
  %v0_11290.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_11290 = add i32 %v0_11290.pre, -1
  store i32 %v1_11290, i32* %r0.global-to-local, align 4
  %v6_11290 = icmp slt i32 %v1_11290, 0
  %v4_11298 = mul i32 %v1_11290, 4
  %v5_11298 = add i32 %v4_11298, %v10_1124c
  br i1 %v6_11290, label %dec_label_pc_112a0, label %dec_label_pc_11288

dec_label_pc_112a0:                               ; preds = %dec_label_pc_11288
  %v2_112a0 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_112a0, i32* @r5, align 4
  %v2_112a4 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_112a4, i32* @r0, align 4
  %v0_112a8 = load i32, i32* @r4, align 4
  store i32 %v0_112a8, i32* @r1, align 4
  %v0_112ac = call i32 @function_11328()
  store i32 %v0_112ac, i32* %r0.global-to-local, align 4
  %v1_112b0 = icmp slt i32 %v0_112ac, 0
  br i1 %v1_112b0, label %dec_label_pc_112f0, label %dec_label_pc_112b8

dec_label_pc_112b8:                               ; preds = %dec_label_pc_112a0
  %v0_112b8 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1be78.442 to i32), i32* %r0.global-to-local, align 4
  %v2_112c0 = call i32 @function_11304(i32 ptrtoint (i32* @global_var_1be78.442 to i32), i32 %v0_112b8)
  %v0_112d8 = load i32, i32* @r4, align 4
  store i32 %v0_112d8, i32* %r0.global-to-local, align 4
  %v4_112e0 = call i32 @function_121f0(i32 %v0_112d8, i32* nonnull %stack_var_-152, i32 %v2_11258)
  store i32 %v4_112e0, i32* %r0.global-to-local, align 4
  %v1_112e4 = icmp slt i32 %v4_112e0, 0
  br i1 %v1_112e4, label %dec_label_pc_112f0, label %bb23

bb23:                                             ; preds = %dec_label_pc_112b8
  %v5_112e8 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_112e8, i32* @r2, align 4
  br label %dec_label_pc_112f4

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112b8, %dec_label_pc_112a0
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_112f4

dec_label_pc_112f4:                               ; preds = %bb23, %dec_label_pc_11274, %dec_label_pc_112f0
  %v0_112f4 = phi i32 [ %v5_112e8, %bb23 ], [ %v0_112f4.pre, %dec_label_pc_11274 ], [ -1, %dec_label_pc_112f0 ]
  store i32 %v0_112f4, i32* %r0.global-to-local, align 4
  %v2_112fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_112fc, i32* @r4, align 4
  store i32 %v6_1124c, i32* @r5, align 4
  ret i32 %v0_112f4

; uselistorder directives
  uselistorder i32 %v0_112f4, { 1, 0 }
  uselistorder i32 %v1_11290, { 0, 2, 1 }
  uselistorder i32 %v0_1125c.pre, { 1, 0, 2 }
  uselistorder i32 %v10_1124c, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_112f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11288, { 1, 0 }
  uselistorder label %dec_label_pc_11274, { 1, 2, 0 }
}

define i32 @function_11304(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11304:
  %v1_11304 = add i32 %arg2, -1
  %v3_11308 = udiv i32 %v1_11304, 32
  %v4_1130c = mul nuw nsw i32 %v3_11308, 4
  %v5_1130c = add i32 %v4_1130c, %arg1
  %v6_1130c = inttoptr i32 %v5_1130c to i32*
  %v7_1130c = load i32, i32* %v6_1130c, align 4
  %v1_11310 = urem i32 %v1_11304, 32
  %v7_11318 = shl i32 1, %v1_11310
  %v8_11318 = and i32 %v7_1130c, %v7_11318
  %v10_11318 = icmp ne i32 %v8_11318, 0
  %. = zext i1 %v10_11318 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11304, { 1, 0 }
}

define i32 @function_11328() local_unnamed_addr {
dec_label_pc_11328:
  %v0_11328 = load i32, i32* @r1, align 4
  %v1_11328 = add i32 %v0_11328, -1
  %v3_1132c = udiv i32 %v1_11328, 32
  store i32 %v3_1132c, i32* @ip, align 4
  %v0_11330 = load i32, i32* @r0, align 4
  %v4_11330 = mul nuw nsw i32 %v3_1132c, 4
  %v5_11330 = add i32 %v0_11330, %v4_11330
  %v6_11330 = inttoptr i32 %v5_11330 to i32*
  %v7_11330 = load i32, i32* %v6_11330, align 4
  %v1_11334 = urem i32 %v1_11328, 32
  %v7_1133c = shl i32 1, %v1_11334
  %v8_1133c = or i32 %v7_11330, %v7_1133c
  store i32 %v8_1133c, i32* %v6_11330, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_1132c, { 1, 0 }
  uselistorder i32 %v1_11328, { 1, 0 }
}

define i32 @function_1134c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1134c:
  %v1_1134c = add i32 %arg2, -1
  %v3_11350 = udiv i32 %v1_1134c, 32
  %v4_11354 = mul nuw nsw i32 %v3_11350, 4
  %v5_11354 = add i32 %v4_11354, %arg1
  %v6_11354 = inttoptr i32 %v5_11354 to i32*
  %v7_11354 = load i32, i32* %v6_11354, align 4
  %v1_11358 = urem i32 %v1_1134c, 32
  %tmp = shl i32 -1, %v1_11358
  %v8_11360 = add i32 %tmp, -1
  %v9_11360 = and i32 %v7_11354, %v8_11360
  store i32 %v9_11360, i32* %v6_11354, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1134c, { 1, 0 }
}

define i32 @function_11370(i32 %arg1) local_unnamed_addr {
dec_label_pc_11370:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11370 = load i32, i32* @r4, align 4
  %v6_11370 = load i32, i32* @r5, align 4
  %v9_11370 = load i32, i32* @r6, align 4
  %v0_11374 = load i32, i32* %r0.global-to-local, align 4
  %v2_11374 = icmp eq i32 %v0_11374, 0
  %v2_11378 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_11374, label %bb, label %dec_label_pc_11384

bb:                                               ; preds = %dec_label_pc_11370
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1138c

dec_label_pc_11384:                               ; preds = %dec_label_pc_11370
  %tmp = icmp ugt i32 %v0_11374, -8
  br i1 %tmp, label %dec_label_pc_11490, label %dec_label_pc_1138c

dec_label_pc_1138c:                               ; preds = %bb, %dec_label_pc_11384
  %v0_1138c = phi i32 [ %v0_11374, %dec_label_pc_11384 ], [ 1, %bb ]
  %v1_1138c = add i32 %v0_1138c, 4
  store i32 %v1_1138c, i32* %stack_var_-20, align 4
  store i32 %v2_11378, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1bc78.444 to i32), i32* %r0.global-to-local, align 4
  %v1_113a4 = call i32 @function_11f04()
  store i32 ptrtoint (i32** @global_var_1baf8.448 to i32), i32* %r0.global-to-local, align 4
  %v3_113b0 = call i32 @function_11724(i32* bitcast (i32** @global_var_1baf8.448 to i32*), i32 %v2_11378)
  store i32 %v3_113b0, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc78.444 to i32), i32* %r0.global-to-local, align 4
  store i32 70600, i32* @lr, align 4
  %v1_113c4 = call i32 @function_11f04()
  store i32 %v1_113c4, i32* %r0.global-to-local, align 4
  %v2_113c8 = icmp eq i32 %v3_113b0, 0
  br i1 %v2_113c8, label %dec_label_pc_113d0, label %dec_label_pc_11480

dec_label_pc_113d0:                               ; preds = %dec_label_pc_1138c
  %v2_113d4 = load i32, i32* @global_var_1bca0.451, align 4
  store i32 %v2_113d4, i32* @r4, align 4
  %v2_113d8 = load i32, i32* %stack_var_-20, align 4
  %v3_113dc = icmp ult i32 %v2_113d8, %v2_113d4
  br i1 %v3_113dc, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_113d0
  %v3_113e0 = add i32 %v2_113d4, -1
  %v2_113e4 = add i32 %v3_113e0, %v2_113d8
  %v2_113e8 = sub i32 0, %v2_113d4
  %v3_113ec = and i32 %v2_113e4, %v2_113e8
  store i32 %v3_113ec, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_113d0, %bb14
  store i32 ptrtoint (i32* @global_var_1bef8.453 to i32), i32* %r0.global-to-local, align 4
  %v1_113f8 = call i32 @function_11f04()
  %v0_113fc = load i32, i32* @r4, align 4
  store i32 %v0_113fc, i32* %r0.global-to-local, align 4
  %v1_11400 = call i32 @function_126b8(i32 %v0_113fc)
  store i32 %v1_11400, i32* %r0.global-to-local, align 4
  %v7_11404 = icmp eq i32 %v1_11400, -1
  br i1 %v7_11404, label %bb15, label %dec_label_pc_11410

bb15:                                             ; preds = %.thread3
  store i32 %v1_11400, i32* @r5, align 4
  br label %dec_label_pc_11424

dec_label_pc_11410:                               ; preds = %.thread3
  %v1_11410 = add i32 %v1_11400, 3
  %v1_11414 = and i32 %v1_11410, -4
  store i32 %v1_11414, i32* @r5, align 4
  %v9_11418 = icmp eq i32 %v1_11414, %v1_11400
  br i1 %v9_11418, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_11410
  %v3_1141c = sub i32 %v1_11414, %v1_11400
  store i32 %v3_1141c, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_11410, %bb16
  %v1_11420 = xor i1 %v9_11418, true
  call void @__pseudo_cond_branch(i1 %v1_11420, i32 ptrtoint (i32* @global_var_126b8.454 to i32))
  br label %dec_label_pc_11424

dec_label_pc_11424:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1bef8.453 to i32), i32* %r0.global-to-local, align 4
  store i32 70708, i32* @lr, align 4
  %v1_11430 = call i32 @function_11f04()
  store i32 %v1_11430, i32* %r0.global-to-local, align 4
  %v0_11434 = load i32, i32* @r5, align 4
  %v7_11434 = icmp eq i32 %v0_11434, -1
  br i1 %v7_11434, label %dec_label_pc_11490, label %dec_label_pc_1143c

dec_label_pc_1143c:                               ; preds = %dec_label_pc_11424
  store i32 ptrtoint (i32* @global_var_1bc78.444 to i32), i32* %r0.global-to-local, align 4
  %v1_11448 = call i32 @function_11f04()
  %v0_1144c = load i32, i32* @r4, align 4
  %v0_11450 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1baf8.448 to i32), i32* %r0.global-to-local, align 4
  %v4_11458 = call i32 @function_11878(i32* bitcast (i32** @global_var_1baf8.448 to i32*), i32 %v0_11450, i32 %v0_1144c)
  store i32 ptrtoint (i32** @global_var_1baf8.448 to i32), i32* %r0.global-to-local, align 4
  %v3_11464 = call i32 @function_11724(i32* bitcast (i32** @global_var_1baf8.448 to i32*), i32 %v2_11378)
  store i32 %v3_11464, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1bc78.444 to i32), i32* %r0.global-to-local, align 4
  store i32 70776, i32* @lr, align 4
  %v1_11474 = call i32 @function_11f04()
  store i32 %v1_11474, i32* %r0.global-to-local, align 4
  %v2_11478 = icmp eq i32 %v3_11464, 0
  br i1 %v2_11478, label %dec_label_pc_11490, label %dec_label_pc_11480

dec_label_pc_11480:                               ; preds = %dec_label_pc_1138c, %dec_label_pc_1143c
  %v1_11484 = phi i32 [ %v3_113b0, %dec_label_pc_1138c ], [ %v3_11464, %dec_label_pc_1143c ]
  %v2_11480 = load i32, i32* %stack_var_-20, align 4
  %v2_11484 = inttoptr i32 %v1_11484 to i32*
  store i32 %v2_11480, i32* %v2_11484, align 4
  %v3_11484 = load i32, i32* %r4.global-to-local, align 4
  %v4_11484 = add i32 %v3_11484, 4
  store i32 %v4_11484, i32* %r4.global-to-local, align 4
  %v2_11488 = icmp eq i32 %v4_11484, 0
  br i1 %v2_11488, label %dec_label_pc_11490, label %dec_label_pc_114a0

dec_label_pc_11490:                               ; preds = %dec_label_pc_11480, %dec_label_pc_1143c, %dec_label_pc_11424, %dec_label_pc_11384
  %v0_11490 = call i32 @function_10e98()
  store i32 %v0_11490, i32* %r0.global-to-local, align 4
  %v2_11498 = inttoptr i32 %v0_11490 to i32*
  store i32 12, i32* %v2_11498, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_114a0

dec_label_pc_114a0:                               ; preds = %dec_label_pc_11480, %dec_label_pc_11490
  %v0_114a0 = phi i32 [ %v4_11484, %dec_label_pc_11480 ], [ 0, %dec_label_pc_11490 ]
  store i32 %v0_114a0, i32* %r0.global-to-local, align 4
  store i32 %v3_11370, i32* @r4, align 4
  store i32 %v6_11370, i32* @r5, align 4
  store i32 %v9_11370, i32* @r6, align 4
  ret i32 %v0_114a0

; uselistorder directives
  uselistorder i32 %v0_114a0, { 1, 0 }
  uselistorder i32 %v3_11464, { 1, 0, 2 }
  uselistorder i32 %v1_11414, { 1, 0, 2 }
  uselistorder i32 %v1_11400, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_113b0, { 1, 0, 2 }
  uselistorder i32 %v0_11374, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 4, 7, 9, 10, 11, 3, 13, 12, 5, 15, 14, 0, 16, 17, 18, 19, 1, 2 }
  uselistorder label %dec_label_pc_114a0, { 1, 0 }
  uselistorder label %dec_label_pc_11480, { 1, 0 }
  uselistorder label %dec_label_pc_11424, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1138c, { 1, 0 }
}

define i32 @function_114c4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_114c4:
  %stack_var_-12 = alloca i32, align 4
  %v3_114c4 = load i32, i32* @r4, align 4
  store i32 %v3_114c4, i32* %stack_var_-12, align 4
  %v6_114c4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_114cc = mul i32 %arg2, %arg1
  store i32 %v2_114cc, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_114d0 = icmp eq i32 %arg1, 0
  store i32 %v2_114cc, i32* @r0, align 4
  br i1 %v2_114d0, label %dec_label_pc_114fc, label %dec_label_pc_114dc

dec_label_pc_114dc:                               ; preds = %dec_label_pc_114c4
  %v0_114dc = call i32 @function_10510()
  %v0_114e0 = load i32, i32* @r5, align 4
  %v9_114e0 = icmp eq i32 %v0_114e0, %v0_114dc
  store i32 0, i32* @r5, align 4
  br i1 %v9_114e0, label %dec_label_pc_114dc.dec_label_pc_114fc_crit_edge, label %dec_label_pc_114ec

dec_label_pc_114dc.dec_label_pc_114fc_crit_edge:  ; preds = %dec_label_pc_114dc
  %v0_114fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_114fc

dec_label_pc_114ec:                               ; preds = %dec_label_pc_114dc
  %v0_114ec = call i32 @function_10e98()
  %v2_114f4 = inttoptr i32 %v0_114ec to i32*
  store i32 12, i32* %v2_114f4, align 4
  br label %dec_label_pc_11514

dec_label_pc_114fc:                               ; preds = %dec_label_pc_114dc.dec_label_pc_114fc_crit_edge, %dec_label_pc_114c4
  %v0_114fc = phi i32 [ %v0_114fc.pre, %dec_label_pc_114dc.dec_label_pc_114fc_crit_edge ], [ %v2_114cc, %dec_label_pc_114c4 ]
  %v1_11500 = call i32 @function_11370(i32 %v0_114fc)
  store i32 %v1_11500, i32* @r5, align 4
  store i32 70932, i32* @lr, align 4
  %v1_11510 = icmp ne i32 %v1_11500, 0
  call void @__pseudo_cond_branch(i1 %v1_11510, i32 ptrtoint (i32* @global_var_10f00.455 to i32))
  br label %dec_label_pc_11514

dec_label_pc_11514:                               ; preds = %dec_label_pc_114ec, %dec_label_pc_114fc
  %v0_11514 = load i32, i32* @r5, align 4
  %v2_11518 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11518, i32* @r4, align 4
  store i32 %v6_114c4, i32* @r5, align 4
  ret i32 %v0_11514

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11514, { 1, 0 }
}

define i32 @function_1151c() local_unnamed_addr {
dec_label_pc_1151c:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_1151c = load i32, i32* @r0, align 4
  %v2_1151c = icmp eq i32 %v0_1151c, 0
  %v3_11520 = load i32, i32* @r4, align 4
  store i32 %v3_11520, i32* %stack_var_-24, align 4
  %v6_11520 = load i32, i32* @r5, align 4
  %v9_11520 = load i32, i32* @r6, align 4
  %v15_11520 = load i32, i32* @r8, align 4
  br i1 %v2_1151c, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_1151c
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_1151c
  %v1_11528 = add i32 %v0_1151c, -4
  %v2_11528 = inttoptr i32 %v1_11528 to i32*
  %v3_11528 = load i32, i32* %v2_11528, align 4
  store i32 %v3_11528, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1baf8.448 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_11528, i32* @r4, align 4
  %v1_11540 = call i32 @function_11f04()
  %v0_11544 = load i32, i32* @r4, align 4
  %v0_11548 = load i32, i32* @r5, align 4
  %v4_11550 = call i32 @function_11878(i32* bitcast (i32** @global_var_1baf8.448 to i32*), i32 %v0_11544, i32 %v0_11548)
  %v1_11558 = inttoptr i32 %v4_11550 to i32*
  %v2_11558 = load i32, i32* %v1_11558, align 4
  store i32 %v2_11558, i32* %r6.global-to-local, align 4
  %v2_1155c = load i32, i32* @global_var_1bca0.451, align 4
  %v4_11560 = mul i32 %v2_1155c, 8
  %v6_11560 = icmp ult i32 %v2_11558, %v4_11560
  store i32 %v4_11550, i32* @r4, align 4
  br i1 %v6_11560, label %dec_label_pc_115a0, label %dec_label_pc_1156c

dec_label_pc_1156c:                               ; preds = %bb11
  %v1_11574 = call i32 @function_11f04()
  %v1_1157c = call i32 @function_126b8(i32 0)
  %v0_11580 = load i32, i32* @r4, align 4
  %v1_11580 = add i32 %v0_11580, 12
  store i32 %v1_11580, i32* @r5, align 4
  %v9_11584 = icmp eq i32 %v1_11580, %v1_1157c
  br i1 %v9_11584, label %dec_label_pc_115a8, label %dec_label_pc_1158c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_1156c
  %v1_11598 = call i32 @function_11f04()
  br label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %bb11, %dec_label_pc_1158c, %bb14
  %v2_115a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_115a0, i32* @r4, align 4
  store i32 %v6_11520, i32* @r5, align 4
  store i32 %v9_11520, i32* %r6.global-to-local, align 4
  store i32 %v15_11520, i32* %r8.global-to-local, align 4
  %v0_115a4 = call i32 @function_11f04()
  %v0_115a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_115a8

dec_label_pc_115a8:                               ; preds = %dec_label_pc_1156c, %dec_label_pc_115a0
  %v1_115b0 = phi i32 [ %v0_11580, %dec_label_pc_1156c ], [ %v0_115a8.pre, %dec_label_pc_115a0 ]
  %v1_115a8 = add i32 %v1_115b0, 4
  %v2_115a8 = inttoptr i32 %v1_115a8 to i32*
  %v3_115a8 = load i32, i32* %v2_115a8, align 4
  %v2_115ac = icmp eq i32 %v3_115a8, 0
  br i1 %v2_115ac, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_115a8
  %v2_115b0 = add i32 %v1_115b0, 8
  %v3_115b0 = inttoptr i32 %v2_115b0 to i32*
  %v4_115b0 = load i32, i32* %v3_115b0, align 4
  %v3_115b4 = add i32 %v3_115a8, 8
  %v4_115b4 = inttoptr i32 %v3_115b4 to i32*
  store i32 %v4_115b0, i32* %v4_115b4, align 4
  %v0_115b8.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_115a8, %bb12
  %v0_115b8 = phi i32 [ %v1_115b0, %dec_label_pc_115a8 ], [ %v0_115b8.pre, %bb12 ]
  %v1_115b8 = add i32 %v0_115b8, 8
  %v2_115b8 = inttoptr i32 %v1_115b8 to i32*
  %v3_115b8 = load i32, i32* %v2_115b8, align 4
  %v1_115bc = add i32 %v0_115b8, 4
  %v2_115bc = inttoptr i32 %v1_115bc to i32*
  %v3_115bc = load i32, i32* %v2_115bc, align 4
  %v2_115c0 = icmp eq i32 %v3_115b8, 0
  br i1 %v2_115c0, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_115c4 = add i32 %v3_115b8, 4
  %v4_115c4 = inttoptr i32 %v3_115c4 to i32*
  store i32 %v3_115bc, i32* %v4_115c4, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_115c8 = load i32, i32* %r8.global-to-local, align 4
  %v3_115c8 = inttoptr i32 %v2_115c8 to i32*
  store i32 %v3_115bc, i32* %v3_115c8, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_115d8 = call i32 @function_11f04()
  %v0_115dc = load i32, i32* %r6.global-to-local, align 4
  %v1_115dc = load i32, i32* @r4, align 4
  %v0_115e4 = load i32, i32* @r5, align 4
  %v2_115dc = sub i32 12, %v0_115dc
  %v1_115e0 = add i32 %v2_115dc, %v1_115dc
  %v2_115e4 = sub i32 %v1_115e0, %v0_115e4
  %v1_115e8 = call i32 @function_126b8(i32 %v2_115e4)
  br label %dec_label_pc_115a0

; uselistorder directives
  uselistorder i32 %v0_115b8, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_126b8, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_115a8, { 1, 0 }
  uselistorder label %dec_label_pc_115a0, { 2, 1, 0 }
}

define i32 @function_1160c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1160c:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1160c = load i32, i32* @r4, align 4
  store i32 %v3_1160c, i32* %stack_var_-24, align 4
  %v6_1160c = load i32, i32* @r5, align 4
  %v9_1160c = load i32, i32* @r6, align 4
  %v12_1160c = load i32, i32* @r7, align 4
  %v15_1160c = load i32, i32* @r8, align 4
  %v18_1160c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11610 = icmp eq i32 %arg2, 0
  %v0_11614 = load i32, i32* @r0, align 4
  store i32 %v0_11614, i32* @r7, align 4
  br i1 %v2_11610, label %dec_label_pc_1161c, label %dec_label_pc_11624

dec_label_pc_1161c:                               ; preds = %dec_label_pc_1160c
  %v0_1161c = call i32 @function_1151c()
  %v0_1162c.pre = load i32, i32* @r4, align 4
  %v2_11630.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_1162c

dec_label_pc_11624:                               ; preds = %dec_label_pc_1160c
  %v2_11624 = icmp eq i32 %v0_11614, 0
  br i1 %v2_11624, label %dec_label_pc_1162c, label %dec_label_pc_11638

dec_label_pc_1162c:                               ; preds = %dec_label_pc_11624, %dec_label_pc_1161c
  %v2_11630 = phi i32 [ %v3_1160c, %dec_label_pc_11624 ], [ %v2_11630.pre, %dec_label_pc_1161c ]
  %v0_1162c = phi i32 [ %arg2, %dec_label_pc_11624 ], [ %v0_1162c.pre, %dec_label_pc_1161c ]
  store i32 %v2_11630, i32* @r4, align 4
  store i32 %v6_1160c, i32* @r5, align 4
  store i32 %v9_1160c, i32* @r6, align 4
  store i32 %v12_1160c, i32* @r7, align 4
  store i32 %v18_1160c, i32* @lr, align 4
  %v1_11634 = call i32 @function_11370(i32 %v0_1162c)
  %v0_11638.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11638

dec_label_pc_11638:                               ; preds = %dec_label_pc_11624, %dec_label_pc_1162c
  %v0_11650 = phi i32 [ %v0_11614, %dec_label_pc_11624 ], [ %v1_11634, %dec_label_pc_1162c ]
  %v0_11638 = phi i32 [ %arg2, %dec_label_pc_11624 ], [ %v0_11638.pre, %dec_label_pc_1162c ]
  %v1_11638 = add i32 %v0_11638, 7
  %v1_1163c = and i32 %v1_11638, -4
  store i32 %v1_1163c, i32* @r5, align 4
  %v2_11640 = icmp ugt i32 %v1_1163c, 10
  %v1_11644 = add i32 %v0_11650, -4
  %v2_11644 = inttoptr i32 %v1_11644 to i32*
  %v3_11644 = load i32, i32* %v2_11644, align 4
  store i32 %v3_11644, i32* @r6, align 4
  br i1 %v2_11640, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_11638
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_11638, %bb
  %v0_116cc = phi i32 [ %v1_1163c, %dec_label_pc_11638 ], [ 12, %bb ]
  store i32 %v1_11644, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_116cc, %v3_11644
  br i1 %tmp, label %dec_label_pc_11658, label %dec_label_pc_116cc

dec_label_pc_11658:                               ; preds = %bb14
  %v2_1164c = sub i32 %v0_116cc, %v3_11644
  %v1_11668 = call i32 @function_11f04()
  %v0_11670 = load i32, i32* @r8, align 4
  %v1_11670 = load i32, i32* @r6, align 4
  %v2_11670 = add i32 %v1_11670, %v0_11670
  %v4_11678 = call i32 @function_117b8(i32* bitcast (i32** @global_var_1baf8.448 to i32*), i32 %v2_11670, i32 %v2_1164c)
  store i32 %v4_11678, i32* @r4, align 4
  store i32 71312, i32* @lr, align 4
  %v1_1168c = call i32 @function_11f04()
  %v0_11690 = load i32, i32* @r4, align 4
  %v2_11690 = icmp eq i32 %v0_11690, 0
  br i1 %v2_11690, label %dec_label_pc_116a0, label %.thread

.thread:                                          ; preds = %dec_label_pc_11658
  %v1_11694 = load i32, i32* @r6, align 4
  %v3_11694 = add i32 %v1_11694, %v0_11690
  %v2_11698 = load i32, i32* @r7, align 4
  %v3_11698 = add i32 %v2_11698, -4
  %v4_11698 = inttoptr i32 %v3_11698 to i32*
  store i32 %v3_11694, i32* %v4_11698, align 4
  br label %dec_label_pc_1170c

dec_label_pc_116a0:                               ; preds = %dec_label_pc_11658
  %v0_116a0 = load i32, i32* @r5, align 4
  %v1_116a0 = add i32 %v0_116a0, -4
  %v1_116a4 = call i32 @function_11370(i32 %v1_116a0)
  store i32 %v1_116a4, i32* @r0, align 4
  store i32 %v1_116a4, i32* @r4, align 4
  %v2_116a8 = icmp eq i32 %v1_116a4, 0
  br i1 %v2_116a8, label %dec_label_pc_116c4, label %dec_label_pc_116b0

dec_label_pc_116b0:                               ; preds = %dec_label_pc_116a0
  %v0_116b0 = load i32, i32* @r6, align 4
  %v1_116b0 = add i32 %v0_116b0, -4
  store i32 %v1_116b0, i32* @r2, align 4
  %v0_116b4 = load i32, i32* @r7, align 4
  store i32 %v0_116b4, i32* @r1, align 4
  %v3_116b8 = call i32 @function_10ee0(i32 %v1_116a4, i32 %v0_116b4, i32 %v1_116b0)
  %v0_116bc = load i32, i32* @r7, align 4
  store i32 %v0_116bc, i32* @r0, align 4
  %v0_116c0 = call i32 @function_1151c()
  %v0_116c4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_116c4

dec_label_pc_116c4:                               ; preds = %dec_label_pc_116a0, %dec_label_pc_116b0
  %v0_116c4 = phi i32 [ 0, %dec_label_pc_116a0 ], [ %v0_116c4.pre, %dec_label_pc_116b0 ]
  store i32 %v0_116c4, i32* @r7, align 4
  br label %dec_label_pc_1170c

dec_label_pc_116cc:                               ; preds = %bb14
  %v1_116cc = add i32 %v0_116cc, 28
  %tmp15 = icmp ugt i32 %v1_116cc, %v3_11644
  br i1 %tmp15, label %dec_label_pc_1170c, label %dec_label_pc_116d8

dec_label_pc_116d8:                               ; preds = %dec_label_pc_116cc
  %v1_116e4 = call i32 @function_11f04()
  %v0_116e8 = load i32, i32* @r8, align 4
  %v1_116e8 = load i32, i32* @r5, align 4
  %v2_116e8 = add i32 %v1_116e8, %v0_116e8
  %v1_116ec = load i32, i32* @r6, align 4
  %v2_116ec = sub i32 %v1_116ec, %v1_116e8
  %v4_116f4 = call i32 @function_11878(i32* bitcast (i32** @global_var_1baf8.448 to i32*), i32 %v2_116e8, i32 %v2_116ec)
  store i32 71432, i32* @lr, align 4
  %v1_11704 = call i32 @function_11f04()
  %v0_11708 = load i32, i32* @r5, align 4
  %v1_11708 = load i32, i32* @r7, align 4
  %v2_11708 = add i32 %v1_11708, -4
  %v3_11708 = inttoptr i32 %v2_11708 to i32*
  store i32 %v0_11708, i32* %v3_11708, align 4
  br label %dec_label_pc_1170c

dec_label_pc_1170c:                               ; preds = %.thread, %dec_label_pc_116cc, %dec_label_pc_116c4, %dec_label_pc_116d8
  %v0_1170c = load i32, i32* @r7, align 4
  %v2_11710 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11710, i32* @r4, align 4
  store i32 %v6_1160c, i32* @r5, align 4
  store i32 %v9_1160c, i32* @r6, align 4
  store i32 %v12_1160c, i32* @r7, align 4
  store i32 %v15_1160c, i32* @r8, align 4
  ret i32 %v0_1170c

; uselistorder directives
  uselistorder i32 %v1_116e8, { 1, 0 }
  uselistorder i32 %v0_116cc, { 1, 2, 0 }
  uselistorder i32 %v3_11644, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1baf8.448, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1baf8.448 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_11370, { 2, 55, 1, 4, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 3 }
  uselistorder i32 ()* @function_1151c, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 74, 75, 76, 77, 78, 79, 14, 15, 16, 17, 63, 64, 65, 8, 9, 10, 11, 0, 12, 13, 18, 19, 20, 1, 2, 3, 4, 5, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 7, 34, 35, 36, 37, 38, 39, 40, 41, 6, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 145, 148, 149, 150, 151, 152, 153, 154 }
  uselistorder i32* @r7, { 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 47, 48, 1, 49, 50, 51, 52, 53, 54, 55, 56, 152, 153, 154, 41, 0, 42, 43, 44, 45, 46, 57, 58, 59, 60, 61, 62, 2, 63, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 3, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233 }
  uselistorder label %dec_label_pc_1170c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_116c4, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_11638, { 1, 0 }
}

define i32 @function_11724(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11724:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_11724 = inttoptr i32 %arg2 to i32*
  %v2_11724 = load i32, i32* %v1_11724, align 4
  %v3_11728 = load i32, i32* @r4, align 4
  store i32 %v3_11728, i32* %stack_var_-8, align 4
  %v1_1172c = add i32 %v2_11724, 3
  %v1_11730 = and i32 %v1_1172c, -4
  store i32 %v1_11730, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_11738 = icmp ugt i32 %v1_11730, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11740 = load i32, i32* %arg1, align 4
  store i32 %v2_11740, i32* %r0.global-to-local, align 4
  br i1 %v2_11738, label %dec_label_pc_117ac.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_11724
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_117ac.preheader

dec_label_pc_117ac.preheader:                     ; preds = %dec_label_pc_11724, %bb
  %v1_11760 = phi i32 [ %v1_11730, %dec_label_pc_11724 ], [ 12, %bb ]
  %v2_117ac9 = icmp eq i32 %v2_11740, 0
  br i1 %v2_117ac9, label %dec_label_pc_117b4, label %dec_label_pc_1174c

dec_label_pc_1174c:                               ; preds = %dec_label_pc_117ac.preheader, %dec_label_pc_117a8
  %v2_11764 = phi i32 [ %v3_117a8, %dec_label_pc_117a8 ], [ %v2_11740, %dec_label_pc_117ac.preheader ]
  %v1_1174c = inttoptr i32 %v2_11764 to i32*
  %v2_1174c = load i32, i32* %v1_1174c, align 4
  store i32 %v2_1174c, i32* %ip.global-to-local, align 4
  %v3_11750 = icmp ult i32 %v2_1174c, %v1_11760
  br i1 %v3_11750, label %dec_label_pc_117a8, label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %dec_label_pc_1174c
  %v1_11758 = add i32 %v1_11760, 44
  %v3_1175c = icmp ult i32 %v2_1174c, %v1_11758
  br i1 %v3_1175c, label %dec_label_pc_1176c, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_11758
  %v2_11750.le = sub i32 %v2_1174c, %v1_11760
  store i32 %v2_11750.le, i32* %v1_1174c, align 4
  %v0_11798.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_117a0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_1176c:                               ; preds = %dec_label_pc_11758
  %v1_1176c = add i32 %v2_11764, 4
  %v2_1176c = inttoptr i32 %v1_1176c to i32*
  %v3_1176c = load i32, i32* %v2_1176c, align 4
  store i32 %v3_1176c, i32* %r2.global-to-local, align 4
  %v2_11770 = icmp eq i32 %v3_1176c, 0
  br i1 %v2_11770, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_1176c
  %v2_11774 = add i32 %v2_11764, 8
  %v3_11774 = inttoptr i32 %v2_11774 to i32*
  %v4_11774 = load i32, i32* %v3_11774, align 4
  %v3_11778 = add i32 %v3_1176c, 8
  %v4_11778 = inttoptr i32 %v3_11778 to i32*
  store i32 %v4_11774, i32* %v4_11778, align 4
  %v0_1177c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1176c, %bb27
  %v0_1177c = phi i32 [ %v2_11764, %dec_label_pc_1176c ], [ %v0_1177c.pre, %bb27 ]
  %v1_1177c = add i32 %v0_1177c, 8
  %v2_1177c = inttoptr i32 %v1_1177c to i32*
  %v3_1177c = load i32, i32* %v2_1177c, align 4
  %v1_11780 = add i32 %v0_1177c, 4
  %v2_11780 = inttoptr i32 %v1_11780 to i32*
  %v3_11780 = load i32, i32* %v2_11780, align 4
  %v2_11784 = icmp eq i32 %v3_1177c, 0
  br i1 %v2_11784, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_11788 = add i32 %v3_1177c, 4
  %v4_11788 = inttoptr i32 %v3_11788 to i32*
  store i32 %v3_11780, i32* %v4_11788, align 4
  %v1_11790 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_11790, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_1178c = load i32, i32* %r1.global-to-local, align 4
  %v3_1178c = inttoptr i32 %v2_1178c to i32*
  store i32 %v3_11780, i32* %v3_1178c, align 4
  %v1_11794.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_11794.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_117a0 = phi i32 [ %v0_117a0.pre, %.thread._crit_edge ], [ %v1_11790, %bb28 ], [ %v1_11794.pre, %.thread5 ]
  %v0_11798 = phi i32 [ %v0_11798.pre, %.thread._crit_edge ], [ %v1_11790, %bb28 ], [ %v1_11794.pre, %.thread5 ]
  %v1_11798 = load i32, i32* %r0.global-to-local, align 4
  %v2_11798 = sub i32 %v1_11798, %v0_11798
  %v1_1179c = add i32 %v2_11798, 12
  store i32 %v1_1179c, i32* %r0.global-to-local, align 4
  %v1_117a0 = load i32, i32* %r4.global-to-local, align 4
  %v2_117a0 = inttoptr i32 %v1_117a0 to i32*
  store i32 %v0_117a0, i32* %v2_117a0, align 4
  %v2_117a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_117a4, i32* %r4.global-to-local, align 4
  ret i32 %v1_1179c

dec_label_pc_117a8:                               ; preds = %dec_label_pc_1174c
  %v1_117a8 = add i32 %v2_11764, 4
  %v2_117a8 = inttoptr i32 %v1_117a8 to i32*
  %v3_117a8 = load i32, i32* %v2_117a8, align 4
  store i32 %v3_117a8, i32* %r0.global-to-local, align 4
  %v2_117ac = icmp eq i32 %v3_117a8, 0
  br i1 %v2_117ac, label %dec_label_pc_117ac.dec_label_pc_117b4_crit_edge, label %dec_label_pc_1174c

dec_label_pc_117ac.dec_label_pc_117b4_crit_edge:  ; preds = %dec_label_pc_117a8
  br label %dec_label_pc_117b4

dec_label_pc_117b4:                               ; preds = %dec_label_pc_117ac.dec_label_pc_117b4_crit_edge, %dec_label_pc_117ac.preheader
  store i32 %v3_11728, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_117a8, { 1, 2, 0 }
  uselistorder i32 %v0_1177c, { 1, 0 }
  uselistorder i32 %v2_1174c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11764, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_11760, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_1174c, { 1, 0 }
  uselistorder label %dec_label_pc_117ac.preheader, { 1, 0 }
}

define i32 @function_117b8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_117b8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_117bc = load i32, i32* %arg1, align 4
  store i32 %v2_117bc, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_118346 = icmp eq i32 %v2_117bc, 0
  br i1 %v2_118346, label %dec_label_pc_1183c, label %dec_label_pc_117c8

dec_label_pc_117c8:                               ; preds = %dec_label_pc_117b8, %dec_label_pc_11830
  %v0_11808 = phi i32 [ %v3_11830, %dec_label_pc_11830 ], [ %v2_117bc, %dec_label_pc_117b8 ]
  %v1_117c8 = inttoptr i32 %v0_11808 to i32*
  %v2_117c8 = load i32, i32* %v1_117c8, align 4
  store i32 %v2_117c8, i32* %r0.global-to-local, align 4
  %v2_117cc = sub i32 %v0_11808, %v2_117c8
  %v1_117d0 = add i32 %v2_117cc, 12
  %v3_117d4 = icmp uge i32 %v1_117d0, %arg2
  %v9_117d4 = icmp eq i32 %v1_117d0, %arg2
  %v2_117d8 = xor i1 %v9_117d4, true
  %v3_117d8 = and i1 %v3_117d4, %v2_117d8
  br i1 %v3_117d8, label %dec_label_pc_11830, label %dec_label_pc_117dc

dec_label_pc_117dc:                               ; preds = %dec_label_pc_117c8
  br i1 %v9_117d4, label %dec_label_pc_117e0, label %dec_label_pc_1183c

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117dc
  %v1_117e0 = add i32 %arg3, 3
  %v1_117e4 = and i32 %v1_117e0, -4
  store i32 %v1_117e4, i32* %r2.global-to-local, align 4
  %v2_117e8 = sub i32 %v2_117c8, %v1_117e4
  %v3_117e8 = icmp ult i32 %v2_117c8, %v1_117e4
  br i1 %v3_117e8, label %dec_label_pc_1183c, label %dec_label_pc_117f0

dec_label_pc_117f0:                               ; preds = %dec_label_pc_117e0
  %v1_117f0 = add i32 %v1_117e4, 44
  %v3_117f4 = icmp ult i32 %v2_117c8, %v1_117f0
  br i1 %v3_117f4, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_117f0
  store i32 %v2_117e8, i32* %v1_117c8, align 4
  %v1_11800 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_11800, i32* %r0.global-to-local, align 4
  ret i32 %v1_11800

.thread2:                                         ; preds = %dec_label_pc_117f0
  %v1_11808 = add i32 %v0_11808, 4
  %v2_11808 = inttoptr i32 %v1_11808 to i32*
  %v3_11808 = load i32, i32* %v2_11808, align 4
  store i32 %v3_11808, i32* %r2.global-to-local, align 4
  %v2_1180c = icmp eq i32 %v3_11808, 0
  br i1 %v2_1180c, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_11810 = add i32 %v0_11808, 8
  %v3_11810 = inttoptr i32 %v2_11810 to i32*
  %v4_11810 = load i32, i32* %v3_11810, align 4
  %v3_11814 = add i32 %v3_11808, 8
  %v4_11814 = inttoptr i32 %v3_11814 to i32*
  store i32 %v4_11810, i32* %v4_11814, align 4
  %v0_11818.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_11818 = phi i32 [ %v0_11808, %.thread2 ], [ %v0_11818.pre, %bb17 ]
  %v1_11818 = add i32 %v0_11818, 8
  %v2_11818 = inttoptr i32 %v1_11818 to i32*
  %v3_11818 = load i32, i32* %v2_11818, align 4
  store i32 %v3_11818, i32* %r2.global-to-local, align 4
  %v1_1181c = add i32 %v0_11818, 4
  %v2_1181c = inttoptr i32 %v1_1181c to i32*
  %v3_1181c = load i32, i32* %v2_1181c, align 4
  %v2_11820 = icmp eq i32 %v3_11818, 0
  br i1 %v2_11820, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_11824 = add i32 %v3_11818, 4
  %v4_11824 = inttoptr i32 %v3_11824 to i32*
  store i32 %v3_1181c, i32* %v4_11824, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_11828 = load i32, i32* %lr.global-to-local, align 4
  %v3_11828 = inttoptr i32 %v2_11828 to i32*
  store i32 %v3_1181c, i32* %v3_11828, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_1182c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_1182c

dec_label_pc_11830:                               ; preds = %dec_label_pc_117c8
  %v1_11830 = add i32 %v0_11808, 4
  %v2_11830 = inttoptr i32 %v1_11830 to i32*
  %v3_11830 = load i32, i32* %v2_11830, align 4
  store i32 %v3_11830, i32* %ip.global-to-local, align 4
  %v2_11834 = icmp eq i32 %v3_11830, 0
  br i1 %v2_11834, label %dec_label_pc_11834.dec_label_pc_1183c.loopexit_crit_edge, label %dec_label_pc_117c8

dec_label_pc_11834.dec_label_pc_1183c.loopexit_crit_edge: ; preds = %dec_label_pc_11830
  br label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_117e0, %dec_label_pc_117b8, %dec_label_pc_11834.dec_label_pc_1183c.loopexit_crit_edge, %dec_label_pc_117dc
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11830, { 1, 2, 0 }
  uselistorder i32 %v0_11818, { 1, 0 }
  uselistorder i32 %v1_117e4, { 0, 2, 1, 3 }
  uselistorder i1 %v9_117d4, { 1, 0 }
  uselistorder i32 %v2_117c8, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_11808, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_1183c, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_117c8, { 1, 0 }
}

define i32 @function_11844() local_unnamed_addr {
dec_label_pc_11844:
  %v0_11844 = load i32, i32* @r2, align 4
  %v2_11844 = icmp eq i32 %v0_11844, 0
  %v0_11848 = load i32, i32* @r3, align 4
  %v1_11848 = load i32, i32* @r1, align 4
  %v2_11848 = add i32 %v1_11848, 4
  %v3_11848 = inttoptr i32 %v2_11848 to i32*
  store i32 %v0_11848, i32* %v3_11848, align 4
  %v0_1184c = load i32, i32* @r2, align 4
  %v1_1184c = load i32, i32* @r1, align 4
  %v2_1184c = add i32 %v1_1184c, 8
  %v3_1184c = inttoptr i32 %v2_1184c to i32*
  store i32 %v0_1184c, i32* %v3_1184c, align 4
  %v1_11854 = load i32, i32* @r1, align 4
  br i1 %v2_11844, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11844
  %v2_11850 = load i32, i32* @r2, align 4
  %v3_11850 = add i32 %v2_11850, 4
  %v4_11850 = inttoptr i32 %v3_11850 to i32*
  store i32 %v1_11854, i32* %v4_11850, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_11844
  %v2_11854 = load i32, i32* @r0, align 4
  %v3_11854 = inttoptr i32 %v2_11854 to i32*
  store i32 %v1_11854, i32* %v3_11854, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_11858 = load i32, i32* @r3, align 4
  %v2_11858 = icmp eq i32 %v0_11858, 0
  br i1 %v2_11858, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_1185c = load i32, i32* @r1, align 4
  %v3_1185c = add i32 %v0_11858, 8
  %v4_1185c = inttoptr i32 %v3_1185c to i32*
  store i32 %v1_1185c, i32* %v4_1185c, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_11860 = load i32, i32* @r0, align 4
  ret i32 %v1_11860

; uselistorder directives
  uselistorder i32 %v1_11854, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11864() local_unnamed_addr {
dec_label_pc_11864:
  %v0_11864 = load i32, i32* @r2, align 4
  %v2_11864 = icmp eq i32 %v0_11864, 0
  %v1_11868 = load i32, i32* @r1, align 4
  br i1 %v2_11864, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11864
  %v2_11868 = load i32, i32* @r0, align 4
  %v3_11868 = inttoptr i32 %v2_11868 to i32*
  store i32 %v1_11868, i32* %v3_11868, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_11864
  %v3_1186c = add i32 %v0_11864, 4
  %v4_1186c = inttoptr i32 %v3_1186c to i32*
  store i32 %v1_11868, i32* %v4_1186c, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_11870 = load i32, i32* @r2, align 4
  %v1_11870 = load i32, i32* @r1, align 4
  %v2_11870 = add i32 %v1_11870, 8
  %v3_11870 = inttoptr i32 %v2_11870 to i32*
  store i32 %v0_11870, i32* %v3_11870, align 4
  %v1_11874 = load i32, i32* @r0, align 4
  ret i32 %v1_11874

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11878(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11878:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11878 = load i32, i32* @r4, align 4
  store i32 %v3_11878, i32* %stack_var_-20, align 4
  %v2_1187c = load i32, i32* %arg1, align 4
  store i32 %v2_1187c, i32* %r4.global-to-local, align 4
  %v2_11880 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1189c2 = icmp eq i32 %v2_1187c, 0
  br i1 %v2_1189c2, label %dec_label_pc_1194c, label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_11878, %dec_label_pc_11894
  %v0_118dc = phi i32 [ %v0_118e4, %dec_label_pc_11894 ], [ 0, %dec_label_pc_11878 ]
  %v0_118e4 = phi i32 [ %v3_11898, %dec_label_pc_11894 ], [ %v2_1187c, %dec_label_pc_11878 ]
  %v1_118a05.in = phi i32 [ %v3_11898, %dec_label_pc_11894 ], [ %v2_1187c, %dec_label_pc_11878 ]
  %v1_118a05 = add i32 %v1_118a05.in, 12
  %v3_1188c = icmp ult i32 %v1_118a05, %arg2
  br i1 %v3_1188c, label %dec_label_pc_11894, label %dec_label_pc_118ac

dec_label_pc_11894:                               ; preds = %dec_label_pc_1188c
  store i32 %v0_118e4, i32* %r6.global-to-local, align 4
  %v1_11898 = add i32 %v0_118e4, 4
  %v2_11898 = inttoptr i32 %v1_11898 to i32*
  %v3_11898 = load i32, i32* %v2_11898, align 4
  store i32 %v3_11898, i32* %r4.global-to-local, align 4
  %v2_1189c = icmp eq i32 %v3_11898, 0
  br i1 %v2_1189c, label %dec_label_pc_1189c.dec_label_pc_1194c.loopexit_crit_edge, label %dec_label_pc_1188c

dec_label_pc_118ac:                               ; preds = %dec_label_pc_1188c
  %v1_118ac = inttoptr i32 %v0_118e4 to i32*
  %v2_118ac = load i32, i32* %v1_118ac, align 4
  %v2_118b0 = sub i32 %v0_118e4, %v2_118ac
  %v1_118b4 = add i32 %v2_118b0, 12
  %v3_118b8 = icmp uge i32 %v1_118b4, %v2_11880
  %v9_118b8 = icmp eq i32 %v1_118b4, %v2_11880
  %v2_118bc = xor i1 %v9_118b8, true
  %v3_118bc = and i1 %v3_118b8, %v2_118bc
  br i1 %v3_118bc, label %dec_label_pc_1194c, label %dec_label_pc_118c0

dec_label_pc_118c0:                               ; preds = %dec_label_pc_118ac
  %v2_118c0 = add i32 %v2_118ac, %arg3
  store i32 %v2_118c0, i32* %r7.global-to-local, align 4
  br i1 %v9_118b8, label %dec_label_pc_118c8, label %dec_label_pc_118f4

dec_label_pc_118c8:                               ; preds = %dec_label_pc_118c0
  %v2_118c8 = icmp eq i32 %v0_118dc, 0
  br i1 %v2_118c8, label %dec_label_pc_11940, label %dec_label_pc_118d0

dec_label_pc_118d0:                               ; preds = %dec_label_pc_118c8
  %v1_118d0 = add i32 %v0_118dc, 12
  %v9_118d4 = icmp eq i32 %v1_118d0, %arg2
  br i1 %v9_118d4, label %dec_label_pc_118dc, label %dec_label_pc_11940

dec_label_pc_118dc:                               ; preds = %dec_label_pc_118d0
  %v1_118dc = inttoptr i32 %v0_118dc to i32*
  %v2_118dc = load i32, i32* %v1_118dc, align 4
  %v1_118e0 = add i32 %v0_118dc, 8
  %v2_118e0 = inttoptr i32 %v1_118e0 to i32*
  %v3_118e0 = load i32, i32* %v2_118e0, align 4
  store i32 %v3_118e0, i32* @r2, align 4
  store i32 %v0_118e4, i32* @r1, align 4
  %v2_118e8 = add i32 %v2_118dc, %v2_118c0
  store i32 %v2_118e8, i32* %r7.global-to-local, align 4
  %v0_118ec = call i32 @function_11864()
  br label %dec_label_pc_11940

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118c0
  %v1_118f4 = add i32 %v0_118e4, 4
  %v2_118f4 = inttoptr i32 %v1_118f4 to i32*
  %v3_118f4 = load i32, i32* %v2_118f4, align 4
  store i32 %v3_118f4, i32* %r5.global-to-local, align 4
  %v2_118f8 = icmp eq i32 %v3_118f4, 0
  br i1 %v2_118f8, label %dec_label_pc_1192c, label %dec_label_pc_11900

dec_label_pc_11900:                               ; preds = %dec_label_pc_118f4
  %v1_11900 = inttoptr i32 %v3_118f4 to i32*
  %v2_11900 = load i32, i32* %v1_11900, align 4
  %v2_11904 = sub i32 %v3_118f4, %v2_11900
  %v1_11908 = add i32 %v2_11904, 12
  %v9_1190c = icmp eq i32 %v2_11880, %v1_11908
  br i1 %v9_1190c, label %dec_label_pc_11914, label %dec_label_pc_1192c

dec_label_pc_11914:                               ; preds = %dec_label_pc_11900
  store i32 %v0_118dc, i32* @r2, align 4
  store i32 %v3_118f4, i32* @r1, align 4
  %v2_1191c = add i32 %v2_11900, %v2_118c0
  store i32 %v2_1191c, i32* %r7.global-to-local, align 4
  %v0_11920 = call i32 @function_11864()
  %v0_11924 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11924, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11940

dec_label_pc_1192c:                               ; preds = %dec_label_pc_11900, %dec_label_pc_118f4
  %v2_1192c = add i32 %v0_118e4, %arg3
  store i32 %v2_1192c, i32* %r4.global-to-local, align 4
  store i32 %v3_118f4, i32* @r3, align 4
  store i32 %v0_118dc, i32* @r2, align 4
  store i32 %v2_1192c, i32* @r1, align 4
  %v0_1193c = call i32 @function_11844()
  br label %dec_label_pc_11940

dec_label_pc_11940:                               ; preds = %dec_label_pc_118d0, %dec_label_pc_118c8, %dec_label_pc_11914, %dec_label_pc_118dc, %dec_label_pc_1192c
  %v0_11940 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11940, i32* %r5.global-to-local, align 4
  %v0_11944 = load i32, i32* %r7.global-to-local, align 4
  %v2_11944 = inttoptr i32 %v0_11940 to i32*
  store i32 %v0_11944, i32* %v2_11944, align 4
  br label %dec_label_pc_11964

dec_label_pc_1189c.dec_label_pc_1194c.loopexit_crit_edge: ; preds = %dec_label_pc_11894
  br label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11878, %dec_label_pc_1189c.dec_label_pc_1194c.loopexit_crit_edge, %dec_label_pc_118ac
  %v1_1194c = add i32 %v2_11880, -12
  store i32 %v1_1194c, i32* %r5.global-to-local, align 4
  %v3_11950 = inttoptr i32 %v1_1194c to i32*
  store i32 %arg3, i32* %v3_11950, align 4
  %v0_11954 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11954, i32* @r3, align 4
  %v0_11958 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11958, i32* @r2, align 4
  %v0_1195c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1195c, i32* @r1, align 4
  %v0_11960 = call i32 @function_11844()
  br label %dec_label_pc_11964

dec_label_pc_11964:                               ; preds = %dec_label_pc_11940, %dec_label_pc_1194c
  %v0_11964 = load i32, i32* %r5.global-to-local, align 4
  %v2_11968 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11968, i32* @r4, align 4
  ret i32 %v0_11964

; uselistorder directives
  uselistorder i32 %v3_118f4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_118b8, { 1, 0 }
  uselistorder i32 %v3_11898, { 2, 3, 1, 0 }
  uselistorder i32 %v0_118e4, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_118dc, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_11844, { 1, 0 }
  uselistorder i32 ()* @function_11864, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11964, { 1, 0 }
  uselistorder label %dec_label_pc_1194c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11940, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1188c, { 1, 0 }
}

define i32 @function_1196c() local_unnamed_addr {
dec_label_pc_11988.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_1196c = ptrtoint i32* %stack_var_-268 to i32
  %v1_1197c = call i32 @function_11f04()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_11988 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_11988

dec_label_pc_11988:                               ; preds = %dec_label_pc_11988.lr.ph, %dec_label_pc_11988
  %v1_1198c = phi i32 [ 31, %dec_label_pc_11988.lr.ph ], [ %v1_11998, %dec_label_pc_11988 ]
  %v4_1198c = mul i32 %v1_1198c, 4
  %v5_1198c = add i32 %v4_1198c, %v2_11988
  %v2_11994 = add i32 %v5_1198c, -128
  %v3_11994 = inttoptr i32 %v2_11994 to i32*
  store i32 0, i32* %v3_11994, align 4
  %v0_11998 = load i32, i32* %r1.global-to-local, align 4
  %v1_11998 = add i32 %v0_11998, -1
  store i32 %v1_11998, i32* %r1.global-to-local, align 4
  %v6_11998 = icmp slt i32 %v1_11998, 0
  br i1 %v6_11998, label %dec_label_pc_119a0, label %dec_label_pc_11988

dec_label_pc_119a0:                               ; preds = %dec_label_pc_11988
  %v2_119a0 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_119a0, i32* @r4, align 4
  store i32 %v2_119a0, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_119ac = call i32 @function_11328()
  %v2_119b0 = icmp eq i32 %v0_119ac, 0
  br i1 %v2_119b0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_119a0
  store i32 %v2_119a0, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_119a0, %bb
  store i32 72132, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_119b0, i32 ptrtoint (i32* @global_var_10b40.470 to i32))
  %v2_119c8 = load i32, i32* @global_var_1bc90.472, align 4
  %v2_119cc = icmp eq i32 %v2_119c8, 0
  br i1 %v2_119cc, label %dec_label_pc_119d4, label %dec_label_pc_11a04

dec_label_pc_119d4:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1bc90.472, align 4
  br label %dec_label_pc_119dc

dec_label_pc_119dc:                               ; preds = %dec_label_pc_11a54, %dec_label_pc_119d4
  %v1_119e8 = call i32 @function_11f04()
  %v1_119f0 = call i32 @function_111ec(i32 6)
  store i32 72196, i32* @lr, align 4
  %v1_11a00 = call i32 @function_11f04()
  %v2_11a08.pre = load i32, i32* @global_var_1bc90.472, align 4
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %.thread1, %dec_label_pc_119dc
  %v0_11a78 = phi i32 [ %v2_119c8, %.thread1 ], [ %v2_11a08.pre, %dec_label_pc_119dc ]
  store i32 ptrtoint (i32* @global_var_1bc90.472 to i32), i32* %ip.global-to-local, align 4
  %v7_11a0c = icmp eq i32 %v0_11a78, 1
  br i1 %v7_11a0c, label %dec_label_pc_11a3c.lr.ph, label %dec_label_pc_11a70

dec_label_pc_11a3c.lr.ph:                         ; preds = %dec_label_pc_11a04
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1bc90.472, align 4
  %v2_11a28 = bitcast i32* %stack_var_-268 to i8*
  %v3_11a28 = call i32 @function_10f00(i8* %v2_11a28, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a3c

dec_label_pc_11a3c:                               ; preds = %dec_label_pc_11a3c.lr.ph, %dec_label_pc_11a3c
  %v1_11a40 = phi i32 [ 31, %dec_label_pc_11a3c.lr.ph ], [ %v1_11a4c, %dec_label_pc_11a3c ]
  %v4_11a40 = mul i32 %v1_11a40, 4
  %v5_11a40 = add i32 %v4_11a40, %v2_11988
  %v2_11a48 = add i32 %v5_11a40, -264
  %v3_11a48 = inttoptr i32 %v2_11a48 to i32*
  store i32 -1, i32* %v3_11a48, align 4
  %v0_11a4c = load i32, i32* %r1.global-to-local, align 4
  %v1_11a4c = add i32 %v0_11a4c, -1
  store i32 %v1_11a4c, i32* %r1.global-to-local, align 4
  %v6_11a4c = icmp slt i32 %v1_11a4c, 0
  br i1 %v6_11a4c, label %dec_label_pc_11a54, label %dec_label_pc_11a3c

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a3c
  store i32 %v2_1196c, i32* %r1.global-to-local, align 4
  %v4_11a68 = call i32 @function_121f0(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_119dc

dec_label_pc_11a70:                               ; preds = %dec_label_pc_11a04
  %v7_11a70 = icmp eq i32 %v0_11a78, 2
  br i1 %v7_11a70, label %dec_label_pc_11a78, label %dec_label_pc_11a84

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a70
  store i32 3, i32* @global_var_1bc90.472, align 4
  %v0_11a80 = call i32 @function_1196c()
  %v2_11a84.pre = load i32, i32* @global_var_1bc90.472, align 4
  br label %dec_label_pc_11a84

dec_label_pc_11a84:                               ; preds = %dec_label_pc_11a70, %dec_label_pc_11a78
  %v1_11a8c = phi i32 [ %v0_11a78, %dec_label_pc_11a70 ], [ %v2_11a84.pre, %dec_label_pc_11a78 ]
  %v7_11a88 = icmp eq i32 %v1_11a8c, 3
  br i1 %v7_11a88, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_11a84
  %v2_11a94 = load i32, i32* %ip.global-to-local, align 4
  %v3_11a94 = inttoptr i32 %v2_11a94 to i32*
  store i32 4, i32* %v3_11a94, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11a84, %bb27
  call void @__pseudo_cond_branch(i1 %v7_11a88, i32 ptrtoint (i32* @global_var_12308.474 to i32))
  br label %dec_label_pc_11a9c

dec_label_pc_11a9c:                               ; preds = %dec_label_pc_11a9c, %.thread3
  %v0_11a9c = call i32 @function_1196c()
  br label %dec_label_pc_11a9c

; uselistorder directives
  uselistorder i32 %v1_11a4c, { 2, 1, 0 }
  uselistorder i32 %v1_11998, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1bc90.472, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11a84, { 1, 0 }
  uselistorder label %dec_label_pc_11a3c, { 1, 0 }
  uselistorder label %dec_label_pc_11a04, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_11988, { 1, 0 }
}

define i32 @function_11ab4(i8* %arg1) local_unnamed_addr {
dec_label_pc_11ab4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_11ac8 = load i32, i32* @r4, align 4
  store i32 %v3_11ac8, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_11aec.pre = load i32, i32* bitcast (i32** @global_var_1bc38.477 to i32*), align 4
  br label %dec_label_pc_11ae4

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11ae4, %dec_label_pc_11ab4
  %v0_11b1c = phi i32 [ %tmp, %dec_label_pc_11ab4 ], [ %v1_11ae0, %dec_label_pc_11ae4 ]
  store i32 %v0_11b1c, i32* %r4.global-to-local, align 4
  %v1_11ae8 = inttoptr i32 %v0_11b1c to i8*
  %v2_11ae8 = load i8, i8* %v1_11ae8, align 1
  %v3_11ae8 = zext i8 %v2_11ae8 to i32
  %v3_11af0 = mul nuw nsw i32 %v3_11ae8, 2
  %v4_11af0 = add i32 %v3_11af0, %v2_11aec.pre
  %v5_11af0 = inttoptr i32 %v4_11af0 to i8*
  %v6_11af0 = load i8, i8* %v5_11af0, align 1
  %v1_11af4 = and i8 %v6_11af0, 32
  %v2_11af4 = icmp eq i8 %v1_11af4, 0
  %v1_11ae0 = add i32 %v0_11b1c, 1
  br i1 %v2_11af4, label %dec_label_pc_11afc, label %dec_label_pc_11ae4

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11ae4
  %v7_11afc = icmp eq i8 %v2_11ae8, 43
  br i1 %v7_11afc, label %dec_label_pc_11b1c, label %dec_label_pc_11b04

dec_label_pc_11b04:                               ; preds = %dec_label_pc_11afc
  %v7_11b04 = icmp eq i8 %v2_11ae8, 45
  br i1 %v7_11b04, label %dec_label_pc_11b1c, label %bb

bb:                                               ; preds = %dec_label_pc_11b04
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11b78

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11afc, %dec_label_pc_11b04
  %storemerge30 = phi i32 [ 1, %dec_label_pc_11b04 ], [ 0, %dec_label_pc_11afc ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_11ae0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b78

dec_label_pc_11b78:                               ; preds = %bb, %dec_label_pc_11b1c
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_11b80 = call i32 @function_10620(i32 -1, i32 10)
  %v0_11b84 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11b84, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_11b90 = urem i32 %v2_11b80, 256
  store i32 %v1_11b90, i32* %sl.global-to-local, align 4
  %v0_11b94 = call i32 @function_10510()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_11b94, i32* %r8.global-to-local, align 4
  %v0_11ba8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11ba4:                               ; preds = %bb48, %dec_label_pc_11c04
  %v0_11ba4 = phi i32 [ %v1_11bd4, %bb48 ], [ %v0_11ba4.pre, %dec_label_pc_11c04 ]
  store i32 %v0_11ba4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %dec_label_pc_11b78, %dec_label_pc_11ba4
  %v0_11bd4 = phi i32 [ %v0_11ba8.pre, %dec_label_pc_11b78 ], [ %v0_11ba4, %dec_label_pc_11ba4 ]
  %v1_11ba8 = inttoptr i32 %v0_11bd4 to i8*
  %v2_11ba8 = load i8, i8* %v1_11ba8, align 1
  %v3_11ba8 = zext i8 %v2_11ba8 to i32
  %v1_11bac = add nsw i32 %v3_11ba8, -48
  %v1_11bb0 = urem i32 %v1_11bac, 256
  %v1_11bb8 = or i32 %v3_11ba8, 32
  %tmp56 = icmp ult i32 %v1_11bb0, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_11bc0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11ba8
  %tmp57 = icmp ugt i32 %v1_11bb8, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_11bc0
  %v1_11bc4 = add nsw i32 %v1_11bb8, -87
  %v5_11bcc = urem i32 %v1_11bc4, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_11ba8, %dec_label_pc_11bc0, %bb42
  %v3_11bfc = phi i32 [ %v1_11bb0, %dec_label_pc_11ba8 ], [ 40, %dec_label_pc_11bc0 ], [ %v5_11bcc, %bb42 ]
  %v1_11bd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_11bd4 = add i32 %v0_11bd4, 1
  store i32 %v1_11bd4, i32* %r4.global-to-local, align 4
  %v6_11bd8 = icmp slt i32 %v3_11bfc, %v1_11bd0
  br i1 %v6_11bd8, label %dec_label_pc_11bdc, label %dec_label_pc_11c1c

dec_label_pc_11bdc:                               ; preds = %bb43
  %v0_11bdc = load i32, i32* %ip.global-to-local, align 4
  %v1_11bdc = load i32, i32* %r8.global-to-local, align 4
  %v9_11bdc = icmp eq i32 %v0_11bdc, %v1_11bdc
  br i1 %v9_11bdc, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_11bdc
  br label %dec_label_pc_11bec

bb44:                                             ; preds = %dec_label_pc_11bdc
  %v3_11bdc = icmp ult i32 %v0_11bdc, %v1_11bdc
  br i1 %v3_11bdc, label %dec_label_pc_11bec, label %dec_label_pc_11c04

dec_label_pc_11bec:                               ; preds = %bb44, %.thread
  %v4_11bf41727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_11bec = load i32, i32* %sl.global-to-local, align 4
  %v3_11bec = icmp uge i32 %v3_11bfc, %v1_11bec
  %v9_11bec = icmp eq i32 %v3_11bfc, %v1_11bec
  %v2_11bf0 = xor i1 %v3_11bec, true
  %v3_11bf0 = or i1 %v9_11bec, %v2_11bf0
  br i1 %v3_11bf0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_11bec
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_11bec, %bb45
  %v4_11bf4 = phi i32 [ %v4_11bf41727, %dec_label_pc_11bec ], [ 0, %bb45 ]
  %v2_11bf4 = xor i1 %v9_11bec, true
  %v3_11bf4 = and i1 %v3_11bec, %v2_11bf4
  br i1 %v3_11bf4, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_11bf4 = urem i32 %v4_11bf4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_11bf8 = phi i32 [ %v5_11bf4, %bb47 ], [ %v4_11bf4, %bb46 ]
  %v2_11bf8 = icmp eq i32 %v0_11bf8, 0
  br i1 %v2_11bf8, label %bb48, label %dec_label_pc_11c04

bb48:                                             ; preds = %thread-pre-split
  %v4_11bfc = mul i32 %v0_11bdc, %v1_11bd0
  %v5_11bfc = add i32 %v4_11bfc, %v3_11bfc
  store i32 %v5_11bfc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11ba4

dec_label_pc_11c04:                               ; preds = %bb44, %thread-pre-split
  %v0_11c04 = call i32 @function_10e98()
  %v0_11c08 = load i32, i32* %r7.global-to-local, align 4
  %v1_11c08 = load i32, i32* %fp.global-to-local, align 4
  %v2_11c08 = and i32 %v1_11c08, %v0_11c08
  store i32 %v2_11c08, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_11c14 = inttoptr i32 %v0_11c04 to i32*
  store i32 34, i32* %v2_11c14, align 4
  %v0_11ba4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ba4

dec_label_pc_11c1c:                               ; preds = %bb43
  %v0_11c1c.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_11c1c = icmp eq i32 %v0_11c1c.pre, 0
  br i1 %v2_11c1c, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_11c1c
  %v1_11c20 = load i32, i32* %r6.global-to-local, align 4
  %v3_11c20 = inttoptr i32 %v0_11c1c.pre to i32*
  store i32 %v1_11c20, i32* %v3_11c20, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_11c1c, %bb49
  %v0_11c24 = load i32, i32* %r7.global-to-local, align 4
  %v2_11c24 = icmp eq i32 %v0_11c24, 0
  %. = select i1 %v2_11c24, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_11c30 = load i32, i32* %fp.global-to-local, align 4
  %v2_11c30 = icmp eq i32 %v0_11c30, 0
  %v0_11c54.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_11c30, label %dec_label_pc_11c4c, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_11c54.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_11c3c, label %dec_label_pc_11c4c

dec_label_pc_11c3c:                               ; preds = %bb53
  %v0_11c3c = call i32 @function_10e98()
  %v2_11c44 = inttoptr i32 %v0_11c3c to i32*
  store i32 34, i32* %v2_11c44, align 4
  %v0_11c48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11c48, i32* %ip.global-to-local, align 4
  %v0_11c4c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %bb53, %bb50, %dec_label_pc_11c3c
  %v0_11c54.pre = phi i32 [ %v0_11c54.pre.pre, %bb53 ], [ %v0_11c48, %dec_label_pc_11c3c ], [ %v0_11c54.pre.pre, %bb50 ]
  %v0_11c4c = phi i32 [ %v0_11c24, %bb53 ], [ %v0_11c4c.pre, %dec_label_pc_11c3c ], [ %v0_11c24, %bb50 ]
  %v2_11c4c = icmp eq i32 %v0_11c4c, 0
  br i1 %v2_11c4c, label %dec_label_pc_11c4c._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_11c4c
  %v2_11c50 = sub i32 0, %v0_11c54.pre
  store i32 %v2_11c50, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c4c._crit_edge

dec_label_pc_11c4c._crit_edge:                    ; preds = %dec_label_pc_11c4c, %bb54
  %v0_11c54 = phi i32 [ %v2_11c50, %bb54 ], [ %v0_11c54.pre, %dec_label_pc_11c4c ]
  %v2_11c58 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11c58, i32* @r4, align 4
  ret i32 %v0_11c54

; uselistorder directives
  uselistorder i32 %v0_11c54.pre, { 1, 0 }
  uselistorder i32 %v0_11c54.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11c1c.pre, { 1, 0 }
  uselistorder i32 %v4_11bf4, { 1, 0 }
  uselistorder i1 %v3_11bec, { 1, 0 }
  uselistorder i32 %v1_11bec, { 1, 0 }
  uselistorder i32 %v1_11bd4, { 1, 0 }
  uselistorder i32 %v1_11bb8, { 1, 0 }
  uselistorder i32 %v1_11bb0, { 1, 0 }
  uselistorder i32 %v0_11ba4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_10510, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_10620, { 4, 3, 2, 6, 10, 9, 8, 7, 5, 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 7, 12, 8, 9, 1, 10, 11, 2, 3, 4, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder label %dec_label_pc_11c4c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11c4c, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11ba8, { 1, 0 }
  uselistorder label %dec_label_pc_11ba4, { 1, 0 }
  uselistorder label %dec_label_pc_11b78, { 1, 0 }
  uselistorder label %dec_label_pc_11b1c, { 1, 0 }
}

define i32 @function_11c60(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c60:
  %stack_var_-16 = alloca i32, align 4
  %v2_11c60 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_11c60, i32* @r0, align 4
  %v8_11c7c = call i32 @function_11f0c(i32 %v2_11c60, i32 ptrtoint (i32* @global_var_11f04.426 to i32), i32 ptrtoint (i32* @global_var_1bc18.480 to i32), i32 73484, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_11c8c = call i32 @function_11f04()
  %v2_11c94 = load i32, i32* @global_var_1bc94.484, align 4
  %v2_11c98 = icmp eq i32 %v2_11c94, 0
  br i1 %v2_11c98, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11c60
  call void @__pseudo_branch(i32 %v2_11c94)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11c60, %bb
  store i32 %v2_11c60, i32* @r0, align 4
  %v8_11cb8 = call i32 @function_11f0c(i32 %v2_11c60, i32 1, i32 ptrtoint (i32* @global_var_1bc18.480 to i32), i32 73484, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_11cb8, i32* @r0, align 4
  %v1_11cbc = call i32 @function_11e98(i32 %v8_11cb8)
  %v0_11cd0 = load i32, i32* @r4, align 4
  %v1_11cd4 = call i32 @function_12308(i32 %v0_11cd0)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_11c60, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_11f04, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_11f0c, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 73484, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1bc18.480 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_11f04.426 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11cf4(i32 %arg1) local_unnamed_addr {
dec_label_pc_11cf4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11cf4 = load i32, i32* @r4, align 4
  store i32 %v3_11cf4, i32* %stack_var_-20, align 4
  %v6_11cf4 = load i32, i32* @r5, align 4
  %v9_11cf4 = load i32, i32* @r6, align 4
  %v16_11cf4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_11cf8 = icmp eq i32 %arg1, 0
  %v2_11cfc = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_11cf8, label %dec_label_pc_11e80, label %dec_label_pc_11d14.preheader

dec_label_pc_11d14.preheader:                     ; preds = %dec_label_pc_11cf4
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_11d1c17 = add i32 %v16_11cf4, 124
  br label %dec_label_pc_11d0c

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11d14.preheader, %dec_label_pc_11d0c
  %v5_11d1c18 = phi i32 [ %v5_11d1c17, %dec_label_pc_11d14.preheader ], [ %v5_11d1c, %dec_label_pc_11d0c ]
  %v2_11d10 = add i32 %v5_11d1c18, -136
  %v3_11d10 = inttoptr i32 %v2_11d10 to i32*
  store i32 0, i32* %v3_11d10, align 4
  %v0_11d14.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11d14 = add i32 %v0_11d14.pre, -1
  store i32 %v1_11d14, i32* %r1.global-to-local, align 4
  %v6_11d14 = icmp slt i32 %v1_11d14, 0
  %v4_11d1c = mul i32 %v1_11d14, 4
  %v5_11d1c = add i32 %v4_11d1c, %v16_11cf4
  br i1 %v6_11d14, label %dec_label_pc_11d24, label %dec_label_pc_11d0c

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d0c
  %v2_11d24 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_11d24, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_11d34 = load i32, i32* @ip, align 4
  store i32 %v0_11d34, i32* %stack_var_-28, align 4
  %v0_11d3c = call i32 @function_11328()
  store i32 %v0_11d3c, i32* %r0.global-to-local, align 4
  %v1_11d40 = load i32, i32* @r5, align 4
  %v5_11d44 = icmp slt i32 %v0_11d3c, %v1_11d40
  br i1 %v5_11d44, label %dec_label_pc_11e88, label %dec_label_pc_11d48

dec_label_pc_11d48:                               ; preds = %dec_label_pc_11d24
  %v2_11d48 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_11d48, i32* @r4, align 4
  store i32 %v1_11d40, i32* %r0.global-to-local, align 4
  store i32 %v2_11d24, i32* %r1.global-to-local, align 4
  %v3_11d58 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_11d58 = call i32 @function_10b40(i32 %v1_11d40, %_TYPEDEF_sigset_t* %v3_11d58, i32 %v2_11d48)
  store i32 %v4_11d58, i32* %r0.global-to-local, align 4
  %v1_11d5c = load i32, i32* @r5, align 4
  %v9_11d5c = icmp eq i32 %v4_11d58, %v1_11d5c
  br i1 %v9_11d5c, label %dec_label_pc_11d64, label %dec_label_pc_11e88

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11d48
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_11d48, i32* %r0.global-to-local, align 4
  %v2_11d6c = call i32 @function_11304(i32 %v2_11d48, i32 17)
  store i32 %v2_11d6c, i32* %r0.global-to-local, align 4
  %v1_11d70 = load i32, i32* @r5, align 4
  %v9_11d70 = icmp eq i32 %v2_11d6c, %v1_11d70
  br i1 %v9_11d70, label %dec_label_pc_11d88.preheader, label %dec_label_pc_11d64.dec_label_pc_11e50_crit_edge

dec_label_pc_11d64.dec_label_pc_11e50_crit_edge:  ; preds = %dec_label_pc_11d64
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_11e50

dec_label_pc_11d88.preheader:                     ; preds = %dec_label_pc_11d64
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11d80

dec_label_pc_11d80:                               ; preds = %dec_label_pc_11d88.preheader, %dec_label_pc_11d80
  %v5_11d9016 = phi i32 [ %v5_11d1c17, %dec_label_pc_11d88.preheader ], [ %v5_11d90, %dec_label_pc_11d80 ]
  %v2_11d84 = add i32 %v5_11d9016, -136
  %v3_11d84 = inttoptr i32 %v2_11d84 to i32*
  store i32 0, i32* %v3_11d84, align 4
  %v0_11d88.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11d88 = add i32 %v0_11d88.pre, -1
  store i32 %v1_11d88, i32* %r1.global-to-local, align 4
  %v6_11d88 = icmp slt i32 %v1_11d88, 0
  %v4_11d90 = mul i32 %v1_11d88, 4
  %v5_11d90 = add i32 %v4_11d90, %v16_11cf4
  br i1 %v6_11d88, label %dec_label_pc_11d98, label %dec_label_pc_11d80

dec_label_pc_11d98:                               ; preds = %dec_label_pc_11d80
  store i32 %v2_11d24, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_11da0 = call i32 @function_11328()
  store i32 %v0_11da0, i32* %r0.global-to-local, align 4
  %v1_11da4 = icmp slt i32 %v0_11da0, 0
  br i1 %v1_11da4, label %dec_label_pc_11e88, label %dec_label_pc_11dac

dec_label_pc_11dac:                               ; preds = %dec_label_pc_11d98
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_11db8 = call i32 @function_121f0(i32 17, i32* null, i32 %v2_11cfc)
  store i32 %v4_11db8, i32* %r0.global-to-local, align 4
  %v1_11dbc = icmp slt i32 %v4_11db8, 0
  br i1 %v1_11dbc, label %dec_label_pc_11dc4, label %dec_label_pc_11dec

dec_label_pc_11dc4:                               ; preds = %dec_label_pc_11dac
  %v0_11dc4 = call i32 @function_10e98()
  store i32 %v2_11d48, i32* %r1.global-to-local, align 4
  store i32 %v0_11dc4, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11dd8 = inttoptr i32 %v0_11dc4 to i32*
  %v2_11dd8 = load i32, i32* %v1_11dd8, align 4
  store i32 %v2_11dd8, i32* @r4, align 4
  %v3_11ddc = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11ddc = call i32 @function_10b40(i32 2, %_TYPEDEF_sigset_t* %v3_11ddc, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_11de4 = load i32, i32* @r4, align 4
  %v1_11de4 = load i32, i32* %r5.global-to-local, align 4
  %v2_11de4 = inttoptr i32 %v1_11de4 to i32*
  store i32 %v0_11de4, i32* %v2_11de4, align 4
  %v17_11e90.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e8c

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11dac
  %v2_11dec = load i32, i32* %stack_var_-424, align 4
  %v7_11df0 = icmp eq i32 %v2_11dec, 1
  %v2_11df8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_11df8, i32* @r4, align 4
  br i1 %v7_11df0, label %dec_label_pc_11e00, label %dec_label_pc_11e34

dec_label_pc_11e00:                               ; preds = %dec_label_pc_11dec
  store i32 %v2_11df8, i32* %r1.global-to-local, align 4
  store i32 %v2_11df8, i32* %r0.global-to-local, align 4
  %v2_11e08 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_11e08 = call i32 @function_1268c(%timespec* %v2_11e08, i32 %v2_11df8)
  store i32 %v3_11e08, i32* %r0.global-to-local, align 4
  store i32 %v3_11e08, i32* %r6.global-to-local, align 4
  %v0_11e10 = call i32 @function_10e98()
  store i32 %v2_11d48, i32* %r1.global-to-local, align 4
  store i32 %v0_11e10, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11e24 = inttoptr i32 %v0_11e10 to i32*
  %v2_11e24 = load i32, i32* %v1_11e24, align 4
  store i32 %v2_11e24, i32* @r4, align 4
  %v3_11e28 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11e28 = call i32 @function_10b40(i32 2, %_TYPEDEF_sigset_t* %v3_11e28, i32 0)
  store i32 %v4_11e28, i32* %r0.global-to-local, align 4
  %v0_11e2c = load i32, i32* @r4, align 4
  %v1_11e2c = load i32, i32* %r5.global-to-local, align 4
  %v2_11e2c = inttoptr i32 %v1_11e2c to i32*
  store i32 %v0_11e2c, i32* %v2_11e2c, align 4
  %v0_11e5c.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_11e34:                               ; preds = %dec_label_pc_11dec
  store i32 %v2_11d48, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_11e40 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11e40 = call i32 @function_10b40(i32 2, %_TYPEDEF_sigset_t* %v3_11e40, i32 0)
  store i32 %v4_11e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e50

dec_label_pc_11e50:                               ; preds = %dec_label_pc_11d64.dec_label_pc_11e50_crit_edge, %dec_label_pc_11e34
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_11d64.dec_label_pc_11e50_crit_edge ], [ %v2_11df8, %dec_label_pc_11e34 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_11e54 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_11e54 = call i32 @function_1268c(%timespec* %v2_11e54, i32 %storemerge.pre-phi)
  store i32 %v3_11e54, i32* %r0.global-to-local, align 4
  store i32 %v3_11e54, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e00, %dec_label_pc_11e50
  %v0_11e5c = phi i32 [ %v0_11e5c.pr, %dec_label_pc_11e00 ], [ %v3_11e54, %dec_label_pc_11e50 ]
  %v2_11e5c = icmp eq i32 %v0_11e5c, 0
  br i1 %v2_11e5c, label %dec_label_pc_11e80, label %dec_label_pc_11e64

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11e5c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_11e6c = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_11e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e8c

dec_label_pc_11e80:                               ; preds = %dec_label_pc_11cf4, %dec_label_pc_11e5c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e8c

dec_label_pc_11e88:                               ; preds = %dec_label_pc_11d48, %dec_label_pc_11d98, %dec_label_pc_11d24
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e8c

dec_label_pc_11e8c:                               ; preds = %dec_label_pc_11e64, %dec_label_pc_11e80, %dec_label_pc_11dc4, %dec_label_pc_11e88
  %v17_11e90 = phi i32 [ %v3_11e6c, %dec_label_pc_11e64 ], [ 0, %dec_label_pc_11e80 ], [ %v17_11e90.pre, %dec_label_pc_11dc4 ], [ -1, %dec_label_pc_11e88 ]
  %v2_11e90 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11e90, i32* @r4, align 4
  store i32 %v6_11cf4, i32* @r5, align 4
  store i32 %v9_11cf4, i32* @r6, align 4
  ret i32 %v17_11e90

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_11df8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_11d88, { 0, 2, 1 }
  uselistorder i32 %v2_11d48, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_11d40, { 1, 0, 2 }
  uselistorder i32 %v1_11d14, { 0, 2, 1 }
  uselistorder i32 %v16_11cf4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 7, 1, 9, 8, 11, 10, 3, 12, 14, 15, 13, 17, 16, 18, 22, 19, 2, 20, 21, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_121f0, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_10b40, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_11328, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11e8c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11e88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e80, { 1, 0 }
  uselistorder label %dec_label_pc_11e5c, { 1, 0 }
  uselistorder label %dec_label_pc_11e50, { 1, 0 }
  uselistorder label %dec_label_pc_11d80, { 1, 0 }
  uselistorder label %dec_label_pc_11d0c, { 1, 0 }
}

define i32 @function_11e98(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ec4:
  %stack_var_-8 = alloca i32, align 4
  %v3_11e98 = load i32, i32* @r4, align 4
  store i32 %v3_11e98, i32* %stack_var_-8, align 4
  %v2_11ec8 = load i32, i32* @global_var_1bca4.493, align 4
  %v2_11ecc = icmp eq i32 %v2_11ec8, 0
  br i1 %v2_11ecc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11ec4
  call void @__pseudo_branch(i32 %v2_11ec8)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11ec4, %bb
  %v2_11edc = load i32, i32* @global_var_1bca8.495, align 4
  %v2_11ee0 = icmp eq i32 %v2_11edc, 0
  br i1 %v2_11ee0, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_11ee4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_11ee4, i32* @r4, align 4
  %v9_11ee4 = load i32, i32* @r0, align 4
  ret i32 %v9_11ee4

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_11edc)
  %v2_11ef0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ef0, i32* @r4, align 4
  %v8_11ef0 = load i32, i32* @r0, align 4
  ret i32 %v8_11ef0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11f04() local_unnamed_addr {
dec_label_pc_11f04:
  ret i32 0
}

define i32 @function_11f0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_11f0c:
  %v1_11f0c = load i32, i32* @r0, align 4
  ret i32 %v1_11f0c
}

define i32 @function_11f10(i32 %arg1, i16* %arg2) local_unnamed_addr {
dec_label_pc_11f10:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_11f10 = load i32, i32* @r4, align 4
  store i32 %v3_11f10, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_11f20 = call i32 @function_107d4(i32 %arg1, i32 1)
  %v7_11f24 = icmp eq i32 %v2_11f20, -1
  br i1 %v7_11f24, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_11f10
  %v3_11f28 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_11f28, i32* @r4, align 4
  ret i32 %v2_11f20

bb5:                                              ; preds = %dec_label_pc_11f10
  %v0_11f2c = load i32, i32* @r4, align 4
  %v1_11f2c = inttoptr i32 %v0_11f2c to i16*
  %v5_11f34 = call i32 @function_109f0(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_137b4.498, i32 0, i32 0), i32 %v0_11f2c)
  %v1_11f38 = load i32, i32* %r5.global-to-local, align 4
  %v9_11f38 = icmp eq i32 %v5_11f34, %v1_11f38
  br i1 %v9_11f38, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_11f3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_11f3c, i32* @r4, align 4
  ret i32 %v5_11f34

bb7:                                              ; preds = %bb5
  %v0_11f40 = call i32 @function_1196c()
  %v0_11f44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f44, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v1_11f44 = load i32, i32* @r3, align 4
  %v2_11f44 = trunc i32 %v1_11f44 to i16
  store i16 %v2_11f44, i16* %v1_11f2c, align 2
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_11f40

; uselistorder directives
  uselistorder i32 %v2_11f20, { 1, 0 }
  uselistorder i32* @r3, { 4, 0, 3, 1, 2, 5 }
  uselistorder i1* @cpsr_z, { 6, 0, 1, 7, 3, 4, 2, 5 }
  uselistorder i32 ()* @function_1196c, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_109f0, { 8, 5, 0, 1, 2, 3, 4, 7, 6 }
  uselistorder i32 (i32, i32)* @function_107d4, { 0, 5, 9, 8, 11, 10, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_11f48(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f48:
  %v2_11f4c = load i32, i32* @global_var_1bcac.500, align 4
  %v2_11f50 = icmp eq i32 %v2_11f4c, 0
  br i1 %v2_11f50, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_11f48
  %v6_11f5c = load i32, i32* @r0, align 4
  ret i32 %v6_11f5c

bb2:                                              ; preds = %dec_label_pc_11f48
  store i32 1, i32* @global_var_1bcac.500, align 4
  store i32 4096, i32* @global_var_1bca0.451, align 4
  ret i32 undef
}

define i32 @function_11fa4(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_11fa4:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_11fa8 = mul i32 %arg2, 4
  %v5_11fa8 = add i32 %tmp, %v4_11fa8
  %v2_11fac = load i32, i32* %arg3, align 4
  %v2_11fb0 = ptrtoint i32* %stack_var_-120 to i32
  %v1_11fb4 = add i32 %v5_11fa8, 4
  %v9_11fb8 = icmp eq i32 %v1_11fb4, %v2_11fac
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1bc98.505, align 4
  store i32 %v1_11fb4, i32* @global_var_1bc9c.507, align 4
  store i32 %arg6, i32* @global_var_1bca8.495, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_11fb8, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_11fa4
  store i32 %v5_11fa8, i32* @global_var_1bc9c.507, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_11fa4, %bb
  %v2_11ff8 = bitcast i32* %stack_var_-120 to i8*
  %v3_11ff8 = call i32 @function_10f00(i8* %v2_11ff8, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1bc9c.507, align 4
  br label %dec_label_pc_12008

dec_label_pc_12008:                               ; preds = %dec_label_pc_12008, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_12008, %dec_label_pc_12008 ]
  %v1_12008 = inttoptr i32 %storemerge to i32*
  %v2_12008 = load i32, i32* %v1_12008, align 4
  %v4_12008 = add i32 %storemerge, 4
  %v2_1200c = icmp eq i32 %v2_12008, 0
  br i1 %v2_1200c, label %dec_label_pc_12018, label %dec_label_pc_12008

dec_label_pc_12018:                               ; preds = %dec_label_pc_12008
  store i32 %v4_12008, i32* @r4, align 4
  %v1_1203822 = inttoptr i32 %v4_12008 to i32*
  %v2_1203823 = load i32, i32* %v1_1203822, align 4
  %v2_1203c25 = icmp eq i32 %v2_1203823, 0
  br i1 %v2_1203c25, label %dec_label_pc_12044, label %dec_label_pc_12020

dec_label_pc_12020:                               ; preds = %dec_label_pc_12018, %dec_label_pc_12038
  %v5_12024 = phi i32 [ %v2_12038, %dec_label_pc_12038 ], [ %v2_1203823, %dec_label_pc_12018 ]
  %v2_12020 = icmp ugt i32 %v5_12024, 13
  %v7_12020 = icmp eq i32 %v5_12024, 14
  %v2_12024 = xor i1 %v2_12020, true
  %v3_12024 = or i1 %v7_12020, %v2_12024
  br i1 %v3_12024, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_12020
  %v6_12024 = and i32 %v5_12024, 536870912
  %v7_12024 = icmp ne i32 %v6_12024, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_12020, %bb42
  %v1_12030 = phi i1 [ %v2_12020, %dec_label_pc_12020 ], [ %v7_12024, %bb42 ]
  %v2_12028 = xor i1 %v1_12030, true
  %v3_12028 = or i1 %v7_12020, %v2_12028
  br i1 %v3_12028, label %bb44, label %dec_label_pc_12038

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_12038

dec_label_pc_12038:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_12028, i32 ptrtoint (i32* @global_var_10ee0.509 to i32))
  %v0_12034 = load i32, i32* @r4, align 4
  %v1_12034 = add i32 %v0_12034, 8
  store i32 %v1_12034, i32* @r4, align 4
  %v1_12038 = inttoptr i32 %v1_12034 to i32*
  %v2_12038 = load i32, i32* %v1_12038, align 4
  %v2_1203c = icmp eq i32 %v2_12038, 0
  br i1 %v2_1203c, label %dec_label_pc_12044, label %dec_label_pc_12020

dec_label_pc_12044:                               ; preds = %dec_label_pc_12038, %dec_label_pc_12018
  %v1_12048 = call i32 @function_1309c(i32 %v2_11fb0)
  store i32 %v1_12048, i32* @r0, align 4
  %v1_1204c = call i32 @function_11f48(i32 %v1_12048)
  store i32 %v1_1204c, i32* @r0, align 4
  %v2_12058 = icmp eq i32 %tmp37, 0
  br i1 %v2_12058, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_12044
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_12044, %bb45
  %v0_12068 = phi i32 [ %tmp37, %dec_label_pc_12044 ], [ 4096, %bb45 ]
  %v3_12060 = icmp eq i32 %tmp36, -1
  %v8_12060 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1bca0.451 to i32), i32* @r2, align 4
  store i32 %v0_12068, i32* @global_var_1bca0.451, align 4
  br i1 %v3_12060, label %dec_label_pc_12070, label %dec_label_pc_12098

dec_label_pc_12070:                               ; preds = %bb46
  %v0_12070 = call i32 @function_125fc()
  store i32 %v0_12070, i32* @r0, align 4
  store i32 %v0_12070, i32* @r4, align 4
  %v0_12078 = call i32 @function_125a4()
  %v0_1207c = load i32, i32* @r4, align 4
  %v9_1207c = icmp eq i32 %v0_1207c, %v0_12078
  br i1 %v9_1207c, label %dec_label_pc_12084, label %dec_label_pc_120c0

dec_label_pc_12084:                               ; preds = %dec_label_pc_12070
  %v1_12084 = call i32 @function_125d0(i32 %v0_12078)
  store i32 %v1_12084, i32* @r0, align 4
  store i32 %v1_12084, i32* @r4, align 4
  %v0_1208c = call i32 @function_12578()
  %v0_12090 = load i32, i32* @r4, align 4
  %v9_12090 = icmp eq i32 %v0_12090, %v0_1208c
  br i1 %v9_12090, label %dec_label_pc_12098, label %dec_label_pc_120c0

dec_label_pc_12098:                               ; preds = %dec_label_pc_12084, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_12060, label %dec_label_pc_1212c, label %dec_label_pc_120a4

dec_label_pc_120a4:                               ; preds = %dec_label_pc_12098
  %v9_120a8 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_120a8, label %dec_label_pc_120b0, label %dec_label_pc_120c0

dec_label_pc_120b0:                               ; preds = %dec_label_pc_120a4
  br label %dec_label_pc_120c0

dec_label_pc_120c0:                               ; preds = %dec_label_pc_120b0, %dec_label_pc_120a4, %dec_label_pc_12084, %dec_label_pc_12070
  %v3_120c8 = call i32 @function_11f10(i32 0, i16* inttoptr (i32 32768 to i16*))
  %v3_120d4 = call i32 @function_11f10(i32 1, i16* inttoptr (i32 32770 to i16*))
  %v3_120e0 = call i32 @function_11f10(i32 2, i16* inttoptr (i32 32770 to i16*))
  br label %dec_label_pc_1212c

dec_label_pc_1212c:                               ; preds = %dec_label_pc_120c0, %dec_label_pc_12098
  %v0_120f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_120f0 = inttoptr i32 %v0_120f0 to i32*
  %v2_120f0 = load i32, i32* %v1_120f0, align 4
  store i32 %v2_120f0, i32* @global_var_1bc30, align 4
  store i32 %arg5, i32* @global_var_1bca4.493, align 4
  %v2_1212c = icmp eq i32 %arg4, 0
  br i1 %v2_1212c, label %dec_label_pc_12168, label %bb47

bb47:                                             ; preds = %dec_label_pc_1212c
  br label %dec_label_pc_12168

dec_label_pc_12168:                               ; preds = %dec_label_pc_1212c, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_12178 = call i32 @function_10e98()
  %v2_12180 = inttoptr i32 %v1_12178 to i32*
  store i32 0, i32* %v2_12180, align 4
  %v0_121ac = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_121b8 = call i32 @function_11c60(i32 %v0_121ac)
  ret i32 %v1_121b8

; uselistorder directives
  uselistorder i32 %v2_12038, { 1, 0 }
  uselistorder i32 %v1_12034, { 1, 0 }
  uselistorder i1 %v2_12020, { 1, 0 }
  uselistorder i32 %v4_12008, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_11c60, { 0, 3, 2, 1 }
  uselistorder i32* @global_var_1bca0.451, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 29, 9, 10, 11, 12, 13, 14, 31, 15, 16, 30, 17, 18, 19, 36, 37, 38, 39, 32, 40, 41, 42, 43, 44, 45, 46, 47, 24, 48, 25, 26, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 23, 63, 64, 65, 66, 67, 68, 22, 69, 28, 70, 33, 34, 27, 71, 20, 21, 35, 72 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_12168, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_12038, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_12020, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_121f0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_121f0:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_121f0 = load i32, i32* @r4, align 4
  %v6_121f0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_121f4 = icmp eq i32* %arg2, null
  %v2_121f8 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_121f4, label %dec_label_pc_12264, label %dec_label_pc_12208

dec_label_pc_12208:                               ; preds = %dec_label_pc_121f0
  %v2_1220c = load i32, i32* %arg2, align 4
  %v4_1220c = add i32 %tmp, 4
  store i32 %v4_1220c, i32* @r1, align 4
  %v2_12210 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_12210, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_1220c, i32* %stack_var_-156, align 4
  %v3_1221c = call i32 @function_10ee0(i32 %v2_12210, i32 %v4_1220c, i32 128)
  store i32 %v3_1221c, i32* %r0.global-to-local, align 4
  %v0_12220 = load i32, i32* @r4, align 4
  %v1_12220 = add i32 %v0_12220, 132
  %v2_12220 = inttoptr i32 %v1_12220 to i32*
  %v3_12220 = load i32, i32* %v2_12220, align 4
  %v1_12224 = and i32 %v3_12220, 67108864
  %v2_12224 = icmp eq i32 %v1_12224, 0
  br i1 %v2_12224, label %dec_label_pc_12238, label %bb

bb:                                               ; preds = %dec_label_pc_12208
  br label %dec_label_pc_12254

dec_label_pc_12238:                               ; preds = %dec_label_pc_12208
  %v1_12240 = and i32 %v3_12220, 4
  %v2_12240 = icmp eq i32 %v1_12240, 0
  br i1 %v2_12240, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_12238
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_12238, %bb20
  br label %dec_label_pc_12254

dec_label_pc_12254:                               ; preds = %bb, %bb21
  %v2_12254 = icmp eq i32 %v0_12220, 0
  %v3_12258 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_12258 = select i1 %v2_12254, i32 0, i32 %v3_12258
  %v0_12264.pre = load i32, i32* @r5, align 4
  %v0_12274.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12264

dec_label_pc_12264:                               ; preds = %dec_label_pc_12254, %dec_label_pc_121f0
  %v0_12274 = phi i32 [ %arg1, %dec_label_pc_121f0 ], [ %v0_12274.pre, %dec_label_pc_12254 ]
  %v0_12264 = phi i32 [ %arg3, %dec_label_pc_121f0 ], [ %v0_12264.pre, %dec_label_pc_12254 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_121f0 ], [ %.v3_12258, %dec_label_pc_12254 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_12264 = icmp eq i32 %v0_12264, 0
  %.v2_121f8 = select i1 %v2_12264, i32 0, i32 %v2_121f8
  store i32 %.v2_121f8, i32* @r2, align 4
  store i32 %v0_12274, i32* %r0.global-to-local, align 4
  %v1_12278 = call i32 @function_122dc(i32 %v0_12274)
  store i32 %v1_12278, i32* %r0.global-to-local, align 4
  %v0_1227c = load i32, i32* @r5, align 4
  %v2_1227c = icmp eq i32 %v0_1227c, 0
  br i1 %v2_1227c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_12264
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_12264, %bb25
  %v0_1228c.pr = phi i32 [ 0, %dec_label_pc_12264 ], [ 1, %bb25 ]
  %v1_12284 = icmp slt i32 %v1_12278, 0
  br i1 %v1_12284, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_122c0

thread-pre-split:                                 ; preds = %bb26
  %v2_1228c = icmp eq i32 %v0_1228c.pr, 0
  store i32 %v1_12278, i32* @r4, align 4
  br i1 %v2_1228c, label %dec_label_pc_122c0, label %dec_label_pc_12298

dec_label_pc_12298:                               ; preds = %thread-pre-split
  %v2_12298 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_1227c, i32* %r0.global-to-local, align 4
  %v2_122a0 = inttoptr i32 %v0_1227c to i32*
  store i32 %v2_12298, i32* %v2_122a0, align 4
  %v3_122a0 = load i32, i32* %r0.global-to-local, align 4
  %v4_122a0 = add i32 %v3_122a0, 4
  store i32 %v4_122a0, i32* @r0, align 4
  %v2_122a4 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_122a4, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_122ac = call i32 @function_10ee0(i32 %v4_122a0, i32 %v2_122a4, i32 128)
  store i32 %v3_122ac, i32* %r0.global-to-local, align 4
  %v1_122b4 = load i32, i32* @r5, align 4
  %v2_122b4 = add i32 %v1_122b4, 136
  %v3_122b4 = inttoptr i32 %v2_122b4 to i32*
  %v1_122bc = load i32, i32* @r5, align 4
  %v2_122bc = add i32 %v1_122bc, 132
  %v3_122bc = inttoptr i32 %v2_122bc to i32*
  %v0_122c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_122c0

dec_label_pc_122c0:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_12298
  %v0_122c0 = phi i32 [ %v1_12278, %thread-pre-split ], [ %v0_122c0.pre, %dec_label_pc_12298 ], [ %v1_12278, %thread-pre-split.thread ]
  store i32 %v0_122c0, i32* %r0.global-to-local, align 4
  store i32 %v3_121f0, i32* @r4, align 4
  store i32 %v6_121f0, i32* @r5, align 4
  ret i32 %v0_122c0

; uselistorder directives
  uselistorder i32 %v0_122c0, { 1, 0 }
  uselistorder i32 %v0_1227c, { 1, 0, 2 }
  uselistorder i32 %v0_12274, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 1, 7, 2, 0 }
  uselistorder label %dec_label_pc_122c0, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_12254, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_122dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_122dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_122dc = load i32, i32* @r4, align 4
  store i32 %v3_122dc, i32* %stack_var_-8, align 4
  %v1_122e0 = load i32, i32* @r1, align 4
  %v2_122e0 = inttoptr i32 %v1_122e0 to %sigaction*
  %v3_122e0 = load i32, i32* @r2, align 4
  %v4_122e0 = inttoptr i32 %v3_122e0 to %sigaction*
  %v5_122e0 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_122e0, %sigaction* %v4_122e0)
  store i32 %v5_122e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_122e0, -4095
  br i1 %tmp, label %dec_label_pc_12300, label %dec_label_pc_122f0

dec_label_pc_122f0:                               ; preds = %dec_label_pc_122dc
  %v0_122f0 = call i32 @function_10e98()
  %v0_122f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_122f4 = sub i32 0, %v0_122f4
  %v2_122f8 = inttoptr i32 %v0_122f0 to i32*
  store i32 %v1_122f4, i32* %v2_122f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12300

dec_label_pc_12300:                               ; preds = %dec_label_pc_122dc, %dec_label_pc_122f0
  %v0_12300 = phi i32 [ %v5_122e0, %dec_label_pc_122dc ], [ -1, %dec_label_pc_122f0 ]
  %v2_12304 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12304, i32* %r4.global-to-local, align 4
  ret i32 %v0_12300

; uselistorder directives
  uselistorder i32 %v5_122e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12300, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_12308(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_12308:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_12330() local_unnamed_addr {
dec_label_pc_12330:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_12340 = load i32, i32* @r0, align 4
  %v4_12340 = call i32 @fstat(i32 %v0_12340, %stat* %tmp4)
  store i32 %v4_12340, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12340, -4095
  br i1 %tmp, label %dec_label_pc_12364, label %dec_label_pc_12350

dec_label_pc_12350:                               ; preds = %dec_label_pc_12330
  %v0_12350 = call i32 @function_10e98()
  %v0_12354 = load i32, i32* %r4.global-to-local, align 4
  %v1_12354 = sub i32 0, %v0_12354
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1235c = inttoptr i32 %v0_12350 to i32*
  store i32 %v1_12354, i32* %v2_1235c, align 4
  br label %dec_label_pc_12374

dec_label_pc_12364:                               ; preds = %dec_label_pc_12330
  %v2_12364 = icmp eq i32 %v4_12340, 0
  store i32 74612, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12364, i32 ptrtoint (i32* @global_var_12a4c.526 to i32))
  br label %dec_label_pc_12374

dec_label_pc_12374:                               ; preds = %dec_label_pc_12350, %dec_label_pc_12364
  %v0_12374 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_12374

; uselistorder directives
  uselistorder i32 %v4_12340, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 5, 15, 13, 14, 8, 9, 2, 3, 4, 0, 1, 6, 7, 10, 11, 12 }
  uselistorder label %dec_label_pc_12374, { 1, 0 }
}

define i32 @function_12380(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12380:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_12380 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12388 = call i32 @function_12414()
  store i32 %v0_12388, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_12388, 1
  br i1 %tmp8, label %dec_label_pc_1240c, label %dec_label_pc_123f8.preheader

dec_label_pc_123f8.preheader:                     ; preds = %dec_label_pc_12380
  %v5_12390 = load i32, i32* @r4, align 4
  %v7_12390 = add i32 %v5_12390, %v0_12388
  store i32 %v7_12390, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_123f8

dec_label_pc_1239c:                               ; preds = %dec_label_pc_123f8
  %v1_1239c = add i32 %v2_123ac, 16
  %v2_1239c = inttoptr i32 %v1_1239c to i32*
  %v3_1239c = load i32, i32* %v2_1239c, align 4
  store i32 %v3_1239c, i32* @lr, align 4
  %v2_123a0 = inttoptr i32 %v1_123fc to i32*
  %v3_123a0 = load i32, i32* %v2_123a0, align 4
  store i32 %v3_123a0, i32* %r2.global-to-local, align 4
  %v1_123a4 = add i32 %v2_123ac, 18
  %v2_123a4 = inttoptr i32 %v1_123a4 to i8*
  %v3_123a4 = load i8, i8* %v2_123a4, align 1
  %v4_123a4 = zext i8 %v3_123a4 to i32
  store i32 %v4_123a4, i32* %ip.global-to-local, align 4
  %v3_123a8 = sdiv i32 %v3_1239c, 256
  store i32 %v3_123a8, i32* %r3.global-to-local, align 4
  %v1_123ac = trunc i32 %v3_1239c to i8
  %v4_123ac = inttoptr i32 %v1_123fc to i8*
  store i8 %v1_123ac, i8* %v4_123ac, align 1
  %v0_123b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_123b0 = load i32, i32* @r4, align 4
  %v2_123b0 = add i32 %v1_123b0, 4
  %v3_123b0 = inttoptr i32 %v2_123b0 to i32*
  store i32 %v0_123b0, i32* %v3_123b0, align 4
  %v0_123b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_123b4 = trunc i32 %v0_123b4 to i8
  %v2_123b4 = load i32, i32* @r4, align 4
  %v3_123b4 = add i32 %v2_123b4, 10
  %v4_123b4 = inttoptr i32 %v3_123b4 to i8*
  store i8 %v1_123b4, i8* %v4_123b4, align 1
  %v0_123b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123b8 = trunc i32 %v0_123b8 to i8
  %v2_123b8 = load i32, i32* @r4, align 4
  %v3_123b8 = add i32 %v2_123b8, 9
  %v4_123b8 = inttoptr i32 %v3_123b8 to i8*
  store i8 %v1_123b8, i8* %v4_123b8, align 1
  %v0_123bc = load i32, i32* @r4, align 4
  %v1_123bc = add i32 %v0_123bc, 8
  %v2_123bc = inttoptr i32 %v1_123bc to i8*
  %v3_123bc = load i8, i8* %v2_123bc, align 1
  %v4_123bc = zext i8 %v3_123bc to i32
  store i32 %v4_123bc, i32* %r2.global-to-local, align 4
  %v0_123c0 = load i32, i32* @r5, align 4
  %v1_123c0 = add i32 %v0_123c0, 1
  %v2_123c0 = inttoptr i32 %v1_123c0 to i8*
  %v3_123c0 = load i8, i8* %v2_123c0, align 1
  %v4_123c0 = zext i8 %v3_123c0 to i32
  store i32 %v4_123c0, i32* %r3.global-to-local, align 4
  %v4_123c4 = mul nuw nsw i32 %v4_123c0, 256
  %v5_123c4 = or i32 %v4_123c4, %v4_123bc
  %v1_123c8 = add nsw i32 %v5_123c4, -19
  store i32 %v1_123c8, i32* @r2, align 4
  %v3_123cc = call i32 @function_10ef0(i32 %v1_12404, i32 %v1_12400, i32 %v1_123c8)
  %v0_123d0 = load i32, i32* @r4, align 4
  %v1_123d0 = add i32 %v0_123d0, 8
  %v2_123d0 = inttoptr i32 %v1_123d0 to i8*
  %v3_123d0 = load i8, i8* %v2_123d0, align 1
  %v4_123d0 = zext i8 %v3_123d0 to i32
  store i32 %v4_123d0, i32* %r3.global-to-local, align 4
  %v0_123d4 = load i32, i32* @r5, align 4
  %v1_123d4 = add i32 %v0_123d4, 1
  %v2_123d4 = inttoptr i32 %v1_123d4 to i8*
  %v3_123d4 = load i8, i8* %v2_123d4, align 1
  %v4_123d4 = zext i8 %v3_123d4 to i32
  store i32 %v0_123d0, i32* @r0, align 4
  %v4_123dc = mul nuw nsw i32 %v4_123d4, 256
  %v5_123dc = or i32 %v4_123dc, %v4_123d0
  store i32 %v5_123dc, i32* @r2, align 4
  store i32 %v0_123d0, i32* @r1, align 4
  %v3_123e4 = call i32 @function_10ef0(i32 %v0_123d0, i32 %v0_123d0, i32 %v5_123dc)
  %v0_123e8 = load i32, i32* @r4, align 4
  %v1_123e8 = add i32 %v0_123e8, 8
  %v2_123e8 = inttoptr i32 %v1_123e8 to i8*
  %v3_123e8 = load i8, i8* %v2_123e8, align 1
  %v4_123e8 = zext i8 %v3_123e8 to i32
  store i32 %v4_123e8, i32* %r3.global-to-local, align 4
  %v0_123ec = load i32, i32* @r5, align 4
  %v1_123ec = add i32 %v0_123ec, 1
  %v2_123ec = inttoptr i32 %v1_123ec to i8*
  %v3_123ec = load i8, i8* %v2_123ec, align 1
  %v4_123ec = zext i8 %v3_123ec to i32
  store i32 %v4_123ec, i32* @r2, align 4
  %v4_123f0 = mul nuw nsw i32 %v4_123ec, 256
  %v5_123f0 = or i32 %v4_123f0, %v4_123e8
  store i32 %v5_123f0, i32* %r3.global-to-local, align 4
  %v2_123f4 = add i32 %v5_123f0, %v0_123e8
  store i32 %v2_123f4, i32* @r4, align 4
  %v1_123f8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_123f8

dec_label_pc_123f8:                               ; preds = %dec_label_pc_123f8.preheader, %dec_label_pc_1239c
  %v1_123f8 = phi i32 [ %v7_12390, %dec_label_pc_123f8.preheader ], [ %v1_123f8.pre, %dec_label_pc_1239c ]
  %v2_123ac = phi i32 [ %v5_12390, %dec_label_pc_123f8.preheader ], [ %v2_123f4, %dec_label_pc_1239c ]
  %v3_123f8 = icmp ult i32 %v2_123ac, %v1_123f8
  %v1_123fc = add i32 %v2_123ac, 8
  store i32 %v1_123fc, i32* @r5, align 4
  %v1_12400 = add i32 %v2_123ac, 19
  store i32 %v1_12400, i32* @r1, align 4
  %v1_12404 = add i32 %v2_123ac, 11
  store i32 %v1_12404, i32* @r0, align 4
  br i1 %v3_123f8, label %dec_label_pc_1239c, label %dec_label_pc_1240c.loopexit

dec_label_pc_1240c.loopexit:                      ; preds = %dec_label_pc_123f8
  %v0_1240c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1240c

dec_label_pc_1240c:                               ; preds = %dec_label_pc_12380, %dec_label_pc_1240c.loopexit
  %v0_1240c = phi i32 [ %v0_1240c.pre, %dec_label_pc_1240c.loopexit ], [ %v0_12388, %dec_label_pc_12380 ]
  store i32 %v6_12380, i32* @r5, align 4
  ret i32 %v0_1240c

; uselistorder directives
  uselistorder i32 %v1_12404, { 1, 0 }
  uselistorder i32 %v1_12400, { 1, 0 }
  uselistorder i32 %v1_123fc, { 2, 1, 0 }
  uselistorder i32 %v2_123ac, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_123d0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_1239c, { 1, 0, 2 }
  uselistorder i32 %v5_12390, { 1, 0 }
  uselistorder i32 %v0_12388, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_10ef0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1240c, { 1, 0 }
  uselistorder label %dec_label_pc_123f8, { 1, 0 }
}

define i32 @function_12414() local_unnamed_addr {
dec_label_pc_12414:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_12418 = load i32, i32* @r4, align 4
  %v9_12418 = load i32, i32* @r6, align 4
  %v0_1241c = load i32, i32* @r2, align 4
  %v1_1241c = add i32 %v0_1241c, 6
  %v2_12424 = ptrtoint i32* %stack_var_-60 to i32
  %v1_12428 = and i32 %v1_1241c, -4
  store i32 %v1_12428, i32* %r3.global-to-local, align 4
  %v2_1242c = sub i32 %v2_12424, %v1_12428
  %v0_12430 = load i32, i32* @r1, align 4
  store i32 %v0_12430, i32* %r8.global-to-local, align 4
  store i32 %v0_1241c, i32* %stack_var_-60, align 4
  store i32 %v2_1242c, i32* %sl.global-to-local, align 4
  %v0_1243c = load i32, i32* @r0, align 4
  %v1_12440 = inttoptr i32 %v2_1242c to %linux_dirent64*
  store i32 %v2_1242c, i32* %r1.global-to-local, align 4
  %v5_12444 = call i32 @getdents64(i32 %v0_1243c, %linux_dirent64* %v1_12440, i32 %v0_1241c)
  store i32 %v5_12444, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_12444, -4095
  br i1 %tmp, label %dec_label_pc_12468, label %dec_label_pc_12454

dec_label_pc_12454:                               ; preds = %dec_label_pc_12414
  %v0_12454 = call i32 @function_10e98()
  %v0_12458 = load i32, i32* @r6, align 4
  %v1_12458 = sub i32 0, %v0_12458
  store i32 %v1_12458, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_12460 = inttoptr i32 %v0_12454 to i32*
  store i32 %v1_12458, i32* %v2_12460, align 4
  %v0_12470.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12470

dec_label_pc_12468:                               ; preds = %dec_label_pc_12414
  br i1 false, label %dec_label_pc_12470, label %dec_label_pc_12478

dec_label_pc_12470:                               ; preds = %dec_label_pc_12468, %dec_label_pc_12454
  %v0_12470 = phi i32 [ -1, %dec_label_pc_12468 ], [ %v0_12470.pre, %dec_label_pc_12454 ]
  store i32 %v0_12470, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1256c

dec_label_pc_12478:                               ; preds = %dec_label_pc_12468
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12480 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12480, i32* @r5, align 4
  %v0_12484 = load i32, i32* @sp, align 4
  store i32 %v0_12484, i32* @r4, align 4
  br label %dec_label_pc_12548

dec_label_pc_12494:                               ; preds = %dec_label_pc_12548
  %v2_12560 = add i32 %v3_1254c, %v0_12560
  %v1_12494 = add i32 %v0_12498, 17
  %v2_12494 = inttoptr i32 %v1_12494 to i8*
  %v3_12494 = load i8, i8* %v2_12494, align 1
  %v4_12494 = zext i8 %v3_12494 to i32
  %v2_12498 = inttoptr i32 %v1_12554 to i8*
  %v3_12498 = load i8, i8* %v2_12498, align 1
  %v4_12498 = zext i8 %v3_12498 to i32
  %v4_1249c = mul nuw nsw i32 %v4_12494, 256
  %v5_1249c = or i32 %v4_12498, %v4_1249c
  %v1_124a0 = add nuw nsw i32 %v5_1249c, 3
  %v1_124a4 = and i32 %v1_124a0, 131068
  store i32 %v1_124a4, i32* %r3.global-to-local, align 4
  %v2_124a8 = add i32 %v1_124a4, %v2_124e8
  store i32 %v2_124a8, i32* %sb.global-to-local, align 4
  %v9_124ac = icmp eq i32 %v2_124a8, %v2_12560
  %v1_124b0 = and i32 %v1_124a0, 128
  %v2_124b4 = icmp eq i32 %v1_124b0, 0
  %v3_124b4 = or i1 %v9_124ac, %v2_124b4
  br i1 %v3_124b4, label %dec_label_pc_124e8, label %dec_label_pc_124b8

dec_label_pc_124b8:                               ; preds = %dec_label_pc_12494
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_124c8 = call i32 @function_12628(i32 %v0_1243c, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_124cc = load i32, i32* @r5, align 4
  %v1_124cc = load i32, i32* %r8.global-to-local, align 4
  %v9_124cc = icmp eq i32 %v0_124cc, %v1_124cc
  br i1 %v9_124cc, label %dec_label_pc_124d4, label %dec_label_pc_12568

dec_label_pc_124d4:                               ; preds = %dec_label_pc_124b8
  %v0_124d4 = call i32 @function_10e98()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_124e0 = inttoptr i32 %v0_124d4 to i32*
  store i32 22, i32* %v2_124e0, align 4
  %v0_1256c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1256c

dec_label_pc_124e8:                               ; preds = %dec_label_pc_12494
  %v3_124b011 = udiv i32 %v1_124a0, 256
  %v1_124e8 = trunc i32 %v3_124b011 to i8
  %v3_124e8 = add i32 %v2_124e8, 17
  %v4_124e8 = inttoptr i32 %v3_124e8 to i8*
  store i8 %v1_124e8, i8* %v4_124e8, align 1
  %v0_124ec = load i32, i32* %r3.global-to-local, align 4
  %v1_124ec = trunc i32 %v0_124ec to i8
  %v2_124ec = load i32, i32* @r5, align 4
  %v3_124ec = add i32 %v2_124ec, 16
  %v4_124ec = inttoptr i32 %v3_124ec to i8*
  store i8 %v1_124ec, i8* %v4_124ec, align 1
  %v0_124f0 = load i32, i32* @r4, align 4
  %v1_124f0 = add i32 %v0_124f0, 8
  %v1_124f4 = inttoptr i32 %v1_124f0 to i32*
  %v2_124f4 = load i32, i32* %v1_124f4, align 4
  %v3_124f4 = add i32 %v0_124f0, 12
  %v4_124f4 = inttoptr i32 %v3_124f4 to i32*
  %v5_124f4 = load i32, i32* %v4_124f4, align 4
  store i32 %v5_124f4, i32* %r3.global-to-local, align 4
  %v1_12500 = inttoptr i32 %v0_124f0 to i32*
  %v2_12500 = load i32, i32* %v1_12500, align 4
  %v3_12500 = add i32 %v0_124f0, 4
  %v4_12500 = inttoptr i32 %v3_12500 to i32*
  %v5_12500 = load i32, i32* %v4_12500, align 4
  store i32 %v5_12500, i32* %r3.global-to-local, align 4
  %v0_12504 = load i32, i32* @r5, align 4
  %v1_12504 = inttoptr i32 %v0_12504 to i32*
  store i32 %v2_12500, i32* %v1_12504, align 4
  %v3_12504 = add i32 %v0_12504, 4
  %v4_12504 = inttoptr i32 %v3_12504 to i32*
  %v5_12504 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12504, i32* %v4_12504, align 4
  %v0_12508 = load i32, i32* @r4, align 4
  %v1_12508 = add i32 %v0_12508, 8
  %v1_1250c = inttoptr i32 %v1_12508 to i32*
  %v2_1250c = load i32, i32* %v1_1250c, align 4
  %v3_1250c = add i32 %v0_12508, 12
  %v4_1250c = inttoptr i32 %v3_1250c to i32*
  %v5_1250c = load i32, i32* %v4_1250c, align 4
  store i32 %v5_1250c, i32* %r3.global-to-local, align 4
  %v1_12510 = load i32, i32* @r5, align 4
  %v2_12510 = add i32 %v1_12510, 8
  %v3_12510 = inttoptr i32 %v2_12510 to i32*
  store i32 %v2_1250c, i32* %v3_12510, align 4
  %v0_12514 = load i32, i32* %r3.global-to-local, align 4
  %v1_12514 = load i32, i32* @r5, align 4
  %v2_12514 = add i32 %v1_12514, 12
  %v3_12514 = inttoptr i32 %v2_12514 to i32*
  store i32 %v0_12514, i32* %v3_12514, align 4
  %v0_12518 = load i32, i32* @r4, align 4
  %v1_12518 = add i32 %v0_12518, 18
  %v2_12518 = inttoptr i32 %v1_12518 to i8*
  %v3_12518 = load i8, i8* %v2_12518, align 1
  %v4_12518 = zext i8 %v3_12518 to i32
  store i32 %v4_12518, i32* %r3.global-to-local, align 4
  %v2_1251c = load i32, i32* @r5, align 4
  %v3_1251c = add i32 %v2_1251c, 18
  %v4_1251c = inttoptr i32 %v3_1251c to i8*
  store i8 %v3_12518, i8* %v4_1251c, align 1
  %v0_12520 = load i32, i32* @r4, align 4
  %v1_12520 = add i32 %v0_12520, 16
  %v2_12520 = inttoptr i32 %v1_12520 to i8*
  %v3_12520 = load i8, i8* %v2_12520, align 1
  %v4_12520 = zext i8 %v3_12520 to i32
  %v0_12524 = load i32, i32* %r7.global-to-local, align 4
  %v1_12524 = add i32 %v0_12524, 1
  %v2_12524 = inttoptr i32 %v1_12524 to i8*
  %v3_12524 = load i8, i8* %v2_12524, align 1
  %v4_12524 = zext i8 %v3_12524 to i32
  store i32 %v4_12524, i32* %r3.global-to-local, align 4
  %v4_12528 = mul nuw nsw i32 %v4_12524, 256
  %v5_12528 = or i32 %v4_12528, %v4_12520
  %v1_1252c = add nsw i32 %v5_12528, -19
  store i32 %v1_1252c, i32* @r2, align 4
  %v3_12530 = call i32 @function_10ee0(i32 %v1_12558, i32 %v1_1255c, i32 %v1_1252c)
  %v0_12534 = load i32, i32* @r4, align 4
  %v1_12534 = add i32 %v0_12534, 16
  %v2_12534 = inttoptr i32 %v1_12534 to i8*
  %v3_12534 = load i8, i8* %v2_12534, align 1
  %v4_12534 = zext i8 %v3_12534 to i32
  store i32 %v4_12534, i32* %r3.global-to-local, align 4
  %v0_12538 = load i32, i32* %r7.global-to-local, align 4
  %v1_12538 = add i32 %v0_12538, 1
  %v2_12538 = inttoptr i32 %v1_12538 to i8*
  %v3_12538 = load i8, i8* %v2_12538, align 1
  %v4_12538 = zext i8 %v3_12538 to i32
  %v4_1253c = mul nuw nsw i32 %v4_12538, 256
  %v5_1253c = or i32 %v4_1253c, %v4_12534
  store i32 %v5_1253c, i32* %r3.global-to-local, align 4
  %v2_12540 = add i32 %v5_1253c, %v0_12534
  store i32 %v2_12540, i32* @r4, align 4
  %v0_12544 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12544, i32* @r5, align 4
  %v1_12548.pre = load i32, i32* @r6, align 4
  %v0_12560.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12548

dec_label_pc_12548:                               ; preds = %dec_label_pc_12478, %dec_label_pc_124e8
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_12478 ], [ %v2_124f4, %dec_label_pc_124e8 ]
  %v0_12560 = phi i32 [ %v0_12480, %dec_label_pc_12478 ], [ %v0_12560.pre, %dec_label_pc_124e8 ]
  %v2_124e8 = phi i32 [ %v0_12480, %dec_label_pc_12478 ], [ %v0_12544, %dec_label_pc_124e8 ]
  %v0_12498 = phi i32 [ %v0_12484, %dec_label_pc_12478 ], [ %v2_12540, %dec_label_pc_124e8 ]
  %v1_12548 = phi i32 [ %v5_12444, %dec_label_pc_12478 ], [ %v1_12548.pre, %dec_label_pc_124e8 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_12478 ], [ %v5_124f4, %dec_label_pc_124e8 ]
  %v0_12548 = load i32, i32* %sl.global-to-local, align 4
  %v2_12548 = add i32 %v0_12548, %v1_12548
  store i32 %v2_12548, i32* %r3.global-to-local, align 4
  %v3_1254c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_1254c, i32* @r2, align 4
  %v3_12550 = icmp ult i32 %v0_12498, %v2_12548
  %v1_12554 = add i32 %v0_12498, 16
  store i32 %v1_12554, i32* %r7.global-to-local, align 4
  %v1_12558 = add i32 %v2_124e8, 19
  store i32 %v1_12558, i32* @r0, align 4
  %v1_1255c = add i32 %v0_12498, 19
  store i32 %v1_1255c, i32* @r1, align 4
  br i1 %v3_12550, label %dec_label_pc_12494, label %dec_label_pc_12568

dec_label_pc_12568:                               ; preds = %dec_label_pc_12548, %dec_label_pc_124b8
  %v1_12568 = phi i32 [ %v0_124cc, %dec_label_pc_124b8 ], [ %v2_124e8, %dec_label_pc_12548 ]
  %v0_12568 = phi i32 [ %v1_124cc, %dec_label_pc_124b8 ], [ %v0_12560, %dec_label_pc_12548 ]
  %v2_12568 = sub i32 %v1_12568, %v0_12568
  store i32 %v2_12568, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1256c

dec_label_pc_1256c:                               ; preds = %dec_label_pc_124d4, %dec_label_pc_12470, %dec_label_pc_12568
  %v0_1256c = phi i32 [ %v0_1256c.pre, %dec_label_pc_124d4 ], [ %v0_12470, %dec_label_pc_12470 ], [ %v2_12568, %dec_label_pc_12568 ]
  store i32 %v3_12418, i32* @r4, align 4
  store i32 %v9_12418, i32* %r6.global-to-local, align 4
  ret i32 %v0_1256c

; uselistorder directives
  uselistorder i32 %v1_1255c, { 1, 0 }
  uselistorder i32 %v1_12558, { 1, 0 }
  uselistorder i32 %v1_12554, { 1, 0 }
  uselistorder i32 %v3_1254c, { 1, 0 }
  uselistorder i32 %v0_12498, { 2, 1, 3, 0 }
  uselistorder i32 %v2_124e8, { 0, 3, 1, 2 }
  uselistorder i32 %v0_124f0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12480, { 1, 0, 2 }
  uselistorder i32 %v5_12444, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_10ee0, { 4, 1, 0, 3, 6, 5, 2 }
  uselistorder i32 128, { 11, 12, 26, 13, 27, 18, 16, 21, 2, 19, 3, 20, 4, 14, 15, 22, 23, 6, 0, 1, 7, 8, 9, 24, 5, 25, 17, 10 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32* @r6, { 3, 88, 89, 90, 275, 276, 243, 244, 245, 246, 247, 248, 249, 250, 262, 277, 278, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 4, 75, 2, 76, 1, 77, 218, 219, 220, 0, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 5, 80, 81, 82, 83, 84, 12, 85, 86, 87, 109, 110, 111, 112, 11, 113, 114, 115, 6, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 266, 264, 265, 267, 268, 13, 269, 270, 271, 272, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 7, 289, 290, 291, 292, 293, 294, 296, 8, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 9, 10, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343 }
  uselistorder label %dec_label_pc_1256c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12548, { 1, 0 }
}

define i32 @function_12578() local_unnamed_addr {
dec_label_pc_12578:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12578 = load i32, i32* @r4, align 4
  store i32 %v3_12578, i32* %stack_var_-8, align 4
  %v0_12580 = load i32, i32* @r0, align 4
  store i32 %v0_12580, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12580, -4095
  br i1 %tmp, label %dec_label_pc_1259c, label %dec_label_pc_1258c

dec_label_pc_1258c:                               ; preds = %dec_label_pc_12578
  %v0_1258c = call i32 @function_10e98()
  %v0_12590 = load i32, i32* %r4.global-to-local, align 4
  %v1_12590 = sub i32 0, %v0_12590
  %v2_12594 = inttoptr i32 %v0_1258c to i32*
  store i32 %v1_12590, i32* %v2_12594, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_125a0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1259c

dec_label_pc_1259c:                               ; preds = %dec_label_pc_12578, %dec_label_pc_1258c
  %v2_125a0 = phi i32 [ %v3_12578, %dec_label_pc_12578 ], [ %v2_125a0.pre, %dec_label_pc_1258c ]
  %v0_1259c = phi i32 [ %v0_12580, %dec_label_pc_12578 ], [ -1, %dec_label_pc_1258c ]
  store i32 %v2_125a0, i32* @r4, align 4
  ret i32 %v0_1259c

; uselistorder directives
  uselistorder i32 %v0_12580, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1259c, { 1, 0 }
}

define i32 @function_125a4() local_unnamed_addr {
dec_label_pc_125a4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125a4 = load i32, i32* @r4, align 4
  store i32 %v3_125a4, i32* %stack_var_-8, align 4
  %v0_125ac = load i32, i32* @r0, align 4
  store i32 %v0_125ac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_125ac, -4095
  br i1 %tmp, label %dec_label_pc_125c8, label %dec_label_pc_125b8

dec_label_pc_125b8:                               ; preds = %dec_label_pc_125a4
  %v0_125b8 = call i32 @function_10e98()
  %v0_125bc = load i32, i32* %r4.global-to-local, align 4
  %v1_125bc = sub i32 0, %v0_125bc
  %v2_125c0 = inttoptr i32 %v0_125b8 to i32*
  store i32 %v1_125bc, i32* %v2_125c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_125cc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_125c8

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125a4, %dec_label_pc_125b8
  %v2_125cc = phi i32 [ %v3_125a4, %dec_label_pc_125a4 ], [ %v2_125cc.pre, %dec_label_pc_125b8 ]
  %v0_125c8 = phi i32 [ %v0_125ac, %dec_label_pc_125a4 ], [ -1, %dec_label_pc_125b8 ]
  store i32 %v2_125cc, i32* @r4, align 4
  ret i32 %v0_125c8

; uselistorder directives
  uselistorder i32 %v0_125ac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125c8, { 1, 0 }
}

define i32 @function_125d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_125d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125d0 = load i32, i32* @r4, align 4
  store i32 %v3_125d0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_125f4, label %dec_label_pc_125e4

dec_label_pc_125e4:                               ; preds = %dec_label_pc_125d0
  %v0_125e4 = call i32 @function_10e98()
  %v0_125e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_125e8 = sub i32 0, %v0_125e8
  %v2_125ec = inttoptr i32 %v0_125e4 to i32*
  store i32 %v1_125e8, i32* %v2_125ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_125f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_125f4

dec_label_pc_125f4:                               ; preds = %dec_label_pc_125d0, %dec_label_pc_125e4
  %v2_125f8 = phi i32 [ %v3_125d0, %dec_label_pc_125d0 ], [ %v2_125f8.pre, %dec_label_pc_125e4 ]
  %v0_125f4 = phi i32 [ %arg1, %dec_label_pc_125d0 ], [ -1, %dec_label_pc_125e4 ]
  store i32 %v2_125f8, i32* %r4.global-to-local, align 4
  ret i32 %v0_125f4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125f4, { 1, 0 }
}

define i32 @function_125fc() local_unnamed_addr {
dec_label_pc_125fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125fc = load i32, i32* @r4, align 4
  store i32 %v3_125fc, i32* %stack_var_-8, align 4
  %v0_12604 = load i32, i32* @r0, align 4
  store i32 %v0_12604, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12604, -4095
  br i1 %tmp, label %dec_label_pc_12620, label %dec_label_pc_12610

dec_label_pc_12610:                               ; preds = %dec_label_pc_125fc
  %v0_12610 = call i32 @function_10e98()
  %v0_12614 = load i32, i32* %r4.global-to-local, align 4
  %v1_12614 = sub i32 0, %v0_12614
  %v2_12618 = inttoptr i32 %v0_12610 to i32*
  store i32 %v1_12614, i32* %v2_12618, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12624.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12620

dec_label_pc_12620:                               ; preds = %dec_label_pc_125fc, %dec_label_pc_12610
  %v2_12624 = phi i32 [ %v3_125fc, %dec_label_pc_125fc ], [ %v2_12624.pre, %dec_label_pc_12610 ]
  %v0_12620 = phi i32 [ %v0_12604, %dec_label_pc_125fc ], [ -1, %dec_label_pc_12610 ]
  store i32 %v2_12624, i32* %r4.global-to-local, align 4
  ret i32 %v0_12620

; uselistorder directives
  uselistorder i32 %v0_12604, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12620, { 1, 0 }
}

define i32 @function_12628(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12628:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1266c, label %dec_label_pc_12658

dec_label_pc_12658:                               ; preds = %dec_label_pc_12628
  %v0_12658 = call i32 @function_10e98()
  %v0_1265c = load i32, i32* %r4.global-to-local, align 4
  %v1_1265c = sub i32 0, %v0_1265c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12664 = inttoptr i32 %v0_12658 to i32*
  store i32 %v1_1265c, i32* %v2_12664, align 4
  %v0_12674.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12674

dec_label_pc_1266c:                               ; preds = %dec_label_pc_12628
  %v2_1266c = icmp eq i32 %arg1, 0
  br i1 %v2_1266c, label %dec_label_pc_12680, label %dec_label_pc_12674

dec_label_pc_12674:                               ; preds = %dec_label_pc_1266c, %dec_label_pc_12658
  %v0_12674 = phi i32 [ %arg1, %dec_label_pc_1266c ], [ %v0_12674.pre, %dec_label_pc_12658 ]
  br label %dec_label_pc_12684

dec_label_pc_12680:                               ; preds = %dec_label_pc_1266c
  br label %dec_label_pc_12684

dec_label_pc_12684:                               ; preds = %dec_label_pc_12674, %dec_label_pc_12680
  %v14_12688 = phi i32 [ %v0_12674, %dec_label_pc_12674 ], [ %tmp9, %dec_label_pc_12680 ]
  ret i32 %v14_12688

; uselistorder directives
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_12684, { 1, 0 }
}

define i32 @function_1268c(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1268c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_1268c = load i32, i32* @r4, align 4
  store i32 %v3_1268c, i32* %stack_var_-8, align 4
  %v6_12690 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_12690, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_12690, -4095
  br i1 %tmp6, label %dec_label_pc_126b0, label %dec_label_pc_126a0

dec_label_pc_126a0:                               ; preds = %dec_label_pc_1268c
  %v0_126a0 = call i32 @function_10e98()
  %v0_126a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_126a4 = sub i32 0, %v0_126a4
  %v2_126a8 = inttoptr i32 %v0_126a0 to i32*
  store i32 %v1_126a4, i32* %v2_126a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126b0

dec_label_pc_126b0:                               ; preds = %dec_label_pc_1268c, %dec_label_pc_126a0
  %v0_126b0 = phi i32 [ %v6_12690, %dec_label_pc_1268c ], [ -1, %dec_label_pc_126a0 ]
  %v2_126b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_126b4, i32* %r4.global-to-local, align 4
  ret i32 %v0_126b0

; uselistorder directives
  uselistorder i32 %v6_12690, { 1, 0, 2 }
  uselistorder label %dec_label_pc_126b0, { 1, 0 }
}

define i32 @function_126b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_126b8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_126b8 = load i32, i32* @r4, align 4
  store i32 %v3_126b8, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1bcb8.528 to i32), i32* %r4.global-to-local, align 4
  %v2_126c0 = load i32, i32* @global_var_1bcb8.528, align 4
  %v2_126c4 = icmp eq i32 %v2_126c0, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_126c4, label %dec_label_pc_126d4, label %dec_label_pc_126e0

dec_label_pc_126d4:                               ; preds = %dec_label_pc_126b8
  %v2_126d4 = call i32 @function_130c0(i32* null)
  %v1_126d8 = icmp slt i32 %v2_126d4, 0
  br i1 %v1_126d8, label %dec_label_pc_12700, label %dec_label_pc_126e0thread-pre-split

dec_label_pc_126e0thread-pre-split:               ; preds = %dec_label_pc_126d4
  %v0_126e4.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_126e0.pre = load i32, i32* @global_var_1bcb8.528, align 4
  br label %dec_label_pc_126e0

dec_label_pc_126e0:                               ; preds = %dec_label_pc_126e0thread-pre-split, %dec_label_pc_126b8
  %v2_126e0 = phi i32 [ %v2_126e0.pre, %dec_label_pc_126e0thread-pre-split ], [ %v2_126c0, %dec_label_pc_126b8 ]
  %v1_126ec = phi i32 [ %v0_126e4.pr, %dec_label_pc_126e0thread-pre-split ], [ %arg1, %dec_label_pc_126b8 ]
  %v2_126e4 = icmp eq i32 %v1_126ec, 0
  store i32 %v2_126e0, i32* %r4.global-to-local, align 4
  br i1 %v2_126e4, label %dec_label_pc_12704, label %dec_label_pc_126f4

dec_label_pc_126f4:                               ; preds = %dec_label_pc_126e0
  %v2_126ec = add i32 %v1_126ec, %v2_126e0
  %v1_126f4 = inttoptr i32 %v2_126ec to i32*
  %v2_126f4 = call i32 @function_130c0(i32* %v1_126f4)
  %v1_126f8 = icmp slt i32 %v2_126f4, 0
  br i1 %v1_126f8, label %dec_label_pc_12700, label %dec_label_pc_126f4.dec_label_pc_12704_crit_edge

dec_label_pc_126f4.dec_label_pc_12704_crit_edge:  ; preds = %dec_label_pc_126f4
  %v0_12704.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12704

dec_label_pc_12700:                               ; preds = %dec_label_pc_126f4, %dec_label_pc_126d4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12704

dec_label_pc_12704:                               ; preds = %dec_label_pc_126f4.dec_label_pc_12704_crit_edge, %dec_label_pc_126e0, %dec_label_pc_12700
  %v0_12704 = phi i32 [ %v0_12704.pre, %dec_label_pc_126f4.dec_label_pc_12704_crit_edge ], [ %v2_126e0, %dec_label_pc_126e0 ], [ -1, %dec_label_pc_12700 ]
  %v2_12708 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12708, i32* @r4, align 4
  ret i32 %v0_12704

; uselistorder directives
  uselistorder i32 %v2_126e0, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 36, 37, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 2, 19, 23, 22, 21, 20, 35, 6, 24, 25, 26, 33, 27, 28, 29, 30, 31, 32, 5, 34 }
  uselistorder label %dec_label_pc_12704, { 2, 0, 1 }
}

define i32 @function_12710(%tms* %arg1) local_unnamed_addr {
dec_label_pc_12710:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12710 = load i32, i32* @r4, align 4
  store i32 %v3_12710, i32* %stack_var_-8, align 4
  %v3_12714 = call i32 @times(%tms* %arg1)
  store i32 %v3_12714, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12714, -4095
  br i1 %tmp, label %dec_label_pc_12734, label %dec_label_pc_12724

dec_label_pc_12724:                               ; preds = %dec_label_pc_12710
  %v0_12724 = call i32 @function_10e98()
  %v0_12728 = load i32, i32* %r4.global-to-local, align 4
  %v1_12728 = sub i32 0, %v0_12728
  %v2_1272c = inttoptr i32 %v0_12724 to i32*
  store i32 %v1_12728, i32* %v2_1272c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12734

dec_label_pc_12734:                               ; preds = %dec_label_pc_12710, %dec_label_pc_12724
  %v0_12734 = phi i32 [ %v3_12714, %dec_label_pc_12710 ], [ -1, %dec_label_pc_12724 ]
  %v2_12738 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12738, i32* %r4.global-to-local, align 4
  ret i32 %v0_12734

; uselistorder directives
  uselistorder i32 %v3_12714, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12734, { 1, 0 }
}

define i32 @function_1273c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1273c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_12758 = inttoptr i32 %arg2 to i8*
  %v3_12758 = call i32 @function_10f00(i8* %v2_12758, i32 0)
  %v1_1275c = add i32 %tmp, 1
  %v2_1275c = inttoptr i32 %v1_1275c to i8*
  %v3_1275c = load i8, i8* %v2_1275c, align 1
  %v4_1275c = zext i8 %v3_1275c to i32
  %v1_12760 = add i32 %tmp, 5
  %v2_12760 = inttoptr i32 %v1_12760 to i8*
  %v3_12760 = load i8, i8* %v2_12760, align 1
  %v4_12760 = zext i8 %v3_12760 to i32
  %v2_12764 = load i8, i8* %arg1, align 1
  %v3_12764 = zext i8 %v2_12764 to i32
  %v1_12768 = add i32 %tmp, 4
  %v2_12768 = inttoptr i32 %v1_12768 to i8*
  %v3_12768 = load i8, i8* %v2_12768, align 1
  %v4_12768 = zext i8 %v3_12768 to i32
  %v1_1276c = add i32 %tmp, 2
  %v2_1276c = inttoptr i32 %v1_1276c to i8*
  %v3_1276c = load i8, i8* %v2_1276c, align 1
  %v4_1276c = zext i8 %v3_1276c to i32
  %v1_12770 = add i32 %tmp, 6
  %v2_12770 = inttoptr i32 %v1_12770 to i8*
  %v3_12770 = load i8, i8* %v2_12770, align 1
  %v4_12770 = zext i8 %v3_12770 to i32
  %v1_12774 = add i32 %tmp, 3
  %v2_12774 = inttoptr i32 %v1_12774 to i8*
  %v3_12774 = load i8, i8* %v2_12774, align 1
  %v4_12774 = zext i8 %v3_12774 to i32
  %v4_12778 = mul nuw nsw i32 %v4_1275c, 256
  %v5_12778 = or i32 %v3_12764, %v4_12778
  %v4_1277c = mul nuw nsw i32 %v4_12760, 256
  %v5_1277c = or i32 %v4_12768, %v4_1277c
  %v1_12780 = add i32 %tmp, 7
  %v2_12780 = inttoptr i32 %v1_12780 to i8*
  %v3_12780 = load i8, i8* %v2_12780, align 1
  %v4_12780 = zext i8 %v3_12780 to i32
  %v4_12784 = mul nuw nsw i32 %v4_1276c, 65536
  %v5_12784 = or i32 %v4_12784, %v5_12778
  %v4_12788 = mul nuw nsw i32 %v4_12770, 65536
  %v5_12788 = or i32 %v4_12788, %v5_1277c
  %v4_1278c = mul nuw i32 %v4_12774, 16777216
  %v5_1278c = or i32 %v4_1278c, %v5_12784
  %v4_12790 = mul nuw i32 %v4_12780, 16777216
  %v5_12790 = or i32 %v4_12790, %v5_12788
  store i32 %v5_12790, i32* %r3.global-to-local, align 4
  %v0_12794 = load i32, i32* %r7.global-to-local, align 4
  %v1_12794 = inttoptr i32 %v0_12794 to i32*
  store i32 %v5_1278c, i32* %v1_12794, align 4
  %v3_12794 = add i32 %v0_12794, 4
  %v4_12794 = inttoptr i32 %v3_12794 to i32*
  %v5_12794 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12794, i32* %v4_12794, align 4
  %v0_12798 = load i32, i32* %r4.global-to-local, align 4
  %v1_12798 = add i32 %v0_12798, 89
  %v2_12798 = inttoptr i32 %v1_12798 to i8*
  %v3_12798 = load i8, i8* %v2_12798, align 1
  %v4_12798 = zext i8 %v3_12798 to i32
  %v1_1279c = add i32 %v0_12798, 93
  %v2_1279c = inttoptr i32 %v1_1279c to i8*
  %v3_1279c = load i8, i8* %v2_1279c, align 1
  %v4_1279c = zext i8 %v3_1279c to i32
  %v1_127a0 = add i32 %v0_12798, 88
  %v2_127a0 = inttoptr i32 %v1_127a0 to i8*
  %v3_127a0 = load i8, i8* %v2_127a0, align 1
  %v4_127a0 = zext i8 %v3_127a0 to i32
  %v1_127a4 = add i32 %v0_12798, 92
  %v2_127a4 = inttoptr i32 %v1_127a4 to i8*
  %v3_127a4 = load i8, i8* %v2_127a4, align 1
  %v4_127a4 = zext i8 %v3_127a4 to i32
  store i32 %v4_127a4, i32* %r3.global-to-local, align 4
  %v1_127a8 = add i32 %v0_12798, 94
  %v2_127a8 = inttoptr i32 %v1_127a8 to i8*
  %v3_127a8 = load i8, i8* %v2_127a8, align 1
  %v4_127a8 = zext i8 %v3_127a8 to i32
  %v1_127ac = add i32 %v0_12798, 90
  %v2_127ac = inttoptr i32 %v1_127ac to i8*
  %v3_127ac = load i8, i8* %v2_127ac, align 1
  %v4_127ac = zext i8 %v3_127ac to i32
  %v1_127b0 = add i32 %v0_12798, 91
  %v2_127b0 = inttoptr i32 %v1_127b0 to i8*
  %v3_127b0 = load i8, i8* %v2_127b0, align 1
  %v4_127b0 = zext i8 %v3_127b0 to i32
  %v4_127b4 = mul nuw nsw i32 %v4_12798, 256
  %v5_127b4 = or i32 %v4_127a0, %v4_127b4
  %v4_127b8 = mul nuw nsw i32 %v4_1279c, 256
  %v5_127b8 = or i32 %v4_127a4, %v4_127b8
  store i32 %v5_127b8, i32* %r3.global-to-local, align 4
  %v1_127bc = add i32 %v0_12798, 95
  %v2_127bc = inttoptr i32 %v1_127bc to i8*
  %v3_127bc = load i8, i8* %v2_127bc, align 1
  %v4_127bc = zext i8 %v3_127bc to i32
  %v4_127c0 = mul nuw nsw i32 %v4_127a8, 65536
  %v5_127c0 = or i32 %v4_127c0, %v5_127b8
  store i32 %v5_127c0, i32* %r3.global-to-local, align 4
  %v4_127c4 = mul nuw nsw i32 %v4_127ac, 65536
  %v5_127c4 = or i32 %v4_127c4, %v5_127b4
  %v4_127c8 = mul nuw i32 %v4_127b0, 16777216
  %v5_127c8 = or i32 %v4_127c8, %v5_127c4
  %v4_127cc = mul nuw i32 %v4_127bc, 16777216
  %v5_127cc = or i32 %v4_127cc, %v5_127c0
  store i32 %v5_127cc, i32* %r6.global-to-local, align 4
  %v1_127d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_127d0 = add i32 %v1_127d0, 88
  %v3_127d0 = inttoptr i32 %v2_127d0 to i32*
  store i32 %v5_127c8, i32* %v3_127d0, align 4
  %v0_127d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_127d4 = load i32, i32* %r7.global-to-local, align 4
  %v2_127d4 = add i32 %v1_127d4, 92
  %v3_127d4 = inttoptr i32 %v2_127d4 to i32*
  store i32 %v0_127d4, i32* %v3_127d4, align 4
  %v0_127d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_127d8 = add i32 %v0_127d8, 13
  %v2_127d8 = inttoptr i32 %v1_127d8 to i8*
  %v3_127d8 = load i8, i8* %v2_127d8, align 1
  %v4_127d8 = zext i8 %v3_127d8 to i32
  %v1_127dc = add i32 %v0_127d8, 12
  %v2_127dc = inttoptr i32 %v1_127dc to i8*
  %v3_127dc = load i8, i8* %v2_127dc, align 1
  %v4_127dc = zext i8 %v3_127dc to i32
  store i32 %v4_127dc, i32* %r3.global-to-local, align 4
  %v1_127e0 = add i32 %v0_127d8, 14
  %v2_127e0 = inttoptr i32 %v1_127e0 to i8*
  %v3_127e0 = load i8, i8* %v2_127e0, align 1
  %v4_127e0 = zext i8 %v3_127e0 to i32
  %v4_127e4 = mul nuw nsw i32 %v4_127d8, 256
  %v5_127e4 = or i32 %v4_127dc, %v4_127e4
  store i32 %v5_127e4, i32* %r3.global-to-local, align 4
  %v1_127e8 = add i32 %v0_127d8, 15
  %v2_127e8 = inttoptr i32 %v1_127e8 to i8*
  %v3_127e8 = load i8, i8* %v2_127e8, align 1
  %v4_127e8 = zext i8 %v3_127e8 to i32
  %v4_127ec = mul nuw nsw i32 %v4_127e0, 65536
  %v5_127ec = or i32 %v4_127ec, %v5_127e4
  %v4_127f0 = mul nuw i32 %v4_127e8, 16777216
  %v5_127f0 = or i32 %v5_127ec, %v4_127f0
  store i32 %v5_127f0, i32* %r3.global-to-local, align 4
  %v1_127f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_127f4 = add i32 %v1_127f4, 12
  %v3_127f4 = inttoptr i32 %v2_127f4 to i32*
  store i32 %v5_127f0, i32* %v3_127f4, align 4
  %v0_127f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_127f8 = add i32 %v0_127f8, 17
  %v2_127f8 = inttoptr i32 %v1_127f8 to i8*
  %v3_127f8 = load i8, i8* %v2_127f8, align 1
  %v4_127f8 = zext i8 %v3_127f8 to i32
  %v1_127fc = add i32 %v0_127f8, 16
  %v2_127fc = inttoptr i32 %v1_127fc to i8*
  %v3_127fc = load i8, i8* %v2_127fc, align 1
  %v4_127fc = zext i8 %v3_127fc to i32
  store i32 %v4_127fc, i32* %r3.global-to-local, align 4
  %v1_12800 = add i32 %v0_127f8, 18
  %v2_12800 = inttoptr i32 %v1_12800 to i8*
  %v3_12800 = load i8, i8* %v2_12800, align 1
  %v4_12800 = zext i8 %v3_12800 to i32
  %v4_12804 = mul nuw nsw i32 %v4_127f8, 256
  %v5_12804 = or i32 %v4_127fc, %v4_12804
  store i32 %v5_12804, i32* %r3.global-to-local, align 4
  %v1_12808 = add i32 %v0_127f8, 19
  %v2_12808 = inttoptr i32 %v1_12808 to i8*
  %v3_12808 = load i8, i8* %v2_12808, align 1
  %v4_12808 = zext i8 %v3_12808 to i32
  %v4_1280c = mul nuw nsw i32 %v4_12800, 65536
  %v5_1280c = or i32 %v4_1280c, %v5_12804
  %v4_12810 = mul nuw i32 %v4_12808, 16777216
  %v5_12810 = or i32 %v5_1280c, %v4_12810
  store i32 %v5_12810, i32* %r3.global-to-local, align 4
  %v1_12814 = load i32, i32* %r7.global-to-local, align 4
  %v2_12814 = add i32 %v1_12814, 16
  %v3_12814 = inttoptr i32 %v2_12814 to i32*
  store i32 %v5_12810, i32* %v3_12814, align 4
  %v0_12818 = load i32, i32* %r4.global-to-local, align 4
  %v1_12818 = add i32 %v0_12818, 21
  %v2_12818 = inttoptr i32 %v1_12818 to i8*
  %v3_12818 = load i8, i8* %v2_12818, align 1
  %v4_12818 = zext i8 %v3_12818 to i32
  %v1_1281c = add i32 %v0_12818, 20
  %v2_1281c = inttoptr i32 %v1_1281c to i8*
  %v3_1281c = load i8, i8* %v2_1281c, align 1
  %v4_1281c = zext i8 %v3_1281c to i32
  store i32 %v4_1281c, i32* %r3.global-to-local, align 4
  %v1_12820 = add i32 %v0_12818, 22
  %v2_12820 = inttoptr i32 %v1_12820 to i8*
  %v3_12820 = load i8, i8* %v2_12820, align 1
  %v4_12820 = zext i8 %v3_12820 to i32
  %v4_12824 = mul nuw nsw i32 %v4_12818, 256
  %v5_12824 = or i32 %v4_1281c, %v4_12824
  store i32 %v5_12824, i32* %r3.global-to-local, align 4
  %v1_12828 = add i32 %v0_12818, 23
  %v2_12828 = inttoptr i32 %v1_12828 to i8*
  %v3_12828 = load i8, i8* %v2_12828, align 1
  %v4_12828 = zext i8 %v3_12828 to i32
  %v4_1282c = mul nuw nsw i32 %v4_12820, 65536
  %v5_1282c = or i32 %v4_1282c, %v5_12824
  %v4_12830 = mul nuw i32 %v4_12828, 16777216
  %v5_12830 = or i32 %v5_1282c, %v4_12830
  store i32 %v5_12830, i32* %r3.global-to-local, align 4
  %v1_12834 = load i32, i32* %r7.global-to-local, align 4
  %v2_12834 = add i32 %v1_12834, 20
  %v3_12834 = inttoptr i32 %v2_12834 to i32*
  store i32 %v5_12830, i32* %v3_12834, align 4
  %v0_12838 = load i32, i32* %r4.global-to-local, align 4
  %v1_12838 = add i32 %v0_12838, 25
  %v2_12838 = inttoptr i32 %v1_12838 to i8*
  %v3_12838 = load i8, i8* %v2_12838, align 1
  %v4_12838 = zext i8 %v3_12838 to i32
  %v1_1283c = add i32 %v0_12838, 24
  %v2_1283c = inttoptr i32 %v1_1283c to i8*
  %v3_1283c = load i8, i8* %v2_1283c, align 1
  %v4_1283c = zext i8 %v3_1283c to i32
  store i32 %v4_1283c, i32* %r3.global-to-local, align 4
  %v1_12840 = add i32 %v0_12838, 26
  %v2_12840 = inttoptr i32 %v1_12840 to i8*
  %v3_12840 = load i8, i8* %v2_12840, align 1
  %v4_12840 = zext i8 %v3_12840 to i32
  %v4_12844 = mul nuw nsw i32 %v4_12838, 256
  %v5_12844 = or i32 %v4_1283c, %v4_12844
  store i32 %v5_12844, i32* %r3.global-to-local, align 4
  %v1_12848 = add i32 %v0_12838, 27
  %v2_12848 = inttoptr i32 %v1_12848 to i8*
  %v3_12848 = load i8, i8* %v2_12848, align 1
  %v4_12848 = zext i8 %v3_12848 to i32
  %v4_1284c = mul nuw nsw i32 %v4_12840, 65536
  %v5_1284c = or i32 %v4_1284c, %v5_12844
  %v4_12850 = mul nuw i32 %v4_12848, 16777216
  %v5_12850 = or i32 %v5_1284c, %v4_12850
  store i32 %v5_12850, i32* %r3.global-to-local, align 4
  %v1_12854 = load i32, i32* %r7.global-to-local, align 4
  %v2_12854 = add i32 %v1_12854, 24
  %v3_12854 = inttoptr i32 %v2_12854 to i32*
  store i32 %v5_12850, i32* %v3_12854, align 4
  %v0_12858 = load i32, i32* %r4.global-to-local, align 4
  %v1_12858 = add i32 %v0_12858, 29
  %v2_12858 = inttoptr i32 %v1_12858 to i8*
  %v3_12858 = load i8, i8* %v2_12858, align 1
  %v4_12858 = zext i8 %v3_12858 to i32
  %v1_1285c = add i32 %v0_12858, 28
  %v2_1285c = inttoptr i32 %v1_1285c to i8*
  %v3_1285c = load i8, i8* %v2_1285c, align 1
  %v4_1285c = zext i8 %v3_1285c to i32
  store i32 %v4_1285c, i32* %r3.global-to-local, align 4
  %v1_12860 = add i32 %v0_12858, 30
  %v2_12860 = inttoptr i32 %v1_12860 to i8*
  %v3_12860 = load i8, i8* %v2_12860, align 1
  %v4_12860 = zext i8 %v3_12860 to i32
  %v4_12864 = mul nuw nsw i32 %v4_12858, 256
  %v5_12864 = or i32 %v4_1285c, %v4_12864
  store i32 %v5_12864, i32* %r3.global-to-local, align 4
  %v1_12868 = add i32 %v0_12858, 31
  %v2_12868 = inttoptr i32 %v1_12868 to i8*
  %v3_12868 = load i8, i8* %v2_12868, align 1
  %v4_12868 = zext i8 %v3_12868 to i32
  %v4_1286c = mul nuw nsw i32 %v4_12860, 65536
  %v5_1286c = or i32 %v4_1286c, %v5_12864
  %v4_12870 = mul nuw i32 %v4_12868, 16777216
  %v5_12870 = or i32 %v5_1286c, %v4_12870
  store i32 %v5_12870, i32* %r3.global-to-local, align 4
  %v1_12874 = load i32, i32* %r7.global-to-local, align 4
  %v2_12874 = add i32 %v1_12874, 28
  %v3_12874 = inttoptr i32 %v2_12874 to i32*
  store i32 %v5_12870, i32* %v3_12874, align 4
  %v0_12878 = load i32, i32* %r4.global-to-local, align 4
  %v1_12878 = add i32 %v0_12878, 33
  %v2_12878 = inttoptr i32 %v1_12878 to i8*
  %v3_12878 = load i8, i8* %v2_12878, align 1
  %v4_12878 = zext i8 %v3_12878 to i32
  %v1_1287c = add i32 %v0_12878, 37
  %v2_1287c = inttoptr i32 %v1_1287c to i8*
  %v3_1287c = load i8, i8* %v2_1287c, align 1
  %v4_1287c = zext i8 %v3_1287c to i32
  %v1_12880 = add i32 %v0_12878, 32
  %v2_12880 = inttoptr i32 %v1_12880 to i8*
  %v3_12880 = load i8, i8* %v2_12880, align 1
  %v4_12880 = zext i8 %v3_12880 to i32
  %v1_12884 = add i32 %v0_12878, 36
  %v2_12884 = inttoptr i32 %v1_12884 to i8*
  %v3_12884 = load i8, i8* %v2_12884, align 1
  %v4_12884 = zext i8 %v3_12884 to i32
  store i32 %v4_12884, i32* %r3.global-to-local, align 4
  %v1_12888 = add i32 %v0_12878, 34
  %v2_12888 = inttoptr i32 %v1_12888 to i8*
  %v3_12888 = load i8, i8* %v2_12888, align 1
  %v4_12888 = zext i8 %v3_12888 to i32
  %v1_1288c = add i32 %v0_12878, 38
  %v2_1288c = inttoptr i32 %v1_1288c to i8*
  %v3_1288c = load i8, i8* %v2_1288c, align 1
  %v4_1288c = zext i8 %v3_1288c to i32
  %v1_12890 = add i32 %v0_12878, 35
  %v2_12890 = inttoptr i32 %v1_12890 to i8*
  %v3_12890 = load i8, i8* %v2_12890, align 1
  %v4_12890 = zext i8 %v3_12890 to i32
  %v4_12894 = mul nuw nsw i32 %v4_12878, 256
  %v5_12894 = or i32 %v4_12880, %v4_12894
  %v4_12898 = mul nuw nsw i32 %v4_1287c, 256
  %v5_12898 = or i32 %v4_12884, %v4_12898
  store i32 %v5_12898, i32* %r3.global-to-local, align 4
  %v1_1289c = add i32 %v0_12878, 39
  %v2_1289c = inttoptr i32 %v1_1289c to i8*
  %v3_1289c = load i8, i8* %v2_1289c, align 1
  %v4_1289c = zext i8 %v3_1289c to i32
  %v4_128a0 = mul nuw nsw i32 %v4_12888, 65536
  %v5_128a0 = or i32 %v4_128a0, %v5_12894
  %v4_128a4 = mul nuw nsw i32 %v4_1288c, 65536
  %v5_128a4 = or i32 %v4_128a4, %v5_12898
  %v4_128a8 = mul nuw i32 %v4_12890, 16777216
  %v5_128a8 = or i32 %v5_128a0, %v4_128a8
  %v4_128ac = mul nuw i32 %v4_1289c, 16777216
  %v5_128ac = or i32 %v5_128a4, %v4_128ac
  store i32 %v5_128ac, i32* %r3.global-to-local, align 4
  %v1_128c0 = load i32, i32* %r7.global-to-local, align 4
  %v2_128c0 = add i32 %v1_128c0, 32
  %v3_128c0 = inttoptr i32 %v2_128c0 to i32*
  store i32 %v5_128a8, i32* %v3_128c0, align 4
  %v0_128c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_128c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_128c4 = add i32 %v1_128c4, 36
  %v3_128c4 = inttoptr i32 %v2_128c4 to i32*
  store i32 %v0_128c4, i32* %v3_128c4, align 4
  %v0_128c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_128c8 = add i32 %v0_128c8, 45
  %v2_128c8 = inttoptr i32 %v1_128c8 to i8*
  %v3_128c8 = load i8, i8* %v2_128c8, align 1
  %v4_128c8 = zext i8 %v3_128c8 to i32
  %v1_128cc = add i32 %v0_128c8, 49
  %v2_128cc = inttoptr i32 %v1_128cc to i8*
  %v3_128cc = load i8, i8* %v2_128cc, align 1
  %v4_128cc = zext i8 %v3_128cc to i32
  %v1_128d0 = add i32 %v0_128c8, 44
  %v2_128d0 = inttoptr i32 %v1_128d0 to i8*
  %v3_128d0 = load i8, i8* %v2_128d0, align 1
  %v4_128d0 = zext i8 %v3_128d0 to i32
  %v1_128d4 = add i32 %v0_128c8, 48
  %v2_128d4 = inttoptr i32 %v1_128d4 to i8*
  %v3_128d4 = load i8, i8* %v2_128d4, align 1
  %v4_128d4 = zext i8 %v3_128d4 to i32
  store i32 %v4_128d4, i32* %r3.global-to-local, align 4
  %v1_128d8 = add i32 %v0_128c8, 46
  %v2_128d8 = inttoptr i32 %v1_128d8 to i8*
  %v3_128d8 = load i8, i8* %v2_128d8, align 1
  %v4_128d8 = zext i8 %v3_128d8 to i32
  %v1_128dc = add i32 %v0_128c8, 50
  %v2_128dc = inttoptr i32 %v1_128dc to i8*
  %v3_128dc = load i8, i8* %v2_128dc, align 1
  %v4_128dc = zext i8 %v3_128dc to i32
  %v1_128e0 = add i32 %v0_128c8, 47
  %v2_128e0 = inttoptr i32 %v1_128e0 to i8*
  %v3_128e0 = load i8, i8* %v2_128e0, align 1
  %v4_128e0 = zext i8 %v3_128e0 to i32
  %v4_128e4 = mul nuw nsw i32 %v4_128c8, 256
  %v5_128e4 = or i32 %v4_128d0, %v4_128e4
  %v4_128e8 = mul nuw nsw i32 %v4_128cc, 256
  %v5_128e8 = or i32 %v4_128d4, %v4_128e8
  store i32 %v5_128e8, i32* %r3.global-to-local, align 4
  %v1_128ec = add i32 %v0_128c8, 51
  %v2_128ec = inttoptr i32 %v1_128ec to i8*
  %v3_128ec = load i8, i8* %v2_128ec, align 1
  %v4_128ec = zext i8 %v3_128ec to i32
  %v4_128f0 = mul nuw nsw i32 %v4_128d8, 65536
  %v5_128f0 = or i32 %v4_128f0, %v5_128e4
  %v4_128f4 = mul nuw nsw i32 %v4_128dc, 65536
  %v5_128f4 = or i32 %v4_128f4, %v5_128e8
  %v4_128f8 = mul nuw i32 %v4_128e0, 16777216
  %v5_128f8 = or i32 %v5_128f0, %v4_128f8
  %v4_128fc = mul nuw i32 %v4_128ec, 16777216
  %v5_128fc = or i32 %v5_128f4, %v4_128fc
  store i32 %v5_128fc, i32* %r3.global-to-local, align 4
  %v1_12910 = load i32, i32* %r7.global-to-local, align 4
  %v2_12910 = add i32 %v1_12910, 44
  %v3_12910 = inttoptr i32 %v2_12910 to i32*
  store i32 %v5_128f8, i32* %v3_12910, align 4
  %v0_12914 = load i32, i32* %r3.global-to-local, align 4
  %v1_12914 = load i32, i32* %r7.global-to-local, align 4
  %v2_12914 = add i32 %v1_12914, 48
  %v3_12914 = inttoptr i32 %v2_12914 to i32*
  store i32 %v0_12914, i32* %v3_12914, align 4
  %v0_12918 = load i32, i32* %r4.global-to-local, align 4
  %v1_12918 = add i32 %v0_12918, 53
  %v2_12918 = inttoptr i32 %v1_12918 to i8*
  %v3_12918 = load i8, i8* %v2_12918, align 1
  %v4_12918 = zext i8 %v3_12918 to i32
  %v1_1291c = add i32 %v0_12918, 52
  %v2_1291c = inttoptr i32 %v1_1291c to i8*
  %v3_1291c = load i8, i8* %v2_1291c, align 1
  %v4_1291c = zext i8 %v3_1291c to i32
  store i32 %v4_1291c, i32* %r3.global-to-local, align 4
  %v1_12920 = add i32 %v0_12918, 54
  %v2_12920 = inttoptr i32 %v1_12920 to i8*
  %v3_12920 = load i8, i8* %v2_12920, align 1
  %v4_12920 = zext i8 %v3_12920 to i32
  %v4_12924 = mul nuw nsw i32 %v4_12918, 256
  %v5_12924 = or i32 %v4_1291c, %v4_12924
  store i32 %v5_12924, i32* %r3.global-to-local, align 4
  %v1_12928 = add i32 %v0_12918, 55
  %v2_12928 = inttoptr i32 %v1_12928 to i8*
  %v3_12928 = load i8, i8* %v2_12928, align 1
  %v4_12928 = zext i8 %v3_12928 to i32
  %v4_1292c = mul nuw nsw i32 %v4_12920, 65536
  %v5_1292c = or i32 %v4_1292c, %v5_12924
  %v4_12930 = mul nuw i32 %v4_12928, 16777216
  %v5_12930 = or i32 %v5_1292c, %v4_12930
  store i32 %v5_12930, i32* %r3.global-to-local, align 4
  %v1_12934 = load i32, i32* %r7.global-to-local, align 4
  %v2_12934 = add i32 %v1_12934, 52
  %v3_12934 = inttoptr i32 %v2_12934 to i32*
  store i32 %v5_12930, i32* %v3_12934, align 4
  %v0_12938 = load i32, i32* %r4.global-to-local, align 4
  %v1_12938 = add i32 %v0_12938, 57
  %v2_12938 = inttoptr i32 %v1_12938 to i8*
  %v3_12938 = load i8, i8* %v2_12938, align 1
  %v4_12938 = zext i8 %v3_12938 to i32
  %v1_1293c = add i32 %v0_12938, 56
  %v2_1293c = inttoptr i32 %v1_1293c to i8*
  %v3_1293c = load i8, i8* %v2_1293c, align 1
  %v4_1293c = zext i8 %v3_1293c to i32
  %v1_12940 = add i32 %v0_12938, 60
  %v2_12940 = inttoptr i32 %v1_12940 to i8*
  %v3_12940 = load i8, i8* %v2_12940, align 1
  %v4_12940 = zext i8 %v3_12940 to i32
  store i32 %v4_12940, i32* %r3.global-to-local, align 4
  %v1_12944 = add i32 %v0_12938, 61
  %v2_12944 = inttoptr i32 %v1_12944 to i8*
  %v3_12944 = load i8, i8* %v2_12944, align 1
  %v4_12944 = zext i8 %v3_12944 to i32
  %v1_12948 = add i32 %v0_12938, 58
  %v2_12948 = inttoptr i32 %v1_12948 to i8*
  %v3_12948 = load i8, i8* %v2_12948, align 1
  %v4_12948 = zext i8 %v3_12948 to i32
  %v1_1294c = add i32 %v0_12938, 62
  %v2_1294c = inttoptr i32 %v1_1294c to i8*
  %v3_1294c = load i8, i8* %v2_1294c, align 1
  %v4_1294c = zext i8 %v3_1294c to i32
  %v1_12950 = add i32 %v0_12938, 59
  %v2_12950 = inttoptr i32 %v1_12950 to i8*
  %v3_12950 = load i8, i8* %v2_12950, align 1
  %v4_12950 = zext i8 %v3_12950 to i32
  %v4_12954 = mul nuw nsw i32 %v4_12938, 256
  %v5_12954 = or i32 %v4_1293c, %v4_12954
  %v4_12958 = mul nuw nsw i32 %v4_12944, 256
  %v5_12958 = or i32 %v4_12958, %v4_12940
  store i32 %v5_12958, i32* %r3.global-to-local, align 4
  %v1_1295c = add i32 %v0_12938, 63
  %v2_1295c = inttoptr i32 %v1_1295c to i8*
  %v3_1295c = load i8, i8* %v2_1295c, align 1
  %v4_1295c = zext i8 %v3_1295c to i32
  %v4_12960 = mul nuw nsw i32 %v4_12948, 65536
  %v5_12960 = or i32 %v4_12960, %v5_12954
  %v4_12964 = mul nuw nsw i32 %v4_1294c, 65536
  %v5_12964 = or i32 %v4_12964, %v5_12958
  %v4_12968 = mul nuw i32 %v4_1295c, 16777216
  %v5_12968 = or i32 %v5_12964, %v4_12968
  %v4_1296c = mul nuw i32 %v4_12950, 16777216
  %v5_1296c = or i32 %v5_12960, %v4_1296c
  store i32 %v5_12968, i32* %r3.global-to-local, align 4
  %v1_1297c = load i32, i32* %r7.global-to-local, align 4
  %v2_1297c = add i32 %v1_1297c, 56
  %v3_1297c = inttoptr i32 %v2_1297c to i32*
  store i32 %v5_1296c, i32* %v3_1297c, align 4
  %v0_12980 = load i32, i32* %r3.global-to-local, align 4
  %v1_12980 = load i32, i32* %r7.global-to-local, align 4
  %v2_12980 = add i32 %v1_12980, 60
  %v3_12980 = inttoptr i32 %v2_12980 to i32*
  store i32 %v0_12980, i32* %v3_12980, align 4
  %v0_12984 = load i32, i32* %r4.global-to-local, align 4
  %v1_12984 = add i32 %v0_12984, 65
  %v2_12984 = inttoptr i32 %v1_12984 to i8*
  %v3_12984 = load i8, i8* %v2_12984, align 1
  %v4_12984 = zext i8 %v3_12984 to i32
  %v1_12988 = add i32 %v0_12984, 64
  %v2_12988 = inttoptr i32 %v1_12988 to i8*
  %v3_12988 = load i8, i8* %v2_12988, align 1
  %v4_12988 = zext i8 %v3_12988 to i32
  store i32 %v4_12988, i32* %r3.global-to-local, align 4
  %v1_1298c = add i32 %v0_12984, 66
  %v2_1298c = inttoptr i32 %v1_1298c to i8*
  %v3_1298c = load i8, i8* %v2_1298c, align 1
  %v4_1298c = zext i8 %v3_1298c to i32
  %v4_12990 = mul nuw nsw i32 %v4_12984, 256
  %v5_12990 = or i32 %v4_12988, %v4_12990
  store i32 %v5_12990, i32* %r3.global-to-local, align 4
  %v1_12994 = add i32 %v0_12984, 67
  %v2_12994 = inttoptr i32 %v1_12994 to i8*
  %v3_12994 = load i8, i8* %v2_12994, align 1
  %v4_12994 = zext i8 %v3_12994 to i32
  %v4_12998 = mul nuw nsw i32 %v4_1298c, 65536
  %v5_12998 = or i32 %v4_12998, %v5_12990
  %v4_1299c = mul nuw i32 %v4_12994, 16777216
  %v5_1299c = or i32 %v5_12998, %v4_1299c
  store i32 %v5_1299c, i32* %r3.global-to-local, align 4
  %v1_129a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_129a0 = add i32 %v1_129a0, 64
  %v3_129a0 = inttoptr i32 %v2_129a0 to i32*
  store i32 %v5_1299c, i32* %v3_129a0, align 4
  %v0_129a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_129a4 = add i32 %v0_129a4, 73
  %v2_129a4 = inttoptr i32 %v1_129a4 to i8*
  %v3_129a4 = load i8, i8* %v2_129a4, align 1
  %v4_129a4 = zext i8 %v3_129a4 to i32
  %v1_129a8 = add i32 %v0_129a4, 72
  %v2_129a8 = inttoptr i32 %v1_129a8 to i8*
  %v3_129a8 = load i8, i8* %v2_129a8, align 1
  %v4_129a8 = zext i8 %v3_129a8 to i32
  store i32 %v4_129a8, i32* %r3.global-to-local, align 4
  %v1_129ac = add i32 %v0_129a4, 74
  %v2_129ac = inttoptr i32 %v1_129ac to i8*
  %v3_129ac = load i8, i8* %v2_129ac, align 1
  %v4_129ac = zext i8 %v3_129ac to i32
  %v4_129b0 = mul nuw nsw i32 %v4_129a4, 256
  %v5_129b0 = or i32 %v4_129a8, %v4_129b0
  store i32 %v5_129b0, i32* %r3.global-to-local, align 4
  %v1_129b4 = add i32 %v0_129a4, 75
  %v2_129b4 = inttoptr i32 %v1_129b4 to i8*
  %v3_129b4 = load i8, i8* %v2_129b4, align 1
  %v4_129b4 = zext i8 %v3_129b4 to i32
  %v4_129b8 = mul nuw nsw i32 %v4_129ac, 65536
  %v5_129b8 = or i32 %v4_129b8, %v5_129b0
  %v4_129bc = mul nuw i32 %v4_129b4, 16777216
  %v5_129bc = or i32 %v5_129b8, %v4_129bc
  store i32 %v5_129bc, i32* %r3.global-to-local, align 4
  %v1_129c0 = load i32, i32* %r7.global-to-local, align 4
  %v2_129c0 = add i32 %v1_129c0, 72
  %v3_129c0 = inttoptr i32 %v2_129c0 to i32*
  store i32 %v5_129bc, i32* %v3_129c0, align 4
  %v0_129c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_129c4 = add i32 %v0_129c4, 81
  %v2_129c4 = inttoptr i32 %v1_129c4 to i8*
  %v3_129c4 = load i8, i8* %v2_129c4, align 1
  %v4_129c4 = zext i8 %v3_129c4 to i32
  %v1_129c8 = add i32 %v0_129c4, 80
  %v2_129c8 = inttoptr i32 %v1_129c8 to i8*
  %v3_129c8 = load i8, i8* %v2_129c8, align 1
  %v4_129c8 = zext i8 %v3_129c8 to i32
  store i32 %v4_129c8, i32* %r3.global-to-local, align 4
  %v1_129cc = add i32 %v0_129c4, 82
  %v2_129cc = inttoptr i32 %v1_129cc to i8*
  %v3_129cc = load i8, i8* %v2_129cc, align 1
  %v4_129cc = zext i8 %v3_129cc to i32
  %v4_129d0 = mul nuw nsw i32 %v4_129c4, 256
  %v5_129d0 = or i32 %v4_129c8, %v4_129d0
  store i32 %v5_129d0, i32* %r3.global-to-local, align 4
  %v1_129d4 = add i32 %v0_129c4, 83
  %v2_129d4 = inttoptr i32 %v1_129d4 to i8*
  %v3_129d4 = load i8, i8* %v2_129d4, align 1
  %v4_129d4 = zext i8 %v3_129d4 to i32
  %v4_129d8 = mul nuw nsw i32 %v4_129cc, 65536
  %v5_129d8 = or i32 %v4_129d8, %v5_129d0
  %v4_129dc = mul nuw i32 %v4_129d4, 16777216
  %v5_129dc = or i32 %v5_129d8, %v4_129dc
  store i32 %v5_129dc, i32* %r3.global-to-local, align 4
  %v1_129e0 = load i32, i32* %r7.global-to-local, align 4
  %v2_129e0 = add i32 %v1_129e0, 80
  %v3_129e0 = inttoptr i32 %v2_129e0 to i32*
  store i32 %v5_129dc, i32* %v3_129e0, align 4
  %v0_129e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_129e4 = add i32 %v0_129e4, 69
  %v2_129e4 = inttoptr i32 %v1_129e4 to i8*
  %v3_129e4 = load i8, i8* %v2_129e4, align 1
  %v4_129e4 = zext i8 %v3_129e4 to i32
  %v1_129e8 = add i32 %v0_129e4, 68
  %v2_129e8 = inttoptr i32 %v1_129e8 to i8*
  %v3_129e8 = load i8, i8* %v2_129e8, align 1
  %v4_129e8 = zext i8 %v3_129e8 to i32
  store i32 %v4_129e8, i32* %r3.global-to-local, align 4
  %v1_129ec = add i32 %v0_129e4, 70
  %v2_129ec = inttoptr i32 %v1_129ec to i8*
  %v3_129ec = load i8, i8* %v2_129ec, align 1
  %v4_129ec = zext i8 %v3_129ec to i32
  %v4_129f0 = mul nuw nsw i32 %v4_129e4, 256
  %v5_129f0 = or i32 %v4_129e8, %v4_129f0
  store i32 %v5_129f0, i32* %r3.global-to-local, align 4
  %v1_129f4 = add i32 %v0_129e4, 71
  %v2_129f4 = inttoptr i32 %v1_129f4 to i8*
  %v3_129f4 = load i8, i8* %v2_129f4, align 1
  %v4_129f4 = zext i8 %v3_129f4 to i32
  %v4_129f8 = mul nuw nsw i32 %v4_129ec, 65536
  %v5_129f8 = or i32 %v4_129f8, %v5_129f0
  %v4_129fc = mul nuw i32 %v4_129f4, 16777216
  %v5_129fc = or i32 %v5_129f8, %v4_129fc
  store i32 %v5_129fc, i32* %r3.global-to-local, align 4
  %v1_12a00 = load i32, i32* %r7.global-to-local, align 4
  %v2_12a00 = add i32 %v1_12a00, 68
  %v3_12a00 = inttoptr i32 %v2_12a00 to i32*
  store i32 %v5_129fc, i32* %v3_12a00, align 4
  %v0_12a04 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a04 = add i32 %v0_12a04, 77
  %v2_12a04 = inttoptr i32 %v1_12a04 to i8*
  %v3_12a04 = load i8, i8* %v2_12a04, align 1
  %v4_12a04 = zext i8 %v3_12a04 to i32
  %v1_12a08 = add i32 %v0_12a04, 76
  %v2_12a08 = inttoptr i32 %v1_12a08 to i8*
  %v3_12a08 = load i8, i8* %v2_12a08, align 1
  %v4_12a08 = zext i8 %v3_12a08 to i32
  store i32 %v4_12a08, i32* %r3.global-to-local, align 4
  %v1_12a0c = add i32 %v0_12a04, 78
  %v2_12a0c = inttoptr i32 %v1_12a0c to i8*
  %v3_12a0c = load i8, i8* %v2_12a0c, align 1
  %v4_12a0c = zext i8 %v3_12a0c to i32
  %v4_12a10 = mul nuw nsw i32 %v4_12a04, 256
  %v5_12a10 = or i32 %v4_12a08, %v4_12a10
  store i32 %v5_12a10, i32* %r3.global-to-local, align 4
  %v1_12a14 = add i32 %v0_12a04, 79
  %v2_12a14 = inttoptr i32 %v1_12a14 to i8*
  %v3_12a14 = load i8, i8* %v2_12a14, align 1
  %v4_12a14 = zext i8 %v3_12a14 to i32
  %v4_12a18 = mul nuw nsw i32 %v4_12a0c, 65536
  %v5_12a18 = or i32 %v4_12a18, %v5_12a10
  %v4_12a1c = mul nuw i32 %v4_12a14, 16777216
  %v5_12a1c = or i32 %v5_12a18, %v4_12a1c
  store i32 %v5_12a1c, i32* %r3.global-to-local, align 4
  %v1_12a20 = load i32, i32* %r7.global-to-local, align 4
  %v2_12a20 = add i32 %v1_12a20, 76
  %v3_12a20 = inttoptr i32 %v2_12a20 to i32*
  store i32 %v5_12a1c, i32* %v3_12a20, align 4
  %v0_12a24 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a24 = add i32 %v0_12a24, 85
  %v2_12a24 = inttoptr i32 %v1_12a24 to i8*
  %v3_12a24 = load i8, i8* %v2_12a24, align 1
  %v4_12a24 = zext i8 %v3_12a24 to i32
  %v1_12a28 = add i32 %v0_12a24, 84
  %v2_12a28 = inttoptr i32 %v1_12a28 to i8*
  %v3_12a28 = load i8, i8* %v2_12a28, align 1
  %v4_12a28 = zext i8 %v3_12a28 to i32
  store i32 %v4_12a28, i32* %r3.global-to-local, align 4
  %v1_12a2c = add i32 %v0_12a24, 86
  %v2_12a2c = inttoptr i32 %v1_12a2c to i8*
  %v3_12a2c = load i8, i8* %v2_12a2c, align 1
  %v4_12a2c = zext i8 %v3_12a2c to i32
  %v4_12a30 = mul nuw nsw i32 %v4_12a24, 256
  %v5_12a30 = or i32 %v4_12a28, %v4_12a30
  store i32 %v5_12a30, i32* %r3.global-to-local, align 4
  %v1_12a34 = add i32 %v0_12a24, 87
  %v2_12a34 = inttoptr i32 %v1_12a34 to i8*
  %v3_12a34 = load i8, i8* %v2_12a34, align 1
  %v4_12a34 = zext i8 %v3_12a34 to i32
  %v4_12a38 = mul nuw nsw i32 %v4_12a2c, 65536
  %v5_12a38 = or i32 %v4_12a38, %v5_12a30
  %v4_12a3c = mul nuw i32 %v4_12a34, 16777216
  %v5_12a3c = or i32 %v5_12a38, %v4_12a3c
  store i32 %v5_12a3c, i32* %r3.global-to-local, align 4
  %v1_12a40 = load i32, i32* %r7.global-to-local, align 4
  %v2_12a40 = add i32 %v1_12a40, 84
  %v3_12a40 = inttoptr i32 %v2_12a40 to i32*
  store i32 %v5_12a3c, i32* %v3_12a40, align 4
  ret i32 %v4_12944

; uselistorder directives
  uselistorder i32 %v4_12944, { 1, 0 }
  uselistorder i32 %v0_12938, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_128c8, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_12878, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_12798, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 3, 0, 4 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 1, 2, 0 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 0, 7, 1, 8, 2, 9, 10, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 0, 1, 6, 2, 7, 3, 8, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 3, 4, 5, 6, 7, 0, 8, 1, 9, 2, 10 }
  uselistorder i32 34, { 5, 0, 1, 2, 6, 3, 7, 4, 8 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 1, 10, 3, 11, 4, 5, 6, 12, 7, 13, 8, 14, 15 }
  uselistorder i32 29, { 6, 1, 0, 2, 3, 4, 5 }
  uselistorder i32 26, { 2, 0, 1 }
  uselistorder i32 25, { 7, 13, 14, 2, 0, 8, 3, 9, 1, 10, 4, 5, 11, 6, 12, 15, 16 }
  uselistorder i32 23, { 3, 1, 0, 4, 2 }
  uselistorder i32 22, { 8, 1, 9, 2, 3, 4, 5, 0, 6, 7, 10 }
  uselistorder i32 21, { 4, 3, 1, 0, 5, 2, 6 }
  uselistorder i32 19, { 4, 6, 7, 8, 3, 5, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 18, { 7, 10, 11, 12, 2, 0, 3, 8, 1, 9, 13, 4, 14, 5, 15, 6, 16 }
  uselistorder i32 17, { 10, 13, 0, 4, 25, 26, 5, 27, 28, 6, 1, 11, 12, 7, 8, 14, 9, 15, 16, 2, 17, 18, 19, 3, 20, 21, 22, 23, 24 }
  uselistorder i32 6, { 34, 38, 10, 11, 73, 12, 0, 37, 1, 35, 13, 36, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2, 23, 24, 25, 26, 27, 3, 28, 39, 40, 41, 4, 42, 5, 43, 44, 45, 29, 46, 6, 47, 48, 49, 30, 50, 7, 51, 52, 53, 31, 54, 55, 56, 57, 58, 32, 59, 8, 60, 61, 62, 63, 64, 65, 33, 66, 9, 67, 68, 69, 70, 71, 72 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_12a4c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12a4c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12a4c = load i32, i32* @r4, align 4
  store i32 %v3_12a4c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_12a64 = inttoptr i32 %arg2 to i8*
  %v3_12a64 = call i32 @function_10f00(i8* %v2_12a64, i32 0)
  store i32 %v3_12a64, i32* %r0.global-to-local, align 4
  %v0_12a68 = load i32, i32* %r5.global-to-local, align 4
  %v1_12a68 = inttoptr i32 %v0_12a68 to i32*
  %v2_12a68 = load i32, i32* %v1_12a68, align 4
  store i32 %v2_12a68, i32* %r3.global-to-local, align 4
  %v1_12a6c = add i32 %v0_12a68, 4
  %v2_12a6c = inttoptr i32 %v1_12a6c to i32*
  %v3_12a6c = load i32, i32* %v2_12a6c, align 4
  store i32 %v3_12a6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_12a74 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a74 = inttoptr i32 %v0_12a74 to i32*
  store i32 %v2_12a68, i32* %v1_12a74, align 4
  %v3_12a74 = add i32 %v0_12a74, 4
  %v4_12a74 = inttoptr i32 %v3_12a74 to i32*
  %v5_12a74 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12a74, i32* %v4_12a74, align 4
  %v0_12a78 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a78 = load i32, i32* %r6.global-to-local, align 4
  %v2_12a78 = add i32 %v1_12a78, 12
  %v3_12a78 = inttoptr i32 %v2_12a78 to i32*
  store i32 %v0_12a78, i32* %v3_12a78, align 4
  %v0_12a7c = load i32, i32* %r5.global-to-local, align 4
  %v1_12a7c = add i32 %v0_12a7c, 9
  %v2_12a7c = inttoptr i32 %v1_12a7c to i8*
  %v3_12a7c = load i8, i8* %v2_12a7c, align 1
  %v4_12a7c = zext i8 %v3_12a7c to i32
  store i32 %v4_12a7c, i32* %r2.global-to-local, align 4
  %v1_12a80 = add i32 %v0_12a7c, 8
  %v2_12a80 = inttoptr i32 %v1_12a80 to i8*
  %v3_12a80 = load i8, i8* %v2_12a80, align 1
  %v4_12a80 = zext i8 %v3_12a80 to i32
  %v4_12a84 = mul nuw nsw i32 %v4_12a7c, 256
  %v5_12a84 = or i32 %v4_12a80, %v4_12a84
  store i32 %v5_12a84, i32* %r3.global-to-local, align 4
  %v1_12a88 = load i32, i32* %r6.global-to-local, align 4
  %v2_12a88 = add i32 %v1_12a88, 16
  %v3_12a88 = inttoptr i32 %v2_12a88 to i32*
  store i32 %v5_12a84, i32* %v3_12a88, align 4
  %v0_12a8c = load i32, i32* %r5.global-to-local, align 4
  %v1_12a8c = add i32 %v0_12a8c, 11
  %v2_12a8c = inttoptr i32 %v1_12a8c to i8*
  %v3_12a8c = load i8, i8* %v2_12a8c, align 1
  %v4_12a8c = zext i8 %v3_12a8c to i32
  store i32 %v4_12a8c, i32* %r2.global-to-local, align 4
  %v1_12a90 = add i32 %v0_12a8c, 10
  %v2_12a90 = inttoptr i32 %v1_12a90 to i8*
  %v3_12a90 = load i8, i8* %v2_12a90, align 1
  %v4_12a90 = zext i8 %v3_12a90 to i32
  %v4_12a94 = mul nuw nsw i32 %v4_12a8c, 256
  %v5_12a94 = or i32 %v4_12a90, %v4_12a94
  store i32 %v5_12a94, i32* %r3.global-to-local, align 4
  %v1_12a98 = load i32, i32* %r6.global-to-local, align 4
  %v2_12a98 = add i32 %v1_12a98, 20
  %v3_12a98 = inttoptr i32 %v2_12a98 to i32*
  store i32 %v5_12a94, i32* %v3_12a98, align 4
  %v0_12a9c = load i32, i32* %r5.global-to-local, align 4
  %v1_12a9c = add i32 %v0_12a9c, 13
  %v2_12a9c = inttoptr i32 %v1_12a9c to i8*
  %v3_12a9c = load i8, i8* %v2_12a9c, align 1
  %v4_12a9c = zext i8 %v3_12a9c to i32
  store i32 %v4_12a9c, i32* %r2.global-to-local, align 4
  %v1_12aa0 = add i32 %v0_12a9c, 12
  %v2_12aa0 = inttoptr i32 %v1_12aa0 to i8*
  %v3_12aa0 = load i8, i8* %v2_12aa0, align 1
  %v4_12aa0 = zext i8 %v3_12aa0 to i32
  %v4_12aa4 = mul nuw nsw i32 %v4_12a9c, 256
  %v5_12aa4 = or i32 %v4_12aa0, %v4_12aa4
  store i32 %v5_12aa4, i32* %r3.global-to-local, align 4
  %v1_12aa8 = load i32, i32* %r6.global-to-local, align 4
  %v2_12aa8 = add i32 %v1_12aa8, 24
  %v3_12aa8 = inttoptr i32 %v2_12aa8 to i32*
  store i32 %v5_12aa4, i32* %v3_12aa8, align 4
  %v0_12aac = load i32, i32* %r5.global-to-local, align 4
  %v1_12aac = add i32 %v0_12aac, 20
  %v2_12aac = inttoptr i32 %v1_12aac to i32*
  %v3_12aac = load i32, i32* %v2_12aac, align 4
  store i32 %v3_12aac, i32* %r3.global-to-local, align 4
  %v1_12ab0 = add i32 %v0_12aac, 14
  %v2_12ab0 = inttoptr i32 %v1_12ab0 to i8*
  %v3_12ab0 = load i8, i8* %v2_12ab0, align 1
  %v4_12ab0 = zext i8 %v3_12ab0 to i32
  store i32 %v4_12ab0, i32* %r0.global-to-local, align 4
  %v1_12ab4 = add i32 %v0_12aac, 15
  %v2_12ab4 = inttoptr i32 %v1_12ab4 to i8*
  %v3_12ab4 = load i8, i8* %v2_12ab4, align 1
  %v4_12ab4 = zext i8 %v3_12ab4 to i32
  store i32 %v4_12ab4, i32* %ip.global-to-local, align 4
  %v1_12ab8 = add i32 %v0_12aac, 16
  %v2_12ab8 = inttoptr i32 %v1_12ab8 to i32*
  %v3_12ab8 = load i32, i32* %v2_12ab8, align 4
  store i32 %v3_12ab8, i32* %r1.global-to-local, align 4
  %v1_12abc = load i32, i32* %r6.global-to-local, align 4
  %v2_12abc = add i32 %v1_12abc, 44
  %v3_12abc = inttoptr i32 %v2_12abc to i32*
  store i32 %v3_12aac, i32* %v3_12abc, align 4
  %v0_12ac0 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ac0 = add i32 %v0_12ac0, 24
  %v2_12ac0 = inttoptr i32 %v1_12ac0 to i32*
  %v3_12ac0 = load i32, i32* %v2_12ac0, align 4
  store i32 %v3_12ac0, i32* %r3.global-to-local, align 4
  %v1_12ac4 = load i32, i32* %r6.global-to-local, align 4
  %v2_12ac4 = add i32 %v1_12ac4, 48
  %v3_12ac4 = inttoptr i32 %v2_12ac4 to i32*
  store i32 %v3_12ac0, i32* %v3_12ac4, align 4
  %v0_12ac8 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ac8 = add i32 %v0_12ac8, 28
  %v2_12ac8 = inttoptr i32 %v1_12ac8 to i32*
  %v3_12ac8 = load i32, i32* %v2_12ac8, align 4
  store i32 %v3_12ac8, i32* %r3.global-to-local, align 4
  %v1_12acc = load i32, i32* %r6.global-to-local, align 4
  %v2_12acc = add i32 %v1_12acc, 52
  %v3_12acc = inttoptr i32 %v2_12acc to i32*
  store i32 %v3_12ac8, i32* %v3_12acc, align 4
  %v0_12ad0 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ad0 = add i32 %v0_12ad0, 32
  %v2_12ad0 = inttoptr i32 %v1_12ad0 to i32*
  %v3_12ad0 = load i32, i32* %v2_12ad0, align 4
  store i32 %v3_12ad0, i32* %r3.global-to-local, align 4
  %v1_12ad4 = load i32, i32* %r6.global-to-local, align 4
  %v2_12ad4 = add i32 %v1_12ad4, 56
  %v3_12ad4 = inttoptr i32 %v2_12ad4 to i32*
  store i32 %v3_12ad0, i32* %v3_12ad4, align 4
  %v0_12ad8 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ad8 = add i32 %v0_12ad8, 40
  %v2_12ad8 = inttoptr i32 %v1_12ad8 to i32*
  %v3_12ad8 = load i32, i32* %v2_12ad8, align 4
  store i32 %v3_12ad8, i32* %r3.global-to-local, align 4
  %v1_12adc = load i32, i32* %r6.global-to-local, align 4
  %v2_12adc = add i32 %v1_12adc, 64
  %v3_12adc = inttoptr i32 %v2_12adc to i32*
  store i32 %v3_12ad8, i32* %v3_12adc, align 4
  %v0_12ae0 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ae0 = add i32 %v0_12ae0, 48
  %v2_12ae0 = inttoptr i32 %v1_12ae0 to i32*
  %v3_12ae0 = load i32, i32* %v2_12ae0, align 4
  store i32 %v3_12ae0, i32* %r3.global-to-local, align 4
  %v1_12ae4 = load i32, i32* %r6.global-to-local, align 4
  %v2_12ae4 = add i32 %v1_12ae4, 72
  %v3_12ae4 = inttoptr i32 %v2_12ae4 to i32*
  store i32 %v3_12ae0, i32* %v3_12ae4, align 4
  %v0_12ae8 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ae8 = add i32 %v0_12ae8, 36
  %v2_12ae8 = inttoptr i32 %v1_12ae8 to i32*
  %v3_12ae8 = load i32, i32* %v2_12ae8, align 4
  store i32 %v3_12ae8, i32* %r3.global-to-local, align 4
  %v1_12aec = load i32, i32* %r6.global-to-local, align 4
  %v2_12aec = add i32 %v1_12aec, 60
  %v3_12aec = inttoptr i32 %v2_12aec to i32*
  store i32 %v3_12ae8, i32* %v3_12aec, align 4
  %v0_12af0 = load i32, i32* %r5.global-to-local, align 4
  %v1_12af0 = add i32 %v0_12af0, 44
  %v2_12af0 = inttoptr i32 %v1_12af0 to i32*
  %v3_12af0 = load i32, i32* %v2_12af0, align 4
  store i32 %v3_12af0, i32* %r3.global-to-local, align 4
  %v0_12af4 = load i32, i32* %r0.global-to-local, align 4
  %v1_12af4 = load i32, i32* %ip.global-to-local, align 4
  %v4_12af4 = mul i32 %v1_12af4, 256
  %v5_12af4 = or i32 %v4_12af4, %v0_12af4
  store i32 %v5_12af4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_12afc = load i32, i32* %r6.global-to-local, align 4
  %v2_12afc = add i32 %v1_12afc, 28
  %v3_12afc = inttoptr i32 %v2_12afc to i32*
  store i32 %v5_12af4, i32* %v3_12afc, align 4
  %v0_12b00 = load i32, i32* %r1.global-to-local, align 4
  %v1_12b00 = load i32, i32* %r6.global-to-local, align 4
  %v2_12b00 = add i32 %v1_12b00, 32
  %v3_12b00 = inttoptr i32 %v2_12b00 to i32*
  store i32 %v0_12b00, i32* %v3_12b00, align 4
  %v0_12b04 = load i32, i32* %r2.global-to-local, align 4
  %v1_12b04 = load i32, i32* %r6.global-to-local, align 4
  %v2_12b04 = add i32 %v1_12b04, 36
  %v3_12b04 = inttoptr i32 %v2_12b04 to i32*
  store i32 %v0_12b04, i32* %v3_12b04, align 4
  %v0_12b08 = load i32, i32* %r3.global-to-local, align 4
  %v1_12b08 = load i32, i32* %r6.global-to-local, align 4
  %v2_12b08 = add i32 %v1_12b08, 68
  %v3_12b08 = inttoptr i32 %v2_12b08 to i32*
  store i32 %v0_12b08, i32* %v3_12b08, align 4
  %v0_12b0c = load i32, i32* %r5.global-to-local, align 4
  %v1_12b0c = add i32 %v0_12b0c, 52
  %v2_12b0c = inttoptr i32 %v1_12b0c to i32*
  %v3_12b0c = load i32, i32* %v2_12b0c, align 4
  store i32 %v3_12b0c, i32* %r3.global-to-local, align 4
  %v1_12b10 = load i32, i32* %r6.global-to-local, align 4
  %v2_12b10 = add i32 %v1_12b10, 76
  %v3_12b10 = inttoptr i32 %v2_12b10 to i32*
  store i32 %v3_12b0c, i32* %v3_12b10, align 4
  %v2_12b14 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12b14, i32* %r4.global-to-local, align 4
  ret i32 %v5_12af4

; uselistorder directives
  uselistorder i32 %v0_12aac, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 10, 11, 0, 6, 38, 7, 12, 8, 13, 15, 16, 1, 17, 18, 19, 9, 20, 21, 22, 2, 23, 24, 25, 3, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 5, 36, 37 }
  uselistorder i32 56, { 4, 2, 3, 5, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 14, 12, 11, 0, 13, 2, 3, 4, 5, 6, 7, 8, 9, 15, 16, 10, 17, 18, 19, 20, 1, 21 }
  uselistorder i32 14, { 9, 7, 17, 8, 1, 2, 3, 4, 5, 10, 11, 6, 12, 13, 14, 15, 0, 16 }
  uselistorder i32 13, { 12, 11, 10, 3, 1, 0, 4, 5, 6, 7, 13, 14, 15, 16, 17, 8, 18, 19, 20, 21, 22, 23, 24, 25, 9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 2, 40, 41 }
  uselistorder i32 9, { 24, 25, 26, 5, 2, 37, 6, 17, 3, 19, 20, 7, 18, 8, 21, 9, 22, 10, 23, 0, 11, 12, 13, 14, 1, 15, 33, 27, 28, 29, 30, 31, 32, 34, 35, 36, 16, 38, 39, 4, 40 }
  uselistorder i32 (i8*, i32)* @function_10f00, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_12b18(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b18:
  ret i32 %arg1
}

define i32 @function_12b20() local_unnamed_addr {
dec_label_pc_12b20:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_12b20 = load i32, i32* @r1, align 4
  %v1_12b20 = load i32, i32* @r0, align 4
  %v2_12b20 = sub i32 %v0_12b20, %v1_12b20
  %v3_12b20 = icmp ult i32 %v0_12b20, %v1_12b20
  %v4_12b20 = xor i32 %v1_12b20, %v0_12b20
  %v5_12b20 = xor i32 %v2_12b20, %v0_12b20
  %v6_12b20 = and i32 %v5_12b20, %v4_12b20
  %v7_12b20 = icmp slt i32 %v6_12b20, 0
  store i1 %v7_12b20, i1* %cpsr_v.global-to-local, align 1
  %v8_12b20 = icmp slt i32 %v2_12b20, 0
  store i1 %v8_12b20, i1* %cpsr_n.global-to-local, align 1
  %v9_12b20 = icmp eq i32 %v0_12b20, %v1_12b20
  store i1 %v9_12b20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12b20, label %dec_label_pc_12d6c, label %dec_label_pc_12b28

dec_label_pc_12b28:                               ; preds = %dec_label_pc_12b20
  br i1 %v9_12b20, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_12b28
  %merge = phi i32 [ %v0_12b20, %dec_label_pc_12b28 ], [ %v2_12e00, %bb141 ], [ %v11_12e1c, %bb144 ], [ %v7_12e1c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12b28
  store i32 %v1_12b20, i32* %stack_var_-8, align 4
  %v0_12b30 = load i32, i32* @r2, align 4
  %v2_12b30 = add i32 %v0_12b30, -4
  store i32 %v2_12b30, i32* %r2.global-to-local, align 4
  %v4_12b30 = sub i32 3, %v0_12b30
  %v5_12b30 = and i32 %v4_12b30, %v0_12b30
  %v6_12b30 = icmp slt i32 %v5_12b30, 0
  store i1 %v6_12b30, i1* %cpsr_v.global-to-local, align 1
  %v7_12b30 = icmp slt i32 %v2_12b30, 0
  store i1 %v7_12b30, i1* %cpsr_n.global-to-local, align 1
  %v8_12b30 = icmp eq i32 %v0_12b30, 4
  store i1 %v8_12b30, i1* %cpsr_z.global-to-local, align 1
  %v5_12b34 = icmp slt i32 %v0_12b30, 4
  br i1 %v5_12b34, label %bb131, label %dec_label_pc_12b38

dec_label_pc_12b38:                               ; preds = %bb
  %v1_12b38 = urem i32 %v1_12b20, 4
  store i32 %v1_12b38, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12b38 = icmp eq i32 %v1_12b38, 0
  store i1 %v2_12b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12b38, label %dec_label_pc_12b40, label %dec_label_pc_12be4

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12b38
  %v1_12b40 = urem i32 %v0_12b20, 4
  store i32 %v1_12b40, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12b40 = icmp eq i32 %v1_12b40, 0
  store i1 %v2_12b40, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_12b20 to i2
  br i1 %v2_12b40, label %dec_label_pc_12b48, label %dec_label_pc_12c14

dec_label_pc_12b48:                               ; preds = %dec_label_pc_12b40, %dec_label_pc_12c0c
  %v0_12b6092 = phi i32 [ %v1_12b20, %dec_label_pc_12b40 ], [ %v0_12c5c75, %dec_label_pc_12c0c ]
  %v0_12b5c91 = phi i32 [ %v0_12b20, %dec_label_pc_12b40 ], [ %v0_12c0c, %dec_label_pc_12c0c ]
  %v0_12b48 = phi i32 [ %v2_12b30, %dec_label_pc_12b40 ], [ %v2_12c04, %dec_label_pc_12c0c ]
  %v2_12b48 = add i32 %v0_12b48, -8
  store i32 %v2_12b48, i32* %r2.global-to-local, align 4
  %v4_12b48 = sub i32 7, %v0_12b48
  %v5_12b48 = and i32 %v4_12b48, %v0_12b48
  %v6_12b48 = icmp slt i32 %v5_12b48, 0
  store i1 %v6_12b48, i1* %cpsr_v.global-to-local, align 1
  %v7_12b48 = icmp slt i32 %v2_12b48, 0
  store i1 %v7_12b48, i1* %cpsr_n.global-to-local, align 1
  %v8_12b48 = icmp eq i32 %v0_12b48, 8
  store i1 %v8_12b48, i1* %cpsr_z.global-to-local, align 1
  %v5_12b4c = icmp slt i32 %v0_12b48, 8
  br i1 %v5_12b4c, label %dec_label_pc_12b9c, label %dec_label_pc_12b50

dec_label_pc_12b50:                               ; preds = %dec_label_pc_12b48
  %v2_12b50 = add i32 %v0_12b48, -28
  store i32 %v2_12b50, i32* %r2.global-to-local, align 4
  %v4_12b50 = sub i32 27, %v0_12b48
  %v5_12b50 = and i32 %v4_12b50, %v2_12b48
  %v6_12b50 = icmp slt i32 %v5_12b50, 0
  store i1 %v6_12b50, i1* %cpsr_v.global-to-local, align 1
  %v7_12b50 = icmp slt i32 %v2_12b50, 0
  store i1 %v7_12b50, i1* %cpsr_n.global-to-local, align 1
  %v8_12b50 = icmp eq i32 %v2_12b48, 20
  store i1 %v8_12b50, i1* %cpsr_z.global-to-local, align 1
  %v5_12b54 = icmp slt i32 %v2_12b48, 20
  br i1 %v5_12b54, label %dec_label_pc_12b88, label %dec_label_pc_12b58

dec_label_pc_12b58:                               ; preds = %dec_label_pc_12b50
  %v0_12b58 = load i32, i32* @r4, align 4
  store i32 %v0_12b58, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12b5c

dec_label_pc_12b5c:                               ; preds = %dec_label_pc_12b5c.dec_label_pc_12b5c_crit_edge, %dec_label_pc_12b58
  %v0_12b60 = phi i32 [ %v12_12b68, %dec_label_pc_12b5c.dec_label_pc_12b5c_crit_edge ], [ %v0_12b6092, %dec_label_pc_12b58 ]
  %v0_12b5c = phi i32 [ %v0_12b5c.pre, %dec_label_pc_12b5c.dec_label_pc_12b5c_crit_edge ], [ %v0_12b5c91, %dec_label_pc_12b58 ]
  %v1_12b5c = inttoptr i32 %v0_12b5c to i32*
  %v2_12b5c = load i32, i32* %v1_12b5c, align 4
  store i32 %v2_12b5c, i32* %r3.global-to-local, align 4
  %v3_12b5c = add i32 %v0_12b5c, 4
  %v4_12b5c = inttoptr i32 %v3_12b5c to i32*
  %v5_12b5c = load i32, i32* %v4_12b5c, align 4
  store i32 %v5_12b5c, i32* %r4.global-to-local, align 4
  %v6_12b5c = add i32 %v0_12b5c, 8
  %v7_12b5c = inttoptr i32 %v6_12b5c to i32*
  %v8_12b5c = load i32, i32* %v7_12b5c, align 4
  store i32 %v8_12b5c, i32* %ip.global-to-local, align 4
  %v9_12b5c = add i32 %v0_12b5c, 12
  %v10_12b5c = inttoptr i32 %v9_12b5c to i32*
  %v11_12b5c = load i32, i32* %v10_12b5c, align 4
  store i32 %v11_12b5c, i32* %lr.global-to-local, align 4
  %v12_12b5c = add i32 %v0_12b5c, 16
  store i32 %v12_12b5c, i32* %r1.global-to-local, align 4
  %v1_12b60 = inttoptr i32 %v0_12b60 to i32*
  store i32 %v2_12b5c, i32* %v1_12b60, align 4
  %v3_12b60 = add i32 %v0_12b60, 4
  %v4_12b60 = inttoptr i32 %v3_12b60 to i32*
  %v5_12b60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12b60, i32* %v4_12b60, align 4
  %v6_12b60 = add i32 %v0_12b60, 8
  %v7_12b60 = inttoptr i32 %v6_12b60 to i32*
  %v8_12b60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_12b60, i32* %v7_12b60, align 4
  %v9_12b60 = add i32 %v0_12b60, 12
  %v10_12b60 = inttoptr i32 %v9_12b60 to i32*
  %v11_12b60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_12b60, i32* %v10_12b60, align 4
  %v12_12b60 = add i32 %v0_12b60, 16
  store i32 %v12_12b60, i32* %r0.global-to-local, align 4
  %v0_12b64 = load i32, i32* %r1.global-to-local, align 4
  %v1_12b64 = inttoptr i32 %v0_12b64 to i32*
  %v2_12b64 = load i32, i32* %v1_12b64, align 4
  store i32 %v2_12b64, i32* %r3.global-to-local, align 4
  %v3_12b64 = add i32 %v0_12b64, 4
  %v4_12b64 = inttoptr i32 %v3_12b64 to i32*
  %v5_12b64 = load i32, i32* %v4_12b64, align 4
  store i32 %v5_12b64, i32* %r4.global-to-local, align 4
  %v6_12b64 = add i32 %v0_12b64, 8
  %v7_12b64 = inttoptr i32 %v6_12b64 to i32*
  %v8_12b64 = load i32, i32* %v7_12b64, align 4
  store i32 %v8_12b64, i32* @ip, align 4
  %v9_12b64 = add i32 %v0_12b64, 12
  %v10_12b64 = inttoptr i32 %v9_12b64 to i32*
  %v11_12b64 = load i32, i32* %v10_12b64, align 4
  store i32 %v11_12b64, i32* @lr, align 4
  %v12_12b64 = add i32 %v0_12b64, 16
  store i32 %v12_12b64, i32* @r1, align 4
  %v1_12b68 = inttoptr i32 %v12_12b60 to i32*
  store i32 %v2_12b64, i32* %v1_12b68, align 4
  %v3_12b68 = add i32 %v0_12b60, 20
  %v4_12b68 = inttoptr i32 %v3_12b68 to i32*
  %v5_12b68 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12b68, i32* %v4_12b68, align 4
  %v6_12b68 = add i32 %v0_12b60, 24
  %v7_12b68 = inttoptr i32 %v6_12b68 to i32*
  %v8_12b68 = load i32, i32* @ip, align 4
  store i32 %v8_12b68, i32* %v7_12b68, align 4
  %v9_12b68 = add i32 %v0_12b60, 28
  %v10_12b68 = inttoptr i32 %v9_12b68 to i32*
  %v11_12b68 = load i32, i32* @lr, align 4
  store i32 %v11_12b68, i32* %v10_12b68, align 4
  %v12_12b68 = add i32 %v0_12b60, 32
  store i32 %v12_12b68, i32* @r0, align 4
  %v0_12b6c = load i32, i32* %r2.global-to-local, align 4
  %v2_12b6c = add i32 %v0_12b6c, -32
  store i32 %v2_12b6c, i32* %r2.global-to-local, align 4
  %v6_12b70 = icmp slt i32 %v0_12b6c, 32
  br i1 %v6_12b70, label %dec_label_pc_12b74, label %dec_label_pc_12b5c.dec_label_pc_12b5c_crit_edge

dec_label_pc_12b5c.dec_label_pc_12b5c_crit_edge:  ; preds = %dec_label_pc_12b5c
  %v0_12b5c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_12b5c

dec_label_pc_12b74:                               ; preds = %dec_label_pc_12b5c
  %v4_12b74 = add i32 %v0_12b6c, -16
  %v6_12b74 = add i32 %v0_12b6c, 2147483616
  %v7_12b74 = and i32 %v4_12b74, %v6_12b74
  %v8_12b74 = icmp slt i32 %v7_12b74, 0
  store i1 %v8_12b74, i1* %cpsr_v.global-to-local, align 1
  %v9_12b74 = icmp slt i32 %v4_12b74, 0
  store i1 %v9_12b74, i1* %cpsr_n.global-to-local, align 1
  %v10_12b74 = icmp eq i32 %v4_12b74, 0
  store i1 %v10_12b74, i1* %cpsr_z.global-to-local, align 1
  %v5_12b78 = icmp slt i32 %v2_12b6c, -16
  br i1 %v5_12b78, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_12b74
  %v6_12b78 = load i32, i32* @r1, align 4
  %v7_12b78 = inttoptr i32 %v6_12b78 to i32*
  %v8_12b78 = load i32, i32* %v7_12b78, align 4
  store i32 %v8_12b78, i32* %r3.global-to-local, align 4
  %v9_12b78 = add i32 %v6_12b78, 4
  %v10_12b78 = inttoptr i32 %v9_12b78 to i32*
  %v11_12b78 = load i32, i32* %v10_12b78, align 4
  store i32 %v11_12b78, i32* %r4.global-to-local, align 4
  %v12_12b78 = add i32 %v6_12b78, 8
  %v13_12b78 = inttoptr i32 %v12_12b78 to i32*
  %v14_12b78 = load i32, i32* %v13_12b78, align 4
  store i32 %v14_12b78, i32* @ip, align 4
  %v15_12b78 = add i32 %v6_12b78, 12
  %v16_12b78 = inttoptr i32 %v15_12b78 to i32*
  %v17_12b78 = load i32, i32* %v16_12b78, align 4
  store i32 %v17_12b78, i32* @lr, align 4
  %v18_12b78 = add i32 %v6_12b78, 16
  store i32 %v18_12b78, i32* @r1, align 4
  %v7_12b7c = inttoptr i32 %v12_12b68 to i32*
  store i32 %v8_12b78, i32* %v7_12b7c, align 4
  %v9_12b7c = add i32 %v0_12b60, 36
  %v10_12b7c = inttoptr i32 %v9_12b7c to i32*
  %v11_12b7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_12b7c, i32* %v10_12b7c, align 4
  %v12_12b7c = add i32 %v0_12b60, 40
  %v13_12b7c = inttoptr i32 %v12_12b7c to i32*
  %v14_12b7c = load i32, i32* @ip, align 4
  store i32 %v14_12b7c, i32* %v13_12b7c, align 4
  %v15_12b7c = add i32 %v0_12b60, 44
  %v16_12b7c = inttoptr i32 %v15_12b7c to i32*
  %v17_12b7c = load i32, i32* @lr, align 4
  store i32 %v17_12b7c, i32* %v16_12b7c, align 4
  %v18_12b7c = add i32 %v0_12b60, 48
  store i32 %v18_12b7c, i32* @r0, align 4
  %v6_12b80 = load i32, i32* %r2.global-to-local, align 4
  %v7_12b80 = add i32 %v6_12b80, -16
  store i32 %v7_12b80, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12b74, %bb128
  %v3_12b90101 = phi i32 [ %v12_12b68, %dec_label_pc_12b74 ], [ %v18_12b7c, %bb128 ]
  %v0_12b8895 = phi i32 [ %v2_12b6c, %dec_label_pc_12b74 ], [ %v7_12b80, %bb128 ]
  %v2_12b84 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12b84, i32* @r4, align 4
  br label %dec_label_pc_12b88

dec_label_pc_12b88:                               ; preds = %dec_label_pc_12b50, %.thread1
  %v3_12b90100 = phi i32 [ %v0_12b6092, %dec_label_pc_12b50 ], [ %v3_12b90101, %.thread1 ]
  %v0_12b88 = phi i32 [ %v2_12b50, %dec_label_pc_12b50 ], [ %v0_12b8895, %.thread1 ]
  %v1_12b88 = add i32 %v0_12b88, 20
  store i32 %v1_12b88, i32* %r2.global-to-local, align 4
  %v3_12b88 = sub i32 0, %v0_12b88
  %v4_12b88 = and i32 %v1_12b88, %v3_12b88
  %v5_12b88 = icmp slt i32 %v4_12b88, 0
  store i1 %v5_12b88, i1* %cpsr_v.global-to-local, align 1
  %v6_12b88 = icmp slt i32 %v1_12b88, 0
  store i1 %v6_12b88, i1* %cpsr_n.global-to-local, align 1
  %v7_12b88 = icmp eq i32 %v1_12b88, 0
  store i1 %v7_12b88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12b8c

dec_label_pc_12b8c:                               ; preds = %.thread117, %dec_label_pc_12b88
  %v0_12b9c.pre147 = phi i32 [ %v0_12b9c.pre, %.thread117 ], [ %v1_12b88, %dec_label_pc_12b88 ]
  %v3_12b90 = phi i32 [ %v3_12b9098118, %.thread117 ], [ %v3_12b90100, %dec_label_pc_12b88 ]
  %v1_12b94 = phi i1 [ %v1_12b98, %.thread117 ], [ %v5_12b88, %dec_label_pc_12b88 ]
  %v0_12b94 = phi i1 [ %v0_12b98, %.thread117 ], [ %v6_12b88, %dec_label_pc_12b88 ]
  %v2_12b8c = xor i1 %v1_12b94, %v0_12b94
  br i1 %v2_12b8c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_12b8c
  %v3_12b8c = load i32, i32* @r1, align 4
  %v4_12b8c = inttoptr i32 %v3_12b8c to i32*
  %v5_12b8c = load i32, i32* %v4_12b8c, align 4
  store i32 %v5_12b8c, i32* %r3.global-to-local, align 4
  %v6_12b8c = add i32 %v3_12b8c, 4
  %v7_12b8c = inttoptr i32 %v6_12b8c to i32*
  %v8_12b8c = load i32, i32* %v7_12b8c, align 4
  store i32 %v8_12b8c, i32* @ip, align 4
  %v9_12b8c = add i32 %v3_12b8c, 8
  %v10_12b8c = inttoptr i32 %v9_12b8c to i32*
  %v11_12b8c = load i32, i32* %v10_12b8c, align 4
  store i32 %v11_12b8c, i32* @lr, align 4
  %v12_12b8c = add i32 %v3_12b8c, 12
  store i32 %v12_12b8c, i32* @r1, align 4
  %v4_12b90 = inttoptr i32 %v3_12b90 to i32*
  store i32 %v5_12b8c, i32* %v4_12b90, align 4
  %v6_12b90 = add i32 %v3_12b90, 4
  %v7_12b90 = inttoptr i32 %v6_12b90 to i32*
  %v8_12b90 = load i32, i32* @ip, align 4
  store i32 %v8_12b90, i32* %v7_12b90, align 4
  %v9_12b90 = add i32 %v3_12b90, 8
  %v10_12b90 = inttoptr i32 %v9_12b90 to i32*
  %v11_12b90 = load i32, i32* @lr, align 4
  store i32 %v11_12b90, i32* %v10_12b90, align 4
  %v12_12b90 = add i32 %v3_12b90, 12
  store i32 %v12_12b90, i32* @r0, align 4
  %v3_12b94 = load i32, i32* %r2.global-to-local, align 4
  %v4_12b94 = add i32 %v3_12b94, -12
  store i32 %v4_12b94, i32* %r2.global-to-local, align 4
  %v6_12b94 = sub i32 11, %v3_12b94
  %v7_12b94 = and i32 %v6_12b94, %v3_12b94
  %v8_12b94 = icmp slt i32 %v7_12b94, 0
  store i1 %v8_12b94, i1* %cpsr_v.global-to-local, align 1
  %v9_12b94 = icmp slt i32 %v4_12b94, 0
  store i1 %v9_12b94, i1* %cpsr_n.global-to-local, align 1
  %v10_12b94 = icmp eq i32 %v3_12b94, 12
  store i1 %v10_12b94, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_12b8c, %bb129
  %v0_12b9c.pre = phi i32 [ %v4_12b94, %bb129 ], [ %v0_12b9c.pre147, %dec_label_pc_12b8c ]
  %v3_12b9098118 = phi i32 [ %v12_12b90, %bb129 ], [ %v3_12b90, %dec_label_pc_12b8c ]
  %v1_12b98 = phi i1 [ %v8_12b94, %bb129 ], [ %v1_12b94, %dec_label_pc_12b8c ]
  %v0_12b98 = phi i1 [ %v9_12b94, %bb129 ], [ %v0_12b94, %dec_label_pc_12b8c ]
  %v2_12b98 = xor i1 %v1_12b98, %v0_12b98
  br i1 %v2_12b98, label %dec_label_pc_12b9c, label %dec_label_pc_12b8c

dec_label_pc_12b9c:                               ; preds = %.thread117, %dec_label_pc_12b48
  %v7_12bac = phi i32 [ %v0_12b6092, %dec_label_pc_12b48 ], [ %v3_12b9098118, %.thread117 ]
  %v0_12b9c = phi i32 [ %v2_12b48, %dec_label_pc_12b48 ], [ %v0_12b9c.pre, %.thread117 ]
  %v2_12b9c = add i32 %v0_12b9c, 8
  store i32 %v2_12b9c, i32* %r2.global-to-local, align 4
  %v4_12b9c = sub i32 0, %v0_12b9c
  %v5_12b9c = and i32 %v2_12b9c, %v4_12b9c
  %v6_12b9c = icmp slt i32 %v5_12b9c, 0
  store i1 %v6_12b9c, i1* %cpsr_v.global-to-local, align 1
  %v7_12b9c = icmp slt i32 %v2_12b9c, 0
  store i1 %v7_12b9c, i1* %cpsr_n.global-to-local, align 1
  %v8_12b9c = icmp eq i32 %v2_12b9c, 0
  store i1 %v8_12b9c, i1* %cpsr_z.global-to-local, align 1
  %v5_12ba0 = icmp slt i32 %v0_12b9c, -8
  br i1 %v5_12ba0, label %bb131, label %dec_label_pc_12ba4

dec_label_pc_12ba4:                               ; preds = %dec_label_pc_12b9c
  %v6_12ba4 = add i32 %v0_12b9c, 4
  store i32 %v6_12ba4, i32* %r2.global-to-local, align 4
  %v8_12ba4 = sub i32 -5, %v0_12b9c
  %v9_12ba4 = and i32 %v8_12ba4, %v2_12b9c
  %v10_12ba4 = icmp slt i32 %v9_12ba4, 0
  store i1 %v10_12ba4, i1* %cpsr_v.global-to-local, align 1
  %v11_12ba4 = icmp slt i32 %v6_12ba4, 0
  store i1 %v11_12ba4, i1* %cpsr_n.global-to-local, align 1
  %v12_12ba4 = icmp eq i32 %v2_12b9c, 4
  store i1 %v12_12ba4, i1* %cpsr_z.global-to-local, align 1
  %v5_12ba8 = icmp slt i32 %v2_12b9c, 4
  %v6_12ba8 = load i32, i32* @r1, align 4
  %v7_12ba8 = inttoptr i32 %v6_12ba8 to i32*
  %v8_12ba8 = load i32, i32* %v7_12ba8, align 4
  store i32 %v8_12ba8, i32* %r3.global-to-local, align 4
  %v10_12ba8 = add i32 %v6_12ba8, 4
  br i1 %v5_12ba8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_12ba4
  store i32 %v10_12ba8, i32* @r1, align 4
  %v8_12bac = inttoptr i32 %v7_12bac to i32*
  store i32 %v8_12ba8, i32* %v8_12bac, align 4
  %v9_12bac = load i32, i32* @r0, align 4
  %v10_12bac = add i32 %v9_12bac, 4
  store i32 %v10_12bac, i32* @r0, align 4
  %v0_12bbc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_12ba4
  %v10_12bb0 = inttoptr i32 %v10_12ba8 to i32*
  %v11_12bb0 = load i32, i32* %v10_12bb0, align 4
  store i32 %v11_12bb0, i32* @ip, align 4
  %v12_12bb0 = add i32 %v6_12ba8, 8
  store i32 %v12_12bb0, i32* @r1, align 4
  %v7_12bb4 = inttoptr i32 %v7_12bac to i32*
  store i32 %v8_12ba8, i32* %v7_12bb4, align 4
  %v9_12bb4 = add i32 %v7_12bac, 4
  %v10_12bb4 = inttoptr i32 %v9_12bb4 to i32*
  %v11_12bb4 = load i32, i32* @ip, align 4
  store i32 %v11_12bb4, i32* %v10_12bb4, align 4
  %v12_12bb4 = add i32 %v7_12bac, 8
  store i32 %v12_12bb4, i32* @r0, align 4
  %v6_12bb8 = load i32, i32* %r2.global-to-local, align 4
  %v7_12bb8 = add i32 %v6_12bb8, -4
  store i32 %v7_12bb8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_12b9c, %bb, %dec_label_pc_12d64, %dec_label_pc_12cf8, %dec_label_pc_12c8c, %bb130
  %v2_12bcc = phi i32 [ %v10_12bac, %.thread5 ], [ %v0_12c5c75, %.thread11 ], [ %v7_12bac, %dec_label_pc_12b9c ], [ %v1_12b20, %bb ], [ %v2_12bcc113, %dec_label_pc_12d64 ], [ %v2_12bcc112, %dec_label_pc_12cf8 ], [ %v2_12bcc111, %dec_label_pc_12c8c ], [ %v12_12bb4, %bb130 ]
  %v0_12bbc = phi i32 [ %v0_12bbc.pre, %.thread5 ], [ %v2_12c04, %.thread11 ], [ %v2_12b9c, %dec_label_pc_12b9c ], [ %v2_12b30, %bb ], [ %v0_12bbc109, %dec_label_pc_12d64 ], [ %v0_12bbc108, %dec_label_pc_12cf8 ], [ %v0_12bbc107, %dec_label_pc_12c8c ], [ %v7_12bb8, %bb130 ]
  %v1_12bbc = add i32 %v0_12bbc, 4
  store i32 %v1_12bbc, i32* %r2.global-to-local, align 4
  %v3_12bbc = sub i32 0, %v0_12bbc
  %v4_12bbc = and i32 %v1_12bbc, %v3_12bbc
  %v5_12bbc = icmp slt i32 %v4_12bbc, 0
  store i1 %v5_12bbc, i1* %cpsr_v.global-to-local, align 1
  %v6_12bbc = icmp slt i32 %v1_12bbc, 0
  store i1 %v6_12bbc, i1* %cpsr_n.global-to-local, align 1
  %v7_12bbc = icmp eq i32 %v1_12bbc, 0
  store i1 %v7_12bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12bbc, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_12bc0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_12bc0, i32* %r0.global-to-local, align 4
  ret i32 %v3_12bc0

bb133:                                            ; preds = %bb131
  %v1_12bc4 = add i32 %v0_12bbc, 2
  %v3_12bc4 = sub i32 -3, %v0_12bbc
  %v4_12bc4 = and i32 %v3_12bc4, %v1_12bbc
  %v5_12bc4 = icmp slt i32 %v4_12bc4, 0
  store i1 %v5_12bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_12bc4 = icmp slt i32 %v1_12bc4, 0
  store i1 %v6_12bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_12bc4 = icmp eq i32 %v1_12bbc, 2
  store i1 %v7_12bc4, i1* %cpsr_z.global-to-local, align 1
  %v0_12bc8 = load i32, i32* @r1, align 4
  %v1_12bc8 = inttoptr i32 %v0_12bc8 to i8*
  %v2_12bc8 = load i8, i8* %v1_12bc8, align 1
  %v3_12bc8 = zext i8 %v2_12bc8 to i32
  store i32 %v3_12bc8, i32* %r3.global-to-local, align 4
  %v5_12bc8 = add i32 %v0_12bc8, 1
  store i32 %v5_12bc8, i32* %r1.global-to-local, align 4
  %v3_12bcc = inttoptr i32 %v2_12bcc to i8*
  store i8 %v2_12bc8, i8* %v3_12bcc, align 1
  %v4_12bcc = load i32, i32* @r0, align 4
  %v5_12bcc = add i32 %v4_12bcc, 1
  store i32 %v5_12bcc, i32* %r0.global-to-local, align 4
  %v0_12bd0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_12bd0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_12bd0 = xor i1 %v0_12bd0, %v1_12bd0
  br i1 %v2_12bd0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_12bd0 = load i32, i32* %r1.global-to-local, align 4
  %v4_12bd0 = inttoptr i32 %v3_12bd0 to i8*
  %v5_12bd0 = load i8, i8* %v4_12bd0, align 1
  %v6_12bd0 = zext i8 %v5_12bd0 to i32
  store i32 %v6_12bd0, i32* %r3.global-to-local, align 4
  %v8_12bd0 = add i32 %v3_12bd0, 1
  store i32 %v8_12bd0, i32* %r1.global-to-local, align 4
  %v6_12bd4 = inttoptr i32 %v5_12bcc to i8*
  store i8 %v5_12bd0, i8* %v6_12bd4, align 1
  %v7_12bd4 = load i32, i32* %r0.global-to-local, align 4
  %v8_12bd4 = add i32 %v7_12bd4, 1
  store i32 %v8_12bd4, i32* %r0.global-to-local, align 4
  %v1_12bd8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12bd8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_12bdc = phi i32 [ %v8_12bd4, %bb134 ], [ %v5_12bcc, %bb133 ]
  %v2_12bdc = phi i1 [ %v2_12bd8.pre, %bb134 ], [ %v1_12bd0, %bb133 ]
  %v1_12bdc = phi i1 [ %v1_12bd8.pre, %bb134 ], [ %v0_12bd0, %bb133 ]
  %v0_12bd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_12bd8 = xor i1 %v2_12bdc, %v1_12bdc
  %v4_12bd8 = or i1 %v0_12bd8, %v3_12bd8
  br i1 %v4_12bd8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_12bd8 = load i32, i32* %r1.global-to-local, align 4
  %v6_12bd8 = inttoptr i32 %v5_12bd8 to i8*
  %v7_12bd8 = load i8, i8* %v6_12bd8, align 1
  %v8_12bd8 = zext i8 %v7_12bd8 to i32
  store i32 %v8_12bd8, i32* %r3.global-to-local, align 4
  %v10_12bd8 = add i32 %v5_12bd8, 1
  store i32 %v10_12bd8, i32* %r1.global-to-local, align 4
  %v8_12bdc = inttoptr i32 %v7_12bdc to i8*
  store i8 %v7_12bd8, i8* %v8_12bdc, align 1
  %v9_12bdc = load i32, i32* %r0.global-to-local, align 4
  %v10_12bdc = add i32 %v9_12bdc, 1
  store i32 %v10_12bdc, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_12be0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12be0, i32* %r0.global-to-local, align 4
  ret i32 %v2_12be0

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12b38
  %v1_12be4 = sub nsw i32 4, %v1_12b38
  store i32 %v1_12be4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_12be8 = icmp ult i32 %v1_12be4, 2
  store i1 %v8_12be8, i1* %cpsr_n.global-to-local, align 1
  %v9_12be8 = icmp eq i32 %v1_12be4, 2
  store i1 %v9_12be8, i1* %cpsr_z.global-to-local, align 1
  %v1_12bec = inttoptr i32 %v0_12b20 to i8*
  %v2_12bec = load i8, i8* %v1_12bec, align 1
  %v3_12bec = zext i8 %v2_12bec to i32
  store i32 %v3_12bec, i32* %r3.global-to-local, align 4
  %v5_12bec = add i32 %v0_12b20, 1
  store i32 %v5_12bec, i32* @r1, align 4
  %v3_12bf0 = inttoptr i32 %v1_12b20 to i8*
  store i8 %v2_12bec, i8* %v3_12bf0, align 1
  %v4_12bf0 = load i32, i32* @r0, align 4
  %v5_12bf0 = add i32 %v4_12bf0, 1
  store i32 %v5_12bf0, i32* @r0, align 4
  br i1 %v8_12be8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_12be4
  %v6_12bf4 = load i32, i32* @r1, align 4
  %v7_12bf4 = inttoptr i32 %v6_12bf4 to i8*
  %v8_12bf4 = load i8, i8* %v7_12bf4, align 1
  %v9_12bf4 = zext i8 %v8_12bf4 to i32
  store i32 %v9_12bf4, i32* %r3.global-to-local, align 4
  %v11_12bf4 = add i32 %v6_12bf4, 1
  store i32 %v11_12bf4, i32* @r1, align 4
  %v9_12bf8 = inttoptr i32 %v5_12bf0 to i8*
  store i8 %v8_12bf4, i8* %v9_12bf8, align 1
  %v10_12bf8 = load i32, i32* @r0, align 4
  %v11_12bf8 = add i32 %v10_12bf8, 1
  store i32 %v11_12bf8, i32* @r0, align 4
  br i1 %v9_12be8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_12bfc = load i32, i32* @r1, align 4
  %v9_12bfc = inttoptr i32 %v8_12bfc to i8*
  %v10_12bfc = load i8, i8* %v9_12bfc, align 1
  %v11_12bfc = zext i8 %v10_12bfc to i32
  store i32 %v11_12bfc, i32* %r3.global-to-local, align 4
  %v13_12bfc = add i32 %v8_12bfc, 1
  store i32 %v13_12bfc, i32* @r1, align 4
  %v11_12c00 = inttoptr i32 %v11_12bf8 to i8*
  store i8 %v10_12bfc, i8* %v11_12c00, align 1
  %v12_12c00 = load i32, i32* @r0, align 4
  %v13_12c00 = add i32 %v12_12c00, 1
  store i32 %v13_12c00, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_12be4, %bb137
  %v0_12c5c75 = phi i32 [ %v11_12bf8, %bb136 ], [ %v5_12bf0, %dec_label_pc_12be4 ], [ %v13_12c00, %bb137 ]
  %v0_12c04 = load i32, i32* %r2.global-to-local, align 4
  %v1_12c04 = load i32, i32* @ip, align 4
  %v2_12c04 = sub i32 %v0_12c04, %v1_12c04
  store i32 %v2_12c04, i32* %r2.global-to-local, align 4
  %v4_12c04 = xor i32 %v1_12c04, %v0_12c04
  %v5_12c04 = xor i32 %v2_12c04, %v0_12c04
  %v6_12c04 = and i32 %v5_12c04, %v4_12c04
  %v7_12c04 = icmp slt i32 %v6_12c04, 0
  store i1 %v7_12c04, i1* %cpsr_v.global-to-local, align 1
  %v8_12c04 = icmp slt i32 %v2_12c04, 0
  store i1 %v8_12c04, i1* %cpsr_n.global-to-local, align 1
  %v9_12c04 = icmp eq i32 %v0_12c04, %v1_12c04
  store i1 %v9_12c04, i1* %cpsr_z.global-to-local, align 1
  %v5_12c08 = icmp slt i32 %v0_12c04, %v1_12c04
  br i1 %v5_12c08, label %bb131, label %dec_label_pc_12c0c

dec_label_pc_12c0c:                               ; preds = %.thread11
  %v0_12c0c = load i32, i32* @r1, align 4
  %v1_12c0c = urem i32 %v0_12c0c, 4
  store i32 %v1_12c0c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12c0c = icmp eq i32 %v1_12c0c, 0
  store i1 %v2_12c0c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_12c0c to i2
  br i1 %v2_12c0c, label %dec_label_pc_12b48, label %dec_label_pc_12c14

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12b40, %dec_label_pc_12c0c
  %v0_12c5c74 = phi i32 [ %v1_12b20, %dec_label_pc_12b40 ], [ %v0_12c5c75, %dec_label_pc_12c0c ]
  %v0_12d08 = phi i32 [ %v2_12b30, %dec_label_pc_12b40 ], [ %v2_12c04, %dec_label_pc_12c0c ]
  %v0_12c1c.off0 = phi i2 [ %extract.t, %dec_label_pc_12b40 ], [ %extract.t123, %dec_label_pc_12c0c ]
  %v0_12c14 = phi i32 [ %v0_12b20, %dec_label_pc_12b40 ], [ %v0_12c0c, %dec_label_pc_12c0c ]
  %v1_12c14 = and i32 %v0_12c14, -4
  store i32 %v1_12c14, i32* %r1.global-to-local, align 4
  %v1_12c18 = inttoptr i32 %v1_12c14 to i32*
  %v2_12c18 = load i32, i32* %v1_12c18, align 4
  store i32 %v2_12c18, i32* @lr, align 4
  %v4_12c18 = add i32 %v1_12c14, 4
  store i32 %v4_12c18, i32* %r1.global-to-local, align 4
  %v2_12d00 = add i32 %v0_12d08, -12
  %v4_12d00 = sub i32 11, %v0_12d08
  %v5_12d00 = and i32 %v4_12d00, %v0_12d08
  %v6_12d00 = icmp slt i32 %v5_12d00, 0
  store i1 %v6_12d00, i1* %cpsr_v.global-to-local, align 1
  %v7_12d00 = icmp slt i32 %v2_12d00, 0
  store i1 %v7_12d00, i1* %cpsr_n.global-to-local, align 1
  %v8_12d00 = icmp eq i32 %v0_12d08, 12
  store i1 %v8_12d00, i1* %cpsr_z.global-to-local, align 1
  %v5_12d04 = icmp slt i32 %v0_12d08, 12
  switch i2 %v0_12c1c.off0, label %dec_label_pc_12c28 [
    i2 -1, label %dec_label_pc_12d00
    i2 -2, label %dec_label_pc_12c94
  ]

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12c14
  br i1 %v5_12d04, label %dec_label_pc_12c74, label %dec_label_pc_12c30

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c28
  store i32 %v2_12d00, i32* %r2.global-to-local, align 4
  %v3_12c34 = load i32, i32* @r4, align 4
  store i32 %v3_12c34, i32* %stack_var_-16, align 4
  %v6_12c34 = load i32, i32* @r5, align 4
  store i32 %v6_12c34, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12c38

dec_label_pc_12c38:                               ; preds = %dec_label_pc_12c38.dec_label_pc_12c38_crit_edge, %dec_label_pc_12c30
  %v0_12c5c = phi i32 [ %v12_12c5c, %dec_label_pc_12c38.dec_label_pc_12c38_crit_edge ], [ %v0_12c5c74, %dec_label_pc_12c30 ]
  %v0_12c3c = phi i32 [ %v0_12c3c.pre, %dec_label_pc_12c38.dec_label_pc_12c38_crit_edge ], [ %v4_12c18, %dec_label_pc_12c30 ]
  %v0_12c38 = phi i32 [ %v0_12c38.pre, %dec_label_pc_12c38.dec_label_pc_12c38_crit_edge ], [ %v2_12c18, %dec_label_pc_12c30 ]
  %v3_12c38 = udiv i32 %v0_12c38, 256
  store i32 %v3_12c38, i32* %r3.global-to-local, align 4
  %v1_12c3c = inttoptr i32 %v0_12c3c to i32*
  %v2_12c3c = load i32, i32* %v1_12c3c, align 4
  store i32 %v2_12c3c, i32* %r4.global-to-local, align 4
  %v3_12c3c = add i32 %v0_12c3c, 4
  %v4_12c3c = inttoptr i32 %v3_12c3c to i32*
  %v5_12c3c = load i32, i32* %v4_12c3c, align 4
  store i32 %v5_12c3c, i32* %r5.global-to-local, align 4
  %v6_12c3c = add i32 %v0_12c3c, 8
  %v7_12c3c = inttoptr i32 %v6_12c3c to i32*
  %v8_12c3c = load i32, i32* %v7_12c3c, align 4
  store i32 %v8_12c3c, i32* %ip.global-to-local, align 4
  %v9_12c3c = add i32 %v0_12c3c, 12
  %v10_12c3c = inttoptr i32 %v9_12c3c to i32*
  %v11_12c3c = load i32, i32* %v10_12c3c, align 4
  store i32 %v11_12c3c, i32* @lr, align 4
  %v12_12c3c = add i32 %v0_12c3c, 16
  store i32 %v12_12c3c, i32* %r1.global-to-local, align 4
  %v4_12c40 = mul i32 %v2_12c3c, 16777216
  %v5_12c40 = or i32 %v4_12c40, %v3_12c38
  store i32 %v5_12c40, i32* %r3.global-to-local, align 4
  %v3_12c44 = udiv i32 %v2_12c3c, 256
  %v4_12c48 = mul i32 %v5_12c3c, 16777216
  %v5_12c48 = or i32 %v4_12c48, %v3_12c44
  store i32 %v5_12c48, i32* %r4.global-to-local, align 4
  %v3_12c4c = udiv i32 %v5_12c3c, 256
  %v4_12c50 = mul i32 %v8_12c3c, 16777216
  %v5_12c50 = or i32 %v4_12c50, %v3_12c4c
  store i32 %v5_12c50, i32* %r5.global-to-local, align 4
  %v3_12c54 = udiv i32 %v8_12c3c, 256
  %v4_12c58 = mul i32 %v11_12c3c, 16777216
  %v5_12c58 = or i32 %v4_12c58, %v3_12c54
  store i32 %v5_12c58, i32* @ip, align 4
  %v1_12c5c = inttoptr i32 %v0_12c5c to i32*
  store i32 %v5_12c40, i32* %v1_12c5c, align 4
  %v3_12c5c = add i32 %v0_12c5c, 4
  %v4_12c5c = inttoptr i32 %v3_12c5c to i32*
  %v5_12c5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12c5c, i32* %v4_12c5c, align 4
  %v6_12c5c = add i32 %v0_12c5c, 8
  %v7_12c5c = inttoptr i32 %v6_12c5c to i32*
  %v8_12c5c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12c5c, i32* %v7_12c5c, align 4
  %v9_12c5c = add i32 %v0_12c5c, 12
  %v10_12c5c = inttoptr i32 %v9_12c5c to i32*
  %v11_12c5c = load i32, i32* @ip, align 4
  store i32 %v11_12c5c, i32* %v10_12c5c, align 4
  %v12_12c5c = add i32 %v0_12c5c, 16
  store i32 %v12_12c5c, i32* @r0, align 4
  %v0_12c60 = load i32, i32* %r2.global-to-local, align 4
  %v2_12c60 = add i32 %v0_12c60, -16
  store i32 %v2_12c60, i32* %r2.global-to-local, align 4
  %v6_12c64 = icmp slt i32 %v0_12c60, 16
  br i1 %v6_12c64, label %dec_label_pc_12c68, label %dec_label_pc_12c38.dec_label_pc_12c38_crit_edge

dec_label_pc_12c38.dec_label_pc_12c38_crit_edge:  ; preds = %dec_label_pc_12c38
  %v0_12c38.pre = load i32, i32* @lr, align 4
  %v0_12c3c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12c38

dec_label_pc_12c68:                               ; preds = %dec_label_pc_12c38
  %v2_12c68 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12c68, i32* @r4, align 4
  %v5_12c68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12c68, i32* @r5, align 4
  %v2_12c6c = add i32 %v0_12c60, -4
  store i32 %v2_12c6c, i32* %r2.global-to-local, align 4
  %v4_12c6c = add i32 %v0_12c60, 2147483632
  %v5_12c6c = and i32 %v2_12c6c, %v4_12c6c
  %v6_12c6c = icmp slt i32 %v5_12c6c, 0
  store i1 %v6_12c6c, i1* %cpsr_v.global-to-local, align 1
  %v7_12c6c = icmp slt i32 %v2_12c6c, 0
  store i1 %v7_12c6c, i1* %cpsr_n.global-to-local, align 1
  %v8_12c6c = icmp eq i32 %v2_12c6c, 0
  store i1 %v8_12c6c, i1* %cpsr_z.global-to-local, align 1
  %v5_12c70 = icmp slt i32 %v2_12c60, -12
  br i1 %v5_12c70, label %dec_label_pc_12c8c, label %dec_label_pc_12c74

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12c68, %dec_label_pc_12c28, %dec_label_pc_12c74
  %v1_12c80 = phi i32 [ %v4_12c80, %dec_label_pc_12c74 ], [ %v12_12c5c, %dec_label_pc_12c68 ], [ %v0_12c5c74, %dec_label_pc_12c28 ]
  %v0_12c74 = load i32, i32* @lr, align 4
  %v3_12c74 = udiv i32 %v0_12c74, 256
  store i32 %v3_12c74, i32* %ip.global-to-local, align 4
  %v0_12c78 = load i32, i32* %r1.global-to-local, align 4
  %v1_12c78 = inttoptr i32 %v0_12c78 to i32*
  %v2_12c78 = load i32, i32* %v1_12c78, align 4
  store i32 %v2_12c78, i32* @lr, align 4
  %v4_12c78 = add i32 %v0_12c78, 4
  store i32 %v4_12c78, i32* %r1.global-to-local, align 4
  %v4_12c7c = mul i32 %v2_12c78, 16777216
  %v5_12c7c = or i32 %v4_12c7c, %v3_12c74
  store i32 %v5_12c7c, i32* @ip, align 4
  %v2_12c80 = inttoptr i32 %v1_12c80 to i32*
  store i32 %v5_12c7c, i32* %v2_12c80, align 4
  %v3_12c80 = load i32, i32* @r0, align 4
  %v4_12c80 = add i32 %v3_12c80, 4
  store i32 %v4_12c80, i32* @r0, align 4
  %v0_12c84 = load i32, i32* %r2.global-to-local, align 4
  %v2_12c84 = add i32 %v0_12c84, -4
  store i32 %v2_12c84, i32* %r2.global-to-local, align 4
  %v6_12c88 = icmp slt i32 %v0_12c84, 4
  br i1 %v6_12c88, label %dec_label_pc_12c8c.loopexit, label %dec_label_pc_12c74

dec_label_pc_12c8c.loopexit:                      ; preds = %dec_label_pc_12c74
  %v4_12c84 = sub i32 3, %v0_12c84
  %v5_12c84 = and i32 %v4_12c84, %v0_12c84
  %v6_12c84 = icmp slt i32 %v5_12c84, 0
  %v7_12c84 = icmp slt i32 %v2_12c84, 0
  store i1 %v6_12c84, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12c84, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12c8c

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c8c.loopexit, %dec_label_pc_12c68
  %v2_12bcc111 = phi i32 [ %v4_12c80, %dec_label_pc_12c8c.loopexit ], [ %v12_12c5c, %dec_label_pc_12c68 ]
  %v0_12bbc107 = phi i32 [ %v2_12c84, %dec_label_pc_12c8c.loopexit ], [ %v2_12c6c, %dec_label_pc_12c68 ]
  %v0_12c8c = load i32, i32* %r1.global-to-local, align 4
  %v1_12c8c = add i32 %v0_12c8c, -3
  store i32 %v1_12c8c, i32* @r1, align 4
  br label %bb131

dec_label_pc_12c94:                               ; preds = %dec_label_pc_12c14
  br i1 %v5_12d04, label %dec_label_pc_12ce0, label %dec_label_pc_12c9c

dec_label_pc_12c9c:                               ; preds = %dec_label_pc_12c94
  store i32 %v2_12d00, i32* %r2.global-to-local, align 4
  %v3_12ca0 = load i32, i32* @r4, align 4
  store i32 %v3_12ca0, i32* %stack_var_-16, align 4
  %v6_12ca0 = load i32, i32* @r5, align 4
  store i32 %v6_12ca0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12ca4.dec_label_pc_12ca4_crit_edge, %dec_label_pc_12c9c
  %v0_12cc8 = phi i32 [ %v12_12cc8, %dec_label_pc_12ca4.dec_label_pc_12ca4_crit_edge ], [ %v0_12c5c74, %dec_label_pc_12c9c ]
  %v0_12ca8 = phi i32 [ %v0_12ca8.pre, %dec_label_pc_12ca4.dec_label_pc_12ca4_crit_edge ], [ %v4_12c18, %dec_label_pc_12c9c ]
  %v0_12ca4 = phi i32 [ %v0_12ca4.pre, %dec_label_pc_12ca4.dec_label_pc_12ca4_crit_edge ], [ %v2_12c18, %dec_label_pc_12c9c ]
  %v3_12ca4 = udiv i32 %v0_12ca4, 65536
  store i32 %v3_12ca4, i32* %r3.global-to-local, align 4
  %v1_12ca8 = inttoptr i32 %v0_12ca8 to i32*
  %v2_12ca8 = load i32, i32* %v1_12ca8, align 4
  store i32 %v2_12ca8, i32* %r4.global-to-local, align 4
  %v3_12ca8 = add i32 %v0_12ca8, 4
  %v4_12ca8 = inttoptr i32 %v3_12ca8 to i32*
  %v5_12ca8 = load i32, i32* %v4_12ca8, align 4
  store i32 %v5_12ca8, i32* %r5.global-to-local, align 4
  %v6_12ca8 = add i32 %v0_12ca8, 8
  %v7_12ca8 = inttoptr i32 %v6_12ca8 to i32*
  %v8_12ca8 = load i32, i32* %v7_12ca8, align 4
  store i32 %v8_12ca8, i32* %ip.global-to-local, align 4
  %v9_12ca8 = add i32 %v0_12ca8, 12
  %v10_12ca8 = inttoptr i32 %v9_12ca8 to i32*
  %v11_12ca8 = load i32, i32* %v10_12ca8, align 4
  store i32 %v11_12ca8, i32* @lr, align 4
  %v12_12ca8 = add i32 %v0_12ca8, 16
  store i32 %v12_12ca8, i32* %r1.global-to-local, align 4
  %v4_12cac = mul i32 %v2_12ca8, 65536
  %v5_12cac = or i32 %v4_12cac, %v3_12ca4
  store i32 %v5_12cac, i32* %r3.global-to-local, align 4
  %v3_12cb0 = udiv i32 %v2_12ca8, 65536
  %v4_12cb4 = mul i32 %v5_12ca8, 65536
  %v5_12cb4 = or i32 %v4_12cb4, %v3_12cb0
  store i32 %v5_12cb4, i32* %r4.global-to-local, align 4
  %v3_12cb8 = udiv i32 %v5_12ca8, 65536
  %v4_12cbc = mul i32 %v8_12ca8, 65536
  %v5_12cbc = or i32 %v4_12cbc, %v3_12cb8
  store i32 %v5_12cbc, i32* %r5.global-to-local, align 4
  %v3_12cc0 = udiv i32 %v8_12ca8, 65536
  %v4_12cc4 = mul i32 %v11_12ca8, 65536
  %v5_12cc4 = or i32 %v4_12cc4, %v3_12cc0
  store i32 %v5_12cc4, i32* @ip, align 4
  %v1_12cc8 = inttoptr i32 %v0_12cc8 to i32*
  store i32 %v5_12cac, i32* %v1_12cc8, align 4
  %v3_12cc8 = add i32 %v0_12cc8, 4
  %v4_12cc8 = inttoptr i32 %v3_12cc8 to i32*
  %v5_12cc8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12cc8, i32* %v4_12cc8, align 4
  %v6_12cc8 = add i32 %v0_12cc8, 8
  %v7_12cc8 = inttoptr i32 %v6_12cc8 to i32*
  %v8_12cc8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12cc8, i32* %v7_12cc8, align 4
  %v9_12cc8 = add i32 %v0_12cc8, 12
  %v10_12cc8 = inttoptr i32 %v9_12cc8 to i32*
  %v11_12cc8 = load i32, i32* @ip, align 4
  store i32 %v11_12cc8, i32* %v10_12cc8, align 4
  %v12_12cc8 = add i32 %v0_12cc8, 16
  store i32 %v12_12cc8, i32* @r0, align 4
  %v0_12ccc = load i32, i32* %r2.global-to-local, align 4
  %v2_12ccc = add i32 %v0_12ccc, -16
  store i32 %v2_12ccc, i32* %r2.global-to-local, align 4
  %v6_12cd0 = icmp slt i32 %v0_12ccc, 16
  br i1 %v6_12cd0, label %dec_label_pc_12cd4, label %dec_label_pc_12ca4.dec_label_pc_12ca4_crit_edge

dec_label_pc_12ca4.dec_label_pc_12ca4_crit_edge:  ; preds = %dec_label_pc_12ca4
  %v0_12ca4.pre = load i32, i32* @lr, align 4
  %v0_12ca8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ca4

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12ca4
  %v2_12cd4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12cd4, i32* @r4, align 4
  %v5_12cd4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12cd4, i32* @r5, align 4
  %v2_12cd8 = add i32 %v0_12ccc, -4
  store i32 %v2_12cd8, i32* %r2.global-to-local, align 4
  %v4_12cd8 = add i32 %v0_12ccc, 2147483632
  %v5_12cd8 = and i32 %v2_12cd8, %v4_12cd8
  %v6_12cd8 = icmp slt i32 %v5_12cd8, 0
  store i1 %v6_12cd8, i1* %cpsr_v.global-to-local, align 1
  %v7_12cd8 = icmp slt i32 %v2_12cd8, 0
  store i1 %v7_12cd8, i1* %cpsr_n.global-to-local, align 1
  %v8_12cd8 = icmp eq i32 %v2_12cd8, 0
  store i1 %v8_12cd8, i1* %cpsr_z.global-to-local, align 1
  %v5_12cdc = icmp slt i32 %v2_12ccc, -12
  br i1 %v5_12cdc, label %dec_label_pc_12cf8, label %dec_label_pc_12ce0

dec_label_pc_12ce0:                               ; preds = %dec_label_pc_12cd4, %dec_label_pc_12c94, %dec_label_pc_12ce0
  %v1_12cec = phi i32 [ %v4_12cec, %dec_label_pc_12ce0 ], [ %v12_12cc8, %dec_label_pc_12cd4 ], [ %v0_12c5c74, %dec_label_pc_12c94 ]
  %v0_12ce0 = load i32, i32* @lr, align 4
  %v3_12ce0 = udiv i32 %v0_12ce0, 65536
  store i32 %v3_12ce0, i32* %ip.global-to-local, align 4
  %v0_12ce4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ce4 = inttoptr i32 %v0_12ce4 to i32*
  %v2_12ce4 = load i32, i32* %v1_12ce4, align 4
  store i32 %v2_12ce4, i32* @lr, align 4
  %v4_12ce4 = add i32 %v0_12ce4, 4
  store i32 %v4_12ce4, i32* %r1.global-to-local, align 4
  %v4_12ce8 = mul i32 %v2_12ce4, 65536
  %v5_12ce8 = or i32 %v4_12ce8, %v3_12ce0
  store i32 %v5_12ce8, i32* @ip, align 4
  %v2_12cec = inttoptr i32 %v1_12cec to i32*
  store i32 %v5_12ce8, i32* %v2_12cec, align 4
  %v3_12cec = load i32, i32* @r0, align 4
  %v4_12cec = add i32 %v3_12cec, 4
  store i32 %v4_12cec, i32* @r0, align 4
  %v0_12cf0 = load i32, i32* %r2.global-to-local, align 4
  %v2_12cf0 = add i32 %v0_12cf0, -4
  store i32 %v2_12cf0, i32* %r2.global-to-local, align 4
  %v6_12cf4 = icmp slt i32 %v0_12cf0, 4
  br i1 %v6_12cf4, label %dec_label_pc_12cf8.loopexit, label %dec_label_pc_12ce0

dec_label_pc_12cf8.loopexit:                      ; preds = %dec_label_pc_12ce0
  %v4_12cf0 = sub i32 3, %v0_12cf0
  %v5_12cf0 = and i32 %v4_12cf0, %v0_12cf0
  %v6_12cf0 = icmp slt i32 %v5_12cf0, 0
  %v7_12cf0 = icmp slt i32 %v2_12cf0, 0
  store i1 %v6_12cf0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12cf0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12cf8

dec_label_pc_12cf8:                               ; preds = %dec_label_pc_12cf8.loopexit, %dec_label_pc_12cd4
  %v2_12bcc112 = phi i32 [ %v4_12cec, %dec_label_pc_12cf8.loopexit ], [ %v12_12cc8, %dec_label_pc_12cd4 ]
  %v0_12bbc108 = phi i32 [ %v2_12cf0, %dec_label_pc_12cf8.loopexit ], [ %v2_12cd8, %dec_label_pc_12cd4 ]
  %v0_12cf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12cf8 = add i32 %v0_12cf8, -2
  store i32 %v1_12cf8, i32* @r1, align 4
  br label %bb131

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12c14
  br i1 %v5_12d04, label %dec_label_pc_12d4c, label %dec_label_pc_12d08

dec_label_pc_12d08:                               ; preds = %dec_label_pc_12d00
  store i32 %v2_12d00, i32* %r2.global-to-local, align 4
  %v3_12d0c = load i32, i32* @r4, align 4
  store i32 %v3_12d0c, i32* %stack_var_-16, align 4
  %v6_12d0c = load i32, i32* @r5, align 4
  store i32 %v6_12d0c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12d10.dec_label_pc_12d10_crit_edge, %dec_label_pc_12d08
  %v0_12d34 = phi i32 [ %v12_12d34, %dec_label_pc_12d10.dec_label_pc_12d10_crit_edge ], [ %v0_12c5c74, %dec_label_pc_12d08 ]
  %v0_12d14 = phi i32 [ %v0_12d14.pre, %dec_label_pc_12d10.dec_label_pc_12d10_crit_edge ], [ %v4_12c18, %dec_label_pc_12d08 ]
  %v0_12d10 = phi i32 [ %v0_12d10.pre, %dec_label_pc_12d10.dec_label_pc_12d10_crit_edge ], [ %v2_12c18, %dec_label_pc_12d08 ]
  %v3_12d10 = udiv i32 %v0_12d10, 16777216
  store i32 %v3_12d10, i32* %r3.global-to-local, align 4
  %v1_12d14 = inttoptr i32 %v0_12d14 to i32*
  %v2_12d14 = load i32, i32* %v1_12d14, align 4
  store i32 %v2_12d14, i32* %r4.global-to-local, align 4
  %v3_12d14 = add i32 %v0_12d14, 4
  %v4_12d14 = inttoptr i32 %v3_12d14 to i32*
  %v5_12d14 = load i32, i32* %v4_12d14, align 4
  store i32 %v5_12d14, i32* %r5.global-to-local, align 4
  %v6_12d14 = add i32 %v0_12d14, 8
  %v7_12d14 = inttoptr i32 %v6_12d14 to i32*
  %v8_12d14 = load i32, i32* %v7_12d14, align 4
  store i32 %v8_12d14, i32* %ip.global-to-local, align 4
  %v9_12d14 = add i32 %v0_12d14, 12
  %v10_12d14 = inttoptr i32 %v9_12d14 to i32*
  %v11_12d14 = load i32, i32* %v10_12d14, align 4
  store i32 %v11_12d14, i32* @lr, align 4
  %v12_12d14 = add i32 %v0_12d14, 16
  store i32 %v12_12d14, i32* %r1.global-to-local, align 4
  %v4_12d18 = mul i32 %v2_12d14, 256
  %v5_12d18 = or i32 %v4_12d18, %v3_12d10
  store i32 %v5_12d18, i32* %r3.global-to-local, align 4
  %v3_12d1c = udiv i32 %v2_12d14, 16777216
  %v4_12d20 = mul i32 %v5_12d14, 256
  %v5_12d20 = or i32 %v4_12d20, %v3_12d1c
  store i32 %v5_12d20, i32* %r4.global-to-local, align 4
  %v3_12d24 = udiv i32 %v5_12d14, 16777216
  %v4_12d28 = mul i32 %v8_12d14, 256
  %v5_12d28 = or i32 %v4_12d28, %v3_12d24
  store i32 %v5_12d28, i32* %r5.global-to-local, align 4
  %v3_12d2c = udiv i32 %v8_12d14, 16777216
  %v4_12d30 = mul i32 %v11_12d14, 256
  %v5_12d30 = or i32 %v4_12d30, %v3_12d2c
  store i32 %v5_12d30, i32* @ip, align 4
  %v1_12d34 = inttoptr i32 %v0_12d34 to i32*
  store i32 %v5_12d18, i32* %v1_12d34, align 4
  %v3_12d34 = add i32 %v0_12d34, 4
  %v4_12d34 = inttoptr i32 %v3_12d34 to i32*
  %v5_12d34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_12d34, i32* %v4_12d34, align 4
  %v6_12d34 = add i32 %v0_12d34, 8
  %v7_12d34 = inttoptr i32 %v6_12d34 to i32*
  %v8_12d34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_12d34, i32* %v7_12d34, align 4
  %v9_12d34 = add i32 %v0_12d34, 12
  %v10_12d34 = inttoptr i32 %v9_12d34 to i32*
  %v11_12d34 = load i32, i32* @ip, align 4
  store i32 %v11_12d34, i32* %v10_12d34, align 4
  %v12_12d34 = add i32 %v0_12d34, 16
  store i32 %v12_12d34, i32* @r0, align 4
  %v0_12d38 = load i32, i32* %r2.global-to-local, align 4
  %v2_12d38 = add i32 %v0_12d38, -16
  store i32 %v2_12d38, i32* %r2.global-to-local, align 4
  %v6_12d3c = icmp slt i32 %v0_12d38, 16
  br i1 %v6_12d3c, label %dec_label_pc_12d40, label %dec_label_pc_12d10.dec_label_pc_12d10_crit_edge

dec_label_pc_12d10.dec_label_pc_12d10_crit_edge:  ; preds = %dec_label_pc_12d10
  %v0_12d10.pre = load i32, i32* @lr, align 4
  %v0_12d14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d10
  %v2_12d40 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12d40, i32* @r4, align 4
  %v5_12d40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_12d40, i32* @r5, align 4
  %v2_12d44 = add i32 %v0_12d38, -4
  store i32 %v2_12d44, i32* %r2.global-to-local, align 4
  %v4_12d44 = add i32 %v0_12d38, 2147483632
  %v5_12d44 = and i32 %v2_12d44, %v4_12d44
  %v6_12d44 = icmp slt i32 %v5_12d44, 0
  store i1 %v6_12d44, i1* %cpsr_v.global-to-local, align 1
  %v7_12d44 = icmp slt i32 %v2_12d44, 0
  store i1 %v7_12d44, i1* %cpsr_n.global-to-local, align 1
  %v8_12d44 = icmp eq i32 %v2_12d44, 0
  store i1 %v8_12d44, i1* %cpsr_z.global-to-local, align 1
  %v5_12d48 = icmp slt i32 %v2_12d38, -12
  br i1 %v5_12d48, label %dec_label_pc_12d64, label %dec_label_pc_12d4c

dec_label_pc_12d4c:                               ; preds = %dec_label_pc_12d40, %dec_label_pc_12d00, %dec_label_pc_12d4c
  %v1_12d58 = phi i32 [ %v4_12d58, %dec_label_pc_12d4c ], [ %v12_12d34, %dec_label_pc_12d40 ], [ %v0_12c5c74, %dec_label_pc_12d00 ]
  %v0_12d4c = load i32, i32* @lr, align 4
  %v3_12d4c = udiv i32 %v0_12d4c, 16777216
  store i32 %v3_12d4c, i32* %ip.global-to-local, align 4
  %v0_12d50 = load i32, i32* %r1.global-to-local, align 4
  %v1_12d50 = inttoptr i32 %v0_12d50 to i32*
  %v2_12d50 = load i32, i32* %v1_12d50, align 4
  store i32 %v2_12d50, i32* @lr, align 4
  %v4_12d50 = add i32 %v0_12d50, 4
  store i32 %v4_12d50, i32* %r1.global-to-local, align 4
  %v4_12d54 = mul i32 %v2_12d50, 256
  %v5_12d54 = or i32 %v4_12d54, %v3_12d4c
  store i32 %v5_12d54, i32* @ip, align 4
  %v2_12d58 = inttoptr i32 %v1_12d58 to i32*
  store i32 %v5_12d54, i32* %v2_12d58, align 4
  %v3_12d58 = load i32, i32* @r0, align 4
  %v4_12d58 = add i32 %v3_12d58, 4
  store i32 %v4_12d58, i32* @r0, align 4
  %v0_12d5c = load i32, i32* %r2.global-to-local, align 4
  %v2_12d5c = add i32 %v0_12d5c, -4
  store i32 %v2_12d5c, i32* %r2.global-to-local, align 4
  %v6_12d60 = icmp slt i32 %v0_12d5c, 4
  br i1 %v6_12d60, label %dec_label_pc_12d64.loopexit, label %dec_label_pc_12d4c

dec_label_pc_12d64.loopexit:                      ; preds = %dec_label_pc_12d4c
  %v4_12d5c = sub i32 3, %v0_12d5c
  %v5_12d5c = and i32 %v4_12d5c, %v0_12d5c
  %v6_12d5c = icmp slt i32 %v5_12d5c, 0
  %v7_12d5c = icmp slt i32 %v2_12d5c, 0
  store i1 %v6_12d5c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12d5c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12d64

dec_label_pc_12d64:                               ; preds = %dec_label_pc_12d64.loopexit, %dec_label_pc_12d40
  %v2_12bcc113 = phi i32 [ %v4_12d58, %dec_label_pc_12d64.loopexit ], [ %v12_12d34, %dec_label_pc_12d40 ]
  %v0_12bbc109 = phi i32 [ %v2_12d5c, %dec_label_pc_12d64.loopexit ], [ %v2_12d44, %dec_label_pc_12d40 ]
  %v0_12d64 = load i32, i32* %r1.global-to-local, align 4
  %v1_12d64 = add i32 %v0_12d64, -1
  store i32 %v1_12d64, i32* @r1, align 4
  br label %bb131

dec_label_pc_12d6c:                               ; preds = %dec_label_pc_12b20
  %v1_12d6c = load i32, i32* @r2, align 4
  %v2_12d6c = add i32 %v1_12d6c, %v0_12b20
  store i32 %v2_12d6c, i32* %r1.global-to-local, align 4
  %v2_12d70 = add i32 %v1_12d6c, %v1_12b20
  store i32 %v2_12d70, i32* %r0.global-to-local, align 4
  %v2_12d74 = add i32 %v1_12d6c, -4
  store i32 %v2_12d74, i32* %r2.global-to-local, align 4
  %v4_12d74 = sub i32 3, %v1_12d6c
  %v5_12d74 = and i32 %v4_12d74, %v1_12d6c
  %v6_12d74 = icmp slt i32 %v5_12d74, 0
  store i1 %v6_12d74, i1* %cpsr_v.global-to-local, align 1
  %v7_12d74 = icmp slt i32 %v2_12d74, 0
  store i1 %v7_12d74, i1* %cpsr_n.global-to-local, align 1
  %v8_12d74 = icmp eq i32 %v1_12d6c, 4
  store i1 %v8_12d74, i1* %cpsr_z.global-to-local, align 1
  %v5_12d78 = icmp slt i32 %v1_12d6c, 4
  br i1 %v5_12d78, label %bb141, label %dec_label_pc_12d7c

dec_label_pc_12d7c:                               ; preds = %dec_label_pc_12d6c
  %v1_12d7c = urem i32 %v2_12d70, 4
  store i32 %v1_12d7c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12d7c = icmp eq i32 %v1_12d7c, 0
  store i1 %v2_12d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12d7c, label %dec_label_pc_12d84, label %dec_label_pc_12e24

dec_label_pc_12d84:                               ; preds = %dec_label_pc_12d7c
  %v1_12d84 = urem i32 %v2_12d6c, 4
  store i32 %v1_12d84, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12d84 = icmp eq i32 %v1_12d84, 0
  store i1 %v2_12d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12d84, label %dec_label_pc_12d8c, label %dec_label_pc_12e50

dec_label_pc_12d8c:                               ; preds = %dec_label_pc_12d84, %dec_label_pc_12e48
  %v0_12da448 = phi i32 [ %v2_12d70, %dec_label_pc_12d84 ], [ %v0_12e9831, %dec_label_pc_12e48 ]
  %v0_12da047 = phi i32 [ %v2_12d6c, %dec_label_pc_12d84 ], [ %v0_12e48, %dec_label_pc_12e48 ]
  %v0_12d8c = phi i32 [ %v2_12d74, %dec_label_pc_12d84 ], [ %v2_12e40, %dec_label_pc_12e48 ]
  %v2_12d8c = add i32 %v0_12d8c, -8
  store i32 %v2_12d8c, i32* %r2.global-to-local, align 4
  %v4_12d8c = sub i32 7, %v0_12d8c
  %v5_12d8c = and i32 %v4_12d8c, %v0_12d8c
  %v6_12d8c = icmp slt i32 %v5_12d8c, 0
  store i1 %v6_12d8c, i1* %cpsr_v.global-to-local, align 1
  %v7_12d8c = icmp slt i32 %v2_12d8c, 0
  store i1 %v7_12d8c, i1* %cpsr_n.global-to-local, align 1
  %v8_12d8c = icmp eq i32 %v0_12d8c, 8
  store i1 %v8_12d8c, i1* %cpsr_z.global-to-local, align 1
  %v5_12d90 = icmp slt i32 %v0_12d8c, 8
  br i1 %v5_12d90, label %dec_label_pc_12ddc, label %dec_label_pc_12d94

dec_label_pc_12d94:                               ; preds = %dec_label_pc_12d8c
  %v3_12d94 = load i32, i32* @r4, align 4
  store i32 %v3_12d94, i32* %stack_var_-8, align 4
  %v6_12d94 = load i32, i32* @lr, align 4
  %v2_12d98 = add i32 %v0_12d8c, -28
  store i32 %v2_12d98, i32* %r2.global-to-local, align 4
  %v4_12d98 = sub i32 27, %v0_12d8c
  %v5_12d98 = and i32 %v4_12d98, %v2_12d8c
  %v6_12d98 = icmp slt i32 %v5_12d98, 0
  store i1 %v6_12d98, i1* %cpsr_v.global-to-local, align 1
  %v7_12d98 = icmp slt i32 %v2_12d98, 0
  store i1 %v7_12d98, i1* %cpsr_n.global-to-local, align 1
  %v8_12d98 = icmp eq i32 %v2_12d8c, 20
  store i1 %v8_12d98, i1* %cpsr_z.global-to-local, align 1
  %v5_12d9c = icmp slt i32 %v2_12d8c, 20
  br i1 %v5_12d9c, label %dec_label_pc_12db8, label %dec_label_pc_12da0

dec_label_pc_12da0:                               ; preds = %dec_label_pc_12d94, %dec_label_pc_12da0.dec_label_pc_12da0_crit_edge
  %v0_12da4 = phi i32 [ %v1_12dac, %dec_label_pc_12da0.dec_label_pc_12da0_crit_edge ], [ %v0_12da448, %dec_label_pc_12d94 ]
  %v0_12da0 = phi i32 [ %v0_12da0.pre, %dec_label_pc_12da0.dec_label_pc_12da0_crit_edge ], [ %v0_12da047, %dec_label_pc_12d94 ]
  %v1_12da0 = add i32 %v0_12da0, -4
  %v2_12da0 = inttoptr i32 %v1_12da0 to i32*
  %v3_12da0 = load i32, i32* %v2_12da0, align 4
  store i32 %v3_12da0, i32* %r3.global-to-local, align 4
  %v4_12da0 = add i32 %v0_12da0, -8
  %v5_12da0 = inttoptr i32 %v4_12da0 to i32*
  %v6_12da0 = load i32, i32* %v5_12da0, align 4
  store i32 %v6_12da0, i32* %r4.global-to-local, align 4
  %v7_12da0 = add i32 %v0_12da0, -12
  %v8_12da0 = inttoptr i32 %v7_12da0 to i32*
  %v9_12da0 = load i32, i32* %v8_12da0, align 4
  store i32 %v9_12da0, i32* %ip.global-to-local, align 4
  %v10_12da0 = add i32 %v0_12da0, -16
  %v11_12da0 = inttoptr i32 %v10_12da0 to i32*
  %v12_12da0 = load i32, i32* %v11_12da0, align 4
  store i32 %v12_12da0, i32* %lr.global-to-local, align 4
  store i32 %v10_12da0, i32* %r1.global-to-local, align 4
  %v1_12da4 = add i32 %v0_12da4, -16
  %v2_12da4 = inttoptr i32 %v1_12da4 to i32*
  store i32 %v3_12da0, i32* %v2_12da4, align 4
  %v4_12da4 = add i32 %v0_12da4, -12
  %v5_12da4 = inttoptr i32 %v4_12da4 to i32*
  %v6_12da4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_12da4, i32* %v5_12da4, align 4
  %v7_12da4 = add i32 %v0_12da4, -8
  %v8_12da4 = inttoptr i32 %v7_12da4 to i32*
  %v9_12da4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12da4, i32* %v8_12da4, align 4
  %v10_12da4 = add i32 %v0_12da4, -4
  %v11_12da4 = inttoptr i32 %v10_12da4 to i32*
  %v12_12da4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12da4, i32* %v11_12da4, align 4
  store i32 %v1_12da4, i32* %r0.global-to-local, align 4
  %v0_12da8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12da8 = add i32 %v0_12da8, -4
  %v2_12da8 = inttoptr i32 %v1_12da8 to i32*
  %v3_12da8 = load i32, i32* %v2_12da8, align 4
  store i32 %v3_12da8, i32* %r3.global-to-local, align 4
  %v4_12da8 = add i32 %v0_12da8, -8
  %v5_12da8 = inttoptr i32 %v4_12da8 to i32*
  %v6_12da8 = load i32, i32* %v5_12da8, align 4
  store i32 %v6_12da8, i32* %r4.global-to-local, align 4
  %v7_12da8 = add i32 %v0_12da8, -12
  %v8_12da8 = inttoptr i32 %v7_12da8 to i32*
  %v9_12da8 = load i32, i32* %v8_12da8, align 4
  store i32 %v9_12da8, i32* @ip, align 4
  %v10_12da8 = add i32 %v0_12da8, -16
  %v11_12da8 = inttoptr i32 %v10_12da8 to i32*
  %v12_12da8 = load i32, i32* %v11_12da8, align 4
  store i32 %v12_12da8, i32* %lr.global-to-local, align 4
  store i32 %v10_12da8, i32* %r1.global-to-local, align 4
  %v1_12dac = add i32 %v0_12da4, -32
  %v2_12dac = inttoptr i32 %v1_12dac to i32*
  store i32 %v3_12da8, i32* %v2_12dac, align 4
  %v4_12dac = add i32 %v0_12da4, -28
  %v5_12dac = inttoptr i32 %v4_12dac to i32*
  %v6_12dac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_12dac, i32* %v5_12dac, align 4
  %v7_12dac = add i32 %v0_12da4, -24
  %v8_12dac = inttoptr i32 %v7_12dac to i32*
  %v9_12dac = load i32, i32* @ip, align 4
  store i32 %v9_12dac, i32* %v8_12dac, align 4
  %v10_12dac = add i32 %v0_12da4, -20
  %v11_12dac = inttoptr i32 %v10_12dac to i32*
  %v12_12dac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12dac, i32* %v11_12dac, align 4
  store i32 %v1_12dac, i32* %r0.global-to-local, align 4
  %v0_12db0 = load i32, i32* %r2.global-to-local, align 4
  %v2_12db0 = add i32 %v0_12db0, -32
  store i32 %v2_12db0, i32* %r2.global-to-local, align 4
  %v6_12db4 = icmp slt i32 %v0_12db0, 32
  br i1 %v6_12db4, label %dec_label_pc_12db8.loopexit, label %dec_label_pc_12da0.dec_label_pc_12da0_crit_edge

dec_label_pc_12da0.dec_label_pc_12da0_crit_edge:  ; preds = %dec_label_pc_12da0
  %v0_12da0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12da0

dec_label_pc_12db8.loopexit:                      ; preds = %dec_label_pc_12da0
  %v4_12db0 = sub i32 31, %v0_12db0
  %v5_12db0 = and i32 %v4_12db0, %v0_12db0
  %v6_12db0 = icmp slt i32 %v5_12db0, 0
  %v7_12db0 = icmp slt i32 %v2_12db0, 0
  store i1 %v6_12db0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12db0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12db8

dec_label_pc_12db8:                               ; preds = %dec_label_pc_12db8.loopexit, %dec_label_pc_12d94
  %v6_12dc0 = phi i32 [ %v1_12dac, %dec_label_pc_12db8.loopexit ], [ %v0_12da448, %dec_label_pc_12d94 ]
  %v0_12dc8.pr = phi i32 [ %v2_12db0, %dec_label_pc_12db8.loopexit ], [ %v2_12d98, %dec_label_pc_12d94 ]
  %v4_12db8 = add i32 %v0_12dc8.pr, 16
  %v6_12db8 = sub i32 0, %v0_12dc8.pr
  %v7_12db8 = and i32 %v4_12db8, %v6_12db8
  %v8_12db8 = icmp slt i32 %v7_12db8, 0
  store i1 %v8_12db8, i1* %cpsr_v.global-to-local, align 1
  %v9_12db8 = icmp slt i32 %v4_12db8, 0
  store i1 %v9_12db8, i1* %cpsr_n.global-to-local, align 1
  %v10_12db8 = icmp eq i32 %v4_12db8, 0
  store i1 %v10_12db8, i1* %cpsr_z.global-to-local, align 1
  %v5_12dbc = icmp slt i32 %v0_12dc8.pr, -16
  br i1 %v5_12dbc, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_12db8
  %v6_12dbc = load i32, i32* %r1.global-to-local, align 4
  %v7_12dbc = add i32 %v6_12dbc, -4
  %v8_12dbc = inttoptr i32 %v7_12dbc to i32*
  %v9_12dbc = load i32, i32* %v8_12dbc, align 4
  store i32 %v9_12dbc, i32* %r3.global-to-local, align 4
  %v10_12dbc = add i32 %v6_12dbc, -8
  %v11_12dbc = inttoptr i32 %v10_12dbc to i32*
  %v12_12dbc = load i32, i32* %v11_12dbc, align 4
  store i32 %v12_12dbc, i32* %r4.global-to-local, align 4
  %v13_12dbc = add i32 %v6_12dbc, -12
  %v14_12dbc = inttoptr i32 %v13_12dbc to i32*
  %v15_12dbc = load i32, i32* %v14_12dbc, align 4
  store i32 %v15_12dbc, i32* @ip, align 4
  %v16_12dbc = add i32 %v6_12dbc, -16
  %v17_12dbc = inttoptr i32 %v16_12dbc to i32*
  %v18_12dbc = load i32, i32* %v17_12dbc, align 4
  store i32 %v18_12dbc, i32* %lr.global-to-local, align 4
  store i32 %v16_12dbc, i32* %r1.global-to-local, align 4
  %v7_12dc0 = add i32 %v6_12dc0, -16
  %v8_12dc0 = inttoptr i32 %v7_12dc0 to i32*
  store i32 %v9_12dbc, i32* %v8_12dc0, align 4
  %v10_12dc0 = add i32 %v6_12dc0, -12
  %v11_12dc0 = inttoptr i32 %v10_12dc0 to i32*
  %v12_12dc0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_12dc0, i32* %v11_12dc0, align 4
  %v13_12dc0 = add i32 %v6_12dc0, -8
  %v14_12dc0 = inttoptr i32 %v13_12dc0 to i32*
  %v15_12dc0 = load i32, i32* @ip, align 4
  store i32 %v15_12dc0, i32* %v14_12dc0, align 4
  %v16_12dc0 = add i32 %v6_12dc0, -4
  %v17_12dc0 = inttoptr i32 %v16_12dc0 to i32*
  %v18_12dc0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_12dc0, i32* %v17_12dc0, align 4
  store i32 %v7_12dc0, i32* %r0.global-to-local, align 4
  %v6_12dc4 = load i32, i32* %r2.global-to-local, align 4
  %v7_12dc4 = add i32 %v6_12dc4, -16
  store i32 %v7_12dc4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_12db8, %bb138
  %v6_12dd0 = phi i32 [ %v7_12dc0, %bb138 ], [ %v6_12dc0, %dec_label_pc_12db8 ]
  %v0_12dc8 = phi i32 [ %v7_12dc4, %bb138 ], [ %v0_12dc8.pr, %dec_label_pc_12db8 ]
  %v4_12dc8 = add i32 %v0_12dc8, 20
  store i32 %v4_12dc8, i32* %r2.global-to-local, align 4
  %v6_12dc8 = sub i32 0, %v0_12dc8
  %v7_12dc8 = and i32 %v4_12dc8, %v6_12dc8
  %v8_12dc8 = icmp slt i32 %v7_12dc8, 0
  store i1 %v8_12dc8, i1* %cpsr_v.global-to-local, align 1
  %v9_12dc8 = icmp slt i32 %v4_12dc8, 0
  store i1 %v9_12dc8, i1* %cpsr_n.global-to-local, align 1
  %v10_12dc8 = icmp eq i32 %v4_12dc8, 0
  store i1 %v10_12dc8, i1* %cpsr_z.global-to-local, align 1
  %v5_12dcc = icmp slt i32 %v0_12dc8, -20
  br i1 %v5_12dcc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_12dcc = load i32, i32* %r1.global-to-local, align 4
  %v7_12dcc = add i32 %v6_12dcc, -4
  %v8_12dcc = inttoptr i32 %v7_12dcc to i32*
  %v9_12dcc = load i32, i32* %v8_12dcc, align 4
  store i32 %v9_12dcc, i32* %r3.global-to-local, align 4
  %v10_12dcc = add i32 %v6_12dcc, -8
  %v11_12dcc = inttoptr i32 %v10_12dcc to i32*
  %v12_12dcc = load i32, i32* %v11_12dcc, align 4
  store i32 %v12_12dcc, i32* @ip, align 4
  %v13_12dcc = add i32 %v6_12dcc, -12
  %v14_12dcc = inttoptr i32 %v13_12dcc to i32*
  %v15_12dcc = load i32, i32* %v14_12dcc, align 4
  store i32 %v15_12dcc, i32* %lr.global-to-local, align 4
  store i32 %v13_12dcc, i32* %r1.global-to-local, align 4
  %v7_12dd0 = add i32 %v6_12dd0, -12
  %v8_12dd0 = inttoptr i32 %v7_12dd0 to i32*
  store i32 %v9_12dcc, i32* %v8_12dd0, align 4
  %v10_12dd0 = add i32 %v6_12dd0, -8
  %v11_12dd0 = inttoptr i32 %v10_12dd0 to i32*
  %v12_12dd0 = load i32, i32* @ip, align 4
  store i32 %v12_12dd0, i32* %v11_12dd0, align 4
  %v13_12dd0 = add i32 %v6_12dd0, -4
  %v14_12dd0 = inttoptr i32 %v13_12dd0 to i32*
  %v15_12dd0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_12dd0, i32* %v14_12dd0, align 4
  store i32 %v7_12dd0, i32* %r0.global-to-local, align 4
  %v6_12dd4 = load i32, i32* %r2.global-to-local, align 4
  %v7_12dd4 = add i32 %v6_12dd4, -12
  store i32 %v7_12dd4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_12df456 = phi i32 [ %v6_12dd0, %.thread13 ], [ %v7_12dd0, %bb139 ]
  %v0_12ddc54 = phi i32 [ %v4_12dc8, %.thread13 ], [ %v7_12dd4, %bb139 ]
  %v2_12dd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12dd8, i32* @r4, align 4
  store i32 %v6_12d94, i32* @lr, align 4
  br label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_12d8c, %.thread15
  %v7_12dec = phi i32 [ %v0_12da448, %dec_label_pc_12d8c ], [ %v6_12df456, %.thread15 ]
  %v0_12ddc = phi i32 [ %v2_12d8c, %dec_label_pc_12d8c ], [ %v0_12ddc54, %.thread15 ]
  %v2_12ddc = add i32 %v0_12ddc, 8
  store i32 %v2_12ddc, i32* %r2.global-to-local, align 4
  %v4_12ddc = sub i32 0, %v0_12ddc
  %v5_12ddc = and i32 %v2_12ddc, %v4_12ddc
  %v6_12ddc = icmp slt i32 %v5_12ddc, 0
  store i1 %v6_12ddc, i1* %cpsr_v.global-to-local, align 1
  %v7_12ddc = icmp slt i32 %v2_12ddc, 0
  store i1 %v7_12ddc, i1* %cpsr_n.global-to-local, align 1
  %v8_12ddc = icmp eq i32 %v2_12ddc, 0
  store i1 %v8_12ddc, i1* %cpsr_z.global-to-local, align 1
  %v5_12de0 = icmp slt i32 %v0_12ddc, -8
  br i1 %v5_12de0, label %bb141, label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %dec_label_pc_12ddc
  %v6_12de4 = add i32 %v0_12ddc, 4
  store i32 %v6_12de4, i32* %r2.global-to-local, align 4
  %v8_12de4 = sub i32 -5, %v0_12ddc
  %v9_12de4 = and i32 %v8_12de4, %v2_12ddc
  %v10_12de4 = icmp slt i32 %v9_12de4, 0
  store i1 %v10_12de4, i1* %cpsr_v.global-to-local, align 1
  %v11_12de4 = icmp slt i32 %v6_12de4, 0
  store i1 %v11_12de4, i1* %cpsr_n.global-to-local, align 1
  %v12_12de4 = icmp eq i32 %v2_12ddc, 4
  store i1 %v12_12de4, i1* %cpsr_z.global-to-local, align 1
  %v5_12de8 = icmp slt i32 %v2_12ddc, 4
  %v6_12de8 = load i32, i32* %r1.global-to-local, align 4
  %v7_12de8 = add i32 %v6_12de8, -4
  %v8_12de8 = inttoptr i32 %v7_12de8 to i32*
  %v9_12de8 = load i32, i32* %v8_12de8, align 4
  store i32 %v9_12de8, i32* %r3.global-to-local, align 4
  br i1 %v5_12de8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_12de4
  store i32 %v7_12de8, i32* %r1.global-to-local, align 4
  %v8_12dec = add i32 %v7_12dec, -4
  %v9_12dec = inttoptr i32 %v8_12dec to i32*
  store i32 %v9_12de8, i32* %v9_12dec, align 4
  %v10_12dec = load i32, i32* %r0.global-to-local, align 4
  %v11_12dec = add i32 %v10_12dec, -4
  store i32 %v11_12dec, i32* %r0.global-to-local, align 4
  %v0_12dfc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_12de4
  %v10_12df0 = add i32 %v6_12de8, -8
  %v11_12df0 = inttoptr i32 %v10_12df0 to i32*
  %v12_12df0 = load i32, i32* %v11_12df0, align 4
  store i32 %v12_12df0, i32* @ip, align 4
  store i32 %v10_12df0, i32* %r1.global-to-local, align 4
  %v7_12df4 = add i32 %v7_12dec, -8
  %v8_12df4 = inttoptr i32 %v7_12df4 to i32*
  store i32 %v9_12de8, i32* %v8_12df4, align 4
  %v10_12df4 = add i32 %v7_12dec, -4
  %v11_12df4 = inttoptr i32 %v10_12df4 to i32*
  %v12_12df4 = load i32, i32* @ip, align 4
  store i32 %v12_12df4, i32* %v11_12df4, align 4
  store i32 %v7_12df4, i32* %r0.global-to-local, align 4
  %v6_12df8 = load i32, i32* %r2.global-to-local, align 4
  %v7_12df8 = add i32 %v6_12df8, -4
  store i32 %v7_12df8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_12d6c, %dec_label_pc_12ddc, %dec_label_pc_12fa0, %dec_label_pc_12f34, %dec_label_pc_12ec8, %bb140
  %v2_12e00 = phi i32 [ %v11_12dec, %.thread19 ], [ %v0_12e9831, %.thread25 ], [ %v2_12d70, %dec_label_pc_12d6c ], [ %v7_12dec, %dec_label_pc_12ddc ], [ %v2_12e0c64, %dec_label_pc_12fa0 ], [ %v2_12e0c63, %dec_label_pc_12f34 ], [ %v2_12e0c62, %dec_label_pc_12ec8 ], [ %v7_12df4, %bb140 ]
  %v0_12dfc = phi i32 [ %v0_12dfc.pre, %.thread19 ], [ %v2_12e40, %.thread25 ], [ %v2_12d74, %dec_label_pc_12d6c ], [ %v2_12ddc, %dec_label_pc_12ddc ], [ %v0_12dfc60, %dec_label_pc_12fa0 ], [ %v0_12dfc59, %dec_label_pc_12f34 ], [ %v0_12dfc58, %dec_label_pc_12ec8 ], [ %v7_12df8, %bb140 ]
  %v1_12dfc = add i32 %v0_12dfc, 4
  store i32 %v1_12dfc, i32* %r2.global-to-local, align 4
  %v3_12dfc = sub i32 0, %v0_12dfc
  %v4_12dfc = and i32 %v1_12dfc, %v3_12dfc
  %v5_12dfc = icmp slt i32 %v4_12dfc, 0
  store i1 %v5_12dfc, i1* %cpsr_v.global-to-local, align 1
  %v6_12dfc = icmp slt i32 %v1_12dfc, 0
  store i1 %v6_12dfc, i1* %cpsr_n.global-to-local, align 1
  %v7_12dfc = icmp eq i32 %v1_12dfc, 0
  store i1 %v7_12dfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12dfc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_12e04 = add i32 %v0_12dfc, 2
  %v3_12e04 = sub i32 -3, %v0_12dfc
  %v4_12e04 = and i32 %v3_12e04, %v1_12dfc
  %v5_12e04 = icmp slt i32 %v4_12e04, 0
  store i1 %v5_12e04, i1* %cpsr_v.global-to-local, align 1
  %v6_12e04 = icmp slt i32 %v1_12e04, 0
  store i1 %v6_12e04, i1* %cpsr_n.global-to-local, align 1
  %v7_12e04 = icmp eq i32 %v1_12dfc, 2
  store i1 %v7_12e04, i1* %cpsr_z.global-to-local, align 1
  %v0_12e08 = load i32, i32* %r1.global-to-local, align 4
  %v1_12e08 = add i32 %v0_12e08, -1
  %v2_12e08 = inttoptr i32 %v1_12e08 to i8*
  %v3_12e08 = load i8, i8* %v2_12e08, align 1
  %v4_12e08 = zext i8 %v3_12e08 to i32
  store i32 %v4_12e08, i32* %r3.global-to-local, align 4
  store i32 %v1_12e08, i32* %r1.global-to-local, align 4
  %v3_12e0c = add i32 %v2_12e00, -1
  %v4_12e0c = inttoptr i32 %v3_12e0c to i8*
  store i8 %v3_12e08, i8* %v4_12e0c, align 1
  %v5_12e0c = load i32, i32* %r0.global-to-local, align 4
  %v6_12e0c = add i32 %v5_12e0c, -1
  store i32 %v6_12e0c, i32* %r0.global-to-local, align 4
  %v0_12e10 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_12e10 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_12e10 = xor i1 %v0_12e10, %v1_12e10
  br i1 %v2_12e10, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_12e10 = load i32, i32* %r1.global-to-local, align 4
  %v4_12e10 = add i32 %v3_12e10, -1
  %v5_12e10 = inttoptr i32 %v4_12e10 to i8*
  %v6_12e10 = load i8, i8* %v5_12e10, align 1
  %v7_12e10 = zext i8 %v6_12e10 to i32
  store i32 %v7_12e10, i32* %r3.global-to-local, align 4
  store i32 %v4_12e10, i32* %r1.global-to-local, align 4
  %v6_12e14 = add i32 %v5_12e0c, -2
  %v7_12e14 = inttoptr i32 %v6_12e14 to i8*
  store i8 %v6_12e10, i8* %v7_12e14, align 1
  %v8_12e14 = load i32, i32* %r0.global-to-local, align 4
  %v9_12e14 = add i32 %v8_12e14, -1
  store i32 %v9_12e14, i32* %r0.global-to-local, align 4
  %v1_12e18.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12e18.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_12e1c = phi i32 [ %v9_12e14, %bb143 ], [ %v6_12e0c, %bb142 ]
  %v2_12e1c = phi i1 [ %v2_12e18.pre, %bb143 ], [ %v1_12e10, %bb142 ]
  %v1_12e1c = phi i1 [ %v1_12e18.pre, %bb143 ], [ %v0_12e10, %bb142 ]
  %v0_12e18 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_12e18 = xor i1 %v2_12e1c, %v1_12e1c
  %v4_12e18 = or i1 %v0_12e18, %v3_12e18
  br i1 %v4_12e18, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_12e18 = load i32, i32* %r1.global-to-local, align 4
  %v6_12e18 = add i32 %v5_12e18, -1
  %v7_12e18 = inttoptr i32 %v6_12e18 to i8*
  %v8_12e18 = load i8, i8* %v7_12e18, align 1
  %v9_12e18 = zext i8 %v8_12e18 to i32
  store i32 %v9_12e18, i32* %r3.global-to-local, align 4
  store i32 %v6_12e18, i32* %r1.global-to-local, align 4
  %v8_12e1c = add i32 %v7_12e1c, -1
  %v9_12e1c = inttoptr i32 %v8_12e1c to i8*
  store i8 %v8_12e18, i8* %v9_12e1c, align 1
  %v10_12e1c = load i32, i32* %r0.global-to-local, align 4
  %v11_12e1c = add i32 %v10_12e1c, -1
  store i32 %v11_12e1c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_12e24:                               ; preds = %dec_label_pc_12d7c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_12e24 = icmp eq i32 %v1_12d7c, 1
  store i1 %v8_12e24, i1* %cpsr_n.global-to-local, align 1
  %v9_12e24 = icmp eq i32 %v1_12d7c, 2
  store i1 %v9_12e24, i1* %cpsr_z.global-to-local, align 1
  %v1_12e28 = add i32 %v2_12d6c, -1
  %v2_12e28 = inttoptr i32 %v1_12e28 to i8*
  %v3_12e28 = load i8, i8* %v2_12e28, align 1
  %v4_12e28 = zext i8 %v3_12e28 to i32
  store i32 %v4_12e28, i32* %r3.global-to-local, align 4
  store i32 %v1_12e28, i32* %r1.global-to-local, align 4
  %v3_12e2c = add i32 %v2_12d70, -1
  %v4_12e2c = inttoptr i32 %v3_12e2c to i8*
  store i8 %v3_12e28, i8* %v4_12e2c, align 1
  %v5_12e2c = load i32, i32* %r0.global-to-local, align 4
  %v6_12e2c = add i32 %v5_12e2c, -1
  store i32 %v6_12e2c, i32* %r0.global-to-local, align 4
  br i1 %v8_12e24, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_12e24
  %v6_12e30 = load i32, i32* %r1.global-to-local, align 4
  %v7_12e30 = add i32 %v6_12e30, -1
  %v8_12e30 = inttoptr i32 %v7_12e30 to i8*
  %v9_12e30 = load i8, i8* %v8_12e30, align 1
  %v10_12e30 = zext i8 %v9_12e30 to i32
  store i32 %v10_12e30, i32* %r3.global-to-local, align 4
  store i32 %v7_12e30, i32* %r1.global-to-local, align 4
  %v9_12e34 = add i32 %v5_12e2c, -2
  %v10_12e34 = inttoptr i32 %v9_12e34 to i8*
  store i8 %v9_12e30, i8* %v10_12e34, align 1
  %v11_12e34 = load i32, i32* %r0.global-to-local, align 4
  %v12_12e34 = add i32 %v11_12e34, -1
  store i32 %v12_12e34, i32* %r0.global-to-local, align 4
  br i1 %v9_12e24, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_12e38 = load i32, i32* %r1.global-to-local, align 4
  %v9_12e38 = add i32 %v8_12e38, -1
  %v10_12e38 = inttoptr i32 %v9_12e38 to i8*
  %v11_12e38 = load i8, i8* %v10_12e38, align 1
  %v12_12e38 = zext i8 %v11_12e38 to i32
  store i32 %v12_12e38, i32* %r3.global-to-local, align 4
  store i32 %v9_12e38, i32* %r1.global-to-local, align 4
  %v11_12e3c = add i32 %v11_12e34, -2
  %v12_12e3c = inttoptr i32 %v11_12e3c to i8*
  store i8 %v11_12e38, i8* %v12_12e3c, align 1
  %v13_12e3c = load i32, i32* %r0.global-to-local, align 4
  %v14_12e3c = add i32 %v13_12e3c, -1
  store i32 %v14_12e3c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_12e24, %bb146
  %v0_12e9831 = phi i32 [ %v12_12e34, %bb145 ], [ %v6_12e2c, %dec_label_pc_12e24 ], [ %v14_12e3c, %bb146 ]
  %v0_12e40 = load i32, i32* %r2.global-to-local, align 4
  %v1_12e40 = load i32, i32* @ip, align 4
  %v2_12e40 = sub i32 %v0_12e40, %v1_12e40
  store i32 %v2_12e40, i32* %r2.global-to-local, align 4
  %v4_12e40 = xor i32 %v1_12e40, %v0_12e40
  %v5_12e40 = xor i32 %v2_12e40, %v0_12e40
  %v6_12e40 = and i32 %v5_12e40, %v4_12e40
  %v7_12e40 = icmp slt i32 %v6_12e40, 0
  store i1 %v7_12e40, i1* %cpsr_v.global-to-local, align 1
  %v8_12e40 = icmp slt i32 %v2_12e40, 0
  store i1 %v8_12e40, i1* %cpsr_n.global-to-local, align 1
  %v9_12e40 = icmp eq i32 %v0_12e40, %v1_12e40
  store i1 %v9_12e40, i1* %cpsr_z.global-to-local, align 1
  %v5_12e44 = icmp slt i32 %v0_12e40, %v1_12e40
  br i1 %v5_12e44, label %bb141, label %dec_label_pc_12e48

dec_label_pc_12e48:                               ; preds = %.thread25
  %v0_12e48 = load i32, i32* %r1.global-to-local, align 4
  %v1_12e48 = urem i32 %v0_12e48, 4
  store i32 %v1_12e48, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12e48 = icmp eq i32 %v1_12e48, 0
  store i1 %v2_12e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12e48, label %dec_label_pc_12d8c, label %dec_label_pc_12e50

dec_label_pc_12e50:                               ; preds = %dec_label_pc_12d84, %dec_label_pc_12e48
  %v0_12e9830 = phi i32 [ %v2_12d70, %dec_label_pc_12d84 ], [ %v0_12e9831, %dec_label_pc_12e48 ]
  %v0_12f44 = phi i32 [ %v2_12d74, %dec_label_pc_12d84 ], [ %v2_12e40, %dec_label_pc_12e48 ]
  %v0_12e50 = phi i32 [ %v2_12d6c, %dec_label_pc_12d84 ], [ %v0_12e48, %dec_label_pc_12e48 ]
  %v0_12e58 = phi i32 [ %v1_12d84, %dec_label_pc_12d84 ], [ %v1_12e48, %dec_label_pc_12e48 ]
  %v1_12e50 = and i32 %v0_12e50, -4
  store i32 %v1_12e50, i32* %r1.global-to-local, align 4
  %v1_12e54 = inttoptr i32 %v1_12e50 to i32*
  %v2_12e54 = load i32, i32* %v1_12e54, align 4
  store i32 %v2_12e54, i32* %r3.global-to-local, align 4
  %v7_12e58 = icmp ult i32 %v0_12e58, 2
  %v2_12f3c = add i32 %v0_12f44, -12
  %v4_12f3c = sub i32 11, %v0_12f44
  %v5_12f3c = and i32 %v4_12f3c, %v0_12f44
  %v6_12f3c = icmp slt i32 %v5_12f3c, 0
  store i1 %v6_12f3c, i1* %cpsr_v.global-to-local, align 1
  %v7_12f3c = icmp slt i32 %v2_12f3c, 0
  store i1 %v7_12f3c, i1* %cpsr_n.global-to-local, align 1
  %v8_12f3c = icmp eq i32 %v0_12f44, 12
  store i1 %v8_12f3c, i1* %cpsr_z.global-to-local, align 1
  %v5_12f40 = icmp slt i32 %v0_12f44, 12
  br i1 %v7_12e58, label %dec_label_pc_12f3c, label %dec_label_pc_12e60

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e50
  %v8_12e58 = icmp eq i32 %v0_12e58, 2
  br i1 %v8_12e58, label %dec_label_pc_12ed0, label %dec_label_pc_12e64

dec_label_pc_12e64:                               ; preds = %dec_label_pc_12e60
  br i1 %v5_12f40, label %dec_label_pc_12eb0, label %dec_label_pc_12e6c

dec_label_pc_12e6c:                               ; preds = %dec_label_pc_12e64
  store i32 %v2_12f3c, i32* %r2.global-to-local, align 4
  %v3_12e70 = load i32, i32* @r4, align 4
  store i32 %v3_12e70, i32* %stack_var_-12, align 4
  %v6_12e70 = load i32, i32* @r5, align 4
  store i32 %v6_12e70, i32* %stack_var_-8, align 4
  %v9_12e70 = load i32, i32* @lr, align 4
  br label %dec_label_pc_12e74

dec_label_pc_12e74:                               ; preds = %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge, %dec_label_pc_12e6c
  %v0_12e98 = phi i32 [ %v1_12e98, %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge ], [ %v0_12e9830, %dec_label_pc_12e6c ]
  %v0_12e78 = phi i32 [ %v0_12e78.pre, %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge ], [ %v1_12e50, %dec_label_pc_12e6c ]
  %v0_12e74 = phi i32 [ %v0_12e74.pre, %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge ], [ %v2_12e54, %dec_label_pc_12e6c ]
  %v3_12e74 = mul i32 %v0_12e74, 256
  store i32 %v3_12e74, i32* %lr.global-to-local, align 4
  %v1_12e78 = add i32 %v0_12e78, -4
  %v2_12e78 = inttoptr i32 %v1_12e78 to i32*
  %v3_12e78 = load i32, i32* %v2_12e78, align 4
  store i32 %v3_12e78, i32* %r3.global-to-local, align 4
  %v4_12e78 = add i32 %v0_12e78, -8
  %v5_12e78 = inttoptr i32 %v4_12e78 to i32*
  %v6_12e78 = load i32, i32* %v5_12e78, align 4
  store i32 %v6_12e78, i32* %r4.global-to-local, align 4
  %v7_12e78 = add i32 %v0_12e78, -12
  %v8_12e78 = inttoptr i32 %v7_12e78 to i32*
  %v9_12e78 = load i32, i32* %v8_12e78, align 4
  store i32 %v9_12e78, i32* %r5.global-to-local, align 4
  %v10_12e78 = add i32 %v0_12e78, -16
  %v11_12e78 = inttoptr i32 %v10_12e78 to i32*
  %v12_12e78 = load i32, i32* %v11_12e78, align 4
  store i32 %v10_12e78, i32* %r1.global-to-local, align 4
  %v4_12e7c = udiv i32 %v12_12e78, 16777216
  %v5_12e7c = or i32 %v4_12e7c, %v3_12e74
  store i32 %v5_12e7c, i32* %lr.global-to-local, align 4
  %v3_12e80 = mul i32 %v12_12e78, 256
  %v4_12e84 = udiv i32 %v9_12e78, 16777216
  %v5_12e84 = or i32 %v3_12e80, %v4_12e84
  store i32 %v5_12e84, i32* @ip, align 4
  %v3_12e88 = mul i32 %v9_12e78, 256
  %v4_12e8c = udiv i32 %v6_12e78, 16777216
  %v5_12e8c = or i32 %v3_12e88, %v4_12e8c
  store i32 %v5_12e8c, i32* %r5.global-to-local, align 4
  %v3_12e90 = mul i32 %v6_12e78, 256
  %v4_12e94 = udiv i32 %v3_12e78, 16777216
  %v5_12e94 = or i32 %v3_12e90, %v4_12e94
  store i32 %v5_12e94, i32* %r4.global-to-local, align 4
  %v1_12e98 = add i32 %v0_12e98, -16
  %v2_12e98 = inttoptr i32 %v1_12e98 to i32*
  store i32 %v5_12e94, i32* %v2_12e98, align 4
  %v4_12e98 = add i32 %v0_12e98, -12
  %v5_12e98 = inttoptr i32 %v4_12e98 to i32*
  %v6_12e98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12e98, i32* %v5_12e98, align 4
  %v7_12e98 = add i32 %v0_12e98, -8
  %v8_12e98 = inttoptr i32 %v7_12e98 to i32*
  %v9_12e98 = load i32, i32* @ip, align 4
  store i32 %v9_12e98, i32* %v8_12e98, align 4
  %v10_12e98 = add i32 %v0_12e98, -4
  %v11_12e98 = inttoptr i32 %v10_12e98 to i32*
  %v12_12e98 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12e98, i32* %v11_12e98, align 4
  store i32 %v1_12e98, i32* %r0.global-to-local, align 4
  %v0_12e9c = load i32, i32* %r2.global-to-local, align 4
  %v2_12e9c = add i32 %v0_12e9c, -16
  store i32 %v2_12e9c, i32* %r2.global-to-local, align 4
  %v6_12ea0 = icmp slt i32 %v0_12e9c, 16
  br i1 %v6_12ea0, label %dec_label_pc_12ea4, label %dec_label_pc_12e74.dec_label_pc_12e74_crit_edge

dec_label_pc_12e74.dec_label_pc_12e74_crit_edge:  ; preds = %dec_label_pc_12e74
  %v0_12e74.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12e78.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12e74

dec_label_pc_12ea4:                               ; preds = %dec_label_pc_12e74
  %v2_12ea4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12ea4, i32* @r4, align 4
  %v5_12ea4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12ea4, i32* @r5, align 4
  store i32 %v9_12e70, i32* @lr, align 4
  %v2_12ea8 = add i32 %v0_12e9c, -4
  store i32 %v2_12ea8, i32* %r2.global-to-local, align 4
  %v4_12ea8 = add i32 %v0_12e9c, 2147483632
  %v5_12ea8 = and i32 %v2_12ea8, %v4_12ea8
  %v6_12ea8 = icmp slt i32 %v5_12ea8, 0
  store i1 %v6_12ea8, i1* %cpsr_v.global-to-local, align 1
  %v7_12ea8 = icmp slt i32 %v2_12ea8, 0
  store i1 %v7_12ea8, i1* %cpsr_n.global-to-local, align 1
  %v8_12ea8 = icmp eq i32 %v2_12ea8, 0
  store i1 %v8_12ea8, i1* %cpsr_z.global-to-local, align 1
  %v5_12eac = icmp slt i32 %v2_12e9c, -12
  br i1 %v5_12eac, label %dec_label_pc_12ec8, label %dec_label_pc_12eb0

dec_label_pc_12eb0:                               ; preds = %dec_label_pc_12ea4, %dec_label_pc_12e64, %dec_label_pc_12eb0
  %v1_12ebc = phi i32 [ %v5_12ebc, %dec_label_pc_12eb0 ], [ %v1_12e98, %dec_label_pc_12ea4 ], [ %v0_12e9830, %dec_label_pc_12e64 ]
  %v0_12eb0 = load i32, i32* %r3.global-to-local, align 4
  %v3_12eb0 = mul i32 %v0_12eb0, 256
  store i32 %v3_12eb0, i32* %ip.global-to-local, align 4
  %v0_12eb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12eb4 = add i32 %v0_12eb4, -4
  %v2_12eb4 = inttoptr i32 %v1_12eb4 to i32*
  %v3_12eb4 = load i32, i32* %v2_12eb4, align 4
  store i32 %v3_12eb4, i32* %r3.global-to-local, align 4
  store i32 %v1_12eb4, i32* %r1.global-to-local, align 4
  %v4_12eb8 = udiv i32 %v3_12eb4, 16777216
  %v5_12eb8 = or i32 %v4_12eb8, %v3_12eb0
  store i32 %v5_12eb8, i32* @ip, align 4
  %v2_12ebc = add i32 %v1_12ebc, -4
  %v3_12ebc = inttoptr i32 %v2_12ebc to i32*
  store i32 %v5_12eb8, i32* %v3_12ebc, align 4
  %v4_12ebc = load i32, i32* %r0.global-to-local, align 4
  %v5_12ebc = add i32 %v4_12ebc, -4
  store i32 %v5_12ebc, i32* %r0.global-to-local, align 4
  %v0_12ec0 = load i32, i32* %r2.global-to-local, align 4
  %v2_12ec0 = add i32 %v0_12ec0, -4
  store i32 %v2_12ec0, i32* %r2.global-to-local, align 4
  %v6_12ec4 = icmp slt i32 %v0_12ec0, 4
  br i1 %v6_12ec4, label %dec_label_pc_12ec8.loopexit, label %dec_label_pc_12eb0

dec_label_pc_12ec8.loopexit:                      ; preds = %dec_label_pc_12eb0
  %v4_12ec0 = sub i32 3, %v0_12ec0
  %v5_12ec0 = and i32 %v4_12ec0, %v0_12ec0
  %v6_12ec0 = icmp slt i32 %v5_12ec0, 0
  %v7_12ec0 = icmp slt i32 %v2_12ec0, 0
  store i1 %v6_12ec0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12ec0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12ec8

dec_label_pc_12ec8:                               ; preds = %dec_label_pc_12ec8.loopexit, %dec_label_pc_12ea4
  %v2_12e0c62 = phi i32 [ %v5_12ebc, %dec_label_pc_12ec8.loopexit ], [ %v1_12e98, %dec_label_pc_12ea4 ]
  %v0_12dfc58 = phi i32 [ %v2_12ec0, %dec_label_pc_12ec8.loopexit ], [ %v2_12ea8, %dec_label_pc_12ea4 ]
  %v0_12ec8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ec8 = add i32 %v0_12ec8, 3
  store i32 %v1_12ec8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_12ed0:                               ; preds = %dec_label_pc_12e60
  br i1 %v5_12f40, label %dec_label_pc_12f1c, label %dec_label_pc_12ed8

dec_label_pc_12ed8:                               ; preds = %dec_label_pc_12ed0
  store i32 %v2_12f3c, i32* %r2.global-to-local, align 4
  %v3_12edc = load i32, i32* @r4, align 4
  store i32 %v3_12edc, i32* %stack_var_-12, align 4
  %v6_12edc = load i32, i32* @r5, align 4
  store i32 %v6_12edc, i32* %stack_var_-8, align 4
  %v9_12edc = load i32, i32* @lr, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge, %dec_label_pc_12ed8
  %v0_12f04 = phi i32 [ %v1_12f04, %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge ], [ %v0_12e9830, %dec_label_pc_12ed8 ]
  %v0_12ee4 = phi i32 [ %v0_12ee4.pre, %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge ], [ %v1_12e50, %dec_label_pc_12ed8 ]
  %v0_12ee0 = phi i32 [ %v0_12ee0.pre, %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge ], [ %v2_12e54, %dec_label_pc_12ed8 ]
  %v3_12ee0 = mul i32 %v0_12ee0, 65536
  store i32 %v3_12ee0, i32* %lr.global-to-local, align 4
  %v1_12ee4 = add i32 %v0_12ee4, -4
  %v2_12ee4 = inttoptr i32 %v1_12ee4 to i32*
  %v3_12ee4 = load i32, i32* %v2_12ee4, align 4
  store i32 %v3_12ee4, i32* %r3.global-to-local, align 4
  %v4_12ee4 = add i32 %v0_12ee4, -8
  %v5_12ee4 = inttoptr i32 %v4_12ee4 to i32*
  %v6_12ee4 = load i32, i32* %v5_12ee4, align 4
  store i32 %v6_12ee4, i32* %r4.global-to-local, align 4
  %v7_12ee4 = add i32 %v0_12ee4, -12
  %v8_12ee4 = inttoptr i32 %v7_12ee4 to i32*
  %v9_12ee4 = load i32, i32* %v8_12ee4, align 4
  store i32 %v9_12ee4, i32* %r5.global-to-local, align 4
  %v10_12ee4 = add i32 %v0_12ee4, -16
  %v11_12ee4 = inttoptr i32 %v10_12ee4 to i32*
  %v12_12ee4 = load i32, i32* %v11_12ee4, align 4
  store i32 %v10_12ee4, i32* %r1.global-to-local, align 4
  %v4_12ee8 = udiv i32 %v12_12ee4, 65536
  %v5_12ee8 = or i32 %v4_12ee8, %v3_12ee0
  store i32 %v5_12ee8, i32* %lr.global-to-local, align 4
  %v3_12eec = mul i32 %v12_12ee4, 65536
  %v4_12ef0 = udiv i32 %v9_12ee4, 65536
  %v5_12ef0 = or i32 %v3_12eec, %v4_12ef0
  store i32 %v5_12ef0, i32* @ip, align 4
  %v3_12ef4 = mul i32 %v9_12ee4, 65536
  %v4_12ef8 = udiv i32 %v6_12ee4, 65536
  %v5_12ef8 = or i32 %v3_12ef4, %v4_12ef8
  store i32 %v5_12ef8, i32* %r5.global-to-local, align 4
  %v3_12efc = mul i32 %v6_12ee4, 65536
  %v4_12f00 = udiv i32 %v3_12ee4, 65536
  %v5_12f00 = or i32 %v3_12efc, %v4_12f00
  store i32 %v5_12f00, i32* %r4.global-to-local, align 4
  %v1_12f04 = add i32 %v0_12f04, -16
  %v2_12f04 = inttoptr i32 %v1_12f04 to i32*
  store i32 %v5_12f00, i32* %v2_12f04, align 4
  %v4_12f04 = add i32 %v0_12f04, -12
  %v5_12f04 = inttoptr i32 %v4_12f04 to i32*
  %v6_12f04 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12f04, i32* %v5_12f04, align 4
  %v7_12f04 = add i32 %v0_12f04, -8
  %v8_12f04 = inttoptr i32 %v7_12f04 to i32*
  %v9_12f04 = load i32, i32* @ip, align 4
  store i32 %v9_12f04, i32* %v8_12f04, align 4
  %v10_12f04 = add i32 %v0_12f04, -4
  %v11_12f04 = inttoptr i32 %v10_12f04 to i32*
  %v12_12f04 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12f04, i32* %v11_12f04, align 4
  store i32 %v1_12f04, i32* %r0.global-to-local, align 4
  %v0_12f08 = load i32, i32* %r2.global-to-local, align 4
  %v2_12f08 = add i32 %v0_12f08, -16
  store i32 %v2_12f08, i32* %r2.global-to-local, align 4
  %v6_12f0c = icmp slt i32 %v0_12f08, 16
  br i1 %v6_12f0c, label %dec_label_pc_12f10, label %dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge

dec_label_pc_12ee0.dec_label_pc_12ee0_crit_edge:  ; preds = %dec_label_pc_12ee0
  %v0_12ee0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12ee4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12ee0
  %v2_12f10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12f10, i32* @r4, align 4
  %v5_12f10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12f10, i32* @r5, align 4
  store i32 %v9_12edc, i32* @lr, align 4
  %v2_12f14 = add i32 %v0_12f08, -4
  store i32 %v2_12f14, i32* %r2.global-to-local, align 4
  %v4_12f14 = add i32 %v0_12f08, 2147483632
  %v5_12f14 = and i32 %v2_12f14, %v4_12f14
  %v6_12f14 = icmp slt i32 %v5_12f14, 0
  store i1 %v6_12f14, i1* %cpsr_v.global-to-local, align 1
  %v7_12f14 = icmp slt i32 %v2_12f14, 0
  store i1 %v7_12f14, i1* %cpsr_n.global-to-local, align 1
  %v8_12f14 = icmp eq i32 %v2_12f14, 0
  store i1 %v8_12f14, i1* %cpsr_z.global-to-local, align 1
  %v5_12f18 = icmp slt i32 %v2_12f08, -12
  br i1 %v5_12f18, label %dec_label_pc_12f34, label %dec_label_pc_12f1c

dec_label_pc_12f1c:                               ; preds = %dec_label_pc_12f10, %dec_label_pc_12ed0, %dec_label_pc_12f1c
  %v1_12f28 = phi i32 [ %v5_12f28, %dec_label_pc_12f1c ], [ %v1_12f04, %dec_label_pc_12f10 ], [ %v0_12e9830, %dec_label_pc_12ed0 ]
  %v0_12f1c = load i32, i32* %r3.global-to-local, align 4
  %v3_12f1c = mul i32 %v0_12f1c, 65536
  store i32 %v3_12f1c, i32* %ip.global-to-local, align 4
  %v0_12f20 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f20 = add i32 %v0_12f20, -4
  %v2_12f20 = inttoptr i32 %v1_12f20 to i32*
  %v3_12f20 = load i32, i32* %v2_12f20, align 4
  store i32 %v3_12f20, i32* %r3.global-to-local, align 4
  store i32 %v1_12f20, i32* %r1.global-to-local, align 4
  %v4_12f24 = udiv i32 %v3_12f20, 65536
  %v5_12f24 = or i32 %v4_12f24, %v3_12f1c
  store i32 %v5_12f24, i32* @ip, align 4
  %v2_12f28 = add i32 %v1_12f28, -4
  %v3_12f28 = inttoptr i32 %v2_12f28 to i32*
  store i32 %v5_12f24, i32* %v3_12f28, align 4
  %v4_12f28 = load i32, i32* %r0.global-to-local, align 4
  %v5_12f28 = add i32 %v4_12f28, -4
  store i32 %v5_12f28, i32* %r0.global-to-local, align 4
  %v0_12f2c = load i32, i32* %r2.global-to-local, align 4
  %v2_12f2c = add i32 %v0_12f2c, -4
  store i32 %v2_12f2c, i32* %r2.global-to-local, align 4
  %v6_12f30 = icmp slt i32 %v0_12f2c, 4
  br i1 %v6_12f30, label %dec_label_pc_12f34.loopexit, label %dec_label_pc_12f1c

dec_label_pc_12f34.loopexit:                      ; preds = %dec_label_pc_12f1c
  %v4_12f2c = sub i32 3, %v0_12f2c
  %v5_12f2c = and i32 %v4_12f2c, %v0_12f2c
  %v6_12f2c = icmp slt i32 %v5_12f2c, 0
  %v7_12f2c = icmp slt i32 %v2_12f2c, 0
  store i1 %v6_12f2c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12f2c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12f34

dec_label_pc_12f34:                               ; preds = %dec_label_pc_12f34.loopexit, %dec_label_pc_12f10
  %v2_12e0c63 = phi i32 [ %v5_12f28, %dec_label_pc_12f34.loopexit ], [ %v1_12f04, %dec_label_pc_12f10 ]
  %v0_12dfc59 = phi i32 [ %v2_12f2c, %dec_label_pc_12f34.loopexit ], [ %v2_12f14, %dec_label_pc_12f10 ]
  %v0_12f34 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f34 = add i32 %v0_12f34, 2
  store i32 %v1_12f34, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12e50
  br i1 %v5_12f40, label %dec_label_pc_12f88, label %dec_label_pc_12f44

dec_label_pc_12f44:                               ; preds = %dec_label_pc_12f3c
  store i32 %v2_12f3c, i32* %r2.global-to-local, align 4
  %v3_12f48 = load i32, i32* @r4, align 4
  store i32 %v3_12f48, i32* %stack_var_-12, align 4
  %v6_12f48 = load i32, i32* @r5, align 4
  store i32 %v6_12f48, i32* %stack_var_-8, align 4
  %v9_12f48 = load i32, i32* @lr, align 4
  br label %dec_label_pc_12f4c

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f4c.dec_label_pc_12f4c_crit_edge, %dec_label_pc_12f44
  %v0_12f70 = phi i32 [ %v1_12f70, %dec_label_pc_12f4c.dec_label_pc_12f4c_crit_edge ], [ %v0_12e9830, %dec_label_pc_12f44 ]
  %v0_12f50 = phi i32 [ %v0_12f50.pre, %dec_label_pc_12f4c.dec_label_pc_12f4c_crit_edge ], [ %v1_12e50, %dec_label_pc_12f44 ]
  %v0_12f4c = phi i32 [ %v0_12f4c.pre, %dec_label_pc_12f4c.dec_label_pc_12f4c_crit_edge ], [ %v2_12e54, %dec_label_pc_12f44 ]
  %v3_12f4c = mul i32 %v0_12f4c, 16777216
  store i32 %v3_12f4c, i32* %lr.global-to-local, align 4
  %v1_12f50 = add i32 %v0_12f50, -4
  %v2_12f50 = inttoptr i32 %v1_12f50 to i32*
  %v3_12f50 = load i32, i32* %v2_12f50, align 4
  store i32 %v3_12f50, i32* %r3.global-to-local, align 4
  %v4_12f50 = add i32 %v0_12f50, -8
  %v5_12f50 = inttoptr i32 %v4_12f50 to i32*
  %v6_12f50 = load i32, i32* %v5_12f50, align 4
  store i32 %v6_12f50, i32* %r4.global-to-local, align 4
  %v7_12f50 = add i32 %v0_12f50, -12
  %v8_12f50 = inttoptr i32 %v7_12f50 to i32*
  %v9_12f50 = load i32, i32* %v8_12f50, align 4
  store i32 %v9_12f50, i32* %r5.global-to-local, align 4
  %v10_12f50 = add i32 %v0_12f50, -16
  %v11_12f50 = inttoptr i32 %v10_12f50 to i32*
  %v12_12f50 = load i32, i32* %v11_12f50, align 4
  store i32 %v10_12f50, i32* %r1.global-to-local, align 4
  %v4_12f54 = udiv i32 %v12_12f50, 256
  %v5_12f54 = or i32 %v4_12f54, %v3_12f4c
  store i32 %v5_12f54, i32* %lr.global-to-local, align 4
  %v3_12f58 = mul i32 %v12_12f50, 16777216
  %v4_12f5c = udiv i32 %v9_12f50, 256
  %v5_12f5c = or i32 %v3_12f58, %v4_12f5c
  store i32 %v5_12f5c, i32* @ip, align 4
  %v3_12f60 = mul i32 %v9_12f50, 16777216
  %v4_12f64 = udiv i32 %v6_12f50, 256
  %v5_12f64 = or i32 %v3_12f60, %v4_12f64
  store i32 %v5_12f64, i32* %r5.global-to-local, align 4
  %v3_12f68 = mul i32 %v6_12f50, 16777216
  %v4_12f6c = udiv i32 %v3_12f50, 256
  %v5_12f6c = or i32 %v3_12f68, %v4_12f6c
  store i32 %v5_12f6c, i32* %r4.global-to-local, align 4
  %v1_12f70 = add i32 %v0_12f70, -16
  %v2_12f70 = inttoptr i32 %v1_12f70 to i32*
  store i32 %v5_12f6c, i32* %v2_12f70, align 4
  %v4_12f70 = add i32 %v0_12f70, -12
  %v5_12f70 = inttoptr i32 %v4_12f70 to i32*
  %v6_12f70 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12f70, i32* %v5_12f70, align 4
  %v7_12f70 = add i32 %v0_12f70, -8
  %v8_12f70 = inttoptr i32 %v7_12f70 to i32*
  %v9_12f70 = load i32, i32* @ip, align 4
  store i32 %v9_12f70, i32* %v8_12f70, align 4
  %v10_12f70 = add i32 %v0_12f70, -4
  %v11_12f70 = inttoptr i32 %v10_12f70 to i32*
  %v12_12f70 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12f70, i32* %v11_12f70, align 4
  store i32 %v1_12f70, i32* %r0.global-to-local, align 4
  %v0_12f74 = load i32, i32* %r2.global-to-local, align 4
  %v2_12f74 = add i32 %v0_12f74, -16
  store i32 %v2_12f74, i32* %r2.global-to-local, align 4
  %v6_12f78 = icmp slt i32 %v0_12f74, 16
  br i1 %v6_12f78, label %dec_label_pc_12f7c, label %dec_label_pc_12f4c.dec_label_pc_12f4c_crit_edge

dec_label_pc_12f4c.dec_label_pc_12f4c_crit_edge:  ; preds = %dec_label_pc_12f4c
  %v0_12f4c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12f50.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f4c

dec_label_pc_12f7c:                               ; preds = %dec_label_pc_12f4c
  %v2_12f7c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12f7c, i32* @r4, align 4
  %v5_12f7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12f7c, i32* @r5, align 4
  store i32 %v9_12f48, i32* @lr, align 4
  %v2_12f80 = add i32 %v0_12f74, -4
  store i32 %v2_12f80, i32* %r2.global-to-local, align 4
  %v4_12f80 = add i32 %v0_12f74, 2147483632
  %v5_12f80 = and i32 %v2_12f80, %v4_12f80
  %v6_12f80 = icmp slt i32 %v5_12f80, 0
  store i1 %v6_12f80, i1* %cpsr_v.global-to-local, align 1
  %v7_12f80 = icmp slt i32 %v2_12f80, 0
  store i1 %v7_12f80, i1* %cpsr_n.global-to-local, align 1
  %v8_12f80 = icmp eq i32 %v2_12f80, 0
  store i1 %v8_12f80, i1* %cpsr_z.global-to-local, align 1
  %v5_12f84 = icmp slt i32 %v2_12f74, -12
  br i1 %v5_12f84, label %dec_label_pc_12fa0, label %dec_label_pc_12f88

dec_label_pc_12f88:                               ; preds = %dec_label_pc_12f7c, %dec_label_pc_12f3c, %dec_label_pc_12f88
  %v1_12f94 = phi i32 [ %v5_12f94, %dec_label_pc_12f88 ], [ %v1_12f70, %dec_label_pc_12f7c ], [ %v0_12e9830, %dec_label_pc_12f3c ]
  %v0_12f88 = load i32, i32* %r3.global-to-local, align 4
  %v3_12f88 = mul i32 %v0_12f88, 16777216
  store i32 %v3_12f88, i32* %ip.global-to-local, align 4
  %v0_12f8c = load i32, i32* %r1.global-to-local, align 4
  %v1_12f8c = add i32 %v0_12f8c, -4
  %v2_12f8c = inttoptr i32 %v1_12f8c to i32*
  %v3_12f8c = load i32, i32* %v2_12f8c, align 4
  store i32 %v3_12f8c, i32* %r3.global-to-local, align 4
  store i32 %v1_12f8c, i32* %r1.global-to-local, align 4
  %v4_12f90 = udiv i32 %v3_12f8c, 256
  %v5_12f90 = or i32 %v4_12f90, %v3_12f88
  store i32 %v5_12f90, i32* @ip, align 4
  %v2_12f94 = add i32 %v1_12f94, -4
  %v3_12f94 = inttoptr i32 %v2_12f94 to i32*
  store i32 %v5_12f90, i32* %v3_12f94, align 4
  %v4_12f94 = load i32, i32* %r0.global-to-local, align 4
  %v5_12f94 = add i32 %v4_12f94, -4
  store i32 %v5_12f94, i32* %r0.global-to-local, align 4
  %v0_12f98 = load i32, i32* %r2.global-to-local, align 4
  %v2_12f98 = add i32 %v0_12f98, -4
  store i32 %v2_12f98, i32* %r2.global-to-local, align 4
  %v6_12f9c = icmp slt i32 %v0_12f98, 4
  br i1 %v6_12f9c, label %dec_label_pc_12fa0.loopexit, label %dec_label_pc_12f88

dec_label_pc_12fa0.loopexit:                      ; preds = %dec_label_pc_12f88
  %v4_12f98 = sub i32 3, %v0_12f98
  %v5_12f98 = and i32 %v4_12f98, %v0_12f98
  %v6_12f98 = icmp slt i32 %v5_12f98, 0
  %v7_12f98 = icmp slt i32 %v2_12f98, 0
  store i1 %v6_12f98, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12f98, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12fa0

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12fa0.loopexit, %dec_label_pc_12f7c
  %v2_12e0c64 = phi i32 [ %v5_12f94, %dec_label_pc_12fa0.loopexit ], [ %v1_12f70, %dec_label_pc_12f7c ]
  %v0_12dfc60 = phi i32 [ %v2_12f98, %dec_label_pc_12fa0.loopexit ], [ %v2_12f80, %dec_label_pc_12f7c ]
  %v0_12fa0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12fa0 = add i32 %v0_12fa0, 1
  store i32 %v1_12fa0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_12f94, { 0, 2, 1 }
  uselistorder i32 %v3_12f88, { 1, 0 }
  uselistorder i32 %v2_12f80, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12f70, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12f50, { 1, 0 }
  uselistorder i32 %v3_12f4c, { 1, 0 }
  uselistorder i32 %v0_12f50, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12f70, { 3, 2, 1, 0 }
  uselistorder i32 %v5_12f28, { 0, 2, 1 }
  uselistorder i32 %v3_12f1c, { 1, 0 }
  uselistorder i32 %v2_12f14, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12f04, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12ee4, { 1, 0 }
  uselistorder i32 %v3_12ee0, { 1, 0 }
  uselistorder i32 %v0_12ee4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12f04, { 3, 2, 1, 0 }
  uselistorder i32 %v5_12ebc, { 0, 2, 1 }
  uselistorder i32 %v3_12eb0, { 1, 0 }
  uselistorder i32 %v2_12ea8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12e98, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12e78, { 1, 0 }
  uselistorder i32 %v3_12e74, { 1, 0 }
  uselistorder i32 %v0_12e78, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12e98, { 3, 2, 1, 0 }
  uselistorder i1 %v5_12f40, { 2, 0, 1 }
  uselistorder i32 %v0_12e58, { 1, 0 }
  uselistorder i32 %v0_12f44, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_12e9830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_12e48, { 2, 1, 0 }
  uselistorder i32 %v0_12e48, { 2, 0, 1 }
  uselistorder i32 %v2_12e40, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_12e40, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12e40, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_12e9831, { 2, 1, 0 }
  uselistorder i32 %v11_12e1c, { 1, 0 }
  uselistorder i32 %v7_12e1c, { 1, 0 }
  uselistorder i32 %v1_12dfc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_12dfc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12e00, { 1, 0 }
  uselistorder i32 %v7_12df4, { 0, 2, 1 }
  uselistorder i32 %v10_12df0, { 1, 0 }
  uselistorder i32 %v9_12de8, { 1, 0, 2 }
  uselistorder i32 %v6_12de4, { 1, 0 }
  uselistorder i32 %v2_12ddc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_12ddc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_12dec, { 0, 3, 2, 1 }
  uselistorder i32 %v7_12dd0, { 0, 2, 1 }
  uselistorder i32 %v13_12dcc, { 1, 0 }
  uselistorder i32 %v4_12dc8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_12dc8, { 2, 0, 1 }
  uselistorder i32 %v6_12dd0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_12dc0, { 0, 2, 1 }
  uselistorder i32 %v16_12dbc, { 1, 0 }
  uselistorder i32 %v4_12db8, { 1, 2, 0 }
  uselistorder i32 %v0_12dc8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_12dc0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_12dac, { 0, 3, 2, 1 }
  uselistorder i32 %v10_12da8, { 1, 0 }
  uselistorder i32 %v1_12da4, { 1, 0 }
  uselistorder i32 %v10_12da0, { 1, 0 }
  uselistorder i32 %v0_12da0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12da4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_12d98, { 0, 2, 1 }
  uselistorder i32 %v2_12d8c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_12d8c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_12da448, { 1, 2, 0 }
  uselistorder i32 %v1_12d84, { 2, 1, 0 }
  uselistorder i32 %v1_12d7c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_12d74, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_12d70, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_12d6c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_12d6c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_12d58, { 0, 2, 1 }
  uselistorder i32 %v3_12d4c, { 1, 0 }
  uselistorder i32 %v2_12d44, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12d34, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12d14, { 1, 0, 2 }
  uselistorder i32 %v5_12d14, { 1, 0, 2 }
  uselistorder i32 %v2_12d14, { 1, 0, 2 }
  uselistorder i32 %v3_12d10, { 1, 0 }
  uselistorder i32 %v0_12d14, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12d34, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_12cec, { 0, 2, 1 }
  uselistorder i32 %v3_12ce0, { 1, 0 }
  uselistorder i32 %v2_12cd8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12cc8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12ca8, { 1, 0, 2 }
  uselistorder i32 %v5_12ca8, { 1, 0, 2 }
  uselistorder i32 %v2_12ca8, { 1, 0, 2 }
  uselistorder i32 %v3_12ca4, { 1, 0 }
  uselistorder i32 %v0_12ca8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12cc8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_12c80, { 0, 2, 1 }
  uselistorder i32 %v3_12c74, { 1, 0 }
  uselistorder i32 %v2_12c6c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_12c5c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_12c3c, { 1, 0, 2 }
  uselistorder i32 %v5_12c3c, { 1, 0, 2 }
  uselistorder i32 %v2_12c3c, { 1, 0, 2 }
  uselistorder i32 %v3_12c38, { 1, 0 }
  uselistorder i32 %v0_12c3c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12c5c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_12d04, { 2, 0, 1 }
  uselistorder i32 %v0_12d08, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_12c5c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_12c0c, { 1, 0 }
  uselistorder i32 %v0_12c0c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_12c04, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_12c04, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12c04, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_12c5c75, { 2, 1, 0 }
  uselistorder i32 %v1_12be4, { 1, 0, 2 }
  uselistorder i32 %v1_12bbc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_12bbc, { 1, 2, 0, 3 }
  uselistorder i32 %v8_12ba8, { 1, 0, 2 }
  uselistorder i32 %v6_12ba4, { 1, 0 }
  uselistorder i32 %v2_12b9c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_12b9c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_12bac, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_12b94, { 0, 2, 1 }
  uselistorder i32 %v3_12b94, { 3, 0, 1, 2 }
  uselistorder i1 %v0_12b94, { 1, 0 }
  uselistorder i1 %v1_12b94, { 1, 0 }
  uselistorder i32 %v3_12b90, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_12b88, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_12b74, { 1, 2, 0 }
  uselistorder i32 %v12_12b68, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12b5c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12b60, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_12b50, { 0, 2, 1 }
  uselistorder i32 %v2_12b48, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_12b48, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_12b40, { 1, 0 }
  uselistorder i32 %v1_12b38, { 2, 1, 0 }
  uselistorder i32 %v2_12b30, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_12b30, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_12b20, { 1, 0 }
  uselistorder i32 %v1_12b20, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_12b20, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 66, 67, 69, 68, 70, 71, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 61, 31, 32, 33, 34, 35, 62, 36, 37, 38, 39, 40, 63, 41, 42, 43, 44, 45, 64, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 31, 29, 41, 30, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 43, 44, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 15, 16, 1, 0, 9, 11, 10, 12, 2, 13, 14, 6, 3, 7, 4, 5, 8 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 5, 6, 4, 16, 0, 8, 1, 9, 2, 3, 17, 18, 19, 7, 15, 14, 13, 12, 11, 10 }
  uselistorder i32 65536, { 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 55, 58, 57, 59, 60, 61, 62, 1, 63, 0, 2, 64, 65, 66, 67, 68, 71, 69, 70, 72, 73, 76, 77, 78, 74, 75, 3, 79, 81, 82, 80, 83, 84, 86, 87, 88, 85, 89, 90, 91, 92, 93, 94, 120, 96, 95, 121, 98, 97, 99, 101, 100, 103, 102, 104, 4, 105, 107, 108, 109, 106, 110, 5, 111, 115, 116, 117, 112, 113, 114, 119, 118 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, { 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 171, 172, 173, 175, 601, 602, 603, 604, 605, 0, 606, 607, 469, 470, 471, 472, 473, 474, 413, 414, 415, 416, 417, 418, 419, 420, 447, 448, 449, 450, 451, 452, 475, 476, 477, 484, 485, 486, 487, 478, 479, 480, 481, 482, 483, 113, 114, 115, 176, 177, 2, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 3, 129, 130, 131, 132, 133, 134, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 135, 136, 137, 138, 139, 140, 141, 142, 4, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 1, 161, 189, 190, 191, 192, 193, 12, 194, 195, 196, 197, 198, 199, 200, 201, 13, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 5, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 488, 489, 468, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 9, 527, 528, 529, 530, 531, 532, 533, 11, 534, 535, 6, 536, 537, 7, 538, 539, 8, 540, 541, 542, 543, 544, 545, 14, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 10, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 13, 14, 15, 18, 19, 4, 1, 5, 2, 6, 3, 0, 16, 7, 17, 20, 21, 22, 23, 24, 25, 8, 26, 27, 28, 9, 29, 30, 31, 10, 32, 33, 34, 35, 36, 37, 38, 39, 40, 11, 41, 42, 43, 12, 44 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 1, 8, 2, 0, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 6, 22, 4, 23, 7, 24 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 32, 33, 30, 31, 1, 34, 35, 27, 28, 12, 11, 13, 2, 36, 14, 37, 15, 3, 16, 17, 4, 18, 5, 6, 7, 19, 8, 38, 20, 39, 40, 41, 21, 22, 9, 42, 23, 43, 24, 44, 25, 45, 10, 29, 26, 46 }
  uselistorder i32* @lr, { 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 1, 114, 115, 116, 2, 117, 118, 119, 120, 121, 122, 123, 124, 18, 19, 125, 126, 54, 55, 56, 57, 62, 63, 64, 65, 20, 21, 22, 23, 24, 66, 67, 3, 4, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 13, 14, 15, 16, 17, 48, 49, 50, 51, 52, 5, 83, 6, 7, 8, 9, 10, 11, 12, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 84, 85, 86, 58, 59, 60, 61, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 }
  uselistorder i32 16, { 20, 21, 22, 142, 23, 143, 144, 24, 145, 146, 25, 147, 148, 149, 150, 151, 152, 68, 69, 59, 60, 73, 70, 71, 72, 74, 17, 75, 76, 4, 5, 6, 7, 8, 16, 9, 10, 0, 11, 12, 38, 62, 39, 61, 26, 40, 65, 27, 66, 30, 29, 28, 63, 31, 64, 32, 41, 42, 43, 44, 45, 46, 67, 47, 48, 77, 78, 49, 79, 80, 81, 34, 82, 33, 83, 84, 51, 85, 86, 87, 88, 89, 1, 50, 90, 91, 92, 53, 93, 94, 95, 96, 97, 2, 52, 98, 54, 99, 100, 101, 13, 102, 14, 103, 58, 15, 55, 56, 104, 105, 3, 36, 106, 35, 107, 108, 109, 110, 111, 112, 18, 113, 114, 115, 116, 118, 117, 119, 120, 121, 122, 123, 124, 125, 19, 126, 127, 128, 129, 130, 132, 131, 133, 134, 135, 57, 136, 37, 137, 138, 139, 140, 141 }
  uselistorder i32 20, { 76, 3, 77, 78, 0, 4, 79, 16, 17, 14, 15, 1, 18, 19, 20, 21, 22, 23, 24, 5, 25, 26, 27, 28, 29, 30, 31, 32, 33, 6, 34, 35, 36, 37, 38, 39, 40, 41, 7, 42, 43, 44, 2, 45, 46, 47, 48, 12, 49, 50, 51, 52, 53, 54, 55, 56, 9, 57, 8, 58, 59, 60, 61, 11, 62, 10, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 13, 75 }
  uselistorder i32 27, { 1, 0, 2 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 23, 24, 26, 49, 55, 11, 27, 2, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 30, 31, 3, 32, 4, 33, 5, 34, 35, 6, 36, 37, 7, 38, 39, 40, 41, 42, 8, 43, 44, 45, 46, 47, 9, 48, 50, 0, 21, 51, 1, 22, 52, 53, 25, 10, 54 }
  uselistorder i32 -8, { 14, 15, 16, 17, 18, 19, 13, 12, 5, 11, 10, 9, 8, 20, 21, 22, 23, 6, 24, 0, 27, 7, 25, 26, 4, 1, 2, 3 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4, 5, 48, 1, 0, 2, 3 }
  uselistorder i1 false, { 33, 34, 35, 67, 7, 32, 68, 69, 29, 30, 31, 70, 6, 71, 72, 0, 38, 37, 39, 36, 1, 2, 73, 74, 75, 3, 4, 76, 42, 77, 78, 43, 79, 12, 13, 14, 15, 44, 80, 81, 60, 82, 83, 84, 49, 85, 17, 18, 50, 86, 51, 87, 45, 46, 47, 16, 88, 48, 89, 90, 59, 91, 92, 93, 94, 95, 96, 52, 53, 97, 98, 54, 99, 55, 56, 100, 57, 101, 58, 102, 40, 41, 103, 104, 105, 106, 107, 108, 19, 20, 61, 109, 110, 62, 26, 111, 63, 9, 10, 21, 11, 22, 23, 24, 5, 25, 112, 27, 64, 65, 113, 8, 66, 114, 28, 115 }
  uselistorder i32 4, { 75, 66, 67, 5, 325, 68, 326, 54, 6, 7, 69, 327, 70, 328, 329, 330, 331, 71, 332, 333, 334, 335, 72, 336, 337, 338, 339, 340, 8, 341, 342, 343, 344, 345, 73, 346, 53, 347, 348, 349, 350, 351, 352, 9, 10, 74, 353, 178, 179, 157, 158, 180, 181, 182, 354, 355, 356, 357, 358, 116, 117, 118, 55, 119, 120, 287, 289, 288, 285, 286, 253, 254, 255, 256, 290, 291, 292, 293, 275, 276, 277, 294, 295, 121, 122, 123, 124, 125, 47, 11, 12, 183, 184, 185, 186, 187, 188, 13, 14, 63, 15, 16, 64, 296, 297, 155, 17, 18, 92, 76, 298, 299, 56, 169, 126, 171, 19, 172, 173, 170, 20, 174, 48, 93, 175, 176, 238, 159, 160, 161, 162, 163, 59, 58, 57, 164, 94, 165, 21, 22, 23, 24, 25, 26, 166, 49, 167, 50, 27, 28, 29, 168, 77, 95, 96, 127, 177, 0, 97, 189, 128, 190, 191, 129, 130, 192, 78, 193, 79, 194, 195, 196, 197, 98, 198, 80, 199, 200, 201, 131, 202, 203, 204, 205, 132, 133, 2, 206, 99, 207, 81, 208, 209, 210, 134, 211, 212, 135, 136, 3, 100, 213, 82, 214, 83, 215, 216, 137, 217, 218, 219, 220, 221, 138, 139, 222, 223, 102, 224, 4, 101, 225, 84, 226, 103, 227, 228, 229, 230, 231, 140, 232, 233, 234, 141, 142, 105, 235, 104, 85, 236, 86, 237, 239, 240, 241, 242, 243, 107, 244, 108, 245, 143, 246, 247, 248, 144, 145, 109, 249, 106, 250, 87, 251, 88, 252, 146, 257, 258, 30, 147, 259, 260, 31, 148, 261, 262, 32, 149, 263, 264, 33, 150, 265, 266, 34, 267, 151, 268, 269, 35, 152, 270, 271, 36, 153, 272, 273, 37, 300, 274, 278, 279, 280, 38, 281, 282, 1, 283, 154, 284, 301, 302, 91, 303, 304, 65, 305, 110, 306, 307, 308, 309, 89, 310, 111, 311, 312, 313, 90, 314, 112, 315, 39, 40, 41, 316, 317, 62, 61, 60, 318, 42, 43, 44, 113, 319, 114, 320, 45, 46, 321, 51, 322, 52, 115, 323, 324, 156 }
  uselistorder i32* @r2, { 70, 71, 24, 9, 25, 27, 26, 28, 29, 30, 31, 8, 72, 2, 73, 78, 79, 82, 74, 41, 45, 46, 49, 47, 48, 42, 43, 44, 40, 11, 12, 0, 13, 14, 1, 80, 3, 81, 6, 32, 33, 34, 10, 75, 76, 77, 4, 50, 51, 52, 7, 53, 54, 55, 5, 56, 57, 58, 59, 60, 19, 20, 15, 16, 17, 18, 21, 22, 23, 35, 36, 37, 38, 39, 61, 62, 63, 64, 65, 66, 67, 68, 69 }
  uselistorder label %dec_label_pc_12f88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12f1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12eb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e50, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_12ddc, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_12da0, { 1, 0 }
  uselistorder label %dec_label_pc_12d8c, { 1, 0 }
  uselistorder label %dec_label_pc_12d4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12ce0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12c74, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12c14, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_12b88, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12b48, { 1, 0 }
}

define i32 @function_12fa8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fa8:
  ret i32 %arg1
}

define i32 @function_12fb0() local_unnamed_addr {
dec_label_pc_12fb0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_12fb0 = load i32, i32* @r0, align 4
  %v2_12fb0 = icmp eq i32 %v0_12fb0, 0
  %v3_12fb4 = load i32, i32* @r4, align 4
  store i32 %v3_12fb4, i32* %stack_var_-20, align 4
  %v0_12fb8 = load i32, i32* @r1, align 4
  br i1 %v2_12fb0, label %dec_label_pc_13090, label %dec_label_pc_12fcc.lr.ph

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12fcc.lr.ph, %dec_label_pc_13050
  %v1_13050 = phi i32 [ 0, %dec_label_pc_12fcc.lr.ph ], [ %v5_13050, %dec_label_pc_13050 ]
  %v0_13054 = phi i32 [ 1, %dec_label_pc_12fcc.lr.ph ], [ %v1_13054, %dec_label_pc_13050 ]
  %v0_12fd4 = phi i32 [ %v0_12fb0, %dec_label_pc_12fcc.lr.ph ], [ %v0_12fd425, %dec_label_pc_13050 ]
  %v1_12fd4 = inttoptr i32 %v0_12fd4 to i8*
  %v2_12fd4 = load i8, i8* %v1_12fd4, align 1
  %v3_12fd4 = zext i8 %v2_12fd4 to i32
  %v3_12fd8 = mul nuw nsw i32 %v3_12fd4, 2
  %v4_12fd8 = add i32 %v3_12fd8, %v2_12fd0.pre
  %v5_12fd8 = inttoptr i32 %v4_12fd8 to i8*
  %v6_12fd8 = load i8, i8* %v5_12fd8, align 1
  %v1_12fdc = and i8 %v6_12fd8, 8
  %v2_12fdc = icmp eq i8 %v1_12fdc, 0
  br i1 %v2_12fdc, label %dec_label_pc_13090, label %dec_label_pc_12fe4

dec_label_pc_12fe4:                               ; preds = %dec_label_pc_12fcc
  br label %dec_label_pc_13004

dec_label_pc_12fec:                               ; preds = %dec_label_pc_13004
  %v3_12ff0 = mul i32 %v0_13050, 10
  %v4_12ff0 = add i32 %v3_13004, %v3_12ff0
  %v1_12ff4 = add i32 %v4_12ff0, -48
  %v8_12ffc = icmp sgt i32 %v1_12ff4, 255
  br i1 %v8_12ffc, label %dec_label_pc_13090, label %dec_label_pc_13000

dec_label_pc_13000:                               ; preds = %dec_label_pc_12fec
  %v1_13000 = add i32 %v0_13040, 1
  store i32 %v1_13000, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13004

dec_label_pc_13004:                               ; preds = %dec_label_pc_12fe4, %dec_label_pc_13000
  %v0_13050 = phi i32 [ 0, %dec_label_pc_12fe4 ], [ %v1_12ff4, %dec_label_pc_13000 ]
  %v0_13040 = phi i32 [ %v0_12fd4, %dec_label_pc_12fe4 ], [ %v1_13000, %dec_label_pc_13000 ]
  %v1_13004 = inttoptr i32 %v0_13040 to i8*
  %v2_13004 = load i8, i8* %v1_13004, align 1
  %v3_13004 = zext i8 %v2_13004 to i32
  %v2_13008 = mul nuw nsw i32 %v3_13004, 2
  %v2_1300c = add i32 %v2_13008, %v2_12fd0.pre
  %v3_13010 = inttoptr i32 %v2_1300c to i8*
  %v4_13010 = load i8, i8* %v3_13010, align 1
  %v6_13010 = zext i8 %v4_13010 to i32
  %v1_1301c = and i32 %v6_13010, 8
  %v2_1301c = icmp eq i32 %v1_1301c, 0
  br i1 %v2_1301c, label %dec_label_pc_13024, label %dec_label_pc_12fec

dec_label_pc_13024:                               ; preds = %dec_label_pc_13004
  %v8_13028 = icmp sgt i32 %v0_13054, 3
  br i1 %v8_13028, label %dec_label_pc_1303c, label %dec_label_pc_1302c

dec_label_pc_1302c:                               ; preds = %dec_label_pc_13024
  %v7_1302c = icmp eq i8 %v2_13004, 46
  br i1 %v7_1302c, label %dec_label_pc_13034, label %dec_label_pc_13090

dec_label_pc_13034:                               ; preds = %dec_label_pc_1302c
  %v1_13034 = add i32 %v0_13040, 1
  store i32 %v1_13034, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13050

dec_label_pc_1303c:                               ; preds = %dec_label_pc_13024
  %v2_1303c = icmp eq i8 %v2_13004, 0
  %v1_13040 = add i32 %v0_13040, 1
  store i32 %v1_13040, i32* %r0.global-to-local, align 4
  br i1 %v2_1303c, label %dec_label_pc_13050, label %dec_label_pc_13048

dec_label_pc_13048:                               ; preds = %dec_label_pc_1303c
  %v1_13048 = and i32 %v6_13010, 32
  %v2_13048 = icmp eq i32 %v1_13048, 0
  br i1 %v2_13048, label %dec_label_pc_13090, label %dec_label_pc_13050

dec_label_pc_13050:                               ; preds = %dec_label_pc_13048, %dec_label_pc_1303c, %dec_label_pc_13034
  %v0_12fd425 = phi i32 [ %v1_13040, %dec_label_pc_13048 ], [ %v1_13040, %dec_label_pc_1303c ], [ %v1_13034, %dec_label_pc_13034 ]
  %v4_13050 = mul i32 %v1_13050, 256
  %v5_13050 = or i32 %v0_13050, %v4_13050
  %v1_13054 = add nuw nsw i32 %v0_13054, 1
  %v7_1305c = icmp slt i32 %v1_13054, 5
  br i1 %v7_1305c, label %dec_label_pc_12fcc, label %dec_label_pc_13060

dec_label_pc_12fcc.lr.ph:                         ; preds = %dec_label_pc_12fb0
  %v2_12fd0.pre = load i32, i32* bitcast (i32** @global_var_1bc38.477 to i32*), align 4
  br label %dec_label_pc_12fcc

dec_label_pc_13060:                               ; preds = %dec_label_pc_13050
  %v2_13060 = icmp eq i32 %v0_12fb8, 0
  br i1 %v2_13060, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_13060
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_13060
  %v2_13068 = and i32 %v5_13050, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v2_13064 = udiv i32 %v5_13050, 256
  %v4_1306c = and i32 %v2_13064, 65280
  %v4_13070 = mul i32 %v2_13068, 256
  %v5_13074 = udiv i32 %v5_13050, 16777216
  %v6_13074 = or i32 %v4_1306c, %v5_13074
  %v5_13078 = mul i32 %v0_13050, 16777216
  %v6_13078 = or i32 %v4_13070, %v5_13078
  %v3_1307c = or i32 %v6_13074, %v6_13078
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_13088 = inttoptr i32 %v0_12fb8 to i32*
  store i32 %v3_1307c, i32* %v3_13088, align 4
  %v2_1308c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_1308c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_1308c = phi i32 [ 1, %bb ], [ %v17_1308c.pre, %bb40 ]
  %v2_1308c = phi i32 [ %v3_12fb4, %bb ], [ %v2_1308c.pre, %bb40 ]
  store i32 %v2_1308c, i32* @r4, align 4
  ret i32 %v17_1308c

dec_label_pc_13090:                               ; preds = %dec_label_pc_1302c, %dec_label_pc_13048, %dec_label_pc_12fcc, %dec_label_pc_12fec, %dec_label_pc_12fb0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12fb4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_12fd0.pre, { 1, 0 }
  uselistorder i32 %v1_13054, { 1, 0 }
  uselistorder i32 %v0_13040, { 0, 1, 3, 2 }
  uselistorder i32 %v3_12fb4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 49, 48, 50, 52, 51, 56, 53, 57, 54, 58, 55, 59, 61, 60, 62, 63, 65, 64, 66, 70, 67, 71, 68, 72, 69, 74, 73, 75, 77, 76, 82, 78, 83, 84, 79, 85, 80, 86, 81, 87, 90, 91, 92, 88, 93, 89, 94, 96, 95, 100, 97, 101, 98, 99, 102, 104, 103, 111, 105, 112, 113, 106, 114, 109, 115, 107, 116, 117, 108, 110, 118, 120, 119, 124, 121, 125, 126, 122, 123, 127, 128, 129, 131, 130, 134, 132, 135, 133, 136, 138, 139, 137, 140 }
  uselistorder i32 65280, { 0, 1, 2, 16, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 18, 12, 19, 20, 21, 13, 22, 23, 24, 14, 25, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.24 to i32), { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 0, 14 }
  uselistorder i32 5, { 10, 17, 18, 11, 3, 2, 0, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 4, 25, 26, 27, 5, 28, 29, 30, 6, 31, 32, 33, 34, 7, 35, 36, 37, 38, 39, 40, 41, 8, 42, 43, 44, 45, 46, 47, 48, 9, 49, 50, 51, 1, 52, 53, 16, 54 }
  uselistorder i32 256, {}
  uselistorder i32 32, { 64, 46, 47, 44, 59, 60, 55, 56, 58, 4, 3, 6, 5, 8, 7, 45, 43, 65, 66, 49, 48, 10, 9, 11, 12, 13, 15, 14, 16, 18, 17, 20, 19, 21, 22, 24, 23, 50, 57, 61, 62, 25, 63, 26, 0, 27, 1, 2, 28, 29, 30, 31, 32, 34, 33, 51, 67, 52, 68, 53, 69, 36, 35, 38, 37, 39, 40, 41, 42, 54 }
  uselistorder i32 3, { 27, 43, 44, 121, 45, 46, 47, 48, 49, 50, 63, 69, 122, 3, 113, 116, 117, 0, 51, 16, 52, 17, 118, 58, 28, 18, 66, 29, 67, 68, 19, 64, 30, 65, 31, 32, 33, 34, 1, 70, 71, 72, 73, 74, 75, 5, 4, 35, 20, 76, 77, 78, 79, 80, 81, 82, 83, 7, 6, 36, 84, 21, 85, 86, 87, 88, 89, 9, 8, 37, 90, 22, 91, 92, 93, 94, 38, 95, 11, 10, 24, 96, 23, 97, 98, 99, 100, 101, 102, 13, 12, 39, 103, 25, 104, 105, 106, 107, 108, 109, 110, 15, 14, 40, 111, 26, 112, 114, 2, 115, 119, 53, 59, 54, 60, 55, 61, 56, 62, 41, 120, 42, 57 }
  uselistorder i32 8, { 111, 135, 28, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 29, 152, 63, 64, 65, 66, 70, 67, 68, 69, 153, 121, 120, 118, 119, 100, 101, 102, 122, 123, 124, 112, 113, 114, 6, 32, 33, 30, 31, 17, 18, 26, 27, 34, 154, 71, 72, 73, 74, 7, 8, 56, 21, 9, 10, 16, 11, 47, 35, 48, 36, 49, 37, 12, 13, 14, 60, 61, 50, 62, 15, 75, 76, 77, 78, 3, 79, 80, 81, 4, 82, 83, 84, 85, 86, 87, 88, 5, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 38, 103, 39, 104, 40, 105, 41, 106, 42, 107, 43, 108, 44, 109, 51, 110, 0, 1, 54, 115, 116, 52, 117, 2, 19, 22, 23, 125, 20, 24, 25, 126, 53, 57, 58, 127, 128, 130, 129, 131, 132, 45, 133, 55, 59, 46, 134 }
  uselistorder i32 255, { 0, 11, 3, 13, 4, 14, 1, 15, 2, 16, 7, 17, 8, 18, 5, 19, 6, 20, 10, 12, 9, 21 }
  uselistorder i32 10, { 10, 34, 35, 0, 2, 3, 24, 25, 56, 1, 11, 28, 6, 31, 12, 29, 4, 30, 13, 14, 15, 16, 32, 17, 33, 7, 36, 37, 38, 39, 40, 41, 42, 43, 18, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 8, 57, 55, 58, 5, 22, 26, 59, 20, 60, 23, 27, 9, 61, 19, 62, 21 }
  uselistorder i8 0, { 7, 0, 1, 24, 25, 2, 11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 8, 37, 38, 39, 40, 43, 45, 42, 18, 44, 19, 46, 47, 41, 3, 48, 49, 50, 5, 6, 4, 51, 52, 21, 13, 12, 53, 54, 57, 22, 55, 56, 20, 58, 59, 60, 61, 62, 14, 15, 63, 64, 65, 67, 68, 10, 71, 17, 77, 72, 73, 69, 70, 16, 23, 74, 75, 76, 9, 78, 79, 66, 80 }
  uselistorder i32 2, { 4, 121, 213, 214, 57, 215, 216, 48, 217, 47, 218, 46, 126, 65, 66, 198, 67, 199, 68, 200, 5, 122, 219, 53, 69, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 124, 15, 16, 17, 18, 19, 71, 72, 70, 49, 50, 60, 127, 61, 140, 141, 20, 73, 74, 75, 142, 143, 76, 184, 123, 125, 128, 78, 129, 81, 130, 80, 131, 77, 82, 132, 21, 22, 23, 83, 79, 133, 84, 85, 86, 134, 135, 24, 45, 136, 137, 87, 138, 88, 139, 58, 90, 91, 89, 92, 144, 51, 56, 145, 146, 147, 185, 186, 148, 149, 150, 151, 94, 93, 152, 153, 95, 96, 62, 97, 154, 155, 156, 157, 158, 159, 160, 1, 25, 26, 27, 28, 29, 30, 98, 161, 63, 162, 163, 164, 165, 166, 2, 31, 32, 33, 34, 35, 36, 100, 99, 167, 168, 37, 169, 170, 54, 171, 102, 172, 3, 38, 39, 40, 41, 42, 103, 173, 101, 174, 175, 176, 177, 178, 179, 180, 181, 105, 182, 104, 183, 187, 188, 189, 107, 190, 108, 191, 192, 193, 194, 109, 195, 106, 196, 110, 59, 197, 52, 111, 201, 202, 64, 203, 118, 204, 112, 205, 113, 114, 206, 115, 207, 116, 208, 117, 209, 55, 210, 43, 44, 211, 119, 212, 120 }
  uselistorder i32* @r1, { 37, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 1, 99, 100, 12, 13, 15, 14, 5, 6, 101, 0, 102, 39, 40, 10, 104, 41, 46, 47, 50, 48, 49, 42, 43, 44, 45, 36, 51, 103, 7, 4, 38, 16, 52, 53, 3, 54, 55, 56, 31, 8, 9, 11, 17, 18, 32, 33, 2, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81 }
  uselistorder label %dec_label_pc_13090, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_13004, { 1, 0 }
}

define i32 @function_1309c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1309c:
  %v1_1309c = add i32 %arg1, 28
  %v2_1309c = inttoptr i32 %v1_1309c to i32*
  %v3_1309c = load i32, i32* %v2_1309c, align 4
  %v1_130a4 = add i32 %arg1, 44
  %v2_130a4 = inttoptr i32 %v1_130a4 to i32*
  %v3_130a4 = load i32, i32* %v2_130a4, align 4
  store i32 %v3_1309c, i32* @global_var_1bf10.531, align 4
  store i32 %v3_130a4, i32* @global_var_1bf14.533, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 9, 0, 5, 6, 2, 3, 8, 1, 4, 7 }
}

define i32 @function_130c0(i32* %arg1) local_unnamed_addr {
dec_label_pc_130c0:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_130c8 = call i32 @brk(i32* %arg1)
  %v3_130cc = icmp ult i32 %v2_130c8, %tmp
  store i32 %v2_130c8, i32* @global_var_1bcb8.528, align 4
  br i1 %v3_130cc, label %dec_label_pc_130e0, label %dec_label_pc_130f0

dec_label_pc_130e0:                               ; preds = %dec_label_pc_130c0
  %v0_130e0 = call i32 @function_10e98()
  %v2_130e8 = inttoptr i32 %v0_130e0 to i32*
  store i32 12, i32* %v2_130e8, align 4
  br label %dec_label_pc_130f0

dec_label_pc_130f0:                               ; preds = %dec_label_pc_130c0, %dec_label_pc_130e0
  %v0_130f0 = phi i32 [ 0, %dec_label_pc_130c0 ], [ -1, %dec_label_pc_130e0 ]
  ret i32 %v0_130f0

; uselistorder directives
  uselistorder i32 12, { 15, 10, 85, 86, 87, 89, 90, 91, 92, 11, 88, 93, 94, 95, 96, 97, 98, 99, 33, 34, 27, 28, 35, 16, 17, 70, 71, 72, 0, 67, 73, 8, 74, 9, 68, 4, 69, 18, 19, 6, 36, 37, 20, 38, 39, 12, 13, 7, 32, 29, 30, 5, 31, 21, 22, 23, 24, 62, 40, 41, 42, 43, 44, 45, 46, 25, 47, 48, 49, 50, 51, 26, 52, 53, 54, 55, 56, 57, 14, 58, 59, 60, 61, 63, 64, 65, 66, 1, 2, 3, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84 }
  uselistorder i32 ()* @function_10e98, { 29, 60, 28, 43, 11, 10, 9, 8, 42, 41, 40, 7, 61, 27, 26, 47, 46, 24, 25, 59, 58, 23, 22, 33, 21, 14, 20, 45, 19, 57, 18, 34, 56, 39, 38, 37, 55, 44, 17, 4, 3, 54, 16, 36, 35, 53, 2, 6, 52, 31, 5, 30, 15, 51, 1, 0, 50, 49, 48, 32, 13, 12 }
  uselistorder i32* @global_var_1bcb8.528, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_130f0, { 1, 0 }
}

define i32 @function_130fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_130fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13100 = load i32, i32* @global_var_1bac4.490, align 4
  %v7_13104 = icmp eq i32 %v3_13100, -1
  %v3_13108 = load i32, i32* @r4, align 4
  store i32 %v3_13108, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1bac4.490 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_13104, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_130fc
  store i32 %v3_13108, i32* %r4.global-to-local, align 4
  %v9_13110 = load i32, i32* @r0, align 4
  ret i32 %v9_13110

.preheader:                                       ; preds = %dec_label_pc_130fc, %.preheader
  %v0_13118 = phi i32 [ %v3_1311c, %.preheader ], [ %v3_13100, %dec_label_pc_130fc ]
  call void @__pseudo_branch(i32 %v0_13118)
  %v0_1311c = load i32, i32* %r4.global-to-local, align 4
  %v1_1311c = add i32 %v0_1311c, -4
  %v2_1311c = inttoptr i32 %v1_1311c to i32*
  %v3_1311c = load i32, i32* %v2_1311c, align 4
  store i32 %v1_1311c, i32* %r4.global-to-local, align 4
  %v3_13120 = icmp eq i32 %v3_1311c, -1
  br i1 %v3_13120, label %dec_label_pc_13128, label %.preheader

dec_label_pc_13128:                               ; preds = %.preheader
  %v2_13128 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13128, i32* %r4.global-to-local, align 4
  %v8_13128 = load i32, i32* @r0, align 4
  ret i32 %v8_13128

; uselistorder directives
  uselistorder i32 %v3_1311c, { 1, 0 }
  uselistorder i32 %v3_13100, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 16, 55, 56, 57, 3, 17, 18, 19, 58, 59, 60, 4, 20, 21, 22, 61, 62, 63, 5, 23, 24, 64, 15, 14, 65, 66, 67, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 68, 9, 32, 42, 43, 49, 44, 33, 34, 45, 46, 47, 48, 50, 8, 7, 6, 35, 36, 37, 38, 51, 39, 40, 52, 53, 41 }
  uselistorder i32 -1, { 145, 0, 74, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 146, 75, 220, 76, 252, 77, 253, 240, 78, 291, 79, 292, 80, 293, 81, 294, 125, 72, 241, 242, 82, 243, 244, 83, 295, 1, 147, 2, 84, 254, 255, 148, 149, 236, 237, 126, 150, 127, 151, 3, 4, 71, 64, 65, 152, 153, 154, 69, 221, 155, 222, 5, 6, 85, 256, 86, 257, 87, 249, 88, 258, 89, 248, 90, 259, 91, 238, 92, 260, 93, 223, 94, 261, 95, 247, 96, 224, 97, 144, 98, 156, 99, 225, 100, 239, 101, 262, 102, 298, 299, 103, 226, 104, 263, 105, 245, 106, 246, 107, 227, 108, 300, 109, 296, 110, 228, 111, 250, 112, 297, 113, 251, 114, 264, 115, 229, 116, 301, 73, 302, 157, 158, 159, 160, 161, 162, 163, 164, 7, 8, 9, 10, 11, 117, 118, 12, 165, 166, 167, 70, 13, 14, 15, 16, 17, 119, 168, 230, 169, 231, 128, 232, 130, 233, 18, 129, 234, 19, 20, 21, 22, 131, 235, 23, 24, 25, 26, 27, 170, 66, 28, 29, 30, 171, 172, 173, 174, 31, 121, 122, 123, 124, 32, 33, 34, 175, 35, 36, 37, 38, 67, 39, 40, 41, 42, 43, 120, 44, 45, 46, 47, 176, 48, 49, 50, 177, 51, 52, 53, 54, 55, 56, 57, 178, 58, 59, 60, 179, 61, 62, 180, 181, 182, 183, 63, 68, 265, 266, 137, 267, 135, 268, 136, 269, 133, 270, 184, 185, 186, 187, 188, 138, 271, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 132, 272, 139, 273, 215, 216, 217, 218, 219, 134, 274, 140, 275, 141, 142, 143 }
  uselistorder i32* @global_var_1bac4.490, { 1, 0 }
  uselistorder i32 1, { 503, 164, 329, 383, 808, 809, 810, 811, 812, 350, 504, 275, 933, 333, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 507, 506, 505, 281, 283, 287, 291, 286, 285, 282, 284, 288, 290, 289, 508, 51, 50, 46, 48, 47, 49, 52, 45, 667, 56, 53, 55, 54, 509, 43, 510, 180, 181, 511, 44, 178, 512, 280, 513, 148, 514, 299, 515, 279, 732, 733, 516, 296, 292, 297, 293, 294, 298, 295, 734, 735, 736, 427, 185, 186, 182, 184, 183, 517, 305, 518, 195, 0, 522, 521, 520, 519, 176, 175, 428, 523, 81, 82, 351, 429, 524, 83, 525, 827, 530, 529, 528, 527, 526, 129, 130, 131, 132, 430, 531, 330, 721, 325, 722, 352, 532, 35, 41, 34, 38, 37, 40, 42, 36, 39, 946, 353, 535, 534, 533, 277, 276, 536, 145, 146, 144, 147, 86, 87, 88, 89, 537, 238, 239, 237, 236, 235, 538, 539, 304, 303, 540, 354, 828, 541, 162, 163, 431, 432, 328, 545, 544, 543, 542, 177, 334, 546, 208, 547, 193, 115, 548, 194, 549, 149, 550, 209, 551, 153, 552, 134, 553, 206, 554, 207, 555, 150, 556, 151, 557, 668, 669, 670, 671, 672, 673, 674, 947, 23, 24, 20, 21, 22, 558, 433, 434, 559, 17, 16, 18, 15, 392, 737, 560, 214, 393, 562, 561, 113, 112, 563, 19, 564, 13, 565, 14, 566, 9, 10, 567, 192, 568, 133, 569, 57, 570, 58, 571, 114, 69, 572, 179, 152, 573, 278, 574, 301, 575, 302, 576, 143, 577, 59, 300, 116, 394, 829, 830, 395, 831, 832, 309, 833, 834, 835, 836, 326, 837, 580, 579, 578, 60, 68, 62, 63, 65, 64, 61, 66, 67, 1, 838, 839, 840, 841, 85, 84, 2, 842, 843, 844, 845, 335, 846, 847, 336, 848, 582, 581, 155, 154, 738, 739, 740, 435, 583, 93, 92, 91, 90, 849, 355, 356, 3, 426, 850, 584, 72, 70, 73, 74, 71, 851, 853, 852, 436, 854, 213, 212, 814, 210, 855, 856, 857, 11, 12, 858, 234, 232, 233, 231, 859, 860, 585, 127, 126, 125, 124, 128, 861, 862, 586, 160, 159, 158, 157, 161, 691, 692, 693, 694, 695, 696, 697, 310, 320, 698, 699, 357, 311, 700, 701, 702, 703, 312, 319, 704, 705, 358, 313, 706, 437, 708, 709, 438, 710, 707, 711, 389, 712, 337, 715, 716, 713, 714, 315, 314, 316, 717, 439, 718, 593, 592, 498, 591, 590, 589, 497, 588, 587, 95, 97, 94, 101, 99, 104, 100, 96, 103, 98, 102, 594, 211, 794, 338, 793, 384, 595, 29, 30, 28, 27, 26, 32, 33, 25, 31, 675, 676, 677, 440, 597, 596, 246, 248, 253, 243, 245, 241, 247, 242, 240, 254, 244, 249, 250, 252, 251, 400, 678, 679, 396, 680, 681, 441, 682, 443, 442, 683, 444, 684, 685, 445, 686, 446, 687, 447, 448, 449, 450, 451, 688, 399, 398, 397, 689, 452, 690, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 499, 599, 598, 75, 76, 80, 78, 79, 77, 719, 614, 455, 454, 453, 720, 616, 615, 456, 723, 368, 724, 367, 725, 366, 726, 365, 727, 728, 457, 374, 359, 729, 458, 730, 459, 731, 327, 460, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 259, 262, 260, 261, 746, 5, 741, 461, 742, 4, 743, 385, 744, 331, 332, 745, 747, 386, 748, 634, 633, 632, 500, 501, 631, 795, 401, 796, 402, 797, 6, 798, 7, 8, 749, 750, 751, 752, 753, 462, 339, 463, 636, 635, 271, 267, 263, 264, 269, 270, 268, 265, 266, 754, 390, 318, 755, 464, 757, 756, 317, 465, 404, 403, 502, 637, 273, 272, 758, 759, 760, 761, 762, 763, 466, 764, 340, 467, 468, 765, 405, 766, 638, 198, 196, 197, 202, 203, 205, 204, 200, 201, 199, 767, 768, 369, 769, 770, 771, 469, 772, 341, 470, 407, 406, 471, 773, 472, 774, 639, 189, 190, 191, 188, 187, 775, 776, 370, 777, 778, 779, 473, 780, 342, 474, 412, 411, 475, 781, 408, 782, 409, 783, 410, 784, 644, 643, 642, 641, 640, 122, 121, 119, 123, 117, 120, 118, 785, 786, 787, 371, 788, 789, 790, 343, 476, 415, 414, 477, 791, 413, 792, 645, 137, 136, 139, 140, 142, 141, 135, 138, 799, 800, 801, 372, 802, 803, 804, 344, 478, 418, 417, 479, 805, 416, 806, 650, 649, 648, 647, 646, 168, 167, 166, 171, 172, 174, 173, 165, 170, 169, 807, 480, 651, 256, 258, 257, 255, 863, 156, 813, 274, 815, 481, 818, 482, 819, 820, 816, 817, 821, 822, 823, 824, 345, 825, 346, 106, 109, 111, 107, 108, 110, 826, 483, 864, 105, 865, 321, 487, 375, 376, 866, 322, 485, 377, 378, 486, 867, 360, 868, 373, 869, 323, 379, 490, 380, 388, 324, 488, 381, 382, 489, 870, 361, 871, 872, 425, 873, 874, 875, 420, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 421, 888, 889, 890, 891, 892, 348, 893, 491, 894, 492, 493, 895, 896, 897, 898, 899, 422, 900, 901, 902, 362, 903, 423, 904, 905, 906, 363, 907, 424, 908, 909, 910, 364, 911, 912, 913, 914, 349, 915, 916, 917, 347, 484, 419, 918, 920, 922, 921, 919, 494, 923, 924, 925, 495, 926, 927, 928, 929, 666, 391, 930, 931, 387, 496, 932, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 218, 217, 215, 216, 228, 230, 225, 226, 229, 220, 227, 219, 221, 223, 222, 224, 664, 665, 308, 307, 306 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13130() local_unnamed_addr {
dec_label_pc_13130:
  %v5_13134 = load i32, i32* @r0, align 4
  ret i32 %v5_13134

; uselistorder directives
  uselistorder i32* @r0, { 2, 7, 8, 91, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 54, 55, 57, 56, 24, 184, 185, 31, 32, 33, 34, 14, 4, 11, 12, 100, 101, 25, 186, 187, 44, 189, 6, 18, 103, 19, 102, 89, 28, 90, 9, 93, 104, 188, 35, 13, 58, 59, 60, 61, 26, 16, 62, 63, 64, 65, 15, 190, 17, 5, 105, 10, 106, 20, 107, 108, 21, 109, 110, 111, 112, 0, 42, 43, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 29, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 27, 78, 85, 86, 1, 79, 80, 81, 82, 83, 84, 87, 88, 92, 94, 95, 96, 97, 98, 113, 99, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 3, 22, 23, 30 }
}

define i32 @function_13138() local_unnamed_addr {
entry:
  %v3_1313c = load i32, i32* @r4, align 4
  %v0_13144 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_1313c)
  ret i32 %v0_13144

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 8, 13, 14, 10, 11, 12, 15, 5, 6, 7, 2, 3, 4, 1, 9 }
  uselistorder i32 0, { 126, 0, 808, 809, 810, 811, 128, 127, 812, 1210, 1211, 1212, 1213, 1214, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1215, 1216, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 36, 1235, 1236, 1237, 1238, 1239, 37, 1240, 1241, 1242, 38, 1243, 1244, 1245, 39, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1261, 1262, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 40, 1281, 1282, 1283, 1284, 1285, 41, 1286, 1287, 1288, 1289, 1290, 42, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 663, 664, 275, 665, 276, 583, 840, 841, 842, 843, 844, 666, 667, 1304, 1305, 1306, 1307, 277, 668, 1, 669, 670, 671, 1308, 1309, 1310, 129, 1311, 92, 1312, 90, 91, 1313, 1314, 1315, 278, 1319, 279, 1332, 1334, 536, 222, 1335, 280, 1333, 281, 282, 2, 1316, 1317, 130, 845, 238, 846, 285, 240, 239, 847, 848, 849, 850, 284, 852, 853, 283, 854, 1318, 641, 642, 643, 644, 645, 646, 132, 108, 647, 93, 131, 133, 287, 1320, 288, 241, 1321, 1324, 1326, 1327, 286, 857, 859, 860, 72, 223, 861, 858, 855, 856, 3, 800, 803, 801, 802, 224, 4, 864, 862, 863, 225, 134, 804, 805, 806, 807, 816, 817, 289, 5, 818, 6, 871, 872, 135, 865, 866, 867, 868, 869, 870, 7, 8, 851, 584, 585, 586, 290, 9, 291, 873, 874, 531, 787, 532, 875, 753, 876, 648, 877, 587, 878, 713, 588, 813, 1336, 1337, 84, 672, 292, 673, 674, 675, 676, 293, 677, 678, 679, 680, 681, 682, 683, 589, 649, 879, 1325, 590, 880, 684, 685, 591, 533, 1328, 96, 1329, 1322, 592, 832, 1323, 833, 881, 593, 1330, 1331, 10, 882, 109, 883, 884, 219, 218, 537, 97, 98, 99, 100, 560, 538, 74, 73, 110, 885, 886, 887, 888, 890, 889, 11, 891, 892, 221, 220, 539, 101, 102, 103, 104, 561, 540, 76, 75, 71, 82, 893, 562, 894, 895, 896, 105, 897, 898, 899, 900, 901, 136, 541, 563, 542, 543, 902, 564, 117, 137, 903, 904, 106, 905, 906, 12, 565, 226, 14, 13, 138, 907, 139, 566, 15, 227, 140, 141, 266, 77, 142, 294, 594, 94, 686, 687, 909, 908, 910, 911, 43, 143, 912, 146, 145, 144, 267, 268, 269, 148, 147, 149, 295, 913, 914, 150, 819, 820, 118, 151, 915, 152, 582, 153, 916, 917, 154, 918, 919, 621, 622, 623, 89, 78, 624, 88, 79, 625, 626, 627, 628, 629, 630, 296, 631, 632, 634, 155, 633, 85, 635, 17, 16, 636, 595, 596, 599, 600, 597, 598, 601, 602, 603, 604, 156, 605, 606, 607, 608, 609, 610, 611, 612, 613, 242, 298, 614, 86, 299, 615, 303, 304, 18, 616, 617, 158, 157, 300, 618, 619, 620, 69, 70, 305, 306, 301, 297, 302, 637, 638, 639, 640, 307, 270, 162, 161, 567, 271, 164, 163, 568, 272, 166, 165, 569, 273, 168, 167, 570, 571, 274, 160, 159, 229, 236, 230, 231, 232, 308, 650, 169, 170, 659, 651, 652, 653, 654, 655, 656, 657, 658, 228, 660, 661, 80, 662, 171, 172, 309, 95, 688, 689, 690, 691, 235, 692, 693, 694, 234, 695, 696, 697, 698, 113, 699, 701, 700, 111, 112, 173, 233, 311, 312, 310, 702, 245, 243, 244, 114, 174, 83, 175, 703, 704, 121, 119, 120, 19, 705, 706, 707, 708, 176, 709, 710, 247, 246, 711, 313, 712, 181, 315, 179, 180, 177, 178, 714, 183, 182, 715, 184, 314, 717, 718, 125, 122, 123, 124, 20, 716, 719, 720, 721, 722, 723, 724, 21, 22, 23, 24, 25, 725, 726, 316, 249, 727, 317, 728, 318, 729, 319, 730, 320, 731, 321, 732, 322, 733, 248, 734, 185, 186, 187, 736, 737, 735, 739, 740, 738, 26, 27, 28, 29, 30, 741, 188, 742, 743, 251, 744, 323, 745, 324, 746, 325, 747, 326, 748, 327, 749, 328, 750, 250, 751, 329, 752, 190, 189, 191, 755, 756, 754, 757, 758, 81, 760, 761, 762, 763, 330, 764, 31, 32, 33, 34, 35, 759, 192, 115, 765, 766, 256, 767, 255, 768, 254, 769, 252, 770, 253, 771, 331, 772, 332, 773, 193, 196, 195, 194, 776, 777, 775, 774, 333, 779, 778, 780, 197, 781, 782, 259, 783, 258, 784, 257, 785, 334, 786, 198, 201, 200, 199, 790, 791, 789, 788, 793, 792, 794, 795, 202, 262, 796, 261, 797, 260, 798, 335, 799, 920, 203, 921, 814, 204, 815, 821, 205, 822, 823, 824, 206, 336, 825, 826, 44, 827, 828, 829, 830, 831, 337, 834, 207, 922, 835, 836, 837, 838, 923, 924, 839, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 338, 938, 544, 545, 546, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 45, 980, 981, 982, 208, 209, 983, 339, 984, 985, 986, 987, 547, 572, 988, 989, 990, 46, 991, 992, 993, 994, 47, 995, 996, 997, 998, 999, 1000, 1001, 48, 1002, 1003, 214, 1004, 1005, 1006, 1007, 1008, 1009, 49, 1010, 1011, 1012, 50, 1013, 1014, 1015, 51, 1016, 1017, 1018, 1019, 342, 1033, 1034, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 548, 573, 1029, 1030, 1031, 1032, 549, 574, 1035, 1036, 1037, 52, 1038, 1039, 343, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 550, 575, 1048, 1049, 1050, 53, 1051, 1052, 1053, 1054, 54, 1055, 551, 1056, 1057, 1060, 1061, 552, 210, 1058, 1059, 211, 212, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 553, 576, 1073, 1074, 1075, 55, 1076, 1077, 1078, 1079, 1080, 1081, 56, 1082, 116, 1083, 1084, 1085, 1086, 554, 577, 1087, 1088, 1089, 57, 1090, 213, 1091, 1092, 1093, 58, 1094, 1095, 1096, 1097, 1098, 555, 578, 1099, 1100, 1101, 59, 1102, 1103, 1104, 60, 340, 341, 1105, 1106, 1107, 1108, 1109, 556, 579, 1110, 1111, 1112, 61, 1113, 1114, 1115, 62, 1116, 1117, 1118, 63, 1119, 1120, 1121, 64, 1122, 1123, 1124, 1125, 65, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1138, 1139, 557, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 237, 1151, 1154, 1155, 1158, 1159, 1160, 66, 1156, 1157, 1152, 1153, 1161, 1162, 216, 215, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 67, 217, 1173, 1174, 1175, 68, 1176, 1177, 1178, 1179, 1181, 87, 344, 1182, 1180, 1136, 1137, 107, 534, 535, 1183, 1184, 1185, 558, 559, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 263, 1206, 264, 1207, 265, 1208, 1209, 580, 581, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352 }
  uselistorder i32* @r4, { 39, 609, 436, 437, 438, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 158, 41, 465, 466, 467, 627, 628, 629, 630, 631, 632, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 633, 634, 3, 635, 636, 637, 638, 660, 661, 662, 663, 37, 664, 29, 655, 656, 657, 658, 659, 639, 640, 641, 468, 469, 470, 471, 472, 473, 474, 475, 642, 643, 128, 129, 654, 476, 477, 478, 418, 4, 419, 420, 421, 5, 422, 6, 423, 424, 442, 7, 8, 443, 444, 445, 446, 447, 448, 479, 9, 487, 488, 480, 481, 482, 483, 484, 485, 486, 42, 43, 44, 45, 46, 47, 646, 647, 650, 651, 489, 490, 491, 492, 493, 494, 323, 324, 495, 496, 130, 131, 497, 498, 48, 49, 499, 500, 238, 239, 50, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 51, 52, 132, 133, 501, 502, 652, 653, 2, 53, 54, 503, 504, 195, 196, 197, 198, 55, 56, 644, 645, 459, 460, 648, 649, 461, 462, 505, 506, 57, 58, 507, 508, 59, 60, 61, 62, 199, 200, 201, 202, 203, 509, 510, 511, 40, 512, 513, 514, 515, 516, 517, 93, 94, 95, 96, 97, 98, 99, 100, 10, 101, 102, 103, 104, 105, 106, 107, 108, 0, 109, 110, 111, 112, 113, 114, 394, 395, 396, 397, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 11, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 12, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 30, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 204, 205, 206, 1, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 13, 256, 14, 257, 15, 258, 16, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 17, 283, 18, 284, 19, 285, 20, 286, 287, 288, 289, 290, 21, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 22, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 23, 375, 24, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 398, 25, 399, 26, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 518, 519, 520, 439, 440, 441, 449, 452, 450, 451, 453, 454, 455, 456, 457, 458, 463, 464, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 31, 552, 553, 36, 554, 28, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 35, 27, 567, 568, 569, 570, 571, 572, 573, 34, 574, 575, 576, 33, 577, 578, 579, 32, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 38, 610 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
