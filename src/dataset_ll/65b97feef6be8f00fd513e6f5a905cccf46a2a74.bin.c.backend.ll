source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1c00c.5 = global i32 0
@global_var_1c01c.6 = global i32* @global_var_1c00c.5
@global_var_1c178.12 = global i32 0
@global_var_de54.18 = constant i32 -382906384
@global_var_1c194.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_ff00.25 = constant i32 -476053494
@global_var_11d28.26 = constant i32 -481296384
@global_var_a4c4.32 = constant i32 -382906384
@global_var_a988.34 = constant i32 -382906384
@global_var_89d8.36 = constant i32 -382906384
@global_var_c96c.38 = constant i32 -382906384
@global_var_c1f8.40 = constant i32 -382906384
@global_var_b998.42 = constant i32 -382906384
@global_var_9da8.45 = constant i32 -382906384
@global_var_962c.47 = constant i32 -382906384
@global_var_1c230.50 = global i32 0
@global_var_13974.62 = constant i32 47
@global_var_1c238.64 = global i32 0
@global_var_1c198.66 = global i32 0
@global_var_1c234.68 = global i32 0
@global_var_dd14.70 = constant i32 -382910448
@global_var_1c028.72 = global i32 68308
@global_var_13978.74 = constant [13 x i8] c"174.138.8.34\00"
@global_var_1c240.77 = local_unnamed_addr global i32 0
@global_var_1c23f.78 = local_unnamed_addr global i32 0
@global_var_1c23e.79 = local_unnamed_addr global i32 0
@global_var_1c19c.81 = global i32 0
@global_var_dcfc.83 = constant i32 -442556408
@global_var_1c23d.87 = local_unnamed_addr global i32 0
@global_var_13988.91 = constant i32 10
@global_var_1c020.93 = global i32 -1
@global_var_1c024.95 = global i32 -1
@global_var_11120.98 = constant i32 -382910448
@global_var_10ad4.99 = constant i32 -382910224
@global_var_1398c.101 = constant i32 16777216
@global_var_1c1a4.103 = global i32 0
@global_var_1c1b0.105 = global i32 0
@global_var_1c1a8.107 = global i32 0
@global_var_1c1ac.109 = global i32 0
@global_var_1c1e8.123 = global i32 0
@global_var_1c1b4.125 = global i32 0
@global_var_1c1e0.127 = global i32 0
@global_var_1c254.132 = global i32 0
@global_var_1c24c.136 = global i32 0
@global_var_1c250.138 = global i32 0
@global_var_1c1bb.141 = local_unnamed_addr global i32 0
@global_var_1c1ba.142 = local_unnamed_addr global i32 0
@global_var_1c1cc.144 = global i32 0
@global_var_1c1bd.146 = local_unnamed_addr global i32 0
@global_var_1c1c1.147 = local_unnamed_addr global i32 0
@global_var_1c1c0.148 = local_unnamed_addr global i32 0
@global_var_1c1cf.149 = local_unnamed_addr global i32 0
@global_var_1c1cd.150 = local_unnamed_addr global i32 0
@global_var_1c1bc.151 = local_unnamed_addr global i32 0
@global_var_1c1ce.152 = local_unnamed_addr global i32 0
@global_var_1c1db.154 = local_unnamed_addr global i32 0
@global_var_1c1da.155 = local_unnamed_addr global i32 0
@global_var_13a18.157 = constant [5 x i8] c"&;; \00"
@global_var_13a1c.159 = constant i32 536542976
@global_var_13994.161 = constant [5 x i8] c"5:?;\00"
@global_var_1399c.163 = constant [9 x i8] c"<!: acam\00"
@global_var_139a8.165 = constant [7 x i8] c" 18:1 \00"
@global_var_139b0.167 = constant [8 x i8] c"0125!8 \00"
@global_var_139b8.169 = constant [9 x i8] c"$5''#;&0\00"
@global_var_139c4.171 = constant [6 x i8] c"509=:\00"
@global_var_139cc.173 = constant [6 x i8] c"\22=.,\22\00"
@global_var_139d4.175 = constant [8 x i8] c"'!$$;& \00"
@global_var_139dc.177 = constant i32 423502179
@global_var_139ec.179 = constant [6 x i8] c"efg`a\00"
@global_var_139f4.181 = constant [5 x i8] c"!'1&\00"
@global_var_139fc.183 = constant i32 943467547
@global_var_13a08.185 = constant i32 322070023
@global_var_1c1c4.186 = local_unnamed_addr global i32 0
@global_var_1c1c2.188 = local_unnamed_addr global i32 0
@global_var_1c1c3.189 = local_unnamed_addr global i32 0
@global_var_1c1dc.191 = local_unnamed_addr global i32 0
@global_var_1c1dd.192 = local_unnamed_addr global i32 0
@global_var_13a14.198 = constant [3 x i8] c"\0D\0A\00"
@global_var_13a26.200 = constant i32 2096127
@global_var_13a1d.202 = constant i32 2095871
@global_var_1c25c.205 = global i32 0
@global_var_1c02c.208 = global i32 -555811921
@global_var_13a2c.213 = constant i32 61015
@global_var_1c264.214 = local_unnamed_addr global i32 0
@global_var_1c268.215 = local_unnamed_addr global i32 0
@global_var_1c269.216 = local_unnamed_addr global i32 0
@global_var_13a30.218 = constant i32 59987
@global_var_1c26c.219 = local_unnamed_addr global i32 0
@global_var_1c270.220 = local_unnamed_addr global i32 0
@global_var_1c271.221 = local_unnamed_addr global i32 0
@global_var_13b98.223 = constant i32 808465680
@global_var_1c278.224 = local_unnamed_addr global i32 0
@global_var_1c274.225 = local_unnamed_addr global i32 0
@global_var_1c279.226 = local_unnamed_addr global i32 0
@global_var_13a34.228 = constant [7 x i8] c"'<188T\00"
@global_var_1c27c.229 = local_unnamed_addr global i32 0
@global_var_1c280.230 = local_unnamed_addr global i32 0
@global_var_1c281.231 = local_unnamed_addr global i32 0
@global_var_13a3c.233 = constant [8 x i8] c"1:5681T\00"
@global_var_1c284.234 = local_unnamed_addr global i32 0
@global_var_1c288.235 = local_unnamed_addr global i32 0
@global_var_1c289.236 = local_unnamed_addr global i32 0
@global_var_13a44.238 = constant [8 x i8] c"'-' 19T\00"
@global_var_1c28c.239 = local_unnamed_addr global i32 0
@global_var_1c290.240 = local_unnamed_addr global i32 0
@global_var_1c291.241 = local_unnamed_addr global i32 0
@global_var_13a4c.243 = constant [4 x i8] c"'<T\00"
@global_var_1c298.244 = local_unnamed_addr global i32 0
@global_var_1c294.245 = local_unnamed_addr global i32 0
@global_var_1c299.246 = local_unnamed_addr global i32 0
@global_var_13a50.248 = constant i32 977090171
@global_var_1c2a0.249 = local_unnamed_addr global i32 0
@global_var_1c29c.250 = local_unnamed_addr global i32 0
@global_var_1c2a1.251 = local_unnamed_addr global i32 0
@global_var_13a64.253 = constant i32 470227742
@global_var_1c2a8.254 = local_unnamed_addr global i32 0
@global_var_1c2a4.255 = local_unnamed_addr global i32 0
@global_var_1c2a9.256 = local_unnamed_addr global i32 0
@global_var_13a80.258 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1c2b0.259 = local_unnamed_addr global i32 0
@global_var_1c2ac.260 = local_unnamed_addr global i32 0
@global_var_1c2b1.261 = local_unnamed_addr global i32 0
@global_var_13a8c.263 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1c2b4.264 = local_unnamed_addr global i32 0
@global_var_1c2b8.265 = local_unnamed_addr global i32 0
@global_var_1c2b9.266 = local_unnamed_addr global i32 0
@global_var_13aa0.268 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1c2c0.269 = local_unnamed_addr global i32 0
@global_var_1c2bc.270 = local_unnamed_addr global i32 0
@global_var_1c2c1.271 = local_unnamed_addr global i32 0
@global_var_13ab8.273 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1c2c4.274 = local_unnamed_addr global i32 0
@global_var_1c2c8.275 = local_unnamed_addr global i32 0
@global_var_1c2c9.276 = local_unnamed_addr global i32 0
@global_var_13ac0.278 = constant [6 x i8] c"{1,1T\00"
@global_var_1c2d0.279 = local_unnamed_addr global i32 0
@global_var_1c2cc.280 = local_unnamed_addr global i32 0
@global_var_1c2d1.281 = local_unnamed_addr global i32 0
@global_var_13ac8.283 = constant [5 x i8] c"{20T\00"
@global_var_1c2d8.284 = local_unnamed_addr global i32 0
@global_var_1c2d4.285 = local_unnamed_addr global i32 0
@global_var_1c2d9.286 = local_unnamed_addr global i32 0
@global_var_13ad0.288 = constant [7 x i8] c"{95$'T\00"
@global_var_1c2dc.289 = local_unnamed_addr global i32 0
@global_var_1c2e0.290 = local_unnamed_addr global i32 0
@global_var_1c2e1.291 = local_unnamed_addr global i32 0
@global_var_13ad8.293 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1c2e4.294 = local_unnamed_addr global i32 0
@global_var_1c2e8.295 = local_unnamed_addr global i32 0
@global_var_1c2e9.296 = local_unnamed_addr global i32 0
@global_var_13ae8.298 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1c344.299 = local_unnamed_addr global i32 0
@global_var_1c348.300 = local_unnamed_addr global i32 0
@global_var_1c349.301 = local_unnamed_addr global i32 0
@global_var_13af4.303 = constant [8 x i8] c"z5:=91T\00"
@global_var_1c34c.304 = local_unnamed_addr global i32 0
@global_var_1c350.305 = local_unnamed_addr global i32 0
@global_var_1c351.306 = local_unnamed_addr global i32 0
@global_var_13afc.308 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1c2ec.309 = local_unnamed_addr global i32 0
@global_var_1c2f0.310 = local_unnamed_addr global i32 0
@global_var_1c2f1.311 = local_unnamed_addr global i32 0
@global_var_13b10.313 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1c2f4.314 = local_unnamed_addr global i32 0
@global_var_1c2f8.315 = local_unnamed_addr global i32 0
@global_var_1c2f9.316 = local_unnamed_addr global i32 0
@global_var_13bb8.318 = constant i32 557516544
@global_var_1c300.319 = local_unnamed_addr global i32 0
@global_var_1c2fc.320 = local_unnamed_addr global i32 0
@global_var_1c301.321 = local_unnamed_addr global i32 0
@global_var_13b1c.323 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1c308.324 = local_unnamed_addr global i32 0
@global_var_1c304.325 = local_unnamed_addr global i32 0
@global_var_1c309.326 = local_unnamed_addr global i32 0
@global_var_13b30.328 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1c310.329 = local_unnamed_addr global i32 0
@global_var_1c30c.330 = local_unnamed_addr global i32 0
@global_var_1c311.331 = local_unnamed_addr global i32 0
@global_var_13b40.333 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1c314.334 = local_unnamed_addr global i32 0
@global_var_1c318.335 = local_unnamed_addr global i32 0
@global_var_1c319.336 = local_unnamed_addr global i32 0
@global_var_13b50.338 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1c320.339 = local_unnamed_addr global i32 0
@global_var_1c31c.340 = local_unnamed_addr global i32 0
@global_var_1c321.341 = local_unnamed_addr global i32 0
@global_var_13b64.343 = constant [9 x i8] c"$662*7!E\00"
@global_var_1c324.344 = local_unnamed_addr global i32 0
@global_var_1c328.345 = local_unnamed_addr global i32 0
@global_var_1c329.346 = local_unnamed_addr global i32 0
@global_var_13b70.348 = constant [6 x i8] c";3=:T\00"
@global_var_1c330.349 = local_unnamed_addr global i32 0
@global_var_1c32c.350 = local_unnamed_addr global i32 0
@global_var_1c331.351 = local_unnamed_addr global i32 0
@global_var_13b78.353 = constant [7 x i8] c"1: 1&T\00"
@global_var_1c334.354 = local_unnamed_addr global i32 0
@global_var_1c338.355 = local_unnamed_addr global i32 0
@global_var_1c339.356 = local_unnamed_addr global i32 0
@global_var_13b80.358 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1c341.359 = local_unnamed_addr global i32 0
@global_var_1c33c.360 = local_unnamed_addr global i32 0
@global_var_1c340.361 = local_unnamed_addr global i32 0
@global_var_12710.364 = constant i32 -476053504
@global_var_114f0.368 = constant i32 -443219956
@global_var_1165c.373 = constant i32 -376111092
@global_var_1c224.376 = global i32 0
@global_var_117dc.378 = constant i32 -456978431
@global_var_1c354.380 = global i32 0
@global_var_1c1ec.382 = global i32 0
@global_var_1c12c.385 = global i32 256
@global_var_1c030.386 = global i32* @global_var_1c12c.385
@global_var_1c214.389 = global i32 0
@global_var_1c3d4.391 = global i32 0
@global_var_12ec4.392 = constant i32 -382910416
@global_var_11760.393 = constant i32 -509595648
@global_var_11da8.400 = constant i32 -442564520
@global_var_1c138.406 = global i32 0
@global_var_1139c.408 = constant i32 -481230848
@global_var_1c204.410 = global i32 0
@global_var_12b14.412 = constant i32 -509587456
@global_var_13cdc.414 = constant i32 33554944
@global_var_1c170.415 = global i32* @global_var_13cdc.414
@global_var_1c150.418 = global i32 0
@global_var_1c208.422 = local_unnamed_addr global i32 0
@global_var_124c8.424 = constant i32 -352321419
@global_var_1c000.428 = global i32 -1
@global_var_1c218.431 = global i32 0
@global_var_1c21c.433 = local_unnamed_addr global i32 0
@global_var_126fc.434 = constant i32 -390234096
@global_var_13bd0.436 = constant [10 x i8] c"/dev/null\00"
@global_var_1c220.438 = global i32 0
@global_var_1c20c.443 = local_unnamed_addr global i32 0
@global_var_1c210.445 = global i32 0
@global_var_11740.447 = constant i32 -369096966
@global_var_1c168 = external local_unnamed_addr global i32
@global_var_116f4.457 = constant i32 -442564608
@global_var_129c4.459 = constant i32 -335544664
@global_var_12ae0.462 = constant i32 -275775369
@global_var_13258.463 = constant i32 -382910352
@global_var_1c22c.465 = global i32 0
@global_var_1c3ec.468 = global i32 0
@global_var_1c3f0.470 = global i32 0
@global_var_1c004.473 = global i32 0
@global_var_1c174.3 = external global i8*
@global_var_1c190.21 = external global i8*
@global_var_1c191.30 = global i8 0
@global_var_1c23c.76 = external global i8*
@global_var_1c1a0.97 = external global i8*
@global_var_1c1e4.129 = external global i8*
@global_var_1c1e5.130 = local_unnamed_addr global i8 0
@global_var_1c1b8.140 = external global i8*
@global_var_1c1d8.145 = local_unnamed_addr global i8 0
@global_var_1c1d9.153 = local_unnamed_addr global i8 0
@global_var_1c1d0.190 = local_unnamed_addr global i8 0
@global_var_1c1c8.187 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_13924(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1c174.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1c174.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1c01c.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1c01c.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1c01c.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1c01c.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1c174.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1c01c.6, { 1, 0 }
  uselistorder i8** @global_var_1c174.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i64* %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 114704 to i32*), align 16
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 114704

bb2:                                              ; preds = %.thread
  ret i32 114704

; uselistorder directives
  uselistorder i32 114704, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_127b0(i32 ptrtoint (i32* @global_var_de54.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 80224, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_12178()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_1114c()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_1114c()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_12500(i32 %v0_8284)
  %v0_828c = call i32 @function_111a4()
  %v2_8294 = call i32 @function_11220(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_1246c(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_1246c(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1c194.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_1246c(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 1, 2, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_11cd0(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_11cd0(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_11cd0(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_10898(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_116f4()
  %v0_84dc = load i32, i32* @sl, align 4
  %v1_84dc = and i32 %v0_84dc, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v4_84ec = mul i32 %v1_84dc, 256
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_11d28.26 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_11d28.26 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_11d28()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 2, 3, 0, 5, 4, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_1181c(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_10948(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_11cd0(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1c190.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1c194.23 to i32), i32* @r6, align 4
  store i32 36768, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1c194.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 36768, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_11e18(i32 %v2_867c, i32 %v1_8688, i32 36768, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1c191.30 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1c191.30 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_11cd0(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1c194.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_11e18(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1c191.30 to i8) to i32), i32 ptrtoint (i32* @global_var_a4c4.32 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_11cd0(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_a988.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1c194.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_a988.34 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_11e18(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_a988.34 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_11cd0(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_89d8.36 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1c194.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.36 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_11e18(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_89d8.36 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_11cd0(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_c96c.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1c194.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_c96c.38 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_11e18(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_c96c.38 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_11cd0(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_c1f8.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1c194.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_c1f8.40 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_11e18(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_c1f8.40 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_11cd0(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_b998.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1c194.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_b998.42 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_11e18(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_b998.42 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_11cd0(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 45368, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1c194.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 45368, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_11e18(i32 %v2_8890, i32 %v1_889c, i32 45368, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_11cd0(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9da8.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1c194.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9da8.45 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_11e18(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9da8.45 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_11cd0(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_962c.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1c194.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_962c.47 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_11e18(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_962c.47 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_11cd0(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 36028, i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1c194.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 36028, i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_11e18(i32 %v2_8974, i32 %v1_8980, i32 36028, i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1c190.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* @global_var_1c194.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1c190.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-80 = alloca i8, align 1
  %v24_89d8 = load i32, i32* @fp, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_11cd0(i32 %v1_89dc, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_89f8, i32* @sl, align 4
  %v0_8a04 = load i32, i32* @r7, align 4
  %v2_8a08 = call i32 @function_11cd0(i32 %v0_8a04, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_8a14 = load i32, i32* @r6, align 4
  store i32 %v0_8a14, i32* %r1.global-to-local, align 4
  store i32 %v2_8a08, i32* @sb, align 4
  %v0_8a24 = load i32, i32* @r4, align 4
  %v4_8a28 = inttoptr i32 %v0_8a14 to i32*
  %v5_8a28 = call i32 @function_85e0(i32 %v0_8a24, i32* %v4_8a28, i32 7, i32 65535)
  %v3_8a30 = urem i32 %v5_8a28, 65536
  store i32 %v3_8a30, i32* %ip.global-to-local, align 4
  %v0_8a34 = load i32, i32* @r6, align 4
  store i32 %v0_8a34, i32* %r1.global-to-local, align 4
  %v0_8a3c = load i32, i32* @r5, align 4
  %v0_8a40 = load i32, i32* @r4, align 4
  %v5_8a48 = inttoptr i32 %v0_8a34 to i32*
  %v6_8a48 = call i32 @function_85e0(i32 %v0_8a40, i32* %v5_8a48, i32 6, i32 %v0_8a3c)
  %v0_8a4c = load i32, i32* @r6, align 4
  store i32 %v0_8a4c, i32* %r1.global-to-local, align 4
  %v3_8a50 = mul i32 %v6_8a48, 65536
  store i32 %v3_8a50, i32* %fp.global-to-local, align 4
  %v0_8a5c = load i32, i32* @r4, align 4
  %v4_8a60 = inttoptr i32 %v0_8a4c to i32*
  %v5_8a60 = call i32 @function_85e0(i32 %v0_8a5c, i32* %v4_8a60, i32 0, i32 512)
  %v3_8a68 = mul i32 %v5_8a60, 65536
  store i32 %v3_8a68, i32* %ip.global-to-local, align 4
  %v0_8a6c = load i32, i32* @r6, align 4
  store i32 %v0_8a6c, i32* %r1.global-to-local, align 4
  %v0_8a70 = load i32, i32* @r4, align 4
  %v3_8a78 = urem i32 %v5_8a60, 65536
  store i32 %v3_8a78, i32* @r6, align 4
  %v4_8a7c = inttoptr i32 %v0_8a6c to i32*
  %v5_8a7c = call i32 @function_85e0(i32 %v0_8a70, i32* %v4_8a7c, i32 1, i32 1)
  %v0_8a80 = load i32, i32* %fp.global-to-local, align 4
  %v3_8a80 = udiv i32 %v0_8a80, 65536
  %v1_8a88 = load i32, i32* @r5, align 4
  %v9_8a88 = icmp eq i32 %v3_8a80, %v1_8a88
  store i8 0, i8* %stack_var_-52, align 1
  br i1 %v9_8a88, label %dec_label_pc_8ab0, label %bb

bb:                                               ; preds = %dec_label_pc_89d8
  %v2_8a9c = mul nuw nsw i32 %v3_8a80, 256
  %v4_8aa0 = and i32 %v2_8a9c, 65280
  %v1_8aa4 = urem i32 %v5_8a7c, 256
  store i32 %v1_8aa4, i32* @r8, align 4
  %v5_8aa8 = udiv i32 %v0_8a80, 16777216
  %v6_8aa8 = or i32 %v4_8aa0, %v5_8aa8
  br label %dec_label_pc_8abc

dec_label_pc_8ab0:                                ; preds = %dec_label_pc_89d8
  %v1_8aa410 = urem i32 %v5_8a7c, 256
  store i32 %v1_8aa410, i32* @r8, align 4
  %v0_8ab0 = call i32 @function_e580()
  %v3_8ab8 = urem i32 %v0_8ab0, 65536
  br label %dec_label_pc_8abc

dec_label_pc_8abc:                                ; preds = %bb, %dec_label_pc_8ab0
  %storemerge20 = phi i32 [ %v6_8aa8, %bb ], [ %v3_8ab8, %dec_label_pc_8ab0 ]
  store i32 %storemerge20, i32* %fp.global-to-local, align 4
  %v0_8abc = load i32, i32* @r7, align 4
  %tmp44 = icmp slt i32 %v0_8abc, 1
  br i1 %tmp44, label %dec_label_pc_8c64.preheader, label %dec_label_pc_8ac4

dec_label_pc_8c64.preheader:                      ; preds = %dec_label_pc_8bc0, %dec_label_pc_8abc
  %storemerge4.in15.ph = phi i32 [ %v0_8abc, %dec_label_pc_8abc ], [ %v1_8b18, %dec_label_pc_8bc0 ]
  %tmp455053 = icmp slt i32 %storemerge4.in15.ph, 1
  br i1 %tmp455053, label %dec_label_pc_8c2c, label %dec_label_pc_8c30.lr.ph

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8abc
  store i32 %v3_8a30, i32* %r1.global-to-local, align 4
  %v3_8ac8 = udiv i32 %v5_8a28, 256
  %v5_8ad4 = trunc i32 %v3_8ac8 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_8aec = udiv i32 %v5_8a28, 65536
  store i32 %v3_8aec, i32* @r4, align 4
  %v4_8afc = trunc i32 %v3_8aec to i8
  store i8 %v4_8afc, i8* %stack_var_-80, align 1
  %v3_8c0c = icmp eq i32 %v3_8a30, 65535
  %v2_8b34 = ptrtoint i8* %stack_var_-52 to i32
  %v14_8b64 = bitcast i8* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_8bf0

dec_label_pc_8b04:                                ; preds = %dec_label_pc_8bf0
  %v2_8b04 = load i8, i8* %stack_var_-80, align 1
  %v3_8b04 = sext i8 %v2_8b04 to i32
  store i32 %v3_8b04, i32* %r1.global-to-local, align 4
  store i32 %v3_8ac8, i32* @r4, align 4
  %v2_8b08 = load i32, i32* @r5, align 4
  %v3_8b08 = add i32 %v2_8b08, 2
  %v4_8b08 = inttoptr i32 %v3_8b08 to i8*
  store i8 %v5_8ad4, i8* %v4_8b08, align 1
  %v0_8b0c = load i32, i32* %r1.global-to-local, align 4
  %v1_8b0c = trunc i32 %v0_8b0c to i8
  %v2_8b0c = load i32, i32* @r5, align 4
  %v3_8b0c = add i32 %v2_8b0c, 3
  %v4_8b0c = inttoptr i32 %v3_8b0c to i8*
  store i8 %v1_8b0c, i8* %v4_8b0c, align 1
  br label %dec_label_pc_8b10

dec_label_pc_8b10:                                ; preds = %dec_label_pc_8c18, %dec_label_pc_8b04
  %v1_8b18 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8b28 = call i32 @function_119e4(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_8b30 = icmp eq i32 %v3_8b28, -1
  store i32 %v2_8b34, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_8b40 = load i32, i32* %fp.global-to-local, align 4
  %v3_8b40 = sdiv i32 %v0_8b40, 256
  store i32 %v3_8b40, i32* %ip.global-to-local, align 4
  %v2_8b44 = load i32, i32* @sb, align 4
  %v3_8b44 = add i32 %v2_8b44, %stack_var_-60.0
  %v4_8b44 = inttoptr i32 %v3_8b44 to i32*
  store i32 %v3_8b28, i32* %v4_8b44, align 4
  br i1 %v7_8b30, label %dec_label_pc_8c70, label %dec_label_pc_8b4c

dec_label_pc_8b4c:                                ; preds = %dec_label_pc_8b10
  store i8 2, i8* %stack_var_-52, align 1
  %v0_8b54 = load i32, i32* %ip.global-to-local, align 4
  %v0_8b58 = load i32, i32* @lr, align 4
  %v0_8b60 = load i32, i32* %fp.global-to-local, align 4
  %sext = mul i32 %v0_8b58, 16777216
  %v11_8b64 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v0_8b60, 16777216
  %v12_8b64 = sdiv i32 %sext5, 16777216
  %sext6 = mul i32 %v0_8b54, 16777216
  %v13_8b64 = sdiv i32 %sext6, 16777216
  %v15_8b64 = call i32 @function_11840(i32 %v3_8b28, %sockaddr* %v14_8b64, i32 16, i32 2, i32 2, i32 %v11_8b64, i32 %v12_8b64, i32 %v13_8b64, i32 %v0_8b58)
  %v0_8b68 = load i32, i32* @r5, align 4
  %v1_8b68 = add i32 %v0_8b68, 20
  %v2_8b68 = inttoptr i32 %v1_8b68 to i8*
  %v3_8b68 = load i8, i8* %v2_8b68, align 1
  %tmp = icmp ugt i8 %v3_8b68, 31
  br i1 %tmp, label %dec_label_pc_8bc0, label %dec_label_pc_8b74

dec_label_pc_8b74:                                ; preds = %dec_label_pc_8b4c
  %v1_8b74 = add i32 %v0_8b68, 16
  %v2_8b74 = inttoptr i32 %v1_8b74 to i32*
  %v3_8b74 = load i32, i32* %v2_8b74, align 4
  store i32 %v3_8b74, i32* @r4, align 4
  %v0_8b78 = call i32 @function_e580()
  %v0_8b7c = load i32, i32* @r4, align 4
  %v1_8b80 = and i32 %v0_8b7c, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v1_8b7c = udiv i32 %v0_8b7c, 256
  %v3_8b84 = and i32 %v1_8b7c, 65280
  %v3_8b88 = mul i32 %v0_8b7c, 16777216
  %v4_8b8c = mul i32 %v1_8b80, 256
  %v5_8b8c = or i32 %v4_8b8c, %v3_8b88
  store i32 %v5_8b8c, i32* %r1.global-to-local, align 4
  %v4_8b90 = udiv i32 %v0_8b7c, 16777216
  %v5_8b90 = or i32 %v3_8b84, %v4_8b90
  %v0_8b94 = load i32, i32* @r5, align 4
  %v1_8b94 = add i32 %v0_8b94, 20
  %v2_8b94 = inttoptr i32 %v1_8b94 to i8*
  %v3_8b94 = load i8, i8* %v2_8b94, align 1
  %v4_8b94 = zext i8 %v3_8b94 to i32
  store i32 %v4_8b94, i32* %ip.global-to-local, align 4
  %v2_8b98 = or i32 %v5_8b8c, %v5_8b90
  %v7_8b9c = lshr i32 %v0_8b78, %v4_8b94
  %v8_8b9c = add i32 %v7_8b9c, %v2_8b98
  %v3_8ba8 = mul i32 %v8_8b9c, 16777216
  %v1_8bac = and i32 %v8_8b9c, 65280
  %v4_8bb0 = mul nuw nsw i32 %v1_8bac, 256
  %v5_8bb0 = or i32 %v4_8bb0, %v3_8ba8
  store i32 %v5_8bb0, i32* %r1.global-to-local, align 4
  %v2_8bb8 = call i32 @llvm.bswap.i32(i32 %v8_8b9c)
  %v2_8bbc = add i32 %v0_8b94, 4
  %v3_8bbc = inttoptr i32 %v2_8bbc to i32*
  store i32 %v2_8bb8, i32* %v3_8bbc, align 4
  %v0_8bcc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bc0

dec_label_pc_8bc0:                                ; preds = %dec_label_pc_8b4c, %dec_label_pc_8b74
  %v0_8bcc = phi i32 [ %v0_8b68, %dec_label_pc_8b4c ], [ %v0_8bcc.pre, %dec_label_pc_8b74 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_8bc8 = load i32, i32* @sb, align 4
  %v2_8bc8 = add i32 %v1_8bc8, %stack_var_-60.0
  %v3_8bc8 = inttoptr i32 %v2_8bc8 to i32*
  %v4_8bc8 = load i32, i32* %v3_8bc8, align 4
  store i32 %v0_8bcc, i32* %r1.global-to-local, align 4
  %v3_8bd0 = inttoptr i32 %v0_8bcc to %sockaddr*
  %v4_8bd0 = call i32 @function_1186c(i32 %v4_8bc8, %sockaddr* %v3_8bd0, i32 16)
  %v1_8bdc = add i32 %stack_var_-60.0, 4
  %v1_8be0 = load i32, i32* @r7, align 4
  %v9_8be0 = icmp eq i32 %v1_8b18, %v1_8be0
  %v0_8be8 = load i32, i32* @r5, align 4
  %v1_8be8 = add i32 %v0_8be8, 24
  store i32 %v1_8be8, i32* @r5, align 4
  br i1 %v9_8be0, label %dec_label_pc_8c64.preheader, label %dec_label_pc_8bf0

dec_label_pc_8bf0:                                ; preds = %dec_label_pc_8bc0, %dec_label_pc_8ac4
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8ac4 ], [ %v1_8bdc, %dec_label_pc_8bc0 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_8ac4 ], [ %v1_8b18, %dec_label_pc_8bc0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8bfc = call i32 @function_11cd0(i32 65535, i32 1)
  store i32 %v3_8a30, i32* %r1.global-to-local, align 4
  %v2_8c10 = load i32, i32* @sl, align 4
  %v3_8c10 = add i32 %v2_8c10, %stack_var_-60.0
  %v4_8c10 = inttoptr i32 %v3_8c10 to i32*
  store i32 %v2_8bfc, i32* %v4_8c10, align 4
  br i1 %v3_8c0c, label %dec_label_pc_8c18, label %dec_label_pc_8b04

dec_label_pc_8c18:                                ; preds = %dec_label_pc_8bf0
  %v0_8c18 = call i32 @function_e580()
  %v1_8c18 = trunc i32 %v0_8c18 to i8
  %v4_8c1c = sdiv i32 %v0_8c18, 256
  %v1_8c20 = trunc i32 %v4_8c1c to i8
  %v2_8c20 = load i32, i32* @r5, align 4
  %v3_8c20 = add i32 %v2_8c20, 3
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v3_8c24 = load i32, i32* @r5, align 4
  %v4_8c24 = add i32 %v3_8c24, 2
  %v5_8c24 = inttoptr i32 %v4_8c24 to i8*
  store i8 %v1_8c18, i8* %v5_8c24, align 1
  br label %dec_label_pc_8b10

dec_label_pc_8c2c:                                ; preds = %dec_label_pc_8c64.loopexit, %dec_label_pc_8c64.preheader, %dec_label_pc_8c68.loopexit, %dec_label_pc_8c2c
  br label %dec_label_pc_8c2c

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c30.lr.ph, %dec_label_pc_8c68.loopexit
  %v0_8c30 = load i32, i32* @r8, align 4
  %v2_8c30 = icmp eq i32 %v0_8c30, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_8c30, label %dec_label_pc_8c38, label %dec_label_pc_8c78

dec_label_pc_8c38:                                ; preds = %dec_label_pc_8c30
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_8c40

dec_label_pc_8c40:                                ; preds = %dec_label_pc_8c40, %dec_label_pc_8c38
  %v0_8c48 = phi i32 [ %v1_8c48, %dec_label_pc_8c40 ], [ 0, %dec_label_pc_8c38 ]
  %v0_8c40 = phi i32 [ %v1_8c5c, %dec_label_pc_8c40 ], [ 0, %dec_label_pc_8c38 ]
  %v1_8c40 = load i32, i32* @sb, align 4
  %v2_8c40 = add i32 %v1_8c40, %v0_8c40
  %v3_8c40 = inttoptr i32 %v2_8c40 to i32*
  %v4_8c40 = load i32, i32* %v3_8c40, align 4
  %v1_8c44 = load i32, i32* @sl, align 4
  %v2_8c44 = add i32 %v1_8c44, %v0_8c40
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  %v4_8c44 = load i32, i32* %v3_8c44, align 4
  store i32 %v4_8c44, i32* %r1.global-to-local, align 4
  %v1_8c48 = add i32 %v0_8c48, 1
  %v0_8c4c = load i32, i32* @r6, align 4
  %v4_8c54 = inttoptr i32 %v4_8c44 to i32*
  %v5_8c54 = call i32 @function_11954(i32 %v4_8c40, i32* %v4_8c54, i32 %v0_8c4c, i32 16384)
  %v1_8c58 = load i32, i32* @r7, align 4
  %v9_8c58 = icmp eq i32 %v1_8c48, %v1_8c58
  %v0_8c5c = load i32, i32* @r4, align 4
  %v1_8c5c = add i32 %v0_8c5c, 4
  store i32 %v1_8c5c, i32* @r4, align 4
  br i1 %v9_8c58, label %dec_label_pc_8c64.loopexit, label %dec_label_pc_8c40

dec_label_pc_8c64.loopexit:                       ; preds = %dec_label_pc_8c40
  %tmp4550 = icmp slt i32 %v1_8c48, 1
  br i1 %tmp4550, label %dec_label_pc_8c2c, label %dec_label_pc_8c30.lr.ph

dec_label_pc_8c30.lr.ph:                          ; preds = %dec_label_pc_8c64.preheader, %dec_label_pc_8c64.loopexit
  br label %dec_label_pc_8c30

dec_label_pc_8c68.loopexit:                       ; preds = %dec_label_pc_8c80
  %tmp45 = icmp slt i32 %v0_8ca8, 1
  br i1 %tmp45, label %dec_label_pc_8c2c, label %dec_label_pc_8c30

dec_label_pc_8c70:                                ; preds = %dec_label_pc_8b10
  store i32 %v24_89d8, i32* %fp.global-to-local, align 4
  ret i32 %v3_8b28

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8c30
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8c80

dec_label_pc_8c80:                                ; preds = %dec_label_pc_8c80, %dec_label_pc_8c78
  %v0_8c80 = phi i32 [ %v1_8cac, %dec_label_pc_8c80 ], [ 0, %dec_label_pc_8c78 ]
  %v1_8c80 = load i32, i32* @sl, align 4
  %v2_8c80 = add i32 %v1_8c80, %v0_8c80
  %v3_8c80 = inttoptr i32 %v2_8c80 to i32*
  %v4_8c80 = load i32, i32* %v3_8c80, align 4
  store i32 %v4_8c80, i32* @r4, align 4
  %v0_8c84 = load i32, i32* @r6, align 4
  store i32 %v0_8c84, i32* @r1, align 4
  %v1_8c8c = inttoptr i32 %v4_8c80 to i8*
  %v2_8c8c = call i32 @function_e700(i8* %v1_8c8c)
  %v0_8c90 = load i32, i32* @r5, align 4
  %v1_8c90 = add i32 %v0_8c90, 1
  store i32 %v1_8c90, i32* @r5, align 4
  %v0_8c94 = load i32, i32* @fp, align 4
  %v1_8c94 = load i32, i32* @sb, align 4
  %v2_8c94 = add i32 %v1_8c94, %v0_8c94
  %v3_8c94 = inttoptr i32 %v2_8c94 to i32*
  %v4_8c94 = load i32, i32* %v3_8c94, align 4
  %v0_8c98 = load i32, i32* @r4, align 4
  store i32 %v0_8c98, i32* %r1.global-to-local, align 4
  %v0_8c9c = load i32, i32* @r6, align 4
  %v4_8ca4 = inttoptr i32 %v0_8c98 to i32*
  %v5_8ca4 = call i32 @function_11954(i32 %v4_8c94, i32* %v4_8ca4, i32 %v0_8c9c, i32 16384)
  %v0_8ca8 = load i32, i32* @r5, align 4
  %v1_8ca8 = load i32, i32* @r7, align 4
  %v9_8ca8 = icmp eq i32 %v0_8ca8, %v1_8ca8
  %v0_8cac = load i32, i32* @fp, align 4
  %v1_8cac = add i32 %v0_8cac, 4
  store i32 %v1_8cac, i32* @fp, align 4
  br i1 %v9_8ca8, label %dec_label_pc_8c68.loopexit, label %dec_label_pc_8c80

; uselistorder directives
  uselistorder i32 %v1_8cac, { 1, 0 }
  uselistorder i32 %v0_8ca8, { 1, 0 }
  uselistorder i32 %v1_8c5c, { 1, 0 }
  uselistorder i32 %v1_8c48, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_8bcc, { 1, 0 }
  uselistorder i32 %v8_8b9c, { 1, 2, 0 }
  uselistorder i32 %v0_8b7c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8b58, { 1, 0 }
  uselistorder i32 %v3_8b28, { 1, 3, 2, 0 }
  uselistorder i32 %v1_8b18, { 1, 2, 0 }
  uselistorder i32 %v3_8aec, { 1, 0 }
  uselistorder i32 %v3_8ac8, { 1, 0 }
  uselistorder i32 %v5_8a60, { 1, 0 }
  uselistorder i32 %v3_8a30, { 1, 3, 2, 0 }
  uselistorder i32 %v1_89dc, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i8* %stack_var_-52, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_8c30.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8c30, { 1, 0 }
  uselistorder label %dec_label_pc_8c2c, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_8bc0, { 1, 0 }
  uselistorder label %dec_label_pc_8abc, { 1, 0 }
}

define i32 @function_8cbc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8cbc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-80 = alloca i8, align 1
  %v24_8cbc = load i32, i32* @fp, align 4
  %v1_8cc0 = urem i32 %arg1, 256
  store i32 %v1_8cc0, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_8cd8 = urem i32 %arg3, 256
  store i32 %v1_8cd8, i32* @r4, align 4
  %v2_8cdc = call i32 @function_11cd0(i32 %v1_8cc0, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_8cdc, i32* @sl, align 4
  %v0_8ce8 = load i32, i32* @r7, align 4
  %v2_8cec = call i32 @function_11cd0(i32 %v0_8ce8, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_8cf8 = load i32, i32* @r6, align 4
  store i32 %v0_8cf8, i32* %r1.global-to-local, align 4
  store i32 %v2_8cec, i32* @sb, align 4
  %v0_8d08 = load i32, i32* @r4, align 4
  %v4_8d0c = inttoptr i32 %v0_8cf8 to i32*
  %v5_8d0c = call i32 @function_85e0(i32 %v0_8d08, i32* %v4_8d0c, i32 7, i32 65535)
  %v3_8d14 = urem i32 %v5_8d0c, 65536
  store i32 %v3_8d14, i32* %ip.global-to-local, align 4
  %v0_8d18 = load i32, i32* @r6, align 4
  store i32 %v0_8d18, i32* %r1.global-to-local, align 4
  %v0_8d20 = load i32, i32* @r5, align 4
  %v0_8d24 = load i32, i32* @r4, align 4
  %v5_8d2c = inttoptr i32 %v0_8d18 to i32*
  %v6_8d2c = call i32 @function_85e0(i32 %v0_8d24, i32* %v5_8d2c, i32 6, i32 %v0_8d20)
  %v0_8d30 = load i32, i32* @r6, align 4
  store i32 %v0_8d30, i32* %r1.global-to-local, align 4
  %v3_8d34 = mul i32 %v6_8d2c, 65536
  store i32 %v3_8d34, i32* %fp.global-to-local, align 4
  %v0_8d40 = load i32, i32* @r4, align 4
  %v4_8d44 = inttoptr i32 %v0_8d30 to i32*
  %v5_8d44 = call i32 @function_85e0(i32 %v0_8d40, i32* %v4_8d44, i32 0, i32 1024)
  %v3_8d4c = mul i32 %v5_8d44, 65536
  store i32 %v3_8d4c, i32* %ip.global-to-local, align 4
  %v0_8d50 = load i32, i32* @r6, align 4
  store i32 %v0_8d50, i32* %r1.global-to-local, align 4
  %v0_8d54 = load i32, i32* @r4, align 4
  %v3_8d5c = urem i32 %v5_8d44, 65536
  store i32 %v3_8d5c, i32* @r6, align 4
  %v4_8d60 = inttoptr i32 %v0_8d50 to i32*
  %v5_8d60 = call i32 @function_85e0(i32 %v0_8d54, i32* %v4_8d60, i32 1, i32 1)
  %v0_8d64 = load i32, i32* %fp.global-to-local, align 4
  %v3_8d64 = udiv i32 %v0_8d64, 65536
  %v1_8d6c = load i32, i32* @r5, align 4
  %v9_8d6c = icmp eq i32 %v3_8d64, %v1_8d6c
  store i8 0, i8* %stack_var_-52, align 1
  br i1 %v9_8d6c, label %dec_label_pc_8d94, label %bb

bb:                                               ; preds = %dec_label_pc_8cbc
  %v2_8d80 = mul nuw nsw i32 %v3_8d64, 256
  %v4_8d84 = and i32 %v2_8d80, 65280
  %v1_8d88 = urem i32 %v5_8d60, 256
  store i32 %v1_8d88, i32* @r8, align 4
  %v5_8d8c = udiv i32 %v0_8d64, 16777216
  %v6_8d8c = or i32 %v4_8d84, %v5_8d8c
  br label %dec_label_pc_8da0

dec_label_pc_8d94:                                ; preds = %dec_label_pc_8cbc
  %v1_8d8810 = urem i32 %v5_8d60, 256
  store i32 %v1_8d8810, i32* @r8, align 4
  %v0_8d94 = call i32 @function_e580()
  %v3_8d9c = urem i32 %v0_8d94, 65536
  br label %dec_label_pc_8da0

dec_label_pc_8da0:                                ; preds = %bb, %dec_label_pc_8d94
  %storemerge20 = phi i32 [ %v6_8d8c, %bb ], [ %v3_8d9c, %dec_label_pc_8d94 ]
  store i32 %storemerge20, i32* %fp.global-to-local, align 4
  %v0_8da0 = load i32, i32* @r7, align 4
  %tmp44 = icmp slt i32 %v0_8da0, 1
  br i1 %tmp44, label %dec_label_pc_8f48.preheader, label %dec_label_pc_8da8

dec_label_pc_8f48.preheader:                      ; preds = %dec_label_pc_8ea4, %dec_label_pc_8da0
  %storemerge4.in15.ph = phi i32 [ %v0_8da0, %dec_label_pc_8da0 ], [ %v1_8dfc, %dec_label_pc_8ea4 ]
  %tmp455053 = icmp slt i32 %storemerge4.in15.ph, 1
  br i1 %tmp455053, label %dec_label_pc_8f10, label %dec_label_pc_8f14.lr.ph

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8da0
  store i32 %v3_8d14, i32* %r1.global-to-local, align 4
  %v3_8dac = udiv i32 %v5_8d0c, 256
  %v5_8db8 = trunc i32 %v3_8dac to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_8dd0 = udiv i32 %v5_8d0c, 65536
  store i32 %v3_8dd0, i32* @r4, align 4
  %v4_8de0 = trunc i32 %v3_8dd0 to i8
  store i8 %v4_8de0, i8* %stack_var_-80, align 1
  %v3_8ef0 = icmp eq i32 %v3_8d14, 65535
  %v2_8e18 = ptrtoint i8* %stack_var_-52 to i32
  %v14_8e48 = bitcast i8* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_8ed4

dec_label_pc_8de8:                                ; preds = %dec_label_pc_8ed4
  %v2_8de8 = load i8, i8* %stack_var_-80, align 1
  %v3_8de8 = sext i8 %v2_8de8 to i32
  store i32 %v3_8de8, i32* %r1.global-to-local, align 4
  store i32 %v3_8dac, i32* @r4, align 4
  %v2_8dec = load i32, i32* @r5, align 4
  %v3_8dec = add i32 %v2_8dec, 2
  %v4_8dec = inttoptr i32 %v3_8dec to i8*
  store i8 %v5_8db8, i8* %v4_8dec, align 1
  %v0_8df0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8df0 = trunc i32 %v0_8df0 to i8
  %v2_8df0 = load i32, i32* @r5, align 4
  %v3_8df0 = add i32 %v2_8df0, 3
  %v4_8df0 = inttoptr i32 %v3_8df0 to i8*
  store i8 %v1_8df0, i8* %v4_8df0, align 1
  br label %dec_label_pc_8df4

dec_label_pc_8df4:                                ; preds = %dec_label_pc_8efc, %dec_label_pc_8de8
  %v1_8dfc = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8e0c = call i32 @function_119e4(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_8e14 = icmp eq i32 %v3_8e0c, -1
  store i32 %v2_8e18, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_8e24 = load i32, i32* %fp.global-to-local, align 4
  %v3_8e24 = sdiv i32 %v0_8e24, 256
  store i32 %v3_8e24, i32* %ip.global-to-local, align 4
  %v2_8e28 = load i32, i32* @sb, align 4
  %v3_8e28 = add i32 %v2_8e28, %stack_var_-60.0
  %v4_8e28 = inttoptr i32 %v3_8e28 to i32*
  store i32 %v3_8e0c, i32* %v4_8e28, align 4
  br i1 %v7_8e14, label %dec_label_pc_8f54, label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8df4
  store i8 2, i8* %stack_var_-52, align 1
  %v0_8e38 = load i32, i32* %ip.global-to-local, align 4
  %v0_8e3c = load i32, i32* @lr, align 4
  %v0_8e44 = load i32, i32* %fp.global-to-local, align 4
  %sext = mul i32 %v0_8e3c, 16777216
  %v11_8e48 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v0_8e44, 16777216
  %v12_8e48 = sdiv i32 %sext5, 16777216
  %sext6 = mul i32 %v0_8e38, 16777216
  %v13_8e48 = sdiv i32 %sext6, 16777216
  %v15_8e48 = call i32 @function_11840(i32 %v3_8e0c, %sockaddr* %v14_8e48, i32 16, i32 2, i32 2, i32 %v11_8e48, i32 %v12_8e48, i32 %v13_8e48, i32 %v0_8e3c)
  %v0_8e4c = load i32, i32* @r5, align 4
  %v1_8e4c = add i32 %v0_8e4c, 20
  %v2_8e4c = inttoptr i32 %v1_8e4c to i8*
  %v3_8e4c = load i8, i8* %v2_8e4c, align 1
  %tmp = icmp ugt i8 %v3_8e4c, 31
  br i1 %tmp, label %dec_label_pc_8ea4, label %dec_label_pc_8e58

dec_label_pc_8e58:                                ; preds = %dec_label_pc_8e30
  %v1_8e58 = add i32 %v0_8e4c, 16
  %v2_8e58 = inttoptr i32 %v1_8e58 to i32*
  %v3_8e58 = load i32, i32* %v2_8e58, align 4
  store i32 %v3_8e58, i32* @r4, align 4
  %v0_8e5c = call i32 @function_e580()
  %v0_8e60 = load i32, i32* @r4, align 4
  %v1_8e64 = and i32 %v0_8e60, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v1_8e60 = udiv i32 %v0_8e60, 256
  %v3_8e68 = and i32 %v1_8e60, 65280
  %v3_8e6c = mul i32 %v0_8e60, 16777216
  %v4_8e70 = mul i32 %v1_8e64, 256
  %v5_8e70 = or i32 %v4_8e70, %v3_8e6c
  store i32 %v5_8e70, i32* %r1.global-to-local, align 4
  %v4_8e74 = udiv i32 %v0_8e60, 16777216
  %v5_8e74 = or i32 %v3_8e68, %v4_8e74
  %v0_8e78 = load i32, i32* @r5, align 4
  %v1_8e78 = add i32 %v0_8e78, 20
  %v2_8e78 = inttoptr i32 %v1_8e78 to i8*
  %v3_8e78 = load i8, i8* %v2_8e78, align 1
  %v4_8e78 = zext i8 %v3_8e78 to i32
  store i32 %v4_8e78, i32* %ip.global-to-local, align 4
  %v2_8e7c = or i32 %v5_8e70, %v5_8e74
  %v7_8e80 = lshr i32 %v0_8e5c, %v4_8e78
  %v8_8e80 = add i32 %v7_8e80, %v2_8e7c
  %v3_8e8c = mul i32 %v8_8e80, 16777216
  %v1_8e90 = and i32 %v8_8e80, 65280
  %v4_8e94 = mul nuw nsw i32 %v1_8e90, 256
  %v5_8e94 = or i32 %v4_8e94, %v3_8e8c
  store i32 %v5_8e94, i32* %r1.global-to-local, align 4
  %v2_8e9c = call i32 @llvm.bswap.i32(i32 %v8_8e80)
  %v2_8ea0 = add i32 %v0_8e78, 4
  %v3_8ea0 = inttoptr i32 %v2_8ea0 to i32*
  store i32 %v2_8e9c, i32* %v3_8ea0, align 4
  %v0_8eb0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8ea4

dec_label_pc_8ea4:                                ; preds = %dec_label_pc_8e30, %dec_label_pc_8e58
  %v0_8eb0 = phi i32 [ %v0_8e4c, %dec_label_pc_8e30 ], [ %v0_8eb0.pre, %dec_label_pc_8e58 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_8eac = load i32, i32* @sb, align 4
  %v2_8eac = add i32 %v1_8eac, %stack_var_-60.0
  %v3_8eac = inttoptr i32 %v2_8eac to i32*
  %v4_8eac = load i32, i32* %v3_8eac, align 4
  store i32 %v0_8eb0, i32* %r1.global-to-local, align 4
  %v3_8eb4 = inttoptr i32 %v0_8eb0 to %sockaddr*
  %v4_8eb4 = call i32 @function_1186c(i32 %v4_8eac, %sockaddr* %v3_8eb4, i32 16)
  %v1_8ec0 = add i32 %stack_var_-60.0, 4
  %v1_8ec4 = load i32, i32* @r7, align 4
  %v9_8ec4 = icmp eq i32 %v1_8dfc, %v1_8ec4
  %v0_8ecc = load i32, i32* @r5, align 4
  %v1_8ecc = add i32 %v0_8ecc, 24
  store i32 %v1_8ecc, i32* @r5, align 4
  br i1 %v9_8ec4, label %dec_label_pc_8f48.preheader, label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %dec_label_pc_8ea4, %dec_label_pc_8da8
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8da8 ], [ %v1_8ec0, %dec_label_pc_8ea4 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_8da8 ], [ %v1_8dfc, %dec_label_pc_8ea4 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8ee0 = call i32 @function_11cd0(i32 65535, i32 1)
  store i32 %v3_8d14, i32* %r1.global-to-local, align 4
  %v2_8ef4 = load i32, i32* @sl, align 4
  %v3_8ef4 = add i32 %v2_8ef4, %stack_var_-60.0
  %v4_8ef4 = inttoptr i32 %v3_8ef4 to i32*
  store i32 %v2_8ee0, i32* %v4_8ef4, align 4
  br i1 %v3_8ef0, label %dec_label_pc_8efc, label %dec_label_pc_8de8

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8ed4
  %v0_8efc = call i32 @function_e580()
  %v1_8efc = trunc i32 %v0_8efc to i8
  %v4_8f00 = sdiv i32 %v0_8efc, 256
  %v1_8f04 = trunc i32 %v4_8f00 to i8
  %v2_8f04 = load i32, i32* @r5, align 4
  %v3_8f04 = add i32 %v2_8f04, 3
  %v4_8f04 = inttoptr i32 %v3_8f04 to i8*
  store i8 %v1_8f04, i8* %v4_8f04, align 1
  %v3_8f08 = load i32, i32* @r5, align 4
  %v4_8f08 = add i32 %v3_8f08, 2
  %v5_8f08 = inttoptr i32 %v4_8f08 to i8*
  store i8 %v1_8efc, i8* %v5_8f08, align 1
  br label %dec_label_pc_8df4

dec_label_pc_8f10:                                ; preds = %dec_label_pc_8f48.loopexit, %dec_label_pc_8f48.preheader, %dec_label_pc_8f4c.loopexit, %dec_label_pc_8f10
  br label %dec_label_pc_8f10

dec_label_pc_8f14:                                ; preds = %dec_label_pc_8f14.lr.ph, %dec_label_pc_8f4c.loopexit
  %v0_8f14 = load i32, i32* @r8, align 4
  %v2_8f14 = icmp eq i32 %v0_8f14, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_8f14, label %dec_label_pc_8f1c, label %dec_label_pc_8f5c

dec_label_pc_8f1c:                                ; preds = %dec_label_pc_8f14
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_8f24

dec_label_pc_8f24:                                ; preds = %dec_label_pc_8f24, %dec_label_pc_8f1c
  %v0_8f2c = phi i32 [ %v1_8f2c, %dec_label_pc_8f24 ], [ 0, %dec_label_pc_8f1c ]
  %v0_8f24 = phi i32 [ %v1_8f40, %dec_label_pc_8f24 ], [ 0, %dec_label_pc_8f1c ]
  %v1_8f24 = load i32, i32* @sb, align 4
  %v2_8f24 = add i32 %v1_8f24, %v0_8f24
  %v3_8f24 = inttoptr i32 %v2_8f24 to i32*
  %v4_8f24 = load i32, i32* %v3_8f24, align 4
  %v1_8f28 = load i32, i32* @sl, align 4
  %v2_8f28 = add i32 %v1_8f28, %v0_8f24
  %v3_8f28 = inttoptr i32 %v2_8f28 to i32*
  %v4_8f28 = load i32, i32* %v3_8f28, align 4
  store i32 %v4_8f28, i32* %r1.global-to-local, align 4
  %v1_8f2c = add i32 %v0_8f2c, 1
  %v0_8f30 = load i32, i32* @r6, align 4
  %v4_8f38 = inttoptr i32 %v4_8f28 to i32*
  %v5_8f38 = call i32 @function_11954(i32 %v4_8f24, i32* %v4_8f38, i32 %v0_8f30, i32 16384)
  %v1_8f3c = load i32, i32* @r7, align 4
  %v9_8f3c = icmp eq i32 %v1_8f2c, %v1_8f3c
  %v0_8f40 = load i32, i32* @r4, align 4
  %v1_8f40 = add i32 %v0_8f40, 4
  store i32 %v1_8f40, i32* @r4, align 4
  br i1 %v9_8f3c, label %dec_label_pc_8f48.loopexit, label %dec_label_pc_8f24

dec_label_pc_8f48.loopexit:                       ; preds = %dec_label_pc_8f24
  %tmp4550 = icmp slt i32 %v1_8f2c, 1
  br i1 %tmp4550, label %dec_label_pc_8f10, label %dec_label_pc_8f14.lr.ph

dec_label_pc_8f14.lr.ph:                          ; preds = %dec_label_pc_8f48.preheader, %dec_label_pc_8f48.loopexit
  br label %dec_label_pc_8f14

dec_label_pc_8f4c.loopexit:                       ; preds = %dec_label_pc_8f64
  %tmp45 = icmp slt i32 %v0_8f8c, 1
  br i1 %tmp45, label %dec_label_pc_8f10, label %dec_label_pc_8f14

dec_label_pc_8f54:                                ; preds = %dec_label_pc_8df4
  store i32 %v24_8cbc, i32* %fp.global-to-local, align 4
  ret i32 %v3_8e0c

dec_label_pc_8f5c:                                ; preds = %dec_label_pc_8f14
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8f64

dec_label_pc_8f64:                                ; preds = %dec_label_pc_8f64, %dec_label_pc_8f5c
  %v0_8f64 = phi i32 [ %v1_8f90, %dec_label_pc_8f64 ], [ 0, %dec_label_pc_8f5c ]
  %v1_8f64 = load i32, i32* @sl, align 4
  %v2_8f64 = add i32 %v1_8f64, %v0_8f64
  %v3_8f64 = inttoptr i32 %v2_8f64 to i32*
  %v4_8f64 = load i32, i32* %v3_8f64, align 4
  store i32 %v4_8f64, i32* @r4, align 4
  %v0_8f68 = load i32, i32* @r6, align 4
  store i32 %v0_8f68, i32* @r1, align 4
  %v1_8f70 = inttoptr i32 %v4_8f64 to i8*
  %v2_8f70 = call i32 @function_e700(i8* %v1_8f70)
  %v0_8f74 = load i32, i32* @r5, align 4
  %v1_8f74 = add i32 %v0_8f74, 1
  store i32 %v1_8f74, i32* @r5, align 4
  %v0_8f78 = load i32, i32* @fp, align 4
  %v1_8f78 = load i32, i32* @sb, align 4
  %v2_8f78 = add i32 %v1_8f78, %v0_8f78
  %v3_8f78 = inttoptr i32 %v2_8f78 to i32*
  %v4_8f78 = load i32, i32* %v3_8f78, align 4
  %v0_8f7c = load i32, i32* @r4, align 4
  store i32 %v0_8f7c, i32* %r1.global-to-local, align 4
  %v0_8f80 = load i32, i32* @r6, align 4
  %v4_8f88 = inttoptr i32 %v0_8f7c to i32*
  %v5_8f88 = call i32 @function_11954(i32 %v4_8f78, i32* %v4_8f88, i32 %v0_8f80, i32 16384)
  %v0_8f8c = load i32, i32* @r5, align 4
  %v1_8f8c = load i32, i32* @r7, align 4
  %v9_8f8c = icmp eq i32 %v0_8f8c, %v1_8f8c
  %v0_8f90 = load i32, i32* @fp, align 4
  %v1_8f90 = add i32 %v0_8f90, 4
  store i32 %v1_8f90, i32* @fp, align 4
  br i1 %v9_8f8c, label %dec_label_pc_8f4c.loopexit, label %dec_label_pc_8f64

; uselistorder directives
  uselistorder i32 %v1_8f90, { 1, 0 }
  uselistorder i32 %v0_8f8c, { 1, 0 }
  uselistorder i32 %v1_8f40, { 1, 0 }
  uselistorder i32 %v1_8f2c, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_8eb0, { 1, 0 }
  uselistorder i32 %v8_8e80, { 1, 2, 0 }
  uselistorder i32 %v0_8e60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8e3c, { 1, 0 }
  uselistorder i32 %v3_8e0c, { 1, 3, 2, 0 }
  uselistorder i32 %v1_8dfc, { 1, 2, 0 }
  uselistorder i32 %v3_8dd0, { 1, 0 }
  uselistorder i32 %v3_8dac, { 1, 0 }
  uselistorder i32 %v5_8d44, { 1, 0 }
  uselistorder i32 %v3_8d14, { 1, 3, 2, 0 }
  uselistorder i32 %v1_8cc0, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i8* %stack_var_-52, { 3, 0, 1, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_8f14.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8f14, { 1, 0 }
  uselistorder label %dec_label_pc_8f10, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_8ea4, { 1, 0 }
  uselistorder label %dec_label_pc_8da0, { 1, 0 }
}

define i32 @function_8fa0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8fa0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_8fa0 = load i32, i32* @sb, align 4
  %v24_8fa0 = load i32, i32* @fp, align 4
  %v1_8fa4 = urem i32 %arg1, 256
  store i32 %v1_8fa4, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_8fa4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_8fbc = urem i32 %arg3, 256
  store i32 %v1_8fbc, i32* @r4, align 4
  %v2_8fc0 = call i32 @function_11cd0(i32 %v1_8fa4, i32 4)
  %v0_8fc4 = load i32, i32* @r5, align 4
  store i32 %v0_8fc4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8fd4 = load i32, i32* @r4, align 4
  store i32 %v0_8fd4, i32* %r0.global-to-local, align 4
  %v5_8fd8 = inttoptr i32 %v0_8fc4 to i32*
  %v6_8fd8 = call i32 @function_85e0(i32 %v0_8fd4, i32* %v5_8fd8, i32 2, i32 0)
  %v1_8fe4 = urem i32 %v6_8fd8, 256
  store i32 %v1_8fe4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8ff0 = load i32, i32* @r5, align 4
  store i32 %v0_8ff0, i32* %r1.global-to-local, align 4
  %v0_8ff4 = load i32, i32* @r4, align 4
  store i32 %v0_8ff4, i32* %r0.global-to-local, align 4
  %v5_8ff8 = trunc i32 %v6_8fd8 to i8
  %v6_8ffc = inttoptr i32 %v0_8ff0 to i32*
  %v7_8ffc = call i32 @function_85e0(i32 %v0_8ff4, i32* %v6_8ffc, i32 3, i32 65535)
  %v0_9000 = load i32, i32* @r5, align 4
  store i32 %v0_9000, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8ffc, i32* %fp.global-to-local, align 4
  %v0_9010 = load i32, i32* @r4, align 4
  store i32 %v0_9010, i32* %r0.global-to-local, align 4
  %v4_9014 = inttoptr i32 %v0_9000 to i32*
  %v5_9014 = call i32 @function_85e0(i32 %v0_9010, i32* %v4_9014, i32 4, i32 64)
  %v1_901c = urem i32 %v5_9014, 256
  store i32 %v1_901c, i32* %ip.global-to-local, align 4
  %v0_9020 = load i32, i32* @r5, align 4
  store i32 %v0_9020, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_902c = load i32, i32* @r4, align 4
  store i32 %v0_902c, i32* %r0.global-to-local, align 4
  %v5_9030 = trunc i32 %v5_9014 to i8
  %v6_9034 = inttoptr i32 %v0_9020 to i32*
  %v7_9034 = call i32 @function_85e0(i32 %v0_902c, i32* %v6_9034, i32 5, i32 0)
  %v1_9040 = urem i32 %v7_9034, 256
  store i32 %v1_9040, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_904c = load i32, i32* @r5, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v0_9050 = load i32, i32* @r4, align 4
  store i32 %v0_9050, i32* %r0.global-to-local, align 4
  %v5_9058 = inttoptr i32 %v0_904c to i32*
  %v6_9058 = call i32 @function_85e0(i32 %v0_9050, i32* %v5_9058, i32 6, i32 65535)
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9058, i32* @r7, align 4
  %v0_9070 = load i32, i32* @r4, align 4
  store i32 %v0_9070, i32* %r0.global-to-local, align 4
  %v4_9074 = inttoptr i32 %v0_9060 to i32*
  %v5_9074 = call i32 @function_85e0(i32 %v0_9070, i32* %v4_9074, i32 7, i32 65535)
  %v0_9078 = load i32, i32* @r5, align 4
  store i32 %v0_9078, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9074, i32* %sb.global-to-local, align 4
  %v0_9088 = load i32, i32* @r4, align 4
  store i32 %v0_9088, i32* %r0.global-to-local, align 4
  %v4_908c = inttoptr i32 %v0_9078 to i32*
  %v5_908c = call i32 @function_85e0(i32 %v0_9088, i32* %v4_908c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9098 = load i32, i32* @r5, align 4
  store i32 %v0_9098, i32* %r1.global-to-local, align 4
  store i32 %v5_908c, i32* @r6, align 4
  %v0_90a0 = load i32, i32* @r4, align 4
  store i32 %v0_90a0, i32* %r0.global-to-local, align 4
  %v4_90a4 = inttoptr i32 %v0_9098 to i32*
  %v5_90a4 = call i32 @function_85e0(i32 %v0_90a0, i32* %v4_90a4, i32 1, i32 1)
  %v2_90b0 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_90b0, i32* %r3.global-to-local, align 4
  %v1_90b4 = urem i32 %v5_90a4, 256
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  %v0_90b8 = load i32, i32* @r5, align 4
  store i32 %v0_90b8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_90c0 = load i32, i32* @r4, align 4
  store i32 %v0_90c0, i32* %r0.global-to-local, align 4
  %v5_90c8 = inttoptr i32 %v0_90b8 to i32*
  %v6_90c8 = call i32 @function_85e0(i32 %v0_90c0, i32* %v5_90c8, i32 25, i32 %v2_90b0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_90dc = call i32 @function_119e4(i32 2, i32 3, i32 17)
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v7_90e0 = icmp eq i32 %v3_90dc, -1
  store i1 %v7_90e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90e0, label %dec_label_pc_9508, label %dec_label_pc_90ec

dec_label_pc_90ec:                                ; preds = %dec_label_pc_8fa0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_90f4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_90f4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9108 = call i32 @function_119b4(i32 %v3_90dc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9108, i32* %r0.global-to-local, align 4
  %v7_910c = icmp eq i32 %v6_9108, -1
  store i1 %v7_910c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_910c, label %dec_label_pc_9500, label %dec_label_pc_9114

dec_label_pc_9114:                                ; preds = %dec_label_pc_90ec
  %v0_9114 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9120 = urem i32 %v0_9114, 65536
  store i32 %v3_9120, i32* %r2.global-to-local, align 4
  %v3_9124 = icmp ugt i32 %v3_9120, 1459
  %v9_9124 = icmp eq i32 %v3_9120, 1460
  store i1 %v9_9124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9124, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9114
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9114, %bb
  %v0_912c = phi i32 [ %v3_9120, %dec_label_pc_9114 ], [ 1460, %bb ]
  %v0_9130 = load i32, i32* %fp.global-to-local, align 4
  %v3_9130 = mul i32 %v0_9130, 65536
  store i32 %v3_9130, i32* %r0.global-to-local, align 4
  %v3_9134 = urem i32 %v0_9130, 65536
  store i32 %v3_9134, i32* %r2.global-to-local, align 4
  %v0_9138 = load i32, i32* @sl, align 4
  %v2_9138 = icmp eq i32 %v0_9138, 0
  store i1 %v2_9138, i1* %cpsr_z.global-to-local, align 1
  %v0_913c = load i32, i32* %sb.global-to-local, align 4
  %v0_9140 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_9138, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_912c, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_9168 = phi i32 [ %v3_9134, %bb71 ], [ %v0_912c, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9150 = urem i32 %v0_9140, 65536
  store i32 %v3_9150, i32* %r3.global-to-local, align 4
  %v3_9154 = urem i32 %v0_913c, 65536
  store i32 %v3_9154, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_9170

.thread:                                          ; preds = %bb74
  %v6_9164 = add nsw i32 %v5_9168, 28
  store i32 %v6_9164, i32* @fp, align 4
  %v6_9168 = add nsw i32 %v5_9168, 8
  store i32 %v6_9168, i32* @sb, align 4
  br label %dec_label_pc_92e4

dec_label_pc_9170:                                ; preds = %bb74
  %v1_9174 = add nuw nsw i32 %v0_912c, 28
  store i32 %v1_9174, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_9174, 256
  %v1_9180 = and i32 %tmp75, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp76 = udiv i32 %v0_9130, 256
  %v3_9184 = urem i32 %tmp76, 256
  %v2_9198 = icmp eq i32 %v1_9040, 0
  store i1 %v2_9198, i1* %cpsr_z.global-to-local, align 1
  %v1_919c = urem i32 %v0_9130, 256
  %v1_91a4 = add nuw nsw i32 %v0_912c, 8
  store i32 %v1_91a4, i32* @sb, align 4
  %v1_91ac = urem i32 %v0_9140, 256
  %v1_91b0 = urem i32 %v0_913c, 256
  store i32 %v1_91b0, i32* %ip.global-to-local, align 4
  store i32 %v1_9180, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_91a4, 256
  %v4_91bc = mul nuw nsw i32 %v1_919c, 256
  %v5_91bc = or i32 %v4_91bc, %v3_9184
  store i32 %v5_91bc, i32* %r0.global-to-local, align 4
  %v3_91c0 = mul nuw nsw i32 %v1_91ac, 256
  store i32 %v3_91c0, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_913c, 256
  %v3_91c4 = urem i32 %tmp78, 256
  %v1_91c8 = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_91c8, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_9174, 256
  %v4_91cc = urem i32 %tmp79, 256
  %v5_91cc = or i32 %v4_91cc, %v1_9180
  store i32 %v5_91cc, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_9140, 256
  %v4_91d0 = urem i32 %tmp80, 256
  %v5_91d0 = or i32 %v4_91d0, %v3_91c0
  store i32 %v5_91d0, i32* @r4, align 4
  %v5_91d4 = trunc i32 %tmp79 to i8
  %v5_91d8 = trunc i32 %tmp76 to i8
  %v4_91dc = mul nuw nsw i32 %v1_91b0, 256
  %v5_91dc = or i32 %v4_91dc, %v3_91c4
  store i32 %v5_91dc, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_91a4, 256
  %v4_91e0 = urem i32 %tmp81, 256
  %v5_91e0 = or i32 %v4_91e0, %v1_91c8
  store i32 %v5_91e0, i32* @r7, align 4
  br i1 %v2_9198, label %dec_label_pc_91e8, label %dec_label_pc_9510

dec_label_pc_91e8:                                ; preds = %dec_label_pc_9170
  %v3_91e836 = udiv i32 %v1_9180, 256
  store i32 %v3_91e836, i32* %ip.global-to-local, align 4
  store i32 %v1_919c, i32* %r0.global-to-local, align 4
  store i32 %v1_91ac, i32* %r1.global-to-local, align 4
  store i32 %v1_91b0, i32* %r2.global-to-local, align 4
  %v3_91f837 = udiv i32 %v1_91c8, 256
  store i32 %v3_91f837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_925c = sext i8 %v5_8ff8 to i32
  %v4_929c = sext i8 %v5_91d8 to i32
  %sext15 = mul i32 %v0_9130, 16777216
  %v4_92a0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_9140, 16777216
  %v4_92b8 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_91c8, 65536
  %v4_92bc = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_913c, 16777216
  %v4_92c0 = sdiv i32 %sext18, 16777216
  %v1_92a8 = trunc i32 %v3_91e836 to i8
  %v1_92c8 = trunc i32 %v4_92bc to i8
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9214, %dec_label_pc_91e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9220 = call i32 @function_11cd0(i32 1510, i32 1)
  store i32 %v2_9220, i32* %r0.global-to-local, align 4
  store i32 %v2_8fc0, i32* %ip.global-to-local, align 4
  %v3_9228 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9228, i32* %r2.global-to-local, align 4
  %v2_922c = load i32, i32* @r6, align 4
  %v5_922c = mul i32 %v2_922c, 4
  %v6_922c = add i32 %v5_922c, %v2_8fc0
  %v7_922c = inttoptr i32 %v6_922c to i32*
  store i32 %v2_9220, i32* %v7_922c, align 4
  %v0_9230 = load i32, i32* %ip.global-to-local, align 4
  %v1_9230 = load i32, i32* %r2.global-to-local, align 4
  %v4_9230 = mul i32 %v1_9230, 4
  %v5_9230 = add i32 %v4_9230, %v0_9230
  %v6_9230 = inttoptr i32 %v5_9230 to i32*
  %v7_9230 = load i32, i32* %v6_9230, align 4
  store i32 %v7_9230, i32* %r1.global-to-local, align 4
  %v1_9234 = inttoptr i32 %v7_9230 to i8*
  %v2_9234 = load i8, i8* %v1_9234, align 1
  %tmp = urem i8 %v2_9234, 16
  %v1_9238 = zext i8 %tmp to i32
  %v1_923c = or i32 %v1_9238, 64
  store i32 %v1_923c, i32* %r3.global-to-local, align 4
  %v1_9240 = trunc i32 %v1_923c to i8
  store i8 %v1_9240, i8* %v1_9234, align 1
  %v0_9244 = load i32, i32* %r1.global-to-local, align 4
  %v1_9244 = inttoptr i32 %v0_9244 to i8*
  %v2_9244 = load i8, i8* %v1_9244, align 1
  %v3_9244 = zext i8 %v2_9244 to i32
  %v1_9248 = and i32 %v3_9244, 240
  %v1_924c = or i32 %v1_9248, 5
  store i32 %v1_924c, i32* %r2.global-to-local, align 4
  %v3_9254 = add i32 %v0_9244, 9
  %v4_9254 = inttoptr i32 %v3_9254 to i8*
  store i8 17, i8* %v4_9254, align 1
  %v0_9258 = load i32, i32* %r2.global-to-local, align 4
  %v1_9258 = trunc i32 %v0_9258 to i8
  %v2_9258 = load i32, i32* %r1.global-to-local, align 4
  %v3_9258 = inttoptr i32 %v2_9258 to i8*
  store i8 %v1_9258, i8* %v3_9258, align 1
  store i32 %v4_925c, i32* %r0.global-to-local, align 4
  %v2_9260 = load i32, i32* %r1.global-to-local, align 4
  %v3_9260 = add i32 %v2_9260, 1
  %v4_9260 = inttoptr i32 %v3_9260 to i8*
  store i8 %v5_8ff8, i8* %v4_9260, align 1
  %v2_9268 = load i32, i32* %r1.global-to-local, align 4
  %v3_9268 = add i32 %v2_9268, 8
  %v4_9268 = inttoptr i32 %v3_9268 to i8*
  store i8 %v5_9030, i8* %v4_9268, align 1
  %v3_926c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_926c, i32* %r2.global-to-local, align 4
  store i32 %v6_90c8, i32* %ip.global-to-local, align 4
  %v3_9274 = mul i32 %v3_926c, 32
  store i32 %v3_9274, i32* %r3.global-to-local, align 4
  %v1_9278 = load i32, i32* %r1.global-to-local, align 4
  %v2_9278 = add i32 %v1_9278, 12
  %v3_9278 = inttoptr i32 %v2_9278 to i32*
  store i32 %v6_90c8, i32* %v3_9278, align 4
  %v0_927c = load i32, i32* %r3.global-to-local, align 4
  %v1_927c = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_927c, -8
  %v5_927c = add i32 %v0_927c, %tmp84
  %v1_9280 = load i32, i32* @r8, align 4
  %v2_9280 = add i32 %v5_927c, %v1_9280
  store i32 %v2_9280, i32* %r3.global-to-local, align 4
  %v1_9284 = add i32 %v2_9280, 16
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  %v1_9288 = load i32, i32* %r1.global-to-local, align 4
  %v2_9288 = add i32 %v1_9288, 16
  %v3_9288 = inttoptr i32 %v2_9288 to i32*
  store i32 %v3_9284, i32* %v3_9288, align 4
  %v0_9290 = load i32, i32* %r2.global-to-local, align 4
  %v1_9290 = add i32 %v0_9290, 1
  store i32 %v1_9290, i32* @r6, align 4
  %v2_9294 = load i32, i32* %r1.global-to-local, align 4
  %v3_9294 = add i32 %v2_9294, 2
  %v4_9294 = inttoptr i32 %v3_9294 to i8*
  store i8 %v5_91d4, i8* %v4_9294, align 1
  store i32 %v4_929c, i32* %ip.global-to-local, align 4
  store i32 %v4_92a0, i32* %r0.global-to-local, align 4
  %v0_92a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_92a4 = add i32 %v0_92a4, 20
  store i32 %v1_92a4, i32* %r3.global-to-local, align 4
  %v3_92a8 = add i32 %v0_92a4, 3
  %v4_92a8 = inttoptr i32 %v3_92a8 to i8*
  store i8 %v1_92a8, i8* %v4_92a8, align 1
  %v0_92ac = load i32, i32* %ip.global-to-local, align 4
  %v1_92ac = trunc i32 %v0_92ac to i8
  %v2_92ac = load i32, i32* %r1.global-to-local, align 4
  %v3_92ac = add i32 %v2_92ac, 4
  %v4_92ac = inttoptr i32 %v3_92ac to i8*
  store i8 %v1_92ac, i8* %v4_92ac, align 1
  %v0_92b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_92b0 = trunc i32 %v0_92b0 to i8
  %v2_92b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_92b0 = add i32 %v2_92b0, 5
  %v4_92b0 = inttoptr i32 %v3_92b0 to i8*
  store i8 %v1_92b0, i8* %v4_92b0, align 1
  %v0_92b4 = load i32, i32* @r4, align 4
  %v1_92b4 = trunc i32 %v0_92b4 to i8
  %v2_92b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_92b4 = add i32 %v2_92b4, 20
  %v4_92b4 = inttoptr i32 %v3_92b4 to i8*
  store i8 %v1_92b4, i8* %v4_92b4, align 1
  store i32 %v4_92b8, i32* %r2.global-to-local, align 4
  store i32 %v4_92bc, i32* %r1.global-to-local, align 4
  store i32 %v4_92c0, i32* %ip.global-to-local, align 4
  %v0_92c4 = load i32, i32* @r6, align 4
  %v1_92c4 = load i32, i32* @sl, align 4
  %v9_92c4 = icmp eq i32 %v0_92c4, %v1_92c4
  store i1 %v9_92c4, i1* %cpsr_z.global-to-local, align 1
  %v2_92c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_92c8 = add i32 %v2_92c8, 5
  %v4_92c8 = inttoptr i32 %v3_92c8 to i8*
  store i8 %v1_92c8, i8* %v4_92c8, align 1
  %v0_92cc = load i32, i32* %r2.global-to-local, align 4
  %v1_92cc = trunc i32 %v0_92cc to i8
  %v2_92cc = load i32, i32* %r3.global-to-local, align 4
  %v3_92cc = add i32 %v2_92cc, 1
  %v4_92cc = inttoptr i32 %v3_92cc to i8*
  store i8 %v1_92cc, i8* %v4_92cc, align 1
  %v0_92d0 = load i32, i32* @r5, align 4
  %v1_92d0 = trunc i32 %v0_92d0 to i8
  %v2_92d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d0 = add i32 %v2_92d0, 2
  %v4_92d0 = inttoptr i32 %v3_92d0 to i8*
  store i8 %v1_92d0, i8* %v4_92d0, align 1
  %v0_92d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_92d4 = trunc i32 %v0_92d4 to i8
  %v2_92d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d4 = add i32 %v2_92d4, 3
  %v4_92d4 = inttoptr i32 %v3_92d4 to i8*
  store i8 %v1_92d4, i8* %v4_92d4, align 1
  %v0_92d8 = load i32, i32* @r7, align 4
  %v1_92d8 = trunc i32 %v0_92d8 to i8
  %v2_92d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d8 = add i32 %v2_92d8, 4
  %v4_92d8 = inttoptr i32 %v3_92d8 to i8*
  store i8 %v1_92d8, i8* %v4_92d8, align 1
  %v0_92dc = load i32, i32* @r6, align 4
  store i32 %v0_92dc, i32* %stack_var_-40, align 4
  %v5_92e0 = icmp slt i32 %v0_92c4, %v1_92c4
  br i1 %v5_92e0, label %dec_label_pc_9214, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9544, %dec_label_pc_9214, %.thread
  %v0_92e4 = load i32, i32* @sl, align 4
  %v2_92e4 = icmp eq i32 %v0_92e4, 0
  store i1 %v2_92e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9490 = icmp eq i32 %v3_9134, 65535
  %v2_935c = icmp eq i32 %v1_90b4, 0
  %v2_9324 = icmp eq i32 %v6_90c8, -1
  %v7_9324 = icmp eq i32 %v6_90c8, -1
  br label %dec_label_pc_92ec.outer

dec_label_pc_92ec.outer:                          ; preds = %dec_label_pc_940c, %dec_label_pc_92e4
  %v1_92ec.ph.in = phi i32 [ %v1_9400, %dec_label_pc_940c ], [ %v0_92e4, %dec_label_pc_92e4 ]
  %v0_92ec.ph = phi i1 [ %v2_940c, %dec_label_pc_940c ], [ %v2_92e4, %dec_label_pc_92e4 ]
  %v1_92ec.ph = icmp slt i32 %v1_92ec.ph.in, 0
  %v4_92ec = or i1 %v1_92ec.ph, %v0_92ec.ph
  br label %dec_label_pc_92ec

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92ec.outer, %dec_label_pc_92ec
  br i1 %v4_92ec, label %dec_label_pc_92ec, label %dec_label_pc_92f0

dec_label_pc_92f0:                                ; preds = %dec_label_pc_92ec
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_9364, %dec_label_pc_92f0
  %v1_9310 = phi i32 [ %v1_93fc, %dec_label_pc_9364 ], [ 0, %dec_label_pc_92f0 ]
  %v5_9300 = mul i32 %v1_9310, 24
  %v1_9304 = load i32, i32* @r8, align 4
  %v2_9304 = add i32 %v1_9304, %v5_9300
  store i32 %v2_9304, i32* %r3.global-to-local, align 4
  store i32 %v2_8fc0, i32* %ip.global-to-local, align 4
  %v1_930c = add i32 %v2_9304, 20
  %v2_930c = inttoptr i32 %v1_930c to i8*
  %v3_930c = load i8, i8* %v2_930c, align 1
  %v4_930c = zext i8 %v3_930c to i32
  store i32 %v4_930c, i32* %r2.global-to-local, align 4
  %v4_9310 = mul i32 %v1_9310, 4
  %v5_9310 = add i32 %v4_9310, %v2_8fc0
  %v6_9310 = inttoptr i32 %v5_9310 to i32*
  %v7_9310 = load i32, i32* %v6_9310, align 4
  store i32 %v7_9310, i32* @r5, align 4
  %v7_9314 = icmp eq i8 %v3_930c, 31
  store i1 %v7_9314, i1* %cpsr_z.global-to-local, align 1
  %v1_9318 = add i32 %v7_9310, 20
  store i32 %v1_9318, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_930c, 32
  br i1 %tmp85, label %dec_label_pc_9418, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_92fc
  store i32 %v6_90c8, i32* %r0.global-to-local, align 4
  store i1 %v7_9324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9324, label %dec_label_pc_9480, label %dec_label_pc_932c

dec_label_pc_932c:                                ; preds = %dec_label_pc_9418, %dec_label_pc_9320
  store i32 %v3_9134, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9490, label %dec_label_pc_949c, label %dec_label_pc_9340

dec_label_pc_9340:                                ; preds = %dec_label_pc_9480.dec_label_pc_9340_crit_edge, %dec_label_pc_932c
  %v1_9344 = phi i32 [ %v1_9344.pre, %dec_label_pc_9480.dec_label_pc_9340_crit_edge ], [ 65535, %dec_label_pc_932c ]
  store i32 %v3_9150, i32* %r2.global-to-local, align 4
  %v9_9344 = icmp eq i32 %v3_9150, %v1_9344
  store i1 %v9_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9344, label %dec_label_pc_94b8, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_949c.dec_label_pc_934c_crit_edge, %dec_label_pc_9340
  %v1_9350 = phi i32 [ %v1_9350.pre, %dec_label_pc_949c.dec_label_pc_934c_crit_edge ], [ %v1_9344, %dec_label_pc_9340 ]
  store i32 %v3_9154, i32* %r3.global-to-local, align 4
  %v9_9350 = icmp eq i32 %v3_9154, %v1_9350
  store i1 %v9_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9350, label %dec_label_pc_94d4, label %dec_label_pc_9358

dec_label_pc_9358:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_934c
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  store i1 %v2_935c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_935c, label %dec_label_pc_9364, label %dec_label_pc_94f0

dec_label_pc_9364:                                ; preds = %dec_label_pc_9358, %dec_label_pc_94d4, %dec_label_pc_94f0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9368 = load i32, i32* @r7, align 4
  %v1_9368 = trunc i32 %v0_9368 to i8
  %v2_9368 = load i32, i32* @r5, align 4
  %v3_9368 = add i32 %v2_9368, 10
  %v4_9368 = inttoptr i32 %v3_9368 to i8*
  store i8 %v1_9368, i8* %v4_9368, align 1
  %v0_936c = load i32, i32* @r7, align 4
  %v1_936c = trunc i32 %v0_936c to i8
  %v2_936c = load i32, i32* @r5, align 4
  %v3_936c = add i32 %v2_936c, 11
  %v4_936c = inttoptr i32 %v3_936c to i8*
  store i8 %v1_936c, i8* %v4_936c, align 1
  %v0_9370 = load i32, i32* @r5, align 4
  store i32 %v0_9370, i32* @r0, align 4
  %v2_9374 = call i32 @function_d0b8(i32 %v0_9370, i32 20)
  %v3_9374 = trunc i32 %v2_9374 to i8
  store i32 %v2_9374, i32* %r0.global-to-local, align 4
  %v4_9378 = sdiv i32 %v2_9374, 256
  store i32 %v4_9378, i32* %r3.global-to-local, align 4
  %v1_937c = trunc i32 %v4_9378 to i8
  %v2_937c = load i32, i32* @r5, align 4
  %v3_937c = add i32 %v2_937c, 11
  %v4_937c = inttoptr i32 %v3_937c to i8*
  store i8 %v1_937c, i8* %v4_937c, align 1
  %v3_9380 = load i32, i32* @r5, align 4
  %v4_9380 = add i32 %v3_9380, 10
  %v5_9380 = inttoptr i32 %v4_9380 to i8*
  store i8 %v3_9374, i8* %v5_9380, align 1
  %v0_9384 = load i32, i32* @r7, align 4
  %v1_9384 = trunc i32 %v0_9384 to i8
  %v2_9384 = load i32, i32* @r6, align 4
  %v3_9384 = add i32 %v2_9384, 6
  %v4_9384 = inttoptr i32 %v3_9384 to i8*
  store i8 %v1_9384, i8* %v4_9384, align 1
  %v0_9388 = load i32, i32* @r7, align 4
  %v1_9388 = trunc i32 %v0_9388 to i8
  %v2_9388 = load i32, i32* @r6, align 4
  %v3_9388 = add i32 %v2_9388, 7
  %v4_9388 = inttoptr i32 %v3_9388 to i8*
  store i8 %v1_9388, i8* %v4_9388, align 1
  %v0_938c = load i32, i32* @r5, align 4
  %v1_938c = add i32 %v0_938c, 24
  %v2_938c = inttoptr i32 %v1_938c to i8*
  %v3_938c = load i8, i8* %v2_938c, align 1
  %v4_938c = zext i8 %v3_938c to i32
  store i32 %v4_938c, i32* %r3.global-to-local, align 4
  %v1_9390 = add i32 %v0_938c, 25
  %v2_9390 = inttoptr i32 %v1_9390 to i8*
  %v3_9390 = load i8, i8* %v2_9390, align 1
  %v4_9390 = zext i8 %v3_9390 to i32
  %v0_9394 = load i32, i32* @r6, align 4
  store i32 %v0_9394, i32* @r1, align 4
  %v4_9398 = mul nuw nsw i32 %v4_9390, 256
  %v5_9398 = or i32 %v4_9398, %v4_938c
  store i32 %v5_9398, i32* %r2.global-to-local, align 4
  store i32 %v0_938c, i32* %r0.global-to-local, align 4
  %v0_93a0 = load i32, i32* @sb, align 4
  store i32 %v0_93a0, i32* %r3.global-to-local, align 4
  %v4_93a4 = call i32 @function_d114(i32 %v0_938c, i32 %v0_9394, i32 %v5_9398, i32 %v0_93a0)
  %v5_93a4 = trunc i32 %v4_93a4 to i8
  store i32 %v4_93a4, i32* %r0.global-to-local, align 4
  %v4_93a838 = udiv i32 %v4_93a4, 256
  %v1_93ac = trunc i32 %v4_93a838 to i8
  %v2_93ac = load i32, i32* @r6, align 4
  %v3_93ac = add i32 %v2_93ac, 7
  %v4_93ac = inttoptr i32 %v3_93ac to i8*
  store i8 %v1_93ac, i8* %v4_93ac, align 1
  %v3_93b0 = load i32, i32* @r6, align 4
  %v4_93b0 = add i32 %v3_93b0, 6
  %v5_93b0 = inttoptr i32 %v4_93b0 to i8*
  store i8 %v5_93a4, i8* %v5_93b0, align 1
  %v3_93b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_93b4, i32* %r3.global-to-local, align 4
  %v0_93b8 = load i32, i32* @r5, align 4
  %v1_93b8 = add i32 %v0_93b8, 20
  %v2_93b8 = inttoptr i32 %v1_93b8 to i32*
  %v3_93b8 = load i32, i32* %v2_93b8, align 4
  %v3_93c0 = udiv i32 %v3_93b8, 65536
  store i32 %v3_93c0, i32* %r2.global-to-local, align 4
  %v5_93c4 = mul i32 %v3_93b4, 24
  %v1_93c8 = load i32, i32* @r8, align 4
  %v2_93c8 = add i32 %v1_93c8, %v5_93c4
  store i32 %v2_93c8, i32* %ip.global-to-local, align 4
  %v3_93cc35 = udiv i32 %v3_93b8, 16777216
  %v1_93d0 = trunc i32 %v3_93cc35 to i8
  %v3_93d0 = add i32 %v2_93c8, 3
  %v4_93d0 = inttoptr i32 %v3_93d0 to i8*
  store i8 %v1_93d0, i8* %v4_93d0, align 1
  %v0_93d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 2
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_93dc = load i32, i32* @r5, align 4
  store i32 %v0_93dc, i32* %r1.global-to-local, align 4
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v0_93e4 = load i32, i32* @fp, align 4
  store i32 %v0_93e4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_93ec = load i32, i32* %ip.global-to-local, align 4
  %v6_93f4 = inttoptr i32 %v0_93dc to i32*
  %v7_93f4 = call i32 @function_11980(i32 %v3_90dc, i32* %v6_93f4, i32 %v0_93e4, i32 16384, i32 %v0_93ec, i32 16)
  %v3_93f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_93f8, i32* %r3.global-to-local, align 4
  %v1_93fc = add i32 %v3_93f8, 1
  store i32 %v1_93fc, i32* %r0.global-to-local, align 4
  %v1_9400 = load i32, i32* @sl, align 4
  %v9_9400 = icmp eq i32 %v1_93fc, %v1_9400
  store i1 %v9_9400, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_93fc, i32* %stack_var_-40, align 4
  %v5_9408 = icmp slt i32 %v1_93fc, %v1_9400
  br i1 %v5_9408, label %dec_label_pc_92fc, label %dec_label_pc_940c

dec_label_pc_940c:                                ; preds = %dec_label_pc_9364
  %v2_940c = icmp eq i32 %v1_9400, 0
  store i1 %v2_940c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_92ec.outer

dec_label_pc_9418:                                ; preds = %dec_label_pc_92fc
  %v1_9418 = add i32 %v2_9304, 16
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  %v0_941c = call i32 @function_e580()
  store i32 %v0_941c, i32* %r0.global-to-local, align 4
  %v3_9420 = load i32, i32* %stack_var_-40, align 4
  %v5_9428 = mul i32 %v3_9420, 24
  %v1_9430 = load i32, i32* @r8, align 4
  %v2_9430 = add i32 %v1_9430, %v5_9428
  store i32 %v2_9430, i32* %r1.global-to-local, align 4
  %v1_9434 = and i32 %v3_9418, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9434, i32* %r3.global-to-local, align 4
  %v1_942c = udiv i32 %v3_9418, 256
  %v3_9438 = and i32 %v1_942c, 65280
  store i32 %v3_9438, i32* %r2.global-to-local, align 4
  %v3_943c = mul i32 %v3_9418, 16777216
  store i32 %v3_943c, i32* %ip.global-to-local, align 4
  %v1_9440 = add i32 %v2_9430, 20
  %v2_9440 = inttoptr i32 %v1_9440 to i8*
  %v3_9440 = load i8, i8* %v2_9440, align 1
  %v4_9440 = zext i8 %v3_9440 to i32
  %v4_9444 = mul i32 %v1_9434, 256
  %v5_9444 = or i32 %v4_9444, %v3_943c
  store i32 %v5_9444, i32* %ip.global-to-local, align 4
  %v4_9448 = udiv i32 %v3_9418, 16777216
  %v5_9448 = or i32 %v3_9438, %v4_9448
  %v2_944c = or i32 %v5_9448, %v5_9444
  %v7_9450 = lshr i32 %v0_941c, %v4_9440
  %v8_9450 = add i32 %v7_9450, %v2_944c
  store i32 %v8_9450, i32* %r2.global-to-local, align 4
  %v3_945c = mul i32 %v8_9450, 16777216
  %v1_9454 = mul i32 %v8_9450, 256
  %v4_9460 = and i32 %v1_9454, 16711680
  %v5_9460 = or i32 %v4_9460, %v3_945c
  store i32 %v5_9460, i32* %r1.global-to-local, align 4
  store i32 %v6_90c8, i32* %r0.global-to-local, align 4
  %v2_9470 = call i32 @llvm.bswap.i32(i32 %v8_9450)
  store i32 %v2_9470, i32* %r3.global-to-local, align 4
  store i1 %v7_9324, i1* %cpsr_z.global-to-local, align 1
  %v1_9478 = load i32, i32* @r5, align 4
  %v2_9478 = add i32 %v1_9478, 16
  %v3_9478 = inttoptr i32 %v2_9478 to i32*
  store i32 %v2_9470, i32* %v3_9478, align 4
  br i1 %v2_9324, label %dec_label_pc_9480, label %dec_label_pc_932c

dec_label_pc_9480:                                ; preds = %dec_label_pc_9418, %dec_label_pc_9320
  %v0_9480 = call i32 @function_e580()
  store i32 %v0_9480, i32* %r0.global-to-local, align 4
  store i32 %v3_9134, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9490, i1* %cpsr_z.global-to-local, align 1
  %v1_9494 = load i32, i32* @r5, align 4
  %v2_9494 = add i32 %v1_9494, 12
  %v3_9494 = inttoptr i32 %v2_9494 to i32*
  store i32 %v0_9480, i32* %v3_9494, align 4
  br i1 %v3_9490, label %dec_label_pc_949c, label %dec_label_pc_9480.dec_label_pc_9340_crit_edge

dec_label_pc_9480.dec_label_pc_9340_crit_edge:    ; preds = %dec_label_pc_9480
  %v1_9344.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9340

dec_label_pc_949c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_932c
  %v0_949c = call i32 @function_e580()
  %v1_949c = trunc i32 %v0_949c to i8
  store i32 %v0_949c, i32* %r0.global-to-local, align 4
  store i32 %v3_9150, i32* %r2.global-to-local, align 4
  %v4_94a4 = sdiv i32 %v0_949c, 256
  store i32 %v4_94a4, i32* %r3.global-to-local, align 4
  %v1_94a8 = load i32, i32* @r4, align 4
  %v9_94a8 = icmp eq i32 %v3_9150, %v1_94a8
  store i1 %v9_94a8, i1* %cpsr_z.global-to-local, align 1
  %v1_94ac = trunc i32 %v4_94a4 to i8
  %v2_94ac = load i32, i32* @r5, align 4
  %v3_94ac = add i32 %v2_94ac, 5
  %v4_94ac = inttoptr i32 %v3_94ac to i8*
  store i8 %v1_94ac, i8* %v4_94ac, align 1
  %v3_94b0 = load i32, i32* @r5, align 4
  %v4_94b0 = add i32 %v3_94b0, 4
  %v5_94b0 = inttoptr i32 %v4_94b0 to i8*
  store i8 %v1_949c, i8* %v5_94b0, align 1
  %v0_94b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94b4, label %dec_label_pc_94b8, label %dec_label_pc_949c.dec_label_pc_934c_crit_edge

dec_label_pc_949c.dec_label_pc_934c_crit_edge:    ; preds = %dec_label_pc_949c
  %v1_9350.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_934c

dec_label_pc_94b8:                                ; preds = %dec_label_pc_949c, %dec_label_pc_9340
  %v0_94b8 = call i32 @function_e580()
  %v1_94b8 = trunc i32 %v0_94b8 to i8
  store i32 %v0_94b8, i32* %r0.global-to-local, align 4
  %v4_94bc = sdiv i32 %v0_94b8, 256
  store i32 %v4_94bc, i32* %r3.global-to-local, align 4
  %v3_94c0 = load i32, i32* @r5, align 4
  %v4_94c0 = add i32 %v3_94c0, 20
  %v5_94c0 = inttoptr i32 %v4_94c0 to i8*
  store i8 %v1_94b8, i8* %v5_94c0, align 1
  %v0_94c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 1
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  store i32 %v3_9154, i32* %r3.global-to-local, align 4
  %v1_94cc = load i32, i32* @r4, align 4
  %v9_94cc = icmp eq i32 %v3_9154, %v1_94cc
  store i1 %v9_94cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_94cc, label %dec_label_pc_94d4, label %dec_label_pc_9358

dec_label_pc_94d4:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_934c
  %v0_94d4 = call i32 @function_e580()
  %v1_94d4 = trunc i32 %v0_94d4 to i8
  store i32 %v0_94d4, i32* %r0.global-to-local, align 4
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  %v4_94dc = sdiv i32 %v0_94d4, 256
  store i32 %v4_94dc, i32* %r3.global-to-local, align 4
  store i1 %v2_935c, i1* %cpsr_z.global-to-local, align 1
  %v1_94e4 = trunc i32 %v4_94dc to i8
  %v2_94e4 = load i32, i32* @r6, align 4
  %v3_94e4 = add i32 %v2_94e4, 3
  %v4_94e4 = inttoptr i32 %v3_94e4 to i8*
  store i8 %v1_94e4, i8* %v4_94e4, align 1
  %v3_94e8 = load i32, i32* @r6, align 4
  %v4_94e8 = add i32 %v3_94e8, 2
  %v5_94e8 = inttoptr i32 %v4_94e8 to i8*
  store i8 %v1_94d4, i8* %v5_94e8, align 1
  %v0_94ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94ec, label %dec_label_pc_9364, label %dec_label_pc_94f0

dec_label_pc_94f0:                                ; preds = %dec_label_pc_9358, %dec_label_pc_94d4
  %v0_94f0 = load i32, i32* @r5, align 4
  %v1_94f0 = add i32 %v0_94f0, 28
  store i32 %v1_94f0, i32* %r0.global-to-local, align 4
  store i32 %v0_912c, i32* @r1, align 4
  %v1_94f8 = inttoptr i32 %v1_94f0 to i8*
  %v2_94f8 = call i32 @function_e700(i8* %v1_94f8)
  store i32 %v2_94f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9364

dec_label_pc_9500:                                ; preds = %dec_label_pc_90ec
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v1_9504 = call i32 @function_11120(i32 %v3_90dc)
  store i32 %v1_9504, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_8fa0, %dec_label_pc_9500
  %v29_950c = phi i32 [ %v3_90dc, %dec_label_pc_8fa0 ], [ %v1_9504, %dec_label_pc_9500 ]
  store i32 %v18_8fa0, i32* %sb.global-to-local, align 4
  store i32 %v24_8fa0, i32* %fp.global-to-local, align 4
  ret i32 %v29_950c

dec_label_pc_9510:                                ; preds = %dec_label_pc_9170
  %v3_9514 = sext i8 %v5_91d4 to i32
  %v7_9514 = sext i8 %v5_91d8 to i32
  %v3_9518 = sdiv i32 %v3_9514, 256
  store i32 %v3_9518, i32* %r0.global-to-local, align 4
  %v3_951c = sdiv i32 %v7_9514, 256
  store i32 %v3_951c, i32* %r1.global-to-local, align 4
  store i32 %v1_91ac, i32* %r2.global-to-local, align 4
  store i32 %v1_91b0, i32* %r3.global-to-local, align 4
  %v3_952834 = udiv i32 %v1_91c8, 256
  store i32 %v3_952834, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_9594 = sext i8 %v5_9030 to i32
  %sext11 = mul i32 %v1_91c8, 65536
  %v4_95ec = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_9140, 16777216
  %v4_95f0 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_913c, 16777216
  %v4_960c = sdiv i32 %sext13, 16777216
  %v1_95f8 = trunc i32 %v3_951c to i8
  %v1_9614 = trunc i32 %v4_960c to i8
  br label %dec_label_pc_9544

dec_label_pc_9544:                                ; preds = %dec_label_pc_9544, %dec_label_pc_9510
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9550 = call i32 @function_11cd0(i32 1510, i32 1)
  store i32 %v2_9550, i32* %r0.global-to-local, align 4
  store i32 %v2_8fc0, i32* %r1.global-to-local, align 4
  %v3_9558 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9558, i32* %r2.global-to-local, align 4
  %v2_955c = load i32, i32* @r6, align 4
  %v5_955c = mul i32 %v2_955c, 4
  %v6_955c = add i32 %v5_955c, %v2_8fc0
  %v7_955c = inttoptr i32 %v6_955c to i32*
  store i32 %v2_9550, i32* %v7_955c, align 4
  %v0_9560 = load i32, i32* %r1.global-to-local, align 4
  %v1_9560 = load i32, i32* %r2.global-to-local, align 4
  %v4_9560 = mul i32 %v1_9560, 4
  %v5_9560 = add i32 %v4_9560, %v0_9560
  %v6_9560 = inttoptr i32 %v5_9560 to i32*
  %v7_9560 = load i32, i32* %v6_9560, align 4
  store i32 %v7_9560, i32* %r1.global-to-local, align 4
  %v1_9564 = inttoptr i32 %v7_9560 to i8*
  %v2_9564 = load i8, i8* %v1_9564, align 1
  %tmp86 = urem i8 %v2_9564, 16
  %v1_9568 = zext i8 %tmp86 to i32
  %v1_956c = or i32 %v1_9568, 64
  store i32 %v1_956c, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v1_956c to i8
  store i8 %v1_9570, i8* %v1_9564, align 1
  %v0_9574 = load i32, i32* %r1.global-to-local, align 4
  %v1_9574 = inttoptr i32 %v0_9574 to i8*
  %v2_9574 = load i8, i8* %v1_9574, align 1
  %v3_9574 = zext i8 %v2_9574 to i32
  %v1_9578 = and i32 %v3_9574, 240
  %v1_957c = or i32 %v1_9578, 5
  store i32 %v1_957c, i32* %r2.global-to-local, align 4
  %v3_9584 = add i32 %v0_9574, 9
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 17, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* %r2.global-to-local, align 4
  %v1_9588 = trunc i32 %v0_9588 to i8
  %v2_9588 = load i32, i32* %r1.global-to-local, align 4
  %v3_9588 = inttoptr i32 %v2_9588 to i8*
  store i8 %v1_9588, i8* %v3_9588, align 1
  %v2_9590 = load i32, i32* %r1.global-to-local, align 4
  %v3_9590 = add i32 %v2_9590, 1
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v5_8ff8, i8* %v4_9590, align 1
  store i32 %v4_9594, i32* %r0.global-to-local, align 4
  %v2_9598 = load i32, i32* %r1.global-to-local, align 4
  %v3_9598 = add i32 %v2_9598, 8
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v5_9030, i8* %v4_9598, align 1
  %v3_959c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_959c, i32* %r2.global-to-local, align 4
  store i32 %v6_90c8, i32* %ip.global-to-local, align 4
  %v3_95a4 = mul i32 %v3_959c, 32
  store i32 %v3_95a4, i32* %r3.global-to-local, align 4
  %v1_95a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, 12
  %v3_95a8 = inttoptr i32 %v2_95a8 to i32*
  store i32 %v6_90c8, i32* %v3_95a8, align 4
  %v0_95ac = load i32, i32* %r3.global-to-local, align 4
  %v1_95ac = load i32, i32* %r2.global-to-local, align 4
  %tmp87 = mul i32 %v1_95ac, -8
  %v5_95ac = add i32 %v0_95ac, %tmp87
  %v1_95b0 = load i32, i32* @r8, align 4
  %v2_95b0 = add i32 %v5_95ac, %v1_95b0
  store i32 %v2_95b0, i32* %r3.global-to-local, align 4
  %v1_95b4 = add i32 %v2_95b0, 16
  %v2_95b4 = inttoptr i32 %v1_95b4 to i32*
  %v3_95b4 = load i32, i32* %v2_95b4, align 4
  store i32 %v3_95b4, i32* %ip.global-to-local, align 4
  %v1_95b8 = add i32 %v1_95ac, 1
  store i32 %v1_95b8, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_95c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_95c4 = add i32 %v2_95c4, 6
  %v4_95c4 = inttoptr i32 %v3_95c4 to i8*
  store i8 64, i8* %v4_95c4, align 1
  %v0_95c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95c8 = trunc i32 %v0_95c8 to i8
  %v2_95c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_95c8 = add i32 %v2_95c8, 7
  %v4_95c8 = inttoptr i32 %v3_95c8 to i8*
  store i8 %v1_95c8, i8* %v4_95c8, align 1
  %v0_95cc = load i32, i32* %ip.global-to-local, align 4
  %v1_95cc = load i32, i32* %r1.global-to-local, align 4
  %v2_95cc = add i32 %v1_95cc, 16
  %v3_95cc = inttoptr i32 %v2_95cc to i32*
  store i32 %v0_95cc, i32* %v3_95cc, align 4
  store i32 %v3_9518, i32* %r3.global-to-local, align 4
  store i32 %v7_9514, i32* %ip.global-to-local, align 4
  %v2_95dc = load i32, i32* %r1.global-to-local, align 4
  %v3_95dc = add i32 %v2_95dc, 2
  %v4_95dc = inttoptr i32 %v3_95dc to i8*
  store i8 %v5_91d4, i8* %v4_95dc, align 1
  %v0_95e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e0 = trunc i32 %v0_95e0 to i8
  %v2_95e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_95e0 = add i32 %v2_95e0, 3
  %v4_95e0 = inttoptr i32 %v3_95e0 to i8*
  store i8 %v1_95e0, i8* %v4_95e0, align 1
  %v0_95e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_95e4 = trunc i32 %v0_95e4 to i8
  %v2_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_95e4 = add i32 %v2_95e4, 4
  %v4_95e4 = inttoptr i32 %v3_95e4 to i8*
  store i8 %v1_95e4, i8* %v4_95e4, align 1
  store i32 %v3_951c, i32* %r2.global-to-local, align 4
  store i32 %v4_95ec, i32* %r3.global-to-local, align 4
  store i32 %v4_95f0, i32* %ip.global-to-local, align 4
  %v0_95f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95f4 = add i32 %v0_95f4, 20
  store i32 %v1_95f4, i32* %r0.global-to-local, align 4
  %v3_95f8 = add i32 %v0_95f4, 5
  %v4_95f8 = inttoptr i32 %v3_95f8 to i8*
  store i8 %v1_95f8, i8* %v4_95f8, align 1
  %v0_95fc = load i32, i32* @r4, align 4
  %v1_95fc = trunc i32 %v0_95fc to i8
  %v2_95fc = load i32, i32* %r1.global-to-local, align 4
  %v3_95fc = add i32 %v2_95fc, 20
  %v4_95fc = inttoptr i32 %v3_95fc to i8*
  store i8 %v1_95fc, i8* %v4_95fc, align 1
  %v0_9600 = load i32, i32* %r3.global-to-local, align 4
  %v1_9600 = trunc i32 %v0_9600 to i8
  %v2_9600 = load i32, i32* %r0.global-to-local, align 4
  %v3_9600 = add i32 %v2_9600, 5
  %v4_9600 = inttoptr i32 %v3_9600 to i8*
  store i8 %v1_9600, i8* %v4_9600, align 1
  %v0_9604 = load i32, i32* %ip.global-to-local, align 4
  %v1_9604 = trunc i32 %v0_9604 to i8
  %v2_9604 = load i32, i32* %r0.global-to-local, align 4
  %v3_9604 = add i32 %v2_9604, 1
  %v4_9604 = inttoptr i32 %v3_9604 to i8*
  store i8 %v1_9604, i8* %v4_9604, align 1
  %v0_9608 = load i32, i32* @r5, align 4
  %v1_9608 = trunc i32 %v0_9608 to i8
  %v2_9608 = load i32, i32* %r0.global-to-local, align 4
  %v3_9608 = add i32 %v2_9608, 2
  %v4_9608 = inttoptr i32 %v3_9608 to i8*
  store i8 %v1_9608, i8* %v4_9608, align 1
  store i32 %v4_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  %v1_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, %v1_9610
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  %v2_9614 = load i32, i32* %r0.global-to-local, align 4
  %v3_9614 = add i32 %v2_9614, 3
  %v4_9614 = inttoptr i32 %v3_9614 to i8*
  store i8 %v1_9614, i8* %v4_9614, align 1
  %v0_9618 = load i32, i32* @r7, align 4
  %v1_9618 = trunc i32 %v0_9618 to i8
  %v2_9618 = load i32, i32* %r0.global-to-local, align 4
  %v3_9618 = add i32 %v2_9618, 4
  %v4_9618 = inttoptr i32 %v3_9618 to i8*
  store i8 %v1_9618, i8* %v4_9618, align 1
  %v0_961c = load i32, i32* @r6, align 4
  store i32 %v0_961c, i32* %stack_var_-40, align 4
  %v5_9620 = icmp slt i32 %v0_9610, %v1_9610
  br i1 %v5_9620, label %dec_label_pc_9544, label %dec_label_pc_92e4

; uselistorder directives
  uselistorder i32 %v1_95ac, { 1, 0 }
  uselistorder i32 %v3_951c, { 2, 1, 0 }
  uselistorder i32 %v3_9518, { 1, 0 }
  uselistorder i32 %v7_9514, { 1, 0 }
  uselistorder i32 %v4_94dc, { 1, 0 }
  uselistorder i32 %v0_94d4, { 0, 2, 1 }
  uselistorder i32 %v0_94b8, { 0, 2, 1 }
  uselistorder i32 %v4_94a4, { 1, 0 }
  uselistorder i32 %v0_949c, { 0, 2, 1 }
  uselistorder i32 %v2_9470, { 1, 0 }
  uselistorder i32 %v8_9450, { 2, 0, 1, 3 }
  uselistorder i32 %v3_943c, { 1, 0 }
  uselistorder i32 %v3_9418, { 2, 3, 1, 0 }
  uselistorder i1 %v2_940c, { 1, 0 }
  uselistorder i32 %v1_9400, { 1, 2, 3, 0 }
  uselistorder i32 %v1_93fc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_93a4, { 0, 2, 1 }
  uselistorder i32 %v0_938c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_9378, { 1, 0 }
  uselistorder i32 %v2_9374, { 0, 2, 1 }
  uselistorder i1 %v7_9324, { 2, 1, 0 }
  uselistorder i1 %v3_9490, { 1, 0, 2, 3 }
  uselistorder i32 %v3_91e836, { 1, 0 }
  uselistorder i8 %v5_91d4, { 0, 2, 1 }
  uselistorder i32 %v3_91c0, { 1, 0 }
  uselistorder i32 %v1_91b0, { 2, 3, 0, 1 }
  uselistorder i32 %v1_91ac, { 1, 2, 0 }
  uselistorder i32 %v1_91a4, { 1, 0, 2 }
  uselistorder i32 %v1_919c, { 1, 0 }
  uselistorder i32 %v1_9174, { 1, 0, 2 }
  uselistorder i32 %v3_9154, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_9134, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_9130, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_912c, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_9120, { 3, 1, 2, 0 }
  uselistorder i1 %v7_910c, { 1, 0 }
  uselistorder i1 %v7_90e0, { 1, 0 }
  uselistorder i32 %v3_90dc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_90c8, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_90b4, { 3, 1, 2, 0 }
  uselistorder i32 %v1_9040, { 1, 0 }
  uselistorder i8 %v5_9030, { 1, 0, 2 }
  uselistorder i32 %v5_9014, { 1, 0 }
  uselistorder i8 %v5_8ff8, { 0, 2, 1 }
  uselistorder i32 %v6_8fd8, { 1, 0 }
  uselistorder i32 %v2_8fc0, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_8fa4, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 13, 12, 15, 14, 16, 17, 18, 20, 19, 22, 21, 23, 25, 24, 31, 26, 27, 28, 29, 30, 36, 32, 33, 34, 35, 1, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_9508, { 1, 0 }
  uselistorder label %dec_label_pc_94f0, { 1, 0 }
  uselistorder label %dec_label_pc_9364, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92ec, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_962c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_962c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_962c = load i32, i32* @r4, align 4
  %v15_962c = load i32, i32* @r8, align 4
  %v21_962c = load i32, i32* @sl, align 4
  %v1_9630 = urem i32 %arg1, 256
  store i32 %v1_9630, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9630, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9648 = urem i32 %arg3, 256
  store i32 %v1_9648, i32* @r4, align 4
  %v2_964c = call i32 @function_11cd0(i32 %v1_9630, i32 4)
  %v0_9650 = load i32, i32* @r5, align 4
  store i32 %v0_9650, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9660 = load i32, i32* @r4, align 4
  store i32 %v0_9660, i32* %r0.global-to-local, align 4
  %v5_9664 = inttoptr i32 %v0_9650 to i32*
  %v6_9664 = call i32 @function_85e0(i32 %v0_9660, i32* %v5_9664, i32 2, i32 0)
  %v1_9670 = urem i32 %v6_9664, 256
  store i32 %v1_9670, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_967c = load i32, i32* @r5, align 4
  store i32 %v0_967c, i32* %r1.global-to-local, align 4
  %v0_9680 = load i32, i32* @r4, align 4
  store i32 %v0_9680, i32* %r0.global-to-local, align 4
  %v5_9684 = trunc i32 %v6_9664 to i8
  %v6_9688 = inttoptr i32 %v0_967c to i32*
  %v7_9688 = call i32 @function_85e0(i32 %v0_9680, i32* %v6_9688, i32 3, i32 65535)
  %v0_968c = load i32, i32* @r5, align 4
  store i32 %v0_968c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9688, i32* @r7, align 4
  %v0_969c = load i32, i32* @r4, align 4
  store i32 %v0_969c, i32* %r0.global-to-local, align 4
  %v4_96a0 = inttoptr i32 %v0_968c to i32*
  %v5_96a0 = call i32 @function_85e0(i32 %v0_969c, i32* %v4_96a0, i32 4, i32 64)
  %v1_96a8 = urem i32 %v5_96a0, 256
  store i32 %v1_96a8, i32* %ip.global-to-local, align 4
  %v0_96ac = load i32, i32* @r5, align 4
  store i32 %v0_96ac, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96b8 = load i32, i32* @r4, align 4
  store i32 %v0_96b8, i32* %r0.global-to-local, align 4
  %v5_96bc = trunc i32 %v5_96a0 to i8
  %v6_96c0 = inttoptr i32 %v0_96ac to i32*
  %v7_96c0 = call i32 @function_85e0(i32 %v0_96b8, i32* %v6_96c0, i32 5, i32 1)
  %v1_96cc = urem i32 %v7_96c0, 256
  store i32 %v1_96cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_96d8 = load i32, i32* @r5, align 4
  store i32 %v0_96d8, i32* %r1.global-to-local, align 4
  %v0_96dc = load i32, i32* @r4, align 4
  store i32 %v0_96dc, i32* %r0.global-to-local, align 4
  %v5_96e4 = inttoptr i32 %v0_96d8 to i32*
  %v6_96e4 = call i32 @function_85e0(i32 %v0_96dc, i32* %v5_96e4, i32 6, i32 65535)
  %v0_96ec = load i32, i32* @r5, align 4
  store i32 %v0_96ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_96e4, i32* @sl, align 4
  %v0_96fc = load i32, i32* @r4, align 4
  store i32 %v0_96fc, i32* %r0.global-to-local, align 4
  %v4_9700 = inttoptr i32 %v0_96ec to i32*
  %v5_9700 = call i32 @function_85e0(i32 %v0_96fc, i32* %v4_9700, i32 7, i32 65535)
  %v0_9704 = load i32, i32* @r5, align 4
  store i32 %v0_9704, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9700, i32* @r8, align 4
  %v0_9714 = load i32, i32* @r4, align 4
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  %v4_9718 = inttoptr i32 %v0_9704 to i32*
  %v5_9718 = call i32 @function_85e0(i32 %v0_9714, i32* %v4_9718, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9728 = load i32, i32* @r5, align 4
  store i32 %v0_9728, i32* %r1.global-to-local, align 4
  %v0_972c = load i32, i32* @r4, align 4
  store i32 %v0_972c, i32* %r0.global-to-local, align 4
  %v4_9730 = inttoptr i32 %v0_9728 to i32*
  %v5_9730 = call i32 @function_85e0(i32 %v0_972c, i32* %v4_9730, i32 1, i32 1)
  %v1_9738 = urem i32 %v5_9730, 256
  store i32 %v1_9738, i32* %ip.global-to-local, align 4
  %v0_973c = load i32, i32* @r5, align 4
  store i32 %v0_973c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9748 = load i32, i32* @r4, align 4
  store i32 %v0_9748, i32* %r0.global-to-local, align 4
  %v5_9750 = inttoptr i32 %v0_973c to i32*
  %v6_9750 = call i32 @function_85e0(i32 %v0_9748, i32* %v5_9750, i32 19, i32 0)
  %v0_9758 = load i32, i32* @r5, align 4
  store i32 %v0_9758, i32* %r1.global-to-local, align 4
  %v2_975c = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_975c, i32* %r3.global-to-local, align 4
  store i32 %v6_9750, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9768 = load i32, i32* @r4, align 4
  store i32 %v0_9768, i32* %r0.global-to-local, align 4
  %v4_976c = inttoptr i32 %v0_9758 to i32*
  %v5_976c = call i32 @function_85e0(i32 %v0_9768, i32* %v4_976c, i32 25, i32 %v2_975c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9780 = call i32 @function_119e4(i32 2, i32 3, i32 6)
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  %v7_9784 = icmp eq i32 %v3_9780, -1
  store i1 %v7_9784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9784, label %dec_label_pc_9c68, label %dec_label_pc_9790

dec_label_pc_9790:                                ; preds = %dec_label_pc_962c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9798 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9798, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_97ac = call i32 @function_119b4(i32 %v3_9780, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_97ac, i32* %r0.global-to-local, align 4
  %v7_97b0 = icmp eq i32 %v6_97ac, -1
  store i1 %v7_97b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b0, label %dec_label_pc_9c60, label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %dec_label_pc_9790
  %v0_97b8 = load i32, i32* @sl, align 4
  %v3_97b8 = mul i32 %v0_97b8, 65536
  store i32 %v3_97b8, i32* %sl.global-to-local, align 4
  %v0_97bc = load i32, i32* @r8, align 4
  %v3_97bc = mul i32 %v0_97bc, 65536
  store i32 %v3_97bc, i32* %r8.global-to-local, align 4
  %v0_97c4 = load i32, i32* @r7, align 4
  %v3_97c4 = mul i32 %v0_97c4, 65536
  %v0_97c8 = load i32, i32* @r6, align 4
  %v1_97c8 = urem i32 %v0_97c8, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_97d0 = urem i32 %v0_97c4, 65536
  store i32 %v3_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = urem i32 %v0_97b8, 65536
  store i32 %v3_97d4, i32* %r3.global-to-local, align 4
  %v3_97d8 = urem i32 %v0_97bc, 65536
  store i32 %v3_97d8, i32* %r1.global-to-local, align 4
  %v0_97dc = load i32, i32* @fp, align 4
  %v2_97dc = icmp eq i32 %v0_97dc, 0
  store i1 %v2_97dc, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_97dc, 1
  br i1 %tmp88, label %dec_label_pc_9d88, label %dec_label_pc_97fc

dec_label_pc_97fc:                                ; preds = %dec_label_pc_97b8
  %v3_9800 = mul i32 %v5_9718, 65536
  %v0_97c4.not = or i32 %v0_97c4, -65536
  %v1_9808 = xor i32 %v0_97c4.not, 65535
  %v1_9810 = add i32 %v3_9800, 4325376
  %v1_9814 = urem i32 %v0_97b8, 256
  %v3_981c = udiv i32 %v1_9810, 256
  %v1_9820 = add i32 %v3_9800, 524288
  %v1_9828 = add i32 %v3_9800, 1835008
  %v1_982c = urem i32 %v0_97bc, 256
  %v1_9830 = and i32 %v3_981c, 65280
  store i32 %v1_9830, i32* %r0.global-to-local, align 4
  %v3_9838 = udiv i32 %v1_9828, 256
  %tmp89 = mul nsw i32 %v1_9808, 256
  %v1_9850 = and i32 %v3_9838, 65280
  store i32 %v1_9850, i32* %ip.global-to-local, align 4
  %v1_9854 = and i32 %tmp89, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_9854, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_9808, 256
  %v4_9840 = sdiv i32 %v1_9810, 16777216
  %v5_9870 = trunc i32 %tmp91 to i8
  %v3_987c = mul nuw nsw i32 %v1_9814, 256
  %v3_9884 = ashr i32 %v1_9810, 31
  %v3_9888 = mul nuw nsw i32 %v1_982c, 256
  store i32 %v3_9888, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_97b8, 256
  %v4_988c = urem i32 %tmp92, 256
  %v5_988c = or i32 %v4_988c, %v3_987c
  store i32 %v5_988c, i32* @r7, align 4
  %v3_9890 = udiv i32 %v1_9820, 256
  %tmp93 = udiv i32 %v0_97bc, 256
  %v4_9894 = urem i32 %tmp93, 256
  %v5_9894 = or i32 %v4_9894, %v3_9888
  store i32 %v5_9894, i32* %sl.global-to-local, align 4
  %v5_9898 = trunc i32 %v3_9884 to i8
  %v3_98a0 = sdiv i32 %v3_97c4, 16777216
  %v7_98a0 = sdiv i32 %v1_9828, 16777216
  %v1_98a4 = and i32 %v3_9890, 65280
  store i32 %v1_98a4, i32* @r6, align 4
  %v3_98a8 = ashr i32 %v3_97c4, 31
  %v3_98ac = ashr i32 %v1_9828, 31
  %v3_98b0 = udiv i32 %v1_9808, 65536
  %v4_98b4 = udiv i32 %v1_9820, 16777216
  %v5_98b4 = or i32 %v4_98b4, %v1_98a4
  store i32 %v5_98b4, i32* %r8.global-to-local, align 4
  store i32 %v1_9814, i32* %r1.global-to-local, align 4
  store i32 %v1_982c, i32* %r2.global-to-local, align 4
  %v3_98cc37 = udiv i32 %v1_98a4, 256
  store i32 %v3_98cc37, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_992c = sext i8 %v5_96bc to i32
  %v2_9a2c = icmp eq i32 %v1_97c8, 0
  %sext16 = mul i32 %v0_97b8, 16777216
  %v4_9a40 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_9820, 256
  %v4_9a54 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_97bc, 16777216
  %v4_9a5c = sdiv i32 %sext18, 16777216
  %v1_9a64 = trunc i32 %v4_9a54 to i8
  br label %dec_label_pc_98e0

dec_label_pc_98e0:                                ; preds = %bb105, %dec_label_pc_97fc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_98ec = call i32 @function_11cd0(i32 1510, i32 4)
  store i32 %v2_98ec, i32* %r0.global-to-local, align 4
  store i32 %v2_964c, i32* %r1.global-to-local, align 4
  %v3_98f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_98f4, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r4, align 4
  %v5_98f8 = mul i32 %v2_98f8, 4
  %v6_98f8 = add i32 %v5_98f8, %v2_964c
  %v7_98f8 = inttoptr i32 %v6_98f8 to i32*
  store i32 %v2_98ec, i32* %v7_98f8, align 4
  %v0_98fc = load i32, i32* %r1.global-to-local, align 4
  %v1_98fc = load i32, i32* %r3.global-to-local, align 4
  %v4_98fc = mul i32 %v1_98fc, 4
  %v5_98fc = add i32 %v4_98fc, %v0_98fc
  %v6_98fc = inttoptr i32 %v5_98fc to i32*
  %v7_98fc = load i32, i32* %v6_98fc, align 4
  store i32 %v7_98fc, i32* %r4.global-to-local, align 4
  %v1_9900 = inttoptr i32 %v7_98fc to i8*
  %v2_9900 = load i8, i8* %v1_9900, align 1
  %tmp = urem i8 %v2_9900, 16
  %v1_9904 = zext i8 %tmp to i32
  %v1_9908 = or i32 %v1_9904, 64
  store i32 %v1_9908, i32* %r2.global-to-local, align 4
  %v1_990c = trunc i32 %v1_9908 to i8
  store i8 %v1_990c, i8* %v1_9900, align 1
  %v0_9910 = load i32, i32* %r4.global-to-local, align 4
  %v1_9910 = inttoptr i32 %v0_9910 to i8*
  %v2_9910 = load i8, i8* %v1_9910, align 1
  %v1_9914 = and i8 %v2_9910, -16
  %v1_9918 = or i8 %v1_9914, 5
  store i32 %v1_96cc, i32* %r2.global-to-local, align 4
  store i8 %v1_9918, i8* %v1_9910, align 1
  %v2_9928 = load i32, i32* %r4.global-to-local, align 4
  %v3_9928 = add i32 %v2_9928, 1
  %v4_9928 = inttoptr i32 %v3_9928 to i8*
  store i8 %v5_9684, i8* %v4_9928, align 1
  store i32 %v4_992c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9934 = load i32, i32* %r4.global-to-local, align 4
  %v3_9934 = add i32 %v2_9934, 8
  %v4_9934 = inttoptr i32 %v3_9934 to i8*
  store i8 %v5_96bc, i8* %v4_9934, align 1
  %v0_9938 = load i32, i32* %r2.global-to-local, align 4
  %v1_9938 = load i32, i32* %ip.global-to-local, align 4
  %v9_9938 = icmp eq i32 %v0_9938, %v1_9938
  store i1 %v9_9938, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9884, i32* %r3.global-to-local, align 4
  store i32 %v4_9840, i32* %r2.global-to-local, align 4
  %v2_9944 = load i32, i32* %r4.global-to-local, align 4
  %v3_9944 = add i32 %v2_9944, 3
  %v4_9944 = inttoptr i32 %v3_9944 to i8*
  store i8 %v5_9898, i8* %v4_9944, align 1
  %v0_9948 = load i32, i32* %r2.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* %r4.global-to-local, align 4
  %v3_9948 = add i32 %v2_9948, 2
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  %v0_994c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_994c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_98e0
  store i32 %v3_98a8, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_98a8 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_98e0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_98a8, i32* %r2.global-to-local, align 4
  %v3_9954 = load i32, i32* %r4.global-to-local, align 4
  %v4_9954 = add i32 %v3_9954, 6
  %v5_9954 = inttoptr i32 %v4_9954 to i8*
  store i8 64, i8* %v5_9954, align 1
  %v0_995c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_995c.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_98a8.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_995c = load i32, i32* %r4.global-to-local, align 4
  %v3_995c = add i32 %v2_995c, 5
  %v4_995c = inttoptr i32 %v3_995c to i8*
  store i8 %v3_98a8.sink.off0, i8* %v4_995c, align 1
  store i32 %v3_98a0, i32* %r1.global-to-local, align 4
  %v0_9964 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9964, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_9964 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_9964, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_9968 = load i32, i32* %r3.global-to-local, align 4
  %v1_9968 = trunc i32 %v0_9968 to i8
  %v2_9968 = load i32, i32* %r4.global-to-local, align 4
  %v3_9968 = add i32 %v2_9968, 9
  %v4_9968 = inttoptr i32 %v3_9968 to i8*
  store i8 %v1_9968, i8* %v4_9968, align 1
  %v0_996c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_996c, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_996c = load i32, i32* %r2.global-to-local, align 4
  %v2_996c = trunc i32 %v1_996c to i8
  %v3_996c = load i32, i32* %r4.global-to-local, align 4
  %v4_996c = add i32 %v3_996c, 7
  %v5_996c = inttoptr i32 %v4_996c to i8*
  store i8 %v2_996c, i8* %v5_996c, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_9970 = load i32, i32* %stack_var_-40, align 4
  %v5_9978 = mul i32 %v3_9970, 24
  store i32 %v5_9978, i32* %r3.global-to-local, align 4
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  %v1_9980 = load i32, i32* %r4.global-to-local, align 4
  %v2_9980 = add i32 %v1_9980, 12
  %v3_9980 = inttoptr i32 %v2_9980 to i32*
  store i32 %v5_976c, i32* %v3_9980, align 4
  %v0_9984 = load i32, i32* %r3.global-to-local, align 4
  %v1_9984 = load i32, i32* @sb, align 4
  %v2_9984 = add i32 %v1_9984, %v0_9984
  store i32 %v2_9984, i32* %r3.global-to-local, align 4
  %v1_9988 = add i32 %v2_9984, 16
  %v2_9988 = inttoptr i32 %v1_9988 to i32*
  %v3_9988 = load i32, i32* %v2_9988, align 4
  store i32 %v3_9988, i32* %r2.global-to-local, align 4
  %v0_998c = load i32, i32* %r1.global-to-local, align 4
  %v1_998c = trunc i32 %v0_998c to i8
  %v2_998c = load i32, i32* %r4.global-to-local, align 4
  %v3_998c = add i32 %v2_998c, 4
  %v4_998c = inttoptr i32 %v3_998c to i8*
  store i8 %v1_998c, i8* %v4_998c, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* %r4.global-to-local, align 4
  %v1_9994 = add i32 %v0_9994, 20
  store i32 %v1_9994, i32* %r1.global-to-local, align 4
  %v3_9998 = add i32 %v0_9994, 22
  %v4_9998 = inttoptr i32 %v3_9998 to i8*
  store i8 101, i8* %v4_9998, align 1
  %v0_999c = load i32, i32* %r2.global-to-local, align 4
  %v1_999c = load i32, i32* %r4.global-to-local, align 4
  %v2_999c = add i32 %v1_999c, 16
  %v3_999c = inttoptr i32 %v2_999c to i32*
  store i32 %v0_999c, i32* %v3_999c, align 4
  %v0_99a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_99a0 = add i32 %v0_99a0, 24
  store i32 %v1_99a0, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_99a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99a8 = add i32 %v0_99a8, -93
  store i32 %v1_99a8, i32* %r3.global-to-local, align 4
  %v2_99ac = load i32, i32* %r1.global-to-local, align 4
  %v3_99ac = add i32 %v2_99ac, 3
  %v4_99ac = inttoptr i32 %v3_99ac to i8*
  store i8 88, i8* %v4_99ac, align 1
  %v0_99b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_99b0 = trunc i32 %v0_99b0 to i8
  %v2_99b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_99b0 = add i32 %v2_99b0, 12
  %v4_99b0 = inttoptr i32 %v3_99b0 to i8*
  store i8 %v1_99b0, i8* %v4_99b0, align 1
  %v0_99b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_99b4 = trunc i32 %v0_99b4 to i8
  %v2_99b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_99b4 = add i32 %v2_99b4, 13
  %v4_99b4 = inttoptr i32 %v3_99b4 to i8*
  store i8 %v1_99b4, i8* %v4_99b4, align 1
  %v0_99b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_99b8 = add i32 %v0_99b8, 38
  %v2_99b8 = inttoptr i32 %v1_99b8 to i8*
  %v3_99b8 = load i8, i8* %v2_99b8, align 1
  %tmp116 = urem i8 %v3_99b8, 16
  %v1_99bc = zext i8 %tmp116 to i32
  %v1_99c0 = or i32 %v1_99bc, 64
  store i32 %v1_99c0, i32* %r3.global-to-local, align 4
  %v1_99c4 = trunc i32 %v1_99c0 to i8
  store i8 %v1_99c4, i8* %v2_99b8, align 1
  %v0_99c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_99c8 = add i32 %v0_99c8, 38
  %v2_99c8 = inttoptr i32 %v1_99c8 to i8*
  %v3_99c8 = load i8, i8* %v2_99c8, align 1
  %v1_99cc = and i8 %v3_99c8, -16
  %v1_99d0 = or i8 %v1_99cc, 5
  store i8 %v1_99d0, i8* %v2_99c8, align 1
  %v0_99dc = load i32, i32* %r4.global-to-local, align 4
  %v1_99dc = add i32 %v0_99dc, 38
  store i32 %v1_99dc, i32* @r5, align 4
  %v3_99e0 = add i32 %v0_99dc, 39
  %v4_99e0 = inttoptr i32 %v3_99e0 to i8*
  store i8 %v5_9684, i8* %v4_99e0, align 1
  store i32 %v7_98a0, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_98ac, i32* %r2.global-to-local, align 4
  %v2_99f0 = load i32, i32* @r5, align 4
  %v3_99f0 = add i32 %v2_99f0, 4
  %v4_99f0 = inttoptr i32 %v3_99f0 to i8*
  store i8 %v5_9870, i8* %v4_99f0, align 1
  %v0_99f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99f4 = trunc i32 %v0_99f4 to i8
  %v2_99f4 = load i32, i32* @r5, align 4
  %v3_99f4 = add i32 %v2_99f4, 2
  %v4_99f4 = inttoptr i32 %v3_99f4 to i8*
  store i8 %v1_99f4, i8* %v4_99f4, align 1
  %v0_99f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_99f8, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_98b0, i32* %r1.global-to-local, align 4
  %v0_9a00 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a00 = trunc i32 %v0_9a00 to i8
  %v2_9a00 = load i32, i32* @r5, align 4
  %v3_9a00 = add i32 %v2_9a00, 3
  %v4_9a00 = inttoptr i32 %v3_9a00 to i8*
  store i8 %v1_9a00, i8* %v4_9a00, align 1
  store i32 %v4_992c, i32* %r2.global-to-local, align 4
  %v0_9a08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a08, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_9a08 = load i32, i32* %r3.global-to-local, align 4
  %v2_9a08 = trunc i32 %v1_9a08 to i8
  %v3_9a08 = load i32, i32* @r5, align 4
  %v4_9a08 = add i32 %v3_9a08, 6
  %v5_9a08 = inttoptr i32 %v4_9a08 to i8*
  store i8 %v2_9a08, i8* %v5_9a08, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9a10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a10 = trunc i32 %v0_9a10 to i8
  %v2_9a10 = load i32, i32* @r5, align 4
  %v3_9a10 = add i32 %v2_9a10, 5
  %v4_9a10 = inttoptr i32 %v3_9a10 to i8*
  store i8 %v1_9a10, i8* %v4_9a10, align 1
  %v0_9a14 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a14 = trunc i32 %v0_9a14 to i8
  %v2_9a14 = load i32, i32* @r5, align 4
  %v3_9a14 = add i32 %v2_9a14, 8
  %v4_9a14 = inttoptr i32 %v3_9a14 to i8*
  store i8 %v1_9a14, i8* %v4_9a14, align 1
  %v0_9a18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a18, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_9a18 = load i32, i32* %ip.global-to-local, align 4
  %v2_9a18 = trunc i32 %v1_9a18 to i8
  %v3_9a18 = load i32, i32* @r5, align 4
  %v4_9a18 = add i32 %v3_9a18, 7
  %v5_9a18 = inttoptr i32 %v4_9a18 to i8*
  store i8 %v2_9a18, i8* %v5_9a18, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_9a1c = load i32, i32* %r3.global-to-local, align 4
  %v1_9a1c = trunc i32 %v0_9a1c to i8
  %v2_9a1c = load i32, i32* @r5, align 4
  %v3_9a1c = add i32 %v2_9a1c, 9
  %v4_9a1c = inttoptr i32 %v3_9a1c to i8*
  store i8 %v1_9a1c, i8* %v4_9a1c, align 1
  %v0_9a20 = call i32 @function_e580()
  store i32 %v0_9a20, i32* %r0.global-to-local, align 4
  store i32 %v1_97c8, i32* %r1.global-to-local, align 4
  store i1 %v2_9a2c, i1* %cpsr_z.global-to-local, align 1
  %v1_9a30 = sub i32 1023, %v0_9a20
  store i32 %v1_9a30, i32* %r3.global-to-local, align 4
  br i1 %v2_9a2c, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_9a38 = load i32, i32* @r5, align 4
  %v3_9a38 = add i32 %v2_9a38, 16
  %v4_9a38 = inttoptr i32 %v3_9a38 to i32*
  store i32 %v1_9a30, i32* %v4_9a38, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_9a34 = load i32, i32* %r4.global-to-local, align 4
  %v2_9a34 = add i32 %v1_9a34, 16
  %v3_9a34 = inttoptr i32 %v2_9a34 to i32*
  %v4_9a34 = load i32, i32* %v3_9a34, align 4
  store i32 %v4_9a34, i32* %r3.global-to-local, align 4
  %v2_9a3c = load i32, i32* @r5, align 4
  %v3_9a3c = add i32 %v2_9a3c, 16
  %v4_9a3c = inttoptr i32 %v3_9a3c to i32*
  store i32 %v4_9a34, i32* %v4_9a3c, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_9a40, i32* %r3.global-to-local, align 4
  %v0_9a44 = load i32, i32* %r4.global-to-local, align 4
  %v1_9a44 = add i32 %v0_9a44, 58
  store i32 %v1_9a44, i32* @r6, align 4
  %v1_9a48 = load i32, i32* @r5, align 4
  %v2_9a48 = add i32 %v1_9a48, 12
  %v3_9a48 = inttoptr i32 %v2_9a48 to i32*
  store i32 %v0_9a20, i32* %v3_9a48, align 4
  %v0_9a4c = load i32, i32* %r3.global-to-local, align 4
  %v1_9a4c = trunc i32 %v0_9a4c to i8
  %v2_9a4c = load i32, i32* @r6, align 4
  %v3_9a4c = add i32 %v2_9a4c, 1
  %v4_9a4c = inttoptr i32 %v3_9a4c to i8*
  store i8 %v1_9a4c, i8* %v4_9a4c, align 1
  %v3_9a50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9a50, i32* %r3.global-to-local, align 4
  store i32 %v4_9a54, i32* %r2.global-to-local, align 4
  %v1_9a58 = add i32 %v3_9a50, 1
  store i32 %v1_9a58, i32* @r4, align 4
  store i32 %v4_9a5c, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @fp, align 4
  %v9_9a60 = icmp eq i32 %v1_9a58, %v1_9a60
  store i1 %v9_9a60, i1* %cpsr_z.global-to-local, align 1
  %v2_9a64 = load i32, i32* @r6, align 4
  %v3_9a64 = add i32 %v2_9a64, 5
  %v4_9a64 = inttoptr i32 %v3_9a64 to i8*
  store i8 %v1_9a64, i8* %v4_9a64, align 1
  %v0_9a68 = load i32, i32* @r7, align 4
  %v1_9a68 = trunc i32 %v0_9a68 to i8
  %v2_9a68 = load i32, i32* @r6, align 4
  %v3_9a68 = inttoptr i32 %v2_9a68 to i8*
  store i8 %v1_9a68, i8* %v3_9a68, align 1
  %v0_9a6c = load i32, i32* %sl.global-to-local, align 4
  %v1_9a6c = trunc i32 %v0_9a6c to i8
  %v2_9a6c = load i32, i32* @r6, align 4
  %v3_9a6c = add i32 %v2_9a6c, 2
  %v4_9a6c = inttoptr i32 %v3_9a6c to i8*
  store i8 %v1_9a6c, i8* %v4_9a6c, align 1
  %v0_9a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a70 = trunc i32 %v0_9a70 to i8
  %v2_9a70 = load i32, i32* @r6, align 4
  %v3_9a70 = add i32 %v2_9a70, 3
  %v4_9a70 = inttoptr i32 %v3_9a70 to i8*
  store i8 %v1_9a70, i8* %v4_9a70, align 1
  %v0_9a74 = load i32, i32* %r8.global-to-local, align 4
  %v1_9a74 = trunc i32 %v0_9a74 to i8
  %v2_9a74 = load i32, i32* @r6, align 4
  %v3_9a74 = add i32 %v2_9a74, 4
  %v4_9a74 = inttoptr i32 %v3_9a74 to i8*
  store i8 %v1_9a74, i8* %v4_9a74, align 1
  %v0_9a78 = load i32, i32* @r4, align 4
  store i32 %v0_9a78, i32* %stack_var_-40, align 4
  %v5_9a7c = icmp slt i32 %v1_9a58, %v1_9a60
  br i1 %v5_9a7c, label %dec_label_pc_98e0, label %dec_label_pc_9a80

dec_label_pc_9a80:                                ; preds = %bb105
  %v1_9a88 = add i32 %v5_9718, 8
  store i32 %v1_9a88, i32* %r2.global-to-local, align 4
  %v1_9a8c = add i32 %v5_9718, 66
  store i32 %v1_9a8c, i32* %r3.global-to-local, align 4
  %v0_9a98.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_9a98.preheader

dec_label_pc_9a98.preheader:                      ; preds = %dec_label_pc_9a80, %dec_label_pc_9d88
  %v0_9a98.pre = phi i32 [ %v0_9a98.pre.pre, %dec_label_pc_9a80 ], [ %v0_97dc, %dec_label_pc_9d88 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_9a8c, %dec_label_pc_9a80 ], [ %v1_9d94, %dec_label_pc_9d88 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_9a88, %dec_label_pc_9a80 ], [ %v1_9d90, %dec_label_pc_9d88 ]
  %v3_9ce8 = icmp eq i32 %v3_97d0, 65535
  %v2_9d58 = icmp eq i32 %v1_97c8, 0
  %v2_9b3c = ptrtoint i32* %stack_var_-44 to i32
  %v2_9b54 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9b64 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9b70 = ptrtoint i32* %stack_var_-50 to i32
  %v2_9b84 = icmp eq i32 %v1_9738, 0
  %v2_9ae0 = icmp eq i32 %v5_976c, -1
  %v7_9ae0 = icmp eq i32 %v5_976c, -1
  br label %dec_label_pc_9a98

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9b8c, %dec_label_pc_9a98.preheader
  %v0_9a98 = phi i32 [ %v0_9a98.pre, %dec_label_pc_9a98.preheader ], [ %v1_9c50, %dec_label_pc_9b8c ]
  %v2_9a98 = icmp eq i32 %v0_9a98, 0
  store i1 %v2_9a98, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_9a98, 1
  br label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9aa0, %dec_label_pc_9a98
  br i1 %tmp106, label %dec_label_pc_9aa0, label %dec_label_pc_9aa4

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9aa0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_9ab0

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9b8c, %dec_label_pc_9aa4
  %v1_9ac4 = phi i32 [ %v1_9c4c, %dec_label_pc_9b8c ], [ 0, %dec_label_pc_9aa4 ]
  %v5_9ab4 = mul i32 %v1_9ac4, 24
  %v1_9ab8 = load i32, i32* @sb, align 4
  %v2_9ab8 = add i32 %v1_9ab8, %v5_9ab4
  store i32 %v2_9ab8, i32* %r3.global-to-local, align 4
  store i32 %v2_964c, i32* %r1.global-to-local, align 4
  %v1_9ac0 = add i32 %v2_9ab8, 20
  %v2_9ac0 = inttoptr i32 %v1_9ac0 to i8*
  %v3_9ac0 = load i8, i8* %v2_9ac0, align 1
  %v4_9ac0 = zext i8 %v3_9ac0 to i32
  store i32 %v4_9ac0, i32* %r2.global-to-local, align 4
  %v4_9ac4 = mul i32 %v1_9ac4, 4
  %v5_9ac4 = add i32 %v4_9ac4, %v2_964c
  %v6_9ac4 = inttoptr i32 %v5_9ac4 to i32*
  %v7_9ac4 = load i32, i32* %v6_9ac4, align 4
  store i32 %v7_9ac4, i32* @r5, align 4
  %v7_9ac8 = icmp eq i8 %v3_9ac0, 31
  store i1 %v7_9ac8, i1* %cpsr_z.global-to-local, align 1
  %v1_9acc = add i32 %v7_9ac4, 24
  store i32 %v1_9acc, i32* @r8, align 4
  %v1_9ad0 = add i32 %v7_9ac4, 38
  store i32 %v1_9ad0, i32* @r6, align 4
  %v1_9ad4 = add i32 %v7_9ac4, 58
  store i32 %v1_9ad4, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_9ac0, 32
  br i1 %tmp117, label %dec_label_pc_9c70, label %dec_label_pc_9adc

dec_label_pc_9adc:                                ; preds = %dec_label_pc_9ab0
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  store i1 %v7_9ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ae0, label %dec_label_pc_9cd8, label %dec_label_pc_9ae8

dec_label_pc_9ae8:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9adc
  store i32 %v3_97d0, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9ce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9ce8, label %dec_label_pc_9cf4, label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge, %dec_label_pc_9ae8
  %v1_9b00 = phi i32 [ %v1_9b00.pre, %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge ], [ 65535, %dec_label_pc_9ae8 ]
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v9_9b00 = icmp eq i32 %v3_97d4, %v1_9b00
  store i1 %v9_9b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b00, label %dec_label_pc_9d2c, label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge, %dec_label_pc_9afc
  %v1_9b0c = phi i32 [ %v1_9b0c.pre, %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge ], [ %v1_9b00, %dec_label_pc_9afc ]
  store i32 %v3_97d8, i32* %r2.global-to-local, align 4
  %v9_9b0c = icmp eq i32 %v3_97d8, %v1_9b0c
  store i1 %v9_9b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b0c, label %dec_label_pc_9d48, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9d2c, %dec_label_pc_9b08
  store i32 %v1_97c8, i32* %r3.global-to-local, align 4
  store i1 %v2_9d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d58, label %dec_label_pc_9d6c, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9b14
  %v1_9b1c = load i32, i32* @r5, align 4
  %v2_9b1c = add i32 %v1_9b1c, 16
  %v3_9b1c = inttoptr i32 %v2_9b1c to i32*
  %v4_9b1c = load i32, i32* %v3_9b1c, align 4
  store i32 %v4_9b1c, i32* %r3.global-to-local, align 4
  %v2_9b20 = load i32, i32* @r6, align 4
  %v3_9b20 = add i32 %v2_9b20, 16
  %v4_9b20 = inttoptr i32 %v3_9b20 to i32*
  store i32 %v4_9b1c, i32* %v4_9b20, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9b28:                                ; preds = %bb109, %.thread23, %dec_label_pc_9d6c
  %v0_9b28 = call i32 @function_e580()
  store i32 %v0_9b28, i32* %r0.global-to-local, align 4
  store i32 %v0_9b28, i32* %stack_var_-44, align 4
  %v0_9b30 = call i32 @function_e580()
  store i32 %v0_9b30, i32* %r0.global-to-local, align 4
  store i32 %v0_9b30, i32* %stack_var_-48, align 4
  %v0_9b38 = call i32 @function_e580()
  store i32 %v2_9b3c, i32* %r1.global-to-local, align 4
  store i32 %v0_9b38, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_9b48 = load i32, i32* @r8, align 4
  store i32 %v0_9b48, i32* %r0.global-to-local, align 4
  %v3_9b4c = call i32 @function_10898(i32 %v0_9b48, i32 %v2_9b3c, i32 4)
  %v0_9b50 = load i32, i32* @r8, align 4
  %v1_9b50 = add i32 %v0_9b50, 6
  store i32 %v1_9b50, i32* %r0.global-to-local, align 4
  store i32 %v2_9b54, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9b5c = call i32 @function_10898(i32 %v1_9b50, i32 %v2_9b54, i32 4)
  %v0_9b60 = load i32, i32* @r8, align 4
  %v1_9b60 = add i32 %v0_9b60, 4
  store i32 %v1_9b60, i32* %r0.global-to-local, align 4
  store i32 %v2_9b64, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9b6c = call i32 @function_10898(i32 %v1_9b60, i32 %v2_9b64, i32 2)
  store i32 %v2_9b70, i32* %r1.global-to-local, align 4
  %v0_9b74 = load i32, i32* @r8, align 4
  %v1_9b74 = add i32 %v0_9b74, 10
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9b7c = call i32 @function_10898(i32 %v1_9b74, i32 %v2_9b70, i32 2)
  store i32 %v3_9b7c, i32* %r0.global-to-local, align 4
  store i32 %v1_9738, i32* %r1.global-to-local, align 4
  store i1 %v2_9b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b84, label %dec_label_pc_9b8c, label %dec_label_pc_9d78

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b28, %dec_label_pc_9d78
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9b90 = load i32, i32* @sl, align 4
  %v1_9b90 = trunc i32 %v0_9b90 to i8
  %v2_9b90 = load i32, i32* @r5, align 4
  %v3_9b90 = add i32 %v2_9b90, 10
  %v4_9b90 = inttoptr i32 %v3_9b90 to i8*
  store i8 %v1_9b90, i8* %v4_9b90, align 1
  %v0_9b94 = load i32, i32* @sl, align 4
  %v1_9b94 = trunc i32 %v0_9b94 to i8
  %v2_9b94 = load i32, i32* @r5, align 4
  %v3_9b94 = add i32 %v2_9b94, 11
  %v4_9b94 = inttoptr i32 %v3_9b94 to i8*
  store i8 %v1_9b94, i8* %v4_9b94, align 1
  %v0_9b98 = load i32, i32* @r5, align 4
  store i32 %v0_9b98, i32* @r0, align 4
  %v2_9b9c = call i32 @function_d0b8(i32 %v0_9b98, i32 20)
  %v3_9b9c = trunc i32 %v2_9b9c to i8
  %v4_9ba0 = sdiv i32 %v2_9b9c, 256
  store i32 %v4_9ba0, i32* %r3.global-to-local, align 4
  %v1_9ba4 = trunc i32 %v4_9ba0 to i8
  %v2_9ba4 = load i32, i32* @r5, align 4
  %v3_9ba4 = add i32 %v2_9ba4, 11
  %v4_9ba4 = inttoptr i32 %v3_9ba4 to i8*
  store i8 %v1_9ba4, i8* %v4_9ba4, align 1
  %v3_9ba8 = load i32, i32* @r5, align 4
  %v4_9ba8 = add i32 %v3_9ba8, 10
  %v5_9ba8 = inttoptr i32 %v4_9ba8 to i8*
  store i8 %v3_9b9c, i8* %v5_9ba8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9bb0 = load i32, i32* @sl, align 4
  %v1_9bb0 = trunc i32 %v0_9bb0 to i8
  %v2_9bb0 = load i32, i32* @r6, align 4
  %v3_9bb0 = add i32 %v2_9bb0, 10
  %v4_9bb0 = inttoptr i32 %v3_9bb0 to i8*
  store i8 %v1_9bb0, i8* %v4_9bb0, align 1
  %v0_9bb4 = load i32, i32* @sl, align 4
  %v1_9bb4 = trunc i32 %v0_9bb4 to i8
  %v2_9bb4 = load i32, i32* @r6, align 4
  %v3_9bb4 = add i32 %v2_9bb4, 11
  %v4_9bb4 = inttoptr i32 %v3_9bb4 to i8*
  store i8 %v1_9bb4, i8* %v4_9bb4, align 1
  %v0_9bb8 = load i32, i32* @r6, align 4
  store i32 %v0_9bb8, i32* @r0, align 4
  %v2_9bbc = call i32 @function_d0b8(i32 %v0_9bb8, i32 20)
  %v3_9bbc = trunc i32 %v2_9bbc to i8
  store i32 %v2_9bbc, i32* %r0.global-to-local, align 4
  %v4_9bc0 = sdiv i32 %v2_9bbc, 256
  store i32 %v4_9bc0, i32* %r3.global-to-local, align 4
  %v3_9bc4 = load i32, i32* @r6, align 4
  %v4_9bc4 = add i32 %v3_9bc4, 10
  %v5_9bc4 = inttoptr i32 %v4_9bc4 to i8*
  store i8 %v3_9bbc, i8* %v5_9bc4, align 1
  %v0_9bc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bc8 = trunc i32 %v0_9bc8 to i8
  %v2_9bc8 = load i32, i32* @r6, align 4
  %v3_9bc8 = add i32 %v2_9bc8, 11
  %v4_9bc8 = inttoptr i32 %v3_9bc8 to i8*
  store i8 %v1_9bc8, i8* %v4_9bc8, align 1
  %v0_9bcc = load i32, i32* @r7, align 4
  %v1_9bcc = add i32 %v0_9bcc, 4
  %v2_9bcc = inttoptr i32 %v1_9bcc to i8*
  %v3_9bcc = load i8, i8* %v2_9bcc, align 1
  %v4_9bcc = zext i8 %v3_9bcc to i32
  store i32 %v4_9bcc, i32* %r3.global-to-local, align 4
  %v1_9bd0 = add i32 %v0_9bcc, 5
  %v2_9bd0 = inttoptr i32 %v1_9bd0 to i8*
  %v3_9bd0 = load i8, i8* %v2_9bd0, align 1
  %v4_9bd0 = zext i8 %v3_9bd0 to i32
  store i32 %v0_9bcc, i32* @r1, align 4
  %v4_9bd8 = mul nuw nsw i32 %v4_9bd0, 256
  %v5_9bd8 = or i32 %v4_9bd8, %v4_9bcc
  store i32 %v5_9bd8, i32* %r2.global-to-local, align 4
  %v0_9bdc = load i32, i32* @sl, align 4
  %v1_9bdc = trunc i32 %v0_9bdc to i8
  %v3_9bdc = add i32 %v0_9bcc, 6
  %v4_9bdc = inttoptr i32 %v3_9bdc to i8*
  store i8 %v1_9bdc, i8* %v4_9bdc, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_9be4 = load i32, i32* @sl, align 4
  %v1_9be4 = trunc i32 %v0_9be4 to i8
  %v2_9be4 = load i32, i32* @r7, align 4
  %v3_9be4 = add i32 %v2_9be4, 7
  %v4_9be4 = inttoptr i32 %v3_9be4 to i8*
  store i8 %v1_9be4, i8* %v4_9be4, align 1
  %v0_9be8 = load i32, i32* @r6, align 4
  store i32 %v0_9be8, i32* %r0.global-to-local, align 4
  %v4_9bec = call i32 @function_d114(i32 %v0_9be8, i32 %v0_9bcc, i32 %v5_9bd8, i32 %stack_var_-156.0.ph)
  %v5_9bec = trunc i32 %v4_9bec to i8
  store i32 %v4_9bec, i32* %r0.global-to-local, align 4
  %v3_9bf0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9bf0, i32* %r3.global-to-local, align 4
  %v3_9bf4 = mul i32 %v3_9bf0, 32
  store i32 %v3_9bf4, i32* %r2.global-to-local, align 4
  %v0_9bf8 = load i32, i32* @r5, align 4
  %v1_9bf8 = add i32 %v0_9bf8, 16
  %v2_9bf8 = inttoptr i32 %v1_9bf8 to i32*
  %v3_9bf8 = load i32, i32* %v2_9bf8, align 4
  store i32 %v3_9bf8, i32* %r1.global-to-local, align 4
  %v5_9bfc = mul i32 %v3_9bf0, 24
  store i32 %v5_9bfc, i32* %r2.global-to-local, align 4
  %v4_9c0042 = udiv i32 %v4_9bec, 256
  %v1_9c04 = trunc i32 %v4_9c0042 to i8
  %v2_9c04 = load i32, i32* @r7, align 4
  %v3_9c04 = add i32 %v2_9c04, 7
  %v4_9c04 = inttoptr i32 %v3_9c04 to i8*
  store i8 %v1_9c04, i8* %v4_9c04, align 1
  %v0_9c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c08 = load i32, i32* @sb, align 4
  %v2_9c08 = add i32 %v1_9c08, %v0_9c08
  store i32 %v2_9c08, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_9c10 = load i32, i32* @r7, align 4
  %v4_9c10 = add i32 %v3_9c10, 6
  %v5_9c10 = inttoptr i32 %v4_9c10 to i8*
  store i8 %v5_9bec, i8* %v5_9c10, align 1
  %v0_9c14 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c14 = load i32, i32* %lr.global-to-local, align 4
  %v2_9c14 = add i32 %v1_9c14, 4
  %v3_9c14 = inttoptr i32 %v2_9c14 to i32*
  store i32 %v0_9c14, i32* %v3_9c14, align 4
  %v0_9c18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c18 = trunc i32 %v0_9c18 to i8
  %v2_9c18 = load i32, i32* %r2.global-to-local, align 4
  %v3_9c18 = load i32, i32* @sb, align 4
  %v4_9c18 = add i32 %v3_9c18, %v2_9c18
  %v5_9c18 = inttoptr i32 %v4_9c18 to i8*
  store i8 %v1_9c18, i8* %v5_9c18, align 1
  %v0_9c1c = load i32, i32* @sl, align 4
  %v1_9c1c = trunc i32 %v0_9c1c to i8
  %v2_9c1c = load i32, i32* %lr.global-to-local, align 4
  %v3_9c1c = add i32 %v2_9c1c, 2
  %v4_9c1c = inttoptr i32 %v3_9c1c to i8*
  store i8 %v1_9c1c, i8* %v4_9c1c, align 1
  %v0_9c20 = load i32, i32* @sl, align 4
  %v1_9c20 = trunc i32 %v0_9c20 to i8
  %v2_9c20 = load i32, i32* %lr.global-to-local, align 4
  %v3_9c20 = add i32 %v2_9c20, 1
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v1_9c20, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* @sl, align 4
  %v1_9c24 = trunc i32 %v0_9c24 to i8
  %v2_9c24 = load i32, i32* %lr.global-to-local, align 4
  %v3_9c24 = add i32 %v2_9c24, 3
  %v4_9c24 = inttoptr i32 %v3_9c24 to i8*
  store i8 %v1_9c24, i8* %v4_9c24, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r5, align 4
  store i32 %v0_9c30, i32* %r1.global-to-local, align 4
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_9c3c = load i32, i32* %lr.global-to-local, align 4
  %v6_9c44 = inttoptr i32 %v0_9c30 to i32*
  %v7_9c44 = call i32 @function_11980(i32 %v3_9780, i32* %v6_9c44, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_9c3c, i32 16)
  %v3_9c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9c48, i32* %r3.global-to-local, align 4
  %v1_9c4c = add i32 %v3_9c48, 1
  store i32 %v1_9c4c, i32* %r0.global-to-local, align 4
  %v1_9c50 = load i32, i32* @fp, align 4
  %v9_9c50 = icmp eq i32 %v1_9c4c, %v1_9c50
  store i1 %v9_9c50, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c4c, i32* %stack_var_-40, align 4
  %v6_9c58 = icmp slt i32 %v1_9c4c, %v1_9c50
  br i1 %v6_9c58, label %dec_label_pc_9ab0, label %dec_label_pc_9a98

dec_label_pc_9c60:                                ; preds = %dec_label_pc_9790
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  %v1_9c64 = call i32 @function_11120(i32 %v3_9780)
  store i32 %v1_9c64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_962c, %dec_label_pc_9c60
  %v29_9c6c = phi i32 [ %v3_9780, %dec_label_pc_962c ], [ %v1_9c64, %dec_label_pc_9c60 ]
  store i32 %v3_962c, i32* %r4.global-to-local, align 4
  store i32 %v15_962c, i32* %r8.global-to-local, align 4
  store i32 %v21_962c, i32* %sl.global-to-local, align 4
  ret i32 %v29_9c6c

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9ab0
  %v1_9c70 = add i32 %v2_9ab8, 16
  %v2_9c70 = inttoptr i32 %v1_9c70 to i32*
  %v3_9c70 = load i32, i32* %v2_9c70, align 4
  store i32 %v3_9c70, i32* %r4.global-to-local, align 4
  %v0_9c74 = call i32 @function_e580()
  store i32 %v0_9c74, i32* %r0.global-to-local, align 4
  %v3_9c78 = load i32, i32* %stack_var_-40, align 4
  %v5_9c80 = mul i32 %v3_9c78, 24
  %v0_9c84 = load i32, i32* %r4.global-to-local, align 4
  %v1_9c88 = load i32, i32* @sb, align 4
  %v2_9c88 = add i32 %v1_9c88, %v5_9c80
  store i32 %v2_9c88, i32* %r1.global-to-local, align 4
  %v1_9c8c = and i32 %v0_9c84, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9c8c, i32* %r3.global-to-local, align 4
  %v1_9c84 = udiv i32 %v0_9c84, 256
  %v3_9c90 = and i32 %v1_9c84, 65280
  store i32 %v3_9c90, i32* %r2.global-to-local, align 4
  %v3_9c94 = mul i32 %v0_9c84, 16777216
  store i32 %v3_9c94, i32* %ip.global-to-local, align 4
  %v1_9c98 = add i32 %v2_9c88, 20
  %v2_9c98 = inttoptr i32 %v1_9c98 to i8*
  %v3_9c98 = load i8, i8* %v2_9c98, align 1
  %v4_9c98 = zext i8 %v3_9c98 to i32
  store i32 %v4_9c98, i32* %lr.global-to-local, align 4
  %v4_9c9c = mul i32 %v1_9c8c, 256
  %v5_9c9c = or i32 %v4_9c9c, %v3_9c94
  store i32 %v5_9c9c, i32* %ip.global-to-local, align 4
  %v4_9ca0 = udiv i32 %v0_9c84, 16777216
  %v5_9ca0 = or i32 %v3_9c90, %v4_9ca0
  %v2_9ca4 = or i32 %v5_9ca0, %v5_9c9c
  %v7_9ca8 = lshr i32 %v0_9c74, %v4_9c98
  %v8_9ca8 = add i32 %v7_9ca8, %v2_9ca4
  %v3_9cb4 = mul i32 %v8_9ca8, 16777216
  %v1_9cb8 = and i32 %v8_9ca8, 65280
  store i32 %v1_9cb8, i32* %r0.global-to-local, align 4
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  %v4_9cc4 = mul nuw nsw i32 %v1_9cb8, 256
  %v5_9cc4 = or i32 %v4_9cc4, %v3_9cb4
  store i32 %v5_9cc4, i32* %r1.global-to-local, align 4
  %v2_9cc8 = call i32 @llvm.bswap.i32(i32 %v8_9ca8)
  store i32 %v2_9cc8, i32* %r3.global-to-local, align 4
  store i1 %v7_9ae0, i1* %cpsr_z.global-to-local, align 1
  %v1_9cd0 = load i32, i32* @r5, align 4
  %v2_9cd0 = add i32 %v1_9cd0, 16
  %v3_9cd0 = inttoptr i32 %v2_9cd0 to i32*
  store i32 %v2_9cc8, i32* %v3_9cd0, align 4
  br i1 %v2_9ae0, label %dec_label_pc_9cd8, label %dec_label_pc_9ae8

dec_label_pc_9cd8:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9adc
  %v0_9cd8 = call i32 @function_e580()
  store i32 %v0_9cd8, i32* %r0.global-to-local, align 4
  store i32 %v3_97d0, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9ce8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cec = load i32, i32* @r5, align 4
  %v2_9cec = add i32 %v1_9cec, 12
  %v3_9cec = inttoptr i32 %v2_9cec to i32*
  store i32 %v0_9cd8, i32* %v3_9cec, align 4
  br i1 %v3_9ce8, label %dec_label_pc_9cf4, label %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge

dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge:    ; preds = %dec_label_pc_9cd8
  %v1_9b00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9afc

dec_label_pc_9cf4:                                ; preds = %dec_label_pc_9cd8, %dec_label_pc_9ae8
  %v0_9cf4 = call i32 @function_e580()
  %v3_9cfc = urem i32 %v0_9cf4, 65536
  store i32 %v3_9cfc, i32* %r0.global-to-local, align 4
  %v1_9d04 = sub nsw i32 999, %v3_9cfc
  store i32 %v1_9d04, i32* %r2.global-to-local, align 4
  %v3_9d08 = sdiv i32 %v1_9d04, 256
  store i32 %v3_9d08, i32* %r1.global-to-local, align 4
  %v3_9d0c39 = udiv i32 %v3_9cfc, 256
  store i32 %v3_9d0c39, i32* %r3.global-to-local, align 4
  %v1_9d10 = trunc i32 %v3_9d0c39 to i8
  %v2_9d10 = load i32, i32* @r5, align 4
  %v3_9d10 = add i32 %v2_9d10, 5
  %v4_9d10 = inttoptr i32 %v3_9d10 to i8*
  store i8 %v1_9d10, i8* %v4_9d10, align 1
  %v0_9d14 = load i32, i32* %r0.global-to-local, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i8
  %v2_9d14 = load i32, i32* @r5, align 4
  %v3_9d14 = add i32 %v2_9d14, 4
  %v4_9d14 = inttoptr i32 %v3_9d14 to i8*
  store i8 %v1_9d14, i8* %v4_9d14, align 1
  %v0_9d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d18 = trunc i32 %v0_9d18 to i8
  %v2_9d18 = load i32, i32* @r6, align 4
  %v3_9d18 = add i32 %v2_9d18, 5
  %v4_9d18 = inttoptr i32 %v3_9d18 to i8*
  store i8 %v1_9d18, i8* %v4_9d18, align 1
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_9d20 = load i32, i32* @r4, align 4
  %v9_9d20 = icmp eq i32 %v3_97d4, %v1_9d20
  store i1 %v9_9d20, i1* %cpsr_z.global-to-local, align 1
  %v0_9d24 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d24 = trunc i32 %v0_9d24 to i8
  %v2_9d24 = load i32, i32* @r6, align 4
  %v3_9d24 = add i32 %v2_9d24, 4
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 %v1_9d24, i8* %v4_9d24, align 1
  %v0_9d28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d28, label %dec_label_pc_9d2c, label %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge

dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge:    ; preds = %dec_label_pc_9cf4
  %v1_9b0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9b08

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9cf4, %dec_label_pc_9afc
  %v0_9d2c = call i32 @function_e580()
  %v1_9d2c = trunc i32 %v0_9d2c to i8
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v3_97d8, i32* %r2.global-to-local, align 4
  %v4_9d34 = sdiv i32 %v0_9d2c, 256
  store i32 %v4_9d34, i32* %r3.global-to-local, align 4
  %v1_9d38 = load i32, i32* @r4, align 4
  %v9_9d38 = icmp eq i32 %v3_97d8, %v1_9d38
  store i1 %v9_9d38, i1* %cpsr_z.global-to-local, align 1
  %v3_9d3c = load i32, i32* @r5, align 4
  %v4_9d3c = add i32 %v3_9d3c, 58
  %v5_9d3c = inttoptr i32 %v4_9d3c to i8*
  store i8 %v1_9d2c, i8* %v5_9d3c, align 1
  %v0_9d40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d40 = trunc i32 %v0_9d40 to i8
  %v2_9d40 = load i32, i32* @r7, align 4
  %v3_9d40 = add i32 %v2_9d40, 1
  %v4_9d40 = inttoptr i32 %v3_9d40 to i8*
  store i8 %v1_9d40, i8* %v4_9d40, align 1
  %v0_9d44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d44, label %dec_label_pc_9d48, label %dec_label_pc_9b14

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9d2c, %dec_label_pc_9b08
  %v0_9d48 = call i32 @function_e580()
  %v1_9d48 = trunc i32 %v0_9d48 to i8
  store i32 %v0_9d48, i32* %r0.global-to-local, align 4
  %v4_9d4c43 = udiv i32 %v0_9d48, 256
  %v1_9d50 = trunc i32 %v4_9d4c43 to i8
  %v2_9d50 = load i32, i32* @r7, align 4
  %v3_9d50 = add i32 %v2_9d50, 3
  %v4_9d50 = inttoptr i32 %v3_9d50 to i8*
  store i8 %v1_9d50, i8* %v4_9d50, align 1
  store i32 %v1_97c8, i32* %r3.global-to-local, align 4
  store i1 %v2_9d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d58, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_9d48
  %v1_9d5c = load i32, i32* @r5, align 4
  %v2_9d5c = add i32 %v1_9d5c, 16
  %v3_9d5c = inttoptr i32 %v2_9d5c to i32*
  %v4_9d5c = load i32, i32* %v3_9d5c, align 4
  store i32 %v4_9d5c, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_9d48, %bb107
  %v3_9d60 = load i32, i32* @r7, align 4
  %v4_9d60 = add i32 %v3_9d60, 2
  %v5_9d60 = inttoptr i32 %v4_9d60 to i8*
  store i8 %v1_9d48, i8* %v5_9d60, align 1
  %v0_9d64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d64, label %dec_label_pc_9d6c, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9d64 = load i32, i32* %r3.global-to-local, align 4
  %v2_9d64 = load i32, i32* @r6, align 4
  %v3_9d64 = add i32 %v2_9d64, 16
  %v4_9d64 = inttoptr i32 %v3_9d64 to i32*
  store i32 %v1_9d64, i32* %v4_9d64, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9d6c:                                ; preds = %dec_label_pc_9b14, %bb108
  %v0_9d6c = call i32 @function_e580()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v1_9d70 = load i32, i32* @r6, align 4
  %v2_9d70 = add i32 %v1_9d70, 16
  %v3_9d70 = inttoptr i32 %v2_9d70 to i32*
  store i32 %v0_9d6c, i32* %v3_9d70, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9d78:                                ; preds = %dec_label_pc_9b28
  %v0_9d78 = load i32, i32* @r7, align 4
  %v1_9d78 = add i32 %v0_9d78, 8
  store i32 %v1_9d78, i32* %r0.global-to-local, align 4
  store i32 %v5_9718, i32* @r1, align 4
  %v1_9d80 = inttoptr i32 %v1_9d78 to i8*
  %v2_9d80 = call i32 @function_e700(i8* %v1_9d80)
  store i32 %v2_9d80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9b8c

dec_label_pc_9d88:                                ; preds = %dec_label_pc_97b8
  %v1_9d90 = add i32 %v5_9718, 8
  store i32 %v1_9d90, i32* %r1.global-to-local, align 4
  %v1_9d94 = add i32 %v5_9718, 66
  store i32 %v1_9d94, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9a98.preheader

; uselistorder directives
  uselistorder i32 %v1_9d94, { 1, 0 }
  uselistorder i32 %v1_9d90, { 1, 0 }
  uselistorder i32 %v0_9d48, { 0, 2, 1 }
  uselistorder i32 %v0_9d2c, { 0, 2, 1 }
  uselistorder i32 %v3_9cfc, { 0, 2, 1 }
  uselistorder i32 %v2_9cc8, { 1, 0 }
  uselistorder i32 %v8_9ca8, { 1, 2, 0 }
  uselistorder i32 %v3_9c94, { 1, 0 }
  uselistorder i32 %v0_9c84, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9c50, { 1, 2, 0 }
  uselistorder i32 %v1_9c4c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_9bf0, { 1, 0, 2 }
  uselistorder i32 %v4_9bec, { 0, 2, 1 }
  uselistorder i32 %v0_9bcc, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9bbc, { 0, 2, 1 }
  uselistorder i32 %v4_9ba0, { 1, 0 }
  uselistorder i32 %v7_9ac4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9a98, { 1, 0 }
  uselistorder i1 %v7_9ae0, { 2, 1, 0 }
  uselistorder i1 %v2_9d58, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9ce8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9a20, { 1, 0, 2 }
  uselistorder i32 %v3_98a8, { 1, 0, 2 }
  uselistorder i32 %v3_9888, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_982c, { 1, 0 }
  uselistorder i32 %v1_9828, { 2, 1, 0 }
  uselistorder i32 %v1_9814, { 1, 0 }
  uselistorder i32 %v1_9810, { 2, 1, 0 }
  uselistorder i32 %v1_9808, { 0, 2, 1 }
  uselistorder i32 %v3_9800, { 2, 1, 0 }
  uselistorder i32 %v0_97dc, { 1, 0, 2 }
  uselistorder i32 %v3_97d0, { 2, 1, 3, 0 }
  uselistorder i32 %v1_97c8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_97c4, { 1, 0 }
  uselistorder i32 %v0_97c4, { 2, 1, 0 }
  uselistorder i32 %v0_97bc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_97b8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_97b0, { 1, 0 }
  uselistorder i1 %v7_9784, { 1, 0 }
  uselistorder i32 %v3_9780, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_976c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9738, { 1, 2, 0 }
  uselistorder i32 %v5_9718, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_96cc, { 1, 0 }
  uselistorder i8 %v5_96bc, { 1, 0 }
  uselistorder i32 %v5_96a0, { 1, 0 }
  uselistorder i32 %v6_9664, { 1, 0 }
  uselistorder i32 %v2_964c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9630, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 20, 21, 22, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 48, 49, 51, 1, 52, 53, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 16, 15, 17, 18, 20, 19, 22, 21, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 4, 6, 9, 10, 7, 8, 11, 29, 30, 3, 31, 32, 33, 2, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 1, 44, 45, 46, 14, 12, 13, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %ip.global-to-local, { 6, 7, 8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 7, 8, 9 }
  uselistorder label %dec_label_pc_9d6c, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9c68, { 1, 0 }
  uselistorder label %dec_label_pc_9b8c, { 1, 0 }
  uselistorder label %dec_label_pc_9b28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9a98.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9da8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9da8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9da8 = load i32, i32* @r4, align 4
  %v15_9da8 = load i32, i32* @r8, align 4
  %v1_9dac = urem i32 %arg1, 256
  store i32 %v1_9dac, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9dac, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9dc4 = urem i32 %arg3, 256
  store i32 %v1_9dc4, i32* @r4, align 4
  %v2_9dc8 = call i32 @function_11cd0(i32 %v1_9dac, i32 4)
  %v0_9dcc = load i32, i32* @r5, align 4
  store i32 %v0_9dcc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ddc = load i32, i32* @r4, align 4
  store i32 %v0_9ddc, i32* %r0.global-to-local, align 4
  %v5_9de0 = inttoptr i32 %v0_9dcc to i32*
  %v6_9de0 = call i32 @function_85e0(i32 %v0_9ddc, i32* %v5_9de0, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9df8 = load i32, i32* @r5, align 4
  store i32 %v0_9df8, i32* %r1.global-to-local, align 4
  %v0_9dfc = load i32, i32* @r4, align 4
  store i32 %v0_9dfc, i32* %r0.global-to-local, align 4
  %v5_9e00 = trunc i32 %v6_9de0 to i8
  %v6_9e04 = inttoptr i32 %v0_9df8 to i32*
  %v7_9e04 = call i32 @function_85e0(i32 %v0_9dfc, i32* %v6_9e04, i32 3, i32 65535)
  %v0_9e08 = load i32, i32* @r5, align 4
  store i32 %v0_9e08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9e04, i32* @r7, align 4
  %v0_9e18 = load i32, i32* @r4, align 4
  store i32 %v0_9e18, i32* %r0.global-to-local, align 4
  %v4_9e1c = inttoptr i32 %v0_9e08 to i32*
  %v5_9e1c = call i32 @function_85e0(i32 %v0_9e18, i32* %v4_9e1c, i32 4, i32 64)
  %v0_9e28 = load i32, i32* @r5, align 4
  store i32 %v0_9e28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9e34 = load i32, i32* @r4, align 4
  store i32 %v0_9e34, i32* %r0.global-to-local, align 4
  %v5_9e38 = trunc i32 %v5_9e1c to i8
  %v6_9e3c = inttoptr i32 %v0_9e28 to i32*
  %v7_9e3c = call i32 @function_85e0(i32 %v0_9e34, i32* %v6_9e3c, i32 5, i32 1)
  %v1_9e48 = urem i32 %v7_9e3c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9e54 = load i32, i32* @r5, align 4
  store i32 %v0_9e54, i32* %r1.global-to-local, align 4
  %v0_9e58 = load i32, i32* @r4, align 4
  store i32 %v0_9e58, i32* %r0.global-to-local, align 4
  %v5_9e60 = inttoptr i32 %v0_9e54 to i32*
  %v6_9e60 = call i32 @function_85e0(i32 %v0_9e58, i32* %v5_9e60, i32 6, i32 65535)
  %v0_9e68 = load i32, i32* @r5, align 4
  store i32 %v0_9e68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9e60, i32* @sl, align 4
  %v0_9e78 = load i32, i32* @r4, align 4
  store i32 %v0_9e78, i32* %r0.global-to-local, align 4
  %v4_9e7c = inttoptr i32 %v0_9e68 to i32*
  %v5_9e7c = call i32 @function_85e0(i32 %v0_9e78, i32* %v4_9e7c, i32 7, i32 65535)
  %v0_9e80 = load i32, i32* @r5, align 4
  store i32 %v0_9e80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9e7c, i32* @r8, align 4
  %v0_9e90 = load i32, i32* @r4, align 4
  store i32 %v0_9e90, i32* %r0.global-to-local, align 4
  %v4_9e94 = inttoptr i32 %v0_9e80 to i32*
  %v5_9e94 = call i32 @function_85e0(i32 %v0_9e90, i32* %v4_9e94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ea4 = load i32, i32* @r5, align 4
  store i32 %v0_9ea4, i32* %r1.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r4, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = inttoptr i32 %v0_9ea4 to i32*
  %v5_9eac = call i32 @function_85e0(i32 %v0_9ea8, i32* %v4_9eac, i32 1, i32 1)
  %v1_9eb4 = urem i32 %v5_9eac, 256
  %v0_9eb8 = load i32, i32* @r5, align 4
  store i32 %v0_9eb8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r4, align 4
  store i32 %v0_9ec4, i32* %r0.global-to-local, align 4
  %v5_9ecc = inttoptr i32 %v0_9eb8 to i32*
  %v6_9ecc = call i32 @function_85e0(i32 %v0_9ec4, i32* %v5_9ecc, i32 19, i32 0)
  %v0_9ed4 = load i32, i32* @r5, align 4
  store i32 %v0_9ed4, i32* %r1.global-to-local, align 4
  %v2_9ed8 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_9ed8, i32* %r3.global-to-local, align 4
  store i32 %v6_9ecc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9ee4 = load i32, i32* @r4, align 4
  store i32 %v0_9ee4, i32* %r0.global-to-local, align 4
  %v4_9ee8 = inttoptr i32 %v0_9ed4 to i32*
  %v5_9ee8 = call i32 @function_85e0(i32 %v0_9ee4, i32* %v4_9ee8, i32 25, i32 %v2_9ed8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9efc = call i32 @function_119e4(i32 2, i32 3, i32 6)
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v3_9efc, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f00, label %dec_label_pc_a380, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9da8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9f14 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9f14, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9f28 = call i32 @function_119b4(i32 %v3_9efc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9f28, i32* %r0.global-to-local, align 4
  %v7_9f2c = icmp eq i32 %v6_9f28, -1
  store i1 %v7_9f2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f2c, label %dec_label_pc_a378, label %dec_label_pc_9f34

dec_label_pc_9f34:                                ; preds = %dec_label_pc_9f0c
  %v0_9f34 = load i32, i32* @sl, align 4
  %v0_9f40 = load i32, i32* @r8, align 4
  %v3_9f40 = mul i32 %v0_9f40, 65536
  store i32 %v3_9f40, i32* %r8.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r7, align 4
  %v0_9f48 = load i32, i32* @r6, align 4
  %v1_9f48 = urem i32 %v0_9f48, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9f50 = urem i32 %v0_9f34, 65536
  store i32 %v3_9f50, i32* %r2.global-to-local, align 4
  %v3_9f54 = urem i32 %v0_9f40, 65536
  store i32 %v3_9f54, i32* %r3.global-to-local, align 4
  %v0_9f58 = load i32, i32* @fp, align 4
  %v2_9f58 = icmp eq i32 %v0_9f58, 0
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9f68 = urem i32 %v0_9f44, 65536
  store i32 %v3_9f68, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9f58, 1
  br i1 %tmp84, label %dec_label_pc_a4a4, label %dec_label_pc_9f78

dec_label_pc_9f78:                                ; preds = %dec_label_pc_9f34
  %v3_9f7c = mul i32 %v5_9e94, 65536
  %v1_9f80 = add i32 %v3_9f7c, 3407872
  %v3_9f88 = udiv i32 %v1_9f80, 256
  %v0_9f44.not = or i32 %v0_9f44, -65536
  %v1_9f98 = xor i32 %v0_9f44.not, 65535
  %v1_9f9c = urem i32 %v0_9f40, 256
  %tmp85 = mul nsw i32 %v1_9f98, 256
  %v1_9fb4 = and i32 %v3_9f88, 65280
  %v1_9fb8 = add i32 %v3_9f7c, 524288
  %v4_9fbc = udiv i32 %v1_9f80, 16777216
  %v5_9fbc = or i32 %v1_9fb4, %v4_9fbc
  store i32 %v5_9fbc, i32* %r0.global-to-local, align 4
  %v1_9fc0 = add i32 %v3_9f7c, 1835008
  %v1_9fc8 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_9fc8, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9f98, 256
  %tmp87 = udiv i32 %v0_9f44, 256
  %v5_9fdc = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_9f34, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_9ffc = sdiv i32 %sext29, 16777216
  %v3_a008 = mul nuw nsw i32 %v1_9f9c, 256
  store i32 %v3_a008, i32* @r5, align 4
  %v3_a00c = udiv i32 %v1_9fb8, 256
  %tmp89 = udiv i32 %v0_9f40, 256
  %v4_a014 = urem i32 %tmp89, 256
  %v5_a014 = or i32 %v4_a014, %v3_a008
  store i32 %v5_a014, i32* @r7, align 4
  %v3_a018 = ashr i32 %sext29, 31
  %v3_a024 = sdiv i32 %v1_9fc0, 16777216
  %v1_a028 = and i32 %v3_a00c, 65280
  store i32 %v1_a028, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_a030 = sdiv i32 %sext30, 16777216
  %v3_a034 = ashr i32 %v1_9fc0, 31
  %v3_a038 = udiv i32 %v1_9f98, 65536
  %v4_a03c = udiv i32 %v1_9fb8, 16777216
  %v5_a03c = or i32 %v1_a028, %v4_a03c
  store i32 %v5_a03c, i32* %r8.global-to-local, align 4
  %v3_a048 = ashr i32 %sext30, 31
  store i32 %v3_a048, i32* %r1.global-to-local, align 4
  store i32 %v1_9f9c, i32* %r2.global-to-local, align 4
  %v3_a05041 = udiv i32 %v1_a028, 256
  store i32 %v3_a05041, i32* %r3.global-to-local, align 4
  %v5_a058 = trunc i32 %v3_a048 to i8
  store i32 0, i32* @r4, align 4
  %v4_a0b4 = sext i8 %v5_9e38 to i32
  %sext = mul i32 %v1_9f80, 256
  %v4_a0bc = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9fbc, 16777216
  %v4_a0cc = sdiv i32 %sext16, 16777216
  %v2_a1a0 = icmp eq i32 %v1_9f48, 0
  %sext20 = mul i32 %v1_9fb8, 256
  %v4_a1c0 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_9f40, 16777216
  %v7_a1d8 = sdiv i32 %sext21, 16777216
  %v1_a0c8 = trunc i32 %v4_a0bc to i8
  br label %dec_label_pc_a068

dec_label_pc_a068:                                ; preds = %bb96, %dec_label_pc_9f78
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a074 = call i32 @function_11cd0(i32 1510, i32 4)
  store i32 %v2_a074, i32* %r0.global-to-local, align 4
  store i32 %v2_9dc8, i32* %r1.global-to-local, align 4
  %v3_a07c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a07c, i32* %r3.global-to-local, align 4
  %v2_a080 = load i32, i32* @r4, align 4
  %v5_a080 = mul i32 %v2_a080, 4
  %v6_a080 = add i32 %v5_a080, %v2_9dc8
  %v7_a080 = inttoptr i32 %v6_a080 to i32*
  store i32 %v2_a074, i32* %v7_a080, align 4
  %v0_a084 = load i32, i32* %r1.global-to-local, align 4
  %v1_a084 = load i32, i32* %r3.global-to-local, align 4
  %v4_a084 = mul i32 %v1_a084, 4
  %v5_a084 = add i32 %v4_a084, %v0_a084
  %v6_a084 = inttoptr i32 %v5_a084 to i32*
  %v7_a084 = load i32, i32* %v6_a084, align 4
  store i32 %v7_a084, i32* %r4.global-to-local, align 4
  %v1_a088 = inttoptr i32 %v7_a084 to i8*
  %v2_a088 = load i8, i8* %v1_a088, align 1
  %tmp = urem i8 %v2_a088, 16
  %v1_a08c = zext i8 %tmp to i32
  %v1_a090 = or i32 %v1_a08c, 64
  store i32 %v1_a090, i32* %r2.global-to-local, align 4
  %v1_a094 = trunc i32 %v1_a090 to i8
  store i8 %v1_a094, i8* %v1_a088, align 1
  %v0_a098 = load i32, i32* %r4.global-to-local, align 4
  %v1_a098 = inttoptr i32 %v0_a098 to i8*
  %v2_a098 = load i8, i8* %v1_a098, align 1
  %v1_a09c = and i8 %v2_a098, -16
  %v1_a0a0 = or i8 %v1_a09c, 5
  store i32 %v1_9e48, i32* %r2.global-to-local, align 4
  store i8 %v1_a0a0, i8* %v1_a098, align 1
  %v2_a0b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0b0 = add i32 %v2_a0b0, 1
  %v4_a0b0 = inttoptr i32 %v3_a0b0 to i8*
  store i8 %v5_9e00, i8* %v4_a0b0, align 1
  store i32 %v4_a0b4, i32* %r1.global-to-local, align 4
  %v2_a0b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0b8 = add i32 %v2_a0b8, 8
  %v4_a0b8 = inttoptr i32 %v3_a0b8 to i8*
  store i8 %v5_9e38, i8* %v4_a0b8, align 1
  store i32 %v4_a0bc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r2.global-to-local, align 4
  %v9_a0c4 = icmp eq i32 %v0_a0c4, 0
  store i1 %v9_a0c4, i1* %cpsr_z.global-to-local, align 1
  %v2_a0c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0c8 = add i32 %v2_a0c8, 3
  %v4_a0c8 = inttoptr i32 %v3_a0c8 to i8*
  store i8 %v1_a0c8, i8* %v4_a0c8, align 1
  store i32 %v4_a0cc, i32* %r2.global-to-local, align 4
  %v0_a0d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0d0, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_a068
  %v1_a0d0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_a0d0, i32* %r3.global-to-local, align 4
  %v2_a0d4 = trunc i32 %v1_a0d0 to i8
  %v3_a0d4 = load i32, i32* %r4.global-to-local, align 4
  %v4_a0d4 = add i32 %v3_a0d4, 7
  %v5_a0d4 = inttoptr i32 %v4_a0d4 to i8*
  store i8 %v2_a0d4, i8* %v5_a0d4, align 1
  %v0_a0d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0d8.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a0dc = load i32, i32* %r4.global-to-local, align 4
  %v4_a0dc = add i32 %v3_a0dc, 6
  %v5_a0dc = inttoptr i32 %v4_a0dc to i8*
  store i8 64, i8* %v5_a0dc, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_a068, %.thread, %bb
  %v0_a0e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0e0 = trunc i32 %v0_a0e0 to i8
  %v2_a0e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0e0 = add i32 %v2_a0e0, 2
  %v4_a0e0 = inttoptr i32 %v3_a0e0 to i8*
  store i8 %v1_a0e0, i8* %v4_a0e0, align 1
  store i32 %v3_a018, i32* %r2.global-to-local, align 4
  store i32 %v4_9ffc, i32* %r1.global-to-local, align 4
  %v2_a0f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0f0 = add i32 %v2_a0f0, 9
  %v4_a0f0 = inttoptr i32 %v3_a0f0 to i8*
  store i8 47, i8* %v4_a0f0, align 1
  %v0_a0f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0f4 = trunc i32 %v0_a0f4 to i8
  %v2_a0f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0f4 = add i32 %v2_a0f4, 5
  %v4_a0f4 = inttoptr i32 %v3_a0f4 to i8*
  store i8 %v1_a0f4, i8* %v4_a0f4, align 1
  %v3_a0f8 = load i32, i32* %stack_var_-40, align 4
  %v5_a100 = mul i32 %v3_a0f8, 24
  store i32 %v5_a100, i32* %r3.global-to-local, align 4
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  %v1_a108 = load i32, i32* %r4.global-to-local, align 4
  %v2_a108 = add i32 %v1_a108, 12
  %v3_a108 = inttoptr i32 %v2_a108 to i32*
  store i32 %v5_9ee8, i32* %v3_a108, align 4
  %v0_a10c = load i32, i32* %r3.global-to-local, align 4
  %v1_a10c = load i32, i32* @sb, align 4
  %v2_a10c = add i32 %v1_a10c, %v0_a10c
  store i32 %v2_a10c, i32* %r3.global-to-local, align 4
  %v0_a110 = load i32, i32* %r1.global-to-local, align 4
  %v1_a110 = trunc i32 %v0_a110 to i8
  %v2_a110 = load i32, i32* %r4.global-to-local, align 4
  %v3_a110 = add i32 %v2_a110, 4
  %v4_a110 = inttoptr i32 %v3_a110 to i8*
  store i8 %v1_a110, i8* %v4_a110, align 1
  %v0_a114 = load i32, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a114, 16
  %v2_a114 = inttoptr i32 %v1_a114 to i32*
  %v3_a114 = load i32, i32* %v2_a114, align 4
  store i32 %v3_a114, i32* %r2.global-to-local, align 4
  %v0_a118 = load i32, i32* %r4.global-to-local, align 4
  %v1_a118 = add i32 %v0_a118, 20
  store i32 %v1_a118, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_a120 = load i32, i32* %r0.global-to-local, align 4
  %v1_a120 = trunc i32 %v0_a120 to i8
  %v3_a120 = add i32 %v0_a118, 23
  %v4_a120 = inttoptr i32 %v3_a120 to i8*
  store i8 %v1_a120, i8* %v4_a120, align 1
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* %r1.global-to-local, align 4
  %v3_a124 = add i32 %v2_a124, 2
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* %r4.global-to-local, align 4
  %v1_a128 = add i32 %v0_a128, 24
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %tmp104 = urem i8 %v3_a128, 16
  %v1_a12c = zext i8 %tmp104 to i32
  %v1_a130 = or i32 %v1_a12c, 64
  store i32 %v1_a130, i32* %r3.global-to-local, align 4
  %v1_a134 = trunc i32 %v1_a130 to i8
  store i8 %v1_a134, i8* %v2_a128, align 1
  %v0_a138 = load i32, i32* %r2.global-to-local, align 4
  %v1_a138 = load i32, i32* %r4.global-to-local, align 4
  %v2_a138 = add i32 %v1_a138, 16
  %v3_a138 = inttoptr i32 %v2_a138 to i32*
  store i32 %v0_a138, i32* %v3_a138, align 4
  %v0_a13c = load i32, i32* %r4.global-to-local, align 4
  %v1_a13c = add i32 %v0_a13c, 24
  %v2_a13c = inttoptr i32 %v1_a13c to i8*
  %v3_a13c = load i8, i8* %v2_a13c, align 1
  %v1_a140 = and i8 %v3_a13c, -16
  %v1_a144 = or i8 %v1_a140, 5
  store i8 %v1_a144, i8* %v2_a13c, align 1
  %v0_a150 = load i32, i32* %r4.global-to-local, align 4
  %v1_a150 = add i32 %v0_a150, 24
  store i32 %v1_a150, i32* @r5, align 4
  %v3_a154 = add i32 %v0_a150, 25
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v5_9e00, i8* %v4_a154, align 1
  store i32 %v3_a024, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_a034, i32* %r2.global-to-local, align 4
  %v2_a164 = load i32, i32* @r5, align 4
  %v3_a164 = add i32 %v2_a164, 4
  %v4_a164 = inttoptr i32 %v3_a164 to i8*
  store i8 %v5_9fdc, i8* %v4_a164, align 1
  %v0_a168 = load i32, i32* %r1.global-to-local, align 4
  %v1_a168 = trunc i32 %v0_a168 to i8
  %v2_a168 = load i32, i32* @r5, align 4
  %v3_a168 = add i32 %v2_a168, 2
  %v4_a168 = inttoptr i32 %v3_a168 to i8*
  store i8 %v1_a168, i8* %v4_a168, align 1
  %v0_a16c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a16c, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_a038, i32* %r1.global-to-local, align 4
  %v0_a174 = load i32, i32* %r2.global-to-local, align 4
  %v1_a174 = trunc i32 %v0_a174 to i8
  %v2_a174 = load i32, i32* @r5, align 4
  %v3_a174 = add i32 %v2_a174, 3
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v1_a174, i8* %v4_a174, align 1
  store i32 %v4_a0b4, i32* %r2.global-to-local, align 4
  %v0_a17c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a17c, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_a17c = load i32, i32* %r3.global-to-local, align 4
  %v2_a17c = trunc i32 %v1_a17c to i8
  %v3_a17c = load i32, i32* @r5, align 4
  %v4_a17c = add i32 %v3_a17c, 6
  %v5_a17c = inttoptr i32 %v4_a17c to i8*
  store i8 %v2_a17c, i8* %v5_a17c, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_a184 = load i32, i32* %r1.global-to-local, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* @r5, align 4
  %v3_a184 = add i32 %v2_a184, 5
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v0_a188 to i8
  %v2_a188 = load i32, i32* @r5, align 4
  %v3_a188 = add i32 %v2_a188, 8
  %v4_a188 = inttoptr i32 %v3_a188 to i8*
  store i8 %v1_a188, i8* %v4_a188, align 1
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_a18c = load i32, i32* %r0.global-to-local, align 4
  %v2_a18c = trunc i32 %v1_a18c to i8
  %v3_a18c = load i32, i32* @r5, align 4
  %v4_a18c = add i32 %v3_a18c, 7
  %v5_a18c = inttoptr i32 %v4_a18c to i8*
  store i8 %v2_a18c, i8* %v5_a18c, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_a190 = load i32, i32* %r3.global-to-local, align 4
  %v1_a190 = trunc i32 %v0_a190 to i8
  %v2_a190 = load i32, i32* @r5, align 4
  %v3_a190 = add i32 %v2_a190, 9
  %v4_a190 = inttoptr i32 %v3_a190 to i8*
  store i8 %v1_a190, i8* %v4_a190, align 1
  %v0_a194 = call i32 @function_e580()
  store i32 %v0_a194, i32* %r0.global-to-local, align 4
  store i32 %v1_9f48, i32* %r1.global-to-local, align 4
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  %v1_a1a4 = sub i32 1023, %v0_a194
  store i32 %v1_a1a4, i32* %r3.global-to-local, align 4
  br i1 %v2_a1a0, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_a1ac = load i32, i32* @r5, align 4
  %v3_a1ac = add i32 %v2_a1ac, 16
  %v4_a1ac = inttoptr i32 %v3_a1ac to i32*
  store i32 %v1_a1a4, i32* %v4_a1ac, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_a1a8 = load i32, i32* %r4.global-to-local, align 4
  %v2_a1a8 = add i32 %v1_a1a8, 16
  %v3_a1a8 = inttoptr i32 %v2_a1a8 to i32*
  %v4_a1a8 = load i32, i32* %v3_a1a8, align 4
  store i32 %v4_a1a8, i32* %r3.global-to-local, align 4
  %v2_a1b0 = load i32, i32* @r5, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 16
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i32*
  store i32 %v4_a1a8, i32* %v4_a1b0, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_a030, i32* %r3.global-to-local, align 4
  %v0_a1b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a1b8 = add i32 %v0_a1b8, 44
  store i32 %v1_a1b8, i32* @r6, align 4
  %v1_a1bc = load i32, i32* @r5, align 4
  %v2_a1bc = add i32 %v1_a1bc, 12
  %v3_a1bc = inttoptr i32 %v2_a1bc to i32*
  store i32 %v0_a194, i32* %v3_a1bc, align 4
  store i32 %v4_a1c0, i32* %r2.global-to-local, align 4
  %v0_a1c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1c4 = trunc i32 %v0_a1c4 to i8
  %v2_a1c4 = load i32, i32* @r6, align 4
  %v3_a1c4 = inttoptr i32 %v2_a1c4 to i8*
  store i8 %v1_a1c4, i8* %v3_a1c4, align 1
  %v3_a1c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a1c8, i32* %r3.global-to-local, align 4
  %v0_a1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1cc = trunc i32 %v0_a1cc to i8
  %v2_a1cc = load i32, i32* @r6, align 4
  %v3_a1cc = add i32 %v2_a1cc, 5
  %v4_a1cc = inttoptr i32 %v3_a1cc to i8*
  store i8 %v1_a1cc, i8* %v4_a1cc, align 1
  %v0_a1d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1d0 = add i32 %v0_a1d0, 1
  store i32 %v1_a1d0, i32* @r4, align 4
  store i32 %v3_a048, i32* %r1.global-to-local, align 4
  store i32 %v7_a1d8, i32* %r2.global-to-local, align 4
  %v1_a1dc = load i32, i32* @fp, align 4
  %v9_a1dc = icmp eq i32 %v1_a1d0, %v1_a1dc
  store i1 %v9_a1dc, i1* %cpsr_z.global-to-local, align 1
  %v2_a1e0 = load i32, i32* @r6, align 4
  %v3_a1e0 = add i32 %v2_a1e0, 1
  %v4_a1e0 = inttoptr i32 %v3_a1e0 to i8*
  store i8 %v5_a058, i8* %v4_a1e0, align 1
  %v0_a1e4 = load i32, i32* @r7, align 4
  %v1_a1e4 = trunc i32 %v0_a1e4 to i8
  %v2_a1e4 = load i32, i32* @r6, align 4
  %v3_a1e4 = add i32 %v2_a1e4, 2
  %v4_a1e4 = inttoptr i32 %v3_a1e4 to i8*
  store i8 %v1_a1e4, i8* %v4_a1e4, align 1
  %v0_a1e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v0_a1e8 to i8
  %v2_a1e8 = load i32, i32* @r6, align 4
  %v3_a1e8 = add i32 %v2_a1e8, 3
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v0_a1ec = load i32, i32* %r8.global-to-local, align 4
  %v1_a1ec = trunc i32 %v0_a1ec to i8
  %v2_a1ec = load i32, i32* @r6, align 4
  %v3_a1ec = add i32 %v2_a1ec, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v1_a1ec, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* @r4, align 4
  store i32 %v0_a1f0, i32* %stack_var_-40, align 4
  %v5_a1f4 = icmp slt i32 %v1_a1d0, %v1_a1dc
  br i1 %v5_a1f4, label %dec_label_pc_a068, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %bb96
  %v1_a200 = add i32 %v5_9e94, 8
  store i32 %v1_a200, i32* %r3.global-to-local, align 4
  %v1_a204 = add i32 %v5_9e94, 52
  store i32 %v1_a204, i32* %r1.global-to-local, align 4
  %v0_a210.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a210.preheader

dec_label_pc_a210.preheader:                      ; preds = %dec_label_pc_a1f8, %dec_label_pc_a4a4
  %v0_a210.pre = phi i32 [ %v0_a210.pre.pre, %dec_label_pc_a1f8 ], [ %v0_9f58, %dec_label_pc_a4a4 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_a204, %dec_label_pc_a1f8 ], [ %v1_a4b0, %dec_label_pc_a4a4 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_a200, %dec_label_pc_a1f8 ], [ %v1_a4ac, %dec_label_pc_a4a4 ]
  %v2_a488 = icmp eq i32 %v1_9eb4, 0
  %v2_a288 = icmp eq i32 %v1_9f48, 0
  %v2_a254 = icmp eq i32 %v5_9ee8, -1
  %v7_a254 = icmp eq i32 %v5_9ee8, -1
  br label %dec_label_pc_a210

dec_label_pc_a210:                                ; preds = %dec_label_pc_a2a4, %dec_label_pc_a210.preheader
  %v0_a210 = phi i32 [ %v0_a210.pre, %dec_label_pc_a210.preheader ], [ %v1_a368, %dec_label_pc_a2a4 ]
  %v2_a210 = icmp eq i32 %v0_a210, 0
  store i1 %v2_a210, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_a210, 1
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %dec_label_pc_a218, %dec_label_pc_a210
  br i1 %tmp97, label %dec_label_pc_a218, label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a218
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a2a4, %dec_label_pc_a21c
  %v1_a23c = phi i32 [ %v1_a364, %dec_label_pc_a2a4 ], [ 0, %dec_label_pc_a21c ]
  %v5_a22c = mul i32 %v1_a23c, 24
  %v1_a230 = load i32, i32* @sb, align 4
  %v2_a230 = add i32 %v1_a230, %v5_a22c
  store i32 %v2_a230, i32* %r3.global-to-local, align 4
  store i32 %v2_9dc8, i32* %r1.global-to-local, align 4
  %v1_a238 = add i32 %v2_a230, 20
  %v2_a238 = inttoptr i32 %v1_a238 to i8*
  %v3_a238 = load i8, i8* %v2_a238, align 1
  %v4_a238 = zext i8 %v3_a238 to i32
  store i32 %v4_a238, i32* %r2.global-to-local, align 4
  %v4_a23c = mul i32 %v1_a23c, 4
  %v5_a23c = add i32 %v4_a23c, %v2_9dc8
  %v6_a23c = inttoptr i32 %v5_a23c to i32*
  %v7_a23c = load i32, i32* %v6_a23c, align 4
  store i32 %v7_a23c, i32* @r5, align 4
  %v7_a240 = icmp eq i8 %v3_a238, 31
  store i1 %v7_a240, i1* %cpsr_z.global-to-local, align 1
  %v1_a244 = add i32 %v7_a23c, 24
  store i32 %v1_a244, i32* @r6, align 4
  %v1_a248 = add i32 %v7_a23c, 44
  store i32 %v1_a248, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_a238, 32
  br i1 %tmp105, label %dec_label_pc_a388, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a228
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  store i1 %v7_a254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a254, label %dec_label_pc_a3f0, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a388, %dec_label_pc_a250
  store i32 65535, i32* @r4, align 4
  %v0_a264 = load i32, i32* @sl, align 4
  %v9_a264 = icmp eq i32 %v0_a264, 65535
  store i1 %v9_a264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a264, label %dec_label_pc_a408, label %dec_label_pc_a26c

dec_label_pc_a26c:                                ; preds = %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge, %dec_label_pc_a25c
  %v1_a270 = phi i32 [ %v1_a270.pre, %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge ], [ 65535, %dec_label_pc_a25c ]
  store i32 %v3_9f50, i32* %r3.global-to-local, align 4
  %v9_a270 = icmp eq i32 %v3_9f50, %v1_a270
  store i1 %v9_a270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a270, label %dec_label_pc_a440, label %dec_label_pc_a278

dec_label_pc_a278:                                ; preds = %dec_label_pc_a408.dec_label_pc_a278_crit_edge, %dec_label_pc_a26c
  %v1_a27c = phi i32 [ %v1_a27c.pre, %dec_label_pc_a408.dec_label_pc_a278_crit_edge ], [ %v1_a270, %dec_label_pc_a26c ]
  store i32 %v3_9f54, i32* %r1.global-to-local, align 4
  %v9_a27c = icmp eq i32 %v3_9f54, %v1_a27c
  store i1 %v9_a27c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a27c, label %dec_label_pc_a45c, label %dec_label_pc_a284

dec_label_pc_a284:                                ; preds = %dec_label_pc_a440, %dec_label_pc_a278
  store i32 %v1_9f48, i32* %r2.global-to-local, align 4
  store i1 %v2_a288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a288, label %dec_label_pc_a480, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_a284
  %v1_a28c = load i32, i32* @r5, align 4
  %v2_a28c = add i32 %v1_a28c, 16
  %v3_a28c = inttoptr i32 %v2_a28c to i32*
  %v4_a28c = load i32, i32* %v3_a28c, align 4
  store i32 %v4_a28c, i32* %r3.global-to-local, align 4
  %v2_a290 = load i32, i32* @r6, align 4
  %v3_a290 = add i32 %v2_a290, 16
  %v4_a290 = inttoptr i32 %v3_a290 to i32*
  store i32 %v4_a28c, i32* %v4_a290, align 4
  br label %dec_label_pc_a298

dec_label_pc_a298:                                ; preds = %bb102, %.thread26
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a488, label %dec_label_pc_a2a4, label %dec_label_pc_a494

dec_label_pc_a2a4:                                ; preds = %dec_label_pc_a298, %dec_label_pc_a480, %dec_label_pc_a494
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2a8 = load i32, i32* @r8, align 4
  %v1_a2a8 = trunc i32 %v0_a2a8 to i8
  %v2_a2a8 = load i32, i32* @r5, align 4
  %v3_a2a8 = add i32 %v2_a2a8, 10
  %v4_a2a8 = inttoptr i32 %v3_a2a8 to i8*
  store i8 %v1_a2a8, i8* %v4_a2a8, align 1
  %v0_a2ac = load i32, i32* @r8, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i8
  %v2_a2ac = load i32, i32* @r5, align 4
  %v3_a2ac = add i32 %v2_a2ac, 11
  %v4_a2ac = inttoptr i32 %v3_a2ac to i8*
  store i8 %v1_a2ac, i8* %v4_a2ac, align 1
  %v0_a2b0 = load i32, i32* @r5, align 4
  store i32 %v0_a2b0, i32* @r0, align 4
  %v2_a2b4 = call i32 @function_d0b8(i32 %v0_a2b0, i32 20)
  %v3_a2b4 = trunc i32 %v2_a2b4 to i8
  %v4_a2b8 = sdiv i32 %v2_a2b4, 256
  store i32 %v4_a2b8, i32* %r3.global-to-local, align 4
  %v1_a2bc = trunc i32 %v4_a2b8 to i8
  %v2_a2bc = load i32, i32* @r5, align 4
  %v3_a2bc = add i32 %v2_a2bc, 11
  %v4_a2bc = inttoptr i32 %v3_a2bc to i8*
  store i8 %v1_a2bc, i8* %v4_a2bc, align 1
  %v3_a2c0 = load i32, i32* @r5, align 4
  %v4_a2c0 = add i32 %v3_a2c0, 10
  %v5_a2c0 = inttoptr i32 %v4_a2c0 to i8*
  store i8 %v3_a2b4, i8* %v5_a2c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2c8 = load i32, i32* @r8, align 4
  %v1_a2c8 = trunc i32 %v0_a2c8 to i8
  %v2_a2c8 = load i32, i32* @r6, align 4
  %v3_a2c8 = add i32 %v2_a2c8, 10
  %v4_a2c8 = inttoptr i32 %v3_a2c8 to i8*
  store i8 %v1_a2c8, i8* %v4_a2c8, align 1
  %v0_a2cc = load i32, i32* @r8, align 4
  %v1_a2cc = trunc i32 %v0_a2cc to i8
  %v2_a2cc = load i32, i32* @r6, align 4
  %v3_a2cc = add i32 %v2_a2cc, 11
  %v4_a2cc = inttoptr i32 %v3_a2cc to i8*
  store i8 %v1_a2cc, i8* %v4_a2cc, align 1
  %v0_a2d0 = load i32, i32* @r6, align 4
  store i32 %v0_a2d0, i32* @r0, align 4
  %v2_a2d4 = call i32 @function_d0b8(i32 %v0_a2d0, i32 20)
  %v3_a2d4 = trunc i32 %v2_a2d4 to i8
  store i32 %v2_a2d4, i32* %r0.global-to-local, align 4
  %v4_a2d8 = sdiv i32 %v2_a2d4, 256
  store i32 %v4_a2d8, i32* %r3.global-to-local, align 4
  %v3_a2dc = load i32, i32* @r6, align 4
  %v4_a2dc = add i32 %v3_a2dc, 10
  %v5_a2dc = inttoptr i32 %v4_a2dc to i8*
  store i8 %v3_a2d4, i8* %v5_a2dc, align 1
  %v0_a2e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a2e0 = trunc i32 %v0_a2e0 to i8
  %v2_a2e0 = load i32, i32* @r6, align 4
  %v3_a2e0 = add i32 %v2_a2e0, 11
  %v4_a2e0 = inttoptr i32 %v3_a2e0 to i8*
  store i8 %v1_a2e0, i8* %v4_a2e0, align 1
  %v0_a2e4 = load i32, i32* @r7, align 4
  %v1_a2e4 = add i32 %v0_a2e4, 4
  %v2_a2e4 = inttoptr i32 %v1_a2e4 to i8*
  %v3_a2e4 = load i8, i8* %v2_a2e4, align 1
  %v4_a2e4 = zext i8 %v3_a2e4 to i32
  store i32 %v4_a2e4, i32* %r3.global-to-local, align 4
  %v1_a2e8 = add i32 %v0_a2e4, 5
  %v2_a2e8 = inttoptr i32 %v1_a2e8 to i8*
  %v3_a2e8 = load i8, i8* %v2_a2e8, align 1
  %v4_a2e8 = zext i8 %v3_a2e8 to i32
  store i32 %v0_a2e4, i32* @r1, align 4
  %v4_a2f0 = mul nuw nsw i32 %v4_a2e8, 256
  %v5_a2f0 = or i32 %v4_a2f0, %v4_a2e4
  store i32 %v5_a2f0, i32* %r2.global-to-local, align 4
  %v0_a2f4 = load i32, i32* @r8, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v3_a2f4 = add i32 %v0_a2e4, 6
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_a2fc = load i32, i32* @r8, align 4
  %v1_a2fc = trunc i32 %v0_a2fc to i8
  %v2_a2fc = load i32, i32* @r7, align 4
  %v3_a2fc = add i32 %v2_a2fc, 7
  %v4_a2fc = inttoptr i32 %v3_a2fc to i8*
  store i8 %v1_a2fc, i8* %v4_a2fc, align 1
  %v0_a300 = load i32, i32* @r6, align 4
  store i32 %v0_a300, i32* %r0.global-to-local, align 4
  %v4_a304 = call i32 @function_d114(i32 %v0_a300, i32 %v0_a2e4, i32 %v5_a2f0, i32 %stack_var_-152.0.ph)
  %v5_a304 = trunc i32 %v4_a304 to i8
  store i32 %v4_a304, i32* %r0.global-to-local, align 4
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v3_a30c = mul i32 %v3_a308, 32
  store i32 %v3_a30c, i32* %r2.global-to-local, align 4
  %v0_a310 = load i32, i32* @r5, align 4
  %v1_a310 = add i32 %v0_a310, 16
  %v2_a310 = inttoptr i32 %v1_a310 to i32*
  %v3_a310 = load i32, i32* %v2_a310, align 4
  store i32 %v3_a310, i32* %r1.global-to-local, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  store i32 %v5_a314, i32* %r2.global-to-local, align 4
  %v4_a31842 = udiv i32 %v4_a304, 256
  %v1_a31c = trunc i32 %v4_a31842 to i8
  %v2_a31c = load i32, i32* @r7, align 4
  %v3_a31c = add i32 %v2_a31c, 7
  %v4_a31c = inttoptr i32 %v3_a31c to i8*
  store i8 %v1_a31c, i8* %v4_a31c, align 1
  %v0_a320 = load i32, i32* %r2.global-to-local, align 4
  %v1_a320 = load i32, i32* @sb, align 4
  %v2_a320 = add i32 %v1_a320, %v0_a320
  store i32 %v2_a320, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a328 = load i32, i32* @r7, align 4
  %v4_a328 = add i32 %v3_a328, 6
  %v5_a328 = inttoptr i32 %v4_a328 to i8*
  store i8 %v5_a304, i8* %v5_a328, align 1
  %v0_a32c = load i32, i32* %r1.global-to-local, align 4
  %v1_a32c = load i32, i32* %lr.global-to-local, align 4
  %v2_a32c = add i32 %v1_a32c, 4
  %v3_a32c = inttoptr i32 %v2_a32c to i32*
  store i32 %v0_a32c, i32* %v3_a32c, align 4
  %v0_a330 = load i32, i32* %r3.global-to-local, align 4
  %v1_a330 = trunc i32 %v0_a330 to i8
  %v2_a330 = load i32, i32* %r2.global-to-local, align 4
  %v3_a330 = load i32, i32* @sb, align 4
  %v4_a330 = add i32 %v3_a330, %v2_a330
  %v5_a330 = inttoptr i32 %v4_a330 to i8*
  store i8 %v1_a330, i8* %v5_a330, align 1
  %v0_a334 = load i32, i32* @r8, align 4
  %v1_a334 = trunc i32 %v0_a334 to i8
  %v2_a334 = load i32, i32* %lr.global-to-local, align 4
  %v3_a334 = add i32 %v2_a334, 2
  %v4_a334 = inttoptr i32 %v3_a334 to i8*
  store i8 %v1_a334, i8* %v4_a334, align 1
  %v0_a338 = load i32, i32* @r8, align 4
  %v1_a338 = trunc i32 %v0_a338 to i8
  %v2_a338 = load i32, i32* %lr.global-to-local, align 4
  %v3_a338 = add i32 %v2_a338, 1
  %v4_a338 = inttoptr i32 %v3_a338 to i8*
  store i8 %v1_a338, i8* %v4_a338, align 1
  %v0_a33c = load i32, i32* @r8, align 4
  %v1_a33c = trunc i32 %v0_a33c to i8
  %v2_a33c = load i32, i32* %lr.global-to-local, align 4
  %v3_a33c = add i32 %v2_a33c, 3
  %v4_a33c = inttoptr i32 %v3_a33c to i8*
  store i8 %v1_a33c, i8* %v4_a33c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a348 = load i32, i32* @r5, align 4
  store i32 %v0_a348, i32* %r1.global-to-local, align 4
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_a354 = load i32, i32* %lr.global-to-local, align 4
  %v6_a35c = inttoptr i32 %v0_a348 to i32*
  %v7_a35c = call i32 @function_11980(i32 %v3_9efc, i32* %v6_a35c, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_a354, i32 16)
  %v3_a360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a360, i32* %r3.global-to-local, align 4
  %v1_a364 = add i32 %v3_a360, 1
  store i32 %v1_a364, i32* %r0.global-to-local, align 4
  %v1_a368 = load i32, i32* @fp, align 4
  %v9_a368 = icmp eq i32 %v1_a364, %v1_a368
  store i1 %v9_a368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a364, i32* %stack_var_-40, align 4
  %v6_a370 = icmp slt i32 %v1_a364, %v1_a368
  br i1 %v6_a370, label %dec_label_pc_a228, label %dec_label_pc_a210

dec_label_pc_a378:                                ; preds = %dec_label_pc_9f0c
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  %v1_a37c = call i32 @function_11120(i32 %v3_9efc)
  store i32 %v1_a37c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a380

dec_label_pc_a380:                                ; preds = %dec_label_pc_9da8, %dec_label_pc_a378
  %v29_a384 = phi i32 [ %v3_9efc, %dec_label_pc_9da8 ], [ %v1_a37c, %dec_label_pc_a378 ]
  store i32 %v3_9da8, i32* %r4.global-to-local, align 4
  store i32 %v15_9da8, i32* %r8.global-to-local, align 4
  ret i32 %v29_a384

dec_label_pc_a388:                                ; preds = %dec_label_pc_a228
  %v1_a388 = add i32 %v2_a230, 16
  %v2_a388 = inttoptr i32 %v1_a388 to i32*
  %v3_a388 = load i32, i32* %v2_a388, align 4
  store i32 %v3_a388, i32* %r4.global-to-local, align 4
  %v0_a38c = call i32 @function_e580()
  store i32 %v0_a38c, i32* %r0.global-to-local, align 4
  %v3_a390 = load i32, i32* %stack_var_-40, align 4
  %v5_a398 = mul i32 %v3_a390, 24
  %v0_a39c = load i32, i32* %r4.global-to-local, align 4
  %v1_a3a0 = load i32, i32* @sb, align 4
  %v2_a3a0 = add i32 %v1_a3a0, %v5_a398
  store i32 %v2_a3a0, i32* %r1.global-to-local, align 4
  %v1_a3a4 = and i32 %v0_a39c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_a3a4, i32* %r3.global-to-local, align 4
  %v1_a39c = udiv i32 %v0_a39c, 256
  %v3_a3a8 = and i32 %v1_a39c, 65280
  store i32 %v3_a3a8, i32* %r2.global-to-local, align 4
  %v3_a3ac = mul i32 %v0_a39c, 16777216
  %v1_a3b0 = add i32 %v2_a3a0, 20
  %v2_a3b0 = inttoptr i32 %v1_a3b0 to i8*
  %v3_a3b0 = load i8, i8* %v2_a3b0, align 1
  %v4_a3b0 = zext i8 %v3_a3b0 to i32
  store i32 %v4_a3b0, i32* %lr.global-to-local, align 4
  %v4_a3b4 = mul i32 %v1_a3a4, 256
  %v5_a3b4 = or i32 %v4_a3b4, %v3_a3ac
  %v4_a3b8 = udiv i32 %v0_a39c, 16777216
  %v5_a3b8 = or i32 %v3_a3a8, %v4_a3b8
  %v2_a3bc = or i32 %v5_a3b8, %v5_a3b4
  %v7_a3c0 = lshr i32 %v0_a38c, %v4_a3b0
  %v8_a3c0 = add i32 %v7_a3c0, %v2_a3bc
  %v3_a3cc = mul i32 %v8_a3c0, 16777216
  %v1_a3d0 = and i32 %v8_a3c0, 65280
  store i32 %v1_a3d0, i32* %r0.global-to-local, align 4
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  %v4_a3dc = mul nuw nsw i32 %v1_a3d0, 256
  %v5_a3dc = or i32 %v4_a3dc, %v3_a3cc
  store i32 %v5_a3dc, i32* %r1.global-to-local, align 4
  %v2_a3e0 = call i32 @llvm.bswap.i32(i32 %v8_a3c0)
  store i32 %v2_a3e0, i32* %r3.global-to-local, align 4
  store i1 %v7_a254, i1* %cpsr_z.global-to-local, align 1
  %v1_a3e8 = load i32, i32* @r5, align 4
  %v2_a3e8 = add i32 %v1_a3e8, 16
  %v3_a3e8 = inttoptr i32 %v2_a3e8 to i32*
  store i32 %v2_a3e0, i32* %v3_a3e8, align 4
  br i1 %v2_a254, label %dec_label_pc_a3f0, label %dec_label_pc_a25c

dec_label_pc_a3f0:                                ; preds = %dec_label_pc_a388, %dec_label_pc_a250
  %v0_a3f0 = call i32 @function_e580()
  store i32 %v0_a3f0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_a3fc = load i32, i32* @sl, align 4
  %v9_a3fc = icmp eq i32 %v0_a3fc, 65535
  store i1 %v9_a3fc, i1* %cpsr_z.global-to-local, align 1
  %v1_a400 = load i32, i32* @r5, align 4
  %v2_a400 = add i32 %v1_a400, 12
  %v3_a400 = inttoptr i32 %v2_a400 to i32*
  store i32 %v0_a3f0, i32* %v3_a400, align 4
  br i1 %v9_a3fc, label %dec_label_pc_a408, label %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge

dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge:    ; preds = %dec_label_pc_a3f0
  %v1_a270.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a26c

dec_label_pc_a408:                                ; preds = %dec_label_pc_a3f0, %dec_label_pc_a25c
  %v0_a408 = call i32 @function_e580()
  %v3_a410 = urem i32 %v0_a408, 65536
  store i32 %v3_a410, i32* %r0.global-to-local, align 4
  %v3_a41415 = udiv i32 %v0_a408, 256
  %v1_a418 = trunc i32 %v3_a41415 to i8
  %v2_a418 = load i32, i32* @r5, align 4
  %v3_a418 = add i32 %v2_a418, 5
  %v4_a418 = inttoptr i32 %v3_a418 to i8*
  store i8 %v1_a418, i8* %v4_a418, align 1
  %v0_a41c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_9f50, i32* %r3.global-to-local, align 4
  %v1_a424 = sub i32 999, %v0_a41c
  store i32 %v1_a424, i32* %r2.global-to-local, align 4
  %v3_a428 = sdiv i32 %v1_a424, 256
  store i32 %v3_a428, i32* %r1.global-to-local, align 4
  %v1_a42c = load i32, i32* @r4, align 4
  %v9_a42c = icmp eq i32 %v3_9f50, %v1_a42c
  store i1 %v9_a42c, i1* %cpsr_z.global-to-local, align 1
  %v1_a430 = trunc i32 %v0_a41c to i8
  %v2_a430 = load i32, i32* @r5, align 4
  %v3_a430 = add i32 %v2_a430, 4
  %v4_a430 = inttoptr i32 %v3_a430 to i8*
  store i8 %v1_a430, i8* %v4_a430, align 1
  %v0_a434 = load i32, i32* %r1.global-to-local, align 4
  %v1_a434 = trunc i32 %v0_a434 to i8
  %v2_a434 = load i32, i32* @r6, align 4
  %v3_a434 = add i32 %v2_a434, 5
  %v4_a434 = inttoptr i32 %v3_a434 to i8*
  store i8 %v1_a434, i8* %v4_a434, align 1
  %v0_a438 = load i32, i32* %r2.global-to-local, align 4
  %v1_a438 = trunc i32 %v0_a438 to i8
  %v2_a438 = load i32, i32* @r6, align 4
  %v3_a438 = add i32 %v2_a438, 4
  %v4_a438 = inttoptr i32 %v3_a438 to i8*
  store i8 %v1_a438, i8* %v4_a438, align 1
  %v0_a43c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a43c, label %dec_label_pc_a440, label %dec_label_pc_a408.dec_label_pc_a278_crit_edge

dec_label_pc_a408.dec_label_pc_a278_crit_edge:    ; preds = %dec_label_pc_a408
  %v1_a27c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

dec_label_pc_a440:                                ; preds = %dec_label_pc_a408, %dec_label_pc_a26c
  %v0_a440 = call i32 @function_e580()
  %v1_a440 = trunc i32 %v0_a440 to i8
  store i32 %v0_a440, i32* %r0.global-to-local, align 4
  store i32 %v3_9f54, i32* %r1.global-to-local, align 4
  %v4_a448 = sdiv i32 %v0_a440, 256
  store i32 %v4_a448, i32* %r3.global-to-local, align 4
  %v1_a44c = load i32, i32* @r4, align 4
  %v9_a44c = icmp eq i32 %v3_9f54, %v1_a44c
  store i1 %v9_a44c, i1* %cpsr_z.global-to-local, align 1
  %v3_a450 = load i32, i32* @r5, align 4
  %v4_a450 = add i32 %v3_a450, 44
  %v5_a450 = inttoptr i32 %v4_a450 to i8*
  store i8 %v1_a440, i8* %v5_a450, align 1
  %v0_a454 = load i32, i32* %r3.global-to-local, align 4
  %v1_a454 = trunc i32 %v0_a454 to i8
  %v2_a454 = load i32, i32* @r7, align 4
  %v3_a454 = add i32 %v2_a454, 1
  %v4_a454 = inttoptr i32 %v3_a454 to i8*
  store i8 %v1_a454, i8* %v4_a454, align 1
  %v0_a458 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a458, label %dec_label_pc_a45c, label %dec_label_pc_a284

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a440, %dec_label_pc_a278
  %v0_a45c = call i32 @function_e580()
  %v1_a45c = trunc i32 %v0_a45c to i8
  store i32 %v0_a45c, i32* %r0.global-to-local, align 4
  store i32 %v1_9f48, i32* %r2.global-to-local, align 4
  %v4_a464 = sdiv i32 %v0_a45c, 256
  store i32 %v4_a464, i32* %r3.global-to-local, align 4
  store i1 %v2_a288, i1* %cpsr_z.global-to-local, align 1
  %v1_a46c = trunc i32 %v4_a464 to i8
  %v2_a46c = load i32, i32* @r7, align 4
  %v3_a46c = add i32 %v2_a46c, 3
  %v4_a46c = inttoptr i32 %v3_a46c to i8*
  store i8 %v1_a46c, i8* %v4_a46c, align 1
  %v0_a470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a470, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_a45c
  %v1_a470 = load i32, i32* @r5, align 4
  %v2_a470 = add i32 %v1_a470, 16
  %v3_a470 = inttoptr i32 %v2_a470 to i32*
  %v4_a470 = load i32, i32* %v3_a470, align 4
  store i32 %v4_a470, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_a45c, %bb100
  %v3_a474 = load i32, i32* @r7, align 4
  %v4_a474 = add i32 %v3_a474, 2
  %v5_a474 = inttoptr i32 %v4_a474 to i8*
  store i8 %v1_a45c, i8* %v5_a474, align 1
  %v0_a478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a478, label %dec_label_pc_a480, label %bb102

bb102:                                            ; preds = %bb101
  %v1_a478 = load i32, i32* %r3.global-to-local, align 4
  %v2_a478 = load i32, i32* @r6, align 4
  %v3_a478 = add i32 %v2_a478, 16
  %v4_a478 = inttoptr i32 %v3_a478 to i32*
  store i32 %v1_a478, i32* %v4_a478, align 4
  br label %dec_label_pc_a298

dec_label_pc_a480:                                ; preds = %dec_label_pc_a284, %bb101
  %v0_a480 = call i32 @function_e580()
  store i32 %v0_a480, i32* %r0.global-to-local, align 4
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  %v1_a48c = load i32, i32* @r6, align 4
  %v2_a48c = add i32 %v1_a48c, 16
  %v3_a48c = inttoptr i32 %v2_a48c to i32*
  store i32 %v0_a480, i32* %v3_a48c, align 4
  br i1 %v2_a488, label %dec_label_pc_a2a4, label %dec_label_pc_a494

dec_label_pc_a494:                                ; preds = %dec_label_pc_a298, %dec_label_pc_a480
  %v0_a494 = load i32, i32* @r7, align 4
  %v1_a494 = add i32 %v0_a494, 8
  store i32 %v1_a494, i32* %r0.global-to-local, align 4
  store i32 %v5_9e94, i32* @r1, align 4
  %v1_a49c = inttoptr i32 %v1_a494 to i8*
  %v2_a49c = call i32 @function_e700(i8* %v1_a49c)
  store i32 %v2_a49c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2a4

dec_label_pc_a4a4:                                ; preds = %dec_label_pc_9f34
  %v1_a4ac = add i32 %v5_9e94, 8
  store i32 %v1_a4ac, i32* %r2.global-to-local, align 4
  %v1_a4b0 = add i32 %v5_9e94, 52
  store i32 %v1_a4b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a210.preheader

; uselistorder directives
  uselistorder i32 %v1_a4b0, { 1, 0 }
  uselistorder i32 %v1_a4ac, { 1, 0 }
  uselistorder i32 %v4_a464, { 1, 0 }
  uselistorder i32 %v0_a45c, { 0, 2, 1 }
  uselistorder i32 %v0_a440, { 0, 2, 1 }
  uselistorder i32 %v2_a3e0, { 1, 0 }
  uselistorder i32 %v8_a3c0, { 1, 2, 0 }
  uselistorder i32 %v0_a39c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a368, { 1, 2, 0 }
  uselistorder i32 %v1_a364, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_a308, { 1, 0, 2 }
  uselistorder i32 %v4_a304, { 0, 2, 1 }
  uselistorder i32 %v0_a2e4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_a2d4, { 0, 2, 1 }
  uselistorder i32 %v4_a2b8, { 1, 0 }
  uselistorder i32 %v7_a23c, { 1, 0, 2 }
  uselistorder i32 %v0_a210, { 1, 0 }
  uselistorder i1 %v7_a254, { 2, 1, 0 }
  uselistorder i1 %v2_a488, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a1d0, { 1, 0, 2 }
  uselistorder i32 %v0_a194, { 1, 0, 2 }
  uselistorder i32 %v3_a048, { 0, 2, 1 }
  uselistorder i32 %v3_a008, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_9fc0, { 1, 0 }
  uselistorder i32 %v1_9f9c, { 1, 0 }
  uselistorder i32 %v1_9f98, { 0, 2, 1 }
  uselistorder i32 %v3_9f7c, { 2, 1, 0 }
  uselistorder i32 %v0_9f58, { 1, 0, 2 }
  uselistorder i32 %v1_9f48, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_9f44, { 0, 2, 1 }
  uselistorder i32 %v0_9f40, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_9f2c, { 1, 0 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v3_9efc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_9ee8, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9eb4, { 1, 0, 2 }
  uselistorder i32 %v5_9e94, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_9e38, { 1, 0 }
  uselistorder i32 %v2_9dc8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9dac, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_a494, { 1, 0 }
  uselistorder label %dec_label_pc_a480, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_a380, { 1, 0 }
  uselistorder label %dec_label_pc_a2a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a210.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_a4c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a4c4 = load i32, i32* @r4, align 4
  %v12_a4c4 = load i32, i32* @r7, align 4
  %v1_a4c8 = urem i32 %arg1, 256
  store i32 %v1_a4c8, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_a4dc = urem i32 %arg3, 256
  store i32 %v1_a4dc, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_a4e4 = call i32 @function_11cd0(i32 %v1_a4c8, i32 4)
  %v0_a4e8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4f4 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4fc = inttoptr i32 %v0_a4e8 to i32*
  %v6_a4fc = call i32 @function_85e0(i32 %v0_a4f4, i32* %v5_a4fc, i32 2, i32 0)
  %v1_a508 = urem i32 %v6_a4fc, 256
  store i32 %v1_a508, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a514 = load i32, i32* @r4, align 4
  %v0_a518 = load i32, i32* @r5, align 4
  %v5_a51c = trunc i32 %v6_a4fc to i8
  %v6_a520 = inttoptr i32 %v0_a518 to i32*
  %v7_a520 = call i32 @function_85e0(i32 %v0_a514, i32* %v6_a520, i32 3, i32 65535)
  %v0_a524 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a520, i32* @r7, align 4
  %v0_a534 = load i32, i32* @r4, align 4
  %v4_a538 = inttoptr i32 %v0_a524 to i32*
  %v5_a538 = call i32 @function_85e0(i32 %v0_a534, i32* %v4_a538, i32 4, i32 64)
  %v1_a540 = urem i32 %v5_a538, 256
  store i32 %v1_a540, i32* %ip.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a550 = load i32, i32* @r4, align 4
  %v5_a554 = trunc i32 %v5_a538 to i8
  %v6_a558 = inttoptr i32 %v0_a544 to i32*
  %v7_a558 = call i32 @function_85e0(i32 %v0_a550, i32* %v6_a558, i32 5, i32 0)
  %v1_a564 = urem i32 %v7_a558, 256
  store i32 %v1_a564, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a570 = load i32, i32* @r4, align 4
  %v0_a574 = load i32, i32* @r5, align 4
  %v5_a57c = inttoptr i32 %v0_a574 to i32*
  %v6_a57c = call i32 @function_85e0(i32 %v0_a570, i32* %v5_a57c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a58c = load i32, i32* @r5, align 4
  store i32 %v6_a57c, i32* @r6, align 4
  %v0_a594 = load i32, i32* @r4, align 4
  %v4_a598 = inttoptr i32 %v0_a58c to i32*
  %v5_a598 = call i32 @function_85e0(i32 %v0_a594, i32* %v4_a598, i32 7, i32 27015)
  store i32 %v5_a598, i32* @r4, align 4
  %v1_a5a4 = call i32 @function_10250(i32 20)
  %v3_a5b0 = call i32 @function_1016c(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v3_a5b0, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a5c4 = call i32 @function_119e4(i32 2, i32 3, i32 17)
  %v7_a5c8 = icmp eq i32 %v3_a5c4, -1
  store i1 %v7_a5c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a5c4, i32* %fp.global-to-local, align 4
  br i1 %v7_a5c8, label %dec_label_pc_a97c, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_a4c4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5f0 = call i32 @function_119b4(i32 %v3_a5c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_a5f4 = icmp eq i32 %v6_a5f0, -1
  store i1 %v7_a5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5f4, label %dec_label_pc_a974, label %dec_label_pc_a5fc

dec_label_pc_a5fc:                                ; preds = %dec_label_pc_a5d4
  %v0_a5fc = load i32, i32* @r4, align 4
  %v3_a5fc = mul i32 %v0_a5fc, 65536
  store i32 %v3_a5fc, i32* @lr, align 4
  %v0_a600 = load i32, i32* @r7, align 4
  %v0_a604 = load i32, i32* @r6, align 4
  %v3_a604 = mul i32 %v0_a604, 65536
  store i32 %v3_a604, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a60c = urem i32 %v0_a600, 65536
  %v3_a610 = urem i32 %v0_a604, 65536
  store i32 %v3_a610, i32* %r2.global-to-local, align 4
  %v3_a614 = urem i32 %v0_a5fc, 65536
  store i32 %v3_a614, i32* %r3.global-to-local, align 4
  %v0_a618 = load i32, i32* %sb.global-to-local, align 4
  %v2_a618 = icmp eq i32 %v0_a618, 0
  store i1 %v2_a618, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_a618, 1
  br i1 %tmp50, label %dec_label_pc_a79c, label %dec_label_pc_a630

dec_label_pc_a630:                                ; preds = %dec_label_pc_a5fc
  %v1_a634 = urem i32 %v0_a5fc, 256
  %v1_a638 = urem i32 %v0_a604, 256
  %v1_a63c = urem i32 %v0_a600, 256
  %v3_a640 = mul nuw nsw i32 %v1_a638, 256
  %v3_a644 = mul nuw nsw i32 %v1_a634, 256
  %tmp51 = udiv i32 %v0_a600, 256
  %v3_a648 = urem i32 %tmp51, 256
  %v4_a64c = mul nuw nsw i32 %v1_a63c, 256
  %v5_a64c = or i32 %v4_a64c, %v3_a648
  store i32 %v5_a64c, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_a5fc, 256
  %v4_a650 = urem i32 %tmp52, 256
  %v5_a650 = or i32 %v4_a650, %v3_a644
  store i32 %v5_a650, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_a604, 256
  %v4_a654 = urem i32 %tmp53, 256
  %v5_a654 = or i32 %v4_a654, %v3_a640
  store i32 %v5_a654, i32* @r6, align 4
  store i32 %v1_a638, i32* %r2.global-to-local, align 4
  store i32 %v1_a634, i32* %r3.global-to-local, align 4
  %v2_a6d0 = icmp eq i32 %v1_a564, 0
  %v4_a6d4 = sext i8 %v5_a554 to i32
  %sext = mul i32 %v0_a600, 16777216
  %v4_a6f0 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_a604, 16777216
  %v4_a74c = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_a5fc, 16777216
  %v4_a76c = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %bb57, %dec_label_pc_a630
  %v2_a678 = call i32 @function_11cd0(i32 128, i32 1)
  store i32 %v2_a4e4, i32* %r2.global-to-local, align 4
  %v3_a680 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a680, i32* %r3.global-to-local, align 4
  %v2_a684 = load i32, i32* @r4, align 4
  %v5_a684 = mul i32 %v2_a684, 4
  %v6_a684 = add i32 %v5_a684, %v2_a4e4
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v2_a678, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r2.global-to-local, align 4
  %v1_a688 = load i32, i32* %r3.global-to-local, align 4
  %v4_a688 = mul i32 %v1_a688, 4
  %v5_a688 = add i32 %v4_a688, %v0_a688
  %v6_a688 = inttoptr i32 %v5_a688 to i32*
  %v7_a688 = load i32, i32* %v6_a688, align 4
  store i32 %v7_a688, i32* @lr, align 4
  %v1_a68c = inttoptr i32 %v7_a688 to i8*
  %v2_a68c = load i8, i8* %v1_a68c, align 1
  %tmp = urem i8 %v2_a68c, 16
  %v1_a690 = zext i8 %tmp to i32
  %v1_a694 = or i32 %v1_a690, 64
  store i32 %v1_a694, i32* %r3.global-to-local, align 4
  %v1_a698 = trunc i32 %v1_a694 to i8
  store i8 %v1_a698, i8* %v1_a68c, align 1
  %v0_a69c = load i32, i32* @lr, align 4
  %v1_a69c = inttoptr i32 %v0_a69c to i8*
  %v2_a69c = load i8, i8* %v1_a69c, align 1
  %v1_a6a0 = and i8 %v2_a69c, -16
  %v1_a6a4 = or i8 %v1_a6a0, 5
  store i8 %v1_a6a4, i8* %v1_a69c, align 1
  %v2_a6b0 = load i32, i32* @lr, align 4
  %v3_a6b0 = add i32 %v2_a6b0, 1
  %v4_a6b0 = inttoptr i32 %v3_a6b0 to i8*
  store i8 %v5_a51c, i8* %v4_a6b0, align 1
  %v3_a6b4 = load i32, i32* %stack_var_-44, align 4
  %v1_a6b8 = add i32 %v3_a6b4, 32
  %tmp54 = mul i32 %v1_a6b8, 256
  %v1_a6c4 = and i32 %tmp54, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp55 = udiv i32 %v1_a6b8, 256
  %v4_a6c8 = urem i32 %tmp55, 256
  %v5_a6c8 = or i32 %v4_a6c8, %v1_a6c4
  store i32 %v5_a6c8, i32* %r2.global-to-local, align 4
  store i1 %v2_a6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a6d4, i32* %r3.global-to-local, align 4
  %v2_a6d8 = load i32, i32* @lr, align 4
  %v3_a6d8 = add i32 %v2_a6d8, 8
  %v4_a6d8 = inttoptr i32 %v3_a6d8 to i8*
  store i8 %v5_a554, i8* %v4_a6d8, align 1
  %v0_a6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6dc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a670
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a6e0 = load i32, i32* @lr, align 4
  %v4_a6e0 = add i32 %v3_a6e0, 6
  %v5_a6e0 = inttoptr i32 %v4_a6e0 to i8*
  store i8 64, i8* %v5_a6e0, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a670, %bb
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @lr, align 4
  %v3_a6e4 = add i32 %v2_a6e4, 2
  %v4_a6e4 = inttoptr i32 %v3_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v4_a6e4, align 1
  %v0_a6e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a6e8 = sdiv i32 %v0_a6e8, 256
  store i32 %v3_a6e8, i32* %ip.global-to-local, align 4
  store i32 %v4_a6f0, i32* %r2.global-to-local, align 4
  %v2_a6f4 = load i32, i32* @lr, align 4
  %v3_a6f4 = add i32 %v2_a6f4, 9
  %v4_a6f4 = inttoptr i32 %v3_a6f4 to i8*
  store i8 17, i8* %v4_a6f4, align 1
  store i32 ptrtoint (i32* @global_var_1c230.50 to i32), i32* %r3.global-to-local, align 4
  %v0_a6fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a6fc = trunc i32 %v0_a6fc to i8
  %v2_a6fc = load i32, i32* @lr, align 4
  %v3_a6fc = add i32 %v2_a6fc, 5
  %v4_a6fc = inttoptr i32 %v3_a6fc to i8*
  store i8 %v1_a6fc, i8* %v4_a6fc, align 1
  %v0_a700 = load i32, i32* %ip.global-to-local, align 4
  %v1_a700 = trunc i32 %v0_a700 to i8
  %v2_a700 = load i32, i32* @lr, align 4
  %v3_a700 = add i32 %v2_a700, 3
  %v4_a700 = inttoptr i32 %v3_a700 to i8*
  store i8 %v1_a700, i8* %v4_a700, align 1
  %v0_a704 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a704, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_a7089 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a7089, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a708, i32* %ip.global-to-local, align 4
  %v3_a70c = load i32, i32* @lr, align 4
  %v4_a70c = add i32 %v3_a70c, 7
  %v5_a70c = inttoptr i32 %v4_a70c to i8*
  store i8 0, i8* %v5_a70c, align 1
  %v0_a714.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_a714 = phi i32 [ %v3_a7089, %.thread8 ], [ %v0_a714.pre, %bb56 ]
  %v2_a710 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_a710, i32* %r2.global-to-local, align 4
  %v3_a714 = mul i32 %v0_a714, 32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  %v1_a718 = load i32, i32* @lr, align 4
  %v2_a718 = add i32 %v1_a718, 12
  %v3_a718 = inttoptr i32 %v2_a718 to i32*
  store i32 %v2_a710, i32* %v3_a718, align 4
  %v0_a71c = load i32, i32* %r3.global-to-local, align 4
  %v1_a71c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_a71c, -8
  %v5_a71c = add i32 %v0_a71c, %tmp60
  %v1_a720 = load i32, i32* @sl, align 4
  %v2_a720 = add i32 %v5_a71c, %v1_a720
  store i32 %v2_a720, i32* %r3.global-to-local, align 4
  %v1_a724 = add i32 %v2_a720, 16
  %v2_a724 = inttoptr i32 %v1_a724 to i32*
  %v3_a724 = load i32, i32* %v2_a724, align 4
  %v1_a728 = load i32, i32* @lr, align 4
  %v2_a728 = add i32 %v1_a728, 16
  %v3_a728 = inttoptr i32 %v2_a728 to i32*
  store i32 %v3_a724, i32* %v3_a728, align 4
  %v3_a72c = load i32, i32* %stack_var_-44, align 4
  %v1_a730 = add i32 %v3_a72c, 12
  %tmp58 = mul i32 %v1_a730, 256
  %v1_a740 = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp59 = udiv i32 %v1_a730, 256
  %v4_a744 = urem i32 %tmp59, 256
  %v5_a744 = or i32 %v4_a744, %v1_a740
  store i32 %v5_a744, i32* %ip.global-to-local, align 4
  %v1_a748 = load i32, i32* @lr, align 4
  %v2_a748 = add i32 %v1_a748, 28
  %v3_a748 = inttoptr i32 %v2_a748 to i32*
  store i32 -1, i32* %v3_a748, align 4
  store i32 %v4_a74c, i32* %r2.global-to-local, align 4
  %v0_a750 = load i32, i32* @lr, align 4
  %v1_a750 = add i32 %v0_a750, 20
  store i32 %v1_a750, i32* %r4.global-to-local, align 4
  %v0_a754 = load i32, i32* %ip.global-to-local, align 4
  %v3_a754 = sdiv i32 %v0_a754, 256
  store i32 %v3_a754, i32* %r3.global-to-local, align 4
  %v0_a758 = load i32, i32* @r7, align 4
  %v1_a758 = trunc i32 %v0_a758 to i8
  %v3_a758 = add i32 %v0_a750, 4
  %v4_a758 = inttoptr i32 %v3_a758 to i8*
  store i8 %v1_a758, i8* %v4_a758, align 1
  %v0_a75c = load i32, i32* @r6, align 4
  %v1_a75c = trunc i32 %v0_a75c to i8
  %v2_a75c = load i32, i32* @lr, align 4
  %v3_a75c = add i32 %v2_a75c, 20
  %v4_a75c = inttoptr i32 %v3_a75c to i8*
  store i8 %v1_a75c, i8* %v4_a75c, align 1
  %v0_a760 = load i32, i32* %r3.global-to-local, align 4
  %v1_a760 = trunc i32 %v0_a760 to i8
  %v2_a760 = load i32, i32* %r4.global-to-local, align 4
  %v3_a760 = add i32 %v2_a760, 5
  %v4_a760 = inttoptr i32 %v3_a760 to i8*
  store i8 %v1_a760, i8* %v4_a760, align 1
  %v0_a764 = load i32, i32* @r5, align 4
  %v1_a764 = trunc i32 %v0_a764 to i8
  %v2_a764 = load i32, i32* %r4.global-to-local, align 4
  %v3_a764 = add i32 %v2_a764, 2
  %v4_a764 = inttoptr i32 %v3_a764 to i8*
  store i8 %v1_a764, i8* %v4_a764, align 1
  %v0_a768 = load i32, i32* %r2.global-to-local, align 4
  %v1_a768 = trunc i32 %v0_a768 to i8
  %v2_a768 = load i32, i32* %r4.global-to-local, align 4
  %v3_a768 = add i32 %v2_a768, 1
  %v4_a768 = inttoptr i32 %v3_a768 to i8*
  store i8 %v1_a768, i8* %v4_a768, align 1
  store i32 %v4_a76c, i32* %r3.global-to-local, align 4
  %v0_a770 = load i32, i32* %ip.global-to-local, align 4
  %v1_a770 = trunc i32 %v0_a770 to i8
  %v2_a770 = load i32, i32* %r4.global-to-local, align 4
  %v3_a770 = add i32 %v2_a770, 4
  %v4_a770 = inttoptr i32 %v3_a770 to i8*
  store i8 %v1_a770, i8* %v4_a770, align 1
  %v0_a774 = load i32, i32* %r3.global-to-local, align 4
  %v1_a774 = trunc i32 %v0_a774 to i8
  %v2_a774 = load i32, i32* %r4.global-to-local, align 4
  %v3_a774 = add i32 %v2_a774, 3
  %v4_a774 = inttoptr i32 %v3_a774 to i8*
  store i8 %v1_a774, i8* %v4_a774, align 1
  %v0_a778 = load i32, i32* %r8.global-to-local, align 4
  %v0_a77c = load i32, i32* @lr, align 4
  %v1_a77c = add i32 %v0_a77c, 32
  %v3_a780 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a780, i32* %r2.global-to-local, align 4
  %v3_a784 = call i32 @function_10898(i32 %v1_a77c, i32 %v0_a778, i32 %v3_a780)
  %v3_a788 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a788, i32* %r3.global-to-local, align 4
  %v1_a78c = add i32 %v3_a788, 1
  store i32 %v1_a78c, i32* @r4, align 4
  %v1_a790 = load i32, i32* %sb.global-to-local, align 4
  %v9_a790 = icmp eq i32 %v1_a78c, %v1_a790
  store i1 %v9_a790, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a78c, i32* %stack_var_-40, align 4
  %v5_a798 = icmp slt i32 %v1_a78c, %v1_a790
  br i1 %v5_a798, label %dec_label_pc_a670, label %dec_label_pc_a79c

dec_label_pc_a79c:                                ; preds = %bb57, %dec_label_pc_a5fc
  %v0_a79c = phi i32 [ %v0_a618, %dec_label_pc_a5fc ], [ %v1_a790, %bb57 ]
  %v2_a79c = icmp eq i32 %v0_a79c, 0
  store i1 %v2_a79c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a7e4 = icmp eq i32 %v3_a60c, 65535
  br label %dec_label_pc_a7a4.outer

dec_label_pc_a7a4.outer:                          ; preds = %dec_label_pc_a8b4, %dec_label_pc_a79c
  %v1_a7a4.ph.in = phi i32 [ %v1_a8a8, %dec_label_pc_a8b4 ], [ %v0_a79c, %dec_label_pc_a79c ]
  %v0_a7a4.ph = phi i1 [ %v2_a8b4, %dec_label_pc_a8b4 ], [ %v2_a79c, %dec_label_pc_a79c ]
  %v1_a7a4.ph = icmp slt i32 %v1_a7a4.ph.in, 0
  %v4_a7a4 = or i1 %v1_a7a4.ph, %v0_a7a4.ph
  br label %dec_label_pc_a7a4

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a7a4.outer, %dec_label_pc_a7a4
  br i1 %v4_a7a4, label %dec_label_pc_a7a4, label %dec_label_pc_a7a8

dec_label_pc_a7a8:                                ; preds = %dec_label_pc_a7a4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %dec_label_pc_a804, %dec_label_pc_a7a8
  %v1_a7c8 = phi i32 [ %v1_a8a4, %dec_label_pc_a804 ], [ 0, %dec_label_pc_a7a8 ]
  %v5_a7b8 = mul i32 %v1_a7c8, 24
  %v1_a7bc = load i32, i32* @sl, align 4
  %v2_a7bc = add i32 %v1_a7bc, %v5_a7b8
  store i32 %v2_a7bc, i32* %r3.global-to-local, align 4
  %v1_a7c4 = add i32 %v2_a7bc, 20
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i8*
  %v3_a7c4 = load i8, i8* %v2_a7c4, align 1
  %v4_a7c4 = zext i8 %v3_a7c4 to i32
  store i32 %v4_a7c4, i32* %r2.global-to-local, align 4
  %v4_a7c8 = mul i32 %v1_a7c8, 4
  %v5_a7c8 = add i32 %v4_a7c8, %v2_a4e4
  %v6_a7c8 = inttoptr i32 %v5_a7c8 to i32*
  %v7_a7c8 = load i32, i32* %v6_a7c8, align 4
  store i32 %v7_a7c8, i32* @r5, align 4
  %v7_a7d0 = icmp eq i8 %v3_a7c4, 31
  store i1 %v7_a7d0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_a7d8 = add i32 %v7_a7c8, 20
  store i32 %v1_a7d8, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_a7c4, 32
  br i1 %tmp61, label %dec_label_pc_a8c0, label %dec_label_pc_a7e0

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a7b4
  store i32 %v3_a60c, i32* %r2.global-to-local, align 4
  store i1 %v3_a7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a7e4, label %dec_label_pc_a928, label %dec_label_pc_a7ec

dec_label_pc_a7ec:                                ; preds = %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge, %dec_label_pc_a7e0
  %v1_a7f0 = phi i32 [ %v1_a7f0.pre, %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge ], [ 65535, %dec_label_pc_a7e0 ]
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v9_a7f0 = icmp eq i32 %v3_a610, %v1_a7f0
  store i1 %v9_a7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7f0, label %dec_label_pc_a944, label %dec_label_pc_a7f8

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge, %dec_label_pc_a7ec
  %v1_a7fc = phi i32 [ %v1_a7fc.pre, %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge ], [ %v1_a7f0, %dec_label_pc_a7ec ]
  %v9_a7fc = icmp eq i32 %v3_a614, %v1_a7fc
  store i1 %v9_a7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7fc, label %dec_label_pc_a960, label %dec_label_pc_a804

dec_label_pc_a804:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7f8, %dec_label_pc_a960
  %v0_a808 = load i32, i32* %r8.global-to-local, align 4
  %v1_a808 = trunc i32 %v0_a808 to i8
  %v2_a808 = load i32, i32* @r5, align 4
  %v3_a808 = add i32 %v2_a808, 10
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v0_a80c = load i32, i32* %r8.global-to-local, align 4
  %v1_a80c = trunc i32 %v0_a80c to i8
  %v2_a80c = load i32, i32* @r5, align 4
  %v3_a80c = add i32 %v2_a80c, 11
  %v4_a80c = inttoptr i32 %v3_a80c to i8*
  store i8 %v1_a80c, i8* %v4_a80c, align 1
  %v0_a810 = load i32, i32* @r5, align 4
  store i32 %v0_a810, i32* @r0, align 4
  %v2_a814 = call i32 @function_d0b8(i32 %v0_a810, i32 20)
  %v3_a814 = trunc i32 %v2_a814 to i8
  %v4_a818 = sdiv i32 %v2_a814, 256
  store i32 %v4_a818, i32* %r3.global-to-local, align 4
  %v1_a81c = trunc i32 %v4_a818 to i8
  %v2_a81c = load i32, i32* @r5, align 4
  %v3_a81c = add i32 %v2_a81c, 11
  %v4_a81c = inttoptr i32 %v3_a81c to i8*
  store i8 %v1_a81c, i8* %v4_a81c, align 1
  %v3_a820 = load i32, i32* @r5, align 4
  %v4_a820 = add i32 %v3_a820, 10
  %v5_a820 = inttoptr i32 %v4_a820 to i8*
  store i8 %v3_a814, i8* %v5_a820, align 1
  %v0_a824 = load i32, i32* %r8.global-to-local, align 4
  %v1_a824 = trunc i32 %v0_a824 to i8
  %v2_a824 = load i32, i32* @r6, align 4
  %v3_a824 = add i32 %v2_a824, 6
  %v4_a824 = inttoptr i32 %v3_a824 to i8*
  store i8 %v1_a824, i8* %v4_a824, align 1
  %v0_a828 = load i32, i32* %r8.global-to-local, align 4
  %v1_a828 = trunc i32 %v0_a828 to i8
  %v2_a828 = load i32, i32* @r6, align 4
  %v3_a828 = add i32 %v2_a828, 7
  %v4_a828 = inttoptr i32 %v3_a828 to i8*
  store i8 %v1_a828, i8* %v4_a828, align 1
  %v0_a82c = load i32, i32* @r5, align 4
  %v1_a82c = add i32 %v0_a82c, 24
  %v2_a82c = inttoptr i32 %v1_a82c to i8*
  %v3_a82c = load i8, i8* %v2_a82c, align 1
  %v4_a82c = zext i8 %v3_a82c to i32
  store i32 %v4_a82c, i32* %r3.global-to-local, align 4
  %v1_a830 = add i32 %v0_a82c, 25
  %v2_a830 = inttoptr i32 %v1_a830 to i8*
  %v3_a830 = load i8, i8* %v2_a830, align 1
  %v4_a830 = zext i8 %v3_a830 to i32
  %v4_a834 = mul nuw nsw i32 %v4_a830, 256
  %v5_a834 = or i32 %v4_a834, %v4_a82c
  store i32 %v5_a834, i32* %r2.global-to-local, align 4
  %v3_a838 = load i32, i32* %stack_var_-44, align 4
  %v0_a83c = load i32, i32* @r6, align 4
  store i32 %v0_a83c, i32* @r1, align 4
  %v1_a840 = add i32 %v3_a838, 12
  store i32 %v1_a840, i32* %r3.global-to-local, align 4
  %v4_a848 = call i32 @function_d114(i32 %v0_a82c, i32 %v0_a83c, i32 %v5_a834, i32 %v1_a840)
  %v5_a848 = trunc i32 %v4_a848 to i8
  %v4_a84c24 = udiv i32 %v4_a848, 256
  %v1_a850 = trunc i32 %v4_a84c24 to i8
  %v2_a850 = load i32, i32* @r6, align 4
  %v3_a850 = add i32 %v2_a850, 7
  %v4_a850 = inttoptr i32 %v3_a850 to i8*
  store i8 %v1_a850, i8* %v4_a850, align 1
  %v3_a854 = load i32, i32* @r6, align 4
  %v4_a854 = add i32 %v3_a854, 6
  %v5_a854 = inttoptr i32 %v4_a854 to i8*
  store i8 %v5_a848, i8* %v5_a854, align 1
  %v3_a858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a858, i32* %r3.global-to-local, align 4
  %v0_a85c = load i32, i32* @r5, align 4
  %v1_a85c = add i32 %v0_a85c, 20
  %v2_a85c = inttoptr i32 %v1_a85c to i32*
  %v3_a85c = load i32, i32* %v2_a85c, align 4
  %v5_a864 = mul i32 %v3_a858, 24
  %v1_a868 = load i32, i32* @sl, align 4
  %v2_a868 = add i32 %v1_a868, %v5_a864
  store i32 %v2_a868, i32* %ip.global-to-local, align 4
  %v3_a86c = udiv i32 %v3_a85c, 65536
  store i32 %v3_a86c, i32* %r2.global-to-local, align 4
  %v1_a870 = trunc i32 %v3_a86c to i8
  %v3_a870 = add i32 %v2_a868, 2
  %v4_a870 = inttoptr i32 %v3_a870 to i8*
  store i8 %v1_a870, i8* %v4_a870, align 1
  %v0_a874 = load i32, i32* %r2.global-to-local, align 4
  %v3_a87425 = udiv i32 %v0_a874, 256
  %v3_a878 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a878, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v3_a87425 to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 3
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a888 = load i32, i32* %r2.global-to-local, align 4
  %v1_a888 = add i32 %v0_a888, 32
  store i32 %v1_a888, i32* %r2.global-to-local, align 4
  %v0_a88c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a894 = load i32, i32* %ip.global-to-local, align 4
  %v6_a89c = inttoptr i32 %v0_a880 to i32*
  %v7_a89c = call i32 @function_11980(i32 %v0_a88c, i32* %v6_a89c, i32 %v1_a888, i32 16384, i32 %v0_a894, i32 16)
  %v3_a8a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a8a0, i32* %r3.global-to-local, align 4
  %v1_a8a4 = add i32 %v3_a8a0, 1
  %v1_a8a8 = load i32, i32* %sb.global-to-local, align 4
  %v9_a8a8 = icmp eq i32 %v1_a8a4, %v1_a8a8
  store i1 %v9_a8a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a8a4, i32* %stack_var_-40, align 4
  %v5_a8b0 = icmp slt i32 %v1_a8a4, %v1_a8a8
  br i1 %v5_a8b0, label %dec_label_pc_a7b4, label %dec_label_pc_a8b4

dec_label_pc_a8b4:                                ; preds = %dec_label_pc_a804
  %v2_a8b4 = icmp eq i32 %v1_a8a8, 0
  store i1 %v2_a8b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a7a4.outer

dec_label_pc_a8c0:                                ; preds = %dec_label_pc_a7b4
  %v1_a8c0 = add i32 %v2_a7bc, 16
  %v2_a8c0 = inttoptr i32 %v1_a8c0 to i32*
  %v3_a8c0 = load i32, i32* %v2_a8c0, align 4
  store i32 %v3_a8c0, i32* @r4, align 4
  %v0_a8c4 = call i32 @function_e580()
  %v3_a8c8 = load i32, i32* %stack_var_-40, align 4
  %v5_a8d0 = mul i32 %v3_a8c8, 24
  %v0_a8d4 = load i32, i32* @r4, align 4
  %v1_a8d8 = and i32 %v0_a8d4, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_a8d8, i32* %r3.global-to-local, align 4
  %v1_a8d4 = udiv i32 %v0_a8d4, 256
  %v3_a8dc = and i32 %v1_a8d4, 65280
  store i32 %v3_a8dc, i32* %r2.global-to-local, align 4
  %v1_a8e0 = load i32, i32* @sl, align 4
  %v2_a8e0 = add i32 %v1_a8e0, %v5_a8d0
  store i32 %v2_a8e0, i32* %ip.global-to-local, align 4
  %v3_a8e4 = mul i32 %v0_a8d4, 16777216
  %v4_a8e8 = mul i32 %v1_a8d8, 256
  %v5_a8e8 = or i32 %v4_a8e8, %v3_a8e4
  %v1_a8ec = add i32 %v2_a8e0, 20
  %v2_a8ec = inttoptr i32 %v1_a8ec to i8*
  %v3_a8ec = load i8, i8* %v2_a8ec, align 1
  %v4_a8ec = zext i8 %v3_a8ec to i32
  %v4_a8f0 = udiv i32 %v0_a8d4, 16777216
  %v5_a8f0 = or i32 %v3_a8dc, %v4_a8f0
  %v2_a8f4 = or i32 %v5_a8f0, %v5_a8e8
  %v7_a8f8 = lshr i32 %v0_a8c4, %v4_a8ec
  %v8_a8f8 = add i32 %v7_a8f8, %v2_a8f4
  store i32 %v3_a60c, i32* %r2.global-to-local, align 4
  %v2_a918 = call i32 @llvm.bswap.i32(i32 %v8_a8f8)
  store i32 %v2_a918, i32* %r3.global-to-local, align 4
  %v1_a91c = load i32, i32* %r7.global-to-local, align 4
  %v9_a91c = icmp eq i32 %v3_a60c, %v1_a91c
  store i1 %v9_a91c, i1* %cpsr_z.global-to-local, align 1
  %v1_a920 = load i32, i32* @r5, align 4
  %v2_a920 = add i32 %v1_a920, 16
  %v3_a920 = inttoptr i32 %v2_a920 to i32*
  store i32 %v2_a918, i32* %v3_a920, align 4
  br i1 %v9_a91c, label %dec_label_pc_a928, label %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge

dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge:    ; preds = %dec_label_pc_a8c0
  %v1_a7f0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_a7ec

dec_label_pc_a928:                                ; preds = %dec_label_pc_a8c0, %dec_label_pc_a7e0
  %v0_a928 = call i32 @function_e580()
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v4_a92c26 = udiv i32 %v0_a928, 256
  %v1_a930 = trunc i32 %v4_a92c26 to i8
  %v2_a930 = load i32, i32* @r5, align 4
  %v3_a930 = add i32 %v2_a930, 5
  %v4_a930 = inttoptr i32 %v3_a930 to i8*
  store i8 %v1_a930, i8* %v4_a930, align 1
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v1_a938 = load i32, i32* %r7.global-to-local, align 4
  %v9_a938 = icmp eq i32 %v3_a610, %v1_a938
  store i1 %v9_a938, i1* %cpsr_z.global-to-local, align 1
  %v3_a93c = load i32, i32* @r5, align 4
  %v4_a93c = add i32 %v3_a93c, 4
  %v5_a93c = inttoptr i32 %v4_a93c to i8*
  store i8 %v1_a928, i8* %v5_a93c, align 1
  %v0_a940 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a940, label %dec_label_pc_a944, label %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge

dec_label_pc_a928.dec_label_pc_a7f8_crit_edge:    ; preds = %dec_label_pc_a928
  %v1_a7fc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_a7f8

dec_label_pc_a944:                                ; preds = %dec_label_pc_a928, %dec_label_pc_a7ec
  %v0_a944 = call i32 @function_e580()
  %v1_a944 = trunc i32 %v0_a944 to i8
  %v4_a94c = sdiv i32 %v0_a944, 256
  store i32 %v4_a94c, i32* %r3.global-to-local, align 4
  %v1_a950 = load i32, i32* %r7.global-to-local, align 4
  %v9_a950 = icmp eq i32 %v3_a614, %v1_a950
  store i1 %v9_a950, i1* %cpsr_z.global-to-local, align 1
  %v3_a954 = load i32, i32* @r5, align 4
  %v4_a954 = add i32 %v3_a954, 20
  %v5_a954 = inttoptr i32 %v4_a954 to i8*
  store i8 %v1_a944, i8* %v5_a954, align 1
  %v0_a958 = load i32, i32* %r3.global-to-local, align 4
  %v1_a958 = trunc i32 %v0_a958 to i8
  %v2_a958 = load i32, i32* @r6, align 4
  %v3_a958 = add i32 %v2_a958, 1
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v1_a958, i8* %v4_a958, align 1
  %v0_a95c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a95c, label %dec_label_pc_a960, label %dec_label_pc_a804

dec_label_pc_a960:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7f8
  %v0_a960 = call i32 @function_e580()
  %v1_a960 = trunc i32 %v0_a960 to i8
  %v4_a964 = sdiv i32 %v0_a960, 256
  store i32 %v4_a964, i32* %r3.global-to-local, align 4
  %v1_a968 = trunc i32 %v4_a964 to i8
  %v2_a968 = load i32, i32* @r6, align 4
  %v3_a968 = add i32 %v2_a968, 3
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v1_a968, i8* %v4_a968, align 1
  %v3_a96c = load i32, i32* @r6, align 4
  %v4_a96c = add i32 %v3_a96c, 2
  %v5_a96c = inttoptr i32 %v4_a96c to i8*
  store i8 %v1_a960, i8* %v5_a96c, align 1
  br label %dec_label_pc_a804

dec_label_pc_a974:                                ; preds = %dec_label_pc_a5d4
  %v0_a974 = load i32, i32* %fp.global-to-local, align 4
  %v1_a978 = call i32 @function_11120(i32 %v0_a974)
  br label %dec_label_pc_a97c

dec_label_pc_a97c:                                ; preds = %dec_label_pc_a4c4, %dec_label_pc_a974
  %v29_a980 = phi i32 [ %v3_a5c4, %dec_label_pc_a4c4 ], [ %v1_a978, %dec_label_pc_a974 ]
  store i32 %v3_a4c4, i32* %r4.global-to-local, align 4
  store i32 %v12_a4c4, i32* %r7.global-to-local, align 4
  ret i32 %v29_a980

; uselistorder directives
  uselistorder i32 %v4_a964, { 1, 0 }
  uselistorder i32 %v2_a918, { 1, 0 }
  uselistorder i32 %v0_a8d4, { 1, 0, 2, 3 }
  uselistorder i1 %v2_a8b4, { 1, 0 }
  uselistorder i32 %v1_a8a8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a8a4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_a86c, { 1, 0 }
  uselistorder i32 %v4_a818, { 1, 0 }
  uselistorder i1 %v3_a7e4, { 1, 0 }
  uselistorder i32 %v1_a78c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a730, { 1, 0 }
  uselistorder i32 %v1_a6b8, { 1, 0 }
  uselistorder i32 %v1_a638, { 1, 0 }
  uselistorder i32 %v1_a634, { 1, 0 }
  uselistorder i32 %v0_a604, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a5fc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_a5f4, { 1, 0 }
  uselistorder i1 %v7_a5c8, { 1, 0 }
  uselistorder i32 %v3_a5c4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a564, { 1, 0 }
  uselistorder i8 %v5_a554, { 1, 0 }
  uselistorder i32 %v5_a538, { 1, 0 }
  uselistorder i32 %v6_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4c8, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_a97c, { 1, 0 }
  uselistorder label %dec_label_pc_a804, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a7a4, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a988(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a988:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_a988 = load i32, i32* @r4, align 4
  %v15_a988 = load i32, i32* @r8, align 4
  %v18_a988 = load i32, i32* @sb, align 4
  %v21_a988 = load i32, i32* @sl, align 4
  %v24_a988 = load i32, i32* @fp, align 4
  %v1_a994 = urem i32 %arg1, 256
  store i32 %v1_a994, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a9a0 = urem i32 %arg3, 256
  store i32 %v1_a9a0, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_a9ac = call i32 @function_11cd0(i32 %v1_a994, i32 4)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r4, align 4
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_85e0(i32 %v0_a9bc, i32* %v5_a9c4, i32 2, i32 0)
  %v1_a9d0 = urem i32 %v6_a9c4, 256
  store i32 %v1_a9d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a9dc = load i32, i32* @r4, align 4
  store i32 %v0_a9dc, i32* %r0.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  %v5_a9e4 = trunc i32 %v6_a9c4 to i8
  %v6_a9e8 = inttoptr i32 %v0_a9e0 to i32*
  %v7_a9e8 = call i32 @function_85e0(i32 %v0_a9dc, i32* %v6_a9e8, i32 3, i32 65535)
  %v0_a9ec = load i32, i32* @r5, align 4
  store i32 %v0_a9ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r4, align 4
  store i32 %v0_a9f8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_aa00 = inttoptr i32 %v0_a9ec to i32*
  %v6_aa00 = call i32 @function_85e0(i32 %v0_a9f8, i32* %v5_aa00, i32 4, i32 64)
  %v1_aa08 = urem i32 %v6_aa00, 256
  store i32 %v1_aa08, i32* %ip.global-to-local, align 4
  %v0_aa0c = load i32, i32* @r5, align 4
  store i32 %v0_aa0c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa18 = load i32, i32* @r4, align 4
  store i32 %v0_aa18, i32* %r0.global-to-local, align 4
  %v6_aa20 = inttoptr i32 %v0_aa0c to i32*
  %v7_aa20 = call i32 @function_85e0(i32 %v0_aa18, i32* %v6_aa20, i32 5, i32 0)
  %v1_aa2c = urem i32 %v7_aa20, 256
  store i32 %v1_aa2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_aa38 = load i32, i32* @r4, align 4
  store i32 %v0_aa38, i32* %r0.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r5, align 4
  store i32 %v0_aa3c, i32* %r1.global-to-local, align 4
  %v5_aa44 = inttoptr i32 %v0_aa3c to i32*
  %v6_aa44 = call i32 @function_85e0(i32 %v0_aa38, i32* %v5_aa44, i32 6, i32 65535)
  %v0_aa48 = load i32, i32* @r5, align 4
  store i32 %v0_aa48, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_aa44, i32* %fp.global-to-local, align 4
  %v0_aa58 = load i32, i32* @r4, align 4
  store i32 %v0_aa58, i32* %r0.global-to-local, align 4
  %v4_aa5c = inttoptr i32 %v0_aa48 to i32*
  %v5_aa5c = call i32 @function_85e0(i32 %v0_aa58, i32* %v4_aa5c, i32 7, i32 53)
  %v0_aa64 = load i32, i32* @r5, align 4
  store i32 %v0_aa64, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_aa5c, i32* %sb.global-to-local, align 4
  %v0_aa74 = load i32, i32* @r4, align 4
  store i32 %v0_aa74, i32* %r0.global-to-local, align 4
  %v4_aa78 = inttoptr i32 %v0_aa64 to i32*
  %v5_aa78 = call i32 @function_85e0(i32 %v0_aa74, i32* %v4_aa78, i32 9, i32 65535)
  %v0_aa7c = load i32, i32* @r5, align 4
  store i32 %v0_aa7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_aa78, i32* @sl, align 4
  %v0_aa8c = load i32, i32* @r4, align 4
  store i32 %v0_aa8c, i32* %r0.global-to-local, align 4
  %v4_aa90 = inttoptr i32 %v0_aa7c to i32*
  %v5_aa90 = call i32 @function_85e0(i32 %v0_aa8c, i32* %v4_aa90, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r5, align 4
  store i32 %v0_aa9c, i32* %r1.global-to-local, align 4
  store i32 %v5_aa90, i32* %r8.global-to-local, align 4
  %v0_aaa4 = load i32, i32* @r4, align 4
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  %v4_aaa8 = inttoptr i32 %v0_aa9c to i32*
  %v5_aaa8 = call i32 @function_81cc(i32 %v0_aaa4, i32* %v4_aaa8, i32 8, i32 0)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_aab4 = call i32 @function_10250(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_aac0 = call i32 @function_1016c(i32 21, i32* null)
  store i32 %v3_aac0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_aac8 = inttoptr i32 %v3_aac0 to i8*
  %v3_aac8 = call i32 @function_1124c(i8* %v2_aac8, i32 0)
  store i32 %v3_aac8, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_aad4 = call i32 @function_10198(i32 21)
  store i32 %v1_aad4, i32* %r0.global-to-local, align 4
  %v0_aad8 = load i32, i32* @r4, align 4
  %v1_aad8 = icmp slt i32 %v0_aad8, 0
  %v2_aad8 = icmp eq i32 %v0_aad8, 0
  store i1 %v2_aad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_aad8, label %dec_label_pc_b0a4, label %dec_label_pc_aae0

dec_label_pc_aae0:                                ; preds = %dec_label_pc_a988
  %v2_aae4 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_aae4, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_aae4, i32* %r1.global-to-local, align 4
  store i32 %v0_aad8, i32* %r0.global-to-local, align 4
  %v4_aaf4 = call i32 @function_112e8(i32 %v0_aad8, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_aaf4, i32* @r5, align 4
  %v0_aafc = load i32, i32* @r4, align 4
  store i32 %v0_aafc, i32* %r0.global-to-local, align 4
  %v1_ab00 = call i32 @function_11120(i32 %v0_aafc)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_ab08 = call i32 @function_10250(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_ab14 = call i32 @function_1016c(i32 22, i32* null)
  %v0_ab18 = load i32, i32* @r5, align 4
  store i32 %v0_ab18, i32* @r1, align 4
  store i32 %v3_ab14, i32* %r2.global-to-local, align 4
  store i32 %v2_aae4, i32* %r0.global-to-local, align 4
  %v3_ab24 = bitcast i32* %stack_var_-2120 to i8*
  %v4_ab24 = call i32 @function_10b70(i8* %v3_ab24, i32 %v0_ab18, i32 %v3_ab14)
  store i32 %v4_ab24, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_ab30 = call i32 @function_10198(i32 22)
  store i32 %v1_ab30, i32* %r0.global-to-local, align 4
  %v0_ab34 = load i32, i32* @r4, align 4
  %v7_ab34 = icmp eq i32 %v0_ab34, -1
  store i1 %v7_ab34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab34, label %dec_label_pc_b0a4, label %dec_label_pc_ab3c

dec_label_pc_ab3c:                                ; preds = %dec_label_pc_aae0
  %v0_ab3c = load i32, i32* @r5, align 4
  %v9_ab3c = icmp eq i32 %v0_ab3c, %v0_ab34
  store i1 %v9_ab3c, i1* %cpsr_z.global-to-local, align 1
  %v7_ab40 = icmp sgt i32 %v0_ab3c, %v0_ab34
  br i1 %v7_ab40, label %dec_label_pc_ab44, label %dec_label_pc_b0a4

dec_label_pc_ab44:                                ; preds = %dec_label_pc_ab3c
  store i32 %v0_ab3c, i32* %r3.global-to-local, align 4
  store i32 %v0_ab34, i32* %r2.global-to-local, align 4
  %v0_ab54 = load i32, i32* @r6, align 4
  %v2_ab54 = add i32 %v0_ab54, %v0_ab34
  store i32 %v2_ab54, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ab5c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_ab5c, i32* @r7, align 4
  %v1_ab8c = add i32 %v0_ab3c, -1
  br label %dec_label_pc_ab84

dec_label_pc_ab68:                                ; preds = %dec_label_pc_abac, %bb138
  %v9_ab68 = icmp eq i32 %v0_ab74, %v1_ab8c
  store i1 %v9_ab68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab68, label %dec_label_pc_abb8, label %dec_label_pc_ab70

dec_label_pc_ab70:                                ; preds = %dec_label_pc_ab9c, %dec_label_pc_ab68, %bb
  %v0_aba842 = phi i32 [ %v0_aba8, %dec_label_pc_ab9c ], [ %v0_aba843, %dec_label_pc_ab68 ], [ %v0_aba8, %bb ]
  %v0_ab8838 = phi i32 [ 0, %dec_label_pc_ab9c ], [ %v0_ab8839, %dec_label_pc_ab68 ], [ 0, %bb ]
  store i32 %v0_ab3c, i32* %r0.global-to-local, align 4
  %v1_ab74 = add i32 %v0_ab74, 1
  store i32 %v1_ab74, i32* %r2.global-to-local, align 4
  %v9_ab78 = icmp eq i32 %v0_ab3c, %v1_ab74
  store i1 %v9_ab78, i1* %cpsr_z.global-to-local, align 1
  %v1_ab7c = add i32 %v0_ab7c, 1
  store i32 %v1_ab7c, i32* @r7, align 4
  br i1 %v9_ab78, label %dec_label_pc_b0a4, label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %dec_label_pc_ab70, %dec_label_pc_ab44
  %v0_ab7c = phi i32 [ %v1_ab7c, %dec_label_pc_ab70 ], [ %v2_ab5c, %dec_label_pc_ab44 ]
  %v0_ab74 = phi i32 [ %v1_ab74, %dec_label_pc_ab70 ], [ %v0_ab34, %dec_label_pc_ab44 ]
  %v0_aba8 = phi i32 [ %v0_aba842, %dec_label_pc_ab70 ], [ 0, %dec_label_pc_ab44 ]
  %v0_ab88 = phi i32 [ %v0_ab8838, %dec_label_pc_ab70 ], [ 0, %dec_label_pc_ab44 ]
  %v0_ab90 = phi i32 [ %v1_ab90, %dec_label_pc_ab70 ], [ %v2_ab54, %dec_label_pc_ab44 ]
  %v1_ab84 = inttoptr i32 %v0_ab90 to i8*
  %v2_ab84 = load i8, i8* %v1_ab84, align 1
  %v3_ab84 = zext i8 %v2_ab84 to i32
  store i32 %v3_ab84, i32* %r3.global-to-local, align 4
  %v2_ab88 = icmp eq i32 %v0_ab88, 0
  store i1 %v2_ab88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ab8c, i32* %ip.global-to-local, align 4
  %v1_ab90 = add i32 %v0_ab90, 1
  store i32 %v1_ab90, i32* %r1.global-to-local, align 4
  %v1_ab94 = add nsw i32 %v3_ab84, -48
  store i32 %v1_ab94, i32* %r0.global-to-local, align 4
  br i1 %v2_ab88, label %dec_label_pc_ab9c, label %dec_label_pc_abac

dec_label_pc_ab9c:                                ; preds = %dec_label_pc_ab84
  %v7_ab9c = icmp eq i8 %v2_ab84, 9
  store i1 %v7_ab9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab9c, label %dec_label_pc_ab70, label %bb

bb:                                               ; preds = %dec_label_pc_ab9c
  %v8_aba0 = icmp eq i8 %v2_ab84, 32
  store i1 %v8_aba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_aba0, label %dec_label_pc_ab70, label %dec_label_pc_aba8

dec_label_pc_aba8:                                ; preds = %bb
  %v1_aba8 = add i32 %v0_aba8, 1
  store i32 %v1_aba8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_ab84, %dec_label_pc_aba8
  %v0_aba843 = phi i32 [ %v0_aba8, %dec_label_pc_ab84 ], [ %v1_aba8, %dec_label_pc_aba8 ]
  %v0_ab8839 = phi i32 [ %v0_ab88, %dec_label_pc_ab84 ], [ %v1_aba8, %dec_label_pc_aba8 ]
  %v7_abac = icmp eq i8 %v2_ab84, 46
  store i1 %v7_abac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_abac, label %dec_label_pc_ab68, label %bb138

bb138:                                            ; preds = %dec_label_pc_abac
  %v8_abb0 = icmp eq i32 %v1_ab94, 9
  store i1 %v8_abb0, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_ab94, 10
  br i1 %tmp, label %dec_label_pc_ab68, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_ab68, %bb138
  %v0_ab74.lcssa = phi i32 [ %v1_ab8c, %dec_label_pc_ab68 ], [ %v0_ab74, %bb138 ]
  %v2_abbc = sub i32 %v0_ab74.lcssa, %v0_ab34
  store i32 %v2_abbc, i32* %r2.global-to-local, align 4
  store i32 %v2_ab54, i32* %r1.global-to-local, align 4
  store i32 %v2_ab5c, i32* %r0.global-to-local, align 4
  %v3_abc8 = call i32 @function_10898(i32 %v2_ab5c, i32 %v2_ab54, i32 %v2_abbc)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ab5c, i32* @r0, align 4
  %v2_abd8 = load i32, i32* @r7, align 4
  %v3_abd8 = inttoptr i32 %v2_abd8 to i8*
  store i8 0, i8* %v3_abd8, align 1
  %v1_abdc = call i32 @function_1181c(i32 %v2_ab5c)
  store i32 %v1_abdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_abe420:                              ; preds = %dec_label_pc_b0a4
  unreachable

dec_label_pc_abe4:                                ; preds = %dec_label_pc_b11c, %dec_label_pc_b10c, %dec_label_pc_b100, %dec_label_pc_b0ec, %dec_label_pc_abb8
  %v29_b0e874 = phi i32 [ %v1_b0a8, %dec_label_pc_b11c ], [ %v1_b0a8, %dec_label_pc_b10c ], [ %v1_b0a8, %dec_label_pc_b100 ], [ %v1_b0a8, %dec_label_pc_b0ec ], [ %v1_abdc, %dec_label_pc_abb8 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_b11c ], [ 104859200, %dec_label_pc_b10c ], [ 707416650, %dec_label_pc_b100 ], [ 134744072, %dec_label_pc_b0ec ], [ %v1_abdc, %dec_label_pc_abb8 ]
  store i32 %v5_aaa8, i32* %ip.global-to-local, align 4
  %v2_abe8 = icmp eq i32 %v5_aaa8, 0
  store i1 %v2_abe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_abe8, label %dec_label_pc_b0e0, label %dec_label_pc_abf0

dec_label_pc_abf0:                                ; preds = %dec_label_pc_abe4
  store i32 %v5_aaa8, i32* %r0.global-to-local, align 4
  %v1_abf4 = inttoptr i32 %v5_aaa8 to i8*
  %v2_abf4 = call i32 @function_1081c(i8* %v1_abf4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ac08 = call i32 @function_119e4(i32 2, i32 3, i32 17)
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v7_ac0c = icmp eq i32 %v3_ac08, -1
  store i1 %v7_ac0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac0c, label %dec_label_pc_b0e0, label %dec_label_pc_ac18

dec_label_pc_ac18:                                ; preds = %dec_label_pc_abf0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ac24 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ac24, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ac38 = call i32 @function_119b4(i32 %v3_ac08, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_ac38, i32* %r0.global-to-local, align 4
  %v7_ac3c = icmp eq i32 %v6_ac38, -1
  store i1 %v7_ac3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac3c, label %dec_label_pc_b0d8, label %dec_label_pc_ac44

dec_label_pc_ac44:                                ; preds = %dec_label_pc_ac18
  store i32 %v1_a994, i32* %r0.global-to-local, align 4
  %v3_ac4c = mul i32 %v7_a9e8, 65536
  store i32 %v3_ac4c, i32* %lr.global-to-local, align 4
  %v0_ac50 = load i32, i32* @sl, align 4
  %v3_ac50 = mul i32 %v0_ac50, 65536
  store i32 %v3_ac50, i32* %sl.global-to-local, align 4
  %v0_ac54 = load i32, i32* %r8.global-to-local, align 4
  %v0_ac58 = load i32, i32* %fp.global-to-local, align 4
  %v0_ac5c = load i32, i32* %sb.global-to-local, align 4
  %v3_ac5c = mul i32 %v0_ac5c, 65536
  store i32 %v3_ac5c, i32* %sb.global-to-local, align 4
  %v5_ac60 = trunc i32 %v0_ac54 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ac68 = urem i32 %v7_a9e8, 65536
  store i32 %v3_ac68, i32* %r2.global-to-local, align 4
  %v3_ac6c = urem i32 %v0_ac58, 65536
  store i32 %v3_ac6c, i32* %r3.global-to-local, align 4
  %v3_ac70 = urem i32 %v0_ac5c, 65536
  store i32 %v3_ac70, i32* %r4.global-to-local, align 4
  %v3_ac74 = urem i32 %v0_ac50, 65536
  store i32 %v3_ac74, i32* %r8.global-to-local, align 4
  %v2_ac78 = icmp eq i32 %v1_a994, 0
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_ac78, label %dec_label_pc_b0c8, label %dec_label_pc_ac9c

dec_label_pc_ac9c:                                ; preds = %dec_label_pc_ac44
  %v4_aca0 = sext i8 %v5_ac60 to i32
  %v2_aca4 = add i32 %v4_aca0, %v2_abf4
  store i32 %v2_aca4, i32* @fp, align 4
  %v3_aca8 = mul i32 %v2_aca4, 65536
  %v1_acac = add i32 %v3_aca8, 1769472
  store i32 %v1_acac, i32* @r6, align 4
  %v1_acb0 = add i32 %v3_aca8, 3080192
  %v1_acc4 = urem i32 %v0_ac50, 256
  %v3_acd4 = udiv i32 %v1_acac, 256
  %v1_acd8 = urem i32 %v7_a9e8, 256
  %v1_acdc = and i32 %v3_acd4, 65280
  %v1_ace0 = urem i32 %v0_ac5c, 256
  %v3_ace4 = mul nuw nsw i32 %v1_acc4, 256
  %v1_acec = urem i32 %v0_ac58, 256
  %v3_acf0 = mul nuw nsw i32 %v1_ace0, 256
  %tmp139 = udiv i32 %v0_ac50, 256
  %v4_acf4 = urem i32 %tmp139, 256
  %v5_acf4 = or i32 %v4_acf4, %v3_ace4
  store i32 %v5_acf4, i32* %r8.global-to-local, align 4
  %v4_acf8 = udiv i32 %v1_acac, 16777216
  %v5_acf8 = or i32 %v1_acdc, %v4_acf8
  store i32 %v5_acf8, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_ac58, 256
  %v3_ad04 = urem i32 %tmp140, 256
  %v4_ad08 = sdiv i32 %v1_acb0, 16777216
  %tmp141 = udiv i32 %v7_a9e8, 256
  %v4_ad10 = mul nuw nsw i32 %v1_acec, 256
  %v5_ad10 = or i32 %v4_ad10, %v3_ad04
  store i32 %v5_ad10, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_ac5c, 256
  %v4_ad14 = urem i32 %tmp142, 256
  %v5_ad14 = or i32 %v4_ad14, %v3_acf0
  store i32 %v5_ad14, i32* %sb.global-to-local, align 4
  store i32 %v1_acd8, i32* %r0.global-to-local, align 4
  %v1_ad20 = add i32 %v2_abf4, 1
  store i32 %v1_ad20, i32* @r7, align 4
  %v3_ad24 = ashr i32 %v1_acb0, 31
  store i32 %v3_ad24, i32* @lr, align 4
  store i32 %v1_acec, i32* %r1.global-to-local, align 4
  store i32 %v1_ace0, i32* %r2.global-to-local, align 4
  %v3_ad3075 = udiv i32 %v1_acdc, 256
  store i32 %v3_ad3075, i32* %r3.global-to-local, align 4
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ad94 = sext i8 %v5_a9e4 to i32
  %sext13 = mul i32 %v6_aa00, 16777216
  %v4_adac = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_adc0 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_a9e8, 16777216
  %v4_adc4 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_acac, 256
  %v4_adf4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_ac5c, 16777216
  %v4_adf8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_ac58, 16777216
  %v4_ae1c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_ac50, 16777216
  %v4_ae28 = sdiv i32 %sext19, 16777216
  %v1_ada4 = trunc i32 %v4_ad08 to i8
  %extract.t = trunc i32 %v3_ad24 to i8
  br label %dec_label_pc_ad54

dec_label_pc_ad54:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_ac9c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ad5c = call i32 @function_11cd0(i32 600, i32 1)
  store i32 %v2_ad5c, i32* %r0.global-to-local, align 4
  store i32 %v2_a9ac, i32* %lr.global-to-local, align 4
  %v3_ad64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad64, i32* %r3.global-to-local, align 4
  %v2_ad68 = load i32, i32* @r4, align 4
  %v5_ad68 = mul i32 %v2_ad68, 4
  %v6_ad68 = add i32 %v5_ad68, %v2_a9ac
  %v7_ad68 = inttoptr i32 %v6_ad68 to i32*
  store i32 %v2_ad5c, i32* %v7_ad68, align 4
  %v0_ad6c = load i32, i32* %lr.global-to-local, align 4
  %v1_ad6c = load i32, i32* %r3.global-to-local, align 4
  %v4_ad6c = mul i32 %v1_ad6c, 4
  %v5_ad6c = add i32 %v4_ad6c, %v0_ad6c
  %v6_ad6c = inttoptr i32 %v5_ad6c to i32*
  %v7_ad6c = load i32, i32* %v6_ad6c, align 4
  store i32 %v7_ad6c, i32* %r1.global-to-local, align 4
  %v1_ad70 = inttoptr i32 %v7_ad6c to i8*
  %v2_ad70 = load i8, i8* %v1_ad70, align 1
  %tmp154 = urem i8 %v2_ad70, 16
  %v1_ad74 = zext i8 %tmp154 to i32
  %v1_ad78 = or i32 %v1_ad74, 64
  store i32 %v1_ad78, i32* %r2.global-to-local, align 4
  %v1_ad7c = trunc i32 %v1_ad78 to i8
  store i8 %v1_ad7c, i8* %v1_ad70, align 1
  %v0_ad80 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad80 = inttoptr i32 %v0_ad80 to i8*
  %v2_ad80 = load i8, i8* %v1_ad80, align 1
  %v1_ad84 = and i8 %v2_ad80, -16
  %v1_ad88 = or i8 %v1_ad84, 5
  store i32 %v1_aa2c, i32* %r0.global-to-local, align 4
  store i8 %v1_ad88, i8* %v1_ad80, align 1
  store i32 %v4_ad94, i32* %r2.global-to-local, align 4
  %v2_ad98 = load i32, i32* %r1.global-to-local, align 4
  %v3_ad98 = add i32 %v2_ad98, 1
  %v4_ad98 = inttoptr i32 %v3_ad98 to i8*
  store i8 %v5_a9e4, i8* %v4_ad98, align 1
  store i32 %v4_ad08, i32* %r3.global-to-local, align 4
  %v0_ada0 = load i32, i32* %r0.global-to-local, align 4
  %v2_ada0 = icmp eq i32 %v0_ada0, 0
  store i1 %v2_ada0, i1* %cpsr_z.global-to-local, align 1
  %v2_ada4 = load i32, i32* %r1.global-to-local, align 4
  %v3_ada4 = add i32 %v2_ada4, 2
  %v4_ada4 = inttoptr i32 %v3_ada4 to i8*
  store i8 %v1_ada4, i8* %v4_ada4, align 1
  store i32 %v3_ad24, i32* %r4.global-to-local, align 4
  store i32 %v4_adac, i32* %r0.global-to-local, align 4
  %v0_adb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adb0, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_ad54
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_adb4 = load i32, i32* %r1.global-to-local, align 4
  %v4_adb4 = add i32 %v3_adb4, 6
  %v5_adb4 = inttoptr i32 %v4_adb4 to i8*
  store i8 64, i8* %v5_adb4, align 1
  %v0_adbc.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_adbc.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_ad54, %bb143
  %v0_adbc.off0 = phi i8 [ %extract.t, %dec_label_pc_ad54 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_adbc = load i32, i32* %r1.global-to-local, align 4
  %v3_adbc = add i32 %v2_adbc, 3
  %v4_adbc = inttoptr i32 %v3_adbc to i8*
  store i8 %v0_adbc.off0, i8* %v4_adbc, align 1
  store i32 %v4_adc0, i32* %ip.global-to-local, align 4
  store i32 %v4_adc4, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c230.50 to i32), i32* %r4.global-to-local, align 4
  %v0_adcc = load i32, i32* %r0.global-to-local, align 4
  %v1_adcc = trunc i32 %v0_adcc to i8
  %v2_adcc = load i32, i32* %r1.global-to-local, align 4
  %v3_adcc = add i32 %v2_adcc, 8
  %v4_adcc = inttoptr i32 %v3_adcc to i8*
  store i8 %v1_adcc, i8* %v4_adcc, align 1
  %v0_add0 = load i32, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v0_add0 to i8
  %v2_add0 = load i32, i32* %r1.global-to-local, align 4
  %v3_add0 = add i32 %v2_add0, 9
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  %v0_add4 = load i32, i32* %lr.global-to-local, align 4
  %v1_add4 = trunc i32 %v0_add4 to i8
  %v2_add4 = load i32, i32* %r1.global-to-local, align 4
  %v3_add4 = add i32 %v2_add4, 5
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_add8, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_addc23 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_addc23, i32* %r3.global-to-local, align 4
  store i32 %v4_aca0, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_addc = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_addc, i32* %r3.global-to-local, align 4
  store i32 %v4_aca0, i32* %lr.global-to-local, align 4
  %v3_ade4 = load i32, i32* %r1.global-to-local, align 4
  %v4_ade4 = add i32 %v3_ade4, 7
  %v5_ade4 = inttoptr i32 %v4_ade4 to i8*
  store i8 0, i8* %v5_ade4, align 1
  %v0_adec.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_adf0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_adf0 = phi i32 [ %v2_addc23, %.thread22 ], [ %v0_adf0.pre, %bb144 ]
  %v0_adec = phi i32 [ %v4_aca0, %.thread22 ], [ %v0_adec.pre, %bb144 ]
  %v0_ade8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ade8 = add i32 %v0_adec, 41
  %v2_adec = add i32 %v1_ade8, %v0_ade8
  store i32 %v2_adec, i32* %r4.global-to-local, align 4
  %v2_adf0 = add i32 %v0_ade8, 12
  %v3_adf0 = inttoptr i32 %v2_adf0 to i32*
  store i32 %v0_adf0, i32* %v3_adf0, align 4
  store i32 %v4_adf4, i32* %r2.global-to-local, align 4
  store i32 %v4_adf8, i32* %r3.global-to-local, align 4
  %v0_adfc = load i32, i32* %r1.global-to-local, align 4
  %v1_adfc = add i32 %v0_adfc, 20
  store i32 %v1_adfc, i32* %r0.global-to-local, align 4
  %v0_ae00 = load i32, i32* %ip.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v3_ae00 = add i32 %v0_adfc, 4
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae04 = add i32 %v2_ae04, 5
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  %v2_ae08 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae08 = add i32 %v2_ae08, 3
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v0_ae0c = load i32, i32* %sb.global-to-local, align 4
  %v1_ae0c = trunc i32 %v0_ae0c to i8
  %v2_ae0c = load i32, i32* %r0.global-to-local, align 4
  %v3_ae0c = add i32 %v2_ae0c, 2
  %v4_ae0c = inttoptr i32 %v3_ae0c to i8*
  store i8 %v1_ae0c, i8* %v4_ae0c, align 1
  %v0_ae10 = load i32, i32* %sl.global-to-local, align 4
  %v1_ae10 = trunc i32 %v0_ae10 to i8
  %v2_ae10 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae10 = add i32 %v2_ae10, 4
  %v4_ae10 = inttoptr i32 %v3_ae10 to i8*
  store i8 %v1_ae10, i8* %v4_ae10, align 1
  %v0_ae14 = load i32, i32* @r5, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae14 = add i32 %v2_ae14, 20
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  store i32 %v4_ae1c, i32* %r2.global-to-local, align 4
  %v1_ae20 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae20 = add i32 %v1_ae20, 16
  %v3_ae20 = inttoptr i32 %v2_ae20 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_ae20, align 4
  %v0_ae24 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae24 = trunc i32 %v0_ae24 to i8
  %v2_ae24 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae24 = add i32 %v2_ae24, 1
  %v4_ae24 = inttoptr i32 %v3_ae24 to i8*
  store i8 %v1_ae24, i8* %v4_ae24, align 1
  store i32 %v4_ae28, i32* %lr.global-to-local, align 4
  store i32 %v4_aca0, i32* %r0.global-to-local, align 4
  %v0_ae30 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae30 = add i32 %v0_ae30, 28
  store i32 %v1_ae30, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ae3c = load i32, i32* %r8.global-to-local, align 4
  %v1_ae3c = trunc i32 %v0_ae3c to i8
  %v4_ae3c = inttoptr i32 %v1_ae30 to i8*
  store i8 %v1_ae3c, i8* %v4_ae3c, align 1
  %v0_ae40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v2_ae40 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae40 = add i32 %v2_ae40, 5
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v0_ae44 = load i32, i32* %lr.global-to-local, align 4
  %v1_ae44 = trunc i32 %v0_ae44 to i8
  %v2_ae44 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae44 = add i32 %v2_ae44, 1
  %v4_ae44 = inttoptr i32 %v3_ae44 to i8*
  store i8 %v1_ae44, i8* %v4_ae44, align 1
  %v0_ae48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae48 = add i32 %v2_ae48, 2
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  %v1_ae4c = trunc i32 %v0_ae4c to i8
  %v2_ae4c = load i32, i32* %ip.global-to-local, align 4
  %v3_ae4c = add i32 %v2_ae4c, 3
  %v4_ae4c = inttoptr i32 %v3_ae4c to i8*
  store i8 %v1_ae4c, i8* %v4_ae4c, align 1
  %v0_ae50 = load i32, i32* @r6, align 4
  %v1_ae50 = trunc i32 %v0_ae50 to i8
  %v2_ae50 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae50 = add i32 %v2_ae50, 4
  %v4_ae50 = inttoptr i32 %v3_ae50 to i8*
  store i8 %v1_ae50, i8* %v4_ae50, align 1
  %v0_ae54 = load i32, i32* %r0.global-to-local, align 4
  %v1_ae54 = trunc i32 %v0_ae54 to i8
  %v2_ae54 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae54 = add i32 %v2_ae54, 40
  %v4_ae54 = inttoptr i32 %v3_ae54 to i8*
  store i8 %v1_ae54, i8* %v4_ae54, align 1
  store i32 %v5_aaa8, i32* %r1.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r7, align 4
  store i32 %v0_ae5c, i32* %r2.global-to-local, align 4
  %v0_ae60 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae60 = add i32 %v0_ae60, 1
  store i32 %v1_ae60, i32* %r0.global-to-local, align 4
  %v3_ae64 = call i32 @function_10898(i32 %v1_ae60, i32 %v5_aaa8, i32 %v0_ae5c)
  store i32 %v3_ae64, i32* %r0.global-to-local, align 4
  store i32 %v2_abf4, i32* %r1.global-to-local, align 4
  %v1_ae6c = load i32, i32* @r6, align 4
  %v9_ae6c = icmp eq i32 %v2_abf4, %v1_ae6c
  store i1 %v9_ae6c, i1* %cpsr_z.global-to-local, align 1
  %v7_ae70 = icmp sgt i32 %v2_abf4, %v1_ae6c
  store i32 %v1_ae6c, i32* %lr.global-to-local, align 4
  %v0_ae80 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ae80, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_ae6c to i8
  br i1 %v7_ae70, label %dec_label_pc_ae7c, label %dec_label_pc_aebc

dec_label_pc_ae7c:                                ; preds = %bb145
  store i32 %v1_ae6c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ae88

dec_label_pc_ae88:                                ; preds = %bb148, %dec_label_pc_ae7c
  %v0_aea485151 = phi i32 [ %v0_aea485152, %bb148 ], [ %v1_ae6c, %dec_label_pc_ae7c ]
  %v1_ae9833 = phi i32 [ %v1_aea891, %bb148 ], [ %v1_ae6c, %dec_label_pc_ae7c ]
  %v1_ae94.off0 = phi i8 [ %v1_ae9456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_ae7c ]
  %v0_ae9832 = phi i32 [ %v0_ae98325488, %bb148 ], [ %v0_ae80, %dec_label_pc_ae7c ]
  store i32 %v5_aaa8, i32* %ip.global-to-local, align 4
  %v2_ae8c = add i32 %v1_ae9833, %v5_aaa8
  %v3_ae8c = inttoptr i32 %v2_ae8c to i8*
  %v4_ae8c = load i8, i8* %v3_ae8c, align 1
  %v6_ae8c = zext i8 %v4_ae8c to i32
  store i32 %v6_ae8c, i32* %r3.global-to-local, align 4
  %v7_ae90 = icmp eq i8 %v4_ae8c, 46
  store i1 %v7_ae90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae90, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_ae88
  %v2_ae9834 = add i32 %v1_ae9833, %v0_ae9832
  store i32 %v2_ae9834, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_ae88
  %v3_ae94 = load i32, i32* %r2.global-to-local, align 4
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94.off0, i8* %v4_ae94, align 1
  %v0_ae9c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ae98 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae98 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae98 = add i32 %v1_ae98, %v0_ae98
  store i32 %v2_ae98, i32* %r0.global-to-local, align 4
  br i1 %v0_ae9c.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_aea485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_ae9c = add i32 %v2_ae98, 1
  store i32 %v2_ae9c, i32* %r2.global-to-local, align 4
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v0_aea4 = load i32, i32* %lr.global-to-local, align 4
  %v1_aea4 = add i32 %v0_aea4, 1
  store i32 %v1_aea4, i32* %ip.global-to-local, align 4
  %v1_aea8 = add i32 %v1_ae98, 1
  store i32 %v1_aea8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_aea485 = phi i32 [ %v0_aea485.pre, %bb146..thread35_crit_edge ], [ %v0_aea485151, %.thread31 ]
  %v0_aea8.ph = phi i32 [ %v1_ae98, %bb146..thread35_crit_edge ], [ %v1_ae9833, %.thread31 ]
  %v0_ae983254.ph = phi i32 [ %v0_ae98, %bb146..thread35_crit_edge ], [ %v0_ae9832, %.thread31 ]
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v1_aea486 = add i32 %v0_aea485, 1
  store i32 %v1_aea486, i32* %ip.global-to-local, align 4
  %v1_aea887 = add i32 %v0_aea8.ph, 1
  store i32 %v1_aea887, i32* %r1.global-to-local, align 4
  %v2_aeb0 = urem i32 %v1_aea486, 256
  store i32 %v2_aeb0, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_aea486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_aea485152 = phi i32 [ 0, %bb147 ], [ %v2_aeb0, %.thread35 ]
  %v1_aea891 = phi i32 [ %v1_aea8, %bb147 ], [ %v1_aea887, %.thread35 ]
  %v0_ae98325488 = phi i32 [ %v0_ae98, %bb147 ], [ %v0_ae983254.ph, %.thread35 ]
  %v1_ae9456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_aeb4 = icmp eq i32 %v2_abf4, %v1_aea891
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aeb4, label %dec_label_pc_aebc.loopexit, label %dec_label_pc_ae88

dec_label_pc_aebc.loopexit:                       ; preds = %bb148
  %v2_aebc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_aebc

dec_label_pc_aebc:                                ; preds = %dec_label_pc_aebc.loopexit, %bb145
  %v2_aebc = phi i32 [ %v2_aebc.pre, %dec_label_pc_aebc.loopexit ], [ %v0_ae80, %bb145 ]
  %v0_aebc.off0 = phi i8 [ %v1_ae9456.off0, %dec_label_pc_aebc.loopexit ], [ %extract.t78, %bb145 ]
  %v3_aebc = inttoptr i32 %v2_aebc to i8*
  store i8 %v0_aebc.off0, i8* %v3_aebc, align 1
  %v3_aec0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_abf4, i32* %r1.global-to-local, align 4
  %v0_aec8 = load i32, i32* %r4.global-to-local, align 4
  %v2_aec8 = add i32 %v0_aec8, %v2_abf4
  store i32 %v2_aec8, i32* %r3.global-to-local, align 4
  %v1_aecc = add i32 %v3_aec0, 1
  store i32 %v1_aecc, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_aedc = icmp eq i32 %v1_a994, %v1_aecc
  store i1 %v9_aedc, i1* %cpsr_z.global-to-local, align 1
  %v1_aee0 = add i32 %v2_aec8, 2
  store i32 %v1_aee0, i32* %r2.global-to-local, align 4
  %v4_aee4 = inttoptr i32 %v1_aee0 to i8*
  store i8 0, i8* %v4_aee4, align 1
  %v0_aee8 = load i32, i32* @lr, align 4
  %v1_aee8 = trunc i32 %v0_aee8 to i8
  %v2_aee8 = load i32, i32* %r2.global-to-local, align 4
  %v3_aee8 = add i32 %v2_aee8, 3
  %v4_aee8 = inttoptr i32 %v3_aee8 to i8*
  store i8 %v1_aee8, i8* %v4_aee8, align 1
  %v0_aeec = load i32, i32* @lr, align 4
  %v1_aeec = trunc i32 %v0_aeec to i8
  %v2_aeec = load i32, i32* %r2.global-to-local, align 4
  %v3_aeec = add i32 %v2_aeec, 1
  %v4_aeec = inttoptr i32 %v3_aeec to i8*
  store i8 %v1_aeec, i8* %v4_aeec, align 1
  %v0_aef0 = load i32, i32* %ip.global-to-local, align 4
  %v1_aef0 = trunc i32 %v0_aef0 to i8
  %v2_aef0 = load i32, i32* %r2.global-to-local, align 4
  %v3_aef0 = add i32 %v2_aef0, 2
  %v4_aef0 = inttoptr i32 %v3_aef0 to i8*
  store i8 %v1_aef0, i8* %v4_aef0, align 1
  %v0_aef4 = load i32, i32* @r4, align 4
  store i32 %v0_aef4, i32* %stack_var_-40, align 4
  %v8_aef8 = icmp sgt i32 %v1_a994, %v1_aecc
  br i1 %v8_aef8, label %dec_label_pc_ad54, label %dec_label_pc_aefc

dec_label_pc_aefc:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_b0c8
  %v4_af6c.pre-phi = phi i32 [ %v4_b0cc, %dec_label_pc_b0c8 ], [ %v4_aca0, %dec_label_pc_aebc ]
  store i32 %v1_a994, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af08

dec_label_pc_af08:                                ; preds = %dec_label_pc_af08, %dec_label_pc_b02c, %dec_label_pc_aefc
  br i1 %v2_ac78, label %dec_label_pc_af08, label %dec_label_pc_af0c

dec_label_pc_af0c:                                ; preds = %dec_label_pc_af08
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_af1c = load i32, i32* @fp, align 4
  %v1_af1c = add i32 %v0_af1c, 27
  store i32 %v1_af1c, i32* @sb, align 4
  %v1_af20 = add i32 %v0_af1c, 47
  store i32 %v1_af20, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %dec_label_pc_af68.dec_label_pc_af28_crit_edge, %dec_label_pc_af0c
  %v1_af48 = phi i32 [ %v1_af34.pre, %dec_label_pc_af68.dec_label_pc_af28_crit_edge ], [ 65535, %dec_label_pc_af0c ]
  %v1_af30 = phi i32 [ %v1_b018, %dec_label_pc_af68.dec_label_pc_af28_crit_edge ], [ 0, %dec_label_pc_af0c ]
  store i32 %v2_a9ac, i32* %r3.global-to-local, align 4
  store i32 %v3_ac68, i32* %r8.global-to-local, align 4
  %v4_af30 = mul i32 %v1_af30, 4
  %v5_af30 = add i32 %v4_af30, %v2_a9ac
  %v6_af30 = inttoptr i32 %v5_af30 to i32*
  %v7_af30 = load i32, i32* %v6_af30, align 4
  store i32 %v7_af30, i32* @r4, align 4
  %v9_af34 = icmp eq i32 %v3_ac68, %v1_af48
  store i1 %v9_af34, i1* %cpsr_z.global-to-local, align 1
  %v1_af38 = add i32 %v7_af30, 20
  store i32 %v1_af38, i32* @r5, align 4
  %v1_af3c = add i32 %v7_af30, 28
  store i32 %v1_af3c, i32* @r8, align 4
  br i1 %v9_af34, label %dec_label_pc_b03c, label %dec_label_pc_af44

dec_label_pc_af44:                                ; preds = %dec_label_pc_af28
  store i32 %v3_ac6c, i32* %ip.global-to-local, align 4
  %v9_af48 = icmp eq i32 %v3_ac6c, %v1_af48
  store i1 %v9_af48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af48, label %dec_label_pc_b058, label %dec_label_pc_af50

dec_label_pc_af50:                                ; preds = %dec_label_pc_b03c.dec_label_pc_af50_crit_edge, %dec_label_pc_af44
  %v1_af54 = phi i32 [ %v1_af54.pre, %dec_label_pc_b03c.dec_label_pc_af50_crit_edge ], [ %v1_af48, %dec_label_pc_af44 ]
  store i32 %v3_ac70, i32* %lr.global-to-local, align 4
  %v9_af54 = icmp eq i32 %v3_ac70, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af54, label %dec_label_pc_b074, label %dec_label_pc_af5c

dec_label_pc_af5c:                                ; preds = %dec_label_pc_b058.dec_label_pc_af5c_crit_edge, %dec_label_pc_af50
  %v1_af60 = phi i32 [ %v1_af60.pre, %dec_label_pc_b058.dec_label_pc_af5c_crit_edge ], [ %v1_af54, %dec_label_pc_af50 ]
  store i32 %v3_ac74, i32* %r0.global-to-local, align 4
  %v9_af60 = icmp eq i32 %v3_ac74, %v1_af60
  store i1 %v9_af60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af60, label %dec_label_pc_b090, label %dec_label_pc_af68

dec_label_pc_af68:                                ; preds = %dec_label_pc_b074, %dec_label_pc_af5c, %dec_label_pc_b090
  %v0_af68 = load i32, i32* @r4, align 4
  %v1_af68 = add i32 %v0_af68, 41
  store i32 %v1_af68, i32* %r0.global-to-local, align 4
  store i32 %v4_af6c.pre-phi, i32* %r1.global-to-local, align 4
  %v2_af70 = call i32 @function_e634(i32 %v1_af68, i32 %v4_af6c.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_af78 = load i32, i32* @r7, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r4, align 4
  %v3_af78 = add i32 %v2_af78, 10
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* @r7, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r4, align 4
  %v3_af7c = add i32 %v2_af7c, 11
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  %v0_af80 = load i32, i32* @r4, align 4
  store i32 %v0_af80, i32* @r0, align 4
  %v2_af84 = call i32 @function_d0b8(i32 %v0_af80, i32 20)
  %v3_af84 = trunc i32 %v2_af84 to i8
  store i32 %v2_af84, i32* %r0.global-to-local, align 4
  %v4_af88 = sdiv i32 %v2_af84, 256
  store i32 %v4_af88, i32* %r3.global-to-local, align 4
  %v1_af8c = trunc i32 %v4_af88 to i8
  %v2_af8c = load i32, i32* @r4, align 4
  %v3_af8c = add i32 %v2_af8c, 11
  %v4_af8c = inttoptr i32 %v3_af8c to i8*
  store i8 %v1_af8c, i8* %v4_af8c, align 1
  %v3_af90 = load i32, i32* @r4, align 4
  %v4_af90 = add i32 %v3_af90, 10
  %v5_af90 = inttoptr i32 %v4_af90 to i8*
  store i8 %v3_af84, i8* %v5_af90, align 1
  %v0_af94 = load i32, i32* @r7, align 4
  %v1_af94 = trunc i32 %v0_af94 to i8
  %v2_af94 = load i32, i32* @r5, align 4
  %v3_af94 = add i32 %v2_af94, 6
  %v4_af94 = inttoptr i32 %v3_af94 to i8*
  store i8 %v1_af94, i8* %v4_af94, align 1
  %v0_af98 = load i32, i32* @r7, align 4
  %v1_af98 = trunc i32 %v0_af98 to i8
  %v2_af98 = load i32, i32* @r5, align 4
  %v3_af98 = add i32 %v2_af98, 7
  %v4_af98 = inttoptr i32 %v3_af98 to i8*
  store i8 %v1_af98, i8* %v4_af98, align 1
  %v0_af9c = load i32, i32* @r4, align 4
  %v1_af9c = add i32 %v0_af9c, 24
  %v2_af9c = inttoptr i32 %v1_af9c to i8*
  %v3_af9c = load i8, i8* %v2_af9c, align 1
  %v4_af9c = zext i8 %v3_af9c to i32
  store i32 %v4_af9c, i32* %r3.global-to-local, align 4
  %v1_afa0 = add i32 %v0_af9c, 25
  %v2_afa0 = inttoptr i32 %v1_afa0 to i8*
  %v3_afa0 = load i8, i8* %v2_afa0, align 1
  %v4_afa0 = zext i8 %v3_afa0 to i32
  %v0_afa4 = load i32, i32* @r5, align 4
  store i32 %v0_afa4, i32* @r1, align 4
  %v4_afa8 = mul nuw nsw i32 %v4_afa0, 256
  %v5_afa8 = or i32 %v4_afa8, %v4_af9c
  store i32 %v5_afa8, i32* %r2.global-to-local, align 4
  store i32 %v0_af9c, i32* %r0.global-to-local, align 4
  %v0_afb0 = load i32, i32* @sb, align 4
  store i32 %v0_afb0, i32* %r3.global-to-local, align 4
  %v4_afb4 = call i32 @function_d114(i32 %v0_af9c, i32 %v0_afa4, i32 %v5_afa8, i32 %v0_afb0)
  %v5_afb4 = trunc i32 %v4_afb4 to i8
  store i32 %v4_afb4, i32* %r0.global-to-local, align 4
  %v3_afb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_afc8 = mul i32 %v3_afb8, 24
  %v2_afcc = add i32 %v5_afc8, %arg2
  store i32 %v2_afcc, i32* %lr.global-to-local, align 4
  %v4_afd0 = sdiv i32 %v4_afb4, 256
  store i32 %v4_afd0, i32* %r3.global-to-local, align 4
  %v3_afd4 = load i32, i32* @r5, align 4
  %v4_afd4 = add i32 %v3_afd4, 6
  %v5_afd4 = inttoptr i32 %v4_afd4 to i8*
  store i8 %v5_afb4, i8* %v5_afd4, align 1
  %v0_afd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd8 = trunc i32 %v0_afd8 to i8
  %v2_afd8 = load i32, i32* @r5, align 4
  %v3_afd8 = add i32 %v2_afd8, 7
  %v4_afd8 = inttoptr i32 %v3_afd8 to i8*
  store i8 %v1_afd8, i8* %v4_afd8, align 1
  %v0_afdc = load i32, i32* %r2.global-to-local, align 4
  %v1_afdc = load i32, i32* %lr.global-to-local, align 4
  %v2_afdc = add i32 %v1_afdc, 4
  %v3_afdc = inttoptr i32 %v2_afdc to i32*
  store i32 %v0_afdc, i32* %v3_afdc, align 4
  %v0_afe0 = load i32, i32* @r4, align 4
  %v1_afe0 = add i32 %v0_afe0, 20
  %v2_afe0 = inttoptr i32 %v1_afe0 to i32*
  %v3_afe0 = load i32, i32* %v2_afe0, align 4
  %v3_afe4 = udiv i32 %v3_afe0, 65536
  store i32 %v3_afe4, i32* %r3.global-to-local, align 4
  %v3_afe812 = udiv i32 %v3_afe0, 16777216
  %v1_afec = trunc i32 %v3_afe812 to i8
  %v2_afec = load i32, i32* %lr.global-to-local, align 4
  %v3_afec = add i32 %v2_afec, 3
  %v4_afec = inttoptr i32 %v3_afec to i8*
  store i8 %v1_afec, i8* %v4_afec, align 1
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = trunc i32 %v0_aff0 to i8
  %v2_aff0 = load i32, i32* %lr.global-to-local, align 4
  %v3_aff0 = add i32 %v2_aff0, 2
  %v4_aff0 = inttoptr i32 %v3_aff0 to i8*
  store i8 %v1_aff0, i8* %v4_aff0, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_affc = load i32, i32* @r4, align 4
  store i32 %v0_affc, i32* %r1.global-to-local, align 4
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v0_b004 = load i32, i32* @sl, align 4
  store i32 %v0_b004, i32* %r2.global-to-local, align 4
  %v0_b008 = load i32, i32* %lr.global-to-local, align 4
  %v6_b010 = inttoptr i32 %v0_affc to i32*
  %v7_b010 = call i32 @function_11980(i32 %v3_ac08, i32* %v6_b010, i32 %v0_b004, i32 16384, i32 %v0_b008, i32 16)
  %v3_b014 = load i32, i32* %stack_var_-40, align 4
  %v1_b018 = add i32 %v3_b014, 1
  store i32 %v1_b018, i32* %r0.global-to-local, align 4
  store i32 %v1_a994, i32* %r3.global-to-local, align 4
  %v9_b020 = icmp eq i32 %v1_a994, %v1_b018
  store i1 %v9_b020, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b018, i32* %stack_var_-40, align 4
  %v8_b028 = icmp sgt i32 %v1_a994, %v1_b018
  br i1 %v8_b028, label %dec_label_pc_af68.dec_label_pc_af28_crit_edge, label %dec_label_pc_b02c

dec_label_pc_af68.dec_label_pc_af28_crit_edge:    ; preds = %dec_label_pc_af68
  %v1_af34.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af28

dec_label_pc_b02c:                                ; preds = %dec_label_pc_af68
  store i32 %v1_a994, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af08

dec_label_pc_b03c:                                ; preds = %dec_label_pc_af28
  %v0_b03c = call i32 @function_e580()
  %v1_b03c = trunc i32 %v0_b03c to i8
  store i32 %v0_b03c, i32* %r0.global-to-local, align 4
  store i32 %v3_ac6c, i32* %ip.global-to-local, align 4
  %v4_b044 = sdiv i32 %v0_b03c, 256
  store i32 %v4_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = load i32, i32* @r6, align 4
  %v9_b048 = icmp eq i32 %v3_ac6c, %v1_b048
  store i1 %v9_b048, i1* %cpsr_z.global-to-local, align 1
  %v1_b04c = trunc i32 %v4_b044 to i8
  %v2_b04c = load i32, i32* @r4, align 4
  %v3_b04c = add i32 %v2_b04c, 5
  %v4_b04c = inttoptr i32 %v3_b04c to i8*
  store i8 %v1_b04c, i8* %v4_b04c, align 1
  %v3_b050 = load i32, i32* @r4, align 4
  %v4_b050 = add i32 %v3_b050, 4
  %v5_b050 = inttoptr i32 %v4_b050 to i8*
  store i8 %v1_b03c, i8* %v5_b050, align 1
  %v0_b054 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b054, label %dec_label_pc_b058, label %dec_label_pc_b03c.dec_label_pc_af50_crit_edge

dec_label_pc_b03c.dec_label_pc_af50_crit_edge:    ; preds = %dec_label_pc_b03c
  %v1_af54.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af50

dec_label_pc_b058:                                ; preds = %dec_label_pc_b03c, %dec_label_pc_af44
  %v0_b058 = call i32 @function_e580()
  %v1_b058 = trunc i32 %v0_b058 to i8
  store i32 %v0_b058, i32* %r0.global-to-local, align 4
  store i32 %v3_ac70, i32* %lr.global-to-local, align 4
  %v4_b060 = sdiv i32 %v0_b058, 256
  store i32 %v4_b060, i32* %r3.global-to-local, align 4
  %v1_b064 = load i32, i32* @r6, align 4
  %v9_b064 = icmp eq i32 %v3_ac70, %v1_b064
  store i1 %v9_b064, i1* %cpsr_z.global-to-local, align 1
  %v3_b068 = load i32, i32* @r4, align 4
  %v4_b068 = add i32 %v3_b068, 20
  %v5_b068 = inttoptr i32 %v4_b068 to i8*
  store i8 %v1_b058, i8* %v5_b068, align 1
  %v0_b06c = load i32, i32* %r3.global-to-local, align 4
  %v1_b06c = trunc i32 %v0_b06c to i8
  %v2_b06c = load i32, i32* @r5, align 4
  %v3_b06c = add i32 %v2_b06c, 1
  %v4_b06c = inttoptr i32 %v3_b06c to i8*
  store i8 %v1_b06c, i8* %v4_b06c, align 1
  %v0_b070 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b070, label %dec_label_pc_b074, label %dec_label_pc_b058.dec_label_pc_af5c_crit_edge

dec_label_pc_b058.dec_label_pc_af5c_crit_edge:    ; preds = %dec_label_pc_b058
  %v1_af60.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af5c

dec_label_pc_b074:                                ; preds = %dec_label_pc_b058, %dec_label_pc_af50
  %v0_b074 = call i32 @function_e580()
  %v1_b074 = trunc i32 %v0_b074 to i8
  %v4_b078 = sdiv i32 %v0_b074, 256
  store i32 %v4_b078, i32* %r3.global-to-local, align 4
  %v3_b07c = load i32, i32* @r5, align 4
  %v4_b07c = add i32 %v3_b07c, 2
  %v5_b07c = inttoptr i32 %v4_b07c to i8*
  store i8 %v1_b074, i8* %v5_b07c, align 1
  store i32 %v3_ac74, i32* %r0.global-to-local, align 4
  %v1_b084 = load i32, i32* @r6, align 4
  %v9_b084 = icmp eq i32 %v3_ac74, %v1_b084
  store i1 %v9_b084, i1* %cpsr_z.global-to-local, align 1
  %v0_b088 = load i32, i32* %r3.global-to-local, align 4
  %v1_b088 = trunc i32 %v0_b088 to i8
  %v2_b088 = load i32, i32* @r5, align 4
  %v3_b088 = add i32 %v2_b088, 3
  %v4_b088 = inttoptr i32 %v3_b088 to i8*
  store i8 %v1_b088, i8* %v4_b088, align 1
  %v0_b08c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b08c, label %dec_label_pc_b090, label %dec_label_pc_af68

dec_label_pc_b090:                                ; preds = %dec_label_pc_b074, %dec_label_pc_af5c
  %v0_b090 = call i32 @function_e580()
  %v1_b090 = trunc i32 %v0_b090 to i8
  store i32 %v0_b090, i32* %r0.global-to-local, align 4
  %v4_b094 = sdiv i32 %v0_b090, 256
  store i32 %v4_b094, i32* %r3.global-to-local, align 4
  %v3_b098 = load i32, i32* @r4, align 4
  %v4_b098 = add i32 %v3_b098, 28
  %v5_b098 = inttoptr i32 %v4_b098 to i8*
  store i8 %v1_b090, i8* %v5_b098, align 1
  %v0_b09c = load i32, i32* %r3.global-to-local, align 4
  %v1_b09c = trunc i32 %v0_b09c to i8
  %v2_b09c = load i32, i32* @r8, align 4
  %v3_b09c = add i32 %v2_b09c, 1
  %v4_b09c = inttoptr i32 %v3_b09c to i8*
  store i8 %v1_b09c, i8* %v4_b09c, align 1
  br label %dec_label_pc_af68

dec_label_pc_b0a4:                                ; preds = %dec_label_pc_ab70, %dec_label_pc_ab3c, %dec_label_pc_aae0, %dec_label_pc_a988
  %v0_b0a4 = call i32 @function_e580()
  %v1_b0a8 = urem i32 %v0_b0a4, 4
  store i32 %v1_b0a8, i32* %r0.global-to-local, align 4
  %v2_b0ac = icmp eq i32 %v1_b0a8, 3
  store i1 %v2_b0ac, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_b0a4 to i2
  switch i2 %trunc, label %dec_label_pc_abe420 [
    i2 0, label %dec_label_pc_b0ec
    i2 1, label %dec_label_pc_b100
    i2 -2, label %dec_label_pc_b10c
    i2 -1, label %dec_label_pc_b11c
  ]

dec_label_pc_b0c8:                                ; preds = %dec_label_pc_ac44
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v4_b0cc = sext i8 %v5_ac60 to i32
  store i32 %v4_b0cc, i32* %r1.global-to-local, align 4
  %v2_b0d0 = add i32 %v4_b0cc, %v2_abf4
  store i32 %v2_b0d0, i32* @fp, align 4
  br label %dec_label_pc_aefc

dec_label_pc_b0d8:                                ; preds = %dec_label_pc_ac18
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v1_b0dc = call i32 @function_11120(i32 %v3_ac08)
  store i32 %v1_b0dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b0e0

dec_label_pc_b0e0:                                ; preds = %dec_label_pc_abf0, %dec_label_pc_abe4, %dec_label_pc_b0d8
  %v29_b0e8 = phi i32 [ %v3_ac08, %dec_label_pc_abf0 ], [ %v29_b0e874, %dec_label_pc_abe4 ], [ %v1_b0dc, %dec_label_pc_b0d8 ]
  store i32 %v3_a988, i32* %r4.global-to-local, align 4
  store i32 %v15_a988, i32* %r8.global-to-local, align 4
  store i32 %v18_a988, i32* %sb.global-to-local, align 4
  store i32 %v21_a988, i32* %sl.global-to-local, align 4
  store i32 %v24_a988, i32* %fp.global-to-local, align 4
  ret i32 %v29_b0e8

dec_label_pc_b0ec:                                ; preds = %dec_label_pc_b0a4
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b100:                                ; preds = %dec_label_pc_b0a4
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b0a4
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b11c:                                ; preds = %dec_label_pc_b0a4
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_abe4

; uselistorder directives
  uselistorder i32 %v4_b0cc, { 0, 2, 1 }
  uselistorder i32 %v1_b0a8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_b0a4, { 1, 0 }
  uselistorder i32 %v0_b090, { 0, 2, 1 }
  uselistorder i32 %v0_b058, { 0, 2, 1 }
  uselistorder i32 %v4_b044, { 1, 0 }
  uselistorder i32 %v0_b03c, { 0, 2, 1 }
  uselistorder i32 %v1_b018, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_afb4, { 0, 2, 1 }
  uselistorder i32 %v0_af9c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_af88, { 1, 0 }
  uselistorder i32 %v2_af84, { 0, 2, 1 }
  uselistorder i32 %v7_af30, { 1, 0, 2 }
  uselistorder i32 %v4_af6c.pre-phi, { 1, 0 }
  uselistorder i32 %v2_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea486, { 1, 0, 2 }
  uselistorder i32 %v1_ae98, { 2, 1, 0 }
  uselistorder i32 %v0_ae98, { 1, 2, 0 }
  uselistorder i32 %v0_ae9832, { 1, 0 }
  uselistorder i32 %v1_ae9833, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_ae6c, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_ade8, { 1, 0 }
  uselistorder i32 %v3_ad24, { 1, 0, 2 }
  uselistorder i32 %v1_acec, { 1, 0 }
  uselistorder i32 %v1_ace0, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_acb0, { 1, 0 }
  uselistorder i32 %v3_aca8, { 1, 0 }
  uselistorder i32 %v4_aca0, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_ac60, { 1, 0 }
  uselistorder i32 %v0_ac5c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ac50, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_ac3c, { 1, 0 }
  uselistorder i1 %v7_ac0c, { 1, 0 }
  uselistorder i32 %v3_ac08, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_abf4, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_abdc, { 1, 0, 2 }
  uselistorder i1 %v7_abac, { 1, 0 }
  uselistorder i32 %v1_aba8, { 1, 0, 2 }
  uselistorder i1 %v8_aba0, { 1, 0 }
  uselistorder i1 %v7_ab9c, { 1, 0 }
  uselistorder i32 %v1_ab90, { 1, 0 }
  uselistorder i8 %v2_ab84, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ab88, { 1, 0 }
  uselistorder i32 %v0_aba8, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ab74, { 0, 2, 1 }
  uselistorder i32 %v1_ab8c, { 0, 2, 1 }
  uselistorder i32 %v2_ab5c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_ab54, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ab3c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_ab34, { 1, 0 }
  uselistorder i32 %v0_ab34, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_aad8, { 1, 0, 3, 2 }
  uselistorder i32 %v5_aaa8, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_aa2c, { 1, 0 }
  uselistorder i32 %v7_a9e8, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_a9e4, { 1, 0 }
  uselistorder i32 %v6_a9c4, { 1, 0 }
  uselistorder i32 %v2_a9ac, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a994, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 3, 4, 5, 8, 7, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 2, 19, 20, 1, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 35, 36, 37, 39, 41, 40, 42, 43, 44, 46, 45, 48, 47, 49, 50, 52, 51, 53, 55, 54, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder label %dec_label_pc_b0e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af08, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aefc, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_abb8, { 1, 0 }
  uselistorder label %dec_label_pc_abac, { 1, 0 }
  uselistorder label %dec_label_pc_ab70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab68, { 1, 0 }
}

define i32 @function_b138(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b138:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b13c = urem i32 %arg1, 256
  store i32 %v1_b13c, i32* @fp, align 4
  store i32 %v1_b13c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b154 = urem i32 %arg3, 256
  store i32 %v1_b154, i32* @r4, align 4
  %v2_b158 = call i32 @function_11cd0(i32 %v1_b13c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b164 = load i32, i32* @fp, align 4
  store i32 %v0_b164, i32* %r0.global-to-local, align 4
  %v2_b168 = call i32 @function_11cd0(i32 %v0_b164, i32 4)
  %v0_b16c = load i32, i32* @r5, align 4
  store i32 %v0_b16c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  store i32 %v0_b17c, i32* %r0.global-to-local, align 4
  %v5_b180 = inttoptr i32 %v0_b16c to i32*
  %v6_b180 = call i32 @function_85e0(i32 %v0_b17c, i32* %v5_b180, i32 2, i32 0)
  %v1_b18c = urem i32 %v6_b180, 256
  store i32 %v1_b18c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b198 = load i32, i32* @r5, align 4
  store i32 %v0_b198, i32* %r1.global-to-local, align 4
  %v0_b19c = load i32, i32* @r4, align 4
  store i32 %v0_b19c, i32* %r0.global-to-local, align 4
  %v6_b1a4 = inttoptr i32 %v0_b198 to i32*
  %v7_b1a4 = call i32 @function_85e0(i32 %v0_b19c, i32* %v6_b1a4, i32 3, i32 65535)
  %v0_b1a8 = load i32, i32* @r5, align 4
  store i32 %v0_b1a8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b1a4, i32* @r6, align 4
  %v0_b1b8 = load i32, i32* @r4, align 4
  store i32 %v0_b1b8, i32* %r0.global-to-local, align 4
  %v4_b1bc = inttoptr i32 %v0_b1a8 to i32*
  %v5_b1bc = call i32 @function_85e0(i32 %v0_b1b8, i32* %v4_b1bc, i32 4, i32 64)
  %v1_b1c4 = urem i32 %v5_b1bc, 256
  store i32 %v1_b1c4, i32* %ip.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r5, align 4
  store i32 %v0_b1c8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r4, align 4
  store i32 %v0_b1d4, i32* %r0.global-to-local, align 4
  %v6_b1dc = inttoptr i32 %v0_b1c8 to i32*
  %v7_b1dc = call i32 @function_85e0(i32 %v0_b1d4, i32* %v6_b1dc, i32 5, i32 1)
  %v1_b1e8 = urem i32 %v7_b1dc, 256
  store i32 %v1_b1e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1f0 = load i32, i32* @r5, align 4
  store i32 %v0_b1f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r4, align 4
  store i32 %v0_b1f8, i32* %r0.global-to-local, align 4
  %v5_b200 = inttoptr i32 %v0_b1f0 to i32*
  %v6_b200 = call i32 @function_85e0(i32 %v0_b1f8, i32* %v5_b200, i32 7, i32 65535)
  %v0_b204 = load i32, i32* @r5, align 4
  store i32 %v0_b204, i32* %r1.global-to-local, align 4
  %v3_b208 = mul i32 %v6_b200, 65536
  store i32 %v3_b208, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b214 = load i32, i32* @r4, align 4
  store i32 %v0_b214, i32* %r0.global-to-local, align 4
  %v4_b218 = inttoptr i32 %v0_b204 to i32*
  %v5_b218 = call i32 @function_85e0(i32 %v0_b214, i32* %v4_b218, i32 11, i32 1)
  %v1_b220 = urem i32 %v5_b218, 256
  store i32 %v1_b220, i32* %ip.global-to-local, align 4
  %v0_b224 = load i32, i32* @r5, align 4
  store i32 %v0_b224, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* %r0.global-to-local, align 4
  %v5_b238 = inttoptr i32 %v0_b224 to i32*
  %v6_b238 = call i32 @function_85e0(i32 %v0_b230, i32* %v5_b238, i32 12, i32 1)
  %v1_b240 = urem i32 %v6_b238, 256
  store i32 %v1_b240, i32* %ip.global-to-local, align 4
  %v0_b244 = load i32, i32* @r5, align 4
  store i32 %v0_b244, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b250 = load i32, i32* @r4, align 4
  store i32 %v0_b250, i32* %r0.global-to-local, align 4
  %v5_b258 = inttoptr i32 %v0_b244 to i32*
  %v6_b258 = call i32 @function_85e0(i32 %v0_b250, i32* %v5_b258, i32 13, i32 1)
  %v1_b260 = urem i32 %v6_b258, 256
  store i32 %v1_b260, i32* %ip.global-to-local, align 4
  %v0_b264 = load i32, i32* @r5, align 4
  store i32 %v0_b264, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b270 = load i32, i32* @r4, align 4
  store i32 %v0_b270, i32* %r0.global-to-local, align 4
  %v5_b278 = inttoptr i32 %v0_b264 to i32*
  %v6_b278 = call i32 @function_85e0(i32 %v0_b270, i32* %v5_b278, i32 14, i32 1)
  %v1_b280 = urem i32 %v6_b278, 256
  store i32 %v1_b280, i32* %ip.global-to-local, align 4
  %v0_b284 = load i32, i32* @r5, align 4
  store i32 %v0_b284, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b290 = load i32, i32* @r4, align 4
  store i32 %v0_b290, i32* %r0.global-to-local, align 4
  %v5_b298 = inttoptr i32 %v0_b284 to i32*
  %v6_b298 = call i32 @function_85e0(i32 %v0_b290, i32* %v5_b298, i32 15, i32 1)
  %v1_b2a0 = urem i32 %v6_b298, 256
  store i32 %v1_b2a0, i32* %ip.global-to-local, align 4
  %v0_b2a4 = load i32, i32* @r5, align 4
  store i32 %v0_b2a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b2b0 = load i32, i32* @r4, align 4
  store i32 %v0_b2b0, i32* %r0.global-to-local, align 4
  %v5_b2b8 = inttoptr i32 %v0_b2a4 to i32*
  %v6_b2b8 = call i32 @function_85e0(i32 %v0_b2b0, i32* %v5_b2b8, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b2b8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @r5, align 4
  store i32 %v0_b2c8, i32* %r1.global-to-local, align 4
  %v0_b2cc = load i32, i32* @r4, align 4
  store i32 %v0_b2cc, i32* %r0.global-to-local, align 4
  %v1_b2d0 = urem i32 %v6_b2b8, 256
  store i32 %v1_b2d0, i32* @r8, align 4
  %v4_b2d4 = inttoptr i32 %v0_b2c8 to i32*
  %v5_b2d4 = call i32 @function_85e0(i32 %v0_b2cc, i32* %v4_b2d4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b2e0 = load i32, i32* @r5, align 4
  store i32 %v0_b2e0, i32* %r1.global-to-local, align 4
  store i32 %v5_b2d4, i32* @sb, align 4
  %v0_b2e8 = load i32, i32* @r4, align 4
  store i32 %v0_b2e8, i32* %r0.global-to-local, align 4
  %v4_b2ec = inttoptr i32 %v0_b2e0 to i32*
  %v5_b2ec = call i32 @function_85e0(i32 %v0_b2e8, i32* %v4_b2ec, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b2f8 = urem i32 %v5_b2ec, 256
  store i32 %v1_b2f8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b308 = call i32 @function_119e4(i32 2, i32 3, i32 6)
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v0_b30c = load i32, i32* @r7, align 4
  %v3_b30c = udiv i32 %v0_b30c, 65536
  store i32 %v3_b30c, i32* %r1.global-to-local, align 4
  %v7_b310 = icmp eq i32 %v3_b308, -1
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b310, label %dec_label_pc_b56c, label %dec_label_pc_b320

dec_label_pc_b320:                                ; preds = %dec_label_pc_b138
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b328 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b328, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b33c = call i32 @function_119b4(i32 %v3_b308, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b33c, i32* %r0.global-to-local, align 4
  %v7_b340 = icmp eq i32 %v6_b33c, -1
  store i1 %v7_b340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b340, label %dec_label_pc_b564, label %dec_label_pc_b348

dec_label_pc_b348:                                ; preds = %dec_label_pc_b320
  %v0_b348 = load i32, i32* @fp, align 4
  %v2_b348 = icmp eq i32 %v0_b348, 0
  store i1 %v2_b348, i1* %cpsr_z.global-to-local, align 1
  %v0_b34c = load i32, i32* @r6, align 4
  %v3_b34c = mul i32 %v0_b34c, 65536
  store i32 %v3_b34c, i32* %r0.global-to-local, align 4
  %v3_b350 = urem i32 %v0_b34c, 65536
  store i32 %v3_b350, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b348, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b374.preheader

.thread18:                                        ; preds = %dec_label_pc_b348
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_b7f8

dec_label_pc_b374.preheader:                      ; preds = %dec_label_pc_b348
  %v5_b358 = load i32, i32* @r7, align 4
  %v8_b358 = udiv i32 %v5_b358, 16777216
  %tmp73 = udiv i32 %v0_b34c, 256
  %v8_b35c = urem i32 %tmp73, 256
  store i32 %v8_b35c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b460 = icmp ugt i32 %v0_b30c, -65537
  %v2_b484 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b490 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_b4c0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b4c4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b4c8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_b514 = zext i8 %tmp31 to i32
  %v4_b518 = zext i8 %tmp30 to i32
  %v4_b524 = mul nuw nsw i32 %v4_b518, 256
  %v4_b534 = zext i8 %tmp to i32
  %v1_b538 = and i32 %v4_b534, 18
  %v2_b53c = icmp eq i32 %v1_b538, 18
  %v1_b470 = mul nuw nsw i32 %v3_b30c, 256
  %v4_b474 = and i32 %v1_b470, 65280
  %v5_b474 = or i32 %v8_b358, %v4_b474
  %v3_b47893 = udiv i32 %v4_b474, 256
  %v1_b47c = trunc i32 %v3_b47893 to i8
  %v1_b640 = mul i32 %v0_b34c, 256
  %v4_b648 = and i32 %v1_b640, 65280
  %sext = mul i32 %v6_b180, 16777216
  %v4_b658 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b1bc, 16777216
  %v4_b67c = sdiv i32 %sext5, 16777216
  %v5_b524 = or i32 %v4_b514, %v4_b524
  %v1_b544 = and i32 %v4_b534, 5
  %v2_b544 = icmp eq i32 %v1_b544, 0
  %v1_b480 = trunc i32 %v8_b358 to i8
  %v5_b648 = or i32 %v8_b35c, %v4_b648
  %v1_b668 = trunc i32 %v4_b658 to i8
  %v1_b748 = urem i32 %v5_b218, 2
  %tmp94 = sub nsw i32 0, %v1_b748
  %v4_b750 = and i32 %tmp94, 32
  %v1_b760 = urem i32 %v6_b238, 2
  %tmp95 = sub nsw i32 0, %v1_b760
  %v4_b768 = and i32 %tmp95, 16
  %v1_b778 = urem i32 %v6_b258, 2
  %tmp96 = sub nsw i32 0, %v1_b778
  %v4_b780 = and i32 %tmp96, 8
  %v1_b790 = urem i32 %v6_b278, 2
  %tmp97 = sub nsw i32 0, %v1_b790
  %v4_b798 = and i32 %tmp97, 4
  %v1_b7a8 = urem i32 %v6_b298, 2
  %tmp98 = sub nsw i32 0, %v1_b7a8
  %v3_b7b0 = and i32 %tmp98, 2
  br label %dec_label_pc_b374

dec_label_pc_b374:                                ; preds = %dec_label_pc_b7e4, %dec_label_pc_b54c, %dec_label_pc_b374.preheader
  store i32 %v8_b35c, i32* %r3.global-to-local, align 4
  %v0_b380 = load i32, i32* @sb, align 4
  %v1_b380 = add i32 %v0_b380, 40
  store i32 %v1_b380, i32* @sl, align 4
  br label %dec_label_pc_b384

dec_label_pc_b384:                                ; preds = %dec_label_pc_b558, %dec_label_pc_b374
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b390 = call i32 @function_119e4(i32 2, i32 1, i32 0)
  store i32 %v3_b390, i32* %r0.global-to-local, align 4
  %v7_b394 = icmp eq i32 %v3_b390, -1
  store i1 %v7_b394, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b390, i32* @r7, align 4
  br i1 %v7_b394, label %dec_label_pc_b7e4, label %dec_label_pc_b3a0

dec_label_pc_b3a0:                                ; preds = %dec_label_pc_b384
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b3a8 = call i32 @function_1105c(i32 %v3_b390, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b3b0 = or i32 %v2_b3a8, 2048
  store i32 %v1_b3b0, i32* @r2, align 4
  %v0_b3b4 = load i32, i32* @r7, align 4
  store i32 %v0_b3b4, i32* %r0.global-to-local, align 4
  %v2_b3b8 = call i32 @function_1105c(i32 %v0_b3b4, i32 4)
  store i32 %v2_b3b8, i32* %r0.global-to-local, align 4
  %v3_b3bc = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b3cc = mul i32 %v3_b3bc, 24
  store i32 %v5_b3cc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b3dc = add i32 %v5_b3cc, %arg2
  store i32 %v2_b3dc, i32* %r2.global-to-local, align 4
  %v1_b3e0 = add i32 %v2_b3dc, 20
  %v2_b3e0 = inttoptr i32 %v1_b3e0 to i8*
  %v3_b3e0 = load i8, i8* %v2_b3e0, align 1
  %v4_b3e0 = zext i8 %v3_b3e0 to i32
  store i32 %v4_b3e0, i32* %r3.global-to-local, align 4
  %v2_b3e4 = icmp ugt i8 %v3_b3e0, 30
  %v7_b3e4 = icmp eq i8 %v3_b3e0, 31
  store i1 %v7_b3e4, i1* %cpsr_z.global-to-local, align 1
  %v2_b3e8 = xor i1 %v7_b3e4, true
  %v3_b3e8 = and i1 %v2_b3e4, %v2_b3e8
  %v5_b3e8 = add i32 %v2_b3dc, 16
  %v6_b3e8 = inttoptr i32 %v5_b3e8 to i32*
  %v7_b3e8 = load i32, i32* %v6_b3e8, align 4
  br i1 %v3_b3e8, label %dec_label_pc_b454, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3a0
  store i32 %v7_b3e8, i32* @r4, align 4
  %v0_b3f8 = call i32 @function_e580()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v3_b3fc = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b408 = mul i32 %v3_b3fc, 24
  %v0_b40c = load i32, i32* @r4, align 4
  %v2_b410 = add i32 %v5_b408, %arg2
  store i32 %v2_b410, i32* %r1.global-to-local, align 4
  %v1_b414 = and i32 %v0_b40c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b414, i32* %r3.global-to-local, align 4
  %v1_b40c = udiv i32 %v0_b40c, 256
  %v3_b418 = and i32 %v1_b40c, 65280
  store i32 %v3_b418, i32* %r2.global-to-local, align 4
  %v3_b41c = mul i32 %v0_b40c, 16777216
  store i32 %v3_b41c, i32* %ip.global-to-local, align 4
  %v1_b420 = add i32 %v2_b410, 20
  %v2_b420 = inttoptr i32 %v1_b420 to i8*
  %v3_b420 = load i8, i8* %v2_b420, align 1
  %v4_b420 = zext i8 %v3_b420 to i32
  store i32 %v4_b420, i32* %lr.global-to-local, align 4
  %v4_b424 = mul i32 %v1_b414, 256
  %v5_b424 = or i32 %v4_b424, %v3_b41c
  store i32 %v5_b424, i32* %ip.global-to-local, align 4
  %v4_b428 = udiv i32 %v0_b40c, 16777216
  %v5_b428 = or i32 %v3_b418, %v4_b428
  %v2_b42c = or i32 %v5_b428, %v5_b424
  %v7_b430 = lshr i32 %v0_b3f8, %v4_b420
  %v8_b430 = add i32 %v7_b430, %v2_b42c
  store i32 %v8_b430, i32* %r2.global-to-local, align 4
  %v3_b43c = mul i32 %v8_b430, 16777216
  %v1_b440 = and i32 %v8_b430, 65280
  store i32 %v1_b440, i32* %r0.global-to-local, align 4
  %v4_b444 = mul nuw nsw i32 %v1_b440, 256
  %v5_b444 = or i32 %v4_b444, %v3_b43c
  store i32 %v5_b444, i32* %r1.global-to-local, align 4
  %v2_b44c = call i32 @llvm.bswap.i32(i32 %v8_b430)
  br label %dec_label_pc_b454

dec_label_pc_b454:                                ; preds = %dec_label_pc_b3a0, %dec_label_pc_b3f4
  %storemerge25 = phi i32 [ %v2_b44c, %dec_label_pc_b3f4 ], [ %v7_b3e8, %dec_label_pc_b3a0 ]
  store i32 %v3_b30c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b460, label %dec_label_pc_b574, label %dec_label_pc_b468

dec_label_pc_b468:                                ; preds = %dec_label_pc_b454
  store i32 %v8_b358, i32* %ip.global-to-local, align 4
  store i32 %v5_b474, i32* %r3.global-to-local, align 4
  store i32 %v3_b47893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b484

dec_label_pc_b484:                                ; preds = %dec_label_pc_b574, %dec_label_pc_b468
  %stack_var_-57.0 = phi i8 [ %v1_b57c, %dec_label_pc_b574 ], [ %v1_b47c, %dec_label_pc_b468 ]
  %storemerge = phi i8 [ %v1_b574, %dec_label_pc_b574 ], [ %v1_b480, %dec_label_pc_b468 ]
  store i32 %v2_b484, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b48c = load i32, i32* @r7, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v4_b490 = call i32 @function_1186c(i32 %v0_b48c, %sockaddr* nonnull %v3_b490, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b498 = call i32 @function_113f0(i32* null)
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  store i32 %v2_b498, i32* @r4, align 4
  %v9_b4f8 = icmp eq i32 %tmp32, %storemerge25
  %v4_b51c = zext i8 %storemerge to i32
  %v4_b520 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b4f8 to i32
  %v9_b50c = icmp eq i1 %v9_b4f8, false
  %v4_b528 = mul nuw nsw i32 %v4_b520, 256
  %v5_b528 = or i32 %v4_b528, %v4_b51c
  %v9_b52c = icmp eq i32 %v5_b528, %v5_b524
  br label %dec_label_pc_b4b4

dec_label_pc_b4a4:                                ; preds = %.thread23, %dec_label_pc_b514, %dec_label_pc_b544, %bb75
  %v2_b4a4 = call i32 @function_113f0(i32* null)
  %v0_b4a8 = load i32, i32* @r4, align 4
  %v2_b4a8 = sub i32 %v2_b4a4, %v0_b4a8
  store i32 %v2_b4a8, i32* %r0.global-to-local, align 4
  %v7_b4ac = icmp eq i32 %v2_b4a8, 10
  store i1 %v7_b4ac, i1* %cpsr_z.global-to-local, align 1
  %v8_b4b0 = icmp sgt i32 %v2_b4a8, 10
  br i1 %v8_b4b0, label %dec_label_pc_b558, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b4a4, %dec_label_pc_b484
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_b4c0, i32* %lr.global-to-local, align 4
  store i32 %v2_b4c4, i32* %ip.global-to-local, align 4
  store i32 %v2_b4c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v7_b4dc = call i32 @function_11920(i32 %v3_b308, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b4c0, i32 %v2_b4c4)
  store i32 %v7_b4dc, i32* %r2.global-to-local, align 4
  %v7_b4e4 = icmp eq i32 %v7_b4dc, -1
  store i1 %v7_b4e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b4e4, label %dec_label_pc_b56c, label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b4b4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_b504 = icmp eq i32 %v7_b4dc, 40
  store i1 %v7_b504, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_b4dc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_b4f0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b4a4

bb75:                                             ; preds = %dec_label_pc_b4f0
  store i1 %v9_b50c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b50c, label %dec_label_pc_b4a4, label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %bb75
  store i32 %v4_b518, i32* %r1.global-to-local, align 4
  store i32 %v4_b51c, i32* %ip.global-to-local, align 4
  store i32 %v4_b520, i32* %r2.global-to-local, align 4
  store i32 %v5_b524, i32* %r3.global-to-local, align 4
  store i32 %v5_b528, i32* @r5, align 4
  store i1 %v9_b52c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b52c, label %dec_label_pc_b534, label %dec_label_pc_b4a4

dec_label_pc_b534:                                ; preds = %dec_label_pc_b514
  store i32 %v4_b534, i32* %r2.global-to-local, align 4
  store i32 %v1_b538, i32* %r3.global-to-local, align 4
  store i1 %v2_b53c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b53c, label %dec_label_pc_b588, label %dec_label_pc_b544

dec_label_pc_b544:                                ; preds = %dec_label_pc_b534
  store i1 %v2_b544, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b544, label %dec_label_pc_b4a4, label %dec_label_pc_b54c

dec_label_pc_b54c:                                ; preds = %dec_label_pc_b544
  %v0_b54c = load i32, i32* @r7, align 4
  store i32 %v0_b54c, i32* %r0.global-to-local, align 4
  %v1_b550 = call i32 @function_11120(i32 %v0_b54c)
  store i32 %v1_b550, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b374

dec_label_pc_b558:                                ; preds = %dec_label_pc_b4a4
  %v0_b558 = load i32, i32* @r7, align 4
  store i32 %v0_b558, i32* %r0.global-to-local, align 4
  %v1_b55c = call i32 @function_11120(i32 %v0_b558)
  store i32 %v1_b55c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b384

dec_label_pc_b564:                                ; preds = %dec_label_pc_b320
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v1_b568 = call i32 @function_11120(i32 %v3_b308)
  store i32 %v1_b568, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b56c

dec_label_pc_b56c:                                ; preds = %dec_label_pc_b4b4, %dec_label_pc_b138, %dec_label_pc_b564
  %v29_b570 = phi i32 [ %v3_b308, %dec_label_pc_b138 ], [ %v1_b568, %dec_label_pc_b564 ], [ 0, %dec_label_pc_b4b4 ]
  ret i32 %v29_b570

dec_label_pc_b574:                                ; preds = %dec_label_pc_b454
  %v0_b574 = call i32 @function_e580()
  %v1_b574 = trunc i32 %v0_b574 to i8
  store i32 %v0_b574, i32* %r0.global-to-local, align 4
  %v4_b578 = sdiv i32 %v0_b574, 256
  store i32 %v4_b578, i32* %r3.global-to-local, align 4
  %v1_b57c = trunc i32 %v4_b578 to i8
  br label %dec_label_pc_b484

dec_label_pc_b588:                                ; preds = %dec_label_pc_b534
  %v3_b588 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b588, i32* @r4, align 4
  store i32 %v2_b158, i32* %r2.global-to-local, align 4
  %v3_b590 = mul i32 %v3_b588, 16
  store i32 %v3_b590, i32* %ip.global-to-local, align 4
  %v3_b594 = add i32 %v3_b590, %v2_b158
  %v4_b594 = inttoptr i32 %v3_b594 to i32*
  store i32 %storemerge25, i32* %v4_b594, align 4
  %v0_b598 = load i32, i32* @r6, align 4
  %v1_b598 = add i32 %v0_b598, 4
  %v2_b598 = inttoptr i32 %v1_b598 to i32*
  %v3_b598 = load i32, i32* %v2_b598, align 4
  store i32 %v3_b598, i32* %r0.global-to-local, align 4
  %v1_b5a0 = and i32 %v3_b598, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b5a0, i32* %r1.global-to-local, align 4
  store i32 %v2_b158, i32* %lr.global-to-local, align 4
  %v3_b5a8 = mul i32 %v3_b598, 16777216
  %v1_b59c = udiv i32 %v3_b598, 256
  %v3_b5ac = and i32 %v1_b59c, 65280
  %v4_b5b0 = mul i32 %v1_b5a0, 256
  %v5_b5b0 = or i32 %v4_b5b0, %v3_b5a8
  store i32 %v5_b5b0, i32* %r2.global-to-local, align 4
  %v4_b5b4 = udiv i32 %v3_b598, 16777216
  %v5_b5b4 = or i32 %v3_b5ac, %v4_b5b4
  %v1_b5b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5b8 = add i32 %v1_b5b8, %v2_b158
  store i32 %v2_b5b8, i32* %ip.global-to-local, align 4
  %v2_b5bc = or i32 %v5_b5b4, %v5_b5b0
  store i32 %v2_b5bc, i32* %r3.global-to-local, align 4
  %v2_b5c0 = add i32 %v2_b5b8, 4
  %v3_b5c0 = inttoptr i32 %v2_b5c0 to i32*
  store i32 %v2_b5bc, i32* %v3_b5c0, align 4
  %v0_b5c4 = load i32, i32* @r6, align 4
  %v1_b5c4 = add i32 %v0_b5c4, 8
  %v2_b5c4 = inttoptr i32 %v1_b5c4 to i32*
  %v3_b5c4 = load i32, i32* %v2_b5c4, align 4
  store i32 %v3_b5c4, i32* %r0.global-to-local, align 4
  %v1_b5cc = and i32 %v3_b5c4, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b5cc, i32* %r1.global-to-local, align 4
  %v3_b5d0 = mul i32 %v3_b5c4, 16777216
  %v1_b5c8 = udiv i32 %v3_b5c4, 256
  %v3_b5d4 = and i32 %v1_b5c8, 65280
  %v4_b5d8 = mul i32 %v1_b5cc, 256
  %v5_b5d8 = or i32 %v4_b5d8, %v3_b5d0
  store i32 %v5_b5d8, i32* %r2.global-to-local, align 4
  %v4_b5dc = udiv i32 %v3_b5c4, 16777216
  %v5_b5dc = or i32 %v3_b5d4, %v4_b5dc
  %v2_b5e0 = or i32 %v5_b5dc, %v5_b5d8
  store i32 %v2_b5e0, i32* %r3.global-to-local, align 4
  %v1_b5e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5e4 = add i32 %v1_b5e4, 8
  %v3_b5e4 = inttoptr i32 %v2_b5e4 to i32*
  store i32 %v2_b5e0, i32* %v3_b5e4, align 4
  %v0_b5e8 = load i32, i32* @r6, align 4
  %v1_b5e8 = inttoptr i32 %v0_b5e8 to i32*
  %v2_b5e8 = load i32, i32* %v1_b5e8, align 4
  %v3_b5ec = udiv i32 %v2_b5e8, 65536
  store i32 %v3_b5ec, i32* %r2.global-to-local, align 4
  %v3_b5f03 = udiv i32 %v2_b5e8, 16777216
  store i32 %v3_b5f03, i32* %r1.global-to-local, align 4
  %v0_b5f4 = load i32, i32* @r5, align 4
  %v3_b5f4 = sdiv i32 %v0_b5f4, 256
  store i32 %v3_b5f4, i32* %r3.global-to-local, align 4
  %v1_b5f8 = trunc i32 %v3_b5f4 to i8
  %v2_b5f8 = load i32, i32* %ip.global-to-local, align 4
  %v3_b5f8 = add i32 %v2_b5f8, 15
  %v4_b5f8 = inttoptr i32 %v3_b5f8 to i8*
  store i8 %v1_b5f8, i8* %v4_b5f8, align 1
  %v0_b5fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b5fc = trunc i32 %v0_b5fc to i8
  %v2_b5fc = load i32, i32* %ip.global-to-local, align 4
  %v3_b5fc = add i32 %v2_b5fc, 13
  %v4_b5fc = inttoptr i32 %v3_b5fc to i8*
  store i8 %v1_b5fc, i8* %v4_b5fc, align 1
  %v0_b600 = load i32, i32* %r2.global-to-local, align 4
  %v1_b600 = trunc i32 %v0_b600 to i8
  %v2_b600 = load i32, i32* %ip.global-to-local, align 4
  %v3_b600 = add i32 %v2_b600, 12
  %v4_b600 = inttoptr i32 %v3_b600 to i8*
  store i8 %v1_b600, i8* %v4_b600, align 1
  %v0_b604 = load i32, i32* @r5, align 4
  %v1_b604 = trunc i32 %v0_b604 to i8
  %v2_b604 = load i32, i32* %ip.global-to-local, align 4
  %v3_b604 = add i32 %v2_b604, 14
  %v4_b604 = inttoptr i32 %v3_b604 to i8*
  store i8 %v1_b604, i8* %v4_b604, align 1
  %v0_b608 = load i32, i32* @sl, align 4
  store i32 %v0_b608, i32* %r0.global-to-local, align 4
  %v1_b60c = call i32 @function_11b7c(i32 %v0_b608)
  store i32 %v1_b60c, i32* %r0.global-to-local, align 4
  store i32 %v2_b168, i32* %r1.global-to-local, align 4
  %v3_b614 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b614, i32* %r2.global-to-local, align 4
  %v2_b618 = load i32, i32* @r4, align 4
  %v5_b618 = mul i32 %v2_b618, 4
  %v6_b618 = add i32 %v5_b618, %v2_b168
  %v7_b618 = inttoptr i32 %v6_b618 to i32*
  store i32 %v1_b60c, i32* %v7_b618, align 4
  %v0_b61c = load i32, i32* %r1.global-to-local, align 4
  %v1_b61c = load i32, i32* %r2.global-to-local, align 4
  %v4_b61c = mul i32 %v1_b61c, 4
  %v5_b61c = add i32 %v4_b61c, %v0_b61c
  %v6_b61c = inttoptr i32 %v5_b61c to i32*
  %v7_b61c = load i32, i32* %v6_b61c, align 4
  store i32 %v7_b61c, i32* @r4, align 4
  %v1_b620 = inttoptr i32 %v7_b61c to i8*
  %v2_b620 = load i8, i8* %v1_b620, align 1
  %tmp100 = urem i8 %v2_b620, 16
  %v1_b624 = zext i8 %tmp100 to i32
  %v1_b628 = or i32 %v1_b624, 64
  store i32 %v1_b628, i32* %r3.global-to-local, align 4
  %v1_b62c = trunc i32 %v1_b628 to i8
  store i8 %v1_b62c, i8* %v1_b620, align 1
  %v0_b630 = load i32, i32* @r4, align 4
  %v1_b630 = inttoptr i32 %v0_b630 to i8*
  %v2_b630 = load i8, i8* %v1_b630, align 1
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v1_b63c = and i8 %v2_b630, -16
  %v1_b644 = or i8 %v1_b63c, 5
  store i32 %v5_b648, i32* %r0.global-to-local, align 4
  %v0_b64c = load i32, i32* @sl, align 4
  %v3_b64c = mul i32 %v0_b64c, 65536
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  store i32 %v1_b1e8, i32* %lr.global-to-local, align 4
  store i8 %v1_b644, i8* %v1_b630, align 1
  store i32 %v4_b658, i32* %r1.global-to-local, align 4
  %v0_b65c = load i32, i32* %r2.global-to-local, align 4
  %v3_b65c = udiv i32 %v0_b65c, 65536
  %v1_b660 = urem i32 %v3_b65c, 256
  store i32 %v1_b660, i32* %r3.global-to-local, align 4
  %v3_b664 = udiv i32 %v0_b65c, 16777216
  store i32 %v3_b664, i32* %r2.global-to-local, align 4
  %v2_b668 = load i32, i32* @r4, align 4
  %v3_b668 = add i32 %v2_b668, 1
  %v4_b668 = inttoptr i32 %v3_b668 to i8*
  store i8 %v1_b668, i8* %v4_b668, align 1
  %v0_b66c = load i32, i32* %r2.global-to-local, align 4
  %v1_b66c = load i32, i32* %r3.global-to-local, align 4
  %v4_b66c = mul i32 %v1_b66c, 256
  %v5_b66c = or i32 %v4_b66c, %v0_b66c
  store i32 %v5_b66c, i32* %r2.global-to-local, align 4
  %v1_b670 = trunc i32 %v0_b66c to i8
  %v2_b670 = load i32, i32* @r4, align 4
  %v3_b670 = add i32 %v2_b670, 2
  %v4_b670 = inttoptr i32 %v3_b670 to i8*
  store i8 %v1_b670, i8* %v4_b670, align 1
  %v0_b674 = load i32, i32* %lr.global-to-local, align 4
  %v2_b674 = icmp eq i32 %v0_b674, 0
  store i1 %v2_b674, i1* %cpsr_z.global-to-local, align 1
  %v0_b678 = load i32, i32* %r2.global-to-local, align 4
  %v3_b678 = sdiv i32 %v0_b678, 256
  store i32 %v3_b678, i32* %r3.global-to-local, align 4
  store i32 %v4_b67c, i32* %r2.global-to-local, align 4
  %v1_b680 = trunc i32 %v3_b678 to i8
  %v2_b680 = load i32, i32* @r4, align 4
  %v3_b680 = add i32 %v2_b680, 3
  %v4_b680 = inttoptr i32 %v3_b680 to i8*
  store i8 %v1_b680, i8* %v4_b680, align 1
  %v0_b684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b684, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_b588
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_b588, %bb76
  %v0_b688 = load i32, i32* %r2.global-to-local, align 4
  %v1_b688 = trunc i32 %v0_b688 to i8
  %v2_b688 = load i32, i32* @r4, align 4
  %v3_b688 = add i32 %v2_b688, 8
  %v4_b688 = inttoptr i32 %v3_b688 to i8*
  store i8 %v1_b688, i8* %v4_b688, align 1
  %v0_b68c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b68c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_b68c = load i32, i32* %r3.global-to-local, align 4
  %v2_b68c = trunc i32 %v1_b68c to i8
  %v3_b68c = load i32, i32* @r4, align 4
  %v4_b68c = add i32 %v3_b68c, 6
  %v5_b68c = inttoptr i32 %v4_b68c to i8*
  store i8 %v2_b68c, i8* %v5_b68c, align 1
  %v0_b690.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b690.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_b698 = load i32, i32* @r4, align 4
  %v3_b698 = add i32 %v2_b698, 9
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 6, i8* %v4_b698, align 1
  %v0_b69c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b69c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_b69c = load i32, i32* %r2.global-to-local, align 4
  %v2_b69c = trunc i32 %v1_b69c to i8
  %v3_b69c = load i32, i32* @r4, align 4
  %v4_b69c = add i32 %v3_b69c, 7
  %v5_b69c = inttoptr i32 %v4_b69c to i8*
  store i8 %v2_b69c, i8* %v5_b69c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_b6a4 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_b6a4, i32* %r3.global-to-local, align 4
  %v0_b6a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_b6a8 = sdiv i32 %v0_b6a8, 256
  store i32 %v3_b6a8, i32* %ip.global-to-local, align 4
  %v1_b6ac = load i32, i32* @r4, align 4
  %v2_b6ac = add i32 %v1_b6ac, 12
  %v3_b6ac = inttoptr i32 %v2_b6ac to i32*
  store i32 %v2_b6a4, i32* %v3_b6ac, align 4
  %v0_b6b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6b0 = trunc i32 %v0_b6b0 to i8
  %v2_b6b0 = load i32, i32* @r4, align 4
  %v3_b6b0 = add i32 %v2_b6b0, 5
  %v4_b6b0 = inttoptr i32 %v3_b6b0 to i8*
  store i8 %v1_b6b0, i8* %v4_b6b0, align 1
  %v3_b6b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6b4, i32* %r2.global-to-local, align 4
  store i32 %v2_b158, i32* %ip.global-to-local, align 4
  %v4_b6bc = mul i32 %v3_b6b4, 16
  %v5_b6bc = add i32 %v4_b6bc, %v2_b158
  %v6_b6bc = inttoptr i32 %v5_b6bc to i32*
  %v7_b6bc = load i32, i32* %v6_b6bc, align 4
  store i32 %v7_b6bc, i32* %r3.global-to-local, align 4
  %v0_b6c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  %v2_b6c0 = load i32, i32* @r4, align 4
  %v3_b6c0 = add i32 %v2_b6c0, 4
  %v4_b6c0 = inttoptr i32 %v3_b6c0 to i8*
  store i8 %v1_b6c0, i8* %v4_b6c0, align 1
  %v0_b6c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6c4 = load i32, i32* @r4, align 4
  %v2_b6c4 = add i32 %v1_b6c4, 16
  %v3_b6c4 = inttoptr i32 %v2_b6c4 to i32*
  store i32 %v0_b6c4, i32* %v3_b6c4, align 4
  %v0_b6c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_b6c8 = mul i32 %v0_b6c8, 16
  %v1_b6cc = load i32, i32* %ip.global-to-local, align 4
  %v2_b6cc = add i32 %v1_b6cc, %v3_b6c8
  store i32 %v2_b6cc, i32* %r2.global-to-local, align 4
  %v1_b6d0 = add i32 %v2_b6cc, 13
  %v2_b6d0 = inttoptr i32 %v1_b6d0 to i8*
  %v3_b6d0 = load i8, i8* %v2_b6d0, align 1
  %v4_b6d0 = zext i8 %v3_b6d0 to i32
  store i32 %v4_b6d0, i32* %r1.global-to-local, align 4
  %v1_b6d4 = add i32 %v2_b6cc, 12
  %v2_b6d4 = inttoptr i32 %v1_b6d4 to i8*
  %v3_b6d4 = load i8, i8* %v2_b6d4, align 1
  %v4_b6d4 = zext i8 %v3_b6d4 to i32
  %v4_b6d8 = mul nuw nsw i32 %v4_b6d0, 256
  %v5_b6d8 = or i32 %v4_b6d4, %v4_b6d8
  store i32 %v5_b6d8, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r4, align 4
  %v3_b6dc = add i32 %v2_b6dc, 20
  %v4_b6dc = inttoptr i32 %v3_b6dc to i8*
  store i8 %v3_b6d4, i8* %v4_b6dc, align 1
  %v0_b6e0 = load i32, i32* @r4, align 4
  %v1_b6e0 = add i32 %v0_b6e0, 20
  store i32 %v1_b6e0, i32* @r6, align 4
  %v0_b6e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b6e4 = sdiv i32 %v0_b6e4, 256
  store i32 %v3_b6e4, i32* %r3.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v3_b6e4 to i8
  %v3_b6e8 = add i32 %v0_b6e0, 21
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* @r6, align 4
  %v1_b6ec = add i32 %v0_b6ec, 13
  %v2_b6ec = inttoptr i32 %v1_b6ec to i8*
  %v3_b6ec = load i8, i8* %v2_b6ec, align 1
  %v4_b6ec = zext i8 %v3_b6ec to i32
  store i32 %v4_b6ec, i32* %r3.global-to-local, align 4
  %v0_b6f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6f0 = add i32 %v0_b6f0, 8
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i32*
  %v3_b6f0 = load i32, i32* %v2_b6f0, align 4
  store i32 %v3_b6f0, i32* %r1.global-to-local, align 4
  %v1_b6f4 = or i32 %v4_b6ec, 1
  store i32 %v1_b6f4, i32* %r3.global-to-local, align 4
  %v1_b6f8 = add i32 %v0_b6f0, 15
  %v2_b6f8 = inttoptr i32 %v1_b6f8 to i8*
  %v3_b6f8 = load i8, i8* %v2_b6f8, align 1
  %v4_b6f8 = zext i8 %v3_b6f8 to i32
  store i32 %v4_b6f8, i32* %ip.global-to-local, align 4
  %v1_b6fc = add i32 %v0_b6f0, 14
  %v2_b6fc = inttoptr i32 %v1_b6fc to i8*
  %v3_b6fc = load i8, i8* %v2_b6fc, align 1
  %v4_b6fc = zext i8 %v3_b6fc to i32
  store i32 %v4_b6fc, i32* %r0.global-to-local, align 4
  %v2_b700 = add i32 %v0_b6ec, 4
  %v3_b700 = inttoptr i32 %v2_b700 to i32*
  store i32 %v3_b6f0, i32* %v3_b700, align 4
  %v0_b704 = load i32, i32* %r2.global-to-local, align 4
  %v1_b704 = add i32 %v0_b704, 4
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* %lr.global-to-local, align 4
  %v0_b708 = load i32, i32* %r3.global-to-local, align 4
  %v1_b708 = trunc i32 %v0_b708 to i8
  %v2_b708 = load i32, i32* @r6, align 4
  %v3_b708 = add i32 %v2_b708, 13
  %v4_b708 = inttoptr i32 %v3_b708 to i8*
  store i8 %v1_b708, i8* %v4_b708, align 1
  %v0_b70c = load i32, i32* @r6, align 4
  %v1_b70c = add i32 %v0_b70c, 12
  %v2_b70c = inttoptr i32 %v1_b70c to i8*
  %v3_b70c = load i8, i8* %v2_b70c, align 1
  %v4_b70c = zext i8 %v3_b70c to i32
  store i32 %v4_b70c, i32* %r2.global-to-local, align 4
  %v1_b710 = add i32 %v0_b70c, 13
  %v2_b710 = inttoptr i32 %v1_b710 to i8*
  %v3_b710 = load i8, i8* %v2_b710, align 1
  %v4_b710 = zext i8 %v3_b710 to i32
  %v0_b714 = load i32, i32* %r0.global-to-local, align 4
  %v1_b714 = load i32, i32* %ip.global-to-local, align 4
  %v4_b714 = mul i32 %v1_b714, 256
  %v5_b714 = or i32 %v4_b714, %v0_b714
  store i32 %v5_b714, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_b70c, 16
  %v1_b718 = zext i8 %tmp101 to i32
  %v3_b71c = sdiv i32 %v5_b714, 256
  store i32 %v3_b71c, i32* %r1.global-to-local, align 4
  %v1_b720 = or i32 %v1_b718, 128
  store i32 %v1_b720, i32* %r2.global-to-local, align 4
  %v1_b724 = or i32 %v4_b710, 16
  store i32 %v1_b724, i32* %r3.global-to-local, align 4
  %v1_b728 = trunc i32 %v3_b71c to i8
  %v3_b728 = add i32 %v0_b70c, 3
  %v4_b728 = inttoptr i32 %v3_b728 to i8*
  store i8 %v1_b728, i8* %v4_b728, align 1
  %v0_b72c = load i32, i32* %lr.global-to-local, align 4
  %v1_b72c = load i32, i32* @r6, align 4
  %v2_b72c = add i32 %v1_b72c, 8
  %v3_b72c = inttoptr i32 %v2_b72c to i32*
  store i32 %v0_b72c, i32* %v3_b72c, align 4
  %v0_b730 = load i32, i32* %r2.global-to-local, align 4
  %v1_b730 = trunc i32 %v0_b730 to i8
  %v2_b730 = load i32, i32* @r6, align 4
  %v3_b730 = add i32 %v2_b730, 12
  %v4_b730 = inttoptr i32 %v3_b730 to i8*
  store i8 %v1_b730, i8* %v4_b730, align 1
  %v0_b734 = load i32, i32* %r3.global-to-local, align 4
  %v1_b734 = trunc i32 %v0_b734 to i8
  %v2_b734 = load i32, i32* @r6, align 4
  %v3_b734 = add i32 %v2_b734, 13
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 %v1_b734, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r0.global-to-local, align 4
  %v1_b738 = trunc i32 %v0_b738 to i8
  %v2_b738 = load i32, i32* @r6, align 4
  %v3_b738 = add i32 %v2_b738, 2
  %v4_b738 = inttoptr i32 %v3_b738 to i8*
  store i8 %v1_b738, i8* %v4_b738, align 1
  %v0_b73c = call i32 @function_e580()
  %v1_b73c = trunc i32 %v0_b73c to i8
  store i32 %v0_b73c, i32* %r0.global-to-local, align 4
  store i32 %v1_b220, i32* %lr.global-to-local, align 4
  %v0_b744 = load i32, i32* @r6, align 4
  %v1_b744 = add i32 %v0_b744, 13
  %v2_b744 = inttoptr i32 %v1_b744 to i8*
  %v3_b744 = load i8, i8* %v2_b744, align 1
  %v4_b744 = zext i8 %v3_b744 to i32
  store i32 %v1_b748, i32* %r2.global-to-local, align 4
  %v1_b74c = and i32 %v4_b744, 223
  %v5_b750 = or i32 %v1_b74c, %v4_b750
  store i32 %v5_b750, i32* %r3.global-to-local, align 4
  %v1_b754 = trunc i32 %v5_b750 to i8
  store i8 %v1_b754, i8* %v2_b744, align 1
  store i32 %v1_b240, i32* %r1.global-to-local, align 4
  %v0_b75c = load i32, i32* @r6, align 4
  %v1_b75c = add i32 %v0_b75c, 13
  %v2_b75c = inttoptr i32 %v1_b75c to i8*
  %v3_b75c = load i8, i8* %v2_b75c, align 1
  %v4_b75c = zext i8 %v3_b75c to i32
  store i32 %v1_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = and i32 %v4_b75c, 239
  %v5_b768 = or i32 %v1_b764, %v4_b768
  store i32 %v5_b768, i32* %r2.global-to-local, align 4
  %v1_b76c = trunc i32 %v5_b768 to i8
  store i8 %v1_b76c, i8* %v2_b75c, align 1
  store i32 %v1_b260, i32* %ip.global-to-local, align 4
  %v0_b774 = load i32, i32* @r6, align 4
  %v1_b774 = add i32 %v0_b774, 13
  %v2_b774 = inttoptr i32 %v1_b774 to i8*
  %v3_b774 = load i8, i8* %v2_b774, align 1
  %v4_b774 = zext i8 %v3_b774 to i32
  store i32 %v1_b778, i32* %r2.global-to-local, align 4
  %v1_b77c = and i32 %v4_b774, 247
  %v5_b780 = or i32 %v1_b77c, %v4_b780
  store i32 %v5_b780, i32* %r3.global-to-local, align 4
  %v1_b784 = trunc i32 %v5_b780 to i8
  store i8 %v1_b784, i8* %v2_b774, align 1
  %v0_b78c = load i32, i32* @r6, align 4
  %v1_b78c = add i32 %v0_b78c, 13
  %v2_b78c = inttoptr i32 %v1_b78c to i8*
  %v3_b78c = load i8, i8* %v2_b78c, align 1
  %v4_b78c = zext i8 %v3_b78c to i32
  store i32 %v1_b790, i32* %r3.global-to-local, align 4
  %v1_b794 = and i32 %v4_b78c, 251
  %v5_b798 = or i32 %v1_b794, %v4_b798
  store i32 %v5_b798, i32* %r2.global-to-local, align 4
  %v1_b79c = trunc i32 %v5_b798 to i8
  store i8 %v1_b79c, i8* %v2_b78c, align 1
  store i32 %v1_b2a0, i32* %r1.global-to-local, align 4
  %v0_b7a4 = load i32, i32* @r6, align 4
  %v1_b7a4 = add i32 %v0_b7a4, 13
  %v2_b7a4 = inttoptr i32 %v1_b7a4 to i8*
  %v3_b7a4 = load i8, i8* %v2_b7a4, align 1
  %v4_b7a4 = zext i8 %v3_b7a4 to i32
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = and i32 %v4_b7a4, 253
  %v4_b7b0 = or i32 %v1_b7ac, %v3_b7b0
  store i32 %v4_b7b0, i32* %r3.global-to-local, align 4
  %v1_b7b4 = trunc i32 %v4_b7b0 to i8
  store i8 %v1_b7b4, i8* %v2_b7a4, align 1
  %v0_b7b8 = load i32, i32* @r6, align 4
  %v1_b7b8 = add i32 %v0_b7b8, 13
  %v2_b7b8 = inttoptr i32 %v1_b7b8 to i8*
  %v3_b7b8 = load i8, i8* %v2_b7b8, align 1
  %v4_b7b8 = zext i8 %v3_b7b8 to i32
  %v0_b7bc = load i32, i32* @r8, align 4
  %v1_b7bc = urem i32 %v0_b7bc, 2
  %v1_b7c0 = and i32 %v4_b7b8, 254
  store i32 %v1_b7c0, i32* %r2.global-to-local, align 4
  %v4_b7c427 = udiv i32 %v0_b73c, 256
  %v2_b7c8 = or i32 %v1_b7c0, %v1_b7bc
  store i32 %v2_b7c8, i32* %r3.global-to-local, align 4
  %v1_b7cc = trunc i32 %v4_b7c427 to i8
  %v3_b7cc = add i32 %v0_b7b8, 15
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v3_b7d0 = load i32, i32* @r6, align 4
  %v4_b7d0 = add i32 %v3_b7d0, 14
  %v5_b7d0 = inttoptr i32 %v4_b7d0 to i8*
  store i8 %v1_b73c, i8* %v5_b7d0, align 1
  %v0_b7d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* @r6, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 13
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* @r4, align 4
  %v1_b7d8 = add i32 %v0_b7d8, 40
  store i32 %v1_b7d8, i32* %r0.global-to-local, align 4
  %v0_b7dc = load i32, i32* @sb, align 4
  store i32 %v0_b7dc, i32* @r1, align 4
  %v1_b7e0 = inttoptr i32 %v1_b7d8 to i8*
  %v2_b7e0 = call i32 @function_e700(i8* %v1_b7e0)
  store i32 %v2_b7e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b7e4

dec_label_pc_b7e4:                                ; preds = %dec_label_pc_b384, %bb81
  %v3_b7e4 = load i32, i32* %stack_var_-40, align 4
  %v1_b7e8 = add i32 %v3_b7e4, 1
  store i32 %v1_b7e8, i32* %r3.global-to-local, align 4
  %v1_b7ec = load i32, i32* @fp, align 4
  %v9_b7ec = icmp eq i32 %v1_b7e8, %v1_b7ec
  store i1 %v9_b7ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b7e8, i32* %stack_var_-40, align 4
  %v5_b7f4 = icmp slt i32 %v1_b7e8, %v1_b7ec
  br i1 %v5_b7f4, label %dec_label_pc_b374, label %dec_label_pc_b7f8

dec_label_pc_b7f8:                                ; preds = %dec_label_pc_b7e4, %.thread18
  %v0_b80012 = phi i32 [ %v0_b348, %.thread18 ], [ %v1_b7ec, %dec_label_pc_b7e4 ]
  %v0_b7f8 = load i32, i32* @sb, align 4
  %v1_b7f8 = add i32 %v0_b7f8, 40
  store i32 %v1_b7f8, i32* @sl, align 4
  %v1_b7fc = add i32 %v0_b7f8, 20
  store i32 %v1_b7fc, i32* @r7, align 4
  %v2_b84c = icmp eq i32 %v1_b2f8, 0
  %v6_b82c = inttoptr i32 %v2_b168 to i32*
  %v3_b834 = icmp eq i32 %v3_b350, 65535
  br label %dec_label_pc_b800

dec_label_pc_b800:                                ; preds = %dec_label_pc_b85c, %dec_label_pc_b7f8
  %v0_b800 = phi i32 [ %v1_b93c, %dec_label_pc_b85c ], [ %v0_b80012, %dec_label_pc_b7f8 ]
  %v2_b800 = icmp eq i32 %v0_b800, 0
  store i1 %v2_b800, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_b800, 1
  br label %dec_label_pc_b808

dec_label_pc_b808:                                ; preds = %dec_label_pc_b808, %dec_label_pc_b800
  br i1 %tmp82, label %dec_label_pc_b808, label %dec_label_pc_b80c

dec_label_pc_b80c:                                ; preds = %dec_label_pc_b808
  %v0_b80c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_b80c, 256
  %v1_b814 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp84 = udiv i32 %v0_b80c, 256
  %v4_b818 = urem i32 %tmp84, 256
  %v5_b818 = or i32 %v4_b818, %v1_b814
  store i32 %v5_b818, i32* @r8, align 4
  store i32 %v2_b168, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v7_b82c = load i32, i32* %v6_b82c, align 4
  store i32 %v7_b82c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_b840 = add i32 %v7_b82c, 20
  store i32 %v1_b840, i32* @r5, align 4
  br i1 %v3_b834, label %dec_label_pc_b968, label %dec_label_pc_b848

dec_label_pc_b848:                                ; preds = %dec_label_pc_b948, %dec_label_pc_b80c
  %v0_b850 = phi i32 [ %v7_b954, %dec_label_pc_b948 ], [ %v7_b82c, %dec_label_pc_b80c ]
  store i32 %v1_b2f8, i32* %lr.global-to-local, align 4
  store i1 %v2_b84c, i1* %cpsr_z.global-to-local, align 1
  %v1_b850 = add i32 %v0_b850, 40
  store i32 %v1_b850, i32* %r0.global-to-local, align 4
  %v0_b854 = load i32, i32* @sb, align 4
  store i32 %v0_b854, i32* @r1, align 4
  br i1 %v2_b84c, label %dec_label_pc_b85c, label %dec_label_pc_b98c

dec_label_pc_b85c:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b968, %dec_label_pc_b98c
  %v2_b85c = phi i32 [ %v0_b850, %dec_label_pc_b848 ], [ %v0_b980, %dec_label_pc_b968 ], [ %v2_b85c.pre, %dec_label_pc_b98c ]
  %v0_b85c = load i32, i32* @r6, align 4
  %v1_b85c = trunc i32 %v0_b85c to i8
  %v3_b85c = add i32 %v2_b85c, 10
  %v4_b85c = inttoptr i32 %v3_b85c to i8*
  store i8 %v1_b85c, i8* %v4_b85c, align 1
  %v0_b860 = load i32, i32* @r6, align 4
  %v1_b860 = trunc i32 %v0_b860 to i8
  %v2_b860 = load i32, i32* @r4, align 4
  %v3_b860 = add i32 %v2_b860, 11
  %v4_b860 = inttoptr i32 %v3_b860 to i8*
  store i8 %v1_b860, i8* %v4_b860, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b868 = load i32, i32* @r4, align 4
  store i32 %v0_b868, i32* @r0, align 4
  %v2_b86c = call i32 @function_d0b8(i32 %v0_b868, i32 20)
  %v3_b86c = trunc i32 %v2_b86c to i8
  store i32 %v2_b86c, i32* %r0.global-to-local, align 4
  %v3_b870 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b158, i32* %r2.global-to-local, align 4
  %v3_b878 = mul i32 %v3_b870, 16
  %v2_b87c = add i32 %v3_b878, %v2_b158
  store i32 %v2_b87c, i32* %r1.global-to-local, align 4
  %v1_b880 = add i32 %v2_b87c, 4
  %v2_b880 = inttoptr i32 %v1_b880 to i32*
  %v3_b880 = load i32, i32* %v2_b880, align 4
  %v3_b884 = mul i32 %v3_b880, 65536
  store i32 %v3_b884, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b880, 256
  %v1_b88c = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_b880, 256
  %v4_b890 = urem i32 %tmp86, 256
  %v5_b890 = or i32 %v4_b890, %v1_b88c
  store i32 %v5_b890, i32* %r2.global-to-local, align 4
  %v1_b894 = add i32 %v3_b880, 1
  store i32 %v1_b894, i32* %r3.global-to-local, align 4
  store i32 %v1_b894, i32* %v2_b880, align 4
  %v0_b89c = load i32, i32* %r2.global-to-local, align 4
  %v1_b89c = load i32, i32* @r5, align 4
  %v2_b89c = add i32 %v1_b89c, 4
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 %v0_b89c, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 8
  %v2_b8a0 = inttoptr i32 %v1_b8a0 to i32*
  %v3_b8a0 = load i32, i32* %v2_b8a0, align 4
  %tmp87 = mul i32 %v3_b8a0, 256
  %v1_b8ac = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_b8a0, 256
  %v4_b8b0 = urem i32 %tmp88, 256
  %v5_b8b0 = or i32 %v4_b8b0, %v1_b8ac
  store i32 %v5_b8b0, i32* %r2.global-to-local, align 4
  %v4_b8b428 = udiv i32 %v2_b86c, 256
  %v1_b8b8 = trunc i32 %v4_b8b428 to i8
  %v2_b8b8 = load i32, i32* @r4, align 4
  %v3_b8b8 = add i32 %v2_b8b8, 11
  %v4_b8b8 = inttoptr i32 %v3_b8b8 to i8*
  store i8 %v1_b8b8, i8* %v4_b8b8, align 1
  %v3_b8bc = load i32, i32* @r4, align 4
  %v4_b8bc = add i32 %v3_b8bc, 10
  %v5_b8bc = inttoptr i32 %v4_b8bc to i8*
  store i8 %v3_b86c, i8* %v5_b8bc, align 1
  %v0_b8c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8c0 = load i32, i32* @r5, align 4
  %v2_b8c0 = add i32 %v1_b8c0, 8
  %v3_b8c0 = inttoptr i32 %v2_b8c0 to i32*
  store i32 %v0_b8c0, i32* %v3_b8c0, align 4
  %v0_b8c4 = load i32, i32* @r5, align 4
  store i32 %v0_b8c4, i32* @r1, align 4
  %v0_b8c8 = load i32, i32* @r8, align 4
  store i32 %v0_b8c8, i32* %r2.global-to-local, align 4
  %v0_b8cc = load i32, i32* @r7, align 4
  store i32 %v0_b8cc, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r4, align 4
  store i32 %v0_b8d0, i32* %r0.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r6, align 4
  %v1_b8d4 = trunc i32 %v0_b8d4 to i8
  %v3_b8d4 = add i32 %v0_b8c4, 16
  %v4_b8d4 = inttoptr i32 %v3_b8d4 to i8*
  store i8 %v1_b8d4, i8* %v4_b8d4, align 1
  %v0_b8d8 = load i32, i32* @r6, align 4
  %v1_b8d8 = trunc i32 %v0_b8d8 to i8
  %v2_b8d8 = load i32, i32* @r5, align 4
  %v3_b8d8 = add i32 %v2_b8d8, 17
  %v4_b8d8 = inttoptr i32 %v3_b8d8 to i8*
  store i8 %v1_b8d8, i8* %v4_b8d8, align 1
  %v4_b8dc = call i32 @function_d114(i32 %v0_b8d0, i32 %v0_b8c4, i32 %v0_b8c8, i32 %v0_b8cc)
  %v5_b8dc = trunc i32 %v4_b8dc to i8
  store i32 %v4_b8dc, i32* %r0.global-to-local, align 4
  %v4_b8e029 = udiv i32 %v4_b8dc, 256
  %v1_b8e4 = trunc i32 %v4_b8e029 to i8
  %v2_b8e4 = load i32, i32* @r5, align 4
  %v3_b8e4 = add i32 %v2_b8e4, 17
  %v4_b8e4 = inttoptr i32 %v3_b8e4 to i8*
  store i8 %v1_b8e4, i8* %v4_b8e4, align 1
  %v3_b8e8 = load i32, i32* @r5, align 4
  %v4_b8e8 = add i32 %v3_b8e8, 16
  %v5_b8e8 = inttoptr i32 %v4_b8e8 to i8*
  store i8 %v5_b8dc, i8* %v5_b8e8, align 1
  %v3_b8ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8ec, i32* %r3.global-to-local, align 4
  %v0_b8f0 = load i32, i32* @r4, align 4
  %v1_b8f0 = add i32 %v0_b8f0, 20
  %v2_b8f0 = inttoptr i32 %v1_b8f0 to i32*
  %v3_b8f0 = load i32, i32* %v2_b8f0, align 4
  %v5_b8f8 = mul i32 %v3_b8ec, 24
  %v3_b900 = udiv i32 %v3_b8f0, 65536
  store i32 %v3_b900, i32* %r2.global-to-local, align 4
  %v2_b904 = add i32 %v5_b8f8, %arg2
  store i32 %v2_b904, i32* %ip.global-to-local, align 4
  %v3_b9084 = udiv i32 %v3_b8f0, 16777216
  %v1_b90c = trunc i32 %v3_b9084 to i8
  %v3_b90c = add i32 %v2_b904, 3
  %v4_b90c = inttoptr i32 %v3_b90c to i8*
  store i8 %v1_b90c, i8* %v4_b90c, align 1
  %v0_b910 = load i32, i32* %r2.global-to-local, align 4
  %v1_b910 = trunc i32 %v0_b910 to i8
  %v2_b910 = load i32, i32* %ip.global-to-local, align 4
  %v3_b910 = add i32 %v2_b910, 2
  %v4_b910 = inttoptr i32 %v3_b910 to i8*
  store i8 %v1_b910, i8* %v4_b910, align 1
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v0_b920 = load i32, i32* @sl, align 4
  store i32 %v0_b920, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b928 = load i32, i32* %ip.global-to-local, align 4
  %v6_b930 = inttoptr i32 %v0_b914 to i32*
  %v7_b930 = call i32 @function_11980(i32 %v3_b308, i32* %v6_b930, i32 %v0_b920, i32 16384, i32 %v0_b928, i32 16)
  %v3_b934 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b934, i32* %r3.global-to-local, align 4
  %v1_b938 = add i32 %v3_b934, 1
  store i32 %v1_b938, i32* %r0.global-to-local, align 4
  %v1_b93c = load i32, i32* @fp, align 4
  %v9_b93c = icmp eq i32 %v1_b938, %v1_b93c
  store i1 %v9_b93c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b938, i32* %stack_var_-40, align 4
  %v6_b944 = icmp slt i32 %v1_b938, %v1_b93c
  br i1 %v6_b944, label %dec_label_pc_b948, label %dec_label_pc_b800

dec_label_pc_b948:                                ; preds = %dec_label_pc_b85c
  store i32 %v2_b168, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v4_b954 = mul i32 %v1_b938, 4
  %v5_b954 = add i32 %v4_b954, %v2_b168
  %v6_b954 = inttoptr i32 %v5_b954 to i32*
  %v7_b954 = load i32, i32* %v6_b954, align 4
  store i32 %v7_b954, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b834, i1* %cpsr_z.global-to-local, align 1
  %v1_b960 = add i32 %v7_b954, 20
  store i32 %v1_b960, i32* @r5, align 4
  br i1 %v3_b834, label %dec_label_pc_b968, label %dec_label_pc_b848

dec_label_pc_b968:                                ; preds = %dec_label_pc_b948, %dec_label_pc_b80c
  %v0_b968 = call i32 @function_e580()
  %v1_b968 = trunc i32 %v0_b968 to i8
  store i32 %v1_b2f8, i32* %lr.global-to-local, align 4
  %v4_b970 = sdiv i32 %v0_b968, 256
  store i32 %v4_b970, i32* %r3.global-to-local, align 4
  store i1 %v2_b84c, i1* %cpsr_z.global-to-local, align 1
  %v3_b978 = load i32, i32* @r4, align 4
  %v4_b978 = add i32 %v3_b978, 4
  %v5_b978 = inttoptr i32 %v4_b978 to i8*
  store i8 %v1_b968, i8* %v5_b978, align 1
  %v0_b97c = load i32, i32* %r3.global-to-local, align 4
  %v1_b97c = trunc i32 %v0_b97c to i8
  %v2_b97c = load i32, i32* @r4, align 4
  %v3_b97c = add i32 %v2_b97c, 5
  %v4_b97c = inttoptr i32 %v3_b97c to i8*
  store i8 %v1_b97c, i8* %v4_b97c, align 1
  %v0_b980 = load i32, i32* @r4, align 4
  %v1_b980 = add i32 %v0_b980, 40
  store i32 %v1_b980, i32* %r0.global-to-local, align 4
  %v0_b984 = load i32, i32* @sb, align 4
  store i32 %v0_b984, i32* @r1, align 4
  %v0_b988 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b988, label %dec_label_pc_b85c, label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b968
  %v0_b98c = phi i32 [ %v1_b850, %dec_label_pc_b848 ], [ %v1_b980, %dec_label_pc_b968 ]
  %v1_b98c = inttoptr i32 %v0_b98c to i8*
  %v2_b98c = call i32 @function_e700(i8* %v1_b98c)
  store i32 %v2_b98c, i32* %r0.global-to-local, align 4
  %v2_b85c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b85c

; uselistorder directives
  uselistorder i32 %v0_b980, { 1, 0 }
  uselistorder i32 %v7_b954, { 1, 2, 0 }
  uselistorder i32 %v1_b93c, { 1, 2, 0 }
  uselistorder i32 %v1_b938, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_b8dc, { 0, 2, 1 }
  uselistorder i32 %v0_b8c4, { 1, 0, 2 }
  uselistorder i32 %v3_b8a0, { 1, 0 }
  uselistorder i32 %v3_b880, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b86c, { 0, 2, 1 }
  uselistorder i32 %v0_b850, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0 }
  uselistorder i32 %v0_b800, { 1, 0 }
  uselistorder i1 %v3_b834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b7e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b73c, { 0, 2, 1 }
  uselistorder i32 %v3_b71c, { 1, 0 }
  uselistorder i32 %v0_b6f0, { 1, 0, 2 }
  uselistorder i32 %v3_b6e4, { 1, 0 }
  uselistorder i32 %v3_b678, { 1, 0 }
  uselistorder i32 %v0_b66c, { 1, 0 }
  uselistorder i32 %v3_b5f4, { 1, 0 }
  uselistorder i32 %v3_b5c4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b598, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b590, { 1, 0 }
  uselistorder i32 %v4_b578, { 1, 0 }
  uselistorder i32 %v0_b574, { 0, 2, 1 }
  uselistorder i1 %v7_b4e4, { 1, 0 }
  uselistorder i32 %v7_b4dc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b528, { 1, 0 }
  uselistorder i1 %v9_b50c, { 1, 0 }
  uselistorder i32 %v4_b520, { 1, 0 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v8_b430, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b41c, { 1, 0 }
  uselistorder i32 %v0_b40c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b394, { 1, 0 }
  uselistorder i32 %v3_b390, { 2, 1, 0, 3 }
  uselistorder i32 %v1_b7a8, { 1, 0 }
  uselistorder i32 %v1_b790, { 1, 0 }
  uselistorder i32 %v1_b778, { 1, 0 }
  uselistorder i32 %v1_b760, { 1, 0 }
  uselistorder i32 %v1_b748, { 1, 0 }
  uselistorder i32 %v5_b524, { 1, 0 }
  uselistorder i32 %v3_b47893, { 1, 0 }
  uselistorder i1 %v2_b53c, { 1, 0 }
  uselistorder i32 %v1_b538, { 1, 0 }
  uselistorder i32 %v4_b534, { 2, 0, 1 }
  uselistorder i32 %v4_b518, { 1, 0 }
  uselistorder i1 %v3_b460, { 1, 0 }
  uselistorder i32 %v8_b35c, { 2, 1, 0 }
  uselistorder i32 %v8_b358, { 1, 2, 0 }
  uselistorder i32 %v3_b350, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b34c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b340, { 1, 0 }
  uselistorder i1 %v7_b310, { 1, 0 }
  uselistorder i32 %v3_b30c, { 2, 0, 1 }
  uselistorder i32 %v3_b308, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b2f8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b2a0, { 1, 0 }
  uselistorder i32 %v1_b260, { 1, 0 }
  uselistorder i32 %v1_b240, { 1, 0 }
  uselistorder i32 %v1_b220, { 1, 0 }
  uselistorder i32 %v1_b1e8, { 1, 0 }
  uselistorder i32 %v2_b168, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b158, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b13c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 62, 35, 34, 36, 37, 39, 38, 43, 40, 41, 42, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_b98c, { 1, 0 }
  uselistorder label %dec_label_pc_b85c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b7e4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_b56c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4a4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b454, { 1, 0 }
}

define i32 @function_b998(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b998:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b99c = urem i32 %arg1, 256
  store i32 %v1_b99c, i32* @fp, align 4
  store i32 %v1_b99c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b9b4 = urem i32 %arg3, 256
  store i32 %v1_b9b4, i32* @r4, align 4
  %v2_b9b8 = call i32 @function_11cd0(i32 %v1_b99c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b9c4 = load i32, i32* @fp, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v2_b9c8 = call i32 @function_11cd0(i32 %v0_b9c4, i32 4)
  %v0_b9cc = load i32, i32* @r5, align 4
  store i32 %v0_b9cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b9dc = load i32, i32* @r4, align 4
  store i32 %v0_b9dc, i32* %r0.global-to-local, align 4
  %v5_b9e0 = inttoptr i32 %v0_b9cc to i32*
  %v6_b9e0 = call i32 @function_85e0(i32 %v0_b9dc, i32* %v5_b9e0, i32 2, i32 0)
  %v1_b9ec = urem i32 %v6_b9e0, 256
  store i32 %v1_b9ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b9f8 = load i32, i32* @r5, align 4
  store i32 %v0_b9f8, i32* %r1.global-to-local, align 4
  %v0_b9fc = load i32, i32* @r4, align 4
  store i32 %v0_b9fc, i32* %r0.global-to-local, align 4
  %v6_ba04 = inttoptr i32 %v0_b9f8 to i32*
  %v7_ba04 = call i32 @function_85e0(i32 %v0_b9fc, i32* %v6_ba04, i32 3, i32 65535)
  %v0_ba08 = load i32, i32* @r5, align 4
  store i32 %v0_ba08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ba04, i32* @r6, align 4
  %v0_ba18 = load i32, i32* @r4, align 4
  store i32 %v0_ba18, i32* %r0.global-to-local, align 4
  %v4_ba1c = inttoptr i32 %v0_ba08 to i32*
  %v5_ba1c = call i32 @function_85e0(i32 %v0_ba18, i32* %v4_ba1c, i32 4, i32 64)
  %v1_ba24 = urem i32 %v5_ba1c, 256
  store i32 %v1_ba24, i32* %ip.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  store i32 %v0_ba28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ba34 = load i32, i32* @r4, align 4
  store i32 %v0_ba34, i32* %r0.global-to-local, align 4
  %v6_ba3c = inttoptr i32 %v0_ba28 to i32*
  %v7_ba3c = call i32 @function_85e0(i32 %v0_ba34, i32* %v6_ba3c, i32 5, i32 1)
  %v1_ba48 = urem i32 %v7_ba3c, 256
  store i32 %v1_ba48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ba50 = load i32, i32* @r5, align 4
  store i32 %v0_ba50, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ba58 = load i32, i32* @r4, align 4
  store i32 %v0_ba58, i32* %r0.global-to-local, align 4
  %v5_ba60 = inttoptr i32 %v0_ba50 to i32*
  %v6_ba60 = call i32 @function_85e0(i32 %v0_ba58, i32* %v5_ba60, i32 7, i32 65535)
  %v0_ba64 = load i32, i32* @r5, align 4
  store i32 %v0_ba64, i32* %r1.global-to-local, align 4
  %v3_ba68 = mul i32 %v6_ba60, 65536
  store i32 %v3_ba68, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ba74 = load i32, i32* @r4, align 4
  store i32 %v0_ba74, i32* %r0.global-to-local, align 4
  %v4_ba78 = inttoptr i32 %v0_ba64 to i32*
  %v5_ba78 = call i32 @function_85e0(i32 %v0_ba74, i32* %v4_ba78, i32 11, i32 0)
  %v1_ba80 = urem i32 %v5_ba78, 256
  store i32 %v1_ba80, i32* %ip.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r5, align 4
  store i32 %v0_ba84, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ba90 = load i32, i32* @r4, align 4
  store i32 %v0_ba90, i32* %r0.global-to-local, align 4
  %v5_ba98 = inttoptr i32 %v0_ba84 to i32*
  %v6_ba98 = call i32 @function_85e0(i32 %v0_ba90, i32* %v5_ba98, i32 12, i32 1)
  %v1_baa0 = urem i32 %v6_ba98, 256
  store i32 %v1_baa0, i32* %ip.global-to-local, align 4
  %v0_baa4 = load i32, i32* @r5, align 4
  store i32 %v0_baa4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bab0 = load i32, i32* @r4, align 4
  store i32 %v0_bab0, i32* %r0.global-to-local, align 4
  %v5_bab8 = inttoptr i32 %v0_baa4 to i32*
  %v6_bab8 = call i32 @function_85e0(i32 %v0_bab0, i32* %v5_bab8, i32 13, i32 1)
  %v1_bac0 = urem i32 %v6_bab8, 256
  store i32 %v1_bac0, i32* %ip.global-to-local, align 4
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bad0 = load i32, i32* @r4, align 4
  store i32 %v0_bad0, i32* %r0.global-to-local, align 4
  %v5_bad8 = inttoptr i32 %v0_bac4 to i32*
  %v6_bad8 = call i32 @function_85e0(i32 %v0_bad0, i32* %v5_bad8, i32 14, i32 0)
  %v1_bae0 = urem i32 %v6_bad8, 256
  store i32 %v1_bae0, i32* %ip.global-to-local, align 4
  %v0_bae4 = load i32, i32* @r5, align 4
  store i32 %v0_bae4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_baf0 = load i32, i32* @r4, align 4
  store i32 %v0_baf0, i32* %r0.global-to-local, align 4
  %v5_baf8 = inttoptr i32 %v0_bae4 to i32*
  %v6_baf8 = call i32 @function_85e0(i32 %v0_baf0, i32* %v5_baf8, i32 15, i32 0)
  %v1_bb00 = urem i32 %v6_baf8, 256
  store i32 %v1_bb00, i32* %ip.global-to-local, align 4
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb10 = load i32, i32* @r4, align 4
  store i32 %v0_bb10, i32* %r0.global-to-local, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @function_85e0(i32 %v0_bb10, i32* %v5_bb18, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_bb18, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_bb28 = load i32, i32* @r5, align 4
  store i32 %v0_bb28, i32* %r1.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  store i32 %v0_bb2c, i32* %r0.global-to-local, align 4
  %v1_bb30 = urem i32 %v6_bb18, 256
  store i32 %v1_bb30, i32* @r8, align 4
  %v4_bb34 = inttoptr i32 %v0_bb28 to i32*
  %v5_bb34 = call i32 @function_85e0(i32 %v0_bb2c, i32* %v4_bb34, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  store i32 %v5_bb34, i32* @sb, align 4
  %v0_bb48 = load i32, i32* @r4, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  %v4_bb4c = inttoptr i32 %v0_bb40 to i32*
  %v5_bb4c = call i32 @function_85e0(i32 %v0_bb48, i32* %v4_bb4c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_bb58 = urem i32 %v5_bb4c, 256
  store i32 %v1_bb58, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bb68 = call i32 @function_119e4(i32 2, i32 3, i32 6)
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r7, align 4
  %v3_bb6c = udiv i32 %v0_bb6c, 65536
  store i32 %v3_bb6c, i32* %r1.global-to-local, align 4
  %v7_bb70 = icmp eq i32 %v3_bb68, -1
  store i1 %v7_bb70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb70, label %dec_label_pc_bdcc, label %dec_label_pc_bb80

dec_label_pc_bb80:                                ; preds = %dec_label_pc_b998
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bb88 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bb88, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb9c = call i32 @function_119b4(i32 %v3_bb68, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bb9c, i32* %r0.global-to-local, align 4
  %v7_bba0 = icmp eq i32 %v6_bb9c, -1
  store i1 %v7_bba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bba0, label %dec_label_pc_bdc4, label %dec_label_pc_bba8

dec_label_pc_bba8:                                ; preds = %dec_label_pc_bb80
  %v0_bba8 = load i32, i32* @fp, align 4
  %v2_bba8 = icmp eq i32 %v0_bba8, 0
  store i1 %v2_bba8, i1* %cpsr_z.global-to-local, align 1
  %v0_bbac = load i32, i32* @r6, align 4
  %v3_bbac = mul i32 %v0_bbac, 65536
  store i32 %v3_bbac, i32* %r0.global-to-local, align 4
  %v3_bbb0 = urem i32 %v0_bbac, 65536
  store i32 %v3_bbb0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_bba8, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_bbd4.preheader

.thread18:                                        ; preds = %dec_label_pc_bba8
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c058

dec_label_pc_bbd4.preheader:                      ; preds = %dec_label_pc_bba8
  %v5_bbb8 = load i32, i32* @r7, align 4
  %v8_bbb8 = udiv i32 %v5_bbb8, 16777216
  %tmp73 = udiv i32 %v0_bbac, 256
  %v8_bbbc = urem i32 %tmp73, 256
  store i32 %v8_bbbc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_bcc0 = icmp ugt i32 %v0_bb6c, -65537
  %v2_bce4 = ptrtoint i32* %stack_var_-60 to i32
  %v3_bcf0 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bd20 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bd24 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bd28 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bd74 = zext i8 %tmp31 to i32
  %v4_bd78 = zext i8 %tmp30 to i32
  %v4_bd84 = mul nuw nsw i32 %v4_bd78, 256
  %v4_bd94 = zext i8 %tmp to i32
  %v1_bd98 = and i32 %v4_bd94, 18
  %v2_bd9c = icmp eq i32 %v1_bd98, 18
  %v1_bcd0 = mul nuw nsw i32 %v3_bb6c, 256
  %v4_bcd4 = and i32 %v1_bcd0, 65280
  %v5_bcd4 = or i32 %v8_bbb8, %v4_bcd4
  %v3_bcd893 = udiv i32 %v4_bcd4, 256
  %v1_bcdc = trunc i32 %v3_bcd893 to i8
  %v1_bea0 = mul i32 %v0_bbac, 256
  %v4_bea8 = and i32 %v1_bea0, 65280
  %sext = mul i32 %v6_b9e0, 16777216
  %v4_beb8 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_ba1c, 16777216
  %v4_bedc = sdiv i32 %sext5, 16777216
  %v5_bd84 = or i32 %v4_bd74, %v4_bd84
  %v1_bda4 = and i32 %v4_bd94, 5
  %v2_bda4 = icmp eq i32 %v1_bda4, 0
  %v1_bce0 = trunc i32 %v8_bbb8 to i8
  %v5_bea8 = or i32 %v8_bbbc, %v4_bea8
  %v1_bec8 = trunc i32 %v4_beb8 to i8
  %v1_bfa8 = urem i32 %v5_ba78, 2
  %tmp94 = sub nsw i32 0, %v1_bfa8
  %v4_bfb0 = and i32 %tmp94, 32
  %v1_bfc0 = urem i32 %v6_ba98, 2
  %tmp95 = sub nsw i32 0, %v1_bfc0
  %v4_bfc8 = and i32 %tmp95, 16
  %v1_bfd8 = urem i32 %v6_bab8, 2
  %tmp96 = sub nsw i32 0, %v1_bfd8
  %v4_bfe0 = and i32 %tmp96, 8
  %v1_bff0 = urem i32 %v6_bad8, 2
  %tmp97 = sub nsw i32 0, %v1_bff0
  %v4_bff8 = and i32 %tmp97, 4
  %v1_c008 = urem i32 %v6_baf8, 2
  %tmp98 = sub nsw i32 0, %v1_c008
  %v3_c010 = and i32 %tmp98, 2
  br label %dec_label_pc_bbd4

dec_label_pc_bbd4:                                ; preds = %dec_label_pc_c044, %dec_label_pc_bdac, %dec_label_pc_bbd4.preheader
  store i32 %v8_bbbc, i32* %r3.global-to-local, align 4
  %v0_bbe0 = load i32, i32* @sb, align 4
  %v1_bbe0 = add i32 %v0_bbe0, 40
  store i32 %v1_bbe0, i32* @sl, align 4
  br label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_bbd4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bbf0 = call i32 @function_119e4(i32 2, i32 1, i32 0)
  store i32 %v3_bbf0, i32* %r0.global-to-local, align 4
  %v7_bbf4 = icmp eq i32 %v3_bbf0, -1
  store i1 %v7_bbf4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bbf0, i32* @r7, align 4
  br i1 %v7_bbf4, label %dec_label_pc_c044, label %dec_label_pc_bc00

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bbe4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_bc08 = call i32 @function_1105c(i32 %v3_bbf0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bc10 = or i32 %v2_bc08, 2048
  store i32 %v1_bc10, i32* @r2, align 4
  %v0_bc14 = load i32, i32* @r7, align 4
  store i32 %v0_bc14, i32* %r0.global-to-local, align 4
  %v2_bc18 = call i32 @function_1105c(i32 %v0_bc14, i32 4)
  store i32 %v2_bc18, i32* %r0.global-to-local, align 4
  %v3_bc1c = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_bc2c = mul i32 %v3_bc1c, 24
  store i32 %v5_bc2c, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_bc3c = add i32 %v5_bc2c, %arg2
  store i32 %v2_bc3c, i32* %r2.global-to-local, align 4
  %v1_bc40 = add i32 %v2_bc3c, 20
  %v2_bc40 = inttoptr i32 %v1_bc40 to i8*
  %v3_bc40 = load i8, i8* %v2_bc40, align 1
  %v4_bc40 = zext i8 %v3_bc40 to i32
  store i32 %v4_bc40, i32* %r3.global-to-local, align 4
  %v2_bc44 = icmp ugt i8 %v3_bc40, 30
  %v7_bc44 = icmp eq i8 %v3_bc40, 31
  store i1 %v7_bc44, i1* %cpsr_z.global-to-local, align 1
  %v2_bc48 = xor i1 %v7_bc44, true
  %v3_bc48 = and i1 %v2_bc44, %v2_bc48
  %v5_bc48 = add i32 %v2_bc3c, 16
  %v6_bc48 = inttoptr i32 %v5_bc48 to i32*
  %v7_bc48 = load i32, i32* %v6_bc48, align 4
  br i1 %v3_bc48, label %dec_label_pc_bcb4, label %dec_label_pc_bc54

dec_label_pc_bc54:                                ; preds = %dec_label_pc_bc00
  store i32 %v7_bc48, i32* @r4, align 4
  %v0_bc58 = call i32 @function_e580()
  store i32 %v0_bc58, i32* %r0.global-to-local, align 4
  %v3_bc5c = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_bc68 = mul i32 %v3_bc5c, 24
  %v0_bc6c = load i32, i32* @r4, align 4
  %v2_bc70 = add i32 %v5_bc68, %arg2
  store i32 %v2_bc70, i32* %r1.global-to-local, align 4
  %v1_bc74 = and i32 %v0_bc6c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_bc74, i32* %r3.global-to-local, align 4
  %v1_bc6c = udiv i32 %v0_bc6c, 256
  %v3_bc78 = and i32 %v1_bc6c, 65280
  store i32 %v3_bc78, i32* %r2.global-to-local, align 4
  %v3_bc7c = mul i32 %v0_bc6c, 16777216
  store i32 %v3_bc7c, i32* %ip.global-to-local, align 4
  %v1_bc80 = add i32 %v2_bc70, 20
  %v2_bc80 = inttoptr i32 %v1_bc80 to i8*
  %v3_bc80 = load i8, i8* %v2_bc80, align 1
  %v4_bc80 = zext i8 %v3_bc80 to i32
  store i32 %v4_bc80, i32* %lr.global-to-local, align 4
  %v4_bc84 = mul i32 %v1_bc74, 256
  %v5_bc84 = or i32 %v4_bc84, %v3_bc7c
  store i32 %v5_bc84, i32* %ip.global-to-local, align 4
  %v4_bc88 = udiv i32 %v0_bc6c, 16777216
  %v5_bc88 = or i32 %v3_bc78, %v4_bc88
  %v2_bc8c = or i32 %v5_bc88, %v5_bc84
  %v7_bc90 = lshr i32 %v0_bc58, %v4_bc80
  %v8_bc90 = add i32 %v7_bc90, %v2_bc8c
  store i32 %v8_bc90, i32* %r2.global-to-local, align 4
  %v3_bc9c = mul i32 %v8_bc90, 16777216
  %v1_bca0 = and i32 %v8_bc90, 65280
  store i32 %v1_bca0, i32* %r0.global-to-local, align 4
  %v4_bca4 = mul nuw nsw i32 %v1_bca0, 256
  %v5_bca4 = or i32 %v4_bca4, %v3_bc9c
  store i32 %v5_bca4, i32* %r1.global-to-local, align 4
  %v2_bcac = call i32 @llvm.bswap.i32(i32 %v8_bc90)
  br label %dec_label_pc_bcb4

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_bc00, %dec_label_pc_bc54
  %storemerge25 = phi i32 [ %v2_bcac, %dec_label_pc_bc54 ], [ %v7_bc48, %dec_label_pc_bc00 ]
  store i32 %v3_bb6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bcc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bcc0, label %dec_label_pc_bdd4, label %dec_label_pc_bcc8

dec_label_pc_bcc8:                                ; preds = %dec_label_pc_bcb4
  store i32 %v8_bbb8, i32* %ip.global-to-local, align 4
  store i32 %v5_bcd4, i32* %r3.global-to-local, align 4
  store i32 %v3_bcd893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bce4

dec_label_pc_bce4:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bcc8
  %stack_var_-57.0 = phi i8 [ %v1_bddc, %dec_label_pc_bdd4 ], [ %v1_bcdc, %dec_label_pc_bcc8 ]
  %storemerge = phi i8 [ %v1_bdd4, %dec_label_pc_bdd4 ], [ %v1_bce0, %dec_label_pc_bcc8 ]
  store i32 %v2_bce4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bcec = load i32, i32* @r7, align 4
  store i32 %v0_bcec, i32* %r0.global-to-local, align 4
  %v4_bcf0 = call i32 @function_1186c(i32 %v0_bcec, %sockaddr* nonnull %v3_bcf0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bcf8 = call i32 @function_113f0(i32* null)
  store i32 %v2_bcf8, i32* %r0.global-to-local, align 4
  store i32 %v2_bcf8, i32* @r4, align 4
  %v9_bd58 = icmp eq i32 %tmp32, %storemerge25
  %v4_bd7c = zext i8 %storemerge to i32
  %v4_bd80 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bd58 to i32
  %v9_bd6c = icmp eq i1 %v9_bd58, false
  %v4_bd88 = mul nuw nsw i32 %v4_bd80, 256
  %v5_bd88 = or i32 %v4_bd88, %v4_bd7c
  %v9_bd8c = icmp eq i32 %v5_bd88, %v5_bd84
  br label %dec_label_pc_bd14

dec_label_pc_bd04:                                ; preds = %.thread23, %dec_label_pc_bd74, %dec_label_pc_bda4, %bb75
  %v2_bd04 = call i32 @function_113f0(i32* null)
  %v0_bd08 = load i32, i32* @r4, align 4
  %v2_bd08 = sub i32 %v2_bd04, %v0_bd08
  store i32 %v2_bd08, i32* %r0.global-to-local, align 4
  %v7_bd0c = icmp eq i32 %v2_bd08, 10
  store i1 %v7_bd0c, i1* %cpsr_z.global-to-local, align 1
  %v8_bd10 = icmp sgt i32 %v2_bd08, 10
  br i1 %v8_bd10, label %dec_label_pc_bdb8, label %dec_label_pc_bd14

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bce4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bd20, i32* %lr.global-to-local, align 4
  store i32 %v2_bd24, i32* %ip.global-to-local, align 4
  store i32 %v2_bd28, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v7_bd3c = call i32 @function_11920(i32 %v3_bb68, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bd20, i32 %v2_bd24)
  store i32 %v7_bd3c, i32* %r2.global-to-local, align 4
  %v7_bd44 = icmp eq i32 %v7_bd3c, -1
  store i1 %v7_bd44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bd44, label %dec_label_pc_bdcc, label %dec_label_pc_bd50

dec_label_pc_bd50:                                ; preds = %dec_label_pc_bd14
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_bd64 = icmp eq i32 %v7_bd3c, 40
  store i1 %v7_bd64, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bd3c, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bd50
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bd04

bb75:                                             ; preds = %dec_label_pc_bd50
  store i1 %v9_bd6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd6c, label %dec_label_pc_bd04, label %dec_label_pc_bd74

dec_label_pc_bd74:                                ; preds = %bb75
  store i32 %v4_bd78, i32* %r1.global-to-local, align 4
  store i32 %v4_bd7c, i32* %ip.global-to-local, align 4
  store i32 %v4_bd80, i32* %r2.global-to-local, align 4
  store i32 %v5_bd84, i32* %r3.global-to-local, align 4
  store i32 %v5_bd88, i32* @r5, align 4
  store i1 %v9_bd8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd8c, label %dec_label_pc_bd94, label %dec_label_pc_bd04

dec_label_pc_bd94:                                ; preds = %dec_label_pc_bd74
  store i32 %v4_bd94, i32* %r2.global-to-local, align 4
  store i32 %v1_bd98, i32* %r3.global-to-local, align 4
  store i1 %v2_bd9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd9c, label %dec_label_pc_bde8, label %dec_label_pc_bda4

dec_label_pc_bda4:                                ; preds = %dec_label_pc_bd94
  store i1 %v2_bda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bda4, label %dec_label_pc_bd04, label %dec_label_pc_bdac

dec_label_pc_bdac:                                ; preds = %dec_label_pc_bda4
  %v0_bdac = load i32, i32* @r7, align 4
  store i32 %v0_bdac, i32* %r0.global-to-local, align 4
  %v1_bdb0 = call i32 @function_11120(i32 %v0_bdac)
  store i32 %v1_bdb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbd4

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd04
  %v0_bdb8 = load i32, i32* @r7, align 4
  store i32 %v0_bdb8, i32* %r0.global-to-local, align 4
  %v1_bdbc = call i32 @function_11120(i32 %v0_bdb8)
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbe4

dec_label_pc_bdc4:                                ; preds = %dec_label_pc_bb80
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v1_bdc8 = call i32 @function_11120(i32 %v3_bb68)
  store i32 %v1_bdc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdcc

dec_label_pc_bdcc:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_b998, %dec_label_pc_bdc4
  %v29_bdd0 = phi i32 [ %v3_bb68, %dec_label_pc_b998 ], [ %v1_bdc8, %dec_label_pc_bdc4 ], [ 0, %dec_label_pc_bd14 ]
  ret i32 %v29_bdd0

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_bcb4
  %v0_bdd4 = call i32 @function_e580()
  %v1_bdd4 = trunc i32 %v0_bdd4 to i8
  store i32 %v0_bdd4, i32* %r0.global-to-local, align 4
  %v4_bdd8 = sdiv i32 %v0_bdd4, 256
  store i32 %v4_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = trunc i32 %v4_bdd8 to i8
  br label %dec_label_pc_bce4

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bd94
  %v3_bde8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bde8, i32* @r4, align 4
  store i32 %v2_b9b8, i32* %r2.global-to-local, align 4
  %v3_bdf0 = mul i32 %v3_bde8, 16
  store i32 %v3_bdf0, i32* %ip.global-to-local, align 4
  %v3_bdf4 = add i32 %v3_bdf0, %v2_b9b8
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i32*
  store i32 %storemerge25, i32* %v4_bdf4, align 4
  %v0_bdf8 = load i32, i32* @r6, align 4
  %v1_bdf8 = add i32 %v0_bdf8, 4
  %v2_bdf8 = inttoptr i32 %v1_bdf8 to i32*
  %v3_bdf8 = load i32, i32* %v2_bdf8, align 4
  store i32 %v3_bdf8, i32* %r0.global-to-local, align 4
  %v1_be00 = and i32 %v3_bdf8, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_be00, i32* %r1.global-to-local, align 4
  store i32 %v2_b9b8, i32* %lr.global-to-local, align 4
  %v3_be08 = mul i32 %v3_bdf8, 16777216
  %v1_bdfc = udiv i32 %v3_bdf8, 256
  %v3_be0c = and i32 %v1_bdfc, 65280
  %v4_be10 = mul i32 %v1_be00, 256
  %v5_be10 = or i32 %v4_be10, %v3_be08
  store i32 %v5_be10, i32* %r2.global-to-local, align 4
  %v4_be14 = udiv i32 %v3_bdf8, 16777216
  %v5_be14 = or i32 %v3_be0c, %v4_be14
  %v1_be18 = load i32, i32* %ip.global-to-local, align 4
  %v2_be18 = add i32 %v1_be18, %v2_b9b8
  store i32 %v2_be18, i32* %ip.global-to-local, align 4
  %v2_be1c = or i32 %v5_be14, %v5_be10
  store i32 %v2_be1c, i32* %r3.global-to-local, align 4
  %v2_be20 = add i32 %v2_be18, 4
  %v3_be20 = inttoptr i32 %v2_be20 to i32*
  store i32 %v2_be1c, i32* %v3_be20, align 4
  %v0_be24 = load i32, i32* @r6, align 4
  %v1_be24 = add i32 %v0_be24, 8
  %v2_be24 = inttoptr i32 %v1_be24 to i32*
  %v3_be24 = load i32, i32* %v2_be24, align 4
  store i32 %v3_be24, i32* %r0.global-to-local, align 4
  %v1_be2c = and i32 %v3_be24, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_be2c, i32* %r1.global-to-local, align 4
  %v3_be30 = mul i32 %v3_be24, 16777216
  %v1_be28 = udiv i32 %v3_be24, 256
  %v3_be34 = and i32 %v1_be28, 65280
  %v4_be38 = mul i32 %v1_be2c, 256
  %v5_be38 = or i32 %v4_be38, %v3_be30
  store i32 %v5_be38, i32* %r2.global-to-local, align 4
  %v4_be3c = udiv i32 %v3_be24, 16777216
  %v5_be3c = or i32 %v3_be34, %v4_be3c
  %v2_be40 = or i32 %v5_be3c, %v5_be38
  store i32 %v2_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = load i32, i32* %ip.global-to-local, align 4
  %v2_be44 = add i32 %v1_be44, 8
  %v3_be44 = inttoptr i32 %v2_be44 to i32*
  store i32 %v2_be40, i32* %v3_be44, align 4
  %v0_be48 = load i32, i32* @r6, align 4
  %v1_be48 = inttoptr i32 %v0_be48 to i32*
  %v2_be48 = load i32, i32* %v1_be48, align 4
  %v3_be4c = udiv i32 %v2_be48, 65536
  store i32 %v3_be4c, i32* %r2.global-to-local, align 4
  %v3_be503 = udiv i32 %v2_be48, 16777216
  store i32 %v3_be503, i32* %r1.global-to-local, align 4
  %v0_be54 = load i32, i32* @r5, align 4
  %v3_be54 = sdiv i32 %v0_be54, 256
  store i32 %v3_be54, i32* %r3.global-to-local, align 4
  %v1_be58 = trunc i32 %v3_be54 to i8
  %v2_be58 = load i32, i32* %ip.global-to-local, align 4
  %v3_be58 = add i32 %v2_be58, 15
  %v4_be58 = inttoptr i32 %v3_be58 to i8*
  store i8 %v1_be58, i8* %v4_be58, align 1
  %v0_be5c = load i32, i32* %r1.global-to-local, align 4
  %v1_be5c = trunc i32 %v0_be5c to i8
  %v2_be5c = load i32, i32* %ip.global-to-local, align 4
  %v3_be5c = add i32 %v2_be5c, 13
  %v4_be5c = inttoptr i32 %v3_be5c to i8*
  store i8 %v1_be5c, i8* %v4_be5c, align 1
  %v0_be60 = load i32, i32* %r2.global-to-local, align 4
  %v1_be60 = trunc i32 %v0_be60 to i8
  %v2_be60 = load i32, i32* %ip.global-to-local, align 4
  %v3_be60 = add i32 %v2_be60, 12
  %v4_be60 = inttoptr i32 %v3_be60 to i8*
  store i8 %v1_be60, i8* %v4_be60, align 1
  %v0_be64 = load i32, i32* @r5, align 4
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v2_be64 = load i32, i32* %ip.global-to-local, align 4
  %v3_be64 = add i32 %v2_be64, 14
  %v4_be64 = inttoptr i32 %v3_be64 to i8*
  store i8 %v1_be64, i8* %v4_be64, align 1
  %v0_be68 = load i32, i32* @sl, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v1_be6c = call i32 @function_11b7c(i32 %v0_be68)
  store i32 %v1_be6c, i32* %r0.global-to-local, align 4
  store i32 %v2_b9c8, i32* %r1.global-to-local, align 4
  %v3_be74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_be74, i32* %r2.global-to-local, align 4
  %v2_be78 = load i32, i32* @r4, align 4
  %v5_be78 = mul i32 %v2_be78, 4
  %v6_be78 = add i32 %v5_be78, %v2_b9c8
  %v7_be78 = inttoptr i32 %v6_be78 to i32*
  store i32 %v1_be6c, i32* %v7_be78, align 4
  %v0_be7c = load i32, i32* %r1.global-to-local, align 4
  %v1_be7c = load i32, i32* %r2.global-to-local, align 4
  %v4_be7c = mul i32 %v1_be7c, 4
  %v5_be7c = add i32 %v4_be7c, %v0_be7c
  %v6_be7c = inttoptr i32 %v5_be7c to i32*
  %v7_be7c = load i32, i32* %v6_be7c, align 4
  store i32 %v7_be7c, i32* @r4, align 4
  %v1_be80 = inttoptr i32 %v7_be7c to i8*
  %v2_be80 = load i8, i8* %v1_be80, align 1
  %tmp100 = urem i8 %v2_be80, 16
  %v1_be84 = zext i8 %tmp100 to i32
  %v1_be88 = or i32 %v1_be84, 64
  store i32 %v1_be88, i32* %r3.global-to-local, align 4
  %v1_be8c = trunc i32 %v1_be88 to i8
  store i8 %v1_be8c, i8* %v1_be80, align 1
  %v0_be90 = load i32, i32* @r4, align 4
  %v1_be90 = inttoptr i32 %v0_be90 to i8*
  %v2_be90 = load i8, i8* %v1_be90, align 1
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v1_be9c = and i8 %v2_be90, -16
  %v1_bea4 = or i8 %v1_be9c, 5
  store i32 %v5_bea8, i32* %r0.global-to-local, align 4
  %v0_beac = load i32, i32* @sl, align 4
  %v3_beac = mul i32 %v0_beac, 65536
  store i32 %v3_beac, i32* %r2.global-to-local, align 4
  store i32 %v1_ba48, i32* %lr.global-to-local, align 4
  store i8 %v1_bea4, i8* %v1_be90, align 1
  store i32 %v4_beb8, i32* %r1.global-to-local, align 4
  %v0_bebc = load i32, i32* %r2.global-to-local, align 4
  %v3_bebc = udiv i32 %v0_bebc, 65536
  %v1_bec0 = urem i32 %v3_bebc, 256
  store i32 %v1_bec0, i32* %r3.global-to-local, align 4
  %v3_bec4 = udiv i32 %v0_bebc, 16777216
  store i32 %v3_bec4, i32* %r2.global-to-local, align 4
  %v2_bec8 = load i32, i32* @r4, align 4
  %v3_bec8 = add i32 %v2_bec8, 1
  %v4_bec8 = inttoptr i32 %v3_bec8 to i8*
  store i8 %v1_bec8, i8* %v4_bec8, align 1
  %v0_becc = load i32, i32* %r2.global-to-local, align 4
  %v1_becc = load i32, i32* %r3.global-to-local, align 4
  %v4_becc = mul i32 %v1_becc, 256
  %v5_becc = or i32 %v4_becc, %v0_becc
  store i32 %v5_becc, i32* %r2.global-to-local, align 4
  %v1_bed0 = trunc i32 %v0_becc to i8
  %v2_bed0 = load i32, i32* @r4, align 4
  %v3_bed0 = add i32 %v2_bed0, 2
  %v4_bed0 = inttoptr i32 %v3_bed0 to i8*
  store i8 %v1_bed0, i8* %v4_bed0, align 1
  %v0_bed4 = load i32, i32* %lr.global-to-local, align 4
  %v2_bed4 = icmp eq i32 %v0_bed4, 0
  store i1 %v2_bed4, i1* %cpsr_z.global-to-local, align 1
  %v0_bed8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bed8 = sdiv i32 %v0_bed8, 256
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  store i32 %v4_bedc, i32* %r2.global-to-local, align 4
  %v1_bee0 = trunc i32 %v3_bed8 to i8
  %v2_bee0 = load i32, i32* @r4, align 4
  %v3_bee0 = add i32 %v2_bee0, 3
  %v4_bee0 = inttoptr i32 %v3_bee0 to i8*
  store i8 %v1_bee0, i8* %v4_bee0, align 1
  %v0_bee4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bee4, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bde8
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bde8, %bb76
  %v0_bee8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bee8 = trunc i32 %v0_bee8 to i8
  %v2_bee8 = load i32, i32* @r4, align 4
  %v3_bee8 = add i32 %v2_bee8, 8
  %v4_bee8 = inttoptr i32 %v3_bee8 to i8*
  store i8 %v1_bee8, i8* %v4_bee8, align 1
  %v0_beec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_beec, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_beec = load i32, i32* %r3.global-to-local, align 4
  %v2_beec = trunc i32 %v1_beec to i8
  %v3_beec = load i32, i32* @r4, align 4
  %v4_beec = add i32 %v3_beec, 6
  %v5_beec = inttoptr i32 %v4_beec to i8*
  store i8 %v2_beec, i8* %v5_beec, align 1
  %v0_bef0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bef0.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bef8 = load i32, i32* @r4, align 4
  %v3_bef8 = add i32 %v2_bef8, 9
  %v4_bef8 = inttoptr i32 %v3_bef8 to i8*
  store i8 6, i8* %v4_bef8, align 1
  %v0_befc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_befc, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_befc = load i32, i32* %r2.global-to-local, align 4
  %v2_befc = trunc i32 %v1_befc to i8
  %v3_befc = load i32, i32* @r4, align 4
  %v4_befc = add i32 %v3_befc, 7
  %v5_befc = inttoptr i32 %v4_befc to i8*
  store i8 %v2_befc, i8* %v5_befc, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bf04 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_bf04, i32* %r3.global-to-local, align 4
  %v0_bf08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bf08 = sdiv i32 %v0_bf08, 256
  store i32 %v3_bf08, i32* %ip.global-to-local, align 4
  %v1_bf0c = load i32, i32* @r4, align 4
  %v2_bf0c = add i32 %v1_bf0c, 12
  %v3_bf0c = inttoptr i32 %v2_bf0c to i32*
  store i32 %v2_bf04, i32* %v3_bf0c, align 4
  %v0_bf10 = load i32, i32* %ip.global-to-local, align 4
  %v1_bf10 = trunc i32 %v0_bf10 to i8
  %v2_bf10 = load i32, i32* @r4, align 4
  %v3_bf10 = add i32 %v2_bf10, 5
  %v4_bf10 = inttoptr i32 %v3_bf10 to i8*
  store i8 %v1_bf10, i8* %v4_bf10, align 1
  %v3_bf14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf14, i32* %r2.global-to-local, align 4
  store i32 %v2_b9b8, i32* %ip.global-to-local, align 4
  %v4_bf1c = mul i32 %v3_bf14, 16
  %v5_bf1c = add i32 %v4_bf1c, %v2_b9b8
  %v6_bf1c = inttoptr i32 %v5_bf1c to i32*
  %v7_bf1c = load i32, i32* %v6_bf1c, align 4
  store i32 %v7_bf1c, i32* %r3.global-to-local, align 4
  %v0_bf20 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf20 = trunc i32 %v0_bf20 to i8
  %v2_bf20 = load i32, i32* @r4, align 4
  %v3_bf20 = add i32 %v2_bf20, 4
  %v4_bf20 = inttoptr i32 %v3_bf20 to i8*
  store i8 %v1_bf20, i8* %v4_bf20, align 1
  %v0_bf24 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf24 = load i32, i32* @r4, align 4
  %v2_bf24 = add i32 %v1_bf24, 16
  %v3_bf24 = inttoptr i32 %v2_bf24 to i32*
  store i32 %v0_bf24, i32* %v3_bf24, align 4
  %v0_bf28 = load i32, i32* %r2.global-to-local, align 4
  %v3_bf28 = mul i32 %v0_bf28, 16
  %v1_bf2c = load i32, i32* %ip.global-to-local, align 4
  %v2_bf2c = add i32 %v1_bf2c, %v3_bf28
  store i32 %v2_bf2c, i32* %r2.global-to-local, align 4
  %v1_bf30 = add i32 %v2_bf2c, 13
  %v2_bf30 = inttoptr i32 %v1_bf30 to i8*
  %v3_bf30 = load i8, i8* %v2_bf30, align 1
  %v4_bf30 = zext i8 %v3_bf30 to i32
  store i32 %v4_bf30, i32* %r1.global-to-local, align 4
  %v1_bf34 = add i32 %v2_bf2c, 12
  %v2_bf34 = inttoptr i32 %v1_bf34 to i8*
  %v3_bf34 = load i8, i8* %v2_bf34, align 1
  %v4_bf34 = zext i8 %v3_bf34 to i32
  %v4_bf38 = mul nuw nsw i32 %v4_bf30, 256
  %v5_bf38 = or i32 %v4_bf34, %v4_bf38
  store i32 %v5_bf38, i32* %r3.global-to-local, align 4
  %v2_bf3c = load i32, i32* @r4, align 4
  %v3_bf3c = add i32 %v2_bf3c, 20
  %v4_bf3c = inttoptr i32 %v3_bf3c to i8*
  store i8 %v3_bf34, i8* %v4_bf3c, align 1
  %v0_bf40 = load i32, i32* @r4, align 4
  %v1_bf40 = add i32 %v0_bf40, 20
  store i32 %v1_bf40, i32* @r6, align 4
  %v0_bf44 = load i32, i32* %r3.global-to-local, align 4
  %v3_bf44 = sdiv i32 %v0_bf44, 256
  store i32 %v3_bf44, i32* %r3.global-to-local, align 4
  %v1_bf48 = trunc i32 %v3_bf44 to i8
  %v3_bf48 = add i32 %v0_bf40, 21
  %v4_bf48 = inttoptr i32 %v3_bf48 to i8*
  store i8 %v1_bf48, i8* %v4_bf48, align 1
  %v0_bf4c = load i32, i32* @r6, align 4
  %v1_bf4c = add i32 %v0_bf4c, 13
  %v2_bf4c = inttoptr i32 %v1_bf4c to i8*
  %v3_bf4c = load i8, i8* %v2_bf4c, align 1
  %v4_bf4c = zext i8 %v3_bf4c to i32
  store i32 %v4_bf4c, i32* %r3.global-to-local, align 4
  %v0_bf50 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf50 = add i32 %v0_bf50, 8
  %v2_bf50 = inttoptr i32 %v1_bf50 to i32*
  %v3_bf50 = load i32, i32* %v2_bf50, align 4
  store i32 %v3_bf50, i32* %r1.global-to-local, align 4
  %v1_bf54 = or i32 %v4_bf4c, 1
  store i32 %v1_bf54, i32* %r3.global-to-local, align 4
  %v1_bf58 = add i32 %v0_bf50, 15
  %v2_bf58 = inttoptr i32 %v1_bf58 to i8*
  %v3_bf58 = load i8, i8* %v2_bf58, align 1
  %v4_bf58 = zext i8 %v3_bf58 to i32
  store i32 %v4_bf58, i32* %ip.global-to-local, align 4
  %v1_bf5c = add i32 %v0_bf50, 14
  %v2_bf5c = inttoptr i32 %v1_bf5c to i8*
  %v3_bf5c = load i8, i8* %v2_bf5c, align 1
  %v4_bf5c = zext i8 %v3_bf5c to i32
  store i32 %v4_bf5c, i32* %r0.global-to-local, align 4
  %v2_bf60 = add i32 %v0_bf4c, 4
  %v3_bf60 = inttoptr i32 %v2_bf60 to i32*
  store i32 %v3_bf50, i32* %v3_bf60, align 4
  %v0_bf64 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf64 = add i32 %v0_bf64, 4
  %v2_bf64 = inttoptr i32 %v1_bf64 to i32*
  %v3_bf64 = load i32, i32* %v2_bf64, align 4
  store i32 %v3_bf64, i32* %lr.global-to-local, align 4
  %v0_bf68 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf68 = trunc i32 %v0_bf68 to i8
  %v2_bf68 = load i32, i32* @r6, align 4
  %v3_bf68 = add i32 %v2_bf68, 13
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v0_bf6c = load i32, i32* @r6, align 4
  %v1_bf6c = add i32 %v0_bf6c, 12
  %v2_bf6c = inttoptr i32 %v1_bf6c to i8*
  %v3_bf6c = load i8, i8* %v2_bf6c, align 1
  %v4_bf6c = zext i8 %v3_bf6c to i32
  store i32 %v4_bf6c, i32* %r2.global-to-local, align 4
  %v1_bf70 = add i32 %v0_bf6c, 13
  %v2_bf70 = inttoptr i32 %v1_bf70 to i8*
  %v3_bf70 = load i8, i8* %v2_bf70, align 1
  %v4_bf70 = zext i8 %v3_bf70 to i32
  %v0_bf74 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf74 = load i32, i32* %ip.global-to-local, align 4
  %v4_bf74 = mul i32 %v1_bf74, 256
  %v5_bf74 = or i32 %v4_bf74, %v0_bf74
  store i32 %v5_bf74, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bf6c, 16
  %v1_bf78 = zext i8 %tmp101 to i32
  %v3_bf7c = sdiv i32 %v5_bf74, 256
  store i32 %v3_bf7c, i32* %r1.global-to-local, align 4
  %v1_bf80 = or i32 %v1_bf78, 128
  store i32 %v1_bf80, i32* %r2.global-to-local, align 4
  %v1_bf84 = or i32 %v4_bf70, 16
  store i32 %v1_bf84, i32* %r3.global-to-local, align 4
  %v1_bf88 = trunc i32 %v3_bf7c to i8
  %v3_bf88 = add i32 %v0_bf6c, 3
  %v4_bf88 = inttoptr i32 %v3_bf88 to i8*
  store i8 %v1_bf88, i8* %v4_bf88, align 1
  %v0_bf8c = load i32, i32* %lr.global-to-local, align 4
  %v1_bf8c = load i32, i32* @r6, align 4
  %v2_bf8c = add i32 %v1_bf8c, 8
  %v3_bf8c = inttoptr i32 %v2_bf8c to i32*
  store i32 %v0_bf8c, i32* %v3_bf8c, align 4
  %v0_bf90 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf90 = trunc i32 %v0_bf90 to i8
  %v2_bf90 = load i32, i32* @r6, align 4
  %v3_bf90 = add i32 %v2_bf90, 12
  %v4_bf90 = inttoptr i32 %v3_bf90 to i8*
  store i8 %v1_bf90, i8* %v4_bf90, align 1
  %v0_bf94 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf94 = trunc i32 %v0_bf94 to i8
  %v2_bf94 = load i32, i32* @r6, align 4
  %v3_bf94 = add i32 %v2_bf94, 13
  %v4_bf94 = inttoptr i32 %v3_bf94 to i8*
  store i8 %v1_bf94, i8* %v4_bf94, align 1
  %v0_bf98 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf98 = trunc i32 %v0_bf98 to i8
  %v2_bf98 = load i32, i32* @r6, align 4
  %v3_bf98 = add i32 %v2_bf98, 2
  %v4_bf98 = inttoptr i32 %v3_bf98 to i8*
  store i8 %v1_bf98, i8* %v4_bf98, align 1
  %v0_bf9c = call i32 @function_e580()
  %v1_bf9c = trunc i32 %v0_bf9c to i8
  store i32 %v0_bf9c, i32* %r0.global-to-local, align 4
  store i32 %v1_ba80, i32* %lr.global-to-local, align 4
  %v0_bfa4 = load i32, i32* @r6, align 4
  %v1_bfa4 = add i32 %v0_bfa4, 13
  %v2_bfa4 = inttoptr i32 %v1_bfa4 to i8*
  %v3_bfa4 = load i8, i8* %v2_bfa4, align 1
  %v4_bfa4 = zext i8 %v3_bfa4 to i32
  store i32 %v1_bfa8, i32* %r2.global-to-local, align 4
  %v1_bfac = and i32 %v4_bfa4, 223
  %v5_bfb0 = or i32 %v1_bfac, %v4_bfb0
  store i32 %v5_bfb0, i32* %r3.global-to-local, align 4
  %v1_bfb4 = trunc i32 %v5_bfb0 to i8
  store i8 %v1_bfb4, i8* %v2_bfa4, align 1
  store i32 %v1_baa0, i32* %r1.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r6, align 4
  %v1_bfbc = add i32 %v0_bfbc, 13
  %v2_bfbc = inttoptr i32 %v1_bfbc to i8*
  %v3_bfbc = load i8, i8* %v2_bfbc, align 1
  %v4_bfbc = zext i8 %v3_bfbc to i32
  store i32 %v1_bfc0, i32* %r3.global-to-local, align 4
  %v1_bfc4 = and i32 %v4_bfbc, 239
  %v5_bfc8 = or i32 %v1_bfc4, %v4_bfc8
  store i32 %v5_bfc8, i32* %r2.global-to-local, align 4
  %v1_bfcc = trunc i32 %v5_bfc8 to i8
  store i8 %v1_bfcc, i8* %v2_bfbc, align 1
  store i32 %v1_bac0, i32* %ip.global-to-local, align 4
  %v0_bfd4 = load i32, i32* @r6, align 4
  %v1_bfd4 = add i32 %v0_bfd4, 13
  %v2_bfd4 = inttoptr i32 %v1_bfd4 to i8*
  %v3_bfd4 = load i8, i8* %v2_bfd4, align 1
  %v4_bfd4 = zext i8 %v3_bfd4 to i32
  store i32 %v1_bfd8, i32* %r2.global-to-local, align 4
  %v1_bfdc = and i32 %v4_bfd4, 247
  %v5_bfe0 = or i32 %v1_bfdc, %v4_bfe0
  store i32 %v5_bfe0, i32* %r3.global-to-local, align 4
  %v1_bfe4 = trunc i32 %v5_bfe0 to i8
  store i8 %v1_bfe4, i8* %v2_bfd4, align 1
  %v0_bfec = load i32, i32* @r6, align 4
  %v1_bfec = add i32 %v0_bfec, 13
  %v2_bfec = inttoptr i32 %v1_bfec to i8*
  %v3_bfec = load i8, i8* %v2_bfec, align 1
  %v4_bfec = zext i8 %v3_bfec to i32
  store i32 %v1_bff0, i32* %r3.global-to-local, align 4
  %v1_bff4 = and i32 %v4_bfec, 251
  %v5_bff8 = or i32 %v1_bff4, %v4_bff8
  store i32 %v5_bff8, i32* %r2.global-to-local, align 4
  %v1_bffc = trunc i32 %v5_bff8 to i8
  store i8 %v1_bffc, i8* %v2_bfec, align 1
  store i32 %v1_bb00, i32* %r1.global-to-local, align 4
  %v0_c004 = load i32, i32* @r6, align 4
  %v1_c004 = add i32 %v0_c004, 13
  %v2_c004 = inttoptr i32 %v1_c004 to i8*
  %v3_c004 = load i8, i8* %v2_c004, align 1
  %v4_c004 = zext i8 %v3_c004 to i32
  store i32 %v1_c008, i32* %r2.global-to-local, align 4
  %v1_c00c = and i32 %v4_c004, 253
  %v4_c010 = or i32 %v1_c00c, %v3_c010
  store i32 %v4_c010, i32* %r3.global-to-local, align 4
  %v1_c014 = trunc i32 %v4_c010 to i8
  store i8 %v1_c014, i8* %v2_c004, align 1
  %v0_c018 = load i32, i32* @r6, align 4
  %v1_c018 = add i32 %v0_c018, 13
  %v2_c018 = inttoptr i32 %v1_c018 to i8*
  %v3_c018 = load i8, i8* %v2_c018, align 1
  %v4_c018 = zext i8 %v3_c018 to i32
  %v0_c01c = load i32, i32* @r8, align 4
  %v1_c01c = urem i32 %v0_c01c, 2
  %v1_c020 = and i32 %v4_c018, 254
  store i32 %v1_c020, i32* %r2.global-to-local, align 4
  %v4_c02427 = udiv i32 %v0_bf9c, 256
  %v2_c028 = or i32 %v1_c020, %v1_c01c
  store i32 %v2_c028, i32* %r3.global-to-local, align 4
  %v1_c02c = trunc i32 %v4_c02427 to i8
  %v3_c02c = add i32 %v0_c018, 15
  %v4_c02c = inttoptr i32 %v3_c02c to i8*
  store i8 %v1_c02c, i8* %v4_c02c, align 1
  %v3_c030 = load i32, i32* @r6, align 4
  %v4_c030 = add i32 %v3_c030, 14
  %v5_c030 = inttoptr i32 %v4_c030 to i8*
  store i8 %v1_bf9c, i8* %v5_c030, align 1
  %v0_c034 = load i32, i32* %r3.global-to-local, align 4
  %v1_c034 = trunc i32 %v0_c034 to i8
  %v2_c034 = load i32, i32* @r6, align 4
  %v3_c034 = add i32 %v2_c034, 13
  %v4_c034 = inttoptr i32 %v3_c034 to i8*
  store i8 %v1_c034, i8* %v4_c034, align 1
  %v0_c038 = load i32, i32* @r4, align 4
  %v1_c038 = add i32 %v0_c038, 40
  store i32 %v1_c038, i32* %r0.global-to-local, align 4
  %v0_c03c = load i32, i32* @sb, align 4
  store i32 %v0_c03c, i32* @r1, align 4
  %v1_c040 = inttoptr i32 %v1_c038 to i8*
  %v2_c040 = call i32 @function_e700(i8* %v1_c040)
  store i32 %v2_c040, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c044

dec_label_pc_c044:                                ; preds = %dec_label_pc_bbe4, %bb81
  %v3_c044 = load i32, i32* %stack_var_-40, align 4
  %v1_c048 = add i32 %v3_c044, 1
  store i32 %v1_c048, i32* %r3.global-to-local, align 4
  %v1_c04c = load i32, i32* @fp, align 4
  %v9_c04c = icmp eq i32 %v1_c048, %v1_c04c
  store i1 %v9_c04c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c048, i32* %stack_var_-40, align 4
  %v5_c054 = icmp slt i32 %v1_c048, %v1_c04c
  br i1 %v5_c054, label %dec_label_pc_bbd4, label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c044, %.thread18
  %v0_c06012 = phi i32 [ %v0_bba8, %.thread18 ], [ %v1_c04c, %dec_label_pc_c044 ]
  %v0_c058 = load i32, i32* @sb, align 4
  %v1_c058 = add i32 %v0_c058, 40
  store i32 %v1_c058, i32* @sl, align 4
  %v1_c05c = add i32 %v0_c058, 20
  store i32 %v1_c05c, i32* @r7, align 4
  %v2_c0ac = icmp eq i32 %v1_bb58, 0
  %v6_c08c = inttoptr i32 %v2_b9c8 to i32*
  %v3_c094 = icmp eq i32 %v3_bbb0, 65535
  br label %dec_label_pc_c060

dec_label_pc_c060:                                ; preds = %dec_label_pc_c0bc, %dec_label_pc_c058
  %v0_c060 = phi i32 [ %v1_c19c, %dec_label_pc_c0bc ], [ %v0_c06012, %dec_label_pc_c058 ]
  %v2_c060 = icmp eq i32 %v0_c060, 0
  store i1 %v2_c060, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_c060, 1
  br label %dec_label_pc_c068

dec_label_pc_c068:                                ; preds = %dec_label_pc_c068, %dec_label_pc_c060
  br i1 %tmp82, label %dec_label_pc_c068, label %dec_label_pc_c06c

dec_label_pc_c06c:                                ; preds = %dec_label_pc_c068
  %v0_c06c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_c06c, 256
  %v1_c074 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp84 = udiv i32 %v0_c06c, 256
  %v4_c078 = urem i32 %tmp84, 256
  %v5_c078 = or i32 %v4_c078, %v1_c074
  store i32 %v5_c078, i32* @r8, align 4
  store i32 %v2_b9c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v7_c08c = load i32, i32* %v6_c08c, align 4
  store i32 %v7_c08c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c094, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c0a0 = add i32 %v7_c08c, 20
  store i32 %v1_c0a0, i32* @r5, align 4
  br i1 %v3_c094, label %dec_label_pc_c1c8, label %dec_label_pc_c0a8

dec_label_pc_c0a8:                                ; preds = %dec_label_pc_c1a8, %dec_label_pc_c06c
  %v0_c0b0 = phi i32 [ %v7_c1b4, %dec_label_pc_c1a8 ], [ %v7_c08c, %dec_label_pc_c06c ]
  store i32 %v1_bb58, i32* %lr.global-to-local, align 4
  store i1 %v2_c0ac, i1* %cpsr_z.global-to-local, align 1
  %v1_c0b0 = add i32 %v0_c0b0, 40
  store i32 %v1_c0b0, i32* %r0.global-to-local, align 4
  %v0_c0b4 = load i32, i32* @sb, align 4
  store i32 %v0_c0b4, i32* @r1, align 4
  br i1 %v2_c0ac, label %dec_label_pc_c0bc, label %dec_label_pc_c1ec

dec_label_pc_c0bc:                                ; preds = %dec_label_pc_c0a8, %dec_label_pc_c1c8, %dec_label_pc_c1ec
  %v2_c0bc = phi i32 [ %v0_c0b0, %dec_label_pc_c0a8 ], [ %v0_c1e0, %dec_label_pc_c1c8 ], [ %v2_c0bc.pre, %dec_label_pc_c1ec ]
  %v0_c0bc = load i32, i32* @r6, align 4
  %v1_c0bc = trunc i32 %v0_c0bc to i8
  %v3_c0bc = add i32 %v2_c0bc, 10
  %v4_c0bc = inttoptr i32 %v3_c0bc to i8*
  store i8 %v1_c0bc, i8* %v4_c0bc, align 1
  %v0_c0c0 = load i32, i32* @r6, align 4
  %v1_c0c0 = trunc i32 %v0_c0c0 to i8
  %v2_c0c0 = load i32, i32* @r4, align 4
  %v3_c0c0 = add i32 %v2_c0c0, 11
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c0c8 = load i32, i32* @r4, align 4
  store i32 %v0_c0c8, i32* @r0, align 4
  %v2_c0cc = call i32 @function_d0b8(i32 %v0_c0c8, i32 20)
  %v3_c0cc = trunc i32 %v2_c0cc to i8
  store i32 %v2_c0cc, i32* %r0.global-to-local, align 4
  %v3_c0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b9b8, i32* %r2.global-to-local, align 4
  %v3_c0d8 = mul i32 %v3_c0d0, 16
  %v2_c0dc = add i32 %v3_c0d8, %v2_b9b8
  store i32 %v2_c0dc, i32* %r1.global-to-local, align 4
  %v1_c0e0 = add i32 %v2_c0dc, 4
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i32*
  %v3_c0e0 = load i32, i32* %v2_c0e0, align 4
  %v3_c0e4 = mul i32 %v3_c0e0, 65536
  store i32 %v3_c0e4, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_c0e0, 256
  %v1_c0ec = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_c0e0, 256
  %v4_c0f0 = urem i32 %tmp86, 256
  %v5_c0f0 = or i32 %v4_c0f0, %v1_c0ec
  store i32 %v5_c0f0, i32* %r2.global-to-local, align 4
  %v1_c0f4 = add i32 %v3_c0e0, 1
  store i32 %v1_c0f4, i32* %r3.global-to-local, align 4
  store i32 %v1_c0f4, i32* %v2_c0e0, align 4
  %v0_c0fc = load i32, i32* %r2.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r5, align 4
  %v2_c0fc = add i32 %v1_c0fc, 4
  %v3_c0fc = inttoptr i32 %v2_c0fc to i32*
  store i32 %v0_c0fc, i32* %v3_c0fc, align 4
  %v0_c100 = load i32, i32* %r1.global-to-local, align 4
  %v1_c100 = add i32 %v0_c100, 8
  %v2_c100 = inttoptr i32 %v1_c100 to i32*
  %v3_c100 = load i32, i32* %v2_c100, align 4
  %tmp87 = mul i32 %v3_c100, 256
  %v1_c10c = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_c100, 256
  %v4_c110 = urem i32 %tmp88, 256
  %v5_c110 = or i32 %v4_c110, %v1_c10c
  store i32 %v5_c110, i32* %r2.global-to-local, align 4
  %v4_c11428 = udiv i32 %v2_c0cc, 256
  %v1_c118 = trunc i32 %v4_c11428 to i8
  %v2_c118 = load i32, i32* @r4, align 4
  %v3_c118 = add i32 %v2_c118, 11
  %v4_c118 = inttoptr i32 %v3_c118 to i8*
  store i8 %v1_c118, i8* %v4_c118, align 1
  %v3_c11c = load i32, i32* @r4, align 4
  %v4_c11c = add i32 %v3_c11c, 10
  %v5_c11c = inttoptr i32 %v4_c11c to i8*
  store i8 %v3_c0cc, i8* %v5_c11c, align 1
  %v0_c120 = load i32, i32* %r2.global-to-local, align 4
  %v1_c120 = load i32, i32* @r5, align 4
  %v2_c120 = add i32 %v1_c120, 8
  %v3_c120 = inttoptr i32 %v2_c120 to i32*
  store i32 %v0_c120, i32* %v3_c120, align 4
  %v0_c124 = load i32, i32* @r5, align 4
  store i32 %v0_c124, i32* @r1, align 4
  %v0_c128 = load i32, i32* @r8, align 4
  store i32 %v0_c128, i32* %r2.global-to-local, align 4
  %v0_c12c = load i32, i32* @r7, align 4
  store i32 %v0_c12c, i32* %r3.global-to-local, align 4
  %v0_c130 = load i32, i32* @r4, align 4
  store i32 %v0_c130, i32* %r0.global-to-local, align 4
  %v0_c134 = load i32, i32* @r6, align 4
  %v1_c134 = trunc i32 %v0_c134 to i8
  %v3_c134 = add i32 %v0_c124, 16
  %v4_c134 = inttoptr i32 %v3_c134 to i8*
  store i8 %v1_c134, i8* %v4_c134, align 1
  %v0_c138 = load i32, i32* @r6, align 4
  %v1_c138 = trunc i32 %v0_c138 to i8
  %v2_c138 = load i32, i32* @r5, align 4
  %v3_c138 = add i32 %v2_c138, 17
  %v4_c138 = inttoptr i32 %v3_c138 to i8*
  store i8 %v1_c138, i8* %v4_c138, align 1
  %v4_c13c = call i32 @function_d114(i32 %v0_c130, i32 %v0_c124, i32 %v0_c128, i32 %v0_c12c)
  %v5_c13c = trunc i32 %v4_c13c to i8
  store i32 %v4_c13c, i32* %r0.global-to-local, align 4
  %v4_c14029 = udiv i32 %v4_c13c, 256
  %v1_c144 = trunc i32 %v4_c14029 to i8
  %v2_c144 = load i32, i32* @r5, align 4
  %v3_c144 = add i32 %v2_c144, 17
  %v4_c144 = inttoptr i32 %v3_c144 to i8*
  store i8 %v1_c144, i8* %v4_c144, align 1
  %v3_c148 = load i32, i32* @r5, align 4
  %v4_c148 = add i32 %v3_c148, 16
  %v5_c148 = inttoptr i32 %v4_c148 to i8*
  store i8 %v5_c13c, i8* %v5_c148, align 1
  %v3_c14c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c14c, i32* %r3.global-to-local, align 4
  %v0_c150 = load i32, i32* @r4, align 4
  %v1_c150 = add i32 %v0_c150, 20
  %v2_c150 = inttoptr i32 %v1_c150 to i32*
  %v3_c150 = load i32, i32* %v2_c150, align 4
  %v5_c158 = mul i32 %v3_c14c, 24
  %v3_c160 = udiv i32 %v3_c150, 65536
  store i32 %v3_c160, i32* %r2.global-to-local, align 4
  %v2_c164 = add i32 %v5_c158, %arg2
  store i32 %v2_c164, i32* %ip.global-to-local, align 4
  %v3_c1684 = udiv i32 %v3_c150, 16777216
  %v1_c16c = trunc i32 %v3_c1684 to i8
  %v3_c16c = add i32 %v2_c164, 3
  %v4_c16c = inttoptr i32 %v3_c16c to i8*
  store i8 %v1_c16c, i8* %v4_c16c, align 1
  %v0_c170 = load i32, i32* %r2.global-to-local, align 4
  %v1_c170 = trunc i32 %v0_c170 to i8
  %v2_c170 = load i32, i32* %ip.global-to-local, align 4
  %v3_c170 = add i32 %v2_c170, 2
  %v4_c170 = inttoptr i32 %v3_c170 to i8*
  store i8 %v1_c170, i8* %v4_c170, align 1
  %v0_c174 = load i32, i32* @r4, align 4
  store i32 %v0_c174, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v0_c180 = load i32, i32* @sl, align 4
  store i32 %v0_c180, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c188 = load i32, i32* %ip.global-to-local, align 4
  %v6_c190 = inttoptr i32 %v0_c174 to i32*
  %v7_c190 = call i32 @function_11980(i32 %v3_bb68, i32* %v6_c190, i32 %v0_c180, i32 16384, i32 %v0_c188, i32 16)
  %v3_c194 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c194, i32* %r3.global-to-local, align 4
  %v1_c198 = add i32 %v3_c194, 1
  store i32 %v1_c198, i32* %r0.global-to-local, align 4
  %v1_c19c = load i32, i32* @fp, align 4
  %v9_c19c = icmp eq i32 %v1_c198, %v1_c19c
  store i1 %v9_c19c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c198, i32* %stack_var_-40, align 4
  %v6_c1a4 = icmp slt i32 %v1_c198, %v1_c19c
  br i1 %v6_c1a4, label %dec_label_pc_c1a8, label %dec_label_pc_c060

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c0bc
  store i32 %v2_b9c8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v4_c1b4 = mul i32 %v1_c198, 4
  %v5_c1b4 = add i32 %v4_c1b4, %v2_b9c8
  %v6_c1b4 = inttoptr i32 %v5_c1b4 to i32*
  %v7_c1b4 = load i32, i32* %v6_c1b4, align 4
  store i32 %v7_c1b4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c094, i1* %cpsr_z.global-to-local, align 1
  %v1_c1c0 = add i32 %v7_c1b4, 20
  store i32 %v1_c1c0, i32* @r5, align 4
  br i1 %v3_c094, label %dec_label_pc_c1c8, label %dec_label_pc_c0a8

dec_label_pc_c1c8:                                ; preds = %dec_label_pc_c1a8, %dec_label_pc_c06c
  %v0_c1c8 = call i32 @function_e580()
  %v1_c1c8 = trunc i32 %v0_c1c8 to i8
  store i32 %v1_bb58, i32* %lr.global-to-local, align 4
  %v4_c1d0 = sdiv i32 %v0_c1c8, 256
  store i32 %v4_c1d0, i32* %r3.global-to-local, align 4
  store i1 %v2_c0ac, i1* %cpsr_z.global-to-local, align 1
  %v3_c1d8 = load i32, i32* @r4, align 4
  %v4_c1d8 = add i32 %v3_c1d8, 4
  %v5_c1d8 = inttoptr i32 %v4_c1d8 to i8*
  store i8 %v1_c1c8, i8* %v5_c1d8, align 1
  %v0_c1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c1dc = trunc i32 %v0_c1dc to i8
  %v2_c1dc = load i32, i32* @r4, align 4
  %v3_c1dc = add i32 %v2_c1dc, 5
  %v4_c1dc = inttoptr i32 %v3_c1dc to i8*
  store i8 %v1_c1dc, i8* %v4_c1dc, align 1
  %v0_c1e0 = load i32, i32* @r4, align 4
  %v1_c1e0 = add i32 %v0_c1e0, 40
  store i32 %v1_c1e0, i32* %r0.global-to-local, align 4
  %v0_c1e4 = load i32, i32* @sb, align 4
  store i32 %v0_c1e4, i32* @r1, align 4
  %v0_c1e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c1e8, label %dec_label_pc_c0bc, label %dec_label_pc_c1ec

dec_label_pc_c1ec:                                ; preds = %dec_label_pc_c0a8, %dec_label_pc_c1c8
  %v0_c1ec = phi i32 [ %v1_c0b0, %dec_label_pc_c0a8 ], [ %v1_c1e0, %dec_label_pc_c1c8 ]
  %v1_c1ec = inttoptr i32 %v0_c1ec to i8*
  %v2_c1ec = call i32 @function_e700(i8* %v1_c1ec)
  store i32 %v2_c1ec, i32* %r0.global-to-local, align 4
  %v2_c0bc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c0bc

; uselistorder directives
  uselistorder i32 %v0_c1e0, { 1, 0 }
  uselistorder i32 %v7_c1b4, { 1, 2, 0 }
  uselistorder i32 %v1_c19c, { 1, 2, 0 }
  uselistorder i32 %v1_c198, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c13c, { 0, 2, 1 }
  uselistorder i32 %v0_c124, { 1, 0, 2 }
  uselistorder i32 %v3_c100, { 1, 0 }
  uselistorder i32 %v3_c0e0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c0cc, { 0, 2, 1 }
  uselistorder i32 %v0_c0b0, { 1, 0 }
  uselistorder i32 %v0_c06c, { 1, 0 }
  uselistorder i32 %v0_c060, { 1, 0 }
  uselistorder i1 %v3_c094, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c048, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bf9c, { 0, 2, 1 }
  uselistorder i32 %v3_bf7c, { 1, 0 }
  uselistorder i32 %v0_bf50, { 1, 0, 2 }
  uselistorder i32 %v3_bf44, { 1, 0 }
  uselistorder i32 %v3_bed8, { 1, 0 }
  uselistorder i32 %v0_becc, { 1, 0 }
  uselistorder i32 %v3_be54, { 1, 0 }
  uselistorder i32 %v3_be24, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bdf8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bdf0, { 1, 0 }
  uselistorder i32 %v4_bdd8, { 1, 0 }
  uselistorder i32 %v0_bdd4, { 0, 2, 1 }
  uselistorder i1 %v7_bd44, { 1, 0 }
  uselistorder i32 %v7_bd3c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bd88, { 1, 0 }
  uselistorder i1 %v9_bd6c, { 1, 0 }
  uselistorder i32 %v4_bd80, { 1, 0 }
  uselistorder i32 %v4_bd7c, { 1, 0 }
  uselistorder i32 %v8_bc90, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bc7c, { 1, 0 }
  uselistorder i32 %v0_bc6c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_bbf4, { 1, 0 }
  uselistorder i32 %v3_bbf0, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c008, { 1, 0 }
  uselistorder i32 %v1_bff0, { 1, 0 }
  uselistorder i32 %v1_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc0, { 1, 0 }
  uselistorder i32 %v1_bfa8, { 1, 0 }
  uselistorder i32 %v5_bd84, { 1, 0 }
  uselistorder i32 %v3_bcd893, { 1, 0 }
  uselistorder i1 %v2_bd9c, { 1, 0 }
  uselistorder i32 %v1_bd98, { 1, 0 }
  uselistorder i32 %v4_bd94, { 2, 0, 1 }
  uselistorder i32 %v4_bd78, { 1, 0 }
  uselistorder i1 %v3_bcc0, { 1, 0 }
  uselistorder i32 %v8_bbbc, { 2, 1, 0 }
  uselistorder i32 %v8_bbb8, { 1, 2, 0 }
  uselistorder i32 %v3_bbb0, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_bbac, { 0, 1, 3, 2 }
  uselistorder i1 %v7_bba0, { 1, 0 }
  uselistorder i1 %v7_bb70, { 1, 0 }
  uselistorder i32 %v3_bb6c, { 2, 0, 1 }
  uselistorder i32 %v3_bb68, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_bb58, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bb00, { 1, 0 }
  uselistorder i32 %v1_bac0, { 1, 0 }
  uselistorder i32 %v1_baa0, { 1, 0 }
  uselistorder i32 %v1_ba80, { 1, 0 }
  uselistorder i32 %v1_ba48, { 1, 0 }
  uselistorder i32 %v2_b9c8, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b9b8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b99c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r2.global-to-local, { 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r1.global-to-local, { 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 37, 36, 38, 40, 39, 0 }
  uselistorder i32* %r0.global-to-local, { 53, 52, 54, 55, 57, 56, 61, 58, 59, 62, 60, 8, 1, 2, 3, 4, 5, 6, 7, 12, 9, 10, 11, 13, 15, 14, 17, 16, 20, 18, 21, 22, 19, 23, 25, 24, 26, 27, 29, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %lr.global-to-local, { 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32* %ip.global-to-local, { 31, 32, 33, 34, 35, 36, 37, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i1* %cpsr_z.global-to-local, { 19, 20, 21, 22, 23, 24, 25, 26, 1, 4, 2, 3, 5, 6, 7, 8, 10, 0, 11, 12, 9, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_c1ec, { 1, 0 }
  uselistorder label %dec_label_pc_c0bc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c044, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bdcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bd04, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_bcb4, { 1, 0 }
}

define i32 @function_c1f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c1f8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_c1fc = urem i32 %arg1, 256
  store i32 %v1_c1fc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c214 = urem i32 %arg3, 256
  store i32 %v1_c214, i32* @r4, align 4
  %v2_c218 = call i32 @function_11cd0(i32 %v1_c1fc, i32 4)
  %v0_c21c = load i32, i32* @r5, align 4
  store i32 %v0_c21c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c22c = load i32, i32* @r4, align 4
  %v5_c230 = inttoptr i32 %v0_c21c to i32*
  %v6_c230 = call i32 @function_85e0(i32 %v0_c22c, i32* %v5_c230, i32 2, i32 0)
  %v1_c23c = urem i32 %v6_c230, 256
  store i32 %v1_c23c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c248 = load i32, i32* @r5, align 4
  store i32 %v0_c248, i32* %r1.global-to-local, align 4
  %v0_c24c = load i32, i32* @r4, align 4
  %v5_c250 = trunc i32 %v6_c230 to i8
  %v6_c254 = inttoptr i32 %v0_c248 to i32*
  %v7_c254 = call i32 @function_85e0(i32 %v0_c24c, i32* %v6_c254, i32 3, i32 65535)
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c254, i32* @r8, align 4
  %v0_c268 = load i32, i32* @r4, align 4
  %v4_c26c = inttoptr i32 %v0_c258 to i32*
  %v5_c26c = call i32 @function_85e0(i32 %v0_c268, i32* %v4_c26c, i32 4, i32 64)
  %v1_c274 = urem i32 %v5_c26c, 256
  store i32 %v1_c274, i32* %ip.global-to-local, align 4
  %v0_c278 = load i32, i32* @r5, align 4
  store i32 %v0_c278, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  %v6_c28c = inttoptr i32 %v0_c278 to i32*
  %v7_c28c = call i32 @function_85e0(i32 %v0_c284, i32* %v6_c28c, i32 5, i32 0)
  %v1_c298 = urem i32 %v7_c28c, 256
  store i32 %v1_c298, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c2a4 = load i32, i32* @r5, align 4
  store i32 %v0_c2a4, i32* %r1.global-to-local, align 4
  %v0_c2a8 = load i32, i32* @r4, align 4
  %v5_c2b0 = inttoptr i32 %v0_c2a4 to i32*
  %v6_c2b0 = call i32 @function_85e0(i32 %v0_c2a8, i32* %v5_c2b0, i32 6, i32 65535)
  %v0_c2b8 = load i32, i32* @r5, align 4
  store i32 %v0_c2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c2b0, i32* @r7, align 4
  %v0_c2c8 = load i32, i32* @r4, align 4
  %v4_c2cc = inttoptr i32 %v0_c2b8 to i32*
  %v5_c2cc = call i32 @function_85e0(i32 %v0_c2c8, i32* %v4_c2cc, i32 7, i32 65535)
  %v0_c2d4 = load i32, i32* @r5, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c2cc, i32* @r6, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v5_c2e8 = call i32 @function_85e0(i32 %v0_c2e4, i32* %v4_c2e8, i32 17, i32 65535)
  %v0_c2f4 = load i32, i32* @r5, align 4
  store i32 %v0_c2f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c300 = load i32, i32* @r4, align 4
  %v5_c304 = inttoptr i32 %v0_c2f4 to i32*
  %v6_c304 = call i32 @function_85e0(i32 %v0_c300, i32* %v5_c304, i32 18, i32 65535)
  %v0_c308 = load i32, i32* @r5, align 4
  store i32 %v0_c308, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  %v5_c31c = inttoptr i32 %v0_c308 to i32*
  %v6_c31c = call i32 @function_85e0(i32 %v0_c318, i32* %v5_c31c, i32 11, i32 0)
  %v0_c320 = load i32, i32* @r5, align 4
  store i32 %v0_c320, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c330 = load i32, i32* @r4, align 4
  %v5_c334 = inttoptr i32 %v0_c320 to i32*
  %v6_c334 = call i32 @function_85e0(i32 %v0_c330, i32* %v5_c334, i32 12, i32 1)
  %v0_c338 = load i32, i32* @r5, align 4
  store i32 %v0_c338, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c348 = load i32, i32* @r4, align 4
  %v5_c34c = inttoptr i32 %v0_c338 to i32*
  %v6_c34c = call i32 @function_85e0(i32 %v0_c348, i32* %v5_c34c, i32 13, i32 0)
  %v0_c350 = load i32, i32* @r5, align 4
  store i32 %v0_c350, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c360 = load i32, i32* @r4, align 4
  %v5_c364 = inttoptr i32 %v0_c350 to i32*
  %v6_c364 = call i32 @function_85e0(i32 %v0_c360, i32* %v5_c364, i32 14, i32 0)
  %v0_c368 = load i32, i32* @r5, align 4
  store i32 %v0_c368, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c378 = load i32, i32* @r4, align 4
  %v5_c37c = inttoptr i32 %v0_c368 to i32*
  %v6_c37c = call i32 @function_85e0(i32 %v0_c378, i32* %v5_c37c, i32 15, i32 0)
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c390 = load i32, i32* @r4, align 4
  %v5_c394 = inttoptr i32 %v0_c380 to i32*
  %v6_c394 = call i32 @function_85e0(i32 %v0_c390, i32* %v5_c394, i32 16, i32 0)
  %v0_c398 = load i32, i32* @r5, align 4
  store i32 %v0_c398, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c3a8 = load i32, i32* @r4, align 4
  %v5_c3ac = inttoptr i32 %v0_c398 to i32*
  %v6_c3ac = call i32 @function_85e0(i32 %v0_c3a8, i32* %v5_c3ac, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r5, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  %v0_c3c0 = load i32, i32* @r4, align 4
  %v4_c3c4 = inttoptr i32 %v0_c3bc to i32*
  %v5_c3c4 = call i32 @function_85e0(i32 %v0_c3c0, i32* %v4_c3c4, i32 1, i32 1)
  %v2_c3d0 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_c3d0, i32* %r3.global-to-local, align 4
  %v1_c3d4 = urem i32 %v5_c3c4, 256
  store i32 %v1_c3d4, i32* %ip.global-to-local, align 4
  %v0_c3d8 = load i32, i32* @r5, align 4
  store i32 %v0_c3d8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c3e0 = load i32, i32* @r4, align 4
  %v5_c3e8 = inttoptr i32 %v0_c3d8 to i32*
  %v6_c3e8 = call i32 @function_8574(i32 %v0_c3e0, i32* %v5_c3e8, i32 25, i32 %v2_c3d0, i32 %v1_c3d4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c3fc = call i32 @function_119e4(i32 2, i32 3, i32 6)
  %v7_c400 = icmp eq i32 %v3_c3fc, -1
  store i1 %v7_c400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c400, label %dec_label_pc_c838, label %dec_label_pc_c40c

dec_label_pc_c40c:                                ; preds = %dec_label_pc_c1f8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c414 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c414, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c428 = call i32 @function_119b4(i32 %v3_c3fc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c42c = icmp eq i32 %v6_c428, -1
  store i1 %v7_c42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c42c, label %dec_label_pc_c830, label %dec_label_pc_c434

dec_label_pc_c434:                                ; preds = %dec_label_pc_c40c
  %v0_c434 = load i32, i32* @r8, align 4
  %v0_c438 = load i32, i32* @r7, align 4
  %v0_c43c = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c444 = urem i32 %v0_c434, 65536
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  %v3_c448 = urem i32 %v0_c438, 65536
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v3_c44c = urem i32 %v0_c43c, 65536
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v0_c450 = load i32, i32* @fp, align 4
  %v2_c450 = icmp eq i32 %v0_c450, 0
  store i1 %v2_c450, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c450, 1
  br i1 %tmp75, label %dec_label_pc_c950, label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %dec_label_pc_c434
  %v1_c470 = add i32 %v6_c3ac, 40
  %tmp76 = mul i32 %v1_c470, 256
  %v1_c484 = urem i32 %v0_c438, 256
  %v1_c488 = and i32 %tmp76, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v3_c48c = mul nuw nsw i32 %v1_c484, 256
  %v1_c494 = urem i32 %v0_c43c, 256
  %tmp77 = udiv i32 %v0_c43c, 256
  %v3_c498 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c470, 256
  %v4_c49c = urem i32 %tmp78, 256
  %v5_c49c = or i32 %v4_c49c, %v1_c488
  store i32 %v5_c49c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c438, 256
  %v4_c4a0 = urem i32 %tmp79, 256
  %v5_c4a0 = or i32 %v4_c4a0, %v3_c48c
  store i32 %v5_c4a0, i32* @sl, align 4
  %v4_c4a4 = mul nuw nsw i32 %v1_c494, 256
  %v5_c4a4 = or i32 %v4_c4a4, %v3_c498
  store i32 %v5_c4a4, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c434, 256
  %v3_c4b4 = urem i32 %tmp80, 256
  %v1_c4b8 = urem i32 %v0_c434, 256
  %tmp81 = mul i32 %v5_c2e8, 256
  %v1_c4c0 = and i32 %tmp81, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v1_c4c4 = urem i32 %v6_c31c, 2
  %v1_c4c8 = urem i32 %v6_c334, 2
  %v1_c4cc = urem i32 %v6_c34c, 2
  %tmp82 = udiv i32 %v5_c2e8, 256
  %v4_c4d0 = urem i32 %tmp82, 256
  %v5_c4d0 = or i32 %v4_c4d0, %v1_c4c0
  store i32 %v5_c4d0, i32* @r8, align 4
  %v1_c4f0 = urem i32 %v6_c364, 2
  %v1_c4f4 = urem i32 %v6_c37c, 2
  %v1_c4f8 = urem i32 %v6_c394, 2
  %v1_c4fc = urem i32 %v6_c34c, 256
  %v4_c500 = mul nuw nsw i32 %v1_c4b8, 256
  %v5_c500 = or i32 %v4_c500, %v3_c4b4
  store i32 %v5_c500, i32* @r5, align 4
  %v3_c51425 = udiv i32 %v1_c488, 256
  store i32 %v3_c51425, i32* %r3.global-to-local, align 4
  store i32 %v1_c4b8, i32* %ip.global-to-local, align 4
  store i32 %v1_c484, i32* %r1.global-to-local, align 4
  store i32 %v1_c494, i32* %r2.global-to-local, align 4
  %v5_c530 = trunc i32 %v0_c438 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_c26c, 16777216
  %v4_c58c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c434, 16777216
  %v4_c598 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c5ac = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c488, 65536
  %v4_c5b0 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c4c4
  %v4_c600 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c4c8
  %v4_c614 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c4cc
  %v4_c628 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c4f0
  %v4_c63c = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c4f4
  %v3_c650 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c43c, 16777216
  %v7_c680 = sdiv i32 %sext12, 16777216
  %v1_c594 = trunc i32 %v4_c58c to i8
  %extract.t = trunc i32 %v4_c598 to i8
  %v3_c680 = sext i8 %v5_c530 to i32
  %v2_c6a4 = icmp eq i32 %v1_c4fc, 0
  br label %dec_label_pc_c53c

dec_label_pc_c53c:                                ; preds = %bb89, %dec_label_pc_c468
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c548 = call i32 @function_11cd0(i32 1510, i32 1)
  store i32 %v2_c218, i32* %ip.global-to-local, align 4
  %v2_c554 = load i32, i32* @r4, align 4
  %v5_c554 = mul i32 %v2_c554, 4
  %v6_c554 = add i32 %v5_c554, %v2_c218
  %v7_c554 = inttoptr i32 %v6_c554 to i32*
  store i32 %v2_c548, i32* %v7_c554, align 4
  %v3_c558 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c558, i32* %r3.global-to-local, align 4
  %v0_c55c = load i32, i32* %ip.global-to-local, align 4
  %v4_c55c = mul i32 %v3_c558, 4
  %v5_c55c = add i32 %v0_c55c, %v4_c55c
  %v6_c55c = inttoptr i32 %v5_c55c to i32*
  %v7_c55c = load i32, i32* %v6_c55c, align 4
  store i32 %v7_c55c, i32* @r7, align 4
  %v1_c560 = inttoptr i32 %v7_c55c to i8*
  %v2_c560 = load i8, i8* %v1_c560, align 1
  %tmp97 = urem i8 %v2_c560, 16
  %v1_c564 = zext i8 %tmp97 to i32
  %v1_c568 = or i32 %v1_c564, 64
  store i32 %v1_c568, i32* %r2.global-to-local, align 4
  %v1_c56c = trunc i32 %v1_c568 to i8
  store i8 %v1_c56c, i8* %v1_c560, align 1
  %v0_c570 = load i32, i32* @r7, align 4
  %v1_c570 = inttoptr i32 %v0_c570 to i8*
  %v2_c570 = load i8, i8* %v1_c570, align 1
  %v1_c574 = and i8 %v2_c570, -16
  %v1_c578 = or i8 %v1_c574, 5
  store i32 %v1_c298, i32* %r1.global-to-local, align 4
  store i8 %v1_c578, i8* %v1_c570, align 1
  %v2_c588 = load i32, i32* @r7, align 4
  %v3_c588 = add i32 %v2_c588, 1
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 %v5_c250, i8* %v4_c588, align 1
  store i32 %v4_c58c, i32* %r3.global-to-local, align 4
  %v0_c590 = load i32, i32* %r1.global-to-local, align 4
  %v2_c590 = icmp eq i32 %v0_c590, 0
  store i1 %v2_c590, i1* %cpsr_z.global-to-local, align 1
  %v2_c594 = load i32, i32* @r7, align 4
  %v3_c594 = add i32 %v2_c594, 8
  %v4_c594 = inttoptr i32 %v3_c594 to i8*
  store i8 %v1_c594, i8* %v4_c594, align 1
  store i32 %v4_c598, i32* %r2.global-to-local, align 4
  %v0_c59c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c59c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c53c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c5a0 = load i32, i32* @r7, align 4
  %v4_c5a0 = add i32 %v3_c5a0, 6
  %v5_c5a0 = inttoptr i32 %v4_c5a0 to i8*
  store i8 64, i8* %v5_c5a0, align 1
  %v0_c5a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c5a8.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c53c, %bb
  %v0_c5a8.off0 = phi i8 [ %extract.t, %dec_label_pc_c53c ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c5a8 = load i32, i32* @r7, align 4
  %v3_c5a8 = add i32 %v2_c5a8, 5
  %v4_c5a8 = inttoptr i32 %v3_c5a8 to i8*
  store i8 %v0_c5a8.off0, i8* %v4_c5a8, align 1
  store i32 %v4_c5ac, i32* %ip.global-to-local, align 4
  store i32 %v4_c5b0, i32* %r1.global-to-local, align 4
  %v0_c5b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5b4, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c5b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5b8 = trunc i32 %v0_c5b8 to i8
  %v2_c5b8 = load i32, i32* @r7, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 9
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i8*
  store i8 %v1_c5b8, i8* %v4_c5b8, align 1
  %v0_c5bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5bc, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v2_c5bc = trunc i32 %v1_c5bc to i8
  %v3_c5bc = load i32, i32* @r7, align 4
  %v4_c5bc = add i32 %v3_c5bc, 7
  %v5_c5bc = inttoptr i32 %v4_c5bc to i8*
  store i8 %v2_c5bc, i8* %v5_c5bc, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c5c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5c0, i32* %r2.global-to-local, align 4
  %v0_c5c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  %v2_c5c4 = load i32, i32* @r7, align 4
  %v3_c5c4 = add i32 %v2_c5c4, 2
  %v4_c5c4 = inttoptr i32 %v3_c5c4 to i8*
  store i8 %v1_c5c4, i8* %v4_c5c4, align 1
  store i32 %v6_c3e8, i32* %ip.global-to-local, align 4
  %v0_c5cc = load i32, i32* %r2.global-to-local, align 4
  %v3_c5cc = mul i32 %v0_c5cc, 32
  store i32 %v3_c5cc, i32* %r3.global-to-local, align 4
  %v1_c5d0 = load i32, i32* @r7, align 4
  %v2_c5d0 = add i32 %v1_c5d0, 12
  %v3_c5d0 = inttoptr i32 %v2_c5d0 to i32*
  store i32 %v6_c3e8, i32* %v3_c5d0, align 4
  %v0_c5d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d4 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c5d4, -8
  %v5_c5d4 = add i32 %v0_c5d4, %tmp98
  %v1_c5d8 = load i32, i32* @sb, align 4
  %v2_c5d8 = add i32 %v1_c5d8, %v5_c5d4
  store i32 %v2_c5d8, i32* %r3.global-to-local, align 4
  %v1_c5dc = add i32 %v2_c5d8, 16
  %v2_c5dc = inttoptr i32 %v1_c5dc to i32*
  %v3_c5dc = load i32, i32* %v2_c5dc, align 4
  store i32 %v3_c5dc, i32* %r2.global-to-local, align 4
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* @r7, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 3
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v0_c5e4 = load i32, i32* @r5, align 4
  %v1_c5e4 = trunc i32 %v0_c5e4 to i8
  %v2_c5e4 = load i32, i32* @r7, align 4
  %v3_c5e4 = add i32 %v2_c5e4, 4
  %v4_c5e4 = inttoptr i32 %v3_c5e4 to i8*
  store i8 %v1_c5e4, i8* %v4_c5e4, align 1
  %v0_c5e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5e8 = load i32, i32* @r7, align 4
  %v2_c5e8 = add i32 %v1_c5e8, 16
  %v3_c5e8 = inttoptr i32 %v2_c5e8 to i32*
  store i32 %v0_c5e8, i32* %v3_c5e8, align 4
  %v0_c5ec = load i32, i32* @sl, align 4
  %v1_c5ec = trunc i32 %v0_c5ec to i8
  %v2_c5ec = load i32, i32* @r7, align 4
  %v3_c5ec = add i32 %v2_c5ec, 20
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 %v1_c5ec, i8* %v4_c5ec, align 1
  %v0_c5f0 = load i32, i32* @r7, align 4
  %v1_c5f0 = add i32 %v0_c5f0, 20
  store i32 %v1_c5f0, i32* @r4, align 4
  %v1_c5f4 = add i32 %v0_c5f0, 33
  %v2_c5f4 = inttoptr i32 %v1_c5f4 to i8*
  %v3_c5f4 = load i8, i8* %v2_c5f4, align 1
  %v4_c5f4 = zext i8 %v3_c5f4 to i32
  store i32 %v1_c4c4, i32* %r1.global-to-local, align 4
  %v1_c5fc = and i32 %v4_c5f4, 223
  %v5_c600 = or i32 %v1_c5fc, %v4_c600
  store i32 %v5_c600, i32* %r3.global-to-local, align 4
  %v1_c604 = trunc i32 %v5_c600 to i8
  store i8 %v1_c604, i8* %v2_c5f4, align 1
  %v0_c608 = load i32, i32* @r4, align 4
  %v1_c608 = add i32 %v0_c608, 13
  %v2_c608 = inttoptr i32 %v1_c608 to i8*
  %v3_c608 = load i8, i8* %v2_c608, align 1
  %v4_c608 = zext i8 %v3_c608 to i32
  store i32 %v1_c4c8, i32* %r3.global-to-local, align 4
  %v1_c610 = and i32 %v4_c608, 239
  %v5_c614 = or i32 %v1_c610, %v4_c614
  store i32 %v5_c614, i32* %r2.global-to-local, align 4
  %v1_c618 = trunc i32 %v5_c614 to i8
  store i8 %v1_c618, i8* %v2_c608, align 1
  %v0_c61c = load i32, i32* @r4, align 4
  %v1_c61c = add i32 %v0_c61c, 13
  %v2_c61c = inttoptr i32 %v1_c61c to i8*
  %v3_c61c = load i8, i8* %v2_c61c, align 1
  %v4_c61c = zext i8 %v3_c61c to i32
  store i32 %v1_c4cc, i32* %ip.global-to-local, align 4
  %v1_c624 = and i32 %v4_c61c, 247
  %v5_c628 = or i32 %v1_c624, %v4_c628
  store i32 %v5_c628, i32* %r3.global-to-local, align 4
  %v1_c62c = trunc i32 %v5_c628 to i8
  store i8 %v1_c62c, i8* %v2_c61c, align 1
  %v0_c630 = load i32, i32* @r4, align 4
  %v1_c630 = add i32 %v0_c630, 13
  %v2_c630 = inttoptr i32 %v1_c630 to i8*
  %v3_c630 = load i8, i8* %v2_c630, align 1
  %v4_c630 = zext i8 %v3_c630 to i32
  store i32 %v1_c4f0, i32* %r1.global-to-local, align 4
  %v1_c638 = and i32 %v4_c630, 251
  %v5_c63c = or i32 %v1_c638, %v4_c63c
  store i32 %v5_c63c, i32* %r2.global-to-local, align 4
  %v1_c640 = trunc i32 %v5_c63c to i8
  store i8 %v1_c640, i8* %v2_c630, align 1
  %v0_c644 = load i32, i32* @r4, align 4
  %v1_c644 = add i32 %v0_c644, 13
  %v2_c644 = inttoptr i32 %v1_c644 to i8*
  %v3_c644 = load i8, i8* %v2_c644, align 1
  %v4_c644 = zext i8 %v3_c644 to i32
  store i32 %v1_c4f4, i32* %r2.global-to-local, align 4
  %v1_c64c = and i32 %v4_c644, 253
  %v4_c650 = or i32 %v1_c64c, %v3_c650
  store i32 %v4_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = trunc i32 %v4_c650 to i8
  store i8 %v1_c654, i8* %v2_c644, align 1
  %v0_c658 = load i32, i32* @r4, align 4
  %v1_c658 = add i32 %v0_c658, 12
  %v2_c658 = inttoptr i32 %v1_c658 to i8*
  %v3_c658 = load i8, i8* %v2_c658, align 1
  %v4_c658 = zext i8 %v3_c658 to i32
  store i32 %v4_c658, i32* %r2.global-to-local, align 4
  %v1_c65c = add i32 %v0_c658, 13
  %v2_c65c = inttoptr i32 %v1_c65c to i8*
  %v3_c65c = load i8, i8* %v2_c65c, align 1
  %v4_c65c = zext i8 %v3_c65c to i32
  store i32 %v1_c4f8, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c658, 16
  %v1_c664 = zext i8 %tmp99 to i32
  %v1_c668 = and i32 %v4_c65c, 254
  %v2_c66c = or i32 %v1_c668, %v1_c4f8
  store i32 %v2_c66c, i32* %r3.global-to-local, align 4
  %v1_c670 = or i32 %v1_c664, 80
  store i32 %v1_c670, i32* %r2.global-to-local, align 4
  %v1_c674 = trunc i32 %v2_c66c to i8
  store i8 %v1_c674, i8* %v2_c65c, align 1
  %v0_c678 = load i32, i32* %r2.global-to-local, align 4
  %v1_c678 = trunc i32 %v0_c678 to i8
  %v2_c678 = load i32, i32* @r4, align 4
  %v3_c678 = add i32 %v2_c678, 12
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v1_c678, i8* %v4_c678, align 1
  store i32 %v3_c680, i32* %r1.global-to-local, align 4
  store i32 %v7_c680, i32* %r2.global-to-local, align 4
  %v2_c684 = load i32, i32* @r4, align 4
  %v3_c684 = add i32 %v2_c684, 1
  %v4_c684 = inttoptr i32 %v3_c684 to i8*
  store i8 %v5_c530, i8* %v4_c684, align 1
  %v0_c688 = load i32, i32* %r2.global-to-local, align 4
  %v1_c688 = trunc i32 %v0_c688 to i8
  %v2_c688 = load i32, i32* @r4, align 4
  %v3_c688 = add i32 %v2_c688, 3
  %v4_c688 = inttoptr i32 %v3_c688 to i8*
  store i8 %v1_c688, i8* %v4_c688, align 1
  %v0_c68c = load i32, i32* @r6, align 4
  %v1_c68c = trunc i32 %v0_c68c to i8
  %v2_c68c = load i32, i32* @r4, align 4
  %v3_c68c = add i32 %v2_c68c, 2
  %v4_c68c = inttoptr i32 %v3_c68c to i8*
  store i8 %v1_c68c, i8* %v4_c68c, align 1
  %v0_c690 = load i32, i32* @r8, align 4
  %v1_c690 = load i32, i32* @r4, align 4
  %v2_c690 = add i32 %v1_c690, 4
  %v3_c690 = inttoptr i32 %v2_c690 to i32*
  store i32 %v0_c690, i32* %v3_c690, align 4
  %v0_c694 = call i32 @function_e580()
  store i32 %v1_c4fc, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c694, 16777216
  %v1_c69c = sdiv i32 %sext, 16777216
  store i32 %v1_c69c, i32* %r2.global-to-local, align 4
  %v3_c6a0 = ashr i32 %sext, 31
  store i32 %v3_c6a0, i32* %r3.global-to-local, align 4
  store i1 %v2_c6a4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6a8 = trunc i32 %v3_c6a0 to i8
  %v2_c6a8 = load i32, i32* @r4, align 4
  %v3_c6a8 = add i32 %v2_c6a8, 15
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i8*
  store i8 %v1_c6a8, i8* %v4_c6a8, align 1
  %v0_c6ac = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c6b8.pre = load i32, i32* @r4, align 4
  br i1 %v0_c6ac, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c6ac = add i32 %v2_c6b8.pre, 13
  %v3_c6ac = inttoptr i32 %v2_c6ac to i8*
  %v4_c6ac = load i8, i8* %v3_c6ac, align 1
  %v5_c6ac = zext i8 %v4_c6ac to i32
  %v2_c6b0 = or i32 %v5_c6ac, 8
  store i32 %v2_c6b0, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c3ac, i32* @r1, align 4
  %v0_c6b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6b8 = trunc i32 %v0_c6b8 to i8
  %v3_c6b8 = add i32 %v2_c6b8.pre, 14
  %v4_c6b8 = inttoptr i32 %v3_c6b8 to i8*
  store i8 %v1_c6b8, i8* %v4_c6b8, align 1
  %v0_c6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6bc, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c6bc = load i32, i32* %r3.global-to-local, align 4
  %v2_c6bc = trunc i32 %v1_c6bc to i8
  %v3_c6bc = load i32, i32* @r4, align 4
  %v4_c6bc = add i32 %v3_c6bc, 13
  %v5_c6bc = inttoptr i32 %v4_c6bc to i8*
  store i8 %v2_c6bc, i8* %v5_c6bc, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c6c0 = load i32, i32* @r7, align 4
  %v1_c6c0 = add i32 %v0_c6c0, 40
  %v1_c6c4 = inttoptr i32 %v1_c6c0 to i8*
  %v2_c6c4 = call i32 @function_e700(i8* %v1_c6c4)
  %v3_c6c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6c8, i32* %r3.global-to-local, align 4
  %v1_c6cc = add i32 %v3_c6c8, 1
  store i32 %v1_c6cc, i32* @r4, align 4
  %v0_c6d0 = load i32, i32* @fp, align 4
  %v9_c6d0 = icmp eq i32 %v0_c6d0, %v1_c6cc
  store i1 %v9_c6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6cc, i32* %stack_var_-40, align 4
  %v8_c6d8 = icmp sgt i32 %v0_c6d0, %v1_c6cc
  br i1 %v8_c6d8, label %dec_label_pc_c53c, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %bb89
  store i32 %v6_c3ac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c6e4.preheader

dec_label_pc_c6e4.preheader:                      ; preds = %dec_label_pc_c6dc, %dec_label_pc_c950
  %v0_c6e417 = phi i32 [ %v0_c6d0, %dec_label_pc_c6dc ], [ %v0_c450, %dec_label_pc_c950 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c470, %dec_label_pc_c6dc ], [ %v1_c958, %dec_label_pc_c950 ]
  %storemerge = add i32 %v6_c3ac, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c89c = icmp eq i32 %v6_c3e8, -1
  %v8_c89c = icmp eq i32 %v6_c3e8, -1
  %v3_c8b8 = icmp eq i32 %v3_c444, 65535
  %v2_c934 = icmp eq i32 %v1_c3d4, 0
  br label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c78c, %dec_label_pc_c6e4.preheader
  %v0_c6e4 = phi i32 [ %v0_c6e417, %dec_label_pc_c6e4.preheader ], [ %v0_c820, %dec_label_pc_c78c ]
  %v2_c6e4 = icmp eq i32 %v0_c6e4, 0
  store i1 %v2_c6e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c6e4, 1
  br label %dec_label_pc_c6ec

dec_label_pc_c6ec:                                ; preds = %dec_label_pc_c6ec, %dec_label_pc_c6e4
  br i1 %tmp90, label %dec_label_pc_c6ec, label %dec_label_pc_c6f0

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c6ec
  %v0_c6f0 = load i32, i32* @r8, align 4
  %v3_c6f0 = mul i32 %v0_c6f0, 65536
  store i32 %v3_c6f0, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c6f0, 256
  %v1_c6f8 = and i32 %tmp91, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_c6f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c6f0, 256
  %v4_c704 = urem i32 %tmp92, 256
  %v5_c704 = or i32 %v4_c704, %v1_c6f8
  store i32 %v5_c704, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c70c

dec_label_pc_c70c:                                ; preds = %dec_label_pc_c78c, %dec_label_pc_c6f0
  %v1_c720 = phi i32 [ %v1_c81c, %dec_label_pc_c78c ], [ 0, %dec_label_pc_c6f0 ]
  %v5_c710 = mul i32 %v1_c720, 24
  %v1_c714 = load i32, i32* @sb, align 4
  %v2_c714 = add i32 %v1_c714, %v5_c710
  store i32 %v2_c714, i32* %r3.global-to-local, align 4
  store i32 %v2_c218, i32* %ip.global-to-local, align 4
  %v1_c71c = add i32 %v2_c714, 20
  %v2_c71c = inttoptr i32 %v1_c71c to i8*
  %v3_c71c = load i8, i8* %v2_c71c, align 1
  %v4_c71c = zext i8 %v3_c71c to i32
  store i32 %v4_c71c, i32* %r2.global-to-local, align 4
  %v4_c720 = mul i32 %v1_c720, 4
  %v5_c720 = add i32 %v4_c720, %v2_c218
  %v6_c720 = inttoptr i32 %v5_c720 to i32*
  %v7_c720 = load i32, i32* %v6_c720, align 4
  store i32 %v7_c720, i32* @r5, align 4
  %v7_c724 = icmp eq i8 %v3_c71c, 31
  store i1 %v7_c724, i1* %cpsr_z.global-to-local, align 1
  %v1_c728 = add i32 %v7_c720, 20
  store i32 %v1_c728, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c71c, 32
  br i1 %tmp100, label %dec_label_pc_c840, label %dec_label_pc_c730

dec_label_pc_c730:                                ; preds = %dec_label_pc_c70c
  store i32 %v6_c3e8, i32* %r1.global-to-local, align 4
  store i1 %v8_c89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c73c

dec_label_pc_c73c:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c730
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c8b8, label %dec_label_pc_c8c4, label %dec_label_pc_c750

dec_label_pc_c750:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge, %dec_label_pc_c73c
  %v1_c754 = phi i32 [ %v1_c754.pre, %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge ], [ 65535, %dec_label_pc_c73c ]
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v9_c754 = icmp eq i32 %v3_c448, %v1_c754
  store i1 %v9_c754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c754, label %dec_label_pc_c8e0, label %dec_label_pc_c75c

dec_label_pc_c75c:                                ; preds = %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge, %dec_label_pc_c750
  %v1_c760 = phi i32 [ %v1_c760.pre, %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge ], [ %v1_c754, %dec_label_pc_c750 ]
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v9_c760 = icmp eq i32 %v3_c44c, %v1_c760
  store i1 %v9_c760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c760, label %dec_label_pc_c8fc, label %dec_label_pc_c768

dec_label_pc_c768:                                ; preds = %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge, %dec_label_pc_c75c
  %v1_c76c = phi i32 [ %v1_c76c.pre, %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge ], [ %v1_c760, %dec_label_pc_c75c ]
  store i32 %v5_c2e8, i32* %r1.global-to-local, align 4
  %v9_c76c = icmp eq i32 %v5_c2e8, %v1_c76c
  store i1 %v9_c76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c76c, label %dec_label_pc_c918, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge, %dec_label_pc_c768
  %v1_c778 = phi i32 [ %v1_c778.pre, %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge ], [ %v1_c76c, %dec_label_pc_c768 ]
  store i32 %v6_c304, i32* %r2.global-to-local, align 4
  %v9_c778 = icmp eq i32 %v6_c304, %v1_c778
  store i1 %v9_c778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c778, label %dec_label_pc_c92c, label %dec_label_pc_c780

dec_label_pc_c780:                                ; preds = %dec_label_pc_c918, %dec_label_pc_c774
  store i32 %v1_c3d4, i32* %r3.global-to-local, align 4
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c934, label %dec_label_pc_c78c, label %dec_label_pc_c940

dec_label_pc_c78c:                                ; preds = %dec_label_pc_c780, %dec_label_pc_c92c, %dec_label_pc_c940
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c790 = load i32, i32* @r7, align 4
  %v1_c790 = trunc i32 %v0_c790 to i8
  %v2_c790 = load i32, i32* @r5, align 4
  %v3_c790 = add i32 %v2_c790, 10
  %v4_c790 = inttoptr i32 %v3_c790 to i8*
  store i8 %v1_c790, i8* %v4_c790, align 1
  %v0_c794 = load i32, i32* @r7, align 4
  %v1_c794 = trunc i32 %v0_c794 to i8
  %v2_c794 = load i32, i32* @r5, align 4
  %v3_c794 = add i32 %v2_c794, 11
  %v4_c794 = inttoptr i32 %v3_c794 to i8*
  store i8 %v1_c794, i8* %v4_c794, align 1
  %v0_c798 = load i32, i32* @r5, align 4
  store i32 %v0_c798, i32* @r0, align 4
  %v2_c79c = call i32 @function_d0b8(i32 %v0_c798, i32 20)
  %v3_c79c = trunc i32 %v2_c79c to i8
  %v4_c7a028 = udiv i32 %v2_c79c, 256
  %v1_c7a4 = trunc i32 %v4_c7a028 to i8
  %v2_c7a4 = load i32, i32* @r5, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 11
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v3_c7a8 = load i32, i32* @r5, align 4
  %v4_c7a8 = add i32 %v3_c7a8, 10
  %v5_c7a8 = inttoptr i32 %v4_c7a8 to i8*
  store i8 %v3_c79c, i8* %v5_c7a8, align 1
  %v0_c7ac = load i32, i32* @r6, align 4
  store i32 %v0_c7ac, i32* @r1, align 4
  %v0_c7b0 = load i32, i32* @sl, align 4
  store i32 %v0_c7b0, i32* %r2.global-to-local, align 4
  %v0_c7b4 = load i32, i32* @r8, align 4
  store i32 %v0_c7b4, i32* %r3.global-to-local, align 4
  %v0_c7b8 = load i32, i32* @r7, align 4
  %v1_c7b8 = trunc i32 %v0_c7b8 to i8
  %v3_c7b8 = add i32 %v0_c7ac, 16
  %v4_c7b8 = inttoptr i32 %v3_c7b8 to i8*
  store i8 %v1_c7b8, i8* %v4_c7b8, align 1
  %v0_c7bc = load i32, i32* @r7, align 4
  %v1_c7bc = trunc i32 %v0_c7bc to i8
  %v2_c7bc = load i32, i32* @r6, align 4
  %v3_c7bc = add i32 %v2_c7bc, 17
  %v4_c7bc = inttoptr i32 %v3_c7bc to i8*
  store i8 %v1_c7bc, i8* %v4_c7bc, align 1
  %v0_c7c0 = load i32, i32* @r5, align 4
  %v4_c7c4 = call i32 @function_d114(i32 %v0_c7c0, i32 %v0_c7ac, i32 %v0_c7b0, i32 %v0_c7b4)
  %v5_c7c4 = trunc i32 %v4_c7c4 to i8
  %v4_c7c829 = udiv i32 %v4_c7c4, 256
  %v1_c7cc = trunc i32 %v4_c7c829 to i8
  %v2_c7cc = load i32, i32* @r6, align 4
  %v3_c7cc = add i32 %v2_c7cc, 17
  %v4_c7cc = inttoptr i32 %v3_c7cc to i8*
  store i8 %v1_c7cc, i8* %v4_c7cc, align 1
  %v3_c7d0 = load i32, i32* @r6, align 4
  %v4_c7d0 = add i32 %v3_c7d0, 16
  %v5_c7d0 = inttoptr i32 %v4_c7d0 to i8*
  store i8 %v5_c7c4, i8* %v5_c7d0, align 1
  %v3_c7d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d4, i32* %r3.global-to-local, align 4
  %v0_c7d8 = load i32, i32* @r5, align 4
  %v1_c7d8 = add i32 %v0_c7d8, 20
  %v2_c7d8 = inttoptr i32 %v1_c7d8 to i32*
  %v3_c7d8 = load i32, i32* %v2_c7d8, align 4
  %v3_c7e0 = udiv i32 %v3_c7d8, 65536
  store i32 %v3_c7e0, i32* %r2.global-to-local, align 4
  %v5_c7e4 = mul i32 %v3_c7d4, 24
  %v1_c7e8 = load i32, i32* @sb, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec27 = udiv i32 %v3_c7d8, 16777216
  %v1_c7f0 = trunc i32 %v3_c7ec27 to i8
  %v3_c7f0 = add i32 %v2_c7e8, 3
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7f4 = trunc i32 %v0_c7f4 to i8
  %v2_c7f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c7f4 = add i32 %v2_c7f4, 2
  %v4_c7f4 = inttoptr i32 %v3_c7f4 to i8*
  store i8 %v1_c7f4, i8* %v4_c7f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c7fc = load i32, i32* @r5, align 4
  store i32 %v0_c7fc, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c80c = load i32, i32* %ip.global-to-local, align 4
  %v6_c814 = inttoptr i32 %v0_c7fc to i32*
  %v7_c814 = call i32 @function_11980(i32 %v3_c3fc, i32* %v6_c814, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c80c, i32 16)
  %v3_c818 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c818, i32* %r3.global-to-local, align 4
  %v1_c81c = add i32 %v3_c818, 1
  %v0_c820 = load i32, i32* @fp, align 4
  %v9_c820 = icmp eq i32 %v0_c820, %v1_c81c
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c81c, i32* %stack_var_-40, align 4
  %v7_c828 = icmp sgt i32 %v0_c820, %v1_c81c
  br i1 %v7_c828, label %dec_label_pc_c70c, label %dec_label_pc_c6e4

dec_label_pc_c830:                                ; preds = %dec_label_pc_c40c
  %v1_c834 = call i32 @function_11120(i32 %v3_c3fc)
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c1f8, %dec_label_pc_c830
  %v29_c83c = phi i32 [ %v3_c3fc, %dec_label_pc_c1f8 ], [ %v1_c834, %dec_label_pc_c830 ]
  ret i32 %v29_c83c

dec_label_pc_c840:                                ; preds = %dec_label_pc_c70c
  %v1_c840 = add i32 %v2_c714, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  %v0_c844 = call i32 @function_e580()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v1_c858 = load i32, i32* @sb, align 4
  %v2_c858 = add i32 %v1_c858, %v5_c850
  store i32 %v2_c858, i32* %r1.global-to-local, align 4
  %v1_c85c = and i32 %v3_c840, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_c85c, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v3_c840, 256
  %v3_c860 = and i32 %v1_c854, 65280
  store i32 %v3_c860, i32* %r2.global-to-local, align 4
  %v3_c864 = mul i32 %v3_c840, 16777216
  store i32 %v3_c864, i32* %ip.global-to-local, align 4
  %v1_c868 = add i32 %v2_c858, 20
  %v2_c868 = inttoptr i32 %v1_c868 to i8*
  %v3_c868 = load i8, i8* %v2_c868, align 1
  %v4_c868 = zext i8 %v3_c868 to i32
  %v4_c86c = mul i32 %v1_c85c, 256
  %v5_c86c = or i32 %v4_c86c, %v3_c864
  store i32 %v5_c86c, i32* %ip.global-to-local, align 4
  %v4_c870 = udiv i32 %v3_c840, 16777216
  %v5_c870 = or i32 %v3_c860, %v4_c870
  %v2_c874 = or i32 %v5_c870, %v5_c86c
  %v7_c878 = lshr i32 %v0_c844, %v4_c868
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v8_c878, i32* %r2.global-to-local, align 4
  %v2_c894 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c894, i32* %r3.global-to-local, align 4
  store i32 %v6_c3e8, i32* %r1.global-to-local, align 4
  store i1 %v8_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c894, i32* %v3_c8a0, align 4
  br i1 %v3_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c73c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c730
  %v0_c8a8 = call i32 @function_e580()
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v1_c8bc = load i32, i32* @r5, align 4
  %v2_c8bc = add i32 %v1_c8bc, 12
  %v3_c8bc = inttoptr i32 %v2_c8bc to i32*
  store i32 %v0_c8a8, i32* %v3_c8bc, align 4
  br i1 %v3_c8b8, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge

dec_label_pc_c8a8.dec_label_pc_c750_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c754.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c750

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c73c
  %v0_c8c4 = call i32 @function_e580()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8c830 = udiv i32 %v0_c8c4, 256
  %v1_c8cc = trunc i32 %v4_c8c830 to i8
  %v2_c8cc = load i32, i32* @r5, align 4
  %v3_c8cc = add i32 %v2_c8cc, 5
  %v4_c8cc = inttoptr i32 %v3_c8cc to i8*
  store i8 %v1_c8cc, i8* %v4_c8cc, align 1
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v1_c8d4 = load i32, i32* @r4, align 4
  %v9_c8d4 = icmp eq i32 %v3_c448, %v1_c8d4
  store i1 %v9_c8d4, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d8 = load i32, i32* @r5, align 4
  %v4_c8d8 = add i32 %v3_c8d8, 4
  %v5_c8d8 = inttoptr i32 %v4_c8d8 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge

dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge:    ; preds = %dec_label_pc_c8c4
  %v1_c760.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c75c

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c750
  %v0_c8e0 = call i32 @function_e580()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v4_c8e8 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e8, i32* %r3.global-to-local, align 4
  %v1_c8ec = load i32, i32* @r4, align 4
  %v9_c8ec = icmp eq i32 %v3_c44c, %v1_c8ec
  store i1 %v9_c8ec, i1* %cpsr_z.global-to-local, align 1
  %v3_c8f0 = load i32, i32* @r5, align 4
  %v4_c8f0 = add i32 %v3_c8f0, 20
  %v5_c8f0 = inttoptr i32 %v4_c8f0 to i8*
  store i8 %v1_c8e0, i8* %v5_c8f0, align 1
  %v0_c8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8f4 = trunc i32 %v0_c8f4 to i8
  %v2_c8f4 = load i32, i32* @r6, align 4
  %v3_c8f4 = add i32 %v2_c8f4, 1
  %v4_c8f4 = inttoptr i32 %v3_c8f4 to i8*
  store i8 %v1_c8f4, i8* %v4_c8f4, align 1
  %v0_c8f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8f8, label %dec_label_pc_c8fc, label %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge

dec_label_pc_c8e0.dec_label_pc_c768_crit_edge:    ; preds = %dec_label_pc_c8e0
  %v1_c76c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c768

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8e0, %dec_label_pc_c75c
  %v0_c8fc = call i32 @function_e580()
  %v1_c8fc = trunc i32 %v0_c8fc to i8
  store i32 %v5_c2e8, i32* %r1.global-to-local, align 4
  %v4_c904 = sdiv i32 %v0_c8fc, 256
  store i32 %v4_c904, i32* %r3.global-to-local, align 4
  %v1_c908 = load i32, i32* @r4, align 4
  %v9_c908 = icmp eq i32 %v5_c2e8, %v1_c908
  store i1 %v9_c908, i1* %cpsr_z.global-to-local, align 1
  %v1_c90c = trunc i32 %v4_c904 to i8
  %v2_c90c = load i32, i32* @r6, align 4
  %v3_c90c = add i32 %v2_c90c, 3
  %v4_c90c = inttoptr i32 %v3_c90c to i8*
  store i8 %v1_c90c, i8* %v4_c90c, align 1
  %v3_c910 = load i32, i32* @r6, align 4
  %v4_c910 = add i32 %v3_c910, 2
  %v5_c910 = inttoptr i32 %v4_c910 to i8*
  store i8 %v1_c8fc, i8* %v5_c910, align 1
  %v0_c914 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c914, label %dec_label_pc_c918, label %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge

dec_label_pc_c8fc.dec_label_pc_c774_crit_edge:    ; preds = %dec_label_pc_c8fc
  %v1_c778.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c774

dec_label_pc_c918:                                ; preds = %dec_label_pc_c8fc, %dec_label_pc_c768
  %v0_c918 = call i32 @function_e580()
  store i32 %v6_c304, i32* %r2.global-to-local, align 4
  %v1_c920 = load i32, i32* @r4, align 4
  %v9_c920 = icmp eq i32 %v6_c304, %v1_c920
  store i1 %v9_c920, i1* %cpsr_z.global-to-local, align 1
  %v1_c924 = load i32, i32* @r6, align 4
  %v2_c924 = add i32 %v1_c924, 4
  %v3_c924 = inttoptr i32 %v2_c924 to i32*
  store i32 %v0_c918, i32* %v3_c924, align 4
  br i1 %v9_c920, label %dec_label_pc_c92c, label %dec_label_pc_c780

dec_label_pc_c92c:                                ; preds = %dec_label_pc_c918, %dec_label_pc_c774
  %v0_c92c = call i32 @function_e580()
  store i32 %v1_c3d4, i32* %r3.global-to-local, align 4
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  %v1_c938 = load i32, i32* @r6, align 4
  %v2_c938 = add i32 %v1_c938, 8
  %v3_c938 = inttoptr i32 %v2_c938 to i32*
  store i32 %v0_c92c, i32* %v3_c938, align 4
  br i1 %v2_c934, label %dec_label_pc_c78c, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c780, %dec_label_pc_c92c
  %v0_c940 = load i32, i32* @r5, align 4
  %v1_c940 = add i32 %v0_c940, 40
  store i32 %v6_c3ac, i32* @r1, align 4
  %v1_c948 = inttoptr i32 %v1_c940 to i8*
  %v2_c948 = call i32 @function_e700(i8* %v1_c948)
  br label %dec_label_pc_c78c

dec_label_pc_c950:                                ; preds = %dec_label_pc_c434
  store i32 %v6_c3ac, i32* %r3.global-to-local, align 4
  %v1_c958 = add i32 %v6_c3ac, 40
  store i32 %v1_c958, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c6e4.preheader

; uselistorder directives
  uselistorder i32 %v1_c958, { 1, 0 }
  uselistorder i32 %v4_c904, { 1, 0 }
  uselistorder i32 %v2_c894, { 1, 0 }
  uselistorder i32 %v3_c864, { 1, 0 }
  uselistorder i32 %v3_c840, { 2, 3, 1, 0 }
  uselistorder i32 %v0_c820, { 1, 2, 0 }
  uselistorder i32 %v1_c81c, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c7ac, { 1, 0, 2 }
  uselistorder i32 %v0_c6f0, { 2, 0, 1 }
  uselistorder i32 %v0_c6e4, { 1, 0 }
  uselistorder i1 %v2_c934, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c8b8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6cc, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c530, { 1, 0 }
  uselistorder i32 %v1_c4f8, { 1, 0 }
  uselistorder i32 %v1_c4f4, { 1, 0 }
  uselistorder i32 %v1_c4f0, { 1, 0 }
  uselistorder i32 %v1_c4cc, { 1, 0 }
  uselistorder i32 %v1_c4c8, { 1, 0 }
  uselistorder i32 %v1_c4c4, { 1, 0 }
  uselistorder i32 %v1_c4b8, { 1, 0 }
  uselistorder i32 %v1_c494, { 1, 0 }
  uselistorder i32 %v1_c484, { 1, 0 }
  uselistorder i32 %v1_c470, { 2, 1, 0 }
  uselistorder i32 %v0_c450, { 1, 0, 2 }
  uselistorder i32 %v3_c444, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c438, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c434, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c42c, { 1, 0 }
  uselistorder i1 %v7_c400, { 1, 0 }
  uselistorder i32 %v3_c3fc, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c3e8, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c3d4, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c3ac, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c304, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c2e8, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c298, { 1, 0 }
  uselistorder i32 %v6_c230, { 1, 0 }
  uselistorder i32 %v2_c218, { 0, 3, 1, 2 }
  uselistorder i32 %v1_c1fc, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32 (i8*)* @function_e700, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10 }
  uselistorder label %dec_label_pc_c940, { 1, 0 }
  uselistorder label %dec_label_pc_c838, { 1, 0 }
  uselistorder label %dec_label_pc_c78c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c6e4.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c96c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c96c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c96c = load i32, i32* @r4, align 4
  %v12_c96c = load i32, i32* @r7, align 4
  %v1_c970 = urem i32 %arg1, 256
  store i32 %v1_c970, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c970, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c988 = urem i32 %arg3, 256
  store i32 %v1_c988, i32* @r4, align 4
  %v2_c98c = call i32 @function_11cd0(i32 %v1_c970, i32 4)
  %v0_c990 = load i32, i32* @r5, align 4
  store i32 %v0_c990, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c98c, i32* %fp.global-to-local, align 4
  %v0_c9a0 = load i32, i32* @r4, align 4
  store i32 %v0_c9a0, i32* %r0.global-to-local, align 4
  %v4_c9a4 = inttoptr i32 %v0_c990 to i32*
  %v5_c9a4 = call i32 @function_85e0(i32 %v0_c9a0, i32* %v4_c9a4, i32 2, i32 0)
  %v1_c9b0 = urem i32 %v5_c9a4, 256
  store i32 %v1_c9b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v0_c9c0 = load i32, i32* @r4, align 4
  store i32 %v0_c9c0, i32* %r0.global-to-local, align 4
  %v5_c9c4 = trunc i32 %v5_c9a4 to i8
  %v6_c9c8 = inttoptr i32 %v0_c9bc to i32*
  %v7_c9c8 = call i32 @function_85e0(i32 %v0_c9c0, i32* %v6_c9c8, i32 3, i32 65535)
  %v0_c9cc = load i32, i32* @r5, align 4
  store i32 %v0_c9cc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c9dc = load i32, i32* @r4, align 4
  store i32 %v0_c9dc, i32* %r0.global-to-local, align 4
  %v5_c9e0 = inttoptr i32 %v0_c9cc to i32*
  %v6_c9e0 = call i32 @function_85e0(i32 %v0_c9dc, i32* %v5_c9e0, i32 4, i32 64)
  %v1_c9e8 = urem i32 %v6_c9e0, 256
  store i32 %v1_c9e8, i32* %ip.global-to-local, align 4
  %v0_c9ec = load i32, i32* @r5, align 4
  store i32 %v0_c9ec, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c9f8 = load i32, i32* @r4, align 4
  store i32 %v0_c9f8, i32* %r0.global-to-local, align 4
  %v6_ca00 = inttoptr i32 %v0_c9ec to i32*
  %v7_ca00 = call i32 @function_85e0(i32 %v0_c9f8, i32* %v6_ca00, i32 5, i32 1)
  %v1_ca0c = urem i32 %v7_ca00, 256
  store i32 %v1_ca0c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ca18 = load i32, i32* @r5, align 4
  store i32 %v0_ca18, i32* %r1.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r4, align 4
  store i32 %v0_ca1c, i32* %r0.global-to-local, align 4
  %v5_ca24 = inttoptr i32 %v0_ca18 to i32*
  %v6_ca24 = call i32 @function_85e0(i32 %v0_ca1c, i32* %v5_ca24, i32 6, i32 65535)
  %v0_ca2c = load i32, i32* @r5, align 4
  store i32 %v0_ca2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ca24, i32* @r7, align 4
  %v0_ca3c = load i32, i32* @r4, align 4
  store i32 %v0_ca3c, i32* %r0.global-to-local, align 4
  %v4_ca40 = inttoptr i32 %v0_ca2c to i32*
  %v5_ca40 = call i32 @function_85e0(i32 %v0_ca3c, i32* %v4_ca40, i32 7, i32 65535)
  %v0_ca48 = load i32, i32* @r5, align 4
  store i32 %v0_ca48, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_ca40, i32* @r6, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca5c = inttoptr i32 %v0_ca48 to i32*
  %v5_ca5c = call i32 @function_85e0(i32 %v0_ca58, i32* %v4_ca5c, i32 17, i32 65535)
  %v0_ca60 = load i32, i32* @r5, align 4
  store i32 %v0_ca60, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca70 = load i32, i32* @r4, align 4
  store i32 %v0_ca70, i32* %r0.global-to-local, align 4
  %v5_ca74 = inttoptr i32 %v0_ca60 to i32*
  %v6_ca74 = call i32 @function_85e0(i32 %v0_ca70, i32* %v5_ca74, i32 18, i32 0)
  %v0_ca78 = load i32, i32* @r5, align 4
  store i32 %v0_ca78, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca88 = load i32, i32* @r4, align 4
  store i32 %v0_ca88, i32* %r0.global-to-local, align 4
  %v5_ca8c = inttoptr i32 %v0_ca78 to i32*
  %v6_ca8c = call i32 @function_85e0(i32 %v0_ca88, i32* %v5_ca8c, i32 11, i32 0)
  %v0_ca90 = load i32, i32* @r5, align 4
  store i32 %v0_ca90, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_caa0 = load i32, i32* @r4, align 4
  store i32 %v0_caa0, i32* %r0.global-to-local, align 4
  %v5_caa4 = inttoptr i32 %v0_ca90 to i32*
  %v6_caa4 = call i32 @function_85e0(i32 %v0_caa0, i32* %v5_caa4, i32 12, i32 0)
  %v0_caa8 = load i32, i32* @r5, align 4
  store i32 %v0_caa8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cab8 = load i32, i32* @r4, align 4
  store i32 %v0_cab8, i32* %r0.global-to-local, align 4
  %v5_cabc = inttoptr i32 %v0_caa8 to i32*
  %v6_cabc = call i32 @function_85e0(i32 %v0_cab8, i32* %v5_cabc, i32 13, i32 0)
  %v0_cac0 = load i32, i32* @r5, align 4
  store i32 %v0_cac0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cad0 = load i32, i32* @r4, align 4
  store i32 %v0_cad0, i32* %r0.global-to-local, align 4
  %v5_cad4 = inttoptr i32 %v0_cac0 to i32*
  %v6_cad4 = call i32 @function_85e0(i32 %v0_cad0, i32* %v5_cad4, i32 14, i32 0)
  %v0_cad8 = load i32, i32* @r5, align 4
  store i32 %v0_cad8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cae8 = load i32, i32* @r4, align 4
  store i32 %v0_cae8, i32* %r0.global-to-local, align 4
  %v5_caec = inttoptr i32 %v0_cad8 to i32*
  %v6_caec = call i32 @function_85e0(i32 %v0_cae8, i32* %v5_caec, i32 15, i32 1)
  %v0_caf0 = load i32, i32* @r5, align 4
  store i32 %v0_caf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cb00 = load i32, i32* @r4, align 4
  store i32 %v0_cb00, i32* %r0.global-to-local, align 4
  %v5_cb04 = inttoptr i32 %v0_caf0 to i32*
  %v6_cb04 = call i32 @function_85e0(i32 %v0_cb00, i32* %v5_cb04, i32 16, i32 0)
  %v2_cb10 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_cb10, i32* %r3.global-to-local, align 4
  %v0_cb14 = load i32, i32* @r5, align 4
  store i32 %v0_cb14, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_cb1c = load i32, i32* @r4, align 4
  store i32 %v0_cb1c, i32* %r0.global-to-local, align 4
  %v5_cb20 = inttoptr i32 %v0_cb14 to i32*
  %v6_cb20 = call i32 @function_8574(i32 %v0_cb1c, i32* %v5_cb20, i32 25, i32 %v2_cb10, i32 %v6_cb04)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb34 = call i32 @function_119e4(i32 2, i32 3, i32 6)
  store i32 %v3_cb34, i32* %r0.global-to-local, align 4
  %v7_cb38 = icmp eq i32 %v3_cb34, -1
  store i1 %v7_cb38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_cb34, i32* %sb.global-to-local, align 4
  br i1 %v7_cb38, label %dec_label_pc_d0ac, label %dec_label_pc_cb44

dec_label_pc_cb44:                                ; preds = %dec_label_pc_c96c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cb4c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cb4c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cb60 = call i32 @function_119b4(i32 %v3_cb34, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_cb60, i32* %r0.global-to-local, align 4
  %v7_cb64 = icmp eq i32 %v6_cb60, -1
  store i1 %v7_cb64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb64, label %dec_label_pc_d0a4, label %dec_label_pc_cb6c

dec_label_pc_cb6c:                                ; preds = %dec_label_pc_cb44
  %v3_cb70 = mul i32 %v7_c9c8, 65536
  store i32 %v3_cb70, i32* %r4.global-to-local, align 4
  %v3_cb74 = urem i32 %v7_c9c8, 65536
  %v0_cb84 = load i32, i32* @r7, align 4
  %v3_cb84 = mul i32 %v0_cb84, 65536
  store i32 %v3_cb84, i32* %r0.global-to-local, align 4
  %v0_cb88 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_cb90 = urem i32 %v0_cb84, 65536
  store i32 %v3_cb90, i32* %ip.global-to-local, align 4
  %v3_cb94 = urem i32 %v0_cb88, 65536
  store i32 %v3_cb94, i32* %r2.global-to-local, align 4
  %v1_cb98 = urem i32 %v6_ca8c, 256
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  %v0_cb9c = load i32, i32* @sl, align 4
  %v2_cb9c = icmp eq i32 %v0_cb9c, 0
  store i1 %v2_cb9c, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_cb9c, 1
  br i1 %tmp69, label %dec_label_pc_ce50, label %dec_label_pc_cbb0

dec_label_pc_cbb0:                                ; preds = %dec_label_pc_cb6c
  %v3_cbb8 = mul i32 %v5_ca5c, 65536
  store i32 %v3_cbb8, i32* @lr, align 4
  %v1_cbc8 = urem i32 %v0_cb88, 256
  %tmp70 = udiv i32 %v0_cb84, 256
  %v3_cbcc = urem i32 %tmp70, 256
  %v1_cbd0 = urem i32 %v0_cb84, 256
  %v4_cbd4 = mul nuw nsw i32 %v1_cbd0, 256
  %v5_cbd4 = or i32 %v4_cbd4, %v3_cbcc
  store i32 %v5_cbd4, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_c9c8, 256
  %tmp72 = mul i32 %v5_ca5c, 256
  %v1_cbf0 = and i32 %tmp72, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v1_cbf4 = urem i32 %v6_ca8c, 2
  %v3_cbf8 = mul nuw nsw i32 %v1_cbc8, 256
  store i32 %v3_cbf8, i32* %r1.global-to-local, align 4
  %v5_cbfc = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_cb88, 256
  %v4_cc00 = urem i32 %tmp73, 256
  %v5_cc00 = or i32 %v4_cc00, %v3_cbf8
  store i32 %v5_cc00, i32* @r6, align 4
  %v1_cc04 = urem i32 %v6_caa4, 2
  %v1_cc08 = urem i32 %v6_cabc, 2
  %tmp74 = udiv i32 %v5_ca5c, 256
  %v4_cc0c = urem i32 %tmp74, 256
  %v5_cc0c = or i32 %v4_cc0c, %v1_cbf0
  store i32 %v5_cc0c, i32* @r5, align 4
  %v1_cc2c = urem i32 %v6_cad4, 2
  %v1_cc30 = urem i32 %v6_caec, 2
  %v1_cc3c = urem i32 %v6_cb04, 2
  store i32 %v1_cc3c, i32* %r0.global-to-local, align 4
  %v3_cc40 = udiv i32 %v7_c9c8, 65536
  store i32 %v3_cc40, i32* %r2.global-to-local, align 4
  store i32 %v1_cbd0, i32* %r3.global-to-local, align 4
  store i32 %v1_cbc8, i32* %ip.global-to-local, align 4
  %v5_cc58 = trunc i32 %v0_cb88 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c9e0, 16777216
  %v4_cca8 = sdiv i32 %sext, 16777216
  %tmp = sub nsw i32 0, %v1_cbf4
  %v4_cd1c = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_cc04
  %v4_cd30 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_cc08
  %v4_cd44 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_cc2c
  %v4_cd58 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_cc30
  %v3_cd6c = and i32 %tmp81, 2
  %v7_cd9c = sext i8 %v5_cc58 to i32
  %sext77 = mul i32 %v0_cb84, 16777216
  %v3_cd9c = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_cc60

dec_label_pc_cc60:                                ; preds = %bb76, %dec_label_pc_cbb0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_cc68 = call i32 @function_11cd0(i32 128, i32 1)
  store i32 %v2_cc68, i32* %r0.global-to-local, align 4
  %v3_cc6c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc6c, i32* %r2.global-to-local, align 4
  %v1_cc70 = load i32, i32* %fp.global-to-local, align 4
  %v2_cc70 = load i32, i32* @r4, align 4
  %v5_cc70 = mul i32 %v2_cc70, 4
  %v6_cc70 = add i32 %v5_cc70, %v1_cc70
  %v7_cc70 = inttoptr i32 %v6_cc70 to i32*
  store i32 %v2_cc68, i32* %v7_cc70, align 4
  %v0_cc74 = load i32, i32* %fp.global-to-local, align 4
  %v1_cc74 = load i32, i32* %r2.global-to-local, align 4
  %v4_cc74 = mul i32 %v1_cc74, 4
  %v5_cc74 = add i32 %v4_cc74, %v0_cc74
  %v6_cc74 = inttoptr i32 %v5_cc74 to i32*
  %v7_cc74 = load i32, i32* %v6_cc74, align 4
  store i32 %v7_cc74, i32* %r4.global-to-local, align 4
  %v1_cc78 = inttoptr i32 %v7_cc74 to i8*
  %v2_cc78 = load i8, i8* %v1_cc78, align 1
  %tmp82 = urem i8 %v2_cc78, 16
  %v1_cc7c = zext i8 %tmp82 to i32
  %v1_cc80 = or i32 %v1_cc7c, 64
  store i32 %v1_cc80, i32* %r3.global-to-local, align 4
  %v1_cc84 = trunc i32 %v1_cc80 to i8
  store i8 %v1_cc84, i8* %v1_cc78, align 1
  %v0_cc88 = load i32, i32* %r4.global-to-local, align 4
  %v1_cc88 = inttoptr i32 %v0_cc88 to i8*
  %v2_cc88 = load i8, i8* %v1_cc88, align 1
  %v1_cc8c = and i8 %v2_cc88, -16
  %v1_cc90 = or i8 %v1_cc8c, 5
  store i32 %v1_ca0c, i32* %r0.global-to-local, align 4
  store i8 %v1_cc90, i8* %v1_cc88, align 1
  %v2_cca0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cca0 = add i32 %v2_cca0, 1
  %v4_cca0 = inttoptr i32 %v3_cca0 to i8*
  store i8 %v5_c9c4, i8* %v4_cca0, align 1
  store i32 %v4_cca8, i32* %r2.global-to-local, align 4
  %v2_ccac = load i32, i32* %r4.global-to-local, align 4
  %v3_ccac = add i32 %v2_ccac, 4
  %v4_ccac = inttoptr i32 %v3_ccac to i8*
  store i8 %v5_cbfc, i8* %v4_ccac, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ccb8 = load i32, i32* %r0.global-to-local, align 4
  %v2_ccb8 = icmp eq i32 %v0_ccb8, 0
  store i1 %v2_ccb8, i1* %cpsr_z.global-to-local, align 1
  %v2_ccbc = load i32, i32* %r4.global-to-local, align 4
  %v3_ccbc = add i32 %v2_ccbc, 3
  %v4_ccbc = inttoptr i32 %v3_ccbc to i8*
  store i8 60, i8* %v4_ccbc, align 1
  store i32 %v3_cc40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ccc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccc8 = trunc i32 %v0_ccc8 to i8
  %v2_ccc8 = load i32, i32* %r4.global-to-local, align 4
  %v3_ccc8 = add i32 %v2_ccc8, 8
  %v4_ccc8 = inttoptr i32 %v3_ccc8 to i8*
  store i8 %v1_ccc8, i8* %v4_ccc8, align 1
  %v0_cccc = load i32, i32* %ip.global-to-local, align 4
  %v1_cccc = trunc i32 %v0_cccc to i8
  %v2_cccc = load i32, i32* %r4.global-to-local, align 4
  %v3_cccc = add i32 %v2_cccc, 9
  %v4_cccc = inttoptr i32 %v3_cccc to i8*
  store i8 %v1_cccc, i8* %v4_cccc, align 1
  %v0_ccd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccd0 = trunc i32 %v0_ccd0 to i8
  %v2_ccd0 = load i32, i32* %r4.global-to-local, align 4
  %v3_ccd0 = add i32 %v2_ccd0, 2
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v3_ccd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccd4, i32* %r2.global-to-local, align 4
  %v0_ccd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ccd8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cc60
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ccdc = load i32, i32* %r4.global-to-local, align 4
  %v4_ccdc = add i32 %v3_ccdc, 6
  %v5_ccdc = inttoptr i32 %v4_ccdc to i8*
  store i8 64, i8* %v5_ccdc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cc60, %bb
  %v0_cce0 = load i32, i32* %r0.global-to-local, align 4
  %v1_cce0 = trunc i32 %v0_cce0 to i8
  %v2_cce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cce0 = add i32 %v2_cce0, 5
  %v4_cce0 = inttoptr i32 %v3_cce0 to i8*
  store i8 %v1_cce0, i8* %v4_cce0, align 1
  %v0_cce4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cce4, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  %v3_ccec = load i32, i32* %r4.global-to-local, align 4
  %v4_ccec = add i32 %v3_ccec, 7
  %v5_ccec = inttoptr i32 %v4_ccec to i8*
  store i8 0, i8* %v5_ccec, align 1
  %v0_ccf4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ccf4 = phi i32 [ %v6_cb20, %.thread9 ], [ %v0_ccf4.pre, %bb75 ]
  %v0_ccf0 = load i32, i32* %r2.global-to-local, align 4
  %v3_ccf0 = mul i32 %v0_ccf0, 32
  store i32 %v3_ccf0, i32* %r3.global-to-local, align 4
  %v1_ccf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_ccf4 = add i32 %v1_ccf4, 12
  %v3_ccf4 = inttoptr i32 %v2_ccf4 to i32*
  store i32 %v0_ccf4, i32* %v3_ccf4, align 4
  %v0_ccf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccf8 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ccf8, -8
  %v5_ccf8 = add i32 %v0_ccf8, %tmp83
  %v1_ccfc = load i32, i32* @r8, align 4
  %v2_ccfc = add i32 %v1_ccfc, %v5_ccf8
  store i32 %v2_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = add i32 %v2_ccfc, 16
  %v2_cd00 = inttoptr i32 %v1_cd00 to i32*
  %v3_cd00 = load i32, i32* %v2_cd00, align 4
  store i32 %v3_cd00, i32* %r2.global-to-local, align 4
  %v0_cd04 = load i32, i32* @r7, align 4
  %v1_cd04 = trunc i32 %v0_cd04 to i8
  %v2_cd04 = load i32, i32* %r4.global-to-local, align 4
  %v3_cd04 = add i32 %v2_cd04, 20
  %v4_cd04 = inttoptr i32 %v3_cd04 to i8*
  store i8 %v1_cd04, i8* %v4_cd04, align 1
  %v0_cd08 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd08 = load i32, i32* %r4.global-to-local, align 4
  %v2_cd08 = add i32 %v1_cd08, 16
  %v3_cd08 = inttoptr i32 %v2_cd08 to i32*
  store i32 %v0_cd08, i32* %v3_cd08, align 4
  %v0_cd0c = load i32, i32* %r4.global-to-local, align 4
  %v1_cd0c = add i32 %v0_cd0c, 20
  store i32 %v1_cd0c, i32* %r1.global-to-local, align 4
  %v1_cd10 = add i32 %v0_cd0c, 33
  %v2_cd10 = inttoptr i32 %v1_cd10 to i8*
  %v3_cd10 = load i8, i8* %v2_cd10, align 1
  %v4_cd10 = zext i8 %v3_cd10 to i32
  store i32 %v1_cbf4, i32* %r2.global-to-local, align 4
  %v1_cd18 = and i32 %v4_cd10, 223
  %v5_cd1c = or i32 %v1_cd18, %v4_cd1c
  store i32 %v5_cd1c, i32* %r3.global-to-local, align 4
  %v1_cd20 = trunc i32 %v5_cd1c to i8
  store i8 %v1_cd20, i8* %v2_cd10, align 1
  %v0_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd24 = add i32 %v0_cd24, 13
  %v2_cd24 = inttoptr i32 %v1_cd24 to i8*
  %v3_cd24 = load i8, i8* %v2_cd24, align 1
  %v4_cd24 = zext i8 %v3_cd24 to i32
  store i32 %v1_cc04, i32* %r3.global-to-local, align 4
  %v1_cd2c = and i32 %v4_cd24, 239
  %v5_cd30 = or i32 %v1_cd2c, %v4_cd30
  store i32 %v5_cd30, i32* %r2.global-to-local, align 4
  %v1_cd34 = trunc i32 %v5_cd30 to i8
  store i8 %v1_cd34, i8* %v2_cd24, align 1
  %v0_cd38 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd38 = add i32 %v0_cd38, 13
  %v2_cd38 = inttoptr i32 %v1_cd38 to i8*
  %v3_cd38 = load i8, i8* %v2_cd38, align 1
  %v4_cd38 = zext i8 %v3_cd38 to i32
  store i32 %v1_cc08, i32* %ip.global-to-local, align 4
  %v1_cd40 = and i32 %v4_cd38, 247
  %v5_cd44 = or i32 %v1_cd40, %v4_cd44
  store i32 %v5_cd44, i32* %r3.global-to-local, align 4
  %v1_cd48 = trunc i32 %v5_cd44 to i8
  store i8 %v1_cd48, i8* %v2_cd38, align 1
  %v0_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd4c = add i32 %v0_cd4c, 13
  %v2_cd4c = inttoptr i32 %v1_cd4c to i8*
  %v3_cd4c = load i8, i8* %v2_cd4c, align 1
  %v4_cd4c = zext i8 %v3_cd4c to i32
  store i32 %v1_cc2c, i32* %r0.global-to-local, align 4
  %v1_cd54 = and i32 %v4_cd4c, 251
  %v5_cd58 = or i32 %v1_cd54, %v4_cd58
  store i32 %v5_cd58, i32* %r2.global-to-local, align 4
  %v1_cd5c = trunc i32 %v5_cd58 to i8
  store i8 %v1_cd5c, i8* %v2_cd4c, align 1
  %v0_cd60 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd60 = add i32 %v0_cd60, 13
  %v2_cd60 = inttoptr i32 %v1_cd60 to i8*
  %v3_cd60 = load i8, i8* %v2_cd60, align 1
  %v4_cd60 = zext i8 %v3_cd60 to i32
  store i32 %v1_cc30, i32* %r2.global-to-local, align 4
  %v1_cd68 = and i32 %v4_cd60, 253
  %v4_cd6c = or i32 %v1_cd68, %v3_cd6c
  store i32 %v4_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = trunc i32 %v4_cd6c to i8
  store i8 %v1_cd70, i8* %v2_cd60, align 1
  %v0_cd74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd74 = add i32 %v0_cd74, 12
  %v2_cd74 = inttoptr i32 %v1_cd74 to i8*
  %v3_cd74 = load i8, i8* %v2_cd74, align 1
  %v4_cd74 = zext i8 %v3_cd74 to i32
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  %v1_cd78 = add i32 %v0_cd74, 13
  %v2_cd78 = inttoptr i32 %v1_cd78 to i8*
  %v3_cd78 = load i8, i8* %v2_cd78, align 1
  %v4_cd78 = zext i8 %v3_cd78 to i32
  %tmp84 = urem i8 %v3_cd74, 16
  %v1_cd80 = zext i8 %tmp84 to i32
  %v1_cd84 = and i32 %v4_cd78, 254
  %v2_cd88 = or i32 %v1_cd84, %v1_cc3c
  %v1_cd8c = or i32 %v1_cd80, 160
  store i32 %v1_cd8c, i32* %r2.global-to-local, align 4
  %v1_cd90 = trunc i32 %v2_cd88 to i8
  store i8 %v1_cd90, i8* %v2_cd78, align 1
  %v0_cd94 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 12
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v3_cd9c, i32* %r0.global-to-local, align 4
  store i32 %v7_cd9c, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cda8 = load i32, i32* %r1.global-to-local, align 4
  %v3_cda8 = add i32 %v2_cda8, 3
  %v4_cda8 = inttoptr i32 %v3_cda8 to i8*
  store i8 %v5_cc58, i8* %v4_cda8, align 1
  %v0_cdac = load i32, i32* %r0.global-to-local, align 4
  %v1_cdac = trunc i32 %v0_cdac to i8
  %v2_cdac = load i32, i32* %r1.global-to-local, align 4
  %v3_cdac = add i32 %v2_cdac, 1
  %v4_cdac = inttoptr i32 %v3_cdac to i8*
  store i8 %v1_cdac, i8* %v4_cdac, align 1
  %v0_cdb0 = load i32, i32* @r6, align 4
  %v1_cdb0 = trunc i32 %v0_cdb0 to i8
  %v2_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdb0 = add i32 %v2_cdb0, 2
  %v4_cdb0 = inttoptr i32 %v3_cdb0 to i8*
  store i8 %v1_cdb0, i8* %v4_cdb0, align 1
  %v0_cdb4 = load i32, i32* @r5, align 4
  %v1_cdb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_cdb4 = add i32 %v1_cdb4, 4
  %v3_cdb4 = inttoptr i32 %v2_cdb4 to i32*
  store i32 %v0_cdb4, i32* %v3_cdb4, align 4
  %v0_cdb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  %v2_cdb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cdb8 = add i32 %v2_cdb8, 41
  %v4_cdb8 = inttoptr i32 %v3_cdb8 to i8*
  store i8 %v1_cdb8, i8* %v4_cdb8, align 1
  %v0_cdbc = load i32, i32* %r3.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v2_cdbc = load i32, i32* %r4.global-to-local, align 4
  %v3_cdbc = add i32 %v2_cdbc, 40
  %v4_cdbc = inttoptr i32 %v3_cdbc to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = call i32 @function_e580()
  %v1_cdc4 = mul i32 %v0_cdc0, 256
  %v1_cdc8 = and i32 %v1_cdc4, 3840
  %v1_cdcc = or i32 %v1_cdc8, 356352
  %v3_cdd4 = add nuw nsw i32 %v1_cdcc, 2048
  %v1_cdd8 = and i32 %v3_cdd4, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_cde07 = udiv i32 %v1_cdd8, 256
  store i32 %v3_cde07, i32* %r1.global-to-local, align 4
  %v0_cde4 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde4 = add i32 %v0_cde4, 42
  store i32 %v1_cde4, i32* %r2.global-to-local, align 4
  %v4_cde8 = inttoptr i32 %v1_cde4 to i8*
  store i8 5, i8* %v4_cde8, align 1
  %v0_cdec = load i32, i32* %r1.global-to-local, align 4
  %v1_cdec = trunc i32 %v0_cdec to i8
  %v2_cdec = load i32, i32* %r2.global-to-local, align 4
  %v3_cdec = add i32 %v2_cdec, 1
  %v4_cdec = inttoptr i32 %v3_cdec to i8*
  store i8 %v1_cdec, i8* %v4_cdec, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cdf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cdf8 = add i32 %v2_cdf8, 47
  %v4_cdf8 = inttoptr i32 %v3_cdf8 to i8*
  store i8 10, i8* %v4_cdf8, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ce04 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce04 = trunc i32 %v0_ce04 to i8
  %v2_ce04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce04 = add i32 %v2_ce04, 46
  %v4_ce04 = inttoptr i32 %v3_ce04 to i8*
  store i8 %v1_ce04, i8* %v4_ce04, align 1
  %v0_ce08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce08 = trunc i32 %v0_ce08 to i8
  %v2_ce08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce08 = add i32 %v2_ce08, 45
  %v4_ce08 = inttoptr i32 %v3_ce08 to i8*
  store i8 %v1_ce08, i8* %v4_ce08, align 1
  %v0_ce0c = load i32, i32* %r0.global-to-local, align 4
  %v1_ce0c = trunc i32 %v0_ce0c to i8
  %v2_ce0c = load i32, i32* %r4.global-to-local, align 4
  %v3_ce0c = add i32 %v2_ce0c, 44
  %v4_ce0c = inttoptr i32 %v3_ce0c to i8*
  store i8 %v1_ce0c, i8* %v4_ce0c, align 1
  %v0_ce10 = call i32 @function_e580()
  store i32 %v0_ce10, i32* %r0.global-to-local, align 4
  %v2_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce18 = add i32 %v2_ce18, 56
  %v4_ce18 = inttoptr i32 %v3_ce18 to i8*
  store i8 1, i8* %v4_ce18, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_ce28 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce28 = add i32 %v1_ce28, 48
  %v3_ce28 = inttoptr i32 %v2_ce28 to i32*
  store i32 %v0_ce10, i32* %v3_ce28, align 4
  %v0_ce2c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce2c = trunc i32 %v0_ce2c to i8
  %v2_ce2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ce2c = add i32 %v2_ce2c, 58
  %v4_ce2c = inttoptr i32 %v3_ce2c to i8*
  store i8 %v1_ce2c, i8* %v4_ce2c, align 1
  %v0_ce30 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce30 = trunc i32 %v0_ce30 to i8
  %v2_ce30 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce30 = add i32 %v2_ce30, 59
  %v4_ce30 = inttoptr i32 %v3_ce30 to i8*
  store i8 %v1_ce30, i8* %v4_ce30, align 1
  %v0_ce34 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce34 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce34 = add i32 %v1_ce34, 52
  %v3_ce34 = inttoptr i32 %v2_ce34 to i32*
  store i32 %v0_ce34, i32* %v3_ce34, align 4
  %v0_ce38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce38 = trunc i32 %v0_ce38 to i8
  %v2_ce38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce38 = add i32 %v2_ce38, 57
  %v4_ce38 = inttoptr i32 %v3_ce38 to i8*
  store i8 %v1_ce38, i8* %v4_ce38, align 1
  %v3_ce3c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce3c, i32* %r3.global-to-local, align 4
  %v1_ce40 = add i32 %v3_ce3c, 1
  store i32 %v1_ce40, i32* @r4, align 4
  %v0_ce44 = load i32, i32* @sl, align 4
  %v9_ce44 = icmp eq i32 %v0_ce44, %v1_ce40
  store i1 %v9_ce44, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ce40, i32* %stack_var_-40, align 4
  %v8_ce4c = icmp sgt i32 %v0_ce44, %v1_ce40
  br i1 %v8_ce4c, label %dec_label_pc_cc60, label %dec_label_pc_ce50

dec_label_pc_ce50:                                ; preds = %bb76, %dec_label_pc_cb6c
  %v0_ce50 = phi i32 [ %v0_cb9c, %dec_label_pc_cb6c ], [ %v0_ce44, %bb76 ]
  %v2_ce50 = icmp eq i32 %v0_ce50, 0
  store i1 %v2_ce50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d008 = icmp eq i32 %v3_cb74, 65535
  %v2_d084 = icmp eq i32 %v1_cb98, 0
  %v2_ce8c = icmp eq i32 %v6_cb20, -1
  %v7_ce8c = icmp eq i32 %v6_cb20, -1
  br label %dec_label_pc_ce58.outer

dec_label_pc_ce58.outer:                          ; preds = %dec_label_pc_cf84, %dec_label_pc_ce50
  %v1_ce58.ph.in = phi i32 [ %v1_cf78, %dec_label_pc_cf84 ], [ %v0_ce50, %dec_label_pc_ce50 ]
  %v0_ce58.ph = phi i1 [ %v2_cf84, %dec_label_pc_cf84 ], [ %v2_ce50, %dec_label_pc_ce50 ]
  %v1_ce58.ph = icmp slt i32 %v1_ce58.ph.in, 0
  %v4_ce58 = or i1 %v1_ce58.ph, %v0_ce58.ph
  br label %dec_label_pc_ce58

dec_label_pc_ce58:                                ; preds = %dec_label_pc_ce58.outer, %dec_label_pc_ce58
  br i1 %v4_ce58, label %dec_label_pc_ce58, label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce58
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cee4, %dec_label_pc_ce5c
  %v1_ce78 = phi i32 [ %v1_cf74, %dec_label_pc_cee4 ], [ 0, %dec_label_pc_ce5c ]
  %v5_ce6c = mul i32 %v1_ce78, 24
  %v1_ce70 = load i32, i32* @r8, align 4
  %v2_ce70 = add i32 %v1_ce70, %v5_ce6c
  store i32 %v2_ce70, i32* %r3.global-to-local, align 4
  %v1_ce74 = add i32 %v2_ce70, 20
  %v2_ce74 = inttoptr i32 %v1_ce74 to i8*
  %v3_ce74 = load i8, i8* %v2_ce74, align 1
  %v4_ce74 = zext i8 %v3_ce74 to i32
  store i32 %v4_ce74, i32* %r2.global-to-local, align 4
  %v0_ce78 = load i32, i32* %fp.global-to-local, align 4
  %v4_ce78 = mul i32 %v1_ce78, 4
  %v5_ce78 = add i32 %v0_ce78, %v4_ce78
  %v6_ce78 = inttoptr i32 %v5_ce78 to i32*
  %v7_ce78 = load i32, i32* %v6_ce78, align 4
  store i32 %v7_ce78, i32* @r5, align 4
  %v7_ce7c = icmp eq i8 %v3_ce74, 31
  store i1 %v7_ce7c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce80 = add i32 %v7_ce78, 20
  store i32 %v1_ce80, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_ce74, 32
  br i1 %tmp85, label %dec_label_pc_cf90, label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce68
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  store i1 %v7_ce8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce8c, label %dec_label_pc_cff8, label %dec_label_pc_ce94

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_ce88
  store i32 %v3_cb74, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d008, label %dec_label_pc_d014, label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce94
  %v1_ceac = phi i32 [ %v1_ceac.pre, %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce94 ]
  store i32 %v3_cb90, i32* %r3.global-to-local, align 4
  %v9_ceac = icmp eq i32 %v3_cb90, %v1_ceac
  store i1 %v9_ceac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ceac, label %dec_label_pc_d030, label %dec_label_pc_ceb4

dec_label_pc_ceb4:                                ; preds = %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge, %dec_label_pc_cea8
  %v1_ceb8 = phi i32 [ %v1_ceb8.pre, %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge ], [ %v1_ceac, %dec_label_pc_cea8 ]
  store i32 %v3_cb94, i32* %ip.global-to-local, align 4
  %v9_ceb8 = icmp eq i32 %v3_cb94, %v1_ceb8
  store i1 %v9_ceb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ceb8, label %dec_label_pc_d04c, label %dec_label_pc_cec0

dec_label_pc_cec0:                                ; preds = %dec_label_pc_d030.dec_label_pc_cec0_crit_edge, %dec_label_pc_ceb4
  %v1_cec4 = phi i32 [ %v1_cec4.pre, %dec_label_pc_d030.dec_label_pc_cec0_crit_edge ], [ %v1_ceb8, %dec_label_pc_ceb4 ]
  store i32 %v5_ca5c, i32* %r0.global-to-local, align 4
  %v9_cec4 = icmp eq i32 %v5_ca5c, %v1_cec4
  store i1 %v9_cec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec4, label %dec_label_pc_d068, label %dec_label_pc_cecc

dec_label_pc_cecc:                                ; preds = %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge, %dec_label_pc_cec0
  %v1_ced0 = phi i32 [ %v1_ced0.pre, %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge ], [ %v1_cec4, %dec_label_pc_cec0 ]
  store i32 %v6_ca74, i32* %r2.global-to-local, align 4
  %v9_ced0 = icmp eq i32 %v6_ca74, %v1_ced0
  store i1 %v9_ced0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced0, label %dec_label_pc_d07c, label %dec_label_pc_ced8

dec_label_pc_ced8:                                ; preds = %dec_label_pc_d068, %dec_label_pc_cecc
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  store i1 %v2_d084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d084, label %dec_label_pc_cee4, label %dec_label_pc_d090

dec_label_pc_cee4:                                ; preds = %dec_label_pc_ced8, %dec_label_pc_d07c, %dec_label_pc_d090
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cee8 = load i32, i32* %r7.global-to-local, align 4
  %v1_cee8 = trunc i32 %v0_cee8 to i8
  %v2_cee8 = load i32, i32* @r5, align 4
  %v3_cee8 = add i32 %v2_cee8, 10
  %v4_cee8 = inttoptr i32 %v3_cee8 to i8*
  store i8 %v1_cee8, i8* %v4_cee8, align 1
  %v0_ceec = load i32, i32* %r7.global-to-local, align 4
  %v1_ceec = trunc i32 %v0_ceec to i8
  %v2_ceec = load i32, i32* @r5, align 4
  %v3_ceec = add i32 %v2_ceec, 11
  %v4_ceec = inttoptr i32 %v3_ceec to i8*
  store i8 %v1_ceec, i8* %v4_ceec, align 1
  %v0_cef0 = load i32, i32* @r5, align 4
  store i32 %v0_cef0, i32* @r0, align 4
  %v2_cef4 = call i32 @function_d0b8(i32 %v0_cef0, i32 20)
  %v3_cef4 = trunc i32 %v2_cef4 to i8
  %v4_cef827 = udiv i32 %v2_cef4, 256
  %v1_cefc = trunc i32 %v4_cef827 to i8
  %v2_cefc = load i32, i32* @r5, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v3_cf00 = load i32, i32* @r5, align 4
  %v4_cf00 = add i32 %v3_cf00, 10
  %v5_cf00 = inttoptr i32 %v4_cf00 to i8*
  store i8 %v3_cef4, i8* %v5_cf00, align 1
  %v0_cf04 = load i32, i32* @r6, align 4
  store i32 %v0_cf04, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cf10 = load i32, i32* %r7.global-to-local, align 4
  %v1_cf10 = trunc i32 %v0_cf10 to i8
  %v3_cf10 = add i32 %v0_cf04, 16
  %v4_cf10 = inttoptr i32 %v3_cf10 to i8*
  store i8 %v1_cf10, i8* %v4_cf10, align 1
  %v0_cf14 = load i32, i32* %r7.global-to-local, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r6, align 4
  %v3_cf14 = add i32 %v2_cf14, 17
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r5, align 4
  store i32 %v0_cf18, i32* %r0.global-to-local, align 4
  %v4_cf1c = call i32 @function_d114(i32 %v0_cf18, i32 %v0_cf04, i32 10240, i32 40)
  %v5_cf1c = trunc i32 %v4_cf1c to i8
  store i32 %v4_cf1c, i32* %r0.global-to-local, align 4
  %v4_cf2028 = udiv i32 %v4_cf1c, 256
  %v1_cf24 = trunc i32 %v4_cf2028 to i8
  %v2_cf24 = load i32, i32* @r6, align 4
  %v3_cf24 = add i32 %v2_cf24, 17
  %v4_cf24 = inttoptr i32 %v3_cf24 to i8*
  store i8 %v1_cf24, i8* %v4_cf24, align 1
  %v3_cf28 = load i32, i32* @r6, align 4
  %v4_cf28 = add i32 %v3_cf28, 16
  %v5_cf28 = inttoptr i32 %v4_cf28 to i8*
  store i8 %v5_cf1c, i8* %v5_cf28, align 1
  %v3_cf2c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf2c, i32* %r3.global-to-local, align 4
  %v0_cf30 = load i32, i32* @r5, align 4
  %v1_cf30 = add i32 %v0_cf30, 20
  %v2_cf30 = inttoptr i32 %v1_cf30 to i32*
  %v3_cf30 = load i32, i32* %v2_cf30, align 4
  %v3_cf38 = udiv i32 %v3_cf30, 65536
  store i32 %v3_cf38, i32* %r2.global-to-local, align 4
  %v5_cf3c = mul i32 %v3_cf2c, 24
  %v1_cf40 = load i32, i32* @r8, align 4
  %v2_cf40 = add i32 %v1_cf40, %v5_cf3c
  store i32 %v2_cf40, i32* %ip.global-to-local, align 4
  %v3_cf4426 = udiv i32 %v3_cf30, 16777216
  %v1_cf48 = trunc i32 %v3_cf4426 to i8
  %v3_cf48 = add i32 %v2_cf40, 3
  %v4_cf48 = inttoptr i32 %v3_cf48 to i8*
  store i8 %v1_cf48, i8* %v4_cf48, align 1
  %v0_cf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf4c = trunc i32 %v0_cf4c to i8
  %v2_cf4c = load i32, i32* %ip.global-to-local, align 4
  %v3_cf4c = add i32 %v2_cf4c, 2
  %v4_cf4c = inttoptr i32 %v3_cf4c to i8*
  store i8 %v1_cf4c, i8* %v4_cf4c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf54 = load i32, i32* @r5, align 4
  store i32 %v0_cf54, i32* %r1.global-to-local, align 4
  %v0_cf58 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cf58, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cf64 = load i32, i32* %ip.global-to-local, align 4
  %v6_cf6c = inttoptr i32 %v0_cf54 to i32*
  %v7_cf6c = call i32 @function_11980(i32 %v0_cf58, i32* %v6_cf6c, i32 60, i32 16384, i32 %v0_cf64, i32 16)
  %v3_cf70 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf70, i32* %r3.global-to-local, align 4
  %v1_cf74 = add i32 %v3_cf70, 1
  store i32 %v1_cf74, i32* %r0.global-to-local, align 4
  %v1_cf78 = load i32, i32* @sl, align 4
  %v9_cf78 = icmp eq i32 %v1_cf74, %v1_cf78
  store i1 %v9_cf78, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf74, i32* %stack_var_-40, align 4
  %v5_cf80 = icmp slt i32 %v1_cf74, %v1_cf78
  br i1 %v5_cf80, label %dec_label_pc_ce68, label %dec_label_pc_cf84

dec_label_pc_cf84:                                ; preds = %dec_label_pc_cee4
  %v2_cf84 = icmp eq i32 %v1_cf78, 0
  store i1 %v2_cf84, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce58.outer

dec_label_pc_cf90:                                ; preds = %dec_label_pc_ce68
  %v1_cf90 = add i32 %v2_ce70, 16
  %v2_cf90 = inttoptr i32 %v1_cf90 to i32*
  %v3_cf90 = load i32, i32* %v2_cf90, align 4
  store i32 %v3_cf90, i32* %r4.global-to-local, align 4
  %v0_cf94 = call i32 @function_e580()
  store i32 %v0_cf94, i32* %r0.global-to-local, align 4
  %v3_cf98 = load i32, i32* %stack_var_-40, align 4
  %v5_cfa0 = mul i32 %v3_cf98, 24
  %v0_cfa4 = load i32, i32* %r4.global-to-local, align 4
  %v1_cfa8 = load i32, i32* @r8, align 4
  %v2_cfa8 = add i32 %v1_cfa8, %v5_cfa0
  store i32 %v2_cfa8, i32* %r1.global-to-local, align 4
  %v1_cfac = and i32 %v0_cfa4, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_cfac, i32* %r3.global-to-local, align 4
  %v1_cfa4 = udiv i32 %v0_cfa4, 256
  %v3_cfb0 = and i32 %v1_cfa4, 65280
  store i32 %v3_cfb0, i32* %r2.global-to-local, align 4
  %v3_cfb4 = mul i32 %v0_cfa4, 16777216
  store i32 %v3_cfb4, i32* %ip.global-to-local, align 4
  %v1_cfb8 = add i32 %v2_cfa8, 20
  %v2_cfb8 = inttoptr i32 %v1_cfb8 to i8*
  %v3_cfb8 = load i8, i8* %v2_cfb8, align 1
  %v4_cfb8 = zext i8 %v3_cfb8 to i32
  %v4_cfbc = mul i32 %v1_cfac, 256
  %v5_cfbc = or i32 %v4_cfbc, %v3_cfb4
  store i32 %v5_cfbc, i32* %ip.global-to-local, align 4
  %v4_cfc0 = udiv i32 %v0_cfa4, 16777216
  %v5_cfc0 = or i32 %v3_cfb0, %v4_cfc0
  %v2_cfc4 = or i32 %v5_cfc0, %v5_cfbc
  %v7_cfc8 = lshr i32 %v0_cf94, %v4_cfb8
  %v8_cfc8 = add i32 %v7_cfc8, %v2_cfc4
  store i32 %v8_cfc8, i32* %r2.global-to-local, align 4
  %v3_cfd4 = mul i32 %v8_cfc8, 16777216
  %v1_cfcc = mul i32 %v8_cfc8, 256
  %v4_cfd8 = and i32 %v1_cfcc, 16711680
  %v5_cfd8 = or i32 %v4_cfd8, %v3_cfd4
  store i32 %v5_cfd8, i32* %r1.global-to-local, align 4
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  %v2_cfe8 = call i32 @llvm.bswap.i32(i32 %v8_cfc8)
  store i32 %v2_cfe8, i32* %r3.global-to-local, align 4
  store i1 %v7_ce8c, i1* %cpsr_z.global-to-local, align 1
  %v1_cff0 = load i32, i32* @r5, align 4
  %v2_cff0 = add i32 %v1_cff0, 16
  %v3_cff0 = inttoptr i32 %v2_cff0 to i32*
  store i32 %v2_cfe8, i32* %v3_cff0, align 4
  br i1 %v2_ce8c, label %dec_label_pc_cff8, label %dec_label_pc_ce94

dec_label_pc_cff8:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_ce88
  %v0_cff8 = call i32 @function_e580()
  store i32 %v0_cff8, i32* %r0.global-to-local, align 4
  store i32 %v3_cb74, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d008, i1* %cpsr_z.global-to-local, align 1
  %v1_d00c = load i32, i32* @r5, align 4
  %v2_d00c = add i32 %v1_d00c, 12
  %v3_d00c = inttoptr i32 %v2_d00c to i32*
  store i32 %v0_cff8, i32* %v3_d00c, align 4
  br i1 %v3_d008, label %dec_label_pc_d014, label %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge

dec_label_pc_cff8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cff8
  %v1_ceac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cea8

dec_label_pc_d014:                                ; preds = %dec_label_pc_cff8, %dec_label_pc_ce94
  %v0_d014 = call i32 @function_e580()
  %v1_d014 = trunc i32 %v0_d014 to i8
  store i32 %v0_d014, i32* %r0.global-to-local, align 4
  %v4_d01829 = udiv i32 %v0_d014, 256
  %v1_d01c = trunc i32 %v4_d01829 to i8
  %v2_d01c = load i32, i32* @r5, align 4
  %v3_d01c = add i32 %v2_d01c, 5
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  store i32 %v3_cb90, i32* %r3.global-to-local, align 4
  %v1_d024 = load i32, i32* @r4, align 4
  %v9_d024 = icmp eq i32 %v3_cb90, %v1_d024
  store i1 %v9_d024, i1* %cpsr_z.global-to-local, align 1
  %v3_d028 = load i32, i32* @r5, align 4
  %v4_d028 = add i32 %v3_d028, 4
  %v5_d028 = inttoptr i32 %v4_d028 to i8*
  store i8 %v1_d014, i8* %v5_d028, align 1
  %v0_d02c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d02c, label %dec_label_pc_d030, label %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge

dec_label_pc_d014.dec_label_pc_ceb4_crit_edge:    ; preds = %dec_label_pc_d014
  %v1_ceb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ceb4

dec_label_pc_d030:                                ; preds = %dec_label_pc_d014, %dec_label_pc_cea8
  %v0_d030 = call i32 @function_e580()
  %v1_d030 = trunc i32 %v0_d030 to i8
  store i32 %v0_d030, i32* %r0.global-to-local, align 4
  store i32 %v3_cb94, i32* %ip.global-to-local, align 4
  %v4_d038 = sdiv i32 %v0_d030, 256
  store i32 %v4_d038, i32* %r3.global-to-local, align 4
  %v1_d03c = load i32, i32* @r4, align 4
  %v9_d03c = icmp eq i32 %v3_cb94, %v1_d03c
  store i1 %v9_d03c, i1* %cpsr_z.global-to-local, align 1
  %v3_d040 = load i32, i32* @r5, align 4
  %v4_d040 = add i32 %v3_d040, 20
  %v5_d040 = inttoptr i32 %v4_d040 to i8*
  store i8 %v1_d030, i8* %v5_d040, align 1
  %v0_d044 = load i32, i32* %r3.global-to-local, align 4
  %v1_d044 = trunc i32 %v0_d044 to i8
  %v2_d044 = load i32, i32* @r6, align 4
  %v3_d044 = add i32 %v2_d044, 1
  %v4_d044 = inttoptr i32 %v3_d044 to i8*
  store i8 %v1_d044, i8* %v4_d044, align 1
  %v0_d048 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d048, label %dec_label_pc_d04c, label %dec_label_pc_d030.dec_label_pc_cec0_crit_edge

dec_label_pc_d030.dec_label_pc_cec0_crit_edge:    ; preds = %dec_label_pc_d030
  %v1_cec4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cec0

dec_label_pc_d04c:                                ; preds = %dec_label_pc_d030, %dec_label_pc_ceb4
  %v0_d04c = call i32 @function_e580()
  %v1_d04c = trunc i32 %v0_d04c to i8
  %v4_d050 = sdiv i32 %v0_d04c, 256
  store i32 %v4_d050, i32* %r3.global-to-local, align 4
  %v3_d054 = load i32, i32* @r6, align 4
  %v4_d054 = add i32 %v3_d054, 2
  %v5_d054 = inttoptr i32 %v4_d054 to i8*
  store i8 %v1_d04c, i8* %v5_d054, align 1
  store i32 %v5_ca5c, i32* %r0.global-to-local, align 4
  %v1_d05c = load i32, i32* @r4, align 4
  %v9_d05c = icmp eq i32 %v5_ca5c, %v1_d05c
  store i1 %v9_d05c, i1* %cpsr_z.global-to-local, align 1
  %v0_d060 = load i32, i32* %r3.global-to-local, align 4
  %v1_d060 = trunc i32 %v0_d060 to i8
  %v2_d060 = load i32, i32* @r6, align 4
  %v3_d060 = add i32 %v2_d060, 3
  %v4_d060 = inttoptr i32 %v3_d060 to i8*
  store i8 %v1_d060, i8* %v4_d060, align 1
  %v0_d064 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d064, label %dec_label_pc_d068, label %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge

dec_label_pc_d04c.dec_label_pc_cecc_crit_edge:    ; preds = %dec_label_pc_d04c
  %v1_ced0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cecc

dec_label_pc_d068:                                ; preds = %dec_label_pc_d04c, %dec_label_pc_cec0
  %v0_d068 = call i32 @function_e580()
  store i32 %v0_d068, i32* %r0.global-to-local, align 4
  store i32 %v6_ca74, i32* %r2.global-to-local, align 4
  %v1_d070 = load i32, i32* @r4, align 4
  %v9_d070 = icmp eq i32 %v6_ca74, %v1_d070
  store i1 %v9_d070, i1* %cpsr_z.global-to-local, align 1
  %v1_d074 = load i32, i32* @r6, align 4
  %v2_d074 = add i32 %v1_d074, 4
  %v3_d074 = inttoptr i32 %v2_d074 to i32*
  store i32 %v0_d068, i32* %v3_d074, align 4
  br i1 %v9_d070, label %dec_label_pc_d07c, label %dec_label_pc_ced8

dec_label_pc_d07c:                                ; preds = %dec_label_pc_d068, %dec_label_pc_cecc
  %v0_d07c = call i32 @function_e580()
  store i32 %v0_d07c, i32* %r0.global-to-local, align 4
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  store i1 %v2_d084, i1* %cpsr_z.global-to-local, align 1
  %v1_d088 = load i32, i32* @r6, align 4
  %v2_d088 = add i32 %v1_d088, 8
  %v3_d088 = inttoptr i32 %v2_d088 to i32*
  store i32 %v0_d07c, i32* %v3_d088, align 4
  br i1 %v2_d084, label %dec_label_pc_cee4, label %dec_label_pc_d090

dec_label_pc_d090:                                ; preds = %dec_label_pc_ced8, %dec_label_pc_d07c
  %v0_d090 = call i32 @function_e580()
  %v1_d090 = trunc i32 %v0_d090 to i8
  store i32 %v0_d090, i32* %r0.global-to-local, align 4
  %v4_d094 = sdiv i32 %v0_d090, 256
  store i32 %v4_d094, i32* %r3.global-to-local, align 4
  %v1_d098 = trunc i32 %v4_d094 to i8
  %v2_d098 = load i32, i32* @r6, align 4
  %v3_d098 = add i32 %v2_d098, 19
  %v4_d098 = inttoptr i32 %v3_d098 to i8*
  store i8 %v1_d098, i8* %v4_d098, align 1
  %v3_d09c = load i32, i32* @r6, align 4
  %v4_d09c = add i32 %v3_d09c, 18
  %v5_d09c = inttoptr i32 %v4_d09c to i8*
  store i8 %v1_d090, i8* %v5_d09c, align 1
  br label %dec_label_pc_cee4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_cb44
  %v0_d0a4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_d0a4, i32* %r0.global-to-local, align 4
  %v1_d0a8 = call i32 @function_11120(i32 %v0_d0a4)
  store i32 %v1_d0a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d0ac

dec_label_pc_d0ac:                                ; preds = %dec_label_pc_c96c, %dec_label_pc_d0a4
  %v29_d0b0 = phi i32 [ %v3_cb34, %dec_label_pc_c96c ], [ %v1_d0a8, %dec_label_pc_d0a4 ]
  store i32 %v3_c96c, i32* %r4.global-to-local, align 4
  store i32 %v12_c96c, i32* %r7.global-to-local, align 4
  ret i32 %v29_d0b0

; uselistorder directives
  uselistorder i32 %v4_d094, { 1, 0 }
  uselistorder i32 %v0_d090, { 0, 2, 1 }
  uselistorder i32 %v0_d030, { 0, 2, 1 }
  uselistorder i32 %v0_d014, { 0, 2, 1 }
  uselistorder i32 %v2_cfe8, { 1, 0 }
  uselistorder i32 %v8_cfc8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cfb4, { 1, 0 }
  uselistorder i32 %v0_cfa4, { 1, 0, 2, 3 }
  uselistorder i1 %v2_cf84, { 1, 0 }
  uselistorder i32 %v1_cf78, { 1, 2, 3, 0 }
  uselistorder i32 %v1_cf74, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf1c, { 0, 2, 1 }
  uselistorder i32 %v0_cf04, { 1, 0, 2 }
  uselistorder i1 %v7_ce8c, { 2, 1, 0 }
  uselistorder i1 %v2_d084, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d008, { 3, 2, 0, 1 }
  uselistorder i32 %v1_ce40, { 1, 0, 2, 3 }
  uselistorder i8 %v5_cc58, { 1, 0 }
  uselistorder i32 %v3_cc40, { 1, 0 }
  uselistorder i32 %v1_cc3c, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v1_cc2c, { 1, 0 }
  uselistorder i32 %v1_cc08, { 1, 0 }
  uselistorder i32 %v1_cc04, { 1, 0 }
  uselistorder i32 %v3_cbf8, { 1, 0 }
  uselistorder i32 %v1_cbf4, { 1, 0 }
  uselistorder i32 %v1_cbd0, { 1, 0 }
  uselistorder i32 %v1_cbc8, { 1, 0 }
  uselistorder i32 %v1_cb98, { 2, 1, 3, 0 }
  uselistorder i32 %v3_cb90, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_cb88, { 3, 0, 1, 2 }
  uselistorder i32 %v0_cb84, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_cb64, { 1, 0 }
  uselistorder i1 %v7_cb38, { 1, 0 }
  uselistorder i32 %v3_cb34, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_cb20, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_ca74, { 3, 2, 1, 0 }
  uselistorder i32 %v5_ca5c, { 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 %v1_ca0c, { 1, 0 }
  uselistorder i32 %v7_c9c8, { 0, 1, 3, 2 }
  uselistorder i32 %v5_c9a4, { 1, 0 }
  uselistorder i32 %v1_c970, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960), { 0, 6, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 3, 4, 5, 15 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_85e0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder label %dec_label_pc_d0ac, { 1, 0 }
  uselistorder label %dec_label_pc_d090, { 1, 0 }
  uselistorder label %dec_label_pc_cee4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ce58, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1c4 = load i32, i32* @r4, align 4
  store i32 %v3_d1c4, i32* %stack_var_-36, align 4
  %v6_d1c4 = load i32, i32* @r5, align 4
  %v9_d1c4 = load i32, i32* @r6, align 4
  %v12_d1c4 = load i32, i32* @r7, align 4
  %v15_d1c4 = load i32, i32* @r8, align 4
  %v18_d1c4 = load i32, i32* @sb, align 4
  %v21_d1c4 = load i32, i32* @sl, align 4
  %v24_d1c4 = load i32, i32* @fp, align 4
  %v2_d1d8 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1d8, i32* @sl, align 4
  %v3_d1e0 = mul i32 %arg1, 65536
  store i32 %v3_d1e0, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d1f8 = bitcast i32* %stack_var_-4677 to i8*
  %v3_d1f8 = call i32 @function_11760(i8* %v2_d1f8, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d210 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d210 = call i32 @function_11760(i8* %v2_d210, i32 0)
  %v2_d214 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d214, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d234 = call i32 @function_11760(i8* nonnull %stack_var_-581, i32 0)
  %v2_d238 = ptrtoint i8* %stack_var_-68 to i32
  %v1_d240 = load i32, i32* @r5, align 4
  %v4_d240 = udiv i32 %v1_d240, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d260 = trunc i32 %v4_d240 to i8
  %v4_d260 = call i32 @function_10c80(i8 %v3_d260, i32 16, i32 %v2_d238)
  %v2_d268 = call i32 @function_1081c(i8* nonnull %stack_var_-68)
  %v7_d26c = icmp eq i32 %v2_d268, 2
  br i1 %v7_d26c, label %dec_label_pc_d734, label %dec_label_pc_d274

dec_label_pc_d274:                                ; preds = %dec_label_pc_d1c4, %dec_label_pc_d734
  %v1_d278 = call i32 @function_10250(i32 13)
  %v1_d280 = call i32 @function_10250(i32 14)
  %v1_d288 = call i32 @function_10250(i32 15)
  %v1_d290 = call i32 @function_10250(i32 17)
  %v0_d294 = load i32, i32* @r4, align 4
  %v2_d29c = inttoptr i32 %v0_d294 to i32*
  %v3_d29c = call i32 @function_1016c(i32 17, i32* %v2_d29c)
  %v0_d2a0 = load i32, i32* @r4, align 4
  %v2_d2a4 = inttoptr i32 %v3_d29c to i8*
  %v3_d2a4 = call i32 @function_1124c(i8* %v2_d2a4, i32 %v0_d2a0)
  %v7_d2a8 = icmp eq i32 %v3_d2a4, -1
  store i32 %v3_d2a4, i32* @r8, align 4
  br i1 %v7_d2a8, label %dec_label_pc_d6d0, label %dec_label_pc_d2b4.preheader

dec_label_pc_d2b4.preheader:                      ; preds = %dec_label_pc_d274
  %v4_d2c058 = call i32 @function_10a74(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2a4)
  %v2_d2c460 = icmp eq i32 %v4_d2c058, 0
  br i1 %v2_d2c460, label %dec_label_pc_d454.loopexit, label %dec_label_pc_d2cc.lr.ph

dec_label_pc_d2cc.lr.ph:                          ; preds = %dec_label_pc_d2b4.preheader
  %v2_d314 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2cc

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d2cc.lr.ph, %dec_label_pc_d2b4.backedge
  %v3_d2d0 = load i8, i8* %stack_var_-581, align 1
  %v4_d2d0 = sext i8 %v3_d2d0 to i32
  %v2_d2d4 = icmp eq i8 %v3_d2d0, 0
  br i1 %v2_d2d4, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_d2cc
  %v8_d2d8 = icmp eq i8 %v3_d2d0, 58
  br i1 %v8_d2d8, label %.thread6, label %dec_label_pc_d2ec

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d304

bb126:                                            ; preds = %dec_label_pc_d2cc
  br label %dec_label_pc_d304

dec_label_pc_d2ec:                                ; preds = %bb
  %v1_d2f4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d2f0

dec_label_pc_d2f0:                                ; preds = %bb127, %dec_label_pc_d2ec
  %v0_d2f0 = phi i32 [ %v1_d2f0, %bb127 ], [ 0, %dec_label_pc_d2ec ]
  %v1_d2f0 = add i32 %v0_d2f0, 1
  %v2_d2f4 = add i32 %v1_d2f0, %v1_d2f4.pre
  %v3_d2f4 = inttoptr i32 %v2_d2f4 to i8*
  %v4_d2f4 = load i8, i8* %v3_d2f4, align 1
  %v6_d2f4 = zext i8 %v4_d2f4 to i32
  %v2_d2f8 = icmp eq i8 %v4_d2f4, 0
  br i1 %v2_d2f8, label %dec_label_pc_d304, label %bb127

bb127:                                            ; preds = %dec_label_pc_d2f0
  %v8_d2fc = icmp eq i8 %v4_d2f4, 58
  br i1 %v8_d2fc, label %dec_label_pc_d304, label %dec_label_pc_d2f0

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2f0, %bb127, %bb126, %.thread6
  %v1_d330 = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_d2f0, %bb127 ], [ %v1_d2f0, %dec_label_pc_d2f0 ]
  %v0_d304 = phi i32 [ %v4_d2d0, %.thread6 ], [ %v4_d2d0, %bb126 ], [ %v6_d2f4, %bb127 ], [ %v6_d2f4, %dec_label_pc_d2f0 ]
  %v2_d304 = icmp eq i32 %v0_d304, 0
  br i1 %v2_d304, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d30c

dec_label_pc_d2b4.backedge:                       ; preds = %dec_label_pc_d304, %dec_label_pc_d3dc, %dec_label_pc_d428, %dec_label_pc_d350
  %v0_d2bc = load i32, i32* @r8, align 4
  %v4_d2c0 = call i32 @function_10a74(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2bc)
  %v2_d2c4 = icmp eq i32 %v4_d2c0, 0
  br i1 %v2_d2c4, label %dec_label_pc_d454.loopexit, label %dec_label_pc_d2cc

dec_label_pc_d30c:                                ; preds = %dec_label_pc_d304
  %v1_d310 = add i32 %v1_d330, 2
  %v2_d318 = add i32 %v1_d310, %v2_d314
  %v1_d31c = add i32 %v2_d318, -545
  %v2_d31c = inttoptr i32 %v1_d31c to i8*
  %v3_d31c = load i8, i8* %v2_d31c, align 1
  %v2_d320 = icmp eq i8 %v3_d31c, 0
  br i1 %v2_d320, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d30c
  %v8_d324 = icmp eq i8 %v3_d31c, 32
  br i1 %v8_d324, label %.thread10, label %dec_label_pc_d330

.thread10:                                        ; preds = %bb128
  store i32 %v1_d310, i32* @r5, align 4
  br label %dec_label_pc_d350

bb129:                                            ; preds = %dec_label_pc_d30c
  store i32 %v1_d310, i32* @r5, align 4
  br label %dec_label_pc_d350

dec_label_pc_d330:                                ; preds = %bb128
  %v0_d330 = load i32, i32* @r6, align 4
  %v2_d330 = add i32 %v0_d330, %v1_d330
  br label %dec_label_pc_d334

dec_label_pc_d334:                                ; preds = %bb130, %dec_label_pc_d330
  %v0_d34013 = phi i32 [ %v1_d340, %bb130 ], [ %v2_d330, %dec_label_pc_d330 ]
  %v1_d334 = add i32 %v0_d34013, 3
  %v2_d334 = inttoptr i32 %v1_d334 to i8*
  %v3_d334 = load i8, i8* %v2_d334, align 1
  %v2_d338 = icmp eq i8 %v3_d334, 0
  br i1 %v2_d338, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_d334
  %v1_d34014 = add i32 %v0_d34013, 1
  br label %dec_label_pc_d348

bb130:                                            ; preds = %dec_label_pc_d334
  %v8_d33c = icmp eq i8 %v3_d334, 32
  %v1_d340 = add i32 %v0_d34013, 1
  br i1 %v8_d33c, label %dec_label_pc_d348, label %dec_label_pc_d334

dec_label_pc_d348:                                ; preds = %bb130, %.thread12
  %v1_d34015 = phi i32 [ %v1_d34014, %.thread12 ], [ %v1_d340, %bb130 ]
  %v2_d348 = sub i32 %v1_d34015, %v0_d330
  %v1_d34c = add i32 %v2_d348, 2
  store i32 %v1_d34c, i32* @r5, align 4
  br label %dec_label_pc_d350

dec_label_pc_d350:                                ; preds = %bb129, %.thread10, %dec_label_pc_d348
  %v1_d35c = phi i32 [ %v1_d310, %.thread10 ], [ %v1_d310, %bb129 ], [ %v1_d34c, %dec_label_pc_d348 ]
  %v0_d350 = load i32, i32* @r6, align 4
  %v2_d350 = add i32 %v0_d350, %v1_d310
  store i32 %v2_d350, i32* @r4, align 4
  %v2_d35c = add i32 %v1_d35c, %v2_d314
  store i32 0, i32* @r7, align 4
  %v3_d368 = add i32 %v2_d35c, -545
  %v4_d368 = inttoptr i32 %v3_d368 to i8*
  store i8 0, i8* %v4_d368, align 1
  %v1_d36c = inttoptr i32 %v2_d350 to i8*
  %v2_d36c = call i32 @function_1081c(i8* %v1_d36c)
  store i32 %v2_d36c, i32* @r1, align 4
  %v0_d378 = load i32, i32* @r4, align 4
  %v3_d37c = inttoptr i32 %v0_d378 to i8*
  %v4_d37c = call i32 @function_10b70(i8* %v3_d37c, i32 %v2_d36c, i32 %v2_d238)
  %v7_d380 = icmp eq i32 %v4_d37c, -1
  br i1 %v7_d380, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d39c.preheader

dec_label_pc_d39c.preheader:                      ; preds = %dec_label_pc_d350
  %v1_d384 = load i32, i32* @r7, align 4
  %v1_d388 = load i32, i32* @r6, align 4
  %v2_d388 = load i32, i32* @r5, align 4
  %v3_d388 = add i32 %v2_d388, %v1_d388
  store i32 %v1_d384, i32* @lr, align 4
  store i32 %v1_d384, i32* @r4, align 4
  %v1_d39c50 = add i32 %v3_d388, 2
  %v2_d39c51 = inttoptr i32 %v1_d39c50 to i8*
  %v3_d39c52 = load i8, i8* %v2_d39c51, align 1
  %v2_d3a054 = icmp eq i8 %v3_d39c52, 0
  %v1_d3a456 = add i32 %v2_d388, 2
  br i1 %v2_d3a054, label %dec_label_pc_d3dc, label %dec_label_pc_d3ac

dec_label_pc_d3ac:                                ; preds = %dec_label_pc_d39c.preheader, %dec_label_pc_d39c.backedge
  %v0_d3dc86 = phi i32 [ %v0_d3dc85, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d3c4.pr = phi i32 [ %v0_d3c4.pr71, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d6e0 = phi i32 [ %v0_d6e074, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d3a482 = phi i32 [ %v1_d3a4, %dec_label_pc_d39c.backedge ], [ %v1_d3a456, %dec_label_pc_d39c.preheader ]
  %v0_d3d4 = phi i32 [ %v0_d39c, %dec_label_pc_d39c.backedge ], [ %v3_d388, %dec_label_pc_d39c.preheader ]
  %v1_d3b0.in = phi i8 [ %v3_d39c, %dec_label_pc_d39c.backedge ], [ %v3_d39c52, %dec_label_pc_d39c.preheader ]
  %v7_d3ac = icmp eq i8 %v1_d3b0.in, 9
  br i1 %v7_d3ac, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3ac
  %v8_d3b0 = icmp eq i8 %v1_d3b0.in, 32
  br i1 %v8_d3b0, label %.thread23.thread35, label %dec_label_pc_d3c4

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_d3d0

.thread23:                                        ; preds = %dec_label_pc_d3ac
  br label %dec_label_pc_d3d0

dec_label_pc_d3c4:                                ; preds = %bb131
  %v7_d3c4 = icmp eq i32 %v0_d3c4.pr, 1
  br i1 %v7_d3c4, label %dec_label_pc_d6e0, label %dec_label_pc_d3cc

dec_label_pc_d3cc:                                ; preds = %dec_label_pc_d6e0, %dec_label_pc_d3c4
  %v0_d3d079 = phi i32 [ %v1_d6e0, %dec_label_pc_d6e0 ], [ %v0_d6e0, %dec_label_pc_d3c4 ]
  br label %dec_label_pc_d3d0

dec_label_pc_d3d0:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3cc
  %v0_d3d0 = phi i32 [ %v0_d6e0, %.thread23.thread35 ], [ %v0_d6e0, %.thread23 ], [ %v0_d3d079, %dec_label_pc_d3cc ]
  %v0_d3c4.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3cc ]
  %v7_d3d8 = icmp sgt i32 %v0_d3d0, 6
  br i1 %v7_d3d8, label %dec_label_pc_d3dc, label %dec_label_pc_d39c.backedge

dec_label_pc_d3dc:                                ; preds = %dec_label_pc_d39c.backedge, %dec_label_pc_d3d0, %dec_label_pc_d39c.preheader
  %v1_d42c = phi i32 [ %v1_d3a456, %dec_label_pc_d39c.preheader ], [ %v1_d3a4, %dec_label_pc_d39c.backedge ], [ %v0_d3a482, %dec_label_pc_d3d0 ]
  %v0_d3dc = phi i32 [ %v1_d384, %dec_label_pc_d39c.preheader ], [ %v0_d3dc85, %dec_label_pc_d39c.backedge ], [ %v0_d3dc86, %dec_label_pc_d3d0 ]
  %v2_d3dc = icmp eq i32 %v0_d3dc, 0
  br i1 %v2_d3dc, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d3e8

dec_label_pc_d3e8:                                ; preds = %dec_label_pc_d3dc
  %v2_d3f0 = add i32 %v1_d42c, %v2_d314
  %v1_d3f4 = add i32 %v2_d3f0, -545
  %v2_d3f4 = inttoptr i32 %v1_d3f4 to i8*
  %v3_d3f4 = load i8, i8* %v2_d3f4, align 1
  %v2_d3f8 = icmp eq i8 %v3_d3f4, 0
  br i1 %v2_d3f8, label %dec_label_pc_d428, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3e8
  %v8_d3fc = icmp eq i8 %v3_d3f4, 32
  br i1 %v8_d3fc, label %dec_label_pc_d428, label %dec_label_pc_d404

dec_label_pc_d404:                                ; preds = %bb132
  %v2_d404 = add i32 %v1_d42c, %v1_d388
  br label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %bb133, %dec_label_pc_d404
  %v0_d41428 = phi i32 [ %v1_d414, %bb133 ], [ %v1_d42c, %dec_label_pc_d404 ]
  %v0_d408 = phi i32 [ %v1_d408, %bb133 ], [ %v2_d404, %dec_label_pc_d404 ]
  %v1_d408 = add i32 %v0_d408, 1
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_d408
  %v1_d41429 = add i32 %v0_d41428, 1
  br label %dec_label_pc_d41c

bb133:                                            ; preds = %dec_label_pc_d408
  %v8_d410 = icmp eq i8 %v3_d408, 32
  %v1_d414 = add i32 %v0_d41428, 1
  br i1 %v8_d410, label %dec_label_pc_d41c, label %dec_label_pc_d408

dec_label_pc_d41c:                                ; preds = %bb133, %.thread27
  %v1_d424 = phi i32 [ %v1_d41429, %.thread27 ], [ %v1_d414, %bb133 ]
  %v2_d424 = add i32 %v1_d424, %v2_d314
  br label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d3e8, %bb132, %dec_label_pc_d41c
  %v2_d434 = phi i32 [ %v2_d3f0, %dec_label_pc_d3e8 ], [ %v2_d3f0, %bb132 ], [ %v2_d424, %dec_label_pc_d41c ]
  %v2_d42c = add i32 %v1_d42c, %v1_d388
  store i32 %v2_d42c, i32* @r4, align 4
  %v3_d434 = add i32 %v2_d434, -545
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 0, i8* %v4_d434, align 1
  %v1_d438 = inttoptr i32 %v2_d42c to i8*
  %v2_d438 = call i32 @function_1081c(i8* %v1_d438)
  %v8_d440 = icmp sgt i32 %v2_d438, 15
  br i1 %v8_d440, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d444

dec_label_pc_d444:                                ; preds = %dec_label_pc_d428
  %v0_d448 = load i32, i32* @r4, align 4
  %v2_d44c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d44c, i32* @r0, align 4
  %v2_d450 = bitcast i32* %stack_var_-52 to i8*
  %v3_d450 = call i32 @function_10844(i8* %v2_d450, i32 %v0_d448)
  br label %dec_label_pc_d454

dec_label_pc_d454.loopexit:                       ; preds = %dec_label_pc_d2b4.backedge, %dec_label_pc_d2b4.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d454

dec_label_pc_d454:                                ; preds = %dec_label_pc_d454.loopexit, %dec_label_pc_d444
  %v1_d464.pre-phi = phi i8* [ %.pre95, %dec_label_pc_d454.loopexit ], [ %v2_d450, %dec_label_pc_d444 ]
  %v2_d460.pre-phi = phi i32 [ %.pre, %dec_label_pc_d454.loopexit ], [ %v2_d44c, %dec_label_pc_d444 ]
  %v0_d454 = load i32, i32* @r8, align 4
  %v1_d458 = call i32 @function_11120(i32 %v0_d454)
  %v2_d464 = call i32 @function_1081c(i8* %v1_d464.pre-phi)
  store i32 %v2_d464, i32* @r4, align 4
  %v2_d468 = icmp eq i32 %v2_d464, 0
  br i1 %v2_d468, label %dec_label_pc_d710, label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d454
  %v3_d478 = call i32 @function_1016c(i32 13, i32* null)
  %v1_d47c = call i32 @function_11528(i32 %v3_d478)
  store i32 %v1_d47c, i32* @r8, align 4
  %v2_d480 = icmp eq i32 %v1_d47c, 0
  br i1 %v2_d480, label %dec_label_pc_d6b0, label %dec_label_pc_d490.preheader

dec_label_pc_d490.preheader:                      ; preds = %dec_label_pc_d470
  store i32 0, i32* @r5, align 4
  %v1_d49445 = inttoptr i32 %v1_d47c to i32*
  %v2_d49446 = call i32 @function_11624(i32* %v1_d49445)
  %v2_d49848 = icmp eq i32 %v2_d49446, 0
  br i1 %v2_d49848, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0.preheader

dec_label_pc_d490.loopexit:                       ; preds = %dec_label_pc_d4a8, %dec_label_pc_d4bc, %dec_label_pc_d524
  %v0_d490 = load i32, i32* @r8, align 4
  %v1_d494 = inttoptr i32 %v0_d490 to i32*
  %v2_d494 = call i32 @function_11624(i32* %v1_d494)
  %v2_d498 = icmp eq i32 %v2_d494, 0
  br i1 %v2_d498, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0.preheader

dec_label_pc_d4a0.preheader:                      ; preds = %dec_label_pc_d490.preheader, %dec_label_pc_d490.loopexit
  %v0_d4a894 = phi i32 [ %v2_d494, %dec_label_pc_d490.loopexit ], [ %v2_d49446, %dec_label_pc_d490.preheader ]
  br label %dec_label_pc_d4a0

dec_label_pc_d4a0:                                ; preds = %dec_label_pc_d4a0.preheader, %dec_label_pc_d68c
  %v0_d4b4 = phi i32 [ %v0_d4a894, %dec_label_pc_d4a0.preheader ], [ %v2_d698, %dec_label_pc_d68c ]
  %v0_d4a0 = load i32, i32* @r5, align 4
  %v2_d4a0 = icmp eq i32 %v0_d4a0, 0
  br i1 %v2_d4a0, label %dec_label_pc_d4a8, label %dec_label_pc_d6a4

dec_label_pc_d4a8:                                ; preds = %dec_label_pc_d4a0
  %v1_d4a8 = add i32 %v0_d4b4, 11
  %v2_d4a8 = inttoptr i32 %v1_d4a8 to i8*
  %v3_d4a8 = load i8, i8* %v2_d4a8, align 1
  %v4_d4a8 = zext i8 %v3_d4a8 to i32
  %v1_d4ac = add nsw i32 %v4_d4a8, -48
  store i32 %v1_d4a8, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4ac, 9
  br i1 %tmp, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4a8
  %v3_d4c4 = call i32 @function_1016c(i32 13, i32* null)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d4d0 = call i32 @function_10844(i8* %v2_d1f8, i32 %v3_d4c4)
  %v2_d4d8 = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d4dc = load i32, i32* @r7, align 4
  %v0_d4e0 = load i32, i32* @sl, align 4
  %v2_d4e0 = add i32 %v0_d4e0, %v2_d4d8
  store i32 %v2_d4e0, i32* @r0, align 4
  %v2_d4e4 = inttoptr i32 %v2_d4e0 to i8*
  %v3_d4e4 = call i32 @function_10844(i8* %v2_d4e4, i32 %v0_d4dc)
  %v2_d4ec = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d4f0 = load i32, i32* @r5, align 4
  store i32 %v2_d4ec, i32* @r4, align 4
  %v2_d4fc = inttoptr i32 %v0_d4f0 to i32*
  %v3_d4fc = call i32 @function_1016c(i32 14, i32* %v2_d4fc)
  %v0_d504 = load i32, i32* @sl, align 4
  %v1_d504 = load i32, i32* @r4, align 4
  %v2_d504 = add i32 %v1_d504, %v0_d504
  store i32 %v2_d504, i32* @r0, align 4
  %v2_d508 = inttoptr i32 %v2_d504 to i8*
  %v3_d508 = call i32 @function_10844(i8* %v2_d508, i32 %v3_d4fc)
  %v4_d518 = call i32 @function_11314(i8* %v2_d1f8, i32 %v2_d1ec, i32 4096)
  %v7_d51c = icmp eq i32 %v4_d518, -1
  br i1 %v7_d51c, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d524

dec_label_pc_d524:                                ; preds = %dec_label_pc_d4bc
  %v0_d524 = load i32, i32* @r5, align 4
  %v2_d52c = inttoptr i32 %v0_d524 to i32*
  %v3_d52c = call i32 @function_1016c(i32 13, i32* %v2_d52c)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d538 = call i32 @function_10844(i8* %v2_d1f8, i32 %v3_d52c)
  %v2_d540 = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d544 = load i32, i32* @r7, align 4
  %v0_d548 = load i32, i32* @sl, align 4
  %v2_d548 = add i32 %v0_d548, %v2_d540
  store i32 %v2_d548, i32* @r0, align 4
  %v2_d54c = inttoptr i32 %v2_d548 to i8*
  %v3_d54c = call i32 @function_10844(i8* %v2_d54c, i32 %v0_d544)
  %v2_d554 = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d558 = load i32, i32* @r5, align 4
  store i32 %v2_d554, i32* @r4, align 4
  %v2_d564 = inttoptr i32 %v0_d558 to i32*
  %v3_d564 = call i32 @function_1016c(i32 15, i32* %v2_d564)
  %v0_d56c = load i32, i32* @sl, align 4
  %v1_d56c = load i32, i32* @r4, align 4
  %v2_d56c = add i32 %v1_d56c, %v0_d56c
  store i32 %v2_d56c, i32* @r0, align 4
  %v2_d570 = inttoptr i32 %v2_d56c to i8*
  %v3_d570 = call i32 @function_10844(i8* %v2_d570, i32 %v3_d564)
  %v1_d578 = call i32 @function_11528(i32 %v2_d1d8)
  store i32 %v1_d578, i32* @sb, align 4
  %v2_d57c = icmp eq i32 %v1_d578, 0
  br i1 %v2_d57c, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d584.preheader

dec_label_pc_d584.preheader:                      ; preds = %dec_label_pc_d524
  %v1_d58840 = inttoptr i32 %v1_d578 to i32*
  %v2_d58841 = call i32 @function_11624(i32* %v1_d58840)
  store i32 %v2_d58841, i32* @r6, align 4
  %v2_d58c43 = icmp eq i32 %v2_d58841, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d58c43, label %dec_label_pc_d68c, label %dec_label_pc_d59cthread-pre-split

dec_label_pc_d584.loopexit:                       ; preds = %dec_label_pc_d5a4, %dec_label_pc_d63c
  %v0_d584 = load i32, i32* @sb, align 4
  %v1_d588 = inttoptr i32 %v0_d584 to i32*
  %v2_d588 = call i32 @function_11624(i32* %v1_d588)
  store i32 %v2_d588, i32* @r6, align 4
  %v2_d58c = icmp eq i32 %v2_d588, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d58c, label %dec_label_pc_d68c, label %dec_label_pc_d59cthread-pre-split

dec_label_pc_d59cthread-pre-split:                ; preds = %dec_label_pc_d584.preheader, %dec_label_pc_d584.loopexit
  %v0_d59c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d59c

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d59cthread-pre-split, %dec_label_pc_d664
  %v0_d59c = phi i32 [ %v0_d59c.pr, %dec_label_pc_d59cthread-pre-split ], [ 1, %dec_label_pc_d664 ]
  %v2_d59c = icmp eq i32 %v0_d59c, 0
  br i1 %v2_d59c, label %dec_label_pc_d5a4, label %dec_label_pc_d68c

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d59c
  %v0_d5a4 = call i32 @function_108bc()
  %v0_d5a8 = load i32, i32* @r5, align 4
  %v2_d5b0 = inttoptr i32 %v0_d5a8 to i32*
  %v3_d5b0 = call i32 @function_1016c(i32 13, i32* %v2_d5b0)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d5bc = call i32 @function_10844(i8* %v2_d1f8, i32 %v3_d5b0)
  %v2_d5c4 = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d5c8 = load i32, i32* @r7, align 4
  %v0_d5cc = load i32, i32* @sl, align 4
  %v2_d5cc = add i32 %v0_d5cc, %v2_d5c4
  store i32 %v2_d5cc, i32* @r0, align 4
  %v2_d5d0 = inttoptr i32 %v2_d5cc to i8*
  %v3_d5d0 = call i32 @function_10844(i8* %v2_d5d0, i32 %v0_d5c8)
  %v2_d5d8 = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d5dc = load i32, i32* @r5, align 4
  store i32 %v2_d5d8, i32* @r4, align 4
  %v2_d5e8 = inttoptr i32 %v0_d5dc to i32*
  %v3_d5e8 = call i32 @function_1016c(i32 15, i32* %v2_d5e8)
  %v0_d5f0 = load i32, i32* @sl, align 4
  %v1_d5f0 = load i32, i32* @r4, align 4
  %v2_d5f0 = add i32 %v1_d5f0, %v0_d5f0
  store i32 %v2_d5f0, i32* @r0, align 4
  %v2_d5f4 = inttoptr i32 %v2_d5f0 to i8*
  %v3_d5f4 = call i32 @function_10844(i8* %v2_d5f4, i32 %v3_d5e8)
  %v2_d5fc = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d604 = load i32, i32* @sl, align 4
  %v2_d604 = add i32 %v0_d604, %v2_d5fc
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_10844(i8* %v2_d608, i32 ptrtoint (i32* @global_var_13974.62 to i32))
  %v2_d610 = call i32 @function_1081c(i8* %v2_d1f8)
  %v0_d614 = load i32, i32* @r6, align 4
  %v1_d614 = add i32 %v0_d614, 11
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_10844(i8* %v2_d61c, i32 %v1_d614)
  %v4_d62c = call i32 @function_11314(i8* %v2_d1f8, i32 %v2_d1ec, i32 4096)
  %v7_d630 = icmp eq i32 %v4_d62c, -1
  br i1 %v7_d630, label %dec_label_pc_d584.loopexit, label %dec_label_pc_d63c

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d5a4
  %v2_d63c = call i32 @function_1081c(i8* %v2_d210)
  store i32 %v2_d63c, i32* @r1, align 4
  %v4_d650 = call i32 @function_10b70(i8* %v2_d210, i32 %v2_d63c, i32 %v2_d460.pre-phi)
  %v7_d654 = icmp eq i32 %v4_d650, -1
  br i1 %v7_d654, label %dec_label_pc_d584.loopexit, label %dec_label_pc_d664

dec_label_pc_d664:                                ; preds = %dec_label_pc_d63c
  %v0_d65c = load i32, i32* @r7, align 4
  %v2_d664 = inttoptr i32 %v0_d65c to i8*
  %v3_d664 = call i32 @function_10948(i8* %v2_d664, i32 10)
  %v2_d66c = call i32 @function_11220(i32 %v3_d664, i32 9)
  %v0_d670 = load i32, i32* @sb, align 4
  %v1_d674 = inttoptr i32 %v0_d670 to i32*
  %v2_d674 = call i32 @function_11624(i32* %v1_d674)
  store i32 %v2_d674, i32* @r6, align 4
  %v2_d678 = icmp eq i32 %v2_d674, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d678, label %dec_label_pc_d68c, label %dec_label_pc_d59c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d584.loopexit, %dec_label_pc_d664, %dec_label_pc_d59c, %dec_label_pc_d584.preheader
  %v0_d68c = load i32, i32* @sb, align 4
  %v1_d690 = inttoptr i32 %v0_d68c to i32*
  %v2_d690 = call i32 @function_11474(i32* %v1_d690)
  %v0_d694 = load i32, i32* @r8, align 4
  %v1_d698 = inttoptr i32 %v0_d694 to i32*
  %v2_d698 = call i32 @function_11624(i32* %v1_d698)
  %v2_d69c = icmp eq i32 %v2_d698, 0
  br i1 %v2_d69c, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0

dec_label_pc_d6a4:                                ; preds = %dec_label_pc_d490.loopexit, %dec_label_pc_d68c, %dec_label_pc_d4a0, %dec_label_pc_d490.preheader
  %v0_d6a4 = load i32, i32* @r8, align 4
  %v1_d6a8 = inttoptr i32 %v0_d6a4 to i32*
  %v2_d6a8 = call i32 @function_11474(i32* %v1_d6a8)
  %v0_d6ac = load i32, i32* @r5, align 4
  %v1_d6ac = urem i32 %v0_d6ac, 256
  br label %dec_label_pc_d6b0

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d470, %dec_label_pc_d6a4
  %storemerge = phi i32 [ %v1_d6ac, %dec_label_pc_d6a4 ], [ 0, %dec_label_pc_d470 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6b4 = call i32 @function_12500(i32 1)
  %v1_d6bc = call i32 @function_10198(i32 13)
  %v1_d6c4 = call i32 @function_10198(i32 14)
  %v1_d6cc = call i32 @function_10198(i32 15)
  br label %dec_label_pc_d6d0

dec_label_pc_d6d0:                                ; preds = %dec_label_pc_d274, %dec_label_pc_d710, %dec_label_pc_d6b0
  %v0_d6d0 = load i32, i32* @r4, align 4
  %v2_d6dc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6dc, i32* @r4, align 4
  store i32 %v6_d1c4, i32* @r5, align 4
  store i32 %v9_d1c4, i32* @r6, align 4
  store i32 %v12_d1c4, i32* @r7, align 4
  store i32 %v15_d1c4, i32* @r8, align 4
  store i32 %v18_d1c4, i32* @sb, align 4
  store i32 %v21_d1c4, i32* @sl, align 4
  store i32 %v24_d1c4, i32* @fp, align 4
  ret i32 %v0_d6d0

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d3c4
  %v1_d6e0 = add i32 %v0_d6e0, 1
  store i32 %v1_d6e0, i32* @lr, align 4
  %v7_d6e4 = icmp eq i32 %v0_d6e0, 0
  br i1 %v7_d6e4, label %dec_label_pc_d6ec, label %dec_label_pc_d3cc

dec_label_pc_d6ec:                                ; preds = %dec_label_pc_d6e0
  %v1_d6ec = add i32 %v0_d3d4, 3
  %v2_d6ec = inttoptr i32 %v1_d6ec to i8*
  %v3_d6ec = load i8, i8* %v2_d6ec, align 1
  %v7_d6f0 = icmp eq i8 %v3_d6ec, 65
  br i1 %v7_d6f0, label %dec_label_pc_d700, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d6ec
  br label %dec_label_pc_d39c.backedge

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6ec
  store i32 %v1_d6e0, i32* @r4, align 4
  br label %dec_label_pc_d39c.backedge

dec_label_pc_d39c.backedge:                       ; preds = %.thread33, %dec_label_pc_d700, %dec_label_pc_d3d0
  %v0_d3dc85 = phi i32 [ %v1_d6e0, %dec_label_pc_d700 ], [ %v0_d3dc86, %dec_label_pc_d3d0 ], [ %v0_d3dc86, %.thread33 ]
  %v0_d6e074 = phi i32 [ %v1_d6e0, %dec_label_pc_d700 ], [ %v0_d3d0, %dec_label_pc_d3d0 ], [ %v1_d6e0, %.thread33 ]
  %v0_d3c4.pr71 = phi i32 [ 0, %dec_label_pc_d700 ], [ %v0_d3c4.pr72, %dec_label_pc_d3d0 ], [ 0, %.thread33 ]
  %v0_d39c = add i32 %v0_d3d4, 1
  %v1_d39c = add i32 %v0_d3d4, 3
  %v2_d39c = inttoptr i32 %v1_d39c to i8*
  %v3_d39c = load i8, i8* %v2_d39c, align 1
  %v2_d3a0 = icmp eq i8 %v3_d39c, 0
  %v1_d3a4 = add i32 %v0_d3a482, 1
  br i1 %v2_d3a0, label %dec_label_pc_d3dc, label %dec_label_pc_d3ac

dec_label_pc_d710:                                ; preds = %dec_label_pc_d454
  %v1_d714 = call i32 @function_10198(i32 13)
  %v1_d71c = call i32 @function_10198(i32 14)
  %v1_d724 = call i32 @function_10198(i32 15)
  %v1_d72c = call i32 @function_10198(i32 17)
  br label %dec_label_pc_d6d0

dec_label_pc_d734:                                ; preds = %dec_label_pc_d1c4
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d274

; uselistorder directives
  uselistorder i32 %v1_d3a4, { 1, 0 }
  uselistorder i8 %v3_d39c, { 1, 0 }
  uselistorder i32 %v0_d3dc85, { 1, 0 }
  uselistorder i32 %v1_d6e0, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d698, { 1, 0 }
  uselistorder i32 %v1_d408, { 1, 0 }
  uselistorder i32 %v0_d41428, { 1, 0 }
  uselistorder i32 %v1_d42c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d3d0, { 1, 0 }
  uselistorder i32 %v0_d3a482, { 1, 0 }
  uselistorder i32 %v0_d6e0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3dc86, { 1, 2, 0 }
  uselistorder i32 %v1_d3a456, { 1, 0 }
  uselistorder i32 %v2_d388, { 1, 0 }
  uselistorder i32 %v1_d384, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d34013, { 1, 0, 2 }
  uselistorder i32 %v0_d330, { 1, 0 }
  uselistorder i32 %v1_d310, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2a4, { 1, 2, 0 }
  uselistorder i32 %v2_d1ec, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_10948, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_10a74, { 1, 0 }
  uselistorder label %dec_label_pc_d39c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6d0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6b0, { 1, 0 }
  uselistorder label %dec_label_pc_d6a4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d68c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d59c, { 1, 0 }
  uselistorder label %dec_label_pc_d59cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d584.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4a0, { 1, 0 }
  uselistorder label %dec_label_pc_d4a0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d490.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d428, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3ac, { 1, 0 }
  uselistorder label %dec_label_pc_d350, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2b4.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d304, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2cc, { 1, 0 }
  uselistorder label %dec_label_pc_d274, { 1, 0 }
}

define i32 @function_d760(i32 %arg1) local_unnamed_addr {
dec_label_pc_d760:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-8380 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-8388 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d760 = load i32, i32* @r4, align 4
  store i32 %v3_d760, i32* %stack_var_-36, align 4
  %v6_d760 = load i32, i32* @r5, align 4
  %v9_d760 = load i32, i32* @r6, align 4
  %v12_d760 = load i32, i32* @r7, align 4
  %v15_d760 = load i32, i32* @r8, align 4
  %v18_d760 = load i32, i32* @sb, align 4
  %v21_d760 = load i32, i32* @sl, align 4
  %v24_d760 = load i32, i32* @fp, align 4
  %v2_d770 = call i32 @function_113f0(i32* null)
  store i32 %v2_d770, i32* @r7, align 4
  %v0_d778 = call i32 @function_1114c()
  %v7_d77c = icmp eq i32 %v0_d778, -1
  %. = zext i1 %v7_d77c to i32
  %tmp99 = icmp slt i32 %v0_d778, 1
  %storemerge73 = select i1 %tmp99, i32 %., i32 1
  store i32 %storemerge73, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1c238.64 to i32), i32* %r3.global-to-local, align 4
  %v2_d798 = icmp eq i32 %storemerge73, 0
  store i32 %v0_d778, i32* @global_var_1c238.64, align 4
  br i1 %v2_d798, label %dec_label_pc_d7b0, label %dec_label_pc_d7a4

dec_label_pc_d7a4:                                ; preds = %dec_label_pc_d8d8, %dec_label_pc_d7b0, %dec_label_pc_d760
  %v29_d7ac = phi i32 [ %v3_d868, %dec_label_pc_d7b0 ], [ %v0_d778, %dec_label_pc_d760 ], [ 0, %dec_label_pc_d8d8 ]
  %v2_d7ac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d7ac, i32* @r4, align 4
  store i32 %v6_d760, i32* @r5, align 4
  store i32 %v9_d760, i32* @r6, align 4
  store i32 %v12_d760, i32* @r7, align 4
  store i32 %v15_d760, i32* @r8, align 4
  store i32 %v18_d760, i32* @sb, align 4
  store i32 %v21_d760, i32* @sl, align 4
  store i32 %v24_d760, i32* @fp, align 4
  ret i32 %v29_d7ac

dec_label_pc_d7b0:                                ; preds = %dec_label_pc_d760
  %v1_d7b4 = call i32 @function_12500(i32 5)
  %v1_d7bc = call i32 @function_11b7c(i32 4096)
  store i32 ptrtoint (i32* @global_var_1c198.66 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c234.68 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_d7bc, i32* %r2.global-to-local, align 4
  %v0_d7cc = load i32, i32* @r5, align 4
  %v1_d7cc = trunc i32 %v0_d7cc to i8
  %v3_d7cc = inttoptr i32 %v1_d7bc to i8*
  store i8 %v1_d7cc, i8* %v3_d7cc, align 1
  %v0_d7d4 = load i32, i32* @r5, align 4
  %v1_d7d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_d7d4 = inttoptr i32 %v1_d7d4 to i32*
  store i32 %v0_d7d4, i32* %v2_d7d4, align 4
  %v0_d7d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d7d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_d7d8 = inttoptr i32 %v1_d7d8 to i32*
  store i32 %v0_d7d8, i32* %v2_d7d8, align 4
  %v1_d7dc = call i32 @function_10250(i32 13)
  %v1_d7e4 = call i32 @function_10250(i32 14)
  %v2_d7ec = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_d7ec, i32* %r2.global-to-local, align 4
  %v0_d7f0 = load i32, i32* @r5, align 4
  store i32 %v0_d7f0, i32* %r1.global-to-local, align 4
  store i32 %v2_d7ec, i32* %stack_var_-8388, align 4
  %v2_d7fc = inttoptr i32 %v0_d7f0 to i32*
  %v3_d7fc = call i32 @function_1016c(i32 13, i32* %v2_d7fc)
  %v1_d804 = add i32 %v2_d7ec, -24
  store i32 %v1_d804, i32* %r3.global-to-local, align 4
  store i32 %v3_d7fc, i32* %r1.global-to-local, align 4
  store i32 %v1_d804, i32* @r0, align 4
  store i32 %v1_d804, i32* %stack_var_-8388, align 4
  %v2_d814 = inttoptr i32 %v1_d804 to i8*
  %v3_d814 = call i32 @function_10844(i8* %v2_d814, i32 %v3_d7fc)
  store i32 %v1_d804, i32* %r1.global-to-local, align 4
  %v2_d81c = add i32 %v1_d804, %v3_d814
  store i32 %v2_d81c, i32* @r4, align 4
  %v0_d820 = call i32 @function_11178()
  %v2_d828 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_d828, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d830 = trunc i32 %v0_d820 to i8
  %v4_d830 = call i32 @function_10c80(i8 %v3_d830, i32 10, i32 %v2_d828)
  store i32 %v4_d830, i32* %r1.global-to-local, align 4
  %v0_d838 = load i32, i32* @r4, align 4
  store i32 %v0_d838, i32* @r0, align 4
  %v2_d83c = inttoptr i32 %v0_d838 to i8*
  %v3_d83c = call i32 @function_10844(i8* %v2_d83c, i32 %v4_d830)
  %v0_d840 = load i32, i32* @r5, align 4
  store i32 %v0_d840, i32* %r1.global-to-local, align 4
  %v0_d844 = load i32, i32* @r4, align 4
  %v2_d844 = add i32 %v0_d844, %v3_d83c
  store i32 %v2_d844, i32* @r4, align 4
  %v2_d84c = inttoptr i32 %v0_d840 to i32*
  %v3_d84c = call i32 @function_1016c(i32 14, i32* %v2_d84c)
  store i32 %v3_d84c, i32* %r1.global-to-local, align 4
  %v0_d854 = load i32, i32* @r4, align 4
  store i32 %v0_d854, i32* @r0, align 4
  %v2_d858 = inttoptr i32 %v0_d854 to i8*
  %v3_d858 = call i32 @function_10844(i8* %v2_d858, i32 %v3_d84c)
  %v0_d85c = load i32, i32* @r5, align 4
  store i32 %v0_d85c, i32* %r1.global-to-local, align 4
  store i32 %v3_d858, i32* @r6, align 4
  %v2_d864 = load i32, i32* %stack_var_-8388, align 4
  %v2_d868 = inttoptr i32 %v2_d864 to i8*
  %v3_d868 = call i32 @function_1124c(i8* %v2_d868, i32 %v0_d85c)
  %v7_d86c = icmp eq i32 %v3_d868, -1
  br i1 %v7_d86c, label %dec_label_pc_d7a4, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_d7b0
  %v1_d874 = call i32 @function_11120(i32 %v3_d868)
  %v1_d87c = call i32 @function_10198(i32 13)
  %v1_d884 = call i32 @function_10198(i32 14)
  store i32 ptrtoint (i32* @global_var_1c234.68 to i32), i32* %r3.global-to-local, align 4
  %v2_d890 = load i32, i32* @global_var_1c234.68, align 4
  store i32 %v2_d890, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_d898 = load i32, i32* %stack_var_-8388, align 4
  %v3_d89c = inttoptr i32 %v2_d898 to i8*
  %v4_d89c = call i32 @function_11314(i8* %v3_d89c, i32 %v2_d890, i32 4095)
  %v7_d8a0 = icmp eq i32 %v4_d89c, -1
  br i1 %v7_d8a0, label %.thread4, label %bb102

bb102:                                            ; preds = %dec_label_pc_d874
  store i32 ptrtoint (i32* @global_var_1c234.68 to i32), i32* %r1.global-to-local, align 4
  %v3_d8a8 = load i32, i32* @global_var_1c234.68, align 4
  store i32 %v3_d8a8, i32* %r3.global-to-local, align 4
  %v1_d8ac = load i32, i32* @r5, align 4
  %v2_d8ac = trunc i32 %v1_d8ac to i8
  %v5_d8ac = add i32 %v3_d8a8, %v4_d89c
  %v6_d8ac = inttoptr i32 %v5_d8ac to i8*
  store i8 %v2_d8ac, i8* %v6_d8ac, align 1
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_d874, %bb102
  %v2_d8b0 = load i32, i32* %stack_var_-8388, align 4
  store i32 %v2_d8b0, i32* %r2.global-to-local, align 4
  %v0_d8b4 = load i32, i32* @r4, align 4
  %v1_d8b4 = load i32, i32* @r6, align 4
  %v2_d8b4 = sub i32 %v0_d8b4, %v2_d8b0
  %v2_d8b8 = add i32 %v2_d8b4, %v1_d8b4
  store i32 %v2_d8b8, i32* @r1, align 4
  store i32 %v2_d8b0, i32* @r0, align 4
  %v0_d8c0 = call i32 @function_108bc()
  %v0_d8c8 = load i32, i32* @r5, align 4
  store i32 %v0_d8c8, i32* @fp, align 4
  %v0_d8cc = load i32, i32* @r7, align 4
  store i32 %v0_d8cc, i32* @r4, align 4
  %v2_d8d0 = ptrtoint i32* %stack_var_-8380 to i32
  store i32 %v2_d8d0, i32* @sl, align 4
  store i32 400, i32* @r5, align 4
  %v2_d9e8 = ptrtoint i32* %stack_var_-188 to i32
  %v2_d9ec = bitcast i32* %stack_var_-188 to i8*
  %v2_da38 = ptrtoint i32* %stack_var_-124 to i32
  %v2_da3c = bitcast i32* %stack_var_-124 to i8*
  %v2_da88 = ptrtoint i32* %stack_var_-196 to i32
  %v2_db98 = ptrtoint i32* %stack_var_-40 to i32
  %v2_dbac = ptrtoint i32* %stack_var_-44 to i32
  %v2_dab4 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d8d8

dec_label_pc_d8d8:                                ; preds = %dec_label_pc_d9ac, %.thread4
  %v1_d8dc = call i32 @function_10250(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d8e8 = call i32 @function_1016c(i32 13, i32* null)
  %v1_d8ec = call i32 @function_11528(i32 %v3_d8e8)
  store i32 %v1_d8ec, i32* @sb, align 4
  %v2_d8f0 = icmp eq i32 %v1_d8ec, 0
  br i1 %v2_d8f0, label %dec_label_pc_d7a4, label %dec_label_pc_d8f8

dec_label_pc_d8f8:                                ; preds = %dec_label_pc_d8d8
  %v1_d8fc = call i32 @function_10198(i32 13)
  %v1_d908 = call i32 @function_d1c4(i32 58811)
  %v1_d914 = call i32 @function_d1c4(i32 50951)
  %v1_d920 = call i32 @function_d1c4(i32 14853)
  %v0_d92444 = load i32, i32* @sb, align 4
  %v1_d92845 = inttoptr i32 %v0_d92444 to i32*
  %v2_d92846 = call i32 @function_11624(i32* %v1_d92845)
  %v2_d92c48 = icmp eq i32 %v2_d92846, 0
  br i1 %v2_d92c48, label %dec_label_pc_d9ac, label %dec_label_pc_d934.preheader

dec_label_pc_d934.preheader:                      ; preds = %dec_label_pc_d8f8, %dec_label_pc_d924.backedge
  %v0_d93453 = phi i32 [ %v2_d928, %dec_label_pc_d924.backedge ], [ %v2_d92846, %dec_label_pc_d8f8 ]
  br label %dec_label_pc_d934

dec_label_pc_d934:                                ; preds = %dec_label_pc_d934.preheader, %dec_label_pc_d994
  %v0_d944 = phi i32 [ %v0_d93453, %dec_label_pc_d934.preheader ], [ %v2_d9a0, %dec_label_pc_d994 ]
  %v1_d934 = add i32 %v0_d944, 11
  %v2_d934 = inttoptr i32 %v1_d934 to i8*
  %v3_d934 = load i8, i8* %v2_d934, align 1
  %v4_d934 = zext i8 %v3_d934 to i32
  %v1_d938 = add nsw i32 %v4_d934, -48
  store i32 %v1_d938, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d938, 9
  br i1 %tmp, label %dec_label_pc_d924.backedge, label %dec_label_pc_d944

dec_label_pc_d944:                                ; preds = %dec_label_pc_d934
  store i32 %v1_d934, i32* @r6, align 4
  %v2_d94c = call i32 @function_122c0(i8* %v2_d934)
  %v0_d950 = load i32, i32* @r5, align 4
  store i32 %v2_d94c, i32* @r7, align 4
  %v0_d958 = load i32, i32* @fp, align 4
  %v1_d958 = add i32 %v0_d958, 1
  store i32 %v1_d958, i32* @fp, align 4
  %v5_d95c = icmp slt i32 %v0_d950, %v2_d94c
  %v2_d9bc = call i32 @function_113f0(i32* null)
  br i1 %v5_d95c, label %dec_label_pc_d9b8, label %dec_label_pc_d960

dec_label_pc_d960:                                ; preds = %dec_label_pc_d944
  %v0_d968 = load i32, i32* @r4, align 4
  %v2_d968 = sub i32 %v2_d9bc, %v0_d968
  %v7_d970 = icmp slt i32 %v2_d968, 601
  br i1 %v7_d970, label %dec_label_pc_d978, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_d960
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d924.backedge

dec_label_pc_d978:                                ; preds = %dec_label_pc_d960
  %v0_d978 = load i32, i32* @r7, align 4
  %v7_d97c = icmp slt i32 %v0_d978, 401
  br i1 %v7_d97c, label %dec_label_pc_d924.backedge, label %dec_label_pc_d980

dec_label_pc_d980:                                ; preds = %dec_label_pc_d978
  %v0_d980 = load i32, i32* @fp, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_d988 = call i32 @function_10ea8(i32 %v0_d980, i32 10)
  %v2_d98c = icmp eq i32 %v2_d988, 0
  br i1 %v2_d98c, label %dec_label_pc_d994, label %dec_label_pc_d924.backedge

dec_label_pc_d994:                                ; preds = %dec_label_pc_d980
  %v1_d998 = call i32 @function_12500(i32 1)
  %v0_d99c = load i32, i32* @sb, align 4
  %v1_d9a0 = inttoptr i32 %v0_d99c to i32*
  %v2_d9a0 = call i32 @function_11624(i32* %v1_d9a0)
  %v2_d9a4 = icmp eq i32 %v2_d9a0, 0
  br i1 %v2_d9a4, label %dec_label_pc_d9ac, label %dec_label_pc_d934

dec_label_pc_d9ac:                                ; preds = %dec_label_pc_d924.backedge, %dec_label_pc_d994, %dec_label_pc_d8f8
  %v0_d9ac = load i32, i32* @sb, align 4
  %v1_d9b0 = inttoptr i32 %v0_d9ac to i32*
  %v2_d9b0 = call i32 @function_11474(i32* %v1_d9b0)
  br label %dec_label_pc_d8d8

dec_label_pc_d9b8:                                ; preds = %dec_label_pc_d944
  %v1_d9c8 = call i32 @function_10250(i32 13)
  %v1_d9d0 = call i32 @function_10250(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d9dc = call i32 @function_1016c(i32 13, i32* null)
  store i32 %v3_d9dc, i32* %r1.global-to-local, align 4
  store i32 %v2_d9e8, i32* @r0, align 4
  %v3_d9ec = call i32 @function_10844(i8* %v2_d9ec, i32 %v3_d9dc)
  store i32 %v2_d9e8, i32* %r3.global-to-local, align 4
  %v2_d9f8 = add i32 %v3_d9ec, %v2_d9e8
  store i32 %v2_d9f8, i32* %r5.global-to-local, align 4
  %v0_d9fc = load i32, i32* @r6, align 4
  store i32 %v0_d9fc, i32* %r1.global-to-local, align 4
  store i32 %v2_d9f8, i32* @r0, align 4
  %v2_da04 = inttoptr i32 %v2_d9f8 to i8*
  %v3_da04 = call i32 @function_10844(i8* %v2_da04, i32 %v0_d9fc)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_da14 = call i32 @function_1016c(i32 14, i32* null)
  store i32 %v3_da14, i32* %r1.global-to-local, align 4
  %v0_da1c = load i32, i32* %r5.global-to-local, align 4
  %v2_da1c = add i32 %v3_da04, %v0_da1c
  store i32 %v2_da1c, i32* @r0, align 4
  %v2_da20 = inttoptr i32 %v2_da1c to i8*
  %v3_da20 = call i32 @function_10844(i8* %v2_da20, i32 %v3_da14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_da2c = call i32 @function_1016c(i32 13, i32* null)
  store i32 %v3_da2c, i32* %r1.global-to-local, align 4
  store i32 %v2_da38, i32* @r0, align 4
  %v3_da3c = call i32 @function_10844(i8* %v2_da3c, i32 %v3_da2c)
  %v2_da48 = add i32 %v3_da3c, %v2_da38
  store i32 %v2_da48, i32* @r5, align 4
  store i32 %v2_da48, i32* @r0, align 4
  %v0_da50 = load i32, i32* @r6, align 4
  store i32 %v0_da50, i32* %r1.global-to-local, align 4
  %v2_da54 = inttoptr i32 %v2_da48 to i8*
  %v3_da54 = call i32 @function_10844(i8* %v2_da54, i32 %v0_da50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_da54, i32* @r4, align 4
  %v3_da64 = call i32 @function_1016c(i32 29, i32* null)
  store i32 %v3_da64, i32* %r1.global-to-local, align 4
  %v0_da6c = load i32, i32* @r5, align 4
  %v1_da6c = load i32, i32* @r4, align 4
  %v2_da6c = add i32 %v1_da6c, %v0_da6c
  store i32 %v2_da6c, i32* @r0, align 4
  %v2_da70 = inttoptr i32 %v2_da6c to i8*
  %v3_da70 = call i32 @function_10844(i8* %v2_da70, i32 %v3_da64)
  %v1_da78 = call i32 @function_10198(i32 13)
  %v1_da80 = call i32 @function_10198(i32 14)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_da94 = load i32, i32* %stack_var_-8388, align 4
  store i32 %v2_da94, i32* %r1.global-to-local, align 4
  %v4_da98 = call i32 @function_11314(i8* %v2_d9ec, i32 %v2_da94, i32 4095)
  %v7_daa0 = icmp eq i32 %v4_da98, -1
  store i32 %v4_da98, i32* @r5, align 4
  store i32 -4248, i32* @r2, align 4
  br i1 %v7_daa0, label %dec_label_pc_db68, label %dec_label_pc_dab0

dec_label_pc_dab0:                                ; preds = %dec_label_pc_d9b8
  store i32 %v2_dab4, i32* %r1.global-to-local, align 4
  %v2_dab8 = add i32 %v4_da98, %v2_dab4
  store i32 %v2_dab8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_dac0 = add i32 %v2_dab8, -4248
  %v5_dac0 = inttoptr i32 %v4_dac0 to i8*
  store i8 0, i8* %v5_dac0, align 1
  %v1_dac8 = call i32 @function_10250(i32 30)
  %v0_dacc = load i32, i32* @r4, align 4
  store i32 %v0_dacc, i32* %r1.global-to-local, align 4
  %v2_dad4 = inttoptr i32 %v0_dacc to i32*
  %v3_dad4 = call i32 @function_1016c(i32 30, i32* %v2_dad4)
  %v0_dad8 = load i32, i32* @r5, align 4
  %v1_dad8 = add i32 %v0_dad8, -1
  store i32 %v1_dad8, i32* @r1, align 4
  store i32 %v3_dad4, i32* %r2.global-to-local, align 4
  %v2_dae0 = load i32, i32* %stack_var_-8388, align 4
  %v3_dae4 = inttoptr i32 %v2_dae0 to i8*
  %v4_dae4 = call i32 @function_10b70(i8* %v3_dae4, i32 %v1_dad8, i32 %v3_dad4)
  %v7_dae8 = icmp eq i32 %v4_dae4, -1
  br i1 %v7_dae8, label %dec_label_pc_db04, label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %dec_label_pc_dab0
  %v2_daf0 = load i32, i32* %stack_var_-8388, align 4
  %v1_daf4 = inttoptr i32 %v2_daf0 to i8*
  %v2_daf4 = call i32 @function_1141c(i8* %v1_daf4)
  %v0_daf8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_db00 = call i32 @function_11220(i32 %v0_daf8, i32 9)
  br label %dec_label_pc_db04

dec_label_pc_db04:                                ; preds = %dec_label_pc_dab0, %dec_label_pc_daf0
  %v1_db08 = call i32 @function_10198(i32 30)
  %v0_db0c = call i32 @function_11178()
  %v0_db10 = load i32, i32* @r7, align 4
  %v9_db10 = icmp eq i32 %v0_db10, %v0_db0c
  br i1 %v9_db10, label %dec_label_pc_db3c, label %dec_label_pc_db18

dec_label_pc_db18:                                ; preds = %dec_label_pc_db04
  %v0_db18 = call i32 @function_111a4()
  %v0_db1c = load i32, i32* @r7, align 4
  %v9_db1c = icmp eq i32 %v0_db1c, %v0_db18
  br i1 %v9_db1c, label %dec_label_pc_db3c, label %dec_label_pc_db24

dec_label_pc_db24:                                ; preds = %dec_label_pc_db18
  store i32 ptrtoint (i32* @global_var_1c234.68 to i32), i32* %r2.global-to-local, align 4
  %v2_db28 = load i32, i32* %stack_var_-8388, align 4
  %v2_db2c = load i32, i32* @global_var_1c234.68, align 4
  store i32 %v2_db2c, i32* %r1.global-to-local, align 4
  %v3_db30 = inttoptr i32 %v2_db28 to i8*
  %v4_db30 = call i32 @function_10bfc(i8* %v3_db30, i32 %v2_db2c, i32 ptrtoint (i32* @global_var_1c234.68 to i32))
  %v2_db34 = icmp eq i32 %v4_db30, 0
  br i1 %v2_db34, label %dec_label_pc_db48, label %dec_label_pc_db24.dec_label_pc_db3c_crit_edge

dec_label_pc_db24.dec_label_pc_db3c_crit_edge:    ; preds = %dec_label_pc_db24
  %v0_db40.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_db3c

dec_label_pc_db3c:                                ; preds = %dec_label_pc_db24.dec_label_pc_db3c_crit_edge, %dec_label_pc_db18, %dec_label_pc_db04
  %v0_db40 = phi i32 [ %v0_db40.pre, %dec_label_pc_db24.dec_label_pc_db3c_crit_edge ], [ %v0_db18, %dec_label_pc_db18 ], [ %v0_db0c, %dec_label_pc_db04 ]
  store i32 %v2_d9bc, i32* @r4, align 4
  store i32 %v0_db40, i32* @r5, align 4
  br label %dec_label_pc_d924.backedge

dec_label_pc_d924.backedge:                       ; preds = %dec_label_pc_d980, %dec_label_pc_d978, %dec_label_pc_d934, %dec_label_pc_db3c, %dec_label_pc_dc90, %.thread5
  %v0_d924 = load i32, i32* @sb, align 4
  %v1_d928 = inttoptr i32 %v0_d924 to i32*
  %v2_d928 = call i32 @function_11624(i32* %v1_d928)
  %v2_d92c = icmp eq i32 %v2_d928, 0
  br i1 %v2_d92c, label %dec_label_pc_d9ac, label %dec_label_pc_d934.preheader

dec_label_pc_db48:                                ; preds = %dec_label_pc_db24
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_db4c = load i32, i32* %stack_var_-8388, align 4
  %v2_db50 = inttoptr i32 %v2_db4c to i8*
  %v3_db50 = call i32 @function_1124c(i8* %v2_db50, i32 0)
  %v7_db54 = icmp eq i32 %v3_db50, -1
  store i32 %v3_db50, i32* @r4, align 4
  br i1 %v7_db54, label %dec_label_pc_dce0, label %dec_label_pc_db60

dec_label_pc_db60:                                ; preds = %dec_label_pc_db48, %dec_label_pc_dce0
  %v0_db60 = phi i32 [ %v3_db50, %dec_label_pc_db48 ], [ %v0_db60.pre, %dec_label_pc_dce0 ]
  %v1_db64 = call i32 @function_11120(i32 %v0_db60)
  br label %dec_label_pc_db68

dec_label_pc_db68:                                ; preds = %dec_label_pc_d9b8, %dec_label_pc_db60
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_db74 = call i32 @function_1124c(i8* %v2_d9ec, i32 0)
  %v7_db78 = icmp eq i32 %v3_db74, -1
  store i32 %v3_db74, i32* @r8, align 4
  br i1 %v7_db78, label %dec_label_pc_dc90, label %dec_label_pc_db84

dec_label_pc_db84:                                ; preds = %dec_label_pc_db68
  %v1_db88 = call i32 @function_10250(i32 18)
  %v1_db90 = call i32 @function_10250(i32 19)
  store i32 %v2_db98, i32* %r1.global-to-local, align 4
  %v3_dba0 = call i32 @function_1016c(i32 18, i32* nonnull %stack_var_-40)
  store i32 %v3_dba0, i32* @r5, align 4
  store i32 %v2_dbac, i32* %r1.global-to-local, align 4
  %v3_dbb4 = call i32 @function_1016c(i32 19, i32* nonnull %stack_var_-44)
  store i32 %v3_dbb4, i32* @r6, align 4
  br label %dec_label_pc_dbbc

dec_label_pc_dbbc:                                ; preds = %dec_label_pc_dc28, %.thread19, %dec_label_pc_dbf0, %dec_label_pc_db84
  %v0_dbbc = load i32, i32* @r8, align 4
  store i32 %v2_d8d0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_dbc8 = call i32 @function_112e8(i32 %v0_dbbc, i32* nonnull %stack_var_-8380, i32 4096)
  %tmp103 = icmp slt i32 %v4_dbc8, 1
  br i1 %tmp103, label %dec_label_pc_dcc4, label %dec_label_pc_dbd4

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_dbbc
  store i32 %v2_da88, i32* %r3.global-to-local, align 4
  %v3_dbd8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dbd8, i32* @r4, align 4
  %v5_dbe0 = icmp slt i32 %v4_dbc8, %v3_dbd8
  br i1 %v5_dbe0, label %dec_label_pc_dbf0, label %dec_label_pc_dc44.lr.ph

dec_label_pc_dc44.lr.ph:                          ; preds = %dec_label_pc_dbd4
  %v1_dc3c27 = add i32 %v4_dbc8, -1
  store i32 %v1_dc3c27, i32* %r1.global-to-local, align 4
  %v0_dc44.pre = load i32, i32* @r5, align 4
  %v1_dc48.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_dc44

dec_label_pc_dbf0:                                ; preds = %dec_label_pc_dc3c.backedge, %dec_label_pc_dbd4
  store i32 %v2_da88, i32* %r1.global-to-local, align 4
  %v3_dbf4 = load i32, i32* %stack_var_-44, align 4
  %v5_dbfc = icmp slt i32 %v4_dbc8, %v3_dbf4
  br i1 %v5_dbfc, label %dec_label_pc_dbbc, label %.thread19

.thread19:                                        ; preds = %dec_label_pc_dbf0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dc0837 = icmp eq i32 %v4_dbc8, 0
  br i1 %v2_dc0837, label %dec_label_pc_dbbc, label %dec_label_pc_dc10.lr.ph

dec_label_pc_dc10.lr.ph:                          ; preds = %.thread19
  %v0_dc10.pre = load i32, i32* @r6, align 4
  %v1_dc14.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_dc10

dec_label_pc_dc10:                                ; preds = %dec_label_pc_dc28, %dec_label_pc_dc10.lr.ph
  %v0_dc08.in = phi i32 [ %v4_dbc8, %dec_label_pc_dc10.lr.ph ], [ %v0_dc08, %dec_label_pc_dc28 ]
  %v0_dc28 = phi i32 [ 0, %dec_label_pc_dc10.lr.ph ], [ %v1_dc28, %dec_label_pc_dc28 ]
  %v0_dc1c = phi i32 [ 0, %dec_label_pc_dc10.lr.ph ], [ %v1_dc1c., %dec_label_pc_dc28 ]
  %v0_dc08 = add i32 %v0_dc08.in, -1
  %v2_dc10 = add i32 %v0_dc1c, %v0_dc10.pre
  %v3_dc10 = inttoptr i32 %v2_dc10 to i8*
  %v4_dc10 = load i8, i8* %v3_dc10, align 1
  %v6_dc10 = zext i8 %v4_dc10 to i32
  store i32 %v6_dc10, i32* %r2.global-to-local, align 4
  %v2_dc14 = add i32 %v0_dc28, %v1_dc14.pre
  %v3_dc14 = inttoptr i32 %v2_dc14 to i8*
  %v4_dc14 = load i8, i8* %v3_dc14, align 1
  %v6_dc14 = zext i8 %v4_dc14 to i32
  store i32 %v6_dc14, i32* %r3.global-to-local, align 4
  %v9_dc18 = icmp eq i8 %v4_dc14, %v4_dc10
  %v1_dc1c = add i32 %v0_dc1c, 1
  %v1_dc1c. = select i1 %v9_dc18, i32 %v1_dc1c, i32 0
  store i32 %v1_dc1c., i32* %r1.global-to-local, align 4
  br i1 %v9_dc18, label %dec_label_pc_dc64, label %dec_label_pc_dc28

dec_label_pc_dc28:                                ; preds = %dec_label_pc_dc64, %dec_label_pc_dc10
  %v1_dc28 = add i32 %v0_dc28, 1
  %v2_dc08 = icmp eq i32 %v0_dc08, 0
  br i1 %v2_dc08, label %dec_label_pc_dbbc, label %dec_label_pc_dc10

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc44
  %v9_dc30 = icmp eq i32 %v3_dbd8, %v1_dc50.
  br i1 %v9_dc30, label %dec_label_pc_dc6c, label %dec_label_pc_dc3c.backedge

dec_label_pc_dc3c.backedge:                       ; preds = %dec_label_pc_dc44, %dec_label_pc_dc30
  %storemerge = add i32 %storemerge.in, 1
  %v1_dc3c = add i32 %v0_dc3c, -1
  store i32 %v1_dc3c, i32* %r1.global-to-local, align 4
  %v2_dc3c = icmp eq i32 %v0_dc3c, 0
  br i1 %v2_dc3c, label %dec_label_pc_dbf0, label %dec_label_pc_dc44

dec_label_pc_dc44:                                ; preds = %dec_label_pc_dc3c.backedge, %dec_label_pc_dc44.lr.ph
  %v0_dc3c = phi i32 [ %v1_dc3c27, %dec_label_pc_dc44.lr.ph ], [ %v1_dc3c, %dec_label_pc_dc3c.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_dc44.lr.ph ], [ %storemerge, %dec_label_pc_dc3c.backedge ]
  %v0_dc50 = phi i32 [ 0, %dec_label_pc_dc44.lr.ph ], [ %v1_dc50., %dec_label_pc_dc3c.backedge ]
  %v2_dc44 = add i32 %v0_dc50, %v0_dc44.pre
  %v3_dc44 = inttoptr i32 %v2_dc44 to i8*
  %v4_dc44 = load i8, i8* %v3_dc44, align 1
  %v6_dc44 = zext i8 %v4_dc44 to i32
  store i32 %v6_dc44, i32* %r2.global-to-local, align 4
  %v2_dc48 = add i32 %storemerge.in, %v1_dc48.pre
  %v3_dc48 = inttoptr i32 %v2_dc48 to i8*
  %v4_dc48 = load i8, i8* %v3_dc48, align 1
  %v6_dc48 = zext i8 %v4_dc48 to i32
  store i32 %v6_dc48, i32* %r3.global-to-local, align 4
  %v9_dc4c = icmp eq i8 %v4_dc48, %v4_dc44
  %v1_dc50 = add i32 %v0_dc50, 1
  %v1_dc50. = select i1 %v9_dc4c, i32 %v1_dc50, i32 0
  br i1 %v9_dc4c, label %dec_label_pc_dc30, label %dec_label_pc_dc3c.backedge

dec_label_pc_dc64:                                ; preds = %dec_label_pc_dc10
  %v9_dc64 = icmp eq i32 %v3_dbf4, %v1_dc1c.
  br i1 %v9_dc64, label %dec_label_pc_dc6c, label %dec_label_pc_dc28

dec_label_pc_dc6c:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dc64
  %v1_dc70 = call i32 @function_10198(i32 18)
  %v1_dc78 = call i32 @function_10198(i32 19)
  %v0_dc7c = load i32, i32* @r8, align 4
  %v1_dc80 = call i32 @function_11120(i32 %v0_dc7c)
  %v0_dc84 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dc8c = call i32 @function_11220(i32 %v0_dc84, i32 9)
  br label %dec_label_pc_dc90

dec_label_pc_dc90:                                ; preds = %dec_label_pc_db68, %dec_label_pc_dcc4, %dec_label_pc_dc6c
  store i32 64, i32* @r1, align 4
  store i32 %v2_d9e8, i32* @r0, align 4
  %v0_dc9c = call i32 @function_108bc()
  store i32 %v2_da38, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_dcac = call i32 @function_108bc()
  %v1_dcb4 = call i32 @function_12500(i32 1)
  store i32 %v2_d9bc, i32* @r4, align 4
  %v0_dcbc = load i32, i32* @r7, align 4
  store i32 %v0_dcbc, i32* @r5, align 4
  br label %dec_label_pc_d924.backedge

dec_label_pc_dcc4:                                ; preds = %dec_label_pc_dbbc
  %v1_dcc8 = call i32 @function_10198(i32 18)
  %v1_dcd0 = call i32 @function_10198(i32 19)
  %v0_dcd4 = load i32, i32* @r8, align 4
  %v1_dcd8 = call i32 @function_11120(i32 %v0_dcd4)
  br label %dec_label_pc_dc90

dec_label_pc_dce0:                                ; preds = %dec_label_pc_db48
  %v0_dce0 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dce8 = call i32 @function_11220(i32 %v0_dce0, i32 9)
  %v0_db60.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_db60

; uselistorder directives
  uselistorder i32 %v1_dc50., { 1, 0 }
  uselistorder i1 %v9_dc4c, { 1, 0 }
  uselistorder i32 %v0_dc50, { 1, 0 }
  uselistorder i32 %v1_dc1c., { 1, 2, 0 }
  uselistorder i1 %v9_dc18, { 1, 0 }
  uselistorder i32 %v0_dc1c, { 1, 0 }
  uselistorder i32 %v0_dc28, { 1, 0 }
  uselistorder i32 %v3_db74, { 1, 0 }
  uselistorder i32 %v3_db50, { 1, 2, 0 }
  uselistorder i32 %v2_d928, { 1, 0 }
  uselistorder i32 %v4_da98, { 1, 2, 0 }
  uselistorder i32 %v2_d9a0, { 1, 0 }
  uselistorder i32 %v2_da38, { 1, 0, 2 }
  uselistorder i32 %v2_d9e8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d8b0, { 1, 0, 2 }
  uselistorder i32 %v4_d89c, { 1, 0 }
  uselistorder i32 %v3_d868, { 2, 0, 1 }
  uselistorder i32 %v1_d804, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v0_d778, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 0, 6, 1, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40 }
  uselistorder i32 (i32*)* @function_11624, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_d1c4, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_11528, { 2, 1, 0 }
  uselistorder i32* @global_var_1c234.68, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_dc90, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dc6c, { 1, 0 }
  uselistorder label %dec_label_pc_db68, { 1, 0 }
  uselistorder label %dec_label_pc_db60, { 1, 0 }
  uselistorder label %dec_label_pc_d924.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_db04, { 1, 0 }
  uselistorder label %dec_label_pc_d934, { 1, 0 }
  uselistorder label %dec_label_pc_d934.preheader, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_dcfc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dcfc:
  store i32 ptrtoint (i32* @global_var_dd14.70 to i32), i32* @global_var_1c028.72, align 4
  ret i32 %arg1
}

define i32 @function_dd14() local_unnamed_addr {
dec_label_pc_dd14:
  %stack_var_-8 = alloca i32, align 4
  %v3_dd14 = load i32, i32* @r4, align 4
  store i32 %v3_dd14, i32* %stack_var_-8, align 4
  %v1_dd1c = call i32 @function_10250(i32 1)
  store i32 ptrtoint ([13 x i8]* @global_var_13978.74 to i32), i32* @r0, align 4
  %v2_dd24 = call i32 @function_1181c(i32 ptrtoint ([13 x i8]* @global_var_13978.74 to i32))
  store i32 %v2_dd24, i32* @global_var_1c240.77, align 4
  %v3_dd38 = call i32 @function_1016c(i32 1, i32* null)
  %v4_dd38 = inttoptr i32 %v3_dd38 to i8*
  %v2_dd3c = add i32 %v3_dd38, 1
  %v3_dd3c = inttoptr i32 %v2_dd3c to i8*
  %v4_dd3c = load i8, i8* %v3_dd3c, align 1
  %v3_dd40 = load i8, i8* %v4_dd38, align 1
  store i8 %v4_dd3c, i8* bitcast (i32* @global_var_1c23f.78 to i8*), align 4
  store i8 %v3_dd40, i8* bitcast (i32* @global_var_1c23e.79 to i8*), align 4
  %v2_dd58 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_dd58, i32* @r4, align 4
  %v1_dd5c = call i32 @function_10198(i32 1)
  %v0_dd60 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dd60, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_dd14
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_dd14, %bb
  ret i32 %v1_dd5c

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dd68(i32 %arg1) local_unnamed_addr {
dec_label_pc_dd68:
  %stack_var_-16 = alloca i32, align 4
  %v3_dd68 = load i32, i32* @r4, align 4
  %v6_dd68 = load i32, i32* @r5, align 4
  %v2_dd6c = ptrtoint i32* %stack_var_-16 to i32
  %v0_dd70 = call i32 @function_1114c()
  %v7_dd74 = icmp eq i32 %v0_dd70, -1
  %. = zext i1 %v7_dd74 to i32
  %tmp10 = icmp slt i32 %v0_dd70, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_dd90 = icmp eq i32 %storemerge4, 0
  store i32 %v0_dd70, i32* @global_var_1c19c.81, align 4
  br i1 %v2_dd90, label %dec_label_pc_dda4, label %dec_label_pc_dd9c

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dd68
  store i32 %v3_dd68, i32* @r4, align 4
  store i32 %v6_dd68, i32* @r5, align 4
  ret i32 %v0_dd70

dec_label_pc_dda4:                                ; preds = %dec_label_pc_dd68
  store i32 1, i32* %stack_var_-16, align 4
  %v1_ddb0 = call i32 @function_10250(i32 23)
  %v1_ddb8 = call i32 @function_10250(i32 24)
  %v0_ddbc = load i32, i32* @r5, align 4
  %v2_ddc4 = inttoptr i32 %v0_ddbc to i32*
  %v3_ddc4 = call i32 @function_1016c(i32 23, i32* %v2_ddc4)
  %v2_ddcc = inttoptr i32 %v3_ddc4 to i8*
  %v3_ddcc = call i32 @function_1124c(i8* %v2_ddcc, i32 2)
  %v7_ddd0 = icmp eq i32 %v3_ddcc, -1
  store i32 %v3_ddcc, i32* @r4, align 4
  br i1 %v7_ddd0, label %dec_label_pc_de18, label %dec_label_pc_dddc

dec_label_pc_dddc:                                ; preds = %dec_label_pc_de18, %dec_label_pc_dda4
  %v0_dde8 = phi i32 [ %v3_de28, %dec_label_pc_de18 ], [ %v3_ddcc, %dec_label_pc_dda4 ]
  %v3_ddf0 = call i32 @function_111d0(i32 %v0_dde8, i32 -2147199228, i32 %v2_dd6c)
  br label %dec_label_pc_ddf4

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_ddf4, %dec_label_pc_dddc
  %v0_de00 = load i32, i32* @r4, align 4
  %v3_de08 = call i32 @function_111d0(i32 %v0_de00, i32 -2147199227, i32 0)
  %v1_de10 = call i32 @function_12500(i32 10)
  br label %dec_label_pc_ddf4

dec_label_pc_de18:                                ; preds = %dec_label_pc_dda4
  %v0_de18 = load i32, i32* @r5, align 4
  %v2_de20 = inttoptr i32 %v0_de18 to i32*
  %v3_de20 = call i32 @function_1016c(i32 24, i32* %v2_de20)
  %v2_de28 = inttoptr i32 %v3_de20 to i8*
  %v3_de28 = call i32 @function_1124c(i8* %v2_de28, i32 2)
  %v3_de2c = icmp eq i32 %v3_de28, -1
  store i32 %v3_de28, i32* @r4, align 4
  br i1 %v3_de2c, label %dec_label_pc_de38, label %dec_label_pc_dddc

dec_label_pc_de38:                                ; preds = %dec_label_pc_de18
  %v1_de3c = call i32 @function_10198(i32 23)
  %v1_de44 = call i32 @function_10198(i32 24)
  %v0_de48 = load i32, i32* @r5, align 4
  %v1_de4c = call i32 @function_1246c(i32 %v0_de48)
  %v0_de50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_de50, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_de38
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_de38, %bb13
  ret i32 %v1_de4c

; uselistorder directives
  uselistorder i32 %v3_de28, { 1, 2, 0 }
  uselistorder i32 %v3_ddcc, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_dd70, { 2, 1, 3, 0 }
  uselistorder i32 (i32, i32, i32)* @function_111d0, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_de54(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_de54:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-380 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-508 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_de54 = load i32, i32* @r4, align 4
  store i32 %v3_de54, i32* %stack_var_-36, align 4
  %v9_de54 = load i32, i32* @r6, align 4
  %v15_de54 = load i32, i32* @r8, align 4
  %v2_de60 = ptrtoint i32* %stack_var_-508 to i32
  store i32 %v2_de60, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_de60, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v1_de78 = call i32 @function_11a40(i32 %v2_de60)
  store i32 %v2_de60, i32* @r0, align 4
  %v2_de84 = call i32 @function_11a10(i32 %v2_de60, i32 2)
  %v0_de88 = load i32, i32* @r5, align 4
  store i32 %v0_de88, i32* %r2.global-to-local, align 4
  %v3_de94 = bitcast i32* %stack_var_-508 to %_TYPEDEF_sigset_t*
  %v4_de94 = call i32 @function_1139c(i32 %v0_de88, %_TYPEDEF_sigset_t* %v3_de94, i32 %v0_de88)
  %v2_dea0 = call i32 @function_11a58(i32 17, i32 1)
  %v2_deac = call i32 @function_11a58(i32 5, i32 ptrtoint (i32* @global_var_dcfc.83 to i32))
  %v0_deb0 = call i32 @function_10ad4()
  store i32 %v0_deb0, i32* @global_var_1c230.50, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c23f.78 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1c23c.76 to i8*), align 4
  store i32 1494907824, i32* @global_var_1c240.77, align 4
  %v0_ded8 = load i32, i32* @r5, align 4
  %v1_ded8 = trunc i32 %v0_ded8 to i8
  store i8 %v1_ded8, i8* bitcast (i32* @global_var_1c23e.79 to i8*), align 4
  store i8 %v1_ded8, i8* bitcast (i32* @global_var_1c23d.87 to i8*), align 4
  %v6_dee0 = call i32 @function_10308(i32 %v0_deb0, i32 ptrtoint (i8** @global_var_1c23c.76 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_dd14.70 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_dd14.70 to i32), i32* @global_var_1c028.72, align 4
  %v1_def0 = call i32 @function_e5d8(i32 %v6_dee0)
  %v2_def8 = ptrtoint i32* %stack_var_-124 to i32
  store i32 %v2_def8, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_df00 = call i32 @function_108bc()
  %v0_df04 = load i32, i32* @r6, align 4
  %v7_df04 = icmp eq i32 %v0_df04, 2
  br i1 %v7_df04, label %dec_label_pc_e02c, label %dec_label_pc_df0c

dec_label_pc_df0c:                                ; preds = %dec_label_pc_e02c, %dec_label_pc_de54, %dec_label_pc_e03c
  %v0_df0c = call i32 @function_e580()
  store i32 %v0_df0c, i32* %r6.global-to-local, align 4
  %v0_df14 = load i32, i32* @r8, align 4
  %v1_df14 = inttoptr i32 %v0_df14 to i32*
  %v2_df14 = load i32, i32* %v1_df14, align 4
  %v1_df18 = inttoptr i32 %v2_df14 to i8*
  %v2_df18 = call i32 @function_1081c(i8* %v1_df18)
  %v0_df20 = load i32, i32* @r8, align 4
  %v1_df20 = inttoptr i32 %v0_df20 to i32*
  %v2_df20 = load i32, i32* %v1_df20, align 4
  %v1_df24 = inttoptr i32 %v2_df20 to i8*
  %v2_df24 = call i32 @function_1081c(i8* %v1_df24)
  %v1_df28 = sub i32 20, %v2_df18
  store i32 %v2_df24, i32* @r5, align 4
  %v0_df30 = load i32, i32* %r6.global-to-local, align 4
  %v2_df34 = call i32 @function_10ea8(i32 %v0_df30, i32 %v1_df28)
  %v1_df3c = load i32, i32* @r5, align 4
  %v2_df3c = add i32 %v1_df3c, %v2_df34
  store i32 %v2_df3c, i32* @r4, align 4
  %v2_df40 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_df40, i32* @r6, align 4
  %v2_df4c = call i32 @function_e634(i32 %v2_df40, i32 %v2_df3c)
  %v2_df50 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_df50, i32* %r2.global-to-local, align 4
  %v1_df54 = load i32, i32* @r4, align 4
  %v2_df54 = add i32 %v1_df54, %v2_df50
  store i32 %v2_df54, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_df60 = load i32, i32* @r8, align 4
  %v1_df60 = inttoptr i32 %v0_df60 to i32*
  %v2_df60 = load i32, i32* %v1_df60, align 4
  store i32 %v2_df60, i32* @r0, align 4
  %v3_df64 = add i32 %v2_df54, -56
  %v4_df64 = inttoptr i32 %v3_df64 to i8*
  store i8 0, i8* %v4_df64, align 1
  %v2_df68 = inttoptr i32 %v2_df60 to i8*
  %v3_df68 = call i32 @function_10844(i8* %v2_df68, i32 %v2_df40)
  store i32 32, i32* @r1, align 4
  store i32 %v2_df40, i32* @r0, align 4
  %v0_df74 = call i32 @function_108bc()
  %v0_df78 = call i32 @function_e580()
  store i32 %v0_df78, i32* @r7, align 4
  %v0_df80 = load i32, i32* @r8, align 4
  %v1_df80 = inttoptr i32 %v0_df80 to i32*
  %v2_df80 = load i32, i32* %v1_df80, align 4
  %v1_df84 = inttoptr i32 %v2_df80 to i8*
  %v2_df84 = call i32 @function_1081c(i8* %v1_df84)
  %v0_df8c = load i32, i32* @r8, align 4
  %v1_df8c = inttoptr i32 %v0_df8c to i32*
  %v2_df8c = load i32, i32* %v1_df8c, align 4
  %v1_df90 = inttoptr i32 %v2_df8c to i8*
  %v2_df90 = call i32 @function_1081c(i8* %v1_df90)
  %v1_df94 = sub i32 20, %v2_df84
  store i32 %v2_df90, i32* @r5, align 4
  %v0_df9c = load i32, i32* @r7, align 4
  %v2_dfa0 = call i32 @function_10ea8(i32 %v0_df9c, i32 %v1_df94)
  %v1_dfa4 = load i32, i32* @r5, align 4
  %v2_dfa4 = add i32 %v1_dfa4, %v2_dfa0
  store i32 %v2_dfa4, i32* @r4, align 4
  %v2_dfb0 = call i32 @function_e634(i32 %v2_df40, i32 %v2_dfa4)
  %v1_dfb8 = load i32, i32* @r4, align 4
  %v2_dfb8 = add i32 %v1_dfb8, %v2_df50
  store i32 %v2_dfb8, i32* @r3, align 4
  %v0_dfbc = load i32, i32* @sb, align 4
  %v1_dfbc = trunc i32 %v0_dfbc to i8
  %v3_dfbc = add i32 %v2_dfb8, -56
  %v4_dfbc = inttoptr i32 %v3_dfbc to i8*
  store i8 %v1_dfbc, i8* %v4_dfbc, align 1
  %v2_dfc8 = call i32 @function_112b8(i32 15, i32 %v2_df40)
  %v1_dfd0 = call i32 @function_10250(i32 3)
  %v3_dfdc = call i32 @function_1016c(i32 3, i32* nonnull %stack_var_-52)
  %v3_dfe0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_dfe0, i32* %r2.global-to-local, align 4
  %v3_dfec = inttoptr i32 %v3_dfdc to i32*
  %v4_dfec = call i32 @function_11448(i32 1, i32* %v3_dfec, i32 %v3_dfe0)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_dffc = call i32 @function_11448(i32 1, i32* nonnull @global_var_13988.91, i32 1)
  %v1_e004 = call i32 @function_10198(i32 3)
  %v1_e008 = call i32 @function_8650(i32 %v1_e004)
  %v1_e00c = call i32 @function_d760(i32 %v1_e008)
  %v1_e010 = call i32 @function_dd68(i32 %v1_e00c)
  %v0_e014 = call i32 @function_1114c()
  %v1_e018 = load i32, i32* @sb, align 4
  %v7_e01c = icmp sgt i32 %v0_e014, %v1_e018
  br i1 %v7_e01c, label %dec_label_pc_e020, label %dec_label_pc_e068

dec_label_pc_e020:                                ; preds = %dec_label_pc_df0c
  store i32 %v9_de54, i32* %r6.global-to-local, align 4
  store i32 %v15_de54, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_e02c:                                ; preds = %dec_label_pc_de54
  %v0_e02c = load i32, i32* @r8, align 4
  %v1_e02c = add i32 %v0_e02c, 4
  %v2_e02c = inttoptr i32 %v1_e02c to i32*
  %v3_e02c = load i32, i32* %v2_e02c, align 4
  %v1_e030 = inttoptr i32 %v3_e02c to i8*
  %v2_e030 = call i32 @function_1081c(i8* %v1_e030)
  %v8_e038 = icmp sgt i32 %v2_e030, 31
  br i1 %v8_e038, label %dec_label_pc_df0c, label %dec_label_pc_e03c

dec_label_pc_e03c:                                ; preds = %dec_label_pc_e02c
  %v0_e040 = load i32, i32* @r8, align 4
  %v1_e040 = add i32 %v0_e040, 4
  %v2_e040 = inttoptr i32 %v1_e040 to i32*
  %v3_e040 = load i32, i32* %v2_e040, align 4
  store i32 %v2_def8, i32* @r0, align 4
  %v2_e048 = bitcast i32* %stack_var_-124 to i8*
  %v3_e048 = call i32 @function_10844(i8* %v2_e048, i32 %v3_e040)
  %v0_e04c = load i32, i32* @r8, align 4
  %v1_e04c = add i32 %v0_e04c, 4
  %v2_e04c = inttoptr i32 %v1_e04c to i32*
  %v3_e04c = load i32, i32* %v2_e04c, align 4
  %v1_e054 = inttoptr i32 %v3_e04c to i8*
  %v2_e054 = call i32 @function_1081c(i8* %v1_e054)
  store i32 %v2_e054, i32* @r1, align 4
  store i32 %v3_e04c, i32* @r0, align 4
  %v0_e060 = call i32 @function_108bc()
  br label %dec_label_pc_df0c

dec_label_pc_e068:                                ; preds = %dec_label_pc_df0c
  %v1_e068 = call i32 @function_11370(i32 %v0_e014)
  %v0_e06c = load i32, i32* @sb, align 4
  %v1_e070 = call i32 @function_11120(i32 %v0_e06c)
  %v1_e078 = call i32 @function_11120(i32 1)
  %v1_e080 = call i32 @function_11120(i32 2)
  %v1_e084 = call i32 @function_8650(i32 %v1_e080)
  %v1_e088 = call i32 @function_d760(i32 %v1_e084)
  %v1_e08c = call i32 @function_dd68(i32 %v1_e088)
  %v1_e090 = call i32 @function_ea5c(i32 %v1_e08c)
  %v2_e098 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v2_e098, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c024.95 to i32), i32* @sl, align 4
  %v2_e0b0 = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_e0b0, i32* @r6, align 4
  %v2_e0b4 = ptrtoint i32* %stack_var_-380 to i32
  store i32 %v2_e0b4, i32* @r7, align 4
  %v2_e184 = ptrtoint i32* %stack_var_-60 to i32
  %v4_e43c = bitcast i8** %stack_var_-38 to i32*
  %v2_e3d4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_e3d8 = ptrtoint i32* %stack_var_-48 to i32
  %v1_e44c = bitcast i32* %stack_var_-124 to i8*
  br label %dec_label_pc_e0b8

dec_label_pc_e0b8:                                ; preds = %dec_label_pc_e0b8.backedge, %dec_label_pc_e068
  %v2_e0c043 = phi i32 [ %v2_e0c043.pre, %dec_label_pc_e0b8.backedge ], [ %v2_e0b0, %dec_label_pc_e068 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e0c045 = inttoptr i32 %v2_e0c043 to i32*
  store i32 0, i32* %v4_e0c045, align 4
  %v0_e0c446 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0c447 = add i32 %v0_e0c446, 4
  store i32 %v1_e0c447, i32* %r3.global-to-local, align 4
  %v7_e0c848 = icmp eq i32 %v1_e0c447, 128
  br i1 %v7_e0c848, label %dec_label_pc_e0d0, label %dec_label_pc_e0c0.dec_label_pc_e0c0_crit_edge

dec_label_pc_e0c0.dec_label_pc_e0c0_crit_edge:    ; preds = %dec_label_pc_e0b8, %dec_label_pc_e0c0.dec_label_pc_e0c0_crit_edge
  %v1_e0c449 = phi i32 [ %v1_e0c4, %dec_label_pc_e0c0.dec_label_pc_e0c0_crit_edge ], [ %v1_e0c447, %dec_label_pc_e0b8 ]
  %v0_e0c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e0c0 = load i32, i32* @r6, align 4
  %v3_e0c0 = add i32 %v2_e0c0, %v1_e0c449
  %v4_e0c0 = inttoptr i32 %v3_e0c0 to i32*
  store i32 %v0_e0c0.pre, i32* %v4_e0c0, align 4
  %v0_e0c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0c4 = add i32 %v0_e0c4, 4
  store i32 %v1_e0c4, i32* %r3.global-to-local, align 4
  %v7_e0c8 = icmp eq i32 %v1_e0c4, 128
  br i1 %v7_e0c8, label %dec_label_pc_e0d0, label %dec_label_pc_e0c0.dec_label_pc_e0c0_crit_edge

dec_label_pc_e0d0:                                ; preds = %dec_label_pc_e0c0.dec_label_pc_e0c0_crit_edge, %dec_label_pc_e0b8
  %v0_e0d0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e0d0, i32* %r3.global-to-local, align 4
  store i32 %v0_e0d0, i32* @r4, align 4
  %v2_e0d850 = load i32, i32* @r7, align 4
  %v3_e0d851 = add i32 %v2_e0d850, %v0_e0d0
  %v4_e0d852 = inttoptr i32 %v3_e0d851 to i32*
  store i32 %v0_e0d0, i32* %v4_e0d852, align 4
  %v0_e0dc53 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0dc54 = add i32 %v0_e0dc53, 4
  store i32 %v1_e0dc54, i32* %r3.global-to-local, align 4
  %v7_e0e055 = icmp eq i32 %v1_e0dc54, 128
  br i1 %v7_e0e055, label %dec_label_pc_e0e8, label %dec_label_pc_e0d8.dec_label_pc_e0d8_crit_edge

dec_label_pc_e0d8.dec_label_pc_e0d8_crit_edge:    ; preds = %dec_label_pc_e0d0, %dec_label_pc_e0d8.dec_label_pc_e0d8_crit_edge
  %v1_e0dc56 = phi i32 [ %v1_e0dc, %dec_label_pc_e0d8.dec_label_pc_e0d8_crit_edge ], [ %v1_e0dc54, %dec_label_pc_e0d0 ]
  %v0_e0d8.pre = load i32, i32* @r4, align 4
  %v2_e0d8 = load i32, i32* @r7, align 4
  %v3_e0d8 = add i32 %v2_e0d8, %v1_e0dc56
  %v4_e0d8 = inttoptr i32 %v3_e0d8 to i32*
  store i32 %v0_e0d8.pre, i32* %v4_e0d8, align 4
  %v0_e0dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e0dc = add i32 %v0_e0dc, 4
  store i32 %v1_e0dc, i32* %r3.global-to-local, align 4
  %v7_e0e0 = icmp eq i32 %v1_e0dc, 128
  br i1 %v7_e0e0, label %dec_label_pc_e0e8, label %dec_label_pc_e0d8.dec_label_pc_e0d8_crit_edge

dec_label_pc_e0e8:                                ; preds = %dec_label_pc_e0d8.dec_label_pc_e0d8_crit_edge, %dec_label_pc_e0d0
  %v2_e0e8 = load i32, i32* @global_var_1c020.93, align 4
  %v7_e0ec = icmp eq i32 %v2_e0e8, -1
  br i1 %v7_e0ec, label %dec_label_pc_e118, label %dec_label_pc_e0f4

dec_label_pc_e0f4:                                ; preds = %dec_label_pc_e0e8
  %v3_e0f4 = udiv i32 %v2_e0e8, 32
  %v3_e0f8 = mul nuw nsw i32 %v3_e0f4, 4
  %v2_e100 = add i32 %v3_e0f8, %v2_df50
  store i32 %v2_e100, i32* %r3.global-to-local, align 4
  %v1_e104 = add i32 %v2_e100, -216
  %v2_e104 = inttoptr i32 %v1_e104 to i32*
  %v3_e104 = load i32, i32* %v2_e104, align 4
  %v1_e108 = urem i32 %v2_e0e8, 32
  %v7_e110 = shl i32 1, %v1_e108
  %v8_e110 = or i32 %v3_e104, %v7_e110
  store i32 %v8_e110, i32* %r2.global-to-local, align 4
  store i32 %v8_e110, i32* %v2_e104, align 4
  br label %dec_label_pc_e118

dec_label_pc_e118:                                ; preds = %dec_label_pc_e0e8, %dec_label_pc_e0f4
  %v2_e118 = load i32, i32* @global_var_1c024.95, align 4
  store i32 %v2_e118, i32* %r3.global-to-local, align 4
  %v7_e11c = icmp eq i32 %v2_e118, -1
  store i32 ptrtoint (i32* @global_var_1c024.95 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_e11c, label %dec_label_pc_e354, label %dec_label_pc_e128

dec_label_pc_e128:                                ; preds = %dec_label_pc_e354, %dec_label_pc_e118, %.thread
  store i32 ptrtoint (i8** @global_var_1c1a0.97 to i32), i32* %r2.global-to-local, align 4
  %v2_e12c = load i8, i8* bitcast (i8** @global_var_1c1a0.97 to i8*), align 4
  %v2_e130 = icmp eq i8 %v2_e12c, 0
  %v2_e238 = load i32, i32* @global_var_1c024.95, align 4
  %v3_e23c = udiv i32 %v2_e238, 32
  store i32 %v3_e23c, i32* %r3.global-to-local, align 4
  br i1 %v2_e130, label %dec_label_pc_e238, label %dec_label_pc_e138

dec_label_pc_e138:                                ; preds = %dec_label_pc_e128
  %v3_e140 = mul nuw nsw i32 %v3_e23c, 4
  %v2_e148 = add i32 %v3_e140, %v2_df50
  store i32 %v2_e148, i32* %r3.global-to-local, align 4
  %v1_e14c = add i32 %v2_e148, -344
  %v2_e14c = inttoptr i32 %v1_e14c to i32*
  %v3_e14c = load i32, i32* %v2_e14c, align 4
  %v1_e150 = urem i32 %v2_e238, 32
  %v7_e158 = shl i32 1, %v1_e150
  %v8_e158 = or i32 %v3_e14c, %v7_e158
  store i32 %v8_e158, i32* %r2.global-to-local, align 4
  store i32 %v8_e158, i32* %v2_e14c, align 4
  br label %dec_label_pc_e160

dec_label_pc_e160:                                ; preds = %dec_label_pc_e238, %dec_label_pc_e138
  %v2_e160 = load i32, i32* @global_var_1c020.93, align 4
  %v2_e164 = load i32, i32* @global_var_1c024.95, align 4
  store i32 %v2_e164, i32* %r3.global-to-local, align 4
  %v5_e170 = icmp slt i32 %v2_e160, %v2_e164
  br i1 %v5_e170, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_e160
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_e160, %bb
  %v0_e188 = phi i32 [ %v2_e160, %dec_label_pc_e160 ], [ %v2_e164, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e188 = add i32 %v0_e188, 1
  store i32 %v2_e0b4, i32* %r2.global-to-local, align 4
  %v5_e19c = call i32 @function_11340(i32 %v1_e188, i32 %v2_e0b0, i32 %v2_e0b4, i32 0, i32 %v2_e184)
  %v8_e1a0 = icmp eq i32 %v5_e19c, -1
  store i32 %v5_e19c, i32* %r3.global-to-local, align 4
  br i1 %v8_e1a0, label %dec_label_pc_e0b8.backedge, label %dec_label_pc_e1ac

dec_label_pc_e1ac:                                ; preds = %bb40
  %v6_e19c = trunc i32 %v5_e19c to i8
  %v3_e1ac = icmp eq i8 %v6_e19c, 0
  br i1 %v3_e1ac, label %dec_label_pc_e1b4, label %dec_label_pc_e1d4

dec_label_pc_e1b4:                                ; preds = %dec_label_pc_e1ac
  %v0_e1b4 = load i32, i32* @sb, align 4
  %v6_e1c0 = inttoptr i32 %v5_e19c to i8*
  store i8* %v6_e1c0, i8** %stack_var_-38, align 4
  %v2_e1c4 = call i32 @function_10f74(i32 %v0_e1b4, i32 6)
  %v2_e1c8 = icmp eq i32 %v2_e1c4, 0
  %v0_e1cc = load i32, i32* @sb, align 4
  %v1_e1cc = add i32 %v0_e1cc, 1
  store i32 %v1_e1cc, i32* @sb, align 4
  br i1 %v2_e1c8, label %dec_label_pc_e424, label %dec_label_pc_e1d4

dec_label_pc_e1d4:                                ; preds = %dec_label_pc_e1ac, %dec_label_pc_e1b4, %dec_label_pc_e424
  store i32 ptrtoint (i8** @global_var_1c1a0.97 to i32), i32* %r2.global-to-local, align 4
  %v2_e1d8 = load i8, i8* bitcast (i8** @global_var_1c1a0.97 to i8*), align 4
  %v3_e1d8 = zext i8 %v2_e1d8 to i32
  store i32 %v3_e1d8, i32* @r4, align 4
  %v2_e1dc = icmp eq i8 %v2_e1d8, 0
  %v2_e264 = load i32, i32* @global_var_1c024.95, align 4
  br i1 %v2_e1dc, label %dec_label_pc_e264, label %dec_label_pc_e1e4

dec_label_pc_e1e4:                                ; preds = %dec_label_pc_e1d4
  %v3_e1e8 = udiv i32 %v2_e264, 32
  %v3_e1f0 = mul nuw nsw i32 %v3_e1e8, 4
  %v2_e1f4 = add i32 %v3_e1f0, %v2_df50
  store i32 %v2_e1f4, i32* %r3.global-to-local, align 4
  %v1_e1f8 = add i32 %v2_e1f4, -344
  %v2_e1f8 = inttoptr i32 %v1_e1f8 to i32*
  %v3_e1f8 = load i32, i32* %v2_e1f8, align 4
  %v1_e1fc = urem i32 %v2_e264, 32
  %v6_e200 = lshr i32 %v3_e1f8, %v1_e1fc
  store i32 %v6_e200, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c1a0.97 to i32), i32* %r3.global-to-local, align 4
  %v1_e20c = urem i32 %v6_e200, 2
  %v2_e20c = icmp eq i32 %v1_e20c, 0
  store i8 0, i8* bitcast (i8** @global_var_1c1a0.97 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1c024.95 to i32), i32* @r4, align 4
  br i1 %v2_e20c, label %dec_label_pc_e21c, label %dec_label_pc_e3c4

dec_label_pc_e21c:                                ; preds = %dec_label_pc_e1e4
  store i32 57892, i32* @lr, align 4
  %v1_e220 = icmp ne i32 %v2_e264, -1
  call void @__pseudo_cond_branch(i1 %v1_e220, i32 ptrtoint (i32* @global_var_11120.98 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e228 = load i32, i32* @r4, align 4
  %v2_e228 = inttoptr i32 %v1_e228 to i32*
  store i32 -1, i32* %v2_e228, align 4
  %v1_e230 = call i32 @function_12500(i32 1)
  br label %dec_label_pc_e0b8.backedge

dec_label_pc_e0b8.backedge:                       ; preds = %dec_label_pc_e21c, %dec_label_pc_e330, %dec_label_pc_e3fc, %dec_label_pc_e498, %dec_label_pc_e4c4, %dec_label_pc_e4e0, %dec_label_pc_e548, %bb40, %dec_label_pc_e264, %dec_label_pc_e274, %dec_label_pc_e444, %bb42, %dec_label_pc_e4f4, %dec_label_pc_e4b0
  %v2_e0c043.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e0b8

dec_label_pc_e238:                                ; preds = %dec_label_pc_e128
  store i32 %v2_df50, i32* %r2.global-to-local, align 4
  %v3_e244 = mul nuw nsw i32 %v3_e23c, 4
  %v2_e248 = add i32 %v3_e244, %v2_df50
  store i32 %v2_e248, i32* %r3.global-to-local, align 4
  %v1_e24c = add i32 %v2_e248, -216
  %v2_e24c = inttoptr i32 %v1_e24c to i32*
  %v3_e24c = load i32, i32* %v2_e24c, align 4
  %v1_e250 = urem i32 %v2_e238, 32
  %v7_e258 = shl i32 1, %v1_e250
  %v8_e258 = or i32 %v3_e24c, %v7_e258
  store i32 %v8_e258, i32* %r2.global-to-local, align 4
  store i32 %v8_e258, i32* %v2_e24c, align 4
  br label %dec_label_pc_e160

dec_label_pc_e264:                                ; preds = %dec_label_pc_e1d4
  %v7_e268 = icmp eq i32 %v2_e264, -1
  store i32 ptrtoint (i32* @global_var_1c024.95 to i32), i32* @r8, align 4
  br i1 %v7_e268, label %dec_label_pc_e0b8.backedge, label %dec_label_pc_e274

dec_label_pc_e274:                                ; preds = %dec_label_pc_e264
  %v3_e274 = udiv i32 %v2_e264, 32
  %v3_e278 = mul nuw nsw i32 %v3_e274, 4
  %v2_e280 = add i32 %v3_e278, %v2_df50
  store i32 %v2_e280, i32* %r3.global-to-local, align 4
  %v1_e284 = add i32 %v2_e280, -216
  %v2_e284 = inttoptr i32 %v1_e284 to i32*
  %v3_e284 = load i32, i32* %v2_e284, align 4
  %v1_e288 = urem i32 %v2_e264, 32
  %v6_e28c = lshr i32 %v3_e284, %v1_e288
  store i32 %v6_e28c, i32* %r2.global-to-local, align 4
  %v1_e290 = urem i32 %v6_e28c, 2
  %v2_e290 = icmp eq i32 %v1_e290, 0
  br i1 %v2_e290, label %dec_label_pc_e0b8.backedge, label %dec_label_pc_e298

dec_label_pc_e298:                                ; preds = %dec_label_pc_e274
  %v6_e298 = inttoptr i32 %v3_e1d8 to i8*
  store i8* %v6_e298, i8** %stack_var_-38, align 4
  %v0_e2a0 = call i32 @function_116f4()
  %v0_e2a4 = load i32, i32* @r4, align 4
  %v2_e2a4 = inttoptr i32 %v0_e2a0 to i32*
  store i32 %v0_e2a4, i32* %v2_e2a4, align 4
  store i32 %v0_e2a0, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e2b8 = load i32, i32* @global_var_1c024.95, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e2c4 = call i32 @function_118f4(i32 %v2_e2b8, i32* %v4_e43c, i32 2, i32 16386)
  %v7_e2c8 = icmp eq i32 %v5_e2c4, -1
  br i1 %v7_e2c8, label %dec_label_pc_e4b0, label %dec_label_pc_e2d0

dec_label_pc_e2d0:                                ; preds = %dec_label_pc_e298
  %v2_e2d0 = icmp eq i32 %v5_e2c4, 0
  br i1 %v2_e2d0, label %dec_label_pc_e330, label %dec_label_pc_e2d8

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2d0
  %v3_e2d8 = load i8*, i8** %stack_var_-38, align 4
  %v4_e2d8 = ptrtoint i8* %v3_e2d8 to i32
  store i32 %v3_e1d8, i32* %r3.global-to-local, align 4
  %v4_e2e0 = mul nuw nsw i32 %v3_e1d8, 256
  %v5_e2e0 = or i32 %v4_e2d8, %v4_e2e0
  store i32 %v5_e2e0, i32* %r2.global-to-local, align 4
  %v7_e2e0 = icmp eq i32 %v5_e2e0, 0
  br i1 %v7_e2e0, label %dec_label_pc_e4c4, label %dec_label_pc_e2e8

dec_label_pc_e2e8:                                ; preds = %dec_label_pc_e2d8
  %v1_e2e8 = mul i32 %v4_e2d8, 256
  %v3_e2ec = and i32 %v1_e2e8, 65280
  %v4_e2f0 = udiv i32 %v5_e2e0, 256
  %v5_e2f0 = or i32 %v3_e2ec, %v4_e2f0
  %v6_e2f0 = trunc i32 %v4_e2f0 to i8
  store i32 %v5_e2f0, i32* %r2.global-to-local, align 4
  %v4_e2f4 = udiv i32 %v5_e2e0, 65536
  store i32 %v4_e2f4, i32* %r3.global-to-local, align 4
  %v3_e2f8 = icmp slt i8 %v6_e2f0, 0
  %v7_e300 = inttoptr i32 %v4_e2f0 to i8*
  store i8* %v7_e300, i8** %stack_var_-38, align 4
  br i1 %v3_e2f8, label %dec_label_pc_e4e0, label %dec_label_pc_e308

dec_label_pc_e308:                                ; preds = %dec_label_pc_e2e8
  %v0_e308 = load i32, i32* @r4, align 4
  %v1_e308 = load i32, i32* @r5, align 4
  %v2_e308 = inttoptr i32 %v1_e308 to i32*
  store i32 %v0_e308, i32* %v2_e308, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e314 = load i32, i32* @global_var_1c024.95, align 4
  %v9_e31c = call i32 @function_118f4(i32 %v2_e314, i32* nonnull %stack_var_-1532, i32 %v4_e2f0, i32 16386)
  %v7_e320 = icmp eq i32 %v9_e31c, -1
  br i1 %v7_e320, label %dec_label_pc_e4b0, label %dec_label_pc_e328

dec_label_pc_e328:                                ; preds = %dec_label_pc_e308
  %v2_e328 = icmp eq i32 %v9_e31c, 0
  br i1 %v2_e328, label %dec_label_pc_e330, label %dec_label_pc_e4f4

dec_label_pc_e330:                                ; preds = %bb42, %dec_label_pc_e328, %dec_label_pc_e2d0
  %v2_e330 = load i32, i32* @global_var_1c024.95, align 4
  store i32 58172, i32* @lr, align 4
  %v1_e338 = icmp ne i32 %v2_e330, -1
  call void @__pseudo_cond_branch(i1 %v1_e338, i32 ptrtoint (i32* @global_var_11120.98 to i32))
  store i32 ptrtoint (i32* @global_var_1c024.95 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1c024.95, align 4
  %v1_e34c = call i32 @function_12500(i32 1)
  br label %dec_label_pc_e0b8.backedge

dec_label_pc_e354:                                ; preds = %dec_label_pc_e118
  %v0_e35c = load i32, i32* @r4, align 4
  store i32 %v0_e35c, i32* %r2.global-to-local, align 4
  %v3_e360 = call i32 @function_119e4(i32 2, i32 1, i32 %v0_e35c)
  %v7_e364 = icmp eq i32 %v3_e360, -1
  store i32 %v3_e360, i32* @r5, align 4
  %v1_e36c = load i32, i32* %r8.global-to-local, align 4
  %v2_e36c = inttoptr i32 %v1_e36c to i32*
  store i32 %v3_e360, i32* %v2_e36c, align 4
  br i1 %v7_e364, label %dec_label_pc_e128, label %dec_label_pc_e374

dec_label_pc_e374:                                ; preds = %dec_label_pc_e354
  %v0_e374 = load i32, i32* @r4, align 4
  store i32 %v0_e374, i32* @r2, align 4
  %v2_e37c = call i32 @function_1105c(i32 %v3_e360, i32 3)
  %v1_e384 = or i32 %v2_e37c, 2048
  store i32 %v1_e384, i32* @r2, align 4
  %v0_e388 = load i32, i32* @r5, align 4
  %v2_e38c = call i32 @function_1105c(i32 %v0_e388, i32 4)
  store i32 ptrtoint (i32* @global_var_1c028.72 to i32), i32* %r2.global-to-local, align 4
  %v2_e394 = load i32, i32* @global_var_1c028.72, align 4
  store i32 %v2_e394, i32* %r3.global-to-local, align 4
  %v2_e398 = icmp eq i32 %v2_e394, 0
  br i1 %v2_e398, label %.thread, label %bb41

bb41:                                             ; preds = %dec_label_pc_e374
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_10ad4.99 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e374, %bb41
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e3ac = load i32, i32* @global_var_1c024.95, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1c1a0.97 to i8*), align 4
  %v5_e3bc = call i32 @function_1186c(i32 %v2_e3ac, %sockaddr* bitcast (i8** @global_var_1c23c.76 to %sockaddr*), i32 16)
  br label %dec_label_pc_e128

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_e1e4
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v2_e3d4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-48, align 4
  %v6_e3ec = call i32 @function_118c4(i32 %v2_e264, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_e3d8)
  %v3_e3f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e3f0, i32* %r3.global-to-local, align 4
  %v2_e3f4 = icmp eq i32 %v3_e3f0, 0
  br i1 %v2_e3f4, label %dec_label_pc_e444, label %dec_label_pc_e3fc

dec_label_pc_e3fc:                                ; preds = %dec_label_pc_e3c4
  %v2_e3fc = load i32, i32* @global_var_1c024.95, align 4
  %v1_e400 = call i32 @function_11120(i32 %v2_e3fc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e408 = load i32, i32* @r4, align 4
  %v2_e408 = inttoptr i32 %v1_e408 to i32*
  store i32 -1, i32* %v2_e408, align 4
  %v0_e40c = call i32 @function_e580()
  %v2_e414 = call i32 @function_10ea8(i32 %v0_e40c, i32 10)
  %v1_e418 = add i32 %v2_e414, 1
  %v1_e41c = call i32 @function_12500(i32 %v1_e418)
  br label %dec_label_pc_e0b8.backedge

dec_label_pc_e424:                                ; preds = %dec_label_pc_e1b4
  %v2_e42c = load i32, i32* @global_var_1c024.95, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e43c = call i32 @function_11954(i32 %v2_e42c, i32* nonnull %v4_e43c, i32 2, i32 16384)
  br label %dec_label_pc_e1d4

dec_label_pc_e444:                                ; preds = %dec_label_pc_e3c4
  %v2_e44c = call i32 @function_1081c(i8* %v1_e44c)
  %sext = mul i32 %v2_e44c, 16777216
  %v1_e450 = sdiv i32 %sext, 16777216
  %v7_e450 = inttoptr i32 %v1_e450 to i8*
  store i8* %v7_e450, i8** %stack_var_-38, align 4
  %v0_e454 = call i32 @function_10ad4()
  store i32 %v0_e454, i32* @global_var_1c230.50, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e468 = load i32, i32* @r5, align 4
  store i32 %v0_e468, i32* %r2.global-to-local, align 4
  %v2_e46c = load i32, i32* @global_var_1c024.95, align 4
  %v5_e470 = call i32 @function_11954(i32 %v2_e46c, i32* nonnull @global_var_1398c.101, i32 %v0_e468, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_e47c = load i32, i32* @global_var_1c024.95, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e488 = call i32 @function_11954(i32 %v2_e47c, i32* %v4_e43c, i32 1, i32 16384)
  %v3_e48c = load i8*, i8** %stack_var_-38, align 4
  %v4_e48c = ptrtoint i8* %v3_e48c to i32
  store i32 %v4_e48c, i32* %r2.global-to-local, align 4
  %v3_e490 = icmp eq i8* %v3_e48c, null
  br i1 %v3_e490, label %dec_label_pc_e0b8.backedge, label %dec_label_pc_e498

dec_label_pc_e498:                                ; preds = %dec_label_pc_e444
  %v2_e49c = load i32, i32* @global_var_1c024.95, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e4a8 = call i32 @function_11954(i32 %v2_e49c, i32* nonnull %stack_var_-124, i32 %v4_e48c, i32 16384)
  br label %dec_label_pc_e0b8.backedge

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_e308, %dec_label_pc_e298
  %v0_e4b0 = load i32, i32* @r5, align 4
  %v1_e4b0 = inttoptr i32 %v0_e4b0 to i32*
  %v2_e4b0 = load i32, i32* %v1_e4b0, align 4
  store i32 %v2_e4b0, i32* %r3.global-to-local, align 4
  %v7_e4b4 = icmp eq i32 %v2_e4b0, 4
  br i1 %v7_e4b4, label %dec_label_pc_e0b8.backedge, label %bb42

bb42:                                             ; preds = %dec_label_pc_e4b0
  %v8_e4b8 = icmp eq i32 %v2_e4b0, 11
  br i1 %v8_e4b8, label %dec_label_pc_e0b8.backedge, label %dec_label_pc_e330

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e2d8
  %v2_e4c8 = load i32, i32* @global_var_1c024.95, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e4d8 = call i32 @function_118f4(i32 %v2_e4c8, i32* nonnull %v4_e43c, i32 2, i32 16384)
  br label %dec_label_pc_e0b8.backedge

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e2e8
  %v2_e4e0 = load i32, i32* @global_var_1c024.95, align 4
  %v1_e4e4 = call i32 @function_11120(i32 %v2_e4e0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e4ec = load i32, i32* @r8, align 4
  %v2_e4ec = inttoptr i32 %v1_e4ec to i32*
  store i32 -1, i32* %v2_e4ec, align 4
  br label %dec_label_pc_e0b8.backedge

dec_label_pc_e4f4:                                ; preds = %dec_label_pc_e328
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e504 = load i32, i32* @global_var_1c024.95, align 4
  %v5_e508 = call i32 @function_118f4(i32 %v2_e504, i32* nonnull %v4_e43c, i32 2, i32 16384)
  %v3_e50c = load i8*, i8** %stack_var_-38, align 4
  %v4_e50c = ptrtoint i8* %v3_e50c to i32
  %v4_e510 = urem i32 %v4_e2f4, 256
  %v4_e514 = mul i32 %v4_e50c, 256
  %v5_e514 = or i32 %v4_e514, %v4_e510
  store i32 %v5_e514, i32* %r2.global-to-local, align 4
  %v3_e51c = sdiv i32 %v4_e514, 256
  store i32 %v3_e51c, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e528 = load i32, i32* @global_var_1c024.95, align 4
  %v6_e530 = inttoptr i32 %v5_e514 to i8*
  store i8* %v6_e530, i8** %stack_var_-38, align 4
  %v8_e534 = call i32 @function_118f4(i32 %v2_e528, i32* nonnull %stack_var_-1532, i32 %v5_e514, i32 16384)
  %v3_e538 = load i8*, i8** %stack_var_-38, align 4
  %v4_e538 = ptrtoint i8* %v3_e538 to i32
  store i32 %v4_e538, i32* %r2.global-to-local, align 4
  %v4_e53c = urem i32 %v3_e51c, 256
  store i32 %v4_e53c, i32* %r3.global-to-local, align 4
  %v6_e540 = mul nuw nsw i32 %v4_e53c, 256
  %v7_e540 = or i32 %v4_e538, %v6_e540
  %v9_e540 = icmp eq i32 %v7_e540, 0
  br i1 %v9_e540, label %dec_label_pc_e0b8.backedge, label %dec_label_pc_e548

dec_label_pc_e548:                                ; preds = %dec_label_pc_e4f4
  %v7_e54c = call i32 @function_8320(i32* nonnull %stack_var_-1532, i32 %v7_e540, i32 %v4_e538, i32 %v4_e53c)
  br label %dec_label_pc_e0b8.backedge

; uselistorder directives
  uselistorder i32 %v4_e53c, { 2, 0, 1 }
  uselistorder i32 %v4_e538, { 1, 0, 2 }
  uselistorder i32 %v3_e51c, { 1, 0 }
  uselistorder i32 %v5_e514, { 1, 0, 2 }
  uselistorder i32 %v4_e514, { 1, 0 }
  uselistorder i32 %v3_e360, { 1, 3, 2, 0 }
  uselistorder i32 %v9_e31c, { 1, 0 }
  uselistorder i32 %v4_e2f0, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e2c4, { 1, 0 }
  uselistorder i32 %v2_e264, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_e19c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e0e8, { 2, 1, 0 }
  uselistorder i32 %v1_e0dc, { 1, 2, 0 }
  uselistorder i32 %v1_e0c4, { 1, 2, 0 }
  uselistorder i32* %v4_e43c, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_e0b4, { 1, 0, 2 }
  uselistorder i32 %v2_e0b0, { 1, 0, 2 }
  uselistorder i32 %v2_df50, { 0, 1, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32 %v2_df40, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_de60, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-124, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 22, 30, 31, 32, 43, 44, 36, 37, 33, 41, 42, 34, 35, 38, 39, 40 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @function_12500, { 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1c1a0.97 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1c1a0.97, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c1a0.97 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1c024.95, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32 (i32)* @function_dd68, { 1, 0 }
  uselistorder i32 (i32)* @function_d760, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_10844, { 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32, i32)* @function_e634, { 1, 0, 2 }
  uselistorder i32* @global_var_1c028.72, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_dd14.70 to i32), { 0, 2, 1 }
  uselistorder i8** @global_var_1c23c.76, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11a58, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e0b8.backedge, { 6, 12, 5, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e1d4, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_e128, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e118, { 1, 0 }
  uselistorder label %dec_label_pc_e0d8.dec_label_pc_e0d8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e0c0.dec_label_pc_e0c0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_df0c, { 2, 0, 1 }
}

define i32 @function_e580() local_unnamed_addr {
dec_label_pc_e580:
  %v2_e58c = load i32, i32* @global_var_1c1a4.103, align 4
  %v2_e590 = load i32, i32* @global_var_1c1b0.105, align 4
  store i32 ptrtoint (i32* @global_var_1c1a8.107 to i32), i32* @lr, align 4
  %v4_e59c = mul i32 %v2_e58c, 2048
  %v5_e59c = xor i32 %v4_e59c, %v2_e58c
  %v4_e5a0 = udiv i32 %v2_e590, 524288
  %v5_e5a0 = xor i32 %v4_e5a0, %v2_e590
  %v2_e5a4 = load i32, i32* @global_var_1c1a8.107, align 4
  %v2_e5a8 = load i32, i32* @global_var_1c1ac.109, align 4
  %v2_e5ac = xor i32 %v5_e5a0, %v5_e59c
  %v4_e5b0 = udiv i32 %v5_e59c, 256
  %v5_e5b0 = xor i32 %v2_e5ac, %v4_e5b0
  store i32 %v2_e5a4, i32* @global_var_1c1a4.103, align 4
  store i32 %v2_e5a8, i32* @global_var_1c1a8.107, align 4
  store i32 %v2_e590, i32* @global_var_1c1ac.109, align 4
  store i32 %v5_e5b0, i32* @global_var_1c1b0.105, align 4
  ret i32 %v5_e5b0

; uselistorder directives
  uselistorder i32 %v2_e590, { 2, 1, 0 }
  uselistorder i32 %v2_e58c, { 1, 0 }
}

define i32 @function_e5d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5d8:
  %stack_var_-12 = alloca i32, align 4
  %v3_e5d8 = load i32, i32* @r4, align 4
  store i32 %v3_e5d8, i32* %stack_var_-12, align 4
  %v2_e5e0 = call i32 @function_113f0(i32* null)
  store i32 %v2_e5e0, i32* @global_var_1c1a4.103, align 4
  %v0_e5ec = call i32 @function_11178()
  store i32 %v0_e5ec, i32* @r4, align 4
  %v0_e5f4 = call i32 @function_111a4()
  %v0_e5fc = load i32, i32* @r4, align 4
  %v2_e5fc = xor i32 %v0_e5fc, %v0_e5f4
  store i32 %v2_e5fc, i32* @r4, align 4
  store i32 %v2_e5fc, i32* @global_var_1c1a8.107, align 4
  %v1_e604 = call i32 @function_11700(i32 %v0_e5f4)
  %v2_e608 = load i32, i32* @global_var_1c1a8.107, align 4
  %v2_e614 = xor i32 %v2_e608, %v1_e604
  store i32 %v2_e614, i32* @global_var_1c1b0.105, align 4
  store i32 %v1_e604, i32* @global_var_1c1ac.109, align 4
  %v2_e620 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_e620, i32* @r4, align 4
  ret i32 %v1_e604

; uselistorder directives
  uselistorder i32 %v1_e604, { 1, 2, 0 }
  uselistorder i32 %v0_e5f4, { 1, 0 }
  uselistorder i32 ()* @function_111a4, { 2, 1, 0 }
}

define i32 @function_e634(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e634:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e634 = load i32, i32* @r4, align 4
  store i32 %v3_e634, i32* %stack_var_-36, align 4
  %v6_e634 = load i32, i32* @r5, align 4
  %v9_e634 = load i32, i32* @r6, align 4
  %v12_e634 = load i32, i32* @r7, align 4
  %v28_e634 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_e63c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e648 = call i32 @function_10250(i32 28)
  %v3_e654 = call i32 @function_1016c(i32 28, i32* null)
  %v2_e660 = inttoptr i32 %v3_e654 to i8*
  %v3_e660 = call i32 @function_11800(i32 %v2_e63c, i8* %v2_e660)
  %v2_e664 = icmp eq i32 %arg2, 0
  br i1 %v2_e664, label %dec_label_pc_e6e0, label %dec_label_pc_e66c

dec_label_pc_e66c:                                ; preds = %dec_label_pc_e634
  store i32 ptrtoint (i32* @global_var_1c1a4.103 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1a8.107 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1ac.109 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1c1b0.105 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_e6b4 = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_e680

dec_label_pc_e680:                                ; preds = %dec_label_pc_e680.dec_label_pc_e680_crit_edge, %dec_label_pc_e66c
  %v1_e6a4 = phi i32 [ %v1_e6a4.pre, %dec_label_pc_e680.dec_label_pc_e680_crit_edge ], [ ptrtoint (i32* @global_var_1c1a4.103 to i32), %dec_label_pc_e66c ]
  %v2_e680 = load i32, i32* @global_var_1c1b0.105, align 4
  store i32 %v2_e680, i32* %r2.global-to-local, align 4
  %v2_e684 = load i32, i32* @global_var_1c1a4.103, align 4
  %v4_e688 = udiv i32 %v2_e680, 524288
  %v5_e688 = xor i32 %v4_e688, %v2_e680
  %v4_e68c = mul i32 %v2_e684, 2048
  %v5_e68c = xor i32 %v4_e68c, %v2_e684
  %v2_e690 = xor i32 %v5_e688, %v5_e68c
  %v2_e694 = load i32, i32* @global_var_1c1a8.107, align 4
  %v2_e698 = load i32, i32* @global_var_1c1ac.109, align 4
  store i32 %v2_e698, i32* %ip.global-to-local, align 4
  %v4_e69c = udiv i32 %v5_e68c, 256
  %v5_e69c = xor i32 %v2_e690, %v4_e69c
  store i32 %v5_e69c, i32* @r4, align 4
  %v2_e6a4 = inttoptr i32 %v1_e6a4 to i32*
  store i32 %v2_e694, i32* %v2_e6a4, align 4
  %v0_e6a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_e6a8 = load i32, i32* %r8.global-to-local, align 4
  %v2_e6a8 = inttoptr i32 %v1_e6a8 to i32*
  store i32 %v0_e6a8, i32* %v2_e6a8, align 4
  %v0_e6ac = load i32, i32* %r2.global-to-local, align 4
  %v1_e6ac = load i32, i32* @r7, align 4
  %v2_e6ac = inttoptr i32 %v1_e6ac to i32*
  store i32 %v0_e6ac, i32* %v2_e6ac, align 4
  %v0_e6b0 = load i32, i32* @r4, align 4
  %v1_e6b0 = load i32, i32* @r6, align 4
  %v2_e6b0 = inttoptr i32 %v1_e6b0 to i32*
  store i32 %v0_e6b0, i32* %v2_e6b0, align 4
  %v2_e6b4 = call i32 @function_1081c(i8* %v1_e6b4)
  %v0_e6bc = load i32, i32* @r4, align 4
  %v2_e6c0 = call i32 @function_10ea8(i32 %v0_e6bc, i32 %v2_e6b4)
  %v2_e6c8 = add i32 %v2_e6c0, %v28_e634
  %v1_e6cc = add i32 %v2_e6c8, -32
  %v2_e6cc = inttoptr i32 %v1_e6cc to i8*
  %v3_e6cc = load i8, i8* %v2_e6cc, align 1
  %v2_e6d0 = load i32, i32* @r5, align 4
  %v3_e6d0 = load i32, i32* %fp.global-to-local, align 4
  %v4_e6d0 = add i32 %v3_e6d0, %v2_e6d0
  %v5_e6d0 = inttoptr i32 %v4_e6d0 to i8*
  store i8 %v3_e6cc, i8* %v5_e6d0, align 1
  %v0_e6d4 = load i32, i32* @r5, align 4
  %v1_e6d4 = add i32 %v0_e6d4, 1
  store i32 %v1_e6d4, i32* @r5, align 4
  %v1_e6d8 = load i32, i32* %sb.global-to-local, align 4
  %v9_e6d8 = icmp eq i32 %v1_e6d4, %v1_e6d8
  br i1 %v9_e6d8, label %dec_label_pc_e6e0, label %dec_label_pc_e680.dec_label_pc_e680_crit_edge

dec_label_pc_e680.dec_label_pc_e680_crit_edge:    ; preds = %dec_label_pc_e680
  %v1_e6a4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e680

dec_label_pc_e6e0:                                ; preds = %dec_label_pc_e680, %dec_label_pc_e634
  %v1_e6e4 = call i32 @function_10198(i32 28)
  %v2_e6ec = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e6ec, i32* @r4, align 4
  store i32 %v6_e634, i32* @r5, align 4
  store i32 %v9_e634, i32* @r6, align 4
  store i32 %v12_e634, i32* @r7, align 4
  ret i32 %v1_e6e4

; uselistorder directives
  uselistorder i32 %v2_e684, { 1, 0 }
  uselistorder i32 %v2_e680, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_e700(i8* %arg1) local_unnamed_addr {
dec_label_pc_e700:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_e700 = load i32, i32* @r4, align 4
  store i32 %v3_e700, i32* %stack_var_-36, align 4
  %v9_e700 = load i32, i32* @r6, align 4
  %v12_e700 = load i32, i32* @r7, align 4
  %v15_e700 = load i32, i32* @r8, align 4
  %v18_e700 = load i32, i32* @sb, align 4
  %v21_e700 = load i32, i32* @sl, align 4
  %v24_e700 = load i32, i32* @fp, align 4
  %v0_e704 = load i32, i32* @r1, align 4
  store i32 %v0_e704, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_e704, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_e700
  store i32 %v3_e700, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_e700
  store i32 ptrtoint (i32* @global_var_1c1b0.105 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1ac.109 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1a8.107 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1a4.103 to i32), i32* %r8.global-to-local, align 4
  %v2_e720 = load i32, i32* @global_var_1c1b0.105, align 4
  store i32 %v2_e720, i32* @lr, align 4
  %v2_e724 = load i32, i32* @global_var_1c1ac.109, align 4
  store i32 %v2_e724, i32* %r7.global-to-local, align 4
  %v2_e728 = load i32, i32* @global_var_1c1a8.107, align 4
  store i32 %v2_e728, i32* %r6.global-to-local, align 4
  %v2_e72c = load i32, i32* @global_var_1c1a4.103, align 4
  br label %dec_label_pc_e758

dec_label_pc_e734:                                ; preds = %dec_label_pc_e784
  %v3_e78c = sdiv i32 %v5_e770, 256
  %v1_e734 = trunc i32 %v3_e78c to i8
  %v3_e734 = add i32 %v9_e778, 1
  %v4_e734 = inttoptr i32 %v3_e734 to i8*
  store i8 %v1_e734, i8* %v4_e734, align 1
  %v0_e738 = load i32, i32* %r3.global-to-local, align 4
  %v1_e738 = trunc i32 %v0_e738 to i8
  %v2_e738 = load i32, i32* %r5.global-to-local, align 4
  %v3_e738 = inttoptr i32 %v2_e738 to i8*
  store i8 %v1_e738, i8* %v3_e738, align 1
  %v0_e73c = load i32, i32* %r5.global-to-local, align 4
  %v1_e73c = add i32 %v0_e73c, 2
  store i32 %v1_e73c, i32* %r5.global-to-local, align 4
  %v0_e740.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %.thread, %dec_label_pc_e734
  %v0_e740 = phi i32 [ %v9_e77c, %.thread ], [ %v0_e740.pre, %dec_label_pc_e734 ]
  %v2_e7347 = phi i32 [ %v12_e778, %.thread ], [ %v1_e73c, %dec_label_pc_e734 ]
  %tmp22 = icmp slt i32 %v0_e740, 1
  br i1 %tmp22, label %dec_label_pc_e7c0, label %dec_label_pc_e74c

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e740
  %v0_e744 = load i32, i32* %r6.global-to-local, align 4
  %v0_e74c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_e74c, i32* %r6.global-to-local, align 4
  %v0_e750 = load i32, i32* @lr, align 4
  store i32 %v0_e750, i32* %r7.global-to-local, align 4
  %v0_e754 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e754, i32* @lr, align 4
  br label %dec_label_pc_e758

dec_label_pc_e758:                                ; preds = %bb21, %dec_label_pc_e74c
  %v0_e7a8 = phi i32 [ %v2_e728, %bb21 ], [ %v0_e74c, %dec_label_pc_e74c ]
  %v9_e778 = phi i32 [ %tmp, %bb21 ], [ %v2_e7347, %dec_label_pc_e74c ]
  %v0_e790 = phi i32 [ %v0_e704, %bb21 ], [ %v0_e740, %dec_label_pc_e74c ]
  %v0_e79c = phi i32 [ %v2_e720, %bb21 ], [ %v0_e754, %dec_label_pc_e74c ]
  %v0_e798 = phi i32 [ %v2_e72c, %bb21 ], [ %v0_e744, %dec_label_pc_e74c ]
  %v4_e758 = mul i32 %v0_e798, 2048
  %v5_e758 = xor i32 %v4_e758, %v0_e798
  %v4_e75c = udiv i32 %v0_e79c, 524288
  %v5_e75c = xor i32 %v4_e75c, %v0_e79c
  %v2_e760 = xor i32 %v5_e75c, %v5_e758
  %v4_e770 = udiv i32 %v5_e758, 256
  %v5_e770 = xor i32 %v4_e770, %v2_e760
  store i32 %v5_e770, i32* %r3.global-to-local, align 4
  %v7_e778 = icmp sgt i32 %v0_e790, 3
  br i1 %v7_e778, label %.thread, label %dec_label_pc_e784

.thread:                                          ; preds = %dec_label_pc_e758
  %v10_e778 = inttoptr i32 %v9_e778 to i32*
  store i32 %v5_e770, i32* %v10_e778, align 4
  %v11_e778 = load i32, i32* %r5.global-to-local, align 4
  %v12_e778 = add i32 %v11_e778, 4
  store i32 %v12_e778, i32* %r5.global-to-local, align 4
  %v8_e77c = load i32, i32* %r4.global-to-local, align 4
  %v9_e77c = add i32 %v8_e77c, -4
  store i32 %v9_e77c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e740

dec_label_pc_e784:                                ; preds = %dec_label_pc_e758
  store i32 %v5_e770, i32* %r3.global-to-local, align 4
  %v7_e788 = icmp eq i32 %v0_e790, 1
  %v1_e790 = add i32 %v0_e790, -2
  store i32 %v1_e790, i32* %r4.global-to-local, align 4
  br i1 %v7_e788, label %dec_label_pc_e798, label %dec_label_pc_e734

dec_label_pc_e798:                                ; preds = %dec_label_pc_e784
  store i32 %v5_e770, i32* %r3.global-to-local, align 4
  %v1_e7a8 = load i32, i32* %r8.global-to-local, align 4
  %v2_e7a8 = inttoptr i32 %v1_e7a8 to i32*
  store i32 %v0_e7a8, i32* %v2_e7a8, align 4
  %v0_e7ac = load i32, i32* %r7.global-to-local, align 4
  %v1_e7ac = load i32, i32* %sl.global-to-local, align 4
  %v2_e7ac = inttoptr i32 %v1_e7ac to i32*
  store i32 %v0_e7ac, i32* %v2_e7ac, align 4
  %v0_e7b0 = load i32, i32* @lr, align 4
  %v1_e7b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_e7b0 = inttoptr i32 %v1_e7b0 to i32*
  store i32 %v0_e7b0, i32* %v2_e7b0, align 4
  %v0_e7b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e7b4 = load i32, i32* %fp.global-to-local, align 4
  %v2_e7b4 = inttoptr i32 %v1_e7b4 to i32*
  store i32 %v0_e7b4, i32* %v2_e7b4, align 4
  %v0_e7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e7b8 = trunc i32 %v0_e7b8 to i8
  %v2_e7b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_e7b8 = inttoptr i32 %v2_e7b8 to i8*
  store i8 %v1_e7b8, i8* %v3_e7b8, align 1
  %v2_e7bc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e7bc, i32* @r4, align 4
  store i32 %v9_e700, i32* @r6, align 4
  store i32 %v12_e700, i32* @r7, align 4
  store i32 %v15_e700, i32* @r8, align 4
  store i32 %v18_e700, i32* @sb, align 4
  store i32 %v21_e700, i32* @sl, align 4
  store i32 %v24_e700, i32* @fp, align 4
  ret i32 %v5_e758

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_e740
  %v0_e7c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e7c0 = load i32, i32* %fp.global-to-local, align 4
  %v2_e7c0 = inttoptr i32 %v1_e7c0 to i32*
  store i32 %v0_e7c0, i32* %v2_e7c0, align 4
  %v0_e7c4 = load i32, i32* @lr, align 4
  %v1_e7c4 = load i32, i32* %sb.global-to-local, align 4
  %v2_e7c4 = inttoptr i32 %v1_e7c4 to i32*
  store i32 %v0_e7c4, i32* %v2_e7c4, align 4
  %v0_e7c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_e7c8 = load i32, i32* %sl.global-to-local, align 4
  %v2_e7c8 = inttoptr i32 %v1_e7c8 to i32*
  store i32 %v0_e7c8, i32* %v2_e7c8, align 4
  %v0_e7cc = load i32, i32* %r6.global-to-local, align 4
  %v1_e7cc = load i32, i32* %r8.global-to-local, align 4
  %v2_e7cc = inttoptr i32 %v1_e7cc to i32*
  store i32 %v0_e7cc, i32* %v2_e7cc, align 4
  %v2_e7d0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e7d0, i32* @r4, align 4
  store i32 %v9_e700, i32* @r6, align 4
  store i32 %v12_e700, i32* @r7, align 4
  store i32 %v15_e700, i32* @r8, align 4
  store i32 %v18_e700, i32* @sb, align 4
  store i32 %v21_e700, i32* @sl, align 4
  store i32 %v24_e700, i32* @fp, align 4
  ret i32 %v5_e758

; uselistorder directives
  uselistorder i32 %v9_e77c, { 1, 0 }
  uselistorder i32 %v12_e778, { 1, 0 }
  uselistorder i32 %v5_e770, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_e758, { 1, 2, 0, 3 }
  uselistorder i32 %v0_e798, { 1, 0 }
  uselistorder i32 %v0_e79c, { 1, 0 }
  uselistorder i32 %v0_e740, { 1, 0 }
  uselistorder i32 %v24_e700, { 1, 0 }
  uselistorder i32 %v21_e700, { 1, 0 }
  uselistorder i32 %v18_e700, { 1, 0 }
  uselistorder i32 %v15_e700, { 1, 0 }
  uselistorder i32 %v12_e700, { 1, 0 }
  uselistorder i32 %v9_e700, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1c1a4.103, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1c1a4.103 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1c1a8.107, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1c1ac.109, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1c1b0.105, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e758, { 1, 0 }
}

define i32 @function_e7e4() local_unnamed_addr {
dec_label_pc_e7e4:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e7e4 = load i32, i32* @r4, align 4
  store i32 %v3_e7e4, i32* %stack_var_-16, align 4
  %v0_e7e8 = load i32, i32* @r0, align 4
  store i32 %v0_e7e8, i32* %r5.global-to-local, align 4
  %v1_e7ec = add i32 %v0_e7e8, 4
  %v2_e7ec = inttoptr i32 %v1_e7ec to i32*
  %v3_e7ec = load i32, i32* %v2_e7ec, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 59408, i32* @lr, align 4
  %v1_e80c = icmp ne i32 %v3_e7ec, -1
  call void @__pseudo_cond_branch(i1 %v1_e80c, i32 ptrtoint (i32* @global_var_11120.98 to i32))
  %v3_e81c = call i32 @function_119e4(i32 2, i32 1, i32 0)
  store i32 %v3_e81c, i32* %r3.global-to-local, align 4
  %v7_e824 = icmp eq i32 %v3_e81c, -1
  store i32 256, i32* @r1, align 4
  %v0_e82c = load i32, i32* %r5.global-to-local, align 4
  %v1_e82c = add i32 %v0_e82c, 28
  store i32 %v1_e82c, i32* @r0, align 4
  %v2_e830 = add i32 %v0_e82c, 4
  %v3_e830 = inttoptr i32 %v2_e830 to i32*
  store i32 %v3_e81c, i32* %v3_e830, align 4
  br i1 %v7_e824, label %dec_label_pc_e7e4.dec_label_pc_e8ac_crit_edge, label %dec_label_pc_e838

dec_label_pc_e7e4.dec_label_pc_e8ac_crit_edge:    ; preds = %dec_label_pc_e7e4
  %v14_e8b0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e8ac

dec_label_pc_e838:                                ; preds = %dec_label_pc_e7e4
  %v0_e838 = load i32, i32* %r6.global-to-local, align 4
  %v1_e838 = load i32, i32* %r5.global-to-local, align 4
  %v2_e838 = add i32 %v1_e838, 24
  %v3_e838 = inttoptr i32 %v2_e838 to i32*
  store i32 %v0_e838, i32* %v3_e838, align 4
  %v0_e83c = call i32 @function_108bc()
  %v0_e840 = load i32, i32* %r5.global-to-local, align 4
  %v1_e840 = add i32 %v0_e840, 4
  %v2_e840 = inttoptr i32 %v1_e840 to i32*
  %v3_e840 = load i32, i32* %v2_e840, align 4
  store i32 %v3_e840, i32* @r4, align 4
  %v0_e848 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e848, i32* @r2, align 4
  %v2_e850 = call i32 @function_1105c(i32 %v3_e840, i32 3)
  %v1_e858 = or i32 %v2_e850, 2048
  store i32 %v1_e858, i32* @r2, align 4
  %v0_e85c = load i32, i32* @r4, align 4
  %v2_e860 = call i32 @function_1105c(i32 %v0_e85c, i32 4)
  store i32 ptrtoint (i32* @global_var_1c1e8.123 to i32), i32* %r3.global-to-local, align 4
  %v0_e868 = load i32, i32* %r5.global-to-local, align 4
  %v1_e868 = add i32 %v0_e868, 20
  %v2_e868 = inttoptr i32 %v1_e868 to i32*
  %v3_e868 = load i32, i32* %v2_e868, align 4
  store i32 %v3_e868, i32* @r4, align 4
  %v2_e86c = load i32, i32* @global_var_1c1e8.123, align 4
  %v1_e870 = add i32 %v0_e868, 16
  %v2_e870 = inttoptr i32 %v1_e870 to i32*
  %v3_e870 = load i32, i32* %v2_e870, align 4
  store i32 %v3_e870, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e878 = add i32 %v0_e868, 8
  %v3_e878 = inttoptr i32 %v2_e878 to i32*
  store i32 %v2_e86c, i32* %v3_e878, align 4
  %v0_e87c = load i32, i32* %r3.global-to-local, align 4
  %v1_e87c = load i32, i32* %r5.global-to-local, align 4
  %v2_e87c = add i32 %v1_e87c, 12
  %v3_e87c = inttoptr i32 %v2_e87c to i32*
  store i32 %v0_e87c, i32* %v3_e87c, align 4
  %v0_e884 = load i32, i32* %r5.global-to-local, align 4
  %v1_e884 = add i32 %v0_e884, 4
  %v2_e884 = inttoptr i32 %v1_e884 to i32*
  %v3_e884 = load i32, i32* %v2_e884, align 4
  %v0_e888 = load i32, i32* %r3.global-to-local, align 4
  %v2_e888 = mul i32 %v0_e888, 2
  store i32 %v2_e888, i32* %r3.global-to-local, align 4
  store i32 %v2_e888, i32* %stack_var_-32, align 4
  %v3_e8a8 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_e8a8 = call i32 @function_1186c(i32 %v3_e884, %sockaddr* %v3_e8a8, i32 16)
  br label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %dec_label_pc_e7e4.dec_label_pc_e8ac_crit_edge, %dec_label_pc_e838
  %v14_e8b0 = phi i32 [ %v14_e8b0.pre, %dec_label_pc_e7e4.dec_label_pc_e8ac_crit_edge ], [ %v4_e8a8, %dec_label_pc_e838 ]
  %v2_e8b0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e8b0, i32* @r4, align 4
  ret i32 %v14_e8b0

; uselistorder directives
  uselistorder i32 %v2_e888, { 1, 0 }
  uselistorder i32 %v3_e81c, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_108bc, { 7, 2, 1, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_e8ac, { 1, 0 }
}

define i32 @function_e8b8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e8b8:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e8b8 = load i32, i32* @r4, align 4
  %v6_e8b8 = load i32, i32* @r5, align 4
  %v9_e8b8 = load i32, i32* @r6, align 4
  %v12_e8b8 = load i32, i32* @r7, align 4
  %v15_e8b8 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1c1b4.125 to i32), i32* @r8, align 4
  %v2_e8c0 = load i32, i32* @global_var_1c1b4.125, align 4
  store i32 ptrtoint (i32* @global_var_1c1e0.127 to i32), i32* %sb.global-to-local, align 4
  %v3_e8cc = mul i32 %v2_e8c0, 16
  store i32 %v3_e8cc, i32* %r3.global-to-local, align 4
  %v3_e8d4 = urem i32 %arg3, 65536
  store i32 %v3_e8d4, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e8e0 = load i32, i32* @global_var_1c1e0.127, align 4
  %v1_e8e4 = add i32 %v3_e8cc, 16
  store i32 %v1_e8e4, i32* %r1.global-to-local, align 4
  store i32 %v3_e8d4, i32* %stack_var_-44, align 4
  %v15_e8ec = call i32 @function_11e18(i32 %v2_e8e0, i32 %v1_e8e4, i32 %v3_e8d4, i32 %v3_e8cc)
  store i32 %v15_e8ec, i32* %sl.global-to-local, align 4
  %v0_e8f4 = load i32, i32* @r5, align 4
  %v1_e8f8 = load i32, i32* %sb.global-to-local, align 4
  %v2_e8f8 = inttoptr i32 %v1_e8f8 to i32*
  store i32 %v15_e8ec, i32* %v2_e8f8, align 4
  %v2_e8fc = load i32, i32* @global_var_1c1b4.125, align 4
  store i32 %v2_e8fc, i32* %fp.global-to-local, align 4
  %v1_e900 = inttoptr i32 %v0_e8f4 to i8*
  %v2_e900 = call i32 @function_1081c(i8* %v1_e900)
  %sext = mul i32 %v2_e900, 16777216
  %v1_e904 = sdiv i32 %sext, 16777216
  %v2_e904 = add nsw i32 %v1_e904, 1
  store i32 %v2_e904, i32* @r4, align 4
  store i32 %v1_e904, i32* @r7, align 4
  %v1_e910 = call i32 @function_11b7c(i32 %v2_e904)
  %v0_e914 = load i32, i32* @r5, align 4
  store i32 %v0_e914, i32* %r1.global-to-local, align 4
  %v0_e918 = load i32, i32* @r4, align 4
  store i32 %v0_e918, i32* %r2.global-to-local, align 4
  store i32 %v1_e910, i32* @r6, align 4
  %v3_e920 = call i32 @function_10898(i32 %v1_e910, i32 %v0_e914, i32 %v0_e918)
  %v0_e924 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_e924, 1
  %extract.t6 = trunc i32 %v0_e924 to i8
  br i1 %tmp21, label %dec_label_pc_e948, label %dec_label_pc_e92c

dec_label_pc_e92c:                                ; preds = %dec_label_pc_e8b8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e930

dec_label_pc_e930:                                ; preds = %dec_label_pc_e930, %dec_label_pc_e92c
  %v2_e938 = phi i32 [ %v1_e93c, %dec_label_pc_e930 ], [ 0, %dec_label_pc_e92c ]
  %v1_e930 = load i32, i32* @r6, align 4
  %v2_e930 = add i32 %v1_e930, %v2_e938
  %v3_e930 = inttoptr i32 %v2_e930 to i8*
  %v4_e930 = load i8, i8* %v3_e930, align 1
  %v6_e930 = zext i8 %v4_e930 to i32
  %v1_e934 = xor i32 %v6_e930, 84
  store i32 %v1_e934, i32* %r3.global-to-local, align 4
  %v1_e938 = trunc i32 %v1_e934 to i8
  store i8 %v1_e938, i8* %v3_e930, align 1
  %v0_e93c = load i32, i32* %r2.global-to-local, align 4
  %v1_e93c = add i32 %v0_e93c, 1
  store i32 %v1_e93c, i32* %r2.global-to-local, align 4
  %v0_e940 = load i32, i32* @r7, align 4
  %v9_e940 = icmp eq i32 %v0_e940, %v1_e93c
  br i1 %v9_e940, label %dec_label_pc_e948.loopexit, label %dec_label_pc_e930

dec_label_pc_e948.loopexit:                       ; preds = %dec_label_pc_e930
  %extract.t = trunc i32 %v1_e93c to i8
  br label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e948.loopexit, %dec_label_pc_e8b8
  %v0_e958.off0 = phi i8 [ %extract.t, %dec_label_pc_e948.loopexit ], [ %extract.t6, %dec_label_pc_e8b8 ]
  %v2_e948 = load i32, i32* @global_var_1c1b4.125, align 4
  %v2_e94c = load i32, i32* @global_var_1c1e0.127, align 4
  store i32 %v2_e94c, i32* %r2.global-to-local, align 4
  %v3_e950 = mul i32 %v2_e948, 16
  %v2_e954 = add i32 %v2_e94c, %v3_e950
  store i32 %v2_e954, i32* %r3.global-to-local, align 4
  %v3_e958 = add i32 %v2_e954, 12
  %v4_e958 = inttoptr i32 %v3_e958 to i8*
  store i8 %v0_e958.off0, i8* %v4_e958, align 1
  %v0_e95c = load i32, i32* @r6, align 4
  %v1_e95c = load i32, i32* %sl.global-to-local, align 4
  %v2_e95c = load i32, i32* %fp.global-to-local, align 4
  %v5_e95c = mul i32 %v2_e95c, 16
  %v6_e95c = add i32 %v5_e95c, %v1_e95c
  %v7_e95c = inttoptr i32 %v6_e95c to i32*
  store i32 %v0_e95c, i32* %v7_e95c, align 4
  %v2_e964 = load i32, i32* @global_var_1c1b4.125, align 4
  store i32 %v2_e964, i32* @r7, align 4
  %v2_e968 = load i32, i32* @global_var_1c1e0.127, align 4
  store i32 %v2_e968, i32* %sl.global-to-local, align 4
  %v1_e96c = inttoptr i32 %arg2 to i8*
  %v2_e96c = call i32 @function_1081c(i8* %v1_e96c)
  %sext1 = mul i32 %v2_e96c, 16777216
  %v1_e970 = sdiv i32 %sext1, 16777216
  %v2_e970 = add nsw i32 %v1_e970, 1
  store i32 %v2_e970, i32* @r4, align 4
  store i32 %v1_e970, i32* @r5, align 4
  %v1_e97c = call i32 @function_11b7c(i32 %v2_e970)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e984 = load i32, i32* @r4, align 4
  store i32 %v0_e984, i32* %r2.global-to-local, align 4
  store i32 %v1_e97c, i32* %r6.global-to-local, align 4
  %v3_e98c = call i32 @function_10898(i32 %v1_e97c, i32 %arg2, i32 %v0_e984)
  %v0_e990 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_e990, 1
  %extract.t8 = trunc i32 %v0_e990 to i8
  br i1 %tmp22, label %dec_label_pc_e9b4, label %dec_label_pc_e998

dec_label_pc_e998:                                ; preds = %dec_label_pc_e948
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e99c

dec_label_pc_e99c:                                ; preds = %dec_label_pc_e99c, %dec_label_pc_e998
  %v2_e9a4 = phi i32 [ %v1_e9a8, %dec_label_pc_e99c ], [ 0, %dec_label_pc_e998 ]
  %v1_e99c = load i32, i32* %r6.global-to-local, align 4
  %v2_e99c = add i32 %v1_e99c, %v2_e9a4
  %v3_e99c = inttoptr i32 %v2_e99c to i8*
  %v4_e99c = load i8, i8* %v3_e99c, align 1
  %v6_e99c = zext i8 %v4_e99c to i32
  %v1_e9a0 = xor i32 %v6_e99c, 84
  store i32 %v1_e9a0, i32* %r3.global-to-local, align 4
  %v1_e9a4 = trunc i32 %v1_e9a0 to i8
  store i8 %v1_e9a4, i8* %v3_e99c, align 1
  %v0_e9a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e9a8 = add i32 %v0_e9a8, 1
  store i32 %v1_e9a8, i32* %r2.global-to-local, align 4
  %v0_e9ac = load i32, i32* @r5, align 4
  %v9_e9ac = icmp eq i32 %v0_e9ac, %v1_e9a8
  br i1 %v9_e9ac, label %dec_label_pc_e9b4.loopexit, label %dec_label_pc_e99c

dec_label_pc_e9b4.loopexit:                       ; preds = %dec_label_pc_e99c
  %extract.t7 = trunc i32 %v1_e9a8 to i8
  br label %dec_label_pc_e9b4

dec_label_pc_e9b4:                                ; preds = %dec_label_pc_e9b4.loopexit, %dec_label_pc_e948
  %v0_e9c4.off0 = phi i8 [ %extract.t7, %dec_label_pc_e9b4.loopexit ], [ %extract.t8, %dec_label_pc_e948 ]
  %v2_e9b4 = load i32, i32* @global_var_1c1b4.125, align 4
  %v2_e9b8 = load i32, i32* @global_var_1c1e0.127, align 4
  %v3_e9bc = mul i32 %v2_e9b4, 16
  %v2_e9c0 = or i32 %v3_e9bc, 13
  %v3_e9c4 = add i32 %v2_e9c0, %v2_e9b8
  %v4_e9c4 = inttoptr i32 %v3_e9c4 to i8*
  store i8 %v0_e9c4.off0, i8* %v4_e9c4, align 1
  %v2_e9cc = load i32, i32* @global_var_1c1b4.125, align 4
  store i32 %v2_e9cc, i32* %lr.global-to-local, align 4
  %v4_e9d0 = load i8, i8* @global_var_1c1e5.130, align 1
  %v5_e9d0 = zext i8 %v4_e9d0 to i32
  %v3_e9d4 = load i8, i8* bitcast (i8** @global_var_1c1e4.129 to i8*), align 4
  %v4_e9d4 = zext i8 %v3_e9d4 to i32
  %v2_e9d8 = load i32, i32* @global_var_1c1e0.127, align 4
  %v4_e9dc = mul nuw nsw i32 %v5_e9d0, 256
  %v5_e9dc = or i32 %v4_e9d4, %v4_e9dc
  store i32 %v5_e9dc, i32* %r2.global-to-local, align 4
  %v3_e9e0 = mul i32 %v2_e9cc, 16
  %v2_e9e4 = add i32 %v2_e9d8, %v3_e9e0
  store i32 %v2_e9e4, i32* %r1.global-to-local, align 4
  %v3_e9ec = add i32 %v2_e9e4, 9
  %v4_e9ec = inttoptr i32 %v3_e9ec to i8*
  store i8 %v4_e9d0, i8* %v4_e9ec, align 1
  %v0_e9f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e9f0 = trunc i32 %v0_e9f0 to i8
  %v2_e9f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e9f0 = add i32 %v2_e9f0, 8
  %v4_e9f0 = inttoptr i32 %v3_e9f0 to i8*
  store i8 %v1_e9f0, i8* %v4_e9f0, align 1
  %v4_e9f4 = load i8, i8* @global_var_1c1e5.130, align 1
  %v5_e9f4 = zext i8 %v4_e9f4 to i32
  %v3_e9f8 = load i8, i8* bitcast (i8** @global_var_1c1e4.129 to i8*), align 4
  %v4_e9f8 = zext i8 %v3_e9f8 to i32
  %v4_e9fc = mul nuw nsw i32 %v5_e9f4, 256
  %v5_e9fc = or i32 %v4_e9f8, %v4_e9fc
  %v2_ea00 = load i32, i32* %stack_var_-44, align 4
  %v2_ea04 = add i32 %v5_e9fc, %v2_ea00
  store i32 %v2_ea04, i32* %r3.global-to-local, align 4
  %v3_ea089 = udiv i32 %v2_ea04, 256
  %v1_ea0c = trunc i32 %v3_ea089 to i8
  %v2_ea0c = load i32, i32* %r1.global-to-local, align 4
  %v3_ea0c = add i32 %v2_ea0c, 11
  %v4_ea0c = inttoptr i32 %v3_ea0c to i8*
  store i8 %v1_ea0c, i8* %v4_ea0c, align 1
  %v0_ea10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ea10 = trunc i32 %v0_ea10 to i8
  %v2_ea10 = load i32, i32* %r1.global-to-local, align 4
  %v3_ea10 = add i32 %v2_ea10, 10
  %v4_ea10 = inttoptr i32 %v3_ea10 to i8*
  store i8 %v1_ea10, i8* %v4_ea10, align 1
  %v4_ea14 = load i8, i8* @global_var_1c1e5.130, align 1
  %v5_ea14 = zext i8 %v4_ea14 to i32
  %v3_ea18 = load i8, i8* bitcast (i8** @global_var_1c1e4.129 to i8*), align 4
  %v4_ea18 = zext i8 %v3_ea18 to i32
  %v4_ea1c = mul nuw nsw i32 %v5_ea14, 256
  %v5_ea1c = or i32 %v4_ea18, %v4_ea1c
  %v2_ea20 = load i32, i32* %stack_var_-44, align 4
  %v2_ea24 = add i32 %v5_ea1c, %v2_ea20
  store i32 %v2_ea24, i32* %r2.global-to-local, align 4
  %v0_ea28 = load i32, i32* @r7, align 4
  %v3_ea28 = mul i32 %v0_ea28, 16
  %v1_ea2c = load i32, i32* %sl.global-to-local, align 4
  %v2_ea2c = add i32 %v1_ea2c, %v3_ea28
  store i32 %v2_ea2c, i32* %r3.global-to-local, align 4
  %v0_ea30 = load i32, i32* %lr.global-to-local, align 4
  %v1_ea30 = add i32 %v0_ea30, 1
  store i32 %v1_ea30, i32* @lr, align 4
  %v3_ea34 = sdiv i32 %v2_ea24, 256
  store i32 %v3_ea34, i32* %r1.global-to-local, align 4
  %v0_ea38 = load i32, i32* %r6.global-to-local, align 4
  %v2_ea38 = add i32 %v2_ea2c, 4
  %v3_ea38 = inttoptr i32 %v2_ea38 to i32*
  store i32 %v0_ea38, i32* %v3_ea38, align 4
  %v0_ea3c = load i32, i32* @lr, align 4
  %v1_ea3c = load i32, i32* @r8, align 4
  %v2_ea3c = inttoptr i32 %v1_ea3c to i32*
  store i32 %v0_ea3c, i32* %v2_ea3c, align 4
  %v0_ea40 = load i32, i32* %r1.global-to-local, align 4
  %v1_ea40 = trunc i32 %v0_ea40 to i8
  store i8 %v1_ea40, i8* @global_var_1c1e5.130, align 1
  %v0_ea44 = load i32, i32* %r2.global-to-local, align 4
  %v1_ea44 = trunc i32 %v0_ea44 to i8
  store i8 %v1_ea44, i8* bitcast (i8** @global_var_1c1e4.129 to i8*), align 4
  store i32 %v3_e8b8, i32* @r4, align 4
  store i32 %v6_e8b8, i32* @r5, align 4
  store i32 %v9_e8b8, i32* @r6, align 4
  store i32 %v12_e8b8, i32* @r7, align 4
  store i32 %v15_e8b8, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1c1e4.129 to i32)

; uselistorder directives
  uselistorder i32 %v1_e9a8, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e97c, { 1, 0 }
  uselistorder i32 %v1_e93c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e910, { 1, 0 }
  uselistorder i32 %v3_e8d4, { 1, 2, 0 }
  uselistorder i32 %v3_e8cc, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_1081c, { 0, 1, 16, 2, 18, 19, 20, 21, 22, 23, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11e18, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_ea5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_ea5c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp260 = call i32 @__decompiler_undefined_function_0()
  %tmp261 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %tmp289 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_ea5c = load i32, i32* @r4, align 4
  store i32 %v3_ea5c, i32* %stack_var_-36, align 4
  %v6_ea5c = load i32, i32* @r5, align 4
  %v15_ea5c = load i32, i32* @r8, align 4
  %v18_ea5c = load i32, i32* @sb, align 4
  %v21_ea5c = load i32, i32* @sl, align 4
  %v0_ea68 = call i32 @function_1114c()
  store i32 %v0_ea68, i32* %r0.global-to-local, align 4
  %v7_ea6c = icmp eq i32 %v0_ea68, -1
  %. = zext i1 %v7_ea6c to i32
  %tmp292 = icmp slt i32 %v0_ea68, 1
  %storemerge251 = select i1 %tmp292, i32 %., i32 1
  store i32 %storemerge251, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c254.132 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea88 = icmp eq i32 %storemerge251, 0
  store i1 %v2_ea88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ea68, i32* @global_var_1c254.132, align 4
  br i1 %v2_ea88, label %dec_label_pc_eaa0, label %dec_label_pc_ea94

dec_label_pc_ea94:                                ; preds = %dec_label_pc_ea5c
  store i32 %v3_ea5c, i32* %r4.global-to-local, align 4
  store i32 %v6_ea5c, i32* @r5, align 4
  store i32 %v15_ea5c, i32* %r8.global-to-local, align 4
  store i32 %v18_ea5c, i32* @sb, align 4
  store i32 %v21_ea5c, i32* %sl.global-to-local, align 4
  ret i32 %v0_ea68

dec_label_pc_eaa0:                                ; preds = %dec_label_pc_ea5c
  %v0_eaa0 = call i32 @function_10ad4()
  store i32 %v0_eaa0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c230.50 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_eaa0, i32* @global_var_1c230.50, align 4
  %v1_eaac = call i32 @function_e5d8(i32 %v0_eaa0)
  %v0_eab0 = load i32, i32* @r4, align 4
  store i32 %v0_eab0, i32* %r0.global-to-local, align 4
  %v1_eab4 = inttoptr i32 %v0_eab0 to i32*
  %v2_eab4 = call i32 @function_113f0(i32* %v1_eab4)
  store i32 ptrtoint (i32* @global_var_1c1e8.123 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_eab4, i32* @global_var_1c1e8.123, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_eac8 = call i32 @function_11cd0(i32 256, i32 288)
  store i32 %v2_eac8, i32* %lr.global-to-local, align 4
  %v0_ead4 = load i32, i32* @r4, align 4
  store i32 %v0_ead4, i32* %stack_var_-52, align 4
  store i32 %v2_eac8, i32* @global_var_1c24c.136, align 4
  store i32 %v0_ead4, i32* %r3.global-to-local, align 4
  store i32 %v0_ead4, i32* @r5, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_ead4, i32* %ip.global-to-local, align 4
  %v1_eaec = add i32 %v2_eac8, 4
  store i32 %v1_eaec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eaf0

dec_label_pc_eaf0:                                ; preds = %dec_label_pc_eaf0.dec_label_pc_eaf0_crit_edge, %dec_label_pc_eaa0
  %v0_eb08 = phi i32 [ %v0_eb08.pre, %dec_label_pc_eaf0.dec_label_pc_eaf0_crit_edge ], [ %v0_ead4, %dec_label_pc_eaa0 ]
  %v0_eaf8 = phi i32 [ %v0_eb10, %dec_label_pc_eaf0.dec_label_pc_eaf0_crit_edge ], [ %v0_ead4, %dec_label_pc_eaa0 ]
  %v1_eb00 = phi i32 [ %v1_eb00.pre, %dec_label_pc_eaf0.dec_label_pc_eaf0_crit_edge ], [ %v2_eac8, %dec_label_pc_eaa0 ]
  %v3_eaf0 = mul i32 %v0_eaf8, 256
  store i32 %v3_eaf0, i32* %r2.global-to-local, align 4
  %v1_eaf8 = add i32 %v0_eaf8, 1
  store i32 %v1_eaf8, i32* %ip.global-to-local, align 4
  %v2_eafc = mul i32 %v0_eaf8, 288
  %v2_eb00 = add i32 %v1_eb00, 12
  %v2_eb08 = add i32 %v2_eb00, %v2_eafc
  %v3_eb08 = inttoptr i32 %v2_eb08 to i32*
  store i32 %v0_eb08, i32* %v3_eb08, align 4
  %v0_eb0c = load i32, i32* %r0.global-to-local, align 4
  %v1_eb0c = load i32, i32* %r1.global-to-local, align 4
  %v2_eb0c = inttoptr i32 %v1_eb0c to i32*
  store i32 %v0_eb0c, i32* %v2_eb0c, align 4
  %v3_eb0c = load i32, i32* %r1.global-to-local, align 4
  %v4_eb0c = add i32 %v3_eb0c, 288
  store i32 %v4_eb0c, i32* %r1.global-to-local, align 4
  %v0_eb10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_eb10, i32* %r3.global-to-local, align 4
  %v7_eb14 = icmp sgt i32 %v1_eaf8, 255
  br i1 %v7_eb14, label %dec_label_pc_eb18, label %dec_label_pc_eaf0.dec_label_pc_eaf0_crit_edge

dec_label_pc_eaf0.dec_label_pc_eaf0_crit_edge:    ; preds = %dec_label_pc_eaf0
  %v1_eb00.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_eb08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_eaf0

dec_label_pc_eb18:                                ; preds = %dec_label_pc_eaf0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_eb10, i32* %stack_var_-52, align 4
  %v3_eb28 = call i32 @function_119e4(i32 2, i32 3, i32 6)
  store i32 %v3_eb28, i32* %r0.global-to-local, align 4
  %v2_eb30 = icmp eq i32 %v3_eb28, -1
  store i1 %v2_eb30, i1* %cpsr_c.global-to-local, align 1
  %v7_eb30 = icmp eq i32 %v3_eb28, -1
  store i1 %v7_eb30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_eb28, i32* @r4, align 4
  store i32 %v3_eb28, i32* @global_var_1c250.138, align 4
  br i1 %v7_eb30, label %dec_label_pc_f300, label %dec_label_pc_eb40

dec_label_pc_eb40:                                ; preds = %dec_label_pc_eb18
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_eb44 = load i32, i32* @r5, align 4
  store i32 %v0_eb44, i32* @r2, align 4
  %v2_eb48 = call i32 @function_1105c(i32 %v3_eb28, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_eb50 = or i32 %v2_eb48, 2048
  store i32 %v1_eb50, i32* @r2, align 4
  %v0_eb54 = load i32, i32* @r4, align 4
  store i32 %v0_eb54, i32* %r0.global-to-local, align 4
  %v2_eb58 = call i32 @function_1105c(i32 %v0_eb54, i32 4)
  %v2_eb64 = load i32, i32* @global_var_1c250.138, align 4
  store i32 %v2_eb64, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_eb6c = load i32, i32* @r5, align 4
  store i32 %v0_eb6c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_eb74 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_eb74, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_eb84 = call i32 @function_119b4(i32 %v2_eb64, i32 %v0_eb6c, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_eb84, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb88 = icmp eq i32 %v6_eb84, 0
  store i1 %v2_eb88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb88, label %dec_label_pc_eb90, label %dec_label_pc_f3f0

dec_label_pc_eb90:                                ; preds = %dec_label_pc_eb40, %dec_label_pc_eb90
  %v0_eb90 = call i32 @function_e580()
  %v3_eb94 = mul i32 %v0_eb90, 65536
  store i32 %v3_eb94, i32* %r0.global-to-local, align 4
  %v1_eba0 = mul i32 %v0_eb90, 256
  %v3_eba4 = and i32 %v1_eba0, 65280
  %tmp295 = udiv i32 %v0_eb90, 256
  %v4_eba8 = urem i32 %tmp295, 256
  %v5_eba8 = or i32 %v4_eba8, %v3_eba4
  store i32 %v5_eba8, i32* %r3.global-to-local, align 4
  %v2_ebac = icmp ugt i32 %v5_eba8, 1023
  store i1 %v2_ebac, i1* %cpsr_c.global-to-local, align 1
  %v7_ebac = icmp eq i32 %v5_eba8, 1024
  store i1 %v7_ebac, i1* %cpsr_z.global-to-local, align 1
  %v3_ebb0 = icmp ult i32 %v5_eba8, 1022
  br i1 %v3_ebb0, label %dec_label_pc_eb90, label %dec_label_pc_ebb4

dec_label_pc_ebb4:                                ; preds = %dec_label_pc_eb90
  %v5_eb9c.le = trunc i32 %v0_eb90 to i8
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1c1b8.140 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1c1bb.141 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1ba.142 to i8*), align 4
  %v0_ebe8 = call i32 @function_e580()
  %v1_ebe8 = trunc i32 %v0_ebe8 to i8
  store i32 %v0_ebe8, i32* %r0.global-to-local, align 4
  %v3_ebf0 = load i8, i8* @global_var_1c1d8.145, align 1
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* %lr.global-to-local, align 4
  %v4_ebf8250 = udiv i32 %v0_ebe8, 256
  %v1_ebfc = trunc i32 %v4_ebf8250 to i8
  store i8 %v1_ebfc, i8* bitcast (i32* @global_var_1c1bd.146 to i8*), align 4
  %v4_ec00 = sext i8 %v5_eb9c.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1c1c1.147 to i8*), align 4
  %tmp = urem i8 %v3_ebf0, 16
  %v1_ec0c = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32* %r2.global-to-local, align 4
  %v1_ec14 = and i32 %v4_ec00, 128
  %v2_ec14 = icmp ne i32 %v1_ec14, 0
  store i1 %v2_ec14, i1* %cpsr_c.global-to-local, align 1
  %v3_ec14 = sdiv i32 %v4_ec00, 256
  store i32 %v3_ec14, i32* %ip.global-to-local, align 4
  %v1_ec18 = or i32 %v1_ec0c, 80
  store i32 %v1_ec18, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1c1c0.148 to i8*), align 4
  %v1_ec24 = trunc i32 %v1_ec18 to i8
  store i8 %v1_ec24, i8* @global_var_1c1d8.145, align 1
  store i8 23, i8* bitcast (i32* @global_var_1c1cf.149 to i8*), align 4
  store i32 %v4_ec00, i32* %r3.global-to-local, align 4
  %v1_ec34 = trunc i32 %v3_ec14 to i8
  store i8 %v1_ec34, i8* bitcast (i32* @global_var_1c1cd.150 to i8*), align 4
  store i8 %v1_ebe8, i8* bitcast (i32* @global_var_1c1bc.151 to i8*), align 4
  store i8 %v5_eb9c.le, i8* bitcast (i32* @global_var_1c1cc.144 to i8*), align 4
  %v0_ec40 = load i32, i32* @r5, align 4
  %v1_ec40 = trunc i32 %v0_ec40 to i8
  store i8 %v1_ec40, i8* bitcast (i32* @global_var_1c1ce.152 to i8*), align 4
  %v0_ec44 = call i32 @function_e580()
  %v1_ec44 = trunc i32 %v0_ec44 to i8
  %v3_ec4c = load i8, i8* @global_var_1c1d9.153, align 1
  %v4_ec4c = zext i8 %v3_ec4c to i32
  store i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32* @lr, align 4
  %v2_ec54 = and i32 %v0_ec44, 128
  %v3_ec54 = icmp ne i32 %v2_ec54, 0
  store i1 %v3_ec54, i1* %cpsr_c.global-to-local, align 1
  %v4_ec54 = sdiv i32 %v0_ec44, 256
  store i32 %v4_ec54, i32* %ip.global-to-local, align 4
  %v1_ec58 = or i32 %v4_ec4c, 2
  store i32 %v1_ec58, i32* %r3.global-to-local, align 4
  store i32 %v0_ec44, i32* @r4, align 4
  %v1_ec60 = trunc i32 %v4_ec54 to i8
  store i8 %v1_ec60, i8* bitcast (i32* @global_var_1c1db.154 to i8*), align 4
  %v1_ec64 = trunc i32 %v1_ec58 to i8
  store i8 %v1_ec64, i8* @global_var_1c1d9.153, align 1
  store i8 %v1_ec44, i8* bitcast (i32* @global_var_1c1da.155 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13a1c.159 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_ec78 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint (i32* @global_var_13a1c.159 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13994.161 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_ec88 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint ([5 x i8]* @global_var_13994.161 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1399c.163 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ec98 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint ([9 x i8]* @global_var_1399c.163 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_139a8.165 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_139a8.165 to i32), i32* %r1.global-to-local, align 4
  %v5_eca8 = call i32 @function_e8b8(i32 ptrtoint ([7 x i8]* @global_var_139a8.165 to i32), i32 ptrtoint ([7 x i8]* @global_var_139a8.165 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13a1c.159 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_ecb8 = call i32 @function_e8b8(i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32 ptrtoint (i32* @global_var_13a1c.159 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_139b8.169 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ecc8 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint ([9 x i8]* @global_var_139b8.169 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_139c4.171 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_139c4.171 to i32), i32* %r1.global-to-local, align 4
  %v5_ecd8 = call i32 @function_e8b8(i32 ptrtoint ([6 x i8]* @global_var_139c4.171 to i32), i32 ptrtoint ([6 x i8]* @global_var_139c4.171 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_139cc.173 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ece8 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint ([6 x i8]* @global_var_139cc.173 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_139d4.175 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_139d4.175 to i32), i32* %r1.global-to-local, align 4
  %v5_ecf8 = call i32 @function_e8b8(i32 ptrtoint ([8 x i8]* @global_var_139d4.175 to i32), i32 ptrtoint ([8 x i8]* @global_var_139d4.175 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_ed08 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_139dc.177 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_ed18 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint (i32* @global_var_139dc.177 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_139ec.179 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ed28 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), i32 ptrtoint ([6 x i8]* @global_var_139ec.179 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_139f4.181 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_139f4.181 to i32), i32* %r1.global-to-local, align 4
  %v5_ed38 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_139f4.181 to i32), i32 ptrtoint ([5 x i8]* @global_var_139f4.181 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_139f4.181 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_139ec.179 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ed48 = call i32 @function_e8b8(i32 ptrtoint ([5 x i8]* @global_var_139f4.181 to i32), i32 ptrtoint ([6 x i8]* @global_var_139ec.179 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_139fc.183 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ed58 = call i32 @function_e8b8(i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32 ptrtoint (i32* @global_var_139fc.183 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13a08.185 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ed68 = call i32 @function_e8b8(i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), i32 ptrtoint (i32* @global_var_13a08.185 to i32), i32 15)
  %v2_ed70 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_ed70, i32* %r0.global-to-local, align 4
  %v2_ed74 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_ed74, i32* %r1.global-to-local, align 4
  %tmp296 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_f500, %dec_label_pc_ebb4
  %v0_f124 = phi i32 [ %v2_ed70, %dec_label_pc_ebb4 ], [ %stack_var_-1872.2, %dec_label_pc_f500 ]
  %stack_var_-1868.0 = phi i8 [ %v5_eb9c.le, %dec_label_pc_ebb4 ], [ %stack_var_-1868.2, %dec_label_pc_f500 ]
  %stack_var_-1876.0 = phi i8* [ %tmp296, %dec_label_pc_ebb4 ], [ %stack_var_-1876.2, %dec_label_pc_f500 ]
  store i32 ptrtoint (i32* @global_var_1c1e8.123 to i32), i32* %r2.global-to-local, align 4
  %v2_ed84 = load i32, i32* @global_var_1c1e8.123, align 4
  store i32 %v2_ed84, i32* %r8.global-to-local, align 4
  %v0_ed88 = load i32, i32* @fp, align 4
  %v3_ed88 = icmp uge i32 %v0_ed88, %v2_ed84
  store i1 %v3_ed88, i1* %cpsr_c.global-to-local, align 1
  %v9_ed88 = icmp eq i32 %v0_ed88, %v2_ed84
  store i1 %v9_ed88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ed88, label %dec_label_pc_f0b4, label %dec_label_pc_ed90

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed80
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_f088 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_ed9c

dec_label_pc_ed9c:                                ; preds = %.thread66.dec_label_pc_ed9c_crit_edge, %dec_label_pc_ed90
  %v0_ed9c = phi i32 [ %v0_ed9c.pre, %.thread66.dec_label_pc_ed9c_crit_edge ], [ 0, %dec_label_pc_ed90 ]
  store i32 %v0_ed9c, i32* %stack_var_-92, align 4
  %v0_edac = call i32 @function_e580()
  %v1_edac = trunc i32 %v0_edac to i8
  store i32 %v0_edac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c230.50 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* %lr.global-to-local, align 4
  %v2_edb8 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_edb8, i32* %r2.global-to-local, align 4
  %v2_edbc = and i32 %v0_edac, 128
  %v3_edbc = icmp ne i32 %v2_edbc, 0
  store i1 %v3_edbc, i1* %cpsr_c.global-to-local, align 1
  %v4_edbc = sdiv i32 %v0_edac, 256
  store i32 %v4_edbc, i32* %r3.global-to-local, align 4
  %v1_edc0 = trunc i32 %v4_edbc to i8
  store i8 %v1_edc0, i8* bitcast (i32* @global_var_1c1bd.146 to i8*), align 4
  store i32 %v2_edb8, i32* @global_var_1c1c4.186, align 4
  store i8 %v1_edac, i8* bitcast (i32* @global_var_1c1bc.151 to i8*), align 4
  br label %dec_label_pc_edcc

dec_label_pc_edcc:                                ; preds = %dec_label_pc_ef24, %dec_label_pc_edfc, %dec_label_pc_ef58, %dec_label_pc_ef4c, %dec_label_pc_ef40, %dec_label_pc_ef34, %.thread51, %.thread35, %.thread31, %.thread27, %bb322, %bb321, %bb320, %bb319, %bb318, %bb317, %bb316, %bb315, %bb314, %bb313, %dec_label_pc_ee98, %dec_label_pc_ee90, %bb307, %dec_label_pc_ee60, %dec_label_pc_ee3c, %bb300, %dec_label_pc_ee0c, %bb299, %dec_label_pc_edf4, %bb298, %bb324, %dec_label_pc_ed9c
  %v0_edcc = call i32 @function_e580()
  store i32 %v0_edcc, i32* %r0.global-to-local, align 4
  %v1_edd0 = urem i32 %v0_edcc, 256
  store i32 %v1_edd0, i32* %r1.global-to-local, align 4
  %v3_edd4 = udiv i32 %v0_edcc, 256
  store i32 %v3_edd4, i32* %r3.global-to-local, align 4
  %v3_edd8 = udiv i32 %v0_edcc, 65536
  store i32 %v3_edd8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eddc = icmp eq i32 %v1_edd0, 0
  store i1 %v2_eddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eddc, label %bb298, label %bb297

bb297:                                            ; preds = %dec_label_pc_edcc
  %v3_ede0 = icmp ugt i32 %v1_edd0, 126
  store i1 %v3_ede0, i1* %cpsr_c.global-to-local, align 1
  %v8_ede0 = icmp eq i32 %v1_edd0, 127
  store i1 %v8_ede0, i1* %cpsr_z.global-to-local, align 1
  br label %bb298

bb298:                                            ; preds = %dec_label_pc_edcc, %bb297
  %v0_edf0 = phi i1 [ true, %dec_label_pc_edcc ], [ %v8_ede0, %bb297 ]
  %v1_ede4 = urem i32 %v3_edd4, 256
  store i32 %v1_ede4, i32* %ip.global-to-local, align 4
  %v1_ede8 = urem i32 %v3_edd8, 256
  store i32 %v1_ede8, i32* %r2.global-to-local, align 4
  %v1_edec = and i32 %v0_edcc, 8388608
  %v2_edec = icmp ne i32 %v1_edec, 0
  store i1 %v2_edec, i1* %cpsr_c.global-to-local, align 1
  %v3_edec = udiv i32 %v0_edcc, 16777216
  store i32 %v3_edec, i32* %r0.global-to-local, align 4
  br i1 %v0_edf0, label %dec_label_pc_edcc, label %dec_label_pc_edf4

dec_label_pc_edf4:                                ; preds = %bb298
  %v2_edf4 = icmp ugt i32 %v1_edd0, 2
  store i1 %v2_edf4, i1* %cpsr_c.global-to-local, align 1
  %v7_edf4 = icmp eq i32 %v1_edd0, 3
  store i1 %v7_edf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edf4, label %dec_label_pc_edcc, label %dec_label_pc_edfc

dec_label_pc_edfc:                                ; preds = %dec_label_pc_edf4
  %v1_edfc = add nsw i32 %v1_edd0, -15
  store i32 %v1_edfc, i32* %r3.global-to-local, align 4
  %v2_ee00 = icmp ugt i32 %v1_edd0, 55
  store i1 %v2_ee00, i1* %cpsr_c.global-to-local, align 1
  %v7_ee00 = icmp eq i32 %v1_edd0, 56
  store i1 %v7_ee00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee00, label %dec_label_pc_edcc, label %bb299

bb299:                                            ; preds = %dec_label_pc_edfc
  %v3_ee04 = icmp ne i32 %v1_edfc, 0
  store i1 %v3_ee04, i1* %cpsr_c.global-to-local, align 1
  %v8_ee04 = icmp eq i32 %v1_edfc, 1
  store i1 %v8_ee04, i1* %cpsr_z.global-to-local, align 1
  %v2_ee08 = xor i1 %v3_ee04, true
  %v3_ee08 = or i1 %v8_ee04, %v2_ee08
  br i1 %v3_ee08, label %dec_label_pc_edcc, label %dec_label_pc_ee0c

dec_label_pc_ee0c:                                ; preds = %bb299
  %v2_ee0c = icmp ugt i32 %v1_edd0, 9
  store i1 %v2_ee0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee0c = icmp eq i32 %v1_edd0, 10
  store i1 %v7_ee0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee0c, label %dec_label_pc_edcc, label %dec_label_pc_ee14

dec_label_pc_ee14:                                ; preds = %dec_label_pc_ee0c
  %v2_ee14 = icmp ugt i32 %v1_edd0, 191
  store i1 %v2_ee14, i1* %cpsr_c.global-to-local, align 1
  %v7_ee14 = icmp eq i32 %v1_edd0, 192
  store i1 %v7_ee14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee14, label %bb300, label %dec_label_pc_ee20

bb300:                                            ; preds = %dec_label_pc_ee14
  %v3_ee18 = icmp ugt i32 %v1_ede4, 167
  store i1 %v3_ee18, i1* %cpsr_c.global-to-local, align 1
  %v8_ee18 = icmp eq i32 %v1_ede4, 168
  store i1 %v8_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee18, label %dec_label_pc_edcc, label %dec_label_pc_ee20

dec_label_pc_ee20:                                ; preds = %dec_label_pc_ee14, %bb300
  %v7_ee20 = icmp eq i32 %v1_edd0, 172
  %.371 = zext i1 %v7_ee20 to i32
  store i32 %.371, i32* %r3.global-to-local, align 4
  %v2_ee2c = icmp ugt i32 %v1_ede4, 14
  store i1 %v2_ee2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee2c = icmp eq i32 %v1_ede4, 15
  store i1 %v7_ee2c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee30 = xor i1 %v2_ee2c, true
  %v3_ee30 = or i1 %v7_ee2c, %v2_ee30
  br i1 %v3_ee30, label %.thread11, label %bb303

.thread11:                                        ; preds = %dec_label_pc_ee20
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee44

bb303:                                            ; preds = %dec_label_pc_ee20
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee34 = icmp eq i1 %v7_ee20, false
  store i1 %v2_ee34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee34, label %dec_label_pc_ee44, label %dec_label_pc_ee3c

dec_label_pc_ee3c:                                ; preds = %bb303
  %v2_ee3c = icmp ugt i32 %v1_ede4, 30
  store i1 %v2_ee3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee3c = icmp eq i32 %v1_ede4, 31
  store i1 %v7_ee3c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee40 = xor i1 %v2_ee3c, true
  %v3_ee40 = or i1 %v7_ee3c, %v2_ee40
  br i1 %v3_ee40, label %dec_label_pc_edcc, label %dec_label_pc_ee44

dec_label_pc_ee44:                                ; preds = %.thread11, %dec_label_pc_ee3c, %bb303
  %v7_ee44 = icmp eq i32 %v1_edd0, 100
  %.372 = zext i1 %v7_ee44 to i32
  store i32 %.372, i32* %r3.global-to-local, align 4
  %v2_ee50 = icmp ugt i32 %v1_ede4, 62
  store i1 %v2_ee50, i1* %cpsr_c.global-to-local, align 1
  %v7_ee50 = icmp eq i32 %v1_ede4, 63
  store i1 %v7_ee50, i1* %cpsr_z.global-to-local, align 1
  %v2_ee54 = xor i1 %v2_ee50, true
  %v3_ee54 = or i1 %v7_ee50, %v2_ee54
  br i1 %v3_ee54, label %.thread16, label %bb306

.thread16:                                        ; preds = %dec_label_pc_ee44
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee68

bb306:                                            ; preds = %dec_label_pc_ee44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee58 = icmp eq i1 %v7_ee44, false
  store i1 %v2_ee58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee58, label %dec_label_pc_ee68, label %dec_label_pc_ee60

dec_label_pc_ee60:                                ; preds = %bb306
  %v2_ee60 = icmp ugt i32 %v1_ede4, 125
  store i1 %v2_ee60, i1* %cpsr_c.global-to-local, align 1
  %v7_ee60 = icmp eq i32 %v1_ede4, 126
  store i1 %v7_ee60, i1* %cpsr_z.global-to-local, align 1
  %v2_ee64 = xor i1 %v2_ee60, true
  %v3_ee64 = or i1 %v7_ee60, %v2_ee64
  br i1 %v3_ee64, label %dec_label_pc_edcc, label %dec_label_pc_ee68

dec_label_pc_ee68:                                ; preds = %.thread16, %dec_label_pc_ee60, %bb306
  %v2_ee68 = icmp ugt i32 %v1_edd0, 168
  store i1 %v2_ee68, i1* %cpsr_c.global-to-local, align 1
  %v7_ee68 = icmp eq i32 %v1_edd0, 169
  store i1 %v7_ee68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee68, label %bb307, label %dec_label_pc_ee74

bb307:                                            ; preds = %dec_label_pc_ee68
  %v3_ee6c = icmp eq i32 %v1_ede4, 255
  store i1 %v3_ee6c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ee6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ee6c, label %dec_label_pc_edcc, label %dec_label_pc_ee74

dec_label_pc_ee74:                                ; preds = %dec_label_pc_ee68, %bb307
  %v7_ee74 = icmp eq i32 %v1_edd0, 198
  %.373 = zext i1 %v7_ee74 to i32
  store i32 %.373, i32* %r3.global-to-local, align 4
  %v2_ee80 = icmp ugt i32 %v1_ede4, 16
  store i1 %v2_ee80, i1* %cpsr_c.global-to-local, align 1
  %v7_ee80 = icmp eq i32 %v1_ede4, 17
  store i1 %v7_ee80, i1* %cpsr_z.global-to-local, align 1
  %v2_ee84 = xor i1 %v2_ee80, true
  %v3_ee84 = or i1 %v7_ee80, %v2_ee84
  br i1 %v3_ee84, label %.thread22, label %bb310

.thread22:                                        ; preds = %dec_label_pc_ee74
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee98

bb310:                                            ; preds = %dec_label_pc_ee74
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee88 = icmp eq i1 %v7_ee74, false
  store i1 %v2_ee88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee88, label %dec_label_pc_ee98, label %dec_label_pc_ee90

dec_label_pc_ee90:                                ; preds = %bb310
  %v2_ee90 = icmp ugt i32 %v1_ede4, 18
  store i1 %v2_ee90, i1* %cpsr_c.global-to-local, align 1
  %v7_ee90 = icmp eq i32 %v1_ede4, 19
  store i1 %v7_ee90, i1* %cpsr_z.global-to-local, align 1
  %v2_ee94 = xor i1 %v2_ee90, true
  %v3_ee94 = or i1 %v7_ee90, %v2_ee94
  br i1 %v3_ee94, label %dec_label_pc_edcc, label %dec_label_pc_ee98

dec_label_pc_ee98:                                ; preds = %.thread22, %dec_label_pc_ee90, %bb310
  %v2_ee98 = icmp ugt i32 %v1_edd0, 222
  store i1 %v2_ee98, i1* %cpsr_c.global-to-local, align 1
  %v7_ee98 = icmp eq i32 %v1_edd0, 223
  store i1 %v7_ee98, i1* %cpsr_z.global-to-local, align 1
  %v2_ee9c = xor i1 %v7_ee98, true
  %v3_ee9c = and i1 %v2_ee98, %v2_ee9c
  br i1 %v3_ee9c, label %dec_label_pc_edcc, label %dec_label_pc_eea0

dec_label_pc_eea0:                                ; preds = %dec_label_pc_ee98
  %v7_eea0 = icmp eq i32 %v1_edd0, 106
  %.374 = zext i1 %v7_eea0 to i32
  store i32 %.374, i32* @lr, align 4
  %v2_eeac = icmp ugt i32 %v1_ede4, 185
  store i1 %v2_eeac, i1* %cpsr_c.global-to-local, align 1
  %v7_eeac = icmp eq i32 %v1_ede4, 186
  store i1 %v7_eeac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeac, label %bb313, label %dec_label_pc_eeb8

bb313:                                            ; preds = %dec_label_pc_eea0
  %v2_eea0 = icmp ugt i32 %v1_edd0, 105
  store i1 %v2_eea0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_eea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eea0, label %dec_label_pc_edcc, label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %dec_label_pc_eea0, %bb313
  %v2_eeb8 = icmp ugt i32 %v1_ede4, 186
  store i1 %v2_eeb8, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb8 = icmp eq i32 %v1_ede4, 187
  store i1 %v7_eeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeb8, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_eeb8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eecc

.thread27:                                        ; preds = %dec_label_pc_eeb8
  store i32 %.374, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eec4 = icmp eq i1 %v7_eea0, false
  store i1 %v2_eec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eec4, label %dec_label_pc_eecc, label %dec_label_pc_edcc

dec_label_pc_eecc:                                ; preds = %.thread28, %.thread27
  %v2_eecc = icmp ugt i32 %v1_ede4, 184
  store i1 %v2_eecc, i1* %cpsr_c.global-to-local, align 1
  %v7_eecc = icmp eq i32 %v1_ede4, 185
  store i1 %v7_eecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eecc, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_eecc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eee0

.thread31:                                        ; preds = %dec_label_pc_eecc
  store i32 %.374, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eed8 = icmp eq i1 %v7_eea0, false
  store i1 %v2_eed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eed8, label %dec_label_pc_eee0, label %dec_label_pc_edcc

dec_label_pc_eee0:                                ; preds = %.thread32, %.thread31
  %v2_eee0 = icmp ugt i32 %v1_ede4, 183
  store i1 %v2_eee0, i1* %cpsr_c.global-to-local, align 1
  %v7_eee0 = icmp eq i32 %v1_ede4, 184
  store i1 %v7_eee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee0, label %.thread35, label %.thread36

.thread36:                                        ; preds = %dec_label_pc_eee0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eef4

.thread35:                                        ; preds = %dec_label_pc_eee0
  store i32 %.374, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eeec = icmp eq i1 %v7_eea0, false
  store i1 %v2_eeec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eeec, label %dec_label_pc_eef4, label %dec_label_pc_edcc

dec_label_pc_eef4:                                ; preds = %.thread36, %.thread35
  %v2_eef4 = icmp ugt i32 %v1_edd0, 149
  store i1 %v2_eef4, i1* %cpsr_c.global-to-local, align 1
  %v7_eef4 = icmp eq i32 %v1_edd0, 150
  store i1 %v7_eef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eef4, label %bb314, label %dec_label_pc_ef00

bb314:                                            ; preds = %dec_label_pc_eef4
  %v3_eef8 = icmp ugt i32 %v1_ede4, 30
  store i1 %v3_eef8, i1* %cpsr_c.global-to-local, align 1
  %v8_eef8 = icmp eq i32 %v1_ede4, 31
  store i1 %v8_eef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eef8, label %dec_label_pc_edcc, label %dec_label_pc_ef00

dec_label_pc_ef00:                                ; preds = %dec_label_pc_eef4, %bb314
  %v2_ef00 = icmp ugt i32 %v1_edd0, 48
  store i1 %v2_ef00, i1* %cpsr_c.global-to-local, align 1
  %v7_ef00 = icmp eq i32 %v1_edd0, 49
  store i1 %v7_ef00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef00, label %bb315, label %dec_label_pc_ef0c

bb315:                                            ; preds = %dec_label_pc_ef00
  %v3_ef04 = icmp ugt i32 %v1_ede4, 50
  store i1 %v3_ef04, i1* %cpsr_c.global-to-local, align 1
  %v8_ef04 = icmp eq i32 %v1_ede4, 51
  store i1 %v8_ef04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef04, label %dec_label_pc_edcc, label %dec_label_pc_ef0c

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_ef00, %bb315
  %v2_ef0c = icmp ugt i32 %v1_edd0, 177
  store i1 %v2_ef0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef0c = icmp eq i32 %v1_edd0, 178
  store i1 %v7_ef0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef0c, label %bb316, label %dec_label_pc_ef18

bb316:                                            ; preds = %dec_label_pc_ef0c
  %v3_ef10 = icmp ugt i32 %v1_ede4, 61
  store i1 %v3_ef10, i1* %cpsr_c.global-to-local, align 1
  %v8_ef10 = icmp eq i32 %v1_ede4, 62
  store i1 %v8_ef10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef10, label %dec_label_pc_edcc, label %dec_label_pc_ef18

dec_label_pc_ef18:                                ; preds = %dec_label_pc_ef0c, %bb316
  %v2_ef18 = icmp ugt i32 %v1_edd0, 159
  store i1 %v2_ef18, i1* %cpsr_c.global-to-local, align 1
  %v7_ef18 = icmp eq i32 %v1_edd0, 160
  store i1 %v7_ef18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef18, label %bb317, label %dec_label_pc_ef24

bb317:                                            ; preds = %dec_label_pc_ef18
  %v3_ef1c = icmp ugt i32 %v1_ede4, 12
  store i1 %v3_ef1c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef1c = icmp eq i32 %v1_ede4, 13
  store i1 %v8_ef1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef1c, label %dec_label_pc_edcc, label %dec_label_pc_ef24

dec_label_pc_ef24:                                ; preds = %dec_label_pc_ef18, %bb317
  %v1_ef24 = add nsw i32 %v1_edd0, -6
  store i32 %v1_ef24, i32* %r3.global-to-local, align 4
  %v2_ef28 = icmp ugt i32 %v1_edd0, 10
  store i1 %v2_ef28, i1* %cpsr_c.global-to-local, align 1
  %v7_ef28 = icmp eq i32 %v1_edd0, 11
  store i1 %v7_ef28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef28, label %dec_label_pc_edcc, label %bb318

bb318:                                            ; preds = %dec_label_pc_ef24
  %v3_ef2c = icmp ne i32 %v1_ef24, 0
  store i1 %v3_ef2c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef2c = icmp eq i32 %v1_ef24, 1
  store i1 %v8_ef2c, i1* %cpsr_z.global-to-local, align 1
  %v2_ef30 = xor i1 %v3_ef2c, true
  %v3_ef30 = or i1 %v8_ef2c, %v2_ef30
  br i1 %v3_ef30, label %dec_label_pc_edcc, label %dec_label_pc_ef34

dec_label_pc_ef34:                                ; preds = %bb318
  %v2_ef34 = icmp ugt i32 %v1_edd0, 21
  store i1 %v2_ef34, i1* %cpsr_c.global-to-local, align 1
  %v7_ef34 = icmp eq i32 %v1_edd0, 22
  store i1 %v7_ef34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef34, label %dec_label_pc_edcc, label %bb319

bb319:                                            ; preds = %dec_label_pc_ef34
  %v3_ef38 = icmp ugt i32 %v1_edd0, 20
  store i1 %v3_ef38, i1* %cpsr_c.global-to-local, align 1
  %v8_ef38 = icmp eq i32 %v1_edd0, 21
  store i1 %v8_ef38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef38, label %dec_label_pc_edcc, label %dec_label_pc_ef40

dec_label_pc_ef40:                                ; preds = %bb319
  %v2_ef40 = icmp ugt i32 %v1_edd0, 27
  store i1 %v2_ef40, i1* %cpsr_c.global-to-local, align 1
  %v7_ef40 = icmp eq i32 %v1_edd0, 28
  store i1 %v7_ef40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef40, label %dec_label_pc_edcc, label %bb320

bb320:                                            ; preds = %dec_label_pc_ef40
  %v3_ef44 = icmp ugt i32 %v1_edd0, 25
  store i1 %v3_ef44, i1* %cpsr_c.global-to-local, align 1
  %v8_ef44 = icmp eq i32 %v1_edd0, 26
  store i1 %v8_ef44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef44, label %dec_label_pc_edcc, label %dec_label_pc_ef4c

dec_label_pc_ef4c:                                ; preds = %bb320
  %v2_ef4c = icmp ugt i32 %v1_edd0, 29
  store i1 %v2_ef4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef4c = icmp eq i32 %v1_edd0, 30
  store i1 %v7_ef4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef4c, label %dec_label_pc_edcc, label %bb321

bb321:                                            ; preds = %dec_label_pc_ef4c
  %v3_ef50 = icmp ugt i32 %v1_edd0, 28
  store i1 %v3_ef50, i1* %cpsr_c.global-to-local, align 1
  %v8_ef50 = icmp eq i32 %v1_edd0, 29
  store i1 %v8_ef50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef50, label %dec_label_pc_edcc, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %bb321
  %v2_ef58 = icmp ugt i32 %v1_edd0, 54
  store i1 %v2_ef58, i1* %cpsr_c.global-to-local, align 1
  %v7_ef58 = icmp eq i32 %v1_edd0, 55
  store i1 %v7_ef58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef58, label %dec_label_pc_edcc, label %bb322

bb322:                                            ; preds = %dec_label_pc_ef58
  %v3_ef5c = icmp ugt i32 %v1_edd0, 32
  store i1 %v3_ef5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef5c = icmp eq i32 %v1_edd0, 33
  store i1 %v8_ef5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef5c, label %dec_label_pc_edcc, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %bb322
  %v2_ef64 = icmp ugt i32 %v1_edd0, 214
  store i1 %v2_ef64, i1* %cpsr_c.global-to-local, align 1
  %v7_ef64 = icmp eq i32 %v1_edd0, 215
  store i1 %v7_ef64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef64, label %.thread51, label %bb323

bb323:                                            ; preds = %dec_label_pc_ef64
  %v3_ef68 = icmp ugt i32 %v1_edd0, 213
  store i1 %v3_ef68, i1* %cpsr_c.global-to-local, align 1
  %v8_ef68 = icmp eq i32 %v1_edd0, 214
  store i1 %v8_ef68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef68, label %bb324, label %dec_label_pc_ef78

.thread51:                                        ; preds = %dec_label_pc_ef64
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_edcc

bb324:                                            ; preds = %bb323
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_edcc

dec_label_pc_ef78:                                ; preds = %bb323
  store i32 0, i32* @r4, align 4
  %v5_ef84 = call i32 @llvm.bswap.i32(i32 %v0_edcc)
  store i32 %v5_ef84, i32* %r3.global-to-local, align 4
  %tmp325 = and i32 %v0_edcc, 65280
  %tmp326 = call i32 @llvm.bswap.i32(i32 %tmp325)
  %v1_ef8c = and i32 %v5_ef84, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_ef90 = mul nuw i32 %v3_edec, 16777216
  %v3_ef94 = udiv i32 %tmp326, 256
  %v4_ef98 = mul i32 %v1_ef8c, 256
  %tmp327 = and i32 %v0_edcc, 32768
  %v3_ef9c = icmp ne i32 %tmp327, 0
  store i1 %v3_ef9c, i1* %cpsr_c.global-to-local, align 1
  %v4_ef9c = udiv i32 %v5_ef84, 16777216
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* @r0, align 4
  %v5_ef9c = or i32 %v4_ef9c, %v3_ef90
  %v5_ef98 = or i32 %v5_ef9c, %v4_ef98
  %v2_efa4 = or i32 %v5_ef98, %v3_ef94
  store i32 %v2_efa4, i32* %r2.global-to-local, align 4
  %v5_efa8 = trunc i32 %v4_ef9c to i8
  store i8 %v5_efa8, i8* @global_var_1c1c8.187, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1c2.188 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1c3.189 to i8*), align 4
  %v3_efb8 = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* %ip.global-to-local, align 4
  %sext7 = mul i32 %v3_efb8, 16777216
  %v1_efc0 = sdiv i32 %sext7, 16777216
  store i32 %v1_efc0, i32* %r3.global-to-local, align 4
  %v2_efc4 = and i32 %v1_efc0, 128
  %v3_efc4 = icmp ne i32 %v2_efc4, 0
  store i1 %v3_efc4, i1* %cpsr_c.global-to-local, align 1
  %v4_efc4 = ashr i32 %sext7, 31
  store i32 %v4_efc4, i32* %r2.global-to-local, align 4
  %v1_efc8 = trunc i32 %v1_efc0 to i8
  store i8 %v1_efc8, i8* bitcast (i32* @global_var_1c1c2.188 to i8*), align 4
  %v1_efcc = trunc i32 %v4_efc4 to i8
  store i8 %v1_efcc, i8* bitcast (i32* @global_var_1c1c3.189 to i8*), align 4
  %v3_efd0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_efd0, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_efd8 = call i32 @function_10f74(i32 %v3_efd0, i32 10)
  store i32 %v4_efd8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efdc = icmp eq i32 %v4_efd8, 0
  store i1 %v2_efdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_efdc, label %.thread231, label %bb328

.thread231:                                       ; preds = %dec_label_pc_ef78
  store i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32* @lr, align 4
  br label %.thread61.thread104

bb328:                                            ; preds = %dec_label_pc_ef78
  store i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_efec = load i32, i32* @r4, align 4
  %v2_efec = trunc i32 %v1_efec to i8
  store i8 %v2_efec, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32 2) to i8*), align 2
  %v0_eff0.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eff0.pr.pre, label %.thread61.thread104, label %.thread58

.thread58:                                        ; preds = %bb328
  %v1_eff0 = load i32, i32* %r3.global-to-local, align 4
  %v2_eff0 = trunc i32 %v1_eff0 to i8
  %v3_eff0 = load i32, i32* %r0.global-to-local, align 4
  %v4_eff0 = add i32 %v3_eff0, 3
  %v5_eff0 = inttoptr i32 %v4_eff0 to i8*
  store i8 %v2_eff0, i8* %v5_eff0, align 1
  %v0_eff8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_eff8.pr.pr, label %.thread64, label %.thread66

.thread61.thread104:                              ; preds = %bb328, %.thread231
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* %r0.global-to-local, align 4
  br label %.thread64

.thread64:                                        ; preds = %.thread58, %.thread61.thread104
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_f000 = load i32, i32* @lr, align 4
  %v4_f000 = add i32 %v3_f000, 2
  %v5_f000 = inttoptr i32 %v4_f000 to i8*
  store i8 9, i8* %v5_f000, align 1
  %v0_f004.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f004.pr.pr, label %bb329, label %.thread66

bb329:                                            ; preds = %.thread64
  %v1_f004 = load i32, i32* %r2.global-to-local, align 4
  %v2_f004 = trunc i32 %v1_f004 to i8
  %v3_f004 = load i32, i32* @lr, align 4
  %v4_f004 = add i32 %v3_f004, 3
  %v5_f004 = inttoptr i32 %v4_f004 to i8*
  store i8 %v2_f004, i8* %v5_f004, align 1
  br label %.thread66

.thread66:                                        ; preds = %.thread58, %.thread64, %bb329
  %v4_f008 = load i8, i8* @global_var_1c1c8.187, align 1
  %v5_f008 = sext i8 %v4_f008 to i32
  store i32 %v5_f008, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32* @r1, align 4
  store i8 %v4_f008, i8* @global_var_1c1d0.190, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_f020 = load i32, i32* %sl.global-to-local, align 4
  %v1_f020 = trunc i32 %v0_f020 to i8
  store i8 %v1_f020, i8* bitcast (i32* @global_var_1c1dc.191 to i8*), align 4
  store i8 %v1_f020, i8* bitcast (i32* @global_var_1c1dd.192 to i8*), align 4
  %v5_f028 = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_f028, 16777216
  %v1_f030 = sdiv i32 %sext, 16777216
  %v3_f038 = ashr i32 %sext, 31
  %v2_f03c = load i32, i32* @global_var_1c1cc.144, align 4
  %v1_f044 = trunc i32 %v3_f038 to i8
  store i8 %v1_f044, i8* bitcast (i32* @global_var_1c1dd.192 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_f058 = load i8, i8* @global_var_1c1c8.187, align 1
  %v4_f058 = sext i8 %v3_f058 to i32
  store i32 %v4_f058, i32* @r4, align 4
  %v2_f05c = load i32, i32* @global_var_1c250.138, align 4
  store i32 %v2_f05c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), i32* %ip.global-to-local, align 4
  %v1_f06c = and i32 %v2_f03c, 8388608
  %v2_f06c = icmp ne i32 %v1_f06c, 0
  store i1 %v2_f06c, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_f080 = trunc i32 %v1_f030 to i8
  store i8 %v1_f080, i8* bitcast (i32* @global_var_1c1dc.191 to i8*), align 4
  store i32 %v2_f088, i32* %lr.global-to-local, align 4
  %v8_f098 = call i32 @function_11980(i32 %v2_f05c, i32* bitcast (i8** @global_var_1c1b8.140 to i32*), i32 40, i32 16384, i32 %v2_f088, i32 16)
  store i32 %v8_f098, i32* %r0.global-to-local, align 4
  %v3_f09c = load i32, i32* %stack_var_-52, align 4
  %v1_f0a0 = add i32 %v3_f09c, 1
  store i32 %v1_f0a0, i32* %r3.global-to-local, align 4
  %v3_f0a4 = icmp ugt i32 %v1_f0a0, 383
  store i1 %v3_f0a4, i1* %cpsr_c.global-to-local, align 1
  %v8_f0a4 = icmp eq i32 %v1_f0a0, 384
  store i1 %v8_f0a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f0a0, i32* %stack_var_-52, align 4
  %v5_f0ac = icmp slt i32 %v1_f0a0, 384
  br i1 %v5_f0ac, label %.thread66.dec_label_pc_ed9c_crit_edge, label %dec_label_pc_f0b0

.thread66.dec_label_pc_ed9c_crit_edge:            ; preds = %.thread66
  %v0_ed9c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ed9c

dec_label_pc_f0b0:                                ; preds = %.thread66
  %v0_f0b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f0b0, i32* @fp, align 4
  br label %dec_label_pc_f0b4

dec_label_pc_f0b4:                                ; preds = %dec_label_pc_ed80, %dec_label_pc_f0b0
  %v0_f0b4 = call i32 @function_116f4()
  store i32 %v0_f0b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_f0b4, i32* @sb, align 4
  %v6_f0ec = inttoptr i32 %v0_f124 to i32*
  %v1_f114 = add i32 %v0_f124, 16
  %v2_f114 = inttoptr i32 %v1_f114 to i32*
  %v4_f130 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_f138 = add i32 %v4_f130, 1
  %v2_f138 = inttoptr i32 %v1_f138 to i8*
  %v1_f15c = add i32 %v4_f130, 2
  %v2_f15c = inttoptr i32 %v1_f15c to i8*
  %v1_f160 = add i32 %v4_f130, 3
  %v2_f160 = inttoptr i32 %v1_f160 to i8*
  %v4_f164 = sext i8 %stack_var_-1868.0 to i32
  %v1_f178 = add i32 %v4_f130, 13
  %v2_f178 = inttoptr i32 %v1_f178 to i8*
  %v1_f244 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_f124 = add i32 %v0_f124, 9
  %v2_f124 = inttoptr i32 %v1_f124 to i8*
  %v1_f19c = add i32 %v4_f130, 8
  %v2_f19c = inttoptr i32 %v1_f19c to i32*
  %v1_f1dc = add i32 %v0_f124, 12
  %v2_f1dc = inttoptr i32 %v1_f1dc to i32*
  br label %dec_label_pc_f0c0

dec_label_pc_f0c0:                                ; preds = %dec_label_pc_f19c, %dec_label_pc_f194, %dec_label_pc_f18c, %dec_label_pc_f158, %dec_label_pc_f148, %dec_label_pc_f124, %dec_label_pc_f10c, %dec_label_pc_f184, %dec_label_pc_f174, %dec_label_pc_f104, %dec_label_pc_f23c, %dec_label_pc_f0b4
  %v1_f0c4 = phi i32 [ %v0_f0b4, %dec_label_pc_f0b4 ], [ %v1_f0c4.pre.pre, %dec_label_pc_f23c ], [ %v0_f0f8, %dec_label_pc_f104 ], [ %v0_f0f8, %dec_label_pc_f174 ], [ %v0_f0f8, %dec_label_pc_f184 ], [ %v0_f0f8, %dec_label_pc_f10c ], [ %v0_f0f8, %dec_label_pc_f124 ], [ %v0_f0f8, %dec_label_pc_f148 ], [ %v0_f0f8, %dec_label_pc_f158 ], [ %v0_f0f8, %dec_label_pc_f18c ], [ %v0_f0f8, %dec_label_pc_f194 ], [ %v0_f0f8, %dec_label_pc_f19c ]
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i32*
  store i32 0, i32* %v2_f0c4, align 4
  %v2_f0d0 = load i32, i32* @global_var_1c250.138, align 4
  store i32 %v2_f0d0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_f124, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_f0ec = call i32 @function_11920(i32 %v2_f0d0, i32* %v6_f0ec, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_f0ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0f0 = icmp eq i32 %v7_f0ec, 0
  store i1 %v2_f0f0, i1* %cpsr_z.global-to-local, align 1
  %tmp330 = icmp slt i32 %v7_f0ec, 1
  br i1 %tmp330, label %dec_label_pc_f308, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %dec_label_pc_f0c0
  %v0_f0f8 = load i32, i32* @sb, align 4
  %v1_f0f8 = inttoptr i32 %v0_f0f8 to i32*
  %v2_f0f8 = load i32, i32* %v1_f0f8, align 4
  store i32 %v2_f0f8, i32* %r3.global-to-local, align 4
  %v2_f0fc = icmp ugt i32 %v2_f0f8, 10
  store i1 %v2_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0fc = icmp eq i32 %v2_f0f8, 11
  store i1 %v7_f0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0fc, label %dec_label_pc_f308, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f0f8
  %v2_f104 = icmp ugt i32 %v7_f0ec, 38
  store i1 %v2_f104, i1* %cpsr_c.global-to-local, align 1
  %v7_f104 = icmp eq i32 %v7_f0ec, 39
  store i1 %v7_f104, i1* %cpsr_z.global-to-local, align 1
  %v2_f108 = xor i1 %v2_f104, true
  %v3_f108 = or i1 %v7_f104, %v2_f108
  br i1 %v3_f108, label %dec_label_pc_f0c0, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f104
  store i32 %v0_f124, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c230.50 to i32), i32* %r0.global-to-local, align 4
  %v3_f114 = load i32, i32* %v2_f114, align 4
  store i32 %v3_f114, i32* %r2.global-to-local, align 4
  %v2_f118 = load i32, i32* @global_var_1c230.50, align 4
  store i32 %v2_f118, i32* %r3.global-to-local, align 4
  %v3_f11c = icmp uge i32 %v3_f114, %v2_f118
  store i1 %v3_f11c, i1* %cpsr_c.global-to-local, align 1
  %v9_f11c = icmp eq i32 %v3_f114, %v2_f118
  store i1 %v9_f11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f11c, label %dec_label_pc_f124, label %dec_label_pc_f0c0

dec_label_pc_f124:                                ; preds = %dec_label_pc_f10c
  %v3_f124 = load i8, i8* %v2_f124, align 1
  %v4_f124 = zext i8 %v3_f124 to i32
  store i32 %v4_f124, i32* %r3.global-to-local, align 4
  %v2_f128 = icmp ugt i8 %v3_f124, 5
  store i1 %v2_f128, i1* %cpsr_c.global-to-local, align 1
  %v7_f128 = icmp eq i8 %v3_f124, 6
  store i1 %v7_f128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f128, label %dec_label_pc_f130, label %dec_label_pc_f0c0

dec_label_pc_f130:                                ; preds = %dec_label_pc_f124
  store i32 %v4_f130, i32* %r1.global-to-local, align 4
  %v2_f134 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_f134 = zext i8 %v2_f134 to i32
  store i32 %v3_f134, i32* %r2.global-to-local, align 4
  %v3_f138 = load i8, i8* %v2_f138, align 1
  %v4_f138 = zext i8 %v3_f138 to i32
  store i32 %v4_f138, i32* %r3.global-to-local, align 4
  %v4_f13c = mul nuw nsw i32 %v4_f138, 256
  %v5_f13c = or i32 %v4_f13c, %v3_f134
  store i32 %v5_f13c, i32* %r2.global-to-local, align 4
  %v2_f140 = icmp ugt i32 %v5_f13c, 5887
  store i1 %v2_f140, i1* %cpsr_c.global-to-local, align 1
  %v7_f140 = icmp eq i32 %v5_f13c, 5888
  store i1 %v7_f140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f140, label %dec_label_pc_f158, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %dec_label_pc_f130
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f150 = icmp ugt i32 %v5_f13c, 4872
  store i1 %v3_f150, i1* %cpsr_c.global-to-local, align 1
  %v9_f150 = icmp eq i32 %v5_f13c, 4873
  store i1 %v9_f150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f150, label %dec_label_pc_f158, label %dec_label_pc_f0c0

dec_label_pc_f158:                                ; preds = %dec_label_pc_f148, %dec_label_pc_f130
  store i32 %v4_f130, i32* %r2.global-to-local, align 4
  %v3_f15c = load i8, i8* %v2_f15c, align 1
  %v4_f15c = zext i8 %v3_f15c to i32
  store i32 %v4_f15c, i32* %r3.global-to-local, align 4
  %v3_f160 = load i8, i8* %v2_f160, align 1
  %v4_f160 = zext i8 %v3_f160 to i32
  store i32 %v4_f160, i32* %r2.global-to-local, align 4
  store i32 %v4_f164, i32* %ip.global-to-local, align 4
  %v4_f168 = mul nuw nsw i32 %v4_f160, 256
  %v5_f168 = or i32 %v4_f168, %v4_f15c
  store i32 %v5_f168, i32* %r3.global-to-local, align 4
  %v3_f16c = icmp uge i32 %v5_f168, %v4_f164
  store i1 %v3_f16c, i1* %cpsr_c.global-to-local, align 1
  %v9_f16c = icmp eq i32 %v5_f168, %v4_f164
  store i1 %v9_f16c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f16c, label %dec_label_pc_f174, label %dec_label_pc_f0c0

dec_label_pc_f174:                                ; preds = %dec_label_pc_f158
  store i32 %v4_f130, i32* %lr.global-to-local, align 4
  %v3_f178 = load i8, i8* %v2_f178, align 1
  %v4_f178 = zext i8 %v3_f178 to i32
  store i32 %v4_f178, i32* %r3.global-to-local, align 4
  %v1_f17c = and i32 %v4_f178, 2
  %v2_f17c = icmp eq i32 %v1_f17c, 0
  store i1 %v2_f17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f17c, label %dec_label_pc_f0c0, label %dec_label_pc_f184

dec_label_pc_f184:                                ; preds = %dec_label_pc_f174
  %v1_f184 = and i32 %v4_f178, 16
  %v2_f184 = icmp eq i32 %v1_f184, 0
  store i1 %v2_f184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f184, label %dec_label_pc_f0c0, label %dec_label_pc_f18c

dec_label_pc_f18c:                                ; preds = %dec_label_pc_f184
  %v1_f18c = and i32 %v4_f178, 4
  %v2_f18c = icmp eq i32 %v1_f18c, 0
  store i1 %v2_f18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f18c, label %dec_label_pc_f194, label %dec_label_pc_f0c0

dec_label_pc_f194:                                ; preds = %dec_label_pc_f18c
  %tmp477 = urem i8 %v3_f178, 2
  %v2_f194 = icmp eq i8 %tmp477, 0
  store i1 %v2_f194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f194, label %dec_label_pc_f19c, label %dec_label_pc_f0c0

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f194
  %v3_f19c = load i32, i32* %v2_f19c, align 4
  %v1_f1a4 = and i32 %v3_f19c, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_f1a8 = mul i32 %v3_f19c, 16777216
  %v1_f1a0 = udiv i32 %v3_f19c, 256
  %v3_f1ac = and i32 %v1_f1a0, 65280
  %v4_f1b0 = mul i32 %v1_f1a4, 256
  %v4_f1b4 = udiv i32 %v3_f19c, 16777216
  %v5_f1b4 = or i32 %v4_f1b4, %v3_f1a8
  %v5_f1b0 = or i32 %v5_f1b4, %v4_f1b0
  %v2_f1b8 = or i32 %v5_f1b0, %v3_f1ac
  %v1_f1bc = add i32 %v2_f1b8, -1
  %v1_f1c0 = udiv i32 %v1_f1bc, 256
  %v3_f1c4 = and i32 %v1_f1c0, 65280
  %v1_f1c8 = and i32 %v1_f1bc, 65280
  store i32 %v1_f1c8, i32* %r2.global-to-local, align 4
  %v3_f1cc = mul i32 %v1_f1bc, 16777216
  %v4_f1d0 = udiv i32 %v1_f1bc, 16777216
  %v5_f1d0 = or i32 %v3_f1c4, %v4_f1d0
  store i32 %v5_f1d0, i32* %r1.global-to-local, align 4
  store i32 %v0_f124, i32* %r3.global-to-local, align 4
  %v4_f1d8 = mul nuw nsw i32 %v1_f1c8, 256
  %v5_f1d8 = or i32 %v4_f1d8, %v3_f1cc
  store i32 %v5_f1d8, i32* %r0.global-to-local, align 4
  %v3_f1dc = load i32, i32* %v2_f1dc, align 4
  store i32 %v3_f1dc, i32* %r2.global-to-local, align 4
  %v2_f1e0 = call i32 @llvm.bswap.i32(i32 %v1_f1bc)
  store i32 %v2_f1e0, i32* %ip.global-to-local, align 4
  %v3_f1e4 = icmp uge i32 %v2_f1e0, %v3_f1dc
  store i1 %v3_f1e4, i1* %cpsr_c.global-to-local, align 1
  %v9_f1e4 = icmp eq i32 %v2_f1e0, %v3_f1dc
  store i1 %v9_f1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f1e4, label %dec_label_pc_f1ec, label %dec_label_pc_f0c0

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_f19c
  %v0_f1ec = load i32, i32* @r4, align 4
  %v2_f1ec = icmp ugt i32 %v0_f1ec, 254
  store i1 %v2_f1ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f1ec = icmp eq i32 %v0_f1ec, 255
  store i1 %v7_f1ec, i1* %cpsr_z.global-to-local, align 1
  %v8_f1f0 = icmp sgt i32 %v0_f1ec, 255
  br i1 %v8_f1f0, label %dec_label_pc_f308, label %dec_label_pc_f1f4

dec_label_pc_f1f4:                                ; preds = %dec_label_pc_f1ec
  store i32 ptrtoint (i32* @global_var_1c24c.136 to i32), i32* %lr.global-to-local, align 4
  %v3_f1f8 = mul i32 %v0_f1ec, 256
  store i32 %v3_f1f8, i32* %r2.global-to-local, align 4
  %v2_f1fc = load i32, i32* @global_var_1c24c.136, align 4
  store i32 %v2_f1fc, i32* %r1.global-to-local, align 4
  %v2_f204 = mul i32 %v0_f1ec, 288
  store i32 %v2_f204, i32* %r3.global-to-local, align 4
  %v2_f208 = add i32 %v2_f1fc, %v2_f204
  store i32 %v2_f208, i32* @r0, align 4
  %v1_f20c = add i32 %v2_f208, 12
  %v2_f20c = inttoptr i32 %v1_f20c to i32*
  %v3_f20c = load i32, i32* %v2_f20c, align 4
  store i32 %v3_f20c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f210 = icmp eq i32 %v3_f20c, 0
  store i1 %v2_f210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f210, label %dec_label_pc_f23c, label %dec_label_pc_f21c.preheader

dec_label_pc_f21c.preheader:                      ; preds = %dec_label_pc_f1f4
  %v2_f214 = add i32 %v2_f208, 288
  store i32 %v2_f214, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f21c.preheader, %dec_label_pc_f228
  %v0_f228 = phi i32 [ %v2_f214, %dec_label_pc_f21c.preheader ], [ %v1_f234, %dec_label_pc_f228 ]
  %v0_f21c = phi i32 [ %v0_f1ec, %dec_label_pc_f21c.preheader ], [ %v1_f21c, %dec_label_pc_f228 ]
  %v1_f21c = add i32 %v0_f21c, 1
  store i32 %v1_f21c, i32* @r4, align 4
  %v7_f220 = icmp eq i32 %v1_f21c, 256
  br i1 %v7_f220, label %dec_label_pc_f308.loopexit, label %dec_label_pc_f228

dec_label_pc_f228:                                ; preds = %dec_label_pc_f21c
  store i32 %v0_f228, i32* @r0, align 4
  %v1_f22c = add i32 %v0_f228, 12
  %v2_f22c = inttoptr i32 %v1_f22c to i32*
  %v3_f22c = load i32, i32* %v2_f22c, align 4
  %v2_f230 = icmp eq i32 %v3_f22c, 0
  %v1_f234 = add i32 %v0_f228, 288
  store i32 %v1_f234, i32* %r3.global-to-local, align 4
  br i1 %v2_f230, label %dec_label_pc_f23c.loopexit, label %dec_label_pc_f21c

dec_label_pc_f23c.loopexit:                       ; preds = %dec_label_pc_f228
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f23c

dec_label_pc_f23c:                                ; preds = %dec_label_pc_f23c.loopexit, %dec_label_pc_f1f4
  %v1_f23c = phi i32 [ %v0_f228, %dec_label_pc_f23c.loopexit ], [ %v2_f208, %dec_label_pc_f1f4 ]
  %v2_f23c = add i32 %v1_f23c, 16
  %v3_f23c = inttoptr i32 %v2_f23c to i32*
  store i32 %v3_f1dc, i32* %v3_f23c, align 4
  store i32 %v4_f130, i32* %r1.global-to-local, align 4
  %v2_f244 = load i32, i32* %v1_f244, align 4
  store i32 %v2_f244, i32* %r2.global-to-local, align 4
  %v1_f248 = and i32 %v2_f244, 128
  %v2_f248 = icmp ne i32 %v1_f248, 0
  store i1 %v2_f248, i1* %cpsr_c.global-to-local, align 1
  %v3_f248 = sdiv i32 %v2_f244, 256
  store i32 %v3_f248, i32* %r3.global-to-local, align 4
  %v1_f24c = trunc i32 %v3_f248 to i8
  %v2_f24c = load i32, i32* @r0, align 4
  %v3_f24c = add i32 %v2_f24c, 21
  %v4_f24c = inttoptr i32 %v3_f24c to i8*
  store i8 %v1_f24c, i8* %v4_f24c, align 1
  %v0_f250 = load i32, i32* %r2.global-to-local, align 4
  %v1_f250 = trunc i32 %v0_f250 to i8
  %v2_f250 = load i32, i32* @r0, align 4
  %v3_f250 = add i32 %v2_f250, 20
  %v4_f250 = inttoptr i32 %v3_f250 to i8*
  store i8 %v1_f250, i8* %v4_f250, align 1
  %v0_f254 = call i32 @function_e7e4()
  store i32 %v0_f254, i32* %r0.global-to-local, align 4
  %v1_f0c4.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_f0c0

dec_label_pc_f25c:                                ; preds = %dec_label_pc_100f8
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f26c = load i32, i32* @r4, align 4
  store i32 %v0_f26c, i32* %r0.global-to-local, align 4
  %v0_f270 = load i32, i32* @r5, align 4
  store i32 %v0_f270, i32* %stack_var_-56, align 4
  %v6_f274 = call i32 @function_11954(i32 %v0_f26c, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_fb34, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f288 = load i32, i32* @r4, align 4
  store i32 %v0_f288, i32* %r0.global-to-local, align 4
  %v5_f28c = call i32 @function_11954(i32 %v0_f288, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_f294 = load i32, i32* @r6, align 4
  store i32 %v0_f294, i32* %r2.global-to-local, align 4
  %v2_f298 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_f298, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2a0 = load i32, i32* @r4, align 4
  store i32 %v0_f2a0, i32* %r0.global-to-local, align 4
  %v5_f2a4 = call i32 @function_11954(i32 %v0_f2a0, i32* nonnull %stack_var_-38, i32 %v0_f294, i32 16384)
  %v0_f2a8 = load i32, i32* %sl.global-to-local, align 4
  %v1_f2a8 = add i32 %v0_f2a8, 12
  store i32 %v1_f2a8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2b4 = load i32, i32* @r4, align 4
  store i32 %v0_f2b4, i32* %r0.global-to-local, align 4
  %v4_f2b8 = inttoptr i32 %v1_f2a8 to i32*
  %v5_f2b8 = call i32 @function_11954(i32 %v0_f2b4, i32* %v4_f2b8, i32 1, i32 16384)
  store i32 %v5_f2b8, i32* %r0.global-to-local, align 4
  %v0_f2bc = load i32, i32* %sl.global-to-local, align 4
  %v1_f2bc = inttoptr i32 %v0_f2bc to i32*
  %v2_f2bc = load i32, i32* %v1_f2bc, align 4
  store i32 %v2_f2bc, i32* %r1.global-to-local, align 4
  %v1_f2c0 = add i32 %v0_f2bc, 12
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i8*
  %v3_f2c0 = load i8, i8* %v2_f2c0, align 1
  %v4_f2c0 = zext i8 %v3_f2c0 to i32
  store i32 %v4_f2c0, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2c8 = load i32, i32* @r4, align 4
  store i32 %v0_f2c8, i32* %r0.global-to-local, align 4
  %v4_f2cc = inttoptr i32 %v2_f2bc to i32*
  %v5_f2cc = call i32 @function_11954(i32 %v0_f2c8, i32* %v4_f2cc, i32 %v4_f2c0, i32 16384)
  %v0_f2d0 = load i32, i32* %sl.global-to-local, align 4
  %v1_f2d0 = add i32 %v0_f2d0, 13
  store i32 %v1_f2d0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2dc = load i32, i32* @r4, align 4
  store i32 %v0_f2dc, i32* %r0.global-to-local, align 4
  %v4_f2e0 = inttoptr i32 %v1_f2d0 to i32*
  %v5_f2e0 = call i32 @function_11954(i32 %v0_f2dc, i32* %v4_f2e0, i32 1, i32 16384)
  %v0_f2e4 = load i32, i32* @r4, align 4
  store i32 %v0_f2e4, i32* %r0.global-to-local, align 4
  %v0_f2e8 = load i32, i32* %sl.global-to-local, align 4
  %v1_f2e8 = add i32 %v0_f2e8, 13
  %v2_f2e8 = inttoptr i32 %v1_f2e8 to i8*
  %v3_f2e8 = load i8, i8* %v2_f2e8, align 1
  %v4_f2e8 = zext i8 %v3_f2e8 to i32
  store i32 %v4_f2e8, i32* %r2.global-to-local, align 4
  %v1_f2ec = add i32 %v0_f2e8, 4
  %v2_f2ec = inttoptr i32 %v1_f2ec to i32*
  %v3_f2ec = load i32, i32* %v2_f2ec, align 4
  store i32 %v3_f2ec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f2f4 = inttoptr i32 %v3_f2ec to i32*
  %v5_f2f4 = call i32 @function_11954(i32 %v0_f2e4, i32* %v4_f2f4, i32 %v4_f2e8, i32 16384)
  %v0_f2f8 = load i32, i32* @r4, align 4
  store i32 %v0_f2f8, i32* %r0.global-to-local, align 4
  %v1_f2fc = call i32 @function_11120(i32 %v0_f2f8)
  store i32 %v1_f2fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_100dc, %dec_label_pc_eb18, %dec_label_pc_f3f0, %dec_label_pc_f25c
  %stack_var_-1872.1 = phi i32 [ %tmp260, %dec_label_pc_eb18 ], [ %stack_var_-1872.2, %dec_label_pc_100dc ], [ %stack_var_-1872.2, %dec_label_pc_f25c ], [ %tmp260, %dec_label_pc_f3f0 ]
  %stack_var_-1868.1 = phi i8 [ %tmp261, %dec_label_pc_eb18 ], [ %stack_var_-1868.2, %dec_label_pc_100dc ], [ %stack_var_-1868.2, %dec_label_pc_f25c ], [ %tmp261, %dec_label_pc_f3f0 ]
  %stack_var_-1876.1 = phi i8* [ %tmp289, %dec_label_pc_eb18 ], [ %stack_var_-1876.2, %dec_label_pc_100dc ], [ %stack_var_-1876.2, %dec_label_pc_f25c ], [ %tmp289, %dec_label_pc_f3f0 ]
  %v0_f300 = load i32, i32* @r5, align 4
  store i32 %v0_f300, i32* %r0.global-to-local, align 4
  %v1_f304 = call i32 @function_1246c(i32 %v0_f300)
  store i32 %v1_f304, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f308

dec_label_pc_f308.loopexit:                       ; preds = %dec_label_pc_f21c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %dec_label_pc_f1ec, %dec_label_pc_f0f8, %dec_label_pc_f0c0, %dec_label_pc_f308.loopexit, %dec_label_pc_f300
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.1, %dec_label_pc_f300 ], [ %v0_f124, %dec_label_pc_f308.loopexit ], [ %v0_f124, %dec_label_pc_f0c0 ], [ %v0_f124, %dec_label_pc_f0f8 ], [ %v0_f124, %dec_label_pc_f1ec ]
  %stack_var_-1868.2 = phi i8 [ %stack_var_-1868.1, %dec_label_pc_f300 ], [ %stack_var_-1868.0, %dec_label_pc_f308.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_f0c0 ], [ %stack_var_-1868.0, %dec_label_pc_f0f8 ], [ %stack_var_-1868.0, %dec_label_pc_f1ec ]
  %stack_var_-1876.2 = phi i8* [ %stack_var_-1876.1, %dec_label_pc_f300 ], [ %stack_var_-1876.0, %dec_label_pc_f308.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_f0c0 ], [ %stack_var_-1876.0, %dec_label_pc_f0f8 ], [ %stack_var_-1876.0, %dec_label_pc_f1ec ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_f31c430 = load i32, i32* @sp, align 4
  %v3_f31c431 = add i32 %v2_f31c430, 1664
  %v4_f31c432 = inttoptr i32 %v3_f31c431 to i32*
  store i32 0, i32* %v4_f31c432, align 4
  br label %dec_label_pc_f310.dec_label_pc_f310_crit_edge

dec_label_pc_f310.dec_label_pc_f310_crit_edge:    ; preds = %dec_label_pc_f308, %dec_label_pc_f310.dec_label_pc_f310_crit_edge
  %v0_f310.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_f31c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f310 = add i32 %v0_f310.pre, 1664
  store i32 %v1_f310, i32* %ip.global-to-local, align 4
  %v1_f314 = add i32 %v0_f310.pre, 4
  store i32 %v1_f314, i32* %r3.global-to-local, align 4
  %v7_f318 = icmp eq i32 %v1_f314, 128
  %v2_f31c = load i32, i32* @sp, align 4
  %v3_f31c = add i32 %v2_f31c, %v1_f310
  %v4_f31c = inttoptr i32 %v3_f31c to i32*
  store i32 %v0_f31c.pre, i32* %v4_f31c, align 4
  br i1 %v7_f318, label %dec_label_pc_f324, label %dec_label_pc_f310.dec_label_pc_f310_crit_edge

dec_label_pc_f324:                                ; preds = %dec_label_pc_f310.dec_label_pc_f310_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f324 = load i32, i32* %r2.global-to-local, align 4
  %v1_f328424 = add i32 %v0_f324, 1536
  store i32 %v1_f328424, i32* %lr.global-to-local, align 4
  %v1_f32c425 = add i32 %v0_f324, 4
  store i32 %v1_f32c425, i32* %r3.global-to-local, align 4
  %v7_f330426 = icmp eq i32 %v1_f32c425, 128
  %v2_f334427 = load i32, i32* @sp, align 4
  %v3_f334428 = add i32 %v2_f334427, %v1_f328424
  %v4_f334429 = inttoptr i32 %v3_f334428 to i32*
  store i32 %v0_f324, i32* %v4_f334429, align 4
  br i1 %v7_f330426, label %dec_label_pc_f33c, label %dec_label_pc_f328.dec_label_pc_f328_crit_edge

dec_label_pc_f328.dec_label_pc_f328_crit_edge:    ; preds = %dec_label_pc_f324, %dec_label_pc_f328.dec_label_pc_f328_crit_edge
  %v0_f328.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_f334.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f328 = add i32 %v0_f328.pre, 1536
  store i32 %v1_f328, i32* %lr.global-to-local, align 4
  %v1_f32c = add i32 %v0_f328.pre, 4
  store i32 %v1_f32c, i32* %r3.global-to-local, align 4
  %v7_f330 = icmp eq i32 %v1_f32c, 128
  %v2_f334 = load i32, i32* @sp, align 4
  %v3_f334 = add i32 %v2_f334, %v1_f328
  %v4_f334 = inttoptr i32 %v3_f334 to i32*
  store i32 %v0_f334.pre, i32* %v4_f334, align 4
  br i1 %v7_f330, label %dec_label_pc_f33c, label %dec_label_pc_f328.dec_label_pc_f328_crit_edge

dec_label_pc_f33c:                                ; preds = %dec_label_pc_f328.dec_label_pc_f328_crit_edge, %dec_label_pc_f324
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f33c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f33c, i32* @r6, align 4
  store i32 %v0_f33c, i32* @r5, align 4
  store i32 %v0_f33c, i32* @r7, align 4
  store i32 %v0_f33c, i32* %stack_var_-52, align 4
  %v2_f410 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f3b8

dec_label_pc_f350:                                ; preds = %dec_label_pc_f3e0, %dec_label_pc_f3b8
  %storemerge244 = phi i32 [ 30, %dec_label_pc_f3b8 ], [ 5, %dec_label_pc_f3e0 ]
  store i32 %storemerge244, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1e8.123 to i32), i32* %r2.global-to-local, align 4
  %v2_f354 = load i32, i32* @global_var_1c1e8.123, align 4
  store i32 %v2_f354, i32* %r3.global-to-local, align 4
  %v1_f358 = add i32 %v2_f3cc, 8
  %v2_f358 = inttoptr i32 %v1_f358 to i32*
  %v3_f358 = load i32, i32* %v2_f358, align 4
  store i32 %v3_f358, i32* %r2.global-to-local, align 4
  %v2_f35c = sub i32 %v2_f354, %v3_f358
  store i32 %v2_f35c, i32* %r3.global-to-local, align 4
  %v3_f360 = icmp uge i32 %v2_f35c, %storemerge244
  store i1 %v3_f360, i1* %cpsr_c.global-to-local, align 1
  %v9_f360 = icmp eq i32 %v2_f35c, %storemerge244
  store i1 %v9_f360, i1* %cpsr_z.global-to-local, align 1
  %v2_f364 = xor i1 %v9_f360, true
  %v3_f364 = and i1 %v3_f360, %v2_f364
  br i1 %v3_f364, label %dec_label_pc_f434, label %dec_label_pc_f368

dec_label_pc_f368:                                ; preds = %dec_label_pc_f350
  store i1 %v2_f3d4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f3d4, i1* %cpsr_z.global-to-local, align 1
  %v1_f400 = add i32 %v2_f3cc, 4
  %v2_f400 = inttoptr i32 %v1_f400 to i32*
  %v3_f400 = load i32, i32* %v2_f400, align 4
  br i1 %v7_f3d4, label %dec_label_pc_f400, label %dec_label_pc_f370

dec_label_pc_f370:                                ; preds = %dec_label_pc_f368
  store i32 %v3_f400, i32* %ip.global-to-local, align 4
  %v3_f378 = udiv i32 %v3_f400, 32
  store i32 %v2_f410, i32* %r0.global-to-local, align 4
  %v3_f380 = mul nuw nsw i32 %v3_f378, 4
  %v2_f384 = add i32 %v3_f380, %v2_f410
  store i32 %v2_f384, i32* %r3.global-to-local, align 4
  %v1_f388 = add i32 %v2_f384, -184
  %v2_f388 = inttoptr i32 %v1_f388 to i32*
  %v3_f388 = load i32, i32* %v2_f388, align 4
  %v1_f38c = urem i32 %v3_f400, 32
  store i32 %v1_f38c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f394 = shl i32 1, %v1_f38c
  %v8_f394 = or i32 %v3_f388, %v7_f394
  store i32 %v8_f394, i32* %r2.global-to-local, align 4
  store i32 %v8_f394, i32* %v2_f388, align 4
  %v0_f39c = load i32, i32* @r6, align 4
  %v1_f39c = load i32, i32* %ip.global-to-local, align 4
  %v3_f39c = icmp uge i32 %v0_f39c, %v1_f39c
  store i1 %v3_f39c, i1* %cpsr_c.global-to-local, align 1
  %v9_f39c = icmp eq i32 %v0_f39c, %v1_f39c
  store i1 %v9_f39c, i1* %cpsr_z.global-to-local, align 1
  %v5_f3a0 = icmp slt i32 %v0_f39c, %v1_f39c
  br i1 %v5_f3a0, label %bb332, label %bb333

bb332:                                            ; preds = %dec_label_pc_f370
  store i32 %v1_f39c, i32* @r6, align 4
  br label %bb333

bb333:                                            ; preds = %dec_label_pc_f3e0, %dec_label_pc_f474, %dec_label_pc_f468, %bb335, %dec_label_pc_f370, %bb332
  %v3_f3a4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f3a4, i32* %r3.global-to-local, align 4
  %v1_f3a8 = add i32 %v3_f3a4, 1
  store i32 %v1_f3a8, i32* %r2.global-to-local, align 4
  %v2_f3ac = icmp ugt i32 %v1_f3a8, 254
  store i1 %v2_f3ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f3ac = icmp eq i32 %v1_f3a8, 255
  store i1 %v7_f3ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f3a8, i32* %stack_var_-52, align 4
  %v8_f3b4 = icmp sgt i32 %v1_f3a8, 255
  br i1 %v8_f3b4, label %dec_label_pc_f480, label %dec_label_pc_f3b8

dec_label_pc_f3b8:                                ; preds = %bb333, %dec_label_pc_f33c
  %v0_f3c4 = phi i32 [ %v1_f3a8, %bb333 ], [ %v0_f33c, %dec_label_pc_f33c ]
  store i32 ptrtoint (i32* @global_var_1c24c.136 to i32), i32* %r0.global-to-local, align 4
  %v3_f3bc = mul i32 %v0_f3c4, 256
  store i32 %v3_f3bc, i32* %r3.global-to-local, align 4
  %v2_f3c0 = load i32, i32* @global_var_1c24c.136, align 4
  store i32 %v2_f3c0, i32* %r1.global-to-local, align 4
  %v2_f3c8 = mul i32 %v0_f3c4, 288
  store i32 %v2_f3c8, i32* %r2.global-to-local, align 4
  %v2_f3cc = add i32 %v2_f3c0, %v2_f3c8
  store i32 %v2_f3cc, i32* @r4, align 4
  %v1_f3d0 = add i32 %v2_f3cc, 12
  %v2_f3d0 = inttoptr i32 %v1_f3d0 to i32*
  %v3_f3d0 = load i32, i32* %v2_f3d0, align 4
  store i32 %v3_f3d0, i32* %ip.global-to-local, align 4
  %v2_f3d4 = icmp ne i32 %v3_f3d0, 0
  store i1 %v2_f3d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3d4 = icmp eq i32 %v3_f3d0, 1
  store i1 %v7_f3d4, i1* %cpsr_z.global-to-local, align 1
  %v2_f3d8 = xor i1 %v7_f3d4, true
  %v3_f3d8 = and i1 %v2_f3d4, %v2_f3d8
  br i1 %v3_f3d8, label %dec_label_pc_f350, label %dec_label_pc_f3e0

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f3b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3e0 = icmp eq i32 %v3_f3d0, 0
  store i1 %v2_f3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3e0, label %bb333, label %dec_label_pc_f350

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_eb40
  store i32 ptrtoint (i32* @global_var_1c250.138 to i32), i32* %r2.global-to-local, align 4
  %v2_f3f4 = load i32, i32* @global_var_1c250.138, align 4
  store i32 %v2_f3f4, i32* %r0.global-to-local, align 4
  %v1_f3f8 = call i32 @function_11120(i32 %v2_f3f4)
  store i32 %v1_f3f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f300

dec_label_pc_f400:                                ; preds = %dec_label_pc_f368
  store i32 %v3_f400, i32* %r0.global-to-local, align 4
  %v3_f408 = udiv i32 %v3_f400, 32
  %v3_f40c = mul nuw nsw i32 %v3_f408, 4
  store i32 %v2_f410, i32* %lr.global-to-local, align 4
  %v2_f414 = add i32 %v3_f40c, %v2_f410
  store i32 %v2_f414, i32* %r3.global-to-local, align 4
  %v1_f418 = add i32 %v2_f414, -312
  %v2_f418 = inttoptr i32 %v1_f418 to i32*
  %v3_f418 = load i32, i32* %v2_f418, align 4
  %v1_f41c = urem i32 %v3_f400, 32
  store i32 %v1_f41c, i32* %r1.global-to-local, align 4
  %v7_f420 = shl i32 1, %v1_f41c
  %v8_f420 = or i32 %v3_f418, %v7_f420
  store i32 %v8_f420, i32* %r2.global-to-local, align 4
  %v0_f424 = load i32, i32* @r5, align 4
  %v3_f424 = icmp uge i32 %v0_f424, %v3_f400
  store i1 %v3_f424, i1* %cpsr_c.global-to-local, align 1
  %v9_f424 = icmp eq i32 %v0_f424, %v3_f400
  store i1 %v9_f424, i1* %cpsr_z.global-to-local, align 1
  %v5_f428 = icmp slt i32 %v0_f424, %v3_f400
  br i1 %v5_f428, label %bb334, label %bb335

bb334:                                            ; preds = %dec_label_pc_f400
  store i32 %v3_f400, i32* @r5, align 4
  br label %bb335

bb335:                                            ; preds = %dec_label_pc_f400, %bb334
  store i32 %v8_f420, i32* %v2_f418, align 4
  br label %bb333

dec_label_pc_f434:                                ; preds = %dec_label_pc_f350
  %v1_f434 = add i32 %v2_f3cc, 4
  %v2_f434 = inttoptr i32 %v1_f434 to i32*
  %v3_f434 = load i32, i32* %v2_f434, align 4
  store i32 %v3_f434, i32* %r0.global-to-local, align 4
  %v1_f438 = call i32 @function_11120(i32 %v3_f434)
  store i32 %v1_f438, i32* %r0.global-to-local, align 4
  %v0_f43c = load i32, i32* @r4, align 4
  %v1_f43c = add i32 %v0_f43c, 12
  %v2_f43c = inttoptr i32 %v1_f43c to i32*
  %v3_f43c = load i32, i32* %v2_f43c, align 4
  store i32 %v3_f43c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f444 = icmp ugt i32 %v3_f43c, 1
  store i1 %v2_f444, i1* %cpsr_c.global-to-local, align 1
  %v7_f444 = icmp eq i32 %v3_f43c, 2
  store i1 %v7_f444, i1* %cpsr_z.global-to-local, align 1
  %v2_f448 = add i32 %v0_f43c, 4
  %v3_f448 = inttoptr i32 %v2_f448 to i32*
  store i32 -1, i32* %v3_f448, align 4
  %v2_f44c = xor i1 %v2_f444, true
  %v3_f44c = or i1 %v7_f444, %v2_f44c
  br i1 %v3_f44c, label %dec_label_pc_f474, label %dec_label_pc_f450

dec_label_pc_f450:                                ; preds = %dec_label_pc_f434
  %v0_f450 = load i32, i32* @r4, align 4
  %v1_f450 = add i32 %v0_f450, 284
  %v2_f450 = inttoptr i32 %v1_f450 to i8*
  %v3_f450 = load i8, i8* %v2_f450, align 1
  %v4_f450 = zext i8 %v3_f450 to i32
  %v1_f454 = add nuw nsw i32 %v4_f450, 1
  %v1_f458 = urem i32 %v1_f454, 256
  store i32 %v1_f458, i32* %r3.global-to-local, align 4
  %v2_f45c = icmp ugt i32 %v1_f458, 9
  store i1 %v2_f45c, i1* %cpsr_c.global-to-local, align 1
  %v7_f45c = icmp eq i32 %v1_f458, 10
  store i1 %v7_f45c, i1* %cpsr_z.global-to-local, align 1
  %v1_f460 = trunc i32 %v1_f454 to i8
  store i8 %v1_f460, i8* %v2_f450, align 1
  %v0_f464 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f464, label %dec_label_pc_f474, label %dec_label_pc_f468

dec_label_pc_f468:                                ; preds = %dec_label_pc_f450
  %v0_f468 = load i32, i32* @r4, align 4
  store i32 %v0_f468, i32* @r0, align 4
  %v0_f46c = call i32 @function_e7e4()
  store i32 %v0_f46c, i32* %r0.global-to-local, align 4
  br label %bb333

dec_label_pc_f474:                                ; preds = %dec_label_pc_f450, %dec_label_pc_f434
  %v0_f474 = load i32, i32* @r7, align 4
  %v1_f474 = load i32, i32* @r4, align 4
  %v2_f474 = add i32 %v1_f474, 12
  %v3_f474 = inttoptr i32 %v2_f474 to i32*
  store i32 %v0_f474, i32* %v3_f474, align 4
  %v0_f478 = load i32, i32* @r7, align 4
  %v1_f478 = trunc i32 %v0_f478 to i8
  %v2_f478 = load i32, i32* @r4, align 4
  %v3_f478 = add i32 %v2_f478, 284
  %v4_f478 = inttoptr i32 %v3_f478 to i8*
  store i8 %v1_f478, i8* %v4_f478, align 1
  br label %bb333

dec_label_pc_f480:                                ; preds = %bb333
  store i32 1, i32* %stack_var_-64, align 4
  %v0_f488 = load i32, i32* @r6, align 4
  %v1_f488 = load i32, i32* @r5, align 4
  %v3_f488 = icmp uge i32 %v0_f488, %v1_f488
  store i1 %v3_f488, i1* %cpsr_c.global-to-local, align 1
  %v9_f488 = icmp eq i32 %v0_f488, %v1_f488
  store i1 %v9_f488, i1* %cpsr_z.global-to-local, align 1
  %v5_f48c = icmp slt i32 %v0_f488, %v1_f488
  %storemerge106 = select i1 %v5_f48c, i32 %v1_f488, i32 %v0_f488
  %v2_f494 = ptrtoint i32* %stack_var_-76 to i32
  %v2_f498 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_f498, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f4a0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_f4a0, i32* %ip.global-to-local, align 4
  %v2_f4a4 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_f4a4, i32* %r1.global-to-local, align 4
  %v1_f4a8 = add i32 %storemerge106, 1
  store i32 %v1_f4a8, i32* %r0.global-to-local, align 4
  %v5_f4b4 = call i32 @function_11340(i32 %v1_f4a8, i32 %v2_f4a4, i32 %v2_f498, i32 0, i32 %v2_f4a0)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_f4bc = call i32 @function_113f0(i32* null)
  store i32 ptrtoint (i32* @global_var_1c1e8.123 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_f4bc, i32* @global_var_1c1e8.123, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_fe50 = ptrtoint i32* %stack_var_-41 to i32
  %v2_fe60 = ptrtoint i32* %stack_var_-73 to i32
  %v2_f63c = ptrtoint i32* %stack_var_-56 to i32
  %v2_fb34 = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_f514

dec_label_pc_f4d8:                                ; preds = %dec_label_pc_f538, %dec_label_pc_10094
  %v0_f4f0 = phi i32 [ %v3_f52c, %dec_label_pc_f538 ], [ %v0_f4d8.pre, %dec_label_pc_10094 ]
  %v3_f4d8 = udiv i32 %v0_f4f0, 32
  %v3_f4e0 = mul nuw nsw i32 %v3_f4d8, 4
  store i32 %v2_f410, i32* @lr, align 4
  %v2_f4e8 = add i32 %v3_f4e0, %v2_f410
  store i32 %v2_f4e8, i32* %r3.global-to-local, align 4
  %v1_f4ec = add i32 %v2_f4e8, -184
  %v2_f4ec = inttoptr i32 %v1_f4ec to i32*
  %v3_f4ec = load i32, i32* %v2_f4ec, align 4
  %v1_f4f0 = urem i32 %v0_f4f0, 32
  store i32 %v1_f4f0, i32* %r1.global-to-local, align 4
  %v2_f4f4 = add nsw i32 %v1_f4f0, -1
  %v3_f4f4 = shl i32 1, %v2_f4f4
  %v4_f4f4 = and i32 %v3_f4f4, %v3_f4ec
  %v5_f4f4 = icmp ne i32 %v4_f4f4, 0
  store i1 %v5_f4f4, i1* %cpsr_c.global-to-local, align 1
  %v6_f4f4 = lshr i32 %v3_f4ec, %v1_f4f0
  store i32 %v6_f4f4, i32* %r2.global-to-local, align 4
  %v1_f4f8 = urem i32 %v6_f4f4, 2
  %v2_f4f8 = icmp eq i32 %v1_f4f8, 0
  store i1 %v2_f4f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f4f8, label %dec_label_pc_f500, label %dec_label_pc_f6c8.preheader

dec_label_pc_f6c8.preheader:                      ; preds = %dec_label_pc_f4d8
  %v0_f6c8127 = load i32, i32* @r6, align 4
  %v1_f6c8128 = add i32 %v0_f6c8127, 12
  %v2_f6c8129 = inttoptr i32 %v1_f6c8128 to i32*
  %v3_f6c8130 = load i32, i32* %v2_f6c8129, align 4
  store i32 %v3_f6c8130, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6cc126132 = icmp eq i32 %v3_f6c8130, 0
  store i1 %v2_f6cc126132, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6cc126132, label %dec_label_pc_f500, label %dec_label_pc_f6d4.lr.ph

dec_label_pc_f500:                                ; preds = %dec_label_pc_f6c8.loopexit, %dec_label_pc_f6cc.backedge, %dec_label_pc_f6c8.preheader, %dec_label_pc_f4d8, %.thread240, %dec_label_pc_ffc4, %dec_label_pc_f514, %dec_label_pc_100a8, %dec_label_pc_10004
  %v3_f500 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f500, i32* %r3.global-to-local, align 4
  %v1_f504 = add i32 %v3_f500, 1
  store i32 %v1_f504, i32* %r2.global-to-local, align 4
  %v2_f508 = icmp ugt i32 %v1_f504, 254
  store i1 %v2_f508, i1* %cpsr_c.global-to-local, align 1
  %v7_f508 = icmp eq i32 %v1_f504, 255
  store i1 %v7_f508, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f504, i32* %stack_var_-52, align 4
  %v8_f510 = icmp sgt i32 %v1_f504, 255
  br i1 %v8_f510, label %dec_label_pc_ed80, label %dec_label_pc_f514

dec_label_pc_f514:                                ; preds = %dec_label_pc_f500, %dec_label_pc_f480
  %v0_f520 = phi i32 [ %v1_f504, %dec_label_pc_f500 ], [ 0, %dec_label_pc_f480 ]
  store i32 ptrtoint (i32* @global_var_1c24c.136 to i32), i32* %ip.global-to-local, align 4
  %v3_f518 = mul i32 %v0_f520, 256
  store i32 %v3_f518, i32* %r3.global-to-local, align 4
  %v2_f51c = load i32, i32* @global_var_1c24c.136, align 4
  store i32 %v2_f51c, i32* %r1.global-to-local, align 4
  %v2_f524 = mul i32 %v0_f520, 288
  store i32 %v2_f524, i32* %r2.global-to-local, align 4
  %v2_f528 = add i32 %v2_f51c, %v2_f524
  store i32 %v2_f528, i32* @r6, align 4
  %v1_f52c = add i32 %v2_f528, 4
  %v2_f52c = inttoptr i32 %v1_f52c to i32*
  %v3_f52c = load i32, i32* %v2_f52c, align 4
  store i32 %v3_f52c, i32* @r4, align 4
  %v2_f530 = icmp eq i32 %v3_f52c, -1
  store i1 %v2_f530, i1* %cpsr_c.global-to-local, align 1
  %v7_f530 = icmp eq i32 %v3_f52c, -1
  store i1 %v7_f530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f530, label %dec_label_pc_f500, label %dec_label_pc_f538

dec_label_pc_f538:                                ; preds = %dec_label_pc_f514
  %v3_f538 = udiv i32 %v3_f52c, 32
  %v3_f540 = mul nuw nsw i32 %v3_f538, 4
  store i32 %v2_f410, i32* %lr.global-to-local, align 4
  %v2_f548 = add i32 %v3_f540, %v2_f410
  store i32 %v2_f548, i32* %r3.global-to-local, align 4
  %v1_f54c = add i32 %v2_f548, -312
  %v2_f54c = inttoptr i32 %v1_f54c to i32*
  %v3_f54c = load i32, i32* %v2_f54c, align 4
  %v1_f550 = urem i32 %v3_f52c, 32
  store i32 %v1_f550, i32* %r1.global-to-local, align 4
  %v2_f554 = add nsw i32 %v1_f550, -1
  %v3_f554 = shl i32 1, %v2_f554
  %v4_f554 = and i32 %v3_f54c, %v3_f554
  %v5_f554 = icmp ne i32 %v4_f554, 0
  store i1 %v5_f554, i1* %cpsr_c.global-to-local, align 1
  %v6_f554 = lshr i32 %v3_f54c, %v1_f550
  store i32 %v6_f554, i32* %r2.global-to-local, align 4
  %v1_f558 = urem i32 %v6_f554, 2
  %v2_f558 = icmp eq i32 %v1_f558, 0
  store i1 %v2_f558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f558, label %dec_label_pc_f4d8, label %dec_label_pc_f560

dec_label_pc_f560:                                ; preds = %dec_label_pc_f538
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_fb34, i32* %r3.global-to-local, align 4
  store i32 %v2_f63c, i32* %ip.global-to-local, align 4
  store i32 %v3_f52c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_f590 = call i32 @function_118c4(i32 %v3_f52c, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f63c)
  %v3_f594 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f594, i32* %r3.global-to-local, align 4
  %v2_f598 = or i32 %v3_f594, %v6_f590
  store i32 %v2_f598, i32* %r0.global-to-local, align 4
  %v4_f598 = icmp eq i32 %v2_f598, 0
  store i1 %v4_f598, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f598, label %dec_label_pc_f5a0, label %dec_label_pc_100a8

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f560
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_f5a4 = load i32, i32* @r6, align 4
  %v2_f5a4 = add i32 %v1_f5a4, 12
  %v3_f5a4 = inttoptr i32 %v2_f5a4 to i32*
  store i32 2, i32* %v3_f5a4, align 4
  %v0_f5a8 = call i32 @function_e580()
  store i32 %v0_f5a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c1e4.129 to i32), i32* %r3.global-to-local, align 4
  %v3_f5b0 = load i8, i8* @global_var_1c1e5.130, align 1
  %v4_f5b0 = zext i8 %v3_f5b0 to i32
  store i32 %v4_f5b0, i32* %r2.global-to-local, align 4
  %v2_f5b4 = load i8, i8* bitcast (i8** @global_var_1c1e4.129 to i8*), align 4
  %v3_f5b4 = zext i8 %v2_f5b4 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_f5b8 = mul nuw nsw i32 %v4_f5b0, 256
  %v5_f5b8 = or i32 %v3_f5b4, %v4_f5b8
  store i32 %v5_f5b8, i32* %r1.global-to-local, align 4
  %v2_f5bc = call i32 @function_10ea8(i32 %v0_f5a8, i32 %v5_f5b8)
  store i32 ptrtoint (i32* @global_var_1c1b4.125 to i32), i32* %r3.global-to-local, align 4
  %v2_f5c4 = load i32, i32* @global_var_1c1b4.125, align 4
  store i32 %v2_f5c4, i32* %lr.global-to-local, align 4
  %v1_f5cc = load i32, i32* @r5, align 4
  %v9_f5cc = icmp eq i32 %v2_f5c4, %v1_f5cc
  store i1 %v9_f5cc, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f5d0 = urem i32 %v2_f5bc, 65536
  store i32 %v3_f5d0, i32* %r0.global-to-local, align 4
  %v7_f5d4 = icmp sgt i32 %v2_f5c4, %v1_f5cc
  br i1 %v7_f5d4, label %dec_label_pc_f5d8, label %dec_label_pc_10090

dec_label_pc_f5d8:                                ; preds = %dec_label_pc_f5a0
  %v2_f5dc = load i32, i32* @global_var_1c1e0.127, align 4
  store i32 %v2_f5dc, i32* %r3.global-to-local, align 4
  store i32 %v1_f5cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f5f8

dec_label_pc_f5e8:                                ; preds = %dec_label_pc_f610, %dec_label_pc_f5f8
  %v1_f5e8 = add i32 %v0_f5e8, 1
  store i32 %v1_f5e8, i32* %ip.global-to-local, align 4
  %v3_f5ec = icmp uge i32 %v1_f5e8, %v2_f5c4
  store i1 %v3_f5ec, i1* %cpsr_c.global-to-local, align 1
  %v9_f5ec = icmp eq i32 %v1_f5e8, %v2_f5c4
  store i1 %v9_f5ec, i1* %cpsr_z.global-to-local, align 1
  %v1_f5f0 = add i32 %v0_f5f0, 16
  store i32 %v1_f5f0, i32* %r3.global-to-local, align 4
  br i1 %v9_f5ec, label %dec_label_pc_10090, label %dec_label_pc_f5f8

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f5e8, %dec_label_pc_f5d8
  %v0_f5e8 = phi i32 [ %v1_f5e8, %dec_label_pc_f5e8 ], [ %v1_f5cc, %dec_label_pc_f5d8 ]
  %v0_f5f0 = phi i32 [ %v1_f5f0, %dec_label_pc_f5e8 ], [ %v2_f5dc, %dec_label_pc_f5d8 ]
  store i32 %v0_f5f0, i32* %r1.global-to-local, align 4
  %v1_f5fc = add i32 %v0_f5f0, 9
  %v2_f5fc = inttoptr i32 %v1_f5fc to i8*
  %v3_f5fc = load i8, i8* %v2_f5fc, align 1
  %v4_f5fc = zext i8 %v3_f5fc to i32
  store i32 %v4_f5fc, i32* %r2.global-to-local, align 4
  %v1_f600 = add i32 %v0_f5f0, 8
  %v2_f600 = inttoptr i32 %v1_f600 to i8*
  %v3_f600 = load i8, i8* %v2_f600, align 1
  %v4_f600 = zext i8 %v3_f600 to i32
  %v4_f604 = mul nuw nsw i32 %v4_f5fc, 256
  %v5_f604 = or i32 %v4_f600, %v4_f604
  store i32 %v5_f604, i32* %r3.global-to-local, align 4
  %v3_f608 = icmp uge i32 %v5_f604, %v3_f5d0
  store i1 %v3_f608, i1* %cpsr_c.global-to-local, align 1
  %v9_f608 = icmp eq i32 %v5_f604, %v3_f5d0
  store i1 %v9_f608, i1* %cpsr_z.global-to-local, align 1
  %v2_f60c = xor i1 %v9_f608, true
  %v3_f60c = and i1 %v3_f608, %v2_f60c
  br i1 %v3_f60c, label %dec_label_pc_f5e8, label %dec_label_pc_f610

dec_label_pc_f610:                                ; preds = %dec_label_pc_f5f8
  %v1_f610 = add i32 %v0_f5f0, 10
  %v2_f610 = inttoptr i32 %v1_f610 to i8*
  %v3_f610 = load i8, i8* %v2_f610, align 1
  %v4_f610 = zext i8 %v3_f610 to i32
  store i32 %v4_f610, i32* %r3.global-to-local, align 4
  %v1_f614 = add i32 %v0_f5f0, 11
  %v2_f614 = inttoptr i32 %v1_f614 to i8*
  %v3_f614 = load i8, i8* %v2_f614, align 1
  %v4_f614 = zext i8 %v3_f614 to i32
  store i32 %v4_f614, i32* %r2.global-to-local, align 4
  %v4_f618 = mul nuw nsw i32 %v4_f614, 256
  %v5_f618 = or i32 %v4_f618, %v4_f610
  store i32 %v5_f618, i32* %r3.global-to-local, align 4
  %v3_f61c = icmp uge i32 %v5_f618, %v3_f5d0
  store i1 %v3_f61c, i1* %cpsr_c.global-to-local, align 1
  %v9_f61c = icmp eq i32 %v5_f618, %v3_f5d0
  store i1 %v9_f61c, i1* %cpsr_z.global-to-local, align 1
  %v2_f620 = xor i1 %v3_f61c, true
  %v3_f620 = or i1 %v9_f61c, %v2_f620
  br i1 %v3_f620, label %dec_label_pc_f5e8, label %dec_label_pc_10094

dec_label_pc_f628:                                ; preds = %dec_label_pc_f890, %dec_label_pc_f864, %dec_label_pc_f8ac
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f62c = call i32 @function_10250(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f634 = call i32 @function_10250(i32 27)
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f644 = call i32 @function_1016c(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_f644, i32* @r4, align 4
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f658 = call i32 @function_1016c(i32 27, i32* nonnull %stack_var_-56)
  %v3_f65c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f658, i32* @r5, align 4
  %v0_f664 = load i32, i32* @r4, align 4
  store i32 %v0_f664, i32* %r2.global-to-local, align 4
  %v1_f668 = add i32 %v3_f65c, -1
  store i32 %v1_f668, i32* %r3.global-to-local, align 4
  %v0_f66c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f66c, i32* %r0.global-to-local, align 4
  %v0_f670 = load i32, i32* @r6, align 4
  %v1_f670 = add i32 %v0_f670, 24
  %v2_f670 = inttoptr i32 %v1_f670 to i32*
  %v3_f670 = load i32, i32* %v2_f670, align 4
  store i32 %v3_f670, i32* %r1.global-to-local, align 4
  %v4_f674 = call i32 @function_108e0(i32 %v0_f66c, i32 %v3_f670, i32 %v0_f664, i32 %v1_f668)
  store i32 %v4_f674, i32* %r0.global-to-local, align 4
  %v2_f678 = icmp eq i32 %v4_f674, -1
  store i1 %v2_f678, i1* %cpsr_c.global-to-local, align 1
  %v7_f678 = icmp eq i32 %v4_f674, -1
  store i1 %v7_f678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f678, label %dec_label_pc_f688, label %dec_label_pc_f6b0

dec_label_pc_f688:                                ; preds = %dec_label_pc_f628
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f688 = load i32, i32* %stack_var_-56, align 4
  %v0_f68c = load i32, i32* @r5, align 4
  store i32 %v0_f68c, i32* %r2.global-to-local, align 4
  %v1_f690 = add i32 %v3_f688, -1
  store i32 %v1_f690, i32* %r3.global-to-local, align 4
  %v0_f694 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f694, i32* %r0.global-to-local, align 4
  %v0_f698 = load i32, i32* @r6, align 4
  %v1_f698 = add i32 %v0_f698, 24
  %v2_f698 = inttoptr i32 %v1_f698 to i32*
  %v3_f698 = load i32, i32* %v2_f698, align 4
  store i32 %v3_f698, i32* %r1.global-to-local, align 4
  %v4_f69c = call i32 @function_108e0(i32 %v0_f694, i32 %v3_f698, i32 %v0_f68c, i32 %v1_f690)
  store i32 %v4_f69c, i32* %r0.global-to-local, align 4
  %v2_f6a0 = icmp eq i32 %v4_f69c, -1
  store i1 %v2_f6a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f6a0 = icmp eq i32 %v4_f69c, -1
  store i1 %v7_f6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6a0, label %dec_label_pc_100c4, label %dec_label_pc_f6b0

dec_label_pc_f6b0:                                ; preds = %dec_label_pc_f688, %dec_label_pc_f628
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f6b4 = call i32 @function_10198(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f6bc = call i32 @function_10198(i32 27)
  store i32 %v1_f6bc, i32* %r0.global-to-local, align 4
  %v0_f6c0 = load i32, i32* @r7, align 4
  %v3_f6c0 = icmp eq i32 %v0_f6c0, -1
  store i1 %v3_f6c0, i1* %cpsr_c.global-to-local, align 1
  %v8_f6c0 = icmp eq i32 %v0_f6c0, -1
  store i1 %v8_f6c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f6c0, label %dec_label_pc_f6c8.loopexit, label %dec_label_pc_f8c8

dec_label_pc_f6c8.loopexit:                       ; preds = %dec_label_pc_f854, %dec_label_pc_ff00, %dec_label_pc_f748, %dec_label_pc_f6b0, %dec_label_pc_feec
  %v0_f6c8 = load i32, i32* @r6, align 4
  %v1_f6c8 = add i32 %v0_f6c8, 12
  %v2_f6c8 = inttoptr i32 %v1_f6c8 to i32*
  %v3_f6c8 = load i32, i32* %v2_f6c8, align 4
  store i32 %v3_f6c8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6cc126 = icmp eq i32 %v3_f6c8, 0
  store i1 %v2_f6cc126, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6cc126, label %dec_label_pc_f500, label %dec_label_pc_f6d4.lr.ph

dec_label_pc_f6d4.lr.ph:                          ; preds = %dec_label_pc_f6c8.preheader, %dec_label_pc_f6c8.loopexit
  %v0_f6d4159 = phi i32 [ %v0_f6c8, %dec_label_pc_f6c8.loopexit ], [ %v0_f6c8127, %dec_label_pc_f6c8.preheader ]
  br label %dec_label_pc_f6d4

dec_label_pc_f6d4:                                ; preds = %dec_label_pc_f6cc.backedge.thread, %dec_label_pc_f6cc.backedge, %dec_label_pc_f6cc.backedge.thread473, %dec_label_pc_f6d4.lr.ph
  %v0_1003c = phi i32 [ %v0_f6d4159, %dec_label_pc_f6d4.lr.ph ], [ %v0_f6d4156, %dec_label_pc_f6cc.backedge ], [ %v0_f748, %dec_label_pc_f6cc.backedge.thread ], [ %v0_f748, %dec_label_pc_f6cc.backedge.thread473 ]
  %v1_f6d4 = add i32 %v0_1003c, 24
  %v2_f6d4 = inttoptr i32 %v1_f6d4 to i32*
  %v3_f6d4 = load i32, i32* %v2_f6d4, align 4
  store i32 %v3_f6d4, i32* %r3.global-to-local, align 4
  %v2_f6d8 = icmp ugt i32 %v3_f6d4, 255
  store i1 %v2_f6d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6d8 = icmp eq i32 %v3_f6d4, 256
  store i1 %v7_f6d8, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_1003c, 28
  store i32 %.pre, i32* %r8.global-to-local, align 4
  br i1 %v7_f6d8, label %dec_label_pc_1003c, label %dec_label_pc_f6e4

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f6d4, %dec_label_pc_1003c
  store i32 0, i32* @r5, align 4
  %v1_f6e8 = load i32, i32* @sb, align 4
  %v2_f6e8 = inttoptr i32 %v1_f6e8 to i32*
  store i32 0, i32* %v2_f6e8, align 4
  %v0_f6ec = load i32, i32* @r6, align 4
  %v1_f6ec = add i32 %v0_f6ec, 24
  %v2_f6ec = inttoptr i32 %v1_f6ec to i32*
  %v3_f6ec = load i32, i32* %v2_f6ec, align 4
  store i32 %v3_f6ec, i32* %r2.global-to-local, align 4
  %v0_f6f0 = load i32, i32* %r8.global-to-local, align 4
  %v2_f6f0 = add i32 %v0_f6f0, %v3_f6ec
  store i32 %v2_f6f0, i32* @r4, align 4
  %v1_f6f4 = add i32 %v0_f6ec, 4
  %v2_f6f4 = inttoptr i32 %v1_f6f4 to i32*
  %v3_f6f4 = load i32, i32* %v2_f6f4, align 4
  store i32 %v3_f6f4, i32* %r0.global-to-local, align 4
  %v1_f6f8 = sub i32 256, %v3_f6ec
  store i32 %v1_f6f8, i32* %r2.global-to-local, align 4
  store i32 %v2_f6f0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f704 = inttoptr i32 %v2_f6f0 to i32*
  %v5_f704 = call i32 @function_118f4(i32 %v3_f6f4, i32* %v4_f704, i32 %v1_f6f8, i32 16384)
  store i32 %v5_f704, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f708 = icmp eq i32 %v5_f704, 0
  store i1 %v2_f708, i1* %cpsr_z.global-to-local, align 1
  %tmp336 = icmp slt i32 %v5_f704, 1
  br i1 %tmp336, label %dec_label_pc_ffb8, label %dec_label_pc_f710

dec_label_pc_f710:                                ; preds = %dec_label_pc_f6e4
  %v0_f710 = load i32, i32* @r5, align 4
  store i32 %v0_f710, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f718

dec_label_pc_f718:                                ; preds = %bb338, %dec_label_pc_f710
  %v3_f720 = phi i32 [ %v1_f724, %bb338 ], [ %v0_f710, %dec_label_pc_f710 ]
  %v1_f718 = load i32, i32* @r4, align 4
  %v2_f718 = add i32 %v1_f718, %v3_f720
  %v3_f718 = inttoptr i32 %v2_f718 to i8*
  %v4_f718 = load i8, i8* %v3_f718, align 1
  %v6_f718 = zext i8 %v4_f718 to i32
  store i32 %v6_f718, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f71c = icmp eq i8 %v4_f718, 0
  store i1 %v2_f71c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f71c, label %bb337, label %bb338

bb337:                                            ; preds = %dec_label_pc_f718
  %v1_f720 = load i32, i32* %r1.global-to-local, align 4
  %v2_f720 = trunc i32 %v1_f720 to i8
  store i8 %v2_f720, i8* %v3_f718, align 1
  %v0_f724.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb338

bb338:                                            ; preds = %dec_label_pc_f718, %bb337
  %v0_f724 = phi i32 [ %v3_f720, %dec_label_pc_f718 ], [ %v0_f724.pre, %bb337 ]
  %v1_f724 = add i32 %v0_f724, 1
  store i32 %v1_f724, i32* %r2.global-to-local, align 4
  %v3_f728 = icmp uge i32 %v5_f704, %v1_f724
  store i1 %v3_f728, i1* %cpsr_c.global-to-local, align 1
  %v9_f728 = icmp eq i32 %v5_f704, %v1_f724
  store i1 %v9_f728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f728, label %dec_label_pc_f730, label %dec_label_pc_f718

dec_label_pc_f730:                                ; preds = %bb338, %dec_label_pc_ffbc
  store i32 ptrtoint (i32* @global_var_1c1e8.123 to i32), i32* %r1.global-to-local, align 4
  %v0_f734 = load i32, i32* @r6, align 4
  %v1_f734 = add i32 %v0_f734, 24
  %v2_f734 = inttoptr i32 %v1_f734 to i32*
  %v3_f734 = load i32, i32* %v2_f734, align 4
  %v2_f738 = load i32, i32* @global_var_1c1e8.123, align 4
  store i32 %v2_f738, i32* %r3.global-to-local, align 4
  %v2_f73c = add i32 %v3_f734, %v5_f704
  store i32 %v2_f73c, i32* %ip.global-to-local, align 4
  store i32 %v2_f73c, i32* %v2_f734, align 4
  %v0_f744 = load i32, i32* %r3.global-to-local, align 4
  %v1_f744 = load i32, i32* @r6, align 4
  %v2_f744 = add i32 %v1_f744, 8
  %v3_f744 = inttoptr i32 %v2_f744 to i32*
  store i32 %v0_f744, i32* %v3_f744, align 4
  br label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_fc04, %dec_label_pc_f730
  %v0_f748 = load i32, i32* @r6, align 4
  %v1_f748 = add i32 %v0_f748, 12
  %v2_f748 = inttoptr i32 %v1_f748 to i32*
  %v3_f748 = load i32, i32* %v2_f748, align 4
  store i32 %v3_f748, i32* %r2.global-to-local, align 4
  %v1_f74c = add i32 %v3_f748, -2
  store i32 %v1_f74c, i32* %r3.global-to-local, align 4
  %v7_f750 = icmp eq i32 %v1_f74c, 8
  store i1 %v7_f750, i1* %cpsr_z.global-to-local, align 1
  %v5_f754 = and i32 %v1_f74c, 1073741824
  %v6_f754 = icmp ne i32 %v5_f754, 0
  store i1 %v6_f754, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f748, label %dec_label_pc_f6c8.loopexit [
    i32 2, label %dec_label_pc_f780
    i32 3, label %dec_label_pc_f864
    i32 4, label %dec_label_pc_f90c
    i32 5, label %dec_label_pc_f9a4
    i32 6, label %dec_label_pc_facc
    i32 7, label %dec_label_pc_fd90
    i32 8, label %dec_label_pc_fc28
    i32 9, label %dec_label_pc_fcdc
    i32 10, label %dec_label_pc_fb80
  ]

dec_label_pc_f780:                                ; preds = %dec_label_pc_f748
  %v1_f780 = add i32 %v0_f748, 24
  %v2_f780 = inttoptr i32 %v1_f780 to i32*
  %v3_f780 = load i32, i32* %v2_f780, align 4
  store i32 %v3_f780, i32* %ip.global-to-local, align 4
  %v0_f784 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f784, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_f78c = add i32 %v0_f748, 29
  store i32 %v1_f78c, i32* @r4, align 4
  store i32 -4, i32* %sl.global-to-local, align 4
  %v3_f794117 = icmp eq i32 %v3_f780, 0
  store i1 %v3_f794117, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f794117, i1* %cpsr_z.global-to-local, align 1
  %v6_f798124 = icmp sgt i32 %v3_f780, 0
  br i1 %v6_f798124, label %dec_label_pc_f79c.preheader, label %dec_label_pc_f844

dec_label_pc_f794.loopexit:                       ; preds = %dec_label_pc_f7b4
  %v2_f7bc = add i32 %v1_f7bc, 2
  store i32 %v2_f7bc, i32* @r5, align 4
  %v2_f7c0 = add i32 %v1_f7c0, 2
  store i32 %v2_f7c0, i32* @r4, align 4
  %v2_f7c4 = add i32 %v1_f7c4, 2
  store i32 %v2_f7c4, i32* @r7, align 4
  %v3_f794 = icmp uge i32 %v2_f7c4, %v1_f794
  store i1 %v3_f794, i1* %cpsr_c.global-to-local, align 1
  %v9_f794 = icmp eq i32 %v2_f7c4, %v1_f794
  store i1 %v9_f794, i1* %cpsr_z.global-to-local, align 1
  %v6_f798 = icmp slt i32 %v2_f7c4, %v1_f794
  br i1 %v6_f798, label %dec_label_pc_f79c.preheader, label %dec_label_pc_f844

dec_label_pc_f79c.preheader:                      ; preds = %dec_label_pc_f780, %dec_label_pc_f794.loopexit
  %v6_f84c198 = phi i32 [ %v6_f84c199, %dec_label_pc_f794.loopexit ], [ %v0_f748, %dec_label_pc_f780 ]
  %v1_f7c4187 = phi i32 [ %v2_f7c4, %dec_label_pc_f794.loopexit ], [ 0, %dec_label_pc_f780 ]
  %v1_f7bc185 = phi i32 [ %v2_f7bc, %dec_label_pc_f794.loopexit ], [ %v0_f784, %dec_label_pc_f780 ]
  %v1_f7a8183 = phi i32 [ %v1_f794, %dec_label_pc_f794.loopexit ], [ %v3_f780, %dec_label_pc_f780 ]
  %v0_f79c181 = phi i32 [ %v2_f7c0, %dec_label_pc_f794.loopexit ], [ %v1_f78c, %dec_label_pc_f780 ]
  br label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f79c.preheader, %dec_label_pc_f824
  %v6_f84c199 = phi i32 [ %v6_f84c198, %dec_label_pc_f79c.preheader ], [ %v0_f82c, %dec_label_pc_f824 ]
  %v1_f7c4 = phi i32 [ %v1_f7c4187, %dec_label_pc_f79c.preheader ], [ %v1_f830, %dec_label_pc_f824 ]
  %v1_f7bc = phi i32 [ %v1_f7bc185, %dec_label_pc_f79c.preheader ], [ %v1_f838, %dec_label_pc_f824 ]
  %v1_f794 = phi i32 [ %v1_f7a8183, %dec_label_pc_f79c.preheader ], [ %v3_f82c, %dec_label_pc_f824 ]
  %v1_f7c0 = phi i32 [ %v0_f79c181, %dec_label_pc_f79c.preheader ], [ %v1_f83c, %dec_label_pc_f824 ]
  %v1_f79c = add i32 %v1_f7c0, -1
  %v2_f79c = inttoptr i32 %v1_f79c to i8*
  %v3_f79c = load i8, i8* %v2_f79c, align 1
  %v4_f79c = zext i8 %v3_f79c to i32
  store i32 %v4_f79c, i32* %r3.global-to-local, align 4
  %v2_f7a0 = icmp eq i8 %v3_f79c, -1
  store i1 %v2_f7a0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7a0, label %dec_label_pc_f7a8, label %dec_label_pc_f844

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f79c
  %v0_f7a8 = load i32, i32* %r8.global-to-local, align 4
  %v2_f7a8 = add i32 %v0_f7a8, %v1_f794
  store i32 %v2_f7a8, i32* %r2.global-to-local, align 4
  %v3_f7ac = icmp uge i32 %v2_f7a8, %v1_f7c0
  store i1 %v3_f7ac, i1* %cpsr_c.global-to-local, align 1
  %v9_f7ac = icmp eq i32 %v2_f7a8, %v1_f7c0
  store i1 %v9_f7ac, i1* %cpsr_z.global-to-local, align 1
  %v2_f7b0 = xor i1 %v3_f7ac, true
  %v3_f7b0 = or i1 %v9_f7ac, %v2_f7b0
  br i1 %v3_f7b0, label %dec_label_pc_f844, label %dec_label_pc_f7b4

dec_label_pc_f7b4:                                ; preds = %dec_label_pc_f7a8
  %v1_f7b4 = inttoptr i32 %v1_f7c0 to i8*
  %v2_f7b4 = load i8, i8* %v1_f7b4, align 1
  %v3_f7b4 = zext i8 %v2_f7b4 to i32
  store i32 %v3_f7b4, i32* %r3.global-to-local, align 4
  %v2_f7b8 = icmp eq i8 %v2_f7b4, -1
  store i1 %v2_f7b8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7b8, label %dec_label_pc_f794.loopexit, label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f7b4
  %v2_f7cc = icmp ugt i8 %v2_f7b4, -4
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i8 %v2_f7b4, -3
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7cc, label %dec_label_pc_fe44, label %dec_label_pc_f7d4

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f7cc
  %v1_f7d4 = add i32 %v1_f7bc, 2
  store i32 %v1_f7d4, i32* %r3.global-to-local, align 4
  %v3_f7d8 = icmp uge i32 %v2_f7a8, %v1_f7d4
  store i1 %v3_f7d8, i1* %cpsr_c.global-to-local, align 1
  %v9_f7d8 = icmp eq i32 %v2_f7a8, %v1_f7d4
  store i1 %v9_f7d8, i1* %cpsr_z.global-to-local, align 1
  %v2_f7dc = xor i1 %v3_f7d8, true
  %v3_f7dc = or i1 %v9_f7d8, %v2_f7dc
  br i1 %v3_f7dc, label %dec_label_pc_f844, label %dec_label_pc_f7e0

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_fe9c, %bb361, %bb360, %dec_label_pc_f7d4
  %v0_f7e0 = load i32, i32* @r4, align 4
  %v1_f7e0 = inttoptr i32 %v0_f7e0 to i8*
  %v2_f7e0 = load i8, i8* %v1_f7e0, align 1
  %v3_f7e0 = zext i8 %v2_f7e0 to i32
  store i32 %v3_f7e0, i32* %r3.global-to-local, align 4
  %v2_f7e4 = icmp ugt i8 %v2_f7e0, -4
  store i1 %v2_f7e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e4 = icmp eq i8 %v2_f7e0, -3
  store i1 %v7_f7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7e4, label %bb339, label %dec_label_pc_f7f0

bb339:                                            ; preds = %dec_label_pc_f7e0
  %v1_f7e8 = load i32, i32* %sl.global-to-local, align 4
  %v2_f7e8 = trunc i32 %v1_f7e8 to i8
  store i8 %v2_f7e8, i8* %v1_f7e0, align 1
  %v0_f7ec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f7ec.pr, label %.thread86, label %.dec_label_pc_f7f0_crit_edge

.dec_label_pc_f7f0_crit_edge:                     ; preds = %bb339
  %v0_f7f0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7f0

dec_label_pc_f7f0:                                ; preds = %.dec_label_pc_f7f0_crit_edge, %dec_label_pc_f7e0
  %v0_f7f0 = phi i32 [ %v0_f7f0.pre, %.dec_label_pc_f7f0_crit_edge ], [ %v3_f7e0, %dec_label_pc_f7e0 ]
  %v2_f7f0 = icmp ugt i32 %v0_f7f0, 250
  store i1 %v2_f7f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7f0 = icmp eq i32 %v0_f7f0, 251
  store i1 %v7_f7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f0, label %bb340, label %.thread86

bb340:                                            ; preds = %dec_label_pc_f7f0
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f7f8 = load i32, i32* @r4, align 4
  %v4_f7f8 = inttoptr i32 %v3_f7f8 to i8*
  store i8 -3, i8* %v4_f7f8, align 1
  br label %.thread86

.thread86:                                        ; preds = %dec_label_pc_f7f0, %bb339, %bb340
  %v0_f7fc = load i32, i32* @r4, align 4
  %v1_f7fc = add i32 %v0_f7fc, 1
  %v2_f7fc = inttoptr i32 %v1_f7fc to i8*
  %v3_f7fc = load i8, i8* %v2_f7fc, align 1
  %v4_f7fc = zext i8 %v3_f7fc to i32
  store i32 %v4_f7fc, i32* %r3.global-to-local, align 4
  %v2_f800 = icmp ugt i8 %v3_f7fc, -4
  store i1 %v2_f800, i1* %cpsr_c.global-to-local, align 1
  %v7_f800 = icmp eq i8 %v3_f7fc, -3
  store i1 %v7_f800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f800, label %bb341, label %dec_label_pc_f80c

bb341:                                            ; preds = %.thread86
  %v1_f804 = load i32, i32* %sl.global-to-local, align 4
  %v2_f804 = trunc i32 %v1_f804 to i8
  store i8 %v2_f804, i8* %v2_f7fc, align 1
  %v0_f808.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f808.pr, label %.thread88, label %.dec_label_pc_f80c_crit_edge

.dec_label_pc_f80c_crit_edge:                     ; preds = %bb341
  %v0_f80c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f80c

dec_label_pc_f80c:                                ; preds = %.dec_label_pc_f80c_crit_edge, %.thread86
  %v0_f80c = phi i32 [ %v0_f80c.pre, %.dec_label_pc_f80c_crit_edge ], [ %v4_f7fc, %.thread86 ]
  %v2_f80c = icmp ugt i32 %v0_f80c, 250
  store i1 %v2_f80c, i1* %cpsr_c.global-to-local, align 1
  %v7_f80c = icmp eq i32 %v0_f80c, 251
  store i1 %v7_f80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f80c, label %bb342, label %.thread88

bb342:                                            ; preds = %dec_label_pc_f80c
  store i32 -3, i32* %ip.global-to-local, align 4
  %v3_f814 = load i32, i32* @r4, align 4
  %v4_f814 = add i32 %v3_f814, 1
  %v5_f814 = inttoptr i32 %v4_f814 to i8*
  store i8 -3, i8* %v5_f814, align 1
  br label %.thread88

.thread88:                                        ; preds = %dec_label_pc_f80c, %bb341, %bb342
  %v0_f818 = load i32, i32* @r6, align 4
  %v1_f818 = add i32 %v0_f818, 4
  %v2_f818 = inttoptr i32 %v1_f818 to i32*
  %v3_f818 = load i32, i32* %v2_f818, align 4
  store i32 %v3_f818, i32* %r0.global-to-local, align 4
  %v0_f81c = load i32, i32* @r5, align 4
  br label %dec_label_pc_f824

dec_label_pc_f824:                                ; preds = %dec_label_pc_10010, %.thread88
  %v0_f828 = phi i32 [ %v3_1002c, %dec_label_pc_10010 ], [ %v3_f818, %.thread88 ]
  %storemerge6 = phi i32 [ %v2_fe60, %dec_label_pc_10010 ], [ %v0_f81c, %.thread88 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10010 ], [ 3, %.thread88 ]
  store i32 %storemerge6, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f828 = inttoptr i32 %storemerge6 to i32*
  %v5_f828 = call i32 @function_11954(i32 %v0_f828, i32* %v4_f828, i32 %storemerge, i32 16384)
  store i32 %v5_f828, i32* %r0.global-to-local, align 4
  %v0_f82c = load i32, i32* @r6, align 4
  %v1_f82c = add i32 %v0_f82c, 24
  %v2_f82c = inttoptr i32 %v1_f82c to i32*
  %v3_f82c = load i32, i32* %v2_f82c, align 4
  store i32 %v3_f82c, i32* %ip.global-to-local, align 4
  %v0_f830 = load i32, i32* @r7, align 4
  %v1_f830 = add i32 %v0_f830, 3
  store i32 %v1_f830, i32* @r7, align 4
  %v3_f834 = icmp uge i32 %v1_f830, %v3_f82c
  store i1 %v3_f834, i1* %cpsr_c.global-to-local, align 1
  %v9_f834 = icmp eq i32 %v1_f830, %v3_f82c
  store i1 %v9_f834, i1* %cpsr_z.global-to-local, align 1
  %v0_f838 = load i32, i32* @r5, align 4
  %v1_f838 = add i32 %v0_f838, 3
  store i32 %v1_f838, i32* @r5, align 4
  %v0_f83c = load i32, i32* @r4, align 4
  %v1_f83c = add i32 %v0_f83c, 3
  store i32 %v1_f83c, i32* @r4, align 4
  %v5_f840 = icmp slt i32 %v1_f830, %v3_f82c
  br i1 %v5_f840, label %dec_label_pc_f79c, label %dec_label_pc_f844

dec_label_pc_f844:                                ; preds = %dec_label_pc_f794.loopexit, %dec_label_pc_f79c, %dec_label_pc_f824, %dec_label_pc_f7d4, %dec_label_pc_f7a8, %dec_label_pc_f780, %dec_label_pc_fe44.dec_label_pc_f844.loopexit_crit_edge
  %v6_f84c = phi i32 [ %v0_fe6c, %dec_label_pc_fe44.dec_label_pc_f844.loopexit_crit_edge ], [ %v0_f748, %dec_label_pc_f780 ], [ %v6_f84c199, %dec_label_pc_f79c ], [ %v0_f82c, %dec_label_pc_f824 ], [ %v6_f84c199, %dec_label_pc_f7d4 ], [ %v6_f84c199, %dec_label_pc_f7a8 ], [ %v6_f84c199, %dec_label_pc_f794.loopexit ]
  %v0_f854.pre = phi i32 [ %v0_f844.pre.pre, %dec_label_pc_fe44.dec_label_pc_f844.loopexit_crit_edge ], [ 0, %dec_label_pc_f780 ], [ %v1_f7c4, %dec_label_pc_f79c ], [ %v1_f830, %dec_label_pc_f824 ], [ %v1_f7c4, %dec_label_pc_f7d4 ], [ %v1_f7c4, %dec_label_pc_f7a8 ], [ %v2_f7c4, %dec_label_pc_f794.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f844 = icmp eq i32 %v0_f854.pre, 0
  store i1 %v2_f844, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v0_f854.pre, 1
  br i1 %tmp343, label %dec_label_pc_f854, label %.thread235

.thread235:                                       ; preds = %dec_label_pc_f844
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_f84c = add i32 %v6_f84c, 12
  %v8_f84c = inttoptr i32 %v7_f84c to i32*
  store i32 3, i32* %v8_f84c, align 4
  br label %dec_label_pc_fc04

dec_label_pc_f854:                                ; preds = %dec_label_pc_f844, %dec_label_pc_fde4, %dec_label_pc_fd30, %dec_label_pc_fc7c, %dec_label_pc_ff4c, %dec_label_pc_fb20, %dec_label_pc_f9f8, %dec_label_pc_f960, %dec_label_pc_f8c8
  %v0_f854 = phi i32 [ %v1_fdd8, %dec_label_pc_fde4 ], [ %v1_fd24, %dec_label_pc_fd30 ], [ %v1_fc70, %dec_label_pc_fc7c ], [ %v0_ff44, %dec_label_pc_ff4c ], [ %v1_fb14, %dec_label_pc_fb20 ], [ %v1_f9ec, %dec_label_pc_f9f8 ], [ %v0_f960, %dec_label_pc_f960 ], [ %v0_f8c8, %dec_label_pc_f8c8 ], [ %v0_f854.pre, %dec_label_pc_f844 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f854 = icmp eq i32 %v0_f854, 0
  store i1 %v2_f854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f854, label %dec_label_pc_f6c8.loopexit, label %dec_label_pc_f85c

dec_label_pc_f85c:                                ; preds = %dec_label_pc_f854
  %v0_f85c = load i32, i32* @r6, align 4
  %v1_f85c = add i32 %v0_f85c, 24
  %v2_f85c = inttoptr i32 %v1_f85c to i32*
  %v3_f85c = load i32, i32* %v2_f85c, align 4
  store i32 %v3_f85c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fc04

dec_label_pc_f864:                                ; preds = %dec_label_pc_f748
  %v1_f864 = add i32 %v0_f748, 24
  %v2_f864 = inttoptr i32 %v1_f864 to i32*
  %v3_f864 = load i32, i32* %v2_f864, align 4
  store i32 %v3_f864, i32* %r3.global-to-local, align 4
  %v1_f868 = add i32 %v3_f864, -1
  store i32 %v1_f868, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f86c = icmp eq i32 %v1_f868, 0
  store i1 %v2_f86c, i1* %cpsr_z.global-to-local, align 1
  %v5_f870 = icmp sgt i32 %v1_f868, 0
  br i1 %v5_f870, label %dec_label_pc_f898, label %dec_label_pc_f628

dec_label_pc_f878:                                ; preds = %bb344
  %v2_f878 = icmp ugt i8 %v3_f89c, 35
  store i1 %v2_f878, i1* %cpsr_c.global-to-local, align 1
  %v7_f878 = icmp eq i8 %v3_f89c, 36
  store i1 %v7_f878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f878, label %dec_label_pc_f8ac, label %dec_label_pc_f880

dec_label_pc_f880:                                ; preds = %dec_label_pc_f878
  %v2_f880 = icmp ugt i8 %v3_f89c, 34
  store i1 %v2_f880, i1* %cpsr_c.global-to-local, align 1
  %v7_f880 = icmp eq i8 %v3_f89c, 35
  store i1 %v7_f880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f880, label %dec_label_pc_f8ac, label %dec_label_pc_f888

dec_label_pc_f888:                                ; preds = %dec_label_pc_f880
  %v2_f888 = icmp ugt i8 %v3_f89c, 36
  store i1 %v2_f888, i1* %cpsr_c.global-to-local, align 1
  %v7_f888 = icmp eq i8 %v3_f89c, 37
  store i1 %v7_f888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f888, label %dec_label_pc_f8ac, label %dec_label_pc_f890

dec_label_pc_f890:                                ; preds = %dec_label_pc_f888
  %v1_f890 = add i32 %v0_f8ac, -1
  store i32 %v1_f890, i32* %r0.global-to-local, align 4
  %v2_f890 = icmp ne i32 %v0_f8ac, 0
  store i1 %v2_f890, i1* %cpsr_c.global-to-local, align 1
  %v7_f890 = icmp eq i32 %v0_f8ac, 1
  store i1 %v7_f890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f890, label %dec_label_pc_f628, label %dec_label_pc_f898

dec_label_pc_f898:                                ; preds = %dec_label_pc_f864, %dec_label_pc_f890
  %v0_f8ac = phi i32 [ %v1_f890, %dec_label_pc_f890 ], [ %v1_f868, %dec_label_pc_f864 ]
  %v2_f898 = add i32 %v0_f8ac, %v0_f748
  store i32 %v2_f898, i32* %r3.global-to-local, align 4
  %v1_f89c = add i32 %v2_f898, 28
  %v2_f89c = inttoptr i32 %v1_f89c to i8*
  %v3_f89c = load i8, i8* %v2_f89c, align 1
  %v4_f89c = zext i8 %v3_f89c to i32
  store i32 %v4_f89c, i32* %r3.global-to-local, align 4
  %v2_f8a0 = icmp ugt i8 %v3_f89c, 61
  store i1 %v2_f8a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8a0 = icmp eq i8 %v3_f89c, 62
  store i1 %v7_f8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8a0, label %dec_label_pc_f8ac, label %bb344

bb344:                                            ; preds = %dec_label_pc_f898
  %v3_f8a4 = icmp ugt i8 %v3_f89c, 57
  store i1 %v3_f8a4, i1* %cpsr_c.global-to-local, align 1
  %v8_f8a4 = icmp eq i8 %v3_f89c, 58
  store i1 %v8_f8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f8a4, label %dec_label_pc_f8ac, label %dec_label_pc_f878

dec_label_pc_f8ac:                                ; preds = %dec_label_pc_f898, %bb344, %dec_label_pc_f888, %dec_label_pc_f880, %dec_label_pc_f878
  %v1_f8ac = add i32 %v0_f8ac, 1
  store i32 %v1_f8ac, i32* @r7, align 4
  %v2_f8b0 = icmp eq i32 %v1_f8ac, -1
  store i1 %v2_f8b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8b0 = icmp eq i32 %v0_f8ac, -2
  store i1 %v7_f8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8b0, label %dec_label_pc_f628, label %dec_label_pc_f8b8

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f8ac
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f8bc = call i32 @function_10198(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f8c4 = call i32 @function_10198(i32 27)
  store i32 %v1_f8c4, i32* %r0.global-to-local, align 4
  %v0_f8c8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f8c8

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f6b0, %dec_label_pc_f8b8
  %v0_f8c8 = phi i32 [ %v0_f6c0, %dec_label_pc_f6b0 ], [ %v0_f8c8.pre, %dec_label_pc_f8b8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8c8 = icmp eq i32 %v0_f8c8, 0
  store i1 %v2_f8c8, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v0_f8c8, 1
  br i1 %tmp345, label %dec_label_pc_f854, label %dec_label_pc_f8d0

dec_label_pc_f8d0:                                ; preds = %dec_label_pc_f8c8
  %v0_f8d0 = load i32, i32* @r6, align 4
  %v1_f8d0 = inttoptr i32 %v0_f8d0 to i32*
  %v2_f8d0 = load i32, i32* %v1_f8d0, align 4
  store i32 %v2_f8d0, i32* %r3.global-to-local, align 4
  %v1_f8d4 = add i32 %v0_f8d0, 4
  %v2_f8d4 = inttoptr i32 %v1_f8d4 to i32*
  %v3_f8d4 = load i32, i32* %v2_f8d4, align 4
  store i32 %v3_f8d4, i32* %r0.global-to-local, align 4
  %v1_f8d8 = add i32 %v2_f8d0, 12
  %v2_f8d8 = inttoptr i32 %v1_f8d8 to i8*
  %v3_f8d8 = load i8, i8* %v2_f8d8, align 1
  %v4_f8d8 = zext i8 %v3_f8d8 to i32
  store i32 %v4_f8d8, i32* %r2.global-to-local, align 4
  %v1_f8dc = inttoptr i32 %v2_f8d0 to i32*
  %v2_f8dc = load i32, i32* %v1_f8dc, align 4
  store i32 %v2_f8dc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8e4 = inttoptr i32 %v2_f8dc to i32*
  %v5_f8e4 = call i32 @function_11954(i32 %v3_f8d4, i32* %v4_f8e4, i32 %v4_f8d8, i32 16384)
  store i32 %v5_f8e4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f8ec = load i32, i32* @r6, align 4
  %v1_f8ec = add i32 %v0_f8ec, 4
  %v2_f8ec = inttoptr i32 %v1_f8ec to i32*
  %v3_f8ec = load i32, i32* %v2_f8ec, align 4
  store i32 %v3_f8ec, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13a14.198 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f8f8 = call i32 @function_11954(i32 %v3_f8ec, i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), i32 2, i32 16384)
  store i32 %v5_f8f8, i32* %r0.global-to-local, align 4
  %v0_f8fc = load i32, i32* @r6, align 4
  %v1_f8fc = add i32 %v0_f8fc, 24
  %v2_f8fc = inttoptr i32 %v1_f8fc to i32*
  %v3_f8fc = load i32, i32* %v2_f8fc, align 4
  store i32 %v3_f8fc, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_f904 = add i32 %v0_f8fc, 12
  %v3_f904 = inttoptr i32 %v2_f904 to i32*
  store i32 4, i32* %v3_f904, align 4
  br label %dec_label_pc_fc04

dec_label_pc_f90c:                                ; preds = %dec_label_pc_f748
  %v1_f90c = add i32 %v0_f748, 24
  %v2_f90c = inttoptr i32 %v1_f90c to i32*
  %v3_f90c = load i32, i32* %v2_f90c, align 4
  store i32 %v3_f90c, i32* %r3.global-to-local, align 4
  %v1_f910 = add i32 %v3_f90c, -1
  store i32 %v1_f910, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f914 = icmp eq i32 %v1_f910, 0
  store i1 %v2_f914, i1* %cpsr_z.global-to-local, align 1
  %v5_f918 = icmp sgt i32 %v1_f910, 0
  br i1 %v5_f918, label %dec_label_pc_f938, label %dec_label_pc_feac

dec_label_pc_f920:                                ; preds = %bb346
  %v2_f920 = icmp ugt i8 %v3_f93c, 35
  store i1 %v2_f920, i1* %cpsr_c.global-to-local, align 1
  %v7_f920 = icmp eq i8 %v3_f93c, 36
  store i1 %v7_f920, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f920, label %dec_label_pc_f94c, label %dec_label_pc_f928

dec_label_pc_f928:                                ; preds = %dec_label_pc_f920
  %v2_f928 = icmp ugt i8 %v3_f93c, 34
  store i1 %v2_f928, i1* %cpsr_c.global-to-local, align 1
  %v7_f928 = icmp eq i8 %v3_f93c, 35
  store i1 %v7_f928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f928, label %dec_label_pc_f94c, label %dec_label_pc_f930

dec_label_pc_f930:                                ; preds = %dec_label_pc_f928
  %v1_f930 = add i32 %v0_f94c, -1
  store i32 %v1_f930, i32* %r0.global-to-local, align 4
  %v2_f930 = icmp ne i32 %v0_f94c, 0
  store i1 %v2_f930, i1* %cpsr_c.global-to-local, align 1
  %v7_f930 = icmp eq i32 %v0_f94c, 1
  store i1 %v7_f930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f930, label %dec_label_pc_feac, label %dec_label_pc_f938

dec_label_pc_f938:                                ; preds = %dec_label_pc_f90c, %dec_label_pc_f930
  %v0_f94c = phi i32 [ %v1_f930, %dec_label_pc_f930 ], [ %v1_f910, %dec_label_pc_f90c ]
  %v2_f938 = add i32 %v0_f94c, %v0_f748
  store i32 %v2_f938, i32* %r3.global-to-local, align 4
  %v1_f93c = add i32 %v2_f938, 28
  %v2_f93c = inttoptr i32 %v1_f93c to i8*
  %v3_f93c = load i8, i8* %v2_f93c, align 1
  %v4_f93c = zext i8 %v3_f93c to i32
  store i32 %v4_f93c, i32* %r3.global-to-local, align 4
  %v2_f940 = icmp ugt i8 %v3_f93c, 61
  store i1 %v2_f940, i1* %cpsr_c.global-to-local, align 1
  %v7_f940 = icmp eq i8 %v3_f93c, 62
  store i1 %v7_f940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f940, label %dec_label_pc_f94c, label %bb346

bb346:                                            ; preds = %dec_label_pc_f938
  %v3_f944 = icmp ugt i8 %v3_f93c, 57
  store i1 %v3_f944, i1* %cpsr_c.global-to-local, align 1
  %v8_f944 = icmp eq i8 %v3_f93c, 58
  store i1 %v8_f944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f944, label %dec_label_pc_f94c, label %dec_label_pc_f920

dec_label_pc_f94c:                                ; preds = %dec_label_pc_f938, %bb346, %dec_label_pc_f928, %dec_label_pc_f920
  %v1_f94c = add i32 %v0_f94c, 1
  store i32 %v1_f94c, i32* @r7, align 4
  %v2_f950 = icmp eq i32 %v1_f94c, -1
  store i1 %v2_f950, i1* %cpsr_c.global-to-local, align 1
  %v7_f950 = icmp eq i32 %v0_f94c, -2
  store i1 %v7_f950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f950, label %dec_label_pc_feac, label %dec_label_pc_f958

dec_label_pc_f958:                                ; preds = %dec_label_pc_f94c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f95c = call i32 @function_10198(i32 25)
  store i32 %v1_f95c, i32* %r0.global-to-local, align 4
  %v0_f960.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f960

dec_label_pc_f960:                                ; preds = %dec_label_pc_feec, %dec_label_pc_f958
  %v0_f960 = phi i32 [ %v0_fef4, %dec_label_pc_feec ], [ %v0_f960.pre, %dec_label_pc_f958 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f960 = icmp eq i32 %v0_f960, 0
  store i1 %v2_f960, i1* %cpsr_z.global-to-local, align 1
  %tmp347 = icmp slt i32 %v0_f960, 1
  br i1 %tmp347, label %dec_label_pc_f854, label %dec_label_pc_f968

dec_label_pc_f968:                                ; preds = %dec_label_pc_f960
  %v0_f968 = load i32, i32* @r6, align 4
  %v1_f968 = inttoptr i32 %v0_f968 to i32*
  %v2_f968 = load i32, i32* %v1_f968, align 4
  store i32 %v2_f968, i32* %r3.global-to-local, align 4
  %v1_f96c = add i32 %v0_f968, 4
  %v2_f96c = inttoptr i32 %v1_f96c to i32*
  %v3_f96c = load i32, i32* %v2_f96c, align 4
  store i32 %v3_f96c, i32* %r0.global-to-local, align 4
  %v1_f970 = add i32 %v2_f968, 13
  %v2_f970 = inttoptr i32 %v1_f970 to i8*
  %v3_f970 = load i8, i8* %v2_f970, align 1
  %v4_f970 = zext i8 %v3_f970 to i32
  store i32 %v4_f970, i32* %r2.global-to-local, align 4
  %v1_f974 = add i32 %v2_f968, 4
  %v2_f974 = inttoptr i32 %v1_f974 to i32*
  %v3_f974 = load i32, i32* %v2_f974, align 4
  store i32 %v3_f974, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f97c = inttoptr i32 %v3_f974 to i32*
  %v5_f97c = call i32 @function_11954(i32 %v3_f96c, i32* %v4_f97c, i32 %v4_f970, i32 16384)
  store i32 %v5_f97c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f984 = load i32, i32* @r6, align 4
  %v1_f984 = add i32 %v0_f984, 4
  %v2_f984 = inttoptr i32 %v1_f984 to i32*
  %v3_f984 = load i32, i32* %v2_f984, align 4
  store i32 %v3_f984, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13a14.198 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f990 = call i32 @function_11954(i32 %v3_f984, i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), i32 2, i32 16384)
  store i32 %v5_f990, i32* %r0.global-to-local, align 4
  %v0_f994 = load i32, i32* @r6, align 4
  %v1_f994 = add i32 %v0_f994, 24
  %v2_f994 = inttoptr i32 %v1_f994 to i32*
  %v3_f994 = load i32, i32* %v2_f994, align 4
  store i32 %v3_f994, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_f99c = add i32 %v0_f994, 12
  %v3_f99c = inttoptr i32 %v2_f99c to i32*
  store i32 5, i32* %v3_f99c, align 4
  br label %dec_label_pc_fc04

dec_label_pc_f9a4:                                ; preds = %dec_label_pc_f748
  %v1_f9a4 = add i32 %v0_f748, 24
  %v2_f9a4 = inttoptr i32 %v1_f9a4 to i32*
  %v3_f9a4 = load i32, i32* %v2_f9a4, align 4
  store i32 %v3_f9a4, i32* %ip.global-to-local, align 4
  %v1_f9a8 = add i32 %v3_f9a4, -1
  store i32 %v1_f9a8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9ac = icmp eq i32 %v1_f9a8, 0
  store i1 %v2_f9ac, i1* %cpsr_z.global-to-local, align 1
  %v5_f9b0 = icmp sgt i32 %v1_f9a8, 0
  br i1 %v5_f9b0, label %dec_label_pc_f9d8, label %dec_label_pc_f6cc.backedge.thread

dec_label_pc_f9b8:                                ; preds = %bb348
  %v2_f9b8 = icmp ugt i8 %v3_f9dc, 35
  store i1 %v2_f9b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b8 = icmp eq i8 %v3_f9dc, 36
  store i1 %v7_f9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9b8, label %dec_label_pc_f9ec, label %dec_label_pc_f9c0

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f9b8
  %v2_f9c0 = icmp ugt i8 %v3_f9dc, 34
  store i1 %v2_f9c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c0 = icmp eq i8 %v3_f9dc, 35
  store i1 %v7_f9c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9c0, label %dec_label_pc_f9ec, label %dec_label_pc_f9c8

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f9c0
  %v2_f9c8 = icmp ugt i8 %v3_f9dc, 36
  store i1 %v2_f9c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c8 = icmp eq i8 %v3_f9dc, 37
  store i1 %v7_f9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9c8, label %dec_label_pc_f9ec, label %dec_label_pc_f9d0

dec_label_pc_f9d0:                                ; preds = %dec_label_pc_f9c8
  %v1_f9d0 = add i32 %v0_f9ec, -1
  store i32 %v1_f9d0, i32* %r0.global-to-local, align 4
  %v2_f9d0 = icmp ne i32 %v0_f9ec, 0
  store i1 %v2_f9d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9d0 = icmp eq i32 %v0_f9ec, 1
  store i1 %v7_f9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9d0, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_f9d8

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_f9a4, %dec_label_pc_f9d0
  %v0_f9ec = phi i32 [ %v1_f9d0, %dec_label_pc_f9d0 ], [ %v1_f9a8, %dec_label_pc_f9a4 ]
  %v2_f9d8 = add i32 %v0_f9ec, %v0_f748
  store i32 %v2_f9d8, i32* %r3.global-to-local, align 4
  %v1_f9dc = add i32 %v2_f9d8, 28
  %v2_f9dc = inttoptr i32 %v1_f9dc to i8*
  %v3_f9dc = load i8, i8* %v2_f9dc, align 1
  %v4_f9dc = zext i8 %v3_f9dc to i32
  store i32 %v4_f9dc, i32* %r3.global-to-local, align 4
  %v2_f9e0 = icmp ugt i8 %v3_f9dc, 61
  store i1 %v2_f9e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e0 = icmp eq i8 %v3_f9dc, 62
  store i1 %v7_f9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9e0, label %dec_label_pc_f9ec, label %bb348

bb348:                                            ; preds = %dec_label_pc_f9d8
  %v3_f9e4 = icmp ugt i8 %v3_f9dc, 57
  store i1 %v3_f9e4, i1* %cpsr_c.global-to-local, align 1
  %v8_f9e4 = icmp eq i8 %v3_f9dc, 58
  store i1 %v8_f9e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9e4, label %dec_label_pc_f9ec, label %dec_label_pc_f9b8

dec_label_pc_f9ec:                                ; preds = %dec_label_pc_f9d8, %bb348, %dec_label_pc_f9c8, %dec_label_pc_f9c0, %dec_label_pc_f9b8
  %v1_f9ec = add i32 %v0_f9ec, 1
  store i32 %v1_f9ec, i32* @r7, align 4
  %v2_f9f0 = icmp eq i32 %v1_f9ec, -1
  store i1 %v2_f9f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9f0 = icmp eq i32 %v0_f9ec, -2
  store i1 %v7_f9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9f0, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9ec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9f8 = icmp eq i32 %v1_f9ec, 0
  store i1 %v2_f9f8, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v1_f9ec, 1
  br i1 %tmp349, label %dec_label_pc_f854, label %dec_label_pc_fa00

dec_label_pc_fa00:                                ; preds = %dec_label_pc_f9f8
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fa04 = call i32 @function_10250(i32 5)
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_fa14 = call i32 @function_1016c(i32 5, i32* nonnull %stack_var_-56)
  store i32 %v3_fa14, i32* %r0.global-to-local, align 4
  %v3_fa18 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fa18, i32* %r2.global-to-local, align 4
  store i32 %v3_fa14, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa24 = load i32, i32* @r6, align 4
  %v1_fa24 = add i32 %v0_fa24, 4
  %v2_fa24 = inttoptr i32 %v1_fa24 to i32*
  %v3_fa24 = load i32, i32* %v2_fa24, align 4
  store i32 %v3_fa24, i32* %r0.global-to-local, align 4
  %v4_fa28 = inttoptr i32 %v3_fa14 to i32*
  %v5_fa28 = call i32 @function_11954(i32 %v3_fa24, i32* %v4_fa28, i32 %v3_fa18, i32 16384)
  store i32 %v5_fa28, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13a14.198 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa38 = load i32, i32* @r6, align 4
  %v1_fa38 = add i32 %v0_fa38, 4
  %v2_fa38 = inttoptr i32 %v1_fa38 to i32*
  %v3_fa38 = load i32, i32* %v2_fa38, align 4
  store i32 %v3_fa38, i32* %r0.global-to-local, align 4
  %v5_fa3c = call i32 @function_11954(i32 %v3_fa38, i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fa44 = call i32 @function_10198(i32 5)
  store i32 %v1_fa44, i32* %r0.global-to-local, align 4
  %v0_fa48 = load i32, i32* @r6, align 4
  %v1_fa48 = add i32 %v0_fa48, 24
  %v2_fa48 = inttoptr i32 %v1_fa48 to i32*
  %v3_fa48 = load i32, i32* %v2_fa48, align 4
  store i32 %v3_fa48, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_fa50 = add i32 %v0_fa48, 12
  %v3_fa50 = inttoptr i32 %v2_fa50 to i32*
  store i32 6, i32* %v3_fa50, align 4
  br label %dec_label_pc_fc04

dec_label_pc_facc:                                ; preds = %dec_label_pc_f748
  %v1_facc = add i32 %v0_f748, 24
  %v2_facc = inttoptr i32 %v1_facc to i32*
  %v3_facc = load i32, i32* %v2_facc, align 4
  store i32 %v3_facc, i32* %ip.global-to-local, align 4
  %v1_fad0 = add i32 %v3_facc, -1
  store i32 %v1_fad0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fad4 = icmp eq i32 %v1_fad0, 0
  store i1 %v2_fad4, i1* %cpsr_z.global-to-local, align 1
  %v5_fad8 = icmp sgt i32 %v1_fad0, 0
  br i1 %v5_fad8, label %dec_label_pc_fb00, label %dec_label_pc_f6cc.backedge.thread

dec_label_pc_fae0:                                ; preds = %bb350
  %v2_fae0 = icmp ugt i8 %v3_fb04, 35
  store i1 %v2_fae0, i1* %cpsr_c.global-to-local, align 1
  %v7_fae0 = icmp eq i8 %v3_fb04, 36
  store i1 %v7_fae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae0, label %dec_label_pc_fb14, label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %dec_label_pc_fae0
  %v2_fae8 = icmp ugt i8 %v3_fb04, 34
  store i1 %v2_fae8, i1* %cpsr_c.global-to-local, align 1
  %v7_fae8 = icmp eq i8 %v3_fb04, 35
  store i1 %v7_fae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae8, label %dec_label_pc_fb14, label %dec_label_pc_faf0

dec_label_pc_faf0:                                ; preds = %dec_label_pc_fae8
  %v2_faf0 = icmp ugt i8 %v3_fb04, 36
  store i1 %v2_faf0, i1* %cpsr_c.global-to-local, align 1
  %v7_faf0 = icmp eq i8 %v3_fb04, 37
  store i1 %v7_faf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faf0, label %dec_label_pc_fb14, label %dec_label_pc_faf8

dec_label_pc_faf8:                                ; preds = %dec_label_pc_faf0
  %v1_faf8 = add i32 %v0_fb14, -1
  store i32 %v1_faf8, i32* %r0.global-to-local, align 4
  %v2_faf8 = icmp ne i32 %v0_fb14, 0
  store i1 %v2_faf8, i1* %cpsr_c.global-to-local, align 1
  %v7_faf8 = icmp eq i32 %v0_fb14, 1
  store i1 %v7_faf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faf8, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fb00

dec_label_pc_fb00:                                ; preds = %dec_label_pc_facc, %dec_label_pc_faf8
  %v0_fb14 = phi i32 [ %v1_faf8, %dec_label_pc_faf8 ], [ %v1_fad0, %dec_label_pc_facc ]
  %v2_fb00 = add i32 %v0_fb14, %v0_f748
  store i32 %v2_fb00, i32* %r3.global-to-local, align 4
  %v1_fb04 = add i32 %v2_fb00, 28
  %v2_fb04 = inttoptr i32 %v1_fb04 to i8*
  %v3_fb04 = load i8, i8* %v2_fb04, align 1
  %v4_fb04 = zext i8 %v3_fb04 to i32
  store i32 %v4_fb04, i32* %r3.global-to-local, align 4
  %v2_fb08 = icmp ugt i8 %v3_fb04, 61
  store i1 %v2_fb08, i1* %cpsr_c.global-to-local, align 1
  %v7_fb08 = icmp eq i8 %v3_fb04, 62
  store i1 %v7_fb08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb08, label %dec_label_pc_fb14, label %bb350

bb350:                                            ; preds = %dec_label_pc_fb00
  %v3_fb0c = icmp ugt i8 %v3_fb04, 57
  store i1 %v3_fb0c, i1* %cpsr_c.global-to-local, align 1
  %v8_fb0c = icmp eq i8 %v3_fb04, 58
  store i1 %v8_fb0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb0c, label %dec_label_pc_fb14, label %dec_label_pc_fae0

dec_label_pc_fb14:                                ; preds = %dec_label_pc_fb00, %bb350, %dec_label_pc_faf0, %dec_label_pc_fae8, %dec_label_pc_fae0
  %v1_fb14 = add i32 %v0_fb14, 1
  store i32 %v1_fb14, i32* @r7, align 4
  %v2_fb18 = icmp eq i32 %v1_fb14, -1
  store i1 %v2_fb18, i1* %cpsr_c.global-to-local, align 1
  %v7_fb18 = icmp eq i32 %v0_fb14, -2
  store i1 %v7_fb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb18, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fb20

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fb14
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb20 = icmp eq i32 %v1_fb14, 0
  store i1 %v2_fb20, i1* %cpsr_z.global-to-local, align 1
  %tmp351 = icmp slt i32 %v1_fb14, 1
  br i1 %tmp351, label %dec_label_pc_f854, label %dec_label_pc_fb28

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fb20
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_fb2c = call i32 @function_10250(i32 6)
  store i32 %v2_fb34, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_fb3c = call i32 @function_1016c(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_fb3c, i32* %r0.global-to-local, align 4
  %v3_fb40 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fb40, i32* %r2.global-to-local, align 4
  store i32 %v3_fb3c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb4c = load i32, i32* @r6, align 4
  %v1_fb4c = add i32 %v0_fb4c, 4
  %v2_fb4c = inttoptr i32 %v1_fb4c to i32*
  %v3_fb4c = load i32, i32* %v2_fb4c, align 4
  store i32 %v3_fb4c, i32* %r0.global-to-local, align 4
  %v4_fb50 = inttoptr i32 %v3_fb3c to i32*
  %v5_fb50 = call i32 @function_11954(i32 %v3_fb4c, i32* %v4_fb50, i32 %v3_fb40, i32 16384)
  store i32 %v5_fb50, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13a14.198 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb60 = load i32, i32* @r6, align 4
  %v1_fb60 = add i32 %v0_fb60, 4
  %v2_fb60 = inttoptr i32 %v1_fb60 to i32*
  %v3_fb60 = load i32, i32* %v2_fb60, align 4
  store i32 %v3_fb60, i32* %r0.global-to-local, align 4
  %v5_fb64 = call i32 @function_11954(i32 %v3_fb60, i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_fb6c = call i32 @function_10198(i32 6)
  store i32 %v1_fb6c, i32* %r0.global-to-local, align 4
  %v0_fb70 = load i32, i32* @r6, align 4
  %v1_fb70 = add i32 %v0_fb70, 24
  %v2_fb70 = inttoptr i32 %v1_fb70 to i32*
  %v3_fb70 = load i32, i32* %v2_fb70, align 4
  store i32 %v3_fb70, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_fb78 = add i32 %v0_fb70, 12
  %v3_fb78 = inttoptr i32 %v2_fb78 to i32*
  store i32 7, i32* %v3_fb78, align 4
  br label %dec_label_pc_fc04

dec_label_pc_fb80:                                ; preds = %dec_label_pc_f748
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_fb84 = call i32 @function_10250(i32 10)
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_fb94 = call i32 @function_1016c(i32 10, i32* nonnull %stack_var_-56)
  %v3_fb98 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fb94, i32* %r2.global-to-local, align 4
  %v1_fba0 = add i32 %v3_fb98, -1
  store i32 %v1_fba0, i32* %r3.global-to-local, align 4
  %v0_fba4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fba4, i32* %r0.global-to-local, align 4
  %v0_fba8 = load i32, i32* @r6, align 4
  %v1_fba8 = add i32 %v0_fba8, 24
  %v2_fba8 = inttoptr i32 %v1_fba8 to i32*
  %v3_fba8 = load i32, i32* %v2_fba8, align 4
  store i32 %v3_fba8, i32* %r1.global-to-local, align 4
  %v4_fbac = call i32 @function_108e0(i32 %v0_fba4, i32 %v3_fba8, i32 %v3_fb94, i32 %v1_fba0)
  %v2_fbb0 = icmp eq i32 %v4_fbac, -1
  store i1 %v2_fbb0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbb0 = icmp eq i32 %v4_fbac, -1
  store i1 %v7_fbb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_fbac, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_ff04 = call i32 @function_10198(i32 10)
  br i1 %v7_fbb0, label %dec_label_pc_ff00, label %dec_label_pc_fbbc

dec_label_pc_fbbc:                                ; preds = %dec_label_pc_fb80
  store i32 %v1_ff04, i32* %r0.global-to-local, align 4
  %v0_fbc4 = load i32, i32* @r6, align 4
  %v1_fbc4 = add i32 %v0_fbc4, 4
  %v2_fbc4 = inttoptr i32 %v1_fbc4 to i32*
  %v3_fbc4 = load i32, i32* %v2_fbc4, align 4
  store i32 %v3_fbc4, i32* %r0.global-to-local, align 4
  %v1_fbc8 = call i32 @function_11120(i32 %v3_fbc4)
  store i32 %v1_fbc8, i32* %r0.global-to-local, align 4
  %v0_fbcc = load i32, i32* @r6, align 4
  %v1_fbcc = add i32 %v0_fbcc, 284
  %v2_fbcc = inttoptr i32 %v1_fbcc to i8*
  %v3_fbcc = load i8, i8* %v2_fbcc, align 1
  %v4_fbcc = zext i8 %v3_fbcc to i32
  %v1_fbd0 = add nuw nsw i32 %v4_fbcc, 1
  %v1_fbd4 = urem i32 %v1_fbd0, 256
  store i32 %v1_fbd4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_fbdc = icmp ugt i32 %v1_fbd4, 9
  store i1 %v2_fbdc, i1* %cpsr_c.global-to-local, align 1
  %v7_fbdc = icmp eq i32 %v1_fbd4, 10
  store i1 %v7_fbdc, i1* %cpsr_z.global-to-local, align 1
  %v2_fbe0 = add i32 %v0_fbcc, 4
  %v3_fbe0 = inttoptr i32 %v2_fbe0 to i32*
  store i32 -1, i32* %v3_fbe0, align 4
  %v0_fbe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_fbe4 = trunc i32 %v0_fbe4 to i8
  %v2_fbe4 = load i32, i32* @r6, align 4
  %v3_fbe4 = add i32 %v2_fbe4, 284
  %v4_fbe4 = inttoptr i32 %v3_fbe4 to i8*
  store i8 %v1_fbe4, i8* %v4_fbe4, align 1
  %v0_fbe8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fbe8, label %dec_label_pc_fbec, label %dec_label_pc_10060

dec_label_pc_fbec:                                ; preds = %dec_label_pc_fbbc
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_fbf4 = load i32, i32* @r6, align 4
  %v1_fbf4 = add i32 %v0_fbf4, 24
  %v2_fbf4 = inttoptr i32 %v1_fbf4 to i32*
  %v3_fbf4 = load i32, i32* %v2_fbf4, align 4
  store i32 %v3_fbf4, i32* %ip.global-to-local, align 4
  %v3_fbf8 = add i32 %v0_fbf4, 284
  %v4_fbf8 = inttoptr i32 %v3_fbf8 to i8*
  store i8 0, i8* %v4_fbf8, align 1
  %v0_fbfc = load i32, i32* %r0.global-to-local, align 4
  %v1_fbfc = load i32, i32* @r6, align 4
  %v2_fbfc = add i32 %v1_fbfc, 12
  %v3_fbfc = inttoptr i32 %v2_fbfc to i32*
  store i32 %v0_fbfc, i32* %v3_fbfc, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_fc04

dec_label_pc_fc04:                                ; preds = %.thread235, %dec_label_pc_fdec, %dec_label_pc_fd38, %dec_label_pc_fc84, %dec_label_pc_10060, %dec_label_pc_ff9c, %dec_label_pc_fb28, %dec_label_pc_fa00, %dec_label_pc_f968, %dec_label_pc_f8d0, %dec_label_pc_f85c, %dec_label_pc_fbec
  %v0_fc04 = load i32, i32* %ip.global-to-local, align 4
  %v1_fc04 = load i32, i32* @r7, align 4
  %v2_fc04 = sub i32 %v0_fc04, %v1_fc04
  %v3_fc04 = icmp uge i32 %v0_fc04, %v1_fc04
  store i1 %v3_fc04, i1* %cpsr_c.global-to-local, align 1
  %v4_fc04 = xor i32 %v1_fc04, %v0_fc04
  %v5_fc04 = xor i32 %v2_fc04, %v0_fc04
  %v6_fc04 = and i32 %v5_fc04, %v4_fc04
  %v7_fc04 = icmp slt i32 %v6_fc04, 0
  %v8_fc04 = icmp slt i32 %v2_fc04, 0
  %v9_fc04 = icmp eq i32 %v0_fc04, %v1_fc04
  store i1 %v9_fc04, i1* %cpsr_z.global-to-local, align 1
  %v2_fc08 = xor i1 %v8_fc04, %v7_fc04
  %v0_fc04.v1_fc04 = select i1 %v2_fc08, i32 %v0_fc04, i32 %v1_fc04
  store i32 %v0_fc04.v1_fc04, i32* %r1.global-to-local, align 4
  %v2_fc10 = sub i32 %v0_fc04, %v0_fc04.v1_fc04
  store i32 %v2_fc10, i32* @r2, align 4
  %v1_fc14 = load i32, i32* @r6, align 4
  %v2_fc14 = add i32 %v1_fc14, 24
  %v3_fc14 = inttoptr i32 %v2_fc14 to i32*
  store i32 %v2_fc10, i32* %v3_fc14, align 4
  %v0_fc18 = load i32, i32* %r8.global-to-local, align 4
  %v1_fc18 = load i32, i32* %r1.global-to-local, align 4
  %v2_fc18 = add i32 %v1_fc18, %v0_fc18
  store i32 %v2_fc18, i32* @r1, align 4
  store i32 %v0_fc18, i32* @r0, align 4
  %v3_fc20 = call i32 @function_11750(i32 %v0_fc18, i32 %v2_fc18, i32 %v2_fc10)
  store i32 %v3_fc20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f748

dec_label_pc_fc28:                                ; preds = %dec_label_pc_f748
  %v1_fc28 = add i32 %v0_f748, 24
  %v2_fc28 = inttoptr i32 %v1_fc28 to i32*
  %v3_fc28 = load i32, i32* %v2_fc28, align 4
  store i32 %v3_fc28, i32* %ip.global-to-local, align 4
  %v1_fc2c = add i32 %v3_fc28, -1
  store i32 %v1_fc2c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc30 = icmp eq i32 %v1_fc2c, 0
  store i1 %v2_fc30, i1* %cpsr_z.global-to-local, align 1
  %v5_fc34 = icmp sgt i32 %v1_fc2c, 0
  br i1 %v5_fc34, label %dec_label_pc_fc5c, label %dec_label_pc_f6cc.backedge.thread

dec_label_pc_fc3c:                                ; preds = %bb354
  %v2_fc3c = icmp ugt i8 %v3_fc60, 35
  store i1 %v2_fc3c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc3c = icmp eq i8 %v3_fc60, 36
  store i1 %v7_fc3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc3c, label %dec_label_pc_fc70, label %dec_label_pc_fc44

dec_label_pc_fc44:                                ; preds = %dec_label_pc_fc3c
  %v2_fc44 = icmp ugt i8 %v3_fc60, 34
  store i1 %v2_fc44, i1* %cpsr_c.global-to-local, align 1
  %v7_fc44 = icmp eq i8 %v3_fc60, 35
  store i1 %v7_fc44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc44, label %dec_label_pc_fc70, label %dec_label_pc_fc4c

dec_label_pc_fc4c:                                ; preds = %dec_label_pc_fc44
  %v2_fc4c = icmp ugt i8 %v3_fc60, 36
  store i1 %v2_fc4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc4c = icmp eq i8 %v3_fc60, 37
  store i1 %v7_fc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc4c, label %dec_label_pc_fc70, label %dec_label_pc_fc54

dec_label_pc_fc54:                                ; preds = %dec_label_pc_fc4c
  %v1_fc54 = add i32 %v0_fc70, -1
  store i32 %v1_fc54, i32* %r0.global-to-local, align 4
  %v2_fc54 = icmp ne i32 %v0_fc70, 0
  store i1 %v2_fc54, i1* %cpsr_c.global-to-local, align 1
  %v7_fc54 = icmp eq i32 %v0_fc70, 1
  store i1 %v7_fc54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc54, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fc5c

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc28, %dec_label_pc_fc54
  %v0_fc70 = phi i32 [ %v1_fc54, %dec_label_pc_fc54 ], [ %v1_fc2c, %dec_label_pc_fc28 ]
  %v2_fc5c = add i32 %v0_fc70, %v0_f748
  store i32 %v2_fc5c, i32* %r3.global-to-local, align 4
  %v1_fc60 = add i32 %v2_fc5c, 28
  %v2_fc60 = inttoptr i32 %v1_fc60 to i8*
  %v3_fc60 = load i8, i8* %v2_fc60, align 1
  %v4_fc60 = zext i8 %v3_fc60 to i32
  store i32 %v4_fc60, i32* %r3.global-to-local, align 4
  %v2_fc64 = icmp ugt i8 %v3_fc60, 61
  store i1 %v2_fc64, i1* %cpsr_c.global-to-local, align 1
  %v7_fc64 = icmp eq i8 %v3_fc60, 62
  store i1 %v7_fc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc64, label %dec_label_pc_fc70, label %bb354

bb354:                                            ; preds = %dec_label_pc_fc5c
  %v3_fc68 = icmp ugt i8 %v3_fc60, 57
  store i1 %v3_fc68, i1* %cpsr_c.global-to-local, align 1
  %v8_fc68 = icmp eq i8 %v3_fc60, 58
  store i1 %v8_fc68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc68, label %dec_label_pc_fc70, label %dec_label_pc_fc3c

dec_label_pc_fc70:                                ; preds = %dec_label_pc_fc5c, %bb354, %dec_label_pc_fc4c, %dec_label_pc_fc44, %dec_label_pc_fc3c
  %v1_fc70 = add i32 %v0_fc70, 1
  store i32 %v1_fc70, i32* @r7, align 4
  %v2_fc74 = icmp eq i32 %v1_fc70, -1
  store i1 %v2_fc74, i1* %cpsr_c.global-to-local, align 1
  %v7_fc74 = icmp eq i32 %v0_fc70, -2
  store i1 %v7_fc74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc74, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fc7c

dec_label_pc_fc7c:                                ; preds = %dec_label_pc_fc70
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc7c = icmp eq i32 %v1_fc70, 0
  store i1 %v2_fc7c, i1* %cpsr_z.global-to-local, align 1
  %tmp355 = icmp slt i32 %v1_fc70, 1
  br i1 %tmp355, label %dec_label_pc_f854, label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fc7c
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fc88 = call i32 @function_10250(i32 7)
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_fc98 = call i32 @function_1016c(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_fc98, i32* %r0.global-to-local, align 4
  %v3_fc9c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fc9c, i32* %r2.global-to-local, align 4
  store i32 %v3_fc98, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fca8 = load i32, i32* @r6, align 4
  %v1_fca8 = add i32 %v0_fca8, 4
  %v2_fca8 = inttoptr i32 %v1_fca8 to i32*
  %v3_fca8 = load i32, i32* %v2_fca8, align 4
  store i32 %v3_fca8, i32* %r0.global-to-local, align 4
  %v4_fcac = inttoptr i32 %v3_fc98 to i32*
  %v5_fcac = call i32 @function_11954(i32 %v3_fca8, i32* %v4_fcac, i32 %v3_fc9c, i32 16384)
  store i32 %v5_fcac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13a14.198 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fcbc = load i32, i32* @r6, align 4
  %v1_fcbc = add i32 %v0_fcbc, 4
  %v2_fcbc = inttoptr i32 %v1_fcbc to i32*
  %v3_fcbc = load i32, i32* %v2_fcbc, align 4
  store i32 %v3_fcbc, i32* %r0.global-to-local, align 4
  %v5_fcc0 = call i32 @function_11954(i32 %v3_fcbc, i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fcc8 = call i32 @function_10198(i32 7)
  store i32 %v1_fcc8, i32* %r0.global-to-local, align 4
  %v0_fccc = load i32, i32* @r6, align 4
  %v1_fccc = add i32 %v0_fccc, 24
  %v2_fccc = inttoptr i32 %v1_fccc to i32*
  %v3_fccc = load i32, i32* %v2_fccc, align 4
  store i32 %v3_fccc, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_fcd4 = add i32 %v0_fccc, 12
  %v3_fcd4 = inttoptr i32 %v2_fcd4 to i32*
  store i32 9, i32* %v3_fcd4, align 4
  br label %dec_label_pc_fc04

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_f748
  %v1_fcdc = add i32 %v0_f748, 24
  %v2_fcdc = inttoptr i32 %v1_fcdc to i32*
  %v3_fcdc = load i32, i32* %v2_fcdc, align 4
  store i32 %v3_fcdc, i32* %ip.global-to-local, align 4
  %v1_fce0 = add i32 %v3_fcdc, -1
  store i32 %v1_fce0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fce4 = icmp eq i32 %v1_fce0, 0
  store i1 %v2_fce4, i1* %cpsr_z.global-to-local, align 1
  %v5_fce8 = icmp sgt i32 %v1_fce0, 0
  br i1 %v5_fce8, label %dec_label_pc_fd10, label %dec_label_pc_f6cc.backedge.thread

dec_label_pc_fcf0:                                ; preds = %bb356
  %v2_fcf0 = icmp ugt i8 %v3_fd14, 35
  store i1 %v2_fcf0, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf0 = icmp eq i8 %v3_fd14, 36
  store i1 %v7_fcf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcf0, label %dec_label_pc_fd24, label %dec_label_pc_fcf8

dec_label_pc_fcf8:                                ; preds = %dec_label_pc_fcf0
  %v2_fcf8 = icmp ugt i8 %v3_fd14, 34
  store i1 %v2_fcf8, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf8 = icmp eq i8 %v3_fd14, 35
  store i1 %v7_fcf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcf8, label %dec_label_pc_fd24, label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fcf8
  %v2_fd00 = icmp ugt i8 %v3_fd14, 36
  store i1 %v2_fd00, i1* %cpsr_c.global-to-local, align 1
  %v7_fd00 = icmp eq i8 %v3_fd14, 37
  store i1 %v7_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd00, label %dec_label_pc_fd24, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fd00
  %v1_fd08 = add i32 %v0_fd24, -1
  store i32 %v1_fd08, i32* %r0.global-to-local, align 4
  %v2_fd08 = icmp ne i32 %v0_fd24, 0
  store i1 %v2_fd08, i1* %cpsr_c.global-to-local, align 1
  %v7_fd08 = icmp eq i32 %v0_fd24, 1
  store i1 %v7_fd08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd08, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fd10

dec_label_pc_fd10:                                ; preds = %dec_label_pc_fcdc, %dec_label_pc_fd08
  %v0_fd24 = phi i32 [ %v1_fd08, %dec_label_pc_fd08 ], [ %v1_fce0, %dec_label_pc_fcdc ]
  %v2_fd10 = add i32 %v0_fd24, %v0_f748
  store i32 %v2_fd10, i32* %r3.global-to-local, align 4
  %v1_fd14 = add i32 %v2_fd10, 28
  %v2_fd14 = inttoptr i32 %v1_fd14 to i8*
  %v3_fd14 = load i8, i8* %v2_fd14, align 1
  %v4_fd14 = zext i8 %v3_fd14 to i32
  store i32 %v4_fd14, i32* %r3.global-to-local, align 4
  %v2_fd18 = icmp ugt i8 %v3_fd14, 61
  store i1 %v2_fd18, i1* %cpsr_c.global-to-local, align 1
  %v7_fd18 = icmp eq i8 %v3_fd14, 62
  store i1 %v7_fd18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd18, label %dec_label_pc_fd24, label %bb356

bb356:                                            ; preds = %dec_label_pc_fd10
  %v3_fd1c = icmp ugt i8 %v3_fd14, 57
  store i1 %v3_fd1c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd1c = icmp eq i8 %v3_fd14, 58
  store i1 %v8_fd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd1c, label %dec_label_pc_fd24, label %dec_label_pc_fcf0

dec_label_pc_fd24:                                ; preds = %dec_label_pc_fd10, %bb356, %dec_label_pc_fd00, %dec_label_pc_fcf8, %dec_label_pc_fcf0
  %v1_fd24 = add i32 %v0_fd24, 1
  store i32 %v1_fd24, i32* @r7, align 4
  %v2_fd28 = icmp eq i32 %v1_fd24, -1
  store i1 %v2_fd28, i1* %cpsr_c.global-to-local, align 1
  %v7_fd28 = icmp eq i32 %v0_fd24, -2
  store i1 %v7_fd28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd28, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fd30

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fd24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd30 = icmp eq i32 %v1_fd24, 0
  store i1 %v2_fd30, i1* %cpsr_z.global-to-local, align 1
  %tmp357 = icmp slt i32 %v1_fd24, 1
  br i1 %tmp357, label %dec_label_pc_f854, label %dec_label_pc_fd38

dec_label_pc_fd38:                                ; preds = %dec_label_pc_fd30
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_fd3c = call i32 @function_10250(i32 8)
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_fd4c = call i32 @function_1016c(i32 8, i32* nonnull %stack_var_-56)
  store i32 %v3_fd4c, i32* %r0.global-to-local, align 4
  %v3_fd50 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fd50, i32* %r2.global-to-local, align 4
  store i32 %v3_fd4c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd5c = load i32, i32* @r6, align 4
  %v1_fd5c = add i32 %v0_fd5c, 4
  %v2_fd5c = inttoptr i32 %v1_fd5c to i32*
  %v3_fd5c = load i32, i32* %v2_fd5c, align 4
  store i32 %v3_fd5c, i32* %r0.global-to-local, align 4
  %v4_fd60 = inttoptr i32 %v3_fd4c to i32*
  %v5_fd60 = call i32 @function_11954(i32 %v3_fd5c, i32* %v4_fd60, i32 %v3_fd50, i32 16384)
  store i32 %v5_fd60, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13a14.198 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd70 = load i32, i32* @r6, align 4
  %v1_fd70 = add i32 %v0_fd70, 4
  %v2_fd70 = inttoptr i32 %v1_fd70 to i32*
  %v3_fd70 = load i32, i32* %v2_fd70, align 4
  store i32 %v3_fd70, i32* %r0.global-to-local, align 4
  %v5_fd74 = call i32 @function_11954(i32 %v3_fd70, i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_fd7c = call i32 @function_10198(i32 8)
  store i32 %v1_fd7c, i32* %r0.global-to-local, align 4
  %v0_fd80 = load i32, i32* @r6, align 4
  %v1_fd80 = add i32 %v0_fd80, 24
  %v2_fd80 = inttoptr i32 %v1_fd80 to i32*
  %v3_fd80 = load i32, i32* %v2_fd80, align 4
  store i32 %v3_fd80, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_fd88 = add i32 %v0_fd80, 12
  %v3_fd88 = inttoptr i32 %v2_fd88 to i32*
  store i32 10, i32* %v3_fd88, align 4
  br label %dec_label_pc_fc04

dec_label_pc_fd90:                                ; preds = %dec_label_pc_f748
  %v1_fd90 = add i32 %v0_f748, 24
  %v2_fd90 = inttoptr i32 %v1_fd90 to i32*
  %v3_fd90 = load i32, i32* %v2_fd90, align 4
  store i32 %v3_fd90, i32* %ip.global-to-local, align 4
  %v1_fd94 = add i32 %v3_fd90, -1
  store i32 %v1_fd94, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd98 = icmp eq i32 %v1_fd94, 0
  store i1 %v2_fd98, i1* %cpsr_z.global-to-local, align 1
  %v5_fd9c = icmp sgt i32 %v1_fd94, 0
  br i1 %v5_fd9c, label %dec_label_pc_fdc4, label %dec_label_pc_f6cc.backedge.thread

dec_label_pc_fda4:                                ; preds = %bb358
  %v2_fda4 = icmp ugt i8 %v3_fdc8, 35
  store i1 %v2_fda4, i1* %cpsr_c.global-to-local, align 1
  %v7_fda4 = icmp eq i8 %v3_fdc8, 36
  store i1 %v7_fda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fda4, label %dec_label_pc_fdd8, label %dec_label_pc_fdac

dec_label_pc_fdac:                                ; preds = %dec_label_pc_fda4
  %v2_fdac = icmp ugt i8 %v3_fdc8, 34
  store i1 %v2_fdac, i1* %cpsr_c.global-to-local, align 1
  %v7_fdac = icmp eq i8 %v3_fdc8, 35
  store i1 %v7_fdac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdac, label %dec_label_pc_fdd8, label %dec_label_pc_fdb4

dec_label_pc_fdb4:                                ; preds = %dec_label_pc_fdac
  %v2_fdb4 = icmp ugt i8 %v3_fdc8, 36
  store i1 %v2_fdb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdb4 = icmp eq i8 %v3_fdc8, 37
  store i1 %v7_fdb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdb4, label %dec_label_pc_fdd8, label %dec_label_pc_fdbc

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_fdb4
  %v1_fdbc = add i32 %v0_fdd8, -1
  store i32 %v1_fdbc, i32* %r0.global-to-local, align 4
  %v2_fdbc = icmp ne i32 %v0_fdd8, 0
  store i1 %v2_fdbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fdbc = icmp eq i32 %v0_fdd8, 1
  store i1 %v7_fdbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdbc, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fdc4

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fd90, %dec_label_pc_fdbc
  %v0_fdd8 = phi i32 [ %v1_fdbc, %dec_label_pc_fdbc ], [ %v1_fd94, %dec_label_pc_fd90 ]
  %v2_fdc4 = add i32 %v0_fdd8, %v0_f748
  store i32 %v2_fdc4, i32* %r3.global-to-local, align 4
  %v1_fdc8 = add i32 %v2_fdc4, 28
  %v2_fdc8 = inttoptr i32 %v1_fdc8 to i8*
  %v3_fdc8 = load i8, i8* %v2_fdc8, align 1
  %v4_fdc8 = zext i8 %v3_fdc8 to i32
  store i32 %v4_fdc8, i32* %r3.global-to-local, align 4
  %v2_fdcc = icmp ugt i8 %v3_fdc8, 61
  store i1 %v2_fdcc, i1* %cpsr_c.global-to-local, align 1
  %v7_fdcc = icmp eq i8 %v3_fdc8, 62
  store i1 %v7_fdcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdcc, label %dec_label_pc_fdd8, label %bb358

bb358:                                            ; preds = %dec_label_pc_fdc4
  %v3_fdd0 = icmp ugt i8 %v3_fdc8, 57
  store i1 %v3_fdd0, i1* %cpsr_c.global-to-local, align 1
  %v8_fdd0 = icmp eq i8 %v3_fdc8, 58
  store i1 %v8_fdd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdd0, label %dec_label_pc_fdd8, label %dec_label_pc_fda4

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdc4, %bb358, %dec_label_pc_fdb4, %dec_label_pc_fdac, %dec_label_pc_fda4
  %v1_fdd8 = add i32 %v0_fdd8, 1
  store i32 %v1_fdd8, i32* @r7, align 4
  %v2_fddc = icmp eq i32 %v1_fdd8, -1
  store i1 %v2_fddc, i1* %cpsr_c.global-to-local, align 1
  %v7_fddc = icmp eq i32 %v0_fdd8, -2
  store i1 %v7_fddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fddc, label %dec_label_pc_f6cc.backedge.thread473, label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fdd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fde4 = icmp eq i32 %v1_fdd8, 0
  store i1 %v2_fde4, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v1_fdd8, 1
  br i1 %tmp359, label %dec_label_pc_f854, label %dec_label_pc_fdec

dec_label_pc_fdec:                                ; preds = %dec_label_pc_fde4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fdf0 = call i32 @function_10250(i32 4)
  store i32 %v2_fb34, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_fe00 = call i32 @function_1016c(i32 4, i32* nonnull %stack_var_-48)
  store i32 %v3_fe00, i32* %r0.global-to-local, align 4
  %v3_fe04 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fe04, i32* %r2.global-to-local, align 4
  store i32 %v3_fe00, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe10 = load i32, i32* @r6, align 4
  %v1_fe10 = add i32 %v0_fe10, 4
  %v2_fe10 = inttoptr i32 %v1_fe10 to i32*
  %v3_fe10 = load i32, i32* %v2_fe10, align 4
  store i32 %v3_fe10, i32* %r0.global-to-local, align 4
  %v4_fe14 = inttoptr i32 %v3_fe00 to i32*
  %v5_fe14 = call i32 @function_11954(i32 %v3_fe10, i32* %v4_fe14, i32 %v3_fe04, i32 16384)
  store i32 %v5_fe14, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13a14.198 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe24 = load i32, i32* @r6, align 4
  %v1_fe24 = add i32 %v0_fe24, 4
  %v2_fe24 = inttoptr i32 %v1_fe24 to i32*
  %v3_fe24 = load i32, i32* %v2_fe24, align 4
  store i32 %v3_fe24, i32* %r0.global-to-local, align 4
  %v5_fe28 = call i32 @function_11954(i32 %v3_fe24, i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fe30 = call i32 @function_10198(i32 4)
  store i32 %v1_fe30, i32* %r0.global-to-local, align 4
  %v0_fe34 = load i32, i32* @r6, align 4
  %v1_fe34 = add i32 %v0_fe34, 24
  %v2_fe34 = inttoptr i32 %v1_fe34 to i32*
  %v3_fe34 = load i32, i32* %v2_fe34, align 4
  store i32 %v3_fe34, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_fe3c = add i32 %v0_fe34, 12
  %v3_fe3c = inttoptr i32 %v2_fe3c to i32*
  store i32 8, i32* %v3_fe3c, align 4
  br label %dec_label_pc_fc04

dec_label_pc_fe44:                                ; preds = %dec_label_pc_f7cc
  store i32 ptrtoint (i32* @global_var_13a26.200 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_fe50, i32* @r0, align 4
  %v3_fe54 = call i32 @function_11740(i32 %v2_fe50, i32 ptrtoint (i32* @global_var_13a26.200 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_fe60, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13a1d.202 to i32), i32* @r1, align 4
  %v3_fe68 = call i32 @function_11740(i32 %v2_fe60, i32 ptrtoint (i32* @global_var_13a1d.202 to i32), i32 9)
  store i32 %v3_fe68, i32* %r0.global-to-local, align 4
  %v0_fe6c = load i32, i32* @r6, align 4
  %v1_fe6c = add i32 %v0_fe6c, 24
  %v2_fe6c = inttoptr i32 %v1_fe6c to i32*
  %v3_fe6c = load i32, i32* %v2_fe6c, align 4
  store i32 %v3_fe6c, i32* %ip.global-to-local, align 4
  %v0_fe70 = load i32, i32* @r5, align 4
  %v1_fe70 = add i32 %v0_fe70, 2
  store i32 %v1_fe70, i32* %r2.global-to-local, align 4
  %v0_fe74 = load i32, i32* %r8.global-to-local, align 4
  %v2_fe74 = add i32 %v0_fe74, %v3_fe6c
  store i32 %v2_fe74, i32* %r3.global-to-local, align 4
  %v3_fe78 = icmp uge i32 %v2_fe74, %v1_fe70
  store i1 %v3_fe78, i1* %cpsr_c.global-to-local, align 1
  %v9_fe78 = icmp eq i32 %v2_fe74, %v1_fe70
  store i1 %v9_fe78, i1* %cpsr_z.global-to-local, align 1
  %v2_fe7c = xor i1 %v3_fe78, true
  %v3_fe7c = or i1 %v9_fe78, %v2_fe7c
  br i1 %v3_fe7c, label %dec_label_pc_fe44.dec_label_pc_f844.loopexit_crit_edge, label %dec_label_pc_fe80

dec_label_pc_fe44.dec_label_pc_f844.loopexit_crit_edge: ; preds = %dec_label_pc_fe44
  %v0_f844.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f844

dec_label_pc_fe80:                                ; preds = %dec_label_pc_fe44
  %v0_fe80 = load i32, i32* @r4, align 4
  %v1_fe80 = add i32 %v0_fe80, 1
  %v2_fe80 = inttoptr i32 %v1_fe80 to i8*
  %v3_fe80 = load i8, i8* %v2_fe80, align 1
  %v4_fe80 = zext i8 %v3_fe80 to i32
  store i32 %v4_fe80, i32* %r3.global-to-local, align 4
  %v2_fe84 = icmp ugt i8 %v3_fe80, 30
  store i1 %v2_fe84, i1* %cpsr_c.global-to-local, align 1
  %v7_fe84 = icmp eq i8 %v3_fe80, 31
  store i1 %v7_fe84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe84, label %dec_label_pc_10010, label %dec_label_pc_fe8c

dec_label_pc_fe8c:                                ; preds = %dec_label_pc_fe80
  %v1_fe8c = add i32 %v0_fe80, -1
  %v2_fe8c = inttoptr i32 %v1_fe8c to i8*
  %v3_fe8c = load i8, i8* %v2_fe8c, align 1
  %v4_fe8c = zext i8 %v3_fe8c to i32
  store i32 %v4_fe8c, i32* %r3.global-to-local, align 4
  %v2_fe90 = icmp ugt i8 %v3_fe8c, -4
  store i1 %v2_fe90, i1* %cpsr_c.global-to-local, align 1
  %v7_fe90 = icmp eq i8 %v3_fe8c, -3
  store i1 %v7_fe90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe90, label %bb360, label %dec_label_pc_fe9c

bb360:                                            ; preds = %dec_label_pc_fe8c
  %v1_fe94 = load i32, i32* %sl.global-to-local, align 4
  %v2_fe94 = trunc i32 %v1_fe94 to i8
  store i8 %v2_fe94, i8* %v2_fe8c, align 1
  %v0_fe98.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fe98.pr, label %dec_label_pc_f7e0, label %.dec_label_pc_fe9c_crit_edge

.dec_label_pc_fe9c_crit_edge:                     ; preds = %bb360
  %v0_fe9c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fe9c:                                ; preds = %.dec_label_pc_fe9c_crit_edge, %dec_label_pc_fe8c
  %v0_fe9c = phi i32 [ %v0_fe9c.pre, %.dec_label_pc_fe9c_crit_edge ], [ %v4_fe8c, %dec_label_pc_fe8c ]
  %v2_fe9c = icmp ugt i32 %v0_fe9c, 250
  store i1 %v2_fe9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe9c = icmp eq i32 %v0_fe9c, 251
  store i1 %v7_fe9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe9c, label %bb361, label %dec_label_pc_f7e0

bb361:                                            ; preds = %dec_label_pc_fe9c
  store i32 -3, i32* %r2.global-to-local, align 4
  %v3_fea4 = load i32, i32* @r4, align 4
  %v4_fea4 = add i32 %v3_fea4, -1
  %v5_fea4 = inttoptr i32 %v4_fea4 to i8*
  store i8 -3, i8* %v5_fea4, align 1
  br label %dec_label_pc_f7e0

dec_label_pc_feac:                                ; preds = %dec_label_pc_f930, %dec_label_pc_f90c, %dec_label_pc_f94c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_feb0 = call i32 @function_10250(i32 25)
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_fec0 = call i32 @function_1016c(i32 25, i32* nonnull %stack_var_-56)
  %v3_fec4 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fec0, i32* %r2.global-to-local, align 4
  %v1_fecc = add i32 %v3_fec4, -1
  store i32 %v1_fecc, i32* %r3.global-to-local, align 4
  %v0_fed0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fed0, i32* %r0.global-to-local, align 4
  %v0_fed4 = load i32, i32* @r6, align 4
  %v1_fed4 = add i32 %v0_fed4, 24
  %v2_fed4 = inttoptr i32 %v1_fed4 to i32*
  %v3_fed4 = load i32, i32* %v2_fed4, align 4
  store i32 %v3_fed4, i32* %r1.global-to-local, align 4
  %v4_fed8 = call i32 @function_108e0(i32 %v0_fed0, i32 %v3_fed4, i32 %v3_fec0, i32 %v1_fecc)
  store i32 %v4_fed8, i32* %r0.global-to-local, align 4
  %v1_fedc = add i32 %v4_fed8, 1
  store i32 %v1_fedc, i32* @r7, align 4
  %v2_fedc = icmp eq i32 %v4_fed8, -1
  store i1 %v2_fedc, i1* %cpsr_c.global-to-local, align 1
  %v7_fedc = icmp eq i32 %v1_fedc, 0
  store i1 %v7_fedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fedc, label %thread-pre-split98, label %bb362

bb362:                                            ; preds = %dec_label_pc_feac
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split98

thread-pre-split98:                               ; preds = %dec_label_pc_feac, %bb362
  %v0_fee4 = phi i1 [ false, %bb362 ], [ true, %dec_label_pc_feac ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_fee4, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10078 = call i32 @function_10198(i32 25)
  store i32 %v1_10078, i32* %r0.global-to-local, align 4
  br i1 %v0_fee4, label %dec_label_pc_10074, label %dec_label_pc_feec

dec_label_pc_feec:                                ; preds = %thread-pre-split98
  %v0_fef4 = load i32, i32* @r7, align 4
  %v3_fef4 = icmp eq i32 %v0_fef4, -1
  store i1 %v3_fef4, i1* %cpsr_c.global-to-local, align 1
  %v8_fef4 = icmp eq i32 %v0_fef4, -1
  store i1 %v8_fef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fef4, label %dec_label_pc_f6c8.loopexit, label %dec_label_pc_f960

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fb80
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_ff0c = call i32 @function_10250(i32 9)
  store i32 %v2_f63c, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_ff1c = call i32 @function_1016c(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_ff1c, i32* %r0.global-to-local, align 4
  %v3_ff20 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_ff1c, i32* %r2.global-to-local, align 4
  %v1_ff28 = add i32 %v3_ff20, -1
  store i32 %v1_ff28, i32* %r3.global-to-local, align 4
  %v0_ff2c = load i32, i32* @r6, align 4
  %v1_ff2c = add i32 %v0_ff2c, 24
  %v2_ff2c = inttoptr i32 %v1_ff2c to i32*
  %v3_ff2c = load i32, i32* %v2_ff2c, align 4
  store i32 %v3_ff2c, i32* %r1.global-to-local, align 4
  %v0_ff30 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_ff30, i32* %r0.global-to-local, align 4
  %v4_ff34 = call i32 @function_108e0(i32 %v0_ff30, i32 %v3_ff2c, i32 %v3_ff1c, i32 %v1_ff28)
  store i32 %v4_ff34, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_ff40 = call i32 @function_10198(i32 9)
  store i32 %v1_ff40, i32* %r0.global-to-local, align 4
  %v0_ff44 = load i32, i32* @r7, align 4
  %v2_ff44 = icmp eq i32 %v0_ff44, -1
  store i1 %v2_ff44, i1* %cpsr_c.global-to-local, align 1
  %v7_ff44 = icmp eq i32 %v0_ff44, -1
  store i1 %v7_ff44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff44, label %dec_label_pc_f6c8.loopexit, label %dec_label_pc_ff4c

dec_label_pc_ff4c:                                ; preds = %dec_label_pc_ff00
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff4c = icmp eq i32 %v0_ff44, 0
  store i1 %v2_ff4c, i1* %cpsr_z.global-to-local, align 1
  %tmp363 = icmp slt i32 %v0_ff44, 1
  br i1 %tmp363, label %dec_label_pc_f854, label %dec_label_pc_ff54

dec_label_pc_ff54:                                ; preds = %dec_label_pc_ff4c
  %v0_ff54 = load i32, i32* @r6, align 4
  %v1_ff54 = add i32 %v0_ff54, 21
  %v2_ff54 = inttoptr i32 %v1_ff54 to i8*
  %v3_ff54 = load i8, i8* %v2_ff54, align 1
  %v4_ff54 = zext i8 %v3_ff54 to i32
  store i32 %v4_ff54, i32* %r3.global-to-local, align 4
  %v1_ff58 = add i32 %v0_ff54, 20
  %v2_ff58 = inttoptr i32 %v1_ff58 to i8*
  %v3_ff58 = load i8, i8* %v2_ff58, align 1
  %v4_ff58 = zext i8 %v3_ff58 to i32
  store i32 %v4_ff58, i32* %r2.global-to-local, align 4
  %v1_ff5c = add i32 %v0_ff54, 16
  %v2_ff5c = inttoptr i32 %v1_ff5c to i32*
  %v3_ff5c = load i32, i32* %v2_ff5c, align 4
  store i32 %v3_ff5c, i32* %r1.global-to-local, align 4
  %v4_ff60 = mul nuw nsw i32 %v4_ff54, 256
  %v5_ff60 = or i32 %v4_ff58, %v4_ff60
  store i32 %v5_ff60, i32* %r2.global-to-local, align 4
  %v1_ff64 = and i32 %v4_ff58, 128
  %v2_ff64 = icmp ne i32 %v1_ff64, 0
  store i1 %v2_ff64, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_ff54, i32* %r3.global-to-local, align 4
  store i32 %v3_ff5c, i32* %stack_var_-48, align 4
  store i32 %v5_ff60, i32* %stack_var_-38, align 4
  %v1_ff74 = inttoptr i32 %v0_ff54 to i32*
  %v2_ff74 = load i32, i32* %v1_ff74, align 4
  store i32 %v2_ff74, i32* %sl.global-to-local, align 4
  %v0_ff78 = call i32 @function_1114c()
  store i32 %v0_ff78, i32* %r0.global-to-local, align 4
  %v7_ff7c = icmp eq i32 %v0_ff78, -1
  %.375 = zext i1 %v7_ff7c to i32
  store i32 %.375, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff88 = icmp eq i32 %v0_ff78, 0
  store i1 %v2_ff88, i1* %cpsr_z.global-to-local, align 1
  %tmp366 = icmp slt i32 %v0_ff78, 1
  br i1 %tmp366, label %bb367, label %.thread101

.thread101:                                       ; preds = %dec_label_pc_ff54
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff9c

bb367:                                            ; preds = %dec_label_pc_ff54
  store i32 %.375, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff94 = icmp eq i1 %v7_ff7c, false
  store i1 %v2_ff94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff94, label %dec_label_pc_100dc, label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %.thread101, %bb367
  %v0_ff9c = load i32, i32* @r6, align 4
  %v1_ff9c = add i32 %v0_ff9c, 4
  %v2_ff9c = inttoptr i32 %v1_ff9c to i32*
  %v3_ff9c = load i32, i32* %v2_ff9c, align 4
  store i32 %v3_ff9c, i32* %r0.global-to-local, align 4
  %v1_ffa0 = call i32 @function_11120(i32 %v3_ff9c)
  store i32 %v1_ffa0, i32* %r0.global-to-local, align 4
  %v0_ffa4 = load i32, i32* @r6, align 4
  %v1_ffa4 = add i32 %v0_ffa4, 24
  %v2_ffa4 = inttoptr i32 %v1_ffa4 to i32*
  %v3_ffa4 = load i32, i32* %v2_ffa4, align 4
  store i32 %v3_ffa4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_ffac = load i32, i32* @r4, align 4
  %v2_ffac = add i32 %v0_ffa4, 4
  %v3_ffac = inttoptr i32 %v2_ffac to i32*
  store i32 %v0_ffac, i32* %v3_ffac, align 4
  %v0_ffb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_ffb0 = load i32, i32* @r6, align 4
  %v2_ffb0 = add i32 %v1_ffb0, 12
  %v3_ffb0 = inttoptr i32 %v2_ffb0 to i32*
  store i32 %v0_ffb0, i32* %v3_ffb0, align 4
  br label %dec_label_pc_fc04

dec_label_pc_ffb8:                                ; preds = %dec_label_pc_f6e4
  br i1 %v2_f708, label %dec_label_pc_10084, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ffb8
  %v3_ffbc = icmp eq i32 %v5_f704, -1
  store i1 %v3_ffbc, i1* %cpsr_c.global-to-local, align 1
  %v8_ffbc = icmp eq i32 %v5_f704, -1
  store i1 %v8_ffbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ffbc, label %dec_label_pc_ffc4, label %dec_label_pc_f730

dec_label_pc_ffc4:                                ; preds = %dec_label_pc_ffbc
  %v0_ffc4 = load i32, i32* @sb, align 4
  %v1_ffc4 = inttoptr i32 %v0_ffc4 to i32*
  %v2_ffc4 = load i32, i32* %v1_ffc4, align 4
  store i32 %v2_ffc4, i32* %r3.global-to-local, align 4
  %v2_ffc8 = icmp ugt i32 %v2_ffc4, 10
  store i1 %v2_ffc8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffc8 = icmp eq i32 %v2_ffc4, 11
  store i1 %v7_ffc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffc8, label %dec_label_pc_f500, label %dec_label_pc_ffd0

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffc4, %dec_label_pc_10084
  %v0_ffd0 = load i32, i32* @r6, align 4
  %v1_ffd0 = add i32 %v0_ffd0, 4
  %v2_ffd0 = inttoptr i32 %v1_ffd0 to i32*
  %v3_ffd0 = load i32, i32* %v2_ffd0, align 4
  store i32 %v3_ffd0, i32* %r0.global-to-local, align 4
  %v1_ffd4 = call i32 @function_11120(i32 %v3_ffd0)
  store i32 %v1_ffd4, i32* %r0.global-to-local, align 4
  %v0_ffd8 = load i32, i32* @r6, align 4
  %v1_ffd8 = add i32 %v0_ffd8, 284
  %v2_ffd8 = inttoptr i32 %v1_ffd8 to i8*
  %v3_ffd8 = load i8, i8* %v2_ffd8, align 1
  %v4_ffd8 = zext i8 %v3_ffd8 to i32
  %v1_ffdc = add nuw nsw i32 %v4_ffd8, 1
  %v1_ffe0 = urem i32 %v1_ffdc, 256
  store i32 %v1_ffe0, i32* %r3.global-to-local, align 4
  %v2_ffe4 = icmp ugt i32 %v1_ffe0, 8
  store i1 %v2_ffe4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffe4 = icmp eq i32 %v1_ffe0, 9
  store i1 %v7_ffe4, i1* %cpsr_z.global-to-local, align 1
  %v2_ffe8 = xor i1 %v7_ffe4, true
  %v3_ffe8 = and i1 %v2_ffe4, %v2_ffe8
  br i1 %v3_ffe8, label %bb368, label %bb369

bb368:                                            ; preds = %dec_label_pc_ffd0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb369

bb369:                                            ; preds = %dec_label_pc_ffd0, %bb368
  store i32 -1, i32* @r4, align 4
  %v1_fff0 = trunc i32 %v1_ffdc to i8
  store i8 %v1_fff0, i8* %v2_ffd8, align 1
  %v0_fff4 = load i32, i32* @r4, align 4
  %v1_fff4 = load i32, i32* @r6, align 4
  %v2_fff4 = add i32 %v1_fff4, 4
  %v3_fff4 = inttoptr i32 %v2_fff4 to i32*
  store i32 %v0_fff4, i32* %v3_fff4, align 4
  %v0_fff8 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_fff8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_fff8 = xor i1 %v1_fff8, true
  %v3_fff8 = and i1 %v0_fff8, %v2_fff8
  br i1 %v3_fff8, label %bb370, label %.thread240

bb370:                                            ; preds = %bb369
  %v4_fff8 = load i32, i32* %r0.global-to-local, align 4
  %v5_fff8 = load i32, i32* @r6, align 4
  %v6_fff8 = add i32 %v5_fff8, 12
  %v7_fff8 = inttoptr i32 %v6_fff8 to i32*
  store i32 %v4_fff8, i32* %v7_fff8, align 4
  %v4_fffc = load i32, i32* %r0.global-to-local, align 4
  %v5_fffc = trunc i32 %v4_fffc to i8
  %v6_fffc = load i32, i32* @r6, align 4
  %v7_fffc = add i32 %v6_fffc, 284
  %v8_fffc = inttoptr i32 %v7_fffc to i8*
  store i8 %v5_fffc, i8* %v8_fffc, align 1
  %v0_10000.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10000.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread240

.thread240:                                       ; preds = %bb369, %bb370
  %v1_10000 = phi i1 [ %v1_10000.pre, %bb370 ], [ %v1_fff8, %bb369 ]
  %v0_10000 = phi i1 [ %v0_10000.pre, %bb370 ], [ %v0_fff8, %bb369 ]
  %v2_10000 = xor i1 %v1_10000, true
  %v3_10000 = and i1 %v0_10000, %v2_10000
  br i1 %v3_10000, label %dec_label_pc_f500, label %dec_label_pc_10004

dec_label_pc_10004:                               ; preds = %.thread240
  %v0_10004 = load i32, i32* @r6, align 4
  store i32 %v0_10004, i32* @r0, align 4
  %v0_10008 = call i32 @function_e7e4()
  store i32 %v0_10008, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f500

dec_label_pc_10010:                               ; preds = %dec_label_pc_fe80
  store i32 %v2_fe50, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10020 = add i32 %v0_fe6c, 4
  %v2_10020 = inttoptr i32 %v1_10020 to i32*
  %v3_10020 = load i32, i32* %v2_10020, align 4
  store i32 %v3_10020, i32* %r0.global-to-local, align 4
  %v5_10024 = call i32 @function_11954(i32 %v3_10020, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10024, i32* %r0.global-to-local, align 4
  store i32 %v2_f494, i32* %r1.global-to-local, align 4
  %v0_1002c = load i32, i32* @r6, align 4
  %v1_1002c = add i32 %v0_1002c, 4
  %v2_1002c = inttoptr i32 %v1_1002c to i32*
  %v3_1002c = load i32, i32* %v2_1002c, align 4
  store i32 %v3_1002c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f824

dec_label_pc_1003c:                               ; preds = %dec_label_pc_f6d4
  store i32 %.pre, i32* @r0, align 4
  %v1_10044 = add i32 %v0_1003c, 92
  store i32 %v1_10044, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_1004c = call i32 @function_11750(i32 %.pre, i32 %v1_10044, i32 192)
  store i32 %v3_1004c, i32* %r0.global-to-local, align 4
  %v0_10050 = load i32, i32* @r6, align 4
  %v1_10050 = add i32 %v0_10050, 24
  %v2_10050 = inttoptr i32 %v1_10050 to i32*
  %v3_10050 = load i32, i32* %v2_10050, align 4
  store i32 %v3_10050, i32* %r3.global-to-local, align 4
  %v1_10054 = add i32 %v3_10050, -64
  store i32 %v1_10054, i32* %ip.global-to-local, align 4
  store i32 %v1_10054, i32* %v2_10050, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_10060:                               ; preds = %dec_label_pc_fbbc
  %v0_10060 = load i32, i32* @r6, align 4
  store i32 %v0_10060, i32* @r0, align 4
  %v0_10064 = call i32 @function_e7e4()
  store i32 %v0_10064, i32* %r0.global-to-local, align 4
  %v0_10068 = load i32, i32* @r6, align 4
  %v1_10068 = add i32 %v0_10068, 24
  %v2_10068 = inttoptr i32 %v1_10068 to i32*
  %v3_10068 = load i32, i32* %v2_10068, align 4
  store i32 %v3_10068, i32* %ip.global-to-local, align 4
  %v0_1006c = load i32, i32* @r4, align 4
  store i32 %v0_1006c, i32* @r7, align 4
  br label %dec_label_pc_fc04

dec_label_pc_10074:                               ; preds = %thread-pre-split98
  %v0_1007c = load i32, i32* @r6, align 4
  %v1_1007c = add i32 %v0_1007c, 12
  %v2_1007c = inttoptr i32 %v1_1007c to i32*
  %v3_1007c = load i32, i32* %v2_1007c, align 4
  br label %dec_label_pc_f6cc.backedge

dec_label_pc_10084:                               ; preds = %dec_label_pc_ffb8
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_10088 = load i32, i32* @sb, align 4
  %v2_10088 = inttoptr i32 %v1_10088 to i32*
  store i32 104, i32* %v2_10088, align 4
  br label %dec_label_pc_ffd0

dec_label_pc_10090:                               ; preds = %dec_label_pc_f5e8, %dec_label_pc_f5a0
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %dec_label_pc_f610, %dec_label_pc_10090
  %v0_1009c = phi i32 [ 0, %dec_label_pc_10090 ], [ %v0_f5f0, %dec_label_pc_f610 ]
  %v0_10094 = load i32, i32* @r6, align 4
  %v1_10094 = add i32 %v0_10094, 4
  %v2_10094 = inttoptr i32 %v1_10094 to i32*
  %v3_10094 = load i32, i32* %v2_10094, align 4
  store i32 %v3_10094, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_1009c = inttoptr i32 %v0_10094 to i32*
  store i32 %v0_1009c, i32* %v2_1009c, align 4
  %v0_100a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_100a0 = load i32, i32* @r6, align 4
  %v2_100a0 = add i32 %v1_100a0, 24
  %v3_100a0 = inttoptr i32 %v2_100a0 to i32*
  store i32 %v0_100a0, i32* %v3_100a0, align 4
  %v0_f4d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f4d8

dec_label_pc_100a8:                               ; preds = %dec_label_pc_f560
  %v0_100a8 = load i32, i32* @r6, align 4
  %v1_100a8 = add i32 %v0_100a8, 4
  %v2_100a8 = inttoptr i32 %v1_100a8 to i32*
  %v3_100a8 = load i32, i32* %v2_100a8, align 4
  store i32 %v3_100a8, i32* %r0.global-to-local, align 4
  %v1_100ac = call i32 @function_11120(i32 %v3_100a8)
  store i32 %v1_100ac, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_100b4 = load i32, i32* @r5, align 4
  %v1_100b4 = load i32, i32* @r6, align 4
  %v2_100b4 = add i32 %v1_100b4, 12
  %v3_100b4 = inttoptr i32 %v2_100b4 to i32*
  store i32 %v0_100b4, i32* %v3_100b4, align 4
  %v0_100b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_100b8 = load i32, i32* @r6, align 4
  %v2_100b8 = add i32 %v1_100b8, 4
  %v3_100b8 = inttoptr i32 %v2_100b8 to i32*
  store i32 %v0_100b8, i32* %v3_100b8, align 4
  %v0_100bc = load i32, i32* @r5, align 4
  %v1_100bc = trunc i32 %v0_100bc to i8
  %v2_100bc = load i32, i32* @r6, align 4
  %v3_100bc = add i32 %v2_100bc, 284
  %v4_100bc = inttoptr i32 %v3_100bc to i8*
  store i8 %v1_100bc, i8* %v4_100bc, align 1
  br label %dec_label_pc_f500

dec_label_pc_100c4:                               ; preds = %dec_label_pc_f688
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_100c8 = call i32 @function_10198(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_100d0 = call i32 @function_10198(i32 27)
  store i32 %v1_100d0, i32* %r0.global-to-local, align 4
  %v0_100d4 = load i32, i32* @r6, align 4
  %v1_100d4 = add i32 %v0_100d4, 12
  %v2_100d4 = inttoptr i32 %v1_100d4 to i32*
  %v3_100d4 = load i32, i32* %v2_100d4, align 4
  br label %dec_label_pc_f6cc.backedge

dec_label_pc_f6cc.backedge.thread:                ; preds = %dec_label_pc_f9a4, %dec_label_pc_facc, %dec_label_pc_fc28, %dec_label_pc_fcdc, %dec_label_pc_fd90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6d4

dec_label_pc_f6cc.backedge.thread473:             ; preds = %dec_label_pc_f9d0, %dec_label_pc_faf8, %dec_label_pc_fdbc, %dec_label_pc_fc54, %dec_label_pc_fd08, %dec_label_pc_f9ec, %dec_label_pc_fb14, %dec_label_pc_fc70, %dec_label_pc_fd24, %dec_label_pc_fdd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6d4

dec_label_pc_f6cc.backedge:                       ; preds = %dec_label_pc_100c4, %dec_label_pc_10074
  %storemerge476 = phi i32 [ %v3_1007c, %dec_label_pc_10074 ], [ %v3_100d4, %dec_label_pc_100c4 ]
  %v0_f6cc.be = phi i32 [ %v3_1007c, %dec_label_pc_10074 ], [ %v3_100d4, %dec_label_pc_100c4 ]
  %v0_f6d4156 = phi i32 [ %v0_1007c, %dec_label_pc_10074 ], [ %v0_100d4, %dec_label_pc_100c4 ]
  store i32 %storemerge476, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6cc = icmp eq i32 %v0_f6cc.be, 0
  store i1 %v2_f6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6cc, label %dec_label_pc_f500, label %dec_label_pc_f6d4

dec_label_pc_100dc:                               ; preds = %bb367
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_100e8 = call i32 @function_119e4(i32 2, i32 1, i32 0)
  store i32 %v3_100e8, i32* %r0.global-to-local, align 4
  %v2_100ec = icmp eq i32 %v3_100e8, -1
  store i1 %v2_100ec, i1* %cpsr_c.global-to-local, align 1
  %v7_100ec = icmp eq i32 %v3_100e8, -1
  store i1 %v7_100ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_100e8, i32* @r4, align 4
  br i1 %v7_100ec, label %dec_label_pc_f300, label %dec_label_pc_100f8

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100dc
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_100fc = call i32 @function_10250(i32 2)
  store i32 2, i32* @r6, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_13978.74 to i32), i32* @r0, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v2_10110 = call i32 @function_1181c(i32 ptrtoint ([13 x i8]* @global_var_13978.74 to i32))
  %v0_10114 = load i32, i32* @r5, align 4
  store i32 %v0_10114, i32* %r1.global-to-local, align 4
  %v0_1011c = load i32, i32* @r6, align 4
  store i32 %v0_1011c, i32* %r0.global-to-local, align 4
  %v2_10120 = inttoptr i32 %v0_10114 to i32*
  %v3_10120 = call i32 @function_1016c(i32 %v0_1011c, i32* %v2_10120)
  %v4_10120 = inttoptr i32 %v3_10120 to i8*
  store i32 %v3_10120, i32* %r0.global-to-local, align 4
  %v2_10124 = add i32 %v3_10120, 1
  %v3_10124 = inttoptr i32 %v2_10124 to i8*
  %v4_10124 = load i8, i8* %v3_10124, align 1
  %v5_10124 = zext i8 %v4_10124 to i32
  store i32 %v5_10124, i32* %r2.global-to-local, align 4
  %v3_10128 = load i8, i8* %v4_10120, align 1
  %v4_10128 = zext i8 %v3_10128 to i32
  %v4_1012c = mul nuw nsw i32 %v5_10124, 256
  %v5_1012c = or i32 %v4_10128, %v4_1012c
  store i32 %v5_1012c, i32* %r3.global-to-local, align 4
  %v1_10130 = and i32 %v4_10128, 128
  %v2_10130 = icmp ne i32 %v1_10130, 0
  store i1 %v2_10130, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10124, i32* %r1.global-to-local, align 4
  %v0_10134 = load i32, i32* @r6, align 4
  store i32 %v0_10134, i32* %r0.global-to-local, align 4
  %v1_10140 = call i32 @function_10198(i32 %v0_10134)
  %v0_10144 = load i32, i32* @r4, align 4
  store i32 %v0_10144, i32* %r0.global-to-local, align 4
  %v2_10148 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_10148, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10150 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_10150 = call i32 @function_1186c(i32 %v0_10144, %sockaddr* %v3_10150, i32 16)
  store i32 %v4_10150, i32* %r0.global-to-local, align 4
  %v3_10154 = icmp eq i32 %v4_10150, -1
  store i1 %v3_10154, i1* %cpsr_c.global-to-local, align 1
  %v8_10154 = icmp eq i32 %v4_10150, -1
  store i1 %v8_10154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10154, label %dec_label_pc_1015c, label %dec_label_pc_f25c

dec_label_pc_1015c:                               ; preds = %dec_label_pc_100f8
  %v0_1015c = load i32, i32* @r4, align 4
  store i32 %v0_1015c, i32* %r0.global-to-local, align 4
  %v1_10160 = call i32 @function_11120(i32 %v0_1015c)
  %v0_10164 = load i32, i32* @r5, align 4
  store i32 %v0_10164, i32* %r0.global-to-local, align 4
  %v1_10168 = call i32 @function_1246c(i32 %v0_10164)
  store i32 %v1_10168, i32* %r0.global-to-local, align 4
  ret i32 %v1_10168

; uselistorder directives
  uselistorder i32 %v4_10128, { 1, 0 }
  uselistorder i32 %v5_10124, { 1, 0, 2 }
  uselistorder i1 %v7_100ec, { 1, 0 }
  uselistorder i32 %v3_100e8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_100d4, { 1, 0 }
  uselistorder i32 %v3_1007c, { 1, 0 }
  uselistorder i32 %v3_1002c, { 1, 0 }
  uselistorder i1 %v1_fff8, { 1, 0 }
  uselistorder i32 %v1_ffe0, { 2, 1, 0 }
  uselistorder i32 %v1_ffdc, { 1, 0 }
  uselistorder i1 %v2_ff94, { 1, 0 }
  uselistorder i32 %.375, { 1, 0 }
  uselistorder i1 %v7_ff7c, { 1, 0 }
  uselistorder i32 %v0_ff78, { 2, 1, 0, 3 }
  uselistorder i32 %v4_ff58, { 1, 0, 2 }
  uselistorder i32 %v4_ff54, { 1, 0, 2 }
  uselistorder i1 %v7_ff44, { 1, 0 }
  uselistorder i32 %v0_ff44, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_fef4, { 0, 2, 1 }
  uselistorder i1 %v0_fee4, { 1, 0 }
  uselistorder i32 %v4_fed8, { 1, 0, 2 }
  uselistorder i32 %v0_fe6c, { 1, 2, 0 }
  uselistorder i1 %v7_fddc, { 1, 0 }
  uselistorder i32 %v1_fdd8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fdd0, { 1, 0 }
  uselistorder i8 %v3_fdc8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fdd8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fdb4, { 1, 0 }
  uselistorder i1 %v7_fdac, { 1, 0 }
  uselistorder i1 %v7_fda4, { 1, 0 }
  uselistorder i1 %v7_fd28, { 1, 0 }
  uselistorder i32 %v1_fd24, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fd1c, { 1, 0 }
  uselistorder i8 %v3_fd14, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fd24, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fd00, { 1, 0 }
  uselistorder i1 %v7_fcf8, { 1, 0 }
  uselistorder i1 %v7_fcf0, { 1, 0 }
  uselistorder i1 %v7_fc74, { 1, 0 }
  uselistorder i32 %v1_fc70, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fc68, { 1, 0 }
  uselistorder i8 %v3_fc60, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fc70, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fc4c, { 1, 0 }
  uselistorder i1 %v7_fc44, { 1, 0 }
  uselistorder i1 %v7_fc3c, { 1, 0 }
  uselistorder i32 %v0_fc18, { 1, 2, 0 }
  uselistorder i32 %v2_fc04, { 1, 0 }
  uselistorder i32 %v1_fc04, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fc04, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_fbd4, { 2, 1, 0 }
  uselistorder i1 %v7_fbb0, { 1, 0 }
  uselistorder i32 %v4_fbac, { 1, 0, 2 }
  uselistorder i1 %v7_fb18, { 1, 0 }
  uselistorder i32 %v1_fb14, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fb0c, { 1, 0 }
  uselistorder i8 %v3_fb04, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fb14, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_faf0, { 1, 0 }
  uselistorder i1 %v7_fae8, { 1, 0 }
  uselistorder i1 %v7_fae0, { 1, 0 }
  uselistorder i1 %v7_f9f0, { 1, 0 }
  uselistorder i32 %v1_f9ec, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f9e4, { 1, 0 }
  uselistorder i8 %v3_f9dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f9ec, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f9c8, { 1, 0 }
  uselistorder i1 %v7_f9c0, { 1, 0 }
  uselistorder i1 %v7_f9b8, { 1, 0 }
  uselistorder i32 %v0_f960, { 2, 1, 0 }
  uselistorder i1 %v7_f950, { 1, 0 }
  uselistorder i1 %v8_f944, { 1, 0 }
  uselistorder i8 %v3_f93c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_f94c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f928, { 1, 0 }
  uselistorder i1 %v7_f920, { 1, 0 }
  uselistorder i32 %v0_f8c8, { 2, 1, 0 }
  uselistorder i1 %v7_f8b0, { 1, 0 }
  uselistorder i1 %v8_f8a4, { 1, 0 }
  uselistorder i8 %v3_f89c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f8ac, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f888, { 1, 0 }
  uselistorder i1 %v7_f880, { 1, 0 }
  uselistorder i1 %v7_f878, { 1, 0 }
  uselistorder i32 %v0_f854.pre, { 0, 2, 1 }
  uselistorder i32 %v1_f83c, { 1, 0 }
  uselistorder i32 %v1_f838, { 1, 0 }
  uselistorder i32 %v1_f830, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f82c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f82c, { 0, 2, 1 }
  uselistorder i1 %v7_f7cc, { 1, 0 }
  uselistorder i1 %v2_f7b8, { 1, 0, 2 }
  uselistorder i1 %v2_f7a0, { 1, 0, 2 }
  uselistorder i32 %v1_f7c0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f794, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_f7bc, { 1, 0 }
  uselistorder i32 %v2_f7c4, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_f780, { 0, 2, 1, 3 }
  uselistorder i32 %v0_f748, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_f724, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f720, { 1, 0 }
  uselistorder i32 %v5_f704, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_f6f0, { 1, 0, 2 }
  uselistorder i32 %v3_f6ec, { 1, 0, 2 }
  uselistorder i32 %v0_1003c, { 1, 0, 2 }
  uselistorder i32 %v0_f6c0, { 1, 0, 2 }
  uselistorder i1 %v7_f6a0, { 1, 0 }
  uselistorder i1 %v7_f678, { 1, 0 }
  uselistorder i32 %v0_f5f0, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_f5d0, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_f5c4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_f550, { 2, 1, 0 }
  uselistorder i32 %v3_f54c, { 1, 0 }
  uselistorder i1 %v7_f530, { 1, 0 }
  uselistorder i32 %v3_f52c, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_f520, { 1, 0 }
  uselistorder i32 %v1_f504, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f4f0, { 2, 1, 0 }
  uselistorder i32 %v3_f4ec, { 1, 0 }
  uselistorder i32 %v0_f4f0, { 1, 0 }
  uselistorder i32 %v2_fb34, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f63c, { 3, 8, 5, 6, 2, 7, 9, 10, 1, 0, 4 }
  uselistorder i32 %v2_fe60, { 1, 2, 0 }
  uselistorder i32 %v1_f488, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f488, { 0, 1, 3, 2 }
  uselistorder i32 %v1_f458, { 2, 1, 0 }
  uselistorder i32 %v1_f454, { 1, 0 }
  uselistorder i32 %v0_f424, { 0, 2, 1 }
  uselistorder i32 %v1_f41c, { 1, 0 }
  uselistorder i1 %v7_f3d4, { 0, 3, 1, 2 }
  uselistorder i1 %v2_f3d4, { 1, 2, 0 }
  uselistorder i32 %v2_f3cc, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_f3c4, { 1, 0 }
  uselistorder i32 %v1_f3a8, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f39c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f39c, { 0, 2, 1 }
  uselistorder i32 %v1_f38c, { 1, 0 }
  uselistorder i32 %v3_f400, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge244, { 1, 0, 2 }
  uselistorder i32 %v2_f410, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i8* %stack_var_-1876.2, { 0, 2, 1 }
  uselistorder i8 %stack_var_-1868.2, { 0, 2, 1 }
  uselistorder i32 %stack_var_-1872.2, { 0, 2, 1 }
  uselistorder i32 %v3_f248, { 1, 0 }
  uselistorder i32 %v1_f234, { 1, 0 }
  uselistorder i32 %v1_f21c, { 1, 2, 0 }
  uselistorder i32 %v0_f228, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f1ec, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_f1e0, { 2, 1, 0 }
  uselistorder i32 %v1_f1bc, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_f19c, { 1, 2, 0, 3 }
  uselistorder i1 %v2_f194, { 1, 0 }
  uselistorder i32 %v0_f0f8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_f130, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_f0a0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_efc4, { 1, 0 }
  uselistorder i32 %v1_efc0, { 2, 0, 1 }
  uselistorder i32 %v4_ef9c, { 1, 0 }
  uselistorder i32 %v5_ef84, { 0, 2, 1 }
  uselistorder i1 %v2_eeec, { 1, 0 }
  uselistorder i1 %v2_eed8, { 1, 0 }
  uselistorder i1 %v2_eec4, { 1, 0 }
  uselistorder i32 %.374, { 3, 2, 1, 0 }
  uselistorder i1 %v7_eea0, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_ee88, { 1, 0 }
  uselistorder i1 %v3_ee6c, { 1, 0, 2 }
  uselistorder i1 %v2_ee58, { 1, 0 }
  uselistorder i1 %v2_ee34, { 1, 0 }
  uselistorder i32 %v1_ede4, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_edd0, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_edcc, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_edbc, { 1, 0 }
  uselistorder i32 %v0_edac, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ed88, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_f124, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_ec54, { 1, 0 }
  uselistorder i32 %v0_ec44, { 2, 0, 1, 3 }
  uselistorder i32 %v3_ec14, { 1, 0 }
  uselistorder i32 %v4_ec00, { 2, 0, 1 }
  uselistorder i32 %v0_ebe8, { 0, 2, 1 }
  uselistorder i32 %v0_eb90, { 3, 2, 0, 1 }
  uselistorder i1 %v7_eb30, { 1, 0 }
  uselistorder i32 %v3_eb28, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_eb10, { 0, 2, 1 }
  uselistorder i32 %v0_eaf8, { 2, 1, 0 }
  uselistorder i32 %v0_ead4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge251, { 1, 0 }
  uselistorder i32 %v0_ea68, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-56, { 9, 7, 10, 3, 11, 6, 12, 5, 13, 8, 14, 4, 15, 16, 1, 2, 17, 19, 0, 18 }
  uselistorder i32* %stack_var_-48, { 4, 5, 3, 6, 2, 7, 0, 8, 9, 1 }
  uselistorder i32* %stack_var_-38, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 4, 5, 6, 7, 8, 0, 1, 2, 3, 9, 10, 11, 12 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 6, 1, 5, 4, 9, 10, 7, 8, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 12, 64, 63, 37, 65, 66, 136, 13, 14, 15, 27, 38, 39, 40, 41, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 51, 52, 53, 34, 35, 36, 42, 43, 44, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 72, 54, 55, 73, 74, 76, 75, 77, 78, 79, 80, 81, 83, 85, 84, 82, 86, 87, 88, 89, 95, 90, 91, 92, 93, 96, 145, 146, 97, 147, 148, 56, 57, 58, 59, 60, 61, 62, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 135, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 127, 130, 129, 94, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 14, 29, 12, 13, 15, 16, 17, 25, 30, 31, 0, 1, 2, 3, 5, 4, 6, 8, 7, 18, 19, 21, 20, 22, 23, 24, 26, 28, 27, 35, 37, 36, 32, 33, 34, 47, 48, 49, 50, 51, 52, 53, 38, 39, 54, 55, 56, 57, 58, 60, 62, 61, 122, 59, 63, 64, 65, 66, 67, 71, 68, 69, 70, 72, 73, 76, 74, 75, 77, 40, 41, 42, 43, 44, 45, 46, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 84, 85, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 44, 29, 30, 14, 15, 16, 25, 26, 1, 2, 3, 4, 5, 6, 7, 8, 9, 58, 59, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 0, 45, 46, 47, 48, 33, 34, 35, 36, 49, 50, 51, 53, 54, 52, 55, 56, 60, 57, 98, 37, 38, 39, 40, 41, 42, 43, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 105, 106, 107, 134, 133, 41, 135, 99, 101, 100, 137, 139, 140, 136, 141, 138, 43, 42, 44, 46, 45, 47, 49, 48, 50, 81, 80, 83, 82, 84, 85, 102, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 108, 52, 53, 55, 54, 56, 51, 57, 58, 59, 60, 62, 61, 64, 63, 66, 65, 67, 68, 69, 71, 70, 72, 74, 73, 76, 75, 77, 78, 79, 87, 86, 89, 88, 93, 90, 91, 92, 110, 109, 112, 111, 95, 94, 96, 97, 98, 104, 103, 144, 142, 114, 113, 115, 117, 116, 119, 118, 120, 121, 122, 151, 143, 146, 145, 147, 148, 150, 149, 152, 155, 153, 154, 160, 156, 159, 157, 158, 162, 161, 124, 123, 125, 126, 127, 129, 128, 130, 131, 132, 165, 163, 164, 167, 166, 168, 170, 169, 195, 171, 172, 173, 175, 174, 176, 177, 179, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 197, 200, 199, 201, 205, 204, 202, 203, 206, 207, 208, 209 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 21, 22, 6, 23, 7, 14, 0, 2, 1, 4, 3, 5, 19, 8, 9, 10, 11, 12, 13, 18, 20, 15, 16, 17, 24, 25, 26, 27, 28, 29, 32, 30, 31, 33, 49, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 28, 111, 221, 215, 97, 101, 102, 103, 104, 105, 29, 206, 31, 32, 33, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 93, 34, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 95, 66, 71, 72, 67, 68, 69, 70, 73, 94, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 212, 106, 107, 108, 109, 110, 213, 96, 30, 98, 99, 100, 112, 114, 113, 115, 116, 118, 120, 119, 214, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 218, 219, 216, 217, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 205, 173, 174, 204, 175, 176, 203, 177, 178, 179, 180, 181, 182, 202, 183, 184, 185, 186, 187, 201, 188, 189, 190, 211, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 207, 208, 209, 220, 210 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 108, 219, 213, 94, 99, 98, 100, 101, 102, 30, 202, 31, 32, 33, 34, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 90, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 210, 103, 104, 105, 106, 107, 211, 93, 201, 95, 96, 97, 109, 111, 110, 112, 113, 115, 117, 116, 212, 114, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 216, 217, 214, 128, 215, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 200, 166, 167, 199, 168, 169, 198, 170, 171, 172, 173, 174, 175, 197, 176, 177, 178, 179, 180, 196, 181, 182, 183, 209, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 203, 204, 205, 206, 207, 218, 208 }
  uselistorder i32 (i32)* @function_1181c, { 2, 0, 1, 3 }
  uselistorder i32 ptrtoint ([13 x i8]* @global_var_13978.74 to i32), { 0, 2, 1, 3 }
  uselistorder i8 31, { 8, 2, 3, 9, 10, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_13a14.198 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_13a14.198, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_10198, { 35, 26, 25, 34, 30, 38, 37, 36, 33, 32, 31, 29, 28, 27, 24, 23, 5, 2, 1, 0, 39, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_108e0, { 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_1016c, { 3, 4, 8, 0, 1, 2, 5, 6, 7, 9, 10, 29, 33, 34, 35, 36, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32 }
  uselistorder i32 (i32)* @function_10250, { 27, 26, 22, 30, 29, 28, 25, 24, 23, 21, 20, 7, 3, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4 }
  uselistorder i8* bitcast (i8** @global_var_1c1e4.129 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1c1e5.130, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c1e4.129 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11340, { 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_11954, { 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i32 ()* @function_e7e4, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 3, 4, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_11980, { 0, 1, 2, 7, 3, 4, 5, 6, 9, 8 }
  uselistorder i32 16384, { 13, 60, 12, 48, 0, 49, 1, 50, 2, 51, 3, 52, 4, 53, 5, 54, 6, 55, 7, 56, 8, 57, 30, 58, 31, 59, 28, 62, 29, 63, 27, 61, 38, 71, 32, 64, 33, 65, 34, 66, 35, 67, 36, 68, 37, 69, 9, 70, 10, 72, 11, 73, 15, 74, 41, 75, 40, 76, 42, 77, 43, 78, 14, 79, 39, 80, 16, 81, 17, 82, 19, 83, 18, 84, 21, 85, 20, 86, 22, 87, 23, 88, 24, 89, 25, 90, 26, 91, 44, 45, 46, 47 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 2, 6, 5, 4, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10f74, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 3, 8, 7, 6, 5, 4, 1, 0, 2 }
  uselistorder i8* @global_var_1c1c8.187, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 47, 48, 49, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0, 31, 32, 33, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_139f4.181 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_139ec.179 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_139b0.167 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_e8b8, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13a1c.159 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13a18.157 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1c1d9.153, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c1cc.144 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1c1d8.145, { 1, 0 }
  uselistorder i8** @global_var_1c1b8.140, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1c1b8.140 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_e580, { 71, 70, 69, 68, 67, 66, 65, 17, 16, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 18, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 7, 6, 5, 4, 0, 15, 14, 13, 12, 11, 10, 9, 8, 3, 2, 1 }
  uselistorder i32 2048, { 6, 5, 0, 1, 2, 7, 3, 8, 9, 4, 10 }
  uselistorder i32* @global_var_1c250.138, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1c24c.136, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1c1e8.123, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_e5d8, { 1, 0 }
  uselistorder i32* @global_var_1c230.50, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0, 11, 15, 12, 13, 14 }
  uselistorder i32 ()* @function_10ad4, { 2, 1, 0 }
  uselistorder i32 ()* @function_1114c, { 6, 5, 1, 0, 4, 3, 2 }
  uselistorder i32* @sl, { 2, 80, 81, 82, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 36, 37, 38, 39, 40, 41 }
  uselistorder i32* @sb, { 2, 3, 4, 0, 5, 6, 7, 8, 79, 80, 81, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder label %dec_label_pc_f6cc.backedge.thread473, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_f6cc.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10094, { 1, 0 }
  uselistorder label %.thread240, { 1, 0 }
  uselistorder label %bb369, { 1, 0 }
  uselistorder label %dec_label_pc_ffd0, { 1, 0 }
  uselistorder label %dec_label_pc_ff9c, { 1, 0 }
  uselistorder label %thread-pre-split98, { 1, 0 }
  uselistorder label %dec_label_pc_feac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fdd8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fdc4, { 1, 0 }
  uselistorder label %dec_label_pc_fd24, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fd10, { 1, 0 }
  uselistorder label %dec_label_pc_fc70, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fc5c, { 1, 0 }
  uselistorder label %dec_label_pc_fc04, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_fb14, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fb00, { 1, 0 }
  uselistorder label %dec_label_pc_f9ec, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f9d8, { 1, 0 }
  uselistorder label %dec_label_pc_f94c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f938, { 1, 0 }
  uselistorder label %dec_label_pc_f8c8, { 1, 0 }
  uselistorder label %dec_label_pc_f8ac, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f898, { 1, 0 }
  uselistorder label %dec_label_pc_f854, { 4, 1, 2, 3, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_f844, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread88, { 2, 0, 1 }
  uselistorder label %.thread86, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f7e0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f79c, { 1, 0 }
  uselistorder label %dec_label_pc_f79c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f730, { 1, 0 }
  uselistorder label %bb338, { 1, 0 }
  uselistorder label %dec_label_pc_f6e4, { 1, 0 }
  uselistorder label %dec_label_pc_f6d4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f6d4.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f6c8.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_f628, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f500, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_f4d8, { 1, 0 }
  uselistorder label %bb335, { 1, 0 }
  uselistorder label %bb333, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_f328.dec_label_pc_f328_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f310.dec_label_pc_f310_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f308, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_f300, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_f21c, { 1, 0 }
  uselistorder label %dec_label_pc_f0c0, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f0b4, { 1, 0 }
  uselistorder label %.thread66, { 2, 1, 0 }
  uselistorder label %.thread64, { 1, 0 }
  uselistorder label %dec_label_pc_ef24, { 1, 0 }
  uselistorder label %dec_label_pc_ef18, { 1, 0 }
  uselistorder label %dec_label_pc_ef0c, { 1, 0 }
  uselistorder label %dec_label_pc_ef00, { 1, 0 }
  uselistorder label %dec_label_pc_eef4, { 1, 0 }
  uselistorder label %dec_label_pc_eee0, { 1, 0 }
  uselistorder label %dec_label_pc_eecc, { 1, 0 }
  uselistorder label %dec_label_pc_eeb8, { 1, 0 }
  uselistorder label %dec_label_pc_ee98, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee74, { 1, 0 }
  uselistorder label %dec_label_pc_ee68, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee44, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee20, { 1, 0 }
  uselistorder label %bb298, { 1, 0 }
  uselistorder label %dec_label_pc_edcc, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_eb90, { 1, 0 }
}

define i32 @function_1016c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1016c:
  store i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32* @ip, align 4
  %v3_10170 = mul i32 %arg1, 8
  %v2_10174 = add i32 %v3_10170, ptrtoint (i32* @global_var_1c25c.205 to i32)
  %v2_10178 = icmp eq i32* %arg2, null
  br i1 %v2_10178, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1016c
  %v3_1018411 = inttoptr i32 %v2_10174 to i32*
  %v4_1018412 = load i32, i32* %v3_1018411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_1016c
  %v2_1017c = add i32 %v3_10170, add (i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32 5)
  %v3_1017c = inttoptr i32 %v2_1017c to i8*
  %v4_1017c = load i8, i8* %v3_1017c, align 1
  %v5_1017c = zext i8 %v4_1017c to i32
  store i32 %v5_1017c, i32* @r2, align 4
  %v2_10180 = add i32 %v3_10170, add (i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32 4)
  %v3_10180 = inttoptr i32 %v2_10180 to i8*
  %v4_10180 = load i8, i8* %v3_10180, align 4
  %v5_10180 = zext i8 %v4_10180 to i32
  %v3_10184 = inttoptr i32 %v2_10174 to i32*
  %v4_10184 = load i32, i32* %v3_10184, align 4
  %v5_10188 = mul nuw nsw i32 %v5_1017c, 256
  %v6_10188 = or i32 %v5_10180, %v5_10188
  store i32 %v6_10188, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10184714 = phi i32 [ %v4_1018412, %.thread ], [ %v4_10184, %bb ]
  ret i32 %v4_10184714

; uselistorder directives
  uselistorder i32 %v2_10174, { 1, 0 }
  uselistorder i32 %v3_10170, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10198(i32 %arg1) local_unnamed_addr {
dec_label_pc_10198:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10198 = mul i32 %arg1, 8
  %v3_1019c = load i32, i32* @r4, align 4
  store i32 %v3_1019c, i32* %stack_var_-20, align 4
  %v3_101ac = and i32 %v3_10198, 2040
  %v2_101b0 = add i32 %v3_101ac, ptrtoint (i32* @global_var_1c25c.205 to i32)
  store i32 %v2_101b0, i32* @lr, align 4
  %v1_101b8 = add i32 %v3_101ac, add (i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32 4)
  store i32 %v1_101b8, i32* %r7.global-to-local, align 4
  %v2_101bc = load i32, i32* @global_var_1c02c.208, align 4
  store i32 %v2_101bc, i32* @r2, align 4
  %v2_101c0 = inttoptr i32 %v1_101b8 to i8*
  %v3_101c0 = load i8, i8* %v2_101c0, align 4
  %v4_101c0 = zext i8 %v3_101c0 to i32
  store i32 %v4_101c0, i32* @r1, align 4
  %v1_101c4 = add i32 %v3_101ac, add (i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32 5)
  %v2_101c4 = inttoptr i32 %v1_101c4 to i8*
  %v3_101c4 = load i8, i8* %v2_101c4, align 1
  %v4_101c4 = zext i8 %v3_101c4 to i32
  %v3_101c8 = udiv i32 %v2_101bc, 256
  %v4_101cc = mul nuw nsw i32 %v4_101c4, 256
  %v5_101cc = or i32 %v4_101cc, %v4_101c0
  %v7_101cc = icmp eq i32 %v5_101cc, 0
  store i1 %v7_101cc, i1* @cpsr_z, align 1
  %v3_101d0 = udiv i32 %v2_101bc, 65536
  %v1_101d4 = urem i32 %v3_101c8, 256
  store i32 %v1_101d4, i32* %r6.global-to-local, align 4
  %v1_101d8 = urem i32 %v3_101d0, 256
  store i32 %v1_101d8, i32* %r5.global-to-local, align 4
  %v3_101dc = udiv i32 %v2_101bc, 16777216
  store i32 %v3_101dc, i32* %r4.global-to-local, align 4
  %v1_101e0 = urem i32 %v2_101bc, 256
  br i1 %v7_101cc, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10198
  store i32 %v3_1019c, i32* @r4, align 4
  ret i32 %v1_101e0

bb8:                                              ; preds = %dec_label_pc_10198
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_101ec

dec_label_pc_101ec:                               ; preds = %dec_label_pc_101ec, %bb8
  %v2_101f8 = phi i32 [ %v1_10234, %dec_label_pc_101ec ], [ 0, %bb8 ]
  %v0_101ec = phi i32 [ %v0_1022c, %dec_label_pc_101ec ], [ %v2_101b0, %bb8 ]
  %v1_101ec = inttoptr i32 %v0_101ec to i32*
  %v2_101ec = load i32, i32* %v1_101ec, align 4
  %v2_101f0 = add i32 %v2_101ec, %v2_101f8
  %v3_101f0 = inttoptr i32 %v2_101f0 to i8*
  %v4_101f0 = load i8, i8* %v3_101f0, align 1
  %v6_101f0 = zext i8 %v4_101f0 to i32
  %v2_101f4 = xor i32 %v6_101f0, %v1_101e0
  %v1_101f8 = trunc i32 %v2_101f4 to i8
  store i8 %v1_101f8, i8* %v3_101f0, align 1
  %v0_101fc = load i32, i32* @lr, align 4
  %v1_101fc = inttoptr i32 %v0_101fc to i32*
  %v2_101fc = load i32, i32* %v1_101fc, align 4
  %v0_10200 = load i32, i32* @ip, align 4
  %v2_10200 = add i32 %v0_10200, %v2_101fc
  %v3_10200 = inttoptr i32 %v2_10200 to i8*
  %v4_10200 = load i8, i8* %v3_10200, align 1
  %v6_10200 = zext i8 %v4_10200 to i32
  %v0_10204 = load i32, i32* %r6.global-to-local, align 4
  %v2_10204 = xor i32 %v0_10204, %v6_10200
  %v1_10208 = trunc i32 %v2_10204 to i8
  store i8 %v1_10208, i8* %v3_10200, align 1
  %v0_1020c = load i32, i32* @lr, align 4
  %v1_1020c = inttoptr i32 %v0_1020c to i32*
  %v2_1020c = load i32, i32* %v1_1020c, align 4
  %v0_10210 = load i32, i32* @ip, align 4
  %v2_10210 = add i32 %v0_10210, %v2_1020c
  %v3_10210 = inttoptr i32 %v2_10210 to i8*
  %v4_10210 = load i8, i8* %v3_10210, align 1
  %v6_10210 = zext i8 %v4_10210 to i32
  %v0_10214 = load i32, i32* %r5.global-to-local, align 4
  %v2_10214 = xor i32 %v0_10214, %v6_10210
  %v1_10218 = trunc i32 %v2_10214 to i8
  store i8 %v1_10218, i8* %v3_10210, align 1
  %v0_1021c = load i32, i32* @lr, align 4
  %v1_1021c = inttoptr i32 %v0_1021c to i32*
  %v2_1021c = load i32, i32* %v1_1021c, align 4
  store i32 %v2_1021c, i32* @r1, align 4
  %v0_10220 = load i32, i32* @ip, align 4
  %v2_10220 = add i32 %v0_10220, %v2_1021c
  %v3_10220 = inttoptr i32 %v2_10220 to i8*
  %v4_10220 = load i8, i8* %v3_10220, align 1
  %v6_10220 = zext i8 %v4_10220 to i32
  %v0_10224 = load i32, i32* %r4.global-to-local, align 4
  %v2_10224 = xor i32 %v0_10224, %v6_10220
  %v1_10228 = trunc i32 %v2_10224 to i8
  store i8 %v1_10228, i8* %v3_10220, align 1
  %v0_1022c = load i32, i32* @lr, align 4
  %v1_1022c = add i32 %v0_1022c, 4
  %v2_1022c = inttoptr i32 %v1_1022c to i8*
  %v3_1022c = load i8, i8* %v2_1022c, align 1
  %v4_1022c = zext i8 %v3_1022c to i32
  %v0_10230 = load i32, i32* %r7.global-to-local, align 4
  %v1_10230 = add i32 %v0_10230, 1
  %v2_10230 = inttoptr i32 %v1_10230 to i8*
  %v3_10230 = load i8, i8* %v2_10230, align 1
  %v4_10230 = zext i8 %v3_10230 to i32
  %v0_10234 = load i32, i32* @ip, align 4
  %v1_10234 = add i32 %v0_10234, 1
  store i32 %v1_10234, i32* @ip, align 4
  %v4_10238 = mul nuw nsw i32 %v4_10230, 256
  %v5_10238 = or i32 %v4_10238, %v4_1022c
  store i32 %v5_10238, i32* @r2, align 4
  %v9_1023c = icmp eq i32 %v5_10238, %v1_10234
  store i1 %v9_1023c, i1* @cpsr_z, align 1
  %v8_10240 = icmp sgt i32 %v5_10238, %v1_10234
  br i1 %v8_10240, label %dec_label_pc_101ec, label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %dec_label_pc_101ec
  %v2_10244 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10244, i32* @r4, align 4
  ret i32 %v1_101e0

; uselistorder directives
  uselistorder i32 %v1_10234, { 1, 2, 3, 0 }
  uselistorder i32 %v0_1022c, { 1, 0 }
  uselistorder i32 %v1_101e0, { 0, 2, 1 }
  uselistorder i32 %v2_101bc, { 3, 0, 1, 2, 4 }
}

define i32 @function_10250(i32 %arg1) local_unnamed_addr {
dec_label_pc_10250:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10250 = mul i32 %arg1, 8
  %v3_10254 = load i32, i32* @r4, align 4
  store i32 %v3_10254, i32* %stack_var_-20, align 4
  %v3_10264 = and i32 %v3_10250, 2040
  %v2_10268 = add i32 %v3_10264, ptrtoint (i32* @global_var_1c25c.205 to i32)
  store i32 %v2_10268, i32* @lr, align 4
  %v1_10270 = add i32 %v3_10264, add (i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32 4)
  store i32 %v1_10270, i32* %r7.global-to-local, align 4
  %v2_10274 = load i32, i32* @global_var_1c02c.208, align 4
  store i32 %v2_10274, i32* @r2, align 4
  %v2_10278 = inttoptr i32 %v1_10270 to i8*
  %v3_10278 = load i8, i8* %v2_10278, align 4
  %v4_10278 = zext i8 %v3_10278 to i32
  %v1_1027c = add i32 %v3_10264, add (i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32 5)
  %v2_1027c = inttoptr i32 %v1_1027c to i8*
  %v3_1027c = load i8, i8* %v2_1027c, align 1
  %v4_1027c = zext i8 %v3_1027c to i32
  %v3_10280 = udiv i32 %v2_10274, 256
  %v4_10284 = mul nuw nsw i32 %v4_1027c, 256
  %v5_10284 = or i32 %v4_10284, %v4_10278
  %v7_10284 = icmp eq i32 %v5_10284, 0
  %v3_10288 = udiv i32 %v2_10274, 65536
  %v1_1028c = urem i32 %v3_10280, 256
  store i32 %v1_1028c, i32* %r6.global-to-local, align 4
  %v1_10290 = urem i32 %v3_10288, 256
  store i32 %v1_10290, i32* %r5.global-to-local, align 4
  %v3_10294 = udiv i32 %v2_10274, 16777216
  store i32 %v3_10294, i32* %r4.global-to-local, align 4
  %v1_10298 = urem i32 %v2_10274, 256
  br i1 %v7_10284, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10250
  store i32 %v3_10254, i32* @r4, align 4
  ret i32 %v1_10298

bb8:                                              ; preds = %dec_label_pc_10250
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_102a4

dec_label_pc_102a4:                               ; preds = %dec_label_pc_102a4, %bb8
  %v2_102b0 = phi i32 [ %v1_102ec, %dec_label_pc_102a4 ], [ 0, %bb8 ]
  %v0_102a4 = phi i32 [ %v0_102e4, %dec_label_pc_102a4 ], [ %v2_10268, %bb8 ]
  %v1_102a4 = inttoptr i32 %v0_102a4 to i32*
  %v2_102a4 = load i32, i32* %v1_102a4, align 4
  %v2_102a8 = add i32 %v2_102a4, %v2_102b0
  %v3_102a8 = inttoptr i32 %v2_102a8 to i8*
  %v4_102a8 = load i8, i8* %v3_102a8, align 1
  %v6_102a8 = zext i8 %v4_102a8 to i32
  %v2_102ac = xor i32 %v6_102a8, %v1_10298
  %v1_102b0 = trunc i32 %v2_102ac to i8
  store i8 %v1_102b0, i8* %v3_102a8, align 1
  %v0_102b4 = load i32, i32* @lr, align 4
  %v1_102b4 = inttoptr i32 %v0_102b4 to i32*
  %v2_102b4 = load i32, i32* %v1_102b4, align 4
  %v0_102b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_102b8 = add i32 %v0_102b8, %v2_102b4
  %v3_102b8 = inttoptr i32 %v2_102b8 to i8*
  %v4_102b8 = load i8, i8* %v3_102b8, align 1
  %v6_102b8 = zext i8 %v4_102b8 to i32
  %v0_102bc = load i32, i32* %r6.global-to-local, align 4
  %v2_102bc = xor i32 %v0_102bc, %v6_102b8
  %v1_102c0 = trunc i32 %v2_102bc to i8
  store i8 %v1_102c0, i8* %v3_102b8, align 1
  %v0_102c4 = load i32, i32* @lr, align 4
  %v1_102c4 = inttoptr i32 %v0_102c4 to i32*
  %v2_102c4 = load i32, i32* %v1_102c4, align 4
  %v0_102c8 = load i32, i32* %ip.global-to-local, align 4
  %v2_102c8 = add i32 %v0_102c8, %v2_102c4
  %v3_102c8 = inttoptr i32 %v2_102c8 to i8*
  %v4_102c8 = load i8, i8* %v3_102c8, align 1
  %v6_102c8 = zext i8 %v4_102c8 to i32
  %v0_102cc = load i32, i32* %r5.global-to-local, align 4
  %v2_102cc = xor i32 %v0_102cc, %v6_102c8
  %v1_102d0 = trunc i32 %v2_102cc to i8
  store i8 %v1_102d0, i8* %v3_102c8, align 1
  %v0_102d4 = load i32, i32* @lr, align 4
  %v1_102d4 = inttoptr i32 %v0_102d4 to i32*
  %v2_102d4 = load i32, i32* %v1_102d4, align 4
  %v0_102d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_102d8 = add i32 %v0_102d8, %v2_102d4
  %v3_102d8 = inttoptr i32 %v2_102d8 to i8*
  %v4_102d8 = load i8, i8* %v3_102d8, align 1
  %v6_102d8 = zext i8 %v4_102d8 to i32
  %v0_102dc = load i32, i32* %r4.global-to-local, align 4
  %v2_102dc = xor i32 %v0_102dc, %v6_102d8
  %v1_102e0 = trunc i32 %v2_102dc to i8
  store i8 %v1_102e0, i8* %v3_102d8, align 1
  %v0_102e4 = load i32, i32* @lr, align 4
  %v1_102e4 = add i32 %v0_102e4, 4
  %v2_102e4 = inttoptr i32 %v1_102e4 to i8*
  %v3_102e4 = load i8, i8* %v2_102e4, align 1
  %v4_102e4 = zext i8 %v3_102e4 to i32
  %v0_102e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_102e8 = add i32 %v0_102e8, 1
  %v2_102e8 = inttoptr i32 %v1_102e8 to i8*
  %v3_102e8 = load i8, i8* %v2_102e8, align 1
  %v4_102e8 = zext i8 %v3_102e8 to i32
  %v0_102ec = load i32, i32* %ip.global-to-local, align 4
  %v1_102ec = add i32 %v0_102ec, 1
  store i32 %v1_102ec, i32* %ip.global-to-local, align 4
  %v4_102f0 = mul nuw nsw i32 %v4_102e8, 256
  %v5_102f0 = or i32 %v4_102f0, %v4_102e4
  store i32 %v5_102f0, i32* @r2, align 4
  %v8_102f8 = icmp sgt i32 %v5_102f0, %v1_102ec
  br i1 %v8_102f8, label %dec_label_pc_102a4, label %dec_label_pc_102fc

dec_label_pc_102fc:                               ; preds = %dec_label_pc_102a4
  %v2_102fc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_102fc, i32* @r4, align 4
  ret i32 %v1_10298

; uselistorder directives
  uselistorder i32 %v1_102ec, { 1, 2, 0 }
  uselistorder i32 %v0_102e4, { 1, 0 }
  uselistorder i32 %v1_10298, { 0, 2, 1 }
  uselistorder i32 %v2_10274, { 3, 0, 1, 2, 4 }
}

define i32 @function_10308(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10308:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10308 = load i32, i32* @r4, align 4
  store i32 %v3_10308, i32* %stack_var_-36, align 4
  %v9_10308 = load i32, i32* @r6, align 4
  %v12_10308 = load i32, i32* @r7, align 4
  %v1_10310 = call i32 @function_11b7c(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1c25c.205 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_10310, i32* @r7, align 4
  %v3_1032c = call i32 @function_10898(i32 %v1_10310, i32 ptrtoint (i32* @global_var_13a2c.213 to i32), i32 2)
  %v0_10330 = load i32, i32* @r5, align 4
  %v0_10334 = load i32, i32* @r7, align 4
  store i32 %v0_10334, i32* @global_var_1c264.214, align 4
  %v1_10338 = trunc i32 %v0_10330 to i8
  store i8 %v1_10338, i8* bitcast (i32* @global_var_1c268.215 to i8*), align 4
  %v0_1033c = load i32, i32* @r6, align 4
  %v1_1033c = trunc i32 %v0_1033c to i8
  store i8 %v1_1033c, i8* bitcast (i32* @global_var_1c269.216 to i8*), align 4
  %v1_10340 = call i32 @function_11b7c(i32 %v0_10330)
  %v0_10344 = load i32, i32* @r5, align 4
  store i32 %v1_10340, i32* @r7, align 4
  %v3_10350 = call i32 @function_10898(i32 %v1_10340, i32 ptrtoint (i32* @global_var_13a30.218 to i32), i32 %v0_10344)
  %v0_10358 = load i32, i32* @r7, align 4
  store i32 %v0_10358, i32* @global_var_1c26c.219, align 4
  %v0_1035c = load i32, i32* @r5, align 4
  %v1_1035c = trunc i32 %v0_1035c to i8
  store i8 %v1_1035c, i8* bitcast (i32* @global_var_1c270.220 to i8*), align 4
  %v0_10360 = load i32, i32* @r6, align 4
  %v1_10360 = trunc i32 %v0_10360 to i8
  store i8 %v1_10360, i8* bitcast (i32* @global_var_1c271.221 to i8*), align 4
  %v1_10364 = call i32 @function_11b7c(i32 29)
  store i32 %v1_10364, i32* @r5, align 4
  %v3_10374 = call i32 @function_10898(i32 %v1_10364, i32 ptrtoint (i32* @global_var_13b98.223 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1c278.224 to i8*), align 4
  %v0_10384 = load i32, i32* @r5, align 4
  store i32 %v0_10384, i32* @global_var_1c274.225, align 4
  %v0_10388 = load i32, i32* @r6, align 4
  %v1_10388 = trunc i32 %v0_10388 to i8
  store i8 %v1_10388, i8* bitcast (i32* @global_var_1c279.226 to i8*), align 4
  %v1_1038c = call i32 @function_11b7c(i32 6)
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v1_1038c, i32* @r5, align 4
  %v4_103a0 = call i32 @function_10898(i32 %v1_1038c, i32 ptrtoint ([7 x i8]* @global_var_13a34.228 to i32), i32 6)
  %v0_103a8 = load i32, i32* @r5, align 4
  store i32 %v0_103a8, i32* @global_var_1c27c.229, align 4
  store i8 6, i8* bitcast (i32* @global_var_1c280.230 to i8*), align 4
  %v0_103b0 = load i32, i32* @r6, align 4
  %v1_103b0 = trunc i32 %v0_103b0 to i8
  store i8 %v1_103b0, i8* bitcast (i32* @global_var_1c281.231 to i8*), align 4
  %v1_103b4 = call i32 @function_11b7c(i32 7)
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v1_103b4, i32* @r5, align 4
  %v4_103c8 = call i32 @function_10898(i32 %v1_103b4, i32 ptrtoint ([8 x i8]* @global_var_13a3c.233 to i32), i32 7)
  %v0_103d0 = load i32, i32* @r5, align 4
  store i32 %v0_103d0, i32* @global_var_1c284.234, align 4
  store i8 7, i8* bitcast (i32* @global_var_1c288.235 to i8*), align 4
  %v0_103d8 = load i32, i32* @r6, align 4
  %v1_103d8 = trunc i32 %v0_103d8 to i8
  store i8 %v1_103d8, i8* bitcast (i32* @global_var_1c289.236 to i8*), align 4
  %v1_103dc = call i32 @function_11b7c(i32 7)
  %v0_103e4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_103dc, i32* @r5, align 4
  %v4_103ec = call i32 @function_10898(i32 %v1_103dc, i32 ptrtoint ([8 x i8]* @global_var_13a44.238 to i32), i32 %v0_103e4)
  %v0_103f4 = load i32, i32* @r5, align 4
  store i32 %v0_103f4, i32* @global_var_1c28c.239, align 4
  %v1_103f8 = trunc i32 %v0_103e4 to i8
  store i8 %v1_103f8, i8* bitcast (i32* @global_var_1c290.240 to i8*), align 4
  %v0_103fc = load i32, i32* @r6, align 4
  %v1_103fc = trunc i32 %v0_103fc to i8
  store i8 %v1_103fc, i8* bitcast (i32* @global_var_1c291.241 to i8*), align 4
  %v1_10400 = call i32 @function_11b7c(i32 3)
  store i32 %v1_10400, i32* @r5, align 4
  %v4_10410 = call i32 @function_10898(i32 %v1_10400, i32 ptrtoint ([4 x i8]* @global_var_13a4c.243 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1c298.244 to i8*), align 4
  %v0_10420 = load i32, i32* @r5, align 4
  store i32 %v0_10420, i32* @global_var_1c294.245, align 4
  %v0_10424 = load i32, i32* @r6, align 4
  %v1_10424 = trunc i32 %v0_10424 to i8
  store i8 %v1_10424, i8* bitcast (i32* @global_var_1c299.246 to i8*), align 4
  %v1_10428 = call i32 @function_11b7c(i32 19)
  store i32 %v1_10428, i32* @r5, align 4
  %v3_10438 = call i32 @function_10898(i32 %v1_10428, i32 ptrtoint (i32* @global_var_13a50.248 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1c2a0.249 to i8*), align 4
  %v0_10448 = load i32, i32* @r5, align 4
  store i32 %v0_10448, i32* @global_var_1c29c.250, align 4
  %v0_1044c = load i32, i32* @r6, align 4
  %v1_1044c = trunc i32 %v0_1044c to i8
  store i8 %v1_1044c, i8* bitcast (i32* @global_var_1c2a1.251 to i8*), align 4
  %v1_10450 = call i32 @function_11b7c(i32 24)
  store i32 %v1_10450, i32* @r5, align 4
  %v3_10460 = call i32 @function_10898(i32 %v1_10450, i32 ptrtoint (i32* @global_var_13a64.253 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1c2a8.254 to i8*), align 4
  %v0_10470 = load i32, i32* @r5, align 4
  store i32 %v0_10470, i32* @global_var_1c2a4.255, align 4
  %v0_10474 = load i32, i32* @r6, align 4
  %v1_10474 = trunc i32 %v0_10474 to i8
  store i8 %v1_10474, i8* bitcast (i32* @global_var_1c2a9.256 to i8*), align 4
  %v1_10478 = call i32 @function_11b7c(i32 9)
  store i32 %v1_10478, i32* @r5, align 4
  %v4_10488 = call i32 @function_10898(i32 %v1_10478, i32 ptrtoint ([10 x i8]* @global_var_13a80.258 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1c2b0.259 to i8*), align 4
  %v0_10498 = load i32, i32* @r5, align 4
  store i32 %v0_10498, i32* @global_var_1c2ac.260, align 4
  %v0_1049c = load i32, i32* @r6, align 4
  %v1_1049c = trunc i32 %v0_1049c to i8
  store i8 %v1_1049c, i8* bitcast (i32* @global_var_1c2b1.261 to i8*), align 4
  %v1_104a0 = call i32 @function_11b7c(i32 16)
  store i32 %v1_104a0, i32* @r5, align 4
  store i32 16, i32* %sb.global-to-local, align 4
  %v4_104b4 = call i32 @function_10898(i32 %v1_104a0, i32 ptrtoint ([17 x i8]* @global_var_13a8c.263 to i32), i32 16)
  %v0_104bc = load i32, i32* @r5, align 4
  store i32 %v0_104bc, i32* @global_var_1c2b4.264, align 4
  store i8 16, i8* bitcast (i32* @global_var_1c2b8.265 to i8*), align 4
  %v0_104c4 = load i32, i32* @r6, align 4
  %v1_104c4 = trunc i32 %v0_104c4 to i8
  store i8 %v1_104c4, i8* bitcast (i32* @global_var_1c2b9.266 to i8*), align 4
  %v1_104c8 = call i32 @function_11b7c(i32 22)
  store i32 %v1_104c8, i32* @r5, align 4
  %v4_104d8 = call i32 @function_10898(i32 %v1_104c8, i32 ptrtoint ([23 x i8]* @global_var_13aa0.268 to i32), i32 22)
  %v0_104e0 = load i32, i32* %r8.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1c2c0.269 to i8*), align 4
  %v0_104e8 = load i32, i32* @r5, align 4
  store i32 %v0_104e8, i32* @global_var_1c2bc.270, align 4
  %v0_104ec = load i32, i32* @r6, align 4
  %v1_104ec = trunc i32 %v0_104ec to i8
  store i8 %v1_104ec, i8* bitcast (i32* @global_var_1c2c1.271 to i8*), align 4
  %v1_104f0 = call i32 @function_11b7c(i32 %v0_104e0)
  %v0_104f8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_104f0, i32* @r5, align 4
  %v4_10500 = call i32 @function_10898(i32 %v1_104f0, i32 ptrtoint ([8 x i8]* @global_var_13ab8.273 to i32), i32 %v0_104f8)
  %v0_10508 = load i32, i32* @r5, align 4
  store i32 %v0_10508, i32* @global_var_1c2c4.274, align 4
  %v1_1050c = trunc i32 %v0_104f8 to i8
  store i8 %v1_1050c, i8* bitcast (i32* @global_var_1c2c8.275 to i8*), align 4
  %v0_10510 = load i32, i32* @r6, align 4
  %v1_10510 = trunc i32 %v0_10510 to i8
  store i8 %v1_10510, i8* bitcast (i32* @global_var_1c2c9.276 to i8*), align 4
  %v1_10514 = call i32 @function_11b7c(i32 5)
  store i32 %v1_10514, i32* @r5, align 4
  %v4_10524 = call i32 @function_10898(i32 %v1_10514, i32 ptrtoint ([6 x i8]* @global_var_13ac0.278 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1c2d0.279 to i8*), align 4
  %v0_10534 = load i32, i32* @r5, align 4
  store i32 %v0_10534, i32* @global_var_1c2cc.280, align 4
  %v0_10538 = load i32, i32* @r6, align 4
  %v1_10538 = trunc i32 %v0_10538 to i8
  store i8 %v1_10538, i8* bitcast (i32* @global_var_1c2d1.281 to i8*), align 4
  %v1_1053c = call i32 @function_11b7c(i32 4)
  store i32 %v1_1053c, i32* @r5, align 4
  %v4_1054c = call i32 @function_10898(i32 %v1_1053c, i32 ptrtoint ([5 x i8]* @global_var_13ac8.283 to i32), i32 4)
  %v0_10554 = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1c2d8.284 to i8*), align 4
  %v0_1055c = load i32, i32* @r5, align 4
  store i32 %v0_1055c, i32* @global_var_1c2d4.285, align 4
  %v0_10560 = load i32, i32* @r6, align 4
  %v1_10560 = trunc i32 %v0_10560 to i8
  store i8 %v1_10560, i8* bitcast (i32* @global_var_1c2d9.286 to i8*), align 4
  %v1_10564 = call i32 @function_11b7c(i32 %v0_10554)
  %v0_1056c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10564, i32* @r5, align 4
  %v4_10574 = call i32 @function_10898(i32 %v1_10564, i32 ptrtoint ([7 x i8]* @global_var_13ad0.288 to i32), i32 %v0_1056c)
  %v0_1057c = load i32, i32* @r5, align 4
  store i32 %v0_1057c, i32* @global_var_1c2dc.289, align 4
  %v1_10580 = trunc i32 %v0_1056c to i8
  store i8 %v1_10580, i8* bitcast (i32* @global_var_1c2e0.290 to i8*), align 4
  %v0_10584 = load i32, i32* @r6, align 4
  %v1_10584 = trunc i32 %v0_10584 to i8
  store i8 %v1_10584, i8* bitcast (i32* @global_var_1c2e1.291 to i8*), align 4
  %v1_10588 = call i32 @function_11b7c(i32 14)
  store i32 %v1_10588, i32* @r5, align 4
  store i32 14, i32* %sl.global-to-local, align 4
  %v4_1059c = call i32 @function_10898(i32 %v1_10588, i32 ptrtoint ([15 x i8]* @global_var_13ad8.293 to i32), i32 14)
  %v0_105a4 = load i32, i32* @r5, align 4
  store i32 %v0_105a4, i32* @global_var_1c2e4.294, align 4
  store i8 14, i8* bitcast (i32* @global_var_1c2e8.295 to i8*), align 4
  %v0_105ac = load i32, i32* @r6, align 4
  %v1_105ac = trunc i32 %v0_105ac to i8
  store i8 %v1_105ac, i8* bitcast (i32* @global_var_1c2e9.296 to i8*), align 4
  %v1_105b0 = call i32 @function_11b7c(i32 8)
  store i32 8, i32* @r7, align 4
  store i32 %v1_105b0, i32* @r5, align 4
  %v4_105c4 = call i32 @function_10898(i32 %v1_105b0, i32 ptrtoint ([9 x i8]* @global_var_13ae8.298 to i32), i32 8)
  %v0_105c8 = load i32, i32* %r8.global-to-local, align 4
  %v0_105cc = load i32, i32* @r5, align 4
  store i32 %v0_105cc, i32* @global_var_1c344.299, align 4
  %v0_105d0 = load i32, i32* @r7, align 4
  %v1_105d0 = trunc i32 %v0_105d0 to i8
  store i8 %v1_105d0, i8* bitcast (i32* @global_var_1c348.300 to i8*), align 4
  %v0_105d4 = load i32, i32* @r6, align 4
  %v1_105d4 = trunc i32 %v0_105d4 to i8
  store i8 %v1_105d4, i8* bitcast (i32* @global_var_1c349.301 to i8*), align 4
  %v1_105d8 = call i32 @function_11b7c(i32 %v0_105c8)
  %v0_105e0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_105d8, i32* @r5, align 4
  %v4_105e8 = call i32 @function_10898(i32 %v1_105d8, i32 ptrtoint ([8 x i8]* @global_var_13af4.303 to i32), i32 %v0_105e0)
  %v0_105ec = load i32, i32* %sb.global-to-local, align 4
  %v0_105f0 = load i32, i32* @r5, align 4
  store i32 %v0_105f0, i32* @global_var_1c34c.304, align 4
  %v1_105f4 = trunc i32 %v0_105e0 to i8
  store i8 %v1_105f4, i8* bitcast (i32* @global_var_1c350.305 to i8*), align 4
  %v0_105f8 = load i32, i32* @r6, align 4
  %v1_105f8 = trunc i32 %v0_105f8 to i8
  store i8 %v1_105f8, i8* bitcast (i32* @global_var_1c351.306 to i8*), align 4
  %v1_105fc = call i32 @function_11b7c(i32 %v0_105ec)
  %v0_10604 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_105fc, i32* @r5, align 4
  %v4_1060c = call i32 @function_10898(i32 %v1_105fc, i32 ptrtoint ([17 x i8]* @global_var_13afc.308 to i32), i32 %v0_10604)
  %v0_10610 = load i32, i32* @r7, align 4
  %v0_10614 = load i32, i32* @r5, align 4
  store i32 %v0_10614, i32* @global_var_1c2ec.309, align 4
  %v1_10618 = trunc i32 %v0_10604 to i8
  store i8 %v1_10618, i8* bitcast (i32* @global_var_1c2f0.310 to i8*), align 4
  %v0_1061c = load i32, i32* @r6, align 4
  %v1_1061c = trunc i32 %v0_1061c to i8
  store i8 %v1_1061c, i8* bitcast (i32* @global_var_1c2f1.311 to i8*), align 4
  %v1_10620 = call i32 @function_11b7c(i32 %v0_10610)
  %v0_10628 = load i32, i32* @r7, align 4
  store i32 %v1_10620, i32* @r5, align 4
  %v4_10630 = call i32 @function_10898(i32 %v1_10620, i32 ptrtoint ([9 x i8]* @global_var_13b10.313 to i32), i32 %v0_10628)
  %v0_10638 = load i32, i32* @r5, align 4
  store i32 %v0_10638, i32* @global_var_1c2f4.314, align 4
  %v0_1063c = load i32, i32* @r7, align 4
  %v1_1063c = trunc i32 %v0_1063c to i8
  store i8 %v1_1063c, i8* bitcast (i32* @global_var_1c2f8.315 to i8*), align 4
  %v0_10640 = load i32, i32* @r6, align 4
  %v1_10640 = trunc i32 %v0_10640 to i8
  store i8 %v1_10640, i8* bitcast (i32* @global_var_1c2f9.316 to i8*), align 4
  %v1_10644 = call i32 @function_11b7c(i32 21)
  store i32 %v1_10644, i32* @r5, align 4
  %v3_10654 = call i32 @function_10898(i32 %v1_10644, i32 ptrtoint (i32* @global_var_13bb8.318 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1c300.319 to i8*), align 4
  %v0_10664 = load i32, i32* @r5, align 4
  store i32 %v0_10664, i32* @global_var_1c2fc.320, align 4
  %v0_10668 = load i32, i32* @r6, align 4
  %v1_10668 = trunc i32 %v0_10668 to i8
  store i8 %v1_10668, i8* bitcast (i32* @global_var_1c301.321 to i8*), align 4
  %v1_1066c = call i32 @function_11b7c(i32 17)
  store i32 %v1_1066c, i32* @r5, align 4
  %v4_1067c = call i32 @function_10898(i32 %v1_1066c, i32 ptrtoint ([18 x i8]* @global_var_13b1c.323 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1c308.324 to i8*), align 4
  %v0_1068c = load i32, i32* @r5, align 4
  store i32 %v0_1068c, i32* @global_var_1c304.325, align 4
  %v0_10690 = load i32, i32* @r6, align 4
  %v1_10690 = trunc i32 %v0_10690 to i8
  store i8 %v1_10690, i8* bitcast (i32* @global_var_1c309.326 to i8*), align 4
  %v1_10694 = call i32 @function_11b7c(i32 12)
  store i32 %v1_10694, i32* @r5, align 4
  %v4_106a4 = call i32 @function_10898(i32 %v1_10694, i32 ptrtoint ([13 x i8]* @global_var_13b30.328 to i32), i32 12)
  %v0_106ac = load i32, i32* %sl.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1c310.329 to i8*), align 4
  %v0_106b4 = load i32, i32* @r5, align 4
  store i32 %v0_106b4, i32* @global_var_1c30c.330, align 4
  %v0_106b8 = load i32, i32* @r6, align 4
  %v1_106b8 = trunc i32 %v0_106b8 to i8
  store i8 %v1_106b8, i8* bitcast (i32* @global_var_1c311.331 to i8*), align 4
  %v1_106bc = call i32 @function_11b7c(i32 %v0_106ac)
  %v0_106c4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_106bc, i32* @r5, align 4
  %v4_106cc = call i32 @function_10898(i32 %v1_106bc, i32 ptrtoint ([15 x i8]* @global_var_13b40.333 to i32), i32 %v0_106c4)
  %v0_106d4 = load i32, i32* @r5, align 4
  store i32 %v0_106d4, i32* @global_var_1c314.334, align 4
  %v1_106d8 = trunc i32 %v0_106c4 to i8
  store i8 %v1_106d8, i8* bitcast (i32* @global_var_1c318.335 to i8*), align 4
  %v0_106dc = load i32, i32* @r6, align 4
  %v1_106dc = trunc i32 %v0_106dc to i8
  store i8 %v1_106dc, i8* bitcast (i32* @global_var_1c319.336 to i8*), align 4
  %v1_106e0 = call i32 @function_11b7c(i32 19)
  store i32 %v1_106e0, i32* @r5, align 4
  %v4_106f0 = call i32 @function_10898(i32 %v1_106e0, i32 ptrtoint ([20 x i8]* @global_var_13b50.338 to i32), i32 19)
  %v0_106f8 = load i32, i32* @r7, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c320.339 to i8*), align 4
  %v0_10700 = load i32, i32* @r5, align 4
  store i32 %v0_10700, i32* @global_var_1c31c.340, align 4
  %v0_10704 = load i32, i32* @r6, align 4
  %v1_10704 = trunc i32 %v0_10704 to i8
  store i8 %v1_10704, i8* bitcast (i32* @global_var_1c321.341 to i8*), align 4
  %v1_10708 = call i32 @function_11b7c(i32 %v0_106f8)
  %v0_10710 = load i32, i32* @r7, align 4
  store i32 %v1_10708, i32* @r5, align 4
  %v4_10718 = call i32 @function_10898(i32 %v1_10708, i32 ptrtoint ([9 x i8]* @global_var_13b64.343 to i32), i32 %v0_10710)
  %v0_10720 = load i32, i32* @r5, align 4
  store i32 %v0_10720, i32* @global_var_1c324.344, align 4
  %v0_10724 = load i32, i32* @r7, align 4
  %v1_10724 = trunc i32 %v0_10724 to i8
  store i8 %v1_10724, i8* bitcast (i32* @global_var_1c328.345 to i8*), align 4
  %v0_10728 = load i32, i32* @r6, align 4
  %v1_10728 = trunc i32 %v0_10728 to i8
  store i8 %v1_10728, i8* bitcast (i32* @global_var_1c329.346 to i8*), align 4
  %v1_1072c = call i32 @function_11b7c(i32 5)
  store i32 %v1_1072c, i32* @r5, align 4
  %v4_1073c = call i32 @function_10898(i32 %v1_1072c, i32 ptrtoint ([6 x i8]* @global_var_13b70.348 to i32), i32 5)
  %v0_10744 = load i32, i32* %fp.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1c330.349 to i8*), align 4
  %v0_1074c = load i32, i32* @r5, align 4
  store i32 %v0_1074c, i32* @global_var_1c32c.350, align 4
  %v0_10750 = load i32, i32* @r6, align 4
  %v1_10750 = trunc i32 %v0_10750 to i8
  store i8 %v1_10750, i8* bitcast (i32* @global_var_1c331.351 to i8*), align 4
  %v1_10754 = call i32 @function_11b7c(i32 %v0_10744)
  %v0_1075c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10754, i32* @r5, align 4
  %v4_10764 = call i32 @function_10898(i32 %v1_10754, i32 ptrtoint ([7 x i8]* @global_var_13b78.353 to i32), i32 %v0_1075c)
  %v0_1076c = load i32, i32* @r5, align 4
  store i32 %v0_1076c, i32* @global_var_1c334.354, align 4
  %v1_10770 = trunc i32 %v0_1075c to i8
  store i8 %v1_10770, i8* bitcast (i32* @global_var_1c338.355 to i8*), align 4
  %v0_10774 = load i32, i32* @r6, align 4
  %v1_10774 = trunc i32 %v0_10774 to i8
  store i8 %v1_10774, i8* bitcast (i32* @global_var_1c339.356 to i8*), align 4
  %v1_10778 = call i32 @function_11b7c(i32 23)
  %v4_10788 = call i32 @function_10898(i32 %v1_10778, i32 ptrtoint ([24 x i8]* @global_var_13b80.358 to i32), i32 23)
  %v0_10790 = load i32, i32* @r6, align 4
  %v1_10790 = trunc i32 %v0_10790 to i8
  store i8 %v1_10790, i8* bitcast (i32* @global_var_1c341.359 to i8*), align 4
  store i32 %v1_10778, i32* @global_var_1c33c.360, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c340.361 to i8*), align 4
  %v2_1079c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1079c, i32* @r4, align 4
  store i32 %v9_10308, i32* @r6, align 4
  store i32 %v12_10308, i32* @r7, align 4
  ret i32 %v4_10788

; uselistorder directives
  uselistorder i32 %v1_10754, { 1, 0 }
  uselistorder i32 %v1_10708, { 1, 0 }
  uselistorder i32 %v1_106bc, { 1, 0 }
  uselistorder i32 %v1_10620, { 1, 0 }
  uselistorder i32 %v1_105fc, { 1, 0 }
  uselistorder i32 %v1_105d8, { 1, 0 }
  uselistorder i32 %v1_105b0, { 1, 0 }
  uselistorder i32 %v1_10564, { 1, 0 }
  uselistorder i32 %v1_104f0, { 1, 0 }
  uselistorder i32 %v1_103dc, { 1, 0 }
  uselistorder i32 %v1_103b4, { 1, 0 }
  uselistorder i32 %v1_1038c, { 1, 0 }
  uselistorder i32 %v1_10340, { 1, 0 }
  uselistorder i32 %v1_10310, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 12, 13, 14, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i8 16, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 (i32, i32, i32)* @function_10898, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c25c.205 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_1081c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1081c:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_10820 = load i8, i8* %arg1, align 1
  %v4_10820 = zext i8 %v3_10820 to i32
  %v2_10824 = icmp eq i8 %v3_10820, 0
  br i1 %v2_10824, label %dec_label_pc_10840, label %bb

dec_label_pc_10840:                               ; preds = %dec_label_pc_10830, %dec_label_pc_1081c
  %merge = phi i32 [ %v4_10820, %dec_label_pc_1081c ], [ %v1_10830, %dec_label_pc_10830 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_1081c
  br label %dec_label_pc_10830

dec_label_pc_10830:                               ; preds = %dec_label_pc_10830, %bb
  %v0_10830 = phi i32 [ %v1_10830, %dec_label_pc_10830 ], [ 0, %bb ]
  %v1_10830 = add i32 %v0_10830, 1
  %v2_10834 = add i32 %v1_10830, %tmp
  %v3_10834 = inttoptr i32 %v2_10834 to i8*
  %v4_10834 = load i8, i8* %v3_10834, align 1
  %v2_10838 = icmp eq i8 %v4_10834, 0
  br i1 %v2_10838, label %dec_label_pc_10840, label %dec_label_pc_10830

; uselistorder directives
  uselistorder i32 %v1_10830, { 1, 0, 2 }
}

define i32 @function_10844(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10844:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10844 = load i8, i8* %arg1, align 1
  %v3_10844 = zext i8 %v2_10844 to i32
  %v2_10848 = icmp eq i8 %v2_10844, 0
  br i1 %v2_10848, label %dec_label_pc_1088c, label %dec_label_pc_10850

dec_label_pc_10850:                               ; preds = %dec_label_pc_10844
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10854

dec_label_pc_10854:                               ; preds = %dec_label_pc_10854, %dec_label_pc_10850
  %v0_10854 = phi i32 [ %v1_10854, %dec_label_pc_10854 ], [ 0, %dec_label_pc_10850 ]
  %v1_10854 = add i32 %v0_10854, 1
  store i32 %v1_10854, i32* %ip.global-to-local, align 4
  %v2_10858 = add i32 %v1_10854, %tmp
  %v3_10858 = inttoptr i32 %v2_10858 to i8*
  %v4_10858 = load i8, i8* %v3_10858, align 1
  %v2_1085c = icmp eq i8 %v4_10858, 0
  br i1 %v2_1085c, label %dec_label_pc_10864, label %dec_label_pc_10854

dec_label_pc_10864:                               ; preds = %dec_label_pc_10854
  %v7_10864 = icmp eq i32 %v0_10854, -2
  br i1 %v7_10864, label %dec_label_pc_10884, label %dec_label_pc_10870.preheader

dec_label_pc_10870.preheader:                     ; preds = %dec_label_pc_10864, %dec_label_pc_1088c
  %storemerge = phi i32 [ %v3_10844, %dec_label_pc_1088c ], [ %v1_10854, %dec_label_pc_10864 ]
  %v2_1087c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_10870

dec_label_pc_10870:                               ; preds = %dec_label_pc_10870.dec_label_pc_10870_crit_edge, %dec_label_pc_10870.preheader
  %v2_1087c = phi i32 [ %v5_1087c, %dec_label_pc_10870.dec_label_pc_10870_crit_edge ], [ %v2_1087c.pre, %dec_label_pc_10870.preheader ]
  %v0_10874 = phi i32 [ %v0_10874.pre, %dec_label_pc_10870.dec_label_pc_10870_crit_edge ], [ %tmp, %dec_label_pc_10870.preheader ]
  %v0_10870 = phi i32 [ %v0_10870.pre, %dec_label_pc_10870.dec_label_pc_10870_crit_edge ], [ %storemerge, %dec_label_pc_10870.preheader ]
  %v1_10870 = add i32 %v0_10870, -1
  store i32 %v1_10870, i32* @r2, align 4
  %v1_10874 = inttoptr i32 %v0_10874 to i8*
  %v2_10874 = load i8, i8* %v1_10874, align 1
  %v5_10874 = add i32 %v0_10874, 1
  store i32 %v5_10874, i32* %r1.global-to-local, align 4
  %v3_10878 = icmp eq i32 %v0_10870, 0
  %v3_1087c = inttoptr i32 %v2_1087c to i8*
  store i8 %v2_10874, i8* %v3_1087c, align 1
  %v4_1087c = load i32, i32* @r0, align 4
  %v5_1087c = add i32 %v4_1087c, 1
  store i32 %v5_1087c, i32* @r0, align 4
  br i1 %v3_10878, label %dec_label_pc_10884.loopexit, label %dec_label_pc_10870.dec_label_pc_10870_crit_edge

dec_label_pc_10870.dec_label_pc_10870_crit_edge:  ; preds = %dec_label_pc_10870
  %v0_10870.pre = load i32, i32* @r2, align 4
  %v0_10874.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10870

dec_label_pc_10884.loopexit:                      ; preds = %dec_label_pc_10870
  %v0_10884.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %dec_label_pc_10884.loopexit, %dec_label_pc_10864
  %v0_10884 = phi i32 [ %v0_10884.pre, %dec_label_pc_10884.loopexit ], [ %v1_10854, %dec_label_pc_10864 ]
  ret i32 %v0_10884

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10844
  store i32 %v3_10844, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10870.preheader

; uselistorder directives
  uselistorder i32 %v5_1087c, { 1, 0 }
  uselistorder i32 %v0_10874, { 1, 0 }
  uselistorder i32 %v1_10854, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_10844, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10870.preheader, { 1, 0 }
}

define i32 @function_10898(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10898:
  %ip.global-to-local = alloca i32, align 4
  %v2_10898 = icmp eq i32 %arg3, 0
  br i1 %v2_10898, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_108a4, %dec_label_pc_10898
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_10898
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_108a4

dec_label_pc_108a4:                               ; preds = %dec_label_pc_108a4, %bb
  %v0_108a4 = phi i32 [ %v1_108ac, %dec_label_pc_108a4 ], [ 0, %bb ]
  %v2_108a4 = add i32 %v0_108a4, %arg2
  %v3_108a4 = inttoptr i32 %v2_108a4 to i8*
  %v4_108a4 = load i8, i8* %v3_108a4, align 1
  %v4_108a8 = add i32 %v0_108a4, %arg1
  %v5_108a8 = inttoptr i32 %v4_108a8 to i8*
  store i8 %v4_108a4, i8* %v5_108a8, align 1
  %v0_108ac = load i32, i32* %ip.global-to-local, align 4
  %v1_108ac = add i32 %v0_108ac, 1
  store i32 %v1_108ac, i32* %ip.global-to-local, align 4
  %v9_108b0 = icmp eq i32 %v1_108ac, %arg3
  br i1 %v9_108b0, label %.loopexit, label %dec_label_pc_108a4

; uselistorder directives
  uselistorder i32 %v1_108ac, { 1, 2, 0 }
}

define i32 @function_108bc() local_unnamed_addr {
dec_label_pc_108bc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_108bc = load i32, i32* @r1, align 4
  %v2_108bc = icmp eq i32 %v0_108bc, 0
  br i1 %v2_108bc, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_108bc
  %v2_108c0 = load i32, i32* @r0, align 4
  ret i32 %v2_108c0

bb3:                                              ; preds = %dec_label_pc_108bc
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108cc

dec_label_pc_108cc:                               ; preds = %dec_label_pc_108cc.dec_label_pc_108cc_crit_edge, %bb3
  %v2_108cc = phi i32 [ %v1_108d0, %dec_label_pc_108cc.dec_label_pc_108cc_crit_edge ], [ 0, %bb3 ]
  %v0_108cc.off0 = phi i8 [ %extract.t, %dec_label_pc_108cc.dec_label_pc_108cc_crit_edge ], [ 0, %bb3 ]
  %v3_108cc = load i32, i32* @r0, align 4
  %v4_108cc = add i32 %v3_108cc, %v2_108cc
  %v5_108cc = inttoptr i32 %v4_108cc to i8*
  store i8 %v0_108cc.off0, i8* %v5_108cc, align 1
  %v0_108d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_108d0 = add i32 %v0_108d0, 1
  store i32 %v1_108d0, i32* %r3.global-to-local, align 4
  %v1_108d4 = load i32, i32* @r1, align 4
  %v9_108d4 = icmp eq i32 %v1_108d0, %v1_108d4
  br i1 %v9_108d4, label %dec_label_pc_108dc, label %dec_label_pc_108cc.dec_label_pc_108cc_crit_edge

dec_label_pc_108cc.dec_label_pc_108cc_crit_edge:  ; preds = %dec_label_pc_108cc
  %v0_108cc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_108cc.pre to i8
  br label %dec_label_pc_108cc

dec_label_pc_108dc:                               ; preds = %dec_label_pc_108cc
  %v1_108dc = load i32, i32* @r0, align 4
  ret i32 %v1_108dc

; uselistorder directives
  uselistorder i32 %v1_108d0, { 1, 2, 0 }
}

define i32 @function_108e0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_108e0:
  %v7_108f4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_108f4, label %dec_label_pc_108f8, label %dec_label_pc_10900

dec_label_pc_108f8:                               ; preds = %dec_label_pc_10914, %dec_label_pc_108e0, %dec_label_pc_10900
  ret i32 -1

dec_label_pc_10900:                               ; preds = %dec_label_pc_108e0
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_108f8, label %dec_label_pc_10908

dec_label_pc_10908:                               ; preds = %dec_label_pc_10900
  br label %dec_label_pc_10920

dec_label_pc_10914:                               ; preds = %dec_label_pc_10938, %dec_label_pc_10920
  %v1_10914 = add i32 %v0_10940, 1
  %v9_10918 = icmp eq i32 %v1_10914, %arg2
  br i1 %v9_10918, label %dec_label_pc_108f8, label %dec_label_pc_10920

dec_label_pc_10920:                               ; preds = %dec_label_pc_10914, %dec_label_pc_10908
  %v0_10940 = phi i32 [ %v1_10914, %dec_label_pc_10914 ], [ 0, %dec_label_pc_10908 ]
  %v0_1092c = phi i32 [ %v1_1092c., %dec_label_pc_10914 ], [ 0, %dec_label_pc_10908 ]
  %v2_10920 = add i32 %v0_1092c, %arg3
  %v3_10920 = inttoptr i32 %v2_10920 to i8*
  %v4_10920 = load i8, i8* %v3_10920, align 1
  %v2_10924 = add i32 %v0_10940, %arg1
  %v3_10924 = inttoptr i32 %v2_10924 to i8*
  %v4_10924 = load i8, i8* %v3_10924, align 1
  %v9_10928 = icmp eq i8 %v4_10924, %v4_10920
  %v1_1092c = add i32 %v0_1092c, 1
  %v1_1092c. = select i1 %v9_10928, i32 %v1_1092c, i32 0
  br i1 %v9_10928, label %dec_label_pc_10938, label %dec_label_pc_10914

dec_label_pc_10938:                               ; preds = %dec_label_pc_10920
  %v9_10938 = icmp eq i32 %v1_1092c., %arg4
  br i1 %v9_10938, label %dec_label_pc_10940, label %dec_label_pc_10914

dec_label_pc_10940:                               ; preds = %dec_label_pc_10938
  %v1_10940 = add i32 %v0_10940, 1
  ret i32 %v1_10940

; uselistorder directives
  uselistorder i1 %v9_10928, { 1, 0 }
  uselistorder i32 %v0_1092c, { 1, 0 }
  uselistorder label %dec_label_pc_108f8, { 0, 2, 1 }
}

define i32 @function_10948(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10948:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10948 = load i32, i32* @r4, align 4
  store i32 %v3_10948, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %.thread, %dec_label_pc_1096c, %bb, %dec_label_pc_10948
  %v0_10954 = phi i32 [ %tmp, %dec_label_pc_10948 ], [ %v5_10954, %bb ], [ %v5_10954, %dec_label_pc_1096c ], [ %v5_10954, %.thread ]
  %v1_10954 = inttoptr i32 %v0_10954 to i8*
  %v2_10954 = load i8, i8* %v1_10954, align 1
  %v3_10954 = zext i8 %v2_10954 to i32
  %v5_10954 = add i32 %v0_10954, 1
  store i32 %v5_10954, i32* %r5.global-to-local, align 4
  %v7_1095c = icmp eq i8 %v2_10954, 9
  br i1 %v7_1095c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10954
  store i32 %v3_10954, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10954

bb:                                               ; preds = %dec_label_pc_10954
  %v8_10960 = icmp eq i8 %v2_10954, 32
  store i32 %v3_10954, i32* %r4.global-to-local, align 4
  br i1 %v8_10960, label %dec_label_pc_10954, label %dec_label_pc_1096c

dec_label_pc_1096c:                               ; preds = %bb
  %v7_1096c = icmp eq i8 %v2_10954, 10
  br i1 %v7_1096c, label %dec_label_pc_10954, label %dec_label_pc_10974

dec_label_pc_10974:                               ; preds = %dec_label_pc_1096c
  %v7_10974 = icmp eq i8 %v2_10954, 45
  br i1 %v7_10974, label %dec_label_pc_10a54, label %dec_label_pc_1097c

dec_label_pc_1097c:                               ; preds = %dec_label_pc_10974
  %v7_1097c = icmp eq i8 %v2_10954, 43
  br i1 %v7_1097c, label %bb48, label %dec_label_pc_1098c

bb48:                                             ; preds = %dec_label_pc_1097c
  %v2_10980 = inttoptr i32 %v5_10954 to i8*
  %v3_10980 = load i8, i8* %v2_10980, align 1
  %v4_10980 = zext i8 %v3_10980 to i32
  store i32 %v4_10980, i32* %r4.global-to-local, align 4
  %v6_10980 = add i32 %v0_10954, 2
  store i32 %v6_10980, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1098c

dec_label_pc_1098c:                               ; preds = %bb48, %dec_label_pc_1097c, %dec_label_pc_10a54
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10a54 ], [ 2147483647, %dec_label_pc_1097c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10a54 ], [ 0, %dec_label_pc_1097c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10994 = call i32 @function_10ea8(i32 %storemerge1, i32 %arg2)
  %v0_10998 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10998, i32* @r1, align 4
  store i32 %v2_10994, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_109a4 = call i32 @function_10d98()
  store i32 %v0_109a4, i32* @lr, align 4
  %v0_109b4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_109b4

dec_label_pc_109b4:                               ; preds = %.thread8, %dec_label_pc_1098c
  %v2_10a3011 = phi i32 [ %v1_10a4c26, %.thread8 ], [ 0, %dec_label_pc_1098c ]
  %v1_10a0c = phi i32 [ %v0_10a4024, %.thread8 ], [ 0, %dec_label_pc_1098c ]
  %v1_109f4 = phi i32 [ %v3_10a38, %.thread8 ], [ %v0_109b4.pre, %dec_label_pc_1098c ]
  %v1_109b4 = urem i32 %v1_109f4, 256
  %v1_109b8 = add nsw i32 %v1_109b4, -48
  %v1_109c0 = add nsw i32 %v1_109b4, -97
  %v1_109c4 = add i32 %v1_109f4, -48
  %v1_109c8 = add nsw i32 %v1_109b4, -65
  %tmp71 = icmp ult i32 %v1_109b8, 10
  br i1 %tmp71, label %dec_label_pc_109f8, label %dec_label_pc_109d0

dec_label_pc_109d0:                               ; preds = %dec_label_pc_109b4
  %v2_109d0 = icmp ugt i32 %v1_109c8, 24
  %v7_109d0 = icmp eq i32 %v1_109c8, 25
  %v2_109d4 = xor i1 %v7_109d0, true
  %v3_109d4 = and i1 %v2_109d0, %v2_109d4
  br i1 %v3_109d4, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_109d0
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_109d0, %bb49
  %v0_109e820 = phi i32 [ %v1_109c4, %dec_label_pc_109d0 ], [ 0, %bb49 ]
  %v2_109d8 = xor i1 %v2_109d0, true
  %v3_109d8 = or i1 %v7_109d0, %v2_109d8
  br i1 %v3_109d8, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_109e8 = phi i32 [ %v0_109e820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_109d4, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_109e0 = icmp ugt i32 %v1_109c0, 24
  %v11_109e0 = icmp eq i32 %v1_109c0, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_109e4 = phi i1 [ %v7_109d0, %bb52 ], [ %v11_109e0, %bb53 ]
  %v0_109e4 = phi i1 [ %v2_109d0, %bb52 ], [ %v6_109e0, %bb53 ]
  %v2_109e4 = xor i1 %v1_109e4, true
  %v3_109e4 = and i1 %v0_109e4, %v2_109e4
  br i1 %v3_109e4, label %dec_label_pc_10a40, label %dec_label_pc_109e8

dec_label_pc_109e8:                               ; preds = %bb54
  %v2_109e8 = icmp eq i32 %v0_109e8, 0
  %. = select i1 %v2_109e8, i32 87, i32 55
  %v2_109f4 = sub i32 %v1_109f4, %.
  br label %dec_label_pc_109f8

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109b4, %dec_label_pc_109e8
  %v0_10a0c34 = phi i32 [ %v1_109c8, %dec_label_pc_109b4 ], [ %., %dec_label_pc_109e8 ]
  %v3_10a3012 = phi i32 [ %v1_109c4, %dec_label_pc_109b4 ], [ %v2_109f4, %dec_label_pc_109e8 ]
  %v1_109f8 = load i32, i32* %r6.global-to-local, align 4
  %v6_109fc = icmp slt i32 %v3_10a3012, %v1_109f8
  br i1 %v6_109fc, label %dec_label_pc_10a00, label %dec_label_pc_10a40

dec_label_pc_10a00:                               ; preds = %dec_label_pc_109f8
  %v3_10a00 = icmp uge i32 %v2_10a3011, %v0_109a4
  %v9_10a00 = icmp eq i32 %v2_10a3011, %v0_109a4
  %v2_10a04 = xor i1 %v3_10a00, true
  %v3_10a04 = or i1 %v9_10a00, %v2_10a04
  br i1 %v3_10a04, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_10a00
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_10a00, %bb57
  %v0_10a0c33 = phi i32 [ %v0_10a0c34, %dec_label_pc_10a00 ], [ 0, %bb57 ]
  %v2_10a08 = xor i1 %v9_10a00, true
  %v3_10a08 = and i1 %v3_10a00, %v2_10a08
  br i1 %v3_10a08, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_10a0c = phi i32 [ %v0_10a0c33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_10a0c, 0
  %v4_10a0c = zext i1 %tmp72 to i32
  %v5_10a0c = or i32 %v0_10a0c, %v4_10a0c
  %v7_10a0c = icmp eq i32 %v5_10a0c, 0
  br i1 %v7_10a0c, label %dec_label_pc_10a18, label %.thread8

dec_label_pc_10a18:                               ; preds = %bb60
  %v1_10a24 = load i32, i32* %r8.global-to-local, align 4
  %v7_10a28 = icmp sgt i32 %v3_10a3012, %v1_10a24
  br i1 %v7_10a28, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_10a18
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_10a18
  %v2_10a2c = icmp eq i1 %v9_10a00, false
  br i1 %v2_10a2c, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_10a3013 = mul i32 %v1_109f8, %v2_10a3011
  %v5_10a3014 = add i32 %v4_10a3013, %v3_10a3012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_10a4c26 = phi i32 [ %v2_10a3011, %bb63 ], [ %v2_10a3011, %bb60 ], [ %v5_10a3014, %bb64 ]
  %v0_10a4024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10a38 = load i32, i32* %r5.global-to-local, align 4
  %v1_10a38 = inttoptr i32 %v0_10a38 to i8*
  %v2_10a38 = load i8, i8* %v1_10a38, align 1
  %v3_10a38 = zext i8 %v2_10a38 to i32
  store i32 %v3_10a38, i32* %r4.global-to-local, align 4
  %v5_10a38 = add i32 %v0_10a38, 1
  store i32 %v5_10a38, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_109b4

dec_label_pc_10a40:                               ; preds = %dec_label_pc_109f8, %bb54
  %v1_10a40 = icmp slt i32 %v1_10a0c, 0
  %v0_10a64 = load i32, i32* %sl.global-to-local, align 4
  %v2_10a64 = icmp eq i32 %v0_10a64, 0
  br i1 %v1_10a40, label %dec_label_pc_10a64, label %dec_label_pc_10a48

dec_label_pc_10a48:                               ; preds = %dec_label_pc_10a40
  br i1 %v2_10a64, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10a48
  %v2_10a4c = sub i32 0, %v2_10a3011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10a48, %bb65
  %v23_10a50 = phi i32 [ %v2_10a3011, %dec_label_pc_10a48 ], [ %v2_10a4c, %bb65 ]
  %v2_10a50 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10a50, i32* @r4, align 4
  ret i32 %v23_10a50

dec_label_pc_10a54:                               ; preds = %dec_label_pc_10974
  %v1_10a54 = inttoptr i32 %v5_10954 to i8*
  %v2_10a54 = load i8, i8* %v1_10a54, align 1
  %v3_10a54 = zext i8 %v2_10a54 to i32
  store i32 %v3_10a54, i32* %r4.global-to-local, align 4
  %v5_10a54 = add i32 %v0_10954, 2
  store i32 %v5_10a54, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1098c

dec_label_pc_10a64:                               ; preds = %dec_label_pc_10a40
  %.70 = select i1 %v2_10a64, i32 2147483647, i32 -2147483648
  %v2_10a70 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10a70, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10a38, { 1, 0 }
  uselistorder i1 %v9_10a00, { 1, 0, 2 }
  uselistorder i1 %v3_10a00, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_109d0, { 1, 2, 0 }
  uselistorder i1 %v2_109d0, { 1, 0, 2 }
  uselistorder i32 %v1_109b4, { 1, 2, 0 }
  uselistorder i32 %v1_109f4, { 1, 2, 0 }
  uselistorder i32 %v1_10a0c, { 1, 0 }
  uselistorder i32 %v2_10a3011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_109a4, { 1, 0, 2 }
  uselistorder i32 %v5_10954, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_10954, { 1, 0 }
  uselistorder i32 %v0_10954, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 2, 0, 1, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_109f8, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1098c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10954, { 1, 2, 0, 3 }
}

define i32 @function_10a74(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a74:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10a74 = load i32, i32* @r4, align 4
  store i32 %v3_10a74, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10a8c

dec_label_pc_10a8c:                               ; preds = %dec_label_pc_10ab8.dec_label_pc_10a8c_crit_edge, %dec_label_pc_10a74
  %v0_10a90 = phi i32 [ %v0_10a90.pre, %dec_label_pc_10ab8.dec_label_pc_10a8c_crit_edge ], [ %arg3, %dec_label_pc_10a74 ]
  %v0_10a8c = phi i32 [ %v1_10aa4, %dec_label_pc_10ab8.dec_label_pc_10a8c_crit_edge ], [ %tmp, %dec_label_pc_10a74 ]
  %tmp12 = inttoptr i32 %v0_10a8c to i32*
  %v5_10a98 = call i32 @function_112e8(i32 %v0_10a90, i32* %tmp12, i32 1)
  %v7_10a9c = icmp eq i32 %v5_10a98, 1
  %v0_10aa0 = load i32, i32* @r4, align 4
  %v1_10aa4 = add i32 %v0_10aa0, 1
  store i32 %v1_10aa4, i32* @r4, align 4
  %v0_10aac = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_10a9c, label %dec_label_pc_10aac, label %dec_label_pc_10ac4

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10a8c
  %v1_10aac = add i32 %v0_10aac, 1
  store i32 %v1_10aac, i32* %r5.global-to-local, align 4
  %v0_10ab0 = load i32, i32* %r7.global-to-local, align 4
  %v7_10ab4 = icmp sgt i32 %v0_10ab0, %v1_10aac
  br i1 %v7_10ab4, label %dec_label_pc_10ab8, label %dec_label_pc_10ac4

dec_label_pc_10ab8:                               ; preds = %dec_label_pc_10aac
  %v1_10ab8 = inttoptr i32 %v0_10aa0 to i8*
  %v2_10ab8 = load i8, i8* %v1_10ab8, align 1
  %v7_10abc = icmp eq i8 %v2_10ab8, 10
  br i1 %v7_10abc, label %dec_label_pc_10ac4, label %dec_label_pc_10ab8.dec_label_pc_10a8c_crit_edge

dec_label_pc_10ab8.dec_label_pc_10a8c_crit_edge:  ; preds = %dec_label_pc_10ab8
  %v0_10a90.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10a8c

dec_label_pc_10ac4:                               ; preds = %dec_label_pc_10a8c, %dec_label_pc_10ab8, %dec_label_pc_10aac
  %v0_10ac4 = phi i32 [ %v1_10aac, %dec_label_pc_10ab8 ], [ %v1_10aac, %dec_label_pc_10aac ], [ %v0_10aac, %dec_label_pc_10a8c ]
  %v2_10ac4 = icmp eq i32 %v0_10ac4, 0
  %v1_10ac8 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_10ac4, i32 0, i32 %v1_10ac8
  %v2_10ad0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10ad0, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10aa4, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_112e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ac4, { 1, 2, 0 }
}

define i32 @function_10ad4() local_unnamed_addr {
dec_label_pc_10ad4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_10ad4 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_10ae4 = call i32 @function_116f4()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_10aec = inttoptr i32 %v0_10ae4 to i32*
  store i32 0, i32* %v2_10aec, align 4
  %v0_10af8 = load i32, i32* %r6.global-to-local, align 4
  %v3_10afc = call i32 @function_119e4(i32 2, i32 2, i32 %v0_10af8)
  %v7_10b08 = icmp eq i32 %v3_10afc, -1
  store i32 %v3_10afc, i32* %r5.global-to-local, align 4
  %v2_10b14 = load i32, i32* @r4, align 4
  br i1 %v7_10b08, label %dec_label_pc_10b64, label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10ad4
  %v7_10b14 = shl i32 2056, %v2_10b14
  %v8_10b14 = or i32 %v7_10b14, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_10b44 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_10b44 = call i32 @function_1186c(i32 %v3_10afc, %sockaddr* %v3_10b44, i32 %v2_10b14)
  %v2_10b4c = ptrtoint i32* %stack_var_-24 to i32
  %v0_10b50 = load i32, i32* %r5.global-to-local, align 4
  %v4_10b54 = call i32 @function_11898(i32 %v0_10b50, %sockaddr* %v3_10b44, i32 %v2_10b4c)
  %v1_10b5c = call i32 @function_11120(i32 %v0_10b50)
  br label %dec_label_pc_10b64

dec_label_pc_10b64:                               ; preds = %dec_label_pc_10ad4, %dec_label_pc_10b28
  %v0_10b64 = phi i32 [ %v0_10af8, %dec_label_pc_10ad4 ], [ %v8_10b14, %dec_label_pc_10b28 ]
  store i32 %v3_10ad4, i32* @r4, align 4
  ret i32 %v0_10b64

; uselistorder directives
  uselistorder i32 %v3_10afc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_1186c, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_119e4, { 16, 17, 14, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10b64, { 1, 0 }
}

define i32 @function_10b70(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b70:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_10b74 = load i8, i8* %tmp, align 1
  %v2_10b78 = icmp eq i8 %v3_10b74, 0
  br i1 %v2_10b78, label %bb, label %dec_label_pc_10b8c

bb:                                               ; preds = %dec_label_pc_10b70
  %v4_10b74 = zext i8 %v3_10b74 to i32
  br label %dec_label_pc_10ba0

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b70
  br label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b90, %dec_label_pc_10b8c
  %v0_10b90 = phi i32 [ %v1_10b90, %dec_label_pc_10b90 ], [ 0, %dec_label_pc_10b8c ]
  %v1_10b90 = add i32 %v0_10b90, 1
  %v2_10b94 = add i32 %v1_10b90, %arg2
  %v3_10b94 = inttoptr i32 %v2_10b94 to i8*
  %v4_10b94 = load i8, i8* %v3_10b94, align 1
  %v2_10b98 = icmp eq i8 %v4_10b94, 0
  br i1 %v2_10b98, label %dec_label_pc_10ba0, label %dec_label_pc_10b90

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10b90, %bb
  %v0_10be418 = phi i32 [ %v4_10b74, %bb ], [ %v1_10b90, %dec_label_pc_10b90 ]
  %v0_10ba81 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_10ba81, 1
  br i1 %tmp27, label %dec_label_pc_10bf4, label %dec_label_pc_10bb4

dec_label_pc_10bb4:                               ; preds = %dec_label_pc_10ba0, %dec_label_pc_10ba8.backedge
  %v0_10bac.in = phi i32 [ %v0_10bac, %dec_label_pc_10ba8.backedge ], [ %v0_10ba81, %dec_label_pc_10ba0 ]
  %v0_10bd8 = phi i32 [ %v1_10bd8., %dec_label_pc_10ba8.backedge ], [ 0, %dec_label_pc_10ba0 ]
  %v0_10bb4 = phi i32 [ %v5_10bb4, %dec_label_pc_10ba8.backedge ], [ %tmp20, %dec_label_pc_10ba0 ]
  %v0_10bac = add i32 %v0_10bac.in, -1
  %v1_10bb4 = inttoptr i32 %v0_10bb4 to i8*
  %v2_10bb4 = load i8, i8* %v1_10bb4, align 1
  %v3_10bb4 = zext i8 %v2_10bb4 to i32
  store i32 %v3_10bb4, i32* @lr, align 4
  %v5_10bb4 = add i32 %v0_10bb4, 1
  %v2_10bb8 = add i32 %v0_10bd8, %arg2
  %v3_10bb8 = inttoptr i32 %v2_10bb8 to i8*
  %v4_10bb8 = load i8, i8* %v3_10bb8, align 1
  %v6_10bb8 = zext i8 %v4_10bb8 to i32
  %v1_10bbc = add nsw i32 %v3_10bb4, -65
  %v1_10bc0 = add nsw i32 %v6_10bb8, -65
  %tmp35 = icmp ult i32 %v1_10bbc, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_10bb4
  %v5_10bc8 = or i32 %v3_10bb4, 96
  store i32 %v5_10bc8, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_10bb4, %bb28
  %v0_10bd4 = phi i32 [ %v3_10bb4, %dec_label_pc_10bb4 ], [ %v5_10bc8, %bb28 ]
  %tmp36 = icmp ult i32 %v1_10bc0, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_10bd0 = or i32 %v6_10bb8, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_10bd4 = phi i32 [ %v6_10bb8, %bb29 ], [ %v5_10bd0, %bb30 ]
  %v9_10bd4 = icmp eq i32 %v0_10bd4, %v1_10bd4
  %v1_10bd8 = add i32 %v0_10bd8, 1
  %v1_10bd8. = select i1 %v9_10bd4, i32 %v1_10bd8, i32 0
  br i1 %v9_10bd4, label %dec_label_pc_10be4, label %dec_label_pc_10ba8.backedge

dec_label_pc_10ba8.backedge:                      ; preds = %bb31, %dec_label_pc_10be4
  %tmp32 = icmp slt i32 %v0_10bac, 1
  br i1 %tmp32, label %dec_label_pc_10bf4, label %dec_label_pc_10bb4

dec_label_pc_10be4:                               ; preds = %bb31
  %v9_10be4 = icmp eq i32 %v0_10be418, %v1_10bd8.
  br i1 %v9_10be4, label %dec_label_pc_10bec, label %dec_label_pc_10ba8.backedge

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10be4
  %v2_10bec = sub i32 %v5_10bb4, %tmp20
  ret i32 %v2_10bec

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10ba8.backedge, %dec_label_pc_10ba0
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_10bd8., { 1, 0 }
  uselistorder i32 %v0_10bb4, { 1, 0 }
  uselistorder i32 %v0_10bd8, { 1, 0 }
  uselistorder i8 %v3_10b74, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_10ba8.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_10bb4, { 1, 0 }
}

define i32 @function_10bfc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10bfc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10bfc = load i8, i8* %arg1, align 1
  %v2_10c00 = icmp eq i8 %v2_10bfc, 0
  br i1 %v2_10c00, label %bb, label %dec_label_pc_10c0c

bb:                                               ; preds = %dec_label_pc_10bfc
  %v3_10bfc = zext i8 %v2_10bfc to i32
  br label %dec_label_pc_10c20

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10bfc
  br label %dec_label_pc_10c10

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10c10, %dec_label_pc_10c0c
  %v0_10c10 = phi i32 [ %v1_10c10, %dec_label_pc_10c10 ], [ 0, %dec_label_pc_10c0c ]
  %v1_10c10 = add i32 %v0_10c10, 1
  %v2_10c14 = add i32 %v1_10c10, %tmp
  %v3_10c14 = inttoptr i32 %v2_10c14 to i8*
  %v4_10c14 = load i8, i8* %v3_10c14, align 1
  %v2_10c18 = icmp eq i8 %v4_10c14, 0
  br i1 %v2_10c18, label %dec_label_pc_10c20, label %dec_label_pc_10c10

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10c10, %bb
  %v0_10c44 = phi i32 [ %v3_10bfc, %bb ], [ %v1_10c10, %dec_label_pc_10c10 ]
  %v1_10c20 = inttoptr i32 %arg2 to i8*
  %v2_10c20 = load i8, i8* %v1_10c20, align 1
  %v3_10c20 = zext i8 %v2_10c20 to i32
  %v2_10c24 = icmp eq i8 %v2_10c20, 0
  br i1 %v2_10c24, label %bb22, label %dec_label_pc_10c30

bb22:                                             ; preds = %dec_label_pc_10c20
  store i32 %v3_10c20, i32* @r2, align 4
  br label %dec_label_pc_10c44

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10c20
  br label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c34, %dec_label_pc_10c30
  %v0_10c34 = phi i32 [ %v1_10c34, %dec_label_pc_10c34 ], [ 0, %dec_label_pc_10c30 ]
  %v1_10c34 = add i32 %v0_10c34, 1
  store i32 %v1_10c34, i32* @r2, align 4
  %v2_10c38 = add i32 %v1_10c34, %arg2
  %v3_10c38 = inttoptr i32 %v2_10c38 to i8*
  %v4_10c38 = load i8, i8* %v3_10c38, align 1
  %v2_10c3c = icmp eq i8 %v4_10c38, 0
  br i1 %v2_10c3c, label %dec_label_pc_10c44, label %dec_label_pc_10c34

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c34, %bb22
  %v0_10c704 = phi i32 [ %v3_10c20, %bb22 ], [ %v1_10c34, %dec_label_pc_10c34 ]
  %v9_10c44 = icmp eq i32 %v0_10c44, %v0_10c704
  br i1 %v9_10c44, label %dec_label_pc_10c70.preheader, label %dec_label_pc_10c50

dec_label_pc_10c70.preheader:                     ; preds = %dec_label_pc_10c44
  %v2_10c706 = icmp eq i32 %v0_10c44, 0
  br i1 %v2_10c706, label %dec_label_pc_10c78, label %dec_label_pc_10c58

dec_label_pc_10c50:                               ; preds = %dec_label_pc_10c58, %dec_label_pc_10c44
  ret i32 0

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c68, %dec_label_pc_10c70.preheader
  %v0_10c70.in = phi i32 [ %v0_10c70, %dec_label_pc_10c68 ], [ %v0_10c44, %dec_label_pc_10c70.preheader ]
  %v0_10c6c = phi i32 [ %v1_10c6c, %dec_label_pc_10c68 ], [ %arg2, %dec_label_pc_10c70.preheader ]
  %v0_10c68 = phi i32 [ %v1_10c68, %dec_label_pc_10c68 ], [ %tmp, %dec_label_pc_10c70.preheader ]
  %v0_10c70 = add i32 %v0_10c70.in, -1
  %v1_10c58 = inttoptr i32 %v0_10c68 to i8*
  %v2_10c58 = load i8, i8* %v1_10c58, align 1
  %v3_10c58 = zext i8 %v2_10c58 to i32
  store i32 %v3_10c58, i32* @r2, align 4
  %v1_10c5c = inttoptr i32 %v0_10c6c to i8*
  %v2_10c5c = load i8, i8* %v1_10c5c, align 1
  %v9_10c60 = icmp eq i8 %v2_10c58, %v2_10c5c
  br i1 %v9_10c60, label %dec_label_pc_10c68, label %dec_label_pc_10c50

dec_label_pc_10c68:                               ; preds = %dec_label_pc_10c58
  %v1_10c68 = add i32 %v0_10c68, 1
  %v1_10c6c = add i32 %v0_10c6c, 1
  %v2_10c70 = icmp eq i32 %v0_10c70, 0
  br i1 %v2_10c70, label %dec_label_pc_10c78, label %dec_label_pc_10c58

dec_label_pc_10c78:                               ; preds = %dec_label_pc_10c68, %dec_label_pc_10c70.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10c34, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10bfc, { 1, 0 }
}

define i32 @function_10c80(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10c80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10c80 = load i32, i32* @r4, align 4
  store i32 %v3_10c80, i32* %stack_var_-28, align 4
  %v22_10c80 = ptrtoint i32* %stack_var_-28 to i32
  %v0_10c84 = load i32, i32* @r2, align 4
  store i32 %v0_10c84, i32* %r8.global-to-local, align 4
  %v2_10c84 = icmp eq i32 %v0_10c84, 0
  store i1 %v2_10c84, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_10c84, label %dec_label_pc_10d74, label %dec_label_pc_10c94

dec_label_pc_10c94:                               ; preds = %dec_label_pc_10c80
  %v3_10c94 = icmp eq i8 %arg1, 0
  store i1 %v3_10c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c94, label %.thread, label %dec_label_pc_10ca8

.thread:                                          ; preds = %dec_label_pc_10c94
  %v4_10c9c = inttoptr i32 %v0_10c84 to i8*
  store i8 48, i8* %v4_10c9c, align 1
  %v0_10ca0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ca0.pr.pr, label %.thread1, label %dec_label_pc_10ca8

.thread1:                                         ; preds = %.thread
  %v4_10ca0 = load i32, i32* %r8.global-to-local, align 4
  %v5_10ca0 = add i32 %v4_10ca0, 1
  %v6_10ca0 = inttoptr i32 %v5_10ca0 to i8*
  store i8 0, i8* %v6_10ca0, align 1
  %v0_10ca4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ca4.pr.pr, label %dec_label_pc_10d74, label %dec_label_pc_10ca8

dec_label_pc_10ca8:                               ; preds = %dec_label_pc_10c94, %.thread, %.thread1
  %v7_10cac = icmp eq i32 %arg2, 10
  store i1 %v7_10cac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cac, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_10ca8
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_10ca8
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_10cd0

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ce0

dec_label_pc_10cd0:                               ; preds = %bb
  %v2_10cd0 = sub nsw i32 0, %tmp
  store i32 %v2_10cd0, i32* %r4.global-to-local, align 4
  store i1 %v3_10c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c94, label %dec_label_pc_10d80, label %dec_label_pc_10ce0

dec_label_pc_10ce0:                               ; preds = %dec_label_pc_10cd0, %.thread4
  %v0_10ce810 = phi i32 [ %tmp, %.thread4 ], [ %v2_10cd0, %dec_label_pc_10cd0 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_10cd0 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_10ce4 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_10ce4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %bb37, %dec_label_pc_10ce0
  %v0_10ce8 = phi i32 [ %v0_10d0c, %bb37 ], [ %v0_10ce810, %dec_label_pc_10ce0 ]
  store i32 %v0_10ce8, i32* %r0.global-to-local, align 4
  %v0_10cec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10cec, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10ce8, 16777216
  %v1_10cf0 = sdiv i32 %sext, 16777216
  %v3_10cf0 = call i32 @function_10ea8(i32 %v1_10cf0, i32 %v0_10cec)
  store i32 %v3_10cf0, i32* %r0.global-to-local, align 4
  %v7_10cf4 = icmp eq i32 %v3_10cf0, 9
  store i1 %v7_10cf4, i1* %cpsr_z.global-to-local, align 1
  %v1_10cf8 = add i32 %v3_10cf0, 48
  %v0_10cfc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10cfc, i32* @r1, align 4
  %v7_10d00 = icmp sgt i32 %v3_10cf0, 9
  %extract.t = trunc i32 %v1_10cf8 to i8
  br i1 %v7_10d00, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_10ce8
  %v9_10d00 = add i32 %v3_10cf0, 55
  %extract.t20 = trunc i32 %v9_10d00 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_10ce8, %bb36
  %v0_10d08.off0 = phi i8 [ %extract.t, %dec_label_pc_10ce8 ], [ %extract.t20, %bb36 ]
  %v0_10d04 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10d04, i32* @r0, align 4
  %v2_10d08 = load i32, i32* %r7.global-to-local, align 4
  %v3_10d08 = inttoptr i32 %v2_10d08 to i8*
  store i8 %v0_10d08.off0, i8* %v3_10d08, align 1
  %v4_10d08 = load i32, i32* %r7.global-to-local, align 4
  %v5_10d08 = add i32 %v4_10d08, -1
  store i32 %v5_10d08, i32* %r7.global-to-local, align 4
  %v0_10d0c = call i32 @function_10d98()
  store i32 %v0_10d0c, i32* %r0.global-to-local, align 4
  store i32 %v0_10d0c, i32* %r4.global-to-local, align 4
  %v2_10d10 = icmp eq i32 %v0_10d0c, 0
  store i1 %v2_10d10, i1* %cpsr_z.global-to-local, align 1
  %v0_10d14 = load i32, i32* %r6.global-to-local, align 4
  %v1_10d14 = add i32 %v0_10d14, -1
  store i32 %v1_10d14, i32* %r6.global-to-local, align 4
  br i1 %v2_10d10, label %dec_label_pc_10d1c, label %dec_label_pc_10ce8

dec_label_pc_10d1c:                               ; preds = %bb37
  %v0_10d1c = load i32, i32* %sl.global-to-local, align 4
  %v2_10d1c = icmp eq i32 %v0_10d1c, 0
  store i1 %v2_10d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d1c, label %bb38, label %dec_label_pc_10d84

bb38:                                             ; preds = %dec_label_pc_10d1c
  store i32 %v0_10d14, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10d28

dec_label_pc_10d28:                               ; preds = %bb38, %dec_label_pc_10d84
  %v1_10d34 = phi i32 [ %v0_10d14, %bb38 ], [ %v1_10d2c.pre, %dec_label_pc_10d84 ]
  %v2_10d28 = ptrtoint i32* %stack_var_-62 to i32
  %v2_10d2c = add i32 %v1_10d34, %v2_10d28
  %v3_10d2c = inttoptr i32 %v2_10d2c to i8*
  %v4_10d2c = load i8, i8* %v3_10d2c, align 1
  %v6_10d2c = zext i8 %v4_10d2c to i32
  %v2_10d30 = icmp eq i8 %v4_10d2c, 0
  store i1 %v2_10d30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10d2c, i32* %r1.global-to-local, align 4
  br i1 %v2_10d30, label %dec_label_pc_10d58, label %dec_label_pc_10d3c

dec_label_pc_10d3c:                               ; preds = %dec_label_pc_10d28
  br label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10d40, %dec_label_pc_10d3c
  %v0_10d40 = phi i32 [ %v1_10d40, %dec_label_pc_10d40 ], [ 0, %dec_label_pc_10d3c ]
  %v1_10d40 = add i32 %v0_10d40, 1
  store i32 %v1_10d40, i32* @r2, align 4
  %v2_10d44 = add i32 %v1_10d40, %v2_10d2c
  %v3_10d44 = inttoptr i32 %v2_10d44 to i8*
  %v4_10d44 = load i8, i8* %v3_10d44, align 1
  %v2_10d48 = icmp eq i8 %v4_10d44, 0
  store i1 %v2_10d48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d48, label %dec_label_pc_10d50, label %dec_label_pc_10d40

dec_label_pc_10d50:                               ; preds = %dec_label_pc_10d40
  %v7_10d50 = icmp eq i32 %v0_10d40, -2
  store i1 %v7_10d50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d50, label %dec_label_pc_10d74, label %dec_label_pc_10d58

dec_label_pc_10d58:                               ; preds = %dec_label_pc_10d50, %dec_label_pc_10d28
  %v0_10d6017 = phi i32 [ %v1_10d40, %dec_label_pc_10d50 ], [ %v6_10d2c, %dec_label_pc_10d28 ]
  store i32 %v2_10d2c, i32* %r0.global-to-local, align 4
  %v0_10d5c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10d5c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10d60

dec_label_pc_10d60:                               ; preds = %dec_label_pc_10d60.dec_label_pc_10d60_crit_edge, %dec_label_pc_10d58
  %v2_10d6c = phi i32 [ %v5_10d6c, %dec_label_pc_10d60.dec_label_pc_10d60_crit_edge ], [ %v0_10d5c, %dec_label_pc_10d58 ]
  %v0_10d64 = phi i32 [ %v0_10d64.pre, %dec_label_pc_10d60.dec_label_pc_10d60_crit_edge ], [ %v2_10d2c, %dec_label_pc_10d58 ]
  %v0_10d60 = phi i32 [ %v0_10d60.pre, %dec_label_pc_10d60.dec_label_pc_10d60_crit_edge ], [ %v0_10d6017, %dec_label_pc_10d58 ]
  %v1_10d60 = add i32 %v0_10d60, -1
  store i32 %v1_10d60, i32* @r2, align 4
  %v1_10d64 = inttoptr i32 %v0_10d64 to i8*
  %v2_10d64 = load i8, i8* %v1_10d64, align 1
  %v5_10d64 = add i32 %v0_10d64, 1
  store i32 %v5_10d64, i32* %r0.global-to-local, align 4
  %v3_10d68 = icmp eq i32 %v0_10d60, 0
  store i1 %v3_10d68, i1* %cpsr_z.global-to-local, align 1
  %v3_10d6c = inttoptr i32 %v2_10d6c to i8*
  store i8 %v2_10d64, i8* %v3_10d6c, align 1
  %v4_10d6c = load i32, i32* %r1.global-to-local, align 4
  %v5_10d6c = add i32 %v4_10d6c, 1
  store i32 %v5_10d6c, i32* %r1.global-to-local, align 4
  br i1 %v3_10d68, label %dec_label_pc_10d74, label %dec_label_pc_10d60.dec_label_pc_10d60_crit_edge

dec_label_pc_10d60.dec_label_pc_10d60_crit_edge:  ; preds = %dec_label_pc_10d60
  %v0_10d60.pre = load i32, i32* @r2, align 4
  %v0_10d64.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d60

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10d60, %dec_label_pc_10d50, %.thread1, %dec_label_pc_10c80
  %v0_10d74 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10d74, i32* %r0.global-to-local, align 4
  %v2_10d7c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10d7c, i32* @r4, align 4
  ret i32 %v0_10d74

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10cd0
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10d84

dec_label_pc_10d84:                               ; preds = %dec_label_pc_10d1c, %dec_label_pc_10d80
  %v1_10d88 = phi i32 [ %v1_10d14, %dec_label_pc_10d1c ], [ 32, %dec_label_pc_10d80 ]
  %v2_10d88 = add i32 %v1_10d88, %v22_10c80
  %v3_10d90 = add i32 %v2_10d88, -34
  %v4_10d90 = inttoptr i32 %v3_10d90 to i8*
  store i8 45, i8* %v4_10d90, align 1
  %v1_10d2c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10d28

; uselistorder directives
  uselistorder i32 %v5_10d6c, { 1, 0 }
  uselistorder i1 %v3_10d68, { 1, 0 }
  uselistorder i32 %v0_10d64, { 1, 0 }
  uselistorder i1 %v7_10d50, { 1, 0 }
  uselistorder i32 %v1_10d40, { 0, 1, 3, 2 }
  uselistorder i32 %v2_10d2c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10d0c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10cf0, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_10c94, { 1, 0, 2, 3 }
  uselistorder i32 %v0_10c84, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder label %dec_label_pc_10d84, { 1, 0 }
  uselistorder label %dec_label_pc_10d28, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_10ca8, { 2, 1, 0 }
}

define i32 @function_10d98() local_unnamed_addr {
dec_label_pc_10d98:
  %v0_10d98 = load i32, i32* @r1, align 4
  %v1_10d98 = add i32 %v0_10d98, -1
  %v7_10d98 = icmp eq i32 %v0_10d98, 1
  br i1 %v7_10d98, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_10d98
  %v2_10d9c = load i32, i32* @r0, align 4
  ret i32 %v2_10d9c

bb82:                                             ; preds = %dec_label_pc_10d98
  %v2_10d98 = icmp eq i32 %v0_10d98, 0
  br i1 %v2_10d98, label %dec_label_pc_10e80, label %dec_label_pc_10da4

dec_label_pc_10da4:                               ; preds = %bb82
  %v0_10da4 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_10da4, %v0_10d98
  br i1 %tmp, label %dec_label_pc_10dac, label %dec_label_pc_10e38

dec_label_pc_10dac:                               ; preds = %dec_label_pc_10da4
  %v2_10dac = and i32 %v1_10d98, %v0_10d98
  %v4_10dac = icmp eq i32 %v2_10dac, 0
  br i1 %v4_10dac, label %dec_label_pc_10e44, label %dec_label_pc_10db4

dec_label_pc_10db4:                               ; preds = %dec_label_pc_10dac
  %v3_10db4 = icmp ult i32 %v0_10d98, 536870912
  br i1 %v3_10db4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10db4
  %v4_10db8 = mul i32 %v0_10d98, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10db4, %.thread
  %v0_10dd8.pr36.ph = phi i32 [ %v4_10db8, %.thread ], [ %v0_10d98, %dec_label_pc_10db4 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10db4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_10dd8.pr36 = phi i32 [ %v4_10dcc, %bb85 ], [ %v0_10dd8.pr36.ph, %.preheader.preheader ]
  %v1_10dd0 = phi i32 [ %v4_10dd0, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_10dc4 = icmp ugt i32 %v0_10dd8.pr36, 268435455
  br i1 %v2_10dc4, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10dd8thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_10dc8 = icmp ult i32 %v0_10dd8.pr36, %v0_10da4
  br i1 %v4_10dc8, label %bb84, label %dec_label_pc_10dd8thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_10dcc = and i32 %v0_10dd8.pr36, 268435456
  %v3_10dcc = icmp eq i32 %v2_10dcc, 0
  %v4_10dcc = mul i32 %v0_10dd8.pr36, 16
  br i1 %v3_10dcc, label %bb85, label %dec_label_pc_10dd8.loopexit

bb85:                                             ; preds = %bb84
  %v2_10dd0 = and i32 %v1_10dd0, 268435456
  %v3_10dd0 = icmp eq i32 %v2_10dd0, 0
  %v4_10dd0 = mul i32 %v1_10dd0, 16
  br i1 %v3_10dd0, label %.preheader, label %dec_label_pc_10dd8thread-pre-split.loopexit.loopexit

dec_label_pc_10dd8thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_10de448.ph = phi i32 [ %v1_10dd0, %bb83 ], [ %v4_10dd0, %bb85 ]
  %v0_10dd8.pr38.ph = phi i32 [ %v0_10dd8.pr36, %bb83 ], [ %v4_10dcc, %bb85 ]
  br label %dec_label_pc_10dd8thread-pre-split.loopexit

dec_label_pc_10dd8thread-pre-split.loopexit:      ; preds = %dec_label_pc_10dd8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_10de448 = phi i32 [ %v1_10dd0, %.thread2 ], [ %v1_10de448.ph, %dec_label_pc_10dd8thread-pre-split.loopexit.loopexit ]
  %v0_10dd8.pr38 = phi i32 [ %v0_10dd8.pr36, %.thread2 ], [ %v0_10dd8.pr38.ph, %dec_label_pc_10dd8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10dd8thread-pre-split

dec_label_pc_10dd8thread-pre-split:               ; preds = %dec_label_pc_10dd8thread-pre-split.loopexit, %bb87
  %v1_10de446 = phi i32 [ %v1_10de448, %dec_label_pc_10dd8thread-pre-split.loopexit ], [ %v3_10de4, %bb87 ]
  %v0_10dd8.pr = phi i32 [ %v0_10dd8.pr38, %dec_label_pc_10dd8thread-pre-split.loopexit ], [ %v3_10de0, %bb87 ]
  br label %dec_label_pc_10dd8

dec_label_pc_10dd8.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_10dd8

dec_label_pc_10dd8:                               ; preds = %dec_label_pc_10dd8.loopexit, %dec_label_pc_10dd8thread-pre-split
  %v1_10de4 = phi i32 [ %v1_10de446, %dec_label_pc_10dd8thread-pre-split ], [ %v1_10dd0, %dec_label_pc_10dd8.loopexit ]
  %v1_10de0 = phi i32 [ %v0_10dd8.pr, %dec_label_pc_10dd8thread-pre-split ], [ %v4_10dcc, %dec_label_pc_10dd8.loopexit ]
  %v2_10dd8 = icmp slt i32 %v1_10de0, 0
  br i1 %v2_10dd8, label %dec_label_pc_10dec, label %bb86

bb86:                                             ; preds = %dec_label_pc_10dd8
  %v4_10ddc = icmp ult i32 %v1_10de0, %v0_10da4
  br i1 %v4_10ddc, label %bb87, label %dec_label_pc_10dec

bb87:                                             ; preds = %bb86
  %v3_10de0 = mul i32 %v1_10de0, 2
  %v2_10de4 = icmp slt i32 %v1_10de4, 0
  %v3_10de4 = mul i32 %v1_10de4, 2
  br i1 %v2_10de4, label %dec_label_pc_10dec, label %dec_label_pc_10dd8thread-pre-split

dec_label_pc_10dec:                               ; preds = %bb86, %dec_label_pc_10dd8, %bb87
  %v2_10df859 = phi i32 [ %v3_10de4, %bb87 ], [ %v1_10de4, %bb86 ], [ %v1_10de4, %dec_label_pc_10dd8 ]
  %v1_10df051 = phi i32 [ %v3_10de0, %bb87 ], [ %v1_10de0, %bb86 ], [ %v1_10de0, %dec_label_pc_10dd8 ]
  br label %dec_label_pc_10df0

dec_label_pc_10df0:                               ; preds = %.thread11, %dec_label_pc_10dec
  %v1_10e24 = phi i32 [ %v4_10e24, %.thread11 ], [ %v2_10df859, %dec_label_pc_10dec ]
  %v1_10df8 = phi i32 [ %v0_10e30, %.thread11 ], [ 0, %dec_label_pc_10dec ]
  %v1_10e28 = phi i32 [ %v4_10e28, %.thread11 ], [ %v1_10df051, %dec_label_pc_10dec ]
  %v1_10df4 = phi i32 [ %v0_10e20, %.thread11 ], [ %v0_10da4, %dec_label_pc_10dec ]
  %v3_10df0 = icmp ult i32 %v1_10df4, %v1_10e28
  br i1 %v3_10df0, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_10df0
  %v3_10df4 = sub i32 %v1_10df4, %v1_10e28
  %v3_10df8 = or i32 %v1_10df8, %v1_10e24
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10df0, %bb88
  %v1_10e00 = phi i32 [ %v1_10df4, %dec_label_pc_10df0 ], [ %v3_10df4, %bb88 ]
  %v1_10e04 = phi i32 [ %v1_10df8, %dec_label_pc_10df0 ], [ %v3_10df8, %bb88 ]
  %v4_10dfc = udiv i32 %v1_10e28, 2
  %v6_10dfc = icmp ult i32 %v1_10e00, %v4_10dfc
  br i1 %v6_10dfc, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_10e00 = urem i32 %v1_10e28, 2
  %v4_10e00 = icmp eq i32 %v3_10e00, 0
  %v6_10e00 = sub i32 %v1_10e00, %v4_10dfc
  br i1 %v4_10e00, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10e04 = udiv i32 %v1_10e24, 2
  %v6_10e04 = or i32 %v1_10e04, %v5_10e04
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_10e0c = phi i32 [ %v6_10e00, %bb89 ], [ %v1_10e00, %.thread7 ], [ %v6_10e00, %bb90 ]
  %v1_10e10 = phi i32 [ %v1_10e04, %bb89 ], [ %v1_10e04, %.thread7 ], [ %v6_10e04, %bb90 ]
  %v4_10e08 = udiv i32 %v1_10e28, 4
  %v6_10e08 = icmp ult i32 %v1_10e0c, %v4_10e08
  br i1 %v6_10e08, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_10e0c = and i32 %v1_10e28, 2
  %v4_10e0c = icmp eq i32 %v3_10e0c, 0
  %v6_10e0c = sub i32 %v1_10e0c, %v4_10e08
  br i1 %v4_10e0c, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_10e10 = udiv i32 %v1_10e24, 4
  %v6_10e10 = or i32 %v1_10e10, %v5_10e10
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_10e18 = phi i32 [ %v6_10e0c, %bb91 ], [ %v1_10e0c, %.thread8 ], [ %v6_10e0c, %bb92 ]
  %v1_10e1c = phi i32 [ %v1_10e10, %bb91 ], [ %v1_10e10, %.thread8 ], [ %v6_10e10, %bb92 ]
  %v4_10e14 = udiv i32 %v1_10e28, 8
  %v6_10e14 = icmp ult i32 %v1_10e18, %v4_10e14
  br i1 %v6_10e14, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_10e18 = and i32 %v1_10e28, 4
  %v4_10e18 = icmp eq i32 %v3_10e18, 0
  %v6_10e18 = sub i32 %v1_10e18, %v4_10e14
  br i1 %v4_10e18, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_10e1c = udiv i32 %v1_10e24, 8
  %v6_10e1c = or i32 %v1_10e1c, %v5_10e1c
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_10e30 = phi i32 [ %v1_10e1c, %bb93 ], [ %v1_10e1c, %.thread9 ], [ %v6_10e1c, %bb94 ]
  %v0_10e20 = phi i32 [ %v6_10e18, %bb93 ], [ %v1_10e18, %.thread9 ], [ %v6_10e18, %bb94 ]
  %v2_10e20 = icmp eq i32 %v0_10e20, 0
  br i1 %v2_10e20, label %dec_label_pc_10e30, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_10e24, 16
  br i1 %tmp142, label %dec_label_pc_10e30, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_10e24 = udiv i32 %v1_10e24, 16
  %v4_10e28 = udiv i32 %v1_10e28, 16
  br label %dec_label_pc_10df0

dec_label_pc_10e30:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_10e30

dec_label_pc_10e38:                               ; preds = %dec_label_pc_10da4
  %v9_10da4 = icmp eq i32 %v0_10da4, %v0_10d98
  %. = zext i1 %v9_10da4 to i32
  ret i32 %.

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10dac
  %v2_10e44 = icmp ugt i32 %v0_10d98, 65535
  br i1 %v2_10e44, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_10e44
  %v2_10e48 = and i32 %v0_10d98, 32768
  %v3_10e48 = icmp eq i32 %v2_10e48, 0
  %v4_10e48 = udiv i32 %v0_10d98, 65536
  br i1 %v3_10e48, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_10e44
  %v0_10e5465 = phi i32 [ %v0_10d98, %dec_label_pc_10e44 ], [ %v4_10e48, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_10e58 = phi i32 [ %v0_10e5465, %.thread16 ], [ %v4_10e48, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_10e54 = icmp ugt i32 %v1_10e58, 255
  br i1 %v2_10e54, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_10e58 = and i32 %v1_10e58, 128
  %v3_10e58 = icmp eq i32 %v2_10e58, 0
  %v4_10e58 = udiv i32 %v1_10e58, 256
  br i1 %v3_10e58, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_10e5c = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_10e68 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_10e5c, %bb102 ]
  %v1_10e64 = phi i32 [ %v1_10e58, %bb100 ], [ %v4_10e58, %bb101 ], [ %v4_10e58, %bb102 ]
  %v2_10e60 = icmp ugt i32 %v1_10e64, 15
  br i1 %v2_10e60, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_10e64 = and i32 %v1_10e64, 8
  %v3_10e64 = icmp eq i32 %v2_10e64, 0
  %v4_10e64 = udiv i32 %v1_10e64, 16
  br i1 %v3_10e64, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_10e68 = add nsw i32 %v1_10e68, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_10e70 = phi i32 [ %v1_10e68, %.thread17 ], [ %v1_10e68, %bb103 ], [ %v2_10e68, %bb104 ]
  %v5_10e74 = phi i32 [ %v1_10e64, %.thread17 ], [ %v4_10e64, %bb103 ], [ %v4_10e64, %bb104 ]
  %v2_10e6c = icmp ugt i32 %v5_10e74, 3
  %v7_10e6c = icmp eq i32 %v5_10e74, 4
  %v2_10e70 = xor i1 %v7_10e6c, true
  %v3_10e70 = and i1 %v2_10e6c, %v2_10e70
  br i1 %v3_10e70, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_10e70 = add nsw i32 %v4_10e70, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_10e74 = phi i32 [ %v4_10e70, %.thread18 ], [ %v5_10e70, %bb105 ]
  %v2_10e74 = xor i1 %v2_10e6c, true
  %v3_10e74 = or i1 %v7_10e6c, %v2_10e74
  br i1 %v3_10e74, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_10e74 = udiv i32 %v5_10e74, 2
  %v9_10e74 = add i32 %v4_10e74, %v8_10e74
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_10e78 = phi i32 [ %v4_10e74, %bb106 ], [ %v9_10e74, %bb107 ]
  %v6_10e78 = lshr i32 %v0_10da4, %v1_10e78
  ret i32 %v6_10e78

dec_label_pc_10e80:                               ; preds = %bb82
  %v0_10e80 = load i32, i32* @lr, align 4
  %v0_10e84 = call i32 @function_11058()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_10e80)
  %v9_10e90 = load i32, i32* @lr, align 4
  %v0_10e94 = call i32 @function_10d98()
  store i32 %v9_10e90, i32* @lr, align 4
  ret i32 %v0_10e94

; uselistorder directives
  uselistorder i32 %v4_10e74, { 1, 0 }
  uselistorder i1 %v7_10e6c, { 1, 0 }
  uselistorder i32 %v4_10e64, { 1, 0 }
  uselistorder i32 %v1_10e64, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10e58, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_10e58, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10e48, { 1, 0 }
  uselistorder i32 %v0_10e20, { 1, 0 }
  uselistorder i32 %v4_10e14, { 1, 0 }
  uselistorder i32 %v1_10e1c, { 1, 2, 0 }
  uselistorder i32 %v4_10e08, { 1, 0 }
  uselistorder i32 %v1_10e10, { 1, 2, 0 }
  uselistorder i32 %v4_10dfc, { 1, 0 }
  uselistorder i32 %v1_10e04, { 1, 2, 0 }
  uselistorder i32 %v1_10e28, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10df8, { 1, 0 }
  uselistorder i32 %v1_10e24, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10de4, { 1, 0 }
  uselistorder i32 %v3_10de0, { 1, 0 }
  uselistorder i32 %v1_10de0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10de4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10dd0, { 1, 0 }
  uselistorder i32 %v4_10dcc, { 2, 1, 0 }
  uselistorder i32 %v1_10dd0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10dd8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_10da4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10d98, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 100, 0, 1, 53, 12, 54, 24, 28, 55, 25, 56, 26, 57, 27, 58, 59, 13, 60, 2, 61, 62, 32, 63, 31, 64, 29, 65, 30, 66, 14, 15, 3, 67, 33, 68, 34, 69, 16, 17, 4, 70, 35, 71, 36, 72, 18, 73, 39, 74, 38, 75, 37, 76, 19, 20, 5, 41, 77, 40, 78, 79, 80, 21, 81, 82, 6, 44, 83, 42, 84, 43, 85, 86, 22, 87, 7, 8, 47, 88, 45, 89, 46, 90, 91, 23, 92, 9, 48, 93, 49, 94, 50, 95, 96, 10, 51, 97, 98, 11, 52, 99 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_10e30, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10dec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10dd8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10ea8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ea8:
  store i32 %arg1, i32* @r0, align 4
  %v1_10ea8 = add i32 %arg2, -1
  %v2_10ea8 = icmp eq i32 %arg2, 0
  br i1 %v2_10ea8, label %dec_label_pc_10f64, label %dec_label_pc_10eb0

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10ea8
  %v7_10ea8 = icmp eq i32 %arg2, 1
  br i1 %v7_10ea8, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_10eb0
  %v1_10eb0 = load i32, i32* @r0, align 4
  %v10_10eb0 = icmp eq i32 %v1_10eb0, %arg2
  br i1 %v10_10eb0, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_10eb0, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_10eb0 = icmp ult i32 %v1_10eb0, %arg2
  br i1 %v4_10eb0, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_10eb8 = and i32 %v1_10ea8, %arg2
  %v8_10eb8 = icmp eq i32 %v6_10eb8, 0
  br i1 %v8_10eb8, label %.thread67, label %dec_label_pc_10ec8.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_10ebc = phi i32 [ %v1_10eb0, %bb75 ], [ 0, %.thread65 ]
  %v3_10ebc = and i32 %v1_10ebc, %v1_10ea8
  br label %bb76

dec_label_pc_10ec8.preheader:                     ; preds = %bb75
  %v2_10ec899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_10ec899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_10f58, %bb74, %bb89, %bb84, %dec_label_pc_10f28, %.thread67
  %v5_10ec0 = phi i32 [ %v1_10eb0, %bb74 ], [ %v3_10ebc, %.thread67 ], [ %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, %dec_label_pc_10f28 ], [ 0, %bb84 ], [ %v1_10f5c, %dec_label_pc_10f58 ], [ %v2_10f58, %bb89 ]
  ret i32 %v5_10ec0

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_10ec8.preheader
  %v0_10edc.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_10ec8.preheader ], [ %v4_10ed0, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10ec8.preheader ], [ %v2_10ed411, %.thread1.thread9 ]
  br label %dec_label_pc_10edcthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_10ec8.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_10ed411, %.thread1.thread9 ], [ 0, %dec_label_pc_10ec8.preheader ]
  %v0_10edc.pr33100 = phi i32 [ %v4_10ed0, %.thread1.thread9 ], [ %arg2, %dec_label_pc_10ec8.preheader ]
  %v4_10ecc = icmp ult i32 %v0_10edc.pr33100, %v1_10eb0
  br i1 %v4_10ecc, label %bb78, label %dec_label_pc_10edcthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_10ed0 = and i32 %v0_10edc.pr33100, 268435456
  %v3_10ed0 = icmp eq i32 %v2_10ed0, 0
  %v4_10ed0 = mul i32 %v0_10edc.pr33100, 16
  br i1 %v3_10ed0, label %.thread1.thread9, label %dec_label_pc_10edc.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_10ed411 = add i32 %storemerge101, 4
  %v2_10ec8 = icmp ugt i32 %v4_10ed0, 268435455
  br i1 %v2_10ec8, label %.thread, label %bb77

dec_label_pc_10edcthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_10edcthread-pre-split.loopexit

dec_label_pc_10edcthread-pre-split.loopexit:      ; preds = %dec_label_pc_10edcthread-pre-split.loopexit.loopexit, %.thread
  %v0_10edc.pr3398 = phi i32 [ %v0_10edc.pr33.lcssa, %.thread ], [ %v0_10edc.pr33100, %dec_label_pc_10edcthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_10edcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10edcthread-pre-split

dec_label_pc_10edcthread-pre-split:               ; preds = %.thread4, %dec_label_pc_10edcthread-pre-split.loopexit
  %v1_10ee839 = phi i32 [ %storemerge95, %dec_label_pc_10edcthread-pre-split.loopexit ], [ %v2_10ee8, %.thread4 ]
  %v0_10edc.pr = phi i32 [ %v0_10edc.pr3398, %dec_label_pc_10edcthread-pre-split.loopexit ], [ %v3_10ee4, %.thread4 ]
  br label %dec_label_pc_10edc

dec_label_pc_10edc.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10edc.loopexit, %dec_label_pc_10edcthread-pre-split
  %v0_10ef0.pr = phi i32 [ %v1_10ee839, %dec_label_pc_10edcthread-pre-split ], [ %storemerge101, %dec_label_pc_10edc.loopexit ]
  %v1_10ee4 = phi i32 [ %v0_10edc.pr, %dec_label_pc_10edcthread-pre-split ], [ %v4_10ed0, %dec_label_pc_10edc.loopexit ]
  %v2_10edc = icmp slt i32 %v1_10ee4, 0
  br i1 %v2_10edc, label %dec_label_pc_10ef0, label %bb79

bb79:                                             ; preds = %dec_label_pc_10edc
  %v4_10ee0 = icmp ult i32 %v1_10ee4, %v1_10eb0
  br i1 %v4_10ee0, label %.thread4, label %dec_label_pc_10ef0

.thread4:                                         ; preds = %bb79
  %v3_10ee4 = mul i32 %v1_10ee4, 2
  %v2_10ee8 = add i32 %v0_10ef0.pr, 1
  br label %dec_label_pc_10edcthread-pre-split

dec_label_pc_10ef0:                               ; preds = %bb79, %dec_label_pc_10edc
  %v2_10ef0 = add i32 %v0_10ef0.pr, -3
  %v5_10ef4 = icmp slt i32 %v0_10ef0.pr, 3
  br i1 %v5_10ef4, label %dec_label_pc_10f34, label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ef0, %bb83
  %v6_10f20 = phi i32 [ %v0_10f28, %bb83 ], [ %v2_10ef0, %dec_label_pc_10ef0 ]
  %v1_10efc = phi i32 [ %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, %bb83 ], [ %v1_10eb0, %dec_label_pc_10ef0 ]
  %v3_10f1c12 = phi i32 [ %v3_10f1c, %bb83 ], [ %v1_10ee4, %dec_label_pc_10ef0 ]
  %v3_10ef8 = icmp ult i32 %v1_10efc, %v3_10f1c12
  %v3_10efc = select i1 %v3_10ef8, i32 0, i32 %v3_10f1c12
  %v1_10f04 = sub i32 %v1_10efc, %v3_10efc
  %v4_10f00 = udiv i32 %v3_10f1c12, 2
  %v6_10f00 = icmp ult i32 %v1_10f04, %v4_10f00
  %v6_10f04 = select i1 %v6_10f00, i32 0, i32 %v4_10f00
  %v1_10f04.v6_10f04 = sub i32 %v1_10f04, %v6_10f04
  %.demorgan = and i1 %v3_10ef8, %v6_10f00
  %v4_10f08 = udiv i32 %v3_10f1c12, 4
  %v6_10f08 = icmp ult i32 %v1_10f04.v6_10f04, %v4_10f08
  %v6_10f0c = select i1 %v6_10f08, i32 0, i32 %v4_10f08
  %v1_10f04.v6_10f04.v6_10f0c = sub i32 %v1_10f04.v6_10f04, %v6_10f0c
  %.demorgan71 = and i1 %.demorgan, %v6_10f08
  %v4_10f10 = udiv i32 %v3_10f1c12, 8
  %v6_10f10 = icmp ult i32 %v1_10f04.v6_10f04.v6_10f0c, %v4_10f10
  %v6_10f14 = select i1 %v6_10f10, i32 0, i32 %v4_10f10
  %v1_10f04.v6_10f04.v6_10f0c.v6_10f14 = sub i32 %v1_10f04.v6_10f04.v6_10f0c, %v6_10f14
  %.demorgan72 = and i1 %.demorgan71, %v6_10f10
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_10ef8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_10ef8, %bb80
  %v2_10f18 = add i32 %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, -1
  %v4_10f18 = sub i32 0, %v1_10f04.v6_10f04.v6_10f0c.v6_10f14
  %v5_10f18 = and i32 %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, %v4_10f18
  %v3_10f1c = udiv i32 %v3_10f1c12, 16
  %v5_10f20 = icmp slt i32 %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, 1
  br i1 %v5_10f20, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_10f20 = add i32 %v6_10f20, -4
  %v9_10f20 = sub i32 3, %v6_10f20
  %v10_10f20 = and i32 %v9_10f20, %v6_10f20
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_10f28 = phi i32 [ %v6_10f20, %bb81 ], [ %v7_10f20, %bb82 ]
  %v0_10f2415.in = phi i32 [ %v2_10f18, %bb81 ], [ %v7_10f20, %bb82 ]
  %v1_10f2414.in = phi i32 [ %v5_10f18, %bb81 ], [ %v10_10f20, %bb82 ]
  %v1_10f2414 = icmp slt i32 %v1_10f2414.in, 0
  %v0_10f2415 = icmp slt i32 %v0_10f2415.in, 0
  %v2_10f24 = xor i1 %v0_10f2415, %v1_10f2414
  br i1 %v2_10f24, label %dec_label_pc_10f28, label %dec_label_pc_10ef8

dec_label_pc_10f28:                               ; preds = %bb83
  %v1_10f28 = urem i32 %v0_10f28, 4
  %v2_10f28 = icmp eq i32 %v1_10f28, 0
  br i1 %v2_10f28, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_10f28
  %v3_10f2c = icmp eq i32 %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, 0
  br i1 %v3_10f2c, label %bb76, label %dec_label_pc_10f34

dec_label_pc_10f34:                               ; preds = %bb84, %dec_label_pc_10ef0
  %v0_10f48 = phi i32 [ %v3_10f1c, %bb84 ], [ %v1_10ee4, %dec_label_pc_10ef0 ]
  %v1_10f44 = phi i32 [ %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, %bb84 ], [ %v1_10eb0, %dec_label_pc_10ef0 ]
  %v0_10f34 = phi i32 [ %v0_10f28, %bb84 ], [ %v2_10ef0, %dec_label_pc_10ef0 ]
  %v5_10f38 = icmp slt i32 %v0_10f34, -2
  br i1 %v5_10f38, label %dec_label_pc_10f58, label %dec_label_pc_10f3c

dec_label_pc_10f3c:                               ; preds = %dec_label_pc_10f34
  %v8_10f34 = icmp eq i32 %v0_10f34, -2
  br i1 %v8_10f34, label %dec_label_pc_10f4c, label %dec_label_pc_10f40

dec_label_pc_10f40:                               ; preds = %dec_label_pc_10f3c
  %v3_10f40 = icmp ult i32 %v1_10f44, %v0_10f48
  br i1 %v3_10f40, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_10f40
  %v2_10f40 = sub i32 %v1_10f44, %v0_10f48
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_10f40, %bb85
  %v0_10f4c52 = phi i32 [ %v1_10f44, %dec_label_pc_10f40 ], [ %v2_10f40, %bb85 ]
  %v3_10f48 = udiv i32 %v0_10f48, 2
  br label %dec_label_pc_10f4c

dec_label_pc_10f4c:                               ; preds = %dec_label_pc_10f3c, %bb86
  %v0_10f54 = phi i32 [ %v0_10f48, %dec_label_pc_10f3c ], [ %v3_10f48, %bb86 ]
  %v1_10f50 = phi i32 [ %v1_10f44, %dec_label_pc_10f3c ], [ %v0_10f4c52, %bb86 ]
  %v3_10f4c = icmp ult i32 %v1_10f50, %v0_10f54
  br i1 %v3_10f4c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_10f4c
  %v2_10f4c = sub i32 %v1_10f50, %v0_10f54
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_10f4c, %bb87
  %v0_10f5855 = phi i32 [ %v1_10f50, %dec_label_pc_10f4c ], [ %v2_10f4c, %bb87 ]
  %v3_10f54 = udiv i32 %v0_10f54, 2
  br label %dec_label_pc_10f58

dec_label_pc_10f58:                               ; preds = %dec_label_pc_10f34, %bb88
  %v2_10f5c = phi i32 [ %v0_10f48, %dec_label_pc_10f34 ], [ %v3_10f54, %bb88 ]
  %v1_10f5c = phi i32 [ %v1_10f44, %dec_label_pc_10f34 ], [ %v0_10f5855, %bb88 ]
  %v3_10f58 = icmp ult i32 %v1_10f5c, %v2_10f5c
  br i1 %v3_10f58, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_10f58
  %v2_10f58 = sub i32 %v1_10f5c, %v2_10f5c
  br label %bb76

dec_label_pc_10f64:                               ; preds = %dec_label_pc_10ea8
  %v0_10f64 = load i32, i32* @lr, align 4
  %v0_10f68 = call i32 @function_11058()
  call void @__pseudo_branch(i32 %v0_10f64)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10f5c, { 1, 2, 0 }
  uselistorder i32 %v0_10f48, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10f28, { 1, 0, 2 }
  uselistorder i32 %v7_10f20, { 1, 0 }
  uselistorder i32 %v3_10f1c, { 1, 0 }
  uselistorder i32 %v1_10f04.v6_10f04.v6_10f0c.v6_10f14, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_10f10, { 1, 0 }
  uselistorder i32 %v4_10f08, { 1, 0 }
  uselistorder i32 %v4_10f00, { 1, 0 }
  uselistorder i32 %v6_10f20, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10ef0, { 1, 0 }
  uselistorder i32 %v1_10ee4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_10ed0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10edc.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10eb0, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_10f58, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_10f4c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_10ef8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_10f74(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f74:
  store i32 %arg1, i32* @r0, align 4
  %v2_10f74 = icmp eq i32 %arg2, 0
  br i1 %v2_10f74, label %dec_label_pc_11048, label %dec_label_pc_10f7c

dec_label_pc_10f7c:                               ; preds = %dec_label_pc_10f74
  %v1_10f74 = icmp slt i32 %arg2, 0
  br i1 %v1_10f74, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_10f7c
  %v2_10f7c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_10f7c, %bb
  %v4_10f94 = phi i32 [ %arg2, %dec_label_pc_10f7c ], [ %v2_10f7c, %bb ]
  %v0_10f80 = load i32, i32* @r0, align 4
  %v1_10f80 = icmp slt i32 %v0_10f80, 0
  br i1 %v1_10f80, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_10f84 = sub i32 0, %v0_10f80
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_10f8c = phi i32 [ %v0_10f80, %bb79 ], [ %v2_10f84, %bb80 ]
  %v1_10f88 = add i32 %v4_10f94, -1
  %v7_10f88 = icmp eq i32 %v4_10f94, 1
  br i1 %v7_10f88, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_10f8c = icmp eq i32 %v1_10f8c, %v4_10f94
  br i1 %v10_10f8c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_10f8c = icmp ult i32 %v1_10f8c, %v4_10f94
  br i1 %v4_10f8c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_10f94 = and i32 %v1_10f88, %v4_10f94
  %v8_10f94 = icmp eq i32 %v6_10f94, 0
  br i1 %v8_10f94, label %.thread72, label %dec_label_pc_10fa4.preheader

dec_label_pc_10fa4.preheader:                     ; preds = %bb84
  %v2_10fa4109 = icmp ugt i32 %v4_10f94, 268435455
  br i1 %v2_10fa4109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_10f9864 = phi i32 [ %v1_10f8c, %bb84 ], [ 0, %.thread70 ]
  %v3_10f98 = and i32 %v1_10f9864, %v1_10f88
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_10fa4.preheader
  %v0_10fb8.pr35.lcssa = phi i32 [ %v4_10f94, %dec_label_pc_10fa4.preheader ], [ %v4_10fac, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10fa4.preheader ], [ %v2_10fb09, %.thread2.thread7 ]
  br label %dec_label_pc_10fb8thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_10fa4.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_10fb09, %.thread2.thread7 ], [ 0, %dec_label_pc_10fa4.preheader ]
  %v0_10fb8.pr35110 = phi i32 [ %v4_10fac, %.thread2.thread7 ], [ %v4_10f94, %dec_label_pc_10fa4.preheader ]
  %v4_10fa8 = icmp ult i32 %v0_10fb8.pr35110, %v1_10f8c
  br i1 %v4_10fa8, label %bb86, label %dec_label_pc_10fb8thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_10fac = and i32 %v0_10fb8.pr35110, 268435456
  %v3_10fac = icmp eq i32 %v2_10fac, 0
  %v4_10fac = mul i32 %v0_10fb8.pr35110, 16
  br i1 %v3_10fac, label %.thread2.thread7, label %dec_label_pc_10fb8.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_10fb09 = add i32 %storemerge111, 4
  %v2_10fa4 = icmp ugt i32 %v4_10fac, 268435455
  br i1 %v2_10fa4, label %.thread1, label %bb85

dec_label_pc_10fb8thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_10fb8thread-pre-split.loopexit

dec_label_pc_10fb8thread-pre-split.loopexit:      ; preds = %dec_label_pc_10fb8thread-pre-split.loopexit.loopexit, %.thread1
  %v0_10fb8.pr35108 = phi i32 [ %v0_10fb8.pr35.lcssa, %.thread1 ], [ %v0_10fb8.pr35110, %dec_label_pc_10fb8thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_10fb8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10fb8thread-pre-split

dec_label_pc_10fb8thread-pre-split:               ; preds = %.thread4, %dec_label_pc_10fb8thread-pre-split.loopexit
  %v1_10fc441 = phi i32 [ %storemerge105, %dec_label_pc_10fb8thread-pre-split.loopexit ], [ %v2_10fc4, %.thread4 ]
  %v2_10fbc36 = phi i32 [ %v1_10f8c, %dec_label_pc_10fb8thread-pre-split.loopexit ], [ %v2_10fbc, %.thread4 ]
  %v0_10fb8.pr = phi i32 [ %v0_10fb8.pr35108, %dec_label_pc_10fb8thread-pre-split.loopexit ], [ %v3_10fc0, %.thread4 ]
  br label %dec_label_pc_10fb8

dec_label_pc_10fb8.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_10fb8

dec_label_pc_10fb8:                               ; preds = %dec_label_pc_10fb8.loopexit, %dec_label_pc_10fb8thread-pre-split
  %v0_10fcc.pr = phi i32 [ %v1_10fc441, %dec_label_pc_10fb8thread-pre-split ], [ %storemerge111, %dec_label_pc_10fb8.loopexit ]
  %v2_10fbc = phi i32 [ %v2_10fbc36, %dec_label_pc_10fb8thread-pre-split ], [ %v1_10f8c, %dec_label_pc_10fb8.loopexit ]
  %v1_10fc0 = phi i32 [ %v0_10fb8.pr, %dec_label_pc_10fb8thread-pre-split ], [ %v4_10fac, %dec_label_pc_10fb8.loopexit ]
  %v2_10fb8 = icmp slt i32 %v1_10fc0, 0
  br i1 %v2_10fb8, label %dec_label_pc_10fcc, label %bb87

bb87:                                             ; preds = %dec_label_pc_10fb8
  %v4_10fbc = icmp ult i32 %v1_10fc0, %v2_10fbc
  br i1 %v4_10fbc, label %.thread4, label %dec_label_pc_10fcc

.thread4:                                         ; preds = %bb87
  %v3_10fc0 = mul i32 %v1_10fc0, 2
  %v2_10fc4 = add i32 %v0_10fcc.pr, 1
  br label %dec_label_pc_10fb8thread-pre-split

dec_label_pc_10fcc:                               ; preds = %bb87, %dec_label_pc_10fb8
  %v2_10fcc = add i32 %v0_10fcc.pr, -3
  %v5_10fd0 = icmp slt i32 %v0_10fcc.pr, 3
  br i1 %v5_10fd0, label %dec_label_pc_11010, label %dec_label_pc_10fd4

dec_label_pc_10fd4:                               ; preds = %dec_label_pc_10fcc, %bb91
  %v6_10ffc = phi i32 [ %v0_11004, %bb91 ], [ %v2_10fcc, %dec_label_pc_10fcc ]
  %v1_10fd8 = phi i32 [ %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, %bb91 ], [ %v2_10fbc, %dec_label_pc_10fcc ]
  %v3_10ff810 = phi i32 [ %v3_10ff8, %bb91 ], [ %v1_10fc0, %dec_label_pc_10fcc ]
  %v3_10fd4 = icmp ult i32 %v1_10fd8, %v3_10ff810
  %v3_10fd8 = select i1 %v3_10fd4, i32 0, i32 %v3_10ff810
  %v1_10fe0 = sub i32 %v1_10fd8, %v3_10fd8
  %v4_10fdc = udiv i32 %v3_10ff810, 2
  %v6_10fdc = icmp ult i32 %v1_10fe0, %v4_10fdc
  %v6_10fe0 = select i1 %v6_10fdc, i32 0, i32 %v4_10fdc
  %v1_10fe0.v6_10fe0 = sub i32 %v1_10fe0, %v6_10fe0
  %.demorgan = and i1 %v3_10fd4, %v6_10fdc
  %v4_10fe4 = udiv i32 %v3_10ff810, 4
  %v6_10fe4 = icmp ult i32 %v1_10fe0.v6_10fe0, %v4_10fe4
  %v6_10fe8 = select i1 %v6_10fe4, i32 0, i32 %v4_10fe4
  %v1_10fe0.v6_10fe0.v6_10fe8 = sub i32 %v1_10fe0.v6_10fe0, %v6_10fe8
  %.demorgan76 = and i1 %.demorgan, %v6_10fe4
  %v4_10fec = udiv i32 %v3_10ff810, 8
  %v6_10fec = icmp ult i32 %v1_10fe0.v6_10fe0.v6_10fe8, %v4_10fec
  %v6_10ff0 = select i1 %v6_10fec, i32 0, i32 %v4_10fec
  %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0 = sub i32 %v1_10fe0.v6_10fe0.v6_10fe8, %v6_10ff0
  %.demorgan77 = and i1 %.demorgan76, %v6_10fec
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_10fd4
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_10fd4, %bb88
  %v2_10ff4 = add i32 %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, -1
  %v4_10ff4 = sub i32 0, %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0
  %v5_10ff4 = and i32 %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, %v4_10ff4
  %v3_10ff8 = udiv i32 %v3_10ff810, 16
  %v5_10ffc = icmp slt i32 %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, 1
  br i1 %v5_10ffc, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_10ffc = add i32 %v6_10ffc, -4
  %v9_10ffc = sub i32 3, %v6_10ffc
  %v10_10ffc = and i32 %v9_10ffc, %v6_10ffc
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11004 = phi i32 [ %v6_10ffc, %bb89 ], [ %v7_10ffc, %bb90 ]
  %v0_1100013.in = phi i32 [ %v2_10ff4, %bb89 ], [ %v7_10ffc, %bb90 ]
  %v1_1100012.in = phi i32 [ %v5_10ff4, %bb89 ], [ %v10_10ffc, %bb90 ]
  %v1_1100012 = icmp slt i32 %v1_1100012.in, 0
  %v0_1100013 = icmp slt i32 %v0_1100013.in, 0
  %v2_11000 = xor i1 %v0_1100013, %v1_1100012
  br i1 %v2_11000, label %dec_label_pc_11004, label %dec_label_pc_10fd4

dec_label_pc_11004:                               ; preds = %bb91
  %v1_11004 = urem i32 %v0_11004, 4
  %v2_11004 = icmp eq i32 %v1_11004, 0
  br i1 %v2_11004, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11004
  %v3_11008 = icmp eq i32 %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, 0
  br i1 %v3_11008, label %.thread6, label %dec_label_pc_11010

dec_label_pc_11010:                               ; preds = %bb92, %dec_label_pc_10fcc
  %v0_11024 = phi i32 [ %v3_10ff8, %bb92 ], [ %v1_10fc0, %dec_label_pc_10fcc ]
  %v1_11020 = phi i32 [ %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, %bb92 ], [ %v2_10fbc, %dec_label_pc_10fcc ]
  %v0_11010 = phi i32 [ %v0_11004, %bb92 ], [ %v2_10fcc, %dec_label_pc_10fcc ]
  %v5_11014 = icmp slt i32 %v0_11010, -2
  br i1 %v5_11014, label %dec_label_pc_11034, label %dec_label_pc_11018

dec_label_pc_11018:                               ; preds = %dec_label_pc_11010
  %v8_11010 = icmp eq i32 %v0_11010, -2
  br i1 %v8_11010, label %dec_label_pc_11028, label %dec_label_pc_1101c

dec_label_pc_1101c:                               ; preds = %dec_label_pc_11018
  %v3_1101c = icmp ult i32 %v1_11020, %v0_11024
  br i1 %v3_1101c, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_1101c
  %v2_1101c = sub i32 %v1_11020, %v0_11024
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_1101c, %bb93
  %v0_1102854 = phi i32 [ %v1_11020, %dec_label_pc_1101c ], [ %v2_1101c, %bb93 ]
  %v3_11024 = udiv i32 %v0_11024, 2
  br label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_11018, %bb94
  %v0_11030 = phi i32 [ %v0_11024, %dec_label_pc_11018 ], [ %v3_11024, %bb94 ]
  %v1_1102c = phi i32 [ %v1_11020, %dec_label_pc_11018 ], [ %v0_1102854, %bb94 ]
  %v3_11028 = icmp ult i32 %v1_1102c, %v0_11030
  br i1 %v3_11028, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11028
  %v2_11028 = sub i32 %v1_1102c, %v0_11030
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11028, %bb95
  %v0_1103457 = phi i32 [ %v1_1102c, %dec_label_pc_11028 ], [ %v2_11028, %bb95 ]
  %v3_11030 = udiv i32 %v0_11030, 2
  br label %dec_label_pc_11034

dec_label_pc_11034:                               ; preds = %dec_label_pc_11010, %bb96
  %v2_11038 = phi i32 [ %v0_11024, %dec_label_pc_11010 ], [ %v3_11030, %bb96 ]
  %v1_11038 = phi i32 [ %v1_11020, %dec_label_pc_11010 ], [ %v0_1103457, %bb96 ]
  %v3_11034 = icmp ult i32 %v1_11038, %v2_11038
  br i1 %v3_11034, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11034
  %v2_11034 = sub i32 %v1_11038, %v2_11038
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11034, %bb83, %.thread72, %dec_label_pc_11004, %bb92, %bb97
  %v1_11040 = phi i32 [ %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, %dec_label_pc_11004 ], [ 0, %bb92 ], [ %v1_11038, %dec_label_pc_11034 ], [ %v2_11034, %bb97 ], [ %v3_10f98, %.thread72 ], [ %v1_10f8c, %bb83 ]
  br i1 %v1_10f80, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11040 = sub i32 0, %v1_11040
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11044 = phi i32 [ %v1_11040, %.thread6 ], [ %v2_11040, %bb98 ]
  ret i32 %v1_11044

dec_label_pc_11048:                               ; preds = %dec_label_pc_10f74
  %v0_11048 = load i32, i32* @lr, align 4
  %v0_1104c = call i32 @function_11058()
  call void @__pseudo_branch(i32 %v0_11048)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11024, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11004, { 1, 0, 2 }
  uselistorder i32 %v7_10ffc, { 1, 0 }
  uselistorder i32 %v3_10ff8, { 1, 0 }
  uselistorder i32 %v1_10fe0.v6_10fe0.v6_10fe8.v6_10ff0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_10fec, { 1, 0 }
  uselistorder i32 %v4_10fe4, { 1, 0 }
  uselistorder i32 %v4_10fdc, { 1, 0 }
  uselistorder i32 %v6_10ffc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10fcc, { 1, 0 }
  uselistorder i32 %v1_10fc0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_10fbc, { 1, 0, 3, 2 }
  uselistorder i32 %v4_10fac, { 1, 0, 3, 2 }
  uselistorder i32 %v0_10fb8.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10f8c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_10f94, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_11058, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11034, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11028, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_10fd4, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_11058() local_unnamed_addr {
dec_label_pc_11058:
  %v1_11058 = load i32, i32* @r0, align 4
  ret i32 %v1_11058
}

define i32 @function_1105c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1105c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1105c = load i32, i32* @r2, align 4
  %v1_1106c = add i32 %arg2, -12
  store i32 %v6_1105c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_1106c, 2
  br i1 %tmp, label %dec_label_pc_11094, label %dec_label_pc_1108c

dec_label_pc_1108c:                               ; preds = %dec_label_pc_1105c
  %v0_1108c = call i32 @function_110d0()
  br label %dec_label_pc_110c0

dec_label_pc_11094:                               ; preds = %dec_label_pc_1105c
  %v2_1109c = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_1109c, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_1109c, -4095
  br i1 %tmp8, label %dec_label_pc_110c0, label %dec_label_pc_110ac

dec_label_pc_110ac:                               ; preds = %dec_label_pc_11094
  %v0_110ac = call i32 @function_116f4()
  %v0_110b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_110b0 = sub i32 0, %v0_110b0
  %v2_110b4 = inttoptr i32 %v0_110ac to i32*
  store i32 %v1_110b0, i32* %v2_110b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_110c0

dec_label_pc_110c0:                               ; preds = %dec_label_pc_110ac, %dec_label_pc_11094, %dec_label_pc_1108c
  %storemerge = phi i32 [ %v0_1108c, %dec_label_pc_1108c ], [ %v2_1109c, %dec_label_pc_11094 ], [ -1, %dec_label_pc_110ac ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_1109c, { 1, 0, 2 }
}

define i32 @function_110d0() local_unnamed_addr {
dec_label_pc_110d0:
  %r4.global-to-local = alloca i32, align 4
  %v0_110f0 = load i32, i32* @r0, align 4
  store i32 %v0_110f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_110f0, -4095
  br i1 %tmp, label %dec_label_pc_1110c, label %dec_label_pc_110fc

dec_label_pc_110fc:                               ; preds = %dec_label_pc_110d0
  %v0_110fc = call i32 @function_116f4()
  %v0_11100 = load i32, i32* %r4.global-to-local, align 4
  %v1_11100 = sub i32 0, %v0_11100
  %v2_11104 = inttoptr i32 %v0_110fc to i32*
  store i32 %v1_11100, i32* %v2_11104, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1110c

dec_label_pc_1110c:                               ; preds = %dec_label_pc_110d0, %dec_label_pc_110fc
  %v0_1110c = phi i32 [ %v0_110f0, %dec_label_pc_110d0 ], [ -1, %dec_label_pc_110fc ]
  ret i32 %v0_1110c

; uselistorder directives
  uselistorder i32 %v0_110f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1110c, { 1, 0 }
}

define i32 @function_11120(i32 %arg1) local_unnamed_addr {
dec_label_pc_11120:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11120 = load i32, i32* @r4, align 4
  store i32 %v3_11120, i32* %stack_var_-8, align 4
  %v1_11124 = call i32 @close(i32 %arg1)
  store i32 %v1_11124, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11124, -4095
  br i1 %tmp, label %dec_label_pc_11144, label %dec_label_pc_11134

dec_label_pc_11134:                               ; preds = %dec_label_pc_11120
  %v0_11134 = call i32 @function_116f4()
  %v0_11138 = load i32, i32* %r4.global-to-local, align 4
  %v1_11138 = sub i32 0, %v0_11138
  %v2_1113c = inttoptr i32 %v0_11134 to i32*
  store i32 %v1_11138, i32* %v2_1113c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11144

dec_label_pc_11144:                               ; preds = %dec_label_pc_11120, %dec_label_pc_11134
  %v0_11144 = phi i32 [ %v1_11124, %dec_label_pc_11120 ], [ -1, %dec_label_pc_11134 ]
  %v2_11148 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11148, i32* @r4, align 4
  ret i32 %v0_11144

; uselistorder directives
  uselistorder i32 %v1_11124, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11144, { 1, 0 }
}

define i32 @function_1114c() local_unnamed_addr {
dec_label_pc_1114c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1114c = load i32, i32* @r4, align 4
  store i32 %v3_1114c, i32* %stack_var_-8, align 4
  %v0_11150 = call i32 @fork()
  store i32 %v0_11150, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11150, -4095
  br i1 %tmp, label %dec_label_pc_11170, label %dec_label_pc_11160

dec_label_pc_11160:                               ; preds = %dec_label_pc_1114c
  %v0_11160 = call i32 @function_116f4()
  %v0_11164 = load i32, i32* %r4.global-to-local, align 4
  %v1_11164 = sub i32 0, %v0_11164
  %v2_11168 = inttoptr i32 %v0_11160 to i32*
  store i32 %v1_11164, i32* %v2_11168, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11170

dec_label_pc_11170:                               ; preds = %dec_label_pc_1114c, %dec_label_pc_11160
  %v0_11170 = phi i32 [ %v0_11150, %dec_label_pc_1114c ], [ -1, %dec_label_pc_11160 ]
  %v2_11174 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11174, i32* @r4, align 4
  ret i32 %v0_11170

; uselistorder directives
  uselistorder i32 %v0_11150, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11170, { 1, 0 }
}

define i32 @function_11178() local_unnamed_addr {
dec_label_pc_11178:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11178 = load i32, i32* @r4, align 4
  store i32 %v3_11178, i32* %stack_var_-8, align 4
  %v0_1117c = call i32 @getpid()
  store i32 %v0_1117c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1117c, -4095
  br i1 %tmp, label %dec_label_pc_1119c, label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11178
  %v0_1118c = call i32 @function_116f4()
  %v0_11190 = load i32, i32* %r4.global-to-local, align 4
  %v1_11190 = sub i32 0, %v0_11190
  %v2_11194 = inttoptr i32 %v0_1118c to i32*
  store i32 %v1_11190, i32* %v2_11194, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_11178, %dec_label_pc_1118c
  %v0_1119c = phi i32 [ %v0_1117c, %dec_label_pc_11178 ], [ -1, %dec_label_pc_1118c ]
  %v2_111a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111a0, i32* @r4, align 4
  ret i32 %v0_1119c

; uselistorder directives
  uselistorder i32 %v0_1117c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1119c, { 1, 0 }
}

define i32 @function_111a4() local_unnamed_addr {
dec_label_pc_111a4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111a4 = load i32, i32* @r4, align 4
  store i32 %v3_111a4, i32* %stack_var_-8, align 4
  %v0_111a8 = call i32 @getppid()
  store i32 %v0_111a8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111a8, -4095
  br i1 %tmp, label %dec_label_pc_111c8, label %dec_label_pc_111b8

dec_label_pc_111b8:                               ; preds = %dec_label_pc_111a4
  %v0_111b8 = call i32 @function_116f4()
  %v0_111bc = load i32, i32* %r4.global-to-local, align 4
  %v1_111bc = sub i32 0, %v0_111bc
  %v2_111c0 = inttoptr i32 %v0_111b8 to i32*
  store i32 %v1_111bc, i32* %v2_111c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_111a4, %dec_label_pc_111b8
  %v0_111c8 = phi i32 [ %v0_111a8, %dec_label_pc_111a4 ], [ -1, %dec_label_pc_111b8 ]
  %v2_111cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111cc, i32* @r4, align 4
  ret i32 %v0_111c8

; uselistorder directives
  uselistorder i32 %v0_111a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111c8, { 1, 0 }
}

define i32 @function_111d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_111d0 = load i32, i32* @r3, align 4
  store i32 %v9_111d0, i32* %stack_var_-4, align 4
  %v2_111dc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_111dc, i32* @r3, align 4
  %v2_111ec = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_111ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_111ec, -4095
  br i1 %tmp, label %dec_label_pc_1120c, label %dec_label_pc_111fc

dec_label_pc_111fc:                               ; preds = %dec_label_pc_111d0
  %v0_111fc = call i32 @function_116f4()
  %v0_11200 = load i32, i32* %r4.global-to-local, align 4
  %v1_11200 = sub i32 0, %v0_11200
  store i32 %v1_11200, i32* @r3, align 4
  %v2_11204 = inttoptr i32 %v0_111fc to i32*
  store i32 %v1_11200, i32* %v2_11204, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1120c

dec_label_pc_1120c:                               ; preds = %dec_label_pc_111d0, %dec_label_pc_111fc
  %v0_1120c = phi i32 [ %v2_111ec, %dec_label_pc_111d0 ], [ -1, %dec_label_pc_111fc ]
  ret i32 %v0_1120c

; uselistorder directives
  uselistorder i32 %v2_111ec, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_1120c, { 1, 0 }
}

define i32 @function_11220(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11220:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11220 = load i32, i32* @r4, align 4
  store i32 %v3_11220, i32* %stack_var_-8, align 4
  %v2_11224 = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_11224, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11224, -4095
  br i1 %tmp, label %dec_label_pc_11244, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_11220
  %v0_11234 = call i32 @function_116f4()
  %v0_11238 = load i32, i32* %r4.global-to-local, align 4
  %v1_11238 = sub i32 0, %v0_11238
  %v2_1123c = inttoptr i32 %v0_11234 to i32*
  store i32 %v1_11238, i32* %v2_1123c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11244

dec_label_pc_11244:                               ; preds = %dec_label_pc_11220, %dec_label_pc_11234
  %v0_11244 = phi i32 [ %v2_11224, %dec_label_pc_11220 ], [ -1, %dec_label_pc_11234 ]
  %v2_11248 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11248, i32* @r4, align 4
  ret i32 %v0_11244

; uselistorder directives
  uselistorder i32 %v2_11224, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11244, { 1, 0 }
}

define i32 @function_1124c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1124c:
  %r4.global-to-local = alloca i32, align 4
  %v6_1124c = load i32, i32* @r2, align 4
  %v1_1125c = and i32 %arg2, 64
  store i32 %v1_1125c, i32* @r3, align 4
  %v2_1125c = icmp eq i32 %v1_1125c, 0
  br i1 %v2_1125c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_1124c
  store i32 %v6_1124c, i32* @r3, align 4
  %phitmp = urem i32 %v6_1124c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1124c, %bb
  %v0_1126c = phi i32 [ 0, %dec_label_pc_1124c ], [ %phitmp, %bb ]
  store i32 %v0_1126c, i32* @r2, align 4
  %v4_11274 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_11278 = icmp eq i32 %v4_11274, -4096
  store i1 %v7_11278, i1* @cpsr_z, align 1
  store i32 %v4_11274, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11274, -4095
  br i1 %tmp, label %dec_label_pc_11294, label %dec_label_pc_11284

dec_label_pc_11284:                               ; preds = %.thread1
  %v0_11284 = call i32 @function_116f4()
  %v0_11288 = load i32, i32* %r4.global-to-local, align 4
  %v1_11288 = sub i32 0, %v0_11288
  store i32 %v1_11288, i32* @r3, align 4
  %v2_1128c = inttoptr i32 %v0_11284 to i32*
  store i32 %v1_11288, i32* %v2_1128c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11294

dec_label_pc_11294:                               ; preds = %.thread1, %dec_label_pc_11284
  %v0_11294 = phi i32 [ %v4_11274, %.thread1 ], [ -1, %dec_label_pc_11284 ]
  ret i32 %v0_11294

; uselistorder directives
  uselistorder i32 %v4_11274, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11294, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_112a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_112a8:
  store i32 %arg1, i32* @r2, align 4
  %v0_112b0 = load i32, i32* @r0, align 4
  %v2_112b0 = inttoptr i32 %v0_112b0 to i8*
  %v3_112b0 = call i32 @function_1124c(i8* %v2_112b0, i32 577)
  %v0_112b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_112b4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_112a8
  %v6_112b4 = and i32 %v3_112b0, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_112a8, %bb
  %v7_112b4 = phi i32 [ %v3_112b0, %dec_label_pc_112a8 ], [ %v6_112b4, %bb ]
  ret i32 %v7_112b4

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_112b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_112b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_112b8 = load i32, i32* @r4, align 4
  store i32 %v3_112b8, i32* %stack_var_-8, align 4
  %v2_112c0 = load i32, i32* @r2, align 4
  %v3_112c0 = load i32, i32* @r3, align 4
  %v4_112c0 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_112c0, i32 %v3_112c0, i32 0)
  store i32 %v4_112c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_112c0, -4095
  br i1 %tmp, label %dec_label_pc_112e0, label %dec_label_pc_112d0

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112b8
  %v0_112d0 = call i32 @function_116f4()
  %v0_112d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_112d4 = sub i32 0, %v0_112d4
  %v2_112d8 = inttoptr i32 %v0_112d0 to i32*
  store i32 %v1_112d4, i32* %v2_112d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_112e0

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112b8, %dec_label_pc_112d0
  %v0_112e0 = phi i32 [ %v4_112c0, %dec_label_pc_112b8 ], [ -1, %dec_label_pc_112d0 ]
  %v2_112e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_112e4, i32* @r4, align 4
  ret i32 %v0_112e0

; uselistorder directives
  uselistorder i32 %v4_112c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112e0, { 1, 0 }
}

define i32 @function_112e8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_112e8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_112e8 = load i32, i32* @r4, align 4
  store i32 %v3_112e8, i32* %stack_var_-8, align 4
  %v4_112ec = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_112ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_112ec, -4095
  br i1 %tmp, label %dec_label_pc_1130c, label %dec_label_pc_112fc

dec_label_pc_112fc:                               ; preds = %dec_label_pc_112e8
  %v0_112fc = call i32 @function_116f4()
  %v0_11300 = load i32, i32* %r4.global-to-local, align 4
  %v1_11300 = sub i32 0, %v0_11300
  %v2_11304 = inttoptr i32 %v0_112fc to i32*
  store i32 %v1_11300, i32* %v2_11304, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %dec_label_pc_112e8, %dec_label_pc_112fc
  %v0_1130c = phi i32 [ %v4_112ec, %dec_label_pc_112e8 ], [ -1, %dec_label_pc_112fc ]
  %v2_11310 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11310, i32* @r4, align 4
  ret i32 %v0_1130c

; uselistorder directives
  uselistorder i32 %v4_112ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1130c, { 1, 0 }
}

define i32 @function_11314(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11314:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_11314 = load i32, i32* @r4, align 4
  store i32 %v3_11314, i32* %stack_var_-8, align 4
  %v7_11318 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_11318, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_11318, -4095
  br i1 %tmp6, label %dec_label_pc_11338, label %dec_label_pc_11328

dec_label_pc_11328:                               ; preds = %dec_label_pc_11314
  %v0_11328 = call i32 @function_116f4()
  %v0_1132c = load i32, i32* %r4.global-to-local, align 4
  %v1_1132c = sub i32 0, %v0_1132c
  %v2_11330 = inttoptr i32 %v0_11328 to i32*
  store i32 %v1_1132c, i32* %v2_11330, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11338

dec_label_pc_11338:                               ; preds = %dec_label_pc_11314, %dec_label_pc_11328
  %v0_11338 = phi i32 [ %v7_11318, %dec_label_pc_11314 ], [ -1, %dec_label_pc_11328 ]
  %v2_1133c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1133c, i32* @r4, align 4
  ret i32 %v0_11338

; uselistorder directives
  uselistorder i32 %v7_11318, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11338, { 1, 0 }
}

define i32 @function_11340(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11340:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11340 = load i32, i32* @r4, align 4
  store i32 %v3_11340, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11368, label %dec_label_pc_11358

dec_label_pc_11358:                               ; preds = %dec_label_pc_11340
  %v0_11358 = call i32 @function_116f4()
  %v0_1135c = load i32, i32* %r4.global-to-local, align 4
  %v1_1135c = sub i32 0, %v0_1135c
  %v2_11360 = inttoptr i32 %v0_11358 to i32*
  store i32 %v1_1135c, i32* %v2_11360, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1136c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11368

dec_label_pc_11368:                               ; preds = %dec_label_pc_11340, %dec_label_pc_11358
  %v2_1136c = phi i32 [ %v3_11340, %dec_label_pc_11340 ], [ %v2_1136c.pre, %dec_label_pc_11358 ]
  %v0_11368 = phi i32 [ %arg1, %dec_label_pc_11340 ], [ -1, %dec_label_pc_11358 ]
  store i32 %v2_1136c, i32* @r4, align 4
  ret i32 %v0_11368

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11368, { 1, 0 }
}

define i32 @function_11370(i32 %arg1) local_unnamed_addr {
dec_label_pc_11370:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11370 = load i32, i32* @r4, align 4
  store i32 %v3_11370, i32* %stack_var_-8, align 4
  %v0_11374 = call i32 @setsid()
  store i32 %v0_11374, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11374, -4095
  br i1 %tmp, label %dec_label_pc_11394, label %dec_label_pc_11384

dec_label_pc_11384:                               ; preds = %dec_label_pc_11370
  %v0_11384 = call i32 @function_116f4()
  %v0_11388 = load i32, i32* %r4.global-to-local, align 4
  %v1_11388 = sub i32 0, %v0_11388
  %v2_1138c = inttoptr i32 %v0_11384 to i32*
  store i32 %v1_11388, i32* %v2_1138c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11394

dec_label_pc_11394:                               ; preds = %dec_label_pc_11370, %dec_label_pc_11384
  %v0_11394 = phi i32 [ %v0_11374, %dec_label_pc_11370 ], [ -1, %dec_label_pc_11384 ]
  %v2_11398 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11398, i32* @r4, align 4
  ret i32 %v0_11394

; uselistorder directives
  uselistorder i32 %v0_11374, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11394, { 1, 0 }
}

define i32 @function_1139c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1139c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1139c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_1139c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1139c
  %v3_113a45 = load i32, i32* @r4, align 4
  store i32 %v3_113a45, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113c4

bb:                                               ; preds = %dec_label_pc_1139c
  %v3_113a4 = load i32, i32* @r4, align 4
  store i32 %v3_113a4, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_113c4, label %dec_label_pc_113b0

dec_label_pc_113b0:                               ; preds = %bb
  %v0_113b0 = call i32 @function_116f4()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_113bc = inttoptr i32 %v0_113b0 to i32*
  store i32 22, i32* %v2_113bc, align 4
  %v0_113e8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113e8

dec_label_pc_113c4:                               ; preds = %.thread, %bb
  %v7_113c4 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_113c4, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_113c4, -4095
  br i1 %tmp13, label %dec_label_pc_113e4, label %dec_label_pc_113d4

dec_label_pc_113d4:                               ; preds = %dec_label_pc_113c4
  %v0_113d4 = call i32 @function_116f4()
  %v0_113d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_113d8 = sub i32 0, %v0_113d8
  %v2_113dc = inttoptr i32 %v0_113d4 to i32*
  store i32 %v1_113d8, i32* %v2_113dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_113e4

dec_label_pc_113e4:                               ; preds = %dec_label_pc_113c4, %dec_label_pc_113d4
  %v0_113e4 = phi i32 [ %v7_113c4, %dec_label_pc_113c4 ], [ -1, %dec_label_pc_113d4 ]
  store i32 %v0_113e4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_113e8

dec_label_pc_113e8:                               ; preds = %dec_label_pc_113b0, %dec_label_pc_113e4
  %v0_113e8 = phi i32 [ %v0_113e8.pre, %dec_label_pc_113b0 ], [ %v0_113e4, %dec_label_pc_113e4 ]
  %v2_113ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_113ec, i32* @r4, align 4
  ret i32 %v0_113e8

; uselistorder directives
  uselistorder i32 %v7_113c4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_113e8, { 1, 0 }
  uselistorder label %dec_label_pc_113e4, { 1, 0 }
  uselistorder label %dec_label_pc_113c4, { 1, 0 }
}

define i32 @function_113f0(i32* %arg1) local_unnamed_addr {
dec_label_pc_113f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113f0 = load i32, i32* @r4, align 4
  store i32 %v3_113f0, i32* %stack_var_-8, align 4
  %v2_113f4 = call i32 @time(i32* %arg1)
  store i32 %v2_113f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_113f4, -4095
  br i1 %tmp, label %dec_label_pc_11414, label %dec_label_pc_11404

dec_label_pc_11404:                               ; preds = %dec_label_pc_113f0
  %v0_11404 = call i32 @function_116f4()
  %v0_11408 = load i32, i32* %r4.global-to-local, align 4
  %v1_11408 = sub i32 0, %v0_11408
  %v2_1140c = inttoptr i32 %v0_11404 to i32*
  store i32 %v1_11408, i32* %v2_1140c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11414

dec_label_pc_11414:                               ; preds = %dec_label_pc_113f0, %dec_label_pc_11404
  %v0_11414 = phi i32 [ %v2_113f4, %dec_label_pc_113f0 ], [ -1, %dec_label_pc_11404 ]
  %v2_11418 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11418, i32* @r4, align 4
  ret i32 %v0_11414

; uselistorder directives
  uselistorder i32 %v2_113f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11414, { 1, 0 }
}

define i32 @function_1141c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1141c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1141c = load i32, i32* @r4, align 4
  store i32 %v3_1141c, i32* %stack_var_-8, align 4
  %v3_11420 = call i32 @unlink(i8* %arg1)
  store i32 %v3_11420, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11420, -4095
  br i1 %tmp, label %dec_label_pc_11440, label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %dec_label_pc_1141c
  %v0_11430 = call i32 @function_116f4()
  %v0_11434 = load i32, i32* %r4.global-to-local, align 4
  %v1_11434 = sub i32 0, %v0_11434
  %v2_11438 = inttoptr i32 %v0_11430 to i32*
  store i32 %v1_11434, i32* %v2_11438, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11440

dec_label_pc_11440:                               ; preds = %dec_label_pc_1141c, %dec_label_pc_11430
  %v0_11440 = phi i32 [ %v3_11420, %dec_label_pc_1141c ], [ -1, %dec_label_pc_11430 ]
  %v2_11444 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11444, i32* @r4, align 4
  ret i32 %v0_11440

; uselistorder directives
  uselistorder i32 %v3_11420, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11440, { 1, 0 }
}

define i32 @function_11448(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11448:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11448 = load i32, i32* @r4, align 4
  store i32 %v3_11448, i32* %stack_var_-8, align 4
  %v4_1144c = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_1144c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1144c, -4095
  br i1 %tmp, label %dec_label_pc_1146c, label %dec_label_pc_1145c

dec_label_pc_1145c:                               ; preds = %dec_label_pc_11448
  %v0_1145c = call i32 @function_116f4()
  %v0_11460 = load i32, i32* %r4.global-to-local, align 4
  %v1_11460 = sub i32 0, %v0_11460
  %v2_11464 = inttoptr i32 %v0_1145c to i32*
  store i32 %v1_11460, i32* %v2_11464, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1146c

dec_label_pc_1146c:                               ; preds = %dec_label_pc_11448, %dec_label_pc_1145c
  %v0_1146c = phi i32 [ %v4_1144c, %dec_label_pc_11448 ], [ -1, %dec_label_pc_1145c ]
  %v2_11470 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11470, i32* @r4, align 4
  ret i32 %v0_1146c

; uselistorder directives
  uselistorder i32 %v4_1144c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1146c, { 1, 0 }
}

define i32 @function_11474(i32* %arg1) local_unnamed_addr {
dec_label_pc_11474:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11474 = load i32, i32* @r4, align 4
  store i32 %v3_11474, i32* %stack_var_-20, align 4
  %v6_11474 = load i32, i32* @r5, align 4
  %v9_11474 = load i32, i32* @r6, align 4
  %v12_11474 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1147c = load i32, i32* %arg1, align 4
  store i32 %v2_1147c, i32* %r4.global-to-local, align 4
  %v2_11480 = ptrtoint i32* %stack_var_-36 to i32
  %v1_11484 = add i32 %tmp, 24
  store i32 %v1_11484, i32* @r6, align 4
  %v3_11488 = icmp eq i32 %v2_1147c, -1
  store i32 %v2_11480, i32* @r7, align 4
  store i32 %v1_11484, i32* %r2.global-to-local, align 4
  store i32 %v2_11480, i32* @r0, align 4
  br i1 %v3_11488, label %dec_label_pc_114a0, label %dec_label_pc_114b4

dec_label_pc_114a0:                               ; preds = %dec_label_pc_11474
  %v0_114a0 = call i32 @function_116f4()
  %v0_114a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_114a8, i32* %r2.global-to-local, align 4
  %v2_114ac = inttoptr i32 %v0_114a0 to i32*
  store i32 9, i32* %v2_114ac, align 4
  %v0_1150c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1150c

dec_label_pc_114b4:                               ; preds = %dec_label_pc_11474
  %v8_114bc = call i32 @function_12718(i32 %v2_11480, i32 ptrtoint (i32* @global_var_12710.364 to i32), i32 %v1_11484, i32 75544, i32 %v3_11474, i32 %v6_11474, i32 %v9_11474)
  %v1_114cc = call i32 @function_12710()
  %v0_114d8 = load i32, i32* @r5, align 4
  %v1_114d8 = inttoptr i32 %v0_114d8 to i32*
  %v2_114d8 = load i32, i32* %v1_114d8, align 4
  store i32 %v2_114d8, i32* @r4, align 4
  store i32 %v2_11480, i32* @r0, align 4
  store i32 -1, i32* %v1_114d8, align 4
  store i32 ptrtoint (i32* @global_var_114f0.368 to i32), i32* @lr, align 4
  %v8_114ec = call i32 @function_12718(i32 %v2_11480, i32 1, i32 %v1_11484, i32 75544, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_114f0 = load i32, i32* @r5, align 4
  %v1_114f0 = add i32 %v0_114f0, 12
  %v2_114f0 = inttoptr i32 %v1_114f0 to i32*
  %v3_114f0 = load i32, i32* %v2_114f0, align 4
  store i32 %v3_114f0, i32* @r0, align 4
  %v0_114f4 = call i32 @function_11d28()
  %v0_114f8 = load i32, i32* @r5, align 4
  store i32 %v0_114f8, i32* @r0, align 4
  %v0_114fc = call i32 @function_11d28()
  %v0_11500 = load i32, i32* @r4, align 4
  %v1_11504 = call i32 @function_11120(i32 %v0_11500)
  store i32 %v1_11504, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1150c

dec_label_pc_1150c:                               ; preds = %dec_label_pc_114a0, %dec_label_pc_114b4
  %v0_1150c = phi i32 [ %v0_1150c.pre, %dec_label_pc_114a0 ], [ %v1_11504, %dec_label_pc_114b4 ]
  %v2_11514 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11514, i32* @r4, align 4
  store i32 %v6_11474, i32* @r5, align 4
  store i32 %v9_11474, i32* @r6, align 4
  store i32 %v12_11474, i32* @r7, align 4
  ret i32 %v0_1150c

; uselistorder directives
  uselistorder i32 %v1_11484, { 2, 1, 0, 3 }
  uselistorder i32 %v2_11480, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_11474, { 1, 0 }
  uselistorder i32 %v6_11474, { 1, 0 }
  uselistorder label %dec_label_pc_1150c, { 1, 0 }
}

define i32 @function_11528(i32 %arg1) local_unnamed_addr {
dec_label_pc_11528:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_11528 = load i32, i32* @r4, align 4
  %v9_11528 = load i32, i32* @r6, align 4
  %v12_11528 = load i32, i32* @r7, align 4
  %v2_11534 = inttoptr i32 %arg1 to i8*
  %v3_11534 = call i32 @function_1124c(i8* %v2_11534, i32 18432)
  store i32 %v3_11534, i32* @r0, align 4
  store i32 %v3_11534, i32* @r7, align 4
  %v1_11538 = icmp slt i32 %v3_11534, 0
  br i1 %v1_11538, label %.thread1, label %dec_label_pc_11544

.thread1:                                         ; preds = %dec_label_pc_11528
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_11614

dec_label_pc_11544:                               ; preds = %dec_label_pc_11528
  %v2_11530 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_11530, i32* @r1, align 4
  %v0_11548 = call i32 @function_12b3c()
  %v1_1154c = icmp slt i32 %v0_11548, 0
  br i1 %v1_1154c, label %dec_label_pc_1156c, label %dec_label_pc_11554

dec_label_pc_11554:                               ; preds = %dec_label_pc_11544
  %v0_11554 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_11560 = call i32 @function_1105c(i32 %v0_11554, i32 2)
  %v1_11564 = icmp slt i32 %v2_11560, 0
  br i1 %v1_11564, label %dec_label_pc_1156c, label %dec_label_pc_1158c

dec_label_pc_1156c:                               ; preds = %dec_label_pc_11554, %dec_label_pc_11544
  %v0_1156c = call i32 @function_116f4()
  store i32 %v0_1156c, i32* %r5.global-to-local, align 4
  %v0_11574 = load i32, i32* @r7, align 4
  %v1_11578 = inttoptr i32 %v0_1156c to i32*
  %v2_11578 = load i32, i32* %v1_11578, align 4
  store i32 %v2_11578, i32* @r4, align 4
  %v1_1157c = call i32 @function_11120(i32 %v0_11574)
  store i32 0, i32* @r6, align 4
  %v0_11584 = load i32, i32* @r4, align 4
  %v1_11584 = load i32, i32* %r5.global-to-local, align 4
  %v2_11584 = inttoptr i32 %v1_11584 to i32*
  store i32 %v0_11584, i32* %v2_11584, align 4
  br label %dec_label_pc_11614

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11554
  %v1_11590 = call i32 @function_11b7c(i32 48)
  store i32 %v1_11590, i32* @r6, align 4
  %v2_11594 = icmp eq i32 %v1_11590, 0
  br i1 %v2_11594, label %dec_label_pc_115e4, label %dec_label_pc_1159c

dec_label_pc_1159c:                               ; preds = %dec_label_pc_1158c
  store i32 0, i32* @r4, align 4
  %v2_115a0 = add i32 %v1_11590, 16
  %v3_115a0 = inttoptr i32 %v2_115a0 to i32*
  store i32 0, i32* %v3_115a0, align 4
  %v2_115a8 = icmp ugt i32 %tmp, 511
  %v1_115ac = load i32, i32* @r6, align 4
  %v2_115ac = add i32 %v1_115ac, 20
  %v3_115ac = inttoptr i32 %v2_115ac to i32*
  store i32 %tmp, i32* %v3_115ac, align 4
  br i1 %v2_115a8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1159c
  %v2_115b4 = load i32, i32* @r6, align 4
  %v3_115b4 = add i32 %v2_115b4, 20
  %v4_115b4 = inttoptr i32 %v3_115b4 to i32*
  store i32 512, i32* %v4_115b4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1159c, %bb
  %v0_115b8 = load i32, i32* @r7, align 4
  %v1_115b8 = load i32, i32* @r6, align 4
  %v2_115b8 = inttoptr i32 %v1_115b8 to i32*
  store i32 %v0_115b8, i32* %v2_115b8, align 4
  %v0_115bc = load i32, i32* @r4, align 4
  %v1_115bc = load i32, i32* @r6, align 4
  %v2_115bc = add i32 %v1_115bc, 8
  %v3_115bc = inttoptr i32 %v2_115bc to i32*
  store i32 %v0_115bc, i32* %v3_115bc, align 4
  %v0_115c0 = load i32, i32* @r4, align 4
  %v1_115c0 = load i32, i32* @r6, align 4
  %v2_115c0 = add i32 %v1_115c0, 4
  %v3_115c0 = inttoptr i32 %v2_115c0 to i32*
  store i32 %v0_115c0, i32* %v3_115c0, align 4
  %v0_115c8 = load i32, i32* @r6, align 4
  %v1_115c8 = add i32 %v0_115c8, 20
  %v2_115c8 = inttoptr i32 %v1_115c8 to i32*
  %v3_115c8 = load i32, i32* %v2_115c8, align 4
  %v2_115cc = call i32 @function_11cd0(i32 1, i32 %v3_115c8)
  %v2_115d0 = icmp eq i32 %v2_115cc, 0
  %v1_115d4 = load i32, i32* @r6, align 4
  %v2_115d4 = add i32 %v1_115d4, 12
  %v3_115d4 = inttoptr i32 %v2_115d4 to i32*
  store i32 %v2_115cc, i32* %v3_115d4, align 4
  br i1 %v2_115d0, label %dec_label_pc_115dc, label %dec_label_pc_11600

dec_label_pc_115dc:                               ; preds = %.thread
  %v0_115dc = load i32, i32* @r6, align 4
  store i32 %v0_115dc, i32* @r0, align 4
  %v0_115e0 = call i32 @function_11d28()
  br label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_1158c, %dec_label_pc_115dc
  %v0_115e4 = load i32, i32* @r7, align 4
  %v1_115e8 = call i32 @function_11120(i32 %v0_115e4)
  %v0_115ec = call i32 @function_116f4()
  store i32 0, i32* @r6, align 4
  %v2_115f8 = inttoptr i32 %v0_115ec to i32*
  store i32 12, i32* %v2_115f8, align 4
  br label %dec_label_pc_11614

dec_label_pc_11600:                               ; preds = %.thread
  store i32 71188, i32* @lr, align 4
  %v1_11610 = call i32 @function_12710()
  br label %dec_label_pc_11614

dec_label_pc_11614:                               ; preds = %.thread1, %dec_label_pc_115e4, %dec_label_pc_1156c, %dec_label_pc_11600
  %v0_11614 = load i32, i32* @r6, align 4
  store i32 %v3_11528, i32* @r4, align 4
  store i32 %v9_11528, i32* @r6, align 4
  store i32 %v12_11528, i32* @r7, align 4
  ret i32 %v0_11614

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11cd0, { 39, 40, 38, 37, 36, 22, 35, 34, 33, 32, 28, 27, 26, 25, 24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 2, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 31, 30, 29 }
  uselistorder i32 512, { 0, 5, 1, 6, 8, 2, 9, 3, 10, 4, 11, 7 }
  uselistorder i32 (i32)* @function_11120, { 20, 19, 18, 31, 35, 30, 29, 34, 33, 28, 27, 32, 26, 25, 4, 3, 2, 24, 23, 22, 21, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1 }
  uselistorder label %dec_label_pc_11614, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_115e4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11624(i32* %arg1) local_unnamed_addr {
dec_label_pc_11624:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11624 = load i32, i32* @r4, align 4
  %v6_11624 = load i32, i32* @r5, align 4
  %v9_11624 = load i32, i32* @lr, align 4
  %v1_11628 = add i32 %tmp, 24
  store i32 %v1_11628, i32* @r4, align 4
  %v2_1162c = ptrtoint i32* %stack_var_-28 to i32
  store i32 75544, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_1162c, i32* @r0, align 4
  store i32 %v1_11628, i32* %r2.global-to-local, align 4
  %v8_11648 = call i32 @function_12718(i32 %v2_1162c, i32 ptrtoint (i32* @global_var_12710.364 to i32), i32 %v1_11628, i32 75544, i32 %v3_11624, i32 %v6_11624, i32 %v9_11624)
  %v0_1164c = load i32, i32* @r4, align 4
  store i32 %v0_1164c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12710.364 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1165c.373 to i32), i32* @lr, align 4
  %v1_11658 = call i32 @function_12710()
  store i32 %v1_11658, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1165c

dec_label_pc_1165c:                               ; preds = %dec_label_pc_11690, %dec_label_pc_11624
  %v0_1165c = load i32, i32* @r5, align 4
  %v1_1165c = add i32 %v0_1165c, 4
  %v2_1165c = inttoptr i32 %v1_1165c to i32*
  %v3_1165c = load i32, i32* %v2_1165c, align 4
  store i32 %v3_1165c, i32* %r2.global-to-local, align 4
  %v4_1165c = add i32 %v0_1165c, 8
  %v5_1165c = inttoptr i32 %v4_1165c to i32*
  %v6_1165c = load i32, i32* %v5_1165c, align 4
  store i32 %v6_1165c, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_1165c, %v3_1165c
  br i1 %tmp8, label %dec_label_pc_11690, label %dec_label_pc_11668

dec_label_pc_11668:                               ; preds = %dec_label_pc_1165c
  %v1_11668 = inttoptr i32 %v0_1165c to i32*
  %v2_11668 = load i32, i32* %v1_11668, align 4
  store i32 %v2_11668, i32* @r0, align 4
  %v1_1166c = add i32 %v0_1165c, 12
  %v2_1166c = inttoptr i32 %v1_1166c to i32*
  %v3_1166c = load i32, i32* %v2_1166c, align 4
  %v1_11670 = add i32 %v0_1165c, 20
  %v2_11670 = inttoptr i32 %v1_11670 to i32*
  %v3_11670 = load i32, i32* %v2_11670, align 4
  store i32 %v3_11670, i32* @r2, align 4
  %v4_11674 = call i32 @function_12b8c(i32 %v2_11668, i32 %v3_1166c, i32 %v3_11670, i32 %v6_1165c)
  store i32 %v4_11674, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_11674, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_11684

.thread:                                          ; preds = %dec_label_pc_11668
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_116c4

dec_label_pc_11684:                               ; preds = %dec_label_pc_11668
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11688 = load i32, i32* @r5, align 4
  %v2_11688 = add i32 %v1_11688, 4
  %v3_11688 = inttoptr i32 %v2_11688 to i32*
  store i32 0, i32* %v3_11688, align 4
  %v1_1168c = load i32, i32* @r5, align 4
  %v2_1168c = add i32 %v1_1168c, 8
  %v3_1168c = inttoptr i32 %v2_1168c to i32*
  store i32 %v4_11674, i32* %v3_1168c, align 4
  %v0_11690.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11690

dec_label_pc_11690:                               ; preds = %dec_label_pc_1165c, %dec_label_pc_11684
  %v1_116a8 = phi i32 [ %v0_1165c, %dec_label_pc_1165c ], [ %v0_11690.pre, %dec_label_pc_11684 ]
  %v1_11690 = add i32 %v1_116a8, 4
  %v2_11690 = inttoptr i32 %v1_11690 to i32*
  %v3_11690 = load i32, i32* %v2_11690, align 4
  store i32 %v3_11690, i32* %r2.global-to-local, align 4
  %v1_11694 = add i32 %v1_116a8, 12
  %v2_11694 = inttoptr i32 %v1_11694 to i32*
  %v3_11694 = load i32, i32* %v2_11694, align 4
  store i32 %v3_11694, i32* %ip.global-to-local, align 4
  %v2_11698 = add i32 %v3_11694, %v3_11690
  store i32 %v2_11698, i32* @r4, align 4
  %v1_1169c = add i32 %v2_11698, 4
  %v2_1169c = inttoptr i32 %v1_1169c to i32*
  %v3_1169c = load i32, i32* %v2_1169c, align 4
  %v1_116a0 = add i32 %v2_11698, 8
  %v2_116a0 = inttoptr i32 %v1_116a0 to i8*
  %v3_116a0 = load i8, i8* %v2_116a0, align 1
  %v4_116a0 = zext i8 %v3_116a0 to i32
  store i32 %v4_116a0, i32* %r3.global-to-local, align 4
  %v1_116a4 = add i32 %v2_11698, 9
  %v2_116a4 = inttoptr i32 %v1_116a4 to i8*
  %v3_116a4 = load i8, i8* %v2_116a4, align 1
  %v4_116a4 = zext i8 %v3_116a4 to i32
  store i32 %v4_116a4, i32* %r0.global-to-local, align 4
  %v2_116a8 = add i32 %v1_116a8, 16
  %v3_116a8 = inttoptr i32 %v2_116a8 to i32*
  store i32 %v3_1169c, i32* %v3_116a8, align 4
  %v0_116ac = load i32, i32* %r2.global-to-local, align 4
  %v1_116ac = load i32, i32* %ip.global-to-local, align 4
  %v2_116ac = add i32 %v1_116ac, %v0_116ac
  %v3_116ac = inttoptr i32 %v2_116ac to i32*
  %v4_116ac = load i32, i32* %v3_116ac, align 4
  %v0_116b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_116b0 = load i32, i32* %r0.global-to-local, align 4
  %v4_116b0 = mul i32 %v1_116b0, 256
  %v5_116b0 = or i32 %v4_116b0, %v0_116b0
  store i32 %v5_116b0, i32* %r3.global-to-local, align 4
  %v2_116b4 = add i32 %v5_116b0, %v0_116ac
  store i32 %v2_116b4, i32* @r2, align 4
  %v2_116b8 = icmp eq i32 %v4_116ac, 0
  %v1_116bc = load i32, i32* @r5, align 4
  %v2_116bc = add i32 %v1_116bc, 4
  %v3_116bc = inttoptr i32 %v2_116bc to i32*
  store i32 %v2_116b4, i32* %v3_116bc, align 4
  br i1 %v2_116b8, label %dec_label_pc_1165c, label %dec_label_pc_116c4

dec_label_pc_116c4:                               ; preds = %dec_label_pc_11690, %.thread
  store i32 %v2_1162c, i32* @r0, align 4
  store i32 75544, i32* %r3.global-to-local, align 4
  store i32 71384, i32* @lr, align 4
  %v3_116d4 = load i32, i32* @r2, align 4
  %v8_116d4 = call i32 @function_12718(i32 %v2_1162c, i32 1, i32 %v3_116d4, i32 75544, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_116d8 = load i32, i32* @r4, align 4
  store i32 %v0_116d8, i32* %r0.global-to-local, align 4
  store i32 %v3_11624, i32* @r4, align 4
  store i32 %v6_11624, i32* @r5, align 4
  ret i32 %v0_116d8

; uselistorder directives
  uselistorder i32 %v1_116a8, { 0, 2, 1 }
  uselistorder i32 %v6_1165c, { 1, 0, 2 }
  uselistorder i32 %v0_1165c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_1162c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_11628, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_11690, { 1, 0 }
}

define i32 @function_116f4() local_unnamed_addr {
dec_label_pc_116f4:
  ret i32 ptrtoint (i32* @global_var_1c224.376 to i32)
}

define i32 @function_11700(i32 %arg1) local_unnamed_addr {
dec_label_pc_11700:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_1170c = bitcast i32* %stack_var_-20 to %tms*
  %v2_1170c = call i32 @function_12f1c(%tms* %v1_1170c)
  %v2_11714 = load i32, i32* %stack_var_-20, align 4
  %v2_11718 = add i32 %v2_11714, %tmp
  %v2_11720 = mul i32 %v2_11718, 10000
  %v1_11724 = and i32 %v2_11720, 2147483632
  ret i32 %v1_11724

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_11740(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11740:
  %v0_11740 = call i32 @function_13330()
  ret i32 %v0_11740
}

define i32 @function_11750(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11750:
  %v0_11750 = call i32 @function_13330()
  ret i32 %v0_11750

; uselistorder directives
  uselistorder i32 ()* @function_13330, { 1, 0 }
}

define i32 @function_11760(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11760:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_11764 = load i32, i32* @r2, align 4
  %v8_11764 = icmp eq i32 %v0_11764, 8
  store i1 %v8_11764, i1* %cpsr_z.global-to-local, align 1
  %v5_11768 = icmp slt i32 %v0_11764, 8
  br i1 %v5_11768, label %dec_label_pc_117c8, label %dec_label_pc_1176c

dec_label_pc_1176c:                               ; preds = %dec_label_pc_11760
  %v4_1176c = mul i32 %arg2, 256
  %v5_1176c = or i32 %v4_1176c, %arg2
  %v4_11770 = mul i32 %v5_1176c, 65536
  %v5_11770 = or i32 %v4_11770, %v5_1176c
  store i32 %v5_11770, i32* %r1.global-to-local, align 4
  %v1_1177457 = urem i32 %tmp, 4
  %v2_1177458 = icmp eq i32 %v1_1177457, 0
  store i1 %v2_1177458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1177458, label %dec_label_pc_11784, label %bb

bb:                                               ; preds = %dec_label_pc_1176c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1176c ]
  %v3_1177859 = phi i32 [ %v6_11778, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1176c ]
  %v4_11778 = inttoptr i32 %v3_1177859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11778, align 1
  %v5_11778 = load i32, i32* %r3.global-to-local, align 4
  %v6_11778 = add i32 %v5_11778, 1
  store i32 %v6_11778, i32* %r3.global-to-local, align 4
  %v0_1177c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11788.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1177c.pr, label %dec_label_pc_11784, label %.thread

.thread:                                          ; preds = %bb
  %v2_1177c = add i32 %v0_11788.pr.pre, -1
  store i32 %v2_1177c, i32* @r2, align 4
  %v1_11774 = urem i32 %v6_11778, 4
  %v2_11774 = icmp eq i32 %v1_11774, 0
  store i1 %v2_11774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11774, label %dec_label_pc_11784, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11778.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11778.pre to i8
  br label %bb

dec_label_pc_11784:                               ; preds = %.thread, %bb, %dec_label_pc_1176c
  %v0_1179028 = phi i32 [ %tmp, %dec_label_pc_1176c ], [ %v6_11778, %bb ], [ %v6_11778, %.thread ]
  %v0_11788.pr = phi i32 [ %v0_11764, %dec_label_pc_1176c ], [ %v0_11788.pr.pre, %bb ], [ %v2_1177c, %.thread ]
  %v0_11784 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11784, i32* %ip.global-to-local, align 4
  %v8_1178810 = icmp eq i32 %v0_11788.pr, 8
  store i1 %v8_1178810, i1* %cpsr_z.global-to-local, align 1
  %v5_1178c11 = icmp slt i32 %v0_11788.pr, 8
  br i1 %v5_1178c11, label %dec_label_pc_117c8, label %dec_label_pc_11790.preheader

dec_label_pc_11790.preheader:                     ; preds = %dec_label_pc_11784
  %v1_1179046 = inttoptr i32 %v0_1179028 to i32*
  store i32 %v0_11784, i32* %v1_1179046, align 4
  %v3_1179047 = add i32 %v0_1179028, 4
  %v4_1179048 = inttoptr i32 %v3_1179047 to i32*
  %v5_1179049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1179049, i32* %v4_1179048, align 4
  %v6_1179050 = add i32 %v0_1179028, 8
  store i32 %v6_1179050, i32* %r3.global-to-local, align 4
  %v0_1179451 = load i32, i32* @r2, align 4
  %v1_1179452 = add i32 %v0_1179451, -8
  store i32 %v1_1179452, i32* %r2.global-to-local, align 4
  %v5_1179c53 = icmp slt i32 %v1_1179452, 8
  br i1 %v5_1179c53, label %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_117a0

dec_label_pc_117a0:                               ; preds = %dec_label_pc_11790.preheader, %dec_label_pc_11788.dec_label_pc_11790_crit_edge
  %v6_1179055 = phi i32 [ %v6_11790, %dec_label_pc_11788.dec_label_pc_11790_crit_edge ], [ %v6_1179050, %dec_label_pc_11790.preheader ]
  %v0_1179054 = phi i32 [ %v12_117bc, %dec_label_pc_11788.dec_label_pc_11790_crit_edge ], [ %v0_1179028, %dec_label_pc_11790.preheader ]
  %v1_117a0 = inttoptr i32 %v6_1179055 to i32*
  %v2_117a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_117a0, i32* %v1_117a0, align 4
  %v3_117a0 = add i32 %v0_1179054, 12
  %v4_117a0 = inttoptr i32 %v3_117a0 to i32*
  %v5_117a0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_117a0, i32* %v4_117a0, align 4
  %v6_117a0 = add i32 %v0_1179054, 16
  store i32 %v6_117a0, i32* %r3.global-to-local, align 4
  %v0_117a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_117a4 = add i32 %v0_117a4, -8
  store i32 %v1_117a4, i32* %r2.global-to-local, align 4
  %v5_117ac = icmp slt i32 %v1_117a4, 8
  br i1 %v5_117ac, label %dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_117b0

dec_label_pc_117b0:                               ; preds = %dec_label_pc_117a0
  %v1_117b0 = inttoptr i32 %v6_117a0 to i32*
  %v2_117b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_117b0, i32* %v1_117b0, align 4
  %v3_117b0 = add i32 %v0_1179054, 20
  %v4_117b0 = inttoptr i32 %v3_117b0 to i32*
  %v5_117b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_117b0, i32* %v4_117b0, align 4
  %v6_117b0 = add i32 %v0_1179054, 24
  store i32 %v6_117b0, i32* %r3.global-to-local, align 4
  %v0_117b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_117b4 = add i32 %v0_117b4, -8
  store i32 %v1_117b4, i32* %r2.global-to-local, align 4
  %v5_117bc = icmp slt i32 %v1_117b4, 8
  br i1 %v5_117bc, label %dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_11788

dec_label_pc_11788:                               ; preds = %dec_label_pc_117b0
  %v7_117bc = inttoptr i32 %v6_117b0 to i32*
  %v8_117bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_117bc, i32* %v7_117bc, align 4
  %v9_117bc = add i32 %v0_1179054, 28
  %v10_117bc = inttoptr i32 %v9_117bc to i32*
  %v11_117bc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_117bc, i32* %v10_117bc, align 4
  %v12_117bc = add i32 %v0_1179054, 32
  store i32 %v12_117bc, i32* %r3.global-to-local, align 4
  %v6_117c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_117c0 = add i32 %v6_117c0, -8
  store i32 %v7_117c0, i32* %r2.global-to-local, align 4
  %v5_1178c = icmp slt i32 %v7_117c0, 8
  br i1 %v5_1178c, label %dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_11788.dec_label_pc_11790_crit_edge

dec_label_pc_11788.dec_label_pc_11790_crit_edge:  ; preds = %dec_label_pc_11788
  %v2_11790.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11790 = inttoptr i32 %v12_117bc to i32*
  store i32 %v2_11790.pre, i32* %v1_11790, align 4
  %v3_11790 = add i32 %v0_1179054, 36
  %v4_11790 = inttoptr i32 %v3_11790 to i32*
  %v5_11790 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11790, i32* %v4_11790, align 4
  %v6_11790 = add i32 %v0_1179054, 40
  store i32 %v6_11790, i32* %r3.global-to-local, align 4
  %v0_11794 = load i32, i32* %r2.global-to-local, align 4
  %v1_11794 = add i32 %v0_11794, -8
  store i32 %v1_11794, i32* %r2.global-to-local, align 4
  %v5_1179c = icmp slt i32 %v1_11794, 8
  br i1 %v5_1179c, label %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge, label %dec_label_pc_117a0

dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_11788.dec_label_pc_11790_crit_edge, %dec_label_pc_11790.preheader
  %v1_11794.lcssa = phi i32 [ %v1_1179452, %dec_label_pc_11790.preheader ], [ %v1_11794, %dec_label_pc_11788.dec_label_pc_11790_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_11788
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_117a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge: ; preds = %dec_label_pc_117b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117c8

dec_label_pc_117c8:                               ; preds = %dec_label_pc_11784, %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge, %dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge, %dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge, %dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge, %dec_label_pc_11760
  %v0_117d0 = phi i32 [ %v0_11764, %dec_label_pc_11760 ], [ %v1_117b4, %dec_label_pc_117b0.dec_label_pc_117c8.loopexit_crit_edge ], [ %v1_117a4, %dec_label_pc_117a0.dec_label_pc_117c8.loopexit_crit_edge ], [ %v7_117c0, %dec_label_pc_11788.dec_label_pc_117c8.loopexit_crit_edge ], [ %v1_11794.lcssa, %dec_label_pc_11790.dec_label_pc_117c8.loopexit_crit_edge ], [ %v0_11788.pr, %dec_label_pc_11784 ]
  %v2_117c8 = icmp eq i32 %v0_117d0, 0
  store i1 %v2_117c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117c8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_117c8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_117c8
  %v1_117d0 = sub i32 7, %v0_117d0
  store i32 %v1_117d0, i32* %r2.global-to-local, align 4
  %v3_117d4 = mul i32 %v1_117d0, 4
  %v4_117d4 = add i32 %v3_117d4, ptrtoint (i32* @global_var_117dc.378 to i32)
  call void @__pseudo_branch(i32 %v4_117d4)
  %v0_117dc = load i32, i32* %r1.global-to-local, align 4
  %v1_117dc = trunc i32 %v0_117dc to i8
  %v2_117dc = load i32, i32* %r3.global-to-local, align 4
  %v3_117dc = inttoptr i32 %v2_117dc to i8*
  store i8 %v1_117dc, i8* %v3_117dc, align 1
  %v4_117dc = load i32, i32* %r3.global-to-local, align 4
  %v5_117dc = add i32 %v4_117dc, 1
  store i32 %v5_117dc, i32* %r3.global-to-local, align 4
  %v0_117e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_117e0 = trunc i32 %v0_117e0 to i8
  %v3_117e0 = inttoptr i32 %v5_117dc to i8*
  store i8 %v1_117e0, i8* %v3_117e0, align 1
  %v4_117e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_117e0 = add i32 %v4_117e0, 1
  store i32 %v5_117e0, i32* %r3.global-to-local, align 4
  %v0_117e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_117e4 = trunc i32 %v0_117e4 to i8
  %v3_117e4 = inttoptr i32 %v5_117e0 to i8*
  store i8 %v1_117e4, i8* %v3_117e4, align 1
  %v4_117e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_117e4 = add i32 %v4_117e4, 1
  store i32 %v5_117e4, i32* %r3.global-to-local, align 4
  %v0_117e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_117e8 = trunc i32 %v0_117e8 to i8
  %v3_117e8 = inttoptr i32 %v5_117e4 to i8*
  store i8 %v1_117e8, i8* %v3_117e8, align 1
  %v4_117e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_117e8 = add i32 %v4_117e8, 1
  store i32 %v5_117e8, i32* %r3.global-to-local, align 4
  %v0_117ec = load i32, i32* %r1.global-to-local, align 4
  %v1_117ec = trunc i32 %v0_117ec to i8
  %v3_117ec = inttoptr i32 %v5_117e8 to i8*
  store i8 %v1_117ec, i8* %v3_117ec, align 1
  %v4_117ec = load i32, i32* %r3.global-to-local, align 4
  %v5_117ec = add i32 %v4_117ec, 1
  store i32 %v5_117ec, i32* %r3.global-to-local, align 4
  %v0_117f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_117f0 = trunc i32 %v0_117f0 to i8
  %v3_117f0 = inttoptr i32 %v5_117ec to i8*
  store i8 %v1_117f0, i8* %v3_117f0, align 1
  %v4_117f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_117f0 = add i32 %v4_117f0, 1
  store i32 %v5_117f0, i32* %r3.global-to-local, align 4
  %v0_117f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_117f4 = trunc i32 %v0_117f4 to i8
  %v3_117f4 = inttoptr i32 %v5_117f0 to i8*
  store i8 %v1_117f4, i8* %v3_117f4, align 1
  %v4_117f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_117f4 = add i32 %v4_117f4, 1
  store i32 %v5_117f4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11790, { 1, 0 }
  uselistorder i32 %v12_117bc, { 1, 2, 0 }
  uselistorder i32 %v0_1179054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11788.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11778, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1176c, { 1, 0 }
  uselistorder i32 %v0_11764, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_117c8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_117a0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11800(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_11800:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11800 = sub i32 %arg1, %tmp
  %v1_11804 = add i32 %v2_11800, -1
  store i32 %v1_11804, i32* %r2.global-to-local, align 4
  %v2_118084 = load i8, i8* %arg2, align 1
  %v5_118086 = add i32 %tmp, 1
  store i32 %v5_118086, i32* %r1.global-to-local, align 4
  %v2_1180c7 = icmp eq i8 %v2_118084, 0
  store i1 %v2_1180c7, i1* %cpsr_z.global-to-local, align 1
  %v5_118108 = inttoptr i32 %arg1 to i8*
  store i8 %v2_118084, i8* %v5_118108, align 1
  %v0_118149 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_118149, label %dec_label_pc_11818, label %dec_label_pc_11808.dec_label_pc_11808_crit_edge

dec_label_pc_11808.dec_label_pc_11808_crit_edge:  ; preds = %dec_label_pc_11800, %dec_label_pc_11808.dec_label_pc_11808_crit_edge
  %v0_11808.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_11810.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11808 = inttoptr i32 %v0_11808.pre to i8*
  %v2_11808 = load i8, i8* %v1_11808, align 1
  %v5_11808 = add i32 %v0_11808.pre, 1
  store i32 %v5_11808, i32* %r1.global-to-local, align 4
  %v2_1180c = icmp eq i8 %v2_11808, 0
  store i1 %v2_1180c, i1* %cpsr_z.global-to-local, align 1
  %v4_11810 = add i32 %v5_11808, %v3_11810.pre
  %v5_11810 = inttoptr i32 %v4_11810 to i8*
  store i8 %v2_11808, i8* %v5_11810, align 1
  %v0_11814 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11814, label %dec_label_pc_11818, label %dec_label_pc_11808.dec_label_pc_11808_crit_edge

dec_label_pc_11818:                               ; preds = %dec_label_pc_11808.dec_label_pc_11808_crit_edge, %dec_label_pc_11800
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11808.dec_label_pc_11808_crit_edge, { 1, 0 }
}

define i32 @function_1181c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1181c:
  %stack_var_-8 = alloca i32, align 4
  %v2_11820 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_11820, i32* @r1, align 4
  %v0_11828 = call i32 @function_137c0()
  %v2_1182c = icmp eq i32 %v0_11828, 0
  br i1 %v2_1182c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_1181c
  %v3_11834 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_1181c, %bb
  %v5_1183c = phi i32 [ -1, %dec_label_pc_1181c ], [ %v3_11834, %bb ]
  ret i32 %v5_1183c

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_11840(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_11840:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11840 = load i32, i32* @r4, align 4
  store i32 %v3_11840, i32* %stack_var_-8, align 4
  %v5_11844 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_11844, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11844, -4095
  br i1 %tmp, label %dec_label_pc_11864, label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %dec_label_pc_11840
  %v0_11854 = call i32 @function_116f4()
  %v0_11858 = load i32, i32* %r4.global-to-local, align 4
  %v1_11858 = sub i32 0, %v0_11858
  %v2_1185c = inttoptr i32 %v0_11854 to i32*
  store i32 %v1_11858, i32* %v2_1185c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11864

dec_label_pc_11864:                               ; preds = %dec_label_pc_11840, %dec_label_pc_11854
  %v0_11864 = phi i32 [ %v5_11844, %dec_label_pc_11840 ], [ -1, %dec_label_pc_11854 ]
  %v2_11868 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11868, i32* @r4, align 4
  ret i32 %v0_11864

; uselistorder directives
  uselistorder i32 %v5_11844, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11864, { 1, 0 }
}

define i32 @function_1186c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1186c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1186c = load i32, i32* @r4, align 4
  store i32 %v3_1186c, i32* %stack_var_-8, align 4
  %v5_11870 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_11870, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11870, -4095
  br i1 %tmp, label %dec_label_pc_11890, label %dec_label_pc_11880

dec_label_pc_11880:                               ; preds = %dec_label_pc_1186c
  %v0_11880 = call i32 @function_116f4()
  %v0_11884 = load i32, i32* %r4.global-to-local, align 4
  %v1_11884 = sub i32 0, %v0_11884
  %v2_11888 = inttoptr i32 %v0_11880 to i32*
  store i32 %v1_11884, i32* %v2_11888, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_1186c, %dec_label_pc_11880
  %v0_11890 = phi i32 [ %v5_11870, %dec_label_pc_1186c ], [ -1, %dec_label_pc_11880 ]
  %v2_11894 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11894, i32* @r4, align 4
  ret i32 %v0_11890

; uselistorder directives
  uselistorder i32 %v5_11870, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11890, { 1, 0 }
}

define i32 @function_11898(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11898:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11898 = load i32, i32* @r4, align 4
  store i32 %v3_11898, i32* %stack_var_-8, align 4
  %v5_1189c = inttoptr i32 %arg3 to i32*
  %v6_1189c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_1189c)
  store i32 %v6_1189c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_1189c, -4095
  br i1 %tmp, label %dec_label_pc_118bc, label %dec_label_pc_118ac

dec_label_pc_118ac:                               ; preds = %dec_label_pc_11898
  %v0_118ac = call i32 @function_116f4()
  %v0_118b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_118b0 = sub i32 0, %v0_118b0
  %v2_118b4 = inttoptr i32 %v0_118ac to i32*
  store i32 %v1_118b0, i32* %v2_118b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_118bc

dec_label_pc_118bc:                               ; preds = %dec_label_pc_11898, %dec_label_pc_118ac
  %v0_118bc = phi i32 [ %v6_1189c, %dec_label_pc_11898 ], [ -1, %dec_label_pc_118ac ]
  %v2_118c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_118c0, i32* @r4, align 4
  ret i32 %v0_118bc

; uselistorder directives
  uselistorder i32 %v6_1189c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_118bc, { 1, 0 }
}

define i32 @function_118c4(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_118c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_118c4 = load i32, i32* @r4, align 4
  store i32 %v3_118c4, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_118cc = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_118cc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_118cc, -4095
  br i1 %tmp, label %dec_label_pc_118ec, label %dec_label_pc_118dc

dec_label_pc_118dc:                               ; preds = %dec_label_pc_118c4
  %v0_118dc = call i32 @function_116f4()
  %v0_118e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_118e0 = sub i32 0, %v0_118e0
  %v2_118e4 = inttoptr i32 %v0_118dc to i32*
  store i32 %v1_118e0, i32* %v2_118e4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118c4, %dec_label_pc_118dc
  %v0_118ec = phi i32 [ %v5_118cc, %dec_label_pc_118c4 ], [ -1, %dec_label_pc_118dc ]
  %v2_118f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_118f0, i32* @r4, align 4
  ret i32 %v0_118ec

; uselistorder directives
  uselistorder i32 %v5_118cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_118ec, { 1, 0 }
}

define i32 @function_118f4(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_118f4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_118f4 = load i32, i32* @r4, align 4
  store i32 %v3_118f4, i32* %stack_var_-8, align 4
  %v5_118f8 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_118f8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_118f8, -4095
  br i1 %tmp, label %dec_label_pc_11918, label %dec_label_pc_11908

dec_label_pc_11908:                               ; preds = %dec_label_pc_118f4
  %v0_11908 = call i32 @function_116f4()
  %v0_1190c = load i32, i32* %r4.global-to-local, align 4
  %v1_1190c = sub i32 0, %v0_1190c
  %v2_11910 = inttoptr i32 %v0_11908 to i32*
  store i32 %v1_1190c, i32* %v2_11910, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11918

dec_label_pc_11918:                               ; preds = %dec_label_pc_118f4, %dec_label_pc_11908
  %v0_11918 = phi i32 [ %v5_118f8, %dec_label_pc_118f4 ], [ -1, %dec_label_pc_11908 ]
  %v2_1191c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1191c, i32* @r4, align 4
  ret i32 %v0_11918

; uselistorder directives
  uselistorder i32 %v5_118f8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11918, { 1, 0 }
}

define i32 @function_11920(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11920:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11920 = load i32, i32* @r4, align 4
  store i32 %v3_11920, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_1192c = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_1192c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1192c, -4095
  br i1 %tmp, label %dec_label_pc_1194c, label %dec_label_pc_1193c

dec_label_pc_1193c:                               ; preds = %dec_label_pc_11920
  %v0_1193c = call i32 @function_116f4()
  %v0_11940 = load i32, i32* %r4.global-to-local, align 4
  %v1_11940 = sub i32 0, %v0_11940
  %v2_11944 = inttoptr i32 %v0_1193c to i32*
  store i32 %v1_11940, i32* %v2_11944, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11920, %dec_label_pc_1193c
  %v0_1194c = phi i32 [ %v5_1192c, %dec_label_pc_11920 ], [ -1, %dec_label_pc_1193c ]
  %v2_11950 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11950, i32* @r4, align 4
  ret i32 %v0_1194c

; uselistorder directives
  uselistorder i32 %v5_1192c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1194c, { 1, 0 }
}

define i32 @function_11954(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11954:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11954 = load i32, i32* @r4, align 4
  store i32 %v3_11954, i32* %stack_var_-8, align 4
  %v5_11958 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11958, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11958, -4095
  br i1 %tmp, label %dec_label_pc_11978, label %dec_label_pc_11968

dec_label_pc_11968:                               ; preds = %dec_label_pc_11954
  %v0_11968 = call i32 @function_116f4()
  %v0_1196c = load i32, i32* %r4.global-to-local, align 4
  %v1_1196c = sub i32 0, %v0_1196c
  %v2_11970 = inttoptr i32 %v0_11968 to i32*
  store i32 %v1_1196c, i32* %v2_11970, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11978

dec_label_pc_11978:                               ; preds = %dec_label_pc_11954, %dec_label_pc_11968
  %v0_11978 = phi i32 [ %v5_11958, %dec_label_pc_11954 ], [ -1, %dec_label_pc_11968 ]
  %v2_1197c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1197c, i32* @r4, align 4
  ret i32 %v0_11978

; uselistorder directives
  uselistorder i32 %v5_11958, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11978, { 1, 0 }
}

define i32 @function_11980(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11980:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_1198c = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_1198c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1198c, -4095
  br i1 %tmp, label %dec_label_pc_119ac, label %dec_label_pc_1199c

dec_label_pc_1199c:                               ; preds = %dec_label_pc_11980
  %v0_1199c = call i32 @function_116f4()
  %v0_119a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_119a0 = sub i32 0, %v0_119a0
  %v2_119a4 = inttoptr i32 %v0_1199c to i32*
  store i32 %v1_119a0, i32* %v2_119a4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_119ac

dec_label_pc_119ac:                               ; preds = %dec_label_pc_11980, %dec_label_pc_1199c
  %v0_119ac = phi i32 [ %v5_1198c, %dec_label_pc_11980 ], [ -1, %dec_label_pc_1199c ]
  ret i32 %v0_119ac

; uselistorder directives
  uselistorder i32 %v5_1198c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119ac, { 1, 0 }
}

define i32 @function_119b4(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_119b4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_119b4 = load i32, i32* @r4, align 4
  store i32 %v3_119b4, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_119bc = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_119bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_119bc, -4095
  br i1 %tmp, label %dec_label_pc_119dc, label %dec_label_pc_119cc

dec_label_pc_119cc:                               ; preds = %dec_label_pc_119b4
  %v0_119cc = call i32 @function_116f4()
  %v0_119d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_119d0 = sub i32 0, %v0_119d0
  %v2_119d4 = inttoptr i32 %v0_119cc to i32*
  store i32 %v1_119d0, i32* %v2_119d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_119dc

dec_label_pc_119dc:                               ; preds = %dec_label_pc_119b4, %dec_label_pc_119cc
  %v0_119dc = phi i32 [ %v5_119bc, %dec_label_pc_119b4 ], [ -1, %dec_label_pc_119cc ]
  %v2_119e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_119e0, i32* @r4, align 4
  ret i32 %v0_119dc

; uselistorder directives
  uselistorder i32 %v5_119bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119dc, { 1, 0 }
}

define i32 @function_119e4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_119e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_119e4 = load i32, i32* @r4, align 4
  store i32 %v3_119e4, i32* %stack_var_-8, align 4
  %v3_119e8 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_119e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_119e8, -4095
  br i1 %tmp, label %dec_label_pc_11a08, label %dec_label_pc_119f8

dec_label_pc_119f8:                               ; preds = %dec_label_pc_119e4
  %v0_119f8 = call i32 @function_116f4()
  %v0_119fc = load i32, i32* %r4.global-to-local, align 4
  %v1_119fc = sub i32 0, %v0_119fc
  %v2_11a00 = inttoptr i32 %v0_119f8 to i32*
  store i32 %v1_119fc, i32* %v2_11a00, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a08

dec_label_pc_11a08:                               ; preds = %dec_label_pc_119e4, %dec_label_pc_119f8
  %v0_11a08 = phi i32 [ %v3_119e8, %dec_label_pc_119e4 ], [ -1, %dec_label_pc_119f8 ]
  %v2_11a0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11a0c, i32* @r4, align 4
  ret i32 %v0_11a08

; uselistorder directives
  uselistorder i32 %v3_119e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a08, { 1, 0 }
}

define i32 @function_11a10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a10:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_11a2c, label %dec_label_pc_11a1c

dec_label_pc_11a1c:                               ; preds = %dec_label_pc_11a10
  %v8_11a20 = icmp sgt i32 %arg1, 64
  br i1 %v8_11a20, label %dec_label_pc_11a2c, label %dec_label_pc_11a24

dec_label_pc_11a24:                               ; preds = %dec_label_pc_11a1c
  %v0_11a28 = call i32 @function_11b34()
  br label %dec_label_pc_11a2c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_11a1c, %dec_label_pc_11a10, %dec_label_pc_11a24
  %v0_11a2c = call i32 @function_116f4()
  %v2_11a34 = inttoptr i32 %v0_11a2c to i32*
  store i32 22, i32* %v2_11a34, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a2c, { 2, 0, 1 }
}

define i32 @function_11a40(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a40:
  store i32 128, i32* @r2, align 4
  %v0_11a4c = load i32, i32* @r0, align 4
  %v2_11a4c = inttoptr i32 %v0_11a4c to i8*
  %v3_11a4c = call i32 @function_11760(i8* %v2_11a4c, i32 0)
  ret i32 0
}

define i32 @function_11a58(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a58:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11a58 = load i32, i32* @r4, align 4
  store i32 %v3_11a58, i32* %stack_var_-12, align 4
  %v6_11a58 = load i32, i32* @r5, align 4
  %v10_11a58 = ptrtoint i32* %stack_var_-12 to i32
  %v7_11a5c = icmp eq i32 %arg2, -1
  %v0_11a68.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_11a5c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11a58
  br label %dec_label_pc_11a80

bb:                                               ; preds = %dec_label_pc_11a58
  %v2_11a64 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_11a68.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_11a68.pre, 1
  br i1 %tmp19, label %dec_label_pc_11a80, label %dec_label_pc_11a70

dec_label_pc_11a70:                               ; preds = %bb
  %v7_11a74 = icmp sgt i32 %v0_11a68.pre, 64
  br i1 %v7_11a74, label %dec_label_pc_11a80, label %bb20

bb20:                                             ; preds = %dec_label_pc_11a70
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_11aa424 = add i32 %v10_11a58, 124
  store i32 %v5_11aa424, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11a94

dec_label_pc_11a80:                               ; preds = %.thread, %dec_label_pc_11a70, %bb
  %v0_11a80 = call i32 @function_116f4()
  store i32 %v0_11a80, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11a8c = inttoptr i32 %v0_11a80 to i32*
  store i32 22, i32* %v2_11a8c, align 4
  %v0_11b00.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b00

dec_label_pc_11a94:                               ; preds = %bb20, %dec_label_pc_11a94
  %v5_11aa425 = phi i32 [ %v5_11aa424, %bb20 ], [ %v5_11aa4, %dec_label_pc_11a94 ]
  %v2_11a98 = add i32 %v5_11aa425, -136
  %v3_11a98 = inttoptr i32 %v2_11a98 to i32*
  store i32 0, i32* %v3_11a98, align 4
  %v0_11a9c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_11a9c = add i32 %v0_11a9c.pre, -1
  store i32 %v1_11a9c, i32* %r0.global-to-local, align 4
  %v6_11a9c = icmp slt i32 %v1_11a9c, 0
  %v4_11aa4 = mul i32 %v1_11a9c, 4
  %v5_11aa4 = add i32 %v4_11aa4, %v10_11a58
  store i32 %v5_11aa4, i32* %r2.global-to-local, align 4
  br i1 %v6_11a9c, label %dec_label_pc_11aac, label %dec_label_pc_11a94

dec_label_pc_11aac:                               ; preds = %dec_label_pc_11a94
  %v2_11aac = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_11aac, i32* @r5, align 4
  %v2_11ab0 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_11ab0, i32* @r0, align 4
  %v0_11ab4 = load i32, i32* @r4, align 4
  store i32 %v0_11ab4, i32* @r1, align 4
  %v0_11ab8 = call i32 @function_11b34()
  store i32 %v0_11ab8, i32* %r0.global-to-local, align 4
  %v1_11abc = icmp slt i32 %v0_11ab8, 0
  br i1 %v1_11abc, label %dec_label_pc_11afc, label %dec_label_pc_11ac4

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11aac
  %v0_11ac4 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c354.380 to i32), i32* %r0.global-to-local, align 4
  %v2_11acc = call i32 @function_11b10(i32 ptrtoint (i32* @global_var_1c354.380 to i32), i32 %v0_11ac4)
  store i32 %v2_11a64, i32* %r2.global-to-local, align 4
  %v0_11ae4 = load i32, i32* @r4, align 4
  store i32 %v0_11ae4, i32* %r0.global-to-local, align 4
  %v4_11aec = call i32 @function_129fc(i32 %v0_11ae4, i32* nonnull %stack_var_-152, i32 %v2_11a64)
  store i32 %v4_11aec, i32* %r0.global-to-local, align 4
  %v1_11af0 = icmp slt i32 %v4_11aec, 0
  br i1 %v1_11af0, label %dec_label_pc_11afc, label %bb23

bb23:                                             ; preds = %dec_label_pc_11ac4
  %v5_11af4 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_11af4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b00

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11ac4, %dec_label_pc_11aac
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b00

dec_label_pc_11b00:                               ; preds = %bb23, %dec_label_pc_11a80, %dec_label_pc_11afc
  %v0_11b00 = phi i32 [ %v5_11af4, %bb23 ], [ %v0_11b00.pre, %dec_label_pc_11a80 ], [ -1, %dec_label_pc_11afc ]
  store i32 %v0_11b00, i32* %r0.global-to-local, align 4
  %v2_11b08 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11b08, i32* @r4, align 4
  store i32 %v6_11a58, i32* @r5, align 4
  ret i32 %v0_11b00

; uselistorder directives
  uselistorder i32 %v0_11b00, { 1, 0 }
  uselistorder i32 %v5_11aa4, { 1, 0 }
  uselistorder i32 %v1_11a9c, { 0, 2, 1 }
  uselistorder i32 %v2_11a64, { 1, 0 }
  uselistorder i32 %v0_11a68.pre, { 1, 0, 2 }
  uselistorder i32 %v10_11a58, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11b00, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a94, { 1, 0 }
  uselistorder label %dec_label_pc_11a80, { 1, 2, 0 }
}

define i32 @function_11b10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b10:
  %v1_11b10 = add i32 %arg2, -1
  %v3_11b14 = udiv i32 %v1_11b10, 32
  %v4_11b18 = mul nuw nsw i32 %v3_11b14, 4
  %v5_11b18 = add i32 %v4_11b18, %arg1
  %v6_11b18 = inttoptr i32 %v5_11b18 to i32*
  %v7_11b18 = load i32, i32* %v6_11b18, align 4
  %v1_11b1c = urem i32 %v1_11b10, 32
  %v7_11b24 = shl i32 1, %v1_11b1c
  %v8_11b24 = and i32 %v7_11b18, %v7_11b24
  %v10_11b24 = icmp ne i32 %v8_11b24, 0
  %. = zext i1 %v10_11b24 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11b10, { 1, 0 }
}

define i32 @function_11b34() local_unnamed_addr {
dec_label_pc_11b34:
  %v0_11b34 = load i32, i32* @r1, align 4
  %v1_11b34 = add i32 %v0_11b34, -1
  %v3_11b38 = udiv i32 %v1_11b34, 32
  store i32 %v3_11b38, i32* @ip, align 4
  %v0_11b3c = load i32, i32* @r0, align 4
  %v4_11b3c = mul nuw nsw i32 %v3_11b38, 4
  %v5_11b3c = add i32 %v0_11b3c, %v4_11b3c
  %v6_11b3c = inttoptr i32 %v5_11b3c to i32*
  %v7_11b3c = load i32, i32* %v6_11b3c, align 4
  %v1_11b40 = urem i32 %v1_11b34, 32
  %v7_11b48 = shl i32 1, %v1_11b40
  %v8_11b48 = or i32 %v7_11b3c, %v7_11b48
  store i32 %v8_11b48, i32* %v6_11b3c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11b38, { 1, 0 }
  uselistorder i32 %v1_11b34, { 1, 0 }
}

define i32 @function_11b58(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b58:
  %v1_11b58 = add i32 %arg2, -1
  %v3_11b5c = udiv i32 %v1_11b58, 32
  %v4_11b60 = mul nuw nsw i32 %v3_11b5c, 4
  %v5_11b60 = add i32 %v4_11b60, %arg1
  %v6_11b60 = inttoptr i32 %v5_11b60 to i32*
  %v7_11b60 = load i32, i32* %v6_11b60, align 4
  %v1_11b64 = urem i32 %v1_11b58, 32
  %tmp = shl i32 -1, %v1_11b64
  %v8_11b6c = add i32 %tmp, -1
  %v9_11b6c = and i32 %v7_11b60, %v8_11b6c
  store i32 %v9_11b6c, i32* %v6_11b60, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11b58, { 1, 0 }
}

define i32 @function_11b7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b7c:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11b7c = load i32, i32* @r4, align 4
  %v6_11b7c = load i32, i32* @r5, align 4
  %v9_11b7c = load i32, i32* @r6, align 4
  %v0_11b80 = load i32, i32* %r0.global-to-local, align 4
  %v2_11b80 = icmp eq i32 %v0_11b80, 0
  %v2_11b84 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_11b80, label %bb, label %dec_label_pc_11b90

bb:                                               ; preds = %dec_label_pc_11b7c
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11b98

dec_label_pc_11b90:                               ; preds = %dec_label_pc_11b7c
  %tmp = icmp ugt i32 %v0_11b80, -8
  br i1 %tmp, label %dec_label_pc_11c9c, label %dec_label_pc_11b98

dec_label_pc_11b98:                               ; preds = %bb, %dec_label_pc_11b90
  %v0_11b98 = phi i32 [ %v0_11b80, %dec_label_pc_11b90 ], [ 1, %bb ]
  %v1_11b98 = add i32 %v0_11b98, 4
  store i32 %v1_11b98, i32* %stack_var_-20, align 4
  store i32 %v2_11b84, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c1ec.382 to i32), i32* %r0.global-to-local, align 4
  %v1_11bb0 = call i32 @function_12710()
  store i32 ptrtoint (i32** @global_var_1c030.386 to i32), i32* %r0.global-to-local, align 4
  %v3_11bbc = call i32 @function_11f30(i32* bitcast (i32** @global_var_1c030.386 to i32*), i32 %v2_11b84)
  store i32 %v3_11bbc, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1ec.382 to i32), i32* %r0.global-to-local, align 4
  store i32 72660, i32* @lr, align 4
  %v1_11bd0 = call i32 @function_12710()
  store i32 %v1_11bd0, i32* %r0.global-to-local, align 4
  %v2_11bd4 = icmp eq i32 %v3_11bbc, 0
  br i1 %v2_11bd4, label %dec_label_pc_11bdc, label %dec_label_pc_11c8c

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11b98
  %v2_11be0 = load i32, i32* @global_var_1c214.389, align 4
  store i32 %v2_11be0, i32* @r4, align 4
  %v2_11be4 = load i32, i32* %stack_var_-20, align 4
  %v3_11be8 = icmp ult i32 %v2_11be4, %v2_11be0
  br i1 %v3_11be8, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_11bdc
  %v3_11bec = add i32 %v2_11be0, -1
  %v2_11bf0 = add i32 %v3_11bec, %v2_11be4
  %v2_11bf4 = sub i32 0, %v2_11be0
  %v3_11bf8 = and i32 %v2_11bf0, %v2_11bf4
  store i32 %v3_11bf8, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11bdc, %bb14
  store i32 ptrtoint (i32* @global_var_1c3d4.391 to i32), i32* %r0.global-to-local, align 4
  %v1_11c04 = call i32 @function_12710()
  %v0_11c08 = load i32, i32* @r4, align 4
  store i32 %v0_11c08, i32* %r0.global-to-local, align 4
  %v1_11c0c = call i32 @function_12ec4(i32 %v0_11c08)
  store i32 %v1_11c0c, i32* %r0.global-to-local, align 4
  %v7_11c10 = icmp eq i32 %v1_11c0c, -1
  br i1 %v7_11c10, label %bb15, label %dec_label_pc_11c1c

bb15:                                             ; preds = %.thread3
  store i32 %v1_11c0c, i32* @r5, align 4
  br label %dec_label_pc_11c30

dec_label_pc_11c1c:                               ; preds = %.thread3
  %v1_11c1c = add i32 %v1_11c0c, 3
  %v1_11c20 = and i32 %v1_11c1c, -4
  store i32 %v1_11c20, i32* @r5, align 4
  %v9_11c24 = icmp eq i32 %v1_11c20, %v1_11c0c
  br i1 %v9_11c24, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_11c1c
  %v3_11c28 = sub i32 %v1_11c20, %v1_11c0c
  store i32 %v3_11c28, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_11c1c, %bb16
  %v1_11c2c = xor i1 %v9_11c24, true
  call void @__pseudo_cond_branch(i1 %v1_11c2c, i32 ptrtoint (i32* @global_var_12ec4.392 to i32))
  br label %dec_label_pc_11c30

dec_label_pc_11c30:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1c3d4.391 to i32), i32* %r0.global-to-local, align 4
  store i32 72768, i32* @lr, align 4
  %v1_11c3c = call i32 @function_12710()
  store i32 %v1_11c3c, i32* %r0.global-to-local, align 4
  %v0_11c40 = load i32, i32* @r5, align 4
  %v7_11c40 = icmp eq i32 %v0_11c40, -1
  br i1 %v7_11c40, label %dec_label_pc_11c9c, label %dec_label_pc_11c48

dec_label_pc_11c48:                               ; preds = %dec_label_pc_11c30
  store i32 ptrtoint (i32* @global_var_1c1ec.382 to i32), i32* %r0.global-to-local, align 4
  %v1_11c54 = call i32 @function_12710()
  %v0_11c58 = load i32, i32* @r4, align 4
  %v0_11c5c = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c030.386 to i32), i32* %r0.global-to-local, align 4
  %v4_11c64 = call i32 @function_12084(i32* bitcast (i32** @global_var_1c030.386 to i32*), i32 %v0_11c5c, i32 %v0_11c58)
  store i32 ptrtoint (i32** @global_var_1c030.386 to i32), i32* %r0.global-to-local, align 4
  %v3_11c70 = call i32 @function_11f30(i32* bitcast (i32** @global_var_1c030.386 to i32*), i32 %v2_11b84)
  store i32 %v3_11c70, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1ec.382 to i32), i32* %r0.global-to-local, align 4
  store i32 72836, i32* @lr, align 4
  %v1_11c80 = call i32 @function_12710()
  store i32 %v1_11c80, i32* %r0.global-to-local, align 4
  %v2_11c84 = icmp eq i32 %v3_11c70, 0
  br i1 %v2_11c84, label %dec_label_pc_11c9c, label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11b98, %dec_label_pc_11c48
  %v1_11c90 = phi i32 [ %v3_11bbc, %dec_label_pc_11b98 ], [ %v3_11c70, %dec_label_pc_11c48 ]
  %v2_11c8c = load i32, i32* %stack_var_-20, align 4
  %v2_11c90 = inttoptr i32 %v1_11c90 to i32*
  store i32 %v2_11c8c, i32* %v2_11c90, align 4
  %v3_11c90 = load i32, i32* %r4.global-to-local, align 4
  %v4_11c90 = add i32 %v3_11c90, 4
  store i32 %v4_11c90, i32* %r4.global-to-local, align 4
  %v2_11c94 = icmp eq i32 %v4_11c90, 0
  br i1 %v2_11c94, label %dec_label_pc_11c9c, label %dec_label_pc_11cac

dec_label_pc_11c9c:                               ; preds = %dec_label_pc_11c8c, %dec_label_pc_11c48, %dec_label_pc_11c30, %dec_label_pc_11b90
  %v0_11c9c = call i32 @function_116f4()
  store i32 %v0_11c9c, i32* %r0.global-to-local, align 4
  %v2_11ca4 = inttoptr i32 %v0_11c9c to i32*
  store i32 12, i32* %v2_11ca4, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cac

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11c8c, %dec_label_pc_11c9c
  %v0_11cac = phi i32 [ %v4_11c90, %dec_label_pc_11c8c ], [ 0, %dec_label_pc_11c9c ]
  store i32 %v0_11cac, i32* %r0.global-to-local, align 4
  store i32 %v3_11b7c, i32* @r4, align 4
  store i32 %v6_11b7c, i32* @r5, align 4
  store i32 %v9_11b7c, i32* @r6, align 4
  ret i32 %v0_11cac

; uselistorder directives
  uselistorder i32 %v0_11cac, { 1, 0 }
  uselistorder i32 %v3_11c70, { 1, 0, 2 }
  uselistorder i32 %v1_11c20, { 1, 0, 2 }
  uselistorder i32 %v1_11c0c, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 %v3_11bbc, { 1, 0, 2 }
  uselistorder i32 %v0_11b80, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 4, 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 18, 19, 4, 6, 7, 8, 9, 3, 11, 10, 5, 13, 12, 2, 14, 15, 16, 17, 0, 1 }
  uselistorder label %dec_label_pc_11cac, { 1, 0 }
  uselistorder label %dec_label_pc_11c8c, { 1, 0 }
  uselistorder label %dec_label_pc_11c30, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11b98, { 1, 0 }
}

define i32 @function_11cd0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11cd0:
  %stack_var_-12 = alloca i32, align 4
  %v3_11cd0 = load i32, i32* @r4, align 4
  store i32 %v3_11cd0, i32* %stack_var_-12, align 4
  %v6_11cd0 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_11cd8 = mul i32 %arg2, %arg1
  store i32 %v2_11cd8, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11cdc = icmp eq i32 %arg1, 0
  store i32 %v2_11cd8, i32* @r0, align 4
  br i1 %v2_11cdc, label %dec_label_pc_11d08, label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11cd0
  %v0_11ce8 = call i32 @function_10d98()
  %v0_11cec = load i32, i32* @r5, align 4
  %v9_11cec = icmp eq i32 %v0_11cec, %v0_11ce8
  store i32 0, i32* @r5, align 4
  br i1 %v9_11cec, label %dec_label_pc_11ce8.dec_label_pc_11d08_crit_edge, label %dec_label_pc_11cf8

dec_label_pc_11ce8.dec_label_pc_11d08_crit_edge:  ; preds = %dec_label_pc_11ce8
  %v0_11d08.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11d08

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11ce8
  %v0_11cf8 = call i32 @function_116f4()
  %v2_11d00 = inttoptr i32 %v0_11cf8 to i32*
  store i32 12, i32* %v2_11d00, align 4
  br label %dec_label_pc_11d20

dec_label_pc_11d08:                               ; preds = %dec_label_pc_11ce8.dec_label_pc_11d08_crit_edge, %dec_label_pc_11cd0
  %v0_11d08 = phi i32 [ %v0_11d08.pre, %dec_label_pc_11ce8.dec_label_pc_11d08_crit_edge ], [ %v2_11cd8, %dec_label_pc_11cd0 ]
  %v1_11d0c = call i32 @function_11b7c(i32 %v0_11d08)
  store i32 %v1_11d0c, i32* @r5, align 4
  store i32 72992, i32* @lr, align 4
  %v1_11d1c = icmp ne i32 %v1_11d0c, 0
  call void @__pseudo_cond_branch(i1 %v1_11d1c, i32 ptrtoint (i32* @global_var_11760.393 to i32))
  br label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11cf8, %dec_label_pc_11d08
  %v0_11d20 = load i32, i32* @r5, align 4
  %v2_11d24 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11d24, i32* @r4, align 4
  store i32 %v6_11cd0, i32* @r5, align 4
  ret i32 %v0_11d20

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11d20, { 1, 0 }
}

define i32 @function_11d28() local_unnamed_addr {
dec_label_pc_11d28:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_11d28 = load i32, i32* @r0, align 4
  %v2_11d28 = icmp eq i32 %v0_11d28, 0
  %v3_11d2c = load i32, i32* @r4, align 4
  store i32 %v3_11d2c, i32* %stack_var_-24, align 4
  %v6_11d2c = load i32, i32* @r5, align 4
  %v9_11d2c = load i32, i32* @r6, align 4
  %v15_11d2c = load i32, i32* @r8, align 4
  br i1 %v2_11d28, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_11d28
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_11d28
  %v1_11d34 = add i32 %v0_11d28, -4
  %v2_11d34 = inttoptr i32 %v1_11d34 to i32*
  %v3_11d34 = load i32, i32* %v2_11d34, align 4
  store i32 %v3_11d34, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c030.386 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_11d34, i32* @r4, align 4
  %v1_11d4c = call i32 @function_12710()
  %v0_11d50 = load i32, i32* @r4, align 4
  %v0_11d54 = load i32, i32* @r5, align 4
  %v4_11d5c = call i32 @function_12084(i32* bitcast (i32** @global_var_1c030.386 to i32*), i32 %v0_11d50, i32 %v0_11d54)
  %v1_11d64 = inttoptr i32 %v4_11d5c to i32*
  %v2_11d64 = load i32, i32* %v1_11d64, align 4
  store i32 %v2_11d64, i32* %r6.global-to-local, align 4
  %v2_11d68 = load i32, i32* @global_var_1c214.389, align 4
  %v4_11d6c = mul i32 %v2_11d68, 8
  %v6_11d6c = icmp ult i32 %v2_11d64, %v4_11d6c
  store i32 %v4_11d5c, i32* @r4, align 4
  br i1 %v6_11d6c, label %dec_label_pc_11dac, label %dec_label_pc_11d78

dec_label_pc_11d78:                               ; preds = %bb11
  %v1_11d80 = call i32 @function_12710()
  %v1_11d88 = call i32 @function_12ec4(i32 0)
  %v0_11d8c = load i32, i32* @r4, align 4
  %v1_11d8c = add i32 %v0_11d8c, 12
  store i32 %v1_11d8c, i32* @r5, align 4
  %v9_11d90 = icmp eq i32 %v1_11d8c, %v1_11d88
  br i1 %v9_11d90, label %dec_label_pc_11db4, label %dec_label_pc_11d98

dec_label_pc_11d98:                               ; preds = %dec_label_pc_11d78
  %v1_11da4 = call i32 @function_12710()
  br label %dec_label_pc_11dac

dec_label_pc_11dac:                               ; preds = %bb11, %dec_label_pc_11d98, %bb14
  %v2_11dac = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11dac, i32* @r4, align 4
  store i32 %v6_11d2c, i32* @r5, align 4
  store i32 %v9_11d2c, i32* %r6.global-to-local, align 4
  store i32 %v15_11d2c, i32* %r8.global-to-local, align 4
  %v0_11db0 = call i32 @function_12710()
  %v0_11db4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11d78, %dec_label_pc_11dac
  %v1_11dbc = phi i32 [ %v0_11d8c, %dec_label_pc_11d78 ], [ %v0_11db4.pre, %dec_label_pc_11dac ]
  %v1_11db4 = add i32 %v1_11dbc, 4
  %v2_11db4 = inttoptr i32 %v1_11db4 to i32*
  %v3_11db4 = load i32, i32* %v2_11db4, align 4
  %v2_11db8 = icmp eq i32 %v3_11db4, 0
  br i1 %v2_11db8, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_11db4
  %v2_11dbc = add i32 %v1_11dbc, 8
  %v3_11dbc = inttoptr i32 %v2_11dbc to i32*
  %v4_11dbc = load i32, i32* %v3_11dbc, align 4
  %v3_11dc0 = add i32 %v3_11db4, 8
  %v4_11dc0 = inttoptr i32 %v3_11dc0 to i32*
  store i32 %v4_11dbc, i32* %v4_11dc0, align 4
  %v0_11dc4.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11db4, %bb12
  %v0_11dc4 = phi i32 [ %v1_11dbc, %dec_label_pc_11db4 ], [ %v0_11dc4.pre, %bb12 ]
  %v1_11dc4 = add i32 %v0_11dc4, 8
  %v2_11dc4 = inttoptr i32 %v1_11dc4 to i32*
  %v3_11dc4 = load i32, i32* %v2_11dc4, align 4
  %v1_11dc8 = add i32 %v0_11dc4, 4
  %v2_11dc8 = inttoptr i32 %v1_11dc8 to i32*
  %v3_11dc8 = load i32, i32* %v2_11dc8, align 4
  %v2_11dcc = icmp eq i32 %v3_11dc4, 0
  br i1 %v2_11dcc, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_11dd0 = add i32 %v3_11dc4, 4
  %v4_11dd0 = inttoptr i32 %v3_11dd0 to i32*
  store i32 %v3_11dc8, i32* %v4_11dd0, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_11dd4 = load i32, i32* %r8.global-to-local, align 4
  %v3_11dd4 = inttoptr i32 %v2_11dd4 to i32*
  store i32 %v3_11dc8, i32* %v3_11dd4, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_11de4 = call i32 @function_12710()
  %v0_11de8 = load i32, i32* %r6.global-to-local, align 4
  %v1_11de8 = load i32, i32* @r4, align 4
  %v0_11df0 = load i32, i32* @r5, align 4
  %v2_11de8 = sub i32 12, %v0_11de8
  %v1_11dec = add i32 %v2_11de8, %v1_11de8
  %v2_11df0 = sub i32 %v1_11dec, %v0_11df0
  %v1_11df4 = call i32 @function_12ec4(i32 %v2_11df0)
  br label %dec_label_pc_11dac

; uselistorder directives
  uselistorder i32 %v0_11dc4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_12ec4, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_11db4, { 1, 0 }
  uselistorder label %dec_label_pc_11dac, { 2, 1, 0 }
}

define i32 @function_11e18(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11e18:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11e18 = load i32, i32* @r4, align 4
  store i32 %v3_11e18, i32* %stack_var_-24, align 4
  %v6_11e18 = load i32, i32* @r5, align 4
  %v9_11e18 = load i32, i32* @r6, align 4
  %v12_11e18 = load i32, i32* @r7, align 4
  %v15_11e18 = load i32, i32* @r8, align 4
  %v18_11e18 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11e1c = icmp eq i32 %arg2, 0
  %v0_11e20 = load i32, i32* @r0, align 4
  store i32 %v0_11e20, i32* @r7, align 4
  br i1 %v2_11e1c, label %dec_label_pc_11e28, label %dec_label_pc_11e30

dec_label_pc_11e28:                               ; preds = %dec_label_pc_11e18
  %v0_11e28 = call i32 @function_11d28()
  %v0_11e38.pre = load i32, i32* @r4, align 4
  %v2_11e3c.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_11e38

dec_label_pc_11e30:                               ; preds = %dec_label_pc_11e18
  %v2_11e30 = icmp eq i32 %v0_11e20, 0
  br i1 %v2_11e30, label %dec_label_pc_11e38, label %dec_label_pc_11e44

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e30, %dec_label_pc_11e28
  %v2_11e3c = phi i32 [ %v3_11e18, %dec_label_pc_11e30 ], [ %v2_11e3c.pre, %dec_label_pc_11e28 ]
  %v0_11e38 = phi i32 [ %arg2, %dec_label_pc_11e30 ], [ %v0_11e38.pre, %dec_label_pc_11e28 ]
  store i32 %v2_11e3c, i32* @r4, align 4
  store i32 %v6_11e18, i32* @r5, align 4
  store i32 %v9_11e18, i32* @r6, align 4
  store i32 %v12_11e18, i32* @r7, align 4
  store i32 %v18_11e18, i32* @lr, align 4
  %v1_11e40 = call i32 @function_11b7c(i32 %v0_11e38)
  %v0_11e44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11e44

dec_label_pc_11e44:                               ; preds = %dec_label_pc_11e30, %dec_label_pc_11e38
  %v0_11e5c = phi i32 [ %v0_11e20, %dec_label_pc_11e30 ], [ %v1_11e40, %dec_label_pc_11e38 ]
  %v0_11e44 = phi i32 [ %arg2, %dec_label_pc_11e30 ], [ %v0_11e44.pre, %dec_label_pc_11e38 ]
  %v1_11e44 = add i32 %v0_11e44, 7
  %v1_11e48 = and i32 %v1_11e44, -4
  store i32 %v1_11e48, i32* @r5, align 4
  %v2_11e4c = icmp ugt i32 %v1_11e48, 10
  %v1_11e50 = add i32 %v0_11e5c, -4
  %v2_11e50 = inttoptr i32 %v1_11e50 to i32*
  %v3_11e50 = load i32, i32* %v2_11e50, align 4
  store i32 %v3_11e50, i32* @r6, align 4
  br i1 %v2_11e4c, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_11e44
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_11e44, %bb
  %v0_11ed8 = phi i32 [ %v1_11e48, %dec_label_pc_11e44 ], [ 12, %bb ]
  store i32 %v1_11e50, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_11ed8, %v3_11e50
  br i1 %tmp, label %dec_label_pc_11e64, label %dec_label_pc_11ed8

dec_label_pc_11e64:                               ; preds = %bb14
  %v2_11e58 = sub i32 %v0_11ed8, %v3_11e50
  %v1_11e74 = call i32 @function_12710()
  %v0_11e7c = load i32, i32* @r8, align 4
  %v1_11e7c = load i32, i32* @r6, align 4
  %v2_11e7c = add i32 %v1_11e7c, %v0_11e7c
  %v4_11e84 = call i32 @function_11fc4(i32* bitcast (i32** @global_var_1c030.386 to i32*), i32 %v2_11e7c, i32 %v2_11e58)
  store i32 %v4_11e84, i32* @r4, align 4
  store i32 73372, i32* @lr, align 4
  %v1_11e98 = call i32 @function_12710()
  %v0_11e9c = load i32, i32* @r4, align 4
  %v2_11e9c = icmp eq i32 %v0_11e9c, 0
  br i1 %v2_11e9c, label %dec_label_pc_11eac, label %.thread

.thread:                                          ; preds = %dec_label_pc_11e64
  %v1_11ea0 = load i32, i32* @r6, align 4
  %v3_11ea0 = add i32 %v1_11ea0, %v0_11e9c
  %v2_11ea4 = load i32, i32* @r7, align 4
  %v3_11ea4 = add i32 %v2_11ea4, -4
  %v4_11ea4 = inttoptr i32 %v3_11ea4 to i32*
  store i32 %v3_11ea0, i32* %v4_11ea4, align 4
  br label %dec_label_pc_11f18

dec_label_pc_11eac:                               ; preds = %dec_label_pc_11e64
  %v0_11eac = load i32, i32* @r5, align 4
  %v1_11eac = add i32 %v0_11eac, -4
  %v1_11eb0 = call i32 @function_11b7c(i32 %v1_11eac)
  store i32 %v1_11eb0, i32* @r0, align 4
  store i32 %v1_11eb0, i32* @r4, align 4
  %v2_11eb4 = icmp eq i32 %v1_11eb0, 0
  br i1 %v2_11eb4, label %dec_label_pc_11ed0, label %dec_label_pc_11ebc

dec_label_pc_11ebc:                               ; preds = %dec_label_pc_11eac
  %v0_11ebc = load i32, i32* @r6, align 4
  %v1_11ebc = add i32 %v0_11ebc, -4
  store i32 %v1_11ebc, i32* @r2, align 4
  %v0_11ec0 = load i32, i32* @r7, align 4
  store i32 %v0_11ec0, i32* @r1, align 4
  %v3_11ec4 = call i32 @function_11740(i32 %v1_11eb0, i32 %v0_11ec0, i32 %v1_11ebc)
  %v0_11ec8 = load i32, i32* @r7, align 4
  store i32 %v0_11ec8, i32* @r0, align 4
  %v0_11ecc = call i32 @function_11d28()
  %v0_11ed0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11ed0

dec_label_pc_11ed0:                               ; preds = %dec_label_pc_11eac, %dec_label_pc_11ebc
  %v0_11ed0 = phi i32 [ 0, %dec_label_pc_11eac ], [ %v0_11ed0.pre, %dec_label_pc_11ebc ]
  store i32 %v0_11ed0, i32* @r7, align 4
  br label %dec_label_pc_11f18

dec_label_pc_11ed8:                               ; preds = %bb14
  %v1_11ed8 = add i32 %v0_11ed8, 28
  %tmp15 = icmp ugt i32 %v1_11ed8, %v3_11e50
  br i1 %tmp15, label %dec_label_pc_11f18, label %dec_label_pc_11ee4

dec_label_pc_11ee4:                               ; preds = %dec_label_pc_11ed8
  %v1_11ef0 = call i32 @function_12710()
  %v0_11ef4 = load i32, i32* @r8, align 4
  %v1_11ef4 = load i32, i32* @r5, align 4
  %v2_11ef4 = add i32 %v1_11ef4, %v0_11ef4
  %v1_11ef8 = load i32, i32* @r6, align 4
  %v2_11ef8 = sub i32 %v1_11ef8, %v1_11ef4
  %v4_11f00 = call i32 @function_12084(i32* bitcast (i32** @global_var_1c030.386 to i32*), i32 %v2_11ef4, i32 %v2_11ef8)
  store i32 73492, i32* @lr, align 4
  %v1_11f10 = call i32 @function_12710()
  %v0_11f14 = load i32, i32* @r5, align 4
  %v1_11f14 = load i32, i32* @r7, align 4
  %v2_11f14 = add i32 %v1_11f14, -4
  %v3_11f14 = inttoptr i32 %v2_11f14 to i32*
  store i32 %v0_11f14, i32* %v3_11f14, align 4
  br label %dec_label_pc_11f18

dec_label_pc_11f18:                               ; preds = %.thread, %dec_label_pc_11ed8, %dec_label_pc_11ed0, %dec_label_pc_11ee4
  %v0_11f18 = load i32, i32* @r7, align 4
  %v2_11f1c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11f1c, i32* @r4, align 4
  store i32 %v6_11e18, i32* @r5, align 4
  store i32 %v9_11e18, i32* @r6, align 4
  store i32 %v12_11e18, i32* @r7, align 4
  store i32 %v15_11e18, i32* @r8, align 4
  ret i32 %v0_11f18

; uselistorder directives
  uselistorder i32 %v1_11ef4, { 1, 0 }
  uselistorder i32 %v0_11ed8, { 1, 2, 0 }
  uselistorder i32 %v3_11e50, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1c030.386, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1c030.386 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_11b7c, { 1, 38, 0, 4, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_11d28, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 93, 94, 95, 96, 98, 97, 7, 3, 4, 5, 6, 114, 115, 116, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 0, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 1, 92, 117, 2, 118, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* @r7, { 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 9, 10, 11, 15, 16, 17, 2, 6, 7, 8, 24, 12, 13, 14, 4, 18, 3, 19, 20, 21, 22, 23, 25, 1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 226, 227, 228, 144, 145, 146, 147, 50, 0, 51, 52, 53, 54, 55, 56, 5, 57, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 229, 230, 231, 232, 233, 234, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 135, 136, 137, 138, 139, 140, 141, 142, 143 }
  uselistorder label %dec_label_pc_11f18, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11ed0, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_11e44, { 1, 0 }
}

define i32 @function_11f30(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f30:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_11f30 = inttoptr i32 %arg2 to i32*
  %v2_11f30 = load i32, i32* %v1_11f30, align 4
  %v3_11f34 = load i32, i32* @r4, align 4
  store i32 %v3_11f34, i32* %stack_var_-8, align 4
  %v1_11f38 = add i32 %v2_11f30, 3
  %v1_11f3c = and i32 %v1_11f38, -4
  store i32 %v1_11f3c, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_11f44 = icmp ugt i32 %v1_11f3c, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11f4c = load i32, i32* %arg1, align 4
  store i32 %v2_11f4c, i32* %r0.global-to-local, align 4
  br i1 %v2_11f44, label %dec_label_pc_11fb8.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_11f30
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fb8.preheader

dec_label_pc_11fb8.preheader:                     ; preds = %dec_label_pc_11f30, %bb
  %v1_11f6c = phi i32 [ %v1_11f3c, %dec_label_pc_11f30 ], [ 12, %bb ]
  %v2_11fb89 = icmp eq i32 %v2_11f4c, 0
  br i1 %v2_11fb89, label %dec_label_pc_11fc0, label %dec_label_pc_11f58

dec_label_pc_11f58:                               ; preds = %dec_label_pc_11fb8.preheader, %dec_label_pc_11fb4
  %v2_11f70 = phi i32 [ %v3_11fb4, %dec_label_pc_11fb4 ], [ %v2_11f4c, %dec_label_pc_11fb8.preheader ]
  %v1_11f58 = inttoptr i32 %v2_11f70 to i32*
  %v2_11f58 = load i32, i32* %v1_11f58, align 4
  store i32 %v2_11f58, i32* %ip.global-to-local, align 4
  %v3_11f5c = icmp ult i32 %v2_11f58, %v1_11f6c
  br i1 %v3_11f5c, label %dec_label_pc_11fb4, label %dec_label_pc_11f64

dec_label_pc_11f64:                               ; preds = %dec_label_pc_11f58
  %v1_11f64 = add i32 %v1_11f6c, 44
  %v3_11f68 = icmp ult i32 %v2_11f58, %v1_11f64
  br i1 %v3_11f68, label %dec_label_pc_11f78, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_11f64
  %v2_11f5c.le = sub i32 %v2_11f58, %v1_11f6c
  store i32 %v2_11f5c.le, i32* %v1_11f58, align 4
  %v0_11fa4.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_11fac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_11f78:                               ; preds = %dec_label_pc_11f64
  %v1_11f78 = add i32 %v2_11f70, 4
  %v2_11f78 = inttoptr i32 %v1_11f78 to i32*
  %v3_11f78 = load i32, i32* %v2_11f78, align 4
  store i32 %v3_11f78, i32* %r2.global-to-local, align 4
  %v2_11f7c = icmp eq i32 %v3_11f78, 0
  br i1 %v2_11f7c, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_11f78
  %v2_11f80 = add i32 %v2_11f70, 8
  %v3_11f80 = inttoptr i32 %v2_11f80 to i32*
  %v4_11f80 = load i32, i32* %v3_11f80, align 4
  %v3_11f84 = add i32 %v3_11f78, 8
  %v4_11f84 = inttoptr i32 %v3_11f84 to i32*
  store i32 %v4_11f80, i32* %v4_11f84, align 4
  %v0_11f88.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11f78, %bb27
  %v0_11f88 = phi i32 [ %v2_11f70, %dec_label_pc_11f78 ], [ %v0_11f88.pre, %bb27 ]
  %v1_11f88 = add i32 %v0_11f88, 8
  %v2_11f88 = inttoptr i32 %v1_11f88 to i32*
  %v3_11f88 = load i32, i32* %v2_11f88, align 4
  %v1_11f8c = add i32 %v0_11f88, 4
  %v2_11f8c = inttoptr i32 %v1_11f8c to i32*
  %v3_11f8c = load i32, i32* %v2_11f8c, align 4
  %v2_11f90 = icmp eq i32 %v3_11f88, 0
  br i1 %v2_11f90, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_11f94 = add i32 %v3_11f88, 4
  %v4_11f94 = inttoptr i32 %v3_11f94 to i32*
  store i32 %v3_11f8c, i32* %v4_11f94, align 4
  %v1_11f9c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_11f9c, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_11f98 = load i32, i32* %r1.global-to-local, align 4
  %v3_11f98 = inttoptr i32 %v2_11f98 to i32*
  store i32 %v3_11f8c, i32* %v3_11f98, align 4
  %v1_11fa0.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_11fa0.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_11fac = phi i32 [ %v0_11fac.pre, %.thread._crit_edge ], [ %v1_11f9c, %bb28 ], [ %v1_11fa0.pre, %.thread5 ]
  %v0_11fa4 = phi i32 [ %v0_11fa4.pre, %.thread._crit_edge ], [ %v1_11f9c, %bb28 ], [ %v1_11fa0.pre, %.thread5 ]
  %v1_11fa4 = load i32, i32* %r0.global-to-local, align 4
  %v2_11fa4 = sub i32 %v1_11fa4, %v0_11fa4
  %v1_11fa8 = add i32 %v2_11fa4, 12
  store i32 %v1_11fa8, i32* %r0.global-to-local, align 4
  %v1_11fac = load i32, i32* %r4.global-to-local, align 4
  %v2_11fac = inttoptr i32 %v1_11fac to i32*
  store i32 %v0_11fac, i32* %v2_11fac, align 4
  %v2_11fb0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11fb0, i32* %r4.global-to-local, align 4
  ret i32 %v1_11fa8

dec_label_pc_11fb4:                               ; preds = %dec_label_pc_11f58
  %v1_11fb4 = add i32 %v2_11f70, 4
  %v2_11fb4 = inttoptr i32 %v1_11fb4 to i32*
  %v3_11fb4 = load i32, i32* %v2_11fb4, align 4
  store i32 %v3_11fb4, i32* %r0.global-to-local, align 4
  %v2_11fb8 = icmp eq i32 %v3_11fb4, 0
  br i1 %v2_11fb8, label %dec_label_pc_11fb8.dec_label_pc_11fc0_crit_edge, label %dec_label_pc_11f58

dec_label_pc_11fb8.dec_label_pc_11fc0_crit_edge:  ; preds = %dec_label_pc_11fb4
  br label %dec_label_pc_11fc0

dec_label_pc_11fc0:                               ; preds = %dec_label_pc_11fb8.dec_label_pc_11fc0_crit_edge, %dec_label_pc_11fb8.preheader
  store i32 %v3_11f34, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11fb4, { 1, 2, 0 }
  uselistorder i32 %v0_11f88, { 1, 0 }
  uselistorder i32 %v2_11f58, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11f70, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_11f6c, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_11f58, { 1, 0 }
  uselistorder label %dec_label_pc_11fb8.preheader, { 1, 0 }
}

define i32 @function_11fc4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11fc4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_11fc8 = load i32, i32* %arg1, align 4
  store i32 %v2_11fc8, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_120406 = icmp eq i32 %v2_11fc8, 0
  br i1 %v2_120406, label %dec_label_pc_12048, label %dec_label_pc_11fd4

dec_label_pc_11fd4:                               ; preds = %dec_label_pc_11fc4, %dec_label_pc_1203c
  %v0_12014 = phi i32 [ %v3_1203c, %dec_label_pc_1203c ], [ %v2_11fc8, %dec_label_pc_11fc4 ]
  %v1_11fd4 = inttoptr i32 %v0_12014 to i32*
  %v2_11fd4 = load i32, i32* %v1_11fd4, align 4
  store i32 %v2_11fd4, i32* %r0.global-to-local, align 4
  %v2_11fd8 = sub i32 %v0_12014, %v2_11fd4
  %v1_11fdc = add i32 %v2_11fd8, 12
  %v3_11fe0 = icmp uge i32 %v1_11fdc, %arg2
  %v9_11fe0 = icmp eq i32 %v1_11fdc, %arg2
  %v2_11fe4 = xor i1 %v9_11fe0, true
  %v3_11fe4 = and i1 %v3_11fe0, %v2_11fe4
  br i1 %v3_11fe4, label %dec_label_pc_1203c, label %dec_label_pc_11fe8

dec_label_pc_11fe8:                               ; preds = %dec_label_pc_11fd4
  br i1 %v9_11fe0, label %dec_label_pc_11fec, label %dec_label_pc_12048

dec_label_pc_11fec:                               ; preds = %dec_label_pc_11fe8
  %v1_11fec = add i32 %arg3, 3
  %v1_11ff0 = and i32 %v1_11fec, -4
  store i32 %v1_11ff0, i32* %r2.global-to-local, align 4
  %v2_11ff4 = sub i32 %v2_11fd4, %v1_11ff0
  %v3_11ff4 = icmp ult i32 %v2_11fd4, %v1_11ff0
  br i1 %v3_11ff4, label %dec_label_pc_12048, label %dec_label_pc_11ffc

dec_label_pc_11ffc:                               ; preds = %dec_label_pc_11fec
  %v1_11ffc = add i32 %v1_11ff0, 44
  %v3_12000 = icmp ult i32 %v2_11fd4, %v1_11ffc
  br i1 %v3_12000, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_11ffc
  store i32 %v2_11ff4, i32* %v1_11fd4, align 4
  %v1_1200c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_1200c, i32* %r0.global-to-local, align 4
  ret i32 %v1_1200c

.thread2:                                         ; preds = %dec_label_pc_11ffc
  %v1_12014 = add i32 %v0_12014, 4
  %v2_12014 = inttoptr i32 %v1_12014 to i32*
  %v3_12014 = load i32, i32* %v2_12014, align 4
  store i32 %v3_12014, i32* %r2.global-to-local, align 4
  %v2_12018 = icmp eq i32 %v3_12014, 0
  br i1 %v2_12018, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_1201c = add i32 %v0_12014, 8
  %v3_1201c = inttoptr i32 %v2_1201c to i32*
  %v4_1201c = load i32, i32* %v3_1201c, align 4
  %v3_12020 = add i32 %v3_12014, 8
  %v4_12020 = inttoptr i32 %v3_12020 to i32*
  store i32 %v4_1201c, i32* %v4_12020, align 4
  %v0_12024.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_12024 = phi i32 [ %v0_12014, %.thread2 ], [ %v0_12024.pre, %bb17 ]
  %v1_12024 = add i32 %v0_12024, 8
  %v2_12024 = inttoptr i32 %v1_12024 to i32*
  %v3_12024 = load i32, i32* %v2_12024, align 4
  store i32 %v3_12024, i32* %r2.global-to-local, align 4
  %v1_12028 = add i32 %v0_12024, 4
  %v2_12028 = inttoptr i32 %v1_12028 to i32*
  %v3_12028 = load i32, i32* %v2_12028, align 4
  %v2_1202c = icmp eq i32 %v3_12024, 0
  br i1 %v2_1202c, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_12030 = add i32 %v3_12024, 4
  %v4_12030 = inttoptr i32 %v3_12030 to i32*
  store i32 %v3_12028, i32* %v4_12030, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_12034 = load i32, i32* %lr.global-to-local, align 4
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v3_12028, i32* %v3_12034, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_12038 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_12038

dec_label_pc_1203c:                               ; preds = %dec_label_pc_11fd4
  %v1_1203c = add i32 %v0_12014, 4
  %v2_1203c = inttoptr i32 %v1_1203c to i32*
  %v3_1203c = load i32, i32* %v2_1203c, align 4
  store i32 %v3_1203c, i32* %ip.global-to-local, align 4
  %v2_12040 = icmp eq i32 %v3_1203c, 0
  br i1 %v2_12040, label %dec_label_pc_12040.dec_label_pc_12048.loopexit_crit_edge, label %dec_label_pc_11fd4

dec_label_pc_12040.dec_label_pc_12048.loopexit_crit_edge: ; preds = %dec_label_pc_1203c
  br label %dec_label_pc_12048

dec_label_pc_12048:                               ; preds = %dec_label_pc_11fec, %dec_label_pc_11fc4, %dec_label_pc_12040.dec_label_pc_12048.loopexit_crit_edge, %dec_label_pc_11fe8
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_1203c, { 1, 2, 0 }
  uselistorder i32 %v0_12024, { 1, 0 }
  uselistorder i32 %v1_11ff0, { 0, 2, 1, 3 }
  uselistorder i1 %v9_11fe0, { 1, 0 }
  uselistorder i32 %v2_11fd4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_12014, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_12048, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_11fd4, { 1, 0 }
}

define i32 @function_12050() local_unnamed_addr {
dec_label_pc_12050:
  %v0_12050 = load i32, i32* @r2, align 4
  %v2_12050 = icmp eq i32 %v0_12050, 0
  %v0_12054 = load i32, i32* @r3, align 4
  %v1_12054 = load i32, i32* @r1, align 4
  %v2_12054 = add i32 %v1_12054, 4
  %v3_12054 = inttoptr i32 %v2_12054 to i32*
  store i32 %v0_12054, i32* %v3_12054, align 4
  %v0_12058 = load i32, i32* @r2, align 4
  %v1_12058 = load i32, i32* @r1, align 4
  %v2_12058 = add i32 %v1_12058, 8
  %v3_12058 = inttoptr i32 %v2_12058 to i32*
  store i32 %v0_12058, i32* %v3_12058, align 4
  %v1_12060 = load i32, i32* @r1, align 4
  br i1 %v2_12050, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12050
  %v2_1205c = load i32, i32* @r2, align 4
  %v3_1205c = add i32 %v2_1205c, 4
  %v4_1205c = inttoptr i32 %v3_1205c to i32*
  store i32 %v1_12060, i32* %v4_1205c, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_12050
  %v2_12060 = load i32, i32* @r0, align 4
  %v3_12060 = inttoptr i32 %v2_12060 to i32*
  store i32 %v1_12060, i32* %v3_12060, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_12064 = load i32, i32* @r3, align 4
  %v2_12064 = icmp eq i32 %v0_12064, 0
  br i1 %v2_12064, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_12068 = load i32, i32* @r1, align 4
  %v3_12068 = add i32 %v0_12064, 8
  %v4_12068 = inttoptr i32 %v3_12068 to i32*
  store i32 %v1_12068, i32* %v4_12068, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_1206c = load i32, i32* @r0, align 4
  ret i32 %v1_1206c

; uselistorder directives
  uselistorder i32 %v1_12060, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12070() local_unnamed_addr {
dec_label_pc_12070:
  %v0_12070 = load i32, i32* @r2, align 4
  %v2_12070 = icmp eq i32 %v0_12070, 0
  %v1_12074 = load i32, i32* @r1, align 4
  br i1 %v2_12070, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12070
  %v2_12074 = load i32, i32* @r0, align 4
  %v3_12074 = inttoptr i32 %v2_12074 to i32*
  store i32 %v1_12074, i32* %v3_12074, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_12070
  %v3_12078 = add i32 %v0_12070, 4
  %v4_12078 = inttoptr i32 %v3_12078 to i32*
  store i32 %v1_12074, i32* %v4_12078, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_1207c = load i32, i32* @r2, align 4
  %v1_1207c = load i32, i32* @r1, align 4
  %v2_1207c = add i32 %v1_1207c, 8
  %v3_1207c = inttoptr i32 %v2_1207c to i32*
  store i32 %v0_1207c, i32* %v3_1207c, align 4
  %v1_12080 = load i32, i32* @r0, align 4
  ret i32 %v1_12080

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12084(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12084:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12084 = load i32, i32* @r4, align 4
  store i32 %v3_12084, i32* %stack_var_-20, align 4
  %v2_12088 = load i32, i32* %arg1, align 4
  store i32 %v2_12088, i32* %r4.global-to-local, align 4
  %v2_1208c = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_120a82 = icmp eq i32 %v2_12088, 0
  br i1 %v2_120a82, label %dec_label_pc_12158, label %dec_label_pc_12098

dec_label_pc_12098:                               ; preds = %dec_label_pc_12084, %dec_label_pc_120a0
  %v0_120e8 = phi i32 [ %v0_120f0, %dec_label_pc_120a0 ], [ 0, %dec_label_pc_12084 ]
  %v0_120f0 = phi i32 [ %v3_120a4, %dec_label_pc_120a0 ], [ %v2_12088, %dec_label_pc_12084 ]
  %v1_120ac5.in = phi i32 [ %v3_120a4, %dec_label_pc_120a0 ], [ %v2_12088, %dec_label_pc_12084 ]
  %v1_120ac5 = add i32 %v1_120ac5.in, 12
  %v3_12098 = icmp ult i32 %v1_120ac5, %arg2
  br i1 %v3_12098, label %dec_label_pc_120a0, label %dec_label_pc_120b8

dec_label_pc_120a0:                               ; preds = %dec_label_pc_12098
  store i32 %v0_120f0, i32* %r6.global-to-local, align 4
  %v1_120a4 = add i32 %v0_120f0, 4
  %v2_120a4 = inttoptr i32 %v1_120a4 to i32*
  %v3_120a4 = load i32, i32* %v2_120a4, align 4
  store i32 %v3_120a4, i32* %r4.global-to-local, align 4
  %v2_120a8 = icmp eq i32 %v3_120a4, 0
  br i1 %v2_120a8, label %dec_label_pc_120a8.dec_label_pc_12158.loopexit_crit_edge, label %dec_label_pc_12098

dec_label_pc_120b8:                               ; preds = %dec_label_pc_12098
  %v1_120b8 = inttoptr i32 %v0_120f0 to i32*
  %v2_120b8 = load i32, i32* %v1_120b8, align 4
  %v2_120bc = sub i32 %v0_120f0, %v2_120b8
  %v1_120c0 = add i32 %v2_120bc, 12
  %v3_120c4 = icmp uge i32 %v1_120c0, %v2_1208c
  %v9_120c4 = icmp eq i32 %v1_120c0, %v2_1208c
  %v2_120c8 = xor i1 %v9_120c4, true
  %v3_120c8 = and i1 %v3_120c4, %v2_120c8
  br i1 %v3_120c8, label %dec_label_pc_12158, label %dec_label_pc_120cc

dec_label_pc_120cc:                               ; preds = %dec_label_pc_120b8
  %v2_120cc = add i32 %v2_120b8, %arg3
  store i32 %v2_120cc, i32* %r7.global-to-local, align 4
  br i1 %v9_120c4, label %dec_label_pc_120d4, label %dec_label_pc_12100

dec_label_pc_120d4:                               ; preds = %dec_label_pc_120cc
  %v2_120d4 = icmp eq i32 %v0_120e8, 0
  br i1 %v2_120d4, label %dec_label_pc_1214c, label %dec_label_pc_120dc

dec_label_pc_120dc:                               ; preds = %dec_label_pc_120d4
  %v1_120dc = add i32 %v0_120e8, 12
  %v9_120e0 = icmp eq i32 %v1_120dc, %arg2
  br i1 %v9_120e0, label %dec_label_pc_120e8, label %dec_label_pc_1214c

dec_label_pc_120e8:                               ; preds = %dec_label_pc_120dc
  %v1_120e8 = inttoptr i32 %v0_120e8 to i32*
  %v2_120e8 = load i32, i32* %v1_120e8, align 4
  %v1_120ec = add i32 %v0_120e8, 8
  %v2_120ec = inttoptr i32 %v1_120ec to i32*
  %v3_120ec = load i32, i32* %v2_120ec, align 4
  store i32 %v3_120ec, i32* @r2, align 4
  store i32 %v0_120f0, i32* @r1, align 4
  %v2_120f4 = add i32 %v2_120e8, %v2_120cc
  store i32 %v2_120f4, i32* %r7.global-to-local, align 4
  %v0_120f8 = call i32 @function_12070()
  br label %dec_label_pc_1214c

dec_label_pc_12100:                               ; preds = %dec_label_pc_120cc
  %v1_12100 = add i32 %v0_120f0, 4
  %v2_12100 = inttoptr i32 %v1_12100 to i32*
  %v3_12100 = load i32, i32* %v2_12100, align 4
  store i32 %v3_12100, i32* %r5.global-to-local, align 4
  %v2_12104 = icmp eq i32 %v3_12100, 0
  br i1 %v2_12104, label %dec_label_pc_12138, label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_12100
  %v1_1210c = inttoptr i32 %v3_12100 to i32*
  %v2_1210c = load i32, i32* %v1_1210c, align 4
  %v2_12110 = sub i32 %v3_12100, %v2_1210c
  %v1_12114 = add i32 %v2_12110, 12
  %v9_12118 = icmp eq i32 %v2_1208c, %v1_12114
  br i1 %v9_12118, label %dec_label_pc_12120, label %dec_label_pc_12138

dec_label_pc_12120:                               ; preds = %dec_label_pc_1210c
  store i32 %v0_120e8, i32* @r2, align 4
  store i32 %v3_12100, i32* @r1, align 4
  %v2_12128 = add i32 %v2_1210c, %v2_120cc
  store i32 %v2_12128, i32* %r7.global-to-local, align 4
  %v0_1212c = call i32 @function_12070()
  %v0_12130 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12130, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1214c

dec_label_pc_12138:                               ; preds = %dec_label_pc_1210c, %dec_label_pc_12100
  %v2_12138 = add i32 %v0_120f0, %arg3
  store i32 %v2_12138, i32* %r4.global-to-local, align 4
  store i32 %v3_12100, i32* @r3, align 4
  store i32 %v0_120e8, i32* @r2, align 4
  store i32 %v2_12138, i32* @r1, align 4
  %v0_12148 = call i32 @function_12050()
  br label %dec_label_pc_1214c

dec_label_pc_1214c:                               ; preds = %dec_label_pc_120dc, %dec_label_pc_120d4, %dec_label_pc_12120, %dec_label_pc_120e8, %dec_label_pc_12138
  %v0_1214c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1214c, i32* %r5.global-to-local, align 4
  %v0_12150 = load i32, i32* %r7.global-to-local, align 4
  %v2_12150 = inttoptr i32 %v0_1214c to i32*
  store i32 %v0_12150, i32* %v2_12150, align 4
  br label %dec_label_pc_12170

dec_label_pc_120a8.dec_label_pc_12158.loopexit_crit_edge: ; preds = %dec_label_pc_120a0
  br label %dec_label_pc_12158

dec_label_pc_12158:                               ; preds = %dec_label_pc_12084, %dec_label_pc_120a8.dec_label_pc_12158.loopexit_crit_edge, %dec_label_pc_120b8
  %v1_12158 = add i32 %v2_1208c, -12
  store i32 %v1_12158, i32* %r5.global-to-local, align 4
  %v3_1215c = inttoptr i32 %v1_12158 to i32*
  store i32 %arg3, i32* %v3_1215c, align 4
  %v0_12160 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12160, i32* @r3, align 4
  %v0_12164 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12164, i32* @r2, align 4
  %v0_12168 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12168, i32* @r1, align 4
  %v0_1216c = call i32 @function_12050()
  br label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %dec_label_pc_1214c, %dec_label_pc_12158
  %v0_12170 = load i32, i32* %r5.global-to-local, align 4
  %v2_12174 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12174, i32* @r4, align 4
  ret i32 %v0_12170

; uselistorder directives
  uselistorder i32 %v3_12100, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_120c4, { 1, 0 }
  uselistorder i32 %v3_120a4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_120f0, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_120e8, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_12050, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_12070, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12170, { 1, 0 }
  uselistorder label %dec_label_pc_12158, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1214c, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12098, { 1, 0 }
}

define i32 @function_12178() local_unnamed_addr {
dec_label_pc_12194.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_12178 = ptrtoint i32* %stack_var_-268 to i32
  %v1_12188 = call i32 @function_12710()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_12194 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_12194

dec_label_pc_12194:                               ; preds = %dec_label_pc_12194.lr.ph, %dec_label_pc_12194
  %v1_12198 = phi i32 [ 31, %dec_label_pc_12194.lr.ph ], [ %v1_121a4, %dec_label_pc_12194 ]
  %v4_12198 = mul i32 %v1_12198, 4
  %v5_12198 = add i32 %v4_12198, %v2_12194
  %v2_121a0 = add i32 %v5_12198, -128
  %v3_121a0 = inttoptr i32 %v2_121a0 to i32*
  store i32 0, i32* %v3_121a0, align 4
  %v0_121a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_121a4 = add i32 %v0_121a4, -1
  store i32 %v1_121a4, i32* %r1.global-to-local, align 4
  %v6_121a4 = icmp slt i32 %v1_121a4, 0
  br i1 %v6_121a4, label %dec_label_pc_121ac, label %dec_label_pc_12194

dec_label_pc_121ac:                               ; preds = %dec_label_pc_12194
  %v2_121ac = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_121ac, i32* @r4, align 4
  store i32 %v2_121ac, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_121b8 = call i32 @function_11b34()
  %v2_121bc = icmp eq i32 %v0_121b8, 0
  br i1 %v2_121bc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_121ac
  store i32 %v2_121ac, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_121ac, %bb
  store i32 74192, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_121bc, i32 ptrtoint (i32* @global_var_1139c.408 to i32))
  %v2_121d4 = load i32, i32* @global_var_1c204.410, align 4
  %v2_121d8 = icmp eq i32 %v2_121d4, 0
  br i1 %v2_121d8, label %dec_label_pc_121e0, label %dec_label_pc_12210

dec_label_pc_121e0:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1c204.410, align 4
  br label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_12260, %dec_label_pc_121e0
  %v1_121f4 = call i32 @function_12710()
  %v1_121fc = call i32 @function_138ac(i32 6)
  store i32 74256, i32* @lr, align 4
  %v1_1220c = call i32 @function_12710()
  %v2_12214.pre = load i32, i32* @global_var_1c204.410, align 4
  br label %dec_label_pc_12210

dec_label_pc_12210:                               ; preds = %.thread1, %dec_label_pc_121e8
  %v0_12284 = phi i32 [ %v2_121d4, %.thread1 ], [ %v2_12214.pre, %dec_label_pc_121e8 ]
  store i32 ptrtoint (i32* @global_var_1c204.410 to i32), i32* %ip.global-to-local, align 4
  %v7_12218 = icmp eq i32 %v0_12284, 1
  br i1 %v7_12218, label %dec_label_pc_12248.lr.ph, label %dec_label_pc_1227c

dec_label_pc_12248.lr.ph:                         ; preds = %dec_label_pc_12210
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1c204.410, align 4
  %v2_12234 = bitcast i32* %stack_var_-268 to i8*
  %v3_12234 = call i32 @function_11760(i8* %v2_12234, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12248

dec_label_pc_12248:                               ; preds = %dec_label_pc_12248.lr.ph, %dec_label_pc_12248
  %v1_1224c = phi i32 [ 31, %dec_label_pc_12248.lr.ph ], [ %v1_12258, %dec_label_pc_12248 ]
  %v4_1224c = mul i32 %v1_1224c, 4
  %v5_1224c = add i32 %v4_1224c, %v2_12194
  %v2_12254 = add i32 %v5_1224c, -264
  %v3_12254 = inttoptr i32 %v2_12254 to i32*
  store i32 -1, i32* %v3_12254, align 4
  %v0_12258 = load i32, i32* %r1.global-to-local, align 4
  %v1_12258 = add i32 %v0_12258, -1
  store i32 %v1_12258, i32* %r1.global-to-local, align 4
  %v6_12258 = icmp slt i32 %v1_12258, 0
  br i1 %v6_12258, label %dec_label_pc_12260, label %dec_label_pc_12248

dec_label_pc_12260:                               ; preds = %dec_label_pc_12248
  store i32 %v2_12178, i32* %r1.global-to-local, align 4
  %v4_12274 = call i32 @function_129fc(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_121e8

dec_label_pc_1227c:                               ; preds = %dec_label_pc_12210
  %v7_1227c = icmp eq i32 %v0_12284, 2
  br i1 %v7_1227c, label %dec_label_pc_12284, label %dec_label_pc_12290

dec_label_pc_12284:                               ; preds = %dec_label_pc_1227c
  store i32 3, i32* @global_var_1c204.410, align 4
  %v0_1228c = call i32 @function_12178()
  %v2_12290.pre = load i32, i32* @global_var_1c204.410, align 4
  br label %dec_label_pc_12290

dec_label_pc_12290:                               ; preds = %dec_label_pc_1227c, %dec_label_pc_12284
  %v1_12298 = phi i32 [ %v0_12284, %dec_label_pc_1227c ], [ %v2_12290.pre, %dec_label_pc_12284 ]
  %v7_12294 = icmp eq i32 %v1_12298, 3
  br i1 %v7_12294, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_12290
  %v2_122a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_122a0 = inttoptr i32 %v2_122a0 to i32*
  store i32 4, i32* %v3_122a0, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12290, %bb27
  call void @__pseudo_cond_branch(i1 %v7_12294, i32 ptrtoint (i32* @global_var_12b14.412 to i32))
  br label %dec_label_pc_122a8

dec_label_pc_122a8:                               ; preds = %dec_label_pc_122a8, %.thread3
  %v0_122a8 = call i32 @function_12178()
  br label %dec_label_pc_122a8

; uselistorder directives
  uselistorder i32 %v1_12258, { 2, 1, 0 }
  uselistorder i32 %v1_121a4, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 6, 7, 0, 1, 8, 3, 5, 4, 2 }
  uselistorder i32* @global_var_1c204.410, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12290, { 1, 0 }
  uselistorder label %dec_label_pc_12248, { 1, 0 }
  uselistorder label %dec_label_pc_12210, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12194, { 1, 0 }
}

define i32 @function_122c0(i8* %arg1) local_unnamed_addr {
dec_label_pc_122c0:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_122d4 = load i32, i32* @r4, align 4
  store i32 %v3_122d4, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_122f8.pre = load i32, i32* bitcast (i32** @global_var_1c170.415 to i32*), align 4
  br label %dec_label_pc_122f0

dec_label_pc_122f0:                               ; preds = %dec_label_pc_122f0, %dec_label_pc_122c0
  %v0_12328 = phi i32 [ %tmp, %dec_label_pc_122c0 ], [ %v1_122ec, %dec_label_pc_122f0 ]
  store i32 %v0_12328, i32* %r4.global-to-local, align 4
  %v1_122f4 = inttoptr i32 %v0_12328 to i8*
  %v2_122f4 = load i8, i8* %v1_122f4, align 1
  %v3_122f4 = zext i8 %v2_122f4 to i32
  %v3_122fc = mul nuw nsw i32 %v3_122f4, 2
  %v4_122fc = add i32 %v3_122fc, %v2_122f8.pre
  %v5_122fc = inttoptr i32 %v4_122fc to i8*
  %v6_122fc = load i8, i8* %v5_122fc, align 1
  %v1_12300 = and i8 %v6_122fc, 32
  %v2_12300 = icmp eq i8 %v1_12300, 0
  %v1_122ec = add i32 %v0_12328, 1
  br i1 %v2_12300, label %dec_label_pc_12308, label %dec_label_pc_122f0

dec_label_pc_12308:                               ; preds = %dec_label_pc_122f0
  %v7_12308 = icmp eq i8 %v2_122f4, 43
  br i1 %v7_12308, label %dec_label_pc_12328, label %dec_label_pc_12310

dec_label_pc_12310:                               ; preds = %dec_label_pc_12308
  %v7_12310 = icmp eq i8 %v2_122f4, 45
  br i1 %v7_12310, label %dec_label_pc_12328, label %bb

bb:                                               ; preds = %dec_label_pc_12310
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12384

dec_label_pc_12328:                               ; preds = %dec_label_pc_12308, %dec_label_pc_12310
  %storemerge30 = phi i32 [ 1, %dec_label_pc_12310 ], [ 0, %dec_label_pc_12308 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_122ec, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12384

dec_label_pc_12384:                               ; preds = %bb, %dec_label_pc_12328
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_1238c = call i32 @function_10ea8(i32 -1, i32 10)
  %v0_12390 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12390, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_1239c = urem i32 %v2_1238c, 256
  store i32 %v1_1239c, i32* %sl.global-to-local, align 4
  %v0_123a0 = call i32 @function_10d98()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_123a0, i32* %r8.global-to-local, align 4
  %v0_123b4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_123b4

dec_label_pc_123b0:                               ; preds = %bb48, %dec_label_pc_12410
  %v0_123b0 = phi i32 [ %v1_123e0, %bb48 ], [ %v0_123b0.pre, %dec_label_pc_12410 ]
  store i32 %v0_123b0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_123b4

dec_label_pc_123b4:                               ; preds = %dec_label_pc_12384, %dec_label_pc_123b0
  %v0_123e0 = phi i32 [ %v0_123b4.pre, %dec_label_pc_12384 ], [ %v0_123b0, %dec_label_pc_123b0 ]
  %v1_123b4 = inttoptr i32 %v0_123e0 to i8*
  %v2_123b4 = load i8, i8* %v1_123b4, align 1
  %v3_123b4 = zext i8 %v2_123b4 to i32
  %v1_123b8 = add nsw i32 %v3_123b4, -48
  %v1_123bc = urem i32 %v1_123b8, 256
  %v1_123c4 = or i32 %v3_123b4, 32
  %tmp56 = icmp ult i32 %v1_123bc, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_123cc

dec_label_pc_123cc:                               ; preds = %dec_label_pc_123b4
  %tmp57 = icmp ugt i32 %v1_123c4, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_123cc
  %v1_123d0 = add nsw i32 %v1_123c4, -87
  %v5_123d8 = urem i32 %v1_123d0, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_123b4, %dec_label_pc_123cc, %bb42
  %v3_12408 = phi i32 [ %v1_123bc, %dec_label_pc_123b4 ], [ 40, %dec_label_pc_123cc ], [ %v5_123d8, %bb42 ]
  %v1_123dc = load i32, i32* %r5.global-to-local, align 4
  %v1_123e0 = add i32 %v0_123e0, 1
  store i32 %v1_123e0, i32* %r4.global-to-local, align 4
  %v6_123e4 = icmp slt i32 %v3_12408, %v1_123dc
  br i1 %v6_123e4, label %dec_label_pc_123e8, label %dec_label_pc_12428

dec_label_pc_123e8:                               ; preds = %bb43
  %v0_123e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_123e8 = load i32, i32* %r8.global-to-local, align 4
  %v9_123e8 = icmp eq i32 %v0_123e8, %v1_123e8
  br i1 %v9_123e8, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_123e8
  br label %dec_label_pc_123f8

bb44:                                             ; preds = %dec_label_pc_123e8
  %v3_123e8 = icmp ult i32 %v0_123e8, %v1_123e8
  br i1 %v3_123e8, label %dec_label_pc_123f8, label %dec_label_pc_12410

dec_label_pc_123f8:                               ; preds = %bb44, %.thread
  %v4_124001727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_123f8 = load i32, i32* %sl.global-to-local, align 4
  %v3_123f8 = icmp uge i32 %v3_12408, %v1_123f8
  %v9_123f8 = icmp eq i32 %v3_12408, %v1_123f8
  %v2_123fc = xor i1 %v3_123f8, true
  %v3_123fc = or i1 %v9_123f8, %v2_123fc
  br i1 %v3_123fc, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_123f8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_123f8, %bb45
  %v4_12400 = phi i32 [ %v4_124001727, %dec_label_pc_123f8 ], [ 0, %bb45 ]
  %v2_12400 = xor i1 %v9_123f8, true
  %v3_12400 = and i1 %v3_123f8, %v2_12400
  br i1 %v3_12400, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_12400 = urem i32 %v4_12400, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_12404 = phi i32 [ %v5_12400, %bb47 ], [ %v4_12400, %bb46 ]
  %v2_12404 = icmp eq i32 %v0_12404, 0
  br i1 %v2_12404, label %bb48, label %dec_label_pc_12410

bb48:                                             ; preds = %thread-pre-split
  %v4_12408 = mul i32 %v0_123e8, %v1_123dc
  %v5_12408 = add i32 %v4_12408, %v3_12408
  store i32 %v5_12408, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_123b0

dec_label_pc_12410:                               ; preds = %bb44, %thread-pre-split
  %v0_12410 = call i32 @function_116f4()
  %v0_12414 = load i32, i32* %r7.global-to-local, align 4
  %v1_12414 = load i32, i32* %fp.global-to-local, align 4
  %v2_12414 = and i32 %v1_12414, %v0_12414
  store i32 %v2_12414, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_12420 = inttoptr i32 %v0_12410 to i32*
  store i32 34, i32* %v2_12420, align 4
  %v0_123b0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_123b0

dec_label_pc_12428:                               ; preds = %bb43
  %v0_12428.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_12428 = icmp eq i32 %v0_12428.pre, 0
  br i1 %v2_12428, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_12428
  %v1_1242c = load i32, i32* %r6.global-to-local, align 4
  %v3_1242c = inttoptr i32 %v0_12428.pre to i32*
  store i32 %v1_1242c, i32* %v3_1242c, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12428, %bb49
  %v0_12430 = load i32, i32* %r7.global-to-local, align 4
  %v2_12430 = icmp eq i32 %v0_12430, 0
  %. = select i1 %v2_12430, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_1243c = load i32, i32* %fp.global-to-local, align 4
  %v2_1243c = icmp eq i32 %v0_1243c, 0
  %v0_12460.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_1243c, label %dec_label_pc_12458, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_12460.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_12448, label %dec_label_pc_12458

dec_label_pc_12448:                               ; preds = %bb53
  %v0_12448 = call i32 @function_116f4()
  %v2_12450 = inttoptr i32 %v0_12448 to i32*
  store i32 34, i32* %v2_12450, align 4
  %v0_12454 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12454, i32* %ip.global-to-local, align 4
  %v0_12458.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12458

dec_label_pc_12458:                               ; preds = %bb53, %bb50, %dec_label_pc_12448
  %v0_12460.pre = phi i32 [ %v0_12460.pre.pre, %bb53 ], [ %v0_12454, %dec_label_pc_12448 ], [ %v0_12460.pre.pre, %bb50 ]
  %v0_12458 = phi i32 [ %v0_12430, %bb53 ], [ %v0_12458.pre, %dec_label_pc_12448 ], [ %v0_12430, %bb50 ]
  %v2_12458 = icmp eq i32 %v0_12458, 0
  br i1 %v2_12458, label %dec_label_pc_12458._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_12458
  %v2_1245c = sub i32 0, %v0_12460.pre
  store i32 %v2_1245c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12458._crit_edge

dec_label_pc_12458._crit_edge:                    ; preds = %dec_label_pc_12458, %bb54
  %v0_12460 = phi i32 [ %v2_1245c, %bb54 ], [ %v0_12460.pre, %dec_label_pc_12458 ]
  %v2_12464 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12464, i32* @r4, align 4
  ret i32 %v0_12460

; uselistorder directives
  uselistorder i32 %v0_12460.pre, { 1, 0 }
  uselistorder i32 %v0_12460.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_12428.pre, { 1, 0 }
  uselistorder i32 %v4_12400, { 1, 0 }
  uselistorder i1 %v3_123f8, { 1, 0 }
  uselistorder i32 %v1_123f8, { 1, 0 }
  uselistorder i32 %v1_123e0, { 1, 0 }
  uselistorder i32 %v1_123c4, { 1, 0 }
  uselistorder i32 %v1_123bc, { 1, 0 }
  uselistorder i32 %v0_123b0, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_10d98, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32)* @function_10ea8, { 6, 4, 0, 8, 3, 7, 2, 1, 5 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 2, 3, 13, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_12458._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12458, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12410, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_123b4, { 1, 0 }
  uselistorder label %dec_label_pc_123b0, { 1, 0 }
  uselistorder label %dec_label_pc_12384, { 1, 0 }
  uselistorder label %dec_label_pc_12328, { 1, 0 }
}

define i32 @function_1246c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1246c:
  %stack_var_-16 = alloca i32, align 4
  %v2_1246c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_1246c, i32* @r0, align 4
  %v8_12488 = call i32 @function_12718(i32 %v2_1246c, i32 ptrtoint (i32* @global_var_12710.364 to i32), i32 ptrtoint (i32* @global_var_1c150.418 to i32), i32 75544, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_12498 = call i32 @function_12710()
  %v2_124a0 = load i32, i32* @global_var_1c208.422, align 4
  %v2_124a4 = icmp eq i32 %v2_124a0, 0
  br i1 %v2_124a4, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_1246c
  call void @__pseudo_branch(i32 %v2_124a0)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1246c, %bb
  store i32 %v2_1246c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_124c8.424 to i32), i32* @lr, align 4
  %v8_124c4 = call i32 @function_12718(i32 %v2_1246c, i32 1, i32 ptrtoint (i32* @global_var_1c150.418 to i32), i32 75544, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_124c4, i32* @r0, align 4
  %v1_124c8 = call i32 @function_126a4(i32 %v8_124c4)
  store i1 true, i1* @cpsr_z, align 1
  %v0_124dc = load i32, i32* @r4, align 4
  %v1_124e0 = call i32 @function_12b14(i32 %v0_124dc)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_1246c, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_12710, { 4, 2, 1, 3, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_12718, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 75544, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c150.418 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_12710.364 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_12500(i32 %arg1) local_unnamed_addr {
dec_label_pc_12500:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12500 = load i32, i32* @r4, align 4
  store i32 %v3_12500, i32* %stack_var_-20, align 4
  %v6_12500 = load i32, i32* @r5, align 4
  %v9_12500 = load i32, i32* @r6, align 4
  %v16_12500 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_12504 = icmp eq i32 %arg1, 0
  %v2_12508 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_12504, label %dec_label_pc_1268c, label %dec_label_pc_12520.preheader

dec_label_pc_12520.preheader:                     ; preds = %dec_label_pc_12500
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1252817 = add i32 %v16_12500, 124
  br label %dec_label_pc_12518

dec_label_pc_12518:                               ; preds = %dec_label_pc_12520.preheader, %dec_label_pc_12518
  %v5_1252818 = phi i32 [ %v5_1252817, %dec_label_pc_12520.preheader ], [ %v5_12528, %dec_label_pc_12518 ]
  %v2_1251c = add i32 %v5_1252818, -136
  %v3_1251c = inttoptr i32 %v2_1251c to i32*
  store i32 0, i32* %v3_1251c, align 4
  %v0_12520.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12520 = add i32 %v0_12520.pre, -1
  store i32 %v1_12520, i32* %r1.global-to-local, align 4
  %v6_12520 = icmp slt i32 %v1_12520, 0
  %v4_12528 = mul i32 %v1_12520, 4
  %v5_12528 = add i32 %v4_12528, %v16_12500
  br i1 %v6_12520, label %dec_label_pc_12530, label %dec_label_pc_12518

dec_label_pc_12530:                               ; preds = %dec_label_pc_12518
  %v2_12530 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_12530, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_12540 = load i32, i32* @ip, align 4
  store i32 %v0_12540, i32* %stack_var_-28, align 4
  %v0_12548 = call i32 @function_11b34()
  store i32 %v0_12548, i32* %r0.global-to-local, align 4
  %v1_1254c = load i32, i32* @r5, align 4
  %v5_12550 = icmp slt i32 %v0_12548, %v1_1254c
  br i1 %v5_12550, label %dec_label_pc_12694, label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %dec_label_pc_12530
  %v2_12554 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12554, i32* @r4, align 4
  store i32 %v1_1254c, i32* %r0.global-to-local, align 4
  store i32 %v2_12530, i32* %r1.global-to-local, align 4
  %v3_12564 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_12564 = call i32 @function_1139c(i32 %v1_1254c, %_TYPEDEF_sigset_t* %v3_12564, i32 %v2_12554)
  store i32 %v4_12564, i32* %r0.global-to-local, align 4
  %v1_12568 = load i32, i32* @r5, align 4
  %v9_12568 = icmp eq i32 %v4_12564, %v1_12568
  br i1 %v9_12568, label %dec_label_pc_12570, label %dec_label_pc_12694

dec_label_pc_12570:                               ; preds = %dec_label_pc_12554
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_12554, i32* %r0.global-to-local, align 4
  %v2_12578 = call i32 @function_11b10(i32 %v2_12554, i32 17)
  store i32 %v2_12578, i32* %r0.global-to-local, align 4
  %v1_1257c = load i32, i32* @r5, align 4
  %v9_1257c = icmp eq i32 %v2_12578, %v1_1257c
  br i1 %v9_1257c, label %dec_label_pc_12594.preheader, label %dec_label_pc_12570.dec_label_pc_1265c_crit_edge

dec_label_pc_12570.dec_label_pc_1265c_crit_edge:  ; preds = %dec_label_pc_12570
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_1265c

dec_label_pc_12594.preheader:                     ; preds = %dec_label_pc_12570
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1258c

dec_label_pc_1258c:                               ; preds = %dec_label_pc_12594.preheader, %dec_label_pc_1258c
  %v5_1259c16 = phi i32 [ %v5_1252817, %dec_label_pc_12594.preheader ], [ %v5_1259c, %dec_label_pc_1258c ]
  %v2_12590 = add i32 %v5_1259c16, -136
  %v3_12590 = inttoptr i32 %v2_12590 to i32*
  store i32 0, i32* %v3_12590, align 4
  %v0_12594.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12594 = add i32 %v0_12594.pre, -1
  store i32 %v1_12594, i32* %r1.global-to-local, align 4
  %v6_12594 = icmp slt i32 %v1_12594, 0
  %v4_1259c = mul i32 %v1_12594, 4
  %v5_1259c = add i32 %v4_1259c, %v16_12500
  br i1 %v6_12594, label %dec_label_pc_125a4, label %dec_label_pc_1258c

dec_label_pc_125a4:                               ; preds = %dec_label_pc_1258c
  store i32 %v2_12530, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_125ac = call i32 @function_11b34()
  store i32 %v0_125ac, i32* %r0.global-to-local, align 4
  %v1_125b0 = icmp slt i32 %v0_125ac, 0
  br i1 %v1_125b0, label %dec_label_pc_12694, label %dec_label_pc_125b8

dec_label_pc_125b8:                               ; preds = %dec_label_pc_125a4
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_125c4 = call i32 @function_129fc(i32 17, i32* null, i32 %v2_12508)
  store i32 %v4_125c4, i32* %r0.global-to-local, align 4
  %v1_125c8 = icmp slt i32 %v4_125c4, 0
  br i1 %v1_125c8, label %dec_label_pc_125d0, label %dec_label_pc_125f8

dec_label_pc_125d0:                               ; preds = %dec_label_pc_125b8
  %v0_125d0 = call i32 @function_116f4()
  store i32 %v2_12554, i32* %r1.global-to-local, align 4
  store i32 %v0_125d0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_125e4 = inttoptr i32 %v0_125d0 to i32*
  %v2_125e4 = load i32, i32* %v1_125e4, align 4
  store i32 %v2_125e4, i32* @r4, align 4
  %v3_125e8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_125e8 = call i32 @function_1139c(i32 2, %_TYPEDEF_sigset_t* %v3_125e8, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_125f0 = load i32, i32* @r4, align 4
  %v1_125f0 = load i32, i32* %r5.global-to-local, align 4
  %v2_125f0 = inttoptr i32 %v1_125f0 to i32*
  store i32 %v0_125f0, i32* %v2_125f0, align 4
  %v17_1269c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12698

dec_label_pc_125f8:                               ; preds = %dec_label_pc_125b8
  %v2_125f8 = load i32, i32* %stack_var_-424, align 4
  %v7_125fc = icmp eq i32 %v2_125f8, 1
  %v2_12604 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12604, i32* @r4, align 4
  br i1 %v7_125fc, label %dec_label_pc_1260c, label %dec_label_pc_12640

dec_label_pc_1260c:                               ; preds = %dec_label_pc_125f8
  store i32 %v2_12604, i32* %r1.global-to-local, align 4
  store i32 %v2_12604, i32* %r0.global-to-local, align 4
  %v2_12614 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_12614 = call i32 @function_12e98(%timespec* %v2_12614, i32 %v2_12604)
  store i32 %v3_12614, i32* %r0.global-to-local, align 4
  store i32 %v3_12614, i32* %r6.global-to-local, align 4
  %v0_1261c = call i32 @function_116f4()
  store i32 %v2_12554, i32* %r1.global-to-local, align 4
  store i32 %v0_1261c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_12630 = inttoptr i32 %v0_1261c to i32*
  %v2_12630 = load i32, i32* %v1_12630, align 4
  store i32 %v2_12630, i32* @r4, align 4
  %v3_12634 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12634 = call i32 @function_1139c(i32 2, %_TYPEDEF_sigset_t* %v3_12634, i32 0)
  store i32 %v4_12634, i32* %r0.global-to-local, align 4
  %v0_12638 = load i32, i32* @r4, align 4
  %v1_12638 = load i32, i32* %r5.global-to-local, align 4
  %v2_12638 = inttoptr i32 %v1_12638 to i32*
  store i32 %v0_12638, i32* %v2_12638, align 4
  %v0_12668.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12668

dec_label_pc_12640:                               ; preds = %dec_label_pc_125f8
  store i32 %v2_12554, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_1264c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1264c = call i32 @function_1139c(i32 2, %_TYPEDEF_sigset_t* %v3_1264c, i32 0)
  store i32 %v4_1264c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1265c

dec_label_pc_1265c:                               ; preds = %dec_label_pc_12570.dec_label_pc_1265c_crit_edge, %dec_label_pc_12640
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_12570.dec_label_pc_1265c_crit_edge ], [ %v2_12604, %dec_label_pc_12640 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_12660 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_12660 = call i32 @function_12e98(%timespec* %v2_12660, i32 %storemerge.pre-phi)
  store i32 %v3_12660, i32* %r0.global-to-local, align 4
  store i32 %v3_12660, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12668

dec_label_pc_12668:                               ; preds = %dec_label_pc_1260c, %dec_label_pc_1265c
  %v0_12668 = phi i32 [ %v0_12668.pr, %dec_label_pc_1260c ], [ %v3_12660, %dec_label_pc_1265c ]
  %v2_12668 = icmp eq i32 %v0_12668, 0
  br i1 %v2_12668, label %dec_label_pc_1268c, label %dec_label_pc_12670

dec_label_pc_12670:                               ; preds = %dec_label_pc_12668
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_12678 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_12678, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12698

dec_label_pc_1268c:                               ; preds = %dec_label_pc_12500, %dec_label_pc_12668
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12698

dec_label_pc_12694:                               ; preds = %dec_label_pc_12554, %dec_label_pc_125a4, %dec_label_pc_12530
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12698

dec_label_pc_12698:                               ; preds = %dec_label_pc_12670, %dec_label_pc_1268c, %dec_label_pc_125d0, %dec_label_pc_12694
  %v17_1269c = phi i32 [ %v3_12678, %dec_label_pc_12670 ], [ 0, %dec_label_pc_1268c ], [ %v17_1269c.pre, %dec_label_pc_125d0 ], [ -1, %dec_label_pc_12694 ]
  %v2_1269c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1269c, i32* @r4, align 4
  store i32 %v6_12500, i32* @r5, align 4
  store i32 %v9_12500, i32* @r6, align 4
  ret i32 %v17_1269c

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_12604, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_12594, { 0, 2, 1 }
  uselistorder i32 %v2_12554, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_1254c, { 1, 0, 2 }
  uselistorder i32 %v1_12520, { 0, 2, 1 }
  uselistorder i32 %v16_12500, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 21, 17, 19, 18, 20, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_129fc, { 1, 2, 0 }
  uselistorder i32 ()* @function_11b34, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12698, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12694, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1268c, { 1, 0 }
  uselistorder label %dec_label_pc_12668, { 1, 0 }
  uselistorder label %dec_label_pc_1265c, { 1, 0 }
  uselistorder label %dec_label_pc_1258c, { 1, 0 }
  uselistorder label %dec_label_pc_12518, { 1, 0 }
}

define i32 @function_126a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_126d0:
  %stack_var_-8 = alloca i32, align 4
  %v3_126a4 = load i32, i32* @r4, align 4
  store i32 %v3_126a4, i32* %stack_var_-8, align 4
  %v2_126d4 = load i32, i32* @global_var_1c218.431, align 4
  %v2_126d8 = icmp eq i32 %v2_126d4, 0
  br i1 %v2_126d8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_126d0
  store i32 75492, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_126d4)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_126d0, %bb
  %v2_126e8 = load i32, i32* @global_var_1c21c.433, align 4
  %v2_126ec = icmp eq i32 %v2_126e8, 0
  br i1 %v2_126ec, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_126f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_126f0, i32* @r4, align 4
  %v9_126f0 = load i32, i32* @r0, align 4
  ret i32 %v9_126f0

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_126fc.434 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_126e8)
  %v2_126fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_126fc, i32* @r4, align 4
  %v8_126fc = load i32, i32* @r0, align 4
  ret i32 %v8_126fc

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12710() local_unnamed_addr {
dec_label_pc_12710:
  ret i32 0
}

define i32 @function_12718(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12718:
  %v1_12718 = load i32, i32* @r0, align 4
  ret i32 %v1_12718
}

define i32 @function_1271c(i32 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_1271c:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i64* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_1271c = load i32, i32* @r4, align 4
  store i32 %v3_1271c, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_1272c = call i32 @function_1105c(i32 %arg1, i32 1)
  %v7_12730 = icmp eq i32 %v2_1272c, -1
  br i1 %v7_12730, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1271c
  %v3_12734 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12734, i32* @r4, align 4
  ret i32 %v2_1272c

bb5:                                              ; preds = %dec_label_pc_1271c
  %v0_12738 = load i32, i32* @r4, align 4
  %v1_12738 = inttoptr i32 %v0_12738 to i64*
  %v5_12740 = call i32 @function_1124c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_13bd0.436, i32 0, i32 0), i32 %v0_12738)
  %v1_12744 = load i32, i32* %r5.global-to-local, align 4
  %v9_12744 = icmp eq i32 %v5_12740, %v1_12744
  br i1 %v9_12744, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_12748 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12748, i32* @r4, align 4
  ret i32 %v5_12740

bb7:                                              ; preds = %bb5
  %v0_1274c = call i32 @function_12178()
  %v0_12750 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12750, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v4_12750 = load i64, i64* %v1_12738, align 4
  %v6_12750 = trunc i64 %v4_12750 to i32
  store i32 %v6_12750, i32* @r4, align 4
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_1274c

; uselistorder directives
  uselistorder i32 %v2_1272c, { 1, 0 }
  uselistorder i1* @cpsr_z, { 7, 6, 0, 8, 3, 4, 1, 2, 5 }
  uselistorder i32 ()* @function_12178, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i32)* @function_1124c, { 9, 4, 0, 7, 8, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_1105c, { 0, 5, 9, 8, 11, 10, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_12754(i32 %arg1) local_unnamed_addr {
dec_label_pc_12754:
  %v2_12758 = load i32, i32* @global_var_1c220.438, align 4
  %v2_1275c = icmp eq i32 %v2_12758, 0
  br i1 %v2_1275c, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_12754
  %v6_12768 = load i32, i32* @r0, align 4
  ret i32 %v6_12768

bb2:                                              ; preds = %dec_label_pc_12754
  store i32 1, i32* @global_var_1c220.438, align 4
  store i32 4096, i32* @global_var_1c214.389, align 4
  ret i32 undef
}

define i32 @function_127b0(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_127b0:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_127b4 = mul i32 %arg2, 4
  %v5_127b4 = add i32 %tmp, %v4_127b4
  %v2_127b8 = load i32, i32* %arg3, align 4
  %v2_127bc = ptrtoint i32* %stack_var_-120 to i32
  %v1_127c0 = add i32 %v5_127b4, 4
  %v9_127c4 = icmp eq i32 %v1_127c0, %v2_127b8
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1c20c.443, align 4
  store i32 %v1_127c0, i32* @global_var_1c210.445, align 4
  store i32 %arg6, i32* @global_var_1c21c.433, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_127c4, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_127b0
  store i32 %v5_127b4, i32* @global_var_1c210.445, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_127b0, %bb
  %v2_12804 = bitcast i32* %stack_var_-120 to i8*
  %v3_12804 = call i32 @function_11760(i8* %v2_12804, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1c210.445, align 4
  br label %dec_label_pc_12814

dec_label_pc_12814:                               ; preds = %dec_label_pc_12814, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_12814, %dec_label_pc_12814 ]
  %v1_12814 = inttoptr i32 %storemerge to i32*
  %v2_12814 = load i32, i32* %v1_12814, align 4
  %v4_12814 = add i32 %storemerge, 4
  %v2_12818 = icmp eq i32 %v2_12814, 0
  br i1 %v2_12818, label %dec_label_pc_12824, label %dec_label_pc_12814

dec_label_pc_12824:                               ; preds = %dec_label_pc_12814
  store i32 %v4_12814, i32* @r4, align 4
  %v1_1284422 = inttoptr i32 %v4_12814 to i32*
  %v2_1284423 = load i32, i32* %v1_1284422, align 4
  %v2_1284825 = icmp eq i32 %v2_1284423, 0
  br i1 %v2_1284825, label %dec_label_pc_12850, label %dec_label_pc_1282c

dec_label_pc_1282c:                               ; preds = %dec_label_pc_12824, %dec_label_pc_12844
  %v5_12830 = phi i32 [ %v2_12844, %dec_label_pc_12844 ], [ %v2_1284423, %dec_label_pc_12824 ]
  %v2_1282c = icmp ugt i32 %v5_12830, 13
  %v7_1282c = icmp eq i32 %v5_12830, 14
  %v2_12830 = xor i1 %v2_1282c, true
  %v3_12830 = or i1 %v7_1282c, %v2_12830
  br i1 %v3_12830, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_1282c
  %v6_12830 = and i32 %v5_12830, 536870912
  %v7_12830 = icmp ne i32 %v6_12830, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_1282c, %bb42
  %v1_1283c = phi i1 [ %v2_1282c, %dec_label_pc_1282c ], [ %v7_12830, %bb42 ]
  %v2_12834 = xor i1 %v1_1283c, true
  %v3_12834 = or i1 %v7_1282c, %v2_12834
  br i1 %v3_12834, label %bb44, label %dec_label_pc_12844

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_12844

dec_label_pc_12844:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_12834, i32 ptrtoint (i32* @global_var_11740.447 to i32))
  %v0_12840 = load i32, i32* @r4, align 4
  %v1_12840 = add i32 %v0_12840, 8
  store i32 %v1_12840, i32* @r4, align 4
  %v1_12844 = inttoptr i32 %v1_12840 to i32*
  %v2_12844 = load i32, i32* %v1_12844, align 4
  %v2_12848 = icmp eq i32 %v2_12844, 0
  br i1 %v2_12848, label %dec_label_pc_12850, label %dec_label_pc_1282c

dec_label_pc_12850:                               ; preds = %dec_label_pc_12844, %dec_label_pc_12824
  %v1_12854 = call i32 @function_138c4(i32 %v2_127bc)
  store i32 %v1_12854, i32* @r0, align 4
  %v1_12858 = call i32 @function_12754(i32 %v1_12854)
  store i32 %v1_12858, i32* @r0, align 4
  %v2_12864 = icmp eq i32 %tmp37, 0
  br i1 %v2_12864, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_12850
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_12850, %bb45
  %v0_12874 = phi i32 [ %tmp37, %dec_label_pc_12850 ], [ 4096, %bb45 ]
  %v3_1286c = icmp eq i32 %tmp36, -1
  %v8_1286c = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1c214.389 to i32), i32* @r2, align 4
  store i32 %v0_12874, i32* @global_var_1c214.389, align 4
  br i1 %v3_1286c, label %dec_label_pc_1287c, label %dec_label_pc_128a4

dec_label_pc_1287c:                               ; preds = %bb46
  %v0_1287c = call i32 @function_12e08()
  store i32 %v0_1287c, i32* @r0, align 4
  store i32 %v0_1287c, i32* @r4, align 4
  %v0_12884 = call i32 @function_12db0()
  %v0_12888 = load i32, i32* @r4, align 4
  %v9_12888 = icmp eq i32 %v0_12888, %v0_12884
  br i1 %v9_12888, label %dec_label_pc_12890, label %dec_label_pc_128cc

dec_label_pc_12890:                               ; preds = %dec_label_pc_1287c
  %v1_12890 = call i32 @function_12ddc(i32 %v0_12884)
  store i32 %v1_12890, i32* @r0, align 4
  store i32 %v1_12890, i32* @r4, align 4
  %v0_12898 = call i32 @function_12d84()
  %v0_1289c = load i32, i32* @r4, align 4
  %v9_1289c = icmp eq i32 %v0_1289c, %v0_12898
  br i1 %v9_1289c, label %dec_label_pc_128a4, label %dec_label_pc_128cc

dec_label_pc_128a4:                               ; preds = %dec_label_pc_12890, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_1286c, label %dec_label_pc_12938, label %dec_label_pc_128b0

dec_label_pc_128b0:                               ; preds = %dec_label_pc_128a4
  %v9_128b4 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_128b4, label %dec_label_pc_128bc, label %dec_label_pc_128cc

dec_label_pc_128bc:                               ; preds = %dec_label_pc_128b0
  br label %dec_label_pc_128cc

dec_label_pc_128cc:                               ; preds = %dec_label_pc_128bc, %dec_label_pc_128b0, %dec_label_pc_12890, %dec_label_pc_1287c
  %v3_128d4 = call i32 @function_1271c(i32 0, i64* inttoptr (i32 32768 to i64*))
  %v3_128e0 = call i32 @function_1271c(i32 1, i64* inttoptr (i32 32770 to i64*))
  %v3_128ec = call i32 @function_1271c(i32 2, i64* inttoptr (i32 32770 to i64*))
  br label %dec_label_pc_12938

dec_label_pc_12938:                               ; preds = %dec_label_pc_128cc, %dec_label_pc_128a4
  %v0_128fc = load i32, i32* %r6.global-to-local, align 4
  %v1_128fc = inttoptr i32 %v0_128fc to i32*
  %v2_128fc = load i32, i32* %v1_128fc, align 4
  store i32 %v2_128fc, i32* @global_var_1c168, align 4
  store i32 %arg5, i32* @global_var_1c218.431, align 4
  %v2_12938 = icmp eq i32 %arg4, 0
  br i1 %v2_12938, label %dec_label_pc_12974, label %bb47

bb47:                                             ; preds = %dec_label_pc_12938
  br label %dec_label_pc_12974

dec_label_pc_12974:                               ; preds = %dec_label_pc_12938, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_12984 = call i32 @function_116f4()
  %v2_1298c = inttoptr i32 %v1_12984 to i32*
  store i32 0, i32* %v2_1298c, align 4
  %v0_129b8 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_129c4 = call i32 @function_1246c(i32 %v0_129b8)
  ret i32 %v1_129c4

; uselistorder directives
  uselistorder i32 %v2_12844, { 1, 0 }
  uselistorder i32 %v1_12840, { 1, 0 }
  uselistorder i1 %v2_1282c, { 1, 0 }
  uselistorder i32 %v4_12814, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_1246c, { 0, 6, 5, 1, 4, 3, 2 }
  uselistorder i32 (i32, i64*)* @function_1271c, { 1, 2, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1c214.389, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 7, 4, 8, 5, 9, 2, 6, 10, 11 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 73, 2, 3, 4, 5, 6, 7, 8, 41, 9, 10, 11, 12, 13, 96, 39, 42, 49, 97, 17, 18, 19, 74, 60, 75, 76, 77, 43, 20, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 21, 22, 94, 95, 59, 40, 50, 98, 15, 16, 58, 14, 99, 34, 33, 51, 54, 52, 55, 47, 53, 48, 57, 100, 23, 101, 102, 24, 103, 61, 62, 104, 63, 64, 105, 65, 66, 25, 26, 106, 67, 68, 27, 28, 107, 69, 70, 29, 30, 108, 71, 72, 31, 32, 46, 109, 110, 56, 111, 44, 35, 45, 36, 37, 38 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_12974, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_12844, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_1282c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_129fc(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_129fc:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_129fc = load i32, i32* @r4, align 4
  %v6_129fc = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_12a00 = icmp eq i32* %arg2, null
  %v2_12a04 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_12a00, label %dec_label_pc_12a70, label %dec_label_pc_12a14

dec_label_pc_12a14:                               ; preds = %dec_label_pc_129fc
  %v2_12a18 = load i32, i32* %arg2, align 4
  %v4_12a18 = add i32 %tmp, 4
  store i32 %v4_12a18, i32* @r1, align 4
  %v2_12a1c = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_12a1c, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_12a18, i32* %stack_var_-156, align 4
  %v3_12a28 = call i32 @function_11740(i32 %v2_12a1c, i32 %v4_12a18, i32 128)
  store i32 %v3_12a28, i32* %r0.global-to-local, align 4
  %v0_12a2c = load i32, i32* @r4, align 4
  %v1_12a2c = add i32 %v0_12a2c, 132
  %v2_12a2c = inttoptr i32 %v1_12a2c to i32*
  %v3_12a2c = load i32, i32* %v2_12a2c, align 4
  %v1_12a30 = and i32 %v3_12a2c, 67108864
  %v2_12a30 = icmp eq i32 %v1_12a30, 0
  br i1 %v2_12a30, label %dec_label_pc_12a44, label %bb

bb:                                               ; preds = %dec_label_pc_12a14
  br label %dec_label_pc_12a60

dec_label_pc_12a44:                               ; preds = %dec_label_pc_12a14
  %v1_12a4c = and i32 %v3_12a2c, 4
  %v2_12a4c = icmp eq i32 %v1_12a4c, 0
  br i1 %v2_12a4c, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_12a44
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_12a44, %bb20
  br label %dec_label_pc_12a60

dec_label_pc_12a60:                               ; preds = %bb, %bb21
  %v2_12a60 = icmp eq i32 %v0_12a2c, 0
  %v3_12a64 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_12a64 = select i1 %v2_12a60, i32 0, i32 %v3_12a64
  %v0_12a70.pre = load i32, i32* @r5, align 4
  %v0_12a80.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12a70

dec_label_pc_12a70:                               ; preds = %dec_label_pc_12a60, %dec_label_pc_129fc
  %v0_12a80 = phi i32 [ %arg1, %dec_label_pc_129fc ], [ %v0_12a80.pre, %dec_label_pc_12a60 ]
  %v0_12a70 = phi i32 [ %arg3, %dec_label_pc_129fc ], [ %v0_12a70.pre, %dec_label_pc_12a60 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_129fc ], [ %.v3_12a64, %dec_label_pc_12a60 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_12a70 = icmp eq i32 %v0_12a70, 0
  %.v2_12a04 = select i1 %v2_12a70, i32 0, i32 %v2_12a04
  store i32 %.v2_12a04, i32* @r2, align 4
  store i32 %v0_12a80, i32* %r0.global-to-local, align 4
  %v1_12a84 = call i32 @function_12ae8(i32 %v0_12a80)
  store i32 %v1_12a84, i32* %r0.global-to-local, align 4
  %v0_12a88 = load i32, i32* @r5, align 4
  %v2_12a88 = icmp eq i32 %v0_12a88, 0
  br i1 %v2_12a88, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_12a70
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_12a70, %bb25
  %v0_12a98.pr = phi i32 [ 0, %dec_label_pc_12a70 ], [ 1, %bb25 ]
  %v1_12a90 = icmp slt i32 %v1_12a84, 0
  br i1 %v1_12a90, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_12acc

thread-pre-split:                                 ; preds = %bb26
  %v2_12a98 = icmp eq i32 %v0_12a98.pr, 0
  store i32 %v1_12a84, i32* @r4, align 4
  br i1 %v2_12a98, label %dec_label_pc_12acc, label %dec_label_pc_12aa4

dec_label_pc_12aa4:                               ; preds = %thread-pre-split
  %v2_12aa4 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_12a88, i32* %r0.global-to-local, align 4
  %v2_12aac = inttoptr i32 %v0_12a88 to i32*
  store i32 %v2_12aa4, i32* %v2_12aac, align 4
  %v3_12aac = load i32, i32* %r0.global-to-local, align 4
  %v4_12aac = add i32 %v3_12aac, 4
  store i32 %v4_12aac, i32* @r0, align 4
  %v2_12ab0 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12ab0, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_12ab8 = call i32 @function_11740(i32 %v4_12aac, i32 %v2_12ab0, i32 128)
  store i32 %v3_12ab8, i32* %r0.global-to-local, align 4
  %v1_12ac0 = load i32, i32* @r5, align 4
  %v2_12ac0 = add i32 %v1_12ac0, 136
  %v3_12ac0 = inttoptr i32 %v2_12ac0 to i32*
  %v1_12ac8 = load i32, i32* @r5, align 4
  %v2_12ac8 = add i32 %v1_12ac8, 132
  %v3_12ac8 = inttoptr i32 %v2_12ac8 to i32*
  %v0_12acc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12acc:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_12aa4
  %v0_12acc = phi i32 [ %v1_12a84, %thread-pre-split ], [ %v0_12acc.pre, %dec_label_pc_12aa4 ], [ %v1_12a84, %thread-pre-split.thread ]
  store i32 %v0_12acc, i32* %r0.global-to-local, align 4
  store i32 %v3_129fc, i32* @r4, align 4
  store i32 %v6_129fc, i32* @r5, align 4
  ret i32 %v0_12acc

; uselistorder directives
  uselistorder i32 %v0_12acc, { 1, 0 }
  uselistorder i32 %v0_12a88, { 1, 0, 2 }
  uselistorder i32 %v0_12a80, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_12acc, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_12a60, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_12ae8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ae8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ae8 = load i32, i32* @r4, align 4
  store i32 %v3_12ae8, i32* %stack_var_-8, align 4
  %v1_12aec = load i32, i32* @r1, align 4
  %v2_12aec = inttoptr i32 %v1_12aec to %sigaction*
  %v3_12aec = load i32, i32* @r2, align 4
  %v4_12aec = inttoptr i32 %v3_12aec to %sigaction*
  %v5_12aec = call i32 @sigaction(i32 %arg1, %sigaction* %v2_12aec, %sigaction* %v4_12aec)
  store i32 %v5_12aec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12aec, -4095
  br i1 %tmp, label %dec_label_pc_12b0c, label %dec_label_pc_12afc

dec_label_pc_12afc:                               ; preds = %dec_label_pc_12ae8
  %v0_12afc = call i32 @function_116f4()
  %v0_12b00 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b00 = sub i32 0, %v0_12b00
  %v2_12b04 = inttoptr i32 %v0_12afc to i32*
  store i32 %v1_12b00, i32* %v2_12b04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b0c

dec_label_pc_12b0c:                               ; preds = %dec_label_pc_12ae8, %dec_label_pc_12afc
  %v0_12b0c = phi i32 [ %v5_12aec, %dec_label_pc_12ae8 ], [ -1, %dec_label_pc_12afc ]
  %v2_12b10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12b10, i32* %r4.global-to-local, align 4
  ret i32 %v0_12b0c

; uselistorder directives
  uselistorder i32 %v5_12aec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b0c, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_12b14(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_12b14:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_12b3c() local_unnamed_addr {
dec_label_pc_12b3c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_12b4c = load i32, i32* @r0, align 4
  %v4_12b4c = call i32 @fstat(i32 %v0_12b4c, %stat* %tmp4)
  store i32 %v4_12b4c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12b4c, -4095
  br i1 %tmp, label %dec_label_pc_12b70, label %dec_label_pc_12b5c

dec_label_pc_12b5c:                               ; preds = %dec_label_pc_12b3c
  %v0_12b5c = call i32 @function_116f4()
  %v0_12b60 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b60 = sub i32 0, %v0_12b60
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12b68 = inttoptr i32 %v0_12b5c to i32*
  store i32 %v1_12b60, i32* %v2_12b68, align 4
  br label %dec_label_pc_12b80

dec_label_pc_12b70:                               ; preds = %dec_label_pc_12b3c
  %v2_12b70 = icmp eq i32 %v4_12b4c, 0
  store i32 76672, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12b70, i32 ptrtoint (i32* @global_var_13258.463 to i32))
  br label %dec_label_pc_12b80

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12b5c, %dec_label_pc_12b70
  %v0_12b80 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_12b80

; uselistorder directives
  uselistorder i32 %v4_12b4c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 3, 10, 8, 9, 6, 7, 0, 1, 2, 4, 5 }
  uselistorder label %dec_label_pc_12b80, { 1, 0 }
}

define i32 @function_12b8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12b8c:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_12b8c = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12b94 = call i32 @function_12c20()
  store i32 %v0_12b94, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_12b94, 1
  br i1 %tmp8, label %dec_label_pc_12c18, label %dec_label_pc_12c04.preheader

dec_label_pc_12c04.preheader:                     ; preds = %dec_label_pc_12b8c
  %v5_12b9c = load i32, i32* @r4, align 4
  %v7_12b9c = add i32 %v5_12b9c, %v0_12b94
  store i32 %v7_12b9c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12c04

dec_label_pc_12ba8:                               ; preds = %dec_label_pc_12c04
  %v1_12ba8 = add i32 %v2_12bb8, 16
  %v2_12ba8 = inttoptr i32 %v1_12ba8 to i32*
  %v3_12ba8 = load i32, i32* %v2_12ba8, align 4
  store i32 %v3_12ba8, i32* @lr, align 4
  %v2_12bac = inttoptr i32 %v1_12c08 to i32*
  %v3_12bac = load i32, i32* %v2_12bac, align 4
  store i32 %v3_12bac, i32* %r2.global-to-local, align 4
  %v1_12bb0 = add i32 %v2_12bb8, 18
  %v2_12bb0 = inttoptr i32 %v1_12bb0 to i8*
  %v3_12bb0 = load i8, i8* %v2_12bb0, align 1
  %v4_12bb0 = zext i8 %v3_12bb0 to i32
  store i32 %v4_12bb0, i32* %ip.global-to-local, align 4
  %v3_12bb4 = sdiv i32 %v3_12ba8, 256
  store i32 %v3_12bb4, i32* %r3.global-to-local, align 4
  %v1_12bb8 = trunc i32 %v3_12ba8 to i8
  %v4_12bb8 = inttoptr i32 %v1_12c08 to i8*
  store i8 %v1_12bb8, i8* %v4_12bb8, align 1
  %v0_12bbc = load i32, i32* %r2.global-to-local, align 4
  %v1_12bbc = load i32, i32* @r4, align 4
  %v2_12bbc = add i32 %v1_12bbc, 4
  %v3_12bbc = inttoptr i32 %v2_12bbc to i32*
  store i32 %v0_12bbc, i32* %v3_12bbc, align 4
  %v0_12bc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_12bc0 = trunc i32 %v0_12bc0 to i8
  %v2_12bc0 = load i32, i32* @r4, align 4
  %v3_12bc0 = add i32 %v2_12bc0, 10
  %v4_12bc0 = inttoptr i32 %v3_12bc0 to i8*
  store i8 %v1_12bc0, i8* %v4_12bc0, align 1
  %v0_12bc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_12bc4 = trunc i32 %v0_12bc4 to i8
  %v2_12bc4 = load i32, i32* @r4, align 4
  %v3_12bc4 = add i32 %v2_12bc4, 9
  %v4_12bc4 = inttoptr i32 %v3_12bc4 to i8*
  store i8 %v1_12bc4, i8* %v4_12bc4, align 1
  %v0_12bc8 = load i32, i32* @r4, align 4
  %v1_12bc8 = add i32 %v0_12bc8, 8
  %v2_12bc8 = inttoptr i32 %v1_12bc8 to i8*
  %v3_12bc8 = load i8, i8* %v2_12bc8, align 1
  %v4_12bc8 = zext i8 %v3_12bc8 to i32
  store i32 %v4_12bc8, i32* %r2.global-to-local, align 4
  %v0_12bcc = load i32, i32* @r5, align 4
  %v1_12bcc = add i32 %v0_12bcc, 1
  %v2_12bcc = inttoptr i32 %v1_12bcc to i8*
  %v3_12bcc = load i8, i8* %v2_12bcc, align 1
  %v4_12bcc = zext i8 %v3_12bcc to i32
  store i32 %v4_12bcc, i32* %r3.global-to-local, align 4
  %v4_12bd0 = mul nuw nsw i32 %v4_12bcc, 256
  %v5_12bd0 = or i32 %v4_12bd0, %v4_12bc8
  %v1_12bd4 = add nsw i32 %v5_12bd0, -19
  store i32 %v1_12bd4, i32* @r2, align 4
  %v3_12bd8 = call i32 @function_11750(i32 %v1_12c10, i32 %v1_12c0c, i32 %v1_12bd4)
  %v0_12bdc = load i32, i32* @r4, align 4
  %v1_12bdc = add i32 %v0_12bdc, 8
  %v2_12bdc = inttoptr i32 %v1_12bdc to i8*
  %v3_12bdc = load i8, i8* %v2_12bdc, align 1
  %v4_12bdc = zext i8 %v3_12bdc to i32
  store i32 %v4_12bdc, i32* %r3.global-to-local, align 4
  %v0_12be0 = load i32, i32* @r5, align 4
  %v1_12be0 = add i32 %v0_12be0, 1
  %v2_12be0 = inttoptr i32 %v1_12be0 to i8*
  %v3_12be0 = load i8, i8* %v2_12be0, align 1
  %v4_12be0 = zext i8 %v3_12be0 to i32
  store i32 %v0_12bdc, i32* @r0, align 4
  %v4_12be8 = mul nuw nsw i32 %v4_12be0, 256
  %v5_12be8 = or i32 %v4_12be8, %v4_12bdc
  store i32 %v5_12be8, i32* @r2, align 4
  store i32 %v0_12bdc, i32* @r1, align 4
  %v3_12bf0 = call i32 @function_11750(i32 %v0_12bdc, i32 %v0_12bdc, i32 %v5_12be8)
  %v0_12bf4 = load i32, i32* @r4, align 4
  %v1_12bf4 = add i32 %v0_12bf4, 8
  %v2_12bf4 = inttoptr i32 %v1_12bf4 to i8*
  %v3_12bf4 = load i8, i8* %v2_12bf4, align 1
  %v4_12bf4 = zext i8 %v3_12bf4 to i32
  store i32 %v4_12bf4, i32* %r3.global-to-local, align 4
  %v0_12bf8 = load i32, i32* @r5, align 4
  %v1_12bf8 = add i32 %v0_12bf8, 1
  %v2_12bf8 = inttoptr i32 %v1_12bf8 to i8*
  %v3_12bf8 = load i8, i8* %v2_12bf8, align 1
  %v4_12bf8 = zext i8 %v3_12bf8 to i32
  store i32 %v4_12bf8, i32* @r2, align 4
  %v4_12bfc = mul nuw nsw i32 %v4_12bf8, 256
  %v5_12bfc = or i32 %v4_12bfc, %v4_12bf4
  store i32 %v5_12bfc, i32* %r3.global-to-local, align 4
  %v2_12c00 = add i32 %v5_12bfc, %v0_12bf4
  store i32 %v2_12c00, i32* @r4, align 4
  %v1_12c04.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12c04

dec_label_pc_12c04:                               ; preds = %dec_label_pc_12c04.preheader, %dec_label_pc_12ba8
  %v1_12c04 = phi i32 [ %v7_12b9c, %dec_label_pc_12c04.preheader ], [ %v1_12c04.pre, %dec_label_pc_12ba8 ]
  %v2_12bb8 = phi i32 [ %v5_12b9c, %dec_label_pc_12c04.preheader ], [ %v2_12c00, %dec_label_pc_12ba8 ]
  %v3_12c04 = icmp ult i32 %v2_12bb8, %v1_12c04
  %v1_12c08 = add i32 %v2_12bb8, 8
  store i32 %v1_12c08, i32* @r5, align 4
  %v1_12c0c = add i32 %v2_12bb8, 19
  store i32 %v1_12c0c, i32* @r1, align 4
  %v1_12c10 = add i32 %v2_12bb8, 11
  store i32 %v1_12c10, i32* @r0, align 4
  br i1 %v3_12c04, label %dec_label_pc_12ba8, label %dec_label_pc_12c18.loopexit

dec_label_pc_12c18.loopexit:                      ; preds = %dec_label_pc_12c04
  %v0_12c18.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c18

dec_label_pc_12c18:                               ; preds = %dec_label_pc_12b8c, %dec_label_pc_12c18.loopexit
  %v0_12c18 = phi i32 [ %v0_12c18.pre, %dec_label_pc_12c18.loopexit ], [ %v0_12b94, %dec_label_pc_12b8c ]
  store i32 %v6_12b8c, i32* @r5, align 4
  ret i32 %v0_12c18

; uselistorder directives
  uselistorder i32 %v1_12c10, { 1, 0 }
  uselistorder i32 %v1_12c0c, { 1, 0 }
  uselistorder i32 %v1_12c08, { 2, 1, 0 }
  uselistorder i32 %v2_12bb8, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_12bdc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_12ba8, { 1, 0, 2 }
  uselistorder i32 %v5_12b9c, { 1, 0 }
  uselistorder i32 %v0_12b94, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_11750, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12c18, { 1, 0 }
  uselistorder label %dec_label_pc_12c04, { 1, 0 }
}

define i32 @function_12c20() local_unnamed_addr {
dec_label_pc_12c20:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_12c24 = load i32, i32* @r4, align 4
  %v9_12c24 = load i32, i32* @r6, align 4
  %v0_12c28 = load i32, i32* @r2, align 4
  %v1_12c28 = add i32 %v0_12c28, 6
  %v2_12c30 = ptrtoint i32* %stack_var_-60 to i32
  %v1_12c34 = and i32 %v1_12c28, -4
  store i32 %v1_12c34, i32* %r3.global-to-local, align 4
  %v2_12c38 = sub i32 %v2_12c30, %v1_12c34
  %v0_12c3c = load i32, i32* @r1, align 4
  store i32 %v0_12c3c, i32* %r8.global-to-local, align 4
  store i32 %v0_12c28, i32* %stack_var_-60, align 4
  store i32 %v2_12c38, i32* %sl.global-to-local, align 4
  %v0_12c48 = load i32, i32* @r0, align 4
  %v1_12c4c = inttoptr i32 %v2_12c38 to %linux_dirent64*
  store i32 %v2_12c38, i32* %r1.global-to-local, align 4
  %v5_12c50 = call i32 @getdents64(i32 %v0_12c48, %linux_dirent64* %v1_12c4c, i32 %v0_12c28)
  store i32 %v5_12c50, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_12c50, -4095
  br i1 %tmp, label %dec_label_pc_12c74, label %dec_label_pc_12c60

dec_label_pc_12c60:                               ; preds = %dec_label_pc_12c20
  %v0_12c60 = call i32 @function_116f4()
  %v0_12c64 = load i32, i32* @r6, align 4
  %v1_12c64 = sub i32 0, %v0_12c64
  store i32 %v1_12c64, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_12c6c = inttoptr i32 %v0_12c60 to i32*
  store i32 %v1_12c64, i32* %v2_12c6c, align 4
  %v0_12c7c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c7c

dec_label_pc_12c74:                               ; preds = %dec_label_pc_12c20
  br i1 false, label %dec_label_pc_12c7c, label %dec_label_pc_12c84

dec_label_pc_12c7c:                               ; preds = %dec_label_pc_12c74, %dec_label_pc_12c60
  %v0_12c7c = phi i32 [ -1, %dec_label_pc_12c74 ], [ %v0_12c7c.pre, %dec_label_pc_12c60 ]
  store i32 %v0_12c7c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d78

dec_label_pc_12c84:                               ; preds = %dec_label_pc_12c74
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12c8c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12c8c, i32* @r5, align 4
  %v0_12c90 = load i32, i32* @sp, align 4
  store i32 %v0_12c90, i32* @r4, align 4
  br label %dec_label_pc_12d54

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12d54
  %v2_12d6c = add i32 %v3_12d58, %v0_12d6c
  %v1_12ca0 = add i32 %v0_12ca4, 17
  %v2_12ca0 = inttoptr i32 %v1_12ca0 to i8*
  %v3_12ca0 = load i8, i8* %v2_12ca0, align 1
  %v4_12ca0 = zext i8 %v3_12ca0 to i32
  %v2_12ca4 = inttoptr i32 %v1_12d60 to i8*
  %v3_12ca4 = load i8, i8* %v2_12ca4, align 1
  %v4_12ca4 = zext i8 %v3_12ca4 to i32
  %v4_12ca8 = mul nuw nsw i32 %v4_12ca0, 256
  %v5_12ca8 = or i32 %v4_12ca4, %v4_12ca8
  %v1_12cac = add nuw nsw i32 %v5_12ca8, 3
  %v1_12cb0 = and i32 %v1_12cac, 131068
  store i32 %v1_12cb0, i32* %r3.global-to-local, align 4
  %v2_12cb4 = add i32 %v1_12cb0, %v2_12cf4
  store i32 %v2_12cb4, i32* %sb.global-to-local, align 4
  %v9_12cb8 = icmp eq i32 %v2_12cb4, %v2_12d6c
  %v1_12cbc = and i32 %v1_12cac, 128
  %v2_12cc0 = icmp eq i32 %v1_12cbc, 0
  %v3_12cc0 = or i1 %v9_12cb8, %v2_12cc0
  br i1 %v3_12cc0, label %dec_label_pc_12cf4, label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12ca0
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_12cd4 = call i32 @function_12e34(i32 %v0_12c48, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_12cd8 = load i32, i32* @r5, align 4
  %v1_12cd8 = load i32, i32* %r8.global-to-local, align 4
  %v9_12cd8 = icmp eq i32 %v0_12cd8, %v1_12cd8
  br i1 %v9_12cd8, label %dec_label_pc_12ce0, label %dec_label_pc_12d74

dec_label_pc_12ce0:                               ; preds = %dec_label_pc_12cc4
  %v0_12ce0 = call i32 @function_116f4()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_12cec = inttoptr i32 %v0_12ce0 to i32*
  store i32 22, i32* %v2_12cec, align 4
  %v0_12d78.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d78

dec_label_pc_12cf4:                               ; preds = %dec_label_pc_12ca0
  %v3_12cbc11 = udiv i32 %v1_12cac, 256
  %v1_12cf4 = trunc i32 %v3_12cbc11 to i8
  %v3_12cf4 = add i32 %v2_12cf4, 17
  %v4_12cf4 = inttoptr i32 %v3_12cf4 to i8*
  store i8 %v1_12cf4, i8* %v4_12cf4, align 1
  %v0_12cf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_12cf8 = trunc i32 %v0_12cf8 to i8
  %v2_12cf8 = load i32, i32* @r5, align 4
  %v3_12cf8 = add i32 %v2_12cf8, 16
  %v4_12cf8 = inttoptr i32 %v3_12cf8 to i8*
  store i8 %v1_12cf8, i8* %v4_12cf8, align 1
  %v0_12cfc = load i32, i32* @r4, align 4
  %v1_12cfc = add i32 %v0_12cfc, 8
  %v1_12d00 = inttoptr i32 %v1_12cfc to i32*
  %v2_12d00 = load i32, i32* %v1_12d00, align 4
  %v3_12d00 = add i32 %v0_12cfc, 12
  %v4_12d00 = inttoptr i32 %v3_12d00 to i32*
  %v5_12d00 = load i32, i32* %v4_12d00, align 4
  store i32 %v5_12d00, i32* %r3.global-to-local, align 4
  %v1_12d0c = inttoptr i32 %v0_12cfc to i32*
  %v2_12d0c = load i32, i32* %v1_12d0c, align 4
  %v3_12d0c = add i32 %v0_12cfc, 4
  %v4_12d0c = inttoptr i32 %v3_12d0c to i32*
  %v5_12d0c = load i32, i32* %v4_12d0c, align 4
  store i32 %v5_12d0c, i32* %r3.global-to-local, align 4
  %v0_12d10 = load i32, i32* @r5, align 4
  %v1_12d10 = inttoptr i32 %v0_12d10 to i32*
  store i32 %v2_12d0c, i32* %v1_12d10, align 4
  %v3_12d10 = add i32 %v0_12d10, 4
  %v4_12d10 = inttoptr i32 %v3_12d10 to i32*
  %v5_12d10 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12d10, i32* %v4_12d10, align 4
  %v0_12d14 = load i32, i32* @r4, align 4
  %v1_12d14 = add i32 %v0_12d14, 8
  %v1_12d18 = inttoptr i32 %v1_12d14 to i32*
  %v2_12d18 = load i32, i32* %v1_12d18, align 4
  %v3_12d18 = add i32 %v0_12d14, 12
  %v4_12d18 = inttoptr i32 %v3_12d18 to i32*
  %v5_12d18 = load i32, i32* %v4_12d18, align 4
  store i32 %v5_12d18, i32* %r3.global-to-local, align 4
  %v1_12d1c = load i32, i32* @r5, align 4
  %v2_12d1c = add i32 %v1_12d1c, 8
  %v3_12d1c = inttoptr i32 %v2_12d1c to i32*
  store i32 %v2_12d18, i32* %v3_12d1c, align 4
  %v0_12d20 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d20 = load i32, i32* @r5, align 4
  %v2_12d20 = add i32 %v1_12d20, 12
  %v3_12d20 = inttoptr i32 %v2_12d20 to i32*
  store i32 %v0_12d20, i32* %v3_12d20, align 4
  %v0_12d24 = load i32, i32* @r4, align 4
  %v1_12d24 = add i32 %v0_12d24, 18
  %v2_12d24 = inttoptr i32 %v1_12d24 to i8*
  %v3_12d24 = load i8, i8* %v2_12d24, align 1
  %v4_12d24 = zext i8 %v3_12d24 to i32
  store i32 %v4_12d24, i32* %r3.global-to-local, align 4
  %v2_12d28 = load i32, i32* @r5, align 4
  %v3_12d28 = add i32 %v2_12d28, 18
  %v4_12d28 = inttoptr i32 %v3_12d28 to i8*
  store i8 %v3_12d24, i8* %v4_12d28, align 1
  %v0_12d2c = load i32, i32* @r4, align 4
  %v1_12d2c = add i32 %v0_12d2c, 16
  %v2_12d2c = inttoptr i32 %v1_12d2c to i8*
  %v3_12d2c = load i8, i8* %v2_12d2c, align 1
  %v4_12d2c = zext i8 %v3_12d2c to i32
  %v0_12d30 = load i32, i32* %r7.global-to-local, align 4
  %v1_12d30 = add i32 %v0_12d30, 1
  %v2_12d30 = inttoptr i32 %v1_12d30 to i8*
  %v3_12d30 = load i8, i8* %v2_12d30, align 1
  %v4_12d30 = zext i8 %v3_12d30 to i32
  store i32 %v4_12d30, i32* %r3.global-to-local, align 4
  %v4_12d34 = mul nuw nsw i32 %v4_12d30, 256
  %v5_12d34 = or i32 %v4_12d34, %v4_12d2c
  %v1_12d38 = add nsw i32 %v5_12d34, -19
  store i32 %v1_12d38, i32* @r2, align 4
  %v3_12d3c = call i32 @function_11740(i32 %v1_12d64, i32 %v1_12d68, i32 %v1_12d38)
  %v0_12d40 = load i32, i32* @r4, align 4
  %v1_12d40 = add i32 %v0_12d40, 16
  %v2_12d40 = inttoptr i32 %v1_12d40 to i8*
  %v3_12d40 = load i8, i8* %v2_12d40, align 1
  %v4_12d40 = zext i8 %v3_12d40 to i32
  store i32 %v4_12d40, i32* %r3.global-to-local, align 4
  %v0_12d44 = load i32, i32* %r7.global-to-local, align 4
  %v1_12d44 = add i32 %v0_12d44, 1
  %v2_12d44 = inttoptr i32 %v1_12d44 to i8*
  %v3_12d44 = load i8, i8* %v2_12d44, align 1
  %v4_12d44 = zext i8 %v3_12d44 to i32
  %v4_12d48 = mul nuw nsw i32 %v4_12d44, 256
  %v5_12d48 = or i32 %v4_12d48, %v4_12d40
  store i32 %v5_12d48, i32* %r3.global-to-local, align 4
  %v2_12d4c = add i32 %v5_12d48, %v0_12d40
  store i32 %v2_12d4c, i32* @r4, align 4
  %v0_12d50 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12d50, i32* @r5, align 4
  %v1_12d54.pre = load i32, i32* @r6, align 4
  %v0_12d6c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12d54

dec_label_pc_12d54:                               ; preds = %dec_label_pc_12c84, %dec_label_pc_12cf4
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_12c84 ], [ %v2_12d00, %dec_label_pc_12cf4 ]
  %v0_12d6c = phi i32 [ %v0_12c8c, %dec_label_pc_12c84 ], [ %v0_12d6c.pre, %dec_label_pc_12cf4 ]
  %v2_12cf4 = phi i32 [ %v0_12c8c, %dec_label_pc_12c84 ], [ %v0_12d50, %dec_label_pc_12cf4 ]
  %v0_12ca4 = phi i32 [ %v0_12c90, %dec_label_pc_12c84 ], [ %v2_12d4c, %dec_label_pc_12cf4 ]
  %v1_12d54 = phi i32 [ %v5_12c50, %dec_label_pc_12c84 ], [ %v1_12d54.pre, %dec_label_pc_12cf4 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_12c84 ], [ %v5_12d00, %dec_label_pc_12cf4 ]
  %v0_12d54 = load i32, i32* %sl.global-to-local, align 4
  %v2_12d54 = add i32 %v0_12d54, %v1_12d54
  store i32 %v2_12d54, i32* %r3.global-to-local, align 4
  %v3_12d58 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_12d58, i32* @r2, align 4
  %v3_12d5c = icmp ult i32 %v0_12ca4, %v2_12d54
  %v1_12d60 = add i32 %v0_12ca4, 16
  store i32 %v1_12d60, i32* %r7.global-to-local, align 4
  %v1_12d64 = add i32 %v2_12cf4, 19
  store i32 %v1_12d64, i32* @r0, align 4
  %v1_12d68 = add i32 %v0_12ca4, 19
  store i32 %v1_12d68, i32* @r1, align 4
  br i1 %v3_12d5c, label %dec_label_pc_12ca0, label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d54, %dec_label_pc_12cc4
  %v1_12d74 = phi i32 [ %v0_12cd8, %dec_label_pc_12cc4 ], [ %v2_12cf4, %dec_label_pc_12d54 ]
  %v0_12d74 = phi i32 [ %v1_12cd8, %dec_label_pc_12cc4 ], [ %v0_12d6c, %dec_label_pc_12d54 ]
  %v2_12d74 = sub i32 %v1_12d74, %v0_12d74
  store i32 %v2_12d74, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d78

dec_label_pc_12d78:                               ; preds = %dec_label_pc_12ce0, %dec_label_pc_12c7c, %dec_label_pc_12d74
  %v0_12d78 = phi i32 [ %v0_12d78.pre, %dec_label_pc_12ce0 ], [ %v0_12c7c, %dec_label_pc_12c7c ], [ %v2_12d74, %dec_label_pc_12d74 ]
  store i32 %v3_12c24, i32* @r4, align 4
  store i32 %v9_12c24, i32* %r6.global-to-local, align 4
  ret i32 %v0_12d78

; uselistorder directives
  uselistorder i32 %v1_12d68, { 1, 0 }
  uselistorder i32 %v1_12d64, { 1, 0 }
  uselistorder i32 %v1_12d60, { 1, 0 }
  uselistorder i32 %v3_12d58, { 1, 0 }
  uselistorder i32 %v0_12ca4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_12cf4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_12cfc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12c8c, { 1, 0, 2 }
  uselistorder i32 %v5_12c50, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_11740, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 3, 4, 24, 5, 25, 16, 8, 9, 10, 17, 0, 18, 11, 12, 13, 14, 15, 19, 1, 20, 2, 6, 21, 22, 23, 7 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 1, 135, 136, 137, 257, 258, 363, 364, 365, 366, 367, 368, 369, 371, 370, 386, 387, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 19, 20, 21, 50, 92, 93, 94, 95, 96, 97, 41, 22, 23, 98, 46, 99, 100, 101, 102, 103, 104, 24, 25, 26, 27, 28, 42, 47, 10, 11, 12, 13, 14, 15, 16, 17, 18, 51, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 52, 53, 54, 55, 48, 49, 105, 106, 107, 108, 109, 56, 57, 110, 111, 7, 112, 113, 114, 115, 58, 116, 117, 118, 119, 120, 388, 389, 390, 261, 262, 263, 264, 0, 121, 122, 123, 124, 125, 126, 2, 127, 128, 129, 130, 131, 132, 133, 134, 156, 157, 158, 159, 8, 160, 161, 162, 3, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 265, 4, 266, 5, 267, 6, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 391, 392, 393, 394, 395, 396, 397, 398, 399, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 247, 250, 248, 249, 251, 252, 9, 253, 254, 255, 256, 259, 260 }
  uselistorder label %dec_label_pc_12d78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d54, { 1, 0 }
}

define i32 @function_12d84() local_unnamed_addr {
dec_label_pc_12d84:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12d84 = load i32, i32* @r4, align 4
  store i32 %v3_12d84, i32* %stack_var_-8, align 4
  %v0_12d8c = load i32, i32* @r0, align 4
  store i32 %v0_12d8c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12d8c, -4095
  br i1 %tmp, label %dec_label_pc_12da8, label %dec_label_pc_12d98

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12d84
  %v0_12d98 = call i32 @function_116f4()
  %v0_12d9c = load i32, i32* %r4.global-to-local, align 4
  %v1_12d9c = sub i32 0, %v0_12d9c
  %v2_12da0 = inttoptr i32 %v0_12d98 to i32*
  store i32 %v1_12d9c, i32* %v2_12da0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12dac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12da8

dec_label_pc_12da8:                               ; preds = %dec_label_pc_12d84, %dec_label_pc_12d98
  %v2_12dac = phi i32 [ %v3_12d84, %dec_label_pc_12d84 ], [ %v2_12dac.pre, %dec_label_pc_12d98 ]
  %v0_12da8 = phi i32 [ %v0_12d8c, %dec_label_pc_12d84 ], [ -1, %dec_label_pc_12d98 ]
  store i32 %v2_12dac, i32* @r4, align 4
  ret i32 %v0_12da8

; uselistorder directives
  uselistorder i32 %v0_12d8c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12da8, { 1, 0 }
}

define i32 @function_12db0() local_unnamed_addr {
dec_label_pc_12db0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12db0 = load i32, i32* @r4, align 4
  store i32 %v3_12db0, i32* %stack_var_-8, align 4
  %v0_12db8 = load i32, i32* @r0, align 4
  store i32 %v0_12db8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12db8, -4095
  br i1 %tmp, label %dec_label_pc_12dd4, label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12db0
  %v0_12dc4 = call i32 @function_116f4()
  %v0_12dc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12dc8 = sub i32 0, %v0_12dc8
  %v2_12dcc = inttoptr i32 %v0_12dc4 to i32*
  store i32 %v1_12dc8, i32* %v2_12dcc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12dd8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12dd4

dec_label_pc_12dd4:                               ; preds = %dec_label_pc_12db0, %dec_label_pc_12dc4
  %v2_12dd8 = phi i32 [ %v3_12db0, %dec_label_pc_12db0 ], [ %v2_12dd8.pre, %dec_label_pc_12dc4 ]
  %v0_12dd4 = phi i32 [ %v0_12db8, %dec_label_pc_12db0 ], [ -1, %dec_label_pc_12dc4 ]
  store i32 %v2_12dd8, i32* @r4, align 4
  ret i32 %v0_12dd4

; uselistorder directives
  uselistorder i32 %v0_12db8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12dd4, { 1, 0 }
}

define i32 @function_12ddc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ddc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ddc = load i32, i32* @r4, align 4
  store i32 %v3_12ddc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12e00, label %dec_label_pc_12df0

dec_label_pc_12df0:                               ; preds = %dec_label_pc_12ddc
  %v0_12df0 = call i32 @function_116f4()
  %v0_12df4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12df4 = sub i32 0, %v0_12df4
  %v2_12df8 = inttoptr i32 %v0_12df0 to i32*
  store i32 %v1_12df4, i32* %v2_12df8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12e04.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12e00

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12ddc, %dec_label_pc_12df0
  %v2_12e04 = phi i32 [ %v3_12ddc, %dec_label_pc_12ddc ], [ %v2_12e04.pre, %dec_label_pc_12df0 ]
  %v0_12e00 = phi i32 [ %arg1, %dec_label_pc_12ddc ], [ -1, %dec_label_pc_12df0 ]
  store i32 %v2_12e04, i32* %r4.global-to-local, align 4
  ret i32 %v0_12e00

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12e00, { 1, 0 }
}

define i32 @function_12e08() local_unnamed_addr {
dec_label_pc_12e08:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12e08 = load i32, i32* @r4, align 4
  store i32 %v3_12e08, i32* %stack_var_-8, align 4
  %v0_12e10 = load i32, i32* @r0, align 4
  store i32 %v0_12e10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12e10, -4095
  br i1 %tmp, label %dec_label_pc_12e2c, label %dec_label_pc_12e1c

dec_label_pc_12e1c:                               ; preds = %dec_label_pc_12e08
  %v0_12e1c = call i32 @function_116f4()
  %v0_12e20 = load i32, i32* %r4.global-to-local, align 4
  %v1_12e20 = sub i32 0, %v0_12e20
  %v2_12e24 = inttoptr i32 %v0_12e1c to i32*
  store i32 %v1_12e20, i32* %v2_12e24, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12e30.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12e2c

dec_label_pc_12e2c:                               ; preds = %dec_label_pc_12e08, %dec_label_pc_12e1c
  %v2_12e30 = phi i32 [ %v3_12e08, %dec_label_pc_12e08 ], [ %v2_12e30.pre, %dec_label_pc_12e1c ]
  %v0_12e2c = phi i32 [ %v0_12e10, %dec_label_pc_12e08 ], [ -1, %dec_label_pc_12e1c ]
  store i32 %v2_12e30, i32* %r4.global-to-local, align 4
  ret i32 %v0_12e2c

; uselistorder directives
  uselistorder i32 %v0_12e10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12e2c, { 1, 0 }
}

define i32 @function_12e34(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12e34:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12e78, label %dec_label_pc_12e64

dec_label_pc_12e64:                               ; preds = %dec_label_pc_12e34
  %v0_12e64 = call i32 @function_116f4()
  %v0_12e68 = load i32, i32* %r4.global-to-local, align 4
  %v1_12e68 = sub i32 0, %v0_12e68
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12e70 = inttoptr i32 %v0_12e64 to i32*
  store i32 %v1_12e68, i32* %v2_12e70, align 4
  %v0_12e80.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e80

dec_label_pc_12e78:                               ; preds = %dec_label_pc_12e34
  %v2_12e78 = icmp eq i32 %arg1, 0
  br i1 %v2_12e78, label %dec_label_pc_12e8c, label %dec_label_pc_12e80

dec_label_pc_12e80:                               ; preds = %dec_label_pc_12e78, %dec_label_pc_12e64
  %v0_12e80 = phi i32 [ %arg1, %dec_label_pc_12e78 ], [ %v0_12e80.pre, %dec_label_pc_12e64 ]
  br label %dec_label_pc_12e90

dec_label_pc_12e8c:                               ; preds = %dec_label_pc_12e78
  br label %dec_label_pc_12e90

dec_label_pc_12e90:                               ; preds = %dec_label_pc_12e80, %dec_label_pc_12e8c
  %v14_12e94 = phi i32 [ %v0_12e80, %dec_label_pc_12e80 ], [ %tmp9, %dec_label_pc_12e8c ]
  ret i32 %v14_12e94

; uselistorder directives
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_12e90, { 1, 0 }
}

define i32 @function_12e98(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e98:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_12e98 = load i32, i32* @r4, align 4
  store i32 %v3_12e98, i32* %stack_var_-8, align 4
  %v6_12e9c = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_12e9c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_12e9c, -4095
  br i1 %tmp6, label %dec_label_pc_12ebc, label %dec_label_pc_12eac

dec_label_pc_12eac:                               ; preds = %dec_label_pc_12e98
  %v0_12eac = call i32 @function_116f4()
  %v0_12eb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12eb0 = sub i32 0, %v0_12eb0
  %v2_12eb4 = inttoptr i32 %v0_12eac to i32*
  store i32 %v1_12eb0, i32* %v2_12eb4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ebc

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12e98, %dec_label_pc_12eac
  %v0_12ebc = phi i32 [ %v6_12e9c, %dec_label_pc_12e98 ], [ -1, %dec_label_pc_12eac ]
  %v2_12ec0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12ec0, i32* %r4.global-to-local, align 4
  ret i32 %v0_12ebc

; uselistorder directives
  uselistorder i32 %v6_12e9c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ebc, { 1, 0 }
}

define i32 @function_12ec4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ec4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12ec4 = load i32, i32* @r4, align 4
  store i32 %v3_12ec4, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1c22c.465 to i32), i32* %r4.global-to-local, align 4
  %v2_12ecc = load i32, i32* @global_var_1c22c.465, align 4
  %v2_12ed0 = icmp eq i32 %v2_12ecc, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_12ed0, label %dec_label_pc_12ee0, label %dec_label_pc_12eec

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_12ec4
  %v2_12ee0 = call i32 @function_138e8(i32* null)
  %v1_12ee4 = icmp slt i32 %v2_12ee0, 0
  br i1 %v1_12ee4, label %dec_label_pc_12f0c, label %dec_label_pc_12eecthread-pre-split

dec_label_pc_12eecthread-pre-split:               ; preds = %dec_label_pc_12ee0
  %v0_12ef0.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_12eec.pre = load i32, i32* @global_var_1c22c.465, align 4
  br label %dec_label_pc_12eec

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12eecthread-pre-split, %dec_label_pc_12ec4
  %v2_12eec = phi i32 [ %v2_12eec.pre, %dec_label_pc_12eecthread-pre-split ], [ %v2_12ecc, %dec_label_pc_12ec4 ]
  %v1_12ef8 = phi i32 [ %v0_12ef0.pr, %dec_label_pc_12eecthread-pre-split ], [ %arg1, %dec_label_pc_12ec4 ]
  %v2_12ef0 = icmp eq i32 %v1_12ef8, 0
  store i32 %v2_12eec, i32* %r4.global-to-local, align 4
  br i1 %v2_12ef0, label %dec_label_pc_12f10, label %dec_label_pc_12f00

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12eec
  %v2_12ef8 = add i32 %v1_12ef8, %v2_12eec
  %v1_12f00 = inttoptr i32 %v2_12ef8 to i32*
  %v2_12f00 = call i32 @function_138e8(i32* %v1_12f00)
  %v1_12f04 = icmp slt i32 %v2_12f00, 0
  br i1 %v1_12f04, label %dec_label_pc_12f0c, label %dec_label_pc_12f00.dec_label_pc_12f10_crit_edge

dec_label_pc_12f00.dec_label_pc_12f10_crit_edge:  ; preds = %dec_label_pc_12f00
  %v0_12f10.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f10

dec_label_pc_12f0c:                               ; preds = %dec_label_pc_12f00, %dec_label_pc_12ee0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f10

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12f00.dec_label_pc_12f10_crit_edge, %dec_label_pc_12eec, %dec_label_pc_12f0c
  %v0_12f10 = phi i32 [ %v0_12f10.pre, %dec_label_pc_12f00.dec_label_pc_12f10_crit_edge ], [ %v2_12eec, %dec_label_pc_12eec ], [ -1, %dec_label_pc_12f0c ]
  %v2_12f14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12f14, i32* @r4, align 4
  ret i32 %v0_12f10

; uselistorder directives
  uselistorder i32 %v2_12eec, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 23, 24, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 2, 19, 3, 20, 21, 22 }
  uselistorder label %dec_label_pc_12f10, { 2, 0, 1 }
}

define i32 @function_12f1c(%tms* %arg1) local_unnamed_addr {
dec_label_pc_12f1c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12f1c = load i32, i32* @r4, align 4
  store i32 %v3_12f1c, i32* %stack_var_-8, align 4
  %v3_12f20 = call i32 @times(%tms* %arg1)
  store i32 %v3_12f20, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12f20, -4095
  br i1 %tmp, label %dec_label_pc_12f40, label %dec_label_pc_12f30

dec_label_pc_12f30:                               ; preds = %dec_label_pc_12f1c
  %v0_12f30 = call i32 @function_116f4()
  %v0_12f34 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f34 = sub i32 0, %v0_12f34
  %v2_12f38 = inttoptr i32 %v0_12f30 to i32*
  store i32 %v1_12f34, i32* %v2_12f38, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f40

dec_label_pc_12f40:                               ; preds = %dec_label_pc_12f1c, %dec_label_pc_12f30
  %v0_12f40 = phi i32 [ %v3_12f20, %dec_label_pc_12f1c ], [ -1, %dec_label_pc_12f30 ]
  %v2_12f44 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12f44, i32* %r4.global-to-local, align 4
  ret i32 %v0_12f40

; uselistorder directives
  uselistorder i32 %v3_12f20, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f40, { 1, 0 }
}

define i32 @function_12f48(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12f48:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_12f64 = inttoptr i32 %arg2 to i8*
  %v3_12f64 = call i32 @function_11760(i8* %v2_12f64, i32 0)
  %v1_12f68 = add i32 %tmp, 1
  %v2_12f68 = inttoptr i32 %v1_12f68 to i8*
  %v3_12f68 = load i8, i8* %v2_12f68, align 1
  %v4_12f68 = zext i8 %v3_12f68 to i32
  %v1_12f6c = add i32 %tmp, 5
  %v2_12f6c = inttoptr i32 %v1_12f6c to i8*
  %v3_12f6c = load i8, i8* %v2_12f6c, align 1
  %v4_12f6c = zext i8 %v3_12f6c to i32
  %v2_12f70 = load i8, i8* %arg1, align 1
  %v3_12f70 = zext i8 %v2_12f70 to i32
  %v1_12f74 = add i32 %tmp, 4
  %v2_12f74 = inttoptr i32 %v1_12f74 to i8*
  %v3_12f74 = load i8, i8* %v2_12f74, align 1
  %v4_12f74 = zext i8 %v3_12f74 to i32
  %v1_12f78 = add i32 %tmp, 2
  %v2_12f78 = inttoptr i32 %v1_12f78 to i8*
  %v3_12f78 = load i8, i8* %v2_12f78, align 1
  %v4_12f78 = zext i8 %v3_12f78 to i32
  %v1_12f7c = add i32 %tmp, 6
  %v2_12f7c = inttoptr i32 %v1_12f7c to i8*
  %v3_12f7c = load i8, i8* %v2_12f7c, align 1
  %v4_12f7c = zext i8 %v3_12f7c to i32
  %v1_12f80 = add i32 %tmp, 3
  %v2_12f80 = inttoptr i32 %v1_12f80 to i8*
  %v3_12f80 = load i8, i8* %v2_12f80, align 1
  %v4_12f80 = zext i8 %v3_12f80 to i32
  %v4_12f84 = mul nuw nsw i32 %v4_12f68, 256
  %v5_12f84 = or i32 %v3_12f70, %v4_12f84
  %v4_12f88 = mul nuw nsw i32 %v4_12f6c, 256
  %v5_12f88 = or i32 %v4_12f74, %v4_12f88
  %v1_12f8c = add i32 %tmp, 7
  %v2_12f8c = inttoptr i32 %v1_12f8c to i8*
  %v3_12f8c = load i8, i8* %v2_12f8c, align 1
  %v4_12f8c = zext i8 %v3_12f8c to i32
  %v4_12f90 = mul nuw nsw i32 %v4_12f78, 65536
  %v5_12f90 = or i32 %v4_12f90, %v5_12f84
  %v4_12f94 = mul nuw nsw i32 %v4_12f7c, 65536
  %v5_12f94 = or i32 %v4_12f94, %v5_12f88
  %v4_12f98 = mul nuw i32 %v4_12f80, 16777216
  %v5_12f98 = or i32 %v4_12f98, %v5_12f90
  %v4_12f9c = mul nuw i32 %v4_12f8c, 16777216
  %v5_12f9c = or i32 %v4_12f9c, %v5_12f94
  store i32 %v5_12f9c, i32* %r3.global-to-local, align 4
  %v0_12fa0 = load i32, i32* %r7.global-to-local, align 4
  %v1_12fa0 = inttoptr i32 %v0_12fa0 to i32*
  store i32 %v5_12f98, i32* %v1_12fa0, align 4
  %v3_12fa0 = add i32 %v0_12fa0, 4
  %v4_12fa0 = inttoptr i32 %v3_12fa0 to i32*
  %v5_12fa0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_12fa0, i32* %v4_12fa0, align 4
  %v0_12fa4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fa4 = add i32 %v0_12fa4, 89
  %v2_12fa4 = inttoptr i32 %v1_12fa4 to i8*
  %v3_12fa4 = load i8, i8* %v2_12fa4, align 1
  %v4_12fa4 = zext i8 %v3_12fa4 to i32
  %v1_12fa8 = add i32 %v0_12fa4, 93
  %v2_12fa8 = inttoptr i32 %v1_12fa8 to i8*
  %v3_12fa8 = load i8, i8* %v2_12fa8, align 1
  %v4_12fa8 = zext i8 %v3_12fa8 to i32
  %v1_12fac = add i32 %v0_12fa4, 88
  %v2_12fac = inttoptr i32 %v1_12fac to i8*
  %v3_12fac = load i8, i8* %v2_12fac, align 1
  %v4_12fac = zext i8 %v3_12fac to i32
  %v1_12fb0 = add i32 %v0_12fa4, 92
  %v2_12fb0 = inttoptr i32 %v1_12fb0 to i8*
  %v3_12fb0 = load i8, i8* %v2_12fb0, align 1
  %v4_12fb0 = zext i8 %v3_12fb0 to i32
  store i32 %v4_12fb0, i32* %r3.global-to-local, align 4
  %v1_12fb4 = add i32 %v0_12fa4, 94
  %v2_12fb4 = inttoptr i32 %v1_12fb4 to i8*
  %v3_12fb4 = load i8, i8* %v2_12fb4, align 1
  %v4_12fb4 = zext i8 %v3_12fb4 to i32
  %v1_12fb8 = add i32 %v0_12fa4, 90
  %v2_12fb8 = inttoptr i32 %v1_12fb8 to i8*
  %v3_12fb8 = load i8, i8* %v2_12fb8, align 1
  %v4_12fb8 = zext i8 %v3_12fb8 to i32
  %v1_12fbc = add i32 %v0_12fa4, 91
  %v2_12fbc = inttoptr i32 %v1_12fbc to i8*
  %v3_12fbc = load i8, i8* %v2_12fbc, align 1
  %v4_12fbc = zext i8 %v3_12fbc to i32
  %v4_12fc0 = mul nuw nsw i32 %v4_12fa4, 256
  %v5_12fc0 = or i32 %v4_12fac, %v4_12fc0
  %v4_12fc4 = mul nuw nsw i32 %v4_12fa8, 256
  %v5_12fc4 = or i32 %v4_12fb0, %v4_12fc4
  store i32 %v5_12fc4, i32* %r3.global-to-local, align 4
  %v1_12fc8 = add i32 %v0_12fa4, 95
  %v2_12fc8 = inttoptr i32 %v1_12fc8 to i8*
  %v3_12fc8 = load i8, i8* %v2_12fc8, align 1
  %v4_12fc8 = zext i8 %v3_12fc8 to i32
  %v4_12fcc = mul nuw nsw i32 %v4_12fb4, 65536
  %v5_12fcc = or i32 %v4_12fcc, %v5_12fc4
  store i32 %v5_12fcc, i32* %r3.global-to-local, align 4
  %v4_12fd0 = mul nuw nsw i32 %v4_12fb8, 65536
  %v5_12fd0 = or i32 %v4_12fd0, %v5_12fc0
  %v4_12fd4 = mul nuw i32 %v4_12fbc, 16777216
  %v5_12fd4 = or i32 %v4_12fd4, %v5_12fd0
  %v4_12fd8 = mul nuw i32 %v4_12fc8, 16777216
  %v5_12fd8 = or i32 %v4_12fd8, %v5_12fcc
  store i32 %v5_12fd8, i32* %r6.global-to-local, align 4
  %v1_12fdc = load i32, i32* %r7.global-to-local, align 4
  %v2_12fdc = add i32 %v1_12fdc, 88
  %v3_12fdc = inttoptr i32 %v2_12fdc to i32*
  store i32 %v5_12fd4, i32* %v3_12fdc, align 4
  %v0_12fe0 = load i32, i32* %r6.global-to-local, align 4
  %v1_12fe0 = load i32, i32* %r7.global-to-local, align 4
  %v2_12fe0 = add i32 %v1_12fe0, 92
  %v3_12fe0 = inttoptr i32 %v2_12fe0 to i32*
  store i32 %v0_12fe0, i32* %v3_12fe0, align 4
  %v0_12fe4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fe4 = add i32 %v0_12fe4, 13
  %v2_12fe4 = inttoptr i32 %v1_12fe4 to i8*
  %v3_12fe4 = load i8, i8* %v2_12fe4, align 1
  %v4_12fe4 = zext i8 %v3_12fe4 to i32
  %v1_12fe8 = add i32 %v0_12fe4, 12
  %v2_12fe8 = inttoptr i32 %v1_12fe8 to i8*
  %v3_12fe8 = load i8, i8* %v2_12fe8, align 1
  %v4_12fe8 = zext i8 %v3_12fe8 to i32
  store i32 %v4_12fe8, i32* %r3.global-to-local, align 4
  %v1_12fec = add i32 %v0_12fe4, 14
  %v2_12fec = inttoptr i32 %v1_12fec to i8*
  %v3_12fec = load i8, i8* %v2_12fec, align 1
  %v4_12fec = zext i8 %v3_12fec to i32
  %v4_12ff0 = mul nuw nsw i32 %v4_12fe4, 256
  %v5_12ff0 = or i32 %v4_12fe8, %v4_12ff0
  store i32 %v5_12ff0, i32* %r3.global-to-local, align 4
  %v1_12ff4 = add i32 %v0_12fe4, 15
  %v2_12ff4 = inttoptr i32 %v1_12ff4 to i8*
  %v3_12ff4 = load i8, i8* %v2_12ff4, align 1
  %v4_12ff4 = zext i8 %v3_12ff4 to i32
  %v4_12ff8 = mul nuw nsw i32 %v4_12fec, 65536
  %v5_12ff8 = or i32 %v4_12ff8, %v5_12ff0
  %v4_12ffc = mul nuw i32 %v4_12ff4, 16777216
  %v5_12ffc = or i32 %v5_12ff8, %v4_12ffc
  store i32 %v5_12ffc, i32* %r3.global-to-local, align 4
  %v1_13000 = load i32, i32* %r7.global-to-local, align 4
  %v2_13000 = add i32 %v1_13000, 12
  %v3_13000 = inttoptr i32 %v2_13000 to i32*
  store i32 %v5_12ffc, i32* %v3_13000, align 4
  %v0_13004 = load i32, i32* %r4.global-to-local, align 4
  %v1_13004 = add i32 %v0_13004, 17
  %v2_13004 = inttoptr i32 %v1_13004 to i8*
  %v3_13004 = load i8, i8* %v2_13004, align 1
  %v4_13004 = zext i8 %v3_13004 to i32
  %v1_13008 = add i32 %v0_13004, 16
  %v2_13008 = inttoptr i32 %v1_13008 to i8*
  %v3_13008 = load i8, i8* %v2_13008, align 1
  %v4_13008 = zext i8 %v3_13008 to i32
  store i32 %v4_13008, i32* %r3.global-to-local, align 4
  %v1_1300c = add i32 %v0_13004, 18
  %v2_1300c = inttoptr i32 %v1_1300c to i8*
  %v3_1300c = load i8, i8* %v2_1300c, align 1
  %v4_1300c = zext i8 %v3_1300c to i32
  %v4_13010 = mul nuw nsw i32 %v4_13004, 256
  %v5_13010 = or i32 %v4_13008, %v4_13010
  store i32 %v5_13010, i32* %r3.global-to-local, align 4
  %v1_13014 = add i32 %v0_13004, 19
  %v2_13014 = inttoptr i32 %v1_13014 to i8*
  %v3_13014 = load i8, i8* %v2_13014, align 1
  %v4_13014 = zext i8 %v3_13014 to i32
  %v4_13018 = mul nuw nsw i32 %v4_1300c, 65536
  %v5_13018 = or i32 %v4_13018, %v5_13010
  %v4_1301c = mul nuw i32 %v4_13014, 16777216
  %v5_1301c = or i32 %v5_13018, %v4_1301c
  store i32 %v5_1301c, i32* %r3.global-to-local, align 4
  %v1_13020 = load i32, i32* %r7.global-to-local, align 4
  %v2_13020 = add i32 %v1_13020, 16
  %v3_13020 = inttoptr i32 %v2_13020 to i32*
  store i32 %v5_1301c, i32* %v3_13020, align 4
  %v0_13024 = load i32, i32* %r4.global-to-local, align 4
  %v1_13024 = add i32 %v0_13024, 21
  %v2_13024 = inttoptr i32 %v1_13024 to i8*
  %v3_13024 = load i8, i8* %v2_13024, align 1
  %v4_13024 = zext i8 %v3_13024 to i32
  %v1_13028 = add i32 %v0_13024, 20
  %v2_13028 = inttoptr i32 %v1_13028 to i8*
  %v3_13028 = load i8, i8* %v2_13028, align 1
  %v4_13028 = zext i8 %v3_13028 to i32
  store i32 %v4_13028, i32* %r3.global-to-local, align 4
  %v1_1302c = add i32 %v0_13024, 22
  %v2_1302c = inttoptr i32 %v1_1302c to i8*
  %v3_1302c = load i8, i8* %v2_1302c, align 1
  %v4_1302c = zext i8 %v3_1302c to i32
  %v4_13030 = mul nuw nsw i32 %v4_13024, 256
  %v5_13030 = or i32 %v4_13028, %v4_13030
  store i32 %v5_13030, i32* %r3.global-to-local, align 4
  %v1_13034 = add i32 %v0_13024, 23
  %v2_13034 = inttoptr i32 %v1_13034 to i8*
  %v3_13034 = load i8, i8* %v2_13034, align 1
  %v4_13034 = zext i8 %v3_13034 to i32
  %v4_13038 = mul nuw nsw i32 %v4_1302c, 65536
  %v5_13038 = or i32 %v4_13038, %v5_13030
  %v4_1303c = mul nuw i32 %v4_13034, 16777216
  %v5_1303c = or i32 %v5_13038, %v4_1303c
  store i32 %v5_1303c, i32* %r3.global-to-local, align 4
  %v1_13040 = load i32, i32* %r7.global-to-local, align 4
  %v2_13040 = add i32 %v1_13040, 20
  %v3_13040 = inttoptr i32 %v2_13040 to i32*
  store i32 %v5_1303c, i32* %v3_13040, align 4
  %v0_13044 = load i32, i32* %r4.global-to-local, align 4
  %v1_13044 = add i32 %v0_13044, 25
  %v2_13044 = inttoptr i32 %v1_13044 to i8*
  %v3_13044 = load i8, i8* %v2_13044, align 1
  %v4_13044 = zext i8 %v3_13044 to i32
  %v1_13048 = add i32 %v0_13044, 24
  %v2_13048 = inttoptr i32 %v1_13048 to i8*
  %v3_13048 = load i8, i8* %v2_13048, align 1
  %v4_13048 = zext i8 %v3_13048 to i32
  store i32 %v4_13048, i32* %r3.global-to-local, align 4
  %v1_1304c = add i32 %v0_13044, 26
  %v2_1304c = inttoptr i32 %v1_1304c to i8*
  %v3_1304c = load i8, i8* %v2_1304c, align 1
  %v4_1304c = zext i8 %v3_1304c to i32
  %v4_13050 = mul nuw nsw i32 %v4_13044, 256
  %v5_13050 = or i32 %v4_13048, %v4_13050
  store i32 %v5_13050, i32* %r3.global-to-local, align 4
  %v1_13054 = add i32 %v0_13044, 27
  %v2_13054 = inttoptr i32 %v1_13054 to i8*
  %v3_13054 = load i8, i8* %v2_13054, align 1
  %v4_13054 = zext i8 %v3_13054 to i32
  %v4_13058 = mul nuw nsw i32 %v4_1304c, 65536
  %v5_13058 = or i32 %v4_13058, %v5_13050
  %v4_1305c = mul nuw i32 %v4_13054, 16777216
  %v5_1305c = or i32 %v5_13058, %v4_1305c
  store i32 %v5_1305c, i32* %r3.global-to-local, align 4
  %v1_13060 = load i32, i32* %r7.global-to-local, align 4
  %v2_13060 = add i32 %v1_13060, 24
  %v3_13060 = inttoptr i32 %v2_13060 to i32*
  store i32 %v5_1305c, i32* %v3_13060, align 4
  %v0_13064 = load i32, i32* %r4.global-to-local, align 4
  %v1_13064 = add i32 %v0_13064, 29
  %v2_13064 = inttoptr i32 %v1_13064 to i8*
  %v3_13064 = load i8, i8* %v2_13064, align 1
  %v4_13064 = zext i8 %v3_13064 to i32
  %v1_13068 = add i32 %v0_13064, 28
  %v2_13068 = inttoptr i32 %v1_13068 to i8*
  %v3_13068 = load i8, i8* %v2_13068, align 1
  %v4_13068 = zext i8 %v3_13068 to i32
  store i32 %v4_13068, i32* %r3.global-to-local, align 4
  %v1_1306c = add i32 %v0_13064, 30
  %v2_1306c = inttoptr i32 %v1_1306c to i8*
  %v3_1306c = load i8, i8* %v2_1306c, align 1
  %v4_1306c = zext i8 %v3_1306c to i32
  %v4_13070 = mul nuw nsw i32 %v4_13064, 256
  %v5_13070 = or i32 %v4_13068, %v4_13070
  store i32 %v5_13070, i32* %r3.global-to-local, align 4
  %v1_13074 = add i32 %v0_13064, 31
  %v2_13074 = inttoptr i32 %v1_13074 to i8*
  %v3_13074 = load i8, i8* %v2_13074, align 1
  %v4_13074 = zext i8 %v3_13074 to i32
  %v4_13078 = mul nuw nsw i32 %v4_1306c, 65536
  %v5_13078 = or i32 %v4_13078, %v5_13070
  %v4_1307c = mul nuw i32 %v4_13074, 16777216
  %v5_1307c = or i32 %v5_13078, %v4_1307c
  store i32 %v5_1307c, i32* %r3.global-to-local, align 4
  %v1_13080 = load i32, i32* %r7.global-to-local, align 4
  %v2_13080 = add i32 %v1_13080, 28
  %v3_13080 = inttoptr i32 %v2_13080 to i32*
  store i32 %v5_1307c, i32* %v3_13080, align 4
  %v0_13084 = load i32, i32* %r4.global-to-local, align 4
  %v1_13084 = add i32 %v0_13084, 33
  %v2_13084 = inttoptr i32 %v1_13084 to i8*
  %v3_13084 = load i8, i8* %v2_13084, align 1
  %v4_13084 = zext i8 %v3_13084 to i32
  %v1_13088 = add i32 %v0_13084, 37
  %v2_13088 = inttoptr i32 %v1_13088 to i8*
  %v3_13088 = load i8, i8* %v2_13088, align 1
  %v4_13088 = zext i8 %v3_13088 to i32
  %v1_1308c = add i32 %v0_13084, 32
  %v2_1308c = inttoptr i32 %v1_1308c to i8*
  %v3_1308c = load i8, i8* %v2_1308c, align 1
  %v4_1308c = zext i8 %v3_1308c to i32
  %v1_13090 = add i32 %v0_13084, 36
  %v2_13090 = inttoptr i32 %v1_13090 to i8*
  %v3_13090 = load i8, i8* %v2_13090, align 1
  %v4_13090 = zext i8 %v3_13090 to i32
  store i32 %v4_13090, i32* %r3.global-to-local, align 4
  %v1_13094 = add i32 %v0_13084, 34
  %v2_13094 = inttoptr i32 %v1_13094 to i8*
  %v3_13094 = load i8, i8* %v2_13094, align 1
  %v4_13094 = zext i8 %v3_13094 to i32
  %v1_13098 = add i32 %v0_13084, 38
  %v2_13098 = inttoptr i32 %v1_13098 to i8*
  %v3_13098 = load i8, i8* %v2_13098, align 1
  %v4_13098 = zext i8 %v3_13098 to i32
  %v1_1309c = add i32 %v0_13084, 35
  %v2_1309c = inttoptr i32 %v1_1309c to i8*
  %v3_1309c = load i8, i8* %v2_1309c, align 1
  %v4_1309c = zext i8 %v3_1309c to i32
  %v4_130a0 = mul nuw nsw i32 %v4_13084, 256
  %v5_130a0 = or i32 %v4_1308c, %v4_130a0
  %v4_130a4 = mul nuw nsw i32 %v4_13088, 256
  %v5_130a4 = or i32 %v4_13090, %v4_130a4
  store i32 %v5_130a4, i32* %r3.global-to-local, align 4
  %v1_130a8 = add i32 %v0_13084, 39
  %v2_130a8 = inttoptr i32 %v1_130a8 to i8*
  %v3_130a8 = load i8, i8* %v2_130a8, align 1
  %v4_130a8 = zext i8 %v3_130a8 to i32
  %v4_130ac = mul nuw nsw i32 %v4_13094, 65536
  %v5_130ac = or i32 %v4_130ac, %v5_130a0
  %v4_130b0 = mul nuw nsw i32 %v4_13098, 65536
  %v5_130b0 = or i32 %v4_130b0, %v5_130a4
  %v4_130b4 = mul nuw i32 %v4_1309c, 16777216
  %v5_130b4 = or i32 %v5_130ac, %v4_130b4
  %v4_130b8 = mul nuw i32 %v4_130a8, 16777216
  %v5_130b8 = or i32 %v5_130b0, %v4_130b8
  store i32 %v5_130b8, i32* %r3.global-to-local, align 4
  %v1_130cc = load i32, i32* %r7.global-to-local, align 4
  %v2_130cc = add i32 %v1_130cc, 32
  %v3_130cc = inttoptr i32 %v2_130cc to i32*
  store i32 %v5_130b4, i32* %v3_130cc, align 4
  %v0_130d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_130d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_130d0 = add i32 %v1_130d0, 36
  %v3_130d0 = inttoptr i32 %v2_130d0 to i32*
  store i32 %v0_130d0, i32* %v3_130d0, align 4
  %v0_130d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_130d4 = add i32 %v0_130d4, 45
  %v2_130d4 = inttoptr i32 %v1_130d4 to i8*
  %v3_130d4 = load i8, i8* %v2_130d4, align 1
  %v4_130d4 = zext i8 %v3_130d4 to i32
  %v1_130d8 = add i32 %v0_130d4, 49
  %v2_130d8 = inttoptr i32 %v1_130d8 to i8*
  %v3_130d8 = load i8, i8* %v2_130d8, align 1
  %v4_130d8 = zext i8 %v3_130d8 to i32
  %v1_130dc = add i32 %v0_130d4, 44
  %v2_130dc = inttoptr i32 %v1_130dc to i8*
  %v3_130dc = load i8, i8* %v2_130dc, align 1
  %v4_130dc = zext i8 %v3_130dc to i32
  %v1_130e0 = add i32 %v0_130d4, 48
  %v2_130e0 = inttoptr i32 %v1_130e0 to i8*
  %v3_130e0 = load i8, i8* %v2_130e0, align 1
  %v4_130e0 = zext i8 %v3_130e0 to i32
  store i32 %v4_130e0, i32* %r3.global-to-local, align 4
  %v1_130e4 = add i32 %v0_130d4, 46
  %v2_130e4 = inttoptr i32 %v1_130e4 to i8*
  %v3_130e4 = load i8, i8* %v2_130e4, align 1
  %v4_130e4 = zext i8 %v3_130e4 to i32
  %v1_130e8 = add i32 %v0_130d4, 50
  %v2_130e8 = inttoptr i32 %v1_130e8 to i8*
  %v3_130e8 = load i8, i8* %v2_130e8, align 1
  %v4_130e8 = zext i8 %v3_130e8 to i32
  %v1_130ec = add i32 %v0_130d4, 47
  %v2_130ec = inttoptr i32 %v1_130ec to i8*
  %v3_130ec = load i8, i8* %v2_130ec, align 1
  %v4_130ec = zext i8 %v3_130ec to i32
  %v4_130f0 = mul nuw nsw i32 %v4_130d4, 256
  %v5_130f0 = or i32 %v4_130dc, %v4_130f0
  %v4_130f4 = mul nuw nsw i32 %v4_130d8, 256
  %v5_130f4 = or i32 %v4_130e0, %v4_130f4
  store i32 %v5_130f4, i32* %r3.global-to-local, align 4
  %v1_130f8 = add i32 %v0_130d4, 51
  %v2_130f8 = inttoptr i32 %v1_130f8 to i8*
  %v3_130f8 = load i8, i8* %v2_130f8, align 1
  %v4_130f8 = zext i8 %v3_130f8 to i32
  %v4_130fc = mul nuw nsw i32 %v4_130e4, 65536
  %v5_130fc = or i32 %v4_130fc, %v5_130f0
  %v4_13100 = mul nuw nsw i32 %v4_130e8, 65536
  %v5_13100 = or i32 %v4_13100, %v5_130f4
  %v4_13104 = mul nuw i32 %v4_130ec, 16777216
  %v5_13104 = or i32 %v5_130fc, %v4_13104
  %v4_13108 = mul nuw i32 %v4_130f8, 16777216
  %v5_13108 = or i32 %v5_13100, %v4_13108
  store i32 %v5_13108, i32* %r3.global-to-local, align 4
  %v1_1311c = load i32, i32* %r7.global-to-local, align 4
  %v2_1311c = add i32 %v1_1311c, 44
  %v3_1311c = inttoptr i32 %v2_1311c to i32*
  store i32 %v5_13104, i32* %v3_1311c, align 4
  %v0_13120 = load i32, i32* %r3.global-to-local, align 4
  %v1_13120 = load i32, i32* %r7.global-to-local, align 4
  %v2_13120 = add i32 %v1_13120, 48
  %v3_13120 = inttoptr i32 %v2_13120 to i32*
  store i32 %v0_13120, i32* %v3_13120, align 4
  %v0_13124 = load i32, i32* %r4.global-to-local, align 4
  %v1_13124 = add i32 %v0_13124, 53
  %v2_13124 = inttoptr i32 %v1_13124 to i8*
  %v3_13124 = load i8, i8* %v2_13124, align 1
  %v4_13124 = zext i8 %v3_13124 to i32
  %v1_13128 = add i32 %v0_13124, 52
  %v2_13128 = inttoptr i32 %v1_13128 to i8*
  %v3_13128 = load i8, i8* %v2_13128, align 1
  %v4_13128 = zext i8 %v3_13128 to i32
  store i32 %v4_13128, i32* %r3.global-to-local, align 4
  %v1_1312c = add i32 %v0_13124, 54
  %v2_1312c = inttoptr i32 %v1_1312c to i8*
  %v3_1312c = load i8, i8* %v2_1312c, align 1
  %v4_1312c = zext i8 %v3_1312c to i32
  %v4_13130 = mul nuw nsw i32 %v4_13124, 256
  %v5_13130 = or i32 %v4_13128, %v4_13130
  store i32 %v5_13130, i32* %r3.global-to-local, align 4
  %v1_13134 = add i32 %v0_13124, 55
  %v2_13134 = inttoptr i32 %v1_13134 to i8*
  %v3_13134 = load i8, i8* %v2_13134, align 1
  %v4_13134 = zext i8 %v3_13134 to i32
  %v4_13138 = mul nuw nsw i32 %v4_1312c, 65536
  %v5_13138 = or i32 %v4_13138, %v5_13130
  %v4_1313c = mul nuw i32 %v4_13134, 16777216
  %v5_1313c = or i32 %v5_13138, %v4_1313c
  store i32 %v5_1313c, i32* %r3.global-to-local, align 4
  %v1_13140 = load i32, i32* %r7.global-to-local, align 4
  %v2_13140 = add i32 %v1_13140, 52
  %v3_13140 = inttoptr i32 %v2_13140 to i32*
  store i32 %v5_1313c, i32* %v3_13140, align 4
  %v0_13144 = load i32, i32* %r4.global-to-local, align 4
  %v1_13144 = add i32 %v0_13144, 57
  %v2_13144 = inttoptr i32 %v1_13144 to i8*
  %v3_13144 = load i8, i8* %v2_13144, align 1
  %v4_13144 = zext i8 %v3_13144 to i32
  %v1_13148 = add i32 %v0_13144, 56
  %v2_13148 = inttoptr i32 %v1_13148 to i8*
  %v3_13148 = load i8, i8* %v2_13148, align 1
  %v4_13148 = zext i8 %v3_13148 to i32
  %v1_1314c = add i32 %v0_13144, 60
  %v2_1314c = inttoptr i32 %v1_1314c to i8*
  %v3_1314c = load i8, i8* %v2_1314c, align 1
  %v4_1314c = zext i8 %v3_1314c to i32
  store i32 %v4_1314c, i32* %r3.global-to-local, align 4
  %v1_13150 = add i32 %v0_13144, 61
  %v2_13150 = inttoptr i32 %v1_13150 to i8*
  %v3_13150 = load i8, i8* %v2_13150, align 1
  %v4_13150 = zext i8 %v3_13150 to i32
  %v1_13154 = add i32 %v0_13144, 58
  %v2_13154 = inttoptr i32 %v1_13154 to i8*
  %v3_13154 = load i8, i8* %v2_13154, align 1
  %v4_13154 = zext i8 %v3_13154 to i32
  %v1_13158 = add i32 %v0_13144, 62
  %v2_13158 = inttoptr i32 %v1_13158 to i8*
  %v3_13158 = load i8, i8* %v2_13158, align 1
  %v4_13158 = zext i8 %v3_13158 to i32
  %v1_1315c = add i32 %v0_13144, 59
  %v2_1315c = inttoptr i32 %v1_1315c to i8*
  %v3_1315c = load i8, i8* %v2_1315c, align 1
  %v4_1315c = zext i8 %v3_1315c to i32
  %v4_13160 = mul nuw nsw i32 %v4_13144, 256
  %v5_13160 = or i32 %v4_13148, %v4_13160
  %v4_13164 = mul nuw nsw i32 %v4_13150, 256
  %v5_13164 = or i32 %v4_13164, %v4_1314c
  store i32 %v5_13164, i32* %r3.global-to-local, align 4
  %v1_13168 = add i32 %v0_13144, 63
  %v2_13168 = inttoptr i32 %v1_13168 to i8*
  %v3_13168 = load i8, i8* %v2_13168, align 1
  %v4_13168 = zext i8 %v3_13168 to i32
  %v4_1316c = mul nuw nsw i32 %v4_13154, 65536
  %v5_1316c = or i32 %v4_1316c, %v5_13160
  %v4_13170 = mul nuw nsw i32 %v4_13158, 65536
  %v5_13170 = or i32 %v4_13170, %v5_13164
  %v4_13174 = mul nuw i32 %v4_13168, 16777216
  %v5_13174 = or i32 %v5_13170, %v4_13174
  %v4_13178 = mul nuw i32 %v4_1315c, 16777216
  %v5_13178 = or i32 %v5_1316c, %v4_13178
  store i32 %v5_13174, i32* %r3.global-to-local, align 4
  %v1_13188 = load i32, i32* %r7.global-to-local, align 4
  %v2_13188 = add i32 %v1_13188, 56
  %v3_13188 = inttoptr i32 %v2_13188 to i32*
  store i32 %v5_13178, i32* %v3_13188, align 4
  %v0_1318c = load i32, i32* %r3.global-to-local, align 4
  %v1_1318c = load i32, i32* %r7.global-to-local, align 4
  %v2_1318c = add i32 %v1_1318c, 60
  %v3_1318c = inttoptr i32 %v2_1318c to i32*
  store i32 %v0_1318c, i32* %v3_1318c, align 4
  %v0_13190 = load i32, i32* %r4.global-to-local, align 4
  %v1_13190 = add i32 %v0_13190, 65
  %v2_13190 = inttoptr i32 %v1_13190 to i8*
  %v3_13190 = load i8, i8* %v2_13190, align 1
  %v4_13190 = zext i8 %v3_13190 to i32
  %v1_13194 = add i32 %v0_13190, 64
  %v2_13194 = inttoptr i32 %v1_13194 to i8*
  %v3_13194 = load i8, i8* %v2_13194, align 1
  %v4_13194 = zext i8 %v3_13194 to i32
  store i32 %v4_13194, i32* %r3.global-to-local, align 4
  %v1_13198 = add i32 %v0_13190, 66
  %v2_13198 = inttoptr i32 %v1_13198 to i8*
  %v3_13198 = load i8, i8* %v2_13198, align 1
  %v4_13198 = zext i8 %v3_13198 to i32
  %v4_1319c = mul nuw nsw i32 %v4_13190, 256
  %v5_1319c = or i32 %v4_13194, %v4_1319c
  store i32 %v5_1319c, i32* %r3.global-to-local, align 4
  %v1_131a0 = add i32 %v0_13190, 67
  %v2_131a0 = inttoptr i32 %v1_131a0 to i8*
  %v3_131a0 = load i8, i8* %v2_131a0, align 1
  %v4_131a0 = zext i8 %v3_131a0 to i32
  %v4_131a4 = mul nuw nsw i32 %v4_13198, 65536
  %v5_131a4 = or i32 %v4_131a4, %v5_1319c
  %v4_131a8 = mul nuw i32 %v4_131a0, 16777216
  %v5_131a8 = or i32 %v5_131a4, %v4_131a8
  store i32 %v5_131a8, i32* %r3.global-to-local, align 4
  %v1_131ac = load i32, i32* %r7.global-to-local, align 4
  %v2_131ac = add i32 %v1_131ac, 64
  %v3_131ac = inttoptr i32 %v2_131ac to i32*
  store i32 %v5_131a8, i32* %v3_131ac, align 4
  %v0_131b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131b0 = add i32 %v0_131b0, 73
  %v2_131b0 = inttoptr i32 %v1_131b0 to i8*
  %v3_131b0 = load i8, i8* %v2_131b0, align 1
  %v4_131b0 = zext i8 %v3_131b0 to i32
  %v1_131b4 = add i32 %v0_131b0, 72
  %v2_131b4 = inttoptr i32 %v1_131b4 to i8*
  %v3_131b4 = load i8, i8* %v2_131b4, align 1
  %v4_131b4 = zext i8 %v3_131b4 to i32
  store i32 %v4_131b4, i32* %r3.global-to-local, align 4
  %v1_131b8 = add i32 %v0_131b0, 74
  %v2_131b8 = inttoptr i32 %v1_131b8 to i8*
  %v3_131b8 = load i8, i8* %v2_131b8, align 1
  %v4_131b8 = zext i8 %v3_131b8 to i32
  %v4_131bc = mul nuw nsw i32 %v4_131b0, 256
  %v5_131bc = or i32 %v4_131b4, %v4_131bc
  store i32 %v5_131bc, i32* %r3.global-to-local, align 4
  %v1_131c0 = add i32 %v0_131b0, 75
  %v2_131c0 = inttoptr i32 %v1_131c0 to i8*
  %v3_131c0 = load i8, i8* %v2_131c0, align 1
  %v4_131c0 = zext i8 %v3_131c0 to i32
  %v4_131c4 = mul nuw nsw i32 %v4_131b8, 65536
  %v5_131c4 = or i32 %v4_131c4, %v5_131bc
  %v4_131c8 = mul nuw i32 %v4_131c0, 16777216
  %v5_131c8 = or i32 %v5_131c4, %v4_131c8
  store i32 %v5_131c8, i32* %r3.global-to-local, align 4
  %v1_131cc = load i32, i32* %r7.global-to-local, align 4
  %v2_131cc = add i32 %v1_131cc, 72
  %v3_131cc = inttoptr i32 %v2_131cc to i32*
  store i32 %v5_131c8, i32* %v3_131cc, align 4
  %v0_131d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131d0 = add i32 %v0_131d0, 81
  %v2_131d0 = inttoptr i32 %v1_131d0 to i8*
  %v3_131d0 = load i8, i8* %v2_131d0, align 1
  %v4_131d0 = zext i8 %v3_131d0 to i32
  %v1_131d4 = add i32 %v0_131d0, 80
  %v2_131d4 = inttoptr i32 %v1_131d4 to i8*
  %v3_131d4 = load i8, i8* %v2_131d4, align 1
  %v4_131d4 = zext i8 %v3_131d4 to i32
  store i32 %v4_131d4, i32* %r3.global-to-local, align 4
  %v1_131d8 = add i32 %v0_131d0, 82
  %v2_131d8 = inttoptr i32 %v1_131d8 to i8*
  %v3_131d8 = load i8, i8* %v2_131d8, align 1
  %v4_131d8 = zext i8 %v3_131d8 to i32
  %v4_131dc = mul nuw nsw i32 %v4_131d0, 256
  %v5_131dc = or i32 %v4_131d4, %v4_131dc
  store i32 %v5_131dc, i32* %r3.global-to-local, align 4
  %v1_131e0 = add i32 %v0_131d0, 83
  %v2_131e0 = inttoptr i32 %v1_131e0 to i8*
  %v3_131e0 = load i8, i8* %v2_131e0, align 1
  %v4_131e0 = zext i8 %v3_131e0 to i32
  %v4_131e4 = mul nuw nsw i32 %v4_131d8, 65536
  %v5_131e4 = or i32 %v4_131e4, %v5_131dc
  %v4_131e8 = mul nuw i32 %v4_131e0, 16777216
  %v5_131e8 = or i32 %v5_131e4, %v4_131e8
  store i32 %v5_131e8, i32* %r3.global-to-local, align 4
  %v1_131ec = load i32, i32* %r7.global-to-local, align 4
  %v2_131ec = add i32 %v1_131ec, 80
  %v3_131ec = inttoptr i32 %v2_131ec to i32*
  store i32 %v5_131e8, i32* %v3_131ec, align 4
  %v0_131f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131f0 = add i32 %v0_131f0, 69
  %v2_131f0 = inttoptr i32 %v1_131f0 to i8*
  %v3_131f0 = load i8, i8* %v2_131f0, align 1
  %v4_131f0 = zext i8 %v3_131f0 to i32
  %v1_131f4 = add i32 %v0_131f0, 68
  %v2_131f4 = inttoptr i32 %v1_131f4 to i8*
  %v3_131f4 = load i8, i8* %v2_131f4, align 1
  %v4_131f4 = zext i8 %v3_131f4 to i32
  store i32 %v4_131f4, i32* %r3.global-to-local, align 4
  %v1_131f8 = add i32 %v0_131f0, 70
  %v2_131f8 = inttoptr i32 %v1_131f8 to i8*
  %v3_131f8 = load i8, i8* %v2_131f8, align 1
  %v4_131f8 = zext i8 %v3_131f8 to i32
  %v4_131fc = mul nuw nsw i32 %v4_131f0, 256
  %v5_131fc = or i32 %v4_131f4, %v4_131fc
  store i32 %v5_131fc, i32* %r3.global-to-local, align 4
  %v1_13200 = add i32 %v0_131f0, 71
  %v2_13200 = inttoptr i32 %v1_13200 to i8*
  %v3_13200 = load i8, i8* %v2_13200, align 1
  %v4_13200 = zext i8 %v3_13200 to i32
  %v4_13204 = mul nuw nsw i32 %v4_131f8, 65536
  %v5_13204 = or i32 %v4_13204, %v5_131fc
  %v4_13208 = mul nuw i32 %v4_13200, 16777216
  %v5_13208 = or i32 %v5_13204, %v4_13208
  store i32 %v5_13208, i32* %r3.global-to-local, align 4
  %v1_1320c = load i32, i32* %r7.global-to-local, align 4
  %v2_1320c = add i32 %v1_1320c, 68
  %v3_1320c = inttoptr i32 %v2_1320c to i32*
  store i32 %v5_13208, i32* %v3_1320c, align 4
  %v0_13210 = load i32, i32* %r4.global-to-local, align 4
  %v1_13210 = add i32 %v0_13210, 77
  %v2_13210 = inttoptr i32 %v1_13210 to i8*
  %v3_13210 = load i8, i8* %v2_13210, align 1
  %v4_13210 = zext i8 %v3_13210 to i32
  %v1_13214 = add i32 %v0_13210, 76
  %v2_13214 = inttoptr i32 %v1_13214 to i8*
  %v3_13214 = load i8, i8* %v2_13214, align 1
  %v4_13214 = zext i8 %v3_13214 to i32
  store i32 %v4_13214, i32* %r3.global-to-local, align 4
  %v1_13218 = add i32 %v0_13210, 78
  %v2_13218 = inttoptr i32 %v1_13218 to i8*
  %v3_13218 = load i8, i8* %v2_13218, align 1
  %v4_13218 = zext i8 %v3_13218 to i32
  %v4_1321c = mul nuw nsw i32 %v4_13210, 256
  %v5_1321c = or i32 %v4_13214, %v4_1321c
  store i32 %v5_1321c, i32* %r3.global-to-local, align 4
  %v1_13220 = add i32 %v0_13210, 79
  %v2_13220 = inttoptr i32 %v1_13220 to i8*
  %v3_13220 = load i8, i8* %v2_13220, align 1
  %v4_13220 = zext i8 %v3_13220 to i32
  %v4_13224 = mul nuw nsw i32 %v4_13218, 65536
  %v5_13224 = or i32 %v4_13224, %v5_1321c
  %v4_13228 = mul nuw i32 %v4_13220, 16777216
  %v5_13228 = or i32 %v5_13224, %v4_13228
  store i32 %v5_13228, i32* %r3.global-to-local, align 4
  %v1_1322c = load i32, i32* %r7.global-to-local, align 4
  %v2_1322c = add i32 %v1_1322c, 76
  %v3_1322c = inttoptr i32 %v2_1322c to i32*
  store i32 %v5_13228, i32* %v3_1322c, align 4
  %v0_13230 = load i32, i32* %r4.global-to-local, align 4
  %v1_13230 = add i32 %v0_13230, 85
  %v2_13230 = inttoptr i32 %v1_13230 to i8*
  %v3_13230 = load i8, i8* %v2_13230, align 1
  %v4_13230 = zext i8 %v3_13230 to i32
  %v1_13234 = add i32 %v0_13230, 84
  %v2_13234 = inttoptr i32 %v1_13234 to i8*
  %v3_13234 = load i8, i8* %v2_13234, align 1
  %v4_13234 = zext i8 %v3_13234 to i32
  store i32 %v4_13234, i32* %r3.global-to-local, align 4
  %v1_13238 = add i32 %v0_13230, 86
  %v2_13238 = inttoptr i32 %v1_13238 to i8*
  %v3_13238 = load i8, i8* %v2_13238, align 1
  %v4_13238 = zext i8 %v3_13238 to i32
  %v4_1323c = mul nuw nsw i32 %v4_13230, 256
  %v5_1323c = or i32 %v4_13234, %v4_1323c
  store i32 %v5_1323c, i32* %r3.global-to-local, align 4
  %v1_13240 = add i32 %v0_13230, 87
  %v2_13240 = inttoptr i32 %v1_13240 to i8*
  %v3_13240 = load i8, i8* %v2_13240, align 1
  %v4_13240 = zext i8 %v3_13240 to i32
  %v4_13244 = mul nuw nsw i32 %v4_13238, 65536
  %v5_13244 = or i32 %v4_13244, %v5_1323c
  %v4_13248 = mul nuw i32 %v4_13240, 16777216
  %v5_13248 = or i32 %v5_13244, %v4_13248
  store i32 %v5_13248, i32* %r3.global-to-local, align 4
  %v1_1324c = load i32, i32* %r7.global-to-local, align 4
  %v2_1324c = add i32 %v1_1324c, 84
  %v3_1324c = inttoptr i32 %v2_1324c to i32*
  store i32 %v5_13248, i32* %v3_1324c, align 4
  ret i32 %v4_13150

; uselistorder directives
  uselistorder i32 %v4_13150, { 1, 0 }
  uselistorder i32 %v0_13144, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_130d4, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13084, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_12fa4, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 0, 2 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 2, 0, 1 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 6, 0, 7, 4, 5, 1, 2, 3 }
  uselistorder i32 29, { 4, 1, 0, 5, 6, 3, 2 }
  uselistorder i32 26, { 7, 0, 1, 3, 9, 2, 8, 4, 10, 5, 11, 6, 12, 13 }
  uselistorder i32 25, { 11, 24, 25, 3, 12, 4, 13, 5, 14, 2, 15, 10, 6, 16, 0, 17, 18, 19, 7, 8, 20, 9, 21, 22, 1, 23 }
  uselistorder i32 23, { 6, 1, 0, 7, 2, 3, 4, 5 }
  uselistorder i32 22, { 10, 1, 12, 2, 3, 4, 5, 0, 11, 6, 13, 7, 14, 8, 15, 9 }
  uselistorder i32 21, { 8, 3, 2, 9, 10, 11, 7, 0, 1, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 19, { 11, 13, 14, 15, 5, 1, 6, 2, 0, 12, 7, 8, 9, 10, 16, 3, 17, 4, 18 }
  uselistorder i32 18, { 9, 10, 11, 12, 8, 0, 1, 2, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17 }
  uselistorder i32 17, { 16, 19, 0, 4, 30, 31, 5, 32, 33, 6, 1, 17, 7, 18, 8, 9, 10, 11, 20, 21, 2, 22, 23, 24, 3, 25, 26, 27, 28, 29, 34, 12, 35, 13, 36, 37, 38, 14, 39, 15 }
  uselistorder i32 6, { 28, 35, 15, 16, 80, 2, 33, 3, 18, 29, 19, 30, 20, 31, 17, 32, 0, 21, 34, 4, 5, 36, 37, 38, 22, 39, 6, 40, 41, 42, 23, 43, 7, 44, 45, 46, 24, 47, 48, 49, 25, 50, 54, 55, 56, 8, 57, 58, 59, 60, 9, 61, 62, 63, 64, 65, 26, 66, 10, 67, 68, 69, 70, 71, 72, 27, 73, 11, 74, 75, 76, 77, 12, 78, 13, 14, 1, 79, 51, 52, 53 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13258(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13258:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13258 = load i32, i32* @r4, align 4
  store i32 %v3_13258, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_13270 = inttoptr i32 %arg2 to i8*
  %v3_13270 = call i32 @function_11760(i8* %v2_13270, i32 0)
  store i32 %v3_13270, i32* %r0.global-to-local, align 4
  %v0_13274 = load i32, i32* %r5.global-to-local, align 4
  %v1_13274 = inttoptr i32 %v0_13274 to i32*
  %v2_13274 = load i32, i32* %v1_13274, align 4
  store i32 %v2_13274, i32* %r3.global-to-local, align 4
  %v1_13278 = add i32 %v0_13274, 4
  %v2_13278 = inttoptr i32 %v1_13278 to i32*
  %v3_13278 = load i32, i32* %v2_13278, align 4
  store i32 %v3_13278, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_13280 = load i32, i32* %r6.global-to-local, align 4
  %v1_13280 = inttoptr i32 %v0_13280 to i32*
  store i32 %v2_13274, i32* %v1_13280, align 4
  %v3_13280 = add i32 %v0_13280, 4
  %v4_13280 = inttoptr i32 %v3_13280 to i32*
  %v5_13280 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13280, i32* %v4_13280, align 4
  %v0_13284 = load i32, i32* %r2.global-to-local, align 4
  %v1_13284 = load i32, i32* %r6.global-to-local, align 4
  %v2_13284 = add i32 %v1_13284, 12
  %v3_13284 = inttoptr i32 %v2_13284 to i32*
  store i32 %v0_13284, i32* %v3_13284, align 4
  %v0_13288 = load i32, i32* %r5.global-to-local, align 4
  %v1_13288 = add i32 %v0_13288, 9
  %v2_13288 = inttoptr i32 %v1_13288 to i8*
  %v3_13288 = load i8, i8* %v2_13288, align 1
  %v4_13288 = zext i8 %v3_13288 to i32
  store i32 %v4_13288, i32* %r2.global-to-local, align 4
  %v1_1328c = add i32 %v0_13288, 8
  %v2_1328c = inttoptr i32 %v1_1328c to i8*
  %v3_1328c = load i8, i8* %v2_1328c, align 1
  %v4_1328c = zext i8 %v3_1328c to i32
  %v4_13290 = mul nuw nsw i32 %v4_13288, 256
  %v5_13290 = or i32 %v4_1328c, %v4_13290
  store i32 %v5_13290, i32* %r3.global-to-local, align 4
  %v1_13294 = load i32, i32* %r6.global-to-local, align 4
  %v2_13294 = add i32 %v1_13294, 16
  %v3_13294 = inttoptr i32 %v2_13294 to i32*
  store i32 %v5_13290, i32* %v3_13294, align 4
  %v0_13298 = load i32, i32* %r5.global-to-local, align 4
  %v1_13298 = add i32 %v0_13298, 11
  %v2_13298 = inttoptr i32 %v1_13298 to i8*
  %v3_13298 = load i8, i8* %v2_13298, align 1
  %v4_13298 = zext i8 %v3_13298 to i32
  store i32 %v4_13298, i32* %r2.global-to-local, align 4
  %v1_1329c = add i32 %v0_13298, 10
  %v2_1329c = inttoptr i32 %v1_1329c to i8*
  %v3_1329c = load i8, i8* %v2_1329c, align 1
  %v4_1329c = zext i8 %v3_1329c to i32
  %v4_132a0 = mul nuw nsw i32 %v4_13298, 256
  %v5_132a0 = or i32 %v4_1329c, %v4_132a0
  store i32 %v5_132a0, i32* %r3.global-to-local, align 4
  %v1_132a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_132a4 = add i32 %v1_132a4, 20
  %v3_132a4 = inttoptr i32 %v2_132a4 to i32*
  store i32 %v5_132a0, i32* %v3_132a4, align 4
  %v0_132a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_132a8 = add i32 %v0_132a8, 13
  %v2_132a8 = inttoptr i32 %v1_132a8 to i8*
  %v3_132a8 = load i8, i8* %v2_132a8, align 1
  %v4_132a8 = zext i8 %v3_132a8 to i32
  store i32 %v4_132a8, i32* %r2.global-to-local, align 4
  %v1_132ac = add i32 %v0_132a8, 12
  %v2_132ac = inttoptr i32 %v1_132ac to i8*
  %v3_132ac = load i8, i8* %v2_132ac, align 1
  %v4_132ac = zext i8 %v3_132ac to i32
  %v4_132b0 = mul nuw nsw i32 %v4_132a8, 256
  %v5_132b0 = or i32 %v4_132ac, %v4_132b0
  store i32 %v5_132b0, i32* %r3.global-to-local, align 4
  %v1_132b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_132b4 = add i32 %v1_132b4, 24
  %v3_132b4 = inttoptr i32 %v2_132b4 to i32*
  store i32 %v5_132b0, i32* %v3_132b4, align 4
  %v0_132b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_132b8 = add i32 %v0_132b8, 20
  %v2_132b8 = inttoptr i32 %v1_132b8 to i32*
  %v3_132b8 = load i32, i32* %v2_132b8, align 4
  store i32 %v3_132b8, i32* %r3.global-to-local, align 4
  %v1_132bc = add i32 %v0_132b8, 14
  %v2_132bc = inttoptr i32 %v1_132bc to i8*
  %v3_132bc = load i8, i8* %v2_132bc, align 1
  %v4_132bc = zext i8 %v3_132bc to i32
  store i32 %v4_132bc, i32* %r0.global-to-local, align 4
  %v1_132c0 = add i32 %v0_132b8, 15
  %v2_132c0 = inttoptr i32 %v1_132c0 to i8*
  %v3_132c0 = load i8, i8* %v2_132c0, align 1
  %v4_132c0 = zext i8 %v3_132c0 to i32
  store i32 %v4_132c0, i32* %ip.global-to-local, align 4
  %v1_132c4 = add i32 %v0_132b8, 16
  %v2_132c4 = inttoptr i32 %v1_132c4 to i32*
  %v3_132c4 = load i32, i32* %v2_132c4, align 4
  store i32 %v3_132c4, i32* %r1.global-to-local, align 4
  %v1_132c8 = load i32, i32* %r6.global-to-local, align 4
  %v2_132c8 = add i32 %v1_132c8, 44
  %v3_132c8 = inttoptr i32 %v2_132c8 to i32*
  store i32 %v3_132b8, i32* %v3_132c8, align 4
  %v0_132cc = load i32, i32* %r5.global-to-local, align 4
  %v1_132cc = add i32 %v0_132cc, 24
  %v2_132cc = inttoptr i32 %v1_132cc to i32*
  %v3_132cc = load i32, i32* %v2_132cc, align 4
  store i32 %v3_132cc, i32* %r3.global-to-local, align 4
  %v1_132d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_132d0 = add i32 %v1_132d0, 48
  %v3_132d0 = inttoptr i32 %v2_132d0 to i32*
  store i32 %v3_132cc, i32* %v3_132d0, align 4
  %v0_132d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_132d4 = add i32 %v0_132d4, 28
  %v2_132d4 = inttoptr i32 %v1_132d4 to i32*
  %v3_132d4 = load i32, i32* %v2_132d4, align 4
  store i32 %v3_132d4, i32* %r3.global-to-local, align 4
  %v1_132d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_132d8 = add i32 %v1_132d8, 52
  %v3_132d8 = inttoptr i32 %v2_132d8 to i32*
  store i32 %v3_132d4, i32* %v3_132d8, align 4
  %v0_132dc = load i32, i32* %r5.global-to-local, align 4
  %v1_132dc = add i32 %v0_132dc, 32
  %v2_132dc = inttoptr i32 %v1_132dc to i32*
  %v3_132dc = load i32, i32* %v2_132dc, align 4
  store i32 %v3_132dc, i32* %r3.global-to-local, align 4
  %v1_132e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_132e0 = add i32 %v1_132e0, 56
  %v3_132e0 = inttoptr i32 %v2_132e0 to i32*
  store i32 %v3_132dc, i32* %v3_132e0, align 4
  %v0_132e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_132e4 = add i32 %v0_132e4, 40
  %v2_132e4 = inttoptr i32 %v1_132e4 to i32*
  %v3_132e4 = load i32, i32* %v2_132e4, align 4
  store i32 %v3_132e4, i32* %r3.global-to-local, align 4
  %v1_132e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_132e8 = add i32 %v1_132e8, 64
  %v3_132e8 = inttoptr i32 %v2_132e8 to i32*
  store i32 %v3_132e4, i32* %v3_132e8, align 4
  %v0_132ec = load i32, i32* %r5.global-to-local, align 4
  %v1_132ec = add i32 %v0_132ec, 48
  %v2_132ec = inttoptr i32 %v1_132ec to i32*
  %v3_132ec = load i32, i32* %v2_132ec, align 4
  store i32 %v3_132ec, i32* %r3.global-to-local, align 4
  %v1_132f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_132f0 = add i32 %v1_132f0, 72
  %v3_132f0 = inttoptr i32 %v2_132f0 to i32*
  store i32 %v3_132ec, i32* %v3_132f0, align 4
  %v0_132f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_132f4 = add i32 %v0_132f4, 36
  %v2_132f4 = inttoptr i32 %v1_132f4 to i32*
  %v3_132f4 = load i32, i32* %v2_132f4, align 4
  store i32 %v3_132f4, i32* %r3.global-to-local, align 4
  %v1_132f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_132f8 = add i32 %v1_132f8, 60
  %v3_132f8 = inttoptr i32 %v2_132f8 to i32*
  store i32 %v3_132f4, i32* %v3_132f8, align 4
  %v0_132fc = load i32, i32* %r5.global-to-local, align 4
  %v1_132fc = add i32 %v0_132fc, 44
  %v2_132fc = inttoptr i32 %v1_132fc to i32*
  %v3_132fc = load i32, i32* %v2_132fc, align 4
  store i32 %v3_132fc, i32* %r3.global-to-local, align 4
  %v0_13300 = load i32, i32* %r0.global-to-local, align 4
  %v1_13300 = load i32, i32* %ip.global-to-local, align 4
  %v4_13300 = mul i32 %v1_13300, 256
  %v5_13300 = or i32 %v4_13300, %v0_13300
  store i32 %v5_13300, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_13308 = load i32, i32* %r6.global-to-local, align 4
  %v2_13308 = add i32 %v1_13308, 28
  %v3_13308 = inttoptr i32 %v2_13308 to i32*
  store i32 %v5_13300, i32* %v3_13308, align 4
  %v0_1330c = load i32, i32* %r1.global-to-local, align 4
  %v1_1330c = load i32, i32* %r6.global-to-local, align 4
  %v2_1330c = add i32 %v1_1330c, 32
  %v3_1330c = inttoptr i32 %v2_1330c to i32*
  store i32 %v0_1330c, i32* %v3_1330c, align 4
  %v0_13310 = load i32, i32* %r2.global-to-local, align 4
  %v1_13310 = load i32, i32* %r6.global-to-local, align 4
  %v2_13310 = add i32 %v1_13310, 36
  %v3_13310 = inttoptr i32 %v2_13310 to i32*
  store i32 %v0_13310, i32* %v3_13310, align 4
  %v0_13314 = load i32, i32* %r3.global-to-local, align 4
  %v1_13314 = load i32, i32* %r6.global-to-local, align 4
  %v2_13314 = add i32 %v1_13314, 68
  %v3_13314 = inttoptr i32 %v2_13314 to i32*
  store i32 %v0_13314, i32* %v3_13314, align 4
  %v0_13318 = load i32, i32* %r5.global-to-local, align 4
  %v1_13318 = add i32 %v0_13318, 52
  %v2_13318 = inttoptr i32 %v1_13318 to i32*
  %v3_13318 = load i32, i32* %v2_13318, align 4
  store i32 %v3_13318, i32* %r3.global-to-local, align 4
  %v1_1331c = load i32, i32* %r6.global-to-local, align 4
  %v2_1331c = add i32 %v1_1331c, 76
  %v3_1331c = inttoptr i32 %v2_1331c to i32*
  store i32 %v3_13318, i32* %v3_1331c, align 4
  %v2_13320 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13320, i32* %r4.global-to-local, align 4
  ret i32 %v5_13300

; uselistorder directives
  uselistorder i32 %v0_132b8, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 3, 27, 28, 29, 10, 30, 31, 32, 4, 33, 34, 35, 36, 37, 5, 38, 39, 40, 41, 42, 6, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 18, 14, 13, 15, 2, 16, 3, 17, 4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 12, 21, 22, 23, 24, 0, 25, 26, 27, 28, 1, 29 }
  uselistorder i32 14, { 21, 18, 33, 0, 19, 1, 17, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 23, 16, 24, 25, 26, 27, 2, 28, 29, 30, 31, 3, 32 }
  uselistorder i32 13, { 29, 23, 22, 24, 25, 26, 27, 28, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 16, 17, 18, 19, 30, 31, 32, 33, 34, 20, 35, 36, 37, 38, 39, 40, 41, 42, 21, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 2, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 3, 71, 72 }
  uselistorder i32 9, { 42, 43, 44, 8, 5, 45, 9, 6, 32, 13, 28, 14, 29, 15, 30, 11, 31, 12, 27, 24, 10, 3, 33, 25, 34, 2, 26, 16, 35, 17, 36, 18, 37, 38, 19, 39, 20, 40, 21, 41, 0, 22, 1, 58, 46, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 57, 59, 60, 4, 61, 23 }
  uselistorder i32 (i8*, i32)* @function_11760, { 2, 0, 6, 7, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_13330() local_unnamed_addr {
dec_label_pc_13330:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_13330 = load i32, i32* @r1, align 4
  %v1_13330 = load i32, i32* @r0, align 4
  %v2_13330 = sub i32 %v0_13330, %v1_13330
  %v3_13330 = icmp ult i32 %v0_13330, %v1_13330
  %v4_13330 = xor i32 %v1_13330, %v0_13330
  %v5_13330 = xor i32 %v2_13330, %v0_13330
  %v6_13330 = and i32 %v5_13330, %v4_13330
  %v7_13330 = icmp slt i32 %v6_13330, 0
  store i1 %v7_13330, i1* %cpsr_v.global-to-local, align 1
  %v8_13330 = icmp slt i32 %v2_13330, 0
  store i1 %v8_13330, i1* %cpsr_n.global-to-local, align 1
  %v9_13330 = icmp eq i32 %v0_13330, %v1_13330
  store i1 %v9_13330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13330, label %dec_label_pc_1357c, label %dec_label_pc_13338

dec_label_pc_13338:                               ; preds = %dec_label_pc_13330
  br i1 %v9_13330, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_13338
  %merge = phi i32 [ %v0_13330, %dec_label_pc_13338 ], [ %v2_13610, %bb141 ], [ %v11_1362c, %bb144 ], [ %v7_1362c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_13338
  store i32 %v1_13330, i32* %stack_var_-8, align 4
  %v0_13340 = load i32, i32* @r2, align 4
  %v2_13340 = add i32 %v0_13340, -4
  store i32 %v2_13340, i32* %r2.global-to-local, align 4
  %v4_13340 = sub i32 3, %v0_13340
  %v5_13340 = and i32 %v4_13340, %v0_13340
  %v6_13340 = icmp slt i32 %v5_13340, 0
  store i1 %v6_13340, i1* %cpsr_v.global-to-local, align 1
  %v7_13340 = icmp slt i32 %v2_13340, 0
  store i1 %v7_13340, i1* %cpsr_n.global-to-local, align 1
  %v8_13340 = icmp eq i32 %v0_13340, 4
  store i1 %v8_13340, i1* %cpsr_z.global-to-local, align 1
  %v5_13344 = icmp slt i32 %v0_13340, 4
  br i1 %v5_13344, label %bb131, label %dec_label_pc_13348

dec_label_pc_13348:                               ; preds = %bb
  %v1_13348 = urem i32 %v1_13330, 4
  store i32 %v1_13348, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13348 = icmp eq i32 %v1_13348, 0
  store i1 %v2_13348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13348, label %dec_label_pc_13350, label %dec_label_pc_133f4

dec_label_pc_13350:                               ; preds = %dec_label_pc_13348
  %v1_13350 = urem i32 %v0_13330, 4
  store i32 %v1_13350, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13350 = icmp eq i32 %v1_13350, 0
  store i1 %v2_13350, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_13330 to i2
  br i1 %v2_13350, label %dec_label_pc_13358, label %dec_label_pc_13424

dec_label_pc_13358:                               ; preds = %dec_label_pc_13350, %dec_label_pc_1341c
  %v0_1337092 = phi i32 [ %v1_13330, %dec_label_pc_13350 ], [ %v0_1346c75, %dec_label_pc_1341c ]
  %v0_1336c91 = phi i32 [ %v0_13330, %dec_label_pc_13350 ], [ %v0_1341c, %dec_label_pc_1341c ]
  %v0_13358 = phi i32 [ %v2_13340, %dec_label_pc_13350 ], [ %v2_13414, %dec_label_pc_1341c ]
  %v2_13358 = add i32 %v0_13358, -8
  store i32 %v2_13358, i32* %r2.global-to-local, align 4
  %v4_13358 = sub i32 7, %v0_13358
  %v5_13358 = and i32 %v4_13358, %v0_13358
  %v6_13358 = icmp slt i32 %v5_13358, 0
  store i1 %v6_13358, i1* %cpsr_v.global-to-local, align 1
  %v7_13358 = icmp slt i32 %v2_13358, 0
  store i1 %v7_13358, i1* %cpsr_n.global-to-local, align 1
  %v8_13358 = icmp eq i32 %v0_13358, 8
  store i1 %v8_13358, i1* %cpsr_z.global-to-local, align 1
  %v5_1335c = icmp slt i32 %v0_13358, 8
  br i1 %v5_1335c, label %dec_label_pc_133ac, label %dec_label_pc_13360

dec_label_pc_13360:                               ; preds = %dec_label_pc_13358
  %v2_13360 = add i32 %v0_13358, -28
  store i32 %v2_13360, i32* %r2.global-to-local, align 4
  %v4_13360 = sub i32 27, %v0_13358
  %v5_13360 = and i32 %v4_13360, %v2_13358
  %v6_13360 = icmp slt i32 %v5_13360, 0
  store i1 %v6_13360, i1* %cpsr_v.global-to-local, align 1
  %v7_13360 = icmp slt i32 %v2_13360, 0
  store i1 %v7_13360, i1* %cpsr_n.global-to-local, align 1
  %v8_13360 = icmp eq i32 %v2_13358, 20
  store i1 %v8_13360, i1* %cpsr_z.global-to-local, align 1
  %v5_13364 = icmp slt i32 %v2_13358, 20
  br i1 %v5_13364, label %dec_label_pc_13398, label %dec_label_pc_13368

dec_label_pc_13368:                               ; preds = %dec_label_pc_13360
  %v0_13368 = load i32, i32* @r4, align 4
  store i32 %v0_13368, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1336c

dec_label_pc_1336c:                               ; preds = %dec_label_pc_1336c.dec_label_pc_1336c_crit_edge, %dec_label_pc_13368
  %v0_13370 = phi i32 [ %v12_13378, %dec_label_pc_1336c.dec_label_pc_1336c_crit_edge ], [ %v0_1337092, %dec_label_pc_13368 ]
  %v0_1336c = phi i32 [ %v0_1336c.pre, %dec_label_pc_1336c.dec_label_pc_1336c_crit_edge ], [ %v0_1336c91, %dec_label_pc_13368 ]
  %v1_1336c = inttoptr i32 %v0_1336c to i32*
  %v2_1336c = load i32, i32* %v1_1336c, align 4
  store i32 %v2_1336c, i32* %r3.global-to-local, align 4
  %v3_1336c = add i32 %v0_1336c, 4
  %v4_1336c = inttoptr i32 %v3_1336c to i32*
  %v5_1336c = load i32, i32* %v4_1336c, align 4
  store i32 %v5_1336c, i32* %r4.global-to-local, align 4
  %v6_1336c = add i32 %v0_1336c, 8
  %v7_1336c = inttoptr i32 %v6_1336c to i32*
  %v8_1336c = load i32, i32* %v7_1336c, align 4
  store i32 %v8_1336c, i32* %ip.global-to-local, align 4
  %v9_1336c = add i32 %v0_1336c, 12
  %v10_1336c = inttoptr i32 %v9_1336c to i32*
  %v11_1336c = load i32, i32* %v10_1336c, align 4
  store i32 %v11_1336c, i32* %lr.global-to-local, align 4
  %v12_1336c = add i32 %v0_1336c, 16
  store i32 %v12_1336c, i32* %r1.global-to-local, align 4
  %v1_13370 = inttoptr i32 %v0_13370 to i32*
  store i32 %v2_1336c, i32* %v1_13370, align 4
  %v3_13370 = add i32 %v0_13370, 4
  %v4_13370 = inttoptr i32 %v3_13370 to i32*
  %v5_13370 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13370, i32* %v4_13370, align 4
  %v6_13370 = add i32 %v0_13370, 8
  %v7_13370 = inttoptr i32 %v6_13370 to i32*
  %v8_13370 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_13370, i32* %v7_13370, align 4
  %v9_13370 = add i32 %v0_13370, 12
  %v10_13370 = inttoptr i32 %v9_13370 to i32*
  %v11_13370 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13370, i32* %v10_13370, align 4
  %v12_13370 = add i32 %v0_13370, 16
  store i32 %v12_13370, i32* %r0.global-to-local, align 4
  %v0_13374 = load i32, i32* %r1.global-to-local, align 4
  %v1_13374 = inttoptr i32 %v0_13374 to i32*
  %v2_13374 = load i32, i32* %v1_13374, align 4
  store i32 %v2_13374, i32* %r3.global-to-local, align 4
  %v3_13374 = add i32 %v0_13374, 4
  %v4_13374 = inttoptr i32 %v3_13374 to i32*
  %v5_13374 = load i32, i32* %v4_13374, align 4
  store i32 %v5_13374, i32* %r4.global-to-local, align 4
  %v6_13374 = add i32 %v0_13374, 8
  %v7_13374 = inttoptr i32 %v6_13374 to i32*
  %v8_13374 = load i32, i32* %v7_13374, align 4
  store i32 %v8_13374, i32* @ip, align 4
  %v9_13374 = add i32 %v0_13374, 12
  %v10_13374 = inttoptr i32 %v9_13374 to i32*
  %v11_13374 = load i32, i32* %v10_13374, align 4
  store i32 %v11_13374, i32* @lr, align 4
  %v12_13374 = add i32 %v0_13374, 16
  store i32 %v12_13374, i32* @r1, align 4
  %v1_13378 = inttoptr i32 %v12_13370 to i32*
  store i32 %v2_13374, i32* %v1_13378, align 4
  %v3_13378 = add i32 %v0_13370, 20
  %v4_13378 = inttoptr i32 %v3_13378 to i32*
  %v5_13378 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13378, i32* %v4_13378, align 4
  %v6_13378 = add i32 %v0_13370, 24
  %v7_13378 = inttoptr i32 %v6_13378 to i32*
  %v8_13378 = load i32, i32* @ip, align 4
  store i32 %v8_13378, i32* %v7_13378, align 4
  %v9_13378 = add i32 %v0_13370, 28
  %v10_13378 = inttoptr i32 %v9_13378 to i32*
  %v11_13378 = load i32, i32* @lr, align 4
  store i32 %v11_13378, i32* %v10_13378, align 4
  %v12_13378 = add i32 %v0_13370, 32
  store i32 %v12_13378, i32* @r0, align 4
  %v0_1337c = load i32, i32* %r2.global-to-local, align 4
  %v2_1337c = add i32 %v0_1337c, -32
  store i32 %v2_1337c, i32* %r2.global-to-local, align 4
  %v6_13380 = icmp slt i32 %v0_1337c, 32
  br i1 %v6_13380, label %dec_label_pc_13384, label %dec_label_pc_1336c.dec_label_pc_1336c_crit_edge

dec_label_pc_1336c.dec_label_pc_1336c_crit_edge:  ; preds = %dec_label_pc_1336c
  %v0_1336c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1336c

dec_label_pc_13384:                               ; preds = %dec_label_pc_1336c
  %v4_13384 = add i32 %v0_1337c, -16
  %v6_13384 = add i32 %v0_1337c, 2147483616
  %v7_13384 = and i32 %v4_13384, %v6_13384
  %v8_13384 = icmp slt i32 %v7_13384, 0
  store i1 %v8_13384, i1* %cpsr_v.global-to-local, align 1
  %v9_13384 = icmp slt i32 %v4_13384, 0
  store i1 %v9_13384, i1* %cpsr_n.global-to-local, align 1
  %v10_13384 = icmp eq i32 %v4_13384, 0
  store i1 %v10_13384, i1* %cpsr_z.global-to-local, align 1
  %v5_13388 = icmp slt i32 %v2_1337c, -16
  br i1 %v5_13388, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_13384
  %v6_13388 = load i32, i32* @r1, align 4
  %v7_13388 = inttoptr i32 %v6_13388 to i32*
  %v8_13388 = load i32, i32* %v7_13388, align 4
  store i32 %v8_13388, i32* %r3.global-to-local, align 4
  %v9_13388 = add i32 %v6_13388, 4
  %v10_13388 = inttoptr i32 %v9_13388 to i32*
  %v11_13388 = load i32, i32* %v10_13388, align 4
  store i32 %v11_13388, i32* %r4.global-to-local, align 4
  %v12_13388 = add i32 %v6_13388, 8
  %v13_13388 = inttoptr i32 %v12_13388 to i32*
  %v14_13388 = load i32, i32* %v13_13388, align 4
  store i32 %v14_13388, i32* @ip, align 4
  %v15_13388 = add i32 %v6_13388, 12
  %v16_13388 = inttoptr i32 %v15_13388 to i32*
  %v17_13388 = load i32, i32* %v16_13388, align 4
  store i32 %v17_13388, i32* @lr, align 4
  %v18_13388 = add i32 %v6_13388, 16
  store i32 %v18_13388, i32* @r1, align 4
  %v7_1338c = inttoptr i32 %v12_13378 to i32*
  store i32 %v8_13388, i32* %v7_1338c, align 4
  %v9_1338c = add i32 %v0_13370, 36
  %v10_1338c = inttoptr i32 %v9_1338c to i32*
  %v11_1338c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1338c, i32* %v10_1338c, align 4
  %v12_1338c = add i32 %v0_13370, 40
  %v13_1338c = inttoptr i32 %v12_1338c to i32*
  %v14_1338c = load i32, i32* @ip, align 4
  store i32 %v14_1338c, i32* %v13_1338c, align 4
  %v15_1338c = add i32 %v0_13370, 44
  %v16_1338c = inttoptr i32 %v15_1338c to i32*
  %v17_1338c = load i32, i32* @lr, align 4
  store i32 %v17_1338c, i32* %v16_1338c, align 4
  %v18_1338c = add i32 %v0_13370, 48
  store i32 %v18_1338c, i32* @r0, align 4
  %v6_13390 = load i32, i32* %r2.global-to-local, align 4
  %v7_13390 = add i32 %v6_13390, -16
  store i32 %v7_13390, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13384, %bb128
  %v3_133a0101 = phi i32 [ %v12_13378, %dec_label_pc_13384 ], [ %v18_1338c, %bb128 ]
  %v0_1339895 = phi i32 [ %v2_1337c, %dec_label_pc_13384 ], [ %v7_13390, %bb128 ]
  %v2_13394 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13394, i32* @r4, align 4
  br label %dec_label_pc_13398

dec_label_pc_13398:                               ; preds = %dec_label_pc_13360, %.thread1
  %v3_133a0100 = phi i32 [ %v0_1337092, %dec_label_pc_13360 ], [ %v3_133a0101, %.thread1 ]
  %v0_13398 = phi i32 [ %v2_13360, %dec_label_pc_13360 ], [ %v0_1339895, %.thread1 ]
  %v1_13398 = add i32 %v0_13398, 20
  store i32 %v1_13398, i32* %r2.global-to-local, align 4
  %v3_13398 = sub i32 0, %v0_13398
  %v4_13398 = and i32 %v1_13398, %v3_13398
  %v5_13398 = icmp slt i32 %v4_13398, 0
  store i1 %v5_13398, i1* %cpsr_v.global-to-local, align 1
  %v6_13398 = icmp slt i32 %v1_13398, 0
  store i1 %v6_13398, i1* %cpsr_n.global-to-local, align 1
  %v7_13398 = icmp eq i32 %v1_13398, 0
  store i1 %v7_13398, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1339c

dec_label_pc_1339c:                               ; preds = %.thread117, %dec_label_pc_13398
  %v0_133ac.pre147 = phi i32 [ %v0_133ac.pre, %.thread117 ], [ %v1_13398, %dec_label_pc_13398 ]
  %v3_133a0 = phi i32 [ %v3_133a098118, %.thread117 ], [ %v3_133a0100, %dec_label_pc_13398 ]
  %v1_133a4 = phi i1 [ %v1_133a8, %.thread117 ], [ %v5_13398, %dec_label_pc_13398 ]
  %v0_133a4 = phi i1 [ %v0_133a8, %.thread117 ], [ %v6_13398, %dec_label_pc_13398 ]
  %v2_1339c = xor i1 %v1_133a4, %v0_133a4
  br i1 %v2_1339c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1339c
  %v3_1339c = load i32, i32* @r1, align 4
  %v4_1339c = inttoptr i32 %v3_1339c to i32*
  %v5_1339c = load i32, i32* %v4_1339c, align 4
  store i32 %v5_1339c, i32* %r3.global-to-local, align 4
  %v6_1339c = add i32 %v3_1339c, 4
  %v7_1339c = inttoptr i32 %v6_1339c to i32*
  %v8_1339c = load i32, i32* %v7_1339c, align 4
  store i32 %v8_1339c, i32* @ip, align 4
  %v9_1339c = add i32 %v3_1339c, 8
  %v10_1339c = inttoptr i32 %v9_1339c to i32*
  %v11_1339c = load i32, i32* %v10_1339c, align 4
  store i32 %v11_1339c, i32* @lr, align 4
  %v12_1339c = add i32 %v3_1339c, 12
  store i32 %v12_1339c, i32* @r1, align 4
  %v4_133a0 = inttoptr i32 %v3_133a0 to i32*
  store i32 %v5_1339c, i32* %v4_133a0, align 4
  %v6_133a0 = add i32 %v3_133a0, 4
  %v7_133a0 = inttoptr i32 %v6_133a0 to i32*
  %v8_133a0 = load i32, i32* @ip, align 4
  store i32 %v8_133a0, i32* %v7_133a0, align 4
  %v9_133a0 = add i32 %v3_133a0, 8
  %v10_133a0 = inttoptr i32 %v9_133a0 to i32*
  %v11_133a0 = load i32, i32* @lr, align 4
  store i32 %v11_133a0, i32* %v10_133a0, align 4
  %v12_133a0 = add i32 %v3_133a0, 12
  store i32 %v12_133a0, i32* @r0, align 4
  %v3_133a4 = load i32, i32* %r2.global-to-local, align 4
  %v4_133a4 = add i32 %v3_133a4, -12
  store i32 %v4_133a4, i32* %r2.global-to-local, align 4
  %v6_133a4 = sub i32 11, %v3_133a4
  %v7_133a4 = and i32 %v6_133a4, %v3_133a4
  %v8_133a4 = icmp slt i32 %v7_133a4, 0
  store i1 %v8_133a4, i1* %cpsr_v.global-to-local, align 1
  %v9_133a4 = icmp slt i32 %v4_133a4, 0
  store i1 %v9_133a4, i1* %cpsr_n.global-to-local, align 1
  %v10_133a4 = icmp eq i32 %v3_133a4, 12
  store i1 %v10_133a4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1339c, %bb129
  %v0_133ac.pre = phi i32 [ %v4_133a4, %bb129 ], [ %v0_133ac.pre147, %dec_label_pc_1339c ]
  %v3_133a098118 = phi i32 [ %v12_133a0, %bb129 ], [ %v3_133a0, %dec_label_pc_1339c ]
  %v1_133a8 = phi i1 [ %v8_133a4, %bb129 ], [ %v1_133a4, %dec_label_pc_1339c ]
  %v0_133a8 = phi i1 [ %v9_133a4, %bb129 ], [ %v0_133a4, %dec_label_pc_1339c ]
  %v2_133a8 = xor i1 %v1_133a8, %v0_133a8
  br i1 %v2_133a8, label %dec_label_pc_133ac, label %dec_label_pc_1339c

dec_label_pc_133ac:                               ; preds = %.thread117, %dec_label_pc_13358
  %v7_133bc = phi i32 [ %v0_1337092, %dec_label_pc_13358 ], [ %v3_133a098118, %.thread117 ]
  %v0_133ac = phi i32 [ %v2_13358, %dec_label_pc_13358 ], [ %v0_133ac.pre, %.thread117 ]
  %v2_133ac = add i32 %v0_133ac, 8
  store i32 %v2_133ac, i32* %r2.global-to-local, align 4
  %v4_133ac = sub i32 0, %v0_133ac
  %v5_133ac = and i32 %v2_133ac, %v4_133ac
  %v6_133ac = icmp slt i32 %v5_133ac, 0
  store i1 %v6_133ac, i1* %cpsr_v.global-to-local, align 1
  %v7_133ac = icmp slt i32 %v2_133ac, 0
  store i1 %v7_133ac, i1* %cpsr_n.global-to-local, align 1
  %v8_133ac = icmp eq i32 %v2_133ac, 0
  store i1 %v8_133ac, i1* %cpsr_z.global-to-local, align 1
  %v5_133b0 = icmp slt i32 %v0_133ac, -8
  br i1 %v5_133b0, label %bb131, label %dec_label_pc_133b4

dec_label_pc_133b4:                               ; preds = %dec_label_pc_133ac
  %v6_133b4 = add i32 %v0_133ac, 4
  store i32 %v6_133b4, i32* %r2.global-to-local, align 4
  %v8_133b4 = sub i32 -5, %v0_133ac
  %v9_133b4 = and i32 %v8_133b4, %v2_133ac
  %v10_133b4 = icmp slt i32 %v9_133b4, 0
  store i1 %v10_133b4, i1* %cpsr_v.global-to-local, align 1
  %v11_133b4 = icmp slt i32 %v6_133b4, 0
  store i1 %v11_133b4, i1* %cpsr_n.global-to-local, align 1
  %v12_133b4 = icmp eq i32 %v2_133ac, 4
  store i1 %v12_133b4, i1* %cpsr_z.global-to-local, align 1
  %v5_133b8 = icmp slt i32 %v2_133ac, 4
  %v6_133b8 = load i32, i32* @r1, align 4
  %v7_133b8 = inttoptr i32 %v6_133b8 to i32*
  %v8_133b8 = load i32, i32* %v7_133b8, align 4
  store i32 %v8_133b8, i32* %r3.global-to-local, align 4
  %v10_133b8 = add i32 %v6_133b8, 4
  br i1 %v5_133b8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_133b4
  store i32 %v10_133b8, i32* @r1, align 4
  %v8_133bc = inttoptr i32 %v7_133bc to i32*
  store i32 %v8_133b8, i32* %v8_133bc, align 4
  %v9_133bc = load i32, i32* @r0, align 4
  %v10_133bc = add i32 %v9_133bc, 4
  store i32 %v10_133bc, i32* @r0, align 4
  %v0_133cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_133b4
  %v10_133c0 = inttoptr i32 %v10_133b8 to i32*
  %v11_133c0 = load i32, i32* %v10_133c0, align 4
  store i32 %v11_133c0, i32* @ip, align 4
  %v12_133c0 = add i32 %v6_133b8, 8
  store i32 %v12_133c0, i32* @r1, align 4
  %v7_133c4 = inttoptr i32 %v7_133bc to i32*
  store i32 %v8_133b8, i32* %v7_133c4, align 4
  %v9_133c4 = add i32 %v7_133bc, 4
  %v10_133c4 = inttoptr i32 %v9_133c4 to i32*
  %v11_133c4 = load i32, i32* @ip, align 4
  store i32 %v11_133c4, i32* %v10_133c4, align 4
  %v12_133c4 = add i32 %v7_133bc, 8
  store i32 %v12_133c4, i32* @r0, align 4
  %v6_133c8 = load i32, i32* %r2.global-to-local, align 4
  %v7_133c8 = add i32 %v6_133c8, -4
  store i32 %v7_133c8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_133ac, %bb, %dec_label_pc_13574, %dec_label_pc_13508, %dec_label_pc_1349c, %bb130
  %v2_133dc = phi i32 [ %v10_133bc, %.thread5 ], [ %v0_1346c75, %.thread11 ], [ %v7_133bc, %dec_label_pc_133ac ], [ %v1_13330, %bb ], [ %v2_133dc113, %dec_label_pc_13574 ], [ %v2_133dc112, %dec_label_pc_13508 ], [ %v2_133dc111, %dec_label_pc_1349c ], [ %v12_133c4, %bb130 ]
  %v0_133cc = phi i32 [ %v0_133cc.pre, %.thread5 ], [ %v2_13414, %.thread11 ], [ %v2_133ac, %dec_label_pc_133ac ], [ %v2_13340, %bb ], [ %v0_133cc109, %dec_label_pc_13574 ], [ %v0_133cc108, %dec_label_pc_13508 ], [ %v0_133cc107, %dec_label_pc_1349c ], [ %v7_133c8, %bb130 ]
  %v1_133cc = add i32 %v0_133cc, 4
  store i32 %v1_133cc, i32* %r2.global-to-local, align 4
  %v3_133cc = sub i32 0, %v0_133cc
  %v4_133cc = and i32 %v1_133cc, %v3_133cc
  %v5_133cc = icmp slt i32 %v4_133cc, 0
  store i1 %v5_133cc, i1* %cpsr_v.global-to-local, align 1
  %v6_133cc = icmp slt i32 %v1_133cc, 0
  store i1 %v6_133cc, i1* %cpsr_n.global-to-local, align 1
  %v7_133cc = icmp eq i32 %v1_133cc, 0
  store i1 %v7_133cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_133cc, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_133d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_133d0, i32* %r0.global-to-local, align 4
  ret i32 %v3_133d0

bb133:                                            ; preds = %bb131
  %v1_133d4 = add i32 %v0_133cc, 2
  %v3_133d4 = sub i32 -3, %v0_133cc
  %v4_133d4 = and i32 %v3_133d4, %v1_133cc
  %v5_133d4 = icmp slt i32 %v4_133d4, 0
  store i1 %v5_133d4, i1* %cpsr_v.global-to-local, align 1
  %v6_133d4 = icmp slt i32 %v1_133d4, 0
  store i1 %v6_133d4, i1* %cpsr_n.global-to-local, align 1
  %v7_133d4 = icmp eq i32 %v1_133cc, 2
  store i1 %v7_133d4, i1* %cpsr_z.global-to-local, align 1
  %v0_133d8 = load i32, i32* @r1, align 4
  %v1_133d8 = inttoptr i32 %v0_133d8 to i8*
  %v2_133d8 = load i8, i8* %v1_133d8, align 1
  %v3_133d8 = zext i8 %v2_133d8 to i32
  store i32 %v3_133d8, i32* %r3.global-to-local, align 4
  %v5_133d8 = add i32 %v0_133d8, 1
  store i32 %v5_133d8, i32* %r1.global-to-local, align 4
  %v3_133dc = inttoptr i32 %v2_133dc to i8*
  store i8 %v2_133d8, i8* %v3_133dc, align 1
  %v4_133dc = load i32, i32* @r0, align 4
  %v5_133dc = add i32 %v4_133dc, 1
  store i32 %v5_133dc, i32* %r0.global-to-local, align 4
  %v0_133e0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_133e0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_133e0 = xor i1 %v0_133e0, %v1_133e0
  br i1 %v2_133e0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_133e0 = load i32, i32* %r1.global-to-local, align 4
  %v4_133e0 = inttoptr i32 %v3_133e0 to i8*
  %v5_133e0 = load i8, i8* %v4_133e0, align 1
  %v6_133e0 = zext i8 %v5_133e0 to i32
  store i32 %v6_133e0, i32* %r3.global-to-local, align 4
  %v8_133e0 = add i32 %v3_133e0, 1
  store i32 %v8_133e0, i32* %r1.global-to-local, align 4
  %v6_133e4 = inttoptr i32 %v5_133dc to i8*
  store i8 %v5_133e0, i8* %v6_133e4, align 1
  %v7_133e4 = load i32, i32* %r0.global-to-local, align 4
  %v8_133e4 = add i32 %v7_133e4, 1
  store i32 %v8_133e4, i32* %r0.global-to-local, align 4
  %v1_133e8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_133e8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_133ec = phi i32 [ %v8_133e4, %bb134 ], [ %v5_133dc, %bb133 ]
  %v2_133ec = phi i1 [ %v2_133e8.pre, %bb134 ], [ %v1_133e0, %bb133 ]
  %v1_133ec = phi i1 [ %v1_133e8.pre, %bb134 ], [ %v0_133e0, %bb133 ]
  %v0_133e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_133e8 = xor i1 %v2_133ec, %v1_133ec
  %v4_133e8 = or i1 %v0_133e8, %v3_133e8
  br i1 %v4_133e8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_133e8 = load i32, i32* %r1.global-to-local, align 4
  %v6_133e8 = inttoptr i32 %v5_133e8 to i8*
  %v7_133e8 = load i8, i8* %v6_133e8, align 1
  %v8_133e8 = zext i8 %v7_133e8 to i32
  store i32 %v8_133e8, i32* %r3.global-to-local, align 4
  %v10_133e8 = add i32 %v5_133e8, 1
  store i32 %v10_133e8, i32* %r1.global-to-local, align 4
  %v8_133ec = inttoptr i32 %v7_133ec to i8*
  store i8 %v7_133e8, i8* %v8_133ec, align 1
  %v9_133ec = load i32, i32* %r0.global-to-local, align 4
  %v10_133ec = add i32 %v9_133ec, 1
  store i32 %v10_133ec, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_133f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_133f0, i32* %r0.global-to-local, align 4
  ret i32 %v2_133f0

dec_label_pc_133f4:                               ; preds = %dec_label_pc_13348
  %v1_133f4 = sub nsw i32 4, %v1_13348
  store i32 %v1_133f4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_133f8 = icmp ult i32 %v1_133f4, 2
  store i1 %v8_133f8, i1* %cpsr_n.global-to-local, align 1
  %v9_133f8 = icmp eq i32 %v1_133f4, 2
  store i1 %v9_133f8, i1* %cpsr_z.global-to-local, align 1
  %v1_133fc = inttoptr i32 %v0_13330 to i8*
  %v2_133fc = load i8, i8* %v1_133fc, align 1
  %v3_133fc = zext i8 %v2_133fc to i32
  store i32 %v3_133fc, i32* %r3.global-to-local, align 4
  %v5_133fc = add i32 %v0_13330, 1
  store i32 %v5_133fc, i32* @r1, align 4
  %v3_13400 = inttoptr i32 %v1_13330 to i8*
  store i8 %v2_133fc, i8* %v3_13400, align 1
  %v4_13400 = load i32, i32* @r0, align 4
  %v5_13400 = add i32 %v4_13400, 1
  store i32 %v5_13400, i32* @r0, align 4
  br i1 %v8_133f8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_133f4
  %v6_13404 = load i32, i32* @r1, align 4
  %v7_13404 = inttoptr i32 %v6_13404 to i8*
  %v8_13404 = load i8, i8* %v7_13404, align 1
  %v9_13404 = zext i8 %v8_13404 to i32
  store i32 %v9_13404, i32* %r3.global-to-local, align 4
  %v11_13404 = add i32 %v6_13404, 1
  store i32 %v11_13404, i32* @r1, align 4
  %v9_13408 = inttoptr i32 %v5_13400 to i8*
  store i8 %v8_13404, i8* %v9_13408, align 1
  %v10_13408 = load i32, i32* @r0, align 4
  %v11_13408 = add i32 %v10_13408, 1
  store i32 %v11_13408, i32* @r0, align 4
  br i1 %v9_133f8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1340c = load i32, i32* @r1, align 4
  %v9_1340c = inttoptr i32 %v8_1340c to i8*
  %v10_1340c = load i8, i8* %v9_1340c, align 1
  %v11_1340c = zext i8 %v10_1340c to i32
  store i32 %v11_1340c, i32* %r3.global-to-local, align 4
  %v13_1340c = add i32 %v8_1340c, 1
  store i32 %v13_1340c, i32* @r1, align 4
  %v11_13410 = inttoptr i32 %v11_13408 to i8*
  store i8 %v10_1340c, i8* %v11_13410, align 1
  %v12_13410 = load i32, i32* @r0, align 4
  %v13_13410 = add i32 %v12_13410, 1
  store i32 %v13_13410, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_133f4, %bb137
  %v0_1346c75 = phi i32 [ %v11_13408, %bb136 ], [ %v5_13400, %dec_label_pc_133f4 ], [ %v13_13410, %bb137 ]
  %v0_13414 = load i32, i32* %r2.global-to-local, align 4
  %v1_13414 = load i32, i32* @ip, align 4
  %v2_13414 = sub i32 %v0_13414, %v1_13414
  store i32 %v2_13414, i32* %r2.global-to-local, align 4
  %v4_13414 = xor i32 %v1_13414, %v0_13414
  %v5_13414 = xor i32 %v2_13414, %v0_13414
  %v6_13414 = and i32 %v5_13414, %v4_13414
  %v7_13414 = icmp slt i32 %v6_13414, 0
  store i1 %v7_13414, i1* %cpsr_v.global-to-local, align 1
  %v8_13414 = icmp slt i32 %v2_13414, 0
  store i1 %v8_13414, i1* %cpsr_n.global-to-local, align 1
  %v9_13414 = icmp eq i32 %v0_13414, %v1_13414
  store i1 %v9_13414, i1* %cpsr_z.global-to-local, align 1
  %v5_13418 = icmp slt i32 %v0_13414, %v1_13414
  br i1 %v5_13418, label %bb131, label %dec_label_pc_1341c

dec_label_pc_1341c:                               ; preds = %.thread11
  %v0_1341c = load i32, i32* @r1, align 4
  %v1_1341c = urem i32 %v0_1341c, 4
  store i32 %v1_1341c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1341c = icmp eq i32 %v1_1341c, 0
  store i1 %v2_1341c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1341c to i2
  br i1 %v2_1341c, label %dec_label_pc_13358, label %dec_label_pc_13424

dec_label_pc_13424:                               ; preds = %dec_label_pc_13350, %dec_label_pc_1341c
  %v0_1346c74 = phi i32 [ %v1_13330, %dec_label_pc_13350 ], [ %v0_1346c75, %dec_label_pc_1341c ]
  %v0_13518 = phi i32 [ %v2_13340, %dec_label_pc_13350 ], [ %v2_13414, %dec_label_pc_1341c ]
  %v0_1342c.off0 = phi i2 [ %extract.t, %dec_label_pc_13350 ], [ %extract.t123, %dec_label_pc_1341c ]
  %v0_13424 = phi i32 [ %v0_13330, %dec_label_pc_13350 ], [ %v0_1341c, %dec_label_pc_1341c ]
  %v1_13424 = and i32 %v0_13424, -4
  store i32 %v1_13424, i32* %r1.global-to-local, align 4
  %v1_13428 = inttoptr i32 %v1_13424 to i32*
  %v2_13428 = load i32, i32* %v1_13428, align 4
  store i32 %v2_13428, i32* @lr, align 4
  %v4_13428 = add i32 %v1_13424, 4
  store i32 %v4_13428, i32* %r1.global-to-local, align 4
  %v2_13510 = add i32 %v0_13518, -12
  %v4_13510 = sub i32 11, %v0_13518
  %v5_13510 = and i32 %v4_13510, %v0_13518
  %v6_13510 = icmp slt i32 %v5_13510, 0
  store i1 %v6_13510, i1* %cpsr_v.global-to-local, align 1
  %v7_13510 = icmp slt i32 %v2_13510, 0
  store i1 %v7_13510, i1* %cpsr_n.global-to-local, align 1
  %v8_13510 = icmp eq i32 %v0_13518, 12
  store i1 %v8_13510, i1* %cpsr_z.global-to-local, align 1
  %v5_13514 = icmp slt i32 %v0_13518, 12
  switch i2 %v0_1342c.off0, label %dec_label_pc_13438 [
    i2 -1, label %dec_label_pc_13510
    i2 -2, label %dec_label_pc_134a4
  ]

dec_label_pc_13438:                               ; preds = %dec_label_pc_13424
  br i1 %v5_13514, label %dec_label_pc_13484, label %dec_label_pc_13440

dec_label_pc_13440:                               ; preds = %dec_label_pc_13438
  store i32 %v2_13510, i32* %r2.global-to-local, align 4
  %v3_13444 = load i32, i32* @r4, align 4
  store i32 %v3_13444, i32* %stack_var_-16, align 4
  %v6_13444 = load i32, i32* @r5, align 4
  store i32 %v6_13444, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13448

dec_label_pc_13448:                               ; preds = %dec_label_pc_13448.dec_label_pc_13448_crit_edge, %dec_label_pc_13440
  %v0_1346c = phi i32 [ %v12_1346c, %dec_label_pc_13448.dec_label_pc_13448_crit_edge ], [ %v0_1346c74, %dec_label_pc_13440 ]
  %v0_1344c = phi i32 [ %v0_1344c.pre, %dec_label_pc_13448.dec_label_pc_13448_crit_edge ], [ %v4_13428, %dec_label_pc_13440 ]
  %v0_13448 = phi i32 [ %v0_13448.pre, %dec_label_pc_13448.dec_label_pc_13448_crit_edge ], [ %v2_13428, %dec_label_pc_13440 ]
  %v3_13448 = udiv i32 %v0_13448, 256
  store i32 %v3_13448, i32* %r3.global-to-local, align 4
  %v1_1344c = inttoptr i32 %v0_1344c to i32*
  %v2_1344c = load i32, i32* %v1_1344c, align 4
  store i32 %v2_1344c, i32* %r4.global-to-local, align 4
  %v3_1344c = add i32 %v0_1344c, 4
  %v4_1344c = inttoptr i32 %v3_1344c to i32*
  %v5_1344c = load i32, i32* %v4_1344c, align 4
  store i32 %v5_1344c, i32* %r5.global-to-local, align 4
  %v6_1344c = add i32 %v0_1344c, 8
  %v7_1344c = inttoptr i32 %v6_1344c to i32*
  %v8_1344c = load i32, i32* %v7_1344c, align 4
  store i32 %v8_1344c, i32* %ip.global-to-local, align 4
  %v9_1344c = add i32 %v0_1344c, 12
  %v10_1344c = inttoptr i32 %v9_1344c to i32*
  %v11_1344c = load i32, i32* %v10_1344c, align 4
  store i32 %v11_1344c, i32* @lr, align 4
  %v12_1344c = add i32 %v0_1344c, 16
  store i32 %v12_1344c, i32* %r1.global-to-local, align 4
  %v4_13450 = mul i32 %v2_1344c, 16777216
  %v5_13450 = or i32 %v4_13450, %v3_13448
  store i32 %v5_13450, i32* %r3.global-to-local, align 4
  %v3_13454 = udiv i32 %v2_1344c, 256
  %v4_13458 = mul i32 %v5_1344c, 16777216
  %v5_13458 = or i32 %v4_13458, %v3_13454
  store i32 %v5_13458, i32* %r4.global-to-local, align 4
  %v3_1345c = udiv i32 %v5_1344c, 256
  %v4_13460 = mul i32 %v8_1344c, 16777216
  %v5_13460 = or i32 %v4_13460, %v3_1345c
  store i32 %v5_13460, i32* %r5.global-to-local, align 4
  %v3_13464 = udiv i32 %v8_1344c, 256
  %v4_13468 = mul i32 %v11_1344c, 16777216
  %v5_13468 = or i32 %v4_13468, %v3_13464
  store i32 %v5_13468, i32* @ip, align 4
  %v1_1346c = inttoptr i32 %v0_1346c to i32*
  store i32 %v5_13450, i32* %v1_1346c, align 4
  %v3_1346c = add i32 %v0_1346c, 4
  %v4_1346c = inttoptr i32 %v3_1346c to i32*
  %v5_1346c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1346c, i32* %v4_1346c, align 4
  %v6_1346c = add i32 %v0_1346c, 8
  %v7_1346c = inttoptr i32 %v6_1346c to i32*
  %v8_1346c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1346c, i32* %v7_1346c, align 4
  %v9_1346c = add i32 %v0_1346c, 12
  %v10_1346c = inttoptr i32 %v9_1346c to i32*
  %v11_1346c = load i32, i32* @ip, align 4
  store i32 %v11_1346c, i32* %v10_1346c, align 4
  %v12_1346c = add i32 %v0_1346c, 16
  store i32 %v12_1346c, i32* @r0, align 4
  %v0_13470 = load i32, i32* %r2.global-to-local, align 4
  %v2_13470 = add i32 %v0_13470, -16
  store i32 %v2_13470, i32* %r2.global-to-local, align 4
  %v6_13474 = icmp slt i32 %v0_13470, 16
  br i1 %v6_13474, label %dec_label_pc_13478, label %dec_label_pc_13448.dec_label_pc_13448_crit_edge

dec_label_pc_13448.dec_label_pc_13448_crit_edge:  ; preds = %dec_label_pc_13448
  %v0_13448.pre = load i32, i32* @lr, align 4
  %v0_1344c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13448

dec_label_pc_13478:                               ; preds = %dec_label_pc_13448
  %v2_13478 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13478, i32* @r4, align 4
  %v5_13478 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13478, i32* @r5, align 4
  %v2_1347c = add i32 %v0_13470, -4
  store i32 %v2_1347c, i32* %r2.global-to-local, align 4
  %v4_1347c = add i32 %v0_13470, 2147483632
  %v5_1347c = and i32 %v2_1347c, %v4_1347c
  %v6_1347c = icmp slt i32 %v5_1347c, 0
  store i1 %v6_1347c, i1* %cpsr_v.global-to-local, align 1
  %v7_1347c = icmp slt i32 %v2_1347c, 0
  store i1 %v7_1347c, i1* %cpsr_n.global-to-local, align 1
  %v8_1347c = icmp eq i32 %v2_1347c, 0
  store i1 %v8_1347c, i1* %cpsr_z.global-to-local, align 1
  %v5_13480 = icmp slt i32 %v2_13470, -12
  br i1 %v5_13480, label %dec_label_pc_1349c, label %dec_label_pc_13484

dec_label_pc_13484:                               ; preds = %dec_label_pc_13478, %dec_label_pc_13438, %dec_label_pc_13484
  %v1_13490 = phi i32 [ %v4_13490, %dec_label_pc_13484 ], [ %v12_1346c, %dec_label_pc_13478 ], [ %v0_1346c74, %dec_label_pc_13438 ]
  %v0_13484 = load i32, i32* @lr, align 4
  %v3_13484 = udiv i32 %v0_13484, 256
  store i32 %v3_13484, i32* %ip.global-to-local, align 4
  %v0_13488 = load i32, i32* %r1.global-to-local, align 4
  %v1_13488 = inttoptr i32 %v0_13488 to i32*
  %v2_13488 = load i32, i32* %v1_13488, align 4
  store i32 %v2_13488, i32* @lr, align 4
  %v4_13488 = add i32 %v0_13488, 4
  store i32 %v4_13488, i32* %r1.global-to-local, align 4
  %v4_1348c = mul i32 %v2_13488, 16777216
  %v5_1348c = or i32 %v4_1348c, %v3_13484
  store i32 %v5_1348c, i32* @ip, align 4
  %v2_13490 = inttoptr i32 %v1_13490 to i32*
  store i32 %v5_1348c, i32* %v2_13490, align 4
  %v3_13490 = load i32, i32* @r0, align 4
  %v4_13490 = add i32 %v3_13490, 4
  store i32 %v4_13490, i32* @r0, align 4
  %v0_13494 = load i32, i32* %r2.global-to-local, align 4
  %v2_13494 = add i32 %v0_13494, -4
  store i32 %v2_13494, i32* %r2.global-to-local, align 4
  %v6_13498 = icmp slt i32 %v0_13494, 4
  br i1 %v6_13498, label %dec_label_pc_1349c.loopexit, label %dec_label_pc_13484

dec_label_pc_1349c.loopexit:                      ; preds = %dec_label_pc_13484
  %v4_13494 = sub i32 3, %v0_13494
  %v5_13494 = and i32 %v4_13494, %v0_13494
  %v6_13494 = icmp slt i32 %v5_13494, 0
  %v7_13494 = icmp slt i32 %v2_13494, 0
  store i1 %v6_13494, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13494, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1349c

dec_label_pc_1349c:                               ; preds = %dec_label_pc_1349c.loopexit, %dec_label_pc_13478
  %v2_133dc111 = phi i32 [ %v4_13490, %dec_label_pc_1349c.loopexit ], [ %v12_1346c, %dec_label_pc_13478 ]
  %v0_133cc107 = phi i32 [ %v2_13494, %dec_label_pc_1349c.loopexit ], [ %v2_1347c, %dec_label_pc_13478 ]
  %v0_1349c = load i32, i32* %r1.global-to-local, align 4
  %v1_1349c = add i32 %v0_1349c, -3
  store i32 %v1_1349c, i32* @r1, align 4
  br label %bb131

dec_label_pc_134a4:                               ; preds = %dec_label_pc_13424
  br i1 %v5_13514, label %dec_label_pc_134f0, label %dec_label_pc_134ac

dec_label_pc_134ac:                               ; preds = %dec_label_pc_134a4
  store i32 %v2_13510, i32* %r2.global-to-local, align 4
  %v3_134b0 = load i32, i32* @r4, align 4
  store i32 %v3_134b0, i32* %stack_var_-16, align 4
  %v6_134b0 = load i32, i32* @r5, align 4
  store i32 %v6_134b0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_134b4

dec_label_pc_134b4:                               ; preds = %dec_label_pc_134b4.dec_label_pc_134b4_crit_edge, %dec_label_pc_134ac
  %v0_134d8 = phi i32 [ %v12_134d8, %dec_label_pc_134b4.dec_label_pc_134b4_crit_edge ], [ %v0_1346c74, %dec_label_pc_134ac ]
  %v0_134b8 = phi i32 [ %v0_134b8.pre, %dec_label_pc_134b4.dec_label_pc_134b4_crit_edge ], [ %v4_13428, %dec_label_pc_134ac ]
  %v0_134b4 = phi i32 [ %v0_134b4.pre, %dec_label_pc_134b4.dec_label_pc_134b4_crit_edge ], [ %v2_13428, %dec_label_pc_134ac ]
  %v3_134b4 = udiv i32 %v0_134b4, 65536
  store i32 %v3_134b4, i32* %r3.global-to-local, align 4
  %v1_134b8 = inttoptr i32 %v0_134b8 to i32*
  %v2_134b8 = load i32, i32* %v1_134b8, align 4
  store i32 %v2_134b8, i32* %r4.global-to-local, align 4
  %v3_134b8 = add i32 %v0_134b8, 4
  %v4_134b8 = inttoptr i32 %v3_134b8 to i32*
  %v5_134b8 = load i32, i32* %v4_134b8, align 4
  store i32 %v5_134b8, i32* %r5.global-to-local, align 4
  %v6_134b8 = add i32 %v0_134b8, 8
  %v7_134b8 = inttoptr i32 %v6_134b8 to i32*
  %v8_134b8 = load i32, i32* %v7_134b8, align 4
  store i32 %v8_134b8, i32* %ip.global-to-local, align 4
  %v9_134b8 = add i32 %v0_134b8, 12
  %v10_134b8 = inttoptr i32 %v9_134b8 to i32*
  %v11_134b8 = load i32, i32* %v10_134b8, align 4
  store i32 %v11_134b8, i32* @lr, align 4
  %v12_134b8 = add i32 %v0_134b8, 16
  store i32 %v12_134b8, i32* %r1.global-to-local, align 4
  %v4_134bc = mul i32 %v2_134b8, 65536
  %v5_134bc = or i32 %v4_134bc, %v3_134b4
  store i32 %v5_134bc, i32* %r3.global-to-local, align 4
  %v3_134c0 = udiv i32 %v2_134b8, 65536
  %v4_134c4 = mul i32 %v5_134b8, 65536
  %v5_134c4 = or i32 %v4_134c4, %v3_134c0
  store i32 %v5_134c4, i32* %r4.global-to-local, align 4
  %v3_134c8 = udiv i32 %v5_134b8, 65536
  %v4_134cc = mul i32 %v8_134b8, 65536
  %v5_134cc = or i32 %v4_134cc, %v3_134c8
  store i32 %v5_134cc, i32* %r5.global-to-local, align 4
  %v3_134d0 = udiv i32 %v8_134b8, 65536
  %v4_134d4 = mul i32 %v11_134b8, 65536
  %v5_134d4 = or i32 %v4_134d4, %v3_134d0
  store i32 %v5_134d4, i32* @ip, align 4
  %v1_134d8 = inttoptr i32 %v0_134d8 to i32*
  store i32 %v5_134bc, i32* %v1_134d8, align 4
  %v3_134d8 = add i32 %v0_134d8, 4
  %v4_134d8 = inttoptr i32 %v3_134d8 to i32*
  %v5_134d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_134d8, i32* %v4_134d8, align 4
  %v6_134d8 = add i32 %v0_134d8, 8
  %v7_134d8 = inttoptr i32 %v6_134d8 to i32*
  %v8_134d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_134d8, i32* %v7_134d8, align 4
  %v9_134d8 = add i32 %v0_134d8, 12
  %v10_134d8 = inttoptr i32 %v9_134d8 to i32*
  %v11_134d8 = load i32, i32* @ip, align 4
  store i32 %v11_134d8, i32* %v10_134d8, align 4
  %v12_134d8 = add i32 %v0_134d8, 16
  store i32 %v12_134d8, i32* @r0, align 4
  %v0_134dc = load i32, i32* %r2.global-to-local, align 4
  %v2_134dc = add i32 %v0_134dc, -16
  store i32 %v2_134dc, i32* %r2.global-to-local, align 4
  %v6_134e0 = icmp slt i32 %v0_134dc, 16
  br i1 %v6_134e0, label %dec_label_pc_134e4, label %dec_label_pc_134b4.dec_label_pc_134b4_crit_edge

dec_label_pc_134b4.dec_label_pc_134b4_crit_edge:  ; preds = %dec_label_pc_134b4
  %v0_134b4.pre = load i32, i32* @lr, align 4
  %v0_134b8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_134b4

dec_label_pc_134e4:                               ; preds = %dec_label_pc_134b4
  %v2_134e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_134e4, i32* @r4, align 4
  %v5_134e4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_134e4, i32* @r5, align 4
  %v2_134e8 = add i32 %v0_134dc, -4
  store i32 %v2_134e8, i32* %r2.global-to-local, align 4
  %v4_134e8 = add i32 %v0_134dc, 2147483632
  %v5_134e8 = and i32 %v2_134e8, %v4_134e8
  %v6_134e8 = icmp slt i32 %v5_134e8, 0
  store i1 %v6_134e8, i1* %cpsr_v.global-to-local, align 1
  %v7_134e8 = icmp slt i32 %v2_134e8, 0
  store i1 %v7_134e8, i1* %cpsr_n.global-to-local, align 1
  %v8_134e8 = icmp eq i32 %v2_134e8, 0
  store i1 %v8_134e8, i1* %cpsr_z.global-to-local, align 1
  %v5_134ec = icmp slt i32 %v2_134dc, -12
  br i1 %v5_134ec, label %dec_label_pc_13508, label %dec_label_pc_134f0

dec_label_pc_134f0:                               ; preds = %dec_label_pc_134e4, %dec_label_pc_134a4, %dec_label_pc_134f0
  %v1_134fc = phi i32 [ %v4_134fc, %dec_label_pc_134f0 ], [ %v12_134d8, %dec_label_pc_134e4 ], [ %v0_1346c74, %dec_label_pc_134a4 ]
  %v0_134f0 = load i32, i32* @lr, align 4
  %v3_134f0 = udiv i32 %v0_134f0, 65536
  store i32 %v3_134f0, i32* %ip.global-to-local, align 4
  %v0_134f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_134f4 = inttoptr i32 %v0_134f4 to i32*
  %v2_134f4 = load i32, i32* %v1_134f4, align 4
  store i32 %v2_134f4, i32* @lr, align 4
  %v4_134f4 = add i32 %v0_134f4, 4
  store i32 %v4_134f4, i32* %r1.global-to-local, align 4
  %v4_134f8 = mul i32 %v2_134f4, 65536
  %v5_134f8 = or i32 %v4_134f8, %v3_134f0
  store i32 %v5_134f8, i32* @ip, align 4
  %v2_134fc = inttoptr i32 %v1_134fc to i32*
  store i32 %v5_134f8, i32* %v2_134fc, align 4
  %v3_134fc = load i32, i32* @r0, align 4
  %v4_134fc = add i32 %v3_134fc, 4
  store i32 %v4_134fc, i32* @r0, align 4
  %v0_13500 = load i32, i32* %r2.global-to-local, align 4
  %v2_13500 = add i32 %v0_13500, -4
  store i32 %v2_13500, i32* %r2.global-to-local, align 4
  %v6_13504 = icmp slt i32 %v0_13500, 4
  br i1 %v6_13504, label %dec_label_pc_13508.loopexit, label %dec_label_pc_134f0

dec_label_pc_13508.loopexit:                      ; preds = %dec_label_pc_134f0
  %v4_13500 = sub i32 3, %v0_13500
  %v5_13500 = and i32 %v4_13500, %v0_13500
  %v6_13500 = icmp slt i32 %v5_13500, 0
  %v7_13500 = icmp slt i32 %v2_13500, 0
  store i1 %v6_13500, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13500, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %dec_label_pc_13508.loopexit, %dec_label_pc_134e4
  %v2_133dc112 = phi i32 [ %v4_134fc, %dec_label_pc_13508.loopexit ], [ %v12_134d8, %dec_label_pc_134e4 ]
  %v0_133cc108 = phi i32 [ %v2_13500, %dec_label_pc_13508.loopexit ], [ %v2_134e8, %dec_label_pc_134e4 ]
  %v0_13508 = load i32, i32* %r1.global-to-local, align 4
  %v1_13508 = add i32 %v0_13508, -2
  store i32 %v1_13508, i32* @r1, align 4
  br label %bb131

dec_label_pc_13510:                               ; preds = %dec_label_pc_13424
  br i1 %v5_13514, label %dec_label_pc_1355c, label %dec_label_pc_13518

dec_label_pc_13518:                               ; preds = %dec_label_pc_13510
  store i32 %v2_13510, i32* %r2.global-to-local, align 4
  %v3_1351c = load i32, i32* @r4, align 4
  store i32 %v3_1351c, i32* %stack_var_-16, align 4
  %v6_1351c = load i32, i32* @r5, align 4
  store i32 %v6_1351c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13520

dec_label_pc_13520:                               ; preds = %dec_label_pc_13520.dec_label_pc_13520_crit_edge, %dec_label_pc_13518
  %v0_13544 = phi i32 [ %v12_13544, %dec_label_pc_13520.dec_label_pc_13520_crit_edge ], [ %v0_1346c74, %dec_label_pc_13518 ]
  %v0_13524 = phi i32 [ %v0_13524.pre, %dec_label_pc_13520.dec_label_pc_13520_crit_edge ], [ %v4_13428, %dec_label_pc_13518 ]
  %v0_13520 = phi i32 [ %v0_13520.pre, %dec_label_pc_13520.dec_label_pc_13520_crit_edge ], [ %v2_13428, %dec_label_pc_13518 ]
  %v3_13520 = udiv i32 %v0_13520, 16777216
  store i32 %v3_13520, i32* %r3.global-to-local, align 4
  %v1_13524 = inttoptr i32 %v0_13524 to i32*
  %v2_13524 = load i32, i32* %v1_13524, align 4
  store i32 %v2_13524, i32* %r4.global-to-local, align 4
  %v3_13524 = add i32 %v0_13524, 4
  %v4_13524 = inttoptr i32 %v3_13524 to i32*
  %v5_13524 = load i32, i32* %v4_13524, align 4
  store i32 %v5_13524, i32* %r5.global-to-local, align 4
  %v6_13524 = add i32 %v0_13524, 8
  %v7_13524 = inttoptr i32 %v6_13524 to i32*
  %v8_13524 = load i32, i32* %v7_13524, align 4
  store i32 %v8_13524, i32* %ip.global-to-local, align 4
  %v9_13524 = add i32 %v0_13524, 12
  %v10_13524 = inttoptr i32 %v9_13524 to i32*
  %v11_13524 = load i32, i32* %v10_13524, align 4
  store i32 %v11_13524, i32* @lr, align 4
  %v12_13524 = add i32 %v0_13524, 16
  store i32 %v12_13524, i32* %r1.global-to-local, align 4
  %v4_13528 = mul i32 %v2_13524, 256
  %v5_13528 = or i32 %v4_13528, %v3_13520
  store i32 %v5_13528, i32* %r3.global-to-local, align 4
  %v3_1352c = udiv i32 %v2_13524, 16777216
  %v4_13530 = mul i32 %v5_13524, 256
  %v5_13530 = or i32 %v4_13530, %v3_1352c
  store i32 %v5_13530, i32* %r4.global-to-local, align 4
  %v3_13534 = udiv i32 %v5_13524, 16777216
  %v4_13538 = mul i32 %v8_13524, 256
  %v5_13538 = or i32 %v4_13538, %v3_13534
  store i32 %v5_13538, i32* %r5.global-to-local, align 4
  %v3_1353c = udiv i32 %v8_13524, 16777216
  %v4_13540 = mul i32 %v11_13524, 256
  %v5_13540 = or i32 %v4_13540, %v3_1353c
  store i32 %v5_13540, i32* @ip, align 4
  %v1_13544 = inttoptr i32 %v0_13544 to i32*
  store i32 %v5_13528, i32* %v1_13544, align 4
  %v3_13544 = add i32 %v0_13544, 4
  %v4_13544 = inttoptr i32 %v3_13544 to i32*
  %v5_13544 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13544, i32* %v4_13544, align 4
  %v6_13544 = add i32 %v0_13544, 8
  %v7_13544 = inttoptr i32 %v6_13544 to i32*
  %v8_13544 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13544, i32* %v7_13544, align 4
  %v9_13544 = add i32 %v0_13544, 12
  %v10_13544 = inttoptr i32 %v9_13544 to i32*
  %v11_13544 = load i32, i32* @ip, align 4
  store i32 %v11_13544, i32* %v10_13544, align 4
  %v12_13544 = add i32 %v0_13544, 16
  store i32 %v12_13544, i32* @r0, align 4
  %v0_13548 = load i32, i32* %r2.global-to-local, align 4
  %v2_13548 = add i32 %v0_13548, -16
  store i32 %v2_13548, i32* %r2.global-to-local, align 4
  %v6_1354c = icmp slt i32 %v0_13548, 16
  br i1 %v6_1354c, label %dec_label_pc_13550, label %dec_label_pc_13520.dec_label_pc_13520_crit_edge

dec_label_pc_13520.dec_label_pc_13520_crit_edge:  ; preds = %dec_label_pc_13520
  %v0_13520.pre = load i32, i32* @lr, align 4
  %v0_13524.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13520

dec_label_pc_13550:                               ; preds = %dec_label_pc_13520
  %v2_13550 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13550, i32* @r4, align 4
  %v5_13550 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13550, i32* @r5, align 4
  %v2_13554 = add i32 %v0_13548, -4
  store i32 %v2_13554, i32* %r2.global-to-local, align 4
  %v4_13554 = add i32 %v0_13548, 2147483632
  %v5_13554 = and i32 %v2_13554, %v4_13554
  %v6_13554 = icmp slt i32 %v5_13554, 0
  store i1 %v6_13554, i1* %cpsr_v.global-to-local, align 1
  %v7_13554 = icmp slt i32 %v2_13554, 0
  store i1 %v7_13554, i1* %cpsr_n.global-to-local, align 1
  %v8_13554 = icmp eq i32 %v2_13554, 0
  store i1 %v8_13554, i1* %cpsr_z.global-to-local, align 1
  %v5_13558 = icmp slt i32 %v2_13548, -12
  br i1 %v5_13558, label %dec_label_pc_13574, label %dec_label_pc_1355c

dec_label_pc_1355c:                               ; preds = %dec_label_pc_13550, %dec_label_pc_13510, %dec_label_pc_1355c
  %v1_13568 = phi i32 [ %v4_13568, %dec_label_pc_1355c ], [ %v12_13544, %dec_label_pc_13550 ], [ %v0_1346c74, %dec_label_pc_13510 ]
  %v0_1355c = load i32, i32* @lr, align 4
  %v3_1355c = udiv i32 %v0_1355c, 16777216
  store i32 %v3_1355c, i32* %ip.global-to-local, align 4
  %v0_13560 = load i32, i32* %r1.global-to-local, align 4
  %v1_13560 = inttoptr i32 %v0_13560 to i32*
  %v2_13560 = load i32, i32* %v1_13560, align 4
  store i32 %v2_13560, i32* @lr, align 4
  %v4_13560 = add i32 %v0_13560, 4
  store i32 %v4_13560, i32* %r1.global-to-local, align 4
  %v4_13564 = mul i32 %v2_13560, 256
  %v5_13564 = or i32 %v4_13564, %v3_1355c
  store i32 %v5_13564, i32* @ip, align 4
  %v2_13568 = inttoptr i32 %v1_13568 to i32*
  store i32 %v5_13564, i32* %v2_13568, align 4
  %v3_13568 = load i32, i32* @r0, align 4
  %v4_13568 = add i32 %v3_13568, 4
  store i32 %v4_13568, i32* @r0, align 4
  %v0_1356c = load i32, i32* %r2.global-to-local, align 4
  %v2_1356c = add i32 %v0_1356c, -4
  store i32 %v2_1356c, i32* %r2.global-to-local, align 4
  %v6_13570 = icmp slt i32 %v0_1356c, 4
  br i1 %v6_13570, label %dec_label_pc_13574.loopexit, label %dec_label_pc_1355c

dec_label_pc_13574.loopexit:                      ; preds = %dec_label_pc_1355c
  %v4_1356c = sub i32 3, %v0_1356c
  %v5_1356c = and i32 %v4_1356c, %v0_1356c
  %v6_1356c = icmp slt i32 %v5_1356c, 0
  %v7_1356c = icmp slt i32 %v2_1356c, 0
  store i1 %v6_1356c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1356c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13574

dec_label_pc_13574:                               ; preds = %dec_label_pc_13574.loopexit, %dec_label_pc_13550
  %v2_133dc113 = phi i32 [ %v4_13568, %dec_label_pc_13574.loopexit ], [ %v12_13544, %dec_label_pc_13550 ]
  %v0_133cc109 = phi i32 [ %v2_1356c, %dec_label_pc_13574.loopexit ], [ %v2_13554, %dec_label_pc_13550 ]
  %v0_13574 = load i32, i32* %r1.global-to-local, align 4
  %v1_13574 = add i32 %v0_13574, -1
  store i32 %v1_13574, i32* @r1, align 4
  br label %bb131

dec_label_pc_1357c:                               ; preds = %dec_label_pc_13330
  %v1_1357c = load i32, i32* @r2, align 4
  %v2_1357c = add i32 %v1_1357c, %v0_13330
  store i32 %v2_1357c, i32* %r1.global-to-local, align 4
  %v2_13580 = add i32 %v1_1357c, %v1_13330
  store i32 %v2_13580, i32* %r0.global-to-local, align 4
  %v2_13584 = add i32 %v1_1357c, -4
  store i32 %v2_13584, i32* %r2.global-to-local, align 4
  %v4_13584 = sub i32 3, %v1_1357c
  %v5_13584 = and i32 %v4_13584, %v1_1357c
  %v6_13584 = icmp slt i32 %v5_13584, 0
  store i1 %v6_13584, i1* %cpsr_v.global-to-local, align 1
  %v7_13584 = icmp slt i32 %v2_13584, 0
  store i1 %v7_13584, i1* %cpsr_n.global-to-local, align 1
  %v8_13584 = icmp eq i32 %v1_1357c, 4
  store i1 %v8_13584, i1* %cpsr_z.global-to-local, align 1
  %v5_13588 = icmp slt i32 %v1_1357c, 4
  br i1 %v5_13588, label %bb141, label %dec_label_pc_1358c

dec_label_pc_1358c:                               ; preds = %dec_label_pc_1357c
  %v1_1358c = urem i32 %v2_13580, 4
  store i32 %v1_1358c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1358c = icmp eq i32 %v1_1358c, 0
  store i1 %v2_1358c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1358c, label %dec_label_pc_13594, label %dec_label_pc_13634

dec_label_pc_13594:                               ; preds = %dec_label_pc_1358c
  %v1_13594 = urem i32 %v2_1357c, 4
  store i32 %v1_13594, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13594 = icmp eq i32 %v1_13594, 0
  store i1 %v2_13594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13594, label %dec_label_pc_1359c, label %dec_label_pc_13660

dec_label_pc_1359c:                               ; preds = %dec_label_pc_13594, %dec_label_pc_13658
  %v0_135b448 = phi i32 [ %v2_13580, %dec_label_pc_13594 ], [ %v0_136a831, %dec_label_pc_13658 ]
  %v0_135b047 = phi i32 [ %v2_1357c, %dec_label_pc_13594 ], [ %v0_13658, %dec_label_pc_13658 ]
  %v0_1359c = phi i32 [ %v2_13584, %dec_label_pc_13594 ], [ %v2_13650, %dec_label_pc_13658 ]
  %v2_1359c = add i32 %v0_1359c, -8
  store i32 %v2_1359c, i32* %r2.global-to-local, align 4
  %v4_1359c = sub i32 7, %v0_1359c
  %v5_1359c = and i32 %v4_1359c, %v0_1359c
  %v6_1359c = icmp slt i32 %v5_1359c, 0
  store i1 %v6_1359c, i1* %cpsr_v.global-to-local, align 1
  %v7_1359c = icmp slt i32 %v2_1359c, 0
  store i1 %v7_1359c, i1* %cpsr_n.global-to-local, align 1
  %v8_1359c = icmp eq i32 %v0_1359c, 8
  store i1 %v8_1359c, i1* %cpsr_z.global-to-local, align 1
  %v5_135a0 = icmp slt i32 %v0_1359c, 8
  br i1 %v5_135a0, label %dec_label_pc_135ec, label %dec_label_pc_135a4

dec_label_pc_135a4:                               ; preds = %dec_label_pc_1359c
  %v3_135a4 = load i32, i32* @r4, align 4
  store i32 %v3_135a4, i32* %stack_var_-8, align 4
  %v6_135a4 = load i32, i32* @lr, align 4
  %v2_135a8 = add i32 %v0_1359c, -28
  store i32 %v2_135a8, i32* %r2.global-to-local, align 4
  %v4_135a8 = sub i32 27, %v0_1359c
  %v5_135a8 = and i32 %v4_135a8, %v2_1359c
  %v6_135a8 = icmp slt i32 %v5_135a8, 0
  store i1 %v6_135a8, i1* %cpsr_v.global-to-local, align 1
  %v7_135a8 = icmp slt i32 %v2_135a8, 0
  store i1 %v7_135a8, i1* %cpsr_n.global-to-local, align 1
  %v8_135a8 = icmp eq i32 %v2_1359c, 20
  store i1 %v8_135a8, i1* %cpsr_z.global-to-local, align 1
  %v5_135ac = icmp slt i32 %v2_1359c, 20
  br i1 %v5_135ac, label %dec_label_pc_135c8, label %dec_label_pc_135b0

dec_label_pc_135b0:                               ; preds = %dec_label_pc_135a4, %dec_label_pc_135b0.dec_label_pc_135b0_crit_edge
  %v0_135b4 = phi i32 [ %v1_135bc, %dec_label_pc_135b0.dec_label_pc_135b0_crit_edge ], [ %v0_135b448, %dec_label_pc_135a4 ]
  %v0_135b0 = phi i32 [ %v0_135b0.pre, %dec_label_pc_135b0.dec_label_pc_135b0_crit_edge ], [ %v0_135b047, %dec_label_pc_135a4 ]
  %v1_135b0 = add i32 %v0_135b0, -4
  %v2_135b0 = inttoptr i32 %v1_135b0 to i32*
  %v3_135b0 = load i32, i32* %v2_135b0, align 4
  store i32 %v3_135b0, i32* %r3.global-to-local, align 4
  %v4_135b0 = add i32 %v0_135b0, -8
  %v5_135b0 = inttoptr i32 %v4_135b0 to i32*
  %v6_135b0 = load i32, i32* %v5_135b0, align 4
  store i32 %v6_135b0, i32* %r4.global-to-local, align 4
  %v7_135b0 = add i32 %v0_135b0, -12
  %v8_135b0 = inttoptr i32 %v7_135b0 to i32*
  %v9_135b0 = load i32, i32* %v8_135b0, align 4
  store i32 %v9_135b0, i32* %ip.global-to-local, align 4
  %v10_135b0 = add i32 %v0_135b0, -16
  %v11_135b0 = inttoptr i32 %v10_135b0 to i32*
  %v12_135b0 = load i32, i32* %v11_135b0, align 4
  store i32 %v12_135b0, i32* %lr.global-to-local, align 4
  store i32 %v10_135b0, i32* %r1.global-to-local, align 4
  %v1_135b4 = add i32 %v0_135b4, -16
  %v2_135b4 = inttoptr i32 %v1_135b4 to i32*
  store i32 %v3_135b0, i32* %v2_135b4, align 4
  %v4_135b4 = add i32 %v0_135b4, -12
  %v5_135b4 = inttoptr i32 %v4_135b4 to i32*
  %v6_135b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_135b4, i32* %v5_135b4, align 4
  %v7_135b4 = add i32 %v0_135b4, -8
  %v8_135b4 = inttoptr i32 %v7_135b4 to i32*
  %v9_135b4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_135b4, i32* %v8_135b4, align 4
  %v10_135b4 = add i32 %v0_135b4, -4
  %v11_135b4 = inttoptr i32 %v10_135b4 to i32*
  %v12_135b4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_135b4, i32* %v11_135b4, align 4
  store i32 %v1_135b4, i32* %r0.global-to-local, align 4
  %v0_135b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_135b8 = add i32 %v0_135b8, -4
  %v2_135b8 = inttoptr i32 %v1_135b8 to i32*
  %v3_135b8 = load i32, i32* %v2_135b8, align 4
  store i32 %v3_135b8, i32* %r3.global-to-local, align 4
  %v4_135b8 = add i32 %v0_135b8, -8
  %v5_135b8 = inttoptr i32 %v4_135b8 to i32*
  %v6_135b8 = load i32, i32* %v5_135b8, align 4
  store i32 %v6_135b8, i32* %r4.global-to-local, align 4
  %v7_135b8 = add i32 %v0_135b8, -12
  %v8_135b8 = inttoptr i32 %v7_135b8 to i32*
  %v9_135b8 = load i32, i32* %v8_135b8, align 4
  store i32 %v9_135b8, i32* @ip, align 4
  %v10_135b8 = add i32 %v0_135b8, -16
  %v11_135b8 = inttoptr i32 %v10_135b8 to i32*
  %v12_135b8 = load i32, i32* %v11_135b8, align 4
  store i32 %v12_135b8, i32* %lr.global-to-local, align 4
  store i32 %v10_135b8, i32* %r1.global-to-local, align 4
  %v1_135bc = add i32 %v0_135b4, -32
  %v2_135bc = inttoptr i32 %v1_135bc to i32*
  store i32 %v3_135b8, i32* %v2_135bc, align 4
  %v4_135bc = add i32 %v0_135b4, -28
  %v5_135bc = inttoptr i32 %v4_135bc to i32*
  %v6_135bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_135bc, i32* %v5_135bc, align 4
  %v7_135bc = add i32 %v0_135b4, -24
  %v8_135bc = inttoptr i32 %v7_135bc to i32*
  %v9_135bc = load i32, i32* @ip, align 4
  store i32 %v9_135bc, i32* %v8_135bc, align 4
  %v10_135bc = add i32 %v0_135b4, -20
  %v11_135bc = inttoptr i32 %v10_135bc to i32*
  %v12_135bc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_135bc, i32* %v11_135bc, align 4
  store i32 %v1_135bc, i32* %r0.global-to-local, align 4
  %v0_135c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_135c0 = add i32 %v0_135c0, -32
  store i32 %v2_135c0, i32* %r2.global-to-local, align 4
  %v6_135c4 = icmp slt i32 %v0_135c0, 32
  br i1 %v6_135c4, label %dec_label_pc_135c8.loopexit, label %dec_label_pc_135b0.dec_label_pc_135b0_crit_edge

dec_label_pc_135b0.dec_label_pc_135b0_crit_edge:  ; preds = %dec_label_pc_135b0
  %v0_135b0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_135b0

dec_label_pc_135c8.loopexit:                      ; preds = %dec_label_pc_135b0
  %v4_135c0 = sub i32 31, %v0_135c0
  %v5_135c0 = and i32 %v4_135c0, %v0_135c0
  %v6_135c0 = icmp slt i32 %v5_135c0, 0
  %v7_135c0 = icmp slt i32 %v2_135c0, 0
  store i1 %v6_135c0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_135c0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_135c8

dec_label_pc_135c8:                               ; preds = %dec_label_pc_135c8.loopexit, %dec_label_pc_135a4
  %v6_135d0 = phi i32 [ %v1_135bc, %dec_label_pc_135c8.loopexit ], [ %v0_135b448, %dec_label_pc_135a4 ]
  %v0_135d8.pr = phi i32 [ %v2_135c0, %dec_label_pc_135c8.loopexit ], [ %v2_135a8, %dec_label_pc_135a4 ]
  %v4_135c8 = add i32 %v0_135d8.pr, 16
  %v6_135c8 = sub i32 0, %v0_135d8.pr
  %v7_135c8 = and i32 %v4_135c8, %v6_135c8
  %v8_135c8 = icmp slt i32 %v7_135c8, 0
  store i1 %v8_135c8, i1* %cpsr_v.global-to-local, align 1
  %v9_135c8 = icmp slt i32 %v4_135c8, 0
  store i1 %v9_135c8, i1* %cpsr_n.global-to-local, align 1
  %v10_135c8 = icmp eq i32 %v4_135c8, 0
  store i1 %v10_135c8, i1* %cpsr_z.global-to-local, align 1
  %v5_135cc = icmp slt i32 %v0_135d8.pr, -16
  br i1 %v5_135cc, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_135c8
  %v6_135cc = load i32, i32* %r1.global-to-local, align 4
  %v7_135cc = add i32 %v6_135cc, -4
  %v8_135cc = inttoptr i32 %v7_135cc to i32*
  %v9_135cc = load i32, i32* %v8_135cc, align 4
  store i32 %v9_135cc, i32* %r3.global-to-local, align 4
  %v10_135cc = add i32 %v6_135cc, -8
  %v11_135cc = inttoptr i32 %v10_135cc to i32*
  %v12_135cc = load i32, i32* %v11_135cc, align 4
  store i32 %v12_135cc, i32* %r4.global-to-local, align 4
  %v13_135cc = add i32 %v6_135cc, -12
  %v14_135cc = inttoptr i32 %v13_135cc to i32*
  %v15_135cc = load i32, i32* %v14_135cc, align 4
  store i32 %v15_135cc, i32* @ip, align 4
  %v16_135cc = add i32 %v6_135cc, -16
  %v17_135cc = inttoptr i32 %v16_135cc to i32*
  %v18_135cc = load i32, i32* %v17_135cc, align 4
  store i32 %v18_135cc, i32* %lr.global-to-local, align 4
  store i32 %v16_135cc, i32* %r1.global-to-local, align 4
  %v7_135d0 = add i32 %v6_135d0, -16
  %v8_135d0 = inttoptr i32 %v7_135d0 to i32*
  store i32 %v9_135cc, i32* %v8_135d0, align 4
  %v10_135d0 = add i32 %v6_135d0, -12
  %v11_135d0 = inttoptr i32 %v10_135d0 to i32*
  %v12_135d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_135d0, i32* %v11_135d0, align 4
  %v13_135d0 = add i32 %v6_135d0, -8
  %v14_135d0 = inttoptr i32 %v13_135d0 to i32*
  %v15_135d0 = load i32, i32* @ip, align 4
  store i32 %v15_135d0, i32* %v14_135d0, align 4
  %v16_135d0 = add i32 %v6_135d0, -4
  %v17_135d0 = inttoptr i32 %v16_135d0 to i32*
  %v18_135d0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_135d0, i32* %v17_135d0, align 4
  store i32 %v7_135d0, i32* %r0.global-to-local, align 4
  %v6_135d4 = load i32, i32* %r2.global-to-local, align 4
  %v7_135d4 = add i32 %v6_135d4, -16
  store i32 %v7_135d4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_135c8, %bb138
  %v6_135e0 = phi i32 [ %v7_135d0, %bb138 ], [ %v6_135d0, %dec_label_pc_135c8 ]
  %v0_135d8 = phi i32 [ %v7_135d4, %bb138 ], [ %v0_135d8.pr, %dec_label_pc_135c8 ]
  %v4_135d8 = add i32 %v0_135d8, 20
  store i32 %v4_135d8, i32* %r2.global-to-local, align 4
  %v6_135d8 = sub i32 0, %v0_135d8
  %v7_135d8 = and i32 %v4_135d8, %v6_135d8
  %v8_135d8 = icmp slt i32 %v7_135d8, 0
  store i1 %v8_135d8, i1* %cpsr_v.global-to-local, align 1
  %v9_135d8 = icmp slt i32 %v4_135d8, 0
  store i1 %v9_135d8, i1* %cpsr_n.global-to-local, align 1
  %v10_135d8 = icmp eq i32 %v4_135d8, 0
  store i1 %v10_135d8, i1* %cpsr_z.global-to-local, align 1
  %v5_135dc = icmp slt i32 %v0_135d8, -20
  br i1 %v5_135dc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_135dc = load i32, i32* %r1.global-to-local, align 4
  %v7_135dc = add i32 %v6_135dc, -4
  %v8_135dc = inttoptr i32 %v7_135dc to i32*
  %v9_135dc = load i32, i32* %v8_135dc, align 4
  store i32 %v9_135dc, i32* %r3.global-to-local, align 4
  %v10_135dc = add i32 %v6_135dc, -8
  %v11_135dc = inttoptr i32 %v10_135dc to i32*
  %v12_135dc = load i32, i32* %v11_135dc, align 4
  store i32 %v12_135dc, i32* @ip, align 4
  %v13_135dc = add i32 %v6_135dc, -12
  %v14_135dc = inttoptr i32 %v13_135dc to i32*
  %v15_135dc = load i32, i32* %v14_135dc, align 4
  store i32 %v15_135dc, i32* %lr.global-to-local, align 4
  store i32 %v13_135dc, i32* %r1.global-to-local, align 4
  %v7_135e0 = add i32 %v6_135e0, -12
  %v8_135e0 = inttoptr i32 %v7_135e0 to i32*
  store i32 %v9_135dc, i32* %v8_135e0, align 4
  %v10_135e0 = add i32 %v6_135e0, -8
  %v11_135e0 = inttoptr i32 %v10_135e0 to i32*
  %v12_135e0 = load i32, i32* @ip, align 4
  store i32 %v12_135e0, i32* %v11_135e0, align 4
  %v13_135e0 = add i32 %v6_135e0, -4
  %v14_135e0 = inttoptr i32 %v13_135e0 to i32*
  %v15_135e0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_135e0, i32* %v14_135e0, align 4
  store i32 %v7_135e0, i32* %r0.global-to-local, align 4
  %v6_135e4 = load i32, i32* %r2.global-to-local, align 4
  %v7_135e4 = add i32 %v6_135e4, -12
  store i32 %v7_135e4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_1360456 = phi i32 [ %v6_135e0, %.thread13 ], [ %v7_135e0, %bb139 ]
  %v0_135ec54 = phi i32 [ %v4_135d8, %.thread13 ], [ %v7_135e4, %bb139 ]
  %v2_135e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_135e8, i32* @r4, align 4
  store i32 %v6_135a4, i32* @lr, align 4
  br label %dec_label_pc_135ec

dec_label_pc_135ec:                               ; preds = %dec_label_pc_1359c, %.thread15
  %v7_135fc = phi i32 [ %v0_135b448, %dec_label_pc_1359c ], [ %v6_1360456, %.thread15 ]
  %v0_135ec = phi i32 [ %v2_1359c, %dec_label_pc_1359c ], [ %v0_135ec54, %.thread15 ]
  %v2_135ec = add i32 %v0_135ec, 8
  store i32 %v2_135ec, i32* %r2.global-to-local, align 4
  %v4_135ec = sub i32 0, %v0_135ec
  %v5_135ec = and i32 %v2_135ec, %v4_135ec
  %v6_135ec = icmp slt i32 %v5_135ec, 0
  store i1 %v6_135ec, i1* %cpsr_v.global-to-local, align 1
  %v7_135ec = icmp slt i32 %v2_135ec, 0
  store i1 %v7_135ec, i1* %cpsr_n.global-to-local, align 1
  %v8_135ec = icmp eq i32 %v2_135ec, 0
  store i1 %v8_135ec, i1* %cpsr_z.global-to-local, align 1
  %v5_135f0 = icmp slt i32 %v0_135ec, -8
  br i1 %v5_135f0, label %bb141, label %dec_label_pc_135f4

dec_label_pc_135f4:                               ; preds = %dec_label_pc_135ec
  %v6_135f4 = add i32 %v0_135ec, 4
  store i32 %v6_135f4, i32* %r2.global-to-local, align 4
  %v8_135f4 = sub i32 -5, %v0_135ec
  %v9_135f4 = and i32 %v8_135f4, %v2_135ec
  %v10_135f4 = icmp slt i32 %v9_135f4, 0
  store i1 %v10_135f4, i1* %cpsr_v.global-to-local, align 1
  %v11_135f4 = icmp slt i32 %v6_135f4, 0
  store i1 %v11_135f4, i1* %cpsr_n.global-to-local, align 1
  %v12_135f4 = icmp eq i32 %v2_135ec, 4
  store i1 %v12_135f4, i1* %cpsr_z.global-to-local, align 1
  %v5_135f8 = icmp slt i32 %v2_135ec, 4
  %v6_135f8 = load i32, i32* %r1.global-to-local, align 4
  %v7_135f8 = add i32 %v6_135f8, -4
  %v8_135f8 = inttoptr i32 %v7_135f8 to i32*
  %v9_135f8 = load i32, i32* %v8_135f8, align 4
  store i32 %v9_135f8, i32* %r3.global-to-local, align 4
  br i1 %v5_135f8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_135f4
  store i32 %v7_135f8, i32* %r1.global-to-local, align 4
  %v8_135fc = add i32 %v7_135fc, -4
  %v9_135fc = inttoptr i32 %v8_135fc to i32*
  store i32 %v9_135f8, i32* %v9_135fc, align 4
  %v10_135fc = load i32, i32* %r0.global-to-local, align 4
  %v11_135fc = add i32 %v10_135fc, -4
  store i32 %v11_135fc, i32* %r0.global-to-local, align 4
  %v0_1360c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_135f4
  %v10_13600 = add i32 %v6_135f8, -8
  %v11_13600 = inttoptr i32 %v10_13600 to i32*
  %v12_13600 = load i32, i32* %v11_13600, align 4
  store i32 %v12_13600, i32* @ip, align 4
  store i32 %v10_13600, i32* %r1.global-to-local, align 4
  %v7_13604 = add i32 %v7_135fc, -8
  %v8_13604 = inttoptr i32 %v7_13604 to i32*
  store i32 %v9_135f8, i32* %v8_13604, align 4
  %v10_13604 = add i32 %v7_135fc, -4
  %v11_13604 = inttoptr i32 %v10_13604 to i32*
  %v12_13604 = load i32, i32* @ip, align 4
  store i32 %v12_13604, i32* %v11_13604, align 4
  store i32 %v7_13604, i32* %r0.global-to-local, align 4
  %v6_13608 = load i32, i32* %r2.global-to-local, align 4
  %v7_13608 = add i32 %v6_13608, -4
  store i32 %v7_13608, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_135ec, %dec_label_pc_1357c, %dec_label_pc_137b0, %dec_label_pc_13744, %dec_label_pc_136d8, %bb140
  %v2_13610 = phi i32 [ %v11_135fc, %.thread19 ], [ %v0_136a831, %.thread25 ], [ %v7_135fc, %dec_label_pc_135ec ], [ %v2_13580, %dec_label_pc_1357c ], [ %v2_1361c64, %dec_label_pc_137b0 ], [ %v2_1361c63, %dec_label_pc_13744 ], [ %v2_1361c62, %dec_label_pc_136d8 ], [ %v7_13604, %bb140 ]
  %v0_1360c = phi i32 [ %v0_1360c.pre, %.thread19 ], [ %v2_13650, %.thread25 ], [ %v2_135ec, %dec_label_pc_135ec ], [ %v2_13584, %dec_label_pc_1357c ], [ %v0_1360c60, %dec_label_pc_137b0 ], [ %v0_1360c59, %dec_label_pc_13744 ], [ %v0_1360c58, %dec_label_pc_136d8 ], [ %v7_13608, %bb140 ]
  %v1_1360c = add i32 %v0_1360c, 4
  store i32 %v1_1360c, i32* %r2.global-to-local, align 4
  %v3_1360c = sub i32 0, %v0_1360c
  %v4_1360c = and i32 %v1_1360c, %v3_1360c
  %v5_1360c = icmp slt i32 %v4_1360c, 0
  store i1 %v5_1360c, i1* %cpsr_v.global-to-local, align 1
  %v6_1360c = icmp slt i32 %v1_1360c, 0
  store i1 %v6_1360c, i1* %cpsr_n.global-to-local, align 1
  %v7_1360c = icmp eq i32 %v1_1360c, 0
  store i1 %v7_1360c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1360c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_13614 = add i32 %v0_1360c, 2
  %v3_13614 = sub i32 -3, %v0_1360c
  %v4_13614 = and i32 %v3_13614, %v1_1360c
  %v5_13614 = icmp slt i32 %v4_13614, 0
  store i1 %v5_13614, i1* %cpsr_v.global-to-local, align 1
  %v6_13614 = icmp slt i32 %v1_13614, 0
  store i1 %v6_13614, i1* %cpsr_n.global-to-local, align 1
  %v7_13614 = icmp eq i32 %v1_1360c, 2
  store i1 %v7_13614, i1* %cpsr_z.global-to-local, align 1
  %v0_13618 = load i32, i32* %r1.global-to-local, align 4
  %v1_13618 = add i32 %v0_13618, -1
  %v2_13618 = inttoptr i32 %v1_13618 to i8*
  %v3_13618 = load i8, i8* %v2_13618, align 1
  %v4_13618 = zext i8 %v3_13618 to i32
  store i32 %v4_13618, i32* %r3.global-to-local, align 4
  store i32 %v1_13618, i32* %r1.global-to-local, align 4
  %v3_1361c = add i32 %v2_13610, -1
  %v4_1361c = inttoptr i32 %v3_1361c to i8*
  store i8 %v3_13618, i8* %v4_1361c, align 1
  %v5_1361c = load i32, i32* %r0.global-to-local, align 4
  %v6_1361c = add i32 %v5_1361c, -1
  store i32 %v6_1361c, i32* %r0.global-to-local, align 4
  %v0_13620 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_13620 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_13620 = xor i1 %v0_13620, %v1_13620
  br i1 %v2_13620, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_13620 = load i32, i32* %r1.global-to-local, align 4
  %v4_13620 = add i32 %v3_13620, -1
  %v5_13620 = inttoptr i32 %v4_13620 to i8*
  %v6_13620 = load i8, i8* %v5_13620, align 1
  %v7_13620 = zext i8 %v6_13620 to i32
  store i32 %v7_13620, i32* %r3.global-to-local, align 4
  store i32 %v4_13620, i32* %r1.global-to-local, align 4
  %v6_13624 = add i32 %v5_1361c, -2
  %v7_13624 = inttoptr i32 %v6_13624 to i8*
  store i8 %v6_13620, i8* %v7_13624, align 1
  %v8_13624 = load i32, i32* %r0.global-to-local, align 4
  %v9_13624 = add i32 %v8_13624, -1
  store i32 %v9_13624, i32* %r0.global-to-local, align 4
  %v1_13628.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_13628.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1362c = phi i32 [ %v9_13624, %bb143 ], [ %v6_1361c, %bb142 ]
  %v2_1362c = phi i1 [ %v2_13628.pre, %bb143 ], [ %v1_13620, %bb142 ]
  %v1_1362c = phi i1 [ %v1_13628.pre, %bb143 ], [ %v0_13620, %bb142 ]
  %v0_13628 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_13628 = xor i1 %v2_1362c, %v1_1362c
  %v4_13628 = or i1 %v0_13628, %v3_13628
  br i1 %v4_13628, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_13628 = load i32, i32* %r1.global-to-local, align 4
  %v6_13628 = add i32 %v5_13628, -1
  %v7_13628 = inttoptr i32 %v6_13628 to i8*
  %v8_13628 = load i8, i8* %v7_13628, align 1
  %v9_13628 = zext i8 %v8_13628 to i32
  store i32 %v9_13628, i32* %r3.global-to-local, align 4
  store i32 %v6_13628, i32* %r1.global-to-local, align 4
  %v8_1362c = add i32 %v7_1362c, -1
  %v9_1362c = inttoptr i32 %v8_1362c to i8*
  store i8 %v8_13628, i8* %v9_1362c, align 1
  %v10_1362c = load i32, i32* %r0.global-to-local, align 4
  %v11_1362c = add i32 %v10_1362c, -1
  store i32 %v11_1362c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_13634:                               ; preds = %dec_label_pc_1358c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_13634 = icmp eq i32 %v1_1358c, 1
  store i1 %v8_13634, i1* %cpsr_n.global-to-local, align 1
  %v9_13634 = icmp eq i32 %v1_1358c, 2
  store i1 %v9_13634, i1* %cpsr_z.global-to-local, align 1
  %v1_13638 = add i32 %v2_1357c, -1
  %v2_13638 = inttoptr i32 %v1_13638 to i8*
  %v3_13638 = load i8, i8* %v2_13638, align 1
  %v4_13638 = zext i8 %v3_13638 to i32
  store i32 %v4_13638, i32* %r3.global-to-local, align 4
  store i32 %v1_13638, i32* %r1.global-to-local, align 4
  %v3_1363c = add i32 %v2_13580, -1
  %v4_1363c = inttoptr i32 %v3_1363c to i8*
  store i8 %v3_13638, i8* %v4_1363c, align 1
  %v5_1363c = load i32, i32* %r0.global-to-local, align 4
  %v6_1363c = add i32 %v5_1363c, -1
  store i32 %v6_1363c, i32* %r0.global-to-local, align 4
  br i1 %v8_13634, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_13634
  %v6_13640 = load i32, i32* %r1.global-to-local, align 4
  %v7_13640 = add i32 %v6_13640, -1
  %v8_13640 = inttoptr i32 %v7_13640 to i8*
  %v9_13640 = load i8, i8* %v8_13640, align 1
  %v10_13640 = zext i8 %v9_13640 to i32
  store i32 %v10_13640, i32* %r3.global-to-local, align 4
  store i32 %v7_13640, i32* %r1.global-to-local, align 4
  %v9_13644 = add i32 %v5_1363c, -2
  %v10_13644 = inttoptr i32 %v9_13644 to i8*
  store i8 %v9_13640, i8* %v10_13644, align 1
  %v11_13644 = load i32, i32* %r0.global-to-local, align 4
  %v12_13644 = add i32 %v11_13644, -1
  store i32 %v12_13644, i32* %r0.global-to-local, align 4
  br i1 %v9_13634, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_13648 = load i32, i32* %r1.global-to-local, align 4
  %v9_13648 = add i32 %v8_13648, -1
  %v10_13648 = inttoptr i32 %v9_13648 to i8*
  %v11_13648 = load i8, i8* %v10_13648, align 1
  %v12_13648 = zext i8 %v11_13648 to i32
  store i32 %v12_13648, i32* %r3.global-to-local, align 4
  store i32 %v9_13648, i32* %r1.global-to-local, align 4
  %v11_1364c = add i32 %v11_13644, -2
  %v12_1364c = inttoptr i32 %v11_1364c to i8*
  store i8 %v11_13648, i8* %v12_1364c, align 1
  %v13_1364c = load i32, i32* %r0.global-to-local, align 4
  %v14_1364c = add i32 %v13_1364c, -1
  store i32 %v14_1364c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_13634, %bb146
  %v0_136a831 = phi i32 [ %v12_13644, %bb145 ], [ %v6_1363c, %dec_label_pc_13634 ], [ %v14_1364c, %bb146 ]
  %v0_13650 = load i32, i32* %r2.global-to-local, align 4
  %v1_13650 = load i32, i32* @ip, align 4
  %v2_13650 = sub i32 %v0_13650, %v1_13650
  store i32 %v2_13650, i32* %r2.global-to-local, align 4
  %v4_13650 = xor i32 %v1_13650, %v0_13650
  %v5_13650 = xor i32 %v2_13650, %v0_13650
  %v6_13650 = and i32 %v5_13650, %v4_13650
  %v7_13650 = icmp slt i32 %v6_13650, 0
  store i1 %v7_13650, i1* %cpsr_v.global-to-local, align 1
  %v8_13650 = icmp slt i32 %v2_13650, 0
  store i1 %v8_13650, i1* %cpsr_n.global-to-local, align 1
  %v9_13650 = icmp eq i32 %v0_13650, %v1_13650
  store i1 %v9_13650, i1* %cpsr_z.global-to-local, align 1
  %v5_13654 = icmp slt i32 %v0_13650, %v1_13650
  br i1 %v5_13654, label %bb141, label %dec_label_pc_13658

dec_label_pc_13658:                               ; preds = %.thread25
  %v0_13658 = load i32, i32* %r1.global-to-local, align 4
  %v1_13658 = urem i32 %v0_13658, 4
  store i32 %v1_13658, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13658 = icmp eq i32 %v1_13658, 0
  store i1 %v2_13658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13658, label %dec_label_pc_1359c, label %dec_label_pc_13660

dec_label_pc_13660:                               ; preds = %dec_label_pc_13594, %dec_label_pc_13658
  %v0_136a830 = phi i32 [ %v2_13580, %dec_label_pc_13594 ], [ %v0_136a831, %dec_label_pc_13658 ]
  %v0_13754 = phi i32 [ %v2_13584, %dec_label_pc_13594 ], [ %v2_13650, %dec_label_pc_13658 ]
  %v0_13660 = phi i32 [ %v2_1357c, %dec_label_pc_13594 ], [ %v0_13658, %dec_label_pc_13658 ]
  %v0_13668 = phi i32 [ %v1_13594, %dec_label_pc_13594 ], [ %v1_13658, %dec_label_pc_13658 ]
  %v1_13660 = and i32 %v0_13660, -4
  store i32 %v1_13660, i32* %r1.global-to-local, align 4
  %v1_13664 = inttoptr i32 %v1_13660 to i32*
  %v2_13664 = load i32, i32* %v1_13664, align 4
  store i32 %v2_13664, i32* %r3.global-to-local, align 4
  %v7_13668 = icmp ult i32 %v0_13668, 2
  %v2_1374c = add i32 %v0_13754, -12
  %v4_1374c = sub i32 11, %v0_13754
  %v5_1374c = and i32 %v4_1374c, %v0_13754
  %v6_1374c = icmp slt i32 %v5_1374c, 0
  store i1 %v6_1374c, i1* %cpsr_v.global-to-local, align 1
  %v7_1374c = icmp slt i32 %v2_1374c, 0
  store i1 %v7_1374c, i1* %cpsr_n.global-to-local, align 1
  %v8_1374c = icmp eq i32 %v0_13754, 12
  store i1 %v8_1374c, i1* %cpsr_z.global-to-local, align 1
  %v5_13750 = icmp slt i32 %v0_13754, 12
  br i1 %v7_13668, label %dec_label_pc_1374c, label %dec_label_pc_13670

dec_label_pc_13670:                               ; preds = %dec_label_pc_13660
  %v8_13668 = icmp eq i32 %v0_13668, 2
  br i1 %v8_13668, label %dec_label_pc_136e0, label %dec_label_pc_13674

dec_label_pc_13674:                               ; preds = %dec_label_pc_13670
  br i1 %v5_13750, label %dec_label_pc_136c0, label %dec_label_pc_1367c

dec_label_pc_1367c:                               ; preds = %dec_label_pc_13674
  store i32 %v2_1374c, i32* %r2.global-to-local, align 4
  %v3_13680 = load i32, i32* @r4, align 4
  store i32 %v3_13680, i32* %stack_var_-12, align 4
  %v6_13680 = load i32, i32* @r5, align 4
  store i32 %v6_13680, i32* %stack_var_-8, align 4
  %v9_13680 = load i32, i32* @lr, align 4
  br label %dec_label_pc_13684

dec_label_pc_13684:                               ; preds = %dec_label_pc_13684.dec_label_pc_13684_crit_edge, %dec_label_pc_1367c
  %v0_136a8 = phi i32 [ %v1_136a8, %dec_label_pc_13684.dec_label_pc_13684_crit_edge ], [ %v0_136a830, %dec_label_pc_1367c ]
  %v0_13688 = phi i32 [ %v0_13688.pre, %dec_label_pc_13684.dec_label_pc_13684_crit_edge ], [ %v1_13660, %dec_label_pc_1367c ]
  %v0_13684 = phi i32 [ %v0_13684.pre, %dec_label_pc_13684.dec_label_pc_13684_crit_edge ], [ %v2_13664, %dec_label_pc_1367c ]
  %v3_13684 = mul i32 %v0_13684, 256
  store i32 %v3_13684, i32* %lr.global-to-local, align 4
  %v1_13688 = add i32 %v0_13688, -4
  %v2_13688 = inttoptr i32 %v1_13688 to i32*
  %v3_13688 = load i32, i32* %v2_13688, align 4
  store i32 %v3_13688, i32* %r3.global-to-local, align 4
  %v4_13688 = add i32 %v0_13688, -8
  %v5_13688 = inttoptr i32 %v4_13688 to i32*
  %v6_13688 = load i32, i32* %v5_13688, align 4
  store i32 %v6_13688, i32* %r4.global-to-local, align 4
  %v7_13688 = add i32 %v0_13688, -12
  %v8_13688 = inttoptr i32 %v7_13688 to i32*
  %v9_13688 = load i32, i32* %v8_13688, align 4
  store i32 %v9_13688, i32* %r5.global-to-local, align 4
  %v10_13688 = add i32 %v0_13688, -16
  %v11_13688 = inttoptr i32 %v10_13688 to i32*
  %v12_13688 = load i32, i32* %v11_13688, align 4
  store i32 %v10_13688, i32* %r1.global-to-local, align 4
  %v4_1368c = udiv i32 %v12_13688, 16777216
  %v5_1368c = or i32 %v4_1368c, %v3_13684
  store i32 %v5_1368c, i32* %lr.global-to-local, align 4
  %v3_13690 = mul i32 %v12_13688, 256
  %v4_13694 = udiv i32 %v9_13688, 16777216
  %v5_13694 = or i32 %v3_13690, %v4_13694
  store i32 %v5_13694, i32* @ip, align 4
  %v3_13698 = mul i32 %v9_13688, 256
  %v4_1369c = udiv i32 %v6_13688, 16777216
  %v5_1369c = or i32 %v3_13698, %v4_1369c
  store i32 %v5_1369c, i32* %r5.global-to-local, align 4
  %v3_136a0 = mul i32 %v6_13688, 256
  %v4_136a4 = udiv i32 %v3_13688, 16777216
  %v5_136a4 = or i32 %v3_136a0, %v4_136a4
  store i32 %v5_136a4, i32* %r4.global-to-local, align 4
  %v1_136a8 = add i32 %v0_136a8, -16
  %v2_136a8 = inttoptr i32 %v1_136a8 to i32*
  store i32 %v5_136a4, i32* %v2_136a8, align 4
  %v4_136a8 = add i32 %v0_136a8, -12
  %v5_136a8 = inttoptr i32 %v4_136a8 to i32*
  %v6_136a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_136a8, i32* %v5_136a8, align 4
  %v7_136a8 = add i32 %v0_136a8, -8
  %v8_136a8 = inttoptr i32 %v7_136a8 to i32*
  %v9_136a8 = load i32, i32* @ip, align 4
  store i32 %v9_136a8, i32* %v8_136a8, align 4
  %v10_136a8 = add i32 %v0_136a8, -4
  %v11_136a8 = inttoptr i32 %v10_136a8 to i32*
  %v12_136a8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_136a8, i32* %v11_136a8, align 4
  store i32 %v1_136a8, i32* %r0.global-to-local, align 4
  %v0_136ac = load i32, i32* %r2.global-to-local, align 4
  %v2_136ac = add i32 %v0_136ac, -16
  store i32 %v2_136ac, i32* %r2.global-to-local, align 4
  %v6_136b0 = icmp slt i32 %v0_136ac, 16
  br i1 %v6_136b0, label %dec_label_pc_136b4, label %dec_label_pc_13684.dec_label_pc_13684_crit_edge

dec_label_pc_13684.dec_label_pc_13684_crit_edge:  ; preds = %dec_label_pc_13684
  %v0_13684.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13688.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13684

dec_label_pc_136b4:                               ; preds = %dec_label_pc_13684
  %v2_136b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_136b4, i32* @r4, align 4
  %v5_136b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_136b4, i32* @r5, align 4
  store i32 %v9_13680, i32* @lr, align 4
  %v2_136b8 = add i32 %v0_136ac, -4
  store i32 %v2_136b8, i32* %r2.global-to-local, align 4
  %v4_136b8 = add i32 %v0_136ac, 2147483632
  %v5_136b8 = and i32 %v2_136b8, %v4_136b8
  %v6_136b8 = icmp slt i32 %v5_136b8, 0
  store i1 %v6_136b8, i1* %cpsr_v.global-to-local, align 1
  %v7_136b8 = icmp slt i32 %v2_136b8, 0
  store i1 %v7_136b8, i1* %cpsr_n.global-to-local, align 1
  %v8_136b8 = icmp eq i32 %v2_136b8, 0
  store i1 %v8_136b8, i1* %cpsr_z.global-to-local, align 1
  %v5_136bc = icmp slt i32 %v2_136ac, -12
  br i1 %v5_136bc, label %dec_label_pc_136d8, label %dec_label_pc_136c0

dec_label_pc_136c0:                               ; preds = %dec_label_pc_136b4, %dec_label_pc_13674, %dec_label_pc_136c0
  %v1_136cc = phi i32 [ %v5_136cc, %dec_label_pc_136c0 ], [ %v1_136a8, %dec_label_pc_136b4 ], [ %v0_136a830, %dec_label_pc_13674 ]
  %v0_136c0 = load i32, i32* %r3.global-to-local, align 4
  %v3_136c0 = mul i32 %v0_136c0, 256
  store i32 %v3_136c0, i32* %ip.global-to-local, align 4
  %v0_136c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_136c4 = add i32 %v0_136c4, -4
  %v2_136c4 = inttoptr i32 %v1_136c4 to i32*
  %v3_136c4 = load i32, i32* %v2_136c4, align 4
  store i32 %v3_136c4, i32* %r3.global-to-local, align 4
  store i32 %v1_136c4, i32* %r1.global-to-local, align 4
  %v4_136c8 = udiv i32 %v3_136c4, 16777216
  %v5_136c8 = or i32 %v4_136c8, %v3_136c0
  store i32 %v5_136c8, i32* @ip, align 4
  %v2_136cc = add i32 %v1_136cc, -4
  %v3_136cc = inttoptr i32 %v2_136cc to i32*
  store i32 %v5_136c8, i32* %v3_136cc, align 4
  %v4_136cc = load i32, i32* %r0.global-to-local, align 4
  %v5_136cc = add i32 %v4_136cc, -4
  store i32 %v5_136cc, i32* %r0.global-to-local, align 4
  %v0_136d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_136d0 = add i32 %v0_136d0, -4
  store i32 %v2_136d0, i32* %r2.global-to-local, align 4
  %v6_136d4 = icmp slt i32 %v0_136d0, 4
  br i1 %v6_136d4, label %dec_label_pc_136d8.loopexit, label %dec_label_pc_136c0

dec_label_pc_136d8.loopexit:                      ; preds = %dec_label_pc_136c0
  %v4_136d0 = sub i32 3, %v0_136d0
  %v5_136d0 = and i32 %v4_136d0, %v0_136d0
  %v6_136d0 = icmp slt i32 %v5_136d0, 0
  %v7_136d0 = icmp slt i32 %v2_136d0, 0
  store i1 %v6_136d0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_136d0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_136d8

dec_label_pc_136d8:                               ; preds = %dec_label_pc_136d8.loopexit, %dec_label_pc_136b4
  %v2_1361c62 = phi i32 [ %v5_136cc, %dec_label_pc_136d8.loopexit ], [ %v1_136a8, %dec_label_pc_136b4 ]
  %v0_1360c58 = phi i32 [ %v2_136d0, %dec_label_pc_136d8.loopexit ], [ %v2_136b8, %dec_label_pc_136b4 ]
  %v0_136d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_136d8 = add i32 %v0_136d8, 3
  store i32 %v1_136d8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_136e0:                               ; preds = %dec_label_pc_13670
  br i1 %v5_13750, label %dec_label_pc_1372c, label %dec_label_pc_136e8

dec_label_pc_136e8:                               ; preds = %dec_label_pc_136e0
  store i32 %v2_1374c, i32* %r2.global-to-local, align 4
  %v3_136ec = load i32, i32* @r4, align 4
  store i32 %v3_136ec, i32* %stack_var_-12, align 4
  %v6_136ec = load i32, i32* @r5, align 4
  store i32 %v6_136ec, i32* %stack_var_-8, align 4
  %v9_136ec = load i32, i32* @lr, align 4
  br label %dec_label_pc_136f0

dec_label_pc_136f0:                               ; preds = %dec_label_pc_136f0.dec_label_pc_136f0_crit_edge, %dec_label_pc_136e8
  %v0_13714 = phi i32 [ %v1_13714, %dec_label_pc_136f0.dec_label_pc_136f0_crit_edge ], [ %v0_136a830, %dec_label_pc_136e8 ]
  %v0_136f4 = phi i32 [ %v0_136f4.pre, %dec_label_pc_136f0.dec_label_pc_136f0_crit_edge ], [ %v1_13660, %dec_label_pc_136e8 ]
  %v0_136f0 = phi i32 [ %v0_136f0.pre, %dec_label_pc_136f0.dec_label_pc_136f0_crit_edge ], [ %v2_13664, %dec_label_pc_136e8 ]
  %v3_136f0 = mul i32 %v0_136f0, 65536
  store i32 %v3_136f0, i32* %lr.global-to-local, align 4
  %v1_136f4 = add i32 %v0_136f4, -4
  %v2_136f4 = inttoptr i32 %v1_136f4 to i32*
  %v3_136f4 = load i32, i32* %v2_136f4, align 4
  store i32 %v3_136f4, i32* %r3.global-to-local, align 4
  %v4_136f4 = add i32 %v0_136f4, -8
  %v5_136f4 = inttoptr i32 %v4_136f4 to i32*
  %v6_136f4 = load i32, i32* %v5_136f4, align 4
  store i32 %v6_136f4, i32* %r4.global-to-local, align 4
  %v7_136f4 = add i32 %v0_136f4, -12
  %v8_136f4 = inttoptr i32 %v7_136f4 to i32*
  %v9_136f4 = load i32, i32* %v8_136f4, align 4
  store i32 %v9_136f4, i32* %r5.global-to-local, align 4
  %v10_136f4 = add i32 %v0_136f4, -16
  %v11_136f4 = inttoptr i32 %v10_136f4 to i32*
  %v12_136f4 = load i32, i32* %v11_136f4, align 4
  store i32 %v10_136f4, i32* %r1.global-to-local, align 4
  %v4_136f8 = udiv i32 %v12_136f4, 65536
  %v5_136f8 = or i32 %v4_136f8, %v3_136f0
  store i32 %v5_136f8, i32* %lr.global-to-local, align 4
  %v3_136fc = mul i32 %v12_136f4, 65536
  %v4_13700 = udiv i32 %v9_136f4, 65536
  %v5_13700 = or i32 %v3_136fc, %v4_13700
  store i32 %v5_13700, i32* @ip, align 4
  %v3_13704 = mul i32 %v9_136f4, 65536
  %v4_13708 = udiv i32 %v6_136f4, 65536
  %v5_13708 = or i32 %v3_13704, %v4_13708
  store i32 %v5_13708, i32* %r5.global-to-local, align 4
  %v3_1370c = mul i32 %v6_136f4, 65536
  %v4_13710 = udiv i32 %v3_136f4, 65536
  %v5_13710 = or i32 %v3_1370c, %v4_13710
  store i32 %v5_13710, i32* %r4.global-to-local, align 4
  %v1_13714 = add i32 %v0_13714, -16
  %v2_13714 = inttoptr i32 %v1_13714 to i32*
  store i32 %v5_13710, i32* %v2_13714, align 4
  %v4_13714 = add i32 %v0_13714, -12
  %v5_13714 = inttoptr i32 %v4_13714 to i32*
  %v6_13714 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13714, i32* %v5_13714, align 4
  %v7_13714 = add i32 %v0_13714, -8
  %v8_13714 = inttoptr i32 %v7_13714 to i32*
  %v9_13714 = load i32, i32* @ip, align 4
  store i32 %v9_13714, i32* %v8_13714, align 4
  %v10_13714 = add i32 %v0_13714, -4
  %v11_13714 = inttoptr i32 %v10_13714 to i32*
  %v12_13714 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13714, i32* %v11_13714, align 4
  store i32 %v1_13714, i32* %r0.global-to-local, align 4
  %v0_13718 = load i32, i32* %r2.global-to-local, align 4
  %v2_13718 = add i32 %v0_13718, -16
  store i32 %v2_13718, i32* %r2.global-to-local, align 4
  %v6_1371c = icmp slt i32 %v0_13718, 16
  br i1 %v6_1371c, label %dec_label_pc_13720, label %dec_label_pc_136f0.dec_label_pc_136f0_crit_edge

dec_label_pc_136f0.dec_label_pc_136f0_crit_edge:  ; preds = %dec_label_pc_136f0
  %v0_136f0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_136f4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_136f0

dec_label_pc_13720:                               ; preds = %dec_label_pc_136f0
  %v2_13720 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13720, i32* @r4, align 4
  %v5_13720 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13720, i32* @r5, align 4
  store i32 %v9_136ec, i32* @lr, align 4
  %v2_13724 = add i32 %v0_13718, -4
  store i32 %v2_13724, i32* %r2.global-to-local, align 4
  %v4_13724 = add i32 %v0_13718, 2147483632
  %v5_13724 = and i32 %v2_13724, %v4_13724
  %v6_13724 = icmp slt i32 %v5_13724, 0
  store i1 %v6_13724, i1* %cpsr_v.global-to-local, align 1
  %v7_13724 = icmp slt i32 %v2_13724, 0
  store i1 %v7_13724, i1* %cpsr_n.global-to-local, align 1
  %v8_13724 = icmp eq i32 %v2_13724, 0
  store i1 %v8_13724, i1* %cpsr_z.global-to-local, align 1
  %v5_13728 = icmp slt i32 %v2_13718, -12
  br i1 %v5_13728, label %dec_label_pc_13744, label %dec_label_pc_1372c

dec_label_pc_1372c:                               ; preds = %dec_label_pc_13720, %dec_label_pc_136e0, %dec_label_pc_1372c
  %v1_13738 = phi i32 [ %v5_13738, %dec_label_pc_1372c ], [ %v1_13714, %dec_label_pc_13720 ], [ %v0_136a830, %dec_label_pc_136e0 ]
  %v0_1372c = load i32, i32* %r3.global-to-local, align 4
  %v3_1372c = mul i32 %v0_1372c, 65536
  store i32 %v3_1372c, i32* %ip.global-to-local, align 4
  %v0_13730 = load i32, i32* %r1.global-to-local, align 4
  %v1_13730 = add i32 %v0_13730, -4
  %v2_13730 = inttoptr i32 %v1_13730 to i32*
  %v3_13730 = load i32, i32* %v2_13730, align 4
  store i32 %v3_13730, i32* %r3.global-to-local, align 4
  store i32 %v1_13730, i32* %r1.global-to-local, align 4
  %v4_13734 = udiv i32 %v3_13730, 65536
  %v5_13734 = or i32 %v4_13734, %v3_1372c
  store i32 %v5_13734, i32* @ip, align 4
  %v2_13738 = add i32 %v1_13738, -4
  %v3_13738 = inttoptr i32 %v2_13738 to i32*
  store i32 %v5_13734, i32* %v3_13738, align 4
  %v4_13738 = load i32, i32* %r0.global-to-local, align 4
  %v5_13738 = add i32 %v4_13738, -4
  store i32 %v5_13738, i32* %r0.global-to-local, align 4
  %v0_1373c = load i32, i32* %r2.global-to-local, align 4
  %v2_1373c = add i32 %v0_1373c, -4
  store i32 %v2_1373c, i32* %r2.global-to-local, align 4
  %v6_13740 = icmp slt i32 %v0_1373c, 4
  br i1 %v6_13740, label %dec_label_pc_13744.loopexit, label %dec_label_pc_1372c

dec_label_pc_13744.loopexit:                      ; preds = %dec_label_pc_1372c
  %v4_1373c = sub i32 3, %v0_1373c
  %v5_1373c = and i32 %v4_1373c, %v0_1373c
  %v6_1373c = icmp slt i32 %v5_1373c, 0
  %v7_1373c = icmp slt i32 %v2_1373c, 0
  store i1 %v6_1373c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1373c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13744

dec_label_pc_13744:                               ; preds = %dec_label_pc_13744.loopexit, %dec_label_pc_13720
  %v2_1361c63 = phi i32 [ %v5_13738, %dec_label_pc_13744.loopexit ], [ %v1_13714, %dec_label_pc_13720 ]
  %v0_1360c59 = phi i32 [ %v2_1373c, %dec_label_pc_13744.loopexit ], [ %v2_13724, %dec_label_pc_13720 ]
  %v0_13744 = load i32, i32* %r1.global-to-local, align 4
  %v1_13744 = add i32 %v0_13744, 2
  store i32 %v1_13744, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1374c:                               ; preds = %dec_label_pc_13660
  br i1 %v5_13750, label %dec_label_pc_13798, label %dec_label_pc_13754

dec_label_pc_13754:                               ; preds = %dec_label_pc_1374c
  store i32 %v2_1374c, i32* %r2.global-to-local, align 4
  %v3_13758 = load i32, i32* @r4, align 4
  store i32 %v3_13758, i32* %stack_var_-12, align 4
  %v6_13758 = load i32, i32* @r5, align 4
  store i32 %v6_13758, i32* %stack_var_-8, align 4
  %v9_13758 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1375c

dec_label_pc_1375c:                               ; preds = %dec_label_pc_1375c.dec_label_pc_1375c_crit_edge, %dec_label_pc_13754
  %v0_13780 = phi i32 [ %v1_13780, %dec_label_pc_1375c.dec_label_pc_1375c_crit_edge ], [ %v0_136a830, %dec_label_pc_13754 ]
  %v0_13760 = phi i32 [ %v0_13760.pre, %dec_label_pc_1375c.dec_label_pc_1375c_crit_edge ], [ %v1_13660, %dec_label_pc_13754 ]
  %v0_1375c = phi i32 [ %v0_1375c.pre, %dec_label_pc_1375c.dec_label_pc_1375c_crit_edge ], [ %v2_13664, %dec_label_pc_13754 ]
  %v3_1375c = mul i32 %v0_1375c, 16777216
  store i32 %v3_1375c, i32* %lr.global-to-local, align 4
  %v1_13760 = add i32 %v0_13760, -4
  %v2_13760 = inttoptr i32 %v1_13760 to i32*
  %v3_13760 = load i32, i32* %v2_13760, align 4
  store i32 %v3_13760, i32* %r3.global-to-local, align 4
  %v4_13760 = add i32 %v0_13760, -8
  %v5_13760 = inttoptr i32 %v4_13760 to i32*
  %v6_13760 = load i32, i32* %v5_13760, align 4
  store i32 %v6_13760, i32* %r4.global-to-local, align 4
  %v7_13760 = add i32 %v0_13760, -12
  %v8_13760 = inttoptr i32 %v7_13760 to i32*
  %v9_13760 = load i32, i32* %v8_13760, align 4
  store i32 %v9_13760, i32* %r5.global-to-local, align 4
  %v10_13760 = add i32 %v0_13760, -16
  %v11_13760 = inttoptr i32 %v10_13760 to i32*
  %v12_13760 = load i32, i32* %v11_13760, align 4
  store i32 %v10_13760, i32* %r1.global-to-local, align 4
  %v4_13764 = udiv i32 %v12_13760, 256
  %v5_13764 = or i32 %v4_13764, %v3_1375c
  store i32 %v5_13764, i32* %lr.global-to-local, align 4
  %v3_13768 = mul i32 %v12_13760, 16777216
  %v4_1376c = udiv i32 %v9_13760, 256
  %v5_1376c = or i32 %v3_13768, %v4_1376c
  store i32 %v5_1376c, i32* @ip, align 4
  %v3_13770 = mul i32 %v9_13760, 16777216
  %v4_13774 = udiv i32 %v6_13760, 256
  %v5_13774 = or i32 %v3_13770, %v4_13774
  store i32 %v5_13774, i32* %r5.global-to-local, align 4
  %v3_13778 = mul i32 %v6_13760, 16777216
  %v4_1377c = udiv i32 %v3_13760, 256
  %v5_1377c = or i32 %v3_13778, %v4_1377c
  store i32 %v5_1377c, i32* %r4.global-to-local, align 4
  %v1_13780 = add i32 %v0_13780, -16
  %v2_13780 = inttoptr i32 %v1_13780 to i32*
  store i32 %v5_1377c, i32* %v2_13780, align 4
  %v4_13780 = add i32 %v0_13780, -12
  %v5_13780 = inttoptr i32 %v4_13780 to i32*
  %v6_13780 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13780, i32* %v5_13780, align 4
  %v7_13780 = add i32 %v0_13780, -8
  %v8_13780 = inttoptr i32 %v7_13780 to i32*
  %v9_13780 = load i32, i32* @ip, align 4
  store i32 %v9_13780, i32* %v8_13780, align 4
  %v10_13780 = add i32 %v0_13780, -4
  %v11_13780 = inttoptr i32 %v10_13780 to i32*
  %v12_13780 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13780, i32* %v11_13780, align 4
  store i32 %v1_13780, i32* %r0.global-to-local, align 4
  %v0_13784 = load i32, i32* %r2.global-to-local, align 4
  %v2_13784 = add i32 %v0_13784, -16
  store i32 %v2_13784, i32* %r2.global-to-local, align 4
  %v6_13788 = icmp slt i32 %v0_13784, 16
  br i1 %v6_13788, label %dec_label_pc_1378c, label %dec_label_pc_1375c.dec_label_pc_1375c_crit_edge

dec_label_pc_1375c.dec_label_pc_1375c_crit_edge:  ; preds = %dec_label_pc_1375c
  %v0_1375c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13760.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1375c

dec_label_pc_1378c:                               ; preds = %dec_label_pc_1375c
  %v2_1378c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1378c, i32* @r4, align 4
  %v5_1378c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1378c, i32* @r5, align 4
  store i32 %v9_13758, i32* @lr, align 4
  %v2_13790 = add i32 %v0_13784, -4
  store i32 %v2_13790, i32* %r2.global-to-local, align 4
  %v4_13790 = add i32 %v0_13784, 2147483632
  %v5_13790 = and i32 %v2_13790, %v4_13790
  %v6_13790 = icmp slt i32 %v5_13790, 0
  store i1 %v6_13790, i1* %cpsr_v.global-to-local, align 1
  %v7_13790 = icmp slt i32 %v2_13790, 0
  store i1 %v7_13790, i1* %cpsr_n.global-to-local, align 1
  %v8_13790 = icmp eq i32 %v2_13790, 0
  store i1 %v8_13790, i1* %cpsr_z.global-to-local, align 1
  %v5_13794 = icmp slt i32 %v2_13784, -12
  br i1 %v5_13794, label %dec_label_pc_137b0, label %dec_label_pc_13798

dec_label_pc_13798:                               ; preds = %dec_label_pc_1378c, %dec_label_pc_1374c, %dec_label_pc_13798
  %v1_137a4 = phi i32 [ %v5_137a4, %dec_label_pc_13798 ], [ %v1_13780, %dec_label_pc_1378c ], [ %v0_136a830, %dec_label_pc_1374c ]
  %v0_13798 = load i32, i32* %r3.global-to-local, align 4
  %v3_13798 = mul i32 %v0_13798, 16777216
  store i32 %v3_13798, i32* %ip.global-to-local, align 4
  %v0_1379c = load i32, i32* %r1.global-to-local, align 4
  %v1_1379c = add i32 %v0_1379c, -4
  %v2_1379c = inttoptr i32 %v1_1379c to i32*
  %v3_1379c = load i32, i32* %v2_1379c, align 4
  store i32 %v3_1379c, i32* %r3.global-to-local, align 4
  store i32 %v1_1379c, i32* %r1.global-to-local, align 4
  %v4_137a0 = udiv i32 %v3_1379c, 256
  %v5_137a0 = or i32 %v4_137a0, %v3_13798
  store i32 %v5_137a0, i32* @ip, align 4
  %v2_137a4 = add i32 %v1_137a4, -4
  %v3_137a4 = inttoptr i32 %v2_137a4 to i32*
  store i32 %v5_137a0, i32* %v3_137a4, align 4
  %v4_137a4 = load i32, i32* %r0.global-to-local, align 4
  %v5_137a4 = add i32 %v4_137a4, -4
  store i32 %v5_137a4, i32* %r0.global-to-local, align 4
  %v0_137a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_137a8 = add i32 %v0_137a8, -4
  store i32 %v2_137a8, i32* %r2.global-to-local, align 4
  %v6_137ac = icmp slt i32 %v0_137a8, 4
  br i1 %v6_137ac, label %dec_label_pc_137b0.loopexit, label %dec_label_pc_13798

dec_label_pc_137b0.loopexit:                      ; preds = %dec_label_pc_13798
  %v4_137a8 = sub i32 3, %v0_137a8
  %v5_137a8 = and i32 %v4_137a8, %v0_137a8
  %v6_137a8 = icmp slt i32 %v5_137a8, 0
  %v7_137a8 = icmp slt i32 %v2_137a8, 0
  store i1 %v6_137a8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_137a8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_137b0

dec_label_pc_137b0:                               ; preds = %dec_label_pc_137b0.loopexit, %dec_label_pc_1378c
  %v2_1361c64 = phi i32 [ %v5_137a4, %dec_label_pc_137b0.loopexit ], [ %v1_13780, %dec_label_pc_1378c ]
  %v0_1360c60 = phi i32 [ %v2_137a8, %dec_label_pc_137b0.loopexit ], [ %v2_13790, %dec_label_pc_1378c ]
  %v0_137b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_137b0 = add i32 %v0_137b0, 1
  store i32 %v1_137b0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_137a4, { 0, 2, 1 }
  uselistorder i32 %v3_13798, { 1, 0 }
  uselistorder i32 %v2_13790, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13780, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13760, { 1, 0 }
  uselistorder i32 %v3_1375c, { 1, 0 }
  uselistorder i32 %v0_13760, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13780, { 3, 2, 1, 0 }
  uselistorder i32 %v5_13738, { 0, 2, 1 }
  uselistorder i32 %v3_1372c, { 1, 0 }
  uselistorder i32 %v2_13724, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13714, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_136f4, { 1, 0 }
  uselistorder i32 %v3_136f0, { 1, 0 }
  uselistorder i32 %v0_136f4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13714, { 3, 2, 1, 0 }
  uselistorder i32 %v5_136cc, { 0, 2, 1 }
  uselistorder i32 %v3_136c0, { 1, 0 }
  uselistorder i32 %v2_136b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_136a8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13688, { 1, 0 }
  uselistorder i32 %v3_13684, { 1, 0 }
  uselistorder i32 %v0_13688, { 3, 2, 1, 0 }
  uselistorder i32 %v0_136a8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_13750, { 2, 0, 1 }
  uselistorder i32 %v0_13668, { 1, 0 }
  uselistorder i32 %v0_13754, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_136a830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_13658, { 2, 1, 0 }
  uselistorder i32 %v0_13658, { 2, 0, 1 }
  uselistorder i32 %v2_13650, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13650, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13650, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_136a831, { 2, 1, 0 }
  uselistorder i32 %v11_1362c, { 1, 0 }
  uselistorder i32 %v7_1362c, { 1, 0 }
  uselistorder i32 %v1_1360c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1360c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_13610, { 1, 0 }
  uselistorder i32 %v7_13604, { 0, 2, 1 }
  uselistorder i32 %v10_13600, { 1, 0 }
  uselistorder i32 %v9_135f8, { 1, 0, 2 }
  uselistorder i32 %v6_135f4, { 1, 0 }
  uselistorder i32 %v2_135ec, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_135ec, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_135fc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_135e0, { 0, 2, 1 }
  uselistorder i32 %v13_135dc, { 1, 0 }
  uselistorder i32 %v4_135d8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_135d8, { 2, 0, 1 }
  uselistorder i32 %v6_135e0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_135d0, { 0, 2, 1 }
  uselistorder i32 %v16_135cc, { 1, 0 }
  uselistorder i32 %v4_135c8, { 1, 2, 0 }
  uselistorder i32 %v0_135d8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_135d0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_135bc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_135b8, { 1, 0 }
  uselistorder i32 %v1_135b4, { 1, 0 }
  uselistorder i32 %v10_135b0, { 1, 0 }
  uselistorder i32 %v0_135b0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_135b4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_135a8, { 0, 2, 1 }
  uselistorder i32 %v2_1359c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_1359c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_135b448, { 1, 2, 0 }
  uselistorder i32 %v1_13594, { 2, 1, 0 }
  uselistorder i32 %v1_1358c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_13584, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_13580, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1357c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1357c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_13568, { 0, 2, 1 }
  uselistorder i32 %v3_1355c, { 1, 0 }
  uselistorder i32 %v2_13554, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13544, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13524, { 1, 0, 2 }
  uselistorder i32 %v5_13524, { 1, 0, 2 }
  uselistorder i32 %v2_13524, { 1, 0, 2 }
  uselistorder i32 %v3_13520, { 1, 0 }
  uselistorder i32 %v0_13524, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13544, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_134fc, { 0, 2, 1 }
  uselistorder i32 %v3_134f0, { 1, 0 }
  uselistorder i32 %v2_134e8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_134d8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_134b8, { 1, 0, 2 }
  uselistorder i32 %v5_134b8, { 1, 0, 2 }
  uselistorder i32 %v2_134b8, { 1, 0, 2 }
  uselistorder i32 %v3_134b4, { 1, 0 }
  uselistorder i32 %v0_134b8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_134d8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_13490, { 0, 2, 1 }
  uselistorder i32 %v3_13484, { 1, 0 }
  uselistorder i32 %v2_1347c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1346c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1344c, { 1, 0, 2 }
  uselistorder i32 %v5_1344c, { 1, 0, 2 }
  uselistorder i32 %v2_1344c, { 1, 0, 2 }
  uselistorder i32 %v3_13448, { 1, 0 }
  uselistorder i32 %v0_1344c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1346c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_13514, { 2, 0, 1 }
  uselistorder i32 %v0_13518, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1346c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1341c, { 1, 0 }
  uselistorder i32 %v0_1341c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_13414, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13414, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13414, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1346c75, { 2, 1, 0 }
  uselistorder i32 %v1_133f4, { 1, 0, 2 }
  uselistorder i32 %v1_133cc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_133cc, { 1, 2, 0, 3 }
  uselistorder i32 %v8_133b8, { 1, 0, 2 }
  uselistorder i32 %v6_133b4, { 1, 0 }
  uselistorder i32 %v2_133ac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_133ac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_133bc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_133a4, { 0, 2, 1 }
  uselistorder i32 %v3_133a4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_133a4, { 1, 0 }
  uselistorder i1 %v1_133a4, { 1, 0 }
  uselistorder i32 %v3_133a0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13398, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_13384, { 1, 2, 0 }
  uselistorder i32 %v12_13378, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1336c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13370, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_13360, { 0, 2, 1 }
  uselistorder i32 %v2_13358, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_13358, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_13350, { 1, 0 }
  uselistorder i32 %v1_13348, { 2, 1, 0 }
  uselistorder i32 %v2_13340, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_13340, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_13330, { 1, 0 }
  uselistorder i32 %v1_13330, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_13330, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0, 12, 3, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 18, 19, 1, 0, 10, 12, 11, 13, 2, 15, 14, 20, 21, 16, 17, 6, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 60, 61, 2, 62, 0, 3, 63, 64, 65, 66, 67, 70, 68, 69, 71, 72, 4, 73, 76, 77, 74, 78, 75, 79, 80, 81, 82, 83, 84, 152, 86, 85, 153, 88, 87, 89, 91, 90, 93, 92, 154, 95, 94, 155, 97, 96, 98, 100, 99, 102, 101, 103, 104, 108, 109, 110, 111, 105, 106, 107, 112, 115, 116, 117, 113, 114, 118, 5, 119, 121, 122, 123, 120, 124, 6, 125, 129, 130, 131, 126, 127, 128, 132, 133, 134, 135, 136, 138, 137, 139, 7, 140, 143, 144, 141, 142, 145, 8, 146, 149, 150, 147, 148, 151 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, { 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 157, 158, 159, 161, 589, 590, 591, 592, 593, 0, 594, 595, 316, 317, 318, 319, 320, 321, 499, 500, 501, 502, 503, 504, 505, 512, 506, 507, 508, 509, 510, 511, 548, 549, 550, 557, 558, 559, 560, 551, 552, 553, 554, 555, 556, 23, 24, 25, 162, 163, 3, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 10, 11, 84, 85, 13, 12, 14, 15, 16, 17, 18, 19, 86, 87, 20, 21, 88, 89, 90, 91, 92, 93, 94, 22, 103, 104, 105, 106, 4, 107, 108, 109, 95, 96, 97, 98, 99, 100, 101, 102, 325, 326, 327, 328, 329, 330, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 1, 128, 129, 5, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 2, 147, 175, 176, 177, 178, 179, 8, 180, 181, 182, 183, 184, 185, 186, 187, 9, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 6, 491, 492, 493, 494, 495, 496, 497, 498, 561, 562, 563, 564, 565, 566, 567, 568, 7, 569, 570, 571, 572, 573, 574, 575, 576, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 308, 309, 310, 311, 312, 313, 314, 315, 322, 323, 324 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 5, 6, 7, 16, 17, 8, 9, 10, 11, 0, 12, 13, 14, 15, 18, 19, 20, 21, 1, 22, 23, 24, 2, 25, 26, 27, 3, 28, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 3, 5, 6, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 5, 6, 3, 4, 0, 2 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 72, 73, 37, 38, 1, 74, 75, 35, 36, 16, 15, 66, 45, 67, 46, 47, 54, 58, 39, 40, 41, 42, 43, 44, 61, 48, 49, 50, 51, 52, 53, 55, 56, 62, 57, 63, 59, 60, 68, 69, 70, 64, 65, 71, 17, 18, 19, 20, 2, 21, 22, 3, 23, 4, 5, 6, 7, 8, 9, 10, 78, 24, 11, 79, 25, 26, 12, 80, 27, 81, 82, 83, 28, 29, 13, 84, 30, 85, 31, 32, 14, 86, 33, 87, 88, 76, 34, 77 }
  uselistorder i32* @lr, { 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 1, 106, 107, 108, 2, 109, 110, 111, 3, 112, 113, 114, 115, 116, 117, 118, 119, 21, 22, 120, 121, 122, 123, 124, 74, 75, 76, 77, 78, 79, 80, 81, 23, 24, 25, 26, 27, 8, 82, 5, 6, 83, 36, 37, 84, 47, 48, 49, 50, 51, 38, 39, 40, 41, 42, 7, 9, 12, 13, 4, 0, 16, 14, 15, 10, 11, 85, 86, 87, 88, 89, 90, 17, 18, 19, 20, 28, 29, 30, 31, 43, 44, 45, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 95, 32, 33, 34, 35 }
  uselistorder i32 16, { 31, 32, 33, 169, 34, 170, 171, 35, 172, 173, 36, 174, 175, 176, 177, 178, 179, 82, 83, 69, 70, 87, 84, 85, 86, 88, 26, 89, 90, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 48, 73, 37, 74, 38, 49, 71, 72, 75, 77, 78, 79, 27, 68, 14, 15, 24, 65, 16, 80, 17, 50, 76, 39, 81, 51, 52, 91, 92, 54, 93, 94, 95, 96, 97, 1, 53, 98, 99, 100, 56, 101, 102, 103, 104, 105, 2, 55, 106, 57, 107, 108, 109, 18, 110, 19, 111, 66, 20, 58, 59, 112, 113, 3, 41, 114, 40, 115, 60, 116, 117, 118, 21, 119, 22, 120, 67, 23, 61, 62, 121, 122, 4, 43, 123, 42, 124, 28, 126, 127, 128, 129, 63, 130, 131, 132, 133, 134, 135, 136, 137, 29, 138, 139, 140, 141, 143, 142, 144, 145, 146, 147, 148, 149, 150, 30, 151, 152, 153, 154, 155, 157, 156, 158, 159, 160, 161, 162, 163, 64, 164, 165, 166, 45, 167, 44, 47, 168, 46, 125 }
  uselistorder i32 20, { 108, 3, 109, 110, 0, 4, 111, 30, 31, 21, 22, 1, 32, 33, 34, 35, 23, 25, 5, 26, 6, 27, 20, 24, 28, 29, 36, 37, 38, 7, 39, 40, 41, 42, 43, 44, 45, 46, 8, 47, 48, 49, 2, 50, 51, 52, 53, 16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 17, 63, 64, 65, 66, 67, 68, 69, 71, 72, 9, 73, 74, 75, 76, 77, 78, 79, 10, 80, 81, 82, 83, 18, 19, 84, 12, 85, 11, 86, 87, 88, 89, 14, 90, 13, 91, 92, 93, 94, 95, 96, 97, 98, 15, 99, 100, 101, 102, 103, 104, 105, 106, 107, 70 }
  uselistorder i32 27, { 1, 0, 8, 3, 10, 2, 9, 4, 11, 5, 12, 6, 13, 7, 14 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 21, 22, 23, 60, 62, 0, 15, 28, 3, 17, 24, 18, 25, 19, 26, 16, 27, 1, 20, 29, 30, 4, 31, 32, 5, 33, 34, 6, 35, 36, 7, 37, 38, 39, 40, 8, 41, 42, 43, 44, 9, 45, 46, 47, 48, 49, 10, 50, 51, 52, 53, 54, 11, 55, 56, 57, 58, 12, 59, 13, 14, 2, 61 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 2, 3, 5, 4 }
  uselistorder i32* @ip, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 2, 3, 55, 6, 7, 8, 9, 10, 11, 12, 1, 0, 4, 5 }
  uselistorder i1 false, { 25, 26, 27, 35, 19, 24, 36, 37, 21, 22, 23, 38, 18, 39, 40, 0, 30, 29, 31, 28, 1, 3, 2, 16, 4, 33, 17, 15, 20, 34, 7, 6, 5, 8, 9, 10, 32, 11, 12, 14, 13, 41 }
  uselistorder i32 4, { 66, 57, 58, 5, 393, 59, 394, 47, 6, 7, 60, 395, 61, 396, 397, 398, 399, 62, 400, 401, 402, 403, 63, 404, 405, 406, 407, 408, 8, 409, 410, 411, 412, 413, 64, 414, 46, 415, 416, 417, 418, 419, 420, 9, 10, 65, 421, 229, 230, 170, 171, 231, 232, 233, 422, 423, 424, 425, 426, 117, 118, 119, 48, 120, 121, 374, 376, 375, 372, 373, 342, 343, 344, 345, 377, 378, 379, 380, 346, 347, 348, 381, 382, 122, 123, 124, 125, 126, 41, 11, 12, 234, 235, 236, 237, 238, 239, 13, 14, 53, 15, 16, 54, 383, 384, 168, 17, 18, 85, 67, 298, 288, 49, 200, 201, 202, 192, 193, 203, 204, 181, 182, 88, 172, 173, 174, 89, 175, 90, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 87, 195, 196, 197, 194, 55, 205, 68, 91, 92, 19, 206, 20, 207, 208, 21, 22, 209, 210, 43, 211, 42, 198, 86, 199, 216, 93, 218, 94, 219, 95, 220, 221, 217, 212, 96, 213, 214, 215, 385, 222, 52, 51, 50, 223, 97, 23, 24, 25, 26, 27, 224, 44, 225, 45, 226, 227, 228, 240, 241, 127, 242, 243, 244, 245, 128, 129, 1, 246, 98, 247, 69, 248, 249, 250, 130, 251, 252, 131, 132, 2, 99, 253, 70, 254, 71, 255, 256, 133, 257, 258, 259, 260, 261, 134, 135, 262, 263, 101, 264, 3, 100, 265, 72, 266, 102, 267, 268, 136, 269, 270, 271, 272, 273, 137, 138, 274, 275, 104, 276, 4, 103, 277, 73, 278, 105, 279, 28, 289, 290, 139, 291, 292, 293, 140, 141, 107, 294, 106, 296, 74, 297, 299, 142, 300, 301, 143, 144, 302, 75, 303, 76, 304, 305, 306, 307, 145, 308, 309, 310, 146, 147, 109, 311, 108, 77, 312, 78, 313, 314, 315, 316, 317, 318, 111, 319, 112, 320, 148, 321, 322, 323, 149, 150, 113, 324, 110, 325, 79, 326, 80, 327, 328, 329, 151, 152, 330, 153, 331, 332, 154, 155, 114, 333, 81, 334, 82, 335, 336, 337, 338, 339, 115, 340, 83, 341, 386, 387, 388, 389, 116, 391, 84, 392, 156, 349, 350, 29, 157, 351, 352, 30, 158, 353, 354, 31, 159, 355, 356, 32, 160, 357, 358, 33, 161, 56, 359, 360, 34, 361, 162, 362, 363, 35, 163, 364, 365, 36, 164, 366, 367, 37, 165, 368, 369, 38, 166, 370, 371, 39, 390, 280, 281, 282, 283, 40, 284, 285, 0, 286, 167, 287, 295, 169 }
  uselistorder i32* @r2, { 64, 65, 26, 9, 27, 29, 28, 30, 31, 32, 33, 7, 66, 1, 67, 72, 73, 76, 68, 55, 59, 60, 63, 61, 62, 56, 57, 58, 54, 14, 0, 74, 2, 75, 5, 34, 35, 36, 8, 10, 69, 70, 71, 3, 37, 38, 39, 6, 22, 23, 24, 4, 40, 48, 51, 52, 49, 50, 53, 15, 11, 12, 13, 18, 19, 16, 17, 20, 21, 25, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder label %dec_label_pc_13798, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1372c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_136c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13660, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_135ec, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_135b0, { 1, 0 }
  uselistorder label %dec_label_pc_1359c, { 1, 0 }
  uselistorder label %dec_label_pc_1355c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_134f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13484, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13424, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_13398, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13358, { 1, 0 }
}

define i32 @function_137b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_137b8:
  ret i32 %arg1
}

define i32 @function_137c0() local_unnamed_addr {
dec_label_pc_137c0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_137c0 = load i32, i32* @r0, align 4
  %v2_137c0 = icmp eq i32 %v0_137c0, 0
  %v3_137c4 = load i32, i32* @r4, align 4
  store i32 %v3_137c4, i32* %stack_var_-20, align 4
  %v0_137c8 = load i32, i32* @r1, align 4
  br i1 %v2_137c0, label %dec_label_pc_138a0, label %dec_label_pc_137dc.lr.ph

dec_label_pc_137dc:                               ; preds = %dec_label_pc_137dc.lr.ph, %dec_label_pc_13860
  %v1_13860 = phi i32 [ 0, %dec_label_pc_137dc.lr.ph ], [ %v5_13860, %dec_label_pc_13860 ]
  %v0_13864 = phi i32 [ 1, %dec_label_pc_137dc.lr.ph ], [ %v1_13864, %dec_label_pc_13860 ]
  %v0_137e4 = phi i32 [ %v0_137c0, %dec_label_pc_137dc.lr.ph ], [ %v0_137e425, %dec_label_pc_13860 ]
  %v1_137e4 = inttoptr i32 %v0_137e4 to i8*
  %v2_137e4 = load i8, i8* %v1_137e4, align 1
  %v3_137e4 = zext i8 %v2_137e4 to i32
  %v3_137e8 = mul nuw nsw i32 %v3_137e4, 2
  %v4_137e8 = add i32 %v3_137e8, %v2_137e0.pre
  %v5_137e8 = inttoptr i32 %v4_137e8 to i8*
  %v6_137e8 = load i8, i8* %v5_137e8, align 1
  %v1_137ec = and i8 %v6_137e8, 8
  %v2_137ec = icmp eq i8 %v1_137ec, 0
  br i1 %v2_137ec, label %dec_label_pc_138a0, label %dec_label_pc_137f4

dec_label_pc_137f4:                               ; preds = %dec_label_pc_137dc
  br label %dec_label_pc_13814

dec_label_pc_137fc:                               ; preds = %dec_label_pc_13814
  %v3_13800 = mul i32 %v0_13860, 10
  %v4_13800 = add i32 %v3_13814, %v3_13800
  %v1_13804 = add i32 %v4_13800, -48
  %v8_1380c = icmp sgt i32 %v1_13804, 255
  br i1 %v8_1380c, label %dec_label_pc_138a0, label %dec_label_pc_13810

dec_label_pc_13810:                               ; preds = %dec_label_pc_137fc
  %v1_13810 = add i32 %v0_13850, 1
  store i32 %v1_13810, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13814

dec_label_pc_13814:                               ; preds = %dec_label_pc_137f4, %dec_label_pc_13810
  %v0_13860 = phi i32 [ 0, %dec_label_pc_137f4 ], [ %v1_13804, %dec_label_pc_13810 ]
  %v0_13850 = phi i32 [ %v0_137e4, %dec_label_pc_137f4 ], [ %v1_13810, %dec_label_pc_13810 ]
  %v1_13814 = inttoptr i32 %v0_13850 to i8*
  %v2_13814 = load i8, i8* %v1_13814, align 1
  %v3_13814 = zext i8 %v2_13814 to i32
  %v2_13818 = mul nuw nsw i32 %v3_13814, 2
  %v2_1381c = add i32 %v2_13818, %v2_137e0.pre
  %v3_13820 = inttoptr i32 %v2_1381c to i8*
  %v4_13820 = load i8, i8* %v3_13820, align 1
  %v6_13820 = zext i8 %v4_13820 to i32
  %v1_1382c = and i32 %v6_13820, 8
  %v2_1382c = icmp eq i32 %v1_1382c, 0
  br i1 %v2_1382c, label %dec_label_pc_13834, label %dec_label_pc_137fc

dec_label_pc_13834:                               ; preds = %dec_label_pc_13814
  %v8_13838 = icmp sgt i32 %v0_13864, 3
  br i1 %v8_13838, label %dec_label_pc_1384c, label %dec_label_pc_1383c

dec_label_pc_1383c:                               ; preds = %dec_label_pc_13834
  %v7_1383c = icmp eq i8 %v2_13814, 46
  br i1 %v7_1383c, label %dec_label_pc_13844, label %dec_label_pc_138a0

dec_label_pc_13844:                               ; preds = %dec_label_pc_1383c
  %v1_13844 = add i32 %v0_13850, 1
  store i32 %v1_13844, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13860

dec_label_pc_1384c:                               ; preds = %dec_label_pc_13834
  %v2_1384c = icmp eq i8 %v2_13814, 0
  %v1_13850 = add i32 %v0_13850, 1
  store i32 %v1_13850, i32* %r0.global-to-local, align 4
  br i1 %v2_1384c, label %dec_label_pc_13860, label %dec_label_pc_13858

dec_label_pc_13858:                               ; preds = %dec_label_pc_1384c
  %v1_13858 = and i32 %v6_13820, 32
  %v2_13858 = icmp eq i32 %v1_13858, 0
  br i1 %v2_13858, label %dec_label_pc_138a0, label %dec_label_pc_13860

dec_label_pc_13860:                               ; preds = %dec_label_pc_13858, %dec_label_pc_1384c, %dec_label_pc_13844
  %v0_137e425 = phi i32 [ %v1_13850, %dec_label_pc_13858 ], [ %v1_13850, %dec_label_pc_1384c ], [ %v1_13844, %dec_label_pc_13844 ]
  %v4_13860 = mul i32 %v1_13860, 256
  %v5_13860 = or i32 %v0_13860, %v4_13860
  %v1_13864 = add nuw nsw i32 %v0_13864, 1
  %v7_1386c = icmp slt i32 %v1_13864, 5
  br i1 %v7_1386c, label %dec_label_pc_137dc, label %dec_label_pc_13870

dec_label_pc_137dc.lr.ph:                         ; preds = %dec_label_pc_137c0
  %v2_137e0.pre = load i32, i32* bitcast (i32** @global_var_1c170.415 to i32*), align 4
  br label %dec_label_pc_137dc

dec_label_pc_13870:                               ; preds = %dec_label_pc_13860
  %v2_13870 = icmp eq i32 %v0_137c8, 0
  br i1 %v2_13870, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_13870
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_13870
  %v2_13878 = and i32 %v5_13860, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v2_13874 = udiv i32 %v5_13860, 256
  %v4_1387c = and i32 %v2_13874, 65280
  %v4_13880 = mul i32 %v2_13878, 256
  %v5_13884 = udiv i32 %v5_13860, 16777216
  %v6_13884 = or i32 %v4_1387c, %v5_13884
  %v5_13888 = mul i32 %v0_13860, 16777216
  %v6_13888 = or i32 %v4_13880, %v5_13888
  %v3_1388c = or i32 %v6_13884, %v6_13888
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_13898 = inttoptr i32 %v0_137c8 to i32*
  store i32 %v3_1388c, i32* %v3_13898, align 4
  %v2_1389c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_1389c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_1389c = phi i32 [ 1, %bb ], [ %v17_1389c.pre, %bb40 ]
  %v2_1389c = phi i32 [ %v3_137c4, %bb ], [ %v2_1389c.pre, %bb40 ]
  store i32 %v2_1389c, i32* @r4, align 4
  ret i32 %v17_1389c

dec_label_pc_138a0:                               ; preds = %dec_label_pc_1383c, %dec_label_pc_13858, %dec_label_pc_137dc, %dec_label_pc_137fc, %dec_label_pc_137c0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_137c4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_137e0.pre, { 1, 0 }
  uselistorder i32 %v1_13864, { 1, 0 }
  uselistorder i32 %v0_13850, { 0, 1, 3, 2 }
  uselistorder i32 %v3_137c4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 50, 48, 51, 49, 53, 52, 57, 54, 56, 55, 58, 60, 59, 62, 61, 64, 63, 65, 66, 68, 67, 69, 72, 70, 73, 71, 75, 74, 76, 78, 77, 83, 79, 84, 85, 80, 86, 81, 87, 82, 88, 91, 92, 93, 89, 94, 90, 95, 97, 96, 101, 98, 102, 99, 100, 103, 106, 107, 108, 104, 109, 105, 110, 112, 111, 116, 113, 117, 114, 115, 118, 126, 119, 127, 120, 128, 121, 129, 130, 122, 131, 123, 132, 124, 133, 125, 135, 134, 139, 136, 140, 137, 141, 138, 142, 144, 143, 151, 145, 152, 153, 146, 154, 149, 155, 147, 156, 157, 148, 150, 158, 160, 159, 164, 161, 165, 166, 162, 163, 167, 168, 169, 172, 170, 173, 171, 174, 175, 177, 176, 178, 182, 179, 183, 184, 180, 185, 181, 186, 188, 187, 192, 189, 193, 190, 194, 191, 195, 196, 198, 197, 202, 199, 203, 200, 204, 201, 205, 207, 206, 208 }
  uselistorder i32 65280, { 0, 27, 2, 3, 26, 1, 4, 5, 6, 7, 8, 28, 9, 10, 11, 12, 13, 29, 14, 15, 16, 30, 17, 31, 18, 32, 33, 34, 19, 35, 36, 37, 20, 38, 21, 22, 39, 23, 24, 25 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.25 to i32), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19 }
  uselistorder i32 5, { 16, 25, 17, 5, 18, 6, 2, 20, 26, 21, 27, 22, 28, 19, 29, 3, 0, 23, 24, 30, 31, 7, 32, 33, 34, 8, 35, 36, 37, 38, 9, 39, 40, 41, 42, 10, 43, 47, 48, 49, 50, 11, 51, 52, 53, 54, 12, 55, 56, 57, 58, 59, 60, 61, 13, 62, 63, 64, 65, 66, 67, 68, 14, 69, 70, 71, 72, 73, 74, 75, 76, 15, 77, 4, 78, 44, 1, 45, 46 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 65, 66, 70, 73, 74, 75, 71, 72, 76, 77, 78, 79, 80, 492, 493, 81, 82, 83, 84, 85, 86, 87, 495, 88, 89, 91, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 102, 107, 106, 105, 108, 490, 496, 113, 109, 112, 110, 111, 494, 115, 114, 116, 117, 118, 121, 120, 119, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 139, 148, 144, 149, 145, 141, 142, 146, 143, 150, 151, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 167, 166, 174, 169, 180, 181, 175, 170, 182, 183, 176, 171, 184, 177, 185, 178, 186, 179, 187, 172, 188, 173, 189, 190, 191, 192, 193, 194, 195, 198, 199, 202, 200, 196, 203, 201, 197, 206, 205, 204, 209, 210, 207, 211, 208, 212, 218, 213, 220, 219, 214, 216, 215, 217, 221, 488, 497, 222, 223, 224, 225, 226, 229, 227, 228, 231, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 251, 249, 245, 252, 250, 246, 255, 254, 253, 258, 259, 256, 260, 257, 261, 267, 262, 269, 268, 263, 265, 264, 266, 270, 489, 498, 271, 272, 273, 274, 275, 278, 276, 277, 280, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 297, 299, 300, 301, 305, 311, 306, 302, 307, 312, 308, 313, 309, 303, 314, 304, 315, 316, 310, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 328, 331, 334, 335, 333, 332, 336, 339, 338, 337, 346, 343, 347, 344, 340, 348, 345, 341, 342, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 359, 361, 362, 363, 365, 364, 366, 367, 368, 369, 372, 379, 373, 374, 370, 375, 376, 377, 371, 380, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 393, 395, 396, 397, 401, 408, 402, 403, 409, 404, 398, 399, 405, 400, 406, 410, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 428, 430, 431, 432, 443, 438, 433, 444, 439, 445, 440, 446, 441, 434, 435, 436, 447, 448, 449, 450, 442, 437, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 475, 477, 478, 479, 480, 481, 482, 484, 483, 485, 486, 487, 491 }
  uselistorder i32 32, { 49, 37, 38, 35, 45, 46, 40, 41, 44, 5, 4, 7, 6, 9, 8, 36, 34, 47, 48, 11, 10, 13, 12, 15, 14, 17, 16, 39, 19, 18, 20, 22, 21, 23, 24, 26, 25, 42, 43, 27, 0, 28, 1, 2, 3, 50, 51, 29, 52, 30, 31, 32, 33 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 3, { 40, 62, 63, 162, 64, 65, 66, 67, 68, 69, 73, 87, 163, 4, 155, 157, 158, 0, 70, 23, 71, 24, 159, 72, 41, 25, 27, 74, 44, 75, 2, 76, 77, 78, 79, 42, 5, 80, 81, 82, 83, 26, 84, 45, 85, 43, 86, 46, 28, 47, 48, 49, 50, 1, 88, 89, 90, 91, 92, 93, 94, 7, 6, 51, 95, 29, 96, 97, 98, 99, 100, 9, 8, 52, 101, 30, 102, 103, 104, 105, 53, 106, 11, 10, 32, 107, 31, 108, 109, 110, 111, 54, 112, 13, 12, 34, 113, 33, 114, 55, 116, 117, 118, 119, 120, 121, 56, 122, 57, 123, 35, 124, 125, 126, 127, 128, 15, 14, 58, 36, 129, 130, 131, 132, 133, 134, 17, 16, 59, 135, 37, 136, 137, 138, 139, 140, 141, 142, 19, 18, 60, 143, 38, 144, 145, 146, 147, 148, 149, 150, 21, 20, 61, 151, 39, 152, 153, 154, 160, 161, 22, 156, 3, 115 }
  uselistorder i32 8, { 96, 133, 23, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 24, 150, 61, 62, 63, 64, 68, 65, 66, 67, 151, 129, 128, 126, 127, 115, 116, 117, 130, 131, 132, 118, 119, 120, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 152, 69, 70, 71, 72, 8, 9, 45, 19, 10, 11, 16, 12, 30, 51, 31, 13, 14, 15, 46, 36, 47, 37, 48, 38, 49, 39, 50, 22, 52, 53, 54, 55, 57, 40, 58, 41, 59, 60, 56, 73, 74, 75, 3, 76, 77, 78, 4, 79, 80, 81, 82, 83, 84, 85, 5, 86, 87, 88, 89, 90, 91, 92, 6, 97, 32, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121, 33, 122, 34, 123, 35, 124, 42, 125, 0, 1, 44, 93, 94, 43, 95, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 10, 42, 43, 0, 3, 4, 24, 25, 44, 1, 26, 11, 29, 31, 12, 30, 13, 32, 14, 33, 6, 34, 35, 27, 15, 36, 28, 37, 16, 38, 39, 17, 5, 18, 19, 40, 20, 41, 8, 45, 46, 47, 48, 49, 50, 21, 51, 52, 53, 22, 54, 56, 57, 2, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 7, 71, 9, 72, 55, 23 }
  uselistorder i8 0, { 5, 0, 1, 23, 4, 24, 25, 2, 8, 26, 27, 28, 29, 30, 31, 32, 6, 33, 34, 35, 36, 11, 37, 3, 10, 9, 12, 38, 39, 40, 41, 42, 20, 43, 46, 21, 44, 45, 19, 47, 48, 49, 50, 51, 13, 14, 7, 15, 52, 16, 17, 18, 22, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 }
  uselistorder i32 2, { 5, 133, 249, 250, 61, 251, 252, 52, 253, 51, 254, 50, 137, 80, 81, 197, 82, 198, 83, 199, 6, 134, 255, 56, 84, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 135, 16, 17, 18, 19, 20, 86, 87, 85, 53, 54, 88, 153, 89, 92, 141, 93, 142, 91, 143, 147, 70, 138, 71, 139, 72, 140, 73, 144, 74, 145, 75, 146, 76, 152, 148, 149, 150, 151, 62, 94, 154, 21, 22, 155, 156, 157, 95, 158, 57, 136, 159, 90, 160, 23, 96, 246, 98, 161, 100, 162, 99, 163, 97, 101, 164, 24, 25, 102, 165, 63, 103, 104, 105, 106, 55, 60, 166, 167, 168, 233, 234, 169, 170, 171, 172, 173, 174, 1, 26, 27, 28, 29, 30, 31, 107, 175, 77, 176, 177, 178, 179, 180, 2, 32, 33, 34, 35, 36, 37, 109, 108, 181, 182, 38, 183, 184, 58, 185, 111, 186, 3, 39, 40, 41, 42, 43, 112, 187, 110, 188, 189, 44, 190, 191, 59, 192, 114, 193, 4, 45, 46, 47, 48, 49, 115, 194, 113, 195, 200, 201, 202, 203, 204, 205, 206, 117, 207, 116, 208, 209, 210, 211, 212, 119, 118, 213, 214, 215, 216, 217, 218, 219, 220, 121, 221, 120, 222, 223, 224, 225, 123, 226, 124, 227, 228, 229, 230, 125, 231, 122, 232, 235, 236, 237, 238, 239, 240, 127, 241, 126, 242, 243, 64, 65, 128, 78, 129, 244, 247, 66, 67, 130, 79, 131, 248, 68, 245, 132, 69, 196 }
  uselistorder i32* @r1, { 49, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 1, 98, 99, 23, 24, 26, 25, 5, 7, 100, 0, 101, 47, 48, 18, 103, 66, 71, 72, 75, 73, 74, 67, 68, 69, 70, 65, 76, 102, 11, 6, 50, 27, 77, 28, 3, 78, 29, 30, 51, 52, 12, 8, 9, 10, 14, 13, 79, 15, 16, 17, 19, 20, 21, 22, 31, 32, 33, 4, 34, 60, 61, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 80 }
  uselistorder label %dec_label_pc_138a0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_13814, { 1, 0 }
}

define i32 @function_138ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_138ac:
  %v3_138ac = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_138b4 = call i32 @function_11178()
  %v0_138b8 = load i32, i32* @r4, align 4
  store i32 %v3_138ac, i32* @r4, align 4
  %v2_138c0 = call i32 @function_11220(i32 %v0_138b4, i32 %v0_138b8)
  ret i32 %v2_138c0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11220, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_11178, { 0, 3, 2, 1 }
}

define i32 @function_138c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_138c4:
  %v1_138c4 = add i32 %arg1, 28
  %v2_138c4 = inttoptr i32 %v1_138c4 to i32*
  %v3_138c4 = load i32, i32* %v2_138c4, align 4
  %v1_138cc = add i32 %arg1, 44
  %v2_138cc = inttoptr i32 %v1_138cc to i32*
  %v3_138cc = load i32, i32* %v2_138cc, align 4
  store i32 %v3_138c4, i32* @global_var_1c3ec.468, align 4
  store i32 %v3_138cc, i32* @global_var_1c3f0.470, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 28, 0, 18, 19, 7, 8, 27, 1, 9, 10, 11, 12, 13, 14, 15, 2, 6, 17, 16, 3, 4, 5, 20, 21, 22, 23, 24, 25, 26 }
}

define i32 @function_138e8(i32* %arg1) local_unnamed_addr {
dec_label_pc_138e8:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_138f0 = call i32 @brk(i32* %arg1)
  %v3_138f4 = icmp ult i32 %v2_138f0, %tmp
  store i32 %v2_138f0, i32* @global_var_1c22c.465, align 4
  br i1 %v3_138f4, label %dec_label_pc_13908, label %dec_label_pc_13918

dec_label_pc_13908:                               ; preds = %dec_label_pc_138e8
  %v0_13908 = call i32 @function_116f4()
  %v2_13910 = inttoptr i32 %v0_13908 to i32*
  store i32 12, i32* %v2_13910, align 4
  br label %dec_label_pc_13918

dec_label_pc_13918:                               ; preds = %dec_label_pc_138e8, %dec_label_pc_13908
  %v0_13918 = phi i32 [ 0, %dec_label_pc_138e8 ], [ -1, %dec_label_pc_13908 ]
  ret i32 %v0_13918

; uselistorder directives
  uselistorder i32 12, { 16, 10, 115, 116, 117, 119, 120, 121, 122, 11, 118, 123, 124, 125, 126, 127, 128, 129, 62, 63, 29, 30, 64, 17, 18, 110, 111, 112, 0, 107, 113, 7, 114, 8, 108, 4, 109, 19, 20, 6, 65, 66, 21, 67, 68, 22, 12, 41, 46, 38, 47, 34, 31, 32, 33, 35, 36, 37, 39, 42, 43, 40, 48, 49, 50, 9, 51, 52, 53, 44, 45, 55, 56, 57, 28, 23, 58, 24, 59, 25, 60, 5, 61, 54, 103, 69, 70, 71, 72, 26, 73, 74, 75, 76, 77, 27, 78, 79, 80, 81, 82, 83, 13, 84, 85, 86, 87, 88, 89, 14, 90, 91, 15, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 1, 2, 3 }
  uselistorder i32 ()* @function_116f4, { 18, 55, 27, 38, 9, 8, 7, 6, 37, 36, 35, 5, 56, 26, 25, 41, 40, 17, 10, 54, 53, 16, 21, 20, 15, 30, 52, 51, 50, 14, 13, 34, 33, 32, 49, 39, 29, 4, 3, 48, 47, 31, 22, 46, 2, 12, 45, 24, 11, 23, 19, 1, 0, 44, 43, 42, 28 }
  uselistorder i32* @global_var_1c22c.465, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13918, { 1, 0 }
}

define i32 @function_13924(i32 %arg1) local_unnamed_addr {
dec_label_pc_13924:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13928 = load i32, i32* @global_var_1c000.428, align 4
  %v7_1392c = icmp eq i32 %v3_13928, -1
  %v3_13930 = load i32, i32* @r4, align 4
  store i32 %v3_13930, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1c000.428 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1392c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_13924
  store i32 %v3_13930, i32* %r4.global-to-local, align 4
  %v9_13938 = load i32, i32* @r0, align 4
  ret i32 %v9_13938

.preheader:                                       ; preds = %dec_label_pc_13924, %.preheader
  %v0_13940 = phi i32 [ %v3_13944, %.preheader ], [ %v3_13928, %dec_label_pc_13924 ]
  call void @__pseudo_branch(i32 %v0_13940)
  %v0_13944 = load i32, i32* %r4.global-to-local, align 4
  %v1_13944 = add i32 %v0_13944, -4
  %v2_13944 = inttoptr i32 %v1_13944 to i32*
  %v3_13944 = load i32, i32* %v2_13944, align 4
  store i32 %v1_13944, i32* %r4.global-to-local, align 4
  %v3_13948 = icmp eq i32 %v3_13944, -1
  br i1 %v3_13948, label %dec_label_pc_13950, label %.preheader

dec_label_pc_13950:                               ; preds = %.preheader
  %v2_13950 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13950, i32* %r4.global-to-local, align 4
  %v8_13950 = load i32, i32* @r0, align 4
  ret i32 %v8_13950

; uselistorder directives
  uselistorder i32 %v3_13944, { 1, 0 }
  uselistorder i32 %v3_13928, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, { 146, 0, 89, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 147, 90, 227, 91, 266, 92, 257, 249, 93, 288, 94, 289, 95, 290, 96, 291, 135, 87, 250, 251, 97, 252, 253, 98, 292, 1, 148, 2, 99, 258, 259, 149, 150, 246, 247, 136, 151, 137, 152, 3, 4, 86, 78, 79, 153, 154, 155, 85, 228, 156, 229, 5, 6, 100, 267, 101, 263, 102, 264, 103, 268, 104, 255, 105, 230, 106, 231, 107, 232, 108, 269, 109, 270, 110, 157, 145, 111, 158, 112, 233, 113, 248, 114, 256, 115, 293, 294, 116, 234, 117, 235, 118, 254, 119, 262, 120, 236, 121, 295, 122, 271, 123, 237, 124, 260, 125, 272, 126, 261, 127, 265, 128, 296, 88, 297, 159, 160, 161, 162, 163, 164, 165, 166, 7, 8, 9, 10, 129, 130, 11, 167, 17, 168, 18, 169, 238, 239, 12, 170, 80, 19, 171, 172, 16, 173, 174, 175, 224, 225, 176, 177, 178, 179, 180, 181, 182, 183, 184, 222, 131, 223, 20, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 226, 14, 199, 13, 200, 201, 15, 202, 203, 204, 21, 205, 206, 132, 240, 207, 22, 208, 241, 81, 23, 24, 138, 242, 140, 243, 25, 139, 244, 26, 27, 28, 29, 141, 245, 30, 31, 32, 33, 209, 34, 82, 210, 35, 134, 36, 37, 38, 211, 39, 40, 41, 83, 42, 43, 44, 45, 46, 47, 212, 48, 49, 50, 213, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 214, 63, 133, 64, 65, 66, 215, 67, 68, 69, 216, 70, 71, 72, 217, 73, 74, 75, 76, 218, 219, 220, 221, 77, 84, 142, 143, 144 }
  uselistorder i32* @global_var_1c000.428, { 1, 0 }
  uselistorder i32 1, { 511, 262, 333, 371, 830, 831, 832, 833, 834, 354, 512, 303, 921, 339, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 515, 514, 513, 308, 309, 312, 311, 307, 306, 310, 304, 313, 305, 314, 516, 202, 201, 197, 199, 198, 200, 203, 196, 670, 214, 211, 213, 212, 517, 215, 518, 283, 284, 519, 39, 263, 520, 285, 521, 25, 522, 286, 523, 287, 750, 751, 524, 297, 293, 298, 294, 295, 299, 296, 752, 753, 754, 418, 75, 76, 72, 74, 73, 525, 282, 526, 26, 0, 530, 529, 528, 527, 218, 217, 419, 531, 219, 220, 355, 420, 532, 208, 533, 828, 538, 537, 536, 535, 534, 12, 13, 14, 15, 421, 539, 334, 740, 326, 741, 356, 540, 231, 237, 230, 234, 233, 236, 238, 232, 235, 934, 357, 543, 542, 541, 315, 316, 544, 151, 152, 150, 153, 8, 9, 10, 11, 545, 67, 68, 66, 65, 64, 546, 547, 302, 301, 548, 358, 908, 549, 264, 265, 422, 423, 331, 553, 552, 551, 550, 71, 70, 340, 554, 161, 555, 38, 254, 556, 19, 557, 261, 558, 227, 559, 266, 560, 239, 561, 275, 562, 162, 563, 835, 321, 61, 62, 63, 671, 672, 673, 674, 675, 676, 677, 935, 194, 195, 191, 192, 193, 564, 424, 425, 565, 59, 58, 60, 57, 378, 755, 566, 164, 379, 568, 567, 225, 224, 569, 54, 570, 55, 571, 240, 572, 209, 210, 573, 228, 574, 276, 575, 165, 576, 56, 577, 163, 69, 578, 20, 579, 37, 580, 289, 581, 290, 582, 300, 583, 226, 288, 216, 380, 706, 707, 381, 909, 910, 320, 911, 756, 757, 758, 327, 759, 586, 585, 584, 186, 183, 179, 180, 182, 181, 178, 184, 185, 1, 742, 743, 744, 745, 341, 836, 837, 342, 838, 588, 587, 281, 280, 760, 761, 762, 426, 589, 207, 206, 205, 204, 912, 359, 360, 2, 417, 913, 590, 86, 84, 87, 88, 85, 700, 702, 701, 427, 763, 292, 291, 879, 260, 764, 765, 766, 90, 91, 839, 591, 250, 251, 252, 253, 864, 865, 592, 258, 257, 256, 255, 259, 840, 841, 593, 24, 23, 22, 21, 684, 438, 685, 708, 362, 439, 440, 691, 692, 697, 435, 678, 679, 437, 680, 681, 436, 682, 683, 686, 434, 687, 688, 433, 689, 690, 432, 693, 694, 431, 695, 696, 430, 698, 699, 709, 441, 332, 710, 442, 711, 713, 714, 712, 715, 443, 716, 669, 361, 719, 717, 444, 718, 428, 703, 429, 704, 382, 705, 721, 445, 722, 723, 724, 373, 725, 726, 363, 732, 733, 328, 446, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 96, 97, 98, 104, 101, 99, 100, 102, 103, 106, 105, 727, 728, 447, 729, 730, 448, 731, 608, 274, 273, 268, 272, 271, 270, 267, 269, 720, 449, 610, 609, 278, 279, 277, 915, 343, 914, 372, 611, 49, 50, 48, 47, 46, 52, 53, 45, 51, 842, 613, 612, 109, 110, 112, 108, 107, 111, 614, 384, 734, 735, 383, 736, 450, 452, 451, 453, 737, 738, 454, 455, 456, 457, 458, 459, 460, 461, 625, 624, 623, 622, 621, 620, 619, 618, 617, 510, 616, 615, 187, 188, 190, 189, 462, 329, 463, 626, 385, 739, 464, 465, 627, 466, 746, 365, 747, 748, 467, 364, 749, 330, 468, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 92, 95, 93, 94, 772, 4, 767, 469, 768, 3, 769, 374, 770, 335, 336, 771, 773, 375, 774, 641, 640, 639, 504, 505, 638, 888, 386, 889, 387, 890, 5, 891, 6, 7, 775, 776, 777, 778, 779, 780, 470, 781, 344, 471, 472, 782, 388, 783, 642, 29, 27, 28, 33, 34, 36, 35, 31, 32, 30, 784, 785, 366, 786, 787, 788, 473, 789, 345, 474, 390, 389, 475, 790, 476, 791, 643, 42, 43, 44, 41, 40, 792, 793, 367, 794, 795, 796, 477, 797, 346, 478, 395, 394, 479, 798, 391, 799, 392, 800, 393, 801, 648, 647, 646, 645, 644, 158, 157, 159, 160, 154, 156, 155, 802, 803, 368, 804, 805, 806, 480, 807, 347, 481, 403, 402, 482, 808, 401, 809, 396, 810, 397, 811, 398, 812, 399, 813, 483, 814, 400, 815, 653, 652, 651, 650, 649, 146, 147, 148, 149, 143, 145, 144, 843, 844, 845, 846, 847, 848, 337, 338, 849, 850, 851, 852, 853, 854, 855, 856, 484, 857, 858, 485, 859, 862, 860, 861, 656, 655, 654, 124, 128, 127, 123, 131, 132, 134, 133, 125, 130, 129, 126, 866, 867, 868, 869, 870, 486, 348, 487, 658, 657, 249, 245, 241, 242, 247, 248, 246, 243, 244, 871, 872, 873, 369, 874, 875, 876, 349, 488, 406, 405, 489, 877, 404, 878, 659, 172, 171, 174, 175, 177, 176, 170, 173, 880, 881, 882, 370, 883, 884, 885, 350, 490, 409, 408, 491, 886, 407, 887, 664, 663, 662, 661, 660, 113, 114, 115, 119, 118, 122, 117, 116, 121, 120, 892, 893, 894, 492, 895, 896, 897, 898, 899, 900, 493, 901, 351, 494, 411, 410, 495, 902, 665, 136, 139, 140, 142, 141, 138, 137, 135, 903, 376, 323, 904, 496, 906, 905, 322, 497, 413, 412, 506, 507, 18, 17, 16, 916, 377, 325, 917, 498, 919, 918, 324, 499, 415, 414, 508, 509, 223, 222, 221, 907, 416, 500, 666, 167, 168, 169, 166, 920, 229, 816, 77, 817, 501, 820, 502, 821, 822, 818, 819, 823, 824, 825, 826, 352, 827, 353, 78, 81, 83, 79, 80, 82, 829, 503, 863, 89, 667, 668, 319, 318, 317 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13958() local_unnamed_addr {
dec_label_pc_13958:
  %v5_1395c = load i32, i32* @r0, align 4
  ret i32 %v5_1395c

; uselistorder directives
  uselistorder i32* @r0, { 4, 22, 23, 113, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 75, 76, 78, 77, 28, 160, 161, 33, 34, 35, 36, 19, 5, 9, 10, 111, 112, 29, 162, 163, 62, 165, 12, 20, 128, 24, 127, 124, 31, 126, 8, 125, 129, 164, 42, 25, 79, 80, 81, 82, 30, 83, 84, 85, 86, 21, 166, 11, 18, 43, 17, 130, 15, 131, 132, 16, 87, 133, 13, 88, 14, 89, 90, 0, 37, 38, 44, 45, 39, 40, 41, 46, 49, 50, 51, 52, 53, 1, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 91, 92, 93, 94, 95, 96, 97, 3, 98, 99, 100, 101, 102, 103, 104, 121, 122, 2, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 120, 123, 109, 110, 6, 7, 26, 27, 32 }
}

define i32 @function_13960() local_unnamed_addr {
entry:
  %v3_13964 = load i32, i32* @r4, align 4
  %v0_1396c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_13964)
  ret i32 %v0_1396c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 111, 0, 804, 805, 806, 807, 113, 112, 808, 960, 961, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 965, 966, 977, 978, 979, 980, 981, 982, 983, 984, 38, 985, 986, 987, 988, 989, 39, 990, 991, 992, 40, 993, 994, 995, 41, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1011, 1012, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 42, 1031, 1032, 1033, 1034, 1035, 43, 1036, 1037, 1038, 1039, 1040, 44, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 656, 657, 270, 658, 271, 552, 910, 911, 912, 913, 790, 659, 660, 1054, 1055, 1056, 1057, 272, 661, 1, 662, 663, 664, 1058, 1059, 1060, 114, 1061, 67, 1062, 65, 66, 1063, 1064, 1065, 273, 1069, 274, 1080, 1082, 497, 213, 1083, 275, 1081, 276, 277, 2, 1066, 1067, 115, 791, 230, 792, 280, 232, 231, 793, 794, 795, 796, 279, 798, 799, 278, 800, 1068, 635, 636, 637, 638, 639, 640, 117, 83, 641, 68, 116, 118, 282, 1070, 283, 233, 1071, 1072, 1074, 1075, 281, 916, 918, 919, 48, 214, 920, 917, 914, 915, 3, 898, 901, 899, 900, 215, 4, 923, 921, 922, 216, 119, 902, 903, 904, 908, 905, 906, 284, 5, 907, 6, 930, 931, 120, 924, 925, 926, 927, 928, 929, 7, 8, 797, 553, 554, 555, 285, 9, 286, 932, 879, 493, 880, 494, 933, 759, 556, 557, 558, 934, 935, 809, 1084, 1085, 61, 665, 287, 666, 667, 668, 669, 288, 670, 671, 672, 673, 674, 675, 676, 559, 642, 760, 1073, 560, 561, 677, 810, 562, 495, 1076, 71, 1077, 958, 563, 801, 959, 802, 881, 1078, 1079, 10, 564, 84, 565, 566, 208, 207, 498, 72, 73, 74, 75, 507, 499, 50, 49, 85, 567, 568, 569, 570, 572, 571, 11, 936, 937, 210, 209, 500, 76, 77, 78, 79, 508, 501, 52, 51, 47, 58, 938, 509, 939, 940, 941, 80, 942, 943, 944, 945, 946, 121, 502, 510, 503, 504, 947, 511, 93, 122, 678, 679, 81, 680, 681, 512, 12, 217, 123, 124, 264, 53, 125, 289, 573, 69, 682, 683, 949, 948, 950, 951, 45, 126, 952, 129, 128, 127, 265, 266, 267, 131, 130, 132, 290, 684, 685, 133, 865, 866, 94, 134, 686, 135, 574, 136, 840, 841, 137, 811, 812, 531, 138, 139, 580, 575, 86, 576, 577, 532, 533, 534, 535, 542, 525, 513, 295, 526, 527, 514, 297, 528, 529, 515, 296, 530, 548, 549, 536, 537, 538, 516, 294, 539, 540, 517, 293, 541, 543, 518, 292, 544, 551, 519, 291, 545, 550, 546, 64, 54, 211, 212, 547, 496, 578, 298, 579, 219, 581, 299, 582, 585, 586, 141, 218, 583, 584, 300, 301, 587, 588, 234, 589, 590, 520, 62, 302, 592, 593, 594, 595, 596, 597, 598, 227, 226, 599, 303, 600, 82, 601, 602, 95, 603, 506, 604, 605, 606, 607, 608, 609, 505, 610, 611, 612, 140, 304, 305, 613, 616, 617, 618, 619, 620, 142, 614, 143, 615, 13, 144, 591, 813, 814, 621, 622, 145, 623, 624, 625, 626, 627, 628, 629, 235, 306, 630, 63, 307, 631, 14, 632, 228, 633, 308, 634, 268, 149, 148, 521, 522, 269, 147, 146, 221, 225, 309, 643, 150, 151, 652, 644, 645, 646, 647, 648, 649, 650, 651, 220, 653, 654, 55, 655, 152, 153, 310, 70, 687, 688, 689, 690, 224, 691, 692, 693, 223, 694, 695, 696, 697, 89, 698, 700, 699, 87, 88, 154, 222, 311, 701, 238, 236, 237, 90, 155, 59, 156, 703, 704, 99, 96, 97, 98, 15, 702, 705, 706, 707, 708, 709, 710, 18, 19, 20, 21, 22, 711, 712, 157, 240, 713, 312, 714, 313, 715, 314, 716, 315, 717, 316, 718, 317, 719, 239, 720, 158, 159, 160, 722, 723, 721, 725, 726, 724, 23, 24, 25, 26, 27, 727, 161, 728, 729, 242, 730, 318, 731, 319, 732, 320, 733, 321, 734, 322, 735, 323, 736, 241, 737, 324, 738, 163, 162, 164, 740, 741, 739, 742, 743, 56, 745, 746, 747, 748, 325, 749, 28, 29, 30, 31, 32, 744, 165, 91, 750, 751, 247, 752, 246, 753, 245, 754, 243, 755, 244, 756, 326, 757, 327, 758, 167, 166, 168, 762, 763, 761, 764, 765, 57, 767, 768, 769, 770, 328, 771, 33, 34, 35, 36, 37, 766, 169, 92, 772, 773, 249, 774, 248, 775, 329, 776, 815, 103, 102, 100, 101, 816, 817, 60, 818, 819, 820, 821, 822, 170, 823, 824, 330, 825, 826, 827, 828, 174, 171, 172, 173, 829, 830, 831, 832, 331, 833, 834, 252, 836, 251, 837, 250, 838, 332, 839, 842, 843, 106, 104, 105, 16, 844, 845, 846, 847, 175, 848, 849, 254, 253, 850, 333, 851, 176, 179, 178, 177, 854, 855, 853, 852, 334, 857, 856, 858, 180, 859, 860, 257, 861, 256, 862, 255, 863, 335, 864, 181, 184, 183, 182, 869, 870, 868, 867, 872, 871, 873, 874, 185, 260, 875, 259, 876, 258, 877, 336, 878, 882, 883, 884, 885, 110, 107, 108, 109, 17, 886, 887, 888, 186, 889, 187, 890, 891, 263, 892, 262, 893, 261, 894, 337, 895, 192, 339, 190, 191, 188, 189, 896, 194, 193, 897, 340, 338, 199, 342, 197, 198, 195, 196, 953, 201, 200, 954, 341, 229, 909, 955, 202, 956, 777, 203, 778, 779, 204, 780, 781, 782, 205, 343, 783, 784, 46, 785, 786, 787, 788, 789, 344, 803, 206, 835, 957, 523, 524, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100 }
  uselistorder i32* @r4, { 33, 657, 661, 662, 665, 666, 438, 439, 440, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 174, 61, 609, 610, 423, 683, 684, 685, 686, 687, 688, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 689, 690, 3, 691, 692, 693, 694, 709, 710, 711, 712, 31, 713, 30, 700, 704, 705, 706, 707, 708, 695, 696, 697, 424, 425, 426, 427, 428, 429, 430, 431, 698, 699, 152, 153, 703, 611, 612, 613, 581, 4, 582, 583, 584, 5, 585, 6, 593, 594, 586, 7, 8, 587, 588, 589, 590, 591, 592, 614, 9, 622, 623, 615, 616, 617, 618, 619, 620, 621, 62, 63, 64, 65, 66, 67, 624, 625, 544, 545, 626, 627, 356, 357, 68, 69, 70, 71, 72, 73, 628, 629, 630, 631, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 74, 75, 154, 155, 358, 359, 701, 702, 2, 76, 77, 78, 79, 211, 212, 441, 442, 80, 81, 659, 660, 432, 433, 663, 664, 434, 435, 546, 547, 213, 214, 82, 83, 84, 85, 215, 216, 217, 218, 219, 632, 633, 634, 86, 87, 88, 485, 486, 487, 443, 444, 445, 34, 35, 36, 10, 89, 37, 90, 91, 38, 41, 42, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 92, 93, 51, 52, 94, 95, 96, 97, 98, 99, 100, 53, 54, 55, 56, 57, 58, 59, 60, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 122, 123, 0, 124, 112, 113, 114, 115, 116, 117, 101, 102, 103, 104, 105, 635, 636, 637, 638, 446, 447, 448, 449, 450, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 11, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 12, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 220, 221, 222, 1, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 13, 240, 14, 241, 15, 242, 16, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 17, 267, 18, 268, 19, 269, 20, 270, 271, 272, 273, 274, 21, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 22, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 23, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 24, 505, 25, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 26, 525, 27, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 28, 550, 29, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 655, 656, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 652, 653, 654, 410, 411, 412, 413, 416, 414, 415, 417, 418, 419, 420, 421, 422, 436, 437, 32, 658 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i32* @__decompiler_undefined_function_3() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
